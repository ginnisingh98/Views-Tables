--------------------------------------------------------
--  DDL for Package Body BEN_PD_COPY_TO_BEN_TWO
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."BEN_PD_COPY_TO_BEN_TWO" as
/* $Header: bepdccp2.pkb 120.12.12010000.2 2009/10/06 15:24:49 sagnanas ship $ */

--
--UPD Changes New procedure for getting the dtmodes
--
procedure get_dt_modes(p_effective_date       in date,
                       p_effective_end_date   in date,
                       p_effective_start_date in date,
                       p_dml_operation        in varchar2,
                       p_datetrack_mode       in out nocopy varchar2
          --             p_update                  out nocopy boolean
                      ) is
  l_update            boolean := true ;
  l_datetrack_mode    varchar2(80) := p_datetrack_mode ;
begin
  --
  hr_utility.set_location('Intering get_dt_modes p_dt_mode '||l_datetrack_mode,10);
  hr_utility.set_location('p_effective_start_date '||p_effective_start_date,10);
  hr_utility.set_location('p_effective_end_date '||p_effective_end_date,10);
  hr_utility.set_location('p_effective_date '||p_effective_date,10);
  --
  if p_effective_end_date <> hr_api.g_eot then
    --
    if p_dml_operation = 'INSERT' then
      --
      l_datetrack_mode := hr_api.g_update;
      l_update  := true;
      --
    elsif l_datetrack_mode in ('CORRECTION') then
      --
      l_datetrack_mode := hr_api.g_correction ;
      l_update := true;
      --
    elsif l_datetrack_mode in ('UPDATE_OVERRIDE','UPDATE' ) then
      --
      if p_effective_date = p_effective_start_date then
        l_datetrack_mode := hr_api.g_correction ;
        l_update := true;
      else
        --
        if l_datetrack_mode in ('UPDATE_OVERRIDE') then
         --
         l_datetrack_mode := hr_api.g_update_override ;
         l_update := false ;
         --
        elsif l_datetrack_mode in ('UPDATE') then
         --
         l_datetrack_mode := hr_api.g_update;
         --
        end if;
        --
      end if;
      --
    elsif l_datetrack_mode in ('UPDATE_CHANGE_INSERT') then
      --
      if p_effective_date = p_effective_start_date then
        l_datetrack_mode := hr_api.g_correction ;
        l_update := true;
      else
        l_datetrack_mode := hr_api.g_update_change_insert ;
        l_update := true;
      end if;
      --
    else
      --
      l_datetrack_mode := hr_api.g_update;
      l_update  := false;
      --
    end if;
    --
  else
    --
    if p_dml_operation = 'INSERT' then
      --
      l_datetrack_mode := hr_api.g_update;
      l_update  := false;
      --
    elsif l_datetrack_mode in ('CORRECTION') then
      --
      l_datetrack_mode := hr_api.g_correction ;
      l_update := false;
      --
    elsif l_datetrack_mode in ('UPDATE_OVERRIDE','UPDATE' ) then
      --
      if p_effective_date = p_effective_start_date then
        l_datetrack_mode := hr_api.g_correction ;
        l_update := true;
      else
        l_datetrack_mode := hr_api.g_update ;
        l_update := false ;
      end if;
      --
    elsif l_datetrack_mode in ('UPDATE_CHANGE_INSERT') then
      --
      if p_effective_date = p_effective_start_date then
        l_datetrack_mode := hr_api.g_correction ;
        l_update := false;
      else
        l_datetrack_mode := hr_api.g_update ;
        l_update := false;
      end if;
      --
    else
      --
      l_datetrack_mode := hr_api.g_update;
      l_update  := false;
      --
    end if;
    --
  end if ;
  --
  p_datetrack_mode := l_datetrack_mode ;
 --  p_update  := l_update ;
  --
  hr_utility.set_location('Leaving get_dt_modes p_dt_mode '||p_datetrack_mode,10);
  --
end get_dt_modes ;
--
-- ----------------------------------------------------------------------------
-- |------------------------< create_bnb_rows >------------------------|
-- ----------------------------------------------------------------------------
-- {Start Of Comments}
--
-- {End Of Comments}
--
   function get_fk(p_col_name varchar2,
                p_old_val number,
                p_dml_operation varchar2 default null) return number is
     l_counter number;
     l_ret_id  number := null;
   begin
     --
     /*
     if p_dml_operation = 'UPDATE' then
       --
       l_ret_id := p_old_val ;
       --
     else
     */
       --
        l_counter := nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl.LAST, 0);
        if l_counter > 0  and p_old_val is not null then
           for i in 1..l_counter loop
               if BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(i).pk_id_column = p_col_name and
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(i).old_value    = p_old_val
               then
                  l_ret_id := BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(i).new_value;
                  exit;
               end if;
           end loop;
        end if;
        --
     /*
     end if;
     */
     return l_ret_id;
     --
   end;
   --
   -- Private procedure to update the cer with target details
   --
   procedure update_cer_with_target(c_pk_rec BEN_PD_COPY_TO_BEN_ONE.g_pk_rec_type, p_copy_entity_txn_id in number) is
   begin
     hr_utility.set_location('Inside update_cer_with_target ',233);
         update ben_copy_entity_results
           set information9     = c_pk_rec.copy_reuse_type||'-'||c_pk_rec.new_value
           where copy_entity_txn_id = p_copy_entity_txn_id
           and   table_route_id     = c_pk_rec.table_route_id
           and   information1       = c_pk_rec.old_value ;
   end update_cer_with_target ;
   --
   ----------------------------------------------------------------------------
   -------------------< set_mapping >------------------------------------------
   ----------------------------------------------------------------------------
   -- This procedure determines whether the mapping is already done or not.
   -- BEN_PDSMBG -- Same Business Group
   procedure set_mapping(p_copy_entity_txn_id number) is
     --
     cursor c_cet is
     select null
     from ben_copy_entity_txns_vw
     where copy_entity_txn_id = p_copy_entity_txn_id
     and target_typ_cd in ('BEN_PDSMBG');
     --
     l_dummy    varchar2(30);
   begin
     null ;
     open c_cet ;
       fetch c_cet into l_dummy ;
       if c_cet%found then
         BEN_PD_COPY_TO_BEN_ONE.g_mapping_done := false ;
       else
         BEN_PD_COPY_TO_BEN_ONE.g_mapping_done := true ;
       end if;
     close c_cet ;
   end set_mapping ;

   --
   ---------------------------------------------------------------
   ----------------------< create_PRB_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_PRB_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_PL_ID  number;
   l_RPTG_GRP_ID  number;
   l_regy_pl_name BEN_PL_REGY_BOD_F.regy_pl_name%type;
   --
   cursor c_unique_PRB(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id,
     cpe.dml_operation,
     cpe.datetrack_mode
     from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_PL_REGY_BOD_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 --ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_PRB_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_PRB(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_PRB_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     PRB.pl_regy_bod_id new_value
   from BEN_PL_REGY_BOD_F PRB
   where
   nvl(PRB.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
   nvl(PRB.RPTG_GRP_ID,-999)     = nvl(l_RPTG_GRP_ID,-999)  and
   PRB.regy_pl_name        = l_regy_pl_name and
   PRB.business_group_id  = c_business_group_id
   and   PRB.pl_regy_bod_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_PL_REGY_BOD_F PRB1
                where
                nvl(PRB1.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
                nvl(PRB1.RPTG_GRP_ID,-999)     = nvl(l_RPTG_GRP_ID,-999)  and
                PRB1.regy_pl_name        = l_regy_pl_name and
                PRB1.business_group_id  = c_business_group_id
                and   PRB1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_PL_REGY_BOD_F PRB2
                where
                nvl(PRB2.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
                nvl(PRB2.RPTG_GRP_ID,-999)     = nvl(l_RPTG_GRP_ID,-999)  and
                PRB2.regy_pl_name        = l_regy_pl_name and
                PRB2.business_group_id  = c_business_group_id
                and   PRB2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
    --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_PRB                     c_PRB%rowtype;
   l_pl_regy_bod_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_PRB_unique in c_unique_PRB('PRB') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_PRB_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_PRB_unique.table_route_id '||r_PRB_unique.table_route_id,10);
       hr_utility.set_location(' r_PRB_unique.information1 '||r_PRB_unique.information1,10);
       hr_utility.set_location( 'r_PRB_unique.information2 '||r_PRB_unique.information2,10);
       hr_utility.set_location( 'r_PRB_unique.information3 '||r_PRB_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --

       open c_PRB(r_PRB_unique.table_route_id,
                r_PRB_unique.information1,
                r_PRB_unique.information2,
                r_PRB_unique.information3 ) ;
       --
       fetch c_PRB into r_PRB ;
       --
       close c_PRB ;
       --
       l_dml_operation:= r_PRB_unique.dml_operation ;
       l_PL_ID := get_fk('PL_ID', r_PRB.INFORMATION261,l_dml_operation);
       l_RPTG_GRP_ID := get_fk('RPTG_GRP_ID', r_PRB.INFORMATION242,l_dml_operation);
       --

       l_object_found_in_target := false ;
  --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_PRB_unique.information2 and r_PRB_unique.information3 then
               l_update := true;
               if r_PRB_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'PL_REGY_BOD_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PL_REGY_BOD_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_PRB_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_PRB_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PRB_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
          --DOUBT        log_data('PRB',l_new_value,l_prefix || r_PRB_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_PRB_min_max_dates(r_PRB_unique.table_route_id, r_PRB_unique.information1 ) ;
       fetch c_PRB_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_PRB_unique.information2);

       --
       l_regy_pl_name := r_PRB.information185 ;
       --
       if  l_RPTG_GRP_ID is null then
         close c_PRB_min_max_dates;
       else
         if p_reuse_object_flag = 'Y' then
           if c_PRB_min_max_dates%found then
             -- cursor to find the object
             open c_find_PRB_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_pl_regy_bod_id, -999)  ) ;
             fetch c_find_PRB_in_target into l_new_value ;
             if c_find_PRB_in_target%found then
               --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_PL_REGY_BOD_F',
                  p_base_key_column => 'PL_REGY_BOD_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
               if r_PRB_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'PL_REGY_BOD_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PL_REGY_BOD_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_PRB_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PRB_unique.table_route_id;
                  --
                  -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
               end if ;
               --
               l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
             end if;
             close c_find_PRB_in_target ;
             --
           end if;
         end if ;
         --
         close c_PRB_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then
           --
           l_current_pk_id := r_PRB.information1;
           --
           hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
           hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
           --
           if l_current_pk_id =  l_prev_pk_id  then
             --
             l_first_rec := false ;
             --
           else
             --
             l_first_rec := true ;
             --
           end if ;
           --

           l_effective_date := r_PRB.information2;
           if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
             l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
           end if;

           if l_first_rec and not l_update then
             -- Call Create routine.
             hr_utility.set_location(' BEN_PL_REGY_BOD_F CREATE_PLAN_REGULATORY_BODY ',20);
             BEN_PLAN_REGULATORY_BODY_API.CREATE_PLAN_REGULATORY_BODY(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_APRVD_TRMN_DT      => r_PRB.INFORMATION306
                          ,P_PL_ID      => l_PL_ID
                          ,P_PL_REGY_BOD_ID      => l_pl_regy_bod_id
                          ,P_PRB_ATTRIBUTE1      => r_PRB.INFORMATION111
                          ,P_PRB_ATTRIBUTE10      => r_PRB.INFORMATION120
                          ,P_PRB_ATTRIBUTE11      => r_PRB.INFORMATION121
                          ,P_PRB_ATTRIBUTE12      => r_PRB.INFORMATION122
                          ,P_PRB_ATTRIBUTE13      => r_PRB.INFORMATION123
                          ,P_PRB_ATTRIBUTE14      => r_PRB.INFORMATION124
                          ,P_PRB_ATTRIBUTE15      => r_PRB.INFORMATION125
                          ,P_PRB_ATTRIBUTE16      => r_PRB.INFORMATION126
                          ,P_PRB_ATTRIBUTE17      => r_PRB.INFORMATION127
                          ,P_PRB_ATTRIBUTE18      => r_PRB.INFORMATION128
                          ,P_PRB_ATTRIBUTE19      => r_PRB.INFORMATION129
                          ,P_PRB_ATTRIBUTE2      => r_PRB.INFORMATION112
                          ,P_PRB_ATTRIBUTE20      => r_PRB.INFORMATION130
                          ,P_PRB_ATTRIBUTE21      => r_PRB.INFORMATION131
                          ,P_PRB_ATTRIBUTE22      => r_PRB.INFORMATION132
                          ,P_PRB_ATTRIBUTE23      => r_PRB.INFORMATION133
                          ,P_PRB_ATTRIBUTE24      => r_PRB.INFORMATION134
                          ,P_PRB_ATTRIBUTE25      => r_PRB.INFORMATION135
                          ,P_PRB_ATTRIBUTE26      => r_PRB.INFORMATION136
                          ,P_PRB_ATTRIBUTE27      => r_PRB.INFORMATION137
                          ,P_PRB_ATTRIBUTE28      => r_PRB.INFORMATION138
                          ,P_PRB_ATTRIBUTE29      => r_PRB.INFORMATION139
                          ,P_PRB_ATTRIBUTE3      => r_PRB.INFORMATION113
                          ,P_PRB_ATTRIBUTE30      => r_PRB.INFORMATION140
                          ,P_PRB_ATTRIBUTE4      => r_PRB.INFORMATION114
                          ,P_PRB_ATTRIBUTE5      => r_PRB.INFORMATION115
                          ,P_PRB_ATTRIBUTE6      => r_PRB.INFORMATION116
                          ,P_PRB_ATTRIBUTE7      => r_PRB.INFORMATION117
                          ,P_PRB_ATTRIBUTE8      => r_PRB.INFORMATION118
                          ,P_PRB_ATTRIBUTE9      => r_PRB.INFORMATION119
                          ,P_PRB_ATTRIBUTE_CATEGORY      => r_PRB.INFORMATION110
                          ,P_QUALD_DT      => r_PRB.INFORMATION309
                          ,P_QUALD_FLAG      => r_PRB.INFORMATION11
                          ,P_REGY_PL_NAME      => r_PRB.INFORMATION185
             ,P_RPTG_GRP_ID      => l_RPTG_GRP_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
             );
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             -- Update all relevent cer records with new pk_id
             hr_utility.set_location('Before plsql table ',222);
             hr_utility.set_location('new_value id '||l_pl_regy_bod_id,222);
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'PL_REGY_BOD_ID' ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_PRB.information1 ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_PL_REGY_BOD_ID ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PRB_unique.table_route_id;
             hr_utility.set_location('After plsql table ',222);
             --
             -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
             --
             BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             --
           else
             --
             -- Call Update routine for the pk_id created in prev run .
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             hr_utility.set_location(' BEN_PL_REGY_BOD_F UPDATE_PLAN_REGULATORY_BODY ',30);
             --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_PRB.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_PRB.information3,
               p_effective_start_date  => r_PRB.information2,
               p_dml_operation         => r_PRB.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_PL_REGY_BOD_ID   := r_PRB.information1;
             l_object_version_number := r_PRB.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END

             BEN_PLAN_REGULATORY_BODY_API.UPDATE_PLAN_REGULATORY_BODY(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
            ,P_APRVD_TRMN_DT      => r_PRB.INFORMATION306
                         ,P_PL_ID      => l_PL_ID
                         ,P_PL_REGY_BOD_ID      => l_pl_regy_bod_id
                         ,P_PRB_ATTRIBUTE1      => r_PRB.INFORMATION111
                         ,P_PRB_ATTRIBUTE10      => r_PRB.INFORMATION120
                         ,P_PRB_ATTRIBUTE11      => r_PRB.INFORMATION121
                         ,P_PRB_ATTRIBUTE12      => r_PRB.INFORMATION122
                         ,P_PRB_ATTRIBUTE13      => r_PRB.INFORMATION123
                         ,P_PRB_ATTRIBUTE14      => r_PRB.INFORMATION124
                         ,P_PRB_ATTRIBUTE15      => r_PRB.INFORMATION125
                         ,P_PRB_ATTRIBUTE16      => r_PRB.INFORMATION126
                         ,P_PRB_ATTRIBUTE17      => r_PRB.INFORMATION127
                         ,P_PRB_ATTRIBUTE18      => r_PRB.INFORMATION128
                         ,P_PRB_ATTRIBUTE19      => r_PRB.INFORMATION129
                         ,P_PRB_ATTRIBUTE2      => r_PRB.INFORMATION112
                         ,P_PRB_ATTRIBUTE20      => r_PRB.INFORMATION130
                         ,P_PRB_ATTRIBUTE21      => r_PRB.INFORMATION131
                         ,P_PRB_ATTRIBUTE22      => r_PRB.INFORMATION132
                         ,P_PRB_ATTRIBUTE23      => r_PRB.INFORMATION133
                         ,P_PRB_ATTRIBUTE24      => r_PRB.INFORMATION134
                         ,P_PRB_ATTRIBUTE25      => r_PRB.INFORMATION135
                         ,P_PRB_ATTRIBUTE26      => r_PRB.INFORMATION136
                         ,P_PRB_ATTRIBUTE27      => r_PRB.INFORMATION137
                         ,P_PRB_ATTRIBUTE28      => r_PRB.INFORMATION138
                         ,P_PRB_ATTRIBUTE29      => r_PRB.INFORMATION139
                         ,P_PRB_ATTRIBUTE3      => r_PRB.INFORMATION113
                         ,P_PRB_ATTRIBUTE30      => r_PRB.INFORMATION140
                         ,P_PRB_ATTRIBUTE4      => r_PRB.INFORMATION114
                         ,P_PRB_ATTRIBUTE5      => r_PRB.INFORMATION115
                         ,P_PRB_ATTRIBUTE6      => r_PRB.INFORMATION116
                         ,P_PRB_ATTRIBUTE7      => r_PRB.INFORMATION117
                         ,P_PRB_ATTRIBUTE8      => r_PRB.INFORMATION118
                         ,P_PRB_ATTRIBUTE9      => r_PRB.INFORMATION119
                         ,P_PRB_ATTRIBUTE_CATEGORY      => r_PRB.INFORMATION110
                         ,P_QUALD_DT      => r_PRB.INFORMATION309
                         ,P_QUALD_FLAG      => r_PRB.INFORMATION11
                         ,P_REGY_PL_NAME      => r_PRB.INFORMATION185
             ,P_RPTG_GRP_ID      => l_RPTG_GRP_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
             );

              end if;  -- l_update

           --
           end if;
           --
           -- Delete the row if it is end dated.
           --
           if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
               trunc(l_max_eed) = r_PRB.information3) then
            --
            BEN_PLAN_REGULATORY_BODY_API.delete_PLAN_REGULATORY_BODY(
                --
                p_validate                       => false
                ,p_pl_regy_bod_id                   => l_pl_regy_bod_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
           end if;
           --
           l_prev_pk_id := l_current_pk_id ;
           --
         end if;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'PRB',r_prb.information5 );
    --
 end create_PRB_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_SAZ_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_SAZ_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
     l_PSTL_ZIP_RNG_ID  number;
     l_SVC_AREA_ID  number;
     cursor c_unique_SAZ(l_table_alias varchar2) is
     select distinct cpe.information1,
       cpe.information2,
       cpe.information3,
       cpe.table_route_id,
       cpe.dml_operation,
       cpe.datetrack_mode
       from ben_copy_entity_results cpe,
          pqh_table_route tr
     where cpe.copy_entity_txn_id = p_copy_entity_txn_id
     and   cpe.table_route_id     = tr.table_route_id
     -- and   tr.where_clause        = l_BEN_SVC_AREA_PSTL_ZIP_RNG_F
   and tr.table_alias = l_table_alias
     and   cpe.number_of_copies   = 1 --ADDITION
     group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
     cursor c_SAZ_min_max_dates(c_table_route_id  number,
                c_information1   number) is
     select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
     from ben_copy_entity_results cpe
     where cpe.copy_entity_txn_id = p_copy_entity_txn_id
     and   cpe.table_route_id     = c_table_route_id
     and   cpe.information1       = c_information1 ;
   --
     cursor c_SAZ(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
     select
     cpe.*
     from ben_copy_entity_results cpe
     where cpe.copy_entity_txn_id = p_copy_entity_txn_id
     and   cpe.table_route_id     = c_table_route_id
     and   cpe.information1       = c_information1
     and   cpe.information2       = c_information2
     and   cpe.information3       = c_information3
     and rownum = 1 ;
   -- Date Track target record
     cursor c_find_SAZ_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
     select
     SAZ.svc_area_pstl_zip_rng_id new_value
     from BEN_SVC_AREA_PSTL_ZIP_RNG_F SAZ
     where
     SAZ.PSTL_ZIP_RNG_ID = l_PSTL_ZIP_RNG_ID  and
     SAZ.SVC_AREA_ID     = l_SVC_AREA_ID  and
     SAZ.business_group_id  = c_business_group_id
     and   SAZ.svc_area_pstl_zip_rng_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
     and exists ( select null
                from BEN_SVC_AREA_PSTL_ZIP_RNG_F SAZ1
                where
                SAZ1.PSTL_ZIP_RNG_ID     = l_PSTL_ZIP_RNG_ID  and
                SAZ1.SVC_AREA_ID     = l_SVC_AREA_ID  and
                SAZ1.business_group_id  = c_business_group_id
                and   SAZ1.effective_start_date <= c_effective_start_date )
     and exists ( select null
                from BEN_SVC_AREA_PSTL_ZIP_RNG_F SAZ2
                where
                SAZ2.PSTL_ZIP_RNG_ID     = l_PSTL_ZIP_RNG_ID  and
                SAZ2.SVC_AREA_ID     = l_SVC_AREA_ID  and
                SAZ2.business_group_id  = c_business_group_id
                and   SAZ2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
     l_current_pk_id           number := null ;
     l_prev_pk_id              number := null ;
     l_first_rec               boolean := true ;
     r_SAZ                     c_SAZ%rowtype;
     l_svc_area_pstl_zip_rng_id             number ;
     l_object_version_number   number ;
     l_effective_start_date    date ;
     l_effective_end_date      date ;
     l_prefix                  pqh_copy_entity_attribs.information1%type := null;
     l_suffix                  pqh_copy_entity_attribs.information1%type := null;
     l_new_value               number(15);
     l_object_found_in_target  boolean := false ;
     l_min_esd                 date;
     l_max_eed                 date;
     l_effective_date          date;
   --
   begin
     -- Initialization
     l_object_found_in_target := false ;
     -- End Initialization
     -- Derive the prefix - sufix
     if   p_prefix_suffix_cd = 'PREFIX' then
       l_prefix  := p_prefix_suffix_text ;
     elsif p_prefix_suffix_cd = 'SUFFIX' then
       l_suffix   := p_prefix_suffix_text ;
     else
       l_prefix := null ;
       l_suffix  := null ;
     end if ;
     -- End Prefix Sufix derivation
     for r_SAZ_unique in c_unique_SAZ('SAZ') loop

       if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
          (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
           r_SAZ_unique.information3 >=
                   ben_pd_copy_to_ben_one.g_copy_effective_date)
          ) then
         --
         hr_utility.set_location(' r_SAZ_unique.table_route_id '||r_SAZ_unique.table_route_id,10);
         hr_utility.set_location(' r_SAZ_unique.information1 '||r_SAZ_unique.information1,10);
         hr_utility.set_location( 'r_SAZ_unique.information2 '||r_SAZ_unique.information2,10);
         hr_utility.set_location( 'r_SAZ_unique.information3 '||r_SAZ_unique.information3,10);
         -- If reuse objects flag is 'Y' then check for the object in the target business group
         -- if found insert the record into PLSql table and exit the loop else try create the
         -- object in the target business group
         --
         l_object_found_in_target := false ;
         --UPD START
         open c_SAZ(r_SAZ_unique.table_route_id,
                r_SAZ_unique.information1,
                r_SAZ_unique.information2,
                r_SAZ_unique.information3 ) ;
         --
         fetch c_SAZ into r_SAZ ;
         --
         close c_SAZ ;
         --
         l_dml_operation:= r_SAZ_unique.dml_operation ;
         l_PSTL_ZIP_RNG_ID := get_fk('PSTL_ZIP_RNG_ID', r_SAZ.INFORMATION245,l_dml_operation);
         l_SVC_AREA_ID := get_fk('SVC_AREA_ID', r_SAZ.INFORMATION241,l_dml_operation);
         --
       l_update := false;
       l_process_date := p_effective_date;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_SAZ_unique.information2 and r_SAZ_unique.information3 then
               l_update := true;
               if r_SAZ_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'SVC_AREA_PSTL_ZIP_RNG_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'SVC_AREA_PSTL_ZIP_RNG_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_SAZ_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_SAZ_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_SAZ_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
           --DOUBT       log_data('SAZ',l_new_value,l_prefix || r_SAZ_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
         l_min_esd := null ;
         l_max_eed := null ;
         open c_SAZ_min_max_dates(r_SAZ_unique.table_route_id, r_SAZ_unique.information1 ) ;
         fetch c_SAZ_min_max_dates into l_min_esd,l_max_eed ;
         --

         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;
       l_min_esd := greatest(l_min_esd,r_SAZ_unique.information2);

         --
         if p_reuse_object_flag = 'Y' then
           if c_SAZ_min_max_dates%found then
             -- cursor to find the object
             open c_find_SAZ_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_svc_area_pstl_zip_rng_id, -999)  ) ;
             fetch c_find_SAZ_in_target into l_new_value ;
             if c_find_SAZ_in_target%found then
               --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_SVC_AREA_PSTL_ZIP_RNG_F',
                  p_base_key_column => 'SVC_AREA_PSTL_ZIP_RNG_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
               if r_SAZ_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'SVC_AREA_PSTL_ZIP_RNG_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'SVC_AREA_PSTL_ZIP_RNG_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_SAZ_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_SAZ_unique.table_route_id;
                  --
                  -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
               end if ;
               --
               l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
             end if;
             close c_find_SAZ_in_target ;
           --
           end if;
         end if ;
         --
         close c_SAZ_min_max_dates ;

        end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then
           --
           l_current_pk_id := r_SAZ.information1;
           --
           hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
           hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
           --
           if l_current_pk_id =  l_prev_pk_id  then
             --
             l_first_rec := false ;
             --
           else
             --
             l_first_rec := true ;
             --
           end if ;
           --

           l_effective_date := r_SAZ.information2;
           if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
             l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
           end if;

          if l_first_rec and not l_update then
             -- Call Create routine.
             hr_utility.set_location(' BEN_SVC_AREA_PSTL_ZIP_RNG_F CREATE_SVC_AREA_PSTL_ZIP_RNG ',20);
             BEN_SVC_AREA_PSTL_ZIP_RNG_API.CREATE_SVC_AREA_PSTL_ZIP_RNG(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
            ,P_PSTL_ZIP_RNG_ID      => l_PSTL_ZIP_RNG_ID
                         ,P_SAZ_ATTRIBUTE1      => r_SAZ.INFORMATION111
                         ,P_SAZ_ATTRIBUTE10      => r_SAZ.INFORMATION120
                         ,P_SAZ_ATTRIBUTE11      => r_SAZ.INFORMATION121
                         ,P_SAZ_ATTRIBUTE12      => r_SAZ.INFORMATION122
                         ,P_SAZ_ATTRIBUTE13      => r_SAZ.INFORMATION123
                         ,P_SAZ_ATTRIBUTE14      => r_SAZ.INFORMATION124
                         ,P_SAZ_ATTRIBUTE15      => r_SAZ.INFORMATION125
                         ,P_SAZ_ATTRIBUTE16      => r_SAZ.INFORMATION126
                         ,P_SAZ_ATTRIBUTE17      => r_SAZ.INFORMATION127
                         ,P_SAZ_ATTRIBUTE18      => r_SAZ.INFORMATION128
                         ,P_SAZ_ATTRIBUTE19      => r_SAZ.INFORMATION129
                         ,P_SAZ_ATTRIBUTE2      => r_SAZ.INFORMATION112
                         ,P_SAZ_ATTRIBUTE20      => r_SAZ.INFORMATION130
                         ,P_SAZ_ATTRIBUTE21      => r_SAZ.INFORMATION131
                         ,P_SAZ_ATTRIBUTE22      => r_SAZ.INFORMATION132
                         ,P_SAZ_ATTRIBUTE23      => r_SAZ.INFORMATION133
                         ,P_SAZ_ATTRIBUTE24      => r_SAZ.INFORMATION134
                         ,P_SAZ_ATTRIBUTE25      => r_SAZ.INFORMATION135
                         ,P_SAZ_ATTRIBUTE26      => r_SAZ.INFORMATION136
                         ,P_SAZ_ATTRIBUTE27      => r_SAZ.INFORMATION137
                         ,P_SAZ_ATTRIBUTE28      => r_SAZ.INFORMATION138
                         ,P_SAZ_ATTRIBUTE29      => r_SAZ.INFORMATION139
                         ,P_SAZ_ATTRIBUTE3      => r_SAZ.INFORMATION113
                         ,P_SAZ_ATTRIBUTE30      => r_SAZ.INFORMATION140
                         ,P_SAZ_ATTRIBUTE4      => r_SAZ.INFORMATION114
                         ,P_SAZ_ATTRIBUTE5      => r_SAZ.INFORMATION115
                         ,P_SAZ_ATTRIBUTE6      => r_SAZ.INFORMATION116
                         ,P_SAZ_ATTRIBUTE7      => r_SAZ.INFORMATION117
                         ,P_SAZ_ATTRIBUTE8      => r_SAZ.INFORMATION118
                         ,P_SAZ_ATTRIBUTE9      => r_SAZ.INFORMATION119
                         ,P_SAZ_ATTRIBUTE_CATEGORY      => r_SAZ.INFORMATION110
                         ,P_SVC_AREA_ID      => l_SVC_AREA_ID
             ,P_SVC_AREA_PSTL_ZIP_RNG_ID      => l_svc_area_pstl_zip_rng_id
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
             );
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             -- Update all relevent cer records with new pk_id
             hr_utility.set_location('Before plsql table ',222);
             hr_utility.set_location('new_value id '||l_svc_area_pstl_zip_rng_id,222);
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'SVC_AREA_PSTL_ZIP_RNG_ID' ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_SAZ.information1 ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_SVC_AREA_PSTL_ZIP_RNG_ID ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_SAZ_unique.table_route_id;
             hr_utility.set_location('After plsql table ',222);
             --
             -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
             --
             BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             --
           else
             --
             -- Call Update routine for the pk_id created in prev run .
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             hr_utility.set_location(' BEN_SVC_AREA_PSTL_ZIP_RNG_F UPDATE_SVC_AREA_PSTL_ZIP_RNG ',30);
             --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_SAZ.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_SAZ.information3,
               p_effective_start_date  => r_SAZ.information2,
               p_dml_operation         => r_SAZ.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_SVC_AREA_PSTL_ZIP_RNG_ID   := r_SAZ.information1;
             l_object_version_number := r_SAZ.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END

             BEN_SVC_AREA_PSTL_ZIP_RNG_API.UPDATE_SVC_AREA_PSTL_ZIP_RNG(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_PSTL_ZIP_RNG_ID      => l_PSTL_ZIP_RNG_ID
                          ,P_SAZ_ATTRIBUTE1      => r_SAZ.INFORMATION111
                          ,P_SAZ_ATTRIBUTE10      => r_SAZ.INFORMATION120
                          ,P_SAZ_ATTRIBUTE11      => r_SAZ.INFORMATION121
                          ,P_SAZ_ATTRIBUTE12      => r_SAZ.INFORMATION122
                          ,P_SAZ_ATTRIBUTE13      => r_SAZ.INFORMATION123
                          ,P_SAZ_ATTRIBUTE14      => r_SAZ.INFORMATION124
                          ,P_SAZ_ATTRIBUTE15      => r_SAZ.INFORMATION125
                          ,P_SAZ_ATTRIBUTE16      => r_SAZ.INFORMATION126
                          ,P_SAZ_ATTRIBUTE17      => r_SAZ.INFORMATION127
                          ,P_SAZ_ATTRIBUTE18      => r_SAZ.INFORMATION128
                          ,P_SAZ_ATTRIBUTE19      => r_SAZ.INFORMATION129
                          ,P_SAZ_ATTRIBUTE2      => r_SAZ.INFORMATION112
                          ,P_SAZ_ATTRIBUTE20      => r_SAZ.INFORMATION130
                          ,P_SAZ_ATTRIBUTE21      => r_SAZ.INFORMATION131
                          ,P_SAZ_ATTRIBUTE22      => r_SAZ.INFORMATION132
                          ,P_SAZ_ATTRIBUTE23      => r_SAZ.INFORMATION133
                          ,P_SAZ_ATTRIBUTE24      => r_SAZ.INFORMATION134
                          ,P_SAZ_ATTRIBUTE25      => r_SAZ.INFORMATION135
                          ,P_SAZ_ATTRIBUTE26      => r_SAZ.INFORMATION136
                          ,P_SAZ_ATTRIBUTE27      => r_SAZ.INFORMATION137
                          ,P_SAZ_ATTRIBUTE28      => r_SAZ.INFORMATION138
                          ,P_SAZ_ATTRIBUTE29      => r_SAZ.INFORMATION139
                          ,P_SAZ_ATTRIBUTE3      => r_SAZ.INFORMATION113
                          ,P_SAZ_ATTRIBUTE30      => r_SAZ.INFORMATION140
                          ,P_SAZ_ATTRIBUTE4      => r_SAZ.INFORMATION114
                          ,P_SAZ_ATTRIBUTE5      => r_SAZ.INFORMATION115
                          ,P_SAZ_ATTRIBUTE6      => r_SAZ.INFORMATION116
                          ,P_SAZ_ATTRIBUTE7      => r_SAZ.INFORMATION117
                          ,P_SAZ_ATTRIBUTE8      => r_SAZ.INFORMATION118
                          ,P_SAZ_ATTRIBUTE9      => r_SAZ.INFORMATION119
                          ,P_SAZ_ATTRIBUTE_CATEGORY      => r_SAZ.INFORMATION110
                          ,P_SVC_AREA_ID      => l_SVC_AREA_ID
             ,P_SVC_AREA_PSTL_ZIP_RNG_ID      => l_svc_area_pstl_zip_rng_id
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
           ,P_DATETRACK_MODE        => l_datetrack_mode
             );
           --
            end if;  -- l_update
           end if;
           --
           -- Delete the row if it is end dated.
           --
           if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
               trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
               trunc(l_max_eed) = r_SAZ.information3) then
             --
             BEN_SVC_AREA_PSTL_ZIP_RNG_API.delete_SVC_AREA_PSTL_ZIP_RNG(
                --
                p_validate                        => false
                ,p_svc_area_pstl_zip_rng_id       => l_svc_area_pstl_zip_rng_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
           end if;
           --
           l_prev_pk_id := l_current_pk_id ;
           --
         end if;
         --
       end if;
       --
     end loop;
     --
   exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'SAZ',r_saz.information5 );
     --
  end create_SAZ_rows;
   ---------------------------------------------------------------
   ----------------------< create_PCX_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_PCX_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_CTFN_RQD_WHEN_RL  number;
   l_PL_ID             number;
   l_BNF_CTFN_TYP_CD   varchar2(30);
   l_BNF_TYP_CD        varchar2(30);
   l_RLSHP_TYP_CD      varchar2(30);
   --
   cursor c_unique_PCX(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_PL_BNF_CTFN_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 --ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_PCX_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_PCX(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_PCX_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     PCX.pl_bnf_ctfn_id new_value
   from BEN_PL_BNF_CTFN_F PCX
   where
   nvl(PCX.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
   nvl(PCX.BNF_CTFN_TYP_CD,-999) = nvl(l_BNF_CTFN_TYP_CD,-999)  and
   nvl(PCX.BNF_TYP_CD,-999) = nvl(l_BNF_TYP_CD,-999)  and
   nvl(PCX.RLSHP_TYP_CD,-999) = nvl(l_RLSHP_TYP_CD,-999)  and
   PCX.business_group_id  = c_business_group_id
   and   PCX.pl_bnf_ctfn_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/* TEMPIK
   and exists ( select null
                from BEN_PL_BNF_CTFN_F PCX1
                where
                nvl(PCX1.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
                nvl(PCX1.BNF_CTFN_TYP_CD,-999) = nvl(l_BNF_CTFN_TYP_CD,-999)  and
                nvl(PCX1.BNF_TYP_CD,-999) = nvl(l_BNF_TYP_CD,-999)  and
                nvl(PCX1.RLSHP_TYP_CD,-999) = nvl(l_RLSHP_TYP_CD,-999)  and
                PCX1.business_group_id  = c_business_group_id
                and   PCX1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_PL_BNF_CTFN_F PCX2
                where
                nvl(PCX2.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
                nvl(PCX2.BNF_CTFN_TYP_CD,-999) = nvl(l_BNF_CTFN_TYP_CD,-999)  and
                nvl(PCX2.BNF_TYP_CD,-999) = nvl(l_BNF_TYP_CD,-999)  and
                nvl(PCX2.RLSHP_TYP_CD,-999) = nvl(l_RLSHP_TYP_CD,-999)  and
                PCX2.business_group_id  = c_business_group_id
                and   PCX2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_PCX                     c_PCX%rowtype;
   l_pl_bnf_ctfn_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_PCX_unique in c_unique_PCX('PCX') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
          (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
           r_PCX_unique.information3 >=
                   ben_pd_copy_to_ben_one.g_copy_effective_date)
          ) then
       --
       hr_utility.set_location(' r_PCX_unique.table_route_id '||r_PCX_unique.table_route_id,10);
       hr_utility.set_location(' r_PCX_unique.information1 '||r_PCX_unique.information1,10);
       hr_utility.set_location( 'r_PCX_unique.information2 '||r_PCX_unique.information2,10);
       hr_utility.set_location( 'r_PCX_unique.information3 '||r_PCX_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
        --
       open c_PCX(r_PCX_unique.table_route_id,
                r_PCX_unique.information1,
                r_PCX_unique.information2,
                r_PCX_unique.information3 ) ;
       --
       fetch c_PCX into r_PCX ;
       --
       close c_PCX ;
       --
       l_dml_operation:= r_PCX_unique.dml_operation ;
       l_CTFN_RQD_WHEN_RL := get_fk('FORMULA_ID', r_PCX.INFORMATION260,l_dml_operation);
       l_PL_ID := get_fk('PL_ID', r_PCX.INFORMATION261,l_dml_operation);
       --
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_PCX_unique.information2 and r_PCX_unique.information3 then
               l_update := true;
               if r_PCX_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'PL_BNF_CTFN_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PL_BNF_CTFN_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_PCX_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_PCX_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PCX_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                --  log_data('PCX',l_new_value,l_prefix || r_PCX_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END

       l_min_esd := null ;
       l_max_eed := null ;
       open c_PCX_min_max_dates(r_PCX_unique.table_route_id, r_PCX_unique.information1 ) ;
       fetch c_PCX_min_max_dates into l_min_esd,l_max_eed ;

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_PCX_unique.information2);

       --
       l_BNF_CTFN_TYP_CD   := r_PCX.information11;
       l_BNF_TYP_CD        := r_PCX.information15;
       l_RLSHP_TYP_CD      := r_PCX.information16;
       --
       if p_reuse_object_flag = 'Y' then
         if c_PCX_min_max_dates%found then
           -- cursor to find the object
           open c_find_PCX_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_pl_bnf_ctfn_id, -999)  ) ;
           fetch c_find_PCX_in_target into l_new_value ;
           if c_find_PCX_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_PL_BNF_CTFN_F',
                  p_base_key_column => 'PL_BNF_CTFN_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_PCX_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'PL_BNF_CTFN_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PL_BNF_CTFN_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_PCX_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PCX_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_PCX_in_target ;
         --
         end if;
       end if ;
       --
       close c_PCX_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then


         --
         l_current_pk_id := r_PCX.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_PCX.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

        if l_first_rec and not l_update then

           -- Call Create routine.
           hr_utility.set_location(' BEN_PL_BNF_CTFN_F CREATE_PLAN_BENEFICIARY_CTFN ',20);
           BEN_PLAN_BENEFICIARY_CTFN_API.CREATE_PLAN_BENEFICIARY_CTFN(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_BNF_CTFN_TYP_CD      => r_PCX.INFORMATION11
                          ,P_BNF_TYP_CD      => r_PCX.INFORMATION15
                          ,P_CTFN_RQD_WHEN_RL      => l_CTFN_RQD_WHEN_RL
                          ,P_LACK_CTFN_SSPND_ENRT_FLAG      => r_PCX.INFORMATION12
                          ,P_PCX_ATTRIBUTE1      => r_PCX.INFORMATION111
                          ,P_PCX_ATTRIBUTE10      => r_PCX.INFORMATION120
                          ,P_PCX_ATTRIBUTE11      => r_PCX.INFORMATION121
                          ,P_PCX_ATTRIBUTE12      => r_PCX.INFORMATION122
                          ,P_PCX_ATTRIBUTE13      => r_PCX.INFORMATION123
                          ,P_PCX_ATTRIBUTE14      => r_PCX.INFORMATION124
                          ,P_PCX_ATTRIBUTE15      => r_PCX.INFORMATION125
                          ,P_PCX_ATTRIBUTE16      => r_PCX.INFORMATION126
                          ,P_PCX_ATTRIBUTE17      => r_PCX.INFORMATION127
                          ,P_PCX_ATTRIBUTE18      => r_PCX.INFORMATION128
                          ,P_PCX_ATTRIBUTE19      => r_PCX.INFORMATION129
                          ,P_PCX_ATTRIBUTE2      => r_PCX.INFORMATION112
                          ,P_PCX_ATTRIBUTE20      => r_PCX.INFORMATION130
                          ,P_PCX_ATTRIBUTE21      => r_PCX.INFORMATION131
                          ,P_PCX_ATTRIBUTE22      => r_PCX.INFORMATION132
                          ,P_PCX_ATTRIBUTE23      => r_PCX.INFORMATION133
                          ,P_PCX_ATTRIBUTE24      => r_PCX.INFORMATION134
                          ,P_PCX_ATTRIBUTE25      => r_PCX.INFORMATION135
                          ,P_PCX_ATTRIBUTE26      => r_PCX.INFORMATION136
                          ,P_PCX_ATTRIBUTE27      => r_PCX.INFORMATION137
                          ,P_PCX_ATTRIBUTE28      => r_PCX.INFORMATION138
                          ,P_PCX_ATTRIBUTE29      => r_PCX.INFORMATION139
                          ,P_PCX_ATTRIBUTE3      => r_PCX.INFORMATION113
                          ,P_PCX_ATTRIBUTE30      => r_PCX.INFORMATION140
                          ,P_PCX_ATTRIBUTE4      => r_PCX.INFORMATION114
                          ,P_PCX_ATTRIBUTE5      => r_PCX.INFORMATION115
                          ,P_PCX_ATTRIBUTE6      => r_PCX.INFORMATION116
                          ,P_PCX_ATTRIBUTE7      => r_PCX.INFORMATION117
                          ,P_PCX_ATTRIBUTE8      => r_PCX.INFORMATION118
                          ,P_PCX_ATTRIBUTE9      => r_PCX.INFORMATION119
                          ,P_PCX_ATTRIBUTE_CATEGORY      => r_PCX.INFORMATION110
                          ,P_PFD_FLAG      => r_PCX.INFORMATION13
                          ,P_PL_BNF_CTFN_ID      => l_pl_bnf_ctfn_id
                          ,P_PL_ID      => l_PL_ID
                          ,P_RLSHP_TYP_CD      => r_PCX.INFORMATION16
             ,P_RQD_FLAG      => r_PCX.INFORMATION14
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_pl_bnf_ctfn_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'PL_BNF_CTFN_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_PCX.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_PL_BNF_CTFN_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PCX_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             hr_utility.set_location(' BEN_PL_BNF_CTFN_F UPDATE_PLAN_BENEFICIARY_CTFN ',30);
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_PCX.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_PCX.information3,
               p_effective_start_date  => r_PCX.information2,
               p_dml_operation         => r_PCX.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_PL_BNF_CTFN_ID   := r_PCX.information1;
             l_object_version_number := r_PCX.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_PLAN_BENEFICIARY_CTFN_API.UPDATE_PLAN_BENEFICIARY_CTFN(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_BNF_CTFN_TYP_CD      => r_PCX.INFORMATION11
                          ,P_BNF_TYP_CD      => r_PCX.INFORMATION15
                          ,P_CTFN_RQD_WHEN_RL      => l_CTFN_RQD_WHEN_RL
                          ,P_LACK_CTFN_SSPND_ENRT_FLAG      => r_PCX.INFORMATION12
                          ,P_PCX_ATTRIBUTE1      => r_PCX.INFORMATION111
                          ,P_PCX_ATTRIBUTE10      => r_PCX.INFORMATION120
                          ,P_PCX_ATTRIBUTE11      => r_PCX.INFORMATION121
                          ,P_PCX_ATTRIBUTE12      => r_PCX.INFORMATION122
                          ,P_PCX_ATTRIBUTE13      => r_PCX.INFORMATION123
                          ,P_PCX_ATTRIBUTE14      => r_PCX.INFORMATION124
                          ,P_PCX_ATTRIBUTE15      => r_PCX.INFORMATION125
                          ,P_PCX_ATTRIBUTE16      => r_PCX.INFORMATION126
                          ,P_PCX_ATTRIBUTE17      => r_PCX.INFORMATION127
                          ,P_PCX_ATTRIBUTE18      => r_PCX.INFORMATION128
                          ,P_PCX_ATTRIBUTE19      => r_PCX.INFORMATION129
                          ,P_PCX_ATTRIBUTE2      => r_PCX.INFORMATION112
                          ,P_PCX_ATTRIBUTE20      => r_PCX.INFORMATION130
                          ,P_PCX_ATTRIBUTE21      => r_PCX.INFORMATION131
                          ,P_PCX_ATTRIBUTE22      => r_PCX.INFORMATION132
                          ,P_PCX_ATTRIBUTE23      => r_PCX.INFORMATION133
                          ,P_PCX_ATTRIBUTE24      => r_PCX.INFORMATION134
                          ,P_PCX_ATTRIBUTE25      => r_PCX.INFORMATION135
                          ,P_PCX_ATTRIBUTE26      => r_PCX.INFORMATION136
                          ,P_PCX_ATTRIBUTE27      => r_PCX.INFORMATION137
                          ,P_PCX_ATTRIBUTE28      => r_PCX.INFORMATION138
                          ,P_PCX_ATTRIBUTE29      => r_PCX.INFORMATION139
                          ,P_PCX_ATTRIBUTE3      => r_PCX.INFORMATION113
                          ,P_PCX_ATTRIBUTE30      => r_PCX.INFORMATION140
                          ,P_PCX_ATTRIBUTE4      => r_PCX.INFORMATION114
                          ,P_PCX_ATTRIBUTE5      => r_PCX.INFORMATION115
                          ,P_PCX_ATTRIBUTE6      => r_PCX.INFORMATION116
                          ,P_PCX_ATTRIBUTE7      => r_PCX.INFORMATION117
                          ,P_PCX_ATTRIBUTE8      => r_PCX.INFORMATION118
                          ,P_PCX_ATTRIBUTE9      => r_PCX.INFORMATION119
                          ,P_PCX_ATTRIBUTE_CATEGORY      => r_PCX.INFORMATION110
                          ,P_PFD_FLAG      => r_PCX.INFORMATION13
                          ,P_PL_BNF_CTFN_ID      => l_pl_bnf_ctfn_id
                          ,P_PL_ID      => l_PL_ID
                          ,P_RLSHP_TYP_CD      => r_PCX.INFORMATION16
             ,P_RQD_FLAG      => r_PCX.INFORMATION14
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
          ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
            end if;  -- l_update
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_PCX.information3) then
             --
             BEN_PLAN_BENEFICIARY_CTFN_API.delete_PLAN_BENEFICIARY_CTFN(
                --
                p_validate                       => false
                ,p_pl_bnf_ctfn_id                   => l_pl_bnf_ctfn_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'PCX',r_pcx.information5 );
     --
 end create_PCX_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_PND_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_PND_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_CTFN_RQD_WHEN_RL  number;
   l_PL_ID  number;
   l_DPNT_CVG_CTFN_TYP_CD  varchar2(30);
   --
   cursor c_unique_PND(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_PL_DPNT_CVG_CTFN_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 --ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_PND_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_PND(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_PND_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     PND.pl_dpnt_cvg_ctfn_id new_value
   from BEN_PL_DPNT_CVG_CTFN_F PND
   where
   nvl(PND.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
   PND.DPNT_CVG_CTFN_TYP_CD = l_DPNT_CVG_CTFN_TYP_CD and
   PND.business_group_id  = c_business_group_id
   and   PND.pl_dpnt_cvg_ctfn_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/* TEMPIK
   and exists ( select null
                from BEN_PL_DPNT_CVG_CTFN_F PND1
                where
                nvl(PND1.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
                PND1.DPNT_CVG_CTFN_TYP_CD = l_DPNT_CVG_CTFN_TYP_CD and
                PND1.business_group_id  = c_business_group_id
                and   PND1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_PL_DPNT_CVG_CTFN_F PND2
                where
                nvl(PND2.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
                PND2.DPNT_CVG_CTFN_TYP_CD = l_DPNT_CVG_CTFN_TYP_CD and
                PND2.business_group_id  = c_business_group_id
                and   PND2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_PND                     c_PND%rowtype;
   l_pl_dpnt_cvg_ctfn_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_PND_unique in c_unique_PND('PND') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_PND_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then

       --
       hr_utility.set_location(' r_PND_unique.table_route_id '||r_PND_unique.table_route_id,10);
       hr_utility.set_location(' r_PND_unique.information1 '||r_PND_unique.information1,10);
       hr_utility.set_location( 'r_PND_unique.information2 '||r_PND_unique.information2,10);
       hr_utility.set_location( 'r_PND_unique.information3 '||r_PND_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       --
       open c_PND(r_PND_unique.table_route_id,
                r_PND_unique.information1,
                r_PND_unique.information2,
                r_PND_unique.information3 ) ;
       --
       fetch c_PND into r_PND ;
       --
       close c_PND ;
       --
       l_dml_operation:= r_PND_unique.dml_operation ;
       l_CTFN_RQD_WHEN_RL := get_fk('FORMULA_ID', r_PND.INFORMATION257,l_dml_operation);
       l_PL_ID := get_fk('PL_ID', r_PND.INFORMATION261,l_dml_operation);
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_PND_unique.information2 and r_PND_unique.information3 then
               l_update := true;
               if r_PND_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'PL_DPNT_CVG_CTFN_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PL_DPNT_CVG_CTFN_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_PND_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_PND_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PND_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
               --DOUBT   log_data('PND',l_new_value,l_prefix || r_PND_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END

       l_min_esd := null ;
       l_max_eed := null ;
       open c_PND_min_max_dates(r_PND_unique.table_route_id, r_PND_unique.information1 ) ;
       fetch c_PND_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_PND_unique.information2);

       --
       l_DPNT_CVG_CTFN_TYP_CD := r_PND.information13 ;
       --
       if p_reuse_object_flag = 'Y' then
         if c_PND_min_max_dates%found then
           -- cursor to find the object
           open c_find_PND_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_pl_dpnt_cvg_ctfn_id, -999)  ) ;
           fetch c_find_PND_in_target into l_new_value ;
           if c_find_PND_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_PL_DPNT_CVG_CTFN_F',
                  p_base_key_column => 'PL_DPNT_CVG_CTFN_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_PND_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'PL_DPNT_CVG_CTFN_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PL_DPNT_CVG_CTFN_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_PND_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PND_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_PND_in_target ;
           --
         end if;
       end if ;
       --
       close c_PND_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_PND.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_PND.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

        if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_PL_DPNT_CVG_CTFN_F CREATE_PLAN_DPNT_CVG_CTFN ',20);
           BEN_PLAN_DPNT_CVG_CTFN_API.CREATE_PLAN_DPNT_CVG_CTFN(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CTFN_RQD_WHEN_RL      => l_CTFN_RQD_WHEN_RL
                          ,P_DPNT_CVG_CTFN_TYP_CD      => r_PND.INFORMATION13
                          ,P_LACK_CTFN_SSPND_ENRT_FLAG      => r_PND.INFORMATION12
                          ,P_PFD_FLAG      => r_PND.INFORMATION11
                          ,P_PL_DPNT_CVG_CTFN_ID      => l_pl_dpnt_cvg_ctfn_id
                          ,P_PL_ID      => l_PL_ID
                          ,P_PND_ATTRIBUTE1      => r_PND.INFORMATION111
                          ,P_PND_ATTRIBUTE10      => r_PND.INFORMATION120
                          ,P_PND_ATTRIBUTE11      => r_PND.INFORMATION121
                          ,P_PND_ATTRIBUTE12      => r_PND.INFORMATION122
                          ,P_PND_ATTRIBUTE13      => r_PND.INFORMATION123
                          ,P_PND_ATTRIBUTE14      => r_PND.INFORMATION124
                          ,P_PND_ATTRIBUTE15      => r_PND.INFORMATION125
                          ,P_PND_ATTRIBUTE16      => r_PND.INFORMATION126
                          ,P_PND_ATTRIBUTE17      => r_PND.INFORMATION127
                          ,P_PND_ATTRIBUTE18      => r_PND.INFORMATION128
                          ,P_PND_ATTRIBUTE19      => r_PND.INFORMATION129
                          ,P_PND_ATTRIBUTE2      => r_PND.INFORMATION112
                          ,P_PND_ATTRIBUTE20      => r_PND.INFORMATION130
                          ,P_PND_ATTRIBUTE21      => r_PND.INFORMATION131
                          ,P_PND_ATTRIBUTE22      => r_PND.INFORMATION132
                          ,P_PND_ATTRIBUTE23      => r_PND.INFORMATION133
                          ,P_PND_ATTRIBUTE24      => r_PND.INFORMATION134
                          ,P_PND_ATTRIBUTE25      => r_PND.INFORMATION135
                          ,P_PND_ATTRIBUTE26      => r_PND.INFORMATION136
                          ,P_PND_ATTRIBUTE27      => r_PND.INFORMATION137
                          ,P_PND_ATTRIBUTE28      => r_PND.INFORMATION138
                          ,P_PND_ATTRIBUTE29      => r_PND.INFORMATION139
                          ,P_PND_ATTRIBUTE3      => r_PND.INFORMATION113
                          ,P_PND_ATTRIBUTE30      => r_PND.INFORMATION140
                          ,P_PND_ATTRIBUTE4      => r_PND.INFORMATION114
                          ,P_PND_ATTRIBUTE5      => r_PND.INFORMATION115
                          ,P_PND_ATTRIBUTE6      => r_PND.INFORMATION116
                          ,P_PND_ATTRIBUTE7      => r_PND.INFORMATION117
                          ,P_PND_ATTRIBUTE8      => r_PND.INFORMATION118
                          ,P_PND_ATTRIBUTE9      => r_PND.INFORMATION119
                          ,P_PND_ATTRIBUTE_CATEGORY      => r_PND.INFORMATION110
                          ,P_RLSHP_TYP_CD      => r_PND.INFORMATION15
             ,P_RQD_FLAG      => r_PND.INFORMATION14
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_pl_dpnt_cvg_ctfn_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'PL_DPNT_CVG_CTFN_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_PND.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_PL_DPNT_CVG_CTFN_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PND_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
            hr_utility.set_location(' BEN_PL_DPNT_CVG_CTFN_F UPDATE_PLAN_DPNT_CVG_CTFN ',30);
            --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_PND.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_PND.information3,
               p_effective_start_date  => r_PND.information2,
               p_dml_operation         => r_PND.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_PL_DPNT_CVG_CTFN_ID   := r_PND.information1;
             l_object_version_number := r_PND.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END

           BEN_PLAN_DPNT_CVG_CTFN_API.UPDATE_PLAN_DPNT_CVG_CTFN(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
            ,P_CTFN_RQD_WHEN_RL      => l_CTFN_RQD_WHEN_RL
                         ,P_DPNT_CVG_CTFN_TYP_CD      => r_PND.INFORMATION13
                         ,P_LACK_CTFN_SSPND_ENRT_FLAG      => r_PND.INFORMATION12
                         ,P_PFD_FLAG      => r_PND.INFORMATION11
                         ,P_PL_DPNT_CVG_CTFN_ID      => l_pl_dpnt_cvg_ctfn_id
                         ,P_PL_ID      => l_PL_ID
                         ,P_PND_ATTRIBUTE1      => r_PND.INFORMATION111
                         ,P_PND_ATTRIBUTE10      => r_PND.INFORMATION120
                         ,P_PND_ATTRIBUTE11      => r_PND.INFORMATION121
                         ,P_PND_ATTRIBUTE12      => r_PND.INFORMATION122
                         ,P_PND_ATTRIBUTE13      => r_PND.INFORMATION123
                         ,P_PND_ATTRIBUTE14      => r_PND.INFORMATION124
                         ,P_PND_ATTRIBUTE15      => r_PND.INFORMATION125
                         ,P_PND_ATTRIBUTE16      => r_PND.INFORMATION126
                         ,P_PND_ATTRIBUTE17      => r_PND.INFORMATION127
                         ,P_PND_ATTRIBUTE18      => r_PND.INFORMATION128
                         ,P_PND_ATTRIBUTE19      => r_PND.INFORMATION129
                         ,P_PND_ATTRIBUTE2      => r_PND.INFORMATION112
                         ,P_PND_ATTRIBUTE20      => r_PND.INFORMATION130
                         ,P_PND_ATTRIBUTE21      => r_PND.INFORMATION131
                         ,P_PND_ATTRIBUTE22      => r_PND.INFORMATION132
                         ,P_PND_ATTRIBUTE23      => r_PND.INFORMATION133
                         ,P_PND_ATTRIBUTE24      => r_PND.INFORMATION134
                         ,P_PND_ATTRIBUTE25      => r_PND.INFORMATION135
                         ,P_PND_ATTRIBUTE26      => r_PND.INFORMATION136
                         ,P_PND_ATTRIBUTE27      => r_PND.INFORMATION137
                         ,P_PND_ATTRIBUTE28      => r_PND.INFORMATION138
                         ,P_PND_ATTRIBUTE29      => r_PND.INFORMATION139
                         ,P_PND_ATTRIBUTE3      => r_PND.INFORMATION113
                         ,P_PND_ATTRIBUTE30      => r_PND.INFORMATION140
                         ,P_PND_ATTRIBUTE4      => r_PND.INFORMATION114
                         ,P_PND_ATTRIBUTE5      => r_PND.INFORMATION115
                         ,P_PND_ATTRIBUTE6      => r_PND.INFORMATION116
                         ,P_PND_ATTRIBUTE7      => r_PND.INFORMATION117
                         ,P_PND_ATTRIBUTE8      => r_PND.INFORMATION118
                         ,P_PND_ATTRIBUTE9      => r_PND.INFORMATION119
                         ,P_PND_ATTRIBUTE_CATEGORY      => r_PND.INFORMATION110
                         ,P_RLSHP_TYP_CD      => r_PND.INFORMATION15
             ,P_RQD_FLAG      => r_PND.INFORMATION14
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
              ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
            end if;  -- l_update
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_PND.information3) then
             --
             BEN_PLAN_DPNT_CVG_CTFN_API.delete_PLAN_DPNT_CVG_CTFN(
                --
                p_validate                       => false
                ,p_pl_dpnt_cvg_ctfn_id                   => l_pl_dpnt_cvg_ctfn_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'PND',r_pnd.information5 );
     --
 end create_PND_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_LPE_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_LPE_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_AUTO_ENRT_MTHD_RL  number;
   l_DFLT_ENRT_RL  number;
   l_ENRT_RL  number;
   l_LER_ID  number;
   l_PL_ID  number;
   cursor c_unique_LPE(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_LER_CHG_PL_NIP_ENRT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 --ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_LPE_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_LPE(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_LPE_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     LPE.ler_chg_pl_nip_enrt_id new_value
   from BEN_LER_CHG_PL_NIP_ENRT_F LPE
   where
   nvl(LPE.LER_ID,-999)     = nvl(l_LER_ID,-999)  and
   nvl(LPE.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
   LPE.business_group_id  = c_business_group_id
   and   LPE.ler_chg_pl_nip_enrt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_LER_CHG_PL_NIP_ENRT_F LPE1
                where
                nvl(LPE1.LER_ID,-999)     = nvl(l_LER_ID,-999)  and
                nvl(LPE1.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
                LPE1.business_group_id  = c_business_group_id
                and   LPE1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_LER_CHG_PL_NIP_ENRT_F LPE2
                where
                nvl(LPE2.LER_ID,-999)     = nvl(l_LER_ID,-999)  and
                nvl(LPE2.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
                LPE2.business_group_id  = c_business_group_id
                and   LPE2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
    --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END

   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_LPE                     c_LPE%rowtype;
   l_ler_chg_pl_nip_enrt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_LPE_unique in c_unique_LPE('LPE') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_LPE_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then

       --
       hr_utility.set_location(' r_LPE_unique.table_route_id '||r_LPE_unique.table_route_id,10);
       hr_utility.set_location(' r_LPE_unique.information1 '||r_LPE_unique.information1,10);
       hr_utility.set_location( 'r_LPE_unique.information2 '||r_LPE_unique.information2,10);
       hr_utility.set_location( 'r_LPE_unique.information3 '||r_LPE_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START

       open c_LPE(r_LPE_unique.table_route_id,
                r_LPE_unique.information1,
                r_LPE_unique.information2,
                r_LPE_unique.information3 ) ;
       --
       fetch c_LPE into r_LPE ;
       --
       close c_LPE ;
       --
       l_dml_operation:= r_LPE_unique.dml_operation ;
       l_AUTO_ENRT_MTHD_RL := get_fk('FORMULA_ID', r_LPE.INFORMATION258,l_dml_operation);
       l_DFLT_ENRT_RL := get_fk('FORMULA_ID', r_LPE.INFORMATION263,l_dml_operation);
       l_ENRT_RL := get_fk('FORMULA_ID', r_LPE.INFORMATION264,l_dml_operation);
       l_LER_ID := get_fk('LER_ID', r_LPE.INFORMATION257,l_dml_operation);
       l_PL_ID := get_fk('PL_ID', r_LPE.INFORMATION261,l_dml_operation);
       --

       l_update := false;
       l_process_date := p_effective_date;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_LPE_unique.information2 and r_LPE_unique.information3 then
               l_update := true;
               if r_LPE_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'LER_CHG_PL_NIP_ENRT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'LER_CHG_PL_NIP_ENRT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_LPE_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_LPE_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LPE_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
              --DOUBT    log_data('LPE',l_new_value,l_prefix || r_LPE_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_LPE_min_max_dates(r_LPE_unique.table_route_id, r_LPE_unique.information1 ) ;
       fetch c_LPE_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_LPE_unique.information2);

       --
       if p_reuse_object_flag = 'Y' then
         if c_LPE_min_max_dates%found then
           -- cursor to find the object
           open c_find_LPE_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_ler_chg_pl_nip_enrt_id, -999)  ) ;
           fetch c_find_LPE_in_target into l_new_value ;
           if c_find_LPE_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_LER_CHG_PL_NIP_ENRT_F',
                  p_base_key_column => 'LER_CHG_PL_NIP_ENRT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_LPE_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'LER_CHG_PL_NIP_ENRT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'LER_CHG_PL_NIP_ENRT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_LPE_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LPE_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_LPE_in_target ;
           --
         end if;
       end if ;
       --
       close c_LPE_min_max_dates ;
    end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then
         --
         l_current_pk_id := r_LPE.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_LPE.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

     if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_LER_CHG_PL_NIP_ENRT_F CREATE_LER_CHG_PL_NIP_ENRT ',20);
           BEN_LER_CHG_PL_NIP_ENRT_API.CREATE_LER_CHG_PL_NIP_ENRT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
            ,P_AUTO_ENRT_MTHD_RL      => l_AUTO_ENRT_MTHD_RL
                         ,P_CRNT_ENRT_PRCLDS_CHG_FLAG      => r_LPE.INFORMATION12
                         ,P_DFLT_ENRT_CD      => r_LPE.INFORMATION16
                         ,P_DFLT_ENRT_RL      => l_DFLT_ENRT_RL
                         ,P_DFLT_FLAG      => r_LPE.INFORMATION13
                         ,P_ENRT_CD      => r_LPE.INFORMATION17
                         ,P_ENRT_MTHD_CD      => r_LPE.INFORMATION15
                         ,P_ENRT_RL      => l_ENRT_RL
                         ,P_LER_CHG_PL_NIP_ENRT_ID      => l_ler_chg_pl_nip_enrt_id
                         ,P_LER_ID      => l_LER_ID
                         ,P_LPE_ATTRIBUTE1      => r_LPE.INFORMATION111
                         ,P_LPE_ATTRIBUTE10      => r_LPE.INFORMATION120
                         ,P_LPE_ATTRIBUTE11      => r_LPE.INFORMATION121
                         ,P_LPE_ATTRIBUTE12      => r_LPE.INFORMATION122
                         ,P_LPE_ATTRIBUTE13      => r_LPE.INFORMATION123
                         ,P_LPE_ATTRIBUTE14      => r_LPE.INFORMATION124
                         ,P_LPE_ATTRIBUTE15      => r_LPE.INFORMATION125
                         ,P_LPE_ATTRIBUTE16      => r_LPE.INFORMATION126
                         ,P_LPE_ATTRIBUTE17      => r_LPE.INFORMATION127
                         ,P_LPE_ATTRIBUTE18      => r_LPE.INFORMATION128
                         ,P_LPE_ATTRIBUTE19      => r_LPE.INFORMATION129
                         ,P_LPE_ATTRIBUTE2      => r_LPE.INFORMATION112
                         ,P_LPE_ATTRIBUTE20      => r_LPE.INFORMATION130
                         ,P_LPE_ATTRIBUTE21      => r_LPE.INFORMATION131
                         ,P_LPE_ATTRIBUTE22      => r_LPE.INFORMATION132
                         ,P_LPE_ATTRIBUTE23      => r_LPE.INFORMATION133
                         ,P_LPE_ATTRIBUTE24      => r_LPE.INFORMATION134
                         ,P_LPE_ATTRIBUTE25      => r_LPE.INFORMATION135
                         ,P_LPE_ATTRIBUTE26      => r_LPE.INFORMATION136
                         ,P_LPE_ATTRIBUTE27      => r_LPE.INFORMATION137
                         ,P_LPE_ATTRIBUTE28      => r_LPE.INFORMATION138
                         ,P_LPE_ATTRIBUTE29      => r_LPE.INFORMATION139
                         ,P_LPE_ATTRIBUTE3      => r_LPE.INFORMATION113
                         ,P_LPE_ATTRIBUTE30      => r_LPE.INFORMATION140
                         ,P_LPE_ATTRIBUTE4      => r_LPE.INFORMATION114
                         ,P_LPE_ATTRIBUTE5      => r_LPE.INFORMATION115
                         ,P_LPE_ATTRIBUTE6      => r_LPE.INFORMATION116
                         ,P_LPE_ATTRIBUTE7      => r_LPE.INFORMATION117
                         ,P_LPE_ATTRIBUTE8      => r_LPE.INFORMATION118
                         ,P_LPE_ATTRIBUTE9      => r_LPE.INFORMATION119
                         ,P_LPE_ATTRIBUTE_CATEGORY      => r_LPE.INFORMATION110
                         ,P_PL_ID      => l_PL_ID
                         ,P_STL_ELIG_CANT_CHG_FLAG      => r_LPE.INFORMATION14
             ,P_TCO_CHG_ENRT_CD      => r_LPE.INFORMATION11
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_ler_chg_pl_nip_enrt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'LER_CHG_PL_NIP_ENRT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_LPE.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_LER_CHG_PL_NIP_ENRT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LPE_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
            hr_utility.set_location(' BEN_LER_CHG_PL_NIP_ENRT_F UPDATE_LER_CHG_PL_NIP_ENRT ',30);
            --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_LPE.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_LPE.information3,
               p_effective_start_date  => r_LPE.information2,
               p_dml_operation         => r_LPE.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_LER_CHG_PL_NIP_ENRT_ID := r_LPE.information1;
             l_object_version_number := r_LPE.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END

           BEN_LER_CHG_PL_NIP_ENRT_API.UPDATE_LER_CHG_PL_NIP_ENRT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_AUTO_ENRT_MTHD_RL      => l_AUTO_ENRT_MTHD_RL
                          ,P_CRNT_ENRT_PRCLDS_CHG_FLAG      => r_LPE.INFORMATION12
                          ,P_DFLT_ENRT_CD      => r_LPE.INFORMATION16
                          ,P_DFLT_ENRT_RL      => l_DFLT_ENRT_RL
                          ,P_DFLT_FLAG      => r_LPE.INFORMATION13
                          ,P_ENRT_CD      => r_LPE.INFORMATION17
                          ,P_ENRT_MTHD_CD      => r_LPE.INFORMATION15
                          ,P_ENRT_RL      => l_ENRT_RL
                          ,P_LER_CHG_PL_NIP_ENRT_ID      => l_ler_chg_pl_nip_enrt_id
                          ,P_LER_ID      => l_LER_ID
                          ,P_LPE_ATTRIBUTE1      => r_LPE.INFORMATION111
                          ,P_LPE_ATTRIBUTE10      => r_LPE.INFORMATION120
                          ,P_LPE_ATTRIBUTE11      => r_LPE.INFORMATION121
                          ,P_LPE_ATTRIBUTE12      => r_LPE.INFORMATION122
                          ,P_LPE_ATTRIBUTE13      => r_LPE.INFORMATION123
                          ,P_LPE_ATTRIBUTE14      => r_LPE.INFORMATION124
                          ,P_LPE_ATTRIBUTE15      => r_LPE.INFORMATION125
                          ,P_LPE_ATTRIBUTE16      => r_LPE.INFORMATION126
                          ,P_LPE_ATTRIBUTE17      => r_LPE.INFORMATION127
                          ,P_LPE_ATTRIBUTE18      => r_LPE.INFORMATION128
                          ,P_LPE_ATTRIBUTE19      => r_LPE.INFORMATION129
                          ,P_LPE_ATTRIBUTE2      => r_LPE.INFORMATION112
                          ,P_LPE_ATTRIBUTE20      => r_LPE.INFORMATION130
                          ,P_LPE_ATTRIBUTE21      => r_LPE.INFORMATION131
                          ,P_LPE_ATTRIBUTE22      => r_LPE.INFORMATION132
                          ,P_LPE_ATTRIBUTE23      => r_LPE.INFORMATION133
                          ,P_LPE_ATTRIBUTE24      => r_LPE.INFORMATION134
                          ,P_LPE_ATTRIBUTE25      => r_LPE.INFORMATION135
                          ,P_LPE_ATTRIBUTE26      => r_LPE.INFORMATION136
                          ,P_LPE_ATTRIBUTE27      => r_LPE.INFORMATION137
                          ,P_LPE_ATTRIBUTE28      => r_LPE.INFORMATION138
                          ,P_LPE_ATTRIBUTE29      => r_LPE.INFORMATION139
                          ,P_LPE_ATTRIBUTE3      => r_LPE.INFORMATION113
                          ,P_LPE_ATTRIBUTE30      => r_LPE.INFORMATION140
                          ,P_LPE_ATTRIBUTE4      => r_LPE.INFORMATION114
                          ,P_LPE_ATTRIBUTE5      => r_LPE.INFORMATION115
                          ,P_LPE_ATTRIBUTE6      => r_LPE.INFORMATION116
                          ,P_LPE_ATTRIBUTE7      => r_LPE.INFORMATION117
                          ,P_LPE_ATTRIBUTE8      => r_LPE.INFORMATION118
                          ,P_LPE_ATTRIBUTE9      => r_LPE.INFORMATION119
                          ,P_LPE_ATTRIBUTE_CATEGORY      => r_LPE.INFORMATION110
                          ,P_PL_ID      => l_PL_ID
                          ,P_STL_ELIG_CANT_CHG_FLAG      => r_LPE.INFORMATION14
             ,P_TCO_CHG_ENRT_CD      => r_LPE.INFORMATION11
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
               ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
            end if;  -- l_update

         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_LPE.information3) then
             --
             BEN_LER_CHG_PL_NIP_ENRT_API.delete_LER_CHG_PL_NIP_ENRT(
                --
                p_validate                       => false
                ,p_ler_chg_pl_nip_enrt_id                   => l_ler_chg_pl_nip_enrt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'LPE',r_lpe.information5 );
     --
 end create_LPE_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_LOP_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_LOP_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_AUTO_ENRT_MTHD_RL  number;
   l_DFLT_ENRT_RL  number;
   l_ENRT_RL  number;
   l_LER_ID  number;
   l_OIPL_ID  number;
   cursor c_unique_LOP(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_LER_CHG_OIPL_ENRT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_LOP_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_LOP(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_LOP_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     LOP.ler_chg_oipl_enrt_id new_value
   from BEN_LER_CHG_OIPL_ENRT_F LOP
   where
   LOP.LER_ID     = l_LER_ID  and
   LOP.OIPL_ID    = l_OIPL_ID  and
   LOP.business_group_id  = c_business_group_id
   and   LOP.ler_chg_oipl_enrt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_LER_CHG_OIPL_ENRT_F LOP1
                where
                LOP1.LER_ID     = l_LER_ID  and
                LOP1.OIPL_ID     =l_OIPL_ID  and
                LOP1.business_group_id  = c_business_group_id
                and   LOP1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_LER_CHG_OIPL_ENRT_F LOP2
                where
                LOP2.LER_ID     = l_LER_ID  and
                LOP2.OIPL_ID     = l_OIPL_ID  and
                LOP2.business_group_id  = c_business_group_id
                and   LOP2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
    --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END

   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_LOP                     c_LOP%rowtype;
   l_ler_chg_oipl_enrt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_LOP_unique in c_unique_LOP('LOP') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_LOP_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
         ) then
       --
       hr_utility.set_location(' r_LOP_unique.table_route_id '||r_LOP_unique.table_route_id,10);
       hr_utility.set_location(' r_LOP_unique.information1 '||r_LOP_unique.information1,10);
       hr_utility.set_location( 'r_LOP_unique.information2 '||r_LOP_unique.information2,10);
       hr_utility.set_location( 'r_LOP_unique.information3 '||r_LOP_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
        --UPD START
         open c_LOP(r_LOP_unique.table_route_id,
                r_LOP_unique.information1,
                r_LOP_unique.information2,
                r_LOP_unique.information3 ) ;
       --
       fetch c_LOP into r_LOP ;
       --
       close c_LOP ;
       --
       l_dml_operation:= r_LOP_unique.dml_operation ;
       l_AUTO_ENRT_MTHD_RL := get_fk('FORMULA_ID', r_LOP.INFORMATION262,l_dml_operation);
       l_DFLT_ENRT_RL := get_fk('FORMULA_ID', r_LOP.INFORMATION264,l_dml_operation);
       l_ENRT_RL := get_fk('FORMULA_ID', r_LOP.INFORMATION263,l_dml_operation);
       l_LER_ID := get_fk('LER_ID', r_LOP.INFORMATION257,l_dml_operation);
       l_OIPL_ID := get_fk('OIPL_ID', r_LOP.INFORMATION258,l_dml_operation);
       --
        l_update := false;
        l_process_date := p_effective_date;
        --
        if l_dml_operation = 'UPDATE' then
          --
          l_object_found_in_target := TRUE;
          --
          if l_process_date between r_LOP_unique.information2 and r_LOP_unique.information3 then
                l_update := true;
                if r_LOP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                  or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'LER_CHG_OIPL_ENRT_ID'
                then
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'LER_CHG_OIPL_ENRT_ID' ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_LOP_unique.information1 ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_LOP_unique.information1 ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LOP_unique.table_route_id;
                   --
                   -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                   --
                   BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                   --
          --DOUBT         log_data('LOP',l_new_value,l_prefix || r_LOP_unique.name|| l_suffix,'REUSED');
                   --
                end if ;
                hr_utility.set_location( 'found record for update',10);
            --
          else
            --
            l_update := false;
            --
          end if;
        else
          --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_LOP_min_max_dates(r_LOP_unique.table_route_id, r_LOP_unique.information1 ) ;
       fetch c_LOP_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
        l_min_esd := greatest(l_min_esd,r_LOP_unique.information2);

       --
       if p_reuse_object_flag = 'Y' then
         if c_LOP_min_max_dates%found then
           -- cursor to find the object
           open c_find_LOP_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_ler_chg_oipl_enrt_id, -999)  ) ;
           fetch c_find_LOP_in_target into l_new_value ;
           if c_find_LOP_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_LER_CHG_OIPL_ENRT_F',
                  p_base_key_column => 'LER_CHG_OIPL_ENRT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_LOP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'LER_CHG_OIPL_ENRT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'LER_CHG_OIPL_ENRT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_LOP_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LOP_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_LOP_in_target ;
           --
         end if;
       end if ;
       --
       close c_LOP_min_max_dates ;
      end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_LOP.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_LOP.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

        if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_LER_CHG_OIPL_ENRT_F CREATE_LER_CHG_OIPL_ENRT ',20);
           BEN_LER_CHG_OIPL_ENRT_API.CREATE_LER_CHG_OIPL_ENRT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_AUTO_ENRT_FLAG      => r_LOP.INFORMATION14
                          ,P_AUTO_ENRT_MTHD_RL      => l_AUTO_ENRT_MTHD_RL
                          ,P_CRNT_ENRT_PRCLDS_CHG_FLAG      => r_LOP.INFORMATION11
                          ,P_DFLT_ENRT_CD      => r_LOP.INFORMATION16
                          ,P_DFLT_ENRT_RL      => l_DFLT_ENRT_RL
                          ,P_DFLT_FLAG      => r_LOP.INFORMATION12
                          ,P_ENRT_CD      => r_LOP.INFORMATION15
                          ,P_ENRT_RL      => l_ENRT_RL
                          ,P_LER_CHG_OIPL_ENRT_ID      => l_ler_chg_oipl_enrt_id
                          ,P_LER_ID      => l_LER_ID
                          ,P_LOP_ATTRIBUTE1      => r_LOP.INFORMATION111
                          ,P_LOP_ATTRIBUTE10      => r_LOP.INFORMATION120
                          ,P_LOP_ATTRIBUTE11      => r_LOP.INFORMATION121
                          ,P_LOP_ATTRIBUTE12      => r_LOP.INFORMATION122
                          ,P_LOP_ATTRIBUTE13      => r_LOP.INFORMATION123
                          ,P_LOP_ATTRIBUTE14      => r_LOP.INFORMATION124
                          ,P_LOP_ATTRIBUTE15      => r_LOP.INFORMATION125
                          ,P_LOP_ATTRIBUTE16      => r_LOP.INFORMATION126
                          ,P_LOP_ATTRIBUTE17      => r_LOP.INFORMATION127
                          ,P_LOP_ATTRIBUTE18      => r_LOP.INFORMATION128
                          ,P_LOP_ATTRIBUTE19      => r_LOP.INFORMATION129
                          ,P_LOP_ATTRIBUTE2      => r_LOP.INFORMATION112
                          ,P_LOP_ATTRIBUTE20      => r_LOP.INFORMATION130
                          ,P_LOP_ATTRIBUTE21      => r_LOP.INFORMATION131
                          ,P_LOP_ATTRIBUTE22      => r_LOP.INFORMATION132
                          ,P_LOP_ATTRIBUTE23      => r_LOP.INFORMATION133
                          ,P_LOP_ATTRIBUTE24      => r_LOP.INFORMATION134
                          ,P_LOP_ATTRIBUTE25      => r_LOP.INFORMATION135
                          ,P_LOP_ATTRIBUTE26      => r_LOP.INFORMATION136
                          ,P_LOP_ATTRIBUTE27      => r_LOP.INFORMATION137
                          ,P_LOP_ATTRIBUTE28      => r_LOP.INFORMATION138
                          ,P_LOP_ATTRIBUTE29      => r_LOP.INFORMATION139
                          ,P_LOP_ATTRIBUTE3      => r_LOP.INFORMATION113
                          ,P_LOP_ATTRIBUTE30      => r_LOP.INFORMATION140
                          ,P_LOP_ATTRIBUTE4      => r_LOP.INFORMATION114
                          ,P_LOP_ATTRIBUTE5      => r_LOP.INFORMATION115
                          ,P_LOP_ATTRIBUTE6      => r_LOP.INFORMATION116
                          ,P_LOP_ATTRIBUTE7      => r_LOP.INFORMATION117
                          ,P_LOP_ATTRIBUTE8      => r_LOP.INFORMATION118
                          ,P_LOP_ATTRIBUTE9      => r_LOP.INFORMATION119
                          ,P_LOP_ATTRIBUTE_CATEGORY      => r_LOP.INFORMATION110
                          ,P_OIPL_ID      => l_OIPL_ID
             ,P_STL_ELIG_CANT_CHG_FLAG      => r_LOP.INFORMATION13
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_ler_chg_oipl_enrt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'LER_CHG_OIPL_ENRT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_LOP.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_LER_CHG_OIPL_ENRT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LOP_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_LER_CHG_OIPL_ENRT_F UPDATE_LER_CHG_OIPL_ENRT ',30);
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_LOP.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_LOP.information3,
               p_effective_start_date  => r_LOP.information2,
               p_dml_operation         => r_LOP.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_LER_CHG_OIPL_ENRT_ID   := r_LOP.information1;
             l_object_version_number := r_LOP.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           BEN_LER_CHG_OIPL_ENRT_API.UPDATE_LER_CHG_OIPL_ENRT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
            ,P_AUTO_ENRT_FLAG      => r_LOP.INFORMATION14
                         ,P_AUTO_ENRT_MTHD_RL      => l_AUTO_ENRT_MTHD_RL
                         ,P_CRNT_ENRT_PRCLDS_CHG_FLAG      => r_LOP.INFORMATION11
                         ,P_DFLT_ENRT_CD      => r_LOP.INFORMATION16
                         ,P_DFLT_ENRT_RL      => l_DFLT_ENRT_RL
                         ,P_DFLT_FLAG      => r_LOP.INFORMATION12
                         ,P_ENRT_CD      => r_LOP.INFORMATION15
                         ,P_ENRT_RL      => l_ENRT_RL
                         ,P_LER_CHG_OIPL_ENRT_ID      => l_ler_chg_oipl_enrt_id
                         ,P_LER_ID      => l_LER_ID
                         ,P_LOP_ATTRIBUTE1      => r_LOP.INFORMATION111
                         ,P_LOP_ATTRIBUTE10      => r_LOP.INFORMATION120
                         ,P_LOP_ATTRIBUTE11      => r_LOP.INFORMATION121
                         ,P_LOP_ATTRIBUTE12      => r_LOP.INFORMATION122
                         ,P_LOP_ATTRIBUTE13      => r_LOP.INFORMATION123
                         ,P_LOP_ATTRIBUTE14      => r_LOP.INFORMATION124
                         ,P_LOP_ATTRIBUTE15      => r_LOP.INFORMATION125
                         ,P_LOP_ATTRIBUTE16      => r_LOP.INFORMATION126
                         ,P_LOP_ATTRIBUTE17      => r_LOP.INFORMATION127
                         ,P_LOP_ATTRIBUTE18      => r_LOP.INFORMATION128
                         ,P_LOP_ATTRIBUTE19      => r_LOP.INFORMATION129
                         ,P_LOP_ATTRIBUTE2      => r_LOP.INFORMATION112
                         ,P_LOP_ATTRIBUTE20      => r_LOP.INFORMATION130
                         ,P_LOP_ATTRIBUTE21      => r_LOP.INFORMATION131
                         ,P_LOP_ATTRIBUTE22      => r_LOP.INFORMATION132
                         ,P_LOP_ATTRIBUTE23      => r_LOP.INFORMATION133
                         ,P_LOP_ATTRIBUTE24      => r_LOP.INFORMATION134
                         ,P_LOP_ATTRIBUTE25      => r_LOP.INFORMATION135
                         ,P_LOP_ATTRIBUTE26      => r_LOP.INFORMATION136
                         ,P_LOP_ATTRIBUTE27      => r_LOP.INFORMATION137
                         ,P_LOP_ATTRIBUTE28      => r_LOP.INFORMATION138
                         ,P_LOP_ATTRIBUTE29      => r_LOP.INFORMATION139
                         ,P_LOP_ATTRIBUTE3      => r_LOP.INFORMATION113
                         ,P_LOP_ATTRIBUTE30      => r_LOP.INFORMATION140
                         ,P_LOP_ATTRIBUTE4      => r_LOP.INFORMATION114
                         ,P_LOP_ATTRIBUTE5      => r_LOP.INFORMATION115
                         ,P_LOP_ATTRIBUTE6      => r_LOP.INFORMATION116
                         ,P_LOP_ATTRIBUTE7      => r_LOP.INFORMATION117
                         ,P_LOP_ATTRIBUTE8      => r_LOP.INFORMATION118
                         ,P_LOP_ATTRIBUTE9      => r_LOP.INFORMATION119
                         ,P_LOP_ATTRIBUTE_CATEGORY      => r_LOP.INFORMATION110
                         ,P_OIPL_ID      => l_OIPL_ID
             ,P_STL_ELIG_CANT_CHG_FLAG      => r_LOP.INFORMATION13
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
            ,P_DATETRACK_MODE        => l_datetrack_mode
           );
               end if;  -- l_update
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_LOP.information3) then
             --
             BEN_LER_CHG_OIPL_ENRT_API.delete_LER_CHG_OIPL_ENRT(
                --
                p_validate                       => false
                ,p_ler_chg_oipl_enrt_id                   => l_ler_chg_oipl_enrt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
              --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'LOP',r_lOP.information5 );
     --
 end create_LOP_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_LNC_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_LNC_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_CTFN_RQD_WHEN_RL  number;
   l_LER_RQRS_ENRT_CTFN_ID  number;
   l_ENRT_CTFN_TYP_CD       varchar2(30);
   --
   cursor c_unique_LNC(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_LER_ENRT_CTFN_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 --ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_LNC_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_LNC(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_LNC_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     LNC.ler_enrt_ctfn_id new_value
   from BEN_LER_ENRT_CTFN_F LNC
   where
   nvl(LNC.LER_RQRS_ENRT_CTFN_ID,-999)     = nvl(l_LER_RQRS_ENRT_CTFN_ID,-999)  and
   nvl(LNC.ENRT_CTFN_TYP_CD,'XXX')   = nvl(l_ENRT_CTFN_TYP_CD,'XXX') and
   LNC.business_group_id  = c_business_group_id
   and   LNC.ler_enrt_ctfn_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_LER_ENRT_CTFN_F LNC1
                where
                nvl(LNC1.LER_RQRS_ENRT_CTFN_ID,-999)     = nvl(l_LER_RQRS_ENRT_CTFN_ID,-999)  and
                LNC1.ENRT_CTFN_TYP_CD   = l_ENRT_CTFN_TYP_CD and
                LNC1.business_group_id  = c_business_group_id
                and   LNC1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_LER_ENRT_CTFN_F LNC2
                where
                nvl(LNC2.LER_RQRS_ENRT_CTFN_ID,-999)     = nvl(l_LER_RQRS_ENRT_CTFN_ID,-999)  and
                LNC2.ENRT_CTFN_TYP_CD   = l_ENRT_CTFN_TYP_CD and
                LNC2.business_group_id  = c_business_group_id
                and   LNC2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_LNC                     c_LNC%rowtype;
   l_ler_enrt_ctfn_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_LNC_unique in c_unique_LNC('LNC') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_LNC_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_LNC_unique.table_route_id '||r_LNC_unique.table_route_id,10);
       hr_utility.set_location(' r_LNC_unique.information1 '||r_LNC_unique.information1,10);
       hr_utility.set_location( 'r_LNC_unique.information2 '||r_LNC_unique.information2,10);
       hr_utility.set_location( 'r_LNC_unique.information3 '||r_LNC_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
         --UPD START
           open c_LNC(r_LNC_unique.table_route_id,
                r_LNC_unique.information1,
                r_LNC_unique.information2,
                r_LNC_unique.information3 ) ;
       --
       fetch c_LNC into r_LNC ;
       --
       close c_LNC ;
       --
        l_dml_operation:= r_LNC_unique.dml_operation ;
       l_CTFN_RQD_WHEN_RL := get_fk('FORMULA_ID', r_LNC.INFORMATION258,l_dml_operation);
       l_LER_RQRS_ENRT_CTFN_ID := get_fk('LER_RQRS_ENRT_CTFN_ID', r_LNC.INFORMATION257,l_dml_operation);
       l_ENRT_CTFN_TYP_CD      := r_LNC.information12 ;
       --

        l_update := false;
        l_process_date := p_effective_date;
        --
        if l_dml_operation = 'UPDATE' then
          --
          l_object_found_in_target := TRUE;
          --
          if l_process_date between r_LNC_unique.information2 and r_LNC_unique.information3 then
                l_update := true;
                if r_LNC_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                  or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'LER_ENRT_CTFN_ID'
                then
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'LER_ENRT_CTFN_ID' ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_LNC_unique.information1 ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_LNC_unique.information1 ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LNC_unique.table_route_id;
                   --
                   -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                   --
                   BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                   --
             --DOUBT      log_data('LNC',l_new_value,l_prefix || r_LNC_unique.name|| l_suffix,'REUSED');
                   --
                end if ;
                hr_utility.set_location( 'found record for update',10);
            --
          else
            --
            l_update := false;
            --
          end if;
        else
          --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_LNC_min_max_dates(r_LNC_unique.table_route_id, r_LNC_unique.information1 ) ;
       fetch c_LNC_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_LNC_unique.information2);
    /*   open c_LNC(r_LNC_unique.table_route_id,
                r_LNC_unique.information1,
                r_LNC_unique.information2,
                r_LNC_unique.information3 ) ;
       --
       fetch c_LNC into r_LNC ;
       --
       close c_LNC ; */
       --
       --
       if p_reuse_object_flag = 'Y' then
         if c_LNC_min_max_dates%found then
           -- cursor to find the object
           open c_find_LNC_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_ler_enrt_ctfn_id, -999)  ) ;
           fetch c_find_LNC_in_target into l_new_value ;
           if c_find_LNC_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_LER_ENRT_CTFN_F',
                  p_base_key_column => 'LER_ENRT_CTFN_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_LNC_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'LER_ENRT_CTFN_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'LER_ENRT_CTFN_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_LNC_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LNC_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_LNC_in_target ;
           --
         end if;
       end if ;
       --
       close c_LNC_min_max_dates ;
         end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_LNC.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_LNC.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

        if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_LER_ENRT_CTFN_F CREATE_LER_ENRT_CTFN ',20);
           BEN_LER_ENRT_CTFN_API.CREATE_LER_ENRT_CTFN(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
            ,P_CTFN_RQD_WHEN_RL      => l_CTFN_RQD_WHEN_RL
                         ,P_ENRT_CTFN_TYP_CD      => r_LNC.INFORMATION12
                         ,P_LER_ENRT_CTFN_ID      => l_ler_enrt_ctfn_id
                         ,P_LER_RQRS_ENRT_CTFN_ID      => l_LER_RQRS_ENRT_CTFN_ID
                         ,P_LNC_ATTRIBUTE1      => r_LNC.INFORMATION111
                         ,P_LNC_ATTRIBUTE10      => r_LNC.INFORMATION120
                         ,P_LNC_ATTRIBUTE11      => r_LNC.INFORMATION121
                         ,P_LNC_ATTRIBUTE12      => r_LNC.INFORMATION122
                         ,P_LNC_ATTRIBUTE13      => r_LNC.INFORMATION123
                         ,P_LNC_ATTRIBUTE14      => r_LNC.INFORMATION124
                         ,P_LNC_ATTRIBUTE15      => r_LNC.INFORMATION125
                         ,P_LNC_ATTRIBUTE16      => r_LNC.INFORMATION126
                         ,P_LNC_ATTRIBUTE17      => r_LNC.INFORMATION127
                         ,P_LNC_ATTRIBUTE18      => r_LNC.INFORMATION128
                         ,P_LNC_ATTRIBUTE19      => r_LNC.INFORMATION129
                         ,P_LNC_ATTRIBUTE2      => r_LNC.INFORMATION112
                         ,P_LNC_ATTRIBUTE20      => r_LNC.INFORMATION130
                         ,P_LNC_ATTRIBUTE21      => r_LNC.INFORMATION131
                         ,P_LNC_ATTRIBUTE22      => r_LNC.INFORMATION132
                         ,P_LNC_ATTRIBUTE23      => r_LNC.INFORMATION133
                         ,P_LNC_ATTRIBUTE24      => r_LNC.INFORMATION134
                         ,P_LNC_ATTRIBUTE25      => r_LNC.INFORMATION135
                         ,P_LNC_ATTRIBUTE26      => r_LNC.INFORMATION136
                         ,P_LNC_ATTRIBUTE27      => r_LNC.INFORMATION137
                         ,P_LNC_ATTRIBUTE28      => r_LNC.INFORMATION138
                         ,P_LNC_ATTRIBUTE29      => r_LNC.INFORMATION139
                         ,P_LNC_ATTRIBUTE3      => r_LNC.INFORMATION113
                         ,P_LNC_ATTRIBUTE30      => r_LNC.INFORMATION140
                         ,P_LNC_ATTRIBUTE4      => r_LNC.INFORMATION114
                         ,P_LNC_ATTRIBUTE5      => r_LNC.INFORMATION115
                         ,P_LNC_ATTRIBUTE6      => r_LNC.INFORMATION116
                         ,P_LNC_ATTRIBUTE7      => r_LNC.INFORMATION117
                         ,P_LNC_ATTRIBUTE8      => r_LNC.INFORMATION118
                         ,P_LNC_ATTRIBUTE9      => r_LNC.INFORMATION119
                         ,P_LNC_ATTRIBUTE_CATEGORY      => r_LNC.INFORMATION110
             ,P_RQD_FLAG      => r_LNC.INFORMATION11
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_ler_enrt_ctfn_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'LER_ENRT_CTFN_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_LNC.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_LER_ENRT_CTFN_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LNC_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
            hr_utility.set_location(' BEN_LER_ENRT_CTFN_F UPDATE_LER_ENRT_CTFN ',30);
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_LNC.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_LNC.information3,
               p_effective_start_date  => r_LNC.information2,
               p_dml_operation         => r_LNC.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_LER_ENRT_CTFN_ID   := r_LNC.information1;
             l_object_version_number := r_LNC.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END

           BEN_LER_ENRT_CTFN_API.UPDATE_LER_ENRT_CTFN(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
            ,P_CTFN_RQD_WHEN_RL      => l_CTFN_RQD_WHEN_RL
                         ,P_ENRT_CTFN_TYP_CD      => r_LNC.INFORMATION12
                         ,P_LER_ENRT_CTFN_ID      => l_ler_enrt_ctfn_id
                         ,P_LER_RQRS_ENRT_CTFN_ID      => l_LER_RQRS_ENRT_CTFN_ID
                         ,P_LNC_ATTRIBUTE1      => r_LNC.INFORMATION111
                         ,P_LNC_ATTRIBUTE10      => r_LNC.INFORMATION120
                         ,P_LNC_ATTRIBUTE11      => r_LNC.INFORMATION121
                         ,P_LNC_ATTRIBUTE12      => r_LNC.INFORMATION122
                         ,P_LNC_ATTRIBUTE13      => r_LNC.INFORMATION123
                         ,P_LNC_ATTRIBUTE14      => r_LNC.INFORMATION124
                         ,P_LNC_ATTRIBUTE15      => r_LNC.INFORMATION125
                         ,P_LNC_ATTRIBUTE16      => r_LNC.INFORMATION126
                         ,P_LNC_ATTRIBUTE17      => r_LNC.INFORMATION127
                         ,P_LNC_ATTRIBUTE18      => r_LNC.INFORMATION128
                         ,P_LNC_ATTRIBUTE19      => r_LNC.INFORMATION129
                         ,P_LNC_ATTRIBUTE2      => r_LNC.INFORMATION112
                         ,P_LNC_ATTRIBUTE20      => r_LNC.INFORMATION130
                         ,P_LNC_ATTRIBUTE21      => r_LNC.INFORMATION131
                         ,P_LNC_ATTRIBUTE22      => r_LNC.INFORMATION132
                         ,P_LNC_ATTRIBUTE23      => r_LNC.INFORMATION133
                         ,P_LNC_ATTRIBUTE24      => r_LNC.INFORMATION134
                         ,P_LNC_ATTRIBUTE25      => r_LNC.INFORMATION135
                         ,P_LNC_ATTRIBUTE26      => r_LNC.INFORMATION136
                         ,P_LNC_ATTRIBUTE27      => r_LNC.INFORMATION137
                         ,P_LNC_ATTRIBUTE28      => r_LNC.INFORMATION138
                         ,P_LNC_ATTRIBUTE29      => r_LNC.INFORMATION139
                         ,P_LNC_ATTRIBUTE3      => r_LNC.INFORMATION113
                         ,P_LNC_ATTRIBUTE30      => r_LNC.INFORMATION140
                         ,P_LNC_ATTRIBUTE4      => r_LNC.INFORMATION114
                         ,P_LNC_ATTRIBUTE5      => r_LNC.INFORMATION115
                         ,P_LNC_ATTRIBUTE6      => r_LNC.INFORMATION116
                         ,P_LNC_ATTRIBUTE7      => r_LNC.INFORMATION117
                         ,P_LNC_ATTRIBUTE8      => r_LNC.INFORMATION118
                         ,P_LNC_ATTRIBUTE9      => r_LNC.INFORMATION119
                         ,P_LNC_ATTRIBUTE_CATEGORY      => r_LNC.INFORMATION110
             ,P_RQD_FLAG      => r_LNC.INFORMATION11
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
              ,P_DATETRACK_MODE        => l_datetrack_mode

           );
           --
             end if;  -- l_update
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_LNC.information3) then
             --
             BEN_LER_ENRT_CTFN_API.delete_LER_ENRT_CTFN(
                --
                p_validate                       => false
                ,p_ler_enrt_ctfn_id                   => l_ler_enrt_ctfn_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'LNC',r_lnc.information5 );
     --
 end create_LNC_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_LRE_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_LRE_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_CTFN_RQD_WHEN_RL  number;
   l_LER_ID  number;
   l_OIPL_ID  number;
   l_PL_ID  number;
   cursor c_unique_LRE(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_LER_RQRS_ENRT_CTFN_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 --ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_LRE_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_LRE(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_LRE_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     LRE.ler_rqrs_enrt_ctfn_id new_value
   from BEN_LER_RQRS_ENRT_CTFN_F LRE
   where
   nvl(LRE.LER_ID,-999)     = nvl(l_LER_ID,-999)  and
   nvl(LRE.OIPL_ID,-999)     = nvl(l_OIPL_ID,-999)  and
   nvl(LRE.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
   LRE.business_group_id  = c_business_group_id
   and   LRE.ler_rqrs_enrt_ctfn_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_LER_RQRS_ENRT_CTFN_F LRE1
                where
                nvl(LRE1.LER_ID,-999)     = nvl(l_LER_ID,-999)  and
                nvl(LRE1.OIPL_ID,-999)     = nvl(l_OIPL_ID,-999)  and
                nvl(LRE1.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
                LRE1.business_group_id  = c_business_group_id
                and   LRE1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_LER_RQRS_ENRT_CTFN_F LRE2
                where
                nvl(LRE2.LER_ID,-999)     = nvl(l_LER_ID,-999)  and
                nvl(LRE2.OIPL_ID,-999)     = nvl(l_OIPL_ID,-999)  and
                nvl(LRE2.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
                LRE2.business_group_id  = c_business_group_id
                and   LRE2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
    --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_LRE                     c_LRE%rowtype;
   l_ler_rqrs_enrt_ctfn_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_LRE_unique in c_unique_LRE('LRE') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_LRE_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_LRE_unique.table_route_id '||r_LRE_unique.table_route_id,10);
       hr_utility.set_location(' r_LRE_unique.information1 '||r_LRE_unique.information1,10);
       hr_utility.set_location( 'r_LRE_unique.information2 '||r_LRE_unique.information2,10);
       hr_utility.set_location( 'r_LRE_unique.information3 '||r_LRE_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
         open c_LRE(r_LRE_unique.table_route_id,
                r_LRE_unique.information1,
                r_LRE_unique.information2,
                r_LRE_unique.information3 ) ;
       --
       fetch c_LRE into r_LRE ;
       --
       close c_LRE ;
       --
       l_dml_operation:= r_LRE_unique.dml_operation ;
       l_CTFN_RQD_WHEN_RL := get_fk('FORMULA_ID', r_LRE.INFORMATION263,l_dml_operation);
       l_LER_ID := get_fk('LER_ID', r_LRE.INFORMATION257,l_dml_operation);
       l_OIPL_ID := get_fk('OIPL_ID', r_LRE.INFORMATION258,l_dml_operation);
       l_PL_ID := get_fk('PL_ID', r_LRE.INFORMATION261,l_dml_operation);
       --
       l_update := false;
       l_process_date := p_effective_date;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_LRE_unique.information2 and r_LRE_unique.information3 then
               l_update := true;
               if r_LRE_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'LER_RQRS_ENRT_CTFN_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'LER_RQRS_ENRT_CTFN_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_LRE_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_LRE_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LRE_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
            --      log_data('LER',l_new_value,l_prefix || r_LRE_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_LRE_min_max_dates(r_LRE_unique.table_route_id, r_LRE_unique.information1 ) ;
       fetch c_LRE_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_LRE_unique.information2);
 /*      open c_LRE(r_LRE_unique.table_route_id,
                r_LRE_unique.information1,
                r_LRE_unique.information2,
                r_LRE_unique.information3 ) ;
       --
       fetch c_LRE into r_LRE ;
       --
       close c_LRE ; */
       --
       if p_reuse_object_flag = 'Y' then
         if c_LRE_min_max_dates%found then
           -- cursor to find the object
           open c_find_LRE_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_ler_rqrs_enrt_ctfn_id, -999)  ) ;
           fetch c_find_LRE_in_target into l_new_value ;
           if c_find_LRE_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_LER_RQRS_ENRT_CTFN_F',
                  p_base_key_column => 'LER_RQRS_ENRT_CTFN_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_LRE_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'LER_RQRS_ENRT_CTFN_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'LER_RQRS_ENRT_CTFN_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_LRE_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LRE_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_LRE_in_target ;
           --
         end if;
       end if ;
       --
       close c_LRE_min_max_dates ;
     end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_LRE.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_LRE.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

           if l_first_rec and not l_update then
           -- Call Create routine.

           hr_utility.set_location(' BEN_LER_RQRS_ENRT_CTFN_F CREATE_LER_RQRS_ENRT_CTFN ',20);
           BEN_LER_RQRS_ENRT_CTFN_API.CREATE_LER_RQRS_ENRT_CTFN(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CTFN_RQD_WHEN_RL      => l_CTFN_RQD_WHEN_RL
                          ,P_EXCLD_FLAG      => r_LRE.INFORMATION11
                          ,P_LER_ID      => l_LER_ID
                          ,P_LER_RQRS_ENRT_CTFN_ID      => l_ler_rqrs_enrt_ctfn_id
                          ,P_LRE_ATTRIBUTE1      => r_LRE.INFORMATION111
                          ,P_LRE_ATTRIBUTE10      => r_LRE.INFORMATION120
                          ,P_LRE_ATTRIBUTE11      => r_LRE.INFORMATION121
                          ,P_LRE_ATTRIBUTE12      => r_LRE.INFORMATION122
                          ,P_LRE_ATTRIBUTE13      => r_LRE.INFORMATION123
                          ,P_LRE_ATTRIBUTE14      => r_LRE.INFORMATION124
                          ,P_LRE_ATTRIBUTE15      => r_LRE.INFORMATION125
                          ,P_LRE_ATTRIBUTE16      => r_LRE.INFORMATION126
                          ,P_LRE_ATTRIBUTE17      => r_LRE.INFORMATION127
                          ,P_LRE_ATTRIBUTE18      => r_LRE.INFORMATION128
                          ,P_LRE_ATTRIBUTE19      => r_LRE.INFORMATION129
                          ,P_LRE_ATTRIBUTE2      => r_LRE.INFORMATION112
                          ,P_LRE_ATTRIBUTE20      => r_LRE.INFORMATION130
                          ,P_LRE_ATTRIBUTE21      => r_LRE.INFORMATION131
                          ,P_LRE_ATTRIBUTE22      => r_LRE.INFORMATION132
                          ,P_LRE_ATTRIBUTE23      => r_LRE.INFORMATION133
                          ,P_LRE_ATTRIBUTE24      => r_LRE.INFORMATION134
                          ,P_LRE_ATTRIBUTE25      => r_LRE.INFORMATION135
                          ,P_LRE_ATTRIBUTE26      => r_LRE.INFORMATION136
                          ,P_LRE_ATTRIBUTE27      => r_LRE.INFORMATION137
                          ,P_LRE_ATTRIBUTE28      => r_LRE.INFORMATION138
                          ,P_LRE_ATTRIBUTE29      => r_LRE.INFORMATION139
                          ,P_LRE_ATTRIBUTE3      => r_LRE.INFORMATION113
                          ,P_LRE_ATTRIBUTE30      => r_LRE.INFORMATION140
                          ,P_LRE_ATTRIBUTE4      => r_LRE.INFORMATION114
                          ,P_LRE_ATTRIBUTE5      => r_LRE.INFORMATION115
                          ,P_LRE_ATTRIBUTE6      => r_LRE.INFORMATION116
                          ,P_LRE_ATTRIBUTE7      => r_LRE.INFORMATION117
                          ,P_LRE_ATTRIBUTE8      => r_LRE.INFORMATION118
                          ,P_LRE_ATTRIBUTE9      => r_LRE.INFORMATION119
                          ,P_LRE_ATTRIBUTE_CATEGORY      => r_LRE.INFORMATION110
                          ,P_OIPL_ID      => l_OIPL_ID
                          ,P_PL_ID      => l_PL_ID
                          --ML
                          ,P_SUSP_IF_CTFN_NOT_PRVD_FLAG      => nvl(r_LRE.INFORMATION198,'Y')
                          ,P_CTFN_DETERMINE_CD      => r_LRE.INFORMATION197
                          -- ML END
             -- 9999 NO PLIP here But there is PLIP level in API Call
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_ler_rqrs_enrt_ctfn_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'LER_RQRS_ENRT_CTFN_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_LRE.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_LER_RQRS_ENRT_CTFN_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LRE_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_LER_RQRS_ENRT_CTFN_F UPDATE_LER_RQRS_ENRT_CTFN ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_LRE.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_LRE.information3,
               p_effective_start_date  => r_LRE.information2,
               p_dml_operation         => r_LRE.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_LER_RQRS_ENRT_CTFN_ID   := r_LRE.information1;
             l_object_version_number := r_LRE.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END

           BEN_LER_RQRS_ENRT_CTFN_API.UPDATE_LER_RQRS_ENRT_CTFN(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
              ,P_CTFN_RQD_WHEN_RL      => l_CTFN_RQD_WHEN_RL
                          ,P_EXCLD_FLAG      => r_LRE.INFORMATION11
                          ,P_LER_ID      => l_LER_ID
                          ,P_LER_RQRS_ENRT_CTFN_ID      => l_ler_rqrs_enrt_ctfn_id
                          ,P_LRE_ATTRIBUTE1      => r_LRE.INFORMATION111
                          ,P_LRE_ATTRIBUTE10      => r_LRE.INFORMATION120
                          ,P_LRE_ATTRIBUTE11      => r_LRE.INFORMATION121
                          ,P_LRE_ATTRIBUTE12      => r_LRE.INFORMATION122
                          ,P_LRE_ATTRIBUTE13      => r_LRE.INFORMATION123
                          ,P_LRE_ATTRIBUTE14      => r_LRE.INFORMATION124
                          ,P_LRE_ATTRIBUTE15      => r_LRE.INFORMATION125
                          ,P_LRE_ATTRIBUTE16      => r_LRE.INFORMATION126
                          ,P_LRE_ATTRIBUTE17      => r_LRE.INFORMATION127
                          ,P_LRE_ATTRIBUTE18      => r_LRE.INFORMATION128
                          ,P_LRE_ATTRIBUTE19      => r_LRE.INFORMATION129
                          ,P_LRE_ATTRIBUTE2      => r_LRE.INFORMATION112
                          ,P_LRE_ATTRIBUTE20      => r_LRE.INFORMATION130
                          ,P_LRE_ATTRIBUTE21      => r_LRE.INFORMATION131
                          ,P_LRE_ATTRIBUTE22      => r_LRE.INFORMATION132
                          ,P_LRE_ATTRIBUTE23      => r_LRE.INFORMATION133
                          ,P_LRE_ATTRIBUTE24      => r_LRE.INFORMATION134
                          ,P_LRE_ATTRIBUTE25      => r_LRE.INFORMATION135
                          ,P_LRE_ATTRIBUTE26      => r_LRE.INFORMATION136
                          ,P_LRE_ATTRIBUTE27      => r_LRE.INFORMATION137
                          ,P_LRE_ATTRIBUTE28      => r_LRE.INFORMATION138
                          ,P_LRE_ATTRIBUTE29      => r_LRE.INFORMATION139
                          ,P_LRE_ATTRIBUTE3      => r_LRE.INFORMATION113
                          ,P_LRE_ATTRIBUTE30      => r_LRE.INFORMATION140
                          ,P_LRE_ATTRIBUTE4      => r_LRE.INFORMATION114
                          ,P_LRE_ATTRIBUTE5      => r_LRE.INFORMATION115
                          ,P_LRE_ATTRIBUTE6      => r_LRE.INFORMATION116
                          ,P_LRE_ATTRIBUTE7      => r_LRE.INFORMATION117
                          ,P_LRE_ATTRIBUTE8      => r_LRE.INFORMATION118
                          ,P_LRE_ATTRIBUTE9      => r_LRE.INFORMATION119
                          ,P_LRE_ATTRIBUTE_CATEGORY      => r_LRE.INFORMATION110
                          ,P_OIPL_ID      => l_OIPL_ID
                          ,P_PL_ID      => l_PL_ID
                          --ML
                          ,P_SUSP_IF_CTFN_NOT_PRVD_FLAG      => nvl(r_LRE.INFORMATION198,'Y')
                          ,P_CTFN_DETERMINE_CD      => r_LRE.INFORMATION197
                          -- ML END
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
            ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
             end if;  -- l_update

         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_LRE.information3) then
             --
             BEN_LER_RQRS_ENRT_CTFN_API.delete_LER_RQRS_ENRT_CTFN(
                --
                p_validate                       => false
                ,p_ler_rqrs_enrt_ctfn_id                   => l_ler_rqrs_enrt_ctfn_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'LRE',r_lre.information5 );
     --
 end create_LRE_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_LBC_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_LBC_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_CTFN_RQD_WHEN_RL  number;
   l_LER_BNFT_RSTRN_ID  number;
   l_ENRT_CTFN_TYP_CD   varchar2(30);
   --
   cursor c_unique_LBC(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
  ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_LER_BNFT_RSTRN_CTFN_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 --ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_LBC_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_LBC(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_LBC_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     LBC.ler_bnft_rstrn_ctfn_id new_value
   from BEN_LER_BNFT_RSTRN_CTFN_F LBC
   where
   nvl(LBC.LER_BNFT_RSTRN_ID,-999)     = nvl(l_LER_BNFT_RSTRN_ID,-999)  and
   nvl(LBC.ENRT_CTFN_TYP_CD,'XXX')     = nvl(l_ENRT_CTFN_TYP_CD,'XXX') and
   LBC.business_group_id  = c_business_group_id
   and   LBC.ler_bnft_rstrn_ctfn_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_LER_BNFT_RSTRN_CTFN_F LBC1
                where
                nvl(LBC1.LER_BNFT_RSTRN_ID,-999)     = nvl(l_LER_BNFT_RSTRN_ID,-999)  and
                LBC1.ENRT_CTFN_TYP_CD              = l_ENRT_CTFN_TYP_CD and
                LBC1.business_group_id  = c_business_group_id
                and   LBC1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_LER_BNFT_RSTRN_CTFN_F LBC2
                where
                nvl(LBC2.LER_BNFT_RSTRN_ID,-999)     = nvl(l_LER_BNFT_RSTRN_ID,-999)  and
                LBC2.ENRT_CTFN_TYP_CD              = l_ENRT_CTFN_TYP_CD and
                LBC2.business_group_id  = c_business_group_id
                and   LBC2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_LBC                     c_LBC%rowtype;
   l_ler_bnft_rstrn_ctfn_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_LBC_unique in c_unique_LBC('LBC') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_LBC_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_LBC_unique.table_route_id '||r_LBC_unique.table_route_id,10);
      hr_utility.set_location(' r_LBC_unique.information1 '||r_LBC_unique.information1,10);
      hr_utility.set_location( 'r_LBC_unique.information2 '||r_LBC_unique.information2,10);
       hr_utility.set_location( 'r_LBC_unique.information3 '||r_LBC_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
        open c_LBC(r_LBC_unique.table_route_id,
                r_LBC_unique.information1,
                r_LBC_unique.information2,
                r_LBC_unique.information3 ) ;
       --
       fetch c_LBC into r_LBC ;
       --
       close c_LBC ;
       --
       l_dml_operation:= r_LBC_unique.dml_operation ;
       l_CTFN_RQD_WHEN_RL := get_fk('FORMULA_ID', r_LBC.INFORMATION261);
       l_LER_BNFT_RSTRN_ID := get_fk('LER_BNFT_RSTRN_ID', r_LBC.INFORMATION257);
       l_ENRT_CTFN_TYP_CD  := r_LBC.information12 ;
       --
       l_update := false;
       l_process_date := p_effective_date;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_LBC_unique.information2 and r_LBC_unique.information3 then
               l_update := true;
               if r_LBC_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'LER_BNFT_RSTRN_CTFN_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'LER_BNFT_RSTRN_CTFN_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_LBC_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_LBC_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LBC_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
           --DOUBT       log_data('LBC',l_new_value,l_prefix || r_LBC_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_LBC_min_max_dates(r_LBC_unique.table_route_id, r_LBC_unique.information1 ) ;
       fetch c_LBC_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_LBC_unique.information2);
  /*     open c_LBC(r_LBC_unique.table_route_id,
                r_LBC_unique.information1,
                r_LBC_unique.information2,
                r_LBC_unique.information3 ) ;
       --
       fetch c_LBC into r_LBC ;
       --
       close c_LBC ; */
       --
       if p_reuse_object_flag = 'Y' then
         if c_LBC_min_max_dates%found then
           -- cursor to find the object
           open c_find_LBC_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_ler_bnft_rstrn_ctfn_id, -999)  ) ;
           fetch c_find_LBC_in_target into l_new_value ;
           if c_find_LBC_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_LER_BNFT_RSTRN_CTFN_F',
                  p_base_key_column => 'LER_BNFT_RSTRN_CTFN_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_LBC_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'LER_BNFT_RSTRN_CTFN_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'LER_BNFT_RSTRN_CTFN_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_LBC_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LBC_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_LBC_in_target ;
           --
         end if;
       end if ;
       --
       close c_LBC_min_max_dates ;
 end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_LBC.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_LBC.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

        if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_LER_BNFT_RSTRN_CTFN_F CREATE_LER_BNFT_RSTRN_CTFN ',20);
           BEN_LER_BNFT_RSTRN_CTFN_API.CREATE_LER_BNFT_RSTRN_CTFN(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CTFN_RQD_WHEN_RL      => l_CTFN_RQD_WHEN_RL
             ,P_ENRT_CTFN_TYP_CD      => r_LBC.INFORMATION12
             ,P_LBC_ATTRIBUTE1      => r_LBC.INFORMATION111
             ,P_LBC_ATTRIBUTE10      => r_LBC.INFORMATION120
             ,P_LBC_ATTRIBUTE11      => r_LBC.INFORMATION121
             ,P_LBC_ATTRIBUTE12      => r_LBC.INFORMATION122
             ,P_LBC_ATTRIBUTE13      => r_LBC.INFORMATION123
             ,P_LBC_ATTRIBUTE14      => r_LBC.INFORMATION124
             ,P_LBC_ATTRIBUTE15      => r_LBC.INFORMATION125
             ,P_LBC_ATTRIBUTE16      => r_LBC.INFORMATION126
             ,P_LBC_ATTRIBUTE17      => r_LBC.INFORMATION127
             ,P_LBC_ATTRIBUTE18      => r_LBC.INFORMATION128
             ,P_LBC_ATTRIBUTE19      => r_LBC.INFORMATION129
             ,P_LBC_ATTRIBUTE2      => r_LBC.INFORMATION112
             ,P_LBC_ATTRIBUTE20      => r_LBC.INFORMATION130
             ,P_LBC_ATTRIBUTE21      => r_LBC.INFORMATION131
             ,P_LBC_ATTRIBUTE22      => r_LBC.INFORMATION132
             ,P_LBC_ATTRIBUTE23      => r_LBC.INFORMATION133
             ,P_LBC_ATTRIBUTE24      => r_LBC.INFORMATION134
             ,P_LBC_ATTRIBUTE25      => r_LBC.INFORMATION135
             ,P_LBC_ATTRIBUTE26      => r_LBC.INFORMATION136
             ,P_LBC_ATTRIBUTE27      => r_LBC.INFORMATION137
             ,P_LBC_ATTRIBUTE28      => r_LBC.INFORMATION138
             ,P_LBC_ATTRIBUTE29      => r_LBC.INFORMATION139
             ,P_LBC_ATTRIBUTE3      => r_LBC.INFORMATION113
             ,P_LBC_ATTRIBUTE30      => r_LBC.INFORMATION140
             ,P_LBC_ATTRIBUTE4      => r_LBC.INFORMATION114
             ,P_LBC_ATTRIBUTE5      => r_LBC.INFORMATION115
             ,P_LBC_ATTRIBUTE6      => r_LBC.INFORMATION116
             ,P_LBC_ATTRIBUTE7      => r_LBC.INFORMATION117
             ,P_LBC_ATTRIBUTE8      => r_LBC.INFORMATION118
             ,P_LBC_ATTRIBUTE9      => r_LBC.INFORMATION119
             ,P_LBC_ATTRIBUTE_CATEGORY      => r_LBC.INFORMATION110
             ,P_LER_BNFT_RSTRN_CTFN_ID      => l_ler_bnft_rstrn_ctfn_id
             ,P_LER_BNFT_RSTRN_ID      => l_LER_BNFT_RSTRN_ID
             ,P_RQD_FLAG      => r_LBC.INFORMATION11
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_ler_bnft_rstrn_ctfn_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'LER_BNFT_RSTRN_CTFN_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_LBC.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_LER_BNFT_RSTRN_CTFN_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LBC_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_LER_BNFT_RSTRN_CTFN_F UPDATE_LER_BNFT_RSTRN_CTFN ',30);
           --UPD START
            hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
            --
            if l_update then
              --
              l_datetrack_mode := r_LBC.datetrack_mode ;
              --
              get_dt_modes(
                p_effective_date        => l_process_date,
                p_effective_end_date    => r_LBC.information3,
                p_effective_start_date  => r_LBC.information2,
                p_dml_operation         => r_LBC.dml_operation,
                p_datetrack_mode        => l_datetrack_mode );
            --    p_update                => l_update
              --
              l_effective_date := l_process_date;
              l_LER_BNFT_RSTRN_CTFN_ID   := r_LBC.information1;
              l_object_version_number := r_LBC.information265;
              --
            end if;
            --
            hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
            --
            IF l_update OR l_dml_operation <> 'UPDATE' THEN
            --UPD END


           BEN_LER_BNFT_RSTRN_CTFN_API.UPDATE_LER_BNFT_RSTRN_CTFN(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CTFN_RQD_WHEN_RL      => l_CTFN_RQD_WHEN_RL
             ,P_ENRT_CTFN_TYP_CD      => r_LBC.INFORMATION12
             ,P_LBC_ATTRIBUTE1      => r_LBC.INFORMATION111
             ,P_LBC_ATTRIBUTE10      => r_LBC.INFORMATION120
             ,P_LBC_ATTRIBUTE11      => r_LBC.INFORMATION121
             ,P_LBC_ATTRIBUTE12      => r_LBC.INFORMATION122
             ,P_LBC_ATTRIBUTE13      => r_LBC.INFORMATION123
             ,P_LBC_ATTRIBUTE14      => r_LBC.INFORMATION124
             ,P_LBC_ATTRIBUTE15      => r_LBC.INFORMATION125
             ,P_LBC_ATTRIBUTE16      => r_LBC.INFORMATION126
             ,P_LBC_ATTRIBUTE17      => r_LBC.INFORMATION127
             ,P_LBC_ATTRIBUTE18      => r_LBC.INFORMATION128
             ,P_LBC_ATTRIBUTE19      => r_LBC.INFORMATION129
             ,P_LBC_ATTRIBUTE2      => r_LBC.INFORMATION112
             ,P_LBC_ATTRIBUTE20      => r_LBC.INFORMATION130
             ,P_LBC_ATTRIBUTE21      => r_LBC.INFORMATION131
             ,P_LBC_ATTRIBUTE22      => r_LBC.INFORMATION132
             ,P_LBC_ATTRIBUTE23      => r_LBC.INFORMATION133
             ,P_LBC_ATTRIBUTE24      => r_LBC.INFORMATION134
             ,P_LBC_ATTRIBUTE25      => r_LBC.INFORMATION135
             ,P_LBC_ATTRIBUTE26      => r_LBC.INFORMATION136
             ,P_LBC_ATTRIBUTE27      => r_LBC.INFORMATION137
             ,P_LBC_ATTRIBUTE28      => r_LBC.INFORMATION138
             ,P_LBC_ATTRIBUTE29      => r_LBC.INFORMATION139
             ,P_LBC_ATTRIBUTE3      => r_LBC.INFORMATION113
             ,P_LBC_ATTRIBUTE30      => r_LBC.INFORMATION140
             ,P_LBC_ATTRIBUTE4      => r_LBC.INFORMATION114
             ,P_LBC_ATTRIBUTE5      => r_LBC.INFORMATION115
             ,P_LBC_ATTRIBUTE6      => r_LBC.INFORMATION116
             ,P_LBC_ATTRIBUTE7      => r_LBC.INFORMATION117
             ,P_LBC_ATTRIBUTE8      => r_LBC.INFORMATION118
             ,P_LBC_ATTRIBUTE9      => r_LBC.INFORMATION119
             ,P_LBC_ATTRIBUTE_CATEGORY      => r_LBC.INFORMATION110
             ,P_LER_BNFT_RSTRN_CTFN_ID      => l_ler_bnft_rstrn_ctfn_id
             ,P_LER_BNFT_RSTRN_ID      => l_LER_BNFT_RSTRN_ID
             ,P_RQD_FLAG      => r_LBC.INFORMATION11
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
                ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;  -- l_update
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_LBC.information3) then
             --
             BEN_LER_BNFT_RSTRN_CTFN_API.delete_LER_BNFT_RSTRN_CTFN(
                --
                p_validate                       => false
                ,p_ler_bnft_rstrn_ctfn_id                   => l_ler_bnft_rstrn_ctfn_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'LBC',r_lbc.information5 );
     --
 end create_LBC_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_BRC_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_BRC_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_CTFN_RQD_WHEN_RL  number;
   l_PL_ID  number;
   l_ENRT_CTFN_TYP_CD varchar2(30);
   --
   cursor c_unique_BRC(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_BNFT_RSTRN_CTFN_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_BRC_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_BRC(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_BRC_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     BRC.bnft_rstrn_ctfn_id new_value
   from BEN_BNFT_RSTRN_CTFN_F BRC
   where
   BRC.PL_ID     = l_PL_ID  and
   nvl(BRC.ENRT_CTFN_TYP_CD, 'XXX')  =  nvl(l_ENRT_CTFN_TYP_CD, 'XXX') and
   BRC.business_group_id  = c_business_group_id
   and   BRC.bnft_rstrn_ctfn_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_BNFT_RSTRN_CTFN_F BRC1
                where
                BRC1.PL_ID     = l_PL_ID  and
                BRC1.ENRT_CTFN_TYP_CD  =  l_ENRT_CTFN_TYP_CD and
                BRC1.business_group_id  = c_business_group_id
                and   BRC1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_BNFT_RSTRN_CTFN_F BRC2
                where
                BRC2.PL_ID     = l_PL_ID  and
                BRC2.ENRT_CTFN_TYP_CD  =  l_ENRT_CTFN_TYP_CD and
                BRC2.business_group_id  = c_business_group_id
                and   BRC2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_BRC                     c_BRC%rowtype;
   l_bnft_rstrn_ctfn_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_BRC_unique in c_unique_BRC('BRC') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_BRC_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then

       --
       hr_utility.set_location(' r_BRC_unique.table_route_id '||r_BRC_unique.table_route_id,10);
       hr_utility.set_location(' r_BRC_unique.information1 '||r_BRC_unique.information1,10);
       hr_utility.set_location( 'r_BRC_unique.information2 '||r_BRC_unique.information2,10);
       hr_utility.set_location( 'r_BRC_unique.information3 '||r_BRC_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
        l_update := false;
        l_process_date := p_effective_date;
        l_dml_operation:= r_BRC_unique.dml_operation ;
        --
       open c_BRC(r_BRC_unique.table_route_id,
                r_BRC_unique.information1,
                r_BRC_unique.information2,
                r_BRC_unique.information3 ) ;
       --
       fetch c_BRC into r_BRC ;
       --
       close c_BRC ;
       --

       l_CTFN_RQD_WHEN_RL := get_fk('FORMULA_ID', r_BRC.information257,l_dml_operation);
       l_PL_ID := get_fk('PL_ID', r_BRC.information261,l_dml_operation);
       l_ENRT_CTFN_TYP_CD := r_BRC.information12 ;
       --
        if l_dml_operation = 'UPDATE' then
          --
          l_object_found_in_target := TRUE;
          --
          if l_process_date between r_BRC_unique.information2 and r_BRC_unique.information3 then
                l_update := true;
                if r_BRC_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                  or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'BNFT_RSTRN_CTFN_ID'
                then
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'BNFT_RSTRN_CTFN_ID' ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_BRC_unique.information1 ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_BRC_unique.information1 ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_BRC_unique.table_route_id;
                   --
                   -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                   --
                   BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                   --
           --DOUBT        log_data('BRC',l_new_value,l_prefix || r_BRC_unique.name|| l_suffix,'REUSED');
                   --
                end if ;
                hr_utility.set_location( 'found record for update',10);
            --
          else
            --
            l_update := false;
            --
          end if;
        else
          --
          --UPD END

       l_min_esd := null ;
       l_max_eed := null ;
       open c_BRC_min_max_dates(r_BRC_unique.table_route_id, r_BRC_unique.information1 ) ;
       fetch c_BRC_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_BRC_unique.information2);
       --
       if p_reuse_object_flag = 'Y' then
         if c_BRC_min_max_dates%found then
           -- cursor to find the object
           open c_find_BRC_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_bnft_rstrn_ctfn_id, -999)  ) ;
           fetch c_find_BRC_in_target into l_new_value ;
           if c_find_BRC_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_BNFT_RSTRN_CTFN_F',
                  p_base_key_column => 'BNFT_RSTRN_CTFN_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_BRC_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'BNFT_RSTRN_CTFN_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'BNFT_RSTRN_CTFN_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_BRC_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_BRC_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_BRC_in_target ;
         --
         end if;
       end if ;
       --
       close c_BRC_min_max_dates ;
     end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_BRC.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_BRC.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;
            if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_BNFT_RSTRN_CTFN_F CREATE_BNFT_RSTRN_CTFN ',20);
           BEN_BNFT_RSTRN_CTFN_API.CREATE_BNFT_RSTRN_CTFN(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_BNFT_RSTRN_CTFN_ID      => l_bnft_rstrn_ctfn_id
             ,P_BRC_ATTRIBUTE1      => r_BRC.INFORMATION111
             ,P_BRC_ATTRIBUTE10      => r_BRC.INFORMATION120
             ,P_BRC_ATTRIBUTE11      => r_BRC.INFORMATION121
             ,P_BRC_ATTRIBUTE12      => r_BRC.INFORMATION122
             ,P_BRC_ATTRIBUTE13      => r_BRC.INFORMATION123
             ,P_BRC_ATTRIBUTE14      => r_BRC.INFORMATION124
             ,P_BRC_ATTRIBUTE15      => r_BRC.INFORMATION125
             ,P_BRC_ATTRIBUTE16      => r_BRC.INFORMATION126
             ,P_BRC_ATTRIBUTE17      => r_BRC.INFORMATION127
             ,P_BRC_ATTRIBUTE18      => r_BRC.INFORMATION128
             ,P_BRC_ATTRIBUTE19      => r_BRC.INFORMATION129
             ,P_BRC_ATTRIBUTE2      => r_BRC.INFORMATION112
             ,P_BRC_ATTRIBUTE20      => r_BRC.INFORMATION130
             ,P_BRC_ATTRIBUTE21      => r_BRC.INFORMATION131
             ,P_BRC_ATTRIBUTE22      => r_BRC.INFORMATION132
             ,P_BRC_ATTRIBUTE23      => r_BRC.INFORMATION133
             ,P_BRC_ATTRIBUTE24      => r_BRC.INFORMATION134
             ,P_BRC_ATTRIBUTE25      => r_BRC.INFORMATION135
             ,P_BRC_ATTRIBUTE26      => r_BRC.INFORMATION136
             ,P_BRC_ATTRIBUTE27      => r_BRC.INFORMATION137
             ,P_BRC_ATTRIBUTE28      => r_BRC.INFORMATION138
             ,P_BRC_ATTRIBUTE29      => r_BRC.INFORMATION139
             ,P_BRC_ATTRIBUTE3      => r_BRC.INFORMATION113
             ,P_BRC_ATTRIBUTE30      => r_BRC.INFORMATION140
             ,P_BRC_ATTRIBUTE4      => r_BRC.INFORMATION114
             ,P_BRC_ATTRIBUTE5      => r_BRC.INFORMATION115
             ,P_BRC_ATTRIBUTE6      => r_BRC.INFORMATION116
             ,P_BRC_ATTRIBUTE7      => r_BRC.INFORMATION117
             ,P_BRC_ATTRIBUTE8      => r_BRC.INFORMATION118
             ,P_BRC_ATTRIBUTE9      => r_BRC.INFORMATION119
             ,P_BRC_ATTRIBUTE_CATEGORY      => r_BRC.INFORMATION110
             ,P_CTFN_RQD_WHEN_RL      => l_CTFN_RQD_WHEN_RL
             ,P_ENRT_CTFN_TYP_CD      => r_BRC.INFORMATION12
             ,P_PL_ID      => l_PL_ID
             ,P_RQD_FLAG      => r_BRC.INFORMATION11
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_bnft_rstrn_ctfn_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'BNFT_RSTRN_CTFN_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_BRC.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_BNFT_RSTRN_CTFN_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_BRC_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_BNFT_RSTRN_CTFN_F UPDATE_BNFT_RSTRN_CTFN ',30);
           --UPD START
            hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
            --
            if l_update then
              --
              l_datetrack_mode := r_BRC.datetrack_mode ;
              --
              get_dt_modes(
                p_effective_date        => l_process_date,
                p_effective_end_date    => r_BRC.information3,
                p_effective_start_date  => r_BRC.information2,
                p_dml_operation         => r_BRC.dml_operation,
                p_datetrack_mode        => l_datetrack_mode );
            --    p_update                => l_update
              --
              l_effective_date := l_process_date;
              l_BNFT_RSTRN_CTFN_ID   := r_BRC.information1;
              l_object_version_number := r_BRC.information265;
              --
            end if;
            --
            hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
            --
            IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END

           BEN_BNFT_RSTRN_CTFN_API.UPDATE_BNFT_RSTRN_CTFN(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_BNFT_RSTRN_CTFN_ID      => l_bnft_rstrn_ctfn_id
             ,P_BRC_ATTRIBUTE1      => r_BRC.INFORMATION111
             ,P_BRC_ATTRIBUTE10      => r_BRC.INFORMATION120
             ,P_BRC_ATTRIBUTE11      => r_BRC.INFORMATION121
             ,P_BRC_ATTRIBUTE12      => r_BRC.INFORMATION122
             ,P_BRC_ATTRIBUTE13      => r_BRC.INFORMATION123
             ,P_BRC_ATTRIBUTE14      => r_BRC.INFORMATION124
             ,P_BRC_ATTRIBUTE15      => r_BRC.INFORMATION125
             ,P_BRC_ATTRIBUTE16      => r_BRC.INFORMATION126
             ,P_BRC_ATTRIBUTE17      => r_BRC.INFORMATION127
             ,P_BRC_ATTRIBUTE18      => r_BRC.INFORMATION128
             ,P_BRC_ATTRIBUTE19      => r_BRC.INFORMATION129
             ,P_BRC_ATTRIBUTE2      => r_BRC.INFORMATION112
             ,P_BRC_ATTRIBUTE20      => r_BRC.INFORMATION130
             ,P_BRC_ATTRIBUTE21      => r_BRC.INFORMATION131
             ,P_BRC_ATTRIBUTE22      => r_BRC.INFORMATION132
             ,P_BRC_ATTRIBUTE23      => r_BRC.INFORMATION133
             ,P_BRC_ATTRIBUTE24      => r_BRC.INFORMATION134
             ,P_BRC_ATTRIBUTE25      => r_BRC.INFORMATION135
             ,P_BRC_ATTRIBUTE26      => r_BRC.INFORMATION136
             ,P_BRC_ATTRIBUTE27      => r_BRC.INFORMATION137
             ,P_BRC_ATTRIBUTE28      => r_BRC.INFORMATION138
             ,P_BRC_ATTRIBUTE29      => r_BRC.INFORMATION139
             ,P_BRC_ATTRIBUTE3      => r_BRC.INFORMATION113
             ,P_BRC_ATTRIBUTE30      => r_BRC.INFORMATION140
             ,P_BRC_ATTRIBUTE4      => r_BRC.INFORMATION114
             ,P_BRC_ATTRIBUTE5      => r_BRC.INFORMATION115
             ,P_BRC_ATTRIBUTE6      => r_BRC.INFORMATION116
             ,P_BRC_ATTRIBUTE7      => r_BRC.INFORMATION117
             ,P_BRC_ATTRIBUTE8      => r_BRC.INFORMATION118
             ,P_BRC_ATTRIBUTE9      => r_BRC.INFORMATION119
             ,P_BRC_ATTRIBUTE_CATEGORY      => r_BRC.INFORMATION110
             ,P_CTFN_RQD_WHEN_RL      => l_CTFN_RQD_WHEN_RL
             ,P_ENRT_CTFN_TYP_CD      => r_BRC.INFORMATION12
             ,P_PL_ID      => l_PL_ID
             ,P_RQD_FLAG      => r_BRC.INFORMATION11
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
             end if;  -- l_update
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_BRC.information3) then
             --
             BEN_BNFT_RSTRN_CTFN_API.delete_BNFT_RSTRN_CTFN(
                --
                p_validate                       => false
                ,p_bnft_rstrn_ctfn_id                   => l_bnft_rstrn_ctfn_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'BRC',r_brc.information5 );
     --
 end create_BRC_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_WCN_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_WCN_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_CTFN_RQD_WHEN_RL  number;
   l_WV_PRTN_RSN_PL_ID  number;
   l_WV_PRTN_CTFN_TYP_CD varchar2(30);
   --
   cursor c_unique_WCN(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_WV_PRTN_RSN_CTFN_PL_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_WCN_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_WCN(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_WCN_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     WCN.wv_prtn_rsn_ctfn_pl_id new_value
   from BEN_WV_PRTN_RSN_CTFN_PL_F WCN
   where
   WCN.WV_PRTN_RSN_PL_ID     = l_WV_PRTN_RSN_PL_ID  and
   WCN.WV_PRTN_CTFN_TYP_CD   =  l_WV_PRTN_CTFN_TYP_CD and
   WCN.business_group_id  = c_business_group_id
   and   WCN.wv_prtn_rsn_ctfn_pl_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_WV_PRTN_RSN_CTFN_PL_F WCN1
                where
                WCN1.WV_PRTN_RSN_PL_ID     = l_WV_PRTN_RSN_PL_ID  and
                WCN1.WV_PRTN_CTFN_TYP_CD   = l_WV_PRTN_CTFN_TYP_CD and
                WCN1.business_group_id  = c_business_group_id
                and   WCN1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_WV_PRTN_RSN_CTFN_PL_F WCN2
                where
                WCN2.WV_PRTN_RSN_PL_ID     = l_WV_PRTN_RSN_PL_ID  and
                WCN2.WV_PRTN_CTFN_TYP_CD   = l_WV_PRTN_CTFN_TYP_CD and
                WCN2.business_group_id  = c_business_group_id
                and   WCN2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END

   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_WCN                     c_WCN%rowtype;
   l_wv_prtn_rsn_ctfn_pl_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_WCN_unique in c_unique_WCN('WCN') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_WCN_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_WCN_unique.table_route_id '||r_WCN_unique.table_route_id,10);
       hr_utility.set_location(' r_WCN_unique.information1 '||r_WCN_unique.information1,10);
       hr_utility.set_location( 'r_WCN_unique.information2 '||r_WCN_unique.information2,10);
       hr_utility.set_location( 'r_WCN_unique.information3 '||r_WCN_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
        --UPD START
         open c_WCN(r_WCN_unique.table_route_id,
                r_WCN_unique.information1,
                r_WCN_unique.information2,
                r_WCN_unique.information3 ) ;
       --
       fetch c_WCN into r_WCN ;
       --
       close c_WCN ;
       --
       l_dml_operation:= r_WCN_unique.dml_operation ;
       l_CTFN_RQD_WHEN_RL := get_fk('FORMULA_ID', r_WCN.INFORMATION261,l_dml_operation);
       l_WV_PRTN_RSN_PL_ID := get_fk('WV_PRTN_RSN_PL_ID', r_WCN.INFORMATION257,l_dml_operation);
       l_WV_PRTN_CTFN_TYP_CD := r_WCN.information14 ;
       --
       l_update := false;
       l_process_date := p_effective_date;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_WCN_unique.information2 and r_WCN_unique.information3 then
               l_update := true;
               if r_WCN_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'WV_PRTN_RSN_CTFN_PL_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'WV_PRTN_RSN_CTFN_PL_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_WCN_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_WCN_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_WCN_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
           --DOUBT       log_data('WCN',l_new_value,l_prefix || r_WCN_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_WCN_min_max_dates(r_WCN_unique.table_route_id, r_WCN_unique.information1 ) ;
       fetch c_WCN_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_WCN_unique.information2);
   /*    open c_WCN(r_WCN_unique.table_route_id,
                r_WCN_unique.information1,
                r_WCN_unique.information2,
                r_WCN_unique.information3 ) ;
       --
       fetch c_WCN into r_WCN ;
       --
       close c_WCN ; */
       --

       if p_reuse_object_flag = 'Y' then
         if c_WCN_min_max_dates%found then
           -- cursor to find the object
           open c_find_WCN_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_wv_prtn_rsn_ctfn_pl_id, -999)  ) ;
           fetch c_find_WCN_in_target into l_new_value ;
           if c_find_WCN_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_WV_PRTN_RSN_CTFN_PL_F',
                  p_base_key_column => 'WV_PRTN_RSN_CTFN_PL_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_WCN_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'WV_PRTN_RSN_CTFN_PL_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'WV_PRTN_RSN_CTFN_PL_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_WCN_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_WCN_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_WCN_in_target ;
         --
         end if;
       end if ;
       --
       close c_WCN_min_max_dates ;
        end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then
         --
         l_current_pk_id := r_WCN.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_WCN.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

          if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_WV_PRTN_RSN_CTFN_PL_F CREATE_WV_PRTN_RSN_CTFN_PL ',20);
           BEN_WV_PRTN_RSN_CTFN_PL_API.CREATE_WV_PRTN_RSN_CTFN_PL(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
              ,P_CTFN_RQD_WHEN_RL      => l_CTFN_RQD_WHEN_RL
                          ,P_LACK_CTFN_SSPND_WVR_FLAG      => r_WCN.INFORMATION12
                          ,P_PFD_FLAG      => r_WCN.INFORMATION11
                          ,P_RQD_FLAG      => r_WCN.INFORMATION13
                          ,P_WCN_ATTRIBUTE1      => r_WCN.INFORMATION111
                          ,P_WCN_ATTRIBUTE10      => r_WCN.INFORMATION120
                          ,P_WCN_ATTRIBUTE11      => r_WCN.INFORMATION121
                          ,P_WCN_ATTRIBUTE12      => r_WCN.INFORMATION122
                          ,P_WCN_ATTRIBUTE13      => r_WCN.INFORMATION123
                          ,P_WCN_ATTRIBUTE14      => r_WCN.INFORMATION124
                          ,P_WCN_ATTRIBUTE15      => r_WCN.INFORMATION125
                          ,P_WCN_ATTRIBUTE16      => r_WCN.INFORMATION126
                          ,P_WCN_ATTRIBUTE17      => r_WCN.INFORMATION127
                          ,P_WCN_ATTRIBUTE18      => r_WCN.INFORMATION128
                          ,P_WCN_ATTRIBUTE19      => r_WCN.INFORMATION129
                          ,P_WCN_ATTRIBUTE2      => r_WCN.INFORMATION112
                          ,P_WCN_ATTRIBUTE20      => r_WCN.INFORMATION130
                          ,P_WCN_ATTRIBUTE21      => r_WCN.INFORMATION131
                          ,P_WCN_ATTRIBUTE22      => r_WCN.INFORMATION132
                          ,P_WCN_ATTRIBUTE23      => r_WCN.INFORMATION133
                          ,P_WCN_ATTRIBUTE24      => r_WCN.INFORMATION134
                          ,P_WCN_ATTRIBUTE25      => r_WCN.INFORMATION135
                          ,P_WCN_ATTRIBUTE26      => r_WCN.INFORMATION136
                          ,P_WCN_ATTRIBUTE27      => r_WCN.INFORMATION137
                          ,P_WCN_ATTRIBUTE28      => r_WCN.INFORMATION138
                          ,P_WCN_ATTRIBUTE29      => r_WCN.INFORMATION139
                          ,P_WCN_ATTRIBUTE3      => r_WCN.INFORMATION113
                          ,P_WCN_ATTRIBUTE30      => r_WCN.INFORMATION140
                          ,P_WCN_ATTRIBUTE4      => r_WCN.INFORMATION114
                          ,P_WCN_ATTRIBUTE5      => r_WCN.INFORMATION115
                          ,P_WCN_ATTRIBUTE6      => r_WCN.INFORMATION116
                          ,P_WCN_ATTRIBUTE7      => r_WCN.INFORMATION117
                          ,P_WCN_ATTRIBUTE8      => r_WCN.INFORMATION118
                          ,P_WCN_ATTRIBUTE9      => r_WCN.INFORMATION119
                          ,P_WCN_ATTRIBUTE_CATEGORY      => r_WCN.INFORMATION110
                          ,P_WV_PRTN_CTFN_TYP_CD      => r_WCN.INFORMATION14
                          ,P_WV_PRTN_RSN_CTFN_PL_ID      => l_wv_prtn_rsn_ctfn_pl_id
             ,P_WV_PRTN_RSN_PL_ID      => l_WV_PRTN_RSN_PL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_wv_prtn_rsn_ctfn_pl_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'WV_PRTN_RSN_CTFN_PL_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_WCN.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_WV_PRTN_RSN_CTFN_PL_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_WCN_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
            hr_utility.set_location(' BEN_WV_PRTN_RSN_CTFN_PL_F UPDATE_WV_PRTN_RSN_CTFN_PL ',30);
         --UPD START
            hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
            --
            if l_update then
              --
              l_datetrack_mode := r_WCN.datetrack_mode ;
              --
              get_dt_modes(
                p_effective_date        => l_process_date,
                p_effective_end_date    => r_WCN.information3,
                p_effective_start_date  => r_WCN.information2,
                p_dml_operation         => r_WCN.dml_operation,
                p_datetrack_mode        => l_datetrack_mode );
            --    p_update                => l_update
              --
              l_effective_date := l_process_date;
              l_WV_PRTN_RSN_CTFN_PL_ID   := r_WCN.information1;
              l_object_version_number := r_WCN.information265;
              --
            end if;
            --
            hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
            --
            IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END

           BEN_WV_PRTN_RSN_CTFN_PL_API.UPDATE_WV_PRTN_RSN_CTFN_PL(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
              ,P_CTFN_RQD_WHEN_RL      => l_CTFN_RQD_WHEN_RL
                          ,P_LACK_CTFN_SSPND_WVR_FLAG      => r_WCN.INFORMATION12
                          ,P_PFD_FLAG      => r_WCN.INFORMATION11
                          ,P_RQD_FLAG      => r_WCN.INFORMATION13
                          ,P_WCN_ATTRIBUTE1      => r_WCN.INFORMATION111
                          ,P_WCN_ATTRIBUTE10      => r_WCN.INFORMATION120
                          ,P_WCN_ATTRIBUTE11      => r_WCN.INFORMATION121
                          ,P_WCN_ATTRIBUTE12      => r_WCN.INFORMATION122
                          ,P_WCN_ATTRIBUTE13      => r_WCN.INFORMATION123
                          ,P_WCN_ATTRIBUTE14      => r_WCN.INFORMATION124
                          ,P_WCN_ATTRIBUTE15      => r_WCN.INFORMATION125
                          ,P_WCN_ATTRIBUTE16      => r_WCN.INFORMATION126
                          ,P_WCN_ATTRIBUTE17      => r_WCN.INFORMATION127
                          ,P_WCN_ATTRIBUTE18      => r_WCN.INFORMATION128
                          ,P_WCN_ATTRIBUTE19      => r_WCN.INFORMATION129
                          ,P_WCN_ATTRIBUTE2      => r_WCN.INFORMATION112
                          ,P_WCN_ATTRIBUTE20      => r_WCN.INFORMATION130
                          ,P_WCN_ATTRIBUTE21      => r_WCN.INFORMATION131
                          ,P_WCN_ATTRIBUTE22      => r_WCN.INFORMATION132
                          ,P_WCN_ATTRIBUTE23      => r_WCN.INFORMATION133
                          ,P_WCN_ATTRIBUTE24      => r_WCN.INFORMATION134
                          ,P_WCN_ATTRIBUTE25      => r_WCN.INFORMATION135
                          ,P_WCN_ATTRIBUTE26      => r_WCN.INFORMATION136
                          ,P_WCN_ATTRIBUTE27      => r_WCN.INFORMATION137
                          ,P_WCN_ATTRIBUTE28      => r_WCN.INFORMATION138
                          ,P_WCN_ATTRIBUTE29      => r_WCN.INFORMATION139
                          ,P_WCN_ATTRIBUTE3      => r_WCN.INFORMATION113
                          ,P_WCN_ATTRIBUTE30      => r_WCN.INFORMATION140
                          ,P_WCN_ATTRIBUTE4      => r_WCN.INFORMATION114
                          ,P_WCN_ATTRIBUTE5      => r_WCN.INFORMATION115
                          ,P_WCN_ATTRIBUTE6      => r_WCN.INFORMATION116
                          ,P_WCN_ATTRIBUTE7      => r_WCN.INFORMATION117
                          ,P_WCN_ATTRIBUTE8      => r_WCN.INFORMATION118
                          ,P_WCN_ATTRIBUTE9      => r_WCN.INFORMATION119
                          ,P_WCN_ATTRIBUTE_CATEGORY      => r_WCN.INFORMATION110
                          ,P_WV_PRTN_CTFN_TYP_CD      => r_WCN.INFORMATION14
                          ,P_WV_PRTN_RSN_CTFN_PL_ID      => l_wv_prtn_rsn_ctfn_pl_id
             ,P_WV_PRTN_RSN_PL_ID      => l_WV_PRTN_RSN_PL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
                ,P_DATETRACK_MODE        => l_datetrack_mode

           );
           --
            end if;  -- l_update
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_WCN.information3) then
             --
             BEN_WV_PRTN_RSN_CTFN_PL_API.delete_WV_PRTN_RSN_CTFN_PL(
                --
                p_validate                       => false
                ,p_wv_prtn_rsn_ctfn_pl_id                   => l_wv_prtn_rsn_ctfn_pl_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'WCN',r_wcn.information5 );
     --
 end create_WCN_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_WPN_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_WPN_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_PL_ID  number;
   l_WV_PRTN_RSN_CD varchar2(30);
   --
   cursor c_unique_WPN(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_WV_PRTN_RSN_PL_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_WPN_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_WPN(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_WPN_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     WPN.wv_prtn_rsn_pl_id new_value
   from BEN_WV_PRTN_RSN_PL_F WPN
   where
   WPN.PL_ID     = l_PL_ID  and
   WPN.WV_PRTN_RSN_CD      = l_WV_PRTN_RSN_CD and
   WPN.business_group_id  = c_business_group_id
   and   WPN.wv_prtn_rsn_pl_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_WV_PRTN_RSN_PL_F WPN1
                where
                WPN1.PL_ID     = l_PL_ID  and
                WPN1.WV_PRTN_RSN_CD      = l_WV_PRTN_RSN_CD and
                WPN1.business_group_id  = c_business_group_id
                and   WPN1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_WV_PRTN_RSN_PL_F WPN2
                where
                WPN2.PL_ID     = l_PL_ID  and
                WPN2.WV_PRTN_RSN_CD      = l_WV_PRTN_RSN_CD and
                WPN2.business_group_id  = c_business_group_id
                and   WPN2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_WPN                     c_WPN%rowtype;
   l_wv_prtn_rsn_pl_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_WPN_unique in c_unique_WPN('WPN') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_WPN_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then

       --
       hr_utility.set_location(' r_WPN_unique.table_route_id '||r_WPN_unique.table_route_id,10);
       hr_utility.set_location(' r_WPN_unique.information1 '||r_WPN_unique.information1,10);
       hr_utility.set_location( 'r_WPN_unique.information2 '||r_WPN_unique.information2,10);
       hr_utility.set_location( 'r_WPN_unique.information3 '||r_WPN_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
        --UPD START
               open c_WPN(r_WPN_unique.table_route_id,
                r_WPN_unique.information1,
                r_WPN_unique.information2,
                r_WPN_unique.information3 ) ;
       --
       fetch c_WPN into r_WPN ;
       --
       close c_WPN ;
       --
       l_dml_operation:= r_WPN_unique.dml_operation ;
       l_PL_ID := get_fk('PL_ID', r_WPN.INFORMATION261,l_dml_operation);
       l_WV_PRTN_RSN_CD := r_WPN.information12 ;
       --
         l_update := false;
         l_process_date := p_effective_date;
         --
         if l_dml_operation = 'UPDATE' then
           --
           l_object_found_in_target := TRUE;
           --
           if l_process_date between r_WPN_unique.information2 and r_WPN_unique.information3 then
                 l_update := true;
                 if r_WPN_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                   or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'WV_PRTN_RSN_PL_ID'
                 then
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'WV_PRTN_RSN_PL_ID' ;
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_WPN_unique.information1 ;
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_WPN_unique.information1 ;
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_WPN_unique.table_route_id;
                    --
                    -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                    --
                    BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                    --
               -- DOUBT     log_data('WPN',l_new_value,l_prefix || r_WPN_unique.name|| l_suffix,'REUSED');
                    --
                 end if ;
                 hr_utility.set_location( 'found record for update',10);
             --
           else
             --
             l_update := false;
             --
           end if;
         else
           --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_WPN_min_max_dates(r_WPN_unique.table_route_id, r_WPN_unique.information1 ) ;
       fetch c_WPN_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
        l_min_esd := greatest(l_min_esd,r_WPN_unique.information2);
     /*  open c_WPN(r_WPN_unique.table_route_id,
                r_WPN_unique.information1,
                r_WPN_unique.information2,
                r_WPN_unique.information3 ) ;
       --
       fetch c_WPN into r_WPN ;
       --
       close c_WPN ; */
       --
       if p_reuse_object_flag = 'Y' then
         if c_WPN_min_max_dates%found then
           -- cursor to find the object
           open c_find_WPN_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_wv_prtn_rsn_pl_id, -999)  ) ;
           fetch c_find_WPN_in_target into l_new_value ;
           if c_find_WPN_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_WV_PRTN_RSN_PL_F',
                  p_base_key_column => 'WV_PRTN_RSN_PL_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_WPN_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'WV_PRTN_RSN_PL_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'WV_PRTN_RSN_PL_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_WPN_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_WPN_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_WPN_in_target ;
           --
         end if;
       end if ;
       --
       close c_WPN_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then
         --
         l_current_pk_id := r_WPN.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_WPN.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

          if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_WV_PRTN_RSN_PL_F CREATE_WV_PRTN_REASON_PL ',20);
           BEN_WV_PRTN_REASON_PL_API.CREATE_WV_PRTN_REASON_PL(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_DFLT_FLAG      => r_WPN.INFORMATION11
                          ,P_PL_ID      => l_PL_ID
                          ,P_WPN_ATTRIBUTE1      => r_WPN.INFORMATION111
                          ,P_WPN_ATTRIBUTE10      => r_WPN.INFORMATION120
                          ,P_WPN_ATTRIBUTE11      => r_WPN.INFORMATION121
                          ,P_WPN_ATTRIBUTE12      => r_WPN.INFORMATION122
                          ,P_WPN_ATTRIBUTE13      => r_WPN.INFORMATION123
                          ,P_WPN_ATTRIBUTE14      => r_WPN.INFORMATION124
                          ,P_WPN_ATTRIBUTE15      => r_WPN.INFORMATION125
                          ,P_WPN_ATTRIBUTE16      => r_WPN.INFORMATION126
                          ,P_WPN_ATTRIBUTE17      => r_WPN.INFORMATION127
                          ,P_WPN_ATTRIBUTE18      => r_WPN.INFORMATION128
                          ,P_WPN_ATTRIBUTE19      => r_WPN.INFORMATION129
                          ,P_WPN_ATTRIBUTE2      => r_WPN.INFORMATION112
                          ,P_WPN_ATTRIBUTE20      => r_WPN.INFORMATION130
                          ,P_WPN_ATTRIBUTE21      => r_WPN.INFORMATION131
                          ,P_WPN_ATTRIBUTE22      => r_WPN.INFORMATION132
                          ,P_WPN_ATTRIBUTE23      => r_WPN.INFORMATION133
                          ,P_WPN_ATTRIBUTE24      => r_WPN.INFORMATION134
                          ,P_WPN_ATTRIBUTE25      => r_WPN.INFORMATION135
                          ,P_WPN_ATTRIBUTE26      => r_WPN.INFORMATION136
                          ,P_WPN_ATTRIBUTE27      => r_WPN.INFORMATION137
                          ,P_WPN_ATTRIBUTE28      => r_WPN.INFORMATION138
                          ,P_WPN_ATTRIBUTE29      => r_WPN.INFORMATION139
                          ,P_WPN_ATTRIBUTE3      => r_WPN.INFORMATION113
                          ,P_WPN_ATTRIBUTE30      => r_WPN.INFORMATION140
                          ,P_WPN_ATTRIBUTE4      => r_WPN.INFORMATION114
                          ,P_WPN_ATTRIBUTE5      => r_WPN.INFORMATION115
                          ,P_WPN_ATTRIBUTE6      => r_WPN.INFORMATION116
                          ,P_WPN_ATTRIBUTE7      => r_WPN.INFORMATION117
                          ,P_WPN_ATTRIBUTE8      => r_WPN.INFORMATION118
                          ,P_WPN_ATTRIBUTE9      => r_WPN.INFORMATION119
                          ,P_WPN_ATTRIBUTE_CATEGORY      => r_WPN.INFORMATION110
                          ,P_WV_PRTN_RSN_CD      => r_WPN.INFORMATION12
             ,P_WV_PRTN_RSN_PL_ID      => l_wv_prtn_rsn_pl_id
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_wv_prtn_rsn_pl_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'WV_PRTN_RSN_PL_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_WPN.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_WV_PRTN_RSN_PL_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_WPN_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
            hr_utility.set_location(' BEN_WV_PRTN_RSN_PL_F UPDATE_WV_PRTN_REASON_PL ',30);
           --UPD START
             hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
             --
             if l_update then
               --
               l_datetrack_mode := r_WPN.datetrack_mode ;
               --
               get_dt_modes(
                 p_effective_date        => l_process_date,
                 p_effective_end_date    => r_WPN.information3,
                 p_effective_start_date  => r_WPN.information2,
                 p_dml_operation         => r_WPN.dml_operation,
                 p_datetrack_mode        => l_datetrack_mode );
             --    p_update                => l_update
               --
               l_effective_date := l_process_date;
               l_WV_PRTN_RSN_PL_ID   := r_WPN.information1;
               l_object_version_number := r_WPN.information265;
               --
             end if;
             --
             hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
             --
             IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END

           BEN_WV_PRTN_REASON_PL_API.UPDATE_WV_PRTN_REASON_PL(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_DFLT_FLAG      => r_WPN.INFORMATION11
                         ,P_PL_ID      => l_PL_ID
                         ,P_WPN_ATTRIBUTE1      => r_WPN.INFORMATION111
                         ,P_WPN_ATTRIBUTE10      => r_WPN.INFORMATION120
                         ,P_WPN_ATTRIBUTE11      => r_WPN.INFORMATION121
                         ,P_WPN_ATTRIBUTE12      => r_WPN.INFORMATION122
                         ,P_WPN_ATTRIBUTE13      => r_WPN.INFORMATION123
                         ,P_WPN_ATTRIBUTE14      => r_WPN.INFORMATION124
                         ,P_WPN_ATTRIBUTE15      => r_WPN.INFORMATION125
                         ,P_WPN_ATTRIBUTE16      => r_WPN.INFORMATION126
                         ,P_WPN_ATTRIBUTE17      => r_WPN.INFORMATION127
                         ,P_WPN_ATTRIBUTE18      => r_WPN.INFORMATION128
                         ,P_WPN_ATTRIBUTE19      => r_WPN.INFORMATION129
                         ,P_WPN_ATTRIBUTE2      => r_WPN.INFORMATION112
                         ,P_WPN_ATTRIBUTE20      => r_WPN.INFORMATION130
                         ,P_WPN_ATTRIBUTE21      => r_WPN.INFORMATION131
                         ,P_WPN_ATTRIBUTE22      => r_WPN.INFORMATION132
                         ,P_WPN_ATTRIBUTE23      => r_WPN.INFORMATION133
                         ,P_WPN_ATTRIBUTE24      => r_WPN.INFORMATION134
                         ,P_WPN_ATTRIBUTE25      => r_WPN.INFORMATION135
                         ,P_WPN_ATTRIBUTE26      => r_WPN.INFORMATION136
                         ,P_WPN_ATTRIBUTE27      => r_WPN.INFORMATION137
                         ,P_WPN_ATTRIBUTE28      => r_WPN.INFORMATION138
                         ,P_WPN_ATTRIBUTE29      => r_WPN.INFORMATION139
                         ,P_WPN_ATTRIBUTE3      => r_WPN.INFORMATION113
                         ,P_WPN_ATTRIBUTE30      => r_WPN.INFORMATION140
                         ,P_WPN_ATTRIBUTE4      => r_WPN.INFORMATION114
                         ,P_WPN_ATTRIBUTE5      => r_WPN.INFORMATION115
                         ,P_WPN_ATTRIBUTE6      => r_WPN.INFORMATION116
                         ,P_WPN_ATTRIBUTE7      => r_WPN.INFORMATION117
                         ,P_WPN_ATTRIBUTE8      => r_WPN.INFORMATION118
                         ,P_WPN_ATTRIBUTE9      => r_WPN.INFORMATION119
                         ,P_WPN_ATTRIBUTE_CATEGORY      => r_WPN.INFORMATION110
                         ,P_WV_PRTN_RSN_CD      => r_WPN.INFORMATION12
             ,P_WV_PRTN_RSN_PL_ID      => l_wv_prtn_rsn_pl_id
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
           ,P_DATETRACK_MODE        => l_datetrack_mode

           );
           --
            end if;  -- l_update
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_WPN.information3) then
             --
             BEN_WV_PRTN_REASON_PL_API.delete_WV_PRTN_REASON_PL(
                --
                p_validate                       => false
                ,p_wv_prtn_rsn_pl_id                   => l_wv_prtn_rsn_pl_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'WPN',r_wpn.information5 );
     --
 end create_WPN_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_VRP_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_VRP_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_PL_ID  number;
   l_RLSHP_TYP_CD ben_vald_rlshp_for_reimb_f.rlshp_typ_cd%type;
   cursor c_unique_VRP(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
  ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_VALD_RLSHP_FOR_REIMB_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_VRP_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_VRP(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_VRP_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     VRP.vald_rlshp_for_reimb_id new_value
   from BEN_VALD_RLSHP_FOR_REIMB_F VRP
   where
   VRP.PL_ID     = l_PL_ID  and
   VRP.RLSHP_TYP_CD = l_RLSHP_TYP_CD and
   VRP.business_group_id  = c_business_group_id
   and   VRP.vald_rlshp_for_reimb_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_VALD_RLSHP_FOR_REIMB_F VRP1
                where
                VRP1.PL_ID     = l_PL_ID  and
                VRP1.RLSHP_TYP_CD = l_RLSHP_TYP_CD and
                VRP1.business_group_id  = c_business_group_id
                and   VRP1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_VALD_RLSHP_FOR_REIMB_F VRP2
                where
                VRP2.PL_ID     = l_PL_ID  and
                VRP2.RLSHP_TYP_CD = l_RLSHP_TYP_CD and
                VRP2.business_group_id  = c_business_group_id
                and   VRP2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_VRP                     c_VRP%rowtype;
   l_vald_rlshp_for_reimb_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_VRP_unique in c_unique_VRP('VRP') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_VRP_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then

       --
       hr_utility.set_location(' r_VRP_unique.table_route_id '||r_VRP_unique.table_route_id,10);
       hr_utility.set_location(' r_VRP_unique.information1 '||r_VRP_unique.information1,10);
       hr_utility.set_location( 'r_VRP_unique.information2 '||r_VRP_unique.information2,10);
       hr_utility.set_location( 'r_VRP_unique.information3 '||r_VRP_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
        --UPD START
          open c_VRP(r_VRP_unique.table_route_id,
                r_VRP_unique.information1,
                r_VRP_unique.information2,
                r_VRP_unique.information3 ) ;
       --
       fetch c_VRP into r_VRP ;
       --
       close c_VRP ;
       --
       l_dml_operation:= r_VRP_unique.dml_operation ;
       l_PL_ID := get_fk('PL_ID', r_VRP.INFORMATION261,l_dml_operation);
       l_RLSHP_TYP_CD := r_VRP.information11;
       --
        l_update := false;
        l_process_date := p_effective_date;
        --
        if l_dml_operation = 'UPDATE' then
          --
          l_object_found_in_target := TRUE;
          --
          if l_process_date between r_VRP_unique.information2 and r_VRP_unique.information3 then
                l_update := true;
                if r_VRP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                  or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'VALD_RLSHP_FOR_REIMB_ID'
                then
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'VALD_RLSHP_FOR_REIMB_ID' ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_VRP_unique.information1 ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_VRP_unique.information1 ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_VRP_unique.table_route_id;
                   --
                   -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                   --
                   BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                   --
        --DOUBT           log_data('VRP',l_new_value,l_prefix || r_VRP_unique.name|| l_suffix,'REUSED');
                   --
                end if ;
                hr_utility.set_location( 'found record for update',10);
            --
          else
            --
            l_update := false;
            --
          end if;
        else
          --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_VRP_min_max_dates(r_VRP_unique.table_route_id, r_VRP_unique.information1 ) ;
       fetch c_VRP_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_VRP_unique.information2);
  /*    open c_VRP(r_VRP_unique.table_route_id,
                r_VRP_unique.information1,
                r_VRP_unique.information2,
                r_VRP_unique.information3 ) ;
       --
       fetch c_VRP into r_VRP ;
       --
       close c_VRP ; */
       --
       if p_reuse_object_flag = 'Y' then
         if c_VRP_min_max_dates%found then
           -- cursor to find the object
           open c_find_VRP_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_vald_rlshp_for_reimb_id, -999)  ) ;
           fetch c_find_VRP_in_target into l_new_value ;
           if c_find_VRP_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_VALD_RLSHP_FOR_REIMB_F',
                  p_base_key_column => 'VALD_RLSHP_FOR_REIMB_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_VRP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'VALD_RLSHP_FOR_REIMB_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'VALD_RLSHP_FOR_REIMB_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_VRP_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_VRP_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_VRP_in_target ;
         --
         end if;
       end if ;
       --
       close c_VRP_min_max_dates ;
      end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then
         --
         l_current_pk_id := r_VRP.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_VRP.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_VALD_RLSHP_FOR_REIMB_F CREATE_VALD_RLSHP_FOR_REIMB ',20);
           BEN_VALD_RLSHP_FOR_REIMB_API.CREATE_VALD_RLSHP_FOR_REIMB(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
            ,P_PL_ID      => l_PL_ID
                         ,P_RLSHP_TYP_CD      => r_VRP.INFORMATION11
                         ,P_VALD_RLSHP_FOR_REIMB_ID      => l_vald_rlshp_for_reimb_id
                         ,P_VRP_ATTRIBUTE1      => r_VRP.INFORMATION111
                         ,P_VRP_ATTRIBUTE10      => r_VRP.INFORMATION120
                         ,P_VRP_ATTRIBUTE11      => r_VRP.INFORMATION121
                         ,P_VRP_ATTRIBUTE12      => r_VRP.INFORMATION122
                         ,P_VRP_ATTRIBUTE13      => r_VRP.INFORMATION123
                         ,P_VRP_ATTRIBUTE14      => r_VRP.INFORMATION124
                         ,P_VRP_ATTRIBUTE15      => r_VRP.INFORMATION125
                         ,P_VRP_ATTRIBUTE16      => r_VRP.INFORMATION126
                         ,P_VRP_ATTRIBUTE17      => r_VRP.INFORMATION127
                         ,P_VRP_ATTRIBUTE18      => r_VRP.INFORMATION128
                         ,P_VRP_ATTRIBUTE19      => r_VRP.INFORMATION129
                         ,P_VRP_ATTRIBUTE2      => r_VRP.INFORMATION112
                         ,P_VRP_ATTRIBUTE20      => r_VRP.INFORMATION130
                         ,P_VRP_ATTRIBUTE21      => r_VRP.INFORMATION131
                         ,P_VRP_ATTRIBUTE22      => r_VRP.INFORMATION132
                         ,P_VRP_ATTRIBUTE23      => r_VRP.INFORMATION133
                         ,P_VRP_ATTRIBUTE24      => r_VRP.INFORMATION134
                         ,P_VRP_ATTRIBUTE25      => r_VRP.INFORMATION135
                         ,P_VRP_ATTRIBUTE26      => r_VRP.INFORMATION136
                         ,P_VRP_ATTRIBUTE27      => r_VRP.INFORMATION137
                         ,P_VRP_ATTRIBUTE28      => r_VRP.INFORMATION138
                         ,P_VRP_ATTRIBUTE29      => r_VRP.INFORMATION139
                         ,P_VRP_ATTRIBUTE3      => r_VRP.INFORMATION113
                         ,P_VRP_ATTRIBUTE30      => r_VRP.INFORMATION140
                         ,P_VRP_ATTRIBUTE4      => r_VRP.INFORMATION114
                         ,P_VRP_ATTRIBUTE5      => r_VRP.INFORMATION115
                         ,P_VRP_ATTRIBUTE6      => r_VRP.INFORMATION116
                         ,P_VRP_ATTRIBUTE7      => r_VRP.INFORMATION117
                         ,P_VRP_ATTRIBUTE8      => r_VRP.INFORMATION118
                         ,P_VRP_ATTRIBUTE9      => r_VRP.INFORMATION119
             ,P_VRP_ATTRIBUTE_CATEGORY      => r_VRP.INFORMATION110
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_vald_rlshp_for_reimb_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'VALD_RLSHP_FOR_REIMB_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_VRP.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_VALD_RLSHP_FOR_REIMB_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_VRP_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             hr_utility.set_location(' BEN_VALD_RLSHP_FOR_REIMB_F UPDATE_VALD_RLSHP_FOR_REIMB ',30);
            --UPD START
            hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
            --
            if l_update then
              --
              l_datetrack_mode := r_VRP.datetrack_mode ;
              --
              get_dt_modes(
                p_effective_date        => l_process_date,
                p_effective_end_date    => r_VRP.information3,
                p_effective_start_date  => r_VRP.information2,
                p_dml_operation         => r_VRP.dml_operation,
                p_datetrack_mode        => l_datetrack_mode );
            --    p_update                => l_update
              --
              l_effective_date := l_process_date;
              l_VALD_RLSHP_FOR_REIMB_ID   := r_VRP.information1;
              l_object_version_number := r_VRP.information265;
              --
            end if;
            --
            hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
            --
            IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END

           BEN_VALD_RLSHP_FOR_REIMB_API.UPDATE_VALD_RLSHP_FOR_REIMB(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
            ,P_PL_ID      => l_PL_ID
                         ,P_RLSHP_TYP_CD      => r_VRP.INFORMATION11
                         ,P_VALD_RLSHP_FOR_REIMB_ID      => l_vald_rlshp_for_reimb_id
                         ,P_VRP_ATTRIBUTE1      => r_VRP.INFORMATION111
                         ,P_VRP_ATTRIBUTE10      => r_VRP.INFORMATION120
                         ,P_VRP_ATTRIBUTE11      => r_VRP.INFORMATION121
                         ,P_VRP_ATTRIBUTE12      => r_VRP.INFORMATION122
                         ,P_VRP_ATTRIBUTE13      => r_VRP.INFORMATION123
                         ,P_VRP_ATTRIBUTE14      => r_VRP.INFORMATION124
                         ,P_VRP_ATTRIBUTE15      => r_VRP.INFORMATION125
                         ,P_VRP_ATTRIBUTE16      => r_VRP.INFORMATION126
                         ,P_VRP_ATTRIBUTE17      => r_VRP.INFORMATION127
                         ,P_VRP_ATTRIBUTE18      => r_VRP.INFORMATION128
                         ,P_VRP_ATTRIBUTE19      => r_VRP.INFORMATION129
                         ,P_VRP_ATTRIBUTE2      => r_VRP.INFORMATION112
                         ,P_VRP_ATTRIBUTE20      => r_VRP.INFORMATION130
                         ,P_VRP_ATTRIBUTE21      => r_VRP.INFORMATION131
                         ,P_VRP_ATTRIBUTE22      => r_VRP.INFORMATION132
                         ,P_VRP_ATTRIBUTE23      => r_VRP.INFORMATION133
                         ,P_VRP_ATTRIBUTE24      => r_VRP.INFORMATION134
                         ,P_VRP_ATTRIBUTE25      => r_VRP.INFORMATION135
                         ,P_VRP_ATTRIBUTE26      => r_VRP.INFORMATION136
                         ,P_VRP_ATTRIBUTE27      => r_VRP.INFORMATION137
                         ,P_VRP_ATTRIBUTE28      => r_VRP.INFORMATION138
                         ,P_VRP_ATTRIBUTE29      => r_VRP.INFORMATION139
                         ,P_VRP_ATTRIBUTE3      => r_VRP.INFORMATION113
                         ,P_VRP_ATTRIBUTE30      => r_VRP.INFORMATION140
                         ,P_VRP_ATTRIBUTE4      => r_VRP.INFORMATION114
                         ,P_VRP_ATTRIBUTE5      => r_VRP.INFORMATION115
                         ,P_VRP_ATTRIBUTE6      => r_VRP.INFORMATION116
                         ,P_VRP_ATTRIBUTE7      => r_VRP.INFORMATION117
                         ,P_VRP_ATTRIBUTE8      => r_VRP.INFORMATION118
                         ,P_VRP_ATTRIBUTE9      => r_VRP.INFORMATION119
             ,P_VRP_ATTRIBUTE_CATEGORY      => r_VRP.INFORMATION110
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
             end if;  -- l_update
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_VRP.information3) then
             --
             BEN_VALD_RLSHP_FOR_REIMB_API.delete_VALD_RLSHP_FOR_REIMB(
                --
                p_validate                       => false
                ,p_vald_rlshp_for_reimb_id                   => l_vald_rlshp_for_reimb_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'VRP',r_vrp.information5 );
     --
 end create_VRP_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_PCT_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_PCT_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_CTFN_RQD_WHEN_RL  number;
   l_LACK_CTFN_DENY_RMBMT_RL  number;
   l_PL_GD_OR_SVC_ID  number;
   l_RMBMT_CTFN_TYP_CD varchar2(30);
   --
   cursor c_unique_PCT(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_PL_GD_R_SVC_CTFN_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_PCT_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_PCT(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_PCT_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     PCT.pl_gd_r_svc_ctfn_id new_value
   from BEN_PL_GD_R_SVC_CTFN_F PCT
   where
   PCT.PL_GD_OR_SVC_ID     = l_PL_GD_OR_SVC_ID  and
   PCT.RMBMT_CTFN_TYP_CD   = l_RMBMT_CTFN_TYP_CD and
   PCT.business_group_id  = c_business_group_id
   and   PCT.pl_gd_r_svc_ctfn_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_PL_GD_R_SVC_CTFN_F PCT1
                where
                PCT1.PL_GD_OR_SVC_ID     = l_PL_GD_OR_SVC_ID  and
                PCT1.RMBMT_CTFN_TYP_CD   = l_RMBMT_CTFN_TYP_CD and
                PCT1.business_group_id  = c_business_group_id
                and   PCT1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_PL_GD_R_SVC_CTFN_F PCT2
                where
                PCT2.PL_GD_OR_SVC_ID     = l_PL_GD_OR_SVC_ID  and
                PCT2.RMBMT_CTFN_TYP_CD   = l_RMBMT_CTFN_TYP_CD and
                PCT2.business_group_id  = c_business_group_id
                and   PCT2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_PCT                     c_PCT%rowtype;
   l_pl_gd_r_svc_ctfn_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_PCT_unique in c_unique_PCT('PCT') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_PCT_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_PCT_unique.table_route_id '||r_PCT_unique.table_route_id,10);
       hr_utility.set_location(' r_PCT_unique.information1 '||r_PCT_unique.information1,10);
       hr_utility.set_location( 'r_PCT_unique.information2 '||r_PCT_unique.information2,10);
       hr_utility.set_location( 'r_PCT_unique.information3 '||r_PCT_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
              open c_PCT(r_PCT_unique.table_route_id,
                r_PCT_unique.information1,
                r_PCT_unique.information2,
                r_PCT_unique.information3 ) ;
       --
       fetch c_PCT into r_PCT ;
       --
       close c_PCT ;
       --
       l_dml_operation:= r_PCT_unique.dml_operation ;
       l_CTFN_RQD_WHEN_RL := get_fk('FORMULA_ID', r_PCT.INFORMATION257,l_dml_operation);
       l_LACK_CTFN_DENY_RMBMT_RL := get_fk('FORMULA_ID', r_PCT.INFORMATION259,l_dml_operation);
       l_PL_GD_OR_SVC_ID := get_fk('PL_GD_OR_SVC_ID', r_PCT.INFORMATION258,l_dml_operation);
       l_RMBMT_CTFN_TYP_CD := r_PCT.information12 ;
       --
        l_update := false;
        l_process_date := p_effective_date;
        --
        if l_dml_operation = 'UPDATE' then
          --
          l_object_found_in_target := TRUE;
          --
          if l_process_date between r_PCT_unique.information2 and r_PCT_unique.information3 then
                l_update := true;
                if r_PCT_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                  or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'PL_GD_R_SVC_CTFN_ID'
                then
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PL_GD_R_SVC_CTFN_ID' ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_PCT_unique.information1 ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_PCT_unique.information1 ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PCT_unique.table_route_id;
                   --
                   -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                   --
                   BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                   --
      --DOUBT             log_data('PCT',l_new_value,l_prefix || r_PCT_unique.name|| l_suffix,'REUSED');
                   --
                end if ;
                hr_utility.set_location( 'found record for update',10);
            --
          else
            --
            l_update := false;
            --
          end if;
        else
          --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_PCT_min_max_dates(r_PCT_unique.table_route_id, r_PCT_unique.information1 ) ;
       fetch c_PCT_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_PCT_unique.information2);
/*       open c_PCT(r_PCT_unique.table_route_id,
                r_PCT_unique.information1,
                r_PCT_unique.information2,
                r_PCT_unique.information3 ) ;
       --
       fetch c_PCT into r_PCT ;
       --
       close c_PCT ; */
       --
       if p_reuse_object_flag = 'Y' then
         if c_PCT_min_max_dates%found then
           -- cursor to find the object
           open c_find_PCT_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_pl_gd_r_svc_ctfn_id, -999)  ) ;
           fetch c_find_PCT_in_target into l_new_value ;
           if c_find_PCT_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_PL_GD_R_SVC_CTFN_F',
                  p_base_key_column => 'PL_GD_R_SVC_CTFN_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_PCT_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'PL_GD_R_SVC_CTFN_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PL_GD_R_SVC_CTFN_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_PCT_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PCT_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_PCT_in_target ;
         --
         end if;
       end if ;
       --
       close c_PCT_min_max_dates ;
      end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_PCT.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_PCT.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

      if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_PL_GD_R_SVC_CTFN_F CREATE_PLAN_GOODS_SERV_CERT ',20);
           BEN_PLAN_GOODS_SERV_CERT_API.CREATE_PLAN_GOODS_SERV_CERT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CTFN_RQD_WHEN_RL      => l_CTFN_RQD_WHEN_RL
                          ,P_LACK_CTFN_DENY_RMBMT_FLAG      => r_PCT.INFORMATION14
                          ,P_LACK_CTFN_DENY_RMBMT_RL      => l_LACK_CTFN_DENY_RMBMT_RL
                          ,P_PCT_ATTRIBUTE1      => r_PCT.INFORMATION111
                          ,P_PCT_ATTRIBUTE10      => r_PCT.INFORMATION120
                          ,P_PCT_ATTRIBUTE11      => r_PCT.INFORMATION121
                          ,P_PCT_ATTRIBUTE12      => r_PCT.INFORMATION122
                          ,P_PCT_ATTRIBUTE13      => r_PCT.INFORMATION123
                          ,P_PCT_ATTRIBUTE14      => r_PCT.INFORMATION124
                          ,P_PCT_ATTRIBUTE15      => r_PCT.INFORMATION125
                          ,P_PCT_ATTRIBUTE16      => r_PCT.INFORMATION126
                          ,P_PCT_ATTRIBUTE17      => r_PCT.INFORMATION127
                          ,P_PCT_ATTRIBUTE18      => r_PCT.INFORMATION128
                          ,P_PCT_ATTRIBUTE19      => r_PCT.INFORMATION129
                          ,P_PCT_ATTRIBUTE2      => r_PCT.INFORMATION112
                          ,P_PCT_ATTRIBUTE20      => r_PCT.INFORMATION130
                          ,P_PCT_ATTRIBUTE21      => r_PCT.INFORMATION131
                          ,P_PCT_ATTRIBUTE22      => r_PCT.INFORMATION132
                          ,P_PCT_ATTRIBUTE23      => r_PCT.INFORMATION133
                          ,P_PCT_ATTRIBUTE24      => r_PCT.INFORMATION134
                          ,P_PCT_ATTRIBUTE25      => r_PCT.INFORMATION135
                          ,P_PCT_ATTRIBUTE26      => r_PCT.INFORMATION136
                          ,P_PCT_ATTRIBUTE27      => r_PCT.INFORMATION137
                          ,P_PCT_ATTRIBUTE28      => r_PCT.INFORMATION138
                          ,P_PCT_ATTRIBUTE29      => r_PCT.INFORMATION139
                          ,P_PCT_ATTRIBUTE3      => r_PCT.INFORMATION113
                          ,P_PCT_ATTRIBUTE30      => r_PCT.INFORMATION140
                          ,P_PCT_ATTRIBUTE4      => r_PCT.INFORMATION114
                          ,P_PCT_ATTRIBUTE5      => r_PCT.INFORMATION115
                          ,P_PCT_ATTRIBUTE6      => r_PCT.INFORMATION116
                          ,P_PCT_ATTRIBUTE7      => r_PCT.INFORMATION117
                          ,P_PCT_ATTRIBUTE8      => r_PCT.INFORMATION118
                          ,P_PCT_ATTRIBUTE9      => r_PCT.INFORMATION119
                          ,P_PCT_ATTRIBUTE_CATEGORY      => r_PCT.INFORMATION110
                          ,P_PFD_FLAG      => r_PCT.INFORMATION13
                          ,P_PL_GD_OR_SVC_ID      => l_PL_GD_OR_SVC_ID
                          ,P_PL_GD_R_SVC_CTFN_ID      => l_pl_gd_r_svc_ctfn_id
                          ,P_RMBMT_CTFN_TYP_CD      => r_PCT.INFORMATION12
             ,P_RQD_FLAG      => r_PCT.INFORMATION11
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id

           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_pl_gd_r_svc_ctfn_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'PL_GD_R_SVC_CTFN_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_PCT.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_PL_GD_R_SVC_CTFN_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PCT_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_PL_GD_R_SVC_CTFN_F UPDATE_PLAN_GOODS_SERV_CERT ',30);
           --UPD START
             hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
             --
             if l_update then
               --
               l_datetrack_mode := r_PCT.datetrack_mode ;
               --
               get_dt_modes(
                 p_effective_date        => l_process_date,
                 p_effective_end_date    => r_PCT.information3,
                 p_effective_start_date  => r_PCT.information2,
                 p_dml_operation         => r_PCT.dml_operation,
                 p_datetrack_mode        => l_datetrack_mode );
             --    p_update                => l_update
               --
               l_effective_date := l_process_date;
               l_PL_GD_R_SVC_CTFN_ID   := r_PCT.information1;
               l_object_version_number := r_PCT.information265;
               --
             end if;
             --
             hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
             --
             IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           BEN_PLAN_GOODS_SERV_CERT_API.UPDATE_PLAN_GOODS_SERV_CERT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CTFN_RQD_WHEN_RL      => l_CTFN_RQD_WHEN_RL
                          ,P_LACK_CTFN_DENY_RMBMT_FLAG      => r_PCT.INFORMATION14
                          ,P_LACK_CTFN_DENY_RMBMT_RL      => l_LACK_CTFN_DENY_RMBMT_RL
                          ,P_PCT_ATTRIBUTE1      => r_PCT.INFORMATION111
                          ,P_PCT_ATTRIBUTE10      => r_PCT.INFORMATION120
                          ,P_PCT_ATTRIBUTE11      => r_PCT.INFORMATION121
                          ,P_PCT_ATTRIBUTE12      => r_PCT.INFORMATION122
                          ,P_PCT_ATTRIBUTE13      => r_PCT.INFORMATION123
                          ,P_PCT_ATTRIBUTE14      => r_PCT.INFORMATION124
                          ,P_PCT_ATTRIBUTE15      => r_PCT.INFORMATION125
                          ,P_PCT_ATTRIBUTE16      => r_PCT.INFORMATION126
                          ,P_PCT_ATTRIBUTE17      => r_PCT.INFORMATION127
                          ,P_PCT_ATTRIBUTE18      => r_PCT.INFORMATION128
                          ,P_PCT_ATTRIBUTE19      => r_PCT.INFORMATION129
                          ,P_PCT_ATTRIBUTE2      => r_PCT.INFORMATION112
                          ,P_PCT_ATTRIBUTE20      => r_PCT.INFORMATION130
                          ,P_PCT_ATTRIBUTE21      => r_PCT.INFORMATION131
                          ,P_PCT_ATTRIBUTE22      => r_PCT.INFORMATION132
                          ,P_PCT_ATTRIBUTE23      => r_PCT.INFORMATION133
                          ,P_PCT_ATTRIBUTE24      => r_PCT.INFORMATION134
                          ,P_PCT_ATTRIBUTE25      => r_PCT.INFORMATION135
                          ,P_PCT_ATTRIBUTE26      => r_PCT.INFORMATION136
                          ,P_PCT_ATTRIBUTE27      => r_PCT.INFORMATION137
                          ,P_PCT_ATTRIBUTE28      => r_PCT.INFORMATION138
                          ,P_PCT_ATTRIBUTE29      => r_PCT.INFORMATION139
                          ,P_PCT_ATTRIBUTE3      => r_PCT.INFORMATION113
                          ,P_PCT_ATTRIBUTE30      => r_PCT.INFORMATION140
                          ,P_PCT_ATTRIBUTE4      => r_PCT.INFORMATION114
                          ,P_PCT_ATTRIBUTE5      => r_PCT.INFORMATION115
                          ,P_PCT_ATTRIBUTE6      => r_PCT.INFORMATION116
                          ,P_PCT_ATTRIBUTE7      => r_PCT.INFORMATION117
                          ,P_PCT_ATTRIBUTE8      => r_PCT.INFORMATION118
                          ,P_PCT_ATTRIBUTE9      => r_PCT.INFORMATION119
                          ,P_PCT_ATTRIBUTE_CATEGORY      => r_PCT.INFORMATION110
                          ,P_PFD_FLAG      => r_PCT.INFORMATION13
                          ,P_PL_GD_OR_SVC_ID      => l_PL_GD_OR_SVC_ID
                          ,P_PL_GD_R_SVC_CTFN_ID      => l_pl_gd_r_svc_ctfn_id
                          ,P_RMBMT_CTFN_TYP_CD      => r_PCT.INFORMATION12
             ,P_RQD_FLAG      => r_PCT.INFORMATION11
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
           ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
            end if;  -- l_update
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_PCT.information3) then
             --
             BEN_PLAN_GOODS_SERV_CERT_API.delete_PLAN_GOODS_SERV_CERT(
                --
                p_validate                       => false
                ,p_pl_gd_r_svc_ctfn_id                   => l_pl_gd_r_svc_ctfn_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'PCT',r_pct.information5 );
     --
 end create_PCT_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_VGS_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_VGS_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_GD_OR_SVC_TYP_ID  number;
   l_PL_ID  number;
   cursor c_unique_VGS(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_PL_GD_OR_SVC_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_VGS_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_VGS(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_VGS_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     VGS.pl_gd_or_svc_id new_value
   from BEN_PL_GD_OR_SVC_F VGS
   where
   VGS.GD_OR_SVC_TYP_ID     = l_GD_OR_SVC_TYP_ID  and
   VGS.PL_ID     = l_PL_ID  and
   VGS.business_group_id  = c_business_group_id
   and   VGS.pl_gd_or_svc_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_PL_GD_OR_SVC_F VGS1
                where
                VGS1.GD_OR_SVC_TYP_ID     = l_GD_OR_SVC_TYP_ID  and
                VGS1.PL_ID     = l_PL_ID  and
                VGS1.business_group_id  = c_business_group_id
                and   VGS1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_PL_GD_OR_SVC_F VGS2
                where
                VGS2.GD_OR_SVC_TYP_ID     = l_GD_OR_SVC_TYP_ID  and
                VGS2.PL_ID     = l_PL_ID  and
                VGS2.business_group_id  = c_business_group_id
                and   VGS2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
    --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_VGS                     c_VGS%rowtype;
   l_pl_gd_or_svc_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_VGS_unique in c_unique_VGS('VGS') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_VGS_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_VGS_unique.table_route_id '||r_VGS_unique.table_route_id,10);
       hr_utility.set_location(' r_VGS_unique.information1 '||r_VGS_unique.information1,10);
       hr_utility.set_location( 'r_VGS_unique.information2 '||r_VGS_unique.information2,10);
       hr_utility.set_location( 'r_VGS_unique.information3 '||r_VGS_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
         open c_VGS(r_VGS_unique.table_route_id,
                r_VGS_unique.information1,
                r_VGS_unique.information2,
                r_VGS_unique.information3 ) ;
       --
       fetch c_VGS into r_VGS ;
       --
       close c_VGS ;
       --
       l_dml_operation:= r_VGS_unique.dml_operation ;
       l_GD_OR_SVC_TYP_ID := get_fk('GD_OR_SVC_TYP_ID', r_VGS.INFORMATION262,l_dml_operation);
       l_PL_ID := get_fk('PL_ID', r_VGS.INFORMATION261,l_dml_operation);
       --
             l_update := false;
             l_process_date := p_effective_date;
             --
             if l_dml_operation = 'UPDATE' then
               --
               l_object_found_in_target := TRUE;
               --
               if l_process_date between r_VGS_unique.information2 and r_VGS_unique.information3 then
                     l_update := true;
                     if r_VGS_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                       or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'PL_GD_OR_SVC_ID'
                     then
                        BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PL_GD_OR_SVC_ID' ;
                        BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_VGS_unique.information1 ;
                        BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_VGS_unique.information1 ;
                        BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                        BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_VGS_unique.table_route_id;
                        --
                        -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                        --
                        BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                        --
            --DOUBT            log_data('VGS',l_new_value,l_prefix || r_VGS_unique.name|| l_suffix,'REUSED');
                        --
                     end if ;
                     hr_utility.set_location( 'found record for update',10);
                 --
               else
                 --
                 l_update := false;
                 --
               end if;
             else
               --
               --UPD END

       l_min_esd := null ;
       l_max_eed := null ;
       open c_VGS_min_max_dates(r_VGS_unique.table_route_id, r_VGS_unique.information1 ) ;
       fetch c_VGS_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_VGS_unique.information2);
     /*  open c_VGS(r_VGS_unique.table_route_id,
                r_VGS_unique.information1,
                r_VGS_unique.information2,
                r_VGS_unique.information3 ) ;
       --
       fetch c_VGS into r_VGS ;
       --
       close c_VGS ; */
       --
       if p_reuse_object_flag = 'Y' then
         if c_VGS_min_max_dates%found then
           -- cursor to find the object
           open c_find_VGS_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_pl_gd_or_svc_id, -999)  ) ;
           fetch c_find_VGS_in_target into l_new_value ;
           if c_find_VGS_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_PL_GD_OR_SVC_F',
                  p_base_key_column => 'PL_GD_OR_SVC_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_VGS_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'PL_GD_OR_SVC_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PL_GD_OR_SVC_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_VGS_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_VGS_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_VGS_in_target ;
         --
         end if;
       end if ;
       --
       close c_VGS_min_max_dates ;
     end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then
         --
         l_current_pk_id := r_VGS.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_VGS.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

     if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_PL_GD_OR_SVC_F CREATE_PLAN_GOODS_SERVICES ',20);
           BEN_PLAN_GOODS_SERVICES_API.CREATE_PLAN_GOODS_SERVICES(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ALW_RCRRG_CLMS_FLAG      => r_VGS.INFORMATION13
                          ,P_GD_OR_SVC_TYP_ID      => l_GD_OR_SVC_TYP_ID
                          ,P_GD_OR_SVC_USG_CD      => r_VGS.INFORMATION12
                          ,P_GD_SVC_RECD_BASIS_CD      => r_VGS.INFORMATION11
                          ,P_GD_SVC_RECD_BASIS_DT      => r_VGS.INFORMATION306
                          ,P_GD_SVC_RECD_BASIS_MO      => r_VGS.INFORMATION257
                          ,P_PL_GD_OR_SVC_ID      => l_pl_gd_or_svc_id
                          ,P_PL_ID      => l_PL_ID
                          ,P_VGS_ATTRIBUTE1      => r_VGS.INFORMATION111
                          ,P_VGS_ATTRIBUTE10      => r_VGS.INFORMATION120
                          ,P_VGS_ATTRIBUTE11      => r_VGS.INFORMATION121
                          ,P_VGS_ATTRIBUTE12      => r_VGS.INFORMATION122
                          ,P_VGS_ATTRIBUTE13      => r_VGS.INFORMATION123
                          ,P_VGS_ATTRIBUTE14      => r_VGS.INFORMATION124
                          ,P_VGS_ATTRIBUTE15      => r_VGS.INFORMATION125
                          ,P_VGS_ATTRIBUTE16      => r_VGS.INFORMATION126
                          ,P_VGS_ATTRIBUTE17      => r_VGS.INFORMATION127
                          ,P_VGS_ATTRIBUTE18      => r_VGS.INFORMATION128
                          ,P_VGS_ATTRIBUTE19      => r_VGS.INFORMATION129
                          ,P_VGS_ATTRIBUTE2      => r_VGS.INFORMATION112
                          ,P_VGS_ATTRIBUTE20      => r_VGS.INFORMATION130
                          ,P_VGS_ATTRIBUTE21      => r_VGS.INFORMATION131
                          ,P_VGS_ATTRIBUTE22      => r_VGS.INFORMATION132
                          ,P_VGS_ATTRIBUTE23      => r_VGS.INFORMATION133
                          ,P_VGS_ATTRIBUTE24      => r_VGS.INFORMATION134
                          ,P_VGS_ATTRIBUTE25      => r_VGS.INFORMATION135
                          ,P_VGS_ATTRIBUTE26      => r_VGS.INFORMATION136
                          ,P_VGS_ATTRIBUTE27      => r_VGS.INFORMATION137
                          ,P_VGS_ATTRIBUTE28      => r_VGS.INFORMATION138
                          ,P_VGS_ATTRIBUTE29      => r_VGS.INFORMATION139
                          ,P_VGS_ATTRIBUTE3      => r_VGS.INFORMATION113
                          ,P_VGS_ATTRIBUTE30      => r_VGS.INFORMATION140
                          ,P_VGS_ATTRIBUTE4      => r_VGS.INFORMATION114
                          ,P_VGS_ATTRIBUTE5      => r_VGS.INFORMATION115
                          ,P_VGS_ATTRIBUTE6      => r_VGS.INFORMATION116
                          ,P_VGS_ATTRIBUTE7      => r_VGS.INFORMATION117
                          ,P_VGS_ATTRIBUTE8      => r_VGS.INFORMATION118
                          ,P_VGS_ATTRIBUTE9      => r_VGS.INFORMATION119
             ,P_VGS_ATTRIBUTE_CATEGORY      => r_VGS.INFORMATION110
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_pl_gd_or_svc_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'PL_GD_OR_SVC_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_VGS.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_PL_GD_OR_SVC_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_VGS_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
            hr_utility.set_location(' BEN_PL_GD_OR_SVC_F UPDATE_PLAN_GOODS_SERVICES ',30);
           --UPD START
                    hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
                    --
                    if l_update then
                      --
                      l_datetrack_mode := r_VGS.datetrack_mode ;
                      --
                      get_dt_modes(
                        p_effective_date        => l_process_date,
                        p_effective_end_date    => r_VGS.information3,
                        p_effective_start_date  => r_VGS.information2,
                        p_dml_operation         => r_VGS.dml_operation,
                        p_datetrack_mode        => l_datetrack_mode );
                    --    p_update                => l_update
                      --
                      l_effective_date := l_process_date;
                      l_PL_GD_OR_SVC_ID   := r_VGS.information1;
                      l_object_version_number := r_VGS.information265;
                      --
                    end if;
                    --
                    hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
                    --
                    IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END

           BEN_PLAN_GOODS_SERVICES_API.UPDATE_PLAN_GOODS_SERVICES(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ALW_RCRRG_CLMS_FLAG      => r_VGS.INFORMATION13
                         ,P_GD_OR_SVC_TYP_ID      => l_GD_OR_SVC_TYP_ID
                         ,P_GD_OR_SVC_USG_CD      => r_VGS.INFORMATION12
                         ,P_GD_SVC_RECD_BASIS_CD      => r_VGS.INFORMATION11
                         ,P_GD_SVC_RECD_BASIS_DT      => r_VGS.INFORMATION306
                         ,P_GD_SVC_RECD_BASIS_MO      => r_VGS.INFORMATION257
                         ,P_PL_GD_OR_SVC_ID      => l_pl_gd_or_svc_id
                         ,P_PL_ID      => l_PL_ID
                         ,P_VGS_ATTRIBUTE1      => r_VGS.INFORMATION111
                         ,P_VGS_ATTRIBUTE10      => r_VGS.INFORMATION120
                         ,P_VGS_ATTRIBUTE11      => r_VGS.INFORMATION121
                         ,P_VGS_ATTRIBUTE12      => r_VGS.INFORMATION122
                         ,P_VGS_ATTRIBUTE13      => r_VGS.INFORMATION123
                         ,P_VGS_ATTRIBUTE14      => r_VGS.INFORMATION124
                         ,P_VGS_ATTRIBUTE15      => r_VGS.INFORMATION125
                         ,P_VGS_ATTRIBUTE16      => r_VGS.INFORMATION126
                         ,P_VGS_ATTRIBUTE17      => r_VGS.INFORMATION127
                         ,P_VGS_ATTRIBUTE18      => r_VGS.INFORMATION128
                         ,P_VGS_ATTRIBUTE19      => r_VGS.INFORMATION129
                         ,P_VGS_ATTRIBUTE2      => r_VGS.INFORMATION112
                         ,P_VGS_ATTRIBUTE20      => r_VGS.INFORMATION130
                         ,P_VGS_ATTRIBUTE21      => r_VGS.INFORMATION131
                         ,P_VGS_ATTRIBUTE22      => r_VGS.INFORMATION132
                         ,P_VGS_ATTRIBUTE23      => r_VGS.INFORMATION133
                         ,P_VGS_ATTRIBUTE24      => r_VGS.INFORMATION134
                         ,P_VGS_ATTRIBUTE25      => r_VGS.INFORMATION135
                         ,P_VGS_ATTRIBUTE26      => r_VGS.INFORMATION136
                         ,P_VGS_ATTRIBUTE27      => r_VGS.INFORMATION137
                         ,P_VGS_ATTRIBUTE28      => r_VGS.INFORMATION138
                         ,P_VGS_ATTRIBUTE29      => r_VGS.INFORMATION139
                         ,P_VGS_ATTRIBUTE3      => r_VGS.INFORMATION113
                         ,P_VGS_ATTRIBUTE30      => r_VGS.INFORMATION140
                         ,P_VGS_ATTRIBUTE4      => r_VGS.INFORMATION114
                         ,P_VGS_ATTRIBUTE5      => r_VGS.INFORMATION115
                         ,P_VGS_ATTRIBUTE6      => r_VGS.INFORMATION116
                         ,P_VGS_ATTRIBUTE7      => r_VGS.INFORMATION117
                         ,P_VGS_ATTRIBUTE8      => r_VGS.INFORMATION118
                         ,P_VGS_ATTRIBUTE9      => r_VGS.INFORMATION119
             ,P_VGS_ATTRIBUTE_CATEGORY      => r_VGS.INFORMATION110
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => hr_api.g_update
           );
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_VGS.information3) then
             --
             BEN_PLAN_GOODS_SERVICES_API.delete_PLAN_GOODS_SERVICES(
                --
                p_validate                       => false
                ,p_pl_gd_or_svc_id                   => l_pl_gd_or_svc_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,P_DATETRACK_MODE        => l_datetrack_mode
                --
                );
                --
                end if;  -- l_update
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'VGS',r_vgs.information5 );
     --
 end create_VGS_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_LBR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_LBR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_DFLT_TO_ASN_PNDG_CTFN_RL  number;
   l_LER_ID  number;
   l_MN_CVG_RL  number;
   l_MX_CVG_RL  number;
   l_PLIP_ID  number;
   l_PL_ID  number;
   cursor c_unique_LBR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_LER_BNFT_RSTRN_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_LBR_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_LBR(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_LBR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     LBR.ler_bnft_rstrn_id new_value
   from BEN_LER_BNFT_RSTRN_F LBR
   where
   LBR.LER_ID     = l_LER_ID  and
   nvl(LBR.PLIP_ID,-999)     = nvl(l_PLIP_ID,-999)  and
   nvl(LBR.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
   LBR.business_group_id  = c_business_group_id
   and   LBR.ler_bnft_rstrn_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_LER_BNFT_RSTRN_F LBR1
                where
                LBR1.LER_ID     = l_LER_ID  and
                nvl(LBR1.PLIP_ID,-999)     = nvl(l_PLIP_ID,-999)  and
                nvl(LBR1.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
                LBR1.business_group_id  = c_business_group_id
                and   LBR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_LER_BNFT_RSTRN_F LBR2
                where
                LBR2.LER_ID     = l_LER_ID  and
                nvl(LBR2.PLIP_ID,-999)     = nvl(l_PLIP_ID,-999)  and
                nvl(LBR2.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
                LBR2.business_group_id  = c_business_group_id
                and   LBR2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
    --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_LBR                     c_LBR%rowtype;
   l_ler_bnft_rstrn_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_LBR_unique in c_unique_LBR('LBR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_LBR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then

       --
       hr_utility.set_location(' r_LBR_unique.table_route_id '||r_LBR_unique.table_route_id,10);
       hr_utility.set_location(' r_LBR_unique.information1 '||r_LBR_unique.information1,10);
       hr_utility.set_location( 'r_LBR_unique.information2 '||r_LBR_unique.information2,10);
       hr_utility.set_location( 'r_LBR_unique.information3 '||r_LBR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
              open c_LBR(r_LBR_unique.table_route_id,
                r_LBR_unique.information1,
                r_LBR_unique.information2,
                r_LBR_unique.information3 ) ;
       --
       fetch c_LBR into r_LBR ;
       --
       close c_LBR ;
       --
       l_dml_operation:= r_LBR_unique.dml_operation ;
       l_DFLT_TO_ASN_PNDG_CTFN_RL := get_fk('FORMULA_ID', r_LBR.INFORMATION262,l_dml_operation);
       l_LER_ID := get_fk('LER_ID', r_LBR.INFORMATION257,l_dml_operation);
       l_MN_CVG_RL := get_fk('FORMULA_ID', r_LBR.INFORMATION268,l_dml_operation);
       l_MX_CVG_RL := get_fk('FORMULA_ID', r_LBR.INFORMATION266,l_dml_operation);
       l_PLIP_ID := get_fk('PLIP_ID', r_LBR.INFORMATION256,l_dml_operation);
       l_PL_ID := get_fk('PL_ID', r_LBR.INFORMATION261,l_dml_operation);
       --
                l_update := false;
                l_process_date := p_effective_date;
                --
                if l_dml_operation = 'UPDATE' then
                  --
                  l_object_found_in_target := TRUE;
                  --
                  if l_process_date between r_LBR_unique.information2 and r_LBR_unique.information3 then
                        l_update := true;
                        if r_LBR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                          or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'LER_BNFT_RSTRN_ID'
                        then
                           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'LER_BNFT_RSTRN_ID' ;
                           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_LBR_unique.information1 ;
                           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_LBR_unique.information1 ;
                           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LBR_unique.table_route_id;
                           --
                           -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                           --
                           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                           --
                  --DOUBT         log_data('LBR',l_new_value,l_prefix || r_LBR_unique.name|| l_suffix,'REUSED');
                           --
                        end if ;
                        hr_utility.set_location( 'found record for update',10);
                    --
                  else
                    --
                    l_update := false;
                    --
                  end if;
                else
                  --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_LBR_min_max_dates(r_LBR_unique.table_route_id, r_LBR_unique.information1 ) ;
       fetch c_LBR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_LBR_unique.information2);
/*       open c_LBR(r_LBR_unique.table_route_id,
                r_LBR_unique.information1,
                r_LBR_unique.information2,
                r_LBR_unique.information3 ) ;
       --
       fetch c_LBR into r_LBR ;
       --
       close c_LBR ; */
       --

       if p_reuse_object_flag = 'Y' then
         if c_LBR_min_max_dates%found then
           -- cursor to find the object
           open c_find_LBR_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_ler_bnft_rstrn_id, -999)  ) ;
           fetch c_find_LBR_in_target into l_new_value ;
           if c_find_LBR_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_LER_BNFT_RSTRN_F',
                  p_base_key_column => 'LER_BNFT_RSTRN_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_LBR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'LER_BNFT_RSTRN_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'LER_BNFT_RSTRN_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_LBR_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LBR_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_LBR_in_target ;
         --
         end if;
       end if ;
       --
       close c_LBR_min_max_dates ;
      end if; --if p_dml_operation
               --
               if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_LBR.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_LBR.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

        if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_LER_BNFT_RSTRN_F CREATE_LER_BNFT_RSTRN ',20);
           BEN_LER_BNFT_RSTRN_API.CREATE_LER_BNFT_RSTRN(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CVG_INCR_R_DECR_ONLY_CD      => r_LBR.INFORMATION12
                          ,P_DFLT_TO_ASN_PNDG_CTFN_CD      => r_LBR.INFORMATION11
                          ,P_DFLT_TO_ASN_PNDG_CTFN_RL      => l_DFLT_TO_ASN_PNDG_CTFN_RL
                          ,P_LBR_ATTRIBUTE1      => r_LBR.INFORMATION111
                          ,P_LBR_ATTRIBUTE10      => r_LBR.INFORMATION120
                          ,P_LBR_ATTRIBUTE11      => r_LBR.INFORMATION121
                          ,P_LBR_ATTRIBUTE12      => r_LBR.INFORMATION122
                          ,P_LBR_ATTRIBUTE13      => r_LBR.INFORMATION123
                          ,P_LBR_ATTRIBUTE14      => r_LBR.INFORMATION124
                          ,P_LBR_ATTRIBUTE15      => r_LBR.INFORMATION125
                          ,P_LBR_ATTRIBUTE16      => r_LBR.INFORMATION126
                          ,P_LBR_ATTRIBUTE17      => r_LBR.INFORMATION127
                          ,P_LBR_ATTRIBUTE18      => r_LBR.INFORMATION128
                          ,P_LBR_ATTRIBUTE19      => r_LBR.INFORMATION129
                          ,P_LBR_ATTRIBUTE2      => r_LBR.INFORMATION112
                          ,P_LBR_ATTRIBUTE20      => r_LBR.INFORMATION130
                          ,P_LBR_ATTRIBUTE21      => r_LBR.INFORMATION131
                          ,P_LBR_ATTRIBUTE22      => r_LBR.INFORMATION132
                          ,P_LBR_ATTRIBUTE23      => r_LBR.INFORMATION133
                          ,P_LBR_ATTRIBUTE24      => r_LBR.INFORMATION134
                          ,P_LBR_ATTRIBUTE25      => r_LBR.INFORMATION135
                          ,P_LBR_ATTRIBUTE26      => r_LBR.INFORMATION136
                          ,P_LBR_ATTRIBUTE27      => r_LBR.INFORMATION137
                          ,P_LBR_ATTRIBUTE28      => r_LBR.INFORMATION138
                          ,P_LBR_ATTRIBUTE29      => r_LBR.INFORMATION139
                          ,P_LBR_ATTRIBUTE3      => r_LBR.INFORMATION113
                          ,P_LBR_ATTRIBUTE30      => r_LBR.INFORMATION140
                          ,P_LBR_ATTRIBUTE4      => r_LBR.INFORMATION114
                          ,P_LBR_ATTRIBUTE5      => r_LBR.INFORMATION115
                          ,P_LBR_ATTRIBUTE6      => r_LBR.INFORMATION116
                          ,P_LBR_ATTRIBUTE7      => r_LBR.INFORMATION117
                          ,P_LBR_ATTRIBUTE8      => r_LBR.INFORMATION118
                          ,P_LBR_ATTRIBUTE9      => r_LBR.INFORMATION119
                          ,P_LBR_ATTRIBUTE_CATEGORY      => r_LBR.INFORMATION110
                          ,P_LER_BNFT_RSTRN_ID      => l_ler_bnft_rstrn_id
                          ,P_LER_ID      => l_LER_ID
                          ,P_MN_CVG_AMT      => r_LBR.INFORMATION297
                          ,P_MN_CVG_RL      => l_MN_CVG_RL
                          ,P_MX_CVG_ALWD_AMT      => r_LBR.INFORMATION295
                          ,P_MX_CVG_INCR_ALWD_AMT      => r_LBR.INFORMATION294
                          ,P_MX_CVG_INCR_WCF_ALWD_AMT      => r_LBR.INFORMATION293
                          ,P_MX_CVG_MLT_INCR_NUM      => r_LBR.INFORMATION263
                          ,P_MX_CVG_MLT_INCR_WCF_NUM      => r_LBR.INFORMATION264
                          ,P_MX_CVG_RL      => l_MX_CVG_RL
                          ,P_MX_CVG_WCFN_AMT      => r_LBR.INFORMATION296
                          ,P_MX_CVG_WCFN_MLT_NUM      => r_LBR.INFORMATION267
                          ,P_NO_MN_CVG_INCR_APLS_FLAG      => r_LBR.INFORMATION14
                          ,P_NO_MX_CVG_AMT_APLS_FLAG      => r_LBR.INFORMATION15
                          ,P_NO_MX_CVG_INCR_APLS_FLAG      => r_LBR.INFORMATION16
                          ,P_PLIP_ID      => l_PLIP_ID
                          ,P_PL_ID      => l_PL_ID
             ,P_UNSSPND_ENRT_CD      => r_LBR.INFORMATION13
             --ML
             ,P_SUSP_IF_CTFN_NOT_PRVD_FLAG      =>nvl(r_LBR.INFORMATION198,'Y')
             ,P_CTFN_DETERMINE_CD               => r_LBR.INFORMATION197
             --ML END
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_ler_bnft_rstrn_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'LER_BNFT_RSTRN_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_LBR.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_LER_BNFT_RSTRN_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LBR_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
               hr_utility.set_location(' BEN_LER_BNFT_RSTRN_F UPDATE_LER_BNFT_RSTRN ',30);
           --UPD START
                    hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
                    --
                    if l_update then
                      --
                      l_datetrack_mode := r_LBR.datetrack_mode ;
                      --
                      get_dt_modes(
                        p_effective_date        => l_process_date,
                        p_effective_end_date    => r_LBR.information3,
                        p_effective_start_date  => r_LBR.information2,
                        p_dml_operation         => r_LBR.dml_operation,
                        p_datetrack_mode        => l_datetrack_mode );
                    --    p_update                => l_update
                      --
                      l_effective_date := l_process_date;
                      l_LER_BNFT_RSTRN_ID   := r_LBR.information1;
                      l_object_version_number := r_LBR.information265;
                      --
                    end if;
                    --
                    hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
                    --
                    IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END

           BEN_LER_BNFT_RSTRN_API.UPDATE_LER_BNFT_RSTRN(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CVG_INCR_R_DECR_ONLY_CD      => r_LBR.INFORMATION12
                          ,P_DFLT_TO_ASN_PNDG_CTFN_CD      => r_LBR.INFORMATION11
                          ,P_DFLT_TO_ASN_PNDG_CTFN_RL      => l_DFLT_TO_ASN_PNDG_CTFN_RL
                          ,P_LBR_ATTRIBUTE1      => r_LBR.INFORMATION111
                          ,P_LBR_ATTRIBUTE10      => r_LBR.INFORMATION120
                          ,P_LBR_ATTRIBUTE11      => r_LBR.INFORMATION121
                          ,P_LBR_ATTRIBUTE12      => r_LBR.INFORMATION122
                          ,P_LBR_ATTRIBUTE13      => r_LBR.INFORMATION123
                          ,P_LBR_ATTRIBUTE14      => r_LBR.INFORMATION124
                          ,P_LBR_ATTRIBUTE15      => r_LBR.INFORMATION125
                          ,P_LBR_ATTRIBUTE16      => r_LBR.INFORMATION126
                          ,P_LBR_ATTRIBUTE17      => r_LBR.INFORMATION127
                          ,P_LBR_ATTRIBUTE18      => r_LBR.INFORMATION128
                          ,P_LBR_ATTRIBUTE19      => r_LBR.INFORMATION129
                          ,P_LBR_ATTRIBUTE2      => r_LBR.INFORMATION112
                          ,P_LBR_ATTRIBUTE20      => r_LBR.INFORMATION130
                          ,P_LBR_ATTRIBUTE21      => r_LBR.INFORMATION131
                          ,P_LBR_ATTRIBUTE22      => r_LBR.INFORMATION132
                          ,P_LBR_ATTRIBUTE23      => r_LBR.INFORMATION133
                          ,P_LBR_ATTRIBUTE24      => r_LBR.INFORMATION134
                          ,P_LBR_ATTRIBUTE25      => r_LBR.INFORMATION135
                          ,P_LBR_ATTRIBUTE26      => r_LBR.INFORMATION136
                          ,P_LBR_ATTRIBUTE27      => r_LBR.INFORMATION137
                          ,P_LBR_ATTRIBUTE28      => r_LBR.INFORMATION138
                          ,P_LBR_ATTRIBUTE29      => r_LBR.INFORMATION139
                          ,P_LBR_ATTRIBUTE3      => r_LBR.INFORMATION113
                          ,P_LBR_ATTRIBUTE30      => r_LBR.INFORMATION140
                          ,P_LBR_ATTRIBUTE4      => r_LBR.INFORMATION114
                          ,P_LBR_ATTRIBUTE5      => r_LBR.INFORMATION115
                          ,P_LBR_ATTRIBUTE6      => r_LBR.INFORMATION116
                          ,P_LBR_ATTRIBUTE7      => r_LBR.INFORMATION117
                          ,P_LBR_ATTRIBUTE8      => r_LBR.INFORMATION118
                          ,P_LBR_ATTRIBUTE9      => r_LBR.INFORMATION119
                          ,P_LBR_ATTRIBUTE_CATEGORY      => r_LBR.INFORMATION110
                          ,P_LER_BNFT_RSTRN_ID      => l_ler_bnft_rstrn_id
                          ,P_LER_ID      => l_LER_ID
                          ,P_MN_CVG_AMT      => r_LBR.INFORMATION297
                          ,P_MN_CVG_RL      => l_MN_CVG_RL
                          ,P_MX_CVG_ALWD_AMT      => r_LBR.INFORMATION295
                          ,P_MX_CVG_INCR_ALWD_AMT      => r_LBR.INFORMATION294
                          ,P_MX_CVG_INCR_WCF_ALWD_AMT      => r_LBR.INFORMATION293
                          ,P_MX_CVG_MLT_INCR_NUM      => r_LBR.INFORMATION263
                          ,P_MX_CVG_MLT_INCR_WCF_NUM      => r_LBR.INFORMATION264
                          ,P_MX_CVG_RL      => l_MX_CVG_RL
                          ,P_MX_CVG_WCFN_AMT      => r_LBR.INFORMATION296
                          ,P_MX_CVG_WCFN_MLT_NUM      => r_LBR.INFORMATION267
                          ,P_NO_MN_CVG_INCR_APLS_FLAG      => r_LBR.INFORMATION14
                          ,P_NO_MX_CVG_AMT_APLS_FLAG      => r_LBR.INFORMATION15
                          ,P_NO_MX_CVG_INCR_APLS_FLAG      => r_LBR.INFORMATION16
                          ,P_PLIP_ID      => l_PLIP_ID
                          ,P_PL_ID      => l_PL_ID
             ,P_UNSSPND_ENRT_CD      => r_LBR.INFORMATION13
             --ML
             ,P_SUSP_IF_CTFN_NOT_PRVD_FLAG      =>nvl(r_LBR.INFORMATION198,'Y')
             ,P_CTFN_DETERMINE_CD               => r_LBR.INFORMATION197
             --ML END
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
              ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
            end if;  -- l_update
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_LBR.information3) then
             --
             BEN_LER_BNFT_RSTRN_API.delete_LER_BNFT_RSTRN(
                --
                p_validate                       => false
                ,p_ler_bnft_rstrn_id                   => l_ler_bnft_rstrn_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --

         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'LBR',r_lbr.information5 );
     --
 end create_LBR_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_LPR1_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_LPR1_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_AUTO_ENRT_MTHD_RL  number;
   l_DFLT_ENRT_RL  number;
   l_ENRT_RL  number;
   l_LER_ID  number;
   l_PLIP_ID  number;
   cursor c_unique_LPR1(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
  ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_LER_CHG_PLIP_ENRT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_LPR1_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_LPR1(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_LPR1_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     LPR1.ler_chg_plip_enrt_id new_value
   from BEN_LER_CHG_PLIP_ENRT_F LPR1
   where
   LPR1.LER_ID     = l_LER_ID  and
   LPR1.PLIP_ID    = l_PLIP_ID and
   LPR1.business_group_id  = c_business_group_id
   and   LPR1.ler_chg_plip_enrt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_LER_CHG_PLIP_ENRT_F LPR11
                where
                LPR11.LER_ID     = l_LER_ID  and
                LPR11.PLIP_ID    = l_PLIP_ID  and
                LPR11.business_group_id  = c_business_group_id
                and   LPR11.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_LER_CHG_PLIP_ENRT_F LPR12
                where
                LPR12.LER_ID     = l_LER_ID  and
                LPR12.PLIP_ID    = l_PLIP_ID  and
                LPR12.business_group_id  = c_business_group_id
                and   LPR12.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_LPR1                     c_LPR1%rowtype;
   l_ler_chg_plip_enrt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_LPR1_unique in c_unique_LPR1('LPR1') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_LPR1_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then

       --
       hr_utility.set_location(' r_LPR1_unique.table_route_id '||r_LPR1_unique.table_route_id,10);
       hr_utility.set_location(' r_LPR1_unique.information1 '||r_LPR1_unique.information1,10);
       hr_utility.set_location( 'r_LPR1_unique.information2 '||r_LPR1_unique.information2,10);
       hr_utility.set_location( 'r_LPR1_unique.information3 '||r_LPR1_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
           --UPD START
                  open c_LPR1(r_LPR1_unique.table_route_id,
                r_LPR1_unique.information1,
                r_LPR1_unique.information2,
                r_LPR1_unique.information3 ) ;
       --
       fetch c_LPR1 into r_LPR1 ;
       --
       close c_LPR1 ;
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_LPR1_unique.dml_operation ;
       l_AUTO_ENRT_MTHD_RL := get_fk('FORMULA_ID', r_LPR1.INFORMATION262,l_dml_operation );
       l_DFLT_ENRT_RL := get_fk('FORMULA_ID', r_LPR1.INFORMATION263,l_dml_operation );
       l_ENRT_RL := get_fk('FORMULA_ID', r_LPR1.INFORMATION258,l_dml_operation );
       l_LER_ID := get_fk('LER_ID', r_LPR1.INFORMATION257,l_dml_operation );
       l_PLIP_ID := get_fk('PLIP_ID', r_LPR1.INFORMATION256,l_dml_operation );
               --
               if l_dml_operation = 'UPDATE' then
                 --
                 l_object_found_in_target := TRUE;
                 --
                 if l_process_date between r_LPR1_unique.information2 and r_LPR1_unique.information3 then
                       l_update := true;
                       if r_LPR1_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                         or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'LER_CHG_PLIP_ENRT_ID'
                       then
                          BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'LER_CHG_PLIP_ENRT_ID' ;
                          BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_LPR1_unique.information1 ;
                          BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_LPR1_unique.information1 ;
                          BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                          BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LPR1_unique.table_route_id;
                          --
                          -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                          --
                          BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                          --
          --DOUBT                log_data('LPR1',l_new_value,l_prefix || r_LPR1_unique.name|| l_suffix,'REUSED');
                          --
                       end if ;
                       hr_utility.set_location( 'found record for update',10);
                   --
                 else
                   --
                   l_update := false;
                   --
                 end if;
               else
                 --
                 --UPD END

       l_min_esd := null ;
       l_max_eed := null ;
       open c_LPR1_min_max_dates(r_LPR1_unique.table_route_id, r_LPR1_unique.information1 ) ;
       fetch c_LPR1_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_LPR1_unique.information2);
/*       open c_LPR1(r_LPR1_unique.table_route_id,
                r_LPR1_unique.information1,
                r_LPR1_unique.information2,
                r_LPR1_unique.information3 ) ;
       --
       fetch c_LPR1 into r_LPR1 ;
       --
       close c_LPR1 ; */
       --
       if p_reuse_object_flag = 'Y' then
         if c_LPR1_min_max_dates%found then
           -- cursor to find the object
           open c_find_LPR1_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_ler_chg_plip_enrt_id, -999)  ) ;
           fetch c_find_LPR1_in_target into l_new_value ;
           if c_find_LPR1_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_LER_CHG_PLIP_ENRT_F',
                  p_base_key_column => 'LER_CHG_PLIP_ENRT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_LPR1_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'LER_CHG_PLIP_ENRT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'LER_CHG_PLIP_ENRT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_LPR1_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LPR1_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_LPR1_in_target ;
         --
         end if;
       end if ;
       --
       close c_LPR1_min_max_dates ;
       end if; --if p_dml_operation
               --
               if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_LPR1.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_LPR1.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
            l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_LER_CHG_PLIP_ENRT_F CREATE_LER_CHG_PLAN_ENRT ',20);
           BEN_LER_CHG_PLAN_ENRT_API.CREATE_LER_CHG_PLAN_ENRT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
            ,P_AUTO_ENRT_MTHD_RL      => l_AUTO_ENRT_MTHD_RL
                         ,P_CRNT_ENRT_PRCLDS_CHG_FLAG      => r_LPR1.INFORMATION12
                         ,P_DFLT_ENRT_CD      => r_LPR1.INFORMATION15
                         ,P_DFLT_ENRT_RL      => l_DFLT_ENRT_RL
                         ,P_DFLT_FLAG      => r_LPR1.INFORMATION13
                         ,P_ENRT_CD      => r_LPR1.INFORMATION16
                         ,P_ENRT_MTHD_CD      => r_LPR1.INFORMATION17
                         ,P_ENRT_RL      => l_ENRT_RL
                         ,P_LER_CHG_PLIP_ENRT_ID      => l_ler_chg_plip_enrt_id
                         ,P_LER_ID      => l_LER_ID
                         ,P_LPR_ATTRIBUTE1      => r_LPR1.INFORMATION111
                         ,P_LPR_ATTRIBUTE10      => r_LPR1.INFORMATION120
                         ,P_LPR_ATTRIBUTE11      => r_LPR1.INFORMATION121
                         ,P_LPR_ATTRIBUTE12      => r_LPR1.INFORMATION122
                         ,P_LPR_ATTRIBUTE13      => r_LPR1.INFORMATION123
                         ,P_LPR_ATTRIBUTE14      => r_LPR1.INFORMATION124
                         ,P_LPR_ATTRIBUTE15      => r_LPR1.INFORMATION125
                         ,P_LPR_ATTRIBUTE16      => r_LPR1.INFORMATION126
                         ,P_LPR_ATTRIBUTE17      => r_LPR1.INFORMATION127
                         ,P_LPR_ATTRIBUTE18      => r_LPR1.INFORMATION128
                         ,P_LPR_ATTRIBUTE19      => r_LPR1.INFORMATION129
                         ,P_LPR_ATTRIBUTE2      => r_LPR1.INFORMATION112
                         ,P_LPR_ATTRIBUTE20      => r_LPR1.INFORMATION130
                         ,P_LPR_ATTRIBUTE21      => r_LPR1.INFORMATION131
                         ,P_LPR_ATTRIBUTE22      => r_LPR1.INFORMATION132
                         ,P_LPR_ATTRIBUTE23      => r_LPR1.INFORMATION133
                         ,P_LPR_ATTRIBUTE24      => r_LPR1.INFORMATION134
                         ,P_LPR_ATTRIBUTE25      => r_LPR1.INFORMATION135
                         ,P_LPR_ATTRIBUTE26      => r_LPR1.INFORMATION136
                         ,P_LPR_ATTRIBUTE27      => r_LPR1.INFORMATION137
                         ,P_LPR_ATTRIBUTE28      => r_LPR1.INFORMATION138
                         ,P_LPR_ATTRIBUTE29      => r_LPR1.INFORMATION139
                         ,P_LPR_ATTRIBUTE3      => r_LPR1.INFORMATION113
                         ,P_LPR_ATTRIBUTE30      => r_LPR1.INFORMATION140
                         ,P_LPR_ATTRIBUTE4      => r_LPR1.INFORMATION114
                         ,P_LPR_ATTRIBUTE5      => r_LPR1.INFORMATION115
                         ,P_LPR_ATTRIBUTE6      => r_LPR1.INFORMATION116
                         ,P_LPR_ATTRIBUTE7      => r_LPR1.INFORMATION117
                         ,P_LPR_ATTRIBUTE8      => r_LPR1.INFORMATION118
                         ,P_LPR_ATTRIBUTE9      => r_LPR1.INFORMATION119
                         ,P_LPR_ATTRIBUTE_CATEGORY      => r_LPR1.INFORMATION110
                         ,P_PLIP_ID      => l_PLIP_ID
                         ,P_STL_ELIG_CANT_CHG_FLAG      => r_LPR1.INFORMATION14
             ,P_TCO_CHG_ENRT_CD      => r_LPR1.INFORMATION11
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_ler_chg_plip_enrt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'LER_CHG_PLIP_ENRT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_LPR1.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_LER_CHG_PLIP_ENRT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LPR1_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_LER_CHG_PLIP_ENRT_F UPDATE_LER_CHG_PLAN_ENRT ',30);
            --UPD START
                  hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
                  --
                  if l_update then
                    --
                    l_datetrack_mode := r_LPR1.datetrack_mode ;
                    --
                    get_dt_modes(
                      p_effective_date        => l_process_date,
                      p_effective_end_date    => r_LPR1.information3,
                      p_effective_start_date  => r_LPR1.information2,
                      p_dml_operation         => r_LPR1.dml_operation,
                      p_datetrack_mode        => l_datetrack_mode );
                  --    p_update                => l_update
                    --
                    l_effective_date := l_process_date;
                    l_LER_CHG_PLIP_ENRT_ID   := r_LPR1.information1;
                    l_object_version_number := r_LPR1.information265;
                    --
                  end if;
                  --
                  hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
                  --
                  IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END

           BEN_LER_CHG_PLAN_ENRT_API.UPDATE_LER_CHG_PLAN_ENRT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_AUTO_ENRT_MTHD_RL      => l_AUTO_ENRT_MTHD_RL
                          ,P_CRNT_ENRT_PRCLDS_CHG_FLAG      => r_LPR1.INFORMATION12
                          ,P_DFLT_ENRT_CD      => r_LPR1.INFORMATION15
                          ,P_DFLT_ENRT_RL      => l_DFLT_ENRT_RL
                          ,P_DFLT_FLAG      => r_LPR1.INFORMATION13
                          ,P_ENRT_CD      => r_LPR1.INFORMATION16
                          ,P_ENRT_MTHD_CD      => r_LPR1.INFORMATION17
                          ,P_ENRT_RL      => l_ENRT_RL
                          ,P_LER_CHG_PLIP_ENRT_ID      => l_ler_chg_plip_enrt_id
                          ,P_LER_ID      => l_LER_ID
                          ,P_LPR_ATTRIBUTE1      => r_LPR1.INFORMATION111
                          ,P_LPR_ATTRIBUTE10      => r_LPR1.INFORMATION120
                          ,P_LPR_ATTRIBUTE11      => r_LPR1.INFORMATION121
                          ,P_LPR_ATTRIBUTE12      => r_LPR1.INFORMATION122
                          ,P_LPR_ATTRIBUTE13      => r_LPR1.INFORMATION123
                          ,P_LPR_ATTRIBUTE14      => r_LPR1.INFORMATION124
                          ,P_LPR_ATTRIBUTE15      => r_LPR1.INFORMATION125
                          ,P_LPR_ATTRIBUTE16      => r_LPR1.INFORMATION126
                          ,P_LPR_ATTRIBUTE17      => r_LPR1.INFORMATION127
                          ,P_LPR_ATTRIBUTE18      => r_LPR1.INFORMATION128
                          ,P_LPR_ATTRIBUTE19      => r_LPR1.INFORMATION129
                          ,P_LPR_ATTRIBUTE2      => r_LPR1.INFORMATION112
                          ,P_LPR_ATTRIBUTE20      => r_LPR1.INFORMATION130
                          ,P_LPR_ATTRIBUTE21      => r_LPR1.INFORMATION131
                          ,P_LPR_ATTRIBUTE22      => r_LPR1.INFORMATION132
                          ,P_LPR_ATTRIBUTE23      => r_LPR1.INFORMATION133
                          ,P_LPR_ATTRIBUTE24      => r_LPR1.INFORMATION134
                          ,P_LPR_ATTRIBUTE25      => r_LPR1.INFORMATION135
                          ,P_LPR_ATTRIBUTE26      => r_LPR1.INFORMATION136
                          ,P_LPR_ATTRIBUTE27      => r_LPR1.INFORMATION137
                          ,P_LPR_ATTRIBUTE28      => r_LPR1.INFORMATION138
                          ,P_LPR_ATTRIBUTE29      => r_LPR1.INFORMATION139
                          ,P_LPR_ATTRIBUTE3      => r_LPR1.INFORMATION113
                          ,P_LPR_ATTRIBUTE30      => r_LPR1.INFORMATION140
                          ,P_LPR_ATTRIBUTE4      => r_LPR1.INFORMATION114
                          ,P_LPR_ATTRIBUTE5      => r_LPR1.INFORMATION115
                          ,P_LPR_ATTRIBUTE6      => r_LPR1.INFORMATION116
                          ,P_LPR_ATTRIBUTE7      => r_LPR1.INFORMATION117
                          ,P_LPR_ATTRIBUTE8      => r_LPR1.INFORMATION118
                          ,P_LPR_ATTRIBUTE9      => r_LPR1.INFORMATION119
                          ,P_LPR_ATTRIBUTE_CATEGORY      => r_LPR1.INFORMATION110
                          ,P_PLIP_ID      => l_PLIP_ID
                          ,P_STL_ELIG_CANT_CHG_FLAG      => r_LPR1.INFORMATION14
             ,P_TCO_CHG_ENRT_CD      => r_LPR1.INFORMATION11
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
            ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           end if;  -- l_update
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_LPR1.information3) then
             --
             BEN_LER_CHG_PLAN_ENRT_API.delete_LER_CHG_PLAN_ENRT(
                --
                p_validate                       => false
                ,p_ler_chg_plip_enrt_id                   => l_ler_chg_plip_enrt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
              --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'LPR1',r_LPR1.information5 );
     --
 end create_LPR1_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_CPP_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_CPP_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_AUTO_ENRT_MTHD_RL  number;
   l_CMBN_PLIP_ID  number;
   l_DFLT_ENRT_DET_RL  number;
   l_DFLT_TO_ASN_PNDG_CTFN_RL  number;
   l_ENRT_CVG_END_DT_RL  number;
   l_ENRT_CVG_STRT_DT_RL  number;
   l_ENRT_RL  number;
   l_MN_CVG_RL  number;
   l_MX_CVG_RL  number;
   l_PGM_ID  number;
   l_PL_ID  number;
   l_POSTELCN_EDIT_RL  number;
   l_PRORT_PRTL_YR_CVG_RSTRN_RL  number;
   l_RT_END_DT_RL  number;
   l_RT_STRT_DT_RL  number;
   l_VRFY_FMLY_MMBR_RL  number;
   cursor c_unique_CPP(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_PLIP_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by cpe.information1, cpe.information2 /* Bug 5076363 */;
   --
   --
   cursor c_CPP_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_CPP(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_CPP_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     CPP.plip_id new_value
   from BEN_PLIP_F CPP
   where
   -- nvl(CPP.CMBN_PLIP_ID,-999)     = nvl(l_CMBN_PLIP_ID,-999)  and
   CPP.PGM_ID     = l_PGM_ID  and
   CPP.PL_ID     = l_PL_ID  and
   CPP.business_group_id  = c_business_group_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and   CPP.plip_id  <> c_new_pk_id
   and exists ( select null
                from BEN_PLIP_F CPP1
                where
                -- nvl(CPP1.CMBN_PLIP_ID,-999)     = nvl(l_CMBN_PLIP_ID,-999)  and
                CPP1.PGM_ID     = l_PGM_ID  and
                CPP1.PL_ID     = l_PL_ID  and
                CPP1.business_group_id  = c_business_group_id
                and   CPP1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_PLIP_F CPP2
                where
                -- nvl(CPP2.CMBN_PLIP_ID,-999)     = nvl(l_CMBN_PLIP_ID,-999)  and
                CPP2.PGM_ID     = l_PGM_ID  and
                CPP2.PL_ID     = l_PL_ID  and
                CPP2.business_group_id  = c_business_group_id
                and   CPP2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
    --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_CPP                     c_CPP%rowtype;
   l_plip_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_CPP_unique in c_unique_CPP('CPP') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_CPP_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_CPP_unique.table_route_id '||r_CPP_unique.table_route_id,10);
       hr_utility.set_location(' r_CPP_unique.information1 '||r_CPP_unique.information1,10);
       hr_utility.set_location( 'r_CPP_unique.information2 '||r_CPP_unique.information2,10);
       hr_utility.set_location( 'r_CPP_unique.information3 '||r_CPP_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
        open c_CPP(r_CPP_unique.table_route_id,
                r_CPP_unique.information1,
                r_CPP_unique.information2,
                r_CPP_unique.information3 ) ;
       --
       fetch c_CPP into r_CPP ;
       --
       close c_CPP ;
       --
       l_process_date := p_effective_date;
       l_dml_operation:= r_CPP_unique.dml_operation ;
       l_AUTO_ENRT_MTHD_RL := get_fk('FORMULA_ID', r_CPP.INFORMATION266,l_dml_operation );
       l_CMBN_PLIP_ID := get_fk('CMBN_PLIP_ID', r_CPP.INFORMATION239,l_dml_operation );
       l_DFLT_ENRT_DET_RL := get_fk('FORMULA_ID', r_CPP.INFORMATION264,l_dml_operation );
       l_DFLT_TO_ASN_PNDG_CTFN_RL := get_fk('FORMULA_ID', r_CPP.INFORMATION272,l_dml_operation );
       l_ENRT_CVG_END_DT_RL := get_fk('FORMULA_ID', r_CPP.INFORMATION269,l_dml_operation );
       l_ENRT_CVG_STRT_DT_RL := get_fk('FORMULA_ID', r_CPP.INFORMATION268,l_dml_operation );
       l_ENRT_RL := get_fk('FORMULA_ID', r_CPP.INFORMATION267,l_dml_operation );
       l_MN_CVG_RL := get_fk('FORMULA_ID', r_CPP.INFORMATION273,l_dml_operation );
       l_MX_CVG_RL := get_fk('FORMULA_ID', r_CPP.INFORMATION276,l_dml_operation );
       l_PGM_ID := get_fk('PGM_ID', r_CPP.INFORMATION260,l_dml_operation );
       l_PL_ID := get_fk('PL_ID', r_CPP.INFORMATION261,l_dml_operation );
       l_POSTELCN_EDIT_RL := get_fk('FORMULA_ID', r_CPP.INFORMATION257);
       l_PRORT_PRTL_YR_CVG_RSTRN_RL := get_fk('FORMULA_ID', r_CPP.INFORMATION278,l_dml_operation );
       l_RT_END_DT_RL := get_fk('FORMULA_ID', r_CPP.INFORMATION271,l_dml_operation );
       l_RT_STRT_DT_RL := get_fk('FORMULA_ID', r_CPP.INFORMATION270,l_dml_operation );
       l_VRFY_FMLY_MMBR_RL := get_fk('FORMULA_ID', r_CPP.INFORMATION279,l_dml_operation );
       --
             l_update := false;
             --
             if l_dml_operation = 'UPDATE' then
               --
               l_object_found_in_target := TRUE;
               --
               if l_process_date between r_CPP_unique.information2 and r_CPP_unique.information3 then
                     l_update := true;
                     if r_CPP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                       or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'PLIP_ID'
                     then
                        BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PLIP_ID' ;
                        BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_CPP_unique.information1 ;
                        BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_CPP_unique.information1 ;
                        BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                        BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_CPP_unique.table_route_id;
                        --
                        -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                        --
                        BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                        --
         --DOUBT              log_data('CPP',l_new_value,l_prefix || r_CPP_unique.name|| l_suffix,'REUSED');
                        --
                     end if ;
                     hr_utility.set_location( 'found record for update',10);
                 --
               else
                 --
                 l_update := false;
                 --
               end if;
             else
               --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_CPP_min_max_dates(r_CPP_unique.table_route_id, r_CPP_unique.information1 ) ;
       fetch c_CPP_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_CPP_unique.information2);
    /*   open c_CPP(r_CPP_unique.table_route_id,
                r_CPP_unique.information1,
                r_CPP_unique.information2,
                r_CPP_unique.information3 ) ;
       --
       fetch c_CPP into r_CPP ;
       --
       close c_CPP ; */
       --
       if p_reuse_object_flag = 'Y' then
         if c_CPP_min_max_dates%found then
           -- cursor to find the object
           open c_find_CPP_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_plip_id, -999)  ) ;
           fetch c_find_CPP_in_target into l_new_value ;
           if c_find_CPP_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_PLIP_F',
                  p_base_key_column => 'PLIP_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_CPP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'PLIP_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PLIP_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_CPP_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_CPP_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_CPP_in_target ;
         --
         end if;
       end if ;
       --
       close c_CPP_min_max_dates ;
     end if; --if p_dml_operation
               --
               if not l_object_found_in_target OR l_update  then
         --
         l_current_pk_id := r_CPP.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_CPP.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

     if l_first_rec and not l_update then

           -- Call Create routine.
           hr_utility.set_location(' BEN_PLIP_F CREATE_PLAN_IN_PROGRAM ',20);
           BEN_PLAN_IN_PROGRAM_API.CREATE_PLAN_IN_PROGRAM(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ALWS_UNRSTRCTD_ENRT_FLAG      => r_CPP.INFORMATION15
                          ,P_AUTO_ENRT_MTHD_RL      => l_AUTO_ENRT_MTHD_RL
                          ,P_BNFT_OR_OPTION_RSTRCTN_CD      => r_CPP.INFORMATION36
                          ,P_CMBN_PLIP_ID      => l_CMBN_PLIP_ID
                          ,P_CPP_ATTRIBUTE1      => r_CPP.INFORMATION111
                          ,P_CPP_ATTRIBUTE10      => r_CPP.INFORMATION120
                          ,P_CPP_ATTRIBUTE11      => r_CPP.INFORMATION121
                          ,P_CPP_ATTRIBUTE12      => r_CPP.INFORMATION122
                          ,P_CPP_ATTRIBUTE13      => r_CPP.INFORMATION123
                          ,P_CPP_ATTRIBUTE14      => r_CPP.INFORMATION124
                          ,P_CPP_ATTRIBUTE15      => r_CPP.INFORMATION125
                          ,P_CPP_ATTRIBUTE16      => r_CPP.INFORMATION126
                          ,P_CPP_ATTRIBUTE17      => r_CPP.INFORMATION127
                          ,P_CPP_ATTRIBUTE18      => r_CPP.INFORMATION128
                          ,P_CPP_ATTRIBUTE19      => r_CPP.INFORMATION129
                          ,P_CPP_ATTRIBUTE2      => r_CPP.INFORMATION112
                          ,P_CPP_ATTRIBUTE20      => r_CPP.INFORMATION130
                          ,P_CPP_ATTRIBUTE21      => r_CPP.INFORMATION131
                          ,P_CPP_ATTRIBUTE22      => r_CPP.INFORMATION132
                          ,P_CPP_ATTRIBUTE23      => r_CPP.INFORMATION133
                          ,P_CPP_ATTRIBUTE24      => r_CPP.INFORMATION134
                          ,P_CPP_ATTRIBUTE25      => r_CPP.INFORMATION135
                          ,P_CPP_ATTRIBUTE26      => r_CPP.INFORMATION136
                          ,P_CPP_ATTRIBUTE27      => r_CPP.INFORMATION137
                          ,P_CPP_ATTRIBUTE28      => r_CPP.INFORMATION138
                          ,P_CPP_ATTRIBUTE29      => r_CPP.INFORMATION139
                          ,P_CPP_ATTRIBUTE3      => r_CPP.INFORMATION113
                          ,P_CPP_ATTRIBUTE30      => r_CPP.INFORMATION140
                          ,P_CPP_ATTRIBUTE4      => r_CPP.INFORMATION114
                          ,P_CPP_ATTRIBUTE5      => r_CPP.INFORMATION115
                          ,P_CPP_ATTRIBUTE6      => r_CPP.INFORMATION116
                          ,P_CPP_ATTRIBUTE7      => r_CPP.INFORMATION117
                          ,P_CPP_ATTRIBUTE8      => r_CPP.INFORMATION118
                          ,P_CPP_ATTRIBUTE9      => r_CPP.INFORMATION119
                          ,P_CPP_ATTRIBUTE_CATEGORY      => r_CPP.INFORMATION110
                          ,P_CVG_INCR_R_DECR_ONLY_CD      => r_CPP.INFORMATION28
                          ,P_DFLT_ENRT_CD      => r_CPP.INFORMATION21
                          ,P_DFLT_ENRT_DET_RL      => l_DFLT_ENRT_DET_RL
                          ,P_DFLT_FLAG      => r_CPP.INFORMATION13
                          ,P_DFLT_TO_ASN_PNDG_CTFN_CD      => r_CPP.INFORMATION29
                          ,P_DFLT_TO_ASN_PNDG_CTFN_RL      => l_DFLT_TO_ASN_PNDG_CTFN_RL
                          ,P_DRVBL_FCTR_APLS_RTS_FLAG      => r_CPP.INFORMATION16
                          ,P_DRVBL_FCTR_PRTN_ELIG_FLAG      => r_CPP.INFORMATION17
                          ,P_ELIG_APLS_FLAG      => r_CPP.INFORMATION18
                          ,P_ENRT_CD      => r_CPP.INFORMATION22
                          ,P_ENRT_CVG_END_DT_CD      => r_CPP.INFORMATION25
                          ,P_ENRT_CVG_END_DT_RL      => l_ENRT_CVG_END_DT_RL
                          ,P_ENRT_CVG_STRT_DT_CD      => r_CPP.INFORMATION24
                          ,P_ENRT_CVG_STRT_DT_RL      => l_ENRT_CVG_STRT_DT_RL
                          ,P_ENRT_MTHD_CD      => r_CPP.INFORMATION23
                          ,P_ENRT_RL      => l_ENRT_RL
                          ,P_IVR_IDENT      => r_CPP.INFORMATION141
                          ,P_MN_CVG_AMT      => r_CPP.INFORMATION293
                          ,P_MN_CVG_RL      => l_MN_CVG_RL
                          ,P_MX_CVG_ALWD_AMT      => r_CPP.INFORMATION294
                          ,P_MX_CVG_INCR_ALWD_AMT      => r_CPP.INFORMATION295
                          ,P_MX_CVG_INCR_WCF_ALWD_AMT      => r_CPP.INFORMATION296
                          ,P_MX_CVG_MLT_INCR_NUM      => r_CPP.INFORMATION274
                          ,P_MX_CVG_MLT_INCR_WCF_NUM      => r_CPP.INFORMATION275
                          ,P_MX_CVG_RL      => l_MX_CVG_RL
                          ,P_MX_CVG_WCFN_AMT      => r_CPP.INFORMATION297
                          ,P_MX_CVG_WCFN_MLT_NUM      => r_CPP.INFORMATION277
                          ,P_NO_MN_CVG_AMT_APLS_FLAG      => r_CPP.INFORMATION30
                          ,P_NO_MN_CVG_INCR_APLS_FLAG      => r_CPP.INFORMATION31
                          ,P_NO_MX_CVG_AMT_APLS_FLAG      => r_CPP.INFORMATION32
                          ,P_NO_MX_CVG_INCR_APLS_FLAG      => r_CPP.INFORMATION33
                          ,P_ORDR_NUM      => r_CPP.INFORMATION263
                          ,P_PER_CVRD_CD      => r_CPP.INFORMATION38
                          ,P_PGM_ID      => l_PGM_ID
                          ,P_PLIP_ID      => l_plip_id
                          ,P_PLIP_STAT_CD      => r_CPP.INFORMATION14
                          ,P_PL_ID      => l_PL_ID
                          ,P_POSTELCN_EDIT_RL      => l_POSTELCN_EDIT_RL
                          ,P_PRORT_PRTL_YR_CVG_RSTRN_CD      => r_CPP.INFORMATION35
                          ,P_PRORT_PRTL_YR_CVG_RSTRN_RL      => l_PRORT_PRTL_YR_CVG_RSTRN_RL
                          ,P_PRTN_ELIG_OVRID_ALWD_FLAG      => r_CPP.INFORMATION19
                          ,P_RT_END_DT_CD      => r_CPP.INFORMATION27
                          ,P_RT_END_DT_RL      => l_RT_END_DT_RL
                          ,P_RT_STRT_DT_CD      => r_CPP.INFORMATION26
                          ,P_RT_STRT_DT_RL      => l_RT_STRT_DT_RL
                          ,P_SHORT_CODE      => r_CPP.INFORMATION11
                          ,P_SHORT_NAME      => r_CPP.INFORMATION12
                          ,P_TRK_INELIG_PER_FLAG      => r_CPP.INFORMATION20
                          ,P_UNSSPND_ENRT_CD      => r_CPP.INFORMATION34
                          ,P_URL_REF_NAME      => r_CPP.INFORMATION185
                          ,P_VRFY_FMLY_MMBR_CD      => r_CPP.INFORMATION37
             ,P_VRFY_FMLY_MMBR_RL      => l_VRFY_FMLY_MMBR_RL
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_plip_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'PLIP_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_CPP.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_PLIP_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_CPP_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
            hr_utility.set_location(' BEN_PLIP_F UPDATE_PLAN_IN_PROGRAM ',30);
            --UPD START
                   hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
                   --
                   if l_update then
                     --
                     l_datetrack_mode := r_CPP.datetrack_mode ;
                     --
                     get_dt_modes(
                       p_effective_date        => l_process_date,
                       p_effective_end_date    => r_CPP.information3,
                       p_effective_start_date  => r_CPP.information2,
                       p_dml_operation         => r_CPP.dml_operation,
                       p_datetrack_mode        => l_datetrack_mode );
                   --    p_update                => l_update
                     --
                     l_effective_date := l_process_date;
                     l_PLIP_ID   := r_CPP.information1;
                     l_object_version_number := r_CPP.information265;
                     --
                   end if;
                   --
                   hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
                   --
                   IF l_update OR l_dml_operation <> 'UPDATE' THEN
                   --UPD END


           BEN_PLAN_IN_PROGRAM_API.UPDATE_PLAN_IN_PROGRAM(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
            ,P_ALWS_UNRSTRCTD_ENRT_FLAG      => r_CPP.INFORMATION15
                         ,P_AUTO_ENRT_MTHD_RL      => l_AUTO_ENRT_MTHD_RL
                         ,P_BNFT_OR_OPTION_RSTRCTN_CD      => r_CPP.INFORMATION36
                         ,P_CMBN_PLIP_ID      => l_CMBN_PLIP_ID
                         ,P_CPP_ATTRIBUTE1      => r_CPP.INFORMATION111
                         ,P_CPP_ATTRIBUTE10      => r_CPP.INFORMATION120
                         ,P_CPP_ATTRIBUTE11      => r_CPP.INFORMATION121
                         ,P_CPP_ATTRIBUTE12      => r_CPP.INFORMATION122
                         ,P_CPP_ATTRIBUTE13      => r_CPP.INFORMATION123
                         ,P_CPP_ATTRIBUTE14      => r_CPP.INFORMATION124
                         ,P_CPP_ATTRIBUTE15      => r_CPP.INFORMATION125
                         ,P_CPP_ATTRIBUTE16      => r_CPP.INFORMATION126
                         ,P_CPP_ATTRIBUTE17      => r_CPP.INFORMATION127
                         ,P_CPP_ATTRIBUTE18      => r_CPP.INFORMATION128
                         ,P_CPP_ATTRIBUTE19      => r_CPP.INFORMATION129
                         ,P_CPP_ATTRIBUTE2      => r_CPP.INFORMATION112
                         ,P_CPP_ATTRIBUTE20      => r_CPP.INFORMATION130
                         ,P_CPP_ATTRIBUTE21      => r_CPP.INFORMATION131
                         ,P_CPP_ATTRIBUTE22      => r_CPP.INFORMATION132
                         ,P_CPP_ATTRIBUTE23      => r_CPP.INFORMATION133
                         ,P_CPP_ATTRIBUTE24      => r_CPP.INFORMATION134
                         ,P_CPP_ATTRIBUTE25      => r_CPP.INFORMATION135
                         ,P_CPP_ATTRIBUTE26      => r_CPP.INFORMATION136
                         ,P_CPP_ATTRIBUTE27      => r_CPP.INFORMATION137
                         ,P_CPP_ATTRIBUTE28      => r_CPP.INFORMATION138
                         ,P_CPP_ATTRIBUTE29      => r_CPP.INFORMATION139
                         ,P_CPP_ATTRIBUTE3      => r_CPP.INFORMATION113
                         ,P_CPP_ATTRIBUTE30      => r_CPP.INFORMATION140
                         ,P_CPP_ATTRIBUTE4      => r_CPP.INFORMATION114
                         ,P_CPP_ATTRIBUTE5      => r_CPP.INFORMATION115
                         ,P_CPP_ATTRIBUTE6      => r_CPP.INFORMATION116
                         ,P_CPP_ATTRIBUTE7      => r_CPP.INFORMATION117
                         ,P_CPP_ATTRIBUTE8      => r_CPP.INFORMATION118
                         ,P_CPP_ATTRIBUTE9      => r_CPP.INFORMATION119
                         ,P_CPP_ATTRIBUTE_CATEGORY      => r_CPP.INFORMATION110
                         ,P_CVG_INCR_R_DECR_ONLY_CD      => r_CPP.INFORMATION28
                         ,P_DFLT_ENRT_CD      => r_CPP.INFORMATION21
                         ,P_DFLT_ENRT_DET_RL      => l_DFLT_ENRT_DET_RL
                         ,P_DFLT_FLAG      => r_CPP.INFORMATION13
                         ,P_DFLT_TO_ASN_PNDG_CTFN_CD      => r_CPP.INFORMATION29
                         ,P_DFLT_TO_ASN_PNDG_CTFN_RL      => l_DFLT_TO_ASN_PNDG_CTFN_RL
                         ,P_DRVBL_FCTR_APLS_RTS_FLAG      => r_CPP.INFORMATION16
                         ,P_DRVBL_FCTR_PRTN_ELIG_FLAG      => r_CPP.INFORMATION17
                         ,P_ELIG_APLS_FLAG      => r_CPP.INFORMATION18
                         ,P_ENRT_CD      => r_CPP.INFORMATION22
                         ,P_ENRT_CVG_END_DT_CD      => r_CPP.INFORMATION25
                         ,P_ENRT_CVG_END_DT_RL      => l_ENRT_CVG_END_DT_RL
                         ,P_ENRT_CVG_STRT_DT_CD      => r_CPP.INFORMATION24
                         ,P_ENRT_CVG_STRT_DT_RL      => l_ENRT_CVG_STRT_DT_RL
                         ,P_ENRT_MTHD_CD      => r_CPP.INFORMATION23
                         ,P_ENRT_RL      => l_ENRT_RL
                         ,P_IVR_IDENT      => r_CPP.INFORMATION141
                         ,P_MN_CVG_AMT      => r_CPP.INFORMATION293
                         ,P_MN_CVG_RL      => l_MN_CVG_RL
                         ,P_MX_CVG_ALWD_AMT      => r_CPP.INFORMATION294
                         ,P_MX_CVG_INCR_ALWD_AMT      => r_CPP.INFORMATION295
                         ,P_MX_CVG_INCR_WCF_ALWD_AMT      => r_CPP.INFORMATION296
                         ,P_MX_CVG_MLT_INCR_NUM      => r_CPP.INFORMATION274
                         ,P_MX_CVG_MLT_INCR_WCF_NUM      => r_CPP.INFORMATION275
                         ,P_MX_CVG_RL      => l_MX_CVG_RL
                         ,P_MX_CVG_WCFN_AMT      => r_CPP.INFORMATION297
                         ,P_MX_CVG_WCFN_MLT_NUM      => r_CPP.INFORMATION277
                         ,P_NO_MN_CVG_AMT_APLS_FLAG      => r_CPP.INFORMATION30
                         ,P_NO_MN_CVG_INCR_APLS_FLAG      => r_CPP.INFORMATION31
                         ,P_NO_MX_CVG_AMT_APLS_FLAG      => r_CPP.INFORMATION32
                         ,P_NO_MX_CVG_INCR_APLS_FLAG      => r_CPP.INFORMATION33
                         ,P_ORDR_NUM      => r_CPP.INFORMATION263
                         ,P_PER_CVRD_CD      => r_CPP.INFORMATION38
                         ,P_PGM_ID      => l_PGM_ID
                         ,P_PLIP_ID      => l_plip_id
                         ,P_PLIP_STAT_CD      => r_CPP.INFORMATION14
                         ,P_PL_ID      => l_PL_ID
                         ,P_POSTELCN_EDIT_RL      => l_POSTELCN_EDIT_RL
                         ,P_PRORT_PRTL_YR_CVG_RSTRN_CD      => r_CPP.INFORMATION35
                         ,P_PRORT_PRTL_YR_CVG_RSTRN_RL      => l_PRORT_PRTL_YR_CVG_RSTRN_RL
                         ,P_PRTN_ELIG_OVRID_ALWD_FLAG      => r_CPP.INFORMATION19
                         ,P_RT_END_DT_CD      => r_CPP.INFORMATION27
                         ,P_RT_END_DT_RL      => l_RT_END_DT_RL
                         ,P_RT_STRT_DT_CD      => r_CPP.INFORMATION26
                         ,P_RT_STRT_DT_RL      => l_RT_STRT_DT_RL
                         ,P_SHORT_CODE      => r_CPP.INFORMATION11
                         ,P_SHORT_NAME      => r_CPP.INFORMATION12
                         ,P_TRK_INELIG_PER_FLAG      => r_CPP.INFORMATION20
                         ,P_UNSSPND_ENRT_CD      => r_CPP.INFORMATION34
                         ,P_URL_REF_NAME      => r_CPP.INFORMATION185
                         ,P_VRFY_FMLY_MMBR_CD      => r_CPP.INFORMATION37
             ,P_VRFY_FMLY_MMBR_RL      => l_VRFY_FMLY_MMBR_RL
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
                    ,P_DATETRACK_MODE        => l_datetrack_mode
           );
         --
            end if;  -- l_update
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_CPP.information3) then
             --
             BEN_PLAN_IN_PROGRAM_API.delete_PLAN_IN_PROGRAM(
                --
                p_validate                       => false
                ,p_plip_id                   => l_plip_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'CPP',r_cpp.information5 );
     --
 end create_CPP_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_PYD_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_PYD_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_CTFN_RQD_WHEN_RL  number;
   l_PTIP_ID  number;
   l_DPNT_CVG_CTFN_TYP_CD   varchar2(30);
   l_RLSHP_TYP_CD            varchar2(30);
   --
   cursor c_unique_PYD(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
 ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_PTIP_DPNT_CVG_CTFN_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_PYD_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_PYD(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_PYD_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     PYD.ptip_dpnt_cvg_ctfn_id new_value
   from BEN_PTIP_DPNT_CVG_CTFN_F PYD
   where
   PYD.PTIP_ID     = l_PTIP_ID  and
   PYD.DPNT_CVG_CTFN_TYP_CD = l_DPNT_CVG_CTFN_TYP_CD and
   nvl(PYD.RLSHP_TYP_CD,-999)         =    nvl(l_RLSHP_TYP_CD,-999) and
   PYD.business_group_id  = c_business_group_id
   and   PYD.ptip_dpnt_cvg_ctfn_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_PTIP_DPNT_CVG_CTFN_F PYD1
                where
                PYD1.PTIP_ID     = l_PTIP_ID  and
                PYD1.DPNT_CVG_CTFN_TYP_CD = l_DPNT_CVG_CTFN_TYP_CD and
                nvl(PYD1.RLSHP_TYP_CD,-999)         =    nvl(l_RLSHP_TYP_CD,-999) and
                PYD1.business_group_id  = c_business_group_id
                and   PYD1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_PTIP_DPNT_CVG_CTFN_F PYD2
                where
                PYD2.PTIP_ID     = l_PTIP_ID  and
                PYD2.DPNT_CVG_CTFN_TYP_CD = l_DPNT_CVG_CTFN_TYP_CD and
                nvl(PYD2.RLSHP_TYP_CD,-999)         =    nvl(l_RLSHP_TYP_CD,-999) and
                PYD2.business_group_id  = c_business_group_id
                and   PYD2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
    --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_PYD                     c_PYD%rowtype;
   l_ptip_dpnt_cvg_ctfn_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_PYD_unique in c_unique_PYD('PYD') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_PYD_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_PYD_unique.table_route_id '||r_PYD_unique.table_route_id,10);
       hr_utility.set_location(' r_PYD_unique.information1 '||r_PYD_unique.information1,10);
       hr_utility.set_location( 'r_PYD_unique.information2 '||r_PYD_unique.information2,10);
       hr_utility.set_location( 'r_PYD_unique.information3 '||r_PYD_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
         open c_PYD(r_PYD_unique.table_route_id,
                r_PYD_unique.information1,
                r_PYD_unique.information2,
                r_PYD_unique.information3 ) ;
       --
       fetch c_PYD into r_PYD ;
       --
       close c_PYD ;
       --
       l_dml_operation:= r_PYD_unique.dml_operation ;
       l_CTFN_RQD_WHEN_RL := get_fk('FORMULA_ID', r_PYD.INFORMATION257,l_dml_operation );
       l_PTIP_ID := get_fk('PTIP_ID', r_PYD.INFORMATION259,l_dml_operation );
       l_DPNT_CVG_CTFN_TYP_CD :=  r_PYD.information12 ;
       l_RLSHP_TYP_CD := r_PYD.information48 ;
       --
             l_update := false;
             l_process_date := p_effective_date;
             --
             if l_dml_operation = 'UPDATE' then
               --
               l_object_found_in_target := TRUE;
               --
               if l_process_date between r_PYD_unique.information2 and r_PYD_unique.information3 then
                     l_update := true;
                     if r_PYD_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                       or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'PTIP_DPNT_CVG_CTFN_ID'
                     then
                        BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PTIP_DPNT_CVG_CTFN_ID' ;
                        BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_PYD_unique.information1 ;
                        BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_PYD_unique.information1 ;
                        BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                        BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PYD_unique.table_route_id;
                        --
                        -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                        --
                        BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                        --
         --DOUBT              log_data('PYD',l_new_value,l_prefix || r_PYD_unique.name|| l_suffix,'REUSED');
                        --
                     end if ;
                     hr_utility.set_location( 'found record for update',10);
                 --
               else
                 --
                 l_update := false;
                 --
               end if;
             else
               --
               --UPD END

       l_min_esd := null ;
       l_max_eed := null ;
       open c_PYD_min_max_dates(r_PYD_unique.table_route_id, r_PYD_unique.information1 ) ;
       fetch c_PYD_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_PYD_unique.information2);
/*       open c_PYD(r_PYD_unique.table_route_id,
                r_PYD_unique.information1,
                r_PYD_unique.information2,
                r_PYD_unique.information3 ) ;
       --
       fetch c_PYD into r_PYD ;
       --
       close c_PYD ; */
       --

       --
       if p_reuse_object_flag = 'Y' then
         if c_PYD_min_max_dates%found then
           -- cursor to find the object
           open c_find_PYD_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_ptip_dpnt_cvg_ctfn_id, -999)  ) ;
           fetch c_find_PYD_in_target into l_new_value ;
           if c_find_PYD_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_PTIP_DPNT_CVG_CTFN_F',
                  p_base_key_column => 'PTIP_DPNT_CVG_CTFN_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_PYD_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'PTIP_DPNT_CVG_CTFN_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PTIP_DPNT_CVG_CTFN_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_PYD_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PYD_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_PYD_in_target ;
         --
         end if;
       end if ;
       --
       close c_PYD_min_max_dates ;
      end if; --if p_dml_operation
               --
               if not l_object_found_in_target OR l_update  then
         --
         l_current_pk_id := r_PYD.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_PYD.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

        if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_PTIP_DPNT_CVG_CTFN_F CREATE_PTIP_DPNT_CVG_CTFN ',20);
           BEN_PTIP_DPNT_CVG_CTFN_API.CREATE_PTIP_DPNT_CVG_CTFN(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CTFN_RQD_WHEN_RL      => l_CTFN_RQD_WHEN_RL
                          ,P_DPNT_CVG_CTFN_TYP_CD      => r_PYD.INFORMATION13
                          ,P_LACK_CTFN_SSPND_ENRT_FLAG      => r_PYD.INFORMATION12
                          ,P_PFD_FLAG      => r_PYD.INFORMATION11
                          ,P_PTIP_DPNT_CVG_CTFN_ID      => l_ptip_dpnt_cvg_ctfn_id
                          ,P_PTIP_ID      => l_PTIP_ID
                          ,P_PYD_ATTRIBUTE1      => r_PYD.INFORMATION111
                          ,P_PYD_ATTRIBUTE10      => r_PYD.INFORMATION120
                          ,P_PYD_ATTRIBUTE11      => r_PYD.INFORMATION121
                          ,P_PYD_ATTRIBUTE12      => r_PYD.INFORMATION122
                          ,P_PYD_ATTRIBUTE13      => r_PYD.INFORMATION123
                          ,P_PYD_ATTRIBUTE14      => r_PYD.INFORMATION124
                          ,P_PYD_ATTRIBUTE15      => r_PYD.INFORMATION125
                          ,P_PYD_ATTRIBUTE16      => r_PYD.INFORMATION126
                          ,P_PYD_ATTRIBUTE17      => r_PYD.INFORMATION127
                          ,P_PYD_ATTRIBUTE18      => r_PYD.INFORMATION128
                          ,P_PYD_ATTRIBUTE19      => r_PYD.INFORMATION129
                          ,P_PYD_ATTRIBUTE2      => r_PYD.INFORMATION112
                          ,P_PYD_ATTRIBUTE20      => r_PYD.INFORMATION130
                          ,P_PYD_ATTRIBUTE21      => r_PYD.INFORMATION131
                          ,P_PYD_ATTRIBUTE22      => r_PYD.INFORMATION132
                          ,P_PYD_ATTRIBUTE23      => r_PYD.INFORMATION133
                          ,P_PYD_ATTRIBUTE24      => r_PYD.INFORMATION134
                          ,P_PYD_ATTRIBUTE25      => r_PYD.INFORMATION135
                          ,P_PYD_ATTRIBUTE26      => r_PYD.INFORMATION136
                          ,P_PYD_ATTRIBUTE27      => r_PYD.INFORMATION137
                          ,P_PYD_ATTRIBUTE28      => r_PYD.INFORMATION138
                          ,P_PYD_ATTRIBUTE29      => r_PYD.INFORMATION139
                          ,P_PYD_ATTRIBUTE3      => r_PYD.INFORMATION113
                          ,P_PYD_ATTRIBUTE30      => r_PYD.INFORMATION140
                          ,P_PYD_ATTRIBUTE4      => r_PYD.INFORMATION114
                          ,P_PYD_ATTRIBUTE5      => r_PYD.INFORMATION115
                          ,P_PYD_ATTRIBUTE6      => r_PYD.INFORMATION116
                          ,P_PYD_ATTRIBUTE7      => r_PYD.INFORMATION117
                          ,P_PYD_ATTRIBUTE8      => r_PYD.INFORMATION118
                          ,P_PYD_ATTRIBUTE9      => r_PYD.INFORMATION119
                          ,P_PYD_ATTRIBUTE_CATEGORY      => r_PYD.INFORMATION110
                          ,P_RLSHP_TYP_CD      => r_PYD.INFORMATION15
             ,P_RQD_FLAG      => r_PYD.INFORMATION14
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_ptip_dpnt_cvg_ctfn_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'PTIP_DPNT_CVG_CTFN_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_PYD.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_PTIP_DPNT_CVG_CTFN_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PYD_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
            hr_utility.set_location(' BEN_PTIP_DPNT_CVG_CTFN_F UPDATE_PTIP_DPNT_CVG_CTFN ',30);
            --UPD START
                 hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
                 --
                 if l_update then
                   --
                   l_datetrack_mode := r_PYD.datetrack_mode ;
                   --
                   get_dt_modes(
                     p_effective_date        => l_process_date,
                     p_effective_end_date    => r_PYD.information3,
                     p_effective_start_date  => r_PYD.information2,
                     p_dml_operation         => r_PYD.dml_operation,
                     p_datetrack_mode        => l_datetrack_mode );
                 --    p_update                => l_update
                   --
                   l_effective_date := l_process_date;
                   l_PTIP_DPNT_CVG_CTFN_ID   := r_PYD.information1;
                   l_object_version_number := r_PYD.information265;
                   --
                 end if;
                 --
                 hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
                 --
                 IF l_update OR l_dml_operation <> 'UPDATE' THEN
                 --UPD END

           BEN_PTIP_DPNT_CVG_CTFN_API.UPDATE_PTIP_DPNT_CVG_CTFN(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CTFN_RQD_WHEN_RL      => l_CTFN_RQD_WHEN_RL
                          ,P_DPNT_CVG_CTFN_TYP_CD      => r_PYD.INFORMATION13
                          ,P_LACK_CTFN_SSPND_ENRT_FLAG      => r_PYD.INFORMATION12
                          ,P_PFD_FLAG      => r_PYD.INFORMATION11
                          ,P_PTIP_DPNT_CVG_CTFN_ID      => l_ptip_dpnt_cvg_ctfn_id
                          ,P_PTIP_ID      => l_PTIP_ID
                          ,P_PYD_ATTRIBUTE1      => r_PYD.INFORMATION111
                          ,P_PYD_ATTRIBUTE10      => r_PYD.INFORMATION120
                          ,P_PYD_ATTRIBUTE11      => r_PYD.INFORMATION121
                          ,P_PYD_ATTRIBUTE12      => r_PYD.INFORMATION122
                          ,P_PYD_ATTRIBUTE13      => r_PYD.INFORMATION123
                          ,P_PYD_ATTRIBUTE14      => r_PYD.INFORMATION124
                          ,P_PYD_ATTRIBUTE15      => r_PYD.INFORMATION125
                          ,P_PYD_ATTRIBUTE16      => r_PYD.INFORMATION126
                          ,P_PYD_ATTRIBUTE17      => r_PYD.INFORMATION127
                          ,P_PYD_ATTRIBUTE18      => r_PYD.INFORMATION128
                          ,P_PYD_ATTRIBUTE19      => r_PYD.INFORMATION129
                          ,P_PYD_ATTRIBUTE2      => r_PYD.INFORMATION112
                          ,P_PYD_ATTRIBUTE20      => r_PYD.INFORMATION130
                          ,P_PYD_ATTRIBUTE21      => r_PYD.INFORMATION131
                          ,P_PYD_ATTRIBUTE22      => r_PYD.INFORMATION132
                          ,P_PYD_ATTRIBUTE23      => r_PYD.INFORMATION133
                          ,P_PYD_ATTRIBUTE24      => r_PYD.INFORMATION134
                          ,P_PYD_ATTRIBUTE25      => r_PYD.INFORMATION135
                          ,P_PYD_ATTRIBUTE26      => r_PYD.INFORMATION136
                          ,P_PYD_ATTRIBUTE27      => r_PYD.INFORMATION137
                          ,P_PYD_ATTRIBUTE28      => r_PYD.INFORMATION138
                          ,P_PYD_ATTRIBUTE29      => r_PYD.INFORMATION139
                          ,P_PYD_ATTRIBUTE3      => r_PYD.INFORMATION113
                          ,P_PYD_ATTRIBUTE30      => r_PYD.INFORMATION140
                          ,P_PYD_ATTRIBUTE4      => r_PYD.INFORMATION114
                          ,P_PYD_ATTRIBUTE5      => r_PYD.INFORMATION115
                          ,P_PYD_ATTRIBUTE6      => r_PYD.INFORMATION116
                          ,P_PYD_ATTRIBUTE7      => r_PYD.INFORMATION117
                          ,P_PYD_ATTRIBUTE8      => r_PYD.INFORMATION118
                          ,P_PYD_ATTRIBUTE9      => r_PYD.INFORMATION119
                          ,P_PYD_ATTRIBUTE_CATEGORY      => r_PYD.INFORMATION110
                          ,P_RLSHP_TYP_CD      => r_PYD.INFORMATION15
             ,P_RQD_FLAG      => r_PYD.INFORMATION14
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
            end if;  -- l_update
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_PYD.information3) then
             --
             BEN_PTIP_DPNT_CVG_CTFN_API.delete_PTIP_DPNT_CVG_CTFN(
                --
                p_validate                       => false
                ,p_ptip_dpnt_cvg_ctfn_id                   => l_ptip_dpnt_cvg_ctfn_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'PYD',r_pyd.information5 );
     --
 end create_PYD_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_LCT_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_LCT_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_DFLT_ENRT_RL  number;
   l_ENRT_RL  number;
   l_LER_ID  number;
   l_PTIP_ID  number;
   cursor c_unique_LCT(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
  ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_LER_CHG_PTIP_ENRT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_LCT_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_LCT(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_LCT_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     LCT.ler_chg_ptip_enrt_id new_value
   from BEN_LER_CHG_PTIP_ENRT_F LCT
   where
   LCT.LER_ID     = l_LER_ID  and
   LCT.PTIP_ID     = l_PTIP_ID  and
   LCT.business_group_id  = c_business_group_id
   and   LCT.ler_chg_ptip_enrt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_LER_CHG_PTIP_ENRT_F LCT1
                where
                LCT1.LER_ID     = l_LER_ID  and
                LCT1.PTIP_ID     = l_PTIP_ID  and
                LCT1.business_group_id  = c_business_group_id
                and   LCT1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_LER_CHG_PTIP_ENRT_F LCT2
                where
                LCT2.LER_ID     = l_LER_ID  and
                LCT2.PTIP_ID     = l_PTIP_ID  and
                LCT2.business_group_id  = c_business_group_id
                and   LCT2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_LCT                     c_LCT%rowtype;
   l_ler_chg_ptip_enrt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_LCT_unique in c_unique_LCT('LCT') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_LCT_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then

       --
       hr_utility.set_location(' r_LCT_unique.table_route_id '||r_LCT_unique.table_route_id,10);
       hr_utility.set_location(' r_LCT_unique.information1 '||r_LCT_unique.information1,10);
       hr_utility.set_location( 'r_LCT_unique.information2 '||r_LCT_unique.information2,10);
       hr_utility.set_location( 'r_LCT_unique.information3 '||r_LCT_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_LCT_unique.dml_operation ;
       --
       open c_LCT(r_LCT_unique.table_route_id,
                r_LCT_unique.information1,
                r_LCT_unique.information2,
                r_LCT_unique.information3 ) ;
       --
       fetch c_LCT into r_LCT ;
       --
       close c_LCT ;
       --
       l_DFLT_ENRT_RL := get_fk('FORMULA_ID', r_LCT.INFORMATION13,l_dml_operation);
       l_ENRT_RL := get_fk('FORMULA_ID', r_LCT.INFORMATION16,l_dml_operation);
       l_LER_ID := get_fk('LER_ID', r_LCT.INFORMATION257,l_dml_operation);
       l_PTIP_ID := get_fk('PTIP_ID', r_LCT.INFORMATION259,l_dml_operation);
             if l_dml_operation = 'UPDATE' then
               --
               l_object_found_in_target := TRUE;
               --
               if l_process_date between r_LCT_unique.information2 and r_LCT_unique.information3 then
                     l_update := true;
                     if r_LCT_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                       or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'LER_CHG_PTIP_ENRT_ID'
                     then
                        BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'LER_CHG_PTIP_ENRT_ID' ;
                        BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_LCT_unique.information1 ;
                        BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_LCT_unique.information1 ;
                        BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                        BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LCT_unique.table_route_id;
                        --
                        -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                        --
                        BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                        --
        --DOUBT                log_data('LCT',l_new_value,l_prefix || r_LCT_unique.name|| l_suffix,'REUSED');
                        --
                     end if ;
                     hr_utility.set_location( 'found record for update',10);
                 --
               else
                 --
                 l_update := false;
                 --
               end if;
             else
               --
               --UPD END

       l_min_esd := null ;
       l_max_eed := null ;
       open c_LCT_min_max_dates(r_LCT_unique.table_route_id, r_LCT_unique.information1 ) ;
       fetch c_LCT_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_LCT_unique.information2);
       /*
       open c_LCT(r_LCT_unique.table_route_id,
                r_LCT_unique.information1,
                r_LCT_unique.information2,
                r_LCT_unique.information3 ) ;
       --
       fetch c_LCT into r_LCT ;
       --
       close c_LCT ;
       --
       l_DFLT_ENRT_RL := get_fk('FORMULA_ID', r_LCT.INFORMATION13,l_dml_operation);
       l_ENRT_RL := get_fk('FORMULA_ID', r_LCT.INFORMATION16,l_dml_operation);
       l_LER_ID := get_fk('LER_ID', r_LCT.INFORMATION257,l_dml_operation);
       l_PTIP_ID := get_fk('PTIP_ID', r_LCT.INFORMATION259,l_dml_operation);
       */
       if p_reuse_object_flag = 'Y' then
         if c_LCT_min_max_dates%found then
           -- cursor to find the object
           open c_find_LCT_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_ler_chg_ptip_enrt_id, -999)  ) ;
           fetch c_find_LCT_in_target into l_new_value ;
           if c_find_LCT_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_LER_CHG_PTIP_ENRT_F',
                  p_base_key_column => 'LER_CHG_PTIP_ENRT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_LCT_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'LER_CHG_PTIP_ENRT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'LER_CHG_PTIP_ENRT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_LCT_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LCT_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_LCT_in_target ;
         --
         end if;
       end if ;
       --
       close c_LCT_min_max_dates ;
      end if; --if p_dml_operation
               --
               if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_LCT.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_LCT.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

        if l_first_rec and not l_update then

           -- Call Create routine.
           hr_utility.set_location(' BEN_LER_CHG_PTIP_ENRT_F CREATE_LER_CHG_PTIP_ENRT ',20);
           BEN_LER_CHG_PTIP_ENRT_API.CREATE_LER_CHG_PTIP_ENRT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CRNT_ENRT_PRCLDS_CHG_FLAG      => r_LCT.INFORMATION18
                          ,P_DFLT_ENRT_CD      => r_LCT.INFORMATION12
                          ,P_DFLT_ENRT_RL      => l_DFLT_ENRT_RL
                          ,P_DFLT_FLAG      => r_LCT.INFORMATION11
                          ,P_ENRT_CD      => r_LCT.INFORMATION14
                          ,P_ENRT_MTHD_CD      => r_LCT.INFORMATION15
                          ,P_ENRT_RL      => l_ENRT_RL
                          ,P_LCT_ATTRIBUTE1      => r_LCT.INFORMATION111
                          ,P_LCT_ATTRIBUTE10      => r_LCT.INFORMATION120
                          ,P_LCT_ATTRIBUTE11      => r_LCT.INFORMATION121
                          ,P_LCT_ATTRIBUTE12      => r_LCT.INFORMATION122
                          ,P_LCT_ATTRIBUTE13      => r_LCT.INFORMATION123
                          ,P_LCT_ATTRIBUTE14      => r_LCT.INFORMATION124
                          ,P_LCT_ATTRIBUTE15      => r_LCT.INFORMATION125
                          ,P_LCT_ATTRIBUTE16      => r_LCT.INFORMATION126
                          ,P_LCT_ATTRIBUTE17      => r_LCT.INFORMATION127
                          ,P_LCT_ATTRIBUTE18      => r_LCT.INFORMATION128
                          ,P_LCT_ATTRIBUTE19      => r_LCT.INFORMATION129
                          ,P_LCT_ATTRIBUTE2      => r_LCT.INFORMATION112
                          ,P_LCT_ATTRIBUTE20      => r_LCT.INFORMATION130
                          ,P_LCT_ATTRIBUTE21      => r_LCT.INFORMATION131
                          ,P_LCT_ATTRIBUTE22      => r_LCT.INFORMATION132
                          ,P_LCT_ATTRIBUTE23      => r_LCT.INFORMATION133
                          ,P_LCT_ATTRIBUTE24      => r_LCT.INFORMATION134
                          ,P_LCT_ATTRIBUTE25      => r_LCT.INFORMATION135
                          ,P_LCT_ATTRIBUTE26      => r_LCT.INFORMATION136
                          ,P_LCT_ATTRIBUTE27      => r_LCT.INFORMATION137
                          ,P_LCT_ATTRIBUTE28      => r_LCT.INFORMATION138
                          ,P_LCT_ATTRIBUTE29      => r_LCT.INFORMATION139
                          ,P_LCT_ATTRIBUTE3      => r_LCT.INFORMATION113
                          ,P_LCT_ATTRIBUTE30      => r_LCT.INFORMATION140
                          ,P_LCT_ATTRIBUTE4      => r_LCT.INFORMATION114
                          ,P_LCT_ATTRIBUTE5      => r_LCT.INFORMATION115
                          ,P_LCT_ATTRIBUTE6      => r_LCT.INFORMATION116
                          ,P_LCT_ATTRIBUTE7      => r_LCT.INFORMATION117
                          ,P_LCT_ATTRIBUTE8      => r_LCT.INFORMATION118
                          ,P_LCT_ATTRIBUTE9      => r_LCT.INFORMATION119
                          ,P_LCT_ATTRIBUTE_CATEGORY      => r_LCT.INFORMATION110
                          ,P_LER_CHG_PTIP_ENRT_ID      => l_ler_chg_ptip_enrt_id
                          ,P_LER_ID      => l_LER_ID
                          ,P_PTIP_ID      => l_PTIP_ID
                          ,P_STL_ELIG_CANT_CHG_FLAG      => r_LCT.INFORMATION19
             ,P_TCO_CHG_ENRT_CD      => r_LCT.INFORMATION17
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_ler_chg_ptip_enrt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'LER_CHG_PTIP_ENRT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_LCT.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_LER_CHG_PTIP_ENRT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LCT_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
            hr_utility.set_location(' BEN_LER_CHG_PTIP_ENRT_F UPDATE_LER_CHG_PTIP_ENRT ',30);
           --UPD START
                   hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
                   --
                   if l_update then
                     --
                     l_datetrack_mode := r_LCT.datetrack_mode ;
                     --
                     get_dt_modes(
                       p_effective_date        => l_process_date,
                       p_effective_end_date    => r_LCT.information3,
                       p_effective_start_date  => r_LCT.information2,
                       p_dml_operation         => r_LCT.dml_operation,
                       p_datetrack_mode        => l_datetrack_mode );
                   --    p_update                => l_update
                     --
                     l_effective_date := l_process_date;
                     l_LER_CHG_PTIP_ENRT_ID   := r_LCT.information1;
                     l_object_version_number := r_LCT.information265;
                     --
                   end if;
                   --
                   hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
                   --
                   IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END

           BEN_LER_CHG_PTIP_ENRT_API.UPDATE_LER_CHG_PTIP_ENRT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
            ,P_CRNT_ENRT_PRCLDS_CHG_FLAG      => r_LCT.INFORMATION18
                         ,P_DFLT_ENRT_CD      => r_LCT.INFORMATION12
                         ,P_DFLT_ENRT_RL      => l_DFLT_ENRT_RL
                         ,P_DFLT_FLAG      => r_LCT.INFORMATION11
                         ,P_ENRT_CD      => r_LCT.INFORMATION14
                         ,P_ENRT_MTHD_CD      => r_LCT.INFORMATION15
                         ,P_ENRT_RL      => l_ENRT_RL
                         ,P_LCT_ATTRIBUTE1      => r_LCT.INFORMATION111
                         ,P_LCT_ATTRIBUTE10      => r_LCT.INFORMATION120
                         ,P_LCT_ATTRIBUTE11      => r_LCT.INFORMATION121
                         ,P_LCT_ATTRIBUTE12      => r_LCT.INFORMATION122
                         ,P_LCT_ATTRIBUTE13      => r_LCT.INFORMATION123
                         ,P_LCT_ATTRIBUTE14      => r_LCT.INFORMATION124
                         ,P_LCT_ATTRIBUTE15      => r_LCT.INFORMATION125
                         ,P_LCT_ATTRIBUTE16      => r_LCT.INFORMATION126
                         ,P_LCT_ATTRIBUTE17      => r_LCT.INFORMATION127
                         ,P_LCT_ATTRIBUTE18      => r_LCT.INFORMATION128
                         ,P_LCT_ATTRIBUTE19      => r_LCT.INFORMATION129
                         ,P_LCT_ATTRIBUTE2      => r_LCT.INFORMATION112
                         ,P_LCT_ATTRIBUTE20      => r_LCT.INFORMATION130
                         ,P_LCT_ATTRIBUTE21      => r_LCT.INFORMATION131
                         ,P_LCT_ATTRIBUTE22      => r_LCT.INFORMATION132
                         ,P_LCT_ATTRIBUTE23      => r_LCT.INFORMATION133
                         ,P_LCT_ATTRIBUTE24      => r_LCT.INFORMATION134
                         ,P_LCT_ATTRIBUTE25      => r_LCT.INFORMATION135
                         ,P_LCT_ATTRIBUTE26      => r_LCT.INFORMATION136
                         ,P_LCT_ATTRIBUTE27      => r_LCT.INFORMATION137
                         ,P_LCT_ATTRIBUTE28      => r_LCT.INFORMATION138
                         ,P_LCT_ATTRIBUTE29      => r_LCT.INFORMATION139
                         ,P_LCT_ATTRIBUTE3      => r_LCT.INFORMATION113
                         ,P_LCT_ATTRIBUTE30      => r_LCT.INFORMATION140
                         ,P_LCT_ATTRIBUTE4      => r_LCT.INFORMATION114
                         ,P_LCT_ATTRIBUTE5      => r_LCT.INFORMATION115
                         ,P_LCT_ATTRIBUTE6      => r_LCT.INFORMATION116
                         ,P_LCT_ATTRIBUTE7      => r_LCT.INFORMATION117
                         ,P_LCT_ATTRIBUTE8      => r_LCT.INFORMATION118
                         ,P_LCT_ATTRIBUTE9      => r_LCT.INFORMATION119
                         ,P_LCT_ATTRIBUTE_CATEGORY      => r_LCT.INFORMATION110
                         ,P_LER_CHG_PTIP_ENRT_ID      => l_ler_chg_ptip_enrt_id
                         ,P_LER_ID      => l_LER_ID
                         ,P_PTIP_ID      => l_PTIP_ID
                         ,P_STL_ELIG_CANT_CHG_FLAG      => r_LCT.INFORMATION19
             ,P_TCO_CHG_ENRT_CD      => r_LCT.INFORMATION17
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
              ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
            end if;  -- l_update
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_LCT.information3) then
             --
             BEN_LER_CHG_PTIP_ENRT_API.delete_LER_CHG_PTIP_ENRT(
                --
                p_validate                       => false
                ,p_ler_chg_ptip_enrt_id                   => l_ler_chg_ptip_enrt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'LCT',r_lct.information5 );
     --
 end create_LCT_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_WCT_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_WCT_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_CTFN_RQD_WHEN_RL  number;
   l_WV_PRTN_RSN_PTIP_ID  number;
   l_WV_PRTN_CTFN_TYP_CD  varchar2(30) ;
   cursor c_unique_WCT(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_WV_PRTN_RSN_CTFN_PTIP_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_WCT_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_WCT(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_WCT_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     WCT.wv_prtn_rsn_ctfn_ptip_id new_value
   from BEN_WV_PRTN_RSN_CTFN_PTIP_F WCT
   where
   WCT.WV_PRTN_RSN_PTIP_ID     = l_WV_PRTN_RSN_PTIP_ID  and
   WCT.WV_PRTN_CTFN_TYP_CD   = l_WV_PRTN_CTFN_TYP_CD and
   WCT.business_group_id  = c_business_group_id
   and   WCT.wv_prtn_rsn_ctfn_ptip_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_WV_PRTN_RSN_CTFN_PTIP_F WCT1
                where
                WCT1.WV_PRTN_RSN_PTIP_ID     = l_WV_PRTN_RSN_PTIP_ID  and
                WCT1.WV_PRTN_CTFN_TYP_CD   = l_WV_PRTN_CTFN_TYP_CD and
                WCT1.business_group_id  = c_business_group_id
                and   WCT1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_WV_PRTN_RSN_CTFN_PTIP_F WCT2
                where
                WCT2.WV_PRTN_RSN_PTIP_ID     = l_WV_PRTN_RSN_PTIP_ID  and
                WCT2.WV_PRTN_CTFN_TYP_CD   = l_WV_PRTN_CTFN_TYP_CD and
                WCT2.business_group_id  = c_business_group_id
                and   WCT2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
     --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_WCT                     c_WCT%rowtype;
   l_wv_prtn_rsn_ctfn_ptip_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_WCT_unique in c_unique_WCT('WCT') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_WCT_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_WCT_unique.table_route_id '||r_WCT_unique.table_route_id,10);
       hr_utility.set_location(' r_WCT_unique.information1 '||r_WCT_unique.information1,10);
       hr_utility.set_location( 'r_WCT_unique.information2 '||r_WCT_unique.information2,10);
       hr_utility.set_location( 'r_WCT_unique.information3 '||r_WCT_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
        --UPD START
          open c_WCT(r_WCT_unique.table_route_id,
                r_WCT_unique.information1,
                r_WCT_unique.information2,
                r_WCT_unique.information3 ) ;
       --
       fetch c_WCT into r_WCT ;
       --
       close c_WCT ;
       --
       l_dml_operation:= r_WCT_unique.dml_operation ;
       l_CTFN_RQD_WHEN_RL := get_fk('FORMULA_ID', r_WCT.INFORMATION258,l_dml_operation );
       l_WV_PRTN_RSN_PTIP_ID := get_fk('WV_PRTN_RSN_PTIP_ID', r_WCT.INFORMATION257,l_dml_operation );
       l_WV_PRTN_CTFN_TYP_CD := r_WCT.information15 ;
       --
              l_update := false;
              l_process_date := p_effective_date;
              --
              if l_dml_operation = 'UPDATE' then
                --
                l_object_found_in_target := TRUE;
                --
                if l_process_date between r_WCT_unique.information2 and r_WCT_unique.information3 then
                      l_update := true;
                      if r_WCT_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                        or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'WV_PRTN_RSN_CTFN_PTIP_ID'
                      then
                         BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'WV_PRTN_RSN_CTFN_PTIP_ID' ;
                         BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_WCT_unique.information1 ;
                         BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_WCT_unique.information1 ;
                         BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                         BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_WCT_unique.table_route_id;
                         --
                         -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                         --
                         BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                         --
         --DOUBT                log_data('WCT',l_new_value,l_prefix || r_WCT_unique.name|| l_suffix,'REUSED');
                         --
                      end if ;
                      hr_utility.set_location( 'found record for update',10);
                  --
                else
                  --
                  l_update := false;
                  --
                end if;
              else
                --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_WCT_min_max_dates(r_WCT_unique.table_route_id, r_WCT_unique.information1 ) ;
       fetch c_WCT_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_WCT_unique.information2);
    /*   open c_WCT(r_WCT_unique.table_route_id,
                r_WCT_unique.information1,
                r_WCT_unique.information2,
                r_WCT_unique.information3 ) ;
       --
       fetch c_WCT into r_WCT ;
       --
       close c_WCT ;  */
       --
       if p_reuse_object_flag = 'Y' then
         if c_WCT_min_max_dates%found then
           -- cursor to find the object
           open c_find_WCT_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_wv_prtn_rsn_ctfn_ptip_id, -999)  ) ;
           fetch c_find_WCT_in_target into l_new_value ;
           if c_find_WCT_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_WV_PRTN_RSN_CTFN_PTIP_F',
                  p_base_key_column => 'WV_PRTN_RSN_CTFN_PTIP_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_WCT_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'WV_PRTN_RSN_CTFN_PTIP_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'WV_PRTN_RSN_CTFN_PTIP_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_WCT_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_WCT_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_WCT_in_target ;
         --
         end if;
       end if ;
       --
       close c_WCT_min_max_dates ;
        end if; --if p_dml_operation
               --
               if not l_object_found_in_target OR l_update  then
         --
         l_current_pk_id := r_WCT.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_WCT.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

        if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_WV_PRTN_RSN_CTFN_PTIP_F CREATE_WV_PRTN_RSN_CTFN_PTIP ',20);
           BEN_WV_PRTN_RSN_CTFN_PTIP_API.CREATE_WV_PRTN_RSN_CTFN_PTIP(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CTFN_RQD_WHEN_RL      => l_CTFN_RQD_WHEN_RL
                          ,P_LACK_CTFN_SSPND_WVR_FLAG      => r_WCT.INFORMATION11
                          ,P_PFD_FLAG      => r_WCT.INFORMATION13
                          ,P_RQD_FLAG      => r_WCT.INFORMATION12
                          ,P_WCT_ATTRIBUTE1      => r_WCT.INFORMATION111
                          ,P_WCT_ATTRIBUTE10      => r_WCT.INFORMATION120
                          ,P_WCT_ATTRIBUTE11      => r_WCT.INFORMATION121
                          ,P_WCT_ATTRIBUTE12      => r_WCT.INFORMATION122
                          ,P_WCT_ATTRIBUTE13      => r_WCT.INFORMATION123
                          ,P_WCT_ATTRIBUTE14      => r_WCT.INFORMATION124
                          ,P_WCT_ATTRIBUTE15      => r_WCT.INFORMATION125
                          ,P_WCT_ATTRIBUTE16      => r_WCT.INFORMATION126
                          ,P_WCT_ATTRIBUTE17      => r_WCT.INFORMATION127
                          ,P_WCT_ATTRIBUTE18      => r_WCT.INFORMATION128
                          ,P_WCT_ATTRIBUTE19      => r_WCT.INFORMATION129
                          ,P_WCT_ATTRIBUTE2      => r_WCT.INFORMATION112
                          ,P_WCT_ATTRIBUTE20      => r_WCT.INFORMATION130
                          ,P_WCT_ATTRIBUTE21      => r_WCT.INFORMATION131
                          ,P_WCT_ATTRIBUTE22      => r_WCT.INFORMATION132
                          ,P_WCT_ATTRIBUTE23      => r_WCT.INFORMATION133
                          ,P_WCT_ATTRIBUTE24      => r_WCT.INFORMATION134
                          ,P_WCT_ATTRIBUTE25      => r_WCT.INFORMATION135
                          ,P_WCT_ATTRIBUTE26      => r_WCT.INFORMATION136
                          ,P_WCT_ATTRIBUTE27      => r_WCT.INFORMATION137
                          ,P_WCT_ATTRIBUTE28      => r_WCT.INFORMATION138
                          ,P_WCT_ATTRIBUTE29      => r_WCT.INFORMATION139
                          ,P_WCT_ATTRIBUTE3      => r_WCT.INFORMATION113
                          ,P_WCT_ATTRIBUTE30      => r_WCT.INFORMATION140
                          ,P_WCT_ATTRIBUTE4      => r_WCT.INFORMATION114
                          ,P_WCT_ATTRIBUTE5      => r_WCT.INFORMATION115
                          ,P_WCT_ATTRIBUTE6      => r_WCT.INFORMATION116
                          ,P_WCT_ATTRIBUTE7      => r_WCT.INFORMATION117
                          ,P_WCT_ATTRIBUTE8      => r_WCT.INFORMATION118
                          ,P_WCT_ATTRIBUTE9      => r_WCT.INFORMATION119
                          ,P_WCT_ATTRIBUTE_CATEGORY      => r_WCT.INFORMATION110
                          ,P_WV_PRTN_CTFN_CD      => r_WCT.INFORMATION15
                          ,P_WV_PRTN_CTFN_TYP_CD      => r_WCT.INFORMATION14
                          ,P_WV_PRTN_RSN_CTFN_PTIP_ID      => l_wv_prtn_rsn_ctfn_ptip_id
             ,P_WV_PRTN_RSN_PTIP_ID      => l_WV_PRTN_RSN_PTIP_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_wv_prtn_rsn_ctfn_ptip_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'WV_PRTN_RSN_CTFN_PTIP_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_WCT.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_WV_PRTN_RSN_CTFN_PTIP_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_WCT_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             hr_utility.set_location(' BEN_WV_PRTN_RSN_CTFN_PTIP_F UPDATE_WV_PRTN_RSN_CTFN_PTIP ',30);
           --UPD START
            hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
            --
            if l_update then
              --
              l_datetrack_mode := r_WCT.datetrack_mode ;
              --
              get_dt_modes(
                p_effective_date        => l_process_date,
                p_effective_end_date    => r_WCT.information3,
                p_effective_start_date  => r_WCT.information2,
                p_dml_operation         => r_WCT.dml_operation,
                p_datetrack_mode        => l_datetrack_mode );
            --    p_update                => l_update
              --
              l_effective_date := l_process_date;
              l_WV_PRTN_RSN_CTFN_PTIP_ID   := r_WCT.information1;
              l_object_version_number := r_WCT.information265;
              --
            end if;
            --
            hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
            --
            IF l_update OR l_dml_operation <> 'UPDATE' THEN
            --UPD END


           BEN_WV_PRTN_RSN_CTFN_PTIP_API.UPDATE_WV_PRTN_RSN_CTFN_PTIP(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CTFN_RQD_WHEN_RL      => l_CTFN_RQD_WHEN_RL
                          ,P_LACK_CTFN_SSPND_WVR_FLAG      => r_WCT.INFORMATION11
                          ,P_PFD_FLAG      => r_WCT.INFORMATION13
                          ,P_RQD_FLAG      => r_WCT.INFORMATION12
                          ,P_WCT_ATTRIBUTE1      => r_WCT.INFORMATION111
                          ,P_WCT_ATTRIBUTE10      => r_WCT.INFORMATION120
                          ,P_WCT_ATTRIBUTE11      => r_WCT.INFORMATION121
                          ,P_WCT_ATTRIBUTE12      => r_WCT.INFORMATION122
                          ,P_WCT_ATTRIBUTE13      => r_WCT.INFORMATION123
                          ,P_WCT_ATTRIBUTE14      => r_WCT.INFORMATION124
                          ,P_WCT_ATTRIBUTE15      => r_WCT.INFORMATION125
                          ,P_WCT_ATTRIBUTE16      => r_WCT.INFORMATION126
                          ,P_WCT_ATTRIBUTE17      => r_WCT.INFORMATION127
                          ,P_WCT_ATTRIBUTE18      => r_WCT.INFORMATION128
                          ,P_WCT_ATTRIBUTE19      => r_WCT.INFORMATION129
                          ,P_WCT_ATTRIBUTE2      => r_WCT.INFORMATION112
                          ,P_WCT_ATTRIBUTE20      => r_WCT.INFORMATION130
                          ,P_WCT_ATTRIBUTE21      => r_WCT.INFORMATION131
                          ,P_WCT_ATTRIBUTE22      => r_WCT.INFORMATION132
                          ,P_WCT_ATTRIBUTE23      => r_WCT.INFORMATION133
                          ,P_WCT_ATTRIBUTE24      => r_WCT.INFORMATION134
                          ,P_WCT_ATTRIBUTE25      => r_WCT.INFORMATION135
                          ,P_WCT_ATTRIBUTE26      => r_WCT.INFORMATION136
                          ,P_WCT_ATTRIBUTE27      => r_WCT.INFORMATION137
                          ,P_WCT_ATTRIBUTE28      => r_WCT.INFORMATION138
                          ,P_WCT_ATTRIBUTE29      => r_WCT.INFORMATION139
                          ,P_WCT_ATTRIBUTE3      => r_WCT.INFORMATION113
                          ,P_WCT_ATTRIBUTE30      => r_WCT.INFORMATION140
                          ,P_WCT_ATTRIBUTE4      => r_WCT.INFORMATION114
                          ,P_WCT_ATTRIBUTE5      => r_WCT.INFORMATION115
                          ,P_WCT_ATTRIBUTE6      => r_WCT.INFORMATION116
                          ,P_WCT_ATTRIBUTE7      => r_WCT.INFORMATION117
                          ,P_WCT_ATTRIBUTE8      => r_WCT.INFORMATION118
                          ,P_WCT_ATTRIBUTE9      => r_WCT.INFORMATION119
                          ,P_WCT_ATTRIBUTE_CATEGORY      => r_WCT.INFORMATION110
                          ,P_WV_PRTN_CTFN_CD      => r_WCT.INFORMATION15
                          ,P_WV_PRTN_CTFN_TYP_CD      => r_WCT.INFORMATION14
                          ,P_WV_PRTN_RSN_CTFN_PTIP_ID      => l_wv_prtn_rsn_ctfn_ptip_id
             ,P_WV_PRTN_RSN_PTIP_ID      => l_WV_PRTN_RSN_PTIP_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
               ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
            end if;  -- l_update
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_WCT.information3) then
             --
             BEN_WV_PRTN_RSN_CTFN_PTIP_API.delete_WV_PRTN_RSN_CTFN_PTIP(
                --
                p_validate                       => false
                ,p_wv_prtn_rsn_ctfn_ptip_id                   => l_wv_prtn_rsn_ctfn_ptip_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'WCT',r_wct.information5 );
     --
 end create_WCT_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_WPT_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_WPT_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_PTIP_ID  number;
   l_WV_PRTN_RSN_CD varchar2(30);
   --
   cursor c_unique_WPT(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_WV_PRTN_RSN_PTIP_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_WPT_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_WPT(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_WPT_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     WPT.wv_prtn_rsn_ptip_id new_value
   from BEN_WV_PRTN_RSN_PTIP_F WPT
   where
   WPT.PTIP_ID     = l_PTIP_ID  and
   WPT.WV_PRTN_RSN_CD = l_WV_PRTN_RSN_CD and
   WPT.business_group_id  = c_business_group_id
   and   WPT.wv_prtn_rsn_ptip_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_WV_PRTN_RSN_PTIP_F WPT1
                where
                WPT1.PTIP_ID     = l_PTIP_ID  and
                WPT1.WV_PRTN_RSN_CD = l_WV_PRTN_RSN_CD and
                WPT1.business_group_id  = c_business_group_id
                and   WPT1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_WV_PRTN_RSN_PTIP_F WPT2
                where
                WPT2.PTIP_ID     = l_PTIP_ID  and
                WPT2.WV_PRTN_RSN_CD = l_WV_PRTN_RSN_CD and
                WPT2.business_group_id  = c_business_group_id
                and   WPT2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_WPT                     c_WPT%rowtype;
   l_wv_prtn_rsn_ptip_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_WPT_unique in c_unique_WPT('WPT') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
          (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
           r_WPT_unique.information3 >=
                   ben_pd_copy_to_ben_one.g_copy_effective_date)
          ) then
       --
       hr_utility.set_location(' r_WPT_unique.table_route_id '||r_WPT_unique.table_route_id,10);
       hr_utility.set_location(' r_WPT_unique.information1 '||r_WPT_unique.information1,10);
       hr_utility.set_location( 'r_WPT_unique.information2 '||r_WPT_unique.information2,10);
       hr_utility.set_location( 'r_WPT_unique.information3 '||r_WPT_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
        --UPD START
          open c_WPT(r_WPT_unique.table_route_id,
                r_WPT_unique.information1,
                r_WPT_unique.information2,
                r_WPT_unique.information3 ) ;
       --
       fetch c_WPT into r_WPT ;
       --
       close c_WPT ;
       --
       l_dml_operation:= r_WPT_unique.dml_operation ;
       l_PTIP_ID := get_fk('PTIP_ID', r_WPT.INFORMATION259,l_dml_operation);
       l_WV_PRTN_RSN_CD  := r_WPT.information12 ;
       --
        l_update := false;
        l_process_date := p_effective_date;
        --
        if l_dml_operation = 'UPDATE' then
          --
          l_object_found_in_target := TRUE;
          --
          if l_process_date between r_WPT_unique.information2 and r_WPT_unique.information3 then
                l_update := true;
                if r_WPT_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                  or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'WV_PRTN_RSN_PTIP_ID'
                then
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'WV_PRTN_RSN_PTIP_ID' ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_WPT_unique.information1 ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_WPT_unique.information1 ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_WPT_unique.table_route_id;
                   --
                   -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                   --
                   BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                   --
       --DOUBT            log_data('WPT',l_new_value,l_prefix || r_WPT_unique.name|| l_suffix,'REUSED');
                   --
                end if ;
                hr_utility.set_location( 'found record for update',10);
            --
          else
            --
            l_update := false;
            --
          end if;
        else
          --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_WPT_min_max_dates(r_WPT_unique.table_route_id, r_WPT_unique.information1 ) ;
       fetch c_WPT_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
        l_min_esd := greatest(l_min_esd,r_WPT_unique.information2);
   /*    open c_WPT(r_WPT_unique.table_route_id,
                r_WPT_unique.information1,
                r_WPT_unique.information2,
                r_WPT_unique.information3 ) ;
       --
       fetch c_WPT into r_WPT ;
       --
       close c_WPT ; */
       --
       --
       if p_reuse_object_flag = 'Y' then
         if c_WPT_min_max_dates%found then
           -- cursor to find the object
           open c_find_WPT_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_wv_prtn_rsn_ptip_id, -999)  ) ;
           fetch c_find_WPT_in_target into l_new_value ;
           if c_find_WPT_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_WV_PRTN_RSN_PTIP_F',
                  p_base_key_column => 'WV_PRTN_RSN_PTIP_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_WPT_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'WV_PRTN_RSN_PTIP_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'WV_PRTN_RSN_PTIP_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_WPT_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_WPT_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_WPT_in_target ;
         --
         end if;
       end if ;
       --
       close c_WPT_min_max_dates ;
       end if; --if p_dml_operation
               --
               if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_WPT.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_WPT.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

        if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_WV_PRTN_RSN_PTIP_F CREATE_WV_PRTN_RSN_PTIP ',20);
           BEN_WV_PRTN_RSN_PTIP_API.CREATE_WV_PRTN_RSN_PTIP(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_DFLT_FLAG      => r_WPT.INFORMATION11
                          ,P_PTIP_ID      => l_PTIP_ID
                          ,P_WPT_ATTRIBUTE1      => r_WPT.INFORMATION111
                          ,P_WPT_ATTRIBUTE10      => r_WPT.INFORMATION120
                          ,P_WPT_ATTRIBUTE11      => r_WPT.INFORMATION121
                          ,P_WPT_ATTRIBUTE12      => r_WPT.INFORMATION122
                          ,P_WPT_ATTRIBUTE13      => r_WPT.INFORMATION123
                          ,P_WPT_ATTRIBUTE14      => r_WPT.INFORMATION124
                          ,P_WPT_ATTRIBUTE15      => r_WPT.INFORMATION125
                          ,P_WPT_ATTRIBUTE16      => r_WPT.INFORMATION126
                          ,P_WPT_ATTRIBUTE17      => r_WPT.INFORMATION127
                          ,P_WPT_ATTRIBUTE18      => r_WPT.INFORMATION128
                          ,P_WPT_ATTRIBUTE19      => r_WPT.INFORMATION129
                          ,P_WPT_ATTRIBUTE2      => r_WPT.INFORMATION112
                          ,P_WPT_ATTRIBUTE20      => r_WPT.INFORMATION130
                          ,P_WPT_ATTRIBUTE21      => r_WPT.INFORMATION131
                          ,P_WPT_ATTRIBUTE22      => r_WPT.INFORMATION132
                          ,P_WPT_ATTRIBUTE23      => r_WPT.INFORMATION133
                          ,P_WPT_ATTRIBUTE24      => r_WPT.INFORMATION134
                          ,P_WPT_ATTRIBUTE25      => r_WPT.INFORMATION135
                          ,P_WPT_ATTRIBUTE26      => r_WPT.INFORMATION136
                          ,P_WPT_ATTRIBUTE27      => r_WPT.INFORMATION137
                          ,P_WPT_ATTRIBUTE28      => r_WPT.INFORMATION138
                          ,P_WPT_ATTRIBUTE29      => r_WPT.INFORMATION139
                          ,P_WPT_ATTRIBUTE3      => r_WPT.INFORMATION113
                          ,P_WPT_ATTRIBUTE30      => r_WPT.INFORMATION140
                          ,P_WPT_ATTRIBUTE4      => r_WPT.INFORMATION114
                          ,P_WPT_ATTRIBUTE5      => r_WPT.INFORMATION115
                          ,P_WPT_ATTRIBUTE6      => r_WPT.INFORMATION116
                          ,P_WPT_ATTRIBUTE7      => r_WPT.INFORMATION117
                          ,P_WPT_ATTRIBUTE8      => r_WPT.INFORMATION118
                          ,P_WPT_ATTRIBUTE9      => r_WPT.INFORMATION119
                          ,P_WPT_ATTRIBUTE_CATEGORY      => r_WPT.INFORMATION110
                          ,P_WV_PRTN_RSN_CD      => r_WPT.INFORMATION12
             ,P_WV_PRTN_RSN_PTIP_ID      => l_wv_prtn_rsn_ptip_id
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_wv_prtn_rsn_ptip_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'WV_PRTN_RSN_PTIP_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_WPT.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_WV_PRTN_RSN_PTIP_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_WPT_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
              hr_utility.set_location(' BEN_WV_PRTN_RSN_PTIP_F UPDATE_WV_PRTN_RSN_PTIP ',30);
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_WPT.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_WPT.information3,
               p_effective_start_date  => r_WPT.information2,
               p_dml_operation         => r_WPT.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_WV_PRTN_RSN_PTIP_ID   := r_WPT.information1;
             l_object_version_number := r_WPT.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END

           BEN_WV_PRTN_RSN_PTIP_API.UPDATE_WV_PRTN_RSN_PTIP(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_DFLT_FLAG      => r_WPT.INFORMATION11
                          ,P_PTIP_ID      => l_PTIP_ID
                          ,P_WPT_ATTRIBUTE1      => r_WPT.INFORMATION111
                          ,P_WPT_ATTRIBUTE10      => r_WPT.INFORMATION120
                          ,P_WPT_ATTRIBUTE11      => r_WPT.INFORMATION121
                          ,P_WPT_ATTRIBUTE12      => r_WPT.INFORMATION122
                          ,P_WPT_ATTRIBUTE13      => r_WPT.INFORMATION123
                          ,P_WPT_ATTRIBUTE14      => r_WPT.INFORMATION124
                          ,P_WPT_ATTRIBUTE15      => r_WPT.INFORMATION125
                          ,P_WPT_ATTRIBUTE16      => r_WPT.INFORMATION126
                          ,P_WPT_ATTRIBUTE17      => r_WPT.INFORMATION127
                          ,P_WPT_ATTRIBUTE18      => r_WPT.INFORMATION128
                          ,P_WPT_ATTRIBUTE19      => r_WPT.INFORMATION129
                          ,P_WPT_ATTRIBUTE2      => r_WPT.INFORMATION112
                          ,P_WPT_ATTRIBUTE20      => r_WPT.INFORMATION130
                          ,P_WPT_ATTRIBUTE21      => r_WPT.INFORMATION131
                          ,P_WPT_ATTRIBUTE22      => r_WPT.INFORMATION132
                          ,P_WPT_ATTRIBUTE23      => r_WPT.INFORMATION133
                          ,P_WPT_ATTRIBUTE24      => r_WPT.INFORMATION134
                          ,P_WPT_ATTRIBUTE25      => r_WPT.INFORMATION135
                          ,P_WPT_ATTRIBUTE26      => r_WPT.INFORMATION136
                          ,P_WPT_ATTRIBUTE27      => r_WPT.INFORMATION137
                          ,P_WPT_ATTRIBUTE28      => r_WPT.INFORMATION138
                          ,P_WPT_ATTRIBUTE29      => r_WPT.INFORMATION139
                          ,P_WPT_ATTRIBUTE3      => r_WPT.INFORMATION113
                          ,P_WPT_ATTRIBUTE30      => r_WPT.INFORMATION140
                          ,P_WPT_ATTRIBUTE4      => r_WPT.INFORMATION114
                          ,P_WPT_ATTRIBUTE5      => r_WPT.INFORMATION115
                          ,P_WPT_ATTRIBUTE6      => r_WPT.INFORMATION116
                          ,P_WPT_ATTRIBUTE7      => r_WPT.INFORMATION117
                          ,P_WPT_ATTRIBUTE8      => r_WPT.INFORMATION118
                          ,P_WPT_ATTRIBUTE9      => r_WPT.INFORMATION119
                          ,P_WPT_ATTRIBUTE_CATEGORY      => r_WPT.INFORMATION110
                          ,P_WV_PRTN_RSN_CD      => r_WPT.INFORMATION12
             ,P_WV_PRTN_RSN_PTIP_ID      => l_wv_prtn_rsn_ptip_id
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
           ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;  -- l_update
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_WPT.information3) then
             --
             BEN_WV_PRTN_RSN_PTIP_API.delete_WV_PRTN_RSN_PTIP(
                --
                p_validate                       => false
                ,p_wv_prtn_rsn_ptip_id                   => l_wv_prtn_rsn_ptip_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'WPT',r_wpt.information5 );
     --
 end create_WPT_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_CTP_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_CTP_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ACRS_PTIP_CVG_ID  number;
   l_AUTO_ENRT_MTHD_RL  number;
   l_CMBN_PTIP_ID  number;
   l_CMBN_PTIP_OPT_ID  number;
   l_DFLT_ENRT_DET_RL  number;
   l_DPNT_CVG_END_DT_RL  number;
   l_DPNT_CVG_STRT_DT_RL  number;
   l_ENRT_CVG_END_DT_RL  number;
   l_ENRT_CVG_STRT_DT_RL  number;
   l_ENRT_RL  number;
   l_PGM_ID  number;
   l_PL_TYP_ID  number;
   l_POSTELCN_EDIT_RL  number;
   l_RQD_PERD_ENRT_NENRT_RL  number;
   l_RT_END_DT_RL  number;
   l_RT_STRT_DT_RL  number;
   l_VRFY_FMLY_MMBR_RL  number;
   cursor c_unique_CTP(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_PTIP_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_CTP_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_CTP(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_CTP_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     CTP.ptip_id new_value
   from BEN_PTIP_F CTP
   where
   --nvl(CTP.ACRS_PTIP_CVG_ID,-999)     = nvl(l_ACRS_PTIP_CVG_ID,-999)  and
   --nvl(CTP.CMBN_PTIP_ID,-999)     = nvl(l_CMBN_PTIP_ID,-999)  and
   --nvl(CTP.CMBN_PTIP_OPT_ID,-999)     = nvl(l_CMBN_PTIP_OPT_ID,-999)  and
   CTP.PGM_ID     = l_PGM_ID  and
   CTP.PL_TYP_ID     = l_PL_TYP_ID  and
   CTP.business_group_id  = c_business_group_id
   and   CTP.ptip_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_PTIP_F CTP1
                where
                --nvl(CTP1.ACRS_PTIP_CVG_ID,-999)     = nvl(l_ACRS_PTIP_CVG_ID,-999)  and
                --nvl(CTP1.CMBN_PTIP_ID,-999)     = nvl(l_CMBN_PTIP_ID,-999)  and
                --nvl(CTP1.CMBN_PTIP_OPT_ID,-999)     = nvl(l_CMBN_PTIP_OPT_ID,-999)  and
                CTP1.PGM_ID     = l_PGM_ID  and
                CTP1.PL_TYP_ID     = l_PL_TYP_ID  and
                CTP1.business_group_id  = c_business_group_id
                and   CTP1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_PTIP_F CTP2
                where
                --nvl(CTP2.ACRS_PTIP_CVG_ID,-999)     = nvl(l_ACRS_PTIP_CVG_ID,-999)  and
                --nvl(CTP2.CMBN_PTIP_ID,-999)     = nvl(l_CMBN_PTIP_ID,-999)  and
                --nvl(CTP2.CMBN_PTIP_OPT_ID,-999)     = nvl(l_CMBN_PTIP_OPT_ID,-999)  and
                CTP2.PGM_ID     = l_PGM_ID  and
                CTP2.PL_TYP_ID     = l_PL_TYP_ID  and
                CTP2.business_group_id  = c_business_group_id
                and   CTP2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_CTP                     c_CTP%rowtype;
   l_ptip_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
   l_susp_if_dpnt_ssn_nt_prv_cd        ben_ptip_f.susp_if_dpnt_ssn_nt_prv_cd%type;
   l_susp_if_dpnt_dob_nt_prv_cd        ben_ptip_f.susp_if_dpnt_dob_nt_prv_cd%type;
   l_susp_if_dpnt_adr_nt_prv_cd        ben_ptip_f.susp_if_dpnt_adr_nt_prv_cd%type;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_CTP_unique in c_unique_CTP('CTP') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_CTP_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_CTP_unique.table_route_id '||r_CTP_unique.table_route_id,10);
       hr_utility.set_location(' r_CTP_unique.information1 '||r_CTP_unique.information1,10);
       hr_utility.set_location( 'r_CTP_unique.information2 '||r_CTP_unique.information2,10);
       hr_utility.set_location( 'r_CTP_unique.information3 '||r_CTP_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       open c_CTP(r_CTP_unique.table_route_id,
                r_CTP_unique.information1,
                r_CTP_unique.information2,
                r_CTP_unique.information3 ) ;
       --
       fetch c_CTP into r_CTP ;
       --
       close c_CTP ;
       --
       l_dml_operation:= r_CTP_unique.dml_operation ;
       l_ACRS_PTIP_CVG_ID := get_fk('ACRS_PTIP_CVG_ID', r_CTP.INFORMATION274,l_dml_operation);
       l_AUTO_ENRT_MTHD_RL := get_fk('FORMULA_ID', r_CTP.INFORMATION275,l_dml_operation);
       l_CMBN_PTIP_ID := get_fk('CMBN_PTIP_ID', r_CTP.INFORMATION236,l_dml_operation);
       l_CMBN_PTIP_OPT_ID := get_fk('CMBN_PTIP_OPT_ID', r_CTP.INFORMATION249,l_dml_operation);
       l_DFLT_ENRT_DET_RL := get_fk('FORMULA_ID', r_CTP.INFORMATION277,l_dml_operation);
       l_DPNT_CVG_END_DT_RL := get_fk('FORMULA_ID', r_CTP.INFORMATION263,l_dml_operation);
       l_DPNT_CVG_STRT_DT_RL := get_fk('FORMULA_ID', r_CTP.INFORMATION262,l_dml_operation);
       l_ENRT_CVG_END_DT_RL := get_fk('FORMULA_ID', r_CTP.INFORMATION271,l_dml_operation);
       l_ENRT_CVG_STRT_DT_RL := get_fk('FORMULA_ID', r_CTP.INFORMATION270,l_dml_operation);
       l_ENRT_RL := get_fk('FORMULA_ID', r_CTP.INFORMATION276,l_dml_operation);
       l_PGM_ID := get_fk('PGM_ID', r_CTP.INFORMATION260,l_dml_operation);
       l_PL_TYP_ID := get_fk('PL_TYP_ID', r_CTP.INFORMATION248,l_dml_operation);
       l_POSTELCN_EDIT_RL := get_fk('FORMULA_ID', r_CTP.INFORMATION264,l_dml_operation);
       l_RQD_PERD_ENRT_NENRT_RL := get_fk('FORMULA_ID', r_CTP.INFORMATION269,l_dml_operation);
       l_RT_END_DT_RL := get_fk('FORMULA_ID', r_CTP.INFORMATION273,l_dml_operation);
       l_RT_STRT_DT_RL := get_fk('FORMULA_ID', r_CTP.INFORMATION272,l_dml_operation);
       l_VRFY_FMLY_MMBR_RL := get_fk('FORMULA_ID', r_CTP.INFORMATION278,l_dml_operation);
       --
       l_update := false;
       l_process_date := p_effective_date;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_CTP_unique.information2 and r_CTP_unique.information3 then
               l_update := true;
               if r_CTP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'PTIP_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PTIP_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_CTP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_CTP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_CTP_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
         --DOUBT         log_data('CTP',l_new_value,l_prefix || r_CTP_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END

       l_min_esd := null ;
       l_max_eed := null ;
       open c_CTP_min_max_dates(r_CTP_unique.table_route_id, r_CTP_unique.information1 ) ;
       fetch c_CTP_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_CTP_unique.information2);
      /* open c_CTP(r_CTP_unique.table_route_id,
                r_CTP_unique.information1,
                r_CTP_unique.information2,
                r_CTP_unique.information3 ) ;
       --
       fetch c_CTP into r_CTP ;
       --
       close c_CTP ;
       -- moved get_fk's to top
       */
       if p_reuse_object_flag = 'Y' then
         if c_CTP_min_max_dates%found then
           -- cursor to find the object
           open c_find_CTP_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_ptip_id, -999)  ) ;
           fetch c_find_CTP_in_target into l_new_value ;
           if c_find_CTP_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_PTIP_F',
                  p_base_key_column => 'PTIP_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_CTP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'PTIP_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PTIP_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_CTP_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_CTP_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;

             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_CTP_in_target ;
         --
         end if;
       end if ;
       --
       close c_CTP_min_max_dates ;
      end if; --if p_dml_operation
               --
               if not l_object_found_in_target OR l_update  then
         --
         l_current_pk_id := r_CTP.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_CTP.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         --ML
         if r_CTP.INFORMATION18  = 'Y' and  r_CTP.INFORMATION196 is null then
            l_susp_if_dpnt_ssn_nt_prv_cd  := 'RQDS';
         else
            l_susp_if_dpnt_ssn_nt_prv_cd  := r_CTP.INFORMATION196;
         end if;
       --
         if r_CTP.INFORMATION19  = 'Y' and  r_ctp.INFORMATION190 is null then
            l_susp_if_dpnt_dob_nt_prv_cd  := 'RQDS';
         else
            l_susp_if_dpnt_dob_nt_prv_cd  := r_ctp.INFORMATION190;
         end if;
       --
         if r_CTP.INFORMATION17  = 'Y' and  r_ctp.INFORMATION191 is null then
            l_susp_if_dpnt_adr_nt_prv_cd  := 'RQDS';
         else
            l_susp_if_dpnt_adr_nt_prv_cd  := r_ctp.INFORMATION191;
         end if;
       --
       if l_first_rec and not l_update then
           -- Call Create routine.

           BEN_PLAN_TYPE_IN_PROGRAM_API.CREATE_PLAN_TYPE_IN_PROGRAM(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
           ,P_ACRS_PTIP_CVG_ID      => l_ACRS_PTIP_CVG_ID
                        ,P_AUTO_ENRT_MTHD_RL      => l_AUTO_ENRT_MTHD_RL
                        ,P_CMBN_PTIP_ID      => l_CMBN_PTIP_ID
                        ,P_CMBN_PTIP_OPT_ID      => l_CMBN_PTIP_OPT_ID
                        ,P_COORD_CVG_FOR_ALL_PLS_FLAG      => r_CTP.INFORMATION15
                        ,P_CRS_THIS_PL_TYP_ONLY_FLAG      => r_CTP.INFORMATION20
                        ,P_CTP_ATTRIBUTE1      => r_CTP.INFORMATION111
                        ,P_CTP_ATTRIBUTE10      => r_CTP.INFORMATION120
                        ,P_CTP_ATTRIBUTE11      => r_CTP.INFORMATION121
                        ,P_CTP_ATTRIBUTE12      => r_CTP.INFORMATION122
                        ,P_CTP_ATTRIBUTE13      => r_CTP.INFORMATION123
                        ,P_CTP_ATTRIBUTE14      => r_CTP.INFORMATION124
                        ,P_CTP_ATTRIBUTE15      => r_CTP.INFORMATION125
                        ,P_CTP_ATTRIBUTE16      => r_CTP.INFORMATION126
                        ,P_CTP_ATTRIBUTE17      => r_CTP.INFORMATION127
                        ,P_CTP_ATTRIBUTE18      => r_CTP.INFORMATION128
                        ,P_CTP_ATTRIBUTE19      => r_CTP.INFORMATION129
                        ,P_CTP_ATTRIBUTE2      => r_CTP.INFORMATION112
                        ,P_CTP_ATTRIBUTE20      => r_CTP.INFORMATION130
                        ,P_CTP_ATTRIBUTE21      => r_CTP.INFORMATION131
                        ,P_CTP_ATTRIBUTE22      => r_CTP.INFORMATION132
                        ,P_CTP_ATTRIBUTE23      => r_CTP.INFORMATION133
                        ,P_CTP_ATTRIBUTE24      => r_CTP.INFORMATION134
                        ,P_CTP_ATTRIBUTE25      => r_CTP.INFORMATION135
                        ,P_CTP_ATTRIBUTE26      => r_CTP.INFORMATION136
                        ,P_CTP_ATTRIBUTE27      => r_CTP.INFORMATION137
                        ,P_CTP_ATTRIBUTE28      => r_CTP.INFORMATION138
                        ,P_CTP_ATTRIBUTE29      => r_CTP.INFORMATION139
                        ,P_CTP_ATTRIBUTE3      => r_CTP.INFORMATION113
                        ,P_CTP_ATTRIBUTE30      => r_CTP.INFORMATION140
                        ,P_CTP_ATTRIBUTE4      => r_CTP.INFORMATION114
                        ,P_CTP_ATTRIBUTE5      => r_CTP.INFORMATION115
                        ,P_CTP_ATTRIBUTE6      => r_CTP.INFORMATION116
                        ,P_CTP_ATTRIBUTE7      => r_CTP.INFORMATION117
                        ,P_CTP_ATTRIBUTE8      => r_CTP.INFORMATION118
                        ,P_CTP_ATTRIBUTE9      => r_CTP.INFORMATION119
                        ,P_CTP_ATTRIBUTE_CATEGORY      => r_CTP.INFORMATION110
                        ,P_DFLT_ENRT_CD      => r_CTP.INFORMATION45
                        ,P_DFLT_ENRT_DET_RL      => l_DFLT_ENRT_DET_RL
                        ,P_DPNT_ADRS_RQD_FLAG      => r_CTP.INFORMATION17
                        ,P_DPNT_CVG_END_DT_CD      => r_CTP.INFORMATION36
                        ,P_DPNT_CVG_END_DT_RL      => l_DPNT_CVG_END_DT_RL
                        ,P_DPNT_CVG_NO_CTFN_RQD_FLAG      => r_CTP.INFORMATION16
                        ,P_DPNT_CVG_STRT_DT_CD      => r_CTP.INFORMATION35
                        ,P_DPNT_CVG_STRT_DT_RL      => l_DPNT_CVG_STRT_DT_RL
                        ,P_DPNT_DOB_RQD_FLAG      => r_CTP.INFORMATION19
                        ,P_DPNT_DSGN_CD      => r_CTP.INFORMATION34
                        ,P_DPNT_LEGV_ID_RQD_FLAG      => r_CTP.INFORMATION18
                        ,P_DRVBL_FCTR_APLS_RTS_FLAG      => r_CTP.INFORMATION29
                        ,P_DRVBL_FCTR_PRTN_ELIG_FLAG      => r_CTP.INFORMATION30
                        ,P_DRVD_FCTR_DPNT_CVG_FLAG      => r_CTP.INFORMATION24
                        ,P_ELIG_APLS_FLAG      => r_CTP.INFORMATION31
                        ,P_ENRT_CD      => r_CTP.INFORMATION44
                        ,P_ENRT_CVG_END_DT_CD      => r_CTP.INFORMATION40
                        ,P_ENRT_CVG_END_DT_RL      => l_ENRT_CVG_END_DT_RL
                        ,P_ENRT_CVG_STRT_DT_CD      => r_CTP.INFORMATION39
                        ,P_ENRT_CVG_STRT_DT_RL      => l_ENRT_CVG_STRT_DT_RL
                        ,P_ENRT_MTHD_CD      => r_CTP.INFORMATION43
                        ,P_ENRT_RL      => l_ENRT_RL
                        ,P_IVR_IDENT      => r_CTP.INFORMATION141
                        ,P_MN_ENRD_RQD_OVRID_NUM      => r_CTP.INFORMATION266
                        ,P_MX_CVG_ALWD_AMT      => r_CTP.INFORMATION293
                        ,P_MX_ENRD_ALWD_OVRID_NUM      => r_CTP.INFORMATION267
                        ,P_NO_MN_PL_TYP_OVERID_FLAG      => r_CTP.INFORMATION25
                        ,P_NO_MX_PL_TYP_OVRID_FLAG      => r_CTP.INFORMATION21
                        ,P_ORDR_NUM      => r_CTP.INFORMATION268
                        ,P_PER_CVRD_CD      => r_CTP.INFORMATION11
                        ,P_PGM_ID      => l_PGM_ID
                        ,P_PL_TYP_ID      => l_PL_TYP_ID
                        ,P_POSTELCN_EDIT_RL      => l_POSTELCN_EDIT_RL
                        ,P_PRTN_ELIG_OVRID_ALWD_FLAG      => r_CTP.INFORMATION32
                        ,P_PRVDS_CR_FLAG      => r_CTP.INFORMATION22
                        ,P_PTIP_ID      => l_ptip_id
                        ,P_PTIP_STAT_CD      => r_CTP.INFORMATION14
                        ,P_RQD_ENRT_PERD_TCO_CD      => r_CTP.INFORMATION38
                        ,P_RQD_PERD_ENRT_NENRT_RL      => l_RQD_PERD_ENRT_NENRT_RL
                        ,P_RQD_PERD_ENRT_NENRT_TM_UOM      => r_CTP.INFORMATION37
                        ,P_RQD_PERD_ENRT_NENRT_VAL      => r_CTP.INFORMATION287
                        ,P_RT_END_DT_CD      => r_CTP.INFORMATION42
                        ,P_RT_END_DT_RL      => l_RT_END_DT_RL
                        ,P_RT_STRT_DT_CD      => r_CTP.INFORMATION41
                        ,P_RT_STRT_DT_RL      => l_RT_STRT_DT_RL
                        ,P_SBJ_TO_DPNT_LF_INS_MX_FLAG      => r_CTP.INFORMATION27
                        ,P_SBJ_TO_SPS_LF_INS_MX_FLAG      => r_CTP.INFORMATION26
                        ,P_SHORT_CODE      => r_CTP.INFORMATION12
                        ,P_SHORT_NAME      => r_CTP.INFORMATION13
                        ,P_TRK_INELIG_PER_FLAG      => r_CTP.INFORMATION33
                        ,P_URL_REF_NAME      => r_CTP.INFORMATION185
                        ,P_USE_TO_SUM_EE_LF_INS_FLAG      => r_CTP.INFORMATION28
                        ,P_VRFY_FMLY_MMBR_CD      => r_CTP.INFORMATION46
                        ,P_VRFY_FMLY_MMBR_RL      => l_VRFY_FMLY_MMBR_RL
             ,P_WVBL_FLAG      => r_CTP.INFORMATION23
             --ML
             ,p_SUSP_IF_DPNT_SSN_NT_PRV_CD    => l_susp_if_dpnt_ssn_nt_prv_cd
             ,p_SUSP_IF_DPNT_DOB_NT_PRV_CD    => l_susp_if_dpnt_dob_nt_prv_cd
             ,p_SUSP_IF_DPNT_ADR_NT_PRV_CD    => l_susp_if_dpnt_adr_nt_prv_cd
             ,p_SUSP_IF_CTFN_NOT_DPNT_FLAG    => nvl(r_CTP.INFORMATION192,'Y')
             ,p_DPNT_CTFN_DETERMINE_CD    => r_CTP.INFORMATION193
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_ptip_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'PTIP_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_CTP.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_PTIP_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_CTP_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
            hr_utility.set_location(' BEN_PTIP_F UPDATE_PLAN_TYPE_IN_PROGRAM ',30);
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_CTP.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_CTP.information3,
               p_effective_start_date  => r_CTP.information2,
               p_dml_operation         => r_CTP.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_PTIP_ID   := r_CTP.information1;
             l_object_version_number := r_CTP.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END

           BEN_PLAN_TYPE_IN_PROGRAM_API.UPDATE_PLAN_TYPE_IN_PROGRAM(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
           ,P_ACRS_PTIP_CVG_ID      => l_ACRS_PTIP_CVG_ID
                        ,P_AUTO_ENRT_MTHD_RL      => l_AUTO_ENRT_MTHD_RL
                        ,P_CMBN_PTIP_ID      => l_CMBN_PTIP_ID
                        ,P_CMBN_PTIP_OPT_ID      => l_CMBN_PTIP_OPT_ID
                        ,P_COORD_CVG_FOR_ALL_PLS_FLAG      => r_CTP.INFORMATION15
                        ,P_CRS_THIS_PL_TYP_ONLY_FLAG      => r_CTP.INFORMATION20
                        ,P_CTP_ATTRIBUTE1      => r_CTP.INFORMATION111
                        ,P_CTP_ATTRIBUTE10      => r_CTP.INFORMATION120
                        ,P_CTP_ATTRIBUTE11      => r_CTP.INFORMATION121
                        ,P_CTP_ATTRIBUTE12      => r_CTP.INFORMATION122
                        ,P_CTP_ATTRIBUTE13      => r_CTP.INFORMATION123
                        ,P_CTP_ATTRIBUTE14      => r_CTP.INFORMATION124
                        ,P_CTP_ATTRIBUTE15      => r_CTP.INFORMATION125
                        ,P_CTP_ATTRIBUTE16      => r_CTP.INFORMATION126
                        ,P_CTP_ATTRIBUTE17      => r_CTP.INFORMATION127
                        ,P_CTP_ATTRIBUTE18      => r_CTP.INFORMATION128
                        ,P_CTP_ATTRIBUTE19      => r_CTP.INFORMATION129
                        ,P_CTP_ATTRIBUTE2      => r_CTP.INFORMATION112
                        ,P_CTP_ATTRIBUTE20      => r_CTP.INFORMATION130
                        ,P_CTP_ATTRIBUTE21      => r_CTP.INFORMATION131
                        ,P_CTP_ATTRIBUTE22      => r_CTP.INFORMATION132
                        ,P_CTP_ATTRIBUTE23      => r_CTP.INFORMATION133
                        ,P_CTP_ATTRIBUTE24      => r_CTP.INFORMATION134
                        ,P_CTP_ATTRIBUTE25      => r_CTP.INFORMATION135
                        ,P_CTP_ATTRIBUTE26      => r_CTP.INFORMATION136
                        ,P_CTP_ATTRIBUTE27      => r_CTP.INFORMATION137
                        ,P_CTP_ATTRIBUTE28      => r_CTP.INFORMATION138
                        ,P_CTP_ATTRIBUTE29      => r_CTP.INFORMATION139
                        ,P_CTP_ATTRIBUTE3      => r_CTP.INFORMATION113
                        ,P_CTP_ATTRIBUTE30      => r_CTP.INFORMATION140
                        ,P_CTP_ATTRIBUTE4      => r_CTP.INFORMATION114
                        ,P_CTP_ATTRIBUTE5      => r_CTP.INFORMATION115
                        ,P_CTP_ATTRIBUTE6      => r_CTP.INFORMATION116
                        ,P_CTP_ATTRIBUTE7      => r_CTP.INFORMATION117
                        ,P_CTP_ATTRIBUTE8      => r_CTP.INFORMATION118
                        ,P_CTP_ATTRIBUTE9      => r_CTP.INFORMATION119
                        ,P_CTP_ATTRIBUTE_CATEGORY      => r_CTP.INFORMATION110
                        ,P_DFLT_ENRT_CD      => r_CTP.INFORMATION45
                        ,P_DFLT_ENRT_DET_RL      => l_DFLT_ENRT_DET_RL
                        ,P_DPNT_ADRS_RQD_FLAG      => r_CTP.INFORMATION17
                        ,P_DPNT_CVG_END_DT_CD      => r_CTP.INFORMATION36
                        ,P_DPNT_CVG_END_DT_RL      => l_DPNT_CVG_END_DT_RL
                        ,P_DPNT_CVG_NO_CTFN_RQD_FLAG      => r_CTP.INFORMATION16
                        ,P_DPNT_CVG_STRT_DT_CD      => r_CTP.INFORMATION35
                        ,P_DPNT_CVG_STRT_DT_RL      => l_DPNT_CVG_STRT_DT_RL
                        ,P_DPNT_DOB_RQD_FLAG      => r_CTP.INFORMATION19
                        ,P_DPNT_DSGN_CD      => r_CTP.INFORMATION34
                        ,P_DPNT_LEGV_ID_RQD_FLAG      => r_CTP.INFORMATION18
                        ,P_DRVBL_FCTR_APLS_RTS_FLAG      => r_CTP.INFORMATION29
                        ,P_DRVBL_FCTR_PRTN_ELIG_FLAG      => r_CTP.INFORMATION30
                        ,P_DRVD_FCTR_DPNT_CVG_FLAG      => r_CTP.INFORMATION24
                        ,P_ELIG_APLS_FLAG      => r_CTP.INFORMATION31
                        ,P_ENRT_CD      => r_CTP.INFORMATION44
                        ,P_ENRT_CVG_END_DT_CD      => r_CTP.INFORMATION40
                        ,P_ENRT_CVG_END_DT_RL      => l_ENRT_CVG_END_DT_RL
                        ,P_ENRT_CVG_STRT_DT_CD      => r_CTP.INFORMATION39
                        ,P_ENRT_CVG_STRT_DT_RL      => l_ENRT_CVG_STRT_DT_RL
                        ,P_ENRT_MTHD_CD      => r_CTP.INFORMATION43
                        ,P_ENRT_RL      => l_ENRT_RL
                        ,P_IVR_IDENT      => r_CTP.INFORMATION141
                        ,P_MN_ENRD_RQD_OVRID_NUM      => r_CTP.INFORMATION266
                        ,P_MX_CVG_ALWD_AMT      => r_CTP.INFORMATION293
                        ,P_MX_ENRD_ALWD_OVRID_NUM      => r_CTP.INFORMATION267
                        ,P_NO_MN_PL_TYP_OVERID_FLAG      => r_CTP.INFORMATION25
                        ,P_NO_MX_PL_TYP_OVRID_FLAG      => r_CTP.INFORMATION21
                        ,P_ORDR_NUM      => r_CTP.INFORMATION268
                        ,P_PER_CVRD_CD      => r_CTP.INFORMATION11
                        ,P_PGM_ID      => l_PGM_ID
                        ,P_PL_TYP_ID      => l_PL_TYP_ID
                        ,P_POSTELCN_EDIT_RL      => l_POSTELCN_EDIT_RL
                        ,P_PRTN_ELIG_OVRID_ALWD_FLAG      => r_CTP.INFORMATION32
                        ,P_PRVDS_CR_FLAG      => r_CTP.INFORMATION22
                        ,P_PTIP_ID      => l_ptip_id
                        ,P_PTIP_STAT_CD      => r_CTP.INFORMATION14
                        ,P_RQD_ENRT_PERD_TCO_CD      => r_CTP.INFORMATION38
                        ,P_RQD_PERD_ENRT_NENRT_RL      => l_RQD_PERD_ENRT_NENRT_RL
                        ,P_RQD_PERD_ENRT_NENRT_TM_UOM      => r_CTP.INFORMATION37
                        ,P_RQD_PERD_ENRT_NENRT_VAL      => r_CTP.INFORMATION287
                        ,P_RT_END_DT_CD      => r_CTP.INFORMATION42
                        ,P_RT_END_DT_RL      => l_RT_END_DT_RL
                        ,P_RT_STRT_DT_CD      => r_CTP.INFORMATION41
                        ,P_RT_STRT_DT_RL      => l_RT_STRT_DT_RL
                        ,P_SBJ_TO_DPNT_LF_INS_MX_FLAG      => r_CTP.INFORMATION27
                        ,P_SBJ_TO_SPS_LF_INS_MX_FLAG      => r_CTP.INFORMATION26
                        ,P_SHORT_CODE      => r_CTP.INFORMATION12
                        ,P_SHORT_NAME      => r_CTP.INFORMATION13
                        ,P_TRK_INELIG_PER_FLAG      => r_CTP.INFORMATION33
                        ,P_URL_REF_NAME      => r_CTP.INFORMATION185
                        ,P_USE_TO_SUM_EE_LF_INS_FLAG      => r_CTP.INFORMATION28
                        ,P_VRFY_FMLY_MMBR_CD      => r_CTP.INFORMATION46
                        ,P_VRFY_FMLY_MMBR_RL      => l_VRFY_FMLY_MMBR_RL
             ,P_WVBL_FLAG      => r_CTP.INFORMATION23
             --ML
             ,p_SUSP_IF_DPNT_SSN_NT_PRV_CD    => l_susp_if_dpnt_ssn_nt_prv_cd
             ,p_SUSP_IF_DPNT_DOB_NT_PRV_CD    => l_susp_if_dpnt_dob_nt_prv_cd
             ,p_SUSP_IF_DPNT_ADR_NT_PRV_CD    => l_susp_if_dpnt_adr_nt_prv_cd
             ,p_SUSP_IF_CTFN_NOT_DPNT_FLAG    => nvl(r_CTP.INFORMATION192,'Y')
             ,p_DPNT_CTFN_DETERMINE_CD    => r_CTP.INFORMATION193
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
            end if;  -- l_update
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_CTP.information3) then
             --
             BEN_PLAN_TYPE_IN_PROGRAM_API.delete_PLAN_TYPE_IN_PROGRAM(
                --
                p_validate                       => false
                ,p_ptip_id                   => l_ptip_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'CTP',r_ctp.information5 );
     --
 end create_CTP_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_LCC_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_LCC_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_CTFN_RQD_WHEN_RL  number;
   l_LER_CHG_DPNT_CVG_ID  number;
   l_DPNT_CVG_CTFN_TYP_CD varchar2(30);
   --
   cursor c_unique_LCC(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_LER_CHG_DPNT_CVG_CTFN_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_LCC_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_LCC(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_LCC_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     LCC.ler_chg_dpnt_cvg_ctfn_id new_value
   from BEN_LER_CHG_DPNT_CVG_CTFN_F LCC
   where
   LCC.LER_CHG_DPNT_CVG_ID     = l_LER_CHG_DPNT_CVG_ID  and
   LCC.DPNT_CVG_CTFN_TYP_CD  = l_DPNT_CVG_CTFN_TYP_CD and
   LCC.business_group_id  = c_business_group_id
   and   LCC.ler_chg_dpnt_cvg_ctfn_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_LER_CHG_DPNT_CVG_CTFN_F LCC1
                where
                LCC1.LER_CHG_DPNT_CVG_ID     = l_LER_CHG_DPNT_CVG_ID  and
                LCC1.DPNT_CVG_CTFN_TYP_CD  = l_DPNT_CVG_CTFN_TYP_CD and
                LCC1.business_group_id  = c_business_group_id
                and   LCC1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_LER_CHG_DPNT_CVG_CTFN_F LCC2
                where
                LCC2.LER_CHG_DPNT_CVG_ID     = l_LER_CHG_DPNT_CVG_ID  and
                LCC2.DPNT_CVG_CTFN_TYP_CD  = l_DPNT_CVG_CTFN_TYP_CD and
                LCC2.business_group_id  = c_business_group_id
                and   LCC2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_LCC                     c_LCC%rowtype;
   l_ler_chg_dpnt_cvg_ctfn_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_LCC_unique in c_unique_LCC('LCC') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_LCC_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_LCC_unique.table_route_id '||r_LCC_unique.table_route_id,10);
       hr_utility.set_location(' r_LCC_unique.information1 '||r_LCC_unique.information1,10);
       hr_utility.set_location( 'r_LCC_unique.information2 '||r_LCC_unique.information2,10);
       hr_utility.set_location( 'r_LCC_unique.information3 '||r_LCC_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
          open c_LCC(r_LCC_unique.table_route_id,
                r_LCC_unique.information1,
                r_LCC_unique.information2,
                r_LCC_unique.information3 ) ;
       --
       fetch c_LCC into r_LCC ;
       --
       close c_LCC ;
       --
       l_dml_operation:= r_LCC_unique.dml_operation ;
       l_CTFN_RQD_WHEN_RL := get_fk('FORMULA_ID', r_LCC.INFORMATION261,l_dml_operation );
       l_LER_CHG_DPNT_CVG_ID := get_fk('LER_CHG_DPNT_CVG_ID', r_LCC.INFORMATION260,l_dml_operation );
       l_DPNT_CVG_CTFN_TYP_CD := r_LCC.information12 ;
       --
       l_update := false;
       l_process_date := p_effective_date;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_LCC_unique.information2 and r_LCC_unique.information3 then
               l_update := true;
               if r_LCC_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'LER_CHG_DPNT_CVG_CTFN_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'LER_CHG_DPNT_CVG_CTFN_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_LCC_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_LCC_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LCC_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
 --DOUBT                 log_data('LCC',l_new_value,l_prefix || r_LCC_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_LCC_min_max_dates(r_LCC_unique.table_route_id, r_LCC_unique.information1 ) ;
       fetch c_LCC_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_LCC_unique.information2);
   /*    open c_LCC(r_LCC_unique.table_route_id,
                r_LCC_unique.information1,
                r_LCC_unique.information2,
                r_LCC_unique.information3 ) ;
       --
       fetch c_LCC into r_LCC ;
       --
       close c_LCC ; */
       --

       if p_reuse_object_flag = 'Y' then
         if c_LCC_min_max_dates%found then
           -- cursor to find the object
           open c_find_LCC_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_ler_chg_dpnt_cvg_ctfn_id, -999)  ) ;
           fetch c_find_LCC_in_target into l_new_value ;
           if c_find_LCC_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_LER_CHG_DPNT_CVG_CTFN_F',
                  p_base_key_column => 'LER_CHG_DPNT_CVG_CTFN_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_LCC_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'LER_CHG_DPNT_CVG_CTFN_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'LER_CHG_DPNT_CVG_CTFN_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_LCC_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LCC_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_LCC_in_target ;
         --
         end if;
       end if ;
       --
       close c_LCC_min_max_dates ;
       end if; --if p_dml_operation
               --
               if not l_object_found_in_target OR l_update  then
         --
         l_current_pk_id := r_LCC.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_LCC.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

        if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_LER_CHG_DPNT_CVG_CTFN_F CREATE_LER_CHG_DPNT_CVG_CTF ',20);
           BEN_LER_CHG_DPNT_CVG_CTF_API.CREATE_LER_CHG_DPNT_CVG_CTF(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
              ,P_CTFN_RQD_WHEN_RL      => l_CTFN_RQD_WHEN_RL
                        ,P_DPNT_CVG_CTFN_TYP_CD      => r_LCC.INFORMATION12
                        ,P_LACK_CTFN_SSPND_ENRT_FLAG      => r_LCC.INFORMATION13
                        ,P_LCC_ATTRIBUTE1      => r_LCC.INFORMATION111
                        ,P_LCC_ATTRIBUTE10      => r_LCC.INFORMATION120
                        ,P_LCC_ATTRIBUTE11      => r_LCC.INFORMATION121
                        ,P_LCC_ATTRIBUTE12      => r_LCC.INFORMATION122
                        ,P_LCC_ATTRIBUTE13      => r_LCC.INFORMATION123
                        ,P_LCC_ATTRIBUTE14      => r_LCC.INFORMATION124
                        ,P_LCC_ATTRIBUTE15      => r_LCC.INFORMATION125
                        ,P_LCC_ATTRIBUTE16      => r_LCC.INFORMATION126
                        ,P_LCC_ATTRIBUTE17      => r_LCC.INFORMATION127
                        ,P_LCC_ATTRIBUTE18      => r_LCC.INFORMATION128
                        ,P_LCC_ATTRIBUTE19      => r_LCC.INFORMATION129
                        ,P_LCC_ATTRIBUTE2      => r_LCC.INFORMATION112
                        ,P_LCC_ATTRIBUTE20      => r_LCC.INFORMATION130
                        ,P_LCC_ATTRIBUTE21      => r_LCC.INFORMATION131
                        ,P_LCC_ATTRIBUTE22      => r_LCC.INFORMATION132
                        ,P_LCC_ATTRIBUTE23      => r_LCC.INFORMATION133
                        ,P_LCC_ATTRIBUTE24      => r_LCC.INFORMATION134
                        ,P_LCC_ATTRIBUTE25      => r_LCC.INFORMATION135
                        ,P_LCC_ATTRIBUTE26      => r_LCC.INFORMATION136
                        ,P_LCC_ATTRIBUTE27      => r_LCC.INFORMATION137
                        ,P_LCC_ATTRIBUTE28      => r_LCC.INFORMATION138
                        ,P_LCC_ATTRIBUTE29      => r_LCC.INFORMATION139
                        ,P_LCC_ATTRIBUTE3      => r_LCC.INFORMATION113
                        ,P_LCC_ATTRIBUTE30      => r_LCC.INFORMATION140
                        ,P_LCC_ATTRIBUTE4      => r_LCC.INFORMATION114
                        ,P_LCC_ATTRIBUTE5      => r_LCC.INFORMATION115
                        ,P_LCC_ATTRIBUTE6      => r_LCC.INFORMATION116
                        ,P_LCC_ATTRIBUTE7      => r_LCC.INFORMATION117
                        ,P_LCC_ATTRIBUTE8      => r_LCC.INFORMATION118
                        ,P_LCC_ATTRIBUTE9      => r_LCC.INFORMATION119
                        ,P_LCC_ATTRIBUTE_CATEGORY      => r_LCC.INFORMATION110
                        ,P_LER_CHG_DPNT_CVG_CTFN_ID      => l_ler_chg_dpnt_cvg_ctfn_id
                        ,P_LER_CHG_DPNT_CVG_ID      => l_LER_CHG_DPNT_CVG_ID
                        ,P_RLSHP_TYP_CD      => r_LCC.INFORMATION14
             ,P_RQD_FLAG      => r_LCC.INFORMATION11
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_ler_chg_dpnt_cvg_ctfn_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'LER_CHG_DPNT_CVG_CTFN_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_LCC.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_LER_CHG_DPNT_CVG_CTFN_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LCC_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
              hr_utility.set_location(' BEN_LER_CHG_DPNT_CVG_CTFN_F UPDATE_LER_CHG_DPNT_CVG_CTF ',30);
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_LCC.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_LCC.information3,
               p_effective_start_date  => r_LCC.information2,
               p_dml_operation         => r_LCC.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_LER_CHG_DPNT_CVG_CTFN_ID   := r_LCC.information1;
             l_object_version_number := r_LCC.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_LER_CHG_DPNT_CVG_CTF_API.UPDATE_LER_CHG_DPNT_CVG_CTF(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
           ,P_CTFN_RQD_WHEN_RL      => l_CTFN_RQD_WHEN_RL
                       ,P_DPNT_CVG_CTFN_TYP_CD      => r_LCC.INFORMATION12
                       ,P_LACK_CTFN_SSPND_ENRT_FLAG      => r_LCC.INFORMATION13
                       ,P_LCC_ATTRIBUTE1      => r_LCC.INFORMATION111
                       ,P_LCC_ATTRIBUTE10      => r_LCC.INFORMATION120
                       ,P_LCC_ATTRIBUTE11      => r_LCC.INFORMATION121
                       ,P_LCC_ATTRIBUTE12      => r_LCC.INFORMATION122
                       ,P_LCC_ATTRIBUTE13      => r_LCC.INFORMATION123
                       ,P_LCC_ATTRIBUTE14      => r_LCC.INFORMATION124
                       ,P_LCC_ATTRIBUTE15      => r_LCC.INFORMATION125
                       ,P_LCC_ATTRIBUTE16      => r_LCC.INFORMATION126
                       ,P_LCC_ATTRIBUTE17      => r_LCC.INFORMATION127
                       ,P_LCC_ATTRIBUTE18      => r_LCC.INFORMATION128
                       ,P_LCC_ATTRIBUTE19      => r_LCC.INFORMATION129
                       ,P_LCC_ATTRIBUTE2      => r_LCC.INFORMATION112
                       ,P_LCC_ATTRIBUTE20      => r_LCC.INFORMATION130
                       ,P_LCC_ATTRIBUTE21      => r_LCC.INFORMATION131
                       ,P_LCC_ATTRIBUTE22      => r_LCC.INFORMATION132
                       ,P_LCC_ATTRIBUTE23      => r_LCC.INFORMATION133
                       ,P_LCC_ATTRIBUTE24      => r_LCC.INFORMATION134
                       ,P_LCC_ATTRIBUTE25      => r_LCC.INFORMATION135
                       ,P_LCC_ATTRIBUTE26      => r_LCC.INFORMATION136
                       ,P_LCC_ATTRIBUTE27      => r_LCC.INFORMATION137
                       ,P_LCC_ATTRIBUTE28      => r_LCC.INFORMATION138
                       ,P_LCC_ATTRIBUTE29      => r_LCC.INFORMATION139
                       ,P_LCC_ATTRIBUTE3      => r_LCC.INFORMATION113
                       ,P_LCC_ATTRIBUTE30      => r_LCC.INFORMATION140
                       ,P_LCC_ATTRIBUTE4      => r_LCC.INFORMATION114
                       ,P_LCC_ATTRIBUTE5      => r_LCC.INFORMATION115
                       ,P_LCC_ATTRIBUTE6      => r_LCC.INFORMATION116
                       ,P_LCC_ATTRIBUTE7      => r_LCC.INFORMATION117
                       ,P_LCC_ATTRIBUTE8      => r_LCC.INFORMATION118
                       ,P_LCC_ATTRIBUTE9      => r_LCC.INFORMATION119
                       ,P_LCC_ATTRIBUTE_CATEGORY      => r_LCC.INFORMATION110
                       ,P_LER_CHG_DPNT_CVG_CTFN_ID      => l_ler_chg_dpnt_cvg_ctfn_id
                       ,P_LER_CHG_DPNT_CVG_ID      => l_LER_CHG_DPNT_CVG_ID
                       ,P_RLSHP_TYP_CD      => r_LCC.INFORMATION14
             ,P_RQD_FLAG      => r_LCC.INFORMATION11
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
               ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
            end if;  -- l_update
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_LCC.information3) then
             --
             BEN_LER_CHG_DPNT_CVG_CTF_API.delete_LER_CHG_DPNT_CVG_CTF(
                --
                p_validate                       => false
                ,p_ler_chg_dpnt_cvg_ctfn_id                   => l_ler_chg_dpnt_cvg_ctfn_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'LCC',r_lcc.information5 );
     --
 end create_LCC_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_CER_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_CER_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_FORMULA_ID  number;
   l_PRTN_ELIG_ID  number;
   cursor c_unique_CER(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
  ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_PRTN_ELIGY_RL_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_CER_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_CER(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_CER_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     cer.prtn_eligy_rl_id new_value
   from BEN_PRTN_ELIGY_RL_F CER
   where
   cer.FORMULA_ID     = l_FORMULA_ID  and
   cer.PRTN_ELIG_ID     = l_PRTN_ELIG_ID  and
   cer.business_group_id  = c_business_group_id
   and   cer.prtn_eligy_rl_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_PRTN_ELIGY_RL_F CER1
                where
                CER1.FORMULA_ID     = l_FORMULA_ID  and
                CER1.PRTN_ELIG_ID     = l_PRTN_ELIG_ID  and
                CER1.business_group_id  = c_business_group_id
                and   CER1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_PRTN_ELIGY_RL_F CER2
                where
                CER2.FORMULA_ID     = l_FORMULA_ID  and
                CER2.PRTN_ELIG_ID     = l_PRTN_ELIG_ID  and
                CER2.business_group_id  = c_business_group_id
                and   CER2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_CER                     c_CER%rowtype;
   l_prtn_eligy_rl_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_CER_unique in c_unique_CER('CER') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_CER_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_CER_unique.table_route_id '||r_CER_unique.table_route_id,10);
       hr_utility.set_location(' r_CER_unique.information1 '||r_CER_unique.information1,10);
       hr_utility.set_location( 'r_CER_unique.information2 '||r_CER_unique.information2,10);
       hr_utility.set_location( 'r_CER_unique.information3 '||r_CER_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       open c_CER(r_CER_unique.table_route_id,
                r_CER_unique.information1,
                r_CER_unique.information2,
                r_CER_unique.information3 ) ;
       --
       fetch c_CER into r_CER;
       --
       close c_CER ;
       --
       l_dml_operation:= r_CER_unique.dml_operation ;
       l_FORMULA_ID := get_fk('FORMULA_ID', r_CER.INFORMATION251,l_dml_operation );
       l_PRTN_ELIG_ID := get_fk('PRTN_ELIG_ID', r_CER.INFORMATION229,l_dml_operation );
       --
       l_update := false;
       l_process_date := p_effective_date;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_CER_unique.information2 and r_CER_unique.information3 then
               l_update := true;
               if r_CER_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'PRTN_ELIGY_RL_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PRTN_ELIGY_RL_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_CER_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_CER_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_CER_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
      --DOUBT            log_data('CER',l_new_value,l_prefix || r_CER_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_CER_min_max_dates(r_CER_unique.table_route_id, r_CER_unique.information1 ) ;
       fetch c_CER_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_CER_unique.information2);
    /*   open c_CER(r_CER_unique.table_route_id,
                r_CER_unique.information1,
                r_CER_unique.information2,
                r_CER_unique.information3 ) ;
       --
       fetch c_CER into r_CER;
       --
       close c_CER ;  */
       --

       if p_reuse_object_flag = 'Y' then
         if c_CER_min_max_dates%found then
           -- cursor to find the object
           open c_find_CER_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_prtn_eligy_rl_id, -999)  ) ;
           fetch c_find_CER_in_target into l_new_value ;
           if c_find_CER_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_PRTN_ELIGY_RL_F',
                  p_base_key_column => 'PRTN_ELIGY_RL_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_CER_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'PRTN_ELIGY_RL_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PRTN_ELIGY_RL_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_CER_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_CER_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_CER_in_target ;
         --
         end if;
       end if ;
       --
       close c_CER_min_max_dates ;
       end if; --if p_dml_operation
               --
       if not l_object_found_in_target OR l_update  then
         --
         l_current_pk_id := r_CER.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_cer.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_PRTN_ELIGY_RL_F CREATE_ELIGIBILITY_RULE ',20);
           BEN_ELIGIBILITY_RULE_API.CREATE_ELIGIBILITY_RULE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CER_ATTRIBUTE1      => r_CER.INFORMATION111
             ,P_CER_ATTRIBUTE10      => r_CER.INFORMATION120
             ,P_CER_ATTRIBUTE11      => r_CER.INFORMATION121
             ,P_CER_ATTRIBUTE12      => r_CER.INFORMATION122
             ,P_CER_ATTRIBUTE13      => r_CER.INFORMATION123
             ,P_CER_ATTRIBUTE14      => r_CER.INFORMATION124
             ,P_CER_ATTRIBUTE15      => r_CER.INFORMATION125
             ,P_CER_ATTRIBUTE16      => r_CER.INFORMATION126
             ,P_CER_ATTRIBUTE17      => r_CER.INFORMATION127
             ,P_CER_ATTRIBUTE18      => r_CER.INFORMATION128
             ,P_CER_ATTRIBUTE19      => r_CER.INFORMATION129
             ,P_CER_ATTRIBUTE2      => r_CER.INFORMATION112
             ,P_CER_ATTRIBUTE20      => r_CER.INFORMATION130
             ,P_CER_ATTRIBUTE21      => r_CER.INFORMATION131
             ,P_CER_ATTRIBUTE22      => r_CER.INFORMATION132
             ,P_CER_ATTRIBUTE23      => r_CER.INFORMATION133
             ,P_CER_ATTRIBUTE24      => r_CER.INFORMATION134
             ,P_CER_ATTRIBUTE25      => r_CER.INFORMATION135
             ,P_CER_ATTRIBUTE26      => r_CER.INFORMATION136
             ,P_CER_ATTRIBUTE27      => r_CER.INFORMATION137
             ,P_CER_ATTRIBUTE28      => r_CER.INFORMATION138
             ,P_CER_ATTRIBUTE29      => r_CER.INFORMATION139
             ,P_CER_ATTRIBUTE3      => r_CER.INFORMATION113
             ,P_CER_ATTRIBUTE30      => r_CER.INFORMATION140
             ,P_CER_ATTRIBUTE4      => r_CER.INFORMATION114
             ,P_CER_ATTRIBUTE5      => r_CER.INFORMATION115
             ,P_CER_ATTRIBUTE6      => r_CER.INFORMATION116
             ,P_CER_ATTRIBUTE7      => r_CER.INFORMATION117
             ,P_CER_ATTRIBUTE8      => r_CER.INFORMATION118
             ,P_CER_ATTRIBUTE9      => r_CER.INFORMATION119
             ,P_CER_ATTRIBUTE_CATEGORY      => r_CER.INFORMATION110
             ,P_DRVBL_FCTR_APLS_FLAG      => r_CER.INFORMATION11
             ,P_FORMULA_ID      => l_FORMULA_ID
             ,P_MNDTRY_FLAG      => r_CER.INFORMATION12
             ,P_ORDR_TO_APLY_NUM      => r_CER.INFORMATION260
             ,P_PRTN_ELIGY_RL_ID      => l_prtn_eligy_rl_id
             ,P_PRTN_ELIG_ID      => l_PRTN_ELIG_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_prtn_eligy_rl_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'PRTN_ELIGY_RL_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_cer.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_PRTN_ELIGY_RL_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_CER_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
            hr_utility.set_location(' BEN_PRTN_ELIGY_RL_F UPDATE_ELIGIBILITY_RULE ',30);
           --UPD START
            hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
            --
            if l_update then
              --
              l_datetrack_mode := r_CER.datetrack_mode ;
              --
              get_dt_modes(
                p_effective_date        => l_process_date,
                p_effective_end_date    => r_CER.information3,
                p_effective_start_date  => r_CER.information2,
                p_dml_operation         => r_CER.dml_operation,
                p_datetrack_mode        => l_datetrack_mode );
            --    p_update                => l_update
              --
              l_effective_date := l_process_date;
              l_PRTN_ELIGY_RL_ID   := r_CER.information1;
              l_object_version_number := r_CER.information265;
              --
            end if;
            --
            hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
            --
            IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END

           BEN_ELIGIBILITY_RULE_API.UPDATE_ELIGIBILITY_RULE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CER_ATTRIBUTE1      => r_CER.INFORMATION111
             ,P_CER_ATTRIBUTE10      => r_CER.INFORMATION120
             ,P_CER_ATTRIBUTE11      => r_CER.INFORMATION121
             ,P_CER_ATTRIBUTE12      => r_CER.INFORMATION122
             ,P_CER_ATTRIBUTE13      => r_CER.INFORMATION123
             ,P_CER_ATTRIBUTE14      => r_CER.INFORMATION124
             ,P_CER_ATTRIBUTE15      => r_CER.INFORMATION125
             ,P_CER_ATTRIBUTE16      => r_CER.INFORMATION126
             ,P_CER_ATTRIBUTE17      => r_CER.INFORMATION127
             ,P_CER_ATTRIBUTE18      => r_CER.INFORMATION128
             ,P_CER_ATTRIBUTE19      => r_CER.INFORMATION129
             ,P_CER_ATTRIBUTE2      => r_CER.INFORMATION112
             ,P_CER_ATTRIBUTE20      => r_CER.INFORMATION130
             ,P_CER_ATTRIBUTE21      => r_CER.INFORMATION131
             ,P_CER_ATTRIBUTE22      => r_CER.INFORMATION132
             ,P_CER_ATTRIBUTE23      => r_CER.INFORMATION133
             ,P_CER_ATTRIBUTE24      => r_CER.INFORMATION134
             ,P_CER_ATTRIBUTE25      => r_CER.INFORMATION135
             ,P_CER_ATTRIBUTE26      => r_CER.INFORMATION136
             ,P_CER_ATTRIBUTE27      => r_CER.INFORMATION137
             ,P_CER_ATTRIBUTE28      => r_CER.INFORMATION138
             ,P_CER_ATTRIBUTE29      => r_CER.INFORMATION139
             ,P_CER_ATTRIBUTE3      => r_CER.INFORMATION113
             ,P_CER_ATTRIBUTE30      => r_CER.INFORMATION140
             ,P_CER_ATTRIBUTE4      => r_CER.INFORMATION114
             ,P_CER_ATTRIBUTE5      => r_CER.INFORMATION115
             ,P_CER_ATTRIBUTE6      => r_CER.INFORMATION116
             ,P_CER_ATTRIBUTE7      => r_CER.INFORMATION117
             ,P_CER_ATTRIBUTE8      => r_CER.INFORMATION118
             ,P_CER_ATTRIBUTE9      => r_CER.INFORMATION119
             ,P_CER_ATTRIBUTE_CATEGORY      => r_CER.INFORMATION110
             ,P_DRVBL_FCTR_APLS_FLAG      => r_CER.INFORMATION11
             ,P_FORMULA_ID      => l_FORMULA_ID
             ,P_MNDTRY_FLAG      => r_CER.INFORMATION12
             ,P_ORDR_TO_APLY_NUM      => r_CER.INFORMATION260
             ,P_PRTN_ELIGY_RL_ID      => l_prtn_eligy_rl_id
             ,P_PRTN_ELIG_ID      => l_PRTN_ELIG_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
            end if;  -- l_update
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_cer.information3) then
             --
             BEN_ELIGIBILITY_RULE_API.delete_ELIGIBILITY_RULE(
                --
                p_validate                       => false
                ,p_prtn_eligy_rl_id                   => l_prtn_eligy_rl_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'CER',r_cer.information5 );
     --
 end create_CER_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_CEP_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_CEP_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_PRTN_ELIG_ID  number;
   cursor c_unique_CEP(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
  ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_PRTN_ELIG_PRFL_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_CEP_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_CEP(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_CEP_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     CEP.prtn_elig_prfl_id new_value
   from BEN_PRTN_ELIG_PRFL_F CEP
   where
   CEP.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   CEP.PRTN_ELIG_ID     = l_PRTN_ELIG_ID  and
   CEP.business_group_id  = c_business_group_id
   and   CEP.prtn_elig_prfl_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_PRTN_ELIG_PRFL_F CEP1
                where
                CEP1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                CEP1.PRTN_ELIG_ID     = l_PRTN_ELIG_ID  and
                CEP1.business_group_id  = c_business_group_id
                and   CEP1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_PRTN_ELIG_PRFL_F CEP2
                where
                CEP2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                CEP2.PRTN_ELIG_ID     = l_PRTN_ELIG_ID  and
                CEP2.business_group_id  = c_business_group_id
                and   CEP2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_CEP                     c_CEP%rowtype;
   l_prtn_elig_prfl_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_CEP_unique in c_unique_CEP('CEP') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_CEP_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
          ) then
       --
       hr_utility.set_location(' r_CEP_unique.table_route_id '||r_CEP_unique.table_route_id,10);
       hr_utility.set_location(' r_CEP_unique.information1 '||r_CEP_unique.information1,10);
       hr_utility.set_location( 'r_CEP_unique.information2 '||r_CEP_unique.information2,10);
       hr_utility.set_location( 'r_CEP_unique.information3 '||r_CEP_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
        --UPD START
            open c_CEP(r_CEP_unique.table_route_id,
                r_CEP_unique.information1,
                r_CEP_unique.information2,
                r_CEP_unique.information3 ) ;
       --
       fetch c_CEP into r_CEP ;
       --
       close c_CEP ;
       --
       l_dml_operation:= r_CEP_unique.dml_operation ;
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_CEP.INFORMATION263,l_dml_operation );
       l_PRTN_ELIG_ID := get_fk('PRTN_ELIG_ID', r_CEP.INFORMATION229,l_dml_operation );
       --
        l_update := false;
        l_process_date := p_effective_date;
        --
        if l_dml_operation = 'UPDATE' then
          --
          l_object_found_in_target := TRUE;
          --
          if l_process_date between r_CEP_unique.information2 and r_CEP_unique.information3 then
                l_update := true;
                if r_CEP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                  or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'PRTN_ELIG_PRFL_ID'
                then
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PRTN_ELIG_PRFL_ID' ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_CEP_unique.information1 ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_CEP_unique.information1 ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_CEP_unique.table_route_id;
                   --
                   -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                   --
                   BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                   --
     --DOUBT              log_data('CEP',l_new_value,l_prefix || r_CEP_unique.name|| l_suffix,'REUSED');
                   --
                end if ;
                hr_utility.set_location( 'found record for update',10);
            --
          else
            --
            l_update := false;
            --
          end if;
        else
          --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_CEP_min_max_dates(r_CEP_unique.table_route_id, r_CEP_unique.information1 ) ;
       fetch c_CEP_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_CEP_unique.information2);
  /*     open c_CEP(r_CEP_unique.table_route_id,
                r_CEP_unique.information1,
                r_CEP_unique.information2,
                r_CEP_unique.information3 ) ;
       --
       fetch c_CEP into r_CEP ;
       --
       close c_CEP ;   */
       --
       if p_reuse_object_flag = 'Y' then
         if c_CEP_min_max_dates%found then
           -- cursor to find the object
           open c_find_CEP_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_prtn_elig_prfl_id, -999)  ) ;
           fetch c_find_CEP_in_target into l_new_value ;
           if c_find_CEP_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_PRTN_ELIG_PRFL_F',
                  p_base_key_column => 'PRTN_ELIG_PRFL_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_CEP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'PRTN_ELIG_PRFL_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PRTN_ELIG_PRFL_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_CEP_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_CEP_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_CEP_in_target ;
         --
         end if;
       end if ;
       --
       close c_CEP_min_max_dates ;
       end if; --if p_dml_operation
               --
               if not l_object_found_in_target OR l_update  then
         --
         l_current_pk_id := r_CEP.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_CEP.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

    if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_PRTN_ELIG_PRFL_F CREATE_PRTN_ELIG_PRFL ',20);
           BEN_PRTN_ELIG_PRFL_API.CREATE_PRTN_ELIG_PRFL(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
           ,P_CEP_ATTRIBUTE1      => r_CEP.INFORMATION111
                        ,P_CEP_ATTRIBUTE10      => r_CEP.INFORMATION120
                        ,P_CEP_ATTRIBUTE11      => r_CEP.INFORMATION121
                        ,P_CEP_ATTRIBUTE12      => r_CEP.INFORMATION122
                        ,P_CEP_ATTRIBUTE13      => r_CEP.INFORMATION123
                        ,P_CEP_ATTRIBUTE14      => r_CEP.INFORMATION124
                        ,P_CEP_ATTRIBUTE15      => r_CEP.INFORMATION125
                        ,P_CEP_ATTRIBUTE16      => r_CEP.INFORMATION126
                        ,P_CEP_ATTRIBUTE17      => r_CEP.INFORMATION127
                        ,P_CEP_ATTRIBUTE18      => r_CEP.INFORMATION128
                        ,P_CEP_ATTRIBUTE19      => r_CEP.INFORMATION129
                        ,P_CEP_ATTRIBUTE2       => r_CEP.INFORMATION112
                        ,P_CEP_ATTRIBUTE20      => r_CEP.INFORMATION130
                        ,P_CEP_ATTRIBUTE21      => r_CEP.INFORMATION131
                        ,P_CEP_ATTRIBUTE22      => r_CEP.INFORMATION132
                        ,P_CEP_ATTRIBUTE23      => r_CEP.INFORMATION133
                        ,P_CEP_ATTRIBUTE24      => r_CEP.INFORMATION134
                        ,P_CEP_ATTRIBUTE25      => r_CEP.INFORMATION135
                        ,P_CEP_ATTRIBUTE26      => r_CEP.INFORMATION136
                        ,P_CEP_ATTRIBUTE27      => r_CEP.INFORMATION137
                        ,P_CEP_ATTRIBUTE28      => r_CEP.INFORMATION138
                        ,P_CEP_ATTRIBUTE29      => r_CEP.INFORMATION139
                        ,P_CEP_ATTRIBUTE3      => r_CEP.INFORMATION113
                        ,P_CEP_ATTRIBUTE30     => r_CEP.INFORMATION140
                        ,P_CEP_ATTRIBUTE4      => r_CEP.INFORMATION114
                        ,P_CEP_ATTRIBUTE5      => r_CEP.INFORMATION115
                        ,P_CEP_ATTRIBUTE6      => r_CEP.INFORMATION116
                        ,P_CEP_ATTRIBUTE7      => r_CEP.INFORMATION117
                        ,P_CEP_ATTRIBUTE8      => r_CEP.INFORMATION118
                        ,P_CEP_ATTRIBUTE9      => r_CEP.INFORMATION119
                        ,P_CEP_ATTRIBUTE_CATEGORY      => r_CEP.INFORMATION110
                        ,P_ELIGY_PRFL_ID       => l_ELIGY_PRFL_ID
                        ,P_ELIG_PRFL_TYPE_CD   => r_CEP.INFORMATION11
                        ,P_MNDTRY_FLAG         => r_CEP.INFORMATION12
                        ,P_PRTN_ELIG_ID        => l_PRTN_ELIG_ID
                        ,P_PRTN_ELIG_PRFL_ID   => l_prtn_elig_prfl_id
			,p_COMPUTE_SCORE_FLAG  => r_CEP.INFORMATION13 -- Bug 4242438
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_prtn_elig_prfl_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'PRTN_ELIG_PRFL_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_CEP.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_PRTN_ELIG_PRFL_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_CEP_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_PRTN_ELIG_PRFL_F UPDATE_PRTN_ELIG_PRFL ',30);
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_CEP.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_CEP.information3,
               p_effective_start_date  => r_CEP.information2,
               p_dml_operation         => r_CEP.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_PRTN_ELIG_PRFL_ID   := r_CEP.information1;
             l_object_version_number := r_CEP.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           BEN_PRTN_ELIG_PRFL_API.UPDATE_PRTN_ELIG_PRFL(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CEP_ATTRIBUTE1      => r_CEP.INFORMATION111
                          ,P_CEP_ATTRIBUTE10      => r_CEP.INFORMATION120
                          ,P_CEP_ATTRIBUTE11      => r_CEP.INFORMATION121
                          ,P_CEP_ATTRIBUTE12      => r_CEP.INFORMATION122
                          ,P_CEP_ATTRIBUTE13      => r_CEP.INFORMATION123
                          ,P_CEP_ATTRIBUTE14      => r_CEP.INFORMATION124
                          ,P_CEP_ATTRIBUTE15      => r_CEP.INFORMATION125
                          ,P_CEP_ATTRIBUTE16      => r_CEP.INFORMATION126
                          ,P_CEP_ATTRIBUTE17      => r_CEP.INFORMATION127
                          ,P_CEP_ATTRIBUTE18      => r_CEP.INFORMATION128
                          ,P_CEP_ATTRIBUTE19      => r_CEP.INFORMATION129
                          ,P_CEP_ATTRIBUTE2      => r_CEP.INFORMATION112
                          ,P_CEP_ATTRIBUTE20      => r_CEP.INFORMATION130
                          ,P_CEP_ATTRIBUTE21      => r_CEP.INFORMATION131
                          ,P_CEP_ATTRIBUTE22      => r_CEP.INFORMATION132
                          ,P_CEP_ATTRIBUTE23      => r_CEP.INFORMATION133
                          ,P_CEP_ATTRIBUTE24      => r_CEP.INFORMATION134
                          ,P_CEP_ATTRIBUTE25      => r_CEP.INFORMATION135
                          ,P_CEP_ATTRIBUTE26      => r_CEP.INFORMATION136
                          ,P_CEP_ATTRIBUTE27      => r_CEP.INFORMATION137
                          ,P_CEP_ATTRIBUTE28      => r_CEP.INFORMATION138
                          ,P_CEP_ATTRIBUTE29      => r_CEP.INFORMATION139
                          ,P_CEP_ATTRIBUTE3      => r_CEP.INFORMATION113
                          ,P_CEP_ATTRIBUTE30      => r_CEP.INFORMATION140
                          ,P_CEP_ATTRIBUTE4      => r_CEP.INFORMATION114
                          ,P_CEP_ATTRIBUTE5      => r_CEP.INFORMATION115
                          ,P_CEP_ATTRIBUTE6      => r_CEP.INFORMATION116
                          ,P_CEP_ATTRIBUTE7      => r_CEP.INFORMATION117
                          ,P_CEP_ATTRIBUTE8      => r_CEP.INFORMATION118
                          ,P_CEP_ATTRIBUTE9      => r_CEP.INFORMATION119
                          ,P_CEP_ATTRIBUTE_CATEGORY      => r_CEP.INFORMATION110
                          ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
                          ,P_ELIG_PRFL_TYPE_CD      => r_CEP.INFORMATION11
                          ,P_MNDTRY_FLAG      => r_CEP.INFORMATION12
                          ,P_PRTN_ELIG_ID      => l_PRTN_ELIG_ID
                          ,P_PRTN_ELIG_PRFL_ID      => l_prtn_elig_prfl_id
			  ,p_COMPUTE_SCORE_FLAG     => r_CEP.INFORMATION13 -- bug 4242438
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
            ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
            end if;  -- l_update
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_CEP.information3) then
             --
             BEN_PRTN_ELIG_PRFL_API.delete_PRTN_ELIG_PRFL(
                --
                p_validate                       => false
                ,p_prtn_elig_prfl_id                   => l_prtn_elig_prfl_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'CEP',r_cep.information5 );
     --
 end create_CEP_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_CPR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_CPR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_POPL_ORG_ID  number;
   l_NAME         BEN_POPL_ORG_ROLE_F.name%TYPE ;
   l_org_role_typ_cd BEN_POPL_ORG_ROLE_F.org_role_typ_cd%TYPE;
   --
   cursor c_unique_CPR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
  ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_POPL_ORG_ROLE_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_CPR_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_CPR(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_CPR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     CPR.popl_org_role_id new_value
   from BEN_POPL_ORG_ROLE_F CPR
   where
   CPR.POPL_ORG_ID    = l_POPL_ORG_ID  and
   CPR.NAME           = l_NAME and
   CPR.org_role_typ_cd= l_org_role_typ_cd and
   CPR.business_group_id  = c_business_group_id
   and   CPR.popl_org_role_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_POPL_ORG_ROLE_F CPR1
                where
                CPR1.POPL_ORG_ID     = l_POPL_ORG_ID  and
                CPR1.NAME           = l_NAME and
                CPR1.org_role_typ_cd= l_org_role_typ_cd and
                CPR1.business_group_id  = c_business_group_id
                and   CPR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_POPL_ORG_ROLE_F CPR2
                where
                CPR2.POPL_ORG_ID     = l_POPL_ORG_ID  and
                CPR2.NAME           = l_NAME and
                CPR2.org_role_typ_cd= l_org_role_typ_cd and
                CPR2.business_group_id  = c_business_group_id
                and   CPR2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_CPR                     c_CPR%rowtype;
   l_popl_org_role_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_CPR_unique in c_unique_CPR('CPR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
          (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
           r_CPR_unique.information3 >=
                   ben_pd_copy_to_ben_one.g_copy_effective_date)
          ) then
       --
       hr_utility.set_location(' r_CPR_unique.table_route_id '||r_CPR_unique.table_route_id,10);
       hr_utility.set_location(' r_CPR_unique.information1 '||r_CPR_unique.information1,10);
       hr_utility.set_location( 'r_CPR_unique.information2 '||r_CPR_unique.information2,10);
       hr_utility.set_location( 'r_CPR_unique.information3 '||r_CPR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
           open c_CPR(r_CPR_unique.table_route_id,
                r_CPR_unique.information1,
                r_CPR_unique.information2,
                r_CPR_unique.information3 ) ;
       --
       fetch c_CPR into r_CPR ;
       --
       close c_CPR ;
       --
       l_dml_operation:= r_CPR_unique.dml_operation ;
       l_POPL_ORG_ID := get_fk('POPL_ORG_ID', r_CPR.INFORMATION260,l_dml_operation);
       l_NAME        := r_CPR.information170 ;
       l_org_role_typ_cd := r_CPR.information11 ;
       --
       l_update := false;
       l_process_date := p_effective_date;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_CPR_unique.information2 and r_CPR_unique.information3 then
               l_update := true;
               if r_CPR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'POPL_ORG_ROLE_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'POPL_ORG_ROLE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_CPR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_CPR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_CPR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
   --DOUBT               log_data('CPR',l_new_value,l_prefix || r_CPR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_CPR_min_max_dates(r_CPR_unique.table_route_id, r_CPR_unique.information1 ) ;
       fetch c_CPR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
        l_min_esd := greatest(l_min_esd,r_CPR_unique.information2);
 /*      open c_CPR(r_CPR_unique.table_route_id,
                r_CPR_unique.information1,
                r_CPR_unique.information2,
                r_CPR_unique.information3 ) ;
       --
       fetch c_CPR into r_CPR ;
       --
       close c_CPR ;   */
       --
       --
       if l_POPL_ORG_ID is null then
         close c_CPR_min_max_dates;
       else
         if p_reuse_object_flag = 'Y' then
           if c_CPR_min_max_dates%found then
             -- cursor to find the object
             open c_find_CPR_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_popl_org_role_id, -999)  ) ;
             fetch c_find_CPR_in_target into l_new_value ;
             if c_find_CPR_in_target%found then
               --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_POPL_ORG_ROLE_F',
                  p_base_key_column => 'POPL_ORG_ROLE_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
               if r_CPR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'POPL_ORG_ROLE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'POPL_ORG_ROLE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_CPR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_CPR_unique.table_route_id;
                  --
                  -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
               end if ;
               --
               l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
             end if;
             close c_find_CPR_in_target ;
             --
           end if;
         end if ;
         --
         close c_CPR_min_max_dates ;
       end if; --if p_dml_operation
               --
      if ( not l_object_found_in_target OR l_update ) and l_POPL_ORG_ID is not null then
           --
           l_current_pk_id := r_CPR.information1;
           --
           hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
           hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
           --
           if l_current_pk_id =  l_prev_pk_id  then
             --
             l_first_rec := false ;
             --
           else
             --
             l_first_rec := true ;
             --
           end if ;
           --
           ben_pd_copy_to_ben_one.ben_chk_col_len('NAME' ,'BEN_POPL_ORG_ROLE_F',l_prefix || r_CPR.information170 || l_suffix);
           --

           l_effective_date := r_CPR.information2;
           if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
             l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
           end if;

         if l_first_rec and not l_update then
             -- Call Create routine.
             hr_utility.set_location(' BEN_POPL_ORG_ROLE_F CREATE_POPL_ORG_ROLE ',20);
             BEN_POPL_ORG_ROLE_API.CREATE_POPL_ORG_ROLE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
            ,P_CPR_ATTRIBUTE1      => r_CPR.INFORMATION111
                         ,P_CPR_ATTRIBUTE10      => r_CPR.INFORMATION120
                         ,P_CPR_ATTRIBUTE11      => r_CPR.INFORMATION121
                         ,P_CPR_ATTRIBUTE12      => r_CPR.INFORMATION122
                         ,P_CPR_ATTRIBUTE13      => r_CPR.INFORMATION123
                         ,P_CPR_ATTRIBUTE14      => r_CPR.INFORMATION124
                         ,P_CPR_ATTRIBUTE15      => r_CPR.INFORMATION125
                         ,P_CPR_ATTRIBUTE16      => r_CPR.INFORMATION126
                         ,P_CPR_ATTRIBUTE17      => r_CPR.INFORMATION127
                         ,P_CPR_ATTRIBUTE18      => r_CPR.INFORMATION128
                         ,P_CPR_ATTRIBUTE19      => r_CPR.INFORMATION129
                         ,P_CPR_ATTRIBUTE2      => r_CPR.INFORMATION112
                         ,P_CPR_ATTRIBUTE20      => r_CPR.INFORMATION130
                         ,P_CPR_ATTRIBUTE21      => r_CPR.INFORMATION131
                         ,P_CPR_ATTRIBUTE22      => r_CPR.INFORMATION132
                         ,P_CPR_ATTRIBUTE23      => r_CPR.INFORMATION133
                         ,P_CPR_ATTRIBUTE24      => r_CPR.INFORMATION134
                         ,P_CPR_ATTRIBUTE25      => r_CPR.INFORMATION135
                         ,P_CPR_ATTRIBUTE26      => r_CPR.INFORMATION136
                         ,P_CPR_ATTRIBUTE27      => r_CPR.INFORMATION137
                         ,P_CPR_ATTRIBUTE28      => r_CPR.INFORMATION138
                         ,P_CPR_ATTRIBUTE29      => r_CPR.INFORMATION139
                         ,P_CPR_ATTRIBUTE3      => r_CPR.INFORMATION113
                         ,P_CPR_ATTRIBUTE30      => r_CPR.INFORMATION140
                         ,P_CPR_ATTRIBUTE4      => r_CPR.INFORMATION114
                         ,P_CPR_ATTRIBUTE5      => r_CPR.INFORMATION115
                         ,P_CPR_ATTRIBUTE6      => r_CPR.INFORMATION116
                         ,P_CPR_ATTRIBUTE7      => r_CPR.INFORMATION117
                         ,P_CPR_ATTRIBUTE8      => r_CPR.INFORMATION118
                         ,P_CPR_ATTRIBUTE9      => r_CPR.INFORMATION119
                         ,P_CPR_ATTRIBUTE_CATEGORY      => r_CPR.INFORMATION110
                         ,P_NAME      => l_prefix || r_CPR.INFORMATION170 || l_suffix
                         ,P_ORG_ROLE_TYP_CD      => r_CPR.INFORMATION11
                         ,P_POPL_ORG_ID      => l_POPL_ORG_ID
             ,P_POPL_ORG_ROLE_ID      => l_popl_org_role_id
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
             );
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             -- Update all relevent cer records with new pk_id
             hr_utility.set_location('Before plsql table ',222);
             hr_utility.set_location('new_value id '||l_popl_org_role_id,222);
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'POPL_ORG_ROLE_ID' ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_CPR.information1 ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_POPL_ORG_ROLE_ID ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_CPR_unique.table_route_id;
             hr_utility.set_location('After plsql table ',222);
             --
             -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
             --
             BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             --
           else
             --
             -- Call Update routine for the pk_id created in prev run .
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             hr_utility.set_location(' BEN_POPL_ORG_ROLE_F UPDATE_POPL_ORG_ROLE ',30);
             --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_CPR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_CPR.information3,
               p_effective_start_date  => r_CPR.information2,
               p_dml_operation         => r_CPR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_POPL_ORG_ROLE_ID   := r_CPR.information1;
             l_object_version_number := r_CPR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
             BEN_POPL_ORG_ROLE_API.UPDATE_POPL_ORG_ROLE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CPR_ATTRIBUTE1      => r_CPR.INFORMATION111
                         ,P_CPR_ATTRIBUTE10      => r_CPR.INFORMATION120
                         ,P_CPR_ATTRIBUTE11      => r_CPR.INFORMATION121
                         ,P_CPR_ATTRIBUTE12      => r_CPR.INFORMATION122
                         ,P_CPR_ATTRIBUTE13      => r_CPR.INFORMATION123
                         ,P_CPR_ATTRIBUTE14      => r_CPR.INFORMATION124
                         ,P_CPR_ATTRIBUTE15      => r_CPR.INFORMATION125
                         ,P_CPR_ATTRIBUTE16      => r_CPR.INFORMATION126
                         ,P_CPR_ATTRIBUTE17      => r_CPR.INFORMATION127
                         ,P_CPR_ATTRIBUTE18      => r_CPR.INFORMATION128
                         ,P_CPR_ATTRIBUTE19      => r_CPR.INFORMATION129
                         ,P_CPR_ATTRIBUTE2      => r_CPR.INFORMATION112
                         ,P_CPR_ATTRIBUTE20      => r_CPR.INFORMATION130
                         ,P_CPR_ATTRIBUTE21      => r_CPR.INFORMATION131
                         ,P_CPR_ATTRIBUTE22      => r_CPR.INFORMATION132
                         ,P_CPR_ATTRIBUTE23      => r_CPR.INFORMATION133
                         ,P_CPR_ATTRIBUTE24      => r_CPR.INFORMATION134
                         ,P_CPR_ATTRIBUTE25      => r_CPR.INFORMATION135
                         ,P_CPR_ATTRIBUTE26      => r_CPR.INFORMATION136
                         ,P_CPR_ATTRIBUTE27      => r_CPR.INFORMATION137
                         ,P_CPR_ATTRIBUTE28      => r_CPR.INFORMATION138
                         ,P_CPR_ATTRIBUTE29      => r_CPR.INFORMATION139
                         ,P_CPR_ATTRIBUTE3      => r_CPR.INFORMATION113
                         ,P_CPR_ATTRIBUTE30      => r_CPR.INFORMATION140
                         ,P_CPR_ATTRIBUTE4      => r_CPR.INFORMATION114
                         ,P_CPR_ATTRIBUTE5      => r_CPR.INFORMATION115
                         ,P_CPR_ATTRIBUTE6      => r_CPR.INFORMATION116
                         ,P_CPR_ATTRIBUTE7      => r_CPR.INFORMATION117
                         ,P_CPR_ATTRIBUTE8      => r_CPR.INFORMATION118
                         ,P_CPR_ATTRIBUTE9      => r_CPR.INFORMATION119
                         ,P_CPR_ATTRIBUTE_CATEGORY      => r_CPR.INFORMATION110
                         ,P_NAME      => l_prefix || r_CPR.INFORMATION170 || l_suffix
                         ,P_ORG_ROLE_TYP_CD      => r_CPR.INFORMATION11
                         ,P_POPL_ORG_ID      => l_POPL_ORG_ID
             ,P_POPL_ORG_ROLE_ID      => l_popl_org_role_id
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
             );
             --
             end if;  -- l_update
           end if;
           --
           -- Delete the row if it is end dated.
           --
           if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
               trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
               trunc(l_max_eed) = r_CPR.information3) then
             --
             BEN_POPL_ORG_ROLE_API.delete_POPL_ORG_ROLE(
                --
                p_validate                       => false
                ,p_popl_org_role_id                   => l_popl_org_role_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
           end if;
           --
           l_prev_pk_id := l_current_pk_id ;
           --
         end if;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'CPR',l_prefix || r_CPR.information170 || l_suffix);
     --
 end create_CPR_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_CPO_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_CPO_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ORGANIZATION_ID  number;
   l_PERSON_ID  number;
   l_PGM_ID  number;
   l_PL_ID  number;
   cursor c_unique_CPO(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_POPL_ORG_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_CPO_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_CPO(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_CPO_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     CPO.popl_org_id new_value
   from BEN_POPL_ORG_F CPO
   where
   CPO.ORGANIZATION_ID     = l_ORGANIZATION_ID  and
   nvl(CPO.PGM_ID,-999)     = nvl(l_PGM_ID,-999)  and
   nvl(CPO.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
   CPO.business_group_id  = c_business_group_id
   and   CPO.popl_org_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_POPL_ORG_F CPO1
                where
                CPO1.ORGANIZATION_ID     = l_ORGANIZATION_ID  and
                nvl(CPO1.PGM_ID,-999)     = nvl(l_PGM_ID,-999)  and
                nvl(CPO1.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
                CPO1.business_group_id  = c_business_group_id
                and   CPO1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_POPL_ORG_F CPO2
                where
                CPO2.ORGANIZATION_ID    = l_ORGANIZATION_ID  and
                nvl(CPO2.PGM_ID,-999)     = nvl(l_PGM_ID,-999)  and
                nvl(CPO2.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
                CPO2.business_group_id  = c_business_group_id
                and   CPO2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_CPO                     c_CPO%rowtype;
   l_popl_org_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_CPO_unique in c_unique_CPO('CPO') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_CPO_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
          ) then
       --
       hr_utility.set_location(' r_CPO_unique.table_route_id '||r_CPO_unique.table_route_id,10);
       hr_utility.set_location(' r_CPO_unique.information1 '||r_CPO_unique.information1,10);
       hr_utility.set_location( 'r_CPO_unique.information2 '||r_CPO_unique.information2,10);
       hr_utility.set_location( 'r_CPO_unique.information3 '||r_CPO_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
           open c_CPO(r_CPO_unique.table_route_id,
                r_CPO_unique.information1,
                r_CPO_unique.information2,
                r_CPO_unique.information3 ) ;
       --
       fetch c_CPO into r_CPO ;
       --
       close c_CPO ;
       --
       l_dml_operation:= r_CPO_unique.dml_operation ;
       l_PERSON_ID := get_fk('PERSON_ID', r_CPO.INFORMATION258,l_dml_operation );
       l_PGM_ID := get_fk('PGM_ID', r_CPO.INFORMATION260,l_dml_operation );
       l_PL_ID := get_fk('PL_ID', r_CPO.INFORMATION261,l_dml_operation );
       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_ORGANIZATION_ID := r_CPO.information176 ;
       else
         l_ORGANIZATION_ID := r_CPO.information174 ;
       end if;
       --
       l_update := false;
       l_process_date := p_effective_date;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_CPO_unique.information2 and r_CPO_unique.information3 then
               l_update := true;
               if r_CPO_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'POPL_ORG_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'POPL_ORG_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_CPO_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_CPO_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_CPO_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
    --DOUBT              log_data('CPO',l_new_value,l_prefix || r_CPO_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_CPO_min_max_dates(r_CPO_unique.table_route_id, r_CPO_unique.information1 ) ;
       fetch c_CPO_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
        l_min_esd := greatest(l_min_esd,r_CPO_unique.information2);
/*       open c_CPO(r_CPO_unique.table_route_id,
                r_CPO_unique.information1,
                r_CPO_unique.information2,
                r_CPO_unique.information3 ) ;
       --
       fetch c_CPO into r_CPO ;
       --
       close c_CPO ;
       --
       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_ORGANIZATION_ID := r_CPO.information176 ;
       else
         l_ORGANIZATION_ID := r_CPO.information174 ;
       end if;
*/
       --
       if l_ORGANIZATION_ID is null then
         close c_CPO_min_max_dates;
         --
         -- DATA not COPIED
         --
         if l_PGM_ID is not null then
          --
          BEN_PD_COPY_TO_BEN_three.log_nomapping_data(p_parent_table_alias =>'PGM'
                 ,p_parent_pk_id         => r_CPO.information260
                 ,p_copy_entity_txn_id   => p_copy_entity_txn_id
                 ,p_child_table_alias    => 'CPO'
                 ,p_child_data           => r_CPO.information173 );
         else
          --
          BEN_PD_COPY_TO_BEN_three.log_nomapping_data(p_parent_table_alias =>'PLN'
                 ,p_parent_pk_id         => r_CPO.information261
                 ,p_copy_entity_txn_id   => p_copy_entity_txn_id
                 ,p_child_table_alias    => 'CPO'
                 ,p_child_data           => r_CPO.information173 );
          --
         end if;
         --
       else
         if p_reuse_object_flag = 'Y' then
           if c_CPO_min_max_dates%found then
             -- cursor to find the object
             open c_find_CPO_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_popl_org_id, -999)  ) ;
             fetch c_find_CPO_in_target into l_new_value ;
             if c_find_CPO_in_target%found then
               --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_POPL_ORG_F',
                  p_base_key_column => 'POPL_ORG_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
               if r_CPO_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                 nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'POPL_ORG_ID'  then
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'POPL_ORG_ID' ;
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_CPO_unique.information1 ;
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_CPO_unique.table_route_id;
                 --
                 -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                 --
                 BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
               end if ;
               --
               l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
             end if;
             close c_find_CPO_in_target ;
             --
           end if;
         end if ;
         --
         close c_CPO_min_max_dates ;
         end if; --if p_dml_operation
               --
        if ( not l_object_found_in_target OR l_update )  and l_ORGANIZATION_ID is not null   then
           --
           l_current_pk_id := r_CPO.information1;
           --
           hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
           hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
           --
           if l_current_pk_id =  l_prev_pk_id  then
             --
             l_first_rec := false ;
             --
           else
             --
             l_first_rec := true ;
             --
           end if ;
           --

           l_effective_date := r_CPO.information2;
           if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
             l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
           end if;

          if l_first_rec and not l_update then
             -- Call Create routine.
             hr_utility.set_location(' BEN_POPL_ORG_F CREATE_POPL_ORG ',20);
             BEN_POPL_ORG_API.CREATE_POPL_ORG(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CPO_ATTRIBUTE1      => r_CPO.INFORMATION111
                         ,P_CPO_ATTRIBUTE10      => r_CPO.INFORMATION120
                         ,P_CPO_ATTRIBUTE11      => r_CPO.INFORMATION121
                         ,P_CPO_ATTRIBUTE12      => r_CPO.INFORMATION122
                         ,P_CPO_ATTRIBUTE13      => r_CPO.INFORMATION123
                         ,P_CPO_ATTRIBUTE14      => r_CPO.INFORMATION124
                         ,P_CPO_ATTRIBUTE15      => r_CPO.INFORMATION125
                         ,P_CPO_ATTRIBUTE16      => r_CPO.INFORMATION126
                         ,P_CPO_ATTRIBUTE17      => r_CPO.INFORMATION127
                         ,P_CPO_ATTRIBUTE18      => r_CPO.INFORMATION128
                         ,P_CPO_ATTRIBUTE19      => r_CPO.INFORMATION129
                         ,P_CPO_ATTRIBUTE2      => r_CPO.INFORMATION112
                         ,P_CPO_ATTRIBUTE20      => r_CPO.INFORMATION130
                         ,P_CPO_ATTRIBUTE21      => r_CPO.INFORMATION131
                         ,P_CPO_ATTRIBUTE22      => r_CPO.INFORMATION132
                         ,P_CPO_ATTRIBUTE23      => r_CPO.INFORMATION133
                         ,P_CPO_ATTRIBUTE24      => r_CPO.INFORMATION134
                         ,P_CPO_ATTRIBUTE25      => r_CPO.INFORMATION135
                         ,P_CPO_ATTRIBUTE26      => r_CPO.INFORMATION136
                         ,P_CPO_ATTRIBUTE27      => r_CPO.INFORMATION137
                         ,P_CPO_ATTRIBUTE28      => r_CPO.INFORMATION138
                         ,P_CPO_ATTRIBUTE29      => r_CPO.INFORMATION139
                         ,P_CPO_ATTRIBUTE3      => r_CPO.INFORMATION113
                         ,P_CPO_ATTRIBUTE30      => r_CPO.INFORMATION140
                         ,P_CPO_ATTRIBUTE4      => r_CPO.INFORMATION114
                         ,P_CPO_ATTRIBUTE5      => r_CPO.INFORMATION115
                         ,P_CPO_ATTRIBUTE6      => r_CPO.INFORMATION116
                         ,P_CPO_ATTRIBUTE7      => r_CPO.INFORMATION117
                         ,P_CPO_ATTRIBUTE8      => r_CPO.INFORMATION118
                         ,P_CPO_ATTRIBUTE9      => r_CPO.INFORMATION119
                         ,P_CPO_ATTRIBUTE_CATEGORY      => r_CPO.INFORMATION110
                         ,P_CSTMR_NUM      => r_CPO.INFORMATION257
                         ,P_ORGANIZATION_ID      => l_ORGANIZATION_ID
                         ,P_PERSON_ID      => l_PERSON_ID
                         ,P_PGM_ID      => l_PGM_ID
                         ,P_PLCY_R_GRP      => r_CPO.INFORMATION141
                         ,P_PL_ID      => l_PL_ID
             ,P_POPL_ORG_ID      => l_popl_org_id
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
             );
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             -- Update all relevent cer records with new pk_id
             hr_utility.set_location('Before plsql table ',222);
             hr_utility.set_location('new_value id '||l_popl_org_id,222);
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'POPL_ORG_ID' ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_CPO.information1 ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_POPL_ORG_ID ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_CPO_unique.table_route_id;
             hr_utility.set_location('After plsql table ',222);
             --
             -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
             --
             BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             --
           else
             --
             -- Call Update routine for the pk_id created in prev run .
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             hr_utility.set_location(' BEN_POPL_ORG_F UPDATE_POPL_ORG ',30);
             --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_CPO.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_CPO.information3,
               p_effective_start_date  => r_CPO.information2,
               p_dml_operation         => r_CPO.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_POPL_ORG_ID   := r_CPO.information1;
             l_object_version_number := r_CPO.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
             BEN_POPL_ORG_API.UPDATE_POPL_ORG(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CPO_ATTRIBUTE1      => r_CPO.INFORMATION111
                          ,P_CPO_ATTRIBUTE10      => r_CPO.INFORMATION120
                          ,P_CPO_ATTRIBUTE11      => r_CPO.INFORMATION121
                          ,P_CPO_ATTRIBUTE12      => r_CPO.INFORMATION122
                          ,P_CPO_ATTRIBUTE13      => r_CPO.INFORMATION123
                          ,P_CPO_ATTRIBUTE14      => r_CPO.INFORMATION124
                          ,P_CPO_ATTRIBUTE15      => r_CPO.INFORMATION125
                          ,P_CPO_ATTRIBUTE16      => r_CPO.INFORMATION126
                          ,P_CPO_ATTRIBUTE17      => r_CPO.INFORMATION127
                          ,P_CPO_ATTRIBUTE18      => r_CPO.INFORMATION128
                          ,P_CPO_ATTRIBUTE19      => r_CPO.INFORMATION129
                          ,P_CPO_ATTRIBUTE2      => r_CPO.INFORMATION112
                          ,P_CPO_ATTRIBUTE20      => r_CPO.INFORMATION130
                          ,P_CPO_ATTRIBUTE21      => r_CPO.INFORMATION131
                          ,P_CPO_ATTRIBUTE22      => r_CPO.INFORMATION132
                          ,P_CPO_ATTRIBUTE23      => r_CPO.INFORMATION133
                          ,P_CPO_ATTRIBUTE24      => r_CPO.INFORMATION134
                          ,P_CPO_ATTRIBUTE25      => r_CPO.INFORMATION135
                          ,P_CPO_ATTRIBUTE26      => r_CPO.INFORMATION136
                          ,P_CPO_ATTRIBUTE27      => r_CPO.INFORMATION137
                          ,P_CPO_ATTRIBUTE28      => r_CPO.INFORMATION138
                          ,P_CPO_ATTRIBUTE29      => r_CPO.INFORMATION139
                          ,P_CPO_ATTRIBUTE3      => r_CPO.INFORMATION113
                          ,P_CPO_ATTRIBUTE30      => r_CPO.INFORMATION140
                          ,P_CPO_ATTRIBUTE4      => r_CPO.INFORMATION114
                          ,P_CPO_ATTRIBUTE5      => r_CPO.INFORMATION115
                          ,P_CPO_ATTRIBUTE6      => r_CPO.INFORMATION116
                          ,P_CPO_ATTRIBUTE7      => r_CPO.INFORMATION117
                          ,P_CPO_ATTRIBUTE8      => r_CPO.INFORMATION118
                          ,P_CPO_ATTRIBUTE9      => r_CPO.INFORMATION119
                          ,P_CPO_ATTRIBUTE_CATEGORY      => r_CPO.INFORMATION110
                          ,P_CSTMR_NUM      => r_CPO.INFORMATION257
                          ,P_ORGANIZATION_ID      => l_ORGANIZATION_ID
                          ,P_PERSON_ID      => l_PERSON_ID
                          ,P_PGM_ID      => l_PGM_ID
                          ,P_PLCY_R_GRP      => r_CPO.INFORMATION141
                          ,P_PL_ID      => l_PL_ID
             ,P_POPL_ORG_ID      => l_popl_org_id
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
             );
             --
             end if;  -- l_update
           end if;
           --
           -- Delete the row if it is end dated.
           --
           if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
               trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
               trunc(l_max_eed) = r_CPO.information3) then
           --
             BEN_POPL_ORG_API.delete_POPL_ORG(
                --
                p_validate                       => false
                ,p_popl_org_id                   => l_popl_org_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
           end if;
           --
           l_prev_pk_id := l_current_pk_id ;
           --
         end if;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'CPO',r_cpo.information5 );
     --
 end create_CPO_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_PRG_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_PRG_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_CNTR_NNDSCRN_RL  number;
   l_CVG_NNDSCRN_RL  number;
   l_FIVE_PCT_OWNR_RL  number;
   l_HGHLY_COMPD_DET_RL  number;
   l_KEY_EE_DET_RL  number;
   l_PL_ID  number;
   l_REGN_ID  number;
   l_RPTG_GRP_ID  number;
   cursor c_unique_PRG(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_PL_REGN_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_PRG_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_PRG(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_PRG_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     PRG.pl_regn_id new_value
   from BEN_PL_REGN_F PRG
   where
   nvl(PRG.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
   PRG.REGN_ID     = l_REGN_ID  and
   nvl(PRG.RPTG_GRP_ID,-999)     = nvl(l_RPTG_GRP_ID,-999)  and
   PRG.business_group_id  = c_business_group_id
   and   PRG.pl_regn_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_PL_REGN_F PRG1
                where
                nvl(PRG1.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
                PRG1.REGN_ID     = l_REGN_ID  and
                nvl(PRG1.RPTG_GRP_ID,-999)     = nvl(l_RPTG_GRP_ID,-999)  and
                PRG1.business_group_id  = c_business_group_id
                and   PRG1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_PL_REGN_F PRG2
                where
                nvl(PRG2.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
                PRG2.REGN_ID     = l_REGN_ID  and
                nvl(PRG2.RPTG_GRP_ID,-999)     = nvl(l_RPTG_GRP_ID,-999)  and
                PRG2.business_group_id  = c_business_group_id
                and   PRG2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   cursor c_regn(c_name in varchar2,
                 c_business_group_id in number,
                 c_effective_date in date
                 ) is
   select reg.regn_id
   from   ben_regn_f reg
   where  reg.name = c_name
   and    reg.business_group_id = c_business_group_id
   and    c_effective_date between reg.effective_start_date
   and    reg.effective_end_date;
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_PRG                     c_PRG%rowtype;
   l_pl_regn_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_PRG_unique in c_unique_PRG('PRG') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
          (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
           r_PRG_unique.information3 >=
                   ben_pd_copy_to_ben_one.g_copy_effective_date)
          ) then
       --
       hr_utility.set_location(' r_PRG_unique.table_route_id '||r_PRG_unique.table_route_id,10);
       hr_utility.set_location(' r_PRG_unique.information1 '||r_PRG_unique.information1,10);
       hr_utility.set_location( 'r_PRG_unique.information2 '||r_PRG_unique.information2,10);
       hr_utility.set_location( 'r_PRG_unique.information3 '||r_PRG_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
          open c_PRG(r_PRG_unique.table_route_id,
                r_PRG_unique.information1,
                r_PRG_unique.information2,
                r_PRG_unique.information3 ) ;
       --
       fetch c_PRG into r_PRG ;
       --
       close c_PRG ;

       l_dml_operation:= r_PRG_unique.dml_operation ;
       l_CNTR_NNDSCRN_RL := get_fk('FORMULA_ID', r_PRG.INFORMATION259,l_dml_operation );
       l_CVG_NNDSCRN_RL := get_fk('FORMULA_ID', r_PRG.INFORMATION260,l_dml_operation );
       l_FIVE_PCT_OWNR_RL := get_fk('FORMULA_ID', r_PRG.INFORMATION262,l_dml_operation );
       l_HGHLY_COMPD_DET_RL := get_fk('FORMULA_ID', r_PRG.INFORMATION257,l_dml_operation );
       l_KEY_EE_DET_RL := get_fk('FORMULA_ID', r_PRG.INFORMATION258,l_dml_operation );
       l_PL_ID := get_fk('PL_ID', r_PRG.INFORMATION261,l_dml_operation );
       l_REGN_ID := get_fk('REGN_ID', r_PRG.INFORMATION231,l_dml_operation );
       l_RPTG_GRP_ID := get_fk('RPTG_GRP_ID', r_PRG.INFORMATION242,l_dml_operation );
       l_update := false;
       l_process_date := p_effective_date;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_PRG_unique.information2 and r_PRG_unique.information3 then
               l_update := true;
               if r_PRG_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'PL_REGN_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PL_REGN_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_PRG_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_PRG_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PRG_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
   --DOUBT               log_data('PRG',l_new_value,l_prefix || r_PRG_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_PRG_min_max_dates(r_PRG_unique.table_route_id, r_PRG_unique.information1 ) ;
       fetch c_PRG_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_PRG_unique.information2);
  /*     open c_PRG(r_PRG_unique.table_route_id,
                r_PRG_unique.information1,
                r_PRG_unique.information2,
                r_PRG_unique.information3 ) ;
       --
       fetch c_PRG into r_PRG ;
       --
       close c_PRG ;  */
       --
       -- Regulations will not be created, they will be mapped based on the
       -- Regulation name in the Source Business Group
       -- create_REG_rows will store the required regn_id in g_pk_tbl

       /*
       -- NOT REQUIRED as create_REG_rows has been uncommented
       -- and will store the required regn_id in g_pk_tbl
       -- so that it can be got by get_fk

       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         open c_regn(r_PRG.information185,
                   p_target_business_group_id,
                   r_PRG.information2)
                   );
         fetch c_regn into  l_REGN_ID;
         if c_regn%notfound then
           l_REGN_ID := null;
         end if;
         close c_regn;
       else
         l_REGN_ID := r_PRG.information49; -- Regulation id from Source business group
       end if;
       --
       */

       if l_REGN_ID is null then
         close c_PRG_min_max_dates;
       else
         if p_reuse_object_flag = 'Y' then
           if c_PRG_min_max_dates%found then
             -- cursor to find the object
             open c_find_PRG_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_pl_regn_id, -999)  ) ;
             fetch c_find_PRG_in_target into l_new_value ;
             if c_find_PRG_in_target%found then
               --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_PL_REGN_F',
                  p_base_key_column => 'PL_REGN_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
               if r_PRG_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'PL_REGN_ID'  then
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PL_REGN_ID' ;
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_PRG_unique.information1 ;
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PRG_unique.table_route_id;
                 --
                 -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                 --
                 BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
               end if ;
               --
               l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
             end if;
             close c_find_PRG_in_target ;
           --
           end if;
         end if ;
         --
         close c_PRG_min_max_dates ;
         end if; --if p_dml_operation
               --
               if not l_object_found_in_target OR l_update  then
         --
           l_current_pk_id := r_PRG.information1;
           --
           hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
           hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
           --
           if l_current_pk_id =  l_prev_pk_id  then
             --
             l_first_rec := false ;
             --
           else
             --
             l_first_rec := true ;
             --
           end if ;
           --

           l_effective_date := r_PRG.information2;
           if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
             l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
           end if;

         if l_first_rec and not l_update then
             -- Call Create routine.
             hr_utility.set_location(' BEN_PL_REGN_F CREATE_PLAN_REGULATION ',20);
             BEN_PLAN_REGULATION_API.CREATE_PLAN_REGULATION(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
            ,P_CNTR_NNDSCRN_RL      => l_CNTR_NNDSCRN_RL
                         ,P_CVG_NNDSCRN_RL      => l_CVG_NNDSCRN_RL
                         ,P_FIVE_PCT_OWNR_RL      => l_FIVE_PCT_OWNR_RL
                         ,P_HGHLY_COMPD_DET_RL      => l_HGHLY_COMPD_DET_RL
                         ,P_KEY_EE_DET_RL      => l_KEY_EE_DET_RL
                         ,P_PL_ID      => l_PL_ID
                         ,P_PL_REGN_ID      => l_pl_regn_id
                         ,P_PRG_ATTRIBUTE1      => r_PRG.INFORMATION111
                         ,P_PRG_ATTRIBUTE10      => r_PRG.INFORMATION120
                         ,P_PRG_ATTRIBUTE11      => r_PRG.INFORMATION121
                         ,P_PRG_ATTRIBUTE12      => r_PRG.INFORMATION122
                         ,P_PRG_ATTRIBUTE13      => r_PRG.INFORMATION123
                         ,P_PRG_ATTRIBUTE14      => r_PRG.INFORMATION124
                         ,P_PRG_ATTRIBUTE15      => r_PRG.INFORMATION125
                         ,P_PRG_ATTRIBUTE16      => r_PRG.INFORMATION126
                         ,P_PRG_ATTRIBUTE17      => r_PRG.INFORMATION127
                         ,P_PRG_ATTRIBUTE18      => r_PRG.INFORMATION128
                         ,P_PRG_ATTRIBUTE19      => r_PRG.INFORMATION129
                         ,P_PRG_ATTRIBUTE2      => r_PRG.INFORMATION112
                         ,P_PRG_ATTRIBUTE20      => r_PRG.INFORMATION130
                         ,P_PRG_ATTRIBUTE21      => r_PRG.INFORMATION131
                         ,P_PRG_ATTRIBUTE22      => r_PRG.INFORMATION132
                         ,P_PRG_ATTRIBUTE23      => r_PRG.INFORMATION133
                         ,P_PRG_ATTRIBUTE24      => r_PRG.INFORMATION134
                         ,P_PRG_ATTRIBUTE25      => r_PRG.INFORMATION135
                         ,P_PRG_ATTRIBUTE26      => r_PRG.INFORMATION136
                         ,P_PRG_ATTRIBUTE27      => r_PRG.INFORMATION137
                         ,P_PRG_ATTRIBUTE28      => r_PRG.INFORMATION138
                         ,P_PRG_ATTRIBUTE29      => r_PRG.INFORMATION139
                         ,P_PRG_ATTRIBUTE3      => r_PRG.INFORMATION113
                         ,P_PRG_ATTRIBUTE30      => r_PRG.INFORMATION140
                         ,P_PRG_ATTRIBUTE4      => r_PRG.INFORMATION114
                         ,P_PRG_ATTRIBUTE5      => r_PRG.INFORMATION115
                         ,P_PRG_ATTRIBUTE6      => r_PRG.INFORMATION116
                         ,P_PRG_ATTRIBUTE7      => r_PRG.INFORMATION117
                         ,P_PRG_ATTRIBUTE8      => r_PRG.INFORMATION118
                         ,P_PRG_ATTRIBUTE9      => r_PRG.INFORMATION119
                         ,P_PRG_ATTRIBUTE_CATEGORY      => r_PRG.INFORMATION110
                         ,P_REGN_ID      => l_REGN_ID
                         ,P_REGY_PL_TYP_CD      => r_PRG.INFORMATION11
             ,P_RPTG_GRP_ID      => l_RPTG_GRP_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
             );
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             -- Update all relevent cer records with new pk_id
             hr_utility.set_location('Before plsql table ',222);
             hr_utility.set_location('new_value id '||l_pl_regn_id,222);
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'PL_REGN_ID' ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_PRG.information1 ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_PL_REGN_ID ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PRG_unique.table_route_id;
             hr_utility.set_location('After plsql table ',222);
             --
             -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
             --
             BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             --
           else
             --
             -- Call Update routine for the pk_id created in prev run .
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             hr_utility.set_location(' BEN_PL_REGN_F UPDATE_PLAN_REGULATION ',30);
             --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_PRG.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_PRG.information3,
               p_effective_start_date  => r_PRG.information2,
               p_dml_operation         => r_PRG.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_PL_REGN_ID   := r_PRG.information1;
             l_object_version_number := r_PRG.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
             BEN_PLAN_REGULATION_API.UPDATE_PLAN_REGULATION(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CNTR_NNDSCRN_RL      => l_CNTR_NNDSCRN_RL
                          ,P_CVG_NNDSCRN_RL      => l_CVG_NNDSCRN_RL
                          ,P_FIVE_PCT_OWNR_RL      => l_FIVE_PCT_OWNR_RL
                          ,P_HGHLY_COMPD_DET_RL      => l_HGHLY_COMPD_DET_RL
                          ,P_KEY_EE_DET_RL      => l_KEY_EE_DET_RL
                          ,P_PL_ID      => l_PL_ID
                          ,P_PL_REGN_ID      => l_pl_regn_id
                          ,P_PRG_ATTRIBUTE1      => r_PRG.INFORMATION111
                          ,P_PRG_ATTRIBUTE10      => r_PRG.INFORMATION120
                          ,P_PRG_ATTRIBUTE11      => r_PRG.INFORMATION121
                          ,P_PRG_ATTRIBUTE12      => r_PRG.INFORMATION122
                          ,P_PRG_ATTRIBUTE13      => r_PRG.INFORMATION123
                          ,P_PRG_ATTRIBUTE14      => r_PRG.INFORMATION124
                          ,P_PRG_ATTRIBUTE15      => r_PRG.INFORMATION125
                          ,P_PRG_ATTRIBUTE16      => r_PRG.INFORMATION126
                          ,P_PRG_ATTRIBUTE17      => r_PRG.INFORMATION127
                          ,P_PRG_ATTRIBUTE18      => r_PRG.INFORMATION128
                          ,P_PRG_ATTRIBUTE19      => r_PRG.INFORMATION129
                          ,P_PRG_ATTRIBUTE2      => r_PRG.INFORMATION112
                          ,P_PRG_ATTRIBUTE20      => r_PRG.INFORMATION130
                          ,P_PRG_ATTRIBUTE21      => r_PRG.INFORMATION131
                          ,P_PRG_ATTRIBUTE22      => r_PRG.INFORMATION132
                          ,P_PRG_ATTRIBUTE23      => r_PRG.INFORMATION133
                          ,P_PRG_ATTRIBUTE24      => r_PRG.INFORMATION134
                          ,P_PRG_ATTRIBUTE25      => r_PRG.INFORMATION135
                          ,P_PRG_ATTRIBUTE26      => r_PRG.INFORMATION136
                          ,P_PRG_ATTRIBUTE27      => r_PRG.INFORMATION137
                          ,P_PRG_ATTRIBUTE28      => r_PRG.INFORMATION138
                          ,P_PRG_ATTRIBUTE29      => r_PRG.INFORMATION139
                          ,P_PRG_ATTRIBUTE3      => r_PRG.INFORMATION113
                          ,P_PRG_ATTRIBUTE30      => r_PRG.INFORMATION140
                          ,P_PRG_ATTRIBUTE4      => r_PRG.INFORMATION114
                          ,P_PRG_ATTRIBUTE5      => r_PRG.INFORMATION115
                          ,P_PRG_ATTRIBUTE6      => r_PRG.INFORMATION116
                          ,P_PRG_ATTRIBUTE7      => r_PRG.INFORMATION117
                          ,P_PRG_ATTRIBUTE8      => r_PRG.INFORMATION118
                          ,P_PRG_ATTRIBUTE9      => r_PRG.INFORMATION119
                          ,P_PRG_ATTRIBUTE_CATEGORY      => r_PRG.INFORMATION110
                          ,P_REGN_ID      => l_REGN_ID
                          ,P_REGY_PL_TYP_CD      => r_PRG.INFORMATION11
             ,P_RPTG_GRP_ID      => l_RPTG_GRP_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
            ,P_DATETRACK_MODE        => l_datetrack_mode
             );
             --
             end if;  -- l_update
           end if;
           --
           -- Delete the row if it is end dated.
           --
           if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
               trunc(l_max_eed) = r_PRG.information3) then
             --
             BEN_PLAN_REGULATION_API.delete_PLAN_REGULATION(
                --
                p_validate                       => false
                ,p_pl_regn_id                   => l_pl_regn_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
           end if;
           --
           l_prev_pk_id := l_current_pk_id ;
           --
         end if;
         --
       end if;
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'PRG',r_prg.information5 );
     --
 end create_PRG_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_RGR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_RGR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_PGM_ID  number;
   l_PL_ID  number;
   l_RPTG_GRP_ID  number;
   cursor c_unique_RGR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
  ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_POPL_RPTG_GRP_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_RGR_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_RGR(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_RGR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     RGR.popl_rptg_grp_id new_value
   from BEN_POPL_RPTG_GRP_F RGR
   where
   nvl(RGR.PGM_ID,-999)     = nvl(l_PGM_ID,-999)  and
   nvl(RGR.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
   RGR.RPTG_GRP_ID     = l_RPTG_GRP_ID  and
   RGR.business_group_id  = c_business_group_id
   and   RGR.popl_rptg_grp_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_POPL_RPTG_GRP_F RGR1
                where
                nvl(RGR1.PGM_ID,-999)     = nvl(l_PGM_ID,-999)  and
                nvl(RGR1.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
                RGR1.RPTG_GRP_ID    = l_RPTG_GRP_ID  and
                RGR1.business_group_id  = c_business_group_id
                and   RGR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_POPL_RPTG_GRP_F RGR2
                where
                nvl(RGR2.PGM_ID,-999)     = nvl(l_PGM_ID,-999)  and
                nvl(RGR2.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
                RGR2.RPTG_GRP_ID     = l_RPTG_GRP_ID  and
                RGR2.business_group_id  = c_business_group_id
                and   RGR2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_RGR                     c_RGR%rowtype;
   l_popl_rptg_grp_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_RGR_unique in c_unique_RGR('RGR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_RGR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
          ) then
       --
       hr_utility.set_location(' r_RGR_unique.table_route_id '||r_RGR_unique.table_route_id,10);
       hr_utility.set_location(' r_RGR_unique.information1 '||r_RGR_unique.information1,10);
       hr_utility.set_location( 'r_RGR_unique.information2 '||r_RGR_unique.information2,10);
       hr_utility.set_location( 'r_RGR_unique.information3 '||r_RGR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
           open c_RGR(r_RGR_unique.table_route_id,
                r_RGR_unique.information1,
                r_RGR_unique.information2,
                r_RGR_unique.information3 ) ;
       --
       fetch c_RGR into r_RGR ;
       --
       close c_RGR ;

       l_dml_operation:= r_RGR_unique.dml_operation ;
       l_PGM_ID := get_fk('PGM_ID', r_RGR.INFORMATION260,l_dml_operation );
       l_PL_ID := get_fk('PL_ID', r_RGR.INFORMATION261,l_dml_operation );
       l_RPTG_GRP_ID := get_fk('RPTG_GRP_ID', r_RGR.INFORMATION242,l_dml_operation );
       l_update := false;
       l_process_date := p_effective_date;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_RGR_unique.information2 and r_RGR_unique.information3 then
               l_update := true;
               if r_RGR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'POPL_RPTG_GRP_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'POPL_RPTG_GRP_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_RGR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_RGR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_RGR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
     --DOUBT             log_data('RGR',l_new_value,l_prefix || r_RGR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_RGR_min_max_dates(r_RGR_unique.table_route_id, r_RGR_unique.information1 ) ;
       fetch c_RGR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_RGR_unique.information2);
/*       open c_RGR(r_RGR_unique.table_route_id,
                r_RGR_unique.information1,
                r_RGR_unique.information2,
                r_RGR_unique.information3 ) ;
       --
       fetch c_RGR into r_RGR ;
       --
       close c_RGR ;  */
       --
       -- There could exist multiple componets[Programs and Plans] to the Reporting group
       -- which are not getting copied due to the selection criteria
       -- So we need to make sure that pl or pgm is getting copied
       --
       if l_PGM_ID is null and l_PL_ID is null then
         close c_RGR_min_max_dates;
       else
         if p_reuse_object_flag = 'Y' then
           if c_RGR_min_max_dates%found then
             -- cursor to find the object
             open c_find_RGR_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_popl_rptg_grp_id, -999)  ) ;
             fetch c_find_RGR_in_target into l_new_value ;
             if c_find_RGR_in_target%found then
               --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_POPL_RPTG_GRP_F',
                  p_base_key_column => 'POPL_RPTG_GRP_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
               if r_RGR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                 nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'POPL_RPTG_GRP_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'POPL_RPTG_GRP_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_RGR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_RGR_unique.table_route_id;
                  --
                  -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
               end if ;
               --
               l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
             end if;
             close c_find_RGR_in_target ;
             --
           end if;
         end if ;
         --
         close c_RGR_min_max_dates ;

         end if; --if p_dml_operation
               --
               if not l_object_found_in_target OR l_update  then
           --
           l_current_pk_id := r_RGR.information1;
           --
           hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
           hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
           --
           if l_current_pk_id =  l_prev_pk_id  then
             --
             l_first_rec := false ;
             --
           else
             --
             l_first_rec := true ;
             --
           end if ;
           --

           l_effective_date := r_RGR.information2;
           if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
             l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
           end if;

          if l_first_rec and not l_update then
             -- Call Create routine.
             hr_utility.set_location(' BEN_POPL_RPTG_GRP_F CREATE_POPL_RPTG_GRP ',20);
             BEN_POPL_RPTG_GRP_API.CREATE_POPL_RPTG_GRP(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
              ,P_PGM_ID      => l_PGM_ID
                          ,P_PL_ID      => l_PL_ID
                          ,P_POPL_RPTG_GRP_ID      => l_popl_rptg_grp_id
                          ,P_RGR_ATTRIBUTE1      => r_RGR.INFORMATION111
                          ,P_RGR_ATTRIBUTE10      => r_RGR.INFORMATION120
                          ,P_RGR_ATTRIBUTE11      => r_RGR.INFORMATION121
                          ,P_RGR_ATTRIBUTE12      => r_RGR.INFORMATION122
                          ,P_RGR_ATTRIBUTE13      => r_RGR.INFORMATION123
                          ,P_RGR_ATTRIBUTE14      => r_RGR.INFORMATION124
                          ,P_RGR_ATTRIBUTE15      => r_RGR.INFORMATION125
                          ,P_RGR_ATTRIBUTE16      => r_RGR.INFORMATION126
                          ,P_RGR_ATTRIBUTE17      => r_RGR.INFORMATION127
                          ,P_RGR_ATTRIBUTE18      => r_RGR.INFORMATION128
                          ,P_RGR_ATTRIBUTE19      => r_RGR.INFORMATION129
                          ,P_RGR_ATTRIBUTE2      => r_RGR.INFORMATION112
                          ,P_RGR_ATTRIBUTE20      => r_RGR.INFORMATION130
                          ,P_RGR_ATTRIBUTE21      => r_RGR.INFORMATION131
                          ,P_RGR_ATTRIBUTE22      => r_RGR.INFORMATION132
                          ,P_RGR_ATTRIBUTE23      => r_RGR.INFORMATION133
                          ,P_RGR_ATTRIBUTE24      => r_RGR.INFORMATION134
                          ,P_RGR_ATTRIBUTE25      => r_RGR.INFORMATION135
                          ,P_RGR_ATTRIBUTE26      => r_RGR.INFORMATION136
                          ,P_RGR_ATTRIBUTE27      => r_RGR.INFORMATION137
                          ,P_RGR_ATTRIBUTE28      => r_RGR.INFORMATION138
                          ,P_RGR_ATTRIBUTE29      => r_RGR.INFORMATION139
                          ,P_RGR_ATTRIBUTE3      => r_RGR.INFORMATION113
                          ,P_RGR_ATTRIBUTE30      => r_RGR.INFORMATION140
                          ,P_RGR_ATTRIBUTE4      => r_RGR.INFORMATION114
                          ,P_RGR_ATTRIBUTE5      => r_RGR.INFORMATION115
                          ,P_RGR_ATTRIBUTE6      => r_RGR.INFORMATION116
                          ,P_RGR_ATTRIBUTE7      => r_RGR.INFORMATION117
                          ,P_RGR_ATTRIBUTE8      => r_RGR.INFORMATION118
                          ,P_RGR_ATTRIBUTE9      => r_RGR.INFORMATION119
                          ,P_RGR_ATTRIBUTE_CATEGORY      => r_RGR.INFORMATION110
             ,P_RPTG_GRP_ID      => l_RPTG_GRP_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
             );
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             -- Update all relevent cer records with new pk_id
             hr_utility.set_location('Before plsql table ',222);
             hr_utility.set_location('new_value id '||l_popl_rptg_grp_id,222);
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'POPL_RPTG_GRP_ID' ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_RGR.information1 ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_POPL_RPTG_GRP_ID ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_RGR_unique.table_route_id;
             hr_utility.set_location('After plsql table ',222);
             --
             -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
             --
             BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             --
           else
             --
             -- Call Update routine for the pk_id created in prev run .
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             hr_utility.set_location(' BEN_POPL_RPTG_GRP_F UPDATE_POPL_RPTG_GRP ',30);
             --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_RGR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_RGR.information3,
               p_effective_start_date  => r_RGR.information2,
               p_dml_operation         => r_RGR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_POPL_RPTG_GRP_ID   := r_RGR.information1;
             l_object_version_number := r_RGR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END

             BEN_POPL_RPTG_GRP_API.UPDATE_POPL_RPTG_GRP(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_PGM_ID      => l_PGM_ID
                         ,P_PL_ID      => l_PL_ID
                         ,P_POPL_RPTG_GRP_ID      => l_popl_rptg_grp_id
                         ,P_RGR_ATTRIBUTE1      => r_RGR.INFORMATION111
                         ,P_RGR_ATTRIBUTE10      => r_RGR.INFORMATION120
                         ,P_RGR_ATTRIBUTE11      => r_RGR.INFORMATION121
                         ,P_RGR_ATTRIBUTE12      => r_RGR.INFORMATION122
                         ,P_RGR_ATTRIBUTE13      => r_RGR.INFORMATION123
                         ,P_RGR_ATTRIBUTE14      => r_RGR.INFORMATION124
                         ,P_RGR_ATTRIBUTE15      => r_RGR.INFORMATION125
                         ,P_RGR_ATTRIBUTE16      => r_RGR.INFORMATION126
                         ,P_RGR_ATTRIBUTE17      => r_RGR.INFORMATION127
                         ,P_RGR_ATTRIBUTE18      => r_RGR.INFORMATION128
                         ,P_RGR_ATTRIBUTE19      => r_RGR.INFORMATION129
                         ,P_RGR_ATTRIBUTE2      => r_RGR.INFORMATION112
                         ,P_RGR_ATTRIBUTE20      => r_RGR.INFORMATION130
                         ,P_RGR_ATTRIBUTE21      => r_RGR.INFORMATION131
                         ,P_RGR_ATTRIBUTE22      => r_RGR.INFORMATION132
                         ,P_RGR_ATTRIBUTE23      => r_RGR.INFORMATION133
                         ,P_RGR_ATTRIBUTE24      => r_RGR.INFORMATION134
                         ,P_RGR_ATTRIBUTE25      => r_RGR.INFORMATION135
                         ,P_RGR_ATTRIBUTE26      => r_RGR.INFORMATION136
                         ,P_RGR_ATTRIBUTE27      => r_RGR.INFORMATION137
                         ,P_RGR_ATTRIBUTE28      => r_RGR.INFORMATION138
                         ,P_RGR_ATTRIBUTE29      => r_RGR.INFORMATION139
                         ,P_RGR_ATTRIBUTE3      => r_RGR.INFORMATION113
                         ,P_RGR_ATTRIBUTE30      => r_RGR.INFORMATION140
                         ,P_RGR_ATTRIBUTE4      => r_RGR.INFORMATION114
                         ,P_RGR_ATTRIBUTE5      => r_RGR.INFORMATION115
                         ,P_RGR_ATTRIBUTE6      => r_RGR.INFORMATION116
                         ,P_RGR_ATTRIBUTE7      => r_RGR.INFORMATION117
                         ,P_RGR_ATTRIBUTE8      => r_RGR.INFORMATION118
                         ,P_RGR_ATTRIBUTE9      => r_RGR.INFORMATION119
                         ,P_RGR_ATTRIBUTE_CATEGORY      => r_RGR.INFORMATION110
             ,P_RPTG_GRP_ID      => l_RPTG_GRP_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
              ,P_DATETRACK_MODE        => l_datetrack_mode
             );
             --
             end if;  -- l_update
           end if;
           --
           -- Delete the row if it is end dated.
           --
           if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
               trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
               trunc(l_max_eed) = r_RGR.information3) then
             --
             BEN_POPL_RPTG_GRP_API.delete_POPL_RPTG_GRP(
                --
                p_validate                       => false
                ,p_popl_rptg_grp_id                   => l_popl_rptg_grp_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
           end if;
           --
           l_prev_pk_id := l_current_pk_id ;
           --
         end if;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'RGR',r_rgr.information5 );
     --
 end create_RGR_rows;

   ---------------------------------------------------------------
   ----------------------< create_ECF_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_ECF_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_CTFN_RQD_WHEN_RL  number;
   l_OIPL_ID  number;
   l_PL_ID  number;
   l_ENRT_CTFN_TYP_CD varchar2(30) ;
   --
   cursor c_unique_ECF(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
 ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ENRT_CTFN_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_ECF_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_ECF(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_ECF_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     ECF.enrt_ctfn_id new_value
   from BEN_ENRT_CTFN_F ECF
   where
   nvl(ECF.OIPL_ID,-999)     = nvl(l_OIPL_ID,-999)  and
   nvl(ECF.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
   nvl(ECF.ENRT_CTFN_TYP_CD,'XXX')      = nvl(l_ENRT_CTFN_TYP_CD,'XXX') and
   ECF.business_group_id  = c_business_group_id
   and   ECF.enrt_ctfn_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_ENRT_CTFN_F ECF1
                where
                nvl(ECF1.OIPL_ID,-999)     = nvl(l_OIPL_ID,-999)  and
                nvl(ECF1.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
                ECF1.ENRT_CTFN_TYP_CD      = l_ENRT_CTFN_TYP_CD and
                ECF1.business_group_id  = c_business_group_id
                and   ECF1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ENRT_CTFN_F ECF2
                where
                nvl(ECF2.OIPL_ID,-999)     = nvl(l_OIPL_ID,-999)  and
                nvl(ECF2.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
                ECF2.ENRT_CTFN_TYP_CD      = l_ENRT_CTFN_TYP_CD and
                ECF2.business_group_id  = c_business_group_id
                and   ECF2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_ECF                     c_ECF%rowtype;
   l_enrt_ctfn_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_ECF_unique in c_unique_ECF('ECF') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_ECF_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then

       --
       hr_utility.set_location(' r_ECF_unique.table_route_id '||r_ECF_unique.table_route_id,10);
       hr_utility.set_location(' r_ECF_unique.information1 '||r_ECF_unique.information1,10);
       hr_utility.set_location( 'r_ECF_unique.information2 '||r_ECF_unique.information2,10);
       hr_utility.set_location( 'r_ECF_unique.information3 '||r_ECF_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
         open c_ECF(r_ECF_unique.table_route_id,
                r_ECF_unique.information1,
                r_ECF_unique.information2,
                r_ECF_unique.information3 ) ;
       --
       fetch c_ECF into r_ECF ;
       --
       close c_ECF ;
       l_dml_operation:= r_ECF_unique.dml_operation ;
       l_CTFN_RQD_WHEN_RL := get_fk('FORMULA_ID', r_ECF.INFORMATION262,l_dml_operation);
       l_OIPL_ID := get_fk('OIPL_ID', r_ECF.INFORMATION258,l_dml_operation);
       l_PL_ID := get_fk('PL_ID', r_ECF.INFORMATION261,l_dml_operation);
       l_update := false;
       l_process_date := p_effective_date;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_ECF_unique.information2 and r_ECF_unique.information3 then
               l_update := true;
               if r_ECF_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'ENRT_CTFN_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ENRT_CTFN_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ECF_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_ECF_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ECF_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
     --DOUBT             log_data('ECF',l_new_value,l_prefix || r_ECF_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_ECF_min_max_dates(r_ECF_unique.table_route_id, r_ECF_unique.information1 ) ;
       fetch c_ECF_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_ECF_unique.information2);
  /*     open c_ECF(r_ECF_unique.table_route_id,
                r_ECF_unique.information1,
                r_ECF_unique.information2,
                r_ECF_unique.information3 ) ;
       --
       fetch c_ECF into r_ECF ;
       --
       close c_ECF ;  */
       --
       l_ENRT_CTFN_TYP_CD := r_ECF.information11;
       --
       if p_reuse_object_flag = 'Y' then
         if c_ECF_min_max_dates%found then
           -- cursor to find the object
           open c_find_ECF_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_enrt_ctfn_id, -999)  ) ;
           fetch c_find_ECF_in_target into l_new_value ;
           if c_find_ECF_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_ENRT_CTFN_F',
                  p_base_key_column => 'ENRT_CTFN_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_ECF_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ENRT_CTFN_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ENRT_CTFN_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ECF_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ECF_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_ECF_in_target ;
         --
         end if;
       end if ;
       --
       close c_ECF_min_max_dates ;
       end if; --if p_dml_operation
               --
               if not l_object_found_in_target OR l_update  then
         --
         l_current_pk_id := r_ECF.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_ECF.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

       if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ENRT_CTFN_F CREATE_ENRT_CTFN ',20);
           BEN_ENRT_CTFN_API.CREATE_ENRT_CTFN(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
            ,P_CTFN_RQD_WHEN_RL      => l_CTFN_RQD_WHEN_RL
                         ,P_ECF_ATTRIBUTE1      => r_ECF.INFORMATION111
                         ,P_ECF_ATTRIBUTE10      => r_ECF.INFORMATION120
                         ,P_ECF_ATTRIBUTE11      => r_ECF.INFORMATION121
                         ,P_ECF_ATTRIBUTE12      => r_ECF.INFORMATION122
                         ,P_ECF_ATTRIBUTE13      => r_ECF.INFORMATION123
                         ,P_ECF_ATTRIBUTE14      => r_ECF.INFORMATION124
                         ,P_ECF_ATTRIBUTE15      => r_ECF.INFORMATION125
                         ,P_ECF_ATTRIBUTE16      => r_ECF.INFORMATION126
                         ,P_ECF_ATTRIBUTE17      => r_ECF.INFORMATION127
                         ,P_ECF_ATTRIBUTE18      => r_ECF.INFORMATION128
                         ,P_ECF_ATTRIBUTE19      => r_ECF.INFORMATION129
                         ,P_ECF_ATTRIBUTE2      => r_ECF.INFORMATION112
                         ,P_ECF_ATTRIBUTE20      => r_ECF.INFORMATION130
                         ,P_ECF_ATTRIBUTE21      => r_ECF.INFORMATION131
                         ,P_ECF_ATTRIBUTE22      => r_ECF.INFORMATION132
                         ,P_ECF_ATTRIBUTE23      => r_ECF.INFORMATION133
                         ,P_ECF_ATTRIBUTE24      => r_ECF.INFORMATION134
                         ,P_ECF_ATTRIBUTE25      => r_ECF.INFORMATION135
                         ,P_ECF_ATTRIBUTE26      => r_ECF.INFORMATION136
                         ,P_ECF_ATTRIBUTE27      => r_ECF.INFORMATION137
                         ,P_ECF_ATTRIBUTE28      => r_ECF.INFORMATION138
                         ,P_ECF_ATTRIBUTE29      => r_ECF.INFORMATION139
                         ,P_ECF_ATTRIBUTE3      => r_ECF.INFORMATION113
                         ,P_ECF_ATTRIBUTE30      => r_ECF.INFORMATION140
                         ,P_ECF_ATTRIBUTE4      => r_ECF.INFORMATION114
                         ,P_ECF_ATTRIBUTE5      => r_ECF.INFORMATION115
                         ,P_ECF_ATTRIBUTE6      => r_ECF.INFORMATION116
                         ,P_ECF_ATTRIBUTE7      => r_ECF.INFORMATION117
                         ,P_ECF_ATTRIBUTE8      => r_ECF.INFORMATION118
                         ,P_ECF_ATTRIBUTE9      => r_ECF.INFORMATION119
                         ,P_ECF_ATTRIBUTE_CATEGORY      => r_ECF.INFORMATION110
                         ,P_ENRT_CTFN_ID      => l_enrt_ctfn_id
                         ,P_ENRT_CTFN_TYP_CD      => r_ECF.INFORMATION11
                         ,P_OIPL_ID      => l_OIPL_ID
                         ,P_PL_ID      => l_PL_ID
             ,P_RQD_FLAG      => r_ECF.INFORMATION12
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_enrt_ctfn_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ENRT_CTFN_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_ECF.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ENRT_CTFN_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ECF_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
            hr_utility.set_location(' BEN_ENRT_CTFN_F UPDATE_ENRT_CTFN ',30);
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_ECF.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_ECF.information3,
               p_effective_start_date  => r_ECF.information2,
               p_dml_operation         => r_ECF.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ENRT_CTFN_ID   := r_ECF.information1;
             l_object_version_number := r_ECF.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END

           BEN_ENRT_CTFN_API.UPDATE_ENRT_CTFN(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
            ,P_CTFN_RQD_WHEN_RL      => l_CTFN_RQD_WHEN_RL
                         ,P_ECF_ATTRIBUTE1      => r_ECF.INFORMATION111
                         ,P_ECF_ATTRIBUTE10      => r_ECF.INFORMATION120
                         ,P_ECF_ATTRIBUTE11      => r_ECF.INFORMATION121
                         ,P_ECF_ATTRIBUTE12      => r_ECF.INFORMATION122
                         ,P_ECF_ATTRIBUTE13      => r_ECF.INFORMATION123
                         ,P_ECF_ATTRIBUTE14      => r_ECF.INFORMATION124
                         ,P_ECF_ATTRIBUTE15      => r_ECF.INFORMATION125
                         ,P_ECF_ATTRIBUTE16      => r_ECF.INFORMATION126
                         ,P_ECF_ATTRIBUTE17      => r_ECF.INFORMATION127
                         ,P_ECF_ATTRIBUTE18      => r_ECF.INFORMATION128
                         ,P_ECF_ATTRIBUTE19      => r_ECF.INFORMATION129
                         ,P_ECF_ATTRIBUTE2      => r_ECF.INFORMATION112
                         ,P_ECF_ATTRIBUTE20      => r_ECF.INFORMATION130
                         ,P_ECF_ATTRIBUTE21      => r_ECF.INFORMATION131
                         ,P_ECF_ATTRIBUTE22      => r_ECF.INFORMATION132
                         ,P_ECF_ATTRIBUTE23      => r_ECF.INFORMATION133
                         ,P_ECF_ATTRIBUTE24      => r_ECF.INFORMATION134
                         ,P_ECF_ATTRIBUTE25      => r_ECF.INFORMATION135
                         ,P_ECF_ATTRIBUTE26      => r_ECF.INFORMATION136
                         ,P_ECF_ATTRIBUTE27      => r_ECF.INFORMATION137
                         ,P_ECF_ATTRIBUTE28      => r_ECF.INFORMATION138
                         ,P_ECF_ATTRIBUTE29      => r_ECF.INFORMATION139
                         ,P_ECF_ATTRIBUTE3      => r_ECF.INFORMATION113
                         ,P_ECF_ATTRIBUTE30      => r_ECF.INFORMATION140
                         ,P_ECF_ATTRIBUTE4      => r_ECF.INFORMATION114
                         ,P_ECF_ATTRIBUTE5      => r_ECF.INFORMATION115
                         ,P_ECF_ATTRIBUTE6      => r_ECF.INFORMATION116
                         ,P_ECF_ATTRIBUTE7      => r_ECF.INFORMATION117
                         ,P_ECF_ATTRIBUTE8      => r_ECF.INFORMATION118
                         ,P_ECF_ATTRIBUTE9      => r_ECF.INFORMATION119
                         ,P_ECF_ATTRIBUTE_CATEGORY      => r_ECF.INFORMATION110
                         ,P_ENRT_CTFN_ID      => l_enrt_ctfn_id
                         ,P_ENRT_CTFN_TYP_CD      => r_ECF.INFORMATION11
                         ,P_OIPL_ID      => l_OIPL_ID
                         ,P_PL_ID      => l_PL_ID
             ,P_RQD_FLAG      => r_ECF.INFORMATION12
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
            ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
            end if;  -- l_update
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_ECF.information3) then
             --
             BEN_ENRT_CTFN_API.delete_ENRT_CTFN(
                --
                p_validate                       => false
                ,p_enrt_ctfn_id                   => l_enrt_ctfn_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'ECF',r_ecf.information5 );
     --
 end create_ECF_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_EPA_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_EPA_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_MX_POE_DET_DT_RL  number;
   l_MX_POE_RL  number;
   l_OIPL_ID  number;
   l_PGM_ID  number;
   l_PLIP_ID  number;
   l_PL_ID  number;
   l_PRTN_EFF_END_DT_RL  number;
   l_PRTN_EFF_STRT_DT_RL  number;
   l_PTIP_ID  number;
   l_WAIT_PERD_DT_TO_USE_RL  number;
   l_WAIT_PERD_RL  number;
   cursor c_unique_EPA(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_PRTN_ELIG_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_EPA_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_EPA(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_EPA_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     EPA.prtn_elig_id new_value
   from BEN_PRTN_ELIG_F EPA
   where
   nvl(EPA.OIPL_ID,-999)     = nvl(l_OIPL_ID,-999)  and
   nvl(EPA.PGM_ID,-999)     = nvl(l_PGM_ID,-999)  and
   nvl(EPA.PLIP_ID,-999)     = nvl(l_PLIP_ID,-999)  and
   nvl(EPA.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
   nvl(EPA.PTIP_ID,-999)     = nvl(l_PTIP_ID,-999)  and
   EPA.business_group_id  = c_business_group_id
   and   EPA.prtn_elig_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_PRTN_ELIG_F EPA1
                where
                nvl(EPA1.OIPL_ID,-999)     = nvl(l_OIPL_ID,-999)  and
                nvl(EPA1.PGM_ID,-999)     = nvl(l_PGM_ID,-999)  and
                nvl(EPA1.PLIP_ID,-999)     = nvl(l_PLIP_ID,-999)  and
                nvl(EPA1.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
                nvl(EPA1.PTIP_ID,-999)     = nvl(l_PTIP_ID,-999)  and
                EPA1.business_group_id  = c_business_group_id
                and   EPA1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_PRTN_ELIG_F EPA2
                where
                nvl(EPA2.OIPL_ID,-999)     = nvl(l_OIPL_ID,-999)  and
                nvl(EPA2.PGM_ID,-999)     = nvl(l_PGM_ID,-999)  and
                nvl(EPA2.PLIP_ID,-999)     = nvl(l_PLIP_ID,-999)  and
                nvl(EPA2.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
                nvl(EPA2.PTIP_ID,-999)     = nvl(l_PTIP_ID,-999)  and
                EPA2.business_group_id  = c_business_group_id
                and   EPA2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_EPA                     c_EPA%rowtype;
   l_prtn_elig_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_EPA_unique in c_unique_EPA('EPA') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EPA_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_EPA_unique.table_route_id '||r_EPA_unique.table_route_id,10);
       hr_utility.set_location(' r_EPA_unique.information1 '||r_EPA_unique.information1,10);
       hr_utility.set_location( 'r_EPA_unique.information2 '||r_EPA_unique.information2,10);
       hr_utility.set_location( 'r_EPA_unique.information3 '||r_EPA_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
              open c_EPA(r_EPA_unique.table_route_id,
                r_EPA_unique.information1,
                r_EPA_unique.information2,
                r_EPA_unique.information3 ) ;
       --
       fetch c_EPA into r_EPA ;
       --
       close c_EPA ;
       l_dml_operation:= r_EPA_unique.dml_operation ;
       l_MX_POE_DET_DT_RL := get_fk('FORMULA_ID', r_EPA.INFORMATION269,l_dml_operation );
       l_MX_POE_RL := get_fk('FORMULA_ID', r_EPA.INFORMATION267,l_dml_operation );
       l_OIPL_ID := get_fk('OIPL_ID', r_EPA.INFORMATION258,l_dml_operation );
       l_PGM_ID := get_fk('PGM_ID', r_EPA.INFORMATION260,l_dml_operation );
       l_PLIP_ID := get_fk('PLIP_ID', r_EPA.INFORMATION256,l_dml_operation );
       l_PL_ID := get_fk('PL_ID', r_EPA.INFORMATION261,l_dml_operation );
       l_PRTN_EFF_END_DT_RL := get_fk('FORMULA_ID', r_EPA.INFORMATION271,l_dml_operation );
       l_PRTN_EFF_STRT_DT_RL := get_fk('FORMULA_ID', r_EPA.INFORMATION270,l_dml_operation );
       l_PTIP_ID := get_fk('PTIP_ID', r_EPA.INFORMATION259,l_dml_operation );
       l_WAIT_PERD_DT_TO_USE_RL := get_fk('FORMULA_ID', r_EPA.INFORMATION264,l_dml_operation );
       l_WAIT_PERD_RL := get_fk('FORMULA_ID', r_EPA.INFORMATION268,l_dml_operation );
       l_update := false;
       l_process_date := p_effective_date;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EPA_unique.information2 and r_EPA_unique.information3 then
               l_update := true;
               if r_EPA_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'PRTN_ELIG_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PRTN_ELIG_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EPA_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EPA_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EPA_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
      --DOUBT            log_data('EPA',l_new_value,l_prefix || r_EPA_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_EPA_min_max_dates(r_EPA_unique.table_route_id, r_EPA_unique.information1 ) ;
       fetch c_EPA_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
        l_min_esd := greatest(l_min_esd,r_EPA_unique.information2);
/*       open c_EPA(r_EPA_unique.table_route_id,
                r_EPA_unique.information1,
                r_EPA_unique.information2,
                r_EPA_unique.information3 ) ;
       --
       fetch c_EPA into r_EPA ;
       --
       close c_EPA ;  */
       --
       if p_reuse_object_flag = 'Y' then
         if c_EPA_min_max_dates%found then
           -- cursor to find the object
           open c_find_EPA_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_prtn_elig_id, -999)  ) ;
           fetch c_find_EPA_in_target into l_new_value ;
           if c_find_EPA_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_PRTN_ELIG_F',
                  p_base_key_column => 'PRTN_ELIG_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_EPA_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'PRTN_ELIG_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PRTN_ELIG_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EPA_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EPA_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_EPA_in_target ;
         --
         end if;
       end if ;
       --
       close c_EPA_min_max_dates ;
       end if; --if p_dml_operation
               --
               if not l_object_found_in_target OR l_update  then
         --
         l_current_pk_id := r_EPA.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_EPA.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

        if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_PRTN_ELIG_F CREATE_PARTICIPATION_ELIG ',20);
           BEN_PARTICIPATION_ELIG_API.CREATE_PARTICIPATION_ELIG(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
              ,P_EPA_ATTRIBUTE1      => r_EPA.INFORMATION111
                          ,P_EPA_ATTRIBUTE10      => r_EPA.INFORMATION120
                          ,P_EPA_ATTRIBUTE11      => r_EPA.INFORMATION121
                          ,P_EPA_ATTRIBUTE12      => r_EPA.INFORMATION122
                          ,P_EPA_ATTRIBUTE13      => r_EPA.INFORMATION123
                          ,P_EPA_ATTRIBUTE14      => r_EPA.INFORMATION124
                          ,P_EPA_ATTRIBUTE15      => r_EPA.INFORMATION125
                          ,P_EPA_ATTRIBUTE16      => r_EPA.INFORMATION126
                          ,P_EPA_ATTRIBUTE17      => r_EPA.INFORMATION127
                          ,P_EPA_ATTRIBUTE18      => r_EPA.INFORMATION128
                          ,P_EPA_ATTRIBUTE19      => r_EPA.INFORMATION129
                          ,P_EPA_ATTRIBUTE2      => r_EPA.INFORMATION112
                          ,P_EPA_ATTRIBUTE20      => r_EPA.INFORMATION130
                          ,P_EPA_ATTRIBUTE21      => r_EPA.INFORMATION131
                          ,P_EPA_ATTRIBUTE22      => r_EPA.INFORMATION132
                          ,P_EPA_ATTRIBUTE23      => r_EPA.INFORMATION133
                          ,P_EPA_ATTRIBUTE24      => r_EPA.INFORMATION134
                          ,P_EPA_ATTRIBUTE25      => r_EPA.INFORMATION135
                          ,P_EPA_ATTRIBUTE26      => r_EPA.INFORMATION136
                          ,P_EPA_ATTRIBUTE27      => r_EPA.INFORMATION137
                          ,P_EPA_ATTRIBUTE28      => r_EPA.INFORMATION138
                          ,P_EPA_ATTRIBUTE29      => r_EPA.INFORMATION139
                          ,P_EPA_ATTRIBUTE3      => r_EPA.INFORMATION113
                          ,P_EPA_ATTRIBUTE30      => r_EPA.INFORMATION140
                          ,P_EPA_ATTRIBUTE4      => r_EPA.INFORMATION114
                          ,P_EPA_ATTRIBUTE5      => r_EPA.INFORMATION115
                          ,P_EPA_ATTRIBUTE6      => r_EPA.INFORMATION116
                          ,P_EPA_ATTRIBUTE7      => r_EPA.INFORMATION117
                          ,P_EPA_ATTRIBUTE8      => r_EPA.INFORMATION118
                          ,P_EPA_ATTRIBUTE9      => r_EPA.INFORMATION119
                          ,P_EPA_ATTRIBUTE_CATEGORY      => r_EPA.INFORMATION110
                          ,P_MX_POE_APLS_CD      => r_EPA.INFORMATION17
                          ,P_MX_POE_DET_DT_CD      => r_EPA.INFORMATION13
                          ,P_MX_POE_DET_DT_RL      => l_MX_POE_DET_DT_RL
                          ,P_MX_POE_RL      => l_MX_POE_RL
                          ,P_MX_POE_UOM      => r_EPA.INFORMATION11
                          ,P_MX_POE_VAL      => r_EPA.INFORMATION266
                          ,P_OIPL_ID      => l_OIPL_ID
                          ,P_PGM_ID      => l_PGM_ID
                          ,P_PLIP_ID      => l_PLIP_ID
                          ,P_PL_ID      => l_PL_ID
                          ,P_PRTN_EFF_END_DT_CD      => r_EPA.INFORMATION16
                          ,P_PRTN_EFF_END_DT_RL      => l_PRTN_EFF_END_DT_RL
                          ,P_PRTN_EFF_STRT_DT_CD      => r_EPA.INFORMATION15
                          ,P_PRTN_EFF_STRT_DT_RL      => l_PRTN_EFF_STRT_DT_RL
                          ,P_PRTN_ELIG_ID      => l_prtn_elig_id
                          ,P_PTIP_ID      => l_PTIP_ID
                          ,P_WAIT_PERD_DT_TO_USE_CD      => r_EPA.INFORMATION12
                          ,P_WAIT_PERD_DT_TO_USE_RL      => l_WAIT_PERD_DT_TO_USE_RL
                          ,P_WAIT_PERD_RL      => l_WAIT_PERD_RL
                          ,P_WAIT_PERD_UOM      => r_EPA.INFORMATION14
             ,P_WAIT_PERD_VAL      => r_EPA.INFORMATION287
	     ,P_TRK_SCR_FOR_INELG_FLAG => r_EPA.INFORMATION18  --BugNo 4242438
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_prtn_elig_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'PRTN_ELIG_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EPA.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_PRTN_ELIG_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EPA_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
            hr_utility.set_location(' BEN_PRTN_ELIG_F UPDATE_PARTICIPATION_ELIG ',30);
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EPA.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EPA.information3,
               p_effective_start_date  => r_EPA.information2,
               p_dml_operation         => r_EPA.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_PRTN_ELIG_ID   := r_EPA.information1;
             l_object_version_number := r_EPA.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END

           BEN_PARTICIPATION_ELIG_API.UPDATE_PARTICIPATION_ELIG(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EPA_ATTRIBUTE1      => r_EPA.INFORMATION111
                         ,P_EPA_ATTRIBUTE10      => r_EPA.INFORMATION120
                         ,P_EPA_ATTRIBUTE11      => r_EPA.INFORMATION121
                         ,P_EPA_ATTRIBUTE12      => r_EPA.INFORMATION122
                         ,P_EPA_ATTRIBUTE13      => r_EPA.INFORMATION123
                         ,P_EPA_ATTRIBUTE14      => r_EPA.INFORMATION124
                         ,P_EPA_ATTRIBUTE15      => r_EPA.INFORMATION125
                         ,P_EPA_ATTRIBUTE16      => r_EPA.INFORMATION126
                         ,P_EPA_ATTRIBUTE17      => r_EPA.INFORMATION127
                         ,P_EPA_ATTRIBUTE18      => r_EPA.INFORMATION128
                         ,P_EPA_ATTRIBUTE19      => r_EPA.INFORMATION129
                         ,P_EPA_ATTRIBUTE2      => r_EPA.INFORMATION112
                         ,P_EPA_ATTRIBUTE20      => r_EPA.INFORMATION130
                         ,P_EPA_ATTRIBUTE21      => r_EPA.INFORMATION131
                         ,P_EPA_ATTRIBUTE22      => r_EPA.INFORMATION132
                         ,P_EPA_ATTRIBUTE23      => r_EPA.INFORMATION133
                         ,P_EPA_ATTRIBUTE24      => r_EPA.INFORMATION134
                         ,P_EPA_ATTRIBUTE25      => r_EPA.INFORMATION135
                         ,P_EPA_ATTRIBUTE26      => r_EPA.INFORMATION136
                         ,P_EPA_ATTRIBUTE27      => r_EPA.INFORMATION137
                         ,P_EPA_ATTRIBUTE28      => r_EPA.INFORMATION138
                         ,P_EPA_ATTRIBUTE29      => r_EPA.INFORMATION139
                         ,P_EPA_ATTRIBUTE3      => r_EPA.INFORMATION113
                         ,P_EPA_ATTRIBUTE30      => r_EPA.INFORMATION140
                         ,P_EPA_ATTRIBUTE4      => r_EPA.INFORMATION114
                         ,P_EPA_ATTRIBUTE5      => r_EPA.INFORMATION115
                         ,P_EPA_ATTRIBUTE6      => r_EPA.INFORMATION116
                         ,P_EPA_ATTRIBUTE7      => r_EPA.INFORMATION117
                         ,P_EPA_ATTRIBUTE8      => r_EPA.INFORMATION118
                         ,P_EPA_ATTRIBUTE9      => r_EPA.INFORMATION119
                         ,P_EPA_ATTRIBUTE_CATEGORY      => r_EPA.INFORMATION110
                         ,P_MX_POE_APLS_CD      => r_EPA.INFORMATION17
                         ,P_MX_POE_DET_DT_CD      => r_EPA.INFORMATION13
                         ,P_MX_POE_DET_DT_RL      => l_MX_POE_DET_DT_RL
                         ,P_MX_POE_RL      => l_MX_POE_RL
                         ,P_MX_POE_UOM      => r_EPA.INFORMATION11
                         ,P_MX_POE_VAL      => r_EPA.INFORMATION266
                         ,P_OIPL_ID      => l_OIPL_ID
                         ,P_PGM_ID      => l_PGM_ID
                         ,P_PLIP_ID      => l_PLIP_ID
                         ,P_PL_ID      => l_PL_ID
                         ,P_PRTN_EFF_END_DT_CD      => r_EPA.INFORMATION16
                         ,P_PRTN_EFF_END_DT_RL      => l_PRTN_EFF_END_DT_RL
                         ,P_PRTN_EFF_STRT_DT_CD      => r_EPA.INFORMATION15
                         ,P_PRTN_EFF_STRT_DT_RL      => l_PRTN_EFF_STRT_DT_RL
                         ,P_PRTN_ELIG_ID      => l_prtn_elig_id
                         ,P_PTIP_ID      => l_PTIP_ID
                         ,P_WAIT_PERD_DT_TO_USE_CD      => r_EPA.INFORMATION12
                         ,P_WAIT_PERD_DT_TO_USE_RL      => l_WAIT_PERD_DT_TO_USE_RL
                         ,P_WAIT_PERD_RL      => l_WAIT_PERD_RL
                         ,P_WAIT_PERD_UOM      => r_EPA.INFORMATION14
             ,P_WAIT_PERD_VAL      => r_EPA.INFORMATION287
	     ,P_TRK_SCR_FOR_INELG_FLAG => r_EPA.INFORMATION18  --BugNo 4242438
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;  -- l_update
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_EPA.information3) then
             --
             BEN_PARTICIPATION_ELIG_API.delete_PARTICIPATION_ELIG(
                --
                p_validate                       => false
                ,p_prtn_elig_id                   => l_prtn_elig_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EPA',r_epa.information5 );
     --
 end create_EPA_rows;

   ---------------------------------------------------------------
   ----------------------< create_CPY_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_CPY_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_PGM_ID  number;
   l_PL_ID  number;
   l_YR_PERD_ID  number;
   cursor c_unique_CPY(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
  ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_POPL_YR_PERD
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_CPY_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_CPY(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_CPY_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     CPY.popl_yr_perd_id new_value
   from BEN_POPL_YR_PERD CPY
   where
   nvl(CPY.PGM_ID,-999)     = nvl(l_PGM_ID,-999)  and
   nvl(CPY.PL_ID,-999)      = nvl(l_PL_ID,-999)  and
   CPY.YR_PERD_ID           = l_YR_PERD_ID  and
   CPY.business_group_id  = c_business_group_id
   and   CPY.popl_yr_perd_id  <> c_new_pk_id
                ;
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_CPY                     c_CPY%rowtype;
   l_popl_yr_perd_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_CPY_unique in c_unique_CPY('CPY') loop
     --
     hr_utility.set_location(' r_CPY_unique.table_route_id '||r_CPY_unique.table_route_id,10);
     hr_utility.set_location(' r_CPY_unique.information1 '||r_CPY_unique.information1,10);
     hr_utility.set_location( 'r_CPY_unique.information2 '||r_CPY_unique.information2,10);
     hr_utility.set_location( 'r_CPY_unique.information3 '||r_CPY_unique.information3,10);
     -- If reuse objects flag is 'Y' then check for the object in the target business group
     -- if found insert the record into PLSql table and exit the loop else try create the
     -- object in the target business group
     --
     l_object_found_in_target := false ;
     l_min_esd := null ;
     l_max_eed := null ;
       --
       open c_CPY(r_CPY_unique.table_route_id,
                r_CPY_unique.information1,
                r_CPY_unique.information2,
                r_CPY_unique.information3 ) ;
       --
       fetch c_CPY into r_CPY ;
       --
       close c_CPY ;
       --
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_CPY_unique.dml_operation ;
       l_PGM_ID := get_fk('PGM_ID', r_CPY.INFORMATION260,l_dml_operation);
       l_PL_ID := get_fk('PL_ID', r_CPY.INFORMATION261,l_dml_operation);
       l_YR_PERD_ID := get_fk('YR_PERD_ID', r_CPY.INFORMATION240,l_dml_operation);
       --UPD START
     --
     if l_dml_operation = 'UPDATE' then
       --
               l_update := true;
               if r_CPY_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'POPL_YR_PERD_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'POPL_YR_PERD_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_CPY_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_CPY_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_CPY_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ; -- NEW
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
 --DOUBT                 log_data('CPY',l_new_value,l_prefix || r_CPY_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               l_POPL_YR_PERD_ID := r_CPY_unique.information1 ;
               l_object_version_number := r_CPY.information265 ;
               hr_utility.set_location( 'found record for update',10);
           --
     else
     --
     --UPD END
     if p_reuse_object_flag = 'Y' then
           -- cursor to find the object
           open c_find_CPY_in_target( r_CPY_unique.information2,l_max_eed,
                                 p_target_business_group_id, nvl(l_popl_yr_perd_id, -999)  ) ;
           fetch c_find_CPY_in_target into l_new_value ;
           if c_find_CPY_in_target%found then
             --
             if r_CPY_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'POPL_YR_PERD_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'POPL_YR_PERD_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_CPY_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_CPY_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
           end if;
           close c_find_CPY_in_target ;
         --
     end if ;
     --
    end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then
       --
       l_current_pk_id := r_CPY.information1;
       --
       hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
       hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
       --
       if l_current_pk_id =  l_prev_pk_id  then
         --
         l_first_rec := false ;
         --
       else
         --
         l_first_rec := true ;
         --
       end if ;
       --
       -- To avoid creating a child with out a parent
       --
       --
       if l_PGM_ID is null and l_PL_ID is null then
          l_first_rec := false ;
       end if;
       --
      if l_first_rec and not l_update then
         -- Call Create routine.
         hr_utility.set_location(' BEN_POPL_YR_PERD CREATE_POPL_YR_PERD ',20);
         BEN_POPL_YR_PERD_API.CREATE_POPL_YR_PERD(
             --
             P_VALIDATE               => false
             --,P_EFFECTIVE_DATE        => p_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ACPT_CLM_RQSTS_THRU_DT      => r_CPY.INFORMATION308
                         ,P_CPY_ATTRIBUTE1      => r_CPY.INFORMATION111
                         ,P_CPY_ATTRIBUTE10      => r_CPY.INFORMATION120
                         ,P_CPY_ATTRIBUTE11      => r_CPY.INFORMATION121
                         ,P_CPY_ATTRIBUTE12      => r_CPY.INFORMATION122
                         ,P_CPY_ATTRIBUTE13      => r_CPY.INFORMATION123
                         ,P_CPY_ATTRIBUTE14      => r_CPY.INFORMATION124
                         ,P_CPY_ATTRIBUTE15      => r_CPY.INFORMATION125
                         ,P_CPY_ATTRIBUTE16      => r_CPY.INFORMATION126
                         ,P_CPY_ATTRIBUTE17      => r_CPY.INFORMATION127
                         ,P_CPY_ATTRIBUTE18      => r_CPY.INFORMATION128
                         ,P_CPY_ATTRIBUTE19      => r_CPY.INFORMATION129
                         ,P_CPY_ATTRIBUTE2      => r_CPY.INFORMATION112
                         ,P_CPY_ATTRIBUTE20      => r_CPY.INFORMATION130
                         ,P_CPY_ATTRIBUTE21      => r_CPY.INFORMATION131
                         ,P_CPY_ATTRIBUTE22      => r_CPY.INFORMATION132
                         ,P_CPY_ATTRIBUTE23      => r_CPY.INFORMATION133
                         ,P_CPY_ATTRIBUTE24      => r_CPY.INFORMATION134
                         ,P_CPY_ATTRIBUTE25      => r_CPY.INFORMATION135
                         ,P_CPY_ATTRIBUTE26      => r_CPY.INFORMATION136
                         ,P_CPY_ATTRIBUTE27      => r_CPY.INFORMATION137
                         ,P_CPY_ATTRIBUTE28      => r_CPY.INFORMATION138
                         ,P_CPY_ATTRIBUTE29      => r_CPY.INFORMATION139
                         ,P_CPY_ATTRIBUTE3      => r_CPY.INFORMATION113
                         ,P_CPY_ATTRIBUTE30      => r_CPY.INFORMATION140
                         ,P_CPY_ATTRIBUTE4      => r_CPY.INFORMATION114
                         ,P_CPY_ATTRIBUTE5      => r_CPY.INFORMATION115
                         ,P_CPY_ATTRIBUTE6      => r_CPY.INFORMATION116
                         ,P_CPY_ATTRIBUTE7      => r_CPY.INFORMATION117
                         ,P_CPY_ATTRIBUTE8      => r_CPY.INFORMATION118
                         ,P_CPY_ATTRIBUTE9      => r_CPY.INFORMATION119
                         ,P_CPY_ATTRIBUTE_CATEGORY      => r_CPY.INFORMATION110
                         ,P_ORDR_NUM      => r_CPY.INFORMATION262
                         ,P_PGM_ID      => l_PGM_ID
                         ,P_PL_ID      => l_PL_ID
                         ,P_POPL_YR_PERD_ID      => l_popl_yr_perd_id
                         ,P_PY_CLMS_THRU_DT      => r_CPY.INFORMATION309
             ,P_YR_PERD_ID      => l_YR_PERD_ID
             --
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
         );
         -- insert the table_name,old_pk_id,new_pk_id into a plsql record
         -- Update all relevent cer records with new pk_id
         hr_utility.set_location('Before plsql table ',222);
         hr_utility.set_location('new_value id '||l_popl_yr_perd_id,222);
         BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'POPL_YR_PERD_ID' ;
         BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_CPY.information1 ;
         BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_POPL_YR_PERD_ID ;
         BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
         BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_CPY_unique.table_route_id;
         hr_utility.set_location('After plsql table ',222);
         --
         -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
         --
         BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
      elsif l_update then
      BEN_POPL_YR_PERD_API.UPDATE_POPL_YR_PERD(
             --
             P_VALIDATE               => false
             --,P_EFFECTIVE_DATE        => p_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ACPT_CLM_RQSTS_THRU_DT      => r_CPY.INFORMATION308
                         ,P_CPY_ATTRIBUTE1      => r_CPY.INFORMATION111
                         ,P_CPY_ATTRIBUTE10      => r_CPY.INFORMATION120
                         ,P_CPY_ATTRIBUTE11      => r_CPY.INFORMATION121
                         ,P_CPY_ATTRIBUTE12      => r_CPY.INFORMATION122
                         ,P_CPY_ATTRIBUTE13      => r_CPY.INFORMATION123
                         ,P_CPY_ATTRIBUTE14      => r_CPY.INFORMATION124
                         ,P_CPY_ATTRIBUTE15      => r_CPY.INFORMATION125
                         ,P_CPY_ATTRIBUTE16      => r_CPY.INFORMATION126
                         ,P_CPY_ATTRIBUTE17      => r_CPY.INFORMATION127
                         ,P_CPY_ATTRIBUTE18      => r_CPY.INFORMATION128
                         ,P_CPY_ATTRIBUTE19      => r_CPY.INFORMATION129
                         ,P_CPY_ATTRIBUTE2      => r_CPY.INFORMATION112
                         ,P_CPY_ATTRIBUTE20      => r_CPY.INFORMATION130
                         ,P_CPY_ATTRIBUTE21      => r_CPY.INFORMATION131
                         ,P_CPY_ATTRIBUTE22      => r_CPY.INFORMATION132
                         ,P_CPY_ATTRIBUTE23      => r_CPY.INFORMATION133
                         ,P_CPY_ATTRIBUTE24      => r_CPY.INFORMATION134
                         ,P_CPY_ATTRIBUTE25      => r_CPY.INFORMATION135
                         ,P_CPY_ATTRIBUTE26      => r_CPY.INFORMATION136
                         ,P_CPY_ATTRIBUTE27      => r_CPY.INFORMATION137
                         ,P_CPY_ATTRIBUTE28      => r_CPY.INFORMATION138
                         ,P_CPY_ATTRIBUTE29      => r_CPY.INFORMATION139
                         ,P_CPY_ATTRIBUTE3      => r_CPY.INFORMATION113
                         ,P_CPY_ATTRIBUTE30      => r_CPY.INFORMATION140
                         ,P_CPY_ATTRIBUTE4      => r_CPY.INFORMATION114
                         ,P_CPY_ATTRIBUTE5      => r_CPY.INFORMATION115
                         ,P_CPY_ATTRIBUTE6      => r_CPY.INFORMATION116
                         ,P_CPY_ATTRIBUTE7      => r_CPY.INFORMATION117
                         ,P_CPY_ATTRIBUTE8      => r_CPY.INFORMATION118
                         ,P_CPY_ATTRIBUTE9      => r_CPY.INFORMATION119
                         ,P_CPY_ATTRIBUTE_CATEGORY      => r_CPY.INFORMATION110
                         ,P_ORDR_NUM      => r_CPY.INFORMATION262
                         ,P_PGM_ID      => l_PGM_ID
                         ,P_PL_ID      => l_PL_ID
                         ,P_POPL_YR_PERD_ID      => l_popl_yr_perd_id
                         ,P_PY_CLMS_THRU_DT      => r_CPY.INFORMATION309
             ,P_YR_PERD_ID      => l_YR_PERD_ID
             --
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
         );
         --
       end if;
       --
       l_prev_pk_id := l_current_pk_id ;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'CPY',r_cpy.information5 );
     --
 end create_CPY_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_PET_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_PET_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_PGM_ID  number;
   l_PL_ID  number;
   l_ENRT_TYP_CYCL_CD varchar2(30);
   --
   cursor c_unique_PET(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_POPL_ENRT_TYP_CYCL_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_PET_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_PET(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_PET_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     PET.popl_enrt_typ_cycl_id new_value
   from BEN_POPL_ENRT_TYP_CYCL_F PET
   where
   nvl(PET.PGM_ID,-999)     = nvl(l_PGM_ID,-999)  and
   nvl(PET.PL_ID,-999)      = nvl(l_PL_ID,-999)  and
   PET.ENRT_TYP_CYCL_CD     = l_ENRT_TYP_CYCL_CD and
   PET.business_group_id  = c_business_group_id
   and   PET.popl_enrt_typ_cycl_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_POPL_ENRT_TYP_CYCL_F PET1
                where
                nvl(PET1.PGM_ID,-999)     = nvl(l_PGM_ID,-999)  and
                nvl(PET1.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
                PET1.ENRT_TYP_CYCL_CD     = l_ENRT_TYP_CYCL_CD and
                PET1.business_group_id  = c_business_group_id
                and   PET1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_POPL_ENRT_TYP_CYCL_F PET2
                where
                nvl(PET2.PGM_ID,-999)     = nvl(l_PGM_ID,-999)  and
                nvl(PET2.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
                PET2.ENRT_TYP_CYCL_CD     = l_ENRT_TYP_CYCL_CD and
                PET2.business_group_id  = c_business_group_id
                and   PET2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_PET                     c_PET%rowtype;
   l_popl_enrt_typ_cycl_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_PET_unique in c_unique_PET('PET') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_PET_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_PET_unique.table_route_id '||r_PET_unique.table_route_id,10);
       hr_utility.set_location(' r_PET_unique.information1 '||r_PET_unique.information1,10);
       hr_utility.set_location( 'r_PET_unique.information2 '||r_PET_unique.information2,10);
       hr_utility.set_location( 'r_PET_unique.information3 '||r_PET_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
              open c_PET(r_PET_unique.table_route_id,
                r_PET_unique.information1,
                r_PET_unique.information2,
                r_PET_unique.information3 ) ;
       --
       fetch c_PET into r_PET ;
       --
       close c_PET ;
       l_dml_operation:= r_PET_unique.dml_operation ;
       l_PGM_ID := get_fk('PGM_ID', r_PET.INFORMATION260,l_dml_operation );
       l_PL_ID := get_fk('PL_ID', r_PET.INFORMATION261,l_dml_operation );
       l_ENRT_TYP_CYCL_CD :=  r_PET.information11 ;
       l_update := false;
       l_process_date := p_effective_date;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_PET_unique.information2 and r_PET_unique.information3 then
               l_update := true;
               if r_PET_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'POPL_ENRT_TYP_CYCL_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'POPL_ENRT_TYP_CYCL_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_PET_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_PET_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PET_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
    --DOUBT             log_data('PET',l_new_value,l_prefix || r_PET_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_PET_min_max_dates(r_PET_unique.table_route_id, r_PET_unique.information1 ) ;
       fetch c_PET_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
        l_min_esd := greatest(l_min_esd,r_PET_unique.information2);
/*       open c_PET(r_PET_unique.table_route_id,
                r_PET_unique.information1,
                r_PET_unique.information2,
                r_PET_unique.information3 ) ;
       --
       fetch c_PET into r_PET ;
       --
       close c_PET ;   */
       --
       if p_reuse_object_flag = 'Y' then
         if c_PET_min_max_dates%found then
           -- cursor to find the object
           open c_find_PET_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_popl_enrt_typ_cycl_id, -999)  ) ;
           fetch c_find_PET_in_target into l_new_value ;
           if c_find_PET_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_POPL_ENRT_TYP_CYCL_F',
                  p_base_key_column => 'POPL_ENRT_TYP_CYCL_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_PET_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'POPL_ENRT_TYP_CYCL_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'POPL_ENRT_TYP_CYCL_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_PET_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PET_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_PET_in_target ;
         --
         end if;
       end if ;
       --
       close c_PET_min_max_dates ;
       end if; --if p_dml_operation
                       --
                       if not l_object_found_in_target OR l_update  then
         --
         l_current_pk_id := r_PET.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_PET.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_POPL_ENRT_TYP_CYCL_F CREATE_POPL_ENRT_TYP_CYCL ',20);
           BEN_POPL_ENRT_TYP_CYCL_API.CREATE_POPL_ENRT_TYP_CYCL(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
           ,P_ENRT_TYP_CYCL_CD      => r_PET.INFORMATION11
                        ,P_PET_ATTRIBUTE1      => r_PET.INFORMATION111
                        ,P_PET_ATTRIBUTE10      => r_PET.INFORMATION120
                        ,P_PET_ATTRIBUTE11      => r_PET.INFORMATION121
                        ,P_PET_ATTRIBUTE12      => r_PET.INFORMATION122
                        ,P_PET_ATTRIBUTE13      => r_PET.INFORMATION123
                        ,P_PET_ATTRIBUTE14      => r_PET.INFORMATION124
                        ,P_PET_ATTRIBUTE15      => r_PET.INFORMATION125
                        ,P_PET_ATTRIBUTE16      => r_PET.INFORMATION126
                        ,P_PET_ATTRIBUTE17      => r_PET.INFORMATION127
                        ,P_PET_ATTRIBUTE18      => r_PET.INFORMATION128
                        ,P_PET_ATTRIBUTE19      => r_PET.INFORMATION129
                        ,P_PET_ATTRIBUTE2      => r_PET.INFORMATION112
                        ,P_PET_ATTRIBUTE20      => r_PET.INFORMATION130
                        ,P_PET_ATTRIBUTE21      => r_PET.INFORMATION131
                        ,P_PET_ATTRIBUTE22      => r_PET.INFORMATION132
                        ,P_PET_ATTRIBUTE23      => r_PET.INFORMATION133
                        ,P_PET_ATTRIBUTE24      => r_PET.INFORMATION134
                        ,P_PET_ATTRIBUTE25      => r_PET.INFORMATION135
                        ,P_PET_ATTRIBUTE26      => r_PET.INFORMATION136
                        ,P_PET_ATTRIBUTE27      => r_PET.INFORMATION137
                        ,P_PET_ATTRIBUTE28      => r_PET.INFORMATION138
                        ,P_PET_ATTRIBUTE29      => r_PET.INFORMATION139
                        ,P_PET_ATTRIBUTE3      => r_PET.INFORMATION113
                        ,P_PET_ATTRIBUTE30      => r_PET.INFORMATION140
                        ,P_PET_ATTRIBUTE4      => r_PET.INFORMATION114
                        ,P_PET_ATTRIBUTE5      => r_PET.INFORMATION115
                        ,P_PET_ATTRIBUTE6      => r_PET.INFORMATION116
                        ,P_PET_ATTRIBUTE7      => r_PET.INFORMATION117
                        ,P_PET_ATTRIBUTE8      => r_PET.INFORMATION118
                        ,P_PET_ATTRIBUTE9      => r_PET.INFORMATION119
                        ,P_PET_ATTRIBUTE_CATEGORY      => r_PET.INFORMATION110
                        ,P_PGM_ID      => l_PGM_ID
                        ,P_PL_ID      => l_PL_ID
             ,P_POPL_ENRT_TYP_CYCL_ID      => l_popl_enrt_typ_cycl_id
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_popl_enrt_typ_cycl_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'POPL_ENRT_TYP_CYCL_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_PET.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_POPL_ENRT_TYP_CYCL_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PET_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_POPL_ENRT_TYP_CYCL_F UPDATE_POPL_ENRT_TYP_CYCL ',30);
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_PET.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_PET.information3,
               p_effective_start_date  => r_PET.information2,
               p_dml_operation         => r_PET.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_POPL_ENRT_TYP_CYCL_ID   := r_PET.information1;
             l_object_version_number := r_PET.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           BEN_POPL_ENRT_TYP_CYCL_API.UPDATE_POPL_ENRT_TYP_CYCL(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
            ,P_ENRT_TYP_CYCL_CD      => r_PET.INFORMATION11
                         ,P_PET_ATTRIBUTE1      => r_PET.INFORMATION111
                         ,P_PET_ATTRIBUTE10      => r_PET.INFORMATION120
                         ,P_PET_ATTRIBUTE11      => r_PET.INFORMATION121
                         ,P_PET_ATTRIBUTE12      => r_PET.INFORMATION122
                         ,P_PET_ATTRIBUTE13      => r_PET.INFORMATION123
                         ,P_PET_ATTRIBUTE14      => r_PET.INFORMATION124
                         ,P_PET_ATTRIBUTE15      => r_PET.INFORMATION125
                         ,P_PET_ATTRIBUTE16      => r_PET.INFORMATION126
                         ,P_PET_ATTRIBUTE17      => r_PET.INFORMATION127
                         ,P_PET_ATTRIBUTE18      => r_PET.INFORMATION128
                         ,P_PET_ATTRIBUTE19      => r_PET.INFORMATION129
                         ,P_PET_ATTRIBUTE2      => r_PET.INFORMATION112
                         ,P_PET_ATTRIBUTE20      => r_PET.INFORMATION130
                         ,P_PET_ATTRIBUTE21      => r_PET.INFORMATION131
                         ,P_PET_ATTRIBUTE22      => r_PET.INFORMATION132
                         ,P_PET_ATTRIBUTE23      => r_PET.INFORMATION133
                         ,P_PET_ATTRIBUTE24      => r_PET.INFORMATION134
                         ,P_PET_ATTRIBUTE25      => r_PET.INFORMATION135
                         ,P_PET_ATTRIBUTE26      => r_PET.INFORMATION136
                         ,P_PET_ATTRIBUTE27      => r_PET.INFORMATION137
                         ,P_PET_ATTRIBUTE28      => r_PET.INFORMATION138
                         ,P_PET_ATTRIBUTE29      => r_PET.INFORMATION139
                         ,P_PET_ATTRIBUTE3      => r_PET.INFORMATION113
                         ,P_PET_ATTRIBUTE30      => r_PET.INFORMATION140
                         ,P_PET_ATTRIBUTE4      => r_PET.INFORMATION114
                         ,P_PET_ATTRIBUTE5      => r_PET.INFORMATION115
                         ,P_PET_ATTRIBUTE6      => r_PET.INFORMATION116
                         ,P_PET_ATTRIBUTE7      => r_PET.INFORMATION117
                         ,P_PET_ATTRIBUTE8      => r_PET.INFORMATION118
                         ,P_PET_ATTRIBUTE9      => r_PET.INFORMATION119
                         ,P_PET_ATTRIBUTE_CATEGORY      => r_PET.INFORMATION110
                         ,P_PGM_ID      => l_PGM_ID
                         ,P_PL_ID      => l_PL_ID
             ,P_POPL_ENRT_TYP_CYCL_ID      => l_popl_enrt_typ_cycl_id
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;  -- l_update
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_PET.information3) then
             --
             BEN_POPL_ENRT_TYP_CYCL_API.delete_POPL_ENRT_TYP_CYCL(
                --
                p_validate                       => false
                ,p_popl_enrt_typ_cycl_id                   => l_popl_enrt_typ_cycl_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'PET',r_pet.information5 );
     --
 end create_PET_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_ENP_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_ENP_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ENRT_CVG_END_DT_RL  number;
   l_ENRT_CVG_STRT_DT_RL  number;
   l_LER_ID  number;
   l_POPL_ENRT_TYP_CYCL_ID  number;
   l_POS_STRUCTURE_VERSION_ID  number;
   l_RT_END_DT_RL  number;
   l_RT_STRT_DT_RL  number;
   l_HRCHY_RL  number;
   l_WTHN_YR_PERD_ID  number;
   l_YR_PERD_ID  number;
   cursor c_unique_ENP(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
  ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ENRT_PERD
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,
            cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_ENP_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_ENP(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_ENP_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     ENP.enrt_perd_id new_value
   from BEN_ENRT_PERD ENP
   where
   ENP.POPL_ENRT_TYP_CYCL_ID  = l_POPL_ENRT_TYP_CYCL_ID  and
   nvl(ENP.LER_ID,-999)     = nvl(l_LER_ID,-999)  and
   nvl(ENP.YR_PERD_ID,-999)     = nvl(l_YR_PERD_ID,-999)  and
   ENP.business_group_id  = c_business_group_id
   and   ENP.enrt_perd_id  <> c_new_pk_id
                ;
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_ENP                     c_ENP%rowtype;
   l_enrt_perd_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_parent_effective_start_date date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_ENP_unique in c_unique_ENP('ENP') loop
     --
     hr_utility.set_location(' r_ENP_unique.table_route_id '||r_ENP_unique.table_route_id,10);
     hr_utility.set_location(' r_ENP_unique.information1 '||r_ENP_unique.information1,10);
     hr_utility.set_location( 'r_ENP_unique.information2 '||r_ENP_unique.information2,10);
     hr_utility.set_location( 'r_ENP_unique.information3 '||r_ENP_unique.information3,10);
     -- If reuse objects flag is 'Y' then check for the object in the target business group
     -- if found insert the record into PLSql table and exit the loop else try create the
     -- object in the target business group
     --
     l_object_found_in_target := false ;
     l_min_esd := null ;
     l_max_eed := null ;
       --
       open c_ENP(r_ENP_unique.table_route_id,
                r_ENP_unique.information1,
                r_ENP_unique.information2,
                r_ENP_unique.information3 ) ;
       --
       fetch c_ENP into r_ENP ;
       --
       close c_ENP ;
       --
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_ENP_unique.dml_operation ;
       l_ENRT_CVG_END_DT_RL := get_fk('FORMULA_ID', r_ENP.INFORMATION263,l_dml_operation);
       l_ENRT_CVG_STRT_DT_RL := get_fk('FORMULA_ID', r_ENP.INFORMATION262,l_dml_operation);
       l_LER_ID := get_fk('LER_ID', r_ENP.INFORMATION257,l_dml_operation);
       l_POPL_ENRT_TYP_CYCL_ID := get_fk('POPL_ENRT_TYP_CYCL_ID', r_ENP.INFORMATION232,l_dml_operation);
       l_RT_END_DT_RL := get_fk('FORMULA_ID', r_ENP.INFORMATION264,l_dml_operation);
       l_RT_STRT_DT_RL := get_fk('FORMULA_ID', r_ENP.INFORMATION261,l_dml_operation);
       l_HRCHY_RL := get_fk('FORMULA_ID', r_ENP.INFORMATION267,l_dml_operation);
       l_WTHN_YR_PERD_ID := get_fk('WTHN_YR_PERD_ID', r_ENP.INFORMATION266,l_dml_operation);
       l_YR_PERD_ID := get_fk('YR_PERD_ID', r_ENP.INFORMATION240,l_dml_operation);



       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_POS_STRUCTURE_VERSION_ID := r_ENP.information176 ;
       else
         l_POS_STRUCTURE_VERSION_ID := r_ENP.information174 ;
       end if;


       if l_POPL_ENRT_TYP_CYCL_ID is not null then -- Do not create if parent record does not exist

       --UPD START
     --
     if l_dml_operation = 'UPDATE' then
       --
               l_update := true;
               if r_ENP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ENRT_PERD_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ENRT_PERD_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ENP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_ENP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ENP_unique.table_route_id;
                  --
                  -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ; -- NEW
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
      --DOUBT            log_data('ENP',l_new_value,l_prefix || r_ENP_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               l_ENRT_PERD_ID := r_ENP_unique.information1 ;
               l_object_version_number := r_ENP.information265 ;
               hr_utility.set_location( 'found record for update',10);
           --
     else
     --
     --UPD END
         if p_reuse_object_flag = 'Y' then
           -- cursor to find the object
           open c_find_ENP_in_target( r_ENP_unique.information2,l_max_eed,
                                 p_target_business_group_id, nvl(l_enrt_perd_id, -999)  ) ;
           fetch c_find_ENP_in_target into l_new_value ;
           if c_find_ENP_in_target%found then
             --
             if r_ENP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ENRT_PERD_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ENRT_PERD_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ENP_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ENP_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
           end if;
           close c_find_ENP_in_target ;
         --
         end if ;
         --
        end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then
           --
           l_current_pk_id := r_ENP.information1;
           --
           hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
           hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
           --
           if l_current_pk_id =  l_prev_pk_id  then
             --
             l_first_rec := false ;
             --
           else
             --
             l_first_rec := true ;
             --
           end if ;
           --

           l_parent_effective_start_date := r_ENP.information10;
           if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null ) then
             if l_parent_effective_start_date is null then
               l_parent_effective_start_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
             elsif l_parent_effective_start_date < ben_pd_copy_to_ben_one.g_copy_effective_date  then
               l_parent_effective_start_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
             end if;
           end if;
          --
          -- To avoid creating a child with out a parent
          --
          --
          if l_LER_ID is null and l_POPL_ENRT_TYP_CYCL_ID is null then
             l_first_rec := false ;
          end if;
          --
          if l_first_rec and not l_update then
             -- Call Create routine.
             hr_utility.set_location(' BEN_ENRT_PERD CREATE_ENROLLMENT_PERIOD ',20);
             BEN_ENROLLMENT_PERIOD_API.CREATE_ENROLLMENT_PERIOD(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => NVL(l_parent_effective_start_date,p_effective_date)
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ASG_UPDT_EFF_DATE      => r_ENP.INFORMATION306
             ,P_ASND_LF_EVT_DT      => r_ENP.INFORMATION316
             ,P_AUTO_DISTR_FLAG      => r_ENP.INFORMATION11
             ,P_BDGT_UPD_END_DT      => r_ENP.INFORMATION308
             ,P_BDGT_UPD_STRT_DT      => r_ENP.INFORMATION309
             ,P_CLS_ENRT_DT_TO_USE_CD      => r_ENP.INFORMATION16
             ,P_DFLT_ENRT_DT      => r_ENP.INFORMATION312
             ,P_DFLT_WS_ACC_CD      => r_ENP.INFORMATION12
             ,P_EMP_INTERVIEW_TYPE_CD      => r_ENP.INFORMATION13
             ,P_END_DT      => r_ENP.INFORMATION317
             ,P_ENP_ATTRIBUTE1      => r_ENP.INFORMATION111
             ,P_ENP_ATTRIBUTE10      => r_ENP.INFORMATION120
             ,P_ENP_ATTRIBUTE11      => r_ENP.INFORMATION121
             ,P_ENP_ATTRIBUTE12      => r_ENP.INFORMATION122
             ,P_ENP_ATTRIBUTE13      => r_ENP.INFORMATION123
             ,P_ENP_ATTRIBUTE14      => r_ENP.INFORMATION124
             ,P_ENP_ATTRIBUTE15      => r_ENP.INFORMATION125
             ,P_ENP_ATTRIBUTE16      => r_ENP.INFORMATION126
             ,P_ENP_ATTRIBUTE17      => r_ENP.INFORMATION127
             ,P_ENP_ATTRIBUTE18      => r_ENP.INFORMATION128
             ,P_ENP_ATTRIBUTE19      => r_ENP.INFORMATION129
             ,P_ENP_ATTRIBUTE2      => r_ENP.INFORMATION112
             ,P_ENP_ATTRIBUTE20      => r_ENP.INFORMATION130
             ,P_ENP_ATTRIBUTE21      => r_ENP.INFORMATION131
             ,P_ENP_ATTRIBUTE22      => r_ENP.INFORMATION132
             ,P_ENP_ATTRIBUTE23      => r_ENP.INFORMATION133
             ,P_ENP_ATTRIBUTE24      => r_ENP.INFORMATION134
             ,P_ENP_ATTRIBUTE25      => r_ENP.INFORMATION135
             ,P_ENP_ATTRIBUTE26      => r_ENP.INFORMATION136
             ,P_ENP_ATTRIBUTE27      => r_ENP.INFORMATION137
             ,P_ENP_ATTRIBUTE28      => r_ENP.INFORMATION138
             ,P_ENP_ATTRIBUTE29      => r_ENP.INFORMATION139
             ,P_ENP_ATTRIBUTE3      => r_ENP.INFORMATION113
             ,P_ENP_ATTRIBUTE30      => r_ENP.INFORMATION140
             ,P_ENP_ATTRIBUTE4      => r_ENP.INFORMATION114
             ,P_ENP_ATTRIBUTE5      => r_ENP.INFORMATION115
             ,P_ENP_ATTRIBUTE6      => r_ENP.INFORMATION116
             ,P_ENP_ATTRIBUTE7      => r_ENP.INFORMATION117
             ,P_ENP_ATTRIBUTE8      => r_ENP.INFORMATION118
             ,P_ENP_ATTRIBUTE9      => r_ENP.INFORMATION119
             ,P_ENP_ATTRIBUTE_CATEGORY      => r_ENP.INFORMATION110
	     --Added two cols reinstate_cd,reinstate_ovrdn_cd
	     ,P_REINSTATE_CD		=> r_ENP.INFORMATION26
	     ,P_REINSTATE_OVRDN_CD	=> r_ENP.INFORMATION27
	     --
             ,P_ENRT_CVG_END_DT_CD      => r_ENP.INFORMATION18
             ,P_ENRT_CVG_END_DT_RL      => l_ENRT_CVG_END_DT_RL
             ,P_ENRT_CVG_STRT_DT_CD      => r_ENP.INFORMATION17
             ,P_ENRT_CVG_STRT_DT_RL      => l_ENRT_CVG_STRT_DT_RL
             ,P_ENRT_PERD_DET_OVRLP_BCKDT_CD      => r_ENP.INFORMATION22
             ,P_ENRT_PERD_ID      => l_enrt_perd_id
             ,P_HRCHY_TO_USE_CD      => r_ENP.INFORMATION14
             ,P_LER_ID      => l_LER_ID
             ,P_PERF_REVW_STRT_DT      => r_ENP.INFORMATION307
             ,P_POPL_ENRT_TYP_CYCL_ID      => l_POPL_ENRT_TYP_CYCL_ID
             ,P_POS_STRUCTURE_VERSION_ID      => l_POS_STRUCTURE_VERSION_ID
             ,P_PROCG_END_DT      => r_ENP.INFORMATION315
             ,P_PRSVR_BDGT_CD      => r_ENP.INFORMATION15
             ,P_RT_END_DT_CD      => r_ENP.INFORMATION20
             ,P_RT_END_DT_RL      => l_RT_END_DT_RL
             ,P_RT_STRT_DT_CD      => r_ENP.INFORMATION19
             ,P_RT_STRT_DT_RL      => l_RT_STRT_DT_RL
             ,P_STRT_DT      => r_ENP.INFORMATION318
             ,P_USES_BDGT_FLAG      => r_ENP.INFORMATION21
             ,P_WS_UPD_END_DT      => r_ENP.INFORMATION319
             ,P_WS_UPD_STRT_DT      => r_ENP.INFORMATION320
             ,P_WTHN_YR_PERD_ID      => l_WTHN_YR_PERD_ID
             ,P_YR_PERD_ID      => l_YR_PERD_ID
             --cwbglobal
             -- cwb tilak
             ,p_DATA_FREEZE_DATE       => r_ENP.INFORMATION310
             ,p_SAL_CHG_REASON_CD      => r_ENP.INFORMATION23
             ,p_APPROVAL_MODE_CD       => r_ENP.INFORMATION24
             ,p_HRCHY_AME_TRN_CD       => r_ENP.INFORMATION25
             ,p_HRCHY_RL               => l_HRCHY_RL
             ,p_HRCHY_AME_APP_ID       => r_ENP.INFORMATION268
             --
             --
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
             );
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             -- Update all relevent cer records with new pk_id
             hr_utility.set_location('Before plsql table ',222);
             hr_utility.set_location('new_value id '||l_enrt_perd_id,222);
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ENRT_PERD_ID' ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_ENP.information1 ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ENRT_PERD_ID ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ENP_unique.table_route_id;
             hr_utility.set_location('After plsql table ',222);
             --
             -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
             --
             BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             --
            elsif l_update then
                 BEN_ENROLLMENT_PERIOD_API.UPDATE_ENROLLMENT_PERIOD(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => NVL(l_parent_effective_start_date,p_effective_date)
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ASG_UPDT_EFF_DATE      => r_ENP.INFORMATION306
             ,P_ASND_LF_EVT_DT      => r_ENP.INFORMATION316
             ,P_AUTO_DISTR_FLAG      => r_ENP.INFORMATION11
             ,P_BDGT_UPD_END_DT      => r_ENP.INFORMATION308
             ,P_BDGT_UPD_STRT_DT      => r_ENP.INFORMATION309
             ,P_CLS_ENRT_DT_TO_USE_CD      => r_ENP.INFORMATION16
             ,P_DFLT_ENRT_DT      => r_ENP.INFORMATION312
             ,P_DFLT_WS_ACC_CD      => r_ENP.INFORMATION12
             ,P_EMP_INTERVIEW_TYPE_CD      => r_ENP.INFORMATION13
             ,P_END_DT      => r_ENP.INFORMATION317
             ,P_ENP_ATTRIBUTE1      => r_ENP.INFORMATION111
             ,P_ENP_ATTRIBUTE10      => r_ENP.INFORMATION120
             ,P_ENP_ATTRIBUTE11      => r_ENP.INFORMATION121
             ,P_ENP_ATTRIBUTE12      => r_ENP.INFORMATION122
             ,P_ENP_ATTRIBUTE13      => r_ENP.INFORMATION123
             ,P_ENP_ATTRIBUTE14      => r_ENP.INFORMATION124
             ,P_ENP_ATTRIBUTE15      => r_ENP.INFORMATION125
             ,P_ENP_ATTRIBUTE16      => r_ENP.INFORMATION126
             ,P_ENP_ATTRIBUTE17      => r_ENP.INFORMATION127
             ,P_ENP_ATTRIBUTE18      => r_ENP.INFORMATION128
             ,P_ENP_ATTRIBUTE19      => r_ENP.INFORMATION129
             ,P_ENP_ATTRIBUTE2      => r_ENP.INFORMATION112
             ,P_ENP_ATTRIBUTE20      => r_ENP.INFORMATION130
             ,P_ENP_ATTRIBUTE21      => r_ENP.INFORMATION131
             ,P_ENP_ATTRIBUTE22      => r_ENP.INFORMATION132
             ,P_ENP_ATTRIBUTE23      => r_ENP.INFORMATION133
             ,P_ENP_ATTRIBUTE24      => r_ENP.INFORMATION134
             ,P_ENP_ATTRIBUTE25      => r_ENP.INFORMATION135
             ,P_ENP_ATTRIBUTE26      => r_ENP.INFORMATION136
             ,P_ENP_ATTRIBUTE27      => r_ENP.INFORMATION137
             ,P_ENP_ATTRIBUTE28      => r_ENP.INFORMATION138
             ,P_ENP_ATTRIBUTE29      => r_ENP.INFORMATION139
             ,P_ENP_ATTRIBUTE3      => r_ENP.INFORMATION113
             ,P_ENP_ATTRIBUTE30      => r_ENP.INFORMATION140
             ,P_ENP_ATTRIBUTE4      => r_ENP.INFORMATION114
             ,P_ENP_ATTRIBUTE5      => r_ENP.INFORMATION115
             ,P_ENP_ATTRIBUTE6      => r_ENP.INFORMATION116
             ,P_ENP_ATTRIBUTE7      => r_ENP.INFORMATION117
             ,P_ENP_ATTRIBUTE8      => r_ENP.INFORMATION118
             ,P_ENP_ATTRIBUTE9      => r_ENP.INFORMATION119
             ,P_ENP_ATTRIBUTE_CATEGORY      => r_ENP.INFORMATION110
	     -- Added two cols reinstate_cd,reinstate_ovrdn_cd
	     --
	     -- Bug No 4440058 Updated the information columns from 19
	     -- and 20 to 26 and 27
	     ,P_REINSTATE_CD		=> r_ENP.INFORMATION26
	     ,P_REINSTATE_OVRDN_CD	=> r_ENP.INFORMATION27
	     -- End Bug 4440058
             ,P_ENRT_CVG_END_DT_CD      => r_ENP.INFORMATION18
             ,P_ENRT_CVG_END_DT_RL      => l_ENRT_CVG_END_DT_RL
             ,P_ENRT_CVG_STRT_DT_CD      => r_ENP.INFORMATION17
             ,P_ENRT_CVG_STRT_DT_RL      => l_ENRT_CVG_STRT_DT_RL
             ,P_ENRT_PERD_DET_OVRLP_BCKDT_CD      => r_ENP.INFORMATION22
             ,P_ENRT_PERD_ID      => l_enrt_perd_id
             ,P_HRCHY_TO_USE_CD      => r_ENP.INFORMATION14
             ,P_LER_ID      => l_LER_ID
             ,P_PERF_REVW_STRT_DT      => r_ENP.INFORMATION307
             ,P_POPL_ENRT_TYP_CYCL_ID      => l_POPL_ENRT_TYP_CYCL_ID
             ,P_POS_STRUCTURE_VERSION_ID      => l_POS_STRUCTURE_VERSION_ID
             ,P_PROCG_END_DT      => r_ENP.INFORMATION315
             ,P_PRSVR_BDGT_CD      => r_ENP.INFORMATION15
             ,P_RT_END_DT_CD      => r_ENP.INFORMATION20
             ,P_RT_END_DT_RL      => l_RT_END_DT_RL
             ,P_RT_STRT_DT_CD      => r_ENP.INFORMATION19
             ,P_RT_STRT_DT_RL      => l_RT_STRT_DT_RL
             ,P_STRT_DT      => r_ENP.INFORMATION318
             ,P_USES_BDGT_FLAG      => r_ENP.INFORMATION21
             ,P_WS_UPD_END_DT      => r_ENP.INFORMATION319
             ,P_WS_UPD_STRT_DT      => r_ENP.INFORMATION320
             ,P_WTHN_YR_PERD_ID      => l_WTHN_YR_PERD_ID
             ,P_YR_PERD_ID      => l_YR_PERD_ID
             --cwbglobal
             -- cwb tilak
             ,p_DATA_FREEZE_DATE       => r_ENP.INFORMATION310
             ,p_SAL_CHG_REASON_CD      => r_ENP.INFORMATION23
             ,p_APPROVAL_MODE_CD       => r_ENP.INFORMATION24
             ,p_HRCHY_AME_TRN_CD       => r_ENP.INFORMATION25
             ,p_HRCHY_RL               => l_HRCHY_RL
             ,p_HRCHY_AME_APP_ID       => r_ENP.INFORMATION268
             --
             --
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
             );
           end if;
           --
           l_prev_pk_id := l_current_pk_id ;
           --
         end if;
         --
       end if;
       --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'ENP',r_enp.information5 );
     --
 end create_ENP_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_LEN_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_LEN_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ENRT_CVG_END_DT_RL  number;
   l_ENRT_CVG_STRT_DT_RL  number;
   l_ENRT_PERD_END_DT_RL  number;
   l_ENRT_PERD_STRT_DT_RL  number;
   l_LER_ID  number;
   l_POPL_ENRT_TYP_CYCL_ID  number;
   l_RT_END_DT_RL  number;
   l_RT_STRT_DT_RL  number;
   cursor c_unique_LEN(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_LEE_RSN_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_LEN_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_LEN(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_LEN_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     LEN.lee_rsn_id new_value
   from BEN_LEE_RSN_F LEN
   where
   nvl(LEN.LER_ID,-999)     = nvl(l_LER_ID,-999)  and
   nvl(LEN.POPL_ENRT_TYP_CYCL_ID,-999)     = nvl(l_POPL_ENRT_TYP_CYCL_ID,-999)  and
   LEN.business_group_id  = c_business_group_id
   and   LEN.lee_rsn_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_LEE_RSN_F LEN1
                where
                nvl(LEN1.LER_ID,-999)     = l_LER_ID  and
                nvl(LEN1.POPL_ENRT_TYP_CYCL_ID,-999)     = nvl(l_POPL_ENRT_TYP_CYCL_ID , -999) and
                LEN1.business_group_id  = c_business_group_id
                and   LEN1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_LEE_RSN_F LEN2
                where
                nvl(LEN2.LER_ID,-999)     = l_LER_ID  and
                nvl(LEN2.POPL_ENRT_TYP_CYCL_ID,-999)     = nvl(l_POPL_ENRT_TYP_CYCL_ID , -999) and
                LEN2.business_group_id  = c_business_group_id
                and   LEN2.effective_end_date >= c_effective_end_date )
                ;
*/
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_LEN                     c_LEN%rowtype;
   l_lee_rsn_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_LEN_unique in c_unique_LEN('LEN') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_LEN_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_LEN_unique.table_route_id '||r_LEN_unique.table_route_id,10);
       hr_utility.set_location(' r_LEN_unique.information1 '||r_LEN_unique.information1,10);
       hr_utility.set_location( 'r_LEN_unique.information2 '||r_LEN_unique.information2,10);
       hr_utility.set_location( 'r_LEN_unique.information3 '||r_LEN_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
         open c_LEN(r_LEN_unique.table_route_id,
                r_LEN_unique.information1,
                r_LEN_unique.information2,
                r_LEN_unique.information3 ) ;
       --
       fetch c_LEN into r_LEN ;
       --
       close c_LEN ;
       l_dml_operation:= r_LEN_unique.dml_operation ;
       l_ENRT_CVG_END_DT_RL := get_fk('FORMULA_ID', r_LEN.INFORMATION266,l_dml_operation);
       l_ENRT_CVG_STRT_DT_RL := get_fk('FORMULA_ID', r_LEN.INFORMATION267,l_dml_operation);
       l_ENRT_PERD_END_DT_RL := get_fk('FORMULA_ID', r_LEN.INFORMATION268,l_dml_operation);
       l_ENRT_PERD_STRT_DT_RL := get_fk('FORMULA_ID', r_LEN.INFORMATION259,l_dml_operation);
       l_LER_ID := get_fk('LER_ID', r_LEN.INFORMATION257,l_dml_operation);
       l_POPL_ENRT_TYP_CYCL_ID := get_fk('POPL_ENRT_TYP_CYCL_ID', r_LEN.INFORMATION232,l_dml_operation);
       l_RT_END_DT_RL := get_fk('FORMULA_ID', r_LEN.INFORMATION263,l_dml_operation);
       l_RT_STRT_DT_RL := get_fk('FORMULA_ID', r_LEN.INFORMATION264,l_dml_operation);
       l_update := false;
       l_process_date := p_effective_date;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_LEN_unique.information2 and r_LEN_unique.information3 then
               l_update := true;
               if r_LEN_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'LEE_RSN_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'LEE_RSN_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_LEN_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_LEN_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LEN_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
     --DOUBT             log_data('LEN',l_new_value,l_prefix || r_LEN_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_LEN_min_max_dates(r_LEN_unique.table_route_id, r_LEN_unique.information1 ) ;
       fetch c_LEN_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_LEN_unique.information2);
   /*    open c_LEN(r_LEN_unique.table_route_id,
                r_LEN_unique.information1,
                r_LEN_unique.information2,
                r_LEN_unique.information3 ) ;
       --
       fetch c_LEN into r_LEN ;
       --
       close c_LEN ;  */
       --

       if p_reuse_object_flag = 'Y' then
         if c_LEN_min_max_dates%found then
           -- cursor to find the object
           open c_find_LEN_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_lee_rsn_id, -999)  ) ;
           fetch c_find_LEN_in_target into l_new_value ;
           if c_find_LEN_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_LEE_RSN_F',
                  p_base_key_column => 'LEE_RSN_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_LEN_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'LEE_RSN_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'LEE_RSN_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_LEN_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LEN_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_LEN_in_target ;
         --
         end if;
       end if ;
       --
       close c_LEN_min_max_dates ;
       end if; --if p_dml_operation
                       --
                       if not l_object_found_in_target OR l_update  then
         --
         l_current_pk_id := r_LEN.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_LEN.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

        if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_LEE_RSN_F CREATE_LIFE_EVENT_ENROLL_RSN ',20);
           BEN_LIFE_EVENT_ENROLL_RSN_API.CREATE_LIFE_EVENT_ENROLL_RSN(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ADDL_PROCG_DYS_NUM      => r_LEN.INFORMATION260
             ,P_CLS_ENRT_DT_TO_USE_CD      => r_LEN.INFORMATION11
             ,P_DYS_AFTR_END_TO_DFLT_NUM      => r_LEN.INFORMATION258
             ,P_DYS_NO_ENRL_CANT_ENRL_NUM      => r_LEN.INFORMATION262
             ,P_DYS_NO_ENRL_NOT_ELIG_NUM      => r_LEN.INFORMATION261
             ,P_ENRT_CVG_END_DT_CD      => r_LEN.INFORMATION12
             ,P_ENRT_CVG_END_DT_RL      => l_ENRT_CVG_END_DT_RL
             ,P_ENRT_CVG_STRT_DT_CD      => r_LEN.INFORMATION13
             ,P_ENRT_CVG_STRT_DT_RL      => l_ENRT_CVG_STRT_DT_RL
             ,P_ENRT_PERD_DET_OVRLP_BCKDT_CD      => r_LEN.INFORMATION18
             ,P_ENRT_PERD_END_DT_CD      => r_LEN.INFORMATION15
             ,P_ENRT_PERD_END_DT_RL      => l_ENRT_PERD_END_DT_RL
             ,P_ENRT_PERD_STRT_DT_CD      => r_LEN.INFORMATION14
             ,P_ENRT_PERD_STRT_DT_RL      => l_ENRT_PERD_STRT_DT_RL
             ,P_LEE_RSN_ID      => l_lee_rsn_id
             ,P_LEN_ATTRIBUTE1      => r_LEN.INFORMATION111
             ,P_LEN_ATTRIBUTE10      => r_LEN.INFORMATION120
             ,P_LEN_ATTRIBUTE11      => r_LEN.INFORMATION121
             ,P_LEN_ATTRIBUTE12      => r_LEN.INFORMATION122
             ,P_LEN_ATTRIBUTE13      => r_LEN.INFORMATION123
             ,P_LEN_ATTRIBUTE14      => r_LEN.INFORMATION124
             ,P_LEN_ATTRIBUTE15      => r_LEN.INFORMATION125
             ,P_LEN_ATTRIBUTE16      => r_LEN.INFORMATION126
             ,P_LEN_ATTRIBUTE17      => r_LEN.INFORMATION127
             ,P_LEN_ATTRIBUTE18      => r_LEN.INFORMATION128
             ,P_LEN_ATTRIBUTE19      => r_LEN.INFORMATION129
             ,P_LEN_ATTRIBUTE2      => r_LEN.INFORMATION112
             ,P_LEN_ATTRIBUTE20      => r_LEN.INFORMATION130
             ,P_LEN_ATTRIBUTE21      => r_LEN.INFORMATION131
             ,P_LEN_ATTRIBUTE22      => r_LEN.INFORMATION132
             ,P_LEN_ATTRIBUTE23      => r_LEN.INFORMATION133
             ,P_LEN_ATTRIBUTE24      => r_LEN.INFORMATION134
             ,P_LEN_ATTRIBUTE25      => r_LEN.INFORMATION135
             ,P_LEN_ATTRIBUTE26      => r_LEN.INFORMATION136
             ,P_LEN_ATTRIBUTE27      => r_LEN.INFORMATION137
             ,P_LEN_ATTRIBUTE28      => r_LEN.INFORMATION138
             ,P_LEN_ATTRIBUTE29      => r_LEN.INFORMATION139
             ,P_LEN_ATTRIBUTE3      => r_LEN.INFORMATION113
             ,P_LEN_ATTRIBUTE30      => r_LEN.INFORMATION140
             ,P_LEN_ATTRIBUTE4      => r_LEN.INFORMATION114
             ,P_LEN_ATTRIBUTE5      => r_LEN.INFORMATION115
             ,P_LEN_ATTRIBUTE6      => r_LEN.INFORMATION116
             ,P_LEN_ATTRIBUTE7      => r_LEN.INFORMATION117
             ,P_LEN_ATTRIBUTE8      => r_LEN.INFORMATION118
             ,P_LEN_ATTRIBUTE9      => r_LEN.INFORMATION119
             ,P_LEN_ATTRIBUTE_CATEGORY      => r_LEN.INFORMATION110
	     --Added two cols reinstate_cd,reinstate_ovrdn_cd
	     ,P_REINSTATE_CD		=> r_LEN.INFORMATION19
	     ,P_REINSTATE_OVRDN_CD		=> r_LEN.INFORMATION20
	     ,P_ENRT_PERD_STRT_DAYS  => r_LEN.INFORMATION271
	     ,P_ENRT_PERD_END_DAYS   => r_LEN.INFORMATION272
	     --
             ,P_LER_ID      => l_LER_ID
             ,P_POPL_ENRT_TYP_CYCL_ID      => l_POPL_ENRT_TYP_CYCL_ID
             ,P_RT_END_DT_CD      => r_LEN.INFORMATION16
             ,P_RT_END_DT_RL      => l_RT_END_DT_RL
             ,P_RT_STRT_DT_CD      => r_LEN.INFORMATION17
             ,P_RT_STRT_DT_RL      => l_RT_STRT_DT_RL
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_lee_rsn_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'LEE_RSN_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_LEN.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_LEE_RSN_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LEN_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_LEE_RSN_F UPDATE_LIFE_EVENT_ENROLL_RSN ',30);
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_LEN.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_LEN.information3,
               p_effective_start_date  => r_LEN.information2,
               p_dml_operation         => r_LEN.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_LEE_RSN_ID   := r_LEN.information1;
             l_object_version_number := r_LEN.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           BEN_LIFE_EVENT_ENROLL_RSN_API.UPDATE_LIFE_EVENT_ENROLL_RSN(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ADDL_PROCG_DYS_NUM      => r_LEN.INFORMATION260
             ,P_CLS_ENRT_DT_TO_USE_CD      => r_LEN.INFORMATION11
             ,P_DYS_AFTR_END_TO_DFLT_NUM      => r_LEN.INFORMATION258
             ,P_DYS_NO_ENRL_CANT_ENRL_NUM      => r_LEN.INFORMATION262
             ,P_DYS_NO_ENRL_NOT_ELIG_NUM      => r_LEN.INFORMATION261
             ,P_ENRT_CVG_END_DT_CD      => r_LEN.INFORMATION12
             ,P_ENRT_CVG_END_DT_RL      => l_ENRT_CVG_END_DT_RL
             ,P_ENRT_CVG_STRT_DT_CD      => r_LEN.INFORMATION13
             ,P_ENRT_CVG_STRT_DT_RL      => l_ENRT_CVG_STRT_DT_RL
             ,P_ENRT_PERD_DET_OVRLP_BCKDT_CD      => r_LEN.INFORMATION18
             ,P_ENRT_PERD_END_DT_CD      => r_LEN.INFORMATION15
             ,P_ENRT_PERD_END_DT_RL      => l_ENRT_PERD_END_DT_RL
             ,P_ENRT_PERD_STRT_DT_CD      => r_LEN.INFORMATION14
             ,P_ENRT_PERD_STRT_DT_RL      => l_ENRT_PERD_STRT_DT_RL
             ,P_LEE_RSN_ID      => l_lee_rsn_id
             ,P_LEN_ATTRIBUTE1      => r_LEN.INFORMATION111
             ,P_LEN_ATTRIBUTE10      => r_LEN.INFORMATION120
             ,P_LEN_ATTRIBUTE11      => r_LEN.INFORMATION121
             ,P_LEN_ATTRIBUTE12      => r_LEN.INFORMATION122
             ,P_LEN_ATTRIBUTE13      => r_LEN.INFORMATION123
             ,P_LEN_ATTRIBUTE14      => r_LEN.INFORMATION124
             ,P_LEN_ATTRIBUTE15      => r_LEN.INFORMATION125
             ,P_LEN_ATTRIBUTE16      => r_LEN.INFORMATION126
             ,P_LEN_ATTRIBUTE17      => r_LEN.INFORMATION127
             ,P_LEN_ATTRIBUTE18      => r_LEN.INFORMATION128
             ,P_LEN_ATTRIBUTE19      => r_LEN.INFORMATION129
             ,P_LEN_ATTRIBUTE2      => r_LEN.INFORMATION112
             ,P_LEN_ATTRIBUTE20      => r_LEN.INFORMATION130
             ,P_LEN_ATTRIBUTE21      => r_LEN.INFORMATION131
             ,P_LEN_ATTRIBUTE22      => r_LEN.INFORMATION132
             ,P_LEN_ATTRIBUTE23      => r_LEN.INFORMATION133
             ,P_LEN_ATTRIBUTE24      => r_LEN.INFORMATION134
             ,P_LEN_ATTRIBUTE25      => r_LEN.INFORMATION135
             ,P_LEN_ATTRIBUTE26      => r_LEN.INFORMATION136
             ,P_LEN_ATTRIBUTE27      => r_LEN.INFORMATION137
             ,P_LEN_ATTRIBUTE28      => r_LEN.INFORMATION138
             ,P_LEN_ATTRIBUTE29      => r_LEN.INFORMATION139
             ,P_LEN_ATTRIBUTE3      => r_LEN.INFORMATION113
             ,P_LEN_ATTRIBUTE30      => r_LEN.INFORMATION140
             ,P_LEN_ATTRIBUTE4      => r_LEN.INFORMATION114
             ,P_LEN_ATTRIBUTE5      => r_LEN.INFORMATION115
             ,P_LEN_ATTRIBUTE6      => r_LEN.INFORMATION116
             ,P_LEN_ATTRIBUTE7      => r_LEN.INFORMATION117
             ,P_LEN_ATTRIBUTE8      => r_LEN.INFORMATION118
             ,P_LEN_ATTRIBUTE9      => r_LEN.INFORMATION119
             ,P_LEN_ATTRIBUTE_CATEGORY      => r_LEN.INFORMATION110
	     --Added two cols reinstate_cd,reinstate_ovrdn_cd
	     ,P_REINSTATE_CD		=> r_LEN.INFORMATION19
	     ,P_REINSTATE_OVRDN_CD		=> r_LEN.INFORMATION20
	     --
             ,P_LER_ID      => l_LER_ID
             ,P_POPL_ENRT_TYP_CYCL_ID      => l_POPL_ENRT_TYP_CYCL_ID
             ,P_RT_END_DT_CD      => r_LEN.INFORMATION16
             ,P_RT_END_DT_RL      => l_RT_END_DT_RL
             ,P_RT_STRT_DT_CD      => r_LEN.INFORMATION17
             ,P_RT_STRT_DT_RL      => l_RT_STRT_DT_RL
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
              ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;  -- l_update
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_LEN.information3) then
             --
             BEN_LIFE_EVENT_ENROLL_RSN_API.delete_LIFE_EVENT_ENROLL_RSN(
                --
                p_validate                       => false
                ,p_lee_rsn_id                   => l_lee_rsn_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'LEN',r_len.information5 );
     --
 end create_LEN_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_ERP_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_ERP_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ENRT_CVG_END_DT_RL  number;
   l_ENRT_CVG_STRT_DT_RL  number;
   l_ENRT_PERD_ID  number;
   l_LEE_RSN_ID  number;
   l_PL_ID  number;
   l_RT_END_DT_RL  number;
   l_RT_STRT_DT_RL  number;
   cursor c_unique_ERP(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
  ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ENRT_PERD_FOR_PL_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_ERP_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_ERP(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   -- 9999 do we need to check any other data.
   cursor c_find_ERP_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     ERP.enrt_perd_for_pl_id new_value
   from BEN_ENRT_PERD_FOR_PL_F ERP
   where
   nvl(ERP.ENRT_PERD_ID,-999)     = nvl(l_ENRT_PERD_ID,-999)  and
   nvl(ERP.LEE_RSN_ID,-999)     = nvl(l_LEE_RSN_ID,-999)  and
   nvl(ERP.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
   ERP.business_group_id  = c_business_group_id
   and   ERP.enrt_perd_for_pl_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK

   and exists ( select null
                from BEN_ENRT_PERD_FOR_PL_F ERP1
                where
                nvl(ERP1.ENRT_PERD_ID,-999)     = nvl(l_ENRT_PERD_ID, -999)  and
                nvl(ERP1.LEE_RSN_ID,-999)     = nvl(l_LEE_RSN_ID, -999)  and
                nvl(ERP1.PL_ID,-999)     = nvl(l_PL_ID, -999)  and
                ERP1.business_group_id  = c_business_group_id
                and   ERP1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ENRT_PERD_FOR_PL_F ERP2
                where
                nvl(ERP2.ENRT_PERD_ID,-999)     = nvl(l_ENRT_PERD_ID, -999)  and
                nvl(ERP2.LEE_RSN_ID,-999)     = nvl(l_LEE_RSN_ID, -999)  and
                nvl(ERP2.PL_ID,-999)     = nvl(l_PL_ID, -999)  and
                ERP2.business_group_id  = c_business_group_id
                and   ERP2.effective_end_date >= c_effective_end_date )
                ;
*/
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_ERP                     c_ERP%rowtype;
   l_enrt_perd_for_pl_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_ERP_unique in c_unique_ERP('ERP') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_ERP_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_ERP_unique.table_route_id '||r_ERP_unique.table_route_id,10);
       hr_utility.set_location(' r_ERP_unique.information1 '||r_ERP_unique.information1,10);
       hr_utility.set_location( 'r_ERP_unique.information2 '||r_ERP_unique.information2,10);
       hr_utility.set_location( 'r_ERP_unique.information3 '||r_ERP_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
           open c_ERP(r_ERP_unique.table_route_id,
                r_ERP_unique.information1,
                r_ERP_unique.information2,
                r_ERP_unique.information3 ) ;
       --
       fetch c_ERP into r_ERP ;
       --
       close c_ERP ;
       --
       l_dml_operation:= r_ERP_unique.dml_operation ;
       l_ENRT_CVG_END_DT_RL := get_fk('FORMULA_ID', r_ERP.INFORMATION262,l_dml_operation);
       l_ENRT_CVG_STRT_DT_RL := get_fk('FORMULA_ID', r_ERP.INFORMATION260,l_dml_operation);
       l_ENRT_PERD_ID := get_fk('ENRT_PERD_ID', r_ERP.INFORMATION244,l_dml_operation);
       l_LEE_RSN_ID := get_fk('LEE_RSN_ID', r_ERP.INFORMATION234,l_dml_operation);
       l_PL_ID := get_fk('PL_ID', r_ERP.INFORMATION261,l_dml_operation);
       l_RT_END_DT_RL := get_fk('FORMULA_ID', r_ERP.INFORMATION264,l_dml_operation);
       l_RT_STRT_DT_RL := get_fk('FORMULA_ID', r_ERP.INFORMATION263,l_dml_operation);
       --
       l_update := false;
       l_process_date := p_effective_date;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_ERP_unique.information2 and r_ERP_unique.information3 then
               l_update := true;
               if r_ERP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'ENRT_PERD_FOR_PL_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ENRT_PERD_FOR_PL_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ERP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_ERP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ERP_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
    --DOUBT              log_data('ERP',l_new_value,l_prefix || r_ERP_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_ERP_min_max_dates(r_ERP_unique.table_route_id, r_ERP_unique.information1 ) ;
       fetch c_ERP_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_ERP_unique.information2);
 /*      open c_ERP(r_ERP_unique.table_route_id,
                r_ERP_unique.information1,
                r_ERP_unique.information2,
                r_ERP_unique.information3 ) ;
       --
       fetch c_ERP into r_ERP ;
       --
       close c_ERP ;    */
       -- moved get_fk to top

       if p_reuse_object_flag = 'Y' then
         if c_ERP_min_max_dates%found then
           -- cursor to find the object
           open c_find_ERP_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_enrt_perd_for_pl_id, -999)  ) ;
           fetch c_find_ERP_in_target into l_new_value ;
           if c_find_ERP_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_ENRT_PERD_FOR_PL_F',
                  p_base_key_column => 'ENRT_PERD_FOR_PL_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_ERP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ENRT_PERD_FOR_PL_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ENRT_PERD_FOR_PL_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ERP_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ERP_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_ERP_in_target ;
         --
         end if;
       end if ;
       --
       close c_ERP_min_max_dates ;
       end if; --if p_dml_operation
                       --
                       if not l_object_found_in_target OR l_update  then
         --
         l_current_pk_id := r_ERP.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_ERP.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ENRT_PERD_FOR_PL_F CREATE_ENRT_PERD_FOR_PL ',20);
           BEN_ENRT_PERD_FOR_PL_API.CREATE_ENRT_PERD_FOR_PL(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ENRT_CVG_END_DT_CD      => r_ERP.INFORMATION12
             ,P_ENRT_CVG_END_DT_RL      => l_ENRT_CVG_END_DT_RL
             ,P_ENRT_CVG_STRT_DT_CD      => r_ERP.INFORMATION11
             ,P_ENRT_CVG_STRT_DT_RL      => l_ENRT_CVG_STRT_DT_RL
             ,P_ENRT_PERD_FOR_PL_ID      => l_enrt_perd_for_pl_id
             ,P_ENRT_PERD_ID      => l_ENRT_PERD_ID
             ,P_ERP_ATTRIBUTE1      => r_ERP.INFORMATION111
             ,P_ERP_ATTRIBUTE10      => r_ERP.INFORMATION120
             ,P_ERP_ATTRIBUTE11      => r_ERP.INFORMATION121
             ,P_ERP_ATTRIBUTE12      => r_ERP.INFORMATION122
             ,P_ERP_ATTRIBUTE13      => r_ERP.INFORMATION123
             ,P_ERP_ATTRIBUTE14      => r_ERP.INFORMATION124
             ,P_ERP_ATTRIBUTE15      => r_ERP.INFORMATION125
             ,P_ERP_ATTRIBUTE16      => r_ERP.INFORMATION126
             ,P_ERP_ATTRIBUTE17      => r_ERP.INFORMATION127
             ,P_ERP_ATTRIBUTE18      => r_ERP.INFORMATION128
             ,P_ERP_ATTRIBUTE19      => r_ERP.INFORMATION129
             ,P_ERP_ATTRIBUTE2      => r_ERP.INFORMATION112
             ,P_ERP_ATTRIBUTE20      => r_ERP.INFORMATION130
             ,P_ERP_ATTRIBUTE21      => r_ERP.INFORMATION131
             ,P_ERP_ATTRIBUTE22      => r_ERP.INFORMATION132
             ,P_ERP_ATTRIBUTE23      => r_ERP.INFORMATION133
             ,P_ERP_ATTRIBUTE24      => r_ERP.INFORMATION134
             ,P_ERP_ATTRIBUTE25      => r_ERP.INFORMATION135
             ,P_ERP_ATTRIBUTE26      => r_ERP.INFORMATION136
             ,P_ERP_ATTRIBUTE27      => r_ERP.INFORMATION137
             ,P_ERP_ATTRIBUTE28      => r_ERP.INFORMATION138
             ,P_ERP_ATTRIBUTE29      => r_ERP.INFORMATION139
             ,P_ERP_ATTRIBUTE3      => r_ERP.INFORMATION113
             ,P_ERP_ATTRIBUTE30      => r_ERP.INFORMATION140
             ,P_ERP_ATTRIBUTE4      => r_ERP.INFORMATION114
             ,P_ERP_ATTRIBUTE5      => r_ERP.INFORMATION115
             ,P_ERP_ATTRIBUTE6      => r_ERP.INFORMATION116
             ,P_ERP_ATTRIBUTE7      => r_ERP.INFORMATION117
             ,P_ERP_ATTRIBUTE8      => r_ERP.INFORMATION118
             ,P_ERP_ATTRIBUTE9      => r_ERP.INFORMATION119
             ,P_ERP_ATTRIBUTE_CATEGORY      => r_ERP.INFORMATION110
             ,P_LEE_RSN_ID      => l_LEE_RSN_ID
             ,P_PL_ID      => l_PL_ID
             ,P_RT_END_DT_CD      => r_ERP.INFORMATION14
             ,P_RT_END_DT_RL      => l_RT_END_DT_RL
             ,P_RT_STRT_DT_CD      => r_ERP.INFORMATION13
             ,P_RT_STRT_DT_RL      => l_RT_STRT_DT_RL
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_enrt_perd_for_pl_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ENRT_PERD_FOR_PL_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_ERP.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ENRT_PERD_FOR_PL_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ERP_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ENRT_PERD_FOR_PL_F UPDATE_ENRT_PERD_FOR_PL ',30);
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_ERP.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_ERP.information3,
               p_effective_start_date  => r_ERP.information2,
               p_dml_operation         => r_ERP.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ENRT_PERD_FOR_PL_ID   := r_ERP.information1;
             l_object_version_number := r_ERP.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           BEN_ENRT_PERD_FOR_PL_API.UPDATE_ENRT_PERD_FOR_PL(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ENRT_CVG_END_DT_CD      => r_ERP.INFORMATION12
             ,P_ENRT_CVG_END_DT_RL      => l_ENRT_CVG_END_DT_RL
             ,P_ENRT_CVG_STRT_DT_CD      => r_ERP.INFORMATION11
             ,P_ENRT_CVG_STRT_DT_RL      => l_ENRT_CVG_STRT_DT_RL
             ,P_ENRT_PERD_FOR_PL_ID      => l_enrt_perd_for_pl_id
             ,P_ENRT_PERD_ID      => l_ENRT_PERD_ID
             ,P_ERP_ATTRIBUTE1      => r_ERP.INFORMATION111
             ,P_ERP_ATTRIBUTE10      => r_ERP.INFORMATION120
             ,P_ERP_ATTRIBUTE11      => r_ERP.INFORMATION121
             ,P_ERP_ATTRIBUTE12      => r_ERP.INFORMATION122
             ,P_ERP_ATTRIBUTE13      => r_ERP.INFORMATION123
             ,P_ERP_ATTRIBUTE14      => r_ERP.INFORMATION124
             ,P_ERP_ATTRIBUTE15      => r_ERP.INFORMATION125
             ,P_ERP_ATTRIBUTE16      => r_ERP.INFORMATION126
             ,P_ERP_ATTRIBUTE17      => r_ERP.INFORMATION127
             ,P_ERP_ATTRIBUTE18      => r_ERP.INFORMATION128
             ,P_ERP_ATTRIBUTE19      => r_ERP.INFORMATION129
             ,P_ERP_ATTRIBUTE2      => r_ERP.INFORMATION112
             ,P_ERP_ATTRIBUTE20      => r_ERP.INFORMATION130
             ,P_ERP_ATTRIBUTE21      => r_ERP.INFORMATION131
             ,P_ERP_ATTRIBUTE22      => r_ERP.INFORMATION132
             ,P_ERP_ATTRIBUTE23      => r_ERP.INFORMATION133
             ,P_ERP_ATTRIBUTE24      => r_ERP.INFORMATION134
             ,P_ERP_ATTRIBUTE25      => r_ERP.INFORMATION135
             ,P_ERP_ATTRIBUTE26      => r_ERP.INFORMATION136
             ,P_ERP_ATTRIBUTE27      => r_ERP.INFORMATION137
             ,P_ERP_ATTRIBUTE28      => r_ERP.INFORMATION138
             ,P_ERP_ATTRIBUTE29      => r_ERP.INFORMATION139
             ,P_ERP_ATTRIBUTE3      => r_ERP.INFORMATION113
             ,P_ERP_ATTRIBUTE30      => r_ERP.INFORMATION140
             ,P_ERP_ATTRIBUTE4      => r_ERP.INFORMATION114
             ,P_ERP_ATTRIBUTE5      => r_ERP.INFORMATION115
             ,P_ERP_ATTRIBUTE6      => r_ERP.INFORMATION116
             ,P_ERP_ATTRIBUTE7      => r_ERP.INFORMATION117
             ,P_ERP_ATTRIBUTE8      => r_ERP.INFORMATION118
             ,P_ERP_ATTRIBUTE9      => r_ERP.INFORMATION119
             ,P_ERP_ATTRIBUTE_CATEGORY      => r_ERP.INFORMATION110
             ,P_LEE_RSN_ID      => l_LEE_RSN_ID
             ,P_PL_ID      => l_PL_ID
             ,P_RT_END_DT_CD      => r_ERP.INFORMATION14
             ,P_RT_END_DT_RL      => l_RT_END_DT_RL
             ,P_RT_STRT_DT_CD      => r_ERP.INFORMATION13
             ,P_RT_STRT_DT_RL      => l_RT_STRT_DT_RL
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;  -- l_update
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_ERP.information3) then
             --
             BEN_ENRT_PERD_FOR_PL_API.delete_ENRT_PERD_FOR_PL(
                --
                p_validate                       => false
                ,p_enrt_perd_for_pl_id                   => l_enrt_perd_for_pl_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'ERP',r_erp.information5 );
     --
 end create_ERP_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_SER_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_SER_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ENRT_PERD_ID  number;
   l_FORMULA_ID  number;
   cursor c_unique_SER(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
  ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_SCHEDD_ENRT_RL_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_SER_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_SER(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_SER_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     SER.schedd_enrt_rl_id new_value
   from BEN_SCHEDD_ENRT_RL_F SER
   where
   nvl(SER.ENRT_PERD_ID,-999)     = nvl(l_ENRT_PERD_ID,-999)  and
   nvl(SER.FORMULA_ID,-999)     = nvl(l_FORMULA_ID,-999)  and
   SER.business_group_id  = c_business_group_id
   and   SER.schedd_enrt_rl_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_SCHEDD_ENRT_RL_F SER1
                where
                nvl(SER1.ENRT_PERD_ID,-999)     = nvl(l_ENRT_PERD_ID, -999)  and
                nvl(SER1.FORMULA_ID,-999)     = nvl(l_FORMULA_ID , -999) and
                SER1.business_group_id  = c_business_group_id
                and   SER1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_SCHEDD_ENRT_RL_F SER2
                where
                nvl(SER2.ENRT_PERD_ID,-999)     = nvl(l_ENRT_PERD_ID , -999) and
                nvl(SER2.FORMULA_ID,-999)     = nvl(l_FORMULA_ID , -999) and
                SER2.business_group_id  = c_business_group_id
                and   SER2.effective_end_date >= c_effective_end_date )
                ;
*/
   --
    --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_SER                     c_SER%rowtype;
   l_schedd_enrt_rl_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_SER_unique in c_unique_SER('SER') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_SER_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_SER_unique.table_route_id '||r_SER_unique.table_route_id,10);
       hr_utility.set_location(' r_SER_unique.information1 '||r_SER_unique.information1,10);
       hr_utility.set_location( 'r_SER_unique.information2 '||r_SER_unique.information2,10);
       hr_utility.set_location( 'r_SER_unique.information3 '||r_SER_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
           open c_SER(r_SER_unique.table_route_id,
                r_SER_unique.information1,
                r_SER_unique.information2,
                r_SER_unique.information3 ) ;
       --
       fetch c_SER into r_SER ;
       --
       close c_SER ;
       l_dml_operation:= r_SER_unique.dml_operation ;
       l_ENRT_PERD_ID := get_fk('ENRT_PERD_ID', r_SER.INFORMATION244,l_dml_operation );
       l_FORMULA_ID := get_fk('FORMULA_ID', r_SER.INFORMATION251,l_dml_operation );
       l_update := false;
       l_process_date := p_effective_date;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_SER_unique.information2 and r_SER_unique.information3 then
               l_update := true;
               if r_SER_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'SCHEDD_ENRT_RL_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'SCHEDD_ENRT_RL_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_SER_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_SER_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_SER_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
  --DOUBT                log_data('SER',l_new_value,l_prefix || r_SER_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_SER_min_max_dates(r_SER_unique.table_route_id, r_SER_unique.information1 ) ;
       fetch c_SER_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_SER_unique.information2);
  /*     open c_SER(r_SER_unique.table_route_id,
                r_SER_unique.information1,
                r_SER_unique.information2,
                r_SER_unique.information3 ) ;
       --
       fetch c_SER into r_SER ;
       --
       close c_SER ;   */
       --
       if p_reuse_object_flag = 'Y' then
         if c_SER_min_max_dates%found then
           -- cursor to find the object
           open c_find_SER_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_schedd_enrt_rl_id, -999)  ) ;
           fetch c_find_SER_in_target into l_new_value ;
           if c_find_SER_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_SCHEDD_ENRT_RL_F',
                  p_base_key_column => 'SCHEDD_ENRT_RL_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_SER_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'SCHEDD_ENRT_RL_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'SCHEDD_ENRT_RL_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_SER_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_SER_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_SER_in_target ;
         --
         end if;
       end if ;
       --
       close c_SER_min_max_dates ;
      end if; --if p_dml_operation
                       --
                       if not l_object_found_in_target OR l_update  then
         --
         l_current_pk_id := r_SER.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_SER.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

        if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_SCHEDD_ENRT_RL_F CREATE_SCHEDD_ENROLLMENT_RL ',20);
           BEN_SCHEDD_ENROLLMENT_RL_API.CREATE_SCHEDD_ENROLLMENT_RL(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
           ,P_ENRT_PERD_ID      => l_ENRT_PERD_ID
                        ,P_FORMULA_ID      => l_FORMULA_ID
                        ,P_ORDR_TO_APLY_NUM      => r_SER.INFORMATION260
                        ,P_SCHEDD_ENRT_RL_ID      => l_schedd_enrt_rl_id
                        ,P_SER_ATTRIBUTE1      => r_SER.INFORMATION111
                        ,P_SER_ATTRIBUTE10      => r_SER.INFORMATION120
                        ,P_SER_ATTRIBUTE11      => r_SER.INFORMATION121
                        ,P_SER_ATTRIBUTE12      => r_SER.INFORMATION122
                        ,P_SER_ATTRIBUTE13      => r_SER.INFORMATION123
                        ,P_SER_ATTRIBUTE14      => r_SER.INFORMATION124
                        ,P_SER_ATTRIBUTE15      => r_SER.INFORMATION125
                        ,P_SER_ATTRIBUTE16      => r_SER.INFORMATION126
                        ,P_SER_ATTRIBUTE17      => r_SER.INFORMATION127
                        ,P_SER_ATTRIBUTE18      => r_SER.INFORMATION128
                        ,P_SER_ATTRIBUTE19      => r_SER.INFORMATION129
                        ,P_SER_ATTRIBUTE2      => r_SER.INFORMATION112
                        ,P_SER_ATTRIBUTE20      => r_SER.INFORMATION130
                        ,P_SER_ATTRIBUTE21      => r_SER.INFORMATION131
                        ,P_SER_ATTRIBUTE22      => r_SER.INFORMATION132
                        ,P_SER_ATTRIBUTE23      => r_SER.INFORMATION133
                        ,P_SER_ATTRIBUTE24      => r_SER.INFORMATION134
                        ,P_SER_ATTRIBUTE25      => r_SER.INFORMATION135
                        ,P_SER_ATTRIBUTE26      => r_SER.INFORMATION136
                        ,P_SER_ATTRIBUTE27      => r_SER.INFORMATION137
                        ,P_SER_ATTRIBUTE28      => r_SER.INFORMATION138
                        ,P_SER_ATTRIBUTE29      => r_SER.INFORMATION139
                        ,P_SER_ATTRIBUTE3      => r_SER.INFORMATION113
                        ,P_SER_ATTRIBUTE30      => r_SER.INFORMATION140
                        ,P_SER_ATTRIBUTE4      => r_SER.INFORMATION114
                        ,P_SER_ATTRIBUTE5      => r_SER.INFORMATION115
                        ,P_SER_ATTRIBUTE6      => r_SER.INFORMATION116
                        ,P_SER_ATTRIBUTE7      => r_SER.INFORMATION117
                        ,P_SER_ATTRIBUTE8      => r_SER.INFORMATION118
                        ,P_SER_ATTRIBUTE9      => r_SER.INFORMATION119
             ,P_SER_ATTRIBUTE_CATEGORY      => r_SER.INFORMATION110
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_schedd_enrt_rl_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'SCHEDD_ENRT_RL_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_SER.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_SCHEDD_ENRT_RL_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_SER_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_SCHEDD_ENRT_RL_F UPDATE_SCHEDD_ENROLLMENT_RL ',30);
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_SER.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_SER.information3,
               p_effective_start_date  => r_SER.information2,
               p_dml_operation         => r_SER.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_SCHEDD_ENRT_RL_ID   := r_SER.information1;
             l_object_version_number := r_SER.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           BEN_SCHEDD_ENROLLMENT_RL_API.UPDATE_SCHEDD_ENROLLMENT_RL(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ENRT_PERD_ID      => l_ENRT_PERD_ID
                         ,P_FORMULA_ID      => l_FORMULA_ID
                         ,P_ORDR_TO_APLY_NUM      => r_SER.INFORMATION260
                         ,P_SCHEDD_ENRT_RL_ID      => l_schedd_enrt_rl_id
                         ,P_SER_ATTRIBUTE1      => r_SER.INFORMATION111
                         ,P_SER_ATTRIBUTE10      => r_SER.INFORMATION120
                         ,P_SER_ATTRIBUTE11      => r_SER.INFORMATION121
                         ,P_SER_ATTRIBUTE12      => r_SER.INFORMATION122
                         ,P_SER_ATTRIBUTE13      => r_SER.INFORMATION123
                         ,P_SER_ATTRIBUTE14      => r_SER.INFORMATION124
                         ,P_SER_ATTRIBUTE15      => r_SER.INFORMATION125
                         ,P_SER_ATTRIBUTE16      => r_SER.INFORMATION126
                         ,P_SER_ATTRIBUTE17      => r_SER.INFORMATION127
                         ,P_SER_ATTRIBUTE18      => r_SER.INFORMATION128
                         ,P_SER_ATTRIBUTE19      => r_SER.INFORMATION129
                         ,P_SER_ATTRIBUTE2      => r_SER.INFORMATION112
                         ,P_SER_ATTRIBUTE20      => r_SER.INFORMATION130
                         ,P_SER_ATTRIBUTE21      => r_SER.INFORMATION131
                         ,P_SER_ATTRIBUTE22      => r_SER.INFORMATION132
                         ,P_SER_ATTRIBUTE23      => r_SER.INFORMATION133
                         ,P_SER_ATTRIBUTE24      => r_SER.INFORMATION134
                         ,P_SER_ATTRIBUTE25      => r_SER.INFORMATION135
                         ,P_SER_ATTRIBUTE26      => r_SER.INFORMATION136
                         ,P_SER_ATTRIBUTE27      => r_SER.INFORMATION137
                         ,P_SER_ATTRIBUTE28      => r_SER.INFORMATION138
                         ,P_SER_ATTRIBUTE29      => r_SER.INFORMATION139
                         ,P_SER_ATTRIBUTE3      => r_SER.INFORMATION113
                         ,P_SER_ATTRIBUTE30      => r_SER.INFORMATION140
                         ,P_SER_ATTRIBUTE4      => r_SER.INFORMATION114
                         ,P_SER_ATTRIBUTE5      => r_SER.INFORMATION115
                         ,P_SER_ATTRIBUTE6      => r_SER.INFORMATION116
                         ,P_SER_ATTRIBUTE7      => r_SER.INFORMATION117
                         ,P_SER_ATTRIBUTE8      => r_SER.INFORMATION118
                         ,P_SER_ATTRIBUTE9      => r_SER.INFORMATION119
             ,P_SER_ATTRIBUTE_CATEGORY      => r_SER.INFORMATION110
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;  -- l_update
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_SER.information3) then
             --
             BEN_SCHEDD_ENROLLMENT_RL_API.delete_SCHEDD_ENROLLMENT_RL(
                --
                p_validate                       => false
                ,p_schedd_enrt_rl_id                   => l_schedd_enrt_rl_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'SER',r_ser.information5 );
     --
 end create_SER_rows;
   --
   ---------------------------------------------------------------
   ----------------------< create_LRR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_LRR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_FORMULA_ID  number;
   l_LEE_RSN_ID  number;
   cursor c_unique_LRR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_LEE_RSN_RL_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_LRR_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_LRR(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_LRR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     LRR.lee_rsn_rl_id new_value
   from BEN_LEE_RSN_RL_F LRR
   where
   nvl(LRR.FORMULA_ID,-999)     = nvl(l_FORMULA_ID,-999)  and
   nvl(LRR.LEE_RSN_ID,-999)     = nvl(l_LEE_RSN_ID,-999)  and
   LRR.business_group_id  = c_business_group_id
   and   LRR.lee_rsn_rl_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_LEE_RSN_RL_F LRR1
                where
                nvl(LRR1.FORMULA_ID,-999)     = nvl(l_FORMULA_ID,-999)  and
                nvl(LRR1.LEE_RSN_ID,-999)     = nvl(l_LEE_RSN_ID,-999)  and
                LRR1.business_group_id  = c_business_group_id
                and   LRR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_LEE_RSN_RL_F LRR2
                where
                nvl(LRR2.FORMULA_ID,-999)     = nvl(l_FORMULA_ID,-999)  and
                nvl(LRR2.LEE_RSN_ID,-999)     = nvl(l_LEE_RSN_ID,-999)  and
                LRR2.business_group_id  = c_business_group_id
                and   LRR2.effective_end_date >= c_effective_end_date )
                ;
*/
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_LRR                     c_LRR%rowtype;
   l_lee_rsn_rl_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_LRR_unique in c_unique_LRR('LRR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_LRR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
          ) then
       --
       hr_utility.set_location(' r_LRR_unique.table_route_id '||r_LRR_unique.table_route_id,10);
       hr_utility.set_location(' r_LRR_unique.information1 '||r_LRR_unique.information1,10);
       hr_utility.set_location( 'r_LRR_unique.information2 '||r_LRR_unique.information2,10);
       hr_utility.set_location( 'r_LRR_unique.information3 '||r_LRR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
    open c_LRR(r_LRR_unique.table_route_id,
                r_LRR_unique.information1,
                r_LRR_unique.information2,
                r_LRR_unique.information3 ) ;
       --
       fetch c_LRR into r_LRR ;
       --
       close c_LRR ;
       l_dml_operation:= r_LRR_unique.dml_operation ;
       l_FORMULA_ID := get_fk('FORMULA_ID', r_LRR.information251,l_dml_operation );
       l_LEE_RSN_ID := get_fk('LEE_RSN_ID', r_LRR.information234,l_dml_operation );
       l_update := false;
       l_process_date := p_effective_date;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_LRR_unique.information2 and r_LRR_unique.information3 then
               l_update := true;
               if r_LRR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'LEE_RSN_RL_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'LEE_RSN_RL_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_LRR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_LRR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LRR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
   --DOUBT               log_data('LRR',l_new_value,l_prefix || r_LRR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_LRR_min_max_dates(r_LRR_unique.table_route_id, r_LRR_unique.information1 ) ;
       fetch c_LRR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
        l_min_esd := greatest(l_min_esd,r_LRR_unique.information2);
  /*     open c_LRR(r_LRR_unique.table_route_id,
                r_LRR_unique.information1,
                r_LRR_unique.information2,
                r_LRR_unique.information3 ) ;
       --
       fetch c_LRR into r_LRR ;
       --
       close c_LRR ;  */
       --
       if p_reuse_object_flag = 'Y' then
         if c_LRR_min_max_dates%found then
           -- cursor to find the object
           open c_find_LRR_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_lee_rsn_rl_id, -999)  ) ;
           fetch c_find_LRR_in_target into l_new_value ;
           if c_find_LRR_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_LEE_RSN_RL_F',
                  p_base_key_column => 'LEE_RSN_RL_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_LRR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'LEE_RSN_RL_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'LEE_RSN_RL_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_LRR_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LRR_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_LRR_in_target ;
         --
         end if;
       end if ;
       --
       close c_LRR_min_max_dates ;
       end if; --if p_dml_operation
                       --
                       if not l_object_found_in_target OR l_update  then
         --
         l_current_pk_id := r_LRR.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_LRR.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_LEE_RSN_RL_F CREATE_LEE_RSN_RL ',20);
           BEN_LEE_RSN_RL_API.CREATE_LEE_RSN_RL(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_FORMULA_ID      => l_FORMULA_ID
             ,P_LEE_RSN_ID      => l_LEE_RSN_ID
             ,P_LEE_RSN_RL_ID      => l_lee_rsn_rl_id
             ,P_LRR_ATTRIBUTE1      => r_LRR.INFORMATION111
             ,P_LRR_ATTRIBUTE10      => r_LRR.INFORMATION120
             ,P_LRR_ATTRIBUTE11      => r_LRR.INFORMATION121
             ,P_LRR_ATTRIBUTE12      => r_LRR.INFORMATION122
             ,P_LRR_ATTRIBUTE13      => r_LRR.INFORMATION123
             ,P_LRR_ATTRIBUTE14      => r_LRR.INFORMATION124
             ,P_LRR_ATTRIBUTE15      => r_LRR.INFORMATION125
             ,P_LRR_ATTRIBUTE16      => r_LRR.INFORMATION126
             ,P_LRR_ATTRIBUTE17      => r_LRR.INFORMATION127
             ,P_LRR_ATTRIBUTE18      => r_LRR.INFORMATION128
             ,P_LRR_ATTRIBUTE19      => r_LRR.INFORMATION129
             ,P_LRR_ATTRIBUTE2      => r_LRR.INFORMATION112
             ,P_LRR_ATTRIBUTE20      => r_LRR.INFORMATION130
             ,P_LRR_ATTRIBUTE21      => r_LRR.INFORMATION131
             ,P_LRR_ATTRIBUTE22      => r_LRR.INFORMATION132
             ,P_LRR_ATTRIBUTE23      => r_LRR.INFORMATION133
             ,P_LRR_ATTRIBUTE24      => r_LRR.INFORMATION134
             ,P_LRR_ATTRIBUTE25      => r_LRR.INFORMATION135
             ,P_LRR_ATTRIBUTE26      => r_LRR.INFORMATION136
             ,P_LRR_ATTRIBUTE27      => r_LRR.INFORMATION137
             ,P_LRR_ATTRIBUTE28      => r_LRR.INFORMATION138
             ,P_LRR_ATTRIBUTE29      => r_LRR.INFORMATION139
             ,P_LRR_ATTRIBUTE3      => r_LRR.INFORMATION113
             ,P_LRR_ATTRIBUTE30      => r_LRR.INFORMATION140
             ,P_LRR_ATTRIBUTE4      => r_LRR.INFORMATION114
             ,P_LRR_ATTRIBUTE5      => r_LRR.INFORMATION115
             ,P_LRR_ATTRIBUTE6      => r_LRR.INFORMATION116
             ,P_LRR_ATTRIBUTE7      => r_LRR.INFORMATION117
             ,P_LRR_ATTRIBUTE8      => r_LRR.INFORMATION118
             ,P_LRR_ATTRIBUTE9      => r_LRR.INFORMATION119
             ,P_LRR_ATTRIBUTE_CATEGORY      => r_LRR.INFORMATION110
             ,P_ORDR_TO_APLY_NUM      => r_LRR.INFORMATION260
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_lee_rsn_rl_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'LEE_RSN_RL_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_LRR.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_LEE_RSN_RL_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LRR_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_LEE_RSN_RL_F UPDATE_LEE_RSN_RL ',30);
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_LRR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_LRR.information3,
               p_effective_start_date  => r_LRR.information2,
               p_dml_operation         => r_LRR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_LEE_RSN_RL_ID   := r_LRR.information1;
             l_object_version_number := r_LRR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           BEN_LEE_RSN_RL_API.UPDATE_LEE_RSN_RL(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_FORMULA_ID      => l_FORMULA_ID
             ,P_LEE_RSN_ID      => l_LEE_RSN_ID
             ,P_LEE_RSN_RL_ID      => l_lee_rsn_rl_id
             ,P_LRR_ATTRIBUTE1      => r_LRR.INFORMATION111
             ,P_LRR_ATTRIBUTE10      => r_LRR.INFORMATION120
             ,P_LRR_ATTRIBUTE11      => r_LRR.INFORMATION121
             ,P_LRR_ATTRIBUTE12      => r_LRR.INFORMATION122
             ,P_LRR_ATTRIBUTE13      => r_LRR.INFORMATION123
             ,P_LRR_ATTRIBUTE14      => r_LRR.INFORMATION124
             ,P_LRR_ATTRIBUTE15      => r_LRR.INFORMATION125
             ,P_LRR_ATTRIBUTE16      => r_LRR.INFORMATION126
             ,P_LRR_ATTRIBUTE17      => r_LRR.INFORMATION127
             ,P_LRR_ATTRIBUTE18      => r_LRR.INFORMATION128
             ,P_LRR_ATTRIBUTE19      => r_LRR.INFORMATION129
             ,P_LRR_ATTRIBUTE2      => r_LRR.INFORMATION112
             ,P_LRR_ATTRIBUTE20      => r_LRR.INFORMATION130
             ,P_LRR_ATTRIBUTE21      => r_LRR.INFORMATION131
             ,P_LRR_ATTRIBUTE22      => r_LRR.INFORMATION132
             ,P_LRR_ATTRIBUTE23      => r_LRR.INFORMATION133
             ,P_LRR_ATTRIBUTE24      => r_LRR.INFORMATION134
             ,P_LRR_ATTRIBUTE25      => r_LRR.INFORMATION135
             ,P_LRR_ATTRIBUTE26      => r_LRR.INFORMATION136
             ,P_LRR_ATTRIBUTE27      => r_LRR.INFORMATION137
             ,P_LRR_ATTRIBUTE28      => r_LRR.INFORMATION138
             ,P_LRR_ATTRIBUTE29      => r_LRR.INFORMATION139
             ,P_LRR_ATTRIBUTE3      => r_LRR.INFORMATION113
             ,P_LRR_ATTRIBUTE30      => r_LRR.INFORMATION140
             ,P_LRR_ATTRIBUTE4      => r_LRR.INFORMATION114
             ,P_LRR_ATTRIBUTE5      => r_LRR.INFORMATION115
             ,P_LRR_ATTRIBUTE6      => r_LRR.INFORMATION116
             ,P_LRR_ATTRIBUTE7      => r_LRR.INFORMATION117
             ,P_LRR_ATTRIBUTE8      => r_LRR.INFORMATION118
             ,P_LRR_ATTRIBUTE9      => r_LRR.INFORMATION119
             ,P_LRR_ATTRIBUTE_CATEGORY      => r_LRR.INFORMATION110
             ,P_ORDR_TO_APLY_NUM      => r_LRR.INFORMATION260
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;  -- l_update
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) = r_LRR.information3) then
             --
             BEN_LEE_RSN_RL_API.delete_LEE_RSN_RL(
                --
                p_validate                       => false
                ,p_lee_rsn_rl_id                   => l_lee_rsn_rl_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'LRR',r_lrr.information5 );
     --
 end create_LRR_rows;

   ---------------------------------------------------------------
   ----------------------< create_ADE_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_ADE_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_APLD_DPNT_CVG_ELIG_RL  number;
   l_DPNT_CVG_ELIGY_PRFL_ID  number;
   l_PGM_ID  number;
   l_PL_ID  number;
   l_PTIP_ID  number;
   cursor c_unique_ADE(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_APLD_DPNT_CVG_ELIG_PRFL_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_ADE_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_ADE(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_ADE_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     ADE.apld_dpnt_cvg_elig_prfl_id new_value
   from BEN_APLD_DPNT_CVG_ELIG_PRFL_F ADE
   where
   ADE.DPNT_CVG_ELIGY_PRFL_ID     = l_DPNT_CVG_ELIGY_PRFL_ID  and
   nvl(ADE.PGM_ID,-999)     = nvl(l_PGM_ID,-999)  and
   nvl(ADE.PL_ID,-999)      = nvl(l_PL_ID,-999)  and
   nvl(ADE.PTIP_ID,-999)    = nvl(l_PTIP_ID,-999)  and
   ADE.business_group_id  = c_business_group_id
   and   ADE.apld_dpnt_cvg_elig_prfl_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_APLD_DPNT_CVG_ELIG_PRFL_F ADE1
                where
                ADE1.DPNT_CVG_ELIGY_PRFL_ID     = l_DPNT_CVG_ELIGY_PRFL_ID  and
                nvl(ADE1.PGM_ID,-999)           = nvl(l_PGM_ID,-999)  and
                nvl(ADE1.PL_ID,-999)            = nvl(l_PL_ID,-999)  and
                nvl(ADE1.PTIP_ID,-999)          = nvl(l_PTIP_ID,-999)  and
                ADE1.business_group_id  = c_business_group_id
                and   ADE1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_APLD_DPNT_CVG_ELIG_PRFL_F ADE2
                where
                ADE2.DPNT_CVG_ELIGY_PRFL_ID     = l_DPNT_CVG_ELIGY_PRFL_ID  and
                nvl(ADE2.PGM_ID,-999)     = nvl(l_PGM_ID,-999)  and
                nvl(ADE2.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
                nvl(ADE2.PTIP_ID,-999)     = nvl(l_PTIP_ID,-999)  and
                ADE2.business_group_id  = c_business_group_id
                and   ADE2.effective_end_date >= c_effective_end_date )
                ;
*/
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_ADE                     c_ADE%rowtype;
   l_apld_dpnt_cvg_elig_prfl_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_ADE_unique in c_unique_ADE('ADE') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_ADE_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_ADE_unique.table_route_id '||r_ADE_unique.table_route_id,10);
       hr_utility.set_location(' r_ADE_unique.information1 '||r_ADE_unique.information1,10);
       hr_utility.set_location( 'r_ADE_unique.information2 '||r_ADE_unique.information2,10);
       hr_utility.set_location( 'r_ADE_unique.information3 '||r_ADE_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
            open c_ADE(r_ADE_unique.table_route_id,
                r_ADE_unique.information1,
                r_ADE_unique.information2,
                r_ADE_unique.information3 ) ;
       --
       fetch c_ADE into r_ADE ;
       --
       close c_ADE ;
       l_dml_operation:= r_ADE_unique.dml_operation ;
       l_APLD_DPNT_CVG_ELIG_RL := get_fk('FORMULA_ID', r_ADE.information263,l_dml_operation );
       l_DPNT_CVG_ELIGY_PRFL_ID := get_fk('DPNT_CVG_ELIGY_PRFL_ID', r_ADE.information255,l_dml_operation );
       l_PGM_ID := get_fk('PGM_ID', r_ADE.information260,l_dml_operation );
       l_PL_ID := get_fk('PL_ID', r_ADE.information261,l_dml_operation );
       l_PTIP_ID := get_fk('PTIP_ID', r_ADE.information259,l_dml_operation );
       l_update := false;
       l_process_date := p_effective_date;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_ADE_unique.information2 and r_ADE_unique.information3 then
               l_update := true;
               if r_ADE_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'APLD_DPNT_CVG_ELIG_PRFL_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'APLD_DPNT_CVG_ELIG_PRFL_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ADE_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_ADE_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ADE_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
   --DOUBT               log_data('ADE',l_new_value,l_prefix || r_ADE_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_ADE_min_max_dates(r_ADE_unique.table_route_id, r_ADE_unique.information1 ) ;
       fetch c_ADE_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_ADE_unique.information2);
/*       open c_ADE(r_ADE_unique.table_route_id,
                r_ADE_unique.information1,
                r_ADE_unique.information2,
                r_ADE_unique.information3 ) ;
       --
       fetch c_ADE into r_ADE ;
       --
       close c_ADE ;   */
       --
       if p_reuse_object_flag = 'Y' then
         if c_ADE_min_max_dates%found then
           -- cursor to find the object
           open c_find_ADE_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_apld_dpnt_cvg_elig_prfl_id, -999)  ) ;
           fetch c_find_ADE_in_target into l_new_value ;
           if c_find_ADE_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_APLD_DPNT_CVG_ELIG_PRFL_F',
                  p_base_key_column => 'APLD_DPNT_CVG_ELIG_PRFL_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_ADE_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'APLD_DPNT_CVG_ELIG_PRFL_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'APLD_DPNT_CVG_ELIG_PRFL_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ADE_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ADE_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_ADE_in_target ;
         --
         end if;
       end if ;
       --
       close c_ADE_min_max_dates ;
       end if; --if p_dml_operation
                       --
                       if not l_object_found_in_target OR l_update  then
         --
         l_current_pk_id := r_ADE.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_ADE.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

        if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_APLD_DPNT_CVG_ELIG_PRFL_F CREATE_APLD_DPNT_CVG_PRFL ',20);
           BEN_APLD_DPNT_CVG_PRFL_API.CREATE_APLD_DPNT_CVG_PRFL(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ADE_ATTRIBUTE1      => r_ADE.INFORMATION111
             ,P_ADE_ATTRIBUTE10      => r_ADE.INFORMATION120
             ,P_ADE_ATTRIBUTE11      => r_ADE.INFORMATION121
             ,P_ADE_ATTRIBUTE12      => r_ADE.INFORMATION122
             ,P_ADE_ATTRIBUTE13      => r_ADE.INFORMATION123
             ,P_ADE_ATTRIBUTE14      => r_ADE.INFORMATION124
             ,P_ADE_ATTRIBUTE15      => r_ADE.INFORMATION125
             ,P_ADE_ATTRIBUTE16      => r_ADE.INFORMATION126
             ,P_ADE_ATTRIBUTE17      => r_ADE.INFORMATION127
             ,P_ADE_ATTRIBUTE18      => r_ADE.INFORMATION128
             ,P_ADE_ATTRIBUTE19      => r_ADE.INFORMATION129
             ,P_ADE_ATTRIBUTE2      => r_ADE.INFORMATION112
             ,P_ADE_ATTRIBUTE20      => r_ADE.INFORMATION130
             ,P_ADE_ATTRIBUTE21      => r_ADE.INFORMATION131
             ,P_ADE_ATTRIBUTE22      => r_ADE.INFORMATION132
             ,P_ADE_ATTRIBUTE23      => r_ADE.INFORMATION133
             ,P_ADE_ATTRIBUTE24      => r_ADE.INFORMATION134
             ,P_ADE_ATTRIBUTE25      => r_ADE.INFORMATION135
             ,P_ADE_ATTRIBUTE26      => r_ADE.INFORMATION136
             ,P_ADE_ATTRIBUTE27      => r_ADE.INFORMATION137
             ,P_ADE_ATTRIBUTE28      => r_ADE.INFORMATION138
             ,P_ADE_ATTRIBUTE29      => r_ADE.INFORMATION139
             ,P_ADE_ATTRIBUTE3      => r_ADE.INFORMATION113
             ,P_ADE_ATTRIBUTE30      => r_ADE.INFORMATION140
             ,P_ADE_ATTRIBUTE4      => r_ADE.INFORMATION114
             ,P_ADE_ATTRIBUTE5      => r_ADE.INFORMATION115
             ,P_ADE_ATTRIBUTE6      => r_ADE.INFORMATION116
             ,P_ADE_ATTRIBUTE7      => r_ADE.INFORMATION117
             ,P_ADE_ATTRIBUTE8      => r_ADE.INFORMATION118
             ,P_ADE_ATTRIBUTE9      => r_ADE.INFORMATION119
             ,P_ADE_ATTRIBUTE_CATEGORY      => r_ADE.INFORMATION110
             ,P_APLD_DPNT_CVG_ELIG_PRFL_ID      => l_apld_dpnt_cvg_elig_prfl_id
             ,P_APLD_DPNT_CVG_ELIG_RL      => l_APLD_DPNT_CVG_ELIG_RL
             ,P_DPNT_CVG_ELIGY_PRFL_ID      => l_DPNT_CVG_ELIGY_PRFL_ID
             ,P_MNDTRY_FLAG      => r_ADE.INFORMATION11
             ,P_PGM_ID      => l_PGM_ID
             ,P_PL_ID      => l_PL_ID
             ,P_PTIP_ID      => l_PTIP_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_apld_dpnt_cvg_elig_prfl_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'APLD_DPNT_CVG_ELIG_PRFL_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_ADE.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_APLD_DPNT_CVG_ELIG_PRFL_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ADE_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_APLD_DPNT_CVG_ELIG_PRFL_F UPDATE_APLD_DPNT_CVG_PRFL ',30);
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_ADE.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_ADE.information3,
               p_effective_start_date  => r_ADE.information2,
               p_dml_operation         => r_ADE.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_APLD_DPNT_CVG_ELIG_PRFL_ID   := r_ADE.information1;
             l_object_version_number := r_ADE.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           BEN_APLD_DPNT_CVG_PRFL_API.UPDATE_APLD_DPNT_CVG_PRFL(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ADE_ATTRIBUTE1      => r_ADE.INFORMATION111
             ,P_ADE_ATTRIBUTE10      => r_ADE.INFORMATION120
             ,P_ADE_ATTRIBUTE11      => r_ADE.INFORMATION121
             ,P_ADE_ATTRIBUTE12      => r_ADE.INFORMATION122
             ,P_ADE_ATTRIBUTE13      => r_ADE.INFORMATION123
             ,P_ADE_ATTRIBUTE14      => r_ADE.INFORMATION124
             ,P_ADE_ATTRIBUTE15      => r_ADE.INFORMATION125
             ,P_ADE_ATTRIBUTE16      => r_ADE.INFORMATION126
             ,P_ADE_ATTRIBUTE17      => r_ADE.INFORMATION127
             ,P_ADE_ATTRIBUTE18      => r_ADE.INFORMATION128
             ,P_ADE_ATTRIBUTE19      => r_ADE.INFORMATION129
             ,P_ADE_ATTRIBUTE2      => r_ADE.INFORMATION112
             ,P_ADE_ATTRIBUTE20      => r_ADE.INFORMATION130
             ,P_ADE_ATTRIBUTE21      => r_ADE.INFORMATION131
             ,P_ADE_ATTRIBUTE22      => r_ADE.INFORMATION132
             ,P_ADE_ATTRIBUTE23      => r_ADE.INFORMATION133
             ,P_ADE_ATTRIBUTE24      => r_ADE.INFORMATION134
             ,P_ADE_ATTRIBUTE25      => r_ADE.INFORMATION135
             ,P_ADE_ATTRIBUTE26      => r_ADE.INFORMATION136
             ,P_ADE_ATTRIBUTE27      => r_ADE.INFORMATION137
             ,P_ADE_ATTRIBUTE28      => r_ADE.INFORMATION138
             ,P_ADE_ATTRIBUTE29      => r_ADE.INFORMATION139
             ,P_ADE_ATTRIBUTE3      => r_ADE.INFORMATION113
             ,P_ADE_ATTRIBUTE30      => r_ADE.INFORMATION140
             ,P_ADE_ATTRIBUTE4      => r_ADE.INFORMATION114
             ,P_ADE_ATTRIBUTE5      => r_ADE.INFORMATION115
             ,P_ADE_ATTRIBUTE6      => r_ADE.INFORMATION116
             ,P_ADE_ATTRIBUTE7      => r_ADE.INFORMATION117
             ,P_ADE_ATTRIBUTE8      => r_ADE.INFORMATION118
             ,P_ADE_ATTRIBUTE9      => r_ADE.INFORMATION119
             ,P_ADE_ATTRIBUTE_CATEGORY      => r_ADE.INFORMATION110
             ,P_APLD_DPNT_CVG_ELIG_PRFL_ID      => l_apld_dpnt_cvg_elig_prfl_id
             ,P_APLD_DPNT_CVG_ELIG_RL      => l_APLD_DPNT_CVG_ELIG_RL
             ,P_DPNT_CVG_ELIGY_PRFL_ID      => l_DPNT_CVG_ELIGY_PRFL_ID
             ,P_MNDTRY_FLAG      => r_ADE.INFORMATION11
             ,P_PGM_ID      => l_PGM_ID
             ,P_PL_ID      => l_PL_ID
             ,P_PTIP_ID      => l_PTIP_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
            ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;  -- l_update
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_ADE.information3) then
             --
             BEN_APLD_DPNT_CVG_PRFL_API.delete_APLD_DPNT_CVG_PRFL(
                --
                p_validate                       => false
                ,p_apld_dpnt_cvg_elig_prfl_id                   => l_apld_dpnt_cvg_elig_prfl_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'ADE',r_ade.information5 );
     --
 end create_ADE_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_PGC_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_PGC_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_CTFN_RQD_WHEN_RL  number;
   l_PGM_ID  number;
   l_DPNT_CVG_CTFN_TYP_CD  varchar2(30);
   cursor c_unique_PGC(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_PGM_DPNT_CVG_CTFN_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_PGC_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_PGC(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_PGC_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     PGC.pgm_dpnt_cvg_ctfn_id new_value
   from BEN_PGM_DPNT_CVG_CTFN_F PGC
   where
   PGC.PGM_ID               = l_PGM_ID  and
   PGC.DPNT_CVG_CTFN_TYP_CD = l_DPNT_CVG_CTFN_TYP_CD and
   PGC.business_group_id    = c_business_group_id
   and   PGC.pgm_dpnt_cvg_ctfn_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_PGM_DPNT_CVG_CTFN_F PGC1
                where
                PGC1.PGM_ID     = l_PGM_ID  and
                PGC1.DPNT_CVG_CTFN_TYP_CD = l_DPNT_CVG_CTFN_TYP_CD and
                PGC1.business_group_id  = c_business_group_id
                and   PGC1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_PGM_DPNT_CVG_CTFN_F PGC2
                where
                PGC2.PGM_ID     = l_PGM_ID  and
                PGC2.DPNT_CVG_CTFN_TYP_CD = l_DPNT_CVG_CTFN_TYP_CD and
                PGC2.business_group_id  = c_business_group_id
                and   PGC2.effective_end_date >= c_effective_end_date )
                ;
*/
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_PGC                     c_PGC%rowtype;
   l_pgm_dpnt_cvg_ctfn_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_PGC_unique in c_unique_PGC('PGC') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_PGC_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_PGC_unique.table_route_id '||r_PGC_unique.table_route_id,10);
       hr_utility.set_location(' r_PGC_unique.information1 '||r_PGC_unique.information1,10);
       hr_utility.set_location( 'r_PGC_unique.information2 '||r_PGC_unique.information2,10);
       hr_utility.set_location( 'r_PGC_unique.information3 '||r_PGC_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
         open c_PGC(r_PGC_unique.table_route_id,
                r_PGC_unique.information1,
                r_PGC_unique.information2,
                r_PGC_unique.information3 ) ;
       --
       fetch c_PGC into r_PGC ;
       --
       close c_PGC ;
       l_dml_operation:= r_PGC_unique.dml_operation ;
       l_CTFN_RQD_WHEN_RL := get_fk('FORMULA_ID', r_PGC.INFORMATION261,l_dml_operation );
       l_PGM_ID := get_fk('PGM_ID', r_PGC.INFORMATION260,l_dml_operation );
       l_update := false;
       l_process_date := p_effective_date;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_PGC_unique.information2 and r_PGC_unique.information3 then
               l_update := true;
               if r_PGC_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'PGM_DPNT_CVG_CTFN_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PGM_DPNT_CVG_CTFN_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_PGC_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_PGC_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PGC_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
    --DOUBT              log_data('PGC',l_new_value,l_prefix || r_PGC_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_PGC_min_max_dates(r_PGC_unique.table_route_id, r_PGC_unique.information1 ) ;
       fetch c_PGC_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_PGC_unique.information2);
   /*    open c_PGC(r_PGC_unique.table_route_id,
                r_PGC_unique.information1,
                r_PGC_unique.information2,
                r_PGC_unique.information3 ) ;
       --
       fetch c_PGC into r_PGC ;
       --
       close c_PGC ;  */
       --
       l_DPNT_CVG_CTFN_TYP_CD := r_PGC.information13 ;
       if p_reuse_object_flag = 'Y' then
         if c_PGC_min_max_dates%found then
           -- cursor to find the object
           open c_find_PGC_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_pgm_dpnt_cvg_ctfn_id, -999)  ) ;
           fetch c_find_PGC_in_target into l_new_value ;
           if c_find_PGC_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_PGM_DPNT_CVG_CTFN_F',
                  p_base_key_column => 'PGM_DPNT_CVG_CTFN_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_PGC_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'PGM_DPNT_CVG_CTFN_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PGM_DPNT_CVG_CTFN_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_PGC_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PGC_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_PGC_in_target ;
         --
         end if;
       end if ;
       --
       close c_PGC_min_max_dates ;
       end if; --if p_dml_operation
                       --
                       if not l_object_found_in_target OR l_update  then
         --
         l_current_pk_id := r_PGC.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_PGC.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_PGM_DPNT_CVG_CTFN_F CREATE_PROGRAM_DPNT_CVG_CTFN ',20);
           BEN_PROGRAM_DPNT_CVG_CTFN_API.CREATE_PROGRAM_DPNT_CVG_CTFN(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
            ,P_CTFN_RQD_WHEN_RL      => l_CTFN_RQD_WHEN_RL
                         ,P_DPNT_CVG_CTFN_TYP_CD      => r_PGC.INFORMATION13
                         ,P_LACK_CTFN_SSPND_ENRT_FLAG      => r_PGC.INFORMATION11
                         ,P_PFD_FLAG      => r_PGC.INFORMATION12
                         ,P_PGC_ATTRIBUTE1      => r_PGC.INFORMATION111
                         ,P_PGC_ATTRIBUTE10      => r_PGC.INFORMATION120
                         ,P_PGC_ATTRIBUTE11      => r_PGC.INFORMATION121
                         ,P_PGC_ATTRIBUTE12      => r_PGC.INFORMATION122
                         ,P_PGC_ATTRIBUTE13      => r_PGC.INFORMATION123
                         ,P_PGC_ATTRIBUTE14      => r_PGC.INFORMATION124
                         ,P_PGC_ATTRIBUTE15      => r_PGC.INFORMATION125
                         ,P_PGC_ATTRIBUTE16      => r_PGC.INFORMATION126
                         ,P_PGC_ATTRIBUTE17      => r_PGC.INFORMATION127
                         ,P_PGC_ATTRIBUTE18      => r_PGC.INFORMATION128
                         ,P_PGC_ATTRIBUTE19      => r_PGC.INFORMATION129
                         ,P_PGC_ATTRIBUTE2      => r_PGC.INFORMATION112
                         ,P_PGC_ATTRIBUTE20      => r_PGC.INFORMATION130
                         ,P_PGC_ATTRIBUTE21      => r_PGC.INFORMATION131
                         ,P_PGC_ATTRIBUTE22      => r_PGC.INFORMATION132
                         ,P_PGC_ATTRIBUTE23      => r_PGC.INFORMATION133
                         ,P_PGC_ATTRIBUTE24      => r_PGC.INFORMATION134
                         ,P_PGC_ATTRIBUTE25      => r_PGC.INFORMATION135
                         ,P_PGC_ATTRIBUTE26      => r_PGC.INFORMATION136
                         ,P_PGC_ATTRIBUTE27      => r_PGC.INFORMATION137
                         ,P_PGC_ATTRIBUTE28      => r_PGC.INFORMATION138
                         ,P_PGC_ATTRIBUTE29      => r_PGC.INFORMATION139
                         ,P_PGC_ATTRIBUTE3      => r_PGC.INFORMATION113
                         ,P_PGC_ATTRIBUTE30      => r_PGC.INFORMATION140
                         ,P_PGC_ATTRIBUTE4      => r_PGC.INFORMATION114
                         ,P_PGC_ATTRIBUTE5      => r_PGC.INFORMATION115
                         ,P_PGC_ATTRIBUTE6      => r_PGC.INFORMATION116
                         ,P_PGC_ATTRIBUTE7      => r_PGC.INFORMATION117
                         ,P_PGC_ATTRIBUTE8      => r_PGC.INFORMATION118
                         ,P_PGC_ATTRIBUTE9      => r_PGC.INFORMATION119
                         ,P_PGC_ATTRIBUTE_CATEGORY      => r_PGC.INFORMATION110
                         ,P_PGM_DPNT_CVG_CTFN_ID      => l_pgm_dpnt_cvg_ctfn_id
                         ,P_PGM_ID      => l_PGM_ID
                         ,P_RLSHP_TYP_CD      => r_PGC.INFORMATION15
             ,P_RQD_FLAG      => r_PGC.INFORMATION14
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_pgm_dpnt_cvg_ctfn_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'PGM_DPNT_CVG_CTFN_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_PGC.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_PGM_DPNT_CVG_CTFN_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PGC_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_PGM_DPNT_CVG_CTFN_F UPDATE_PROGRAM_DPNT_CVG_CTFN ',30);
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_PGC.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_PGC.information3,
               p_effective_start_date  => r_PGC.information2,
               p_dml_operation         => r_PGC.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_PGM_DPNT_CVG_CTFN_ID   := r_PGC.information1;
             l_object_version_number := r_PGC.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           BEN_PROGRAM_DPNT_CVG_CTFN_API.UPDATE_PROGRAM_DPNT_CVG_CTFN(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
            ,P_CTFN_RQD_WHEN_RL      => l_CTFN_RQD_WHEN_RL
                         ,P_DPNT_CVG_CTFN_TYP_CD      => r_PGC.INFORMATION13
                         ,P_LACK_CTFN_SSPND_ENRT_FLAG      => r_PGC.INFORMATION11
                         ,P_PFD_FLAG      => r_PGC.INFORMATION12
                         ,P_PGC_ATTRIBUTE1      => r_PGC.INFORMATION111
                         ,P_PGC_ATTRIBUTE10      => r_PGC.INFORMATION120
                         ,P_PGC_ATTRIBUTE11      => r_PGC.INFORMATION121
                         ,P_PGC_ATTRIBUTE12      => r_PGC.INFORMATION122
                         ,P_PGC_ATTRIBUTE13      => r_PGC.INFORMATION123
                         ,P_PGC_ATTRIBUTE14      => r_PGC.INFORMATION124
                         ,P_PGC_ATTRIBUTE15      => r_PGC.INFORMATION125
                         ,P_PGC_ATTRIBUTE16      => r_PGC.INFORMATION126
                         ,P_PGC_ATTRIBUTE17      => r_PGC.INFORMATION127
                         ,P_PGC_ATTRIBUTE18      => r_PGC.INFORMATION128
                         ,P_PGC_ATTRIBUTE19      => r_PGC.INFORMATION129
                         ,P_PGC_ATTRIBUTE2      => r_PGC.INFORMATION112
                         ,P_PGC_ATTRIBUTE20      => r_PGC.INFORMATION130
                         ,P_PGC_ATTRIBUTE21      => r_PGC.INFORMATION131
                         ,P_PGC_ATTRIBUTE22      => r_PGC.INFORMATION132
                         ,P_PGC_ATTRIBUTE23      => r_PGC.INFORMATION133
                         ,P_PGC_ATTRIBUTE24      => r_PGC.INFORMATION134
                         ,P_PGC_ATTRIBUTE25      => r_PGC.INFORMATION135
                         ,P_PGC_ATTRIBUTE26      => r_PGC.INFORMATION136
                         ,P_PGC_ATTRIBUTE27      => r_PGC.INFORMATION137
                         ,P_PGC_ATTRIBUTE28      => r_PGC.INFORMATION138
                         ,P_PGC_ATTRIBUTE29      => r_PGC.INFORMATION139
                         ,P_PGC_ATTRIBUTE3      => r_PGC.INFORMATION113
                         ,P_PGC_ATTRIBUTE30      => r_PGC.INFORMATION140
                         ,P_PGC_ATTRIBUTE4      => r_PGC.INFORMATION114
                         ,P_PGC_ATTRIBUTE5      => r_PGC.INFORMATION115
                         ,P_PGC_ATTRIBUTE6      => r_PGC.INFORMATION116
                         ,P_PGC_ATTRIBUTE7      => r_PGC.INFORMATION117
                         ,P_PGC_ATTRIBUTE8      => r_PGC.INFORMATION118
                         ,P_PGC_ATTRIBUTE9      => r_PGC.INFORMATION119
                         ,P_PGC_ATTRIBUTE_CATEGORY      => r_PGC.INFORMATION110
                         ,P_PGM_DPNT_CVG_CTFN_ID      => l_pgm_dpnt_cvg_ctfn_id
                         ,P_PGM_ID      => l_PGM_ID
                         ,P_RLSHP_TYP_CD      => r_PGC.INFORMATION15
             ,P_RQD_FLAG      => r_PGC.INFORMATION14
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;  -- l_update
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_PGC.information3) then
             --
             BEN_PROGRAM_DPNT_CVG_CTFN_API.delete_PROGRAM_DPNT_CVG_CTFN(
                --
                p_validate                       => false
                ,p_pgm_dpnt_cvg_ctfn_id                   => l_pgm_dpnt_cvg_ctfn_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'PGC',r_pgc.information5 );
     --
 end create_PGC_rows;

   ---------------------------------------------------------------
   ----------------------< create_LGE_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_LGE_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_AUTO_ENRT_MTHD_RL  number;
   l_DFLT_ENRT_RL  number;
   l_ENRT_RL  number;
   l_LER_ID  number;
   l_PGM_ID  number;
   cursor c_unique_LGE(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_LER_CHG_PGM_ENRT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_LGE_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_LGE(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_LGE_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     LGE.ler_chg_pgm_enrt_id new_value
   from BEN_LER_CHG_PGM_ENRT_F LGE
   where
   LGE.LER_ID     = l_LER_ID  and
   LGE.PGM_ID     = l_PGM_ID  and
   LGE.business_group_id  = c_business_group_id
   and   LGE.ler_chg_pgm_enrt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_LER_CHG_PGM_ENRT_F LGE1
                where
                LGE1.LER_ID     = l_LER_ID  and
                LGE1.PGM_ID     = l_PGM_ID  and
                LGE1.business_group_id  = c_business_group_id
                and   LGE1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_LER_CHG_PGM_ENRT_F LGE2
                where
                LGE2.LER_ID     = l_LER_ID  and
                LGE2.PGM_ID     = l_PGM_ID  and
                LGE2.business_group_id  = c_business_group_id
                and   LGE2.effective_end_date >= c_effective_end_date )
                ;
*/
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_LGE                     c_LGE%rowtype;
   l_ler_chg_pgm_enrt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_LGE_unique in c_unique_LGE('LGE') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_LGE_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_LGE_unique.table_route_id '||r_LGE_unique.table_route_id,10);
       hr_utility.set_location(' r_LGE_unique.information1 '||r_LGE_unique.information1,10);
       hr_utility.set_location( 'r_LGE_unique.information2 '||r_LGE_unique.information2,10);
       hr_utility.set_location( 'r_LGE_unique.information3 '||r_LGE_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
             open c_LGE(r_LGE_unique.table_route_id,
                r_LGE_unique.information1,
                r_LGE_unique.information2,
                r_LGE_unique.information3 ) ;
       --
       fetch c_LGE into r_LGE ;
       --
       close c_LGE ;
       --
       l_dml_operation:= r_LGE_unique.dml_operation ;
       l_AUTO_ENRT_MTHD_RL := get_fk('FORMULA_ID', r_LGE.INFORMATION262,l_dml_operation );
       l_DFLT_ENRT_RL := get_fk('FORMULA_ID', r_LGE.INFORMATION263,l_dml_operation );
       l_ENRT_RL := get_fk('FORMULA_ID', r_LGE.INFORMATION264,l_dml_operation );
       l_LER_ID := get_fk('LER_ID', r_LGE.INFORMATION257,l_dml_operation );
       l_PGM_ID := get_fk('PGM_ID', r_LGE.INFORMATION260,l_dml_operation );
       --
       l_update := false;
       l_process_date := p_effective_date;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_LGE_unique.information2 and r_LGE_unique.information3 then
               l_update := true;
               if r_LGE_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'LER_CHG_PGM_ENRT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'LER_CHG_PGM_ENRT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_LGE_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_LGE_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LGE_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
   --DOUBT               log_data('LGE',l_new_value,l_prefix || r_LGE_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_LGE_min_max_dates(r_LGE_unique.table_route_id, r_LGE_unique.information1 ) ;
       fetch c_LGE_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_LGE_unique.information2);
/*       open c_LGE(r_LGE_unique.table_route_id,
                r_LGE_unique.information1,
                r_LGE_unique.information2,
                r_LGE_unique.information3 ) ;
       --
       fetch c_LGE into r_LGE ;
       --
       close c_LGE ;   */
       --
       if p_reuse_object_flag = 'Y' then
         if c_LGE_min_max_dates%found then
           -- cursor to find the object
           open c_find_LGE_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_ler_chg_pgm_enrt_id, -999)  ) ;
           fetch c_find_LGE_in_target into l_new_value ;
           if c_find_LGE_in_target%found then
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_LER_CHG_PGM_ENRT_F',
                  p_base_key_column => 'LER_CHG_PGM_ENRT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             --
             if r_LGE_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'LER_CHG_PGM_ENRT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'LER_CHG_PGM_ENRT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_LGE_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LGE_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_LGE_in_target ;
         --
         end if;
       end if ;
       --
       close c_LGE_min_max_dates ;
       end if; --if p_dml_operation
                       --
                       if not l_object_found_in_target OR l_update  then
         --
         l_current_pk_id := r_LGE.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_LGE.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

        if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_LER_CHG_PGM_ENRT_F CREATE_LER_CHG_PGM_ENRT ',20);
           BEN_LER_CHG_PGM_ENRT_API.CREATE_LER_CHG_PGM_ENRT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_AUTO_ENRT_MTHD_RL      => l_AUTO_ENRT_MTHD_RL
                         ,P_CRNT_ENRT_PRCLDS_CHG_FLAG      => r_LGE.INFORMATION11
                         ,P_DFLT_ENRT_CD      => r_LGE.INFORMATION13
                         ,P_DFLT_ENRT_RL      => l_DFLT_ENRT_RL
                         ,P_ENRT_CD      => r_LGE.INFORMATION14
                         ,P_ENRT_MTHD_CD      => r_LGE.INFORMATION15
                         ,P_ENRT_RL      => l_ENRT_RL
                         ,P_LER_CHG_PGM_ENRT_ID      => l_ler_chg_pgm_enrt_id
                         ,P_LER_ID      => l_LER_ID
                         ,P_LGE_ATTRIBUTE1      => r_LGE.INFORMATION111
                         ,P_LGE_ATTRIBUTE10      => r_LGE.INFORMATION120
                         ,P_LGE_ATTRIBUTE11      => r_LGE.INFORMATION121
                         ,P_LGE_ATTRIBUTE12      => r_LGE.INFORMATION122
                         ,P_LGE_ATTRIBUTE13      => r_LGE.INFORMATION123
                         ,P_LGE_ATTRIBUTE14      => r_LGE.INFORMATION124
                         ,P_LGE_ATTRIBUTE15      => r_LGE.INFORMATION125
                         ,P_LGE_ATTRIBUTE16      => r_LGE.INFORMATION126
                         ,P_LGE_ATTRIBUTE17      => r_LGE.INFORMATION127
                         ,P_LGE_ATTRIBUTE18      => r_LGE.INFORMATION128
                         ,P_LGE_ATTRIBUTE19      => r_LGE.INFORMATION129
                         ,P_LGE_ATTRIBUTE2      => r_LGE.INFORMATION112
                         ,P_LGE_ATTRIBUTE20      => r_LGE.INFORMATION130
                         ,P_LGE_ATTRIBUTE21      => r_LGE.INFORMATION131
                         ,P_LGE_ATTRIBUTE22      => r_LGE.INFORMATION132
                         ,P_LGE_ATTRIBUTE23      => r_LGE.INFORMATION133
                         ,P_LGE_ATTRIBUTE24      => r_LGE.INFORMATION134
                         ,P_LGE_ATTRIBUTE25      => r_LGE.INFORMATION135
                         ,P_LGE_ATTRIBUTE26      => r_LGE.INFORMATION136
                         ,P_LGE_ATTRIBUTE27      => r_LGE.INFORMATION137
                         ,P_LGE_ATTRIBUTE28      => r_LGE.INFORMATION138
                         ,P_LGE_ATTRIBUTE29      => r_LGE.INFORMATION139
                         ,P_LGE_ATTRIBUTE3      => r_LGE.INFORMATION113
                         ,P_LGE_ATTRIBUTE30      => r_LGE.INFORMATION140
                         ,P_LGE_ATTRIBUTE4      => r_LGE.INFORMATION114
                         ,P_LGE_ATTRIBUTE5      => r_LGE.INFORMATION115
                         ,P_LGE_ATTRIBUTE6      => r_LGE.INFORMATION116
                         ,P_LGE_ATTRIBUTE7      => r_LGE.INFORMATION117
                         ,P_LGE_ATTRIBUTE8      => r_LGE.INFORMATION118
                         ,P_LGE_ATTRIBUTE9      => r_LGE.INFORMATION119
                         ,P_LGE_ATTRIBUTE_CATEGORY      => r_LGE.INFORMATION110
                         ,P_PGM_ID      => l_PGM_ID
             ,P_STL_ELIG_CANT_CHG_FLAG      => r_LGE.INFORMATION12
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_ler_chg_pgm_enrt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'LER_CHG_PGM_ENRT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_LGE.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_LER_CHG_PGM_ENRT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LGE_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_LER_CHG_PGM_ENRT_F UPDATE_LER_CHG_PGM_ENRT ',30);
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_LGE.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_LGE.information3,
               p_effective_start_date  => r_LGE.information2,
               p_dml_operation         => r_LGE.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_LER_CHG_PGM_ENRT_ID   := r_LGE.information1;
             l_object_version_number := r_LGE.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           BEN_LER_CHG_PGM_ENRT_API.UPDATE_LER_CHG_PGM_ENRT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
            ,P_AUTO_ENRT_MTHD_RL      => l_AUTO_ENRT_MTHD_RL
                         ,P_CRNT_ENRT_PRCLDS_CHG_FLAG      => r_LGE.INFORMATION11
                         ,P_DFLT_ENRT_CD      => r_LGE.INFORMATION13
                         ,P_DFLT_ENRT_RL      => l_DFLT_ENRT_RL
                         ,P_ENRT_CD      => r_LGE.INFORMATION14
                         ,P_ENRT_MTHD_CD      => r_LGE.INFORMATION15
                         ,P_ENRT_RL      => l_ENRT_RL
                         ,P_LER_CHG_PGM_ENRT_ID      => l_ler_chg_pgm_enrt_id
                         ,P_LER_ID      => l_LER_ID
                         ,P_LGE_ATTRIBUTE1      => r_LGE.INFORMATION111
                         ,P_LGE_ATTRIBUTE10      => r_LGE.INFORMATION120
                         ,P_LGE_ATTRIBUTE11      => r_LGE.INFORMATION121
                         ,P_LGE_ATTRIBUTE12      => r_LGE.INFORMATION122
                         ,P_LGE_ATTRIBUTE13      => r_LGE.INFORMATION123
                         ,P_LGE_ATTRIBUTE14      => r_LGE.INFORMATION124
                         ,P_LGE_ATTRIBUTE15      => r_LGE.INFORMATION125
                         ,P_LGE_ATTRIBUTE16      => r_LGE.INFORMATION126
                         ,P_LGE_ATTRIBUTE17      => r_LGE.INFORMATION127
                         ,P_LGE_ATTRIBUTE18      => r_LGE.INFORMATION128
                         ,P_LGE_ATTRIBUTE19      => r_LGE.INFORMATION129
                         ,P_LGE_ATTRIBUTE2      => r_LGE.INFORMATION112
                         ,P_LGE_ATTRIBUTE20      => r_LGE.INFORMATION130
                         ,P_LGE_ATTRIBUTE21      => r_LGE.INFORMATION131
                         ,P_LGE_ATTRIBUTE22      => r_LGE.INFORMATION132
                         ,P_LGE_ATTRIBUTE23      => r_LGE.INFORMATION133
                         ,P_LGE_ATTRIBUTE24      => r_LGE.INFORMATION134
                         ,P_LGE_ATTRIBUTE25      => r_LGE.INFORMATION135
                         ,P_LGE_ATTRIBUTE26      => r_LGE.INFORMATION136
                         ,P_LGE_ATTRIBUTE27      => r_LGE.INFORMATION137
                         ,P_LGE_ATTRIBUTE28      => r_LGE.INFORMATION138
                         ,P_LGE_ATTRIBUTE29      => r_LGE.INFORMATION139
                         ,P_LGE_ATTRIBUTE3      => r_LGE.INFORMATION113
                         ,P_LGE_ATTRIBUTE30      => r_LGE.INFORMATION140
                         ,P_LGE_ATTRIBUTE4      => r_LGE.INFORMATION114
                         ,P_LGE_ATTRIBUTE5      => r_LGE.INFORMATION115
                         ,P_LGE_ATTRIBUTE6      => r_LGE.INFORMATION116
                         ,P_LGE_ATTRIBUTE7      => r_LGE.INFORMATION117
                         ,P_LGE_ATTRIBUTE8      => r_LGE.INFORMATION118
                         ,P_LGE_ATTRIBUTE9      => r_LGE.INFORMATION119
                         ,P_LGE_ATTRIBUTE_CATEGORY      => r_LGE.INFORMATION110
                         ,P_PGM_ID      => l_PGM_ID
             ,P_STL_ELIG_CANT_CHG_FLAG      => r_LGE.INFORMATION12
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
            end if;  -- l_update
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_LGE.information3) then
             --
             BEN_LER_CHG_PGM_ENRT_API.delete_LER_CHG_PGM_ENRT(
                --
                p_validate                       => false
                ,p_ler_chg_pgm_enrt_id                   => l_ler_chg_pgm_enrt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'LGE',r_lge.information5 );
     --
 end create_LGE_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_LDC_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_LDC_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_CVG_EFF_END_RL  number;
   l_CVG_EFF_STRT_RL  number;
   l_LER_CHG_DPNT_CVG_RL  number;
   l_LER_ID  number;
   l_PGM_ID  number;
   l_PL_ID  number;
   l_PTIP_ID  number;
   cursor c_unique_LDC(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_LER_CHG_DPNT_CVG_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_LDC_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_LDC(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_LDC_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     LDC.ler_chg_dpnt_cvg_id new_value
   from BEN_LER_CHG_DPNT_CVG_F LDC
   where
   LDC.LER_ID     = l_LER_ID  and
   nvl(LDC.PGM_ID,-999)     = nvl(l_PGM_ID,-999)  and
   nvl(LDC.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
   nvl(LDC.PTIP_ID,-999)     = nvl(l_PTIP_ID,-999)  and
   LDC.business_group_id  = c_business_group_id
   and   LDC.ler_chg_dpnt_cvg_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_LER_CHG_DPNT_CVG_F LDC1
                where
                LDC1.LER_ID               = l_LER_ID  and
                nvl(LDC1.PGM_ID,-999)     = nvl(l_PGM_ID,-999)  and
                nvl(LDC1.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
                nvl(LDC1.PTIP_ID,-999)     = nvl(l_PTIP_ID,-999)  and
                LDC1.business_group_id  = c_business_group_id
                and   LDC1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_LER_CHG_DPNT_CVG_F LDC2
                where
                LDC2.LER_ID     = l_LER_ID  and
                nvl(LDC2.PGM_ID,-999)     = nvl(l_PGM_ID,-999)  and
                nvl(LDC2.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
                nvl(LDC2.PTIP_ID,-999)     = nvl(l_PTIP_ID,-999)  and
                LDC2.business_group_id  = c_business_group_id
                and   LDC2.effective_end_date >= c_effective_end_date )
                ;
*/
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END

   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_LDC                     c_LDC%rowtype;
   l_ler_chg_dpnt_cvg_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_LDC_unique in c_unique_LDC('LDC') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_LDC_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_LDC_unique.table_route_id '||r_LDC_unique.table_route_id,10);
       hr_utility.set_location(' r_LDC_unique.information1 '||r_LDC_unique.information1,10);
       hr_utility.set_location( 'r_LDC_unique.information2 '||r_LDC_unique.information2,10);
       hr_utility.set_location( 'r_LDC_unique.information3 '||r_LDC_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
           open c_LDC(r_LDC_unique.table_route_id,
                r_LDC_unique.information1,
                r_LDC_unique.information2,
                r_LDC_unique.information3 ) ;
       --
       fetch c_LDC into r_LDC ;
       --
       close c_LDC ;
       --
       l_dml_operation:= r_LDC_unique.dml_operation ;
       l_CVG_EFF_END_RL := get_fk('FORMULA_ID', r_LDC.INFORMATION263,l_dml_operation );
       l_CVG_EFF_STRT_RL := get_fk('FORMULA_ID', r_LDC.INFORMATION262,l_dml_operation );
       l_LER_CHG_DPNT_CVG_RL := get_fk('FORMULA_ID', r_LDC.INFORMATION258,l_dml_operation );
       l_LER_ID := get_fk('LER_ID', r_LDC.INFORMATION257,l_dml_operation );
       l_PGM_ID := get_fk('PGM_ID', r_LDC.INFORMATION260,l_dml_operation );
       l_PL_ID := get_fk('PL_ID', r_LDC.INFORMATION261,l_dml_operation );
       l_PTIP_ID := get_fk('PTIP_ID', r_LDC.INFORMATION259,l_dml_operation );
       --
       l_update := false;
       l_process_date := p_effective_date;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_LDC_unique.information2 and r_LDC_unique.information3 then
               l_update := true;
               if r_LDC_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'LER_CHG_DPNT_CVG_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'LER_CHG_DPNT_CVG_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_LDC_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_LDC_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LDC_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
    --DOUBT              log_data('LDC',l_new_value,l_prefix || r_LDC_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_LDC_min_max_dates(r_LDC_unique.table_route_id, r_LDC_unique.information1 ) ;
       fetch c_LDC_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_LDC_unique.information2);
/*       open c_LDC(r_LDC_unique.table_route_id,
                r_LDC_unique.information1,
                r_LDC_unique.information2,
                r_LDC_unique.information3 ) ;
       --
       fetch c_LDC into r_LDC ;
       --
       close c_LDC ;   */
       --
       if p_reuse_object_flag = 'Y' then
         if c_LDC_min_max_dates%found then
           -- cursor to find the object
           open c_find_LDC_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_ler_chg_dpnt_cvg_id, -999)  ) ;
           fetch c_find_LDC_in_target into l_new_value ;
           if c_find_LDC_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_LER_CHG_DPNT_CVG_F',
                  p_base_key_column => 'LER_CHG_DPNT_CVG_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_LDC_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'LER_CHG_DPNT_CVG_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'LER_CHG_DPNT_CVG_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_LDC_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LDC_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_LDC_in_target ;
         --
         end if;
       end if ;
       --
       close c_LDC_min_max_dates ;
       end if; --if p_dml_operation
                       --
                       if not l_object_found_in_target OR l_update  then
         --
         l_current_pk_id := r_LDC.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_LDC.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_LER_CHG_DPNT_CVG_F CREATE_LER_CHG_DEPENDENT_CVG ',20);
           BEN_LER_CHG_DEPENDENT_CVG_API.CREATE_LER_CHG_DEPENDENT_CVG(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
            ,P_ADD_RMV_CVG_CD      => r_LDC.INFORMATION11
                         ,P_CVG_EFF_END_CD      => r_LDC.INFORMATION12
                         ,P_CVG_EFF_END_RL      => l_CVG_EFF_END_RL
                         ,P_CVG_EFF_STRT_CD      => r_LDC.INFORMATION13
                         ,P_CVG_EFF_STRT_RL      => l_CVG_EFF_STRT_RL
                         ,P_LDC_ATTRIBUTE1      => r_LDC.INFORMATION111
                         ,P_LDC_ATTRIBUTE10      => r_LDC.INFORMATION120
                         ,P_LDC_ATTRIBUTE11      => r_LDC.INFORMATION121
                         ,P_LDC_ATTRIBUTE12      => r_LDC.INFORMATION122
                         ,P_LDC_ATTRIBUTE13      => r_LDC.INFORMATION123
                         ,P_LDC_ATTRIBUTE14      => r_LDC.INFORMATION124
                         ,P_LDC_ATTRIBUTE15      => r_LDC.INFORMATION125
                         ,P_LDC_ATTRIBUTE16      => r_LDC.INFORMATION126
                         ,P_LDC_ATTRIBUTE17      => r_LDC.INFORMATION127
                         ,P_LDC_ATTRIBUTE18      => r_LDC.INFORMATION128
                         ,P_LDC_ATTRIBUTE19      => r_LDC.INFORMATION129
                         ,P_LDC_ATTRIBUTE2      => r_LDC.INFORMATION112
                         ,P_LDC_ATTRIBUTE20      => r_LDC.INFORMATION130
                         ,P_LDC_ATTRIBUTE21      => r_LDC.INFORMATION131
                         ,P_LDC_ATTRIBUTE22      => r_LDC.INFORMATION132
                         ,P_LDC_ATTRIBUTE23      => r_LDC.INFORMATION133
                         ,P_LDC_ATTRIBUTE24      => r_LDC.INFORMATION134
                         ,P_LDC_ATTRIBUTE25      => r_LDC.INFORMATION135
                         ,P_LDC_ATTRIBUTE26      => r_LDC.INFORMATION136
                         ,P_LDC_ATTRIBUTE27      => r_LDC.INFORMATION137
                         ,P_LDC_ATTRIBUTE28      => r_LDC.INFORMATION138
                         ,P_LDC_ATTRIBUTE29      => r_LDC.INFORMATION139
                         ,P_LDC_ATTRIBUTE3      => r_LDC.INFORMATION113
                         ,P_LDC_ATTRIBUTE30      => r_LDC.INFORMATION140
                         ,P_LDC_ATTRIBUTE4      => r_LDC.INFORMATION114
                         ,P_LDC_ATTRIBUTE5      => r_LDC.INFORMATION115
                         ,P_LDC_ATTRIBUTE6      => r_LDC.INFORMATION116
                         ,P_LDC_ATTRIBUTE7      => r_LDC.INFORMATION117
                         ,P_LDC_ATTRIBUTE8      => r_LDC.INFORMATION118
                         ,P_LDC_ATTRIBUTE9      => r_LDC.INFORMATION119
                         ,P_LDC_ATTRIBUTE_CATEGORY      => r_LDC.INFORMATION110
                         ,P_LER_CHG_DPNT_CVG_CD      => r_LDC.INFORMATION14
                         ,P_LER_CHG_DPNT_CVG_ID      => l_ler_chg_dpnt_cvg_id
                         ,P_LER_CHG_DPNT_CVG_RL      => l_LER_CHG_DPNT_CVG_RL
                         ,P_LER_ID      => l_LER_ID
                         ,P_PGM_ID      => l_PGM_ID
                         ,P_PL_ID      => l_PL_ID
             ,P_PTIP_ID      => l_PTIP_ID
             --
                         ,P_SUSP_IF_CTFN_NOT_PRVD_FLAG      => nvl(r_LDC.INFORMATION198,'Y')
                         ,P_CTFN_DETERMINE_CD      => r_LDC.INFORMATION197
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_ler_chg_dpnt_cvg_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'LER_CHG_DPNT_CVG_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_LDC.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_LER_CHG_DPNT_CVG_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LDC_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_LER_CHG_DPNT_CVG_F UPDATE_LER_CHG_DEPENDENT_CVG ',30);
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_LDC.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_LDC.information3,
               p_effective_start_date  => r_LDC.information2,
               p_dml_operation         => r_LDC.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_LER_CHG_DPNT_CVG_ID   := r_LDC.information1;
             l_object_version_number := r_LDC.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           BEN_LER_CHG_DEPENDENT_CVG_API.UPDATE_LER_CHG_DEPENDENT_CVG(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ADD_RMV_CVG_CD      => r_LDC.INFORMATION11
                         ,P_CVG_EFF_END_CD      => r_LDC.INFORMATION12
                         ,P_CVG_EFF_END_RL      => l_CVG_EFF_END_RL
                         ,P_CVG_EFF_STRT_CD      => r_LDC.INFORMATION13
                         ,P_CVG_EFF_STRT_RL      => l_CVG_EFF_STRT_RL
                         ,P_LDC_ATTRIBUTE1      => r_LDC.INFORMATION111
                         ,P_LDC_ATTRIBUTE10      => r_LDC.INFORMATION120
                         ,P_LDC_ATTRIBUTE11      => r_LDC.INFORMATION121
                         ,P_LDC_ATTRIBUTE12      => r_LDC.INFORMATION122
                         ,P_LDC_ATTRIBUTE13      => r_LDC.INFORMATION123
                         ,P_LDC_ATTRIBUTE14      => r_LDC.INFORMATION124
                         ,P_LDC_ATTRIBUTE15      => r_LDC.INFORMATION125
                         ,P_LDC_ATTRIBUTE16      => r_LDC.INFORMATION126
                         ,P_LDC_ATTRIBUTE17      => r_LDC.INFORMATION127
                         ,P_LDC_ATTRIBUTE18      => r_LDC.INFORMATION128
                         ,P_LDC_ATTRIBUTE19      => r_LDC.INFORMATION129
                         ,P_LDC_ATTRIBUTE2      => r_LDC.INFORMATION112
                         ,P_LDC_ATTRIBUTE20      => r_LDC.INFORMATION130
                         ,P_LDC_ATTRIBUTE21      => r_LDC.INFORMATION131
                         ,P_LDC_ATTRIBUTE22      => r_LDC.INFORMATION132
                         ,P_LDC_ATTRIBUTE23      => r_LDC.INFORMATION133
                         ,P_LDC_ATTRIBUTE24      => r_LDC.INFORMATION134
                         ,P_LDC_ATTRIBUTE25      => r_LDC.INFORMATION135
                         ,P_LDC_ATTRIBUTE26      => r_LDC.INFORMATION136
                         ,P_LDC_ATTRIBUTE27      => r_LDC.INFORMATION137
                         ,P_LDC_ATTRIBUTE28      => r_LDC.INFORMATION138
                         ,P_LDC_ATTRIBUTE29      => r_LDC.INFORMATION139
                         ,P_LDC_ATTRIBUTE3      => r_LDC.INFORMATION113
                         ,P_LDC_ATTRIBUTE30      => r_LDC.INFORMATION140
                         ,P_LDC_ATTRIBUTE4      => r_LDC.INFORMATION114
                         ,P_LDC_ATTRIBUTE5      => r_LDC.INFORMATION115
                         ,P_LDC_ATTRIBUTE6      => r_LDC.INFORMATION116
                         ,P_LDC_ATTRIBUTE7      => r_LDC.INFORMATION117
                         ,P_LDC_ATTRIBUTE8      => r_LDC.INFORMATION118
                         ,P_LDC_ATTRIBUTE9      => r_LDC.INFORMATION119
                         ,P_LDC_ATTRIBUTE_CATEGORY      => r_LDC.INFORMATION110
                         ,P_LER_CHG_DPNT_CVG_CD      => r_LDC.INFORMATION14
                         ,P_LER_CHG_DPNT_CVG_ID      => l_ler_chg_dpnt_cvg_id
                         ,P_LER_CHG_DPNT_CVG_RL      => l_LER_CHG_DPNT_CVG_RL
                         ,P_LER_ID      => l_LER_ID
                         ,P_PGM_ID      => l_PGM_ID
                         ,P_PL_ID      => l_PL_ID
             ,P_PTIP_ID      => l_PTIP_ID
             --
                         ,P_SUSP_IF_CTFN_NOT_PRVD_FLAG      => nvl(r_LDC.INFORMATION198,'Y')
                         ,P_CTFN_DETERMINE_CD      => r_LDC.INFORMATION197
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
            ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;  -- l_update
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_LDC.information3) then
             --
             BEN_LER_CHG_DEPENDENT_CVG_API.delete_LER_CHG_DEPENDENT_CVG(
                --
                p_validate                       => false
                ,p_ler_chg_dpnt_cvg_id                   => l_ler_chg_dpnt_cvg_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'LDC',r_ldc.information5 );
     --
 end create_LDC_rows;

   ---------------------------------------------------------------
   ----------------------< create_PAT_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_PAT_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ACTN_TYP_DUE_DT_RL  number;
   l_ACTN_TYP_ID  number;
   l_PGM_ID  number;
   l_PL_ID  number;
   cursor c_unique_PAT(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
 ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_POPL_ACTN_TYP_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_PAT_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_PAT(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_PAT_in_target( c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     PAT.popl_actn_typ_id new_value
   from BEN_POPL_ACTN_TYP_F PAT
   where NVL(PAT.PGM_ID,-999)     = nvl(l_PGM_ID,-999)
   and   NVL(PAT.PL_ID,-999)      = nvl(l_PL_ID ,-999)
   and   PAT.ACTN_TYP_ID          = l_ACTN_TYP_ID
   and   PAT.business_group_id  = c_business_group_id
   and   PAT.popl_actn_typ_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*
   and exists ( select null
                from BEN_POPL_ACTN_TYP_F PAT1
                where NVL(PAT1.PGM_ID,-999)     = nvl(l_PGM_ID,-999)
                and   NVL(PAT1.PL_ID,-999)      = nvl(l_PL_ID ,-999)
                and   PAT1.ACTN_TYP_ID          = l_ACTN_TYP_ID
                and   PAT1.business_group_id  = c_business_group_id
                and   PAT1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_POPL_ACTN_TYP_F PAT2
                where NVL(PAT2.PGM_ID,-999)     = nvl(l_PGM_ID,-999)
                and   NVL(PAT2.PL_ID,-999)      = nvl(l_PL_ID ,-999)
                and   PAT2.ACTN_TYP_ID          = l_ACTN_TYP_ID
                and   PAT2.business_group_id  = c_business_group_id
                and   PAT2.effective_end_date >= c_effective_end_date )
                ;
*/
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_PAT                     c_PAT%rowtype;
   l_popl_actn_typ_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_PAT_unique in c_unique_PAT('PAT') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_PAT_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then

       --
       hr_utility.set_location(' r_PAT_unique.table_route_id '||r_PAT_unique.table_route_id,10);
       hr_utility.set_location(' r_PAT_unique.information1 '||r_PAT_unique.information1,10);
       hr_utility.set_location( 'r_PAT_unique.information2 '||r_PAT_unique.information2,10);
       hr_utility.set_location( 'r_PAT_unique.information3 '||r_PAT_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
          open c_PAT(r_PAT_unique.table_route_id,
                r_PAT_unique.information1,
                r_PAT_unique.information2,
                r_PAT_unique.information3 ) ;
       --
       fetch c_PAT into r_PAT ;
       --
       close c_PAT ;
       --
       l_dml_operation:= r_PAT_unique.dml_operation ;
       l_ACTN_TYP_DUE_DT_RL := get_fk('FORMULA_ID', r_PAT.INFORMATION262,l_dml_operation );
       l_ACTN_TYP_ID := get_fk('ACTN_TYP_ID', r_PAT.INFORMATION221,l_dml_operation );
       l_PGM_ID := get_fk('PGM_ID', r_PAT.INFORMATION260,l_dml_operation );
       l_PL_ID := get_fk('PL_ID', r_PAT.INFORMATION261,l_dml_operation );
       --
       l_update := false;
       l_process_date := p_effective_date;

       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_PAT_unique.information2 and r_PAT_unique.information3 then
               l_update := true;
               if r_PAT_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'POPL_ACTN_TYP_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'POPL_ACTN_TYP_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_PAT_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_PAT_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PAT_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
     --DOUBT             log_data('PAT',l_new_value,l_prefix || r_PAT_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_PAT_min_max_dates(r_PAT_unique.table_route_id, r_PAT_unique.information1 ) ;
       fetch c_PAT_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_PAT_unique.information2);
/*       open c_PAT(r_PAT_unique.table_route_id,
                r_PAT_unique.information1,
                r_PAT_unique.information2,
                r_PAT_unique.information3 ) ;
       --
       fetch c_PAT into r_PAT ;
       --
       close c_PAT ;    */
       --
       --
       if l_ACTN_TYP_ID is null then
         close c_PAT_min_max_dates;
       else

         if p_reuse_object_flag = 'Y' then
           if c_PAT_min_max_dates%found then
             -- cursor to find the object
             open c_find_PAT_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_popl_actn_typ_id, -999)  ) ;
             fetch c_find_PAT_in_target into l_new_value ;
             if c_find_PAT_in_target%found then
               --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_POPL_ACTN_TYP_F',
                  p_base_key_column => 'POPL_ACTN_TYP_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
               if r_PAT_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'POPL_ACTN_TYP_ID'  then
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'POPL_ACTN_TYP_ID' ;
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_PAT_unique.information1 ;
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PAT_unique.table_route_id;
                 --
                 -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                 --
                 BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
               end if ;
               --
               l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
             end if;
             close c_find_PAT_in_target ;
           --
           end if;
         end if ;
         --
         close c_PAT_min_max_dates ;
         end if; --if p_dml_operation
        --
        if (not l_object_found_in_target OR l_update ) and l_ACTN_TYP_ID is not null then
           --
           l_current_pk_id := r_PAT.information1;
           --
           hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
           hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
           --
           if l_current_pk_id =  l_prev_pk_id  then
             --
             l_first_rec := false ;
             --
           else
             --
             l_first_rec := true ;
             --
           end if ;
           --

           l_effective_date := r_PAT.information2;
           if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
             l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
           end if;

           if l_first_rec and not l_update then
           -- Call Create routine.
             hr_utility.set_location(' BEN_POPL_ACTN_TYP_F CREATE_POPL_ACTION_TYPE ',20);
             BEN_POPL_ACTION_TYPE_API.CREATE_POPL_ACTION_TYPE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
              ,P_ACTN_TYP_DUE_DT_CD      => r_PAT.INFORMATION11
                         ,P_ACTN_TYP_DUE_DT_RL      => l_ACTN_TYP_DUE_DT_RL
                         ,P_ACTN_TYP_ID      => l_ACTN_TYP_ID
                         ,P_PAT_ATTRIBUTE1      => r_PAT.INFORMATION111
                         ,P_PAT_ATTRIBUTE10      => r_PAT.INFORMATION120
                         ,P_PAT_ATTRIBUTE11      => r_PAT.INFORMATION121
                         ,P_PAT_ATTRIBUTE12      => r_PAT.INFORMATION122
                         ,P_PAT_ATTRIBUTE13      => r_PAT.INFORMATION123
                         ,P_PAT_ATTRIBUTE14      => r_PAT.INFORMATION124
                         ,P_PAT_ATTRIBUTE15      => r_PAT.INFORMATION125
                         ,P_PAT_ATTRIBUTE16      => r_PAT.INFORMATION126
                         ,P_PAT_ATTRIBUTE17      => r_PAT.INFORMATION127
                         ,P_PAT_ATTRIBUTE18      => r_PAT.INFORMATION128
                         ,P_PAT_ATTRIBUTE19      => r_PAT.INFORMATION129
                         ,P_PAT_ATTRIBUTE2      => r_PAT.INFORMATION112
                         ,P_PAT_ATTRIBUTE20      => r_PAT.INFORMATION130
                         ,P_PAT_ATTRIBUTE21      => r_PAT.INFORMATION131
                         ,P_PAT_ATTRIBUTE22      => r_PAT.INFORMATION132
                         ,P_PAT_ATTRIBUTE23      => r_PAT.INFORMATION133
                         ,P_PAT_ATTRIBUTE24      => r_PAT.INFORMATION134
                         ,P_PAT_ATTRIBUTE25      => r_PAT.INFORMATION135
                         ,P_PAT_ATTRIBUTE26      => r_PAT.INFORMATION136
                         ,P_PAT_ATTRIBUTE27      => r_PAT.INFORMATION137
                         ,P_PAT_ATTRIBUTE28      => r_PAT.INFORMATION138
                         ,P_PAT_ATTRIBUTE29      => r_PAT.INFORMATION139
                         ,P_PAT_ATTRIBUTE3      => r_PAT.INFORMATION113
                         ,P_PAT_ATTRIBUTE30      => r_PAT.INFORMATION140
                         ,P_PAT_ATTRIBUTE4      => r_PAT.INFORMATION114
                         ,P_PAT_ATTRIBUTE5      => r_PAT.INFORMATION115
                         ,P_PAT_ATTRIBUTE6      => r_PAT.INFORMATION116
                         ,P_PAT_ATTRIBUTE7      => r_PAT.INFORMATION117
                         ,P_PAT_ATTRIBUTE8      => r_PAT.INFORMATION118
                         ,P_PAT_ATTRIBUTE9      => r_PAT.INFORMATION119
                         ,P_PAT_ATTRIBUTE_CATEGORY      => r_PAT.INFORMATION110
                         ,P_PGM_ID      => l_PGM_ID
                         ,P_PL_ID      => l_PL_ID
             ,P_POPL_ACTN_TYP_ID      => l_popl_actn_typ_id
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
             );
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             -- Update all relevent cer records with new pk_id
             hr_utility.set_location('Before plsql table ',222);
             hr_utility.set_location('new_value id '||l_popl_actn_typ_id,222);
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'POPL_ACTN_TYP_ID' ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_PAT.information1 ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_POPL_ACTN_TYP_ID ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PAT_unique.table_route_id;
             hr_utility.set_location('After plsql table ',222);
             --
             -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
             --
             BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             --
           else
             --
             -- Call Update routine for the pk_id created in prev run .
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             hr_utility.set_location(' BEN_POPL_ACTN_TYP_F UPDATE_POPL_ACTION_TYPE ',30);
             --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_PAT.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_PAT.information3,
               p_effective_start_date  => r_PAT.information2,
               p_dml_operation         => r_PAT.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_POPL_ACTN_TYP_ID   := r_PAT.information1;
             l_object_version_number := r_PAT.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
             BEN_POPL_ACTION_TYPE_API.UPDATE_POPL_ACTION_TYPE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ACTN_TYP_DUE_DT_CD      => r_PAT.INFORMATION11
                         ,P_ACTN_TYP_DUE_DT_RL      => l_ACTN_TYP_DUE_DT_RL
                         ,P_ACTN_TYP_ID      => l_ACTN_TYP_ID
                         ,P_PAT_ATTRIBUTE1      => r_PAT.INFORMATION111
                         ,P_PAT_ATTRIBUTE10      => r_PAT.INFORMATION120
                         ,P_PAT_ATTRIBUTE11      => r_PAT.INFORMATION121
                         ,P_PAT_ATTRIBUTE12      => r_PAT.INFORMATION122
                         ,P_PAT_ATTRIBUTE13      => r_PAT.INFORMATION123
                         ,P_PAT_ATTRIBUTE14      => r_PAT.INFORMATION124
                         ,P_PAT_ATTRIBUTE15      => r_PAT.INFORMATION125
                         ,P_PAT_ATTRIBUTE16      => r_PAT.INFORMATION126
                         ,P_PAT_ATTRIBUTE17      => r_PAT.INFORMATION127
                         ,P_PAT_ATTRIBUTE18      => r_PAT.INFORMATION128
                         ,P_PAT_ATTRIBUTE19      => r_PAT.INFORMATION129
                         ,P_PAT_ATTRIBUTE2      => r_PAT.INFORMATION112
                         ,P_PAT_ATTRIBUTE20      => r_PAT.INFORMATION130
                         ,P_PAT_ATTRIBUTE21      => r_PAT.INFORMATION131
                         ,P_PAT_ATTRIBUTE22      => r_PAT.INFORMATION132
                         ,P_PAT_ATTRIBUTE23      => r_PAT.INFORMATION133
                         ,P_PAT_ATTRIBUTE24      => r_PAT.INFORMATION134
                         ,P_PAT_ATTRIBUTE25      => r_PAT.INFORMATION135
                         ,P_PAT_ATTRIBUTE26      => r_PAT.INFORMATION136
                         ,P_PAT_ATTRIBUTE27      => r_PAT.INFORMATION137
                         ,P_PAT_ATTRIBUTE28      => r_PAT.INFORMATION138
                         ,P_PAT_ATTRIBUTE29      => r_PAT.INFORMATION139
                         ,P_PAT_ATTRIBUTE3      => r_PAT.INFORMATION113
                         ,P_PAT_ATTRIBUTE30      => r_PAT.INFORMATION140
                         ,P_PAT_ATTRIBUTE4      => r_PAT.INFORMATION114
                         ,P_PAT_ATTRIBUTE5      => r_PAT.INFORMATION115
                         ,P_PAT_ATTRIBUTE6      => r_PAT.INFORMATION116
                         ,P_PAT_ATTRIBUTE7      => r_PAT.INFORMATION117
                         ,P_PAT_ATTRIBUTE8      => r_PAT.INFORMATION118
                         ,P_PAT_ATTRIBUTE9      => r_PAT.INFORMATION119
                         ,P_PAT_ATTRIBUTE_CATEGORY      => r_PAT.INFORMATION110
                         ,P_PGM_ID      => l_PGM_ID
                         ,P_PL_ID      => l_PL_ID
             ,P_POPL_ACTN_TYP_ID      => l_popl_actn_typ_id
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
             );
             --
             end if;  -- l_update
           end if;
           --
           -- Delete the row if it is end dated.
           --
           if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
               trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
               trunc(l_max_eed) = r_PAT.information3) then
             --
             BEN_POPL_ACTION_TYPE_API.delete_POPL_ACTION_TYPE(
                --
                p_validate                       => false
                ,p_popl_actn_typ_id                   => l_popl_actn_typ_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
           end if;
           --
           l_prev_pk_id := l_current_pk_id ;
           --
         end if;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'PAT',r_pat.information5 );
     --
 end create_PAT_rows;
   --
   ---------------------------------------------------------------
   ----------------------< create_PEO_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_PEO_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_LER_ID  number;
   l_MX_POE_DET_DT_RL  number;
   l_MX_POE_RL  number;
   l_OIPL_ID  number;
   l_PGM_ID  number;
   l_PLIP_ID  number;
   l_PL_ID  number;
   l_PRTN_EFF_END_DT_RL  number;
   l_PRTN_EFF_STRT_DT_RL  number;
   l_PTIP_ID  number;
   l_VRFY_FMLY_MMBR_RL  number;
   l_WAIT_PERD_DT_TO_USE_RL  number;
   l_WAIT_PERD_RL  number;
   cursor c_unique_PEO(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_TO_PRTE_RSN_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_PEO_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_PEO(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_PEO_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     PEO.elig_to_prte_rsn_id new_value
   from BEN_ELIG_TO_PRTE_RSN_F PEO
   where
   PEO.LER_ID     = l_LER_ID  and
   nvl(PEO.OIPL_ID,-999)     = nvl(l_OIPL_ID,-999)  and
   nvl(PEO.PGM_ID,-999)     = nvl(l_PGM_ID,-999)  and
   nvl(PEO.PLIP_ID,-999)     = nvl(l_PLIP_ID,-999)  and
   nvl(PEO.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
   nvl(PEO.PTIP_ID,-999)     = nvl(l_PTIP_ID,-999)  and
   PEO.business_group_id  = c_business_group_id
   and   PEO.elig_to_prte_rsn_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*
   and exists ( select null
                from BEN_ELIG_TO_PRTE_RSN_F PEO1
                where
                PEO1.LER_ID     = l_LER_ID  and
                nvl(PEO1.OIPL_ID,-999)     = nvl(l_OIPL_ID,-999)  and
                nvl(PEO1.PGM_ID,-999)     = nvl(l_PGM_ID,-999)  and
                nvl(PEO1.PLIP_ID,-999)     = nvl(l_PLIP_ID,-999)  and
                nvl(PEO1.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
                nvl(PEO1.PTIP_ID,-999)     = nvl(l_PTIP_ID,-999)  and
                PEO1.business_group_id  = c_business_group_id
                and   PEO1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_TO_PRTE_RSN_F PEO2
                where
                PEO2.LER_ID     = l_LER_ID  and
                nvl(PEO2.OIPL_ID,-999)     = nvl(l_OIPL_ID,-999)  and
                nvl(PEO2.PGM_ID,-999)     = nvl(l_PGM_ID,-999)  and
                nvl(PEO2.PLIP_ID,-999)     = nvl(l_PLIP_ID,-999)  and
                nvl(PEO2.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
                nvl(PEO2.PTIP_ID,-999)     = nvl(l_PTIP_ID,-999)  and
                PEO2.business_group_id  = c_business_group_id
                and   PEO2.effective_end_date >= c_effective_end_date )
                ;
*/
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_PEO                     c_PEO%rowtype;
   l_elig_to_prte_rsn_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_PEO_unique in c_unique_PEO('PEO') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_PEO_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
          ) then

       --
       hr_utility.set_location(' r_PEO_unique.table_route_id '||r_PEO_unique.table_route_id,10);
       hr_utility.set_location(' r_PEO_unique.information1 '||r_PEO_unique.information1,10);
       hr_utility.set_location( 'r_PEO_unique.information2 '||r_PEO_unique.information2,10);
       hr_utility.set_location( 'r_PEO_unique.information3 '||r_PEO_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
              open c_PEO(r_PEO_unique.table_route_id,
                r_PEO_unique.information1,
                r_PEO_unique.information2,
                r_PEO_unique.information3 ) ;
       --
       fetch c_PEO into r_PEO ;
       --
       close c_PEO ;
       --
       l_dml_operation:= r_PEO_unique.dml_operation ;
       l_LER_ID := get_fk('LER_ID', r_PEO.information257,l_dml_operation );
       hr_utility.set_location(' l_LER_ID '||l_LER_ID ,123);
       l_MX_POE_DET_DT_RL := get_fk('FORMULA_ID', r_PEO.INFORMATION272,l_dml_operation );
       l_MX_POE_RL := get_fk('FORMULA_ID', r_PEO.INFORMATION270,l_dml_operation );
       l_OIPL_ID := get_fk('OIPL_ID', r_PEO.INFORMATION258,l_dml_operation );
       l_PGM_ID := get_fk('PGM_ID', r_PEO.INFORMATION260,l_dml_operation );
       l_PLIP_ID := get_fk('PLIP_ID', r_PEO.INFORMATION256,l_dml_operation );
       l_PL_ID := get_fk('PL_ID', r_PEO.INFORMATION261,l_dml_operation );
       l_PRTN_EFF_END_DT_RL := get_fk('FORMULA_ID', r_PEO.INFORMATION266,l_dml_operation );
       l_PRTN_EFF_STRT_DT_RL := get_fk('FORMULA_ID', r_PEO.INFORMATION264,l_dml_operation );
       l_PTIP_ID := get_fk('PTIP_ID', r_PEO.INFORMATION259,l_dml_operation );
       l_VRFY_FMLY_MMBR_RL := get_fk('FORMULA_ID', r_PEO.INFORMATION273,l_dml_operation );
       l_WAIT_PERD_DT_TO_USE_RL := get_fk('FORMULA_ID', r_PEO.INFORMATION268,l_dml_operation );
       l_WAIT_PERD_RL := get_fk('FORMULA_ID', r_PEO.INFORMATION271,l_dml_operation );
       --
       l_update := false;
       l_process_date := p_effective_date;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_PEO_unique.information2 and r_PEO_unique.information3 then
               l_update := true;
               if r_PEO_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'ELIG_TO_PRTE_RSN_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_TO_PRTE_RSN_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_PEO_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_PEO_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PEO_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
  --DOUBT                log_data('PEO',l_new_value,l_prefix || r_PEO_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_PEO_min_max_dates(r_PEO_unique.table_route_id, r_PEO_unique.information1 ) ;
       fetch c_PEO_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
        l_min_esd := greatest(l_min_esd,r_PEO_unique.information2);
/*       open c_PEO(r_PEO_unique.table_route_id,
                r_PEO_unique.information1,
                r_PEO_unique.information2,
                r_PEO_unique.information3 ) ;
       --
       fetch c_PEO into r_PEO ;
       --
       close c_PEO ;  */
       --
       hr_utility.set_location('g_count '||BEN_PD_COPY_TO_BEN_ONE.g_count,123);
       hr_utility.set_location('r_PEO.information14 '||r_PEO.information14 ,123);
       --

       if p_reuse_object_flag = 'Y' then
         if c_PEO_min_max_dates%found then
           -- cursor to find the object
           open c_find_PEO_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_to_prte_rsn_id, -999)  ) ;
           fetch c_find_PEO_in_target into l_new_value ;
           if c_find_PEO_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_ELIG_TO_PRTE_RSN_F',
                  p_base_key_column => 'ELIG_TO_PRTE_RSN_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_PEO_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_TO_PRTE_RSN_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_TO_PRTE_RSN_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_PEO_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PEO_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_PEO_in_target ;
         --
         end if;
       end if ;
       --
       close c_PEO_min_max_dates ;
      end if; --if p_dml_operation
                       --
                       if not l_object_found_in_target OR l_update  then
         --
         l_current_pk_id := r_PEO.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_PEO.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

        if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_TO_PRTE_RSN_F CREATE_ELIG_TO_PRTE_REASON ',20);
           BEN_ELIG_TO_PRTE_REASON_API.CREATE_ELIG_TO_PRTE_REASON(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
              ,P_ELIG_INELIG_CD      => r_PEO.INFORMATION21
              ,P_ELIG_TO_PRTE_RSN_ID      => l_elig_to_prte_rsn_id
              ,P_IGNR_PRTN_OVRID_FLAG      => r_PEO.INFORMATION20
              ,P_LER_ID      => l_LER_ID
              ,P_MX_POE_APLS_CD      => r_PEO.INFORMATION17
              ,P_MX_POE_DET_DT_CD      => r_PEO.INFORMATION16
              ,P_MX_POE_DET_DT_RL      => l_MX_POE_DET_DT_RL
              ,P_MX_POE_RL      => l_MX_POE_RL
              ,P_MX_POE_UOM      => r_PEO.INFORMATION15
              ,P_MX_POE_VAL      => r_PEO.INFORMATION269
              ,P_OIPL_ID      => l_OIPL_ID
              ,P_PEO_ATTRIBUTE1      => r_PEO.INFORMATION111
              ,P_PEO_ATTRIBUTE10      => r_PEO.INFORMATION120
              ,P_PEO_ATTRIBUTE11      => r_PEO.INFORMATION121
              ,P_PEO_ATTRIBUTE12      => r_PEO.INFORMATION122
              ,P_PEO_ATTRIBUTE13      => r_PEO.INFORMATION123
              ,P_PEO_ATTRIBUTE14      => r_PEO.INFORMATION124
              ,P_PEO_ATTRIBUTE15      => r_PEO.INFORMATION125
              ,P_PEO_ATTRIBUTE16      => r_PEO.INFORMATION126
              ,P_PEO_ATTRIBUTE17      => r_PEO.INFORMATION127
              ,P_PEO_ATTRIBUTE18      => r_PEO.INFORMATION128
              ,P_PEO_ATTRIBUTE19      => r_PEO.INFORMATION129
              ,P_PEO_ATTRIBUTE2      => r_PEO.INFORMATION112
              ,P_PEO_ATTRIBUTE20      => r_PEO.INFORMATION130
              ,P_PEO_ATTRIBUTE21      => r_PEO.INFORMATION131
              ,P_PEO_ATTRIBUTE22      => r_PEO.INFORMATION132
              ,P_PEO_ATTRIBUTE23      => r_PEO.INFORMATION133
              ,P_PEO_ATTRIBUTE24      => r_PEO.INFORMATION134
              ,P_PEO_ATTRIBUTE25      => r_PEO.INFORMATION135
              ,P_PEO_ATTRIBUTE26      => r_PEO.INFORMATION136
              ,P_PEO_ATTRIBUTE27      => r_PEO.INFORMATION137
              ,P_PEO_ATTRIBUTE28      => r_PEO.INFORMATION138
              ,P_PEO_ATTRIBUTE29      => r_PEO.INFORMATION139
              ,P_PEO_ATTRIBUTE3      => r_PEO.INFORMATION113
              ,P_PEO_ATTRIBUTE30      => r_PEO.INFORMATION140
              ,P_PEO_ATTRIBUTE4      => r_PEO.INFORMATION114
              ,P_PEO_ATTRIBUTE5      => r_PEO.INFORMATION115
              ,P_PEO_ATTRIBUTE6      => r_PEO.INFORMATION116
              ,P_PEO_ATTRIBUTE7      => r_PEO.INFORMATION117
              ,P_PEO_ATTRIBUTE8      => r_PEO.INFORMATION118
              ,P_PEO_ATTRIBUTE9      => r_PEO.INFORMATION119
              ,P_PEO_ATTRIBUTE_CATEGORY      => r_PEO.INFORMATION110
              ,P_PGM_ID      => l_PGM_ID
              ,P_PLIP_ID      => l_PLIP_ID
              ,P_PL_ID      => l_PL_ID
              ,P_PRTN_EFF_END_DT_CD      => r_PEO.INFORMATION12
              ,P_PRTN_EFF_END_DT_RL      => l_PRTN_EFF_END_DT_RL
              ,P_PRTN_EFF_STRT_DT_CD      => r_PEO.INFORMATION11
              ,P_PRTN_EFF_STRT_DT_RL      => l_PRTN_EFF_STRT_DT_RL
              ,P_PRTN_OVRIDBL_FLAG      => r_PEO.INFORMATION19
              ,P_PTIP_ID      => l_PTIP_ID
              ,P_VRFY_FMLY_MMBR_CD      => r_PEO.INFORMATION18
              ,P_VRFY_FMLY_MMBR_RL      => l_VRFY_FMLY_MMBR_RL
              ,P_WAIT_PERD_DT_TO_USE_CD      => r_PEO.INFORMATION14
              ,P_WAIT_PERD_DT_TO_USE_RL      => l_WAIT_PERD_DT_TO_USE_RL
              ,P_WAIT_PERD_RL      => l_WAIT_PERD_RL
              ,P_WAIT_PERD_UOM      => r_PEO.INFORMATION13
             ,P_WAIT_PERD_VAL      => r_PEO.INFORMATION267
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_to_prte_rsn_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_TO_PRTE_RSN_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_PEO.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_TO_PRTE_RSN_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PEO_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_TO_PRTE_RSN_F UPDATE_ELIG_TO_PRTE_REASON ',30);
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_PEO.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_PEO.information3,
               p_effective_start_date  => r_PEO.information2,
               p_dml_operation         => r_PEO.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_TO_PRTE_RSN_ID   := r_PEO.information1;
             l_object_version_number := r_PEO.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           BEN_ELIG_TO_PRTE_REASON_API.UPDATE_ELIG_TO_PRTE_REASON(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ELIG_INELIG_CD      => r_PEO.INFORMATION21
             ,P_ELIG_TO_PRTE_RSN_ID      => l_elig_to_prte_rsn_id
             ,P_IGNR_PRTN_OVRID_FLAG      => r_PEO.INFORMATION20
             ,P_LER_ID      => l_LER_ID
             ,P_MX_POE_APLS_CD      => r_PEO.INFORMATION17
             ,P_MX_POE_DET_DT_CD      => r_PEO.INFORMATION16
             ,P_MX_POE_DET_DT_RL      => l_MX_POE_DET_DT_RL
             ,P_MX_POE_RL      => l_MX_POE_RL
             ,P_MX_POE_UOM      => r_PEO.INFORMATION15
             ,P_MX_POE_VAL      => r_PEO.INFORMATION269
             ,P_OIPL_ID      => l_OIPL_ID
             ,P_PEO_ATTRIBUTE1      => r_PEO.INFORMATION111
             ,P_PEO_ATTRIBUTE10      => r_PEO.INFORMATION120
             ,P_PEO_ATTRIBUTE11      => r_PEO.INFORMATION121
             ,P_PEO_ATTRIBUTE12      => r_PEO.INFORMATION122
             ,P_PEO_ATTRIBUTE13      => r_PEO.INFORMATION123
             ,P_PEO_ATTRIBUTE14      => r_PEO.INFORMATION124
             ,P_PEO_ATTRIBUTE15      => r_PEO.INFORMATION125
             ,P_PEO_ATTRIBUTE16      => r_PEO.INFORMATION126
             ,P_PEO_ATTRIBUTE17      => r_PEO.INFORMATION127
             ,P_PEO_ATTRIBUTE18      => r_PEO.INFORMATION128
             ,P_PEO_ATTRIBUTE19      => r_PEO.INFORMATION129
             ,P_PEO_ATTRIBUTE2      => r_PEO.INFORMATION112
             ,P_PEO_ATTRIBUTE20      => r_PEO.INFORMATION130
             ,P_PEO_ATTRIBUTE21      => r_PEO.INFORMATION131
             ,P_PEO_ATTRIBUTE22      => r_PEO.INFORMATION132
             ,P_PEO_ATTRIBUTE23      => r_PEO.INFORMATION133
             ,P_PEO_ATTRIBUTE24      => r_PEO.INFORMATION134
             ,P_PEO_ATTRIBUTE25      => r_PEO.INFORMATION135
             ,P_PEO_ATTRIBUTE26      => r_PEO.INFORMATION136
             ,P_PEO_ATTRIBUTE27      => r_PEO.INFORMATION137
             ,P_PEO_ATTRIBUTE28      => r_PEO.INFORMATION138
             ,P_PEO_ATTRIBUTE29      => r_PEO.INFORMATION139
             ,P_PEO_ATTRIBUTE3      => r_PEO.INFORMATION113
             ,P_PEO_ATTRIBUTE30      => r_PEO.INFORMATION140
             ,P_PEO_ATTRIBUTE4      => r_PEO.INFORMATION114
             ,P_PEO_ATTRIBUTE5      => r_PEO.INFORMATION115
             ,P_PEO_ATTRIBUTE6      => r_PEO.INFORMATION116
             ,P_PEO_ATTRIBUTE7      => r_PEO.INFORMATION117
             ,P_PEO_ATTRIBUTE8      => r_PEO.INFORMATION118
             ,P_PEO_ATTRIBUTE9      => r_PEO.INFORMATION119
             ,P_PEO_ATTRIBUTE_CATEGORY      => r_PEO.INFORMATION110
             ,P_PGM_ID      => l_PGM_ID
             ,P_PLIP_ID      => l_PLIP_ID
             ,P_PL_ID      => l_PL_ID
             ,P_PRTN_EFF_END_DT_CD      => r_PEO.INFORMATION12
             ,P_PRTN_EFF_END_DT_RL      => l_PRTN_EFF_END_DT_RL
             ,P_PRTN_EFF_STRT_DT_CD      => r_PEO.INFORMATION11
             ,P_PRTN_EFF_STRT_DT_RL      => l_PRTN_EFF_STRT_DT_RL
             ,P_PRTN_OVRIDBL_FLAG      => r_PEO.INFORMATION19
             ,P_PTIP_ID      => l_PTIP_ID
             ,P_VRFY_FMLY_MMBR_CD      => r_PEO.INFORMATION18
             ,P_VRFY_FMLY_MMBR_RL      => l_VRFY_FMLY_MMBR_RL
             ,P_WAIT_PERD_DT_TO_USE_CD      => r_PEO.INFORMATION14
             ,P_WAIT_PERD_DT_TO_USE_RL      => l_WAIT_PERD_DT_TO_USE_RL
             ,P_WAIT_PERD_RL      => l_WAIT_PERD_RL
             ,P_WAIT_PERD_UOM      => r_PEO.INFORMATION13
             ,P_WAIT_PERD_VAL      => r_PEO.INFORMATION267
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
            end if;  -- l_update
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_PEO.information3) then
             --
             BEN_ELIG_TO_PRTE_REASON_API.delete_ELIG_TO_PRTE_REASON(
                --
                p_validate                       => false
                ,p_elig_to_prte_rsn_id                   => l_elig_to_prte_rsn_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'PEO',r_peo.information5 );
     --
 end create_PEO_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_CWG_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_CWG_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_PL_ID  number;
   l_WKSHT_GRP_CD ben_cwb_wksht_grp.wksht_grp_cd%type;
   cursor c_unique_CWG(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_CWB_WKSHT_GRP
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_CWG_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_CWG(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_CWG_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     CWG.cwb_wksht_grp_id new_value
   from BEN_CWB_WKSHT_GRP CWG
   where
   CWG.PL_ID     = l_PL_ID  and
   CWG.WKSHT_GRP_CD = l_WKSHT_GRP_CD and
   CWG.business_group_id  = c_business_group_id
   and   CWG.cwb_wksht_grp_id  <> c_new_pk_id
                ;
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_CWG                     c_CWG%rowtype;
   l_cwb_wksht_grp_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_CWG_unique in c_unique_CWG('CWG') loop
     --
     hr_utility.set_location(' r_CWG_unique.table_route_id '||r_CWG_unique.table_route_id,10);
     hr_utility.set_location(' r_CWG_unique.information1 '||r_CWG_unique.information1,10);
     hr_utility.set_location( 'r_CWG_unique.information2 '||r_CWG_unique.information2,10);
     hr_utility.set_location( 'r_CWG_unique.information3 '||r_CWG_unique.information3,10);
     -- If reuse objects flag is 'Y' then check for the object in the target business group
     -- if found insert the record into PLSql table and exit the loop else try create the
     -- object in the target business group
     --
     l_object_found_in_target := false ;
     l_min_esd := null ;
     l_max_eed := null ;
     --
     open c_CWG(r_CWG_unique.table_route_id,
                r_CWG_unique.information1,
                r_CWG_unique.information2,
                r_CWG_unique.information3 ) ;
     --
     fetch c_CWG into r_CWG ;
     --
     close c_CWG ;
     --
     --UPD START
     --
     l_update := false;
     l_process_date := p_effective_date;
     l_dml_operation:= r_CWG_unique.dml_operation ;
     --UPD START
     --
     l_PL_ID := get_fk('PL_ID', r_CWG.INFORMATION261,l_dml_operation);
     l_WKSHT_GRP_CD := r_CWG.INFORMATION11;
     --UPD START
     --
     if l_dml_operation = 'UPDATE' then
       --
               l_update := true;
               if r_CWG_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'CWB_WKSHT_GRP_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'CWB_WKSHT_GRP_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_CWG_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_CWG_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_CWG_unique.table_route_id;
                  --
                  -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ; -- NEW
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
     --DOUBT             log_data('CWG',l_new_value,l_prefix || r_CWG_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               l_CWB_WKSHT_GRP_ID := r_CWG_unique.information1 ;
               l_object_version_number := r_CWG.information265 ;
               hr_utility.set_location( 'found record for update',10);
           --
     else
     --
     --UPD END
     if p_reuse_object_flag = 'Y' then
           -- cursor to find the object
           open c_find_CWG_in_target( r_CWG_unique.information2,l_max_eed,
                                 p_target_business_group_id, nvl(l_cwb_wksht_grp_id, -999)  ) ;
           fetch c_find_CWG_in_target into l_new_value ;
           if c_find_CWG_in_target%found then
             --
             if r_CWG_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'CWB_WKSHT_GRP_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'CWB_WKSHT_GRP_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_CWG_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_CWG_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                --

             end if ;
             --
             l_object_found_in_target := true ;
           end if;
           close c_find_CWG_in_target ;
         --
     end if ;
     --
     end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then
       --
       l_current_pk_id := r_CWG.information1;
       --
       hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
       hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
       --
       if l_current_pk_id =  l_prev_pk_id  then
         --
         l_first_rec := false ;
         --
       else
         --
         l_first_rec := true ;
         --
       end if ;
       --
       -- To avoid creating a child with out a parent
       --
       --
       if l_PL_ID is null then
          l_first_rec := false ;
       end if;
       --
       if l_first_rec and not l_update then
         -- Call Create routine.
         hr_utility.set_location(' BEN_CWB_WKSHT_GRP CREATE_CWB_WKSHT_GRP ',20);
         BEN_CWB_WKSHT_GRP_API.CREATE_CWB_WKSHT_GRP(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => NVL(ben_pd_copy_to_ben_one.g_copy_effective_date ,p_effective_date)
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             ,P_CWB_WKSHT_GRP_ID      => l_cwb_wksht_grp_id
             ,P_CWG_ATTRIBUTE1      => r_CWG.INFORMATION111
             ,P_CWG_ATTRIBUTE10      => r_CWG.INFORMATION120
             ,P_CWG_ATTRIBUTE11      => r_CWG.INFORMATION121
             ,P_CWG_ATTRIBUTE12      => r_CWG.INFORMATION122
             ,P_CWG_ATTRIBUTE13      => r_CWG.INFORMATION123
             ,P_CWG_ATTRIBUTE14      => r_CWG.INFORMATION124
             ,P_CWG_ATTRIBUTE15      => r_CWG.INFORMATION125
             ,P_CWG_ATTRIBUTE16      => r_CWG.INFORMATION126
             ,P_CWG_ATTRIBUTE17      => r_CWG.INFORMATION127
             ,P_CWG_ATTRIBUTE18      => r_CWG.INFORMATION128
             ,P_CWG_ATTRIBUTE19      => r_CWG.INFORMATION129
             ,P_CWG_ATTRIBUTE2      => r_CWG.INFORMATION112
             ,P_CWG_ATTRIBUTE20      => r_CWG.INFORMATION130
             ,P_CWG_ATTRIBUTE21      => r_CWG.INFORMATION131
             ,P_CWG_ATTRIBUTE22      => r_CWG.INFORMATION132
             ,P_CWG_ATTRIBUTE23      => r_CWG.INFORMATION133
             ,P_CWG_ATTRIBUTE24      => r_CWG.INFORMATION134
             ,P_CWG_ATTRIBUTE25      => r_CWG.INFORMATION135
             ,P_CWG_ATTRIBUTE26      => r_CWG.INFORMATION136
             ,P_CWG_ATTRIBUTE27      => r_CWG.INFORMATION137
             ,P_CWG_ATTRIBUTE28      => r_CWG.INFORMATION138
             ,P_CWG_ATTRIBUTE29      => r_CWG.INFORMATION139
             ,P_CWG_ATTRIBUTE3      => r_CWG.INFORMATION113
             ,P_CWG_ATTRIBUTE30      => r_CWG.INFORMATION140
             ,P_CWG_ATTRIBUTE4      => r_CWG.INFORMATION114
             ,P_CWG_ATTRIBUTE5      => r_CWG.INFORMATION115
             ,P_CWG_ATTRIBUTE6      => r_CWG.INFORMATION116
             ,P_CWG_ATTRIBUTE7      => r_CWG.INFORMATION117
             ,P_CWG_ATTRIBUTE8      => r_CWG.INFORMATION118
             ,P_CWG_ATTRIBUTE9      => r_CWG.INFORMATION119
             ,P_CWG_ATTRIBUTE_CATEGORY      => r_CWG.INFORMATION110
             ,P_LABEL      => r_CWG.INFORMATION141
             ,P_ORDR_NUM      => r_CWG.INFORMATION260
             ,P_PL_ID      => l_PL_ID
             ,P_WKSHT_GRP_CD      => r_CWG.INFORMATION11
             ,P_HIDDEN_CD         => r_CWG.INFORMATION12
             ,P_STATUS_CD         => r_CWG.INFORMATION13
   --
             --
             ,P_OBJECT_VERSION_NUMBER =>        l_object_version_number
         );
         -- insert the table_name,old_pk_id,new_pk_id into a plsql record
         -- Update all relevent cer records with new pk_id
         hr_utility.set_location('Before plsql table ',222);
         hr_utility.set_location('new_value id '||l_cwb_wksht_grp_id,222);
         BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'CWB_WKSHT_GRP_ID' ;
         BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_CWG.information1 ;
         BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_CWB_WKSHT_GRP_ID ;
         BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
         BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_CWG_unique.table_route_id;
         hr_utility.set_location('After plsql table ',222);
         --
         -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
         --
         BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
         --
         elsif l_update then
          BEN_CWB_WKSHT_GRP_API.UPDATE_CWB_WKSHT_GRP(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => NVL(ben_pd_copy_to_ben_one.g_copy_effective_date ,p_effective_date)
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             ,P_CWB_WKSHT_GRP_ID      => l_cwb_wksht_grp_id
             ,P_CWG_ATTRIBUTE1      => r_CWG.INFORMATION111
             ,P_CWG_ATTRIBUTE10      => r_CWG.INFORMATION120
             ,P_CWG_ATTRIBUTE11      => r_CWG.INFORMATION121
             ,P_CWG_ATTRIBUTE12      => r_CWG.INFORMATION122
             ,P_CWG_ATTRIBUTE13      => r_CWG.INFORMATION123
             ,P_CWG_ATTRIBUTE14      => r_CWG.INFORMATION124
             ,P_CWG_ATTRIBUTE15      => r_CWG.INFORMATION125
             ,P_CWG_ATTRIBUTE16      => r_CWG.INFORMATION126
             ,P_CWG_ATTRIBUTE17      => r_CWG.INFORMATION127
             ,P_CWG_ATTRIBUTE18      => r_CWG.INFORMATION128
             ,P_CWG_ATTRIBUTE19      => r_CWG.INFORMATION129
             ,P_CWG_ATTRIBUTE2      => r_CWG.INFORMATION112
             ,P_CWG_ATTRIBUTE20      => r_CWG.INFORMATION130
             ,P_CWG_ATTRIBUTE21      => r_CWG.INFORMATION131
             ,P_CWG_ATTRIBUTE22      => r_CWG.INFORMATION132
             ,P_CWG_ATTRIBUTE23      => r_CWG.INFORMATION133
             ,P_CWG_ATTRIBUTE24      => r_CWG.INFORMATION134
             ,P_CWG_ATTRIBUTE25      => r_CWG.INFORMATION135
             ,P_CWG_ATTRIBUTE26      => r_CWG.INFORMATION136
             ,P_CWG_ATTRIBUTE27      => r_CWG.INFORMATION137
             ,P_CWG_ATTRIBUTE28      => r_CWG.INFORMATION138
             ,P_CWG_ATTRIBUTE29      => r_CWG.INFORMATION139
             ,P_CWG_ATTRIBUTE3      => r_CWG.INFORMATION113
             ,P_CWG_ATTRIBUTE30      => r_CWG.INFORMATION140
             ,P_CWG_ATTRIBUTE4      => r_CWG.INFORMATION114
             ,P_CWG_ATTRIBUTE5      => r_CWG.INFORMATION115
             ,P_CWG_ATTRIBUTE6      => r_CWG.INFORMATION116
             ,P_CWG_ATTRIBUTE7      => r_CWG.INFORMATION117
             ,P_CWG_ATTRIBUTE8      => r_CWG.INFORMATION118
             ,P_CWG_ATTRIBUTE9      => r_CWG.INFORMATION119
             ,P_CWG_ATTRIBUTE_CATEGORY      => r_CWG.INFORMATION110
             ,P_LABEL      => r_CWG.INFORMATION141
             ,P_ORDR_NUM      => r_CWG.INFORMATION260
             ,P_PL_ID      => l_PL_ID
             ,P_WKSHT_GRP_CD      => r_CWG.INFORMATION11
             ,P_HIDDEN_CD         => r_CWG.INFORMATION12
             ,P_STATUS_CD         => r_CWG.INFORMATION13
   --
             --
             ,P_OBJECT_VERSION_NUMBER =>        l_object_version_number
         );
       end if;
       --
       l_prev_pk_id := l_current_pk_id ;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'CWG',r_cwg.information5 );
     --
 end create_CWG_rows;

  ---------------------------------------------------------------
     ----------------------< create_CRI_rows >-----------------------
     ---------------------------------------------------------------
     --
     procedure create_CRI_rows
     (
           p_validate                       in  number     default 0
          ,p_copy_entity_txn_id             in  number
          ,p_effective_date                 in  date
          ,p_reuse_object_flag              in  varchar2  default null
     ) is
     --
     cursor c_unique_CRI(l_table_alias varchar2) is
     select distinct cpe.information11,
       cpe.information12,
       cpe.information13,
       cpe.INFORMATION14,
       cpe.table_route_id,dml_operation,cpe.datetrack_mode
     from ben_copy_entity_results cpe,
          pqh_table_route tr
     where cpe.copy_entity_txn_id = p_copy_entity_txn_id
     and   cpe.table_route_id     = tr.table_route_id
     -- and   tr.where_clause        = l_BEN_AGE_FCTR
     and tr.table_alias = l_table_alias
     and   cpe.number_of_copies   = 1 --ADDITION
     group by cpe.information11,cpe.information12,cpe.information13, cpe.INFORMATION14, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information11, information12; --added for bug: 5151945 (changed from
                                          --1 to 11 by sshetty)

     --
     --

     cursor c_CRI(c_table_route_id  number,
		  c_information11 varchar2,
		  c_information12 varchar2,
		  c_information13 varchar2,
		  c_information14 varchar2
)  is
     select
       cpe.*
     from ben_copy_entity_results cpe
     where cpe.copy_entity_txn_id = p_copy_entity_txn_id
     and   cpe.table_route_id     = c_table_route_id
     and   cpe.information11       = c_information11
     and   cpe.information12       = c_information12
     and   cpe.information13       = c_information13
     and   cpe.information14       = c_information14
     and rownum = 1 ;
     -- Date Track target record


     cursor c_find_CRI_in_target( c_new_information11 varchar2,
				  c_new_information12 varchar2,
				  c_new_information13 varchar2,
				  c_new_information14 varchar2) is
    select
      CRI.REGION_CODE ,cri.CUSTOM_KEY ,cri.CUSTOM_TYPE ,cri.item_name ,cri.label
     from BEN_CUSTOM_REGION_ITEMS CRI
     where CRI.region_code  = c_new_information11
     and   CRI.CUSTOM_KEY  = c_new_information12
     and   CRI.CUSTOM_TYPE  = c_new_information13
     and   CRI.item_name  = c_new_information14;

     --
     --
     l_update                  boolean      := false ;
     l_process_date            date;
     l_debug_item_name  ben_custom_region_items.item_name%type;
     l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
     r_find_CRI_in_target  c_find_CRI_in_target%rowtype;
     r_CRI c_CRI%rowtype;
     --
     --UPD END

     l_object_version_number   number ;
     l_object_found_in_target  boolean := false ;
     l_custom_key              ben_custom_region_items.custom_key%type;
     l_fk_cwb_wksht_grp_id  ben_cwb_wksht_grp.cwb_wksht_grp_id%type;
     --
   begin

     for r_CRI_unique in c_unique_CRI('CRI') loop
       --
       hr_utility.set_location(' r_CRI_unique.table_route_id '||r_CRI_unique.table_route_id,10);
       hr_utility.set_location(' r_CRI_unique.information11 '||r_CRI_unique.information11,10);
       hr_utility.set_location( 'r_CRI_unique.information12 '||r_CRI_unique.information12,10);
       hr_utility.set_location( 'r_CRI_unique.information13 '||r_CRI_unique.information13,10);
       hr_utility.set_location( 'r_CRI_unique.information14 '||r_CRI_unique.information14,10);

	-- AS the Only operations that are performed on the table
	-- BEN_CUSTOM_REGION_ITEMS are REUSE/INSERT we need not worry about t
	-- the l_dml_operation.

	-- We first check for the presence of any BEN_CUSTOM_REGION_ITEMS record
	-- based on the target cwb_wksht_grp_id and if any records are found
	-- we reuse them or we create new records as seen in the CPE table

         l_dml_operation := r_CRI_unique.dml_operation ;
	 l_debug_item_name  :=  r_CRI_unique.information13;

         --
	l_fk_cwb_wksht_grp_id := get_fk('CWB_WKSHT_GRP_ID', r_CRI_unique.INFORMATION12,l_dml_operation);

	-- Fetch the new fk cwb_wksht_grp_id for the target business group.

	hr_utility.set_location('source cwb_wksht_grp_id '|| r_CRI_unique.INFORMATION12 || ' target cwb_wksht_grp_id ' || l_fk_cwb_wksht_grp_id , 20);
	hr_utility.set_location('l_dml_operation '|| l_dml_operation || ' p_reuse_object_flag ' || p_reuse_object_flag, 20);



	open c_find_CRI_in_target(r_CRI_unique.information11,
					to_char(l_fk_cwb_wksht_grp_id),
					r_CRI_unique.information13,
					r_CRI_unique.information14);

        fetch c_find_CRI_in_target into r_find_CRI_in_target ;

	if c_find_CRI_in_target%found then

		hr_utility.set_location(' r_find_CRI_in_target.REGION_CODE '  || r_find_CRI_in_target.REGION_CODE,20 );
		hr_utility.set_location(' r_find_CRI_in_target.CUSTOM_KEY   ' || r_find_CRI_in_target.CUSTOM_KEY ,20 );
		hr_utility.set_location( 'r_find_CRI_in_target.CUSTOM_TYPE  ' || r_find_CRI_in_target.CUSTOM_TYPE,20 );
		hr_utility.set_location( 'r_find_CRI_in_target.ITEM_NAME    ' || r_find_CRI_in_target.ITEM_NAME  ,20 );
		hr_utility.set_location( 'r_find_CRI_in_target.LABEL        ' || r_find_CRI_in_target.LABEL      ,20 );
		hr_utility.set_location( 'RKG A record of ben_custom_region_items',202);
		hr_utility.set_location( 'with the same cwb_wksht_grp_id as custom_key already exists and hence reused. ',202);

		--8985766
		hr_utility.set_location('Before plsql table ',111);
	        BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'REUSED';
		BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_CRI_unique.table_route_id;
		BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
	        hr_utility.set_location('After plsql table ',111);
		--8985766

		-- As the record in found in the target , reuse the record
	else
		-- or create the new record by querying the full record from CPE

		open c_CRI(r_CRI_unique.table_route_id,
	        r_CRI_unique.information11,
	        r_CRI_unique.information12,
		r_CRI_unique.information13,
		r_CRI_unique.information14) ;
			--
			    fetch c_CRI into r_CRI ;
			--
		close c_CRI ;
			     --

		insert into BEN_CUSTOM_REGION_ITEMS(
				REGION_CODE           ,
				CUSTOM_KEY            ,
				CUSTOM_TYPE           ,
				ITEM_NAME             ,
				DISPLAY_FLAG          ,
				LABEL                 ,
				ORDR_NUM              ,
				LAST_UPDATE_DATE      ,
				CREATION_DATE         ,
				OBJECT_VERSION_NUMBER ,
				UPDATE_ATTR           ,
				MONETARY              )
				values
				(r_CRI.information11,
				 to_char(l_fk_cwb_wksht_grp_id),
				 r_CRI.information13,
				 r_CRI.information14,
				 r_CRI.information15,
				 r_CRI.information141,
				 r_CRI.information266,
				 sysdate,
				 sysdate,
				 1,
				 r_CRI.information16,
				 r_CRI.information17);
		--8985766
	        hr_utility.set_location('Before plsql table ',222);
	        BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
	 	BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_CRI_unique.table_route_id;
		BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
	        hr_utility.set_location('After plsql table ',222);
		--8985766

	end if;

	close c_find_CRI_in_target;


	end loop;

     --
   exception when others then
     --
       BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'CRI' , l_debug_item_name) ;
     --

   end create_CRI_rows;

   ---------------------------------------------------------------
   ----------------------< create_PCP_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_PCP_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_PL_ID  number;
   cursor c_unique_PCP(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_PL_PCP
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_PCP_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_PCP(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_PCP_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
   PCP.pl_pcp_id new_value
   from BEN_PL_PCP PCP
   where
   PCP.PL_ID              = l_PL_ID  and
   PCP.business_group_id  = c_business_group_id
   and   PCP.pl_pcp_id  <> c_new_pk_id
                ;

   --cursor to check the row exist in the ben_popl_org_f table.
   cursor c_exists_in_popl_org(c_pl_id in number) is
   select 'x'
   from   ben_popl_org_f
   Where  pl_id = c_pl_id;
   --
   l_dummy    varchar2(1);
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_PCP                     c_PCP%rowtype;
   l_pl_pcp_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_parent_effective_start_date date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_PCP_unique in c_unique_PCP('PCP') loop
     --
     hr_utility.set_location(' r_PCP_unique.table_route_id '||r_PCP_unique.table_route_id,10);
     hr_utility.set_location(' r_PCP_unique.information1 '||r_PCP_unique.information1,10);
     hr_utility.set_location( 'r_PCP_unique.information2 '||r_PCP_unique.information2,10);
     hr_utility.set_location( 'r_PCP_unique.information3 '||r_PCP_unique.information3,10);
     -- If reuse objects flag is 'Y' then check for the object in the target business group
     -- if found insert the record into PLSql table and exit the loop else try create the
     -- object in the target business group
     --
     l_object_found_in_target := false ;
     l_min_esd := null ;
     l_max_eed := null ;
     --
     open c_PCP(r_PCP_unique.table_route_id,
                r_PCP_unique.information1,
                r_PCP_unique.information2,
                r_PCP_unique.information3 ) ;
     --
     fetch c_PCP into r_PCP ;
     --
     close c_PCP ;
     --
     --UPD START
       --
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_PCP_unique.dml_operation ;
       --
       --UPD END
     l_PL_ID := get_fk('PL_ID', r_PCP.INFORMATION261,l_dml_operation);
     --

     -- If PCP_RPSTRY_FLAG (From Repository flag ) = 'Y' then
     -- Check if a row exists in the ben_popl_org_f table for the Plan
     -- If no row found then set PCP_RPSTRY_FLAG to 'N'
     -- Also set Radius, Radius Warning and Radius UOM to null as
     --  these cannot have a value if the Repository flag is not selected

     if r_PCP.information14 = 'Y' then
         open c_exists_in_popl_org(l_PL_ID);
         fetch c_exists_in_popl_org into l_dummy;
         if c_exists_in_popl_org%notfound then
           r_PCP.information14 := 'N';  -- Repository flag
           r_PCP.information293 := null; -- Radius
           r_PCP.information16 := null; --  Radius UOM
           r_PCP.information17 := 'N'; --   Radius Warning
         end if;
         close c_exists_in_popl_org;
     end if;

     if l_PL_ID is not null then -- Do not create if parent record does not exist

         --UPD START
     --
     if l_dml_operation = 'UPDATE' then
       --
               l_update := true;
               if r_PCP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'PL_PCP_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PL_PCP_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_PCP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_PCP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PCP_unique.table_route_id;
                  --
                  -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ; -- NEW
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
    --DOUBT              log_data('PCP',l_new_value,l_prefix || r_PCP_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               l_PL_PCP_ID := r_PCP_unique.information1 ;
               l_object_version_number := r_PCP.information265 ;
               hr_utility.set_location( 'found record for update',10);
           --
     else
     --
     --UPD END
       if p_reuse_object_flag = 'Y' then
           -- cursor to find the object
           open c_find_PCP_in_target( r_PCP_unique.information2,l_max_eed,
                                 p_target_business_group_id, nvl(l_pl_pcp_id, -999)  ) ;
           fetch c_find_PCP_in_target into l_new_value ;
           if c_find_PCP_in_target%found then
             --
             if r_PCP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'PL_PCP_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PL_PCP_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_PCP_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PCP_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
           end if;
           close c_find_PCP_in_target ;
         --
       end if ;
       --
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then
         --
         l_current_pk_id := r_PCP.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_parent_effective_start_date := r_PCP.information10;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null ) then
           if l_parent_effective_start_date is null then
             l_parent_effective_start_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
           elsif l_parent_effective_start_date < ben_pd_copy_to_ben_one.g_copy_effective_date  then
             l_parent_effective_start_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
           end if;
         end if;
         --
         -- To avoid creating a child with out parent
         --
         if l_PL_ID is null then
            l_first_rec:=false;
         end if;
         --
         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_PL_PCP CREATE_PL_PRMRY_CARE_PRVDR ',20);
           BEN_PL_PRMRY_CARE_PRVDR_API.CREATE_PL_PRMRY_CARE_PRVDR(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => NVL(l_parent_effective_start_date,p_effective_date)
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_PCP_ATTRIBUTE1      => r_PCP.INFORMATION111
                         ,P_PCP_ATTRIBUTE10      => r_PCP.INFORMATION120
                         ,P_PCP_ATTRIBUTE11      => r_PCP.INFORMATION121
                         ,P_PCP_ATTRIBUTE12      => r_PCP.INFORMATION122
                         ,P_PCP_ATTRIBUTE13      => r_PCP.INFORMATION123
                         ,P_PCP_ATTRIBUTE14      => r_PCP.INFORMATION124
                         ,P_PCP_ATTRIBUTE15      => r_PCP.INFORMATION125
                         ,P_PCP_ATTRIBUTE16      => r_PCP.INFORMATION126
                         ,P_PCP_ATTRIBUTE17      => r_PCP.INFORMATION127
                         ,P_PCP_ATTRIBUTE18      => r_PCP.INFORMATION128
                         ,P_PCP_ATTRIBUTE19      => r_PCP.INFORMATION129
                         ,P_PCP_ATTRIBUTE2      => r_PCP.INFORMATION112
                         ,P_PCP_ATTRIBUTE20      => r_PCP.INFORMATION130
                         ,P_PCP_ATTRIBUTE21      => r_PCP.INFORMATION131
                         ,P_PCP_ATTRIBUTE22      => r_PCP.INFORMATION132
                         ,P_PCP_ATTRIBUTE23      => r_PCP.INFORMATION133
                         ,P_PCP_ATTRIBUTE24      => r_PCP.INFORMATION134
                         ,P_PCP_ATTRIBUTE25      => r_PCP.INFORMATION135
                         ,P_PCP_ATTRIBUTE26      => r_PCP.INFORMATION136
                         ,P_PCP_ATTRIBUTE27      => r_PCP.INFORMATION137
                         ,P_PCP_ATTRIBUTE28      => r_PCP.INFORMATION138
                         ,P_PCP_ATTRIBUTE29      => r_PCP.INFORMATION139
                         ,P_PCP_ATTRIBUTE3      => r_PCP.INFORMATION113
                         ,P_PCP_ATTRIBUTE30      => r_PCP.INFORMATION140
                         ,P_PCP_ATTRIBUTE4      => r_PCP.INFORMATION114
                         ,P_PCP_ATTRIBUTE5      => r_PCP.INFORMATION115
                         ,P_PCP_ATTRIBUTE6      => r_PCP.INFORMATION116
                         ,P_PCP_ATTRIBUTE7      => r_PCP.INFORMATION117
                         ,P_PCP_ATTRIBUTE8      => r_PCP.INFORMATION118
                         ,P_PCP_ATTRIBUTE9      => r_PCP.INFORMATION119
                         ,P_PCP_ATTRIBUTE_CATEGORY      => r_PCP.INFORMATION110
                         ,P_PCP_CAN_KEEP_FLAG      => r_PCP.INFORMATION15
                         ,P_PCP_DPNT_DSGN_CD      => r_PCP.INFORMATION13
                         ,P_PCP_DSGN_CD      => r_PCP.INFORMATION12
                         ,P_PCP_NUM_CHGS      => r_PCP.INFORMATION294
                         ,P_PCP_NUM_CHGS_UOM      => r_PCP.INFORMATION18
                         ,P_PCP_RADIUS      => r_PCP.INFORMATION293
                         ,P_PCP_RADIUS_UOM      => r_PCP.INFORMATION16
                         ,P_PCP_RADIUS_WARN_FLAG      => r_PCP.INFORMATION17
                         ,P_PCP_RPSTRY_FLAG      => r_PCP.INFORMATION14
                         ,P_PCP_STRT_DT_CD      => r_PCP.INFORMATION11
                         ,P_PL_ID      => l_PL_ID
             ,P_PL_PCP_ID      => l_pl_pcp_id
             --
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_pl_pcp_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'PL_PCP_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_PCP.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_PL_PCP_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PCP_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
           elsif l_update then
             BEN_PL_PRMRY_CARE_PRVDR_API.UPDATE_PL_PRMRY_CARE_PRVDR(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => NVL(l_parent_effective_start_date,p_effective_date)
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_PCP_ATTRIBUTE1      => r_PCP.INFORMATION111
                         ,P_PCP_ATTRIBUTE10      => r_PCP.INFORMATION120
                         ,P_PCP_ATTRIBUTE11      => r_PCP.INFORMATION121
                         ,P_PCP_ATTRIBUTE12      => r_PCP.INFORMATION122
                         ,P_PCP_ATTRIBUTE13      => r_PCP.INFORMATION123
                         ,P_PCP_ATTRIBUTE14      => r_PCP.INFORMATION124
                         ,P_PCP_ATTRIBUTE15      => r_PCP.INFORMATION125
                         ,P_PCP_ATTRIBUTE16      => r_PCP.INFORMATION126
                         ,P_PCP_ATTRIBUTE17      => r_PCP.INFORMATION127
                         ,P_PCP_ATTRIBUTE18      => r_PCP.INFORMATION128
                         ,P_PCP_ATTRIBUTE19      => r_PCP.INFORMATION129
                         ,P_PCP_ATTRIBUTE2      => r_PCP.INFORMATION112
                         ,P_PCP_ATTRIBUTE20      => r_PCP.INFORMATION130
                         ,P_PCP_ATTRIBUTE21      => r_PCP.INFORMATION131
                         ,P_PCP_ATTRIBUTE22      => r_PCP.INFORMATION132
                         ,P_PCP_ATTRIBUTE23      => r_PCP.INFORMATION133
                         ,P_PCP_ATTRIBUTE24      => r_PCP.INFORMATION134
                         ,P_PCP_ATTRIBUTE25      => r_PCP.INFORMATION135
                         ,P_PCP_ATTRIBUTE26      => r_PCP.INFORMATION136
                         ,P_PCP_ATTRIBUTE27      => r_PCP.INFORMATION137
                         ,P_PCP_ATTRIBUTE28      => r_PCP.INFORMATION138
                         ,P_PCP_ATTRIBUTE29      => r_PCP.INFORMATION139
                         ,P_PCP_ATTRIBUTE3      => r_PCP.INFORMATION113
                         ,P_PCP_ATTRIBUTE30      => r_PCP.INFORMATION140
                         ,P_PCP_ATTRIBUTE4      => r_PCP.INFORMATION114
                         ,P_PCP_ATTRIBUTE5      => r_PCP.INFORMATION115
                         ,P_PCP_ATTRIBUTE6      => r_PCP.INFORMATION116
                         ,P_PCP_ATTRIBUTE7      => r_PCP.INFORMATION117
                         ,P_PCP_ATTRIBUTE8      => r_PCP.INFORMATION118
                         ,P_PCP_ATTRIBUTE9      => r_PCP.INFORMATION119
                         ,P_PCP_ATTRIBUTE_CATEGORY      => r_PCP.INFORMATION110
                         ,P_PCP_CAN_KEEP_FLAG      => r_PCP.INFORMATION15
                         ,P_PCP_DPNT_DSGN_CD      => r_PCP.INFORMATION13
                         ,P_PCP_DSGN_CD      => r_PCP.INFORMATION12
                         ,P_PCP_NUM_CHGS      => r_PCP.INFORMATION294
                         ,P_PCP_NUM_CHGS_UOM      => r_PCP.INFORMATION18
                         ,P_PCP_RADIUS      => r_PCP.INFORMATION293
                         ,P_PCP_RADIUS_UOM      => r_PCP.INFORMATION16
                         ,P_PCP_RADIUS_WARN_FLAG      => r_PCP.INFORMATION17
                         ,P_PCP_RPSTRY_FLAG      => r_PCP.INFORMATION14
                         ,P_PCP_STRT_DT_CD      => r_PCP.INFORMATION11
                         ,P_PL_ID      => l_PL_ID
             ,P_PL_PCP_ID      => l_pl_pcp_id
             --
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'PCP',r_pcp.information5 );
     --
 end create_PCP_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_COP_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_COP_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ACTL_PREM_ID  number;
   l_AUTO_ENRT_MTHD_RL  number;
   l_DFLT_ENRT_DET_RL  number;
   l_ENRT_RL  number;
   l_MNDTRY_RL  number;
   l_OPT_ID  number;
   l_PL_ID  number;
   l_POSTELCN_EDIT_RL  number;
   l_RQD_PERD_ENRT_NENRT_RL  number;
   l_VRFY_FMLY_MMBR_RL  number;
   cursor c_unique_COP(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
  ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_OIPL_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   ORDER BY cpe.information1,cpe.information2; -- 5122908. Records need to be created ordered on effective date.
   --
   --
   cursor c_COP_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_COP(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_COP_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     COP.oipl_id new_value
   from BEN_OIPL_F COP
   where
   COP.OPT_ID     = l_OPT_ID  and
   COP.PL_ID     = l_PL_ID  and
   nvl(COP.ACTL_PREM_ID,-999)     = nvl(l_ACTL_PREM_ID,-999)  and
   COP.business_group_id  = c_business_group_id
   and   COP.oipl_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*
   and exists ( select null
                from BEN_OIPL_F COP1
                where
                COP1.OPT_ID     = l_OPT_ID  and
                COP1.PL_ID     = l_PL_ID  and
                nvl(COP1.ACTL_PREM_ID,-999)     = nvl(l_ACTL_PREM_ID,-999)  and
                COP1.business_group_id  = c_business_group_id
                and   COP1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_OIPL_F COP2
                where
                COP2.OPT_ID     = l_OPT_ID  and
                COP2.PL_ID     = l_PL_ID  and
                nvl(COP2.ACTL_PREM_ID,-999)     = nvl(l_ACTL_PREM_ID,-999)  and
                COP2.business_group_id  = c_business_group_id
                and   COP2.effective_end_date >= c_effective_end_date )
                ;
*/
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_COP                     c_COP%rowtype;
   l_oipl_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_COP_unique in c_unique_COP('COP') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_COP_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_COP_unique.table_route_id '||r_COP_unique.table_route_id,10);
       hr_utility.set_location(' r_COP_unique.information1 '||r_COP_unique.information1,10);
       hr_utility.set_location( 'r_COP_unique.information2 '||r_COP_unique.information2,10);
       hr_utility.set_location( 'r_COP_unique.information3 '||r_COP_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
             open c_COP(r_COP_unique.table_route_id,
                r_COP_unique.information1,
                r_COP_unique.information2,
                r_COP_unique.information3 ) ;
       --
       fetch c_COP into r_COP ;
       --
       close c_COP ;
       --
       l_dml_operation:= r_COP_unique.dml_operation ;
       l_ACTL_PREM_ID := get_fk('ACTL_PREM_ID', r_COP.INFORMATION250,l_dml_operation );
       l_AUTO_ENRT_MTHD_RL := get_fk('FORMULA_ID', r_COP.INFORMATION264,l_dml_operation );
       l_DFLT_ENRT_DET_RL := get_fk('FORMULA_ID', r_COP.INFORMATION266,l_dml_operation );
       l_ENRT_RL := get_fk('FORMULA_ID', r_COP.INFORMATION257,l_dml_operation );
       l_MNDTRY_RL := get_fk('FORMULA_ID', r_COP.INFORMATION268,l_dml_operation );
       l_OPT_ID := get_fk('OPT_ID', r_COP.INFORMATION247,l_dml_operation );
       l_PL_ID := get_fk('PL_ID', r_COP.INFORMATION261,l_dml_operation );
       l_POSTELCN_EDIT_RL := get_fk('FORMULA_ID', r_COP.INFORMATION269,l_dml_operation );
       l_RQD_PERD_ENRT_NENRT_RL := get_fk('FORMULA_ID', r_COP.INFORMATION267,l_dml_operation );
       l_VRFY_FMLY_MMBR_RL := get_fk('FORMULA_ID', r_COP.INFORMATION270,l_dml_operation );
       --
       l_update := false;
       l_process_date := p_effective_date;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_COP_unique.information2 and r_COP_unique.information3 then
               l_update := true;
               if r_COP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'OIPL_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'OIPL_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_COP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_COP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_COP_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
    --DOUBT              log_data('COP',l_new_value,l_prefix || r_COP_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_COP_min_max_dates(r_COP_unique.table_route_id, r_COP_unique.information1 ) ;
       fetch c_COP_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_COP_unique.information2);
/*       open c_COP(r_COP_unique.table_route_id,
                r_COP_unique.information1,
                r_COP_unique.information2,
                r_COP_unique.information3 ) ;
       --
       fetch c_COP into r_COP ;
       --
       close c_COP ;   */
       --


       if p_reuse_object_flag = 'Y' then
         if c_COP_min_max_dates%found then
           -- cursor to find the object
           open c_find_COP_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_oipl_id, -999)  ) ;
           fetch c_find_COP_in_target into l_new_value ;
           if c_find_COP_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_OIPL_F',
                  p_base_key_column => 'OIPL_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_COP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'OIPL_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'OIPL_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_COP_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_COP_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_COP_in_target ;
         --
         end if;
       end if ;
       --
       close c_COP_min_max_dates ;
       end if; --if p_dml_operation
                       --
                       if not l_object_found_in_target OR l_update  then
         --
         l_current_pk_id := r_COP.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_COP.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_OIPL_F CREATE_OPTION_IN_PLAN ',20);
           BEN_OPTION_IN_PLAN_API.CREATE_OPTION_IN_PLAN(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
            ,P_ACTL_PREM_ID      => l_ACTL_PREM_ID
                         ,P_AUTO_ENRT_FLAG      => r_COP.INFORMATION25
                         ,P_AUTO_ENRT_MTHD_RL      => l_AUTO_ENRT_MTHD_RL
                         ,P_COP_ATTRIBUTE1      => r_COP.INFORMATION111
                         ,P_COP_ATTRIBUTE10      => r_COP.INFORMATION120
                         ,P_COP_ATTRIBUTE11      => r_COP.INFORMATION121
                         ,P_COP_ATTRIBUTE12      => r_COP.INFORMATION122
                         ,P_COP_ATTRIBUTE13      => r_COP.INFORMATION123
                         ,P_COP_ATTRIBUTE14      => r_COP.INFORMATION124
                         ,P_COP_ATTRIBUTE15      => r_COP.INFORMATION125
                         ,P_COP_ATTRIBUTE16      => r_COP.INFORMATION126
                         ,P_COP_ATTRIBUTE17      => r_COP.INFORMATION127
                         ,P_COP_ATTRIBUTE18      => r_COP.INFORMATION128
                         ,P_COP_ATTRIBUTE19      => r_COP.INFORMATION129
                         ,P_COP_ATTRIBUTE2      => r_COP.INFORMATION112
                         ,P_COP_ATTRIBUTE20      => r_COP.INFORMATION130
                         ,P_COP_ATTRIBUTE21      => r_COP.INFORMATION131
                         ,P_COP_ATTRIBUTE22      => r_COP.INFORMATION132
                         ,P_COP_ATTRIBUTE23      => r_COP.INFORMATION133
                         ,P_COP_ATTRIBUTE24      => r_COP.INFORMATION134
                         ,P_COP_ATTRIBUTE25      => r_COP.INFORMATION135
                         ,P_COP_ATTRIBUTE26      => r_COP.INFORMATION136
                         ,P_COP_ATTRIBUTE27      => r_COP.INFORMATION137
                         ,P_COP_ATTRIBUTE28      => r_COP.INFORMATION138
                         ,P_COP_ATTRIBUTE29      => r_COP.INFORMATION139
                         ,P_COP_ATTRIBUTE3      => r_COP.INFORMATION113
                         ,P_COP_ATTRIBUTE30      => r_COP.INFORMATION140
                         ,P_COP_ATTRIBUTE4      => r_COP.INFORMATION114
                         ,P_COP_ATTRIBUTE5      => r_COP.INFORMATION115
                         ,P_COP_ATTRIBUTE6      => r_COP.INFORMATION116
                         ,P_COP_ATTRIBUTE7      => r_COP.INFORMATION117
                         ,P_COP_ATTRIBUTE8      => r_COP.INFORMATION118
                         ,P_COP_ATTRIBUTE9      => r_COP.INFORMATION119
                         ,P_COP_ATTRIBUTE_CATEGORY      => r_COP.INFORMATION110
                         ,P_DFLT_ENRT_CD      => r_COP.INFORMATION26
                         ,P_DFLT_ENRT_DET_RL      => l_DFLT_ENRT_DET_RL
                         ,P_DFLT_FLAG      => r_COP.INFORMATION18
                         ,P_DRVBL_FCTR_APLS_RTS_FLAG      => r_COP.INFORMATION24
                         ,P_DRVBL_FCTR_PRTN_ELIG_FLAG      => r_COP.INFORMATION22
                         ,P_ELIG_APLS_FLAG      => r_COP.INFORMATION20
                         ,P_ENRT_CD      => r_COP.INFORMATION14
                         ,P_ENRT_RL      => l_ENRT_RL
                         ,P_HIDDEN_FLAG      => r_COP.INFORMATION13
                         ,P_IVR_IDENT      => r_COP.INFORMATION141
                         ,P_MNDTRY_FLAG      => r_COP.INFORMATION17
                         ,P_MNDTRY_RL      => l_MNDTRY_RL
                         ,P_OIPL_ID      => l_oipl_id
                         ,P_OIPL_STAT_CD      => r_COP.INFORMATION19
                         ,P_OPT_ID      => l_OPT_ID
                         ,P_ORDR_NUM      => r_COP.INFORMATION263
                         ,P_PCP_DPNT_DSGN_CD      => r_COP.INFORMATION16
                         ,P_PCP_DSGN_CD      => r_COP.INFORMATION15
                         ,P_PER_CVRD_CD      => r_COP.INFORMATION27
                         ,P_PL_ID      => l_PL_ID
                         ,P_POSTELCN_EDIT_RL      => l_POSTELCN_EDIT_RL
                         ,P_PRTN_ELIG_OVRID_ALWD_FLAG      => r_COP.INFORMATION23
                         ,P_RQD_PERD_ENRT_NENRT_RL      => l_RQD_PERD_ENRT_NENRT_RL
                         ,P_RQD_PERD_ENRT_NENRT_UOM      => r_COP.INFORMATION29
                         ,P_RQD_PERD_ENRT_NENRT_VAL      => r_COP.INFORMATION293
                         ,P_SHORT_CODE      => r_COP.INFORMATION11
                         ,P_SHORT_NAME      => r_COP.INFORMATION12
                         ,P_TRK_INELIG_PER_FLAG      => r_COP.INFORMATION21
                         ,P_URL_REF_NAME      => r_COP.INFORMATION185
                         ,P_VRFY_FMLY_MMBR_CD      => r_COP.INFORMATION28
             ,P_VRFY_FMLY_MMBR_RL      => l_VRFY_FMLY_MMBR_RL
             --ML
             ,P_SUSP_IF_CTFN_NOT_PRVD_FLAG      => nvl(r_COP.INFORMATION198,'Y')
             ,P_CTFN_DETERMINE_CD      => r_COP.INFORMATION197
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_oipl_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'OIPL_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_COP.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_OIPL_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_COP_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_OIPL_F UPDATE_OPTION_IN_PLAN ',30);
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_COP.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_COP.information3,
               p_effective_start_date  => r_COP.information2,
               p_dml_operation         => r_COP.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_OIPL_ID   := r_COP.information1;
             l_object_version_number := r_COP.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           BEN_OPTION_IN_PLAN_API.UPDATE_OPTION_IN_PLAN(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ACTL_PREM_ID      => l_ACTL_PREM_ID
                         ,P_AUTO_ENRT_FLAG      => r_COP.INFORMATION25
                         ,P_AUTO_ENRT_MTHD_RL      => l_AUTO_ENRT_MTHD_RL
                         ,P_COP_ATTRIBUTE1      => r_COP.INFORMATION111
                         ,P_COP_ATTRIBUTE10      => r_COP.INFORMATION120
                         ,P_COP_ATTRIBUTE11      => r_COP.INFORMATION121
                         ,P_COP_ATTRIBUTE12      => r_COP.INFORMATION122
                         ,P_COP_ATTRIBUTE13      => r_COP.INFORMATION123
                         ,P_COP_ATTRIBUTE14      => r_COP.INFORMATION124
                         ,P_COP_ATTRIBUTE15      => r_COP.INFORMATION125
                         ,P_COP_ATTRIBUTE16      => r_COP.INFORMATION126
                         ,P_COP_ATTRIBUTE17      => r_COP.INFORMATION127
                         ,P_COP_ATTRIBUTE18      => r_COP.INFORMATION128
                         ,P_COP_ATTRIBUTE19      => r_COP.INFORMATION129
                         ,P_COP_ATTRIBUTE2      => r_COP.INFORMATION112
                         ,P_COP_ATTRIBUTE20      => r_COP.INFORMATION130
                         ,P_COP_ATTRIBUTE21      => r_COP.INFORMATION131
                         ,P_COP_ATTRIBUTE22      => r_COP.INFORMATION132
                         ,P_COP_ATTRIBUTE23      => r_COP.INFORMATION133
                         ,P_COP_ATTRIBUTE24      => r_COP.INFORMATION134
                         ,P_COP_ATTRIBUTE25      => r_COP.INFORMATION135
                         ,P_COP_ATTRIBUTE26      => r_COP.INFORMATION136
                         ,P_COP_ATTRIBUTE27      => r_COP.INFORMATION137
                         ,P_COP_ATTRIBUTE28      => r_COP.INFORMATION138
                         ,P_COP_ATTRIBUTE29      => r_COP.INFORMATION139
                         ,P_COP_ATTRIBUTE3      => r_COP.INFORMATION113
                         ,P_COP_ATTRIBUTE30      => r_COP.INFORMATION140
                         ,P_COP_ATTRIBUTE4      => r_COP.INFORMATION114
                         ,P_COP_ATTRIBUTE5      => r_COP.INFORMATION115
                         ,P_COP_ATTRIBUTE6      => r_COP.INFORMATION116
                         ,P_COP_ATTRIBUTE7      => r_COP.INFORMATION117
                         ,P_COP_ATTRIBUTE8      => r_COP.INFORMATION118
                         ,P_COP_ATTRIBUTE9      => r_COP.INFORMATION119
                         ,P_COP_ATTRIBUTE_CATEGORY      => r_COP.INFORMATION110
                         ,P_DFLT_ENRT_CD      => r_COP.INFORMATION26
                         ,P_DFLT_ENRT_DET_RL      => l_DFLT_ENRT_DET_RL
                         ,P_DFLT_FLAG      => r_COP.INFORMATION18
                         ,P_DRVBL_FCTR_APLS_RTS_FLAG      => r_COP.INFORMATION24
                         ,P_DRVBL_FCTR_PRTN_ELIG_FLAG      => r_COP.INFORMATION22
                         ,P_ELIG_APLS_FLAG      => r_COP.INFORMATION20
                         ,P_ENRT_CD      => r_COP.INFORMATION14
                         ,P_ENRT_RL      => l_ENRT_RL
                         ,P_HIDDEN_FLAG      => r_COP.INFORMATION13
                         ,P_IVR_IDENT      => r_COP.INFORMATION141
                         ,P_MNDTRY_FLAG      => r_COP.INFORMATION17
                         ,P_MNDTRY_RL      => l_MNDTRY_RL
                         ,P_OIPL_ID      => l_oipl_id
                         ,P_OIPL_STAT_CD      => r_COP.INFORMATION19
                         ,P_OPT_ID      => l_OPT_ID
                         ,P_ORDR_NUM      => r_COP.INFORMATION263
                         ,P_PCP_DPNT_DSGN_CD      => r_COP.INFORMATION16
                         ,P_PCP_DSGN_CD      => r_COP.INFORMATION15
                         ,P_PER_CVRD_CD      => r_COP.INFORMATION27
                         ,P_PL_ID      => l_PL_ID
                         ,P_POSTELCN_EDIT_RL      => l_POSTELCN_EDIT_RL
                         ,P_PRTN_ELIG_OVRID_ALWD_FLAG      => r_COP.INFORMATION23
                         ,P_RQD_PERD_ENRT_NENRT_RL      => l_RQD_PERD_ENRT_NENRT_RL
                         ,P_RQD_PERD_ENRT_NENRT_UOM      => r_COP.INFORMATION29
                         ,P_RQD_PERD_ENRT_NENRT_VAL      => r_COP.INFORMATION293
                         ,P_SHORT_CODE      => r_COP.INFORMATION11
                         ,P_SHORT_NAME      => r_COP.INFORMATION12
                         ,P_TRK_INELIG_PER_FLAG      => r_COP.INFORMATION21
                         ,P_URL_REF_NAME      => r_COP.INFORMATION185
                         ,P_VRFY_FMLY_MMBR_CD      => r_COP.INFORMATION28
             ,P_VRFY_FMLY_MMBR_RL      => l_VRFY_FMLY_MMBR_RL
             --ML
             ,P_SUSP_IF_CTFN_NOT_PRVD_FLAG      => nvl(r_COP.INFORMATION198,'Y')
             ,P_CTFN_DETERMINE_CD      => r_COP.INFORMATION197
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
            ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;  -- l_update
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_COP.information3) then
             --
             BEN_OPTION_IN_PLAN_API.delete_OPTION_IN_PLAN(
                --
                p_validate                       => false
                ,p_oipl_id                   => l_oipl_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'COP',r_cop.information5 );
     --
 end create_COP_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_DDR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_DDR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_OIPL_ID  number;
   l_OPT_ID  number;
   l_PL_ID  number;
   l_GRP_RLSHP_CD ben_dsgn_rqmt_f.grp_rlshp_cd%type;
   l_DSGN_TYP_CD  ben_dsgn_rqmt_f.dsgn_typ_cd%type;
   cursor c_unique_DDR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
  ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_DSGN_RQMT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_DDR_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_DDR(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_DDR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     DDR.dsgn_rqmt_id new_value
   from BEN_DSGN_RQMT_F DDR
   where
   nvl(DDR.OIPL_ID,-999)     = nvl(l_OIPL_ID,-999)  and
   nvl(DDR.OPT_ID,-999)     = nvl(l_OPT_ID,-999)  and
   nvl(DDR.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
   nvl(DDR.GRP_RLSHP_CD,-999) = nvl(l_GRP_RLSHP_CD,-999) and
   nvl(DDR.DSGN_TYP_CD,-999) = nvl(l_DSGN_TYP_CD,-999) and
   DDR.business_group_id  = c_business_group_id
   and   DDR.dsgn_rqmt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*
   and exists ( select null
                from BEN_DSGN_RQMT_F DDR1
                where
                nvl(DDR1.OIPL_ID,-999)     = nvl(l_OIPL_ID,-999)  and
                nvl(DDR1.OPT_ID,-999)     = nvl(l_OPT_ID,-999)  and
                nvl(DDR1.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
                nvl(DDR1.GRP_RLSHP_CD,-999) = nvl(l_GRP_RLSHP_CD,-999) and
                nvl(DDR1.DSGN_TYP_CD,-999) = nvl(l_DSGN_TYP_CD,-999) and
                DDR1.business_group_id  = c_business_group_id
                and   DDR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_DSGN_RQMT_F DDR2
                where
                nvl(DDR2.OIPL_ID,-999)     = nvl(l_OIPL_ID,-999)  and
                nvl(DDR2.OPT_ID,-999)     = nvl(l_OPT_ID,-999)  and
                nvl(DDR2.PL_ID,-999)     = nvl(l_PL_ID,-999)  and
                nvl(DDR2.GRP_RLSHP_CD,-999) = nvl(l_GRP_RLSHP_CD,-999) and
                nvl(DDR2.DSGN_TYP_CD,-999) = nvl(l_DSGN_TYP_CD,-999) and
                DDR2.business_group_id  = c_business_group_id
                and   DDR2.effective_end_date >= c_effective_end_date )
                ;
*/
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_DDR                     c_DDR%rowtype;
   l_dsgn_rqmt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_DDR_unique in c_unique_DDR('DDR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_DDR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_DDR_unique.table_route_id '||r_DDR_unique.table_route_id,10);
       hr_utility.set_location(' r_DDR_unique.information1 '||r_DDR_unique.information1,10);
       hr_utility.set_location( 'r_DDR_unique.information2 '||r_DDR_unique.information2,10);
       hr_utility.set_location( 'r_DDR_unique.information3 '||r_DDR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
              open c_DDR(r_DDR_unique.table_route_id,
                r_DDR_unique.information1,
                r_DDR_unique.information2,
                r_DDR_unique.information3 ) ;
       --
       fetch c_DDR into r_DDR ;
       --
       close c_DDR ;
       --
       l_dml_operation:= r_DDR_unique.dml_operation ;
       l_OIPL_ID := get_fk('OIPL_ID', r_DDR.information258,l_dml_operation );
       l_OPT_ID := get_fk('OPT_ID', r_DDR.information247,l_dml_operation );
       l_PL_ID := get_fk('PL_ID', r_DDR.information261,l_dml_operation );
       l_GRP_RLSHP_CD := r_DDR.information14;
       l_DSGN_TYP_CD := r_DDR.information15;
       --
       l_update := false;
       l_process_date := p_effective_date;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_DDR_unique.information2 and r_DDR_unique.information3 then
               l_update := true;
               if r_DDR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'DSGN_RQMT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'DSGN_RQMT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_DDR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_DDR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_DDR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
       --DOUBT           log_data('DDR',l_new_value,l_prefix || r_DDR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_DDR_min_max_dates(r_DDR_unique.table_route_id, r_DDR_unique.information1 ) ;
       fetch c_DDR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_DDR_unique.information2);
/*       open c_DDR(r_DDR_unique.table_route_id,
                r_DDR_unique.information1,
                r_DDR_unique.information2,
                r_DDR_unique.information3 ) ;
       --
       fetch c_DDR into r_DDR ;
       --
       close c_DDR ;  */
       --
       if p_reuse_object_flag = 'Y' then
         if c_DDR_min_max_dates%found then
           -- cursor to find the object
           open c_find_DDR_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_dsgn_rqmt_id, -999)  ) ;
           fetch c_find_DDR_in_target into l_new_value ;
           if c_find_DDR_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_DSGN_RQMT_F',
                  p_base_key_column => 'DSGN_RQMT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_DDR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'DSGN_RQMT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'DSGN_RQMT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_DDR_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_DDR_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_DDR_in_target ;
         --
         end if;
       end if ;
       --
       close c_DDR_min_max_dates ;
           end if; --if p_dml_operation
                       --
                       if not l_object_found_in_target OR l_update  then
         --
         l_current_pk_id := r_DDR.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_DDR.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_DSGN_RQMT_F CREATE_DESIGN_RQMT ',20);
           BEN_DESIGN_RQMT_API.CREATE_DESIGN_RQMT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CVR_ALL_ELIG_FLAG      => r_DDR.INFORMATION13
             ,P_DDR_ATTRIBUTE1      => r_DDR.INFORMATION111
             ,P_DDR_ATTRIBUTE10      => r_DDR.INFORMATION120
             ,P_DDR_ATTRIBUTE11      => r_DDR.INFORMATION121
             ,P_DDR_ATTRIBUTE12      => r_DDR.INFORMATION122
             ,P_DDR_ATTRIBUTE13      => r_DDR.INFORMATION123
             ,P_DDR_ATTRIBUTE14      => r_DDR.INFORMATION124
             ,P_DDR_ATTRIBUTE15      => r_DDR.INFORMATION125
             ,P_DDR_ATTRIBUTE16      => r_DDR.INFORMATION126
             ,P_DDR_ATTRIBUTE17      => r_DDR.INFORMATION127
             ,P_DDR_ATTRIBUTE18      => r_DDR.INFORMATION128
             ,P_DDR_ATTRIBUTE19      => r_DDR.INFORMATION129
             ,P_DDR_ATTRIBUTE2      => r_DDR.INFORMATION112
             ,P_DDR_ATTRIBUTE20      => r_DDR.INFORMATION130
             ,P_DDR_ATTRIBUTE21      => r_DDR.INFORMATION131
             ,P_DDR_ATTRIBUTE22      => r_DDR.INFORMATION132
             ,P_DDR_ATTRIBUTE23      => r_DDR.INFORMATION133
             ,P_DDR_ATTRIBUTE24      => r_DDR.INFORMATION134
             ,P_DDR_ATTRIBUTE25      => r_DDR.INFORMATION135
             ,P_DDR_ATTRIBUTE26      => r_DDR.INFORMATION136
             ,P_DDR_ATTRIBUTE27      => r_DDR.INFORMATION137
             ,P_DDR_ATTRIBUTE28      => r_DDR.INFORMATION138
             ,P_DDR_ATTRIBUTE29      => r_DDR.INFORMATION139
             ,P_DDR_ATTRIBUTE3      => r_DDR.INFORMATION113
             ,P_DDR_ATTRIBUTE30      => r_DDR.INFORMATION140
             ,P_DDR_ATTRIBUTE4      => r_DDR.INFORMATION114
             ,P_DDR_ATTRIBUTE5      => r_DDR.INFORMATION115
             ,P_DDR_ATTRIBUTE6      => r_DDR.INFORMATION116
             ,P_DDR_ATTRIBUTE7      => r_DDR.INFORMATION117
             ,P_DDR_ATTRIBUTE8      => r_DDR.INFORMATION118
             ,P_DDR_ATTRIBUTE9      => r_DDR.INFORMATION119
             ,P_DDR_ATTRIBUTE_CATEGORY      => r_DDR.INFORMATION110
             ,P_DSGN_RQMT_ID      => l_dsgn_rqmt_id
             ,P_DSGN_TYP_CD      => r_DDR.INFORMATION15
             ,P_GRP_RLSHP_CD      => r_DDR.INFORMATION14
             ,P_MN_DPNTS_RQD_NUM      => r_DDR.INFORMATION262
             ,P_MX_DPNTS_ALWD_NUM      => r_DDR.INFORMATION263
             ,P_NO_MN_NUM_DFND_FLAG      => r_DDR.INFORMATION11
             ,P_NO_MX_NUM_DFND_FLAG      => r_DDR.INFORMATION12
             ,P_OIPL_ID      => l_OIPL_ID
             ,P_OPT_ID      => l_OPT_ID
             ,P_PL_ID      => l_PL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_dsgn_rqmt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'DSGN_RQMT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_DDR.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_DSGN_RQMT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_DDR_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_DSGN_RQMT_F UPDATE_DESIGN_RQMT ',30);
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_DDR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_DDR.information3,
               p_effective_start_date  => r_DDR.information2,
               p_dml_operation         => r_DDR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_DSGN_RQMT_ID   := r_DDR.information1;
             l_object_version_number := r_DDR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           BEN_DESIGN_RQMT_API.UPDATE_DESIGN_RQMT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CVR_ALL_ELIG_FLAG      => r_DDR.INFORMATION13
             ,P_DDR_ATTRIBUTE1      => r_DDR.INFORMATION111
             ,P_DDR_ATTRIBUTE10      => r_DDR.INFORMATION120
             ,P_DDR_ATTRIBUTE11      => r_DDR.INFORMATION121
             ,P_DDR_ATTRIBUTE12      => r_DDR.INFORMATION122
             ,P_DDR_ATTRIBUTE13      => r_DDR.INFORMATION123
             ,P_DDR_ATTRIBUTE14      => r_DDR.INFORMATION124
             ,P_DDR_ATTRIBUTE15      => r_DDR.INFORMATION125
             ,P_DDR_ATTRIBUTE16      => r_DDR.INFORMATION126
             ,P_DDR_ATTRIBUTE17      => r_DDR.INFORMATION127
             ,P_DDR_ATTRIBUTE18      => r_DDR.INFORMATION128
             ,P_DDR_ATTRIBUTE19      => r_DDR.INFORMATION129
             ,P_DDR_ATTRIBUTE2      => r_DDR.INFORMATION112
             ,P_DDR_ATTRIBUTE20      => r_DDR.INFORMATION130
             ,P_DDR_ATTRIBUTE21      => r_DDR.INFORMATION131
             ,P_DDR_ATTRIBUTE22      => r_DDR.INFORMATION132
             ,P_DDR_ATTRIBUTE23      => r_DDR.INFORMATION133
             ,P_DDR_ATTRIBUTE24      => r_DDR.INFORMATION134
             ,P_DDR_ATTRIBUTE25      => r_DDR.INFORMATION135
             ,P_DDR_ATTRIBUTE26      => r_DDR.INFORMATION136
             ,P_DDR_ATTRIBUTE27      => r_DDR.INFORMATION137
             ,P_DDR_ATTRIBUTE28      => r_DDR.INFORMATION138
             ,P_DDR_ATTRIBUTE29      => r_DDR.INFORMATION139
             ,P_DDR_ATTRIBUTE3      => r_DDR.INFORMATION113
             ,P_DDR_ATTRIBUTE30      => r_DDR.INFORMATION140
             ,P_DDR_ATTRIBUTE4      => r_DDR.INFORMATION114
             ,P_DDR_ATTRIBUTE5      => r_DDR.INFORMATION115
             ,P_DDR_ATTRIBUTE6      => r_DDR.INFORMATION116
             ,P_DDR_ATTRIBUTE7      => r_DDR.INFORMATION117
             ,P_DDR_ATTRIBUTE8      => r_DDR.INFORMATION118
             ,P_DDR_ATTRIBUTE9      => r_DDR.INFORMATION119
             ,P_DDR_ATTRIBUTE_CATEGORY      => r_DDR.INFORMATION110
             ,P_DSGN_RQMT_ID      => l_dsgn_rqmt_id
             ,P_DSGN_TYP_CD      => r_DDR.INFORMATION15
             ,P_GRP_RLSHP_CD      => r_DDR.INFORMATION14
             ,P_MN_DPNTS_RQD_NUM      => r_DDR.INFORMATION262
             ,P_MX_DPNTS_ALWD_NUM      => r_DDR.INFORMATION263
             ,P_NO_MN_NUM_DFND_FLAG      => r_DDR.INFORMATION11
             ,P_NO_MX_NUM_DFND_FLAG      => r_DDR.INFORMATION12
             ,P_OIPL_ID      => l_OIPL_ID
             ,P_OPT_ID      => l_OPT_ID
             ,P_PL_ID      => l_PL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;  -- l_update
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_DDR.information3) then
             --
             BEN_DESIGN_RQMT_API.delete_DESIGN_RQMT(
                --
                p_validate                       => false
                ,p_dsgn_rqmt_id                   => l_dsgn_rqmt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'DDR',r_ddr.information5 );
     --
 end create_DDR_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_DRR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_DRR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_DSGN_RQMT_ID  number;
   l_rlshp_typ_cd  varchar2(100);
   cursor c_unique_DRR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_DSGN_RQMT_RLSHP_TYP
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_DRR_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_DRR(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_DRR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     DRR.dsgn_rqmt_rlshp_typ_id new_value
   from BEN_DSGN_RQMT_RLSHP_TYP DRR
   where
   DRR.DSGN_RQMT_ID     = l_DSGN_RQMT_ID  and
   DRR.rlshp_typ_cd     = l_rlshp_typ_cd  and
   DRR.business_group_id  = c_business_group_id
   and   DRR.dsgn_rqmt_rlshp_typ_id  <> c_new_pk_id
                ;
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_DRR                     c_DRR%rowtype;
   l_dsgn_rqmt_rlshp_typ_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_parent_effective_start_date date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_DRR_unique in c_unique_DRR('DRR') loop
     --
     hr_utility.set_location(' r_DRR_unique.table_route_id '||r_DRR_unique.table_route_id,10);
     hr_utility.set_location(' r_DRR_unique.information1 '||r_DRR_unique.information1,10);
     hr_utility.set_location( 'r_DRR_unique.information2 '||r_DRR_unique.information2,10);
     hr_utility.set_location( 'r_DRR_unique.information3 '||r_DRR_unique.information3,10);
     -- If reuse objects flag is 'Y' then check for the object in the target business group
     -- if found insert the record into PLSql table and exit the loop else try create the
     -- object in the target business group
     --
     l_object_found_in_target := false ;
     l_min_esd := null ;
     l_max_eed := null ;
     --
     open c_DRR(r_DRR_unique.table_route_id,
                r_DRR_unique.information1,
                r_DRR_unique.information2,
                r_DRR_unique.information3 ) ;
     --
     fetch c_DRR into r_DRR ;
     --
     close c_DRR ;
     --
     --UPD START
       --
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_DRR_unique.dml_operation ;
       --
       --UPD END
     l_DSGN_RQMT_ID := get_fk('DSGN_RQMT_ID', r_DRR.information260,l_dml_operation);
     l_rlshp_typ_cd   := r_DRR.information11;
     --UPD START
     --
     if l_dml_operation = 'UPDATE' then
       --
               l_update := true;
               if r_DRR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'DSGN_RQMT_RLSHP_TYP_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'DSGN_RQMT_RLSHP_TYP_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_DRR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_DRR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_DRR_unique.table_route_id;
                  --
                  -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ; -- NEW
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
    --DOUBT              log_data('DRR',l_new_value,l_prefix || r_DRR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               l_DSGN_RQMT_RLSHP_TYP_ID := r_DRR_unique.information1 ;
               l_object_version_number := r_DRR.information265 ;
               hr_utility.set_location( 'found record for update',10);
           --
     else
     --
     --UPD END
     if p_reuse_object_flag = 'Y' then
           -- cursor to find the object
           open c_find_DRR_in_target( r_DRR_unique.information2,l_max_eed,
                                 p_target_business_group_id, nvl(l_dsgn_rqmt_rlshp_typ_id, -999)  ) ;
           fetch c_find_DRR_in_target into l_new_value ;
           if c_find_DRR_in_target%found then
             --
             if r_DRR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'DSGN_RQMT_RLSHP_TYP_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'DSGN_RQMT_RLSHP_TYP_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_DRR_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_DRR_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
           end if;
           close c_find_DRR_in_target ;
         --
     end if ;
     --
     end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then
       --
       l_current_pk_id := r_DRR.information1;
       --
       hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
       hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
       --
       if l_current_pk_id =  l_prev_pk_id  then
         --
         l_first_rec := false ;
         --
       else
         --
         l_first_rec := true ;
         --
       end if ;
       --

       l_parent_effective_start_date := r_DRR.information10;
       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null ) then
         if l_parent_effective_start_date is null then
           l_parent_effective_start_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         elsif l_parent_effective_start_date < ben_pd_copy_to_ben_one.g_copy_effective_date  then
           l_parent_effective_start_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;
       end if;
       --
       -- To avoid creating a child with out a parent
       --
       --
       if l_DSGN_RQMT_ID is null then
          l_first_rec := false ;
       end if;
       --
       if l_first_rec and not l_update then
         -- Call Create routine.
         hr_utility.set_location(' BEN_DSGN_RQMT_RLSHP_TYP CREATE_DSGN_RQMT_RLSHP_TYP ',20);
         BEN_DSGN_RQMT_RLSHP_TYP_API.CREATE_DSGN_RQMT_RLSHP_TYP(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => NVL(l_parent_effective_start_date,p_effective_date)
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
              ,P_DRR_ATTRIBUTE1      => r_DRR.INFORMATION111
              ,P_DRR_ATTRIBUTE10      => r_DRR.INFORMATION120
              ,P_DRR_ATTRIBUTE11      => r_DRR.INFORMATION121
              ,P_DRR_ATTRIBUTE12      => r_DRR.INFORMATION122
              ,P_DRR_ATTRIBUTE13      => r_DRR.INFORMATION123
              ,P_DRR_ATTRIBUTE14      => r_DRR.INFORMATION124
              ,P_DRR_ATTRIBUTE15      => r_DRR.INFORMATION125
              ,P_DRR_ATTRIBUTE16      => r_DRR.INFORMATION126
              ,P_DRR_ATTRIBUTE17      => r_DRR.INFORMATION127
              ,P_DRR_ATTRIBUTE18      => r_DRR.INFORMATION128
              ,P_DRR_ATTRIBUTE19      => r_DRR.INFORMATION129
              ,P_DRR_ATTRIBUTE2      => r_DRR.INFORMATION112
              ,P_DRR_ATTRIBUTE20      => r_DRR.INFORMATION130
              ,P_DRR_ATTRIBUTE21      => r_DRR.INFORMATION131
              ,P_DRR_ATTRIBUTE22      => r_DRR.INFORMATION132
              ,P_DRR_ATTRIBUTE23      => r_DRR.INFORMATION133
              ,P_DRR_ATTRIBUTE24      => r_DRR.INFORMATION134
              ,P_DRR_ATTRIBUTE25      => r_DRR.INFORMATION135
              ,P_DRR_ATTRIBUTE26      => r_DRR.INFORMATION136
              ,P_DRR_ATTRIBUTE27      => r_DRR.INFORMATION137
              ,P_DRR_ATTRIBUTE28      => r_DRR.INFORMATION138
              ,P_DRR_ATTRIBUTE29      => r_DRR.INFORMATION139
              ,P_DRR_ATTRIBUTE3      => r_DRR.INFORMATION113
              ,P_DRR_ATTRIBUTE30      => r_DRR.INFORMATION140
              ,P_DRR_ATTRIBUTE4      => r_DRR.INFORMATION114
              ,P_DRR_ATTRIBUTE5      => r_DRR.INFORMATION115
              ,P_DRR_ATTRIBUTE6      => r_DRR.INFORMATION116
              ,P_DRR_ATTRIBUTE7      => r_DRR.INFORMATION117
              ,P_DRR_ATTRIBUTE8      => r_DRR.INFORMATION118
              ,P_DRR_ATTRIBUTE9      => r_DRR.INFORMATION119
              ,P_DRR_ATTRIBUTE_CATEGORY      => r_DRR.INFORMATION110
              ,P_DSGN_RQMT_ID      => l_DSGN_RQMT_ID
              ,P_DSGN_RQMT_RLSHP_TYP_ID      => l_dsgn_rqmt_rlshp_typ_id
             ,P_RLSHP_TYP_CD      => r_DRR.INFORMATION11
             --
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
         );
         -- insert the table_name,old_pk_id,new_pk_id into a plsql record
         -- Update all relevent cer records with new pk_id
         hr_utility.set_location('Before plsql table ',222);
         hr_utility.set_location('new_value id '||l_dsgn_rqmt_rlshp_typ_id,222);
         BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'DSGN_RQMT_RLSHP_TYP_ID' ;
         BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_DRR.information1 ;
         BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_DSGN_RQMT_RLSHP_TYP_ID ;
         BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
         BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_DRR_unique.table_route_id;
         hr_utility.set_location('After plsql table ',222);
         --
         -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
         --
         BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
         --
         elsif l_update then
           BEN_DSGN_RQMT_RLSHP_TYP_API.UPDATE_DSGN_RQMT_RLSHP_TYP(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => NVL(l_parent_effective_start_date,p_effective_date)
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
              ,P_DRR_ATTRIBUTE1      => r_DRR.INFORMATION111
              ,P_DRR_ATTRIBUTE10      => r_DRR.INFORMATION120
              ,P_DRR_ATTRIBUTE11      => r_DRR.INFORMATION121
              ,P_DRR_ATTRIBUTE12      => r_DRR.INFORMATION122
              ,P_DRR_ATTRIBUTE13      => r_DRR.INFORMATION123
              ,P_DRR_ATTRIBUTE14      => r_DRR.INFORMATION124
              ,P_DRR_ATTRIBUTE15      => r_DRR.INFORMATION125
              ,P_DRR_ATTRIBUTE16      => r_DRR.INFORMATION126
              ,P_DRR_ATTRIBUTE17      => r_DRR.INFORMATION127
              ,P_DRR_ATTRIBUTE18      => r_DRR.INFORMATION128
              ,P_DRR_ATTRIBUTE19      => r_DRR.INFORMATION129
              ,P_DRR_ATTRIBUTE2      => r_DRR.INFORMATION112
              ,P_DRR_ATTRIBUTE20      => r_DRR.INFORMATION130
              ,P_DRR_ATTRIBUTE21      => r_DRR.INFORMATION131
              ,P_DRR_ATTRIBUTE22      => r_DRR.INFORMATION132
              ,P_DRR_ATTRIBUTE23      => r_DRR.INFORMATION133
              ,P_DRR_ATTRIBUTE24      => r_DRR.INFORMATION134
              ,P_DRR_ATTRIBUTE25      => r_DRR.INFORMATION135
              ,P_DRR_ATTRIBUTE26      => r_DRR.INFORMATION136
              ,P_DRR_ATTRIBUTE27      => r_DRR.INFORMATION137
              ,P_DRR_ATTRIBUTE28      => r_DRR.INFORMATION138
              ,P_DRR_ATTRIBUTE29      => r_DRR.INFORMATION139
              ,P_DRR_ATTRIBUTE3      => r_DRR.INFORMATION113
              ,P_DRR_ATTRIBUTE30      => r_DRR.INFORMATION140
              ,P_DRR_ATTRIBUTE4      => r_DRR.INFORMATION114
              ,P_DRR_ATTRIBUTE5      => r_DRR.INFORMATION115
              ,P_DRR_ATTRIBUTE6      => r_DRR.INFORMATION116
              ,P_DRR_ATTRIBUTE7      => r_DRR.INFORMATION117
              ,P_DRR_ATTRIBUTE8      => r_DRR.INFORMATION118
              ,P_DRR_ATTRIBUTE9      => r_DRR.INFORMATION119
              ,P_DRR_ATTRIBUTE_CATEGORY      => r_DRR.INFORMATION110
              ,P_DSGN_RQMT_ID      => l_DSGN_RQMT_ID
              ,P_DSGN_RQMT_RLSHP_TYP_ID      => l_dsgn_rqmt_rlshp_typ_id
             ,P_RLSHP_TYP_CD      => r_DRR.INFORMATION11
             --
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
         );
       end if;
       --
       l_prev_pk_id := l_current_pk_id ;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'DRR',r_drr.information5 );
     --
 end create_DRR_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_OPP_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_OPP_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_OIPL_ID  number;
   l_PLIP_ID  number;
   cursor c_unique_OPP(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
  ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_OIPLIP_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_OPP_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_OPP(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_OPP_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     OPP.oiplip_id new_value
   from BEN_OIPLIP_F OPP
   where
   OPP.OIPL_ID     = l_OIPL_ID  and
   OPP.PLIP_ID     = l_PLIP_ID  and
   OPP.business_group_id  = c_business_group_id
   and   OPP.oiplip_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*
   and exists ( select null
                from BEN_OIPLIP_F OPP1
                where
                OPP1.OIPL_ID     = l_OIPL_ID  and
                OPP1.PLIP_ID     = l_PLIP_ID  and
                OPP1.business_group_id  = c_business_group_id
                and   OPP1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_OIPLIP_F OPP2
                where
                OPP2.OIPL_ID     = l_OIPL_ID  and
                OPP2.PLIP_ID     = l_PLIP_ID  and
                OPP2.business_group_id  = c_business_group_id
                and   OPP2.effective_end_date >= c_effective_end_date )
                ;
*/
   --
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_OPP                     c_OPP%rowtype;
   l_oiplip_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_OPP_unique in c_unique_OPP('OPP') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_OPP_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
          ) then
       --
       hr_utility.set_location(' r_OPP_unique.table_route_id '||r_OPP_unique.table_route_id,10);
       hr_utility.set_location(' r_OPP_unique.information1 '||r_OPP_unique.information1,10);
       hr_utility.set_location( 'r_OPP_unique.information2 '||r_OPP_unique.information2,10);
       hr_utility.set_location( 'r_OPP_unique.information3 '||r_OPP_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_OPP_min_max_dates(r_OPP_unique.table_route_id, r_OPP_unique.information1 ) ;
       fetch c_OPP_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_OPP_unique.information2);
       open c_OPP(r_OPP_unique.table_route_id,
                r_OPP_unique.information1,
                r_OPP_unique.information2,
                r_OPP_unique.information3 ) ;
       --
       fetch c_OPP into r_OPP ;
       --
       close c_OPP ;
       --
       l_OIPL_ID := get_fk('OIPL_ID', r_OPP.INFORMATION258);
       l_PLIP_ID := get_fk('PLIP_ID', r_OPP.INFORMATION256);
       -- if p_reuse_object_flag = 'Y' then
         if c_OPP_min_max_dates%found then
           -- cursor to find the object

           -- Bug: 3512195. In the below cursor, pass l_min_esd instead of r_OPP.information2
           -- This is because OPP records are not created here, but have already been created
           -- while PLIP and OIPL rows are created.

           open c_find_OPP_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_oiplip_id, -999)  ) ;
           fetch c_find_OPP_in_target into l_new_value ;
           if c_find_OPP_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_OIPLIP_F',
                  p_base_key_column => 'OIPLIP_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_OPP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'OIPLIP_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'OIPLIP_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_OPP_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'COPIED'; -- Always created, never Reused
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_OPP_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_OPP_in_target ;
         --
         end if;
       -- end if ;
       --
       close c_OPP_min_max_dates ;
       --
       -- NEVER CREATE HERE. THIS IS DONE IN BEN_PLIP_F and BEN_OIPL_F apis.
       /*
       if not l_object_found_in_target then
         --
         l_current_pk_id := r_OPP.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_OPP.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec then
           -- Call Create routine.
           hr_utility.set_location(' BEN_OIPLIP_F CREATE_OPTION_IN_PLAN_IN_PGM ',20);
           BEN_OPTION_IN_PLAN_IN_PGM_API.CREATE_OPTION_IN_PLAN_IN_PGM(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_OIPLIP_ID      => l_oiplip_id
                          ,P_OIPL_ID      => l_OIPL_ID
                          ,P_OPP_ATTRIBUTE1      => r_OPP.INFORMATION111
                          ,P_OPP_ATTRIBUTE10      => r_OPP.INFORMATION120
                          ,P_OPP_ATTRIBUTE11      => r_OPP.INFORMATION121
                          ,P_OPP_ATTRIBUTE12      => r_OPP.INFORMATION122
                          ,P_OPP_ATTRIBUTE13      => r_OPP.INFORMATION123
                          ,P_OPP_ATTRIBUTE14      => r_OPP.INFORMATION124
                          ,P_OPP_ATTRIBUTE15      => r_OPP.INFORMATION125
                          ,P_OPP_ATTRIBUTE16      => r_OPP.INFORMATION126
                          ,P_OPP_ATTRIBUTE17      => r_OPP.INFORMATION127
                          ,P_OPP_ATTRIBUTE18      => r_OPP.INFORMATION128
                          ,P_OPP_ATTRIBUTE19      => r_OPP.INFORMATION129
                          ,P_OPP_ATTRIBUTE2      => r_OPP.INFORMATION112
                          ,P_OPP_ATTRIBUTE20      => r_OPP.INFORMATION130
                          ,P_OPP_ATTRIBUTE21      => r_OPP.INFORMATION131
                          ,P_OPP_ATTRIBUTE22      => r_OPP.INFORMATION132
                          ,P_OPP_ATTRIBUTE23      => r_OPP.INFORMATION133
                          ,P_OPP_ATTRIBUTE24      => r_OPP.INFORMATION134
                          ,P_OPP_ATTRIBUTE25      => r_OPP.INFORMATION135
                          ,P_OPP_ATTRIBUTE26      => r_OPP.INFORMATION136
                          ,P_OPP_ATTRIBUTE27      => r_OPP.INFORMATION137
                          ,P_OPP_ATTRIBUTE28      => r_OPP.INFORMATION138
                          ,P_OPP_ATTRIBUTE29      => r_OPP.INFORMATION139
                          ,P_OPP_ATTRIBUTE3      => r_OPP.INFORMATION113
                          ,P_OPP_ATTRIBUTE30      => r_OPP.INFORMATION140
                          ,P_OPP_ATTRIBUTE4      => r_OPP.INFORMATION114
                          ,P_OPP_ATTRIBUTE5      => r_OPP.INFORMATION115
                          ,P_OPP_ATTRIBUTE6      => r_OPP.INFORMATION116
                          ,P_OPP_ATTRIBUTE7      => r_OPP.INFORMATION117
                          ,P_OPP_ATTRIBUTE8      => r_OPP.INFORMATION118
                          ,P_OPP_ATTRIBUTE9      => r_OPP.INFORMATION119
                          ,P_OPP_ATTRIBUTE_CATEGORY      => r_OPP.INFORMATION110
             ,P_PLIP_ID      => l_PLIP_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_oiplip_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'OIPLIP_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_OPP.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_OIPLIP_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_OPP_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_OIPLIP_F UPDATE_OPTION_IN_PLAN_IN_PGM ',30);
           BEN_OPTION_IN_PLAN_IN_PGM_API.UPDATE_OPTION_IN_PLAN_IN_PGM(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
              ,P_OIPLIP_ID      => l_oiplip_id
                          ,P_OIPL_ID      => l_OIPL_ID
                          ,P_OPP_ATTRIBUTE1      => r_OPP.INFORMATION111
                          ,P_OPP_ATTRIBUTE10      => r_OPP.INFORMATION120
                          ,P_OPP_ATTRIBUTE11      => r_OPP.INFORMATION121
                          ,P_OPP_ATTRIBUTE12      => r_OPP.INFORMATION122
                          ,P_OPP_ATTRIBUTE13      => r_OPP.INFORMATION123
                          ,P_OPP_ATTRIBUTE14      => r_OPP.INFORMATION124
                          ,P_OPP_ATTRIBUTE15      => r_OPP.INFORMATION125
                          ,P_OPP_ATTRIBUTE16      => r_OPP.INFORMATION126
                          ,P_OPP_ATTRIBUTE17      => r_OPP.INFORMATION127
                          ,P_OPP_ATTRIBUTE18      => r_OPP.INFORMATION128
                          ,P_OPP_ATTRIBUTE19      => r_OPP.INFORMATION129
                          ,P_OPP_ATTRIBUTE2      => r_OPP.INFORMATION112
                          ,P_OPP_ATTRIBUTE20      => r_OPP.INFORMATION130
                          ,P_OPP_ATTRIBUTE21      => r_OPP.INFORMATION131
                          ,P_OPP_ATTRIBUTE22      => r_OPP.INFORMATION132
                          ,P_OPP_ATTRIBUTE23      => r_OPP.INFORMATION133
                          ,P_OPP_ATTRIBUTE24      => r_OPP.INFORMATION134
                          ,P_OPP_ATTRIBUTE25      => r_OPP.INFORMATION135
                          ,P_OPP_ATTRIBUTE26      => r_OPP.INFORMATION136
                          ,P_OPP_ATTRIBUTE27      => r_OPP.INFORMATION137
                          ,P_OPP_ATTRIBUTE28      => r_OPP.INFORMATION138
                          ,P_OPP_ATTRIBUTE29      => r_OPP.INFORMATION139
                          ,P_OPP_ATTRIBUTE3      => r_OPP.INFORMATION113
                          ,P_OPP_ATTRIBUTE30      => r_OPP.INFORMATION140
                          ,P_OPP_ATTRIBUTE4      => r_OPP.INFORMATION114
                          ,P_OPP_ATTRIBUTE5      => r_OPP.INFORMATION115
                          ,P_OPP_ATTRIBUTE6      => r_OPP.INFORMATION116
                          ,P_OPP_ATTRIBUTE7      => r_OPP.INFORMATION117
                          ,P_OPP_ATTRIBUTE8      => r_OPP.INFORMATION118
                          ,P_OPP_ATTRIBUTE9      => r_OPP.INFORMATION119
                          ,P_OPP_ATTRIBUTE_CATEGORY      => r_OPP.INFORMATION110
             ,P_PLIP_ID      => l_PLIP_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => hr_api.g_update
           );
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) = r_OPP.information3) then
             --
             BEN_OPTION_IN_PLAN_IN_PGM_API.delete_OPTION_IN_PLAN_IN_PGM(
                --
                p_validate                       => false
                ,p_oiplip_id                   => l_oiplip_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       */
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'OPP',r_opp.information5 );
     --
 end create_OPP_rows;

 --
 ---------------------------------------------------------------
 ----------------------< create_OTP_rows >-----------------------
 ---------------------------------------------------------------
 --
 procedure create_OTP_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_CMBN_PTIP_OPT_ID  number;
   l_OPT_ID  number;
   l_PGM_ID  number;
   l_PL_TYP_ID  number;
   l_PTIP_ID  number;
   cursor c_unique_OTP(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_OPTIP_F
   and tr.table_alias = l_table_alias
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_OTP_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_OTP(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_OTP_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     OTP.optip_id new_value
   from BEN_OPTIP_F OTP
   where
   -- nvl(OTP.CMBN_PTIP_OPT_ID,-999)     = nvl(l_CMBN_PTIP_OPT_ID,-999)  and
   OTP.OPT_ID     = l_OPT_ID  and
   OTP.PGM_ID     = l_PGM_ID  and
   OTP.PL_TYP_ID     = l_PL_TYP_ID  and
   -- nvl(OTP.PTIP_ID,-999)     = nvl(l_PTIP_ID,-999)  and
   OTP.business_group_id  = c_business_group_id
   and   OTP.optip_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*
   and exists ( select null
                from BEN_OPTIP_F OTP1
                where
                -- nvl(OTP1.CMBN_PTIP_OPT_ID,-999)     = nvl(l_CMBN_PTIP_OPT_ID,-999)  and
                OTP1.OPT_ID     = l_OPT_ID  and
                OTP1.PGM_ID     = l_PGM_ID  and
                OTP1.PL_TYP_ID     = l_PL_TYP_ID  and
                -- nvl(OTP1.PTIP_ID,-999)     = nvl(l_PTIP_ID,-999)  and
                OTP1.business_group_id  = c_business_group_id
                and   OTP1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_OPTIP_F OTP2
                where
                -- nvl(OTP2.CMBN_PTIP_OPT_ID,-999)     = nvl(l_CMBN_PTIP_OPT_ID,-999)  and
                OTP2.OPT_ID     = l_OPT_ID  and
                OTP2.PGM_ID     = l_PGM_ID  and
                OTP2.PL_TYP_ID     = l_PL_TYP_ID  and
                -- nvl(OTP2.PTIP_ID,-999)     = nvl(l_PTIP_ID,-999)  and
                OTP2.business_group_id  = c_business_group_id
                and   OTP2.effective_end_date >= c_effective_end_date )
                ;
   -- */
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_OTP                     c_OTP%rowtype;
   l_optip_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_OTP_unique in c_unique_OTP('OTP') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_OTP_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_OTP_unique.table_route_id '||r_OTP_unique.table_route_id,10);
       hr_utility.set_location(' r_OTP_unique.information1 '||r_OTP_unique.information1,10);
       hr_utility.set_location( 'r_OTP_unique.information2 '||r_OTP_unique.information2,10);
       hr_utility.set_location( 'r_OTP_unique.information3 '||r_OTP_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_OTP_min_max_dates(r_OTP_unique.table_route_id, r_OTP_unique.information1 ) ;
       fetch c_OTP_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
        l_min_esd := greatest(l_min_esd,r_OTP_unique.information2);
       open c_OTP(r_OTP_unique.table_route_id,
                r_OTP_unique.information1,
                r_OTP_unique.information2,
                r_OTP_unique.information3 ) ;
       --
       fetch c_OTP into r_OTP ;
       --
       close c_OTP ;
       --
       l_CMBN_PTIP_OPT_ID := get_fk('CMBN_PTIP_OPT_ID', r_OTP.INFORMATION249);
       l_OPT_ID := get_fk('OPT_ID', r_OTP.INFORMATION247);
       l_PGM_ID := get_fk('PGM_ID', r_OTP.INFORMATION260);
       l_PL_TYP_ID := get_fk('PL_TYP_ID', r_OTP.INFORMATION248);
       l_PTIP_ID := get_fk('PTIP_ID', r_OTP.INFORMATION259);
       -- if p_reuse_object_flag = 'Y' then
         if c_OTP_min_max_dates%found then
           -- cursor to find the object
           open c_find_OTP_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_optip_id, -999)  ) ;
           fetch c_find_OTP_in_target into l_new_value ;
           if c_find_OTP_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_OPTIP_F',
                  p_base_key_column => 'OPTIP_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_OTP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'OPTIP_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'OPTIP_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_OTP_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'COPIED'; -- Always created, never Reused
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_OTP_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_OTP_in_target ;
         --
         end if;
       -- end if ;
       --
       close c_OTP_min_max_dates ;
       -- NEVER CREATE HERE. THIS IS DONE IN BEN_OIPL_F, BEN_PLIP_F, BEN_OPT_F and BEN_PTIP_F apis.
       /*
       if not l_object_found_in_target then
         --
         l_current_pk_id := r_OTP.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_OTP.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec then
           -- Call Create routine.
           hr_utility.set_location(' BEN_OPTIP_F CREATE_OPT_PLTYP_IN_PGM ',20);
           BEN_OPT_PLTYP_IN_PGM_API.CREATE_OPT_PLTYP_IN_PGM(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CMBN_PTIP_OPT_ID      => l_CMBN_PTIP_OPT_ID
                          ,P_OPTIP_ID      => l_optip_id
                          ,P_OPT_ID      => l_OPT_ID
                          ,P_OTP_ATTRIBUTE1      => r_OTP.INFORMATION111
                          ,P_OTP_ATTRIBUTE10      => r_OTP.INFORMATION120
                          ,P_OTP_ATTRIBUTE11      => r_OTP.INFORMATION121
                          ,P_OTP_ATTRIBUTE12      => r_OTP.INFORMATION122
                          ,P_OTP_ATTRIBUTE13      => r_OTP.INFORMATION123
                          ,P_OTP_ATTRIBUTE14      => r_OTP.INFORMATION124
                          ,P_OTP_ATTRIBUTE15      => r_OTP.INFORMATION125
                          ,P_OTP_ATTRIBUTE16      => r_OTP.INFORMATION126
                          ,P_OTP_ATTRIBUTE17      => r_OTP.INFORMATION127
                          ,P_OTP_ATTRIBUTE18      => r_OTP.INFORMATION128
                          ,P_OTP_ATTRIBUTE19      => r_OTP.INFORMATION129
                          ,P_OTP_ATTRIBUTE2      => r_OTP.INFORMATION112
                          ,P_OTP_ATTRIBUTE20      => r_OTP.INFORMATION130
                          ,P_OTP_ATTRIBUTE21      => r_OTP.INFORMATION131
                          ,P_OTP_ATTRIBUTE22      => r_OTP.INFORMATION132
                          ,P_OTP_ATTRIBUTE23      => r_OTP.INFORMATION133
                          ,P_OTP_ATTRIBUTE24      => r_OTP.INFORMATION134
                          ,P_OTP_ATTRIBUTE25      => r_OTP.INFORMATION135
                          ,P_OTP_ATTRIBUTE26      => r_OTP.INFORMATION136
                          ,P_OTP_ATTRIBUTE27      => r_OTP.INFORMATION137
                          ,P_OTP_ATTRIBUTE28      => r_OTP.INFORMATION138
                          ,P_OTP_ATTRIBUTE29      => r_OTP.INFORMATION139
                          ,P_OTP_ATTRIBUTE3      => r_OTP.INFORMATION113
                          ,P_OTP_ATTRIBUTE30      => r_OTP.INFORMATION140
                          ,P_OTP_ATTRIBUTE4      => r_OTP.INFORMATION114
                          ,P_OTP_ATTRIBUTE5      => r_OTP.INFORMATION115
                          ,P_OTP_ATTRIBUTE6      => r_OTP.INFORMATION116
                          ,P_OTP_ATTRIBUTE7      => r_OTP.INFORMATION117
                          ,P_OTP_ATTRIBUTE8      => r_OTP.INFORMATION118
                          ,P_OTP_ATTRIBUTE9      => r_OTP.INFORMATION119
                          ,P_OTP_ATTRIBUTE_CATEGORY      => r_OTP.INFORMATION110
                          ,P_PGM_ID      => l_PGM_ID
                          ,P_PL_TYP_ID      => l_PL_TYP_ID
             ,P_PTIP_ID      => l_PTIP_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_optip_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'OPTIP_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_OTP.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_OPTIP_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_OTP_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_OPTIP_F UPDATE_OPT_PLTYP_IN_PGM ',30);
           BEN_OPT_PLTYP_IN_PGM_API.UPDATE_OPT_PLTYP_IN_PGM(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CMBN_PTIP_OPT_ID      => l_CMBN_PTIP_OPT_ID
                          ,P_OPTIP_ID      => l_optip_id
                          ,P_OPT_ID      => l_OPT_ID
                          ,P_OTP_ATTRIBUTE1      => r_OTP.INFORMATION111
                          ,P_OTP_ATTRIBUTE10      => r_OTP.INFORMATION120
                          ,P_OTP_ATTRIBUTE11      => r_OTP.INFORMATION121
                          ,P_OTP_ATTRIBUTE12      => r_OTP.INFORMATION122
                          ,P_OTP_ATTRIBUTE13      => r_OTP.INFORMATION123
                          ,P_OTP_ATTRIBUTE14      => r_OTP.INFORMATION124
                          ,P_OTP_ATTRIBUTE15      => r_OTP.INFORMATION125
                          ,P_OTP_ATTRIBUTE16      => r_OTP.INFORMATION126
                          ,P_OTP_ATTRIBUTE17      => r_OTP.INFORMATION127
                          ,P_OTP_ATTRIBUTE18      => r_OTP.INFORMATION128
                          ,P_OTP_ATTRIBUTE19      => r_OTP.INFORMATION129
                          ,P_OTP_ATTRIBUTE2      => r_OTP.INFORMATION112
                          ,P_OTP_ATTRIBUTE20      => r_OTP.INFORMATION130
                          ,P_OTP_ATTRIBUTE21      => r_OTP.INFORMATION131
                          ,P_OTP_ATTRIBUTE22      => r_OTP.INFORMATION132
                          ,P_OTP_ATTRIBUTE23      => r_OTP.INFORMATION133
                          ,P_OTP_ATTRIBUTE24      => r_OTP.INFORMATION134
                          ,P_OTP_ATTRIBUTE25      => r_OTP.INFORMATION135
                          ,P_OTP_ATTRIBUTE26      => r_OTP.INFORMATION136
                          ,P_OTP_ATTRIBUTE27      => r_OTP.INFORMATION137
                          ,P_OTP_ATTRIBUTE28      => r_OTP.INFORMATION138
                          ,P_OTP_ATTRIBUTE29      => r_OTP.INFORMATION139
                          ,P_OTP_ATTRIBUTE3      => r_OTP.INFORMATION113
                          ,P_OTP_ATTRIBUTE30      => r_OTP.INFORMATION140
                          ,P_OTP_ATTRIBUTE4      => r_OTP.INFORMATION114
                          ,P_OTP_ATTRIBUTE5      => r_OTP.INFORMATION115
                          ,P_OTP_ATTRIBUTE6      => r_OTP.INFORMATION116
                          ,P_OTP_ATTRIBUTE7      => r_OTP.INFORMATION117
                          ,P_OTP_ATTRIBUTE8      => r_OTP.INFORMATION118
                          ,P_OTP_ATTRIBUTE9      => r_OTP.INFORMATION119
                          ,P_OTP_ATTRIBUTE_CATEGORY      => r_OTP.INFORMATION110
                          ,P_PGM_ID      => l_PGM_ID
                          ,P_PL_TYP_ID      => l_PL_TYP_ID
             ,P_PTIP_ID      => l_PTIP_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => hr_api.g_update
           );
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) = r_OTP.information3) then
             --
             BEN_OPT_PLTYP_IN_PGM_API.delete_OPT_PLTYP_IN_PGM(
                --
                p_validate                       => false
                ,p_optip_id                   => l_optip_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
       */
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'OTP',r_otp.information5 );
     --
 end create_OTP_rows;
 --
 ---------------------------------------------------------------
 ----------------------< create_PTY_rows >-----------------------
 ---------------------------------------------------------------
 --
 procedure create_PTY_rows
 (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
 ) is
   --
   l_PL_PCP_ID  number;
   l_GNDR_ALWD_CD ben_pl_pcp_typ.gndr_alwd_cd%type;
   l_MAX_AGE      ben_pl_pcp_typ.max_age%type;
   l_MIN_AGE      ben_pl_pcp_typ.min_age%type;
   l_PCP_TYP_CD   ben_pl_pcp_typ.pcp_typ_cd%type;

   cursor c_unique_PTY(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_PL_PCP_TYP
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_PTY_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_PTY(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_PTY_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     PTY.pl_pcp_typ_id new_value
   from BEN_PL_PCP_TYP PTY
   where
   PTY.PL_PCP_ID              = l_PL_PCP_ID  and
   NVL(PTY.GNDR_ALWD_CD,-999) = NVL(l_GNDR_ALWD_CD,-999) and
   NVL(PTY.MAX_AGE,-999)      = NVL(l_MAX_AGE,-999) and
   NVL(PTY.MIN_AGE,-999)      = NVL(l_MIN_AGE,-999) and
   PTY.PCP_TYP_CD             = l_PCP_TYP_CD and
   PTY.business_group_id      = c_business_group_id
   and   PTY.pl_pcp_typ_id  <> c_new_pk_id
                ;
   --
   --cursor to check the pcp_rpstry_flag
   cursor c_rpstry_flag(c_pl_pcp_id in number) is
       select pcp_rpstry_flag
       from   ben_pl_pcp
       Where  pl_pcp_id = c_pl_pcp_id;

   l_rpstry_flag    ben_pl_pcp.pcp_rpstry_flag%type;
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_PTY                     c_PTY%rowtype;
   l_pl_pcp_typ_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_PTY_unique in c_unique_PTY('PTY') loop
     --
     hr_utility.set_location(' r_PTY_unique.table_route_id '||r_PTY_unique.table_route_id,10);
     hr_utility.set_location(' r_PTY_unique.information1 '||r_PTY_unique.information1,10);
     hr_utility.set_location( 'r_PTY_unique.information2 '||r_PTY_unique.information2,10);
     hr_utility.set_location( 'r_PTY_unique.information3 '||r_PTY_unique.information3,10);
     -- If reuse objects flag is 'Y' then check for the object in the target business group
     -- if found insert the record into PLSql table and exit the loop else try create the
     -- object in the target business group
     --
     l_object_found_in_target := false ;
     l_min_esd := null ;
     l_max_eed := null ;
     --
     open c_PTY(r_PTY_unique.table_route_id,
                r_PTY_unique.information1,
                r_PTY_unique.information2,
                r_PTY_unique.information3 ) ;
     --
     fetch c_PTY into r_PTY ;
     --
     close c_PTY ;
     --
     --UPD START
       --
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_PTY_unique.dml_operation ;
       --
       --UPD END
     l_PL_PCP_ID := get_fk('PL_PCP_ID', r_PTY.INFORMATION257,l_dml_operation);
     l_GNDR_ALWD_CD := r_PTY.INFORMATION12;
     l_MAX_AGE      := r_PTY.INFORMATION294;
     l_MIN_AGE      := r_PTY.INFORMATION293;
     l_PCP_TYP_CD   := r_PTY.INFORMATION11;

     open c_rpstry_flag(l_pl_pcp_id);
     fetch c_rpstry_flag into l_rpstry_flag;
     close c_rpstry_flag;


     if l_rpstry_flag = 'Y' then -- create PTY rows only if the Repository flag is selected in ben_pl_pcp
     --UPD START
     --
     if l_dml_operation = 'UPDATE' then
       --
               l_update := true;
               if r_PTY_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'PL_PCP_TYP_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PL_PCP_TYP_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_PTY_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_PTY_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PTY_unique.table_route_id;
                  --
                  -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ; -- NEW
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
 --DOUBT                 log_data('PTY',l_new_value,l_prefix || r_PTY_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               l_PL_PCP_TYP_ID := r_PTY_unique.information1 ;
               l_object_version_number := r_PTY.information265 ;
               hr_utility.set_location( 'found record for update',10);
           --
     else
     --
     --UPD END

       if p_reuse_object_flag = 'Y' then
           -- cursor to find the object
           open c_find_PTY_in_target( r_PTY_unique.information2  ,l_max_eed,
                                 p_target_business_group_id, nvl(l_pl_pcp_typ_id, -999)  ) ;
           fetch c_find_PTY_in_target into l_new_value ;
           if c_find_PTY_in_target%found then
             --
             if r_PTY_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'PL_PCP_TYP_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PL_PCP_TYP_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_PTY_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PTY_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
           end if;
           close c_find_PTY_in_target ;
         --
       end if ;
       --
   end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_PTY.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --
          if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_PL_PCP_TYP CREATE_PL_CARE_PRVDR_TYP ',20);
           BEN_PL_CARE_PRVDR_TYP_API.CREATE_PL_CARE_PRVDR_TYP(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => NVL(ben_pd_copy_to_ben_one.g_copy_effective_date ,p_effective_date)
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_GNDR_ALWD_CD      => r_PTY.INFORMATION12
             ,P_MAX_AGE      => r_PTY.INFORMATION294
             ,P_MIN_AGE      => r_PTY.INFORMATION293
             ,P_PCP_TYP_CD      => r_PTY.INFORMATION11
             ,P_PL_PCP_ID      => l_PL_PCP_ID
             ,P_PL_PCP_TYP_ID      => l_pl_pcp_typ_id
             ,P_PTY_ATTRIBUTE1      => r_PTY.INFORMATION111
             ,P_PTY_ATTRIBUTE10      => r_PTY.INFORMATION120
             ,P_PTY_ATTRIBUTE11      => r_PTY.INFORMATION121
             ,P_PTY_ATTRIBUTE12      => r_PTY.INFORMATION122
             ,P_PTY_ATTRIBUTE13      => r_PTY.INFORMATION123
             ,P_PTY_ATTRIBUTE14      => r_PTY.INFORMATION124
             ,P_PTY_ATTRIBUTE15      => r_PTY.INFORMATION125
             ,P_PTY_ATTRIBUTE16      => r_PTY.INFORMATION126
             ,P_PTY_ATTRIBUTE17      => r_PTY.INFORMATION127
             ,P_PTY_ATTRIBUTE18      => r_PTY.INFORMATION128
             ,P_PTY_ATTRIBUTE19      => r_PTY.INFORMATION129
             ,P_PTY_ATTRIBUTE2      => r_PTY.INFORMATION112
             ,P_PTY_ATTRIBUTE20      => r_PTY.INFORMATION130
             ,P_PTY_ATTRIBUTE21      => r_PTY.INFORMATION131
             ,P_PTY_ATTRIBUTE22      => r_PTY.INFORMATION132
             ,P_PTY_ATTRIBUTE23      => r_PTY.INFORMATION133
             ,P_PTY_ATTRIBUTE24      => r_PTY.INFORMATION134
             ,P_PTY_ATTRIBUTE25      => r_PTY.INFORMATION135
             ,P_PTY_ATTRIBUTE26      => r_PTY.INFORMATION136
             ,P_PTY_ATTRIBUTE27      => r_PTY.INFORMATION137
             ,P_PTY_ATTRIBUTE28      => r_PTY.INFORMATION138
             ,P_PTY_ATTRIBUTE29      => r_PTY.INFORMATION139
             ,P_PTY_ATTRIBUTE3      => r_PTY.INFORMATION113
             ,P_PTY_ATTRIBUTE30      => r_PTY.INFORMATION140
             ,P_PTY_ATTRIBUTE4      => r_PTY.INFORMATION114
             ,P_PTY_ATTRIBUTE5      => r_PTY.INFORMATION115
             ,P_PTY_ATTRIBUTE6      => r_PTY.INFORMATION116
             ,P_PTY_ATTRIBUTE7      => r_PTY.INFORMATION117
             ,P_PTY_ATTRIBUTE8      => r_PTY.INFORMATION118
             ,P_PTY_ATTRIBUTE9      => r_PTY.INFORMATION119
             ,P_PTY_ATTRIBUTE_CATEGORY      => r_PTY.INFORMATION110
             --
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_pl_pcp_typ_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'PL_PCP_TYP_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_PTY.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_PL_PCP_TYP_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PTY_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
           elsif l_update then
             BEN_PL_CARE_PRVDR_TYP_API.UPDATE_PL_CARE_PRVDR_TYP(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => NVL(ben_pd_copy_to_ben_one.g_copy_effective_date ,p_effective_date)
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_GNDR_ALWD_CD      => r_PTY.INFORMATION12
             ,P_MAX_AGE      => r_PTY.INFORMATION294
             ,P_MIN_AGE      => r_PTY.INFORMATION293
             ,P_PCP_TYP_CD      => r_PTY.INFORMATION11
             ,P_PL_PCP_ID      => l_PL_PCP_ID
             ,P_PL_PCP_TYP_ID      => l_pl_pcp_typ_id
             ,P_PTY_ATTRIBUTE1      => r_PTY.INFORMATION111
             ,P_PTY_ATTRIBUTE10      => r_PTY.INFORMATION120
             ,P_PTY_ATTRIBUTE11      => r_PTY.INFORMATION121
             ,P_PTY_ATTRIBUTE12      => r_PTY.INFORMATION122
             ,P_PTY_ATTRIBUTE13      => r_PTY.INFORMATION123
             ,P_PTY_ATTRIBUTE14      => r_PTY.INFORMATION124
             ,P_PTY_ATTRIBUTE15      => r_PTY.INFORMATION125
             ,P_PTY_ATTRIBUTE16      => r_PTY.INFORMATION126
             ,P_PTY_ATTRIBUTE17      => r_PTY.INFORMATION127
             ,P_PTY_ATTRIBUTE18      => r_PTY.INFORMATION128
             ,P_PTY_ATTRIBUTE19      => r_PTY.INFORMATION129
             ,P_PTY_ATTRIBUTE2      => r_PTY.INFORMATION112
             ,P_PTY_ATTRIBUTE20      => r_PTY.INFORMATION130
             ,P_PTY_ATTRIBUTE21      => r_PTY.INFORMATION131
             ,P_PTY_ATTRIBUTE22      => r_PTY.INFORMATION132
             ,P_PTY_ATTRIBUTE23      => r_PTY.INFORMATION133
             ,P_PTY_ATTRIBUTE24      => r_PTY.INFORMATION134
             ,P_PTY_ATTRIBUTE25      => r_PTY.INFORMATION135
             ,P_PTY_ATTRIBUTE26      => r_PTY.INFORMATION136
             ,P_PTY_ATTRIBUTE27      => r_PTY.INFORMATION137
             ,P_PTY_ATTRIBUTE28      => r_PTY.INFORMATION138
             ,P_PTY_ATTRIBUTE29      => r_PTY.INFORMATION139
             ,P_PTY_ATTRIBUTE3      => r_PTY.INFORMATION113
             ,P_PTY_ATTRIBUTE30      => r_PTY.INFORMATION140
             ,P_PTY_ATTRIBUTE4      => r_PTY.INFORMATION114
             ,P_PTY_ATTRIBUTE5      => r_PTY.INFORMATION115
             ,P_PTY_ATTRIBUTE6      => r_PTY.INFORMATION116
             ,P_PTY_ATTRIBUTE7      => r_PTY.INFORMATION117
             ,P_PTY_ATTRIBUTE8      => r_PTY.INFORMATION118
             ,P_PTY_ATTRIBUTE9      => r_PTY.INFORMATION119
             ,P_PTY_ATTRIBUTE_CATEGORY      => r_PTY.INFORMATION110
             --
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'PTY',r_pty.information5 );
     --
 end create_PTY_rows;

 --
 ---------------------------------------------------------------
 ----------------------< create_PRP_rows >-----------------------
 ---------------------------------------------------------------
 --
 procedure create_PRP_rows
 (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
 ) is
   --
   l_PL_REGY_BOD_ID   number;

   l_PL_REGY_PRPS_CD  ben_pl_regy_prp_f.pl_regy_prps_cd%type;
   cursor c_unique_PRP(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_PL_REGY_PRP_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_PRP_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_PRP(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_PRP_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     PRP.pl_regy_prps_id new_value
   from BEN_PL_REGY_PRP_F PRP
   where
   PRP.PL_REGY_BOD_ID     = l_PL_REGY_BOD_ID  and
   PRP.PL_REGY_PRPS_CD    = l_PL_REGY_PRPS_CD and
   PRP.business_group_id  = c_business_group_id
   and   PRP.pl_regy_prps_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*
   and exists ( select null
                from BEN_PL_REGY_PRP_F PRP1
                where
                PRP1.PL_REGY_BOD_ID     = l_PL_REGY_BOD_ID  and
                PRP1.PL_REGY_PRPS_CD    = l_PL_REGY_PRPS_CD and
                PRP1.business_group_id  = c_business_group_id
                and   PRP1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_PL_REGY_PRP_F PRP2
                where
                PRP2.PL_REGY_BOD_ID     = l_PL_REGY_BOD_ID  and
                PRP2.PL_REGY_PRPS_CD    = l_PL_REGY_PRPS_CD and
                PRP2.business_group_id  = c_business_group_id
                and   PRP2.effective_end_date >= c_effective_end_date )
                ;
*/
   --
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_PRP                     c_PRP%rowtype;
   l_pl_regy_prps_id         number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_PRP_unique in c_unique_PRP('PRP') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_PRP_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_PRP_unique.table_route_id '||r_PRP_unique.table_route_id,10);
       hr_utility.set_location(' r_PRP_unique.information1 '||r_PRP_unique.information1,10);
       hr_utility.set_location( 'r_PRP_unique.information2 '||r_PRP_unique.information2,10);
       hr_utility.set_location( 'r_PRP_unique.information3 '||r_PRP_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       open c_PRP(r_PRP_unique.table_route_id,
                r_PRP_unique.information1,
                r_PRP_unique.information2,
                r_PRP_unique.information3 ) ;
       --
       fetch c_PRP into r_PRP ;
       --
       close c_PRP ;
       --
       l_dml_operation:= r_PRP_unique.dml_operation ;
       l_PL_REGY_BOD_ID := get_fk('PL_REGY_BOD_ID', r_PRP.INFORMATION258,l_dml_operation );
       l_PL_REGY_PRPS_CD := r_PRP.information11;
       --
       l_update := false;
       l_process_date := p_effective_date;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_PRP_unique.information2 and r_PRP_unique.information3 then
               l_update := true;
               if r_PRP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'PL_REGY_PRPS_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PL_REGY_PRPS_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_PRP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_PRP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PRP_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
     --DOUBT             log_data('PRP',l_new_value,l_prefix || r_PRP_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_PRP_min_max_dates(r_PRP_unique.table_route_id, r_PRP_unique.information1 ) ;
       fetch c_PRP_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
        l_min_esd := greatest(l_min_esd,r_PRP_unique.information2);
/*       open c_PRP(r_PRP_unique.table_route_id,
                r_PRP_unique.information1,
                r_PRP_unique.information2,
                r_PRP_unique.information3 ) ;
       --
       fetch c_PRP into r_PRP ;
       --
       close c_PRP ;   */
       --

       if  l_PL_REGY_BOD_ID is null then
         close c_PRP_min_max_dates;
       else
         if p_reuse_object_flag = 'Y' then
           if c_PRP_min_max_dates%found then
             -- cursor to find the object
             open c_find_PRP_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_pl_regy_prps_id, -999)  ) ;
             fetch c_find_PRP_in_target into l_new_value ;
             if c_find_PRP_in_target%found then
               --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_PL_REGY_PRPS_F',
                  p_base_key_column => 'PL_REGY_PRPS_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
               if r_PRP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'PL_REGY_PRPS_ID'  then
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PL_REGY_PRPS_ID' ;
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_PRP_unique.information1 ;
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PRP_unique.table_route_id;
                 --
                 -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                 --
                 BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
               end if ;
               --
               l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
             end if;
             close c_find_PRP_in_target ;
           --
           end if;
         end if ;
         --
         close c_PRP_min_max_dates ;
         end if; --if p_dml_operation
                       --
                       if not l_object_found_in_target OR l_update  then
           --
           l_current_pk_id := r_PRP.information1;
           --
           hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
           hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
           --
           if l_current_pk_id =  l_prev_pk_id  then
             --
             l_first_rec := false ;
             --
           else
             --
             l_first_rec := true ;
             --
           end if ;
           --

           l_effective_date := r_PRP.information2;
           if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
           end if;

        if l_first_rec and not l_update then
             -- Call Create routine.
             hr_utility.set_location(' BEN_PL_REGY_PRP_F CREATE_REGULATORY_PURPOSE ',20);
             BEN_REGULATORY_PURPOSE_API.CREATE_REGULATORY_PURPOSE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_PL_REGY_BOD_ID      => l_PL_REGY_BOD_ID
             ,P_PL_REGY_PRPS_CD      => r_PRP.INFORMATION11
             ,P_PL_REGY_PRPS_ID      => l_PL_REGY_PRPS_ID
             ,P_PRP_ATTRIBUTE1      => r_PRP.INFORMATION111
             ,P_PRP_ATTRIBUTE10      => r_PRP.INFORMATION120
             ,P_PRP_ATTRIBUTE11      => r_PRP.INFORMATION121
             ,P_PRP_ATTRIBUTE12      => r_PRP.INFORMATION122
             ,P_PRP_ATTRIBUTE13      => r_PRP.INFORMATION123
             ,P_PRP_ATTRIBUTE14      => r_PRP.INFORMATION124
             ,P_PRP_ATTRIBUTE15      => r_PRP.INFORMATION125
             ,P_PRP_ATTRIBUTE16      => r_PRP.INFORMATION126
             ,P_PRP_ATTRIBUTE17      => r_PRP.INFORMATION127
             ,P_PRP_ATTRIBUTE18      => r_PRP.INFORMATION128
             ,P_PRP_ATTRIBUTE19      => r_PRP.INFORMATION129
             ,P_PRP_ATTRIBUTE2      => r_PRP.INFORMATION112
             ,P_PRP_ATTRIBUTE20      => r_PRP.INFORMATION130
             ,P_PRP_ATTRIBUTE21      => r_PRP.INFORMATION131
             ,P_PRP_ATTRIBUTE22      => r_PRP.INFORMATION132
             ,P_PRP_ATTRIBUTE23      => r_PRP.INFORMATION133
             ,P_PRP_ATTRIBUTE24      => r_PRP.INFORMATION134
             ,P_PRP_ATTRIBUTE25      => r_PRP.INFORMATION135
             ,P_PRP_ATTRIBUTE26      => r_PRP.INFORMATION136
             ,P_PRP_ATTRIBUTE27      => r_PRP.INFORMATION137
             ,P_PRP_ATTRIBUTE28      => r_PRP.INFORMATION138
             ,P_PRP_ATTRIBUTE29      => r_PRP.INFORMATION139
             ,P_PRP_ATTRIBUTE3      => r_PRP.INFORMATION113
             ,P_PRP_ATTRIBUTE30      => r_PRP.INFORMATION140
             ,P_PRP_ATTRIBUTE4      => r_PRP.INFORMATION114
             ,P_PRP_ATTRIBUTE5      => r_PRP.INFORMATION115
             ,P_PRP_ATTRIBUTE6      => r_PRP.INFORMATION116
             ,P_PRP_ATTRIBUTE7      => r_PRP.INFORMATION117
             ,P_PRP_ATTRIBUTE8      => r_PRP.INFORMATION118
             ,P_PRP_ATTRIBUTE9      => r_PRP.INFORMATION119
             ,P_PRP_ATTRIBUTE_CATEGORY      => r_PRP.INFORMATION110
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
             );
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             -- Update all relevent cer records with new pk_id
             hr_utility.set_location('Before plsql table ',222);
             hr_utility.set_location('new_value id '||l_pl_regy_prps_id,222);
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'PL_REGY_PRP_ID' ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_PRP.information1 ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_PL_REGY_PRPS_ID ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PRP_unique.table_route_id;
             hr_utility.set_location('After plsql table ',222);
             --
             -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
             --
             BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             --
           else
             --
             -- Call Update routine for the pk_id created in prev run .
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             hr_utility.set_location(' BEN_PL_REGY_PRP_F UPDATE_REGULATORY_PURPOSE ',30);
             --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_PRP.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_PRP.information3,
               p_effective_start_date  => r_PRP.information2,
               p_dml_operation         => r_PRP.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_PL_REGY_PRPS_ID   := r_PRP.information1;
             l_object_version_number := r_PRP.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
             BEN_REGULATORY_PURPOSE_API.UPDATE_REGULATORY_PURPOSE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_PL_REGY_BOD_ID      => l_PL_REGY_BOD_ID
             ,P_PL_REGY_PRPS_CD      => r_PRP.INFORMATION11
             ,P_PL_REGY_PRPS_ID      => l_PL_REGY_PRPS_ID
             ,P_PRP_ATTRIBUTE1      => r_PRP.INFORMATION111
             ,P_PRP_ATTRIBUTE10      => r_PRP.INFORMATION120
             ,P_PRP_ATTRIBUTE11      => r_PRP.INFORMATION121
             ,P_PRP_ATTRIBUTE12      => r_PRP.INFORMATION122
             ,P_PRP_ATTRIBUTE13      => r_PRP.INFORMATION123
             ,P_PRP_ATTRIBUTE14      => r_PRP.INFORMATION124
             ,P_PRP_ATTRIBUTE15      => r_PRP.INFORMATION125
             ,P_PRP_ATTRIBUTE16      => r_PRP.INFORMATION126
             ,P_PRP_ATTRIBUTE17      => r_PRP.INFORMATION127
             ,P_PRP_ATTRIBUTE18      => r_PRP.INFORMATION128
             ,P_PRP_ATTRIBUTE19      => r_PRP.INFORMATION129
             ,P_PRP_ATTRIBUTE2      => r_PRP.INFORMATION112
             ,P_PRP_ATTRIBUTE20      => r_PRP.INFORMATION130
             ,P_PRP_ATTRIBUTE21      => r_PRP.INFORMATION131
             ,P_PRP_ATTRIBUTE22      => r_PRP.INFORMATION132
             ,P_PRP_ATTRIBUTE23      => r_PRP.INFORMATION133
             ,P_PRP_ATTRIBUTE24      => r_PRP.INFORMATION134
             ,P_PRP_ATTRIBUTE25      => r_PRP.INFORMATION135
             ,P_PRP_ATTRIBUTE26      => r_PRP.INFORMATION136
             ,P_PRP_ATTRIBUTE27      => r_PRP.INFORMATION137
             ,P_PRP_ATTRIBUTE28      => r_PRP.INFORMATION138
             ,P_PRP_ATTRIBUTE29      => r_PRP.INFORMATION139
             ,P_PRP_ATTRIBUTE3      => r_PRP.INFORMATION113
             ,P_PRP_ATTRIBUTE30      => r_PRP.INFORMATION140
             ,P_PRP_ATTRIBUTE4      => r_PRP.INFORMATION114
             ,P_PRP_ATTRIBUTE5      => r_PRP.INFORMATION115
             ,P_PRP_ATTRIBUTE6      => r_PRP.INFORMATION116
             ,P_PRP_ATTRIBUTE7      => r_PRP.INFORMATION117
             ,P_PRP_ATTRIBUTE8      => r_PRP.INFORMATION118
             ,P_PRP_ATTRIBUTE9      => r_PRP.INFORMATION119
             ,P_PRP_ATTRIBUTE_CATEGORY      => r_PRP.INFORMATION110
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
              ,P_DATETRACK_MODE        => l_datetrack_mode
             );
             --
             end if;  -- l_update
           end if;
           --
           -- Delete the row if it is end dated.
           --
           if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
               trunc(l_max_eed) = r_PRP.information3) then
             --
             BEN_REGULATORY_PURPOSE_API.delete_REGULATORY_PURPOSE(
                --
                p_validate                       => false
                ,p_pl_regy_prps_id               => l_pl_regy_prps_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
           end if;
           --
           l_prev_pk_id := l_current_pk_id ;
           --
         end if;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'PRP',r_prp.information5 );
     --
 end create_PRP_rows;

 --
 ---------------------------------------------------------------
 ----------------------< create_BPP_rows >-----------------------
 ---------------------------------------------------------------
 --
 procedure create_BPP_rows
 (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
 ) is
   --
   l_CMBN_PLIP_ID  number;
   l_CMBN_PTIP_ID  number;
   l_CMBN_PTIP_OPT_ID  number;
   l_COMP_LVL_FCTR_ID  number;
   l_DFLT_EXCS_TRTMT_RL  number;
   l_OIPLIP_ID  number;
   l_PCT_RNDG_RL  number;
   l_PGM_ID  number;
   l_PLIP_ID  number;
   l_PTIP_ID  number;
   l_VAL_RNDG_RL  number;
   --
   cursor c_unique_BPP(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.INFORMATION170 name ,
     cpe.table_route_id
 ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_BNFT_PRVDR_POOL_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 --ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.INFORMATION170, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_BPP_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_BPP(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_BPP_in_target( c_BPP_name          varchar2,
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     BPP.bnft_prvdr_pool_id new_value
   from BEN_BNFT_PRVDR_POOL_F BPP
   where BPP.name               = c_BPP_name
   and   nvl(BPP.CMBN_PLIP_ID,-999) = nvl(l_CMBN_PLIP_ID,-999)
   and   nvl(BPP.CMBN_PTIP_ID,-999) = nvl(l_CMBN_PTIP_ID,-999)
   and   nvl(BPP.CMBN_PTIP_OPT_ID,-999) = nvl(l_CMBN_PTIP_OPT_ID,-999)
   and   nvl(BPP.OIPLIP_ID,-999)     = nvl(l_OIPLIP_ID,-999)
   and   nvl(BPP.PGM_ID,-999)        = nvl(l_PGM_ID,-999)
   and   nvl(BPP.PLIP_ID,-999)       = nvl(l_PLIP_ID,-999)
   and   nvl(BPP.PTIP_ID,-999)       = nvl(l_PTIP_ID,-999)
   and   BPP.business_group_id  = c_business_group_id
   and   BPP.bnft_prvdr_pool_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
   --
/* TEMPIK
   and exists ( select null
                from BEN_BNFT_PRVDR_POOL_F BPP1
                where BPP1.name               = c_BPP_name
                  and   nvl(BPP1.CMBN_PLIP_ID,-999) = nvl(l_CMBN_PLIP_ID,-999)
                  and   nvl(BPP1.CMBN_PTIP_ID,-999) = nvl(l_CMBN_PTIP_ID,-999)
                  and   nvl(BPP1.CMBN_PTIP_OPT_ID,-999) = nvl(l_CMBN_PTIP_OPT_ID,-999)
                  and   nvl(BPP1.OIPLIP_ID,-999)     = nvl(l_OIPLIP_ID,-999)
                  and   nvl(BPP1.PGM_ID,-999)        = nvl(l_PGM_ID,-999)
                  and   nvl(BPP1.PLIP_ID,-999)       = nvl(l_PLIP_ID,-999)
                  and   nvl(BPP1.PTIP_ID,-999)       = nvl(l_PTIP_ID,-999)
                  and   BPP1.business_group_id  = c_business_group_id
                  and   BPP1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_BNFT_PRVDR_POOL_F BPP2
                where BPP2.name               = c_BPP_name
                  and   nvl(BPP2.CMBN_PLIP_ID,-999) = nvl(l_CMBN_PLIP_ID,-999)
                  and   nvl(BPP2.CMBN_PTIP_ID,-999) = nvl(l_CMBN_PTIP_ID,-999)
                  and   nvl(BPP2.CMBN_PTIP_OPT_ID,-999) = nvl(l_CMBN_PTIP_OPT_ID,-999)
                  and   nvl(BPP2.OIPLIP_ID,-999)     = nvl(l_OIPLIP_ID,-999)
                  and   nvl(BPP2.PGM_ID,-999)        = nvl(l_PGM_ID,-999)
                  and   nvl(BPP2.PLIP_ID,-999)       = nvl(l_PLIP_ID,-999)
                  and   nvl(BPP2.PTIP_ID,-999)       = nvl(l_PTIP_ID,-999)
                  and   BPP2.business_group_id  = c_business_group_id
                  and   BPP2.effective_end_date >= c_effective_end_date )
                ;
END TEMPIK */

   cursor c_find_BPP_name_in_target( c_BPP_name          varchar2,
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     BPP.bnft_prvdr_pool_id new_value
   from BEN_BNFT_PRVDR_POOL_F BPP
   where BPP.name               = c_BPP_name
   and   BPP.business_group_id  = c_business_group_id
   and   BPP.bnft_prvdr_pool_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/* TEMPIK
   and exists ( select null
                from BEN_BNFT_PRVDR_POOL_F BPP1
                where BPP1.name               = c_BPP_name
                and   BPP1.business_group_id  = c_business_group_id
                and   BPP1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_BNFT_PRVDR_POOL_F BPP2
                where BPP2.name               = c_BPP_name
                and   BPP2.business_group_id  = c_business_group_id
                and   BPP2.effective_end_date >= c_effective_end_date )
                ;
END TEMPIK*/
   --
    --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_BPP                     c_BPP%rowtype;
   l_bnft_prvdr_pool_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   -- End Prefix Sufix derivation
   for r_BPP_unique in c_unique_BPP('BPP') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_BPP_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       if   p_prefix_suffix_cd = 'PREFIX' then
         l_prefix  := p_prefix_suffix_text ;
       elsif p_prefix_suffix_cd = 'SUFFIX' then
         l_suffix   := p_prefix_suffix_text ;
       else
         l_prefix := null ;
         l_suffix  := null ;
       end if ;
       hr_utility.set_location(' r_BPP_unique.table_route_id '||r_BPP_unique.table_route_id,10);
       hr_utility.set_location(' r_BPP_unique.information1 '||r_BPP_unique.information1,10);
       hr_utility.set_location( 'r_BPP_unique.information2 '||r_BPP_unique.information2,10);
       hr_utility.set_location( 'r_BPP_unique.information3 '||r_BPP_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
          open c_BPP(r_BPP_unique.table_route_id,
                r_BPP_unique.information1,
                r_BPP_unique.information2,
                r_BPP_unique.information3 ) ;
       --
       fetch c_BPP into r_BPP ;
       --
       close c_BPP ;
       --
       l_dml_operation:= r_BPP_unique.dml_operation ;
       l_CMBN_PLIP_ID := get_fk('CMBN_PLIP_ID', r_BPP.INFORMATION239,l_dml_operation );
       l_CMBN_PTIP_ID := get_fk('CMBN_PTIP_ID', r_BPP.INFORMATION236,l_dml_operation );
       l_CMBN_PTIP_OPT_ID := get_fk('CMBN_PTIP_OPT_ID', r_BPP.INFORMATION249,l_dml_operation );
       l_COMP_LVL_FCTR_ID := get_fk('COMP_LVL_FCTR_ID', r_BPP.INFORMATION254,l_dml_operation );
       l_DFLT_EXCS_TRTMT_RL := get_fk('FORMULA_ID', r_BPP.INFORMATION262,l_dml_operation );
       l_OIPLIP_ID := get_fk('OIPLIP_ID', r_BPP.INFORMATION227,l_dml_operation );
       l_PCT_RNDG_RL := get_fk('FORMULA_ID', r_BPP.INFORMATION266,l_dml_operation );
       l_PGM_ID := get_fk('PGM_ID', r_BPP.INFORMATION260,l_dml_operation );
       l_PLIP_ID := get_fk('PLIP_ID', r_BPP.INFORMATION256,l_dml_operation );
       l_PTIP_ID := get_fk('PTIP_ID', r_BPP.INFORMATION259,l_dml_operation );
       l_VAL_RNDG_RL := get_fk('FORMULA_ID', r_BPP.INFORMATION267,l_dml_operation );       --
       --
       l_update := false;
       l_process_date := p_effective_date;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_BPP_unique.information2 and r_BPP_unique.information3 then
               l_update := true;
               if r_BPP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'BNFT_PRVDR_POOL_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'BNFT_PRVDR_POOL_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_BPP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_BPP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_BPP_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
    --DOUBT              log_data('BPP',l_new_value,l_prefix || r_BPP_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_BPP_min_max_dates(r_BPP_unique.table_route_id, r_BPP_unique.information1 ) ;
       fetch c_BPP_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_BPP_unique.information2);
/*      open c_BPP(r_BPP_unique.table_route_id,
                r_BPP_unique.information1,
                r_BPP_unique.information2,
                r_BPP_unique.information3 ) ;
       --
       fetch c_BPP into r_BPP ;
       --
       close c_BPP ;   */
       --
       if p_reuse_object_flag = 'Y' then
         if c_BPP_min_max_dates%found then
           -- cursor to find the object
           open c_find_BPP_in_target( l_prefix || r_BPP_unique.name || l_suffix ,l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_bnft_prvdr_pool_id, -999)  ) ;
           fetch c_find_BPP_in_target into l_new_value ;
           if c_find_BPP_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_BNFT_PRVDR_POOL_F',
                  p_base_key_column => 'BNFT_PRVDR_POOL_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             --
             if r_BPP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'BNFT_PRVDR_POOL_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'BNFT_PRVDR_POOL_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_BPP_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_BPP_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                --
                BEN_PD_COPY_TO_BEN_ONE.log_data('BPP',l_new_value,l_prefix || r_BPP_unique.name || l_suffix ,'REUSED');
                --
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           else
             -- NEW
             if p_prefix_suffix_text is null then
               --
               open c_find_BPP_name_in_target( l_prefix || r_BPP_unique.name|| l_suffix  ,
                               l_min_esd,l_max_eed,
                               p_target_business_group_id, nvl(l_bnft_prvdr_pool_id, -999) ) ;
               fetch c_find_BPP_name_in_target into l_new_value ;
               if c_find_BPP_name_in_target%found then
                 --
                --TEMPIK
                l_dt_rec_found :=   dt_api.check_min_max_dates
                    (p_base_table_name => 'BEN_BNFT_PRVDR_POOL_F',
                     p_base_key_column => 'BNFT_PRVDR_POOL_ID',
                     p_base_key_value  => l_new_value,
                     p_from_date       => l_min_esd,
                     p_to_date         => l_max_eed );
                if l_dt_rec_found THEN
                --END TEMPIK

                 if   p_prefix_suffix_cd = 'PREFIX' then
                   l_prefix  := BEN_PLAN_DESIGN_TXNS_API.g_pgm_pl_prefix_suffix_text ;
                 elsif p_prefix_suffix_cd = 'SUFFIX' then
                   l_suffix   := BEN_PLAN_DESIGN_TXNS_API.g_pgm_pl_prefix_suffix_text ;
                 else
                   l_prefix := null ;
                   l_suffix  := null ;
                 end if ;
                 --
                --TEMPIK
                end if ; -- l_dt_rec_found
                --END TEMPIK
               end if;
             close c_find_BPP_name_in_target ;
             end if;
             --dbms_output.put_line(' Second Cursor ');
           end if;
           close c_find_BPP_in_target ;
         end if;
       end if ;
       --
       close c_BPP_min_max_dates ;
       end if; --if p_dml_operation
                       --
                       if not l_object_found_in_target OR l_update  then
         --
         l_current_pk_id := r_BPP.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --
         --
         ben_pd_copy_to_ben_one.ben_chk_col_len('NAME' ,'BEN_BNFT_PRVDR_POOL_F',l_prefix || r_BPP.information170 || l_suffix);
         --

         l_effective_date := r_BPP.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_BNFT_PRVDR_POOL_F CREATE_BENEFIT_PRVDR_POOL ',20);
           BEN_BENEFIT_PRVDR_POOL_API.CREATE_BENEFIT_PRVDR_POOL(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ALWS_NGTV_CRS_FLAG      => r_BPP.INFORMATION16
             ,P_AUTO_ALCT_EXCS_FLAG      => r_BPP.INFORMATION25
             ,P_BNFT_PRVDR_POOL_ID      => l_bnft_prvdr_pool_id
             ,P_BPP_ATTRIBUTE1      => r_BPP.INFORMATION111
             ,P_BPP_ATTRIBUTE10      => r_BPP.INFORMATION120
             ,P_BPP_ATTRIBUTE11      => r_BPP.INFORMATION121
             ,P_BPP_ATTRIBUTE12      => r_BPP.INFORMATION122
             ,P_BPP_ATTRIBUTE13      => r_BPP.INFORMATION123
             ,P_BPP_ATTRIBUTE14      => r_BPP.INFORMATION124
             ,P_BPP_ATTRIBUTE15      => r_BPP.INFORMATION125
             ,P_BPP_ATTRIBUTE16      => r_BPP.INFORMATION126
             ,P_BPP_ATTRIBUTE17      => r_BPP.INFORMATION127
             ,P_BPP_ATTRIBUTE18      => r_BPP.INFORMATION128
             ,P_BPP_ATTRIBUTE19      => r_BPP.INFORMATION129
             ,P_BPP_ATTRIBUTE2      => r_BPP.INFORMATION112
             ,P_BPP_ATTRIBUTE20      => r_BPP.INFORMATION130
             ,P_BPP_ATTRIBUTE21      => r_BPP.INFORMATION131
             ,P_BPP_ATTRIBUTE22      => r_BPP.INFORMATION132
             ,P_BPP_ATTRIBUTE23      => r_BPP.INFORMATION133
             ,P_BPP_ATTRIBUTE24      => r_BPP.INFORMATION134
             ,P_BPP_ATTRIBUTE25      => r_BPP.INFORMATION135
             ,P_BPP_ATTRIBUTE26      => r_BPP.INFORMATION136
             ,P_BPP_ATTRIBUTE27      => r_BPP.INFORMATION137
             ,P_BPP_ATTRIBUTE28      => r_BPP.INFORMATION138
             ,P_BPP_ATTRIBUTE29      => r_BPP.INFORMATION139
             ,P_BPP_ATTRIBUTE3      => r_BPP.INFORMATION113
             ,P_BPP_ATTRIBUTE30      => r_BPP.INFORMATION140
             ,P_BPP_ATTRIBUTE4      => r_BPP.INFORMATION114
             ,P_BPP_ATTRIBUTE5      => r_BPP.INFORMATION115
             ,P_BPP_ATTRIBUTE6      => r_BPP.INFORMATION116
             ,P_BPP_ATTRIBUTE7      => r_BPP.INFORMATION117
             ,P_BPP_ATTRIBUTE8      => r_BPP.INFORMATION118
             ,P_BPP_ATTRIBUTE9      => r_BPP.INFORMATION119
             ,P_BPP_ATTRIBUTE_CATEGORY      => r_BPP.INFORMATION110
             ,P_CMBN_PLIP_ID      => l_CMBN_PLIP_ID
             ,P_CMBN_PTIP_ID      => l_CMBN_PTIP_ID
             ,P_CMBN_PTIP_OPT_ID      => l_CMBN_PTIP_OPT_ID
             ,P_COMP_LVL_FCTR_ID      => l_COMP_LVL_FCTR_ID
             ,P_DFLT_EXCS_TRTMT_CD      => r_BPP.INFORMATION13
             ,P_DFLT_EXCS_TRTMT_RL      => l_DFLT_EXCS_TRTMT_RL
             ,P_EXCS_ALWYS_FFTD_FLAG      => r_BPP.INFORMATION19
             ,P_EXCS_TRTMT_CD      => r_BPP.INFORMATION15
             ,P_MN_DSTRBL_PCT_NUM      => r_BPP.INFORMATION263
             ,P_MN_DSTRBL_VAL      => r_BPP.INFORMATION293
             ,P_MX_DFCIT_PCT_COMP_NUM      => r_BPP.INFORMATION296
             ,P_MX_DFCIT_PCT_POOL_CRS_NUM      => r_BPP.INFORMATION295
             ,P_MX_DSTRBL_PCT_NUM      => r_BPP.INFORMATION264
             ,P_MX_DSTRBL_VAL      => r_BPP.INFORMATION294
             ,P_NAME      => l_prefix || r_BPP.INFORMATION170 || l_suffix
             ,P_NO_MN_DSTRBL_PCT_FLAG      => r_BPP.INFORMATION21
             ,P_NO_MN_DSTRBL_VAL_FLAG      => r_BPP.INFORMATION22
             ,P_NO_MX_DSTRBL_PCT_FLAG      => r_BPP.INFORMATION23
             ,P_NO_MX_DSTRBL_VAL_FLAG      => r_BPP.INFORMATION24
             ,P_OIPLIP_ID      => l_OIPLIP_ID
             ,P_PCT_RNDG_CD      => r_BPP.INFORMATION11
             ,P_PCT_RNDG_RL      => l_PCT_RNDG_RL
             ,P_PGM_ID      => l_PGM_ID
             ,P_PGM_POOL_FLAG      => r_BPP.INFORMATION18
             ,P_PLIP_ID      => l_PLIP_ID
             ,P_PTIP_ID      => l_PTIP_ID
             ,P_RLOVR_RSTRCN_CD      => r_BPP.INFORMATION14
             ,P_USES_NET_CRS_MTHD_FLAG      => r_BPP.INFORMATION17
             ,P_USE_FOR_PGM_POOL_FLAG      => r_BPP.INFORMATION20
             ,P_VAL_RNDG_CD      => r_BPP.INFORMATION12
             ,P_VAL_RNDG_RL      => l_VAL_RNDG_RL
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_bnft_prvdr_pool_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'BNFT_PRVDR_POOL_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_BPP.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_BNFT_PRVDR_POOL_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_BPP_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
           BEN_PD_COPY_TO_BEN_ONE.log_data('BPP',l_new_value,l_prefix || r_BPP.INFORMATION170 || l_suffix,'COPIED');
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_BNFT_PRVDR_POOL_F UPDATE_BENEFIT_PRVDR_POOL ',30);
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_BPP.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_BPP.information3,
               p_effective_start_date  => r_BPP.information2,
               p_dml_operation         => r_BPP.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_BNFT_PRVDR_POOL_ID   := r_BPP.information1;
             l_object_version_number := r_BPP.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END

           BEN_BENEFIT_PRVDR_POOL_API.UPDATE_BENEFIT_PRVDR_POOL(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
              ,P_ALWS_NGTV_CRS_FLAG      => r_BPP.INFORMATION16
              ,P_AUTO_ALCT_EXCS_FLAG      => r_BPP.INFORMATION25
              ,P_BNFT_PRVDR_POOL_ID      => l_bnft_prvdr_pool_id
              ,P_BPP_ATTRIBUTE1      => r_BPP.INFORMATION111
              ,P_BPP_ATTRIBUTE10      => r_BPP.INFORMATION120
              ,P_BPP_ATTRIBUTE11      => r_BPP.INFORMATION121
              ,P_BPP_ATTRIBUTE12      => r_BPP.INFORMATION122
              ,P_BPP_ATTRIBUTE13      => r_BPP.INFORMATION123
              ,P_BPP_ATTRIBUTE14      => r_BPP.INFORMATION124
              ,P_BPP_ATTRIBUTE15      => r_BPP.INFORMATION125
              ,P_BPP_ATTRIBUTE16      => r_BPP.INFORMATION126
              ,P_BPP_ATTRIBUTE17      => r_BPP.INFORMATION127
              ,P_BPP_ATTRIBUTE18      => r_BPP.INFORMATION128
              ,P_BPP_ATTRIBUTE19      => r_BPP.INFORMATION129
              ,P_BPP_ATTRIBUTE2      => r_BPP.INFORMATION112
              ,P_BPP_ATTRIBUTE20      => r_BPP.INFORMATION130
              ,P_BPP_ATTRIBUTE21      => r_BPP.INFORMATION131
              ,P_BPP_ATTRIBUTE22      => r_BPP.INFORMATION132
              ,P_BPP_ATTRIBUTE23      => r_BPP.INFORMATION133
              ,P_BPP_ATTRIBUTE24      => r_BPP.INFORMATION134
              ,P_BPP_ATTRIBUTE25      => r_BPP.INFORMATION135
              ,P_BPP_ATTRIBUTE26      => r_BPP.INFORMATION136
              ,P_BPP_ATTRIBUTE27      => r_BPP.INFORMATION137
              ,P_BPP_ATTRIBUTE28      => r_BPP.INFORMATION138
              ,P_BPP_ATTRIBUTE29      => r_BPP.INFORMATION139
              ,P_BPP_ATTRIBUTE3      => r_BPP.INFORMATION113
              ,P_BPP_ATTRIBUTE30      => r_BPP.INFORMATION140
              ,P_BPP_ATTRIBUTE4      => r_BPP.INFORMATION114
              ,P_BPP_ATTRIBUTE5      => r_BPP.INFORMATION115
              ,P_BPP_ATTRIBUTE6      => r_BPP.INFORMATION116
              ,P_BPP_ATTRIBUTE7      => r_BPP.INFORMATION117
              ,P_BPP_ATTRIBUTE8      => r_BPP.INFORMATION118
              ,P_BPP_ATTRIBUTE9      => r_BPP.INFORMATION119
              ,P_BPP_ATTRIBUTE_CATEGORY      => r_BPP.INFORMATION110
              ,P_CMBN_PLIP_ID      => l_CMBN_PLIP_ID
              ,P_CMBN_PTIP_ID      => l_CMBN_PTIP_ID
              ,P_CMBN_PTIP_OPT_ID      => l_CMBN_PTIP_OPT_ID
              ,P_COMP_LVL_FCTR_ID      => l_COMP_LVL_FCTR_ID
              ,P_DFLT_EXCS_TRTMT_CD      => r_BPP.INFORMATION13
              ,P_DFLT_EXCS_TRTMT_RL      => l_DFLT_EXCS_TRTMT_RL
              ,P_EXCS_ALWYS_FFTD_FLAG      => r_BPP.INFORMATION19
              ,P_EXCS_TRTMT_CD      => r_BPP.INFORMATION15
              ,P_MN_DSTRBL_PCT_NUM      => r_BPP.INFORMATION263
              ,P_MN_DSTRBL_VAL      => r_BPP.INFORMATION293
              ,P_MX_DFCIT_PCT_COMP_NUM      => r_BPP.INFORMATION296
              ,P_MX_DFCIT_PCT_POOL_CRS_NUM      => r_BPP.INFORMATION295
              ,P_MX_DSTRBL_PCT_NUM      => r_BPP.INFORMATION264
              ,P_MX_DSTRBL_VAL      => r_BPP.INFORMATION294
              ,P_NAME      => l_prefix || r_BPP.INFORMATION170 || l_suffix
              ,P_NO_MN_DSTRBL_PCT_FLAG      => r_BPP.INFORMATION21
              ,P_NO_MN_DSTRBL_VAL_FLAG      => r_BPP.INFORMATION22
              ,P_NO_MX_DSTRBL_PCT_FLAG      => r_BPP.INFORMATION23
              ,P_NO_MX_DSTRBL_VAL_FLAG      => r_BPP.INFORMATION24
              ,P_OIPLIP_ID      => l_OIPLIP_ID
              ,P_PCT_RNDG_CD      => r_BPP.INFORMATION11
              ,P_PCT_RNDG_RL      => l_PCT_RNDG_RL
              ,P_PGM_ID      => l_PGM_ID
              ,P_PGM_POOL_FLAG      => r_BPP.INFORMATION18
              ,P_PLIP_ID      => l_PLIP_ID
              ,P_PTIP_ID      => l_PTIP_ID
              ,P_RLOVR_RSTRCN_CD      => r_BPP.INFORMATION14
              ,P_USES_NET_CRS_MTHD_FLAG      => r_BPP.INFORMATION17
              ,P_USE_FOR_PGM_POOL_FLAG      => r_BPP.INFORMATION20
              ,P_VAL_RNDG_CD      => r_BPP.INFORMATION12
             ,P_VAL_RNDG_RL      => l_VAL_RNDG_RL
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
            ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
            end if;  -- l_update
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_BPP.information3) then
           --
           BEN_BENEFIT_PRVDR_POOL_API.delete_BENEFIT_PRVDR_POOL(
                --
                p_validate                       => false
                ,p_bnft_prvdr_pool_id                   => l_bnft_prvdr_pool_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
   --
   BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'BPP',l_prefix || r_BPP.information170 || l_suffix) ;
   --
 end create_BPP_rows;

 ---------------------------------------------------------------
   ----------------------< create_ACP_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_ACP_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_PGM_ID  number;
   cursor c_unique_ACP(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.information170 name,
     cpe.table_route_id
  ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ACRS_PTIP_CVG_F
   and   tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.information170, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_ACP_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_ACP(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_ACP_in_target( c_ACP_name           varchar2,
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     ACP.acrs_ptip_cvg_id new_value
   from BEN_ACRS_PTIP_CVG_F ACP
   where ACP.name               = c_ACP_name and
   -- nvl(ACP.PGM_ID,-999)     = nvl(l_PGM_ID,-999)  and
   ACP.business_group_id  = c_business_group_id
   and   ACP.acrs_ptip_cvg_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*
   and exists ( select null
                from BEN_ACRS_PTIP_CVG_F ACP1
                where ACP1.name               = c_ACP_name and
                -- nvl(ACP1.PGM_ID,-999)     = nvl(l_PGM_ID,-999)  and
                ACP1.business_group_id  = c_business_group_id
                and   ACP1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ACRS_PTIP_CVG_F ACP2
                where ACP2.name               = c_ACP_name and
                -- nvl(ACP2.PGM_ID,-999)     = nvl(l_PGM_ID,-999)  and
                ACP2.business_group_id  = c_business_group_id
                and   ACP2.effective_end_date >= c_effective_end_date )
                ;
   --
*/
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_ACP                     c_ACP%rowtype;
   l_acrs_ptip_cvg_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_ACP_unique in c_unique_ACP('ACP') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_ACP_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_ACP_unique.table_route_id '||r_ACP_unique.table_route_id,10);
       hr_utility.set_location(' r_ACP_unique.information1 '||r_ACP_unique.information1,10);
       hr_utility.set_location( 'r_ACP_unique.information2 '||r_ACP_unique.information2,10);
       hr_utility.set_location( 'r_ACP_unique.information3 '||r_ACP_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
    --UPD START
    open c_ACP(r_ACP_unique.table_route_id,
                r_ACP_unique.information1,
                r_ACP_unique.information2,
                r_ACP_unique.information3 ) ;
       --
       fetch c_ACP into r_ACP ;
       --
       close c_ACP ;
       l_dml_operation:= r_ACP_unique.dml_operation ;
       --
       -- Only For Use by Create Wizard - Same Business Group
       l_PGM_ID := NVL(get_fk('PGM_ID', r_ACP.information260,l_dml_operation ),
                       r_ACP.information260);
       --
       l_update := false;
       l_process_date := p_effective_date;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_ACP_unique.information2 and r_ACP_unique.information3 then
               l_update := true;
               if r_ACP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'ACRS_PTIP_CVG_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ACRS_PTIP_CVG_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ACP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_ACP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ACP_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
   --DOUBT               log_data('ACP',l_new_value,l_prefix || r_ACP_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_ACP_min_max_dates(r_ACP_unique.table_route_id, r_ACP_unique.information1 ) ;
       fetch c_ACP_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_ACP_unique.information2);
 /*      open c_ACP(r_ACP_unique.table_route_id,
                r_ACP_unique.information1,
                r_ACP_unique.information2,
                r_ACP_unique.information3 ) ;
       --
       fetch c_ACP into r_ACP ;
       --
       close c_ACP ;  */

       if p_reuse_object_flag = 'Y' then
         if c_ACP_min_max_dates%found then
           -- cursor to find the object
           open c_find_ACP_in_target( l_prefix || r_ACP_unique.name||l_suffix ,l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_acrs_ptip_cvg_id, -999)  ) ;
           fetch c_find_ACP_in_target into l_new_value ;
           if c_find_ACP_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_ACRS_PTIP_CVG_F',
                  p_base_key_column => 'ACRS_PTIP_CVG_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_ACP_unique.information1 <> nvl(ben_pd_copy_to_ben_one.g_pk_tbl(ben_pd_copy_to_ben_one.g_count-1).old_value, -999) or
                nvl(ben_pd_copy_to_ben_one.g_pk_tbl(ben_pd_copy_to_ben_one.g_count-1).pk_id_column, '999') <>  'ACRS_PTIP_CVG_ID'  then
                ben_pd_copy_to_ben_one.g_pk_tbl(ben_pd_copy_to_ben_one.g_count).pk_id_column    := 'ACRS_PTIP_CVG_ID' ;
                ben_pd_copy_to_ben_one.g_pk_tbl(ben_pd_copy_to_ben_one.g_count).old_value       := r_ACP_unique.information1 ;
                ben_pd_copy_to_ben_one.g_pk_tbl(ben_pd_copy_to_ben_one.g_count).new_value       := l_new_value ;
                ben_pd_copy_to_ben_one.g_pk_tbl(ben_pd_copy_to_ben_one.g_count).copy_reuse_type := 'REUSED';
                ben_pd_copy_to_ben_one.g_pk_tbl(ben_pd_copy_to_ben_one.g_count).table_route_id  := r_ACP_unique.table_route_id;
                --
                -- update_cer_with_target( ben_pd_copy_to_ben_one.g_pk_tbl(ben_pd_copy_to_ben_one.g_count) , p_copy_entity_txn_id) ;
                --
                ben_pd_copy_to_ben_one.g_count := ben_pd_copy_to_ben_one.g_count + 1 ;
                ben_pd_copy_to_ben_one.log_data('ACP',l_new_value,l_prefix || r_ACP_unique.name|| l_suffix,'REUSED');
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_ACP_in_target ;
         --
         end if;
       end if ;
       --
       close c_ACP_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then
         --
         l_current_pk_id := r_ACP.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --
         ben_pd_copy_to_ben_one.ben_chk_col_len('NAME' ,'BEN_ACRS_PTIP_CVG_F',l_prefix || r_ACP.information170 || l_suffix);
         --

         l_effective_date := r_ACP.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ACRS_PTIP_CVG_F CREATE_ACRS_PTIP_CVG ',20);
           BEN_ACRS_PTIP_CVG_API.CREATE_ACRS_PTIP_CVG(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
            ,P_ACRS_PTIP_CVG_ID      => l_acrs_ptip_cvg_id
            ,P_APC_ATTRIBUTE1      => r_ACP.INFORMATION111
            ,P_APC_ATTRIBUTE10      => r_ACP.INFORMATION120
            ,P_APC_ATTRIBUTE11      => r_ACP.INFORMATION121
            ,P_APC_ATTRIBUTE12      => r_ACP.INFORMATION122
            ,P_APC_ATTRIBUTE13      => r_ACP.INFORMATION123
            ,P_APC_ATTRIBUTE14      => r_ACP.INFORMATION124
            ,P_APC_ATTRIBUTE15      => r_ACP.INFORMATION125
            ,P_APC_ATTRIBUTE16      => r_ACP.INFORMATION126
            ,P_APC_ATTRIBUTE17      => r_ACP.INFORMATION127
            ,P_APC_ATTRIBUTE18      => r_ACP.INFORMATION128
            ,P_APC_ATTRIBUTE19      => r_ACP.INFORMATION129
            ,P_APC_ATTRIBUTE2      => r_ACP.INFORMATION112
            ,P_APC_ATTRIBUTE20      => r_ACP.INFORMATION130
            ,P_APC_ATTRIBUTE21      => r_ACP.INFORMATION131
            ,P_APC_ATTRIBUTE22      => r_ACP.INFORMATION132
            ,P_APC_ATTRIBUTE23      => r_ACP.INFORMATION133
            ,P_APC_ATTRIBUTE24      => r_ACP.INFORMATION134
            ,P_APC_ATTRIBUTE25      => r_ACP.INFORMATION135
            ,P_APC_ATTRIBUTE26      => r_ACP.INFORMATION136
            ,P_APC_ATTRIBUTE27      => r_ACP.INFORMATION137
            ,P_APC_ATTRIBUTE28      => r_ACP.INFORMATION138
            ,P_APC_ATTRIBUTE29      => r_ACP.INFORMATION139
            ,P_APC_ATTRIBUTE3      => r_ACP.INFORMATION113
            ,P_APC_ATTRIBUTE30      => r_ACP.INFORMATION140
            ,P_APC_ATTRIBUTE4      => r_ACP.INFORMATION114
            ,P_APC_ATTRIBUTE5      => r_ACP.INFORMATION115
            ,P_APC_ATTRIBUTE6      => r_ACP.INFORMATION116
            ,P_APC_ATTRIBUTE7      => r_ACP.INFORMATION117
            ,P_APC_ATTRIBUTE8      => r_ACP.INFORMATION118
            ,P_APC_ATTRIBUTE9      => r_ACP.INFORMATION119
            ,P_APC_ATTRIBUTE_CATEGORY      => r_ACP.INFORMATION110
            ,P_MN_CVG_ALWD_AMT      => r_ACP.INFORMATION294
            ,P_MX_CVG_ALWD_AMT      => r_ACP.INFORMATION293
            ,P_NAME      => l_prefix || r_ACP.INFORMATION170 || l_suffix
            ,P_PGM_ID      => l_PGM_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_acrs_ptip_cvg_id,222);
           ben_pd_copy_to_ben_one.g_pk_tbl(ben_pd_copy_to_ben_one.g_count).pk_id_column := 'ACRS_PTIP_CVG_ID' ;
           ben_pd_copy_to_ben_one.g_pk_tbl(ben_pd_copy_to_ben_one.g_count).old_value    := r_ACP.information1 ;
           ben_pd_copy_to_ben_one.g_pk_tbl(ben_pd_copy_to_ben_one.g_count).new_value    := l_ACRS_PTIP_CVG_ID ;
           ben_pd_copy_to_ben_one.g_pk_tbl(ben_pd_copy_to_ben_one.g_count).copy_reuse_type  := 'COPIED';
           ben_pd_copy_to_ben_one.g_pk_tbl(ben_pd_copy_to_ben_one.g_count).table_route_id  := r_ACP_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( ben_pd_copy_to_ben_one.g_pk_tbl(ben_pd_copy_to_ben_one.g_count),p_copy_entity_txn_id ) ;
           --
           ben_pd_copy_to_ben_one.g_count := ben_pd_copy_to_ben_one.g_count + 1 ;
           ben_pd_copy_to_ben_one.log_data('ACP',l_new_value,l_prefix || r_ACP.information170|| l_suffix,'COPIED');
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ACRS_PTIP_CVG_F UPDATE_ACRS_PTIP_CVG ',30);
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_ACP.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_ACP.information3,
               p_effective_start_date  => r_ACP.information2,
               p_dml_operation         => r_ACP.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ACRS_PTIP_CVG_ID   := r_ACP.information1;
             l_object_version_number := r_ACP.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           BEN_ACRS_PTIP_CVG_API.UPDATE_ACRS_PTIP_CVG(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ACRS_PTIP_CVG_ID      => l_acrs_ptip_cvg_id
             ,P_APC_ATTRIBUTE1      => r_ACP.INFORMATION111
             ,P_APC_ATTRIBUTE10      => r_ACP.INFORMATION120
             ,P_APC_ATTRIBUTE11      => r_ACP.INFORMATION121
             ,P_APC_ATTRIBUTE12      => r_ACP.INFORMATION122
             ,P_APC_ATTRIBUTE13      => r_ACP.INFORMATION123
             ,P_APC_ATTRIBUTE14      => r_ACP.INFORMATION124
             ,P_APC_ATTRIBUTE15      => r_ACP.INFORMATION125
             ,P_APC_ATTRIBUTE16      => r_ACP.INFORMATION126
             ,P_APC_ATTRIBUTE17      => r_ACP.INFORMATION127
             ,P_APC_ATTRIBUTE18      => r_ACP.INFORMATION128
             ,P_APC_ATTRIBUTE19      => r_ACP.INFORMATION129
             ,P_APC_ATTRIBUTE2      => r_ACP.INFORMATION112
             ,P_APC_ATTRIBUTE20      => r_ACP.INFORMATION130
             ,P_APC_ATTRIBUTE21      => r_ACP.INFORMATION131
             ,P_APC_ATTRIBUTE22      => r_ACP.INFORMATION132
             ,P_APC_ATTRIBUTE23      => r_ACP.INFORMATION133
             ,P_APC_ATTRIBUTE24      => r_ACP.INFORMATION134
             ,P_APC_ATTRIBUTE25      => r_ACP.INFORMATION135
             ,P_APC_ATTRIBUTE26      => r_ACP.INFORMATION136
             ,P_APC_ATTRIBUTE27      => r_ACP.INFORMATION137
             ,P_APC_ATTRIBUTE28      => r_ACP.INFORMATION138
             ,P_APC_ATTRIBUTE29      => r_ACP.INFORMATION139
             ,P_APC_ATTRIBUTE3      => r_ACP.INFORMATION113
             ,P_APC_ATTRIBUTE30      => r_ACP.INFORMATION140
             ,P_APC_ATTRIBUTE4      => r_ACP.INFORMATION114
             ,P_APC_ATTRIBUTE5      => r_ACP.INFORMATION115
             ,P_APC_ATTRIBUTE6      => r_ACP.INFORMATION116
             ,P_APC_ATTRIBUTE7      => r_ACP.INFORMATION117
             ,P_APC_ATTRIBUTE8      => r_ACP.INFORMATION118
             ,P_APC_ATTRIBUTE9      => r_ACP.INFORMATION119
             ,P_APC_ATTRIBUTE_CATEGORY      => r_ACP.INFORMATION110
             ,P_MN_CVG_ALWD_AMT      => r_ACP.INFORMATION294
             ,P_MX_CVG_ALWD_AMT      => r_ACP.INFORMATION293
             ,P_NAME      => l_prefix || r_ACP.INFORMATION170 || l_suffix
             ,P_PGM_ID      => l_PGM_ID

             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           end if;  -- l_update
         end if;
         --
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
           trunc(l_max_eed) = r_ACP.information3) then
             --
             BEN_ACRS_PTIP_CVG_API.delete_ACRS_PTIP_CVG(
                --
                p_validate                       => false
                ,p_acrs_ptip_cvg_id                   => l_acrs_ptip_cvg_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'ACP',l_prefix || r_ACP.information170 || l_suffix) ;
     --
 end create_ACP_rows;

procedure create_final_intersect_rows
(
   p_validate                       in  number     default 0 -- false
  ,p_copy_entity_txn_id             in  number
  ,p_effective_date                 in  date
  ,p_prefix_suffix_text             in  varchar2  default null
  ,p_reuse_object_flag              in  varchar2  default null
  ,p_target_business_group_id       in  varchar2  default null
  ,p_prefix_suffix_cd               in  varchar2  default null
 ) is
  begin

    --
    -- Create all Service Area Postal Zip Range rows
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('SAZ') then
      BEN_PD_COPY_TO_BEN_TWO.create_SAZ_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    --
    -- Create all oipl rows. Moved these calls to End
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('COP') then
      BEN_PD_COPY_TO_BEN_TWO.create_COP_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    --
    -- Create all DDR rows, which could be attached to opt, oipl, pl levels..
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('DDR') then
      BEN_PD_COPY_TO_BEN_TWO.create_DDR_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    --
    -- Create all DRR rows, which could be attached to DRR rows.
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('DRR') then
      BEN_PD_COPY_TO_BEN_TWO.create_DRR_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    --
    -- These records needs to be created at the end of the process.
    -- PEO records are created at PGM,PTIP,PLIP,PL and OIPLIP level
    -- This call creates the intersections between all these levels and ler.
    --
    --XXXOIPL
    --
    -- CPY records are created at PGM and PL level
    -- This call creates the intersections between all these levels and yr_perds.
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('CPY') then
      BEN_PD_COPY_TO_BEN_TWO.create_CPY_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('CWG') then
      BEN_PD_COPY_TO_BEN_TWO.create_CWG_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );

      create_CRI_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_reuse_object_flag         => p_reuse_object_flag
      );
    end if;
    --
    --
    -- PAT records are created at PGM and PL level
    -- This call creates the intersections between all these levels and Action type.
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('PAT') then
      BEN_PD_COPY_TO_BEN_TWO.create_PAT_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;

    --
    -- PET records are created at PGM and PL level
    -- This call creates the intersections between all these levels and enrt type cycl code.
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('PET') then
      BEN_PD_COPY_TO_BEN_TWO.create_PET_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    --
    -- ENP records are created at PGM and PL level
    -- This call creates the intersections between all these levels and year periods.
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('ENP') then
      BEN_PD_COPY_TO_BEN_TWO.create_ENP_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    --
    --
    -- LEN records are created at PGM and PL level
    -- This call creates the intersections between all these levels and ler.
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('LEN') then
      BEN_PD_COPY_TO_BEN_TWO.create_LEN_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    --
    --
    -- LOP records are created at OIPL and LER level
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('LOP') then
      BEN_PD_COPY_TO_BEN_TWO.create_LOP_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    --
    --
    -- ERP records are created at LEN or ENP level
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('ERP') then
      BEN_PD_COPY_TO_BEN_TWO.create_ERP_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    --
    --
    -- SER records are created at ENP level
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('SER') then
      BEN_PD_COPY_TO_BEN_TWO.create_SER_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    --
    --
    -- ECF records are created at PL and OIPL level
    -- This call creates the intersections between all these levels and
    -- enrt_ctfn_cd
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('ECF') then
      BEN_PD_COPY_TO_BEN_TWO.create_ECF_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    --
    -- CPO records are created at PL and GPM level
    -- This call creates the intersections between these levels and
    -- Organization
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('CPO') then
      BEN_PD_COPY_TO_BEN_TWO.create_CPO_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    -- CPR records are created at CPO level
    -- This call creates the child records for the CPO level
    --
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('CPR') then
      BEN_PD_COPY_TO_BEN_TWO.create_CPR_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;

    -- RGR records are created at PL and GPM level
    -- This call creates the intersections between these levels and
    -- reporting group
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('RGR') then
      BEN_PD_COPY_TO_BEN_TWO.create_RGR_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    --
    -- PRG records are created at PL and RGR level
    -- This call creates the intersections between these levels and
    -- REGN
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('PRG') then
      BEN_PD_COPY_TO_BEN_TWO.create_PRG_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;

    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('ACP') then
      BEN_PD_COPY_TO_BEN_two.create_ACP_rows
      (p_validate                     => p_validate
      ,p_copy_entity_txn_id           => p_copy_entity_txn_id
      ,p_effective_date               => p_effective_date
      ,p_prefix_suffix_text           => p_prefix_suffix_text
      ,p_reuse_object_flag            => p_reuse_object_flag
      ,p_target_business_group_id     => p_target_business_group_id
      ,p_prefix_suffix_cd             => p_prefix_suffix_cd);
    end if;
    --

    -- Start of Intersections for the PTIP
    -- CTP records are created at Program and Plan Intersection
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('CTP') then
      BEN_PD_COPY_TO_BEN_TWO.create_CTP_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    -- ADE records are created at PGM,PTIP and PL level
    -- This call creates the intersections between all these levels and
    -- ben_dpnt_cvg_eligy_prfl_f
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('ADE') then
      BEN_PD_COPY_TO_BEN_TWO.create_ADE_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    --
    -- LDC records are created at PGM,PTIP and PL level
    -- This call creates the intersections between all these levels and
    -- ben_ler_f
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('LDC') then
      BEN_PD_COPY_TO_BEN_TWO.create_LDC_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    --
    -- LCC records are created at LDC and certification type
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('LCC') then
      BEN_PD_COPY_TO_BEN_TWO.create_LCC_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    -- WPT records are created at PTIP and wv_prtn_rsn_cd intersection
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('WPT') then
      BEN_PD_COPY_TO_BEN_TWO.create_WPT_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    -- WCT records are created at WPT and wv_prtn_ctfn_typ_cd intersection
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('WCT') then
      BEN_PD_COPY_TO_BEN_TWO.create_WCT_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    -- LCT records are created at PTIP and LER_ID intersection
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('LCT') then
      BEN_PD_COPY_TO_BEN_TWO.create_LCT_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    -- PYD records are created at PTIP and dependent certification type intersection
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('PYD') then
      BEN_PD_COPY_TO_BEN_TWO.create_PYD_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    -- PLIP Rows start here
    -- CPP records are created at PGM and PLN intersection
    -- XXXPLIP
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('CPP') then
      BEN_PD_COPY_TO_BEN_TWO.create_CPP_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;

    -- OIPLIP Always Reuse, never create
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('OPP') then
      BEN_PD_COPY_TO_BEN_TWO.create_OPP_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    --
   -- OPTIP Always Reuse, never create
  /* Commented out for Now - Not Complete
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('OTP') then
      BEN_PD_COPY_TO_BEN_TWO.create_OTP_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
  */
    --
    -- Moved call from bepdccp1.pkb so that Benefit Pools are
    -- created after PLIP, PTIP and OIPLIP
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('BPP') then
      BEN_PD_COPY_TO_BEN_TWO.create_BPP_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    --

    -- LBR records are created at PLIP and LER intersection
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('LBR') then
      BEN_PD_COPY_TO_BEN_TWO.create_LBR_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    --
    -- LPR1 records are created at PLIP and LER intersection
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('LPR1') then
      BEN_PD_COPY_TO_BEN_TWO.create_LPR1_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    -- Plan Intersections
    -- VGS records are created at PL and GOS intersection
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('VGS') then
      BEN_PD_COPY_TO_BEN_TWO.create_VGS_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    -- PCT records are created at VGS and certification type intersection
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('PCT') then
      BEN_PD_COPY_TO_BEN_TWO.create_PCT_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    -- VRP records as child record of PL
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('VRP') then
      BEN_PD_COPY_TO_BEN_TWO.create_VRP_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    --
    -- WPN records are intersection of PL and wv_prtn_rsn_cd
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('WPN') then
      BEN_PD_COPY_TO_BEN_TWO.create_WPN_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    -- WCN records are intersection of WPN and wv_prtn_ctfn_typ_cd
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('WCN') then
      BEN_PD_COPY_TO_BEN_TWO.create_WCN_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    --
    -- BRC records are intersection of PL and enrt_ctfn_typ_cd
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('BRC') then
      BEN_PD_COPY_TO_BEN_TWO.create_BRC_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    -- LBC records are intersection of ler_bnft_rstrn_id  and enrt_ctfn_typ_cd
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('LBC') then
      BEN_PD_COPY_TO_BEN_TWO.create_LBC_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    -- LRE records are intersection of PL,OIPL with LER
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('LRE') then
      BEN_PD_COPY_TO_BEN_TWO.create_LRE_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    -- LNC records are intersection of LRE and enrt_ctfn_typ_cd
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('LNC') then
      BEN_PD_COPY_TO_BEN_TWO.create_LNC_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    -- LPE records are intersection of PLN and LER
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('LPE') then
      BEN_PD_COPY_TO_BEN_TWO.create_LPE_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    -- PND records are intersection of PLN and dpnt_cvg_ctfn_typ_cd
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('PND') then
      BEN_PD_COPY_TO_BEN_TWO.create_PND_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    -- PCX records are intersection of PLN and bnf_ctfn_typ_cd
    --
    --XXXPGM
    --
    -- These records needs to be created at the end of the process.
    -- PEO records are created at PGM,PTIP,PLIP,PL and OIPLIP level
    -- This call creates the intersections between all these levels and ler.
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('PEO') then
      BEN_PD_COPY_TO_BEN_TWO.create_PEO_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    --
    -- EPA records are created at PGM,PTIP,PLIP,PL and OIPLIP level
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EPA') then
      BEN_PD_COPY_TO_BEN_TWO.create_EPA_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    --
    -- CEP records are created at the intersection of EPA and ELP
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('CEP') then
      BEN_PD_COPY_TO_BEN_TWO.create_CEP_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    -- CER records are created at the intersection of EPA and FORMULA
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('CER') then
      BEN_PD_COPY_TO_BEN_TWO.create_CER_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    --
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('PCX') then
      BEN_PD_COPY_TO_BEN_TWO.create_PCX_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    --
    -- PCP records are intersection of PLN and ben_pl_pcp
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('PCP') then
      BEN_PD_COPY_TO_BEN_TWO.create_PCP_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    --
    -- PTY records are child records of PCP
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('PTY') then
      BEN_PD_COPY_TO_BEN_TWO.create_PTY_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    --
    -- PRB records are child records of PLN OR BNR
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('PRB') then
      BEN_PD_COPY_TO_BEN_TWO.create_PRB_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    --
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('PRP') then
      BEN_PD_COPY_TO_BEN_TWO.create_PRP_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    --

  end create_final_intersect_rows ;
--
procedure create_pgm_intersect_rows(
   p_validate                       in  number     default 0 -- false
  ,p_copy_entity_txn_id             in  number
  ,p_effective_date                 in  date
  ,p_prefix_suffix_text             in  varchar2  default null
  ,p_reuse_object_flag              in  varchar2  default null
  ,p_target_business_group_id       in  varchar2  default null
  ,p_prefix_suffix_cd               in  varchar2  default null
 ) is
  begin
    --
    -- First try creating all the leaf rows.
    --
--TCS PDW Integration ENH
	if(BEN_PD_COPY_TO_BEN_TWO.g_copy_entity_txn_id <> p_copy_entity_txn_id) then

	   BEN_PD_COPY_TO_BEN_TWO.g_copy_entity_txn_id := p_copy_entity_txn_id;

	       open BEN_PD_COPY_TO_BEN_TWO.g_copy_entity_txn(p_copy_entity_txn_id) ;
		fetch  BEN_PD_COPY_TO_BEN_TWO.g_copy_entity_txn into BEN_PD_COPY_TO_BEN_TWO.g_row_type_cd;
	       close BEN_PD_COPY_TO_BEN_TWO.g_copy_entity_txn;

	end if;

-- TCS PDW Integration passed the parameter BEN_PD_COPY_TO_BEN_TWO.g_row_type_cd to create_all_leaf_ben_rows
    BEN_PD_COPY_TO_BEN_ONE.create_all_leaf_ben_rows(
     p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd
    ,p_txn_row_type_cd      => BEN_PD_COPY_TO_BEN_TWO.g_row_type_cd
    );

   if (BEN_PD_COPY_TO_BEN_TWO.g_row_type_cd <> 'ELP') then
--TCS PDW Integration ENH
    --
    -- ben_popl_enrt_typ_cycl_f rows are created as pgm and pl, yrp, wyp rows
    -- are created as part of leaf call and above call.
    --
    BEN_PD_COPY_TO_BEN_TWO.create_final_intersect_rows(
     p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd
    );
    --
    -- LGE records are created at Only PGM level
    -- This call creates the intersections between the program levels and ler.
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('LGE') then
      BEN_PD_COPY_TO_BEN_TWO.create_LGE_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );
    end if;
    --
    -- PGC records are created at Only PGM level
    -- This call creates the intersections between the program levels and dpnt_cvg_ctfn_typ_cd.
    --
    if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('PGC') then
      BEN_PD_COPY_TO_BEN_TWO.create_PGC_rows(
       p_validate                  => p_validate
      ,p_copy_entity_txn_id        => p_copy_entity_txn_id
      ,p_effective_date            => p_effective_date
      ,p_prefix_suffix_text        => p_prefix_suffix_text
      ,p_reuse_object_flag         => p_reuse_object_flag
      ,p_target_business_group_id  => p_target_business_group_id
      ,p_prefix_suffix_cd          => p_prefix_suffix_cd
      );

    end if;
--TCS PDW Integration ENH

end if;
    --
    --
    -- Now call eligibility profile creation.
    --

    BEN_PD_COPY_TO_BEN_four.create_all_elig_prf_ben_rows
    (
     p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd
    );
    --
    -- Now make call to rate and all other ows creation
    --
--TCS PDW Integration ENH

   if (BEN_PD_COPY_TO_BEN_TWO.g_row_type_cd <> 'ELP') then
--TCS PDW Integration ENH

    BEN_PD_COPY_TO_BEN_five.create_rate_rows
    (
     p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd
    );
    --
    -- Now call rate profile creation.
    --
    BEN_PD_COPY_TO_BEN_three.create_all_rt_prf_ben_rows
    (
     p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd
    );
--TCS PDW Integration ENH
end if;
--TCS PDW Integration ENH
    --
  end create_pgm_intersect_rows ;
  --
procedure create_stg_to_ben_rows
(
   p_validate                       in  number     default 0 -- false
  ,p_copy_entity_txn_id             in  number
  ,p_effective_date                 in  date
  ,p_prefix_suffix_text             in  varchar2  default null
  ,p_reuse_object_flag              in  varchar2  default null
  ,p_target_business_group_id       in  varchar2  default null
  ,p_prefix_suffix_cd               in  varchar2  default null
  ,p_effective_date_to_copy         in  date  default null
 ) is

    cursor c_transaction_category(c_copy_entity_txn_id in number) is
    select tcg.short_name
    from pqh_copy_entity_txns cet,
         pqh_transaction_categories tcg
    where cet.copy_entity_txn_id = c_copy_entity_txn_id
    and   cet.transaction_category_id = tcg.transaction_category_id;

    l_transaction_category  c_transaction_category%rowtype;

  begin
    --
    --Call Create PGM ROWS
    --
    -- To set the Global variable for Mapping data.
    set_mapping(p_copy_entity_txn_id) ;
    --
    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl.delete;
    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(0) := null ;
    BEN_PD_COPY_TO_BEN_ONE.g_count := 1 ;
    --
    -- Initialize Logging Tables
    BEN_PD_COPY_TO_BEN_ONE.init_log_tbl;
    --

    -- Update information9 to NULL
    -- Required for reusing Copy Process

    update ben_copy_entity_results
    set information9 = null
    where copy_entity_txn_id  = p_copy_entity_txn_id;


    BEN_PD_COPY_TO_BEN_ONE.init_table_data_in_cer(p_copy_entity_txn_id);

    -- Initialize global variable for Effective Date to Copy
    BEN_PD_COPY_TO_BEN_ONE.g_copy_effective_date := p_effective_date_to_copy;

    open c_transaction_category(p_copy_entity_txn_id);
    fetch c_transaction_category into l_transaction_category;
    close c_transaction_category;

    -- Initialize global variable for Transaction Category
    BEN_PD_COPY_TO_BEN_ONE.g_transaction_category := l_transaction_category.short_name;

    BEN_PD_COPY_TO_BEN_TWO.create_pgm_intersect_rows(
     p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd
    );

    BEN_PD_COPY_TO_BEN_ONE.g_copy_effective_date := null;
    BEN_PD_COPY_TO_BEN_ONE.g_transaction_category := null;
    --
    --
  end create_stg_to_ben_rows ;
  --
end BEN_PD_COPY_TO_BEN_TWO;

/
