--------------------------------------------------------
--  DDL for Package Body PAY_RESTRICT_VAL_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PAY_RESTRICT_VAL_PKG" AS
/* $Header: persv01t.pkb 120.3.12010000.2 2008/09/15 07:37:50 brsinha ship $ */
------------------------------------------------------------------------------
PROCEDURE UNIQUENESS_CHECK(P_VALUE                      VARCHAR2,
                           P_CUSTOMIZED_RESTRICTION_ID  NUMBER,
                           P_CUSTOMIZED_RESTRICTION_ID2 NUMBER,
                           P_ROWID                      VARCHAR2,
                           P_APPLICATION_ID             NUMBER,
                           P_FORM_NAME                  VARCHAR2,
                           P_RESTRICTION_CODE           VARCHAR2) IS
L_DUMMY1 number;
L_DUMMY2 number;
CURSOR C_UNIQUENESS IS
 SELECT 1
 FROM   PAY_RESTRICTION_VALUES PRV
 WHERE  PRV.VALUE                     = P_VALUE
 AND    PRV.CUSTOMIZED_RESTRICTION_ID = P_CUSTOMIZED_RESTRICTION_ID
 AND    PRV.RESTRICTION_CODE          = P_RESTRICTION_CODE
 AND   (PRV.ROWID                   <> P_ROWID
                                     OR P_ROWID IS NULL);
CURSOR C_MULTIPLE_RES IS
SELECT 1
FROM   PAY_RESTRICTION_PARAMETERS PRP
WHERE  PRP.APPLICATION_ID             =  P_APPLICATION_ID
AND    PRP.FORM_NAME                  =  P_FORM_NAME
AND    PRP.RESTRICTION_CODE           =  P_RESTRICTION_CODE
AND    PRP.MULTIPLE_RESTRICTIONS_FLAG = 'N'
AND    EXISTS
       (SELECT 1
        FROM   PAY_RESTRICTION_VALUES PRV
        WHERE  PRV.CUSTOMIZED_RESTRICTION_ID = P_CUSTOMIZED_RESTRICTION_ID2
        AND    PRV.RESTRICTION_CODE          = PRP.RESTRICTION_CODE
        AND   (PRV.ROWID                    <> P_ROWID
        OR     P_ROWID IS NULL));
BEGIN
/* check to ensure only one restriction of a particular type for the form */
  OPEN  C_UNIQUENESS;
  FETCH C_UNIQUENESS INTO L_DUMMY1;
  IF C_UNIQUENESS%FOUND THEN
     CLOSE C_UNIQUENESS;
     HR_UTILITY.SET_MESSAGE('801','HR_6028_CUST_UNIQUE_PARAMETER');
     HR_UTILITY.RAISE_ERROR;
  ELSE
  /* check to ensure that only one value can bo allowed for same
   restriction code if multiple restriction flag is 'N' */
    CLOSE C_UNIQUENESS;
    OPEN C_MULTIPLE_RES;
    FETCH C_MULTIPLE_RES INTO L_DUMMY2;
    IF C_MULTIPLE_RES%FOUND THEN
     CLOSE C_MULTIPLE_RES;
     HR_UTILITY.SET_MESSAGE('801','HR_6921_CUST_MULTI_RESTRICT');
     HR_UTILITY.RAISE_ERROR;
    ELSE
     CLOSE C_MULTIPLE_RES;
      NULL;
    END IF;
 END IF;
END UNIQUENESS_CHECK;
------------------------------------------------------------------------------
PROCEDURE POST_QUERY(P_RESTRICTION_MEANING IN OUT NOCOPY VARCHAR2,
                     P_VALUE_MEANING       IN OUT NOCOPY VARCHAR2,
                     P_RESTRICTION_CODE           VARCHAR2,
                     P_VALUE                      VARCHAR2,
	             P_BUSINESS_GROUP_ID          NUMBER) IS
--
CURSOR C_RESTRICTION_TYPE IS
 SELECT HR.MEANING
 FROM   HR_LOOKUPS HR
 WHERE  HR.LOOKUP_CODE = P_RESTRICTION_CODE
 AND    HR.LOOKUP_TYPE = 'FORM_RESTRICTION_TYPE';

CURSOR C_ACTION_TYPE IS
 SELECT HR.MEANING
 FROM   HR_LOOKUPS HR
 WHERE  HR.LOOKUP_CODE = P_VALUE
 AND    HR.LOOKUP_TYPE = 'ACTION_TYPE';

CURSOR C_ELE_SET IS
 SELECT PES.ELEMENT_SET_NAME
 FROM   PAY_ELEMENT_SETS PES
 WHERE  PES.ELEMENT_SET_ID =  P_VALUE;

CURSOR C_ELE_TYPE IS
 SELECT HR.MEANING
 FROM   HR_LOOKUPS HR
 WHERE  HR.LOOKUP_CODE = P_VALUE
 AND    HR.LOOKUP_TYPE = 'PROCESSING_TYPE';

CURSOR C_EMP_APL IS
 SELECT HR.MEANING
 FROM   HR_LOOKUPS HR
 WHERE  HR.LOOKUP_CODE = P_VALUE
 AND    HR.LOOKUP_TYPE = 'EMP_APL';

CURSOR C_ENTRY_TYPE IS
 SELECT HR.MEANING
 FROM   HR_LOOKUPS HR
 WHERE  HR.LOOKUP_CODE = P_VALUE
 AND    HR.LOOKUP_TYPE = 'ENTRY_TYPE';

CURSOR C_ASG_SET IS
 SELECT HR.MEANING
 FROM   HR_LOOKUPS HR
 WHERE  HR.LOOKUP_CODE = P_VALUE
 AND    HR.LOOKUP_TYPE = 'ASG_SET';

CURSOR C_INQUIRY_NAME IS
 SELECT REPS.QP_REPORT_NAME
 FROM   FF_QP_REPORTS REPS,
        FF_FORMULA_TYPES TYPES
 WHERE  REPS.FORMULA_TYPE_ID  = TYPES.FORMULA_TYPE_ID
 AND    REPS.QP_REPORT_ID     = P_VALUE;

CURSOR C_ORG_CLASS IS
 SELECT HR.MEANING
 FROM   HR_LOOKUPS HR
 WHERE  HR.LOOKUP_CODE = P_VALUE
 AND    HR.LOOKUP_TYPE = 'ORG_CLASS';

CURSOR C_PERSON_FUNCTION IS
 SELECT HR.MEANING
 FROM   HR_LOOKUPS HR
 WHERE  HR.LOOKUP_CODE = P_VALUE
 AND    HR.LOOKUP_TYPE ='PER_FUNCTION';

CURSOR C_SPECIAL_INFO IS
 SELECT F.ID_FLEX_STRUCTURE_NAME
 FROM   FND_ID_FLEX_STRUCTURES_VL F,
        PER_SPECIAL_INFO_TYPES S
 WHERE  S.SPECIAL_INFORMATION_TYPE_ID = P_VALUE
 AND    S.BUSINESS_GROUP_ID           = P_BUSINESS_GROUP_ID
 AND    F.ID_FLEX_NUM                 = S.ID_FLEX_NUM
 AND    F.ID_FLEX_CODE                = 'PEA';

CURSOR C_TABLE_NAME IS
 SELECT PUT.USER_TABLE_NAME
 FROM   PAY_USER_TABLES PUT
 WHERE  PUT.USER_TABLE_ID  = P_VALUE;

CURSOR C_PERSON_TYPE IS
 SELECT PPTTL.USER_PERSON_TYPE
 FROM   PER_PERSON_TYPES_TL PPTTL,
        PER_PERSON_TYPES PPT
 WHERE  PPT.PERSON_TYPE_ID = P_VALUE
 AND    PPT.PERSON_TYPE_ID = PPTTL.PERSON_TYPE_ID
 AND    PPTTL.LANGUAGE     = userenv('LANG');

CURSOR C_PERSON_ACTION IS
 SELECT HR.MEANING
 FROM   HR_LOOKUPS HR
 WHERE  HR.LOOKUP_CODE = P_VALUE
 AND    HR.LOOKUP_TYPE ='HR_PTU_ACTION_TYPES';

-- Changed the table name from PER_ASSIGNMENT_INFO_TYPES
-- to PER_ASSIGNMENT_INFO_TYPES_V  for fix of #3255251
CURSOR C_AEI_TYPE IS
 SELECT nvl(DESCRIPTION,INFORMATION_TYPE)     -- bug 7348844
 FROM   PER_ASSIGNMENT_INFO_TYPES_V
 WHERE  INFORMATION_TYPE = P_VALUE;

CURSOR C_CEI_TYPE IS
 SELECT DESCRIPTION
 FROM   PER_CONTACT_INFO_TYPES_VL
 WHERE  INFORMATION_TYPE = P_VALUE;

CURSOR C_PEI_TYPE IS
 SELECT nvl(DESCRIPTION,INFORMATION_TYPE)
 FROM   PER_PEOPLE_INFO_TYPES
 WHERE  INFORMATION_TYPE = P_VALUE;

CURSOR C_POEI_TYPE IS
 SELECT DESCRIPTION
 FROM   PER_POSITION_INFO_TYPES
 WHERE  INFORMATION_TYPE = P_VALUE;

CURSOR C_JEI_TYPE IS
 SELECT DESCRIPTION
 FROM   PER_JOB_INFO_TYPES
 WHERE  INFORMATION_TYPE = P_VALUE;

CURSOR C_LEI_TYPE IS
 SELECT DESCRIPTION
 FROM   HR_LOCATION_INFO_TYPES
 WHERE  INFORMATION_TYPE = P_VALUE;

CURSOR C_ADV_FIND IS
 SELECT HR.MEANING
 FROM   HR_LOOKUPS HR
 WHERE  HR.LOOKUP_CODE = P_VALUE
 AND    HR.LOOKUP_TYPE = 'PER_ADV_FIND_ITEMS';

CURSOR C_QH_WF_NOTIF IS
 SELECT DISPLAY_NAME
 FROM   WF_MESSAGES_TL WMTL
 WHERE  TYPE     IN ('PEQHNOT','PECWKNOT') --Bug# 3057859
 AND    LANGUAGE = userenv('LANG')
 AND    NAME     = P_VALUE;

CURSOR C_QH_ACTION IS
 SELECT HR.MEANING
 FROM   HR_LOOKUPS HR
 WHERE  HR.LOOKUP_CODE = P_VALUE
 AND    HR.LOOKUP_TYPE = 'PER_QH_ACTION';

CURSOR C_QH_NEW IS
 SELECT HR.MEANING
 FROM   HR_LOOKUPS HR
 WHERE  HR.LOOKUP_CODE = P_VALUE
 AND    HR.LOOKUP_TYPE = 'PER_QH_NEW';

 BEGIN
/* populate D_RESTRICTION_TYPE display field */
  OPEN C_RESTRICTION_TYPE;
  FETCH C_RESTRICTION_TYPE INTO P_RESTRICTION_MEANING;
  CLOSE C_RESTRICTION_TYPE;
/* populate D_RESTRICTION_VALUE_MEANING display field */
 IF P_RESTRICTION_CODE = 'ELEMENT_TYPE' THEN
     OPEN C_ELE_TYPE;
     FETCH C_ELE_TYPE INTO  P_VALUE_MEANING;
     CLOSE C_ELE_TYPE;
 ELSIF
   P_RESTRICTION_CODE = 'ACTION_TYPE' THEN
     OPEN  C_ACTION_TYPE;
     FETCH C_ACTION_TYPE INTO P_VALUE_MEANING;
     CLOSE C_ACTION_TYPE;
 ELSIF
   P_RESTRICTION_CODE = 'ELEMENT_SET' THEN
    OPEN  C_ELE_SET;
    FETCH C_ELE_SET INTO  P_VALUE_MEANING;
    CLOSE C_ELE_SET;
 ELSIF
   P_RESTRICTION_CODE = 'TABLE_NAME' THEN
    OPEN  C_TABLE_NAME;
    FETCH C_TABLE_NAME INTO  P_VALUE_MEANING;
    CLOSE C_TABLE_NAME;
 ELSIF
   P_RESTRICTION_CODE = 'QP_INQUIRY' THEN
    OPEN  C_INQUIRY_NAME;
    FETCH C_INQUIRY_NAME INTO  P_VALUE_MEANING;
    CLOSE C_INQUIRY_NAME;
 ELSIF
   P_RESTRICTION_CODE = 'ORG_CLASS' THEN
    OPEN  C_ORG_CLASS;
    FETCH C_ORG_CLASS INTO P_VALUE_MEANING;
    CLOSE C_ORG_CLASS;
 ELSIF
  P_RESTRICTION_CODE = 'EMP_APL' THEN
   OPEN  C_EMP_APL;
   FETCH C_EMP_APL INTO P_VALUE_MEANING;
   CLOSE C_EMP_APL;
 ELSIF
   P_RESTRICTION_CODE = 'INFO_TYPE' THEN
    OPEN C_SPECIAL_INFO;
    FETCH C_SPECIAL_INFO INTO P_VALUE_MEANING;
    CLOSE C_SPECIAL_INFO;
 ELSIF
   P_RESTRICTION_CODE = 'ASG_SET' THEN
    OPEN C_ASG_SET;
    FETCH C_ASG_SET INTO P_VALUE_MEANING;
    CLOSE C_ASG_SET;
 ELSIF
   P_RESTRICTION_CODE = 'PER_FUNCTION' THEN
    OPEN C_PERSON_FUNCTION;
    FETCH C_PERSON_FUNCTION INTO P_VALUE_MEANING;
    CLOSE C_PERSON_FUNCTION;
 ELSIF
   P_RESTRICTION_CODE = 'ENTRY_TYPE' THEN
    OPEN C_ENTRY_TYPE;
    FETCH C_ENTRY_TYPE INTO P_VALUE_MEANING;
    CLOSE C_ENTRY_TYPE;
 ELSIF
  P_RESTRICTION_CODE = 'PERSON_TYPE' THEN
    OPEN C_PERSON_TYPE;
    FETCH C_PERSON_TYPE INTO P_VALUE_MEANING;
    CLOSE C_PERSON_TYPE;
 ELSIF
  P_RESTRICTION_CODE = 'PERSON_ACTION' THEN
    OPEN C_PERSON_ACTION;
    FETCH C_PERSON_ACTION INTO P_VALUE_MEANING;
    CLOSE C_PERSON_ACTION;
 ELSIF
  P_RESTRICTION_CODE = 'ASSIGNMENT_INFO_TYPE' THEN
    OPEN C_AEI_TYPE;
    FETCH C_AEI_TYPE INTO P_VALUE_MEANING;
    CLOSE C_AEI_TYPE;
 ELSIF
  P_RESTRICTION_CODE = 'CONTACT_INFO_TYPE' THEN
    OPEN C_CEI_TYPE;
    FETCH C_CEI_TYPE INTO P_VALUE_MEANING;
    CLOSE C_CEI_TYPE;
 ELSIF
  P_RESTRICTION_CODE = 'PEOPLE_INFO_TYPE' THEN
    OPEN C_PEI_TYPE;
    FETCH C_PEI_TYPE INTO P_VALUE_MEANING;
    CLOSE C_PEI_TYPE;
 ELSIF
  P_RESTRICTION_CODE = 'JOB_INFO_TYPE' THEN
    OPEN C_JEI_TYPE;
    FETCH C_JEI_TYPE INTO P_VALUE_MEANING;
    CLOSE C_JEI_TYPE;
 ELSIF
  P_RESTRICTION_CODE = 'LOCATION_INFO_TYPE' THEN
    OPEN C_LEI_TYPE;
    FETCH C_LEI_TYPE INTO P_VALUE_MEANING;
    CLOSE C_LEI_TYPE;
 ELSIF
  P_RESTRICTION_CODE = 'POSITION_INFO_TYPE' THEN
    OPEN C_POEI_TYPE;
    FETCH C_POEI_TYPE INTO P_VALUE_MEANING;
    CLOSE C_POEI_TYPE;
 ELSIF
  P_RESTRICTION_CODE = 'ADV_FIND_ITEM' THEN
    OPEN C_ADV_FIND;
    FETCH C_ADV_FIND INTO P_VALUE_MEANING;
    CLOSE C_ADV_FIND;
 ELSIF
  P_RESTRICTION_CODE = 'QH_WF_NOTIFICATION' THEN
    OPEN C_QH_WF_NOTIF;
    FETCH C_QH_WF_NOTIF INTO P_VALUE_MEANING;
    CLOSE C_QH_WF_NOTIF;
 ELSIF
  P_RESTRICTION_CODE = 'QH_ACTION' THEN
    OPEN C_QH_ACTION;
    FETCH C_QH_ACTION INTO P_VALUE_MEANING;
    CLOSE C_QH_ACTION;
 ELSIF
  P_RESTRICTION_CODE = 'QH_NEW' THEN
    OPEN C_QH_NEW;
    FETCH C_QH_NEW INTO P_VALUE_MEANING;
    CLOSE C_QH_NEW;
 ELSE
   hr_utility.raise_error;
 END IF;
 END POST_QUERY;
------------------------------------------------------------------------------
FUNCTION DOWNLOAD_VALUE(P_RESTRICTION_CODE IN  VARCHAR2,
                        P_VALUE            IN  VARCHAR2,
                        P_TOKEN            IN  VARCHAR2) RETURN VARCHAR2 IS
--
L_LEG_CODE  VARCHAR2(30);
L_VALUE     VARCHAR2(80);
--
CURSOR C_ELE_SET IS
  SELECT PES.ELEMENT_SET_NAME
  ,      PES.LEGISLATION_CODE
  FROM   PAY_ELEMENT_SETS   PES
  WHERE  PES.ELEMENT_SET_ID = P_VALUE;
--
CURSOR C_TABLE_NAME IS
  SELECT PUT.USER_TABLE_NAME
  ,      PUT.LEGISLATION_CODE
  FROM   PAY_USER_TABLES    PUT
  WHERE  PUT.USER_TABLE_ID  = P_VALUE;
--
CURSOR C_INQUIRY_NAME IS
  SELECT REPS.QP_REPORT_NAME
  ,      REPS.LEGISLATION_CODE
  FROM   FF_QP_REPORTS      REPS
  ,      FF_FORMULA_TYPES  TYPES
  WHERE  REPS.FORMULA_TYPE_ID  = TYPES.FORMULA_TYPE_ID
  AND    REPS.QP_REPORT_ID     = P_VALUE;
--
CURSOR C_SPECIAL_INFO IS
  SELECT F.ID_FLEX_STRUCTURE_NAME
  FROM   FND_ID_FLEX_STRUCTURES_VL F
  ,      PER_SPECIAL_INFO_TYPES    S
  WHERE  S.SPECIAL_INFORMATION_TYPE_ID = P_VALUE
  AND    S.BUSINESS_GROUP_ID           IS NULL
  AND    F.ID_FLEX_NUM                 = S.ID_FLEX_NUM
  AND    F.ID_FLEX_CODE                = 'PEA';
--
CURSOR C_PERSON_TYPE IS
  SELECT PPT.USER_PERSON_TYPE
  FROM   PER_PERSON_TYPES PPT
  WHERE  PPT.PERSON_TYPE_ID = P_VALUE;
--
 BEGIN
--
  IF P_RESTRICTION_CODE = 'ELEMENT_SET' THEN
     OPEN  C_ELE_SET;
     FETCH C_ELE_SET INTO  L_VALUE, L_LEG_CODE;
     CLOSE C_ELE_SET;
  ELSIF
    P_RESTRICTION_CODE = 'TABLE_NAME' THEN
    OPEN  C_TABLE_NAME;
    FETCH C_TABLE_NAME INTO  L_VALUE, L_LEG_CODE;
    CLOSE C_TABLE_NAME;
  ELSIF
    P_RESTRICTION_CODE = 'QP_INQUIRY' THEN
    OPEN  C_INQUIRY_NAME;
    FETCH C_INQUIRY_NAME INTO  L_VALUE, L_LEG_CODE;
    CLOSE C_INQUIRY_NAME;
  ELSIF
    P_RESTRICTION_CODE = 'INFO_TYPE' THEN
    OPEN C_SPECIAL_INFO;
    FETCH C_SPECIAL_INFO INTO L_VALUE;
    CLOSE C_SPECIAL_INFO;
  ELSIF
    P_RESTRICTION_CODE = 'PERSON_TYPE' THEN
    OPEN C_PERSON_TYPE;
    FETCH C_PERSON_TYPE INTO L_VALUE;
    CLOSE C_PERSON_TYPE;
  ELSE
    L_VALUE    := P_VALUE;
    L_LEG_CODE := NULL;
  END IF;
--
  IF P_TOKEN = 'DV' THEN
    RETURN(L_VALUE);
  ELSE
    RETURN(L_LEG_CODE);
  END IF;
--
END DOWNLOAD_VALUE;
------------------------------------------------------------------------------
FUNCTION UPLOAD_VALUE(P_RESTRICTION_CODE IN VARCHAR2,
                      P_VALUE            IN  VARCHAR2,
                      P_LEG_CODE         IN  VARCHAR2) RETURN VARCHAR2 IS
--
L_VALUE     VARCHAR2(80);
--
CURSOR C_ELE_SET IS
  SELECT PES.ELEMENT_SET_ID
  FROM   PAY_ELEMENT_SETS     PES
  WHERE  PES.ELEMENT_SET_NAME = P_VALUE
  AND    (P_LEG_CODE          IS NULL
  OR     (P_LEG_CODE          IS NOT NULL
  AND    PES.LEGISLATION_CODE = P_LEG_CODE));
--
CURSOR C_TABLE_NAME IS
  SELECT PUT.USER_TABLE_ID
  FROM   PAY_USER_TABLES      PUT
  WHERE  PUT.USER_TABLE_NAME  = P_VALUE
  AND    (P_LEG_CODE          IS NULL
  OR     (P_LEG_CODE          IS NOT NULL
  AND    PUT.LEGISLATION_CODE = P_LEG_CODE));
--
CURSOR C_INQUIRY_NAME IS
  SELECT REPS.QP_REPORT_ID
  FROM   FF_QP_REPORTS         REPS
  ,      FF_FORMULA_TYPES      TYPES
  WHERE  REPS.FORMULA_TYPE_ID  = TYPES.FORMULA_TYPE_ID
  AND    REPS.QP_REPORT_NAME   = P_VALUE
  AND    (P_LEG_CODE           IS NULL
  OR     (P_LEG_CODE           IS NOT NULL
  AND    REPS.LEGISLATION_CODE = P_LEG_CODE));
--
CURSOR C_SPECIAL_INFO IS
  SELECT S.SPECIAL_INFORMATION_TYPE_ID
  FROM   FND_ID_FLEX_STRUCTURES_VL F
  ,      PER_SPECIAL_INFO_TYPES    S
  WHERE  F.ID_FLEX_STRUCTURE_NAME = P_VALUE
  AND    F.ID_FLEX_CODE           = 'PEA'
  AND    F.ID_FLEX_NUM            = S.ID_FLEX_NUM
  AND    S.BUSINESS_GROUP_ID      IS NULL;
--
CURSOR C_PERSON_TYPE IS
  SELECT PPT.PERSON_TYPE_ID
  FROM   PER_PERSON_TYPES PPT
  WHERE  PPT.USER_PERSON_TYPE = P_VALUE
  AND    PPT.BUSINESS_GROUP_ID IS NULL;
--
 BEGIN
--
  IF P_RESTRICTION_CODE = 'ELEMENT_SET' THEN
     OPEN  C_ELE_SET;
     FETCH C_ELE_SET INTO  L_VALUE;
     CLOSE C_ELE_SET;
  ELSIF
    P_RESTRICTION_CODE = 'TABLE_NAME' THEN
    OPEN  C_TABLE_NAME;
    FETCH C_TABLE_NAME INTO  L_VALUE;
    CLOSE C_TABLE_NAME;
  ELSIF
    P_RESTRICTION_CODE = 'QP_INQUIRY' THEN
    OPEN  C_INQUIRY_NAME;
    FETCH C_INQUIRY_NAME INTO  L_VALUE;
    CLOSE C_INQUIRY_NAME;
  ELSIF
    P_RESTRICTION_CODE = 'INFO_TYPE' THEN
    OPEN C_SPECIAL_INFO;
    FETCH C_SPECIAL_INFO INTO L_VALUE;
    CLOSE C_SPECIAL_INFO;
  ELSIF
    P_RESTRICTION_CODE = 'PERSON_TYPE' THEN
    OPEN C_PERSON_TYPE;
    FETCH C_PERSON_TYPE INTO L_VALUE;
    CLOSE C_PERSON_TYPE;
  ELSE
    L_VALUE    := P_VALUE;
  END IF;
--
RETURN(L_VALUE);
--
END UPLOAD_VALUE;
------------------------------------------------------------------------------
END PAY_RESTRICT_VAL_PKG;

/
