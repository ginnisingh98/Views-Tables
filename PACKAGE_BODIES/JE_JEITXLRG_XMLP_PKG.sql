--------------------------------------------------------
--  DDL for Package Body JE_JEITXLRG_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JE_JEITXLRG_XMLP_PKG" AS
/* $Header: JEITXLRGB.pls 120.1 2007/12/25 16:56:27 dwkrishn noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      P_LEDGER_ID NUMBER;
      --P_FIRST_DAY DATE;
      --P_LAST_DAY DATE;
      P_NAME VARCHAR2(30);
      P_ADDRESS1 VARCHAR2(40);
      P_ADDRESS2 VARCHAR2(40);
      P_ADDRESS3 VARCHAR2(40);
      P_CODE_CITY VARCHAR2(50);
      P_COUNTRY VARCHAR2(50);
      P_SET_OF_BKS_ID NUMBER;
      P_EFFECTIVE_DATE DATE;
      X_RETURN_STATUS VARCHAR2(100);
      X_MSG_COUNT NUMBER;
      X_MSG_DATA VARCHAR2(100);
      X_ME_PARTY_ID NUMBER;
      X_REGISTRATION_NUMBER VARCHAR2(100);
      ERRBUF VARCHAR2(200);
      RETCODE NUMBER;
      L_LE_ID_COUNT NUMBER;
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
      /*SRW.MESSAGE('100'
                 ,'Starting BR Trigger 000')*/NULL;
      po_moac_utils_pvt.set_org_context(FND_GLOBAL.ORG_ID);

      SELECT
        NVL(A.LEGAL_ENTITY_ID
           ,B.LEGAL_ENTITY_ID)
      INTO P_LEGAL_ENTITY_ID
      FROM
        JG_ZZ_VAT_REP_ENTITIES A,
        JG_ZZ_VAT_REP_ENTITIES B
      WHERE A.MAPPING_VAT_REP_ENTITY_ID = B.VAT_REPORTING_ENTITY_ID (+)
        AND A.VAT_REPORTING_ENTITY_ID = P_REP_IDENTIFIER;
      SELECT
        count(*)
      INTO L_LE_ID_COUNT
      FROM
        JE_IT_EXEMPT_LETTERS
      WHERE SET_OF_BOOKS_ID = FND_PROFILE.VALUE('GL_SET_OF_BKS_ID')
        AND LEGAL_ENTITY_ID IS NULL;
      IF L_LE_ID_COUNT > 0 THEN
        JE_IT_TAX_EX_UPGRADE.UPGRADE_MAIN(ERRBUF
                                         ,RETCODE
                                         ,P_SET_OF_BOOKS_ID
                                         ,P_LEGAL_ENTITY_ID);
      END IF;
      IF P_SET_OF_BOOKS_ID IS NULL THEN
        P_LEDGER_ID := FND_PROFILE.VALUE('GL_SET_OF_BKS_ID');
      ELSE
        P_LEDGER_ID := TO_NUMBER(P_SET_OF_BOOKS_ID);
      END IF;
      SELECT
        TO_DATE(START_DATE
               ,'DD-MM-RRRR'),
        PERIOD_YEAR
      INTO P_FIRST_DAY,CP_YEAR
      FROM
        GL_PERIODS
      WHERE PERIOD_SET_NAME = P_PERIOD_SET_NAME
        AND PERIOD_NAME = P_PERIOD_FROM;
      SELECT
        TO_DATE(END_DATE
               ,'DD-MM-RRRR')
      INTO P_LAST_DAY
      FROM
        GL_PERIODS
      WHERE PERIOD_SET_NAME = P_PERIOD_SET_NAME
        AND PERIOD_NAME = P_PERIOD_TO;
      SELECT
        NAME
      INTO P_NAME
      FROM
        GL_LEDGERS_PUBLIC_V
      WHERE LEDGER_ID = P_LEDGER_ID;
      C_NAME := P_NAME;
      BEGIN
        SELECT
          sysdate
        INTO P_EFFECTIVE_DATE
        FROM
          DUAL;
        SELECT
          ETBP.PARTY_ID
        INTO X_ME_PARTY_ID
        FROM
          XLE_ETB_PROFILES ETBP
        WHERE ETBP.MAIN_ESTABLISHMENT_FLAG = 'Y'
          AND ETBP.LEGAL_ENTITY_ID = P_LEGAL_ENTITY_ID;
        IF X_ME_PARTY_ID IS NOT NULL THEN
          X_REGISTRATION_NUMBER := ZX_API_PUB.GET_DEFAULT_TAX_REG(P_API_VERSION => 1.0
                                                                 ,P_INIT_MSG_LIST => NULL
                                                                 ,P_COMMIT => NULL
                                                                 ,P_VALIDATION_LEVEL => NULL
                                                                 ,X_RETURN_STATUS => X_RETURN_STATUS
                                                                 ,X_MSG_COUNT => X_MSG_COUNT
                                                                 ,X_MSG_DATA => X_MSG_DATA
                                                                 ,P_PARTY_ID => X_ME_PARTY_ID
                                                                 ,P_PARTY_TYPE => 'LEGAL_ESTABLISHMENT'
                                                                 ,P_EFFECTIVE_DATE => P_EFFECTIVE_DATE);
        END IF;
        C_VAT_REG_NUM := X_REGISTRATION_NUMBER;
        SELECT
          REGISTRATION_NUMBER
        INTO C_TAXPAYER_ID
        FROM
          XLE_REGISTRATIONS_V
        WHERE LEGAL_ENTITY_ID = P_LEGAL_ENTITY_ID
          AND LEGISLATIVE_CATEGORY = 'INCOME_TAX';
        SELECT
          REGISTRATION_NUMBER
        INTO C_COMMERCIAL_NUM
        FROM
          XLE_REGISTRATIONS_V
        WHERE LEGAL_ENTITY_ID = P_LEGAL_ENTITY_ID
          AND LEGISLATIVE_CATEGORY = 'COMMERCIAL_LAW';
        SELECT
          SUBSTR(XFIV.ADDRESS_LINE_1
                ,1
                ,40) ADDRESS_LINE1,
          NVL(SUBSTR(XFIV.ADDRESS_LINE_2
                    ,1
                    ,40)
             ,' ') ADDRESS_LINE2,
          NVL(SUBSTR(XFIV.ADDRESS_LINE_3
                    ,1
                    ,40)
             ,' ') ADDRESS_LINE3,
          XFIV.POSTAL_CODE || ' ' || XFIV.TOWN_OR_CITY CODE_CITY,
          XFIV.COUNTRY COUNTRY
        INTO P_ADDRESS1,P_ADDRESS2,P_ADDRESS3,P_CODE_CITY,P_COUNTRY
        FROM
          XLE_FIRSTPARTY_INFORMATION_V XFIV
        WHERE XFIV.LEGAL_ENTITY_ID = P_LEGAL_ENTITY_ID;
        C_ADDRESS1 := P_ADDRESS1 || ' ' || P_ADDRESS2 || ' ' || P_ADDRESS3;
        C_POSTAL_CODE_CITY := P_CODE_CITY;
        C_COUNTRY := P_COUNTRY;
        BEGIN
          SELECT
            GEOGRAPHY_NAME
          INTO CP_COUNTRY_NAME
          FROM
            HZ_GEOGRAPHIES
          WHERE GEOGRAPHY_CODE = P_COUNTRY
            AND GEOGRAPHY_TYPE = 'COUNTRY';
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            CP_COUNTRY_NAME := '';
          WHEN OTHERS THEN
            CP_COUNTRY_NAME := '';
        END;
      EXCEPTION
        WHEN TOO_MANY_ROWS THEN
          /*SRW.MESSAGE(9999
                     ,'Esiste piu'' di una company nell'' organizzazione')*/NULL;
          /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
        WHEN NO_DATA_FOUND THEN
          /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      END;
      LP_LEGAL_ENTITY_ID:=P_LEGAL_ENTITY_ID;
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION G_VENDOR_LETTERSGROUPFILTER RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END G_VENDOR_LETTERSGROUPFILTER;

  FUNCTION CF_ISSUE_DATEFORMULA(ISSUE_DATE IN DATE) RETURN CHAR IS
  BEGIN
    RETURN FND_DATE.DATE_TO_CHARDATE(ISSUE_DATE);
  END CF_ISSUE_DATEFORMULA;

  FUNCTION CF_ISSUE_DATE1FORMULA(ISSUE_DATE IN DATE) RETURN CHAR IS
  BEGIN
    RETURN FND_DATE.DATE_TO_CHARDATE(ISSUE_DATE);
  END CF_ISSUE_DATE1FORMULA;

  FUNCTION CF_ASTERISKSFORMULA RETURN CHAR IS
    L_ASTER VARCHAR2(195);
  BEGIN
    L_ASTER := RPAD('*'
                   ,195
                   ,'*');
    RETURN (L_ASTER);
  END CF_ASTERISKSFORMULA;

  FUNCTION P_FIRST_DAY_P RETURN DATE IS
  BEGIN
    RETURN P_FIRST_DAY;
  END P_FIRST_DAY_P;

  FUNCTION P_LAST_DAY_P RETURN DATE IS
  BEGIN
    RETURN P_LAST_DAY;
  END P_LAST_DAY_P;

  FUNCTION C_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NAME;
  END C_NAME_P;

  FUNCTION C_ADDRESS1_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_ADDRESS1;
  END C_ADDRESS1_P;

  FUNCTION C_POSTAL_CODE_CITY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_POSTAL_CODE_CITY;
  END C_POSTAL_CODE_CITY_P;

  FUNCTION CP_MONTH_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_MONTH;
  END CP_MONTH_P;

  FUNCTION C_COUNTRY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COUNTRY;
  END C_COUNTRY_P;

  FUNCTION C_VAT_REG_NUM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_VAT_REG_NUM;
  END C_VAT_REG_NUM_P;

  FUNCTION C_TAXPAYER_ID_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_TAXPAYER_ID;
  END C_TAXPAYER_ID_P;

  FUNCTION C_COMMERCIAL_NUM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COMMERCIAL_NUM;
  END C_COMMERCIAL_NUM_P;

  FUNCTION CP_YEAR_P RETURN NUMBER IS
  BEGIN
    RETURN CP_YEAR;
  END CP_YEAR_P;

  FUNCTION CP_COUNTRY_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_COUNTRY_NAME;
  END CP_COUNTRY_NAME_P;

END JE_JEITXLRG_XMLP_PKG;



/
