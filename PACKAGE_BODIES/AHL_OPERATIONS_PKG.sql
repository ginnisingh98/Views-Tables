--------------------------------------------------------
--  DDL for Package Body AHL_OPERATIONS_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."AHL_OPERATIONS_PKG" as
/* $Header: AHLLOPEB.pls 120.0.12010000.2 2008/11/23 14:23:16 bachandr ship $ */
procedure INSERT_ROW (
  X_ROWID in out NOCOPY VARCHAR2,
  X_OPERATION_ID in NUMBER,
  X_QA_INSPECTION_TYPE in VARCHAR2,
  X_SEGMENT8 in VARCHAR2,
  X_SEGMENT9 in VARCHAR2,
  X_SEGMENT10 in VARCHAR2,
  X_SEGMENT11 in VARCHAR2,
  X_SEGMENT12 in VARCHAR2,
  X_SEGMENT13 in VARCHAR2,
  X_SEGMENT14 in VARCHAR2,
  X_SEGMENT15 in VARCHAR2,
  X_SUMMARY_FLAG in VARCHAR2,
  X_ENABLED_FLAG in VARCHAR2,
  X_START_DATE_ACTIVE in DATE,
  X_END_DATE_ACTIVE in DATE,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_REVISION_NUMBER in NUMBER,
  X_REVISION_STATUS_CODE in VARCHAR2,
  X_STANDARD_OPERATION_FLAG in VARCHAR2,
  X_SEGMENT1 in VARCHAR2,
  X_SEGMENT2 in VARCHAR2,
  X_SEGMENT3 in VARCHAR2,
  X_SEGMENT4 in VARCHAR2,
  X_SEGMENT5 in VARCHAR2,
  X_SEGMENT6 in VARCHAR2,
  X_SEGMENT7 in VARCHAR2,
  X_OPERATION_TYPE_CODE in VARCHAR2,
  X_PROCESS_CODE in VARCHAR2,
--bachandr Enigma Phase I changes -- start
  X_MODEL_CODE in VARCHAR2,
  X_ENIGMA_OP_ID in VARCHAR2,
--bachandr Enigma Phase I changes -- end
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_REMARKS in VARCHAR2,
  X_REVISION_NOTES in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
  cursor C is select ROWID from AHL_OPERATIONS_B
    where OPERATION_ID = X_OPERATION_ID
    ;
begin
  insert into AHL_OPERATIONS_B (
    QA_INSPECTION_TYPE,
    SEGMENT8,
    SEGMENT9,
    SEGMENT10,
    SEGMENT11,
    SEGMENT12,
    SEGMENT13,
    SEGMENT14,
    SEGMENT15,
    SUMMARY_FLAG,
    ENABLED_FLAG,
    START_DATE_ACTIVE,
    END_DATE_ACTIVE,
    OPERATION_ID,
    OBJECT_VERSION_NUMBER,
    REVISION_NUMBER,
    REVISION_STATUS_CODE,
    STANDARD_OPERATION_FLAG,
    SEGMENT1,
    SEGMENT2,
    SEGMENT3,
    SEGMENT4,
    SEGMENT5,
    SEGMENT6,
    SEGMENT7,
    OPERATION_TYPE_CODE,
    PROCESS_CODE,
--bachandr Enigma Phase I changes -- start
    MODEL_CODE,
    ENIGMA_OP_ID,
--bachandr Enigma Phase I changes -- end
    ATTRIBUTE_CATEGORY,
    ATTRIBUTE1,
    ATTRIBUTE2,
    ATTRIBUTE3,
    ATTRIBUTE4,
    ATTRIBUTE5,
    ATTRIBUTE6,
    ATTRIBUTE7,
    ATTRIBUTE8,
    ATTRIBUTE9,
    ATTRIBUTE10,
    ATTRIBUTE11,
    ATTRIBUTE12,
    ATTRIBUTE13,
    ATTRIBUTE14,
    ATTRIBUTE15,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN
  ) values (
    X_QA_INSPECTION_TYPE,
    X_SEGMENT8,
    X_SEGMENT9,
    X_SEGMENT10,
    X_SEGMENT11,
    X_SEGMENT12,
    X_SEGMENT13,
    X_SEGMENT14,
    X_SEGMENT15,
    X_SUMMARY_FLAG,
    X_ENABLED_FLAG,
    X_START_DATE_ACTIVE,
    X_END_DATE_ACTIVE,
    X_OPERATION_ID,
    X_OBJECT_VERSION_NUMBER,
    X_REVISION_NUMBER,
    X_REVISION_STATUS_CODE,
    X_STANDARD_OPERATION_FLAG,
    X_SEGMENT1,
    X_SEGMENT2,
    X_SEGMENT3,
    X_SEGMENT4,
    X_SEGMENT5,
    X_SEGMENT6,
    X_SEGMENT7,
    X_OPERATION_TYPE_CODE,
    X_PROCESS_CODE,
--bachandr Enigma Phase I changes -- start
    X_MODEL_CODE,
    X_ENIGMA_OP_ID,
--bachandr Enigma Phase I changes -- end
    X_ATTRIBUTE_CATEGORY,
    X_ATTRIBUTE1,
    X_ATTRIBUTE2,
    X_ATTRIBUTE3,
    X_ATTRIBUTE4,
    X_ATTRIBUTE5,
    X_ATTRIBUTE6,
    X_ATTRIBUTE7,
    X_ATTRIBUTE8,
    X_ATTRIBUTE9,
    X_ATTRIBUTE10,
    X_ATTRIBUTE11,
    X_ATTRIBUTE12,
    X_ATTRIBUTE13,
    X_ATTRIBUTE14,
    X_ATTRIBUTE15,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN
  );

  insert into AHL_OPERATIONS_TL (
    DESCRIPTION,
    REVISION_NOTES,
    OPERATION_ID,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_LOGIN,
    REMARKS,
    LANGUAGE,
    SOURCE_LANG
  ) select
    X_DESCRIPTION,
    X_REVISION_NOTES,
    X_OPERATION_ID,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_LOGIN,
    X_REMARKS,
    L.LANGUAGE_CODE,
    userenv('LANG')
  from FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and not exists
    (select NULL
    from AHL_OPERATIONS_TL T
    where T.OPERATION_ID = X_OPERATION_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);

  open c;
  fetch c into X_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

end INSERT_ROW;

procedure LOCK_ROW (
  X_OPERATION_ID in NUMBER,
  X_QA_INSPECTION_TYPE in VARCHAR2,
  X_SEGMENT8 in VARCHAR2,
  X_SEGMENT9 in VARCHAR2,
  X_SEGMENT10 in VARCHAR2,
  X_SEGMENT11 in VARCHAR2,
  X_SEGMENT12 in VARCHAR2,
  X_SEGMENT13 in VARCHAR2,
  X_SEGMENT14 in VARCHAR2,
  X_SEGMENT15 in VARCHAR2,
  X_SUMMARY_FLAG in VARCHAR2,
  X_ENABLED_FLAG in VARCHAR2,
  X_START_DATE_ACTIVE in DATE,
  X_END_DATE_ACTIVE in DATE,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_REVISION_NUMBER in NUMBER,
  X_REVISION_STATUS_CODE in VARCHAR2,
  X_STANDARD_OPERATION_FLAG in VARCHAR2,
  X_SEGMENT1 in VARCHAR2,
  X_SEGMENT2 in VARCHAR2,
  X_SEGMENT3 in VARCHAR2,
  X_SEGMENT4 in VARCHAR2,
  X_SEGMENT5 in VARCHAR2,
  X_SEGMENT6 in VARCHAR2,
  X_SEGMENT7 in VARCHAR2,
  X_OPERATION_TYPE_CODE in VARCHAR2,
  X_PROCESS_CODE in VARCHAR2,
--bachandr Enigma Phase I changes -- start
  X_MODEL_CODE in VARCHAR2,
  X_ENIGMA_OP_ID in VARCHAR2,
--bachandr Enigma Phase I changes -- end
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_REMARKS in VARCHAR2,
  X_REVISION_NOTES in VARCHAR2
) is
  cursor c is select
      QA_INSPECTION_TYPE,
      SEGMENT8,
      SEGMENT9,
      SEGMENT10,
      SEGMENT11,
      SEGMENT12,
      SEGMENT13,
      SEGMENT14,
      SEGMENT15,
      SUMMARY_FLAG,
      ENABLED_FLAG,
      START_DATE_ACTIVE,
      END_DATE_ACTIVE,
      OBJECT_VERSION_NUMBER,
      REVISION_NUMBER,
      REVISION_STATUS_CODE,
      STANDARD_OPERATION_FLAG,
      SEGMENT1,
      SEGMENT2,
      SEGMENT3,
      SEGMENT4,
      SEGMENT5,
      SEGMENT6,
      SEGMENT7,
      OPERATION_TYPE_CODE,
      PROCESS_CODE,
--bachandr Enigma Phase I changes -- start
      MODEL_CODE,
      ENIGMA_OP_ID,
--bachandr Enigma Phase I changes -- end
      ATTRIBUTE_CATEGORY,
      ATTRIBUTE1,
      ATTRIBUTE2,
      ATTRIBUTE3,
      ATTRIBUTE4,
      ATTRIBUTE5,
      ATTRIBUTE6,
      ATTRIBUTE7,
      ATTRIBUTE8,
      ATTRIBUTE9,
      ATTRIBUTE10,
      ATTRIBUTE11,
      ATTRIBUTE12,
      ATTRIBUTE13,
      ATTRIBUTE14,
      ATTRIBUTE15
    from AHL_OPERATIONS_B
    where OPERATION_ID = X_OPERATION_ID
    for update of OPERATION_ID nowait;
  recinfo c%rowtype;

  cursor c1 is select
      DESCRIPTION,
      REMARKS,
      REVISION_NOTES,
      decode(LANGUAGE, userenv('LANG'), 'Y', 'N') BASELANG
    from AHL_OPERATIONS_TL
    where OPERATION_ID = X_OPERATION_ID
    and userenv('LANG') in (LANGUAGE, SOURCE_LANG)
    for update of OPERATION_ID nowait;
begin
  open c;
  fetch c into recinfo;
  if (c%notfound) then
    close c;
    fnd_message.set_name('FND', 'FORM_RECORD_DELETED');
    app_exception.raise_exception;
  end if;
  close c;
  if (    ((recinfo.QA_INSPECTION_TYPE = X_QA_INSPECTION_TYPE)
           OR ((recinfo.QA_INSPECTION_TYPE is null) AND (X_QA_INSPECTION_TYPE is null)))
      AND ((recinfo.SEGMENT8 = X_SEGMENT8)
           OR ((recinfo.SEGMENT8 is null) AND (X_SEGMENT8 is null)))
      AND ((recinfo.SEGMENT9 = X_SEGMENT9)
           OR ((recinfo.SEGMENT9 is null) AND (X_SEGMENT9 is null)))
      AND ((recinfo.SEGMENT10 = X_SEGMENT10)
           OR ((recinfo.SEGMENT10 is null) AND (X_SEGMENT10 is null)))
      AND ((recinfo.SEGMENT11 = X_SEGMENT11)
           OR ((recinfo.SEGMENT11 is null) AND (X_SEGMENT11 is null)))
      AND ((recinfo.SEGMENT12 = X_SEGMENT12)
           OR ((recinfo.SEGMENT12 is null) AND (X_SEGMENT12 is null)))
      AND ((recinfo.SEGMENT13 = X_SEGMENT13)
           OR ((recinfo.SEGMENT13 is null) AND (X_SEGMENT13 is null)))
      AND ((recinfo.SEGMENT14 = X_SEGMENT14)
           OR ((recinfo.SEGMENT14 is null) AND (X_SEGMENT14 is null)))
      AND ((recinfo.SEGMENT15 = X_SEGMENT15)
           OR ((recinfo.SEGMENT15 is null) AND (X_SEGMENT15 is null)))
      AND (recinfo.SUMMARY_FLAG = X_SUMMARY_FLAG)
      AND (recinfo.ENABLED_FLAG = X_ENABLED_FLAG)
      AND ((recinfo.START_DATE_ACTIVE = X_START_DATE_ACTIVE)
           OR ((recinfo.START_DATE_ACTIVE is null) AND (X_START_DATE_ACTIVE is null)))
      AND ((recinfo.END_DATE_ACTIVE = X_END_DATE_ACTIVE)
           OR ((recinfo.END_DATE_ACTIVE is null) AND (X_END_DATE_ACTIVE is null)))
      AND (recinfo.OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER)
      AND (recinfo.REVISION_NUMBER = X_REVISION_NUMBER)
      AND (recinfo.REVISION_STATUS_CODE = X_REVISION_STATUS_CODE)
      AND (recinfo.STANDARD_OPERATION_FLAG = X_STANDARD_OPERATION_FLAG)
      AND ((recinfo.SEGMENT1 = X_SEGMENT1)
           OR ((recinfo.SEGMENT1 is null) AND (X_SEGMENT1 is null)))
      AND ((recinfo.SEGMENT2 = X_SEGMENT2)
           OR ((recinfo.SEGMENT2 is null) AND (X_SEGMENT2 is null)))
      AND ((recinfo.SEGMENT3 = X_SEGMENT3)
           OR ((recinfo.SEGMENT3 is null) AND (X_SEGMENT3 is null)))
      AND ((recinfo.SEGMENT4 = X_SEGMENT4)
           OR ((recinfo.SEGMENT4 is null) AND (X_SEGMENT4 is null)))
      AND ((recinfo.SEGMENT5 = X_SEGMENT5)
           OR ((recinfo.SEGMENT5 is null) AND (X_SEGMENT5 is null)))
      AND ((recinfo.SEGMENT6 = X_SEGMENT6)
           OR ((recinfo.SEGMENT6 is null) AND (X_SEGMENT6 is null)))
      AND ((recinfo.SEGMENT7 = X_SEGMENT7)
           OR ((recinfo.SEGMENT7 is null) AND (X_SEGMENT7 is null)))
      AND ((recinfo.OPERATION_TYPE_CODE = X_OPERATION_TYPE_CODE)
           OR ((recinfo.OPERATION_TYPE_CODE is null) AND (X_OPERATION_TYPE_CODE is null)))
      AND ((recinfo.PROCESS_CODE = X_PROCESS_CODE)
           OR ((recinfo.PROCESS_CODE is null) AND (X_PROCESS_CODE is null)))
--bachandr Enigma Phase I changes -- start
      AND ((recinfo.MODEL_CODE = X_MODEL_CODE)
           OR ((recinfo.MODEL_CODE is null) AND (X_MODEL_CODE is null)))
      AND ((recinfo.ENIGMA_OP_ID = X_ENIGMA_OP_ID)
           OR ((recinfo.ENIGMA_OP_ID is null) AND (X_ENIGMA_OP_ID is null)))
--bachandr Enigma Phase I changes -- end
      AND ((recinfo.ATTRIBUTE_CATEGORY = X_ATTRIBUTE_CATEGORY)
           OR ((recinfo.ATTRIBUTE_CATEGORY is null) AND (X_ATTRIBUTE_CATEGORY is null)))
      AND ((recinfo.ATTRIBUTE1 = X_ATTRIBUTE1)
           OR ((recinfo.ATTRIBUTE1 is null) AND (X_ATTRIBUTE1 is null)))
      AND ((recinfo.ATTRIBUTE2 = X_ATTRIBUTE2)
           OR ((recinfo.ATTRIBUTE2 is null) AND (X_ATTRIBUTE2 is null)))
      AND ((recinfo.ATTRIBUTE3 = X_ATTRIBUTE3)
           OR ((recinfo.ATTRIBUTE3 is null) AND (X_ATTRIBUTE3 is null)))
      AND ((recinfo.ATTRIBUTE4 = X_ATTRIBUTE4)
           OR ((recinfo.ATTRIBUTE4 is null) AND (X_ATTRIBUTE4 is null)))
      AND ((recinfo.ATTRIBUTE5 = X_ATTRIBUTE5)
           OR ((recinfo.ATTRIBUTE5 is null) AND (X_ATTRIBUTE5 is null)))
      AND ((recinfo.ATTRIBUTE6 = X_ATTRIBUTE6)
           OR ((recinfo.ATTRIBUTE6 is null) AND (X_ATTRIBUTE6 is null)))
      AND ((recinfo.ATTRIBUTE7 = X_ATTRIBUTE7)
           OR ((recinfo.ATTRIBUTE7 is null) AND (X_ATTRIBUTE7 is null)))
      AND ((recinfo.ATTRIBUTE8 = X_ATTRIBUTE8)
           OR ((recinfo.ATTRIBUTE8 is null) AND (X_ATTRIBUTE8 is null)))
      AND ((recinfo.ATTRIBUTE9 = X_ATTRIBUTE9)
           OR ((recinfo.ATTRIBUTE9 is null) AND (X_ATTRIBUTE9 is null)))
      AND ((recinfo.ATTRIBUTE10 = X_ATTRIBUTE10)
           OR ((recinfo.ATTRIBUTE10 is null) AND (X_ATTRIBUTE10 is null)))
      AND ((recinfo.ATTRIBUTE11 = X_ATTRIBUTE11)
           OR ((recinfo.ATTRIBUTE11 is null) AND (X_ATTRIBUTE11 is null)))
      AND ((recinfo.ATTRIBUTE12 = X_ATTRIBUTE12)
           OR ((recinfo.ATTRIBUTE12 is null) AND (X_ATTRIBUTE12 is null)))
      AND ((recinfo.ATTRIBUTE13 = X_ATTRIBUTE13)
           OR ((recinfo.ATTRIBUTE13 is null) AND (X_ATTRIBUTE13 is null)))
      AND ((recinfo.ATTRIBUTE14 = X_ATTRIBUTE14)
           OR ((recinfo.ATTRIBUTE14 is null) AND (X_ATTRIBUTE14 is null)))
      AND ((recinfo.ATTRIBUTE15 = X_ATTRIBUTE15)
           OR ((recinfo.ATTRIBUTE15 is null) AND (X_ATTRIBUTE15 is null)))
  ) then
    null;
  else
    fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
    app_exception.raise_exception;
  end if;

  for tlinfo in c1 loop
    if (tlinfo.BASELANG = 'Y') then
      if (    (tlinfo.DESCRIPTION = X_DESCRIPTION)
          AND ((tlinfo.REMARKS = X_REMARKS)
               OR ((tlinfo.REMARKS is null) AND (X_REMARKS is null)))
          AND ((tlinfo.REVISION_NOTES = X_REVISION_NOTES)
               OR ((tlinfo.REVISION_NOTES is null) AND (X_REVISION_NOTES is null)))
      ) then
        null;
      else
        fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
        app_exception.raise_exception;
      end if;
    end if;
  end loop;
  return;
end LOCK_ROW;

procedure UPDATE_ROW (
  X_OPERATION_ID in NUMBER,
  X_QA_INSPECTION_TYPE in VARCHAR2,
  X_SEGMENT8 in VARCHAR2,
  X_SEGMENT9 in VARCHAR2,
  X_SEGMENT10 in VARCHAR2,
  X_SEGMENT11 in VARCHAR2,
  X_SEGMENT12 in VARCHAR2,
  X_SEGMENT13 in VARCHAR2,
  X_SEGMENT14 in VARCHAR2,
  X_SEGMENT15 in VARCHAR2,
  X_SUMMARY_FLAG in VARCHAR2,
  X_ENABLED_FLAG in VARCHAR2,
  X_START_DATE_ACTIVE in DATE,
  X_END_DATE_ACTIVE in DATE,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_REVISION_NUMBER in NUMBER,
  X_REVISION_STATUS_CODE in VARCHAR2,
  X_STANDARD_OPERATION_FLAG in VARCHAR2,
  X_SEGMENT1 in VARCHAR2,
  X_SEGMENT2 in VARCHAR2,
  X_SEGMENT3 in VARCHAR2,
  X_SEGMENT4 in VARCHAR2,
  X_SEGMENT5 in VARCHAR2,
  X_SEGMENT6 in VARCHAR2,
  X_SEGMENT7 in VARCHAR2,
  X_OPERATION_TYPE_CODE in VARCHAR2,
  X_PROCESS_CODE in VARCHAR2,
--bachandr Enigma Phase I changes -- start
  X_MODEL_CODE in VARCHAR2,
  X_ENIGMA_OP_ID in VARCHAR2,
--bachandr Enigma Phase I changes -- end
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_REMARKS in VARCHAR2,
  X_REVISION_NOTES in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
begin
  update AHL_OPERATIONS_B set
    QA_INSPECTION_TYPE = X_QA_INSPECTION_TYPE,
    SEGMENT8 = X_SEGMENT8,
    SEGMENT9 = X_SEGMENT9,
    SEGMENT10 = X_SEGMENT10,
    SEGMENT11 = X_SEGMENT11,
    SEGMENT12 = X_SEGMENT12,
    SEGMENT13 = X_SEGMENT13,
    SEGMENT14 = X_SEGMENT14,
    SEGMENT15 = X_SEGMENT15,
    SUMMARY_FLAG = X_SUMMARY_FLAG,
    ENABLED_FLAG = X_ENABLED_FLAG,
    START_DATE_ACTIVE = X_START_DATE_ACTIVE,
    END_DATE_ACTIVE = X_END_DATE_ACTIVE,
    OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER,
    REVISION_NUMBER = X_REVISION_NUMBER,
    REVISION_STATUS_CODE = X_REVISION_STATUS_CODE,
    STANDARD_OPERATION_FLAG = X_STANDARD_OPERATION_FLAG,
    SEGMENT1 = X_SEGMENT1,
    SEGMENT2 = X_SEGMENT2,
    SEGMENT3 = X_SEGMENT3,
    SEGMENT4 = X_SEGMENT4,
    SEGMENT5 = X_SEGMENT5,
    SEGMENT6 = X_SEGMENT6,
    SEGMENT7 = X_SEGMENT7,
    OPERATION_TYPE_CODE = X_OPERATION_TYPE_CODE,
    PROCESS_CODE = X_PROCESS_CODE,
--bachandr Enigma Phase I changes -- start
    MODEL_CODE = X_MODEL_CODE,
    ENIGMA_OP_ID = X_ENIGMA_OP_ID,
--bachandr Enigma Phase I changes -- end
    ATTRIBUTE_CATEGORY = X_ATTRIBUTE_CATEGORY,
    ATTRIBUTE1 = X_ATTRIBUTE1,
    ATTRIBUTE2 = X_ATTRIBUTE2,
    ATTRIBUTE3 = X_ATTRIBUTE3,
    ATTRIBUTE4 = X_ATTRIBUTE4,
    ATTRIBUTE5 = X_ATTRIBUTE5,
    ATTRIBUTE6 = X_ATTRIBUTE6,
    ATTRIBUTE7 = X_ATTRIBUTE7,
    ATTRIBUTE8 = X_ATTRIBUTE8,
    ATTRIBUTE9 = X_ATTRIBUTE9,
    ATTRIBUTE10 = X_ATTRIBUTE10,
    ATTRIBUTE11 = X_ATTRIBUTE11,
    ATTRIBUTE12 = X_ATTRIBUTE12,
    ATTRIBUTE13 = X_ATTRIBUTE13,
    ATTRIBUTE14 = X_ATTRIBUTE14,
    ATTRIBUTE15 = X_ATTRIBUTE15,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN
  where OPERATION_ID = X_OPERATION_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  update AHL_OPERATIONS_TL set
    DESCRIPTION = X_DESCRIPTION,
    REMARKS = X_REMARKS,
    REVISION_NOTES = X_REVISION_NOTES,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    SOURCE_LANG = userenv('LANG')
  where OPERATION_ID = X_OPERATION_ID
  and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

  if (sql%notfound) then
    raise no_data_found;
  end if;
end UPDATE_ROW;

procedure DELETE_ROW (
  X_OPERATION_ID in NUMBER
) is
begin
  delete from AHL_OPERATIONS_TL
  where OPERATION_ID = X_OPERATION_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  delete from AHL_OPERATIONS_B
  where OPERATION_ID = X_OPERATION_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;
end DELETE_ROW;

procedure ADD_LANGUAGE
is
begin
  delete from AHL_OPERATIONS_TL T
  where not exists
    (select NULL
    from AHL_OPERATIONS_B B
    where B.OPERATION_ID = T.OPERATION_ID
    );

  update AHL_OPERATIONS_TL T set (
      DESCRIPTION,
      REMARKS,
      REVISION_NOTES
    ) = (select
      B.DESCRIPTION,
      B.REMARKS,
      B.REVISION_NOTES
    from AHL_OPERATIONS_TL B
    where B.OPERATION_ID = T.OPERATION_ID
    and B.LANGUAGE = T.SOURCE_LANG)
  where (
      T.OPERATION_ID,
      T.LANGUAGE
  ) in (select
      SUBT.OPERATION_ID,
      SUBT.LANGUAGE
    from AHL_OPERATIONS_TL SUBB, AHL_OPERATIONS_TL SUBT
    where SUBB.OPERATION_ID = SUBT.OPERATION_ID
    and SUBB.LANGUAGE = SUBT.SOURCE_LANG
    and (SUBB.DESCRIPTION <> SUBT.DESCRIPTION
      or SUBB.REMARKS <> SUBT.REMARKS
      or (SUBB.REMARKS is null and SUBT.REMARKS is not null)
      or (SUBB.REMARKS is not null and SUBT.REMARKS is null)
      or SUBB.REVISION_NOTES <> SUBT.REVISION_NOTES
      or (SUBB.REVISION_NOTES is null and SUBT.REVISION_NOTES is not null)
      or (SUBB.REVISION_NOTES is not null and SUBT.REVISION_NOTES is null)
  ));

  insert into AHL_OPERATIONS_TL (
    DESCRIPTION,
    REVISION_NOTES,
    OPERATION_ID,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_LOGIN,
    REMARKS,
    LANGUAGE,
    SOURCE_LANG
  ) select
    B.DESCRIPTION,
    B.REVISION_NOTES,
    B.OPERATION_ID,
    B.LAST_UPDATE_DATE,
    B.LAST_UPDATED_BY,
    B.CREATION_DATE,
    B.CREATED_BY,
    B.LAST_UPDATE_LOGIN,
    B.REMARKS,
    L.LANGUAGE_CODE,
    B.SOURCE_LANG
  from AHL_OPERATIONS_TL B, FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and B.LANGUAGE = userenv('LANG')
  and not exists
    (select NULL
    from AHL_OPERATIONS_TL T
    where T.OPERATION_ID = B.OPERATION_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);
end ADD_LANGUAGE;

end AHL_OPERATIONS_PKG;

/
