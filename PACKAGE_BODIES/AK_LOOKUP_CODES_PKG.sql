--------------------------------------------------------
--  DDL for Package Body AK_LOOKUP_CODES_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."AK_LOOKUP_CODES_PKG" as
/* $Header: AKDLKUPB.pls 120.3 2006/01/25 15:57:21 tshort ship $ */
procedure INSERT_ROW (
X_ROWID in out NOCOPY VARCHAR2,
X_LOOKUP_CODE in VARCHAR2,
X_LOOKUP_TYPE in VARCHAR2,
X_DESCRIPTION in VARCHAR2,
X_CREATION_DATE in DATE,
X_CREATED_BY in NUMBER,
X_LAST_UPDATE_DATE in DATE,
X_LAST_UPDATED_BY in NUMBER,
X_LAST_UPDATE_LOGIN in NUMBER
) is
cursor C is select ROWID from AK_LOOKUP_CODES
where LOOKUP_CODE = X_LOOKUP_CODE
and LOOKUP_TYPE = X_LOOKUP_TYPE
and LANGUAGE = userenv('LANG')
;
begin
insert into AK_LOOKUP_CODES (
LOOKUP_CODE,
LOOKUP_TYPE,
DESCRIPTION,
LAST_UPDATE_DATE,
LAST_UPDATED_BY,
LAST_UPDATE_LOGIN,
CREATION_DATE,
CREATED_BY,
LANGUAGE,
SOURCE_LANG
) select
X_LOOKUP_CODE,
X_LOOKUP_TYPE,
X_DESCRIPTION,
X_LAST_UPDATE_DATE,
X_LAST_UPDATED_BY,
X_LAST_UPDATE_LOGIN,
X_CREATION_DATE,
X_CREATED_BY,
L.LANGUAGE_CODE,
userenv('LANG')
from FND_LANGUAGES L
where L.INSTALLED_FLAG in ('I', 'B')
and not exists
(select NULL
from AK_LOOKUP_CODES T
where T.LOOKUP_CODE = X_LOOKUP_CODE
and T.LOOKUP_TYPE = X_LOOKUP_TYPE
and T.LANGUAGE = L.LANGUAGE_CODE);

open c;
fetch c into X_ROWID;
if (c%notfound) then
close c;
raise no_data_found;
end if;
close c;

end INSERT_ROW;

procedure LOCK_ROW (
X_LOOKUP_CODE in VARCHAR2,
X_LOOKUP_TYPE in VARCHAR2,
X_DESCRIPTION in VARCHAR2
) is
cursor c1 is select
DESCRIPTION
from AK_LOOKUP_CODES
where LOOKUP_CODE = X_LOOKUP_CODE
and LOOKUP_TYPE = X_LOOKUP_TYPE
and LANGUAGE = userenv('LANG')
for update of LOOKUP_CODE nowait;
tlinfo c1%rowtype;

begin
open c1;
fetch c1 into tlinfo;
if (c1%notfound) then
close c1;
return;
end if;
close c1;

if (    ((tlinfo.DESCRIPTION = X_DESCRIPTION)
OR ((tlinfo.DESCRIPTION is null) AND (X_DESCRIPTION is null)))
) then
null;
else
fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
app_exception.raise_exception;
end if;
return;
end LOCK_ROW;

procedure UPDATE_ROW (
X_LOOKUP_CODE in VARCHAR2,
X_LOOKUP_TYPE in VARCHAR2,
X_DESCRIPTION in VARCHAR2,
X_LAST_UPDATE_DATE in DATE,
X_LAST_UPDATED_BY in NUMBER,
X_LAST_UPDATE_LOGIN in NUMBER
) is
begin
update AK_LOOKUP_CODES set
DESCRIPTION = X_DESCRIPTION,
LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
LAST_UPDATED_BY = X_LAST_UPDATED_BY,
LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
SOURCE_LANG = userenv('LANG')
where LOOKUP_CODE = X_LOOKUP_CODE
and LOOKUP_TYPE = X_LOOKUP_TYPE
and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

if (sql%notfound) then
raise no_data_found;
end if;
end UPDATE_ROW;

procedure DELETE_ROW (
X_LOOKUP_CODE in VARCHAR2,
X_LOOKUP_TYPE in VARCHAR2
) is
begin
delete from AK_LOOKUP_CODES
where LOOKUP_CODE = X_LOOKUP_CODE
and LOOKUP_TYPE = X_LOOKUP_TYPE;

if (sql%notfound) then
raise no_data_found;
end if;

end DELETE_ROW;

procedure ADD_LANGUAGE
is
begin
/* Mar/19/03 requested by Ric Ginsberg */
/* The following delete and update statements are commented out */
/* as a quick workaround to fix the time-consuming table handler issue */
/* Eventually we'll need to turn them into a separate fix_language procedure */
/*

update AK_LOOKUP_CODES T set (
DESCRIPTION
) = (select
B.DESCRIPTION
from AK_LOOKUP_CODES B
where B.LOOKUP_CODE = T.LOOKUP_CODE
and B.LOOKUP_TYPE = T.LOOKUP_TYPE
and B.LANGUAGE = T.SOURCE_LANG)
where (
T.LOOKUP_CODE,
T.LOOKUP_TYPE,
T.LANGUAGE
) in (select
SUBT.LOOKUP_CODE,
SUBT.LOOKUP_TYPE,
SUBT.LANGUAGE
from AK_LOOKUP_CODES SUBB, AK_LOOKUP_CODES SUBT
where SUBB.LOOKUP_CODE = SUBT.LOOKUP_CODE
and SUBB.LOOKUP_TYPE = SUBT.LOOKUP_TYPE
and SUBB.LANGUAGE = SUBT.SOURCE_LANG
and (SUBB.DESCRIPTION <> SUBT.DESCRIPTION
or (SUBB.DESCRIPTION is null and SUBT.DESCRIPTION is not null)
or (SUBB.DESCRIPTION is not null and SUBT.DESCRIPTION is null)
));

*/

insert /*+ append parallel(tt) */ into AK_LOOKUP_CODES tt (
LOOKUP_CODE,
LOOKUP_TYPE,
DESCRIPTION,
LAST_UPDATE_DATE,
LAST_UPDATED_BY,
LAST_UPDATE_LOGIN,
CREATION_DATE,
CREATED_BY,
LANGUAGE,
SOURCE_LANG
) select /*+ parallel(v) parallel(t) use_nl(t)  */ v.* from
(select /*+ no_merge ordered parallel(b) */
B.LOOKUP_CODE,
B.LOOKUP_TYPE,
B.DESCRIPTION,
B.LAST_UPDATE_DATE,
B.LAST_UPDATED_BY,
B.LAST_UPDATE_LOGIN,
B.CREATION_DATE,
B.CREATED_BY,
L.LANGUAGE_CODE,
B.SOURCE_LANG
from AK_LOOKUP_CODES B, FND_LANGUAGES L
where L.INSTALLED_FLAG in ('I', 'B')
and B.LANGUAGE = userenv('LANG')
) v, AK_LOOKUP_CODES T
where T.LOOKUP_CODE(+) = v.LOOKUP_CODE
and T.LOOKUP_TYPE(+) = v.LOOKUP_TYPE
and T.LANGUAGE(+) = v.LANGUAGE_CODE
and T.LOOKUP_CODE is NULL
and T.LOOKUP_TYPE is NULL;

end ADD_LANGUAGE;

procedure TRANSLATE_ROW (
X_LOOKUP_CODE in VARCHAR2,
X_LOOKUP_TYPE in VARCHAR2,
X_DESCRIPTION in VARCHAR2,
X_LAST_UPDATE_DATE in DATE,
X_LAST_UPDATED_BY in NUMBER,
X_LAST_UPDATE_LOGIN in NUMBER
) is
begin
update AK_LOOKUP_CODES set
DESCRIPTION = X_DESCRIPTION,
LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
LAST_UPDATED_BY = X_LAST_UPDATED_BY,
LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
SOURCE_LANG = userenv('LANG')
where LOOKUP_CODE = X_LOOKUP_CODE
and LOOKUP_TYPE = X_LOOKUP_TYPE
and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

end TRANSLATE_ROW;


end AK_LOOKUP_CODES_PKG;

/
