--------------------------------------------------------
--  DDL for Package Body PA_PAXMGSLS_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PA_PAXMGSLS_XMLP_PKG" AS
/* $Header: PAXMGSLSB.pls 120.0 2008/01/02 11:37:35 krreddy noship $ */
  FUNCTION GET_COVER_PAGE_VALUES RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COVER_PAGE_VALUES;
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      INIT_FAILURE EXCEPTION;
      NDF VARCHAR2(80);
    BEGIN
    CP_FROM_GL_DATE:=to_char(P_FROM_GL_DATE,'DD-MON-YY');
     CP_TO_GL_DATE:=to_char(P_TO_GL_DATE,'DD-MON-YY');
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
      /*SRW.USER_EXIT('FND GETPROFILE
                    NAME="PA_DEBUG_MODE"
                    FIELD=":p_debug_mode"
                    PRINT_ERROR="N"')*/NULL;
      P_RULE_OPTIMIZER := FND_PROFILE.VALUE('PA_RULE_BASED_OPTIMIZER');
      IF (GET_COMPANY_NAME <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      SELECT
        trim(replace(MEANING,'*',''))
      INTO NDF
      FROM
        PA_LOOKUPS
      WHERE LOOKUP_CODE = 'NO_DATA_FOUND'
        AND LOOKUP_TYPE = 'MESSAGE';
      C_NO_DATA_FOUND := NDF;
      /*SRW.REFERENCE(P_COA_ID)*/NULL;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        SELECT
          trim(replace(MEANING,'*',''))
        INTO NDF
        FROM
          PA_LOOKUPS
        WHERE LOOKUP_CODE = 'NO_DATA_FOUND'
          AND LOOKUP_TYPE = 'MESSAGE';
        C_NO_DATA_FOUND := NDF;
        C_DUMMY_DATA := 1;
      WHEN OTHERS THEN
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END BEFOREREPORT;
  FUNCTION GET_COMPANY_NAME RETURN BOOLEAN IS
    L_NAME GL_SETS_OF_BOOKS.NAME%TYPE;
  BEGIN
    SELECT
      GL.NAME
    INTO L_NAME
    FROM
      GL_SETS_OF_BOOKS GL
    WHERE GL.SET_OF_BOOKS_ID = P_CA_SET_OF_BOOKS_ID;
    C_COMPANY_NAME_HEADER := L_NAME;
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COMPANY_NAME;
  FUNCTION C_ACCOUNT_IDFORMULA(CODE_COMBINATION_ID IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    BEGIN
      RETURN GET_SEGS('SQLGL'
                     ,'GL#'
                     ,P_COA_ID
                     ,CODE_COMBINATION_ID);
    END;
  END C_ACCOUNT_IDFORMULA;
  FUNCTION C_RAW_COSTFORMULA(CF_ACCT_CURRENCY_CODE IN VARCHAR2
                            ,RAW_COST IN NUMBER) RETURN VARCHAR2 IS
    RET_MASK VARCHAR2(1000);
    C_RAW_COST VARCHAR2(1000);
  BEGIN
    RET_MASK := FND_CURRENCY.GET_FORMAT_MASK(CF_ACCT_CURRENCY_CODE
                                            ,30);
    C_RAW_COST := TO_CHAR(RAW_COST
                         ,RET_MASK);
    RETURN (C_RAW_COST);
  END C_RAW_COSTFORMULA;
  FUNCTION C_BURDEN_COSTFORMULA(CF_ACCT_CURRENCY_CODE IN VARCHAR2
                               ,BURDEN_COST IN NUMBER) RETURN VARCHAR2 IS
    RET_MASK VARCHAR2(1000);
    C_BURDEN_COST VARCHAR2(1000);
  BEGIN
    RET_MASK := FND_CURRENCY.GET_FORMAT_MASK(CF_ACCT_CURRENCY_CODE
                                            ,30);
    C_BURDEN_COST := TO_CHAR(BURDEN_COST
                            ,RET_MASK);
    RETURN (C_BURDEN_COST);
  END C_BURDEN_COSTFORMULA;
  FUNCTION C_TOTAL_COSTFORMULA(CF_ACCT_CURRENCY_CODE IN VARCHAR2
                              ,TOTAL_COST IN NUMBER) RETURN VARCHAR2 IS
    RET_MASK VARCHAR2(1000);
    C_TOTAL_COST VARCHAR2(1000);
  BEGIN
    RET_MASK := FND_CURRENCY.GET_FORMAT_MASK(CF_ACCT_CURRENCY_CODE
                                            ,30);
    C_TOTAL_COST := TO_CHAR(TOTAL_COST
                           ,RET_MASK);
    RETURN (C_TOTAL_COST);
  END C_TOTAL_COSTFORMULA;
  FUNCTION MFG_RELATEDFORMULA(MANUFACTURING_RELATED IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      SOME_VAR VARCHAR2(40);
    BEGIN
      SELECT
        MEANING
      INTO SOME_VAR
      FROM
        FND_LOOKUPS
      WHERE LOOKUP_CODE = MANUFACTURING_RELATED
        AND LOOKUP_TYPE = 'YES_NO';
      RETURN SOME_VAR;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        SELECT
          MEANING
        INTO SOME_VAR
        FROM
          PA_LOOKUPS
        WHERE LOOKUP_CODE = 'NO_DATA_FOUND'
          AND LOOKUP_TYPE = 'MESSAGE';
      WHEN OTHERS THEN
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
  END MFG_RELATEDFORMULA;
  FUNCTION CA_RAW_COSTFORMULA(CF_ACCT_CURRENCY_CODE IN VARCHAR2
                             ,A_RAW_COST IN NUMBER) RETURN VARCHAR2 IS
    RET_MASK VARCHAR2(1000);
    CA_RAW_COST VARCHAR2(1000);
  BEGIN
    RET_MASK := FND_CURRENCY.GET_FORMAT_MASK(CF_ACCT_CURRENCY_CODE
                                            ,30);
    CA_RAW_COST := TO_CHAR(A_RAW_COST
                          ,RET_MASK);
    RETURN (CA_RAW_COST);
  END CA_RAW_COSTFORMULA;
  FUNCTION CA_BURDEN_COSTFORMULA(CF_ACCT_CURRENCY_CODE IN VARCHAR2
                                ,A_BURDEN_COST IN NUMBER) RETURN VARCHAR2 IS
    RET_MASK VARCHAR2(1000);
    CA_BURDEN_COST VARCHAR2(1000);
  BEGIN
    RET_MASK := FND_CURRENCY.GET_FORMAT_MASK(CF_ACCT_CURRENCY_CODE
                                            ,30);
    CA_BURDEN_COST := TO_CHAR(A_BURDEN_COST
                             ,RET_MASK);
    RETURN (CA_BURDEN_COST);
  END CA_BURDEN_COSTFORMULA;
  FUNCTION CA_TOTAL_COSTFORMULA(CF_ACCT_CURRENCY_CODE IN VARCHAR2
                               ,A_TOTAL_COST IN NUMBER) RETURN VARCHAR2 IS
    RET_MASK VARCHAR2(1000);
    CA_TOTAL_COST VARCHAR2(1000);
  BEGIN
    RET_MASK := FND_CURRENCY.GET_FORMAT_MASK(CF_ACCT_CURRENCY_CODE
                                            ,30);
    CA_TOTAL_COST := TO_CHAR(A_TOTAL_COST
                            ,RET_MASK);
    RETURN (CA_TOTAL_COST);
  END CA_TOTAL_COSTFORMULA;
  FUNCTION CP_RAW_COSTFORMULA(CF_ACCT_CURRENCY_CODE IN VARCHAR2
                             ,P_RAW_COST IN NUMBER) RETURN VARCHAR2 IS
    RET_MASK VARCHAR2(1000);
    CP_RAW_COST VARCHAR2(1000);
  BEGIN
    RET_MASK := FND_CURRENCY.GET_FORMAT_MASK(CF_ACCT_CURRENCY_CODE
                                            ,30);
    CP_RAW_COST := TO_CHAR(P_RAW_COST
                          ,RET_MASK);
    RETURN (CP_RAW_COST);
  END CP_RAW_COSTFORMULA;
  FUNCTION CP_BURDEN_COSTFORMULA(CF_ACCT_CURRENCY_CODE IN VARCHAR2
                                ,P_BURDEN_COST IN NUMBER) RETURN VARCHAR2 IS
    RET_MASK VARCHAR2(1000);
    CP_BURDEN_COST VARCHAR2(1000);
  BEGIN
    RET_MASK := FND_CURRENCY.GET_FORMAT_MASK(CF_ACCT_CURRENCY_CODE
                                            ,30);
    CP_BURDEN_COST := TO_CHAR(P_BURDEN_COST
                             ,RET_MASK);
    RETURN (CP_BURDEN_COST);
  END CP_BURDEN_COSTFORMULA;
  FUNCTION CP_TOTAL_COSTFORMULA(CF_ACCT_CURRENCY_CODE IN VARCHAR2
                               ,P_TOTAL_COST IN NUMBER) RETURN VARCHAR2 IS
    RET_MASK VARCHAR2(1000);
    CP_TOTAL_COST VARCHAR2(1000);
  BEGIN
    RET_MASK := FND_CURRENCY.GET_FORMAT_MASK(CF_ACCT_CURRENCY_CODE
                                            ,30);
    CP_TOTAL_COST := TO_CHAR(P_TOTAL_COST
                            ,RET_MASK);
    RETURN (CP_TOTAL_COST);
  END CP_TOTAL_COSTFORMULA;
  FUNCTION CM_RAW_COSTFORMULA(CF_ACCT_CURRENCY_CODE IN VARCHAR2
                             ,M_RAW_COST IN NUMBER) RETURN VARCHAR2 IS
    RET_MASK VARCHAR2(1000);
    CM_RAW_COST VARCHAR2(1000);
  BEGIN
    RET_MASK := FND_CURRENCY.GET_FORMAT_MASK(CF_ACCT_CURRENCY_CODE
                                            ,30);
    CM_RAW_COST := TO_CHAR(M_RAW_COST
                          ,RET_MASK);
    RETURN (CM_RAW_COST);
  END CM_RAW_COSTFORMULA;
  FUNCTION CM_BURDEN_COSTFORMULA(CF_ACCT_CURRENCY_CODE IN VARCHAR2
                                ,M_BURDEN_COST IN NUMBER) RETURN VARCHAR2 IS
    RET_MASK VARCHAR2(1000);
    CM_BURDEN_COST VARCHAR2(1000);
  BEGIN
    RET_MASK := FND_CURRENCY.GET_FORMAT_MASK(CF_ACCT_CURRENCY_CODE
                                            ,30);
    CM_BURDEN_COST := TO_CHAR(M_BURDEN_COST
                             ,RET_MASK);
    RETURN (CM_BURDEN_COST);
  END CM_BURDEN_COSTFORMULA;
  FUNCTION CM_TOTAL_COSTFORMULA(CF_ACCT_CURRENCY_CODE IN VARCHAR2
                               ,M_TOTAL_COST IN NUMBER) RETURN VARCHAR2 IS
    RET_MASK VARCHAR2(1000);
    CM_TOTAL_COST VARCHAR2(1000);
  BEGIN
    RET_MASK := FND_CURRENCY.GET_FORMAT_MASK(CF_ACCT_CURRENCY_CODE
                                            ,30);
    CM_TOTAL_COST := TO_CHAR(M_TOTAL_COST
                            ,RET_MASK);
    RETURN (CM_TOTAL_COST);
  END CM_TOTAL_COSTFORMULA;
  FUNCTION C_SYS_LINKAGEFORMULA(SYSTEM_LINKAGE IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    RETURN SUBSTRB(SYSTEM_LINKAGE
                  ,1
                  ,40);
  END C_SYS_LINKAGEFORMULA;
  FUNCTION CF_TO_DATEFORMULA RETURN DATE IS
  BEGIN
    RETURN P_TO_GL_DATE;
  END CF_TO_DATEFORMULA;
  FUNCTION CF_FROM_DATEFORMULA RETURN DATE IS
  BEGIN
    RETURN P_FROM_GL_DATE;
  END CF_FROM_DATEFORMULA;
  FUNCTION CF_ACCT_CURRENCY_CODEFORMULA RETURN VARCHAR2 IS
    L_CURR_CODE VARCHAR2(30);
  BEGIN
    SELECT
      CURRENCY_CODE
    INTO L_CURR_CODE
    FROM
      GL_SETS_OF_BOOKS
    WHERE SET_OF_BOOKS_ID = P_CA_SET_OF_BOOKS_ID;
    RETURN (L_CURR_CODE);
  END CF_ACCT_CURRENCY_CODEFORMULA;
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;
  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERPFORM;
  FUNCTION C_COMPANY_NAME_HEADER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COMPANY_NAME_HEADER;
  END C_COMPANY_NAME_HEADER_P;
  FUNCTION C_NO_DATA_FOUND_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NO_DATA_FOUND;
  END C_NO_DATA_FOUND_P;
  FUNCTION C_DUMMY_DATA_P RETURN NUMBER IS
  BEGIN
    RETURN C_DUMMY_DATA;
  END C_DUMMY_DATA_P;
  FUNCTION C_WHERE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_WHERE;
  END C_WHERE_P;
  FUNCTION C_ACCOUNT_DESC1_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_ACCOUNT_DESC1;
  END C_ACCOUNT_DESC1_P;
  FUNCTION GET_CURRENCY_CODE RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
   /* STPROC.INIT('begin :X0 := PA_CURRENCY.GET_CURRENCY_CODE; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    RETURN X0;
  END GET_CURRENCY_CODE;
  FUNCTION ROUND_CURRENCY_AMT(X_AMOUNT IN NUMBER) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    /*STPROC.INIT('begin :X0 := PA_CURRENCY.ROUND_CURRENCY_AMT(:X_AMOUNT); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(X_AMOUNT);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    RETURN X0;
  END ROUND_CURRENCY_AMT;
  FUNCTION CURRENCY_FMT_MASK(X_LENGTH IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := PA_CURRENCY.CURRENCY_FMT_MASK(:X_LENGTH); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(X_LENGTH);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    RETURN X0;
  END CURRENCY_FMT_MASK;
  FUNCTION RPT_CURRENCY_FMT_MASK(X_ORG_ID IN NUMBER
                                ,X_LENGTH IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := PA_CURRENCY.RPT_CURRENCY_FMT_MASK(:X_ORG_ID, :X_LENGTH); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(X_ORG_ID);
    STPROC.BIND_I(X_LENGTH);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    RETURN X0;
  END RPT_CURRENCY_FMT_MASK;
  FUNCTION GET_DELIMITER(APPLICATION_SHORT_NAME IN VARCHAR2
                        ,KEY_FLEX_CODE IN VARCHAR2
                        ,STRUCTURE_NUMBER IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := FND_FLEX_EXT.GET_DELIMITER(:APPLICATION_SHORT_NAME, :KEY_FLEX_CODE, :STRUCTURE_NUMBER); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(APPLICATION_SHORT_NAME);
    STPROC.BIND_I(KEY_FLEX_CODE);
    STPROC.BIND_I(STRUCTURE_NUMBER);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    RETURN X0;
  END GET_DELIMITER;
  FUNCTION GET_CCID(APPLICATION_SHORT_NAME IN VARCHAR2
                   ,KEY_FLEX_CODE IN VARCHAR2
                   ,STRUCTURE_NUMBER IN NUMBER
                   ,VALIDATION_DATE IN VARCHAR2
                   ,CONCATENATED_SEGMENTS IN VARCHAR2) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    /*STPROC.INIT('begin :X0 := FND_FLEX_EXT.GET_CCID(:APPLICATION_SHORT_NAME, :KEY_FLEX_CODE, :STRUCTURE_NUMBER, :VALIDATION_DATE, :CONCATENATED_SEGMENTS); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(APPLICATION_SHORT_NAME);
    STPROC.BIND_I(KEY_FLEX_CODE);
    STPROC.BIND_I(STRUCTURE_NUMBER);
    STPROC.BIND_I(VALIDATION_DATE);
    STPROC.BIND_I(CONCATENATED_SEGMENTS);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    RETURN X0;
  END GET_CCID;
  FUNCTION GET_SEGS(APPLICATION_SHORT_NAME IN VARCHAR2
                   ,KEY_FLEX_CODE IN VARCHAR2
                   ,STRUCTURE_NUMBER IN NUMBER
                   ,COMBINATION_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := FND_FLEX_EXT.GET_SEGS(:APPLICATION_SHORT_NAME, :KEY_FLEX_CODE, :STRUCTURE_NUMBER, :COMBINATION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(APPLICATION_SHORT_NAME);
    STPROC.BIND_I(KEY_FLEX_CODE);
    STPROC.BIND_I(STRUCTURE_NUMBER);
    STPROC.BIND_I(COMBINATION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    X0 := FND_FLEX_EXT.GET_SEGS(APPLICATION_SHORT_NAME, KEY_FLEX_CODE, STRUCTURE_NUMBER, COMBINATION_ID);
    RETURN X0;
  END GET_SEGS;
END PA_PAXMGSLS_XMLP_PKG;

/
