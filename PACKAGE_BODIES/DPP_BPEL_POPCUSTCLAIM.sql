--------------------------------------------------------
--  DDL for Package Body DPP_BPEL_POPCUSTCLAIM
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."DPP_BPEL_POPCUSTCLAIM" AS
/* $Header: dppvbpcb.pls 120.2 2008/02/12 09:52:58 vdewan noship $ */
		FUNCTION PL_TO_SQL10(aPlsqlItem DPP_CUSTOMERCLAIMS_PVT.DPP_CUST_HDR_REC_TYPE)
	 	RETURN DPP_CUSTOMERCLAIMS_PVT_DPP_C10 IS
		aSqlItem DPP_CUSTOMERCLAIMS_PVT_DPP_C10;
		BEGIN
			-- initialize the object
			aSqlItem := DPP_CUSTOMERCLAIMS_PVT_DPP_C10(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
			aSqlItem.TRANSACTION_HEADER_ID := aPlsqlItem.TRANSACTION_HEADER_ID;
			aSqlItem.EFFECTIVE_START_DATE := aPlsqlItem.EFFECTIVE_START_DATE;
			aSqlItem.EFFECTIVE_END_DATE := aPlsqlItem.EFFECTIVE_END_DATE;
			aSqlItem.ORG_ID := aPlsqlItem.ORG_ID;
			aSqlItem.EXECUTION_DETAIL_ID := aPlsqlItem.EXECUTION_DETAIL_ID;
			aSqlItem.OUTPUT_XML := aPlsqlItem.OUTPUT_XML;
			aSqlItem.PROVIDER_PROCESS_ID := aPlsqlItem.PROVIDER_PROCESS_ID;
			aSqlItem.PROVIDER_PROCESS_INSTANCE_ID := aPlsqlItem.PROVIDER_PROCESS_INSTANCE_ID;
			aSqlItem.LAST_UPDATED_BY := aPlsqlItem.LAST_UPDATED_BY;
			aSqlItem.CURRENCY_CODE := aPlsqlItem.CURRENCY_CODE;
			RETURN aSqlItem;
		END PL_TO_SQL10;
		FUNCTION SQL_TO_PL10(aSqlItem DPP_CUSTOMERCLAIMS_PVT_DPP_C10)
		RETURN DPP_CUSTOMERCLAIMS_PVT.DPP_CUST_HDR_REC_TYPE IS
		aPlsqlItem DPP_CUSTOMERCLAIMS_PVT.DPP_CUST_HDR_REC_TYPE;
		BEGIN
			aPlsqlItem.TRANSACTION_HEADER_ID := aSqlItem.TRANSACTION_HEADER_ID;
			aPlsqlItem.EFFECTIVE_START_DATE := aSqlItem.EFFECTIVE_START_DATE;
			aPlsqlItem.EFFECTIVE_END_DATE := aSqlItem.EFFECTIVE_END_DATE;
			aPlsqlItem.ORG_ID := aSqlItem.ORG_ID;
			aPlsqlItem.EXECUTION_DETAIL_ID := aSqlItem.EXECUTION_DETAIL_ID;
			aPlsqlItem.OUTPUT_XML := aSqlItem.OUTPUT_XML;
			aPlsqlItem.PROVIDER_PROCESS_ID := aSqlItem.PROVIDER_PROCESS_ID;
			aPlsqlItem.PROVIDER_PROCESS_INSTANCE_ID := aSqlItem.PROVIDER_PROCESS_INSTANCE_ID;
			aPlsqlItem.LAST_UPDATED_BY := aSqlItem.LAST_UPDATED_BY;
			aPlsqlItem.CURRENCY_CODE := aSqlItem.CURRENCY_CODE;
			RETURN aPlsqlItem;
		END SQL_TO_PL10;
		FUNCTION PL_TO_SQL11(aPlsqlItem DPP_CUSTOMERCLAIMS_PVT.DPP_CUSTOMER_PRICE_REC_TYPE)
	 	RETURN DPP_CUSTOMERCLAIMS_PVT_DPP_14 IS
		aSqlItem DPP_CUSTOMERCLAIMS_PVT_DPP_14;
		BEGIN
			-- initialize the object
			aSqlItem := DPP_CUSTOMERCLAIMS_PVT_DPP_14(NULL, NULL, NULL);
			aSqlItem.CUST_ACCOUNT_ID := aPlsqlItem.CUST_ACCOUNT_ID;
			aSqlItem.LAST_PRICE := aPlsqlItem.LAST_PRICE;
			aSqlItem.INVOICE_CURRENCY_CODE := aPlsqlItem.INVOICE_CURRENCY_CODE;
			RETURN aSqlItem;
		END PL_TO_SQL11;
		FUNCTION SQL_TO_PL12(aSqlItem DPP_CUSTOMERCLAIMS_PVT_DPP_14)
		RETURN DPP_CUSTOMERCLAIMS_PVT.DPP_CUSTOMER_PRICE_REC_TYPE IS
		aPlsqlItem DPP_CUSTOMERCLAIMS_PVT.DPP_CUSTOMER_PRICE_REC_TYPE;
		BEGIN
			aPlsqlItem.CUST_ACCOUNT_ID := aSqlItem.CUST_ACCOUNT_ID;
			aPlsqlItem.LAST_PRICE := aSqlItem.LAST_PRICE;
			aPlsqlItem.INVOICE_CURRENCY_CODE := aSqlItem.INVOICE_CURRENCY_CODE;
			RETURN aPlsqlItem;
		END SQL_TO_PL12;
		FUNCTION PL_TO_SQL12(aPlsqlItem DPP_CUSTOMERCLAIMS_PVT.DPP_CUSTOMER_PRICE_TBL_TYPE)
	 	RETURN DPPCUSTOMERCLAIMSPVTDPP12_DPP IS
		aSqlItem DPPCUSTOMERCLAIMSPVTDPP12_DPP;
		BEGIN
			-- initialize the table
			aSqlItem := DPPCUSTOMERCLAIMSPVTDPP12_DPP();
			aSqlItem.EXTEND(aPlsqlItem.COUNT);
			FOR I IN aPlsqlItem.FIRST..aPlsqlItem.LAST LOOP
				aSqlItem(I + 1 - aPlsqlItem.FIRST) := PL_TO_SQL11(aPlsqlItem(I));
			END LOOP;
			RETURN aSqlItem;
		END PL_TO_SQL12;
		FUNCTION SQL_TO_PL13(aSqlItem DPPCUSTOMERCLAIMSPVTDPP12_DPP)
		RETURN DPP_CUSTOMERCLAIMS_PVT.DPP_CUSTOMER_PRICE_TBL_TYPE IS
		aPlsqlItem DPP_CUSTOMERCLAIMS_PVT.DPP_CUSTOMER_PRICE_TBL_TYPE;
		BEGIN
			FOR I IN 1..aSqlItem.COUNT LOOP
				aPlsqlItem(I) := SQL_TO_PL12(aSqlItem(I));
			END LOOP;
			RETURN aPlsqlItem;
		END SQL_TO_PL13;
		FUNCTION PL_TO_SQL13(aPlsqlItem DPP_CUSTOMERCLAIMS_PVT.DPP_CUSTOMER_REC_TYPE)
	 	RETURN DPP_CUSTOMERCLAIMS_PVT_DPP_12 IS
		aSqlItem DPP_CUSTOMERCLAIMS_PVT_DPP_12;
		BEGIN
			-- initialize the object
			aSqlItem := DPP_CUSTOMERCLAIMS_PVT_DPP_12(NULL, NULL, NULL, NULL);
			aSqlItem.TRANSACTION_LINE_ID := aPlsqlItem.TRANSACTION_LINE_ID;
			aSqlItem.INVENTORY_ITEM_ID := aPlsqlItem.INVENTORY_ITEM_ID;
			aSqlItem.UOM_CODE := aPlsqlItem.UOM_CODE;
			aSqlItem.CUSTOMER_PRICE_TBL := PL_TO_SQL12(aPlsqlItem.CUSTOMER_PRICE_TBL);
			RETURN aSqlItem;
		END PL_TO_SQL13;
		FUNCTION SQL_TO_PL14(aSqlItem DPP_CUSTOMERCLAIMS_PVT_DPP_12)
		RETURN DPP_CUSTOMERCLAIMS_PVT.DPP_CUSTOMER_REC_TYPE IS
		aPlsqlItem DPP_CUSTOMERCLAIMS_PVT.DPP_CUSTOMER_REC_TYPE;
		BEGIN
			aPlsqlItem.TRANSACTION_LINE_ID := aSqlItem.TRANSACTION_LINE_ID;
			aPlsqlItem.INVENTORY_ITEM_ID := aSqlItem.INVENTORY_ITEM_ID;
			aPlsqlItem.UOM_CODE := aSqlItem.UOM_CODE;
			aPlsqlItem.CUSTOMER_PRICE_TBL := SQL_TO_PL13(aSqlItem.CUSTOMER_PRICE_TBL);
			RETURN aPlsqlItem;
		END SQL_TO_PL14;
		FUNCTION PL_TO_SQL14(aPlsqlItem DPP_CUSTOMERCLAIMS_PVT.DPP_CUSTOMER_TBL_TYPE)
	 	RETURN DPP_CUSTOMERCLAIMS_PVT_DPP_11 IS
		aSqlItem DPP_CUSTOMERCLAIMS_PVT_DPP_11;
		BEGIN
			-- initialize the table
			aSqlItem := DPP_CUSTOMERCLAIMS_PVT_DPP_11();
			aSqlItem.EXTEND(aPlsqlItem.COUNT);
			FOR I IN aPlsqlItem.FIRST..aPlsqlItem.LAST LOOP
				aSqlItem(I + 1 - aPlsqlItem.FIRST) := PL_TO_SQL13(aPlsqlItem(I));
			END LOOP;
			RETURN aSqlItem;
		END PL_TO_SQL14;
		FUNCTION SQL_TO_PL11(aSqlItem DPP_CUSTOMERCLAIMS_PVT_DPP_11)
		RETURN DPP_CUSTOMERCLAIMS_PVT.DPP_CUSTOMER_TBL_TYPE IS
		aPlsqlItem DPP_CUSTOMERCLAIMS_PVT.DPP_CUSTOMER_TBL_TYPE;
		BEGIN
			FOR I IN 1..aSqlItem.COUNT LOOP
				aPlsqlItem(I) := SQL_TO_PL14(aSqlItem(I));
			END LOOP;
			RETURN aPlsqlItem;
		END SQL_TO_PL11;

	   PROCEDURE DPP_CUSTOMERCLAIMS_PVT$POPULA (P_API_VERSION NUMBER,P_INIT_MSG_LIST VARCHAR2,P_COMMIT VARCHAR2,
	   P_VALIDATION_LEVEL NUMBER,X_RETURN_STATUS OUT NOCOPY VARCHAR2,X_MSG_COUNT OUT NOCOPY NUMBER,
	   X_MSG_DATA OUT NOCOPY VARCHAR2,P_CUST_HDR_REC DPP_CUSTOMERCLAIMS_PVT_DPP_C10,
	   P_CUSTOMER_TBL DPP_CUSTOMERCLAIMS_PVT_DPP_11) IS
	      P_CUST_HDR_REC_ DPP_CUSTOMERCLAIMS_PVT.DPP_CUST_HDR_REC_TYPE;
	      P_CUSTOMER_TBL_ DPP_CUSTOMERCLAIMS_PVT.DPP_CUSTOMER_TBL_TYPE;
	   BEGIN
	      P_CUST_HDR_REC_ := DPP_BPEL_POPCUSTCLAIM.SQL_TO_PL10(P_CUST_HDR_REC);
	      P_CUSTOMER_TBL_ := DPP_BPEL_POPCUSTCLAIM.SQL_TO_PL11(P_CUSTOMER_TBL);
	      DPP_CUSTOMERCLAIMS_PVT.POPULATE_CUSTOMERPRICE(P_API_VERSION,P_INIT_MSG_LIST,P_COMMIT,P_VALIDATION_LEVEL,X_RETURN_STATUS,X_MSG_COUNT,X_MSG_DATA,P_CUST_HDR_REC_,P_CUSTOMER_TBL_);
	   END DPP_CUSTOMERCLAIMS_PVT$POPULA;

	END DPP_BPEL_POPCUSTCLAIM;

/
