--------------------------------------------------------
--  DDL for Package Body XTR_XTRTMAOD_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."XTR_XTRTMAOD_XMLP_PKG" AS
/* $Header: XTRTMAODB.pls 120.1 2007/12/31 12:26:54 vjaganat noship $ */
  FUNCTION INT_COMPONENT1FORMULA(INT_OD_RUNNING IN NUMBER
                                ,INT_OVERDUE2 IN NUMBER
                                ,INT_OVERDUE IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    INT_COMPONENT := 0;
    IF (INT_OD_RUNNING - INT_OVERDUE2 - INT_OVERDUE) < 0 THEN
      IF (INT_OD_RUNNING - INT_OVERDUE) > 0 THEN
        INT_COMPONENT := 0;
      ELSE
        INT_COMPONENT := ROUND(INT_OVERDUE2
                              ,2);
      END IF;
    END IF;
    RETURN ('');
  END INT_COMPONENT1FORMULA;

  FUNCTION INT_COMPONENTFORMULA RETURN NUMBER IS
  BEGIN
    RETURN NULL;
  END INT_COMPONENTFORMULA;

  FUNCTION BAL_COMPONENT1FORMULA(BAL_RUNNING IN NUMBER
                                ,BAL_OVERDUE2 IN NUMBER
                                ,BAL_OVERDUE IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    BAL_COMPONENT := 0;
    IF (BAL_RUNNING - BAL_OVERDUE2 - BAL_OVERDUE) < 0 THEN
      IF (BAL_RUNNING - BAL_OVERDUE) > 0 THEN
        BAL_COMPONENT := ROUND(BAL_OVERDUE - BAL_RUNNING + BAL_OVERDUE2
                              ,2);
      END IF;
      IF (BAL_RUNNING - BAL_OVERDUE) = 0 THEN
        BAL_COMPONENT := 0;
      END IF;
      IF (BAL_RUNNING - BAL_OVERDUE) < 0 THEN
        BAL_COMPONENT := ROUND(BAL_OVERDUE2
                              ,2);
      END IF;
    ELSE
      BAL_COMPONENT := 0;
    END IF;
    RETURN ('');
  END BAL_COMPONENT1FORMULA;

  FUNCTION BAL_COMPONENTFORMULA RETURN NUMBER IS
  BEGIN
    RETURN NULL;
  END BAL_COMPONENTFORMULA;

  FUNCTION TOT_OVERDUE1FORMULA RETURN VARCHAR2 IS
  BEGIN
   /* EXECUTE IMMEDIATE
      'SELECT nvl(round(:INT_COMPONENT,2),0) + nvl(round(:BAL_COMPONENT,2),0) INTO :TOT_OVERDUE from DUAL';
    COMMIT;*/
    RETURN ('');
  END TOT_OVERDUE1FORMULA;

  FUNCTION TOT_OVERDUEFORMULA RETURN NUMBER IS
  BEGIN
    RETURN NULL;
  END TOT_OVERDUEFORMULA;

  FUNCTION CF_SET_PARAFORMULA RETURN VARCHAR2 IS
  BEGIN
    SELECT
      SUBSTR(USER
            ,1
            ,10)
    INTO
      CP_PARA
    FROM
      DUAL;
    RETURN (CP_PARA);
  END CF_SET_PARAFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    L_DMMY_NUM NUMBER;
    L_MESSAGE FND_NEW_MESSAGES.MESSAGE_TEXT%TYPE;
    CURSOR GET_LANGUAGE_DESC IS
      SELECT
        ITEM_NAME,
        SUBSTR(TEXT
              ,1
              ,100) LANG_NAME
      FROM
        XTR_SYS_LANGUAGES_VL
      WHERE MODULE_NAME = 'XTRTMAOD';
  BEGIN
       BEGIN
      COMPANY_NAME_HEADER := CEP_STANDARD.GET_WINDOW_SESSION_TITLE;
    EXCEPTION
      WHEN OTHERS THEN
        FND_MESSAGE.SET_NAME('XTR'
                            ,'XTR_LOOKUP_ERR');
        L_MESSAGE := FND_MESSAGE.GET;
        RAISE_APPLICATION_ERROR(-20101
                               ,NULL);
    END;
    IF (P_DISPLAY_DEBUG = 'Y') THEN
      NULL;
    END IF;
    FOR c IN GET_LANGUAGE_DESC LOOP
      IF C.ITEM_NAME = 'Z1AS_AT_DATE' THEN
        Z1AS_AT_DATE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1DEAL_NUMBER' THEN
        Z1DEAL_NUMBER := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1ORDER_BY_COLUMN' THEN
        Z1ORDER_BY_COLUMN := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1PARAMETERS' THEN
        Z1PARAMETERS := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1PARTY_CODE' THEN
        Z1PARTY_CODE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1PARTY_NAME' THEN
        Z1PARTY_NAME := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1PRODUCT' THEN
        Z1PRODUCT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1SHOW_DETAILS' THEN
        Z1SHOW_DETAILS := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2AMOUNT' THEN
        Z2AMOUNT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2BALANCE' THEN
        Z2BALANCE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2CLIENT' THEN
        Z2CLIENT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2CLIENT_NAME' THEN
        Z2CLIENT_NAME := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2CODE' THEN
        Z2CODE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2CURRENT' THEN
        Z2CURRENT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2DEAL' THEN
        Z2DEAL := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2DUE_DATE' THEN
        Z2DUE_DATE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2END_OF_REPORT' THEN
        Z2END_OF_REPORT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2INTEREST' THEN
        Z2INTEREST := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2MOST_RECENT' THEN
        Z2MOST_RECENT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2NUMBER' THEN
        Z2NUMBER := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2OVERDUE_AMOUNTS' THEN
        Z2OVERDUE_AMOUNTS := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2OVERDUE_AMOUNTS_BY_PERIODS' THEN
        Z2OVERDUE_AMOUNTS_BY_PERIODS := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2PRINCIPAL' THEN
        Z2PRINCIPAL := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2PRODUCT' THEN
        Z2PRODUCT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2RECEIVED' THEN
        Z2RECEIVED := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2ROLLOVER' THEN
        Z2ROLLOVER := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2TOTAL' THEN
        Z2TOTAL := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2TOTAL_DUE' THEN
        Z2TOTAL_DUE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2TYPE' THEN
        Z2TYPE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2PAGE' THEN
        Z2PAGE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'REPORT_DATE' THEN
        REPORT_DATE := C.LANG_NAME;
      END IF;
    END LOOP;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    P_AS_OF_DATE_1 := TO_CHAR(TO_DATE(P_AS_OF_DATE
                                   ,'YYYY/MM/DD HH24:MI:SS')
                           ,'DD-MON-YYYY');
    PRODUCT_TYPE2 := P_PRODUCT_TYPE;
    CPARTY_CODE2 := P_CPARTY;
    DEAL_NO2 := P_DEAL_NUMBER;
    SHOW_DETAILS2 := P_INCLUDE_PREV_ACT;
    AS_AT_DATE2 := P_AS_OF_DATE_1;
    ORDER_BY_COLUMN2 := P_SORT_BY;
    SELECT
      MEANING
    INTO
      P_SHOW_DETAILS_DSP
    FROM
      FND_LOOKUPS
    WHERE LOOKUP_TYPE = 'YES_NO'
      AND LOOKUP_CODE = SHOW_DETAILS2;
    SELECT
      MEANING
    INTO
      P_SORT_BY_DSP
    FROM
      FND_LOOKUPS
    WHERE LOOKUP_TYPE = 'XTR_MISC'
      AND LOOKUP_CODE = ORDER_BY_COLUMN2;
    SELECT
      CP.USER_CONCURRENT_PROGRAM_NAME
    INTO
      REPORT_SHORT_NAME2
    FROM
      FND_CONCURRENT_PROGRAMS_VL CP,
      FND_CONCURRENT_REQUESTS CR
    WHERE CR.REQUEST_ID = P_CONC_REQUEST_ID
      AND CP.APPLICATION_ID = CR.PROGRAM_APPLICATION_ID
      AND CP.CONCURRENT_PROGRAM_ID = CR.CONCURRENT_PROGRAM_ID;
      REPORT_SHORT_NAME2 := substr(REPORT_SHORT_NAME2,1,instr(REPORT_SHORT_NAME2,' (XML)'));
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION PRIN_AMT_DUEFORMULA(PI_AMOUNT_DUE IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (PI_AMOUNT_DUE - BAL_COMPONENT);
  END PRIN_AMT_DUEFORMULA;

  FUNCTION INT_COMPONENT_P RETURN NUMBER IS
  BEGIN
    RETURN INT_COMPONENT;
  END INT_COMPONENT_P;

  FUNCTION BAL_COMPONENT_P RETURN NUMBER IS
  BEGIN
    RETURN BAL_COMPONENT;
  END BAL_COMPONENT_P;

  FUNCTION TOT_OVERDUE_P RETURN NUMBER IS
  BEGIN
    RETURN TOT_OVERDUE;
  END TOT_OVERDUE_P;

  FUNCTION CP_PARA_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_PARA;
  END CP_PARA_P;

END XTR_XTRTMAOD_XMLP_PKG;


/
