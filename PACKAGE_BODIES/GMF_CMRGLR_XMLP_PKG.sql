--------------------------------------------------------
--  DDL for Package Body GMF_CMRGLR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."GMF_CMRGLR_XMLP_PKG" AS
/* $Header: CMRGLRB.pls 120.0 2007/12/24 13:28:08 nchinnam noship $ */
  FUNCTION ORGANIZATIONCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(ORGANIZATIONCP)*/NULL;
    IF FROM_ORGN IS NOT NULL AND TO_ORGN IS NOT NULL THEN
      ORGANIZATIONCP := ' and mp.organization_code >= ''' || FROM_ORGN || ''' and mp.organization_code <= ''' || TO_ORGN || '''';
    ELSIF FROM_ORGN IS NULL AND TO_ORGN IS NULL THEN
      ORGANIZATIONCP :=' ';
      FROM_ORGN := SY_ALL;
      TO_ORGN := SY_ALL;
    ELSIF FROM_ORGN IS NOT NULL AND TO_ORGN IS NULL THEN
      ORGANIZATIONCP := ' and  mp.organization_code >= ''' || FROM_ORGN || '''';
      TO_ORGN := SY_ALL;
    ELSIF FROM_ORGN IS NULL AND TO_ORGN IS NOT NULL THEN
      ORGANIZATIONCP := ' and mp.organization_code <= ''' || TO_ORGN || '''';
      FROM_ORGN := SY_ALL;
    END IF;
    RETURN NULL;
  END ORGANIZATIONCFFORMULA;
  FUNCTION ORGANIZATIONCPFORMULA(ORGANIZATIONCF IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(ORGANIZATIONCF)*/NULL;
    RETURN NULL;
  END ORGANIZATIONCPFORMULA;
  FUNCTION REPORT_TYPECPFORMULA(REPORT_TYPECF IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(REPORT_TYPECF)*/NULL;
    RETURN NULL;
  END REPORT_TYPECPFORMULA;
  FUNCTION REPORT_TYPECFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(REPORT_TYPECP)*/NULL;
    IF REPORT_TYPE = '0' OR REPORT_TYPE = '1' THEN
      REPORT_TYPECP := 'and cst.acctg_cost <= 0 ';
    ELSE
      REPORT_TYPECP :=' ';
    END IF;
    RETURN NULL;
  END REPORT_TYPECFFORMULA;
  FUNCTION ITEMCPFORMULA(ITEMCF IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(ITEMCF)*/NULL;
    RETURN NULL;
  END ITEMCPFORMULA;
  FUNCTION ITEMCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(FROM_COST_CATEGORY)*/NULL;
    /*SRW.REFERENCE(TO_COST_CATEGORY)*/NULL;
    IF FROM_ITEM IS NOT NULL AND TO_ITEM IS NOT NULL THEN
      ITEMCP := ' and ic.item_number >= ''' || FROM_ITEM || '''
                                and ic.item_number <= ''' || TO_ITEM || '''';
    ELSIF FROM_ITEM IS NULL AND TO_ITEM IS NULL THEN
      ITEMCP :=' ';
      IF FROM_COST_CATEGORY IS NULL AND TO_COST_CATEGORY IS NULL THEN
        FROM_ITEM := SY_ALL;
        TO_ITEM := SY_ALL;
      END IF;
    ELSIF FROM_ITEM IS NOT NULL AND TO_ITEM IS NULL THEN
      ITEMCP := ' and ic.item_number >= ''' || FROM_ITEM || '''';
      IF FROM_COST_CATEGORY IS NULL AND TO_COST_CATEGORY IS NULL THEN
        TO_ITEM := SY_ALL;
      END IF;
    ELSIF FROM_ITEM IS NULL AND TO_ITEM IS NOT NULL THEN
      ITEMCP := ' and ic.item_number <= ''' || TO_ITEM || '''';
      IF FROM_COST_CATEGORY IS NULL AND TO_COST_CATEGORY IS NULL THEN
        FROM_ITEM := SY_ALL;
      END IF;
    END IF;
    RETURN NULL;
  END ITEMCFFORMULA;
  FUNCTION COSTCATEGORYCPFORMULA(COSTCATEGORYCF IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(COSTCATEGORYCF)*/NULL;
    RETURN NULL;
  END COSTCATEGORYCPFORMULA;
  FUNCTION COSTCATEGORYCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(COSTCATEGORYCP)*/NULL;
    IF FROM_COST_CATEGORY IS NOT NULL AND TO_COST_CATEGORY IS NOT NULL THEN
      COSTCATEGORYCP := ' and NVL(mckfv.concatenated_segments,'' '') >= ' || '''' || FROM_COST_CATEGORY || '''' || ' and NVL(mckfv.concatenated_segments,'' '') <= ' || '''' || TO_COST_CATEGORY || '''';
    ELSIF FROM_COST_CATEGORY IS NULL AND TO_COST_CATEGORY IS NULL THEN
      COSTCATEGORYCP :=' ';
      IF FROM_ITEM IS NULL AND TO_ITEM IS NULL THEN
        FROM_COST_CATEGORY := SY_ALL;
        TO_COST_CATEGORY := SY_ALL;
      END IF;
    ELSIF FROM_COST_CATEGORY IS NOT NULL AND TO_COST_CATEGORY IS NULL THEN
      COSTCATEGORYCP := ' and NVL(mckfv.concatenated_segments,'' '') >= ' || '''' || FROM_COST_CATEGORY || '''';
      IF FROM_ITEM IS NULL AND TO_ITEM IS NULL THEN
        TO_COST_CATEGORY := SY_ALL;
      END IF;
    ELSIF FROM_COST_CATEGORY IS NULL AND TO_COST_CATEGORY IS NOT NULL THEN
      COSTCATEGORYCP := ' and NVL(mckfv.concatenated_segments,'' '') <= ' || '''' || TO_COST_CATEGORY || '''';
      IF FROM_ITEM IS NULL AND TO_ITEM IS NULL THEN
        FROM_COST_CATEGORY := SY_ALL;
      END IF;
    END IF;
    RETURN NULL;
  END COSTCATEGORYCFFORMULA;
  FUNCTION FORMULA_NOCPFORMULA(SUM_FORMULACF IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(SUM_FORMULACF)*/NULL;
    RETURN NULL;
  END FORMULA_NOCPFORMULA;
  FUNCTION FORMULA_VERCPFORMULA(SUM_FORMULACF IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(SUM_FORMULACF)*/NULL;
    RETURN NULL;
  END FORMULA_VERCPFORMULA;
  FUNCTION ROUTING_NOCPFORMULA(SUM_FORMULACF IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(SUM_FORMULACF)*/NULL;
    RETURN NULL;
  END ROUTING_NOCPFORMULA;
  FUNCTION ROUTING_VERCPFORMULA(SUM_FORMULACF IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(SUM_FORMULACF)*/NULL;
    RETURN NULL;
  END ROUTING_VERCPFORMULA;
  FUNCTION G_CMGLR_SUMMARYGROUPFILTER RETURN BOOLEAN IS
  BEGIN
    IF REPORT_TYPE = '3' OR REPORT_TYPE = '0' THEN
      RETURN (TRUE);
    ELSE
      RETURN (FALSE);
    END IF;
    RETURN NULL;
  END G_CMGLR_SUMMARYGROUPFILTER;
  FUNCTION G_CMGLR_DTLGROUPFILTER RETURN BOOLEAN IS
  BEGIN
    IF REPORT_TYPE = '2' OR REPORT_TYPE = '1' THEN
      RETURN (TRUE);
    ELSE
      RETURN (FALSE);
    END IF;
    RETURN NULL;
  END G_CMGLR_DTLGROUPFILTER;
  FUNCTION SUM_FORMULACFFORMULA(FRM_ID IN NUMBER) RETURN VARCHAR2 IS
    FLD1 VARCHAR2(50) := NULL;
    FLD2 VARCHAR2(50) := NULL;
    FLD3 VARCHAR2(50) := NULL;
    FLD4 VARCHAR2(50) := NULL;
  BEGIN
    BEGIN
      SELECT
        FORMULA_NO,
        FORMULA_VERS
      INTO FLD1,FLD2
      FROM
        FM_FORM_EFF EFF,
        FM_FORM_MST MST
      WHERE EFF.FMEFF_ID = FRM_ID
        AND EFF.FORMULA_ID = MST.FORMULA_ID;
      FORMULA_NOCP := FLD1;
      FORMULA_VERCP := FLD2;
    END;
    BEGIN
      SELECT
        ROUTING_NO,
        ROUTING_VERS
      INTO FLD3,FLD4
      FROM
        FM_FORM_EFF EFF,
        FM_ROUT_HDR HDR
      WHERE EFF.FMEFF_ID = FRM_ID
        AND EFF.ROUTING_ID = HDR.ROUTING_ID;
      ROUTING_NOCP := FLD3;
      ROUTING_VERCP := FLD4;
    END;
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      FORMULA_NOCP := FLD1;
      FORMULA_VERCP := FLD2;
      ROUTING_NOCP := FLD3;
      ROUTING_VERCP := FLD4;
      RETURN NULL;
  END SUM_FORMULACFFORMULA;
  FUNCTION DET_FORMULACFFORMULA(FRM_ID_DTL IN NUMBER) RETURN VARCHAR2 IS
    FLD1 VARCHAR2(50) := NULL;
    FLD2 VARCHAR2(50) := NULL;
    FLD3 VARCHAR2(50) := NULL;
    FLD4 VARCHAR2(50) := NULL;
  BEGIN
    BEGIN
      SELECT
        FORMULA_NO,
        FORMULA_VERS
      INTO FLD1,FLD2
      FROM
        FM_FORM_EFF EFF,
        FM_FORM_MST MST
      WHERE EFF.FMEFF_ID = FRM_ID_DTL
        AND EFF.FORMULA_ID = MST.FORMULA_ID;
      FORMULA_NO1CP := FLD1;
      FORMULA_VER1CP := FLD2;
    END;
    BEGIN
      SELECT
        ROUTING_NO,
        ROUTING_VERS
      INTO FLD3,FLD4
      FROM
        FM_FORM_EFF EFF,
        FM_ROUT_HDR HDR
      WHERE EFF.FMEFF_ID = FRM_ID_DTL
        AND EFF.ROUTING_ID = HDR.ROUTING_ID;
      ROUTING_NO1CP := FLD3;
      ROUTING_VER1CP := FLD4;
    END;
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      FORMULA_NO1CP := FLD1;
      FORMULA_VER1CP := FLD2;
      ROUTING_NO1CP := FLD3;
      ROUTING_VER1CP := FLD4;
      RETURN NULL;
  END DET_FORMULACFFORMULA;
  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
  X:=BEFOREPFORM;
    FROM_ORGN := GMF_UTILITIES_GRP.GET_ORGANIZATION_CODE(P_FROM_ORGANIZATION_ID);
    TO_ORGN := GMF_UTILITIES_GRP.GET_ORGANIZATION_CODE(P_TO_ORGANIZATION_ID);
    FROM_ITEM := GMF_UTILITIES_GRP.GET_ITEM_NUMBER(P_FROM_ITEM_ID
                                                  ,P_FROM_ORGANIZATION_ID);
    TO_ITEM := GMF_UTILITIES_GRP.GET_ITEM_NUMBER(P_TO_ITEM_ID
                                                ,P_TO_ORGANIZATION_ID);
    FROM_COST_CATEGORY := GMF_UTILITIES_GRP.GET_COST_CATEGORY(P_FROM_COST_CATEGORY_ID);
    TO_COST_CATEGORY := GMF_UTILITIES_GRP.GET_COST_CATEGORY(P_TO_COST_CATEGORY_ID);
    IF (FROM_ORGN > TO_ORGN) THEN
      FND_MESSAGE.SET_NAME('GMF'
                          ,'CM_FRMWHSECODE_TOWHSECODE');
      /*SRW.MESSAGE(100
                 ,FND_MESSAGE.GET)*/NULL;
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END IF;
    IF (FROM_COST_CATEGORY IS NOT NULL AND FROM_ITEM IS NOT NULL) OR (FROM_COST_CATEGORY IS NOT NULL AND TO_ITEM IS NOT NULL) OR (TO_COST_CATEGORY IS NOT NULL AND FROM_ITEM IS NOT NULL) OR (TO_COST_CATEGORY IS NOT NULL AND TO_ITEM IS NOT NULL) THEN
      FND_MESSAGE.SET_NAME('GMF'
                          ,'CM_INV_COMB_ITEM_CLASS_ITEM_NO');
      /*SRW.MESSAGE(100
                 ,FND_MESSAGE.GET)*/NULL;
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END IF;
    IF (FROM_COST_CATEGORY IS NOT NULL AND TO_COST_CATEGORY IS NOT NULL) THEN
      IF FROM_COST_CATEGORY > TO_COST_CATEGORY THEN
        FND_MESSAGE.SET_NAME('GMF'
                            ,'CM_FRMITEM_CLS_LTE_TOITEM_CLS');
        /*SRW.MESSAGE(100
                   ,FND_MESSAGE.GET)*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      END IF;
    END IF;
    IF FROM_ITEM > TO_ITEM THEN
      FND_MESSAGE.SET_NAME('GMF'
                          ,'CM_FRMITEM_LTE_TOITM');
      /*SRW.MESSAGE(100
                 ,FND_MESSAGE.GET)*/NULL;
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END IF;
    IF (P_L_START_DATE > P_L_END_DATE AND P_L_START_DATE IS NOT NULL AND P_L_END_DATE IS NOT NULL) THEN
      FND_MESSAGE.SET_NAME('GMF'
                          ,'GMF_DATE_RANGE_ERR');
      /*SRW.MESSAGE(100
                 ,FND_MESSAGE.GET)*/NULL;
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;
  FUNCTION ORDERCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    BEGIN
      /*SRW.REFERENCE(ORDERCP)*/NULL;
      IF ORDERBY = '0' THEN
        ORDERCP := 'ic.item_number,mp.organization_code';
      ELSIF ORDERBY = '1' THEN
        ORDERCP := 'mp.organization_code,ic.item_number';
      ELSE
        ORDERCP := 'ic.item_number,mp.organization_code';
      END IF;
    END;
    RETURN (ORDERCP);
  END ORDERCFFORMULA;
  FUNCTION ORDER1CFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(ORDER1CP)*/NULL;
    IF ORDERBY = '0' THEN
      ORDER1CP := 'ic.item_number, mp.organization_code , mst.cost_cmpntcls_code, dtl.cost_analysis_code';
    ELSIF ORDERBY = '1' THEN
      ORDER1CP := 'mp.organization_code , ic.item_number, mst.cost_cmpntcls_code, dtl.cost_analysis_code';
    ELSE
      ORDER1CP := 'ic.item_number, mp.organization_code , mst.cost_cmpntcls_code, dtl.cost_analysis_code';
    END IF;
    RETURN (ORDERCP);
  END ORDER1CFFORMULA;
  PROCEDURE GMF_CMRGLR_XMLP_PKG_HEADER IS
  BEGIN
    NULL;
  END GMF_CMRGLR_XMLP_PKG_HEADER;
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    L_BASE_CURRENCY_CODE GL_PLCY_MST.BASE_CURRENCY_CODE%TYPE;
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    RETURN (TRUE);
  END BEFOREREPORT;
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;
  FUNCTION ORDERCPFORMULA(ORDERCF IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(ORDERCF)*/NULL;
  END ORDERCPFORMULA;
  FUNCTION ORDER1CPFORMULA(ORDER1CF IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(ORDER1CF)*/NULL;
  END ORDER1CPFORMULA;
  FUNCTION CF_COST_MTHDFORMULA RETURN CHAR IS
    L_COST_MTHD_CODE VARCHAR2(10);
  BEGIN
    BEGIN
      SELECT
        COST_MTHD_CODE
      INTO L_COST_MTHD_CODE
      FROM
        CM_MTHD_MST
      WHERE COST_TYPE_ID = P_COST_TYPE_ID;
    EXCEPTION
      WHEN OTHERS THEN
        L_COST_MTHD_CODE := NULL;
    END;
    RETURN (L_COST_MTHD_CODE);
  END CF_COST_MTHDFORMULA;
  FUNCTION CF_LEGAL_ENTITYFORMULA RETURN CHAR IS
    L_LEGAL_ENTITY_NAME VARCHAR2(240);
  BEGIN
    BEGIN
      SELECT
        LEGAL_ENTITY_NAME
      INTO L_LEGAL_ENTITY_NAME
      FROM
        GMF_LEGAL_ENTITIES
      WHERE LEGAL_ENTITY_ID = P_LEGAL_ENTITY_ID;
    EXCEPTION
      WHEN OTHERS THEN
        L_LEGAL_ENTITY_NAME := NULL;
    END;
    RETURN (L_LEGAL_ENTITY_NAME);
  END CF_LEGAL_ENTITYFORMULA;
  FUNCTION PERIOD_IDFORMULA RETURN NUMBER IS
    L_PERIOD_ID NUMBER;
    L_PERIOD_STATUS VARCHAR2(20);
  BEGIN
    BEGIN
      SELECT
        PERIOD_ID,
        DECODE(PERIOD_STATUS
              ,'O'
              ,'Open'
              ,'F'
              ,'Future'
              ,'C'
              ,'Closed')
      INTO L_PERIOD_ID,L_PERIOD_STATUS
      FROM
        GMF_PERIOD_STATUSES
      WHERE LEGAL_ENTITY_ID = P_LEGAL_ENTITY_ID
        AND CALENDAR_CODE = P_CALENDAR_CODE
        AND PERIOD_CODE = P_PERIOD_CODE
        AND COST_TYPE_ID = P_COST_TYPE_ID;
    EXCEPTION
      WHEN OTHERS THEN
        L_PERIOD_ID := 0;
    END;
    PERIOD_STATUS := L_PERIOD_STATUS;
    RETURN (NVL(L_PERIOD_ID
              ,-1));
  END PERIOD_IDFORMULA;
  FUNCTION DATESCPFORMULA(DATESCF IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(DATESCF)*/NULL;
  END DATESCPFORMULA;
  FUNCTION DATESCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(DATESCP)*/NULL;
    IF P_L_START_DATE IS NOT NULL AND P_L_END_DATE IS NOT NULL THEN
      DATESCP := ' and TRUNC(cst.start_date) >= ''' || P_L_START_DATE || ''' and TRUNC(cst.end_date) <= ''' || P_L_END_DATE || '''';
    ELSIF P_L_START_DATE IS NULL AND P_L_END_DATE IS NULL THEN
      DATESCP :=' ';
      P_L_START_DATE := SY_ALL;
      P_L_END_DATE := SY_ALL;
    ELSIF P_L_START_DATE IS NOT NULL AND P_L_END_DATE IS NULL THEN
      DATESCP := ' and  TRUNC(cst.start_date) >= ''' || P_L_START_DATE || '''';
      P_L_END_DATE := SY_ALL;
    ELSIF P_L_START_DATE IS NULL AND P_L_END_DATE IS NOT NULL THEN
      DATESCP := ' and TRUNC(cst.end_date) <= ''' || P_L_END_DATE || '''';
      P_L_START_DATE := SY_ALL;
    END IF;
    RETURN NULL;
  END DATESCFFORMULA;
  FUNCTION BEFOREPFORM RETURN BOOLEAN IS
  BEGIN
    P_L_START_DATE := FND_DATE.CANONICAL_TO_DATE(P_START_DATE);
    P_L_END_DATE := FND_DATE.CANONICAL_TO_DATE(P_END_DATE);
    RETURN (TRUE);
  END BEFOREPFORM;
  FUNCTION FORMULA_NOCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FORMULA_NOCP;
  END FORMULA_NOCP_P;
  FUNCTION FORMULA_VERCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FORMULA_VERCP;
  END FORMULA_VERCP_P;
  FUNCTION ROUTING_NOCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ROUTING_NOCP;
  END ROUTING_NOCP_P;
  FUNCTION ROUTING_VERCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ROUTING_VERCP;
  END ROUTING_VERCP_P;
  FUNCTION FORMULA_NO1CP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FORMULA_NO1CP;
  END FORMULA_NO1CP_P;
  FUNCTION FORMULA_VER1CP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FORMULA_VER1CP;
  END FORMULA_VER1CP_P;
  FUNCTION ROUTING_NO1CP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ROUTING_NO1CP;
  END ROUTING_NO1CP_P;
  FUNCTION ROUTING_VER1CP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ROUTING_VER1CP;
  END ROUTING_VER1CP_P;
  FUNCTION COSTCATEGORYCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN COSTCATEGORYCP;
  END COSTCATEGORYCP_P;
  FUNCTION ITEMCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ITEMCP;
  END ITEMCP_P;
  FUNCTION ORGANIZATIONCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ORGANIZATIONCP;
  END ORGANIZATIONCP_P;
  FUNCTION REPORT_TYPECP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN REPORT_TYPECP;
  END REPORT_TYPECP_P;
  FUNCTION ORDERCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ORDERCP;
  END ORDERCP_P;
  FUNCTION ORDER1CP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ORDER1CP;
  END ORDER1CP_P;
  FUNCTION PERIOD_STATUS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PERIOD_STATUS;
  END PERIOD_STATUS_P;
  FUNCTION DATESCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN DATESCP;
  END DATESCP_P;
END GMF_CMRGLR_XMLP_PKG;


/
