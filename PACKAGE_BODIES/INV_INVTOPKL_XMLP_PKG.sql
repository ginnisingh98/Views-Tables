--------------------------------------------------------
--  DDL for Package Body INV_INVTOPKL_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."INV_INVTOPKL_XMLP_PKG" AS
/* $Header: INVTOPKLB.pls 120.3 2008/05/02 07:11:05 dwkrishn ship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
	C_DATE_FORMAT varchar2(20);
  BEGIN
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      C_DATE_FORMAT := 'DD-MON-YYYY';
      CP_DATE_REQD_LO := to_char(P_DATE_REQD_LO,C_DATE_FORMAT);
      CP_DATE_REQD_HI := to_char(P_DATE_REQD_HI,C_DATE_FORMAT);
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Before Report: Init')*/NULL;
    END;
    DECLARE
      L_RETURN_STATUS VARCHAR2(1);
      L_MSG_COUNT NUMBER;
      L_MSG_DATA VARCHAR2(240);
    BEGIN
      IF WMS_INSTALL.CHECK_INSTALL(X_RETURN_STATUS => L_RETURN_STATUS
                               ,X_MSG_COUNT => L_MSG_COUNT
                               ,X_MSG_DATA => L_MSG_DATA
                               ,P_ORGANIZATION_ID => P_ORG_ID) THEN
        P_WMS_INSTALL := 'Y';
      ELSE
        P_WMS_INSTALL := 'N';
      END IF;
    END;
    GET_CHART_OF_ACCOUNTS_ID;
    BEGIN
      /*SRW.USER_EXIT('FND PUTPROFILE NAME="' || 'MFG_ORGANIZATION_ID' || '" FIELD="' || TO_CHAR(P_ORG_ID) || '"')*/NULL;
      /*SRW.USER_EXIT('FND PUTPROFILE NAME="' || 'MFG_SET_OF_BOOKS_ID' || '" FIELD="' || TO_CHAR(P_SET_OF_BOOKS_ID) || '"')*/NULL;
      FND_PROFILE.PUT('MFG_ORGANIZATION_ID'
                     ,TO_CHAR(P_ORG_ID));
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Before Report: Failed in setting org/ledger id profiles ')*/NULL;
        RAISE;
    END;
    BEGIN
      NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Before Report: ItemFlex')*/NULL;
    END;
    BEGIN
      /*SRW.REFERENCE(CP_CHART_OF_ACCOUNTS_NUM)*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Before Report: AccountFlex')*/NULL;
    END;
    IF P_ALLOCATE_MOVE_ORDER = 'Y' THEN
      INV_CALL_ALLOCATIONS_ENGINE;
    END IF;
    P_SOURCE_LOCATOR := INV_PROJECT.GET_LOCATOR(P_SOURCE_LOCATOR_ID
                                               ,P_ORG_ID);
    P_DEST_LOCATOR := INV_PROJECT.GET_LOCATOR(P_DEST_LOCATOR_ID
                                             ,P_ORG_ID);
    DECLARE
       l_return boolean;
    BEGIN
        l_return := P_ORG_IDVALIDTRIGGER();
        l_return := P_REQUESTED_BYVALIDTRIGGER();
        l_return := P_MOVE_ORDER_TYPEVALIDTRIGGER();
        l_return := P_PICK_SLIP_GROUP_RULE_IDVALID();
        l_return := P_PRINT_OPTIONVALIDTRIGGER();
        l_return := P_ALLOCATE_MOVE_ORDERVALIDTRIG();
        l_return := P_PLAN_TASKSVALIDTRIGGER();
        l_return := P_FREIGHT_CODEVALIDTRIGGER();
    END;
    RETURN (TRUE);
  END BEFOREREPORT;
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;
  FUNCTION AFTERPFORM RETURN BOOLEAN IS
    L_TEMP_WHERE VARCHAR2(200);
  BEGIN
    IF P_MOVE_ORDER_LOW IS NOT NULL THEN
      L_TEMP_WHERE := ' AND MTRH.REQUEST_NUMBER >= :P_MOVE_ORDER_LOW';
      P_WHERE_MMT := P_WHERE_MMT || L_TEMP_WHERE;
      P_WHERE_MMTT := P_WHERE_MMTT || L_TEMP_WHERE;
      P_WHERE_MTRL := P_WHERE_MTRL || L_TEMP_WHERE;
    END IF;
    IF P_MOVE_ORDER_HIGH IS NOT NULL THEN
      L_TEMP_WHERE := ' AND MTRH.REQUEST_NUMBER <= :P_MOVE_ORDER_HIGH';
      P_WHERE_MMT := P_WHERE_MMT || L_TEMP_WHERE;
      P_WHERE_MMTT := P_WHERE_MMTT || L_TEMP_WHERE;
      P_WHERE_MTRL := P_WHERE_MTRL || L_TEMP_WHERE;
    END IF;
    IF P_DATE_REQD_LO IS NOT NULL THEN
      L_TEMP_WHERE := ' AND TO_CHAR(MTRL.Date_required,''YYYY-MM-DD'') >= TO_CHAR(:P_DATE_REQD_LO,''YYYY-MM-DD'')';
      P_WHERE_MMT := P_WHERE_MMT || L_TEMP_WHERE;
      P_WHERE_MMTT := P_WHERE_MMTT || L_TEMP_WHERE;
      P_WHERE_MTRL := P_WHERE_MTRL || L_TEMP_WHERE;
    END IF;
    IF P_DATE_REQD_HI IS NOT NULL THEN
      L_TEMP_WHERE := ' AND TO_CHAR(MTRL.Date_required,''YYYY-MM-DD'') <= TO_CHAR(:P_DATE_REQD_HI,''YYYY-MM-DD'')';
      P_WHERE_MMT := P_WHERE_MMT || L_TEMP_WHERE;
      P_WHERE_MMTT := P_WHERE_MMTT || L_TEMP_WHERE;
      P_WHERE_MTRL := P_WHERE_MTRL || L_TEMP_WHERE;
    END IF;
    IF (P_SOURCE_SUBINV IS NOT NULL) THEN
      P_WHERE_MMT := P_WHERE_MMT || ' AND MMT.SUBINVENTORY_CODE       = :P_SOURCE_SUBINV';
      P_WHERE_MMTT := P_WHERE_MMTT || ' AND MMTT.SUBINVENTORY_CODE      = :P_SOURCE_SUBINV';
      P_WHERE_MTRL := P_WHERE_MTRL || ' AND MTRL.FROM_SUBINVENTORY_CODE = :P_SOURCE_SUBINV';
    END IF;
    IF (P_SOURCE_LOCATOR_ID IS NOT NULL) THEN
      P_WHERE_MMT := P_WHERE_MMT || ' AND MMT.LOCATOR_ID       = :P_SOURCE_LOCATOR_ID';
      P_WHERE_MMTT := P_WHERE_MMTT || ' AND MMTT.LOCATOR_ID      = :P_SOURCE_LOCATOR_ID';
      P_WHERE_MTRL := P_WHERE_MTRL || ' AND MTRL.FROM_LOCATOR_ID = :P_SOURCE_LOCATOR_ID';
    END IF;
    IF (P_DEST_SUBINV IS NOT NULL) THEN
      P_WHERE_MMT := P_WHERE_MMT || ' AND MMT.TRANSFER_SUBINVENTORY  = :P_DEST_SUBINV';
      P_WHERE_MMTT := P_WHERE_MMTT || ' AND MMTT.TRANSFER_SUBINVENTORY = :P_DEST_SUBINV';
      P_WHERE_MTRL := P_WHERE_MTRL || ' AND MTRL.TO_SUBINVENTORY_CODE  = :P_DEST_SUBINV';
    END IF;
    IF (P_DEST_LOCATOR_ID IS NOT NULL) THEN
      P_WHERE_MMT := P_WHERE_MMT || ' AND MMT.TRANSFER_LOCATOR_ID   = :P_DEST_LOCATOR_ID';
      P_WHERE_MMTT := P_WHERE_MMTT || ' AND MMTT.TRANSFER_TO_LOCATION = :P_DEST_LOCATOR_ID';
      P_WHERE_MTRL := P_WHERE_MTRL || ' AND MTRL.TO_LOCATOR_ID        = :P_DEST_LOCATOR_ID';
    END IF;
    IF P_REQUESTED_BY IS NOT NULL THEN
      L_TEMP_WHERE := ' AND MTRL.CREATED_BY = :P_REQUESTED_BY';
      P_WHERE_MMT := P_WHERE_MMT || L_TEMP_WHERE;
      P_WHERE_MMTT := P_WHERE_MMTT || L_TEMP_WHERE;
      P_WHERE_MTRL := P_WHERE_MTRL || L_TEMP_WHERE;
    END IF;
    IF P_MOVE_ORDER_TYPE = 1 THEN
      L_TEMP_WHERE := ' AND MTRH.MOVE_ORDER_TYPE = 3';
    ELSIF P_MOVE_ORDER_TYPE = 2 THEN
      L_TEMP_WHERE := ' AND MTRH.MOVE_ORDER_TYPE = 6';
    ELSIF P_MOVE_ORDER_TYPE = 3 THEN
      L_TEMP_WHERE := ' AND MTRH.MOVE_ORDER_TYPE = 5';
    ELSIF P_MOVE_ORDER_TYPE = 4 THEN
      L_TEMP_WHERE := ' AND MTRH.MOVE_ORDER_TYPE IN (1,2)';
    ELSE
      L_TEMP_WHERE := ' AND MTRH.MOVE_ORDER_TYPE IN (1,2,3,5,6)';
    END IF;
    P_WHERE_MMT := P_WHERE_MMT || L_TEMP_WHERE;
    P_WHERE_MMTT := P_WHERE_MMTT || L_TEMP_WHERE;
    P_WHERE_MTRL := P_WHERE_MTRL || L_TEMP_WHERE;
    IF P_PRINT_OPTION = '1' THEN
      P_WHERE_MMT := P_WHERE_MMT || ' AND 1 = 2 ';
      P_WHERE_MMTT := P_WHERE_MMTT || ' AND 1 = 2 ';
    ELSIF P_PRINT_OPTION = '2' THEN
      P_WHERE_MMT := P_WHERE_MMT || ' AND 1 = 2 ';
      P_WHERE_MTRL := P_WHERE_MTRL || ' AND 1 = 2 ';
    ELSIF P_PRINT_OPTION = '3' THEN
      P_WHERE_MMT := P_WHERE_MMT || ' AND 1 = 2 ';
      P_WHERE_MMTT := P_WHERE_MMTT || ' AND MMTT.WMS_TASK_STATUS = 8 ';
      P_WHERE_MTRL := P_WHERE_MTRL || ' AND 1 = 2 ';
    ELSIF P_PRINT_OPTION = '4' THEN
      P_WHERE_MMT := P_WHERE_MMT || ' AND 1 = 2 ';
      P_WHERE_MMTT := P_WHERE_MMTT || ' AND MMTT.WMS_TASK_STATUS <> 8 ';
      P_WHERE_MTRL := P_WHERE_MTRL || ' AND 1 = 2 ';
    ELSIF P_PRINT_OPTION = '5' THEN
      P_WHERE_MMTT := P_WHERE_MMTT || ' AND 1 = 2 ';
      P_WHERE_MTRL := P_WHERE_MTRL || ' AND 1 = 2 ';
    ELSE
      NULL;
    END IF;
    IF P_PICK_SLIP_NUMBER_LOW IS NOT NULL THEN
      P_WHERE_MMT := P_WHERE_MMT || ' AND MMT.PICK_SLIP_NUMBER  >= :P_PICK_SLIP_NUMBER_LOW';
      P_WHERE_MMTT := P_WHERE_MMTT || ' AND MMTT.PICK_SLIP_NUMBER >= :P_PICK_SLIP_NUMBER_LOW';
    END IF;
    IF P_PICK_SLIP_NUMBER_HIGH IS NOT NULL THEN
      P_WHERE_MMT := P_WHERE_MMT || ' AND MMT.PICK_SLIP_NUMBER  <= :P_PICK_SLIP_NUMBER_HIGH';
      P_WHERE_MMTT := P_WHERE_MMTT || ' AND MMTT.PICK_SLIP_NUMBER <= :P_PICK_SLIP_NUMBER_HIGH';
    END IF;
    IF P_SALES_ORDER_LOW IS NOT NULL OR P_SALES_ORDER_HIGH IS NOT NULL OR P_CUSTOMER_ID IS NOT NULL OR P_FREIGHT_CODE IS NOT NULL THEN
      P_FROM_MMT := P_FROM_MMT || ', WSH_DELIVERY_DETAILS WDD';
      P_FROM_MMTT := P_FROM_MMTT || ', WSH_DELIVERY_DETAILS WDD';
      P_FROM_MTRL := P_FROM_MTRL || ', WSH_DELIVERY_DETAILS WDD';
      L_TEMP_WHERE := '';
      IF P_SALES_ORDER_LOW IS NOT NULL THEN
        L_TEMP_WHERE := L_TEMP_WHERE || ' AND WDD.SOURCE_HEADER_NUMBER >= :P_SALES_ORDER_LOW ';
      END IF;
      IF P_SALES_ORDER_HIGH IS NOT NULL THEN
        L_TEMP_WHERE := L_TEMP_WHERE || ' AND WDD.SOURCE_HEADER_NUMBER <= :P_SALES_ORDER_HIGH ';
      END IF;
      IF P_CUSTOMER_ID IS NOT NULL THEN
        L_TEMP_WHERE := L_TEMP_WHERE || ' AND WDD.CUSTOMER_ID = :P_CUSTOMER_ID ';
      END IF;
      IF P_FREIGHT_CODE IS NOT NULL THEN
        L_TEMP_WHERE := L_TEMP_WHERE || ' WDD.SHIP_METHOD_CODE = :P_FREIGHT_CODE';
      END IF;
      L_TEMP_WHERE := L_TEMP_WHERE || ' AND MTRL.LINE_ID = WDD.MOVE_ORDER_LINE_ID';
      P_WHERE_MMT := P_WHERE_MMT || L_TEMP_WHERE;
      P_WHERE_MMTT := P_WHERE_MMTT || L_TEMP_WHERE;
      P_WHERE_MTRL := P_WHERE_MTRL || L_TEMP_WHERE;
      else
      P_FROM_MMT := ' ';
      P_FROM_MTRL := ' ';
      P_FROM_MMTT := ' ';
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;
  PROCEDURE GET_CHART_OF_ACCOUNTS_ID IS
    L_ERRBUF VARCHAR2(132);
    L_COAID NUMBER;
  BEGIN
    BEGIN
      SELECT
        SET_OF_BOOKS_ID
      INTO P_SET_OF_BOOKS_ID
      FROM
        ORG_ORGANIZATION_DEFINITIONS
      WHERE ORGANIZATION_ID = P_ORG_ID;
    EXCEPTION
      WHEN OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Could not find the ledger id')*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    BEGIN
      SELECT
        CHART_OF_ACCOUNTS_ID
      INTO L_COAID
      FROM
        GL_SETS_OF_BOOKS
      WHERE SET_OF_BOOKS_ID = P_SET_OF_BOOKS_ID;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        /*SRW.MESSAGE(1
                   ,'No Data Found in Get COAI')*/NULL;
        L_ERRBUF := GL_MESSAGE.GET_MESSAGE('GL_PLL_INVALID_SOB'
                                          ,'Y'
                                          ,'SOBID'
                                          ,TO_CHAR(P_SET_OF_BOOKS_ID));
        /*SRW.MESSAGE(1
                   ,L_ERRBUF)*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      WHEN OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Others Exception in Get COAI')*/NULL;
        L_ERRBUF := SQLERRM;
        /*SRW.MESSAGE(1
                   ,L_ERRBUF)*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    CP_CHART_OF_ACCOUNTS_NUM := L_COAID;
  END GET_CHART_OF_ACCOUNTS_ID;
  FUNCTION P_REQUESTED_BYVALIDTRIGGER RETURN BOOLEAN IS
  BEGIN
    IF P_REQUESTED_BY IS NOT NULL THEN
      SELECT
        USER_NAME
      INTO P_REQUESTED_BY_NAME
      FROM
        FND_USER
      WHERE USER_ID = P_REQUESTED_BY;
    END IF;
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END P_REQUESTED_BYVALIDTRIGGER;
  FUNCTION P_ORG_IDVALIDTRIGGER RETURN BOOLEAN IS
  BEGIN
    SELECT
      ORG.ORGANIZATION_NAME
    INTO P_ORG_NAME
    FROM
      ORG_ORGANIZATION_DEFINITIONS ORG
    WHERE ORG.ORGANIZATION_ID = P_ORG_ID;
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END P_ORG_IDVALIDTRIGGER;
  FUNCTION CF_PROJECT_NUMBERFORMULA(PROJECT_ID IN NUMBER) RETURN CHAR IS
    L_PROJECT_NUMBER VARCHAR2(100);
  BEGIN
    IF PROJECT_ID IS NOT NULL THEN
      BEGIN
        SELECT
          PROJECT_NUMBER
        INTO L_PROJECT_NUMBER
        FROM
          PJM_PROJECTS_V PJMP
        WHERE PROJECT_ID = PJMP.PROJECT_ID;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          BEGIN
            SELECT
              PROJECT_NUMBER
            INTO L_PROJECT_NUMBER
            FROM
              PA_PROJECTS_EXPEND_V PPEV
            WHERE PROJECT_ID = PPEV.PROJECT_ID
              AND ROWNUM = 1;
          EXCEPTION
            WHEN OTHERS THEN
              L_PROJECT_NUMBER := NULL;
          END;
        WHEN OTHERS THEN
          L_PROJECT_NUMBER := NULL;
      END;
    END IF;
    RETURN (L_PROJECT_NUMBER);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_PROJECT_NUMBERFORMULA;
  FUNCTION CF_TASK_NUMBERFORMULA(TASK_ID IN NUMBER
                                ,PROJECT_ID IN NUMBER) RETURN CHAR IS
    L_TASK_NUMBER VARCHAR2(100);
  BEGIN
    IF TASK_ID IS NOT NULL THEN
      BEGIN
        SELECT
          TASK_NUMBER
        INTO L_TASK_NUMBER
        FROM
          PJM_TASKS_V PJMT
        WHERE PROJECT_ID = PJMT.PROJECT_ID
          AND TASK_ID = PJMT.TASK_ID;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          BEGIN
            SELECT
              TASK_NUMBER
            INTO L_TASK_NUMBER
            FROM
              PA_TASKS_EXPEND_V PTEV
            WHERE PROJECT_ID = PTEV.PROJECT_ID
              AND TASK_ID = PTEV.TASK_ID
              AND ROWNUM = 1;
          EXCEPTION
            WHEN OTHERS THEN
              L_TASK_NUMBER := NULL;
          END;
        WHEN OTHERS THEN
          L_TASK_NUMBER := NULL;
      END;
    END IF;
    RETURN (L_TASK_NUMBER);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_TASK_NUMBERFORMULA;
  FUNCTION P_MOVE_ORDER_TYPEVALIDTRIGGER RETURN BOOLEAN IS
  BEGIN
    SELECT
      MEANING
    INTO P_MOVE_ORDER_TYPE_MEANING
    FROM
      MFG_LOOKUPS
    WHERE LOOKUP_TYPE = 'INV_PICK_SLIP_MO_TYPES'
      AND LOOKUP_CODE = P_MOVE_ORDER_TYPE;
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN TRUE;
  END P_MOVE_ORDER_TYPEVALIDTRIGGER;
  FUNCTION P_PICK_SLIP_GROUP_RULE_IDVALID RETURN BOOLEAN IS
  BEGIN
    IF P_PICK_SLIP_GROUP_RULE_ID IS NOT NULL THEN
      SELECT
        NAME
      INTO P_PICK_SLIP_GROUP_RULE_NAME
      FROM
        WSH_PICK_GROUPING_RULES
      WHERE PICK_GROUPING_RULE_ID = P_PICK_SLIP_GROUP_RULE_ID;
    END IF;
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN TRUE;
  END P_PICK_SLIP_GROUP_RULE_IDVALID;
  FUNCTION P_PRINT_OPTIONVALIDTRIGGER RETURN BOOLEAN IS
    L_PRINT_OPTION NUMBER;
  BEGIN
    IF P_PRINT_OPTION = '1' THEN
      L_PRINT_OPTION := 1;
    ELSIF P_PRINT_OPTION = '2' THEN
      L_PRINT_OPTION := 2;
    ELSIF P_PRINT_OPTION = '3' THEN
      L_PRINT_OPTION := 3;
    ELSIF P_PRINT_OPTION = '4' THEN
      L_PRINT_OPTION := 4;
    ELSIF P_PRINT_OPTION = '5' THEN
      L_PRINT_OPTION := 5;
    ELSE
      L_PRINT_OPTION := 99;
    END IF;
    SELECT
      MEANING
    INTO P_PRINT_OPTION_MEANING
    FROM
      MFG_LOOKUPS
    WHERE LOOKUP_TYPE = 'INV_PICK_SLIP_PRINT_OPTIONS'
      AND LOOKUP_CODE = L_PRINT_OPTION;
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN TRUE;
  END P_PRINT_OPTIONVALIDTRIGGER;
  FUNCTION CF_WIP_INFOFORMULA(LINE_ID_P IN NUMBER
                             ,MOVE_ORDER_TYPE IN NUMBER
                             ,TRANSACTION_SOURCE_TYPE_ID IN NUMBER) RETURN NUMBER IS
    CURSOR C_WIP_ENTITY_TYPE IS
      SELECT
        WE.ENTITY_TYPE
      FROM
        WIP_ENTITIES WE,
        MTL_TXN_REQUEST_LINES MTRL
      WHERE MTRL.LINE_ID = LINE_ID
        AND WE.WIP_ENTITY_ID = MTRL.TXN_SOURCE_ID;
    CURSOR C_DISCRETE_INFO IS
      SELECT
        WE.WIP_ENTITY_NAME JOB,
        WL.LINE_CODE LINE,
        WO.OPERATION_SEQ_NUM OPERATION,
        BD.DEPARTMENT_CODE DEPARTMENT,
        TO_CHAR(NULL) START_DATE
      FROM
        WIP_ENTITIES WE,
        WIP_LINES WL,
        BOM_DEPARTMENTS BD,
        WIP_OPERATIONS WO,
        WIP_DISCRETE_JOBS WDJ,
        MTL_TXN_REQUEST_LINES MTRL
      WHERE WE.WIP_ENTITY_ID = WDJ.WIP_ENTITY_ID
        AND WE.ORGANIZATION_ID = WDJ.ORGANIZATION_ID
        AND WDJ.LINE_ID = wl.line_id (+)
        AND WDJ.ORGANIZATION_ID = wl.organization_id (+)
        AND WO.DEPARTMENT_ID = bd.department_id (+)
        AND MTRL.TXN_SOURCE_ID = wo.wip_entity_id (+)
        AND MTRL.ORGANIZATION_ID = wo.organization_id (+)
        AND MTRL.TXN_SOURCE_LINE_ID = wo.operation_seq_num (+)
        AND WDJ.WIP_ENTITY_ID = MTRL.TXN_SOURCE_ID
        AND WDJ.ORGANIZATION_ID = MTRL.ORGANIZATION_ID
        AND MTRL.LINE_ID = LINE_ID_P;
    CURSOR C_REPETITIVE_INFO IS
      SELECT
        MSIK.CONCATENATED_SEGMENTS JOB,
        WL.LINE_CODE LINE,
        WO.OPERATION_SEQ_NUM OPERATION,
        BD.DEPARTMENT_CODE DEPARTMENT,
        TO_CHAR(WRS.FIRST_UNIT_START_DATE) START_DATE
      FROM
        MTL_SYSTEM_ITEMS_KFV MSIK,
        WIP_ENTITIES WE,
        WIP_LINES WL,
        BOM_DEPARTMENTS BD,
        WIP_OPERATIONS WO,
        WIP_REPETITIVE_SCHEDULES WRS,
        MTL_TXN_REQUEST_LINES MTRL
      WHERE MSIK.INVENTORY_ITEM_ID = WE.PRIMARY_ITEM_ID
        AND MSIK.ORGANIZATION_ID = WE.ORGANIZATION_ID
        AND WE.WIP_ENTITY_ID = WRS.WIP_ENTITY_ID
        AND WE.ORGANIZATION_ID = WRS.ORGANIZATION_ID
        AND WL.LINE_ID = WRS.LINE_ID
        AND WL.ORGANIZATION_ID = WRS.ORGANIZATION_ID
        AND bd.department_id (+) = WO.DEPARTMENT_ID
        AND wo.wip_entity_id (+) = MTRL.TXN_SOURCE_ID
        AND wo.operation_seq_num (+) = MTRL.TXN_SOURCE_LINE_ID
        AND wo.organization_id (+) = MTRL.ORGANIZATION_ID
        AND wo.repetitive_schedule_id (+) = MTRL.REFERENCE_ID
        AND WRS.WIP_ENTITY_ID = MTRL.TXN_SOURCE_ID
        AND WRS.REPETITIVE_SCHEDULE_ID = MTRL.REFERENCE_ID
        AND WRS.ORGANIZATION_ID = MTRL.ORGANIZATION_ID
        AND MTRL.LINE_ID = LINE_ID_P;
    CURSOR C_FLOW_INFO IS
      SELECT
        WE.WIP_ENTITY_NAME JOB,
        WL.LINE_CODE LINE,
        BOS2.OPERATION_SEQ_NUM OPERATION,
        BD.DEPARTMENT_CODE DEPARTMENT,
        TO_CHAR(NULL) START_DATE
      FROM
        WIP_ENTITIES WE,
        WIP_LINES WL,
        BOM_DEPARTMENTS BD,
        BOM_OPERATION_SEQUENCES BOS2,
        BOM_OPERATION_SEQUENCES BOS,
        BOM_OPERATIONAL_ROUTINGS BOR,
        WIP_FLOW_SCHEDULES WFS,
        MTL_TXN_REQUEST_LINES MTRL
      WHERE WE.WIP_ENTITY_ID = WFS.WIP_ENTITY_ID
        AND WE.ORGANIZATION_ID = WFS.ORGANIZATION_ID
        AND WL.LINE_ID = WFS.LINE_ID
        AND WL.ORGANIZATION_ID = WFS.ORGANIZATION_ID
        AND BD.DEPARTMENT_ID = BOS2.DEPARTMENT_ID
        AND BOS2.OPERATION_SEQUENCE_ID = BOS.LINE_OP_SEQ_ID
        AND BOS2.ROUTING_SEQUENCE_ID = BOS.ROUTING_SEQUENCE_ID
        AND BOS.ROUTING_SEQUENCE_ID = BOR.ROUTING_SEQUENCE_ID
        AND BOS.OPERATION_TYPE = 1
        AND ( BOR.ALTERNATE_ROUTING_DESIGNATOR = WFS.ALTERNATE_ROUTING_DESIGNATOR
      OR ( WFS.ALTERNATE_ROUTING_DESIGNATOR IS NULL
        AND BOR.ALTERNATE_ROUTING_DESIGNATOR IS NULL ) )
        AND BOR.ASSEMBLY_ITEM_ID = WFS.PRIMARY_ITEM_ID
        AND BOR.ORGANIZATION_ID = WFS.ORGANIZATION_ID
        AND WFS.WIP_ENTITY_ID = MTRL.TXN_SOURCE_ID
        AND WFS.ORGANIZATION_ID = MTRL.ORGANIZATION_ID
        AND MTRL.LINE_ID = LINE_ID_P;
    L_WIP_INFO C_DISCRETE_INFO%ROWTYPE;
  BEGIN
    CP_WIP_ENTITY_TYPE := NULL;
    IF (MOVE_ORDER_TYPE = 5 AND TRANSACTION_SOURCE_TYPE_ID in (5,13)) THEN
      OPEN C_WIP_ENTITY_TYPE;
      FETCH C_WIP_ENTITY_TYPE
       INTO CP_WIP_ENTITY_TYPE;
      CLOSE C_WIP_ENTITY_TYPE;
      IF CP_WIP_ENTITY_TYPE in (1,5) THEN
        OPEN C_DISCRETE_INFO;
        FETCH C_DISCRETE_INFO
         INTO L_WIP_INFO;
        CLOSE C_DISCRETE_INFO;
      ELSIF CP_WIP_ENTITY_TYPE = 2 THEN
        OPEN C_REPETITIVE_INFO;
        FETCH C_REPETITIVE_INFO
         INTO L_WIP_INFO;
        CLOSE C_REPETITIVE_INFO;
      ELSIF CP_WIP_ENTITY_TYPE = 4 THEN
        OPEN C_FLOW_INFO;
        FETCH C_FLOW_INFO
         INTO L_WIP_INFO;
        CLOSE C_FLOW_INFO;
      END IF;
    END IF;
    CP_WIP_JOB := L_WIP_INFO.JOB;
    CP_WIP_LINE := L_WIP_INFO.LINE;
    CP_WIP_OPERATION := L_WIP_INFO.OPERATION;
    CP_WIP_DEPARTMENT := L_WIP_INFO.DEPARTMENT;
    CP_WIP_START_DATE := L_WIP_INFO.START_DATE;
    RETURN 1;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN -1;
  END CF_WIP_INFOFORMULA;
  FUNCTION CF_SO_INFOFORMULA(LINE_ID IN NUMBER
                            ,MOVE_ORDER_TYPE IN NUMBER) RETURN NUMBER IS
    CURSOR C_SO_INFO IS
      SELECT
        WDD.SOURCE_HEADER_NUMBER SO_NUMBER,
        OEL.LINE_NUMBER SO_LINE_NUMBER,
        WND.NAME DELIVERY_NAME
      FROM
        OE_ORDER_LINES_ALL OEL,
        WSH_DELIVERY_DETAILS WDD,
        WSH_DELIVERY_ASSIGNMENTS WDA,
        WSH_NEW_DELIVERIES WND
      WHERE WDD.MOVE_ORDER_LINE_ID = CF_SO_INFOFORMULA.LINE_ID
        AND WDD.SOURCE_LINE_ID = OEL.LINE_ID
        AND WDD.DELIVERY_DETAIL_ID = WDA.DELIVERY_DETAIL_ID
        AND WND.DELIVERY_ID (+) = WDA.DELIVERY_ID;
  BEGIN
    IF MOVE_ORDER_TYPE = 3 THEN
      OPEN C_SO_INFO;
      FETCH C_SO_INFO
       INTO CP_SO_ORDER_NUMBER,CP_SO_LINE_NUMBER,CP_SO_DELIVERY_NAME;
      CLOSE C_SO_INFO;
    END IF;
    RETURN 1;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN -1;
  END CF_SO_INFOFORMULA;
  PROCEDURE INV_CALL_ALLOCATIONS_ENGINE IS
    L_DETAIL_STATUS VARCHAR2(10);
  BEGIN
    IF (P_MOVE_ORDER_TYPE IS NOT NULL AND P_ORG_ID IS NOT NULL) THEN
      INV_PICK_SLIP_REPORT.RUN_DETAIL_ENGINE(L_DETAIL_STATUS
                                            ,P_ORG_ID
                                            ,P_MOVE_ORDER_TYPE
                                            ,P_MOVE_ORDER_LOW
                                            ,P_MOVE_ORDER_HIGH
                                            ,P_SOURCE_SUBINV
                                            ,P_SOURCE_LOCATOR_ID
                                            ,P_DEST_SUBINV
                                            ,P_DEST_LOCATOR_ID
                                            ,P_SALES_ORDER_LOW
                                            ,P_SALES_ORDER_HIGH
                                            ,P_FREIGHT_CODE
                                            ,P_CUSTOMER_ID
                                            ,P_REQUESTED_BY
                                            ,P_DATE_REQD_LO
                                            ,P_DATE_REQD_HI
                                            ,(P_PLAN_TASKS = 'Y')
                                            ,P_PICK_SLIP_GROUP_RULE_ID
                                            ,P_CONC_REQUEST_ID);
      IF L_DETAIL_STATUS in ('E','U') THEN
        /*SRW.MESSAGE(1
                   ,'Detail Engine Failed to release some/all lines')*/NULL;
      END IF;
    END IF;
  END INV_CALL_ALLOCATIONS_ENGINE;
  FUNCTION P_CUSTOMER_IDVALIDTRIGGER RETURN BOOLEAN IS
  BEGIN
    IF P_CUSTOMER_ID IS NOT NULL THEN
      BEGIN
        SELECT
          PARTY.PARTY_NAME
        INTO P_CUSTOMER_NAME
        FROM
          HZ_PARTIES PARTY,
          HZ_CUST_ACCOUNTS CUST_ACCT
        WHERE CUST_ACCT.CUST_ACCOUNT_ID = P_CUSTOMER_ID
          AND PARTY.PARTY_ID = CUST_ACCT.PARTY_ID;
      EXCEPTION
        WHEN OTHERS THEN
          NULL;
      END;
    END IF;
    RETURN TRUE;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN TRUE;
  END P_CUSTOMER_IDVALIDTRIGGER;
  FUNCTION CF_TASK_STATUSFORMULA(TASK_STATUS IN NUMBER) RETURN CHAR IS
    L_MEANING VARCHAR2(20);
  BEGIN
    IF TASK_STATUS IS NOT NULL AND TASK_STATUS <> 0 THEN
      SELECT
        MEANING
      INTO L_MEANING
      FROM
        MFG_LOOKUPS
      WHERE LOOKUP_TYPE = 'WMS_TASK_STATUS'
        AND LOOKUP_CODE = TASK_STATUS;
    ELSIF TASK_STATUS = 0 THEN
      L_MEANING := P_CONST_UNALLOCATED;
    END IF;
    RETURN L_MEANING;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END CF_TASK_STATUSFORMULA;
  FUNCTION CF_TASK_IDFORMULA(TASK_STATUS IN NUMBER
                            ,PARENT_LINE_ID IN NUMBER
                            ,TRANSACTION_ID IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF TASK_STATUS not in (0,6) AND P_WMS_INSTALL = 'Y' THEN
      RETURN NVL(PARENT_LINE_ID
                ,TRANSACTION_ID);
    ELSE
      RETURN NULL;
    END IF;
  END CF_TASK_IDFORMULA;
  FUNCTION P_ALLOCATE_MOVE_ORDERVALIDTRIG RETURN BOOLEAN IS
  BEGIN
    IF P_ALLOCATE_MOVE_ORDER IS NOT NULL THEN
      SELECT
        MEANING
      INTO P_ALLOCATE_MOVE_ORDER_MEANING
      FROM
        FND_LOOKUPS
      WHERE LOOKUP_TYPE = 'YES_NO'
        AND LOOKUP_CODE = P_ALLOCATE_MOVE_ORDER;
    END IF;
    RETURN TRUE;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN TRUE;
  END P_ALLOCATE_MOVE_ORDERVALIDTRIG;
  FUNCTION P_PLAN_TASKSVALIDTRIGGER RETURN BOOLEAN IS
  BEGIN
    IF P_PLAN_TASKS IS NOT NULL THEN
      SELECT
        MEANING
      INTO P_PLAN_TASKS_MEANING
      FROM
        FND_LOOKUPS
      WHERE LOOKUP_TYPE = 'YES_NO'
        AND LOOKUP_CODE = P_PLAN_TASKS;
    END IF;
    RETURN TRUE;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN TRUE;
  END P_PLAN_TASKSVALIDTRIGGER;
  FUNCTION P_FREIGHT_CODEVALIDTRIGGER RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END P_FREIGHT_CODEVALIDTRIGGER;
  FUNCTION CF_SEC_QTYFORMULA(INVENTORY_ITEM_ID_1 IN NUMBER
                            ,SEC_TRANSACTION_QTY IN NUMBER) RETURN NUMBER IS
    L_TRACK_IND VARCHAR2(20);
    L_SEC_QTY NUMBER;
  BEGIN
    IF INVENTORY_ITEM_ID_1 IS NOT NULL THEN
      SELECT
        TRACKING_QUANTITY_IND
      INTO L_TRACK_IND
      FROM
        MTL_SYSTEM_ITEMS_B
      WHERE INVENTORY_ITEM_ID = INVENTORY_ITEM_ID_1
        AND ORGANIZATION_ID = P_ORG_ID;
      IF (L_TRACK_IND = 'PS') THEN
        L_SEC_QTY := SEC_TRANSACTION_QTY;
      ELSE
        L_SEC_QTY := NULL;
      END IF;
    END IF;
    RETURN (L_SEC_QTY);
  END CF_SEC_QTYFORMULA;
  FUNCTION CF_SEC_UOMFORMULA(INVENTORY_ITEM_ID_1 IN NUMBER
                            ,SEC_UOM IN VARCHAR2) RETURN CHAR IS
    L_TRACK_IND VARCHAR2(20);
    L_SEC_UOM VARCHAR2(10);
  BEGIN
    IF INVENTORY_ITEM_ID_1 IS NOT NULL THEN
      SELECT
        TRACKING_QUANTITY_IND
      INTO L_TRACK_IND
      FROM
        MTL_SYSTEM_ITEMS_B
      WHERE INVENTORY_ITEM_ID = INVENTORY_ITEM_ID_1
        AND ORGANIZATION_ID = P_ORG_ID;
      IF (L_TRACK_IND = 'PS') THEN
        L_SEC_UOM := SEC_UOM;
      ELSE
        L_SEC_UOM := NULL;
      END IF;
    END IF;
    RETURN (L_SEC_UOM);
  END CF_SEC_UOMFORMULA;
  FUNCTION CF_PARENT_SEC_UOMFORMULA(PARENT_ITEM_ID IN NUMBER
                                   ,PARENT_SEC_TXN_UOM IN VARCHAR2) RETURN CHAR IS
    L_TRACK_IND VARCHAR2(20);
    L_PARENT_SEC_UOM NUMBER;
  BEGIN
    IF PARENT_ITEM_ID IS NULL THEN
      RETURN ('');
    ELSE
      SELECT
        TRACKING_QUANTITY_IND
      INTO L_TRACK_IND
      FROM
        MTL_SYSTEM_ITEMS_B
      WHERE INVENTORY_ITEM_ID = PARENT_ITEM_ID
        AND ORGANIZATION_ID = P_ORG_ID;
      IF (L_TRACK_IND = 'PS') THEN
        L_PARENT_SEC_UOM := PARENT_SEC_TXN_UOM;
      ELSE
        L_PARENT_SEC_UOM := NULL;
      END IF;
    END IF;
    RETURN (L_PARENT_SEC_UOM);
  END CF_PARENT_SEC_UOMFORMULA;
  FUNCTION CF_PARENT_SEC_QTYFORMULA(PARENT_ITEM_ID IN NUMBER
                                   ,PARENT_SEC_TXN_QTY IN NUMBER) RETURN NUMBER IS
    L_TRACK_IND VARCHAR2(20);
    L_PARENT_SEC_QTY NUMBER;
  BEGIN
    IF PARENT_ITEM_ID IS NULL THEN
      RETURN ('');
    ELSE
      SELECT
        TRACKING_QUANTITY_IND
      INTO L_TRACK_IND
      FROM
        MTL_SYSTEM_ITEMS_B
      WHERE INVENTORY_ITEM_ID = PARENT_ITEM_ID
        AND ORGANIZATION_ID = P_ORG_ID;
      IF (L_TRACK_IND = 'PS') THEN
        L_PARENT_SEC_QTY := PARENT_SEC_TXN_QTY;
      ELSE
        L_PARENT_SEC_QTY := NULL;
      END IF;
    END IF;
    RETURN (L_PARENT_SEC_QTY);
  END CF_PARENT_SEC_QTYFORMULA;
  FUNCTION CP_SO_ORDER_NUMBER_P RETURN NUMBER IS
  BEGIN
    RETURN CP_SO_ORDER_NUMBER;
  END CP_SO_ORDER_NUMBER_P;
  FUNCTION CP_SO_LINE_NUMBER_P RETURN NUMBER IS
  BEGIN
    RETURN CP_SO_LINE_NUMBER;
  END CP_SO_LINE_NUMBER_P;
  FUNCTION CP_SO_DELIVERY_NAME_P RETURN NUMBER IS
  BEGIN
    RETURN CP_SO_DELIVERY_NAME;
  END CP_SO_DELIVERY_NAME_P;
  FUNCTION CP_WIP_JOB_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_WIP_JOB;
  END CP_WIP_JOB_P;
  FUNCTION CP_WIP_DEPARTMENT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_WIP_DEPARTMENT;
  END CP_WIP_DEPARTMENT_P;
  FUNCTION CP_WIP_LINE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_WIP_LINE;
  END CP_WIP_LINE_P;
  FUNCTION CP_WIP_ENTITY_TYPE_P RETURN NUMBER IS
  BEGIN
    RETURN CP_WIP_ENTITY_TYPE;
  END CP_WIP_ENTITY_TYPE_P;
  FUNCTION CP_WIP_START_DATE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_WIP_START_DATE;
  END CP_WIP_START_DATE_P;
  FUNCTION CP_WIP_OPERATION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_WIP_OPERATION;
  END CP_WIP_OPERATION_P;
  FUNCTION CP_CHART_OF_ACCOUNTS_NUM_P RETURN NUMBER IS
  BEGIN
    RETURN CP_CHART_OF_ACCOUNTS_NUM;
  END CP_CHART_OF_ACCOUNTS_NUM_P;
END INV_INVTOPKL_XMLP_PKG;


/
