--------------------------------------------------------
--  DDL for Package Body AR_ARYVTSLD_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."AR_ARYVTSLD_XMLP_PKG" AS
/* $Header: ARYVTSLDB.pls 120.0 2007/12/27 14:11:59 abraghun noship $ */
  FUNCTION C_CURRDATEFORMULA RETURN VARCHAR2 IS
  BEGIN
    RETURN (INITCAP(TO_CHAR(SYSDATE
                          ,'DY DD MON YYYY')));
  END C_CURRDATEFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    DECLARE
      SOBNAME VARCHAR2(60);
      TDR_VAT_NO VARCHAR2(60);
      SOBCURR VARCHAR2(20);
      BRANCH_NAME VARCHAR2(240);
      BRANCH_ADDR NUMBER;
      BRANCH_CTY VARCHAR2(20);
    BEGIN
      IF P_REPTYPE = 'D' THEN
        C_GROUP_BY := ',racl.customer_trx_line_id';
      ELSE
       -- NULL;
       C_GROUP_BY := ' ';
      END IF;
      SELECT
        GSB.NAME,
        ASP.TAX_REGISTRATION_NUMBER,
        GSB.CURRENCY_CODE
      INTO C_SOBNAME,C_TDR_VAT_NO,C_SOBCURR
      FROM
        AR_SYSTEM_PARAMETERS ASP,
        GL_SETS_OF_BOOKS GSB
      WHERE ASP.SET_OF_BOOKS_ID = GSB.SET_OF_BOOKS_ID
        AND GSB.CHART_OF_ACCOUNTS_ID = P_CHART_OF_ACCOUNTS_ID
        AND GSB.SET_OF_BOOKS_ID = P_SET_OF_BOOKS_ID;
      SELECT
        LOC.ADDRESS1,
        LOC.ADDRESS2,
        LOC.CITY,
        LOC.POSTAL_CODE,
        LOC.COUNTRY
      INTO C_BRANCH,C_STREET,C_CITY,C_POSTAL_CODE,C_COUNTRY
      FROM
        HZ_CUST_ACCT_SITES ACCT_SITE,
        HZ_PARTY_SITES PARTY_SITE,
        HZ_LOCATIONS LOC
      WHERE ACCT_SITE.CUST_ACCOUNT_ID = - 1
        AND ACCT_SITE.CUST_ACCT_SITE_ID = P_REMIT_TO_ADDRESS
        AND ACCT_SITE.PARTY_SITE_ID = PARTY_SITE.PARTY_SITE_ID
        AND LOC.LOCATION_ID = PARTY_SITE.LOCATION_ID;
    END;
    GET_BOILER_PLATES;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION INC_LINE_NO RETURN BOOLEAN IS
  BEGIN
    IF C_LINE_NO IS NULL THEN
      C_LINE_NO := 1;
    ELSE
      C_LINE_NO := C_LINE_NO + 1;
    END IF;
    RETURN (TRUE);
  END INC_LINE_NO;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  PROCEDURE GET_LOOKUP_MEANING(P_LOOKUP_TYPE IN VARCHAR2
                              ,P_LOOKUP_CODE IN VARCHAR2
                              ,P_LOOKUP_MEANING IN OUT NOCOPY VARCHAR2) IS
    W_MEANING VARCHAR2(80);
  BEGIN
    SELECT
      MEANING
    INTO W_MEANING
    FROM
      FND_LOOKUPS
    WHERE LOOKUP_TYPE = P_LOOKUP_TYPE
      AND LOOKUP_CODE = P_LOOKUP_CODE;
    P_LOOKUP_MEANING := W_MEANING;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      P_LOOKUP_MEANING := NULL;
  END GET_LOOKUP_MEANING;

  PROCEDURE GET_BOILER_PLATES IS
    W_INDUSTRY_CODE VARCHAR2(20);
    W_INDUSTRY_STAT VARCHAR2(20);
  BEGIN
    IF GET(0
       ,0
       ,W_INDUSTRY_STAT
       ,W_INDUSTRY_CODE) THEN
      IF W_INDUSTRY_CODE = 'C' THEN
        C_SALES_TITLE := NULL;
      ELSE
        GET_LOOKUP_MEANING('IND_SALES'
                          ,W_INDUSTRY_CODE
                          ,C_SALES_TITLE);
      END IF;
    END IF;
    C_INDUSTRY_CODE := W_INDUSTRY_CODE;
  END GET_BOILER_PLATES;

  FUNCTION SET_DISPLAY_FOR_CORE RETURN BOOLEAN IS
  BEGIN
    IF C_INDUSTRY_CODE = 'C' THEN
      RETURN (TRUE);
    ELSE
      IF C_SALES_TITLE IS NOT NULL THEN
        RETURN (FALSE);
      ELSE
        RETURN (TRUE);
      END IF;
    END IF;
    RETURN NULL;
  END SET_DISPLAY_FOR_CORE;

  FUNCTION SET_DISPLAY_FOR_GOV RETURN BOOLEAN IS
  BEGIN
    IF C_INDUSTRY_CODE = 'C' THEN
      RETURN (FALSE);
    ELSE
      IF C_SALES_TITLE IS NOT NULL THEN
        RETURN (TRUE);
      ELSE
        RETURN (FALSE);
      END IF;
    END IF;
    RETURN NULL;
  END SET_DISPLAY_FOR_GOV;

  FUNCTION CF_CURRDATEFORMULA RETURN CHAR IS
  BEGIN
    RETURN FND_DATE.DATE_TO_CHARDT(SYSDATE);
  END CF_CURRDATEFORMULA;

  FUNCTION CF_STARTFORMULA RETURN CHAR IS
  BEGIN
    RETURN FND_DATE.DATE_TO_CHARDATE(P_STARTDATE);
  END CF_STARTFORMULA;

  FUNCTION CF_1FORMULA RETURN CHAR IS
  BEGIN
    RETURN FND_DATE.DATE_TO_CHARDATE(P_ENDDATE);
  END CF_1FORMULA;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    IF (P_SITE_USE_CODE = 'SHIP_TO') THEN
      LP_WHERE := 'and racu.cust_account_id = nvl(ract.ship_to_customer_id,ract.bill_to_customer_id)
                  and nvl(ract.ship_to_site_use_id, ract.bill_to_site_use_id) = rasu.site_use_id
                  ';
    ELSE
      LP_WHERE := 'and racu.cust_account_id = ract.bill_to_customer_id
                  and ract.bill_to_site_use_id = rasu.site_use_id
                  ';
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION C_LINE_NO_P RETURN NUMBER IS
  T BOOLEAN;
  BEGIN
  T:=INC_LINE_NO();
    RETURN C_LINE_NO;
  END C_LINE_NO_P;

  FUNCTION C_GROUP_BY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_GROUP_BY;
  END C_GROUP_BY_P;

  FUNCTION C_SOBNAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_SOBNAME;
  END C_SOBNAME_P;

  FUNCTION C_TDR_VAT_NO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_TDR_VAT_NO;
  END C_TDR_VAT_NO_P;

  FUNCTION C_SOBCURR_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_SOBCURR;
  END C_SOBCURR_P;

  FUNCTION C_BRANCH_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BRANCH;
  END C_BRANCH_P;

  FUNCTION C_COUNTRY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COUNTRY;
  END C_COUNTRY_P;

  FUNCTION C_ADDR_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_ADDR_ID;
  END C_ADDR_ID_P;

  FUNCTION C_INDUSTRY_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_INDUSTRY_CODE;
  END C_INDUSTRY_CODE_P;

  FUNCTION C_SALES_TITLE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_SALES_TITLE;
  END C_SALES_TITLE_P;

  FUNCTION C_CITY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_CITY;
  END C_CITY_P;

  FUNCTION C_POSTAL_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_POSTAL_CODE;
  END C_POSTAL_CODE_P;

  FUNCTION C_STREET_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_STREET;
  END C_STREET_P;

  FUNCTION GET(APPL_ID IN INTEGER
              ,DEP_APPL_ID IN INTEGER
              ,STATUS OUT NOCOPY VARCHAR2
              ,INDUSTRY OUT NOCOPY VARCHAR2) RETURN BOOLEAN IS
    X0 BOOLEAN;
  BEGIN
    /*STPROC.INIT('declare X0rv BOOLEAN; begin X0rv := FND_INSTALLATION.GET(:APPL_ID, :DEP_APPL_ID, :STATUS, :INDUSTRY); :X0 := sys.diutil.bool_to_int(X0rv); end;');
    STPROC.BIND_I(APPL_ID);
    STPROC.BIND_I(DEP_APPL_ID);
    STPROC.BIND_O(STATUS);
    STPROC.BIND_O(INDUSTRY);
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,STATUS);
    STPROC.RETRIEVE(4
                   ,INDUSTRY);
    STPROC.RETRIEVE(5
                   ,X0);*/
    RETURN X0;
  END GET;

  FUNCTION GET_APP_INFO(APPLICATION_SHORT_NAME IN VARCHAR2
                       ,STATUS OUT NOCOPY VARCHAR2
                       ,INDUSTRY OUT NOCOPY VARCHAR2
                       ,ORACLE_SCHEMA OUT NOCOPY VARCHAR2) RETURN BOOLEAN IS
    X0 BOOLEAN;
  BEGIN
    /*STPROC.INIT('declare X0rv BOOLEAN; begin X0rv := FND_INSTALLATION.GET_APP_INFO(:APPLICATION_SHORT_NAME, :STATUS, :INDUSTRY, :ORACLE_SCHEMA); :X0 := sys.diutil.bool_to_int(X0rv); end;');
    STPROC.BIND_I(APPLICATION_SHORT_NAME);
    STPROC.BIND_O(STATUS);
    STPROC.BIND_O(INDUSTRY);
    STPROC.BIND_O(ORACLE_SCHEMA);
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,STATUS);
    STPROC.RETRIEVE(3
                   ,INDUSTRY);
    STPROC.RETRIEVE(4
                   ,ORACLE_SCHEMA);
    STPROC.RETRIEVE(5
                   ,X0);*/
    RETURN X0;
  END GET_APP_INFO;

  FUNCTION GET_APP_INFO_OTHER(APPLICATION_SHORT_NAME IN VARCHAR2
                             ,TARGET_SCHEMA IN VARCHAR2
                             ,STATUS OUT NOCOPY VARCHAR2
                             ,INDUSTRY OUT NOCOPY VARCHAR2
                             ,ORACLE_SCHEMA OUT NOCOPY VARCHAR2) RETURN BOOLEAN IS
    X0 BOOLEAN;
  BEGIN
   /* STPROC.INIT('declare X0rv BOOLEAN; begin X0rv := FND_INSTALLATION.GET_APP_INFO_OTHER(:APPLICATION_SHORT_NAME, :TARGET_SCHEMA, :STATUS, :INDUSTRY, :ORACLE_SCHEMA); :X0 := sys.diutil.bool_to_int(X0rv); end;');
    STPROC.BIND_I(APPLICATION_SHORT_NAME);
    STPROC.BIND_I(TARGET_SCHEMA);
    STPROC.BIND_O(STATUS);
    STPROC.BIND_O(INDUSTRY);
    STPROC.BIND_O(ORACLE_SCHEMA);
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,STATUS);
    STPROC.RETRIEVE(4
                   ,INDUSTRY);
    STPROC.RETRIEVE(5
                   ,ORACLE_SCHEMA);
    STPROC.RETRIEVE(6
                   ,X0);*/
    RETURN X0;
  END GET_APP_INFO_OTHER;

END AR_ARYVTSLD_XMLP_PKG;


/
