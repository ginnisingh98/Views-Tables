--------------------------------------------------------
--  DDL for Package Body CSD_FLOW_STATUSES_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."CSD_FLOW_STATUSES_PKG" as
/* $Header: csdtflsb.pls 120.0 2005/06/14 10:16:01 vkjain noship $ */

procedure INSERT_ROW (
  -- P_ROWID in out nocopy VARCHAR2,
  PX_FLOW_STATUS_ID in out nocopy NUMBER,
  P_FLOW_STATUS_CODE in VARCHAR2,
  P_STATUS_CODE in VARCHAR2,
  P_SEEDED_FLAG in VARCHAR2,
  P_OBJECT_VERSION_NUMBER in NUMBER,
  P_EXTERNAL_DISPLAY_STATUS in VARCHAR2,
  P_ATTRIBUTE_CATEGORY in VARCHAR2,
  P_ATTRIBUTE1 in VARCHAR2,
  P_ATTRIBUTE2 in VARCHAR2,
  P_ATTRIBUTE3 in VARCHAR2,
  P_ATTRIBUTE4 in VARCHAR2,
  P_ATTRIBUTE5 in VARCHAR2,
  P_ATTRIBUTE6 in VARCHAR2,
  P_ATTRIBUTE7 in VARCHAR2,
  P_ATTRIBUTE8 in VARCHAR2,
  P_ATTRIBUTE9 in VARCHAR2,
  P_ATTRIBUTE10 in VARCHAR2,
  P_ATTRIBUTE11 in VARCHAR2,
  P_ATTRIBUTE12 in VARCHAR2,
  P_ATTRIBUTE13 in VARCHAR2,
  P_ATTRIBUTE14 in VARCHAR2,
  P_ATTRIBUTE15 in VARCHAR2,
  P_CREATION_DATE in DATE,
  P_CREATED_BY in NUMBER,
  P_LAST_UPDATE_DATE in DATE,
  P_LAST_UPDATED_BY in NUMBER,
  P_LAST_UPDATE_LOGIN in NUMBER
) is

  cursor C is
    select ROWID
    from   CSD_FLOW_STATUSES_B
    where  FLOW_STATUS_ID = PX_FLOW_STATUS_ID;

  P_ROWID ROWID;

begin

  select CSD_FLOW_STATUSES_S1.nextval
  into PX_FLOW_STATUS_ID
  from dual;

  insert into CSD_FLOW_STATUSES_B (
    ATTRIBUTE10,
    ATTRIBUTE11,
    ATTRIBUTE12,
    ATTRIBUTE13,
    ATTRIBUTE14,
    ATTRIBUTE15,
    FLOW_STATUS_ID,
    FLOW_STATUS_CODE,
    STATUS_CODE,
    SEEDED_FLAG,
    ATTRIBUTE8,
    ATTRIBUTE9,
    ATTRIBUTE7,
    ATTRIBUTE_CATEGORY,
    ATTRIBUTE1,
    ATTRIBUTE2,
    ATTRIBUTE3,
    ATTRIBUTE4,
    ATTRIBUTE5,
    ATTRIBUTE6,
    OBJECT_VERSION_NUMBER,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN
  ) values (
    P_ATTRIBUTE10,
    P_ATTRIBUTE11,
    P_ATTRIBUTE12,
    P_ATTRIBUTE13,
    P_ATTRIBUTE14,
    P_ATTRIBUTE15,
    PX_FLOW_STATUS_ID,
    P_FLOW_STATUS_CODE,
    P_STATUS_CODE,
    P_SEEDED_FLAG,
    P_ATTRIBUTE8,
    P_ATTRIBUTE9,
    P_ATTRIBUTE7,
    P_ATTRIBUTE_CATEGORY,
    P_ATTRIBUTE1,
    P_ATTRIBUTE2,
    P_ATTRIBUTE3,
    P_ATTRIBUTE4,
    P_ATTRIBUTE5,
    P_ATTRIBUTE6,
    P_OBJECT_VERSION_NUMBER,
    P_CREATION_DATE,
    P_CREATED_BY,
    P_LAST_UPDATE_DATE,
    P_LAST_UPDATED_BY,
    P_LAST_UPDATE_LOGIN
  );

  insert into CSD_FLOW_STATUSES_TL (
    FLOW_STATUS_ID,
    EXTERNAL_DISPLAY_STATUS,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    LANGUAGE,
    SOURCE_LANG
  ) select
    PX_FLOW_STATUS_ID,
    P_EXTERNAL_DISPLAY_STATUS,
    P_CREATED_BY,
    P_CREATION_DATE,
    P_LAST_UPDATED_BY,
    P_LAST_UPDATE_DATE,
    P_LAST_UPDATE_LOGIN,
    L.LANGUAGE_CODE,
    userenv('LANG')
  from FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and not exists
    (select NULL
    from CSD_FLOW_STATUSES_TL T
    where T.FLOW_STATUS_ID = PX_FLOW_STATUS_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);

  open c;
  fetch c into P_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

end INSERT_ROW;

procedure LOCK_ROW (
  P_FLOW_STATUS_ID in NUMBER,
  P_OBJECT_VERSION_NUMBER in NUMBER

  /*
  P_ATTRIBUTE10 in VARCHAR2,
  P_ATTRIBUTE11 in VARCHAR2,
  P_ATTRIBUTE12 in VARCHAR2,
  P_ATTRIBUTE13 in VARCHAR2,
  P_ATTRIBUTE14 in VARCHAR2,
  P_ATTRIBUTE15 in VARCHAR2,
  P_FLOW_STATUS_CODE in VARCHAR2,
  P_STATUS_CODE in VARCHAR2,
  P_SEEDED_FLAG in VARCHAR2,
  P_ATTRIBUTE8 in VARCHAR2,
  P_ATTRIBUTE9 in VARCHAR2,
  P_ATTRIBUTE7 in VARCHAR2,
  P_ATTRIBUTE_CATEGORY in VARCHAR2,
  P_ATTRIBUTE1 in VARCHAR2,
  P_ATTRIBUTE2 in VARCHAR2,
  P_ATTRIBUTE3 in VARCHAR2,
  P_ATTRIBUTE4 in VARCHAR2,
  P_ATTRIBUTE5 in VARCHAR2,
  P_ATTRIBUTE6 in VARCHAR2,
  P_OBJECT_VERSION_NUMBER in NUMBER,
  P_EXTERNAL_DISPLAY_STATUS in VARCHAR2
  */
) is
  cursor c is select
      OBJECT_VERSION_NUMBER
    from CSD_FLOW_STATUSES_B
    where FLOW_STATUS_ID = P_FLOW_STATUS_ID
    for update of FLOW_STATUS_ID nowait;
  recinfo c%rowtype;

begin

  open c;
  fetch c into recinfo;
  if (c%notfound) then
    close c;
    fnd_message.set_name('FND', 'FORM_RECORD_DELETED');
    app_exception.raise_exception;
  end if;
  close c;

  if(recinfo.OBJECT_VERSION_NUMBER = P_OBJECT_VERSION_NUMBER) then
    null;
  else
    fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
    app_exception.raise_exception;
  end if;

/*
  for tlinfo in c1 loop
    if (tlinfo.BASELANG = 'Y') then
      if (    ((tlinfo.EXTERNAL_DISPLAY_STATUS = P_EXTERNAL_DISPLAY_STATUS)
               OR ((tlinfo.EXTERNAL_DISPLAY_STATUS is null) AND (P_EXTERNAL_DISPLAY_STATUS is null)))
      ) then
        null;
      else
        fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
        app_exception.raise_exception;
      end if;
    end if;
  end loop;
*/

  return;
end LOCK_ROW;

procedure UPDATE_ROW (
  P_FLOW_STATUS_ID in NUMBER,
  P_FLOW_STATUS_CODE in VARCHAR2,
  P_STATUS_CODE in VARCHAR2,
  P_SEEDED_FLAG in VARCHAR2,
  P_OBJECT_VERSION_NUMBER in NUMBER,
  P_EXTERNAL_DISPLAY_STATUS in VARCHAR2,
  P_ATTRIBUTE_CATEGORY in VARCHAR2,
  P_ATTRIBUTE1 in VARCHAR2,
  P_ATTRIBUTE2 in VARCHAR2,
  P_ATTRIBUTE3 in VARCHAR2,
  P_ATTRIBUTE4 in VARCHAR2,
  P_ATTRIBUTE5 in VARCHAR2,
  P_ATTRIBUTE6 in VARCHAR2,
  P_ATTRIBUTE7 in VARCHAR2,
  P_ATTRIBUTE8 in VARCHAR2,
  P_ATTRIBUTE9 in VARCHAR2,
  P_ATTRIBUTE10 in VARCHAR2,
  P_ATTRIBUTE11 in VARCHAR2,
  P_ATTRIBUTE12 in VARCHAR2,
  P_ATTRIBUTE13 in VARCHAR2,
  P_ATTRIBUTE14 in VARCHAR2,
  P_ATTRIBUTE15 in VARCHAR2,
  P_LAST_UPDATE_DATE in DATE,
  P_LAST_UPDATED_BY in NUMBER,
  P_LAST_UPDATE_LOGIN in NUMBER
) is
begin
  update CSD_FLOW_STATUSES_B set
    ATTRIBUTE10 = P_ATTRIBUTE10,
    ATTRIBUTE11 = P_ATTRIBUTE11,
    ATTRIBUTE12 = P_ATTRIBUTE12,
    ATTRIBUTE13 = P_ATTRIBUTE13,
    ATTRIBUTE14 = P_ATTRIBUTE14,
    ATTRIBUTE15 = P_ATTRIBUTE15,
    FLOW_STATUS_CODE = P_FLOW_STATUS_CODE,
    STATUS_CODE = P_STATUS_CODE,
    SEEDED_FLAG = P_SEEDED_FLAG,
    ATTRIBUTE8 = P_ATTRIBUTE8,
    ATTRIBUTE9 = P_ATTRIBUTE9,
    ATTRIBUTE7 = P_ATTRIBUTE7,
    ATTRIBUTE_CATEGORY = P_ATTRIBUTE_CATEGORY,
    ATTRIBUTE1 = P_ATTRIBUTE1,
    ATTRIBUTE2 = P_ATTRIBUTE2,
    ATTRIBUTE3 = P_ATTRIBUTE3,
    ATTRIBUTE4 = P_ATTRIBUTE4,
    ATTRIBUTE5 = P_ATTRIBUTE5,
    ATTRIBUTE6 = P_ATTRIBUTE6,
    OBJECT_VERSION_NUMBER = P_OBJECT_VERSION_NUMBER + 1,
    LAST_UPDATE_DATE = P_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = P_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = P_LAST_UPDATE_LOGIN
  where FLOW_STATUS_ID = P_FLOW_STATUS_ID AND
        OBJECT_VERSION_NUMBER = P_OBJECT_VERSION_NUMBER;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  update CSD_FLOW_STATUSES_TL set
    EXTERNAL_DISPLAY_STATUS = P_EXTERNAL_DISPLAY_STATUS,
    LAST_UPDATE_DATE = P_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = P_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = P_LAST_UPDATE_LOGIN,
    SOURCE_LANG = userenv('LANG')
  where FLOW_STATUS_ID = P_FLOW_STATUS_ID
  and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

  if (sql%notfound) then
    raise no_data_found;
  end if;
end UPDATE_ROW;

procedure DELETE_ROW (
  P_FLOW_STATUS_ID in NUMBER
) is
begin
  delete from CSD_FLOW_STATUSES_TL
  where FLOW_STATUS_ID = P_FLOW_STATUS_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  delete from CSD_FLOW_STATUSES_B
  where FLOW_STATUS_ID = P_FLOW_STATUS_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;
end DELETE_ROW;

procedure ADD_LANGUAGE
is
begin
  delete from CSD_FLOW_STATUSES_TL T
  where not exists
    (select NULL
    from CSD_FLOW_STATUSES_B B
    where B.FLOW_STATUS_ID = T.FLOW_STATUS_ID
    );

  update CSD_FLOW_STATUSES_TL T set (
      EXTERNAL_DISPLAY_STATUS
    ) = (select
      B.EXTERNAL_DISPLAY_STATUS
    from CSD_FLOW_STATUSES_TL B
    where B.FLOW_STATUS_ID = T.FLOW_STATUS_ID
    and B.LANGUAGE = T.SOURCE_LANG)
  where (
      T.FLOW_STATUS_ID,
      T.LANGUAGE
  ) in (select
      SUBT.FLOW_STATUS_ID,
      SUBT.LANGUAGE
    from CSD_FLOW_STATUSES_TL SUBB, CSD_FLOW_STATUSES_TL SUBT
    where SUBB.FLOW_STATUS_ID = SUBT.FLOW_STATUS_ID
    and SUBB.LANGUAGE = SUBT.SOURCE_LANG
    and (SUBB.EXTERNAL_DISPLAY_STATUS <> SUBT.EXTERNAL_DISPLAY_STATUS
      or (SUBB.EXTERNAL_DISPLAY_STATUS is null and SUBT.EXTERNAL_DISPLAY_STATUS is not null)
      or (SUBB.EXTERNAL_DISPLAY_STATUS is not null and SUBT.EXTERNAL_DISPLAY_STATUS is null)
  ));

  insert into CSD_FLOW_STATUSES_TL (
    FLOW_STATUS_ID,
    EXTERNAL_DISPLAY_STATUS,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    LANGUAGE,
    SOURCE_LANG
  ) select /*+ ORDERED */
    B.FLOW_STATUS_ID,
    B.EXTERNAL_DISPLAY_STATUS,
    B.CREATED_BY,
    B.CREATION_DATE,
    B.LAST_UPDATED_BY,
    B.LAST_UPDATE_DATE,
    B.LAST_UPDATE_LOGIN,
    L.LANGUAGE_CODE,
    B.SOURCE_LANG
  from CSD_FLOW_STATUSES_TL B, FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and B.LANGUAGE = userenv('LANG')
  and not exists
    (select NULL
    from CSD_FLOW_STATUSES_TL T
    where T.FLOW_STATUS_ID = B.FLOW_STATUS_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);
end ADD_LANGUAGE;

end CSD_FLOW_STATUSES_PKG;

/
