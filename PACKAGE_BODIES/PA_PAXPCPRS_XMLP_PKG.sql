--------------------------------------------------------
--  DDL for Package Body PA_PAXPCPRS_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PA_PAXPCPRS_XMLP_PKG" AS
/* $Header: PAXPCPRSB.pls 120.0 2008/01/02 11:43:01 krreddy noship $ */
  FUNCTION GET_COVER_PAGE_VALUES RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COVER_PAGE_VALUES;
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      INIT_FAILURE EXCEPTION;
      PROJECT_ORG HR_ORGANIZATION_UNITS.NAME%TYPE;
      PROJ_NUMBER VARCHAR2(40);
      MANAGER_NAME VARCHAR2(240);
      YES_NO_MEANING VARCHAR2(40);
    BEGIN
    ACCRUE_THROUGH_DATE1 := TO_CHAR(ACCRUE_THROUGH_DATE,'DD-MON-YY');
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
      /*SRW.USER_EXIT('FND GETPROFILE
                    NAME="PA_RULE_BASED_OPTIMIZER"
                    FIELD=":p_rule_optimizer"
                    PRINT_ERROR="N"')*/NULL;
      P_DEBUG_MODE := FND_PROFILE.VALUE('PA_DEBUG_MODE');
      IF PROJECT_ORGANIZATION IS NOT NULL THEN
        SELECT
          SUBSTR(NAME
                ,1
                ,60)
        INTO PROJECT_ORG
        FROM
          HR_ORGANIZATION_UNITS
        WHERE ORGANIZATION_ID = PROJECT_ORGANIZATION;
      END IF;
      C_PROJ_ORG := PROJECT_ORG;
      IF PROJ IS NOT NULL THEN
        SELECT
          SEGMENT1
        INTO PROJ_NUMBER
        FROM
          PA_PROJECTS
        WHERE PROJECT_ID = PROJ;
      END IF;
      C_PROJ_NUMBER := PROJ_NUMBER;
      IF PROJECT_MANAGER IS NOT NULL THEN
        SELECT
          FULL_NAME
        INTO MANAGER_NAME
        FROM
          PER_PEOPLE_F
        WHERE PERSON_ID = PROJECT_MANAGER
          AND sysdate between EFFECTIVE_START_DATE
          AND NVL(EFFECTIVE_END_DATE
           ,SYSDATE + 1)
          AND ( CURRENT_NPW_FLAG = 'Y'
        OR CURRENT_EMPLOYEE_FLAG = 'Y' )
          AND DECODE(CURRENT_NPW_FLAG
              ,'Y'
              ,NPW_NUMBER
              ,EMPLOYEE_NUMBER) IS NOT NULL;
      END IF;
      C_PROJ_MANAGER := MANAGER_NAME;
      IF INCLUDE_CLOSED_PROJECTS IS NOT NULL THEN
        SELECT
          SUBSTR(MEANING
                ,1
                ,40)
        INTO YES_NO_MEANING
        FROM
          FND_LOOKUPS
        WHERE LOOKUP_TYPE = 'YES_NO'
          AND LOOKUP_CODE = INCLUDE_CLOSED_PROJECTS;
      END IF;
      C_YES_NO := YES_NO_MEANING;
      IF (GET_COMPANY_NAME <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (NO_DATA_FOUND_FUNC <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END BEFOREREPORT;
  FUNCTION GET_COMPANY_NAME RETURN BOOLEAN IS
    L_NAME GL_SETS_OF_BOOKS.NAME%TYPE;
  BEGIN
    SELECT
      GL.NAME
    INTO L_NAME
    FROM
      GL_SETS_OF_BOOKS GL,
      PA_IMPLEMENTATIONS PI
    WHERE GL.SET_OF_BOOKS_ID = PI.SET_OF_BOOKS_ID;
    C_COMPANY_NAME_HEADER := L_NAME;
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COMPANY_NAME;
  FUNCTION NO_DATA_FOUND_FUNC RETURN BOOLEAN IS
    MESSAGE_NAME VARCHAR2(80);
  BEGIN
    SELECT
      trim(replace(MEANING,'*',''))
    INTO MESSAGE_NAME
    FROM
      PA_LOOKUPS
    WHERE LOOKUP_TYPE = 'MESSAGE'
      AND LOOKUP_CODE = 'NO_DATA_FOUND';
    C_NO_DATA_FOUND := MESSAGE_NAME;
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END NO_DATA_FOUND_FUNC;
  FUNCTION C_DIFFFORMULA(PARTIAL_POTENTIAL_REVENUE IN NUMBER
                        ,PARTIAL_ACCRUED_REVENUE IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (PARTIAL_POTENTIAL_REVENUE - PARTIAL_ACCRUED_REVENUE);
  END C_DIFFFORMULA;
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    END;
    RETURN (TRUE);
  END AFTERREPORT;
  FUNCTION C_DIFF2FORMULA(TOTAL_POTENTIAL_REVENUE IN NUMBER
                         ,TOTAL_ACCRUED_REVENUE IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (TOTAL_POTENTIAL_REVENUE - TOTAL_ACCRUED_REVENUE);
  END C_DIFF2FORMULA;
  FUNCTION C_DISP_ORG_POT_REVFORMULA(C_ORG_POT_REV IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_ORG_POT_REV)*/NULL;
    RETURN (TO_CHAR(C_ORG_POT_REV
                  ,CURRENCY_FMT_MASK(10)));
  END C_DISP_ORG_POT_REVFORMULA;
  FUNCTION C_DISP_ORG_ACC_REVFORMULA(C_ORG_ACC_REV IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_ORG_ACC_REV)*/NULL;
    RETURN (TO_CHAR(C_ORG_ACC_REV
                  ,CURRENCY_FMT_MASK(10)));
  END C_DISP_ORG_ACC_REVFORMULA;
  FUNCTION C_DISP_ORG_DIFF_REVFORMULA(C_ORG_DIFF_REV IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_ORG_DIFF_REV)*/NULL;
    RETURN (TO_CHAR(C_ORG_DIFF_REV
                  ,CURRENCY_FMT_MASK(10)));
  END C_DISP_ORG_DIFF_REVFORMULA;
  FUNCTION C_DISP_ORG_TOT_POTFORMULA(C_ORG_TOT_POT IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_ORG_TOT_POT)*/NULL;
    RETURN (TO_CHAR(C_ORG_TOT_POT
                  ,CURRENCY_FMT_MASK(10)));
  END C_DISP_ORG_TOT_POTFORMULA;
  FUNCTION C_DISP_ORG_TOT_ACCFORMULA(C_ORG_TOT_ACC IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_ORG_TOT_ACC)*/NULL;
    RETURN (TO_CHAR(C_ORG_TOT_ACC
                  ,CURRENCY_FMT_MASK(10)));
  END C_DISP_ORG_TOT_ACCFORMULA;
  FUNCTION C_DISP_ORG_TOT_DIFFFORMULA(C_ORG_TOT_DIFF IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_ORG_TOT_DIFF)*/NULL;
    RETURN (TO_CHAR(C_ORG_TOT_DIFF
                  ,CURRENCY_FMT_MASK(10)));
  END C_DISP_ORG_TOT_DIFFFORMULA;
  FUNCTION C_DISP_MGR_POT_REVFORMULA(C_MGR_POT_REV IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_MGR_POT_REV)*/NULL;
    RETURN (TO_CHAR(C_MGR_POT_REV
                  ,CURRENCY_FMT_MASK(10)));
  END C_DISP_MGR_POT_REVFORMULA;
  FUNCTION C_DISP_MGR_ACC_REVFORMULA(C_MGR_ACC_REV IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_MGR_ACC_REV)*/NULL;
    RETURN (TO_CHAR(C_MGR_ACC_REV
                  ,CURRENCY_FMT_MASK(10)));
  END C_DISP_MGR_ACC_REVFORMULA;
  FUNCTION C_DISP_MGR_DIFF_REVFORMULA(C_MGR_DIFF_REV IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_MGR_DIFF_REV)*/NULL;
    RETURN (TO_CHAR(C_MGR_DIFF_REV
                  ,CURRENCY_FMT_MASK(10)));
  END C_DISP_MGR_DIFF_REVFORMULA;
  FUNCTION C_DISP_MGR_TOT_POTFORMULA(C_MGR_TOT_POT IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_MGR_TOT_POT)*/NULL;
    RETURN (TO_CHAR(C_MGR_TOT_POT
                  ,CURRENCY_FMT_MASK(10)));
  END C_DISP_MGR_TOT_POTFORMULA;
  FUNCTION C_DISP_MGR_TOT_ACCFORMULA(C_MGR_TOT_ACC IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_MGR_TOT_ACC)*/NULL;
    RETURN (TO_CHAR(C_MGR_TOT_ACC
                  ,CURRENCY_FMT_MASK(10)));
  END C_DISP_MGR_TOT_ACCFORMULA;
  FUNCTION C_DISP_MGR_TOT_DIFFFORMULA(C_MGR_TOT_DIFF IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_MGR_TOT_DIFF)*/NULL;
    RETURN (TO_CHAR(C_MGR_TOT_DIFF
                  ,CURRENCY_FMT_MASK(10)));
  END C_DISP_MGR_TOT_DIFFFORMULA;
  FUNCTION C_DISP_TOT_POT_REVFORMULA(TOTAL_POTENTIAL_REVENUE IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(TOTAL_POTENTIAL_REVENUE)*/NULL;
    RETURN (TO_CHAR(TOTAL_POTENTIAL_REVENUE
                  ,CURRENCY_FMT_MASK(10)));
  END C_DISP_TOT_POT_REVFORMULA;
  FUNCTION C_DISP_TOT_ACC_REVFORMULA(TOTAL_ACCRUED_REVENUE IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(TOTAL_ACCRUED_REVENUE)*/NULL;
    RETURN (TO_CHAR(TOTAL_ACCRUED_REVENUE
                  ,CURRENCY_FMT_MASK(10)));
  END C_DISP_TOT_ACC_REVFORMULA;
  FUNCTION C_DISP_DIFFFORMULA(C_DIFF IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_DIFF)*/NULL;
    RETURN (TO_CHAR(C_DIFF
                  ,CURRENCY_FMT_MASK(10)));
  END C_DISP_DIFFFORMULA;
  FUNCTION C_DISP_PAR_POT_REVFORMULA(PARTIAL_POTENTIAL_REVENUE IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(PARTIAL_POTENTIAL_REVENUE)*/NULL;
    RETURN (TO_CHAR(PARTIAL_POTENTIAL_REVENUE
                  ,CURRENCY_FMT_MASK(10)));
  END C_DISP_PAR_POT_REVFORMULA;
  FUNCTION C_DISP_PAR_ACC_REVFORMULA(PARTIAL_ACCRUED_REVENUE IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(PARTIAL_ACCRUED_REVENUE)*/NULL;
    RETURN (TO_CHAR(PARTIAL_ACCRUED_REVENUE
                  ,CURRENCY_FMT_MASK(10)));
  END C_DISP_PAR_ACC_REVFORMULA;
  FUNCTION C_DISP_DIFF2FORMULA(C_DIFF2 IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_DIFF2)*/NULL;
    RETURN (TO_CHAR(C_DIFF2
                  ,CURRENCY_FMT_MASK(10)));
  END C_DISP_DIFF2FORMULA;
  FUNCTION C_DISP_REP_POT_REVFORMULA(C_REP_POT_REV IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_REP_POT_REV)*/NULL;
    RETURN (TO_CHAR(C_REP_POT_REV
                  ,CURRENCY_FMT_MASK(10)));
  END C_DISP_REP_POT_REVFORMULA;
  FUNCTION C_DISP_REP_ACC_REVFORMULA(C_REP_ACC_REV IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_REP_ACC_REV)*/NULL;
    RETURN (TO_CHAR(C_REP_ACC_REV
                  ,CURRENCY_FMT_MASK(10)));
  END C_DISP_REP_ACC_REVFORMULA;
  FUNCTION C_DISP_REP_DIFF_REVFORMULA(C_REP_DIFF_REV IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_REP_DIFF_REV)*/NULL;
    RETURN (TO_CHAR(C_REP_DIFF_REV
                  ,CURRENCY_FMT_MASK(10)));
  END C_DISP_REP_DIFF_REVFORMULA;
  FUNCTION C_DISP_REP_TOT_POTFORMULA(C_REP_TOT_POT IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_REP_TOT_POT)*/NULL;
    RETURN (TO_CHAR(C_REP_TOT_POT
                  ,CURRENCY_FMT_MASK(10)));
  END C_DISP_REP_TOT_POTFORMULA;
  FUNCTION C_DISP_REP_TOT_ACCFORMULA(C_REP_TOT_ACC IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_REP_TOT_ACC)*/NULL;
    RETURN (TO_CHAR(C_REP_TOT_ACC
                  ,CURRENCY_FMT_MASK(10)));
  END C_DISP_REP_TOT_ACCFORMULA;
  FUNCTION C_DISP_REP_TOT_DIFFFORMULA(C_REP_TOT_DIFF IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_REP_TOT_DIFF)*/NULL;
    RETURN (TO_CHAR(C_REP_TOT_DIFF
                  ,CURRENCY_FMT_MASK(10)));
  END C_DISP_REP_TOT_DIFFFORMULA;
  FUNCTION CF_CURRENCY_CODEFORMULA RETURN VARCHAR2 IS
  BEGIN
    RETURN (PA_MULTI_CURRENCY.GET_ACCT_CURRENCY_CODE);
  END CF_CURRENCY_CODEFORMULA;
  FUNCTION C_COMPANY_NAME_HEADER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COMPANY_NAME_HEADER;
  END C_COMPANY_NAME_HEADER_P;
  FUNCTION C_NO_DATA_FOUND_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NO_DATA_FOUND;
  END C_NO_DATA_FOUND_P;
  FUNCTION C_PROJ_ORG_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_PROJ_ORG;
  END C_PROJ_ORG_P;
  FUNCTION C_PROJ_NUMBER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_PROJ_NUMBER;
  END C_PROJ_NUMBER_P;
  FUNCTION C_PROJ_MANAGER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_PROJ_MANAGER;
  END C_PROJ_MANAGER_P;
  FUNCTION C_YES_NO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_YES_NO;
  END C_YES_NO_P;
  FUNCTION GET_CURRENCY_CODE RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
begin
X0 := PA_CURRENCY.GET_CURRENCY_CODE;
end;
--    STPROC.INIT('begin :X0 := PA_CURRENCY.GET_CURRENCY_CODE; end;');
--    STPROC.BIND_O(X0);
--    STPROC.EXECUTE;
--    STPROC.RETRIEVE(1,X0);
    RETURN X0;
  END GET_CURRENCY_CODE;
  FUNCTION ROUND_CURRENCY_AMT(X_AMOUNT IN NUMBER) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
  begin
  X0 := PA_CURRENCY.ROUND_CURRENCY_AMT(X_AMOUNT);
  end;
    /*STPROC.INIT('begin :X0 := PA_CURRENCY.ROUND_CURRENCY_AMT(:X_AMOUNT); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(X_AMOUNT);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    RETURN X0;
  END ROUND_CURRENCY_AMT;
  FUNCTION CURRENCY_FMT_MASK(X_LENGTH IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
  begin
  X0 := PA_CURRENCY.CURRENCY_FMT_MASK(X_LENGTH);
  end;
/*    STPROC.INIT('begin :X0 := PA_CURRENCY.CURRENCY_FMT_MASK(:X_LENGTH); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(X_LENGTH);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    RETURN X0;
  END CURRENCY_FMT_MASK;
  FUNCTION RPT_CURRENCY_FMT_MASK(X_ORG_ID IN NUMBER
                                ,X_LENGTH IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
begin
X0 := PA_CURRENCY.RPT_CURRENCY_FMT_MASK(X_ORG_ID, X_LENGTH);
end;
    /*
    STPROC.INIT('begin :X0 := PA_CURRENCY.RPT_CURRENCY_FMT_MASK(:X_ORG_ID, :X_LENGTH); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(X_ORG_ID);
    STPROC.BIND_I(X_LENGTH);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    RETURN X0;
  END RPT_CURRENCY_FMT_MASK;
END PA_PAXPCPRS_XMLP_PKG;

/
