--------------------------------------------------------
--  DDL for Package Body HR_ITEM_PROPERTIES_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."HR_ITEM_PROPERTIES_PKG" as
/* $Header: hritplct.pkb 120.2.12000000.1 2007/01/21 16:50:00 appldev ship $ */

--
-- Global variables, added for performance improvements bug 2781560
--
g_application_id          fnd_application.application_id%TYPE;
g_application_short_name  fnd_application.application_short_name%type;
g_form_id                 fnd_form.form_id%TYPE;
g_form_name               fnd_form.form_name%type;
g_form_template_id        hr_form_templates_b.form_template_id%type;
g_template_name           hr_form_templates_b.template_name%type;
g_legislation_code        hr_form_templates_b.legislation_code%type;


-- -----------------------------------------------------------------------------
-- |-----------------------------< update_copies >-----------------------------|
-- -----------------------------------------------------------------------------
procedure UPDATE_COPIES (
  X_ITEM_PROPERTY_ID in NUMBER,
  X_FORM_ITEM_ID in NUMBER,
  X_TEMPLATE_ITEM_ID in NUMBER,
  X_TEMPLATE_ITEM_CONTEXT_ID in NUMBER,
  X_ALIGNMENT in NUMBER,
  X_BEVEL in NUMBER,
  X_CASE_RESTRICTION in NUMBER,
  X_ENABLED in NUMBER,
  X_FORMAT_MASK in VARCHAR2,
  X_HEIGHT in NUMBER,
  X_INFORMATION_FORMULA_ID in NUMBER,
  X_INFORMATION_PARAM_ITEM_ID1 in NUMBER,
  X_INFORMATION_PARAM_ITEM_ID2 in NUMBER,
  X_INFORMATION_PARAM_ITEM_ID3 in NUMBER,
  X_INFORMATION_PARAM_ITEM_ID4 in NUMBER,
  X_INFORMATION_PARAM_ITEM_ID5 in NUMBER,
  X_INSERT_ALLOWED in NUMBER,
  X_NEXT_NAVIGATION_ITEM_ID in NUMBER,
  X_PREVIOUS_NAVIGATION_ITEM_ID in NUMBER,
  X_PROMPT_ALIGNMENT_OFFSET in NUMBER,
  X_PROMPT_DISPLAY_STYLE in NUMBER,
  X_PROMPT_EDGE in NUMBER,
  X_PROMPT_EDGE_OFFSET in NUMBER,
  X_PROMPT_EDGE_ALIGNMENT in NUMBER,
  X_PROMPT_TEXT_ALIGNMENT in NUMBER,
  X_QUERY_ALLOWED in NUMBER,
  X_REQUIRED in NUMBER,
  X_UPDATE_ALLOWED in NUMBER,
  X_VALIDATION_FORMULA_ID in NUMBER,
  X_VALIDATION_PARAM_ITEM_ID1 in NUMBER,
  X_VALIDATION_PARAM_ITEM_ID2 in NUMBER,
  X_VALIDATION_PARAM_ITEM_ID3 in NUMBER,
  X_VALIDATION_PARAM_ITEM_ID4 in NUMBER,
  X_VALIDATION_PARAM_ITEM_ID5 in NUMBER,
  X_VISIBLE in NUMBER,
  X_WIDTH in NUMBER,
  X_X_POSITION in NUMBER,
  X_Y_POSITION in NUMBER,
  X_DEFAULT_VALUE in VARCHAR2,
  X_INFORMATION_PROMPT in VARCHAR2,
  X_LABEL in VARCHAR2,
  X_PROMPT_TEXT in VARCHAR2,
  X_TOOLTIP_TEXT in VARCHAR2,
  X_INFORMATION_CATEGORY in VARCHAR2,
  X_INFORMATION1 in VARCHAR2,
  X_INFORMATION2 in VARCHAR2,
  X_INFORMATION3 in VARCHAR2,
  X_INFORMATION4 in VARCHAR2,
  X_INFORMATION5 in VARCHAR2,
  X_INFORMATION6 in VARCHAR2,
  X_INFORMATION7 in VARCHAR2,
  X_INFORMATION8 in VARCHAR2,
  X_INFORMATION9 in VARCHAR2,
  X_INFORMATION10 in VARCHAR2,
  X_INFORMATION11 in VARCHAR2,
  X_INFORMATION12 in VARCHAR2,
  X_INFORMATION13 in VARCHAR2,
  X_INFORMATION14 in VARCHAR2,
  X_INFORMATION15 in VARCHAR2,
  X_INFORMATION16 in VARCHAR2,
  X_INFORMATION17 in VARCHAR2,
  X_INFORMATION18 in VARCHAR2,
  X_INFORMATION19 in VARCHAR2,
  X_INFORMATION20 in VARCHAR2,
  X_INFORMATION21 in VARCHAR2,
  X_INFORMATION22 in VARCHAR2,
  X_INFORMATION23 in VARCHAR2,
  X_INFORMATION24 in VARCHAR2,
  X_INFORMATION25 in VARCHAR2,
  X_INFORMATION26 in VARCHAR2,
  X_INFORMATION27 in VARCHAR2,
  X_INFORMATION28 in VARCHAR2,
  X_INFORMATION29 in VARCHAR2,
  X_INFORMATION30 in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
  cursor csr_original is
    select *
      from HR_ITEM_PROPERTIES_VL
     where ITEM_PROPERTY_ID = X_ITEM_PROPERTY_ID;
  l_original csr_original%rowtype;
  cursor csr_copies is
    select itp.item_property_id
      from HR_ITEM_PROPERTIES_B itp
          ,HR_TEMPLATE_ITEMS_B tim
          ,HR_TEMPLATE_ITEMS_B tio
     where itp.TEMPLATE_ITEM_ID = tim.TEMPLATE_ITEM_ID
       and tim.FORM_TEMPLATE_ID in (select sft.FORM_TEMPLATE_ID_TO
                                      from HR_SOURCE_FORM_TEMPLATES sft
                                start with sft.FORM_TEMPLATE_ID_FROM = tio.FORM_TEMPLATE_ID
                                connect by sft.FORM_TEMPLATE_ID_FROM = prior sft.FORM_TEMPLATE_ID_TO)
       and tim.FORM_ITEM_ID = tio.FORM_ITEM_ID
       and tio.TEMPLATE_ITEM_ID = X_TEMPLATE_ITEM_ID;
begin
  if (X_TEMPLATE_ITEM_ID is not null) then
    open csr_original;
    fetch csr_original into l_original;
    if csr_original%found then
      close csr_original;
      for l_copy in csr_copies loop
        update HR_ITEM_PROPERTIES_B set
          ALIGNMENT = decode(nvl(ALIGNMENT,hr_api.g_number),nvl(l_original.ALIGNMENT,hr_api.g_number),X_ALIGNMENT,ALIGNMENT),
          BEVEL = decode(nvl(BEVEL,hr_api.g_number),nvl(l_original.BEVEL,hr_api.g_number),X_BEVEL,BEVEL),
          CASE_RESTRICTION = decode(nvl(CASE_RESTRICTION,hr_api.g_number),nvl(l_original.CASE_RESTRICTION,hr_api.g_number),X_CASE_RESTRICTION,CASE_RESTRICTION),
          ENABLED = decode(nvl(ENABLED,hr_api.g_number),nvl(l_original.ENABLED,hr_api.g_number),X_ENABLED,ENABLED),
          FORMAT_MASK = decode(nvl(FORMAT_MASK,hr_api.g_varchar2),nvl(l_original.FORMAT_MASK,hr_api.g_varchar2),X_FORMAT_MASK,FORMAT_MASK),
          HEIGHT = decode(nvl(HEIGHT,hr_api.g_number),nvl(l_original.HEIGHT,hr_api.g_number),X_HEIGHT,HEIGHT),
          INFORMATION_FORMULA_ID = decode(nvl(INFORMATION_FORMULA_ID,hr_api.g_number),nvl(l_original.INFORMATION_FORMULA_ID,hr_api.g_number),X_INFORMATION_FORMULA_ID,INFORMATION_FORMULA_ID),
          INFORMATION_PARAMETER_ITEM_ID1 = decode(nvl(INFORMATION_PARAMETER_ITEM_ID1,hr_api.g_number),nvl(l_original.INFORMATION_PARAMETER_ITEM_ID1,hr_api.g_number),X_INFORMATION_PARAM_ITEM_ID1,INFORMATION_PARAMETER_ITEM_ID1),
          INFORMATION_PARAMETER_ITEM_ID2 = decode(nvl(INFORMATION_PARAMETER_ITEM_ID2,hr_api.g_number),nvl(l_original.INFORMATION_PARAMETER_ITEM_ID2,hr_api.g_number),X_INFORMATION_PARAM_ITEM_ID2,INFORMATION_PARAMETER_ITEM_ID2),
          INFORMATION_PARAMETER_ITEM_ID3 = decode(nvl(INFORMATION_PARAMETER_ITEM_ID3,hr_api.g_number),nvl(l_original.INFORMATION_PARAMETER_ITEM_ID3,hr_api.g_number),X_INFORMATION_PARAM_ITEM_ID3,INFORMATION_PARAMETER_ITEM_ID3),
          INFORMATION_PARAMETER_ITEM_ID4 = decode(nvl(INFORMATION_PARAMETER_ITEM_ID4,hr_api.g_number),nvl(l_original.INFORMATION_PARAMETER_ITEM_ID4,hr_api.g_number),X_INFORMATION_PARAM_ITEM_ID4,INFORMATION_PARAMETER_ITEM_ID4),
          INFORMATION_PARAMETER_ITEM_ID5 = decode(nvl(INFORMATION_PARAMETER_ITEM_ID5,hr_api.g_number),nvl(l_original.INFORMATION_PARAMETER_ITEM_ID5,hr_api.g_number),X_INFORMATION_PARAM_ITEM_ID5,INFORMATION_PARAMETER_ITEM_ID5),
          INSERT_ALLOWED = decode(nvl(INSERT_ALLOWED,hr_api.g_number),nvl(l_original.INSERT_ALLOWED,hr_api.g_number),X_INSERT_ALLOWED,INSERT_ALLOWED),
          NEXT_NAVIGATION_ITEM_ID = decode(nvl(NEXT_NAVIGATION_ITEM_ID,hr_api.g_number),nvl(l_original.NEXT_NAVIGATION_ITEM_ID,hr_api.g_number),X_NEXT_NAVIGATION_ITEM_ID,NEXT_NAVIGATION_ITEM_ID),
          PREVIOUS_NAVIGATION_ITEM_ID = decode(nvl(PREVIOUS_NAVIGATION_ITEM_ID,hr_api.g_number),nvl(l_original.PREVIOUS_NAVIGATION_ITEM_ID,hr_api.g_number),X_PREVIOUS_NAVIGATION_ITEM_ID,PREVIOUS_NAVIGATION_ITEM_ID),
          PROMPT_ALIGNMENT_OFFSET = decode(nvl(PROMPT_ALIGNMENT_OFFSET,hr_api.g_number),nvl(l_original.PROMPT_ALIGNMENT_OFFSET,hr_api.g_number),X_PROMPT_ALIGNMENT_OFFSET,PROMPT_ALIGNMENT_OFFSET),
          PROMPT_DISPLAY_STYLE = decode(nvl(PROMPT_DISPLAY_STYLE,hr_api.g_number),nvl(l_original.PROMPT_DISPLAY_STYLE,hr_api.g_number),X_PROMPT_DISPLAY_STYLE,PROMPT_DISPLAY_STYLE),
          PROMPT_EDGE = decode(nvl(PROMPT_EDGE,hr_api.g_number),nvl(l_original.PROMPT_EDGE,hr_api.g_number),X_PROMPT_EDGE,PROMPT_EDGE),
          PROMPT_EDGE_OFFSET = decode(nvl(PROMPT_EDGE_OFFSET,hr_api.g_number),nvl(l_original.PROMPT_EDGE_OFFSET,hr_api.g_number),X_PROMPT_EDGE_OFFSET,PROMPT_EDGE_OFFSET),
          PROMPT_EDGE_ALIGNMENT = decode(nvl(PROMPT_EDGE_ALIGNMENT,hr_api.g_number),nvl(l_original.PROMPT_EDGE_ALIGNMENT,hr_api.g_number),X_PROMPT_EDGE_ALIGNMENT,PROMPT_EDGE_ALIGNMENT),
          PROMPT_TEXT_ALIGNMENT = decode(nvl(PROMPT_TEXT_ALIGNMENT,hr_api.g_number),nvl(l_original.PROMPT_TEXT_ALIGNMENT,hr_api.g_number),X_PROMPT_TEXT_ALIGNMENT,PROMPT_TEXT_ALIGNMENT),
          QUERY_ALLOWED = decode(nvl(QUERY_ALLOWED,hr_api.g_number),nvl(l_original.QUERY_ALLOWED,hr_api.g_number),X_QUERY_ALLOWED,QUERY_ALLOWED),
          REQUIRED = decode(nvl(REQUIRED,hr_api.g_number),nvl(l_original.REQUIRED,hr_api.g_number),X_REQUIRED,REQUIRED),
          UPDATE_ALLOWED = decode(nvl(UPDATE_ALLOWED,hr_api.g_number),nvl(l_original.UPDATE_ALLOWED,hr_api.g_number),X_UPDATE_ALLOWED,UPDATE_ALLOWED),
          VALIDATION_FORMULA_ID = decode(nvl(VALIDATION_FORMULA_ID,hr_api.g_number),nvl(l_original.VALIDATION_FORMULA_ID,hr_api.g_number),X_VALIDATION_FORMULA_ID,VALIDATION_FORMULA_ID),
          VALIDATION_PARAMETER_ITEM_ID1 = decode(nvl(VALIDATION_PARAMETER_ITEM_ID1,hr_api.g_number),nvl(l_original.VALIDATION_PARAMETER_ITEM_ID1,hr_api.g_number),X_VALIDATION_PARAM_ITEM_ID1,VALIDATION_PARAMETER_ITEM_ID1),
          VALIDATION_PARAMETER_ITEM_ID2 = decode(nvl(VALIDATION_PARAMETER_ITEM_ID2,hr_api.g_number),nvl(l_original.VALIDATION_PARAMETER_ITEM_ID2,hr_api.g_number),X_VALIDATION_PARAM_ITEM_ID2,VALIDATION_PARAMETER_ITEM_ID2),
          VALIDATION_PARAMETER_ITEM_ID3 = decode(nvl(VALIDATION_PARAMETER_ITEM_ID3,hr_api.g_number),nvl(l_original.VALIDATION_PARAMETER_ITEM_ID3,hr_api.g_number),X_VALIDATION_PARAM_ITEM_ID3,VALIDATION_PARAMETER_ITEM_ID3),
          VALIDATION_PARAMETER_ITEM_ID4 = decode(nvl(VALIDATION_PARAMETER_ITEM_ID4,hr_api.g_number),nvl(l_original.VALIDATION_PARAMETER_ITEM_ID4,hr_api.g_number),X_VALIDATION_PARAM_ITEM_ID4,VALIDATION_PARAMETER_ITEM_ID4),
          VALIDATION_PARAMETER_ITEM_ID5 = decode(nvl(VALIDATION_PARAMETER_ITEM_ID5,hr_api.g_number),nvl(l_original.VALIDATION_PARAMETER_ITEM_ID5,hr_api.g_number),X_VALIDATION_PARAM_ITEM_ID5,VALIDATION_PARAMETER_ITEM_ID5),
          VISIBLE = decode(nvl(VISIBLE,hr_api.g_number),nvl(l_original.VISIBLE,hr_api.g_number),X_VISIBLE,VISIBLE),
          WIDTH = decode(nvl(WIDTH,hr_api.g_number),nvl(l_original.WIDTH,hr_api.g_number),X_WIDTH,WIDTH),
          X_POSITION = decode(nvl(X_POSITION,hr_api.g_number),nvl(l_original.X_POSITION,hr_api.g_number),X_X_POSITION,X_POSITION),
          Y_POSITION = decode(nvl(Y_POSITION,hr_api.g_number),nvl(l_original.Y_POSITION,hr_api.g_number),X_Y_POSITION,Y_POSITION),
          INFORMATION_CATEGORY = decode(nvl(INFORMATION_CATEGORY,hr_api.g_varchar2),nvl(l_original.INFORMATION_CATEGORY,hr_api.g_varchar2),X_INFORMATION_CATEGORY,INFORMATION_CATEGORY),
          INFORMATION1  = decode(nvl(INFORMATION1 ,hr_api.g_varchar2),nvl(l_original.INFORMATION1 ,hr_api.g_varchar2),X_INFORMATION1 ,INFORMATION1 ),
          INFORMATION2  = decode(nvl(INFORMATION2 ,hr_api.g_varchar2),nvl(l_original.INFORMATION2 ,hr_api.g_varchar2),X_INFORMATION2 ,INFORMATION2 ),
          INFORMATION3  = decode(nvl(INFORMATION3 ,hr_api.g_varchar2),nvl(l_original.INFORMATION3 ,hr_api.g_varchar2),X_INFORMATION3 ,INFORMATION3 ),
          INFORMATION4  = decode(nvl(INFORMATION4 ,hr_api.g_varchar2),nvl(l_original.INFORMATION4 ,hr_api.g_varchar2),X_INFORMATION4 ,INFORMATION4 ),
          INFORMATION5  = decode(nvl(INFORMATION5 ,hr_api.g_varchar2),nvl(l_original.INFORMATION5 ,hr_api.g_varchar2),X_INFORMATION5 ,INFORMATION5 ),
          INFORMATION6  = decode(nvl(INFORMATION6 ,hr_api.g_varchar2),nvl(l_original.INFORMATION6 ,hr_api.g_varchar2),X_INFORMATION6 ,INFORMATION6 ),
          INFORMATION7  = decode(nvl(INFORMATION7 ,hr_api.g_varchar2),nvl(l_original.INFORMATION7 ,hr_api.g_varchar2),X_INFORMATION7 ,INFORMATION7 ),
          INFORMATION8  = decode(nvl(INFORMATION8 ,hr_api.g_varchar2),nvl(l_original.INFORMATION8 ,hr_api.g_varchar2),X_INFORMATION8 ,INFORMATION8 ),
          INFORMATION9  = decode(nvl(INFORMATION9 ,hr_api.g_varchar2),nvl(l_original.INFORMATION9 ,hr_api.g_varchar2),X_INFORMATION9 ,INFORMATION9 ),
          INFORMATION10 = decode(nvl(INFORMATION10,hr_api.g_varchar2),nvl(l_original.INFORMATION10,hr_api.g_varchar2),X_INFORMATION10,INFORMATION10),
          INFORMATION11 = decode(nvl(INFORMATION11,hr_api.g_varchar2),nvl(l_original.INFORMATION11,hr_api.g_varchar2),X_INFORMATION11,INFORMATION11),
          INFORMATION12 = decode(nvl(INFORMATION12,hr_api.g_varchar2),nvl(l_original.INFORMATION12,hr_api.g_varchar2),X_INFORMATION12,INFORMATION12),
          INFORMATION13 = decode(nvl(INFORMATION13,hr_api.g_varchar2),nvl(l_original.INFORMATION13,hr_api.g_varchar2),X_INFORMATION13,INFORMATION13),
          INFORMATION14 = decode(nvl(INFORMATION14,hr_api.g_varchar2),nvl(l_original.INFORMATION14,hr_api.g_varchar2),X_INFORMATION14,INFORMATION14),
          INFORMATION15 = decode(nvl(INFORMATION15,hr_api.g_varchar2),nvl(l_original.INFORMATION15,hr_api.g_varchar2),X_INFORMATION15,INFORMATION15),
          INFORMATION16 = decode(nvl(INFORMATION16,hr_api.g_varchar2),nvl(l_original.INFORMATION16,hr_api.g_varchar2),X_INFORMATION16,INFORMATION16),
          INFORMATION17 = decode(nvl(INFORMATION17,hr_api.g_varchar2),nvl(l_original.INFORMATION17,hr_api.g_varchar2),X_INFORMATION17,INFORMATION17),
          INFORMATION18 = decode(nvl(INFORMATION18,hr_api.g_varchar2),nvl(l_original.INFORMATION18,hr_api.g_varchar2),X_INFORMATION18,INFORMATION18),
          INFORMATION19 = decode(nvl(INFORMATION19,hr_api.g_varchar2),nvl(l_original.INFORMATION19,hr_api.g_varchar2),X_INFORMATION19,INFORMATION19),
          INFORMATION20 = decode(nvl(INFORMATION20,hr_api.g_varchar2),nvl(l_original.INFORMATION20,hr_api.g_varchar2),X_INFORMATION20,INFORMATION20),
          INFORMATION21 = decode(nvl(INFORMATION21,hr_api.g_varchar2),nvl(l_original.INFORMATION21,hr_api.g_varchar2),X_INFORMATION21,INFORMATION21),
          INFORMATION22 = decode(nvl(INFORMATION22,hr_api.g_varchar2),nvl(l_original.INFORMATION22,hr_api.g_varchar2),X_INFORMATION22,INFORMATION22),
          INFORMATION23 = decode(nvl(INFORMATION23,hr_api.g_varchar2),nvl(l_original.INFORMATION23,hr_api.g_varchar2),X_INFORMATION23,INFORMATION23),
          INFORMATION24 = decode(nvl(INFORMATION24,hr_api.g_varchar2),nvl(l_original.INFORMATION24,hr_api.g_varchar2),X_INFORMATION24,INFORMATION24),
          INFORMATION25 = decode(nvl(INFORMATION25,hr_api.g_varchar2),nvl(l_original.INFORMATION25,hr_api.g_varchar2),X_INFORMATION25,INFORMATION25),
          INFORMATION26 = decode(nvl(INFORMATION26,hr_api.g_varchar2),nvl(l_original.INFORMATION26,hr_api.g_varchar2),X_INFORMATION26,INFORMATION26),
          INFORMATION27 = decode(nvl(INFORMATION27,hr_api.g_varchar2),nvl(l_original.INFORMATION27,hr_api.g_varchar2),X_INFORMATION27,INFORMATION27),
          INFORMATION28 = decode(nvl(INFORMATION28,hr_api.g_varchar2),nvl(l_original.INFORMATION28,hr_api.g_varchar2),X_INFORMATION28,INFORMATION28),
          INFORMATION29 = decode(nvl(INFORMATION29,hr_api.g_varchar2),nvl(l_original.INFORMATION29,hr_api.g_varchar2),X_INFORMATION29,INFORMATION29),
          INFORMATION30 = decode(nvl(INFORMATION30,hr_api.g_varchar2),nvl(l_original.INFORMATION30,hr_api.g_varchar2),X_INFORMATION30,INFORMATION30),
          LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
          LAST_UPDATED_BY = X_LAST_UPDATED_BY,
          LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN
        where ITEM_PROPERTY_ID = l_copy.ITEM_PROPERTY_ID;
        if (sql%notfound) then
          raise no_data_found;
        end if;
        update HR_ITEM_PROPERTIES_TL set
          DEFAULT_VALUE = decode(nvl(DEFAULT_VALUE,hr_api.g_varchar2),nvl(l_original.DEFAULT_VALUE,hr_api.g_varchar2),X_DEFAULT_VALUE,DEFAULT_VALUE),
          INFORMATION_PROMPT = decode(nvl(INFORMATION_PROMPT,hr_api.g_varchar2),nvl(l_original.INFORMATION_PROMPT,hr_api.g_varchar2),X_INFORMATION_PROMPT,INFORMATION_PROMPT),
          LABEL = decode(nvl(LABEL,hr_api.g_varchar2),nvl(l_original.LABEL,hr_api.g_varchar2),X_LABEL,LABEL),
          PROMPT_TEXT = decode(nvl(PROMPT_TEXT,hr_api.g_varchar2),nvl(l_original.PROMPT_TEXT,hr_api.g_varchar2),X_PROMPT_TEXT,PROMPT_TEXT),
          TOOLTIP_TEXT = decode(nvl(TOOLTIP_TEXT,hr_api.g_varchar2),nvl(l_original.TOOLTIP_TEXT,hr_api.g_varchar2),X_TOOLTIP_TEXT,TOOLTIP_TEXT),
          LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
          LAST_UPDATED_BY = X_LAST_UPDATED_BY,
          LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
          SOURCE_LANG = userenv('LANG')
        where ITEM_PROPERTY_ID = l_copy.ITEM_PROPERTY_ID
          and userenv('LANG') in (LANGUAGE, SOURCE_LANG);
        if (sql%notfound) then
          raise no_data_found;
        end if;
      end loop;
    else
      close csr_original;
    end if;
  end if;
end UPDATE_COPIES;
--


procedure OWNER_TO_WHO (
  X_OWNER in VARCHAR2,
  X_CREATION_DATE out nocopy DATE,
  X_CREATED_BY out nocopy NUMBER,
  X_LAST_UPDATE_DATE out nocopy DATE,
  X_LAST_UPDATED_BY out nocopy NUMBER,
  X_LAST_UPDATE_LOGIN out nocopy NUMBER
) is
begin
  if X_OWNER = 'SEED' then
    X_CREATED_BY := 1;
    X_LAST_UPDATED_BY := 1;
  else
    X_CREATED_BY := 0;
    X_LAST_UPDATED_BY := 0;
  end if;
  X_CREATION_DATE := sysdate;
  X_LAST_UPDATE_DATE := sysdate;
  X_LAST_UPDATE_LOGIN := 0;
end OWNER_TO_WHO;
procedure INSERT_ROW (
  X_ROWID in out nocopy VARCHAR2,
  X_ITEM_PROPERTY_ID in NUMBER,
  X_UPDATE_ALLOWED in NUMBER,
  X_INFORMATION20 in VARCHAR2,
  X_INFORMATION21 in VARCHAR2,
  X_INFORMATION22 in VARCHAR2,
  X_INFORMATION23 in VARCHAR2,
  X_INFORMATION24 in VARCHAR2,
  X_INFORMATION25 in VARCHAR2,
  X_INFORMATION26 in VARCHAR2,
  X_INFORMATION27 in VARCHAR2,
  X_INFORMATION28 in VARCHAR2,
  X_INFORMATION29 in VARCHAR2,
  X_INFORMATION30 in VARCHAR2,
  X_NEXT_NAVIGATION_ITEM_ID in NUMBER,
  X_PREVIOUS_NAVIGATION_ITEM_ID in NUMBER,
  X_PROMPT_TEXT_ALIGNMENT in NUMBER,
  X_QUERY_ALLOWED in NUMBER,
  X_REQUIRED in NUMBER,
  X_WIDTH in NUMBER,
  X_X_POSITION in NUMBER,
  X_Y_POSITION in NUMBER,
  X_VALIDATION_PARAM_ITEM_ID3 in NUMBER,
  X_VALIDATION_PARAM_ITEM_ID4 in NUMBER,
  X_VALIDATION_PARAM_ITEM_ID1 in NUMBER,
  X_PROMPT_EDGE_OFFSET in NUMBER,
  X_INFORMATION_CATEGORY in VARCHAR2,
  X_INFORMATION1 in VARCHAR2,
  X_INFORMATION2 in VARCHAR2,
  X_INFORMATION3 in VARCHAR2,
  X_INFORMATION4 in VARCHAR2,
  X_INFORMATION5 in VARCHAR2,
  X_INFORMATION6 in VARCHAR2,
  X_INFORMATION7 in VARCHAR2,
  X_INFORMATION8 in VARCHAR2,
  X_INFORMATION9 in VARCHAR2,
  X_INFORMATION10 in VARCHAR2,
  X_INFORMATION11 in VARCHAR2,
  X_INFORMATION12 in VARCHAR2,
  X_INFORMATION13 in VARCHAR2,
  X_INFORMATION14 in VARCHAR2,
  X_INFORMATION15 in VARCHAR2,
  X_FORM_ITEM_ID in NUMBER,
  X_TEMPLATE_ITEM_ID in NUMBER,
  X_TEMPLATE_ITEM_CONTEXT_ID in NUMBER,
  X_ALIGNMENT in NUMBER,
  X_BEVEL in NUMBER,
  X_CASE_RESTRICTION in NUMBER,
  X_DEFAULT_VALUE in VARCHAR2,
  X_ENABLED in NUMBER,
  X_FORMAT_MASK in VARCHAR2,
  X_HEIGHT in NUMBER,
  X_INFORMATION_FORMULA_ID in NUMBER,
  X_INFORMATION_PARAM_ITEM_ID1 in NUMBER,
  X_INFORMATION_PARAM_ITEM_ID2 in NUMBER,
  X_PROMPT_EDGE_ALIGNMENT in NUMBER,
  X_VALIDATION_PARAM_ITEM_ID5 in NUMBER,
  X_VALIDATION_FORMULA_ID in NUMBER,
  X_INFORMATION16 in VARCHAR2,
  X_INFORMATION17 in VARCHAR2,
  X_INFORMATION18 in VARCHAR2,
  X_INFORMATION19 in VARCHAR2,
  X_VALIDATION_PARAM_ITEM_ID2 in NUMBER,
  X_VISIBLE in NUMBER,
  X_INFORMATION_PARAM_ITEM_ID3 in NUMBER,
  X_INFORMATION_PARAM_ITEM_ID4 in NUMBER,
  X_INFORMATION_PARAM_ITEM_ID5 in NUMBER,
  X_INSERT_ALLOWED in NUMBER,
  X_PROMPT_ALIGNMENT_OFFSET in NUMBER,
  X_PROMPT_DISPLAY_STYLE in NUMBER,
  X_PROMPT_EDGE in NUMBER,
  X_INFORMATION_PROMPT in VARCHAR2,
  X_LABEL in VARCHAR2,
  X_PROMPT_TEXT in VARCHAR2,
  X_TOOLTIP_TEXT in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
  cursor C is select ROWID from HR_ITEM_PROPERTIES_B
    where ITEM_PROPERTY_ID = X_ITEM_PROPERTY_ID
    ;
begin
  insert into HR_ITEM_PROPERTIES_B (
    UPDATE_ALLOWED,
    INFORMATION20,
    INFORMATION21,
    INFORMATION22,
    INFORMATION23,
    INFORMATION24,
    INFORMATION25,
    INFORMATION26,
    INFORMATION27,
    INFORMATION28,
    INFORMATION29,
    INFORMATION30,
    NEXT_NAVIGATION_ITEM_ID,
    PREVIOUS_NAVIGATION_ITEM_ID,
    PROMPT_TEXT_ALIGNMENT,
    QUERY_ALLOWED,
    REQUIRED,
    WIDTH,
    X_POSITION,
    Y_POSITION,
    VALIDATION_PARAMETER_ITEM_ID3,
    VALIDATION_PARAMETER_ITEM_ID4,
    VALIDATION_PARAMETER_ITEM_ID1,
    PROMPT_EDGE_OFFSET,
    INFORMATION_CATEGORY,
    INFORMATION1,
    INFORMATION2,
    INFORMATION3,
    INFORMATION4,
    INFORMATION5,
    INFORMATION6,
    INFORMATION7,
    INFORMATION8,
    INFORMATION9,
    INFORMATION10,
    INFORMATION11,
    INFORMATION12,
    INFORMATION13,
    INFORMATION14,
    INFORMATION15,
    ITEM_PROPERTY_ID,
    FORM_ITEM_ID,
    TEMPLATE_ITEM_ID,
    TEMPLATE_ITEM_CONTEXT_ID,
    ALIGNMENT,
    BEVEL,
    CASE_RESTRICTION,
    ENABLED,
    FORMAT_MASK,
    HEIGHT,
    INFORMATION_FORMULA_ID,
    INFORMATION_PARAMETER_ITEM_ID1,
    INFORMATION_PARAMETER_ITEM_ID2,
    PROMPT_EDGE_ALIGNMENT,
    VALIDATION_PARAMETER_ITEM_ID5,
    VALIDATION_FORMULA_ID,
    INFORMATION16,
    INFORMATION17,
    INFORMATION18,
    INFORMATION19,
    VALIDATION_PARAMETER_ITEM_ID2,
    VISIBLE,
    INFORMATION_PARAMETER_ITEM_ID3,
    INFORMATION_PARAMETER_ITEM_ID4,
    INFORMATION_PARAMETER_ITEM_ID5,
    INSERT_ALLOWED,
    PROMPT_ALIGNMENT_OFFSET,
    PROMPT_DISPLAY_STYLE,
    PROMPT_EDGE,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN
  ) values (
    X_UPDATE_ALLOWED,
    X_INFORMATION20,
    X_INFORMATION21,
    X_INFORMATION22,
    X_INFORMATION23,
    X_INFORMATION24,
    X_INFORMATION25,
    X_INFORMATION26,
    X_INFORMATION27,
    X_INFORMATION28,
    X_INFORMATION29,
    X_INFORMATION30,
    X_NEXT_NAVIGATION_ITEM_ID,
    X_PREVIOUS_NAVIGATION_ITEM_ID,
    X_PROMPT_TEXT_ALIGNMENT,
    X_QUERY_ALLOWED,
    X_REQUIRED,
    X_WIDTH,
    X_X_POSITION,
    X_Y_POSITION,
    X_VALIDATION_PARAM_ITEM_ID3,
    X_VALIDATION_PARAM_ITEM_ID4,
    X_VALIDATION_PARAM_ITEM_ID1,
    X_PROMPT_EDGE_OFFSET,
    X_INFORMATION_CATEGORY,
    X_INFORMATION1,
    X_INFORMATION2,
    X_INFORMATION3,
    X_INFORMATION4,
    X_INFORMATION5,
    X_INFORMATION6,
    X_INFORMATION7,
    X_INFORMATION8,
    X_INFORMATION9,
    X_INFORMATION10,
    X_INFORMATION11,
    X_INFORMATION12,
    X_INFORMATION13,
    X_INFORMATION14,
    X_INFORMATION15,
    X_ITEM_PROPERTY_ID,
    X_FORM_ITEM_ID,
    X_TEMPLATE_ITEM_ID,
    X_TEMPLATE_ITEM_CONTEXT_ID,
    X_ALIGNMENT,
    X_BEVEL,
    X_CASE_RESTRICTION,
    X_ENABLED,
    X_FORMAT_MASK,
    X_HEIGHT,
    X_INFORMATION_FORMULA_ID,
    X_INFORMATION_PARAM_ITEM_ID1,
    X_INFORMATION_PARAM_ITEM_ID2,
    X_PROMPT_EDGE_ALIGNMENT,
    X_VALIDATION_PARAM_ITEM_ID5,
    X_VALIDATION_FORMULA_ID,
    X_INFORMATION16,
    X_INFORMATION17,
    X_INFORMATION18,
    X_INFORMATION19,
    X_VALIDATION_PARAM_ITEM_ID2,
    X_VISIBLE,
    X_INFORMATION_PARAM_ITEM_ID3,
    X_INFORMATION_PARAM_ITEM_ID4,
    X_INFORMATION_PARAM_ITEM_ID5,
    X_INSERT_ALLOWED,
    X_PROMPT_ALIGNMENT_OFFSET,
    X_PROMPT_DISPLAY_STYLE,
    X_PROMPT_EDGE,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN
  );

  insert into HR_ITEM_PROPERTIES_TL (
    DEFAULT_VALUE,
    INFORMATION_PROMPT,
    LABEL,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    CREATED_BY,
    CREATION_DATE,
    ITEM_PROPERTY_ID,
    LAST_UPDATE_DATE,
    PROMPT_TEXT,
    TOOLTIP_TEXT,
    LANGUAGE,
    SOURCE_LANG
  ) select
    X_DEFAULT_VALUE,
    X_INFORMATION_PROMPT,
    X_LABEL,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN,
    X_CREATED_BY,
    X_CREATION_DATE,
    X_ITEM_PROPERTY_ID,
    X_LAST_UPDATE_DATE,
    X_PROMPT_TEXT,
    X_TOOLTIP_TEXT,
    L.LANGUAGE_CODE,
    userenv('LANG')
  from FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and not exists
    (select NULL
    from HR_ITEM_PROPERTIES_TL T
    where T.ITEM_PROPERTY_ID = X_ITEM_PROPERTY_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);

  open c;
  fetch c into X_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

end INSERT_ROW;

procedure LOCK_ROW (
  X_ITEM_PROPERTY_ID in NUMBER,
  X_UPDATE_ALLOWED in NUMBER,
  X_INFORMATION20 in VARCHAR2,
  X_INFORMATION21 in VARCHAR2,
  X_INFORMATION22 in VARCHAR2,
  X_INFORMATION23 in VARCHAR2,
  X_INFORMATION24 in VARCHAR2,
  X_INFORMATION25 in VARCHAR2,
  X_INFORMATION26 in VARCHAR2,
  X_INFORMATION27 in VARCHAR2,
  X_INFORMATION28 in VARCHAR2,
  X_INFORMATION29 in VARCHAR2,
  X_INFORMATION30 in VARCHAR2,
  X_NEXT_NAVIGATION_ITEM_ID in NUMBER,
  X_PREVIOUS_NAVIGATION_ITEM_ID in NUMBER,
  X_PROMPT_TEXT_ALIGNMENT in NUMBER,
  X_QUERY_ALLOWED in NUMBER,
  X_REQUIRED in NUMBER,
  X_WIDTH in NUMBER,
  X_X_POSITION in NUMBER,
  X_Y_POSITION in NUMBER,
  X_VALIDATION_PARAM_ITEM_ID3 in NUMBER,
  X_VALIDATION_PARAM_ITEM_ID4 in NUMBER,
  X_VALIDATION_PARAM_ITEM_ID1 in NUMBER,
  X_PROMPT_EDGE_OFFSET in NUMBER,
  X_INFORMATION_CATEGORY in VARCHAR2,
  X_INFORMATION1 in VARCHAR2,
  X_INFORMATION2 in VARCHAR2,
  X_INFORMATION3 in VARCHAR2,
  X_INFORMATION4 in VARCHAR2,
  X_INFORMATION5 in VARCHAR2,
  X_INFORMATION6 in VARCHAR2,
  X_INFORMATION7 in VARCHAR2,
  X_INFORMATION8 in VARCHAR2,
  X_INFORMATION9 in VARCHAR2,
  X_INFORMATION10 in VARCHAR2,
  X_INFORMATION11 in VARCHAR2,
  X_INFORMATION12 in VARCHAR2,
  X_INFORMATION13 in VARCHAR2,
  X_INFORMATION14 in VARCHAR2,
  X_INFORMATION15 in VARCHAR2,
  X_FORM_ITEM_ID in NUMBER,
  X_TEMPLATE_ITEM_ID in NUMBER,
  X_TEMPLATE_ITEM_CONTEXT_ID in NUMBER,
  X_ALIGNMENT in NUMBER,
  X_BEVEL in NUMBER,
  X_CASE_RESTRICTION in NUMBER,
  X_DEFAULT_VALUE in VARCHAR2,
  X_ENABLED in NUMBER,
  X_FORMAT_MASK in VARCHAR2,
  X_HEIGHT in NUMBER,
  X_INFORMATION_FORMULA_ID in NUMBER,
  X_INFORMATION_PARAM_ITEM_ID1 in NUMBER,
  X_INFORMATION_PARAM_ITEM_ID2 in NUMBER,
  X_PROMPT_EDGE_ALIGNMENT in NUMBER,
  X_VALIDATION_PARAM_ITEM_ID5 in NUMBER,
  X_VALIDATION_FORMULA_ID in NUMBER,
  X_INFORMATION16 in VARCHAR2,
  X_INFORMATION17 in VARCHAR2,
  X_INFORMATION18 in VARCHAR2,
  X_INFORMATION19 in VARCHAR2,
  X_VALIDATION_PARAM_ITEM_ID2 in NUMBER,
  X_VISIBLE in NUMBER,
  X_INFORMATION_PARAM_ITEM_ID3 in NUMBER,
  X_INFORMATION_PARAM_ITEM_ID4 in NUMBER,
  X_INFORMATION_PARAM_ITEM_ID5 in NUMBER,
  X_INSERT_ALLOWED in NUMBER,
  X_PROMPT_ALIGNMENT_OFFSET in NUMBER,
  X_PROMPT_DISPLAY_STYLE in NUMBER,
  X_PROMPT_EDGE in NUMBER,
  X_INFORMATION_PROMPT in VARCHAR2,
  X_LABEL in VARCHAR2,
  X_PROMPT_TEXT in VARCHAR2,
  X_TOOLTIP_TEXT in VARCHAR2
) is
  cursor c is select
      UPDATE_ALLOWED,
      INFORMATION20,
      INFORMATION21,
      INFORMATION22,
      INFORMATION23,
      INFORMATION24,
      INFORMATION25,
      INFORMATION26,
      INFORMATION27,
      INFORMATION28,
      INFORMATION29,
      INFORMATION30,
      NEXT_NAVIGATION_ITEM_ID,
      PREVIOUS_NAVIGATION_ITEM_ID,
      PROMPT_TEXT_ALIGNMENT,
      QUERY_ALLOWED,
      REQUIRED,
      WIDTH,
      X_POSITION,
      Y_POSITION,
      VALIDATION_PARAMETER_ITEM_ID3,
      VALIDATION_PARAMETER_ITEM_ID4,
      VALIDATION_PARAMETER_ITEM_ID1,
      PROMPT_EDGE_OFFSET,
      INFORMATION_CATEGORY,
      INFORMATION1,
      INFORMATION2,
      INFORMATION3,
      INFORMATION4,
      INFORMATION5,
      INFORMATION6,
      INFORMATION7,
      INFORMATION8,
      INFORMATION9,
      INFORMATION10,
      INFORMATION11,
      INFORMATION12,
      INFORMATION13,
      INFORMATION14,
      INFORMATION15,
      FORM_ITEM_ID,
      TEMPLATE_ITEM_ID,
      TEMPLATE_ITEM_CONTEXT_ID,
      ALIGNMENT,
      BEVEL,
      CASE_RESTRICTION,
      ENABLED,
      FORMAT_MASK,
      HEIGHT,
      INFORMATION_FORMULA_ID,
      INFORMATION_PARAMETER_ITEM_ID1,
      INFORMATION_PARAMETER_ITEM_ID2,
      PROMPT_EDGE_ALIGNMENT,
      VALIDATION_PARAMETER_ITEM_ID5,
      VALIDATION_FORMULA_ID,
      INFORMATION16,
      INFORMATION17,
      INFORMATION18,
      INFORMATION19,
      VALIDATION_PARAMETER_ITEM_ID2,
      VISIBLE,
      INFORMATION_PARAMETER_ITEM_ID3,
      INFORMATION_PARAMETER_ITEM_ID4,
      INFORMATION_PARAMETER_ITEM_ID5,
      INSERT_ALLOWED,
      PROMPT_ALIGNMENT_OFFSET,
      PROMPT_DISPLAY_STYLE,
      PROMPT_EDGE
    from HR_ITEM_PROPERTIES_B
    where ITEM_PROPERTY_ID = X_ITEM_PROPERTY_ID
    for update of ITEM_PROPERTY_ID nowait;
  recinfo c%rowtype;

  cursor c1 is select
      DEFAULT_VALUE,
      INFORMATION_PROMPT,
      LABEL,
      PROMPT_TEXT,
      TOOLTIP_TEXT,
      decode(LANGUAGE, userenv('LANG'), 'Y', 'N') BASELANG
    from HR_ITEM_PROPERTIES_TL
    where ITEM_PROPERTY_ID = X_ITEM_PROPERTY_ID
    and userenv('LANG') in (LANGUAGE, SOURCE_LANG)
    for update of ITEM_PROPERTY_ID nowait;
begin
  open c;
  fetch c into recinfo;
  if (c%notfound) then
    close c;
    fnd_message.set_name('FND', 'FORM_RECORD_DELETED');
    app_exception.raise_exception;
  end if;
  close c;
  if (    ((recinfo.UPDATE_ALLOWED = X_UPDATE_ALLOWED)
           OR ((recinfo.UPDATE_ALLOWED is null) AND (X_UPDATE_ALLOWED is null)))
      AND ((recinfo.INFORMATION20 = X_INFORMATION20)
           OR ((recinfo.INFORMATION20 is null) AND (X_INFORMATION20 is null)))
      AND ((recinfo.INFORMATION21 = X_INFORMATION21)
           OR ((recinfo.INFORMATION21 is null) AND (X_INFORMATION21 is null)))
      AND ((recinfo.INFORMATION22 = X_INFORMATION22)
           OR ((recinfo.INFORMATION22 is null) AND (X_INFORMATION22 is null)))
      AND ((recinfo.INFORMATION23 = X_INFORMATION23)
           OR ((recinfo.INFORMATION23 is null) AND (X_INFORMATION23 is null)))
      AND ((recinfo.INFORMATION24 = X_INFORMATION24)
           OR ((recinfo.INFORMATION24 is null) AND (X_INFORMATION24 is null)))
      AND ((recinfo.INFORMATION25 = X_INFORMATION25)
           OR ((recinfo.INFORMATION25 is null) AND (X_INFORMATION25 is null)))
      AND ((recinfo.INFORMATION26 = X_INFORMATION26)
           OR ((recinfo.INFORMATION26 is null) AND (X_INFORMATION26 is null)))
      AND ((recinfo.INFORMATION27 = X_INFORMATION27)
           OR ((recinfo.INFORMATION27 is null) AND (X_INFORMATION27 is null)))
      AND ((recinfo.INFORMATION28 = X_INFORMATION28)
           OR ((recinfo.INFORMATION28 is null) AND (X_INFORMATION28 is null)))
      AND ((recinfo.INFORMATION29 = X_INFORMATION29)
           OR ((recinfo.INFORMATION29 is null) AND (X_INFORMATION29 is null)))
      AND ((recinfo.INFORMATION30 = X_INFORMATION30)
           OR ((recinfo.INFORMATION30 is null) AND (X_INFORMATION30 is null)))
      AND ((recinfo.NEXT_NAVIGATION_ITEM_ID = X_NEXT_NAVIGATION_ITEM_ID)
           OR ((recinfo.NEXT_NAVIGATION_ITEM_ID is null) AND (X_NEXT_NAVIGATION_ITEM_ID is null)))
      AND ((recinfo.PREVIOUS_NAVIGATION_ITEM_ID = X_PREVIOUS_NAVIGATION_ITEM_ID)
           OR ((recinfo.PREVIOUS_NAVIGATION_ITEM_ID is null) AND (X_PREVIOUS_NAVIGATION_ITEM_ID is null)))
      AND ((recinfo.PROMPT_TEXT_ALIGNMENT = X_PROMPT_TEXT_ALIGNMENT)
           OR ((recinfo.PROMPT_TEXT_ALIGNMENT is null) AND (X_PROMPT_TEXT_ALIGNMENT is null)))
      AND ((recinfo.QUERY_ALLOWED = X_QUERY_ALLOWED)
           OR ((recinfo.QUERY_ALLOWED is null) AND (X_QUERY_ALLOWED is null)))
      AND ((recinfo.REQUIRED = X_REQUIRED)
           OR ((recinfo.REQUIRED is null) AND (X_REQUIRED is null)))
      AND ((recinfo.WIDTH = X_WIDTH)
           OR ((recinfo.WIDTH is null) AND (X_WIDTH is null)))
      AND ((recinfo.X_POSITION = X_X_POSITION)
           OR ((recinfo.X_POSITION is null) AND (X_X_POSITION is null)))
      AND ((recinfo.Y_POSITION = X_Y_POSITION)
           OR ((recinfo.Y_POSITION is null) AND (X_Y_POSITION is null)))
      AND ((recinfo.VALIDATION_PARAMETER_ITEM_ID3 = X_VALIDATION_PARAM_ITEM_ID3)
           OR ((recinfo.VALIDATION_PARAMETER_ITEM_ID3 is null) AND (X_VALIDATION_PARAM_ITEM_ID3 is null)))
      AND ((recinfo.VALIDATION_PARAMETER_ITEM_ID4 = X_VALIDATION_PARAM_ITEM_ID4)
           OR ((recinfo.VALIDATION_PARAMETER_ITEM_ID4 is null) AND (X_VALIDATION_PARAM_ITEM_ID4 is null)))
      AND ((recinfo.VALIDATION_PARAMETER_ITEM_ID1 = X_VALIDATION_PARAM_ITEM_ID1)
           OR ((recinfo.VALIDATION_PARAMETER_ITEM_ID1 is null) AND (X_VALIDATION_PARAM_ITEM_ID1 is null)))
      AND ((recinfo.PROMPT_EDGE_OFFSET = X_PROMPT_EDGE_OFFSET)
           OR ((recinfo.PROMPT_EDGE_OFFSET is null) AND (X_PROMPT_EDGE_OFFSET is null)))
      AND ((recinfo.INFORMATION_CATEGORY = X_INFORMATION_CATEGORY)
           OR ((recinfo.INFORMATION_CATEGORY is null) AND (X_INFORMATION_CATEGORY is null)))
      AND ((recinfo.INFORMATION1 = X_INFORMATION1)
           OR ((recinfo.INFORMATION1 is null) AND (X_INFORMATION1 is null)))
      AND ((recinfo.INFORMATION2 = X_INFORMATION2)
           OR ((recinfo.INFORMATION2 is null) AND (X_INFORMATION2 is null)))
      AND ((recinfo.INFORMATION3 = X_INFORMATION3)
           OR ((recinfo.INFORMATION3 is null) AND (X_INFORMATION3 is null)))
      AND ((recinfo.INFORMATION4 = X_INFORMATION4)
           OR ((recinfo.INFORMATION4 is null) AND (X_INFORMATION4 is null)))
      AND ((recinfo.INFORMATION5 = X_INFORMATION5)
           OR ((recinfo.INFORMATION5 is null) AND (X_INFORMATION5 is null)))
      AND ((recinfo.INFORMATION6 = X_INFORMATION6)
           OR ((recinfo.INFORMATION6 is null) AND (X_INFORMATION6 is null)))
      AND ((recinfo.INFORMATION7 = X_INFORMATION7)
           OR ((recinfo.INFORMATION7 is null) AND (X_INFORMATION7 is null)))
      AND ((recinfo.INFORMATION8 = X_INFORMATION8)
           OR ((recinfo.INFORMATION8 is null) AND (X_INFORMATION8 is null)))
      AND ((recinfo.INFORMATION9 = X_INFORMATION9)
           OR ((recinfo.INFORMATION9 is null) AND (X_INFORMATION9 is null)))
      AND ((recinfo.INFORMATION10 = X_INFORMATION10)
           OR ((recinfo.INFORMATION10 is null) AND (X_INFORMATION10 is null)))
      AND ((recinfo.INFORMATION11 = X_INFORMATION11)
           OR ((recinfo.INFORMATION11 is null) AND (X_INFORMATION11 is null)))
      AND ((recinfo.INFORMATION12 = X_INFORMATION12)
           OR ((recinfo.INFORMATION12 is null) AND (X_INFORMATION12 is null)))
      AND ((recinfo.INFORMATION13 = X_INFORMATION13)
           OR ((recinfo.INFORMATION13 is null) AND (X_INFORMATION13 is null)))
      AND ((recinfo.INFORMATION14 = X_INFORMATION14)
           OR ((recinfo.INFORMATION14 is null) AND (X_INFORMATION14 is null)))
      AND ((recinfo.INFORMATION15 = X_INFORMATION15)
           OR ((recinfo.INFORMATION15 is null) AND (X_INFORMATION15 is null)))
      AND ((recinfo.FORM_ITEM_ID = X_FORM_ITEM_ID)
           OR ((recinfo.FORM_ITEM_ID is null) AND (X_FORM_ITEM_ID is null)))
      AND ((recinfo.TEMPLATE_ITEM_ID = X_TEMPLATE_ITEM_ID)
           OR ((recinfo.TEMPLATE_ITEM_ID is null) AND (X_TEMPLATE_ITEM_ID is null)))
      AND ((recinfo.TEMPLATE_ITEM_CONTEXT_ID = X_TEMPLATE_ITEM_CONTEXT_ID)
           OR ((recinfo.TEMPLATE_ITEM_CONTEXT_ID is null) AND (X_TEMPLATE_ITEM_CONTEXT_ID is null)))
      AND ((recinfo.ALIGNMENT = X_ALIGNMENT)
           OR ((recinfo.ALIGNMENT is null) AND (X_ALIGNMENT is null)))
      AND ((recinfo.BEVEL = X_BEVEL)
           OR ((recinfo.BEVEL is null) AND (X_BEVEL is null)))
      AND ((recinfo.CASE_RESTRICTION = X_CASE_RESTRICTION)
           OR ((recinfo.CASE_RESTRICTION is null) AND (X_CASE_RESTRICTION is null)))
      AND ((recinfo.ENABLED = X_ENABLED)
           OR ((recinfo.ENABLED is null) AND (X_ENABLED is null)))
      AND ((recinfo.FORMAT_MASK = X_FORMAT_MASK)
           OR ((recinfo.FORMAT_MASK is null) AND (X_FORMAT_MASK is null)))
      AND ((recinfo.HEIGHT = X_HEIGHT)
           OR ((recinfo.HEIGHT is null) AND (X_HEIGHT is null)))
      AND ((recinfo.INFORMATION_FORMULA_ID = X_INFORMATION_FORMULA_ID)
           OR ((recinfo.INFORMATION_FORMULA_ID is null) AND (X_INFORMATION_FORMULA_ID is null)))
      AND ((recinfo.INFORMATION_PARAMETER_ITEM_ID1 = X_INFORMATION_PARAM_ITEM_ID1)
           OR ((recinfo.INFORMATION_PARAMETER_ITEM_ID1 is null) AND (X_INFORMATION_PARAM_ITEM_ID1 is null)))
      AND ((recinfo.INFORMATION_PARAMETER_ITEM_ID2 = X_INFORMATION_PARAM_ITEM_ID2)
           OR ((recinfo.INFORMATION_PARAMETER_ITEM_ID2 is null) AND (X_INFORMATION_PARAM_ITEM_ID2 is null)))
      AND ((recinfo.PROMPT_EDGE_ALIGNMENT = X_PROMPT_EDGE_ALIGNMENT)
           OR ((recinfo.PROMPT_EDGE_ALIGNMENT is null) AND (X_PROMPT_EDGE_ALIGNMENT is null)))
      AND ((recinfo.VALIDATION_PARAMETER_ITEM_ID5 = X_VALIDATION_PARAM_ITEM_ID5)
           OR ((recinfo.VALIDATION_PARAMETER_ITEM_ID5 is null) AND (X_VALIDATION_PARAM_ITEM_ID5 is null)))
      AND ((recinfo.VALIDATION_FORMULA_ID = X_VALIDATION_FORMULA_ID)
           OR ((recinfo.VALIDATION_FORMULA_ID is null) AND (X_VALIDATION_FORMULA_ID is null)))
      AND ((recinfo.INFORMATION16 = X_INFORMATION16)
           OR ((recinfo.INFORMATION16 is null) AND (X_INFORMATION16 is null)))
      AND ((recinfo.INFORMATION17 = X_INFORMATION17)
           OR ((recinfo.INFORMATION17 is null) AND (X_INFORMATION17 is null)))
      AND ((recinfo.INFORMATION18 = X_INFORMATION18)
           OR ((recinfo.INFORMATION18 is null) AND (X_INFORMATION18 is null)))
      AND ((recinfo.INFORMATION19 = X_INFORMATION19)
           OR ((recinfo.INFORMATION19 is null) AND (X_INFORMATION19 is null)))
      AND ((recinfo.VALIDATION_PARAMETER_ITEM_ID2 = X_VALIDATION_PARAM_ITEM_ID2)
           OR ((recinfo.VALIDATION_PARAMETER_ITEM_ID2 is null) AND (X_VALIDATION_PARAM_ITEM_ID2 is null)))
      AND ((recinfo.VISIBLE = X_VISIBLE)
           OR ((recinfo.VISIBLE is null) AND (X_VISIBLE is null)))
      AND ((recinfo.INFORMATION_PARAMETER_ITEM_ID3 = X_INFORMATION_PARAM_ITEM_ID3)
           OR ((recinfo.INFORMATION_PARAMETER_ITEM_ID3 is null) AND (X_INFORMATION_PARAM_ITEM_ID3 is null)))
      AND ((recinfo.INFORMATION_PARAMETER_ITEM_ID4 = X_INFORMATION_PARAM_ITEM_ID4)
           OR ((recinfo.INFORMATION_PARAMETER_ITEM_ID4 is null) AND (X_INFORMATION_PARAM_ITEM_ID4 is null)))
      AND ((recinfo.INFORMATION_PARAMETER_ITEM_ID5 = X_INFORMATION_PARAM_ITEM_ID5)
           OR ((recinfo.INFORMATION_PARAMETER_ITEM_ID5 is null) AND (X_INFORMATION_PARAM_ITEM_ID5 is null)))
      AND ((recinfo.INSERT_ALLOWED = X_INSERT_ALLOWED)
           OR ((recinfo.INSERT_ALLOWED is null) AND (X_INSERT_ALLOWED is null)))
      AND ((recinfo.PROMPT_ALIGNMENT_OFFSET = X_PROMPT_ALIGNMENT_OFFSET)
           OR ((recinfo.PROMPT_ALIGNMENT_OFFSET is null) AND (X_PROMPT_ALIGNMENT_OFFSET is null)))
      AND ((recinfo.PROMPT_DISPLAY_STYLE = X_PROMPT_DISPLAY_STYLE)
           OR ((recinfo.PROMPT_DISPLAY_STYLE is null) AND (X_PROMPT_DISPLAY_STYLE is null)))
      AND ((recinfo.PROMPT_EDGE = X_PROMPT_EDGE)
           OR ((recinfo.PROMPT_EDGE is null) AND (X_PROMPT_EDGE is null)))
  ) then
    null;
  else
    fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
    app_exception.raise_exception;
  end if;

  for tlinfo in c1 loop
    if (tlinfo.BASELANG = 'Y') then
      if (    ((tlinfo.INFORMATION_PROMPT = X_INFORMATION_PROMPT)
               OR ((tlinfo.INFORMATION_PROMPT is null) AND (X_INFORMATION_PROMPT is null)))
          AND ((tlinfo.DEFAULT_VALUE = X_DEFAULT_VALUE)
               OR ((tlinfo.DEFAULT_VALUE is null) AND (X_DEFAULT_VALUE is null)))
          AND ((tlinfo.LABEL = X_LABEL)
               OR ((tlinfo.LABEL is null) AND (X_LABEL is null)))
          AND ((tlinfo.PROMPT_TEXT = X_PROMPT_TEXT)
               OR ((tlinfo.PROMPT_TEXT is null) AND (X_PROMPT_TEXT is null)))
          AND ((tlinfo.TOOLTIP_TEXT = X_TOOLTIP_TEXT)
               OR ((tlinfo.TOOLTIP_TEXT is null) AND (X_TOOLTIP_TEXT is null)))
      ) then
        null;
      else
        fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
        app_exception.raise_exception;
      end if;
    end if;
  end loop;
  return;
end LOCK_ROW;

procedure UPDATE_ROW (
  X_ITEM_PROPERTY_ID in NUMBER,
  X_UPDATE_ALLOWED in NUMBER,
  X_INFORMATION20 in VARCHAR2,
  X_INFORMATION21 in VARCHAR2,
  X_INFORMATION22 in VARCHAR2,
  X_INFORMATION23 in VARCHAR2,
  X_INFORMATION24 in VARCHAR2,
  X_INFORMATION25 in VARCHAR2,
  X_INFORMATION26 in VARCHAR2,
  X_INFORMATION27 in VARCHAR2,
  X_INFORMATION28 in VARCHAR2,
  X_INFORMATION29 in VARCHAR2,
  X_INFORMATION30 in VARCHAR2,
  X_NEXT_NAVIGATION_ITEM_ID in NUMBER,
  X_PREVIOUS_NAVIGATION_ITEM_ID in NUMBER,
  X_PROMPT_TEXT_ALIGNMENT in NUMBER,
  X_QUERY_ALLOWED in NUMBER,
  X_REQUIRED in NUMBER,
  X_WIDTH in NUMBER,
  X_X_POSITION in NUMBER,
  X_Y_POSITION in NUMBER,
  X_VALIDATION_PARAM_ITEM_ID3 in NUMBER,
  X_VALIDATION_PARAM_ITEM_ID4 in NUMBER,
  X_VALIDATION_PARAM_ITEM_ID1 in NUMBER,
  X_PROMPT_EDGE_OFFSET in NUMBER,
  X_INFORMATION_CATEGORY in VARCHAR2,
  X_INFORMATION1 in VARCHAR2,
  X_INFORMATION2 in VARCHAR2,
  X_INFORMATION3 in VARCHAR2,
  X_INFORMATION4 in VARCHAR2,
  X_INFORMATION5 in VARCHAR2,
  X_INFORMATION6 in VARCHAR2,
  X_INFORMATION7 in VARCHAR2,
  X_INFORMATION8 in VARCHAR2,
  X_INFORMATION9 in VARCHAR2,
  X_INFORMATION10 in VARCHAR2,
  X_INFORMATION11 in VARCHAR2,
  X_INFORMATION12 in VARCHAR2,
  X_INFORMATION13 in VARCHAR2,
  X_INFORMATION14 in VARCHAR2,
  X_INFORMATION15 in VARCHAR2,
  X_FORM_ITEM_ID in NUMBER,
  X_TEMPLATE_ITEM_ID in NUMBER,
  X_TEMPLATE_ITEM_CONTEXT_ID in NUMBER,
  X_ALIGNMENT in NUMBER,
  X_BEVEL in NUMBER,
  X_CASE_RESTRICTION in NUMBER,
  X_DEFAULT_VALUE in VARCHAR2,
  X_ENABLED in NUMBER,
  X_FORMAT_MASK in VARCHAR2,
  X_HEIGHT in NUMBER,
  X_INFORMATION_FORMULA_ID in NUMBER,
  X_INFORMATION_PARAM_ITEM_ID1 in NUMBER,
  X_INFORMATION_PARAM_ITEM_ID2 in NUMBER,
  X_PROMPT_EDGE_ALIGNMENT in NUMBER,
  X_VALIDATION_PARAM_ITEM_ID5 in NUMBER,
  X_VALIDATION_FORMULA_ID in NUMBER,
  X_INFORMATION16 in VARCHAR2,
  X_INFORMATION17 in VARCHAR2,
  X_INFORMATION18 in VARCHAR2,
  X_INFORMATION19 in VARCHAR2,
  X_VALIDATION_PARAM_ITEM_ID2 in NUMBER,
  X_VISIBLE in NUMBER,
  X_INFORMATION_PARAM_ITEM_ID3 in NUMBER,
  X_INFORMATION_PARAM_ITEM_ID4 in NUMBER,
  X_INFORMATION_PARAM_ITEM_ID5 in NUMBER,
  X_INSERT_ALLOWED in NUMBER,
  X_PROMPT_ALIGNMENT_OFFSET in NUMBER,
  X_PROMPT_DISPLAY_STYLE in NUMBER,
  X_PROMPT_EDGE in NUMBER,
  X_INFORMATION_PROMPT in VARCHAR2,
  X_LABEL in VARCHAR2,
  X_PROMPT_TEXT in VARCHAR2,
  X_TOOLTIP_TEXT in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
begin
  update HR_ITEM_PROPERTIES_B set
    UPDATE_ALLOWED = X_UPDATE_ALLOWED,
    INFORMATION20 = X_INFORMATION20,
    INFORMATION21 = X_INFORMATION21,
    INFORMATION22 = X_INFORMATION22,
    INFORMATION23 = X_INFORMATION23,
    INFORMATION24 = X_INFORMATION24,
    INFORMATION25 = X_INFORMATION25,
    INFORMATION26 = X_INFORMATION26,
    INFORMATION27 = X_INFORMATION27,
    INFORMATION28 = X_INFORMATION28,
    INFORMATION29 = X_INFORMATION29,
    INFORMATION30 = X_INFORMATION30,
    NEXT_NAVIGATION_ITEM_ID = X_NEXT_NAVIGATION_ITEM_ID,
    PREVIOUS_NAVIGATION_ITEM_ID = X_PREVIOUS_NAVIGATION_ITEM_ID,
    PROMPT_TEXT_ALIGNMENT = X_PROMPT_TEXT_ALIGNMENT,
    QUERY_ALLOWED = X_QUERY_ALLOWED,
    REQUIRED = X_REQUIRED,
    WIDTH = X_WIDTH,
    X_POSITION = X_X_POSITION,
    Y_POSITION = X_Y_POSITION,
    VALIDATION_PARAMETER_ITEM_ID3 = X_VALIDATION_PARAM_ITEM_ID3,
    VALIDATION_PARAMETER_ITEM_ID4 = X_VALIDATION_PARAM_ITEM_ID4,
    VALIDATION_PARAMETER_ITEM_ID1 = X_VALIDATION_PARAM_ITEM_ID5,
    PROMPT_EDGE_OFFSET = X_PROMPT_EDGE_OFFSET,
    INFORMATION_CATEGORY = X_INFORMATION_CATEGORY,
    INFORMATION1 = X_INFORMATION1,
    INFORMATION2 = X_INFORMATION2,
    INFORMATION3 = X_INFORMATION3,
    INFORMATION4 = X_INFORMATION4,
    INFORMATION5 = X_INFORMATION5,
    INFORMATION6 = X_INFORMATION6,
    INFORMATION7 = X_INFORMATION7,
    INFORMATION8 = X_INFORMATION8,
    INFORMATION9 = X_INFORMATION9,
    INFORMATION10 = X_INFORMATION10,
    INFORMATION11 = X_INFORMATION11,
    INFORMATION12 = X_INFORMATION12,
    INFORMATION13 = X_INFORMATION13,
    INFORMATION14 = X_INFORMATION14,
    INFORMATION15 = X_INFORMATION15,
    FORM_ITEM_ID = X_FORM_ITEM_ID,
    TEMPLATE_ITEM_ID = X_TEMPLATE_ITEM_ID,
    TEMPLATE_ITEM_CONTEXT_ID = X_TEMPLATE_ITEM_CONTEXT_ID,
    ALIGNMENT = X_ALIGNMENT,
    BEVEL = X_BEVEL,
    CASE_RESTRICTION = X_CASE_RESTRICTION,
    ENABLED = X_ENABLED,
    FORMAT_MASK = X_FORMAT_MASK,
    HEIGHT = X_HEIGHT,
    INFORMATION_FORMULA_ID = X_INFORMATION_FORMULA_ID,
    INFORMATION_PARAMETER_ITEM_ID1 = X_INFORMATION_PARAM_ITEM_ID1,
    INFORMATION_PARAMETER_ITEM_ID2 = X_INFORMATION_PARAM_ITEM_ID2,
    PROMPT_EDGE_ALIGNMENT = X_PROMPT_EDGE_ALIGNMENT,
    VALIDATION_PARAMETER_ITEM_ID5 = X_VALIDATION_PARAM_ITEM_ID5,
    VALIDATION_FORMULA_ID = X_VALIDATION_FORMULA_ID,
    INFORMATION16 = X_INFORMATION16,
    INFORMATION17 = X_INFORMATION17,
    INFORMATION18 = X_INFORMATION18,
    INFORMATION19 = X_INFORMATION19,
    VALIDATION_PARAMETER_ITEM_ID2 = X_VALIDATION_PARAM_ITEM_ID2,
    VISIBLE = X_VISIBLE,
    INFORMATION_PARAMETER_ITEM_ID3 = X_INFORMATION_PARAM_ITEM_ID3,
    INFORMATION_PARAMETER_ITEM_ID4 = X_INFORMATION_PARAM_ITEM_ID4,
    INFORMATION_PARAMETER_ITEM_ID5 = X_INFORMATION_PARAM_ITEM_ID5,
    INSERT_ALLOWED = X_INSERT_ALLOWED,
    PROMPT_ALIGNMENT_OFFSET = X_PROMPT_ALIGNMENT_OFFSET,
    PROMPT_DISPLAY_STYLE = X_PROMPT_DISPLAY_STYLE,
    PROMPT_EDGE = X_PROMPT_EDGE,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN
  where ITEM_PROPERTY_ID = X_ITEM_PROPERTY_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  update HR_ITEM_PROPERTIES_TL set
    DEFAULT_VALUE = X_DEFAULT_VALUE,
    INFORMATION_PROMPT = X_INFORMATION_PROMPT,
    LABEL = X_LABEL,
    PROMPT_TEXT = X_PROMPT_TEXT,
    TOOLTIP_TEXT = X_TOOLTIP_TEXT,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    SOURCE_LANG = userenv('LANG')
  where ITEM_PROPERTY_ID = X_ITEM_PROPERTY_ID
  and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

  if (sql%notfound) then
    raise no_data_found;
  end if;
end UPDATE_ROW;

procedure DELETE_ROW (
  X_ITEM_PROPERTY_ID in NUMBER
) is
begin
  delete from HR_ITEM_PROPERTIES_TL
  where ITEM_PROPERTY_ID = X_ITEM_PROPERTY_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  delete from HR_ITEM_PROPERTIES_B
  where ITEM_PROPERTY_ID = X_ITEM_PROPERTY_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;
end DELETE_ROW;

procedure ADD_LANGUAGE
is
begin
  delete from HR_ITEM_PROPERTIES_TL T
  where not exists
    (select NULL
    from HR_ITEM_PROPERTIES_B B
    where B.ITEM_PROPERTY_ID = T.ITEM_PROPERTY_ID
    );

  update HR_ITEM_PROPERTIES_TL T set (
      DEFAULT_VALUE,
      INFORMATION_PROMPT,
      LABEL,
      PROMPT_TEXT,
      TOOLTIP_TEXT
    ) = (select
      B.DEFAULT_VALUE,
      B.INFORMATION_PROMPT,
      B.LABEL,
      B.PROMPT_TEXT,
      B.TOOLTIP_TEXT
    from HR_ITEM_PROPERTIES_TL B
    where B.ITEM_PROPERTY_ID = T.ITEM_PROPERTY_ID
    and B.LANGUAGE = T.SOURCE_LANG)
  where (
      T.ITEM_PROPERTY_ID,
      T.LANGUAGE
  ) in (select
      SUBT.ITEM_PROPERTY_ID,
      SUBT.LANGUAGE
    from HR_ITEM_PROPERTIES_TL SUBB, HR_ITEM_PROPERTIES_TL SUBT
    where SUBB.ITEM_PROPERTY_ID = SUBT.ITEM_PROPERTY_ID
    and SUBB.LANGUAGE = SUBT.SOURCE_LANG
    and (SUBB.INFORMATION_PROMPT <> SUBT.INFORMATION_PROMPT
      or (SUBB.INFORMATION_PROMPT is null and SUBT.INFORMATION_PROMPT is not null)
      or (SUBB.INFORMATION_PROMPT is not null and SUBT.INFORMATION_PROMPT is null)
      or SUBB.DEFAULT_VALUE <> SUBT.DEFAULT_VALUE
      or (SUBB.DEFAULT_VALUE is null and SUBT.DEFAULT_VALUE is not null)
      or (SUBB.DEFAULT_VALUE is not null and SUBT.DEFAULT_VALUE is null)
      or SUBB.LABEL <> SUBT.LABEL
      or (SUBB.LABEL is null and SUBT.LABEL is not null)
      or (SUBB.LABEL is not null and SUBT.LABEL is null)
      or SUBB.PROMPT_TEXT <> SUBT.PROMPT_TEXT
      or (SUBB.PROMPT_TEXT is null and SUBT.PROMPT_TEXT is not null)
      or (SUBB.PROMPT_TEXT is not null and SUBT.PROMPT_TEXT is null)
      or SUBB.TOOLTIP_TEXT <> SUBT.TOOLTIP_TEXT
      or (SUBB.TOOLTIP_TEXT is null and SUBT.TOOLTIP_TEXT is not null)
      or (SUBB.TOOLTIP_TEXT is not null and SUBT.TOOLTIP_TEXT is null)
  ));

  insert into HR_ITEM_PROPERTIES_TL (
    DEFAULT_VALUE,
    INFORMATION_PROMPT,
    LABEL,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    CREATED_BY,
    CREATION_DATE,
    ITEM_PROPERTY_ID,
    LAST_UPDATE_DATE,
    PROMPT_TEXT,
    TOOLTIP_TEXT,
    LANGUAGE,
    SOURCE_LANG
  ) select
    B.DEFAULT_VALUE,
    B.INFORMATION_PROMPT,
    B.LABEL,
    B.LAST_UPDATED_BY,
    B.LAST_UPDATE_LOGIN,
    B.CREATED_BY,
    B.CREATION_DATE,
    B.ITEM_PROPERTY_ID,
    B.LAST_UPDATE_DATE,
    B.PROMPT_TEXT,
    B.TOOLTIP_TEXT,
    L.LANGUAGE_CODE,
    B.SOURCE_LANG
  from HR_ITEM_PROPERTIES_TL B, FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and B.LANGUAGE = userenv('LANG')
  and not exists
    (select NULL
    from HR_ITEM_PROPERTIES_TL T
    where T.ITEM_PROPERTY_ID = B.ITEM_PROPERTY_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);
end ADD_LANGUAGE;

procedure LOAD_ROW (
  X_APPLICATION_SHORT_NAME  IN VARCHAR2,
  X_FORM_NAME  IN VARCHAR2,
  X_FULL_ITEM_NAME  IN VARCHAR2,
  X_RADIO_BUTTON_NAME IN VARCHAR2,
  X_TEMPLATE_NAME  IN VARCHAR2,
  X_TERRITORY_SHORT_NAME IN VARCHAR2,
  X_SEGMENT1  IN VARCHAR2,
  X_SEGMENT2  IN VARCHAR2,
  X_SEGMENT3  IN VARCHAR2,
  X_SEGMENT4  IN VARCHAR2,
  X_SEGMENT5  IN VARCHAR2,
  X_SEGMENT6  IN VARCHAR2,
  X_SEGMENT7  IN VARCHAR2,
  X_SEGMENT8  IN VARCHAR2,
  X_SEGMENT9  IN VARCHAR2,
  X_SEGMENT10  IN VARCHAR2,
  X_SEGMENT11  IN VARCHAR2,
  X_SEGMENT12  IN VARCHAR2,
  X_SEGMENT13  IN VARCHAR2,
  X_SEGMENT14  IN VARCHAR2,
  X_SEGMENT15  IN VARCHAR2,
  X_SEGMENT16  IN VARCHAR2,
  X_SEGMENT17  IN VARCHAR2,
  X_SEGMENT18  IN VARCHAR2,
  X_SEGMENT19  IN VARCHAR2,
  X_SEGMENT20  IN VARCHAR2,
  X_SEGMENT21  IN VARCHAR2,
  X_SEGMENT22  IN VARCHAR2,
  X_SEGMENT23  IN VARCHAR2,
  X_SEGMENT24  IN VARCHAR2,
  X_SEGMENT25  IN VARCHAR2,
  X_SEGMENT26  IN VARCHAR2,  X_SEGMENT27  IN VARCHAR2,
  X_SEGMENT28  IN VARCHAR2,
  X_SEGMENT29  IN VARCHAR2,
  X_SEGMENT30  IN VARCHAR2,
  X_ID_FLEX_STRUCTURE_CODE  IN VARCHAR2,
  X_ID_FLEX_CODE  IN VARCHAR2,
  X_OWNER	  IN VARCHAR2,
  X_ALIGNMENT  IN VARCHAR2,
  X_BEVEL  IN VARCHAR2,
  X_CASE_RESTRICTION  IN VARCHAR2,
  X_DEFAULT_VALUE  IN VARCHAR2,
  X_ENABLED  IN VARCHAR2,
  X_FORMAT_MASK  IN VARCHAR2,
  X_HEIGHT  IN VARCHAR2,
  X_INFO_FORMULA_NAME    IN VARCHAR2,
  X_INFO_FORMULA_TYPE    IN VARCHAR2,
  X_INFO_BUSINESS_GROUP  IN VARCHAR2,
  X_INFO_TERRITORIES     IN VARCHAR2,
  X_FULL_ITEM_NAME_IP1   IN VARCHAR2,
  X_FULL_ITEM_NAME_IP2   IN VARCHAR2,
  X_FULL_ITEM_NAME_IP3   IN VARCHAR2,
  X_FULL_ITEM_NAME_IP4   IN VARCHAR2,
  X_FULL_ITEM_NAME_IP5   IN VARCHAR2,
  X_INSERT_ALLOWED  IN VARCHAR2,
  X_PROMPT_ALIGNMENT_OFFSET  IN VARCHAR2,
  X_PROMPT_DISPLAY_STYLE  IN VARCHAR2,
  X_PROMPT_EDGE  IN VARCHAR2,
  X_PROMPT_EDGE_ALIGNMENT  IN VARCHAR2,
  X_PROMPT_EDGE_OFFSET  IN VARCHAR2,
  X_PROMPT_TEXT_ALIGNMENT  IN VARCHAR2,
  X_QUERY_ALLOWED  IN VARCHAR2,
  X_REQUIRED  IN VARCHAR2,
  X_UPDATE_ALLOWED  IN VARCHAR2,
  X_VAL_FORMULA_NAME     IN VARCHAR2,
  X_VAL_FORMULA_TYPE     IN VARCHAR2,
  X_VAL_BUSINESS_GROUP   IN VARCHAR2,
  X_VAL_TERRITORIES      IN VARCHAR2,
  X_FULL_ITEM_NAME_VP1    IN VARCHAR2,
  X_FULL_ITEM_NAME_VP2    IN VARCHAR2,
  X_FULL_ITEM_NAME_VP3    IN VARCHAR2,
  X_FULL_ITEM_NAME_VP4    IN VARCHAR2,
  X_FULL_ITEM_NAME_VP5    IN VARCHAR2,
  X_VISIBLE  IN VARCHAR2,
  X_WIDTH  IN VARCHAR2,
  X_X_POSITION  IN VARCHAR2,
  X_Y_POSITION  IN VARCHAR2,
  X_INFORMATION_CATEGORY  IN VARCHAR2,
  X_INFORMATION1  IN VARCHAR2,
  X_INFORMATION2  IN VARCHAR2,
  X_INFORMATION3  IN VARCHAR2,
  X_INFORMATION4  IN VARCHAR2,
  X_INFORMATION5  IN VARCHAR2,
  X_INFORMATION6  IN VARCHAR2,
  X_INFORMATION7  IN VARCHAR2,
  X_INFORMATION8  IN VARCHAR2,
  X_INFORMATION9  IN VARCHAR2,
  X_INFORMATION10  IN VARCHAR2,
  X_INFORMATION11  IN VARCHAR2,
  X_INFORMATION12  IN VARCHAR2,
  X_INFORMATION13  IN VARCHAR2,
  X_INFORMATION14  IN VARCHAR2,
  X_INFORMATION15  IN VARCHAR2,
  X_INFORMATION16  IN VARCHAR2,
  X_INFORMATION17  IN VARCHAR2,
  X_INFORMATION18  IN VARCHAR2,
  X_INFORMATION19  IN VARCHAR2,
  X_INFORMATION20  IN VARCHAR2,
  X_INFORMATION21  IN VARCHAR2,
  X_INFORMATION22  IN VARCHAR2,
  X_INFORMATION23  IN VARCHAR2,
  X_INFORMATION24  IN VARCHAR2,
  X_INFORMATION25  IN VARCHAR2,
  X_INFORMATION26  IN VARCHAR2,
  X_INFORMATION27  IN VARCHAR2,
  X_INFORMATION28  IN VARCHAR2,
  X_INFORMATION29  IN VARCHAR2,
  X_INFORMATION30  IN VARCHAR2,
  X_PREV_ITEM_NAME IN VARCHAR2,
  X_NEXT_ITEM_NAME IN VARCHAR2,
  X_INFORMATION_PROMPT  IN VARCHAR2,
  X_LABEL  IN VARCHAR2,
  X_PROMPT_TEXT  IN VARCHAR2,
  X_TOOLTIP_TEXT IN VARCHAR2,
  X_LAST_UPDATE_DATE in VARCHAR2 default sysdate,
  X_CUSTOM_MODE IN VARCHAR2 default null
) is
  X_ROWID ROWID;
  X_CREATION_DATE DATE;
  X_CREATED_BY NUMBER;
--  X_LAST_UPDATE_DATE DATE;
  X_LAST_UPDATED_BY NUMBER;
  X_LAST_UPDATE_LOGIN NUMBER;
  X_FORM_ID NUMBER;
  X_APPLICATION_ID NUMBER;
  X_FORM_ITEM_ID NUMBER;
  X_TEMPLATE_ITEM_ID NUMBER;
  X_TEMPLATE_ITEM_CONTEXT_ID NUMBER;
  X_ITEM_PROPERTY_ID NUMBER;
  X_PREVIOUS_NAVIGATION_ITEM_ID NUMBER;
  X_NEXT_NAVIGATION_ITEM_ID NUMBER;
  X_BUSINESS_GROUP_ID NUMBER;
  X_LEGISLATION_CODE VARCHAR2(30);
  X_FORMULA_TYPE_ID NUMBER;
  X_INFORMATION_FORMULA_ID NUMBER;
  X_VALIDATION_FORMULA_ID NUMBER;
  X_INFORMATION_PARAM_ITEM_ID1 NUMBER;
  X_INFORMATION_PARAM_ITEM_ID2 NUMBER;
  X_INFORMATION_PARAM_ITEM_ID3 NUMBER;
  X_INFORMATION_PARAM_ITEM_ID4 NUMBER;
  X_INFORMATION_PARAM_ITEM_ID5 NUMBER;
  X_VALIDATION_PARAM_ITEM_ID1 NUMBER;
  X_VALIDATION_PARAM_ITEM_ID2 NUMBER;
  X_VALIDATION_PARAM_ITEM_ID3 NUMBER;
  X_VALIDATION_PARAM_ITEM_ID4 NUMBER;
  X_VALIDATION_PARAM_ITEM_ID5 NUMBER;
  f_luby    number;  -- entity owner in file
  f_ludate  date;    -- entity update date in file
  db_luby   number;  -- entity owner in db
  db_ludate date;    -- entity update date in db
begin
--This has been commented as LAST_UPDATE_DATE is passed as an parameter
 /* OWNER_TO_WHO (
    X_OWNER,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN
  );
*/

 if X_OWNER = 'SEED' then
    X_CREATED_BY := 1;
 else
    X_CREATED_BY := 0;
 end if;

 select application_id
 into x_application_id
 from fnd_application
 where application_short_name = x_application_short_name;

 if ltrim(rtrim(x_form_name)) is not null then
   select form_id
   into x_form_id
   from fnd_form
   where form_name = x_form_name
   and application_id = x_application_id;
 end if;

 if ltrim(rtrim(x_prev_item_name)) is not null then

  BEGIN
    select form_item_id
    into x_previous_navigation_item_id
    from hr_form_items_b
    where full_item_name = x_prev_item_name
    and form_id = x_form_id
    and application_id = x_application_id;
  EXCEPTION   --2608813 added exception so if item is radio button we do not error
  WHEN TOO_MANY_ROWS THEN
    select form_item_id
    into x_previous_navigation_item_id
    from hr_form_items_b
    where full_item_name = x_prev_item_name
    and form_id = x_form_id
    and application_id = x_application_id
    and radio_button_name is not null
    and rownum = 1;
  END;

 end if;

 if ltrim(rtrim(x_next_item_name)) is not null then

  BEGIN
    select form_item_id
    into x_next_navigation_item_id
    from hr_form_items_b
    where full_item_name = x_next_item_name
    and form_id = x_form_id
    and application_id = x_application_id;
  EXCEPTION   --2608813 added exception so if item is radio button we do not error
  WHEN TOO_MANY_ROWS THEN
    select form_item_id
    into x_next_navigation_item_id
    from hr_form_items_b
    where full_item_name = x_next_item_name
    and form_id = x_form_id
    and application_id = x_application_id
    and radio_button_name is not null
    and rownum = 1;
  END;
 end if;

 if ltrim(rtrim(x_info_formula_name)) is not null then

   if ltrim(rtrim(x_info_business_group)) is not null then

     select business_group_id
     into x_business_group_id
     from per_business_groups
     where name = x_info_business_group;

   end if;

   if rtrim(ltrim(x_info_territories)) is not null then

     select territory_code
     into x_legislation_code
     from fnd_territories_vl
     where territory_short_name = x_info_territories;

   end if;

   if ltrim(rtrim(x_info_formula_type)) is not null then

     select formula_type_id
     into x_formula_type_id
     from ff_formula_types
     where formula_type_name = x_info_formula_type;

   end if;

   select formula_id
   into x_information_formula_id
   from ff_formulas_f
   where nvl(business_group_id,hr_api.g_number) = nvl(x_business_group_id,hr_api.g_number)
   and nvl(legislation_code,hr_api.g_varchar2) = nvl(x_legislation_code,hr_api.g_varchar2)
   and formula_type_id = x_formula_type_id
   and formula_name = x_info_formula_name;

   if ltrim(rtrim(x_full_item_name_ip1)) is not null then

     BEGIN
       select form_item_id
       into x_information_param_item_id1
       from hr_form_items_b
       where full_item_name = x_full_item_name_ip1
       and form_id = x_form_id
       and application_id = x_application_id;
     EXCEPTION   --2608813 added exception so if item is radio button we do not error
     WHEN TOO_MANY_ROWS THEN
       select form_item_id
       into x_information_param_item_id1
       from hr_form_items_b
       where full_item_name = x_full_item_name_ip1
       and form_id = x_form_id
       and application_id = x_application_id
       and radio_button_name is not null
       and rownum = 1;
     END;

   end if;

   if ltrim(rtrim(x_full_item_name_ip2)) is not null then

     BEGIN
       select form_item_id
       into x_information_param_item_id2
       from hr_form_items_b
       where full_item_name = x_full_item_name_ip2
       and form_id = x_form_id
       and application_id = x_application_id;
     EXCEPTION   --2608813 added exception so if item is radio button we do not error
     WHEN TOO_MANY_ROWS THEN
       select form_item_id
       into x_information_param_item_id2
       from hr_form_items_b
       where full_item_name = x_full_item_name_ip2
       and form_id = x_form_id
       and application_id = x_application_id
       and radio_button_name is not null
       and rownum = 1;
     END;

   end if;

   if ltrim(rtrim(x_full_item_name_ip3)) is not null then

     BEGIN
       select form_item_id
       into x_information_param_item_id3
       from hr_form_items_b
       where full_item_name = x_full_item_name_ip3
       and form_id = x_form_id
       and application_id = x_application_id;
     EXCEPTION   --2608813 added exception so if item is radio button we do not error
     WHEN TOO_MANY_ROWS THEN
       select form_item_id
       into x_information_param_item_id3
       from hr_form_items_b
       where full_item_name = x_full_item_name_ip3
       and form_id = x_form_id
       and application_id = x_application_id
       and radio_button_name is not null
       and rownum = 1;
     END;

   end if;

   if ltrim(rtrim(x_full_item_name_ip4)) is not null then

     BEGIN
       select form_item_id
       into x_information_param_item_id4
       from hr_form_items_b
       where full_item_name = x_full_item_name_ip4
       and form_id = x_form_id
       and application_id = x_application_id;
     EXCEPTION   --2608813 added exception so if item is radio button we do not error
     WHEN TOO_MANY_ROWS THEN
       select form_item_id
       into x_information_param_item_id4
       from hr_form_items_b
       where full_item_name = x_full_item_name_ip4
       and form_id = x_form_id
       and application_id = x_application_id
       and radio_button_name is not null
       and rownum = 1;
     END;

   end if;

   if ltrim(rtrim(x_full_item_name_ip5)) is not null then

     BEGIN
       select form_item_id
       into x_information_param_item_id5
       from hr_form_items_b
       where full_item_name = x_full_item_name_ip5
       and form_id = x_form_id
       and application_id = x_application_id;
     EXCEPTION   --2608813 added exception so if item is radio button we do not error
     WHEN TOO_MANY_ROWS THEN
       select form_item_id
       into x_information_param_item_id5
       from hr_form_items_b
       where full_item_name = x_full_item_name_ip5
       and form_id = x_form_id
       and application_id = x_application_id
       and radio_button_name is not null
       and rownum = 1;
     END;

   end if;

 end if;

 if ltrim(rtrim(x_val_formula_name)) is not null then

   if ltrim(rtrim(x_val_business_group)) is not null then

     select business_group_id
     into x_business_group_id
     from per_business_groups
     where name = x_val_business_group;

   else

     x_business_group_id := null;

   end if;

   if ltrim(rtrim(x_val_territories)) is not null then

     select territory_code
     into x_legislation_code
     from fnd_territories_vl
     where territory_short_name = x_val_territories;

   else

     x_legislation_code := null;

   end if;

   if ltrim(rtrim(x_val_formula_type)) is not null then

     select formula_type_id
     into x_formula_type_id
     from ff_formula_types
     where formula_type_name = x_val_formula_type;

   else

     x_formula_type_id := null;

   end if;

   select formula_id
   into x_validation_formula_id
   from ff_formulas_f
   where nvl(business_group_id,hr_api.g_number) = nvl(x_business_group_id,hr_api.g_number)
   and nvl(legislation_code,hr_api.g_varchar2) = nvl(x_legislation_code,hr_api.g_varchar2)
   and formula_type_id = x_formula_type_id
   and formula_name = x_val_formula_name;

   if ltrim(rtrim(x_full_item_name_vp1)) is not null then

     BEGIN
       select form_item_id
       into x_validation_param_item_id1
       from hr_form_items_b
       where full_item_name = x_full_item_name_vp1
       and form_id = x_form_id
       and application_id = x_application_id;
    EXCEPTION
    WHEN TOO_MANY_ROWS THEN
       select form_item_id
       into x_validation_param_item_id1
       from hr_form_items_b
       where full_item_name = x_full_item_name_vp1
       and form_id = x_form_id
       and application_id = x_application_id
       and radio_button_name is not null
       and rownum = 1;
    END;

   end if;

   if ltrim(rtrim(x_full_item_name_vp2)) is not null then

     BEGIN
       select form_item_id
       into x_validation_param_item_id2
       from hr_form_items_b
       where full_item_name = x_full_item_name_vp2
       and form_id = x_form_id
       and application_id = x_application_id;
    EXCEPTION
    WHEN TOO_MANY_ROWS THEN
       select form_item_id
       into x_validation_param_item_id2
       from hr_form_items_b
       where full_item_name = x_full_item_name_vp2
       and form_id = x_form_id
       and application_id = x_application_id
       and radio_button_name is not null
       and rownum = 1;
    END;

   end if;

   if ltrim(rtrim(x_full_item_name_vp3)) is not null then

     BEGIN
       select form_item_id
       into x_validation_param_item_id3
       from hr_form_items_b
       where full_item_name = x_full_item_name_vp3
       and form_id = x_form_id
       and application_id = x_application_id;
    EXCEPTION
    WHEN TOO_MANY_ROWS THEN
       select form_item_id
       into x_validation_param_item_id3
       from hr_form_items_b
       where full_item_name = x_full_item_name_vp3
       and form_id = x_form_id
       and application_id = x_application_id
       and radio_button_name is not null
       and rownum = 1;
    END;

   end if;

   if ltrim(rtrim(x_full_item_name_vp4)) is not null then

     BEGIN
       select form_item_id
       into x_validation_param_item_id4
       from hr_form_items_b
       where full_item_name = x_full_item_name_vp4
       and form_id = x_form_id
       and application_id = x_application_id;
    EXCEPTION
    WHEN TOO_MANY_ROWS THEN
       select form_item_id
       into x_validation_param_item_id4
       from hr_form_items_b
       where full_item_name = x_full_item_name_vp4
       and form_id = x_form_id
       and application_id = x_application_id
       and radio_button_name is not null
       and rownum = 1;
    END;

   end if;

   if ltrim(rtrim(x_full_item_name_vp5)) is not null then

     BEGIN
       select form_item_id
       into x_validation_param_item_id5
       from hr_form_items_b
       where full_item_name = x_full_item_name_vp5
       and form_id = x_form_id
       and application_id = x_application_id;
    EXCEPTION
    WHEN TOO_MANY_ROWS THEN
       select form_item_id
       into x_validation_param_item_id5
       from hr_form_items_b
       where full_item_name = x_full_item_name_vp5
       and form_id = x_form_id
       and application_id = x_application_id
       and radio_button_name is not null
       and rownum = 1;
    END;

   end if;

 end if;

 select form_item_id
 into x_form_item_id
 from hr_form_items_b
 where full_item_name = x_full_item_name
 and application_id = x_application_id
 and form_id = x_form_id
 and (  radio_button_name = x_radio_button_name
     or (radio_button_name is null and x_radio_button_name is null) );

 if ltrim(rtrim(x_template_name)) is not null then

   select hti.template_item_id
   into x_template_item_id
   from hr_form_templates_b hft
        ,hr_template_items_b hti
   where hti.form_item_id = x_form_item_id
   and hti.form_template_id = hft.form_template_id
   and hft.form_id = x_form_id
   and hft.application_id = x_application_id
   and hft.template_name = x_template_name
   and (  (hft.legislation_code is null and x_territory_short_name is null)
       or (hft.legislation_code = x_territory_short_name) );

 end if;

 if ltrim(rtrim(x_id_flex_structure_code)) is not null then

   select template_item_context_id
   into x_template_item_context_id
   from hr_template_item_contexts_b ticb
        ,hr_item_contexts hic
        ,fnd_id_flex_structures fifs
   where ticb.template_item_id = x_template_item_id
   and ticb.item_context_id = hic.item_context_id
   and nvl(hic.segment1,hr_api.g_varchar2) = nvl(x_segment1,hr_api.g_varchar2)
   and nvl(hic.segment2,hr_api.g_varchar2) = nvl(x_segment2,hr_api.g_varchar2)
   and nvl(hic.segment3,hr_api.g_varchar2) = nvl(x_segment3,hr_api.g_varchar2)
   and nvl(hic.segment4,hr_api.g_varchar2) = nvl(x_segment4,hr_api.g_varchar2)
   and nvl(hic.segment5,hr_api.g_varchar2) = nvl(x_segment5,hr_api.g_varchar2)
   and nvl(hic.segment6,hr_api.g_varchar2) = nvl(x_segment6,hr_api.g_varchar2)
   and nvl(hic.segment7,hr_api.g_varchar2) = nvl(x_segment7,hr_api.g_varchar2)
   and nvl(hic.segment8,hr_api.g_varchar2) = nvl(x_segment8,hr_api.g_varchar2)
   and nvl(hic.segment9,hr_api.g_varchar2) = nvl(x_segment9,hr_api.g_varchar2)
   and nvl(hic.segment10,hr_api.g_varchar2) = nvl(x_segment10,hr_api.g_varchar2)
   and nvl(hic.segment11,hr_api.g_varchar2) = nvl(x_segment11,hr_api.g_varchar2)
   and nvl(hic.segment12,hr_api.g_varchar2) = nvl(x_segment12,hr_api.g_varchar2)
   and nvl(hic.segment13,hr_api.g_varchar2) = nvl(x_segment13,hr_api.g_varchar2)
   and nvl(hic.segment14,hr_api.g_varchar2) = nvl(x_segment14,hr_api.g_varchar2)
   and nvl(hic.segment15,hr_api.g_varchar2) = nvl(x_segment15,hr_api.g_varchar2)
   and nvl(hic.segment16,hr_api.g_varchar2) = nvl(x_segment16,hr_api.g_varchar2)
   and nvl(hic.segment17,hr_api.g_varchar2) = nvl(x_segment17,hr_api.g_varchar2)
   and nvl(hic.segment18,hr_api.g_varchar2) = nvl(x_segment18,hr_api.g_varchar2)
   and nvl(hic.segment19,hr_api.g_varchar2) = nvl(x_segment19,hr_api.g_varchar2)
   and nvl(hic.segment20,hr_api.g_varchar2) = nvl(x_segment20,hr_api.g_varchar2)
   and nvl(hic.segment21,hr_api.g_varchar2) = nvl(x_segment21,hr_api.g_varchar2)
   and nvl(hic.segment22,hr_api.g_varchar2) = nvl(x_segment22,hr_api.g_varchar2)
   and nvl(hic.segment23,hr_api.g_varchar2) = nvl(x_segment23,hr_api.g_varchar2)
   and nvl(hic.segment24,hr_api.g_varchar2) = nvl(x_segment24,hr_api.g_varchar2)
   and nvl(hic.segment25,hr_api.g_varchar2) = nvl(x_segment25,hr_api.g_varchar2)
   and nvl(hic.segment26,hr_api.g_varchar2) = nvl(x_segment26,hr_api.g_varchar2)
   and nvl(hic.segment27,hr_api.g_varchar2) = nvl(x_segment27,hr_api.g_varchar2)
   and nvl(hic.segment28,hr_api.g_varchar2) = nvl(x_segment28,hr_api.g_varchar2)
   and nvl(hic.segment29,hr_api.g_varchar2) = nvl(x_segment29,hr_api.g_varchar2)
   and nvl(hic.segment30,hr_api.g_varchar2) = nvl(x_segment30,hr_api.g_varchar2)
   and hic.id_flex_num = fifs.id_flex_num
   and fifs.application_id = x_application_id
   and fifs.id_flex_structure_code = x_id_flex_structure_code
   and fifs.id_flex_code = x_id_flex_code;

 end if;

begin
 if ltrim(rtrim(x_id_flex_structure_code)) is not null then
   x_form_item_id := null;
   x_template_item_id := null;
     select item_property_id
     into x_item_property_id
     from hr_item_properties_b
     where template_item_context_id=x_template_item_context_id;
 else
   x_template_item_context_id := null;
   if x_template_name is null then
      x_template_item_id := null;
        select item_property_id
        into x_item_property_id
        from hr_item_properties_b
        where form_item_id=x_form_item_id;
   else
      x_form_item_id := null;
        select item_property_id
        into x_item_property_id
        from hr_item_properties_b
        where template_item_id=x_template_item_id;
   end if;
 end if;

/* adhunter mar-2002, bug 2183600
removed for performance reasons, replaced by separate sql stmts immediately above

 begin
   select item_property_id
   into x_item_property_id
   from hr_item_properties_b
   where nvl(form_item_id,hr_api.g_number) =  nvl(x_form_item_id,hr_api.g_number)
   and nvl(template_item_id,hr_api.g_number) = nvl(x_template_item_id,hr_api.g_number)
   and nvl(template_item_context_id,hr_api.g_number) = nvl(x_template_item_context_id,hr_api.g_number);
*/

 exception
   when no_data_found then
     select hr_item_properties_b_s.nextval
     into x_item_property_id
     from dual;
  end;

  begin
 -- Translate owner to file_last_updated_by
 f_luby := fnd_load_util.owner_id(X_OWNER);
 -- Translate char last_update_date to date
 f_ludate := nvl(to_date(X_LAST_UPDATE_DATE, 'YYYY/MM/DD'), sysdate);

  select LAST_UPDATED_BY, LAST_UPDATE_DATE
  into db_luby, db_ludate
  from HR_ITEM_PROPERTIES_TL
  where item_property_id = x_item_property_id
  and LANGUAGE=userenv('LANG');

 if (fnd_load_util.upload_test(f_luby, f_ludate, db_luby,
                                        db_ludate,X_CUSTOM_MODE)) then
    UPDATE_COPIES (
      X_ITEM_PROPERTY_ID,
      X_FORM_ITEM_ID,
      X_TEMPLATE_ITEM_ID,
      X_TEMPLATE_ITEM_CONTEXT_ID,
      X_ALIGNMENT,
      X_BEVEL,
      X_CASE_RESTRICTION,
      X_ENABLED,
      X_FORMAT_MASK,
      X_HEIGHT,
      X_INFORMATION_FORMULA_ID,
      X_INFORMATION_PARAM_ITEM_ID1,
      X_INFORMATION_PARAM_ITEM_ID2,
      X_INFORMATION_PARAM_ITEM_ID3,
      X_INFORMATION_PARAM_ITEM_ID4,
      X_INFORMATION_PARAM_ITEM_ID5,
      X_INSERT_ALLOWED,
      X_NEXT_NAVIGATION_ITEM_ID,
      X_PREVIOUS_NAVIGATION_ITEM_ID,
      X_PROMPT_ALIGNMENT_OFFSET,
      X_PROMPT_DISPLAY_STYLE,
      X_PROMPT_EDGE,
      X_PROMPT_EDGE_OFFSET,
      X_PROMPT_EDGE_ALIGNMENT,
      X_PROMPT_TEXT_ALIGNMENT,
      X_QUERY_ALLOWED,
      X_REQUIRED,
      X_UPDATE_ALLOWED,
      X_VALIDATION_FORMULA_ID,
      X_VALIDATION_PARAM_ITEM_ID1,
      X_VALIDATION_PARAM_ITEM_ID2,
      X_VALIDATION_PARAM_ITEM_ID3,
      X_VALIDATION_PARAM_ITEM_ID4,
      X_VALIDATION_PARAM_ITEM_ID5,
      X_VISIBLE,
      X_WIDTH,
      X_X_POSITION,
      X_Y_POSITION,
      X_DEFAULT_VALUE ,
      X_INFORMATION_PROMPT,
      X_LABEL,
      X_PROMPT_TEXT,
      X_TOOLTIP_TEXT,
      X_INFORMATION_CATEGORY,
      X_INFORMATION1,
      X_INFORMATION2,
      X_INFORMATION3,
      X_INFORMATION4,
      X_INFORMATION5,
      X_INFORMATION6,
      X_INFORMATION7,
      X_INFORMATION8,
      X_INFORMATION9,
      X_INFORMATION10,
      X_INFORMATION11,
      X_INFORMATION12,
      X_INFORMATION13,
      X_INFORMATION14,
      X_INFORMATION15,
      X_INFORMATION16,
      X_INFORMATION17,
      X_INFORMATION18,
      X_INFORMATION19,
      X_INFORMATION20,
      X_INFORMATION21,
      X_INFORMATION22,
      X_INFORMATION23,
      X_INFORMATION24,
      X_INFORMATION25,
      X_INFORMATION26,
      X_INFORMATION27,
      X_INFORMATION28,
      X_INFORMATION29,
      X_INFORMATION30,
      f_ludate,
      f_luby,
      0
      );

    UPDATE_ROW (
       X_ITEM_PROPERTY_ID,
       to_number(X_UPDATE_ALLOWED),
       X_INFORMATION20,
       X_INFORMATION21,
       X_INFORMATION22,
       X_INFORMATION23,
       X_INFORMATION24,
       X_INFORMATION25,
       X_INFORMATION26,
       X_INFORMATION27,
       X_INFORMATION28,
       X_INFORMATION29,
       X_INFORMATION30,
       X_NEXT_NAVIGATION_ITEM_ID,
       X_PREVIOUS_NAVIGATION_ITEM_ID,
       to_number(X_PROMPT_TEXT_ALIGNMENT),
       to_number(X_QUERY_ALLOWED),
       to_number(X_REQUIRED),
       to_number(X_WIDTH),
       to_number(X_X_POSITION),
       to_number(X_Y_POSITION),
       X_VALIDATION_PARAM_ITEM_ID3,
       X_VALIDATION_PARAM_ITEM_ID4,
       X_VALIDATION_PARAM_ITEM_ID1,
       to_number(X_PROMPT_EDGE_OFFSET),
       X_INFORMATION_CATEGORY,
       X_INFORMATION1,
       X_INFORMATION2,
       X_INFORMATION3,
       X_INFORMATION4,
       X_INFORMATION5,
       X_INFORMATION6,
       X_INFORMATION7,
       X_INFORMATION8,
       X_INFORMATION9,
       X_INFORMATION10,
       X_INFORMATION11,
       X_INFORMATION12,
       X_INFORMATION13,
       X_INFORMATION14,
       X_INFORMATION15,
       X_FORM_ITEM_ID,
       X_TEMPLATE_ITEM_ID,
       X_TEMPLATE_ITEM_CONTEXT_ID,
       to_number(X_ALIGNMENT),
       to_number(X_BEVEL),
       to_number(X_CASE_RESTRICTION),
       X_DEFAULT_VALUE,
       to_number(X_ENABLED),
       X_FORMAT_MASK,
       to_number(X_HEIGHT),
       X_INFORMATION_FORMULA_ID,
       X_INFORMATION_PARAM_ITEM_ID1,
       X_INFORMATION_PARAM_ITEM_ID2,
       to_number(X_PROMPT_EDGE_ALIGNMENT),
       X_VALIDATION_PARAM_ITEM_ID5,
       X_VALIDATION_FORMULA_ID,
       X_INFORMATION16,
       X_INFORMATION17,
       X_INFORMATION18,
       X_INFORMATION19,
       X_VALIDATION_PARAM_ITEM_ID2,
       to_number(X_VISIBLE),
       X_INFORMATION_PARAM_ITEM_ID3,
       X_INFORMATION_PARAM_ITEM_ID4,
       X_INFORMATION_PARAM_ITEM_ID5,
       to_number(X_INSERT_ALLOWED),
       to_number(X_PROMPT_ALIGNMENT_OFFSET),
       to_number(X_PROMPT_DISPLAY_STYLE),
       to_number(X_PROMPT_EDGE),
       X_INFORMATION_PROMPT,
       X_LABEL,
       X_PROMPT_TEXT,
       X_TOOLTIP_TEXT,
       f_ludate,
       f_luby,
       0
     );
 END IF;
  exception
    when no_data_found then
      INSERT_ROW (
         X_ROWID,
         X_ITEM_PROPERTY_ID,
         to_number(X_UPDATE_ALLOWED),
         X_INFORMATION20,
         X_INFORMATION21,
         X_INFORMATION22,
         X_INFORMATION23,
         X_INFORMATION24,
         X_INFORMATION25,
         X_INFORMATION26,
         X_INFORMATION27,
         X_INFORMATION28,
         X_INFORMATION29,
         X_INFORMATION30,
         X_NEXT_NAVIGATION_ITEM_ID,
         X_PREVIOUS_NAVIGATION_ITEM_ID,
         to_number(X_PROMPT_TEXT_ALIGNMENT),
         to_number(X_QUERY_ALLOWED),
         to_number(X_REQUIRED),
         to_number(X_WIDTH),
         to_number(X_X_POSITION),
         to_number(X_Y_POSITION),
         X_VALIDATION_PARAM_ITEM_ID3,
         X_VALIDATION_PARAM_ITEM_ID4,
         X_VALIDATION_PARAM_ITEM_ID1,
         to_number(X_PROMPT_EDGE_OFFSET),
         X_INFORMATION_CATEGORY,
         X_INFORMATION1,
         X_INFORMATION2,
         X_INFORMATION3,
         X_INFORMATION4,
         X_INFORMATION5,
         X_INFORMATION6,
         X_INFORMATION7,
         X_INFORMATION8,
         X_INFORMATION9,
         X_INFORMATION10,
         X_INFORMATION11,
         X_INFORMATION12,
         X_INFORMATION13,
         X_INFORMATION14,
         X_INFORMATION15,
         X_FORM_ITEM_ID,
         X_TEMPLATE_ITEM_ID,
         X_TEMPLATE_ITEM_CONTEXT_ID,
         to_number(X_ALIGNMENT),
         to_number(X_BEVEL),
         to_number(X_CASE_RESTRICTION),
         X_DEFAULT_VALUE,
         to_number(X_ENABLED),
         X_FORMAT_MASK,
         to_number(X_HEIGHT),
         X_INFORMATION_FORMULA_ID,
         X_INFORMATION_PARAM_ITEM_ID1,
         X_INFORMATION_PARAM_ITEM_ID2,
         to_number(X_PROMPT_EDGE_ALIGNMENT),
         X_VALIDATION_PARAM_ITEM_ID5,
         X_VALIDATION_FORMULA_ID,
         X_INFORMATION16,
         X_INFORMATION17,
         X_INFORMATION18,
         X_INFORMATION19,
         X_VALIDATION_PARAM_ITEM_ID2,
         to_number(X_VISIBLE),
         X_INFORMATION_PARAM_ITEM_ID3,
         X_INFORMATION_PARAM_ITEM_ID4,
         X_INFORMATION_PARAM_ITEM_ID5,
         to_number(X_INSERT_ALLOWED),
         to_number(X_PROMPT_ALIGNMENT_OFFSET),
         to_number(X_PROMPT_DISPLAY_STYLE),
         to_number(X_PROMPT_EDGE),
         X_INFORMATION_PROMPT,
         X_LABEL,
         X_PROMPT_TEXT,
         X_TOOLTIP_TEXT,
         X_CREATION_DATE,
         X_CREATED_BY,
         f_ludate,
         f_luby,
         0
       );
  end;
end LOAD_ROW;
procedure TRANSLATE_ROW (
  X_APPLICATION_SHORT_NAME IN VARCHAR2,
  X_FORM_NAME IN VARCHAR2,
  X_FULL_ITEM_NAME IN VARCHAR2,
  X_RADIO_BUTTON_NAME IN VARCHAR2,
  X_TEMPLATE_NAME IN VARCHAR2,
  X_TERRITORY_SHORT_NAME IN VARCHAR2,
  X_SEGMENT1 IN VARCHAR2,
  X_SEGMENT2 IN VARCHAR2,
  X_SEGMENT3 IN VARCHAR2,
  X_SEGMENT4 IN VARCHAR2,
  X_SEGMENT5 IN VARCHAR2,
  X_SEGMENT6 IN VARCHAR2,
  X_SEGMENT7 IN VARCHAR2,
  X_SEGMENT8 IN VARCHAR2,
  X_SEGMENT9 IN VARCHAR2,
  X_SEGMENT10 IN VARCHAR2,
  X_SEGMENT11 IN VARCHAR2,
  X_SEGMENT12 IN VARCHAR2,
  X_SEGMENT13 IN VARCHAR2,
  X_SEGMENT14 IN VARCHAR2,
  X_SEGMENT15 IN VARCHAR2,
  X_SEGMENT16 IN VARCHAR2,
  X_SEGMENT17 IN VARCHAR2,
  X_SEGMENT18 IN VARCHAR2,
  X_SEGMENT19 IN VARCHAR2,
  X_SEGMENT20 IN VARCHAR2,
  X_SEGMENT21 IN VARCHAR2,
  X_SEGMENT22 IN VARCHAR2,
  X_SEGMENT23 IN VARCHAR2,
  X_SEGMENT24 IN VARCHAR2,
  X_SEGMENT25 IN VARCHAR2,
  X_SEGMENT26 IN VARCHAR2,
  X_SEGMENT27 IN VARCHAR2,
  X_SEGMENT28 IN VARCHAR2,
  X_SEGMENT29 IN VARCHAR2,
  X_SEGMENT30 IN VARCHAR2,
  X_ID_FLEX_STRUCTURE_CODE IN VARCHAR2,
  X_ID_FLEX_CODE IN VARCHAR2,
  X_OWNER IN VARCHAR2,
  X_DEFAULT_VALUE IN VARCHAR2,
  X_INFORMATION_PROMPT IN VARCHAR2,
  X_LABEL IN VARCHAR2,
  X_PROMPT_TEXT IN VARCHAR2,
  X_TOOLTIP_TEXT IN VARCHAR2,
  X_LAST_UPDATE_DATE in VARCHAR2,
  X_CUSTOM_MODE IN VARCHAR2 default null
) is
  X_CREATION_DATE DATE;
  X_CREATED_BY NUMBER;
--  X_LAST_UPDATE_DATE DATE;
  X_LAST_UPDATED_BY NUMBER;
  X_LAST_UPDATE_LOGIN NUMBER;
  X_FORM_ID NUMBER;
  X_APPLICATION_ID NUMBER;
  X_FORM_ITEM_ID NUMBER;
  X_TEMPLATE_ITEM_ID NUMBER;
  X_TEMPLATE_ITEM_CONTEXT_ID NUMBER;
  X_ITEM_PROPERTY_ID NUMBER;
  f_luby    number;  -- entity owner in file
  f_ludate  date;    -- entity update date in file
  db_luby   number;  -- entity owner in db
  db_ludate date;    -- entity update date in db
begin
/*
  OWNER_TO_WHO (
    X_OWNER,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN
  );
 */
  --2781560 enclose the select in the IF clause
  IF (   g_application_short_name is not null
     AND g_application_short_name = x_application_short_name  ) THEN
                      --previous run fetched the same value so return global variable
    null; --x_application_id := g_application_id;
  ELSE
                      --identifier is different from last call or this is the first call
    select application_id
    into g_application_id --x_application_id
    from fnd_application
    where application_short_name = x_application_short_name;
    --
    --g_application_id := x_application_id;
    g_application_short_name := x_application_short_name;
    --
  END IF;

  --2781560 enclose the select in the IF clause
  IF (  g_form_name is not null
     AND g_form_name = x_form_name  ) THEN
               --previous run fetched the same value so return global variable
    null;  --x_form_id := g_form_id;
  ELSE
               --identifier is different from last call or this is the first call
    select form_id
    into g_form_id --x_form_id
    from fnd_form
    where form_name = x_form_name
    and application_id = g_application_id;  --x_application_id;
    --
    --g_form_id := x_form_id;
    g_form_name := x_form_name;
    --
  END IF;

 select form_item_id
 into x_form_item_id
 from hr_form_items_b
 where full_item_name = x_full_item_name
 and application_id = g_application_id  --x_application_id
 and form_id = g_form_id --x_form_id
 and (  radio_button_name = x_radio_button_name
     or (radio_button_name is null and x_radio_button_name is null) );

/*
2781560: replace this clause with the one below

 if ltrim(rtrim(x_template_name)) is not null then

   select hti.template_item_id
   into x_template_item_id
   from hr_form_templates_b hft
        ,hr_template_items_b hti
   where hti.form_item_id = x_form_item_id
   and hti.form_template_id = hft.form_template_id
   and hft.form_id = x_form_id
   and hft.application_id = x_application_id
   and hft.template_name = x_template_name
   and (  (hft.legislation_code is null and x_territory_short_name is null)
       or (hft.legislation_code = x_territory_short_name) );

 end if;
*/

--rewrote above clause as follows for 2781560

 IF x_template_name is not null THEN
   --
   IF (   g_template_name is not null
      AND  g_template_name = x_template_name
      AND (  (g_legislation_code is null AND x_territory_short_name is null)
          OR (g_legislation_code is not null AND x_territory_short_name is not null
              AND g_legislation_code = x_territory_short_name)))
   THEN    --identifiers same as last call, do nothing
      null;
   ELSE    --identifiers different, recalculate global variables
     select hft.form_template_id
     into   g_form_template_id
     from hr_form_templates_b hft
     where hft.form_id = g_form_id  --x_form_id
       and hft.application_id = g_application_id  --x_application_id
       and hft.template_name = x_template_name
       and (  (hft.legislation_code is null and x_territory_short_name is null)
           or (hft.legislation_code = x_territory_short_name) );
     --
     g_legislation_code := x_territory_short_name;
     g_template_name := x_template_name;
     --
   END IF;
   --
   select hti.template_item_id
   into x_template_item_id
   from hr_template_items_b hti
   where hti.form_item_id = x_form_item_id
   and hti.form_template_id = g_form_template_id;
   --

    if ltrim(rtrim(x_id_flex_structure_code)) is not null then

   -- segments can be null need this check
      select template_item_context_id
      into x_template_item_context_id
      from hr_template_item_contexts_b ticb
	   ,hr_item_contexts hic
	   ,fnd_id_flex_structures fifs
      where ticb.template_item_id = x_template_item_id
      and ticb.item_context_id = hic.item_context_id
      and nvl(hic.segment1,hr_api.g_varchar2) = nvl(x_segment1,hr_api.g_varchar2)
      and nvl(hic.segment2,hr_api.g_varchar2) = nvl(x_segment2,hr_api.g_varchar2)
      and nvl(hic.segment3,hr_api.g_varchar2) = nvl(x_segment3,hr_api.g_varchar2)
      and nvl(hic.segment4,hr_api.g_varchar2) = nvl(x_segment4,hr_api.g_varchar2)
      and nvl(hic.segment5,hr_api.g_varchar2) = nvl(x_segment5,hr_api.g_varchar2)
      and nvl(hic.segment6,hr_api.g_varchar2) = nvl(x_segment6,hr_api.g_varchar2)
      and nvl(hic.segment7,hr_api.g_varchar2) = nvl(x_segment7,hr_api.g_varchar2)
      and nvl(hic.segment8,hr_api.g_varchar2) = nvl(x_segment8,hr_api.g_varchar2)
      and nvl(hic.segment9,hr_api.g_varchar2) = nvl(x_segment9,hr_api.g_varchar2)
      and nvl(hic.segment10,hr_api.g_varchar2) = nvl(x_segment10,hr_api.g_varchar2)
      and nvl(hic.segment11,hr_api.g_varchar2) = nvl(x_segment11,hr_api.g_varchar2)
      and nvl(hic.segment12,hr_api.g_varchar2) = nvl(x_segment12,hr_api.g_varchar2)
      and nvl(hic.segment13,hr_api.g_varchar2) = nvl(x_segment13,hr_api.g_varchar2)
      and nvl(hic.segment14,hr_api.g_varchar2) = nvl(x_segment14,hr_api.g_varchar2)
      and nvl(hic.segment15,hr_api.g_varchar2) = nvl(x_segment15,hr_api.g_varchar2)
      and nvl(hic.segment16,hr_api.g_varchar2) = nvl(x_segment16,hr_api.g_varchar2)
      and nvl(hic.segment17,hr_api.g_varchar2) = nvl(x_segment17,hr_api.g_varchar2)
      and nvl(hic.segment18,hr_api.g_varchar2) = nvl(x_segment18,hr_api.g_varchar2)
      and nvl(hic.segment19,hr_api.g_varchar2) = nvl(x_segment19,hr_api.g_varchar2)
      and nvl(hic.segment20,hr_api.g_varchar2) = nvl(x_segment20,hr_api.g_varchar2)
      and nvl(hic.segment21,hr_api.g_varchar2) = nvl(x_segment21,hr_api.g_varchar2)
      and nvl(hic.segment22,hr_api.g_varchar2) = nvl(x_segment22,hr_api.g_varchar2)
      and nvl(hic.segment23,hr_api.g_varchar2) = nvl(x_segment23,hr_api.g_varchar2)
      and nvl(hic.segment24,hr_api.g_varchar2) = nvl(x_segment24,hr_api.g_varchar2)
      and nvl(hic.segment25,hr_api.g_varchar2) = nvl(x_segment25,hr_api.g_varchar2)
      and nvl(hic.segment26,hr_api.g_varchar2) = nvl(x_segment26,hr_api.g_varchar2)
      and nvl(hic.segment27,hr_api.g_varchar2) = nvl(x_segment27,hr_api.g_varchar2)
      and nvl(hic.segment28,hr_api.g_varchar2) = nvl(x_segment28,hr_api.g_varchar2)
      and nvl(hic.segment29,hr_api.g_varchar2) = nvl(x_segment29,hr_api.g_varchar2)
      and nvl(hic.segment30,hr_api.g_varchar2) = nvl(x_segment30,hr_api.g_varchar2)
      and hic.id_flex_num = fifs.id_flex_num
      and fifs.application_id = g_application_id --x_application_id
      and fifs.id_flex_structure_code = x_id_flex_structure_code
      and fifs.id_flex_code = x_id_flex_code;
      --
      x_form_item_id := null;
      x_template_item_id := null;
	select item_property_id
	into x_item_property_id
	from hr_item_properties_b
	where template_item_context_id=x_template_item_context_id;
    else                                     --x_id_flex_structure_code is null
      x_template_item_context_id := null;
      if x_template_name is null then
	 x_template_item_id := null;
	   select item_property_id
	   into x_item_property_id
	   from hr_item_properties_b
	   where form_item_id=x_form_item_id;
      else
	 x_form_item_id := null;
	   select item_property_id
	   into x_item_property_id
	   from hr_item_properties_b
	   where template_item_id=x_template_item_id;
      end if;
    end if;  --endif x_id_flex_structure_code is not null

 END IF;  --endif x_template_name is not null

--end of 2781560 rewrite


/* removed for performance reasons, replaced by separate sql stmts immediately above
 select item_property_id
 into x_item_property_id
 from hr_item_properties_b
 where nvl(form_item_id,hr_api.g_number) =  nvl(x_form_item_id,hr_api.g_number)
 and nvl(template_item_id,hr_api.g_number) = nvl(x_template_item_id,hr_api.g_number)
 and nvl(template_item_context_id,hr_api.g_number) = nvl(x_template_item_context_id,hr_api.g_number);
*/

   -- Translate owner to file_last_updated_by
 f_luby := fnd_load_util.owner_id(X_OWNER);
    -- Translate char last_update_date to date
 f_ludate := nvl(to_date(X_LAST_UPDATE_DATE, 'YYYY/MM/DD'), sysdate);

  select LAST_UPDATED_BY, LAST_UPDATE_DATE
  into db_luby, db_ludate
  from HR_ITEM_PROPERTIES_TL
  where item_property_id = x_item_property_id
  and LANGUAGE=userenv('LANG');

  if (fnd_load_util.upload_test(f_luby, f_ludate, db_luby,
                                db_ludate,X_CUSTOM_MODE)) then

     update HR_ITEM_PROPERTIES_TL set
      DEFAULT_VALUE = X_DEFAULT_VALUE,
      INFORMATION_PROMPT = X_INFORMATION_PROMPT,
      LABEL = X_LABEL,
      PROMPT_TEXT  = X_PROMPT_TEXT,
      TOOLTIP_TEXT = X_TOOLTIP_TEXT,
      LAST_UPDATE_DATE = f_ludate,
      LAST_UPDATED_BY = f_luby,
      LAST_UPDATE_LOGIN = 0,
      SOURCE_LANG = userenv('LANG')
     where userenv('LANG') in (LANGUAGE,SOURCE_LANG)
     and item_property_id = x_item_property_id;

  end if;
  exception
    when no_data_found then
      -- Do not insert missing translations, skip this row
      null;

end TRANSLATE_ROW;

procedure TRANSLATE_ROW (
  X_APPLICATION_SHORT_NAME IN VARCHAR2,
  X_FORM_NAME IN VARCHAR2,
  X_FULL_ITEM_NAME IN VARCHAR2,
  X_RADIO_BUTTON_NAME IN VARCHAR2,
  X_TEMPLATE_NAME IN VARCHAR2,
  X_TERRITORY_SHORT_NAME IN VARCHAR2,
  X_SEGMENT1 IN VARCHAR2,
  X_SEGMENT2 IN VARCHAR2,
  X_SEGMENT3 IN VARCHAR2,
  X_SEGMENT4 IN VARCHAR2,
  X_SEGMENT5 IN VARCHAR2,
  X_SEGMENT6 IN VARCHAR2,
  X_SEGMENT7 IN VARCHAR2,
  X_SEGMENT8 IN VARCHAR2,
  X_SEGMENT9 IN VARCHAR2,
  X_SEGMENT10 IN VARCHAR2,
  X_SEGMENT11 IN VARCHAR2,
  X_SEGMENT12 IN VARCHAR2,
  X_SEGMENT13 IN VARCHAR2,
  X_SEGMENT14 IN VARCHAR2,
  X_SEGMENT15 IN VARCHAR2,
  X_SEGMENT16 IN VARCHAR2,
  X_SEGMENT17 IN VARCHAR2,
  X_SEGMENT18 IN VARCHAR2,
  X_SEGMENT19 IN VARCHAR2,
  X_SEGMENT20 IN VARCHAR2,
  X_SEGMENT21 IN VARCHAR2,
  X_SEGMENT22 IN VARCHAR2,
  X_SEGMENT23 IN VARCHAR2,
  X_SEGMENT24 IN VARCHAR2,
  X_SEGMENT25 IN VARCHAR2,
  X_SEGMENT26 IN VARCHAR2,
  X_SEGMENT27 IN VARCHAR2,
  X_SEGMENT28 IN VARCHAR2,
  X_SEGMENT29 IN VARCHAR2,
  X_SEGMENT30 IN VARCHAR2,
  X_ID_FLEX_STRUCTURE_CODE IN VARCHAR2,
  X_ID_FLEX_CODE IN VARCHAR2,
  X_OWNER IN VARCHAR2,
  X_DEFAULT_VALUE IN VARCHAR2,
  X_INFORMATION_PROMPT IN VARCHAR2,
  X_LABEL IN VARCHAR2,
  X_PROMPT_TEXT IN VARCHAR2,
  X_TOOLTIP_TEXT IN VARCHAR2,
  X_LAST_UPDATE_DATE in date default sysdate,
  X_CUSTOM_MODE IN VARCHAR2 default null
) is
  X_CREATION_DATE DATE;
  X_CREATED_BY NUMBER;
--  X_LAST_UPDATE_DATE DATE;
  X_LAST_UPDATED_BY NUMBER;
  X_LAST_UPDATE_LOGIN NUMBER;
  X_FORM_ID NUMBER;
  X_APPLICATION_ID NUMBER;
  X_FORM_ITEM_ID NUMBER;
  X_TEMPLATE_ITEM_ID NUMBER;
  X_TEMPLATE_ITEM_CONTEXT_ID NUMBER;
  X_ITEM_PROPERTY_ID NUMBER;
  f_luby    number;  -- entity owner in file
  f_ludate  date;    -- entity update date in file
  db_luby   number;  -- entity owner in db
  db_ludate date;    -- entity update date in db
begin
/*
  OWNER_TO_WHO (
    X_OWNER,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN
  );
 */
  --2781560 enclose the select in the IF clause
  IF (   g_application_short_name is not null
     AND g_application_short_name = x_application_short_name  ) THEN
                      --previous run fetched the same value so return global variable
    null; --x_application_id := g_application_id;
  ELSE
                      --identifier is different from last call or this is the first call
    select application_id
    into g_application_id --x_application_id
    from fnd_application
    where application_short_name = x_application_short_name;
    --
    --g_application_id := x_application_id;
    g_application_short_name := x_application_short_name;
    --
  END IF;

  --2781560 enclose the select in the IF clause
  IF (  g_form_name is not null
     AND g_form_name = x_form_name  ) THEN
               --previous run fetched the same value so return global variable
    null;  --x_form_id := g_form_id;
  ELSE
               --identifier is different from last call or this is the first call
    select form_id
    into g_form_id --x_form_id
    from fnd_form
    where form_name = x_form_name
    and application_id = g_application_id;  --x_application_id;
    --
    --g_form_id := x_form_id;
    g_form_name := x_form_name;
    --
  END IF;

 select form_item_id
 into x_form_item_id
 from hr_form_items_b
 where full_item_name = x_full_item_name
 and application_id = g_application_id  --x_application_id
 and form_id = g_form_id --x_form_id
 and (  radio_button_name = x_radio_button_name
     or (radio_button_name is null and x_radio_button_name is null) );

/*
2781560: replace this clause with the one below

 if ltrim(rtrim(x_template_name)) is not null then

   select hti.template_item_id
   into x_template_item_id
   from hr_form_templates_b hft
        ,hr_template_items_b hti
   where hti.form_item_id = x_form_item_id
   and hti.form_template_id = hft.form_template_id
   and hft.form_id = x_form_id
   and hft.application_id = x_application_id
   and hft.template_name = x_template_name
   and (  (hft.legislation_code is null and x_territory_short_name is null)
       or (hft.legislation_code = x_territory_short_name) );

 end if;
*/

--rewrote above clause as follows for 2781560

 IF x_template_name is not null THEN
   --
   IF (   g_template_name is not null
      AND  g_template_name = x_template_name
      AND (  (g_legislation_code is null AND x_territory_short_name is null)
          OR (g_legislation_code is not null AND x_territory_short_name is not null
              AND g_legislation_code = x_territory_short_name)))
   THEN    --identifiers same as last call, do nothing
      null;
   ELSE    --identifiers different, recalculate global variables
     select hft.form_template_id
     into   g_form_template_id
     from hr_form_templates_b hft
     where hft.form_id = g_form_id  --x_form_id
       and hft.application_id = g_application_id  --x_application_id
       and hft.template_name = x_template_name
       and (  (hft.legislation_code is null and x_territory_short_name is null)
           or (hft.legislation_code = x_territory_short_name) );
     --
     g_legislation_code := x_territory_short_name;
     g_template_name := x_template_name;
     --
   END IF;
   --
   select hti.template_item_id
   into x_template_item_id
   from hr_template_items_b hti
   where hti.form_item_id = x_form_item_id
   and hti.form_template_id = g_form_template_id;
   --

    if ltrim(rtrim(x_id_flex_structure_code)) is not null then

   -- segments can be null need this check
      select template_item_context_id
      into x_template_item_context_id
      from hr_template_item_contexts_b ticb
	   ,hr_item_contexts hic
	   ,fnd_id_flex_structures fifs
      where ticb.template_item_id = x_template_item_id
      and ticb.item_context_id = hic.item_context_id
      and nvl(hic.segment1,hr_api.g_varchar2) = nvl(x_segment1,hr_api.g_varchar2)
      and nvl(hic.segment2,hr_api.g_varchar2) = nvl(x_segment2,hr_api.g_varchar2)
      and nvl(hic.segment3,hr_api.g_varchar2) = nvl(x_segment3,hr_api.g_varchar2)
      and nvl(hic.segment4,hr_api.g_varchar2) = nvl(x_segment4,hr_api.g_varchar2)
      and nvl(hic.segment5,hr_api.g_varchar2) = nvl(x_segment5,hr_api.g_varchar2)
      and nvl(hic.segment6,hr_api.g_varchar2) = nvl(x_segment6,hr_api.g_varchar2)
      and nvl(hic.segment7,hr_api.g_varchar2) = nvl(x_segment7,hr_api.g_varchar2)
      and nvl(hic.segment8,hr_api.g_varchar2) = nvl(x_segment8,hr_api.g_varchar2)
      and nvl(hic.segment9,hr_api.g_varchar2) = nvl(x_segment9,hr_api.g_varchar2)
      and nvl(hic.segment10,hr_api.g_varchar2) = nvl(x_segment10,hr_api.g_varchar2)
      and nvl(hic.segment11,hr_api.g_varchar2) = nvl(x_segment11,hr_api.g_varchar2)
      and nvl(hic.segment12,hr_api.g_varchar2) = nvl(x_segment12,hr_api.g_varchar2)
      and nvl(hic.segment13,hr_api.g_varchar2) = nvl(x_segment13,hr_api.g_varchar2)
      and nvl(hic.segment14,hr_api.g_varchar2) = nvl(x_segment14,hr_api.g_varchar2)
      and nvl(hic.segment15,hr_api.g_varchar2) = nvl(x_segment15,hr_api.g_varchar2)
      and nvl(hic.segment16,hr_api.g_varchar2) = nvl(x_segment16,hr_api.g_varchar2)
      and nvl(hic.segment17,hr_api.g_varchar2) = nvl(x_segment17,hr_api.g_varchar2)
      and nvl(hic.segment18,hr_api.g_varchar2) = nvl(x_segment18,hr_api.g_varchar2)
      and nvl(hic.segment19,hr_api.g_varchar2) = nvl(x_segment19,hr_api.g_varchar2)
      and nvl(hic.segment20,hr_api.g_varchar2) = nvl(x_segment20,hr_api.g_varchar2)
      and nvl(hic.segment21,hr_api.g_varchar2) = nvl(x_segment21,hr_api.g_varchar2)
      and nvl(hic.segment22,hr_api.g_varchar2) = nvl(x_segment22,hr_api.g_varchar2)
      and nvl(hic.segment23,hr_api.g_varchar2) = nvl(x_segment23,hr_api.g_varchar2)
      and nvl(hic.segment24,hr_api.g_varchar2) = nvl(x_segment24,hr_api.g_varchar2)
      and nvl(hic.segment25,hr_api.g_varchar2) = nvl(x_segment25,hr_api.g_varchar2)
      and nvl(hic.segment26,hr_api.g_varchar2) = nvl(x_segment26,hr_api.g_varchar2)
      and nvl(hic.segment27,hr_api.g_varchar2) = nvl(x_segment27,hr_api.g_varchar2)
      and nvl(hic.segment28,hr_api.g_varchar2) = nvl(x_segment28,hr_api.g_varchar2)
      and nvl(hic.segment29,hr_api.g_varchar2) = nvl(x_segment29,hr_api.g_varchar2)
      and nvl(hic.segment30,hr_api.g_varchar2) = nvl(x_segment30,hr_api.g_varchar2)
      and hic.id_flex_num = fifs.id_flex_num
      and fifs.application_id = g_application_id --x_application_id
      and fifs.id_flex_structure_code = x_id_flex_structure_code
      and fifs.id_flex_code = x_id_flex_code;
      --
      x_form_item_id := null;
      x_template_item_id := null;
	select item_property_id
	into x_item_property_id
	from hr_item_properties_b
	where template_item_context_id=x_template_item_context_id;
    else                                     --x_id_flex_structure_code is null
      x_template_item_context_id := null;
      if x_template_name is null then
	 x_template_item_id := null;
	   select item_property_id
	   into x_item_property_id
	   from hr_item_properties_b
	   where form_item_id=x_form_item_id;
      else
	 x_form_item_id := null;
	   select item_property_id
	   into x_item_property_id
	   from hr_item_properties_b
	   where template_item_id=x_template_item_id;
      end if;
    end if;  --endif x_id_flex_structure_code is not null

 END IF;  --endif x_template_name is not null

--end of 2781560 rewrite


/* removed for performance reasons, replaced by separate sql stmts immediately above
 select item_property_id
 into x_item_property_id
 from hr_item_properties_b
 where nvl(form_item_id,hr_api.g_number) =  nvl(x_form_item_id,hr_api.g_number)
 and nvl(template_item_id,hr_api.g_number) = nvl(x_template_item_id,hr_api.g_number)
 and nvl(template_item_context_id,hr_api.g_number) = nvl(x_template_item_context_id,hr_api.g_number);
*/

   -- Translate owner to file_last_updated_by
 f_luby := fnd_load_util.owner_id(X_OWNER);
    -- Translate char last_update_date to date
 -- f_ludate := nvl(to_date(X_LAST_UPDATE_DATE, 'YYYY/MM/DD'), sysdate); -- Bug 5571335
 f_ludate := nvl(X_LAST_UPDATE_DATE, sysdate);

  select LAST_UPDATED_BY, LAST_UPDATE_DATE
  into db_luby, db_ludate
  from HR_ITEM_PROPERTIES_TL
  where item_property_id = x_item_property_id
  and LANGUAGE=userenv('LANG');

  if (fnd_load_util.upload_test(f_luby, f_ludate, db_luby,
                                db_ludate,X_CUSTOM_MODE)) then

     update HR_ITEM_PROPERTIES_TL set
      DEFAULT_VALUE = X_DEFAULT_VALUE,
      INFORMATION_PROMPT = X_INFORMATION_PROMPT,
      LABEL = X_LABEL,
      PROMPT_TEXT  = X_PROMPT_TEXT,
      TOOLTIP_TEXT = X_TOOLTIP_TEXT,
      LAST_UPDATE_DATE = f_ludate,
      LAST_UPDATED_BY = f_luby,
      LAST_UPDATE_LOGIN = 0,
      SOURCE_LANG = userenv('LANG')
     where userenv('LANG') in (LANGUAGE,SOURCE_LANG)
     and item_property_id = x_item_property_id;

  end if;
  exception
    when no_data_found then
      -- Do not insert missing translations, skip this row
      null;

end TRANSLATE_ROW;

end HR_ITEM_PROPERTIES_PKG;

/
