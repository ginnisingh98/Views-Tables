--------------------------------------------------------
--  DDL for Package Body IBY_UPG_PPP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."IBY_UPG_PPP_PKG" as
  /* $Header: ibypppub.pls 120.3.12010000.6 2009/12/15 01:49:19 svinjamu ship $ */

procedure INSERT_ROW (
  X_ROWID in out nocopy VARCHAR2,
  X_SYSTEM_PROFILE_CODE in VARCHAR2,
  X_REMIT_PMT_DETAILS_LENGTH_LIM in NUMBER,
  X_REMIT_REMITTANCE_ADVICE_FORM in VARCHAR2,
  X_REMIT_SRA_OVERRIDE_PAYEE_FLA in VARCHAR2,
  X_REMIT_ADVICE_DELIVERY_METHOD in VARCHAR2,
  X_REMIT_AUTOMATIC_SRA_SUBMIT in VARCHAR2,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_PMT_PAYMENT_DETAILS_FORMULA in VARCHAR2,
  X_INST_GROUP_BY_LEGAL_ENTITY in VARCHAR2,
  X_INST_GROUP_BY_BILL_PAYABLE in VARCHAR2,
  X_INST_GROUP_BY_MAX_INSTRUCTIO in VARCHAR2,
  X_INST_GROUP_BY_ORGANIZATION in VARCHAR2,
  X_INST_GROUP_BY_PAYMENT_FUNCTI in VARCHAR2,
  X_INST_GROUP_BY_PAYMENT_REASON in VARCHAR2,
  X_INST_GROUP_BY_RFC in VARCHAR2,
  X_INST_MAX_PAYMENTS_PER_INSTR in NUMBER,
  X_INST_MAX_AMOUNT_PER_INSTR_VA in NUMBER,
  X_INST_MAX_AMOUNT_PER_INSTR_CU in VARCHAR2,
  X_INST_MAX_AMOUNT_FX_RATE_TYPE in VARCHAR2,
  X_INST_SORT_OPTION_1 in VARCHAR2,
  X_INST_SORT_ORDER_1 in VARCHAR2,
  X_INST_SORT_OPTION_2 in VARCHAR2,
  X_POSITIVE_PAY_DELIVERY_FLAG in VARCHAR2,
  X_TRANSMIT_INSTR_IMMED_FLAG in VARCHAR2,
  X_AUTOMATIC_PI_REG_SUBMIT in VARCHAR2,
  X_PMT_GROUP_BY_DELIVERY_CHANNE in VARCHAR2,
  X_PMT_GROUP_BY_REMITTANCE_MES in VARCHAR2,
  X_PMT_GROUP_BY_MAX_DOCUMENTS in VARCHAR2,
  X_PMT_GROUP_BY_UNIQUE_REMIT_ID in VARCHAR2,
  X_PMT_GROUP_BY_SETTLE_PRIORITY in VARCHAR2,
  X_PMT_GROUP_BY_PAYMENT_REASON in VARCHAR2,
  X_PMT_GROUP_BY_DUE_DATE_FLAG in VARCHAR2,
  X_PMT_MAX_DOCUMENTS_PER_PAYMEN in NUMBER,
  X_PMT_PAYMENT_DETAILS_LENGTH_L in NUMBER,
  X_PMT_GROUP_BY_PAYMENT_DETAILS in VARCHAR2,
  X_PMT_GROUP_BY_BANK_CHARGE_BEA in VARCHAR2,
  X_INST_SORT_ORDER_2 in VARCHAR2,
  X_INST_SORT_OPTION_3 in VARCHAR2,
  X_INST_SORT_ORDER_3 in VARCHAR2,
  X_REMIT_DOCUMENT_COUNT_LIMIT in NUMBER,
  X_REMIT_ALLOW_MULTIPLE_COPY_FL in VARCHAR2,
  X_INST_GROUP_BY_PAYMENT_DATE in VARCHAR2,
  X_INST_GROUP_BY_PAYMENT_CURREN in VARCHAR2,
  X_INST_GROUP_BY_INT_BANK_ACCT in VARCHAR2,
  X_INST_GROUP_BY_MAX_PAYMENTS in VARCHAR2,
  X_INST_GROUP_BY_PAY_SERVICE_RE in VARCHAR2,
  X_DCL_ONLY_FOREIGN_CURR_PMT_FL in VARCHAR2,
  X_DECLARATION_REPORT_FORMAT_CO in VARCHAR2,
  X_DECLARATION_CURR_FX_RATE_TYP in VARCHAR2,
  X_DECLARATION_CURRENCY_CODE in VARCHAR2,
  X_DECLARATION_THRESHOLD_AMOUNT in NUMBER,
  X_BANK_INSTRUCTION1_CODE in VARCHAR2,
  X_BANK_INSTRUCTION2_CODE in VARCHAR2,
  X_BANK_INSTRUCTION_DETAILS in VARCHAR2,
  X_PAYMENT_TEXT_MESSAGE1 in VARCHAR2,
  X_PAYMENT_TEXT_MESSAGE2 in VARCHAR2,
  X_ACK_TRANSMIT_PROTOCOL_CODE in VARCHAR2,
  X_ACK_SECURITY_PROTOCOL_CODE in VARCHAR2,
  X_SEND_TO_FILE_FLAG in VARCHAR2,
  X_PI_REGISTER_FORMAT in VARCHAR2,
  X_BEP_ACCOUNT_ID in NUMBER,
  X_APPLICABLE_PMT_METHOD in VARCHAR2,
  X_APPLICABLE_CURRENCY in VARCHAR2,
  X_APPLICABLE_PAYER_ORG in VARCHAR2,
  X_APPLICABLE_INT_BANK_ACCOUNT in VARCHAR2,
  X_BEP_SUFFIX in VARCHAR2,
  X_SECURITY_PROTOCOL_CODE in VARCHAR2,
  X_TRANSMIT_PROTOCOL_CODE in VARCHAR2,
  X_PAYMENT_FORMAT_CODE in VARCHAR2,
  X_POSITIVE_PAY_FORMAT_CODE in VARCHAR2,
  X_PAY_FILE_LETTER_FORMAT_CODE in VARCHAR2,
  X_PRINT_INSTRUCTION_IMMED_FLAG in VARCHAR2,
  X_PERIODIC_SEQUENCE_NAME_1 in VARCHAR2,
  X_PERIODIC_SEQUENCE_NAME_2 in VARCHAR2,
  X_PERIODIC_SEQUENCE_NAME_3 in VARCHAR2,
  X_PROCESSING_TYPE in VARCHAR2,
  X_MARK_COMPLETE_EVENT in VARCHAR2,
  X_MANUAL_MARK_COMPLETE_FLAG in VARCHAR2,
  X_DECLARATION_OPTION in VARCHAR2,
  X_SYSTEM_PROFILE_NAME in VARCHAR2,
  X_SYSTEM_PROFILE_DESCRIPTION in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER,
  X_ELECTRONIC_PROCESSING_CHNNL in VARCHAR2,
  X_LOGICAL_GROUPING_MODE in VARCHAR2,
  X_BATCH_BOOKING_FLAG in VARCHAR2,
  X_INST_GROUP_BY_PAYMENT_METHOD in VARCHAR2,
  X_INACTIVE_DATE in DATE
) is
  cursor C is select ROWID from IBY_UPG_PPP_B
    where SYSTEM_PROFILE_CODE = X_SYSTEM_PROFILE_CODE
    ;
begin
  insert into IBY_UPG_PPP_B (
    REMIT_PMT_DETAILS_LENGTH_LIM,
    REMIT_REMITTANCE_ADVICE_FORMAT,
    REMIT_SRA_OVERRIDE_PAYEE_FLAG,
    REMIT_ADVICE_DELIVERY_METHOD,
    REMIT_AUTOMATIC_SRA_SUBMIT,
    OBJECT_VERSION_NUMBER,
    PMT_PAYMENT_DETAILS_FORMULA,
    INST_GROUP_BY_LEGAL_ENTITY,
    INST_GROUP_BY_BILL_PAYABLE,
    INST_GROUP_BY_MAX_INSTRUCTION,
    INST_GROUP_BY_ORGANIZATION,
    INST_GROUP_BY_PAYMENT_FUNCTION,
    INST_GROUP_BY_PAYMENT_REASON,
    INST_GROUP_BY_RFC,
    INST_MAX_PAYMENTS_PER_INSTR,
    INST_MAX_AMOUNT_PER_INSTR_VAL,
    INST_MAX_AMOUNT_PER_INSTR_CURR,
    INST_MAX_AMOUNT_FX_RATE_TYPE,
    INST_SORT_OPTION_1,
    INST_SORT_ORDER_1,
    INST_SORT_OPTION_2,
    POSITIVE_PAY_DELIVERY_FLAG,
    TRANSMIT_INSTR_IMMED_FLAG,
    AUTOMATIC_PI_REG_SUBMIT,
    PMT_GROUP_BY_DELIVERY_CHANNEL,
    PMT_GROUP_BY_REMITTANCE_MES,
    PMT_GROUP_BY_MAX_DOCUMENTS,
    PMT_GROUP_BY_UNIQUE_REMIT_ID,
    PMT_GROUP_BY_SETTLE_PRIORITY,
    PMT_GROUP_BY_PAYMENT_REASON,
    PMT_GROUP_BY_DUE_DATE_FLAG,
    PMT_MAX_DOCUMENTS_PER_PAYMENT,
    PMT_PAYMENT_DETAILS_LENGTH_LIM,
    PMT_GROUP_BY_PAYMENT_DETAILS,
    PMT_GROUP_BY_BANK_CHARGE_BEAR,
    INST_SORT_ORDER_2,
    INST_SORT_OPTION_3,
    INST_SORT_ORDER_3,
    REMIT_DOCUMENT_COUNT_LIMIT,
    REMIT_ALLOW_MULTIPLE_COPY_FLAG,
    INST_GROUP_BY_PAYMENT_DATE,
    INST_GROUP_BY_PAYMENT_CURRENCY,
    INST_GROUP_BY_INT_BANK_ACCT,
    INST_GROUP_BY_MAX_PAYMENTS,
    INST_GROUP_BY_PAY_SERVICE_REQ,
    DCL_ONLY_FOREIGN_CURR_PMT_FLAG,
    DECLARATION_REPORT_FORMAT_CODE,
    DECLARATION_CURR_FX_RATE_TYPE,
    DECLARATION_CURRENCY_CODE,
    DECLARATION_THRESHOLD_AMOUNT,
    BANK_INSTRUCTION1_CODE,
    BANK_INSTRUCTION2_CODE,
    BANK_INSTRUCTION_DETAILS,
    PAYMENT_TEXT_MESSAGE1,
    PAYMENT_TEXT_MESSAGE2,
    ACK_TRANSMIT_PROTOCOL_CODE,
    ACK_SECURITY_PROTOCOL_CODE,
    SEND_TO_FILE_FLAG,
    PI_REGISTER_FORMAT,
    BEP_ACCOUNT_ID,
    APPLICABLE_PMT_METHOD,
    APPLICABLE_CURRENCY,
    APPLICABLE_PAYER_ORG,
    APPLICABLE_INT_BANK_ACCOUNT,
    SYSTEM_PROFILE_CODE,
    BEP_SUFFIX,
    SECURITY_PROTOCOL_CODE,
    TRANSMIT_PROTOCOL_CODE,
    PAYMENT_FORMAT_CODE,
    POSITIVE_PAY_FORMAT_CODE,
    PAY_FILE_LETTER_FORMAT_CODE,
    PRINT_INSTRUCTION_IMMED_FLAG,
    PERIODIC_SEQUENCE_NAME_1,
    PERIODIC_SEQUENCE_NAME_2,
    PERIODIC_SEQUENCE_NAME_3,
    PROCESSING_TYPE,
    MARK_COMPLETE_EVENT,
    MANUAL_MARK_COMPLETE_FLAG,
    DECLARATION_OPTION,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    ELECTRONIC_PROCESSING_CHANNEL,
    LOGICAL_GROUPING_MODE,
    BATCH_BOOKING_FLAG,
    INST_GROUP_BY_PAYMENT_METHOD,
    INACTIVE_DATE
  ) values (
    X_REMIT_PMT_DETAILS_LENGTH_LIM,
    X_REMIT_REMITTANCE_ADVICE_FORM,
    X_REMIT_SRA_OVERRIDE_PAYEE_FLA,
    X_REMIT_ADVICE_DELIVERY_METHOD,
    X_REMIT_AUTOMATIC_SRA_SUBMIT,
    X_OBJECT_VERSION_NUMBER,
    X_PMT_PAYMENT_DETAILS_FORMULA,
    X_INST_GROUP_BY_LEGAL_ENTITY,
    X_INST_GROUP_BY_BILL_PAYABLE,
    X_INST_GROUP_BY_MAX_INSTRUCTIO,
    X_INST_GROUP_BY_ORGANIZATION,
    X_INST_GROUP_BY_PAYMENT_FUNCTI,
    X_INST_GROUP_BY_PAYMENT_REASON,
    X_INST_GROUP_BY_RFC,
    X_INST_MAX_PAYMENTS_PER_INSTR,
    X_INST_MAX_AMOUNT_PER_INSTR_VA,
    X_INST_MAX_AMOUNT_PER_INSTR_CU,
    X_INST_MAX_AMOUNT_FX_RATE_TYPE,
    X_INST_SORT_OPTION_1,
    X_INST_SORT_ORDER_1,
    X_INST_SORT_OPTION_2,
    X_POSITIVE_PAY_DELIVERY_FLAG,
    X_TRANSMIT_INSTR_IMMED_FLAG,
    X_AUTOMATIC_PI_REG_SUBMIT,
    X_PMT_GROUP_BY_DELIVERY_CHANNE,
    X_PMT_GROUP_BY_REMITTANCE_MES,
    X_PMT_GROUP_BY_MAX_DOCUMENTS,
    X_PMT_GROUP_BY_UNIQUE_REMIT_ID,
    X_PMT_GROUP_BY_SETTLE_PRIORITY,
    X_PMT_GROUP_BY_PAYMENT_REASON,
    X_PMT_GROUP_BY_DUE_DATE_FLAG,
    X_PMT_MAX_DOCUMENTS_PER_PAYMEN,
    X_PMT_PAYMENT_DETAILS_LENGTH_L,
    X_PMT_GROUP_BY_PAYMENT_DETAILS,
    X_PMT_GROUP_BY_BANK_CHARGE_BEA,
    X_INST_SORT_ORDER_2,
    X_INST_SORT_OPTION_3,
    X_INST_SORT_ORDER_3,
    X_REMIT_DOCUMENT_COUNT_LIMIT,
    X_REMIT_ALLOW_MULTIPLE_COPY_FL,
    X_INST_GROUP_BY_PAYMENT_DATE,
    X_INST_GROUP_BY_PAYMENT_CURREN,
    X_INST_GROUP_BY_INT_BANK_ACCT,
    X_INST_GROUP_BY_MAX_PAYMENTS,
    X_INST_GROUP_BY_PAY_SERVICE_RE,
    X_DCL_ONLY_FOREIGN_CURR_PMT_FL,
    X_DECLARATION_REPORT_FORMAT_CO,
    X_DECLARATION_CURR_FX_RATE_TYP,
    X_DECLARATION_CURRENCY_CODE,
    X_DECLARATION_THRESHOLD_AMOUNT,
    X_BANK_INSTRUCTION1_CODE,
    X_BANK_INSTRUCTION2_CODE,
    X_BANK_INSTRUCTION_DETAILS,
    X_PAYMENT_TEXT_MESSAGE1,
    X_PAYMENT_TEXT_MESSAGE2,
    X_ACK_TRANSMIT_PROTOCOL_CODE,
    X_ACK_SECURITY_PROTOCOL_CODE,
    X_SEND_TO_FILE_FLAG,
    X_PI_REGISTER_FORMAT,
    X_BEP_ACCOUNT_ID,
    X_APPLICABLE_PMT_METHOD,
    X_APPLICABLE_CURRENCY,
    X_APPLICABLE_PAYER_ORG,
    X_APPLICABLE_INT_BANK_ACCOUNT,
    X_SYSTEM_PROFILE_CODE,
    X_BEP_SUFFIX,
    X_SECURITY_PROTOCOL_CODE,
    X_TRANSMIT_PROTOCOL_CODE,
    X_PAYMENT_FORMAT_CODE,
    X_POSITIVE_PAY_FORMAT_CODE,
    X_PAY_FILE_LETTER_FORMAT_CODE,
    X_PRINT_INSTRUCTION_IMMED_FLAG,
    X_PERIODIC_SEQUENCE_NAME_1,
    X_PERIODIC_SEQUENCE_NAME_2,
    X_PERIODIC_SEQUENCE_NAME_3,
    X_PROCESSING_TYPE,
    X_MARK_COMPLETE_EVENT,
    X_MANUAL_MARK_COMPLETE_FLAG,
    X_DECLARATION_OPTION,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN,
    X_ELECTRONIC_PROCESSING_CHNNL,
    X_LOGICAL_GROUPING_MODE,
    X_BATCH_BOOKING_FLAG,
    X_INST_GROUP_BY_PAYMENT_METHOD,
    X_INACTIVE_DATE
  );

  insert into IBY_UPG_PPP_TL (
    SYSTEM_PROFILE_CODE,
    SYSTEM_PROFILE_NAME,
    SYSTEM_PROFILE_DESCRIPTION,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    OBJECT_VERSION_NUMBER,
    LANGUAGE,
    SOURCE_LANG
  ) select
    X_SYSTEM_PROFILE_CODE,
    X_SYSTEM_PROFILE_NAME,
    X_SYSTEM_PROFILE_DESCRIPTION,
    X_CREATED_BY,
    X_CREATION_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATE_LOGIN,
    X_OBJECT_VERSION_NUMBER,
    L.LANGUAGE_CODE,
    userenv('LANG')
  from FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and not exists
    (select NULL
    from IBY_UPG_PPP_TL T
    where T.SYSTEM_PROFILE_CODE = X_SYSTEM_PROFILE_CODE
    and T.LANGUAGE = L.LANGUAGE_CODE);

  open c;
  fetch c into X_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

    set_sys_user_profiles();

end INSERT_ROW;

procedure LOCK_ROW (
  X_SYSTEM_PROFILE_CODE in VARCHAR2,
  X_REMIT_PMT_DETAILS_LENGTH_LIM in NUMBER,
  X_REMIT_REMITTANCE_ADVICE_FORM in VARCHAR2,
  X_REMIT_SRA_OVERRIDE_PAYEE_FLA in VARCHAR2,
  X_REMIT_ADVICE_DELIVERY_METHOD in VARCHAR2,
  X_REMIT_AUTOMATIC_SRA_SUBMIT in VARCHAR2,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_PMT_PAYMENT_DETAILS_FORMULA in VARCHAR2,
  X_INST_GROUP_BY_LEGAL_ENTITY in VARCHAR2,
  X_INST_GROUP_BY_BILL_PAYABLE in VARCHAR2,
  X_INST_GROUP_BY_MAX_INSTRUCTIO in VARCHAR2,
  X_INST_GROUP_BY_ORGANIZATION in VARCHAR2,
  X_INST_GROUP_BY_PAYMENT_FUNCTI in VARCHAR2,
  X_INST_GROUP_BY_PAYMENT_REASON in VARCHAR2,
  X_INST_GROUP_BY_RFC in VARCHAR2,
  X_INST_MAX_PAYMENTS_PER_INSTR in NUMBER,
  X_INST_MAX_AMOUNT_PER_INSTR_VA in NUMBER,
  X_INST_MAX_AMOUNT_PER_INSTR_CU in VARCHAR2,
  X_INST_MAX_AMOUNT_FX_RATE_TYPE in VARCHAR2,
  X_INST_SORT_OPTION_1 in VARCHAR2,
  X_INST_SORT_ORDER_1 in VARCHAR2,
  X_INST_SORT_OPTION_2 in VARCHAR2,
  X_POSITIVE_PAY_DELIVERY_FLAG in VARCHAR2,
  X_TRANSMIT_INSTR_IMMED_FLAG in VARCHAR2,
  X_AUTOMATIC_PI_REG_SUBMIT in VARCHAR2,
  X_PMT_GROUP_BY_DELIVERY_CHANNE in VARCHAR2,
  X_PMT_GROUP_BY_REMITTANCE_MES in VARCHAR2,
  X_PMT_GROUP_BY_MAX_DOCUMENTS in VARCHAR2,
  X_PMT_GROUP_BY_UNIQUE_REMIT_ID in VARCHAR2,
  X_PMT_GROUP_BY_SETTLE_PRIORITY in VARCHAR2,
  X_PMT_GROUP_BY_PAYMENT_REASON in VARCHAR2,
  X_PMT_GROUP_BY_DUE_DATE_FLAG in VARCHAR2,
  X_PMT_MAX_DOCUMENTS_PER_PAYMEN in NUMBER,
  X_PMT_PAYMENT_DETAILS_LENGTH_L in NUMBER,
  X_PMT_GROUP_BY_PAYMENT_DETAILS in VARCHAR2,
  X_PMT_GROUP_BY_BANK_CHARGE_BEA in VARCHAR2,
  X_INST_SORT_ORDER_2 in VARCHAR2,
  X_INST_SORT_OPTION_3 in VARCHAR2,
  X_INST_SORT_ORDER_3 in VARCHAR2,
  X_REMIT_DOCUMENT_COUNT_LIMIT in NUMBER,
  X_REMIT_ALLOW_MULTIPLE_COPY_FL in VARCHAR2,
  X_INST_GROUP_BY_PAYMENT_DATE in VARCHAR2,
  X_INST_GROUP_BY_PAYMENT_CURREN in VARCHAR2,
  X_INST_GROUP_BY_INT_BANK_ACCT in VARCHAR2,
  X_INST_GROUP_BY_MAX_PAYMENTS in VARCHAR2,
  X_INST_GROUP_BY_PAY_SERVICE_RE in VARCHAR2,
  X_DCL_ONLY_FOREIGN_CURR_PMT_FL in VARCHAR2,
  X_DECLARATION_REPORT_FORMAT_CO in VARCHAR2,
  X_DECLARATION_CURR_FX_RATE_TYP in VARCHAR2,
  X_DECLARATION_CURRENCY_CODE in VARCHAR2,
  X_DECLARATION_THRESHOLD_AMOUNT in NUMBER,
  X_BANK_INSTRUCTION1_CODE in VARCHAR2,
  X_BANK_INSTRUCTION2_CODE in VARCHAR2,
  X_BANK_INSTRUCTION_DETAILS in VARCHAR2,
  X_PAYMENT_TEXT_MESSAGE1 in VARCHAR2,
  X_PAYMENT_TEXT_MESSAGE2 in VARCHAR2,
  X_ACK_TRANSMIT_PROTOCOL_CODE in VARCHAR2,
  X_ACK_SECURITY_PROTOCOL_CODE in VARCHAR2,
  X_SEND_TO_FILE_FLAG in VARCHAR2,
  X_PI_REGISTER_FORMAT in VARCHAR2,
  X_BEP_ACCOUNT_ID in NUMBER,
  X_APPLICABLE_PMT_METHOD in VARCHAR2,
  X_APPLICABLE_CURRENCY in VARCHAR2,
  X_APPLICABLE_PAYER_ORG in VARCHAR2,
  X_APPLICABLE_INT_BANK_ACCOUNT in VARCHAR2,
  X_BEP_SUFFIX in VARCHAR2,
  X_SECURITY_PROTOCOL_CODE in VARCHAR2,
  X_TRANSMIT_PROTOCOL_CODE in VARCHAR2,
  X_PAYMENT_FORMAT_CODE in VARCHAR2,
  X_POSITIVE_PAY_FORMAT_CODE in VARCHAR2,
  X_PAY_FILE_LETTER_FORMAT_CODE in VARCHAR2,
  X_PRINT_INSTRUCTION_IMMED_FLAG in VARCHAR2,
  X_PERIODIC_SEQUENCE_NAME_1 in VARCHAR2,
  X_PERIODIC_SEQUENCE_NAME_2 in VARCHAR2,
  X_PERIODIC_SEQUENCE_NAME_3 in VARCHAR2,
  X_PROCESSING_TYPE in VARCHAR2,
  X_MARK_COMPLETE_EVENT in VARCHAR2,
  X_MANUAL_MARK_COMPLETE_FLAG in VARCHAR2,
  X_DECLARATION_OPTION in VARCHAR2,
  X_SYSTEM_PROFILE_NAME in VARCHAR2,
  X_SYSTEM_PROFILE_DESCRIPTION in VARCHAR2,
  X_ELECTRONIC_PROCESSING_CHNNL in VARCHAR2,
  X_LOGICAL_GROUPING_MODE in VARCHAR2,
  X_BATCH_BOOKING_FLAG in VARCHAR2,
  X_INST_GROUP_BY_PAYMENT_METHOD in VARCHAR2
) is
  cursor c is select
      REMIT_PMT_DETAILS_LENGTH_LIM,
      REMIT_REMITTANCE_ADVICE_FORMAT,
      REMIT_SRA_OVERRIDE_PAYEE_FLAG,
      REMIT_ADVICE_DELIVERY_METHOD,
      REMIT_AUTOMATIC_SRA_SUBMIT,
      OBJECT_VERSION_NUMBER,
      PMT_PAYMENT_DETAILS_FORMULA,
      INST_GROUP_BY_LEGAL_ENTITY,
      INST_GROUP_BY_BILL_PAYABLE,
      INST_GROUP_BY_MAX_INSTRUCTION,
      INST_GROUP_BY_ORGANIZATION,
      INST_GROUP_BY_PAYMENT_FUNCTION,
      INST_GROUP_BY_PAYMENT_REASON,
      INST_GROUP_BY_RFC,
      INST_MAX_PAYMENTS_PER_INSTR,
      INST_MAX_AMOUNT_PER_INSTR_VAL,
      INST_MAX_AMOUNT_PER_INSTR_CURR,
      INST_MAX_AMOUNT_FX_RATE_TYPE,
      INST_SORT_OPTION_1,
      INST_SORT_ORDER_1,
      INST_SORT_OPTION_2,
      POSITIVE_PAY_DELIVERY_FLAG,
      TRANSMIT_INSTR_IMMED_FLAG,
      AUTOMATIC_PI_REG_SUBMIT,
      PMT_GROUP_BY_DELIVERY_CHANNEL,
      PMT_GROUP_BY_REMITTANCE_MES,
      PMT_GROUP_BY_MAX_DOCUMENTS,
      PMT_GROUP_BY_UNIQUE_REMIT_ID,
      PMT_GROUP_BY_SETTLE_PRIORITY,
      PMT_GROUP_BY_PAYMENT_REASON,
      PMT_GROUP_BY_DUE_DATE_FLAG,
      PMT_MAX_DOCUMENTS_PER_PAYMENT,
      PMT_PAYMENT_DETAILS_LENGTH_LIM,
      PMT_GROUP_BY_PAYMENT_DETAILS,
      PMT_GROUP_BY_BANK_CHARGE_BEAR,
      INST_SORT_ORDER_2,
      INST_SORT_OPTION_3,
      INST_SORT_ORDER_3,
      REMIT_DOCUMENT_COUNT_LIMIT,
      REMIT_ALLOW_MULTIPLE_COPY_FLAG,
      INST_GROUP_BY_PAYMENT_DATE,
      INST_GROUP_BY_PAYMENT_CURRENCY,
      INST_GROUP_BY_INT_BANK_ACCT,
      INST_GROUP_BY_MAX_PAYMENTS,
      INST_GROUP_BY_PAY_SERVICE_REQ,
      DCL_ONLY_FOREIGN_CURR_PMT_FLAG,
      DECLARATION_REPORT_FORMAT_CODE,
      DECLARATION_CURR_FX_RATE_TYPE,
      DECLARATION_CURRENCY_CODE,
      DECLARATION_THRESHOLD_AMOUNT,
      BANK_INSTRUCTION1_CODE,
      BANK_INSTRUCTION2_CODE,
      BANK_INSTRUCTION_DETAILS,
      PAYMENT_TEXT_MESSAGE1,
      PAYMENT_TEXT_MESSAGE2,
      ACK_TRANSMIT_PROTOCOL_CODE,
      ACK_SECURITY_PROTOCOL_CODE,
      SEND_TO_FILE_FLAG,
      PI_REGISTER_FORMAT,
      BEP_ACCOUNT_ID,
      APPLICABLE_PMT_METHOD,
      APPLICABLE_CURRENCY,
      APPLICABLE_PAYER_ORG,
      APPLICABLE_INT_BANK_ACCOUNT,
      BEP_SUFFIX,
      SECURITY_PROTOCOL_CODE,
      TRANSMIT_PROTOCOL_CODE,
      PAYMENT_FORMAT_CODE,
      POSITIVE_PAY_FORMAT_CODE,
      PAY_FILE_LETTER_FORMAT_CODE,
      PRINT_INSTRUCTION_IMMED_FLAG,
      PERIODIC_SEQUENCE_NAME_1,
      PERIODIC_SEQUENCE_NAME_2,
      PERIODIC_SEQUENCE_NAME_3,
      PROCESSING_TYPE,
      MARK_COMPLETE_EVENT,
      MANUAL_MARK_COMPLETE_FLAG,
      DECLARATION_OPTION,
      ELECTRONIC_PROCESSING_CHANNEL,
      LOGICAL_GROUPING_MODE,
      BATCH_BOOKING_FLAG,
      INST_GROUP_BY_PAYMENT_METHOD
    from IBY_UPG_PPP_B
    where SYSTEM_PROFILE_CODE = X_SYSTEM_PROFILE_CODE
    for update of SYSTEM_PROFILE_CODE nowait;
  recinfo c%rowtype;

  cursor c1 is select
      SYSTEM_PROFILE_NAME,
      SYSTEM_PROFILE_DESCRIPTION,
      decode(LANGUAGE, userenv('LANG'), 'Y', 'N') BASELANG
    from IBY_UPG_PPP_TL
    where SYSTEM_PROFILE_CODE = X_SYSTEM_PROFILE_CODE
    and userenv('LANG') in (LANGUAGE, SOURCE_LANG)
    for update of SYSTEM_PROFILE_CODE nowait;
begin
  open c;
  fetch c into recinfo;
  if (c%notfound) then
    close c;
    fnd_message.set_name('FND', 'FORM_RECORD_DELETED');
    app_exception.raise_exception;
  end if;
  close c;
  if (    ((recinfo.REMIT_PMT_DETAILS_LENGTH_LIM = X_REMIT_PMT_DETAILS_LENGTH_LIM)
           OR ((recinfo.REMIT_PMT_DETAILS_LENGTH_LIM is null) AND (X_REMIT_PMT_DETAILS_LENGTH_LIM is null)))
      AND ((recinfo.REMIT_REMITTANCE_ADVICE_FORMAT = X_REMIT_REMITTANCE_ADVICE_FORM)
           OR ((recinfo.REMIT_REMITTANCE_ADVICE_FORMAT is null) AND (X_REMIT_REMITTANCE_ADVICE_FORM is null)))
      AND (recinfo.REMIT_SRA_OVERRIDE_PAYEE_FLAG = X_REMIT_SRA_OVERRIDE_PAYEE_FLA)
      AND ((recinfo.REMIT_ADVICE_DELIVERY_METHOD = X_REMIT_ADVICE_DELIVERY_METHOD)
           OR ((recinfo.REMIT_ADVICE_DELIVERY_METHOD is null) AND (X_REMIT_ADVICE_DELIVERY_METHOD is null)))
      AND (recinfo.REMIT_AUTOMATIC_SRA_SUBMIT = X_REMIT_AUTOMATIC_SRA_SUBMIT)
      AND (recinfo.OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER)
      AND ((recinfo.PMT_PAYMENT_DETAILS_FORMULA = X_PMT_PAYMENT_DETAILS_FORMULA)
           OR ((recinfo.PMT_PAYMENT_DETAILS_FORMULA is null) AND (X_PMT_PAYMENT_DETAILS_FORMULA is null)))
      AND (recinfo.INST_GROUP_BY_LEGAL_ENTITY = X_INST_GROUP_BY_LEGAL_ENTITY)
      AND (recinfo.INST_GROUP_BY_BILL_PAYABLE = X_INST_GROUP_BY_BILL_PAYABLE)
      AND (recinfo.INST_GROUP_BY_MAX_INSTRUCTION = X_INST_GROUP_BY_MAX_INSTRUCTIO)
      AND (recinfo.INST_GROUP_BY_ORGANIZATION = X_INST_GROUP_BY_ORGANIZATION)
      AND (recinfo.INST_GROUP_BY_PAYMENT_FUNCTION = X_INST_GROUP_BY_PAYMENT_FUNCTI)
      AND (recinfo.INST_GROUP_BY_PAYMENT_REASON = X_INST_GROUP_BY_PAYMENT_REASON)
      AND (recinfo.INST_GROUP_BY_RFC = X_INST_GROUP_BY_RFC)
      AND ((recinfo.INST_MAX_PAYMENTS_PER_INSTR = X_INST_MAX_PAYMENTS_PER_INSTR)
           OR ((recinfo.INST_MAX_PAYMENTS_PER_INSTR is null) AND (X_INST_MAX_PAYMENTS_PER_INSTR is null)))
      AND ((recinfo.INST_MAX_AMOUNT_PER_INSTR_VAL = X_INST_MAX_AMOUNT_PER_INSTR_VA)
           OR ((recinfo.INST_MAX_AMOUNT_PER_INSTR_VAL is null) AND (X_INST_MAX_AMOUNT_PER_INSTR_VA is null)))
      AND ((recinfo.INST_MAX_AMOUNT_PER_INSTR_CURR = X_INST_MAX_AMOUNT_PER_INSTR_CU)
           OR ((recinfo.INST_MAX_AMOUNT_PER_INSTR_CURR is null) AND (X_INST_MAX_AMOUNT_PER_INSTR_CU is null)))
      AND ((recinfo.INST_MAX_AMOUNT_FX_RATE_TYPE = X_INST_MAX_AMOUNT_FX_RATE_TYPE)
           OR ((recinfo.INST_MAX_AMOUNT_FX_RATE_TYPE is null) AND (X_INST_MAX_AMOUNT_FX_RATE_TYPE is null)))
      AND ((recinfo.INST_SORT_OPTION_1 = X_INST_SORT_OPTION_1)
           OR ((recinfo.INST_SORT_OPTION_1 is null) AND (X_INST_SORT_OPTION_1 is null)))
      AND ((recinfo.INST_SORT_ORDER_1 = X_INST_SORT_ORDER_1)
           OR ((recinfo.INST_SORT_ORDER_1 is null) AND (X_INST_SORT_ORDER_1 is null)))
      AND ((recinfo.INST_SORT_OPTION_2 = X_INST_SORT_OPTION_2)
           OR ((recinfo.INST_SORT_OPTION_2 is null) AND (X_INST_SORT_OPTION_2 is null)))
      AND (recinfo.POSITIVE_PAY_DELIVERY_FLAG = X_POSITIVE_PAY_DELIVERY_FLAG)
      AND (recinfo.TRANSMIT_INSTR_IMMED_FLAG = X_TRANSMIT_INSTR_IMMED_FLAG)
      AND (recinfo.AUTOMATIC_PI_REG_SUBMIT = X_AUTOMATIC_PI_REG_SUBMIT)
      AND (recinfo.PMT_GROUP_BY_DELIVERY_CHANNEL = X_PMT_GROUP_BY_DELIVERY_CHANNE)
      AND (recinfo.PMT_GROUP_BY_REMITTANCE_MES = X_PMT_GROUP_BY_REMITTANCE_MES)
      AND (recinfo.PMT_GROUP_BY_MAX_DOCUMENTS = X_PMT_GROUP_BY_MAX_DOCUMENTS)
      AND (recinfo.PMT_GROUP_BY_UNIQUE_REMIT_ID = X_PMT_GROUP_BY_UNIQUE_REMIT_ID)
      AND (recinfo.PMT_GROUP_BY_SETTLE_PRIORITY = X_PMT_GROUP_BY_SETTLE_PRIORITY)
      AND (recinfo.PMT_GROUP_BY_PAYMENT_REASON = X_PMT_GROUP_BY_PAYMENT_REASON)
      AND (recinfo.PMT_GROUP_BY_DUE_DATE_FLAG = X_PMT_GROUP_BY_DUE_DATE_FLAG)
      AND ((recinfo.PMT_MAX_DOCUMENTS_PER_PAYMENT = X_PMT_MAX_DOCUMENTS_PER_PAYMEN)
           OR ((recinfo.PMT_MAX_DOCUMENTS_PER_PAYMENT is null) AND (X_PMT_MAX_DOCUMENTS_PER_PAYMEN is null)))
      AND ((recinfo.PMT_PAYMENT_DETAILS_LENGTH_LIM = X_PMT_PAYMENT_DETAILS_LENGTH_L)
           OR ((recinfo.PMT_PAYMENT_DETAILS_LENGTH_LIM is null) AND (X_PMT_PAYMENT_DETAILS_LENGTH_L is null)))
      AND (recinfo.PMT_GROUP_BY_PAYMENT_DETAILS = X_PMT_GROUP_BY_PAYMENT_DETAILS)
      AND (recinfo.PMT_GROUP_BY_BANK_CHARGE_BEAR = X_PMT_GROUP_BY_BANK_CHARGE_BEA)
      AND ((recinfo.INST_SORT_ORDER_2 = X_INST_SORT_ORDER_2)
           OR ((recinfo.INST_SORT_ORDER_2 is null) AND (X_INST_SORT_ORDER_2 is null)))
      AND ((recinfo.INST_SORT_OPTION_3 = X_INST_SORT_OPTION_3)
           OR ((recinfo.INST_SORT_OPTION_3 is null) AND (X_INST_SORT_OPTION_3 is null)))
      AND ((recinfo.INST_SORT_ORDER_3 = X_INST_SORT_ORDER_3)
           OR ((recinfo.INST_SORT_ORDER_3 is null) AND (X_INST_SORT_ORDER_3 is null)))
      AND ((recinfo.REMIT_DOCUMENT_COUNT_LIMIT = X_REMIT_DOCUMENT_COUNT_LIMIT)
           OR ((recinfo.REMIT_DOCUMENT_COUNT_LIMIT is null) AND (X_REMIT_DOCUMENT_COUNT_LIMIT is null)))
      AND ((recinfo.REMIT_ALLOW_MULTIPLE_COPY_FLAG = X_REMIT_ALLOW_MULTIPLE_COPY_FL)
           OR ((recinfo.REMIT_ALLOW_MULTIPLE_COPY_FLAG is null) AND (X_REMIT_ALLOW_MULTIPLE_COPY_FL is null)))
      AND (recinfo.INST_GROUP_BY_PAYMENT_DATE = X_INST_GROUP_BY_PAYMENT_DATE)
      AND (recinfo.INST_GROUP_BY_PAYMENT_CURRENCY = X_INST_GROUP_BY_PAYMENT_CURREN)
      AND (recinfo.INST_GROUP_BY_INT_BANK_ACCT = X_INST_GROUP_BY_INT_BANK_ACCT)
      AND (recinfo.INST_GROUP_BY_MAX_PAYMENTS = X_INST_GROUP_BY_MAX_PAYMENTS)
      AND (recinfo.INST_GROUP_BY_PAY_SERVICE_REQ = X_INST_GROUP_BY_PAY_SERVICE_RE)
      AND ((recinfo.DCL_ONLY_FOREIGN_CURR_PMT_FLAG = X_DCL_ONLY_FOREIGN_CURR_PMT_FL)
           OR ((recinfo.DCL_ONLY_FOREIGN_CURR_PMT_FLAG is null) AND (X_DCL_ONLY_FOREIGN_CURR_PMT_FL is null)))
      AND ((recinfo.DECLARATION_REPORT_FORMAT_CODE = X_DECLARATION_REPORT_FORMAT_CO)
           OR ((recinfo.DECLARATION_REPORT_FORMAT_CODE is null) AND (X_DECLARATION_REPORT_FORMAT_CO is null)))
      AND ((recinfo.DECLARATION_CURR_FX_RATE_TYPE = X_DECLARATION_CURR_FX_RATE_TYP)
           OR ((recinfo.DECLARATION_CURR_FX_RATE_TYPE is null) AND (X_DECLARATION_CURR_FX_RATE_TYP is null)))
      AND ((recinfo.DECLARATION_CURRENCY_CODE = X_DECLARATION_CURRENCY_CODE)
           OR ((recinfo.DECLARATION_CURRENCY_CODE is null) AND (X_DECLARATION_CURRENCY_CODE is null)))
      AND ((recinfo.DECLARATION_THRESHOLD_AMOUNT = X_DECLARATION_THRESHOLD_AMOUNT)
           OR ((recinfo.DECLARATION_THRESHOLD_AMOUNT is null) AND (X_DECLARATION_THRESHOLD_AMOUNT is null)))
      AND ((recinfo.BANK_INSTRUCTION1_CODE = X_BANK_INSTRUCTION1_CODE)
           OR ((recinfo.BANK_INSTRUCTION1_CODE is null) AND (X_BANK_INSTRUCTION1_CODE is null)))
      AND ((recinfo.BANK_INSTRUCTION2_CODE = X_BANK_INSTRUCTION2_CODE)
           OR ((recinfo.BANK_INSTRUCTION2_CODE is null) AND (X_BANK_INSTRUCTION2_CODE is null)))
      AND ((recinfo.BANK_INSTRUCTION_DETAILS = X_BANK_INSTRUCTION_DETAILS)
           OR ((recinfo.BANK_INSTRUCTION_DETAILS is null) AND (X_BANK_INSTRUCTION_DETAILS is null)))
      AND ((recinfo.PAYMENT_TEXT_MESSAGE1 = X_PAYMENT_TEXT_MESSAGE1)
           OR ((recinfo.PAYMENT_TEXT_MESSAGE1 is null) AND (X_PAYMENT_TEXT_MESSAGE1 is null)))
      AND ((recinfo.PAYMENT_TEXT_MESSAGE2 = X_PAYMENT_TEXT_MESSAGE2)
           OR ((recinfo.PAYMENT_TEXT_MESSAGE2 is null) AND (X_PAYMENT_TEXT_MESSAGE2 is null)))
      AND ((recinfo.ACK_TRANSMIT_PROTOCOL_CODE = X_ACK_TRANSMIT_PROTOCOL_CODE)
           OR ((recinfo.ACK_TRANSMIT_PROTOCOL_CODE is null) AND (X_ACK_TRANSMIT_PROTOCOL_CODE is null)))
      AND ((recinfo.ACK_SECURITY_PROTOCOL_CODE = X_ACK_SECURITY_PROTOCOL_CODE)
           OR ((recinfo.ACK_SECURITY_PROTOCOL_CODE is null) AND (X_ACK_SECURITY_PROTOCOL_CODE is null)))
      AND (recinfo.SEND_TO_FILE_FLAG = X_SEND_TO_FILE_FLAG)
      AND ((recinfo.PI_REGISTER_FORMAT = X_PI_REGISTER_FORMAT)
           OR ((recinfo.PI_REGISTER_FORMAT is null) AND (X_PI_REGISTER_FORMAT is null)))
      AND ((recinfo.BEP_ACCOUNT_ID = X_BEP_ACCOUNT_ID)
           OR ((recinfo.BEP_ACCOUNT_ID is null) AND (X_BEP_ACCOUNT_ID is null)))
      AND ((recinfo.APPLICABLE_PMT_METHOD = X_APPLICABLE_PMT_METHOD)
           OR ((recinfo.APPLICABLE_PMT_METHOD is null) AND (X_APPLICABLE_PMT_METHOD is null)))
      AND ((recinfo.APPLICABLE_CURRENCY = X_APPLICABLE_CURRENCY)
           OR ((recinfo.APPLICABLE_CURRENCY is null) AND (X_APPLICABLE_CURRENCY is null)))
      AND ((recinfo.APPLICABLE_PAYER_ORG = X_APPLICABLE_PAYER_ORG)
           OR ((recinfo.APPLICABLE_PAYER_ORG is null) AND (X_APPLICABLE_PAYER_ORG is null)))
      AND ((recinfo.APPLICABLE_INT_BANK_ACCOUNT = X_APPLICABLE_INT_BANK_ACCOUNT)
           OR ((recinfo.APPLICABLE_INT_BANK_ACCOUNT is null) AND (X_APPLICABLE_INT_BANK_ACCOUNT is null)))
      AND ((recinfo.BEP_SUFFIX = X_BEP_SUFFIX)
           OR ((recinfo.BEP_SUFFIX is null) AND (X_BEP_SUFFIX is null)))
      AND ((recinfo.SECURITY_PROTOCOL_CODE = X_SECURITY_PROTOCOL_CODE)
           OR ((recinfo.SECURITY_PROTOCOL_CODE is null) AND (X_SECURITY_PROTOCOL_CODE is null)))
      AND ((recinfo.TRANSMIT_PROTOCOL_CODE = X_TRANSMIT_PROTOCOL_CODE)
           OR ((recinfo.TRANSMIT_PROTOCOL_CODE is null) AND (X_TRANSMIT_PROTOCOL_CODE is null)))
      AND (recinfo.PAYMENT_FORMAT_CODE = X_PAYMENT_FORMAT_CODE)
      AND ((recinfo.POSITIVE_PAY_FORMAT_CODE = X_POSITIVE_PAY_FORMAT_CODE)
           OR ((recinfo.POSITIVE_PAY_FORMAT_CODE is null) AND (X_POSITIVE_PAY_FORMAT_CODE is null)))
      AND ((recinfo.PAY_FILE_LETTER_FORMAT_CODE = X_PAY_FILE_LETTER_FORMAT_CODE)
           OR ((recinfo.PAY_FILE_LETTER_FORMAT_CODE is null) AND (X_PAY_FILE_LETTER_FORMAT_CODE is null)))
      AND (recinfo.PRINT_INSTRUCTION_IMMED_FLAG = X_PRINT_INSTRUCTION_IMMED_FLAG)
      AND ((recinfo.PERIODIC_SEQUENCE_NAME_1 = X_PERIODIC_SEQUENCE_NAME_1)
           OR ((recinfo.PERIODIC_SEQUENCE_NAME_1 is null) AND (X_PERIODIC_SEQUENCE_NAME_1 is null)))
      AND ((recinfo.PERIODIC_SEQUENCE_NAME_2 = X_PERIODIC_SEQUENCE_NAME_2)
           OR ((recinfo.PERIODIC_SEQUENCE_NAME_2 is null) AND (X_PERIODIC_SEQUENCE_NAME_2 is null)))
      AND ((recinfo.PERIODIC_SEQUENCE_NAME_3 = X_PERIODIC_SEQUENCE_NAME_3)
           OR ((recinfo.PERIODIC_SEQUENCE_NAME_3 is null) AND (X_PERIODIC_SEQUENCE_NAME_3 is null)))
      AND (recinfo.PROCESSING_TYPE = X_PROCESSING_TYPE)
      AND (recinfo.MARK_COMPLETE_EVENT = X_MARK_COMPLETE_EVENT)
      AND (recinfo.MANUAL_MARK_COMPLETE_FLAG = X_MANUAL_MARK_COMPLETE_FLAG)
      AND ((recinfo.DECLARATION_OPTION = X_DECLARATION_OPTION)
           OR ((recinfo.DECLARATION_OPTION is null) AND (X_DECLARATION_OPTION is null)))
      AND ((recinfo.ELECTRONIC_PROCESSING_CHANNEL = X_ELECTRONIC_PROCESSING_CHNNL)
           OR ((recinfo.ELECTRONIC_PROCESSING_CHANNEL is null) AND (X_ELECTRONIC_PROCESSING_CHNNL is null)))
      AND ((recinfo.LOGICAL_GROUPING_MODE = X_LOGICAL_GROUPING_MODE)
           OR ((recinfo.LOGICAL_GROUPING_MODE is null) AND (X_LOGICAL_GROUPING_MODE is null)))
      AND ((recinfo.BATCH_BOOKING_FLAG = X_BATCH_BOOKING_FLAG)
           OR ((recinfo.BATCH_BOOKING_FLAG is null) AND (X_BATCH_BOOKING_FLAG is null)))
      AND ((recinfo.INST_GROUP_BY_PAYMENT_METHOD = X_INST_GROUP_BY_PAYMENT_METHOD)
           OR ((recinfo.INST_GROUP_BY_PAYMENT_METHOD is null) AND (X_INST_GROUP_BY_PAYMENT_METHOD is null)))
  ) then
    null;
  else
    fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
    app_exception.raise_exception;
  end if;

  for tlinfo in c1 loop
    if (tlinfo.BASELANG = 'Y') then
      if (    (tlinfo.SYSTEM_PROFILE_NAME = X_SYSTEM_PROFILE_NAME)
          AND ((tlinfo.SYSTEM_PROFILE_DESCRIPTION = X_SYSTEM_PROFILE_DESCRIPTION)
               OR ((tlinfo.SYSTEM_PROFILE_DESCRIPTION is null) AND (X_SYSTEM_PROFILE_DESCRIPTION is null)))
      ) then
        null;
      else
        fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
        app_exception.raise_exception;
      end if;
    end if;
  end loop;
  return;
end LOCK_ROW;

procedure UPDATE_ROW (
  X_SYSTEM_PROFILE_CODE in VARCHAR2,
  X_REMIT_PMT_DETAILS_LENGTH_LIM in NUMBER,
  X_REMIT_REMITTANCE_ADVICE_FORM in VARCHAR2,
  X_REMIT_SRA_OVERRIDE_PAYEE_FLA in VARCHAR2,
  X_REMIT_ADVICE_DELIVERY_METHOD in VARCHAR2,
  X_REMIT_AUTOMATIC_SRA_SUBMIT in VARCHAR2,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_PMT_PAYMENT_DETAILS_FORMULA in VARCHAR2,
  X_INST_GROUP_BY_LEGAL_ENTITY in VARCHAR2,
  X_INST_GROUP_BY_BILL_PAYABLE in VARCHAR2,
  X_INST_GROUP_BY_MAX_INSTRUCTIO in VARCHAR2,
  X_INST_GROUP_BY_ORGANIZATION in VARCHAR2,
  X_INST_GROUP_BY_PAYMENT_FUNCTI in VARCHAR2,
  X_INST_GROUP_BY_PAYMENT_REASON in VARCHAR2,
  X_INST_GROUP_BY_RFC in VARCHAR2,
  X_INST_MAX_PAYMENTS_PER_INSTR in NUMBER,
  X_INST_MAX_AMOUNT_PER_INSTR_VA in NUMBER,
  X_INST_MAX_AMOUNT_PER_INSTR_CU in VARCHAR2,
  X_INST_MAX_AMOUNT_FX_RATE_TYPE in VARCHAR2,
  X_INST_SORT_OPTION_1 in VARCHAR2,
  X_INST_SORT_ORDER_1 in VARCHAR2,
  X_INST_SORT_OPTION_2 in VARCHAR2,
  X_POSITIVE_PAY_DELIVERY_FLAG in VARCHAR2,
  X_TRANSMIT_INSTR_IMMED_FLAG in VARCHAR2,
  X_AUTOMATIC_PI_REG_SUBMIT in VARCHAR2,
  X_PMT_GROUP_BY_DELIVERY_CHANNE in VARCHAR2,
  X_PMT_GROUP_BY_REMITTANCE_MES in VARCHAR2,
  X_PMT_GROUP_BY_MAX_DOCUMENTS in VARCHAR2,
  X_PMT_GROUP_BY_UNIQUE_REMIT_ID in VARCHAR2,
  X_PMT_GROUP_BY_SETTLE_PRIORITY in VARCHAR2,
  X_PMT_GROUP_BY_PAYMENT_REASON in VARCHAR2,
  X_PMT_GROUP_BY_DUE_DATE_FLAG in VARCHAR2,
  X_PMT_MAX_DOCUMENTS_PER_PAYMEN in NUMBER,
  X_PMT_PAYMENT_DETAILS_LENGTH_L in NUMBER,
  X_PMT_GROUP_BY_PAYMENT_DETAILS in VARCHAR2,
  X_PMT_GROUP_BY_BANK_CHARGE_BEA in VARCHAR2,
  X_INST_SORT_ORDER_2 in VARCHAR2,
  X_INST_SORT_OPTION_3 in VARCHAR2,
  X_INST_SORT_ORDER_3 in VARCHAR2,
  X_REMIT_DOCUMENT_COUNT_LIMIT in NUMBER,
  X_REMIT_ALLOW_MULTIPLE_COPY_FL in VARCHAR2,
  X_INST_GROUP_BY_PAYMENT_DATE in VARCHAR2,
  X_INST_GROUP_BY_PAYMENT_CURREN in VARCHAR2,
  X_INST_GROUP_BY_INT_BANK_ACCT in VARCHAR2,
  X_INST_GROUP_BY_MAX_PAYMENTS in VARCHAR2,
  X_INST_GROUP_BY_PAY_SERVICE_RE in VARCHAR2,
  X_DCL_ONLY_FOREIGN_CURR_PMT_FL in VARCHAR2,
  X_DECLARATION_REPORT_FORMAT_CO in VARCHAR2,
  X_DECLARATION_CURR_FX_RATE_TYP in VARCHAR2,
  X_DECLARATION_CURRENCY_CODE in VARCHAR2,
  X_DECLARATION_THRESHOLD_AMOUNT in NUMBER,
  X_BANK_INSTRUCTION1_CODE in VARCHAR2,
  X_BANK_INSTRUCTION2_CODE in VARCHAR2,
  X_BANK_INSTRUCTION_DETAILS in VARCHAR2,
  X_PAYMENT_TEXT_MESSAGE1 in VARCHAR2,
  X_PAYMENT_TEXT_MESSAGE2 in VARCHAR2,
  X_ACK_TRANSMIT_PROTOCOL_CODE in VARCHAR2,
  X_ACK_SECURITY_PROTOCOL_CODE in VARCHAR2,
  X_SEND_TO_FILE_FLAG in VARCHAR2,
  X_PI_REGISTER_FORMAT in VARCHAR2,
  X_BEP_ACCOUNT_ID in NUMBER,
  X_APPLICABLE_PMT_METHOD in VARCHAR2,
  X_APPLICABLE_CURRENCY in VARCHAR2,
  X_APPLICABLE_PAYER_ORG in VARCHAR2,
  X_APPLICABLE_INT_BANK_ACCOUNT in VARCHAR2,
  X_BEP_SUFFIX in VARCHAR2,
  X_SECURITY_PROTOCOL_CODE in VARCHAR2,
  X_TRANSMIT_PROTOCOL_CODE in VARCHAR2,
  X_PAYMENT_FORMAT_CODE in VARCHAR2,
  X_POSITIVE_PAY_FORMAT_CODE in VARCHAR2,
  X_PAY_FILE_LETTER_FORMAT_CODE in VARCHAR2,
  X_PRINT_INSTRUCTION_IMMED_FLAG in VARCHAR2,
  X_PERIODIC_SEQUENCE_NAME_1 in VARCHAR2,
  X_PERIODIC_SEQUENCE_NAME_2 in VARCHAR2,
  X_PERIODIC_SEQUENCE_NAME_3 in VARCHAR2,
  X_PROCESSING_TYPE in VARCHAR2,
  X_MARK_COMPLETE_EVENT in VARCHAR2,
  X_MANUAL_MARK_COMPLETE_FLAG in VARCHAR2,
  X_DECLARATION_OPTION in VARCHAR2,
  X_SYSTEM_PROFILE_NAME in VARCHAR2,
  X_SYSTEM_PROFILE_DESCRIPTION in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER,
  X_ELECTRONIC_PROCESSING_CHNNL in VARCHAR2,
  X_LOGICAL_GROUPING_MODE in VARCHAR2,
  X_BATCH_BOOKING_FLAG in VARCHAR2,
  X_INST_GROUP_BY_PAYMENT_METHOD in VARCHAR2,
  X_INACTIVE_DATE in DATE
) is


l_jenl_eft_reporting_limit              NUMBER;
l_system_profile_code                   IBY_SYS_PMT_PROFILES_B.SYSTEM_PROFILE_CODE%TYPE;

TYPE t_sys_profile_code IS TABLE OF
     IBY_SYS_PMT_PROFILES_B.system_profile_code%TYPE
INDEX BY BINARY_INTEGER;

l_sys_profile_code_tab t_sys_profile_code;
l_sys_profile_code_tab_cnt number;



cursor get_sys_prof_code(X_SYSTEM_PROFILE_CODE IBY_SYS_PMT_PROFILES_B.system_profile_code%TYPE, l_jenl_eft_reporting_limit NUMBER)
IS
select system_profile_code
from
(SELECT DISTINCT(decode(sfgdf.org_id,
NULL,ppp.system_profile_code || '_' ||
to_char(cf.check_format_id),
ppp.system_profile_code || '_' || to_char
(cf.check_format_id) || '_' || sfgdf.org_id))
system_profile_code
FROM
ap_check_formats cf,
ap_check_stocks_all cs,
ce_upg_bank_accounts cba,
ap_payment_programs pp,
jg_zz_pay_format_info gdf,
    (SELECT(
   CASE
   WHEN sfa.jgzz_attribute_category =
'SE.JESEPBAI' THEN sfa.jgzz_system_info5
   END) AS
  payment_text_message1,
    (
   CASE
   WHEN sfa.jgzz_attribute_category =
'SE.JESEPBAI' THEN sfa.jgzz_system_info3
   END) AS
  payment_text_message2,
    (
   CASE
   WHEN sfa.jgzz_attribute_category =
'NO.JENOPTGN' THEN
sfa.jgzz_system_info20
   WHEN sfa.jgzz_attribute_category =
'SE.JESEPBAI' THEN sfa.jgzz_system_info10
   WHEN sfa.jgzz_attribute_category =
'SE.JESEPBSI' THEN sfa.jgzz_system_info8
   WHEN sfa.jgzz_attribute_category =
'SE.JESEPBUT' THEN sfa.jgzz_system_info8
   WHEN sfa.jgzz_attribute_category =
'SE.JESEPPOI' THEN sfa.jgzz_system_info11
   WHEN sfa.jgzz_attribute_category =
'SE.JESEPPOU' THEN sfa.jgzz_system_info10
   END) AS
  outbound_pmt_file_directory,
    (
   CASE
   WHEN sfa.jgzz_attribute_category =
'DE.JEDEDEFI' THEN decode
(sfa.jgzz_system_info3,    'Y',
'DECLARE_THROUGH_BANK',    'N',
'NO_DECLARATIONS',
sfa.jgzz_system_info3)
   WHEN sfa.jgzz_attribute_category =
'NL.JENLFFGN' THEN decode(
      l_jenl_eft_reporting_limit,
	   NULL,
	   'NO_DECLARATIONS',
	   'DECLARE_THROUGH_BANK')
    END)
  AS
  declaration_option,
    (
   CASE
   WHEN sfa.jgzz_attribute_category =
'DE.JEDEDEFI' THEN to_number
(sfa.jgzz_system_info5)
   WHEN sfa.jgzz_attribute_category =
'NL.JENLFFGN' THEN
      l_jenl_eft_reporting_limit
    END)
  AS
  declaration_threshold_amount,
    (
   CASE
   WHEN sfa.jgzz_attribute_category =
'DE.JEDEDEFI'
   AND sfa.jgzz_system_info5 IS NOT NULL
THEN 'EUR'
   WHEN sfa.jgzz_attribute_category =
'NL.JENLFFGN'
   AND
    l_jenl_eft_reporting_limit
    IS
    NOT NULL THEN
      'NLG'
     END)
  AS
  declaration_currency_code,
    (
   CASE
   WHEN sfa.jgzz_attribute_category =
'NL.JENLFFGN' THEN sfa.jgzz_system_info13
   WHEN sfa.jgzz_attribute_category =
'DE.JEDEDEFI' THEN decode
(sfa.jgzz_system_info3,    'Y',    'Corporate')
   END) AS
  declaration_curr_fx_rate_type,
     sfa.jgzz_attribute_category,
     SUBSTR(sfa.jgzz_attribute_category,
LENGTH(sfa.jgzz_country_code) + 2,
LENGTH(sfa.jgzz_attribute_category))
format_code,
     sfa.org_id
   FROM jg_zz_sys_formats_all_b sfa)
sfgdf,
  iby_formats_b ipf,
  iby_upg_ppp_b ppp,
  iby_bepinfo bep,
  iby_bepkeys KEY
WHERE cf.format_payments_program_id =
pp.program_id
 AND cf.check_format_id =
cs.check_format_id(+)
 AND cs.bank_account_id = cba.source_pk_id
(+)
 AND cba.source_application_id(+) = 200
 AND cf.check_format_id =
gdf.check_format_id(+)
 AND pp.program_name =
ipf.reference_format_code
 AND ipf.format_type_code =
'OUTBOUND_PAYMENT_INSTRUCTION'
 AND pp.program_name = sfgdf.format_code
(+)
 AND ppp.payment_format_code =
ipf.format_code
 AND ppp.bep_suffix = bep.suffix(+)
 AND bep.bepid = KEY.bepid(+)
 AND ppp.system_profile_code =
X_SYSTEM_PROFILE_CODE

UNION ALL

SELECT distinct(ppb.system_profile_code) system_profile_code
FROM iby_formats_b ipf,
  iby_upg_ppp_tl ppp,
  iby_upg_ppp_b ppb,
  iby_acct_pmt_profiles_b app,
  iby_bepinfo bep,
  iby_bepkeys key1
WHERE(ipf.reference_format_code IS NULL OR(ipf.reference_format_code IS NOT NULL
 AND ipf.reference_format_code NOT IN
  (SELECT pp.program_name
   FROM ap_check_formats cf,    ap_payment_programs pp
   WHERE cf.format_payments_program_id = pp.program_id)))
AND ppb.payment_format_code = ipf.format_code
 AND ipf.format_type_code = 'OUTBOUND_PAYMENT_INSTRUCTION'
 AND ppp.system_profile_code = app.system_profile_code
 AND ppp.system_profile_code = ppb.system_profile_code
 AND ppb.bep_suffix = bep.suffix(+)
 AND app.bep_account_id = key1.bep_account_id(+)
 AND ppp.system_profile_code = X_SYSTEM_PROFILE_CODE) SYSTEM_PROF_CODE_TABLE;


BEGIN

  BEGIN
    SELECT TO_NUMBER(x.profile_option_value)
      INTO l_jenl_eft_reporting_limit
      FROM (  SELECT o.profile_option_name, v.profile_option_value,
                     row_number() OVER (partition by o.profile_option_name
                                        order by count(*) desc) order_rank
                FROM fnd_profile_options o,
                     fnd_profile_option_values v
               WHERE o.profile_option_name = UPPER('JENL_REPORTING_THRESHOLD')
                 AND v.application_id = o.application_id
                 AND v.profile_option_id = o.profile_option_id
               GROUP BY o.profile_option_name, v.profile_option_value) x
     WHERE x.order_rank = 1;
  EXCEPTION
    WHEN others THEN NULL;
  END;



  -- kp_msg('The value for l_jenl_eft_reporting_limit: '|| l_jenl_eft_reporting_limit);

  -- kp_msg('The value for x_system_profile_code'|| X_SYSTEM_PROFILE_CODE||'*******');

  open get_sys_prof_code(X_SYSTEM_PROFILE_CODE,l_jenl_eft_reporting_limit);
  FETCH get_sys_prof_code BULK COLLECT INTO l_sys_profile_code_tab;
  l_sys_profile_code_tab_cnt := get_sys_prof_code%rowcount;
  CLOSE get_sys_prof_code;


  update IBY_UPG_PPP_B set
    REMIT_PMT_DETAILS_LENGTH_LIM = X_REMIT_PMT_DETAILS_LENGTH_LIM,
    REMIT_REMITTANCE_ADVICE_FORMAT = X_REMIT_REMITTANCE_ADVICE_FORM,
    REMIT_SRA_OVERRIDE_PAYEE_FLAG = X_REMIT_SRA_OVERRIDE_PAYEE_FLA,
    REMIT_ADVICE_DELIVERY_METHOD = X_REMIT_ADVICE_DELIVERY_METHOD,
    REMIT_AUTOMATIC_SRA_SUBMIT = X_REMIT_AUTOMATIC_SRA_SUBMIT,
    OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER,
    PMT_PAYMENT_DETAILS_FORMULA = X_PMT_PAYMENT_DETAILS_FORMULA,
    INST_GROUP_BY_LEGAL_ENTITY = X_INST_GROUP_BY_LEGAL_ENTITY,
    INST_GROUP_BY_BILL_PAYABLE = X_INST_GROUP_BY_BILL_PAYABLE,
    INST_GROUP_BY_MAX_INSTRUCTION = X_INST_GROUP_BY_MAX_INSTRUCTIO,
    INST_GROUP_BY_ORGANIZATION = X_INST_GROUP_BY_ORGANIZATION,
    INST_GROUP_BY_PAYMENT_FUNCTION = X_INST_GROUP_BY_PAYMENT_FUNCTI,
    INST_GROUP_BY_PAYMENT_REASON = X_INST_GROUP_BY_PAYMENT_REASON,
    INST_GROUP_BY_RFC = X_INST_GROUP_BY_RFC,
    INST_MAX_PAYMENTS_PER_INSTR = X_INST_MAX_PAYMENTS_PER_INSTR,
    INST_MAX_AMOUNT_PER_INSTR_VAL = X_INST_MAX_AMOUNT_PER_INSTR_VA,
    INST_MAX_AMOUNT_PER_INSTR_CURR = X_INST_MAX_AMOUNT_PER_INSTR_CU,
    INST_MAX_AMOUNT_FX_RATE_TYPE = X_INST_MAX_AMOUNT_FX_RATE_TYPE,
    INST_SORT_OPTION_1 = X_INST_SORT_OPTION_1,
    INST_SORT_ORDER_1 = X_INST_SORT_ORDER_1,
    INST_SORT_OPTION_2 = X_INST_SORT_OPTION_2,
    POSITIVE_PAY_DELIVERY_FLAG = X_POSITIVE_PAY_DELIVERY_FLAG,
    TRANSMIT_INSTR_IMMED_FLAG = X_TRANSMIT_INSTR_IMMED_FLAG,
    AUTOMATIC_PI_REG_SUBMIT = X_AUTOMATIC_PI_REG_SUBMIT,
    PMT_GROUP_BY_DELIVERY_CHANNEL = X_PMT_GROUP_BY_DELIVERY_CHANNE,
    PMT_GROUP_BY_REMITTANCE_MES = X_PMT_GROUP_BY_REMITTANCE_MES,
    PMT_GROUP_BY_MAX_DOCUMENTS = X_PMT_GROUP_BY_MAX_DOCUMENTS,
    PMT_GROUP_BY_UNIQUE_REMIT_ID = X_PMT_GROUP_BY_UNIQUE_REMIT_ID,
    PMT_GROUP_BY_SETTLE_PRIORITY = X_PMT_GROUP_BY_SETTLE_PRIORITY,
    PMT_GROUP_BY_PAYMENT_REASON = X_PMT_GROUP_BY_PAYMENT_REASON,
    PMT_GROUP_BY_DUE_DATE_FLAG = X_PMT_GROUP_BY_DUE_DATE_FLAG,
    PMT_MAX_DOCUMENTS_PER_PAYMENT = X_PMT_MAX_DOCUMENTS_PER_PAYMEN,
    PMT_PAYMENT_DETAILS_LENGTH_LIM = X_PMT_PAYMENT_DETAILS_LENGTH_L,
    PMT_GROUP_BY_PAYMENT_DETAILS = X_PMT_GROUP_BY_PAYMENT_DETAILS,
    PMT_GROUP_BY_BANK_CHARGE_BEAR = X_PMT_GROUP_BY_BANK_CHARGE_BEA,
    INST_SORT_ORDER_2 = X_INST_SORT_ORDER_2,
    INST_SORT_OPTION_3 = X_INST_SORT_OPTION_3,
    INST_SORT_ORDER_3 = X_INST_SORT_ORDER_3,
    REMIT_DOCUMENT_COUNT_LIMIT = X_REMIT_DOCUMENT_COUNT_LIMIT,
    REMIT_ALLOW_MULTIPLE_COPY_FLAG = X_REMIT_ALLOW_MULTIPLE_COPY_FL,
    INST_GROUP_BY_PAYMENT_DATE = X_INST_GROUP_BY_PAYMENT_DATE,
    INST_GROUP_BY_PAYMENT_CURRENCY = X_INST_GROUP_BY_PAYMENT_CURREN,
    INST_GROUP_BY_INT_BANK_ACCT = X_INST_GROUP_BY_INT_BANK_ACCT,
    INST_GROUP_BY_MAX_PAYMENTS = X_INST_GROUP_BY_MAX_PAYMENTS,
    INST_GROUP_BY_PAY_SERVICE_REQ = X_INST_GROUP_BY_PAY_SERVICE_RE,
    DCL_ONLY_FOREIGN_CURR_PMT_FLAG = X_DCL_ONLY_FOREIGN_CURR_PMT_FL,
    DECLARATION_REPORT_FORMAT_CODE = X_DECLARATION_REPORT_FORMAT_CO,
    DECLARATION_CURR_FX_RATE_TYPE = X_DECLARATION_CURR_FX_RATE_TYP,
    DECLARATION_CURRENCY_CODE = X_DECLARATION_CURRENCY_CODE,
    DECLARATION_THRESHOLD_AMOUNT = X_DECLARATION_THRESHOLD_AMOUNT,
    BANK_INSTRUCTION1_CODE = X_BANK_INSTRUCTION1_CODE,
    BANK_INSTRUCTION2_CODE = X_BANK_INSTRUCTION2_CODE,
    BANK_INSTRUCTION_DETAILS = X_BANK_INSTRUCTION_DETAILS,
    PAYMENT_TEXT_MESSAGE1 = X_PAYMENT_TEXT_MESSAGE1,
    PAYMENT_TEXT_MESSAGE2 = X_PAYMENT_TEXT_MESSAGE2,
    ACK_TRANSMIT_PROTOCOL_CODE = X_ACK_TRANSMIT_PROTOCOL_CODE,
    ACK_SECURITY_PROTOCOL_CODE = X_ACK_SECURITY_PROTOCOL_CODE,
    SEND_TO_FILE_FLAG = X_SEND_TO_FILE_FLAG,
    PI_REGISTER_FORMAT = X_PI_REGISTER_FORMAT,
    BEP_ACCOUNT_ID = X_BEP_ACCOUNT_ID,
    APPLICABLE_PMT_METHOD = X_APPLICABLE_PMT_METHOD,
    APPLICABLE_CURRENCY = X_APPLICABLE_CURRENCY,
    APPLICABLE_PAYER_ORG = X_APPLICABLE_PAYER_ORG,
    APPLICABLE_INT_BANK_ACCOUNT = X_APPLICABLE_INT_BANK_ACCOUNT,
    BEP_SUFFIX = X_BEP_SUFFIX,
    SECURITY_PROTOCOL_CODE = X_SECURITY_PROTOCOL_CODE,
    TRANSMIT_PROTOCOL_CODE = X_TRANSMIT_PROTOCOL_CODE,
    PAYMENT_FORMAT_CODE = X_PAYMENT_FORMAT_CODE,
    POSITIVE_PAY_FORMAT_CODE = X_POSITIVE_PAY_FORMAT_CODE,
    PAY_FILE_LETTER_FORMAT_CODE = X_PAY_FILE_LETTER_FORMAT_CODE,
    PRINT_INSTRUCTION_IMMED_FLAG = X_PRINT_INSTRUCTION_IMMED_FLAG,
    PERIODIC_SEQUENCE_NAME_1 = X_PERIODIC_SEQUENCE_NAME_1,
    PERIODIC_SEQUENCE_NAME_2 = X_PERIODIC_SEQUENCE_NAME_2,
    PERIODIC_SEQUENCE_NAME_3 = X_PERIODIC_SEQUENCE_NAME_3,
    PROCESSING_TYPE = X_PROCESSING_TYPE,
    MARK_COMPLETE_EVENT = X_MARK_COMPLETE_EVENT,
    MANUAL_MARK_COMPLETE_FLAG = X_MANUAL_MARK_COMPLETE_FLAG,
    DECLARATION_OPTION = X_DECLARATION_OPTION,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    ELECTRONIC_PROCESSING_CHANNEL = X_ELECTRONIC_PROCESSING_CHNNL,
    LOGICAL_GROUPING_MODE = X_LOGICAL_GROUPING_MODE,
    BATCH_BOOKING_FLAG = X_BATCH_BOOKING_FLAG,
    INST_GROUP_BY_PAYMENT_METHOD = X_INST_GROUP_BY_PAYMENT_METHOD,
    INACTIVE_DATE = X_INACTIVE_DATE

  where SYSTEM_PROFILE_CODE = X_SYSTEM_PROFILE_CODE;

  if (sql%notfound) then
    raise no_data_found;
  end if;

-- Uncomment the below code for debugging..
-- kp_msg('The updation of iby_upg_ppp_b tables has been done successfully');
-- CODE TO UPDATE BASE TABLES

/* Added IF Conditions for fixing Bug# 8691900 */
IF(l_sys_profile_code_tab_cnt > 0) THEN
FOR i IN l_sys_profile_code_tab.FIRST .. l_sys_profile_code_tab.LAST LOOP

--kp_msg('Inside the loop for i=' || i|| '; value of sys_prof_code =' ||l_sys_profile_code_tab(i));

  update iby_sys_pmt_profiles_b set
        payment_format_code = X_PAYMENT_FORMAT_CODE,
        print_instruction_immed_flag = X_PRINT_INSTRUCTION_IMMED_FLAG,
        processing_type = X_PROCESSING_TYPE,
        mark_complete_event = X_MARK_COMPLETE_EVENT,
        manual_mark_complete_flag = X_MANUAL_MARK_COMPLETE_FLAG,
        positive_pay_delivery_flag= X_POSITIVE_PAY_DELIVERY_FLAG,
        object_version_number= X_OBJECT_VERSION_NUMBER,
        transmit_instr_immed_flag= X_TRANSMIT_INSTR_IMMED_FLAG,
        automatic_pi_reg_submit = X_AUTOMATIC_PI_REG_SUBMIT,
        send_to_file_flag = X_SEND_TO_FILE_FLAG,
        dcl_only_foreign_curr_pmt_flag = X_DCL_ONLY_FOREIGN_CURR_PMT_FL,
        security_protocol_code = X_SECURITY_PROTOCOL_CODE,
        transmit_protocol_code = X_TRANSMIT_PROTOCOL_CODE,
        positive_pay_format_code = X_POSITIVE_PAY_FORMAT_CODE,
        pay_file_letter_format_code = X_PAY_FILE_LETTER_FORMAT_CODE,
        periodic_sequence_name_1 = X_PERIODIC_SEQUENCE_NAME_1,
        periodic_sequence_name_2= X_PERIODIC_SEQUENCE_NAME_2,
        periodic_sequence_name_3= X_PERIODIC_SEQUENCE_NAME_3,
        declaration_option= X_DECLARATION_OPTION,
        declaration_report_format_code =X_DECLARATION_REPORT_FORMAT_CO,
        declaration_curr_fx_rate_type = X_DECLARATION_CURR_FX_RATE_TYP,
        declaration_currency_code = X_DECLARATION_CURRENCY_CODE,
        declaration_threshold_amount = X_DECLARATION_THRESHOLD_AMOUNT,
        bank_instruction1_code= X_BANK_INSTRUCTION1_CODE,
        bank_instruction2_code= X_BANK_INSTRUCTION2_CODE,
        bank_instruction_details = X_BANK_INSTRUCTION_DETAILS,
        payment_text_message1= X_PAYMENT_TEXT_MESSAGE1,
        payment_text_message2=X_PAYMENT_TEXT_MESSAGE2,
        ack_transmit_protocol_code = X_ACK_TRANSMIT_PROTOCOL_CODE,
        ack_security_protocol_code= X_ACK_SECURITY_PROTOCOL_CODE,
        pi_register_format= X_PI_REGISTER_FORMAT,
        electronic_processing_channel=  X_ELECTRONIC_PROCESSING_CHNNL,
	logical_grouping_mode=X_LOGICAL_GROUPING_MODE,
        BATCH_BOOKING_FLAG = X_BATCH_BOOKING_FLAG,
	LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
        LAST_UPDATED_BY = X_LAST_UPDATED_BY,
        LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
        INACTIVE_DATE = X_INACTIVE_DATE
  where SYSTEM_PROFILE_CODE = l_sys_profile_code_tab(i);


  /* Commented the code below for fixing Bug# 8691900 */
  /*if (sql%notfound) then
    raise no_data_found;
  end if;*/

--  kp_msg('The updation of iby_sys_pmt_profiles_b tables has been done successfully');

  update IBY_PMT_CREATION_RULES set
    group_by_delivery_channel = X_PMT_GROUP_BY_DELIVERY_CHANNE,
    group_by_remittance_message = X_PMT_GROUP_BY_REMITTANCE_MES,
    group_by_max_documents_flag = X_PMT_GROUP_BY_MAX_DOCUMENTS,
    group_by_unique_remit_id_flag = X_PMT_GROUP_BY_UNIQUE_REMIT_ID,
    group_by_settle_priority_flag = X_PMT_GROUP_BY_SETTLE_PRIORITY,
    group_by_payment_reason = X_PMT_GROUP_BY_PAYMENT_REASON,
    group_by_due_date_flag = X_PMT_GROUP_BY_DUE_DATE_FLAG,
    max_documents_per_payment = X_PMT_MAX_DOCUMENTS_PER_PAYMEN,
    payment_details_length_limit = X_PMT_PAYMENT_DETAILS_LENGTH_L,
    payment_details_formula = X_PMT_PAYMENT_DETAILS_FORMULA,
    group_by_payment_details_flag = X_PMT_GROUP_BY_PAYMENT_DETAILS,
    group_by_bank_charge_bearer = X_PMT_GROUP_BY_BANK_CHARGE_BEA,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN
 where system_profile_code = l_sys_profile_code_tab(i);

 /* Commented the code below for fixing Bug# 8691900 */
  /*if (sql%notfound) then
    raise no_data_found;
  end if;*/

  update iby_acct_pmt_profiles_b set
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    BEP_ACCOUNT_ID = X_BEP_ACCOUNT_ID
  where SYSTEM_PROFILE_CODE = l_sys_profile_code_tab(i) ;

 /* Commented the code below for fixing Bug# 8691900 */
  /*if (sql%notfound) then
    raise no_data_found;
  end if;*/

  update iby_instr_creation_rules set
     group_by_payment_date= X_INST_GROUP_BY_PAYMENT_DATE,
     group_by_payment_currency = X_INST_GROUP_BY_PAYMENT_CURREN,
     group_by_internal_bank_account = X_INST_GROUP_BY_INT_BANK_ACCT,
     group_by_max_payments_flag = X_INST_GROUP_BY_MAX_PAYMENTS,
     group_by_pay_service_request = X_INST_GROUP_BY_PAY_SERVICE_RE,
     group_by_legal_entity = X_INST_GROUP_BY_LEGAL_ENTITY,
     group_by_bill_payable = X_INST_GROUP_BY_BILL_PAYABLE,
     group_by_organization = X_INST_GROUP_BY_ORGANIZATION,
     group_by_max_instruction_flag = X_INST_GROUP_BY_MAX_INSTRUCTIO,
     group_by_payment_function = X_INST_GROUP_BY_PAYMENT_FUNCTI,
     group_by_payment_reason = X_INST_GROUP_BY_PAYMENT_REASON,
     group_by_rfc= X_INST_GROUP_BY_RFC,
     max_payments_per_instruction = X_INST_MAX_PAYMENTS_PER_INSTR,
     max_amount_per_instr_value = X_INST_MAX_AMOUNT_PER_INSTR_VA,
     max_amount_per_instr_curr_code= X_INST_MAX_AMOUNT_PER_INSTR_CU,
     max_amount_fx_rate_type=  X_INST_MAX_AMOUNT_FX_RATE_TYPE,
     SORT_OPTION_1 = X_INST_SORT_OPTION_1,
     SORT_ORDER_1 = X_INST_SORT_ORDER_1,
     SORT_OPTION_2 = X_INST_SORT_OPTION_2,
     SORT_ORDER_2 = X_INST_SORT_ORDER_2,
     SORT_OPTION_3 = X_INST_SORT_OPTION_3,
     SORT_ORDER_3 = X_INST_SORT_ORDER_3,
     group_by_payment_method = X_INST_GROUP_BY_PAYMENT_METHOD,
     LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
     LAST_UPDATED_BY = X_LAST_UPDATED_BY,
     LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN
  where SYSTEM_PROFILE_CODE = l_sys_profile_code_tab(i) ;

 /* Commented the code below for fixing Bug# 8691900 */
  /*if (sql%notfound) then
    raise no_data_found;
  end if;*/

-- kp_msg('The updation of iby_instr_creation_rules tables has been done successfully');

 update iby_remit_advice_setup set
    document_count_limit = X_REMIT_DOCUMENT_COUNT_LIMIT,
    allow_multiple_copy_flag = X_REMIT_ALLOW_MULTIPLE_COPY_FL,
    remittance_advice_format_code = X_REMIT_REMITTANCE_ADVICE_FORM,
    sra_override_payee_flag = X_REMIT_SRA_OVERRIDE_PAYEE_FLA,
    REMIT_ADVICE_DELIVERY_METHOD = X_REMIT_ADVICE_DELIVERY_METHOD,
    automatic_sra_submit_flag = X_REMIT_AUTOMATIC_SRA_SUBMIT,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN
 where system_profile_code = l_sys_profile_code_tab(i);

 /* Commented the code below for fixing Bug# 8691900 */
  /*if (sql%notfound) then
    raise no_data_found;
  end if;*/

 END LOOP;
 END IF;

  update IBY_UPG_PPP_TL set
    SYSTEM_PROFILE_NAME = X_SYSTEM_PROFILE_NAME,
    SYSTEM_PROFILE_DESCRIPTION = X_SYSTEM_PROFILE_DESCRIPTION,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    SOURCE_LANG = userenv('LANG')
  where SYSTEM_PROFILE_CODE = X_SYSTEM_PROFILE_CODE
  and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

  if (sql%notfound) then
    raise no_data_found;
  end if;
end UPDATE_ROW;

procedure DELETE_ROW (
  X_SYSTEM_PROFILE_CODE in VARCHAR2
) is
begin
  delete from IBY_UPG_PPP_TL
  where SYSTEM_PROFILE_CODE = X_SYSTEM_PROFILE_CODE;

  /* Commented the code below for fixing Bug# 8691900 */
  /*if (sql%notfound) then
    raise no_data_found;
  end if;*/

  delete from IBY_UPG_PPP_B
  where SYSTEM_PROFILE_CODE = X_SYSTEM_PROFILE_CODE;

  /* Commented the code below for fixing Bug# 8691900 */
  /*if (sql%notfound) then
    raise no_data_found;
  end if;*/

end DELETE_ROW;

procedure ADD_LANGUAGE
is
begin
  delete from IBY_UPG_PPP_TL T
  where not exists
    (select NULL
    from IBY_UPG_PPP_B B
    where B.SYSTEM_PROFILE_CODE = T.SYSTEM_PROFILE_CODE
    );

  update IBY_UPG_PPP_TL T set (
      SYSTEM_PROFILE_NAME,
      SYSTEM_PROFILE_DESCRIPTION
    ) = (select
      B.SYSTEM_PROFILE_NAME,
      B.SYSTEM_PROFILE_DESCRIPTION
    from IBY_UPG_PPP_TL B
    where B.SYSTEM_PROFILE_CODE = T.SYSTEM_PROFILE_CODE
    and B.LANGUAGE = T.SOURCE_LANG)
  where (
      T.SYSTEM_PROFILE_CODE,
      T.LANGUAGE
  ) in (select
      SUBT.SYSTEM_PROFILE_CODE,
      SUBT.LANGUAGE
    from IBY_UPG_PPP_TL SUBB, IBY_UPG_PPP_TL SUBT
    where SUBB.SYSTEM_PROFILE_CODE = SUBT.SYSTEM_PROFILE_CODE
    and SUBB.LANGUAGE = SUBT.SOURCE_LANG
    and (SUBB.SYSTEM_PROFILE_NAME <> SUBT.SYSTEM_PROFILE_NAME
      or SUBB.SYSTEM_PROFILE_DESCRIPTION <> SUBT.SYSTEM_PROFILE_DESCRIPTION
      or (SUBB.SYSTEM_PROFILE_DESCRIPTION is null and SUBT.SYSTEM_PROFILE_DESCRIPTION is not null)
      or (SUBB.SYSTEM_PROFILE_DESCRIPTION is not null and SUBT.SYSTEM_PROFILE_DESCRIPTION is null)
  ));

  insert into IBY_UPG_PPP_TL (
    SYSTEM_PROFILE_CODE,
    SYSTEM_PROFILE_NAME,
    SYSTEM_PROFILE_DESCRIPTION,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    OBJECT_VERSION_NUMBER,
    LANGUAGE,
    SOURCE_LANG
  ) select /*+ ORDERED */
    B.SYSTEM_PROFILE_CODE,
    B.SYSTEM_PROFILE_NAME,
    B.SYSTEM_PROFILE_DESCRIPTION,
    B.CREATED_BY,
    B.CREATION_DATE,
    B.LAST_UPDATED_BY,
    B.LAST_UPDATE_DATE,
    B.LAST_UPDATE_LOGIN,
    B.OBJECT_VERSION_NUMBER,
    L.LANGUAGE_CODE,
    B.SOURCE_LANG
  from IBY_UPG_PPP_TL B, FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and B.LANGUAGE = userenv('LANG')
  and not exists
    (select NULL
    from IBY_UPG_PPP_TL T
    where T.SYSTEM_PROFILE_CODE = B.SYSTEM_PROFILE_CODE
    and T.LANGUAGE = L.LANGUAGE_CODE);
end ADD_LANGUAGE;

procedure LOAD_ROW (
  X_SYSTEM_PROFILE_CODE in VARCHAR2,
  X_BEP_SUFFIX in VARCHAR2,
  X_SECURITY_PROTOCOL_CODE in VARCHAR2,
  X_TRANSMIT_PROTOCOL_CODE in VARCHAR2,
  X_PAYMENT_FORMAT_CODE in VARCHAR2,
  X_POSITIVE_PAY_FORMAT_CODE in VARCHAR2,
  X_PAY_FILE_LETTER_FORMAT_CODE in VARCHAR2,
  X_PRINT_INSTRUCTION_IMMED_FLAG in VARCHAR2,
  X_PERIODIC_SEQUENCE_NAME_1 in VARCHAR2,
  X_PERIODIC_SEQUENCE_NAME_2 in VARCHAR2,
  X_PERIODIC_SEQUENCE_NAME_3 in VARCHAR2,
  X_PROCESSING_TYPE in VARCHAR2,
  X_MARK_COMPLETE_EVENT in VARCHAR2,
  X_MANUAL_MARK_COMPLETE_FLAG in VARCHAR2,
  X_POSITIVE_PAY_DELIVERY_FLAG in VARCHAR2,
  X_TRANSMIT_INSTR_IMMED_FLAG in VARCHAR2,
  X_AUTOMATIC_PI_REG_SUBMIT in VARCHAR2,
  X_DECLARATION_OPTION in VARCHAR2,
  X_DCL_ONLY_FOREIGN_CURR_PMT_FL in VARCHAR2,
  X_DECLARATION_REPORT_FORMAT_CO in VARCHAR2,
  X_DECLARATION_CURR_FX_RATE_TYP in VARCHAR2,
  X_DECLARATION_CURRENCY_CODE in VARCHAR2,
  X_DECLARATION_THRESHOLD_AMOUNT in NUMBER,
  X_BANK_INSTRUCTION1_CODE in VARCHAR2,
  X_BANK_INSTRUCTION2_CODE in VARCHAR2,
  X_BANK_INSTRUCTION_DETAILS in VARCHAR2,
  X_PAYMENT_TEXT_MESSAGE1 in VARCHAR2,
  X_PAYMENT_TEXT_MESSAGE2 in VARCHAR2,
  X_ACK_TRANSMIT_PROTOCOL_CODE in VARCHAR2,
  X_ACK_SECURITY_PROTOCOL_CODE in VARCHAR2,
  X_SEND_TO_FILE_FLAG in VARCHAR2,
  X_PI_REGISTER_FORMAT in VARCHAR2,
  X_BEP_ACCOUNT_ID in NUMBER,
  X_APPLICABLE_PMT_METHOD in VARCHAR2,
  X_APPLICABLE_CURRENCY in VARCHAR2,
  X_APPLICABLE_PAYER_ORG in VARCHAR2,
  X_APPLICABLE_INT_BANK_ACCOUNT in VARCHAR2,
  X_PMT_GROUP_BY_PAYMENT_DETAILS in VARCHAR2,
  X_PMT_GROUP_BY_BANK_CHARGE_BEA in VARCHAR2,
  X_PMT_GROUP_BY_DELIVERY_CHANNE in VARCHAR2,
  X_PMT_GROUP_BY_REMITTANCE_MES in VARCHAR2,
  X_PMT_GROUP_BY_MAX_DOCUMENTS in VARCHAR2,
  X_PMT_GROUP_BY_UNIQUE_REMIT_ID in VARCHAR2,
  X_PMT_GROUP_BY_SETTLE_PRIORITY in VARCHAR2,
  X_PMT_GROUP_BY_PAYMENT_REASON in VARCHAR2,
  X_PMT_GROUP_BY_DUE_DATE_FLAG in VARCHAR2,
  X_PMT_MAX_DOCUMENTS_PER_PAYMEN in NUMBER,
  X_PMT_PAYMENT_DETAILS_LENGTH_L in NUMBER,
  X_PMT_PAYMENT_DETAILS_FORMULA in VARCHAR2,
  X_INST_GROUP_BY_PAYMENT_DATE in VARCHAR2,
  X_INST_GROUP_BY_PAYMENT_CURREN in VARCHAR2,
  X_INST_GROUP_BY_INT_BANK_ACCT in VARCHAR2,
  X_INST_GROUP_BY_MAX_PAYMENTS in VARCHAR2,
  X_INST_GROUP_BY_PAY_SERVICE_RE in VARCHAR2,
  X_INST_GROUP_BY_LEGAL_ENTITY in VARCHAR2,
  X_INST_GROUP_BY_BILL_PAYABLE in VARCHAR2,
  X_INST_GROUP_BY_MAX_INSTRUCTIO in VARCHAR2,
  X_INST_GROUP_BY_ORGANIZATION in VARCHAR2,
  X_INST_GROUP_BY_PAYMENT_FUNCTI in VARCHAR2,
  X_INST_GROUP_BY_PAYMENT_REASON in VARCHAR2,
  X_INST_GROUP_BY_RFC in VARCHAR2,
  X_INST_MAX_PAYMENTS_PER_INSTR in NUMBER,
  X_INST_MAX_AMOUNT_PER_INSTR_VA in NUMBER,
  X_INST_MAX_AMOUNT_PER_INSTR_CU in VARCHAR2,
  X_INST_MAX_AMOUNT_FX_RATE_TYPE in VARCHAR2,
  X_INST_SORT_OPTION_1 in VARCHAR2,
  X_INST_SORT_ORDER_1 in VARCHAR2,
  X_INST_SORT_OPTION_2 in VARCHAR2,
  X_INST_SORT_ORDER_2 in VARCHAR2,
  X_INST_SORT_OPTION_3 in VARCHAR2,
  X_INST_SORT_ORDER_3 in VARCHAR2,
  X_REMIT_DOCUMENT_COUNT_LIMIT in NUMBER,
  X_REMIT_ALLOW_MULTIPLE_COPY_FL in VARCHAR2,
  X_REMIT_PMT_DETAILS_LENGTH_LIM in NUMBER,
  X_REMIT_REMITTANCE_ADVICE_FORM in VARCHAR2,
  X_REMIT_SRA_OVERRIDE_PAYEE_FLA in VARCHAR2,
  X_REMIT_ADVICE_DELIVERY_METHOD in VARCHAR2,
  X_REMIT_AUTOMATIC_SRA_SUBMIT in VARCHAR2,
  X_SYSTEM_PROFILE_NAME in VARCHAR2,
  X_SYSTEM_PROFILE_DESCRIPTION in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_ELECTRONIC_PROCESSING_CHNNL in VARCHAR2,
  X_LOGICAL_GROUPING_MODE in VARCHAR2,
  X_BATCH_BOOKING_FLAG in VARCHAR2,
  X_INST_GROUP_BY_PAYMENT_METHOD in VARCHAR2,
  X_INACTIVE_DATE in DATE
)
  is
      row_id VARCHAR2(200);
  begin

UPDATE_ROW (
  X_SYSTEM_PROFILE_CODE,
  X_REMIT_PMT_DETAILS_LENGTH_LIM,
  X_REMIT_REMITTANCE_ADVICE_FORM,
  X_REMIT_SRA_OVERRIDE_PAYEE_FLA,
  X_REMIT_ADVICE_DELIVERY_METHOD,
  X_REMIT_AUTOMATIC_SRA_SUBMIT,
  X_OBJECT_VERSION_NUMBER,
  X_PMT_PAYMENT_DETAILS_FORMULA,
  X_INST_GROUP_BY_LEGAL_ENTITY,
  X_INST_GROUP_BY_BILL_PAYABLE,
  X_INST_GROUP_BY_MAX_INSTRUCTIO,
  X_INST_GROUP_BY_ORGANIZATION,
  X_INST_GROUP_BY_PAYMENT_FUNCTI,
  X_INST_GROUP_BY_PAYMENT_REASON,
  X_INST_GROUP_BY_RFC,
  X_INST_MAX_PAYMENTS_PER_INSTR,
  X_INST_MAX_AMOUNT_PER_INSTR_VA,
  X_INST_MAX_AMOUNT_PER_INSTR_CU,
  X_INST_MAX_AMOUNT_FX_RATE_TYPE,
  X_INST_SORT_OPTION_1,
  X_INST_SORT_ORDER_1,
  X_INST_SORT_OPTION_2,
  X_POSITIVE_PAY_DELIVERY_FLAG,
  X_TRANSMIT_INSTR_IMMED_FLAG,
  X_AUTOMATIC_PI_REG_SUBMIT,
  X_PMT_GROUP_BY_DELIVERY_CHANNE,
  X_PMT_GROUP_BY_REMITTANCE_MES,
  X_PMT_GROUP_BY_MAX_DOCUMENTS,
  X_PMT_GROUP_BY_UNIQUE_REMIT_ID,
  X_PMT_GROUP_BY_SETTLE_PRIORITY,
  X_PMT_GROUP_BY_PAYMENT_REASON,
  X_PMT_GROUP_BY_DUE_DATE_FLAG,
  X_PMT_MAX_DOCUMENTS_PER_PAYMEN,
  X_PMT_PAYMENT_DETAILS_LENGTH_L,
  X_PMT_GROUP_BY_PAYMENT_DETAILS,
  X_PMT_GROUP_BY_BANK_CHARGE_BEA,
  X_INST_SORT_ORDER_2,
  X_INST_SORT_OPTION_3,
  X_INST_SORT_ORDER_3,
  X_REMIT_DOCUMENT_COUNT_LIMIT,
  X_REMIT_ALLOW_MULTIPLE_COPY_FL,
  X_INST_GROUP_BY_PAYMENT_DATE,
  X_INST_GROUP_BY_PAYMENT_CURREN,
  X_INST_GROUP_BY_INT_BANK_ACCT,
  X_INST_GROUP_BY_MAX_PAYMENTS,
  X_INST_GROUP_BY_PAY_SERVICE_RE,
  X_DCL_ONLY_FOREIGN_CURR_PMT_FL,
  X_DECLARATION_REPORT_FORMAT_CO,
  X_DECLARATION_CURR_FX_RATE_TYP,
  X_DECLARATION_CURRENCY_CODE,
  X_DECLARATION_THRESHOLD_AMOUNT,
  X_BANK_INSTRUCTION1_CODE,
  X_BANK_INSTRUCTION2_CODE,
  X_BANK_INSTRUCTION_DETAILS,
  X_PAYMENT_TEXT_MESSAGE1,
  X_PAYMENT_TEXT_MESSAGE2,
  X_ACK_TRANSMIT_PROTOCOL_CODE,
  X_ACK_SECURITY_PROTOCOL_CODE,
  X_SEND_TO_FILE_FLAG,
  X_PI_REGISTER_FORMAT,
  X_BEP_ACCOUNT_ID,
  X_APPLICABLE_PMT_METHOD,
  X_APPLICABLE_CURRENCY,
  X_APPLICABLE_PAYER_ORG,
  X_APPLICABLE_INT_BANK_ACCOUNT,
  X_BEP_SUFFIX,
  X_SECURITY_PROTOCOL_CODE,
  X_TRANSMIT_PROTOCOL_CODE,
  X_PAYMENT_FORMAT_CODE,
  X_POSITIVE_PAY_FORMAT_CODE,
  X_PAY_FILE_LETTER_FORMAT_CODE,
  X_PRINT_INSTRUCTION_IMMED_FLAG,
  X_PERIODIC_SEQUENCE_NAME_1,
  X_PERIODIC_SEQUENCE_NAME_2,
  X_PERIODIC_SEQUENCE_NAME_3,
  X_PROCESSING_TYPE,
  X_MARK_COMPLETE_EVENT,
  X_MANUAL_MARK_COMPLETE_FLAG,
  X_DECLARATION_OPTION,
  X_SYSTEM_PROFILE_NAME,
  X_SYSTEM_PROFILE_DESCRIPTION,
  X_LAST_UPDATE_DATE,
  X_LAST_UPDATED_BY,
  X_LAST_UPDATE_LOGIN,
  X_ELECTRONIC_PROCESSING_CHNNL,
  X_LOGICAL_GROUPING_MODE,
  X_BATCH_BOOKING_FLAG,
  X_INST_GROUP_BY_PAYMENT_METHOD,
  X_INACTIVE_DATE);

  exception
    when no_data_found then
INSERT_ROW (
  row_id,
  X_SYSTEM_PROFILE_CODE,
  X_REMIT_PMT_DETAILS_LENGTH_LIM,
  X_REMIT_REMITTANCE_ADVICE_FORM,
  X_REMIT_SRA_OVERRIDE_PAYEE_FLA,
  X_REMIT_ADVICE_DELIVERY_METHOD,
  X_REMIT_AUTOMATIC_SRA_SUBMIT,
  X_OBJECT_VERSION_NUMBER,
  X_PMT_PAYMENT_DETAILS_FORMULA,
  X_INST_GROUP_BY_LEGAL_ENTITY,
  X_INST_GROUP_BY_BILL_PAYABLE,
  X_INST_GROUP_BY_MAX_INSTRUCTIO,
  X_INST_GROUP_BY_ORGANIZATION,
  X_INST_GROUP_BY_PAYMENT_FUNCTI,
  X_INST_GROUP_BY_PAYMENT_REASON,
  X_INST_GROUP_BY_RFC,
  X_INST_MAX_PAYMENTS_PER_INSTR,
  X_INST_MAX_AMOUNT_PER_INSTR_VA,
  X_INST_MAX_AMOUNT_PER_INSTR_CU,
  X_INST_MAX_AMOUNT_FX_RATE_TYPE,
  X_INST_SORT_OPTION_1,
  X_INST_SORT_ORDER_1,
  X_INST_SORT_OPTION_2,
  X_POSITIVE_PAY_DELIVERY_FLAG,
  X_TRANSMIT_INSTR_IMMED_FLAG,
  X_AUTOMATIC_PI_REG_SUBMIT,
  X_PMT_GROUP_BY_DELIVERY_CHANNE,
  X_PMT_GROUP_BY_REMITTANCE_MES,
  X_PMT_GROUP_BY_MAX_DOCUMENTS,
  X_PMT_GROUP_BY_UNIQUE_REMIT_ID,
  X_PMT_GROUP_BY_SETTLE_PRIORITY,
  X_PMT_GROUP_BY_PAYMENT_REASON,
  X_PMT_GROUP_BY_DUE_DATE_FLAG,
  X_PMT_MAX_DOCUMENTS_PER_PAYMEN,
  X_PMT_PAYMENT_DETAILS_LENGTH_L,
  X_PMT_GROUP_BY_PAYMENT_DETAILS,
  X_PMT_GROUP_BY_BANK_CHARGE_BEA,
  X_INST_SORT_ORDER_2,
  X_INST_SORT_OPTION_3,
  X_INST_SORT_ORDER_3,
  X_REMIT_DOCUMENT_COUNT_LIMIT,
  X_REMIT_ALLOW_MULTIPLE_COPY_FL,
  X_INST_GROUP_BY_PAYMENT_DATE,
  X_INST_GROUP_BY_PAYMENT_CURREN,
  X_INST_GROUP_BY_INT_BANK_ACCT,
  X_INST_GROUP_BY_MAX_PAYMENTS,
  X_INST_GROUP_BY_PAY_SERVICE_RE,
  X_DCL_ONLY_FOREIGN_CURR_PMT_FL,
  X_DECLARATION_REPORT_FORMAT_CO,
  X_DECLARATION_CURR_FX_RATE_TYP,
  X_DECLARATION_CURRENCY_CODE,
  X_DECLARATION_THRESHOLD_AMOUNT,
  X_BANK_INSTRUCTION1_CODE,
  X_BANK_INSTRUCTION2_CODE,
  X_BANK_INSTRUCTION_DETAILS,
  X_PAYMENT_TEXT_MESSAGE1,
  X_PAYMENT_TEXT_MESSAGE2,
  X_ACK_TRANSMIT_PROTOCOL_CODE,
  X_ACK_SECURITY_PROTOCOL_CODE,
  X_SEND_TO_FILE_FLAG,
  X_PI_REGISTER_FORMAT,
  X_BEP_ACCOUNT_ID,
  X_APPLICABLE_PMT_METHOD,
  X_APPLICABLE_CURRENCY,
  X_APPLICABLE_PAYER_ORG,
  X_APPLICABLE_INT_BANK_ACCOUNT,
  X_BEP_SUFFIX,
  X_SECURITY_PROTOCOL_CODE,
  X_TRANSMIT_PROTOCOL_CODE,
  X_PAYMENT_FORMAT_CODE,
  X_POSITIVE_PAY_FORMAT_CODE,
  X_PAY_FILE_LETTER_FORMAT_CODE,
  X_PRINT_INSTRUCTION_IMMED_FLAG,
  X_PERIODIC_SEQUENCE_NAME_1,
  X_PERIODIC_SEQUENCE_NAME_2,
  X_PERIODIC_SEQUENCE_NAME_3,
  X_PROCESSING_TYPE,
  X_MARK_COMPLETE_EVENT,
  X_MANUAL_MARK_COMPLETE_FLAG,
  X_DECLARATION_OPTION,
  X_SYSTEM_PROFILE_NAME,
  X_SYSTEM_PROFILE_DESCRIPTION,
  X_CREATION_DATE,
  X_CREATED_BY,
  X_LAST_UPDATE_DATE,
  X_LAST_UPDATED_BY,
  X_LAST_UPDATE_LOGIN,
  X_ELECTRONIC_PROCESSING_CHNNL,
  X_LOGICAL_GROUPING_MODE,
  X_BATCH_BOOKING_FLAG,
  X_INST_GROUP_BY_PAYMENT_METHOD,
  X_INACTIVE_DATE);

end LOAD_ROW;

procedure TRANSLATE_ROW (
  X_SYSTEM_PROFILE_CODE in VARCHAR2,
  X_SYSTEM_PROFILE_NAME in VARCHAR2,
  X_SYSTEM_PROFILE_DESCRIPTION in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER)
  is
  begin
    update IBY_UPG_PPP_TL set
    SYSTEM_PROFILE_NAME = X_SYSTEM_PROFILE_NAME,
    SYSTEM_PROFILE_DESCRIPTION = X_SYSTEM_PROFILE_DESCRIPTION,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    SOURCE_LANG = userenv('LANG')
  where SYSTEM_PROFILE_CODE = X_SYSTEM_PROFILE_CODE
  and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

  if (sql%notfound) then
    raise no_data_found;
  end if;

  end TRANSLATE_ROW;

    PROCEDURE set_sys_user_profiles IS
    l_user_id                             NUMBER(15);
  l_login_id                            NUMBER(15);
  l_sysdate                             DATE;
  l_suffix                              iby_bepinfo.suffix%TYPE;
  l_mpayeeid                            iby_payee.mpayeeid%TYPE;
  l_rowid_system                        ROWID;
  l_rowid_user                          ROWID;
  l_payeeid                             iby_payee.payeeid%TYPE;
  l_receipt_method_id                   ar_receipt_methods.receipt_method_id%TYPE;

  TYPE l_pmt_channels_rec IS RECORD(
    channel_code        iby_fndcpt_pmt_chnnls_tl.payment_channel_code%TYPE,
    channel_name        iby_fndcpt_pmt_chnnls_tl.payment_channel_name%TYPE,
    description         iby_fndcpt_pmt_chnnls_tl.description%TYPE,
    l_rowid             ROWID);

  TYPE l_pmt_channels_tab IS TABLE OF l_pmt_channels_rec;

  l_pmt_channels l_pmt_channels_tab;

BEGIN
  l_user_id  := NVL(fnd_global.user_id, 1);
  l_login_id := NVL(fnd_global.login_id, 1);
  l_sysdate  := sysdate;
  l_payeeid  := 'Global';
  l_suffix   := 'global';

  ---------------------------------------------------------------------------
  -- Step 6:  This should be removed, but only after UI is fix to make this
  --          field optional otherwise the UI will not display the FCPP
  --          correctly.  Populate the sys transmission table
  ---------------------------------------------------------------------------
  BEGIN
     INSERT INTO iby_pmt_sys_transmissions(
        transmit_protocol_code,
        bepid,
        created_by,
        creation_date,
        last_updated_by,
        last_update_date,
        object_version_number,
        last_update_login
      ) SELECT
        'FTP_PUT',                                      -- transmit_protocol_code,
        i.bepid,                                        -- bepid
        l_user_id,                                      -- created_by
        l_sysdate,                                      -- creation_date
        l_user_id,                                      -- last_updated_by
        l_sysdate,                                      -- last_update_date
        1,                                              -- object_version_number
        l_login_id                                      -- last_update_login
        FROM iby_bepinfo i
        WHERE i.suffix = l_suffix;
  EXCEPTION
    WHEN others THEN NULL;
  END;

  ---------------------------------------------------------------------------
  -- Step 1:  Check if there is any receipt method created in AR.
  --          If no receipt methods created we assume is a fresh install and
  --          no additionally dummy data is created.
  --          In this case only the FCPP 1 per format supported is created
  --          as seed data.
  ---------------------------------------------------------------------------
  BEGIN
    SELECT arm.receipt_method_id
      INTO l_receipt_method_id
      FROM ar_receipt_methods arm,
           ap_payment_programs app,
           iby_formats_b ibyf
     WHERE arm.auto_print_program_id IS NOT NULL
       AND arm.auto_print_program_id = app.program_id
       AND app.program_name = ibyf.reference_format_code
	   AND ROWNUM=1;
  EXCEPTION
    WHEN no_data_found THEN NULL;
  END;

  IF (l_receipt_method_id IS NOT NULL) THEN
    -- upgrade instance
    ---------------------------------------------------------------------------
    -- Step 2: Create Dummy payee
    ---------------------------------------------------------------------------
    BEGIN
      INSERT INTO iby_payee
        (  MPAYEEID,
           PAYEEID,
           NAME,
           ECAPPID,
           ACTIVESTATUS,
           RISK_ENABLED,
           LAST_UPDATE_DATE,
           OBJECT_VERSION_NUMBER,
           LAST_UPDATED_BY,
           CREATION_DATE,
           CREATED_BY,
           LAST_UPDATE_LOGIN
        ) VALUES
        (
           iby_payee_s.NEXTVAL,               -- mpayeeid
           l_payeeid,                         -- payeeid
           l_payeeid,                         -- name
           673,                               -- ecappid
           'Y',                               -- activestatus
           'N',                               -- risk_enabled
           l_sysdate,                         -- last_update_date
           1,                                 -- object_version_number
           l_user_id,                         -- last_updated_by
           l_sysdate,                         -- creation_date
           l_user_id,                         -- created_by
           l_login_id                         -- last_update_login
        ) RETURNING mpayeeid INTO l_mpayeeid;
     EXCEPTION
       WHEN others THEN NULL;
     END;

    ---------------------------------------------------------------------------
    -- Step 3: Assign BANKACCOUNT to new Global dummy payee
    ---------------------------------------------------------------------------
    IF (l_mpayeeid IS NOT NULL) THEN
      BEGIN
        INSERT INTO iby_accppmtmthd(
        payeeid,
        ecappid,
        accttypeid,
        mpayeeid,
        status,
        last_update_date,
        object_version_number,
        last_updated_by,
        created_by,
        creation_date,
        last_update_login,
        security_group_id
        )
        SELECT
        l_payeeid,                         -- payeeid
        673,                               -- ecappid (Payments)
        t.accttypeid,                      -- accttypeid
        l_mpayeeid,                        -- mpayeeid
        0,                                 -- status (Active)
        l_sysdate,                         -- last_update_date
        1,                                 -- object_version_number
        l_user_id,                         -- last_updated_by
        l_user_id,                         -- created_by
        l_sysdate,                         -- creation_date
        l_login_id,                        -- last_update_login
        null                               -- security_group_id
           FROM iby_accttype t
          WHERE t.accttype = 'ALL'
            AND t.instrtype = 'BANKACCOUNT';
       EXCEPTION
         WHEN others THEN NULL;
       END;
    END IF;

  ---------------------------------------------------------------------------
  -- Step 4: Create Dummy Payment System Account
  ---------------------------------------------------------------------------
  IF (l_payeeid IS NOT NULL) THEN
  BEGIN
    INSERT INTO iby_bepkeys
      (
        ownerid,
        bepid,
        key,
        ownertype,
        last_update_date,
        object_version_number,
        last_updated_by,
        creation_date,
        created_by,
        last_update_login,
        bep_account_id
      ) SELECT
	    l_payeeid,                           -- ownerid
        bepid,                               -- bepid
        'Global'||' '||l_payeeid,            -- key
        'PAYEE',                             -- ownertype
        l_sysdate,                           -- last_update_date
        1,                                   -- object_version_number
        l_user_id,                           -- last_updated_by
        l_sysdate,                           -- creation_date
        l_user_id,                           -- created_by
        l_login_id,                          -- last_update_login
        iby_bepkeys_s.nextval                -- bep_account_id
		FROM iby_bepinfo
	   WHERE suffix = l_suffix;

  EXCEPTION
    WHEN others THEN NULL;
  END;
  END IF;

  ---------------------------------------------------------------------------
  -- Step 5:  Create new Payment Channels from automatic Receipt Methods
  --          for the direct debit associated to supported IBY formats
  --          This is not required anymore.  We will create not create payment
  --          methods per receipt method.  The only payment methods available
  --          will the seeded ones
  ---------------------------------------------------------------------------

  END IF; -- end if it is not a fresh install

  ---------------------------------------------------------------------------
  -- Step 6: Create Payment System Process Profiles and User Payment Process
  --         Profiles
  --         System profiles: 1 per format supported
  --                          system profiles will be seeded not upgraded
  --         User profiles:   1 per payment system acocunt associated to
  --                          existing Payee
  --         Routing Rules
  ---------------------------------------------------------------------------

  ---------------------------------------------------------------------------
  -- Step 9: Create User Payment Process Profiles
  ---------------------------------------------------------------------------
  INSERT ALL
    WHEN create_ppf = 1 THEN INTO iby_fndcpt_user_eft_pf_b (
    OBJECT_VERSION_NUMBER,
    BEP_ACCOUNT_ID,
    VERIFY_TRANS_CONFIG_ID,
    USER_EFT_PROFILE_CODE,
    SYS_EFT_PROFILE_CODE,
    INACTIVE_DATE,
    FUNDS_XFER_TRANS_CONFIG_ID,
    QUERY_TRANS_CONFIG_ID,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN
  ) values (
    1,                               -- OBJECT_VERSION_NUMBER
    bep_account_id,                  -- bep_account_id
    NULL,                            -- VERIFY_TRANS_CONFIG_ID
    user_eft_profile_code,           -- user_eft_profile_code
    sys_eft_profile_code,            -- sys_eft_profile_code
    NULL,                            -- INACTIVE_DATE
    -1,                              -- FUNDS_XFER_TRANS_CONFIG_ID (YS) needs to be optional
    NULL,                            -- QUERY_TRANS_CONFIG_ID
    l_sysdate,                       -- creation_date
    l_user_id,                       -- created_by
    l_sysdate,                       -- last_update_date
    l_user_id,                       -- last_updated_by
    l_login_id                       -- last_update_login
  )
    WHEN 1 = 1 THEN INTO IBY_FNDCPT_USER_EFT_PF_TL (
    USER_EFT_PROFILE_CODE,
    USER_EFT_PROFILE_NAME,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    OBJECT_VERSION_NUMBER,
    LANGUAGE,
    SOURCE_LANG
  ) VALUES (
    user_eft_profile_code,
    user_eft_profile_name,
    l_user_id,                      -- CREATED_BY
    l_sysdate,                      -- CREATION_DATE
    l_user_id,                      -- LAST_UPDATED_BY
    l_sysdate,                      -- LAST_UPDATE_DATE
    l_login_id,                     -- LAST_UPDATE_LOGIN
    1,                              -- OBJECT_VERSION_NUMBER
    language_code,                  -- language
    USERENV('LANG')                 -- SOURCE_LANG
  ) -- this select joins with the iby_payee table.  If it is a fresh install
    -- no user payment profiles will be created since the iby_payee table will
    -- be empty.  In an upgrade instance payment profiles will be created
    -- only for the Global bepkeys which are only associated to the Global payee
    SELECT fsp.sys_eft_profile_code sys_eft_profile_code,
           f.format_name format_name,
           payee.payeeid payeeid,
           payee.mpayeeid mpayeeid,
           bepkey.bep_account_id bep_account_id,
           bepkey.key key,
		   b.name bep_name,
           b.bepid bepid,
           SUBSTRB(f.format_name||' '||b.name||' '||bepkey.key, 1, 100) user_eft_profile_name,
           f.format_code||'_'||bepkey.bep_account_id user_eft_profile_code,
		   l.language_code language_code,
           RANK() OVER (PARTITION BY f.format_code||'_'||bepkey.bep_account_id
		                ORDER BY l.language_code) create_ppf
      FROM iby_payee payee,
           iby_bepkeys bepkey,
           iby_bepinfo b,
           iby_formats_vl f,
           iby_fndcpt_sys_eft_pf_b fsp,
           fnd_languages l
     WHERE payee.payeeid = bepkey.ownerid
       AND bepkey.bepid = b.bepid
       AND bepkey.key = 'Global'||' '||payee.payeeid
       AND f.format_type_code = 'FUNDS_CAPTURE_INSTRUCTION'
       AND f.reference_format_code IS NOT NULL
       AND fsp.FUNDS_XFER_FORMAT_CODE = f.format_code
       AND L.INSTALLED_FLAG in ('I', 'B')
       AND f.format_code||'_'||bepkey.bep_account_id NOT IN (SELECT user_eft_profile_code FROM iby_fndcpt_user_eft_pf_b);

  ---------------------------------------------------------------------------
  -- Step 10: Create Routing Rules
  ---------------------------------------------------------------------------
  BEGIN
  INSERT ALL
    WHEN create_ri = 1 THEN INTO iby_routinginfo(
       payeeid,
       bepid,
       paymentmethodid,
       paymentmethodname,
       mpayeeid,
       configured,
       priority,
       last_update_date,
       last_updated_by,
       object_version_number,
       creation_date,
       created_by,
       last_update_login,
       instr_type,
       bepkey,
       fndcpt_user_profile_code,
       payment_channel_code,
       bep_account_id
     ) VALUES (
       payeeid,                         -- payeeid
       bepid,                           -- bepid
       IBY_PMTMETHOD_S.NEXTVAL,         -- paymentmethodid
       paymentmethodname,               -- paymentmethodname
       mpayeeid,                        -- mpayeeid
       1,                               -- configured (active)
       1,                               -- priority
       l_sysdate,                       -- last_update_date
       l_user_id,                       -- last_updated_by
       1,                               -- object_version_number
       l_sysdate,                       -- creation_date
       l_user_id,                       -- created_by
       l_login_id,                      -- last_update_login
       'BANKACCOUNT',                   -- instr_type
       bepkey,                          -- bepkey
       fndcpt_user_profile_code,        -- fndcpt_user_profile_code
       payment_channel_code,            -- payment_channel_code
       bep_account_id
	 )
   WHEN create_iba = 'Y' THEN INTO iby_pmtmthd_conditions
   -- routing rule condition for Payee Bank Account (internal bank account)
   (
	 paymentmethodid,
	 parameter_code,
	 operation_code,
	 value,
	 is_value_string,
	 entry_sequence,
	 last_update_date,
	 object_version_number,
	 last_updated_by,
	 creation_date,
	 created_by,
	 last_update_login,
	 security_group_id,
	 condition_name
   )VALUES(
     IBY_PMTMETHOD_S.NEXTVAL,         -- paymentmethodid
	 'PY_BANK_ACCOUNT',               -- parameter_code
	 'EQ',                            -- operation_code
	 internal_bank_account_id,        -- value
	 'N',                             -- is_value_string
	 1,                               -- entry_sequence
	 l_sysdate,                       -- last_update_date
	 1,                               -- object_version_number
	 l_user_id,                       -- last_updated_by
	 l_sysdate,                       -- creation_date
	 l_user_id,                       -- created_by
	 l_login_id,                      -- last_update_login
	 NULL,                            -- security_group_id
	 NULL                             -- condition_name
   )
   WHEN (create_ou = 'Y' AND create_ou1 = 1) THEN INTO iby_pmtmthd_conditions
   -- routing rule condition for operating unit
   (
	 paymentmethodid,
	 parameter_code,
	 operation_code,
	 value,
	 is_value_string,
	 entry_sequence,
	 last_update_date,
	 object_version_number,
	 last_updated_by,
	 creation_date,
	 created_by,
	 last_update_login,
	 security_group_id,
	 condition_name
   )VALUES(
     IBY_PMTMETHOD_S.NEXTVAL,         -- paymentmethodid
	 'OPERATING_UNIT',                -- parameter_code
	 'EQ',                            -- operation_code
	 org_id,                          -- value
	 'N',                             -- is_value_string
	 3,                               -- entry_sequence
	 l_sysdate,                       -- last_update_date
	 1,                               -- object_version_number
	 l_user_id,                       -- last_updated_by
	 l_sysdate,                       -- creation_date
	 l_user_id,                       -- created_by
	 l_login_id,                      -- last_update_login
	 NULL,                            -- security_group_id
	 NULL                             -- condition_name
   )
   WHEN (factor_flag = 'Y' AND create_ff = 1) THEN INTO iby_pmtmthd_conditions
   -- routing rule condition for factor_flag
   (
	 paymentmethodid,
	 parameter_code,
	 operation_code,
	 value,
	 is_value_string,
	 entry_sequence,
	 last_update_date,
	 object_version_number,
	 last_updated_by,
	 creation_date,
	 created_by,
	 last_update_login,
	 security_group_id,
	 condition_name
   )VALUES(
     IBY_PMTMETHOD_S.NEXTVAL,         -- paymentmethodid
	 'FACTOR_FLAG',                   -- parameter_code
	 'EQ',                            -- operation_code
	 factor_flag,                     -- value
	 'Y',                             -- is_value_string
	 5,                               -- entry_sequence
	 l_sysdate,                       -- last_update_date
	 1,                               -- object_version_number
	 l_user_id,                       -- last_updated_by
	 l_sysdate,                       -- creation_date
	 l_user_id,                       -- created_by
	 l_login_id,                      -- last_update_login
	 NULL,                            -- security_group_id
	 NULL                             -- condition_name
   )
   WHEN (create_rm = 1) THEN INTO iby_pmtmthd_conditions
   -- routing rule condition for receipt_method_id
   (
	 paymentmethodid,
	 parameter_code,
	 operation_code,
	 value,
	 is_value_string,
	 entry_sequence,
	 last_update_date,
	 object_version_number,
	 last_updated_by,
	 creation_date,
	 created_by,
	 last_update_login,
	 security_group_id,
	 condition_name
   )VALUES(
     IBY_PMTMETHOD_S.NEXTVAL,         -- paymentmethodid
	 'AR_RECEIPT_METHOD_ID',        -- parameter_code
-- BR_DRAWEE_ISSUED_FLAG  (Y/N)
	 'EQ',                            -- operation_code
	 receipt_method_id,               -- value
	 'N',                             -- is_value_string
	 7,                               -- entry_sequence
	 l_sysdate,                       -- last_update_date
	 1,                               -- object_version_number
	 l_user_id,                       -- last_updated_by
	 l_sysdate,                       -- creation_date
	 l_user_id,                       -- created_by
	 l_login_id,                      -- last_update_login
	 NULL,                            -- security_group_id
	 NULL                             -- condition_name
   )
   WHEN (br_signed_flag = 'Y' AND create_sf = 1) THEN INTO iby_pmtmthd_conditions
   -- routing rule condition for br_signed_flag
   (
	 paymentmethodid,
	 parameter_code,
	 operation_code,
	 value,
	 is_value_string,
	 entry_sequence,
	 last_update_date,
	 object_version_number,
	 last_updated_by,
	 creation_date,
	 created_by,
	 last_update_login,
	 security_group_id,
	 condition_name
   )VALUES(
     IBY_PMTMETHOD_S.NEXTVAL,         -- paymentmethodid
	 'BR_SIGNED_FLAG',                -- parameter_code
	 'EQ',                            -- operation_code
	 br_signed_flag,                  -- value
	 'Y',                             -- is_value_string
	 9,                               -- entry_sequence
	 l_sysdate,                       -- last_update_date
	 1,                               -- object_version_number
	 l_user_id,                       -- last_updated_by
	 l_sysdate,                       -- creation_date
	 l_user_id,                       -- created_by
	 l_login_id,                      -- last_update_login
	 NULL,                            -- security_group_id
	 NULL                             -- condition_name
   )
    SELECT bep.bepid bepid,
           py.payeeid,
           py.mpayeeid,
           SUBSTRB(ibyf.format_name||' '||bep.name||' '||bepkey.key, 1, 80) paymentmethodname,
           bepkey.key bepkey,
           ibyf.format_code||'_'||bepkey.bep_account_id fndcpt_user_profile_code,
	       DECODE(arc.creation_method_code,
		          'AUTOMATIC', 'BANK_ACCT_XFER',
				  'BILLS_RECEIVABLE') payment_channel_code,
           bepkey.bep_account_id,
		   arm.receipt_method_id,
		   RANK() OVER (PARTITION BY ibyf.format_code||'_'||bepkey.bep_account_id
		                ORDER BY rma.remit_bank_acct_use_id) create_ri,
		   rma.remit_bank_acct_use_id internal_bank_account_id,
		   DECODE(rma.remit_bank_acct_use_id, NULL, 'N', 'Y') create_iba,
		   rma.org_id org_id,
		   DECODE(rma.org_id, NULL, 'N', 'Y') create_ou,
		   RANK() OVER (PARTITION BY ibyf.format_code||'_'||bepkey.bep_account_id
		                ORDER BY rma.org_id) create_ou1,
		   DECODE(rma.factor_transmission_program_id, NULL, 'N', 'Y') factor_flag,
		   RANK() OVER (PARTITION BY ibyf.format_code||'_'||bepkey.bep_account_id
		                ORDER BY NVL(rma.factor_transmission_program_id, -1) DESC) create_ff,
		   RANK() OVER (PARTITION BY ibyf.format_code||'_'||bepkey.bep_account_id
		                ORDER BY arm.receipt_method_id) create_rm,
		   RANK() OVER (PARTITION BY ibyf.format_code||'_'||bepkey.bep_account_id
		                ORDER BY ctt.signed_flag DESC) create_sf,
		   ctt.signed_flag  br_signed_flag
      FROM ar_receipt_methods arm,
	       ar_receipt_classes arc,
	       ra_cust_trx_types_all ctt,
		   ar_receipt_method_accounts_all rma,
           ap_payment_programs app,
           iby_formats_vl ibyf,
		   iby_bepinfo bep,
		   iby_bepkeys bepkey,
		   iby_payee py
     WHERE arc.creation_method_code IN ('AUTOMATIC', 'BR', 'BR_REMIT')
       AND arc.receipt_class_id = arm.receipt_class_id
       AND arm.br_cust_trx_type_id = ctt.cust_trx_type_id(+)
	   AND arm.auto_print_program_id IS NOT NULL
       AND arm.auto_print_program_id = app.program_id
       AND app.program_name = ibyf.reference_format_code
       AND (arm.payment_type_code NOT IN ('ACH_BANK_ACCOUNT', 'CREDIT_CARD') OR
            arm.payment_type_code IS NULL)
       AND arm.merchant_ref IS NULL
       AND arm.receipt_method_id = rma.receipt_method_id(+)
       AND bep.suffix = l_suffix
       AND py.payeeid = l_payeeid
       AND bepkey.key = 'Global'||' '||py.payeeid
       AND NOT EXISTS (SELECT r.paymentmethodid
                         FROM iby_routinginfo r
                        WHERE r.payment_channel_code = DECODE(arc.creation_method_code,
		                                                      'AUTOMATIC', 'BANK_ACCT_XFER',
				                                              'BILLS_RECEIVABLE')
                          AND r.payeeid = py.payeeid
                          AND r.bepid = bep.bepid);
  EXCEPTION
    WHEN others THEN NULL;
  END;

  ---------------------------------------------------------------------------
  -- Step 9: Assign operating unit to payees
  ---------------------------------------------------------------------------
  BEGIN
    INSERT INTO IBY_FNDCPT_PAYEE_APPL(
      mpayeeid,
      org_type,
      org_id,
      created_by,
      creation_date,
      last_updated_by,
      last_update_date,
      object_version_number,
      last_update_login
    ) SELECT
	    x.mpayeeid,
        'OPERATING_UNIT',
        x.org_id,
        l_user_id,
        l_sysdate,
        l_user_id,
        l_sysdate,
        1,
        l_login_id
      FROM (
      SELECT
        NVL(u.mpayeeid, NVL((SELECT t.mpayeeid
                              FROM (SELECT /*+ parallel(acr) full(acr) use_hash(acr) */
                                            acr.org_id,
                                           arm.merchant_ref,
                                           payee.mpayeeid, count(*),
                                           RANK() OVER (PARTITION BY acr.org_id
                                                        ORDER BY  count(*) desc, arm.merchant_ref) flag
                                      FROM ar_cash_receipts_all acr,
                                           ar_receipt_methods arm,
                                           ap_payment_programs app,
                                           iby_payee payee,
                                           iby_formats_b ibyf
                                     WHERE acr.receipt_method_id = arm.receipt_method_id
                                       AND arm.auto_print_program_id = app.program_id
                                       AND arm.merchant_ref is not null
                                       AND app.program_name = ibyf.reference_format_code(+)
                                       AND arm.merchant_ref = payee.payeeid(+)
                                     GROUP BY acr.org_id,
                                              arm.merchant_ref,
                                              payee.mpayeeid) t
                 WHERE t.flag = 1
                   AND t.org_id = u.org_id), l_mpayeeid)) mpayeeid, u.org_id
      FROM (SELECT /*+ parallel(acr) full(acr) use_hash(acr) */ acr.org_id,
                   arm.merchant_ref,
                   payee.mpayeeid, count(*),
                   RANK() OVER (PARTITION BY acr.org_id ORDER BY  count(*) desc, arm.merchant_ref) flag
              FROM ar_cash_receipts_all acr,
                   ar_receipt_methods arm,
                   ap_payment_programs app,
                   iby_payee payee,
                   iby_formats_b ibyf
             WHERE acr.receipt_method_id = arm.receipt_method_id
               AND arm.auto_print_program_id = app.program_id
               AND app.program_name = ibyf.reference_format_code(+)
               AND arm.merchant_ref = payee.payeeid(+)
             GROUP BY acr.org_id,
                      arm.merchant_ref,
                      payee.mpayeeid ) u
     WHERE u.flag = 1 ) x
     -- this condition added so that the insert do not fail if there are no
     -- direct debit transactions so that the dummy payee is not created.
     -- The insert should work and include the org_id for existing payees (creditcard)
     WHERE x.mpayeeid IS NOT NULL
       AND NOT EXISTS (SELECT *
                         FROM iby_fndcpt_payee_appl a
                        WHERE a.org_type = 'OPERATING_UNIT'
                          AND a.org_id = x.org_id);

  EXCEPTION
    WHEN others THEN NULL;
  END ;

END set_sys_user_profiles;

end IBY_UPG_PPP_PKG;

/
