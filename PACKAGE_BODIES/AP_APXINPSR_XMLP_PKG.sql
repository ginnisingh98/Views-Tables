--------------------------------------------------------
--  DDL for Package Body AP_APXINPSR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."AP_APXINPSR_XMLP_PKG" AS
/* $Header: APXINPSRB.pls 120.0 2007/12/27 07:58:42 vjaganat noship $ */
  FUNCTION GET_BASE_CURR_DATA RETURN BOOLEAN IS
    BASE_CURR AP_SYSTEM_PARAMETERS.BASE_CURRENCY_CODE%TYPE;
    PREC FND_CURRENCIES.PRECISION%TYPE;
    MIN_AU FND_CURRENCIES.MINIMUM_ACCOUNTABLE_UNIT%TYPE;
    DESCR FND_CURRENCIES.DESCRIPTION%TYPE;
  BEGIN
    BASE_CURR := '';
    PREC := 0;
    MIN_AU := 0;
    DESCR := '';
    SELECT
      P.BASE_CURRENCY_CODE,
      C.PRECISION,
      C.MINIMUM_ACCOUNTABLE_UNIT,
      C.DESCRIPTION
    INTO BASE_CURR,PREC,MIN_AU,DESCR
    FROM
      AP_SYSTEM_PARAMETERS P,
      FND_CURRENCIES C
    WHERE P.BASE_CURRENCY_CODE = C.CURRENCY_CODE;
    C_BASE_CURRENCY_CODE := BASE_CURR;
    C_BASE_PRECISION := PREC;
    C_BASE_MIN_ACCT_UNIT := MIN_AU;
    C_BASE_DESCRIPTION := DESCR;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_BASE_CURR_DATA;

  FUNCTION CUSTOM_INIT RETURN BOOLEAN IS
  BEGIN
    --C_VENDOR_DYNAMIC_SQL := '';
    C_VENDOR_DYNAMIC_SQL := ' ';
    --C_INVOICE_DYNAMIC_SQL := '';
    C_INVOICE_DYNAMIC_SQL := ' ';
    IF P_VENDOR_ID IS NOT NULL THEN
      C_VENDOR_DYNAMIC_SQL := C_VENDOR_DYNAMIC_SQL || ' AND  v.vendor_id = ' || P_VENDOR_ID || ' ';
    END IF;
    IF P_VENDOR_TYPE_LOOKUP_CODE IS NOT NULL THEN
      C_VENDOR_DYNAMIC_SQL := C_VENDOR_DYNAMIC_SQL || ' AND  v.vendor_type_lookup_code = ''' ||
      P_VENDOR_TYPE_LOOKUP_CODE || '''';
    END IF;
    IF P_PREPAYMENT_TYPE = 'TEMPORARY' THEN
      C_VENDOR_DYNAMIC_SQL := C_VENDOR_DYNAMIC_SQL || ' AND  i.earliest_settlement_date is not null ';
    ELSE
      C_VENDOR_DYNAMIC_SQL := C_VENDOR_DYNAMIC_SQL || ' AND  i.earliest_settlement_date is null ';
    END IF;
    IF P_FROM_DATE IS NOT NULL THEN
      C_INVOICE_DYNAMIC_SQL := C_INVOICE_DYNAMIC_SQL || ' AND i.invoice_date >= ''' || TO_CHAR(P_FROM_DATE) || '''';
      C_VENDOR_DYNAMIC_SQL := C_VENDOR_DYNAMIC_SQL || ' AND i.invoice_date >= ''' || TO_CHAR(P_FROM_DATE) || '''';
    END IF;
    IF P_TO_DATE IS NOT NULL THEN
      C_INVOICE_DYNAMIC_SQL := C_INVOICE_DYNAMIC_SQL || ' AND i.invoice_date <= ''' || TO_CHAR(P_TO_DATE) || '''';
      C_VENDOR_DYNAMIC_SQL := C_VENDOR_DYNAMIC_SQL || ' AND i.invoice_date <= ''' || TO_CHAR(P_TO_DATE) || '''';
    END IF;
    IF P_PREPAYMENT_TYPE = 'TEMPORARY' THEN
      C_INVOICE_DYNAMIC_SQL := C_INVOICE_DYNAMIC_SQL || ' AND ( ( i.invoice_type_lookup_code =  ''PREPAYMENT'' '
      || '         AND  i.earliest_settlement_date is not null ' || '         AND
      AP_PREPAY_UTILS_PKG.get_prepay_amount_remaining( i.invoice_id) > 0 ) ';
    ELSE
      C_INVOICE_DYNAMIC_SQL := C_INVOICE_DYNAMIC_SQL || ' AND ( ( i.invoice_type_lookup_code =  ''PREPAYMENT'' '
      || '         AND  i.earliest_settlement_date is null ' || '         AND
      AP_PREPAY_UTILS_PKG.get_prepay_amount_remaining( i.invoice_id) > 0 ) ';
    END IF;
    IF P_INCLUDE_CREDIT = 'Y' THEN
      IF P_INCLUDE_INVOICE = 'Y' THEN
        C_INVOICE_DYNAMIC_SQL := C_INVOICE_DYNAMIC_SQL || ' OR ( i.payment_status_flag IN (''P'', ''N'') AND '
        || ' i.invoice_type_lookup_code <> ''PREPAYMENT'' ) ) ';
      ELSE
        C_INVOICE_DYNAMIC_SQL := C_INVOICE_DYNAMIC_SQL || ' OR ( i.payment_status_flag IN (''P'', ''N'') AND '
        || ' i.invoice_type_lookup_code IN (''CREDIT'',''DEBIT'')) )';
      END IF;
    ELSE
      IF P_INCLUDE_INVOICE = 'Y' THEN
        C_INVOICE_DYNAMIC_SQL := C_INVOICE_DYNAMIC_SQL || ' OR ( i.payment_status_flag IN (''P'', ''N'') AND '
        || ' i.invoice_type_lookup_code not IN (''CREDIT'',''DEBIT'', ''PREPAYMENT'')) ) ';
      ELSE
        C_INVOICE_DYNAMIC_SQL := C_INVOICE_DYNAMIC_SQL || ' ) ';
      END IF;
    END IF;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END CUSTOM_INIT;

  FUNCTION GET_COVER_PAGE_VALUES RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COVER_PAGE_VALUES;

  FUNCTION GET_NLS_STRINGS RETURN BOOLEAN IS
    NLS_ALL AP_LOOKUP_CODES.DISPLAYED_FIELD%TYPE;
    NLS_YES FND_LOOKUPS.MEANING%TYPE;
    NLS_NO FND_LOOKUPS.MEANING%TYPE;
    NLS_UNPAID AP_LOOKUP_CODES.DISPLAYED_FIELD%TYPE;
    HEADER_VENDOR_TYPE AP_LOOKUP_CODES.DISPLAYED_FIELD%TYPE;
    HEADER_VENDOR_NAME AP_LOOKUP_CODES.DISPLAYED_FIELD%TYPE;
    HEADER_SHOW_PREPAY_DIST FND_LOOKUPS.MEANING%TYPE;
    HEADER_INCLUDE_INVOICE FND_LOOKUPS.MEANING%TYPE;
    HEADER_INCLUDE_CREDIT FND_LOOKUPS.MEANING%TYPE;
    HEADER_PREPAYMENT_TYPE FND_LOOKUPS.MEANING%TYPE;
  BEGIN
    NLS_ALL := '';
    NLS_YES := '';
    NLS_NO := '';
    SELECT
      LY.MEANING,
      LN.MEANING,
      LA.DISPLAYED_FIELD,
      L4.DISPLAYED_FIELD,
      L6.MEANING,
      L7.MEANING,
      L8.MEANING
    INTO NLS_YES,NLS_NO,NLS_ALL,NLS_UNPAID,HEADER_SHOW_PREPAY_DIST,HEADER_INCLUDE_INVOICE,HEADER_INCLUDE_CREDIT
    FROM
      FND_LOOKUPS LY,
      FND_LOOKUPS LN,
      AP_LOOKUP_CODES LA,
      AP_LOOKUP_CODES L4,
      FND_LOOKUPS L6,
      FND_LOOKUPS L7,
      FND_LOOKUPS L8
    WHERE LY.LOOKUP_TYPE = 'YES_NO'
      AND LY.LOOKUP_CODE = 'Y'
      AND LN.LOOKUP_TYPE = 'YES_NO'
      AND LN.LOOKUP_CODE = 'N'
      AND LA.LOOKUP_TYPE = 'NLS REPORT PARAMETER'
      AND LA.LOOKUP_CODE = 'ALL'
      AND L4.LOOKUP_TYPE = 'PREPAY STATUS'
      AND L4.LOOKUP_CODE = 'UNPAID'
      AND L6.LOOKUP_TYPE = 'YES_NO'
      AND L6.LOOKUP_CODE = NVL(P_PREPAYMENT_LINE_FLAG
       ,'Y')
      AND L7.LOOKUP_TYPE = 'YES_NO'
      AND L7.LOOKUP_CODE = NVL(P_INCLUDE_INVOICE
       ,'Y')
      AND L8.LOOKUP_TYPE = 'YES_NO'
      AND L8.LOOKUP_CODE = NVL(P_INCLUDE_CREDIT
       ,'Y');
    IF P_VENDOR_TYPE_LOOKUP_CODE IS NULL THEN
      HEADER_VENDOR_TYPE := NLS_ALL;
    ELSE
      SELECT
        DISPLAYED_FIELD
      INTO HEADER_VENDOR_TYPE
      FROM
        PO_LOOKUP_CODES
      WHERE LOOKUP_TYPE = 'VENDOR TYPE'
        AND LOOKUP_CODE = P_VENDOR_TYPE_LOOKUP_CODE;
    END IF;
    IF P_VENDOR_ID IS NULL THEN
      HEADER_VENDOR_NAME := NLS_ALL;
    ELSE
      SELECT
        VENDOR_NAME
      INTO HEADER_VENDOR_NAME
      FROM
        PO_VENDORS
      WHERE VENDOR_ID = P_VENDOR_ID;
    END IF;
    SELECT
      DISPLAYED_FIELD
    INTO HEADER_PREPAYMENT_TYPE
    FROM
      AP_LOOKUP_CODES
    WHERE LOOKUP_CODE = NVL(P_PREPAYMENT_TYPE
       ,'TEMPORARY')
      AND LOOKUP_TYPE = 'PREPAY TYPES';
    C_NLS_YES := NLS_YES;
    C_NLS_NO := NLS_NO;
    C_NLS_ALL := NLS_ALL;
    C_NLS_UNPAID := NLS_UNPAID;
    C_HEADER_VENDOR_TYPE := HEADER_VENDOR_TYPE;
    C_HEADER_VENDOR_NAME := HEADER_VENDOR_NAME;
    C_HEADER_SHOW_PREPAY_DIST := HEADER_SHOW_PREPAY_DIST;
    C_HEADER_INCLUDE_INVOICE := HEADER_INCLUDE_INVOICE;
    C_HEADER_INCLUDE_CREDIT := HEADER_INCLUDE_CREDIT;
    C_HEADER_PREPAYMENT_TYPE := HEADER_PREPAYMENT_TYPE;
    FND_MESSAGE.SET_NAME('SQLAP'
                        ,'AP_APPRVL_NO_DATA');
    C_NLS_NO_DATA_EXISTS := FND_MESSAGE.GET;
    FND_MESSAGE.SET_NAME('SQLAP'
                        ,'AP_ALL_END_OF_REPORT');
    C_NLS_END_OF_REPORT := FND_MESSAGE.GET;
    --C_NLS_NO_DATA_EXISTS := '*** ' || C_NLS_NO_DATA_EXISTS || ' ***';
    --C_NLS_END_OF_REPORT := '*** ' || C_NLS_END_OF_REPORT || ' ***';
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_NLS_STRINGS;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      INIT_FAILURE EXCEPTION;
    BEGIN
      C_REPORT_START_DATE := SYSDATE;
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
      IF (P_DEBUG_SWITCH in ('y','Y')) THEN
        /*SRW.MESSAGE('1'
                   ,'After SRWINIT')*/NULL;
      END IF;
      SELECT
        AP.SET_OF_BOOKS_ID,
        GL.CHART_OF_ACCOUNTS_ID
      INTO P_SET_OF_BOOKS_ID,P_CHART_OF_ACCOUNTS_ID
      FROM
        AP_SYSTEM_PARAMETERS AP,
        GL_SETS_OF_BOOKS GL
      WHERE AP.SET_OF_BOOKS_ID = GL.SET_OF_BOOKS_ID;
      IF (P_DEBUG_SWITCH in ('y','Y')) THEN
        /*SRW.MESSAGE('2'
                   ,'After initialize parameter p_set_of_books_id and p_charge_of_accounts_id')*/NULL;
      END IF;
      IF (GET_COMPANY_NAME <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH in ('y','Y')) THEN
        /*SRW.MESSAGE('3'
                   ,'After Get_Company_Name')*/NULL;
      END IF;
      IF (GET_NLS_STRINGS <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH in ('y','Y')) THEN
        /*SRW.MESSAGE('4'
                   ,'After Get_NLS_Strings')*/NULL;
      END IF;
      IF (GET_BASE_CURR_DATA <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH in ('y','Y')) THEN
        /*SRW.MESSAGE('5'
                   ,'After Get_Base_Curr_Data')*/NULL;
      END IF;
      IF (CUSTOM_INIT <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH in ('y','Y')) THEN
        /*SRW.MESSAGE('7'
                   ,'After Custom_Init')*/NULL;
      END IF;
      IF (P_DEBUG_SWITCH in ('y','Y')) THEN
        /*SRW.BREAK*/NULL;
      END IF;
      RETURN (TRUE);
    EXCEPTION
      WHEN OTHERS THEN
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        /*SRW.MESSAGE('20'
                   ,'After SRWEXIT')*/NULL;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION GET_COMPANY_NAME RETURN BOOLEAN IS
    L_CHART_OF_ACCOUNTS_ID GL_SETS_OF_BOOKS.CHART_OF_ACCOUNTS_ID%TYPE;
    L_NAME GL_SETS_OF_BOOKS.NAME%TYPE;
    L_SOB_ID NUMBER;
  BEGIN
    IF P_SET_OF_BOOKS_ID IS NOT NULL THEN
      L_SOB_ID := P_SET_OF_BOOKS_ID;
      SELECT
        NAME,
        CHART_OF_ACCOUNTS_ID
      INTO L_NAME,L_CHART_OF_ACCOUNTS_ID
      FROM
        GL_SETS_OF_BOOKS
      WHERE SET_OF_BOOKS_ID = L_SOB_ID;
      C_COMPANY_NAME_HEADER := L_NAME;
      C_CHART_OF_ACCOUNTS_ID := L_CHART_OF_ACCOUNTS_ID;
    END IF;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COMPANY_NAME;

  FUNCTION C_AMOUNT_FOR_SUMFORMULA(C_INVOICE_TYPE_LOOKUP_CODE IN VARCHAR2
                                  ,C_AMOUNT_REMAINING IN NUMBER
                                  ,C_PAYMENT_STATUS_FLAG IN VARCHAR2
                                  ,C_EARLIEST_SETTLEMENT_DATE IN VARCHAR2
                                  ,C_PAYMENT_CROSS_RATE IN NUMBER
                                  ,C_INVOICE_CURRENCY_CODE IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    BEGIN
      /*SRW.REFERENCE(C_INVOICE_TYPE_LOOKUP_CODE)*/NULL;
      /*SRW.REFERENCE(C_AMOUNT_REMAINING)*/NULL;
      /*SRW.REFERENCE(C_PAYMENT_STATUS_FLAG)*/NULL;
      /*SRW.REFERENCE(C_EARLIEST_SETTLEMENT_DATE)*/NULL;
      /*SRW.REFERENCE(C_PAYMENT_CROSS_RATE)*/NULL;
      /*SRW.REFERENCE(C_INVOICE_CURRENCY_CODE)*/NULL;
      IF C_INVOICE_TYPE_LOOKUP_CODE = 'PREPAYMENT' THEN
        IF C_EARLIEST_SETTLEMENT_DATE = 'PERMANENT' THEN
          IF C_PAYMENT_STATUS_FLAG = 'Y' THEN
            RETURN (C_AMOUNT_REMAINING);
          ELSE
            RETURN (0);
          END IF;
        ELSE
          IF C_PAYMENT_STATUS_FLAG = 'Y' THEN
            RETURN (C_AMOUNT_REMAINING * -1);
          ELSE
            RETURN (0);
          END IF;
        END IF;
      ELSE
        RETURN (AP_UTILITIES_PKG.AP_ROUND_CURRENCY(C_AMOUNT_REMAINING / C_PAYMENT_CROSS_RATE
                                                 ,C_INVOICE_CURRENCY_CODE));
      END IF;
    END;
    RETURN NULL;
  END C_AMOUNT_FOR_SUMFORMULA;

  FUNCTION C_AMOUNT_REMAINING_CONVERTFORM(C_PAYMENT_CROSS_RATE IN NUMBER
                                         ,C_AMOUNT_REMAINING IN NUMBER
                                         ,C_INVOICE_CURRENCY_CODE IN VARCHAR2
                                         ,C_INVOICE_TYPE_LOOKUP_CODE IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    /*SRW.REFERENCE(C_PAYMENT_CROSS_RATE)*/NULL;
    /*SRW.REFERENCE(C_AMOUNT_REMAINING)*/NULL;
    /*SRW.REFERENCE(C_INVOICE_CURRENCY_CODE)*/NULL;
    /*SRW.REFERENCE(C_INVOICE_TYPE_LOOKUP_CODE)*/NULL;
    IF C_INVOICE_TYPE_LOOKUP_CODE = 'PREPAYMENT' THEN
      RETURN (C_AMOUNT_REMAINING);
    ELSE
      RETURN (AP_UTILITIES_PKG.AP_ROUND_CURRENCY(C_AMOUNT_REMAINING / C_PAYMENT_CROSS_RATE
                                               ,C_INVOICE_CURRENCY_CODE));
    END IF;
  END C_AMOUNT_REMAINING_CONVERTFORM;

  FUNCTION C_AMOUNT_REMAINING_DSPFORMULA(C_INVOICE_TYPE_LOOKUP_CODE IN VARCHAR2
                                        ,C_PAYMENT_STATUS_FLAG IN VARCHAR2
                                        ,C_AMOUNT_REMAINING_TRANS IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(C_INVOICE_TYPE_LOOKUP_CODE)*/NULL;
    /*SRW.REFERENCE(C_PAYMENT_STATUS_FLAG)*/NULL;
    /*SRW.REFERENCE(C_AMOUNT_REMAINING_TRANS)*/NULL;
    /*SRW.REFERENCE(C_NLS_UNPAID)*/NULL;
    IF C_INVOICE_TYPE_LOOKUP_CODE = 'PREPAYMENT' THEN
      IF C_PAYMENT_STATUS_FLAG = 'Y' THEN
        RETURN (C_AMOUNT_REMAINING_TRANS);
      ELSE
        RETURN (SUBSTR(C_NLS_UNPAID
                     ,1
                     ,17));
      END IF;
    ELSE
      RETURN (C_AMOUNT_REMAINING_TRANS);
    END IF;
  END C_AMOUNT_REMAINING_DSPFORMULA;

  FUNCTION C_NLS_YES_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_YES;
  END C_NLS_YES_P;

  FUNCTION C_NLS_NO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_NO;
  END C_NLS_NO_P;

  FUNCTION C_NLS_ALL_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_ALL;
  END C_NLS_ALL_P;

  FUNCTION C_NLS_NO_DATA_EXISTS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_NO_DATA_EXISTS;
  END C_NLS_NO_DATA_EXISTS_P;

  FUNCTION C_NLS_VOID_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_VOID;
  END C_NLS_VOID_P;

  FUNCTION C_NLS_NA_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_NA;
  END C_NLS_NA_P;

  FUNCTION C_NLS_END_OF_REPORT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_END_OF_REPORT;
  END C_NLS_END_OF_REPORT_P;

  FUNCTION C_REPORT_START_DATE_P RETURN DATE IS
  BEGIN
    RETURN C_REPORT_START_DATE;
  END C_REPORT_START_DATE_P;

  FUNCTION C_COMPANY_NAME_HEADER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COMPANY_NAME_HEADER;
  END C_COMPANY_NAME_HEADER_P;

  FUNCTION C_BASE_CURRENCY_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BASE_CURRENCY_CODE;
  END C_BASE_CURRENCY_CODE_P;

  FUNCTION C_BASE_PRECISION_P RETURN NUMBER IS
  BEGIN
    RETURN C_BASE_PRECISION;
  END C_BASE_PRECISION_P;

  FUNCTION C_BASE_MIN_ACCT_UNIT_P RETURN NUMBER IS
  BEGIN
    RETURN C_BASE_MIN_ACCT_UNIT;
  END C_BASE_MIN_ACCT_UNIT_P;

  FUNCTION C_BASE_DESCRIPTION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BASE_DESCRIPTION;
  END C_BASE_DESCRIPTION_P;

  FUNCTION C_CHART_OF_ACCOUNTS_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_CHART_OF_ACCOUNTS_ID;
  END C_CHART_OF_ACCOUNTS_ID_P;

  FUNCTION APPLICATIONS_TEMPLATE_REPORT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN APPLICATIONS_TEMPLATE_REPORT;
  END APPLICATIONS_TEMPLATE_REPORT_P;

  FUNCTION C_VENDOR_DYNAMIC_SQL_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_VENDOR_DYNAMIC_SQL;
  END C_VENDOR_DYNAMIC_SQL_P;

  FUNCTION C_INVOICE_DYNAMIC_SQL_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_INVOICE_DYNAMIC_SQL;
  END C_INVOICE_DYNAMIC_SQL_P;

  FUNCTION C_HEADER_VENDOR_TYPE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_HEADER_VENDOR_TYPE;
  END C_HEADER_VENDOR_TYPE_P;

  FUNCTION C_HEADER_VENDOR_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_HEADER_VENDOR_NAME;
  END C_HEADER_VENDOR_NAME_P;

  FUNCTION C_HEADER_INCLUDE_INVOICE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_HEADER_INCLUDE_INVOICE;
  END C_HEADER_INCLUDE_INVOICE_P;

  FUNCTION C_HEADER_INCLUDE_CREDIT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_HEADER_INCLUDE_CREDIT;
  END C_HEADER_INCLUDE_CREDIT_P;

  FUNCTION C_NLS_UNPAID_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_UNPAID;
  END C_NLS_UNPAID_P;

  FUNCTION C_HEADER_SHOW_PREPAY_DIST_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_HEADER_SHOW_PREPAY_DIST;
  END C_HEADER_SHOW_PREPAY_DIST_P;

  FUNCTION C_HEADER_PREPAYMENT_TYPE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_HEADER_PREPAYMENT_TYPE;
  END C_HEADER_PREPAYMENT_TYPE_P;

END AP_APXINPSR_XMLP_PKG;



/
