--------------------------------------------------------
--  DDL for Package Body JL_JLCOPCWT_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JL_JLCOPCWT_XMLP_PKG" AS
/* $Header: JLCOPCWTB.pls 120.1 2007/12/25 16:51:29 dwkrishn noship $ */
  FUNCTION GET_BASE_CURR_DATA RETURN BOOLEAN IS
    BASE_CURR AP_SYSTEM_PARAMETERS.BASE_CURRENCY_CODE%TYPE;
    PREC FND_CURRENCIES_VL.PRECISION%TYPE;
    MIN_AU FND_CURRENCIES_VL.MINIMUM_ACCOUNTABLE_UNIT%TYPE;
    DESCR FND_CURRENCIES_VL.DESCRIPTION%TYPE;
  BEGIN
    BASE_CURR := '';
    PREC := 0;
    MIN_AU := 0;
    DESCR := '';
    SELECT
      P.BASE_CURRENCY_CODE,
      C.PRECISION,
      C.MINIMUM_ACCOUNTABLE_UNIT,
      C.DESCRIPTION
    INTO BASE_CURR,PREC,MIN_AU,DESCR
    FROM
      AP_SYSTEM_PARAMETERS P,
      FND_CURRENCIES_VL C
    WHERE P.BASE_CURRENCY_CODE = C.CURRENCY_CODE;
    C_BASE_CURRENCY_CODE := BASE_CURR;
    P_MIN_PRECISION := PREC;
    C_BASE_MIN_ACCT_UNIT := MIN_AU;
    C_BASE_DESCRIPTION := DESCR;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_BASE_CURR_DATA;

  FUNCTION GET_COVER_PAGE_VALUES RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COVER_PAGE_VALUES;

  FUNCTION GET_NLS_STRINGS RETURN BOOLEAN IS
    NLS_ALL AP_LOOKUP_CODES.DISPLAYED_FIELD%TYPE;
    NLS_YES FND_LOOKUPS.MEANING%TYPE;
    NLS_NO FND_LOOKUPS.MEANING%TYPE;
  BEGIN
    NLS_ALL := '';
    NLS_YES := '';
    NLS_NO := '';
    SELECT
      LY.MEANING,
      LN.MEANING,
      LA.DISPLAYED_FIELD
    INTO NLS_YES,NLS_NO,NLS_ALL
    FROM
      FND_LOOKUPS LY,
      FND_LOOKUPS LN,
      AP_LOOKUP_CODES LA
    WHERE LY.LOOKUP_TYPE = 'YES_NO'
      AND LY.LOOKUP_CODE = 'Y'
      AND LN.LOOKUP_TYPE = 'YES_NO'
      AND LN.LOOKUP_CODE = 'N'
      AND LA.LOOKUP_TYPE = 'NLS REPORT PARAMETER'
      AND LA.LOOKUP_CODE = 'ALL';
    C_NLS_YES := NLS_YES;
    C_NLS_NO := NLS_NO;
    C_NLS_ALL := NLS_ALL;
    FND_MESSAGE.SET_NAME('SQLAP'
                        ,'AP_APPRVL_NO_DATA');
    C_NLS_NO_DATA_EXISTS := FND_MESSAGE.GET;
    C_NLS_NO_DATA_EXISTS := '*** ' || C_NLS_NO_DATA_EXISTS || ' ***';
    FND_MESSAGE.SET_NAME('SQLAP'
                        ,'AP_ALL_END_OF_REPORT');
    C_NLS_END_OF_REPORT := FND_MESSAGE.GET;
    C_NLS_END_OF_REPORT := '*** ' || C_NLS_END_OF_REPORT || ' ***';
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_NLS_STRINGS;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      CUANTOS NUMBER;
      INIT_FAILURE EXCEPTION;
      L_OU_ID NUMBER;
    BEGIN
      BEGIN
       P_SUPPLIER_FROM_1:=P_SUPPLIER_FROM;
        P_SUPPLIER_TO_1:= P_SUPPLIER_TO;
        P_SUPP_NUM_FROM_1:= P_SUPP_NUM_FROM;
        P_SUPP_NUM_TO_1:= P_SUPP_NUM_TO;
        P_CONC_REQUEST_ID:= FND_GLOBAL.CONC_REQUEST_ID;
        /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
        IF (P_DEBUG_SWITCH = 'Y') THEN
          /*SRW.MESSAGE('1'
                     ,'After SRWINIT')*/NULL;
        END IF;
            EXCEPTION
        WHEN OTHERS THEN
          /*SRW.MESSAGE(02
                     ,'ERROR unknown Location ID')*/NULL;
          RAISE;
      END;
      BEGIN
        FND_PROFILE.GET('org_id'
                       ,L_OU_ID);
        C_PROFILE_COUNTRY_CODE := JG_ZZ_SHARED_PKG.GET_COUNTRY(L_OU_ID
                                                              ,NULL);
        IF (P_DEBUG_SWITCH = 'Y') THEN
          /*SRW.MESSAGE('1'
                     ,'After Get the Country Code: ' || C_PROFILE_COUNTRY_CODE)*/NULL;
        END IF;
      EXCEPTION
        WHEN OTHERS THEN
          /*SRW.MESSAGE(02
                     ,'ERROR unknown Country Code')*/NULL;
          RAISE;
      END;
      IF (GET_NLS_STRINGS <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        /*SRW.MESSAGE('3'
                   ,'After Get_NLS_Strings')*/NULL;
      END IF;
      IF (GET_BASE_CURR_DATA <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        /*SRW.MESSAGE('4'
                   ,'After Get_Base_Curr_Data')*/NULL;
      END IF;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        /*SRW.BREAK*/NULL;
      END IF;
      RETURN (TRUE);
    EXCEPTION
      WHEN OTHERS THEN
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        /*SRW.MESSAGE('20'
                   ,'After SRWEXIT')*/NULL;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION FSELECTEDSUPPLIERS RETURN VARCHAR2 IS
    RET_TEXT VARCHAR2(2000):='   ';
  BEGIN
    IF (P_SUPPLIER_ID IS NOT NULL) THEN
      RET_TEXT := 'and    nvl(pv2.vendor_id,pv1.vendor_id)      =       :P_Supplier_Id';
    ELSE
      IF ((P_SUPPLIER_FROM IS NOT NULL) OR (P_SUPPLIER_TO IS NOT NULL)) THEN
        RET_TEXT := 'and    nvl(pv2.vendor_name,pv1.vendor_name)    between nvl(:P_Supplier_From_1' ||
	'                                          ,nvl(pv2.vendor_name,pv1.vendor_name))' ||
	'                                   and nvl(:P_Supplier_To_1' ||
	'                                          ,nvl(pv2.vendor_name,pv1.vendor_name))';
      END IF;
      IF ((P_SUPP_NUM_FROM IS NOT NULL) OR (P_SUPP_NUM_TO IS NOT NULL)) THEN
        DECLARE
          SUP_NUM VARCHAR2(2000) := 'nvl(pv2.segment1,pv1.segment1)';
          NUM_FROM VARCHAR2(2000) := 'nvl(:P_Supp_Num_From_1, nvl(pv2.segment1,pv1.segment1))';
          NUM_TO VARCHAR2(2000) := 'nvl(:P_Supp_Num_To_1, nvl(pv2.segment1,pv1.segment1))';
        BEGIN
          RET_TEXT := 'and  ' || SUP_NUM || ' between ' || NUM_FROM || ' and ' || NUM_TO;
        END;
      END IF;
    END IF;
    RETURN (RET_TEXT);
  END FSELECTEDSUPPLIERS;

  FUNCTION ACCEPT_PARAMETER(PARAMETER_NAME IN VARCHAR2) RETURN BOOLEAN IS
  BEGIN
    IF (PARAMETER_NAME = 'P_Supplier_Id') THEN
      IF (P_SUPPLIER_ID IS NOT NULL) THEN
        P_SUPPLIER_FROM := NULL;
        P_SUPPLIER_TO := NULL;
        P_SUPP_NUM_FROM := NULL;
        P_SUPP_NUM_TO := NULL;
      END IF;
    END IF;
    RETURN (TRUE);
  END ACCEPT_PARAMETER;

  FUNCTION P_SUPPLIER_FROMVALIDTRIGGER RETURN BOOLEAN IS
  BEGIN
    RETURN (ACCEPT_PARAMETER('P_Supplier_From'));
    RETURN (TRUE);
  END P_SUPPLIER_FROMVALIDTRIGGER;

  FUNCTION P_SUPPLIER_IDVALIDTRIGGER0116 RETURN BOOLEAN IS
  BEGIN
    RETURN (ACCEPT_PARAMETER('P_Supplier_Id'));
    RETURN (TRUE);
  END P_SUPPLIER_IDVALIDTRIGGER0116;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  a boolean;
  BEGIN
  a:=P_SUPPLIER_IDVALIDTRIGGER0116;
    P_SELECTED_SUPPLIERS := FSELECTEDSUPPLIERS;
    P_SELECTED_DATES := FSELECTEDDATES;
    IF P_REPORTING_LEVEL = '2000' THEN
      LP_AP_INVOICE_DISTRIBUTIONS_WH := 'AND aid.legal_entity_id = ' || P_REPORTING_CONTEXT;
      LP_AP_INVOICES_WH := 'AND inv1.legal_entity_id = ' || P_REPORTING_CONTEXT;
    ELSE
      FND_MO_REPORTING_API.INITIALIZE(P_REPORTING_LEVEL
                                     ,P_REPORTING_CONTEXT
                                     ,'AUTO');
      LP_AP_INVOICE_DISTRIBUTIONS_WH := FND_MO_REPORTING_API.GET_PREDICATE('aid'
                                                                          ,NULL
                                                                          ,P_REPORTING_CONTEXT);
      LP_AP_INVOICES_WH := FND_MO_REPORTING_API.GET_PREDICATE('INV1'
                                                             ,NULL
                                                             ,P_REPORTING_CONTEXT);
    END IF;
    IF P_AWT_TYPE IS NOT NULL THEN
      P_AWT_TYPE_CODE := 'and jat.awt_type_code = :P_AWT_TYPE';
    ELSE
      P_AWT_TYPE_CODE := '  ';
    END IF;
    IF (P_DEBUG_SWITCH = 'Y') THEN
      /*SRW.MESSAGE('1'
                 ,'Making Condition Where in After Form Trigger')*/NULL;
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION CALCULATE_VAT_AMOUNT(P_TAX_NAME IN VARCHAR2
                               ,P_VENDOR_ID IN NUMBER
                               ,P_VENDOR_NUMBER IN VARCHAR2) RETURN NUMBER IS
    V_VAT_AMOUNT NUMBER;
    L_ORG_BOOLEAN BOOLEAN;
  BEGIN
    IF P_REPORTING_LEVEL in ('3000','2000') THEN
      SELECT
        ROUND(NVL(SUM((NVL(AID.BASE_AMOUNT
                         ,AID.AMOUNT) * ATC2.TAX_RATE) / 100)
                 ,0)
             ,P_MIN_PRECISION) VAT_AMOUNT
      INTO V_VAT_AMOUNT
      FROM
        AP_TAX_CODES_ALL ATC,
        JL_ZZ_AP_SUP_AWT_CD_ALL JZSAC,
        JL_ZZ_AP_INV_DIS_WH_ALL JZIDW,
        AP_TAX_CODES_ALL ATC2,
        AP_INVOICES_ALL AI,
        AP_INVOICE_DISTRIBUTIONS_ALL AID
      WHERE AI.LEGAL_ENTITY_ID = DECODE(P_REPORTING_LEVEL
            ,'2000'
            ,P_REPORTING_CONTEXT
            ,AI.LEGAL_ENTITY_ID)
        AND AI.ORG_ID = DECODE(P_REPORTING_LEVEL
            ,'3000'
            ,P_REPORTING_CONTEXT
            ,AI.ORG_ID)
        AND AID.ACCOUNTING_DATE >= NVL(TO_DATE(P_DATE_FROM
                 ,'RRRR/MM/DD HH24:MI:SS')
         ,AID.ACCOUNTING_DATE)
        AND AID.ACCOUNTING_DATE < NVL(TO_DATE(P_DATE_TO
                 ,'RRRR/MM/DD HH24:MI:SS') + 1
         ,AID.ACCOUNTING_DATE + 1)
        AND AID.MATCH_STATUS_FLAG = 'A'
        AND AID.LINE_TYPE_LOOKUP_CODE <> 'AWT'
        AND AID.LINE_TYPE_LOOKUP_CODE <> 'TAX'
        AND JZIDW.INVOICE_ID = AID.INVOICE_ID
        AND JZSAC.SUPP_AWT_CODE_ID = JZIDW.SUPP_AWT_CODE_ID
        AND ATC.TAX_ID = JZSAC.TAX_ID
        AND ATC.GLOBAL_ATTRIBUTE19 is not null
        AND ATC.NAME = P_TAX_NAME
        AND AID.TAX_CODE_ID is not null
        AND ATC2.TAX_ID = AID.TAX_CODE_ID
        AND AI.CANCELLED_DATE is null
        AND ( ( AID.GLOBAL_ATTRIBUTE2 is null
        AND AID.INVOICE_ID = AI.INVOICE_ID
        AND AI.VENDOR_ID = P_VENDOR_ID )
      OR ( AID.GLOBAL_ATTRIBUTE2 = P_VENDOR_NUMBER
        AND AID.INVOICE_ID = AI.INVOICE_ID ) );
    ELSE
      P_ORGS := SUBSTR(LP_AP_INVOICES_WH
                      ,INSTR(LP_AP_INVOICES_WH
                           ,'INSTR'
                           ,1
                           ,1)
                      ,LENGTH(LP_AP_INVOICES_WH));
      P_ORGS := SUBSTR(P_ORGS
                      ,1
                      ,LENGTH(P_ORGS) - 5);
      SELECT
        ROUND(SUM((NVL(AID.BASE_AMOUNT
                     ,AID.AMOUNT) * ATC2.TAX_RATE) / 100)
             ,P_MIN_PRECISION) VAT_AMOUNT
      INTO V_VAT_AMOUNT
      FROM
        AP_TAX_CODES_ALL ATC,
        JL_ZZ_AP_SUP_AWT_CD_ALL JZSAC,
        JL_ZZ_AP_INV_DIS_WH_ALL JZIDW,
        AP_TAX_CODES_ALL ATC2,
        AP_INVOICES_ALL AI,
        AP_INVOICE_DISTRIBUTIONS_ALL AID
      WHERE '0' NOT IN (
        SELECT
          P_ORGS
        FROM
          AP_INVOICES_ALL INV
        WHERE AI.INVOICE_ID = INV.INVOICE_ID )
        AND AID.ACCOUNTING_DATE >= NVL(TO_DATE(P_DATE_FROM
                 ,'RRRR/MM/DD HH24:MI:SS')
         ,AID.ACCOUNTING_DATE)
        AND AID.ACCOUNTING_DATE < NVL(TO_DATE(P_DATE_TO
                 ,'RRRR/MM/DD HH24:MI:SS') + 1
         ,AID.ACCOUNTING_DATE + 1)
        AND AID.MATCH_STATUS_FLAG = 'A'
        AND AID.LINE_TYPE_LOOKUP_CODE <> 'AWT'
        AND AID.LINE_TYPE_LOOKUP_CODE <> 'TAX'
        AND JZIDW.INVOICE_ID = AID.INVOICE_ID
        AND JZSAC.SUPP_AWT_CODE_ID = JZIDW.SUPP_AWT_CODE_ID
        AND ATC.TAX_ID = JZSAC.TAX_ID
        AND ATC.GLOBAL_ATTRIBUTE19 is not null
        AND ATC.NAME = P_TAX_NAME
        AND AID.TAX_CODE_ID is not null
        AND ATC2.TAX_ID = AID.TAX_CODE_ID
        AND AI.CANCELLED_DATE is null
        AND ( ( AID.GLOBAL_ATTRIBUTE2 is null
        AND AID.INVOICE_ID = AI.INVOICE_ID
        AND AI.VENDOR_ID = P_VENDOR_ID )
      OR ( AID.GLOBAL_ATTRIBUTE2 = P_VENDOR_NUMBER
        AND AID.INVOICE_ID = AI.INVOICE_ID ) );
    END IF;
    RETURN (V_VAT_AMOUNT);
  END CALCULATE_VAT_AMOUNT;

  FUNCTION CF_VAT_AMOUNTFORMULA(CERTIFICATE_TYPE IN VARCHAR2
                               ,TAX_NAME IN VARCHAR2
                               ,VENDOR_ID IN NUMBER
                               ,VENDOR_NUMBER IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    IF CERTIFICATE_TYPE = 'VAT' THEN
      RETURN (CALCULATE_VAT_AMOUNT(TAX_NAME
                                 ,VENDOR_ID
                                 ,VENDOR_NUMBER));
    ELSE
      RETURN (0);
    END IF;
    RETURN NULL;
  END CF_VAT_AMOUNTFORMULA;

  FUNCTION CF_DATE_FROMFORMULA RETURN VARCHAR2 IS
    L_DATE_FROM VARCHAR2(20);
  BEGIN
    SELECT
      TO_CHAR(TO_DATE(P_DATE_FROM
                     ,'YYYY/MM/DD HH24:MI:SS')
             ,'DD-MON-YYYY')
    INTO L_DATE_FROM
    FROM
      DUAL;
    RETURN (L_DATE_FROM);
  END CF_DATE_FROMFORMULA;

  FUNCTION CF_DATE_TOFORMULA RETURN VARCHAR2 IS
    L_DATE_TO VARCHAR2(20);
  BEGIN
    SELECT
      TO_CHAR(TO_DATE(P_DATE_TO
                     ,'YYYY/MM/DD HH24:MI:SS')
             ,'DD-MON-YYYY')
    INTO L_DATE_TO
    FROM
      DUAL;
    RETURN (L_DATE_TO);
  END CF_DATE_TOFORMULA;

  FUNCTION FSELECTEDDATES RETURN VARCHAR2 IS
    RET_TEXT VARCHAR2(1000) := NULL;

  BEGIN
    IF P_DATE_FROM IS NOT NULL THEN
      RET_TEXT := 'aid.accounting_date >= to_date(:P_Date_from,''RRRR/MM/DD HH24:MI:SS'')';
    END IF;
    IF P_DATE_TO IS NOT NULL THEN
      RET_TEXT := RET_TEXT || ' and ' ||  ' aid.accounting_date < to_date(:P_Date_to,''RRRR/MM/DD HH24:MI:SS'')+1';
    END IF;
    IF RET_TEXT IS NOT NULL THEN
      RET_TEXT := RET_TEXT || ' and ';
    END IF;
    RETURN RET_TEXT;
  END FSELECTEDDATES;

  FUNCTION C_BASE_CURRENCY_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BASE_CURRENCY_CODE;
  END C_BASE_CURRENCY_CODE_P;

  FUNCTION C_BASE_PRECISION_P RETURN NUMBER IS
  BEGIN
    RETURN C_BASE_PRECISION;
  END C_BASE_PRECISION_P;

  FUNCTION C_BASE_MIN_ACCT_UNIT_P RETURN NUMBER IS
  BEGIN
    RETURN C_BASE_MIN_ACCT_UNIT;
  END C_BASE_MIN_ACCT_UNIT_P;

  FUNCTION C_BASE_DESCRIPTION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BASE_DESCRIPTION;
  END C_BASE_DESCRIPTION_P;

  FUNCTION C_COMPANY_NAME_HEADER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COMPANY_NAME_HEADER;
  END C_COMPANY_NAME_HEADER_P;

  FUNCTION C_REPORT_START_DATE_P RETURN DATE IS
  BEGIN
    RETURN C_REPORT_START_DATE;
  END C_REPORT_START_DATE_P;

  FUNCTION C_NLS_YES_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_YES;
  END C_NLS_YES_P;

  FUNCTION C_NLS_NO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_NO;
  END C_NLS_NO_P;

  FUNCTION C_NLS_ALL_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_ALL;
  END C_NLS_ALL_P;

  FUNCTION C_NLS_NO_DATA_EXISTS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_NO_DATA_EXISTS;
  END C_NLS_NO_DATA_EXISTS_P;

  FUNCTION C_REPORT_RUN_TIME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_REPORT_RUN_TIME;
  END C_REPORT_RUN_TIME_P;

  FUNCTION C_CHART_OF_ACCOUNTS_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_CHART_OF_ACCOUNTS_ID;
  END C_CHART_OF_ACCOUNTS_ID_P;

  FUNCTION C_LOCATION_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_LOCATION_ID;
  END C_LOCATION_ID_P;

  FUNCTION C_NLS_END_OF_REPORT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_END_OF_REPORT;
  END C_NLS_END_OF_REPORT_P;

  FUNCTION C_PROFILE_COUNTRY_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_PROFILE_COUNTRY_CODE;
  END C_PROFILE_COUNTRY_CODE_P;

END JL_JLCOPCWT_XMLP_PKG;




/
