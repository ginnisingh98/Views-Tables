--------------------------------------------------------
--  DDL for Package Body WIP_WIPREORQ_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."WIP_WIPREORQ_XMLP_PKG" AS
/* $Header: WIPREORQB.pls 120.1 2008/01/31 12:38:11 npannamp noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    QTY:=get_precision(P_qty_precision);
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    /*SRW.USER_EXIT('FND FLEXSQL CODE="MSTK"
                  APPL_SHORT_NAME="INV" OUTPUT=":P_ASSY"
                  TABLEALIAS="MSI"
                  MODE="SELECT" DISPLAY="ALL"')*/NULL;
    IF (P_FROM_COMP IS NOT NULL) THEN
      IF (P_TO_COMP IS NOT NULL) THEN
        NULL;
      ELSE
        NULL;
      END IF;
    ELSE
      IF (P_TO_COMP IS NOT NULL) THEN
        NULL;
      END IF;
    END IF;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION LIMIT_LINES RETURN CHARACTER IS
    LIMIT_LINES VARCHAR2(80);
  BEGIN
    IF (P_FROM_LINE IS NOT NULL) THEN
      IF (P_TO_LINE IS NOT NULL) THEN
        LIMIT_LINES := ' AND WL.LINE_CODE BETWEEN ''' || P_FROM_LINE || ''' AND ''' || P_TO_LINE || ''' ';
      ELSE
        LIMIT_LINES := ' AND WL.LINE_CODE  >= ''' || P_FROM_LINE || ''' ';
      END IF;
    ELSE
      IF (P_TO_LINE IS NOT NULL) THEN
        LIMIT_LINES := ' AND WL.LINE_CODE  <= ''' || P_TO_LINE || ''' ';
      ELSE
        LIMIT_LINES := ' ';
      END IF;
    END IF;
    RETURN (LIMIT_LINES);
  END LIMIT_LINES;

  FUNCTION OPEN_SHORT_LIMITER RETURN CHARACTER IS
    QTY_OPEN_SHORT VARCHAR2(1000);
  BEGIN
    IF (P_AHEAD_BEHIND = 1) THEN
      QTY_OPEN_SHORT := 'HAVING    (SUM((LEAST(BCD.NEXT_SEQ_NUM + WRS.PROCESSING_WORK_DAYS,
                                                      :C_END_NUM  )
                                                      - GREATEST(BCD.NEXT_SEQ_NUM, :C_START_NUM ))
                                                      * WRO.QUANTITY_PER_ASSEMBLY * WRS.DAILY_PRODUCTION_RATE )
                                                     + SUM(GREATEST((:C_START_NUM-BCD.NEXT_SEQ_NUM),0)
                                                       *WRO.QUANTITY_PER_ASSEMBLY * WRS.DAILY_PRODUCTION_RATE)
                                                     - SUM(WRO.QUANTITY_ISSUED)) > 0 ';
    ELSE
      QTY_OPEN_SHORT := 'HAVING (SUM((LEAST(BCD.NEXT_SEQ_NUM + WRS.PROCESSING_WORK_DAYS,:C_END_NUM)
                                                      - GREATEST(BCD.NEXT_SEQ_NUM,:C_START_NUM))
                                                      * WRO.QUANTITY_PER_ASSEMBLY * WRS.DAILY_PRODUCTION_RATE )
                                                     - SUM(WRO.QUANTITY_ISSUED)) > 0 ';
    END IF;
    RETURN (QTY_OPEN_SHORT);
  END OPEN_SHORT_LIMITER;

  FUNCTION OPEN_SHORTFORMULA RETURN NUMBER IS
  BEGIN
    RETURN (1);
  END OPEN_SHORTFORMULA;

  FUNCTION ASSEMBLY_LIMITER RETURN CHARACTER IS
    LIMIT_ASSLY VARCHAR2(200);
  BEGIN
    IF (P_FROM_ASSEMBLY IS NOT NULL) THEN
      IF (P_TO_ASSEMBLY IS NOT NULL) THEN
        LIMIT_ASSLY := ' AND WE.WIP_ENTITY_NAME BETWEEN ''' || P_FROM_ASSEMBLY || ''' AND ''' || P_TO_ASSEMBLY || '''';
      ELSE
        LIMIT_ASSLY := ' AND WE.WIP_ENTITY_NAME >= ''' || P_FROM_ASSEMBLY || '''';
      END IF;
    ELSE
      IF (P_TO_ASSEMBLY IS NOT NULL) THEN
        LIMIT_ASSLY := ' AND WE.WIP_ENTITY_NAME <= ''' || P_TO_ASSEMBLY || '''';
      ELSE
        LIMIT_ASSLY := ' ';
      END IF;
    END IF;
    RETURN (LIMIT_ASSLY);
  END ASSEMBLY_LIMITER;

  FUNCTION C_NETTABLE_CONSTRAINTFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF (P_NETTABLE = 1) THEN
      RETURN ('AND    MSS.AVAILABILITY_TYPE(+) = 1');
    ELSE
      RETURN (' ');
    END IF;
    RETURN NULL;
  END C_NETTABLE_CONSTRAINTFORMULA;

  FUNCTION C_QTY_SHORT_QOHFORMULA(NET_QTY_COMP IN NUMBER
                                 ,C_ITEM_TOTAL_QTY IN NUMBER
                                 ,C_QTY_SHORT_FORMULA IN NUMBER
                                 ,C_OPEN_REQUIREMENTS IN VARCHAR2
                                 ,AVAIL_QTY IN NUMBER) RETURN NUMBER IS
  BEGIN
    /*SRW.REFERENCE(NET_QTY_COMP)*/NULL;
    /*SRW.REFERENCE(C_ITEM_TOTAL_QTY)*/NULL;
    /*SRW.REFERENCE(P_NETTABLE)*/NULL;
    IF (P_OPEN_SHORT = 1) THEN
      RETURN (C_QTY_SHORT_FORMULA - C_OPEN_REQUIREMENTS) * -1;
    ELSE
      RETURN -1 * (AVAIL_QTY - C_OPEN_REQUIREMENTS);
    END IF;
    RETURN NULL;
  END C_QTY_SHORT_QOHFORMULA;

  FUNCTION C_TOTAL_QTY_FORMULAFORMULA(C_TOTAL_QTY IN NUMBER
                                     ,SUPPLY_FLAG IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN C_TOTAL_QTY * SUPPLY_FLAG;
  END C_TOTAL_QTY_FORMULAFORMULA;

  FUNCTION C_QTY_SHORT_SUB_LOCFORMULA(C_QTY_SHORT_FORMULA IN NUMBER
                                     ,QTY_OPEN IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (C_QTY_SHORT_FORMULA - QTY_OPEN) * -1;
  END C_QTY_SHORT_SUB_LOCFORMULA;

  FUNCTION NET_QTY_DETAILFORMULA(AVAILABILITY_TYPE IN NUMBER
                                ,QUANTITY_ON_HAND IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (AVAILABILITY_TYPE * QUANTITY_ON_HAND);
  END NET_QTY_DETAILFORMULA;

  FUNCTION AVAIL_QTYFORMULA(NET_QTY_COMP IN NUMBER
                           ,C_ITEM_TOTAL_QTY IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (P_NETTABLE = 1) THEN
      RETURN (NET_QTY_COMP);
    ELSE
      RETURN (C_ITEM_TOTAL_QTY);
    END IF;
    RETURN NULL;
  END AVAIL_QTYFORMULA;

  FUNCTION C_LIMIT_COMPONENTSFORMULA RETURN VARCHAR2 IS
  BEGIN
    BEGIN
      IF (P_FLEXWHERE IS NOT NULL) THEN
        RETURN ('AND ');
      ELSE
        RETURN ('  ');
      END IF;
    END;
    RETURN NULL;
  END C_LIMIT_COMPONENTSFORMULA;

  FUNCTION ZEROFORMULA RETURN NUMBER IS
  BEGIN
    RETURN (0);
  END ZEROFORMULA;

  FUNCTION C_COMPONENT_DISP_SORTFORMULA(C_COMPONENT_DISP_SORT IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    RETURN (C_COMPONENT_DISP_SORT);
  END C_COMPONENT_DISP_SORTFORMULA;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    IF P_FROM_COMP IS NOT NULL OR P_TO_COMP IS NOT NULL THEN
      P_ITEM_ORG := 'AND MSI2.ORGANIZATION_ID = :P_ORGANIZATION_ID';
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION LIMIT_BULK_SUPPLY_TYPE RETURN CHARACTER IS
    LIMIT_BULK_SUPPLY_TYPE VARCHAR2(50);
  BEGIN
    IF (P_INCLUDE_BULK = 1) THEN
      LIMIT_BULK_SUPPLY_TYPE := ' ';
    ELSE
      LIMIT_BULK_SUPPLY_TYPE := 'AND WRO.WIP_SUPPLY_TYPE <> 4 ';
    END IF;
    RETURN (LIMIT_BULK_SUPPLY_TYPE);
  END LIMIT_BULK_SUPPLY_TYPE;

  FUNCTION LIMIT_VENDOR_SUPPLY_TYPE RETURN CHARACTER IS
    LIMIT_VENDOR_SUPPLY_TYPE VARCHAR2(50);
  BEGIN
    IF (P_INCLUDE_VENDOR = 1) THEN
      LIMIT_VENDOR_SUPPLY_TYPE := ' ';
    ELSE
      LIMIT_VENDOR_SUPPLY_TYPE := 'AND WRO.WIP_SUPPLY_TYPE <> 5 ';
    END IF;
    RETURN (LIMIT_VENDOR_SUPPLY_TYPE);
  END LIMIT_VENDOR_SUPPLY_TYPE;

function get_precision(qty_precision in number) return VARCHAR2 is
begin

if qty_precision = 0 then return('999G999G999G990');

elsif qty_precision = 1 then return('999G999G999G990D0');

elsif qty_precision = 3 then return('999G999G999G990D000');

elsif qty_precision = 4 then return('999G999G999G990D0000');

elsif qty_precision = 5 then return('999G999G999G990D00000');

elsif qty_precision = 6 then  return('999G999G999G990D000000');

else return('999G999G999G990D00');

end if;

end;

END WIP_WIPREORQ_XMLP_PKG;


/
