--------------------------------------------------------
--  DDL for Package Body XTR_XTRMDTRP_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."XTR_XTRMDTRP_XMLP_PKG" AS
/* $Header: XTRMDTRPB.pls 120.1 2007/12/28 12:55:02 npannamp noship $ */
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;
  FUNCTION BETWEENPAGE RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END BETWEENPAGE;
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    V_APP_ID NUMBER;
    CURSOR SUMS_CURSOR IS
      SELECT
        CNT
      FROM
        (   SELECT
            count(*) CNT
          FROM
            XTR_MARKET_DATA_INTERFACE
          WHERE RETURN_CODE >= 50
          UNION ALL
          SELECT
            count(*) CNT
          FROM
            XTR_MARKET_DATA_INTERFACE
          WHERE RETURN_CODE < 40
          UNION ALL
          SELECT
            count(*) CNT
          FROM
            XTR_MARKET_DATA_INTERFACE
          WHERE RETURN_CODE = 40 );
    CURSOR SYS_LANGUAGES_CURSOR IS
      SELECT
        ITEM_NAME,
        SUBSTR(TEXT
              ,1
              ,100) LANG_NAME
      FROM
        XTR_SYS_LANGUAGES_VL
      WHERE MODULE_NAME = 'XTRMDTRP';
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    BEGIN
      P_COMPANY_NAME_HEADER := CEP_STANDARD.GET_WINDOW_SESSION_TITLE;
    EXCEPTION
      WHEN OTHERS THEN
        FND_MESSAGE.SET_NAME('XTR'
                            ,'XTR_LOOKUP_ERR');
        /*SRW.MESSAGE('99'
                   ,FND_MESSAGE.GET)*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    SELECT
      FCPV.USER_CONCURRENT_PROGRAM_NAME,
      FCR.PROGRAM_APPLICATION_ID
    INTO P_REPORT_TITLE,V_APP_ID
    FROM
      FND_CONCURRENT_PROGRAMS_VL FCPV,
      FND_CONCURRENT_REQUESTS FCR
    WHERE FCR.REQUEST_ID = P_CONC_REQUEST_ID
      AND FCPV.APPLICATION_ID = FCR.PROGRAM_APPLICATION_ID
      AND FCPV.CONCURRENT_PROGRAM_ID = FCR.CONCURRENT_PROGRAM_ID;
      P_REPORT_TITLE:= substr(P_REPORT_TITLE,1,instr(P_REPORT_TITLE,' (XML)'));
    SELECT
      FORM_LEFT_PROMPT
    INTO P_ERRORS_ONLY_LABEL
    FROM
      FND_DESCR_FLEX_COL_USAGE_VL
    WHERE APPLICATION_ID = V_APP_ID
      AND DESCRIPTIVE_FLEXFIELD_NAME = '$SRS$.XTRMDTRP'
      AND SRW_PARAM = 'P_ERRORS_ONLY';
    FOR lang IN SYS_LANGUAGES_CURSOR LOOP
      IF LANG.ITEM_NAME = 'P_REPORT_DATE' THEN
        P_REPORT_DATE := LANG.LANG_NAME;
      ELSIF LANG.ITEM_NAME = 'P_PAGE' THEN
        P_PAGE := LANG.LANG_NAME;
      ELSIF LANG.ITEM_NAME = 'P_REJECTED_SUM_LABEL' THEN
        P_REJECTED_SUM_LABEL := LANG.LANG_NAME;
      ELSIF LANG.ITEM_NAME = 'P_CURRENT_SUM_LABEL' THEN
        P_CURRENT_SUM_LABEL := LANG.LANG_NAME;
      ELSIF LANG.ITEM_NAME = 'P_HISTORIC_SUM_LABEL' THEN
        P_HISTORIC_SUM_LABEL := LANG.LANG_NAME;
      ELSIF LANG.ITEM_NAME = 'P_REJECTED' THEN
        P_REJECTED := LANG.LANG_NAME;
      ELSIF LANG.ITEM_NAME = 'P_TRANSFERRED' THEN
        P_TRANSFERRED := LANG.LANG_NAME;
      ELSIF LANG.ITEM_NAME = 'P_SOURCE' THEN
        P_SOURCE := LANG.LANG_NAME;
      ELSIF LANG.ITEM_NAME = 'P_EXTERNAL_REF_CODE' THEN
        P_EXTERNAL_REF_CODE := LANG.LANG_NAME;
      ELSIF LANG.ITEM_NAME = 'P_BID' THEN
        P_BID := LANG.LANG_NAME;
      ELSIF LANG.ITEM_NAME = 'P_ASK' THEN
        P_ASK := LANG.LANG_NAME;
      ELSIF LANG.ITEM_NAME = 'P_MID' THEN
        P_MID := LANG.LANG_NAME;
      ELSIF LANG.ITEM_NAME = 'P_SPREAD' THEN
        P_SPREAD := LANG.LANG_NAME;
      ELSIF LANG.ITEM_NAME = 'P_DATE' THEN
        P_DATE := LANG.LANG_NAME;
      ELSIF LANG.ITEM_NAME = 'P_REF_CODE' THEN
        P_REF_CODE := LANG.LANG_NAME;
      ELSIF LANG.ITEM_NAME = 'P_END_REPORT' THEN
        P_END_REPORT := LANG.LANG_NAME;
      END IF;
    END LOOP;
    OPEN SUMS_CURSOR;
    FETCH SUMS_CURSOR
     INTO P_REJECTED_SUM;
    FETCH SUMS_CURSOR
     INTO P_CURRENT_SUM;
    FETCH SUMS_CURSOR
     INTO P_HISTORIC_SUM;
    CLOSE SUMS_CURSOR;
    RETURN (TRUE);
  END BEFOREREPORT;
  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERPFORM;
  FUNCTION BEFOREPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END BEFOREPFORM;
  FUNCTION CF_DATEFORMATFORMULA(CF_DATEFORMAT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.USER_EXIT('FND DATEFORMAT :CF_DATEFORMAT')*/NULL;
    RETURN (CF_DATEFORMAT);
  END CF_DATEFORMATFORMULA;
END XTR_XTRMDTRP_XMLP_PKG;


/
