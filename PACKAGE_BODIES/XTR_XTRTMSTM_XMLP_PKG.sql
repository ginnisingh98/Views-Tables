--------------------------------------------------------
--  DDL for Package Body XTR_XTRTMSTM_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."XTR_XTRTMSTM_XMLP_PKG" AS
/* $Header: XTRTMSTMB.pls 120.1 2007/12/28 13:03:41 npannamp noship $ */
  FUNCTION STATE_DATEFORMULA RETURN DATE IS
  BEGIN
    RETURN (AS_AT_DATE2);
  END STATE_DATEFORMULA;

  FUNCTION REF_TYPE1FORMULA(REFERENCE varchar2) RETURN VARCHAR2 IS
  BEGIN
    /*EXECUTE IMMEDIATE
      'SELECT DECODE(:REFERENCE,''INCRSE'',''Princ. Incr'',''Repayment'') INTO :REF_TYPE FROM DUAL';
    COMMIT;*/
    SELECT DECODE(REFERENCE,'INCRSE','Princ. Incr','Repayment') INTO REF_TYPE FROM DUAL;
    RETURN ('');
  END REF_TYPE1FORMULA;

  FUNCTION REF_TYPEFORMULA RETURN VARCHAR2 IS
  BEGIN
    RETURN NULL;
  END REF_TYPEFORMULA;

  FUNCTION PRIN_DED1FORMULA(REFERENCE varchar2, ADJUST_PRINCIPAL number) RETURN VARCHAR2 IS
  BEGIN
    /*EXECUTE IMMEDIATE
      'SELECT DECODE(:REFERENCE,''DEDUCTION'',:ADJUST_PRINCIPAL,0) INTO :PRIN_DED FROM DUAL';
    COMMIT;*/
    SELECT DECODE(REFERENCE,'DEDUCTION',ADJUST_PRINCIPAL,0) INTO PRIN_DED FROM DUAL;
    RETURN ('');
  END PRIN_DED1FORMULA;

  FUNCTION PRIN_DEDFORMULA RETURN NUMBER IS
  BEGIN
    RETURN NULL;
  END PRIN_DEDFORMULA;

  FUNCTION PI_RECD1FORMULA(ADJUST_INTEREST number, ADJUST_PRIN number) RETURN VARCHAR2 IS
  BEGIN
    /*EXECUTE IMMEDIATE
      'SELECT (nvl(:ADJUST_INTEREST,0) + nvl(:ADJUST_PRIN,0)) INTO :PI_RECD FROM DUAL';
    COMMIT;*/
    SELECT (nvl(ADJUST_INTEREST,0) + nvl(ADJUST_PRIN,0)) INTO PI_RECD FROM DUAL;
    RETURN ('');
  END PI_RECD1FORMULA;

  FUNCTION PI_RECDFORMULA RETURN NUMBER IS
  BEGIN
    RETURN NULL;
  END PI_RECDFORMULA;

  FUNCTION ADJUST_PRIN1FORMULA(REFERENCE varchar2, ADJUST_PRINCIPAL number) RETURN VARCHAR2 IS
  BEGIN
    /*EXECUTE IMMEDIATE
      'SELECT DECODE(:REFERENCE,''DEDUCTION'',:ADJUST_PRINCIPAL,:ADJUST_PRINCIPAL) INTO :ADJUST_PRIN FROM DUAL';
    COMMIT;*/
    SELECT DECODE(REFERENCE,'DEDUCTION',ADJUST_PRINCIPAL,ADJUST_PRINCIPAL) INTO ADJUST_PRIN FROM DUAL;
    RETURN to_char(ADJUST_PRIN);
  END ADJUST_PRIN1FORMULA;

  FUNCTION ADJUST_PRINFORMULA RETURN NUMBER IS
  BEGIN
    RETURN NULL;
  END ADJUST_PRINFORMULA;

  FUNCTION ACTUAL_BAL1FORMULA(REFERENCE varchar2, BALANCE_CFWD number, PRIN_DECRSE number) RETURN VARCHAR2 IS
  BEGIN
    /*EXECUTE IMMEDIATE
      'SELECT DECODE(:REFERENCE,''INCRSE'',:BALANCE_CFWD - NVL(:PRIN_DECRSE,0),:BALANCE_CFWD) INTO :ACTUAL_BAL FROM DUAL';
    COMMIT;*/
    SELECT DECODE(REFERENCE,'INCRSE',BALANCE_CFWD - NVL(PRIN_DECRSE,0),BALANCE_CFWD) INTO ACTUAL_BAL FROM DUAL;
    RETURN to_char(ACTUAL_BAL);
  END ACTUAL_BAL1FORMULA;

  FUNCTION ACTUAL_BALFORMULA RETURN NUMBER IS
  BEGIN
    RETURN NULL;
  END ACTUAL_BALFORMULA;

  FUNCTION DATE_NOWFORMULA RETURN DATE IS
  BEGIN
    RETURN (AS_AT_DATE2);
  END DATE_NOWFORMULA;

  FUNCTION NET_DUE1FORMULA(INTEREST_DUE number, BALANCE_DUE number) RETURN VARCHAR2 IS
  BEGIN
    /*EXECUTE IMMEDIATE
      'SELECT nvl(:INTEREST_DUE,0) + nvl(:BALANCE_DUE,0) INTO :NET_DUE from DUAL';
    COMMIT;*/
    SELECT nvl(INTEREST_DUE,0) + nvl(BALANCE_DUE,0) INTO NET_DUE from DUAL;
    RETURN ('');
  END NET_DUE1FORMULA;

  FUNCTION NET_DUEFORMULA RETURN NUMBER IS
  BEGIN
    RETURN NULL;
  END NET_DUEFORMULA;

  FUNCTION BEFOREPFORM RETURN BOOLEAN IS
    L_ERROR NUMBER;
  BEGIN
    AS_AT_DATE2 := TRUNC(SYSDATE);
    RETURN (TRUE);
  END BEFOREPFORM;

  FUNCTION CF_SET_PARAFORMULA RETURN VARCHAR2 IS
  BEGIN
    SELECT
      SUBSTR(USER
            ,1
            ,10)
    INTO
      CP_PARA
    FROM
      DUAL;
    RETURN (CP_PARA);
  END CF_SET_PARAFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    L_DMMY_NUM NUMBER;
    L_MESSAGE FND_NEW_MESSAGES.MESSAGE_TEXT%TYPE;
    CURSOR GET_LANGUAGE_DESC(P_MODULE IN VARCHAR2) IS
      SELECT
        ITEM_NAME,
        SUBSTR(TEXT
              ,1
              ,100) LANG_NAME
      FROM
        XTR_SYS_LANGUAGES_VL
      WHERE MODULE_NAME = P_MODULE;
  BEGIN
    BEGIN
      COMPANY_NAME_HEADER := CEP_STANDARD.GET_WINDOW_SESSION_TITLE;
    EXCEPTION
      WHEN OTHERS THEN
        FND_MESSAGE.SET_NAME('XTR'
                            ,'XTR_LOOKUP_ERR');
        L_MESSAGE := FND_MESSAGE.GET;
        RAISE_APPLICATION_ERROR(-20101
                               ,NULL);
    END;
    FOR c IN GET_LANGUAGE_DESC('XTRTMSTM') LOOP
      IF C.ITEM_NAME = 'Z2ACTION_TYPE' THEN
        Z2ACTION_TYPE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2AMOUNT_NAME' THEN
        Z2AMOUNT_NAME := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2AS_AT' THEN
        Z2AS_AT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2A_FEE_IS_PAYABLE' THEN
        Z2A_FEE_IS_PAYABLE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2BALANCE' THEN
        Z2BALANCE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2CUSTOMER_NO' THEN
        Z2CUSTOMER_NO := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2DATE' THEN
        Z2DATE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2INITIAL_AMOUNT' THEN
        Z2INITIAL_AMOUNT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2INTEREST_REPAID_AS_AT' THEN
        Z2INTEREST_REPAID_AS_AT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2INT_SETTLED' THEN
        Z2INT_SETTLED := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2ON_REPLACEMENTS' THEN
        Z2ON_REPLACEMENTS := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2PLEASE_RETAIN_STATEMENT' THEN
        Z2PLEASE_RETAIN_STATEMENT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2PRINCIPAL' THEN
        Z2PRINCIPAL := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2PRINCIPAL_DEDUCTIONS_AS_AT' THEN
        Z2PRINCIPAL_DEDUCTIONS_AS_AT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2START_DATE' THEN
        Z2START_DATE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2STATEMENT_OF_ACCOUNTS' THEN
        Z2STATEMENT_OF_ACCOUNTS := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2TOTAL_SETTLED' THEN
        Z2TOTAL_SETTLED := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2TOTAL_TO_SETTLE_AS_AT' THEN
        Z2TOTAL_TO_SETTLE_AS_AT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'REPORT_DATE' THEN
        REPORT_DATE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_LOAN_NO' THEN
        Z_LOAN_NO := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_DEP_NO' THEN
        Z_DEP_NO := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_OF_YOUR' THEN
        Z_OF_YOUR := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_LOAN_FOLLOW' THEN
        Z_LOAN_FOLLOW := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z_DEP_FOLLOW' THEN
        Z_DEP_FOLLOW := C.LANG_NAME;
      END IF;
    END LOOP;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    SELECT
      CP.USER_CONCURRENT_PROGRAM_NAME
    INTO
      REPORT_SHORT_NAME
    FROM
      FND_CONCURRENT_PROGRAMS_VL CP,
      FND_CONCURRENT_REQUESTS CR
    WHERE CR.REQUEST_ID = P_CONC_REQUEST_ID
      AND CP.APPLICATION_ID = CR.PROGRAM_APPLICATION_ID
      AND CP.CONCURRENT_PROGRAM_ID = CR.CONCURRENT_PROGRAM_ID;
    /*P_TO_DATE := TO_CHAR(TO_DATE(P_TO_DATE
                                ,'YYYY/MM/DD HH24:MI:SS')
                        ,'DD-MON-YYYY');
    P_FROM_DATE := TO_CHAR(TO_DATE(P_FROM_DATE
                                  ,'YYYY/MM/DD HH24:MI:SS')
                          ,'DD-MON-YYYY');*/

    LP_TO_DATE := TO_DATE(TO_CHAR(TO_DATE(P_TO_DATE,'YYYY/MM/DD HH24:MI:SS'),'DD-MON-YYYY'),'DD-MM-YYYY');
    LP_FROM_DATE := TO_DATE(TO_CHAR(TO_DATE(P_FROM_DATE,'YYYY/MM/DD HH24:MI:SS'),'DD-MON-YYYY'),'DD-MM-YYYY');

    /*AS_AT_DATE2 := NVL(TO_DATE(P_TO_DATE
                              ,'DD-MON-YYYY')
                      ,TRUNC(SYSDATE));
    AS_AT_DATE3 := NVL(TO_DATE(P_FROM_DATE
                              ,'DD-MON-YYYY')
                      ,TRUNC(SYSDATE));*/
    AS_AT_DATE2 := NVL(LP_TO_DATE, TRUNC(SYSDATE));
    LAS_AT_DATE2 := ''''||TO_CHAR(AS_AT_DATE2, 'DD-MON-YYYY')||'''';
    AS_AT_DATE3 := NVL(LP_FROM_DATE, TRUNC(SYSDATE));

    --RAISE_APPLICATION_ERROR(-20501, 'Values of date : '||P_FROM_DATE||', '||P_TO_DATE);

    DEAL_NO2 := P_DEAL_NUMBER;
    CPARTY_CODE2 := P_CLIENT;
    DEAL_SUBTYPE2 := P_DEPOSIT_ADVANCE;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION REF_TYPE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN REF_TYPE;
  END REF_TYPE_P;

  FUNCTION PRIN_DED_P RETURN NUMBER IS
  BEGIN
    RETURN PRIN_DED;
  END PRIN_DED_P;

  FUNCTION PI_RECD_P RETURN NUMBER IS
  BEGIN
    RETURN PI_RECD;
  END PI_RECD_P;

  FUNCTION ADJUST_PRIN_P RETURN NUMBER IS
  BEGIN
    RETURN ADJUST_PRIN;
  END ADJUST_PRIN_P;

  FUNCTION ACTUAL_BAL_P RETURN NUMBER IS
  BEGIN
    RETURN ACTUAL_BAL;
  END ACTUAL_BAL_P;

  FUNCTION NET_DUE_P RETURN NUMBER IS
  BEGIN
    RETURN NET_DUE;
  END NET_DUE_P;

  FUNCTION CP_PARA_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_PARA;
  END CP_PARA_P;

END XTR_XTRTMSTM_XMLP_PKG;



/
