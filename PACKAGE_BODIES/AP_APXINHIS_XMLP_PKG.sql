--------------------------------------------------------
--  DDL for Package Body AP_APXINHIS_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."AP_APXINHIS_XMLP_PKG" AS
/* $Header: APXINHISB.pls 120.0 2007/12/27 07:54:04 vjaganat noship $ */
  FUNCTION C_OPEN_BALANCE_AMT1FORMULA(C_TRANSACTION_TYPE3 IN VARCHAR2
                                     ,C_OPEN_BALANCE_AMT IN NUMBER
                                     ,C_TRX_AMOUNT_SUM IN NUMBER
                                     ,C_PREPAY_AMT_F IN NUMBER
                                     ,C_TRANSACTION_AMT1_DUMMY_SUM IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF C_TRANSACTION_TYPE3 not in ('Gain','Loss') THEN
      RETURN (NVL(C_OPEN_BALANCE_AMT
                ,0) + NVL(C_TRX_AMOUNT_SUM
                ,0) + NVL(C_PREPAY_AMT_F
                ,0));
    ELSE
      RETURN NVL(C_OPEN_BALANCE_AMT
                ,0) + NVL(C_TRANSACTION_AMT1_DUMMY_SUM
                ,0) + NVL(C_PREPAY_AMT_F
                ,0);
    END IF;
  END C_OPEN_BALANCE_AMT1FORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
  P_INVOICE_DATE_FROM_T  := to_char(P_INVOICE_DATE_FROM,'DD-MON-YY');
  P_INVOICE_DATE_TO_T  := to_char(P_INVOICE_DATE_TO,'DD-MON-YY');

    DECLARE
      ERRORBUF VARCHAR2(132);
      INIT_FAILURE EXCEPTION;
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        NULL;
      END IF;
      IF (GET_NLS_STRINGS <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      SELECT
        GL.NAME,
        CUR.PRECISION,
        GL.CHART_OF_ACCOUNTS_ID,
        GL.CURRENCY_CODE
      INTO
        H_COMPANY_NAME
        ,P_MIN_PRECISION
        ,STRUCT_NUM
        ,H_FUNCTIONAL_CURRENCY
      FROM
        GL_SETS_OF_BOOKS GL,
        FND_CURRENCIES_VL CUR,
        AP_SYSTEM_PARAMETERS AP
      WHERE GL.SET_OF_BOOKS_ID = AP.SET_OF_BOOKS_ID
        AND GL.CURRENCY_CODE = CUR.CURRENCY_CODE
        AND GL.SET_OF_BOOKS_ID = P_BOOK;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        NULL;
      END IF;
      /*LP_VENDOR_ID := NULL;
      LP_VENDOR_SITE := NULL;
      LP_INVOICES := NULL;
      LP_INVOICES_NUMBER_FROM := NULL;
      LP_INVOICES_NUMBER_TO := NULL;
      LP_DOC_SEQUENCE_NAME := NULL;
      LP_DOC_SEQUENCE_NUMBER_FROM := NULL;
      LP_DOC_SEQUENCE_NUMBER_TO := NULL;
      LP_INVOICE_DATE_FROM := NULL;
      LP_INVOICE_DATE_TO := NULL;*/
      	    LP_VENDOR_ID := ' ';
            LP_VENDOR_SITE := ' ';
            LP_INVOICES := ' ';
            LP_INVOICES_NUMBER_FROM := ' ';
            LP_INVOICES_NUMBER_TO := ' ';
            LP_DOC_SEQUENCE_NAME := ' ';
            LP_DOC_SEQUENCE_NUMBER_FROM := ' ';
            LP_DOC_SEQUENCE_NUMBER_TO := ' ';
            LP_INVOICE_DATE_FROM := ' ';
            LP_INVOICE_DATE_TO := ' ';
      IF (P_VENDOR_ID IS NOT NULL) THEN
        LP_VENDOR_ID := 'and pv1.vendor_id = ' || TO_CHAR(P_VENDOR_ID);
        SELECT
          VENDOR_NAME
        INTO
          P_VENDOR_NAME
        FROM
          PO_VENDORS
        WHERE VENDOR_ID = P_VENDOR_ID;
      END IF;
      IF (P_VENDOR_SITE IS NOT NULL) THEN
        LP_VENDOR_SITE := 'and pvs.vendor_site_code = ''' || P_VENDOR_SITE || '''';
      END IF;
      IF (P_INVOICES_NUMBER_FROM IS NOT NULL) THEN
        LP_INVOICES_NUMBER_FROM := 'and i.invoice_num >= ''' || P_INVOICES_NUMBER_FROM || '''';
      END IF;
      IF (P_INVOICES_NUMBER_TO IS NOT NULL) THEN
        LP_INVOICES_NUMBER_TO := 'and i.invoice_num <= ''' || P_INVOICES_NUMBER_TO || '''';
      END IF;
      IF (P_DOC_SEQUENCE_NAME IS NOT NULL) THEN
        LP_DOC_SEQUENCE_NAME := 'and f2.name = ''' || P_DOC_SEQUENCE_NAME || '''';
      END IF;
      IF (P_DOC_SEQUENCE_NUMBER_FROM IS NOT NULL) THEN
        LP_DOC_SEQUENCE_NUMBER_FROM := 'and i.doc_sequence_value >= ''' || P_DOC_SEQUENCE_NUMBER_FROM || '''';
      END IF;
      IF (P_DOC_SEQUENCE_NUMBER_TO IS NOT NULL) THEN
        LP_DOC_SEQUENCE_NUMBER_TO := 'and i.doc_sequence_value <= ''' || P_DOC_SEQUENCE_NUMBER_TO || '''';
      END IF;
      IF (P_INVOICE_DATE_FROM IS NOT NULL) THEN
        LP_INVOICE_DATE_FROM := 'and i.invoice_date >= ''' || TO_CHAR(P_INVOICE_DATE_FROM) || ''' ';
      END IF;
      IF (P_INVOICE_DATE_TO IS NOT NULL) THEN
        LP_INVOICE_DATE_TO := 'and i.invoice_date <= ''' || TO_CHAR(P_INVOICE_DATE_TO) || ''' ';
      END IF;
      IF (P_INVOICES = 'Y') THEN
        LP_INVOICES := 'and i.invoice_type_lookup_code = ''' || P_PREPAYMENT || '''';
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        ERRORBUF := SQLERRM(SQLCODE);
        RAISE_APPLICATION_ERROR(-20101
                               ,NULL);
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      IF (P_DEBUG_SWITCH = 'Y') THEN
        NULL;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20101
                               ,NULL);
    END;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION C_VENDOR_SITE_TOTALFORMULA(C_TOTAL_INVOICE_AMOUNT_SUM IN NUMBER
                                     ,C_TOTAL_PAYMENT_AMOUNT_SUM IN NUMBER
                                     ,C_TOTAL_PREPAY_AMT_SUM IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (NVL(C_TOTAL_INVOICE_AMOUNT_SUM
              ,0) + NVL(C_TOTAL_PAYMENT_AMOUNT_SUM
              ,0) + NVL(C_TOTAL_PREPAY_AMT_SUM
              ,0));
  END C_VENDOR_SITE_TOTALFORMULA;

  FUNCTION GET_NLS_STRINGS RETURN BOOLEAN IS
  BEGIN
    FND_MESSAGE.SET_NAME('SQLAP'
                        ,'AP_APPRVL_NO_DATA');
--    C_NLS_NO_DATA_EXISTS := ' ' || C_NLS_NO_DATA_EXISTS || ' ';
    FND_MESSAGE.SET_NAME('SQLAP'
                        ,'AP_ALL_END_OF_REPORT');
 --   C_NLS_END_OF_REPORT := ' ' || C_NLS_END_OF_REPORT || ' ';

    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_NLS_STRINGS;

  FUNCTION C_CURRENCY_TOTALFORMULA(C_TOTAL_INVOICE_AMT_CURR IN NUMBER
                                  ,C_TOTAL_PAYMENT_AMT_CURR IN NUMBER
                                  ,C_TOTAL_PREPAY_AMT IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (NVL(C_TOTAL_INVOICE_AMT_CURR
              ,0) + NVL(C_TOTAL_PAYMENT_AMT_CURR
              ,0) + NVL(C_TOTAL_PREPAY_AMT
              ,0));
  END C_CURRENCY_TOTALFORMULA;

  FUNCTION T_VENDOR_TOTALFORMULA(T_TOTAL_INV_AMT IN NUMBER
                                ,T_TOTAL_PAY_AMT IN NUMBER
                                ,T_TOTAL_PREPAY_AMT IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (NVL(T_TOTAL_INV_AMT
              ,0) + NVL(T_TOTAL_PAY_AMT
              ,0) + NVL(T_TOTAL_PREPAY_AMT
              ,0));
  END T_VENDOR_TOTALFORMULA;

  FUNCTION T_REPORT_TOTALFORMULA(T_REPORT_INV_AMT IN NUMBER
                                ,T_REPORT_PAY_AMT IN NUMBER
                                ,T_REPORT_PREPAY_AMT IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (NVL(T_REPORT_INV_AMT
              ,0) + NVL(T_REPORT_PAY_AMT
              ,0) + NVL(T_REPORT_PREPAY_AMT
              ,0));
  END T_REPORT_TOTALFORMULA;

  FUNCTION C_TRANSACTION_AMT1_DUMFORMULA(C_TRANSACTION_TYPE3 IN VARCHAR2
                                        ,C_TRANSACTION_AMT1 IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF C_TRANSACTION_TYPE3 not in ('Gain','Loss') THEN
      RETURN (NVL(C_TRANSACTION_AMT1
                ,0));
    ELSE
      RETURN 0;
    END IF;
  END C_TRANSACTION_AMT1_DUMFORMULA;

  FUNCTION T_TRANSACTION_AMT_DUMFORMULA(T_TRANSACTION_TYPE4 IN VARCHAR2
                                       ,T_TRANSACTION_AMT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF T_TRANSACTION_TYPE4 not in ('Gain','Loss') THEN
      RETURN (NVL(T_TRANSACTION_AMT
                ,0));
    ELSE
      RETURN 0;
    END IF;
  END T_TRANSACTION_AMT_DUMFORMULA;

  FUNCTION T_TRANSACTION_AMT1_DUMFORMULA(T_TRANSACTION_TYPE3 IN VARCHAR2
                                        ,T_TRANSACTION_AMT2 IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF T_TRANSACTION_TYPE3 not in ('Gain','Loss') THEN
      RETURN (NVL(T_TRANSACTION_AMT2
                ,0));
    ELSE
      RETURN 0;
    END IF;
  END T_TRANSACTION_AMT1_DUMFORMULA;

  FUNCTION P_TRX_AMT_SUM_FFORMULA(P_TRX_AMOUNT_SUM IN NUMBER
                                 ,C_TOTAL_INVOICE_AMT IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN P_TRX_AMOUNT_SUM + C_TOTAL_INVOICE_AMT;
  END P_TRX_AMT_SUM_FFORMULA;

  FUNCTION C_PREPAY_AMT_FFORMULA(C_INVOICE_ID1 IN NUMBER) RETURN NUMBER IS
    PREPAY_AMT_F NUMBER;
  BEGIN
    SELECT
      SUM(NVL(AP_UTILITIES_PKG.AP_ROUND_CURRENCY(NVL(AID1.AMOUNT
                                                    ,0) * I2.PAYMENT_CROSS_RATE
                                                ,I2.PAYMENT_CURRENCY_CODE)
             ,0))
    INTO
      PREPAY_AMT_F
    FROM
      AP_INVOICE_DISTRIBUTIONS AID1,
      AP_INVOICE_DISTRIBUTIONS AID2,
      AP_INVOICES I2
    WHERE NVL(AID1.REVERSAL_FLAG
       ,'N') <> 'Y'
      AND AID1.PREPAY_DISTRIBUTION_ID is not null
      AND AID2.INVOICE_DISTRIBUTION_ID = AID1.PREPAY_DISTRIBUTION_ID
      AND AID2.INVOICE_ID = I2.INVOICE_ID
      AND AID1.INVOICE_ID = C_INVOICE_ID1;
    RETURN (PREPAY_AMT_F);
  END C_PREPAY_AMT_FFORMULA;

  FUNCTION T_PREPAY_AMT_FFORMULA(T_INVOICE_ID IN NUMBER) RETURN NUMBER IS
    T_PREPAY_AMT_F NUMBER;
  BEGIN
    SELECT
      SUM(NVL(AP_UTILITIES_PKG.AP_ROUND_CURRENCY(NVL(AID1.AMOUNT
                                                    ,0) * I2.PAYMENT_CROSS_RATE
                                                ,I2.PAYMENT_CURRENCY_CODE)
             ,0))
    INTO
      T_PREPAY_AMT_F
    FROM
      AP_INVOICE_DISTRIBUTIONS AID1,
      AP_INVOICE_DISTRIBUTIONS AID2,
      AP_INVOICES I2
    WHERE NVL(AID1.REVERSAL_FLAG
       ,'N') <> 'Y'
      AND AID1.PREPAY_DISTRIBUTION_ID is not null
      AND AID2.INVOICE_DISTRIBUTION_ID = AID1.PREPAY_DISTRIBUTION_ID
      AND AID2.INVOICE_ID = I2.INVOICE_ID
      AND AID1.INVOICE_ID = T_INVOICE_ID;
    RETURN (T_PREPAY_AMT_F);
  END T_PREPAY_AMT_FFORMULA;

  FUNCTION T_PREPAY_AMT_F1FORMULA(T_INVOICE_ID1 IN NUMBER) RETURN NUMBER IS
    T1_PREPAY_AMT_F NUMBER;
  BEGIN
    SELECT
      SUM(NVL(AP_UTILITIES_PKG.AP_ROUND_CURRENCY(NVL(AID1.AMOUNT
                                                    ,0) * I2.PAYMENT_CROSS_RATE
                                                ,I2.PAYMENT_CURRENCY_CODE)
             ,0))
    INTO
      T1_PREPAY_AMT_F
    FROM
      AP_INVOICE_DISTRIBUTIONS AID1,
      AP_INVOICE_DISTRIBUTIONS AID2,
      AP_INVOICES I2
    WHERE NVL(AID1.REVERSAL_FLAG
       ,'N') <> 'Y'
      AND AID1.PREPAY_DISTRIBUTION_ID is not null
      AND AID2.INVOICE_DISTRIBUTION_ID = AID1.PREPAY_DISTRIBUTION_ID
      AND AID2.INVOICE_ID = I2.INVOICE_ID
      AND AID1.INVOICE_ID = T_INVOICE_ID1;
    RETURN (T1_PREPAY_AMT_F);
  END T_PREPAY_AMT_F1FORMULA;

  FUNCTION STRUCT_NUM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN STRUCT_NUM;
  END STRUCT_NUM_P;

  FUNCTION C_NLS_NO_DATA_EXISTS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_NO_DATA_EXISTS;
  END C_NLS_NO_DATA_EXISTS_P;

  FUNCTION C_NLS_END_OF_REPORT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_END_OF_REPORT;
  END C_NLS_END_OF_REPORT_P;

  FUNCTION C_NLS_YES_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_YES;
  END C_NLS_YES_P;

  FUNCTION C_NLS_NO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_NO;
  END C_NLS_NO_P;

  FUNCTION C_NLS_ALL_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_ALL;
  END C_NLS_ALL_P;

END AP_APXINHIS_XMLP_PKG;



/
