--------------------------------------------------------
--  DDL for Package Body PAY_PAYRPVPR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PAY_PAYRPVPR_XMLP_PKG" AS
/* $Header: PAYRPVPRB.pls 120.0 2008/01/11 07:08:56 srikrish noship $ */
  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
  	IF ORDER_OPTIONAL is null THEN
  		ORDER_OPTIONAL:=' ';
  	END IF;
  	IF WHERE_OPTIONAL is null THEN
  		WHERE_OPTIONAL:=' ';
  	END IF;

    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION C_PAYMENT_TYPEFORMULA(PAYMENT_TYPE IN VARCHAR2) RETURN VARCHAR2 IS
    L_PAYMENT_TYPE VARCHAR2(240);
  BEGIN
    RETURN (PAYMENT_TYPE);
  END C_PAYMENT_TYPEFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    CURSOR C_TRACE IS
      SELECT
        'x'
      FROM
        PAY_ACTION_PARAMETERS
      WHERE PARAMETER_NAME = 'TRACE'
        AND PARAMETER_VALUE = 'Y';
    LV_DUMMY VARCHAR2(1);
  BEGIN
    --HR_STANDARD.EVENT('BEFORE REPORT');
    OPEN C_TRACE;
    FETCH C_TRACE
     INTO
       LV_DUMMY;
    IF C_TRACE%FOUND THEN
      EXECUTE IMMEDIATE
        'alter session set sql_trace=true';
    END IF;
    CLOSE C_TRACE;
    SELECT
      sysdate
    INTO
      C_SESSION_DATE
    FROM
      SYS.DUAL;
    SELECT
      LEGISLATION_CODE
    INTO
      P_UK_US
    FROM
      PER_BUSINESS_GROUPS
    WHERE BUSINESS_GROUP_ID = P_BUSINESS_GROUP_ID;
    C_BUSINESS_GROUP_NAME := HR_REPORTS.GET_BUSINESS_GROUP(P_BUSINESS_GROUP_ID);
    IF P_UK_US = 'US' THEN
      ORDER_OPTIONAL := ORDER_OPTIONAL || ' ,GRE_name ';
      P_PAYMENT_TYPE := SUBSTRB(HR_GENERAL.DECODE_LOOKUP('PAY_METHOD_PAYMENT_TYPE'
                                                        ,'CHECK')
                               ,1
                               ,8);
    ELSE
      P_PAYMENT_TYPE := SUBSTRB(HR_GENERAL.DECODE_LOOKUP('PAY_METHOD_PAYMENT_TYPE'
                                                        ,'CHEQUE')
                               ,1
                               ,8);
    END IF;
    IF P_PAYROLL_ID IS NOT NULL THEN
      WHERE_OPTIONAL := WHERE_OPTIONAL || ' and ppa3.payroll_id = ' || TO_CHAR(P_PAYROLL_ID) || ' ';
    END IF;
    IF P_CONSOLIDATION_SET_ID IS NOT NULL THEN
      WHERE_OPTIONAL := WHERE_OPTIONAL || ' and ppa1.consolidation_set_id = ' || TO_CHAR(P_CONSOLIDATION_SET_ID) || ' ';
    END IF;
    IF P_TAX_UNIT_ID IS NOT NULL THEN
      WHERE_OPTIONAL := WHERE_OPTIONAL || ' and paa2.tax_unit_id = ' || TO_CHAR(P_TAX_UNIT_ID) || ' ';
    END IF;
    IF P_CONSOLIDATION_SET_ID IS NOT NULL THEN
      SELECT
        PCS.CONSOLIDATION_SET_NAME
      INTO
        C_CONSOLIDATION_SET_NAME
      FROM
        PAY_CONSOLIDATION_SETS PCS
      WHERE PCS.CONSOLIDATION_SET_ID = P_CONSOLIDATION_SET_ID;
    END IF;
    IF P_PAYROLL_ID IS NOT NULL THEN
      C_PAYROLL_NAME := HR_REPORTS.GET_PAYROLL_NAME(C_SESSION_DATE
                                                   ,P_PAYROLL_ID);
    END IF;
    IF P_TAX_UNIT_ID IS NOT NULL THEN
      SELECT
        NAME
      INTO
        C_GRE_NAME
      FROM
        HR_TAX_UNITS_V
      WHERE TAX_UNIT_ID = P_TAX_UNIT_ID;
    END IF;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    --HR_STANDARD.EVENT('AFTER REPORT');
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION C_BUSINESS_GROUP_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BUSINESS_GROUP_NAME;
  END C_BUSINESS_GROUP_NAME_P;

  FUNCTION C_PAYROLL_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_PAYROLL_NAME;
  END C_PAYROLL_NAME_P;

  FUNCTION C_CONSOLIDATION_SET_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_CONSOLIDATION_SET_NAME;
  END C_CONSOLIDATION_SET_NAME_P;

  FUNCTION C_GRE_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_GRE_NAME;
  END C_GRE_NAME_P;

  FUNCTION C_SESSION_DATE_P RETURN DATE IS
  BEGIN
    RETURN C_SESSION_DATE;
  END C_SESSION_DATE_P;

  FUNCTION P_UK_USFormula RETURN VARCHAR2 IS
  BEGIN
    RETURN upper(P_UK_US);
  END P_UK_USFormula;

END PAY_PAYRPVPR_XMLP_PKG;

/
