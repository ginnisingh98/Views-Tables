--------------------------------------------------------
--  DDL for Package Body GMI_CMXFER01_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."GMI_CMXFER01_XMLP_PKG" AS
/* $Header: CMXFER01B.pls 120.0 2007/12/24 13:12:22 nchinnam noship $ */
  FUNCTION RELEASEDATECFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF P_FROM_RELEASE_DATE IS NOT NULL AND P_TO_RELEASE_DATE IS NOT NULL THEN
      RELEASEDATECP := ' and xf.actual_release_date >=  to_date(''' || TO_CHAR(P_FROM_RELEASE_DATE
                              ,'YYYY/MM/DD HH24:MI:SS') || ''', ''YYYY/MM/DD HH24:MI:SS'' ) ' || ' and xf.actual_release_date <   to_date(''' || TO_CHAR(P_TO_RELEASE_DATE
                              ,'YYYY/MM/DD HH24:MI:SS') || ''', ''YYYY/MM/DD HH24:MI:SS'' ) + 1 ';
    ELSIF P_FROM_RELEASE_DATE IS NULL AND P_TO_RELEASE_DATE IS NULL THEN
      RELEASEDATECP := '  ';
    ELSIF P_FROM_RELEASE_DATE IS NOT NULL AND P_TO_RELEASE_DATE IS NULL THEN
      RELEASEDATECP := ' and xf.actual_release_date >= to_date(''' || TO_CHAR(P_FROM_RELEASE_DATE
                              ,'YYYY/MM/DD HH24:MI:SS') || ''', ''YYYY/MM/DD HH24:MI:SS'' ) ';
    ELSIF P_FROM_RELEASE_DATE IS NOT NULL AND P_TO_RELEASE_DATE IS NOT NULL THEN
      RELEASEDATECP := ' and xf.actual_release_date <  to_date(''' || TO_CHAR(P_TO_RELEASE_DATE
                              ,'YYYY/MM/DD HH24:MI:SS') || ''', ''YYYY/MM/DD HH24:MI:SS'' ) + 1 ';
    END IF;
    RETURN RELEASEDATECP;
  END RELEASEDATECFFORMULA;

  FUNCTION SOURCEWAREHOUSECFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF LP_FROM_WAREHOUSE IS NOT NULL AND LP_TO_WAREHOUSE IS NOT NULL THEN
      SOURCEWAREHOUSECP := ' and xf.from_warehouse >= ''' || LP_FROM_WAREHOUSE || '''
                                              and xf.from_warehouse <= ''' || LP_TO_WAREHOUSE || '''';
    ELSIF LP_FROM_WAREHOUSE IS NULL AND LP_TO_WAREHOUSE IS NULL THEN
      SOURCEWAREHOUSECP := ' ';
      LP_FROM_WAREHOUSE := FND_PROFILE.VALUE('SY$ALL');
      LP_TO_WAREHOUSE := FND_PROFILE.VALUE('SY$ALL');
    ELSIF LP_FROM_WAREHOUSE IS NOT NULL AND LP_TO_WAREHOUSE IS NULL THEN
      SOURCEWAREHOUSECP := ' and xf.from_warehouse >= ''' || LP_FROM_WAREHOUSE || '''';
      LP_TO_WAREHOUSE := FND_PROFILE.VALUE('SY$ALL');
    ELSIF LP_FROM_WAREHOUSE IS NOT NULL AND LP_TO_WAREHOUSE IS NOT NULL THEN
      SOURCEWAREHOUSECP := ' and xf.from_warehouse <= ''' || LP_TO_WAREHOUSE || '''';
      LP_FROM_WAREHOUSE := FND_PROFILE.VALUE('SY$ALL');
    END IF;
    RETURN SOURCEWAREHOUSECP;
  END SOURCEWAREHOUSECFFORMULA;

  FUNCTION DESTINATIONWAREHOUSECFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF LP_FROM_DESTINATION_WAREHOUSE IS NOT NULL AND LP_TO_DESTINATION_WAREHOUSE IS NOT NULL THEN
      DESTINATIONWAREHOUSECP := ' and xf.to_warehouse >= ''' || LP_FROM_DESTINATION_WAREHOUSE || '''
                                                   and xf.to_warehouse <= ''' || LP_TO_DESTINATION_WAREHOUSE || '''';
    ELSIF LP_FROM_DESTINATION_WAREHOUSE IS NULL AND LP_TO_DESTINATION_WAREHOUSE IS NULL THEN
      DESTINATIONWAREHOUSECP := '  ';
      LP_FROM_DESTINATION_WAREHOUSE := FND_PROFILE.VALUE('SY$ALL');
      LP_TO_DESTINATION_WAREHOUSE := FND_PROFILE.VALUE('SY$ALL');
    ELSIF LP_FROM_DESTINATION_WAREHOUSE IS NOT NULL AND LP_TO_DESTINATION_WAREHOUSE IS NULL THEN
      DESTINATIONWAREHOUSECP := ' and xf.to_warehouse >= ''' || LP_FROM_DESTINATION_WAREHOUSE || '''';
      LP_TO_DESTINATION_WAREHOUSE := FND_PROFILE.VALUE('SY$ALL');
    ELSIF LP_FROM_DESTINATION_WAREHOUSE IS NOT NULL AND LP_TO_DESTINATION_WAREHOUSE IS NOT NULL THEN
      DESTINATIONWAREHOUSECP := ' and xf.to_warehouse <= ''' || LP_TO_DESTINATION_WAREHOUSE || '''';
      LP_FROM_DESTINATION_WAREHOUSE := FND_PROFILE.VALUE('SY$ALL');
    END IF;
    RETURN DESTINATIONWAREHOUSECP;
  END DESTINATIONWAREHOUSECFFORMULA;

  FUNCTION TREANSFERSTATUSCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF LP_FROM_TRANSFER_STATUS IS NOT NULL AND LP_TO_TRANSFER_STATUS IS NOT NULL THEN
      TRANSFERSTATUSCP := ' and ge.meaning >= ''' || LP_FROM_TRANSFER_STATUS || '''
                                             and ge.meaning <= ''' || LP_TO_TRANSFER_STATUS || '''';
    ELSIF LP_FROM_TRANSFER_STATUS IS NULL AND LP_TO_TRANSFER_STATUS IS NULL THEN
      TRANSFERSTATUSCP := '   ';
      LP_FROM_TRANSFER_STATUS := FND_PROFILE.VALUE('SY$ALL');
      LP_TO_TRANSFER_STATUS := FND_PROFILE.VALUE('SY$ALL');
    ELSIF LP_FROM_TRANSFER_STATUS IS NOT NULL AND LP_TO_TRANSFER_STATUS IS NULL THEN
      TRANSFERSTATUSCP := ' and ge.meaning >= ''' || LP_FROM_TRANSFER_STATUS || '''';
      LP_TO_TRANSFER_STATUS := FND_PROFILE.VALUE('SY$ALL');
    ELSIF LP_FROM_TRANSFER_STATUS IS NOT NULL AND LP_TO_TRANSFER_STATUS IS NOT NULL THEN
      TRANSFERSTATUSCP := ' and ge.meaning <= ''' || LP_TO_TRANSFER_STATUS || '''';
      LP_FROM_TRANSFER_STATUS := FND_PROFILE.VALUE('SY$ALL');
    END IF;
    RETURN TRANSFERSTATUSCP;
  END TREANSFERSTATUSCFFORMULA;

  FUNCTION SCHEDULEDSHIPDATECFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF P_FROM_SCHEDULED_RELEASE_DATE IS NOT NULL AND P_TO_SCHEDULED_RELEASE_DATE IS NOT NULL THEN
      SCHEDULEDSHIPDATECP := ' and xf.scheduled_release_date >= to_date( ''' || TO_CHAR(P_FROM_SCHEDULED_RELEASE_DATE
                                    ,'YYYY/MM/DD HH24:MI:SS') || ''', ''YYYY/MM/DD HH24:MI:SS'' ) ' || ' and xf.scheduled_release_date <  to_date( ''' || TO_CHAR(P_TO_SCHEDULED_RELEASE_DATE
                                    ,'YYYY/MM/DD HH24:MI:SS') || ''', ''YYYY/MM/DD HH24:MI:SS'' ) + 1 ';
    ELSIF P_FROM_SCHEDULED_RELEASE_DATE IS NULL AND P_TO_SCHEDULED_RELEASE_DATE IS NULL THEN
      SCHEDULEDSHIPDATECP := '  ';
    ELSIF P_FROM_SCHEDULED_RELEASE_DATE IS NOT NULL AND P_TO_SCHEDULED_RELEASE_DATE IS NULL THEN
      SCHEDULEDSHIPDATECP := ' and xf.scheduled_release_date >= to_date( ''' || TO_CHAR(P_FROM_SCHEDULED_RELEASE_DATE
                                    ,'YYYY/MM/DD HH24:MI:SS') || ''', ''YYYY/MM/DD HH24:MI:SS'' ) ';
    ELSIF P_FROM_SCHEDULED_RELEASE_DATE IS NOT NULL AND P_TO_SCHEDULED_RELEASE_DATE IS NOT NULL THEN
      SCHEDULEDSHIPDATECP := ' and xf.scheduled_release_date <  to_date( ''' || TO_CHAR(P_TO_SCHEDULED_RELEASE_DATE
                                    ,'YYYY/MM/DD HH24:MI:SS') || ''', ''YYYY/MM/DD HH24:MI:SS'' ) + 1 ';
    END IF;
    RETURN SCHEDULEDSHIPDATECP;
  END SCHEDULEDSHIPDATECFFORMULA;

  FUNCTION CANCELDATECFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF P_FROM_CANCEL_DATE IS NOT NULL AND P_TO_CANCEL_DATE IS NOT NULL THEN
      CANCELDATECP := ' and xf.cancel_date >= to_date( ''' || TO_CHAR(P_FROM_CANCEL_DATE
                             ,'YYYY/MM/DD HH24:MI:SS') || ''', ''YYYY/MM/DD HH24:MI:SS'' ) ' || ' and xf.cancel_date <  to_date( ''' || TO_CHAR(P_TO_CANCEL_DATE
                             ,'YYYY/MM/DD HH24:MI:SS') || ''', ''YYYY/MM/DD HH24:MI:SS'' ) + 1 ';
    ELSIF P_FROM_CANCEL_DATE IS NULL AND P_TO_CANCEL_DATE IS NULL THEN
      CANCELDATECP := '  ';
    ELSIF P_FROM_CANCEL_DATE IS NOT NULL AND P_TO_CANCEL_DATE IS NULL THEN
      CANCELDATECP := ' and xf.cancel_date >= to_date( ''' || TO_CHAR(P_FROM_CANCEL_DATE
                             ,'YYYY/MM/DD HH24:MI:SS') || ''', ''YYYY/MM/DD HH24:MI:SS'' ) ';
    ELSIF P_FROM_CANCEL_DATE IS NOT NULL AND P_TO_CANCEL_DATE IS NOT NULL THEN
      CANCELDATECP := ' and xf.cancel_date <  to_date( ''' || TO_CHAR(P_TO_CANCEL_DATE
                             ,'YYYY/MM/DD HH24:MI:SS') || ''', ''YYYY/MM/DD HH24:MI:SS'' ) + 1 ';
    END IF;
    RETURN CANCELDATECP;
  END CANCELDATECFFORMULA;

  FUNCTION ACTUALRECEIVEDATECFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF P_FROM_ACTUAL_RECEIVE_DATE IS NOT NULL AND P_TO_ACTUAL_RECEIVE_DATE IS NOT NULL THEN
      ACTUALRECEIVEDATECP := ' and xf.actual_receive_date >= to_date( ''' || TO_CHAR(P_FROM_ACTUAL_RECEIVE_DATE
                                    ,'YYYY/MM/DD HH24:MI:SS') || ''', ''YYYY/MM/DD HH24:MI:SS'' ) ' || ' and xf.actual_receive_date <  to_date( ''' || TO_CHAR(P_TO_ACTUAL_RECEIVE_DATE
                                    ,'YYYY/MM/DD HH24:MI:SS') || ''', ''YYYY/MM/DD HH24:MI:SS'' ) + 1 ';
    ELSIF P_FROM_ACTUAL_RECEIVE_DATE IS NULL AND P_TO_ACTUAL_RECEIVE_DATE IS NULL THEN
      ACTUALRECEIVEDATECP := '  ';
    ELSIF P_FROM_ACTUAL_RECEIVE_DATE IS NOT NULL AND P_TO_ACTUAL_RECEIVE_DATE IS NULL THEN
      ACTUALRECEIVEDATECP := ' and xf.actual_receive_date >= to_date( ''' || TO_CHAR(P_FROM_ACTUAL_RECEIVE_DATE
                                    ,'YYYY/MM/DD HH24:MI:SS') || ''', ''YYYY/MM/DD HH24:MI:SS'' ) ';
    ELSIF P_FROM_ACTUAL_RECEIVE_DATE IS NOT NULL AND P_TO_ACTUAL_RECEIVE_DATE IS NOT NULL THEN
      ACTUALRECEIVEDATECP := ' and xf.actual_receive_date <  to_date( ''' || TO_CHAR(P_TO_ACTUAL_RECEIVE_DATE
                                    ,'YYYY/MM/DD HH24:MI:SS') || ''', ''YYYY/MM/DD HH24:MI:SS'' ) + 1 ';
    END IF;
    RETURN ACTUALRECEIVEDATECP;
  END ACTUALRECEIVEDATECFFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
  LP_FROM_RELEASE_DATE:=to_char(P_FROM_RELEASE_DATE,'DD-MON-YY');
LP_TO_RELEASE_DATE:=to_char(P_TO_RELEASE_DATE,'DD-MON-YY');
LP_FROM_SCHEDULED_RELEASE_DATE:=to_char(P_FROM_SCHEDULED_RELEASE_DATE,'DD-MON-YY');
LP_TO_SCHEDULED_RELEASE_DATE:=to_char(P_TO_SCHEDULED_RELEASE_DATE,'DD-MON-YY');
LP_FROM_ACTUAL_RECEIVE_DATE:=to_char(P_FROM_ACTUAL_RECEIVE_DATE,'DD-MON-YY');
LP_TO_ACTUAL_RECEIVE_DATE:=to_char(P_TO_ACTUAL_RECEIVE_DATE,'DD-MON-YY');
LP_FROM_CANCEL_DATE:=to_char(P_FROM_CANCEL_DATE,'DD-MON-YY');
LP_TO_CANCEL_DATE:=to_char(P_TO_CANCEL_DATE,'DD-MON-YY');
  LP_FROM_WAREHOUSE:=P_FROM_WAREHOUSE;
LP_TO_WAREHOUSE:=P_TO_WAREHOUSE;
LP_FROM_DESTINATION_WAREHOUSE:=P_FROM_DESTINATION_WAREHOUSE;
LP_TO_DESTINATION_WAREHOUSE:=P_TO_DESTINATION_WAREHOUSE;
LP_FROM_TRANSFER_STATUS:=P_FROM_TRANSFER_STATUS;
LP_TO_TRANSFER_STATUS:=P_TO_TRANSFER_STATUS;
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    RETURN (TRUE);
  END BEFOREREPORT;

  PROCEDURE HEADER IS
  BEGIN
    NULL;
  END HEADER;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION RELEASEDATECP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RELEASEDATECP;
  END RELEASEDATECP_P;

  FUNCTION SOURCEWAREHOUSECP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SOURCEWAREHOUSECP;
  END SOURCEWAREHOUSECP_P;

  FUNCTION DESTINATIONWAREHOUSECP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN DESTINATIONWAREHOUSECP;
  END DESTINATIONWAREHOUSECP_P;

  FUNCTION TRANSFERSTATUSCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TRANSFERSTATUSCP;
  END TRANSFERSTATUSCP_P;

  FUNCTION SCHEDULEDSHIPDATECP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SCHEDULEDSHIPDATECP;
  END SCHEDULEDSHIPDATECP_P;

  FUNCTION CANCELDATECP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CANCELDATECP;
  END CANCELDATECP_P;

  FUNCTION ACTUALRECEIVEDATECP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ACTUALRECEIVEDATECP;
  END ACTUALRECEIVEDATECP_P;

END GMI_CMXFER01_XMLP_PKG;


/
