--------------------------------------------------------
--  DDL for Package Body CS_KB_AUTOLINKS_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."CS_KB_AUTOLINKS_PKG" as
/* $Header: cskbalb.pls 120.0 2005/07/13 10:19:54 appldev noship $ */
procedure INSERT_ROW (
  X_ROWID in out nocopy VARCHAR2,
  X_AUTOLINK_ID in NUMBER,
  X_DESTINATION_TYPE in VARCHAR2,
  X_PARAMETER_TYPE in VARCHAR2,
  X_FUNCTION_ID in NUMBER,
  X_OPEN_IN_NEW_WINDOW_FLAG in VARCHAR2,
  X_TOKEN_START_NEWLINE_FLAG in VARCHAR2,
  X_TOKEN_START_SPACE_FLAG in VARCHAR2,
  X_TOKEN_START_TAB_FLAG in VARCHAR2,
  X_TOKEN_END_NEWLINE_FLAG in VARCHAR2,
  X_TOKEN_END_SPACE_FLAG in VARCHAR2,
  X_TOKEN_END_TAB_FLAG in VARCHAR2,
  X_TOKEN_END_NO_CHAR_FLAG in VARCHAR2,
  X_PARAM_END_NEWLINE_FLAG in VARCHAR2,
  X_PARAM_END_SPACE_FLAG in VARCHAR2,
  X_PARAM_END_TAB_FLAG in VARCHAR2,
  X_MIN_PARAMETER_LENGTH in NUMBER,
  X_MAX_PARAMETER_LENGTH in NUMBER,
  X_BASE_URL in VARCHAR2,
  X_DESTINATION_PARAMETER in VARCHAR2,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_NAME in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_TOKEN in VARCHAR2,
  X_TOKEN_START_DELIM_CHARS in VARCHAR2,
  X_TOKEN_END_DELIM_CHARS in VARCHAR2,
  X_PARAM_END_DELIM_CHARS in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
  cursor C is select ROWID from CS_KB_AUTOLINKS_B
    where AUTOLINK_ID = X_AUTOLINK_ID
    ;
begin
  insert into CS_KB_AUTOLINKS_B (
    AUTOLINK_ID,
    DESTINATION_TYPE,
    PARAMETER_TYPE,
    FUNCTION_ID,
    OPEN_IN_NEW_WINDOW_FLAG,
    TOKEN_START_NEWLINE_FLAG,
    TOKEN_START_SPACE_FLAG,
    TOKEN_START_TAB_FLAG,
    TOKEN_END_NEWLINE_FLAG,
    TOKEN_END_SPACE_FLAG,
    TOKEN_END_TAB_FLAG,
    TOKEN_END_NO_CHAR_FLAG,
    PARAM_END_NEWLINE_FLAG,
    PARAM_END_SPACE_FLAG,
    PARAM_END_TAB_FLAG,
    MIN_PARAMETER_LENGTH,
    MAX_PARAMETER_LENGTH,
    BASE_URL,
    DESTINATION_PARAMETER,
    OBJECT_VERSION_NUMBER,
    ATTRIBUTE_CATEGORY,
    ATTRIBUTE1,
    ATTRIBUTE2,
    ATTRIBUTE3,
    ATTRIBUTE4,
    ATTRIBUTE5,
    ATTRIBUTE6,
    ATTRIBUTE7,
    ATTRIBUTE8,
    ATTRIBUTE9,
    ATTRIBUTE10,
    ATTRIBUTE11,
    ATTRIBUTE12,
    ATTRIBUTE13,
    ATTRIBUTE14,
    ATTRIBUTE15,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN
  ) values (
    X_AUTOLINK_ID,
    X_DESTINATION_TYPE,
    X_PARAMETER_TYPE,
    X_FUNCTION_ID,
    X_OPEN_IN_NEW_WINDOW_FLAG,
    X_TOKEN_START_NEWLINE_FLAG,
    X_TOKEN_START_SPACE_FLAG,
    X_TOKEN_START_TAB_FLAG,
    X_TOKEN_END_NEWLINE_FLAG,
    X_TOKEN_END_SPACE_FLAG,
    X_TOKEN_END_TAB_FLAG,
    X_TOKEN_END_NO_CHAR_FLAG,
    X_PARAM_END_NEWLINE_FLAG,
    X_PARAM_END_SPACE_FLAG,
    X_PARAM_END_TAB_FLAG,
    X_MIN_PARAMETER_LENGTH,
    X_MAX_PARAMETER_LENGTH,
    X_BASE_URL,
    X_DESTINATION_PARAMETER,
    X_OBJECT_VERSION_NUMBER,
    X_ATTRIBUTE_CATEGORY,
    X_ATTRIBUTE1,
    X_ATTRIBUTE2,
    X_ATTRIBUTE3,
    X_ATTRIBUTE4,
    X_ATTRIBUTE5,
    X_ATTRIBUTE6,
    X_ATTRIBUTE7,
    X_ATTRIBUTE8,
    X_ATTRIBUTE9,
    X_ATTRIBUTE10,
    X_ATTRIBUTE11,
    X_ATTRIBUTE12,
    X_ATTRIBUTE13,
    X_ATTRIBUTE14,
    X_ATTRIBUTE15,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN
  );

  insert into CS_KB_AUTOLINKS_TL (
    TOKEN,
    TOKEN_START_DELIM_CHARS,
    TOKEN_END_DELIM_CHARS,
    PARAM_END_DELIM_CHARS,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    AUTOLINK_ID,
    NAME,
    DESCRIPTION,
    LANGUAGE,
    SOURCE_LANG
  ) select
    X_TOKEN,
    X_TOKEN_START_DELIM_CHARS,
    X_TOKEN_END_DELIM_CHARS,
    X_PARAM_END_DELIM_CHARS,
    X_CREATED_BY,
    X_CREATION_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATE_LOGIN,
    X_AUTOLINK_ID,
    X_NAME,
    X_DESCRIPTION,
    L.LANGUAGE_CODE,
    userenv('LANG')
  from FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and not exists
    (select NULL
    from CS_KB_AUTOLINKS_TL T
    where T.AUTOLINK_ID = X_AUTOLINK_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);

  open c;
  fetch c into X_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

end INSERT_ROW;

procedure LOCK_ROW (
  X_AUTOLINK_ID in NUMBER,
  X_DESTINATION_TYPE in VARCHAR2,
  X_PARAMETER_TYPE in VARCHAR2,
  X_FUNCTION_ID in NUMBER,
  X_OPEN_IN_NEW_WINDOW_FLAG in VARCHAR2,
  X_TOKEN_START_NEWLINE_FLAG in VARCHAR2,
  X_TOKEN_START_SPACE_FLAG in VARCHAR2,
  X_TOKEN_START_TAB_FLAG in VARCHAR2,
  X_TOKEN_END_NEWLINE_FLAG in VARCHAR2,
  X_TOKEN_END_SPACE_FLAG in VARCHAR2,
  X_TOKEN_END_TAB_FLAG in VARCHAR2,
  X_TOKEN_END_NO_CHAR_FLAG in VARCHAR2,
  X_PARAM_END_NEWLINE_FLAG in VARCHAR2,
  X_PARAM_END_SPACE_FLAG in VARCHAR2,
  X_PARAM_END_TAB_FLAG in VARCHAR2,
  X_MIN_PARAMETER_LENGTH in NUMBER,
  X_MAX_PARAMETER_LENGTH in NUMBER,
  X_BASE_URL in VARCHAR2,
  X_DESTINATION_PARAMETER in VARCHAR2,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_NAME in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_TOKEN in VARCHAR2,
  X_TOKEN_START_DELIM_CHARS in VARCHAR2,
  X_TOKEN_END_DELIM_CHARS in VARCHAR2,
  X_PARAM_END_DELIM_CHARS in VARCHAR2
) is
  cursor c is select
      DESTINATION_TYPE,
      PARAMETER_TYPE,
      FUNCTION_ID,
      OPEN_IN_NEW_WINDOW_FLAG,
      TOKEN_START_NEWLINE_FLAG,
      TOKEN_START_SPACE_FLAG,
      TOKEN_START_TAB_FLAG,
      TOKEN_END_NEWLINE_FLAG,
      TOKEN_END_SPACE_FLAG,
      TOKEN_END_TAB_FLAG,
      TOKEN_END_NO_CHAR_FLAG,
      PARAM_END_NEWLINE_FLAG,
      PARAM_END_SPACE_FLAG,
      PARAM_END_TAB_FLAG,
      MIN_PARAMETER_LENGTH,
      MAX_PARAMETER_LENGTH,
      BASE_URL,
      DESTINATION_PARAMETER,
      OBJECT_VERSION_NUMBER,
      ATTRIBUTE_CATEGORY,
      ATTRIBUTE1,
      ATTRIBUTE2,
      ATTRIBUTE3,
      ATTRIBUTE4,
      ATTRIBUTE5,
      ATTRIBUTE6,
      ATTRIBUTE7,
      ATTRIBUTE8,
      ATTRIBUTE9,
      ATTRIBUTE10,
      ATTRIBUTE11,
      ATTRIBUTE12,
      ATTRIBUTE13,
      ATTRIBUTE14,
      ATTRIBUTE15
    from CS_KB_AUTOLINKS_B
    where AUTOLINK_ID = X_AUTOLINK_ID
    for update of AUTOLINK_ID nowait;
  recinfo c%rowtype;

  cursor c1 is select
      NAME,
      DESCRIPTION,
      TOKEN,
      TOKEN_START_DELIM_CHARS,
      TOKEN_END_DELIM_CHARS,
      PARAM_END_DELIM_CHARS,
      decode(LANGUAGE, userenv('LANG'), 'Y', 'N') BASELANG
    from CS_KB_AUTOLINKS_TL
    where AUTOLINK_ID = X_AUTOLINK_ID
    and userenv('LANG') in (LANGUAGE, SOURCE_LANG)
    for update of AUTOLINK_ID nowait;
begin
  open c;
  fetch c into recinfo;
  if (c%notfound) then
    close c;
    fnd_message.set_name('FND', 'FORM_RECORD_DELETED');
    app_exception.raise_exception;
  end if;
  close c;
  if (    (recinfo.DESTINATION_TYPE = X_DESTINATION_TYPE)
      AND (recinfo.PARAMETER_TYPE = X_PARAMETER_TYPE)
      AND ((recinfo.FUNCTION_ID = X_FUNCTION_ID)
           OR ((recinfo.FUNCTION_ID is null) AND (X_FUNCTION_ID is null)))
      AND (recinfo.OPEN_IN_NEW_WINDOW_FLAG = X_OPEN_IN_NEW_WINDOW_FLAG)
      AND (recinfo.TOKEN_START_NEWLINE_FLAG = X_TOKEN_START_NEWLINE_FLAG)
      AND (recinfo.TOKEN_START_SPACE_FLAG = X_TOKEN_START_SPACE_FLAG)
      AND (recinfo.TOKEN_START_TAB_FLAG = X_TOKEN_START_TAB_FLAG)
      AND (recinfo.TOKEN_END_NEWLINE_FLAG = X_TOKEN_END_NEWLINE_FLAG)
      AND (recinfo.TOKEN_END_SPACE_FLAG = X_TOKEN_END_SPACE_FLAG)
      AND (recinfo.TOKEN_END_TAB_FLAG = X_TOKEN_END_TAB_FLAG)
      AND (recinfo.TOKEN_END_NO_CHAR_FLAG = X_TOKEN_END_NO_CHAR_FLAG)
      AND (recinfo.PARAM_END_NEWLINE_FLAG = X_PARAM_END_NEWLINE_FLAG)
      AND (recinfo.PARAM_END_SPACE_FLAG = X_PARAM_END_SPACE_FLAG)
      AND (recinfo.PARAM_END_TAB_FLAG = X_PARAM_END_TAB_FLAG)
      AND ((recinfo.MIN_PARAMETER_LENGTH = X_MIN_PARAMETER_LENGTH)
           OR ((recinfo.MIN_PARAMETER_LENGTH is null) AND (X_MIN_PARAMETER_LENGTH is null)))
      AND ((recinfo.MAX_PARAMETER_LENGTH = X_MAX_PARAMETER_LENGTH)
           OR ((recinfo.MAX_PARAMETER_LENGTH is null) AND (X_MAX_PARAMETER_LENGTH is null)))
      AND ((recinfo.BASE_URL = X_BASE_URL)
           OR ((recinfo.BASE_URL is null) AND (X_BASE_URL is null)))
      AND ((recinfo.DESTINATION_PARAMETER = X_DESTINATION_PARAMETER)
           OR ((recinfo.DESTINATION_PARAMETER is null) AND (X_DESTINATION_PARAMETER is null)))
      AND ((recinfo.OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER)
           OR ((recinfo.OBJECT_VERSION_NUMBER is null) AND (X_OBJECT_VERSION_NUMBER is null)))
      AND ((recinfo.ATTRIBUTE_CATEGORY = X_ATTRIBUTE_CATEGORY)
           OR ((recinfo.ATTRIBUTE_CATEGORY is null) AND (X_ATTRIBUTE_CATEGORY is null)))
      AND ((recinfo.ATTRIBUTE1 = X_ATTRIBUTE1)
           OR ((recinfo.ATTRIBUTE1 is null) AND (X_ATTRIBUTE1 is null)))
      AND ((recinfo.ATTRIBUTE2 = X_ATTRIBUTE2)
           OR ((recinfo.ATTRIBUTE2 is null) AND (X_ATTRIBUTE2 is null)))
      AND ((recinfo.ATTRIBUTE3 = X_ATTRIBUTE3)
           OR ((recinfo.ATTRIBUTE3 is null) AND (X_ATTRIBUTE3 is null)))
      AND ((recinfo.ATTRIBUTE4 = X_ATTRIBUTE4)
           OR ((recinfo.ATTRIBUTE4 is null) AND (X_ATTRIBUTE4 is null)))
      AND ((recinfo.ATTRIBUTE5 = X_ATTRIBUTE5)
           OR ((recinfo.ATTRIBUTE5 is null) AND (X_ATTRIBUTE5 is null)))
      AND ((recinfo.ATTRIBUTE6 = X_ATTRIBUTE6)
           OR ((recinfo.ATTRIBUTE6 is null) AND (X_ATTRIBUTE6 is null)))
      AND ((recinfo.ATTRIBUTE7 = X_ATTRIBUTE7)
           OR ((recinfo.ATTRIBUTE7 is null) AND (X_ATTRIBUTE7 is null)))
      AND ((recinfo.ATTRIBUTE8 = X_ATTRIBUTE8)
           OR ((recinfo.ATTRIBUTE8 is null) AND (X_ATTRIBUTE8 is null)))
      AND ((recinfo.ATTRIBUTE9 = X_ATTRIBUTE9)
           OR ((recinfo.ATTRIBUTE9 is null) AND (X_ATTRIBUTE9 is null)))
      AND ((recinfo.ATTRIBUTE10 = X_ATTRIBUTE10)
           OR ((recinfo.ATTRIBUTE10 is null) AND (X_ATTRIBUTE10 is null)))
      AND ((recinfo.ATTRIBUTE11 = X_ATTRIBUTE11)
           OR ((recinfo.ATTRIBUTE11 is null) AND (X_ATTRIBUTE11 is null)))
      AND ((recinfo.ATTRIBUTE12 = X_ATTRIBUTE12)
           OR ((recinfo.ATTRIBUTE12 is null) AND (X_ATTRIBUTE12 is null)))
      AND ((recinfo.ATTRIBUTE13 = X_ATTRIBUTE13)
           OR ((recinfo.ATTRIBUTE13 is null) AND (X_ATTRIBUTE13 is null)))
      AND ((recinfo.ATTRIBUTE14 = X_ATTRIBUTE14)
           OR ((recinfo.ATTRIBUTE14 is null) AND (X_ATTRIBUTE14 is null)))
      AND ((recinfo.ATTRIBUTE15 = X_ATTRIBUTE15)
           OR ((recinfo.ATTRIBUTE15 is null) AND (X_ATTRIBUTE15 is null)))
  ) then
    null;
  else
    fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
    app_exception.raise_exception;
  end if;

  for tlinfo in c1 loop
    if (tlinfo.BASELANG = 'Y') then
      if (    (tlinfo.NAME = X_NAME)
          AND ((tlinfo.DESCRIPTION = X_DESCRIPTION)
               OR ((tlinfo.DESCRIPTION is null) AND (X_DESCRIPTION is null)))
          AND (tlinfo.TOKEN = X_TOKEN)
          AND ((tlinfo.TOKEN_START_DELIM_CHARS = X_TOKEN_START_DELIM_CHARS)
               OR ((tlinfo.TOKEN_START_DELIM_CHARS is null) AND (X_TOKEN_START_DELIM_CHARS is null)))
          AND ((tlinfo.TOKEN_END_DELIM_CHARS = X_TOKEN_END_DELIM_CHARS)
               OR ((tlinfo.TOKEN_END_DELIM_CHARS is null) AND (X_TOKEN_END_DELIM_CHARS is null)))
          AND ((tlinfo.PARAM_END_DELIM_CHARS = X_PARAM_END_DELIM_CHARS)
               OR ((tlinfo.PARAM_END_DELIM_CHARS is null) AND (X_PARAM_END_DELIM_CHARS is null)))
      ) then
        null;
      else
        fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
        app_exception.raise_exception;
      end if;
    end if;
  end loop;
  return;
end LOCK_ROW;

procedure UPDATE_ROW (
  X_AUTOLINK_ID in NUMBER,
  X_DESTINATION_TYPE in VARCHAR2,
  X_PARAMETER_TYPE in VARCHAR2,
  X_FUNCTION_ID in NUMBER,
  X_OPEN_IN_NEW_WINDOW_FLAG in VARCHAR2,
  X_TOKEN_START_NEWLINE_FLAG in VARCHAR2,
  X_TOKEN_START_SPACE_FLAG in VARCHAR2,
  X_TOKEN_START_TAB_FLAG in VARCHAR2,
  X_TOKEN_END_NEWLINE_FLAG in VARCHAR2,
  X_TOKEN_END_SPACE_FLAG in VARCHAR2,
  X_TOKEN_END_TAB_FLAG in VARCHAR2,
  X_TOKEN_END_NO_CHAR_FLAG in VARCHAR2,
  X_PARAM_END_NEWLINE_FLAG in VARCHAR2,
  X_PARAM_END_SPACE_FLAG in VARCHAR2,
  X_PARAM_END_TAB_FLAG in VARCHAR2,
  X_MIN_PARAMETER_LENGTH in NUMBER,
  X_MAX_PARAMETER_LENGTH in NUMBER,
  X_BASE_URL in VARCHAR2,
  X_DESTINATION_PARAMETER in VARCHAR2,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_NAME in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_TOKEN in VARCHAR2,
  X_TOKEN_START_DELIM_CHARS in VARCHAR2,
  X_TOKEN_END_DELIM_CHARS in VARCHAR2,
  X_PARAM_END_DELIM_CHARS in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
begin
  update CS_KB_AUTOLINKS_B set
    DESTINATION_TYPE = X_DESTINATION_TYPE,
    PARAMETER_TYPE = X_PARAMETER_TYPE,
    FUNCTION_ID = X_FUNCTION_ID,
    OPEN_IN_NEW_WINDOW_FLAG = X_OPEN_IN_NEW_WINDOW_FLAG,
    TOKEN_START_NEWLINE_FLAG = X_TOKEN_START_NEWLINE_FLAG,
    TOKEN_START_SPACE_FLAG = X_TOKEN_START_SPACE_FLAG,
    TOKEN_START_TAB_FLAG = X_TOKEN_START_TAB_FLAG,
    TOKEN_END_NEWLINE_FLAG = X_TOKEN_END_NEWLINE_FLAG,
    TOKEN_END_SPACE_FLAG = X_TOKEN_END_SPACE_FLAG,
    TOKEN_END_TAB_FLAG = X_TOKEN_END_TAB_FLAG,
    TOKEN_END_NO_CHAR_FLAG = X_TOKEN_END_NO_CHAR_FLAG,
    PARAM_END_NEWLINE_FLAG = X_PARAM_END_NEWLINE_FLAG,
    PARAM_END_SPACE_FLAG = X_PARAM_END_SPACE_FLAG,
    PARAM_END_TAB_FLAG = X_PARAM_END_TAB_FLAG,
    MIN_PARAMETER_LENGTH = X_MIN_PARAMETER_LENGTH,
    MAX_PARAMETER_LENGTH = X_MAX_PARAMETER_LENGTH,
    BASE_URL = X_BASE_URL,
    DESTINATION_PARAMETER = X_DESTINATION_PARAMETER,
    OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER,
    ATTRIBUTE_CATEGORY = X_ATTRIBUTE_CATEGORY,
    ATTRIBUTE1 = X_ATTRIBUTE1,
    ATTRIBUTE2 = X_ATTRIBUTE2,
    ATTRIBUTE3 = X_ATTRIBUTE3,
    ATTRIBUTE4 = X_ATTRIBUTE4,
    ATTRIBUTE5 = X_ATTRIBUTE5,
    ATTRIBUTE6 = X_ATTRIBUTE6,
    ATTRIBUTE7 = X_ATTRIBUTE7,
    ATTRIBUTE8 = X_ATTRIBUTE8,
    ATTRIBUTE9 = X_ATTRIBUTE9,
    ATTRIBUTE10 = X_ATTRIBUTE10,
    ATTRIBUTE11 = X_ATTRIBUTE11,
    ATTRIBUTE12 = X_ATTRIBUTE12,
    ATTRIBUTE13 = X_ATTRIBUTE13,
    ATTRIBUTE14 = X_ATTRIBUTE14,
    ATTRIBUTE15 = X_ATTRIBUTE15,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN
  where AUTOLINK_ID = X_AUTOLINK_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  update CS_KB_AUTOLINKS_TL set
    NAME = X_NAME,
    DESCRIPTION = X_DESCRIPTION,
    TOKEN = X_TOKEN,
    TOKEN_START_DELIM_CHARS = X_TOKEN_START_DELIM_CHARS,
    TOKEN_END_DELIM_CHARS = X_TOKEN_END_DELIM_CHARS,
    PARAM_END_DELIM_CHARS = X_PARAM_END_DELIM_CHARS,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    SOURCE_LANG = userenv('LANG')
  where AUTOLINK_ID = X_AUTOLINK_ID
  and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

  if (sql%notfound) then
    raise no_data_found;
  end if;
end UPDATE_ROW;

procedure DELETE_ROW (
  X_AUTOLINK_ID in NUMBER
) is
begin
  delete from CS_KB_AUTOLINKS_TL
  where AUTOLINK_ID = X_AUTOLINK_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  delete from CS_KB_AUTOLINKS_B
  where AUTOLINK_ID = X_AUTOLINK_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;
end DELETE_ROW;

procedure ADD_LANGUAGE
is
begin
  delete from CS_KB_AUTOLINKS_TL T
  where not exists
    (select NULL
    from CS_KB_AUTOLINKS_B B
    where B.AUTOLINK_ID = T.AUTOLINK_ID
    );

  update CS_KB_AUTOLINKS_TL T set (
      NAME,
      DESCRIPTION,
      TOKEN,
      TOKEN_START_DELIM_CHARS,
      TOKEN_END_DELIM_CHARS,
      PARAM_END_DELIM_CHARS
    ) = (select
      B.NAME,
      B.DESCRIPTION,
      B.TOKEN,
      B.TOKEN_START_DELIM_CHARS,
      B.TOKEN_END_DELIM_CHARS,
      B.PARAM_END_DELIM_CHARS
    from CS_KB_AUTOLINKS_TL B
    where B.AUTOLINK_ID = T.AUTOLINK_ID
    and B.LANGUAGE = T.SOURCE_LANG)
  where (
      T.AUTOLINK_ID,
      T.LANGUAGE
  ) in (select
      SUBT.AUTOLINK_ID,
      SUBT.LANGUAGE
    from CS_KB_AUTOLINKS_TL SUBB, CS_KB_AUTOLINKS_TL SUBT
    where SUBB.AUTOLINK_ID = SUBT.AUTOLINK_ID
    and SUBB.LANGUAGE = SUBT.SOURCE_LANG
    and (SUBB.NAME <> SUBT.NAME
      or SUBB.DESCRIPTION <> SUBT.DESCRIPTION
      or (SUBB.DESCRIPTION is null and SUBT.DESCRIPTION is not null)
      or (SUBB.DESCRIPTION is not null and SUBT.DESCRIPTION is null)
      or SUBB.TOKEN <> SUBT.TOKEN
      or SUBB.TOKEN_START_DELIM_CHARS <> SUBT.TOKEN_START_DELIM_CHARS
      or (SUBB.TOKEN_START_DELIM_CHARS is null and SUBT.TOKEN_START_DELIM_CHARS is not null)
      or (SUBB.TOKEN_START_DELIM_CHARS is not null and SUBT.TOKEN_START_DELIM_CHARS is null)
      or SUBB.TOKEN_END_DELIM_CHARS <> SUBT.TOKEN_END_DELIM_CHARS
      or (SUBB.TOKEN_END_DELIM_CHARS is null and SUBT.TOKEN_END_DELIM_CHARS is not null)
      or (SUBB.TOKEN_END_DELIM_CHARS is not null and SUBT.TOKEN_END_DELIM_CHARS is null)
      or SUBB.PARAM_END_DELIM_CHARS <> SUBT.PARAM_END_DELIM_CHARS
      or (SUBB.PARAM_END_DELIM_CHARS is null and SUBT.PARAM_END_DELIM_CHARS is not null)
      or (SUBB.PARAM_END_DELIM_CHARS is not null and SUBT.PARAM_END_DELIM_CHARS is null)
  ));

  insert into CS_KB_AUTOLINKS_TL (
    TOKEN,
    TOKEN_START_DELIM_CHARS,
    TOKEN_END_DELIM_CHARS,
    PARAM_END_DELIM_CHARS,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    AUTOLINK_ID,
    NAME,
    DESCRIPTION,
    LANGUAGE,
    SOURCE_LANG
  ) select /*+ ORDERED */
    B.TOKEN,
    B.TOKEN_START_DELIM_CHARS,
    B.TOKEN_END_DELIM_CHARS,
    B.PARAM_END_DELIM_CHARS,
    B.CREATED_BY,
    B.CREATION_DATE,
    B.LAST_UPDATED_BY,
    B.LAST_UPDATE_DATE,
    B.LAST_UPDATE_LOGIN,
    B.AUTOLINK_ID,
    B.NAME,
    B.DESCRIPTION,
    L.LANGUAGE_CODE,
    B.SOURCE_LANG
  from CS_KB_AUTOLINKS_TL B, FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and B.LANGUAGE = userenv('LANG')
  and not exists
    (select NULL
    from CS_KB_AUTOLINKS_TL T
    where T.AUTOLINK_ID = B.AUTOLINK_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);
end ADD_LANGUAGE;

end CS_KB_AUTOLINKS_PKG;

/
