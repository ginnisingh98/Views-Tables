--------------------------------------------------------
--  DDL for Package Body INV_INVPOPSR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."INV_INVPOPSR_XMLP_PKG" AS
/* $Header: INVPOPSRB.pls 120.3 2008/05/30 07:22:51 dwkrishn ship $ */
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION C_ITEM_WHERE RETURN VARCHAR2 IS
  BEGIN
    IF P_PACKSLIP_LO IS NOT NULL OR P_PACKSLIP_HIGH IS NOT NULL THEN
      RETURN (' ');
    ELSE
      IF P_ITEM_LO IS NOT NULL AND P_ITEM_HIGH IS NOT NULL THEN
        RETURN ('and msi.description between ''' || P_ITEM_LO || ''' and
                       ''' || P_ITEM_HIGH || ''' ');
      ELSE
        IF P_ITEM_LO IS NULL AND P_ITEM_HIGH IS NOT NULL THEN
          RETURN ('and msi.description = ''' || P_ITEM_HIGH || ''' ');
        ELSE
          IF P_ITEM_LO IS NOT NULL AND P_ITEM_HIGH IS NULL THEN
            RETURN ('and msi.description = ''' || P_ITEM_LO || ''' ');
          ELSE
            RETURN (' ');
          END IF;
        END IF;
      END IF;
    END IF;
    RETURN NULL;
  END C_ITEM_WHERE;

  FUNCTION C_PACKSLIP_WHERE RETURN VARCHAR2 IS
  BEGIN
    IF P_PACKSLIP_LO IS NOT NULL AND P_PACKSLIP_HIGH IS NOT NULL THEN
      RETURN ('and mpp.packslip_number between to_number(''' || TO_CHAR(P_PACKSLIP_LO) || ''')
                     and to_number(''' || TO_CHAR(P_PACKSLIP_HIGH) || ''') ');
    ELSE
      IF P_PACKSLIP_LO IS NULL AND P_PACKSLIP_HIGH IS NOT NULL THEN
        RETURN ('and mpp.packslip_number = to_number(''' || TO_CHAR(P_PACKSLIP_HIGH) || ''') ');
      ELSE
        IF P_PACKSLIP_LO IS NOT NULL AND P_PACKSLIP_HIGH IS NULL THEN
          RETURN ('and mpp.packslip_number = to_number(''' || TO_CHAR(P_PACKSLIP_LO) || ''') ');
        ELSE
          RETURN ('and nvl(mpp.packslip_number,0) = 0');
        END IF;
      END IF;
    END IF;
    RETURN NULL;
  END C_PACKSLIP_WHERE;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      FUNCTCURR VARCHAR2(15);
      ERRBUF VARCHAR2(132);
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
      P_SHIP_DATE_LO := FND_DATE.CANONICAL_TO_DATE(P_SHIPMENT_DATE_LO);
      P_SHIP_DATE_HIGH := FND_DATE.CANONICAL_TO_DATE(P_SHIPMENT_DATE_HIGH);
      FND_MESSAGE.SET_NAME('INV'
                          ,'INV_NO_DATA_EXISTS');
      C_MESSAGE_NO_DATA := SUBSTR(FND_MESSAGE.GET
                                 ,1
                                 ,50);
      C_MESSAGE_NO_DATA := '*** ' || C_MESSAGE_NO_DATA || ' ***';
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        BEGIN
          /*SRW.MESSAGE(100
                     ,'Foundation is not initialised')*/NULL;
          /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
        END;
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION C_VENDOR_WHEREFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF P_VENDOR_LO IS NOT NULL AND P_VENDOR_HIGH IS NOT NULL THEN
      RETURN ('and v.vendor_name between ''' || P_VENDOR_LO || ''' and
                     ''' || P_VENDOR_HIGH || ''' ');
    ELSE
      IF P_VENDOR_LO IS NULL AND P_VENDOR_HIGH IS NOT NULL THEN
        RETURN ('and v.vendor_name = ''' || P_VENDOR_HIGH || ''' ');
      ELSE
        IF P_VENDOR_LO IS NOT NULL AND P_VENDOR_HIGH IS NULL THEN
          RETURN ('and v.vendor_name = ''' || P_VENDOR_LO || ''' ');
        ELSE
          RETURN (' ');
        END IF;
      END IF;
    END IF;
    RETURN ' ';
  END C_VENDOR_WHEREFORMULA;

  FUNCTION C_SHIPMENT_DATE_WHEREFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      DUMMY VARCHAR2(150);
    BEGIN
      /*SRW.REFERENCE(P_SHIPMENT_DATE_LO)*/NULL;
      /*SRW.REFERENCE(P_SHIPMENT_DATE_HIGH)*/NULL;
      /*SRW.REFERENCE(P_SHIP_DATE_LO)*/NULL;
      /*SRW.REFERENCE(P_SHIP_DATE_HIGH)*/NULL;
      IF P_PACKSLIP_LO IS NOT NULL OR P_PACKSLIP_HIGH IS NOT NULL THEN
        RETURN (' ');
      ELSE
        IF P_SHIPMENT_DATE_LO IS NOT NULL AND P_SHIPMENT_DATE_HIGH IS NOT NULL THEN
          RETURN ('and trunc(trans.transaction_date) between to_date(''' || TO_CHAR(P_SHIP_DATE_LO
                        ,'YYYY/MM/DD') || ''',''YYYY/MM/DD'') and  to_date(''' || TO_CHAR(P_SHIP_DATE_HIGH
                        ,'YYYY/MM/DD') || ''',''YYYY/MM/DD'') ');
        ELSE
          IF P_SHIPMENT_DATE_LO IS NULL AND P_SHIPMENT_DATE_HIGH IS NOT NULL THEN
            RETURN ('and trunc(trans.transaction_date) = to_date(''' || TO_CHAR(P_SHIP_DATE_HIGH
                          ,'YYYY/MM/DD') || ''',''YYYY/MM/DD'') ');
          ELSE
            IF P_SHIPMENT_DATE_LO IS NOT NULL AND P_SHIPMENT_DATE_HIGH IS NULL THEN
              RETURN ('and trunc(trans.transaction_date) = to_date(''' || TO_CHAR(P_SHIP_DATE_LO
                            ,'YYYY/MM/DD') || ''' ,''YYYY/MM/DD'') ');
            ELSE
              RETURN (' ');
            END IF;
          END IF;
        END IF;
      END IF;
      RETURN ' ';
    END;
  END C_SHIPMENT_DATE_WHEREFORMULA;

  FUNCTION CF_DOCUMENT_NOFORMULA(OLD_PACKSLIP_NUMBER IN NUMBER
                                ,CS_VENDOR_COUNT IN NUMBER
                                ,CF_DOC_NUM IN NUMBER
                                ,TRANS_ID IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF ((OLD_PACKSLIP_NUMBER = 0) AND (CS_VENDOR_COUNT = 1)) THEN
      INSERT INTO MTL_PO_PACKSLIPS
        (PACKSLIP_NUMBER
        ,PACKSLIP_DATE
        ,TRANSACTION_ID)
      VALUES   (CF_DOC_NUM
        ,SYSDATE
        ,TRANS_ID);
    END IF;
    RETURN (CF_DOC_NUM);
  END CF_DOCUMENT_NOFORMULA;

  FUNCTION CF_DOC_NUMFORMULA(OLD_PACKSLIP_NUMBER IN NUMBER
                            ,CS_VENDOR_COUNT IN NUMBER, VENDOR IN NUMBER) RETURN NUMBER IS
    --L_NEW_PACKSLIP_NUM NUMBER;
  BEGIN
    IF ((OLD_PACKSLIP_NUMBER = 0) AND (CS_VENDOR_COUNT = 1)) THEN
      IF (OLD_VENDOR IS NULL OR OLD_VENDOR <> VENDOR) THEN
      SELECT
        MTL_PO_PACKSLIPS_S.NEXTVAL
      INTO L_NEW_PACKSLIP_NUM
      FROM
        DUAL;
      OLD_VENDOR := VENDOR;
      RETURN (L_NEW_PACKSLIP_NUM);
      ELSE
	RETURN (L_NEW_PACKSLIP_NUM);
       END IF;
    ELSE
      RETURN (OLD_PACKSLIP_NUMBER);
    END IF;
    RETURN NULL;
  END CF_DOC_NUMFORMULA;

  FUNCTION G_TRANSACTIONGROUPFILTER(TRANS_ID IN NUMBER) RETURN BOOLEAN IS
  BEGIN
    /*SRW.MESSAGE('9999'
               ,'Paddy - Trans ID = ' || TO_CHAR(TRANS_ID))*/NULL;
    RETURN (TRUE);
  END G_TRANSACTIONGROUPFILTER;

  FUNCTION CF_SHIPPED_DATEFORMULA(TRANS_DATE IN DATE) RETURN CHAR IS
  BEGIN
    RETURN FND_DATE.DATE_TO_CHARDATE(TRANS_DATE);
  END CF_SHIPPED_DATEFORMULA;

  FUNCTION CF_DOC_DATEFORMULA(DOC_DATE IN DATE) RETURN CHAR IS
  BEGIN
    RETURN FND_DATE.DATE_TO_CHARDATE(DOC_DATE);
  END CF_DOC_DATEFORMULA;

  FUNCTION CF_TAX_REGISTRATION_NUMBERFORM RETURN VARCHAR2 IS
    L_DEF_TAX_REG_NO VARCHAR2(50);
  BEGIN
    BEGIN
      SELECT
        ZR.REGISTRATION_NUMBER
      INTO L_DEF_TAX_REG_NO
      FROM
        ZX_PARTY_TAX_PROFILE ZPTP,
        ZX_REGISTRATIONS ZR,
        XLE_ASSOCIATIONS_V XAV
      WHERE ZPTP.PARTY_TAX_PROFILE_ID = ZR.PARTY_TAX_PROFILE_ID
        AND ZR.DEFAULT_REGISTRATION_FLAG = 'Y'
        AND ZPTP.PARTY_ID = XAV.LEGAL_PARTY_ID
        AND ZPTP.PARTY_TYPE_CODE = 'LEGAL_ESTABLISHMENT'
        AND XAV.ENTITY_ID = P_ORG_ID
        AND XAV.ENTITY_TYPE = 'INVENTORY_ORGANIZATION';
      RETURN L_DEF_TAX_REG_NO;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        SELECT
          ZR.REGISTRATION_NUMBER
        INTO L_DEF_TAX_REG_NO
        FROM
          XLE_ETB_PROFILES XEP,
          ZX_PARTY_TAX_PROFILE ZPTP,
          ZX_REGISTRATIONS ZR,
          ORG_ORGANIZATION_DEFINITIONS OOD
        WHERE ZPTP.PARTY_TAX_PROFILE_ID = ZR.PARTY_TAX_PROFILE_ID
          AND ZR.DEFAULT_REGISTRATION_FLAG = 'Y'
          AND ZPTP.PARTY_ID = XEP.PARTY_ID
          AND ZPTP.PARTY_TYPE_CODE = 'LEGAL_ESTABLISHMENT'
          AND XEP.LEGAL_ENTITY_ID = OOD.LEGAL_ENTITY
          AND XEP.MAIN_ESTABLISHMENT_FLAG = 'Y'
          AND OOD.ORGANIZATION_ID = P_ORG_ID;
        RETURN L_DEF_TAX_REG_NO;
    END;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN (NULL);
  END CF_TAX_REGISTRATION_NUMBERFORM;

  FUNCTION C_MESSAGE_NO_DATA_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_MESSAGE_NO_DATA;
  END C_MESSAGE_NO_DATA_P;

END INV_INVPOPSR_XMLP_PKG;


/
