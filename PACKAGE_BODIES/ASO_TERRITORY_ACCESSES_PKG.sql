--------------------------------------------------------
--  DDL for Package Body ASO_TERRITORY_ACCESSES_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."ASO_TERRITORY_ACCESSES_PKG" AS
/* $Header: asottacb.pls 120.0 2005/08/30 00:01:48 gsachdev noship $ */

G_PKG_NAME  CONSTANT VARCHAR2(30) := 'ASO_TERRITORY_ACCESSES_PKG';
G_FILE_NAME CONSTANT VARCHAR2(12) := 'asottacb.pls';

procedure INSERT_ROW (
  P_ACCESS_ID			IN NUMBER,
  P_TERRITORY_ID		IN NUMBER,
  P_LAST_UPDATE_DATE		IN DATE,
  P_LAST_UPDATED_BY		IN NUMBER,
  P_CREATION_DATE		IN DATE,
  P_CREATED_BY			IN NUMBER,
  P_LAST_UPDATE_LOGIN		IN NUMBER,
  P_REQUEST_ID			IN NUMBER,
  P_PROGRAM_APPLICATION_ID	IN NUMBER,
  P_PROGRAM_ID			IN NUMBER,
  P_PROGRAM_UPDATE_DATE		IN DATE,
  P_CONC_REQUEST_ID		IN NUMBER
)
IS

BEGIN
  insert into ASO_TERRITORY_ACCESSES (
    ACCESS_ID,
    TERRITORY_ID,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_LOGIN,
    REQUEST_ID,
    PROGRAM_APPLICATION_ID,
    PROGRAM_ID,
    PROGRAM_UPDATE_DATE,
    CONC_REQUEST_ID
  ) VALUES
  (
    decode( P_ACCESS_ID, FND_API.G_MISS_NUM, NULL, P_ACCESS_ID),
    decode( P_TERRITORY_ID, FND_API.G_MISS_NUM, NULL, P_TERRITORY_ID),
    ASO_UTILITY_PVT.decode( P_LAST_UPDATE_DATE, FND_API.G_MISS_DATE, NULL, p_LAST_UPDATE_DATE),
    decode( p_LAST_UPDATED_BY, FND_API.G_MISS_NUM, NULL, p_LAST_UPDATED_BY),
    ASO_UTILITY_PVT.decode( P_CREATION_DATE, FND_API.G_MISS_DATE, NULL, p_CREATION_DATE),
    decode( p_CREATED_BY, FND_API.G_MISS_NUM, NULL, p_CREATED_BY),
    decode( p_LAST_UPDATE_LOGIN, FND_API.G_MISS_NUM, NULL, p_LAST_UPDATE_LOGIN),
    decode( P_REQUEST_ID, FND_API.G_MISS_NUM, NULL, P_REQUEST_ID),
    decode( P_PROGRAM_APPLICATION_ID, FND_API.G_MISS_NUM, NULL, P_PROGRAM_APPLICATION_ID),
    decode( P_PROGRAM_ID, FND_API.G_MISS_NUM, NULL, P_PROGRAM_ID),
    ASO_UTILITY_PVT.decode( P_PROGRAM_UPDATE_DATE, FND_API.G_MISS_DATE, NULL, P_PROGRAM_UPDATE_DATE),
    decode( P_CONC_REQUEST_ID, FND_API.G_MISS_NUM, NULL, P_CONC_REQUEST_ID)
   );

end INSERT_ROW;

procedure UPDATE_ROW (
  P_ACCESS_ID			IN NUMBER,
  P_TERRITORY_ID		IN NUMBER,
  P_LAST_UPDATE_DATE		IN DATE,
  P_LAST_UPDATED_BY		IN NUMBER,
  P_CREATION_DATE		IN DATE,
  P_CREATED_BY			IN NUMBER,
  P_LAST_UPDATE_LOGIN		IN NUMBER,
  P_REQUEST_ID			IN NUMBER,
  P_PROGRAM_APPLICATION_ID	IN NUMBER,
  P_PROGRAM_ID			IN NUMBER,
  P_PROGRAM_UPDATE_DATE		IN DATE,
  P_CONC_REQUEST_ID		IN NUMBER)
IS
BEGIN
  update ASO_TERRITORY_ACCESSES
  set
  ACCESS_ID = decode( P_ACCESS_ID, FND_API.G_MISS_NUM, ACCESS_ID, P_ACCESS_ID),
  TERRITORY_ID = decode( P_TERRITORY_ID, FND_API.G_MISS_NUM, TERRITORY_ID, P_TERRITORY_ID),
  LAST_UPDATE_DATE = ASO_UTILITY_PVT.decode( p_LAST_UPDATE_DATE, FND_API.G_MISS_DATE, LAST_UPDATE_DATE, p_LAST_UPDATE_DATE),
  LAST_UPDATED_BY = decode( p_LAST_UPDATED_BY, FND_API.G_MISS_NUM, LAST_UPDATED_BY, p_LAST_UPDATED_BY),
  LAST_UPDATE_LOGIN = decode( p_LAST_UPDATE_LOGIN, FND_API.G_MISS_NUM, LAST_UPDATE_LOGIN, p_LAST_UPDATE_LOGIN),
  REQUEST_ID = decode( p_REQUEST_ID, FND_API.G_MISS_NUM, REQUEST_ID, p_REQUEST_ID),
  PROGRAM_APPLICATION_ID = decode( p_PROGRAM_APPLICATION_ID, FND_API.G_MISS_NUM,PROGRAM_APPLICATION_ID, p_PROGRAM_APPLICATION_ID),
  PROGRAM_ID = decode( p_PROGRAM_ID, FND_API.G_MISS_NUM, PROGRAM_ID, p_PROGRAM_ID),
  PROGRAM_UPDATE_DATE = ASO_UTILITY_PVT.decode( p_PROGRAM_UPDATE_DATE, FND_API.G_MISS_DATE, PROGRAM_UPDATE_DATE, p_PROGRAM_UPDATE_DATE),
  CONC_REQUEST_ID = decode( P_CONC_REQUEST_ID, FND_API.G_MISS_NUM, CONC_REQUEST_ID, P_CONC_REQUEST_ID)
  WHERE ACCESS_ID = P_ACCESS_ID
  AND TERRITORY_ID = P_TERRITORY_ID ;

  If (SQL%NOTFOUND) then
        RAISE NO_DATA_FOUND;
  End If;

end UPDATE_ROW;

procedure DELETE_ROW (
  P_ACCESS_ID			IN NUMBER,
  P_TERRITORY_ID		IN NUMBER
) is
begin
  delete from ASO_TERRITORY_ACCESSES
  where ACCESS_ID = P_ACCESS_ID
  and TERRITORY_ID = P_TERRITORY_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

end DELETE_ROW;

procedure LOCK_ROW (
  P_ACCESS_ID			IN NUMBER,
  P_TERRITORY_ID		IN NUMBER,
  P_LAST_UPDATE_DATE		IN DATE,
  P_LAST_UPDATED_BY		IN NUMBER,
  P_CREATION_DATE		IN DATE,
  P_CREATED_BY			IN NUMBER,
  P_LAST_UPDATE_LOGIN		IN NUMBER,
  P_REQUEST_ID			IN NUMBER,
  P_PROGRAM_APPLICATION_ID	IN NUMBER,
  P_PROGRAM_ID			IN NUMBER,
  P_PROGRAM_UPDATE_DATE		IN DATE,
  P_CONC_REQUEST_ID		IN NUMBER)
IS
  cursor c1 is select
  ACCESS_ID,
  TERRITORY_ID,
  LAST_UPDATE_DATE,
  LAST_UPDATED_BY,
  CREATION_DATE,
  CREATED_BY,
  LAST_UPDATE_LOGIN,
  REQUEST_ID,
  PROGRAM_APPLICATION_ID,
  PROGRAM_ID,
  PROGRAM_UPDATE_DATE,
  CONC_REQUEST_ID
  from ASO_TERRITORY_ACCESSES
     where ACCESS_ID = P_ACCESS_ID
     and TERRITORY_ID = P_TERRITORY_ID
     for update of CONC_REQUEST_ID nowait;

   recinfo C1%ROWTYPE;
begin
   OPEN C1;
   FETCH C1 INTO recinfo;
   IF (C1%NOTFOUND) THEN
      CLOSE C1;
      FND_MESSAGE.SET_NAME('FND', 'FORM_RECORD_DELETED');
      APP_EXCEPTION.RAISE_EXCEPTION;
   End If;
   CLOSE C1;


   if  (    ( Recinfo.LAST_UPDATE_DATE = p_LAST_UPDATE_DATE)
            OR (    ( Recinfo.LAST_UPDATE_DATE IS NULL )
                AND (  p_LAST_UPDATE_DATE IS NULL ))) then
       return;
   else
       fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
       app_exception.raise_exception;
   end if;
end LOCK_ROW;

end ASO_TERRITORY_ACCESSES_PKG;

/
