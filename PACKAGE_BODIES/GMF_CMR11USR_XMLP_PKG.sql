--------------------------------------------------------
--  DDL for Package Body GMF_CMR11USR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."GMF_CMR11USR_XMLP_PKG" AS
/* $Header: CMR11USRB.pls 120.0 2007/12/24 13:23:20 nchinnam noship $ */
  FUNCTION ALLOCATIONCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(ALLOCATIONCP)*/NULL;
    IF FROM_ALLOC_CODE1 IS NOT NULL AND TO_ALLOC_CODE1 IS NOT NULL THEN
      ALLOCATIONCP := ' and m.alloc_code >= ''' || FROM_ALLOC_CODE1 || ''' and m.alloc_code <= ''' || TO_ALLOC_CODE1 || '''';
    ELSIF FROM_ALLOC_CODE1 IS NULL AND TO_ALLOC_CODE1 IS NULL THEN
      ALLOCATIONCP := NULL;
      FROM_ALLOC_CODE1 := SY_ALL;
      TO_ALLOC_CODE1 := SY_ALL;
    ELSIF FROM_ALLOC_CODE1 IS NOT NULL AND TO_ALLOC_CODE1 IS NULL THEN
      ALLOCATIONCP := ' and m.alloc_code >= ''' || FROM_ALLOC_CODE1 || '''';
      TO_ALLOC_CODE1 := SY_ALL;
    ELSIF FROM_ALLOC_CODE1 IS NULL AND TO_ALLOC_CODE1 IS NOT NULL THEN
      ALLOCATIONCP := ' and m.alloc_code <= ''' || TO_ALLOC_CODE1 || '''';
      FROM_ALLOC_CODE1 := SY_ALL;
    END IF;
    IF (AllocationCP IS NULL) THEN
	AllocationCP := ' ';
    END IF;
    RETURN NULL;
  END ALLOCATIONCFFORMULA;

  FUNCTION ALLOCATIONCPFORMULA(ALLOCATIONCF IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(ALLOCATIONCF)*/NULL;
    RETURN NULL;
  END ALLOCATIONCPFORMULA;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    IF FROM_ALLOC_CODE1 > TO_ALLOC_CODE1 THEN
      /*SRW.MESSAGE(100
                 ,'CM_FROM_ALLOC_LTE_TO_ALLOC_CODE')*/NULL;
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION BAS_CURRCFFORMULA (LEGAL_ENTITY_ID1 IN NUMBER) RETURN VARCHAR2 IS
    BCURR VARCHAR2(15);
  BEGIN
    BEGIN
      SELECT
        '(' || BASE_CURRENCY_CODE || ')'
      INTO BCURR
      FROM
        GMF_FISCAL_POLICIES
      WHERE LEGAL_ENTITY_ID = LEGAL_ENTITY_ID1;
    EXCEPTION
      WHEN OTHERS THEN
        BCURR := NULL;
    END;
    RETURN (BCURR);
  END BAS_CURRCFFORMULA;

  PROCEDURE GMF_CMR11USR_XMLP_PKG_HEADER IS
  BEGIN
    NULL;
  END GMF_CMR11USR_XMLP_PKG_HEADER;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
FROM_ALLOC_CODE1 := FROM_ALLOC_CODE;
TO_ALLOC_CODE1 := TO_ALLOC_CODE;
LEGAL_ENTITY_ID1 := LEGAL_ENTITY_ID;
PERIOD_CODE1 := PERIOD_CODE;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION CF_LEGAL_ENTITYFORMULA RETURN CHAR IS
    P_LEGAL_ENTITY_NAME VARCHAR2(240);
  BEGIN
    IF (LEGAL_ENTITY_ID1 IS NOT NULL) THEN
      P_LEGAL_ENTITY_NAME := GMF_UTILITIES_GRP.GET_LEGAL_ENTITY(LEGAL_ENTITY_ID1);
      IF P_LEGAL_ENTITY_NAME IS NOT NULL THEN
        RETURN (P_LEGAL_ENTITY_NAME);
      END IF;
    END IF;
  END CF_LEGAL_ENTITYFORMULA;

  FUNCTION ACCOUNT_CODEFORMULA(ACCOUNT_ID IN NUMBER) RETURN CHAR IS
  BEGIN
    IF ACCOUNT_ID IS NOT NULL THEN
      RETURN (GMF_UTILITIES_GRP.GET_ACCOUNT_CODE(NVL(ACCOUNT_ID
                                                   ,-1)
                                               ,LEGAL_ENTITY_ID1));
    ELSE
      RETURN (NULL);
    END IF;
  END ACCOUNT_CODEFORMULA;

  FUNCTION ACCOUNT_DESCFORMULA(ACCOUNT_ID IN NUMBER) RETURN CHAR IS
  BEGIN
    IF ACCOUNT_ID IS NOT NULL THEN
      RETURN (GMF_UTILITIES_GRP.GET_ACCOUNT_DESC(NVL(ACCOUNT_ID
                                                   ,-1)
                                               ,LEGAL_ENTITY_ID1
                                               ,'I'));
    ELSE
      RETURN (NULL);
    END IF;
  END ACCOUNT_DESCFORMULA;

  FUNCTION CALENDAR_DESCFORMULA RETURN CHAR IS
    L_CALENDAR_DESC VARCHAR2(240);
  BEGIN
    BEGIN
      SELECT
        CALENDAR_DESC
      INTO L_CALENDAR_DESC
      FROM
        CM_CLDR_HDR
      WHERE CALENDAR_CODE = COST_CALENDAR;
    EXCEPTION
      WHEN OTHERS THEN
        L_CALENDAR_DESC := NULL;
    END;
    RETURN (L_CALENDAR_DESC);
  END CALENDAR_DESCFORMULA;

  FUNCTION PERIOD_DESCFORMULA (PERIOD_CODE1 IN VARCHAR2) RETURN CHAR IS
    L_PERIOD_DESC VARCHAR2(240);
  BEGIN
    BEGIN
      SELECT
        PERIOD_DESC
      INTO L_PERIOD_DESC
      FROM
        CM_CLDR_DTL
      WHERE
      PERIOD_CODE = PERIOD_CODE1
      --PERIOD_CODE = PERIOD_CODE
        AND CALENDAR_CODE = COST_CALENDAR;
    EXCEPTION
      WHEN OTHERS THEN
        L_PERIOD_DESC := NULL;
    END;
    RETURN (L_PERIOD_DESC);
  END PERIOD_DESCFORMULA;

  FUNCTION ACCOUNT_CODE1FORMULA(ACCOUNT_ID1 IN NUMBER) RETURN CHAR IS
  BEGIN
    IF ACCOUNT_ID1 IS NOT NULL THEN
      RETURN (GMF_UTILITIES_GRP.GET_ACCOUNT_CODE(NVL(ACCOUNT_ID1
                                                   ,-1)
                                               ,LEGAL_ENTITY_ID1));
    ELSE
      RETURN (NULL);
    END IF;
  END ACCOUNT_CODE1FORMULA;

  FUNCTION ACCOUNT_DESC1FORMULA(ACCOUNT_ID1 IN NUMBER) RETURN CHAR IS
  BEGIN
    IF ACCOUNT_ID1 IS NOT NULL THEN
      RETURN (GMF_UTILITIES_GRP.GET_ACCOUNT_DESC(NVL(ACCOUNT_ID1
                                                   ,-1)
                                               ,LEGAL_ENTITY_ID1
                                               ,'I'));
    ELSE
      RETURN (NULL);
    END IF;
  END ACCOUNT_DESC1FORMULA;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION ALLOCATIONCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ALLOCATIONCP;
  END ALLOCATIONCP_P;

END GMF_CMR11USR_XMLP_PKG;


/
