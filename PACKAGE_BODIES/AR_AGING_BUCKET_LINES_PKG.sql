--------------------------------------------------------
--  DDL for Package Body AR_AGING_BUCKET_LINES_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."AR_AGING_BUCKET_LINES_PKG" as
/* $Header: ARPABLSB.pls 120.2.12000000.2 2007/05/16 11:35:42 tthangav ship $ */

procedure INSERT_ROW (
  X_ROWID in out NOCOPY VARCHAR2,
  X_AGING_BUCKET_LINE_ID in NUMBER,
  X_AGING_BUCKET_ID in NUMBER,
  X_BUCKET_SEQUENCE_NUM in NUMBER,
  X_DAYS_START in NUMBER,
  X_DAYS_TO in NUMBER,
  X_TYPE in VARCHAR2,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_REPORT_HEADING1 in VARCHAR2,
  X_REPORT_HEADING2 in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
  cursor C is select ROWID from AR_AGING_BUCKET_LINES_B
    where AGING_BUCKET_LINE_ID = X_AGING_BUCKET_LINE_ID
    ;
begin
  insert into AR_AGING_BUCKET_LINES_B (
    AGING_BUCKET_LINE_ID,
    AGING_BUCKET_ID,
    BUCKET_SEQUENCE_NUM,
    DAYS_START,
    DAYS_TO,
    TYPE,
    ATTRIBUTE_CATEGORY,
    ATTRIBUTE1,
    ATTRIBUTE2,
    ATTRIBUTE3,
    ATTRIBUTE4,
    ATTRIBUTE5,
    ATTRIBUTE6,
    ATTRIBUTE7,
    ATTRIBUTE8,
    ATTRIBUTE9,
    ATTRIBUTE10,
    ATTRIBUTE11,
    ATTRIBUTE12,
    ATTRIBUTE13,
    ATTRIBUTE14,
    ATTRIBUTE15,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN
  ) values (
    X_AGING_BUCKET_LINE_ID,
    X_AGING_BUCKET_ID,
    X_BUCKET_SEQUENCE_NUM,
    X_DAYS_START,
    X_DAYS_TO,
    X_TYPE,
    X_ATTRIBUTE_CATEGORY,
    X_ATTRIBUTE1,
    X_ATTRIBUTE2,
    X_ATTRIBUTE3,
    X_ATTRIBUTE4,
    X_ATTRIBUTE5,
    X_ATTRIBUTE6,
    X_ATTRIBUTE7,
    X_ATTRIBUTE8,
    X_ATTRIBUTE9,
    X_ATTRIBUTE10,
    X_ATTRIBUTE11,
    X_ATTRIBUTE12,
    X_ATTRIBUTE13,
    X_ATTRIBUTE14,
    X_ATTRIBUTE15,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN
  );

  insert into AR_AGING_BUCKET_LINES_TL (
    REPORT_HEADING1,
    REPORT_HEADING2,
    LAST_UPDATE_DATE,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    AGING_BUCKET_LINE_ID,
    LANGUAGE,
    SOURCE_LANG
  ) select
    X_REPORT_HEADING1,
    X_REPORT_HEADING2,
    X_LAST_UPDATE_DATE,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN,
    X_AGING_BUCKET_LINE_ID,
    L.LANGUAGE_CODE,
    userenv('LANG')
  from FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and not exists
    (select NULL
    from AR_AGING_BUCKET_LINES_TL T
    where T.AGING_BUCKET_LINE_ID = X_AGING_BUCKET_LINE_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);

  open c;
  fetch c into X_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

end INSERT_ROW;

procedure LOCK_ROW (
  X_AGING_BUCKET_LINE_ID in NUMBER,
  X_AGING_BUCKET_ID in NUMBER,
  X_BUCKET_SEQUENCE_NUM in NUMBER,
  X_DAYS_START in NUMBER,
  X_DAYS_TO in NUMBER,
  X_TYPE in VARCHAR2,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_REPORT_HEADING1 in VARCHAR2,
  X_REPORT_HEADING2 in VARCHAR2
) is
  cursor c is select
      AGING_BUCKET_ID,
      BUCKET_SEQUENCE_NUM,
      DAYS_START,
      DAYS_TO,
      TYPE,
      ATTRIBUTE_CATEGORY,
      ATTRIBUTE1,
      ATTRIBUTE2,
      ATTRIBUTE3,
      ATTRIBUTE4,
      ATTRIBUTE5,
      ATTRIBUTE6,
      ATTRIBUTE7,
      ATTRIBUTE8,
      ATTRIBUTE9,
      ATTRIBUTE10,
      ATTRIBUTE11,
      ATTRIBUTE12,
      ATTRIBUTE13,
      ATTRIBUTE14,
      ATTRIBUTE15
    from AR_AGING_BUCKET_LINES_B
    where AGING_BUCKET_LINE_ID = X_AGING_BUCKET_LINE_ID
    for update of AGING_BUCKET_LINE_ID nowait;
  recinfo c%rowtype;

  cursor c1 is select
      REPORT_HEADING1,
      REPORT_HEADING2,
      decode(LANGUAGE, userenv('LANG'), 'Y', 'N') BASELANG
    from AR_AGING_BUCKET_LINES_TL
    where AGING_BUCKET_LINE_ID = X_AGING_BUCKET_LINE_ID
    and userenv('LANG') in (LANGUAGE, SOURCE_LANG)
    for update of AGING_BUCKET_LINE_ID nowait;
begin
  open c;
  fetch c into recinfo;
  if (c%notfound) then
    close c;
    fnd_message.set_name('FND', 'FORM_RECORD_DELETED');
    app_exception.raise_exception;
  end if;
  close c;
  if (    ((recinfo.AGING_BUCKET_ID = X_AGING_BUCKET_ID)
           OR ((recinfo.AGING_BUCKET_ID is null) AND (X_AGING_BUCKET_ID is null)))
      AND ((recinfo.BUCKET_SEQUENCE_NUM = X_BUCKET_SEQUENCE_NUM)
           OR ((recinfo.BUCKET_SEQUENCE_NUM is null) AND (X_BUCKET_SEQUENCE_NUM is null)))
      AND ((recinfo.DAYS_START = X_DAYS_START)
           OR ((recinfo.DAYS_START is null) AND (X_DAYS_START is null)))
      AND ((recinfo.DAYS_TO = X_DAYS_TO)
           OR ((recinfo.DAYS_TO is null) AND (X_DAYS_TO is null)))
      AND (recinfo.TYPE = X_TYPE)
      AND ((recinfo.ATTRIBUTE_CATEGORY = X_ATTRIBUTE_CATEGORY)
           OR ((recinfo.ATTRIBUTE_CATEGORY is null) AND (X_ATTRIBUTE_CATEGORY is null)))
      AND ((recinfo.ATTRIBUTE1 = X_ATTRIBUTE1)
           OR ((recinfo.ATTRIBUTE1 is null) AND (X_ATTRIBUTE1 is null)))
      AND ((recinfo.ATTRIBUTE2 = X_ATTRIBUTE2)
           OR ((recinfo.ATTRIBUTE2 is null) AND (X_ATTRIBUTE2 is null)))
      AND ((recinfo.ATTRIBUTE3 = X_ATTRIBUTE3)
           OR ((recinfo.ATTRIBUTE3 is null) AND (X_ATTRIBUTE3 is null)))
      AND ((recinfo.ATTRIBUTE4 = X_ATTRIBUTE4)
           OR ((recinfo.ATTRIBUTE4 is null) AND (X_ATTRIBUTE4 is null)))
      AND ((recinfo.ATTRIBUTE5 = X_ATTRIBUTE5)
           OR ((recinfo.ATTRIBUTE5 is null) AND (X_ATTRIBUTE5 is null)))
      AND ((recinfo.ATTRIBUTE6 = X_ATTRIBUTE6)
           OR ((recinfo.ATTRIBUTE6 is null) AND (X_ATTRIBUTE6 is null)))
      AND ((recinfo.ATTRIBUTE7 = X_ATTRIBUTE7)
           OR ((recinfo.ATTRIBUTE7 is null) AND (X_ATTRIBUTE7 is null)))
      AND ((recinfo.ATTRIBUTE8 = X_ATTRIBUTE8)
           OR ((recinfo.ATTRIBUTE8 is null) AND (X_ATTRIBUTE8 is null)))
      AND ((recinfo.ATTRIBUTE9 = X_ATTRIBUTE9)
           OR ((recinfo.ATTRIBUTE9 is null) AND (X_ATTRIBUTE9 is null)))
      AND ((recinfo.ATTRIBUTE10 = X_ATTRIBUTE10)
           OR ((recinfo.ATTRIBUTE10 is null) AND (X_ATTRIBUTE10 is null)))
      AND ((recinfo.ATTRIBUTE11 = X_ATTRIBUTE11)
           OR ((recinfo.ATTRIBUTE11 is null) AND (X_ATTRIBUTE11 is null)))
      AND ((recinfo.ATTRIBUTE12 = X_ATTRIBUTE12)
           OR ((recinfo.ATTRIBUTE12 is null) AND (X_ATTRIBUTE12 is null)))
      AND ((recinfo.ATTRIBUTE13 = X_ATTRIBUTE13)
           OR ((recinfo.ATTRIBUTE13 is null) AND (X_ATTRIBUTE13 is null)))
      AND ((recinfo.ATTRIBUTE14 = X_ATTRIBUTE14)
           OR ((recinfo.ATTRIBUTE14 is null) AND (X_ATTRIBUTE14 is null)))
      AND ((recinfo.ATTRIBUTE15 = X_ATTRIBUTE15)
           OR ((recinfo.ATTRIBUTE15 is null) AND (X_ATTRIBUTE15 is null)))
  ) then
    null;
  else
    fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
    app_exception.raise_exception;
  end if;

  for tlinfo in c1 loop
    if (tlinfo.BASELANG = 'Y') then
      if (    ((tlinfo.REPORT_HEADING1 = X_REPORT_HEADING1)
               OR ((tlinfo.REPORT_HEADING1 is null) AND (X_REPORT_HEADING1 is null)))
          AND ((tlinfo.REPORT_HEADING2 = X_REPORT_HEADING2)
               OR ((tlinfo.REPORT_HEADING2 is null) AND (X_REPORT_HEADING2 is null)))
      ) then
        null;
      else
        fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
        app_exception.raise_exception;
      end if;
    end if;
  end loop;
  return;
end LOCK_ROW;

procedure UPDATE_ROW (
  X_AGING_BUCKET_LINE_ID in NUMBER,
  X_AGING_BUCKET_ID in NUMBER,
  X_BUCKET_SEQUENCE_NUM in NUMBER,
  X_DAYS_START in NUMBER,
  X_DAYS_TO in NUMBER,
  X_TYPE in VARCHAR2,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_REPORT_HEADING1 in VARCHAR2,
  X_REPORT_HEADING2 in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
begin
  update AR_AGING_BUCKET_LINES_B set
    AGING_BUCKET_ID = X_AGING_BUCKET_ID,
    BUCKET_SEQUENCE_NUM = X_BUCKET_SEQUENCE_NUM,
    DAYS_START = X_DAYS_START,
    DAYS_TO = X_DAYS_TO,
    TYPE = X_TYPE,
    ATTRIBUTE_CATEGORY = X_ATTRIBUTE_CATEGORY,
    ATTRIBUTE1 = X_ATTRIBUTE1,
    ATTRIBUTE2 = X_ATTRIBUTE2,
    ATTRIBUTE3 = X_ATTRIBUTE3,
    ATTRIBUTE4 = X_ATTRIBUTE4,
    ATTRIBUTE5 = X_ATTRIBUTE5,
    ATTRIBUTE6 = X_ATTRIBUTE6,
    ATTRIBUTE7 = X_ATTRIBUTE7,
    ATTRIBUTE8 = X_ATTRIBUTE8,
    ATTRIBUTE9 = X_ATTRIBUTE9,
    ATTRIBUTE10 = X_ATTRIBUTE10,
    ATTRIBUTE11 = X_ATTRIBUTE11,
    ATTRIBUTE12 = X_ATTRIBUTE12,
    ATTRIBUTE13 = X_ATTRIBUTE13,
    ATTRIBUTE14 = X_ATTRIBUTE14,
    ATTRIBUTE15 = X_ATTRIBUTE15,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN
  where AGING_BUCKET_LINE_ID = X_AGING_BUCKET_LINE_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  update AR_AGING_BUCKET_LINES_TL set
    REPORT_HEADING1 = X_REPORT_HEADING1,
    REPORT_HEADING2 = X_REPORT_HEADING2,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    SOURCE_LANG = userenv('LANG')
  where AGING_BUCKET_LINE_ID = X_AGING_BUCKET_LINE_ID
  and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

  if (sql%notfound) then
    raise no_data_found;
  end if;
end UPDATE_ROW;

procedure DELETE_ROW (
  X_AGING_BUCKET_LINE_ID in NUMBER
) is
begin
  delete from AR_AGING_BUCKET_LINES_TL
  where AGING_BUCKET_LINE_ID = X_AGING_BUCKET_LINE_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  delete from AR_AGING_BUCKET_LINES_B
  where AGING_BUCKET_LINE_ID = X_AGING_BUCKET_LINE_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;
end DELETE_ROW;

procedure ADD_LANGUAGE
is
begin
  delete from AR_AGING_BUCKET_LINES_TL T
  where not exists
    (select NULL
    from AR_AGING_BUCKET_LINES_B B
    where B.AGING_BUCKET_LINE_ID = T.AGING_BUCKET_LINE_ID
    );

  update AR_AGING_BUCKET_LINES_TL T set (
      REPORT_HEADING1,
      REPORT_HEADING2
    ) = (select
      B.REPORT_HEADING1,
      B.REPORT_HEADING2
    from AR_AGING_BUCKET_LINES_TL B
    where B.AGING_BUCKET_LINE_ID = T.AGING_BUCKET_LINE_ID
    and B.LANGUAGE = T.SOURCE_LANG)
  where (
      T.AGING_BUCKET_LINE_ID,
      T.LANGUAGE
  ) in (select
      SUBT.AGING_BUCKET_LINE_ID,
      SUBT.LANGUAGE
    from AR_AGING_BUCKET_LINES_TL SUBB, AR_AGING_BUCKET_LINES_TL SUBT
    where SUBB.AGING_BUCKET_LINE_ID = SUBT.AGING_BUCKET_LINE_ID
    and SUBB.LANGUAGE = SUBT.SOURCE_LANG
    and (SUBB.REPORT_HEADING1 <> SUBT.REPORT_HEADING1
      or (SUBB.REPORT_HEADING1 is null and SUBT.REPORT_HEADING1 is not null)
      or (SUBB.REPORT_HEADING1 is not null and SUBT.REPORT_HEADING1 is null)
      or SUBB.REPORT_HEADING2 <> SUBT.REPORT_HEADING2
      or (SUBB.REPORT_HEADING2 is null and SUBT.REPORT_HEADING2 is not null)
      or (SUBB.REPORT_HEADING2 is not null and SUBT.REPORT_HEADING2 is null)
  ));

  insert into AR_AGING_BUCKET_LINES_TL (
    REPORT_HEADING1,
    REPORT_HEADING2,
    LAST_UPDATE_DATE,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    AGING_BUCKET_LINE_ID,
    LANGUAGE,
    SOURCE_LANG
  ) select
    B.REPORT_HEADING1,
    B.REPORT_HEADING2,
    B.LAST_UPDATE_DATE,
    B.CREATION_DATE,
    B.CREATED_BY,
    B.LAST_UPDATED_BY,
    B.LAST_UPDATE_LOGIN,
    B.AGING_BUCKET_LINE_ID,
    L.LANGUAGE_CODE,
    B.SOURCE_LANG
  from AR_AGING_BUCKET_LINES_TL B, FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and B.LANGUAGE = userenv('LANG')
  and not exists
    (select NULL
    from AR_AGING_BUCKET_LINES_TL T
    where T.AGING_BUCKET_LINE_ID = B.AGING_BUCKET_LINE_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);
end ADD_LANGUAGE;

procedure LOAD_ROW (
  X_AGING_BUCKET_LINE_ID in NUMBER,
  X_BUCKET_SEQUENCE_NUM in NUMBER,
  X_AGING_BUCKET_ID in NUMBER,
  X_DAYS_START in NUMBER,
  X_DAYS_TO in NUMBER,
  X_TYPE in VARCHAR2,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_REPORT_HEADING1 in VARCHAR2,
  X_REPORT_HEADING2 in VARCHAR2,
  X_OWNER in VARCHAR2) IS
begin

  declare
     user_id		number := 0;
     row_id     	varchar2(64);

  begin

     user_id := fnd_load_util.owner_id(X_OWNER);

     AR_AGING_BUCKET_LINES_PKG.UPDATE_ROW (
      X_AGING_BUCKET_LINE_ID => X_AGING_BUCKET_LINE_ID,
      X_AGING_BUCKET_ID => X_AGING_BUCKET_ID,
      X_BUCKET_SEQUENCE_NUM => X_BUCKET_SEQUENCE_NUM,
      X_DAYS_START => X_DAYS_START,
      X_DAYS_TO => X_DAYS_TO,
      X_TYPE => X_TYPE,
      X_ATTRIBUTE_CATEGORY => X_ATTRIBUTE_CATEGORY,
      X_ATTRIBUTE1 => X_ATTRIBUTE1,
      X_ATTRIBUTE2 => X_ATTRIBUTE2,
      X_ATTRIBUTE3 => X_ATTRIBUTE3,
      X_ATTRIBUTE4 => X_ATTRIBUTE4,
      X_ATTRIBUTE5 => X_ATTRIBUTE5,
      X_ATTRIBUTE6 => X_ATTRIBUTE6,
      X_ATTRIBUTE7 => X_ATTRIBUTE7,
      X_ATTRIBUTE8 => X_ATTRIBUTE8,
      X_ATTRIBUTE9 => X_ATTRIBUTE9,
      X_ATTRIBUTE10 => X_ATTRIBUTE10,
      X_ATTRIBUTE11 => X_ATTRIBUTE11,
      X_ATTRIBUTE12 => X_ATTRIBUTE12,
      X_ATTRIBUTE13 => X_ATTRIBUTE13,
      X_ATTRIBUTE14 => X_ATTRIBUTE14,
      X_ATTRIBUTE15 => X_ATTRIBUTE15,
      X_REPORT_HEADING1 => X_REPORT_HEADING1,
      X_REPORT_HEADING2 => X_REPORT_HEADING2,
      X_LAST_UPDATE_DATE => sysdate,
      X_LAST_UPDATED_BY => user_id,
      X_LAST_UPDATE_LOGIN => 0);

    exception
       when NO_DATA_FOUND then

          AR_AGING_BUCKET_LINES_PKG.INSERT_ROW (
           X_ROWID => row_id,
           X_AGING_BUCKET_LINE_ID => X_AGING_BUCKET_LINE_ID,
           X_AGING_BUCKET_ID => X_AGING_BUCKET_ID,
           X_BUCKET_SEQUENCE_NUM => X_BUCKET_SEQUENCE_NUM,
           X_DAYS_START => X_DAYS_START,
           X_DAYS_TO => X_DAYS_TO,
           X_TYPE => X_TYPE,
           X_ATTRIBUTE_CATEGORY => X_ATTRIBUTE_CATEGORY,
           X_ATTRIBUTE1 => X_ATTRIBUTE1,
           X_ATTRIBUTE2 => X_ATTRIBUTE2,
           X_ATTRIBUTE3 => X_ATTRIBUTE3,
           X_ATTRIBUTE4 => X_ATTRIBUTE4,
           X_ATTRIBUTE5 => X_ATTRIBUTE5,
           X_ATTRIBUTE6 => X_ATTRIBUTE6,
           X_ATTRIBUTE7 => X_ATTRIBUTE7,
           X_ATTRIBUTE8 => X_ATTRIBUTE8,
           X_ATTRIBUTE9 => X_ATTRIBUTE9,
           X_ATTRIBUTE10 => X_ATTRIBUTE10,
           X_ATTRIBUTE11 => X_ATTRIBUTE11,
           X_ATTRIBUTE12 => X_ATTRIBUTE12,
           X_ATTRIBUTE13 => X_ATTRIBUTE13,
           X_ATTRIBUTE14 => X_ATTRIBUTE14,
           X_ATTRIBUTE15 => X_ATTRIBUTE15,
           X_REPORT_HEADING1 => X_REPORT_HEADING1,
           X_REPORT_HEADING2 => X_REPORT_HEADING2,
           X_CREATION_DATE => sysdate,
           X_CREATED_BY => user_id,
           X_LAST_UPDATE_DATE => sysdate,
           X_LAST_UPDATED_BY => user_id,
           X_LAST_UPDATE_LOGIN => 0 );
    end;
end LOAD_ROW;

procedure TRANSLATE_ROW (
  X_BUCKET_LINE_ID in NUMBER,
  X_REPORT_HEADING1 in VARCHAR2,
  X_REPORT_HEADING2 in VARCHAR2,
  X_OWNER in VARCHAR2) IS
begin

    -- only update rows that have not been altered by user

    update AR_AGING_BUCKET_LINES_TL set
      report_heading1 = X_REPORT_HEADING1,
      report_heading2 = X_REPORT_HEADING2,
      source_lang = userenv('LANG'),
      last_update_date = sysdate,
      last_updated_by =  fnd_load_util.owner_id(X_OWNER),
      last_update_login = 0
    where aging_bucket_line_id = X_BUCKET_LINE_ID
    and   userenv('LANG') in (language, source_lang);
end TRANSLATE_ROW;

end AR_AGING_BUCKET_LINES_PKG;

/
