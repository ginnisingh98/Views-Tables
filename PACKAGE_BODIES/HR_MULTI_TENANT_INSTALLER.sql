--------------------------------------------------------
--  DDL for Package Body HR_MULTI_TENANT_INSTALLER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."HR_MULTI_TENANT_INSTALLER" AS
/* $Header: pemtstup.pkb 120.0.12010000.34 2009/09/22 09:24:02 ppentapa noship $ */
 --
 -- Variable declarations
 --
 TYPE mt_table IS TABLE OF VARCHAR2(256) INDEX BY BINARY_INTEGER;
 l_dummy                     NUMBER;
 l_header                    DBMS_SQL.VARCHAR2S;
 l_body                      DBMS_SQL.VARCHAR2S;
 l_header_line               NUMBER:=0;
 l_body_line                 NUMBER:=0;
 l_package_name              VARCHAR2(255);
 l_csr_sql                   NUMBER;
 l_rows                      NUMBER;
 sqlstmt                     VARCHAR2(4000);
 installed_flag              BOOLEAN := TRUE;
 allowed_table               mt_table;
 predicate_table             mt_table;
 no_policy_table             mt_table;

 -----------------------------------------------------------------------
 -----------------------------------------------------------------------
 -- PRIVATE FUNCTIONS
 -----------------------------------------------------------------------
 -----------------------------------------------------------------------

   --
   --------------------------------------------------------------------
   --< GET_SCHEMA >----------------------------------------------------
   --------------------------------------------------------------------
   --
   -- Description:
   --    This function will return the oracle user name for the
   --    application short name passed as parameter.
   --
   --

FUNCTION get_schema
    (p_app_short_name IN VARCHAR2
    )
RETURN VARCHAR2
IS
--
  l_schema_name VARCHAR2(30);
--

BEGIN
--
-- Select the oracle user name for the application
-- short name passed as parameter.
--
  SELECT  fou.oracle_username
    INTO  l_schema_name
    FROM  fnd_oracle_userid  fou
         ,fnd_product_installations  fpi
         ,fnd_application            fap
   WHERE  fou.oracle_id             = fpi.oracle_id
     AND  fpi.application_id        = fap.application_id
     AND  fap.application_short_name = p_app_short_name;
RETURN l_schema_name;

END get_schema;

--
--------------------------------------------------------------------
--< GET_SCHEMA_BY_ORACLEID >----------------------------------------
--------------------------------------------------------------------
--
-- Description:
--    This function accepts the oracle id as parameter
--    and returns the corresponding oracle user name.
--
--    e.g. get_schema(900) returns 'APPS' as the schema name.
--

FUNCTION get_schema_by_oracleid
   (p_oracle_id IN NUMBER)
RETURN VARCHAR2
IS
--
  l_schema_name VARCHAR2(30);
--
BEGIN
--
-- Select the oracle user name for the
-- oracle id passed as function parameter
--

  SELECT fou.oracle_username
    INTO l_schema_name
    FROM fnd_oracle_userid    fou
   WHERE fou.oracle_id     =  p_oracle_id;
  RETURN l_schema_name;

END get_schema_by_oracleid;

--
--------------------------------------------------------------------
--< ADD_BODY_LINE >-------------------------------------------------
--------------------------------------------------------------------
--
-- Description:
--    This procedure accepts text as parameter
--    and stores the text. This is required for the dynamic
--    generation of the the package body.
--

PROCEDURE add_body_line
    (text IN   VARCHAR2)
IS
BEGIN
--
-- Store the text in the array
--
  l_body(l_body_line):=text||'
  ';
  l_body_line:=l_body_line+1;
END;

--
--------------------------------------------------------------------
--< ADD_HEADER_LINE >-----------------------------------------------
--------------------------------------------------------------------
--
-- Description:
--    This procedure accepts text as parameter
--    and stores the text. This is required for the dynamic
--    generation of the the package header.
--

PROCEDURE add_header_line
   (text IN   VARCHAR2)
IS
BEGIN
--
-- Store the text in the array
--
  l_header(l_header_line):=text||'
  ';
  l_header_line:= l_header_line+1;
END;

--
-----------------------------------------------------------------------
-----------------------------------------------------------------------
-- PUBLIC FUNCTIONS
-----------------------------------------------------------------------
-----------------------------------------------------------------------
--
-----------------------------------------------------------------------
--< INSTALL_HR_MULTI_TENANT >------------------------------------------
-----------------------------------------------------------------------
--
-- Description:
--    This procedure is called by the concurrent program
--    'Enable Multiple Tenant Security Process'. If valid profile
--    is not set for HR_ENABLE_MULTI_TENANCY it returns. If
--    the multi tenancy solution is not already installed then
--    it installs the solution. Irrespective of the soultion being installed
--    or not, it generates the package 'HR_MULTI_TENANCY_PKG'
--    and 'HR_MULTI_TENANT_INSTALL'.
--


PROCEDURE install_hr_multi_tenant (errbuf  OUT   NOCOPY   VARCHAR2
                                  ,retcode OUT   NOCOPY   NUMBER) IS

BEGIN
   --
   -- Check If valid value is set for profile is HR_ENABLE_MULTI_TENANCY
   -- If value is null or N then this is not a multi tenancy should not be
   -- installed.
   --

  IF fnd_profile.value('HR_ENABLE_MULTI_TENANCY') IS NULL
  OR fnd_profile.value('HR_ENABLE_MULTI_TENANCY') = 'N' THEN

     fnd_file.put_line(fnd_file.output
	                  ,'Set HR Enable Multi Tenancy System profile and submit the request');

     fnd_file.put_line(fnd_file.log
	                  ,'Set HR Enable Multi Tenancy System profile and submit the request');

     RETURN;
  END IF;

  --
  -- Check IF hr_ENTERPRISE_POLICY is already installed in the system.
  -- It checks if seeded user 'C::ENT' exists for the HR_ENTERPRISE_POLICY.
  -- If exists, the soultion had already been installed.
  -- This is to ensure that the concurrent program is rerunnable.
  --

  BEGIN
    sqlstmt := 'DECLARE policy_exists NUMBER;
	        BEGIN
		  SELECT 1
		    INTO policy_exists
		    FROM all_sa_users
		   WHERE policy_name=''HR_ENTERPRISE_POLICY''
		     AND user_name = ''C::ENT'';
		END;';
    EXECUTE IMMEDIATE sqlstmt;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
    --
    -- The default value of the installed flag is TRUE.
    --
         installed_flag := FALSE;
  END;

   --
   -- If it is a fresh installation the create the seeded levels and
   -- groups. Also grant the various user accesses.
   --

   IF installed_flag = FALSE THEN
      --
      -- Add the text that is to be executed dynamically
      --
      add_body_line('DECLARE');
      add_body_line('dummy NUMBER;');
      add_body_line('BEGIN');
      -- add_body_line('sa_sysdba.create_policy(''HR_ENTERPRISE_POLICY'',''HR_ENTERPRISE'',''READ_CONTROL,LABEL_DEFAULT,HIDE'');');
      add_body_line('sa_components.create_level(''HR_ENTERPRISE_POLICY'',0,''C'',''Confidential'');');
      add_body_line('sa_components.create_group(''HR_ENTERPRISE_POLICY'',0,''ENT'',''HR Enterprise Default Group'');');
      add_body_line('sa_components.create_group(''HR_ENTERPRISE_POLICY'',1,''GLOBAL'',''Global Group'');');
      add_body_line('sa_user_admin.set_user_privs(''HR_ENTERPRISE_POLICY'',''' || get_schema_by_oracleid(900) || ''',''PROFILE_ACCESS'');');
      add_body_line('sa_user_admin.set_user_privs(''HR_ENTERPRISE_POLICY'',''' || get_schema('PER') || ''',''PROFILE_ACCESS'');');
      add_body_line('SELECT to_data_label(''HR_ENTERPRISE_POLICY'',''C::ENT'') INTO dummy FROM dual;');
      add_body_line('SELECT to_data_label(''HR_ENTERPRISE_POLICY'',''C::GLOBAL'') INTO dummy FROM dual;');
      add_body_line('sa_user_admin.set_user_labels(policy_name => ''HR_ENTERPRISE_POLICY'', user_name => ''' || get_schema_by_oracleid(900) || ''', max_read_label => ''C::ENT,GLOBAL'', row_label => ''C::GLOBAL'');');
      add_body_line('sa_user_admin.set_user_labels(policy_name => ''HR_ENTERPRISE_POLICY'', user_name => ''' || get_schema('PER') || ''', max_read_label => ''C::ENT,GLOBAL'', row_label => ''C::GLOBAL'');');
      add_body_line('sa_user_admin.set_user_labels(policy_name => ''HR_ENTERPRISE_POLICY'', user_name => ''C::ENT'', max_read_label => ''C::ENT,GLOBAL'', row_label => ''C::GLOBAL'');');
      add_body_line('END;');

      --
      -- Execute the dynamic code.
      --

      l_csr_sql := dbms_sql.open_cursor;
      dbms_sql.parse( l_csr_sql, l_body,0,l_body_line-1,FALSE, dbms_sql.v7 );
      l_rows := dbms_sql.EXECUTE( l_csr_sql );
      dbms_sql.close_cursor( l_csr_sql );

      --
      -- Reinitialize the variables.
      --

      l_body_line     :=0;
      l_header_line   :=0;

  END IF;
   --
   -- Create or replace the hr_multi_tenancy_pkg package
   --

   l_package_name  := 'hr_multi_tenancy_pkg';
   add_header_line('CREATE OR REPLACE PACKAGE '||l_package_name||' AS ');
   add_body_line('CREATE OR REPLACE PACKAGE BODY '||l_package_name||' AS ');
   add_header_line('--Code generated on '||to_char(sysdate,'DD/MM/YYYY HH:MI:SS'));
   add_header_line('/'||'* $Header: pemtstup.pkb 120.0.12010000.20 2008/11/24 10:27:27 bchakrab noship*'||'/');
   add_body_line('--Code generated on '||to_char(sysdate,'DD/MM/YYYY HH:MI:SS'));
   add_body_line('/'||'* $Header: pemtstup.pkb  *'||'/');
   add_header_line('--');
   add_header_line('-- Name');
   add_header_line('--   is_multi_tenant_system');
   add_header_line('--');
   add_header_line('-- Purpose');
   add_header_line('--    All PL/SQL Code modified for enterprise should be wrapped IN a call ');
   add_header_line('--    to this method.');
   add_header_line('-- Called From');
   add_header_line('--    1. hr_signon ');
   add_header_line('-- Arguments');
   add_header_line('--   None.');
   add_header_line('--');
   add_header_line(' ');
   add_header_line('  FUNCTION is_multi_tenant_system RETURN boolean;');
   add_header_line('--');
   add_header_line('-- Name');
   add_header_line('--   get_system_model');
   add_header_line('--');
   add_header_line('-- Purpose');
   add_header_line('--    The function returns the System model as P/B or null');
   add_header_line('--    ');
   add_header_line('-- Called From');
   add_header_line('--    1. Assign Security Profiles form');
   add_header_line('-- Arguments');
   add_header_line('--   None.');
   add_header_line('--');
   add_header_line(' ');
   add_header_line('  FUNCTION get_system_model RETURN varchar2;');
   add_header_line('');
   add_header_line('PROCEDURE insert_hr_name_formats ( p_enterprise_code IN varchar2);');
   add_header_line('');
   add_header_line('--');
   add_header_line('-- Name');
   add_header_line('--   set_context');
   add_header_line('--');
   add_header_line('-- Purpose');
   add_header_line('--    The procedure sets/resets OLS enterprise context.');
   add_header_line('--    ');
   add_header_line('-- Called From');
   add_header_line('--    1. hr_signon with argument null.');
   add_header_line('--    2. HRMultiTenancyHelper.java(#resetContext) with argument ENT.');
   add_header_line('-- Arguments');
   add_header_line('--   p_context_value => context label to set');
   add_header_line('--');
   add_header_line(' ');
   add_header_line('  PROCEDURE set_context (p_context_value      IN VARCHAR2);');
   add_header_line('');
   add_header_line('  --');
   add_header_line('  --------------------------------------------------------------------');
   add_header_line('  --< set_context_for_person >----------------------------------------');
   add_header_line('  --------------------------------------------------------------------');
   add_header_line('  --');
   add_header_line('  -- Description:');
   add_header_line('  --    This is a public procedure to set the appropriate Context value');
   add_header_line('  --    for a person');
   add_header_line('  --');
   add_header_line('  PROCEDURE set_context_for_person (p_person_id           IN NUMBER);');
   add_header_line('');
   add_header_line('  --');
   add_header_line('  --------------------------------------------------------------------');
   add_header_line('  --< set_context_for_enterprise >----------------------------------------');
   add_header_line('  --------------------------------------------------------------------');
   add_header_line('  --');
   add_header_line('  -- Description:');
   add_header_line('  --    This is a public procedure to set the appropriate Context value');
   add_header_line('  --    for a given enterprise short code');
   add_header_line('  --');
   add_header_line('  PROCEDURE set_context_for_enterprise (p_enterprise_short_code  IN VARCHAR2);');
   add_header_line('');
   add_header_line('--');
   add_header_line('-- Name');
   add_header_line('--   get_corporate_branding');
   add_header_line('--');
   add_header_line('-- Purpose');
   add_header_line('--    Gets the corporate branding for the passed/current enterprise.');
   add_header_line('--    ');
   add_header_line('-- Called From');
   add_header_line('--    1. HRApplicationModuleImpl.java without argument');
   add_header_line('--    2. MTHomeAMImpl.java with argument.');
   add_header_line('-- Arguments');
   add_header_line('--   p_organization_id => organization id of the current enterprise');
   add_header_line('--');
   add_header_line(' ');
   add_header_line('  FUNCTION get_corporate_branding (p_organization_id    IN VARCHAR2 default null) RETURN VARCHAR2;');
   add_header_line('');
   add_header_line('--');
   add_header_line('-- Name');
   add_header_line('--   get_bus_grp_from_sec_grp');
   add_header_line('--');
   add_header_line('-- Purpose');
   add_header_line('-- Called from HR_SIGNON to RETURN the business group corresponding');
   add_header_line('-- to the enterprise security group for buisness group initialization.    ');
   add_header_line('--');
   add_header_line('-- Called From');
   add_header_line('--    1. HR_SIGNON ');
   add_header_line('-- Arguments');
   add_header_line('--   p_security_group_id => security group id of the current enterprise');
   add_header_line('--');
   add_header_line('  FUNCTION get_bus_grp_from_sec_grp (p_security_group_id  IN NUMBER) RETURN NUMBER;');
   add_header_line('');
   add_header_line('--');
   add_header_line('-- Name');
   add_header_line('--   set_security_group_id');
   add_header_line('--');
   add_header_line('-- Purpose');
   add_header_line('-- Called from HR_API to set proper security group.   ');
   add_header_line('--');
   add_header_line('-- Called From');
   add_header_line('--    1. HR_API ');
   add_header_line('-- Arguments');
   add_header_line('--   p_security_group_id => security group id of the current enterprise');
   add_header_line('--');
   add_header_line('  PROCEDURE set_security_group_id (p_security_group_id   IN NUMBER);');
   add_header_line('');
   add_header_line('--');
   add_header_line('-- Name');
   add_header_line('--   get_org_id_for_person');
   add_header_line('--');
   add_header_line('-- Purpose');
   add_header_line('-- Used IN SSHR to derive the security group from person    ');
   add_header_line('-- i.e. (Notifications/Workflow)');
   add_header_line('--');
   add_header_line('-- Arguments');
   add_header_line('--   p_person_id => id of the selected person');
   add_header_line('--    ');
   add_header_line('');
   add_header_line('  FUNCTION get_org_id_for_person (p_person_id          IN NUMBER) RETURN NUMBER;');
   add_header_line('');
   add_header_line('--');
   add_header_line('-- Name');
   add_header_line('--   get_org_id_for_person');
   add_header_line('--');
   add_header_line('-- Purpose');
   add_header_line('-- Used IN SSHR New Hire flow    ');
   add_header_line('-- Gets the HR Enterprise Organization ID IN the passed business group belonging to');
   add_header_line('-- to the same enterprise as the passed HR Person.');
   add_header_line('--');
   add_header_line('-- Arguments');
   add_header_line('--   p_person_id         => id of the selected person');
   add_header_line('--   p_business_group_id => id of the selected business group.');
   add_header_line('--   ');
   add_header_line('  FUNCTION get_org_id_for_person (p_person_id          IN NUMBER');
   add_header_line('                                 ,p_business_group_id  IN NUMBER) RETURN NUMBER;');
   add_header_line('');
   add_header_line('--');
   add_header_line('-- Name');
   add_header_line('--   get_label_from_bg');
   add_header_line('--');
   add_header_line('-- Purpose');
   add_header_line('-- Called From PerAppModuleHelper ');
   add_header_line('-- to get label from BG');
   add_header_line('--');
   add_header_line('-- Arguments');
   add_header_line('--   p_business_group_id => id of the selected business group.');
   add_header_line('-- ');
   add_header_line('  FUNCTION get_label_from_bg (p_business_group_id  IN NUMBER) RETURN VARCHAR2;');
   add_header_line('');
   add_header_line(' --');
   add_header_line(' -- Name');
   add_header_line(' --   get_org_id_from_bg_and_sl');
   add_header_line(' --');
   add_header_line(' -- Purpose');
   add_header_line(' -- Called From PerAppModuleHelper');
   add_header_line(' -- to get orgid from BG and security label');
   add_header_line(' --');
   add_header_line(' -- Arguments');
   add_header_line(' --   p_business_group_id => id of the selected business group.');
   add_header_line(' --   p_security_label => security label.');
   add_header_line(' --');
   add_header_line('  FUNCTION get_org_id_from_bg_and_sl (p_business_group_id  IN NUMBER');
   add_header_line('                                     ,p_security_label     IN VARCHAR2) RETURN NUMBER;');
   add_header_line('');
   add_header_line('--');
   add_header_line('-- Name');
   add_header_line('--   is_valid_sec_group');
   add_header_line('--');
   add_header_line('-- Purpose');
   add_header_line('-- Returns Y/N if it is a valid security group');
   add_header_line('--');
   add_header_line('-- Arguments');
   add_header_line('--   p_security_group_id => security group id');
   add_header_line('--   p_business_group_id => id of the selected business group.');
   add_header_line('--');
   add_header_line('  FUNCTION is_valid_sec_group (p_security_group_id  IN NUMBER');
   add_header_line('                              ,p_business_group_id  IN NUMBER) RETURN VARCHAR2;');
   add_header_line('');
   add_header_line(' --');
   add_header_line(' -- Name');
   add_header_line(' --   add_language');
   add_header_line(' --');
   add_header_line(' -- Purpose');
   add_header_line(' --   Updates TL table');
   add_header_line(' --');
   add_header_line(' -- Arguments');
   add_header_line(' --    None');
   add_header_line(' --');
   add_header_line('  PROCEDURE add_language;');
   add_header_line('');

   add_body_line('/*FUNCTION get_label_from_secgrp');
   add_body_line('    (p_security_group_id     IN NUMBER) RETURN VARCHAR2 AS');
   add_body_line('    l_security_group_key        VARCHAR2(30);');
   add_body_line('    l_enterprise_label          VARCHAR2(4000);');
   add_body_line('  BEGIN');
   add_body_line('    BEGIN');
   add_body_line('      SELECT security_group_key');
   add_body_line('        INTO l_security_group_key');
   add_body_line('        FROM fnd_security_groups');
   add_body_line('       WHERE security_group_id = p_security_group_id;');
   add_body_line('    EXCEPTION');
   add_body_line('      WHEN no_data_found THEN');
   add_body_line('        l_security_group_key := NULL;');
   add_body_line('      WHEN too_many_rows THEN');
   add_body_line('        l_security_group_key := NULL;');
   add_body_line('    END;');
   add_body_line('');
   add_body_line('    BEGIN');
   add_body_line('      SELECT enterprise_label');
   add_body_line('        INTO l_enterprise_label');
   add_body_line('        FROM per_ent_security_groups');
   add_body_line('       WHERE to_char(organization_id) = l_security_group_key');
   add_body_line('         AND enabled_flag = ''Y'';');
   add_body_line('    EXCEPTION');
   add_body_line('      WHEN no_data_found THEN');
   add_body_line('        l_enterprise_label := ''ENT'';');
   add_body_line('    END;');
   add_body_line('');
   add_body_line('    IF instr(l_enterprise_label, ''C::'') = 0 THEN');
   add_body_line('      l_enterprise_label := ''C::'' || l_enterprise_label;');
   add_body_line('    END IF;');
   add_body_line('');
   add_body_line('    RETURN l_enterprise_label;');
   add_body_line('  END get_label_from_secgrp;*/');
   add_body_line('');
   add_body_line('-----------------------------------------------------------------------');
   add_body_line('-----------------------------------------------------------------------');
   add_body_line('-- PRIVATE FUNCTIONS');
   add_body_line('-----------------------------------------------------------------------');
   add_body_line('-----------------------------------------------------------------------');
   add_body_line('');
   add_body_line('--');
   add_body_line('--------------------------------------------------------------------');
   add_body_line('--< get_label_from_bg >-----------------------------------------------------');
   add_body_line('--------------------------------------------------------------------');
   add_body_line('--');
   add_body_line('-- Description:');
   add_body_line('--    This function is Called From PerAppModuleHelper ');
   add_body_line('--    to get label from BG');
   add_body_line('--');
   add_body_line('-- Arguments');
   add_body_line('--     p_business_group_id => id of the selected business group.');
   add_body_line('--');
   add_body_line('');
   add_body_line('FUNCTION get_label_from_bg (p_business_group_id     IN NUMBER) RETURN VARCHAR2 IS');
   add_body_line('   l_enterprise_label          VARCHAR2(4000);');
   add_body_line('');
   add_body_line('   CURSOR label_bg (p_business_group_id NUMBER) IS');
   add_body_line('      SELECT   enterprise_label');
   add_body_line('        FROM   per_ent_security_groups');
   add_body_line('       WHERE   business_group_id = p_business_group_id');
   add_body_line('         AND   enabled_flag = ''Y'';');
   add_body_line('');
   add_body_line('BEGIN');
   add_body_line('  OPEN label_bg (p_business_group_id => p_business_group_id);');
   add_body_line('  FETCH label_bg INTO l_enterprise_label;');
   add_body_line('  IF label_bg%notfound THEN');
   add_body_line('     l_enterprise_label := ''ENT'';');
   add_body_line('  END IF;');
   add_body_line('  RETURN ''C::'' || l_enterprise_label;');
   add_body_line('END get_label_from_bg;');
   add_body_line('');
   add_body_line('  /*FUNCTION get_label_from_session RETURN VARCHAR2 IS');
   add_body_line('    l_security_group_id NUMBER;');
   add_body_line('  BEGIN');
   add_body_line('    l_security_group_id := fnd_global.security_group_id;');
   add_body_line('    RETURN get_label_from_secgrp');
   add_body_line('      (p_security_group_id => l_security_group_id);');
   add_body_line('  END get_label_from_session;*/');
   add_body_line('');
   add_body_line('--');
   add_body_line('--------------------------------------------------------------------');
   add_body_line('--< init_profiles >-----------------------------------------------------');
   add_body_line('--------------------------------------------------------------------');
   add_body_line('--');
   add_body_line('-- Description:');
   add_body_line('--    This is a private procedure that is used ');
   add_body_line('--    to initialize the profile values for the enterprise');
   add_body_line('--');
   add_body_line('--');
   add_body_line('PROCEDURE init_profiles AS');
   add_body_line('   CURSOR csr_profile_value IS');
   add_body_line('     SELECT   description, meaning');
   add_body_line('       FROM   fnd_lookup_values');
   add_body_line('      WHERE   lookup_type = ''PER_MT_VALUES'' ');
   add_body_line('	  AND   enabled_flag = ''Y'' ');
   add_body_line('	  AND   language = userenv(''LANG'') ');
   add_body_line('	  AND   view_application_id = 3 ');
   add_body_line('	  AND   security_group_id = fnd_global.lookup_security_group(lookup_type');
   add_body_line('                                                                ,view_application_id);');
   add_body_line('BEGIN');
   add_body_line('  FOR rec IN csr_profile_value LOOP');
   add_body_line('      fnd_profile.put(rec.meaning, rec.description);');
   add_body_line('  END LOOP;');
   add_body_line('END init_profiles;');
   add_body_line('');
   add_body_line('--');
   add_body_line('--------------------------------------------------------------------');
   add_body_line('--< init_context >-----------------------------------------------------');
   add_body_line('--------------------------------------------------------------------');
   add_body_line('--');
   add_body_line('-- Description:');
   add_body_line('--    This is a private procedure that is used ');
   add_body_line('--    to initialize the OLS context');
   add_body_line('--');
   add_body_line('--');
   add_body_line('');
   add_body_line('PROCEDURE init_context (p_context          IN VARCHAR2) AS');
   add_body_line('    l_current_context      VARCHAR2 (4000);');
   add_body_line('    l_session_context      VARCHAR2 (4000);');
   add_body_line('BEGIN');
   add_body_line('--');
   add_body_line('-- If it is not a multi tenant solution then do not do anything ');
   add_body_line('--');
   add_body_line('  IF NOT is_multi_tenant_system THEN');
   add_body_line('     RETURN;');
   add_body_line('  END IF;');
   add_body_line('');
   add_body_line('  l_current_context := p_context;');
   add_body_line('--');
   add_body_line('-- This is to support STANDARD ');
   add_body_line('--');
   add_body_line('  IF l_current_context IS NULL THEN');
   add_body_line('     l_current_context := ''C::ENT'';');
   add_body_line('  END IF;');
   add_body_line('');
   add_body_line('  IF instr(l_current_context, ''C::'') = 0 THEN');
   add_body_line('     l_current_context := ''C::'' || l_current_context;');
   add_body_line('  END IF;');
   add_body_line('');
   add_body_line('  l_session_context := sa_session.row_label(''HR_ENTERPRISE_POLICY'');');
   add_body_line('');
   add_body_line('--');
   add_body_line('-- Only if context is different from the present context ');
   add_body_line('-- do the processing');
   add_body_line('--');
   add_body_line('  IF l_session_context IS NULL OR ');
   add_body_line('     l_session_context <> l_current_context THEN');
   add_body_line('     BEGIN');
   add_body_line('        sa_session.set_access_profile(''HR_ENTERPRISE_POLICY'', l_current_context);');
   add_body_line('        IF l_current_context <> ''C::ENT'' THEN');
   add_body_line('          init_profiles;');
   add_body_line('        END IF;');
   add_body_line('      EXCEPTION');
   add_body_line('        WHEN others THEN');
   add_body_line('--');
   add_body_line('-- This is an error condition');
   add_body_line('--');
   add_body_line('          fnd_message.set_name (''PER'',''PER_OLS_SETUP_ERROR'');');
   add_body_line('          fnd_message.set_token (''ERRMSG'' , sqlerrm);');
   add_body_line('          fnd_message.raise_error;');
   add_body_line('          -- Temporary Fix : Fallback code added');
   add_body_line('          -- sa_session.set_access_profile(''HR_ENTERPRISE_POLICY'', ''C::ENT'');');
   add_body_line('      END;');
   add_body_line('  END IF;');
   add_body_line('END init_context;');
   add_body_line('');
   add_body_line('  --');
   add_body_line('   --------------------------------------------------------------------');
   add_body_line('   --< init_context_from_secgrp >-----------------------------------------------------');
   add_body_line('   --------------------------------------------------------------------');
   add_body_line('   --');
   add_body_line('   -- Description:');
   add_body_line('   --    This is a private procedure that is used ');
   add_body_line('   --    to initialize the OLS context from the security group id passed ');
   add_body_line('   --    as parameter.');
   add_body_line('   -- Arguments');
   add_body_line('   --    p_security_group_id  => id of the current security group');
   add_body_line('   --');
   add_body_line('');
   add_body_line('PROCEDURE init_context_from_secgrp (p_security_group_id       IN NUMBER) AS');
   add_body_line('    l_security_label     VARCHAR2(4000);');
   add_body_line('BEGIN');
   add_body_line('  IF NOT is_multi_tenant_system THEN ');
   add_body_line('     RETURN;');
   add_body_line('  END IF;');
   add_body_line('  init_context (p_context => ''ENT'');');
   add_body_line('  BEGIN');
   add_body_line('     SELECT    enterprise_label');
   add_body_line('       INTO    l_security_label');
   add_body_line('       FROM    per_ent_security_groups');
   add_body_line('      WHERE    security_group_id = p_security_group_id');
   add_body_line('        AND    enabled_flag = ''Y'';');
   add_body_line('  EXCEPTION');
   add_body_line('      WHEN no_data_found THEN');
   add_body_line('        -- This can happen under three conditions.');
   add_body_line('        -- 1. The security group corresponds to a business group.');
   add_body_line('        -- 2. The security group IS NOT related to HR setup.');
   add_body_line('        -- 3. The enterprise security group IS disabled.');
   add_body_line('        ');
   add_body_line('        -- For case 3 we need to raise error');
   add_body_line('        BEGIN');
   add_body_line('          SELECT    enterprise_label');
   add_body_line('            INTO    l_security_label');
   add_body_line('            FROM    per_ent_security_groups');
   add_body_line('           WHERE    security_group_id = p_security_group_id;');
   add_body_line('          -- The security group IS disabled.');
   add_body_line('          fnd_message.set_name (''PER'',''PER_OLS_SETUP_ERROR'');');
   add_body_line('          fnd_message.set_token (''ERRMSG'' , ''Security Group '' || p_security_group_id || '' IS disabled.'');');
   add_body_line('          fnd_message.raise_error;');
   add_body_line('        EXCEPTION');
   add_body_line('          WHEN no_data_found THEN');
   add_body_line('            RETURN;');
   add_body_line('        END;');
   add_body_line('      WHEN too_many_rows THEN');
   add_body_line('        fnd_message.set_name (''PER'',''PER_OLS_SETUP_ERROR'');');
   add_body_line('        fnd_message.set_token (''ERRMSG'' , sqlerrm);');
   add_body_line('        fnd_message.raise_error;');
   add_body_line('    END;');
   add_body_line('');
   add_body_line('    init_context (p_context => l_security_label);');
   add_body_line('END init_context_from_secgrp;');
   add_body_line('');
   add_body_line('--');
   add_body_line('--------------------------------------------------------------------');
   add_body_line('--< init_context_from_apps_context >--------------------------------');
   add_body_line('--------------------------------------------------------------------');
   add_body_line('--');
   add_body_line('-- Description:');
   add_body_line('--    This is a private procedure that is used ');
   add_body_line('--    to initialize the OLS context from the apps context using fnd_global ');
   add_body_line('--    security group id.');
   add_body_line('--');
   add_body_line('');
   add_body_line('  PROCEDURE init_context_from_apps_context AS');
   add_body_line('     l_security_group_id NUMBER;');
   add_body_line('     l_sgid_char varchar2(10);');
   add_body_line('  BEGIN');
   add_body_line('    l_security_group_id := fnd_global.security_group_id;');
   add_body_line('');
   add_body_line('    -- As we set the security id in client_info only in set_security_group_id ');
   add_body_line('    -- procedure in  hr_multi_tenancy_pkg, we get the security group id from ');
   add_body_line('    -- client info, but not fnd_global.security_group_id');
   add_body_line('    if l_security_group_id = 0 then');
   add_body_line('      l_sgid_char := substr(userenv(''CLIENT_INFO''),55,10);');
   add_body_line('      if l_sgid_char is null or l_sgid_char = ''          '' or l_sgid_char = ''0'' then');
   add_body_line('          l_security_group_id := 0;');
   add_body_line('      else');
   add_body_line('          l_security_group_id := to_number(l_sgid_char);');
   add_body_line('      end if;');
   add_body_line('    end if;');
   add_body_line('    init_context_from_secgrp (p_security_group_id => l_security_group_id);');
   add_body_line('  END init_context_from_apps_context;');
   add_body_line('');
   add_body_line('--');
   add_body_line('--------------------------------------------------------------------');
   add_body_line('--< is_multi_tenant_system >--------------------------------------');
   add_body_line('--------------------------------------------------------------------');
   add_body_line('--');
   add_body_line('-- Description:');
   add_body_line('--    This is a public function that is used as a wrapper for all calls');
   add_body_line('--    In normal instance with HR_ENABLE_MULTI_TENANCY not set, the function ');
   add_body_line('--    returns false. In this case, normal functionality should continued.');
   add_body_line('--    In case of a multi tenanat system, the function returns false and');
   add_body_line('--    the multi tenancy specific solution comes into play.');
   add_body_line('--');
   add_body_line('FUNCTION is_multi_tenant_system RETURN BOOLEAN AS');
   add_body_line('    l_profile_value   VARCHAR2 (255);');
   add_body_line('BEGIN');
   add_body_line('    l_profile_value := fnd_profile.value(''HR_ENABLE_MULTI_TENANCY'');');
   add_body_line('');
   add_body_line('    IF l_profile_value = ''P'' OR');
   add_body_line('       l_profile_value = ''B'' THEN');
   add_body_line('      RETURN true;');
   add_body_line('    END IF;');
   add_body_line('    RETURN false;');
   add_body_line('END is_multi_tenant_system;');
   add_body_line('');
   add_body_line('--');
   add_body_line('--------------------------------------------------------------------');
   add_body_line('--< get_system_model >----------------------------------------------');
   add_body_line('--------------------------------------------------------------------');
   add_body_line('--');
   add_body_line('-- Description:');
   add_body_line('--    This is a public function that returns whether the system is a BPO');
   add_body_line('--    Model 1 or PEO Model2 . In case of Model 1 the profile value of  ');
   add_body_line('--    HR_ENABLE_MULTI_TENANCY should be set B while for model 2, the value ');
   add_body_line('--    should be P. For non multi tenant systems it must be null.');
   add_body_line('--');
   add_body_line('  FUNCTION get_system_model RETURN VARCHAR2 AS');
   add_body_line('    l_system_model  VARCHAR2(255);');
   add_body_line('  BEGIN');
   add_body_line('    l_system_model := fnd_profile.value(''HR_ENABLE_MULTI_TENANCY'');');
   add_body_line('  ');
   add_body_line('    IF l_system_model IS NULL THEN');
   add_body_line('      RETURN ''N'';');
   add_body_line('    ELSE');
   add_body_line('      RETURN l_system_model;');
   add_body_line('    END IF;');
   add_body_line('  ');
   add_body_line('  END get_system_model;');
   add_body_line('');
   add_body_line('PROCEDURE insert_hr_name_formats ( p_enterprise_code IN varchar2)');
   add_body_line(' AS');
   add_body_line('   TYPE hr_name_format_rec IS');
   add_body_line('             RECORD (format_name           VARCHAR2(80)');
   add_body_line('                    ,legislation_code      VARCHAR2(30)');
   add_body_line('                    ,user_format_choice    VARCHAR2(1)');
   add_body_line('                    ,format_mask           VARCHAR2(250)');
   add_body_line('                    ,object_version_number NUMBER(22)');
   add_body_line('                    );');
   add_body_line('  TYPE hr_name_format_tab_type IS TABLE OF hr_name_format_rec INDEX BY BINARY_INTEGER;');
   add_body_line('  hr_name_format_tab hr_name_format_tab_type;');
   add_body_line('  current_hr_name_format hr_name_format_rec;');
   add_body_line('  max_id number;');
   add_body_line('  next_id number ;');
   add_body_line(' ');
   add_body_line('  CURSOR c_hr_name_format ');
   add_body_line('      IS');
   add_body_line('  SELECT format_name');
   add_body_line('        ,legislation_code');
   add_body_line('        ,user_format_choice');
   add_body_line('        ,format_mask');
   add_body_line('        ,object_version_number');
   add_body_line('    FROM hr_name_formats;');
   add_body_line('');
   add_body_line(' BEGIN');
   add_body_line('    Open c_hr_name_format;');
   add_body_line('    Fetch c_hr_name_format bulk collect into hr_name_format_tab;');
   add_body_line('    close c_hr_name_format;');
   add_body_line('   ');
   add_body_line('    for i in 1 .. hr_name_format_tab.count loop');
   add_body_line('     current_hr_name_format := hr_name_format_tab(i);');
   add_body_line('     --');
   add_body_line('     -- This is done because seeded data uses non sequential format_id');
   add_body_line('     -- And we want smooth insertions without any exceptions due to colliding');
   add_body_line('     -- sequence numbers.');
   add_body_line('     --');
   add_body_line('     select max(name_format_id)');
   add_body_line('       into max_id');
   add_body_line('       from hr_name_formats;');
   add_body_line('      select hr_name_formats_s.nextval into next_id from dual;');
   add_body_line('     --');
   add_body_line('     -- This is basically setting the sequence to proper index value');
   add_body_line('     --');
   add_body_line('     while(max_id >= next_id) loop');
   add_body_line('         select hr_name_formats_s.nextval into next_id from dual;');
   add_body_line('     end loop;');
   add_body_line('         ');
   add_body_line('execute immediate ''insert into hr_name_formats (name_format_id');
   add_body_line('                                  ,format_name');
   add_body_line('                                  ,legislation_code');
   add_body_line('                                  ,user_format_choice');
   add_body_line('                                  ,format_mask');
  add_body_line('                                  ,OBJECT_VERSION_NUMBER');
   add_body_line('                                  ,hr_enterprise)');
   add_body_line('      values(:1');
   add_body_line('             ,:2');
   add_body_line('             ,:3');
   add_body_line('             ,:4');
   add_body_line('             ,:5');
   add_body_line('             ,:6');
   add_body_line('             ,char_to_label(''''HR_ENTERPRISE_POLICY'''',:7))''');
   add_body_line('      using');
   add_body_line('            next_id');
   add_body_line('            ,current_hr_name_format.format_name');
   add_body_line('            ,current_hr_name_format.legislation_code');
   add_body_line('            ,current_hr_name_format.user_format_choice');
   add_body_line('            ,current_hr_name_format.format_mask');
   add_body_line('            ,current_hr_name_format.OBJECT_VERSION_NUMBER');
   add_body_line('            ,p_enterprise_code; ');
   add_body_line('    end loop;');
   add_body_line('    ');
   add_body_line(' EXCEPTION');
   add_body_line('  WHEN OTHERS THEN');
   add_body_line('    raise;');
   add_body_line('   --RETURN;');
   add_body_line(' END; ');
   add_body_line('');
   add_body_line('--');
   add_body_line('--------------------------------------------------------------------');
   add_body_line('--< set_context >---------------------------------------------------');
   add_body_line('--------------------------------------------------------------------');
   add_body_line('--');
   add_body_line('-- Description:');
   add_body_line('--    This is a public procedure which is called by HR_SIGNON to set ');
   add_body_line('--    the appropriate Context value.  ');
   add_body_line('--');
   add_body_line('');
   add_body_line('PROCEDURE set_context (p_context_value    IN VARCHAR2) AS');
   add_body_line('sec_flag     varchar2(1):= ''N'';');
   add_body_line('user_name varchar2(200);');
   add_body_line('BEGIN');
   add_body_line('select sa_session.sa_user_name(''HR_ENTERPRISE_POLICY'') into user_name from dual;');
   add_body_line('init_context(p_context => ''ENT'');');
   add_body_line('IF get_system_model=''B'' THEN ');
   add_body_line('  BEGIN');
   add_body_line('    SELECT ''Y'' ');
   add_body_line('      INTO sec_flag');
   add_body_line('      FROM per_ent_security_groups');
   add_body_line('     WHERE security_group_id = fnd_global.security_group_id;');
   add_body_line('  EXCEPTION ');
   add_body_line('    WHEN NO_DATA_FOUND THEN');
   add_body_line('       sec_flag := ''N'';');
   add_body_line('  END;');
   add_body_line('  IF fnd_global.security_group_id = 0 THEN');
   add_body_line('     sec_flag := ''Y'';');
   add_body_line('  END IF;');
   add_body_line('  IF sec_flag = ''N'' THEN');
   add_body_line('     sa_session.set_access_profile(''HR_ENTERPRISE_POLICY'', user_name);');
   add_body_line('     fnd_message.set_name (''PER'',''PER_OLS_SETUP_ERROR'');');
   add_body_line('     fnd_message.set_token (''ERRMSG'' , ''Cannot determine a unique security group within the enterprise.'');');
   add_body_line('     fnd_message.raise_error;');
   add_body_line('  END IF;');
   add_body_line('END IF;');
   add_body_line('--');
   add_body_line('-- If null is passed as parameter, set context from apps context.');
   add_body_line('--');
   add_body_line('  IF p_context_value IS NULL THEN');
   add_body_line('     init_context_from_apps_context;');
   add_body_line('  ELSE');
   add_body_line('--');
   add_body_line('-- This code is used to reset context to ENT');
   add_body_line('--');
   add_body_line('    IF(p_context_value <> ''ENT'') THEN');
   add_body_line('      init_context (p_context => ''ENT'');');
   add_body_line('    END IF;');
   add_body_line('--');
   add_body_line('-- This code is used to set the appropriate context');
   add_body_line('--');
   add_body_line('      init_context (p_context => p_context_value);');
   add_body_line('  END IF;');
   add_body_line('END set_context;');
   add_body_line('');
   add_body_line('  --');
   add_body_line('  --------------------------------------------------------------------');
   add_body_line('  --< set_context_for_person >----------------------------------------');
   add_body_line('  --------------------------------------------------------------------');
   add_body_line('  --');
   add_body_line('  -- Description:');
   add_body_line('  --    This is a public procedure to set the appropriate Context value');
   add_body_line('  --    for a person');
   add_body_line('  --');
   add_body_line('  PROCEDURE set_context_for_person (p_person_id           IN NUMBER) AS');
   add_body_line('      label_query               VARCHAR2(1000) :=');
   add_body_line('        ''SELECT   LABEL_TO_CHAR(HR_ENTERPRISE) ENT_LABEL, BUSINESS_GROUP_ID '' ||');
   add_body_line('        ''  FROM   PER_ALL_PEOPLE_F '' ||');
   add_body_line('        '' WHERE   PERSON_ID = :1 '' ||');
   add_body_line('        ''   AND   ROWNUM < 2'';');
   add_body_line('      l_security_label          VARCHAR2(4000);');
   add_body_line('      l_business_group_id       NUMBER;');
   add_body_line('      l_enabled_flag            VARCHAR2(1) := ''N'';');
   add_body_line('  BEGIN');
   add_body_line('    INIT_CONTEXT(p_context => ''ENT'');');
   add_body_line('      BEGIN');
   add_body_line('        EXECUTE IMMEDIATE label_query');
   add_body_line('                INTO l_security_label, l_business_group_id');
   add_body_line('                USING IN p_person_id;');
   add_body_line('        --If security label for this person is null, set context to ENT');
   add_body_line('        IF (l_security_label IS NOT NULL AND');
   add_body_line('            l_security_label = ''C::ENT'' )');
   add_body_line('         OR l_security_label IS NULL THEN');
   add_body_line('             set_context(''ENT'');');
   add_body_line('        ELSE ');
   add_body_line('           BEGIN');
   add_body_line('             SELECT enabled_flag');
   add_body_line('               INTO l_enabled_flag');
   add_body_line('               FROM per_ent_security_groups');
   add_body_line('              WHERE business_group_id = l_business_group_id ');
   add_body_line('                AND enterprise_label = substrb(l_security_label,4);');
   add_body_line('           EXCEPTION ');
   add_body_line('              WHEN NO_DATA_FOUND THEN');
   add_body_line('                l_enabled_flag := ''N'';');
   add_body_line('           END;');
   add_body_line('           --If enterprise is enabled, set the context');
   add_body_line('           IF l_enabled_flag = ''Y'' THEN');
   add_body_line('              set_context(substrb(l_security_label,4));');
   add_body_line('           ELSE');
   add_body_line('            --raise error eneterprise is not enabled');
   add_body_line('            fnd_message.set_name (''PER'',''PER_ENTERPRISE_NOT_FOUND'');');
   add_body_line('            fnd_message.raise_error;');
   add_body_line('           END IF;');
   add_body_line('        END IF;        ');
   add_body_line('      EXCEPTION');
   add_body_line('        WHEN no_data_found THEN');
   add_body_line('          --raise error if person not found');
   add_body_line('          fnd_message.set_name (''PER'',''PER_OLS_SETUP_ERROR'');');
   add_body_line('          fnd_message.set_token (''ERRMSG'' , ''Invalid Person Id'');');
   add_body_line('          fnd_message.raise_error;');
   add_body_line('      END;');
   add_body_line('  END set_context_for_person;');
   add_body_line('');
   add_body_line('  --');
   add_body_line('  --------------------------------------------------------------------');
   add_body_line('  --< set_context_for_enterprise >----------------------------------------');
   add_body_line('  --------------------------------------------------------------------');
   add_body_line('  --');
   add_body_line('  -- Description:');
   add_body_line('  --    This is a public procedure to set the appropriate Context value');
   add_body_line('  --    for a given enterprise short code');
   add_body_line('  --');
   add_body_line('  PROCEDURE set_context_for_enterprise (p_enterprise_short_code  IN VARCHAR2) AS');
   add_body_line('      l_security_label          VARCHAR2(4000);');
   add_body_line('      l_exists                  NUMBER := 0;');
   add_body_line('  BEGIN');
   add_body_line('    INIT_CONTEXT(p_context => ''ENT'');');
   add_body_line('    BEGIN');
   add_body_line('      SELECT enterprise_label');
   add_body_line('        INTO l_security_label');
   add_body_line('        FROM per_enterprises');
   add_body_line('       WHERE enterprise_short_code = p_enterprise_short_code;');
   add_body_line('    EXCEPTION');
   add_body_line('       WHEN NO_DATA_FOUND THEN');
   add_body_line('         fnd_message.set_name (''PER'',''PER_ENTERPRISE_NOT_FOUND'');');
   add_body_line('         fnd_message.raise_error;');
   add_body_line('    END;');
   add_body_line('   BEGIN');
   add_body_line('     SELECT count(*)');
   add_body_line('       INTO l_exists');
   add_body_line('       FROM per_ent_security_groups');
   add_body_line('      WHERE enterprise_label = l_security_label');
   add_body_line('        AND enabled_flag = ''Y'';');
   add_body_line('     IF l_exists <> 0 THEN');
   add_body_line('       set_context(l_security_label);');
   add_body_line('     ELSE');
   add_body_line('         fnd_message.set_name (''PER'',''PER_ENTERPRISE_NOT_FOUND'');');
   add_body_line('         fnd_message.raise_error;');
   add_body_line('     END IF;');
   add_body_line('   END;');
   add_body_line('  END set_context_for_enterprise;');
   add_body_line('--');
   add_body_line('--------------------------------------------------------------------');
   add_body_line('--< is_valid_sec_group >--------------------------------------------');
   add_body_line('--------------------------------------------------------------------');
   add_body_line('--');
   add_body_line('-- Description:');
   add_body_line('--    This is a public function which Returns Y/N if ');
   add_body_line('--    it is a valid security group');
   add_body_line('--');
   add_body_line('-- Arguments');
   add_body_line('--   p_security_group_id => security group id');
   add_body_line('--   p_business_group_id => id of the selected business group.');
   add_body_line('--');
   add_body_line('');
   add_body_line('FUNCTION is_valid_sec_group (p_security_group_id   IN NUMBER');
   add_body_line('                            ,p_business_group_id   IN NUMBER) RETURN VARCHAR2 AS');
   add_body_line('							');
   add_body_line('    l_result                   VARCHAR2(1);');
   add_body_line('BEGIN');
   add_body_line('  IF NOT is_multi_tenant_system THEN');
   add_body_line('     RETURN ''N'';');
   add_body_line('  END IF;');
   add_body_line('    ');
   add_body_line('  BEGIN');
   add_body_line('    SELECT  ''Y''');
   add_body_line('      INTO  l_result');
   add_body_line('      FROM  per_ent_security_groups');
   add_body_line('     WHERE  security_group_id = p_security_group_id ');
   add_body_line('       AND  business_group_id = p_business_group_id  ');
   add_body_line('	 AND  enabled_flag = ''Y''; ');
   add_body_line('  EXCEPTION');
   add_body_line('      WHEN others THEN');
   add_body_line('        l_result := ''N'';');
   add_body_line('  END;');
   add_body_line('    RETURN l_result;');
   add_body_line('END is_valid_sec_group;');
   add_body_line('');
   add_body_line('--');
   add_body_line('--------------------------------------------------------------------');
   add_body_line('--< get_org_id_for_person >-----------------------------------------');
   add_body_line('--------------------------------------------------------------------');
   add_body_line('--');
   add_body_line('-- Description:');
   add_body_line('--    Used IN SSHR to derive the security group from person  ');
   add_body_line('--    i.e. (Notifications/Workflow)');
   add_body_line('--');
   add_body_line('-- Arguments');
   add_body_line('--   p_person_id => id of the selected person');
   add_body_line('--');
   add_body_line('');
   add_body_line('FUNCTION get_org_id_for_person (p_person_id           IN NUMBER) RETURN NUMBER AS');
   add_body_line('');
   add_body_line('    label_query               VARCHAR2(1000) :=');
   add_body_line('      ''SELECT   LABEL_TO_CHAR(HR_ENTERPRISE) ENT_LABEL, BUSINESS_GROUP_ID '' ||');
   add_body_line('      ''  FROM   PER_ALL_PEOPLE_F '' ||');
   add_body_line('      '' WHERE   PERSON_ID = :1 '' ||');
   add_body_line('      ''   AND   ROWNUM < 2'';');
   add_body_line('    l_security_label          VARCHAR2(4000);');
   add_body_line('    l_business_group_id       NUMBER;');
   add_body_line('    l_organization_id         NUMBER;');
   add_body_line('BEGIN');
   add_body_line('    BEGIN');
   add_body_line('      EXECUTE IMMEDIATE label_query');
   add_body_line('              INTO l_security_label, l_business_group_id');
   add_body_line('              USING IN p_person_id;');
   add_body_line('      ');
   add_body_line('      IF (l_security_label IS NOT NULL AND');
   add_body_line('         l_security_label = ''C::ENT'' )');
   add_body_line('      OR l_security_label IS NULL THEN');
   add_body_line(' ');
   add_body_line('        BEGIN');
   add_body_line('          SELECT business_group_id ');
   add_body_line('            INTO l_organization_id ');
   add_body_line('            FROM per_all_people_f');
   add_body_line('           WHERE person_id = p_person_id');
   add_body_line('             AND rownum < 2;');
   add_body_line('          RETURN l_organization_id;');
   add_body_line('       EXCEPTION ');
   add_body_line('         WHEN NO_DATA_FOUND THEN');
   add_body_line('           RETURN -1;');
   add_body_line('       END;');
   add_body_line('      END IF;');
   add_body_line('      SELECT      organization_id');
   add_body_line('        INTO      l_organization_id');
   add_body_line('        FROM      per_ent_security_groups');
   add_body_line('       WHERE      business_group_id = l_business_group_id ');
   add_body_line('         AND      enterprise_label = substrb(l_security_label,4) ');
   add_body_line('	   AND      enabled_flag = ''Y'';');
   add_body_line('      ');
   add_body_line('      RETURN l_organization_id;');
   add_body_line('    EXCEPTION');
   add_body_line('      WHEN no_data_found THEN');
   add_body_line('        RETURN -1;');
   add_body_line('    END;');
   add_body_line('END get_org_id_for_person;');
   add_body_line('');
   add_body_line('   --');
   add_body_line('   --------------------------------------------------------------------');
   add_body_line('   --< get_org_id_for_person >-----------------------------------------');
   add_body_line('   --------------------------------------------------------------------');
   add_body_line('   --');
   add_body_line('   -- Description:');
   add_body_line('   --    Used IN SSHR to derive the security group from person  ');
   add_body_line('   --    i.e. (Notifications/Workflow)');
   add_body_line('   --  Get OrganizationId FROM LoginPersonId AND SelectedBusinessGroupId');
   add_body_line('   --');
   add_body_line('   -- Arguments');
   add_body_line('   --   p_person_id => id of the selected person');
   add_body_line('   --   p_business_group_id => business group id');
   add_body_line('');
   add_body_line('FUNCTION get_org_id_for_person (p_person_id           IN NUMBER');
   add_body_line('                               ,p_business_group_id   IN NUMBER) RETURN NUMBER AS');
   add_body_line('							   ');
   add_body_line('   label_query                VARCHAR2(1000) :=');
   add_body_line('     ''SELECT LABEL_TO_CHAR(HR_ENTERPRISE) ENT_LABEL '' ||');
   add_body_line('     ''  FROM PER_ALL_PEOPLE_F '' ||');
   add_body_line('     '' WHERE PERSON_ID = :1 '' ||');
   add_body_line('     ''   AND ROWNUM < 2'';');
   add_body_line('   l_security_label          VARCHAR2(4000);');
   add_body_line('   l_organization_id         NUMBER;');
   add_body_line('   l_count                   NUMBER := 0;');
   add_body_line('  BEGIN');
   add_body_line('    BEGIN');
   add_body_line('      EXECUTE IMMEDIATE label_query');
   add_body_line('         INTO l_security_label');
   add_body_line('        USING IN p_person_id;');
   add_body_line('    EXCEPTION');
   add_body_line('      WHEN no_data_found THEN');
   add_body_line('        RETURN -1;');
   add_body_line('    END;');
   add_body_line('    IF l_security_label = ''C::ENT'' THEN');
   add_body_line('      RETURN p_business_group_id;');
   add_body_line('    ELSE      ');
   add_body_line('      BEGIN');
   add_body_line('        SELECT organization_id');
   add_body_line('          INTO l_organization_id');
   add_body_line('          FROM per_ent_security_groups');
   add_body_line('         WHERE business_group_id = p_business_group_id ');
   add_body_line('           AND enterprise_label = substrb(l_security_label,4)');
   add_body_line('           AND enabled_flag = ''Y'';');
   add_body_line('        RETURN l_organization_id;');
   add_body_line('      EXCEPTION');
   add_body_line('        WHEN no_data_found THEN');
   add_body_line('          RETURN -1;');
   add_body_line('    END;');
   add_body_line('    END IF;');
   add_body_line('END get_org_id_for_person;');
   add_body_line('');
   add_body_line('--');
   add_body_line('--------------------------------------------------------------------');
   add_body_line('--< get_org_id_from_bg_and_sl >-------------------------------------');
   add_body_line('--------------------------------------------------------------------');
   add_body_line('--');
   add_body_line('-- Description:');
   add_body_line('--   Called From PerAppModuleHelper');
   add_body_line('--   to get orgid from BG and security label');
   add_body_line('--');
   add_body_line('-- Arguments');
   add_body_line('--   p_business_group_id => id of the selected business group.');
   add_body_line('--   p_security_label => security label.');
   add_body_line('--');
   add_body_line('');
   add_body_line('FUNCTION get_org_id_from_bg_and_sl (p_business_group_id IN NUMBER');
   add_body_line('                                     ,p_security_label    IN VARCHAR2) RETURN NUMBER AS');
   add_body_line('   l_organization_id NUMBER;');
   add_body_line('  BEGIN');
   add_body_line('    SELECT organization_id');
   add_body_line('      INTO l_organization_id');
   add_body_line('      FROM per_ent_security_groups');
   add_body_line('     WHERE business_group_id = p_business_group_id');
   add_body_line('       AND enterprise_label = p_security_label');
   add_body_line('       AND enabled_flag = ''Y'';');
   add_body_line('    RETURN l_organization_id;');
   add_body_line('  EXCEPTION ');
   add_body_line('    WHEN no_data_found THEN');
   add_body_line('      RETURN p_business_group_id;');
   add_body_line('  END get_org_id_from_bg_and_sl;');
   add_body_line('');
   add_body_line(' --');
   add_body_line(' --------------------------------------------------------------------');
   add_body_line(' --< get_corporate_branding >-------------------------------------');
   add_body_line(' --------------------------------------------------------------------');
   add_body_line(' --');
   add_body_line(' -- Description:');
   add_body_line(' --    Gets the corporate branding for the passed/current enterprise.');
   add_body_line(' --    ');
   add_body_line(' -- Called From');
   add_body_line(' --    1. HRApplicationModuleImpl.java without argument');
   add_body_line(' --    2. MTHomeAMImpl.java with argument.');
   add_body_line(' -- Arguments');
   add_body_line(' --   p_organization_id => organization id of the current enterprise');
   add_body_line(' --');
   add_body_line('');
   add_body_line('FUNCTION get_corporate_branding (p_organization_id VARCHAR2 default NULL) RETURN VARCHAR2 AS');
   add_body_line('    l_security_group_id NUMBER; ');
   add_body_line('    l_profile_value     VARCHAR2(240);');
   add_body_line('');
   add_body_line('--');
   add_body_line('-- The lookup code for corporate branding is 1');
   add_body_line('--');
   add_body_line('    CURSOR csr_profile_value (p_security_group_id NUMBER) IS');
   add_body_line('      SELECT description ');
   add_body_line('        FROM fnd_lookup_values');
   add_body_line('       WHERE security_group_id = p_security_group_id');
   add_body_line('         AND lookup_type = ''PER_MT_VALUES''');
   add_body_line('         AND meaning = ''FND_CORPORATE_BRANDING_IMAGE''');
   add_body_line('         AND enabled_flag = ''Y''');
   add_body_line('         AND language = userenv(''LANG'')');
   add_body_line('         AND sysdate between nvl(start_date_active, hr_api.g_sot)');
   add_body_line('         AND nvl(end_date_active, hr_api.g_eot);');
   add_body_line('BEGIN');
   add_body_line('  IF p_organization_id IS NULL THEN');
   add_body_line('     l_security_group_id := fnd_global.security_group_id;');
   add_body_line('  ELSE');
   add_body_line('    SELECT  security_group_id ');
   add_body_line('      INTO  l_security_group_id');
   add_body_line('      FROM  per_ent_security_groups');
   add_body_line('     WHERE  to_char(organization_id) = p_organization_id;');
   add_body_line('  END IF;');
   add_body_line('      OPEN csr_profile_value(l_security_group_id);');
   add_body_line('      FETCH csr_profile_value INTO l_profile_value;');
   add_body_line('      IF csr_profile_value%notfound THEN');
   add_body_line('        CLOSE csr_profile_value;');
   add_body_line('        OPEN csr_profile_value(0);');
   add_body_line('        FETCH csr_profile_value INTO l_profile_value;');
   add_body_line('        CLOSE csr_profile_value;');
   add_body_line('      END IF;       ');
   add_body_line('');
   add_body_line('      RETURN l_profile_value;');
   add_body_line('END get_corporate_branding;');
   add_body_line('');
   add_body_line('--');
   add_body_line('--------------------------------------------------------------------');
   add_body_line('--< get_bus_grp_from_sec_grp >-------------------------------------');
   add_body_line('--------------------------------------------------------------------');
   add_body_line('--');
   add_body_line('-- Description:');
   add_body_line('--    Called from HR_SIGNON to RETURN the business group corresponding');
   add_body_line('--    to the enterprise security group for buisness group initialization.    ');
   add_body_line('--');
   add_body_line('-- Called From');
   add_body_line('--    1. HR_SIGNON ');
   add_body_line('-- Arguments');
   add_body_line('--   p_security_group_id => security group id of the current enterprise');
   add_body_line('--');
   add_body_line('FUNCTION get_bus_grp_from_sec_grp (p_security_group_id  IN NUMBER) RETURN NUMBER AS');
   add_body_line('    l_business_group_id      NUMBER;');
   add_body_line('BEGIN');
   add_body_line('  SELECT business_group_id');
   add_body_line('    INTO l_business_group_id');
   add_body_line('    FROM per_ent_security_groups');
   add_body_line('   WHERE security_group_id = p_security_group_id');
   add_body_line('     AND enabled_flag = ''Y'';');
   add_body_line('');
   add_body_line('    RETURN l_business_group_id;');
   add_body_line('EXCEPTION');
   add_body_line('   WHEN no_data_found THEN');
   add_body_line('     RETURN NULL;    ');
   add_body_line('END get_bus_grp_from_sec_grp;');
   add_body_line('');
   add_body_line('--');
   add_body_line('--------------------------------------------------------------------');
   add_body_line('--< set_security_group_id >-------------------------------------');
   add_body_line('--------------------------------------------------------------------');
   add_body_line('--');
   add_body_line('-- Description:');
   add_body_line('--     Called from HR_API to set proper security group.   ');
   add_body_line('--');
   add_body_line('--     Called From');
   add_body_line('--        1. HR_API ');
   add_body_line('-- Arguments');
   add_body_line('--   p_security_group_id => security group id of the current enterprise');
   add_body_line('--');
   add_body_line('PROCEDURE set_security_group_id (p_security_group_id   IN NUMBER) AS ');
   add_body_line('    l_business_group_id       NUMBER;');
   add_body_line('    l_security_group_id       NUMBER;');
   add_body_line('    CURSOR csr_sec_grp_for_bus_grp (p_business_group_id NUMBER) IS');
   add_body_line('      SELECT security_group_id');
   add_body_line('        FROM per_ent_security_groups');
   add_body_line('       WHERE business_group_id = p_business_group_id');
   add_body_line('         AND enabled_flag = ''Y'';');
   add_body_line('BEGIN');
   add_body_line('  SELECT business_group_id');
   add_body_line('    INTO l_business_group_id');
   add_body_line('    FROM per_business_groups');
   add_body_line('   WHERE security_group_id = p_security_group_id;');
   add_body_line('');
   add_body_line('    OPEN csr_sec_grp_for_bus_grp');
   add_body_line('      (p_business_group_id => l_business_group_id);');
   add_body_line('');
   add_body_line('    LOOP');
   add_body_line('      FETCH csr_sec_grp_for_bus_grp INTO l_security_group_id;');
   add_body_line('');
   add_body_line('      IF csr_sec_grp_for_bus_grp%found THEN');
   add_body_line('        IF l_security_group_id = fnd_global.security_group_id THEN');
   add_body_line('          CLOSE csr_sec_grp_for_bus_grp;');
   add_body_line('          RETURN;');
   add_body_line('        END IF;');
   add_body_line('      ELSE');
   add_body_line('	EXIT;');
   add_body_line('      END IF;');
   add_body_line('    END LOOP;');
   add_body_line('    CLOSE csr_sec_grp_for_bus_grp;');
   add_body_line('');
   add_body_line('    -- This has been modified to be in sync with SSHR fix ');
   add_body_line('    -- in hr_api.set_security_group_id. ');
   add_body_line('    --fnd_global.set_security_group_id_context(p_security_group_id);	');
   add_body_line('    fnd_client_info.set_security_group_context(p_security_group_id);');
   add_body_line('END set_security_group_id;');
   add_body_line('');
   add_body_line('--');
   add_body_line('--------------------------------------------------------------------');
   add_body_line('--< add_language >--------------------------------------------------');
   add_body_line('--------------------------------------------------------------------');
   add_body_line('--');
   add_body_line('-- Description:');
   add_body_line('--     Updates TL table');
   add_body_line('--');
   add_body_line('-- Arguments');
   add_body_line('--     None');
   add_body_line('--');
   add_body_line('PROCEDURE add_language IS');
   add_body_line('    CURSOR csr_ent_data_groups IS');
   add_body_line('    SELECT pet.enterprise_id');
   add_body_line('          ,pet.enterprise_name');
   add_body_line('          ,pet.description');
   add_body_line('          ,pet.source_lang');
   add_body_line('          ,pet.created_by');
   add_body_line('          ,pet.creation_date');
   add_body_line('      FROM per_enterprises_tl pet');
   add_body_line('     WHERE pet.language = userenv(''LANG'');');
   add_body_line('   ');
   add_body_line('     CURSOR csr_ins_langs (c_enterprise_id NUMBER) IS');
   add_body_line('    SELECT l.language_code');
   add_body_line('      FROM fnd_languages l');
   add_body_line('     WHERE l.installed_flag IN (''I'',''B'')');
   add_body_line('       AND NOT EXISTS (SELECT NULL');
   add_body_line('                         FROM per_enterprises_tl pet');
   add_body_line('                        WHERE pet.enterprise_id = c_enterprise_id');
   add_body_line('                          AND pet.language = l.language_code);');
   add_body_line('  --');
   add_body_line('  BEGIN');
   add_body_line('   --');
   add_body_line('   DELETE FROM per_enterprises_tl t');
   add_body_line('     WHERE NOT EXISTS');
   add_body_line('     (  SELECT NULL');
   add_body_line('          FROM per_enterprises b');
   add_body_line('         WHERE b.enterprise_id = t.enterprise_id');
   add_body_line('     );');
   add_body_line('');
   add_body_line('   UPDATE per_enterprises_tl t');
   add_body_line('      SET ( enterprise_name,');
   add_body_line('            description ) =');
   add_body_line('             ( SELECT b.enterprise_name,');
   add_body_line('                      b.description');
   add_body_line('                 FROM per_enterprises_tl b');
   add_body_line('                WHERE b.enterprise_id = t.enterprise_id');
   add_body_line('                  AND   b.language = t.source_lang       )');
   add_body_line('     WHERE ( t.enterprise_id,');
   add_body_line('             t.language');
   add_body_line('	   ) IN');
   add_body_line('        ( SELECT subt.enterprise_id,');
   add_body_line('                 subt.language');
   add_body_line('            FROM per_enterprises_tl subb, per_enterprises_tl subt');
   add_body_line('           WHERE subb.enterprise_id = subt.enterprise_id');
   add_body_line('             AND subb.language = subt.source_lang');
   add_body_line('             AND ( subb.enterprise_name <> subt.enterprise_name');
   add_body_line('              OR    subb.description <> subt.description');
   add_body_line('              OR    (subb.description IS NULL AND subt.description IS NOT NULL)');
   add_body_line('              OR    (subb.description IS NOT NULL AND subt.description IS NULL)');
   add_body_line('		  )');
   add_body_line('	);');
   add_body_line('   --');
   add_body_line('  --');
   add_body_line('   FOR l_ent_data_group IN csr_ent_data_groups LOOP');
   add_body_line('     FOR l_lang IN csr_ins_langs(l_ent_data_group.enterprise_id) LOOP');
   add_body_line('       INSERT INTO per_enterprises_tl');
   add_body_line('           (source_lang');
   add_body_line('           ,enterprise_id');
   add_body_line('           ,enterprise_name');
   add_body_line('           ,description');
   add_body_line('           ,language');
   add_body_line('           ,created_by');
   add_body_line('           ,creation_date');
   add_body_line('           ,last_updated_by');
   add_body_line('           ,last_update_date');
   add_body_line('      ) VALUES');
   add_body_line('           (l_ent_data_group.source_lang');
   add_body_line('           ,l_ent_data_group.enterprise_id');
   add_body_line('           ,l_ent_data_group.enterprise_name');
   add_body_line('           ,l_ent_data_group.description');
   add_body_line('           ,l_lang.language_code');
   add_body_line('           ,fnd_global.user_id');
   add_body_line('           ,sysdate');
   add_body_line('           ,fnd_global.user_id');
   add_body_line('           ,sysdate');
   add_body_line('           );    ');
   add_body_line('      END LOOP;');
   add_body_line('    END LOOP;');
   add_body_line('  --');
   add_body_line('  END add_language;');
   add_body_line('');
   add_body_line('END '||l_package_name ||';');
   add_header_line('END ' ||l_package_name||';');

   l_csr_sql := dbms_sql.open_cursor;
   dbms_sql.parse( l_csr_sql, l_header,0,l_header_line-1,FALSE, dbms_sql.v7 );
   l_rows := dbms_sql.EXECUTE( l_csr_sql );
   dbms_sql.close_cursor( l_csr_sql );

   l_csr_sql := dbms_sql.open_cursor;
   dbms_sql.parse( l_csr_sql, l_body,0,l_body_line-1,FALSE, dbms_sql.v7 );
   l_rows := dbms_sql.EXECUTE( l_csr_sql );
   dbms_sql.close_cursor( l_csr_sql );

   l_header_line   :=0;
   l_body_line   :=0;

   --
   -- Create or replace the hr_multi_tenant_install package
   --

   l_package_name  := 'hr_multi_tenant_install';
   add_header_line('CREATE OR REPLACE PACKAGE '||l_package_name||' AS ');
   add_body_line('CREATE OR REPLACE PACKAGE BODY '||l_package_name||' AS ');
   add_header_line('--Code generated on '||to_char(sysdate,'DD/MM/YYYY HH:MI:SS'));
   add_header_line('/'||'* $Header: pemtstup.pkb 120.0.12010000.20 2008/11/24 10:27:27 bchakrab noship*'||'/');
   add_body_line('--Code generated on '||to_char(sysdate,'DD/MM/YYYY HH:MI:SS'));
   add_body_line('/'||'* $Header: pemtstup.pkb  *'||'/');


   add_header_line('--');
   add_header_line('-- Name');
   add_header_line('--   initialize_orgs');
   add_header_line('--');
   add_header_line('-- Purpose');
   add_header_line('--    This procedure is called by the concurrent program');
   add_header_line('--    Setup Enterprise for Multi Tenancy.This procedure attaches the ');
   add_header_line('--    the enterprise label with the organization specified as parameters');
   add_header_line('--');
   add_header_line('-- Arguments');
   add_header_line('--   errbuf and retcode.');
   add_header_line('--   p_enterprise_id   => This specifies the Id of the defined enterprise');
   add_header_line('--   p_organization_id => This specifies the Id of the organization ');
   add_header_line('--                        that is classified as enterprise                  ');
   add_header_line('--');
   add_header_line(' ');
   add_header_line('PROCEDURE initialize_orgs (errbuf              OUT  NOCOPY  VARCHAR2');
   add_header_line('                          ,retcode             OUT  NOCOPY  NUMBER');
   add_header_line('                          ,p_enterprise_id     IN           NUMBER');
   add_header_line('                          ,p_organization_id   IN           NUMBER);');
   add_header_line(' ');
   add_header_line('--');
   add_header_line('-- Name');
   add_header_line('--   master_process');
   add_header_line('--');
   add_header_line('-- Purpose');
   add_header_line('--    This procedure is called by the concurrent program');
   add_header_line('--    Setup Multi Tenancy for Database Objects.This concurrent program');
   add_header_line('--    spawns child processes in batches of size less or equalt to 100. ');
   add_header_line('--');
   add_header_line('-- Arguments');
   add_header_line('--   errbuf and retcode.');
   add_header_line('--   install_mode    => The valid values are USER_TABLE and SCHEMA. This');
   add_header_line('--                     specifies the mode of applying policy i.e whether on ');
   add_header_line('--                     all tables in the schema or on the tables listed');
   add_header_line('--                     in the user table.');
   add_header_line('--                     ');
   add_header_line('--   population_size => This specifies the batch size of the spawning child ');
   add_header_line('--                      processes. The default batch size is 100                  ');
   add_header_line('--');
   add_header_line(' ');
   add_header_line('procedure master_process');
   add_header_line('    (errbuf          out nocopy varchar2');
   add_header_line('    ,retcode         out nocopy number');
   add_header_line('    ,install_mode    in varchar2');
   add_header_line('    ,population_size in number default 100);');
   add_header_line('');
   add_header_line('');
   add_header_line('--');
   add_header_line('-- Name');
   add_header_line('--   child_process');
   add_header_line('--');
   add_header_line('-- Purpose');
   add_header_line('--    This procedure is called by the concurrent program');
   add_header_line('--    Setup Multi Tenancy for Database Objects as a spawned');
   add_header_line('--    child processes in batches of size less or equalt to 100. ');
   add_header_line('--');
   add_header_line('-- Arguments');
   add_header_line('--   errbuf and retcode.');
   add_header_line('--   install_mode     => The valid values are USER_TABLE and SCHEMA. This');
   add_header_line('--                       specifies the mode of applying policy i.e whether on ');
   add_header_line('--                       all tables in the schema or on the tables listed');
   add_header_line('--                       in the user table.');
   add_header_line('--                     ');
   add_header_line('--   population_size  => This specifies the batch size of the spawning child ');
   add_header_line('--                       processes.                  ');
   add_header_line('--  ');
   add_header_line('--   population_start => This is the starting count of the batch');
   add_header_line('--   population_end   => This is the ending count of the batch');
   add_header_line('--');
   add_header_line('--');
   add_header_line('');
   add_header_line('  procedure child_process ');
   add_header_line('    (errbuf          out nocopy varchar2');
   add_header_line('    ,retcode         out nocopy number');
   add_header_line('    ,install_mode      in varchar2');
   add_header_line('    ,population_size   in number');
   add_header_line('    ,population_start  in number');
   add_header_line('    ,population_end    in number); ');

   add_body_line('');
   add_body_line('--');
   add_body_line('-- Variable declarations');
   add_body_line('--');
   add_body_line(' l_body_line       NUMBER:=0;');
   add_body_line(' l_body            DBMS_SQL.VARCHAR2S;');
   add_body_line(' l_csr_sql         NUMBER;');
   add_body_line(' l_rows            NUMBER;');
   add_body_line('');
   add_body_line('-----------------------------------------------------------------------');
   add_body_line('-----------------------------------------------------------------------');
   add_body_line('-- PRIVATE FUNCTIONS');
   add_body_line('-----------------------------------------------------------------------');
   add_body_line('-----------------------------------------------------------------------');
   add_body_line('');
   add_body_line('--');
   add_body_line('--------------------------------------------------------------------');
   add_body_line('--< CREATE_SEC_GROUP_FOR_ENT >--------------------------------------');
   add_body_line('--------------------------------------------------------------------');
   add_body_line('--');
   add_body_line('-- Description:');
   add_body_line('--    This procedure accepts the organization id,');
   add_body_line('--    business group id, security label and enterprise id');
   add_body_line('--    and creates the necessary back end housekeeping for the organization');
   add_body_line('--    to be defined as enterprise.');
   add_body_line('--');
   add_body_line('-- Arguments:');
   add_body_line('--    p_organization_id   => Id of the organization to be defined as enterprise');
   add_body_line('--    p_business_group_id => Business Group Id of the organization');
   add_body_line('--    p_security_label    => label of the enterprise');
   add_body_line('--    p_enterprise_id     => id of the enterprise');
   add_body_line('--');
   add_body_line('');
   add_body_line('PROCEDURE create_sec_group_for_ent (p_organization_id        IN NUMBER');
   add_body_line('                                   ,p_business_group_id      IN NUMBER');
   add_body_line('                                   ,p_security_label         IN VARCHAR2');
   add_body_line('                                   ,p_enterprise_id          IN NUMBER  ) IS');
   add_body_line('');
   add_body_line('   CURSOR c_sg_enabled IS');
   add_body_line('     SELECT ''Y''');
   add_body_line('     FROM   fnd_profile_options         fpo');
   add_body_line('           ,fnd_profile_option_values   pov');
   add_body_line('     WHERE  fpo.profile_option_name = ''ENABLE_SECURITY_GROUPS'' AND');
   add_body_line('            fpo.profile_option_id = pov.profile_option_id      AND');
   add_body_line('		    fpo.application_id = pov.application_id            AND');
   add_body_line('		    pov.level_id = 10002                               AND');
   add_body_line('		    pov.profile_option_value = ''Y''                     AND');
   add_body_line('		    to_number(pov.level_value) BETWEEN 800 AND 900;');
   add_body_line('');
   add_body_line('    CURSOR c_sec_grp_name_curs(p_sec_name VARCHAR2) IS');
   add_body_line('      SELECT substrb(security_group_name, 1, 80), security_group_id');
   add_body_line('      FROM   fnd_security_groups_vl');
   add_body_line('      WHERE  substrb(security_group_name, 1, 80)= p_sec_name;');
   add_body_line('');
   add_body_line('    l_security_group_name  hr_all_organization_units.name%type;');
   add_body_line('    l_exists               VARCHAR2(1)  DEFAULT NULL;');
   add_body_line('    l_sg_enabled           BOOLEAN      DEFAULT FALSE;');
   add_body_line('    l_sec_length           NUMBER;');
   add_body_line('    l_security_group_id    NUMBER;');
   add_body_line('    l_ent_name             VARCHAR2(80);');
   add_body_line('    l_sg_name              VARCHAR2(80);');
   add_body_line('    l_out_status           VARCHAR2(30);');
   add_body_line('    l_out_industry         VARCHAR2(30);');
   add_body_line('    l_owner                VARCHAR2(30);');
   add_body_line('    l_value                BOOLEAN;');
   add_body_line('  BEGIN');
   add_body_line('--');
   add_body_line('-- Check if security groups are enabled in the instance');
   add_body_line('--');
   add_body_line('    OPEN c_sg_enabled;');
   add_body_line('    FETCH c_sg_enabled INTO l_exists;');
   add_body_line('    IF c_sg_enabled%FOUND THEN');
   add_body_line('       l_sg_enabled := TRUE;');
   add_body_line('    ELSE');
   add_body_line('      l_sg_enabled := FALSE;');
   add_body_line('    END IF;');
   add_body_line('    CLOSE c_sg_enabled;');
   add_body_line('    IF l_sg_enabled THEN');
   add_body_line('--');
   add_body_line('-- Fetch the corresponding security group name of the organization.');
   add_body_line('--');
   add_body_line('       SELECT substrb(hou.name,1,80)');
   add_body_line('       INTO   l_security_group_name');
   add_body_line('       FROM   hr_all_organization_units hou');
   add_body_line('       WHERE  hou.organization_id = p_organization_id;');
   add_body_line('');
   add_body_line('--');
   add_body_line('-- Fetch the security_group_id');
   add_body_line('--');
   add_body_line('	   OPEN  c_sec_grp_name_curs(l_security_group_name);');
   add_body_line('      FETCH c_sec_grp_name_curs INTO l_sg_name, l_security_group_id;');
   add_body_line('      IF  c_sec_grp_name_curs%found THEN');
   add_body_line('          CLOSE c_sec_grp_name_curs;');
   add_body_line('--');
   add_body_line('-- This is an error condition in Model 2(PEO).');
   add_body_line('--');
   add_body_line('          IF hr_multi_tenancy_pkg.get_system_model = ''P'' THEN');
   add_body_line('              hr_utility.set_message(800, ''PER_289704_80CHAR_MATCH_SG'');');
   add_body_line('              hr_utility.raise_error;');
   add_body_line('          END IF;    ');
   add_body_line('      ELSE');
   add_body_line('            CLOSE c_sec_grp_name_curs;');
   add_body_line('--');
   add_body_line('-- This is an error condition in Model 1 (BPO)');
   add_body_line('--');
   add_body_line('            IF hr_multi_tenancy_pkg.get_system_model = ''B'' THEN');
   add_body_line('               hr_utility.set_message(800, ''PER_OLS_SETUP_ERROR'');');
   add_body_line('               hr_utility.raise_error;');
   add_body_line('            END IF;');
   add_body_line('--');
   add_body_line('-- Create a new security group for this organization');
   add_body_line('--');
   add_body_line('            l_security_group_id := fnd_security_groups_api.create_group (security_group_key   => to_char(p_organization_id)');
   add_body_line('                                                                        ,security_group_name  => l_security_group_name');
   add_body_line('                                                                        ,description          => '' '');');
   add_body_line('      END IF;');
   add_body_line('--');
   add_body_line('-- Make an entry in the table for this organization');
   add_body_line('--');
   add_body_line('BEGIN');
   add_body_line('             EXECUTE IMMEDIATE ''INSERT INTO per_ent_security_groups ');
   add_body_line('                    (enterprise_id');
   add_body_line('                    ,organization_id');
   add_body_line('                    ,enterprise_label');
   add_body_line('                    ,business_group_id');
   add_body_line('                    ,security_group_id');
   add_body_line('                    ,enabled_flag');
   add_body_line('                    ,hr_enterprise)');
   add_body_line('             VALUES  (:1, :2, :3, :4, :5, ''''Y'''', char_to_label(''''HR_ENTERPRISE_POLICY'''', :6))'' ');
   add_body_line('             USING p_enterprise_id');
   add_body_line('                     ,p_organization_id');
   add_body_line('                     ,p_security_label');
   add_body_line('                     ,p_business_group_id');
   add_body_line('                     ,l_security_group_id');
   add_body_line('                     ,''C::'' || p_security_label;');
   add_body_line('EXCEPTION');
   add_body_line('  WHEN OTHERS THEN');
   add_body_line(' fnd_file.put_line (fnd_file.log');
   add_body_line('                            ,''Cannot map Security Group for this enterprise '');');
   add_body_line('END;');
   add_body_line('    ELSE');
   add_body_line('         fnd_file.put_line (fnd_file.log');
   add_body_line('                          ,''Security Group Not enabled: '');');
   add_body_line('       ');
   add_body_line('    END IF;');
   add_body_line('END create_sec_group_for_ent;');
   add_body_line('');
   add_body_line('--');
   add_body_line('-----------------------------------------------------------------------');
   add_body_line('-----------------------------------------------------------------------');
   add_body_line('-- PUBLIC FUNCTIONS');
   add_body_line('-----------------------------------------------------------------------');
   add_body_line('-----------------------------------------------------------------------');
   add_body_line('--');
   add_body_line('-----------------------------------------------------------------------');
   add_body_line('--< initialize_orgs >--------------------------------------------------');
   add_body_line('-----------------------------------------------------------------------');
   add_body_line('--');
   add_body_line('-- Description:');
   add_body_line('--    This procedure is called by the concurrent program');
   add_body_line('--    Setup Enterprise for Multi Tenancy.This procedure attaches the ');
   add_body_line('--    the enterprise label with the organization specified as parameters');
   add_body_line('--');
   add_body_line('-- Arguments');
   add_body_line('--   errbuf and retcode.');
   add_body_line('--   p_enterprise_id   => This specifies the Id of the defined enterprise');
   add_body_line('--   p_organization_id => This specifies the Id of the organization ');
   add_body_line('--                        that is classified as enterprise                  ');
   add_body_line('--');
   add_body_line('');
   add_body_line('PROCEDURE initialize_orgs  ( errbuf              OUT  NOCOPY  VARCHAR2');
   add_body_line('                           , retcode             OUT  NOCOPY  NUMBER');
   add_body_line('                           , p_enterprise_id     IN           NUMBER');
   add_body_line('                           , p_organization_id   IN           NUMBER) AS');
   add_body_line('   ');
   add_body_line('    TYPE bg_table IS TABLE OF VARCHAR2(256) INDEX BY BINARY_INTEGER;');
   add_body_line('    TYPE child_table_info IS');
   add_body_line('           RECORD (table_name varchar2(30), ');
   add_body_line('                   child_key_name varchar2(4000), ');
   add_body_line('                   master_table varchar2(30), ');
   add_body_line('                   master_key_name varchar2(4000));');
   add_body_line('    TYPE child_tables IS TABLE OF child_table_info INDEX BY BINARY_INTEGER;');
   add_body_line('');
   add_body_line('    init_master_tables    bg_table;');
   add_body_line('    init_table_name       VARCHAR2(256);');
   add_body_line('    init_child_tables     child_tables;');
   add_body_line('    l_org_info            VARCHAR2(1000);');
   add_body_line('    l_enterprise_name     VARCHAR2(30);');
   add_body_line('    l_long_name           VARCHAR2(80);');
   add_body_line('    l_group_number        NUMBER;');
   add_body_line('    l_is_business_group   BOOLEAN DEFAULT FALSE;');
   add_body_line('    l_business_group_id   NUMBER;');
   add_body_line('    l_lbl_value           NUMBER;');
   add_body_line('    l_company_label       VARCHAR2(150);');
   add_body_line('');
   add_body_line('BEGIN');
   add_body_line('  IF p_organization_id IS NOT NULL THEN');
   add_body_line('--');
   add_body_line('-- Fetch the businessgroup Id of the organization.');
   add_body_line('--');
   add_body_line('     BEGIN');
   add_body_line('--');
   add_body_line('-- Check if this is a business group.');
   add_body_line('--');
   add_body_line('       SELECT  business_group_id');
   add_body_line('         INTO  l_business_group_id');
   add_body_line('         FROM  hr_all_organization_units');
   add_body_line('        WHERE  organization_id = p_organization_id;');
   add_body_line('');
   add_body_line('      BEGIN');
   add_body_line('        SELECT 1');
   add_body_line('          INTO l_org_info');
   add_body_line('          FROM hr_organization_information');
   add_body_line('         WHERE org_information_context = ''CLASS''');
   add_body_line('           AND organization_id = p_organization_id');
   add_body_line('           AND org_information1 IN (''HR_BG'');');
   add_body_line('');
   add_body_line('        l_is_business_group := TRUE;');
   add_body_line('');
   add_body_line('      EXCEPTION');
   add_body_line('         WHEN no_data_found THEN');
   add_body_line('              l_is_business_group := FALSE;');
   add_body_line('      END;');
   add_body_line('--');
   add_body_line('-- Select the long name and the company label for this enterprise id');
   add_body_line('--');
   add_body_line('');
   add_body_line('        SELECT substr(enterprise_short_code,   1,   80)');
   add_body_line('              ,enterprise_label');
   add_body_line('         INTO l_long_name,l_company_label');
   add_body_line('          FROM per_enterprises');
   add_body_line('         WHERE enterprise_id = p_enterprise_id;');
   add_body_line('');
   add_body_line('        l_enterprise_name := substr(l_company_label, 1, 30);');
   add_body_line('');
   add_body_line('        fnd_file.put_line (fnd_file.log');
   add_body_line('                          ,''Creating Security Group : '' || l_enterprise_name);');
   add_body_line('        fnd_file.put_line (fnd_file.output');
   add_body_line('                          ,''Creating Security Group : '' || l_enterprise_name);');
   add_body_line('');
   add_body_line('--');
   add_body_line('-- In Model 2 (PEO) create a security group for this enterprise.');
   add_body_line('--');
   add_body_line('        create_sec_group_for_ent (p_organization_id      => p_organization_id');
   add_body_line('                                 ,p_business_group_id    => l_business_group_id');
   add_body_line('                                 ,p_security_label       => l_enterprise_name');
   add_body_line('                                 ,p_enterprise_id        => p_enterprise_id);');
   add_body_line('');
   add_body_line('        l_enterprise_name := ''C::'' || l_enterprise_name;');
   add_body_line('');
   add_body_line('        IF NOT l_is_business_group THEN');
   add_body_line('          fnd_file.put_line(fnd_file.log');
   add_body_line('                           ,''Initializing Control :Person Sequence'');');
   add_body_line('	 ');
   add_body_line('--');
   add_body_line('-- In model 2 make seperate entries in the PER_NUMBER_GENERATION_CONTROLS');
   add_body_line('-- for each enterprise');
   add_body_line('--');
   add_body_line('EXECUTE IMMEDIATE');
   add_body_line('       ''INSERT INTO per_number_generation_controls ');
   add_body_line('                      (type');
   add_body_line('					  ,business_group_id');
   add_body_line('					  ,next_value');
   add_body_line('					  ,hr_enterprise)');
   add_body_line('           VALUES (''''EMP''''');
   add_body_line('		          ,:1');
   add_body_line('				  ,1');
   add_body_line('				  ,char_to_label(''''HR_ENTERPRISE_POLICY'''', :2))''');
   add_body_line('           USING l_business_group_id');
   add_body_line('		         ,l_enterprise_name;');
   add_body_line('');
   add_body_line('EXECUTE IMMEDIATE');
   add_body_line('        ''INSERT INTO per_number_generation_controls ');
   add_body_line('                     (type');
   add_body_line('		    		  ,business_group_id');
   add_body_line('					  ,next_value');
   add_body_line('					  ,hr_enterprise)');
   add_body_line('               VALUES (''''APL''''');
   add_body_line('			          ,:1');
   add_body_line('					  ,1');
   add_body_line('					  ,char_to_label(''''HR_ENTERPRISE_POLICY''''');
   add_body_line('					  ,:2))''');
   add_body_line('               USING l_business_group_id');
   add_body_line('			         ,l_enterprise_name;');
   add_body_line('');
   add_body_line('EXECUTE IMMEDIATE');
   add_body_line('        ''INSERT INTO per_number_generation_controls ');
   add_body_line('                        (type');
   add_body_line('		    			,business_group_id');
   add_body_line('						,next_value');
   add_body_line('						,hr_enterprise)');
   add_body_line('               VALUES (''''CWK''''');
   add_body_line('			          ,:1');
   add_body_line('					  ,1');
   add_body_line('					  ,char_to_label(''''HR_ENTERPRISE_POLICY''''');
   add_body_line('					  ,:2))''');
   add_body_line('               USING l_business_group_id');
   add_body_line('			         ,l_enterprise_name;');
   add_body_line('');
   add_body_line('          fnd_file.put_line (fnd_file.log');
   add_body_line('                            ,''Completed Control: Person Sequence'');');
   add_body_line('        ELSE');
   add_body_line('          init_master_tables(1)  := ''PER_PERSON_TYPES'';');
   add_body_line('          init_master_tables(2)  := ''PER_NUMBER_GENERATION_CONTROLS'';');
   add_body_line('          init_master_tables(3)  := ''PER_SECURITY_PROFILES'';');
   add_body_line('          init_master_tables(4)  := ''PER_JOB_GROUPS'';');
   add_body_line('          init_master_tables(5)  := ''PAY_CONSOLIDATION_SETS'';');
   add_body_line('          init_master_tables(6)  := ''PAY_USER_COLUMN_INSTANCES_F'';');
   add_body_line('          init_master_tables(7)  := ''PER_SPECIAL_INFO_TYPES'';');
   add_body_line('          init_master_tables(8)  := ''PER_US_OSHA_NUMBERS'';');
   add_body_line('          init_master_tables(9)  := ''BEN_LER_F'';');
   add_body_line('          init_master_tables(10) := ''BEN_ACTN_TYP'';');
   add_body_line('          init_master_tables(11) := ''BEN_CM_TYP_F'';');
   add_body_line('          init_master_tables(12) := ''BEN_REGN_F'';');
   add_body_line('');
   add_body_line('          FOR t_index IN 1 .. init_master_tables.COUNT LOOP');
   add_body_line('            BEGIN');
   add_body_line('              init_table_name :=init_master_tables(t_index);');
   add_body_line('              EXECUTE IMMEDIATE ''UPDATE ''||init_table_name||''    ');
   add_body_line('                       SET    hr_enterprise = char_to_label(''''HR_ENTERPRISE_POLICY'''', :1)');
   add_body_line('                       WHERE    business_group_id = :2''');
   add_body_line('                 USING    l_enterprise_name');
   add_body_line('  			 ,l_business_group_id;');
   add_body_line('            EXCEPTION');
   add_body_line('               WHEN OTHERS THEN');
   add_body_line('                   fnd_file.put_line(fnd_file.log');
   add_body_line('    	                            ,''Error in updating:''||init_table_name);');
   add_body_line('            END;');
   add_body_line('          END LOOP;');
   add_body_line('');
   add_body_line('          init_child_tables(1).table_name        := ''PER_PERSON_TYPES_TL'';');
   add_body_line('          init_child_tables(1).child_key_name    := ''PERSON_TYPE_ID'';');
   add_body_line('          init_child_tables(1).master_table      := ''PER_PERSON_TYPES'';');
   add_body_line('          init_child_tables(1).master_key_name   := ''PERSON_TYPE_ID'';');
   add_body_line('');
   add_body_line('          init_child_tables(2).table_name        := ''PER_SPECIAL_INFO_TYPE_USAGES'';');
   add_body_line('          init_child_tables(2).child_key_name    := ''SPECIAL_INFORMATION_TYPE_ID'';');
   add_body_line('          init_child_tables(2).master_table      := ''PER_SPECIAL_INFO_TYPES'';');
   add_body_line('          init_child_tables(2).master_key_name   := ''SPECIAL_INFORMATION_TYPE_ID'';		  ');
   add_body_line('');
   add_body_line('          init_child_tables(3).table_name        := ''BEN_LER_F_TL'';');
   add_body_line('          init_child_tables(3).child_key_name    := ''LER_ID'';');
   add_body_line('          init_child_tables(3).master_table      := ''BEN_LER_F'';');
   add_body_line('          init_child_tables(3).master_key_name   := ''LER_ID'';');
   add_body_line('');
   add_body_line('          init_child_tables(4).table_name        := ''BEN_ACTN_TYP_TL'';');
   add_body_line('          init_child_tables(4).child_key_name    := ''ACTN_TYP_ID'';');
   add_body_line('          init_child_tables(4).master_table      := ''BEN_ACTN_TYP'';');
   add_body_line('          init_child_tables(4).master_key_name   := ''ACTN_TYP_ID'';');
   add_body_line('');
   add_body_line('          init_child_tables(5).table_name        := ''BEN_CM_TYP_F_TL'';');
   add_body_line('          init_child_tables(5).child_key_name    := ''CM_TYP_ID'';');
   add_body_line('          init_child_tables(5).master_table      := ''BEN_CM_TYP_F'';');
   add_body_line('          init_child_tables(5).master_key_name   := ''CM_TYP_ID'';');
   add_body_line('');
   add_body_line('          init_child_tables(6).table_name        := ''BEN_REGN_F_TL'';');
   add_body_line('          init_child_tables(6).child_key_name    := ''REGN_ID'';');
   add_body_line('          init_child_tables(6).master_table      := ''BEN_REGN_F'';');
   add_body_line('          init_child_tables(6).master_key_name   := ''REGN_ID'';');
   add_body_line('		  ');
   add_body_line('          FOR t_index IN 1 .. init_child_tables.count LOOP');
   add_body_line('            BEGIN');
   add_body_line('              EXECUTE IMMEDIATE ''UPDATE '' || init_child_tables(t_index).table_name ||');
   add_body_line('                                '' SET hr_enterprise = char_to_label(''''HR_ENTERPRISE_POLICY'''', :1)'' || ');
   add_body_line('                                '' WHERE '' ||  init_child_tables(t_index).child_key_name || '' IN '' || ');
   add_body_line('                                           '' (SELECT '' || init_child_tables(t_index).master_key_name || ');
   add_body_line('                                           '' FROM '' || init_child_tables(t_index).master_table ||');
   add_body_line('                                           '' WHERE business_group_id = :2)''');
   add_body_line('                USING l_enterprise_name');
   add_body_line('                     ,l_business_group_id;');
   add_body_line('            EXCEPTION ');
   add_body_line('                 WHEN OTHERS THEN');
   add_body_line('                      fnd_file.put_line(fnd_file.log');
   add_body_line('                                       ,''Error in updating:''||init_child_tables(t_index).table_name);');
   add_body_line('            END;');
   add_body_line('          END LOOP;');
   add_body_line('');
   add_body_line('        END IF;');
   add_body_line('        fnd_file.put_line(fnd_file.log');
   add_body_line('                         ,''Initializing Control: Enterprise Context'');');
   add_body_line('--');
   add_body_line('-- In model 1 update entries in the hr_all_organization_units for this enterprise');
   add_body_line('--');
   add_body_line('EXECUTE IMMEDIATE ''UPDATE hr_all_organization_units');
   add_body_line('                       SET    hr_enterprise = char_to_label(''''HR_ENTERPRISE_POLICY'''', :1)');
   add_body_line('                     WHERE  organization_id = :2''');
   add_body_line('                     USING l_enterprise_name');
   add_body_line('					       ,p_organization_id;');
   add_body_line('');
   add_body_line('             UPDATE hr_organization_information');
   add_body_line('                SET org_information1 = l_company_label');
   add_body_line('              WHERE organization_id = p_organization_id');
   add_body_line('                AND org_information_context = ''HR_ENTERPRISE_DETAILS'';');
   add_body_line('');
   add_body_line('--');
   add_body_line('-- In model 1 update entries in the hr_organization_information for this enterprise');
   add_body_line('--');
   add_body_line('EXECUTE IMMEDIATE ''UPDATE hr_organization_information');
   add_body_line('                      SET hr_enterprise = char_to_label(''''HR_ENTERPRISE_POLICY'''',:1 )');
   add_body_line('                    WHERE organization_id = :2''');
   add_body_line('                    USING l_enterprise_name');
   add_body_line('                         ,p_organization_id;');
   add_body_line('');
   add_body_line('--');
   add_body_line('-- In model 1 update entries in the hr_all_organization_units_tl for this enterprise');
   add_body_line('--');
   add_body_line('IF hr_multi_tenancy_pkg.get_system_model = ''B'' THEN');
   add_body_line('   EXECUTE IMMEDIATE ''UPDATE hr_all_organization_units_tl');
   add_body_line('                          SET hr_enterprise = char_to_label(''''HR_ENTERPRISE_POLICY'''',:1 )');
   add_body_line('                        WHERE organization_id = :2''');
   add_body_line('                        USING l_enterprise_name');
   add_body_line('                             ,p_organization_id;');
   add_body_line('END IF;');
   add_body_line('');
   add_body_line('        fnd_file.put_line(fnd_file.log');
   add_body_line('                         ,''Completed Control: Enterprise Context'');');
   add_body_line('');
   add_body_line('      EXCEPTION');
   add_body_line('        WHEN others THEN');
   add_body_line('            fnd_file.put_line(fnd_file.output');
   add_body_line('                             ,''Errored OUT :'' || sqlerrm);');
   add_body_line('            fnd_file.put_line(fnd_file.log');
   add_body_line('                              ,''Errored OUT : '' || sqlerrm);');
   add_body_line('');
   add_body_line('      END;');
   add_body_line('    ELSE');
   add_body_line('      fnd_file.put_line(fnd_file.output');
   add_body_line('                       ,''No organization selected :'');');
   add_body_line('      fnd_file.put_line(fnd_file.log');
   add_body_line('                       ,''No organization selected : '');');
   add_body_line('');
   add_body_line('    END IF;');
   add_body_line('    fnd_file.put_line(fnd_file.log');
   add_body_line('                     ,''Completed Organization Initialization'');');
   add_body_line('    fnd_file.put_line(fnd_file.output');
   add_body_line('                     ,''Completed Organization Initialization'');');
   add_body_line('END initialize_orgs;');
   add_body_line('--');
   add_body_line('--------------------------------------------------------------------');
   add_body_line('--< GET_SCHEMA >----------------------------------------------------');
   add_body_line('--------------------------------------------------------------------');
   add_body_line('--');
   add_body_line('-- Description:');
   add_body_line('--    This function will return the oracle user name for the');
   add_body_line('--    application short name passed as parameter.');
   add_body_line('--');
   add_body_line('--');
   add_body_line(' function get_schema ');
   add_body_line('    (p_app_short_name in varchar2) return varchar2 as');
   add_body_line('    l_schema_name varchar2(100);');
   add_body_line('    cursor c_schema(c_app_short_name varchar2) is');
   add_body_line('      select fou.oracle_username');
   add_body_line('        into l_schema_name');
   add_body_line('        from fnd_oracle_userid            fou');
   add_body_line('            ,fnd_product_installations    fpi');
   add_body_line('            ,fnd_application              fap');
   add_body_line('      where fou.oracle_id              = fpi.oracle_id');
   add_body_line('        and fpi.application_id         = fap.application_id');
   add_body_line('        and fap.application_short_name = c_app_short_name;');
   add_body_line('  begin');
   add_body_line('    open c_schema(p_app_short_name);');
   add_body_line('    fetch c_schema into l_schema_name;');
   add_body_line('    close c_schema;');
   add_body_line('    return l_schema_name;');
   add_body_line('');
   add_body_line('  end get_schema;');
   add_body_line('');
   add_body_line('--');
   add_body_line('--------------------------------------------------------------------');
   add_body_line('--< MASTER_PROCESS >------------------------------------------------');
   add_body_line('--------------------------------------------------------------------');
   add_body_line('--');
   add_body_line('-- Description:');
   add_body_line('--    This procedure is called by the concurrent program');
   add_body_line('--    Setup Multi Tenancy for Database Objects.This concurrent program');
   add_body_line('--    spawns child processes in batches of size less or equalt to 100. ');
   add_body_line('--');
   add_body_line(' ');
   add_body_line('procedure master_process');
   add_body_line('    (errbuf          out nocopy varchar2');
   add_body_line('    ,retcode         out nocopy number');
   add_body_line('    ,install_mode    in varchar2');
   add_body_line('    ,population_size in number default 100) as');
   add_body_line('    l_table_count     number;');
   add_body_line('    l_hr_name         varchar2(100);');
   add_body_line('    l_ota_name        varchar2(100);');
   add_body_line('    l_ben_name        varchar2(100);');
   add_body_line('    l_range           number;');
   add_body_line('    l_start           number;');
   add_body_line('    l_end             number;');
   add_body_line('    l_child_req_id    number;');
   add_body_line('    l_child_request_status boolean;');
   add_body_line('  begin');
   add_body_line('--');
   add_body_line('-- Fetch the schema names of the applications');
   add_body_line('-- that are intended to be OLS applied');
   add_body_line('--');
   add_body_line('    l_hr_name  := get_schema(''PER'');');
   add_body_line('    l_ben_name := get_schema(''BEN'');');
   add_body_line('    l_ota_name := get_schema(''OTA'');');
   add_body_line('');
   add_body_line('--');
   add_body_line('-- If install mode is SCHEMA then apply policy to all the tables');
   add_body_line('-- in the intended schemas. This is for Model 1 only. If the ');
   add_body_line('-- install mode is USERTABLE  then apply the policy only to tables listed');
   add_body_line('-- in the user table HR_OLS_TABLE_LIST');
   add_body_line('--');
   add_body_line('    if install_mode = ''SCHEMA'' then');
   add_body_line('      select count(*) ');
   add_body_line('        into l_table_count');
   add_body_line('        from all_tables');
   add_body_line('       where owner in (l_hr_name, l_ota_name, l_ben_name);');
   add_body_line('        sa_policy_admin.apply_schema_policy(');
   add_body_line('              policy_name  => ''HR_ENTERPRISE_POLICY''');
   add_body_line('             ,schema_name  => l_hr_name');
   add_body_line('             ,default_options => ''READ_CONTROL, LABEL_DEFAULT, HIDE'');');
   add_body_line('        sa_policy_admin.apply_schema_policy(');
   add_body_line('              policy_name  => ''HR_ENTERPRISE_POLICY''');
   add_body_line('             ,schema_name  => l_ota_name');
   add_body_line('             ,default_options => ''READ_CONTROL, LABEL_DEFAULT, HIDE'');');
   add_body_line('        sa_policy_admin.apply_schema_policy(');
   add_body_line('              policy_name  => ''HR_ENTERPRISE_POLICY''');
   add_body_line('             ,schema_name  => l_ben_name');
   add_body_line('             ,default_options => ''READ_CONTROL, LABEL_DEFAULT, HIDE'');');
   add_body_line('    elsif install_mode = ''USERTABLE'' then');
   add_body_line('      SELECT count(*) ');
   add_body_line('        into l_table_count');
   add_body_line('        FROM pay_user_rows_f');
   add_body_line('       WHERE user_table_id = (SELECT user_table_id');
   add_body_line('                                FROM pay_user_tables');
   add_body_line('                               WHERE user_table_name = ''HR_OLS_TABLE_LIST'');');
   add_body_line('    end if;');
   add_body_line('');
   add_body_line('    fnd_file.put_line(fnd_file.log, ''Total Tables : '' || l_table_count);');
   add_body_line('');
   add_body_line('    l_range := 0;');
   add_body_line('    loop');
   add_body_line('--');
   add_body_line('-- Spawn child processes in specified batch size ');
   add_body_line('--');
   add_body_line('      if l_range + population_size > l_table_count then');
   add_body_line('        l_start := l_range + 1;');
   add_body_line('        l_end   := l_table_count;');
   add_body_line('');
   add_body_line('        fnd_file.put_line(fnd_file.log, ''Submitting for range : '' || ');
   add_body_line('          to_char(l_start) || '' to '' || to_char(l_end));');
   add_body_line('');
   add_body_line('        l_child_req_id := fnd_request.submit_request');
   add_body_line('          (application  => ''PER''');
   add_body_line('          ,program      => ''HRMTOLSSLV''');
   add_body_line('          ,sub_request  => false');
   add_body_line('          ,argument1    => install_mode');
   add_body_line('          ,argument2    => population_size');
   add_body_line('          ,argument3    => l_start');
   add_body_line('          ,argument4    => l_end);');
   add_body_line('');
   add_body_line('        commit;');
   add_body_line('');
   add_body_line('        if l_child_req_id = 0 then');
   add_body_line('          fnd_file.put_line(fnd_file.log, ''Error in submitting child request'');');
   add_body_line('        else ');
   add_body_line('          fnd_file.put_line(fnd_file.log, ''Submitted child request: '' || l_child_req_id);');
   add_body_line('        end if;');
   add_body_line('');
   add_body_line('        exit;');
   add_body_line('      else');
   add_body_line('        l_start := l_range + 1;');
   add_body_line('        l_end   := l_range + population_size;');
   add_body_line('');
   add_body_line('        fnd_file.put_line(fnd_file.log, ''Submitting for range : '' || ');
   add_body_line('          to_char(l_start) || '' to '' || to_char(l_end));');
   add_body_line('');
   add_body_line('        l_child_req_id := fnd_request.submit_request');
   add_body_line('          (application  => ''PER''');
   add_body_line('          ,program      => ''HRMTOLSSLV''');
   add_body_line('          ,sub_request  => false');
   add_body_line('          ,argument1    => install_mode');
   add_body_line('          ,argument2    => population_size');
   add_body_line('          ,argument3    => l_start');
   add_body_line('          ,argument4    => l_end);');
   add_body_line('');
   add_body_line('        commit;');
   add_body_line('');
   add_body_line('        if l_child_req_id = 0 then');
   add_body_line('          fnd_file.put_line(fnd_file.log, ''Error in submitting child request'');');
   add_body_line('        else ');
   add_body_line('          fnd_file.put_line(fnd_file.log, ''Submitted child request: '' || l_child_req_id);');
   add_body_line('        end if;');
   add_body_line('');
   add_body_line('      end if;');
   add_body_line('');
   add_body_line('      l_range := l_range + population_size;');
   add_body_line('    end loop;');
   add_body_line('');
   add_body_line('    l_child_request_status := ');
   add_body_line('      fnd_concurrent.children_done ');
   add_body_line('        (Parent_Request_ID => fnd_global.conc_request_id');
   add_body_line('        ,Interval          => 20');
   add_body_line('        ,Max_Wait          => 3600);');
   add_body_line('');
   add_body_line('    if l_child_request_status then');
   add_body_line('      fnd_file.put_line(fnd_file.log, ''Children completed successfully'');');
   add_body_line('    else');
   add_body_line('      fnd_file.put_line(fnd_file.log, ''Children failed.'');');
   add_body_line('    end if;');
   add_body_line('');
   add_body_line('  end master_process;');
   add_body_line('');
   add_body_line('--');
   add_body_line('--------------------------------------------------------------------');
   add_body_line('--< EXECUTE_STATEMENT >------------------------------------------------');
   add_body_line('--------------------------------------------------------------------');
   add_body_line('--');
   add_body_line('-- Description:');
   add_body_line('--    This procedure executes three dynamic sql statements. This ');
   add_body_line('--    procedure is called in changing table constraints in Model 2.');
   add_body_line('--');
   add_body_line('  procedure execute_statement (sqlStatement1 IN VARCHAR2');
   add_body_line('                              ,sqlStatement2 IN VARCHAR2');
   add_body_line('                              ,sqlStatement3 IN VARCHAR2');
   add_body_line('                              ,table_name IN VARCHAR2) AS');
   add_body_line('  begin');
   add_body_line('  begin');
   add_body_line('   EXECUTE IMMEDIATE sqlStatement1;');
   add_body_line('  exception ');
   add_body_line('   when  others then');
   add_body_line('    fnd_file.put_line(fnd_file.log, ''Exception in 1'' ||table_name );');
   add_body_line('  end; ');
   add_body_line('  begin');
   add_body_line('   EXECUTE IMMEDIATE sqlStatement2;');
   add_body_line('  exception ');
   add_body_line('   when  others then');
   add_body_line('    fnd_file.put_line(fnd_file.log, ''Exception in 2'' ||table_name );');
   add_body_line('  end; ');
   add_body_line('  begin');
   add_body_line('   EXECUTE IMMEDIATE sqlStatement3;');
   add_body_line('  exception ');
   add_body_line('   when  others then');
   add_body_line('    fnd_file.put_line(fnd_file.log, ''Exception in 3'' ||table_name );');
   add_body_line('   end; ');
   add_body_line('');
   add_body_line('end  execute_statement;');
   add_body_line('--');
   add_body_line('--------------------------------------------------------------------');
   add_body_line('--< CHILD_PROCESS >------------------------------------------------');
   add_body_line('--------------------------------------------------------------------');
   add_body_line('--');
   add_body_line('-- Description:');
   add_body_line('--    This procedure is called by master_process and is the main');
   add_body_line('--    routine which enables the OLS policy on tables depending on the');
   add_body_line('--    install mode and the batch size.');
   add_body_line('--');
   add_body_line('  procedure child_process ');
   add_body_line('    (errbuf          out nocopy varchar2');
   add_body_line('    ,retcode         out nocopy number');
   add_body_line('    ,install_mode      in varchar2');
   add_body_line('    ,population_size   in number');
   add_body_line('    ,population_start  in number');
   add_body_line('    ,population_end    in number) as');
   add_body_line('    type mt_table is table of varchar2(256) index by binary_integer;');
   add_body_line('    type table_type is table of all_tables.table_name%type;');
   add_body_line('    type table_owner_type is table of all_tables.owner%type;');
   add_body_line('    type rowtables is table of pay_user_rows_f.row_low_range_or_name%type;');
   add_body_line('    type efdtables is table of pay_user_rows_f.effective_start_date%type;');
   add_body_line('');
   add_body_line('    no_policy_table          mt_table;');
   add_body_line('    predicate_table          mt_table;');
   add_body_line('    allowed_table            mt_table;');
   add_body_line('    seeddata_table           mt_table;');
   add_body_line('    all_hr_tables            table_type;');
   add_body_line('    all_hr_table_owners      table_owner_type;');
   add_body_line('    rowTab                   rowTables;');
   add_body_line('    efdTab                   efdTables;');
   add_body_line('');
   add_body_line('    l_hr_name         varchar2(100);');
   add_body_line('    l_ota_name        varchar2(100);');
   add_body_line('    l_ben_name        varchar2(100);');
   add_body_line('    l_table_name      all_tables.table_name%type;');
   add_body_line('    l_schema_name     all_tables.owner%type;');
   add_body_line('    l_tab_enabled     varchar2(1);');
   add_body_line('    l_np_tab          boolean;');
   add_body_line('    l_predicate       varchar2(240);');
   add_body_line('    l_upd_tab         boolean;');
   add_body_line('    l_upd_policy      boolean;');
   add_body_line('    l_table_options   varchar2(300);');
   add_body_line('');
   add_body_line('    l_table_enabled_value    VARCHAR2(4000);');
   add_body_line('    l_status                 VARCHAR2(100); ');
   add_body_line('    l_enabled                BOOLEAN; ');
   add_body_line('    l_effective_start_date   DATE;');
   add_body_line('');
   add_body_line('    cursor acting_tables_schema (c_start number, c_end number, ');
   add_body_line('                          c_hr_owner varchar2, c_ota_owner varchar2, ');
   add_body_line('                          c_ben_owner varchar2) is');
   add_body_line('      select owner, table_name ');
   add_body_line('        from (select owner, ');
   add_body_line('                     table_name,');
   add_body_line('                     rownum as colid');
   add_body_line('                from all_tables');
   add_body_line('               where owner in (c_hr_owner, c_ota_owner, c_ben_owner)');
   add_body_line('               order by owner, table_name)');
   add_body_line('       where colid between c_start and c_end');
   add_body_line('       order by colid;');
   add_body_line('    ');
   add_body_line('      cursor acting_tables_usertable (c_start number, c_end number) is');
   add_body_line('      select row_low_range_or_name, ');
   add_body_line('             effective_start_date');
   add_body_line('        from (select f.row_low_range_or_name');
   add_body_line('                    ,f.effective_start_date');
   add_body_line('                    ,rownum as colid');
   add_body_line('                from pay_user_rows_f f, ');
   add_body_line('                     pay_user_tables t');
   add_body_line('               where f.user_table_id = t.user_table_id');
   add_body_line('                 and t.user_table_name = ''HR_OLS_TABLE_LIST''');
   add_body_line('               order by f.row_low_range_or_name)');
   add_body_line('       where colid between c_start and c_end');
   add_body_line('      order by colid;');
   add_body_line('');
   add_body_line('  begin');
   add_body_line('--');
   add_body_line('-- Fetch the schema names for the applications we ');
   add_body_line('-- intend to OLS enable.');
   add_body_line('--');
   add_body_line('    l_hr_name  := get_schema(''PER'');');
   add_body_line('    l_ben_name := get_schema(''BEN'');');
   add_body_line('    l_ota_name := get_schema(''OTA'');');
   add_body_line('');
   add_body_line('--');
   add_body_line('-- There are tables which should not be OLS enabled.');
   add_body_line('-- The list contains the name of all these tables.');
   add_body_line('--');
   add_body_line('    no_policy_table(1) := ''AME_APPROVER_TYPES'';');
   add_body_line('    no_policy_table(2) := ''AME_ITEM_CLASSES'';');
   add_body_line('    no_policy_table(3) := ''AME_ITEM_CLASSES_TL'';');
   add_body_line('    no_policy_table(4) := ''AME_FIELD_HELP'';');
   add_body_line('    no_policy_table(5) := ''AME_HELP'';');
   add_body_line('    no_policy_table(6) := ''AME_TEMP_HANDLER_STATES'';');
   add_body_line('');
   add_body_line('--');
   add_body_line('-- There are tables which should have a different OLS predicate..');
   add_body_line('-- The list contains the name of all these tables.');
   add_body_line('--');
   add_body_line('    predicate_table(1)  :=''PER_NUMBER_GENERATION_CONTROLS'';');
   add_body_line('    predicate_table(2)  :=''AME_CALLING_APPS'';');
   add_body_line('    predicate_table(3)  :=''AME_ATTRIBUTE_USAGES'';');
   add_body_line('    predicate_table(4)  :=''AME_RULES'';');
   add_body_line('    predicate_table(5)  :=''AME_RULE_USAGES'';');
   add_body_line('    predicate_table(6)  :=''AME_CONDITION_USAGES'';');
   add_body_line('    predicate_table(7)  :=''AME_ACTION_USAGES'';');
   add_body_line('    predicate_table(8)  :=''AME_APPROVAL_GROUPS'';');
   add_body_line('    predicate_table(9)  :=''AME_APPROVAL_GROUP_CONFIG'';');
   add_body_line('    predicate_table(10) :=''AME_APPROVAL_GROUP_ITEMS'';');
   add_body_line('    predicate_table(11) :=''AME_APPROVAL_GROUP_MEMBERS'';');
   add_body_line('    predicate_table(12) :=''AME_ACTION_TYPE_CONFIG'';');
   add_body_line('    predicate_table(13) :=''AME_ITEM_CLASS_USAGES'';');
   add_body_line('    predicate_table(14) :=''AME_APPROVAL_GROUPS_TL'';');
   add_body_line('    predicate_table(15) :=''AME_CALLING_APPS_TL'';');
   add_body_line('    predicate_table(16) :=''AME_RULES_TL'';');
   add_body_line('    predicate_table(17) :=''AME_TEST_TRANSACTIONS'';');
   add_body_line('    predicate_table(18) :=''AME_TEST_TRANS_ATT_VALUES'';');
   add_body_line('    predicate_table(19) :=''AME_TEMP_TRANS_ATT_VALUES'';');
   add_body_line('    predicate_table(20) :=''AME_REC_ACCESS_TRANS'';');
   add_body_line('    predicate_table(21) :=''AME_TEMP_DELETIONS'';');
   add_body_line('    predicate_table(22) :=''AME_TEMP_INSERTIONS'';');
   add_body_line('    predicate_table(23) :=''AME_TEMP_OLD_APPROVER_LISTS'';');
   add_body_line('    predicate_table(24) :=''AME_TEMP_TRANSACTIONS'';');
   add_body_line('    predicate_table(25) :=''AME_TEMP_TRANS_LOCKS'';');
   add_body_line('    predicate_table(26) :=''AME_APPROVALS_HISTORY'';');
   add_body_line('    predicate_table(27) :=''AME_EXCEPTIONS_LOG'';');
   add_body_line('    predicate_table(28) :=''AME_TXN_APPROVERS'';');
   add_body_line('    predicate_table(29) :=''AME_TRANS_APPROVAL_HISTORY'';');
   add_body_line(' -- Fix for 7645461 ');
   add_body_line('    predicate_table(30) :=''HR_NAME_FORMATS''; ');
   add_body_line('');
   add_body_line('-- There are tables which should have a different table options..');
   add_body_line('--');
   add_body_line('    --HR Tables');
   add_body_line('    seeddata_table(1) := ''FF_ROUTE_PARAMETER_VALUES'';');
   add_body_line('    seeddata_table(2) := ''FF_USER_ENTITIES'';');
   add_body_line('    seeddata_table(3) := ''FF_DATABASE_ITEMS'';');
   add_body_line('    seeddata_table(4) := ''FF_DATABASE_ITEMS_TL'';');
   add_body_line('    seeddata_table(5) := ''PAY_USER_COLUMN_INSTANCES_F'';');
   add_body_line('    seeddata_table(6) := ''GHR_DUTY_STATIONS_F'';');
   add_body_line('    seeddata_table(7) := ''HR_ITEM_PROPERTIES_TL'';');
   add_body_line('    seeddata_table(8) := ''PAY_US_CITY_NAMES'';');
   add_body_line('    seeddata_table(9) := ''HR_ITEM_PROPERTIES_B'';');
   add_body_line('    seeddata_table(10) := ''PAY_DEFINED_BALANCES'';');
   add_body_line('    seeddata_table(11) := ''HR_TEMPLATE_ITEM_CONTEXT_PAGES'';');
   add_body_line('    seeddata_table(12) := ''HR_TEMPLATE_ITEM_CONTEXTS_B'';');
   add_body_line('    seeddata_table(13) := ''PQH_ATTRIBUTES_TL'';');
   add_body_line('    seeddata_table(14) := ''PAY_US_CITY_TAX_INFO_F'';');
   add_body_line('    seeddata_table(15) := ''HR_TEMPLATE_ITEMS_B'';');
   add_body_line('    seeddata_table(16) := ''PQH_ATTRIBUTES'';');
   add_body_line('    seeddata_table(17) := ''PQH_TXN_CATEGORY_ATTRIBUTES'';');
   add_body_line('    seeddata_table(18) := ''PAY_USER_ROWS_F'';');
   add_body_line('    seeddata_table(19) := ''HR_TEMPLATE_ITEM_TAB_PAGES'';');
   add_body_line('    seeddata_table(20) := ''PAY_INPUT_VALUES_F'';');
   add_body_line('    seeddata_table(21) := ''PAY_INPUT_VALUES_F_TL'';');
   add_body_line('    seeddata_table(22) := ''PAY_USER_ROWS_F_TL'';');
   add_body_line('    seeddata_table(23) := ''PAY_BALANCE_FEEDS_F'';');
   add_body_line('    seeddata_table(24) := ''PAY_FORMULA_RESULT_RULES_F'';');
   add_body_line('    seeddata_table(25) := ''FF_FUNCTION_PARAMETERS'';');
   add_body_line('    seeddata_table(26) := ''GHR_NOAC_REMARKS'';');
   add_body_line('    seeddata_table(27) := ''DT_COLUMN_PROMPTS_TL'';');
   add_body_line('    seeddata_table(28) := ''HR_API_HOOKS'';');
   add_body_line('    seeddata_table(29) := ''AME_ATTRIBUTE_USAGES'';');
   add_body_line('    seeddata_table(30) := ''PAY_TAXABILITY_RULES'';');
   add_body_line('    seeddata_table(31) := ''PAY_USER_COLUMNS_TL'';');
   add_body_line('    seeddata_table(32) := ''PAY_USER_COLUMNS'';');
   add_body_line('    seeddata_table(33) := ''PAY_SHADOW_DEFINED_BALANCES'';');
   add_body_line('    seeddata_table(34) := ''GHR_NOA_FAM_PROC_METHODS'';');
   add_body_line('    seeddata_table(35) := ''PQH_SPECIAL_ATTRIBUTES'';');
   add_body_line('    seeddata_table(36) := ''PAY_BALANCE_TYPES_TL'';');
   add_body_line('    seeddata_table(37) := ''PAY_BALANCE_TYPES'';');
   add_body_line('    seeddata_table(38) := ''HR_FORM_ITEMS_TL'';');
   add_body_line('    seeddata_table(39) := ''AME_ACTION_TYPE_CONFIG'';');
   add_body_line('    seeddata_table(40) := ''HR_NAVIGATION_PATHS_TL'';');
   add_body_line('    seeddata_table(41) := ''AME_APPROVAL_GROUP_CONFIG'';');
   add_body_line('    seeddata_table(42) := ''GHR_NOAC_LAS'';');
   add_body_line('    seeddata_table(43) := ''PAY_ELEMENT_TYPES_F'';');
   add_body_line('    seeddata_table(44) := ''HR_PUMP_MODULE_PARAMETERS'';');
   add_body_line('    seeddata_table(45) := ''PAY_ELEMENT_TYPES_F_TL'';');
   add_body_line('    seeddata_table(46) := ''FF_FUNCTION_CONTEXT_USAGES'';');
   add_body_line('    seeddata_table(47) := ''PAY_SHADOW_INPUT_VALUES'';');
   add_body_line('    seeddata_table(48) := ''PER_ESTABLISHMENTS'';');
   add_body_line('    seeddata_table(49) := ''FF_FORMULAS_F'';');
   add_body_line('    seeddata_table(50) := ''PAY_BALANCE_CLASSIFICATIONS'';');
   add_body_line('    seeddata_table(51) := ''HR_FORM_ITEMS_B'';');
   add_body_line('    seeddata_table(52) := ''HR_API_MODULES'';');
   add_body_line('    seeddata_table(53) := ''PER_RI_VIEW_REPORTS_TL'';');
   add_body_line('    seeddata_table(54) := ''HR_DM_HIERARCHIES'';');
   add_body_line('    seeddata_table(55) := ''FF_FORMULAS_F_TL'';');
   add_body_line('    seeddata_table(56) := ''FF_ROUTES'';');
   add_body_line('    seeddata_table(57) := ''FF_GLOBALS_F'';');
   add_body_line('    seeddata_table(58) := ''PAY_SHADOW_BALANCE_FEEDS'';');
   add_body_line('    seeddata_table(59) := ''FF_FUNCTIONS'';');
   add_body_line('    seeddata_table(60) := ''GHR_POIS'';');
   add_body_line('    seeddata_table(61) := ''HR_DM_TABLE_GROUPINGS'';');
   add_body_line('    seeddata_table(62) := ''PAY_SUB_CLASSIFICATION_RULES_F'';');
   add_body_line('    seeddata_table(63) := ''PAY_SHADOW_FORMULA_RULES'';');
   add_body_line('    seeddata_table(64) := ''PAY_ELEMENT_CLASSIFICATIONS'';');
   add_body_line('    seeddata_table(65) := ''PAY_ELEMENT_CLASSIFICATIONS_TL'';');
   add_body_line('    seeddata_table(66) := ''AME_ATTRIBUTES_TL'';');
   add_body_line('    seeddata_table(67) := ''PQH_TEMPLATE_ATTRIBUTES'';');
   add_body_line('    seeddata_table(68) := ''GHR_NOA_FAMILIES'';');
   add_body_line('    seeddata_table(69) := ''HR_TAB_PAGE_PROPERTIES_TL'';');
   add_body_line('    seeddata_table(70) := ''PAY_BALANCE_DIMENSIONS_TL'';');
   add_body_line('    seeddata_table(71) := ''PER_RI_VIEW_REPORTS'';');
   add_body_line('    seeddata_table(72) := ''PAY_DIMENSION_ROUTES'';');
   add_body_line('    seeddata_table(73) := ''AME_ATTRIBUTES'';');
   add_body_line('    seeddata_table(74) := ''FF_GLOBALS_F_TL'';');
   add_body_line('    seeddata_table(75) := ''PAY_REPORT_FORMAT_ITEMS_F'';');
   add_body_line('    seeddata_table(76) := ''HR_TAB_PAGE_PROPERTIES_B'';');
   add_body_line('    seeddata_table(77) := ''HR_TEMPLATE_TAB_PAGES_B'';');
   add_body_line('    seeddata_table(78) := ''PAY_BALANCE_ATTRIBUTES'';');
   add_body_line('    seeddata_table(79) := ''PAY_ELEMENT_TYPE_USAGES_F'';');
   add_body_line('    seeddata_table(80) := ''HR_ORG_INFORMATION_TYPES_TL'';');
   add_body_line('    seeddata_table(81) := ''PAY_RETRO_COMPONENT_USAGES'';');
   add_body_line('    seeddata_table(82) := ''PQH_TABLE_ROUTE_TL'';');
   add_body_line('    seeddata_table(83) := ''PER_TIME_PERIODS'';');
   add_body_line('    seeddata_table(84) := ''HR_API_HOOK_CALLS'';');
   add_body_line('    seeddata_table(85) := ''PAY_DATETRACKED_EVENTS'';');
   add_body_line('    seeddata_table(86) := ''PAY_STATUS_PROCESSING_RULES_F'';');
   add_body_line('    seeddata_table(87) := ''PAY_USER_TABLES_TL'';');
   add_body_line('    seeddata_table(88) := ''PAY_USER_TABLES'';');
   add_body_line('    seeddata_table(89) := ''AME_ACTIONS_TL'';');
   add_body_line('    seeddata_table(90) := ''HR_DM_TABLES'';');
   add_body_line('    seeddata_table(91) := ''PAY_REPORT_FORMAT_MAPPINGS_F'';');
   add_body_line('    seeddata_table(92) := ''PER_INFO_TYPE_SECURITY'';');
   add_body_line('    seeddata_table(93) := ''PAY_SHADOW_BALANCE_TYPES'';');
   add_body_line('    seeddata_table(94) := ''PAY_US_GARN_EXEMPTION_RULES_F'';');
   add_body_line('    seeddata_table(95) := ''DT_TITLE_PROMPTS_TL'';');
   add_body_line('    seeddata_table(96) := ''AME_ACTIONS'';');
   add_body_line('    seeddata_table(97) := ''AME_CALLING_APPS_TL'';');
   add_body_line('    seeddata_table(98) := ''PAY_TEMPLATE_EXCLUSION_RULES'';');
   add_body_line('    seeddata_table(99) := ''HR_DU_COLUMN_MAPPINGS'';');
   add_body_line('    seeddata_table(100) := ''PAY_ELEMENT_SPAN_USAGES'';');
   add_body_line('    seeddata_table(101) := ''HR_CANVAS_PROPERTIES'';');
   add_body_line('    seeddata_table(102) := ''PAY_FR_CONTRIBUTION_USAGES'';');
   add_body_line('    seeddata_table(103) := ''PAY_REPORT_FORMAT_PARAMETERS'';');
   add_body_line('    seeddata_table(104) := ''HR_ORG_INFO_TYPES_BY_CLASS'';');
   add_body_line('    seeddata_table(105) := ''PAY_SHADOW_ELEMENT_TYPES'';');
   add_body_line('    seeddata_table(106) := ''PAY_US_COUNTY_TAX_INFO_F'';');
   add_body_line('    seeddata_table(107) := ''HR_TEMPLATE_CANVASES_B'';');
   add_body_line('    seeddata_table(108) := ''GHR_LOCALITY_PAY_AREAS_F'';');
   add_body_line('    seeddata_table(109) := ''HR_ORG_INFORMATION_TYPES'';');
   add_body_line('    seeddata_table(110) := ''PAY_US_STATE_TAX_INFO_F'';');
   add_body_line('    seeddata_table(111) := ''PAY_EVENT_UPDATES'';');
   add_body_line('    seeddata_table(112) := ''PQH_TABLE_ROUTE'';');
   add_body_line('    seeddata_table(113) := ''GHR_REMARKS'';');
   add_body_line('    seeddata_table(114) := ''PAY_BALANCE_CATEGORIES_F'';');
   add_body_line('    seeddata_table(115) := ''PAY_BALANCE_CATEGORIES_F_TL'';');
   add_body_line('    seeddata_table(116) := ''PQP_FLXDU_COLUMNS'';');
   add_body_line('    seeddata_table(117) := ''AME_ITEM_CLASS_USAGES'';');
   add_body_line('    seeddata_table(118) := ''HR_NAVIGATION_UNITS_TL'';');
   add_body_line('    seeddata_table(119) := ''PER_US_OSHA_NUMBERS'';');
   add_body_line('    seeddata_table(120) := ''GHR_PLAN_SERVICE_AREAS_F'';');
   add_body_line('    seeddata_table(121) := ''HR_WINDOW_PROPERTIES_TL'';');
   add_body_line('    seeddata_table(122) := ''AME_CALLING_APPS'';');
   add_body_line('    seeddata_table(123) := ''PAY_ELE_CLASSIFICATION_RULES'';');
   add_body_line('    seeddata_table(124) := ''HR_DM_APPLICATION_GROUPS'';');
   add_body_line('    seeddata_table(125) := ''HR_DM_GROUPS'';');
   add_body_line('    seeddata_table(126) := ''PER_SOLUTION_CMPT_NAMES'';');
   add_body_line('    seeddata_table(127) := ''PER_SOLUTIONS'';');
   add_body_line('    seeddata_table(128) := ''PAY_AU_MODULE_PARAMETERS'';');
   add_body_line('    seeddata_table(129) := ''PER_STANDARD_HOLIDAYS'';');
   add_body_line('    seeddata_table(130) := ''HR_WINDOW_PROPERTIES_B'';');
   add_body_line('    seeddata_table(131) := ''HR_TEMPLATE_WINDOWS_B'';');
   add_body_line('    seeddata_table(132) := ''PAY_US_GARN_FEE_RULES_F'';');
   add_body_line('    seeddata_table(133) := ''HR_FORM_TEMPLATES_TL'';');
   add_body_line('    seeddata_table(134) := ''PER_ASSIGNMENT_INFO_TYPES_TL'';');
   add_body_line('    seeddata_table(135) := ''GHR_PA_DATA_FIELDS'';');
   add_body_line('    seeddata_table(136) := ''GHR_NATURE_OF_ACTIONS'';');
   add_body_line('    seeddata_table(137) := ''PAY_LEG_SETUP_DEFAULTS'';');
   add_body_line('    seeddata_table(138) := ''FF_FORMULA_TYPES'';');
   add_body_line('    seeddata_table(139) := ''GHR_DUAL_ACTIONS'';');
   add_body_line('    seeddata_table(140) := ''PAY_SHADOW_FORMULAS'';');
   add_body_line('    seeddata_table(141) := ''PER_PEOPLE_INFO_TYPES'';');
   add_body_line('    seeddata_table(142) := ''PER_RI_SETUP_SUB_TASKS_TL'';');
   add_body_line('    seeddata_table(143) := ''AME_STRING_VALUES'';');
   add_body_line('    seeddata_table(144) := ''PER_SHARED_TYPES_TL'';');
   add_body_line('    seeddata_table(145) := ''PAY_BAL_ATTRIBUTE_DEFINITIONS'';');
   add_body_line('    seeddata_table(146) := ''PAY_RUN_TYPES_F_TL'';');
   add_body_line('    seeddata_table(147) := ''PAY_MONETARY_UNITS'';');
   add_body_line('    seeddata_table(148) := ''PAY_MONETARY_UNITS_TL'';');
   add_body_line('    seeddata_table(149) := ''PAY_MX_LEGISLATION_INFO_F'';');
   add_body_line('    seeddata_table(150) := ''PER_ASSIGNMENT_INFO_TYPES'';');
   add_body_line('    seeddata_table(151) := ''PAY_RUN_TYPE_USAGES_F'';');
   add_body_line('    seeddata_table(152) := ''PAY_EVENT_GROUPS'';');
   add_body_line('    seeddata_table(153) := ''PER_RI_SETUP_TASKS_TL'';');
   add_body_line('    seeddata_table(154) := ''AME_RULES_TL'';');
   add_body_line('    seeddata_table(155) := ''PAY_ROUTE_TO_DESCR_FLEXS'';');
   add_body_line('    seeddata_table(156) := ''PER_CAGR_API_PARAMETERS_TL'';');
   add_body_line('    seeddata_table(157) := ''GHR_FAMILIES'';');
   add_body_line('    seeddata_table(158) := ''AME_CONDITION_USAGES'';');
   add_body_line('    seeddata_table(159) := ''AME_CONDITIONS'';');
   add_body_line('    seeddata_table(160) := ''HR_FORM_TEMPLATES_B'';');
   add_body_line('    seeddata_table(161) := ''HR_FORM_PROPERTIES'';');
   add_body_line('    seeddata_table(162) := ''PAY_RUN_TYPES_F'';');
   add_body_line('    seeddata_table(163) := ''PAY_TRIGGER_EVENTS'';');
   add_body_line('    seeddata_table(164) := ''PQP_CONFIGURATION_VALUES'';');
   add_body_line('    seeddata_table(165) := ''PAY_ELEMENT_TEMPLATES'';');
   add_body_line('    seeddata_table(166) := ''PAY_RESTRICTION_PARAMETERS'';');
   add_body_line('    seeddata_table(167) := ''GHR_PAY_PLANS'';');
   add_body_line('    seeddata_table(168) := ''PAY_PAYMENT_TYPES_TL'';');
   add_body_line('    seeddata_table(169) := ''PER_PROPOSAL_QUESTION_TYPES'';');
   add_body_line('    seeddata_table(170) := ''AME_MANDATORY_ATTRIBUTES'';');
   add_body_line('    seeddata_table(171) := ''PAY_ELEMENT_TYPE_EXTRA_INFO'';');
   add_body_line('    seeddata_table(172) := ''PER_PROPOSAL_QUESTION_MEMBERS'';');
   add_body_line('    seeddata_table(173) := ''HR_ITEM_CONTEXTS'';');
   add_body_line('    seeddata_table(174) := ''AME_CONFIG_VARS'';');
   add_body_line('    seeddata_table(175) := ''PAY_UPGRADE_DEFINITIONS_TL'';');
   add_body_line('    seeddata_table(176) := ''HR_REPORT_LOOKUPS'';');
   add_body_line('    seeddata_table(177) := ''PAY_SHADOW_ELE_TYPE_USAGES'';');
   add_body_line('    seeddata_table(178) := ''PAY_ELEMENT_TYPE_RULES'';');
   add_body_line('    seeddata_table(179) := ''PER_RI_SETUP_SUB_TASKS'';');
   add_body_line('    seeddata_table(180) := ''GHR_PA_REQUEST_INFO_TYPES'';');
   add_body_line('    seeddata_table(181) := ''PER_ASSIGNMENT_STATUS_TYPES_TL'';');
   add_body_line('    seeddata_table(182) := ''PAY_MX_EARN_EXEMPTION_RULES_F'';');
   add_body_line('    seeddata_table(183) := ''PAY_REPORT_VARIABLES'';');
   add_body_line('    seeddata_table(184) := ''PAY_BAL_ATTRIBUTE_DEFAULTS'';');
   add_body_line('    seeddata_table(185) := ''PAY_REPORT_CATEGORY_COMPONENTS'';');
   add_body_line('    seeddata_table(186) := ''PQP_ALIEN_STATE_TREATIES_F'';');
   add_body_line('    seeddata_table(187) := ''PER_SHARED_TYPES'';');
   add_body_line('    seeddata_table(188) := ''HR_LEGISLATION_INSTALLATIONS'';');
   add_body_line('    seeddata_table(189) := ''HR_KI_HIERARCHIES_TL'';');
   add_body_line('    seeddata_table(190) := ''PAY_STATE_RULES'';');
   add_body_line('    seeddata_table(191) := ''PAY_REPORT_DEFINITIONS'';');
   add_body_line('    seeddata_table(192) := ''PER_RI_CONFIG_RESPONSIBILITY'';');
   add_body_line('    seeddata_table(193) := ''GHR_RESTRICTED_PROC_METHODS'';');
   add_body_line('    seeddata_table(194) := ''PER_GEN_HIER_NODE_TYPES'';');
   add_body_line('    seeddata_table(195) := ''PQP_CONFIGURATION_TYPES'';');
   add_body_line('    seeddata_table(196) := ''PER_GEN_HIERARCHY_NODES'';');
   add_body_line('    seeddata_table(197) := ''PAY_FUNCTIONAL_TRIGGERS'';');
   add_body_line('    seeddata_table(198) := ''PQP_EXCEPTION_REPORT_SUFFIX'';');
   add_body_line('    seeddata_table(199) := ''PAY_PAYMENT_TYPES'';');
   add_body_line('    seeddata_table(200) := ''HR_DM_PHASE_RULES'';');
   add_body_line('    seeddata_table(201) := ''PAY_TRIGGER_COMPONENTS'';');
   add_body_line('    seeddata_table(202) := ''PAY_SHADOW_SUB_CLASSI_RULES'';');
   add_body_line('    seeddata_table(203) := ''PQH_TRANSACTION_CATEGORIES_TL'';');
   add_body_line('    seeddata_table(204) := ''HR_FORM_TAB_PAGES_TL'';');
   add_body_line('    seeddata_table(205) := ''PAY_ELEMENT_SETS_TL'';');
   add_body_line('    seeddata_table(206) := ''PAY_ELEMENT_SETS'';');
   add_body_line('    seeddata_table(207) := ''AME_RULE_USAGES'';');
   add_body_line('    seeddata_table(208) := ''PER_PERSON_TYPES_TL'';');
   add_body_line('    seeddata_table(209) := ''PER_RI_SETUP_TASKS'';');
   add_body_line('    seeddata_table(210) := ''HR_PUMP_MAPPING_PACKAGES'';');
   add_body_line('    seeddata_table(211) := ''AME_RULES'';');
   add_body_line('    seeddata_table(212) := ''PER_STARTUP_PERSON_TYPES_TL'';');
   add_body_line('    seeddata_table(213) := ''AME_ACTION_TYPES'';');
   add_body_line('    seeddata_table(214) := ''PAY_US_GARN_LIMIT_RULES_F'';');
   add_body_line('    seeddata_table(215) := ''PER_CAGR_API_PARAMETERS'';');
   add_body_line('    seeddata_table(216) := ''PER_RI_WORKBENCH_ITEMS_TL'';');
   add_body_line('    seeddata_table(217) := ''AME_ACTION_USAGES'';');
   add_body_line('    seeddata_table(218) := ''PAY_UPGRADE_LEGISLATIONS'';');
   add_body_line('    seeddata_table(219) := ''PAY_US_FEDERAL_TAX_INFO_F'';');
   add_body_line('    seeddata_table(220) := ''AME_ACTION_TYPE_USAGES'';');
   add_body_line('    seeddata_table(221) := ''PQH_COPY_ENTITY_FUNCTIONS'';');
   add_body_line('    seeddata_table(222) := ''HR_DM_LOADER_PARAMS'';');
   add_body_line('    seeddata_table(223) := ''HR_ATH_VARIABLEMAP'';');
   add_body_line('    seeddata_table(224) := ''PAY_UPGRADE_DEFINITIONS'';');
   add_body_line('    seeddata_table(225) := ''PAY_EVENT_VALUE_CHANGES_F'';');
   add_body_line('    seeddata_table(226) := ''PAY_DATED_TABLES'';');
   add_body_line('    seeddata_table(227) := ''HR_DOCUMENT_TYPES_TL'';');
   add_body_line('    seeddata_table(228) := ''PAY_ELEMENT_TYPE_INFO_TYPES'';');
   add_body_line('    seeddata_table(229) := ''PAY_TEMPLATE_FF_USAGES'';');
   add_body_line('    seeddata_table(230) := ''AME_APPROVAL_GROUPS_TL'';');
   add_body_line('    seeddata_table(231) := ''AME_ACTION_TYPES_TL'';');
   add_body_line('    seeddata_table(232) := ''PER_ASSIGNMENT_STATUS_TYPES'';');
   add_body_line('    seeddata_table(233) := ''HR_KI_HIERARCHIES'';');
   add_body_line('    seeddata_table(234) := ''PQH_RULE_SETS_TL'';');
   add_body_line('    seeddata_table(235) := ''PER_PROPOSAL_CATEGORY_TYPES'';');
   add_body_line('    seeddata_table(236) := ''HR_FORM_TAB_STACKED_CANVASES'';');
   add_body_line('    seeddata_table(237) := ''HR_FORM_CANVASES_TL'';');
   add_body_line('    seeddata_table(238) := ''PAY_REPORT_CATEGORIES'';');
   add_body_line('    seeddata_table(239) := ''PER_PROPOSAL_OFFER_PARAGRAPHS'';');
   add_body_line('    seeddata_table(240) := ''PQH_TEMPLATES_TL'';');
   add_body_line('    seeddata_table(241) := ''HR_FORM_TAB_PAGES_B'';');
   add_body_line('    seeddata_table(242) := ''PQH_TRANSACTION_CATEGORIES'';');
   add_body_line('    seeddata_table(243) := ''PER_PERSON_TYPES'';');
   add_body_line('    seeddata_table(244) := ''PER_RI_WORKBENCH_ITEMS'';');
   add_body_line('    seeddata_table(245) := ''GHR_DUAL_PROC_METHODS'';');
   add_body_line('    seeddata_table(246) := ''PAY_RESTRICTION_VALUES'';');
   add_body_line('    seeddata_table(247) := ''PER_COBRA_COVERAGE_PERIODS'';');
   add_body_line('    seeddata_table(248) := ''PQP_EXTRACT_ATTRIBUTES'';');
   add_body_line('    seeddata_table(249) := ''PAY_AU_MODULES'';');
   add_body_line('    seeddata_table(250) := ''GHR_PREMIUM_PAY_INDICATORS'';');
   add_body_line('    seeddata_table(251) := ''AME_CONFIG_VARS_TL'';');
   add_body_line('    seeddata_table(252) := ''PQP_EXCEPTION_REPORTS'';');
   add_body_line('    seeddata_table(253) := ''PQP_EXCEPTION_REPORTS_TL'';');
   add_body_line('    seeddata_table(254) := ''FF_FORMULA_TYPE_COMPONENTS'';');
   add_body_line('    seeddata_table(255) := ''PAY_REPORT_GROUPS'';');
   add_body_line('    seeddata_table(256) := ''PAY_AU_PROCESS_PARAMETERS'';');
   add_body_line('    seeddata_table(257) := ''PAY_UPGRADE_PARAMETERS'';');
   add_body_line('    seeddata_table(258) := ''PER_PROPOSAL_CATEGORY_MEMBERS'';');
   add_body_line('    seeddata_table(259) := ''PQH_COPY_ENTITY_CONTEXTS'';');
   add_body_line('    seeddata_table(260) := ''PER_PROPOSAL_QUESTIONS_ADV'';');
   add_body_line('    seeddata_table(261) := ''PER_RI_RT_METADATA'';');
   add_body_line('    seeddata_table(262) := ''PER_TIME_PERIOD_TYPES_TL'';');
   add_body_line('    seeddata_table(263) := ''HR_LOCATION_INFO_TYPES'';');
   add_body_line('    seeddata_table(264) := ''HR_DOCUMENT_TYPES'';');
   add_body_line('    seeddata_table(265) := ''AME_APPROVER_TYPE_USAGES'';');
   add_body_line('    seeddata_table(266) := ''PER_POSITION_INFO_TYPES'';');
   add_body_line('    seeddata_table(267) := ''AME_APPROVAL_GROUPS'';');
   add_body_line('    seeddata_table(268) := ''PAY_CUSTOM_RESTRICTIONS_TL'';');
   add_body_line('    seeddata_table(269) := ''PQH_RULES'';');
   add_body_line('    seeddata_table(270) := ''PAY_ITERATIVE_RULES_F'';');
   add_body_line('    seeddata_table(271) := ''FF_LOOKUPS'';');
   add_body_line('    seeddata_table(272) := ''AME_ITEM_CLASSES_TL'';');
   add_body_line('    seeddata_table(273) := ''PQH_RULE_SETS'';');
   add_body_line('    seeddata_table(274) := ''PAY_AU_PROCESS_MODULES'';');
   add_body_line('    seeddata_table(275) := ''PQP_CONFIGURATION_MODULES'';');
   add_body_line('    seeddata_table(276) := ''PQH_WIZARD_CANVASES'';');
   add_body_line('    seeddata_table(277) := ''PER_RI_DEPENDENCIES'';');
   add_body_line('    seeddata_table(278) := ''HR_FORM_CANVASES_B'';');
   add_body_line('    seeddata_table(279) := ''PAY_EVENT_QUALIFIERS_F'';');
   add_body_line('    seeddata_table(280) := ''PQH_TEMPLATES'';');
   add_body_line('    seeddata_table(281) := ''PAY_CUSTOMIZED_RESTRICTIONS'';');
   add_body_line('    seeddata_table(282) := ''GHR_PAY_PLAN_WAITING_PERIODS'';');
   add_body_line('    seeddata_table(283) := ''PER_CONTACT_INFO_TYPES_TL'';');
   add_body_line('    seeddata_table(284) := ''PAY_SHADOW_ITERATIVE_RULES'';');
   add_body_line('    seeddata_table(285) := ''PAY_FUNCTIONAL_AREAS'';');
   add_body_line('    seeddata_table(286) := ''GHR_MASS_AWARD_CRITERIA_COLS'';');
   add_body_line('    seeddata_table(287) := ''BEN_BENEFIT_CLASSIFICATIONS'';');
   add_body_line('    seeddata_table(288) := ''AME_ITEM_CLASSES'';');
   add_body_line('    seeddata_table(289) := ''PQH_REF_TEMPLATES'';');
   add_body_line('    seeddata_table(290) := ''PER_TIME_PERIOD_RULES'';');
   add_body_line('    seeddata_table(291) := ''HR_NAME_FORMATS'';');
   add_body_line('    seeddata_table(292) := ''PER_TIME_PERIOD_TYPES'';');
   add_body_line('    seeddata_table(293) := ''PER_SOLUTION_TYPE_CMPTS'';');
   add_body_line('    seeddata_table(294) := ''HR_KI_OPTION_TYPES_TL'';');
   add_body_line('    seeddata_table(295) := ''PER_COBRA_QFYING_EVENTS_F'';');
   add_body_line('    seeddata_table(296) := ''PER_CAGR_APIS_TL'';');
   add_body_line('    seeddata_table(297) := ''PAY_EVENT_PROCEDURES'';');
   add_body_line('    seeddata_table(298) := ''PER_CONTACT_INFO_TYPES'';');
   add_body_line('    seeddata_table(299) := ''PAY_SHADOW_BAL_ATTRIBUTES'';');
   add_body_line('    seeddata_table(300) := ''HR_FORM_WINDOWS_TL'';');
   add_body_line('    seeddata_table(301) := ''PQH_ROLE_INFO_TYPES'';');
   add_body_line('    seeddata_table(302) := ''PER_SCH_INHERIT_HIER'';');
   add_body_line('    seeddata_table(303) := ''PER_GEN_HIERARCHY'';');
   add_body_line('    seeddata_table(304) := ''HR_PUMP_DEFAULT_EXCEPTIONS'';');
   add_body_line('    seeddata_table(305) := ''HR_ORGANIZATION_INFORMATION'';');
   add_body_line('    seeddata_table(306) := ''PER_GEN_HIERARCHY_VERSIONS'';');
   add_body_line('    seeddata_table(307) := ''PER_PREV_JOB_INFO_TYPES'';');
   add_body_line('    seeddata_table(308) := ''PQH_PTX_INFO_TYPES'';');
   add_body_line('    seeddata_table(309) := ''PQP_VEH_REPOS_INFO_TYPES'';');
   add_body_line('    seeddata_table(310) := ''HR_PATTERN_PURPOSE_USAGES'';');
   add_body_line('    seeddata_table(311) := ''PER_CAGR_APIS'';');
   add_body_line('    seeddata_table(312) := ''HR_KI_OPTION_TYPES'';');
   add_body_line('    seeddata_table(313) := ''PAY_FUNCTIONAL_USAGES'';');
   add_body_line('    seeddata_table(314) := ''PAY_AU_MODULE_TYPES'';');
   add_body_line('    seeddata_table(315) := ''PAY_AU_PROCESSES'';');
   add_body_line('    seeddata_table(316) := ''HR_FORM_WINDOWS_B'';');
   add_body_line('    seeddata_table(317) := ''HR_DU_MODULES'';');
   add_body_line('    seeddata_table(318) := ''AME_APPROVER_TYPES'';');
   add_body_line('    seeddata_table(319) := ''PER_JOB_INFO_TYPES'';');
   add_body_line('    seeddata_table(320) := ''PER_SOLUTION_TYPES'';');
   add_body_line('    seeddata_table(321) := ''PQH_COPY_ENTITY_ATTRIBS'';');
   add_body_line('    seeddata_table(322) := ''HR_KI_TOPICS_TL'';');
   add_body_line('    seeddata_table(323) := ''IRC_ALL_RECRUITING_SITES'';');
   add_body_line('    seeddata_table(324) := ''DT_DATE_PROMPTS_TL'';');
   add_body_line('    seeddata_table(325) := ''HR_ALL_ORGANIZATION_UNITS_TL'';');
   add_body_line('    seeddata_table(326) := ''PQH_COPY_ENTITY_TXNS'';');
   add_body_line('    seeddata_table(327) := ''PER_JOB_GROUPS'';');
   add_body_line('    seeddata_table(328) := ''PER_NUMBER_GENERATION_CONTROLS'';');
   add_body_line('    seeddata_table(329) := ''PER_PROPOSAL_TEMPLATES'';');
   add_body_line('    seeddata_table(330) := ''PER_SECURITY_PROFILES'';');
   add_body_line('    seeddata_table(331) := ''HR_KI_TOPICS'';');
   add_body_line('    seeddata_table(332) := ''PAY_TAXABILITY_RULES_DATES'';');
   add_body_line('    seeddata_table(333) := ''GHR_PAYROLL_OFFICE_NUMBER'';');
   add_body_line('    seeddata_table(334) := ''GHR_PROCESS_LOG'';');
   add_body_line('    seeddata_table(335) := ''HR_ALL_ORGANIZATION_UNITS'';');
   add_body_line('    seeddata_table(336) := ''PQP_VEH_ALLOC_INFO_TYPES'';');
   add_body_line('    seeddata_table(337) := ''FF_FDI_USAGES_F'';');
   add_body_line('    seeddata_table(338) := ''PAY_US_ZIP_CODES'';');
   add_body_line('    seeddata_table(339) := ''PAY_US_CITY_GEOCODES'';');
   add_body_line('    seeddata_table(340) := ''AME_EXCEPTIONS_LOG'';');
   add_body_line('    seeddata_table(341) := ''HR_APPLICATION_OWNERSHIPS'';');
   add_body_line('    seeddata_table(342) := ''PAY_TRIGGER_PARAMETERS'';');
   add_body_line('    seeddata_table(343) := ''HR_NAVIGATION_PATHS'';');
   add_body_line('    seeddata_table(344) := ''HR_NAVIGATION_NODE_USAGES'';');
   add_body_line('    seeddata_table(345) := ''FF_ROUTE_CONTEXT_USAGES'';');
   add_body_line('    seeddata_table(346) := ''PAY_US_CITY_SCHOOL_DSTS'';');
   add_body_line('    seeddata_table(347) := ''PAY_US_COUNTIES'';');
   add_body_line('    seeddata_table(348) := ''FF_COMPILED_INFO_F'';');
   add_body_line('    seeddata_table(349) := ''FF_ROUTE_PARAMETERS'';');
   add_body_line('    seeddata_table(350) := ''HR_S_APPLICATION_OWNERSHIPS'';');
   add_body_line('    seeddata_table(351) := ''PAY_MAGNETIC_RECORDS'';');
   add_body_line('    seeddata_table(352) := ''FF_FTYPE_CONTEXT_USAGES'';');
   add_body_line('    seeddata_table(353) := ''PAY_US_MODIFIED_GEOCODES'';');
   add_body_line('    seeddata_table(354) := ''PAY_BALANCE_DIMENSIONS'';');
   add_body_line('    seeddata_table(355) := ''PAY_DYNDBI_CHANGES'';');
   add_body_line('    seeddata_table(356) := ''PAY_MAGNETIC_BLOCKS'';');
   add_body_line('    seeddata_table(357) := ''HR_NAV_UNIT_GLOBAL_USAGES'';');
   add_body_line('    seeddata_table(358) := ''PAY_LEGISLATION_RULES'';');
   add_body_line('    seeddata_table(359) := ''PAY_REPORT_FORMAT_MAPPINGS_TL'';');
   add_body_line('    seeddata_table(360) := ''PAY_LEGISLATIVE_FIELD_INFO'';');
   add_body_line('    seeddata_table(361) := ''HR_WORKFLOWS'';');
   add_body_line('    seeddata_table(362) := ''PAY_AC_VENDOR_MAPPINGS'';');
   add_body_line('    seeddata_table(363) := ''HR_TIPS'';');
   add_body_line('    seeddata_table(364) := ''PAY_BALANCE_VALIDATION'';');
   add_body_line('    seeddata_table(365) := ''PAY_BALANCE_SETS'';');
   add_body_line('    seeddata_table(366) := ''HR_NAVIGATION_NODES'';');
   add_body_line('    seeddata_table(367) := ''PAY_ZA_IRP5_BAL_CODES'';');
   add_body_line('    seeddata_table(368) := ''PAY_CA_LEGISLATION_INFO'';');
   add_body_line('    seeddata_table(369) := ''PAY_US_TAX_BALANCES'';');
   add_body_line('    seeddata_table(370) := ''PAY_TRIGGER_INITIALISATIONS'';');
   add_body_line('    seeddata_table(371) := ''PAY_TRIGGER_DECLARATIONS'';');
   add_body_line('    seeddata_table(372) := ''PAY_PATCH_STATUS'';');
   add_body_line('    seeddata_table(373) := ''HR_NAVIGATION_UNITS'';');
   add_body_line('    seeddata_table(374) := ''AME_FIELD_HELP'';');
   add_body_line('    seeddata_table(375) := ''PAY_US_TAX_REPORT_BALANCES'';');
   add_body_line('    seeddata_table(376) := ''HR_OWNER_DEFINITIONS'';');
   add_body_line('    seeddata_table(377) := ''HR_NAVIGATION_CONTEXT_RULES'';');
   add_body_line('    seeddata_table(378) := ''PAY_TIME_DEFINITIONS'';');
   add_body_line('    seeddata_table(379) := ''PER_FORM_FUNCTIONS'';');
   add_body_line('    seeddata_table(380) := ''PAY_TIME_SPANS'';');
   add_body_line('    seeddata_table(381) := ''PAY_US_STATES'';');
   add_body_line('    seeddata_table(382) := ''PAY_ACTION_CLASSIFICATIONS'';');
   add_body_line('    seeddata_table(383) := ''HR_LEGISLATION_SUBGROUPS'';');
   add_body_line('    seeddata_table(384) := ''PAY_ELE_TMPLT_CLASS_USAGES'';');
   add_body_line('    seeddata_table(385) := ''PAY_RETRO_COMPONENTS'';');
   add_body_line('    seeddata_table(386) := ''PAY_RETRO_DEFN_COMPONENTS'';');
   add_body_line('    seeddata_table(387) := ''FF_CONTEXTS'';');
   add_body_line('    seeddata_table(388) := ''HR_STU_HISTORY'';');
   add_body_line('    seeddata_table(389) := ''PAY_LEGISLATION_CONTEXTS'';');
   add_body_line('    seeddata_table(390) := ''PAY_RETRO_DEFINITIONS'';');
   add_body_line('    seeddata_table(391) := ''PER_GB_XDO_TEMPLATES'';');
   add_body_line('    seeddata_table(392) := ''PAY_PURGE_ACTION_TYPES'';');
   add_body_line('    seeddata_table(393) := ''AME_APPROVAL_GROUP_MEMBERS'';');
   add_body_line('    seeddata_table(394) := ''PAY_US_TAX_TYPES'';');
   add_body_line('    seeddata_table(395) := ''HR_PUMP_SPREAD_LOADERS'';');
   add_body_line('    seeddata_table(396) := ''PAY_US_TAX_REPORT_DIMENSIONS'';');
   add_body_line('    seeddata_table(397) := ''PAY_ACTION_PARAMETER_VALUES'';');
   add_body_line('    seeddata_table(398) := ''PAY_UPGRADE_STATUS'';');
   add_body_line('    seeddata_table(399) := ''PAY_US_COUNTY_SCHOOL_DSTS'';');
   add_body_line('    seeddata_table(400) := ''PAY_ACTION_PARAMETERS_OLD'';');
   add_body_line('    seeddata_table(401) := ''PAY_PROCESS_GROUP_ACTIONS'';');
   add_body_line('    seeddata_table(402) := ''IRC_ALL_RECRUITING_SITES_TL'';');
   add_body_line('    seeddata_table(403) := ''PAY_TIME_DEF_USAGES'';');
   add_body_line('    seeddata_table(404) := ''HR_S_HISTORY'';');
   add_body_line('    seeddata_table(405) := ''PAY_PROCESS_GROUPS'';');
   add_body_line('    seeddata_table(406) := ''PAY_REPORT_MAGNETIC_PROCEDURES'';');
   add_body_line('    ');
   add_body_line('    --BEN tables');
   add_body_line('    seeddata_table(407) := ''BEN_DM_COLUMN_MAPPINGS'';');
   add_body_line('    seeddata_table(408) := ''BEN_EXT_DATA_ELMT_IN_RCD'';');
   add_body_line('    seeddata_table(409) := ''BEN_EXT_DATA_ELMT'';');
   add_body_line('    seeddata_table(410) := ''BEN_EXT_FLD'';');
   add_body_line('    seeddata_table(411) := ''BEN_DM_TABLES'';');
   add_body_line('    seeddata_table(412) := ''BEN_DM_HIERARCHIES'';');
   add_body_line('    seeddata_table(413) := ''BEN_COPY_ENTITY_RESULTS'';');
   add_body_line('    seeddata_table(414) := ''BEN_EXT_RCD_IN_FILE'';');
   add_body_line('    seeddata_table(415) := ''BEN_EXT_RCD'';');
   add_body_line('    seeddata_table(416) := ''BEN_EXT_CRIT_VAL'';');
   add_body_line('    seeddata_table(417) := ''BEN_EXT_INCL_CHG'';');
   add_body_line('    seeddata_table(418) := ''BEN_EXT_CRIT_TYP'';');
   add_body_line('    seeddata_table(419) := ''BEN_EXT_DATA_ELMT_DECD'';');
   add_body_line('    seeddata_table(420) := ''BEN_EXT_WHERE_CLAUSE'';');
   add_body_line('    seeddata_table(421) := ''BEN_ACTN_TYP_TL'';');
   add_body_line('    seeddata_table(422) := ''BEN_LER_F_TL'';');
   add_body_line('    seeddata_table(423) := ''BEN_EXT_DFN'';');
   add_body_line('    seeddata_table(424) := ''BEN_EXT_CRIT_PRFL'';');
   add_body_line('    seeddata_table(425) := ''BEN_EXT_FILE'';');
   add_body_line('    seeddata_table(426) := ''BEN_DM_TABLE_ORDER'';');
   add_body_line('    seeddata_table(427) := ''BEN_STARTUP_ACTN_TYP_TL'';');
   add_body_line('    seeddata_table(428) := ''BEN_STARTUP_LERS_TL'';');
   add_body_line('    seeddata_table(429) := ''BEN_ELIGY_CRITERIA'';');
   add_body_line('    seeddata_table(430) := ''BEN_CM_TRGR'';');
   add_body_line('    seeddata_table(431) := ''BEN_STARTUP_LERS'';');
   add_body_line('    seeddata_table(432) := ''BEN_STARTUP_ACTN_TYP'';');
   add_body_line('    seeddata_table(433) := ''BEN_REGN_F_TL'';');
   add_body_line('    seeddata_table(434) := ''BEN_STARTUP_REGN_TL'';');
   add_body_line('    seeddata_table(435) := ''BEN_LER_F'';');
   add_body_line('    seeddata_table(436) := ''BEN_CM_TYP_F_TL'';');
   add_body_line('    seeddata_table(437) := ''BEN_STARTUP_CM_TYP_TL'';');
   add_body_line('    seeddata_table(438) := ''BEN_STARTUP_REGN'';');
   add_body_line('    seeddata_table(439) := ''BEN_STARTUP_CM_TYP'';');
   add_body_line('    seeddata_table(440) := ''BEN_ACTN_TYP'';');
   add_body_line('    seeddata_table(441) := ''BEN_CM_TYP_F'';');
   add_body_line('    seeddata_table(442) := ''BEN_PGM_INFO_TYPES'';');
   add_body_line('    seeddata_table(443) := ''BEN_TRANSACTION'';');
   add_body_line('    ');
   add_body_line('    --OTA tables');
   add_body_line('    seeddata_table(444) := ''OTA_UPGRADE_LOG'';');
   add_body_line('    seeddata_table(445) := ''OTA_TITLE_CONVERSIONS'';');
   add_body_line('--');
   add_body_line('-- There are tables which should not be allowed to be disabled, if they');
   add_body_line('-- the policy is applied to them..');
   add_body_line('-- The list contains the name of all these tables.');
   add_body_line('--');
   add_body_line('    allowed_table(1)  := ''PER_NUMBER_GENERATION_CONTROLS'';');
   add_body_line('    allowed_table(2)  := ''HR_LOCATIONS_ALL'';');
   add_body_line('    allowed_table(3)  := ''PER_GRADES'';');
   add_body_line('    allowed_table(4)  := ''PER_JOBS'';');
   add_body_line('    allowed_table(5) := ''PER_ABSENCE_ATTENDANCE_TYPES'';');
   add_body_line('    allowed_table(6) := ''PER_ASSIGNMENT_STATUS_TYPES'';');
   add_body_line('    allowed_table(7) := ''PER_PAY_BASES'';');
   add_body_line('    allowed_table(8) := ''HR_ALL_ORGANIZATION_UNITS'';');
   add_body_line('    allowed_table(9) := ''PER_ALL_POSITIONS'';');
   add_body_line('     ');
   add_body_line('--');
   add_body_line('-- Based on the install mode selectively enable policy on tables ');
   add_body_line('--');
   add_body_line('    if install_mode =''SCHEMA'' then');
   add_body_line('--');
   add_body_line('-- Schema mode is not a valid option for Model 2 ');
   add_body_line('--');
   add_body_line('      if fnd_profile.value(''HR_ENABLE_MULTI_TENANCY'')=''P'' then');
   add_body_line('        return;');
   add_body_line('      end if;');
   add_body_line('      ');
   add_body_line('--');
   add_body_line('-- Fetch the tables to be applied. This list depends on the');
   add_body_line('-- batch start and batch end parameters.');
   add_body_line('-- ');
   add_body_line('--');
   add_body_line('      open acting_tables_schema (');
   add_body_line('        c_start     => population_start, ');
   add_body_line('        c_end       => population_end,');
   add_body_line('        c_hr_owner  => l_hr_name, ');
   add_body_line('        c_ota_owner => l_ota_name,');
   add_body_line('        c_ben_owner => l_ben_name);');
   add_body_line('');
   add_body_line('      fetch acting_tables_schema ');
   add_body_line('       bulk collect into all_hr_table_owners, all_hr_tables;');
   add_body_line('');
   add_body_line('      close acting_tables_schema;');
   add_body_line('');
   add_body_line('      for i in 1 .. all_hr_tables.count loop');
   add_body_line('        l_table_name := all_hr_tables(i);');
   add_body_line('        l_schema_name := all_hr_table_owners(i);');
   add_body_line('        ');
   add_body_line('        fnd_file.put_line(fnd_file.log, ''Current Table '' || l_schema_name || ''.'' || l_table_name);');
   add_body_line('          l_np_tab := false;');
   add_body_line('          l_upd_tab := false;');
   add_body_line('          l_upd_policy := false;');
   add_body_line('');
   add_body_line('          for j in 1..no_policy_table.count loop');
   add_body_line('            if l_table_name = no_policy_table(j) then');
   add_body_line('              --');
   add_body_line('              -- Do not apply policy to this table');
   add_body_line('              --		   ');
   add_body_line('              l_np_tab := true;');
   add_body_line('              exit;');
   add_body_line('            end if;');
   add_body_line('          end loop;');
   add_body_line('');
   add_body_line('            if l_np_tab then');
   add_body_line('               sa_policy_admin.remove_table_policy');
   add_body_line('                    (policy_name     => ''HR_ENTERPRISE_POLICY''');
   add_body_line('                    ,schema_name     => l_schema_name');
   add_body_line('                    ,table_name      => l_table_name');
   add_body_line('                    ,drop_column     => FALSE);');
   add_body_line('            else');
   add_body_line('              l_table_options := ''READ_CONTROL, LABEL_DEFAULT, HIDE'';');
   add_body_line('              for m in 1..seeddata_table.count loop');
   add_body_line('                  if l_table_name = seeddata_table(m) then');
   add_body_line('                     l_table_options := ''READ_CONTROL, UPDATE_CONTROL, DELETE_CONTROL, LABEL_DEFAULT, HIDE'';');
   add_body_line('                     l_upd_policy := true;');
   add_body_line('                     exit;');
   add_body_line('                  end if;');
   add_body_line('              end loop;');
   add_body_line('');
   add_body_line('              l_predicate := null;');
   add_body_line('              for k in 1..predicate_table.count loop ');
   add_body_line('                 if l_table_name = predicate_table(k) then');
   add_body_line('                   l_predicate := ''AND HR_ENTERPRISE = '' ||');
   add_body_line('                     ''char_to_label(''''HR_ENTERPRISE_POLICY'''', SA_SESSION.ROW_LABEL(''''HR_ENTERPRISE_POLICY''''))'';');
   add_body_line('                     l_upd_tab := true;');
   add_body_line('                     l_upd_policy := true;');
   add_body_line('                   exit;');
   add_body_line('                 end if;');
   add_body_line('              end loop;');
   add_body_line('');
   add_body_line('              if l_upd_policy then');
   add_body_line('                 sa_policy_admin.remove_table_policy');
   add_body_line('                    (policy_name     => ''HR_ENTERPRISE_POLICY''');
   add_body_line('                    ,schema_name     => l_schema_name');
   add_body_line('                    ,table_name      => l_table_name');
   add_body_line('                    ,drop_column     => FALSE);');
   add_body_line('');
   add_body_line('                  if l_upd_tab then');
   add_body_line('                    execute immediate ''UPDATE '' || l_schema_name || ''.'' || l_table_name ||');
   add_body_line('                      '' SET  hr_enterprise = char_to_label(''''HR_ENTERPRISE_POLICY'''',''''C::GLOBAL'''')'' || ');
   add_body_line('                      '' WHERE hr_enterprise is null'';');
   add_body_line('                  end if;');
   add_body_line('');
   add_body_line('                  sa_policy_admin.apply_table_policy');
   add_body_line('                  (policy_name     => ''HR_ENTERPRISE_POLICY''');
   add_body_line('                  ,schema_name     => l_schema_name');
   add_body_line('                  ,table_name      => l_table_name');
   add_body_line('                  ,table_options   => l_table_options');
   add_body_line('                  ,predicate       => l_predicate);');
   add_body_line('              end if;');
   add_body_line('');
   add_body_line('                  -- Fix for Bug 7645461');
   add_body_line('              if l_table_name = ''HR_NAME_FORMATS'' then');
   add_body_line('                 execute immediate ''Drop Index ''|| l_schema_name||''.HR_NAME_FORMATS_U1'';');
   add_body_line('                 execute immediate ''Create Unique Index ''|| l_schema_name||');
   add_body_line('                                   ''.HR_NAME_FORMATS_U1 On ''|| l_schema_name||''.''||l_table_name||');
   add_body_line('                                   ''(FORMAT_NAME,LEGISLATION_CODE,USER_FORMAT_CHOICE,HR_ENTERPRISE)'';');
   add_body_line('              end if;');
   add_body_line('           end if;');
   add_body_line('       end loop;');
   add_body_line('    elsif install_mode =''USERTABLE'' THEN ');
   add_body_line('      --');
   add_body_line('      -- Installation Module starts for USERTABLE	');
   add_body_line('      --');
   add_body_line('  ');
   add_body_line('      open acting_tables_usertable(c_start => population_start, c_end => population_end);');
   add_body_line('      fetch acting_tables_usertable bulk collect into rowtab,efdtab;');
   add_body_line('      close acting_tables_usertable;');
   add_body_line('  ');
   add_body_line('      for tabcnt in rowtab.first .. rowtab.last loop');
   add_body_line('        l_table_name := rowTab(tabCnt);');
   add_body_line('        l_effective_start_date := efdTab(tabCnt);');
   add_body_line('        --');
   add_body_line('        -- Get the option provide in user table');
   add_body_line('        --');
   add_body_line('       BEGIN');
   add_body_line('          l_table_enabled_value := hruserdt.get_table_value ');
   add_body_line('                                     (p_bus_group_id   => 0');
   add_body_line('                                     ,p_table_name     => ''HR_OLS_TABLE_LIST''');
   add_body_line('                                     ,p_col_name       => ''Enabled''');
   add_body_line('                                     ,p_row_value      => l_table_name');
   add_body_line('                                     ,p_effective_date => l_effective_start_date);');
   add_body_line('          l_schema_name := hruserdt.get_table_value ');
   add_body_line('                                     (p_bus_group_id   => 0');
   add_body_line('                                     ,p_table_name     => ''HR_OLS_TABLE_LIST''');
   add_body_line('                                     ,p_col_name       => ''Schema''');
   add_body_line('                                     ,p_row_value      => l_table_name');
   add_body_line('                                     ,p_effective_date => l_effective_start_date);');
   add_body_line('        EXCEPTION');
   add_body_line('          WHEN no_data_found THEN');
   add_body_line('            l_table_enabled_value := NULL;');
   add_body_line('          ');
   add_body_line('        END;');
   add_body_line('                               ');
   add_body_line('        --');
   add_body_line('        -- Get the status of applied policy to this table');
   add_body_line('        --');
   add_body_line('        BEGIN');
   add_body_line('          SELECT status');
   add_body_line('           INTO l_status');
   add_body_line('           FROM all_sa_table_policies              ');
   add_body_line('          WHERE table_name = l_table_name');
   add_body_line('            AND schema_name = l_schema_name');
   add_body_line('            AND policy_name =''HR_ENTERPRISE_POLICY'';');
   add_body_line(' ');
   add_body_line('         l_enabled := TRUE;');
   add_body_line('       EXCEPTION');
   add_body_line('         WHEN NO_DATA_FOUND THEN');
   add_body_line('           l_enabled := FALSE;');
   add_body_line('       END;');
   add_body_line('');
   add_body_line('       --');
   add_body_line('       -- Apply the policy to the tables');
   add_body_line('       --');
   add_body_line('       BEGIN');
   add_body_line('         IF NOT l_enabled AND (UPPER(l_table_enabled_value) = ''Y'') THEN');
   add_body_line('');
   add_body_line('          sa_policy_admin.apply_table_policy');
   add_body_line('             (policy_name     => ''HR_ENTERPRISE_POLICY''');
   add_body_line('             ,schema_name     => l_schema_name');
   add_body_line('             ,table_name      => l_table_name);');
   add_body_line('       --');
   add_body_line('	   -- In PEO mode change the table indexes');
   add_body_line('	   --');
   add_body_line('          IF fnd_profile.value(''HR_ENABLE_MULTI_TENANCY'')=''P'' THEN');
   add_body_line(' IF l_table_name = ''HR_LOCATIONS_ALL'' THEN    ');
   add_body_line('                 execute_statement( ''ALTER TABLE '' || l_schema_name || ');
   add_body_line('                   ''.hr_locations_all DROP CONSTRAINT hr_locations_uk2 CASCADE''');
   add_body_line('                    ,''DROP INDEX ''  || l_schema_name || ''.hr_locations_uk2''');
   add_body_line('                    ,''ALTER TABLE '' || l_schema_name || ');
   add_body_line('                   ''.hr_locations_all ADD CONSTRAINT hr_locations_uk2 '' ||');
   add_body_line('                   '' UNIQUE (location_code, business_group_id,hr_enterprise)''');
   add_body_line('                    ,l_table_name);');
   add_body_line('                                            ');
   add_body_line('               ELSIF l_table_name =''PER_GRADES'' THEN');
   add_body_line('              ');
   add_body_line('                 execute_statement(''ALTER TABLE '' || l_schema_name || ');
   add_body_line('                   ''.per_grades DROP CONSTRAINT PER_GRADES_UK2 CASCADE''');
   add_body_line('                    ,''DROP INDEX ''  || l_schema_name || ''.PER_GRADES_UK2''');
   add_body_line('                 ,''ALTER TABLE '' || l_schema_name || ');
   add_body_line('                   ''.per_grades add CONSTRAINT per_grades_uk2 UNIQUE (name,business_group_id,hr_enterprise)''');
   add_body_line('                 ,l_table_name);     ');
   add_body_line('              ELSIF l_table_name =''PER_JOBS'' THEN');
   add_body_line('                 execute_statement(''ALTER TABLE '' || l_schema_name ||');
   add_body_line('                   ''.per_jobs DROP CONSTRAINT per_jobs_uk2 CASCADE''');
   add_body_line('                    ,''DROP INDEX ''  || l_schema_name || ''.per_jobs_uk2''');
   add_body_line('                 ,''ALTER TABLE '' || l_schema_name || ');
   add_body_line('                   ''.per_jobs ADD CONSTRAINT per_jobs_uk2 UNIQUE (name,business_group_id,hr_enterprise)''');
   add_body_line('                 ,l_table_name);  ');
   add_body_line('               ELSIF l_table_name =''PER_ABSENCE_ATTENDANCE_TYPES'' THEN');
   add_body_line('                 execute_statement(''ALTER TABLE '' || l_schema_name || ');
   add_body_line('                   ''.per_absence_attendance_types DROP CONSTRAINT per_absence_attendance_typ_uk2 CASCADE''');
   add_body_line('                    ,''DROP INDEX ''  || l_schema_name || ''.per_absence_attendance_typ_uk2''');
   add_body_line('                  ,''ALTER TABLE '' || l_schema_name || ''.per_absence_attendance_types ADD CONSTRAINT per_absence_attendance_typ_uk2 UNIQUE(hr_enterprise,   business_group_id,   name)''');
   add_body_line('                  ,l_table_name);');
   add_body_line('               ELSIF l_table_name =''PER_ASSIGNMENT_STATUS_TYPES'' THEN');
   add_body_line('                 execute_statement(''ALTER TABLE '' || l_schema_name || ');
   add_body_line('                   ''.per_assignment_status_types DROP CONSTRAINT per_assignment_status_type_uk2 CASCADE''');
   add_body_line('                    ,''DROP INDEX ''  || l_schema_name || ''.per_assignment_status_type_uk2''');
   add_body_line('                    ,''ALTER TABLE '' || l_schema_name || ');
   add_body_line('                   ''.per_assignment_status_types ADD CONSTRAINT per_assignment_status_type_uk2 UNIQUE(hr_enterprise,   business_group_id,   legislation_code, user_status)''');
   add_body_line('                   ,l_table_name);');
   add_body_line('               ELSIF l_table_name =''PER_PAY_BASES'' THEN');
   add_body_line('                 execute_statement(''ALTER TABLE '' || l_schema_name || ');
   add_body_line('                   ''.per_pay_bases DROP CONSTRAINT per_pay_bases_uk2 CASCADE''');
   add_body_line('                    ,''DROP INDEX ''  || l_schema_name || ''.per_pay_bases_uk2''');
   add_body_line('                   ,''ALTER TABLE '' || l_schema_name || ');
   add_body_line('                   ''.per_pay_bases ADD CONSTRAINT per_pay_bases_uk2 UNIQUE(hr_enterprise,   business_group_id,   name)''');
   add_body_line('                   ,l_table_name);');
   add_body_line('                 execute_statement(''ALTER TABLE '' || l_schema_name || ');
   add_body_line('                   ''.per_pay_bases DROP CONSTRAINT per_pay_bases_uk3 CASCADE''');
   add_body_line('                    ,''DROP INDEX ''  || l_schema_name || ''.per_pay_bases_uk3''');
   add_body_line('                   ,''ALTER TABLE '' || l_schema_name || ');
   add_body_line('                   ''.per_pay_bases ADD CONSTRAINT per_pay_bases_uk3 UNIQUE(hr_enterprise,   business_group_id,   input_value_id, rate_id)''');
   add_body_line('                   ,l_table_name);');
   add_body_line('               ELSIF l_table_name =''HR_ALL_ORGANIZATION_UNITS'' THEN');
   add_body_line('                 execute_statement(''ALTER TABLE '' || l_schema_name || ');
   add_body_line('                   ''.hr_all_organization_units DROP CONSTRAINT hr_organization_units_uk2 CASCADE''');
   add_body_line('                    ,''DROP INDEX ''  || l_schema_name || ''.hr_organization_units_uk2''');
   add_body_line('                   ,''ALTER TABLE '' || l_schema_name || ');
   add_body_line('                   ''.hr_all_organization_units ADD CONSTRAINT hr_organization_units_uk2 unique (name,business_group_id,hr_enterprise)''');
   add_body_line('                   ,l_table_name);');
   add_body_line('               ELSIF l_table_name =''PER_NUMBER_GENERATION_CONTROLS'' THEN');
   add_body_line('                 execute immediate ''UPDATE '' || l_schema_name || ''.'' || l_table_name ||');
   add_body_line('                  '' SET  hr_enterprise = char_to_label(''''HR_ENTERPRISE_POLICY'''',''''C::ENT'''')'';');
   add_body_line('                 execute_statement(''ALTER TABLE '' || l_schema_name || ');
   add_body_line('                   ''.per_number_generation_controls DROP CONSTRAINT per_number_generation_cont_pk CASCADE''');
   add_body_line('                    ,''DROP INDEX ''  || l_schema_name || ''.per_number_generation_cont_pk''');
   add_body_line('                  ,''ALTER TABLE '' || l_schema_name || ');
   add_body_line('                   ''.per_number_generation_controls ADD CONSTRAINT per_number_generation_cont_pk PRIMARY KEY (type, business_group_id,hr_enterprise)''');
   add_body_line('                 ,l_table_name);');
   add_body_line('                 ');
   add_body_line('               ELSIF l_table_name =''PER_ALL_POSITIONS'' THEN');
   add_body_line('                 execute_statement(''ALTER TABLE '' || l_schema_name || ');
   add_body_line('                   ''.per_all_positions DROP CONSTRAINT per_positions_uk2 CASCADE''');
   add_body_line('                    ,''DROP INDEX ''  || l_schema_name || ''.per_positions_uk2''');
   add_body_line('                  ,''ALTER TABLE '' || l_schema_name || ');
   add_body_line('                   ''.per_all_positions ADD CONSTRAINT per_positions_uk2 UNIQUE(hr_enterprise,   business_group_id,   name)''');
   add_body_line('                 ,l_table_name);');
   add_body_line('                 ');
   add_body_line('               END IF;');add_body_line('             IF l_table_name =''PER_NUMBER_GENERATION_CONTROLS'' THEN');
   add_body_line('              l_predicate := ''AND HR_ENTERPRISE = '' ||');
   add_body_line('                   ''char_to_label(''''HR_ENTERPRISE_POLICY'''', SA_SESSION.ROW_LABEL(''''HR_ENTERPRISE_POLICY''''))'';	');
   add_body_line('              --			');
   add_body_line('              -- Update null to C::ENT');
   add_body_line('              --');
   add_body_line('');
   add_body_line('              --');
   add_body_line('              -- Drop the policy and recreate it with new predicate');
   add_body_line('              --');
   add_body_line('              sa_policy_admin.remove_table_policy');
   add_body_line('                  (policy_name     => ''HR_ENTERPRISE_POLICY''');
   add_body_line('                  ,schema_name     => l_schema_name');
   add_body_line('                  ,table_name      => l_table_name');
   add_body_line('                  ,drop_column     => FALSE);');
   add_body_line('');
   add_body_line('              sa_policy_admin.apply_table_policy');
   add_body_line('                  (policy_name     => ''HR_ENTERPRISE_POLICY''');
   add_body_line('                  ,schema_name     => l_schema_name');
   add_body_line('                  ,table_name      => l_table_name');
   add_body_line('                  ,predicate       => l_predicate);');
   add_body_line('             END IF;');
   add_body_line('           END IF;	');
   add_body_line('         ELSIF l_enabled THEN');
   add_body_line('           IF (UPPER(l_table_enabled_value) = ''N'') AND l_status= ''ENABLED'' THEN ');
   add_body_line('	     IF fnd_profile.value(''HR_ENABLE_MULTI_TENANCY'')=''P'' THEN');
   add_body_line('               --');
   add_body_line('               -- Check if disable is allowed for this table');
   add_body_line('               --');
   add_body_line('               FOR t_index IN 1 .. allowed_table.COUNT LOOP');
   add_body_line('                 IF allowed_table(t_index) = l_table_name THEN');
   add_body_line('                   l_np_tab := TRUE; ');
   add_body_line('                   EXIT;');
   add_body_line('                 END IF;');
   add_body_line('               END LOOP;');
   add_body_line('');
   add_body_line('                IF NOT l_np_tab THEN');
   add_body_line('                 sa_policy_admin.disable_table_policy');
   add_body_line('                       (policy_name     => ''HR_ENTERPRISE_POLICY''');
   add_body_line('                       ,schema_name     => l_schema_name');
   add_body_line('                       ,table_name      => l_table_name');
   add_body_line('                       );');
   add_body_line('                END IF;	');
   add_body_line('              ELSIF fnd_profile.value(''HR_ENABLE_MULTI_TENANCY'')=''B'' THEN ');
   add_body_line('               sa_policy_admin.disable_table_policy');
   add_body_line('                       (policy_name     => ''HR_ENTERPRISE_POLICY''');
   add_body_line('                       ,schema_name     => l_schema_name');
   add_body_line('                       ,table_name      => l_table_name');
   add_body_line('                       );');
   add_body_line('	      END IF;	');
   add_body_line('	    ELSIF (UPPER(l_table_enabled_value) = ''Y'') AND l_status= ''DISABLED'' THEN');
   add_body_line('             --');
   add_body_line('	     -- Enable policy');
   add_body_line('	     --');
   add_body_line('             sa_policy_admin.enable_TABLE_POLICY');
   add_body_line('               (policy_name     => ''HR_ENTERPRISE_POLICY''');
   add_body_line('               ,schema_name     => l_schema_name');
   add_body_line('               ,table_name      => l_table_name);');
   add_body_line('            END IF;');
   add_body_line('          END IF;');
   add_body_line('        END;');
   add_body_line('      END LOOP;');
   add_body_line('    end if;');
   add_body_line('  exception');
   add_body_line('    when others then');
   add_body_line('      fnd_file.put_line(fnd_file.log,''Exception caught on: '' || fnd_global.conc_request_id);');
   add_body_line('      fnd_file.put_line(fnd_file.log,''l_table_name: '' || l_table_name);      ');
   add_body_line('      fnd_file.put_line(fnd_file.log,''sqerrmessage: '' || sqlerrm);');
   add_body_line('  end child_process;');
   add_body_line('');
   add_body_line('');
   add_body_line('END '||l_package_name ||';');
   add_header_line('END ' ||l_package_name||';');

   l_csr_sql := dbms_sql.open_cursor;
   dbms_sql.parse( l_csr_sql, l_header,0,l_header_line-1,FALSE, dbms_sql.v7 );
   l_rows := dbms_sql.EXECUTE( l_csr_sql );
   dbms_sql.close_cursor( l_csr_sql );

   l_csr_sql := dbms_sql.open_cursor;
   dbms_sql.parse( l_csr_sql, l_body,0,l_body_line-1,FALSE, dbms_sql.v7 );
   l_rows := dbms_sql.EXECUTE( l_csr_sql );
   dbms_sql.close_cursor( l_csr_sql );

  EXCEPTION
   WHEN OTHERS THEN
        fnd_file.put_line(fnd_file.output,'Error occured in installation of HR Multi tenancy '|| sqlerrm);
  END install_hr_multi_tenant;
 END hr_multi_tenant_installer;

/
