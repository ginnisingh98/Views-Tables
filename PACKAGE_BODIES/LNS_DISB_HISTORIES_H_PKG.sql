--------------------------------------------------------
--  DDL for Package Body LNS_DISB_HISTORIES_H_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."LNS_DISB_HISTORIES_H_PKG" AS
/* $Header: LNS_DSBHY_TBLH_B.pls 120.1 2005/07/01 08:31:41 scherkas noship $ */

/* Insert_Row procedure */
PROCEDURE Insert_Row(
	X_DISB_HISTORY_ID		IN OUT NOCOPY NUMBER
	,P_DISB_LINE_ID		IN NUMBER
	,P_ATTEMPT_NUMBER		IN NUMBER
	,P_BANK_ACCOUNT_ID		IN NUMBER
	,P_PAYMENT_METHOD_CODE		IN VARCHAR2
	,P_REQUEST_DATE		IN DATE
	,P_PAYMENT_REQUEST_DATE		IN DATE
	,P_STATUS		IN VARCHAR2
	,P_MESSAGES		IN VARCHAR2
	,P_OBJECT_VERSION_NUMBER		IN NUMBER
	,P_CREATION_DATE		IN DATE
	,P_CREATED_BY		IN NUMBER
	,P_LAST_UPDATE_DATE		IN DATE
	,P_LAST_UPDATED_BY		IN NUMBER
	,P_LAST_UPDATE_LOGIN		IN NUMBER
) IS
BEGIN
	INSERT INTO LNS_DISB_HISTORIES_H
	(
		DISB_HISTORY_ID
		,DISB_LINE_ID
		,ATTEMPT_NUMBER
		,BANK_ACCOUNT_ID
		,PAYMENT_METHOD_CODE
		,REQUEST_DATE
		,PAYMENT_REQUEST_DATE
		,STATUS
		,MESSAGES
		,OBJECT_VERSION_NUMBER
		,CREATION_DATE
		,CREATED_BY
		,LAST_UPDATE_DATE
		,LAST_UPDATED_BY
		,LAST_UPDATE_LOGIN
	) VALUES (
		DECODE(X_DISB_HISTORY_ID, FND_API.G_MISS_NUM, LNS_DISB_HISTORIES_S.NEXTVAL, NULL, LNS_DISB_HISTORIES_S.NEXTVAL, X_DISB_HISTORY_ID)
		,DECODE(P_DISB_LINE_ID, FND_API.G_MISS_NUM, NULL, P_DISB_LINE_ID)
		,DECODE(P_ATTEMPT_NUMBER, FND_API.G_MISS_NUM, NULL, P_ATTEMPT_NUMBER)
		,DECODE(P_BANK_ACCOUNT_ID, FND_API.G_MISS_NUM, NULL, P_BANK_ACCOUNT_ID)
		,DECODE(P_PAYMENT_METHOD_CODE, FND_API.G_MISS_CHAR, NULL, P_PAYMENT_METHOD_CODE)
		,DECODE(P_REQUEST_DATE, FND_API.G_MISS_DATE, NULL, P_REQUEST_DATE)
		,DECODE(P_PAYMENT_REQUEST_DATE, FND_API.G_MISS_DATE, NULL, P_PAYMENT_REQUEST_DATE)
		,DECODE(P_STATUS, FND_API.G_MISS_CHAR, NULL, P_STATUS)
		,DECODE(P_MESSAGES, FND_API.G_MISS_CHAR, NULL, P_MESSAGES)
		,DECODE(P_OBJECT_VERSION_NUMBER, FND_API.G_MISS_NUM, NULL, P_OBJECT_VERSION_NUMBER)
		,LNS_UTILITY_PUB.CREATION_DATE
		,LNS_UTILITY_PUB.CREATED_BY
		,LNS_UTILITY_PUB.LAST_UPDATE_DATE
		,LNS_UTILITY_PUB.LAST_UPDATED_BY
		,LNS_UTILITY_PUB.LAST_UPDATE_LOGIN
	) RETURNING
		 DISB_HISTORY_ID
	 INTO
		 X_DISB_HISTORY_ID;
END Insert_Row;

/* Update_Row procedure */
PROCEDURE Update_Row(
	P_DISB_HISTORY_ID		IN NUMBER
	,P_DISB_LINE_ID		IN NUMBER
	,P_ATTEMPT_NUMBER		IN NUMBER
	,P_BANK_ACCOUNT_ID		IN NUMBER
	,P_PAYMENT_METHOD_CODE		IN VARCHAR2
	,P_REQUEST_DATE		IN DATE
	,P_PAYMENT_REQUEST_DATE		IN DATE
	,P_STATUS		IN VARCHAR2
	,P_MESSAGES		IN VARCHAR2
	,P_OBJECT_VERSION_NUMBER		IN NUMBER
	,P_LAST_UPDATE_DATE		IN DATE
	,P_LAST_UPDATED_BY		IN NUMBER
	,P_LAST_UPDATE_LOGIN		IN NUMBER
) IS
BEGIN
	UPDATE LNS_DISB_HISTORIES_H SET
		DISB_LINE_ID = DECODE(P_DISB_LINE_ID, NULL, DISB_LINE_ID, FND_API.G_MISS_NUM, NULL, P_DISB_LINE_ID)
		,ATTEMPT_NUMBER = DECODE(P_ATTEMPT_NUMBER, NULL, ATTEMPT_NUMBER, FND_API.G_MISS_NUM, NULL, P_ATTEMPT_NUMBER)
		,BANK_ACCOUNT_ID = DECODE(P_BANK_ACCOUNT_ID, NULL, BANK_ACCOUNT_ID, FND_API.G_MISS_NUM, NULL, P_BANK_ACCOUNT_ID)
		,PAYMENT_METHOD_CODE = DECODE(P_PAYMENT_METHOD_CODE, NULL, PAYMENT_METHOD_CODE, FND_API.G_MISS_CHAR, NULL, P_PAYMENT_METHOD_CODE)
		,REQUEST_DATE = DECODE(P_REQUEST_DATE, NULL, REQUEST_DATE, FND_API.G_MISS_DATE, NULL, P_REQUEST_DATE)
		,PAYMENT_REQUEST_DATE = DECODE(P_PAYMENT_REQUEST_DATE, NULL, PAYMENT_REQUEST_DATE, FND_API.G_MISS_DATE, NULL, P_PAYMENT_REQUEST_DATE)
		,STATUS = DECODE(P_STATUS, NULL, STATUS, FND_API.G_MISS_CHAR, NULL, P_STATUS)
		,MESSAGES = DECODE(P_MESSAGES, NULL, MESSAGES, FND_API.G_MISS_CHAR, NULL, P_MESSAGES)
		,OBJECT_VERSION_NUMBER = DECODE(P_OBJECT_VERSION_NUMBER, NULL, OBJECT_VERSION_NUMBER, FND_API.G_MISS_NUM, NULL, P_OBJECT_VERSION_NUMBER)
		,LAST_UPDATE_DATE = LNS_UTILITY_PUB.LAST_UPDATE_DATE
		,LAST_UPDATED_BY = LNS_UTILITY_PUB.LAST_UPDATED_BY
		,LAST_UPDATE_LOGIN = LNS_UTILITY_PUB.LAST_UPDATE_LOGIN
	 WHERE DISB_HISTORY_ID = P_DISB_HISTORY_ID;

	if (sql%notfound) then
		raise no_data_found;
	end if;
END Update_Row;

/* Delete_Row procedure */
PROCEDURE Delete_Row(P_DISB_HISTORY_ID IN NUMBER) IS
BEGIN
	DELETE FROM LNS_DISB_HISTORIES_H
		WHERE DISB_HISTORY_ID = P_DISB_HISTORY_ID;

	if (sql%notfound) then
		raise no_data_found;
	end if;
END Delete_Row;

/* Lock_Row procedure */
PROCEDURE Lock_Row(
	P_DISB_HISTORY_ID		IN NUMBER
	,P_DISB_LINE_ID		IN NUMBER
	,P_ATTEMPT_NUMBER		IN NUMBER
	,P_BANK_ACCOUNT_ID		IN NUMBER
	,P_PAYMENT_METHOD_CODE		IN VARCHAR2
	,P_REQUEST_DATE		IN DATE
	,P_PAYMENT_REQUEST_DATE		IN DATE
	,P_STATUS		IN VARCHAR2
	,P_MESSAGES		IN VARCHAR2
	,P_OBJECT_VERSION_NUMBER		IN NUMBER
	,P_CREATION_DATE		IN DATE
	,P_CREATED_BY		IN NUMBER
	,P_LAST_UPDATE_DATE		IN DATE
	,P_LAST_UPDATED_BY		IN NUMBER
	,P_LAST_UPDATE_LOGIN		IN NUMBER
) IS
	CURSOR C IS SELECT * FROM LNS_DISB_HISTORIES_H
		WHERE DISB_HISTORY_ID = P_DISB_HISTORY_ID
		FOR UPDATE of DISB_HISTORY_ID NOWAIT;
	Recinfo C%ROWTYPE;
BEGIN
	OPEN C;
	FETCH C INTO Recinfo;
	IF (C%NOTFOUND) THEN
		CLOSE C;
		FND_MESSAGE.Set_Name('FND', 'FORM_RECORD_DELETED');
		APP_EXCEPTION.Raise_Exception;
	END IF;
	CLOSE C;

	IF (
		(Recinfo.DISB_HISTORY_ID = P_DISB_HISTORY_ID)
		AND ( (Recinfo.DISB_LINE_ID = P_DISB_LINE_ID)
			OR ( (Recinfo.DISB_LINE_ID IS NULL)
				AND (P_DISB_LINE_ID IS NULL)))
		AND ( (Recinfo.ATTEMPT_NUMBER = P_ATTEMPT_NUMBER)
			OR ( (Recinfo.ATTEMPT_NUMBER IS NULL)
				AND (P_ATTEMPT_NUMBER IS NULL)))
		AND ( (Recinfo.BANK_ACCOUNT_ID = P_BANK_ACCOUNT_ID)
			OR ( (Recinfo.BANK_ACCOUNT_ID IS NULL)
				AND (P_BANK_ACCOUNT_ID IS NULL)))
		AND ( (Recinfo.PAYMENT_METHOD_CODE = P_PAYMENT_METHOD_CODE)
			OR ( (Recinfo.PAYMENT_METHOD_CODE IS NULL)
				AND (P_PAYMENT_METHOD_CODE IS NULL)))
		AND ( (Recinfo.REQUEST_DATE = P_REQUEST_DATE)
			OR ( (Recinfo.REQUEST_DATE IS NULL)
				AND (P_REQUEST_DATE IS NULL)))
		AND ( (Recinfo.PAYMENT_REQUEST_DATE = P_PAYMENT_REQUEST_DATE)
			OR ( (Recinfo.PAYMENT_REQUEST_DATE IS NULL)
				AND (P_PAYMENT_REQUEST_DATE IS NULL)))
		AND ( (Recinfo.STATUS = P_STATUS)
			OR ( (Recinfo.STATUS IS NULL)
				AND (P_STATUS IS NULL)))
		AND ( (Recinfo.MESSAGES = P_MESSAGES)
			OR ( (Recinfo.MESSAGES IS NULL)
				AND (P_MESSAGES IS NULL)))
		AND ( (Recinfo.OBJECT_VERSION_NUMBER = P_OBJECT_VERSION_NUMBER)
			OR ( (Recinfo.OBJECT_VERSION_NUMBER IS NULL)
				AND (P_OBJECT_VERSION_NUMBER IS NULL)))
		AND ( (Recinfo.CREATION_DATE = P_CREATION_DATE)
			OR ( (Recinfo.CREATION_DATE IS NULL)
				AND (P_CREATION_DATE IS NULL)))
		AND ( (Recinfo.CREATED_BY = P_CREATED_BY)
			OR ( (Recinfo.CREATED_BY IS NULL)
				AND (P_CREATED_BY IS NULL)))
		AND ( (Recinfo.LAST_UPDATE_DATE = P_LAST_UPDATE_DATE)
			OR ( (Recinfo.LAST_UPDATE_DATE IS NULL)
				AND (P_LAST_UPDATE_DATE IS NULL)))
		AND ( (Recinfo.LAST_UPDATED_BY = P_LAST_UPDATED_BY)
			OR ( (Recinfo.LAST_UPDATED_BY IS NULL)
				AND (P_LAST_UPDATED_BY IS NULL)))
		AND ( (Recinfo.LAST_UPDATE_LOGIN = P_LAST_UPDATE_LOGIN)
			OR ( (Recinfo.LAST_UPDATE_LOGIN IS NULL)
				AND (P_LAST_UPDATE_LOGIN IS NULL)))
	   ) THEN
		return;
	ELSE
		FND_MESSAGE.Set_Name('FND', 'FORM_RECORD_CHANGED');
		APP_EXCEPTION.Raise_Exception;
	END IF;
END Lock_Row;
END;


/
