--------------------------------------------------------
--  DDL for Package Body WSH_WSHRDSDL_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."WSH_WSHRDSDL_XMLP_PKG" AS
/* $Header: WSHRDSDLB.pls 120.2 2007/12/25 07:28:51 nchinnam noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Failed FND SRWINIT.')*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    BEGIN
      DECLARE
        L_REPORT_NAME CHAR(240);
      BEGIN
        SELECT
          CP.USER_CONCURRENT_PROGRAM_NAME
        INTO L_REPORT_NAME
        FROM
          FND_CONCURRENT_PROGRAMS_VL CP,
          FND_CONCURRENT_REQUESTS CR
        WHERE CR.REQUEST_ID = P_CONC_REQUEST_ID
          AND CP.APPLICATION_ID = CR.PROGRAM_APPLICATION_ID
          AND CP.CONCURRENT_PROGRAM_ID = CR.CONCURRENT_PROGRAM_ID;
        REPORT_NAME := L_REPORT_NAME;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          REPORT_NAME := 'Shipped Delivery Lines Report';
      END;
      IF (P_SHIP_FROM_ORG_ID IS NOT NULL) THEN
        SELECT
          ORGANIZATION_NAME
        INTO REPORT_SHIP_FROM
        FROM
          ORG_ORGANIZATION_DEFINITIONS
        WHERE ORGANIZATION_ID = P_SHIP_FROM_ORG_ID;
      END IF;
      IF (P_ORDER_TYPE IS NOT NULL) THEN
        SELECT
          SOURCE_TYPE_NAME
        INTO REPORT_ORDER_TYPE
        FROM
          WSH_SOURCE_TYPES_V
        WHERE SOURCE_TYPE_ID = P_ORDER_TYPE;
      END IF;
      IF (P_SHIP_METHOD IS NOT NULL) THEN
        REPORT_SHIP_METHOD := P_SHIP_METHOD;
      END IF;
      IF (P_ITEM IS NOT NULL) THEN
        REPORT_ITEM := WSH_UTIL_CORE.GET_ITEM_NAME(P_ITEM
                                                  ,P_SHIP_FROM_ORG_ID);
      END IF;
      IF (P_ITEM_DISPLAY IS NOT NULL) THEN
        SELECT
          MEANING
        INTO REPORT_ITEM_DISPLAY
        FROM
          WSH_LOOKUPS
        WHERE LOOKUP_TYPE = 'ITEM_DISPLAY'
          AND LOOKUP_CODE = P_ITEM_DISPLAY;
      END IF;
      IF (P_SHIP_DATE_LOW IS NOT NULL) THEN
        REPORT_SHIP_DATE_FROM := P_SHIP_DATE_LOW;
      END IF;
      IF (P_SHIP_DATE_HIGH IS NOT NULL) THEN
        REPORT_SHIP_DATE_TO := P_SHIP_DATE_HIGH;
      END IF;
      IF (P_ORDER_NUMBER_LOW IS NOT NULL) THEN
        REPORT_ORDER_NUMBER_FROM := P_ORDER_NUMBER_LOW;
      END IF;
      IF (P_ORDER_NUMBER_HIGH IS NOT NULL) THEN
        REPORT_ORDER_NUMBER_TO := P_ORDER_NUMBER_HIGH;
      END IF;
      IF (P_DELIVERY_LOW IS NOT NULL) THEN
        REPORT_DELIVERY_FROM := P_DELIVERY_LOW;
      END IF;
      IF (P_DELIVERY_HIGH IS NOT NULL) THEN
        REPORT_DELIVERY_TO := P_DELIVERY_HIGH;
      END IF;
      IF (P_CUSTOMER_NAME_LOW IS NOT NULL) THEN
        REPORT_CUSTOMER_FROM := P_CUSTOMER_NAME_LOW;
      END IF;
      IF (P_CUSTOMER_NAME_HIGH IS NOT NULL) THEN
        REPORT_CUSTOMER_TO := P_CUSTOMER_NAME_HIGH;
      END IF;
      SELECT
        MEANING
      INTO REPORT_SORT_BY_1
      FROM
        WSH_LOOKUPS
      WHERE LOOKUP_TYPE = 'WSH_ORDER_BY'
        AND LOOKUP_CODE = P_ORDER_BY_1;
      SELECT
        MEANING
      INTO REPORT_SORT_BY_2
      FROM
        WSH_LOOKUPS
      WHERE LOOKUP_TYPE = 'WSH_ORDER_BY'
        AND LOOKUP_CODE = P_ORDER_BY_2;
      SELECT
        MEANING
      INTO REPORT_SORT_BY_3
      FROM
        WSH_LOOKUPS
      WHERE LOOKUP_TYPE = 'WSH_ORDER_BY'
        AND LOOKUP_CODE = P_ORDER_BY_3;
    EXCEPTION
      WHEN OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Failed Placeholder Columns Initialization!')*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END BEFOREREPORT;
  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    DECLARE
      CURSOR STRUCT_NUM(FLEX_CODE IN VARCHAR2) IS
        SELECT
          ID_FLEX_NUM
        FROM
          FND_ID_FLEX_STRUCTURES
        WHERE ID_FLEX_CODE = FLEX_CODE;
      STRUCT_NUMBER NUMBER;
      ORDER_BY_1 VARCHAR2(50);
      ORDER_BY_2 VARCHAR2(50);
      ORDER_BY_3 VARCHAR2(50);
      CUSTOMER_LOW VARCHAR2(55);
      CUSTOMER_HIGH VARCHAR2(55);
    BEGIN
      BEGIN
        /*SRW.REFERENCE(P_DELIVERY_LOW)*/NULL;
        /*SRW.REFERENCE(P_DELIVERY_HIGH)*/NULL;
        /*SRW.REFERENCE(P_CUSTOMER_NAME_LOW)*/NULL;
        /*SRW.REFERENCE(P_CUSTOMER_NAME_HIGH)*/NULL;
        /*SRW.REFERENCE(P_ORDER_NUMBER_LOW)*/NULL;
        /*SRW.REFERENCE(P_ORDER_NUMBER_HIGH)*/NULL;
        /*SRW.REFERENCE(P_SHIP_DATE_LOW)*/NULL;
        /*SRW.REFERENCE(P_SHIP_DATE_HIGH)*/NULL;
        /*SRW.REFERENCE(P_ITEM_DISPLAY)*/NULL;
        /*SRW.REFERENCE(P_ITEM)*/NULL;
        /*SRW.REFERENCE(P_ORDER_TYPE)*/NULL;
        /*SRW.REFERENCE(P_SHIP_METHOD)*/NULL;
        /*SRW.REFERENCE(P_ORDER_BY_1)*/NULL;
        /*SRW.REFERENCE(P_ORDER_BY_2)*/NULL;
        /*SRW.REFERENCE(P_ORDER_BY_3)*/NULL;
        /*SRW.REFERENCE(P_SHIP_FROM_ORG_ID)*/NULL;
        IF (P_SHIP_FROM_ORG_ID IS NOT NULL) THEN
          LP_SHIP_FROM_ORG_ID := ' AND WDD.ORGANIZATION_ID = :P_SHIP_FROM_ORG_ID ';
        END IF;
        IF (P_ORDER_TYPE IS NOT NULL) THEN
          LP_ORDER_TYPE := ' AND WDD.SOURCE_HEADER_TYPE_ID = :P_ORDER_TYPE ';
        END IF;
        IF (P_SHIP_METHOD IS NOT NULL) THEN
          LP_SHIP_METHOD := ' AND NVL(WT.SHIP_METHOD_CODE,WDD.SHIP_METHOD_CODE) = :P_SHIP_METHOD ';
        END IF;
        IF (P_ITEM IS NOT NULL) THEN
          LP_ITEM := ' AND WDD.INVENTORY_ITEM_ID = :P_ITEM ';
        END IF;
        IF (P_SHIP_DATE_LOW IS NOT NULL AND P_SHIP_DATE_HIGH IS NOT NULL AND P_ORDER_NUMBER_LOW IS NULL AND P_CUSTOMER_NAME_LOW IS NULL) THEN
          LP_TABLE_NAME := '( select /*+ leading(wts) cardinality(wts,3)*/ * from wsh_trip_stops wts ) WTS';
        ELSE
          LP_TABLE_NAME := 'WSH_TRIP_STOPS WTS';
        END IF;
        LP_WHERE_CLAUSE := ' AND WDL.PICK_UP_STOP_ID = WTS.STOP_ID ';
        LP_WHERE_CLAUSE := LP_WHERE_CLAUSE || ' AND WTS.TRIP_ID = WT.TRIP_ID ';
        LP_WHERE_CLAUSE := LP_WHERE_CLAUSE || ' AND WTS.STOP_LOCATION_ID = WDD.SHIP_FROM_LOCATION_ID ';
        IF ((P_SHIP_DATE_LOW IS NOT NULL) AND (P_SHIP_DATE_HIGH IS NOT NULL)) THEN
          LP_SHIP_DATE := ' AND (WTS.ACTUAL_DEPARTURE_DATE BETWEEN  FND_DATE.CANONICAL_TO_DATE(:P_SHIP_DATE_LOW)  AND FND_DATE.CANONICAL_TO_DATE(:P_SHIP_DATE_HIGH)) ';
        ELSIF (P_SHIP_DATE_LOW IS NOT NULL) THEN
          LP_SHIP_DATE := ' AND WTS.ACTUAL_DEPARTURE_DATE >= FND_DATE.CANONICAL_TO_DATE(:P_SHIP_DATE_LOW)  ';
        ELSIF (P_SHIP_DATE_HIGH IS NOT NULL) THEN
          LP_SHIP_DATE := ' AND WTS.ACTUAL_DEPARTURE_DATE <= FND_DATE.CANONICAL_TO_DATE(:P_SHIP_DATE_HIGH) ';
        END IF;
        IF ((P_ORDER_NUMBER_LOW IS NOT NULL) AND (P_ORDER_NUMBER_HIGH IS NOT NULL)) THEN
          LP_ORDER_NUMBER := ' AND (WDD.SOURCE_HEADER_NUMBER BETWEEN :P_ORDER_NUMBER_LOW AND :P_ORDER_NUMBER_HIGH) ';
        ELSIF (P_ORDER_NUMBER_LOW IS NOT NULL) THEN
          LP_ORDER_NUMBER := ' AND WDD.SOURCE_HEADER_NUMBER >= :P_ORDER_NUMBER_LOW ';
        ELSIF (P_ORDER_NUMBER_HIGH IS NOT NULL) THEN
          LP_ORDER_NUMBER := ' AND WDD.SOURCE_HEADER_NUMBER <= :P_ORDER_NUMBER_HIGH ';
        END IF;
        IF ((P_DELIVERY_LOW IS NOT NULL) AND (P_DELIVERY_HIGH IS NOT NULL)) THEN
          LP_DELIVERY := ' AND (WND.NAME BETWEEN :P_DELIVERY_LOW AND :P_DELIVERY_HIGH) ';
        ELSIF (P_DELIVERY_LOW IS NOT NULL) THEN
          LP_DELIVERY := ' AND WND.NAME >= :P_DELIVERY_LOW ';
        ELSIF (P_DELIVERY_HIGH IS NOT NULL) THEN
          LP_DELIVERY := ' AND WND.NAME <= :P_DELIVERY_HIGH ';
        END IF;
        IF (P_CUSTOMER_NAME_LOW IS NOT NULL) THEN
          SELECT
            SUBSTRB(PARTY.PARTY_NAME
                   ,1
                   ,50)
          INTO CUSTOMER_LOW
          FROM
            HZ_PARTIES PARTY
          WHERE PARTY.PARTY_ID = (
            SELECT
              CUST_ACCT.PARTY_ID
            FROM
              HZ_CUST_ACCOUNTS CUST_ACCT
            WHERE CUST_ACCT.CUST_ACCOUNT_ID = P_CUSTOMER_NAME_LOW );
        END IF;
        IF (P_CUSTOMER_NAME_HIGH IS NOT NULL) THEN
          SELECT
            SUBSTRB(PARTY.PARTY_NAME
                   ,1
                   ,50)
          INTO CUSTOMER_HIGH
          FROM
            HZ_PARTIES PARTY
          WHERE PARTY.PARTY_ID = (
            SELECT
              CUST_ACCT.PARTY_ID
            FROM
              HZ_CUST_ACCOUNTS CUST_ACCT
            WHERE CUST_ACCT.CUST_ACCOUNT_ID = P_CUSTOMER_NAME_HIGH );
        END IF;
        IF ((P_CUSTOMER_NAME_LOW IS NOT NULL) AND (P_CUSTOMER_NAME_HIGH IS NOT NULL)) THEN
          IF (P_CUSTOMER_NAME_LOW = P_CUSTOMER_NAME_HIGH) THEN
            LP_CUSTOMER_NAME := ' AND SUBSTRB(PARTY.PARTY_NAME,1,50) = ''' || CUSTOMER_LOW || ''' ';
          ELSE
            LP_CUSTOMER_NAME := ' AND (SUBSTRB(PARTY.PARTY_NAME,1,50) BETWEEN  ''' || CUSTOMER_LOW || ''' AND  ''' || CUSTOMER_HIGH || ''') ';
          END IF;
        ELSIF (P_CUSTOMER_NAME_LOW IS NOT NULL) THEN
          LP_CUSTOMER_NAME := ' AND SUBSTRB(PARTY.PARTY_NAME,1,50) >= ''' || CUSTOMER_LOW || ''' ';
        ELSIF (P_CUSTOMER_NAME_HIGH IS NOT NULL) THEN
          LP_CUSTOMER_NAME := ' AND SUBSTRB(PARTY.PARTY_NAME,1,50) <= ''' || CUSTOMER_HIGH || ''' ';
        END IF;
        OPEN STRUCT_NUM(P_ITEM_FLEX_CODE);
        FETCH STRUCT_NUM
         INTO STRUCT_NUMBER;
        CLOSE STRUCT_NUM;
        LP_STRUCTURE_NUM := STRUCT_NUMBER;
        IF P_ORDER_BY_1 = 'CUSTOMER' THEN
          ORDER_BY_1 := ' SUBSTRB(PARTY.PARTY_NAME,1,50) ';
        ELSIF P_ORDER_BY_1 = 'SHIP_METHOD' THEN
          ORDER_BY_1 := 'SHIP_METHOD';
        ELSIF P_ORDER_BY_1 = 'ITEM' THEN
          IF P_ITEM_DISPLAY = 'D' THEN
            ORDER_BY_1 := 'lower(WDD.ITEM_DESCRIPTION)';
          ELSE
            ORDER_BY_1 := 'lower(ITEM_SEG)';
          END IF;
        ELSIF P_ORDER_BY_1 = 'SHIP_DATE' THEN
          ORDER_BY_1 := 'WTS.ACTUAL_DEPARTURE_DATE';
        ELSIF P_ORDER_BY_1 = 'DELIVERY' THEN
          ORDER_BY_1 := 'WND.NAME';
        END IF;
        IF P_ORDER_BY_2 = 'CUSTOMER' THEN
          ORDER_BY_2 := ' SUBSTRB(PARTY.PARTY_NAME,1,50) ';
        ELSIF P_ORDER_BY_2 = 'SHIP_METHOD' THEN
          ORDER_BY_2 := 'SHIP_METHOD';
        ELSIF P_ORDER_BY_2 = 'ITEM' THEN
          IF P_ITEM_DISPLAY = 'D' THEN
            ORDER_BY_2 := 'lower(WDD.ITEM_DESCRIPTION)';
          ELSE
            ORDER_BY_2 := 'lower(ITEM_SEG)';
          END IF;
        ELSIF P_ORDER_BY_2 = 'SHIP_DATE' THEN
          ORDER_BY_2 := 'WTS.ACTUAL_DEPARTURE_DATE';
        ELSIF P_ORDER_BY_2 = 'DELIVERY' THEN
          ORDER_BY_2 := 'WND.NAME';
        END IF;
        IF P_ORDER_BY_3 = 'CUSTOMER' THEN
          ORDER_BY_3 := ' SUBSTRB(PARTY.PARTY_NAME,1,50) ';
        ELSIF P_ORDER_BY_3 = 'SHIP_METHOD' THEN
          ORDER_BY_3 := 'SHIP_METHOD';
        ELSIF P_ORDER_BY_3 = 'ITEM' THEN
          IF P_ITEM_DISPLAY = 'D' THEN
            ORDER_BY_3 := 'lower(WDD.ITEM_DESCRIPTION)';
          ELSE
            ORDER_BY_3 := 'lower(ITEM_SEG)';
          END IF;
        ELSIF P_ORDER_BY_3 = 'SHIP_DATE' THEN
          ORDER_BY_3 := 'WTS.ACTUAL_DEPARTURE_DATE';
        ELSIF P_ORDER_BY_3 = 'DELIVERY' THEN
          ORDER_BY_3 := 'WND.NAME';
        END IF;
        LP_ORDER_BY := ORDER_BY_1 || ',' || ORDER_BY_2 || ',' || ORDER_BY_3;
      EXCEPTION
        WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
          /*SRW.MESSAGE(2000
                     ,'Failed in AFTER FORM trigger. FND FLEXSQL USER_EXIT')*/NULL;
          /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      END;
    END;
    RETURN (TRUE);
  END AFTERPFORM;
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Failed in SRWEXIT')*/NULL;
        RAISE;
    END;
    RETURN (TRUE);
  END AFTERREPORT;
  FUNCTION CF_RELEASED_QUANTITYFORMULA(DELIVERY_LINE IN NUMBER
                                      ,SOURCE_HEADER_ID IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      CURSOR C_REQUESTED_QTY(P_DETAIL_ID IN NUMBER,P_SOURCE_HEADER_ID IN NUMBER) IS
        SELECT
          SUM(NVL(PICKED_QUANTITY
                 ,0))
        FROM
          WSH_DELIVERY_DETAILS
        START WITH DELIVERY_DETAIL_ID = P_DETAIL_ID
        CONNECT BY prior DELIVERY_DETAIL_ID = SPLIT_FROM_DELIVERY_DETAIL_ID
          AND SOURCE_HEADER_ID = P_SOURCE_HEADER_ID
          AND RELEASED_STATUS = 'Y';
      L_REQUESTED_QTY NUMBER := NULL;
    BEGIN
      OPEN C_REQUESTED_QTY(DELIVERY_LINE,SOURCE_HEADER_ID);
      FETCH C_REQUESTED_QTY
       INTO L_REQUESTED_QTY;
      CLOSE C_REQUESTED_QTY;
      RETURN L_REQUESTED_QTY;
    END;
  END CF_RELEASED_QUANTITYFORMULA;
  FUNCTION CF_ITEM_DISPLAYFORMULA(INVENTORY_ITEM_ID IN NUMBER
                                 ,SHIP_FROM_ORGANIZATION IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      CURSOR INVENTORY_LABEL(ID IN NUMBER,ORG_ID IN NUMBER) IS
        SELECT
          DESCRIPTION
        FROM
          MTL_SYSTEM_ITEMS_VL
        WHERE INVENTORY_ITEM_ID = ID
          AND ORGANIZATION_ID = ORG_ID;
      NAME VARCHAR2(800);
    BEGIN
      IF P_ITEM_DISPLAY = 'D' THEN
        OPEN INVENTORY_LABEL(INVENTORY_ITEM_ID,SHIP_FROM_ORGANIZATION);
        FETCH INVENTORY_LABEL
         INTO NAME;
        CLOSE INVENTORY_LABEL;
      ELSIF P_ITEM_DISPLAY = 'F' THEN
        NAME := WSH_UTIL_CORE.GET_ITEM_NAME(INVENTORY_ITEM_ID
                                           ,SHIP_FROM_ORGANIZATION
                                           ,P_ITEM_FLEX_CODE
                                           ,LP_STRUCTURE_NUM);
      ELSE
        OPEN INVENTORY_LABEL(INVENTORY_ITEM_ID,SHIP_FROM_ORGANIZATION);
        FETCH INVENTORY_LABEL
         INTO NAME;
        CLOSE INVENTORY_LABEL;
        NAME := WSH_UTIL_CORE.GET_ITEM_NAME(INVENTORY_ITEM_ID
                                           ,SHIP_FROM_ORGANIZATION
                                           ,P_ITEM_FLEX_CODE
                                           ,LP_STRUCTURE_NUM) || '     ' || NAME;
      END IF;
      RETURN NAME;
    END;
    RETURN NULL;
  END CF_ITEM_DISPLAYFORMULA;
  FUNCTION CF_SHIP_FROM_ORGANIZATION_NAME(SHIP_FROM_ORGANIZATION IN NUMBER) RETURN CHAR IS
  BEGIN
    DECLARE
      ORG_NAME ORG_ORGANIZATION_DEFINITIONS.ORGANIZATION_NAME%TYPE;
    BEGIN
      SELECT
        ORGANIZATION_NAME
      INTO ORG_NAME
      FROM
        ORG_ORGANIZATION_DEFINITIONS
      WHERE ORGANIZATION_ID = SHIP_FROM_ORGANIZATION;
      RETURN ORG_NAME;
    EXCEPTION
      WHEN OTHERS THEN
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
  END CF_SHIP_FROM_ORGANIZATION_NAME;
  FUNCTION CF_SHIP_DATEFORMULA(STOP_ID_1 IN NUMBER) RETURN VARCHAR2 IS
    CURSOR C_DEP_DATE IS
      SELECT
        TO_CHAR(ACTUAL_DEPARTURE_DATE
               ,'DD-MON-RRRR')
      FROM
        WSH_TRIP_STOPS WTS
      WHERE WTS.STOP_ID = STOP_ID_1;
    L_DEP_DATE VARCHAR2(20);
  BEGIN
    OPEN C_DEP_DATE;
    FETCH C_DEP_DATE
     INTO L_DEP_DATE;
    CLOSE C_DEP_DATE;
    RETURN L_DEP_DATE;
  END CF_SHIP_DATEFORMULA;
  FUNCTION REPORT_SORT_BY_1_P RETURN VARCHAR2 IS
  BEGIN
    RETURN REPORT_SORT_BY_1;
  END REPORT_SORT_BY_1_P;
  FUNCTION REPORT_SORT_BY_2_P RETURN VARCHAR2 IS
  BEGIN
    RETURN REPORT_SORT_BY_2;
  END REPORT_SORT_BY_2_P;
  FUNCTION REPORT_SORT_BY_3_P RETURN VARCHAR2 IS
  BEGIN
    RETURN REPORT_SORT_BY_3;
  END REPORT_SORT_BY_3_P;
  FUNCTION REPORT_SHIP_FROM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN REPORT_SHIP_FROM;
  END REPORT_SHIP_FROM_P;
  FUNCTION REPORT_ITEM_DISPLAY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN REPORT_ITEM_DISPLAY;
  END REPORT_ITEM_DISPLAY_P;
  FUNCTION REPORT_ITEM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN REPORT_ITEM;
  END REPORT_ITEM_P;
  FUNCTION REPORT_SHIP_METHOD_P RETURN VARCHAR2 IS
  BEGIN
    RETURN REPORT_SHIP_METHOD;
  END REPORT_SHIP_METHOD_P;
  FUNCTION REPORT_ORDER_TYPE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN REPORT_ORDER_TYPE;
  END REPORT_ORDER_TYPE_P;
  FUNCTION REPORT_DELIVERY_FROM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN REPORT_DELIVERY_FROM;
  END REPORT_DELIVERY_FROM_P;
  FUNCTION REPORT_DELIVERY_TO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN REPORT_DELIVERY_TO;
  END REPORT_DELIVERY_TO_P;
  FUNCTION REPORT_ORDER_NUMBER_FROM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN REPORT_ORDER_NUMBER_FROM;
  END REPORT_ORDER_NUMBER_FROM_P;
  FUNCTION REPORT_ORDER_NUMBER_TO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN REPORT_ORDER_NUMBER_TO;
  END REPORT_ORDER_NUMBER_TO_P;
  FUNCTION REPORT_CUSTOMER_FROM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN REPORT_CUSTOMER_FROM;
  END REPORT_CUSTOMER_FROM_P;
  FUNCTION REPORT_CUSTOMER_TO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN REPORT_CUSTOMER_TO;
  END REPORT_CUSTOMER_TO_P;
  FUNCTION REPORT_SHIP_DATE_FROM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN REPORT_SHIP_DATE_FROM;
  END REPORT_SHIP_DATE_FROM_P;
  FUNCTION REPORT_SHIP_DATE_TO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN REPORT_SHIP_DATE_TO;
  END REPORT_SHIP_DATE_TO_P;
  FUNCTION REPORT_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN REPORT_NAME;
  END REPORT_NAME_P;
END WSH_WSHRDSDL_XMLP_PKG;


/
