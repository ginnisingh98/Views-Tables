--------------------------------------------------------
--  DDL for Package Body ASO_PRICE_ADJ_ATTRIBS_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."ASO_PRICE_ADJ_ATTRIBS_PKG" as
/* $Header: asotpaab.pls 120.1 2005/06/29 12:39:30 appldev ship $ */
-- Start of Comments
-- Package name     : ASO_PRICE_ADJ_ATTRIBS_PKG
-- Purpose          :
-- History          :
-- NOTE             :
-- End of Comments


G_PKG_NAME CONSTANT VARCHAR2(30):= 'ASO_PRICE_ADJ_ATTRIBS_PKG';
G_FILE_NAME CONSTANT VARCHAR2(12) := 'asotpaab.pls';

PROCEDURE Insert_Row(
          px_PRICE_ADJ_ATTRIB_ID   IN OUT NOCOPY /* file.sql.39 change */   NUMBER,
          p_CREATION_DATE    DATE,
          p_CREATED_BY    NUMBER,
          p_LAST_UPDATE_DATE    DATE,
          p_LAST_UPDATED_BY    NUMBER,
          p_LAST_UPDATE_LOGIN    NUMBER,
          p_PROGRAM_APPLICATION_ID    NUMBER,
          p_PROGRAM_ID    NUMBER,
          p_PROGRAM_UPDATE_DATE    DATE,
          p_REQUEST_ID    NUMBER,
          p_PRICE_ADJUSTMENT_ID    NUMBER,
          p_PRICING_CONTEXT    VARCHAR2,
          p_PRICING_ATTRIBUTE    VARCHAR2,
          p_PRICING_ATTR_VALUE_FROM    VARCHAR2,
          p_PRICING_ATTR_VALUE_TO    VARCHAR2,
          p_COMPARISON_OPERATOR    VARCHAR2,
          p_FLEX_TITLE    VARCHAR2,
          p_OBJECT_VERSION_NUMBER  NUMBER
		)

 IS
   CURSOR C2 IS SELECT ASO_PRICE_ADJ_ATTRIBS_S.nextval FROM sys.dual;
BEGIN
   If (px_PRICE_ADJ_ATTRIB_ID IS NULL) OR (px_PRICE_ADJ_ATTRIB_ID = FND_API.G_MISS_NUM) then
       OPEN C2;
       FETCH C2 INTO px_PRICE_ADJ_ATTRIB_ID;
       CLOSE C2;
   End If;
   INSERT INTO ASO_PRICE_ADJ_ATTRIBS(
           PRICE_ADJ_ATTRIB_ID,
           CREATION_DATE,
           CREATED_BY,
           LAST_UPDATE_DATE,
           LAST_UPDATED_BY,
           LAST_UPDATE_LOGIN,
           PROGRAM_APPLICATION_ID,
           PROGRAM_ID,
           PROGRAM_UPDATE_DATE,
           REQUEST_ID,
           PRICE_ADJUSTMENT_ID,
           PRICING_CONTEXT,
           PRICING_ATTRIBUTE,
           PRICING_ATTR_VALUE_FROM,
           PRICING_ATTR_VALUE_TO,
           COMPARISON_OPERATOR,
           FLEX_TITLE,
           OBJECT_VERSION_NUMBER
          ) VALUES (
           px_PRICE_ADJ_ATTRIB_ID,
           ASO_UTILITY_PVT.decode( p_CREATION_DATE, FND_API.G_MISS_DATE, NULL, p_CREATION_DATE),
           decode( p_CREATED_BY, FND_API.G_MISS_NUM, NULL, p_CREATED_BY),
           ASO_UTILITY_PVT.decode( p_LAST_UPDATE_DATE, FND_API.G_MISS_DATE, NULL, p_LAST_UPDATE_DATE),
           decode( p_LAST_UPDATED_BY, FND_API.G_MISS_NUM, NULL, p_LAST_UPDATED_BY),
           decode( p_LAST_UPDATE_LOGIN, FND_API.G_MISS_NUM, NULL, p_LAST_UPDATE_LOGIN),
           decode( p_PROGRAM_APPLICATION_ID, FND_API.G_MISS_NUM, NULL, p_PROGRAM_APPLICATION_ID),
           decode( p_PROGRAM_ID, FND_API.G_MISS_NUM, NULL, p_PROGRAM_ID),
           ASO_UTILITY_PVT.decode( p_PROGRAM_UPDATE_DATE, FND_API.G_MISS_DATE, NULL, p_PROGRAM_UPDATE_DATE),
           decode( p_REQUEST_ID, FND_API.G_MISS_NUM, NULL, p_REQUEST_ID),
           decode( p_PRICE_ADJUSTMENT_ID, FND_API.G_MISS_NUM, NULL, p_PRICE_ADJUSTMENT_ID),
           decode( p_PRICING_CONTEXT, FND_API.G_MISS_CHAR, NULL, p_PRICING_CONTEXT),
           decode( p_PRICING_ATTRIBUTE, FND_API.G_MISS_CHAR, NULL, p_PRICING_ATTRIBUTE),
           decode( p_PRICING_ATTR_VALUE_FROM, FND_API.G_MISS_CHAR, NULL, p_PRICING_ATTR_VALUE_FROM),
           decode( p_PRICING_ATTR_VALUE_TO, FND_API.G_MISS_CHAR, NULL, p_PRICING_ATTR_VALUE_TO),
           decode( p_COMPARISON_OPERATOR, FND_API.G_MISS_CHAR, NULL, p_COMPARISON_OPERATOR),
           decode( p_FLEX_TITLE, FND_API.G_MISS_CHAR, NULL, p_FLEX_TITLE),
		 decode ( p_OBJECT_VERSION_NUMBER, FND_API.G_MISS_NUM,1,NULL,1, p_OBJECT_VERSION_NUMBER)
		 );
End Insert_Row;

PROCEDURE Update_Row(
          p_PRICE_ADJ_ATTRIB_ID    NUMBER,
          p_CREATION_DATE    DATE,
          p_CREATED_BY    NUMBER,
          p_LAST_UPDATE_DATE    DATE,
          p_LAST_UPDATED_BY    NUMBER,
          p_LAST_UPDATE_LOGIN    NUMBER,
          p_PROGRAM_APPLICATION_ID    NUMBER,
          p_PROGRAM_ID    NUMBER,
          p_PROGRAM_UPDATE_DATE    DATE,
          p_REQUEST_ID    NUMBER,
          p_PRICE_ADJUSTMENT_ID    NUMBER,
          p_PRICING_CONTEXT    VARCHAR2,
          p_PRICING_ATTRIBUTE    VARCHAR2,
          p_PRICING_ATTR_VALUE_FROM    VARCHAR2,
          p_PRICING_ATTR_VALUE_TO    VARCHAR2,
          p_COMPARISON_OPERATOR    VARCHAR2,
          p_FLEX_TITLE    VARCHAR2,
          p_OBJECT_VERSION_NUMBER  NUMBER
		)

 IS
 BEGIN
    Update ASO_PRICE_ADJ_ATTRIBS
    SET
             /* CREATION_DATE = ASO_UTILITY_PVT.decode( p_CREATION_DATE, FND_API.G_MISS_DATE, CREATION_DATE, p_CREATION_DATE),
              CREATED_BY = decode( p_CREATED_BY, FND_API.G_MISS_NUM, CREATED_BY, p_CREATED_BY),*/
              LAST_UPDATE_DATE = ASO_UTILITY_PVT.decode( p_LAST_UPDATE_DATE, FND_API.G_MISS_DATE, LAST_UPDATE_DATE, p_LAST_UPDATE_DATE),
              LAST_UPDATED_BY = decode( p_LAST_UPDATED_BY, FND_API.G_MISS_NUM, LAST_UPDATED_BY, p_LAST_UPDATED_BY),
              LAST_UPDATE_LOGIN = decode( p_LAST_UPDATE_LOGIN, FND_API.G_MISS_NUM, LAST_UPDATE_LOGIN, p_LAST_UPDATE_LOGIN),
              PROGRAM_APPLICATION_ID = decode( p_PROGRAM_APPLICATION_ID, FND_API.G_MISS_NUM, PROGRAM_APPLICATION_ID, p_PROGRAM_APPLICATION_ID),
              PROGRAM_ID = decode( p_PROGRAM_ID, FND_API.G_MISS_NUM, PROGRAM_ID, p_PROGRAM_ID),
              PROGRAM_UPDATE_DATE = ASO_UTILITY_PVT.decode( p_PROGRAM_UPDATE_DATE, FND_API.G_MISS_DATE, PROGRAM_UPDATE_DATE, p_PROGRAM_UPDATE_DATE),
              REQUEST_ID = decode( p_REQUEST_ID, FND_API.G_MISS_NUM, REQUEST_ID, p_REQUEST_ID),
              PRICE_ADJUSTMENT_ID = decode( p_PRICE_ADJUSTMENT_ID, FND_API.G_MISS_NUM, PRICE_ADJUSTMENT_ID, p_PRICE_ADJUSTMENT_ID),
              PRICING_CONTEXT = decode( p_PRICING_CONTEXT, FND_API.G_MISS_CHAR, PRICING_CONTEXT, p_PRICING_CONTEXT),
              PRICING_ATTRIBUTE = decode( p_PRICING_ATTRIBUTE, FND_API.G_MISS_CHAR, PRICING_ATTRIBUTE, p_PRICING_ATTRIBUTE),
              PRICING_ATTR_VALUE_FROM = decode( p_PRICING_ATTR_VALUE_FROM, FND_API.G_MISS_CHAR, PRICING_ATTR_VALUE_FROM, p_PRICING_ATTR_VALUE_FROM),
              PRICING_ATTR_VALUE_TO = decode( p_PRICING_ATTR_VALUE_TO, FND_API.G_MISS_CHAR, PRICING_ATTR_VALUE_TO, p_PRICING_ATTR_VALUE_TO),
              COMPARISON_OPERATOR = decode( p_COMPARISON_OPERATOR, FND_API.G_MISS_CHAR, COMPARISON_OPERATOR, p_COMPARISON_OPERATOR),
              FLEX_TITLE = decode( p_FLEX_TITLE, FND_API.G_MISS_CHAR, FLEX_TITLE, p_FLEX_TITLE),
		    OBJECT_VERSION_NUMBER = decode( p_OBJECT_VERSION_NUMBER, FND_API.G_MISS_NUM, nvl(OBJECT_VERSION_NUMBER,0)+1, nvl(p_OBJECT_VERSION_NUMBER, nvl(OBJECT_VERSION_NUMBER,0))+1)
    where PRICE_ADJ_ATTRIB_ID = p_PRICE_ADJ_ATTRIB_ID;

    If (SQL%NOTFOUND) then
        RAISE NO_DATA_FOUND;
    End If;
END Update_Row;

PROCEDURE Delete_Row(
    p_PRICE_ADJ_ATTRIB_ID  NUMBER)
 IS
 BEGIN
   DELETE FROM ASO_PRICE_ADJ_ATTRIBS
    WHERE PRICE_ADJ_ATTRIB_ID = p_PRICE_ADJ_ATTRIB_ID;
   If (SQL%NOTFOUND) then
       RAISE NO_DATA_FOUND;
   End If;
 END Delete_Row;

PROCEDURE Lock_Row(
          --p_OBJECT_VERSION_NUMBER  NUMBER,
          p_PRICE_ADJ_ATTRIB_ID    NUMBER,
          p_CREATION_DATE    DATE,
          p_CREATED_BY    NUMBER,
          p_LAST_UPDATE_DATE    DATE,
          p_LAST_UPDATED_BY    NUMBER,
          p_LAST_UPDATE_LOGIN    NUMBER,
          p_PROGRAM_APPLICATION_ID    NUMBER,
          p_PROGRAM_ID    NUMBER,
          p_PROGRAM_UPDATE_DATE    DATE,
          p_REQUEST_ID    NUMBER,
          p_PRICE_ADJUSTMENT_ID    NUMBER,
          p_PRICING_CONTEXT    VARCHAR2,
          p_PRICING_ATTRIBUTE    VARCHAR2,
          p_PRICING_ATTR_VALUE_FROM    VARCHAR2,
          p_PRICING_ATTR_VALUE_TO    VARCHAR2,
          p_COMPARISON_OPERATOR    VARCHAR2,
          p_FLEX_TITLE    VARCHAR2)

 IS
   CURSOR C IS
        SELECT PRICE_ADJ_ATTRIB_ID,
--OBJECT_VERSION_NUMBER,
CREATION_DATE,
CREATED_BY,
LAST_UPDATE_DATE,
LAST_UPDATED_BY,
LAST_UPDATE_LOGIN,
PROGRAM_APPLICATION_ID,
PROGRAM_ID,
PROGRAM_UPDATE_DATE,
REQUEST_ID,
PRICE_ADJUSTMENT_ID,
PRICING_CONTEXT,
PRICING_ATTRIBUTE,
PRICING_ATTR_VALUE_FROM,
PRICING_ATTR_VALUE_TO,
COMPARISON_OPERATOR,
FLEX_TITLE
         FROM ASO_PRICE_ADJ_ATTRIBS
        WHERE PRICE_ADJ_ATTRIB_ID =  p_PRICE_ADJ_ATTRIB_ID
        FOR UPDATE of PRICE_ADJ_ATTRIB_ID NOWAIT;
   Recinfo C%ROWTYPE;
 BEGIN
    OPEN C;
    FETCH C INTO Recinfo;
    If (C%NOTFOUND) then
        CLOSE C;
        FND_MESSAGE.SET_NAME('FND', 'FORM_RECORD_DELETED');
        APP_EXCEPTION.RAISE_EXCEPTION;
    End If;
    CLOSE C;
    if (
/*
           (      Recinfo.PRICE_ADJ_ATTRIB_ID = p_PRICE_ADJ_ATTRIB_ID)
       AND (    ( Recinfo.CREATION_DATE = p_CREATION_DATE)
            OR (    ( Recinfo.CREATION_DATE IS NULL )
                AND (  p_CREATION_DATE IS NULL )))
       AND (    ( Recinfo.CREATED_BY = p_CREATED_BY)
            OR (    ( Recinfo.CREATED_BY IS NULL )
                AND (  p_CREATED_BY IS NULL )))
       AND
*/
	  (    ( Recinfo.LAST_UPDATE_DATE = p_LAST_UPDATE_DATE)
            OR (    ( Recinfo.LAST_UPDATE_DATE IS NULL )
                AND (  p_LAST_UPDATE_DATE IS NULL )))
/*
       AND
       (    ( Recinfo.OBJECT_VERSION_NUMBER = p_OBJECT_VERSION_NUMBER)
             OR (    ( Recinfo.OBJECT_VERSION_NUMBER IS NULL )
                  AND (  p_OBJECT_VERSION_NUMBER IS NULL )))
       AND (    ( Recinfo.LAST_UPDATED_BY = p_LAST_UPDATED_BY)
            OR (    ( Recinfo.LAST_UPDATED_BY IS NULL )
                AND (  p_LAST_UPDATED_BY IS NULL )))
       AND (    ( Recinfo.LAST_UPDATE_LOGIN = p_LAST_UPDATE_LOGIN)
            OR (    ( Recinfo.LAST_UPDATE_LOGIN IS NULL )
                AND (  p_LAST_UPDATE_LOGIN IS NULL )))
       AND (    ( Recinfo.PROGRAM_APPLICATION_ID = p_PROGRAM_APPLICATION_ID)
            OR (    ( Recinfo.PROGRAM_APPLICATION_ID IS NULL )
                AND (  p_PROGRAM_APPLICATION_ID IS NULL )))
       AND (    ( Recinfo.PROGRAM_ID = p_PROGRAM_ID)
            OR (    ( Recinfo.PROGRAM_ID IS NULL )
                AND (  p_PROGRAM_ID IS NULL )))
       AND (    ( Recinfo.PROGRAM_UPDATE_DATE = p_PROGRAM_UPDATE_DATE)
            OR (    ( Recinfo.PROGRAM_UPDATE_DATE IS NULL )
                AND (  p_PROGRAM_UPDATE_DATE IS NULL )))
       AND (    ( Recinfo.REQUEST_ID = p_REQUEST_ID)
            OR (    ( Recinfo.REQUEST_ID IS NULL )
                AND (  p_REQUEST_ID IS NULL )))
       AND (    ( Recinfo.PRICE_ADJUSTMENT_ID = p_PRICE_ADJUSTMENT_ID)
            OR (    ( Recinfo.PRICE_ADJUSTMENT_ID IS NULL )
                AND (  p_PRICE_ADJUSTMENT_ID IS NULL )))
       AND (    ( Recinfo.PRICING_CONTEXT = p_PRICING_CONTEXT)
            OR (    ( Recinfo.PRICING_CONTEXT IS NULL )
                AND (  p_PRICING_CONTEXT IS NULL )))
       AND (    ( Recinfo.PRICING_ATTRIBUTE = p_PRICING_ATTRIBUTE)
            OR (    ( Recinfo.PRICING_ATTRIBUTE IS NULL )
                AND (  p_PRICING_ATTRIBUTE IS NULL )))
       AND (    ( Recinfo.PRICING_ATTR_VALUE_FROM = p_PRICING_ATTR_VALUE_FROM)
            OR (    ( Recinfo.PRICING_ATTR_VALUE_FROM IS NULL )
                AND (  p_PRICING_ATTR_VALUE_FROM IS NULL )))
       AND (    ( Recinfo.PRICING_ATTR_VALUE_TO = p_PRICING_ATTR_VALUE_TO)
            OR (    ( Recinfo.PRICING_ATTR_VALUE_TO IS NULL )
                AND (  p_PRICING_ATTR_VALUE_TO IS NULL )))
       AND (    ( Recinfo.COMPARISON_OPERATOR = p_COMPARISON_OPERATOR)
            OR (    ( Recinfo.COMPARISON_OPERATOR IS NULL )
                AND (  p_COMPARISON_OPERATOR IS NULL )))
       AND (    ( Recinfo.FLEX_TITLE = p_FLEX_TITLE)
            OR (    ( Recinfo.FLEX_TITLE IS NULL )
                AND (  p_FLEX_TITLE IS NULL )))
*/
       ) then
       return;
   else
       FND_MESSAGE.SET_NAME('FND', 'FORM_RECORD_CHANGED');
       APP_EXCEPTION.RAISE_EXCEPTION;
   End If;
END Lock_Row;

End ASO_PRICE_ADJ_ATTRIBS_PKG;

/
