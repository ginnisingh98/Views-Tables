--------------------------------------------------------
--  DDL for Package Body HRDPP_CREATE_PTNL_LER_FOR_PER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."HRDPP_CREATE_PTNL_LER_FOR_PER" as
/*
 * Generated by hr_pump_meta_mapper at: 2013/08/29 22:08:10
 * Generated for API: ben_ptnl_ler_for_per_api.CREATE_PTNL_LER_FOR_PER
 */
--
dh constant date := hr_api.g_date;
nh constant number := hr_api.g_number;
vh constant varchar2(64) := hr_api.g_varchar2;
c_sot constant date := to_date('01010001','DDMMYYYY');
cn constant varchar2(32) := '<NULL>';
dn constant date := null;
nn constant number := null;
vn constant varchar2(1) := null;
--
function dc(p in date) return varchar2 is
begin
if p<c_sot then
 if p<>trunc(p) then
  return to_char(p,'SYYYY/MM/DD HH24:MI:SS');
 end if;
 return to_char(p,'SYYYY/MM/DD');
elsif p<>trunc(p) then
 return to_char(p,'YYYY/MM/DD HH24:MI:SS');
end if;
return to_char(p,'YYYY/MM/DD');
end dc;
function d(p in varchar2) return date is
begin
if length(p)=10 then
return to_date(p,'YYYY/MM/DD');
elsif length(p)=19 then
return to_date(p,'YYYY/MM/DD HH24:MI:SS');
elsif length(p)=11 then
return to_date(p,'SYYYY/MM/DD');
elsif length(p)=20 then
return to_date(p,'SYYYY/MM/DD HH24:MI:SS');
end if;
-- Try default format as last resort.
return to_date(p,'YYYY/MM/DD');
end d;
function n(p in varchar2) return number is
begin
return to_number(p);
end n;
function dd(p in date,i in varchar2)
return varchar2 is
begin
if upper(i) = 'N' then return dc(p);
else return cn; end if;
end dd;
function nd(p in number,i in varchar2)
return varchar2 is
begin
if upper(i) = 'N' then return to_char(p);
else return cn; end if;
end nd;
--
procedure iuk
(p_batch_line_id  in number,
p_user_key_value in varchar2,
p_unique_key_id  in number)
is
begin
hr_data_pump.entry('ins_user_key');
insert into hr_pump_batch_line_user_keys
(user_key_id, batch_line_id,user_key_value,unique_key_id)
values
(hr_pump_batch_line_user_keys_s.nextval,
p_batch_line_id,
p_user_key_value,
p_unique_key_id);
hr_data_pump.exit('ins_user_key');
end iuk;
--
procedure insert_batch_lines
(p_batch_id      in number
,p_data_pump_batch_line_id in number default null
,p_data_pump_business_grp_name in varchar2 default null
,p_user_sequence in number default null
,p_link_value    in number default null
,P_PTNL_LER_FOR_PER_USER_KEY in varchar2
,P_LF_EVT_OCRD_DT in date default null
,P_PTNL_LER_FOR_PER_STAT_CD in varchar2 default null
,P_PTNL_LER_FOR_PER_SRC_CD in varchar2 default null
,P_MNL_DT in date default null
,P_DTCTD_DT in date default null
,P_PROCD_DT in date default null
,P_UNPROCD_DT in date default null
,P_VOIDD_DT in date default null
,P_MNLO_DT in date default null
,P_NTFN_DT in date default null
,P_PROGRAM_UPDATE_DATE in date default null
,P_EFFECTIVE_DATE in date
,P_CSD_BY_PPL_USER_KEY in varchar2 default null
,P_TRGR_TABLE_PK_USER_KEY in varchar2 default null
,P_ENRT_PERD_USER_KEY in varchar2 default null
,P_LIFE_EVENT_REASON in varchar2 default null
,P_PERSON_USER_KEY in varchar2 default null) is
blid number := p_data_pump_batch_line_id;
begin
if blid is not null then
delete from hr_pump_batch_lines where batch_line_id = blid;
delete from hr_pump_batch_exceptions
where source_type = 'BATCH_LINE' and source_id = blid;
end if;
insert into hr_pump_batch_lines
(batch_id
,batch_line_id
,business_group_name
,api_module_id
,line_status
,user_sequence
,link_value
,pval001
,pval002
,pval003
,pval004
,pval005
,pval006
,pval007
,pval008
,pval009
,pval010
,pval011
,pval012
,pval014
,pval015
,pval016
,pval017
,pval018
,pval019)
values
(p_batch_id
,nvl(blid,hr_pump_batch_lines_s.nextval)
,p_data_pump_business_grp_name
,660
,'U'
,p_user_sequence
,p_link_value
,P_PTNL_LER_FOR_PER_USER_KEY
,dc(P_LF_EVT_OCRD_DT)
,P_PTNL_LER_FOR_PER_STAT_CD
,P_PTNL_LER_FOR_PER_SRC_CD
,dc(P_MNL_DT)
,dc(P_DTCTD_DT)
,dc(P_PROCD_DT)
,dc(P_UNPROCD_DT)
,dc(P_VOIDD_DT)
,dc(P_MNLO_DT)
,dc(P_NTFN_DT)
,dc(P_PROGRAM_UPDATE_DATE)
,dc(P_EFFECTIVE_DATE)
,P_CSD_BY_PPL_USER_KEY
,P_TRGR_TABLE_PK_USER_KEY
,P_ENRT_PERD_USER_KEY
,P_LIFE_EVENT_REASON
,P_PERSON_USER_KEY);
end insert_batch_lines;
--
procedure call
(p_business_group_id in number,
p_batch_line_id     in number) is
cursor cr is
select l.rowid myrowid,
l.pval001 p1,
decode(l.pval002,cn,dn,vn,dn,d(l.pval002)) p2,
l.pval002 d2,
decode(l.pval003,cn,vn,vn,vn,
 hr_pump_get.gl(l.pval003,'BEN_PTNL_LER_FOR_PER_STAT',d(l.pval014),vn)) p3,
l.pval003 d3,
decode(l.pval004,cn,vn,vn,vn,
 hr_pump_get.gl(l.pval004,'BEN_PTNL_LER_FOR_PER_SRC',d(l.pval014),vn)) p4,
l.pval004 d4,
decode(l.pval005,cn,dn,vn,dn,d(l.pval005)) p5,
l.pval005 d5,
decode(l.pval006,cn,dn,vn,dn,d(l.pval006)) p6,
l.pval006 d6,
decode(l.pval007,cn,dn,vn,dn,d(l.pval007)) p7,
l.pval007 d7,
decode(l.pval008,cn,dn,vn,dn,d(l.pval008)) p8,
l.pval008 d8,
decode(l.pval009,cn,dn,vn,dn,d(l.pval009)) p9,
l.pval009 d9,
decode(l.pval010,cn,dn,vn,dn,d(l.pval010)) p10,
l.pval010 d10,
decode(l.pval011,cn,dn,vn,dn,d(l.pval011)) p11,
l.pval011 d11,
decode(l.pval012,cn,dn,vn,dn,d(l.pval012)) p12,
l.pval012 d12,
l.pval013 p13,
decode(l.pval014,cn,dn,d(l.pval014)) p14,
decode(l.pval015,cn,vn,vn,vn,l.pval015) p15,
l.pval015 d15,
decode(l.pval016,cn,vn,vn,vn,l.pval016) p16,
l.pval016 d16,
decode(l.pval017,cn,vn,vn,vn,l.pval017) p17,
l.pval017 d17,
decode(l.pval018,cn,vn,vn,vn,l.pval018) p18,
l.pval018 d18,
decode(l.pval019,cn,vn,vn,vn,l.pval019) p19,
l.pval019 d19
from hr_pump_batch_lines l
where l.batch_line_id = p_batch_line_id;
--
c cr%rowtype;
l_validate boolean := false;
L_PTNL_LER_FOR_PER_ID number;
L_CSD_BY_PTNL_LER_FOR_PER_ID number;
L_TRGR_TABLE_PK_ID number;
L_ENRT_PERD_ID number;
L_LER_ID number;
L_PERSON_ID number;
L_REQUEST_ID number;
L_PROGRAM_APPLICATION_ID number;
L_PROGRAM_ID number;
--
begin
hr_data_pump.entry('call');
open cr;
fetch cr into c;
if cr%notfound then
hr_utility.set_message(800,'HR_50326_DP_NO_ROW');
hr_utility.set_message_token('TABLE','HR_PUMP_BATCH_LINES');
hr_utility.set_message_token('COLUMN','P_BATCH_LINE_ID');
hr_utility.set_message_token('VALUE',p_batch_line_id);
hr_utility.raise_error;
end if;
--
if c.p15 is null then
L_CSD_BY_PTNL_LER_FOR_PER_ID:=nn;
else
L_CSD_BY_PTNL_LER_FOR_PER_ID := 
hr_pump_get.get_csd_by_ptnl_ler_for_per_id
(P_CSD_BY_PPL_USER_KEY => c.p15);
end if;
--
if c.p16 is null then
L_TRGR_TABLE_PK_ID:=nn;
else
L_TRGR_TABLE_PK_ID := 
hr_pump_get.get_trgr_table_pk_id
(P_TRGR_TABLE_PK_USER_KEY => c.p16);
end if;
--
if c.p17 is null then
L_ENRT_PERD_ID:=nn;
else
L_ENRT_PERD_ID := 
hr_pump_get.get_enrt_perd_id
(P_ENRT_PERD_USER_KEY => c.p17);
end if;
--
if c.p18 is null or
c.p14 is null then
L_LER_ID:=nn;
else
L_LER_ID := 
hr_pump_get.get_ler_id
(P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_LIFE_EVENT_REASON => c.p18
,P_EFFECTIVE_DATE => c.p14);
end if;
--
if c.p19 is null then
L_PERSON_ID:=nn;
else
L_PERSON_ID := 
hr_pump_get.get_person_id
(P_PERSON_USER_KEY => c.p19);
end if;
--
L_REQUEST_ID := 
hr_pump_get.get_request_id;
--
L_PROGRAM_APPLICATION_ID := 
hr_pump_get.get_program_application_id;
--
L_PROGRAM_ID := 
hr_pump_get.get_program_id;
--
hr_data_pump.api_trc_on;
ben_ptnl_ler_for_per_api.CREATE_PTNL_LER_FOR_PER
(p_validate => l_validate
,P_PTNL_LER_FOR_PER_ID => L_PTNL_LER_FOR_PER_ID
,P_CSD_BY_PTNL_LER_FOR_PER_ID => L_CSD_BY_PTNL_LER_FOR_PER_ID
,P_LF_EVT_OCRD_DT => c.p2
,P_TRGR_TABLE_PK_ID => L_TRGR_TABLE_PK_ID
,P_PTNL_LER_FOR_PER_STAT_CD => c.p3
,P_PTNL_LER_FOR_PER_SRC_CD => c.p4
,P_MNL_DT => c.p5
,P_ENRT_PERD_ID => L_ENRT_PERD_ID
,P_LER_ID => L_LER_ID
,P_PERSON_ID => L_PERSON_ID
,p_business_group_id => p_business_group_id
,P_DTCTD_DT => c.p6
,P_PROCD_DT => c.p7
,P_UNPROCD_DT => c.p8
,P_VOIDD_DT => c.p9
,P_MNLO_DT => c.p10
,P_NTFN_DT => c.p11
,P_REQUEST_ID => L_REQUEST_ID
,P_PROGRAM_APPLICATION_ID => L_PROGRAM_APPLICATION_ID
,P_PROGRAM_ID => L_PROGRAM_ID
,P_PROGRAM_UPDATE_DATE => c.p12
,P_OBJECT_VERSION_NUMBER => c.p13
,P_EFFECTIVE_DATE => c.p14);
hr_data_pump.api_trc_off;
--
iuk(p_batch_line_id,c.p1,L_PTNL_LER_FOR_PER_ID);
--
update hr_pump_batch_lines l set
l.pval001 = decode(c.p1,null,cn,c.p1),
l.pval013 = decode(c.p13,null,cn,c.p13)
where l.rowid = c.myrowid;
--
close cr;
--
hr_data_pump.exit('call');
exception
 when hr_multi_message.error_message_exist then
   if cr%isopen then
    close cr;
   end if;
   hr_pump_utils.set_multi_msg_error_flag(true);
 when others then
 if cr%isopen then
  close cr;
 end if;
 raise;
end call;
end hrdpp_CREATE_PTNL_LER_FOR_PER;

/
