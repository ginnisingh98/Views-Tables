--------------------------------------------------------
--  DDL for Package Body BOM_CSTRPICR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."BOM_CSTRPICR_XMLP_PKG" AS
/* $Header: CSTRPICRB.pls 120.1 2008/01/06 11:27:49 nchinnam noship $ */
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    EXECUTE IMMEDIATE
      'ROLLBACK';
    /*SRW.MESSAGE(0
               ,'BOM_CSTRPICR_XMLP_PKG >>     ' || TO_CHAR(SYSDATE
                      ,'Dy Mon DD HH24:MI:SS YYYY'))*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      L_FCN_CURRENCY VARCHAR2(15);
      L_REPORT_NAME VARCHAR2(80);
      SQL_STMT_NUM VARCHAR2(5);
    BEGIN
      SQL_STMT_NUM := '0: ';
      P_EXCHANGE_RATE := FND_NUMBER.CANONICAL_TO_NUMBER(P_EXCHANGE_RATE_CHAR);
      SQL_STMT_NUM := '1: ';
      IF P_VIEW_COST <> 1 THEN
        FND_MESSAGE.SET_NAME('null'
                            ,'null');
        /*SRW.USER_EXIT('FND MESSAGE_DISPLAY')*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      END IF;
      SQL_STMT_NUM := '3: ';
      SQL_STMT_NUM := '4: ';
      SELECT
        XFI.NAME,
        GLL.CURRENCY_CODE
      INTO P_LEGAL_ENTITY,L_FCN_CURRENCY
      FROM
        XLE_FIRSTPARTY_INFORMATION_V XFI,
        GL_LEDGER_LE_V GLL
      WHERE XFI.LEGAL_ENTITY_ID = P_LEGAL_ENTITY_ID
        AND GLL.LEGAL_ENTITY_ID = XFI.LEGAL_ENTITY_ID
        AND GLL.RELATIONSHIP_ENABLED_FLAG = 'Y'
        AND GLL.LEDGER_CATEGORY_CODE = 'PRIMARY';
      SQL_STMT_NUM := '5: ';
      SELECT
        NVL(FC.EXTENDED_PRECISION
           ,PRECISION),
        NVL(FC.PRECISION
           ,0),
        NVL(MINIMUM_ACCOUNTABLE_UNIT
           ,POWER(10
                ,NVL(-PRECISION
                   ,0)))
      INTO P_EXT_PREC,P_PRECISION,ROUND_UNIT
      FROM
        FND_CURRENCIES FC
      WHERE FC.CURRENCY_CODE = P_CURRENCY_CODE;
      SQL_STMT_NUM := '6: ';
      SELECT
        MCS.CATEGORY_SET_NAME
      INTO P_CAT_SET_NAME
      FROM
        MTL_CATEGORY_SETS MCS
      WHERE MCS.CATEGORY_SET_ID = P_CATEGORY_SET;
      SQL_STMT_NUM := '7: ';
      SELECT
        LU.MEANING
      INTO P_DETAIL_LEVEL
      FROM
        MFG_LOOKUPS LU
      WHERE LU.LOOKUP_TYPE = 'CST_BICR_DETAIL_OPTION'
        AND LU.LOOKUP_CODE = P_RPT_OPTION;
      SQL_STMT_NUM := '8: ';
      SELECT
        USERENV('SESSIONID')
      INTO P_SESSIONID
      FROM
        DUAL;
      SQL_STMT_NUM := '9: ';
      SELECT
        CT.COST_TYPE
      INTO P_COST_TYPE
      FROM
        CST_COST_TYPES CT
      WHERE CT.COST_TYPE_ID = P_COST_TYPE_ID;
      SQL_STMT_NUM := '10: ';
      SELECT
        CCG.COST_GROUP
      INTO P_COST_GROUP
      FROM
        CST_COST_GROUPS CCG
      WHERE CCG.COST_GROUP_ID = P_COST_GROUP_ID
        AND CCG.COST_GROUP_TYPE = 2;
      SQL_STMT_NUM := '12: ';
      SELECT
        PERIOD_NAME
      INTO P_PERIOD_NAME
      FROM
        CST_PAC_PERIODS
      WHERE PAC_PERIOD_ID = P_PERIOD_ID
        AND LEGAL_ENTITY = P_LEGAL_ENTITY_ID
        AND COST_TYPE_ID = P_COST_TYPE_ID;
      SQL_STMT_NUM := '13: ';
      SELECT
        MEANING
      INTO P_SORT_BY
      FROM
        MFG_LOOKUPS
      WHERE LOOKUP_TYPE = 'CST_ITEM_REPORT_SORT'
        AND LOOKUP_CODE = P_SORT_OPTION;
	 P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      IF P_CONC_REQUEST_ID > 0 THEN
        SELECT
          USER_CONCURRENT_PROGRAM_NAME
        INTO P_REPORT_NAME
        FROM
          FND_CONCURRENT_PROGRAMS_TL
        WHERE LANGUAGE = USERENV('LANG')
          AND CONCURRENT_PROGRAM_ID IN (
          SELECT
            P.CONCURRENT_PROGRAM_ID
          FROM
            FND_CONCURRENT_PROGRAMS P,
            FND_CONCURRENT_REQUESTS R
          WHERE R.REQUEST_ID = P_CONC_REQUEST_ID
            AND P.APPLICATION_ID = R.PROGRAM_APPLICATION_ID
            AND P.CONCURRENT_PROGRAM_ID = R.CONCURRENT_PROGRAM_ID );
      ELSE
        SELECT
          USER_CONCURRENT_PROGRAM_NAME
        INTO P_REPORT_NAME
        FROM
          FND_CONCURRENT_PROGRAMS_TL
        WHERE LANGUAGE = USERENV('LANG')
          AND CONCURRENT_PROGRAM_ID IN (
          SELECT
            CONCURRENT_PROGRAM_ID
          FROM
            FND_CONCURRENT_PROGRAMS P
          WHERE P.APPLICATION_ID = 702
            AND P.CONCURRENT_PROGRAM_NAME = 'BOM_CSTRPICR_XMLP_PKG' );
      END IF;
      SQL_STMT_NUM := '14: ';
      IF L_FCN_CURRENCY = P_CURRENCY_CODE THEN
        P_CURRENCY_DSP := P_CURRENCY_CODE;
      ELSE
        P_CURRENCY_DSP := P_CURRENCY_CODE || ' @ ' || TO_CHAR(ROUND(1 / P_EXCHANGE_RATE
                                       ,5)) || L_FCN_CURRENCY;
      END IF;
      SQL_STMT_NUM := '15: ';
      BEGIN

        /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
      EXCEPTION
        WHEN OTHERS THEN
          /*SRW.MESSAGE(999
                     ,'FND SRWINIT >X')*/NULL;
          RAISE;
      END;
      BEGIN
        NULL;
      EXCEPTION
        WHEN OTHERS THEN
          /*SRW.MESSAGE(999
                     ,'FND FLEXSQL(MCAT) >X')*/NULL;
          RAISE;
      END;
      BEGIN
        NULL;
      EXCEPTION
        WHEN OTHERS THEN
          /*SRW.MESSAGE(999
                     ,'FND FLEXSQL(MSTK) >X')*/NULL;
          RAISE;
      END;
      /*SRW.MESSAGE(0
                 ,'BOM_CSTRPICR_XMLP_PKG <<     ' || TO_CHAR(SYSDATE
                        ,'Dy Mon FmDD HH24:MI:SS YYYY'))*/NULL;
    EXCEPTION
      WHEN OTHERS THEN
        /*SRW.MESSAGE(999
                   ,SQL_STMT_NUM || SQLERRM)*/NULL;
        /*SRW.MESSAGE(999
                   ,'BOM_CSTRPICR_XMLP_PKG >X     ' || TO_CHAR(SYSDATE
                          ,'Dy Mon FmDD HH24:MI:SS YYYY'))*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END BEFOREREPORT;
  FUNCTION BEFOREPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END BEFOREPFORM;
  FUNCTION IC_REP_TOTAL_RFORMULA(IC_REP_TOTAL IN NUMBER) RETURN NUMBER IS
    IC_REP_TOTAL_R NUMBER;
  BEGIN
    IC_REP_TOTAL_R := ROUND(IC_REP_TOTAL / ROUND_UNIT) * ROUND_UNIT;
    RETURN IC_REP_TOTAL_R;
  END IC_REP_TOTAL_RFORMULA;
  FUNCTION IC_ORDERFORMULA(IC_CATEGORY IN VARCHAR2
                          ,IC_CATEGORY_SEGMENT IN VARCHAR2
                          ,IC_CAT_PSEG IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(IC_CATEGORY)*/NULL;
    /*SRW.REFERENCE(IC_CATEGORY_SEGMENT)*/NULL;
    /*SRW.REFERENCE(IC_CAT_PSEG)*/NULL;
    IF P_SORT_OPTION = 2 THEN
      RETURN (IC_CAT_PSEG);
    ELSE
      RETURN ('Item Sort');
    END IF;
    RETURN NULL;
  END IC_ORDERFORMULA;
  FUNCTION IC_CAT_TOTAL_RFORMULA(IC_CAT_TOTAL IN NUMBER) RETURN NUMBER IS
    IC_CAT_TOTAL_R NUMBER;
  BEGIN
    IC_CAT_TOTAL_R := ROUND(IC_CAT_TOTAL / ROUND_UNIT) * ROUND_UNIT;
    RETURN IC_CAT_TOTAL_R;
  END IC_CAT_TOTAL_RFORMULA;
  FUNCTION IC_ITEM_PSEGFORMULA(IC_ITEM_NUMBER IN VARCHAR2
                              ,IC_ITEM_SEGMENT IN VARCHAR2
                              ,IC_ITEM_PSEG IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(IC_ITEM_NUMBER)*/NULL;
    /*SRW.REFERENCE(IC_ITEM_SEGMENT)*/NULL;
    RETURN (IC_ITEM_PSEG);
  END IC_ITEM_PSEGFORMULA;
  FUNCTION IC_CAT_PSEGFORMULA(IC_CATEGORY IN VARCHAR2
                             ,IC_CATEGORY_SEGMENT IN VARCHAR2
                             ,IC_CAT_PSEG IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(IC_CATEGORY)*/NULL;
    /*SRW.REFERENCE(IC_CATEGORY_SEGMENT)*/NULL;
    RETURN (IC_CAT_PSEG);
  END IC_CAT_PSEGFORMULA;
  FUNCTION IC_TOTAL_COST_RFORMULA(IC_TOTAL_COST IN NUMBER) RETURN NUMBER IS
    IC_TOTAL_COST_R NUMBER;
  BEGIN
    IC_TOTAL_COST_R := STANDARD.ROUND(IC_TOTAL_COST / ROUND_UNIT
                                     ,0) * ROUND_UNIT;
    RETURN IC_TOTAL_COST_R;
  END IC_TOTAL_COST_RFORMULA;
  FUNCTION IC_MATL_COST_RFORMULA(IC_MATL_COST IN NUMBER) RETURN NUMBER IS
    IC_MATL_COST_R NUMBER;
  BEGIN
    IC_MATL_COST_R := ROUND(IC_MATL_COST / ROUND_UNIT) * ROUND_UNIT;
    RETURN IC_MATL_COST_R;
  END IC_MATL_COST_RFORMULA;
  FUNCTION IC_MO_COST_RFORMULA(IC_MO_COST IN NUMBER) RETURN NUMBER IS
    IC_MO_COST_R NUMBER;
  BEGIN
    IC_MO_COST_R := ROUND(IC_MO_COST / ROUND_UNIT) * ROUND_UNIT;
    RETURN IC_MO_COST_R;
  END IC_MO_COST_RFORMULA;
  FUNCTION IC_RES_COST_RFORMULA(IC_RES_COST IN NUMBER) RETURN NUMBER IS
    IC_RES_COST_R NUMBER;
  BEGIN
    IC_RES_COST_R := ROUND(IC_RES_COST / ROUND_UNIT) * ROUND_UNIT;
    RETURN IC_RES_COST_R;
  END IC_RES_COST_RFORMULA;
  FUNCTION IC_OVHD_COST_RFORMULA(IC_OVHD_COST IN NUMBER) RETURN NUMBER IS
    IC_OVHD_COST_R NUMBER;
  BEGIN
    IC_OVHD_COST_R := ROUND(IC_OVHD_COST / ROUND_UNIT) * ROUND_UNIT;
    RETURN IC_OVHD_COST_R;
  END IC_OVHD_COST_RFORMULA;
  FUNCTION IC_OSP_COST_RFORMULA(IC_OSP_COST IN NUMBER) RETURN NUMBER IS
    IC_OSP_COST_R NUMBER;
  BEGIN
    IC_OSP_COST_R := ROUND(IC_OSP_COST / ROUND_UNIT) * ROUND_UNIT;
    RETURN IC_OSP_COST_R;
  END IC_OSP_COST_RFORMULA;
  FUNCTION IC_TOT_MATL_COST_RFORMULA(IC_TOT_MATL_COST IN NUMBER) RETURN NUMBER IS
    IC_TOT_MATL_COST_R NUMBER;
  BEGIN
    IC_TOT_MATL_COST_R := ROUND(IC_TOT_MATL_COST / ROUND_UNIT) * ROUND_UNIT;
    RETURN IC_TOT_MATL_COST_R;
  END IC_TOT_MATL_COST_RFORMULA;
  FUNCTION IC_TOT_MO_COST_RFORMULA(IC_TOT_MO_COST IN NUMBER) RETURN NUMBER IS
    IC_TOT_MO_COST_R NUMBER;
  BEGIN
    IC_TOT_MO_COST_R := ROUND(IC_TOT_MO_COST / ROUND_UNIT) * ROUND_UNIT;
    RETURN IC_TOT_MO_COST_R;
  END IC_TOT_MO_COST_RFORMULA;
  FUNCTION IC_TOT_RES_COST_RFORMULA(IC_TOT_RES_COST IN NUMBER) RETURN NUMBER IS
    IC_TOT_RES_COST_R NUMBER;
  BEGIN
    IC_TOT_RES_COST_R := ROUND(IC_TOT_RES_COST / ROUND_UNIT) * ROUND_UNIT;
    RETURN IC_TOT_RES_COST_R;
  END IC_TOT_RES_COST_RFORMULA;
  FUNCTION IC_TOT_OVHD_COST_RFORMULA(IC_TOT_OVHD_COST IN NUMBER) RETURN NUMBER IS
    IC_TOT_OVHD_COST_R NUMBER;
  BEGIN
    IC_TOT_OVHD_COST_R := ROUND(IC_TOT_OVHD_COST / ROUND_UNIT) * ROUND_UNIT;
    RETURN IC_TOT_OVHD_COST_R;
  END IC_TOT_OVHD_COST_RFORMULA;
  FUNCTION IC_TOT_OSP_COST_RFORMULA(IC_TOT_OSP_COST IN NUMBER) RETURN NUMBER IS
    IC_TOT_OSP_COST_R NUMBER;
  BEGIN
    IC_TOT_OSP_COST_R := ROUND(IC_TOT_OSP_COST / ROUND_UNIT) * ROUND_UNIT;
    RETURN IC_TOT_OSP_COST_R;
  END IC_TOT_OSP_COST_RFORMULA;
  FUNCTION P_LEGAL_ENTITYVALIDTRIGGER RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END P_LEGAL_ENTITYVALIDTRIGGER;
  FUNCTION P_CAT_NUMVALIDTRIGGER RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END P_CAT_NUMVALIDTRIGGER;
  FUNCTION P_DETAIL_LEVELVALIDTRIGGER RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END P_DETAIL_LEVELVALIDTRIGGER;
  FUNCTION P_PERIOD_IDVALIDTRIGGER RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END P_PERIOD_IDVALIDTRIGGER;
  FUNCTION P_SORT_BYVALIDTRIGGER RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END P_SORT_BYVALIDTRIGGER;
  FUNCTION CF_RCV_VALUEFORMULA(CS_IC_QUANTITY_TOTAL2 IN NUMBER
                              ,CS_ACQUISITION_COST2 IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (NVL(CS_IC_QUANTITY_TOTAL2
              ,0) * NVL(CS_ACQUISITION_COST2
              ,0));
  END CF_RCV_VALUEFORMULA;
  FUNCTION CF_TOTAL_VALUEFORMULA(CF_RCV_VALUE IN NUMBER
                                ,IC_TOTAL_COST_R IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (NVL(CF_RCV_VALUE
              ,0) + NVL(IC_TOTAL_COST_R
              ,0));
  END CF_TOTAL_VALUEFORMULA;
  FUNCTION IC_ACQUISITION_COST_RFORMULA(IC_ACQUISITION_COST IN NUMBER) RETURN NUMBER IS
    IC_ACQUISITION_COST_R NUMBER;
  BEGIN
    IC_ACQUISITION_COST_R := STANDARD.ROUND(IC_ACQUISITION_COST / ROUND_UNIT
                                           ,0) * ROUND_UNIT;
    RETURN IC_ACQUISITION_COST_R;
  END IC_ACQUISITION_COST_RFORMULA;
  FUNCTION IC_VALUE_RFORMULA(IC_VALUE IN NUMBER) RETURN NUMBER IS
    IC_VALUE_R NUMBER;
  BEGIN
    IC_VALUE_R := STANDARD.ROUND(IC_VALUE / ROUND_UNIT
                                ,0) * ROUND_UNIT;
    RETURN IC_VALUE_R;
  END IC_VALUE_RFORMULA;
  FUNCTION CF_IC_VALUE_TOTAL2_RFORMULA(CS_IC_VALUE_TOTAL2 IN NUMBER) RETURN NUMBER IS
    CF_IC_VALUE_TOTAL2_R NUMBER;
  BEGIN
    CF_IC_VALUE_TOTAL2_R := STANDARD.ROUND(CS_IC_VALUE_TOTAL2 / ROUND_UNIT
                                          ,0) * ROUND_UNIT;
    RETURN CF_IC_VALUE_TOTAL2_R;
  END CF_IC_VALUE_TOTAL2_RFORMULA;
  FUNCTION CF_ACQUISITION_COST2_RFORMULA(CS_ACQUISITION_COST2 IN NUMBER) RETURN NUMBER IS
    CF_ACQUISITION_COST2_R NUMBER;
  BEGIN
    CF_ACQUISITION_COST2_R := STANDARD.ROUND(CS_ACQUISITION_COST2 / ROUND_UNIT
                                            ,0) * ROUND_UNIT;
    RETURN CF_ACQUISITION_COST2_R;
  END CF_ACQUISITION_COST2_RFORMULA;
  FUNCTION CF_RCV_VALUE_RFORMULA(CF_RCV_VALUE IN NUMBER) RETURN NUMBER IS
    CF_RCV_VALUE_R NUMBER;
  BEGIN
    CF_RCV_VALUE_R := STANDARD.ROUND(CF_RCV_VALUE / ROUND_UNIT
                                    ,0) * ROUND_UNIT;
    RETURN CF_RCV_VALUE_R;
  END CF_RCV_VALUE_RFORMULA;
  FUNCTION CF_TOTAL_VALUE_RFORMULA(CF_TOTAL_VALUE IN NUMBER) RETURN NUMBER IS
    CF_TOTAL_VALUE_R NUMBER;
  BEGIN
    CF_TOTAL_VALUE_R := STANDARD.ROUND(CF_TOTAL_VALUE / ROUND_UNIT
                                      ,0) * ROUND_UNIT;
    RETURN CF_TOTAL_VALUE_R;
  END CF_TOTAL_VALUE_RFORMULA;
END BOM_CSTRPICR_XMLP_PKG;


/
