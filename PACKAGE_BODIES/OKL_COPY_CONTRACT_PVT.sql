--------------------------------------------------------
--  DDL for Package Body OKL_COPY_CONTRACT_PVT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."OKL_COPY_CONTRACT_PVT" as
/* $Header: OKLRCOPB.pls 120.50.12010000.5 2010/04/26 23:19:26 gkadarka ship $ */

    G_MODULE VARCHAR2(255) := 'okl.stream.esg.okl_esg_transport_pvt';
    G_DEBUG_ENABLED CONSTANT VARCHAR2(10) := OKL_DEBUG_PUB.CHECK_LOG_ENABLED;
    G_IS_DEBUG_STATEMENT_ON BOOLEAN;
--subtypes declared here to facilitate rosetta skip okc_rule_pub compilation
--which has a clob in it
TYPE l_phid_mapping_type IS RECORD (old_id okl_party_payment_hdr.id%TYPE := OKC_API.G_MISS_NUM, new_id okl_party_payment_hdr.id%TYPE := OKC_API.G_MISS_NUM);
TYPE l_phid_mapping_tab_type IS TABLE OF l_phid_mapping_type INDEX BY BINARY_INTEGER;

SUBTYPE api_components_rec_okc is OKC_COPY_CONTRACT_PVT.api_components_rec;
SUBTYPE api_components_tbl_okc is OKC_COPY_CONTRACT_PVT.api_components_tbl;
SUBTYPE api_lines_rec_okc is OKC_COPY_CONTRACT_PVT.api_lines_rec;
SUBTYPE api_lines_tbl_okc is OKC_COPY_CONTRACT_PVT.api_lines_tbl;
SUBTYPE rgpv_rec_type is OKL_OKC_MIGRATION_PVT.rgpv_rec_type;
SUBTYPE rulv_rec_type IS Okl_Rule_Pub.rulv_rec_type;
SUBTYPE rulv_tbl_type IS Okl_Rule_Pub.rulv_tbl_type;
--Bug# 3143522
SUBTYPE ppydv_rec_type IS OKL_PYD_PVT.ppydv_rec_type;
-- Bug# 3630858
SUBTYPE cspv_rec_type IS OKL_CONTRACT_PROD_OPTNS_PUB.cspv_rec_type;
--furong  4350255
SUBTYPE pphv_rec_type IS OKL_LDB_PVT.pphv_rec_type;
--Bug# 4558486
SUBTYPE kplv_rec_type IS OKL_KPL_PVT.kplv_rec_type;

G_NO_MATCHING_RECORD            CONSTANT  VARCHAR2(200) := 'OKL_LLA_NO_MATCHING_RECORD';
----------------
--bug # 2518454
----------------
--G_COPY_HEADER                 CONSTANT VARCHAR2(200) := 'OKL_LLA_COPY_HEADER';
G_COPY_LINE                   CONSTANT VARCHAR2(200) := 'OKL_LLA_COPY_LINE';
G_BULK_SIZE NUMBER := 10000;
G_EXCEPTION_HALT_PROCESS   EXCEPTION;
l_phid_mapping_tab l_phid_mapping_tab_type;
l_party_payment_hdr_counter NUMBER := 1;
l_created_by NUMBER := fnd_global.user_id;
l_last_updated_by NUMBER := fnd_global.user_id;
l_last_update_login NUMBER := fnd_global.login_id;
l_contract_exists BOOLEAN := FALSE;


--Function to migrate api_components tbl
FUNCTION migrate_components_tbl(p_components_tbl IN api_components_tbl)
                                    return api_components_tbl_okc is
i NUMBER;
l_components_tbl api_components_tbl_okc;
BEGIN
     FOR i in 1..p_components_tbl.LAST
     Loop
         l_components_tbl(i).id := p_components_tbl(i).id;
         l_components_tbl(i).to_k := p_components_tbl(i).to_k;
         l_components_tbl(i).component_type := p_components_tbl(i).component_type;
         l_components_tbl(i).attribute1 := p_components_tbl(i).attribute1;
     End Loop;
     Return l_components_tbl;
END migrate_components_tbl;
--Function to migrate api_lines tbl
FUNCTION migrate_lines_tbl(p_lines_tbl IN api_lines_tbl)
                                    return api_lines_tbl_okc is
i NUMBER;
l_lines_tbl api_lines_tbl_okc;
BEGIN
     FOR i in 1..p_lines_tbl.LAST
     Loop
         l_lines_tbl(i).id := p_lines_tbl(i).id;
         l_lines_tbl(i).to_k := p_lines_tbl(i).to_k;
         l_lines_tbl(i).to_line := p_lines_tbl(i).to_line;
         l_lines_tbl(i).line_exists_yn := p_lines_tbl(i).line_exists_yn;
     End Loop;
     Return l_lines_tbl;
END migrate_lines_tbl;
--------------------------------------------------------------------------
--Functions to fetch data from okc_k_headers_v, okc_k_lines_v,
--okl_k_headers_v and okl_k_lines_v
--These Functions are copy of local functions get_rec in
--OKC_CHR_PVT and OKL_KHR_PVT. These are repeated here since they have not
--been published. Any changes in in these in the original packages will
--also heve to be done here.
----------------------------------------------------------------------------
---------------------------------------------------------------------------
  -- FUNCTION get_rec for: OKC_K_HEADERS_V
---------------------------------------------------------------------------
  FUNCTION get_chrv_rec (
    p_chrv_id                     IN   NUMBER,
    x_no_data_found               OUT NOCOPY BOOLEAN
  ) RETURN chrv_rec_type IS
    CURSOR okc_chrv_pk_csr (p_id                 IN NUMBER) IS
    SELECT
     ID
    ,OBJECT_VERSION_NUMBER
    ,SFWT_FLAG
    ,CHR_ID_RESPONSE
    ,CHR_ID_AWARD
    ,CHR_ID_RENEWED
    ,INV_ORGANIZATION_ID
    ,STS_CODE
    ,QCL_ID
    ,SCS_CODE
    ,CONTRACT_NUMBER
    ,CURRENCY_CODE
    ,CONTRACT_NUMBER_MODIFIER
    ,ARCHIVED_YN
    ,DELETED_YN
    ,CUST_PO_NUMBER_REQ_YN
    ,PRE_PAY_REQ_YN
    ,CUST_PO_NUMBER
    ,SHORT_DESCRIPTION
    ,COMMENTS
    ,DESCRIPTION
    ,DPAS_RATING
    ,COGNOMEN
    ,TEMPLATE_YN
    --,GOVERNING_CONTRACT_YN
    ,TEMPLATE_USED
    ,DATE_APPROVED
    ,DATETIME_CANCELLED
    ,AUTO_RENEW_DAYS
    ,DATE_ISSUED
    ,DATETIME_RESPONDED
    ,NON_RESPONSE_REASON
    ,NON_RESPONSE_EXPLAIN
    ,RFP_TYPE
    ,CHR_TYPE
    ,KEEP_ON_MAIL_LIST
    ,SET_ASIDE_REASON
    ,SET_ASIDE_PERCENT
    ,RESPONSE_COPIES_REQ
    ,DATE_CLOSE_PROJECTED
    ,DATETIME_PROPOSED
    ,DATE_SIGNED
    ,DATE_TERMINATED
    ,DATE_RENEWED
    ,TRN_CODE
    ,START_DATE
    ,END_DATE
    ,AUTHORING_ORG_ID
    ,BUY_OR_SELL
    ,ISSUE_OR_RECEIVE
    ,ESTIMATED_AMOUNT
    ,CHR_ID_RENEWED_TO
    ,ESTIMATED_AMOUNT_RENEWED
    ,CURRENCY_CODE_RENEWED
    --,USER_ACCESS_LEVEL
    ,UPG_ORIG_SYSTEM_REF
    ,UPG_ORIG_SYSTEM_REF_ID
    ,APPLICATION_ID
    --,RESOLVED_UNTIL
    ,ATTRIBUTE_CATEGORY
    ,ATTRIBUTE1
    ,ATTRIBUTE2
    ,ATTRIBUTE3
    ,ATTRIBUTE4
    ,ATTRIBUTE5
    ,ATTRIBUTE6
    ,ATTRIBUTE7
    ,ATTRIBUTE8
    ,ATTRIBUTE9
    ,ATTRIBUTE10
    ,ATTRIBUTE11
    ,ATTRIBUTE12
    ,ATTRIBUTE13
    ,ATTRIBUTE14
    ,ATTRIBUTE15
    ,CREATED_BY
    ,CREATION_DATE
    ,LAST_UPDATED_BY
    ,LAST_UPDATE_DATE
    ,LAST_UPDATE_LOGIN
    ,ORIG_SYSTEM_SOURCE_CODE
    ,ORIG_SYSTEM_ID1
    ,ORIG_SYSTEM_REFERENCE1
    ,PROGRAM_APPLICATION_ID
    ,PROGRAM_ID
    ,PROGRAM_UPDATE_DATE
    ,REQUEST_ID
    ,PRICE_LIST_ID
    ,PRICING_DATE
    ,TOTAL_LINE_LIST_PRICE
    ,SIGN_BY_DATE
    ,USER_ESTIMATED_AMOUNT
    ,CONVERSION_TYPE
    ,CONVERSION_RATE
    ,CONVERSION_RATE_DATE
    ,CONVERSION_EURO_RATE
    ,CUST_ACCT_ID
    ,BILL_TO_SITE_USE_ID
    ,INV_RULE_ID
    ,RENEWAL_TYPE_CODE
    ,RENEWAL_NOTIFY_TO
    ,RENEWAL_END_DATE
    ,SHIP_TO_SITE_USE_ID
    ,PAYMENT_TERM_ID
      FROM Okc_K_Headers_V
     WHERE okc_k_headers_v.id   = p_id;
    l_okc_chrv_pk                  okc_chrv_pk_csr%ROWTYPE;
    l_chrv_rec                     chrv_rec_type;
  BEGIN
    x_no_data_found := TRUE;
    -- Get current database values
    OPEN okc_chrv_pk_csr (p_chrv_id);
    FETCH okc_chrv_pk_csr INTO
     l_chrv_rec.ID
    ,l_chrv_rec.OBJECT_VERSION_NUMBER
    ,l_chrv_rec.SFWT_FLAG
    ,l_chrv_rec.CHR_ID_RESPONSE
    ,l_chrv_rec.CHR_ID_AWARD
    ,l_chrv_rec.CHR_ID_RENEWED
    ,l_chrv_rec.INV_ORGANIZATION_ID
    ,l_chrv_rec.STS_CODE
    ,l_chrv_rec.QCL_ID
    ,l_chrv_rec.SCS_CODE
    ,l_chrv_rec.CONTRACT_NUMBER
    ,l_chrv_rec.CURRENCY_CODE
    ,l_chrv_rec.CONTRACT_NUMBER_MODIFIER
    ,l_chrv_rec.ARCHIVED_YN
    ,l_chrv_rec.DELETED_YN
    ,l_chrv_rec.CUST_PO_NUMBER_REQ_YN
    ,l_chrv_rec.PRE_PAY_REQ_YN
    ,l_chrv_rec.CUST_PO_NUMBER
    ,l_chrv_rec.SHORT_DESCRIPTION
    ,l_chrv_rec.COMMENTS
    ,l_chrv_rec.DESCRIPTION
    ,l_chrv_rec.DPAS_RATING
    ,l_chrv_rec.COGNOMEN
    ,l_chrv_rec.TEMPLATE_YN
    --,l_chrv_rec.GOVERNING_CONTRACT_YN
    ,l_chrv_rec.TEMPLATE_USED
    ,l_chrv_rec.DATE_APPROVED
    ,l_chrv_rec.DATETIME_CANCELLED
    ,l_chrv_rec.AUTO_RENEW_DAYS
    ,l_chrv_rec.DATE_ISSUED
    ,l_chrv_rec.DATETIME_RESPONDED
    ,l_chrv_rec.NON_RESPONSE_REASON
    ,l_chrv_rec.NON_RESPONSE_EXPLAIN
    ,l_chrv_rec.RFP_TYPE
    ,l_chrv_rec.CHR_TYPE
    ,l_chrv_rec.KEEP_ON_MAIL_LIST
    ,l_chrv_rec.SET_ASIDE_REASON
    ,l_chrv_rec.SET_ASIDE_PERCENT
    ,l_chrv_rec.RESPONSE_COPIES_REQ
    ,l_chrv_rec.DATE_CLOSE_PROJECTED
    ,l_chrv_rec.DATETIME_PROPOSED
    ,l_chrv_rec.DATE_SIGNED
    ,l_chrv_rec.DATE_TERMINATED
    ,l_chrv_rec.DATE_RENEWED
    ,l_chrv_rec.TRN_CODE
    ,l_chrv_rec.START_DATE
    ,l_chrv_rec.END_DATE
    ,l_chrv_rec.AUTHORING_ORG_ID
    ,l_chrv_rec.BUY_OR_SELL
    ,l_chrv_rec.ISSUE_OR_RECEIVE
    ,l_chrv_rec.ESTIMATED_AMOUNT
    ,l_chrv_rec.CHR_ID_RENEWED_TO
    ,l_chrv_rec.ESTIMATED_AMOUNT_RENEWED
    ,l_chrv_rec.CURRENCY_CODE_RENEWED
    --,l_chrv_rec.USER_ACCESS_LEVEL
    ,l_chrv_rec.UPG_ORIG_SYSTEM_REF
    ,l_chrv_rec.UPG_ORIG_SYSTEM_REF_ID
    ,l_chrv_rec.APPLICATION_ID
    --,l_chrv_rec.RESOLVED_UNTIL
    ,l_chrv_rec.ATTRIBUTE_CATEGORY
    ,l_chrv_rec.ATTRIBUTE1
    ,l_chrv_rec.ATTRIBUTE2
    ,l_chrv_rec.ATTRIBUTE3
    ,l_chrv_rec.ATTRIBUTE4
    ,l_chrv_rec.ATTRIBUTE5
    ,l_chrv_rec.ATTRIBUTE6
    ,l_chrv_rec.ATTRIBUTE7
    ,l_chrv_rec.ATTRIBUTE8
    ,l_chrv_rec.ATTRIBUTE9
    ,l_chrv_rec.ATTRIBUTE10
    ,l_chrv_rec.ATTRIBUTE11
    ,l_chrv_rec.ATTRIBUTE12
    ,l_chrv_rec.ATTRIBUTE13
    ,l_chrv_rec.ATTRIBUTE14
    ,l_chrv_rec.ATTRIBUTE15
    ,l_chrv_rec.CREATED_BY
    ,l_chrv_rec.CREATION_DATE
    ,l_chrv_rec.LAST_UPDATED_BY
    ,l_chrv_rec.LAST_UPDATE_DATE
    ,l_chrv_rec.LAST_UPDATE_LOGIN
    ,l_chrv_rec.ORIG_SYSTEM_SOURCE_CODE
    ,l_chrv_rec.ORIG_SYSTEM_ID1
    ,l_chrv_rec.ORIG_SYSTEM_REFERENCE1
    ,l_chrv_rec.PROGRAM_APPLICATION_ID
    ,l_chrv_rec.PROGRAM_ID
    ,l_chrv_rec.PROGRAM_UPDATE_DATE
    ,l_chrv_rec.REQUEST_ID
    ,l_chrv_rec.PRICE_LIST_ID
    ,l_chrv_rec.PRICING_DATE
    ,l_chrv_rec.TOTAL_LINE_LIST_PRICE
    ,l_chrv_rec.SIGN_BY_DATE
    ,l_chrv_rec.USER_ESTIMATED_AMOUNT
    ,l_chrv_rec.CONVERSION_TYPE
    ,l_chrv_rec.CONVERSION_RATE
    ,l_chrv_rec.CONVERSION_RATE_DATE
    ,l_chrv_rec.CONVERSION_EURO_RATE
    ,l_chrv_rec.CUST_ACCT_ID
    ,l_chrv_rec.BILL_TO_SITE_USE_ID
    ,l_chrv_rec.INV_RULE_ID
    ,l_chrv_rec.RENEWAL_TYPE_CODE
    ,l_chrv_rec.RENEWAL_NOTIFY_TO
    ,l_chrv_rec.RENEWAL_END_DATE
    ,l_chrv_rec.SHIP_TO_SITE_USE_ID
    ,l_chrv_rec.PAYMENT_TERM_ID;
    x_no_data_found := okc_chrv_pk_csr%NOTFOUND;
    CLOSE okc_chrv_pk_csr;
    RETURN(l_chrv_rec);
  END get_chrv_rec;

  FUNCTION get_chrv_rec (
    p_chrv_id                     IN NUMBER
  ) RETURN chrv_rec_type IS
    l_row_notfound                 BOOLEAN := TRUE;
  BEGIN
    RETURN(get_chrv_rec(p_chrv_id, l_row_notfound));
  END get_chrv_rec;

  ---------------------------------------------------------------------------
  -- FUNCTION get_rec for: OKL_K_HEADERS_V
  ---------------------------------------------------------------------------
  FUNCTION get_khrv_rec (
    p_khrv_id                     IN NUMBER,
    x_no_data_found                OUT NOCOPY BOOLEAN
  ) RETURN khrv_rec_type IS
    CURSOR okl_khrv_pk_csr (p_id                 IN NUMBER) IS
    SELECT
            ID,
            OBJECT_VERSION_NUMBER,
            ISG_ID,
            KHR_ID,
            PDT_ID,
            AMD_CODE,
            DATE_FIRST_ACTIVITY,
            GENERATE_ACCRUAL_YN,
            GENERATE_ACCRUAL_OVERRIDE_YN,
            DATE_REFINANCED,
            CREDIT_ACT_YN,
            TERM_DURATION,
            CONVERTED_ACCOUNT_YN,
            DATE_CONVERSION_EFFECTIVE,
            SYNDICATABLE_YN,
            SALESTYPE_YN,
            DATE_DEAL_TRANSFERRED,
            DATETIME_PROPOSAL_EFFECTIVE,
            DATETIME_PROPOSAL_INEFFECTIVE,
            DATE_PROPOSAL_ACCEPTED,
            ATTRIBUTE_CATEGORY,
            ATTRIBUTE1,
            ATTRIBUTE2,
            ATTRIBUTE3,
            ATTRIBUTE4,
            ATTRIBUTE5,
            ATTRIBUTE6,
            ATTRIBUTE7,
            ATTRIBUTE8,
            ATTRIBUTE9,
            ATTRIBUTE10,
            ATTRIBUTE11,
            ATTRIBUTE12,
            ATTRIBUTE13,
            ATTRIBUTE14,
            ATTRIBUTE15,
            CREATED_BY,
            CREATION_DATE,
            LAST_UPDATED_BY,
            LAST_UPDATE_DATE,
            LAST_UPDATE_LOGIN,
            PRE_TAX_YIELD,
            AFTER_TAX_YIELD,
            IMPLICIT_INTEREST_RATE,
            IMPLICIT_NON_IDC_INTEREST_RATE,
            TARGET_PRE_TAX_YIELD,
            TARGET_AFTER_TAX_YIELD,
            TARGET_IMPLICIT_INTEREST_RATE,
            TARGET_IMPLICIT_NONIDC_INTRATE,
            DATE_LAST_INTERIM_INTEREST_CAL,
            DEAL_TYPE,
            PRE_TAX_IRR,
            AFTER_TAX_IRR,
            EXPECTED_DELIVERY_DATE,
            ACCEPTED_DATE,
            PREFUNDING_ELIGIBLE_YN,
            REVOLVING_CREDIT_YN,
-- Bug# 2697681
            CURRENCY_CONVERSION_TYPE,
            CURRENCY_CONVERSION_RATE,
            CURRENCY_CONVERSION_DATE,
            MULTI_GAAP_YN,
            RECOURSE_CODE,
            LESSOR_SERV_ORG_CODE,
            ASSIGNABLE_YN,
            SECURITIZED_CODE,
            SECURITIZATION_TYPE,
-- Bug# 2697681
--Bug# 3143522 : Subsidies
            SUB_PRE_TAX_YIELD,
            SUB_AFTER_TAX_YIELD,
            SUB_IMPL_INTEREST_RATE,
            SUB_IMPL_NON_IDC_INT_RATE,
            SUB_PRE_TAX_IRR,
            SUB_AFTER_TAX_IRR,
--Bug#3923883 Rollover/Creditline performance
            TOT_CL_TRANSFER_AMT,
            TOT_CL_NET_TRANSFER_AMT,
            TOT_CL_LIMIT,
            TOT_CL_FUNDING_AMT,
--Bug 4466440 OKL.H columns
            CRS_ID,
            TEMPLATE_TYPE_CODE,
            TRADEIN_DESCRIPTION,
            TRADEIN_AMOUNT,
            DATE_TRADEIN,
            DATE_FUNDING_EXPECTED,
	    --Added by dpsingh for LE Uptake
	    LEGAL_ENTITY_ID
     FROM Okl_K_Headers_V
     WHERE okl_k_headers_v.id   = p_id;
    l_okl_khrv_pk                  okl_khrv_pk_csr%ROWTYPE;
    l_khrv_rec                     khrv_rec_type;
  BEGIN
    x_no_data_found := TRUE;
    -- Get current database values
    OPEN okl_khrv_pk_csr (p_khrv_id);
    FETCH okl_khrv_pk_csr INTO
              l_khrv_rec.ID,
              l_khrv_rec.OBJECT_VERSION_NUMBER,
              l_khrv_rec.ISG_ID,
              l_khrv_rec.KHR_ID,
              l_khrv_rec.PDT_ID,
              l_khrv_rec.AMD_CODE,
              l_khrv_rec.DATE_FIRST_ACTIVITY,
              l_khrv_rec.GENERATE_ACCRUAL_YN,
              l_khrv_rec.GENERATE_ACCRUAL_OVERRIDE_YN,
              l_khrv_rec.DATE_REFINANCED,
              l_khrv_rec.CREDIT_ACT_YN,
              l_khrv_rec.TERM_DURATION,
              l_khrv_rec.CONVERTED_ACCOUNT_YN,
              l_khrv_rec.DATE_CONVERSION_EFFECTIVE,
              l_khrv_rec.SYNDICATABLE_YN,
              l_khrv_rec.SALESTYPE_YN,
              l_khrv_rec.DATE_DEAL_TRANSFERRED,
              l_khrv_rec.DATETIME_PROPOSAL_EFFECTIVE,
              l_khrv_rec.DATETIME_PROPOSAL_INEFFECTIVE,
              l_khrv_rec.DATE_PROPOSAL_ACCEPTED,
              l_khrv_rec.ATTRIBUTE_CATEGORY,
              l_khrv_rec.ATTRIBUTE1,
              l_khrv_rec.ATTRIBUTE2,
              l_khrv_rec.ATTRIBUTE3,
              l_khrv_rec.ATTRIBUTE4,
              l_khrv_rec.ATTRIBUTE5,
              l_khrv_rec.ATTRIBUTE6,
              l_khrv_rec.ATTRIBUTE7,
              l_khrv_rec.ATTRIBUTE8,
              l_khrv_rec.ATTRIBUTE9,
              l_khrv_rec.ATTRIBUTE10,
              l_khrv_rec.ATTRIBUTE11,
              l_khrv_rec.ATTRIBUTE12,
              l_khrv_rec.ATTRIBUTE13,
              l_khrv_rec.ATTRIBUTE14,
              l_khrv_rec.ATTRIBUTE15,
              l_khrv_rec.CREATED_BY,
              l_khrv_rec.CREATION_DATE,
              l_khrv_rec.LAST_UPDATED_BY,
              l_khrv_rec.LAST_UPDATE_DATE,
              l_khrv_rec.LAST_UPDATE_LOGIN,
              l_khrv_rec.PRE_TAX_YIELD,
              l_khrv_rec.AFTER_TAX_YIELD,
              l_khrv_rec.IMPLICIT_INTEREST_RATE,
              l_khrv_rec.IMPLICIT_NON_IDC_INTEREST_RATE,
              l_khrv_rec.TARGET_PRE_TAX_YIELD,
              l_khrv_rec.TARGET_AFTER_TAX_YIELD,
              l_khrv_rec.TARGET_IMPLICIT_INTEREST_RATE,
              l_khrv_rec.TARGET_IMPLICIT_NONIDC_INTRATE,
              l_khrv_rec.DATE_LAST_INTERIM_INTEREST_CAL,
              l_khrv_rec.DEAL_TYPE,
              l_khrv_rec.PRE_TAX_IRR,
              l_khrv_rec.AFTER_TAX_IRR,
              l_khrv_rec.expected_delivery_date,
              l_khrv_rec.accepted_date,
              l_khrv_rec.PREFUNDING_ELIGIBLE_YN,
              l_khrv_rec.REVOLVING_CREDIT_YN,
              l_khrv_rec.CURRENCY_CONVERSION_TYPE,
              l_khrv_rec.CURRENCY_CONVERSION_RATE,
              l_khrv_rec.CURRENCY_CONVERSION_DATE,
              l_khrv_rec.MULTI_GAAP_YN,
              l_khrv_rec.RECOURSE_CODE,
              l_khrv_rec.LESSOR_SERV_ORG_CODE,
              l_khrv_rec.ASSIGNABLE_YN,
              l_khrv_rec.SECURITIZED_CODE,
              l_khrv_rec.SECURITIZATION_TYPE,
--Bug# 3143522 : Subsidies
              l_khrv_rec.SUB_PRE_TAX_YIELD,
              l_khrv_rec.SUB_AFTER_TAX_YIELD,
              l_khrv_rec.SUB_IMPL_INTEREST_RATE,
              l_khrv_rec.SUB_IMPL_NON_IDC_INT_RATE,
              l_khrv_rec.SUB_PRE_TAX_IRR,
              l_khrv_rec.SUB_AFTER_TAX_IRR,
--Bug#3923883 Rollover/Creditline performance
              l_khrv_rec.TOT_CL_TRANSFER_AMT,
              l_khrv_rec.TOT_CL_NET_TRANSFER_AMT,
              l_khrv_rec.TOT_CL_LIMIT,
              l_khrv_rec.TOT_CL_FUNDING_AMT,
--Bug 4466440 OKL.H new columns
              l_khrv_rec.CRS_ID,
              l_khrv_rec.TEMPLATE_TYPE_CODE,
              l_khrv_rec.TRADEIN_DESCRIPTION,
              l_khrv_rec.TRADEIN_AMOUNT,
              l_khrv_rec.DATE_TRADEIN,
              l_khrv_rec.DATE_FUNDING_EXPECTED,
	        --Added by dpsingh for LE Uptake
	      l_khrv_rec.LEGAL_ENTITY_ID;
    x_no_data_found := okl_khrv_pk_csr%NOTFOUND;
    CLOSE okl_khrv_pk_csr;
    RETURN(l_khrv_rec);
  END get_khrv_rec;

  FUNCTION get_khrv_rec (
    p_khrv_id                     IN NUMBER
  ) RETURN khrv_rec_type IS
    l_row_notfound                 BOOLEAN := TRUE;
  BEGIN
    RETURN(get_khrv_rec(p_khrv_id, l_row_notfound));
  END get_khrv_rec;
  ---------------------------------------------------------------------------
  -- FUNCTION get_rec for: OKC_K_LINES_V
  ---------------------------------------------------------------------------
  FUNCTION get_clev_rec (
    p_clev_id                     IN NUMBER,
    x_no_data_found                OUT NOCOPY BOOLEAN
  ) RETURN clev_rec_type IS
    CURSOR okc_clev_pk_csr (p_id                 IN NUMBER) IS
    SELECT
      ID
    ,OBJECT_VERSION_NUMBER
    ,SFWT_FLAG
    ,CHR_ID
    ,CLE_ID
    ,CLE_ID_RENEWED
    ,CLE_ID_RENEWED_TO
    ,LSE_ID
    ,LINE_NUMBER
    ,STS_CODE
    ,DISPLAY_SEQUENCE
    ,TRN_CODE
    ,DNZ_CHR_ID
    ,COMMENTS
    ,ITEM_DESCRIPTION
    ,OKE_BOE_DESCRIPTION
    ,HIDDEN_IND
    ,PRICE_UNIT
    ,PRICE_UNIT_PERCENT
    ,PRICE_NEGOTIATED
    ,PRICE_NEGOTIATED_RENEWED
    ,PRICE_LEVEL_IND
    ,INVOICE_LINE_LEVEL_IND
    ,DPAS_RATING
    ,BLOCK23TEXT
    ,EXCEPTION_YN
    ,TEMPLATE_USED
    ,DATE_TERMINATED
    ,NAME
    ,START_DATE
    ,END_DATE
    ,UPG_ORIG_SYSTEM_REF
    ,UPG_ORIG_SYSTEM_REF_ID
    ,ATTRIBUTE_CATEGORY
    ,ATTRIBUTE1
    ,ATTRIBUTE2
    ,ATTRIBUTE3
    ,ATTRIBUTE4
    ,ATTRIBUTE5
    ,ATTRIBUTE6
    ,ATTRIBUTE7
    ,ATTRIBUTE8
    ,ATTRIBUTE9
    ,ATTRIBUTE10
    ,ATTRIBUTE11
    ,ATTRIBUTE12
    ,ATTRIBUTE13
    ,ATTRIBUTE14
    ,ATTRIBUTE15
    ,CREATED_BY
    ,CREATION_DATE
    ,LAST_UPDATED_BY
    ,LAST_UPDATE_DATE
    ,LAST_UPDATE_LOGIN
    ,PRICE_TYPE
    ,CURRENCY_CODE
    ,CURRENCY_CODE_RENEWED
    ,DATE_RENEWED
    ,ORIG_SYSTEM_SOURCE_CODE
    ,ORIG_SYSTEM_ID1
    ,ORIG_SYSTEM_REFERENCE1
    ,COGNOMEN
    ,PROGRAM_APPLICATION_ID
    ,PROGRAM_ID
    ,PROGRAM_UPDATE_DATE
    ,REQUEST_ID
    ,PRICE_LIST_LINE_ID
    ,PRICE_LIST_ID
    ,LINE_LIST_PRICE
    ,ITEM_TO_PRICE_YN
    ,PRICING_DATE
    ,PRICE_BASIS_YN
    ,CONFIG_HEADER_ID
    ,CONFIG_REVISION_NUMBER
    ,CONFIG_COMPLETE_YN
    ,CONFIG_VALID_YN
    ,CONFIG_TOP_MODEL_LINE_ID
    ,CONFIG_ITEM_TYPE
    ,CONFIG_ITEM_ID
    --,SERVICE_ITEM_YN
    --,PH_PRICING_TYPE
    --,PH_ADJUSTMENT
    --,PH_PRICE_BREAK_BASIS
    --,PH_MIN_QTY
    --,PH_MIN_AMT
    --,PH_QP_REFERENCE_ID
    --,PH_VALUE
    --,PH_ENFORCE_PRICE_LIST_YN
    --,PH_INTEGRATED_WITH_QP
    ,CUST_ACCT_ID
    ,BILL_TO_SITE_USE_ID
    ,INV_RULE_ID
    ,LINE_RENEWAL_TYPE_CODE
    ,SHIP_TO_SITE_USE_ID
    ,PAYMENT_TERM_ID
      FROM Okc_K_Lines_V
     WHERE okc_k_lines_v.id     = p_id;
    l_okc_clev_pk                  okc_clev_pk_csr%ROWTYPE;
    l_clev_rec                     clev_rec_type;
  BEGIN
    x_no_data_found := TRUE;
    -- Get current database values
    OPEN okc_clev_pk_csr (p_clev_id);
    FETCH okc_clev_pk_csr INTO
     l_clev_rec.ID
    ,l_clev_rec.OBJECT_VERSION_NUMBER
    ,l_clev_rec.SFWT_FLAG
    ,l_clev_rec.CHR_ID
    ,l_clev_rec.CLE_ID
    ,l_clev_rec.CLE_ID_RENEWED
    ,l_clev_rec.CLE_ID_RENEWED_TO
    ,l_clev_rec.LSE_ID
    ,l_clev_rec.LINE_NUMBER
    ,l_clev_rec.STS_CODE
    ,l_clev_rec.DISPLAY_SEQUENCE
    ,l_clev_rec.TRN_CODE
    ,l_clev_rec.DNZ_CHR_ID
    ,l_clev_rec.COMMENTS
    ,l_clev_rec.ITEM_DESCRIPTION
    ,l_clev_rec.OKE_BOE_DESCRIPTION
    ,l_clev_rec.HIDDEN_IND
    ,l_clev_rec.PRICE_UNIT
    ,l_clev_rec.PRICE_UNIT_PERCENT
    ,l_clev_rec.PRICE_NEGOTIATED
    ,l_clev_rec.PRICE_NEGOTIATED_RENEWED
    ,l_clev_rec.PRICE_LEVEL_IND
    ,l_clev_rec.INVOICE_LINE_LEVEL_IND
    ,l_clev_rec.DPAS_RATING
    ,l_clev_rec.BLOCK23TEXT
    ,l_clev_rec.EXCEPTION_YN
    ,l_clev_rec.TEMPLATE_USED
    ,l_clev_rec.DATE_TERMINATED
    ,l_clev_rec.NAME
    ,l_clev_rec.START_DATE
    ,l_clev_rec.END_DATE
    ,l_clev_rec.UPG_ORIG_SYSTEM_REF
    ,l_clev_rec.UPG_ORIG_SYSTEM_REF_ID
    ,l_clev_rec.ATTRIBUTE_CATEGORY
    ,l_clev_rec.ATTRIBUTE1
    ,l_clev_rec.ATTRIBUTE2
    ,l_clev_rec.ATTRIBUTE3
    ,l_clev_rec.ATTRIBUTE4
    ,l_clev_rec.ATTRIBUTE5
    ,l_clev_rec.ATTRIBUTE6
    ,l_clev_rec.ATTRIBUTE7
    ,l_clev_rec.ATTRIBUTE8
    ,l_clev_rec.ATTRIBUTE9
    ,l_clev_rec.ATTRIBUTE10
    ,l_clev_rec.ATTRIBUTE11
    ,l_clev_rec.ATTRIBUTE12
    ,l_clev_rec.ATTRIBUTE13
    ,l_clev_rec.ATTRIBUTE14
    ,l_clev_rec.ATTRIBUTE15
    ,l_clev_rec.CREATED_BY
    ,l_clev_rec.CREATION_DATE
    ,l_clev_rec.LAST_UPDATED_BY
    ,l_clev_rec.LAST_UPDATE_DATE
    ,l_clev_rec.LAST_UPDATE_LOGIN
    ,l_clev_rec.PRICE_TYPE
    ,l_clev_rec.CURRENCY_CODE
    ,l_clev_rec.CURRENCY_CODE_RENEWED
    ,l_clev_rec.DATE_RENEWED
    ,l_clev_rec.ORIG_SYSTEM_SOURCE_CODE
    ,l_clev_rec.ORIG_SYSTEM_ID1
    ,l_clev_rec.ORIG_SYSTEM_REFERENCE1
    ,l_clev_rec.COGNOMEN
    ,l_clev_rec.PROGRAM_APPLICATION_ID
    ,l_clev_rec.PROGRAM_ID
    ,l_clev_rec.PROGRAM_UPDATE_DATE
    ,l_clev_rec.REQUEST_ID
    ,l_clev_rec.PRICE_LIST_LINE_ID
    ,l_clev_rec.PRICE_LIST_ID
    ,l_clev_rec.LINE_LIST_PRICE
    ,l_clev_rec.ITEM_TO_PRICE_YN
    ,l_clev_rec.PRICING_DATE
    ,l_clev_rec.PRICE_BASIS_YN
    ,l_clev_rec.CONFIG_HEADER_ID
    ,l_clev_rec.CONFIG_REVISION_NUMBER
    ,l_clev_rec.CONFIG_COMPLETE_YN
    ,l_clev_rec.CONFIG_VALID_YN
    ,l_clev_rec.CONFIG_TOP_MODEL_LINE_ID
    ,l_clev_rec.CONFIG_ITEM_TYPE
    ,l_clev_rec.CONFIG_ITEM_ID
    --,l_clev_rec.SERVICE_ITEM_YN
    --,l_clev_rec.PH_PRICING_TYPE
    --,l_clev_rec.PH_ADJUSTMENT
    --,l_clev_rec.PH_PRICE_BREAK_BASIS
    --,l_clev_rec.PH_MIN_QTY
    --,l_clev_rec.PH_MIN_AMT
    --,l_clev_rec.PH_QP_REFERENCE_ID
    --,l_clev_rec.PH_VALUE
    --,l_clev_rec.PH_ENFORCE_PRICE_LIST_YN
    --,l_clev_rec.PH_INTEGRATED_WITH_QP
    ,l_clev_rec.CUST_ACCT_ID
    ,l_clev_rec.BILL_TO_SITE_USE_ID
    ,l_clev_rec.INV_RULE_ID
    ,l_clev_rec.LINE_RENEWAL_TYPE_CODE
    ,l_clev_rec.SHIP_TO_SITE_USE_ID
    ,l_clev_rec.PAYMENT_TERM_ID;
    x_no_data_found := okc_clev_pk_csr%NOTFOUND;
    CLOSE okc_clev_pk_csr;
    RETURN(l_clev_rec);
  END get_clev_rec;

  FUNCTION get_clev_rec (
    p_clev_id                     IN NUMBER
  ) RETURN clev_rec_type IS
    l_row_notfound                 BOOLEAN := TRUE;
  BEGIN
    RETURN(get_clev_rec(p_clev_id, l_row_notfound));
  END get_clev_rec;
----------------------------------------------------------------------
--end get_clev_rec
-----------------------------------------------------------------------
---------------------------------------------------------------------------
-- FUNCTION get_rec for: OKL_K_LINES_V
---------------------------------------------------------------------------
  FUNCTION get_klev_rec (
    p_klev_id                     IN NUMBER,
    x_no_data_found                OUT NOCOPY BOOLEAN
  ) RETURN klev_rec_type IS
    CURSOR okl_klev_pk_csr (p_id                 IN NUMBER) IS
    SELECT
            ID,
            OBJECT_VERSION_NUMBER,
            KLE_ID,
            STY_ID,
            PRC_CODE,
            FCG_CODE,
            NTY_CODE,
            ESTIMATED_OEC,
            LAO_AMOUNT,
            TITLE_DATE,
            FEE_CHARGE,
            LRS_PERCENT,
            INITIAL_DIRECT_COST,
            PERCENT_STAKE,
            PERCENT,
            EVERGREEN_PERCENT,
            AMOUNT_STAKE,
            OCCUPANCY,
            COVERAGE,
            RESIDUAL_PERCENTAGE,
            DATE_LAST_INSPECTION,
            DATE_SOLD,
            LRV_AMOUNT,
            CAPITAL_REDUCTION,
            DATE_NEXT_INSPECTION_DUE,
            DATE_RESIDUAL_LAST_REVIEW,
            DATE_LAST_REAMORTISATION,
            VENDOR_ADVANCE_PAID,
            WEIGHTED_AVERAGE_LIFE,
            TRADEIN_AMOUNT,
            BOND_EQUIVALENT_YIELD,
            TERMINATION_PURCHASE_AMOUNT,
            REFINANCE_AMOUNT,
            YEAR_BUILT,
            DELIVERED_DATE,
            CREDIT_TENANT_YN,
            DATE_LAST_CLEANUP,
            YEAR_OF_MANUFACTURE,
            COVERAGE_RATIO,
            REMARKETED_AMOUNT,
            GROSS_SQUARE_FOOTAGE,
            PRESCRIBED_ASSET_YN,
            DATE_REMARKETED,
            NET_RENTABLE,
            REMARKET_MARGIN,
            DATE_LETTER_ACCEPTANCE,
            REPURCHASED_AMOUNT,
            DATE_COMMITMENT_EXPIRATION,
            DATE_REPURCHASED,
            DATE_APPRAISAL,
            RESIDUAL_VALUE,
            APPRAISAL_VALUE,
            SECURED_DEAL_YN,
            GAIN_LOSS,
            FLOOR_AMOUNT,
            RE_LEASE_YN,
            PREVIOUS_CONTRACT,
            TRACKED_RESIDUAL,
            DATE_TITLE_RECEIVED,
            AMOUNT,
            ATTRIBUTE_CATEGORY,
            ATTRIBUTE1,
            ATTRIBUTE2,
            ATTRIBUTE3,
            ATTRIBUTE4,
            ATTRIBUTE5,
            ATTRIBUTE6,
            ATTRIBUTE7,
            ATTRIBUTE8,
            ATTRIBUTE9,
            ATTRIBUTE10,
            ATTRIBUTE11,
            ATTRIBUTE12,
            ATTRIBUTE13,
            ATTRIBUTE14,
            ATTRIBUTE15,
            STY_ID_FOR,
            CLG_ID,
            CREATED_BY,
            CREATION_DATE,
            LAST_UPDATED_BY,
            LAST_UPDATE_DATE,
            LAST_UPDATE_LOGIN,
            DATE_FUNDING,
            DATE_FUNDING_REQUIRED,
            DATE_ACCEPTED,
            DATE_DELIVERY_EXPECTED,
            OEC,
            CAPITAL_AMOUNT,
            RESIDUAL_GRNTY_AMOUNT,
            RESIDUAL_CODE,
            RVI_PREMIUM,
            CREDIT_NATURE,
            CAPITALIZED_INTEREST,
            CAPITAL_REDUCTION_PERCENT,
-- Bug# 2697681
            DATE_PAY_INVESTOR_START,
            PAY_INVESTOR_FREQUENCY,
            PAY_INVESTOR_EVENT,
            PAY_INVESTOR_REMITTANCE_DAYS,
-- Bug# 2697681
            FEE_TYPE,
-- Bug# 3143522 : Subsidies
           SUBSIDY_ID,
           --SUBSIDIZED_OEC,
           --SUBSIDIZED_CAP_AMOUNT,
           PRE_TAX_YIELD,
           AFTER_TAX_YIELD,
           IMPLICIT_INTEREST_RATE,
           IMPLICIT_NON_IDC_INTEREST_RATE,
           PRE_TAX_IRR,
           AFTER_TAX_IRR,
           SUBSIDY_OVERRIDE_AMOUNT,
--quote
           SUB_PRE_TAX_YIELD,
           SUB_AFTER_TAX_YIELD,
           SUB_IMPL_INTEREST_RATE,
           SUB_IMPL_NON_IDC_INT_RATE,
           SUB_PRE_TAX_IRR,
           SUB_AFTER_TAX_IRR,
--Bug# 2994971
           ITEM_INSURANCE_CATEGORY,
--Bug# 3973640 : 11.5.10+ schema
           QTE_ID,
           FUNDING_DATE,
           STREAM_TYPE_SUBCLASS,
--Bug 4466440 OKL.H new columns
           DATE_FUNDING_EXPECTED,
           MANUFACTURER_NAME,
           MODEL_NUMBER,
           DOWN_PAYMENT_RECEIVER_CODE,
           CAPITALIZE_DOWN_PAYMENT_YN,
           FEE_PURPOSE_CODE,
           --Bug# 8677460
           ORIG_CONTRACT_LINE_ID
      FROM Okl_K_Lines_V
     WHERE okl_k_lines_v.id     = p_id;
    l_okl_klev_pk                  okl_klev_pk_csr%ROWTYPE;
    l_klev_rec                     klev_rec_type;
  BEGIN
    x_no_data_found := TRUE;
    -- Get current database values
    OPEN okl_klev_pk_csr (p_klev_id);
    FETCH okl_klev_pk_csr INTO
              l_klev_rec.ID,
              l_klev_rec.OBJECT_VERSION_NUMBER,
              l_klev_rec.KLE_ID,
              l_klev_rec.STY_ID,
              l_klev_rec.PRC_CODE,
              l_klev_rec.FCG_CODE,
              l_klev_rec.NTY_CODE,
              l_klev_rec.ESTIMATED_OEC,
              l_klev_rec.LAO_AMOUNT,
              l_klev_rec.TITLE_DATE,
              l_klev_rec.FEE_CHARGE,
              l_klev_rec.LRS_PERCENT,
              l_klev_rec.INITIAL_DIRECT_COST,
              l_klev_rec.PERCENT_STAKE,
              l_klev_rec.PERCENT,
              l_klev_rec.EVERGREEN_PERCENT,
              l_klev_rec.AMOUNT_STAKE,
              l_klev_rec.OCCUPANCY,
              l_klev_rec.COVERAGE,
              l_klev_rec.RESIDUAL_PERCENTAGE,
              l_klev_rec.DATE_LAST_INSPECTION,
              l_klev_rec.DATE_SOLD,
              l_klev_rec.LRV_AMOUNT,
              l_klev_rec.CAPITAL_REDUCTION,
              l_klev_rec.DATE_NEXT_INSPECTION_DUE,
              l_klev_rec.DATE_RESIDUAL_LAST_REVIEW,
              l_klev_rec.DATE_LAST_REAMORTISATION,
              l_klev_rec.VENDOR_ADVANCE_PAID,
              l_klev_rec.WEIGHTED_AVERAGE_LIFE,
              l_klev_rec.TRADEIN_AMOUNT,
              l_klev_rec.BOND_EQUIVALENT_YIELD,
              l_klev_rec.TERMINATION_PURCHASE_AMOUNT,
              l_klev_rec.REFINANCE_AMOUNT,
              l_klev_rec.YEAR_BUILT,
              l_klev_rec.DELIVERED_DATE,
              l_klev_rec.CREDIT_TENANT_YN,
              l_klev_rec.DATE_LAST_CLEANUP,
              l_klev_rec.YEAR_OF_MANUFACTURE,
              l_klev_rec.COVERAGE_RATIO,
              l_klev_rec.REMARKETED_AMOUNT,
              l_klev_rec.GROSS_SQUARE_FOOTAGE,
              l_klev_rec.PRESCRIBED_ASSET_YN,
              l_klev_rec.DATE_REMARKETED,
              l_klev_rec.NET_RENTABLE,
              l_klev_rec.REMARKET_MARGIN,
              l_klev_rec.DATE_LETTER_ACCEPTANCE,
              l_klev_rec.REPURCHASED_AMOUNT,
              l_klev_rec.DATE_COMMITMENT_EXPIRATION,
              l_klev_rec.DATE_REPURCHASED,
              l_klev_rec.DATE_APPRAISAL,
              l_klev_rec.RESIDUAL_VALUE,
              l_klev_rec.APPRAISAL_VALUE,
              l_klev_rec.SECURED_DEAL_YN,
              l_klev_rec.GAIN_LOSS,
              l_klev_rec.FLOOR_AMOUNT,
              l_klev_rec.RE_LEASE_YN,
              l_klev_rec.PREVIOUS_CONTRACT,
              l_klev_rec.TRACKED_RESIDUAL,
              l_klev_rec.DATE_TITLE_RECEIVED,
              l_klev_rec.AMOUNT,
              l_klev_rec.ATTRIBUTE_CATEGORY,
              l_klev_rec.ATTRIBUTE1,
              l_klev_rec.ATTRIBUTE2,
              l_klev_rec.ATTRIBUTE3,
              l_klev_rec.ATTRIBUTE4,
              l_klev_rec.ATTRIBUTE5,
              l_klev_rec.ATTRIBUTE6,
              l_klev_rec.ATTRIBUTE7,
              l_klev_rec.ATTRIBUTE8,
              l_klev_rec.ATTRIBUTE9,
              l_klev_rec.ATTRIBUTE10,
              l_klev_rec.ATTRIBUTE11,
              l_klev_rec.ATTRIBUTE12,
              l_klev_rec.ATTRIBUTE13,
              l_klev_rec.ATTRIBUTE14,
              l_klev_rec.ATTRIBUTE15,
              l_klev_rec.STY_ID_FOR,
              l_klev_rec.CLG_ID,
              l_klev_rec.CREATED_BY,
              l_klev_rec.CREATION_DATE,
              l_klev_rec.LAST_UPDATED_BY,
              l_klev_rec.LAST_UPDATE_DATE,
              l_klev_rec.LAST_UPDATE_LOGIN,
              l_klev_rec.DATE_FUNDING,
              l_klev_rec.DATE_FUNDING_REQUIRED,
              l_klev_rec.DATE_ACCEPTED,
              l_klev_rec.DATE_DELIVERY_EXPECTED,
              l_klev_rec.OEC,
              l_klev_rec.CAPITAL_AMOUNT,
              l_klev_rec.RESIDUAL_GRNTY_AMOUNT,
              l_klev_rec.RESIDUAL_CODE,
              l_klev_rec.RVI_PREMIUM,
              l_klev_rec.CREDIT_NATURE,
              l_klev_rec.CAPITALIZED_INTEREST,
              l_klev_rec.CAPITAL_REDUCTION_PERCENT,
              l_klev_rec.DATE_PAY_INVESTOR_START,
              l_klev_rec.PAY_INVESTOR_FREQUENCY,
              l_klev_rec.PAY_INVESTOR_EVENT,
              l_klev_rec.PAY_INVESTOR_REMITTANCE_DAYS,
              l_klev_rec.FEE_TYPE,
-- Bug# 3143522 : Subsidies
           l_klev_rec.SUBSIDY_ID,
           --l_klev_rec.SUBSIDIZED_OEC,
           --l_klev_rec.SUBSIDIZED_CAP_AMOUNT,
           l_klev_rec.PRE_TAX_YIELD,
           l_klev_rec.AFTER_TAX_YIELD,
           l_klev_rec.IMPLICIT_INTEREST_RATE,
           l_klev_rec.IMPLICIT_NON_IDC_INTEREST_RATE,
           l_klev_rec.PRE_TAX_IRR,
           l_klev_rec.AFTER_TAX_IRR,
           l_klev_rec.SUBSIDY_OVERRIDE_AMOUNT,
--quote
           l_klev_rec.SUB_PRE_TAX_YIELD,
           l_klev_rec.SUB_AFTER_TAX_YIELD,
           l_klev_rec.SUB_IMPL_INTEREST_RATE,
           l_klev_rec.SUB_IMPL_NON_IDC_INT_RATE,
           l_klev_rec.SUB_PRE_TAX_IRR,
           l_klev_rec.SUB_AFTER_TAX_IRR,
--Bug# 2994971
           l_klev_rec.ITEM_INSURANCE_CATEGORY,
--Bug# 3973640 : 11.5.10+ schema
           l_klev_rec.QTE_ID,
           l_klev_rec.FUNDING_DATE,
           l_klev_rec.STREAM_TYPE_SUBCLASS,
--Bug 4466440 OKL.H new columns
           l_klev_rec.DATE_FUNDING_EXPECTED,
           l_klev_rec.MANUFACTURER_NAME,
           l_klev_rec.MODEL_NUMBER,
           l_klev_rec.DOWN_PAYMENT_RECEIVER_CODE,
           l_klev_rec.CAPITALIZE_DOWN_PAYMENT_YN,
           l_klev_rec.FEE_PURPOSE_CODE,
           --Bug# 8677460
           l_klev_rec.ORIG_CONTRACT_LINE_ID;
    x_no_data_found := okl_klev_pk_csr%NOTFOUND;
    CLOSE okl_klev_pk_csr;
    RETURN(l_klev_rec);
  END get_klev_rec;

  FUNCTION get_klev_rec (
    p_klev_id                    IN NUMBER
  ) RETURN klev_rec_type IS
    l_row_notfound                 BOOLEAN := TRUE;
  BEGIN
    RETURN(get_klev_rec(p_klev_id, l_row_notfound));
  END get_klev_rec;
--Bug# : 3143522

  --furong 4350255
  ---------------------------------------------------------------------------
  -- FUNCTION get_rec for: OKL_PARTY_PAYMENT_HDR_V
  ---------------------------------------------------------------------------
  FUNCTION get_pphv_rec (
    p_pphv_rec                     IN pphv_rec_type,
    x_no_data_found                OUT NOCOPY BOOLEAN
  ) RETURN pphv_rec_type IS
    CURSOR okl_party_payment_hdr_v_pk_csr (p_id IN NUMBER) IS
    SELECT
            ID,
            OBJECT_VERSION_NUMBER,
            DNZ_CHR_ID,
            CLE_ID,
            PPL_ID,
            PASSTHRU_START_DATE,
            PAYOUT_BASIS,
            PAYOUT_BASIS_FORMULA,
            EFFECTIVE_FROM,
            EFFECTIVE_TO,
			PASSTHRU_TERM,
			PASSTHRU_STREAM_TYPE_ID,
            CREATED_BY,
            CREATION_DATE,
            LAST_UPDATED_BY,
            LAST_UPDATE_DATE,
            LAST_UPDATE_LOGIN
      FROM Okl_Party_Payment_Hdr_V
     WHERE okl_party_payment_hdr_v.id = p_id;
    l_okl_party_payment_hdr_v_pk   okl_party_payment_hdr_v_pk_csr%ROWTYPE;
    l_pphv_rec                     pphv_rec_type;
  BEGIN
    x_no_data_found := TRUE;
    -- Get current database values
    OPEN okl_party_payment_hdr_v_pk_csr (p_pphv_rec.id);
    FETCH okl_party_payment_hdr_v_pk_csr INTO
              l_pphv_rec.id,
              l_pphv_rec.object_version_number,
              l_pphv_rec.dnz_chr_id,
              l_pphv_rec.cle_id,
              l_pphv_rec.ppl_id,
              l_pphv_rec.passthru_start_date,
              l_pphv_rec.payout_basis,
              l_pphv_rec.payout_basis_formula,
              l_pphv_rec.effective_from,
              l_pphv_rec.effective_to,
			  l_pphv_rec.passthru_term,
			  l_pphv_rec.passthru_stream_type_id,
              l_pphv_rec.created_by,
              l_pphv_rec.creation_date,
              l_pphv_rec.last_updated_by,
              l_pphv_rec.last_update_date,
              l_pphv_rec.last_update_login;
    x_no_data_found := okl_party_payment_hdr_v_pk_csr%NOTFOUND;
    CLOSE okl_party_payment_hdr_v_pk_csr;
    RETURN(l_pphv_rec);
  END get_pphv_rec;
 ------------------------------------------------------------------
  -- This version of get_rec sets error messages if no data found --
  ------------------------------------------------------------------
  FUNCTION get_pphv_rec (
    p_pphv_rec                      IN pphv_rec_type,
    x_return_status                OUT NOCOPY VARCHAR2
  ) RETURN pphv_rec_type IS
    l_pphv_rec                      pphv_rec_type;
    l_row_notfound                 BOOLEAN := TRUE;
  BEGIN
    x_return_status := OKC_API.G_RET_STS_SUCCESS;
    l_pphv_rec := get_pphv_rec(p_pphv_rec, l_row_notfound);
    IF (l_row_notfound) THEN
      OKC_API.set_message(G_APP_NAME,G_INVALID_VALUE,G_COL_NAME_TOKEN,'ID');
      x_return_status := OKC_API.G_RET_STS_ERROR;
    END IF;
    RETURN(l_pphv_rec);
  END get_pphv_rec;

  --furong 4350255

  ---------------------------------------------------------------------------
  -- FUNCTION get_rec for: OKL_PARTY_PAYMENT_DTLS_V
  ---------------------------------------------------------------------------
  FUNCTION get_ppydv_rec (
    p_ppydv_rec                    IN ppydv_rec_type,
    x_no_data_found                OUT NOCOPY BOOLEAN
  ) RETURN ppydv_rec_type IS
    CURSOR okl_party_payment_d1 (p_id IN NUMBER) IS
    SELECT
            ID,
            OBJECT_VERSION_NUMBER,
            CPL_ID,
            VENDOR_ID,
            PAY_SITE_ID,
            PAYMENT_TERM_ID,
            PAYMENT_METHOD_CODE,
            PAY_GROUP_CODE,
			PAYMENT_HDR_ID,
			PAYMENT_START_DATE,
			PAYMENT_FREQUENCY,
			REMIT_DAYS,
			DISBURSEMENT_BASIS,
			DISBURSEMENT_FIXED_AMOUNT,
			DISBURSEMENT_PERCENT,
			PROCESSING_FEE_BASIS,
			PROCESSING_FEE_FIXED_AMOUNT,
			PROCESSING_FEE_PERCENT,
			PAYMENT_BASIS,
            ATTRIBUTE_CATEGORY,
            ATTRIBUTE1,
            ATTRIBUTE2,
            ATTRIBUTE3,
            ATTRIBUTE4,
            ATTRIBUTE5,
            ATTRIBUTE6,
            ATTRIBUTE7,
            ATTRIBUTE8,
            ATTRIBUTE9,
            ATTRIBUTE10,
            ATTRIBUTE11,
            ATTRIBUTE12,
            ATTRIBUTE13,
            ATTRIBUTE14,
            ATTRIBUTE15,
            CREATED_BY,
            CREATION_DATE,
            LAST_UPDATED_BY,
            LAST_UPDATE_DATE,
            LAST_UPDATE_LOGIN,
            --Bug# 8677460
            ORIG_CONTRACT_LINE_ID
      FROM Okl_Party_Payment_Dtls_V
     WHERE okl_party_payment_dtls_v.id = p_id;
    l_okl_party_payment_dtls_v_pk  okl_party_payment_d1%ROWTYPE;
    l_ppydv_rec                    ppydv_rec_type;
  BEGIN
    x_no_data_found := TRUE;
    -- Get current database values
    OPEN okl_party_payment_d1 (p_ppydv_rec.id);
    FETCH okl_party_payment_d1 INTO
              l_ppydv_rec.id,
              l_ppydv_rec.object_version_number,
              l_ppydv_rec.cpl_id,
              l_ppydv_rec.vendor_id,
              l_ppydv_rec.pay_site_id,
              l_ppydv_rec.payment_term_id,
              l_ppydv_rec.payment_method_code,
              l_ppydv_rec.pay_group_code,
			  l_ppydv_rec.payment_hdr_id,
			  l_ppydv_rec.payment_start_date,
			  l_ppydv_rec.payment_frequency,
			  l_ppydv_rec.remit_days,
			  l_ppydv_rec.disbursement_basis,
			  l_ppydv_rec.disbursement_fixed_amount,
			  l_ppydv_rec.disbursement_percent,
			  l_ppydv_rec.processing_fee_basis,
			  l_ppydv_rec.processing_fee_fixed_amount,
			  l_ppydv_rec.processing_fee_percent,
			  l_ppydv_rec.payment_basis,
              l_ppydv_rec.attribute_category,
              l_ppydv_rec.attribute1,
              l_ppydv_rec.attribute2,
              l_ppydv_rec.attribute3,
              l_ppydv_rec.attribute4,
              l_ppydv_rec.attribute5,
              l_ppydv_rec.attribute6,
              l_ppydv_rec.attribute7,
              l_ppydv_rec.attribute8,
              l_ppydv_rec.attribute9,
              l_ppydv_rec.attribute10,
              l_ppydv_rec.attribute11,
              l_ppydv_rec.attribute12,
              l_ppydv_rec.attribute13,
              l_ppydv_rec.attribute14,
              l_ppydv_rec.attribute15,
              l_ppydv_rec.created_by,
              l_ppydv_rec.creation_date,
              l_ppydv_rec.last_updated_by,
              l_ppydv_rec.last_update_date,
              l_ppydv_rec.last_update_login,
              --Bug# 8677460
              l_ppydv_rec.orig_contract_line_id;
    x_no_data_found := okl_party_payment_d1%NOTFOUND;
    CLOSE okl_party_payment_d1;
    RETURN(l_ppydv_rec);
  END get_ppydv_rec;

  --Bug# 4558486
  ---------------------------------------------------------------------------
  -- FUNCTION get_rec for: OKL_K_PARTY_ROLES
  ---------------------------------------------------------------------------
  FUNCTION get_kplv_rec (
    p_kplv_rec                     IN kplv_rec_type,
    x_no_data_found                OUT NOCOPY BOOLEAN
  ) RETURN kplv_rec_type IS
    CURSOR okl_k_party_roles_v_pk_csr (p_id IN NUMBER) IS
    SELECT
           ID,
           OBJECT_VERSION_NUMBER,
           ATTRIBUTE_CATEGORY,
           ATTRIBUTE1,
           ATTRIBUTE2,
           ATTRIBUTE3,
           ATTRIBUTE4,
           ATTRIBUTE5,
           ATTRIBUTE6,
           ATTRIBUTE7,
           ATTRIBUTE8,
           ATTRIBUTE9,
           ATTRIBUTE10,
           ATTRIBUTE11,
           ATTRIBUTE12,
           ATTRIBUTE13,
           ATTRIBUTE14,
           ATTRIBUTE15,
           CREATED_BY,
           CREATION_DATE,
           LAST_UPDATED_BY,
           LAST_UPDATE_DATE,
           LAST_UPDATE_LOGIN
     FROM Okl_K_Party_Roles_V
     WHERE okl_k_party_roles_v.id = p_id;
    l_okl_k_party_roles_v_pk   okl_k_party_roles_v_pk_csr%ROWTYPE;
    l_kplv_rec                     kplv_rec_type;
  BEGIN
    x_no_data_found := TRUE;
    -- Get current database values
    OPEN okl_k_party_roles_v_pk_csr (p_kplv_rec.id);
    FETCH okl_k_party_roles_v_pk_csr INTO
              l_kplv_rec.id,
              l_kplv_rec.object_version_number,
              l_kplv_rec.attribute_category,
              l_kplv_rec.attribute1,
              l_kplv_rec.attribute2,
              l_kplv_rec.attribute3,
              l_kplv_rec.attribute4,
              l_kplv_rec.attribute5,
              l_kplv_rec.attribute6,
              l_kplv_rec.attribute7,
              l_kplv_rec.attribute8,
              l_kplv_rec.attribute9,
              l_kplv_rec.attribute10,
              l_kplv_rec.attribute11,
              l_kplv_rec.attribute12,
              l_kplv_rec.attribute13,
              l_kplv_rec.attribute14,
              l_kplv_rec.attribute15,
              l_kplv_rec.created_by,
              l_kplv_rec.creation_date,
              l_kplv_rec.last_updated_by,
              l_kplv_rec.last_update_date,
              l_kplv_rec.last_update_login;
    x_no_data_found := okl_k_party_roles_v_pk_csr%NOTFOUND;
    CLOSE okl_k_party_roles_v_pk_csr;
    RETURN(l_kplv_rec);
  END get_kplv_rec;
 ------------------------------------------------------------------
  -- This version of get_rec sets error messages if no data found --
  ------------------------------------------------------------------
  FUNCTION get_kplv_rec (
    p_kplv_rec                     IN kplv_rec_type,
    x_return_status                OUT NOCOPY VARCHAR2
  ) RETURN kplv_rec_type IS
    l_kplv_rec                      kplv_rec_type;
    l_row_notfound                 BOOLEAN := TRUE;
  BEGIN
    x_return_status := OKC_API.G_RET_STS_SUCCESS;
    l_kplv_rec := get_kplv_rec(p_kplv_rec, l_row_notfound);
    IF (l_row_notfound) THEN
      OKC_API.set_message(G_APP_NAME,G_INVALID_VALUE,G_COL_NAME_TOKEN,'ID');
      x_return_status := OKC_API.G_RET_STS_ERROR;
    END IF;
    RETURN(l_kplv_rec);
  END get_kplv_rec;
  --Bug# 4558486

  --Bug # 3630858
    ---------------------------------------------------------------------------
    -- FUNCTION get_rec for: OKL_SLCTD_OPTNS_V
    ---------------------------------------------------------------------------
    FUNCTION get_cspv_rec (
      p_cspv_rec_id                    IN number,
      x_return_status                  OUT NOCOPY VARCHAR2
    ) RETURN cspv_rec_type IS
      CURSOR OKL_SLCTD_OPTNS_CSR (p_id IN NUMBER) IS
      SELECT
              ID,
              OBJECT_VERSION_NUMBER,
              POV_ID,
              KHR_ID,
              ATTRIBUTE_CATEGORY,
              ATTRIBUTE1,
              ATTRIBUTE2,
              ATTRIBUTE3,
              ATTRIBUTE4,
              ATTRIBUTE5,
              ATTRIBUTE6,
              ATTRIBUTE7,
              ATTRIBUTE8,
              ATTRIBUTE9,
              ATTRIBUTE10,
              ATTRIBUTE11,
              ATTRIBUTE12,
              ATTRIBUTE13,
              ATTRIBUTE14,
              ATTRIBUTE15,
              CREATED_BY,
              CREATION_DATE,
              LAST_UPDATED_BY,
              LAST_UPDATE_DATE,
              LAST_UPDATE_LOGIN
        FROM OKL_SLCTD_OPTNS_V
       WHERE OKL_SLCTD_OPTNS_V.id = p_id;

      l_cspv_rec_id           number;
      l_cspv_rec              cspv_rec_type;
      l_no_data_found         BOOLEAN := FALSE;
    BEGIN
	  l_cspv_rec_id := p_cspv_rec_id;
      -- Get current database values
      OPEN OKL_SLCTD_OPTNS_CSR (l_cspv_rec_id);
      FETCH OKL_SLCTD_OPTNS_CSR INTO
                l_cspv_rec.id,
                l_cspv_rec.object_version_number,
                l_cspv_rec.pov_id,
                l_cspv_rec.khr_id,
                l_cspv_rec.attribute_category,
                l_cspv_rec.attribute1,
                l_cspv_rec.attribute2,
                l_cspv_rec.attribute3,
                l_cspv_rec.attribute4,
                l_cspv_rec.attribute5,
                l_cspv_rec.attribute6,
                l_cspv_rec.attribute7,
                l_cspv_rec.attribute8,
                l_cspv_rec.attribute9,
                l_cspv_rec.attribute10,
                l_cspv_rec.attribute11,
                l_cspv_rec.attribute12,
                l_cspv_rec.attribute13,
                l_cspv_rec.attribute14,
                l_cspv_rec.attribute15,
                l_cspv_rec.created_by,
                l_cspv_rec.creation_date,
                l_cspv_rec.last_updated_by,
                l_cspv_rec.last_update_date,
                l_cspv_rec.last_update_login;
      l_no_data_found := OKL_SLCTD_OPTNS_CSR%NOTFOUND;
      CLOSE OKL_SLCTD_OPTNS_CSR;

      x_return_status := OKL_API.G_RET_STS_SUCCESS;
      IF (l_no_data_found) THEN
        OKL_API.set_message(G_APP_NAME,G_INVALID_VALUE,G_COL_NAME_TOKEN,'ID');
        x_return_status := OKL_API.G_RET_STS_ERROR;
      END IF;

      RETURN(l_cspv_rec);
  END get_cspv_rec;


  ------------------------------------------------------------------
  -- This version of get_rec sets error messages if no data found --
  ------------------------------------------------------------------
  FUNCTION get_ppydv_rec (
    p_ppydv_rec                    IN ppydv_rec_type,
    x_return_status                OUT NOCOPY VARCHAR2
  ) RETURN ppydv_rec_type IS
    l_ppydv_rec                    ppydv_rec_type;
    l_row_notfound                 BOOLEAN := TRUE;
  BEGIN
    x_return_status := OKL_API.G_RET_STS_SUCCESS;
    l_ppydv_rec := get_ppydv_rec(p_ppydv_rec, l_row_notfound);
    IF (l_row_notfound) THEN
      OKL_API.set_message(G_APP_NAME,G_INVALID_VALUE,G_COL_NAME_TOKEN,'ID');
      x_return_status := OKL_API.G_RET_STS_ERROR;
    END IF;
    RETURN(l_ppydv_rec);
  END get_ppydv_rec;
  -----------------------------------------------------------
  -- So we don't have to pass an "l_row_notfound" variable --
  -----------------------------------------------------------
  FUNCTION get_ppydv_rec (
    p_ppydv_rec                    IN ppydv_rec_type
  ) RETURN ppydv_rec_type IS
    l_row_not_found                BOOLEAN := TRUE;
  BEGIN
    RETURN(get_ppydv_rec(p_ppydv_rec, l_row_not_found));
  END get_ppydv_rec;

  --furong  4350255
  Procedure copy_party_pymt_hdr
    (p_api_version                  IN  NUMBER,
     p_init_msg_list                IN  VARCHAR2 ,
     x_return_status                OUT NOCOPY VARCHAR2,
     x_msg_count                    OUT NOCOPY NUMBER,
     x_msg_data                     OUT NOCOPY VARCHAR2,
     p_chr_id                       IN  NUMBER,
     p_cle_id                  	    IN  NUMBER,
     p_pph_id                  	    IN  NUMBER,
     x_pph_id		                OUT NOCOPY NUMBER) IS

    l_get_pphv_rec    pphv_rec_type;
    l_pphv_rec        pphv_rec_type;
    lx_pphv_rec       pphv_rec_type;

    l_return_status        VARCHAR2(1)  default OKL_API.G_RET_STS_SUCCESS;
    l_api_name             CONSTANT     varchar2(30) := 'COPY_PARTY_PYMT_HDR';
    l_api_version          CONSTANT     NUMBER := 1.0;

Begin
    x_return_status := OKL_API.G_RET_STS_SUCCESS;
    -- Call start_activity to create savepoint, check compatibility
    -- and initialize message list
    x_return_status := OKL_API.START_ACTIVITY (
                               l_api_name
                               ,p_init_msg_list
                               ,'_PVT'
                               ,x_return_status);
    -- Check if activity started successfully
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    l_get_pphv_rec.id := p_pph_id;
    l_pphv_rec := get_pphv_rec(p_pphv_rec => l_get_pphv_rec,
			                   x_return_status => x_return_status);
	l_pphv_rec.dnz_chr_id := p_chr_id;
	l_pphv_rec.cle_id := p_cle_id;

    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    OKL_LDB_PVT.insert_row
           (p_api_version   => p_api_version,
            p_init_msg_list => p_init_msg_list,
            x_return_status => x_return_status,
            x_msg_count     => x_msg_count,
            x_msg_data      => x_msg_data,
            p_pphv_rec      => l_pphv_rec,
            x_pphv_rec      => lx_pphv_rec);

    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    x_pph_id := lx_pphv_rec.id;

    OKL_API.END_ACTIVITY (x_msg_count,x_msg_data );

    EXCEPTION

    WHEN OKL_API.G_EXCEPTION_ERROR THEN
    x_return_status := OKL_API.HANDLE_EXCEPTIONS(
                               l_api_name,
                               G_PKG_NAME,
                               'OKL_API.G_RET_STS_ERROR',
                               x_msg_count,
                               x_msg_data,
                               '_PVT');
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
    x_return_status :=OKL_API.HANDLE_EXCEPTIONS(
                              l_api_name,
                              G_PKG_NAME,
                              'OKL_API.G_RET_STS_UNEXP_ERROR',
                              x_msg_count,
                              x_msg_data,
                              '_PVT');
    WHEN OTHERS THEN
    x_return_status :=OKL_API.HANDLE_EXCEPTIONS(
                              l_api_name,
                              G_PKG_NAME,
                              'OTHERS',
                              x_msg_count,
                              x_msg_data,
                              '_PVT');
End copy_party_pymt_hdr;
--furong 4350255

--------------------------------------------------------------------------------
-- Start of comments
-- Bug# 3143522
-- Procedure name  : copy_party_pymt_dtls
-- Description     : Copies okl party payment details
--                   local (sub entiry of OKL party roles)
-- Business Rules  :
-- Parameters      :
-- Version         : 1.0
-- Notes           :
-- End of Comments
-------------------------------------------------------------------------------
Procedure copy_party_pymt_dtls
    (p_api_version                  IN  NUMBER,
     p_init_msg_list                IN  VARCHAR2 ,
     x_return_status                OUT NOCOPY VARCHAR2,
     x_msg_count                    OUT NOCOPY NUMBER,
     x_msg_data                     OUT NOCOPY VARCHAR2,
     p_pyd_id                       IN  NUMBER,
     p_cpl_id                  	    IN  NUMBER,
	 --furong  4350255
	 p_pph_id                       IN  NUMBER DEFAULT OKL_API.G_MISS_NUM,
     --furong   4350255
     x_pyd_id		            OUT NOCOPY NUMBER,
     --Bug# 8677460
     p_rebook_yn                    IN VARCHAR2 DEFAULT 'N') IS

    l_get_ppydv_rec   ppydv_rec_type;
    l_ppydv_rec       ppydv_rec_type;
    lx_ppydv_rec      ppydv_rec_type;

    l_return_status        VARCHAR2(1)  default OKL_API.G_RET_STS_SUCCESS;
    l_api_name             CONSTANT     varchar2(30) := 'COPY_PARTY_PYMT_DTLS';
    l_api_version          CONSTANT     NUMBER := 1.0;

Begin
    x_return_status := OKL_API.G_RET_STS_SUCCESS;
    -- Call start_activity to create savepoint, check compatibility
    -- and initialize message list
    x_return_status := OKL_API.START_ACTIVITY (
                               l_api_name
                               ,p_init_msg_list
                               ,'_PVT'
                               ,x_return_status);
    -- Check if activity started successfully
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    l_get_ppydv_rec.id := p_pyd_id;
    l_ppydv_rec := get_ppydv_rec(p_ppydv_rec        => l_get_ppydv_rec,
			         x_return_status    => x_return_status);

    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    --create party payment details
    l_ppydv_rec.cpl_id := p_cpl_id;
	l_ppydv_rec.payment_hdr_id := p_pph_id;

    --Bug# 8677460
    IF (p_rebook_yn = 'N') THEN
      l_ppydv_rec.orig_contract_line_id := NULL;
    END IF;

    OKL_PYD_PVT.insert_row
           (p_api_version   => p_api_version,
            p_init_msg_list => p_init_msg_list,
            x_return_status => x_return_status,
            x_msg_count     => x_msg_count,
            x_msg_data      => x_msg_data,
            p_ppydv_rec     => l_ppydv_rec,
            x_ppydv_rec     => lx_ppydv_rec);

    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    x_pyd_id := lx_ppydv_rec.id;

    OKL_API.END_ACTIVITY (x_msg_count,x_msg_data );

    EXCEPTION

    WHEN OKL_API.G_EXCEPTION_ERROR THEN
    x_return_status := OKL_API.HANDLE_EXCEPTIONS(
                               l_api_name,
                               G_PKG_NAME,
                               'OKL_API.G_RET_STS_ERROR',
                               x_msg_count,
                               x_msg_data,
                               '_PVT');
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
    x_return_status :=OKL_API.HANDLE_EXCEPTIONS(
                              l_api_name,
                              G_PKG_NAME,
                              'OKL_API.G_RET_STS_UNEXP_ERROR',
                              x_msg_count,
                              x_msg_data,
                              '_PVT');
    WHEN OTHERS THEN
    x_return_status :=OKL_API.HANDLE_EXCEPTIONS(
                              l_api_name,
                              G_PKG_NAME,
                              'OTHERS',
                              x_msg_count,
                              x_msg_data,
                              '_PVT');
End copy_party_pymt_dtls;

--Bug# 4558486
Procedure copy_okl_k_party_roles
    (p_api_version                  IN  NUMBER,
     p_init_msg_list                IN  VARCHAR2 ,
     x_return_status                OUT NOCOPY VARCHAR2,
     x_msg_count                    OUT NOCOPY NUMBER,
     x_msg_data                     OUT NOCOPY VARCHAR2,
     p_kpl_id                       IN  NUMBER,
     p_cpl_id                       IN  NUMBER,
     x_kpl_id                       OUT NOCOPY NUMBER) IS

    l_get_kplv_rec    kplv_rec_type;
    l_kplv_rec        kplv_rec_type;
    lx_kplv_rec       kplv_rec_type;

    l_return_status        VARCHAR2(1)  default OKL_API.G_RET_STS_SUCCESS;
    l_api_name             CONSTANT     varchar2(30) := 'COPY_OKL_K_PARTY_ROLES';
    l_api_version          CONSTANT     NUMBER := 1.0;

Begin
    x_return_status := OKL_API.G_RET_STS_SUCCESS;
    -- Call start_activity to create savepoint, check compatibility
    -- and initialize message list
    x_return_status := OKL_API.START_ACTIVITY (
                               l_api_name
                               ,p_init_msg_list
                               ,'_PVT'
                               ,x_return_status);
    -- Check if activity started successfully
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    l_get_kplv_rec.id := p_kpl_id;
    l_kplv_rec := get_kplv_rec(p_kplv_rec => l_get_kplv_rec,
			       x_return_status => x_return_status);
    l_kplv_rec.id := p_cpl_id;

    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    OKL_KPL_PVT.insert_row
           (p_api_version   => p_api_version,
            p_init_msg_list => p_init_msg_list,
            x_return_status => x_return_status,
            x_msg_count     => x_msg_count,
            x_msg_data      => x_msg_data,
            p_kplv_rec      => l_kplv_rec,
            x_kplv_rec      => lx_kplv_rec);

    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    x_kpl_id := lx_kplv_rec.id;

    OKL_API.END_ACTIVITY (x_msg_count,x_msg_data );

    EXCEPTION

    WHEN OKL_API.G_EXCEPTION_ERROR THEN
    x_return_status := OKL_API.HANDLE_EXCEPTIONS(
                               l_api_name,
                               G_PKG_NAME,
                               'OKL_API.G_RET_STS_ERROR',
                               x_msg_count,
                               x_msg_data,
                               '_PVT');
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
    x_return_status :=OKL_API.HANDLE_EXCEPTIONS(
                              l_api_name,
                              G_PKG_NAME,
                              'OKL_API.G_RET_STS_UNEXP_ERROR',
                              x_msg_count,
                              x_msg_data,
                              '_PVT');
    WHEN OTHERS THEN
    x_return_status :=OKL_API.HANDLE_EXCEPTIONS(
                              l_api_name,
                              G_PKG_NAME,
                              'OTHERS',
                              x_msg_count,
                              x_msg_data,
                              '_PVT');
End copy_okl_k_party_roles;
--Bug# 4558486
--Bug# 3143522: 11.5.10 Subsidies
--------------------------------------------------------------------------------
-- Start of comments
--
-- Procedure Name  : Catchup_okl_contract_line
-- Description     : Does a catchup for okl_k_lines. This will not be
--                   published
-- Business Rules  :
-- Parameters      :
-- Version         : 1.0
-- Notes           : just calls OKC_COPY_CONTRACT_PUB.copy_components.
-- End of comments
--------------------------------------------------------------------------------
Procedure Catchup_okl_contract_line(
  				p_api_version                  IN  NUMBER,
    			p_init_msg_list                IN  VARCHAR2 DEFAULT OKL_API.G_FALSE,
   				x_return_status                OUT NOCOPY VARCHAR2,
    			x_msg_count                    OUT NOCOPY NUMBER,
    			x_msg_data                     OUT NOCOPY VARCHAR2,
				p_clev_id                       IN  NUMBER,
                p_klev_id                       IN  NUMBER,
    			x_clev_rec                     OUT NOCOPY okl_okc_migration_pvt.clev_rec_type,
    			x_klev_rec                     OUT NOCOPY klev_rec_type,
                  --Bug# 8677460
                  p_rebook_yn                    IN  VARCHAR2 DEFAULT 'N') is

l_return_status		           VARCHAR2(1) := OKL_API.G_RET_STS_SUCCESS;
l_api_name			           CONSTANT VARCHAR2(30) := 'CATCHUP_OKL_CONTRACT_LINE';
l_api_version		           CONSTANT NUMBER	:= 1.0;
l_clev_rec                      clev_rec_type;
l_clev_rec_out                  clev_rec_type;
l_klev_rec                      klev_rec_type;

begin
-----
-- Catch up shadow for Contract Lines
	l_clev_rec := get_clev_rec(p_clev_id => p_klev_id);
 -- get the newly created line record
 /*
	IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      		RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
      		RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
 */
    l_klev_rec := get_klev_rec(p_klev_id => p_clev_id);
--get klev record to copy from
    l_klev_rec.id := p_klev_id;

    --Bug# 8677460
    IF (p_rebook_yn = 'N') THEN
      l_klev_rec.orig_contract_line_id := NULL;
    END IF;

	OKL_CONTRACT_PUB.update_contract_line(
                p_api_version   => p_api_version,
    			p_init_msg_list => p_init_msg_list,
    			x_return_status => l_return_status,
    			x_msg_count     => x_msg_count,
    			x_msg_data      => x_msg_data,
    			p_clev_rec      => l_clev_rec,
    			p_klev_rec      => l_klev_rec,
    			x_clev_rec      => l_clev_rec_out,
    			x_klev_rec	    => x_klev_rec);
       -- check return status
        If l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR Then
	       raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        Elsif l_return_status = OKL_API.G_RET_STS_ERROR Then
	       raise OKL_API.G_EXCEPTION_ERROR;
        End If;

    --Call End Activity
        OKL_API.END_ACTIVITY(x_msg_count	=> x_msg_count,
				             x_msg_data		=> x_msg_data);
    EXCEPTION
    when OKL_API.G_EXCEPTION_ERROR then
      x_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OKL_API.G_RET_STS_ERROR',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);

    when OKL_API.G_EXCEPTION_UNEXPECTED_ERROR then
      x_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OKL_API.G_RET_STS_UNEXP_ERROR',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);

    when OTHERS then
      x_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OTHERS',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);
End CatchUp_okl_Contract_Line;
FUNCTION is_copy_allowed(p_chr_id IN NUMBER,p_sts_code IN VARCHAR2 DEFAULT NULL) RETURN BOOLEAN IS
 BEGIN
   RETURN(OKC_COPY_CONTRACT_PUB.is_copy_allowed(p_chr_id,p_sts_code));
 END is_copy_allowed;
-------
FUNCTION is_subcontract_allowed(p_chr_id IN NUMBER,p_sts_code IN VARCHAR2) RETURN BOOLEAN IS
 BEGIN
   RETURN(OKC_COPY_CONTRACT_PUB.is_subcontract_allowed(p_chr_id,p_sts_code));
 END is_subcontract_allowed;
-----
FUNCTION update_target_contract(p_chr_id IN NUMBER) RETURN BOOLEAN IS
 BEGIN
   RETURN(OKC_COPY_CONTRACT_PUB.update_target_contract(p_chr_id));
 END update_target_contract;
-----
PROCEDURE derive_line_style(p_old_lse_id     IN  NUMBER,
                              p_old_jtot_code  IN  VARCHAR2,
                              p_new_subclass   IN  VARCHAR2,
                              p_new_parent_lse IN  NUMBER,
                              x_new_lse_count  OUT NOCOPY NUMBER,
                              x_new_lse_ids    OUT NOCOPY VARCHAR2) IS
 BEGIN
  OKC_COPY_CONTRACT_PVT.derive_line_style(
               p_old_lse_id      => p_old_lse_id,
               p_old_jtot_code   => p_old_jtot_code,
               p_new_subclass    => p_new_subclass,
               p_new_parent_lse  => p_new_parent_lse,
               x_new_lse_count   => x_new_lse_count,
               x_new_lse_ids     => x_new_lse_ids);
 END derive_line_style;
--------------------------------------------------------------------------------
-- Start of comments
--
-- Procedure Name  : copy_components
-- Description     : copies components for shadowed contract. will be
--                   published in OKL_COPY_CONTRACTS_PUB
-- Business Rules  :
-- Parameters      :
-- Version         : 1.0
-- Notes           : just calls OKC_COPY_CONTRACT_PUB.copy_components.
-- End of comments
--------------------------------------------------------------------------------
PROCEDURE copy_components(
    p_api_version                  IN NUMBER,
    p_init_msg_list                IN VARCHAR2 DEFAULT OKL_API.G_FALSE,
    x_return_status                OUT NOCOPY VARCHAR2,
    x_msg_count                    OUT NOCOPY NUMBER,
    x_msg_data                     OUT NOCOPY VARCHAR2,
    p_from_chr_id                  IN NUMBER,
    p_to_chr_id	          	       IN NUMBER,
    p_contract_number		       IN VARCHAR2,
    p_contract_number_modifier     IN VARCHAR2,
    p_to_template_yn			   IN VARCHAR2 DEFAULT 'N',
    p_copy_reference			   IN VARCHAR2 DEFAULT 'COPY',
    p_copy_line_party_yn           IN VARCHAR2,
    p_scs_code                     IN VARCHAR2,
    p_intent                       IN VARCHAR2,
    p_prospect                     IN VARCHAR2,
    p_components_tbl			   IN api_components_tbl,
    p_lines_tbl				       IN api_lines_tbl,
    x_chr_id                       OUT NOCOPY NUMBER) is
    l_return_status		           VARCHAR2(1) := OKL_API.G_RET_STS_SUCCESS;
    l_api_name			           CONSTANT VARCHAR2(30) := 'OKL_COPY_COMPONENTS';
    l_api_version		           CONSTANT NUMBER	:= 1.0;

    l_components_tbl api_components_tbl_okc;
    l_lines_tbl      api_lines_tbl_okc;
begin
-----
--Call OKL_API.START_ACTIVITY to set savepoints
    	l_return_status := OKL_API.START_ACTIVITY( substr(l_api_name,1,26),
	                                               G_PKG_NAME,
	                                               p_init_msg_list,
	                                               G_API_VERSION,
	                                               p_api_version,
	                                               G_SCOPE,
                                         	       x_return_status);

 	IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      		RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    	ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
      		RAISE OKL_API.G_EXCEPTION_ERROR;
    	END IF;

  l_components_tbl := migrate_components_tbl(p_components_tbl);
  l_lines_tbl      := migrate_lines_tbl(p_lines_tbl);
--Call OKC_CONTRACT_PUB.copy_components
	OKC_COPY_CONTRACT_PUB.copy_components(
    	p_api_version				=> p_api_version,
    	p_init_msg_list				=> p_init_msg_list,
    	x_return_status				=> l_return_status,
    	x_msg_count					=> x_msg_count,
    	x_msg_data					=> x_msg_data,
    	p_from_chr_id				=> p_from_chr_id,
    	p_to_chr_id					=> p_to_chr_id,
    	p_contract_number			=> p_contract_number,
    	p_contract_number_modifier	=> p_contract_number_modifier,
    	p_to_template_yn			=> p_to_template_yn,
    	p_copy_reference			=> p_copy_reference,
    	p_copy_line_party_yn		=> p_copy_line_party_yn,
    	p_scs_code					=> p_scs_code,
    	p_intent                    => p_intent,
    	p_prospect                  => p_prospect,
    	p_components_tbl			=> l_components_tbl,
    	p_lines_tbl					=> l_lines_tbl,
    	x_chr_id                    => x_chr_id);

      -- check return status
        If l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR Then
	       raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        Elsif l_return_status = OKL_API.G_RET_STS_ERROR Then
	       raise OKL_API.G_EXCEPTION_ERROR;
        End If;

        --Call End Activity
        OKL_API.END_ACTIVITY(x_msg_count	=> x_msg_count,
				 x_msg_data		=> x_msg_data);
    EXCEPTION
    when OKL_API.G_EXCEPTION_ERROR then
      x_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OKL_API.G_RET_STS_ERROR',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);

    when OKL_API.G_EXCEPTION_UNEXPECTED_ERROR then
      x_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OKL_API.G_RET_STS_UNEXP_ERROR',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);

    when OTHERS then
      x_return_status := OKL_API.HANDLE_EXCEPTIONS(
			p_api_name  => l_api_name,
			p_pkg_name  => g_pkg_name,
			p_exc_name  => 'OTHERS',
			x_msg_count => x_msg_count,
			x_msg_data  => x_msg_data,
			p_api_type  => g_api_type);
End copy_components;

------------------------------------------------------------------------------
-- PROCEDURE get_sll_rules
--
--  This procedure retrieves all SLL related to given SLH rule under LALEVL Category
--
-- Calls:
-- Called By:
------------------------------------------------------------------------------
   PROCEDURE get_sll_rules(
                           x_return_status  OUT NOCOPY VARCHAR2,
                           x_msg_count      OUT NOCOPY NUMBER,
                           x_msg_data       OUT NOCOPY VARCHAR2,
                           p_rgpv_rec       IN  rgpv_rec_type,
                           p_rdf_code       IN  VARCHAR2,
                           p_slh_id         IN  NUMBER,
                           x_rulv_tbl       OUT NOCOPY rulv_tbl_type,
                           x_rule_count     OUT NOCOPY NUMBER
                          ) IS
    CURSOR okc_rulv_csr (p_rgp_id IN NUMBER,
                         p_rdf_code IN VARCHAR2,
                         p_slh_id   IN NUMBER) IS
    SELECT
            ID,
            OBJECT_VERSION_NUMBER,
            SFWT_FLAG,
            OBJECT1_ID1,
            OBJECT2_ID1,
            OBJECT3_ID1,
            OBJECT1_ID2,
            OBJECT2_ID2,
            OBJECT3_ID2,
            JTOT_OBJECT1_CODE,
            JTOT_OBJECT2_CODE,
            JTOT_OBJECT3_CODE,
            DNZ_CHR_ID,
            RGP_ID,
            PRIORITY,
            STD_TEMPLATE_YN,
            COMMENTS,
            WARN_YN,
            ATTRIBUTE_CATEGORY,
            ATTRIBUTE1,
            ATTRIBUTE2,
            ATTRIBUTE3,
            ATTRIBUTE4,
            ATTRIBUTE5,
            ATTRIBUTE6,
            ATTRIBUTE7,
            ATTRIBUTE8,
            ATTRIBUTE9,
            ATTRIBUTE10,
            ATTRIBUTE11,
            ATTRIBUTE12,
            ATTRIBUTE13,
            ATTRIBUTE14,
            ATTRIBUTE15,
            CREATED_BY,
            CREATION_DATE,
            LAST_UPDATED_BY,
            LAST_UPDATE_DATE,
            LAST_UPDATE_LOGIN,
            --TEXT,
            RULE_INFORMATION_CATEGORY,
            RULE_INFORMATION1,
            RULE_INFORMATION2,
            RULE_INFORMATION3,
            RULE_INFORMATION4,
            RULE_INFORMATION5,
            RULE_INFORMATION6,
            RULE_INFORMATION7,
            RULE_INFORMATION8,
            RULE_INFORMATION9,
            RULE_INFORMATION10,
            RULE_INFORMATION11,
            RULE_INFORMATION12,
            RULE_INFORMATION13,
            RULE_INFORMATION14,
            RULE_INFORMATION15,
            TEMPLATE_YN,
            ans_set_jtot_object_code,
            ans_set_jtot_object_id1,
            ans_set_jtot_object_id2,
            DISPLAY_SEQUENCE
     FROM Okc_Rules_V
     WHERE okc_rules_v.rgp_id      = p_rgp_id
     AND   okc_rules_v.object2_id1 = p_slh_id
     AND   RULE_INFORMATION_CATEGORY = DECODE(p_rdf_code,NULL,RULE_INFORMATION_CATEGORY,p_rdf_code);

     l_rulv_rec                  rulv_rec_type;
     i                           NUMBER DEFAULT 0;
     l_proc_name                 VARCHAR2(35) := 'GET_SLL_RULES';
  BEGIN
    IF (G_DEBUG_ENABLED = 'Y') THEN
      G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
    END IF;

    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,l_proc_name);
    END IF;
    -- Get current database values
    OPEN okc_rulv_csr (p_rgpv_rec.id,
                       p_rdf_code,
                       p_slh_id);
    LOOP
    FETCH okc_rulv_csr INTO
              l_rulv_rec.ID,
              l_rulv_rec.OBJECT_VERSION_NUMBER,
              l_rulv_rec.SFWT_FLAG,
              l_rulv_rec.OBJECT1_ID1,
              l_rulv_rec.OBJECT2_ID1,
              l_rulv_rec.OBJECT3_ID1,
              l_rulv_rec.OBJECT1_ID2,
              l_rulv_rec.OBJECT2_ID2,
              l_rulv_rec.OBJECT3_ID2,
              l_rulv_rec.JTOT_OBJECT1_CODE,
              l_rulv_rec.JTOT_OBJECT2_CODE,
              l_rulv_rec.JTOT_OBJECT3_CODE,
              l_rulv_rec.DNZ_CHR_ID,
              l_rulv_rec.RGP_ID,
              l_rulv_rec.PRIORITY,
              l_rulv_rec.STD_TEMPLATE_YN,
              l_rulv_rec.COMMENTS,
              l_rulv_rec.WARN_YN,
              l_rulv_rec.ATTRIBUTE_CATEGORY,
              l_rulv_rec.ATTRIBUTE1,
              l_rulv_rec.ATTRIBUTE2,
              l_rulv_rec.ATTRIBUTE3,
              l_rulv_rec.ATTRIBUTE4,
              l_rulv_rec.ATTRIBUTE5,
              l_rulv_rec.ATTRIBUTE6,
              l_rulv_rec.ATTRIBUTE7,
              l_rulv_rec.ATTRIBUTE8,
              l_rulv_rec.ATTRIBUTE9,
              l_rulv_rec.ATTRIBUTE10,
              l_rulv_rec.ATTRIBUTE11,
              l_rulv_rec.ATTRIBUTE12,
              l_rulv_rec.ATTRIBUTE13,
              l_rulv_rec.ATTRIBUTE14,
              l_rulv_rec.ATTRIBUTE15,
              l_rulv_rec.CREATED_BY,
              l_rulv_rec.CREATION_DATE,
              l_rulv_rec.LAST_UPDATED_BY,
              l_rulv_rec.LAST_UPDATE_DATE,
              l_rulv_rec.LAST_UPDATE_LOGIN,
              --l_rulv_rec.TEXT,
              l_rulv_rec.RULE_INFORMATION_CATEGORY,
              l_rulv_rec.RULE_INFORMATION1,
              l_rulv_rec.RULE_INFORMATION2,
              l_rulv_rec.RULE_INFORMATION3,
              l_rulv_rec.RULE_INFORMATION4,
              l_rulv_rec.RULE_INFORMATION5,
              l_rulv_rec.RULE_INFORMATION6,
              l_rulv_rec.RULE_INFORMATION7,
              l_rulv_rec.RULE_INFORMATION8,
              l_rulv_rec.RULE_INFORMATION9,
              l_rulv_rec.RULE_INFORMATION10,
              l_rulv_rec.RULE_INFORMATION11,
              l_rulv_rec.RULE_INFORMATION12,
              l_rulv_rec.RULE_INFORMATION13,
              l_rulv_rec.RULE_INFORMATION14,
              l_rulv_rec.RULE_INFORMATION15,
              l_rulv_rec.TEMPLATE_YN,
              l_rulv_rec.ans_set_jtot_object_code,
              l_rulv_rec.ans_set_jtot_object_id1,
              l_rulv_rec.ans_set_jtot_object_id2,
              l_rulv_rec.DISPLAY_SEQUENCE ;
    EXIT WHEN okc_rulv_csr%NOTFOUND;
      i := okc_rulv_csr%RowCount;
      x_rulv_tbl(i) := l_rulv_rec;
    END LOOP;
    CLOSE okc_rulv_csr;
    x_rule_count := i;

    RETURN;

   END get_sll_rules;

------------------------------------------------------------------------------
-- PROCEDURE sync_slh_sll
--
--  This procedure synchronizes SLH and SLL Rules
--
-- Calls:
-- Called By:
------------------------------------------------------------------------------

  PROCEDURE sync_slh_sll(
                         x_return_status OUT NOCOPY VARCHAR2,
                         x_msg_count     OUT NOCOPY NUMBER,
                         x_msg_data      OUT NOCOPY VARCHAR2,
                         p_new_chr_id    IN  OKC_K_HEADERS_V.ID%TYPE,
                         p_old_rgp_id    IN  NUMBER,
                         p_new_rgp_id    IN  NUMBER
                        ) IS

  l_proc_name   VARCHAR2(35)    := 'SYNC_SLH_SLL';
  sync_failed   EXCEPTION;

  x_new_rgpv_rec      rgpv_rec_type;
  x_new_slh_rulv_rec  rulv_rec_type;

  x_slh_rulv_tbl      rulv_tbl_type;
  x_slh_rule_count    NUMBER;

  x_sll_rulv_tbl      rulv_tbl_type;
  x_sll_rule_count    NUMBER;

  x_rulv_rec          rulv_rec_type;

  l_old_rgpv_rec      rgpv_rec_type;
  l_slh_rulv_rec      rulv_rec_type;
  l_sll_rulv_rec      rulv_rec_type;

  l_rebook_rgp_id NUMBER;
  l_orig_rgp_id   NUMBER;

  l_rulv_tbl      rulv_tbl_type;
  i               NUMBER := 0;

  CURSOR orig_cle_csr(p_cle_id OKC_K_LINES_V.ID%TYPE) IS
  SELECT orig_system_id1
  FROM   okc_k_lines_v
  WHERE  id = p_cle_id;

  CURSOR del_rgp_csr(p_chr_id OKC_K_HEADERS_V.ID%TYPE,
                     p_rgp_id NUMBER) IS
  SELECT id
  FROM   okc_rule_groups_v
  WHERE  dnz_chr_id = p_chr_id
  AND    id         = p_rgp_id
  AND    rgd_code   = 'LALEVL';

  CURSOR rule_csr(p_rgp_id NUMBER) IS
  SELECT id
  FROM   okc_rules_v
  WHERE  rgp_id = p_rgp_id
  --Bug# : 3124577 :11.5.10 Rule migration
  AND    rule_information_category IN ('LASLH','LASLL');
  --AND    rule_information_category IN ('SLH','SLL');

  BEGIN
    IF (G_DEBUG_ENABLED = 'Y') THEN
      G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
    END IF;
    x_return_status := Okc_Api.G_RET_STS_SUCCESS;
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,l_proc_name);
    END IF;

      -- Delete SLH, SLL from Original Contract
      i := 1;

      FOR del_rgp_rec IN del_rgp_csr(p_new_chr_id,
                                     p_new_rgp_id)
      LOOP
         FOR rule_rec IN rule_csr(del_rgp_rec.id)
         LOOP
            l_rulv_tbl(i).id := rule_rec.id;
            i := i+ 1;
         END LOOP;
      END LOOP;

      Okl_Rule_Pub.delete_rule(
                               p_api_version    => 1.0,
                               p_init_msg_list  => Okc_Api.G_FALSE,
                               x_return_status  => x_return_status,
                               x_msg_count      => x_msg_count,
                               x_msg_data       => x_msg_data,
                               p_rulv_tbl       => l_rulv_tbl
                              );
      IF (x_return_status <> Okc_Api.G_RET_STS_SUCCESS) THEN
        RAISE sync_failed;
      END IF;

      l_old_rgpv_rec.id := p_old_rgp_id;
      --
      -- Get SLH Rule from OLD Contract
      --
      Okl_Rule_Apis_Pvt.Get_Contract_Rules(
                                           p_api_version    => 1.0,
                                           p_init_msg_list  => Okl_Api.G_FALSE,
                                           p_rgpv_rec       => l_old_rgpv_rec,
                                           --Bug# 3124577: 11.5.10 Rule Migration
                                           p_rdf_code       => 'LASLH',
                                           --p_rdf_code       => 'SLH',
                                           x_return_status  => x_return_status,
                                           x_msg_count      => x_msg_count,
                                           x_msg_data       => x_msg_data,
                                           x_rulv_tbl       => x_slh_rulv_tbl,
                                           x_rule_count     => x_slh_rule_count
                                          );
      IF (x_return_status <> Okc_Api.G_RET_STS_SUCCESS) THEN
         RAISE sync_failed;
      END IF;

      --x_slh_rulv_tbl_out := x_slh_rulv_tbl;
      --x_slh_count        := x_slh_rule_count;

      FOR i IN 1..x_slh_rule_count
      LOOP
         l_slh_rulv_rec            := x_slh_rulv_tbl(i);
         l_slh_rulv_rec.rgp_id     := p_new_rgp_id;
         l_slh_rulv_rec.dnz_chr_id := p_new_chr_id;

         Okl_Rule_Pub.create_rule(
                                  p_api_version     => 1.0,
                                  p_init_msg_list   => Okc_Api.G_FALSE,
                                  x_return_status   => x_return_status,
                                  x_msg_count       => x_msg_count,
                                  x_msg_data        => x_msg_data,
                                  p_rulv_rec        => l_slh_rulv_rec,
                                  x_rulv_rec        => x_new_slh_rulv_rec
                                 );
         IF (x_return_status <> Okc_Api.G_RET_STS_SUCCESS) THEN
             x_return_status := Okc_Api.G_RET_STS_ERROR;
             RAISE sync_failed;
         END IF;

         --
         -- Get SLL Rules from Header for a SLH
         --
         get_sll_rules(
                       x_return_status  => x_return_status,
                       x_msg_count      => x_msg_count,
                       x_msg_data       => x_msg_data,
                       p_rgpv_rec       => l_old_rgpv_rec,
                       --Bug# 3124577 : 11.5.10 Rule Migration
                       p_rdf_code       => 'LASLL',
                       --p_rdf_code       => 'SLL',
                       p_slh_id         => x_slh_rulv_tbl(i).id,
                       x_rulv_tbl       => x_sll_rulv_tbl,
                       x_rule_count     => x_sll_rule_count
                      );
         IF (x_return_status <> Okc_Api.G_RET_STS_SUCCESS) THEN
            RAISE sync_failed;
         END IF;

         --x_sll_rulv_tbl_out := x_sll_rulv_tbl;
         --x_sll_count        := x_sll_rule_count;

         -- Create a SLL rule under SLH created above
         FOR i IN 1..x_sll_rule_count
         LOOP

            l_sll_rulv_rec             := x_sll_rulv_tbl(i);
            l_sll_rulv_rec.rgp_id      := p_new_rgp_id;
            l_sll_rulv_rec.object2_id1 := x_new_slh_rulv_rec.id;
            l_sll_rulv_rec.dnz_chr_id  := p_new_chr_id;

            Okl_Rule_Pub.create_rule(
                                     p_api_version     => 1.0,
                                     p_init_msg_list   => Okc_Api.G_FALSE,
                                     x_return_status   => x_return_status,
                                     x_msg_count       => x_msg_count,
                                     x_msg_data        => x_msg_data,
                                     p_rulv_rec        => l_sll_rulv_rec,
                                     x_rulv_rec        => x_rulv_rec
                                    );
               IF (x_return_status <> Okc_Api.G_RET_STS_SUCCESS) THEN
                   x_return_status := Okc_Api.G_RET_STS_ERROR;
                   RAISE sync_failed;
               END IF;
         END LOOP; -- SLL

      END LOOP; -- SLH

  EXCEPTION
    WHEN sync_failed THEN
       x_return_status := Okc_Api.G_RET_STS_ERROR;
  END sync_slh_sll;
-- Start Bug 2376998
------------------------------------------------------------------------------
-- PROCEDURE link_slh_sll
--
--  This procedure links SLH and SLL by calling sync_slh_sll at LINE level
--
-- Calls:
-- Called By:
------------------------------------------------------------------------------

  PROCEDURE link_slh_sll(
                         x_return_status OUT NOCOPY VARCHAR2,
                         x_msg_count     OUT NOCOPY NUMBER,
                         x_msg_data      OUT NOCOPY VARCHAR2,
                         p_old_chr_id    IN  OKC_K_HEADERS_V.ID%TYPE,
                         p_new_cle_id    IN  OKC_K_LINES_V.ID%TYPE,
                         p_new_chr_id    IN  OKC_K_HEADERS_V.ID%TYPE
                        ) IS

 link_failed EXCEPTION;

 CURSOR lalevl_csr (p_chr_id OKC_K_HEADERS_V.ID%TYPE,
                    p_cle_id OKC_K_LINES_V.ID%TYPE) IS
 SELECT id,
        cle_id
 FROM   okc_rule_groups_v
 WHERE  dnz_chr_id = p_chr_id
 AND    cle_id     = p_cle_id
 AND    rgd_code   = 'LALEVL';

 CURSOR old_lalevl_csr (p_chr_id OKC_K_HEADERS_V.ID%TYPE,
                        p_cle_id OKC_K_LINES_V.ID%TYPE) IS
 SELECT id
 FROM   okc_rule_groups_v
 WHERE  dnz_chr_id = p_chr_id
 AND    rgd_code   = 'LALEVL'
 AND    (cle_id    = p_cle_id
         OR ( cle_id IS NULL
              AND
              p_cle_id IS NULL));

 CURSOR old_line_csr (p_cle_id OKC_K_LINES_V.ID%TYPE) IS
 SELECT orig_system_id1
 FROM   OKC_K_LINES_V
 WHERE  id = p_cle_id;

 l_old_lalevl_id NUMBER;
 l_new_lalevl_id NUMBER;
 l_old_cle_id    OKC_K_LINES_V.ID%TYPE;
 l_new_cle_id    OKC_K_LINES_V.ID%TYPE;

 BEGIN

   FOR new_lalevl_rec IN lalevl_csr(p_new_chr_id,
                                    p_new_cle_id)
   LOOP
      l_new_lalevl_id := new_lalevl_rec.id;
      l_new_cle_id    := new_lalevl_rec.cle_id;

      l_old_cle_id    := NULL;
      IF (l_new_cle_id IS NOT NULL) THEN
         OPEN old_line_csr (l_new_cle_id);
         FETCH old_line_csr INTO l_old_cle_id;
         CLOSE old_line_csr;
      END IF;

      OPEN old_lalevl_csr(p_old_chr_id,
                          l_old_cle_id);
      FETCH old_lalevl_csr INTO l_old_lalevl_id;
      CLOSE old_lalevl_csr;

      sync_slh_sll(
                   x_return_status => x_return_status,
                   x_msg_count     => x_msg_count,
                   x_msg_data      => x_msg_data,
                   p_new_chr_id    => p_new_chr_id,
                   p_old_rgp_id    => l_old_lalevl_id,
                   p_new_rgp_id    => l_new_lalevl_id
                  );
      IF (x_return_status <> OKC_API.G_RET_STS_SUCCESS) THEN
         RAISE Okl_Api.G_EXCEPTION_ERROR;
      END IF;
   END LOOP;

 EXCEPTION
   WHEN link_failed THEN
      x_return_status := OKC_API.G_RET_STS_ERROR;
 END link_slh_sll;

-- End Bug 2376998
------------------------------------------------------------------------------
-- PROCEDURE link_slh_sll
--
--  This procedure links SLH and SLL by calling sync_slh_sll at header
--
-- Calls:
-- Called By:
------------------------------------------------------------------------------

  PROCEDURE link_slh_sll(
                         x_return_status OUT NOCOPY VARCHAR2,
                         x_msg_count     OUT NOCOPY NUMBER,
                         x_msg_data      OUT NOCOPY VARCHAR2,
                         p_old_chr_id    IN OKC_K_HEADERS_V.ID%TYPE,
                         p_new_chr_id    IN OKC_K_HEADERS_V.ID%TYPE
                        ) IS

 link_failed EXCEPTION;

 CURSOR lalevl_csr (p_chr_id OKC_K_HEADERS_V.ID%TYPE) IS
 SELECT id,
        cle_id
 FROM   okc_rule_groups_v
 WHERE  dnz_chr_id = p_chr_id
 AND    cle_id     IS NULL       -- Bug 2376998
 AND    rgd_code   = 'LALEVL';

 CURSOR old_lalevl_csr (p_chr_id OKC_K_HEADERS_V.ID%TYPE,
                        p_cle_id OKC_K_LINES_V.ID%TYPE) IS
 SELECT id
 FROM   okc_rule_groups_v
 WHERE  dnz_chr_id = p_chr_id
 AND    rgd_code   = 'LALEVL'
 AND    (cle_id    = p_cle_id
         OR ( cle_id IS NULL
              AND
              p_cle_id IS NULL));

 CURSOR old_line_csr (p_cle_id OKC_K_LINES_V.ID%TYPE) IS
 SELECT orig_system_id1
 FROM   OKC_K_LINES_V
 WHERE  id = p_cle_id;

 l_old_lalevl_id NUMBER;
 l_new_lalevl_id NUMBER;
 l_old_cle_id    OKC_K_LINES_V.ID%TYPE;
 l_new_cle_id    OKC_K_LINES_V.ID%TYPE;

 BEGIN

   FOR new_lalevl_rec IN lalevl_csr(p_new_chr_id)
   LOOP
      l_new_lalevl_id := new_lalevl_rec.id;
      l_new_cle_id    := new_lalevl_rec.cle_id;

      l_old_cle_id    := NULL;
      IF (l_new_cle_id IS NOT NULL) THEN
         OPEN old_line_csr (l_new_cle_id);
         FETCH old_line_csr INTO l_old_cle_id;
         CLOSE old_line_csr;
      END IF;

      OPEN old_lalevl_csr(p_old_chr_id,
                          l_old_cle_id);
      FETCH old_lalevl_csr INTO l_old_lalevl_id;
      CLOSE old_lalevl_csr;

      sync_slh_sll(
                   x_return_status => x_return_status,
                   x_msg_count     => x_msg_count,
                   x_msg_data      => x_msg_data,
                   p_new_chr_id    => p_new_chr_id,
                   p_old_rgp_id    => l_old_lalevl_id,
                   p_new_rgp_id    => l_new_lalevl_id
                  );
      IF (x_return_status <> OKC_API.G_RET_STS_SUCCESS) THEN
         raise OKL_API.G_EXCEPTION_ERROR;
      END IF;
   END LOOP;

 EXCEPTION
   WHEN link_failed THEN
      x_return_status := OKC_API.G_RET_STS_ERROR;
 END link_slh_sll;
--------------------------------------------------------------------------------
-- Start of comments
--Bug# 2522268
-- Procedure Name  : cleanup_abandoned_lines
-- Description     : Local Procedure Will be called from copy_contract
--                   to delete any ABANDONED lines copied on to the contract
-- Business Rules  : Takes in chr_id of the copied contract and physically
--                   deletes(delete cascade) all the lines which appear as
--                   logically deleted on parent (source) contract.
-- Parameters      :
-- Version         : 1.0
-- Notes           :
-- End of comments
--------------------------------------------------------------------------------
PROCEDURE cleanup_abandoned_lines(p_api_version     IN NUMBER,
                                  p_init_msg_list   IN VARCHAR2,
                                  x_return_status   OUT NOCOPY VARCHAR2,
                                  x_msg_count       OUT NOCOPY NUMBER,
                                  x_msg_data        OUT NOCOPY VARCHAR2,
                                  p_chr_id          IN NUMBER) is
--Cursor for abandoned parent top lines
  CURSOR abnd_tls_csr(p_copied_chr_id IN NUMBER) IS
  Select cle.id,
         cle.orig_system_id1
  from   OKC_K_LINES_B     cle_parent,
         OKC_LINE_STYLES_B cle_parent_lse,
         OKC_K_LINES_B     cle
  WHERE  cle_parent.id = cle.orig_system_id1
  AND    cle_parent.lse_id = cle_parent_lse.id
  AND    cle_parent.sts_code = 'ABANDONED'
  AND    cle_parent_lse.lse_type = 'TLS'
  AND    cle.dnz_chr_id = p_copied_chr_id;

--Cursor for abandoned orphan sub-lines
  CURSOR abnd_sls_csr(p_copied_chr_id IN NUMBER) IS
  Select cle.id,
         cle.orig_system_id1
  from   OKC_K_LINES_B     cle_parent,
         OKC_LINE_STYLES_B cle_parent_lse,
         OKC_K_LINES_B     cle
  WHERE  cle_parent.id = cle.orig_system_id1
  AND    cle_parent.lse_id = cle_parent_lse.id
  AND    cle_parent.sts_code = 'ABANDONED'
  AND    cle_parent_lse.lse_type = 'SLS'
  AND    cle.dnz_chr_id = p_copied_chr_id;

  l_cle_id           OKC_K_LINES_B.ID%TYPE;
  l_source_cle_id    OKC_K_LINES_B.ID%TYPE;
  l_chr_id           OKC_K_HEADERS_B.ID%TYPE;

Begin
   x_return_status := OKL_API.G_RET_STS_SUCCESS;
   l_chr_id := p_chr_id;
   OPEN abnd_tls_csr(p_copied_chr_id => l_chr_id);
   LOOP
       FETCH abnd_tls_csr into l_cle_id, l_source_cle_id;
       EXIT WHEN abnd_tls_csr%NOTFOUND;
       OKL_CONTRACT_PUB.delete_contract_line(
           p_api_version    => p_api_version,
           p_init_msg_list  => p_init_msg_list,
           x_return_status  => x_return_status,
           x_msg_count      => x_msg_count,
           x_msg_data       => x_msg_data,
           p_line_id        => l_cle_id);
       If x_return_status <> OKL_API.G_RET_STS_SUCCESS Then
           RAISE G_EXCEPTION_HALT_PROCESS;
       End If;
   END LOOP;
   CLOSE abnd_tls_csr;

   OPEN abnd_sls_csr(p_copied_chr_id => l_chr_id);
   LOOP
       FETCH abnd_sls_csr into l_cle_id, l_source_cle_id;
       EXIT WHEN abnd_sls_csr%NOTFOUND;
       OKL_CONTRACT_PUB.delete_contract_line(
           p_api_version    => p_api_version,
           p_init_msg_list  => p_init_msg_list,
           x_return_status  => x_return_status,
           x_msg_count      => x_msg_count,
           x_msg_data       => x_msg_data,
           p_line_id        => l_cle_id);
       If x_return_status <> OKL_API.G_RET_STS_SUCCESS Then
           RAISE G_EXCEPTION_HALT_PROCESS;
       End If;
   END LOOP;
   CLOSE abnd_sls_csr;
   EXCEPTION
   WHEN G_EXCEPTION_HALT_PROCESS Then
       --just return back the return status with message stack;
       Null;
       If abnd_tls_csr%ISOPEN Then
           CLOSE abnd_tls_csr;
       End If;
       If abnd_sls_csr%ISOPEN Then
           CLOSE abnd_sls_csr;
       End If;
   WHEN OTHERS Then
       If abnd_tls_csr%ISOPEN Then
           CLOSE abnd_tls_csr;
       End If;
       If abnd_sls_csr%ISOPEN Then
           CLOSE abnd_sls_csr;
       End If;
       x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
End cleanup_abandoned_lines;

--
--Bug# 2522268 End
--

--------------------------------------------------------------------------------
-- Start of comments
--Bug# 2522268
-- Procedure Name  : cleanup_rollover_lines
-- Description     : Local Procedure Will be called from copy_contract
--                   to delete any Rollover lines copied on to the contract
-- Business Rules  : Takes in chr_id of the copied contract and physically
--                   deletes(delete cascade) all the lines which appear as
--                   logically deleted on parent (source) contract.
-- Parameters      :
-- Version         : 1.0
-- Notes           :
-- End of comments
--------------------------------------------------------------------------------
PROCEDURE cleanup_rollover_lines(p_api_version     IN NUMBER,
                                  p_init_msg_list   IN VARCHAR2,
                                  x_return_status   OUT NOCOPY VARCHAR2,
                                  x_msg_count       OUT NOCOPY NUMBER,
                                  x_msg_data        OUT NOCOPY VARCHAR2,
                                  p_chr_id          IN NUMBER) is
--Cursor for rollover parent top lines
  CURSOR roll_tls_csr(p_copied_chr_id IN NUMBER) IS
  Select cle.id, cle.orig_system_id1
  from   OKC_K_LINES_B     cle_parent,
         OKC_LINE_STYLES_B cle_parent_lse,
         OKC_K_LINES_B     cle,
		 okl_k_lines kle_parent
  WHERE  cle_parent.id = kle_parent.id
  AND    cle_parent.id = cle.orig_system_id1
  AND    cle_parent.lse_id = cle_parent_lse.id
  AND    kle_parent.fee_type = 'ROLLOVER'
  AND    cle_parent_lse.lse_type = 'TLS'
  AND    cle.dnz_chr_id = p_copied_chr_id;

  l_cle_id           OKC_K_LINES_B.ID%TYPE;
  l_source_cle_id    OKC_K_LINES_B.ID%TYPE;
  l_chr_id           OKC_K_HEADERS_B.ID%TYPE;

Begin
   x_return_status := OKL_API.G_RET_STS_SUCCESS;
   l_chr_id := p_chr_id;
   OPEN roll_tls_csr(p_copied_chr_id => l_chr_id);
   LOOP
       FETCH roll_tls_csr into l_cle_id, l_source_cle_id;
       EXIT WHEN roll_tls_csr%NOTFOUND;
       OKL_CONTRACT_PUB.delete_contract_line(
           p_api_version    => p_api_version,
           p_init_msg_list  => p_init_msg_list,
           x_return_status  => x_return_status,
           x_msg_count      => x_msg_count,
           x_msg_data       => x_msg_data,
           p_line_id        => l_cle_id);
       If x_return_status <> OKL_API.G_RET_STS_SUCCESS Then
           RAISE G_EXCEPTION_HALT_PROCESS;
       End If;
   END LOOP;
   CLOSE roll_tls_csr;

   EXCEPTION
   WHEN G_EXCEPTION_HALT_PROCESS Then
       --just return back the return status with message stack;
       Null;
       If roll_tls_csr%ISOPEN Then
           CLOSE roll_tls_csr;
       End If;
   WHEN OTHERS Then
       If roll_tls_csr%ISOPEN Then
           CLOSE roll_tls_csr;
       End If;
       x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
End cleanup_rollover_lines;


-- bug 3630858
--------------------------------------------------------------------------------
-- Start of comments
--
-- Procedure Name  : copy_product_options
-- Description     : copies contract product option.
--                   published in OKL_COPY_CONTRACTS_PUB
-- Business Rules  :
-- Parameters      :
-- Version         : 1.0
-- Notes           :
-- End of comments
--------------------------------------------------------------------------------
PROCEDURE  copy_product_options
	        	     (p_api_version          IN NUMBER,
			     p_init_msg_list         IN VARCHAR2 DEFAULT OKL_API.G_FALSE,
			     x_return_status         OUT NOCOPY VARCHAR2,
			     x_msg_count             OUT NOCOPY NUMBER,
			     x_msg_data              OUT NOCOPY VARCHAR2,
			     p_new_khr_id            IN NUMBER,
			     p_cspv_id               IN NUMBER,
			     x_cspv_id               OUT NOCOPY NUMBER
			     ) IS
--local variables
l_return_status		VARCHAR2(1) := OKL_API.G_RET_STS_SUCCESS;
l_api_name		CONSTANT VARCHAR2(30) := 'COPY_PRODUCT_OPTIONS';
l_api_version		CONSTANT NUMBER	:= 1.0;
l_cspv_id               NUMBER;
p_cspv_rec              cspv_rec_type;
l_cspv_rec              cspv_rec_type;
lx_cspv_rec             cspv_rec_type;


Begin
    x_return_status := OKL_API.G_RET_STS_SUCCESS;
    -- Call start_activity to create savepoint, check compatibility
    -- and initialize message list
    x_return_status := OKL_API.START_ACTIVITY (
                               l_api_name
                               ,p_init_msg_list
                               ,'_PVT'
                               ,x_return_status);
    -- Check if activity started successfully
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    l_cspv_id := p_cspv_id;
    l_cspv_rec := get_cspv_rec(p_cspv_rec_id        => l_cspv_id,
			                   x_return_status  => x_return_status
			                   );

    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    --create selected product options
    l_cspv_rec.khr_id := p_new_khr_id;
    l_cspv_rec.id := null;

    OKL_CSP_PVT.insert_row
           (p_api_version   => p_api_version,
            p_init_msg_list => p_init_msg_list,
            x_return_status => x_return_status,
            x_msg_count     => x_msg_count,
            x_msg_data      => x_msg_data,
            p_cspv_rec      => l_cspv_rec,
            x_cspv_rec     =>  lx_cspv_rec);

    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    x_cspv_id := lx_cspv_rec.id;

    OKL_API.END_ACTIVITY (x_msg_count,x_msg_data );

    EXCEPTION

    WHEN OKL_API.G_EXCEPTION_ERROR THEN
    x_return_status := OKL_API.HANDLE_EXCEPTIONS(
                               l_api_name,
                               G_PKG_NAME,
                               'OKL_API.G_RET_STS_ERROR',
                               x_msg_count,
                               x_msg_data,
                               '_PVT');
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
    x_return_status :=OKL_API.HANDLE_EXCEPTIONS(
                              l_api_name,
                              G_PKG_NAME,
                              'OKL_API.G_RET_STS_UNEXP_ERROR',
                              x_msg_count,
                              x_msg_data,
                              '_PVT');
    WHEN OTHERS THEN
    x_return_status :=OKL_API.HANDLE_EXCEPTIONS(
                              l_api_name,
                              G_PKG_NAME,
                              'OTHERS',
                              x_msg_count,
                              x_msg_data,
                              '_PVT');

END copy_product_options;

-- bug 3630858 end


--------------------------------------------------------------------------------
-- Start of comments
--
-- Procedure Name  : copy_contract
-- Description     : copies contract. will be
--                   published in OKL_COPY_CONTRACTS_PUB
-- Business Rules  :
-- Parameters      :
-- Version         : 1.0
-- Notes           :
-- End of comments
--------------------------------------------------------------------------------
PROCEDURE copy_contract(
            p_api_version                  IN NUMBER,
            p_init_msg_list                IN VARCHAR2 DEFAULT OKL_API.G_FALSE,
            x_return_status                OUT NOCOPY VARCHAR2,
            x_msg_count                    OUT NOCOPY NUMBER,
            x_msg_data                     OUT NOCOPY VARCHAR2,
            p_commit        			   IN VARCHAR2 DEFAULT 'F',
            p_chr_id                       IN NUMBER,
            p_contract_number		       IN VARCHAR2,
            p_contract_number_modifier     IN VARCHAR2,
            p_to_template_yn			   IN VARCHAR2 DEFAULT 'N',
            p_renew_ref_yn                 IN VARCHAR2,
            p_copy_lines_yn                IN VARCHAR2,
            p_override_org		           IN VARCHAR2 DEFAULT 'N',
            x_chr_id                       OUT NOCOPY NUMBER) IS
--local variables
l_return_status		VARCHAR2(1) := OKL_API.G_RET_STS_SUCCESS;
l_api_name			CONSTANT VARCHAR2(30) := 'OKL_COPY_CONTRACT';
l_api_version		CONSTANT NUMBER	:= 1.0;
l_chrv_rec			chrv_rec_type;
l_chrv_rec_out		chrv_rec_type;
l_khrv_rec			khrv_rec_type;
l_khrv_rec_out		khrv_rec_type;
l_clev_rec			clev_rec_type;
l_klev_rec			klev_rec_type;
l_klev_rec_out		klev_rec_type;
l_chr_id            NUMBER;
l_chr_id_2          NUMBER;
l_clev_id           NUMBER;
l_klev_id           NUMBER;
l_clev_rec_out		clev_rec_type;

 Cursor  l_clev_cur (l_chr_id IN Number) is
 Select         Orig_System_Id1,id
 From   OKC_K_LINES_V
 Where  dnz_chr_id = l_chr_id;

--This is modified to take care of the patch in OKC which has included
--original source line id with the new line id

--bug # 2659592
--with overide flag as 'N' okc_copy api sets the
--okc_vontext.organization id to profile value OE: Item validation Organization
--which could be different from OKL: Contract Items Inventory Organization
--there by causing incompatible organization error while copy
--thus OKL copy will always call OKC copy with p_override_org as 'Y'.
l_override_org Varchar2(1) default 'Y';

--Bug# 3143522 : 11.5.10 Subsidies
--cursor to get header party payment dtls
    cursor l_hdrpyd_csr (p_old_chr_id in number,
                         p_new_chr_id in number) is
    select pyd_old.id pyd_id,
           cpl_new.id cpl_id
    from   okl_party_payment_dtls pyd_old,
           okc_k_party_roles_b    cpl_old,
           okc_k_party_roles_b    cpl_new
    where  pyd_old.cpl_id            =  cpl_old.id
    and    cpl_old.chr_id            =  p_old_chr_id
    and    cpl_old.dnz_chr_id        =  p_old_chr_id
    and    cpl_new.chr_id            =  p_new_chr_id
    and    cpl_new.dnz_chr_id        =  p_new_chr_id
    and    cpl_old.rle_code          =  cpl_new.rle_code
    and    cpl_old.jtot_object1_code =  cpl_new.jtot_object1_code
    and    cpl_old.object1_id1       =  cpl_new.object1_id1
    and    cpl_old.object1_id2       =  cpl_new.object1_id2;


    cursor l_clepyd_csr (p_old_chr_id in number,
                         p_new_chr_id in number,
                         p_old_cle_id in number,
                         p_new_cle_id in number
                         ) is
    select pyd_old.id pyd_id,
           cpl_new.id cpl_id
    from   okl_party_payment_dtls pyd_old,
           okc_k_party_roles_b    cpl_old,
           okc_k_party_roles_b    cpl_new
    where  pyd_old.cpl_id            =  cpl_old.id
    and    cpl_old.cle_id            =  p_old_cle_id
    and    cpl_old.dnz_chr_id        =  p_old_chr_id
    and    cpl_new.cle_id            =  p_new_cle_id
    and    cpl_new.dnz_chr_id        =  p_new_chr_id
    and    cpl_old.rle_code          =  cpl_new.rle_code
    and    cpl_old.jtot_object1_code =  cpl_new.jtot_object1_code
    and    cpl_old.object1_id1       =  cpl_new.object1_id1
    and    cpl_old.object1_id2       =  cpl_new.object1_id2;

    -- Bug 3630858
    cursor l_product_options_csr(p_old_chr_id number) IS
    select cspv.id
    from OKL_SLCTD_OPTNS_V cspv
    where cspv.khr_id = p_old_chr_id;

    l_pyd_id    okl_party_payment_dtls.ID%TYPE;
    lx_pyd_id   okl_party_payment_dtls.ID%TYPE;
    l_cpl_id    okc_k_party_roles_b.ID%TYPE;
    -- Bug 3630858
    l_cspv_id   okl_slctd_optns_v.ID%TYPE;
    lx_cspv_id  okl_slctd_optns_v.ID%TYPE;

---------------------
--Bug# 3143522
-----------------------
Begin
-----
--Call OKL_API.START_ACTIVITY to set savepoints
--dbms_output.put_line('before call to start activity '||to_char(p_chr_id));
--dbms_output.put_line(l_api_name||G_SCOPE);
    	l_return_status := OKL_API.START_ACTIVITY( substr(l_api_name,1,26),
	                                               G_PKG_NAME,
	                                               p_init_msg_list,
	                                               G_API_VERSION,
	                                               p_api_version,
	                                               G_SCOPE,
                                         	       x_return_status);
    --dbms_output.put_line('after call to start activity '||to_char(p_chr_id));
 	IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      		RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
 	ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
      		RAISE OKL_API.G_EXCEPTION_ERROR;
 	END IF;
    	--Call OKC_COPY_CONTRACT_PUB.Copy_Contract
        --dbms_output.put_line('before okc_copy p_chr_id '||to_char(p_chr_id));
    	OKC_COPY_CONTRACT_PUB.copy_contract(
    			p_api_version              => p_api_version,
    			p_init_msg_list            => p_init_msg_list,
    			x_return_status            => l_return_status,
    			x_msg_count	               => x_msg_count,
    			x_msg_data 	               => x_msg_data ,
    			p_commit 	               => p_commit,
    			p_chr_id	               => p_chr_id,
    			p_contract_number          => p_contract_number,
    			p_contract_number_modifier => P_contract_number_modifier,
    			p_to_template_yn           => p_to_template_yn,
    			p_renew_ref_yn             => p_renew_ref_yn,
    			p_copy_lines_yn	           => p_copy_lines_yn,
    			--bug # 2659592
    			--p_override_org	           => p_override_org,
                p_override_org             => l_override_org,
    			x_chr_id	               => x_chr_id);

       --dbms_output.put_line('Chr id after copy to okc header '||to_char(x_chr_id));
       --dbms_output.put_line('Return Status copy to okc header '||l_return_status||' '||x_msg_data);
        -- check return status
        If l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR Then
	       raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        Elsif l_return_status = OKL_API.G_RET_STS_ERROR Then
	       raise OKL_API.G_EXCEPTION_ERROR;
        End If;
	--------------------------------------------------------------------------------
	--Catch Up Shadow for Contract Header :
    l_chr_id_2 := x_chr_id;
	l_chrv_rec := get_chrv_rec(l_chr_id_2);
    l_khrv_rec := get_khrv_rec(p_chr_id);
    --dbms_output.put_line(' chr id after fetch '||l_chrv_rec.id);
    --dbms_output.put_line(' khr id after fetch '||l_khrv_rec.id);
    --If OKL does not have a shadow do not proceed to
    --catchup on shadow
    If l_khrv_rec.id = OKL_API.G_MISS_NUM then
        null;
    Else
        l_khrv_rec.id := x_chr_id;
	-- Create record into okl_contract_header
	OKL_CONTRACT_PUB.update_contract_header(
			p_api_version	=> p_api_version,
			p_init_msg_list => p_init_msg_list,
			x_return_status => l_return_status,
			x_msg_count  	=> x_msg_count,
			x_msg_data   	=> x_msg_data,
            p_restricted_update => OKL_API.G_FALSE,
			p_chrv_rec   	=> l_chrv_rec,
			p_khrv_rec   	=> l_khrv_rec,
			x_chrv_rec      => l_chrv_rec_out,
			x_khrv_rec      => l_khrv_rec_out);
    --dbms_output.put_line('return status '||l_return_status);
    --dbms_output.put_line('After create okl record okc hdr id'||to_char(l_chrv_rec_out.id));
    -- check return status
    If l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR Then
        raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    Elsif l_return_status = OKL_API.G_RET_STS_ERROR Then
        raise OKL_API.G_EXCEPTION_ERROR;
    End If;

    --------------------------------------------------------------------------------------
    --BUG# 3143522 : 11.5.10 Subsidies - copy party payment details
    --------------------------------------------------------------------------------------
    open l_hdrpyd_csr (p_new_chr_id => x_chr_id,
                        p_old_chr_id => p_chr_id);

    loop
        fetch l_hdrpyd_csr into l_pyd_id, l_cpl_id;
        Exit when l_hdrpyd_csr%NOTFOUND;
        -------------------------------------------------
        --call local api to copy party payment details
        -------------------------------------------------
        copy_party_pymt_dtls
                (p_api_version          => p_api_version,
                p_init_msg_list         => p_init_msg_list,
                x_return_status         => x_return_status,
                x_msg_count             => x_msg_count,
                x_msg_data              => x_msg_data,
                p_pyd_id                => l_pyd_id,
                p_cpl_id                => l_cpl_id,
                x_pyd_id                => lx_pyd_id);



        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
           RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
           RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;

    End Loop;
    Close l_hdrpyd_csr;

    --------------------------------------------------------------------------------------
    --BUG# 3143522 : 11.5.10 Subsidies - copy party payment details
    --------------------------------------------------------------------------------------

        --call local API for creation of party payment details
    IF p_copy_lines_yn = 'Y' Then
    -- Catch up shadow for Contract Lines
	   Open l_clev_cur(x_chr_id);
	   Loop
		  Fetch l_clev_cur into l_clev_id,l_klev_id;
          --dbms_output.put_line('Before Catchup Contract Lines ');
		  Exit when l_clev_cur%NotFound;
		  Catchup_okl_contract_line(
    				p_api_version		=> p_api_version,
        			p_init_msg_list		=> p_init_msg_list,
			        x_return_status		=> l_return_status,
   			        x_msg_count			=> x_msg_count,
   			        x_msg_data			=> x_msg_data,
			        p_clev_id			=> l_clev_id,
                                p_klev_id           => l_klev_id,
			        x_clev_rec			=> l_clev_rec_out,
		                x_klev_rec			=> l_klev_rec_out
				);
         -- check return status
        If l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR Then
            raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        Elsif l_return_status = OKL_API.G_RET_STS_ERROR Then
            raise OKL_API.G_EXCEPTION_ERROR;
        End If;

            --------------------------------------------------------------------------------------
            --BUG# 3143522 : 11.5.10 Subsidies - copy party payment details
            --------------------------------------------------------------------------------------
            open l_clepyd_csr (p_new_chr_id => x_chr_id,
                               p_old_chr_id => p_chr_id,
                               p_new_cle_id  => l_klev_id,
                               p_old_cle_id  => l_clev_id);

            loop
                fetch l_clepyd_csr into l_pyd_id, l_cpl_id;
                Exit when l_clepyd_csr%NOTFOUND;
                -------------------------------------------------
                --call local api to copy party payment details
                -------------------------------------------------
                copy_party_pymt_dtls
                        (p_api_version          => p_api_version,
                        p_init_msg_list         => p_init_msg_list,
                        x_return_status         => x_return_status,
                        x_msg_count             => x_msg_count,
                        x_msg_data              => x_msg_data,
                        p_pyd_id                => l_pyd_id,
                        p_cpl_id                => l_cpl_id,
                        x_pyd_id                => lx_pyd_id);



                IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
                   RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
                ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
                   RAISE OKL_API.G_EXCEPTION_ERROR;
                END IF;

            End Loop;
            Close l_clepyd_csr;

            --------------------------------------------------------------------------------------
            --BUG# 3143522 : 11.5.10 Subsidies - copy party payment details
            --------------------------------------------------------------------------------------
	   End Loop;
     Close l_clev_cur;

     --
     --Bug# 2522268 : Physically delete all the lines with source lines having
     --               abandoned status
     cleanup_abandoned_lines(p_api_version     => p_api_version,
                             p_init_msg_list   => p_init_msg_list,
                             x_return_status   => x_return_Status,
                             x_msg_count       => x_msg_count,
                             x_msg_data        => x_msg_data,
                             p_chr_id          => x_chr_id);
     If x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR Then
         raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
     Elsif x_return_status = OKL_API.G_RET_STS_ERROR Then
         raise OKL_API.G_EXCEPTION_ERROR;
     End If;
     --
     --Bug# 2522268 End
     --

   End If;
   End If;

   --
   -- Special Process for LALEVL (SLH, SLL) rules
   --

   link_slh_sll(
                x_return_status => l_return_status,
                x_msg_count     => x_msg_count,
                x_msg_data      => x_msg_data,
                p_old_chr_id    => p_chr_id,
                p_new_chr_id    => x_chr_id
               );


    IF (l_return_status <> OKC_API.G_RET_STS_SUCCESS) THEN
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
	--Call OKC_COPY_CONTRACT_PUB.Copy_Components
    -- do not do this again as this might already be done as part of OKC_COPY_CONTRACT
    /*
	OKC_COPY_CONTRACT_PUB.Copy_Components(
            p_api_version               =>  p_api_version,
            p_init_msg_list             =>  p_init_msg_list,
            x_return_status             =>  l_return_status,
            x_msg_count                 =>  x_msg_count,
            x_msg_data                  =>  x_msg_data,
            p_from_chr_id               =>  p_chr_id,
            p_to_chr_id	          	    =>  x_chr_id,
            p_contract_number		    =>  p_contract_number,
            p_contract_number_modifier  =>  p_contract_number_modifier,
            p_to_template_yn			=>  p_to_template_yn,
            p_copy_reference			=>  p_copy_reference,
            p_copy_line_party_yn        =>  p_copy_line_party_yn,
            p_scs_code                  =>  p_scs_code,
            p_intent                    =>  p_intent,
            p_prospect                  =>  p_prospect,
            p_components_tbl			=>  p_components_tbl,
            p_lines_tbl				    =>  p_lines_tbl,
            x_chr_id                    =>  l_chr_id);
        -- check return status
        If l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR Then
	       raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        Elsif l_return_status = OKL_API.G_RET_STS_ERROR Then
	       raise OKL_API.G_EXCEPTION_ERROR;
        End If;
    */


	  --------------------------------------------------------------------------------------
                --BUG# 3630858 : copy product options
           --------------------------------------------------------------------------------------
	 open l_product_options_csr(p_old_chr_id => p_chr_id);

	 loop
	     fetch l_product_options_csr into l_cspv_id;
	     Exit when l_product_options_csr%NOTFOUND;
	     ----------------------------------------------------
	     --call local api to copy contract product options
	     ----------------------------------------------------
	     copy_product_options
		     (p_api_version          => p_api_version,
		     p_init_msg_list         => p_init_msg_list,
		     x_return_status         => x_return_status,
		     x_msg_count             => x_msg_count,
		     x_msg_data              => x_msg_data,
		     p_new_khr_id            => x_chr_id,
		     p_cspv_id               => l_cspv_id,
		     x_cspv_id               => lx_cspv_id
		     );

	     IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
		RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
	     ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
		RAISE OKL_API.G_EXCEPTION_ERROR;
	     END IF;

	 End Loop;
     Close l_product_options_csr;

	--Call End Activity
	OKL_API.END_ACTIVITY(x_msg_count, x_msg_data);
	EXCEPTION
	     WHEN OKL_API.G_EXCEPTION_ERROR THEN
             If l_hdrpyd_csr%ISOPEN then
                 close l_hdrpyd_csr;
             End If;
             If l_clepyd_csr%ISOPEN then
                 close l_clepyd_csr;
             End If;
           --dbms_output.put_line('identified error');
	       x_return_status := OKL_API.HANDLE_EXCEPTIONS
	       (substr(l_api_name,1,26),
	        G_PKG_NAME,
	        'OKL_API.G_RET_STS_ERROR',
	        x_msg_count,
	        x_msg_data,
	        G_SCOPE);
		-- Resetting the global transaction id.
		okc_cvm_pvt.g_trans_id := 'XXX';
	     WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
             If l_hdrpyd_csr%ISOPEN then
                 close l_hdrpyd_csr;
             End If;
             If l_clepyd_csr%ISOPEN then
                 close l_clepyd_csr;
             End If;


           --dbms_output.put_line('unexpected error :'||l_api_name||G_SCOPE);
	       x_return_status := OKL_API.HANDLE_EXCEPTIONS
	       (substr(l_api_name,1,26),
	        G_PKG_NAME,
	        'OKL_API.G_RET_STS_UNEXP_ERROR',
	        x_msg_count,
	        x_msg_data,
	        G_SCOPE);
		-- Resetting the global transaction id.
		okc_cvm_pvt.g_trans_id := 'XXX';
	     WHEN OTHERS THEN
	      -- store SQL error message on message stack for caller
             If l_hdrpyd_csr%ISOPEN then
                 close l_hdrpyd_csr;
             End If;
             If l_clepyd_csr%ISOPEN then
                 close l_clepyd_csr;
             End If;

             If l_product_options_csr%ISOPEN then
	            close l_product_options_csr;
	     End If;

            --dbms_output.put_line('when others error');
           --dbms_output.put_line('Error '||SQLERRM);
	      OKL_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
	       x_return_status := OKL_API.HANDLE_EXCEPTIONS
	       (substr(l_api_name,1,26),
	        G_PKG_NAME,
	        'OTHERS',
	        x_msg_count,
	        x_msg_data,
	        G_SCOPE);
		-- Resetting the global transaction id.
		okc_cvm_pvt.g_trans_id := 'XXX';
END COPY_CONTRACT;
--------------------------------------------------------------------------------
-- Start of comments
--
-- Procedure Name  : copy_contract_lines
-- Description     : copies contract lines for a shadowed contract. will be
--                   published in OKL_COPY_CONTRACTS_PUB
-- Business Rules  :
-- Parameters      :
-- Version         : 1.0
-- Notes           :
-- End of comments
--------------------------------------------------------------------------------
Procedure copy_contract_lines(
    	p_api_version                  IN NUMBER,
    	p_init_msg_list                IN VARCHAR2 DEFAULT OKL_API.G_FALSE,
    	x_return_status                OUT NOCOPY VARCHAR2,
    	x_msg_count                    OUT NOCOPY NUMBER,
    	x_msg_data                     OUT NOCOPY VARCHAR2,
    	p_from_cle_id                  IN NUMBER,
    	p_to_cle_id                    IN NUMBER,
    	p_to_chr_id                    IN NUMBER,
    	p_to_template_yn	           IN VARCHAR2,
    	p_copy_reference	           IN VARCHAR2,
    	p_copy_line_party_yn           IN VARCHAR2,
    	p_renew_ref_yn                 IN VARCHAR2,
    	x_cle_id		               OUT NOCOPY NUMBER) is

l_return_status	    VARCHAR2(1) := OKL_API.G_RET_STS_SUCCESS;
l_cle_id			NUMBER := OKL_API.G_MISS_NUM;
l_cle_id_out		NUMBER := OKL_API.G_MISS_NUM;
l_api_name			CONSTANT VARCHAR2(30) := 'OKL_COPY_CONTRACT_LINES';
l_api_version		CONSTANT NUMBER	:= 1.0;
l_clev_rec_out		clev_rec_type;
x_klev_rec_out		klev_rec_type;
l_old_chr_id            OKC_K_HEADERS_V.ID%TYPE;
CURSOR	    c_lines(p_from_cle_id NUMBER) IS
SELECT 	   level,
		    id,
		    chr_id,
		    cle_id,
	        dnz_chr_id,
            orig_system_id1
    FROM 	okc_k_lines_b
    CONNECT BY  PRIOR id = cle_id
    START WITH  id = p_from_cle_id;
c_lines_rec c_lines%rowtype;

CURSOR old_chr_csr(p_cle_id OKC_K_LINES_V.ID%TYPE) IS
SELECT cle.dnz_chr_id
FROM   okc_k_lines_v cle
WHERE  cle.id = p_cle_id;

-----------------------------------------------------------
--Bug# 3143522 : Subsidies copy party payment details
----------------------------------------------------------
   cursor l_clepyd_csr (p_old_chr_id in number,
                         p_new_chr_id in number,
                         p_old_cle_id in number,
                         p_new_cle_id in number
                         ) is
    select pyd_old.id pyd_id,
           cpl_new.id cpl_id
    from   okl_party_payment_dtls pyd_old,
           okc_k_party_roles_b    cpl_old,
           okc_k_party_roles_b    cpl_new
    where  pyd_old.cpl_id            =  cpl_old.id
    and    cpl_old.cle_id            =  p_old_cle_id
    and    cpl_old.dnz_chr_id        =  p_old_chr_id
    and    cpl_new.cle_id            =  p_new_cle_id
    and    cpl_new.dnz_chr_id        =  p_new_chr_id
    and    cpl_old.rle_code          =  cpl_new.rle_code
    and    cpl_old.jtot_object1_code =  cpl_new.jtot_object1_code
    and    cpl_old.object1_id1       =  cpl_new.object1_id1
    and    cpl_old.object1_id2       =  cpl_new.object1_id2;

    l_pyd_id    okl_party_payment_dtls.ID%TYPE;
    lx_pyd_id   okl_party_payment_dtls.ID%TYPE;
    l_cpl_id    okc_k_party_roles_b.ID%TYPE;
-----------------------------------------------------------
--Bug# 3143522 : Subsidies copy party payment details
----------------------------------------------------------

--furong 4350255, find out the hdr id for a cle id --
CURSOR hdr_exist_csr (p_chr_id NUMBER, p_cle_id NUMBER) IS
SELECT id
FROM okl_party_payment_hdr
WHERE dnz_chr_id = p_chr_id
AND cle_id = p_cle_id;

l_old_hdr_id NUMBER;
l_new_hdr_id NUMBER;

/* not used --
CURSOR dtls_exist_csr (p_chr_id NUMBER, p_cle_id NUMBER) IS
SELECT id
FROM okl_party_payment_dtls
WHERE payment_hdr_id IN
(SELECT id
 FROM okl_party_payment_hdr
 WHERE dnz_chr_id = p_chr_id
 AND cle_id = p_cle_id);

--l_old_hdr_id NUMBER;
--l_new_hdr_id NUMBER;

l_old_dtl_id NUMBER;
l_new_dtl_id NUMBER;
*/

-- find out payment details, headers and vendors for a cle_id --
cursor l_clepyd_pt_csr (p_old_chr_id in number,
                        p_new_chr_id in number,
                     	p_old_cle_id in number,
                     	p_new_cle_id in number,
						p_hdr_id     in number
                     	) is
    select pyd_old.id pyd_id,
		   pyd_old.payment_hdr_id,
           cpl_new.id cpl_id
    from   okl_party_payment_dtls pyd_old,
           okc_k_party_roles_b    cpl_old,
           okc_k_party_roles_b    cpl_new,
		   okl_party_payment_hdr  hdr
    where  pyd_old.cpl_id            =  cpl_old.id
    and    cpl_old.cle_id            =  p_old_cle_id
    and    cpl_old.dnz_chr_id        =  p_old_chr_id
    and    cpl_new.cle_id            =  p_new_cle_id
    and    cpl_new.dnz_chr_id        =  p_new_chr_id
    and    cpl_old.rle_code          =  cpl_new.rle_code
    and    cpl_old.jtot_object1_code =  cpl_new.jtot_object1_code
    and    cpl_old.object1_id1       =  cpl_new.object1_id1
    and    cpl_old.object1_id2       =  cpl_new.object1_id2
	and    hdr.id = pyd_old.payment_hdr_id
	and    hdr.id = p_hdr_id;

    l_pt_pyd_id    okl_party_payment_dtls.ID%TYPE;
    lx_pt_pyd_id   okl_party_payment_dtls.ID%TYPE;
    l_pt_cpl_id    okc_k_party_roles_b.ID%TYPE;
	l_payment_hdr_id okl_party_payment_dtls.PAYMENT_HDR_ID%TYPE;

-- end furong  4350255

  --Bug# 4899328
  l_new_chr_id okc_k_headers_b.id%type;

  --Bug# 8677460
  CURSOR chr_csr(p_chr_id IN okc_k_headers_b.ID%TYPE) IS
  SELECT orig_system_source_code,
         orig_system_id1
  FROM okc_k_headers_b
  WHERE id = p_chr_id;

  l_rbk_chr_orig_source_code okc_k_headers_b.ORIG_SYSTEM_SOURCE_CODE%TYPE;
  l_rbk_chr_orig_system_id1  okc_k_headers_b.ORIG_SYSTEM_ID1%TYPE;
  l_rebook_yn VARCHAR2(1);
  --Bug# 8677460

Begin
------
	-- call START_ACTIVITY to create savepoint, check compatibility
    -- and initialize message list
	l_return_status := OKL_API.START_ACTIVITY( substr(l_api_name,1,26),
	                                           G_PKG_NAME,
	                                           p_init_msg_list,
	                                           G_API_VERSION,
	                                           p_api_version,
	                                           G_SCOPE,
                                         	   x_return_status);
	IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      		RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
      		RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
	--Call OKC_COPY_CONTRACT_PUB.copy_contract_lines
	OKC_COPY_CONTRACT_PUB.copy_contract_lines(p_api_version			=> P_api_version,
											  p_init_msg_list		=> p_init_msg_list,
											  x_return_status		=> l_return_status,
											  x_msg_count			=> x_msg_count,
											  x_msg_data			=> x_msg_data,
											  p_from_cle_id			=> p_from_cle_id,
											  p_to_cle_id			=> p_to_cle_id,
											  p_to_chr_id			=> p_to_chr_id,
											  p_to_template_yn		=> p_to_template_yn,
											  p_copy_reference		=> p_copy_reference,
											  p_copy_line_party_yn 	=> p_copy_line_party_yn,
											  p_renew_ref_yn 		=> p_renew_ref_yn,
											  x_cle_id 				=> x_cle_id);

        -- check return status
        If l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR Then
	       raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        Elsif l_return_status = OKL_API.G_RET_STS_ERROR Then
	       raise OKL_API.G_EXCEPTION_ERROR;
        End If;

        -- Get Old Chr id from New Chr id
        OPEN old_chr_csr(p_from_cle_id);
        FETCH old_chr_csr INTO l_old_chr_id;
        IF old_chr_csr%NOTFOUND THEN
           RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        END IF;
        CLOSE old_chr_csr;

        --Bug# 4899328
        -- p_to_chr_id will be null when copying only sub-lines
        -- so fetch new chr_id from p_to_cle_id
        l_new_chr_id := p_to_chr_id;
        IF l_new_chr_id IS NULL AND p_to_cle_id IS NOT NULL THEN
          OPEN old_chr_csr(p_to_cle_id);
          FETCH old_chr_csr INTO l_new_chr_id;
          IF old_chr_csr%NOTFOUND THEN
            RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
          END IF;
          CLOSE old_chr_csr;
        END IF;
        --Bug# 4899328

        --Bug# 8677460
        l_rebook_yn  := 'N';

        OPEN chr_csr(p_chr_id => l_old_chr_id);
        FETCH chr_csr INTO l_rbk_chr_orig_source_code, l_rbk_chr_orig_system_id1;
        CLOSE chr_csr;

        IF ( NVL(l_rbk_chr_orig_source_code,OKL_API.G_MISS_CHAR) = 'OKL_REBOOK' AND
             NVL(l_rbk_chr_orig_system_id1,OKL_API.G_MISS_NUM) = l_new_chr_id ) THEN
          l_rebook_yn  := 'Y';
        END IF;
        --Bug# 8677460

        --catch up the shadow
        Open c_lines(x_cle_id);
        Loop
            Fetch c_lines into c_lines_rec;
            Exit when c_lines%NotFound;

                --Catch up shadow for contract line
                Catchup_okl_contract_line(
		              p_api_version		=> p_api_version,
			          p_init_msg_list	=> p_init_msg_list,
   				      x_return_status	=> l_return_status,
 			          x_msg_count		=> x_msg_count,
    			      x_msg_data		=> x_msg_data,
                      p_clev_id			=> c_lines_rec.orig_system_id1,
                      p_klev_id         => c_lines_rec.id,
    			      x_clev_rec		=> l_clev_rec_out,
    			      x_klev_rec		=> x_klev_rec_out,
                        p_rebook_yn       => l_rebook_yn
				);

			-- check return status
            If l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR Then
	           raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
            Elsif l_return_status = OKL_API.G_RET_STS_ERROR Then
	           raise OKL_API.G_EXCEPTION_ERROR;
            End If;
            --------------------------------------------------------------------------------
            --bug# 3143522 : fixed as part of this -payments can be at subline level
            --------------------------------------------------------------------------------
            link_slh_sll(
                         x_return_status => l_return_status,
                         x_msg_count     => x_msg_count,
                         x_msg_data      => x_msg_data,
                         p_old_chr_id    => l_old_chr_id,
                         --p_new_cle_id    => x_cle_id,            -- Bug 2376998
                         p_new_cle_id    => c_lines_rec.id,            -- Bug 2376998
                         p_new_chr_id    => l_new_chr_id           --Bug# 4899328
                        );
			IF (l_return_status <> OKC_API.G_RET_STS_SUCCESS) THEN
                RAISE OKL_API.G_EXCEPTION_ERROR;
            END IF;
            --------------------------------------------------------------------------------------
            --BUG# 3143522 : 11.5.10 Subsidies - copy party payment details
            --------------------------------------------------------------------------------------

   		    --furong 4350255 copy each payment hdr for this cle id
			--return new hdr id for details copy
			--if non-passthru, do the old logic --
			l_old_hdr_id := null;
			OPEN hdr_exist_csr (p_chr_id => l_old_chr_id,
				 			    p_cle_id => c_lines_rec.orig_system_id1);
			LOOP
			  FETCH hdr_exist_csr INTO l_old_hdr_id;
			  EXIT WHEN hdr_exist_csr%NOTFOUND;
			  -- For the passthru, do the following copy
			  copy_party_pymt_hdr
                        (p_api_version          => p_api_version,
                        p_init_msg_list         => p_init_msg_list,
                        x_return_status         => x_return_status,
                        x_msg_count             => x_msg_count,
                        x_msg_data              => x_msg_data,
                        p_chr_id                => c_lines_rec.dnz_chr_id,
                        p_cle_id                => c_lines_rec.id,
						p_pph_id            	=> l_old_hdr_id,
                        x_pph_id                => l_new_hdr_id);

              IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
                 RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
              ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
                 RAISE OKL_API.G_EXCEPTION_ERROR;
			  END IF;

			  --Check dtls exists for this hdr, if yes, do the copy --
			  OPEN l_clepyd_pt_csr (p_new_chr_id  => c_lines_rec.dnz_chr_id,
                              	    p_old_chr_id  => l_old_chr_id,
                              		p_new_cle_id  => c_lines_rec.id,
                              		p_old_cle_id  => c_lines_rec.orig_system_id1,
									p_hdr_id      => l_old_hdr_id);
			  LOOP
				FETCH l_clepyd_pt_csr INTO l_pt_pyd_id,l_payment_hdr_id,l_pt_cpl_id;
				EXIT WHEN l_clepyd_pt_csr%NOTFOUND;

				IF (l_pt_pyd_id IS NOT NULL) THEN
				  copy_party_pymt_dtls
                        (p_api_version          => p_api_version,
                        p_init_msg_list         => p_init_msg_list,
                        x_return_status         => x_return_status,
                        x_msg_count             => x_msg_count,
                        x_msg_data              => x_msg_data,
                        p_pyd_id                => l_pt_pyd_id,
                        p_cpl_id                => l_pt_cpl_id,
						p_pph_id                => l_new_hdr_id,
                        x_pyd_id                => lx_pt_pyd_id,
                        --Bug# 8677460
                        p_rebook_yn             => l_rebook_yn);

                  IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
                    RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
                  ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
                    RAISE OKL_API.G_EXCEPTION_ERROR;
				  END IF;

			  	END IF; --l_pt_pyd_id IS NOT NULL ...--

			  END LOOP;
			  CLOSE l_clepyd_pt_csr;

			END LOOP;
			CLOSE hdr_exist_csr;

			-- For those non-passthru cases, do the following copy --
			IF (l_old_hdr_id IS NULL) THEN
			  open l_clepyd_csr (p_new_chr_id => c_lines_rec.dnz_chr_id,
                               p_old_chr_id => l_old_chr_id,
                               p_new_cle_id  => c_lines_rec.id,
                               p_old_cle_id  => c_lines_rec.orig_system_id1);

              loop
                fetch l_clepyd_csr into l_pyd_id, l_cpl_id;
                Exit when l_clepyd_csr%NOTFOUND;
				    -------------------------------------------------
                --call local api to copy party payment details
                -------------------------------------------------

                copy_party_pymt_dtls
                        (p_api_version          => p_api_version,
                        p_init_msg_list         => p_init_msg_list,
                        x_return_status         => x_return_status,
                        x_msg_count             => x_msg_count,
                        x_msg_data              => x_msg_data,
                        p_pyd_id                => l_pyd_id,
                        p_cpl_id                => l_cpl_id,
                        x_pyd_id                => lx_pyd_id);

                IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
                   RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
                ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
                   RAISE OKL_API.G_EXCEPTION_ERROR;
                END IF;

              End Loop;
              Close l_clepyd_csr;
			END IF; -- if l_old_hdr_id IS NULL

			--furong 4350255 end copy hdr and(or) details --
            --------------------------------------------------------------------------------------
            --BUG# 3143522 : 11.5.10 Subsidies - copy party payment details
            --------------------------------------------------------------------------------------

        End Loop;
        Close c_lines;

        --
        -- Special Process for LALEVL (SLH, SLL) rules
        --


       /*---------Commented as this code has been moved up to run for all sub-lines too
        -- Get Old Chr id from New Chr id
        --OPEN old_chr_csr(p_from_cle_id);
        --FETCH old_chr_csr INTO l_old_chr_id;
        --IF old_chr_csr%NOTFOUND THEN
           --RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        --END IF;
        --CLOSE old_chr_csr;

        --link_slh_sll(
                     --x_return_status => l_return_status,
                     --x_msg_count     => x_msg_count,
                     --x_msg_data      => x_msg_data,
                     --p_old_chr_id    => l_old_chr_id,
                     --p_new_cle_id    => x_cle_id,            -- Bug 2376998
                     --p_new_chr_id    => p_to_chr_id
                    --);


         --IF (l_return_status <> OKC_API.G_RET_STS_SUCCESS) THEN
            --RAISE OKL_API.G_EXCEPTION_ERROR;
         --END IF;

       ---------Commented as this code has been moved up to run for all sub-lines too-----*/

	--Call End Activity
	OKL_API.END_ACTIVITY(x_msg_count, x_msg_data);
	EXCEPTION

	     WHEN OKL_API.G_EXCEPTION_ERROR THEN
             If l_clepyd_csr%ISOPEN then
                 close l_clepyd_csr;
             End If;
	       x_return_status := OKL_API.HANDLE_EXCEPTIONS
	       (substr(l_api_name,1,26),
	        G_PKG_NAME,
	        'OKL_API.G_RET_STS_ERROR',
	        x_msg_count,
	        x_msg_data,
	        G_SCOPE);
		-- Resetting the global transaction id.
		okc_cvm_pvt.g_trans_id := 'XXX';
	     WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
             If l_clepyd_csr%ISOPEN then
                 close l_clepyd_csr;
             End If;

	       x_return_status := OKL_API.HANDLE_EXCEPTIONS
	       (substr(l_api_name,1,26),
	        G_PKG_NAME,
	        'OKL_API.G_RET_STS_UNEXP_ERROR',
	        x_msg_count,
	        x_msg_data,
	        G_SCOPE);
		-- Resetting the global transaction id.
		okc_cvm_pvt.g_trans_id := 'XXX';
	     WHEN OTHERS THEN
             If l_clepyd_csr%ISOPEN then
                 close l_clepyd_csr;
             End If;

	      -- store SQL error message on message stack for caller
	      OKL_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
	       x_return_status := OKL_API.HANDLE_EXCEPTIONS
	       (substr(l_api_name,1,26),
	        G_PKG_NAME,
	        'OTHERS',
	        x_msg_count,
	        x_msg_data,
	        G_SCOPE);
		-- Resetting the global transaction id.
		okc_cvm_pvt.g_trans_id := 'XXX';
End Copy_Contract_Lines;

--------------------------------------------------------------------------------
-- Start of comments
--
-- Procedure Name  : copy_rules
-- Description     : copies contract lines for a shadowed contract. will be
--                   published in OKL_COPY_CONTRACTS_PUB
-- Business Rules  :
-- Parameters      :
-- Version         : 1.0
-- Notes           :
-- End of comments
--------------------------------------------------------------------------------
PROCEDURE copy_rules(
    p_api_version                  IN NUMBER,
    p_init_msg_list                IN VARCHAR2 DEFAULT OKL_API.G_FALSE,
    x_return_status                OUT NOCOPY VARCHAR2,
    x_msg_count                    OUT NOCOPY NUMBER,
    x_msg_data                     OUT NOCOPY VARCHAR2,
    p_rgp_id                  	   IN NUMBER,
    p_cle_id                       IN NUMBER DEFAULT OKL_API.G_MISS_NUM,
    p_chr_id                       IN NUMBER DEFAULT OKL_API.G_MISS_NUM,
    p_to_template_yn			   IN VARCHAR2,
    x_rgp_id		           OUT NOCOPY NUMBER) is
l_return_status	    VARCHAR2(1) := OKL_API.G_RET_STS_SUCCESS;
l_api_name			CONSTANT VARCHAR2(30) := 'OKL_COPY_RULES';
l_api_version		CONSTANT NUMBER	:= 1.0;
begin
-----
    -- call START_ACTIVITY to create savepoint, check compatibility
    -- and initialize message list
	l_return_status := OKL_API.START_ACTIVITY( substr(l_api_name,1,26),
	                                           G_PKG_NAME,
	                                           p_init_msg_list,
	                                           G_API_VERSION,
	                                           p_api_version,
	                                           G_SCOPE,
                                         	   x_return_status);
	IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      		RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
      		RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    --call OKC_COPY_CONTRACT_PUB.copy_rules
    OKC_COPY_CONTRACT_PUB.copy_rules(
		p_api_version		=>	p_api_version,
    	p_init_msg_list     =>  p_init_msg_list,
    	x_return_status		=>  x_return_status,
    	x_msg_count         =>	x_msg_count,
    	x_msg_data          =>	x_msg_data,
    	p_rgp_id            =>	p_rgp_id,
    	p_cle_id            =>	p_cle_id,
    	p_chr_id            =>	p_chr_id,
    	p_to_template_yn	=>	p_to_template_yn,
    	x_rgp_id			=>	x_rgp_id
		);
  -- check return status
        If l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR Then
	       raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        Elsif l_return_status = OKL_API.G_RET_STS_ERROR Then
	       raise OKL_API.G_EXCEPTION_ERROR;
        End If;
	--Call End Activity
	OKL_API.END_ACTIVITY(x_msg_count, x_msg_data);
	EXCEPTION
	     WHEN OKL_API.G_EXCEPTION_ERROR THEN
	       x_return_status := OKL_API.HANDLE_EXCEPTIONS
	       (substr(l_api_name,1,26),
	        G_PKG_NAME,
	        'OKL_API.G_RET_STS_ERROR',
	        x_msg_count,
	        x_msg_data,
	        G_SCOPE);
		-- Resetting the global transaction id.
		okc_cvm_pvt.g_trans_id := 'XXX';
	     WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
	       x_return_status := OKL_API.HANDLE_EXCEPTIONS
	       (substr(l_api_name,1,26),
	        G_PKG_NAME,
	        'OKL_API.G_RET_STS_UNEXP_ERROR',
	        x_msg_count,
	        x_msg_data,
	        G_SCOPE);
		-- Resetting the global transaction id.
		okc_cvm_pvt.g_trans_id := 'XXX';
	     WHEN OTHERS THEN
	      -- store SQL error message on message stack for caller
	      OKL_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
	       x_return_status := OKL_API.HANDLE_EXCEPTIONS
	       (substr(l_api_name,1,26),
	        G_PKG_NAME,
	        'OTHERS',
	        x_msg_count,
	        x_msg_data,
	        G_SCOPE);
		-- Resetting the global transaction id.
		okc_cvm_pvt.g_trans_id := 'XXX';
end copy_rules;
----
--------------------------------------------------------------------------------
-- Start of comments
--
-- Procedure Name  : copy_party_roles
-- Description     : copies party_roles for a shadowed contract. will be
--                   published in OKL_COPY_CONTRACTS_PUB
-- Business Rules  :
-- Parameters      :
-- Version         : 1.0
-- Notes           :
-- End of comments
--------------------------------------------------------------------------------

  PROCEDURE copy_party_roles(
    p_api_version                  IN NUMBER,
    p_init_msg_list                IN VARCHAR2 DEFAULT OKL_API.G_FALSE,
    x_return_status                OUT NOCOPY VARCHAR2,
    x_msg_count                    OUT NOCOPY NUMBER,
    x_msg_data                     OUT NOCOPY VARCHAR2,
    p_cpl_id                  	IN NUMBER,
    p_cle_id                       IN NUMBER DEFAULT OKL_API.G_MISS_NUM,
    p_chr_id                       IN NUMBER DEFAULT OKL_API.G_MISS_NUM,
    P_rle_code                     IN VARCHAR2,
    x_cpl_id		           	OUT NOCOPY NUMBER) IS

    l_api_name     				CONSTANT VARCHAR2(30) := 'OKL_COPY_PARTY_ROLES';
    l_return_status         		VARCHAR2(1) := OKL_API.G_RET_STS_SUCCESS;

   -------------------------------------------------------
   --Bug# 3143522 : 11.5.10 Subsidies - copy of OKL shadow
   -------------------------------------------------------
    --cursor to find whether party payment details exist for party being copied
    Cursor l_pyd_csr (p_cpl_id in number) is
    Select pyd.id
    from   okl_party_payment_dtls pyd
    where  pyd.cpl_id = p_cpl_id;

    l_pyd_id okl_party_payment_dtls.ID%TYPE;
    lx_pyd_id okl_party_payment_dtls.ID%TYPE;

   -------------------------------------------------------
   --Bug# 3143522 : 11.5.10 Subsidies - copy of OKL shadow
   -------------------------------------------------------

   --Bug# 4558486
   Cursor l_kpl_csr (p_cpl_id in number) is
   Select kpl.id
   from   okl_k_party_roles kpl
   where  kpl.id = p_cpl_id;

   lx_kpl_id okl_k_party_roles.ID%TYPE;

  BEGIN
    l_return_status := OKL_API.START_ACTIVITY(substr(l_api_name,1,26),
                                              G_PKG_NAME,
                                              p_init_msg_list,
                                              G_API_VERSION,
                                              p_api_version,
                                              G_SCOPE,
                                              x_return_status);
    IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    OKC_COPY_CONTRACT_PUB.copy_party_roles(
    		p_api_version           => p_api_version,
    		p_init_msg_list         => p_init_msg_list,
    		x_return_status         => x_return_status,
    		x_msg_count             => x_msg_count,
    		x_msg_data              => x_msg_data,
    		p_cpl_id                => p_cpl_id,
    		p_cle_id                => p_cle_id,
    		p_chr_id                => p_chr_id,
    		p_rle_code              => p_rle_code,
    		x_cpl_id	        => x_cpl_id);

    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

   -------------------------------------------------------
   --Bug# 3143522 : 11.5.10 Subsidies - copy of OKL shadow
   -------------------------------------------------------
   Open l_pyd_csr (p_cpl_id => p_cpl_id);
   Loop
       Fetch l_pyd_csr into l_pyd_id;
       Exit when l_pyd_csr%NOTFOUND;

       -------------------------------------------------
       --call local api to copy party payment details
       -------------------------------------------------
       copy_party_pymt_dtls
                (p_api_version           => p_api_version,
                p_init_msg_list         => p_init_msg_list,
                x_return_status         => x_return_status,
                x_msg_count             => x_msg_count,
                x_msg_data              => x_msg_data,
                p_pyd_id                => l_pyd_id,
                p_cpl_id                => x_cpl_id,
                x_pyd_id                => lx_pyd_id);



       IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
       ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
       END IF;
   End Loop;
   Close l_pyd_csr;

   --Bug# 4558486
   For l_kpl_rec in l_kpl_csr(p_cpl_id => p_cpl_id)
   Loop
     copy_okl_k_party_roles
               (p_api_version           => p_api_version,
                p_init_msg_list         => p_init_msg_list,
                x_return_status         => x_return_status,
                x_msg_count             => x_msg_count,
                x_msg_data              => x_msg_data,
                p_kpl_id                => l_kpl_rec.id,
                p_cpl_id                => x_cpl_id,
                x_kpl_id                => lx_kpl_id);

       IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
       ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
       END IF;
   End Loop;
   --Bug# 4558486

    OKL_API.END_ACTIVITY(x_msg_count, x_msg_data);

  EXCEPTION
     WHEN OKL_API.G_EXCEPTION_ERROR THEN
     If l_pyd_csr%ISOPEN then
         close l_pyd_csr;
     End If;
       x_return_status := OKL_API.HANDLE_EXCEPTIONS
       (substr(l_api_name,1,26),
        G_PKG_NAME,
        'OKL_API.G_RET_STS_ERROR',
        x_msg_count,
        x_msg_data,
        G_SCOPE);
     WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
     If l_pyd_csr%ISOPEN then
         close l_pyd_csr;
     End If;
       x_return_status := OKL_API.HANDLE_EXCEPTIONS
       (substr(l_api_name,1,26),
        G_PKG_NAME,
        'OKL_API.G_RET_STS_UNEXP_ERROR',
        x_msg_count,
        x_msg_data,
        G_SCOPE);
     WHEN OTHERS THEN
     If l_pyd_csr%ISOPEN then
         close l_pyd_csr;
     End If;
      -- store SQL error message on message stack for caller
      OKL_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
       x_return_status := OKL_API.HANDLE_EXCEPTIONS
       (substr(l_api_name,1,26),
        G_PKG_NAME,
        'OTHERS',
        x_msg_count,
        x_msg_data,
        G_SCOPE);

  END copy_party_roles;
--------------------------------------------------------------------------------
-- Start of comments
--
-- Procedure Name  : copy_articles
-- Description     : copies articles for a shadowed contract. will be
--                   published in OKL_COPY_CONTRACTS_PUB
-- Business Rules  :
-- Parameters      :
-- Version         : 1.0
-- Notes           :
-- End of comments
--------------------------------------------------------------------------------
  PROCEDURE copy_articles(
    p_api_version                  IN NUMBER,
    p_init_msg_list                IN VARCHAR2 DEFAULT OKL_API.G_FALSE,
    x_return_status                OUT NOCOPY VARCHAR2,
    x_msg_count                    OUT NOCOPY NUMBER,
    x_msg_data                     OUT NOCOPY VARCHAR2,
    p_cat_id                  	   IN NUMBER,
    p_cle_id                       IN NUMBER DEFAULT OKL_API.G_MISS_NUM,
    p_chr_id                       IN NUMBER DEFAULT OKL_API.G_MISS_NUM,
    p_sav_sav_release		       IN VARCHAR2 DEFAULT NULL,
    x_cat_id		               OUT NOCOPY NUMBER) IS


    l_api_name     			CONSTANT VARCHAR2(30) := 'OKL_COPY_ARTICLES';
    l_return_status           VARCHAR2(1) := OKL_API.G_RET_STS_SUCCESS;
  BEGIN
    l_return_status := OKL_API.START_ACTIVITY(substr(l_api_name,1,26),
                                              G_PKG_NAME,
                                              p_init_msg_list,
                                              G_API_VERSION,
                                              p_api_version,
                                              G_SCOPE,
                                              x_return_status);
    IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    OKC_COPY_CONTRACT_PUB.copy_articles(
          p_api_version		=> p_api_version,
          p_init_msg_list	=> p_init_msg_list,
          x_return_status 	=> x_return_status,
          x_msg_count     	=> x_msg_count,
          x_msg_data      	=> x_msg_data,
          p_cat_id            => p_cat_id,
    	     p_cle_id            => p_cle_id,
    	     p_chr_id            => p_chr_id,
    	     p_sav_sav_release   => p_sav_sav_release,
    	     x_cat_id			=> x_cat_id);

    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    OKL_API.END_ACTIVITY(x_msg_count, x_msg_data);

  EXCEPTION
     WHEN OKL_API.G_EXCEPTION_ERROR THEN
       x_return_status := OKL_API.HANDLE_EXCEPTIONS
       (substr(l_api_name,1,26),
        G_PKG_NAME,
        'OKL_API.G_RET_STS_ERROR',
        x_msg_count,
        x_msg_data,
        G_SCOPE);
     WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
       x_return_status := OKL_API.HANDLE_EXCEPTIONS
       (substr(l_api_name,1,26),
        G_PKG_NAME,
        'OKL_API.G_RET_STS_UNEXP_ERROR',
        x_msg_count,
        x_msg_data,
        G_SCOPE);
     WHEN OTHERS THEN
      -- store SQL error message on message stack for caller
      OKL_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
       x_return_status := OKL_API.HANDLE_EXCEPTIONS
       (substr(l_api_name,1,26),
        G_PKG_NAME,
        'OTHERS',
        x_msg_count,
        x_msg_data,
        G_SCOPE);

  END copy_articles;
--------------------------------------------------------------------------------
-- Start of comments
--
-- Procedure Name  : copy_latest_articles
-- Description     : copies latest articles for a shadowed contract. will be
--                   published in OKL_COPY_CONTRACTS_PUB
-- Business Rules  :
-- Parameters      :
-- Version         : 1.0
-- Notes           :
-- End of comments
--------------------------------------------------------------------------------
  PROCEDURE copy_latest_articles(
    p_api_version                  IN NUMBER,
    p_init_msg_list                IN VARCHAR2 DEFAULT OKL_API.G_FALSE,
    x_return_status                OUT NOCOPY VARCHAR2,
    x_msg_count                    OUT NOCOPY NUMBER,
    x_msg_data                     OUT NOCOPY VARCHAR2,
    p_cat_id                  	IN NUMBER,
    p_cle_id                       IN NUMBER DEFAULT OKL_API.G_MISS_NUM,
    p_chr_id                       IN NUMBER DEFAULT OKL_API.G_MISS_NUM,
    x_cat_id		           	OUT NOCOPY NUMBER) IS


    l_api_name     		   CONSTANT VARCHAR2(30) := 'OKL_COPY_LATEST_ARTICLES';
    l_return_status         VARCHAR2(1) := OKL_API.G_RET_STS_SUCCESS;
  BEGIN
    l_return_status := OKL_API.START_ACTIVITY(substr(l_api_name,1,26),
                                              G_PKG_NAME,
                                              p_init_msg_list,
                                              G_API_VERSION,
                                              p_api_version,
                                              G_SCOPE,
                                              x_return_status);
    IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    OKC_COPY_CONTRACT_PUB.copy_latest_articles(
            p_api_version	   => p_api_version,
            p_init_msg_list	   => p_init_msg_list,
            x_return_status    => x_return_status,
            x_msg_count        => x_msg_count,
            x_msg_data         => x_msg_data,
            p_cat_id           => p_cat_id,
            p_cle_id           => p_cle_id,
            p_chr_id           => p_chr_id,
            x_cat_id		   => x_cat_id);

    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    OKL_API.END_ACTIVITY(x_msg_count, x_msg_data);

  EXCEPTION
     WHEN OKL_API.G_EXCEPTION_ERROR THEN
       x_return_status := OKL_API.HANDLE_EXCEPTIONS
       (substr(l_api_name,1,26),
        G_PKG_NAME,
        'OKL_API.G_RET_STS_ERROR',
        x_msg_count,
        x_msg_data,
        G_SCOPE);
     WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
       x_return_status := OKL_API.HANDLE_EXCEPTIONS
       (substr(l_api_name,1,26),
        G_PKG_NAME,
        'OKL_API.G_RET_STS_UNEXP_ERROR',
        x_msg_count,
        x_msg_data,
        G_SCOPE);
     WHEN OTHERS THEN
      -- store SQL error message on message stack for caller
      OKL_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
       x_return_status := OKL_API.HANDLE_EXCEPTIONS
       (substr(l_api_name,1,26),
        G_PKG_NAME,
        'OTHERS',
        x_msg_count,
        x_msg_data,
        G_SCOPE);
  END copy_latest_articles;
--------------------------------------------------------------------------
  --Start of Comments
  --Bug # 2337570 - TEMPLATE COPY DOES NOT DEFAULT ALL FIELDS ON HEADER
  --Procedure Name : Copy_Governances
  --Description    : Makes a copy of the okc_governances.
  -- Local Procedure in OKC_COPY_CONTRACT_PVT - repeated here as governances
  -- need to be copied in case of lease contracts. In core contracts
  -- governances are copied only if renew reference flag is set to 'Yes'
--------------------------------------------------------------------------
  PROCEDURE copy_governances(
    p_api_version                  IN NUMBER,
    p_init_msg_list                IN VARCHAR2 DEFAULT OKC_API.G_FALSE,
    x_return_status                OUT NOCOPY VARCHAR2,
    x_msg_count                    OUT NOCOPY NUMBER,
    x_msg_data                     OUT NOCOPY VARCHAR2,
    p_from_chr_id                  IN NUMBER,
    p_to_chr_id                    IN NUMBER) IS

    l_gvev_rec 	OKC_CONTRACT_PUB.gvev_rec_type;
    x_gvev_rec 	OKC_CONTRACT_PUB.gvev_rec_type;
    l_return_status	VARCHAR2(1) := OKC_API.G_RET_STS_SUCCESS;

    CURSOR 	c_governances IS
    SELECT 	id
    FROM 		okc_governances_v
    WHERE 	dnz_chr_id = p_from_chr_id
    AND		cle_id is null;

  ----------------------------------------------------------------------------
  --Function to populate the contract governance record to be copied.
  ----------------------------------------------------------------------------
    FUNCTION get_gvev_rec(p_gve_id IN NUMBER,
				      x_gvev_rec OUT NOCOPY OKC_CONTRACT_PUB.gvev_rec_type)
    RETURN  VARCHAR2 IS
      l_return_status VARCHAR2(1) := OKC_API.G_RET_STS_SUCCESS;
      l_no_data_found BOOLEAN := TRUE;

      CURSOR c_gvev_rec IS
      SELECT
	    DNZ_CHR_ID,
	    ISA_AGREEMENT_ID,
	    CHR_ID,
	    CLE_ID,
	    CHR_ID_REFERRED,
	    CLE_ID_REFERRED,
	    COPIED_ONLY_YN
	 FROM    OKC_GOVERNANCES
	 WHERE 	ID = p_gve_id;
    BEGIN
      OPEN c_gvev_rec;
      FETCH c_gvev_rec
      INTO x_gvev_rec.DNZ_CHR_ID,
		x_gvev_rec.ISA_AGREEMENT_ID,
		x_gvev_rec.CHR_ID,
		x_gvev_rec.CLE_ID,
		x_gvev_rec.CHR_ID_REFERRED,
		x_gvev_rec.CLE_ID_REFERRED,
		x_gvev_rec.COPIED_ONLY_YN;

      l_no_data_found := c_gvev_rec%NOTFOUND;
      CLOSE c_gvev_rec;
      IF l_no_data_found THEN
        l_return_status := OKC_API.G_RET_STS_ERROR;
        return(l_return_status);
      ELSE
        return(l_return_status);
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        -- store SQL error message on message stack for caller
        OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
        -- notify caller of an UNEXPECTED error
        l_return_status := OKC_API.G_RET_STS_UNEXP_ERROR;
        return(l_return_status);

    END get_gvev_rec;
  BEGIN
    x_return_status := l_return_status;
    FOR l_c_governances IN c_governances LOOP
      l_return_status := get_gvev_rec(	p_gve_id 	 => l_c_governances.id,
					               x_gvev_rec => l_gvev_rec);
      l_gvev_rec.chr_id := p_to_chr_id;
      l_gvev_rec.dnz_chr_id := p_to_chr_id;

      OKC_CONTRACT_PUB.create_governance(
	   p_api_version	=> p_api_version,
           p_init_msg_list	=> p_init_msg_list,
           x_return_status 	=> l_return_status,
           x_msg_count     	=> x_msg_count,
           x_msg_data      	=> x_msg_data,
           p_gvev_rec		=> l_gvev_rec,
           x_gvev_rec		=> x_gvev_rec);

      IF (l_return_status <> OKC_API.G_RET_STS_SUCCESS) THEN
        IF (l_return_status = OKC_API.G_RET_STS_UNEXP_ERROR) THEN
          x_return_status := l_return_status;
          RAISE G_EXCEPTION_HALT_VALIDATION;
        ELSE
	     x_return_status := l_return_status;
        END IF;
      END IF;
    END LOOP;

  EXCEPTION
    WHEN G_EXCEPTION_HALT_VALIDATION THEN
      NULL;
    WHEN OTHERS THEN
      -- store SQL error message on message stack for caller
      OKC_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
      -- notify caller of an UNEXPECTED error
      x_return_status := OKC_API.G_RET_STS_UNEXP_ERROR;

  END copy_governances;

--------------------------------------------------------------------------------
--Start of Comments
--Procedure Name : link_cov_Asst
--Description    : Links covered assets/usage contract after copy
--Notes          : Usage soueces are blanked out
--                 for covered asset if a single copied fin asset line with
--                 matching source is found in the new contract covered item is
--                 made to piont to this line otherwise it is blanked (Null)
--                 to added Syndication 'OKX_LEASE' also
--                 This will also be pushed into Copy_Asset_Lines
--------------------------------------------------------------------------------
Procedure link_cov_asst( p_api_version              IN  NUMBER,
                         p_init_msg_list            IN  VARCHAR2 DEFAULT OKL_API.G_FALSE,
                         x_return_status            OUT NOCOPY VARCHAR2,
                         x_msg_count                OUT NOCOPY NUMBER,
                         x_msg_data                 OUT NOCOPY VARCHAR2,
                         p_orig_lnk_cle_id          IN  NUMBER,
                         p_new_lnk_cim_id           IN  NUMBER,
                         p_object_code              IN  VARCHAR2,
                         p_new_chr_id               IN  NUMBER) is

--cursor to fetch original fin linked asset line id
CURSOR l_orig_ast_csr(p_orig_lnk_cle_id IN NUMBER,
                      p_new_chr_id      IN NUMBER) IS
SELECT new_cle.id
FROM   OKC_K_LINES_B new_cle,
       OKC_K_ITEMS   orig_lnk_cim
WHERE  new_cle.ORIG_SYSTEM_ID1 = to_number(orig_lnk_cim.object1_id1)
AND    new_cle.chr_id          = p_new_chr_id
AND    orig_lnk_cim.cle_id     = p_orig_lnk_cle_id
AND    not exists (select null
                   from   OKC_K_LINES_B another_cle
                   where  another_cle.orig_system_id1 = new_cle.orig_system_id1
                   and    another_cle.lse_id          = new_cle.lse_id
                   and    another_cle.chr_id          = new_cle.chr_id
                   and    another_cle.id             <> new_cle.id);

l_new_cle_id     OKC_K_LINES_B.ID%TYPE;


l_new_lnk_cim_id   NUMBER;

l_cimv_rec         OKL_OKC_MIGRATION_PVT.cimv_rec_type;
lx_cimv_rec        OKL_OKC_MIGRATION_PVT.cimv_rec_type;

Begin
    x_return_status := OKL_API.G_RET_STS_SUCCESS;
    l_new_lnk_cim_id := p_new_lnk_cim_id;

    If p_object_code in ('OKL_USAGE','OKX_LEASE') then --for covered usage contract and syndicated contract

        l_cimv_rec.id                := l_new_lnk_cim_id;
        l_cimv_rec.object1_id1       := OKL_API.G_MISS_CHAR;
        l_cimv_rec.object1_id2       := OKL_API.G_MISS_CHAR;
        l_cimv_rec.jtot_object1_code := OKL_API.G_MISS_CHAR;

    Else --for covered asset

        Open l_orig_ast_csr(p_orig_lnk_cle_id => p_orig_lnk_cle_id,
                            p_new_chr_id      => p_new_chr_id);
        Fetch l_orig_ast_csr into l_new_cle_id;
        IF l_orig_ast_csr%NOTFOUND Then
            --null out the new link
            l_cimv_rec.id                := l_new_lnk_cim_id;
            l_cimv_rec.object1_id1       := OKL_API.G_MISS_CHAR;
            l_cimv_rec.object1_id2       := OKL_API.G_MISS_CHAR;
            l_cimv_rec.jtot_object1_code := OKL_API.G_MISS_CHAR;
         ELSE
            --update the new link with new asset
            l_cimv_rec.id := l_new_lnk_cim_id;
            l_cimv_rec.object1_id1 := to_char(l_new_cle_id);
         END IF;
         Close l_orig_ast_csr;

     End If;

     --update link contract item accordingly
     okl_okc_migration_pvt.update_contract_item(
            p_api_version    => p_api_version,
            p_init_msg_list  => p_init_msg_list,
            x_return_status  => x_return_status,
            x_msg_count      => x_msg_count,
            x_msg_data       => x_msg_data,
            p_cimv_rec       => l_cimv_rec,
            x_cimv_rec       => lx_cimv_rec);

    Exception
    When Others then
        If l_orig_ast_csr%ISOPEN Then
            Close l_orig_ast_csr;
        End If;
        x_return_status :=  OKL_API.G_RET_STS_UNEXP_ERROR;

End link_cov_asst;
--------------------------------------------------------------------------------
-- Start of comments
-- Bug# 2555692
-- Procedure Name  : reset_contract_status
-- Description     : Local procedure will be called from copy_lease_contract to
--                   update the copied contracts status to a 'NEW' status. OKC
--                   APIs by default set the status of a new contract to 'ENTERED'
-- Business Rules  :
-- Parameters      :
-- Version         : 1.0
-- Notes           :
-- End of comments
--------------------------------------------------------------------------------
Procedure reset_contract_status
           (p_api_version   IN  NUMBER,
            p_init_msg_list IN  VARCHAR2 DEFAULT OKL_API.G_FALSE,
            x_return_status OUT NOCOPY VARCHAR2,
            x_msg_count     OUT NOCOPY NUMBER,
            x_msg_data      OUT NOCOPY VARCHAR2,
            p_chr_id        IN  NUMBER,
            p_status        IN  VARCHAR2,
            p_cascade_lines IN  VARCHAR2) IS
BEGIN
    x_return_status := OKL_API.G_RET_STS_SUCCESS;
    -- Now call the stored program to update status of contact
    okl_contract_status_pub.update_contract_status
      (p_api_version   => p_api_version,
       p_init_msg_list => p_init_msg_list,
       x_return_status => x_return_status,
       x_msg_count     => x_msg_count,
       x_msg_data      => x_msg_data,
       p_khr_status    => p_status,
       p_chr_id        => p_chr_id);

    If (x_return_status <> OKL_API.G_RET_STS_SUCCESS) Then
       Raise G_EXCEPTION_HALT_PROCESS;
    End If;


    /*
    If nvl(p_cascade_lines,'N') = 'Y' Then
       okl_contract_status_pub.cascade_lease_status
          (p_api_version   => p_api_version,
           p_init_msg_list => p_init_msg_list,
           x_return_status => x_return_status,
           x_msg_count     => x_msg_count,
           x_msg_data      => x_msg_data,
           p_chr_id        => p_chr_id);
    End If;
    */

    If (x_return_status <> OKL_API.G_RET_STS_SUCCESS) Then
       Raise G_EXCEPTION_HALT_PROCESS;
    End If;

    EXCEPTION
    WHEN G_EXCEPTION_HALT_PROCESS Then
         Null;
    When OTHERS Then
         x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
END reset_contract_status;
--End Bug# 2555692

--------------------------------------------------------------------------------
-- Start of comments
-- Bug# 3159691
-- Procedure Name  : delete_yields
-- Description     : Local procedure will be called from copy_lease_contract to
--                   remove yield values from the new contract.
--
-- Business Rules  :
-- Parameters      :
-- Version         : 1.0
-- Notes           :
-- End of comments
--------------------------------------------------------------------------------
  PROCEDURE delete_yields(
    p_api_version                  IN NUMBER,
    p_init_msg_list                IN VARCHAR2 DEFAULT OKL_API.G_FALSE,
    x_return_status                OUT NOCOPY VARCHAR2,
    x_msg_count                    OUT NOCOPY NUMBER,
    x_msg_data                     OUT NOCOPY VARCHAR2,
    p_chr_id                       IN NUMBER,
    --Bug# 3973640
    p_trans_type                   IN VARCHAR2
    ) IS

    l_api_name        CONSTANT VARCHAR2(30) := 'OKL_DELETE_YIELDS';
    l_return_status   VARCHAR2(1) := OKL_API.G_RET_STS_SUCCESS;

    l_chrv_rec     chrv_rec_type;
    l_khrv_rec     khrv_rec_type;
    l_khrv_qry_rec khrv_rec_type;
    lx_chrv_rec    chrv_rec_type;
    lx_khrv_rec    khrv_rec_type;

    l_clev_rec     clev_rec_type;
    l_klev_rec     klev_rec_type;
    lx_clev_rec    clev_rec_type;
    lx_klev_rec    klev_rec_type;

    cursor kle_csr is
    select kle.id
          ,kle.pre_tax_yield
          ,kle.after_tax_yield
          ,kle.implicit_interest_rate
          ,kle.implicit_non_idc_interest_rate
          ,kle.pre_tax_irr
          ,kle.after_tax_irr
          ,kle.sub_pre_tax_yield
          ,kle.sub_after_tax_yield
          ,kle.sub_impl_interest_rate
          ,kle.sub_impl_non_idc_int_rate
          ,kle.sub_pre_tax_irr
          ,kle.sub_after_tax_irr
          ,kle.capitalized_interest
          --Bug# 3973640
          ,kle.qte_id
          ,kle.funding_date
    from  okc_k_lines_b cle
         ,okl_k_lines kle
    where cle.dnz_chr_id = p_chr_id
    and   cle.id = kle.id;

  BEGIN

    x_return_status := OKL_API.G_RET_STS_SUCCESS;
    x_return_status := OKL_API.START_ACTIVITY(substr(l_api_name,1,26),
                                              G_PKG_NAME,
                                              p_init_msg_list,
                                              G_API_VERSION,
                                              p_api_version,
                                              G_SCOPE,
                                              x_return_status);
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    l_khrv_qry_rec := get_khrv_rec(p_chr_id);

    IF (l_khrv_qry_rec.pre_tax_yield IS NOT NULL OR
        l_khrv_qry_rec.after_tax_yield IS NOT NULL OR
        l_khrv_qry_rec.implicit_interest_rate IS NOT NULL OR
        l_khrv_qry_rec.implicit_non_idc_interest_rate IS NOT NULL OR
        l_khrv_qry_rec.pre_tax_irr IS NOT NULL OR
        l_khrv_qry_rec.after_tax_irr IS NOT NULL OR
        l_khrv_qry_rec.sub_pre_tax_yield IS NOT NULL OR
        l_khrv_qry_rec.sub_after_tax_yield IS NOT NULL OR
        l_khrv_qry_rec.sub_impl_interest_rate IS NOT NULL OR
        l_khrv_qry_rec.sub_impl_non_idc_int_rate IS NOT NULL OR
        l_khrv_qry_rec.sub_pre_tax_irr IS NOT NULL OR
        l_khrv_qry_rec.sub_after_tax_irr IS NOT NULL OR
        l_khrv_qry_rec.date_last_interim_interest_cal IS NOT NULL OR
        --bug# 3973640:
        l_khrv_qry_rec.TOT_CL_TRANSFER_AMT IS NOT NULL OR
        l_khrv_qry_rec.TOT_CL_NET_TRANSFER_AMT IS NOT NULL OR
        l_khrv_qry_rec.TOT_CL_LIMIT IS NOT NULL OR
        l_khrv_qry_rec.TOT_CL_FUNDING_AMT IS NOT NULL) THEN

      l_chrv_rec.id := p_chr_id;
      l_khrv_rec.id := p_chr_id;

      l_khrv_rec.pre_tax_yield := NULL;
      l_khrv_rec.after_tax_yield := NULL;
      l_khrv_rec.implicit_interest_rate := NULL;
      l_khrv_rec.implicit_non_idc_interest_rate := NULL;
      l_khrv_rec.pre_tax_irr := NULL;
      l_khrv_rec.after_tax_irr := NULL;
      l_khrv_rec.sub_pre_tax_yield := NULL;
      l_khrv_rec.sub_after_tax_yield := NULL;
      l_khrv_rec.sub_impl_interest_rate := NULL;
      l_khrv_rec.sub_impl_non_idc_int_rate := NULL;
      l_khrv_rec.sub_pre_tax_irr := NULL;
      l_khrv_rec.sub_after_tax_irr := NULL;

      -- Bug# 3541098
      l_khrv_rec.date_last_interim_interest_cal := NULL;
      --bug# 3973640:
       l_khrv_rec.TOT_CL_TRANSFER_AMT := NULL;
       l_khrv_rec.TOT_CL_NET_TRANSFER_AMT := NULL;
       l_khrv_rec.TOT_CL_LIMIT := NULL;
       l_khrv_rec.TOT_CL_FUNDING_AMT := NULL;

      okl_contract_pub.update_contract_header(
       p_api_version   => p_api_version,
       p_init_msg_list => p_init_msg_list,
       x_return_status => x_return_status,
       x_msg_count     => x_msg_count,
       x_msg_data      => x_msg_data,
       p_chrv_rec      => l_chrv_rec,
       p_khrv_rec      => l_khrv_rec,
       x_chrv_rec      => lx_chrv_rec,
       x_khrv_rec      => lx_khrv_rec);

      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

    END IF;

    FOR l_kle_rec IN kle_csr LOOP

      IF (l_kle_rec.pre_tax_yield IS NOT NULL OR
        l_kle_rec.after_tax_yield IS NOT NULL OR
        l_kle_rec.implicit_interest_rate IS NOT NULL OR
        l_kle_rec.implicit_non_idc_interest_rate IS NOT NULL OR
        l_kle_rec.pre_tax_irr IS NOT NULL OR
        l_kle_rec.after_tax_irr IS NOT NULL OR
        l_kle_rec.sub_pre_tax_yield IS NOT NULL OR
        l_kle_rec.sub_after_tax_yield IS NOT NULL OR
        l_kle_rec.sub_impl_interest_rate IS NOT NULL OR
        l_kle_rec.sub_impl_non_idc_int_rate IS NOT NULL OR
        l_kle_rec.sub_pre_tax_irr IS NOT NULL OR
        l_kle_rec.sub_after_tax_irr IS NOT NULL OR
        l_kle_rec.capitalized_interest IS NOT NULL OR
        --Bug# 3973640:
        l_kle_rec.qte_id IS NOT NULL OR
        l_kle_rec.funding_date IS NOT NULL) THEN

        l_clev_rec.id := l_kle_rec.id;
        l_klev_rec.id := l_kle_rec.id;

        l_klev_rec.pre_tax_yield := NULL;
        l_klev_rec.after_tax_yield := NULL;
        l_klev_rec.implicit_interest_rate := NULL;
        l_klev_rec.implicit_non_idc_interest_rate := NULL;
        l_klev_rec.pre_tax_irr := NULL;
        l_klev_rec.after_tax_irr := NULL;
        l_klev_rec.sub_pre_tax_yield := NULL;
        l_klev_rec.sub_after_tax_yield := NULL;
        l_klev_rec.sub_impl_interest_rate := NULL;
        l_klev_rec.sub_impl_non_idc_int_rate := NULL;
        l_klev_rec.sub_pre_tax_irr := NULL;
        l_klev_rec.sub_after_tax_irr := NULL;

        -- Bug# 3541098
        l_klev_rec.capitalized_interest := NULL;
        --Bug# 3973640
        l_klev_rec.funding_date := NULL;
        If nvl(p_trans_type,'CFA') = 'CFA' then
            l_klev_rec.qte_id := NULL;
        End If;

        okl_contract_pub.update_contract_line(
          p_api_version        => p_api_version,
          p_init_msg_list      => p_init_msg_list,
          x_return_status      => x_return_status,
          x_msg_count          => x_msg_count,
          x_msg_data           => x_msg_data,
          p_clev_rec           => l_clev_rec,
          p_klev_rec           => l_klev_rec,
          x_clev_rec           => lx_clev_rec,
          x_klev_rec           => lx_klev_rec);

        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;

      END IF;
    END LOOP;

    OKL_API.END_ACTIVITY(x_msg_count, x_msg_data);

  EXCEPTION
     WHEN OKL_API.G_EXCEPTION_ERROR THEN
       x_return_status := OKL_API.HANDLE_EXCEPTIONS
       (substr(l_api_name,1,26),
        G_PKG_NAME,
        'OKL_API.G_RET_STS_ERROR',
        x_msg_count,
        x_msg_data,
        G_SCOPE);
     WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
       x_return_status := OKL_API.HANDLE_EXCEPTIONS
       (substr(l_api_name,1,26),
        G_PKG_NAME,
        'OKL_API.G_RET_STS_UNEXP_ERROR',
        x_msg_count,
        x_msg_data,
        G_SCOPE);
     WHEN OTHERS THEN
      -- store SQL error message on message stack for caller
      OKL_API.set_message(G_APP_NAME, G_UNEXPECTED_ERROR,G_SQLCODE_TOKEN,SQLCODE,G_SQLERRM_TOKEN,SQLERRM);
       x_return_status := OKL_API.HANDLE_EXCEPTIONS
       (substr(l_api_name,1,26),
        G_PKG_NAME,
        'OTHERS',
        x_msg_count,
        x_msg_data,
        G_SCOPE);

END delete_yields;
--End Bug# 3159691

Procedure copy_var_int_rate_params(p_old_id IN NUMBER,
                                   p_new_id IN NUMBER,
                                   p_start_date IN DATE,
                                   p_trans_type IN VARCHAR2,
                                   p_rbk_date IN DATE) IS
    TYPE l_kkhr_id_type is table of okl_k_rate_params.khr_id%TYPE index by binary_integer;
    TYPE l_kparameter_type_code_type is table of okl_k_rate_params.parameter_type_code%TYPE index by binary_integer;
    TYPE l_keffective_from_date_type is table of okl_k_rate_params.effective_from_date%TYPE index by binary_integer;
    TYPE l_keffective_to_date_type is table of okl_k_rate_params.effective_to_date%TYPE index by binary_integer;
    TYPE l_kinterest_index_id_type is table of okl_k_rate_params.interest_index_id%TYPE index by binary_integer;
    TYPE l_kbase_rate_type is table of okl_k_rate_params.base_rate%TYPE index by binary_integer;
    TYPE l_kinterest_start_date_type is table of okl_k_rate_params.interest_start_date%TYPE index by binary_integer;
    TYPE l_kadder_rate_type is table of okl_k_rate_params.adder_rate%TYPE index by binary_integer;
    TYPE l_kmaximum_rate_type is table of okl_k_rate_params.maximum_rate%TYPE index by binary_integer;
    TYPE l_kminimum_rate_type is table of okl_k_rate_params.minimum_rate%TYPE index by binary_integer;
    TYPE l_kprincipal_basis_code_type is table of okl_k_rate_params.principal_basis_code%TYPE index by binary_integer;
    TYPE l_kdays_in_a_month_code_type is table of okl_k_rate_params.days_in_a_month_code%TYPE index by binary_integer;
    TYPE l_kdays_in_a_year_code_type is table of okl_k_rate_params.days_in_a_year_code%TYPE index by binary_integer;
    TYPE l_kinterest_basis_code_type is table of okl_k_rate_params.interest_basis_code%TYPE index by binary_integer;
    TYPE l_krate_delay_code_type is table of okl_k_rate_params.rate_delay_code%TYPE index by binary_integer;
    TYPE l_krate_delay_frequency_type is table of okl_k_rate_params.rate_delay_frequency%TYPE index by binary_integer;
    TYPE l_kcompounding_frequ_code_type is table of okl_k_rate_params.compounding_frequency_code%TYPE index by binary_integer;
    TYPE l_kcalculation_formula_id_type is table of okl_k_rate_params.calculation_formula_id%TYPE index by binary_integer;
    TYPE l_kcatchup_basis_code_type is table of okl_k_rate_params.catchup_basis_code%TYPE index by binary_integer;
    TYPE l_kcatchup_start_date_type is table of okl_k_rate_params.catchup_start_date%TYPE index by binary_integer;
    TYPE l_kcatchup_settlemen_code_type is table of okl_k_rate_params.catchup_settlement_code%TYPE index by binary_integer;
    TYPE l_krate_change_start_date_type is table of okl_k_rate_params.rate_change_start_date%TYPE index by binary_integer;
    TYPE l_krate_change_frequ_code_type is table of okl_k_rate_params.rate_change_frequency_code%TYPE index by binary_integer;
    TYPE l_krate_change_value_type is table of okl_k_rate_params.rate_change_value%TYPE index by binary_integer;
    TYPE l_kconversion_option_code_type is table of okl_k_rate_params.conversion_option_code%TYPE index by binary_integer;
    TYPE l_knext_conversion_date_type is table of okl_k_rate_params.next_conversion_date%TYPE index by binary_integer;
    TYPE l_kconversion_type_code_type is table of okl_k_rate_params.conversion_type_code%TYPE index by binary_integer;
    TYPE l_kattribute_category_type is table of okl_k_rate_params.attribute_category%TYPE index by binary_integer;
    TYPE l_kattribute1_type is table of okl_k_rate_params.attribute1%TYPE index by binary_integer;
    TYPE l_kattribute2_type is table of okl_k_rate_params.attribute2%TYPE index by binary_integer;
    TYPE l_kattribute3_type is table of okl_k_rate_params.attribute3%TYPE index by binary_integer;
    TYPE l_kattribute4_type is table of okl_k_rate_params.attribute4%TYPE index by binary_integer;
    TYPE l_kattribute5_type is table of okl_k_rate_params.attribute5%TYPE index by binary_integer;
    TYPE l_kattribute6_type is table of okl_k_rate_params.attribute6%TYPE index by binary_integer;
    TYPE l_kattribute7_type is table of okl_k_rate_params.attribute7%TYPE index by binary_integer;
    TYPE l_kattribute8_type is table of okl_k_rate_params.attribute8%TYPE index by binary_integer;
    TYPE l_kattribute9_type is table of okl_k_rate_params.attribute9%TYPE index by binary_integer;
    TYPE l_kattribute10_type is table of okl_k_rate_params.attribute10%TYPE index by binary_integer;
    TYPE l_kattribute11_type is table of okl_k_rate_params.attribute11%TYPE index by binary_integer;
    TYPE l_kattribute12_type is table of okl_k_rate_params.attribute12%TYPE index by binary_integer;
    TYPE l_kattribute13_type is table of okl_k_rate_params.attribute13%TYPE index by binary_integer;
    TYPE l_kattribute14_type is table of okl_k_rate_params.attribute14%TYPE index by binary_integer;
    TYPE l_kattribute15_type is table of okl_k_rate_params.attribute15%TYPE index by binary_integer;
    TYPE l_kcatchup_frequency_code_type is table of okl_k_rate_params.catchup_frequency_code%TYPE index by binary_integer;

    l_kkhr_id_tab l_kkhr_id_type;
    l_kparameter_type_code_tab l_kparameter_type_code_type;
    l_keffective_from_date_tab l_keffective_from_date_type;
    l_keffective_to_date_tab l_keffective_to_date_type;
    l_kinterest_index_id_tab l_kinterest_index_id_type;
    l_kbase_rate_tab l_kbase_rate_type;
    l_kinterest_start_date_tab l_kinterest_start_date_type;
    l_kadder_rate_tab l_kadder_rate_type;
    l_kmaximum_rate_tab l_kmaximum_rate_type;
    l_kminimum_rate_tab l_kminimum_rate_type;
    l_kprincipal_basis_code_tab l_kprincipal_basis_code_type;
    l_kdays_in_a_month_code_tab l_kdays_in_a_month_code_type;
    l_kdays_in_a_year_code_tab l_kdays_in_a_year_code_type;
    l_kinterest_basis_code_tab l_kinterest_basis_code_type;
    l_krate_delay_code_tab l_krate_delay_code_type;
    l_krate_delay_frequency_tab l_krate_delay_frequency_type;
    l_kcompounding_frequ_code_tab l_kcompounding_frequ_code_type;
    l_kcalculation_formula_id_tab l_kcalculation_formula_id_type;
    l_kcatchup_basis_code_tab l_kcatchup_basis_code_type;
    l_kcatchup_start_date_tab l_kcatchup_start_date_type;
    l_kcatchup_settlemen_code_tab l_kcatchup_settlemen_code_type;
    l_krate_change_start_date_tab l_krate_change_start_date_type;
    l_krate_change_frequ_code_tab l_krate_change_frequ_code_type;
    l_krate_change_value_tab l_krate_change_value_type;
    l_kconversion_option_code_tab l_kconversion_option_code_type;
    l_knext_conversion_date_tab l_knext_conversion_date_type;
    l_kconversion_type_code_tab l_kconversion_type_code_type;
    l_kattribute_category_tab l_kattribute_category_type;
    l_kattribute1_tab l_kattribute1_type;
    l_kattribute2_tab l_kattribute2_type;
    l_kattribute3_tab l_kattribute3_type;
    l_kattribute4_tab l_kattribute4_type;
    l_kattribute5_tab l_kattribute5_type;
    l_kattribute6_tab l_kattribute6_type;
    l_kattribute7_tab l_kattribute7_type;
    l_kattribute8_tab l_kattribute8_type;
    l_kattribute9_tab l_kattribute9_type;
    l_kattribute10_tab l_kattribute10_type;
    l_kattribute11_tab l_kattribute11_type;
    l_kattribute12_tab l_kattribute12_type;
    l_kattribute13_tab l_kattribute13_type;
    l_kattribute14_tab l_kattribute14_type;
    l_kattribute15_tab l_kattribute15_type;
    l_kcatchup_frequency_code_tab l_kcatchup_frequency_code_type;

    l_kkhr_id_tab2 l_kkhr_id_type;
    l_kparameter_type_code_tab2 l_kparameter_type_code_type;
    l_keffective_from_date_tab2 l_keffective_from_date_type;
    l_keffective_to_date_tab2 l_keffective_to_date_type;
    l_kinterest_index_id_tab2 l_kinterest_index_id_type;
    l_kbase_rate_tab2 l_kbase_rate_type;
    l_kinterest_start_date_tab2 l_kinterest_start_date_type;
    l_kadder_rate_tab2 l_kadder_rate_type;
    l_kmaximum_rate_tab2 l_kmaximum_rate_type;
    l_kminimum_rate_tab2 l_kminimum_rate_type;
    l_kprincipal_basis_code_tab2 l_kprincipal_basis_code_type;
    l_kdays_in_a_month_code_tab2 l_kdays_in_a_month_code_type;
    l_kdays_in_a_year_code_tab2 l_kdays_in_a_year_code_type;
    l_kinterest_basis_code_tab2 l_kinterest_basis_code_type;
    l_krate_delay_code_tab2 l_krate_delay_code_type;
    l_krate_delay_frequency_tab2 l_krate_delay_frequency_type;
    l_kcompounding_frequ_code_tab2 l_kcompounding_frequ_code_type;
    l_kcalculation_formula_id_tab2 l_kcalculation_formula_id_type;
    l_kcatchup_basis_code_tab2 l_kcatchup_basis_code_type;
    l_kcatchup_start_date_tab2 l_kcatchup_start_date_type;
    l_kcatchup_settlemen_code_tab2 l_kcatchup_settlemen_code_type;
    l_krate_change_start_date_tab2 l_krate_change_start_date_type;
    l_krate_change_frequ_code_tab2 l_krate_change_frequ_code_type;
    l_krate_change_value_tab2 l_krate_change_value_type;
    l_kconversion_option_code_tab2 l_kconversion_option_code_type;
    l_knext_conversion_date_tab2 l_knext_conversion_date_type;
    l_kconversion_type_code_tab2 l_kconversion_type_code_type;
    l_kattribute_category_tab2 l_kattribute_category_type;
    l_kattribute1_tab2 l_kattribute1_type;
    l_kattribute2_tab2 l_kattribute2_type;
    l_kattribute3_tab2 l_kattribute3_type;
    l_kattribute4_tab2 l_kattribute4_type;
    l_kattribute5_tab2 l_kattribute5_type;
    l_kattribute6_tab2 l_kattribute6_type;
    l_kattribute7_tab2 l_kattribute7_type;
    l_kattribute8_tab2 l_kattribute8_type;
    l_kattribute9_tab2 l_kattribute9_type;
    l_kattribute10_tab2 l_kattribute10_type;
    l_kattribute11_tab2 l_kattribute11_type;
    l_kattribute12_tab2 l_kattribute12_type;
    l_kattribute13_tab2 l_kattribute13_type;
    l_kattribute14_tab2 l_kattribute14_type;
    l_kattribute15_tab2 l_kattribute15_type;
    l_kcatchup_frequency_code_tab2 l_kcatchup_frequency_code_type;

    l_k_rate_params_counter number := 1;

    /*CURSOR get_rebook_date_csr(p_id NUMBER) IS
    SELECT DATE_TRANSACTION_OCCURRED
    FROM   OKL_TRX_CONTRACTS
    WHERE  KHR_ID = p_id
    AND    TCN_TYPE = 'TRBK'
    and    TSU_CODE = 'ENTERED';

    l_rebook_date DATE; */
    l_prev_counter NUMBER;

CURSOR C30(p_id NUMBER) IS
SELECT
       a.khr_id, a.parameter_type_code, a.effective_from_date,
       a.effective_to_date, a.interest_index_id, a.base_rate,
       a.interest_start_date, a.adder_rate, a.maximum_rate,
       a.minimum_rate, a.principal_basis_code, a.days_in_a_month_code,
       a.days_in_a_year_code, a.interest_basis_code, a.rate_delay_code,
       a.rate_delay_frequency, a.compounding_frequency_code, a.calculation_formula_id,
       a.catchup_basis_code, a.catchup_start_date, a.catchup_settlement_code,
       a.rate_change_start_date, a.rate_change_frequency_code, a.rate_change_value,
       a.conversion_option_code, a.next_conversion_date, a.conversion_type_code,
       a.attribute_category, a.attribute1, a.attribute2,
       a.attribute3, a.attribute4, a.attribute5,
       a.attribute6, a.attribute7, a.attribute8,
       a.attribute9, a.attribute10, a.attribute11,
       a.attribute12, a.attribute13, a.attribute14,
       a.attribute15, a.catchup_frequency_code
FROM   OKL_K_RATE_PARAMS a
WHERE  a.khr_id = p_id;
-- Bug 4730726
/*AND    (
         (a.effective_to_date is NULL AND p_trans_type not in ('CRB', 'CRL'))
         OR
         ((a.effective_to_date is NULL OR a.effective_to_date IS NOT NULL) AND
           p_trans_type in ('CRB', 'CRL'))
       ); */
BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  /*
  l_rebook_date := NULL;
  IF (p_trans_type = 'CRB') THEN
    FOR r IN get_rebook_date_csr(p_old_id)
    LOOP
      l_rebook_date := r.date_transaction_occurred;
    END LOOP;
    print('In copy_var_int_rate_params: l_rebook_date=' || l_rebook_date);
    IF (l_rebook_date is NULL) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
  END IF;
  */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'p_rbk_date=' || p_rbk_date);
  END IF;

  OPEN C30(p_old_id);
  LOOP
    FETCH C30 BULK COLLECT INTO
     l_kkhr_id_tab2, l_kparameter_type_code_tab2, l_keffective_from_date_tab2,
     l_keffective_to_date_tab2, l_kinterest_index_id_tab2, l_kbase_rate_tab2,
     l_kinterest_start_date_tab2, l_kadder_rate_tab2, l_kmaximum_rate_tab2,
     l_kminimum_rate_tab2, l_kprincipal_basis_code_tab2, l_kdays_in_a_month_code_tab2,
     l_kdays_in_a_year_code_tab2, l_kinterest_basis_code_tab2, l_krate_delay_code_tab2,
     l_krate_delay_frequency_tab2, l_kcompounding_frequ_code_tab2, l_kcalculation_formula_id_tab2,
     l_kcatchup_basis_code_tab2, l_kcatchup_start_date_tab2, l_kcatchup_settlemen_code_tab2,
     l_krate_change_start_date_tab2, l_krate_change_frequ_code_tab2, l_krate_change_value_tab2,
     l_kconversion_option_code_tab2, l_knext_conversion_date_tab2, l_kconversion_type_code_tab2,
     l_kattribute_category_tab2, l_kattribute1_tab2, l_kattribute2_tab2,
     l_kattribute3_tab2, l_kattribute4_tab2, l_kattribute5_tab2,
     l_kattribute6_tab2, l_kattribute7_tab2, l_kattribute8_tab2,
     l_kattribute9_tab2, l_kattribute10_tab2, l_kattribute11_tab2,
     l_kattribute12_tab2, l_kattribute13_tab2, l_kattribute14_tab2,
     l_kattribute15_tab2, l_kcatchup_frequency_code_tab2
    LIMIT G_BULK_SIZE;
    EXIT WHEN l_kkhr_id_tab2.COUNT = 0;

    FOR i IN l_kkhr_id_tab2.FIRST..l_kkhr_id_tab2.LAST
    LOOP
      l_kkhr_id_tab(l_k_rate_params_counter) := l_kkhr_id_tab2(i);
      l_kkhr_id_tab(l_k_rate_params_counter) := p_new_id;

      l_kparameter_type_code_tab(l_k_rate_params_counter) := l_kparameter_type_code_tab2(i);
      l_keffective_from_date_tab(l_k_rate_params_counter) := l_keffective_from_date_tab2(i);
      l_keffective_to_date_tab(l_k_rate_params_counter) := l_keffective_to_date_tab2(i);
      l_kinterest_index_id_tab(l_k_rate_params_counter) := l_kinterest_index_id_tab2(i);
      l_kbase_rate_tab(l_k_rate_params_counter) := l_kbase_rate_tab2(i);
      l_kinterest_start_date_tab(l_k_rate_params_counter) := l_kinterest_start_date_tab2(i);
      IF ( l_kinterest_start_date_tab(l_k_rate_params_counter) IS NOT NULL) THEN
        l_kinterest_start_date_tab(l_k_rate_params_counter) := p_start_date;
      END IF;

      l_kadder_rate_tab(l_k_rate_params_counter) := l_kadder_rate_tab2(i);
      l_kmaximum_rate_tab(l_k_rate_params_counter) := l_kmaximum_rate_tab2(i);
      l_kminimum_rate_tab(l_k_rate_params_counter) := l_kminimum_rate_tab2(i);
      l_kprincipal_basis_code_tab(l_k_rate_params_counter) := l_kprincipal_basis_code_tab2(i);
      l_kdays_in_a_month_code_tab(l_k_rate_params_counter) := l_kdays_in_a_month_code_tab2(i);
      l_kdays_in_a_year_code_tab(l_k_rate_params_counter) := l_kdays_in_a_year_code_tab2(i);
      l_kinterest_basis_code_tab(l_k_rate_params_counter) := l_kinterest_basis_code_tab2(i);
      l_krate_delay_code_tab(l_k_rate_params_counter) := l_krate_delay_code_tab2(i);
      l_krate_delay_frequency_tab(l_k_rate_params_counter) := l_krate_delay_frequency_tab2(i);
      l_kcompounding_frequ_code_tab(l_k_rate_params_counter) := l_kcompounding_frequ_code_tab2(i);
      l_kcalculation_formula_id_tab(l_k_rate_params_counter) := l_kcalculation_formula_id_tab2(i);
      l_kcatchup_basis_code_tab(l_k_rate_params_counter) := l_kcatchup_basis_code_tab2(i);
      l_kcatchup_start_date_tab(l_k_rate_params_counter) := l_kcatchup_start_date_tab2(i);
      IF (l_kcatchup_start_date_tab(l_k_rate_params_counter) IS NOT NULL) THEN
        l_kcatchup_start_date_tab(l_k_rate_params_counter) := p_start_date;
      END IF;

      l_kcatchup_settlemen_code_tab(l_k_rate_params_counter) := l_kcatchup_settlemen_code_tab2(i);
      l_krate_change_start_date_tab(l_k_rate_params_counter) := l_krate_change_start_date_tab2(i);
      IF (l_krate_change_start_date_tab(l_k_rate_params_counter) IS NOT NULL) THEN
        l_krate_change_start_date_tab(l_k_rate_params_counter) := p_start_date;
      END IF;

      l_krate_change_frequ_code_tab(l_k_rate_params_counter) := l_krate_change_frequ_code_tab2(i);
      l_krate_change_value_tab(l_k_rate_params_counter) := l_krate_change_value_tab2(i);
      l_kconversion_option_code_tab(l_k_rate_params_counter) := l_kconversion_option_code_tab2(i);
      l_knext_conversion_date_tab(l_k_rate_params_counter) := l_knext_conversion_date_tab2(i);
      l_kconversion_type_code_tab(l_k_rate_params_counter) := l_kconversion_type_code_tab2(i);
      l_kattribute_category_tab(l_k_rate_params_counter) := l_kattribute_category_tab2(i);
      l_kattribute1_tab(l_k_rate_params_counter) := l_kattribute1_tab2(i);
      l_kattribute2_tab(l_k_rate_params_counter) := l_kattribute2_tab2(i);
      l_kattribute3_tab(l_k_rate_params_counter) := l_kattribute3_tab2(i);
      l_kattribute4_tab(l_k_rate_params_counter) := l_kattribute4_tab2(i);
      l_kattribute5_tab(l_k_rate_params_counter) := l_kattribute5_tab2(i);
      l_kattribute6_tab(l_k_rate_params_counter) := l_kattribute6_tab2(i);
      l_kattribute7_tab(l_k_rate_params_counter) := l_kattribute7_tab2(i);
      l_kattribute8_tab(l_k_rate_params_counter) := l_kattribute8_tab2(i);
      l_kattribute9_tab(l_k_rate_params_counter) := l_kattribute9_tab2(i);
      l_kattribute10_tab(l_k_rate_params_counter) := l_kattribute10_tab2(i);
      l_kattribute11_tab(l_k_rate_params_counter) := l_kattribute11_tab2(i);
      l_kattribute12_tab(l_k_rate_params_counter) := l_kattribute12_tab2(i);
      l_kattribute13_tab(l_k_rate_params_counter) := l_kattribute13_tab2(i);
      l_kattribute14_tab(l_k_rate_params_counter) := l_kattribute14_tab2(i);
      l_kattribute15_tab(l_k_rate_params_counter) := l_kattribute15_tab2(i);
      l_kcatchup_frequency_code_tab(l_k_rate_params_counter) := l_kcatchup_frequency_code_tab2(i);

      l_k_rate_params_counter := l_k_rate_params_counter + 1;

      -- No special processing for rebook copy (Bug 4730726)
      /*IF (p_trans_type = 'CRB') THEN
        l_prev_counter := l_k_rate_params_counter - 1;
        IF (l_kparameter_type_code_tab(l_prev_counter) = 'ACTUAL' AND
            l_keffective_to_date_tab(l_prev_counter) IS NULL) THEN
          l_keffective_to_date_tab(l_prev_counter) := p_rbk_date - 1;

          -- Make a copy of the current set for rebook copy
          l_kkhr_id_tab(l_k_rate_params_counter) := p_new_id;

          l_kparameter_type_code_tab(l_k_rate_params_counter) := l_kparameter_type_code_tab(l_prev_counter);

          l_keffective_from_date_tab(l_k_rate_params_counter) := p_rbk_date;
          l_keffective_to_date_tab(l_k_rate_params_counter) := NULL;

          l_kinterest_index_id_tab(l_k_rate_params_counter) := l_kinterest_index_id_tab(l_prev_counter);
          l_kbase_rate_tab(l_k_rate_params_counter) := l_kbase_rate_tab(l_prev_counter);
          l_kinterest_start_date_tab(l_k_rate_params_counter) := l_kinterest_start_date_tab(l_prev_counter);
          IF ( l_kinterest_start_date_tab(l_k_rate_params_counter) IS NOT NULL) THEN
            l_kinterest_start_date_tab(l_k_rate_params_counter) := p_start_date;
          END IF;

          l_kadder_rate_tab(l_k_rate_params_counter) := l_kadder_rate_tab(l_prev_counter);
          l_kmaximum_rate_tab(l_k_rate_params_counter) := l_kmaximum_rate_tab(l_prev_counter);
          l_kminimum_rate_tab(l_k_rate_params_counter) := l_kminimum_rate_tab(l_prev_counter);
          l_kprincipal_basis_code_tab(l_k_rate_params_counter) := l_kprincipal_basis_code_tab(l_prev_counter);
          l_kdays_in_a_month_code_tab(l_k_rate_params_counter) := l_kdays_in_a_month_code_tab(l_prev_counter);
          l_kdays_in_a_year_code_tab(l_k_rate_params_counter) := l_kdays_in_a_year_code_tab(l_prev_counter);
          l_kinterest_basis_code_tab(l_k_rate_params_counter) := l_kinterest_basis_code_tab(l_prev_counter);
          l_krate_delay_code_tab(l_k_rate_params_counter) := l_krate_delay_code_tab(l_prev_counter);
          l_krate_delay_frequency_tab(l_k_rate_params_counter) := l_krate_delay_frequency_tab(l_prev_counter);
          l_kcompounding_frequ_code_tab(l_k_rate_params_counter) := l_kcompounding_frequ_code_tab(l_prev_counter);
          l_kcalculation_formula_id_tab(l_k_rate_params_counter) := l_kcalculation_formula_id_tab(l_prev_counter);
          l_kcatchup_basis_code_tab(l_k_rate_params_counter) := l_kcatchup_basis_code_tab(l_prev_counter);
          l_kcatchup_start_date_tab(l_k_rate_params_counter) := l_kcatchup_start_date_tab(l_prev_counter);
          IF (l_kcatchup_start_date_tab(l_k_rate_params_counter) IS NOT NULL) THEN
            l_kcatchup_start_date_tab(l_k_rate_params_counter) := p_start_date;
          END IF;

          l_kcatchup_settlemen_code_tab(l_k_rate_params_counter) := l_kcatchup_settlemen_code_tab(l_prev_counter);
          l_krate_change_start_date_tab(l_k_rate_params_counter) := l_krate_change_start_date_tab(l_prev_counter);
          IF (l_krate_change_start_date_tab(l_k_rate_params_counter) IS NOT NULL) THEN
            l_krate_change_start_date_tab(l_k_rate_params_counter) := p_start_date;
          END IF;

          l_krate_change_frequ_code_tab(l_k_rate_params_counter) := l_krate_change_frequ_code_tab(l_prev_counter);
          l_krate_change_value_tab(l_k_rate_params_counter) := l_krate_change_value_tab(l_prev_counter);
          l_kconversion_option_code_tab(l_k_rate_params_counter) := l_kconversion_option_code_tab(l_prev_counter);
          l_knext_conversion_date_tab(l_k_rate_params_counter) := l_knext_conversion_date_tab(l_prev_counter);
          l_kconversion_type_code_tab(l_k_rate_params_counter) := l_kconversion_type_code_tab(l_prev_counter);
          l_kattribute_category_tab(l_k_rate_params_counter) := l_kattribute_category_tab(l_prev_counter);
          l_kattribute1_tab(l_k_rate_params_counter) := l_kattribute1_tab(l_prev_counter);
          l_kattribute2_tab(l_k_rate_params_counter) := l_kattribute2_tab(l_prev_counter);
          l_kattribute3_tab(l_k_rate_params_counter) := l_kattribute3_tab(l_prev_counter);
          l_kattribute4_tab(l_k_rate_params_counter) := l_kattribute4_tab(l_prev_counter);
          l_kattribute5_tab(l_k_rate_params_counter) := l_kattribute5_tab(l_prev_counter);
          l_kattribute6_tab(l_k_rate_params_counter) := l_kattribute6_tab(l_prev_counter);
          l_kattribute7_tab(l_k_rate_params_counter) := l_kattribute7_tab(l_prev_counter);
          l_kattribute8_tab(l_k_rate_params_counter) := l_kattribute8_tab(l_prev_counter);
          l_kattribute9_tab(l_k_rate_params_counter) := l_kattribute9_tab(l_prev_counter);
          l_kattribute10_tab(l_k_rate_params_counter) := l_kattribute10_tab(l_prev_counter);
          l_kattribute11_tab(l_k_rate_params_counter) := l_kattribute11_tab(l_prev_counter);
          l_kattribute12_tab(l_k_rate_params_counter) := l_kattribute12_tab(l_prev_counter);
          l_kattribute13_tab(l_k_rate_params_counter) := l_kattribute13_tab(l_prev_counter);
          l_kattribute14_tab(l_k_rate_params_counter) := l_kattribute14_tab(l_prev_counter);
          l_kattribute15_tab(l_k_rate_params_counter) := l_kattribute15_tab(l_prev_counter);
          l_kcatchup_frequency_code_tab(l_k_rate_params_counter) := l_kcatchup_frequency_code_tab(l_prev_counter);

          l_k_rate_params_counter := l_k_rate_params_counter + 1;
        END IF;
      END IF;*/ -- if rebook copy

    END LOOP;
  END LOOP;
  CLOSE C30;

  IF l_k_rate_params_counter > 1 THEN
    FORALL i IN l_kkhr_id_tab.FIRST..l_kkhr_id_tab.LAST
      INSERT INTO okl_k_rate_params (
       khr_id, parameter_type_code, effective_from_date,
       effective_to_date, interest_index_id, base_rate,
       interest_start_date, adder_rate, maximum_rate,
       minimum_rate, principal_basis_code, days_in_a_month_code,
       days_in_a_year_code, interest_basis_code, rate_delay_code,
       rate_delay_frequency,compounding_frequency_code, calculation_formula_id,
       catchup_basis_code, catchup_start_date, catchup_settlement_code,
       rate_change_start_date, rate_change_frequency_code, rate_change_value,
       conversion_option_code, next_conversion_date, conversion_type_code,
       attribute_category, attribute1, attribute2,
       attribute3, attribute4, attribute5,
       attribute6, attribute7, attribute8,
       attribute9, attribute10, attribute11,
       attribute12, attribute13, attribute14,
       attribute15, created_by, creation_date,
       last_updated_by, last_update_date, last_update_login,
       catchup_frequency_code
      ) VALUES (
       l_kkhr_id_tab(i), l_kparameter_type_code_tab(i), l_keffective_from_date_tab(i),
       l_keffective_to_date_tab(i), l_kinterest_index_id_tab(i), l_kbase_rate_tab(i),
       l_kinterest_start_date_tab(i), l_kadder_rate_tab(i), l_kmaximum_rate_tab(i),
       l_kminimum_rate_tab(i), l_kprincipal_basis_code_tab(i), l_kdays_in_a_month_code_tab(i),
       l_kdays_in_a_year_code_tab(i), l_kinterest_basis_code_tab(i), l_krate_delay_code_tab(i),
       l_krate_delay_frequency_tab(i), l_kcompounding_frequ_code_tab(i), l_kcalculation_formula_id_tab(i),
       l_kcatchup_basis_code_tab(i), l_kcatchup_start_date_tab(i), l_kcatchup_settlemen_code_tab(i),
       l_krate_change_start_date_tab(i), l_krate_change_frequ_code_tab(i), l_krate_change_value_tab(i),
       l_kconversion_option_code_tab(i), l_knext_conversion_date_tab(i), l_kconversion_type_code_tab(i),
       l_kattribute_category_tab(i),l_kattribute1_tab(i), l_kattribute2_tab(i),
       l_kattribute3_tab(i), l_kattribute4_tab(i), l_kattribute5_tab(i),
       l_kattribute6_tab(i), l_kattribute7_tab(i), l_kattribute8_tab(i),
       l_kattribute9_tab(i), l_kattribute10_tab(i), l_kattribute11_tab(i),
       l_kattribute12_tab(i), l_kattribute13_tab(i), l_kattribute14_tab(i),
       l_kattribute15_tab(i), l_created_by, SYSDATE,
       l_last_updated_by, SYSDATE, l_last_update_login,
       l_kcatchup_frequency_code_tab(i)
      );
  END IF;

EXCEPTION WHEN OTHERS THEN

  --x_return_status := OKL_API.G_RET_STS_ERROR;
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing copy_var_int_rate_params:l_kkhr_id_tab.count=' || l_kkhr_id_tab.COUNT || ' ...');
  END IF;
  IF (l_kkhr_id_tab.COUNT > 0) THEN
  FOR i IN l_kkhr_id_tab.first..l_kkhr_id_tab.last
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'KHR_ID('||i||')=' || l_kKHR_ID_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'PARAMETER_TYPE_CODE('||i||')=' || l_kPARAMETER_TYPE_CODE_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'EFFECTIVE_FROM_DATE('||i||')=' || l_kEFFECTIVE_FROM_DATE_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'EFFECTIVE_TO_DATE('||i||')=' || l_kEFFECTIVE_TO_DATE_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'INTEREST_INDEX_ID('||i||')=' || l_kINTEREST_INDEX_ID_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'BASE_RATE('||i||')=' || l_kBASE_RATE_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'INTEREST_START_DATE('||i||')=' || l_kINTEREST_START_DATE_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ADDER_RATE('||i||')=' || l_kADDER_RATE_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'MAXIMUM_RATE('||i||')=' || l_kMAXIMUM_RATE_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'MINIMUM_RATE('||i||')=' || l_kMINIMUM_RATE_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'PRINCIPAL_BASIS_CODE('||i||')=' || l_kPRINCIPAL_BASIS_CODE_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'DAYS_IN_A_MONTH_CODE('||i||')=' || l_kDAYS_IN_A_MONTH_CODE_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'DAYS_IN_A_YEAR_CODE('||i||')=' || l_kDAYS_IN_A_YEAR_CODE_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'INTEREST_BASIS_CODE('||i||')=' || l_kINTEREST_BASIS_CODE_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'RATE_DELAY_CODE('||i||')=' || l_kRATE_DELAY_CODE_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'RATE_DELAY_FREQUENCY('||i||')=' || l_kRATE_DELAY_FREQUENCY_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'COMPOUNDING_FREQUENCY_CODE('||i||')=' || l_kCOMPOUNDING_FREQU_CODE_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'CALCULATION_FORMULA_ID('||i||')=' || l_kCALCULATION_FORMULA_ID_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'CATCHUP_BASIS_CODE('||i||')=' || l_kCATCHUP_BASIS_CODE_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'CATCHUP_START_DATE('||i||')=' || l_kCATCHUP_START_DATE_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'CATCHUP_SETTLEMENT_CODE('||i||')=' || l_kCATCHUP_SETTLEMEN_CODE_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'RATE_CHANGE_START_DATE('||i||')=' || l_kRATE_CHANGE_START_DATE_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'RATE_CHANGE_FREQUENCY_CODE('||i||')=' || l_kRATE_CHANGE_FREQU_CODE_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'RATE_CHANGE_VALUE('||i||')=' || l_kRATE_CHANGE_VALUE_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'CONVERSION_OPTION_CODE('||i||')=' || l_kCONVERSION_OPTION_CODE_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'NEXT_CONVERSION_DATE('||i||')=' || l_kNEXT_CONVERSION_DATE_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'CONVERSION_TYPE_CODE('||i||')=' || l_kCONVERSION_TYPE_CODE_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ATTRIBUTE_CATEGORY('||i||')=' || l_kATTRIBUTE_CATEGORY_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ATTRIBUTE1('||i||')=' || l_kATTRIBUTE1_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ATTRIBUTE2('||i||')=' || l_kATTRIBUTE2_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ATTRIBUTE3('||i||')=' || l_kATTRIBUTE3_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ATTRIBUTE4('||i||')=' || l_kATTRIBUTE4_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ATTRIBUTE5('||i||')=' || l_kATTRIBUTE5_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ATTRIBUTE6('||i||')=' || l_kATTRIBUTE6_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ATTRIBUTE7('||i||')=' || l_kATTRIBUTE7_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ATTRIBUTE8('||i||')=' || l_kATTRIBUTE8_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ATTRIBUTE9('||i||')=' || l_kATTRIBUTE9_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ATTRIBUTE10('||i||')=' || l_kATTRIBUTE10_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ATTRIBUTE11('||i||')=' || l_kATTRIBUTE11_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ATTRIBUTE12('||i||')=' || l_kATTRIBUTE12_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ATTRIBUTE13('||i||')=' || l_kATTRIBUTE13_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ATTRIBUTE14('||i||')=' || l_kATTRIBUTE14_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ATTRIBUTE15('||i||')=' || l_kATTRIBUTE15_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'CATCHUP_FREQUENCY_CODE('||i||')=' || l_kCATCHUP_FREQUENCY_CODE_tab(i));
    END IF;
  END LOOP;
  END IF;

  RAISE OKC_API.G_EXCEPTION_ERROR;
END copy_var_int_rate_params;

--------------------------------------------------------------------------------
-- Start of comments
--
-- Procedure Name  : copy_lease_contract_new
-- Description     : Copies the contract and all the lines attached to the contract
-- Business Rules  :
-- Parameters      :
-- Version         : 1.0
-- Notes           :
-- End of comments
--------------------------------------------------------------------------------
PROCEDURE copy_lease_contract_new(
            p_api_version              IN  NUMBER,
            p_init_msg_list            IN  VARCHAR2 DEFAULT OKL_API.G_FALSE,
            x_return_status            OUT NOCOPY VARCHAR2,
            x_msg_count                OUT NOCOPY NUMBER,
            x_msg_data                 OUT NOCOPY VARCHAR2,
            p_commit                   IN  VARCHAR2 DEFAULT 'F',
            p_chr_id                   IN  NUMBER,
            p_contract_number	       IN  VARCHAR2,
            p_contract_number_modifier IN  VARCHAR2,
            p_to_template_yn	       IN  VARCHAR2 DEFAULT 'N',
            p_renew_ref_yn             IN  VARCHAR2,
            p_copy_lines_yn            IN VARCHAR2,
            p_override_org	       IN  VARCHAR2 DEFAULT 'N',
            p_trans_type               IN  VARCHAR2,
            x_chr_id                   OUT NOCOPY NUMBER,
            p_rbk_date                 IN  DATE DEFAULT NULL) IS

l_api_name CONSTANT VARCHAR2(30) := 'COPY_LEASE_CONTRACT_NEW';
G_APP_NAME CONSTANT VARCHAR2(200) := 'OKL_COPY_CONTRACT';
G_PKG_NAME CONSTANT VARCHAR2(200) := 'OKL_COPY_CONTRACT_PVT';
    G_UNEXPECTED_ERROR            CONSTANT  VARCHAR2(200) := 'OKL_CONTRACTS_UNEXP_ERROR';
    G_SQLCODE_TOKEN               CONSTANT  VARCHAR2(200) := 'SQLcode';
    G_SQLERRM_TOKEN               CONSTANT  VARCHAR2(200) := 'SQLerrm';
    --G_WF_ITM_CONTRACT_ID CONSTANT VARCHAR2(11) := 'CONTRACT_ID';
   G_WF_EVT_KHR_CREATED CONSTANT VARCHAR2(41) := 'oracle.apps.okl.la.lease_contract.created';

G_WF_EVT_SERV_FEXP_UPDATED     CONSTANT VARCHAR2(70):= 'oracle.apps.okl.la.lease_contract.service_fee_expense_updated';
G_WF_EVT_FEE_EXP_UPDATED       CONSTANT VARCHAR2(70):= 'oracle.apps.okl.la.lease_contract.fee_expense_updated';
G_WF_EVT_FEE_PASS_UPDATED      CONSTANT VARCHAR2(70):= 'oracle.apps.okl.la.lease_contract.fee_passthrough_updated';
G_WF_ITM_FEE_LINE_ID  CONSTANT VARCHAR2(30)       := 'FEE_LINE_ID';
G_WF_ITM_SERV_CHR_ID  CONSTANT VARCHAR2(30)       := 'SERVICE_CONTRACT_ID';
G_WF_ITM_SERV_CLE_ID  CONSTANT VARCHAR2(30)       := 'SERVICE_CONTRACT_LINE_ID';

G_WF_EVT_SERV_PASS_UPDATED     CONSTANT VARCHAR2(70):= 'oracle.apps.okl.la.lease_contract.service_fee_passthrough_updated';
G_WF_EVT_ASSET_PROPTAX_UPDATED CONSTANT VARCHAR2(70):= 'oracle.apps.okl.la.lease_contract.asset_property_tax_updated';
G_WF_EVT_ASSET_FILING_UPDATED  CONSTANT VARCHAR2(70):= 'oracle.apps.okl.la.lease_contract.asset_filing_updated';
G_WF_EVT_CONTRACT_TERM_UPDATED CONSTANT VARCHAR2(70):= 'oracle.apps.okl.la.lease_contract.asset_filing_terms_updated';
G_WF_ITM_TERMS_ID CONSTANT VARCHAR2(30)           := 'TERMS_ID';

G_WF_EVT_ASSET_SUP_INV_CRTD CONSTANT VARCHAR2(65)   := 'oracle.apps.okl.la.lease_contract.asset_supplier_invoice_created';
G_WF_EVT_ASSETTAX_DPRN_CRTD CONSTANT VARCHAR2(65) := 'oracle.apps.okl.la.lease_contract.asset_tax_depreciation_created';
G_WF_EVT_ASSETBOOK_DPRN_CRTD CONSTANT VARCHAR2(65)   := 'oracle.apps.okl.la.lease_contract.asset_book_depreciation_created';
G_WF_EVT_CR_LMT_CREATED CONSTANT VARCHAR2(50) := 'oracle.apps.okl.la.credit_limit.created';
--G_WF_EVT_CR_LMT_UPDATED CONSTANT VARCHAR2(50) := 'oracle.apps.okl.la.credit_limit.updated';
--G_WF_EVT_CR_LMT_REMOVED CONSTANT VARCHAR2(50) := 'oracle.apps.okl.la.credit_limit.remove';
G_WF_EVT_ASSET_CREATED CONSTANT VARCHAR2(50) := 'oracle.apps.okl.la.lease_contract.asset_created';
--G_WF_EVT_ASSET_UPDATED CONSTANT VARCHAR2(50) := 'oracle.apps.okl.la.lease_contract.asset_updated';
--G_WF_EVT_ASSET_REMOVED CONSTANT VARCHAR2(50) := 'oracle.apps.okl.la.lease_contract.remove_asset';
G_WF_EVT_SERVICE_CREATED CONSTANT VARCHAR2(60) := 'oracle.apps.okl.la.lease_contract.service_fee_created';
--G_WF_EVT_SERVICE_UPDATED CONSTANT VARCHAR2(60) := 'oracle.apps.okl.la.lease_contract.service_fee_updated';
G_WF_EVT_ASSET_SUBSIDY_CRTD CONSTANT VARCHAR2(65)   := 'oracle.apps.okl.la.lease_contract.asset_subsidy_created';

G_WF_EVT_ASSET_SERIAL_CRTD CONSTANT VARCHAR2(65) := 'oracle.apps.okl.la.lease_contract.asset_serial_numbers_created';
G_WF_ITM_SERIAL_NUM CONSTANT VARCHAR2(30)         := 'SERIAL_NUMBER';
G_WF_ITM_CR_LINE_ID CONSTANT VARCHAR2(30) := 'CREDIT_LINE_ID';
G_WF_ITM_CR_LMT_ID CONSTANT VARCHAR2(30) := 'CREDIT_LIMIT_ID';
G_WF_ITM_CONTRACT_ID CONSTANT VARCHAR2(30) := 'CONTRACT_ID';
G_WF_ITM_ASSET_ID CONSTANT VARCHAR2(30) := 'ASSET_ID';
G_WF_ITM_CONTRACT_PROCESS CONSTANT VARCHAR2(20) := 'CONTRACT_PROCESS';
G_WF_ITM_SRV_LINE_ID CONSTANT VARCHAR2(30) := 'SERVICE_LINE_ID';
G_WF_ITM_SERVICE_KHR_ID CONSTANT VARCHAR2(30) := 'SERVICE_CONTRACT_ID';
G_WF_ITM_SERVICE_CLE_ID CONSTANT VARCHAR2(30) := 'SERVICE_CONTRACT_LINE_ID';
G_WF_ITM_SUBSIDY_ID CONSTANT VARCHAR2(30)           := 'SUBSIDY_ID';
G_WF_ITM_SERV_LINE_ID CONSTANT VARCHAR2(30) := 'SERVICE_LINE_ID';

G_WF_ITM_PARTY_ID CONSTANT VARCHAR2(15)    := 'PARTY_ID';
G_WF_ITM_PARTY_ROLE_ID CONSTANT VARCHAR2(15)    := 'PARTY_ROLE_ID';

G_WF_EVT_KHR_PARTY_CREATED CONSTANT VARCHAR2(50) := 'oracle.apps.okl.la.lease_contract.party_created';
G_WF_EVT_ASSET_FEE_CREATED CONSTANT VARCHAR2(60) := 'oracle.apps.okl.la.lease_contract.asset_fee_created';
G_WF_EVT_ASSET_SERV_FEE_CRTD CONSTANT VARCHAR2(65) := 'oracle.apps.okl.la.lease_contract.asset_service_fee_created';

G_WF_EVT_FEE_CREATED CONSTANT VARCHAR2(50) := 'oracle.apps.okl.la.lease_contract.fee_created';
--G_WF_EVT_FEE_UPDATED CONSTANT VARCHAR2(50) := 'oracle.apps.okl.la.lease_contract.fee_updated';
--G_WF_ITM_FEE_LINE_ID CONSTANT VARCHAR2(30) := 'FEE_LINE_ID';

   --G_WF_ITM_CONTRACT_ID CONSTANT VARCHAR2(30)        := 'CONTRACT_ID';
   --G_WF_ITM_ASSET_ID CONSTANT VARCHAR2(30)           := 'ASSET_ID';
   G_WF_ITM_BOOK_CODE CONSTANT VARCHAR2(30)          := 'BOOK_CODE';
   --G_WF_ITM_CONTRACT_PROCESS CONSTANT VARCHAR2(30)   := 'CONTRACT_PROCESS';

l_inventory_org_id NUMBER;
l_curr_pos VARCHAR2(80);
l_message VARCHAR2(30) ;
l_new_mapping_id NUMBER;
l_hstv_rec okc_k_history_pvt.hstv_rec_type;
x_hstv_rec okc_k_history_pvt.hstv_rec_type;
l_serv_contract_id okc_k_headers_b.id%TYPE;
l_service_top_line_id okc_k_lines_b.id%TYPE;
l_deal_type okl_k_headers.deal_type%TYPE;
l_queried BOOLEAN := FALSE;
l_line_style okc_k_lines_b.lse_id%TYPE;
l_terms_id NUMBER;
l_vendor_id VARCHAR2(40);
l_tal_kle_cle_id NUMBER;
l_new_object1_id1 VARCHAR2(40);
l_contract_process    VARCHAR2(30);
    l_parameter_list        wf_parameter_list_t;
    l_event_name            wf_events.name%TYPE := NULL;
    l_raise_business_event  VARCHAR2(1) := OKL_API.G_FALSE;
    l_business_event_name  wf_events.name%TYPE := NULL;

l_contract_number okc_k_headers_b.contract_number%TYPE;
l_copied_id NUMBER;
l_gov_id NUMBER;
l_capital_amount NUMBER;
l_contract_currency okc_k_headers_b.currency_code%TYPE;
l_contract_start_date okc_k_headers_b.start_date%TYPE;
l_conversion_type okc_k_headers_b.CONVERSION_TYPE%TYPE;
l_conversion_rate okc_k_headers_b.CONVERSION_RATE%TYPE;
l_conversion_rate_date okc_k_headers_b.CONVERSION_RATE_DATE%TYPE;
l_template_yn okc_k_headers_b.TEMPLATE_YN%TYPE;
l_trx_assets_counter4 NUMBER := 1;
l_tal_to_kle_counter NUMBER := 1;
l_trx_assets_counter6 NUMBER := 1;
l_okl_k_lines_counter NUMBER := 1;
l_try_id NUMBER;
CURSOR c1(p_chr_id NUMBER) IS
  SELECT * FROM okc_k_headers_b
  WHERE id=p_chr_id;

CURSOR c2(p_chr_id NUMBER) IS
  SELECT * FROM okc_governances
  WHERE  dnz_chr_id = p_chr_id;

-- okc_governances_h is not needed
/*
cursor c3(p_chr_id number) is
  select * from okc_governances_h
  where  dnz_chr_id = p_chr_id; */

CURSOR c4(p_chr_id NUMBER) IS
  SELECT
       a.id, a.line_number, a.chr_id,
       a.cle_id, a.cle_id_renewed, a.dnz_chr_id,
       a.display_sequence, a.sts_code, a.trn_code,
       a.lse_id, a.exception_yn, a.object_version_number,
       a.created_by, a.creation_date, a.last_updated_by,
       a.last_update_date, a.hidden_ind, a.price_negotiated,
       a.price_level_ind, a.price_unit, a.price_unit_percent,
       a.invoice_line_level_ind, a.dpas_rating, a.template_used,
       a.price_type, a.currency_code, a.last_update_login,
       a.date_terminated, a.start_date, a.end_date,
       a.attribute_category, a.attribute1, a.attribute2,
       a.attribute3, a.attribute4, a.attribute5,
       a.attribute6, a.attribute7, a.attribute8,
       a.attribute9, a.attribute10, a.attribute11,
       a.attribute12, a.attribute13, a.attribute14,
       a.attribute15, a.security_group_id, a.cle_id_renewed_to,
       a.price_negotiated_renewed, a.currency_code_renewed, a.upg_orig_system_ref,
       a.upg_orig_system_ref_id, a.date_renewed, a.orig_system_source_code,
       a.orig_system_id1, a.orig_system_reference1, a.program_application_id,
       a.program_id, a.program_update_date, a.request_id,
       a.price_list_id, a.price_list_line_id, a.line_list_price,
       a.item_to_price_yn, a.pricing_date, a.price_basis_yn,
       a.config_header_id, a.config_revision_number, a.config_complete_yn,
       a.config_valid_yn, a.config_top_model_line_id, a.config_item_type,
       a.config_item_id, a.service_item_yn, a.ph_pricing_type,
       a.ph_price_break_basis, a.ph_min_qty, a.ph_min_amt,
       a.ph_qp_reference_id, a.ph_value, a.ph_enforce_price_list_yn,
       a.ph_adjustment, a.ph_integrated_with_qp, a.cust_acct_id,
       a.bill_to_site_use_id, a.inv_rule_id, a.line_renewal_type_code,
       a.ship_to_site_use_id, a.payment_term_id, b.fee_type,
       c.name
  FROM okc_k_lines_b a,
       okl_k_lines b,
       okc_k_lines_tl c
  WHERE  a.dnz_chr_id = p_chr_id
  AND    a.id = b.id
  AND    a.id = c.id
  AND    c.LANGUAGE = USERENV('LANG');

CURSOR c29(p_id NUMBER) IS
    SELECT rlobj.cle_id, rlobj.object1_id1
      FROM okc_k_rel_objs_v rlobj
     WHERE rlobj.chr_id = p_id
       --AND rlobj.cle_id = p_line_id
       AND rlobj.rty_code = 'OKLSRV'
       AND rlobj.jtot_object1_code = 'OKL_SERVICE_LINE';

-- Bug 4738057
CURSOR contract_exists_csr(p_contract_number IN VARCHAR2) IS
       SELECT ID
       FROM   OKC_K_HEADERS_B
       WHERE  CONTRACT_NUMBER = p_contract_number;

    TYPE l_subsidy_id_type IS TABLE OF okl_k_lines.subsidy_id%TYPE INDEX BY BINARY_INTEGER;

    TYPE l_id_type IS TABLE OF okc_k_lines_b.id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_line_number_type IS TABLE OF okc_k_lines_b.line_number%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_chr_id_type IS TABLE OF okc_k_lines_b.chr_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_cle_id_type IS TABLE OF okc_k_lines_b.cle_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_cle_id_renewed_type IS TABLE OF okc_k_lines_b.cle_id_renewed%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dnz_chr_id_type IS TABLE OF okc_k_lines_b.dnz_chr_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_display_sequence_type IS TABLE OF okc_k_lines_b.display_sequence%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_sts_code_type IS TABLE OF okc_k_lines_b.sts_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_trn_code_type IS TABLE OF okc_k_lines_b.trn_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_lse_id_type IS TABLE OF okc_k_lines_b.lse_id%TYPE INDEX BY BINARY_INTEGER;
    --avsingh: Bug 5710213: start
    TYPE l_lty_code_type IS TABLE OF okc_line_styles_b.lty_code%TYPE INDEX BY BINARY_INTEGER;
    --avsingh: Bug 5710213: end
    TYPE l_exception_yn_type IS TABLE OF okc_k_lines_b.exception_yn%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_object_version_number_type IS TABLE OF okc_k_lines_b.object_version_number%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_created_by_type IS TABLE OF okc_k_lines_b.created_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_creation_date_type IS TABLE OF okc_k_lines_b.creation_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_last_updated_by_type IS TABLE OF okc_k_lines_b.last_updated_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_last_update_date_type IS TABLE OF okc_k_lines_b.last_update_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_hidden_ind_type IS TABLE OF okc_k_lines_b.hidden_ind%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_price_negotiated_type IS TABLE OF okc_k_lines_b.price_negotiated%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_price_level_ind_type IS TABLE OF okc_k_lines_b.price_level_ind%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_price_unit_type IS TABLE OF okc_k_lines_b.price_unit%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_price_unit_percent_type IS TABLE OF okc_k_lines_b.price_unit_percent%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_invoice_line_level_ind_type IS TABLE OF okc_k_lines_b.invoice_line_level_ind%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dpas_rating_type IS TABLE OF okc_k_lines_b.dpas_rating%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_template_used_type IS TABLE OF okc_k_lines_b.template_used%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_price_type_type IS TABLE OF okc_k_lines_b.price_type%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_currency_code_type IS TABLE OF okc_k_lines_b.currency_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_last_update_login_type IS TABLE OF okc_k_lines_b.last_update_login%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_date_terminated_type IS TABLE OF okc_k_lines_b.date_terminated%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_start_date_type IS TABLE OF okc_k_lines_b.start_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_end_date_type IS TABLE OF okc_k_lines_b.end_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute_category_type IS TABLE OF okc_k_lines_b.attribute_category%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute1_type IS TABLE OF okc_k_lines_b.attribute1%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute2_type IS TABLE OF okc_k_lines_b.attribute2%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute3_type IS TABLE OF okc_k_lines_b.attribute3%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute4_type IS TABLE OF okc_k_lines_b.attribute4%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute5_type IS TABLE OF okc_k_lines_b.attribute5%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute6_type IS TABLE OF okc_k_lines_b.attribute6%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute7_type IS TABLE OF okc_k_lines_b.attribute7%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute8_type IS TABLE OF okc_k_lines_b.attribute8%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute9_type IS TABLE OF okc_k_lines_b.attribute9%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute10_type IS TABLE OF okc_k_lines_b.attribute10%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute11_type IS TABLE OF okc_k_lines_b.attribute11%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute12_type IS TABLE OF okc_k_lines_b.attribute12%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute13_type IS TABLE OF okc_k_lines_b.attribute13%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute14_type IS TABLE OF okc_k_lines_b.attribute14%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute15_type IS TABLE OF okc_k_lines_b.attribute15%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_security_group_id_type IS TABLE OF okc_k_lines_b.security_group_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_cle_id_renewed_to_type IS TABLE OF okc_k_lines_b.cle_id_renewed_to%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_price_negotiated_renewed_typ IS TABLE OF okc_k_lines_b.price_negotiated_renewed%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_currency_code_renewed_type IS TABLE OF okc_k_lines_b.currency_code_renewed%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_upg_orig_system_ref_type IS TABLE OF okc_k_lines_b.upg_orig_system_ref%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_upg_orig_system_ref_id_type IS TABLE OF okc_k_lines_b.upg_orig_system_ref_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_date_renewed_type IS TABLE OF okc_k_lines_b.date_renewed%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_orig_system_source_code_type IS TABLE OF okc_k_lines_b.orig_system_source_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_orig_system_id1_type IS TABLE OF okc_k_lines_b.orig_system_id1%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_orig_system_reference1_type IS TABLE OF okc_k_lines_b.orig_system_reference1%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_program_application_id_type IS TABLE OF okc_k_lines_b.program_application_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_program_id_type IS TABLE OF okc_k_lines_b.program_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_program_update_date_type IS TABLE OF okc_k_lines_b.program_update_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_request_id_type IS TABLE OF okc_k_lines_b.request_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_price_list_id_type IS TABLE OF okc_k_lines_b.price_list_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_price_list_line_id_type IS TABLE OF okc_k_lines_b.price_list_line_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_line_list_price_type IS TABLE OF okc_k_lines_b.line_list_price%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_item_to_price_yn_type IS TABLE OF okc_k_lines_b.item_to_price_yn%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_pricing_date_type IS TABLE OF okc_k_lines_b.pricing_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_price_basis_yn_type IS TABLE OF okc_k_lines_b.price_basis_yn%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_config_header_id_type IS TABLE OF okc_k_lines_b.config_header_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_config_revision_number_type IS TABLE OF okc_k_lines_b.config_revision_number%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_config_complete_yn_type IS TABLE OF okc_k_lines_b.config_complete_yn%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_config_valid_yn_type IS TABLE OF okc_k_lines_b.config_valid_yn%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_config_top_model_line_id_typ IS TABLE OF okc_k_lines_b.config_top_model_line_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_config_item_type_type IS TABLE OF okc_k_lines_b.config_item_type%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_config_item_id_type IS TABLE OF okc_k_lines_b.config_item_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_service_item_yn_type IS TABLE OF okc_k_lines_b.service_item_yn%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ph_pricing_type_type IS TABLE OF okc_k_lines_b.ph_pricing_type%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ph_price_break_basis_type IS TABLE OF okc_k_lines_b.ph_price_break_basis%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ph_min_qty_type IS TABLE OF okc_k_lines_b.ph_min_qty%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ph_min_amt_type IS TABLE OF okc_k_lines_b.ph_min_amt%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ph_qp_reference_id_type IS TABLE OF okc_k_lines_b.ph_qp_reference_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ph_value_type IS TABLE OF okc_k_lines_b.ph_value%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ph_enforce_price_list_yn_typ IS TABLE OF okc_k_lines_b.ph_enforce_price_list_yn%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ph_adjustment_type IS TABLE OF okc_k_lines_b.ph_adjustment%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ph_integrated_with_qp_type IS TABLE OF okc_k_lines_b.ph_integrated_with_qp%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_cust_acct_id_type IS TABLE OF okc_k_lines_b.cust_acct_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_bill_to_site_use_id_type IS TABLE OF okc_k_lines_b.bill_to_site_use_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_inv_rule_id_type IS TABLE OF okc_k_lines_b.inv_rule_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_line_renewal_type_code_type IS TABLE OF okc_k_lines_b.line_renewal_type_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ship_to_site_use_id_type IS TABLE OF okc_k_lines_b.ship_to_site_use_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_payment_term_id_type IS TABLE OF okc_k_lines_b.payment_term_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_fee_type_type IS TABLE OF okl_k_lines.fee_type%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_name_type IS TABLE OF okc_k_lines_tl.name%TYPE INDEX BY BINARY_INTEGER;

    -- For okl_k_lines whole record
    TYPE l_okl_k_lines_rec_type IS RECORD (
      --id okl_k_lines.id%type := OKC_API.G_MISS_NUM,
      id NUMBER := OKC_API.G_MISS_NUM,
      oec okl_k_lines.oec%TYPE,
      year_built okl_k_lines.year_built%TYPE,
      item_description okc_k_lines_tl.item_description%TYPE := OKC_API.G_MISS_CHAR
    );
    /*
    TYPE lines_rec_type is record (
      id okl_k_lines.id%type := OKC_API.G_MISS_NUM,
      oec okl_k_lines.oec%type
    );
    TYPE lines_tbl_type is TABLE OF lines_rec_type
                index by binary_integer; */

    TYPE l_okl_k_lines_rec_tab IS TABLE OF l_okl_k_lines_rec_type
                INDEX BY BINARY_INTEGER;
    -- For okl_k_lines whole record

    -- For okc_k_items whole record
    TYPE l_okc_k_items_rec_type IS RECORD (
      id okc_k_items.cle_id%TYPE := OKC_API.G_MISS_NUM,
      number_of_items okc_k_items.number_of_items%TYPE := OKC_API.G_MISS_NUM,
      object1_id1 okc_k_items.object1_id1%TYPE := OKC_API.G_MISS_CHAR,
      object1_id2 okc_k_items.object1_id2%TYPE := OKC_API.G_MISS_CHAR
    );
    TYPE l_okc_k_items_rec_tab IS TABLE OF l_okc_k_items_rec_type INDEX BY BINARY_INTEGER;
    -- For okc_k_items whole record


    TYPE l_bid_mapping_type IS RECORD (old_id okc_k_lines_b.id%TYPE := OKC_API.G_MISS_NUM, new_id okc_k_lines_tl.name%TYPE := OKC_API.G_MISS_CHAR);
    TYPE l_cle_lse_mapping_type IS RECORD (cle_id okc_k_lines_b.id%TYPE := OKC_API.G_MISS_NUM, lse_id NUMBER := OKC_API.G_MISS_NUM, id okc_k_lines_b.id%TYPE := OKC_API.G_MISS_NUM);
    TYPE l_ssid_mapping_type IS RECORD (cle_id okc_k_lines_b.id%TYPE := OKC_API.G_MISS_NUM, object1_id1 okc_k_rel_objs_v.object1_id1%TYPE := OKC_API.G_MISS_CHAR);
    TYPE l_sid_mapping_type IS RECORD (id okc_k_lines_b.id%TYPE := OKC_API.G_MISS_NUM, lse_id okc_k_lines_b.lse_id%TYPE := OKC_API.G_MISS_NUM);
    TYPE l_tid_mapping_type IS RECORD (rgd_code okc_rule_groups_b.rgd_code%TYPE := OKC_API.G_MISS_CHAR, id okc_rule_groups_b.id%TYPE := OKC_API.G_MISS_NUM);
    TYPE l_vid_mapping_type IS RECORD (cle_id okc_k_party_roles_b.cle_id%TYPE := OKC_API.G_MISS_NUM, object1_id1 okc_k_party_roles_b.object1_id1%TYPE := OKC_API.G_MISS_CHAR);
    TYPE l_dbid_mapping_type IS RECORD (tal_id okl_txl_assets_b.id%TYPE := OKC_API.G_MISS_NUM, kle_id okl_txl_assets_b.kle_id%TYPE := OKC_API.G_MISS_NUM);
    TYPE l_osid_mapping_type IS RECORD (id okl_k_lines.id%TYPE := OKC_API.G_MISS_NUM, subsidy_id okl_k_lines.subsidy_id%TYPE := OKC_API.G_MISS_NUM);
    TYPE l_cid_mapping_type IS RECORD (old_id okc_k_lines_b.id%TYPE := OKC_API.G_MISS_NUM, new_id okc_k_lines_b.cle_id%TYPE := OKC_API.G_MISS_NUM);
    TYPE l_rid_mapping_type IS RECORD (old_id okc_rule_groups_b.id%TYPE := OKC_API.G_MISS_NUM, new_id okc_rule_groups_b.id%TYPE := OKC_API.G_MISS_NUM);
    TYPE l_id_mapping_type IS RECORD (old_id okc_k_lines_b.id%TYPE := OKC_API.G_MISS_NUM, new_id okc_k_lines_b.id%TYPE := OKC_API.G_MISS_NUM);
    TYPE l_orig_system_rec_type IS RECORD (orig_system_id1 okc_k_lines_b.orig_system_id1%TYPE := OKC_API.G_MISS_NUM, id okc_k_lines_b.id%TYPE := OKC_API.G_MISS_NUM);
    TYPE l_rrid_mapping_type IS RECORD (old_id okc_rules_b.id%TYPE := OKC_API.G_MISS_NUM, new_id okc_rules_b.id%TYPE := OKC_API.G_MISS_NUM);
    TYPE l_aid_mapping_type IS RECORD (old_id okc_k_lines_tl.name%TYPE := OKC_API.G_MISS_CHAR, new_id okc_k_lines_tl.name%TYPE := OKC_API.G_MISS_CHAR);
    TYPE l_oid_mapping_type IS RECORD (cle_id okc_k_items.cle_id%TYPE := OKC_API.G_MISS_NUM, object1_id1 okc_k_items.object1_id1%TYPE := OKC_API.G_MISS_CHAR);
    TYPE l_cle_mapping_type IS RECORD (old_id okc_k_lines_b.id%TYPE := OKC_API.G_MISS_NUM, new_id okl_trx_assets.id%TYPE := OKC_API.G_MISS_NUM, line_number NUMBER := OKC_API.G_MISS_NUM);
    TYPE l_cle_mapping_type2 IS RECORD (old_id okc_k_lines_b.id%TYPE := OKC_API.G_MISS_NUM, new_id okl_trx_assets.id%TYPE := OKC_API.G_MISS_NUM);

    TYPE l_bid_mapping_tab_type IS TABLE OF l_bid_mapping_type INDEX BY BINARY_INTEGER;
    TYPE l_cle_lse_mapping_tab_type IS TABLE OF l_cle_lse_mapping_type INDEX BY BINARY_INTEGER;
    TYPE l_ssid_mapping_tab_type IS TABLE OF l_ssid_mapping_type INDEX BY BINARY_INTEGER;
    TYPE l_sid_mapping_tab_type IS TABLE OF l_sid_mapping_type INDEX BY BINARY_INTEGER;
    TYPE l_tid_mapping_tab_type IS TABLE OF l_tid_mapping_type INDEX BY BINARY_INTEGER;
    TYPE l_vid_mapping_tab_type IS TABLE OF l_vid_mapping_type INDEX BY BINARY_INTEGER;
    TYPE l_dbid_mapping_tab_type IS TABLE OF l_dbid_mapping_type INDEX BY BINARY_INTEGER;
    TYPE l_osid_mapping_tab_type IS TABLE OF l_osid_mapping_type INDEX BY BINARY_INTEGER;
    TYPE l_cid_mapping_tab_type IS TABLE OF l_cid_mapping_type INDEX BY BINARY_INTEGER;
    TYPE l_rid_mapping_tab_type IS TABLE OF l_rid_mapping_type INDEX BY BINARY_INTEGER;
    TYPE l_id_mapping_tab_type IS TABLE OF l_id_mapping_type INDEX BY BINARY_INTEGER;
    TYPE l_orig_system_tab_type IS TABLE OF l_orig_system_rec_type INDEX BY BINARY_INTEGER;
    TYPE l_rrid_mapping_tab_type IS TABLE OF l_rrid_mapping_type INDEX BY BINARY_INTEGER;
    TYPE l_aid_mapping_tab_type IS TABLE OF l_aid_mapping_type INDEX BY BINARY_INTEGER;
    TYPE l_oid_mapping_tab_type IS TABLE OF l_oid_mapping_type INDEX BY BINARY_INTEGER;
    TYPE l_cle_mapping_tab_type IS TABLE OF l_cle_mapping_type INDEX BY BINARY_INTEGER;
    TYPE l_cle_mapping_tab_type2 IS TABLE OF l_cle_mapping_type2 INDEX BY BINARY_INTEGER;

    TYPE l_party_id_mapping_type IS RECORD (old_id okc_k_party_roles_b.id%TYPE := OKC_API.G_MISS_NUM, new_id okc_k_party_roles_b.id%TYPE := OKC_API.G_MISS_NUM);
    TYPE l_party_id_mapping_tab_type IS TABLE OF l_party_id_mapping_type INDEX BY BINARY_INTEGER;

    TYPE l_trx_id_mapping_type IS RECORD (old_id okl_trx_assets.id%TYPE := OKC_API.G_MISS_NUM, new_id okl_trx_assets.id%TYPE := OKC_API.G_MISS_NUM);
    TYPE l_trx_id_mapping_tab_type IS TABLE OF l_trx_id_mapping_type INDEX BY BINARY_INTEGER;

    TYPE l_txl_id_mapping_type IS RECORD (old_id okl_txl_assets_b.id%TYPE := OKC_API.G_MISS_NUM, new_id okl_txl_assets_b.id%TYPE := OKC_API.G_MISS_NUM);
    TYPE l_txl_id_mapping_tab_type IS TABLE OF l_txl_id_mapping_type INDEX BY BINARY_INTEGER;

    -- For okl_k_party_roles begin
    TYPE l_plid_type is table of okl_k_party_roles.id%TYPE index by binary_integer;
    TYPE l_plobject_version_number_type is table of okl_k_party_roles.object_version_number%TYPE index by binary_integer;
    TYPE l_plattribute_category_type is table of okl_k_party_roles.attribute_category%TYPE index by binary_integer;
    TYPE l_plattribute1_type is table of okl_k_party_roles.attribute1%TYPE index by binary_integer;
    TYPE l_plattribute2_type is table of okl_k_party_roles.attribute2%TYPE index by binary_integer;
    TYPE l_plattribute3_type is table of okl_k_party_roles.attribute3%TYPE index by binary_integer;
    TYPE l_plattribute4_type is table of okl_k_party_roles.attribute4%TYPE index by binary_integer;
    TYPE l_plattribute5_type is table of okl_k_party_roles.attribute5%TYPE index by binary_integer;
    TYPE l_plattribute6_type is table of okl_k_party_roles.attribute6%TYPE index by binary_integer;
    TYPE l_plattribute7_type is table of okl_k_party_roles.attribute7%TYPE index by binary_integer;
    TYPE l_plattribute8_type is table of okl_k_party_roles.attribute8%TYPE index by binary_integer;
    TYPE l_plattribute9_type is table of okl_k_party_roles.attribute9%TYPE index by binary_integer;
    TYPE l_plattribute10_type is table of okl_k_party_roles.attribute10%TYPE index by binary_integer;
    TYPE l_plattribute11_type is table of okl_k_party_roles.attribute11%TYPE index by binary_integer;
    TYPE l_plattribute12_type is table of okl_k_party_roles.attribute12%TYPE index by binary_integer;
    TYPE l_plattribute13_type is table of okl_k_party_roles.attribute13%TYPE index by binary_integer;
    TYPE l_plattribute14_type is table of okl_k_party_roles.attribute14%TYPE index by binary_integer;
    TYPE l_plattribute15_type is table of okl_k_party_roles.attribute15%TYPE index by binary_integer;
    -- For okl_k_party_roles end

    -- For party_roles_tl Begin
    TYPE l_pid_type IS TABLE OF okc_k_party_roles_tl.id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_planguage_type IS TABLE OF okc_k_party_roles_tl.LANGUAGE%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_psource_lang_type IS TABLE OF okc_k_party_roles_tl.source_lang%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_psfwt_flag_type IS TABLE OF okc_k_party_roles_tl.sfwt_flag%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_pcreated_by_type IS TABLE OF okc_k_party_roles_tl.created_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_pcreation_date_type IS TABLE OF okc_k_party_roles_tl.creation_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_plast_updated_by_type IS TABLE OF okc_k_party_roles_tl.last_updated_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_plast_update_date_type IS TABLE OF okc_k_party_roles_tl.last_update_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_pcognomen_type IS TABLE OF okc_k_party_roles_tl.cognomen%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_palias_type IS TABLE OF okc_k_party_roles_tl.alias%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_plast_update_login_type IS TABLE OF okc_k_party_roles_tl.last_update_login%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_psecurity_group_id_type IS TABLE OF okc_k_party_roles_tl.security_group_id%TYPE INDEX BY BINARY_INTEGER;
    -- For party_roles_tl End

    -- For okl_supp_invoice_dtls Begin
    TYPE l_osid_type IS TABLE OF okl_supp_invoice_dtls.id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_osobject_version_number_type IS TABLE OF okl_supp_invoice_dtls.object_version_number%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_oscle_id_type IS TABLE OF okl_supp_invoice_dtls.cle_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_osfa_cle_id_type IS TABLE OF okl_supp_invoice_dtls.fa_cle_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_osinvoice_number_type IS TABLE OF okl_supp_invoice_dtls.invoice_number%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_osdate_invoiced_type IS TABLE OF okl_supp_invoice_dtls.date_invoiced%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_osdate_due_type IS TABLE OF okl_supp_invoice_dtls.date_due%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_osshipping_address_id1_type IS TABLE OF okl_supp_invoice_dtls.shipping_address_id1%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_osshipping_address_id2_type IS TABLE OF okl_supp_invoice_dtls.shipping_address_id2%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_osshipping_address_code_type IS TABLE OF okl_supp_invoice_dtls.shipping_address_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_osattribute_category_type IS TABLE OF okl_supp_invoice_dtls.attribute_category%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_osattribute1_type IS TABLE OF okl_supp_invoice_dtls.attribute1%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_osattribute2_type IS TABLE OF okl_supp_invoice_dtls.attribute2%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_osattribute3_type IS TABLE OF okl_supp_invoice_dtls.attribute3%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_osattribute4_type IS TABLE OF okl_supp_invoice_dtls.attribute4%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_osattribute5_type IS TABLE OF okl_supp_invoice_dtls.attribute5%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_osattribute6_type IS TABLE OF okl_supp_invoice_dtls.attribute6%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_osattribute7_type IS TABLE OF okl_supp_invoice_dtls.attribute7%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_osattribute8_type IS TABLE OF okl_supp_invoice_dtls.attribute8%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_osattribute9_type IS TABLE OF okl_supp_invoice_dtls.attribute9%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_osattribute10_type IS TABLE OF okl_supp_invoice_dtls.attribute10%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_osattribute11_type IS TABLE OF okl_supp_invoice_dtls.attribute11%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_osattribute12_type IS TABLE OF okl_supp_invoice_dtls.attribute12%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_osattribute13_type IS TABLE OF okl_supp_invoice_dtls.attribute13%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_osattribute14_type IS TABLE OF okl_supp_invoice_dtls.attribute14%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_osattribute15_type IS TABLE OF okl_supp_invoice_dtls.attribute15%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_oscreated_by_type IS TABLE OF okl_supp_invoice_dtls.created_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_oscreation_date_type IS TABLE OF okl_supp_invoice_dtls.creation_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_oslast_updated_by_type IS TABLE OF okl_supp_invoice_dtls.last_updated_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_oslast_update_date_type IS TABLE OF okl_supp_invoice_dtls.last_update_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_oslast_update_login_type IS TABLE OF okl_supp_invoice_dtls.last_update_login%TYPE INDEX BY BINARY_INTEGER;
    -- For okl_supp_invoice_dtls End

    TYPE l_misc_object1_id1 IS TABLE OF VARCHAR2(40) INDEX BY BINARY_INTEGER;
    -- For okc_contacts Begin

    TYPE l_cid_type IS TABLE OF okc_contacts.id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ccpl_id_type IS TABLE OF okc_contacts.cpl_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ccro_code_type IS TABLE OF okc_contacts.cro_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_cdnz_chr_id_type IS TABLE OF okc_contacts.dnz_chr_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_cobject1_id1_type IS TABLE OF okc_contacts.object1_id1%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_cobject1_id2_type IS TABLE OF okc_contacts.object1_id2%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_cjtot_object1_code_type IS TABLE OF okc_contacts.jtot_object1_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_cobject_version_number_type IS TABLE OF okc_contacts.object_version_number%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ccreated_by_type IS TABLE OF okc_contacts.created_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ccreation_date_type IS TABLE OF okc_contacts.creation_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_clast_updated_by_type IS TABLE OF okc_contacts.last_updated_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_clast_update_date_type IS TABLE OF okc_contacts.last_update_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ccontact_sequence_type IS TABLE OF okc_contacts.contact_sequence%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_clast_update_login_type IS TABLE OF okc_contacts.last_update_login%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_cattribute_category_type IS TABLE OF okc_contacts.attribute_category%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_cattribute1_type IS TABLE OF okc_contacts.attribute1%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_cattribute2_type IS TABLE OF okc_contacts.attribute2%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_cattribute3_type IS TABLE OF okc_contacts.attribute3%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_cattribute4_type IS TABLE OF okc_contacts.attribute4%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_cattribute5_type IS TABLE OF okc_contacts.attribute5%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_cattribute6_type IS TABLE OF okc_contacts.attribute6%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_cattribute7_type IS TABLE OF okc_contacts.attribute7%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_cattribute8_type IS TABLE OF okc_contacts.attribute8%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_cattribute9_type IS TABLE OF okc_contacts.attribute9%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_cattribute10_type IS TABLE OF okc_contacts.attribute10%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_cattribute11_type IS TABLE OF okc_contacts.attribute11%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_cattribute12_type IS TABLE OF okc_contacts.attribute12%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_cattribute13_type IS TABLE OF okc_contacts.attribute13%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_cattribute14_type IS TABLE OF okc_contacts.attribute14%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_cattribute15_type IS TABLE OF okc_contacts.attribute15%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_csecurity_group_id_type IS TABLE OF okc_contacts.security_group_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_cstart_date_type IS TABLE OF okc_contacts.start_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_cend_date_type IS TABLE OF okc_contacts.end_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_cprimary_yn_type IS TABLE OF okc_contacts.primary_yn%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_cresource_class_type IS TABLE OF okc_contacts.resource_class%TYPE INDEX BY BINARY_INTEGER;

    -- For okc_contacts End

    -- For okc_rule_groups_b Begin

    TYPE l_rid_type IS TABLE OF okc_rule_groups_b.id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrgd_code_type IS TABLE OF okc_rule_groups_b.rgd_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rchr_id_type IS TABLE OF okc_rule_groups_b.chr_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rcle_id_type IS TABLE OF okc_rule_groups_b.cle_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rdnz_chr_id_type IS TABLE OF okc_rule_groups_b.dnz_chr_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rparent_rgp_id_type IS TABLE OF okc_rule_groups_b.parent_rgp_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rsat_code_type IS TABLE OF okc_rule_groups_b.sat_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_robject_version_number_type IS TABLE OF okc_rule_groups_b.object_version_number%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrgp_type_type IS TABLE OF okc_rule_groups_b.rgp_type%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rcreated_by_type IS TABLE OF okc_rule_groups_b.created_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rcreation_date_type IS TABLE OF okc_rule_groups_b.creation_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rlast_updated_by_type IS TABLE OF okc_rule_groups_b.last_updated_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rlast_update_date_type IS TABLE OF okc_rule_groups_b.last_update_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rlast_update_login_type IS TABLE OF okc_rule_groups_b.last_update_login%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rattribute_category_type IS TABLE OF okc_rule_groups_b.attribute_category%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rattribute1_type IS TABLE OF okc_rule_groups_b.attribute1%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rattribute2_type IS TABLE OF okc_rule_groups_b.attribute2%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rattribute3_type IS TABLE OF okc_rule_groups_b.attribute3%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rattribute4_type IS TABLE OF okc_rule_groups_b.attribute4%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rattribute5_type IS TABLE OF okc_rule_groups_b.attribute5%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rattribute6_type IS TABLE OF okc_rule_groups_b.attribute6%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rattribute7_type IS TABLE OF okc_rule_groups_b.attribute7%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rattribute8_type IS TABLE OF okc_rule_groups_b.attribute8%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rattribute9_type IS TABLE OF okc_rule_groups_b.attribute9%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rattribute10_type IS TABLE OF okc_rule_groups_b.attribute10%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rattribute11_type IS TABLE OF okc_rule_groups_b.attribute11%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rattribute12_type IS TABLE OF okc_rule_groups_b.attribute12%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rattribute13_type IS TABLE OF okc_rule_groups_b.attribute13%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rattribute14_type IS TABLE OF okc_rule_groups_b.attribute14%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rattribute15_type IS TABLE OF okc_rule_groups_b.attribute15%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rsecurity_group_id_type IS TABLE OF okc_rule_groups_b.security_group_id%TYPE INDEX BY BINARY_INTEGER;

    -- For okc_rule_groups_b End

    -- For okc_rule_groups_tl Begin
    TYPE l_rtid_type IS TABLE OF okc_rule_groups_tl.id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rtlanguage_type IS TABLE OF okc_rule_groups_tl.LANGUAGE%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rtsource_lang_type IS TABLE OF okc_rule_groups_tl.source_lang%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rtsfwt_flag_type IS TABLE OF okc_rule_groups_tl.sfwt_flag%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rtcomments_type IS TABLE OF okc_rule_groups_tl.comments%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rtcreated_by_type IS TABLE OF okc_rule_groups_tl.created_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rtcreation_date_type IS TABLE OF okc_rule_groups_tl.creation_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rtlast_updated_by_type IS TABLE OF okc_rule_groups_tl.last_updated_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rtlast_update_date_type IS TABLE OF okc_rule_groups_tl.last_update_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rtlast_update_login_type IS TABLE OF okc_rule_groups_tl.last_update_login%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rtsecurity_group_id_type IS TABLE OF okc_rule_groups_tl.security_group_id%TYPE INDEX BY BINARY_INTEGER;

    -- For okc_rule_groups_tl End

    -- For okc_rules_b Begin
    TYPE l_rrid_type IS TABLE OF okc_rules_b.id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrrgp_id_type IS TABLE OF okc_rules_b.rgp_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrobject1_id1_type IS TABLE OF okc_rules_b.object1_id1%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrobject2_id1_type IS TABLE OF okc_rules_b.object2_id1%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrobject3_id1_type IS TABLE OF okc_rules_b.object3_id1%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrobject1_id2_type IS TABLE OF okc_rules_b.object1_id2%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrobject2_id2_type IS TABLE OF okc_rules_b.object2_id2%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrobject3_id2_type IS TABLE OF okc_rules_b.object3_id2%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrjtot_object1_code_type IS TABLE OF okc_rules_b.jtot_object1_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrjtot_object2_code_type IS TABLE OF okc_rules_b.jtot_object2_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrjtot_object3_code_type IS TABLE OF okc_rules_b.jtot_object3_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrdnz_chr_id_type IS TABLE OF okc_rules_b.dnz_chr_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrstd_template_yn_type IS TABLE OF okc_rules_b.std_template_yn%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrwarn_yn_type IS TABLE OF okc_rules_b.warn_yn%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrpriority_type IS TABLE OF okc_rules_b.priority%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrobject_version_number_type IS TABLE OF okc_rules_b.object_version_number%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrcreated_by_type IS TABLE OF okc_rules_b.created_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrcreation_date_type IS TABLE OF okc_rules_b.creation_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrlast_updated_by_type IS TABLE OF okc_rules_b.last_updated_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrlast_update_date_type IS TABLE OF okc_rules_b.last_update_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrlast_update_login_type IS TABLE OF okc_rules_b.last_update_login%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrattribute_category_type IS TABLE OF okc_rules_b.attribute_category%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrattribute1_type IS TABLE OF okc_rules_b.attribute1%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrattribute2_type IS TABLE OF okc_rules_b.attribute2%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrattribute3_type IS TABLE OF okc_rules_b.attribute3%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrattribute4_type IS TABLE OF okc_rules_b.attribute4%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrattribute5_type IS TABLE OF okc_rules_b.attribute5%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrattribute6_type IS TABLE OF okc_rules_b.attribute6%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrattribute7_type IS TABLE OF okc_rules_b.attribute7%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrattribute8_type IS TABLE OF okc_rules_b.attribute8%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrattribute9_type IS TABLE OF okc_rules_b.attribute9%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrattribute10_type IS TABLE OF okc_rules_b.attribute10%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrattribute11_type IS TABLE OF okc_rules_b.attribute11%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrattribute12_type IS TABLE OF okc_rules_b.attribute12%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrattribute13_type IS TABLE OF okc_rules_b.attribute13%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrattribute14_type IS TABLE OF okc_rules_b.attribute14%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrattribute15_type IS TABLE OF okc_rules_b.attribute15%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrrule_information_cate_type IS TABLE OF okc_rules_b.rule_information_category%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrrule_information1_type IS TABLE OF okc_rules_b.rule_information1%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrrule_information2_type IS TABLE OF okc_rules_b.rule_information2%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrrule_information3_type IS TABLE OF okc_rules_b.rule_information3%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrrule_information4_type IS TABLE OF okc_rules_b.rule_information4%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrrule_information5_type IS TABLE OF okc_rules_b.rule_information5%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrrule_information6_type IS TABLE OF okc_rules_b.rule_information6%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrrule_information7_type IS TABLE OF okc_rules_b.rule_information7%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrrule_information8_type IS TABLE OF okc_rules_b.rule_information8%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrrule_information9_type IS TABLE OF okc_rules_b.rule_information9%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrrule_information10_type IS TABLE OF okc_rules_b.rule_information10%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrrule_information11_type IS TABLE OF okc_rules_b.rule_information11%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrrule_information12_type IS TABLE OF okc_rules_b.rule_information12%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrrule_information13_type IS TABLE OF okc_rules_b.rule_information13%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrrule_information14_type IS TABLE OF okc_rules_b.rule_information14%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrrule_information15_type IS TABLE OF okc_rules_b.rule_information15%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrsecurity_group_id_type IS TABLE OF okc_rules_b.security_group_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrtemplate_yn_type IS TABLE OF okc_rules_b.template_yn%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrans_set_jtot_object_c_type IS TABLE OF okc_rules_b.ans_set_jtot_object_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrans_set_jtot_object_1_type IS TABLE OF okc_rules_b.ans_set_jtot_object_id1%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrans_set_jtot_object_2_type IS TABLE OF okc_rules_b.ans_set_jtot_object_id2%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrdisplay_sequence_type IS TABLE OF okc_rules_b.display_sequence%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rrcomments_type IS TABLE OF okc_rules_b.comments%TYPE INDEX BY BINARY_INTEGER;

    -- For okc_rules_b End

    -- For okc_rules_tl Begin

    TYPE l_trid_type IS TABLE OF okc_rules_tl.id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_trlanguage_type IS TABLE OF okc_rules_tl.LANGUAGE%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_trsource_lang_type IS TABLE OF okc_rules_tl.source_lang%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_trsfwt_flag_type IS TABLE OF okc_rules_tl.sfwt_flag%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_trcomments_type IS TABLE OF okc_rules_tl.comments%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_trtext_type IS TABLE OF okc_rules_tl.text%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_trcreated_by_type IS TABLE OF okc_rules_tl.created_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_trcreation_date_type IS TABLE OF okc_rules_tl.creation_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_trlast_updated_by_type IS TABLE OF okc_rules_tl.last_updated_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_trlast_update_date_type IS TABLE OF okc_rules_tl.last_update_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_trlast_update_login_type IS TABLE OF okc_rules_tl.last_update_login%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_trsecurity_group_id_type IS TABLE OF okc_rules_tl.security_group_id%TYPE INDEX BY BINARY_INTEGER;

    -- For okc_rules_tl End

    -- For okc_k_items Begin

    TYPE l_iid_type IS TABLE OF okc_k_items.id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_icle_id_type IS TABLE OF okc_k_items.cle_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ichr_id_type IS TABLE OF okc_k_items.chr_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_icle_id_for_type IS TABLE OF okc_k_items.cle_id_for%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_idnz_chr_id_type IS TABLE OF okc_k_items.dnz_chr_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_iobject1_id1_type IS TABLE OF okc_k_items.object1_id1%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_iobject1_id2_type IS TABLE OF okc_k_items.object1_id2%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ijtot_object1_code_type IS TABLE OF okc_k_items.jtot_object1_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_iuom_code_type IS TABLE OF okc_k_items.uom_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_iexception_yn_type IS TABLE OF okc_k_items.exception_yn%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_inumber_of_items_type IS TABLE OF okc_k_items.number_of_items%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ipriced_item_yn_type IS TABLE OF okc_k_items.priced_item_yn%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_iobject_version_number_type IS TABLE OF okc_k_items.object_version_number%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_icreated_by_type IS TABLE OF okc_k_items.created_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_icreation_date_type IS TABLE OF okc_k_items.creation_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ilast_updated_by_type IS TABLE OF okc_k_items.last_updated_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ilast_update_date_type IS TABLE OF okc_k_items.last_update_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ilast_update_login_type IS TABLE OF okc_k_items.last_update_login%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_isecurity_group_id_type IS TABLE OF okc_k_items.security_group_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_iupg_orig_system_ref_type IS TABLE OF okc_k_items.upg_orig_system_ref%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_iupg_orig_system_ref_id_type IS TABLE OF okc_k_items.upg_orig_system_ref_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_iprogram_application_id_type IS TABLE OF okc_k_items.program_application_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_iprogram_id_type IS TABLE OF okc_k_items.program_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_iprogram_update_date_type IS TABLE OF okc_k_items.program_update_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_irequest_id_type IS TABLE OF okc_k_items.request_id%TYPE INDEX BY BINARY_INTEGER;

    -- For okc_k_items End

    -- For okl_trx_assets Begin (42)

    TYPE l_tid_type IS TABLE OF okl_trx_assets.id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tica_id_type IS TABLE OF okl_trx_assets.ica_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ttas_type_type IS TABLE OF okl_trx_assets.tas_type%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tobject_version_number_type IS TABLE OF okl_trx_assets.object_version_number%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tattribute_category_type IS TABLE OF okl_trx_assets.attribute_category%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tattribute1_type IS TABLE OF okl_trx_assets.attribute1%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tattribute2_type IS TABLE OF okl_trx_assets.attribute2%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tattribute3_type IS TABLE OF okl_trx_assets.attribute3%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tattribute4_type IS TABLE OF okl_trx_assets.attribute4%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tattribute5_type IS TABLE OF okl_trx_assets.attribute5%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tattribute6_type IS TABLE OF okl_trx_assets.attribute6%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tattribute7_type IS TABLE OF okl_trx_assets.attribute7%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tattribute8_type IS TABLE OF okl_trx_assets.attribute8%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tattribute9_type IS TABLE OF okl_trx_assets.attribute9%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tattribute10_type IS TABLE OF okl_trx_assets.attribute10%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tattribute11_type IS TABLE OF okl_trx_assets.attribute11%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tattribute12_type IS TABLE OF okl_trx_assets.attribute12%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tattribute13_type IS TABLE OF okl_trx_assets.attribute13%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tattribute14_type IS TABLE OF okl_trx_assets.attribute14%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tattribute15_type IS TABLE OF okl_trx_assets.attribute15%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tcreated_by_type IS TABLE OF okl_trx_assets.created_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tcreation_date_type IS TABLE OF okl_trx_assets.creation_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tlast_updated_by_type IS TABLE OF okl_trx_assets.last_updated_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tlast_update_date_type IS TABLE OF okl_trx_assets.last_update_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tlast_update_login_type IS TABLE OF okl_trx_assets.last_update_login%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ttsu_code_type IS TABLE OF okl_trx_assets.tsu_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ttry_id_type IS TABLE OF okl_trx_assets.try_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tdate_trans_occurred_type IS TABLE OF okl_trx_assets.date_trans_occurred%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ttrans_number_type IS TABLE OF okl_trx_assets.trans_number%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tcomments_type IS TABLE OF okl_trx_assets.comments%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_treq_asset_id_type IS TABLE OF okl_trx_assets.req_asset_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ttotal_match_amount_type IS TABLE OF okl_trx_assets.total_match_amount%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_torg_id_type IS TABLE OF okl_trx_assets.org_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tlegal_entity_id_type IS TABLE OF okl_trx_assets.legal_entity_id%TYPE INDEX BY BINARY_INTEGER;

    -- For okl_trx_assets End (42)

    -- For okl_trx_assets Begin (45)
    TYPE l_t2id_type IS TABLE OF okl_trx_assets.id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_t2ica_id_type IS TABLE OF okl_trx_assets.ica_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_t2tas_type_type IS TABLE OF okl_trx_assets.tas_type%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_t2object_version_number_type IS TABLE OF okl_trx_assets.object_version_number%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_t2attribute_category_type IS TABLE OF okl_trx_assets.attribute_category%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_t2attribute1_type IS TABLE OF okl_trx_assets.attribute1%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_t2attribute2_type IS TABLE OF okl_trx_assets.attribute2%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_t2attribute3_type IS TABLE OF okl_trx_assets.attribute3%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_t2attribute4_type IS TABLE OF okl_trx_assets.attribute4%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_t2attribute5_type IS TABLE OF okl_trx_assets.attribute5%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_t2attribute6_type IS TABLE OF okl_trx_assets.attribute6%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_t2attribute7_type IS TABLE OF okl_trx_assets.attribute7%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_t2attribute8_type IS TABLE OF okl_trx_assets.attribute8%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_t2attribute9_type IS TABLE OF okl_trx_assets.attribute9%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_t2attribute10_type IS TABLE OF okl_trx_assets.attribute10%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_t2attribute11_type IS TABLE OF okl_trx_assets.attribute11%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_t2attribute12_type IS TABLE OF okl_trx_assets.attribute12%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_t2attribute13_type IS TABLE OF okl_trx_assets.attribute13%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_t2attribute14_type IS TABLE OF okl_trx_assets.attribute14%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_t2attribute15_type IS TABLE OF okl_trx_assets.attribute15%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_t2created_by_type IS TABLE OF okl_trx_assets.created_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_t2creation_date_type IS TABLE OF okl_trx_assets.creation_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_t2last_updated_by_type IS TABLE OF okl_trx_assets.last_updated_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_t2last_update_date_type IS TABLE OF okl_trx_assets.last_update_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_t2last_update_login_type IS TABLE OF okl_trx_assets.last_update_login%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_t2tsu_code_type IS TABLE OF okl_trx_assets.tsu_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_t2try_id_type IS TABLE OF okl_trx_assets.try_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_t2date_trans_occurred_type IS TABLE OF okl_trx_assets.date_trans_occurred%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_t2trans_number_type IS TABLE OF okl_trx_assets.trans_number%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_t2comments_type IS TABLE OF okl_trx_assets.comments%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_t2req_asset_id_type IS TABLE OF okl_trx_assets.req_asset_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_t2total_match_amount_type IS TABLE OF okl_trx_assets.total_match_amount%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_t2org_id_type IS TABLE OF okl_trx_assets.org_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_t2legal_entity_id_type IS TABLE OF okl_trx_assets.legal_entity_id%TYPE INDEX BY BINARY_INTEGER;

    -- For okl_trx_assets End (45)

    -- For okl_txl_assets_b Begin

    TYPE l_tbid_type IS TABLE OF okl_txl_assets_b.id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbobject_version_number_type IS TABLE OF okl_txl_assets_b.object_version_number%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbtas_id_type IS TABLE OF okl_txl_assets_b.tas_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbilo_id_type IS TABLE OF okl_txl_assets_b.ilo_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbilo_id_old_type IS TABLE OF okl_txl_assets_b.ilo_id_old%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbiay_id_type IS TABLE OF okl_txl_assets_b.iay_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbiay_id_new_type IS TABLE OF okl_txl_assets_b.iay_id_new%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbkle_id_type IS TABLE OF okl_txl_assets_b.kle_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbdnz_khr_id_type IS TABLE OF okl_txl_assets_b.dnz_khr_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbline_number_type IS TABLE OF okl_txl_assets_b.line_number%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tborg_id_type IS TABLE OF okl_txl_assets_b.org_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbtal_type_type IS TABLE OF okl_txl_assets_b.tal_type%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbasset_number_type IS TABLE OF okl_txl_assets_b.asset_number%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbfa_location_id_type IS TABLE OF okl_txl_assets_b.fa_location_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tboriginal_cost_type IS TABLE OF okl_txl_assets_b.original_cost%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbcurrent_units_type IS TABLE OF okl_txl_assets_b.current_units%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbmanufacturer_name_type IS TABLE OF okl_txl_assets_b.manufacturer_name%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbyear_manufactured_type IS TABLE OF okl_txl_assets_b.year_manufactured%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbsupplier_id_type IS TABLE OF okl_txl_assets_b.supplier_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbused_asset_yn_type IS TABLE OF okl_txl_assets_b.used_asset_yn%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbtag_number_type IS TABLE OF okl_txl_assets_b.tag_number%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbmodel_number_type IS TABLE OF okl_txl_assets_b.model_number%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbcorporate_book_type IS TABLE OF okl_txl_assets_b.corporate_book%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbdate_purchased_type IS TABLE OF okl_txl_assets_b.date_purchased%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbdate_delivery_type IS TABLE OF okl_txl_assets_b.date_delivery%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbin_service_date_type IS TABLE OF okl_txl_assets_b.in_service_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tblife_in_months_type IS TABLE OF okl_txl_assets_b.life_in_months%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbdepreciation_id_type IS TABLE OF okl_txl_assets_b.depreciation_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbdepreciation_cost_type IS TABLE OF okl_txl_assets_b.depreciation_cost%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbdeprn_method_type IS TABLE OF okl_txl_assets_b.deprn_method%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbdeprn_rate_type IS TABLE OF okl_txl_assets_b.deprn_rate%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbsalvage_value_type IS TABLE OF okl_txl_assets_b.salvage_value%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbpercent_salvage_value_type IS TABLE OF okl_txl_assets_b.percent_salvage_value%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbattribute_category_type IS TABLE OF okl_txl_assets_b.attribute_category%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbattribute1_type IS TABLE OF okl_txl_assets_b.attribute1%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbattribute2_type IS TABLE OF okl_txl_assets_b.attribute2%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbattribute3_type IS TABLE OF okl_txl_assets_b.attribute3%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbattribute4_type IS TABLE OF okl_txl_assets_b.attribute4%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbattribute5_type IS TABLE OF okl_txl_assets_b.attribute5%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbattribute6_type IS TABLE OF okl_txl_assets_b.attribute6%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbattribute7_type IS TABLE OF okl_txl_assets_b.attribute7%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbattribute8_type IS TABLE OF okl_txl_assets_b.attribute8%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbattribute9_type IS TABLE OF okl_txl_assets_b.attribute9%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbattribute10_type IS TABLE OF okl_txl_assets_b.attribute10%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbattribute11_type IS TABLE OF okl_txl_assets_b.attribute11%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbattribute12_type IS TABLE OF okl_txl_assets_b.attribute12%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbattribute13_type IS TABLE OF okl_txl_assets_b.attribute13%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbattribute14_type IS TABLE OF okl_txl_assets_b.attribute14%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbattribute15_type IS TABLE OF okl_txl_assets_b.attribute15%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbcreated_by_type IS TABLE OF okl_txl_assets_b.created_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbcreation_date_type IS TABLE OF okl_txl_assets_b.creation_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tblast_updated_by_type IS TABLE OF okl_txl_assets_b.last_updated_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tblast_update_date_type IS TABLE OF okl_txl_assets_b.last_update_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tblast_update_login_type IS TABLE OF okl_txl_assets_b.last_update_login%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbdepreciate_yn_type IS TABLE OF okl_txl_assets_b.depreciate_yn%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbhold_period_days_type IS TABLE OF okl_txl_assets_b.hold_period_days%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbold_salvage_value_type IS TABLE OF okl_txl_assets_b.old_salvage_value%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbnew_residual_value_type IS TABLE OF okl_txl_assets_b.new_residual_value%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbold_residual_value_type IS TABLE OF okl_txl_assets_b.old_residual_value%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbunits_retired_type IS TABLE OF okl_txl_assets_b.units_retired%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbcost_retired_type IS TABLE OF okl_txl_assets_b.cost_retired%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbsale_proceeds_type IS TABLE OF okl_txl_assets_b.sale_proceeds%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbremoval_cost_type IS TABLE OF okl_txl_assets_b.removal_cost%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbdnz_asset_id_type IS TABLE OF okl_txl_assets_b.dnz_asset_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbdate_due_type IS TABLE OF okl_txl_assets_b.date_due%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbrep_asset_id_type IS TABLE OF okl_txl_assets_b.rep_asset_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tblke_asset_id_type IS TABLE OF okl_txl_assets_b.lke_asset_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbmatch_amount_type IS TABLE OF okl_txl_assets_b.match_amount%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbsplit_into_singles_fl_type IS TABLE OF okl_txl_assets_b.split_into_singles_flag%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbsplit_into_units_type IS TABLE OF okl_txl_assets_b.split_into_units%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbcurrency_code_type IS TABLE OF okl_txl_assets_b.currency_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbcurrency_convers_type_type IS TABLE OF okl_txl_assets_b.currency_conversion_type%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbcurrency_convers_rate_type IS TABLE OF okl_txl_assets_b.currency_conversion_rate%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbcurrency_convers_date_type IS TABLE OF okl_txl_assets_b.currency_conversion_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbasset_key_id_type IS TABLE OF okl_txl_assets_b.asset_key_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbfa_trx_date_type IS TABLE OF okl_txl_assets_b.fa_trx_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tbfa_cost_type IS TABLE OF okl_txl_assets_b.fa_cost%TYPE INDEX BY BINARY_INTEGER;

    -- For okl_txl_assets_b End


    -- For okl_txl_assets_tl Begin

    TYPE l_tlid_type IS TABLE OF okl_txl_assets_tl.id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tllanguage_type IS TABLE OF okl_txl_assets_tl.LANGUAGE%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tlsource_lang_type IS TABLE OF okl_txl_assets_tl.source_lang%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tlsfwt_flag_type IS TABLE OF okl_txl_assets_tl.sfwt_flag%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tldescription_type IS TABLE OF okl_txl_assets_tl.description%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tlcreated_by_type IS TABLE OF okl_txl_assets_tl.created_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tlcreation_date_type IS TABLE OF okl_txl_assets_tl.creation_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tllast_updated_by_type IS TABLE OF okl_txl_assets_tl.last_updated_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tllast_update_date_type IS TABLE OF okl_txl_assets_tl.last_update_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tllast_update_login_type IS TABLE OF okl_txl_assets_tl.last_update_login%TYPE INDEX BY BINARY_INTEGER;

    -- For okl_txl_assets_tl End

    -- For okl_txd_assets_b Begin

    TYPE l_dbid_type IS TABLE OF okl_txd_assets_b.id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dbobject_version_number_type IS TABLE OF okl_txd_assets_b.object_version_number%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dbtal_id_type IS TABLE OF okl_txd_assets_b.tal_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dbtarget_kle_id_type IS TABLE OF okl_txd_assets_b.target_kle_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dbline_detail_number_type IS TABLE OF okl_txd_assets_b.line_detail_number%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dbasset_number_type IS TABLE OF okl_txd_assets_b.asset_number%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dbquantity_type IS TABLE OF okl_txd_assets_b.quantity%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dbcost_type IS TABLE OF okl_txd_assets_b.cost%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dbtax_book_type IS TABLE OF okl_txd_assets_b.tax_book%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dblife_in_months_tax_type IS TABLE OF okl_txd_assets_b.life_in_months_tax%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dbdeprn_method_tax_type IS TABLE OF okl_txd_assets_b.deprn_method_tax%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dbdeprn_rate_tax_type IS TABLE OF okl_txd_assets_b.deprn_rate_tax%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dbsalvage_value_type IS TABLE OF okl_txd_assets_b.salvage_value%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dbsplit_percent_type IS TABLE OF okl_txd_assets_b.split_percent%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dbinventory_item_id_type IS TABLE OF okl_txd_assets_b.inventory_item_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dbattribute_category_type IS TABLE OF okl_txd_assets_b.attribute_category%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dbattribute1_type IS TABLE OF okl_txd_assets_b.attribute1%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dbattribute2_type IS TABLE OF okl_txd_assets_b.attribute2%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dbattribute3_type IS TABLE OF okl_txd_assets_b.attribute3%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dbattribute4_type IS TABLE OF okl_txd_assets_b.attribute4%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dbattribute5_type IS TABLE OF okl_txd_assets_b.attribute5%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dbattribute6_type IS TABLE OF okl_txd_assets_b.attribute6%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dbattribute7_type IS TABLE OF okl_txd_assets_b.attribute7%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dbattribute8_type IS TABLE OF okl_txd_assets_b.attribute8%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dbattribute9_type IS TABLE OF okl_txd_assets_b.attribute9%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dbattribute10_type IS TABLE OF okl_txd_assets_b.attribute10%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dbattribute11_type IS TABLE OF okl_txd_assets_b.attribute11%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dbattribute12_type IS TABLE OF okl_txd_assets_b.attribute12%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dbattribute13_type IS TABLE OF okl_txd_assets_b.attribute13%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dbattribute14_type IS TABLE OF okl_txd_assets_b.attribute14%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dbattribute15_type IS TABLE OF okl_txd_assets_b.attribute15%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dbcreated_by_type IS TABLE OF okl_txd_assets_b.created_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dbcreation_date_type IS TABLE OF okl_txd_assets_b.creation_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dblast_updated_by_type IS TABLE OF okl_txd_assets_b.last_updated_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dblast_update_date_type IS TABLE OF okl_txd_assets_b.last_update_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dblast_update_login_type IS TABLE OF okl_txd_assets_b.last_update_login%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dbcurrency_code_type IS TABLE OF okl_txd_assets_b.currency_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dbcurrency_convers_type_type IS TABLE OF okl_txd_assets_b.currency_conversion_type%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dbcurrency_convers_rate_type IS TABLE OF okl_txd_assets_b.currency_conversion_rate%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dbcurrency_convers_date_type IS TABLE OF okl_txd_assets_b.currency_conversion_date%TYPE INDEX BY BINARY_INTEGER;

    -- For okl_txd_assets_b End

    -- For okl_txd_assets_tl Begin

    TYPE l_dlid_type IS TABLE OF okl_txd_assets_tl.id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dllanguage_type IS TABLE OF okl_txd_assets_tl.LANGUAGE%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dlsource_lang_type IS TABLE OF okl_txd_assets_tl.source_lang%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dlsfwt_flag_type IS TABLE OF okl_txd_assets_tl.sfwt_flag%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dldescription_type IS TABLE OF okl_txd_assets_tl.description%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dlcreated_by_type IS TABLE OF okl_txd_assets_tl.created_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dlcreation_date_type IS TABLE OF okl_txd_assets_tl.creation_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dllast_updated_by_type IS TABLE OF okl_txd_assets_tl.last_updated_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dllast_update_date_type IS TABLE OF okl_txd_assets_tl.last_update_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dllast_update_login_type IS TABLE OF okl_txd_assets_tl.last_update_login%TYPE INDEX BY BINARY_INTEGER;

    -- For okl_txd_assets_tl End

    -- For okl_txl_itm_insts Begin

    TYPE l_tiid_type IS TABLE OF okl_txl_itm_insts.id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tiobject_version_number_type IS TABLE OF okl_txl_itm_insts.object_version_number%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_titas_id_type IS TABLE OF okl_txl_itm_insts.tas_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tital_id_type IS TABLE OF okl_txl_itm_insts.tal_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tikle_id_type IS TABLE OF okl_txl_itm_insts.kle_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tital_type_type IS TABLE OF okl_txl_itm_insts.tal_type%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tiline_number_type IS TABLE OF okl_txl_itm_insts.line_number%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tiinstance_number_ib_type IS TABLE OF okl_txl_itm_insts.instance_number_ib%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tiobject_id1_new_type IS TABLE OF okl_txl_itm_insts.object_id1_new%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tiobject_id2_new_type IS TABLE OF okl_txl_itm_insts.object_id2_new%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tijtot_object_code_new_type IS TABLE OF okl_txl_itm_insts.jtot_object_code_new%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tiobject_id1_old_type IS TABLE OF okl_txl_itm_insts.object_id1_old%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tiobject_id2_old_type IS TABLE OF okl_txl_itm_insts.object_id2_old%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tijtot_object_code_old_type IS TABLE OF okl_txl_itm_insts.jtot_object_code_old%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tiinventory_org_id_type IS TABLE OF okl_txl_itm_insts.inventory_org_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tiserial_number_type IS TABLE OF okl_txl_itm_insts.serial_number%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_timfg_serial_number_yn_type IS TABLE OF okl_txl_itm_insts.mfg_serial_number_yn%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tiinventory_item_id_type IS TABLE OF okl_txl_itm_insts.inventory_item_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tiinv_master_org_id_type IS TABLE OF okl_txl_itm_insts.inv_master_org_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tiattribute_category_type IS TABLE OF okl_txl_itm_insts.attribute_category%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tiattribute1_type IS TABLE OF okl_txl_itm_insts.attribute1%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tiattribute2_type IS TABLE OF okl_txl_itm_insts.attribute2%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tiattribute3_type IS TABLE OF okl_txl_itm_insts.attribute3%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tiattribute4_type IS TABLE OF okl_txl_itm_insts.attribute4%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tiattribute5_type IS TABLE OF okl_txl_itm_insts.attribute5%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tiattribute6_type IS TABLE OF okl_txl_itm_insts.attribute6%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tiattribute7_type IS TABLE OF okl_txl_itm_insts.attribute7%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tiattribute8_type IS TABLE OF okl_txl_itm_insts.attribute8%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tiattribute9_type IS TABLE OF okl_txl_itm_insts.attribute9%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tiattribute10_type IS TABLE OF okl_txl_itm_insts.attribute10%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tiattribute11_type IS TABLE OF okl_txl_itm_insts.attribute11%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tiattribute12_type IS TABLE OF okl_txl_itm_insts.attribute12%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tiattribute13_type IS TABLE OF okl_txl_itm_insts.attribute13%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tiattribute14_type IS TABLE OF okl_txl_itm_insts.attribute14%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tiattribute15_type IS TABLE OF okl_txl_itm_insts.attribute15%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ticreated_by_type IS TABLE OF okl_txl_itm_insts.created_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ticreation_date_type IS TABLE OF okl_txl_itm_insts.creation_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tilast_updated_by_type IS TABLE OF okl_txl_itm_insts.last_updated_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tilast_update_date_type IS TABLE OF okl_txl_itm_insts.last_update_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tilast_update_login_type IS TABLE OF okl_txl_itm_insts.last_update_login%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tidnz_cle_id_type IS TABLE OF okl_txl_itm_insts.dnz_cle_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tiinstance_id_type IS TABLE OF okl_txl_itm_insts.instance_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tiselected_for_split_fl_type IS TABLE OF okl_txl_itm_insts.selected_for_split_flag%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tiasd_id_type IS TABLE OF okl_txl_itm_insts.asd_id%TYPE INDEX BY BINARY_INTEGER;

    -- For okl_txl_itm_insts End

    -- For okl_party_payment_dtls Begin

    TYPE l_ppid_type IS TABLE OF okl_party_payment_dtls.id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ppobject_version_number_type IS TABLE OF okl_party_payment_dtls.object_version_number%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ppcpl_id_type IS TABLE OF okl_party_payment_dtls.cpl_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ppvendor_id_type IS TABLE OF okl_party_payment_dtls.vendor_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_pppay_site_id_type IS TABLE OF okl_party_payment_dtls.pay_site_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_pppayment_term_id_type IS TABLE OF okl_party_payment_dtls.payment_term_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_pppayment_method_code_type IS TABLE OF okl_party_payment_dtls.payment_method_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_pppay_group_code_type IS TABLE OF okl_party_payment_dtls.pay_group_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ppattribute_category_type IS TABLE OF okl_party_payment_dtls.attribute_category%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ppattribute1_type IS TABLE OF okl_party_payment_dtls.attribute1%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ppattribute2_type IS TABLE OF okl_party_payment_dtls.attribute2%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ppattribute3_type IS TABLE OF okl_party_payment_dtls.attribute3%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ppattribute4_type IS TABLE OF okl_party_payment_dtls.attribute4%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ppattribute5_type IS TABLE OF okl_party_payment_dtls.attribute5%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ppattribute6_type IS TABLE OF okl_party_payment_dtls.attribute6%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ppattribute7_type IS TABLE OF okl_party_payment_dtls.attribute7%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ppattribute8_type IS TABLE OF okl_party_payment_dtls.attribute8%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ppattribute9_type IS TABLE OF okl_party_payment_dtls.attribute9%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ppattribute10_type IS TABLE OF okl_party_payment_dtls.attribute10%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ppattribute11_type IS TABLE OF okl_party_payment_dtls.attribute11%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ppattribute12_type IS TABLE OF okl_party_payment_dtls.attribute12%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ppattribute13_type IS TABLE OF okl_party_payment_dtls.attribute13%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ppattribute14_type IS TABLE OF okl_party_payment_dtls.attribute14%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ppattribute15_type IS TABLE OF okl_party_payment_dtls.attribute15%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ppcreated_by_type IS TABLE OF okl_party_payment_dtls.created_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ppcreation_date_type IS TABLE OF okl_party_payment_dtls.creation_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_pplast_updated_by_type IS TABLE OF okl_party_payment_dtls.last_updated_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_pplast_update_date_type IS TABLE OF okl_party_payment_dtls.last_update_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_pplast_update_login_type IS TABLE OF okl_party_payment_dtls.last_update_login%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_pppayment_hdr_id_type is table of okl_party_payment_dtls.payment_hdr_id%TYPE index by binary_integer;
    TYPE l_pppayment_start_date_type is table of okl_party_payment_dtls.payment_start_date%TYPE index by binary_integer;
    TYPE l_pppayment_frequency_type is table of okl_party_payment_dtls.payment_frequency%TYPE index by binary_integer;
    TYPE l_ppremit_days_type is table of okl_party_payment_dtls.remit_days%TYPE index by binary_integer;
    TYPE l_ppdisbursement_basis_type is table of okl_party_payment_dtls.disbursement_basis%TYPE index by binary_integer;
    TYPE l_ppdisbursement_fixed_am_type is table of okl_party_payment_dtls.disbursement_fixed_amount%TYPE index by binary_integer;
    TYPE l_ppdisbursement_percent_type is table of okl_party_payment_dtls.disbursement_percent%TYPE index by binary_integer;
    TYPE l_ppprocessing_fee_basis_type is table of okl_party_payment_dtls.processing_fee_basis%TYPE index by binary_integer;
    TYPE l_ppprocessing_fee_fixedt_type is table of okl_party_payment_dtls.processing_fee_fixed_amount%TYPE index by binary_integer;
    TYPE l_ppprocessing_fee_percen_type is table of okl_party_payment_dtls.processing_fee_percent%TYPE index by binary_integer;
    TYPE l_pppayment_basis_type is table of okl_party_payment_dtls.payment_basis%TYPE index by binary_integer;

    --sechawla 8677460 21-Jul-09 : ESG PRB Enhancements
    TYPE l_ppORIG_CONTRACT_LINE_ID_type is table of okl_party_payment_dtls.ORIG_CONTRACT_LINE_ID%TYPE index by binary_integer;


    -- For okl_party_payment_dtls End

    -- For okl_slctd_optns Begin

    TYPE l_sid_type IS TABLE OF okl_slctd_optns.id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_spov_id_type IS TABLE OF okl_slctd_optns.pov_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_skhr_id_type IS TABLE OF okl_slctd_optns.khr_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_sobject_version_number_type IS TABLE OF okl_slctd_optns.object_version_number%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_sattribute_category_type IS TABLE OF okl_slctd_optns.attribute_category%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_sattribute1_type IS TABLE OF okl_slctd_optns.attribute1%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_sattribute2_type IS TABLE OF okl_slctd_optns.attribute2%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_sattribute3_type IS TABLE OF okl_slctd_optns.attribute3%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_sattribute4_type IS TABLE OF okl_slctd_optns.attribute4%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_sattribute5_type IS TABLE OF okl_slctd_optns.attribute5%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_sattribute6_type IS TABLE OF okl_slctd_optns.attribute6%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_sattribute7_type IS TABLE OF okl_slctd_optns.attribute7%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_sattribute8_type IS TABLE OF okl_slctd_optns.attribute8%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_sattribute9_type IS TABLE OF okl_slctd_optns.attribute9%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_sattribute10_type IS TABLE OF okl_slctd_optns.attribute10%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_sattribute11_type IS TABLE OF okl_slctd_optns.attribute11%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_sattribute12_type IS TABLE OF okl_slctd_optns.attribute12%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_sattribute13_type IS TABLE OF okl_slctd_optns.attribute13%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_sattribute14_type IS TABLE OF okl_slctd_optns.attribute14%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_sattribute15_type IS TABLE OF okl_slctd_optns.attribute15%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_screated_by_type IS TABLE OF okl_slctd_optns.created_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_screation_date_type IS TABLE OF okl_slctd_optns.creation_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_slast_updated_by_type IS TABLE OF okl_slctd_optns.last_updated_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_slast_update_date_type IS TABLE OF okl_slctd_optns.last_update_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_slast_update_login_type IS TABLE OF okl_slctd_optns.last_update_login%TYPE INDEX BY BINARY_INTEGER;

    -- For okl_slctd_optns End

    -- For okc_rg_party_roles Begin

    TYPE l_gid_type IS TABLE OF okc_rg_party_roles.id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_grgp_id_type IS TABLE OF okc_rg_party_roles.rgp_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_grrd_id_type IS TABLE OF okc_rg_party_roles.rrd_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_gcpl_id_type IS TABLE OF okc_rg_party_roles.cpl_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_gdnz_chr_id_type IS TABLE OF okc_rg_party_roles.dnz_chr_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_gobject_version_number_type IS TABLE OF okc_rg_party_roles.object_version_number%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_gcreated_by_type IS TABLE OF okc_rg_party_roles.created_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_gcreation_date_type IS TABLE OF okc_rg_party_roles.creation_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_glast_updated_by_type IS TABLE OF okc_rg_party_roles.last_updated_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_glast_update_date_type IS TABLE OF okc_rg_party_roles.last_update_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_glast_update_login_type IS TABLE OF okc_rg_party_roles.last_update_login%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_gsecurity_group_id_type IS TABLE OF okc_rg_party_roles.security_group_id%TYPE INDEX BY BINARY_INTEGER;

    -- For okc_rg_party_roles End

    -- For okc_k_lines_tl begin

    TYPE l_olid_type IS TABLE OF okc_k_lines_tl.id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ollanguage_type IS TABLE OF okc_k_lines_tl.LANGUAGE%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_olsource_lang_type IS TABLE OF okc_k_lines_tl.source_lang%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_olsfwt_flag_type IS TABLE OF okc_k_lines_tl.sfwt_flag%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_olname_type IS TABLE OF okc_k_lines_tl.name%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_olcomments_type IS TABLE OF okc_k_lines_tl.comments%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_olitem_description_type IS TABLE OF okc_k_lines_tl.item_description%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_olblock23text_type IS TABLE OF okc_k_lines_tl.block23text%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_olcreated_by_type IS TABLE OF okc_k_lines_tl.created_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_olcreation_date_type IS TABLE OF okc_k_lines_tl.creation_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ollast_updated_by_type IS TABLE OF okc_k_lines_tl.last_updated_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ollast_update_date_type IS TABLE OF okc_k_lines_tl.last_update_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ollast_update_login_type IS TABLE OF okc_k_lines_tl.last_update_login%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_olsecurity_group_id_type IS TABLE OF okc_k_lines_tl.security_group_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_oloke_boe_description_type IS TABLE OF okc_k_lines_tl.oke_boe_description%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_olcognomen_type IS TABLE OF okc_k_lines_tl.cognomen%TYPE INDEX BY BINARY_INTEGER;
    -- For okc_k_lines_tl End

    -- okc_k_party_roles_b Begin
    TYPE l_prid_type IS TABLE OF okc_k_party_roles_b.id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_probject1_id1_type IS TABLE OF okc_k_party_roles_b.object1_id1%TYPE INDEX BY BINARY_INTEGER;
    -- okc_k_party_roles_b End

    -- For okl_supp_invlice_dtls Begin
    l_osid_tab l_osid_type;
    l_osobject_version_number_tab l_osobject_version_number_type;
    l_oscle_id_tab l_oscle_id_type;
    l_osfa_cle_id_tab l_osfa_cle_id_type;
    l_osinvoice_number_tab l_osinvoice_number_type;
    l_osdate_invoiced_tab l_osdate_invoiced_type;
    l_osdate_due_tab l_osdate_due_type;
    l_osshipping_address_id1_tab l_osshipping_address_id1_type;
    l_osshipping_address_id2_tab l_osshipping_address_id2_type;
    l_osshipping_address_code_tab l_osshipping_address_code_type;
    l_osattribute_category_tab l_osattribute_category_type;
    l_osattribute1_tab l_osattribute1_type;
    l_osattribute2_tab l_osattribute2_type;
    l_osattribute3_tab l_osattribute3_type;
    l_osattribute4_tab l_osattribute4_type;
    l_osattribute5_tab l_osattribute5_type;
    l_osattribute6_tab l_osattribute6_type;
    l_osattribute7_tab l_osattribute7_type;
    l_osattribute8_tab l_osattribute8_type;
    l_osattribute9_tab l_osattribute9_type;
    l_osattribute10_tab l_osattribute10_type;
    l_osattribute11_tab l_osattribute11_type;
    l_osattribute12_tab l_osattribute12_type;
    l_osattribute13_tab l_osattribute13_type;
    l_osattribute14_tab l_osattribute14_type;
    l_osattribute15_tab l_osattribute15_type;
    l_oscreated_by_tab l_oscreated_by_type;
    l_oscreation_date_tab l_oscreation_date_type;
    l_oslast_updated_by_tab l_oslast_updated_by_type;
    l_oslast_update_date_tab l_oslast_update_date_type;
    l_oslast_update_login_tab l_oslast_update_login_type;

    l_supp_invoice_dtls_counter NUMBER := 1;

    -- For okl_supp_invlice_dtls End

    -- For okl_k_party_roles Begin
    l_plid_tab l_plid_type;
    l_plobject_version_number_tab l_plobject_version_number_type;
    l_plattribute_category_tab l_plattribute_category_type;
    l_plattribute1_tab l_plattribute1_type;
    l_plattribute2_tab l_plattribute2_type;
    l_plattribute3_tab l_plattribute3_type;
    l_plattribute4_tab l_plattribute4_type;
    l_plattribute5_tab l_plattribute5_type;
    l_plattribute6_tab l_plattribute6_type;
    l_plattribute7_tab l_plattribute7_type;
    l_plattribute8_tab l_plattribute8_type;
    l_plattribute9_tab l_plattribute9_type;
    l_plattribute10_tab l_plattribute10_type;
    l_plattribute11_tab l_plattribute11_type;
    l_plattribute12_tab l_plattribute12_type;
    l_plattribute13_tab l_plattribute13_type;
    l_plattribute14_tab l_plattribute14_type;
    l_plattribute15_tab l_plattribute15_type;

    l_okl_k_party_roles_counter number := 1;

    -- For okl_k_party_roles End

    -- For party_roles_tl Begin
    l_pid_tab l_pid_type;
    l_planguage_tab l_planguage_type;
    l_psource_lang_tab l_psource_lang_type;
    l_psfwt_flag_tab l_psfwt_flag_type;
    l_pcreated_by_tab l_pcreated_by_type;
    l_pcreation_date_tab l_pcreation_date_type;
    l_plast_updated_by_tab l_plast_updated_by_type;
    l_plast_update_date_tab l_plast_update_date_type;
    l_pcognomen_tab l_pcognomen_type;
    l_palias_tab l_palias_type;
    l_plast_update_login_tab l_plast_update_login_type;
    l_psecurity_group_id_tab l_psecurity_group_id_type;

    l_party_roles_tl_counter NUMBER := 1;
    -- For party_roles_tl End

    -- For okc_contacts Begin

    l_cid_tab l_cid_type;
    l_ccpl_id_tab l_ccpl_id_type;
    l_ccro_code_tab l_ccro_code_type;
    l_cdnz_chr_id_tab l_cdnz_chr_id_type;
    l_cobject1_id1_tab l_cobject1_id1_type;
    l_cobject1_id2_tab l_cobject1_id2_type;
    l_cjtot_object1_code_tab l_cjtot_object1_code_type;
    l_cobject_version_number_tab l_cobject_version_number_type;
    l_ccreated_by_tab l_ccreated_by_type;
    l_ccreation_date_tab l_ccreation_date_type;
    l_clast_updated_by_tab l_clast_updated_by_type;
    l_clast_update_date_tab l_clast_update_date_type;
    l_ccontact_sequence_tab l_ccontact_sequence_type;
    l_clast_update_login_tab l_clast_update_login_type;
    l_cattribute_category_tab l_cattribute_category_type;
    l_cattribute1_tab l_cattribute1_type;
    l_cattribute2_tab l_cattribute2_type;
    l_cattribute3_tab l_cattribute3_type;
    l_cattribute4_tab l_cattribute4_type;
    l_cattribute5_tab l_cattribute5_type;
    l_cattribute6_tab l_cattribute6_type;
    l_cattribute7_tab l_cattribute7_type;
    l_cattribute8_tab l_cattribute8_type;
    l_cattribute9_tab l_cattribute9_type;
    l_cattribute10_tab l_cattribute10_type;
    l_cattribute11_tab l_cattribute11_type;
    l_cattribute12_tab l_cattribute12_type;
    l_cattribute13_tab l_cattribute13_type;
    l_cattribute14_tab l_cattribute14_type;
    l_cattribute15_tab l_cattribute15_type;
    l_csecurity_group_id_tab l_csecurity_group_id_type;
    l_cstart_date_tab l_cstart_date_type;
    l_cend_date_tab l_cend_date_type;
    l_cprimary_yn_tab l_cprimary_yn_type;
    l_cresource_class_tab l_cresource_class_type;

    l_contacts_counter NUMBER := 1;
    -- For okc_contacts End

    -- For okc_rule_groups_b Begin
    l_rid_tab3 l_rid_type;

    l_rid_tab l_rid_type;
    l_rrgd_code_tab l_rrgd_code_type;
    l_rchr_id_tab l_rchr_id_type;
    l_rcle_id_tab l_rcle_id_type;
    l_rdnz_chr_id_tab l_rdnz_chr_id_type;
    l_rparent_rgp_id_tab l_rparent_rgp_id_type;
    l_rsat_code_tab l_rsat_code_type;
    l_robject_version_number_tab l_robject_version_number_type;
    l_rrgp_type_tab l_rrgp_type_type;
    l_rcreated_by_tab l_rcreated_by_type;
    l_rcreation_date_tab l_rcreation_date_type;
    l_rlast_updated_by_tab l_rlast_updated_by_type;
    l_rlast_update_date_tab l_rlast_update_date_type;
    l_rlast_update_login_tab l_rlast_update_login_type;
    l_rattribute_category_tab l_rattribute_category_type;
    l_rattribute1_tab l_rattribute1_type;
    l_rattribute2_tab l_rattribute2_type;
    l_rattribute3_tab l_rattribute3_type;
    l_rattribute4_tab l_rattribute4_type;
    l_rattribute5_tab l_rattribute5_type;
    l_rattribute6_tab l_rattribute6_type;
    l_rattribute7_tab l_rattribute7_type;
    l_rattribute8_tab l_rattribute8_type;
    l_rattribute9_tab l_rattribute9_type;
    l_rattribute10_tab l_rattribute10_type;
    l_rattribute11_tab l_rattribute11_type;
    l_rattribute12_tab l_rattribute12_type;
    l_rattribute13_tab l_rattribute13_type;
    l_rattribute14_tab l_rattribute14_type;
    l_rattribute15_tab l_rattribute15_type;
    l_rsecurity_group_id_tab l_rsecurity_group_id_type;

    l_rule_groups_b_counter NUMBER := 1;
    -- For okc_rule_groups_b End

    -- For okc_rule_groups_tl Begin

    l_rtid_tab l_rtid_type;
    l_rtlanguage_tab l_rtlanguage_type;
    l_rtsource_lang_tab l_rtsource_lang_type;
    l_rtsfwt_flag_tab l_rtsfwt_flag_type;
    l_rtcomments_tab l_rtcomments_type;
    l_rtcreated_by_tab l_rtcreated_by_type;
    l_rtcreation_date_tab l_rtcreation_date_type;
    l_rtlast_updated_by_tab l_rtlast_updated_by_type;
    l_rtlast_update_date_tab l_rtlast_update_date_type;
    l_rtlast_update_login_tab l_rtlast_update_login_type;
    l_rtsecurity_group_id_tab l_rtsecurity_group_id_type;

    l_rule_groups_tl_counter NUMBER := 1;
    -- For okc_rule_groups_tl End

    -- For okc_rules_b Begin

    l_rrid_tab3 l_rrid_type;

    l_rrid_tab l_rrid_type;
    l_rrrgp_id_tab l_rrrgp_id_type;
    l_rrobject1_id1_tab l_rrobject1_id1_type;
    l_rrobject2_id1_tab l_rrobject2_id1_type;
    l_rrobject3_id1_tab l_rrobject3_id1_type;
    l_rrobject1_id2_tab l_rrobject1_id2_type;
    l_rrobject2_id2_tab l_rrobject2_id2_type;
    l_rrobject3_id2_tab l_rrobject3_id2_type;
    l_rrjtot_object1_code_tab l_rrjtot_object1_code_type;
    l_rrjtot_object2_code_tab l_rrjtot_object2_code_type;
    l_rrjtot_object3_code_tab l_rrjtot_object3_code_type;
    l_rrdnz_chr_id_tab l_rrdnz_chr_id_type;
    l_rrstd_template_yn_tab l_rrstd_template_yn_type;
    l_rrwarn_yn_tab l_rrwarn_yn_type;
    l_rrpriority_tab l_rrpriority_type;
    l_rrobject_version_number_tab l_rrobject_version_number_type;
    l_rrcreated_by_tab l_rrcreated_by_type;
    l_rrcreation_date_tab l_rrcreation_date_type;
    l_rrlast_updated_by_tab l_rrlast_updated_by_type;
    l_rrlast_update_date_tab l_rrlast_update_date_type;
    l_rrlast_update_login_tab l_rrlast_update_login_type;
    l_rrattribute_category_tab l_rrattribute_category_type;
    l_rrattribute1_tab l_rrattribute1_type;
    l_rrattribute2_tab l_rrattribute2_type;
    l_rrattribute3_tab l_rrattribute3_type;
    l_rrattribute4_tab l_rrattribute4_type;
    l_rrattribute5_tab l_rrattribute5_type;
    l_rrattribute6_tab l_rrattribute6_type;
    l_rrattribute7_tab l_rrattribute7_type;
    l_rrattribute8_tab l_rrattribute8_type;
    l_rrattribute9_tab l_rrattribute9_type;
    l_rrattribute10_tab l_rrattribute10_type;
    l_rrattribute11_tab l_rrattribute11_type;
    l_rrattribute12_tab l_rrattribute12_type;
    l_rrattribute13_tab l_rrattribute13_type;
    l_rrattribute14_tab l_rrattribute14_type;
    l_rrattribute15_tab l_rrattribute15_type;
    l_rrrule_information_cate_tab l_rrrule_information_cate_type;
    l_rrrule_information1_tab l_rrrule_information1_type;
    l_rrrule_information2_tab l_rrrule_information2_type;
    l_rrrule_information3_tab l_rrrule_information3_type;
    l_rrrule_information4_tab l_rrrule_information4_type;
    l_rrrule_information5_tab l_rrrule_information5_type;
    l_rrrule_information6_tab l_rrrule_information6_type;
    l_rrrule_information7_tab l_rrrule_information7_type;
    l_rrrule_information8_tab l_rrrule_information8_type;
    l_rrrule_information9_tab l_rrrule_information9_type;
    l_rrrule_information10_tab l_rrrule_information10_type;
    l_rrrule_information11_tab l_rrrule_information11_type;
    l_rrrule_information12_tab l_rrrule_information12_type;
    l_rrrule_information13_tab l_rrrule_information13_type;
    l_rrrule_information14_tab l_rrrule_information14_type;
    l_rrrule_information15_tab l_rrrule_information15_type;
    l_rrsecurity_group_id_tab l_rrsecurity_group_id_type;
    l_rrtemplate_yn_tab l_rrtemplate_yn_type;
    l_rrans_set_jtot_object_c_tab l_rrans_set_jtot_object_c_type;
    l_rrans_set_jtot_object_1_tab l_rrans_set_jtot_object_1_type;
    l_rrans_set_jtot_object_2_tab l_rrans_set_jtot_object_2_type;
    l_rrdisplay_sequence_tab l_rrdisplay_sequence_type;
    l_rrcomments_tab l_rrcomments_type;

    l_rules_b_counter NUMBER := 1;
    -- For okc_rules_b End

    -- For okc_rules_tl Begin

    l_trid_tab l_trid_type;
    l_trlanguage_tab l_trlanguage_type;
    l_trsource_lang_tab l_trsource_lang_type;
    l_trsfwt_flag_tab l_trsfwt_flag_type;
    l_trcomments_tab l_trcomments_type;
    l_trtext_tab l_trtext_type;
    l_trcreated_by_tab l_trcreated_by_type;
    l_trcreation_date_tab l_trcreation_date_type;
    l_trlast_updated_by_tab l_trlast_updated_by_type;
    l_trlast_update_date_tab l_trlast_update_date_type;
    l_trlast_update_login_tab l_trlast_update_login_type;
    l_trsecurity_group_id_tab l_trsecurity_group_id_type;

    l_rules_tl_counter NUMBER := 1;
    -- For okc_rules_tl End

    -- For okc_k_items Begin

    l_iid_tab l_iid_type;
    l_icle_id_tab l_icle_id_type;
    l_ichr_id_tab l_ichr_id_type;
    l_icle_id_for_tab l_icle_id_for_type;
    l_idnz_chr_id_tab l_idnz_chr_id_type;
    l_iobject1_id1_tab l_iobject1_id1_type;
    l_iobject1_id2_tab l_iobject1_id2_type;
    l_ijtot_object1_code_tab l_ijtot_object1_code_type;
    l_iuom_code_tab l_iuom_code_type;
    l_iexception_yn_tab l_iexception_yn_type;
    l_inumber_of_items_tab l_inumber_of_items_type;
    l_ipriced_item_yn_tab l_ipriced_item_yn_type;
    l_iobject_version_number_tab l_iobject_version_number_type;
    l_icreated_by_tab l_icreated_by_type;
    l_icreation_date_tab l_icreation_date_type;
    l_ilast_updated_by_tab l_ilast_updated_by_type;
    l_ilast_update_date_tab l_ilast_update_date_type;
    l_ilast_update_login_tab l_ilast_update_login_type;
    l_isecurity_group_id_tab l_isecurity_group_id_type;
    l_iupg_orig_system_ref_tab l_iupg_orig_system_ref_type;
    l_iupg_orig_system_ref_id_tab l_iupg_orig_system_ref_id_type;
    l_iprogram_application_id_tab l_iprogram_application_id_type;
    l_iprogram_id_tab l_iprogram_id_type;
    l_iprogram_update_date_tab l_iprogram_update_date_type;
    l_irequest_id_tab l_irequest_id_type;

    l_items_counter NUMBER := 1;
    -- For okc_k_items End

    -- For okl_trx_assets Begin (42)

    l_tid_tab l_tid_type;
    l_tica_id_tab l_tica_id_type;
    l_ttas_type_tab l_ttas_type_type;
    l_tobject_version_number_tab l_tobject_version_number_type;
    l_tattribute_category_tab l_tattribute_category_type;
    l_tattribute1_tab l_tattribute1_type;
    l_tattribute2_tab l_tattribute2_type;
    l_tattribute3_tab l_tattribute3_type;
    l_tattribute4_tab l_tattribute4_type;
    l_tattribute5_tab l_tattribute5_type;
    l_tattribute6_tab l_tattribute6_type;
    l_tattribute7_tab l_tattribute7_type;
    l_tattribute8_tab l_tattribute8_type;
    l_tattribute9_tab l_tattribute9_type;
    l_tattribute10_tab l_tattribute10_type;
    l_tattribute11_tab l_tattribute11_type;
    l_tattribute12_tab l_tattribute12_type;
    l_tattribute13_tab l_tattribute13_type;
    l_tattribute14_tab l_tattribute14_type;
    l_tattribute15_tab l_tattribute15_type;
    l_tcreated_by_tab l_tcreated_by_type;
    l_tcreation_date_tab l_tcreation_date_type;
    l_tlast_updated_by_tab l_tlast_updated_by_type;
    l_tlast_update_date_tab l_tlast_update_date_type;
    l_tlast_update_login_tab l_tlast_update_login_type;
    l_ttsu_code_tab l_ttsu_code_type;
    l_ttry_id_tab l_ttry_id_type;
    l_tdate_trans_occurred_tab l_tdate_trans_occurred_type;
    l_ttrans_number_tab l_ttrans_number_type;
    l_tcomments_tab l_tcomments_type;
    l_treq_asset_id_tab l_treq_asset_id_type;
    l_ttotal_match_amount_tab l_ttotal_match_amount_type;
    l_torg_id_tab l_torg_id_type;
    l_tlegal_entity_id_tab l_tlegal_entity_id_type;

    l_trx_assets_counter NUMBER := 1;
    -- For okl_trx_assets End (42)

    -- For okl_trx_assets Begin (45)

    l_t2id_tab l_t2id_type;
    l_t2ica_id_tab l_t2ica_id_type;
    l_t2tas_type_tab l_t2tas_type_type;
    l_t2object_version_number_tab l_t2object_version_number_type;
    l_t2attribute_category_tab l_t2attribute_category_type;
    l_t2attribute1_tab l_t2attribute1_type;
    l_t2attribute2_tab l_t2attribute2_type;
    l_t2attribute3_tab l_t2attribute3_type;
    l_t2attribute4_tab l_t2attribute4_type;
    l_t2attribute5_tab l_t2attribute5_type;
    l_t2attribute6_tab l_t2attribute6_type;
    l_t2attribute7_tab l_t2attribute7_type;
    l_t2attribute8_tab l_t2attribute8_type;
    l_t2attribute9_tab l_t2attribute9_type;
    l_t2attribute10_tab l_t2attribute10_type;
    l_t2attribute11_tab l_t2attribute11_type;
    l_t2attribute12_tab l_t2attribute12_type;
    l_t2attribute13_tab l_t2attribute13_type;
    l_t2attribute14_tab l_t2attribute14_type;
    l_t2attribute15_tab l_t2attribute15_type;
    l_t2created_by_tab l_t2created_by_type;
    l_t2creation_date_tab l_t2creation_date_type;
    l_t2last_updated_by_tab l_t2last_updated_by_type;
    l_t2last_update_date_tab l_t2last_update_date_type;
    l_t2last_update_login_tab l_t2last_update_login_type;
    l_t2tsu_code_tab l_t2tsu_code_type;
    l_t2try_id_tab l_t2try_id_type;
    l_t2date_trans_occurred_tab l_t2date_trans_occurred_type;
    l_t2trans_number_tab l_t2trans_number_type;
    l_t2comments_tab l_t2comments_type;
    l_t2req_asset_id_tab l_t2req_asset_id_type;
    l_t2total_match_amount_tab l_t2total_match_amount_type;
    l_t2org_id_tab l_t2org_id_type;
    l_t2legal_entity_id_tab l_t2legal_entity_id_type;

    l_trx_assets_counter2 NUMBER := 1;

    -- For okl_trx_assets End (45)

    -- For okl_txl_assets_b Begin

    l_tbid_tab3 l_tbid_type;

    l_tbid_tab l_tbid_type;
    l_tbobject_version_number_tab l_tbobject_version_number_type;
    l_tbtas_id_tab l_tbtas_id_type;
    l_tbilo_id_tab l_tbilo_id_type;
    l_tbilo_id_old_tab l_tbilo_id_old_type;
    l_tbiay_id_tab l_tbiay_id_type;
    l_tbiay_id_new_tab l_tbiay_id_new_type;
    l_tbkle_id_tab l_tbkle_id_type;
    l_tbdnz_khr_id_tab l_tbdnz_khr_id_type;
    l_tbline_number_tab l_tbline_number_type;
    l_tborg_id_tab l_tborg_id_type;
    l_tbtal_type_tab l_tbtal_type_type;
    l_tbasset_number_tab l_tbasset_number_type;
    l_tbfa_location_id_tab l_tbfa_location_id_type;
    l_tboriginal_cost_tab l_tboriginal_cost_type;
    l_tbcurrent_units_tab l_tbcurrent_units_type;
    l_tbmanufacturer_name_tab l_tbmanufacturer_name_type;
    l_tbyear_manufactured_tab l_tbyear_manufactured_type;
    l_tbsupplier_id_tab l_tbsupplier_id_type;
    l_tbused_asset_yn_tab l_tbused_asset_yn_type;
    l_tbtag_number_tab l_tbtag_number_type;
    l_tbmodel_number_tab l_tbmodel_number_type;
    l_tbcorporate_book_tab l_tbcorporate_book_type;
    l_tbdate_purchased_tab l_tbdate_purchased_type;
    l_tbdate_delivery_tab l_tbdate_delivery_type;
    l_tbin_service_date_tab l_tbin_service_date_type;
    l_tblife_in_months_tab l_tblife_in_months_type;
    l_tbdepreciation_id_tab l_tbdepreciation_id_type;
    l_tbdepreciation_cost_tab l_tbdepreciation_cost_type;
    l_tbdeprn_method_tab l_tbdeprn_method_type;
    l_tbdeprn_rate_tab l_tbdeprn_rate_type;
    l_tbsalvage_value_tab l_tbsalvage_value_type;
    l_tbpercent_salvage_value_tab l_tbpercent_salvage_value_type;
    l_tbattribute_category_tab l_tbattribute_category_type;
    l_tbattribute1_tab l_tbattribute1_type;
    l_tbattribute2_tab l_tbattribute2_type;
    l_tbattribute3_tab l_tbattribute3_type;
    l_tbattribute4_tab l_tbattribute4_type;
    l_tbattribute5_tab l_tbattribute5_type;
    l_tbattribute6_tab l_tbattribute6_type;
    l_tbattribute7_tab l_tbattribute7_type;
    l_tbattribute8_tab l_tbattribute8_type;
    l_tbattribute9_tab l_tbattribute9_type;
    l_tbattribute10_tab l_tbattribute10_type;
    l_tbattribute11_tab l_tbattribute11_type;
    l_tbattribute12_tab l_tbattribute12_type;
    l_tbattribute13_tab l_tbattribute13_type;
    l_tbattribute14_tab l_tbattribute14_type;
    l_tbattribute15_tab l_tbattribute15_type;
    l_tbcreated_by_tab l_tbcreated_by_type;
    l_tbcreation_date_tab l_tbcreation_date_type;
    l_tblast_updated_by_tab l_tblast_updated_by_type;
    l_tblast_update_date_tab l_tblast_update_date_type;
    l_tblast_update_login_tab l_tblast_update_login_type;
    l_tbdepreciate_yn_tab l_tbdepreciate_yn_type;
    l_tbhold_period_days_tab l_tbhold_period_days_type;
    l_tbold_salvage_value_tab l_tbold_salvage_value_type;
    l_tbnew_residual_value_tab l_tbnew_residual_value_type;
    l_tbold_residual_value_tab l_tbold_residual_value_type;
    l_tbunits_retired_tab l_tbunits_retired_type;
    l_tbcost_retired_tab l_tbcost_retired_type;
    l_tbsale_proceeds_tab l_tbsale_proceeds_type;
    l_tbremoval_cost_tab l_tbremoval_cost_type;
    l_tbdnz_asset_id_tab l_tbdnz_asset_id_type;
    l_tbdate_due_tab l_tbdate_due_type;
    l_tbrep_asset_id_tab l_tbrep_asset_id_type;
    l_tblke_asset_id_tab l_tblke_asset_id_type;
    l_tbmatch_amount_tab l_tbmatch_amount_type;
    l_tbsplit_into_singles_fl_tab l_tbsplit_into_singles_fl_type;
    l_tbsplit_into_units_tab l_tbsplit_into_units_type;
    l_tbcurrency_code_tab l_tbcurrency_code_type;
    l_tbcurrency_convers_type_tab l_tbcurrency_convers_type_type;
    l_tbcurrency_convers_rate_tab l_tbcurrency_convers_rate_type;
    l_tbcurrency_convers_date_tab l_tbcurrency_convers_date_type;
    l_tbasset_key_id_tab l_tbasset_key_id_type;
    l_tbfa_trx_date_tab l_tbfa_trx_date_type;

    l_txl_assets_b_counter NUMBER := 1;

    l_tb2id_tab l_tbid_type;
    l_tb2object_version_number_tab l_tbobject_version_number_type;
    l_tb2tas_id_tab l_tbtas_id_type;
    l_tb2ilo_id_tab l_tbilo_id_type;
    l_tb2ilo_id_old_tab l_tbilo_id_old_type;
    l_tb2iay_id_tab l_tbiay_id_type;
    l_tb2iay_id_new_tab l_tbiay_id_new_type;
    l_tb2kle_id_tab l_tbkle_id_type;
    l_tb2dnz_khr_id_tab l_tbdnz_khr_id_type;
    l_tb2line_number_tab l_tbline_number_type;
    l_tb2org_id_tab l_tborg_id_type;
    l_tb2tal_type_tab l_tbtal_type_type;
    l_tb2asset_number_tab l_tbasset_number_type;
    l_tb2fa_location_id_tab l_tbfa_location_id_type;
    l_tb2original_cost_tab l_tboriginal_cost_type;
    l_tb2current_units_tab l_tbcurrent_units_type;
    l_tb2manufacturer_name_tab l_tbmanufacturer_name_type;
    l_tb2year_manufactured_tab l_tbyear_manufactured_type;
    l_tb2supplier_id_tab l_tbsupplier_id_type;
    l_tb2used_asset_yn_tab l_tbused_asset_yn_type;
    l_tb2tag_number_tab l_tbtag_number_type;
    l_tb2model_number_tab l_tbmodel_number_type;
    l_tb2corporate_book_tab l_tbcorporate_book_type;
    l_tb2date_purchased_tab l_tbdate_purchased_type;
    l_tb2date_delivery_tab l_tbdate_delivery_type;
    l_tb2in_service_date_tab l_tbin_service_date_type;
    l_tb2life_in_months_tab l_tblife_in_months_type;
    l_tb2depreciation_id_tab l_tbdepreciation_id_type;
    l_tb2depreciation_cost_tab l_tbdepreciation_cost_type;
    l_tb2deprn_method_tab l_tbdeprn_method_type;
    l_tb2deprn_rate_tab l_tbdeprn_rate_type;
    l_tb2salvage_value_tab l_tbsalvage_value_type;
    l_tb2percent_salvage_value_tab l_tbpercent_salvage_value_type;
    l_tb2attribute_category_tab l_tbattribute_category_type;
    l_tb2attribute1_tab l_tbattribute1_type;
    l_tb2attribute2_tab l_tbattribute2_type;
    l_tb2attribute3_tab l_tbattribute3_type;
    l_tb2attribute4_tab l_tbattribute4_type;
    l_tb2attribute5_tab l_tbattribute5_type;
    l_tb2attribute6_tab l_tbattribute6_type;
    l_tb2attribute7_tab l_tbattribute7_type;
    l_tb2attribute8_tab l_tbattribute8_type;
    l_tb2attribute9_tab l_tbattribute9_type;
    l_tb2attribute10_tab l_tbattribute10_type;
    l_tb2attribute11_tab l_tbattribute11_type;
    l_tb2attribute12_tab l_tbattribute12_type;
    l_tb2attribute13_tab l_tbattribute13_type;
    l_tb2attribute14_tab l_tbattribute14_type;
    l_tb2attribute15_tab l_tbattribute15_type;
    l_tb2created_by_tab l_tbcreated_by_type;
    l_tb2creation_date_tab l_tbcreation_date_type;
    l_tb2last_updated_by_tab l_tblast_updated_by_type;
    l_tb2last_update_date_tab l_tblast_update_date_type;
    l_tb2last_update_login_tab l_tblast_update_login_type;
    l_tb2depreciate_yn_tab l_tbdepreciate_yn_type;
    l_tb2hold_period_days_tab l_tbhold_period_days_type;
    l_tb2old_salvage_value_tab l_tbold_salvage_value_type;
    l_tb2new_residual_value_tab l_tbnew_residual_value_type;
    l_tb2old_residual_value_tab l_tbold_residual_value_type;
    l_tb2units_retired_tab l_tbunits_retired_type;
    l_tb2cost_retired_tab l_tbcost_retired_type;
    l_tb2sale_proceeds_tab l_tbsale_proceeds_type;
    l_tb2removal_cost_tab l_tbremoval_cost_type;
    l_tb2dnz_asset_id_tab l_tbdnz_asset_id_type;
    l_tb2date_due_tab l_tbdate_due_type;
    l_tb2rep_asset_id_tab l_tbrep_asset_id_type;
    l_tb2lke_asset_id_tab l_tblke_asset_id_type;
    l_tb2match_amount_tab l_tbmatch_amount_type;
    l_tb2split_into_units_tab l_tbsplit_into_units_type;
    l_tb2currency_code_tab l_tbcurrency_code_type;
    l_tb2asset_key_id_tab l_tbasset_key_id_type;
    l_tb2fa_trx_date_tab l_tbfa_trx_date_type;
    l_tb2fa_cost_tab l_tbfa_cost_type;

    -- For okl_txl_assets_b End

    -- For okl_txl_assets_tl Begin

    l_tlid_tab l_tlid_type;
    l_tllanguage_tab l_tllanguage_type;
    l_tlsource_lang_tab l_tlsource_lang_type;
    l_tlsfwt_flag_tab l_tlsfwt_flag_type;
    l_tldescription_tab l_tldescription_type;
    l_tlcreated_by_tab l_tlcreated_by_type;
    l_tlcreation_date_tab l_tlcreation_date_type;
    l_tllast_updated_by_tab l_tllast_updated_by_type;
    l_tllast_update_date_tab l_tllast_update_date_type;
    l_tllast_update_login_tab l_tllast_update_login_type;

    l_txl_assets_tl_counter NUMBER := 1;

    -- For okl_txl_assets_tl End

    -- For okl_txd_assets_b Begin

    l_dbid_tab3 l_dbid_type;
    l_dbid_tab l_dbid_type;
    l_dbobject_version_number_tab l_dbobject_version_number_type;
    l_dbtal_id_tab l_dbtal_id_type;
    l_dbtarget_kle_id_tab l_dbtarget_kle_id_type;
    l_dbline_detail_number_tab l_dbline_detail_number_type;
    l_dbasset_number_tab l_dbasset_number_type;
    l_dbquantity_tab l_dbquantity_type;
    l_dbcost_tab l_dbcost_type;
    l_dbtax_book_tab l_dbtax_book_type;
    l_dblife_in_months_tax_tab l_dblife_in_months_tax_type;
    l_dbdeprn_method_tax_tab l_dbdeprn_method_tax_type;
    l_dbdeprn_rate_tax_tab l_dbdeprn_rate_tax_type;
    l_dbsalvage_value_tab l_dbsalvage_value_type;
    l_dbsplit_percent_tab l_dbsplit_percent_type;
    l_dbinventory_item_id_tab l_dbinventory_item_id_type;
    l_dbattribute_category_tab l_dbattribute_category_type;
    l_dbattribute1_tab l_dbattribute1_type;
    l_dbattribute2_tab l_dbattribute2_type;
    l_dbattribute3_tab l_dbattribute3_type;
    l_dbattribute4_tab l_dbattribute4_type;
    l_dbattribute5_tab l_dbattribute5_type;
    l_dbattribute6_tab l_dbattribute6_type;
    l_dbattribute7_tab l_dbattribute7_type;
    l_dbattribute8_tab l_dbattribute8_type;
    l_dbattribute9_tab l_dbattribute9_type;
    l_dbattribute10_tab l_dbattribute10_type;
    l_dbattribute11_tab l_dbattribute11_type;
    l_dbattribute12_tab l_dbattribute12_type;
    l_dbattribute13_tab l_dbattribute13_type;
    l_dbattribute14_tab l_dbattribute14_type;
    l_dbattribute15_tab l_dbattribute15_type;
    l_dbcreated_by_tab l_dbcreated_by_type;
    l_dbcreation_date_tab l_dbcreation_date_type;
    l_dblast_updated_by_tab l_dblast_updated_by_type;
    l_dblast_update_date_tab l_dblast_update_date_type;
    l_dblast_update_login_tab l_dblast_update_login_type;
    l_dbcurrency_code_tab l_dbcurrency_code_type;
    l_dbcurrency_convers_type_tab l_dbcurrency_convers_type_type;
    l_dbcurrency_convers_rate_tab l_dbcurrency_convers_rate_type;
    l_dbcurrency_convers_date_tab l_dbcurrency_convers_date_type;

    l_txd_assets_b_counter NUMBER := 1;

    -- For okl_txd_assets_b End

    -- For okl_txd_assets_tl Begin

    l_dlid_tab l_dlid_type;
    l_dllanguage_tab l_dllanguage_type;
    l_dlsource_lang_tab l_dlsource_lang_type;
    l_dlsfwt_flag_tab l_dlsfwt_flag_type;
    l_dldescription_tab l_dldescription_type;
    l_dlcreated_by_tab l_dlcreated_by_type;
    l_dlcreation_date_tab l_dlcreation_date_type;
    l_dllast_updated_by_tab l_dllast_updated_by_type;
    l_dllast_update_date_tab l_dllast_update_date_type;
    l_dllast_update_login_tab l_dllast_update_login_type;

    l_txd_assets_tl_counter NUMBER := 1;

    -- For okl_txd_assets_tl End

    -- For okl_txl_itm_insts Begin

    l_tiid_tab l_tiid_type;
    l_tiobject_version_number_tab l_tiobject_version_number_type;
    l_titas_id_tab l_titas_id_type;
    l_tital_id_tab l_tital_id_type;
    l_tikle_id_tab l_tikle_id_type;
    l_tital_type_tab l_tital_type_type;
    l_tiline_number_tab l_tiline_number_type;
    l_tiinstance_number_ib_tab l_tiinstance_number_ib_type;
    l_tiobject_id1_new_tab l_tiobject_id1_new_type;
    l_tiobject_id2_new_tab l_tiobject_id2_new_type;
    l_tijtot_object_code_new_tab l_tijtot_object_code_new_type;
    l_tiobject_id1_old_tab l_tiobject_id1_old_type;
    l_tiobject_id2_old_tab l_tiobject_id2_old_type;
    l_tijtot_object_code_old_tab l_tijtot_object_code_old_type;
    l_tiinventory_org_id_tab l_tiinventory_org_id_type;
    l_tiserial_number_tab l_tiserial_number_type;
    l_timfg_serial_number_yn_tab l_timfg_serial_number_yn_type;
    l_tiinventory_item_id_tab l_tiinventory_item_id_type;
    l_tiinv_master_org_id_tab l_tiinv_master_org_id_type;
    l_tiattribute_category_tab l_tiattribute_category_type;
    l_tiattribute1_tab l_tiattribute1_type;
    l_tiattribute2_tab l_tiattribute2_type;
    l_tiattribute3_tab l_tiattribute3_type;
    l_tiattribute4_tab l_tiattribute4_type;
    l_tiattribute5_tab l_tiattribute5_type;
    l_tiattribute6_tab l_tiattribute6_type;
    l_tiattribute7_tab l_tiattribute7_type;
    l_tiattribute8_tab l_tiattribute8_type;
    l_tiattribute9_tab l_tiattribute9_type;
    l_tiattribute10_tab l_tiattribute10_type;
    l_tiattribute11_tab l_tiattribute11_type;
    l_tiattribute12_tab l_tiattribute12_type;
    l_tiattribute13_tab l_tiattribute13_type;
    l_tiattribute14_tab l_tiattribute14_type;
    l_tiattribute15_tab l_tiattribute15_type;
    l_ticreated_by_tab l_ticreated_by_type;
    l_ticreation_date_tab l_ticreation_date_type;
    l_tilast_updated_by_tab l_tilast_updated_by_type;
    l_tilast_update_date_tab l_tilast_update_date_type;
    l_tilast_update_login_tab l_tilast_update_login_type;
    l_tidnz_cle_id_tab l_tidnz_cle_id_type;
    l_tiinstance_id_tab l_tiinstance_id_type;
    l_tiselected_for_split_fl_tab l_tiselected_for_split_fl_type;
    l_tiasd_id_tab l_tiasd_id_type;

    l_txl_itm_insts_counter NUMBER := 1;

    -- okl_txl_itm_insts
    l_ti2id_tab l_tiid_type;
    l_ti2tas_id_tab l_titas_id_type;
    l_ti2kle_id_tab l_tikle_id_type;
    l_ti2line_number_tab l_tiline_number_type;
    l_ti2instance_number_ib_tab l_tiinstance_number_ib_type;
    l_ti2object_id1_new_tab l_tiobject_id1_new_type;
    l_ti2object_id2_new_tab l_tiobject_id2_new_type;
    l_ti2jtot_object_code_new_tab l_tijtot_object_code_new_type;
    l_ti2dnz_cle_id_tab l_tidnz_cle_id_type;
    l_ti2inventory_item_id_tab l_tiinventory_item_id_type;
    l_ti2inv_master_org_id_tab l_tiinv_master_org_id_type;
    l_ti2inventory_org_id_tab l_tiinventory_org_id_type;
    l_ti2serial_number_tab l_tiserial_number_type;
    l_ti2mfg_serial_number_yn_tab l_timfg_serial_number_yn_type;

    l_txl_itm_insts_counter2 NUMBER := 1;

    -- For okl_txl_itm_insts End

    -- For okc_k_lines_tl Begin

    l_olid_tab l_olid_type;
    l_ollanguage_tab l_ollanguage_type;
    l_olsource_lang_tab l_olsource_lang_type;
    l_olsfwt_flag_tab l_olsfwt_flag_type;
    l_olname_tab l_olname_type;
    l_olcomments_tab l_olcomments_type;
    l_olitem_description_tab l_olitem_description_type;
    l_olblock23text_tab l_olblock23text_type;
    l_olcreated_by_tab l_olcreated_by_type;
    l_olcreation_date_tab l_olcreation_date_type;
    l_ollast_updated_by_tab l_ollast_updated_by_type;
    l_ollast_update_date_tab l_ollast_update_date_type;
    l_ollast_update_login_tab l_ollast_update_login_type;
    l_olsecurity_group_id_tab l_olsecurity_group_id_type;
    l_oloke_boe_description_tab l_oloke_boe_description_type;
    l_olcognomen_tab l_olcognomen_type;

    l_ollse_id_tab l_lse_id_type;
--avsingh: Bug 5710213: start
    l_ollty_code_tab l_lty_code_type;
--avsingh: Bug 5710213: end
    l_olsts_code_tab l_sts_code_type;
    l_olfee_type_tab l_fee_type_type;

    l_okc_k_lines_tl_counter NUMBER := 1;
    -- For okc_k_lines_tl End

    -- For okl_party_payment_dtls Begin

    l_ppid_tab l_ppid_type;
    l_ppobject_version_number_tab l_ppobject_version_number_type;
    l_ppcpl_id_tab l_ppcpl_id_type;
    l_ppvendor_id_tab l_ppvendor_id_type;
    l_pppay_site_id_tab l_pppay_site_id_type;
    l_pppayment_term_id_tab l_pppayment_term_id_type;
    l_pppayment_method_code_tab l_pppayment_method_code_type;
    l_pppay_group_code_tab l_pppay_group_code_type;
    l_ppattribute_category_tab l_ppattribute_category_type;
    l_ppattribute1_tab l_ppattribute1_type;
    l_ppattribute2_tab l_ppattribute2_type;
    l_ppattribute3_tab l_ppattribute3_type;
    l_ppattribute4_tab l_ppattribute4_type;
    l_ppattribute5_tab l_ppattribute5_type;
    l_ppattribute6_tab l_ppattribute6_type;
    l_ppattribute7_tab l_ppattribute7_type;
    l_ppattribute8_tab l_ppattribute8_type;
    l_ppattribute9_tab l_ppattribute9_type;
    l_ppattribute10_tab l_ppattribute10_type;
    l_ppattribute11_tab l_ppattribute11_type;
    l_ppattribute12_tab l_ppattribute12_type;
    l_ppattribute13_tab l_ppattribute13_type;
    l_ppattribute14_tab l_ppattribute14_type;
    l_ppattribute15_tab l_ppattribute15_type;
    l_ppcreated_by_tab l_ppcreated_by_type;
    l_ppcreation_date_tab l_ppcreation_date_type;
    l_pplast_updated_by_tab l_pplast_updated_by_type;
    l_pplast_update_date_tab l_pplast_update_date_type;
    l_pplast_update_login_tab l_pplast_update_login_type;
    l_pppayment_hdr_id_tab l_pppayment_hdr_id_type;
    l_pppayment_start_date_tab l_pppayment_start_date_type;
    l_pppayment_frequency_tab l_pppayment_frequency_type;
    l_ppremit_days_tab l_ppremit_days_type;
    l_ppdisbursement_basis_tab l_ppdisbursement_basis_type;
    l_ppdisbursement_fixed_am_tab l_ppdisbursement_fixed_am_type;
    l_ppdisbursement_percent_tab l_ppdisbursement_percent_type;
    l_ppprocessing_fee_basis_tab l_ppprocessing_fee_basis_type;
    l_ppprocessing_fee_fixedt_tab l_ppprocessing_fee_fixedt_type;
    l_ppprocessing_fee_percen_tab l_ppprocessing_fee_percen_type;
    l_pppayment_basis_tab l_pppayment_basis_type;

    l_ppORIG_CONTRACT_LINE_ID_tab l_ppORIG_CONTRACT_LINE_ID_type; --sechawla 21-jul-09 8677460 : PRB ESG enhancements

    l_party_payment_dtls_counter NUMBER := 1;

    -- For okl_party_payment_dtls End

    -- For okl_slctd_optns Begin

    l_sid_tab l_sid_type;
    l_spov_id_tab l_spov_id_type;
    l_skhr_id_tab l_skhr_id_type;
    l_sobject_version_number_tab l_sobject_version_number_type;
    l_sattribute_category_tab l_sattribute_category_type;
    l_sattribute1_tab l_sattribute1_type;
    l_sattribute2_tab l_sattribute2_type;
    l_sattribute3_tab l_sattribute3_type;
    l_sattribute4_tab l_sattribute4_type;
    l_sattribute5_tab l_sattribute5_type;
    l_sattribute6_tab l_sattribute6_type;
    l_sattribute7_tab l_sattribute7_type;
    l_sattribute8_tab l_sattribute8_type;
    l_sattribute9_tab l_sattribute9_type;
    l_sattribute10_tab l_sattribute10_type;
    l_sattribute11_tab l_sattribute11_type;
    l_sattribute12_tab l_sattribute12_type;
    l_sattribute13_tab l_sattribute13_type;
    l_sattribute14_tab l_sattribute14_type;
    l_sattribute15_tab l_sattribute15_type;
    l_screated_by_tab l_screated_by_type;
    l_screation_date_tab l_screation_date_type;
    l_slast_updated_by_tab l_slast_updated_by_type;
    l_slast_update_date_tab l_slast_update_date_type;
    l_slast_update_login_tab l_slast_update_login_type;

    l_slctd_optns_counter NUMBER := 1;

    -- For okl_slctd_optns End

    -- For okc_rg_party_roles Begin

    l_gid_tab l_gid_type;
    l_grgp_id_tab l_grgp_id_type;
    l_grrd_id_tab l_grrd_id_type;
    l_gcpl_id_tab l_gcpl_id_type;
    l_gdnz_chr_id_tab l_gdnz_chr_id_type;
    l_gobject_version_number_tab l_gobject_version_number_type;
    l_gcreated_by_tab l_gcreated_by_type;
    l_gcreation_date_tab l_gcreation_date_type;
    l_glast_updated_by_tab l_glast_updated_by_type;
    l_glast_update_date_tab l_glast_update_date_type;
    l_glast_update_login_tab l_glast_update_login_type;
    l_gsecurity_group_id_tab l_gsecurity_group_id_type;

    l_rg_party_roles_counter NUMBER := 1;

    -- For okc_rg_party_roles End

    --l_okl_k_lines_rec2 lines_tbl_type;
    l_okl_k_lines_rec l_okl_k_lines_rec_tab;
    l_okl_k_lines_rec_counter NUMBER := 1;
    l_okc_k_items_rec l_okc_k_items_rec_tab;
    l_okc_k_items_rec_counter NUMBER := 1;

    l_bid_mapping_tab l_bid_mapping_tab_type;
    l_cle_lse_mapping_tab l_cle_lse_mapping_tab_type;
    l_orig_system_tab l_orig_system_tab_type;
    l_id_mapping_tab l_id_mapping_tab_type;
    l_party_id_mapping_tab l_party_id_mapping_tab_type;
    l_ssid_mapping_tab l_ssid_mapping_tab_type;
    l_sid_mapping_tab l_sid_mapping_tab_type;
    l_tid_mapping_tab l_tid_mapping_tab_type;
    l_vid_mapping_tab l_vid_mapping_tab_type;
    l_dbid_mapping_tab l_dbid_mapping_tab_type;
    l_osid_mapping_tab l_osid_mapping_tab_type;
    l_cid_mapping_tab l_cid_mapping_tab_type;
    l_rid_mapping_tab l_rid_mapping_tab_type;
    l_rrid_mapping_tab l_rrid_mapping_tab_type;
    l_trx_id_mapping_tab l_trx_id_mapping_tab_type;
    l_trx_id_mapping_tab2 l_trx_id_mapping_tab_type;
    l_txl_id_mapping_tab l_txl_id_mapping_tab_type;
    l_aid_mapping_tab l_aid_mapping_tab_type;
    l_oid_mapping_tab l_oid_mapping_tab_type;
    l_cle_mapping_tab l_cle_mapping_tab_type;
    l_cle_mapping_tab2 l_cle_mapping_tab_type2;
    l_asset_counter NUMBER := 1;
    l_vid_counter NUMBER := 1;
    l_tid_counter NUMBER := 1;
    l_ssid_counter NUMBER := 1;
    l_s2cle_id_tab l_id_type;
    l_s2object1_id1_tab l_misc_object1_id1;

    l_entered_id_tab l_id_type;
    l_entered_sts_code_tab l_sts_code_type; -- Bug 4872258
    l_entered_counter NUMBER := 1;
    l_delete_id_tab l_id_type;
    l_delete_counter NUMBER := 1;
    l_line_count NUMBER := 0; --5207066

    l_id2_tab_counter NUMBER := 1;
    l_id2_tab l_id_type;
    l_id_tab l_id_type;
    l_line_number_tab l_line_number_type;
    l_chr_id_tab l_chr_id_type;
    l_cle_id_tab l_cle_id_type;
    l_cle_id_renewed_tab l_cle_id_renewed_type;
    l_dnz_chr_id_tab l_dnz_chr_id_type;
    l_display_sequence_tab l_display_sequence_type;
    l_sts_code_tab l_sts_code_type;
    l_trn_code_tab l_trn_code_type;
    l_lse_id2_tab l_lse_id_type;
    l_lse_id_tab l_lse_id_type;
--avsingh: Bug 5710213: start
    l_lty_code_tab l_lty_code_type;
--avsingh: Bug 5710213: end
    l_exception_yn_tab l_exception_yn_type;
    l_object_version_number_tab l_object_version_number_type;
    l_created_by_tab l_created_by_type;
    l_creation_date_tab l_creation_date_type;
    l_last_updated_by_tab l_last_updated_by_type;
    l_last_update_date_tab l_last_update_date_type;
    l_hidden_ind_tab l_hidden_ind_type;
    l_price_negotiated_tab l_price_negotiated_type;
    l_price_level_ind_tab l_price_level_ind_type;
    l_price_unit_tab l_price_unit_type;
    l_price_unit_percent_tab l_price_unit_percent_type;
    l_invoice_line_level_ind_tab l_invoice_line_level_ind_type;
    l_dpas_rating_tab l_dpas_rating_type;
    l_template_used_tab l_template_used_type;
    l_price_type_tab l_price_type_type;
    l_currency_code_tab l_currency_code_type;
    l_last_update_login_tab l_last_update_login_type;
    l_date_terminated_tab l_date_terminated_type;
    l_start_date_tab l_start_date_type;
    l_end_date_tab l_end_date_type;
    l_attribute_category_tab l_attribute_category_type;
    l_attribute1_tab l_attribute1_type;
    l_attribute2_tab l_attribute2_type;
    l_attribute3_tab l_attribute3_type;
    l_attribute4_tab l_attribute4_type;
    l_attribute5_tab l_attribute5_type;
    l_attribute6_tab l_attribute6_type;
    l_attribute7_tab l_attribute7_type;
    l_attribute8_tab l_attribute8_type;
    l_attribute9_tab l_attribute9_type;
    l_attribute10_tab l_attribute10_type;
    l_attribute11_tab l_attribute11_type;
    l_attribute12_tab l_attribute12_type;
    l_attribute13_tab l_attribute13_type;
    l_attribute14_tab l_attribute14_type;
    l_attribute15_tab l_attribute15_type;
    l_security_group_id_tab l_security_group_id_type;
    l_cle_id_renewed_to_tab l_cle_id_renewed_to_type;
    l_price_negotiated_renewed_tab l_price_negotiated_renewed_typ;
    l_currency_code_renewed_tab l_currency_code_renewed_type;
    l_upg_orig_system_ref_tab l_upg_orig_system_ref_type;
    l_upg_orig_system_ref_id_tab l_upg_orig_system_ref_id_type;
    l_date_renewed_tab l_date_renewed_type;
    l_orig_system_source_code_tab l_orig_system_source_code_type;
    l_orig_system_id1_tab l_orig_system_id1_type;
    l_orig_system_reference1_tab l_orig_system_reference1_type;
    l_program_application_id_tab l_program_application_id_type;
    l_program_id_tab l_program_id_type;
    l_program_update_date_tab l_program_update_date_type;
    l_request_id_tab l_request_id_type;
    l_price_list_id_tab l_price_list_id_type;
    l_price_list_line_id_tab l_price_list_line_id_type;
    l_line_list_price_tab l_line_list_price_type;
    l_item_to_price_yn_tab l_item_to_price_yn_type;
    l_pricing_date_tab l_pricing_date_type;
    l_price_basis_yn_tab l_price_basis_yn_type;
    l_config_header_id_tab l_config_header_id_type;
    l_config_revision_number_tab l_config_revision_number_type;
    l_config_complete_yn_tab l_config_complete_yn_type;
    l_config_valid_yn_tab l_config_valid_yn_type;
    l_config_top_model_line_id_tab l_config_top_model_line_id_typ;
    l_config_item_type_tab l_config_item_type_type;
    l_config_item_id_tab l_config_item_id_type;
    l_service_item_yn_tab l_service_item_yn_type;
    l_ph_pricing_type_tab l_ph_pricing_type_type;
    l_ph_price_break_basis_tab l_ph_price_break_basis_type;
    l_ph_min_qty_tab l_ph_min_qty_type;
    l_ph_min_amt_tab l_ph_min_amt_type;
    l_ph_qp_reference_id_tab l_ph_qp_reference_id_type;
    l_ph_value_tab l_ph_value_type;
    l_ph_enforce_price_list_yn_tab l_ph_enforce_price_list_yn_typ;
    l_ph_adjustment_tab l_ph_adjustment_type;
    l_ph_integrated_with_qp_tab l_ph_integrated_with_qp_type;
    l_cust_acct_id_tab l_cust_acct_id_type;
    l_bill_to_site_use_id_tab l_bill_to_site_use_id_type;
    l_inv_rule_id_tab l_inv_rule_id_type;
    l_line_renewal_type_code_tab l_line_renewal_type_code_type;
    l_ship_to_site_use_id_tab l_ship_to_site_use_id_type;
    l_payment_term_id_tab l_payment_term_id_type;
    l_fee_type_tab l_fee_type_type;
    l_name_tab l_name_type;

    l_id_tab3 l_id_type;
    l_id_tab2 l_id_type;
    l_line_number_tab2 l_line_number_type;
    l_chr_id_tab2 l_chr_id_type;
    l_cle_id_tab2 l_cle_id_type;
    l_cle_id_renewed_tab2 l_cle_id_renewed_type;
    l_dnz_chr_id_tab2 l_dnz_chr_id_type;
    l_display_sequence_tab2 l_display_sequence_type;
    l_sts_code_tab2 l_sts_code_type;
    l_trn_code_tab2 l_trn_code_type;
    l_lse_id_tab2 l_lse_id_type;
--avsingh: Bug 5710213: start
    l_lty_code_tab2 l_lty_code_type;
--avsingh: Bug 5710213: end
    l_exception_yn_tab2 l_exception_yn_type;
    l_object_version_number_tab2 l_object_version_number_type;
    l_created_by_tab2 l_created_by_type;
    l_creation_date_tab2 l_creation_date_type;
    l_last_updated_by_tab2 l_last_updated_by_type;
    l_last_update_date_tab2 l_last_update_date_type;
    l_hidden_ind_tab2 l_hidden_ind_type;
    l_price_negotiated_tab2 l_price_negotiated_type;
    l_price_level_ind_tab2 l_price_level_ind_type;
    l_price_unit_tab2 l_price_unit_type;
    l_price_unit_percent_tab2 l_price_unit_percent_type;
    l_invoice_line_level_ind_tab2 l_invoice_line_level_ind_type;
    l_dpas_rating_tab2 l_dpas_rating_type;
    l_template_used_tab2 l_template_used_type;
    l_price_type_tab2 l_price_type_type;
    l_currency_code_tab2 l_currency_code_type;
    l_last_update_login_tab2 l_last_update_login_type;
    l_date_terminated_tab2 l_date_terminated_type;
    l_start_date_tab2 l_start_date_type;
    l_end_date_tab2 l_end_date_type;
    l_attribute_category_tab2 l_attribute_category_type;
    l_attribute1_tab2 l_attribute1_type;
    l_attribute2_tab2 l_attribute2_type;
    l_attribute3_tab2 l_attribute3_type;
    l_attribute4_tab2 l_attribute4_type;
    l_attribute5_tab2 l_attribute5_type;
    l_attribute6_tab2 l_attribute6_type;
    l_attribute7_tab2 l_attribute7_type;
    l_attribute8_tab2 l_attribute8_type;
    l_attribute9_tab2 l_attribute9_type;
    l_attribute10_tab2 l_attribute10_type;
    l_attribute11_tab2 l_attribute11_type;
    l_attribute12_tab2 l_attribute12_type;
    l_attribute13_tab2 l_attribute13_type;
    l_attribute14_tab2 l_attribute14_type;
    l_attribute15_tab2 l_attribute15_type;
    l_security_group_id_tab2 l_security_group_id_type;
    l_cle_id_renewed_to_tab2 l_cle_id_renewed_to_type;
    l_price_negotiated_renewed_tb2 l_price_negotiated_renewed_typ;
    l_currency_code_renewed_tab2 l_currency_code_renewed_type;
    l_upg_orig_system_ref_tab2 l_upg_orig_system_ref_type;
    l_upg_orig_system_ref_id_tab2 l_upg_orig_system_ref_id_type;
    l_date_renewed_tab2 l_date_renewed_type;
    l_orig_system_source_code_tab2 l_orig_system_source_code_type;
    l_orig_system_id1_tab2 l_orig_system_id1_type;
    l_orig_system_reference1_tab2 l_orig_system_reference1_type;
    l_program_application_id_tab2 l_program_application_id_type;
    l_program_id_tab2 l_program_id_type;
    l_program_update_date_tab2 l_program_update_date_type;
    l_request_id_tab2 l_request_id_type;
    l_price_list_id_tab2 l_price_list_id_type;
    l_price_list_line_id_tab2 l_price_list_line_id_type;
    l_line_list_price_tab2 l_line_list_price_type;
    l_item_to_price_yn_tab2 l_item_to_price_yn_type;
    l_pricing_date_tab2 l_pricing_date_type;
    l_price_basis_yn_tab2 l_price_basis_yn_type;
    l_config_header_id_tab2 l_config_header_id_type;
    l_config_revision_number_tab2 l_config_revision_number_type;
    l_config_complete_yn_tab2 l_config_complete_yn_type;
    l_config_valid_yn_tab2 l_config_valid_yn_type;
    l_config_top_model_line_id_tb2 l_config_top_model_line_id_typ;
    l_config_item_type_tab2 l_config_item_type_type;
    l_config_item_id_tab2 l_config_item_id_type;
    l_service_item_yn_tab2 l_service_item_yn_type;
    l_ph_pricing_type_tab2 l_ph_pricing_type_type;
    l_ph_price_break_basis_tab2 l_ph_price_break_basis_type;
    l_ph_min_qty_tab2 l_ph_min_qty_type;
    l_ph_min_amt_tab2 l_ph_min_amt_type;
    l_ph_qp_reference_id_tab2 l_ph_qp_reference_id_type;
    l_ph_value_tab2 l_ph_value_type;
    l_ph_enforce_price_list_yn_tb2 l_ph_enforce_price_list_yn_typ;
    l_ph_adjustment_tab2 l_ph_adjustment_type;
    l_ph_integrated_with_qp_tab2 l_ph_integrated_with_qp_type;
    l_cust_acct_id_tab2 l_cust_acct_id_type;
    l_bill_to_site_use_id_tab2 l_bill_to_site_use_id_type;
    l_inv_rule_id_tab2 l_inv_rule_id_type;
    l_line_renewal_type_code_tab2 l_line_renewal_type_code_type;
    l_ship_to_site_use_id_tab2 l_ship_to_site_use_id_type;
    l_payment_term_id_tab2 l_payment_term_id_type;
    l_fee_type_tab2 l_fee_type_type;
    l_name_tab2 l_name_type;

    l_counter NUMBER;
    l_cid_counter NUMBER := 1;
    l_cle_lse_counter NUMBER := 1;
    l_new_id NUMBER;
    l_party_counter NUMBER := 1;
    l_prid_tab  l_prid_type;
    l_probject1_id1_tab l_probject1_id1_type;

    l_orig_system_source_code okc_k_headers_b.orig_system_source_code%TYPE;
    l_sts_code okc_k_headers_b.sts_code%TYPE;
    l_sts_code_orig okc_k_headers_b.sts_code%TYPE;

PROCEDURE validate_currency_code(
       x_return_status OUT NOCOPY   VARCHAR2,
       p_ccy_code      IN    okc_k_headers_b.currency_code%TYPE) IS

  l_dummy_var   VARCHAR2(1) := '?';
  CURSOR l_fndv_csr IS
  		SELECT 'x'
		FROM FND_CURRENCIES_VL
		WHERE currency_code = p_ccy_code
		AND SYSDATE BETWEEN NVL(start_date_active,SYSDATE)
					 AND NVL(end_date_active,SYSDATE);
BEGIN

    -- initialize return status
    x_return_status := OKC_API.G_RET_STS_SUCCESS;

    -- check that data exists
    IF (p_ccy_code = OKC_API.G_MISS_CHAR OR
  	   p_ccy_code IS NULL)
    THEN
  	  OKC_API.SET_MESSAGE(p_app_name		=> g_app_name,
					  p_msg_name		=> g_required_value,
					  p_token1		=> g_col_name_token,
					  p_token1_value	=> 'Currency Code');
	   -- notify caller of an error
        x_return_status := OKC_API.G_RET_STS_ERROR;

	   -- halt validation
	   RAISE G_EXCEPTION_HALT_VALIDATION;
    END IF;

    -- check data is in lookup table
      OPEN l_fndv_csr;
      FETCH l_fndv_csr INTO l_dummy_var;
      CLOSE l_fndv_csr;

      -- if l_dummy_var still set to default, data was not found
      IF (l_dummy_var = '?') THEN
  	    OKC_API.SET_MESSAGE(p_app_name		=> g_app_name,
					    p_msg_name		=> 'OKL_NO_PARENT_RECORD',
					    p_token1		=> g_col_name_token,
					    p_token1_value	=> 'currency_code',
					    p_token2		=> g_child_table_token,
					    p_token2_value	=> 'OKL_TRX_AP_INVOICES_V',
					    p_token3		=> g_parent_table_token,
					    p_token3_value	=> 'FND_CURRENCIES');
	    -- notify caller of an error
         x_return_status := OKC_API.G_RET_STS_ERROR;
      END IF;


  EXCEPTION
    WHEN G_EXCEPTION_HALT_VALIDATION THEN


      -- no processing necessary; validation can continue with next column
      NULL;

    WHEN OTHERS THEN


	  -- store SQL error message on message stack
  	  OKC_API.SET_MESSAGE(p_app_name		=> g_app_name,
					  p_msg_name		=> g_unexpected_error,
					  p_token1		=> g_sqlcode_token,
					  p_token1_value	=> SQLCODE,
					  p_token2		=> g_sqlerrm_token,
					  p_token2_value	=> SQLERRM);
	   -- notify caller of an error as UNEXPETED error
        x_return_status := OKC_API.G_RET_STS_UNEXP_ERROR;

        -- verify that cursor was closed
        IF l_fndv_csr%ISOPEN THEN
	      CLOSE l_fndv_csr;
        END IF;


END validate_currency_code;

PROCEDURE validate_orig_sys_code
 (x_return_status OUT NOCOPY   VARCHAR2,
  p_orig_system_source_code  IN    okc_k_headers_b.orig_system_source_code%TYPE
 ) IS
  BEGIN


    -- initialize return status
    x_return_status := OKC_API.G_RET_STS_SUCCESS;

    -- enforce foreign key if data exists
    IF (p_orig_system_source_code <> OKC_API.G_MISS_CHAR AND
	   p_orig_system_source_code IS NOT NULL)
    THEN
      -- Check if the value is a valid code from lookup table
      x_return_status := OKC_UTIL.check_lookup_code('OKC_CONTRACT_SOURCES',
				     p_orig_system_source_code);
      IF (x_return_status = OKC_API.G_RET_STS_ERROR) THEN
	    --set error message in message stack
	    OKC_API.SET_MESSAGE(
			p_app_name	=> G_APP_NAME,
			p_msg_name	=> G_INVALID_VALUE,
			p_token1		=> G_COL_NAME_TOKEN,
			p_token1_value => 'ORIG_SYSTEM_SOURCE_CODE');
	    RAISE G_EXCEPTION_HALT_VALIDATION;
      ELSIF (x_return_status = OKC_API.G_RET_STS_UNEXP_ERROR) THEN
	    RAISE G_EXCEPTION_HALT_VALIDATION;
      END IF;
    END IF;


  EXCEPTION
    WHEN OTHERS THEN


	  -- store SQL error message on message stack
  	  OKC_API.SET_MESSAGE(p_app_name	=> g_app_name,
					  p_msg_name	=> g_unexpected_error,
					  p_token1	=> g_sqlcode_token,
					  p_token1_value=> SQLCODE,
					  p_token2	=> g_sqlerrm_token,
					  p_token2_value=> SQLERRM);
	   -- notify caller of an error as UNEXPETED error
        x_return_status := OKC_API.G_RET_STS_UNEXP_ERROR;

  END validate_orig_sys_code;

 PROCEDURE validate_currency_conv_type
  (x_return_status OUT NOCOPY   VARCHAR2,
   p_currency_conversion_type IN    okc_k_headers_b.conversion_type%TYPE) IS

  --cursor to chk currency type fk
  CURSOR curr_conv_type_csr (p_curr_cotyp IN VARCHAR2) IS
  SELECT '!'
  FROM   gl_daily_conversion_types
  WHERE  conversion_type = p_curr_cotyp;

  l_valid_convert_type VARCHAR2(1) DEFAULT '?';
  BEGIN
    -- initialize return status
    x_return_status := OKC_API.G_RET_STS_SUCCESS;
    IF (p_CURRENCY_CONVERSION_TYPE <> OKC_API.G_MISS_CHAR AND
  	   p_CURRENCY_CONVERSION_TYPE IS NOT NULL)
    THEN
      -- check allowed values
      l_valid_convert_type := '?';
      OPEN curr_conv_type_csr(p_curr_cotyp => p_CURRENCY_CONVERSION_TYPE);
      FETCH  curr_conv_type_csr INTO l_valid_convert_type;
      IF curr_conv_type_csr%NOTFOUND THEN
          NULL;
      END IF;
      CLOSE curr_conv_type_csr;

      IF (l_valid_convert_type = '?')  THEN
  	    OKC_API.SET_MESSAGE(p_app_name		=> g_app_name,
				p_msg_name		=> g_invalid_value,
				p_token1		=> g_col_name_token,
				p_token1_value	=> 'CURRENCY_CONVERSION_TYPE');
	     -- notify caller of an error
          x_return_status := OKC_API.G_RET_STS_ERROR;
      END IF;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
	  -- store SQL error message on message stack
  	  OKC_API.SET_MESSAGE(p_app_name		=> g_app_name,
					  p_msg_name		=> g_unexpected_error,
					  p_token1		=> g_sqlcode_token,
					  p_token1_value	=> SQLCODE,
					  p_token2		=> g_sqlerrm_token,
					  p_token2_value	=> SQLERRM);
	   -- notify caller of an error as UNEXPETED error
        x_return_status := OKC_API.G_RET_STS_UNEXP_ERROR;
  END validate_CURRENCY_CONV_TYPE;

PROCEDURE validate_amd_code(x_return_status OUT NOCOPY   VARCHAR2,
                            p_amd_code IN okl_k_headers.amd_code%TYPE) IS
  BEGIN
    -- initialize return status
    x_return_status := OKC_API.G_RET_STS_SUCCESS;

    -- enforce foreign key if data exists
    IF (p_AMD_CODE <> OKC_API.G_MISS_CHAR AND
	   p_AMD_CODE IS NOT NULL)
    THEN
      -- Check if the value is a valid code from lookup table
      x_return_status := OKC_UTIL.check_lookup_code('OKL_ACCEPTANCE_METHOD',
						    p_AMD_CODE);
      IF (x_return_status = OKC_API.G_RET_STS_ERROR) THEN
	    --set error message in message stack
	    OKC_API.SET_MESSAGE(
			p_app_name	=> G_APP_NAME,
			p_msg_name	=> G_INVALID_VALUE,
			p_token1		=> G_COL_NAME_TOKEN,
			p_token1_value => 'ACCEPTANCE_METHOD');
	    RAISE G_EXCEPTION_HALT_VALIDATION;
      ELSIF (x_return_status = OKC_API.G_RET_STS_UNEXP_ERROR) THEN
	    RAISE G_EXCEPTION_HALT_VALIDATION;
      END IF;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
	  -- store SQL error message on message stack
  	  OKC_API.SET_MESSAGE(p_app_name		=> g_app_name,
					  p_msg_name		=> g_unexpected_error,
					  p_token1		=> g_sqlcode_token,
					  p_token1_value	=> SQLCODE,
					  p_token2		=> g_sqlerrm_token,
					  p_token2_value	=> SQLERRM);
	   -- notify caller of an error as UNEXPETED error
        x_return_status := OKC_API.G_RET_STS_UNEXP_ERROR;
  END validate_AMD_CODE;
/*
*/

FUNCTION find_bid_mapping_id(p_id IN NUMBER, p_lse_id IN NUMBER) RETURN VARCHAR2 IS
hi NUMBER;
lo NUMBER;
m NUMBER;
l_id NUMBER;
BEGIN
  --l_id := p_id*100 + p_lse_id ;
  l_id := p_id;
  lo := 1;
  hi := l_counter - 1;
  WHILE (lo <= hi) LOOP
    m := FLOOR((hi + lo)/2);
    IF (l_bid_mapping_tab(m).old_id = l_id) THEN
      RETURN l_bid_mapping_tab(m).new_id;
    ELSIF (l_bid_mapping_tab(m).old_id > l_id) THEN
      hi := m - 1;
    ELSE
      lo := m + 1;
    END IF;
  END LOOP;
  RETURN '-1';
END;  /* find_bid_mapping_id */

PROCEDURE sort_bid_mapping_tab IS
  TYPE numtabtype IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
  --a numtabtype;
  l_stack numtabtype;
  l_stack_index NUMBER := 0;
  N NUMBER;
  R NUMBER;
  L NUMBER;
  P NUMBER;
  W NUMBER;
  W2 VARCHAR2(150);
  X NUMBER;
  I NUMBER;
  J NUMBER;
BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  NULL;

  N := l_counter - 1;
  IF (N < 2) THEN
    RETURN;
  END IF;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := 1;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := N;

  --dbms_output.put_line('l_stack_index=' || l_stack_index);
  WHILE l_stack_index > 0
  LOOP
    R := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    L := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    --dbms_output.put_line('Pop: l_stack_index=' || l_stack_index);
    WHILE 1=1
    LOOP -- loop until L >= R
      I := L;
      J := R;
      P := FLOOR((L+R)/2);
      --if (a(L) > a(P)) then
      IF (l_bid_mapping_tab(L).old_id > l_bid_mapping_tab(P).old_id)
      THEN
        W := l_bid_mapping_tab(L).old_id;
        W2 := l_bid_mapping_tab(L).new_id;
        l_bid_mapping_tab(L).old_id :=l_bid_mapping_tab(P).old_id;
        l_bid_mapping_tab(L).new_id :=l_bid_mapping_tab(P).new_id;
        l_bid_mapping_tab(P).old_id := W;
        l_bid_mapping_tab(P).new_id := W2;
      END IF;
      --if (a(L) > a(R)) then
      IF (l_bid_mapping_tab(L).old_id > l_bid_mapping_tab(R).old_id)
      THEN
        W := l_bid_mapping_tab(L).old_id;
        W2 := l_bid_mapping_tab(L).new_id;
        l_bid_mapping_tab(L).old_id :=l_bid_mapping_tab(R).old_id;
        l_bid_mapping_tab(L).new_id :=l_bid_mapping_tab(R).new_id;
        l_bid_mapping_tab(R).old_id := W;
        l_bid_mapping_tab(R).new_id := W2;
      END IF;
      --if (a(P) > a(R)) then
      IF (l_bid_mapping_tab(P).old_id > l_bid_mapping_tab(R).old_id)
      THEN
        W := l_bid_mapping_tab(P).old_id;
        W2 := l_bid_mapping_tab(P).new_id;
        l_bid_mapping_tab(P).old_id :=l_bid_mapping_tab(R).old_id;
        l_bid_mapping_tab(P).new_id :=l_bid_mapping_tab(R).new_id;
        l_bid_mapping_tab(R).old_id := W;
        l_bid_mapping_tab(R).new_id := W2;
      END IF;
      --X := a(P);
      X := l_bid_mapping_tab(P).old_id;
      WHILE 1=1
      LOOP    -- until I > J
        --while (a(I) < X) loop
        WHILE (l_bid_mapping_tab(I).old_id < X) LOOP
          I := I + 1;
        END LOOP;
        WHILE (X < l_bid_mapping_tab(J).old_id) LOOP
          J := J - 1;
        END LOOP;
        IF (I <= J) THEN
          W := l_bid_mapping_tab(I).old_id;
          W2 := l_bid_mapping_tab(I).new_id;
          l_bid_mapping_tab(I).old_id :=l_bid_mapping_tab(J).old_id;
          l_bid_mapping_tab(I).new_id :=l_bid_mapping_tab(J).new_id;
          l_bid_mapping_tab(J).old_id := W;
          l_bid_mapping_tab(J).new_id := W2;
          I := I + 1;
          J := J - 1;
        END IF;
        EXIT WHEN I > J;
      END LOOP;
      IF (J - L < R - I) THEN
        IF (I < R) THEN
          --push(I); push(R);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := I;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := R;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        R := J;
      ELSE
        IF (L < J) THEN
          --push(L); push(J);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := L;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := J;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        L := I;
      END IF;

      EXIT WHEN (L >= R);
    END LOOP;
  END LOOP;

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'sort_bid_mapping_tab');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing sort_bid_mapping_tab:l_bid_mapping_tab N=' || N || ' ...');
  END IF;

  --print array
  FOR i IN 1..N
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_bid_mapping_tab('||i||')=' || l_bid_mapping_tab(i).old_id || ':' || l_bid_mapping_tab(i).new_id);
    END IF;
  END LOOP;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;  /* sort_bid_mapping_tab */

FUNCTION find_cle_lse_mapping_id(p_cle_id IN NUMBER, p_lse_id IN NUMBER) RETURN NUMBER IS
hi NUMBER;
lo NUMBER;
m NUMBER;
l_start NUMBER;
l_found BOOLEAN;
l_orig_cle_id NUMBER;
l_curr_cle_id NUMBER;
BEGIN
  lo := 1;
  hi := l_cle_lse_counter - 1;
  WHILE (lo <= hi) LOOP
    m := FLOOR((hi + lo)/2);
    --print('Searching at m=' || m);
    IF (l_cle_lse_mapping_tab(m).cle_id = p_cle_id) THEN
      --print('Found at m=' || m);
      IF (l_cle_lse_mapping_tab(m).lse_id = p_lse_id) THEN
        --print('Returning value from index m=' || m);
        RETURN l_cle_lse_mapping_tab(m).id;
      ELSE
         -- Loop thru sequentially from m below until lse_id matches
        --print('Going down...');
        l_found := FALSE;
        l_orig_cle_id := l_cle_lse_mapping_tab(m).cle_id;
        l_start := m;
        l_curr_cle_id := l_cle_lse_mapping_tab(l_start).cle_id;
        WHILE (NOT(l_found) AND (l_curr_cle_id = l_orig_cle_id))
        LOOP
          IF (l_cle_lse_mapping_tab(l_start).lse_id = p_lse_id) THEN
            l_found := TRUE;
          ELSE
            l_start := l_start + 1;
            EXIT WHEN l_start > hi;
            l_curr_cle_id := l_cle_lse_mapping_tab(l_start).cle_id;
          END IF;
        END LOOP;
        IF (l_found) THEN
          --print('Found at down... l_start'||l_start);
          RETURN l_cle_lse_mapping_tab(l_start).id;
        END IF;

         -- Loop thru sequentially from m above until lse_id matches
        --print('Going up...');
        l_found := FALSE;
        l_orig_cle_id := l_cle_lse_mapping_tab(m).cle_id;
        l_start := m;
        l_curr_cle_id := l_cle_lse_mapping_tab(l_start).cle_id;
        WHILE (NOT(l_found) AND (l_curr_cle_id = l_orig_cle_id))
        LOOP
          IF (l_cle_lse_mapping_tab(l_start).lse_id = p_lse_id) THEN
            l_found := TRUE;
          ELSE
            l_start := l_start - 1;
            EXIT WHEN l_start < lo;
            l_curr_cle_id := l_cle_lse_mapping_tab(l_start).cle_id;
          END IF;
        END LOOP;
        IF (l_found) THEN
          --print('Found at up... l_start='||l_start);
          RETURN l_cle_lse_mapping_tab(l_start).id;
        END IF;

        RETURN -1;
      END IF;
    ELSIF (l_cle_lse_mapping_tab(m).cle_id > p_cle_id) THEN
      hi := m - 1;
    ELSE
      lo := m + 1;
    END IF;
  END LOOP;
  RETURN -1;
END;  /* find_cle_lse_mapping_id */

PROCEDURE sort_cle_lse_mapping_tab IS
  TYPE numtabtype IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
  --a numtabtype;
  l_stack numtabtype;
  l_stack_index NUMBER := 0;
  N NUMBER;
  R NUMBER;
  L NUMBER;
  P NUMBER;
  W NUMBER;
  W2 NUMBER;
  W3 NUMBER;
  X NUMBER;
  I NUMBER;
  J NUMBER;
BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  NULL;

  N := l_cle_lse_counter - 1;
  IF (N < 2) THEN
    RETURN;
  END IF;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := 1;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := N;

  --dbms_output.put_line('l_stack_index=' || l_stack_index);
  WHILE l_stack_index > 0
  LOOP
    R := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    L := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    --dbms_output.put_line('Pop: l_stack_index=' || l_stack_index);
    WHILE 1=1
    LOOP -- loop until L >= R
      I := L;
      J := R;
      P := FLOOR((L+R)/2);
      --if (a(L) > a(P)) then
      IF (l_cle_lse_mapping_tab(L).cle_id > l_cle_lse_mapping_tab(P).cle_id)
      THEN
        W := l_cle_lse_mapping_tab(L).cle_id;
        W2 := l_cle_lse_mapping_tab(L).id;
        W3 := l_cle_lse_mapping_tab(L).lse_id;
        l_cle_lse_mapping_tab(L).cle_id :=l_cle_lse_mapping_tab(P).cle_id;
        l_cle_lse_mapping_tab(L).id :=l_cle_lse_mapping_tab(P).id;
        l_cle_lse_mapping_tab(L).lse_id :=l_cle_lse_mapping_tab(P).lse_id;
        l_cle_lse_mapping_tab(P).cle_id := W;
        l_cle_lse_mapping_tab(P).id := W2;
        l_cle_lse_mapping_tab(P).lse_id := W3;
      END IF;
      --if (a(L) > a(R)) then
      IF (l_cle_lse_mapping_tab(L).cle_id > l_cle_lse_mapping_tab(R).cle_id)
      THEN
        W := l_cle_lse_mapping_tab(L).cle_id;
        W2 := l_cle_lse_mapping_tab(L).id;
        W3 := l_cle_lse_mapping_tab(L).lse_id;
        l_cle_lse_mapping_tab(L).cle_id :=l_cle_lse_mapping_tab(R).cle_id;
        l_cle_lse_mapping_tab(L).id :=l_cle_lse_mapping_tab(R).id;
        l_cle_lse_mapping_tab(L).lse_id :=l_cle_lse_mapping_tab(R).lse_id;
        l_cle_lse_mapping_tab(R).cle_id := W;
        l_cle_lse_mapping_tab(R).id := W2;
        l_cle_lse_mapping_tab(R).lse_id := W3;
      END IF;
      --if (a(P) > a(R)) then
      IF (l_cle_lse_mapping_tab(P).cle_id > l_cle_lse_mapping_tab(R).cle_id)
      THEN
        W := l_cle_lse_mapping_tab(P).cle_id;
        W2 := l_cle_lse_mapping_tab(P).id;
        W3 := l_cle_lse_mapping_tab(P).lse_id;
        l_cle_lse_mapping_tab(P).cle_id :=l_cle_lse_mapping_tab(R).cle_id;
        l_cle_lse_mapping_tab(P).id :=l_cle_lse_mapping_tab(R).id;
        l_cle_lse_mapping_tab(P).lse_id :=l_cle_lse_mapping_tab(R).lse_id;
        l_cle_lse_mapping_tab(R).cle_id := W;
        l_cle_lse_mapping_tab(R).id := W2;
        l_cle_lse_mapping_tab(R).lse_id := W3;
      END IF;
      --X := a(P);
      X := l_cle_lse_mapping_tab(P).cle_id;
      WHILE 1=1
      LOOP    -- until I > J
        --while (a(I) < X) loop
        WHILE (l_cle_lse_mapping_tab(I).cle_id < X) LOOP
          I := I + 1;
        END LOOP;
        WHILE (X < l_cle_lse_mapping_tab(J).cle_id) LOOP
          J := J - 1;
        END LOOP;
        IF (I <= J) THEN
          W := l_cle_lse_mapping_tab(I).cle_id;
          W2 := l_cle_lse_mapping_tab(I).id;
          W3 := l_cle_lse_mapping_tab(I).lse_id;
          l_cle_lse_mapping_tab(I).cle_id :=l_cle_lse_mapping_tab(J).cle_id;
          l_cle_lse_mapping_tab(I).id :=l_cle_lse_mapping_tab(J).id;
          l_cle_lse_mapping_tab(I).lse_id :=l_cle_lse_mapping_tab(J).lse_id;
          l_cle_lse_mapping_tab(J).cle_id := W;
          l_cle_lse_mapping_tab(J).id := W2;
          l_cle_lse_mapping_tab(J).lse_id := W3;
          I := I + 1;
          J := J - 1;
        END IF;
        EXIT WHEN I > J;
      END LOOP;
      IF (J - L < R - I) THEN
        IF (I < R) THEN
          --push(I); push(R);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := I;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := R;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        R := J;
      ELSE
        IF (L < J) THEN
          --push(L); push(J);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := L;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := J;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        L := I;
      END IF;

      EXIT WHEN (L >= R);
    END LOOP;
  END LOOP;

  /*print('Now printing cle_lse_mapping_tab...');
  for i in 1..N
  loop
    print('l_cle_lse_mapping_tab('||i||')=' || l_cle_lse_mapping_tab(i).cle_id || ':' || l_cle_lse_mapping_tab(i).lse_id || ':' ||l_cle_lse_mapping_tab(i).id);
  end loop;*/

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'sort_cle_lse_mapping_tab');*/
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing sort_cle_lse_mapping_tab:l_cle_lse_mapping_tab N=' || N || ' ...');
  END IF;

  --print array
  FOR i IN 1..N
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_cle_lse_mapping_tab('||i||')=' || l_cle_lse_mapping_tab(i).cle_id || ':' || l_cle_lse_mapping_tab(i).id);
    END IF;
  END LOOP;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;  /* sort_cle_lse_mapping_tab */


FUNCTION find_cid_mapping_id(p_id IN NUMBER) RETURN NUMBER IS
hi NUMBER;
lo NUMBER;
m NUMBER;
BEGIN
  lo := 1;
  hi := l_cid_counter - 1;
  WHILE (lo <= hi) LOOP
    m := FLOOR((hi + lo)/2);
    IF (l_cid_mapping_tab(m).old_id = p_id) THEN
      RETURN l_cid_mapping_tab(m).new_id;
    ELSIF (l_cid_mapping_tab(m).old_id > p_id) THEN
      hi := m - 1;
    ELSE
      lo := m + 1;
    END IF;
  END LOOP;
  RETURN -1;
END;  /* find_cid_mapping_id */

PROCEDURE sort_cid_mapping_tab IS
  TYPE numtabtype IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
  --a numtabtype;
  l_stack numtabtype;
  l_stack_index NUMBER := 0;
  N NUMBER;
  R NUMBER;
  L NUMBER;
  P NUMBER;
  W NUMBER;
  W2 NUMBER;
  X NUMBER;
  I NUMBER;
  J NUMBER;
BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  NULL;

  N := l_cid_counter - 1;
  IF (N < 2) THEN
    RETURN;
  END IF;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := 1;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := N;

  --dbms_output.put_line('l_stack_index=' || l_stack_index);
  WHILE l_stack_index > 0
  LOOP
    R := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    L := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    --dbms_output.put_line('Pop: l_stack_index=' || l_stack_index);
    WHILE 1=1
    LOOP -- loop until L >= R
      I := L;
      J := R;
      P := FLOOR((L+R)/2);
      --if (a(L) > a(P)) then
      IF (l_cid_mapping_tab(L).old_id > l_cid_mapping_tab(P).old_id)
      THEN
        W := l_cid_mapping_tab(L).old_id;
        W2 := l_cid_mapping_tab(L).new_id;
        l_cid_mapping_tab(L).old_id :=l_cid_mapping_tab(P).old_id;
        l_cid_mapping_tab(L).new_id :=l_cid_mapping_tab(P).new_id;
        l_cid_mapping_tab(P).old_id := W;
        l_cid_mapping_tab(P).new_id := W2;
      END IF;
      --if (a(L) > a(R)) then
      IF (l_cid_mapping_tab(L).old_id > l_cid_mapping_tab(R).old_id)
      THEN
        W := l_cid_mapping_tab(L).old_id;
        W2 := l_cid_mapping_tab(L).new_id;
        l_cid_mapping_tab(L).old_id :=l_cid_mapping_tab(R).old_id;
        l_cid_mapping_tab(L).new_id :=l_cid_mapping_tab(R).new_id;
        l_cid_mapping_tab(R).old_id := W;
        l_cid_mapping_tab(R).new_id := W2;
      END IF;
      --if (a(P) > a(R)) then
      IF (l_cid_mapping_tab(P).old_id > l_cid_mapping_tab(R).old_id)
      THEN
        W := l_cid_mapping_tab(P).old_id;
        W2 := l_cid_mapping_tab(P).new_id;
        l_cid_mapping_tab(P).old_id :=l_cid_mapping_tab(R).old_id;
        l_cid_mapping_tab(P).new_id :=l_cid_mapping_tab(R).new_id;
        l_cid_mapping_tab(R).old_id := W;
        l_cid_mapping_tab(R).new_id := W2;
      END IF;
      --X := a(P);
      X := l_cid_mapping_tab(P).old_id;
      WHILE 1=1
      LOOP    -- until I > J
        --while (a(I) < X) loop
        WHILE (l_cid_mapping_tab(I).old_id < X) LOOP
          I := I + 1;
        END LOOP;
        WHILE (X < l_cid_mapping_tab(J).old_id) LOOP
          J := J - 1;
        END LOOP;
        IF (I <= J) THEN
          W := l_cid_mapping_tab(I).old_id;
          W2 := l_cid_mapping_tab(I).new_id;
          l_cid_mapping_tab(I).old_id :=l_cid_mapping_tab(J).old_id;
          l_cid_mapping_tab(I).new_id :=l_cid_mapping_tab(J).new_id;
          l_cid_mapping_tab(J).old_id := W;
          l_cid_mapping_tab(J).new_id := W2;
          I := I + 1;
          J := J - 1;
        END IF;
        EXIT WHEN I > J;
      END LOOP;
      IF (J - L < R - I) THEN
        IF (I < R) THEN
          --push(I); push(R);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := I;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := R;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        R := J;
      ELSE
        IF (L < J) THEN
          --push(L); push(J);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := L;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := J;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        L := I;
      END IF;

      EXIT WHEN (L >= R);
    END LOOP;
  END LOOP;

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'sort_cid_mapping_tab');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing sort_cid_mapping_tab:l_cid_mapping_tab N=' || N || ' ...');
  END IF;

  --print array
  FOR i IN 1..N
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_cid_mapping_tab('||i||')=' || l_cid_mapping_tab(i).old_id || ':' || l_cid_mapping_tab(i).new_id);
    END IF;
  END LOOP;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;  /* sort_cid_mapping_tab */

PROCEDURE do_sort IS
  TYPE numtabtype IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
  --a numtabtype;
  l_stack numtabtype;
  l_stack_index NUMBER := 0;
  N NUMBER;
  R NUMBER;
  L NUMBER;
  P NUMBER;
  W NUMBER;
  W2 NUMBER;
  X NUMBER;
  I NUMBER;
  J NUMBER;
BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  NULL;
  /*a(1) := 10;
  a(2) := 50;
  a(3) := 27;
  a(4) := 5;
  a(5) := 100;
  a(6) := 50;
  a(7) := 35;
  a(8) := 41;
  a(9) := 75;
  a(10) := 20;

  N := 10;
  */

  N := l_counter - 1;
  IF (N < 2) THEN
    RETURN;
  END IF;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := 1;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := N;

  --dbms_output.put_line('l_stack_index=' || l_stack_index);
  WHILE l_stack_index > 0
  LOOP
    R := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    L := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    --dbms_output.put_line('Pop: l_stack_index=' || l_stack_index);
    WHILE 1=1
    LOOP -- loop until L >= R
      I := L;
      J := R;
      P := FLOOR((L+R)/2);
      --if (a(L) > a(P)) then
      IF (l_orig_system_tab(L).orig_system_id1 > l_orig_system_tab(P).orig_system_id1)
      THEN
        /*W := a(L);
        a(L) := a(P);
        a(P) := W;*/

        W := l_orig_system_tab(L).orig_system_id1;
        W2 := l_orig_system_tab(L).id;
        l_orig_system_tab(L).orig_system_id1 :=l_orig_system_tab(P).orig_system_id1;
        l_orig_system_tab(L).id :=l_orig_system_tab(P).id;
        l_orig_system_tab(P).orig_system_id1 := W;
        l_orig_system_tab(P).id := W2;
      END IF;
      --if (a(L) > a(R)) then
      IF (l_orig_system_tab(L).orig_system_id1 > l_orig_system_tab(R).orig_system_id1)
      THEN
        /*W := a(L);
        a(L) := a(R);
        a(R) := W;*/
        W := l_orig_system_tab(L).orig_system_id1;
        W2 := l_orig_system_tab(L).id;
        l_orig_system_tab(L).orig_system_id1 :=l_orig_system_tab(R).orig_system_id1;
        l_orig_system_tab(L).id :=l_orig_system_tab(R).id;
        l_orig_system_tab(R).orig_system_id1 := W;
        l_orig_system_tab(R).id := W2;
      END IF;
      --if (a(P) > a(R)) then
      IF (l_orig_system_tab(P).orig_system_id1 > l_orig_system_tab(R).orig_system_id1)
      THEN
        /*W := a(P);
        a(P) := a(R);
        a(R) := W; */
        W := l_orig_system_tab(P).orig_system_id1;
        W2 := l_orig_system_tab(P).id;
        l_orig_system_tab(P).orig_system_id1 :=l_orig_system_tab(R).orig_system_id1;
        l_orig_system_tab(P).id :=l_orig_system_tab(R).id;
        l_orig_system_tab(R).orig_system_id1 := W;
        l_orig_system_tab(R).id := W2;
      END IF;
      --X := a(P);
      X := l_orig_system_tab(P).orig_system_id1;
      WHILE 1=1
      LOOP    -- until I > J
        --while (a(I) < X) loop
        WHILE (l_orig_system_tab(I).orig_system_id1 < X) LOOP
          I := I + 1;
        END LOOP;
        WHILE (X < l_orig_system_tab(J).orig_system_id1) LOOP
          J := J - 1;
        END LOOP;
        IF (I <= J) THEN
          /*W := a(I);
          a(I) := a(J);
          a(J) := W;*/
          W := l_orig_system_tab(I).orig_system_id1;
          W2 := l_orig_system_tab(I).id;
          l_orig_system_tab(I).orig_system_id1 :=l_orig_system_tab(J).orig_system_id1;
          l_orig_system_tab(I).id :=l_orig_system_tab(J).id;
          l_orig_system_tab(J).orig_system_id1 := W;
          l_orig_system_tab(J).id := W2;
          I := I + 1;
          J := J - 1;
        END IF;
        EXIT WHEN I > J;
      END LOOP;
      IF (J - L < R - I) THEN
        IF (I < R) THEN
          --push(I); push(R);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := I;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := R;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        R := J;
      ELSE
        IF (L < J) THEN
          --push(L); push(J);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := L;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := J;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        L := I;
      END IF;

      EXIT WHEN (L >= R);
    END LOOP;
  END LOOP;


EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'do_sort');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing do_sort:l_orig_system_tab N=' || N || ' ...');
  END IF;

  --print array
  FOR i IN 1..N
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_orig_system_tab('||i||')=' || l_orig_system_tab(i).orig_system_id1 || ':' || l_orig_system_tab(i).id);
    END IF;
  END LOOP;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;  /* do_sort */

FUNCTION find_id(p_id IN NUMBER) RETURN NUMBER IS
hi NUMBER;
lo NUMBER;
m NUMBER;
BEGIN
  lo := 1;
  hi := l_counter - 1;
  WHILE (lo <= hi) LOOP
    m := FLOOR((hi + lo)/2);
    IF (l_orig_system_tab(m).orig_system_id1 = p_id) THEN
      RETURN l_orig_system_tab(m).id;
    ELSIF (l_orig_system_tab(m).orig_system_id1 > p_id) THEN
      hi := m - 1;
    ELSE
      lo := m + 1;
    END IF;
  END LOOP;
  RETURN -1;
END;  /* find_id */

/* AKP To do: Delete this procedure from here.
              After the spec in okl_copy_asset_pvt spec has been changed to
              expose this function */
  FUNCTION generate_asset_number(x_asset_number OUT NOCOPY OKL_TXL_ASSETS_V.ASSET_NUMBER%TYPE)
  RETURN VARCHAR2 IS
    x_return_status            VARCHAR2(3) := OKL_API.G_RET_STS_SUCCESS;
    ln_dummy1                  NUMBER := 0;
    ln_dummy2                  NUMBER := 0;
    ln_dummy3                  NUMBER := 0;
    lv_asset_number            OKX_ASSETS_V.ASSET_NUMBER%TYPE;
    G_APP_NAME                    CONSTANT  VARCHAR2(3)   :=  OKL_API.G_APP_NAME;
    G_UNEXPECTED_ERROR            CONSTANT  VARCHAR2(200) := 'OKL_CONTRACTS_UNEXP_ERROR';
    G_SQLCODE_TOKEN               CONSTANT  VARCHAR2(200) := 'SQLcode';
    G_SQLERRM_TOKEN               CONSTANT  VARCHAR2(200) := 'SQLerrm';

    -- cursor to get sequence number for asset number
    CURSOR c_asset_no IS
    SELECT 'OKL'||OKL_FAN_SEQ.NEXTVAL
    FROM dual;

    -- cursor to get check the existence of asset number
    CURSOR c_txl_asset_number(p_asset_number OKX_ASSETS_V.ASSET_NUMBER%TYPE)
    IS
    SELECT 1
    FROM DUAL
    WHERE EXISTS (SELECT '1'
                  FROM OKL_TXL_ASSETS_B
                  WHERE asset_number = p_asset_number);

    CURSOR c_okx_asset_lines_v(p_asset_number OKX_ASSETS_V.ASSET_NUMBER%TYPE) IS
    SELECT 1
    FROM DUAL
    WHERE EXISTS (SELECT '1'
                  FROM OKX_ASSET_LINES_V
                  WHERE asset_number = p_asset_number);

    CURSOR c_okx_assets_v(p_asset_number OKX_ASSETS_V.ASSET_NUMBER%TYPE) IS
    SELECT 1
    FROM DUAL
    WHERE EXISTS (SELECT '1'
                  FROM OKX_ASSETS_V
                  WHERE asset_number = p_asset_number);

  BEGIN
    OPEN  c_asset_no;
    FETCH c_asset_no INTO x_asset_number;
    IF (c_asset_no%NOTFOUND) THEN
      x_return_status := OKC_API.G_RET_STS_ERROR;
      OKL_API.SET_MESSAGE(p_app_name 	   => g_app_name,
                          p_msg_name	   => g_unexpected_error,
                          p_token1	   => g_sqlcode_token,
                          p_token1_value => SQLCODE,
           			      p_token2	   => g_sqlerrm_token,
              			  p_token2_value => SQLERRM);
    END IF;
    CLOSE c_asset_no;

    LOOP
      lv_asset_number := x_asset_number;

      OPEN  c_txl_asset_number(lv_asset_number);
      FETCH c_txl_asset_number INTO ln_dummy1;
      IF c_txl_asset_number%NOTFOUND THEN
        ln_dummy1 := 0;
      END IF;
      CLOSE c_txl_asset_number;

      OPEN c_okx_asset_lines_v(lv_asset_number);
      FETCH c_okx_asset_lines_v INTO ln_dummy2;
      IF c_okx_asset_lines_v%NOTFOUND THEN
        ln_dummy2 := 0;
      END IF;
      CLOSE c_okx_asset_lines_v;

      OPEN c_okx_assets_v(lv_asset_number);
      FETCH c_okx_assets_v INTO ln_dummy3;
      IF c_okx_assets_v%NOTFOUND THEN
        ln_dummy3 := 0;
      END IF;
      CLOSE c_okx_assets_v;

      IF ln_dummy1 = 1 OR
         ln_dummy2 = 1 OR
         ln_dummy3 = 1 THEN
        OPEN  c_asset_no;
        FETCH c_asset_no INTO x_asset_number;
        IF (c_asset_no%NOTFOUND) THEN
          x_return_status := OKC_API.G_RET_STS_ERROR;
          OKL_API.SET_MESSAGE(p_app_name 	   => g_app_name,
                              p_msg_name	   => g_unexpected_error,
                              p_token1	       => g_sqlcode_token,
                              p_token1_value   => SQLCODE,
           			          p_token2	       => g_sqlerrm_token,
                 			  p_token2_value   => SQLERRM);
        END IF;
        CLOSE c_asset_no;
      ELSE
        EXIT;
      END IF;
    END LOOP;

    RETURN x_return_status;
  EXCEPTION
    WHEN OTHERS THEN
      IF c_asset_no%ISOPEN THEN
        CLOSE c_asset_no;
      END IF;
      IF c_txl_asset_number%ISOPEN THEN
        CLOSE c_txl_asset_number;
      END IF;
      IF c_okx_asset_lines_v%ISOPEN THEN
        CLOSE c_okx_asset_lines_v;
      END IF;
      IF c_okx_assets_v%ISOPEN THEN
        CLOSE c_okx_assets_v;
      END IF;
      x_return_status := OKC_API.G_RET_STS_UNEXP_ERROR;
      OKL_API.SET_MESSAGE(p_app_name 	 => g_app_name,
                          p_msg_name	 => g_unexpected_error,
                          p_token1	 => g_sqlcode_token,
                          p_token1_value => SQLCODE,
			  p_token2	 => g_sqlerrm_token,
			  p_token2_value => SQLERRM);
    RETURN x_return_status;
  END generate_asset_number;

FUNCTION find_cle_line_number2(p_id IN NUMBER) RETURN NUMBER IS
hi NUMBER;
lo NUMBER;
m NUMBER;
l_curr_val NUMBER;
BEGIN
  lo := 1;
  hi := l_trx_assets_counter6 - 1;
  WHILE (lo <= hi) LOOP
    m := FLOOR((hi + lo)/2);
    IF (l_cle_mapping_tab2(m).old_id = p_id) THEN
      l_curr_val := l_cle_mapping_tab2(m).new_id;
      l_cle_mapping_tab2(m).new_id := l_curr_val + 1;
      RETURN (l_curr_val + 1);
    ELSIF (l_cle_mapping_tab2(m).old_id > p_id) THEN
      hi := m - 1;
    ELSE
      lo := m + 1;
    END IF;
  END LOOP;
  RETURN -1;
END;  /* find_cle_line_number2 */

FUNCTION find_cle_line_number(p_id IN NUMBER) RETURN NUMBER IS
hi NUMBER;
lo NUMBER;
m NUMBER;
l_curr_val NUMBER;
BEGIN
  lo := 1;
  hi := l_trx_assets_counter4 - 1;
  WHILE (lo <= hi) LOOP
    m := FLOOR((hi + lo)/2);
    IF (l_cle_mapping_tab(m).old_id = p_id) THEN
      l_curr_val := l_cle_mapping_tab(m).line_number;
      l_cle_mapping_tab(m).line_number := l_curr_val + 1;
      RETURN l_curr_val;
    ELSIF (l_cle_mapping_tab(m).old_id > p_id) THEN
      hi := m - 1;
    ELSE
      lo := m + 1;
    END IF;
  END LOOP;
  RETURN -1;
END;  /* find_cle_line_number */

FUNCTION find_cle_mapping_id(p_id IN NUMBER) RETURN NUMBER IS
hi NUMBER;
lo NUMBER;
m NUMBER;
BEGIN
  lo := 1;
  hi := l_trx_assets_counter4 - 1;
  WHILE (lo <= hi) LOOP
    m := FLOOR((hi + lo)/2);
    IF (l_cle_mapping_tab(m).old_id = p_id) THEN
      RETURN l_cle_mapping_tab(m).new_id;
    ELSIF (l_cle_mapping_tab(m).old_id > p_id) THEN
      hi := m - 1;
    ELSE
      lo := m + 1;
    END IF;
  END LOOP;
  RETURN -1;
END;  /* find_cle_mapping_id */

PROCEDURE sort_cle_mapping_tab IS
  TYPE numtabtype IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
  --a numtabtype;
  l_stack numtabtype;
  l_stack_index NUMBER := 0;
  N NUMBER;
  R NUMBER;
  L NUMBER;
  P NUMBER;
  W NUMBER;
  W2 NUMBER;
  X NUMBER;
  I NUMBER;
  J NUMBER;
BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  NULL;

  N := l_trx_assets_counter4 - 1;
  IF (N < 2) THEN
    RETURN;
  END IF;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := 1;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := N;

  --dbms_output.put_line('l_stack_index=' || l_stack_index);
  WHILE l_stack_index > 0
  LOOP
    R := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    L := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    --dbms_output.put_line('Pop: l_stack_index=' || l_stack_index);
    WHILE 1=1
    LOOP -- loop until L >= R
      I := L;
      J := R;
      P := FLOOR((L+R)/2);
      --if (a(L) > a(P)) then
      IF (l_cle_mapping_tab(L).old_id > l_cle_mapping_tab(P).old_id)
      THEN
        W := l_cle_mapping_tab(L).old_id;
        W2 := l_cle_mapping_tab(L).new_id;
        l_cle_mapping_tab(L).old_id :=l_cle_mapping_tab(P).old_id;
        l_cle_mapping_tab(L).new_id :=l_cle_mapping_tab(P).new_id;
        l_cle_mapping_tab(P).old_id := W;
        l_cle_mapping_tab(P).new_id := W2;
      END IF;
      --if (a(L) > a(R)) then
      IF (l_cle_mapping_tab(L).old_id > l_cle_mapping_tab(R).old_id)
      THEN
        W := l_cle_mapping_tab(L).old_id;
        W2 := l_cle_mapping_tab(L).new_id;
        l_cle_mapping_tab(L).old_id :=l_cle_mapping_tab(R).old_id;
        l_cle_mapping_tab(L).new_id :=l_cle_mapping_tab(R).new_id;
        l_cle_mapping_tab(R).old_id := W;
        l_cle_mapping_tab(R).new_id := W2;
      END IF;
      --if (a(P) > a(R)) then
      IF (l_cle_mapping_tab(P).old_id > l_cle_mapping_tab(R).old_id)
      THEN
        W := l_cle_mapping_tab(P).old_id;
        W2 := l_cle_mapping_tab(P).new_id;
        l_cle_mapping_tab(P).old_id :=l_cle_mapping_tab(R).old_id;
        l_cle_mapping_tab(P).new_id :=l_cle_mapping_tab(R).new_id;
        l_cle_mapping_tab(R).old_id := W;
        l_cle_mapping_tab(R).new_id := W2;
      END IF;
      --X := a(P);
      X := l_cle_mapping_tab(P).old_id;
      WHILE 1=1
      LOOP    -- until I > J
        --while (a(I) < X) loop
        WHILE (l_cle_mapping_tab(I).old_id < X) LOOP
          I := I + 1;
        END LOOP;
        WHILE (X < l_cle_mapping_tab(J).old_id) LOOP
          J := J - 1;
        END LOOP;
        IF (I <= J) THEN
          W := l_cle_mapping_tab(I).old_id;
          W2 := l_cle_mapping_tab(I).new_id;
          l_cle_mapping_tab(I).old_id :=l_cle_mapping_tab(J).old_id;
          l_cle_mapping_tab(I).new_id :=l_cle_mapping_tab(J).new_id;
          l_cle_mapping_tab(J).old_id := W;
          l_cle_mapping_tab(J).new_id := W2;
          I := I + 1;
          J := J - 1;
        END IF;
        EXIT WHEN I > J;
      END LOOP;
      IF (J - L < R - I) THEN
        IF (I < R) THEN
          --push(I); push(R);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := I;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := R;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        R := J;
      ELSE
        IF (L < J) THEN
          --push(L); push(J);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := L;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := J;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        L := I;
      END IF;

      EXIT WHEN (L >= R);
    END LOOP;
  END LOOP;

  /*for i in 1..N
  loop
    print('l_cle_mapping_tab('||i||')=' || l_cle_mapping_tab(i).old_id || ':' || l_cle_mapping_tab(i).new_id);
  end loop; */

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'sort_cle_mapping_tab');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing sort_cle_mapping_tab:l_cle_mapping_tab N=' || N || ' ...');
  END IF;
  --print array
  FOR i IN 1..N
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_cle_mapping_tab('||i||')=' || l_cle_mapping_tab(i).old_id || ':' || l_cle_mapping_tab(i).new_id);
    END IF;
  END LOOP;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;  /* sort_cle_mapping_tab */


FUNCTION find_aid_mapping_id(p_id IN VARCHAR2) RETURN VARCHAR2 IS
hi NUMBER;
lo NUMBER;
m NUMBER;
p VARCHAR2(2) := '-1';
BEGIN
  lo := 1;
  hi := l_asset_counter - 1;
  WHILE (lo <= hi) LOOP
    m := FLOOR((hi + lo)/2);
    IF (l_aid_mapping_tab(m).old_id = p_id) THEN
      RETURN l_aid_mapping_tab(m).new_id;
    ELSIF (l_aid_mapping_tab(m).old_id > p_id) THEN
      hi := m - 1;
    ELSE
      lo := m + 1;
    END IF;
  END LOOP;
  RETURN p;
END;  /* find_aid_mapping_id */

PROCEDURE sort_aid_mapping_tab IS
  TYPE numtabtype IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
  --a numtabtype;
  l_stack numtabtype;
  l_stack_index NUMBER := 0;
  N NUMBER;
  R NUMBER;
  L NUMBER;
  P NUMBER;

  W VARCHAR2(150);
  W2 VARCHAR2(150);
  X VARCHAR2(150);
  I NUMBER;
  J NUMBER;
BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  NULL;

  N := l_asset_counter - 1;
  IF (N < 2) THEN
    RETURN;
  END IF;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := 1;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := N;

  --dbms_output.put_line('l_stack_index=' || l_stack_index);
  WHILE l_stack_index > 0
  LOOP
    R := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    L := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    --dbms_output.put_line('Pop: l_stack_index=' || l_stack_index);
    WHILE 1=1
    LOOP -- loop until L >= R
      I := L;
      J := R;
      P := FLOOR((L+R)/2);
      --if (a(L) > a(P)) then
      IF (l_aid_mapping_tab(L).old_id > l_aid_mapping_tab(P).old_id)
      THEN
        W := l_aid_mapping_tab(L).old_id;
        W2 := l_aid_mapping_tab(L).new_id;
        l_aid_mapping_tab(L).old_id :=l_aid_mapping_tab(P).old_id;
        l_aid_mapping_tab(L).new_id :=l_aid_mapping_tab(P).new_id;
        l_aid_mapping_tab(P).old_id := W;
        l_aid_mapping_tab(P).new_id := W2;
      END IF;
      --if (a(L) > a(R)) then
      IF (l_aid_mapping_tab(L).old_id > l_aid_mapping_tab(R).old_id)
      THEN
        W := l_aid_mapping_tab(L).old_id;
        W2 := l_aid_mapping_tab(L).new_id;
        l_aid_mapping_tab(L).old_id :=l_aid_mapping_tab(R).old_id;
        l_aid_mapping_tab(L).new_id :=l_aid_mapping_tab(R).new_id;
        l_aid_mapping_tab(R).old_id := W;
        l_aid_mapping_tab(R).new_id := W2;
      END IF;
      --if (a(P) > a(R)) then
      IF (l_aid_mapping_tab(P).old_id > l_aid_mapping_tab(R).old_id)
      THEN
        W := l_aid_mapping_tab(P).old_id;
        W2 := l_aid_mapping_tab(P).new_id;
        l_aid_mapping_tab(P).old_id :=l_aid_mapping_tab(R).old_id;
        l_aid_mapping_tab(P).new_id :=l_aid_mapping_tab(R).new_id;
        l_aid_mapping_tab(R).old_id := W;
        l_aid_mapping_tab(R).new_id := W2;
      END IF;
      --X := a(P);
      X := l_aid_mapping_tab(P).old_id;
      WHILE 1=1
      LOOP    -- until I > J
        --while (a(I) < X) loop
        WHILE (l_aid_mapping_tab(I).old_id < X) LOOP
          I := I + 1;
        END LOOP;
        WHILE (X < l_aid_mapping_tab(J).old_id) LOOP
          J := J - 1;
        END LOOP;
        IF (I <= J) THEN
          W := l_aid_mapping_tab(I).old_id;
          W2 := l_aid_mapping_tab(I).new_id;
          l_aid_mapping_tab(I).old_id :=l_aid_mapping_tab(J).old_id;
          l_aid_mapping_tab(I).new_id :=l_aid_mapping_tab(J).new_id;
          l_aid_mapping_tab(J).old_id := W;
          l_aid_mapping_tab(J).new_id := W2;
          I := I + 1;
          J := J - 1;
        END IF;
        EXIT WHEN I > J;
      END LOOP;
      IF (J - L < R - I) THEN
        IF (I < R) THEN
          --push(I); push(R);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := I;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := R;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        R := J;
      ELSE
        IF (L < J) THEN
          --push(L); push(J);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := L;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := J;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        L := I;
      END IF;

      EXIT WHEN (L >= R);
    END LOOP;
  END LOOP;

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'sort_aid_mapping_tab');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing sort_aid_mapping_tab:l_aid_mapping_tab N=' || N || ' ...');
  END IF;

  --print array
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'In sort_aid_mapping_tab:N='|| N);
  END IF;
  FOR i IN 1..N
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_aid_mapping_tab('||i||')=' || l_aid_mapping_tab(i).old_id || ':' || l_aid_mapping_tab(i).new_id);
    END IF;
  END LOOP;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;  /* sort_aid_mapping_tab */

PROCEDURE do_id_mapping_sort IS
  TYPE numtabtype IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
  --a numtabtype;
  l_stack numtabtype;
  l_stack_index NUMBER := 0;
  N NUMBER;
  R NUMBER;
  L NUMBER;
  P NUMBER;
  W NUMBER;
  W2 NUMBER;
  X NUMBER;
  I NUMBER;
  J NUMBER;
BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  NULL;
  /*a(1) := 10;
  a(2) := 50;
  a(3) := 27;
  a(4) := 5;
  a(5) := 100;
  a(6) := 50;
  a(7) := 35;
  a(8) := 41;
  a(9) := 75;
  a(10) := 20;

  N := 10;
  */

  N := l_counter - 1;
  IF (N < 2) THEN
    RETURN;
  END IF;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := 1;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := N;

  --dbms_output.put_line('l_stack_index=' || l_stack_index);
  WHILE l_stack_index > 0
  LOOP
    R := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    L := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    --dbms_output.put_line('Pop: l_stack_index=' || l_stack_index);
    WHILE 1=1
    LOOP -- loop until L >= R
      I := L;
      J := R;
      P := FLOOR((L+R)/2);
      --if (a(L) > a(P)) then
      IF (l_id_mapping_tab(L).old_id > l_id_mapping_tab(P).old_id)
      THEN
        /*W := a(L);
        a(L) := a(P);
        a(P) := W;*/

        W := l_id_mapping_tab(L).old_id;
        W2 := l_id_mapping_tab(L).new_id;
        l_id_mapping_tab(L).old_id :=l_id_mapping_tab(P).old_id;
        l_id_mapping_tab(L).new_id :=l_id_mapping_tab(P).new_id;
        l_id_mapping_tab(P).old_id := W;
        l_id_mapping_tab(P).new_id := W2;
      END IF;
      --if (a(L) > a(R)) then
      IF (l_id_mapping_tab(L).old_id > l_id_mapping_tab(R).old_id)
      THEN
        /*W := a(L);
        a(L) := a(R);
        a(R) := W;*/
        W := l_id_mapping_tab(L).old_id;
        W2 := l_id_mapping_tab(L).new_id;
        l_id_mapping_tab(L).old_id :=l_id_mapping_tab(R).old_id;
        l_id_mapping_tab(L).new_id :=l_id_mapping_tab(R).new_id;
        l_id_mapping_tab(R).old_id := W;
        l_id_mapping_tab(R).new_id := W2;
      END IF;
      --if (a(P) > a(R)) then
      IF (l_id_mapping_tab(P).old_id > l_id_mapping_tab(R).old_id)
      THEN
        /*W := a(P);
        a(P) := a(R);
        a(R) := W; */
        W := l_id_mapping_tab(P).old_id;
        W2 := l_id_mapping_tab(P).new_id;
        l_id_mapping_tab(P).old_id :=l_id_mapping_tab(R).old_id;
        l_id_mapping_tab(P).new_id :=l_id_mapping_tab(R).new_id;
        l_id_mapping_tab(R).old_id := W;
        l_id_mapping_tab(R).new_id := W2;
      END IF;
      --X := a(P);
      X := l_id_mapping_tab(P).old_id;
      WHILE 1=1
      LOOP    -- until I > J
        --while (a(I) < X) loop
        WHILE (l_id_mapping_tab(I).old_id < X) LOOP
          I := I + 1;
        END LOOP;
        WHILE (X < l_id_mapping_tab(J).old_id) LOOP
          J := J - 1;
        END LOOP;
        IF (I <= J) THEN
          /*W := a(I);
          a(I) := a(J);
          a(J) := W;*/
          W := l_id_mapping_tab(I).old_id;
          W2 := l_id_mapping_tab(I).new_id;
          l_id_mapping_tab(I).old_id :=l_id_mapping_tab(J).old_id;
          l_id_mapping_tab(I).new_id :=l_id_mapping_tab(J).new_id;
          l_id_mapping_tab(J).old_id := W;
          l_id_mapping_tab(J).new_id := W2;
          I := I + 1;
          J := J - 1;
        END IF;
        EXIT WHEN I > J;
      END LOOP;
      IF (J - L < R - I) THEN
        IF (I < R) THEN
          --push(I); push(R);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := I;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := R;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        R := J;
      ELSE
        IF (L < J) THEN
          --push(L); push(J);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := L;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := J;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        L := I;
      END IF;

      EXIT WHEN (L >= R);
    END LOOP;
  END LOOP;

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'do_id_mapping_sort');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing do_id_mapping_sort:l_id_mapping_tab N=' || N || ' ...');
  END IF;

  --print array
  FOR i IN 1..N
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_id_mapping_tab('||i||')=' || l_id_mapping_tab(i).old_id || ':' || l_id_mapping_tab(i).new_id);
    END IF;
  END LOOP;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;  /* do_id_mapping_sort */

FUNCTION find_mapping_id(p_id IN NUMBER) RETURN NUMBER IS
hi NUMBER;
lo NUMBER;
m NUMBER;
BEGIN
  lo := 1;
  hi := l_counter - 1;
  WHILE (lo <= hi) LOOP
    m := FLOOR((hi + lo)/2);
    IF (l_id_mapping_tab(m).old_id = p_id) THEN
      RETURN l_id_mapping_tab(m).new_id;
    ELSIF (l_id_mapping_tab(m).old_id > p_id) THEN
      hi := m - 1;
    ELSE
      lo := m + 1;
    END IF;
  END LOOP;
  RETURN -1;
END;  /* find_mapping_id */

PROCEDURE insert_okc_k_lines_tl(p_old_id IN okc_k_lines_b.id%TYPE) IS
CURSOR c5(p_id NUMBER) IS
SELECT
       a.id, a.LANGUAGE, a.source_lang,
       a.sfwt_flag, a.name, a.comments,
       a.item_description, a.block23text, a.created_by,
       a.creation_date, a.last_updated_by, a.last_update_date,
       a.last_update_login, a.security_group_id, a.oke_boe_description,
       a.cognomen, b.lse_id, b.sts_code, c.fee_type
--avsingh: Bug 5710213: start
        , lsb.lty_code
--avsingh: Bug 5710213: end
FROM okc_k_lines_tl a,
     okc_k_lines_b b,
     okl_k_lines c,
     fnd_languages d
--avsingh: Bug 5710213: start
    , okc_line_styles_b lsb
--avsingh: Bug 5710213: end
WHERE a.id = b.id
AND   b.id = c.id
AND   a.id = c.id
AND   b.dnz_chr_id = p_id
AND   a.LANGUAGE = d.language_code
AND   d.installed_flag = 'B'
--avsingh: Bug 5710213: start
    AND b.lse_id = lsb.id
--avsingh: Bug 5710213: end
;


CURSOR c6 IS
SELECT language_code
FROM   fnd_languages
WHERE installed_flag IN ('B', 'I');

CURSOR c7(p_id NUMBER) IS
SELECT DISTINCT a.name
FROM   okc_k_lines_tl a,
       okc_k_lines_b b
WHERE  a.id = b.id
AND    b.dnz_chr_id = p_id
-- gboomina Bug 6353660 - Start
-- excluding NULL values to get valid asset numbers
-- which is used down the line to replace asset numbers.
AND    a.name IS NOT NULL
-- gboomina Bug 6353660 - End
AND    a.LANGUAGE = USERENV('LANG');
--and    b.lse_id in (33, 42)
--and    p_trans_type not in ('CRB', 'CRL', 'CSP', 'CRV', 'ALI');


    l_olid_tab2 l_olid_type;
    l_ollanguage_tab2 l_ollanguage_type;
    l_olsource_lang_tab2 l_olsource_lang_type;
    l_olsfwt_flag_tab2 l_olsfwt_flag_type;
    l_olname_tab2 l_olname_type;
    l_olcomments_tab2 l_olcomments_type;
    l_olitem_description_tab2 l_olitem_description_type;
    l_olblock23text_tab2 l_olblock23text_type;
    l_olcreated_by_tab2 l_olcreated_by_type;
    l_olcreation_date_tab2 l_olcreation_date_type;
    l_ollast_updated_by_tab2 l_ollast_updated_by_type;
    l_ollast_update_date_tab2 l_ollast_update_date_type;
    l_ollast_update_login_tab2 l_ollast_update_login_type;
    l_olsecurity_group_id_tab2 l_olsecurity_group_id_type;
    l_oloke_boe_description_tab2 l_oloke_boe_description_type;
    l_olcognomen_tab2 l_olcognomen_type;

    l_ollse_id_tab2 l_lse_id_type;
--avsingh: Bug 5710213: start
    l_ollty_code_tab2 l_lty_code_type;
--avsingh: Bug 5710213: end
    l_olsts_code_tab2 l_sts_code_type;
    l_olfee_type_tab2 l_fee_type_type;

  l_olname_tab3 l_olname_type;
  l_ret_status VARCHAR2(30);
  l_new_asset_name VARCHAR2(150);
  l_new_id NUMBER;

BEGIN
  OPEN c5(p_old_id);
  LOOP
    FETCH c5 bulk collect INTO
     l_olid_tab2, l_ollanguage_tab2, l_olsource_lang_tab2,
     l_olsfwt_flag_tab2, l_olname_tab2, l_olcomments_tab2,
     l_olitem_description_tab2, l_olblock23text_tab2, l_olcreated_by_tab2,
     l_olcreation_date_tab2, l_ollast_updated_by_tab2, l_ollast_update_date_tab2,
     l_ollast_update_login_tab2, l_olsecurity_group_id_tab2, l_oloke_boe_description_tab2,
     l_olcognomen_tab2, l_ollse_id_tab2, l_olsts_code_tab2, l_olfee_type_tab2
--avsingh: Bug 5710213: start
    , l_ollty_code_tab2
--avsingh: Bug 5710213: end
    limit G_BULK_SIZE;
    EXIT WHEN l_olid_tab2.COUNT = 0;
    FOR i IN l_olid_tab2.first..l_olid_tab2.last
    LOOP
      --if ( (l_olfee_type_tab2(i) = 'ROLLOVER' and
                --l_ollse_id_tab2(i) = 52 and
                --p_trans_type = 'CFA') or
             --(l_olsts_code_tab2(i) = 'ABANDONED') or
             --(l_ollse_id_tab2(i) = 47) ) then
          --null;
      --else
        l_olid_tab(l_okc_k_lines_tl_counter) := l_olid_tab2(i);
        -- Change id
        l_new_id := find_mapping_id(l_olid_tab(l_okc_k_lines_tl_counter));
        --print('okc_k_lines_tl:l_new_id=' || l_new_id);
        l_olid_tab(l_okc_k_lines_tl_counter) := l_new_id;

        l_ollanguage_tab(l_okc_k_lines_tl_counter) := l_ollanguage_tab2(i);
        l_olsource_lang_tab(l_okc_k_lines_tl_counter) := l_olsource_lang_tab2(i);
        l_olsfwt_flag_tab(l_okc_k_lines_tl_counter) := l_olsfwt_flag_tab2(i);
        l_olname_tab(l_okc_k_lines_tl_counter) := l_olname_tab2(i);
        l_olcomments_tab(l_okc_k_lines_tl_counter) := l_olcomments_tab2(i);
        l_olitem_description_tab(l_okc_k_lines_tl_counter) := l_olitem_description_tab2(i);
        l_olblock23text_tab(l_okc_k_lines_tl_counter) := l_olblock23text_tab2(i);
        l_olcreated_by_tab(l_okc_k_lines_tl_counter) := l_olcreated_by_tab2(i);
        l_olcreation_date_tab(l_okc_k_lines_tl_counter) := l_olcreation_date_tab2(i);
        l_ollast_updated_by_tab(l_okc_k_lines_tl_counter) := l_ollast_updated_by_tab2(i);
        l_ollast_update_date_tab(l_okc_k_lines_tl_counter) := l_ollast_update_date_tab2(i);
        l_ollast_update_login_tab(l_okc_k_lines_tl_counter) := l_ollast_update_login_tab2(i);
        l_olsecurity_group_id_tab(l_okc_k_lines_tl_counter) := l_olsecurity_group_id_tab2(i);
        l_oloke_boe_description_tab(l_okc_k_lines_tl_counter) := l_oloke_boe_description_tab2(i);
        l_olcognomen_tab(l_okc_k_lines_tl_counter) := l_olcognomen_tab2(i);

        l_ollse_id_tab(l_okc_k_lines_tl_counter) := l_ollse_id_tab2(i);
--avsingh: Bug 5710213: start
        l_ollty_code_tab(l_okc_k_lines_tl_counter) :=  l_ollty_code_tab2(i);
--avsingh: Bug 5710213: end
        l_olsts_code_tab(l_okc_k_lines_tl_counter) := l_olsts_code_tab2(i);
        l_olfee_type_tab(l_okc_k_lines_tl_counter) := l_olfee_type_tab2(i);

        l_okc_k_lines_tl_counter := l_okc_k_lines_tl_counter + 1;

      --end if;
    END LOOP;
  END LOOP;
  CLOSE c5;

  IF (l_okc_k_lines_tl_counter < 2) THEN
    RETURN;
  END IF;

  --print('Opening c7 with p_old_id=' || p_old_id);
  OPEN c7(p_old_id);
  LOOP
    FETCH c7 bulk collect INTO
      l_olname_tab3
    limit G_BULK_SIZE;
    --print('l_olname_tab3.count=' || l_olname_tab3.count);
    EXIT WHEN l_olname_tab3.COUNT = 0;
    FOR i IN l_olname_tab3.first..l_olname_tab3.last
    LOOP
      -- Populate l_aid_mapping_tab
      l_aid_mapping_tab(l_asset_counter).old_id := l_olname_tab3(i);
      l_ret_status := generate_asset_number(l_new_asset_name);
      IF l_ret_status = OKL_API.G_RET_STS_UNEXP_ERROR THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF l_ret_status = OKL_API.G_RET_STS_ERROR THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

      l_aid_mapping_tab(l_asset_counter).new_id := l_new_asset_name;

      l_asset_counter := l_asset_counter + 1;
    END LOOP;
  END LOOP;
  CLOSE c7;
  sort_aid_mapping_tab;
  /* Debug only */
  /*
  print('Printing insert_okc_k_lines_tl:l_olid_tab ...');
  for i in l_olid_tab.first..l_olid_tab.last
  loop
    print('l_olid_tab('||i||')=' || l_olid_tab(i));
    print('l_olfee_type_tab('||i||')=' || l_olfee_type_tab(i));
    print('l_ollse_id_tab('||i||')=' || l_ollse_id_tab(i));
    print('l_olsts_code_tab('||i||')=' || l_olsts_code_tab(i));
    print('l_olsource_lang_tab('||i||')=' || l_olsource_lang_tab(i));
    print('l_olname_tab('||i||')=' || l_olname_tab(i));
    print('l_olcomments_tab('||i||')=' || l_olcomments_tab(i));
    print('l_olitem_description_tab('||i||')=' || l_olitem_description_tab(i));
    print('l_olblock23text_tab('||i||')=' || l_olblock23text_tab(i));
    print('l_olsecurity_group_id_tab('||i||')=' || l_olsecurity_group_id_tab(i));
    print('l_oloke_boe_description_tab('||i||')=' || l_oloke_boe_description_tab(i));
    print('l_olcognomen_tab('||i||')=' || l_olcognomen_tab(i));
  end loop;
  */

  -- Now replace name
  IF (l_olid_tab.COUNT > 0) THEN
  FOR i IN l_olid_tab.first..l_olid_tab.last
  LOOP
--avsingh: Bug 5710213: start
    IF ( l_ollty_code_tab(i) IN ('FREE_FORM1', 'FIXED_ASSET', 'LINK_FEE_ASSET', 'LINK_SERV_ASSET' ) AND -- added by zrehman for Bug#5920670
    --IF ( l_ollse_id_tab(i) IN (33, 42) AND
--avsingh: Bug 5710213: end
         p_trans_type NOT IN ('CRB', 'CRL', 'CSP', 'CRV', 'ALI')
        ) THEN
      l_new_asset_name := find_aid_mapping_id(l_olname_tab(i));
      IF (l_new_asset_name <> '-1') THEN
        l_olname_tab(i) := l_new_asset_name;
      END IF;
    END IF;
  END LOOP;
  END IF;

  IF (l_okc_k_lines_tl_counter > 1) THEN
  FOR r IN c6
  LOOP
    --print('r.language_code=' || r.language_code);
    forall i IN l_olid_tab.first..l_olid_tab.last
      INSERT INTO okc_k_lines_tl (
             id, LANGUAGE, source_lang,
             sfwt_flag, name, comments,
             item_description, block23text, created_by,
             creation_date, last_updated_by, last_update_date,
             last_update_login, security_group_id, oke_boe_description,
             cognomen
          ) VALUES (
           l_olid_tab(i), r.language_code, l_olsource_lang_tab(i),
           'N', l_olname_tab(i), l_olcomments_tab(i),
           l_olitem_description_tab(i), l_olblock23text_tab(i), l_created_by,
           SYSDATE,l_last_updated_by,SYSDATE,
           l_last_update_login,l_olsecurity_group_id_tab(i),l_oloke_boe_description_tab(i),
           l_olcognomen_tab(i)
          );
  END LOOP;
  END IF;

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'insert_okc_k_lines_tl');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing insert_okc_k_lines_tl:l_olid_tab.count=' || l_olid_tab.COUNT || ' ...');
  END IF;
  IF (l_olid_tab.COUNT > 0) THEN
  FOR i IN l_olid_tab.first..l_olid_tab.last
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_olid_tab('||i||')=' || l_olid_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_olsource_lang_tab('||i||')=' || l_olsource_lang_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_olname_tab('||i||')=' || l_olname_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_olcomments_tab('||i||')=' || l_olcomments_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_olitem_description_tab('||i||')=' || l_olitem_description_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_olblock23text_tab('||i||')=' || l_olblock23text_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_olsecurity_group_id_tab('||i||')=' || l_olsecurity_group_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_oloke_boe_description_tab('||i||')=' || l_oloke_boe_description_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_olcognomen_tab('||i||')=' || l_olcognomen_tab(i));
    END IF;
  END LOOP;
  END IF;


  RAISE OKC_API.G_EXCEPTION_ERROR;

END; /* insert okc_k_lines_tl */

PROCEDURE insert_okc_k_lines_tl_old(p_old_id IN okc_k_lines_b.id%TYPE,
                                p_new_id IN okc_k_lines_b.id%TYPE,
                                p_flush IN VARCHAR2 ) IS
CURSOR c5(p_id okc_k_lines_b.id%TYPE) IS
  SELECT
       a.id, a.LANGUAGE, a.source_lang,
       a.sfwt_flag, a.name, a.comments,
       a.item_description, a.block23text, a.created_by,
       a.creation_date, a.last_updated_by, a.last_update_date,
       a.last_update_login, a.security_group_id, a.oke_boe_description,
       a.cognomen, b.lse_id
    FROM okc_k_lines_tl a,
         okc_k_lines_b b
    WHERE a.id = p_id
    AND   a.id = b.id;

    TYPE l_ollse_id_type IS TABLE OF okc_k_lines_b.lse_id%TYPE INDEX BY BINARY_INTEGER;
    l_olid_tab2 l_olid_type;
    l_ollanguage_tab2 l_ollanguage_type;
    l_olsource_lang_tab2 l_olsource_lang_type;
    l_olsfwt_flag_tab2 l_olsfwt_flag_type;
    l_olname_tab2 l_olname_type;
    l_olcomments_tab2 l_olcomments_type;
    l_olitem_description_tab2 l_olitem_description_type;
    l_olblock23text_tab2 l_olblock23text_type;
    l_olcreated_by_tab2 l_olcreated_by_type;
    l_olcreation_date_tab2 l_olcreation_date_type;
    l_ollast_updated_by_tab2 l_ollast_updated_by_type;
    l_ollast_update_date_tab2 l_ollast_update_date_type;
    l_ollast_update_login_tab2 l_ollast_update_login_type;
    l_olsecurity_group_id_tab2 l_olsecurity_group_id_type;
    l_oloke_boe_description_tab2 l_oloke_boe_description_type;
    l_olcognomen_tab2 l_olcognomen_type;
    l_ollse_id_tab2 l_ollse_id_type;

  l_ret_status VARCHAR2(30);
  l_new_asset_name VARCHAR2(150);
  l_done_generating BOOLEAN := FALSE;
  l_old_asset_name VARCHAR2(150);
BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  NULL;
  OPEN c5(p_old_id);
  FETCH c5 bulk collect INTO
    l_olid_tab2, l_ollanguage_tab2, l_olsource_lang_tab2,
    l_olsfwt_flag_tab2, l_olname_tab2, l_olcomments_tab2,
    l_olitem_description_tab2, l_olblock23text_tab2, l_olcreated_by_tab2,
    l_olcreation_date_tab2, l_ollast_updated_by_tab2, l_ollast_update_date_tab2,
    l_ollast_update_login_tab2,l_olsecurity_group_id_tab2, l_oloke_boe_description_tab2,
    l_olcognomen_tab2, l_ollse_id_tab2
  limit G_BULK_SIZE;
  CLOSE c5;
  --print('okc_k_lines_tab:l_id_tab.count='||l_id_tab.count);
  FOR i IN l_olid_tab2.first..l_olid_tab2.last LOOP
      -- Change id
      l_olid_tab2(i) := p_new_id;
      l_olid_tab(l_okc_k_lines_tl_counter) := l_olid_tab2(i);

      l_ollanguage_tab(l_okc_k_lines_tl_counter) := l_ollanguage_tab2(i);
      l_olsource_lang_tab(l_okc_k_lines_tl_counter) := l_olsource_lang_tab2(i);
      l_olsfwt_flag_tab(l_okc_k_lines_tl_counter) := l_olsfwt_flag_tab2(i);
      l_olname_tab(l_okc_k_lines_tl_counter) := l_olname_tab2(i);

      /* AKP - to do: Put okl_copy_asset_pvt.generate_asset_number as public api
        Call okl_copy_asset_pvt.generate_asset_number instead of local procedure      */
      IF (p_trans_type NOT IN ('CRB','CRL','CSP','CRV','ALI') AND
          l_ollse_id_tab2(i) IN (33, 42) ) THEN
        -- Generate asset_number
        --l_ret_status := okl_copy_asset_pvt.generate_asset_number(
        IF (NOT(l_done_generating)) THEN
          IF (l_asset_counter > 1) THEN
            l_new_asset_name := find_aid_mapping_id(l_olname_tab(l_okc_k_lines_tl_counter));
            IF (l_new_asset_name = '-1') THEN
              l_ret_status := generate_asset_number(
                              l_new_asset_name
                            );
              IF l_ret_status = OKL_API.G_RET_STS_UNEXP_ERROR THEN
                RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
              ELSIF l_ret_status = OKL_API.G_RET_STS_ERROR THEN
                RAISE OKL_API.G_EXCEPTION_ERROR;
              END IF;
            END IF;
          ELSE
              l_ret_status := generate_asset_number(
                              l_new_asset_name
                            );
              IF l_ret_status = OKL_API.G_RET_STS_UNEXP_ERROR THEN
                RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
              ELSIF l_ret_status = OKL_API.G_RET_STS_ERROR THEN
                RAISE OKL_API.G_EXCEPTION_ERROR;
              END IF;
          END IF;
          l_done_generating := TRUE;
        END IF;
        l_old_asset_name := l_olname_tab(l_okc_k_lines_tl_counter);
        l_olname_tab(l_okc_k_lines_tl_counter) := l_new_asset_name;
        --print('Old Asset=' || l_old_asset_name);
        --print('New Asset=' || l_new_asset_name);

        -- Store line id to asset_number mapping
        l_aid_mapping_tab(l_asset_counter).old_id := l_old_asset_name;
        l_aid_mapping_tab(l_asset_counter).new_id := l_new_asset_name;

        l_asset_counter := l_asset_counter + 1;

      END IF;

      IF (l_asset_counter > 1) THEN
        sort_aid_mapping_tab;
      END IF;
      l_olcomments_tab(l_okc_k_lines_tl_counter) := l_olcomments_tab2(i);
      l_olitem_description_tab(l_okc_k_lines_tl_counter) := l_olitem_description_tab2(i);
      l_olblock23text_tab(l_okc_k_lines_tl_counter) := l_olblock23text_tab2(i);
      l_olcreated_by_tab(l_okc_k_lines_tl_counter) := l_olcreated_by_tab2(i);
      l_olcreation_date_tab(l_okc_k_lines_tl_counter) := l_olcreation_date_tab2(i);
      l_ollast_updated_by_tab(l_okc_k_lines_tl_counter) := l_ollast_updated_by_tab2(i);
      l_ollast_update_date_tab(l_okc_k_lines_tl_counter) := l_ollast_update_date_tab2(i);
      l_ollast_update_login_tab(l_okc_k_lines_tl_counter) := l_ollast_update_login_tab2(i);
      l_olsecurity_group_id_tab(l_okc_k_lines_tl_counter) := l_olsecurity_group_id_tab2(i);
      l_oloke_boe_description_tab(l_okc_k_lines_tl_counter) := l_oloke_boe_description_tab2(i);
      l_olcognomen_tab(l_okc_k_lines_tl_counter) := l_olcognomen_tab2(i);

      l_okc_k_lines_tl_counter := l_okc_k_lines_tl_counter + 1;

  END LOOP;

  IF (p_flush = 'Y') THEN
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_okc_k_lines_tl_counter='|| l_okc_k_lines_tl_counter || ' l_olid_tab.count=' || l_olid_tab.COUNT);
    END IF;
    IF (l_okc_k_lines_tl_counter > 1) THEN
      forall i IN l_olid_tab.first..l_olid_tab.last
        INSERT INTO okc_k_lines_tl (
           id, LANGUAGE, source_lang,
           sfwt_flag, name, comments,
           item_description, block23text, created_by,
           creation_date, last_updated_by, last_update_date,
           last_update_login, security_group_id, oke_boe_description,
           cognomen
        ) VALUES (
         l_olid_tab(i), l_ollanguage_tab(i), l_olsource_lang_tab(i),
         'N', l_olname_tab(i), l_olcomments_tab(i),
         l_olitem_description_tab(i), l_olblock23text_tab(i), l_created_by,
         SYSDATE,l_last_updated_by,SYSDATE,
         l_last_update_login,l_olsecurity_group_id_tab(i),l_oloke_boe_description_tab(i),
         l_olcognomen_tab(i)
    );
  END IF;
  END IF;


END; /* insert_okc_k_lines_tl_old */


PROCEDURE insert_okc_k_headers_tl(p_old_id IN okc_k_headers_tl.id%TYPE,
                                  p_new_id IN okc_k_headers_tl.id%TYPE) IS
CURSOR c6(p_id okc_k_headers_tl.id%TYPE) IS
  SELECT
     id, LANGUAGE, source_lang,
     sfwt_flag, short_description, comments,
     description, cognomen, non_response_reason,
     non_response_explain, set_aside_reason, created_by,
     creation_date, last_updated_by, last_update_date,
     last_update_login, security_group_id
  FROM okc_k_headers_tl
  WHERE id = p_id;

  TYPE l_id_type IS TABLE OF okc_k_headers_tl.id%TYPE INDEX BY BINARY_INTEGER;
  TYPE l_language_type IS TABLE OF okc_k_headers_tl.LANGUAGE%TYPE INDEX BY BINARY_INTEGER;
  TYPE l_source_lang_type IS TABLE OF okc_k_headers_tl.source_lang%TYPE INDEX BY BINARY_INTEGER;
  TYPE l_sfwt_flag_type IS TABLE OF okc_k_headers_tl.sfwt_flag%TYPE INDEX BY BINARY_INTEGER;
  TYPE l_short_description_type IS TABLE OF okc_k_headers_tl.short_description%TYPE INDEX BY BINARY_INTEGER;
  TYPE l_comments_type IS TABLE OF okc_k_headers_tl.comments%TYPE INDEX BY BINARY_INTEGER;
  TYPE l_description_type IS TABLE OF okc_k_headers_tl.description%TYPE INDEX BY BINARY_INTEGER;
  TYPE l_cognomen_type IS TABLE OF okc_k_headers_tl.cognomen%TYPE INDEX BY BINARY_INTEGER;
  TYPE l_non_response_reason_type IS TABLE OF okc_k_headers_tl.non_response_reason%TYPE INDEX BY BINARY_INTEGER;
  TYPE l_non_response_explain_type IS TABLE OF okc_k_headers_tl.non_response_explain%TYPE INDEX BY BINARY_INTEGER;
  TYPE l_set_aside_reason_type IS TABLE OF okc_k_headers_tl.set_aside_reason%TYPE INDEX BY BINARY_INTEGER;
  TYPE l_created_by_type IS TABLE OF okc_k_headers_tl.created_by%TYPE INDEX BY BINARY_INTEGER;
  TYPE l_creation_date_type IS TABLE OF okc_k_headers_tl.creation_date%TYPE INDEX BY BINARY_INTEGER;
  TYPE l_last_updated_by_type IS TABLE OF okc_k_headers_tl.last_updated_by%TYPE INDEX BY BINARY_INTEGER;
  TYPE l_last_update_date_type IS TABLE OF okc_k_headers_tl.last_update_date%TYPE INDEX BY BINARY_INTEGER;
  TYPE l_last_update_login_type IS TABLE OF okc_k_headers_tl.last_update_login%TYPE INDEX BY BINARY_INTEGER;
  TYPE l_security_group_id_type IS TABLE OF okc_k_headers_tl.security_group_id%TYPE INDEX BY BINARY_INTEGER;

  l_id_tab l_id_type;
  l_language_tab l_language_type;
  l_source_lang_tab l_source_lang_type;
  l_sfwt_flag_tab l_sfwt_flag_type;
  l_short_description_tab l_short_description_type;
  l_comments_tab l_comments_type;
  l_description_tab l_description_type;
  l_cognomen_tab l_cognomen_type;
  l_non_response_reason_tab l_non_response_reason_type;
  l_non_response_explain_tab l_non_response_explain_type;
  l_set_aside_reason_tab l_set_aside_reason_type;
  l_created_by_tab l_created_by_type;
  l_creation_date_tab l_creation_date_type;
  l_last_updated_by_tab l_last_updated_by_type;
  l_last_update_date_tab l_last_update_date_type;
  l_last_update_login_tab l_last_update_login_type;
  l_security_group_id_tab l_security_group_id_type;


BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  NULL;
  OPEN c6(p_old_id);
  FETCH c6 bulk collect INTO
    l_id_tab, l_language_tab, l_source_lang_tab,
    l_sfwt_flag_tab, l_short_description_tab, l_comments_tab,
    l_description_tab, l_cognomen_tab, l_non_response_reason_tab,
    l_non_response_explain_tab, l_set_aside_reason_tab, l_created_by_tab,
    l_creation_date_tab, l_last_updated_by_tab, l_last_update_date_tab,
    l_last_update_login_tab, l_security_group_id_tab
  limit G_BULK_SIZE;
  CLOSE c6;

  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'okc_k_headers_tl_tab:l_id_tab.count='||l_id_tab.COUNT);
  END IF;
  IF (l_id_tab.COUNT > 0) THEN
  FOR i IN l_id_tab.first..l_id_tab.last LOOP
    l_id_tab(i) := p_new_id;
  END LOOP;

  forall i IN l_id_tab.first..l_id_tab.last
    INSERT INTO okc_k_headers_tl (
       id, LANGUAGE, source_lang,
       sfwt_flag, short_description, comments,
       description, cognomen, non_response_reason,
       non_response_explain, set_aside_reason, created_by,
       creation_date, last_updated_by, last_update_date,
       last_update_login, security_group_id
    ) VALUES (
       l_id_tab(i), l_language_tab(i), l_source_lang_tab(i),
       'N', l_short_description_tab(i), l_comments_tab(i),
       l_description_tab(i), l_cognomen_tab(i), NULL,
       NULL, NULL, l_created_by,
       SYSDATE, l_last_updated_by, SYSDATE,
       l_last_update_login, l_security_group_id_tab(i)
    );
  END IF;

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'insert_okc_k_headers_tl');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing okc_k_headers_tl:l_id_tab.coun=' || l_id_tab.COUNT || ' ...');
  END IF;
  IF (l_id_tab.COUNT > 0) THEN
  FOR i IN l_id_tab.first..l_id_tab.last
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_id_tab('||i||')=' || l_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_language_tab('||i||')=' || l_language_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_source_lang_tab('||i||')=' || l_source_lang_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_short_description_tab('||i||')=' || l_short_description_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_comments_tab('||i||')=' || l_comments_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_description_tab('||i||')=' || l_description_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_cognomen_tab('||i||')=' || l_cognomen_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_security_group_id_tab('||i||')=' || l_security_group_id_tab(i));
    END IF;
  END LOOP;
  END IF;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END; /* insert_okc_k_headers_tl */

PROCEDURE insert_okl_k_headers(p_old_id IN okc_k_headers_tl.id%TYPE,
                               p_new_id IN okc_k_headers_tl.id%TYPE) IS
CURSOR c7(p_id okl_k_headers.id%TYPE) IS
  SELECT
     id, isg_id, khr_id,
     pdt_id, object_version_number, date_first_activity,
     syndicatable_yn, salestype_yn, date_refinanced,
     date_conversion_effective, date_deal_transferred, term_duration,
     datetime_proposal_effective, datetime_proposal_ineffective, date_proposal_accepted,
     attribute_category, attribute1, attribute2,
     attribute3, attribute4, attribute5,
     attribute6, attribute7, attribute8,
     attribute9, attribute10, attribute11,
     attribute12, attribute13, attribute14,
     attribute15, created_by, creation_date,
     last_updated_by, last_update_date, last_update_login,
     amd_code, generate_accrual_yn, generate_accrual_override_yn,
     credit_act_yn, converted_account_yn, pre_tax_yield,
     after_tax_yield, implicit_interest_rate, implicit_non_idc_interest_rate,
     target_pre_tax_yield, target_after_tax_yield, target_implicit_interest_rate,
     target_implicit_nonidc_intrate, date_last_interim_interest_cal, deal_type,
     pre_tax_irr, after_tax_irr, expected_delivery_date,
     accepted_date, prefunding_eligible_yn, revolving_credit_yn,
     currency_conversion_type, currency_conversion_rate, currency_conversion_date,
     multi_gaap_yn, recourse_code, lessor_serv_org_code,
     assignable_yn, securitized_code, securitization_type,
     sub_pre_tax_yield, sub_after_tax_yield, sub_impl_interest_rate,
     sub_impl_non_idc_int_rate, sub_pre_tax_irr, sub_after_tax_irr,
     tot_cl_transfer_amt, tot_cl_net_transfer_amt, tot_cl_limit,
     tot_cl_funding_amt, crs_id, template_type_code,
     tradein_description, date_funding_expected, tradein_amount,
     date_tradein,
     legal_entity_id
  FROM okl_k_headers
  WHERE id = p_id;

    TYPE l_id_type IS TABLE OF okl_k_headers.id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_isg_id_type IS TABLE OF okl_k_headers.isg_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_khr_id_type IS TABLE OF okl_k_headers.khr_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_pdt_id_type IS TABLE OF okl_k_headers.pdt_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_object_version_number_type IS TABLE OF okl_k_headers.object_version_number%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_date_first_activity_type IS TABLE OF okl_k_headers.date_first_activity%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_syndicatable_yn_type IS TABLE OF okl_k_headers.syndicatable_yn%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_salestype_yn_type IS TABLE OF okl_k_headers.salestype_yn%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_date_refinanced_type IS TABLE OF okl_k_headers.date_refinanced%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_date_conversion_effective_ty IS TABLE OF okl_k_headers.date_conversion_effective%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_date_deal_transferred_type IS TABLE OF okl_k_headers.date_deal_transferred%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_term_duration_type IS TABLE OF okl_k_headers.term_duration%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_datetime_proposal_effec_type IS TABLE OF okl_k_headers.datetime_proposal_effective%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_datetime_proposal_ineff_type IS TABLE OF okl_k_headers.datetime_proposal_ineffective%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_date_proposal_accepted_type IS TABLE OF okl_k_headers.date_proposal_accepted%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute_category_type IS TABLE OF okl_k_headers.attribute_category%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute1_type IS TABLE OF okl_k_headers.attribute1%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute2_type IS TABLE OF okl_k_headers.attribute2%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute3_type IS TABLE OF okl_k_headers.attribute3%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute4_type IS TABLE OF okl_k_headers.attribute4%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute5_type IS TABLE OF okl_k_headers.attribute5%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute6_type IS TABLE OF okl_k_headers.attribute6%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute7_type IS TABLE OF okl_k_headers.attribute7%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute8_type IS TABLE OF okl_k_headers.attribute8%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute9_type IS TABLE OF okl_k_headers.attribute9%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute10_type IS TABLE OF okl_k_headers.attribute10%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute11_type IS TABLE OF okl_k_headers.attribute11%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute12_type IS TABLE OF okl_k_headers.attribute12%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute13_type IS TABLE OF okl_k_headers.attribute13%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute14_type IS TABLE OF okl_k_headers.attribute14%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute15_type IS TABLE OF okl_k_headers.attribute15%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_created_by_type IS TABLE OF okl_k_headers.created_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_creation_date_type IS TABLE OF okl_k_headers.creation_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_last_updated_by_type IS TABLE OF okl_k_headers.last_updated_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_last_update_date_type IS TABLE OF okl_k_headers.last_update_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_last_update_login_type IS TABLE OF okl_k_headers.last_update_login%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_amd_code_type IS TABLE OF okl_k_headers.amd_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_generate_accrual_yn_type IS TABLE OF okl_k_headers.generate_accrual_yn%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_generate_ac_override_yn_type IS TABLE OF okl_k_headers.generate_accrual_override_yn%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_credit_act_yn_type IS TABLE OF okl_k_headers.credit_act_yn%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_converted_account_yn_type IS TABLE OF okl_k_headers.converted_account_yn%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_pre_tax_yield_type IS TABLE OF okl_k_headers.pre_tax_yield%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_after_tax_yield_type IS TABLE OF okl_k_headers.after_tax_yield%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_implicit_interest_rate_type IS TABLE OF okl_k_headers.implicit_interest_rate%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_implicit_non_idc_i_rate_type IS TABLE OF okl_k_headers.implicit_non_idc_interest_rate%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_target_pre_tax_yield_type IS TABLE OF okl_k_headers.target_pre_tax_yield%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_target_after_tax_yield_type IS TABLE OF okl_k_headers.target_after_tax_yield%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_target_implicit_in_rate_type IS TABLE OF okl_k_headers.target_implicit_interest_rate%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_target_i_nonidc_intrate_type IS TABLE OF okl_k_headers.target_implicit_nonidc_intrate%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_date_last_interim_i_cal_type IS TABLE OF okl_k_headers.date_last_interim_interest_cal%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_deal_type_type IS TABLE OF okl_k_headers.deal_type%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_pre_tax_irr_type IS TABLE OF okl_k_headers.pre_tax_irr%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_after_tax_irr_type IS TABLE OF okl_k_headers.after_tax_irr%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_expected_delivery_date_type IS TABLE OF okl_k_headers.expected_delivery_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_accepted_date_type IS TABLE OF okl_k_headers.accepted_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_prefunding_eligible_yn_type IS TABLE OF okl_k_headers.prefunding_eligible_yn%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_revolving_credit_yn_type IS TABLE OF okl_k_headers.revolving_credit_yn%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_currency_conversion_type_typ IS TABLE OF okl_k_headers.currency_conversion_type%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_currency_conversion_rate_typ IS TABLE OF okl_k_headers.currency_conversion_rate%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_currency_conversion_date_typ IS TABLE OF okl_k_headers.currency_conversion_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_multi_gaap_yn_type IS TABLE OF okl_k_headers.multi_gaap_yn%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_recourse_code_type IS TABLE OF okl_k_headers.recourse_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_lessor_serv_org_code_type IS TABLE OF okl_k_headers.lessor_serv_org_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_assignable_yn_type IS TABLE OF okl_k_headers.assignable_yn%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_securitized_code_type IS TABLE OF okl_k_headers.securitized_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_securitization_type_type IS TABLE OF okl_k_headers.securitization_type%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_sub_pre_tax_yield_type IS TABLE OF okl_k_headers.sub_pre_tax_yield%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_sub_after_tax_yield_type IS TABLE OF okl_k_headers.sub_after_tax_yield%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_sub_impl_interest_rate_type IS TABLE OF okl_k_headers.sub_impl_interest_rate%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_sub_impl_non_idc_int_ra_type IS TABLE OF okl_k_headers.sub_impl_non_idc_int_rate%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_sub_pre_tax_irr_type IS TABLE OF okl_k_headers.sub_pre_tax_irr%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_sub_after_tax_irr_type IS TABLE OF okl_k_headers.sub_after_tax_irr%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tot_cl_transfer_amt_type IS TABLE OF okl_k_headers.tot_cl_transfer_amt%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tot_cl_net_transfer_amt_type IS TABLE OF okl_k_headers.tot_cl_net_transfer_amt%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tot_cl_limit_type IS TABLE OF okl_k_headers.tot_cl_limit%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tot_cl_funding_amt_type IS TABLE OF okl_k_headers.tot_cl_funding_amt%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_crs_id_type is table of okl_k_headers.crs_id%TYPE index by binary_integer;
    TYPE l_template_type_code_type is table of okl_k_headers.template_type_code%TYPE index by binary_integer;
    TYPE l_tradein_description_type is table of okl_k_headers.tradein_description%TYPE index by binary_integer;
    TYPE l_date_funding_expected_type is table of okl_k_headers.date_funding_expected%TYPE index by binary_integer;
    TYPE l_tradein_amount_type is table of okl_k_headers.tradein_amount%TYPE index by binary_integer;
    TYPE l_date_tradein_type is table of okl_k_headers.date_tradein%TYPE index by binary_integer;
    --Added by dpsingh for LE Uptake
    TYPE l_legal_entity_id_type is table of okl_k_headers.legal_entity_id%TYPE index by binary_integer;

    l_id_tab l_id_type;
    l_isg_id_tab l_isg_id_type;
    l_khr_id_tab l_khr_id_type;
    l_pdt_id_tab l_pdt_id_type;
    l_object_version_number_tab l_object_version_number_type;
    l_date_first_activity_tab l_date_first_activity_type;
    l_syndicatable_yn_tab l_syndicatable_yn_type;
    l_salestype_yn_tab l_salestype_yn_type;
    l_date_refinanced_tab l_date_refinanced_type;
    l_date_conversion_effectiv_tab l_date_conversion_effective_ty;
    l_date_deal_transferred_tab l_date_deal_transferred_type;
    l_term_duration_tab l_term_duration_type;
    l_datetime_proposal_effec_tab l_datetime_proposal_effec_type;
    l_datetime_proposal_ineff_tab l_datetime_proposal_ineff_type;
    l_date_proposal_accepted_tab l_date_proposal_accepted_type;
    l_attribute_category_tab l_attribute_category_type;
    l_attribute1_tab l_attribute1_type;
    l_attribute2_tab l_attribute2_type;
    l_attribute3_tab l_attribute3_type;
    l_attribute4_tab l_attribute4_type;
    l_attribute5_tab l_attribute5_type;
    l_attribute6_tab l_attribute6_type;
    l_attribute7_tab l_attribute7_type;
    l_attribute8_tab l_attribute8_type;
    l_attribute9_tab l_attribute9_type;
    l_attribute10_tab l_attribute10_type;
    l_attribute11_tab l_attribute11_type;
    l_attribute12_tab l_attribute12_type;
    l_attribute13_tab l_attribute13_type;
    l_attribute14_tab l_attribute14_type;
    l_attribute15_tab l_attribute15_type;
    l_created_by_tab l_created_by_type;
    l_creation_date_tab l_creation_date_type;
    l_last_updated_by_tab l_last_updated_by_type;
    l_last_update_date_tab l_last_update_date_type;
    l_last_update_login_tab l_last_update_login_type;
    l_amd_code_tab l_amd_code_type;
    l_generate_accrual_yn_tab l_generate_accrual_yn_type;
    l_generate_ac_override_yn_tab l_generate_ac_override_yn_type;
    l_credit_act_yn_tab l_credit_act_yn_type;
    l_converted_account_yn_tab l_converted_account_yn_type;
    l_pre_tax_yield_tab l_pre_tax_yield_type;
    l_after_tax_yield_tab l_after_tax_yield_type;
    l_implicit_interest_rate_tab l_implicit_interest_rate_type;
    l_implicit_non_idc_i_rate_tab l_implicit_non_idc_i_rate_type;
    l_target_pre_tax_yield_tab l_target_pre_tax_yield_type;
    l_target_after_tax_yield_tab l_target_after_tax_yield_type;
    l_target_implicit_in_rate_tab l_target_implicit_in_rate_type;
    l_target_i_nonidc_intrate_tab l_target_i_nonidc_intrate_type;
    l_date_last_interim_i_cal_tab l_date_last_interim_i_cal_type;
    l_deal_type_tab l_deal_type_type;
    l_pre_tax_irr_tab l_pre_tax_irr_type;
    l_after_tax_irr_tab l_after_tax_irr_type;
    l_expected_delivery_date_tab l_expected_delivery_date_type;
    l_accepted_date_tab l_accepted_date_type;
    l_prefunding_eligible_yn_tab l_prefunding_eligible_yn_type;
    l_revolving_credit_yn_tab l_revolving_credit_yn_type;
    l_currency_conversion_type_tab l_currency_conversion_type_typ;
    l_currency_conversion_rate_tab l_currency_conversion_rate_typ;
    l_currency_conversion_date_tab l_currency_conversion_date_typ;
    l_multi_gaap_yn_tab l_multi_gaap_yn_type;
    l_recourse_code_tab l_recourse_code_type;
    l_lessor_serv_org_code_tab l_lessor_serv_org_code_type;
    l_assignable_yn_tab l_assignable_yn_type;
    l_securitized_code_tab l_securitized_code_type;
    l_securitization_type_tab l_securitization_type_type;
    l_sub_pre_tax_yield_tab l_sub_pre_tax_yield_type;
    l_sub_after_tax_yield_tab l_sub_after_tax_yield_type;
    l_sub_impl_interest_rate_tab l_sub_impl_interest_rate_type;
    l_sub_impl_non_idc_int_ra_tab l_sub_impl_non_idc_int_ra_type;
    l_sub_pre_tax_irr_tab l_sub_pre_tax_irr_type;
    l_sub_after_tax_irr_tab l_sub_after_tax_irr_type;
    l_tot_cl_transfer_amt_tab l_tot_cl_transfer_amt_type;
    l_tot_cl_net_transfer_amt_tab l_tot_cl_net_transfer_amt_type;
    l_tot_cl_limit_tab l_tot_cl_limit_type;
    l_tot_cl_funding_amt_tab l_tot_cl_funding_amt_type;
    l_crs_id_tab l_crs_id_type;
    l_template_type_code_tab l_template_type_code_type;
    l_tradein_description_tab l_tradein_description_type;
    l_date_funding_expected_tab l_date_funding_expected_type;
    l_tradein_amount_tab l_tradein_amount_type;
    l_date_tradein_tab l_date_tradein_type;
    l_legal_entity_id_tab  l_legal_entity_id_type;

BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  NULL;
  OPEN c7(p_old_id);
  FETCH c7 bulk collect INTO
  l_id_tab, l_isg_id_tab, l_khr_id_tab,
  l_pdt_id_tab, l_object_version_number_tab, l_date_first_activity_tab,
  l_syndicatable_yn_tab, l_salestype_yn_tab, l_date_refinanced_tab,
  l_date_conversion_effectiv_tab, l_date_deal_transferred_tab, l_term_duration_tab,
  l_datetime_proposal_effec_tab, l_datetime_proposal_ineff_tab, l_date_proposal_accepted_tab,
  l_attribute_category_tab, l_attribute1_tab, l_attribute2_tab,
  l_attribute3_tab, l_attribute4_tab, l_attribute5_tab,
  l_attribute6_tab, l_attribute7_tab, l_attribute8_tab,
  l_attribute9_tab, l_attribute10_tab, l_attribute11_tab,
  l_attribute12_tab, l_attribute13_tab, l_attribute14_tab,
  l_attribute15_tab, l_created_by_tab, l_creation_date_tab,
  l_last_updated_by_tab, l_last_update_date_tab, l_last_update_login_tab,
  l_amd_code_tab, l_generate_accrual_yn_tab, l_generate_ac_override_yn_tab,
  l_credit_act_yn_tab, l_converted_account_yn_tab, l_pre_tax_yield_tab,
  l_after_tax_yield_tab, l_implicit_interest_rate_tab, l_implicit_non_idc_i_rate_tab,
  l_target_pre_tax_yield_tab, l_target_after_tax_yield_tab, l_target_implicit_in_rate_tab,
  l_target_i_nonidc_intrate_tab, l_date_last_interim_i_cal_tab, l_deal_type_tab,
  l_pre_tax_irr_tab, l_after_tax_irr_tab, l_expected_delivery_date_tab,
  l_accepted_date_tab, l_prefunding_eligible_yn_tab, l_revolving_credit_yn_tab,
  l_currency_conversion_type_tab, l_currency_conversion_rate_tab, l_currency_conversion_date_tab,
  l_multi_gaap_yn_tab, l_recourse_code_tab, l_lessor_serv_org_code_tab,
  l_assignable_yn_tab, l_securitized_code_tab, l_securitization_type_tab,
  l_sub_pre_tax_yield_tab, l_sub_after_tax_yield_tab, l_sub_impl_interest_rate_tab,
  l_sub_impl_non_idc_int_ra_tab, l_sub_pre_tax_irr_tab, l_sub_after_tax_irr_tab,
  l_tot_cl_transfer_amt_tab, l_tot_cl_net_transfer_amt_tab, l_tot_cl_limit_tab,
  l_tot_cl_funding_amt_tab, l_crs_id_tab, l_template_type_code_tab,
  l_tradein_description_tab, l_date_funding_expected_tab, l_tradein_amount_tab,
  l_date_tradein_tab,l_legal_entity_id_tab
  limit G_BULK_SIZE;
  CLOSE c7;

  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'okl_k_headers_tab:l_id_tab.count='||l_id_tab.COUNT);
  END IF;
  IF (l_id_tab.COUNT > 0) THEN
  l_deal_type := l_deal_type_tab(1);
  FOR i IN l_id_tab.first..l_id_tab.last LOOP
    l_id_tab(i) := p_new_id;

    validate_amd_code(x_return_status, l_amd_code_tab(i));
    IF (x_return_status <> OKC_API.G_RET_STS_SUCCESS) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    END IF;

  END LOOP;

  forall i IN l_id_tab.first..l_id_tab.last
    INSERT INTO okl_k_headers (
     id, isg_id, khr_id,
     pdt_id, object_version_number, date_first_activity,
     syndicatable_yn, salestype_yn, date_refinanced,
     date_conversion_effective, date_deal_transferred, term_duration,
     datetime_proposal_effective, datetime_proposal_ineffective, date_proposal_accepted,
     attribute_category, attribute1, attribute2,
     attribute3, attribute4, attribute5,
     attribute6, attribute7, attribute8,
     attribute9, attribute10, attribute11,
     attribute12, attribute13, attribute14,
     attribute15, created_by, creation_date,
     last_updated_by, last_update_date, last_update_login,
     amd_code, generate_accrual_yn, generate_accrual_override_yn,
     credit_act_yn, converted_account_yn, pre_tax_yield,
     after_tax_yield, implicit_interest_rate, implicit_non_idc_interest_rate,
     target_pre_tax_yield, target_after_tax_yield, target_implicit_interest_rate,
     target_implicit_nonidc_intrate, date_last_interim_interest_cal, deal_type,
     pre_tax_irr, after_tax_irr, expected_delivery_date,
     accepted_date, prefunding_eligible_yn, revolving_credit_yn,
     currency_conversion_type, currency_conversion_rate, currency_conversion_date,
     multi_gaap_yn, recourse_code, lessor_serv_org_code,
     assignable_yn, securitized_code, securitization_type,
     sub_pre_tax_yield, sub_after_tax_yield, sub_impl_interest_rate,
     sub_impl_non_idc_int_rate, sub_pre_tax_irr, sub_after_tax_irr,
     tot_cl_transfer_amt, tot_cl_net_transfer_amt, tot_cl_limit,
     tot_cl_funding_amt, crs_id, template_type_code,
     tradein_description, date_funding_expected, tradein_amount,
     date_tradein,legal_entity_id
    ) VALUES (
     l_id_tab(i), l_isg_id_tab(i), l_khr_id_tab(i),
     l_pdt_id_tab(i), 1, l_date_first_activity_tab(i),
     l_syndicatable_yn_tab(i), l_salestype_yn_tab(i), l_date_refinanced_tab(i),
     l_date_conversion_effectiv_tab(i), l_date_deal_transferred_tab(i), l_term_duration_tab(i),
     l_datetime_proposal_effec_tab(i), l_datetime_proposal_ineff_tab(i), l_date_proposal_accepted_tab(i),
     l_attribute_category_tab(i), l_attribute1_tab(i), l_attribute2_tab(i),
     l_attribute3_tab(i), l_attribute4_tab(i), l_attribute5_tab(i),
     l_attribute6_tab(i), l_attribute7_tab(i), l_attribute8_tab(i),
     l_attribute9_tab(i), l_attribute10_tab(i), l_attribute11_tab(i),
     l_attribute12_tab(i), l_attribute13_tab(i), l_attribute14_tab(i),
     l_attribute15_tab(i), l_created_by, SYSDATE,
     l_last_updated_by, SYSDATE, l_last_update_login,
     l_amd_code_tab(i), l_generate_accrual_yn_tab(i), l_generate_ac_override_yn_tab(i),
     l_credit_act_yn_tab(i), l_converted_account_yn_tab(i), DECODE(p_trans_type, 'CFA', NULL, 'CRL', NULL, l_pre_tax_yield_tab(i)),
     DECODE(p_trans_type, 'CFA',NULL, 'CRL',NULL, l_after_tax_yield_tab(i)), DECODE(p_trans_type, 'CFA',NULL, 'CRL',NULL, l_implicit_interest_rate_tab(i)), DECODE(p_trans_type, 'CFA',NULL, 'CRL',NULL, l_implicit_non_idc_i_rate_tab(i)),
     l_target_pre_tax_yield_tab(i), l_target_after_tax_yield_tab(i), l_target_implicit_in_rate_tab(i),
     l_target_i_nonidc_intrate_tab(i), DECODE(p_trans_type, 'CFA',NULL, 'CRL',NULL, l_date_last_interim_i_cal_tab(i)), l_deal_type_tab(i),
     DECODE(p_trans_type, 'CFA',NULL, 'CRL',NULL, l_pre_tax_irr_tab(i)), DECODE(p_trans_type, 'CFA',NULL, 'CRL',NULL, l_after_tax_irr_tab(i)), l_expected_delivery_date_tab(i),
     l_accepted_date_tab(i), l_prefunding_eligible_yn_tab(i), l_revolving_credit_yn_tab(i),
     l_currency_conversion_type_tab(i), l_currency_conversion_rate_tab(i), l_currency_conversion_date_tab(i),
     l_multi_gaap_yn_tab(i), l_recourse_code_tab(i), l_lessor_serv_org_code_tab(i),
     --l_assignable_yn_tab(i), l_securitized_code_tab(i), l_securitization_type_tab(i),
     --Fix bug 4381642 to nullify securitized_code
     l_assignable_yn_tab(i), NULL, l_securitization_type_tab(i),
     DECODE(p_trans_type, 'CFA',NULL, 'CRL',NULL, l_sub_pre_tax_yield_tab(i)), DECODE(p_trans_type, 'CFA',NULL, 'CRL',NULL, l_sub_after_tax_yield_tab(i)), DECODE(p_trans_type, 'CFA',NULL, 'CRL',NULL,l_sub_impl_interest_rate_tab(i)),
     DECODE(p_trans_type, 'CFA',NULL, 'CRL',NULL, l_sub_impl_non_idc_int_ra_tab(i)), DECODE(p_trans_type, 'CFA',NULL, 'CRL',NULL,l_sub_pre_tax_irr_tab(i)), DECODE(p_trans_type, 'CFA',NULL, 'CRL',NULL, l_sub_after_tax_irr_tab(i)),
     DECODE(p_trans_type, 'CFA',NULL, 'CRL',NULL, l_tot_cl_transfer_amt_tab(i)), DECODE(p_trans_type, 'CFA',NULL, 'CRL',NULL, l_tot_cl_net_transfer_amt_tab(i)), DECODE(p_trans_type, 'CFA',NULL, 'CRL',NULL, l_tot_cl_limit_tab(i)),
     DECODE(p_trans_type, 'CFA',NULL, 'CRL',NULL, l_tot_cl_funding_amt_tab(i)),
     l_crs_id_tab(i), l_template_type_code_tab(i),l_tradein_description_tab(i),
     l_date_funding_expected_tab(i), l_tradein_amount_tab(i), l_date_tradein_tab(i),l_legal_entity_id_tab(i)
    );
  END IF;

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'insert_okl_k_headers');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing insert_okl_k_headers:l_id_tab=' || l_id_tab.COUNT || ' ...');
  END IF;
  --print('p_trans_type=' || p_trans_type);
  IF (l_id_tab.COUNT > 0) THEN
  FOR i IN l_id_tab.first..l_id_tab.last
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_id_tab('||i||')=' || l_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_isg_id_tab('||i||')=' || l_isg_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_khr_id_tab('||i||')=' || l_khr_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_pdt_id_tab('||i||')=' || l_pdt_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_date_first_activity_tab('||i||')=' || l_date_first_activity_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_syndicatable_yn_tab('||i||')=' || l_syndicatable_yn_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_salestype_yn_tab('||i||')=' || l_salestype_yn_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_date_refinanced_tab('||i||')=' || l_date_refinanced_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_date_conversion_effectiv_tab('||i||')=' || l_date_conversion_effectiv_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_date_deal_transferred_tab('||i||')=' || l_date_deal_transferred_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_term_duration_tab('||i||')=' || l_term_duration_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_datetime_proposal_effec_tab('||i||')=' || l_datetime_proposal_effec_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_datetime_proposal_ineff_tab('||i||')=' || l_datetime_proposal_ineff_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_date_proposal_accepted_tab('||i||')=' || l_date_proposal_accepted_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute_category_tab('||i||')=' || l_attribute_category_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute1_tab('||i||')=' || l_attribute1_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute2_tab('||i||')=' || l_attribute2_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute3_tab('||i||')=' || l_attribute3_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute4_tab('||i||')=' || l_attribute4_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute5_tab('||i||')=' || l_attribute5_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute6_tab('||i||')=' || l_attribute6_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute7_tab('||i||')=' || l_attribute7_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute8_tab('||i||')=' || l_attribute8_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute9_tab('||i||')=' || l_attribute9_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute10_tab('||i||')=' || l_attribute10_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute11_tab('||i||')=' || l_attribute11_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute12_tab('||i||')=' || l_attribute12_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute13_tab('||i||')=' || l_attribute13_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute14_tab('||i||')=' || l_attribute14_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute15_tab('||i||')=' || l_attribute15_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_amd_code_tab('||i||')=' || l_amd_code_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_generate_accrual_yn_tab('||i||')=' || l_generate_accrual_yn_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_generate_ac_override_yn_tab('||i||')=' || l_generate_ac_override_yn_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_credit_act_yn_tab('||i||')=' || l_credit_act_yn_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_converted_account_yn_tab('||i||')=' || l_converted_account_yn_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_pre_tax_yield_tab('||i||')=' || l_pre_tax_yield_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_after_tax_yield_tab('||i||')=' || l_after_tax_yield_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_implicit_interest_rate_tab('||i||')=' || l_implicit_interest_rate_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_implicit_non_idc_i_rate_tab('||i||')=' || l_implicit_non_idc_i_rate_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_target_pre_tax_yield_tab('||i||')=' || l_target_pre_tax_yield_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_target_after_tax_yield_tab('||i||')=' || l_target_after_tax_yield_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_target_implicit_in_rate_tab('||i||')=' || l_target_implicit_in_rate_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_target_i_nonidc_intrate_tab('||i||')=' || l_target_i_nonidc_intrate_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_date_last_interim_i_cal_tab('||i||')=' || l_date_last_interim_i_cal_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_deal_type_tab('||i||')=' || l_deal_type_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_pre_tax_irr_tab('||i||')=' || l_pre_tax_irr_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_after_tax_irr_tab('||i||')=' || l_after_tax_irr_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_expected_delivery_date_tab('||i||')=' || l_expected_delivery_date_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_accepted_date_tab('||i||')=' || l_accepted_date_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_prefunding_eligible_yn_tab('||i||')=' || l_prefunding_eligible_yn_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_revolving_credit_yn_tab('||i||')=' || l_revolving_credit_yn_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_currency_conversion_type_tab('||i||')=' || l_currency_conversion_type_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_currency_conversion_rate_tab('||i||')=' || l_currency_conversion_rate_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_currency_conversion_date_tab('||i||')=' || l_currency_conversion_date_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_multi_gaap_yn_tab('||i||')=' || l_multi_gaap_yn_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_recourse_code_tab('||i||')=' || l_recourse_code_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_lessor_serv_org_code_tab('||i||')=' || l_lessor_serv_org_code_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_assignable_yn_tab('||i||')=' || l_assignable_yn_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_securitized_code_tab('||i||')=' || l_securitized_code_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_securitization_type_tab('||i||')=' || l_securitization_type_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_sub_pre_tax_yield_tab('||i||')=' || l_sub_pre_tax_yield_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_sub_after_tax_yield_tab('||i||')=' || l_sub_after_tax_yield_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_sub_impl_interest_rate_tab('||i||')=' || l_sub_impl_interest_rate_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_sub_impl_non_idc_int_ra_tab('||i||')=' || l_sub_impl_non_idc_int_ra_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_sub_pre_tax_irr_tab('||i||')=' || l_sub_pre_tax_irr_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_sub_after_tax_irr_tab('||i||')=' || l_sub_after_tax_irr_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tot_cl_transfer_amt_tab('||i||')=' || l_tot_cl_transfer_amt_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tot_cl_net_transfer_amt_tab('||i||')=' || l_tot_cl_net_transfer_amt_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tot_cl_limit_tab('||i||')=' || l_tot_cl_limit_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tot_cl_funding_amt_tab('||i||')=' || l_tot_cl_funding_amt_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_crs_id_tab('||i||')=' || l_crs_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_template_type_code_tab('||i||')=' || l_template_type_code_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tradein_description_tab('||i||')=' || l_tradein_description_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_date_funding_expected_tab('||i||')=' || l_date_funding_expected_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tradein_amount_tab('||i||')=' || l_tradein_amount_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_date_tradein_tab('||i||')=' || l_date_tradein_tab(i));
    END IF;
  END LOOP;
  END IF;


  RAISE OKC_API.G_EXCEPTION_ERROR;

END; /* insert_okl_k_headers */

PROCEDURE insert_okl_slctd_optns(p_old_id IN okc_k_headers_tl.id%TYPE,
                                 p_new_id IN okc_k_headers_tl.id%TYPE) IS
CURSOR c24(p_id NUMBER) IS
SELECT
     id, pov_id, khr_id,
     object_version_number, attribute_category, attribute1,
     attribute2, attribute3, attribute4,
     attribute5, attribute6, attribute7,
     attribute8, attribute9, attribute10,
     attribute11, attribute12, attribute13,
     attribute14, attribute15, created_by,
     creation_date, last_updated_by, last_update_date,
     last_update_login
FROM okl_slctd_optns
WHERE khr_id = p_id;

    l_sid_tab2 l_sid_type;
    l_spov_id_tab2 l_spov_id_type;
    l_skhr_id_tab2 l_skhr_id_type;
    l_sobject_version_number_tab2 l_sobject_version_number_type;
    l_sattribute_category_tab2 l_sattribute_category_type;
    l_sattribute1_tab2 l_sattribute1_type;
    l_sattribute2_tab2 l_sattribute2_type;
    l_sattribute3_tab2 l_sattribute3_type;
    l_sattribute4_tab2 l_sattribute4_type;
    l_sattribute5_tab2 l_sattribute5_type;
    l_sattribute6_tab2 l_sattribute6_type;
    l_sattribute7_tab2 l_sattribute7_type;
    l_sattribute8_tab2 l_sattribute8_type;
    l_sattribute9_tab2 l_sattribute9_type;
    l_sattribute10_tab2 l_sattribute10_type;
    l_sattribute11_tab2 l_sattribute11_type;
    l_sattribute12_tab2 l_sattribute12_type;
    l_sattribute13_tab2 l_sattribute13_type;
    l_sattribute14_tab2 l_sattribute14_type;
    l_sattribute15_tab2 l_sattribute15_type;
    l_screated_by_tab2 l_screated_by_type;
    l_screation_date_tab2 l_screation_date_type;
    l_slast_updated_by_tab2 l_slast_updated_by_type;
    l_slast_update_date_tab2 l_slast_update_date_type;
    l_slast_update_login_tab2 l_slast_update_login_type;

  l_quote_chr_id NUMBER;
  l_return_status VARCHAR2(30);

BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  OPEN c24(p_old_id);
  LOOP
    FETCH c24 bulk collect INTO
     l_sid_tab2, l_spov_id_tab2, l_skhr_id_tab2,
     l_sobject_version_number_tab2, l_sattribute_category_tab2, l_sattribute1_tab2,
     l_sattribute2_tab2, l_sattribute3_tab2, l_sattribute4_tab2,
     l_sattribute5_tab2, l_sattribute6_tab2, l_sattribute7_tab2,
     l_sattribute8_tab2, l_sattribute9_tab2, l_sattribute10_tab2,
     l_sattribute11_tab2, l_sattribute12_tab2, l_sattribute13_tab2,
     l_sattribute14_tab2, l_sattribute15_tab2, l_screated_by_tab2,
     l_screation_date_tab2, l_slast_updated_by_tab2, l_slast_update_date_tab2,
     l_slast_update_login_tab2
    limit G_BULK_SIZE;
    EXIT WHEN l_sid_tab2.COUNT = 0;
    FOR i IN l_sid_tab2.first..l_sid_tab2.last
    LOOP
      l_sid_tab(l_slctd_optns_counter) := l_sid_tab2(i);
      -- Change id
      l_sid_tab(l_slctd_optns_counter) := okc_p_util.raw_to_number(sys_guid());

      l_spov_id_tab(l_slctd_optns_counter) := l_spov_id_tab2(i);
      l_skhr_id_tab(l_slctd_optns_counter) := l_skhr_id_tab2(i);
      -- Change khr_id
      l_skhr_id_tab(l_slctd_optns_counter) := p_new_id;

      l_sobject_version_number_tab(l_slctd_optns_counter) := l_sobject_version_number_tab2(i);
      l_sattribute_category_tab(l_slctd_optns_counter) := l_sattribute_category_tab2(i);
      l_sattribute1_tab(l_slctd_optns_counter) := l_sattribute1_tab2(i);
      l_sattribute2_tab(l_slctd_optns_counter) := l_sattribute2_tab2(i);
      l_sattribute3_tab(l_slctd_optns_counter) := l_sattribute3_tab2(i);
      l_sattribute4_tab(l_slctd_optns_counter) := l_sattribute4_tab2(i);
      l_sattribute5_tab(l_slctd_optns_counter) := l_sattribute5_tab2(i);
      l_sattribute6_tab(l_slctd_optns_counter) := l_sattribute6_tab2(i);
      l_sattribute7_tab(l_slctd_optns_counter) := l_sattribute7_tab2(i);
      l_sattribute8_tab(l_slctd_optns_counter) := l_sattribute8_tab2(i);
      l_sattribute9_tab(l_slctd_optns_counter) := l_sattribute9_tab2(i);
      l_sattribute10_tab(l_slctd_optns_counter) := l_sattribute10_tab2(i);
      l_sattribute11_tab(l_slctd_optns_counter) := l_sattribute11_tab2(i);
      l_sattribute12_tab(l_slctd_optns_counter) := l_sattribute12_tab2(i);
      l_sattribute13_tab(l_slctd_optns_counter) := l_sattribute13_tab2(i);
      l_sattribute14_tab(l_slctd_optns_counter) := l_sattribute14_tab2(i);
      l_sattribute15_tab(l_slctd_optns_counter) := l_sattribute15_tab2(i);
      l_screated_by_tab(l_slctd_optns_counter) := l_screated_by_tab2(i);
      l_screation_date_tab(l_slctd_optns_counter) := l_screation_date_tab2(i);
      l_slast_updated_by_tab(l_slctd_optns_counter) := l_slast_updated_by_tab2(i);
      l_slast_update_date_tab(l_slctd_optns_counter) := l_slast_update_date_tab2(i);
      l_slast_update_login_tab(l_slctd_optns_counter) := l_slast_update_login_tab2(i);

      l_slctd_optns_counter := l_slctd_optns_counter + 1;

    END LOOP;
  END LOOP;
  CLOSE c24;

  IF (l_slctd_optns_counter > 1) THEN
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_slctd_optns_counter=' || l_slctd_optns_counter || ' l_sid_tab.count=' || l_sid_tab.COUNT);
    END IF;
    forall i IN l_sid_tab.first..l_sid_tab.last
      INSERT INTO okl_slctd_optns (
       id, pov_id, khr_id,
       object_version_number, attribute_category, attribute1,
       attribute2, attribute3, attribute4,
       attribute5, attribute6, attribute7,
       attribute8, attribute9, attribute10,
       attribute11, attribute12, attribute13,
       attribute14, attribute15, created_by,
       creation_date, last_updated_by, last_update_date,
       last_update_login
      ) VALUES (
       l_sid_tab(i), l_spov_id_tab(i), l_skhr_id_tab(i),
       l_sobject_version_number_tab(i), l_sattribute_category_tab(i), l_sattribute1_tab(i),
       l_sattribute2_tab(i), l_sattribute3_tab(i), l_sattribute4_tab(i),
       l_sattribute5_tab(i), l_sattribute6_tab(i), l_sattribute7_tab(i),
       l_sattribute8_tab(i), l_sattribute9_tab(i), l_sattribute10_tab(i),
       l_sattribute11_tab(i), l_sattribute12_tab(i), l_sattribute13_tab(i),
       l_sattribute14_tab(i), l_sattribute15_tab(i), l_created_by,
       SYSDATE, l_last_updated_by, SYSDATE,
       l_last_update_login
      );
    --Bug# 5591688 - commenting as package has been stubbed in R12
    /*
    okl_quote_plans_pvt.modify_quote_structure(
      p_api_version => p_api_version,
      p_init_msg_list => p_init_msg_list,
      p_transaction_control => OKL_API.G_FALSE,
      p_chr_id => p_new_id,
      p_modify_reason_code => 'COPY_QUOTE',
      x_chr_id => l_quote_chr_id,
      x_return_status => l_return_status,
      x_msg_count => x_msg_count,
      x_msg_data => x_msg_data
    );
    IF l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF l_return_status = OKL_API.G_RET_STS_ERROR THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    */

  END IF;
EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'insert_okl_slctd_optns');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing insert_okl_slctd_optns:l_sid_tab=' || l_sid_tab.COUNT || ' ...');
  END IF;
  IF (l_sid_tab.COUNT > 0) THEN
  FOR i IN l_sid_tab.first..l_sid_tab.last
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_sid_tab('||i||')=' || l_sid_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_spov_id_tab('||i||')=' || l_spov_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_skhr_id_tab('||i||')=' || l_skhr_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_sobject_version_number_tab('||i||')=' || l_sobject_version_number_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_sattribute_category_tab('||i||')=' || l_sattribute_category_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_sattribute1_tab('||i||')=' || l_sattribute1_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_sattribute2_tab('||i||')=' || l_sattribute2_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_sattribute3_tab('||i||')=' || l_sattribute3_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_sattribute4_tab('||i||')=' || l_sattribute4_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_sattribute5_tab('||i||')=' || l_sattribute5_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_sattribute6_tab('||i||')=' || l_sattribute6_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_sattribute7_tab('||i||')=' || l_sattribute7_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_sattribute8_tab('||i||')=' || l_sattribute8_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_sattribute9_tab('||i||')=' || l_sattribute9_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_sattribute10_tab('||i||')=' || l_sattribute10_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_sattribute11_tab('||i||')=' || l_sattribute11_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_sattribute12_tab('||i||')=' || l_sattribute12_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_sattribute13_tab('||i||')=' || l_sattribute13_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_sattribute14_tab('||i||')=' || l_sattribute14_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_sattribute15_tab('||i||')=' || l_sattribute15_tab(i));
    END IF;
  END LOOP;
  END IF;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END; /* insert_okl_slctd_optns */

FUNCTION find_osid_mapping_id(p_id IN NUMBER) RETURN NUMBER IS
hi NUMBER;
lo NUMBER;
m NUMBER;
BEGIN
  lo := 1;
  hi := l_okl_k_lines_counter - 1;
  WHILE (lo <= hi) LOOP
    m := FLOOR((hi + lo)/2);
    IF (l_osid_mapping_tab(m).id = p_id) THEN
      RETURN l_osid_mapping_tab(m).subsidy_id;
    ELSIF (l_osid_mapping_tab(m).id > p_id) THEN
      hi := m - 1;
    ELSE
      lo := m + 1;
    END IF;
  END LOOP;
  RETURN -1;
END;  /* find_osid_mapping_id */

PROCEDURE sort_osid_mapping_tab IS
  TYPE numtabtype IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
  --a numtabtype;
  l_stack numtabtype;
  l_stack_index NUMBER := 0;
  N NUMBER;
  R NUMBER;
  L NUMBER;
  P NUMBER;
  W NUMBER;
  W2 NUMBER;
  X NUMBER;
  I NUMBER;
  J NUMBER;
BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  NULL;

  N := l_okl_k_lines_counter - 1;
  IF (N < 2) THEN
    RETURN;
  END IF;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := 1;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := N;

  --dbms_output.put_line('l_stack_index=' || l_stack_index);
  WHILE l_stack_index > 0
  LOOP
    R := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    L := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    --dbms_output.put_line('Pop: l_stack_index=' || l_stack_index);
    WHILE 1=1
    LOOP -- loop until L >= R
      I := L;
      J := R;
      P := FLOOR((L+R)/2);
      --if (a(L) > a(P)) then
      IF (l_osid_mapping_tab(L).id > l_osid_mapping_tab(P).id)
      THEN
        W := l_osid_mapping_tab(L).id;
        W2 := l_osid_mapping_tab(L).subsidy_id;
        l_osid_mapping_tab(L).id :=l_osid_mapping_tab(P).id;
        l_osid_mapping_tab(L).subsidy_id :=l_osid_mapping_tab(P).subsidy_id;
        l_osid_mapping_tab(P).id := W;
        l_osid_mapping_tab(P).subsidy_id := W2;
      END IF;
      --if (a(L) > a(R)) then
      IF (l_osid_mapping_tab(L).id > l_osid_mapping_tab(R).id)
      THEN
        W := l_osid_mapping_tab(L).id;
        W2 := l_osid_mapping_tab(L).subsidy_id;
        l_osid_mapping_tab(L).id :=l_osid_mapping_tab(R).id;
        l_osid_mapping_tab(L).subsidy_id :=l_osid_mapping_tab(R).subsidy_id;
        l_osid_mapping_tab(R).id := W;
        l_osid_mapping_tab(R).subsidy_id := W2;
      END IF;
      --if (a(P) > a(R)) then
      IF (l_osid_mapping_tab(P).id > l_osid_mapping_tab(R).id)
      THEN
        W := l_osid_mapping_tab(P).id;
        W2 := l_osid_mapping_tab(P).subsidy_id;
        l_osid_mapping_tab(P).id :=l_osid_mapping_tab(R).id;
        l_osid_mapping_tab(P).subsidy_id :=l_osid_mapping_tab(R).subsidy_id;
        l_osid_mapping_tab(R).id := W;
        l_osid_mapping_tab(R).subsidy_id := W2;
      END IF;
      --X := a(P);
      X := l_osid_mapping_tab(P).id;
      WHILE 1=1
      LOOP    -- until I > J
        --while (a(I) < X) loop
        WHILE (l_osid_mapping_tab(I).id < X) LOOP
          I := I + 1;
        END LOOP;
        WHILE (X < l_osid_mapping_tab(J).id) LOOP
          J := J - 1;
        END LOOP;
        IF (I <= J) THEN
          W := l_osid_mapping_tab(I).id;
          W2 := l_osid_mapping_tab(I).subsidy_id;
          l_osid_mapping_tab(I).id :=l_osid_mapping_tab(J).id;
          l_osid_mapping_tab(I).subsidy_id :=l_osid_mapping_tab(J).subsidy_id;
          l_osid_mapping_tab(J).id := W;
          l_osid_mapping_tab(J).subsidy_id := W2;
          I := I + 1;
          J := J - 1;
        END IF;
        EXIT WHEN I > J;
      END LOOP;
      IF (J - L < R - I) THEN
        IF (I < R) THEN
          --push(I); push(R);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := I;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := R;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        R := J;
      ELSE
        IF (L < J) THEN
          --push(L); push(J);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := L;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := J;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        L := I;
      END IF;

      EXIT WHEN (L >= R);
    END LOOP;
  END LOOP;

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'sort_osid_mapping_tab');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing sort_osid_mapping_tab:l_osid_mapping_tab N=' || N || ' ...');
  END IF;

  --print array
  FOR i IN 1..N
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_osid_mapping_tab('||i||')=' || l_osid_mapping_tab(i).id || ':' || l_osid_mapping_tab(i).subsidy_id);
    END IF;
  END LOOP;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;  /* sort_osid_mapping_tab */

FUNCTION find_okl_k_lines_rec(p_id IN NUMBER) RETURN l_okl_k_lines_rec_type IS
hi NUMBER;
lo NUMBER;
m NUMBER;
l_tmp_rec l_okl_k_lines_rec_type;
BEGIN
  lo := 1;
  hi := l_okl_k_lines_rec_counter - 1;
  WHILE (lo <= hi) LOOP
    m := FLOOR((hi + lo)/2);
    IF (l_okl_k_lines_rec(m).id = p_id) THEN
      RETURN l_okl_k_lines_rec(m);
    ELSIF (l_okl_k_lines_rec(m).id > p_id) THEN
      hi := m - 1;
    ELSE
      lo := m + 1;
    END IF;
  END LOOP;
  RETURN l_tmp_rec;
END;  /* find_okl_k_lines_rec */

PROCEDURE sort_okl_k_lines_rec IS
  TYPE numtabtype IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
  --a numtabtype;
  l_stack numtabtype;
  l_stack_index NUMBER := 0;
  N NUMBER;
  R NUMBER;
  L NUMBER;
  P NUMBER;
  W NUMBER;
  W2 NUMBER;
  W3 NUMBER;
  W4 okc_k_lines_tl.item_description%TYPE;
  X NUMBER;
  I NUMBER;
  J NUMBER;
BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  NULL;

  N := l_okl_k_lines_rec_counter - 1;
  IF (N < 2) THEN
    RETURN;
  END IF;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := 1;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := N;

  --dbms_output.put_line('l_stack_index=' || l_stack_index);
  WHILE l_stack_index > 0
  LOOP
    R := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    L := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    --dbms_output.put_line('Pop: l_stack_index=' || l_stack_index);
    WHILE 1=1
    LOOP -- loop until L >= R
      I := L;
      J := R;
      P := FLOOR((L+R)/2);
      --if (a(L) > a(P)) then
      IF (l_okl_k_lines_rec(L).id > l_okl_k_lines_rec(P).id)
      THEN
        W := l_okl_k_lines_rec(L).id;
        W2 := l_okl_k_lines_rec(L).oec;
        W3 := l_okl_k_lines_rec(L).year_built;
        W4 := l_okl_k_lines_rec(L).item_description;
        l_okl_k_lines_rec(L).id :=l_okl_k_lines_rec(P).id;
        l_okl_k_lines_rec(L).oec :=l_okl_k_lines_rec(P).oec;
        l_okl_k_lines_rec(L).year_built :=l_okl_k_lines_rec(P).year_built;
        l_okl_k_lines_rec(L).item_description :=l_okl_k_lines_rec(P).item_description;
        l_okl_k_lines_rec(P).id := W;
        l_okl_k_lines_rec(P).oec := W2;
        l_okl_k_lines_rec(P).year_built := W3;
        l_okl_k_lines_rec(P).item_description := W4;
      END IF;
      --if (a(L) > a(R)) then
      IF (l_okl_k_lines_rec(L).id > l_okl_k_lines_rec(R).id)
      THEN
        W := l_okl_k_lines_rec(L).id;
        W2 := l_okl_k_lines_rec(L).oec;
        W3 := l_okl_k_lines_rec(L).year_built;
        W4 := l_okl_k_lines_rec(L).item_description;
        l_okl_k_lines_rec(L).id :=l_okl_k_lines_rec(R).id;
        l_okl_k_lines_rec(L).oec :=l_okl_k_lines_rec(R).oec;
        l_okl_k_lines_rec(L).year_built :=l_okl_k_lines_rec(R).year_built;
        l_okl_k_lines_rec(L).item_description :=l_okl_k_lines_rec(R).item_description;
        l_okl_k_lines_rec(R).id := W;
        l_okl_k_lines_rec(R).oec := W2;
        l_okl_k_lines_rec(R).year_built := W3;
        l_okl_k_lines_rec(R).item_description := W4;
      END IF;
      --if (a(P) > a(R)) then
      IF (l_okl_k_lines_rec(P).id > l_okl_k_lines_rec(R).id)
      THEN
        W := l_okl_k_lines_rec(P).id;
        W2 := l_okl_k_lines_rec(P).oec;
        W3 := l_okl_k_lines_rec(P).year_built;
        W4 := l_okl_k_lines_rec(P).item_description;
        l_okl_k_lines_rec(P).id :=l_okl_k_lines_rec(R).id;
        l_okl_k_lines_rec(P).oec :=l_okl_k_lines_rec(R).oec;
        l_okl_k_lines_rec(P).year_built :=l_okl_k_lines_rec(R).year_built;
        l_okl_k_lines_rec(P).item_description :=l_okl_k_lines_rec(R).item_description;
        l_okl_k_lines_rec(R).id := W;
        l_okl_k_lines_rec(R).oec := W2;
        l_okl_k_lines_rec(R).year_built := W3;
        l_okl_k_lines_rec(R).item_description := W4;
      END IF;
      --X := a(P);
      X := l_okl_k_lines_rec(P).id;
      WHILE 1=1
      LOOP    -- until I > J
        --while (a(I) < X) loop
        WHILE (l_okl_k_lines_rec(I).id < X) LOOP
          I := I + 1;
        END LOOP;
        WHILE (X < l_okl_k_lines_rec(J).id) LOOP
          J := J - 1;
        END LOOP;
        IF (I <= J) THEN
          W := l_okl_k_lines_rec(I).id;
          W2 := l_okl_k_lines_rec(I).oec;
          W3 := l_okl_k_lines_rec(I).year_built;
          W4 := l_okl_k_lines_rec(I).item_description;
          l_okl_k_lines_rec(I).id :=l_okl_k_lines_rec(J).id;
          l_okl_k_lines_rec(I).oec :=l_okl_k_lines_rec(J).oec;
          l_okl_k_lines_rec(I).year_built :=l_okl_k_lines_rec(J).year_built;
          l_okl_k_lines_rec(I).item_description :=l_okl_k_lines_rec(J).item_description;
          l_okl_k_lines_rec(J).id := W;
          l_okl_k_lines_rec(J).oec := W2;
          l_okl_k_lines_rec(J).year_built := W3;
          l_okl_k_lines_rec(J).item_description := W4;
          I := I + 1;
          J := J - 1;
        END IF;
        EXIT WHEN I > J;
      END LOOP;
      IF (J - L < R - I) THEN
        IF (I < R) THEN
          --push(I); push(R);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := I;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := R;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        R := J;
      ELSE
        IF (L < J) THEN
          --push(L); push(J);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := L;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := J;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        L := I;
      END IF;

      EXIT WHEN (L >= R);
    END LOOP;
  END LOOP;

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'sort_okl_k_lines_rec');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing sort_okl_k_lines_rec:l_okl_k_lines_rec N=' || N || ' ...');
  END IF;

  --print array
  FOR i IN 1..N
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_okl_k_lines_rec('||i||')=' || l_okl_k_lines_rec(i).id || ':' || l_okl_k_lines_rec(i).oec || ':' || l_okl_k_lines_rec(i).year_built || ':' || l_okl_k_lines_rec(i).item_description );
    END IF;
  END LOOP;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;  /* sort_okl_k_lines_rec */


PROCEDURE insert_okl_k_lines IS
CURSOR c8(p_id NUMBER) IS
SELECT
       a.id, a.kle_id, a.sty_id,
       a.object_version_number, a.lao_amount, a.fee_charge,
       a.title_date, a.date_residual_last_review, a.date_last_reamortisation,
       a.termination_purchase_amount, a.date_last_cleanup, a.remarketed_amount,
       a.date_remarketed, a.remarket_margin, a.repurchased_amount,
       a.date_repurchased, a.gain_loss, a.floor_amount,
       a.previous_contract, a.tracked_residual, a.date_title_received,
       a.estimated_oec, a.residual_percentage, a.capital_reduction,
       a.vendor_advance_paid, a.tradein_amount, a.delivered_date,
       a.year_of_manufacture, a.initial_direct_cost, a.occupancy,
       a.date_last_inspection, a.date_next_inspection_due, a.weighted_average_life,
       a.bond_equivalent_yield, a.refinance_amount, a.year_built,
       a.coverage_ratio, a.gross_square_footage, a.net_rentable,
       a.date_letter_acceptance, a.date_commitment_expiration, a.date_appraisal,
       a.appraisal_value, a.residual_value, a.percent,
       a.coverage, a.lrv_amount, a.amount,
       a.lrs_percent, a.evergreen_percent, a.percent_stake,
       a.amount_stake, a.date_sold, a.sty_id_for,
       a.attribute_category, a.attribute1, a.attribute2,
       a.attribute3, a.attribute4, a.attribute5,
       a.attribute6, a.attribute7, a.attribute8,
       a.attribute9, a.attribute10, a.attribute11,
       a.attribute12, a.attribute13, a.attribute14,
       a.attribute15, a.created_by, a.creation_date,
       a.last_updated_by, a.last_update_date, a.last_update_login,
       a.nty_code, a.fcg_code, a.prc_code,
       a.re_lease_yn, a.prescribed_asset_yn, a.credit_tenant_yn,
       a.secured_deal_yn, a.clg_id, a.date_funding,
       a.date_funding_required, a.date_accepted, a.date_delivery_expected,
       a.oec, a.capital_amount, a.residual_grnty_amount,
       a.residual_code, a.rvi_premium, a.credit_nature,
       a.capitalized_interest, a.capital_reduction_percent, a.date_pay_investor_start,
       a.pay_investor_frequency, a.pay_investor_event, a.pay_investor_remittance_days,
       a.fee_type, a.subsidy_id, a.subsidy_override_amount,
       a.pre_tax_yield, a.after_tax_yield, a.implicit_interest_rate,
       a.implicit_non_idc_interest_rate, a.pre_tax_irr, a.after_tax_irr,
       a.sub_pre_tax_yield, a.sub_after_tax_yield, a.sub_impl_interest_rate,
       a.sub_impl_non_idc_int_rate, a.sub_pre_tax_irr, a.sub_after_tax_irr,
       a.item_insurance_category, a.qte_id, a.funding_date,
       a.stream_type_subclass, b.lse_id, c.item_description,
       a.fee_purpose_code, a.date_funding_expected, a.manufacturer_name,
       a.model_number, a.down_payment_receiver_code, a.capitalize_down_payment_yn,
	   a.ORIG_CONTRACT_LINE_ID --sechawla 17-Jul-09 PRB ESG enhancements : added this column
FROM okl_k_lines a,
     okc_k_lines_b b,
     okc_k_lines_tl c
WHERE b.id = a.id
AND   b.dnz_chr_id = p_id
AND   b.id = c.id
AND   c.LANGUAGE = USERENV('LANG');

    TYPE l_id_type IS TABLE OF okl_k_lines.id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_kle_id_type IS TABLE OF okl_k_lines.kle_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_sty_id_type IS TABLE OF okl_k_lines.sty_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_object_version_number_type IS TABLE OF okl_k_lines.object_version_number%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_lao_amount_type IS TABLE OF okl_k_lines.lao_amount%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_fee_charge_type IS TABLE OF okl_k_lines.fee_charge%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_title_date_type IS TABLE OF okl_k_lines.title_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_date_residual_last_revi_type IS TABLE OF okl_k_lines.date_residual_last_review%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_date_last_reamortisatio_type IS TABLE OF okl_k_lines.date_last_reamortisation%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_termination_purchase_am_type IS TABLE OF okl_k_lines.termination_purchase_amount%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_date_last_cleanup_type IS TABLE OF okl_k_lines.date_last_cleanup%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_remarketed_amount_type IS TABLE OF okl_k_lines.remarketed_amount%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_date_remarketed_type IS TABLE OF okl_k_lines.date_remarketed%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_remarket_margin_type IS TABLE OF okl_k_lines.remarket_margin%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_repurchased_amount_type IS TABLE OF okl_k_lines.repurchased_amount%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_date_repurchased_type IS TABLE OF okl_k_lines.date_repurchased%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_gain_loss_type IS TABLE OF okl_k_lines.gain_loss%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_floor_amount_type IS TABLE OF okl_k_lines.floor_amount%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_previous_contract_type IS TABLE OF okl_k_lines.previous_contract%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tracked_residual_type IS TABLE OF okl_k_lines.tracked_residual%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_date_title_received_type IS TABLE OF okl_k_lines.date_title_received%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_estimated_oec_type IS TABLE OF okl_k_lines.estimated_oec%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_residual_percentage_type IS TABLE OF okl_k_lines.residual_percentage%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_capital_reduction_type IS TABLE OF okl_k_lines.capital_reduction%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_vendor_advance_paid_type IS TABLE OF okl_k_lines.vendor_advance_paid%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_tradein_amount_type IS TABLE OF okl_k_lines.tradein_amount%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_delivered_date_type IS TABLE OF okl_k_lines.delivered_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_year_of_manufacture_type IS TABLE OF okl_k_lines.year_of_manufacture%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_initial_direct_cost_type IS TABLE OF okl_k_lines.initial_direct_cost%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_occupancy_type IS TABLE OF okl_k_lines.occupancy%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_date_last_inspection_type IS TABLE OF okl_k_lines.date_last_inspection%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_date_next_inspection_du_type IS TABLE OF okl_k_lines.date_next_inspection_due%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_weighted_average_life_type IS TABLE OF okl_k_lines.weighted_average_life%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_bond_equivalent_yield_type IS TABLE OF okl_k_lines.bond_equivalent_yield%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_refinance_amount_type IS TABLE OF okl_k_lines.refinance_amount%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_year_built_type IS TABLE OF okl_k_lines.year_built%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_coverage_ratio_type IS TABLE OF okl_k_lines.coverage_ratio%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_gross_square_footage_type IS TABLE OF okl_k_lines.gross_square_footage%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_net_rentable_type IS TABLE OF okl_k_lines.net_rentable%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_date_letter_acceptance_type IS TABLE OF okl_k_lines.date_letter_acceptance%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_date_commitment_expirat_type IS TABLE OF okl_k_lines.date_commitment_expiration%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_date_appraisal_type IS TABLE OF okl_k_lines.date_appraisal%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_appraisal_value_type IS TABLE OF okl_k_lines.appraisal_value%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_residual_value_type IS TABLE OF okl_k_lines.residual_value%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_percent_type IS TABLE OF okl_k_lines.percent%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_coverage_type IS TABLE OF okl_k_lines.coverage%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_lrv_amount_type IS TABLE OF okl_k_lines.lrv_amount%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_amount_type IS TABLE OF okl_k_lines.amount%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_lrs_percent_type IS TABLE OF okl_k_lines.lrs_percent%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_evergreen_percent_type IS TABLE OF okl_k_lines.evergreen_percent%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_percent_stake_type IS TABLE OF okl_k_lines.percent_stake%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_amount_stake_type IS TABLE OF okl_k_lines.amount_stake%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_date_sold_type IS TABLE OF okl_k_lines.date_sold%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_sty_id_for_type IS TABLE OF okl_k_lines.sty_id_for%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute_category_type IS TABLE OF okl_k_lines.attribute_category%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute1_type IS TABLE OF okl_k_lines.attribute1%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute2_type IS TABLE OF okl_k_lines.attribute2%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute3_type IS TABLE OF okl_k_lines.attribute3%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute4_type IS TABLE OF okl_k_lines.attribute4%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute5_type IS TABLE OF okl_k_lines.attribute5%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute6_type IS TABLE OF okl_k_lines.attribute6%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute7_type IS TABLE OF okl_k_lines.attribute7%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute8_type IS TABLE OF okl_k_lines.attribute8%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute9_type IS TABLE OF okl_k_lines.attribute9%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute10_type IS TABLE OF okl_k_lines.attribute10%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute11_type IS TABLE OF okl_k_lines.attribute11%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute12_type IS TABLE OF okl_k_lines.attribute12%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute13_type IS TABLE OF okl_k_lines.attribute13%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute14_type IS TABLE OF okl_k_lines.attribute14%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute15_type IS TABLE OF okl_k_lines.attribute15%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_created_by_type IS TABLE OF okl_k_lines.created_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_creation_date_type IS TABLE OF okl_k_lines.creation_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_last_updated_by_type IS TABLE OF okl_k_lines.last_updated_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_last_update_date_type IS TABLE OF okl_k_lines.last_update_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_last_update_login_type IS TABLE OF okl_k_lines.last_update_login%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_nty_code_type IS TABLE OF okl_k_lines.nty_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_fcg_code_type IS TABLE OF okl_k_lines.fcg_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_prc_code_type IS TABLE OF okl_k_lines.prc_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_re_lease_yn_type IS TABLE OF okl_k_lines.re_lease_yn%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_prescribed_asset_yn_type IS TABLE OF okl_k_lines.prescribed_asset_yn%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_credit_tenant_yn_type IS TABLE OF okl_k_lines.credit_tenant_yn%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_secured_deal_yn_type IS TABLE OF okl_k_lines.secured_deal_yn%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_clg_id_type IS TABLE OF okl_k_lines.clg_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_date_funding_type IS TABLE OF okl_k_lines.date_funding%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_date_funding_required_type IS TABLE OF okl_k_lines.date_funding_required%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_date_accepted_type IS TABLE OF okl_k_lines.date_accepted%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_date_delivery_expected_type IS TABLE OF okl_k_lines.date_delivery_expected%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_oec_type IS TABLE OF okl_k_lines.oec%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_capital_amount_type IS TABLE OF okl_k_lines.capital_amount%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_residual_grnty_amount_type IS TABLE OF okl_k_lines.residual_grnty_amount%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_residual_code_type IS TABLE OF okl_k_lines.residual_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rvi_premium_type IS TABLE OF okl_k_lines.rvi_premium%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_credit_nature_type IS TABLE OF okl_k_lines.credit_nature%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_capitalized_interest_type IS TABLE OF okl_k_lines.capitalized_interest%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_capital_reduction_perce_type IS TABLE OF okl_k_lines.capital_reduction_percent%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_date_pay_investor_start_type IS TABLE OF okl_k_lines.date_pay_investor_start%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_pay_investor_frequency_type IS TABLE OF okl_k_lines.pay_investor_frequency%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_pay_investor_event_type IS TABLE OF okl_k_lines.pay_investor_event%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_pay_investor_remit_days_type IS TABLE OF okl_k_lines.pay_investor_remittance_days%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_fee_type_type IS TABLE OF okl_k_lines.fee_type%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_subsidy_id_type IS TABLE OF okl_k_lines.subsidy_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_subsidy_override_amount_type IS TABLE OF okl_k_lines.subsidy_override_amount%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_pre_tax_yield_type IS TABLE OF okl_k_lines.pre_tax_yield%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_after_tax_yield_type IS TABLE OF okl_k_lines.after_tax_yield%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_implicit_interest_rate_type IS TABLE OF okl_k_lines.implicit_interest_rate%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_implicit_non_idc_i_rate_type IS TABLE OF okl_k_lines.implicit_non_idc_interest_rate%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_pre_tax_irr_type IS TABLE OF okl_k_lines.pre_tax_irr%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_after_tax_irr_type IS TABLE OF okl_k_lines.after_tax_irr%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_sub_pre_tax_yield_type IS TABLE OF okl_k_lines.sub_pre_tax_yield%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_sub_after_tax_yield_type IS TABLE OF okl_k_lines.sub_after_tax_yield%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_sub_impl_interest_rate_type IS TABLE OF okl_k_lines.sub_impl_interest_rate%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_sub_impl_non_idc_int_ra_type IS TABLE OF okl_k_lines.sub_impl_non_idc_int_rate%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_sub_pre_tax_irr_type IS TABLE OF okl_k_lines.sub_pre_tax_irr%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_sub_after_tax_irr_type IS TABLE OF okl_k_lines.sub_after_tax_irr%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_item_insurance_category_type IS TABLE OF okl_k_lines.item_insurance_category%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_qte_id_type IS TABLE OF okl_k_lines.qte_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_funding_date_type IS TABLE OF okl_k_lines.funding_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_stream_type_subclass_type IS TABLE OF okl_k_lines.stream_type_subclass%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_lse_id_type IS TABLE OF okc_k_lines_b.lse_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_item_description_type IS TABLE OF okc_k_lines_tl.item_description%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_fee_purpose_code_type IS TABLE OF okl_k_lines.fee_purpose_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_date_funding_expected_type is table of okl_k_lines.date_funding_expected%TYPE index by binary_integer;
    TYPE l_manufacturer_name_type is table of okl_k_lines.manufacturer_name%TYPE index by binary_integer;
    TYPE l_model_number_type is table of okl_k_lines.model_number%TYPE index by binary_integer;
    TYPE l_down_payment_recei_code_type is table of okl_k_lines.down_payment_receiver_code%TYPE index by binary_integer;
    TYPE l_capitalize_down_paym_yn_type is table of okl_k_lines.capitalize_down_payment_yn%TYPE index by binary_integer;

    --sechawla 17-Jul-09 PRB ESG Enhancements : added new column ORIG_CONTRACT_LINE_ID in okl_k_lines
    TYPE l_ORIG_CONTRACT_LINE_ID_type is table of okl_k_lines.ORIG_CONTRACT_LINE_ID%TYPE index by binary_integer;

    l_id_tab l_id_type;
    l_kle_id_tab l_kle_id_type;
    l_sty_id_tab l_sty_id_type;
    l_object_version_number_tab l_object_version_number_type;
    l_lao_amount_tab l_lao_amount_type;
    l_fee_charge_tab l_fee_charge_type;
    l_title_date_tab l_title_date_type;
    l_date_residual_last_revi_tab l_date_residual_last_revi_type;
    l_date_last_reamortisatio_tab l_date_last_reamortisatio_type;
    l_termination_purchase_am_tab l_termination_purchase_am_type;
    l_date_last_cleanup_tab l_date_last_cleanup_type;
    l_remarketed_amount_tab l_remarketed_amount_type;
    l_date_remarketed_tab l_date_remarketed_type;
    l_remarket_margin_tab l_remarket_margin_type;
    l_repurchased_amount_tab l_repurchased_amount_type;
    l_date_repurchased_tab l_date_repurchased_type;
    l_gain_loss_tab l_gain_loss_type;
    l_floor_amount_tab l_floor_amount_type;
    l_previous_contract_tab l_previous_contract_type;
    l_tracked_residual_tab l_tracked_residual_type;
    l_date_title_received_tab l_date_title_received_type;
    l_estimated_oec_tab l_estimated_oec_type;
    l_residual_percentage_tab l_residual_percentage_type;
    l_capital_reduction_tab l_capital_reduction_type;
    l_vendor_advance_paid_tab l_vendor_advance_paid_type;
    l_tradein_amount_tab l_tradein_amount_type;
    l_delivered_date_tab l_delivered_date_type;
    l_year_of_manufacture_tab l_year_of_manufacture_type;
    l_initial_direct_cost_tab l_initial_direct_cost_type;
    l_occupancy_tab l_occupancy_type;
    l_date_last_inspection_tab l_date_last_inspection_type;
    l_date_next_inspection_du_tab l_date_next_inspection_du_type;
    l_weighted_average_life_tab l_weighted_average_life_type;
    l_bond_equivalent_yield_tab l_bond_equivalent_yield_type;
    l_refinance_amount_tab l_refinance_amount_type;
    l_year_built_tab l_year_built_type;
    l_coverage_ratio_tab l_coverage_ratio_type;
    l_gross_square_footage_tab l_gross_square_footage_type;
    l_net_rentable_tab l_net_rentable_type;
    l_date_letter_acceptance_tab l_date_letter_acceptance_type;
    l_date_commitment_expirat_tab l_date_commitment_expirat_type;
    l_date_appraisal_tab l_date_appraisal_type;
    l_appraisal_value_tab l_appraisal_value_type;
    l_residual_value_tab l_residual_value_type;
    l_percent_tab l_percent_type;
    l_coverage_tab l_coverage_type;
    l_lrv_amount_tab l_lrv_amount_type;
    l_amount_tab l_amount_type;
    l_lrs_percent_tab l_lrs_percent_type;
    l_evergreen_percent_tab l_evergreen_percent_type;
    l_percent_stake_tab l_percent_stake_type;
    l_amount_stake_tab l_amount_stake_type;
    l_date_sold_tab l_date_sold_type;
    l_sty_id_for_tab l_sty_id_for_type;
    l_attribute_category_tab l_attribute_category_type;
    l_attribute1_tab l_attribute1_type;
    l_attribute2_tab l_attribute2_type;
    l_attribute3_tab l_attribute3_type;
    l_attribute4_tab l_attribute4_type;
    l_attribute5_tab l_attribute5_type;
    l_attribute6_tab l_attribute6_type;
    l_attribute7_tab l_attribute7_type;
    l_attribute8_tab l_attribute8_type;
    l_attribute9_tab l_attribute9_type;
    l_attribute10_tab l_attribute10_type;
    l_attribute11_tab l_attribute11_type;
    l_attribute12_tab l_attribute12_type;
    l_attribute13_tab l_attribute13_type;
    l_attribute14_tab l_attribute14_type;
    l_attribute15_tab l_attribute15_type;
    l_created_by_tab l_created_by_type;
    l_creation_date_tab l_creation_date_type;
    l_last_updated_by_tab l_last_updated_by_type;
    l_last_update_date_tab l_last_update_date_type;
    l_last_update_login_tab l_last_update_login_type;
    l_nty_code_tab l_nty_code_type;
    l_fcg_code_tab l_fcg_code_type;
    l_prc_code_tab l_prc_code_type;
    l_re_lease_yn_tab l_re_lease_yn_type;
    l_prescribed_asset_yn_tab l_prescribed_asset_yn_type;
    l_credit_tenant_yn_tab l_credit_tenant_yn_type;
    l_secured_deal_yn_tab l_secured_deal_yn_type;
    l_clg_id_tab l_clg_id_type;
    l_date_funding_tab l_date_funding_type;
    l_date_funding_required_tab l_date_funding_required_type;
    l_date_accepted_tab l_date_accepted_type;
    l_date_delivery_expected_tab l_date_delivery_expected_type;
    l_oec_tab l_oec_type;
    l_capital_amount_tab l_capital_amount_type;
    l_residual_grnty_amount_tab l_residual_grnty_amount_type;
    l_residual_code_tab l_residual_code_type;
    l_rvi_premium_tab l_rvi_premium_type;
    l_credit_nature_tab l_credit_nature_type;
    l_capitalized_interest_tab l_capitalized_interest_type;
    l_capital_reduction_perce_tab l_capital_reduction_perce_type;
    l_date_pay_investor_start_tab l_date_pay_investor_start_type;
    l_pay_investor_frequency_tab l_pay_investor_frequency_type;
    l_pay_investor_event_tab l_pay_investor_event_type;
    l_pay_investor_remit_days_tab l_pay_investor_remit_days_type;
    l_fee_type_tab l_fee_type_type;
    l_subsidy_id_tab l_subsidy_id_type;
    l_subsidy_override_amount_tab l_subsidy_override_amount_type;
    l_pre_tax_yield_tab l_pre_tax_yield_type;
    l_after_tax_yield_tab l_after_tax_yield_type;
    l_implicit_interest_rate_tab l_implicit_interest_rate_type;
    l_implicit_non_idc_i_rate_tab l_implicit_non_idc_i_rate_type;
    l_pre_tax_irr_tab l_pre_tax_irr_type;
    l_after_tax_irr_tab l_after_tax_irr_type;
    l_sub_pre_tax_yield_tab l_sub_pre_tax_yield_type;
    l_sub_after_tax_yield_tab l_sub_after_tax_yield_type;
    l_sub_impl_interest_rate_tab l_sub_impl_interest_rate_type;
    l_sub_impl_non_idc_int_ra_tab l_sub_impl_non_idc_int_ra_type;
    l_sub_pre_tax_irr_tab l_sub_pre_tax_irr_type;
    l_sub_after_tax_irr_tab l_sub_after_tax_irr_type;
    l_item_insurance_category_tab l_item_insurance_category_type;
    l_qte_id_tab l_qte_id_type;
    l_funding_date_tab l_funding_date_type;
    l_stream_type_subclass_tab l_stream_type_subclass_type;
    l_item_description_tab l_item_description_type;
    l_fee_purpose_code_tab l_fee_purpose_code_type;
    l_date_funding_expected_tab l_date_funding_expected_type;
    l_manufacturer_name_tab l_manufacturer_name_type;
    l_model_number_tab l_model_number_type;
    l_down_payment_recei_code_tab l_down_payment_recei_code_type;
    l_capitalize_down_paym_yn_tab l_capitalize_down_paym_yn_type;

    --sechawla 17-Jul-09 PRB ESG Enhancements : added new column ORIG_CONTRACT_LINE_ID in okl_k_lines
    l_ORIG_CONTRACT_LINE_ID_tab   l_ORIG_CONTRACT_LINE_ID_type;


    l_id_tab2 l_id_type;
    l_kle_id_tab2 l_kle_id_type;
    l_sty_id_tab2 l_sty_id_type;
    l_object_version_number_tab2 l_object_version_number_type;
    l_lao_amount_tab2 l_lao_amount_type;
    l_fee_charge_tab2 l_fee_charge_type;
    l_title_date_tab2 l_title_date_type;
    l_date_residual_last_revi_tab2 l_date_residual_last_revi_type;
    l_date_last_reamortisatio_tab2 l_date_last_reamortisatio_type;
    l_termination_purchase_am_tab2 l_termination_purchase_am_type;
    l_date_last_cleanup_tab2 l_date_last_cleanup_type;
    l_remarketed_amount_tab2 l_remarketed_amount_type;
    l_date_remarketed_tab2 l_date_remarketed_type;
    l_remarket_margin_tab2 l_remarket_margin_type;
    l_repurchased_amount_tab2 l_repurchased_amount_type;
    l_date_repurchased_tab2 l_date_repurchased_type;
    l_gain_loss_tab2 l_gain_loss_type;
    l_floor_amount_tab2 l_floor_amount_type;
    l_previous_contract_tab2 l_previous_contract_type;
    l_tracked_residual_tab2 l_tracked_residual_type;
    l_date_title_received_tab2 l_date_title_received_type;
    l_estimated_oec_tab2 l_estimated_oec_type;
    l_residual_percentage_tab2 l_residual_percentage_type;
    l_capital_reduction_tab2 l_capital_reduction_type;
    l_vendor_advance_paid_tab2 l_vendor_advance_paid_type;
    l_tradein_amount_tab2 l_tradein_amount_type;
    l_delivered_date_tab2 l_delivered_date_type;
    l_year_of_manufacture_tab2 l_year_of_manufacture_type;
    l_initial_direct_cost_tab2 l_initial_direct_cost_type;
    l_occupancy_tab2 l_occupancy_type;
    l_date_last_inspection_tab2 l_date_last_inspection_type;
    l_date_next_inspection_du_tab2 l_date_next_inspection_du_type;
    l_weighted_average_life_tab2 l_weighted_average_life_type;
    l_bond_equivalent_yield_tab2 l_bond_equivalent_yield_type;
    l_refinance_amount_tab2 l_refinance_amount_type;
    l_year_built_tab2 l_year_built_type;
    l_coverage_ratio_tab2 l_coverage_ratio_type;
    l_gross_square_footage_tab2 l_gross_square_footage_type;
    l_net_rentable_tab2 l_net_rentable_type;
    l_date_letter_acceptance_tab2 l_date_letter_acceptance_type;
    l_date_commitment_expirat_tab2 l_date_commitment_expirat_type;
    l_date_appraisal_tab2 l_date_appraisal_type;
    l_appraisal_value_tab2 l_appraisal_value_type;
    l_residual_value_tab2 l_residual_value_type;
    l_percent_tab2 l_percent_type;
    l_coverage_tab2 l_coverage_type;
    l_lrv_amount_tab2 l_lrv_amount_type;
    l_amount_tab2 l_amount_type;
    l_lrs_percent_tab2 l_lrs_percent_type;
    l_evergreen_percent_tab2 l_evergreen_percent_type;
    l_percent_stake_tab2 l_percent_stake_type;
    l_amount_stake_tab2 l_amount_stake_type;
    l_date_sold_tab2 l_date_sold_type;
    l_sty_id_for_tab2 l_sty_id_for_type;
    l_attribute_category_tab2 l_attribute_category_type;
    l_attribute1_tab2 l_attribute1_type;
    l_attribute2_tab2 l_attribute2_type;
    l_attribute3_tab2 l_attribute3_type;
    l_attribute4_tab2 l_attribute4_type;
    l_attribute5_tab2 l_attribute5_type;
    l_attribute6_tab2 l_attribute6_type;
    l_attribute7_tab2 l_attribute7_type;
    l_attribute8_tab2 l_attribute8_type;
    l_attribute9_tab2 l_attribute9_type;
    l_attribute10_tab2 l_attribute10_type;
    l_attribute11_tab2 l_attribute11_type;
    l_attribute12_tab2 l_attribute12_type;
    l_attribute13_tab2 l_attribute13_type;
    l_attribute14_tab2 l_attribute14_type;
    l_attribute15_tab2 l_attribute15_type;
    l_created_by_tab2 l_created_by_type;
    l_creation_date_tab2 l_creation_date_type;
    l_last_updated_by_tab2 l_last_updated_by_type;
    l_last_update_date_tab2 l_last_update_date_type;
    l_last_update_login_tab2 l_last_update_login_type;
    l_nty_code_tab2 l_nty_code_type;
    l_fcg_code_tab2 l_fcg_code_type;
    l_prc_code_tab2 l_prc_code_type;
    l_re_lease_yn_tab2 l_re_lease_yn_type;
    l_prescribed_asset_yn_tab2 l_prescribed_asset_yn_type;
    l_credit_tenant_yn_tab2 l_credit_tenant_yn_type;
    l_secured_deal_yn_tab2 l_secured_deal_yn_type;
    l_clg_id_tab2 l_clg_id_type;
    l_date_funding_tab2 l_date_funding_type;
    l_date_funding_required_tab2 l_date_funding_required_type;
    l_date_accepted_tab2 l_date_accepted_type;
    l_date_delivery_expected_tab2 l_date_delivery_expected_type;
    l_oec_tab2 l_oec_type;
    l_capital_amount_tab2 l_capital_amount_type;
    l_residual_grnty_amount_tab2 l_residual_grnty_amount_type;
    l_residual_code_tab2 l_residual_code_type;
    l_rvi_premium_tab2 l_rvi_premium_type;
    l_credit_nature_tab2 l_credit_nature_type;
    l_capitalized_interest_tab2 l_capitalized_interest_type;
    l_capital_reduction_perce_tab2 l_capital_reduction_perce_type;
    l_date_pay_investor_start_tab2 l_date_pay_investor_start_type;
    l_pay_investor_frequency_tab2 l_pay_investor_frequency_type;
    l_pay_investor_event_tab2 l_pay_investor_event_type;
    l_pay_investor_remit_days_tab2 l_pay_investor_remit_days_type;
    l_fee_type_tab2 l_fee_type_type;
    l_subsidy_id_tab2 l_subsidy_id_type;
    l_subsidy_override_amount_tab2 l_subsidy_override_amount_type;
    l_pre_tax_yield_tab2 l_pre_tax_yield_type;
    l_after_tax_yield_tab2 l_after_tax_yield_type;
    l_implicit_interest_rate_tab2 l_implicit_interest_rate_type;
    l_implicit_non_idc_i_rate_tab2 l_implicit_non_idc_i_rate_type;
    l_pre_tax_irr_tab2 l_pre_tax_irr_type;
    l_after_tax_irr_tab2 l_after_tax_irr_type;
    l_sub_pre_tax_yield_tab2 l_sub_pre_tax_yield_type;
    l_sub_after_tax_yield_tab2 l_sub_after_tax_yield_type;
    l_sub_impl_interest_rate_tab2 l_sub_impl_interest_rate_type;
    l_sub_impl_non_idc_int_ra_tab2 l_sub_impl_non_idc_int_ra_type;
    l_sub_pre_tax_irr_tab2 l_sub_pre_tax_irr_type;
    l_sub_after_tax_irr_tab2 l_sub_after_tax_irr_type;
    l_item_insurance_category_tab2 l_item_insurance_category_type;
    l_qte_id_tab2 l_qte_id_type;
    l_funding_date_tab2 l_funding_date_type;
    l_stream_type_subclass_tab2 l_stream_type_subclass_type;
    l_lse_id_tab2 l_lse_id_type;
    l_item_description_tab2 l_item_description_type;
    l_fee_purpose_code_tab2 l_fee_purpose_code_type;
    l_date_funding_expected_tab2 l_date_funding_expected_type;
    l_manufacturer_name_tab2 l_manufacturer_name_type;
    l_model_number_tab2 l_model_number_type;
    l_down_payment_recei_code_tab2 l_down_payment_recei_code_type;
    l_capitalize_down_paym_yn_tab2 l_capitalize_down_paym_yn_type;

    --sechawla 17-Jul-09 PRB ESG Enhancements : added new column ORIG_CONTRACT_LINE_ID in okl_k_lines
    l_ORIG_CONTRACT_LINE_ID_tab2   l_ORIG_CONTRACT_LINE_ID_type;

  l_new_id NUMBER;
  l_new_kle_id NUMBER;
  l_curr_id NUMBER;
  l_asset_category_id NUMBER;
  l_34_id NUMBER;
--l_okl_k_lines_rec2 lines_tbl_type;

BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  NULL;
  OPEN c8(p_chr_id);
  LOOP
    FETCH c8 bulk collect INTO
      l_id_tab2, l_kle_id_tab2, l_sty_id_tab2,
      l_object_version_number_tab2, l_lao_amount_tab2, l_fee_charge_tab2,
      l_title_date_tab2, l_date_residual_last_revi_tab2, l_date_last_reamortisatio_tab2,
      l_termination_purchase_am_tab2, l_date_last_cleanup_tab2, l_remarketed_amount_tab2,
      l_date_remarketed_tab2, l_remarket_margin_tab2, l_repurchased_amount_tab2,
      l_date_repurchased_tab2, l_gain_loss_tab2, l_floor_amount_tab2,
      l_previous_contract_tab2, l_tracked_residual_tab2, l_date_title_received_tab2,
      l_estimated_oec_tab2, l_residual_percentage_tab2, l_capital_reduction_tab2,
      l_vendor_advance_paid_tab2, l_tradein_amount_tab2, l_delivered_date_tab2,
      l_year_of_manufacture_tab2, l_initial_direct_cost_tab2, l_occupancy_tab2,
      l_date_last_inspection_tab2, l_date_next_inspection_du_tab2, l_weighted_average_life_tab2,
      l_bond_equivalent_yield_tab2, l_refinance_amount_tab2, l_year_built_tab2,
      l_coverage_ratio_tab2, l_gross_square_footage_tab2, l_net_rentable_tab2,
      l_date_letter_acceptance_tab2, l_date_commitment_expirat_tab2, l_date_appraisal_tab2,
      l_appraisal_value_tab2, l_residual_value_tab2, l_percent_tab2,
      l_coverage_tab2, l_lrv_amount_tab2, l_amount_tab2,
      l_lrs_percent_tab2, l_evergreen_percent_tab2, l_percent_stake_tab2,
      l_amount_stake_tab2, l_date_sold_tab2, l_sty_id_for_tab2,
      l_attribute_category_tab2, l_attribute1_tab2, l_attribute2_tab2,
      l_attribute3_tab2, l_attribute4_tab2, l_attribute5_tab2,
      l_attribute6_tab2, l_attribute7_tab2, l_attribute8_tab2,
      l_attribute9_tab2, l_attribute10_tab2, l_attribute11_tab2,
      l_attribute12_tab2, l_attribute13_tab2, l_attribute14_tab2,
      l_attribute15_tab2, l_created_by_tab2, l_creation_date_tab2,
      l_last_updated_by_tab2, l_last_update_date_tab2, l_last_update_login_tab2,
      l_nty_code_tab2, l_fcg_code_tab2, l_prc_code_tab2,
      l_re_lease_yn_tab2, l_prescribed_asset_yn_tab2, l_credit_tenant_yn_tab2,
      l_secured_deal_yn_tab2, l_clg_id_tab2, l_date_funding_tab2,
      l_date_funding_required_tab2, l_date_accepted_tab2, l_date_delivery_expected_tab2,
      l_oec_tab2, l_capital_amount_tab2, l_residual_grnty_amount_tab2,
      l_residual_code_tab2, l_rvi_premium_tab2, l_credit_nature_tab2,
      l_capitalized_interest_tab2, l_capital_reduction_perce_tab2, l_date_pay_investor_start_tab2,
      l_pay_investor_frequency_tab2, l_pay_investor_event_tab2, l_pay_investor_remit_days_tab2,
      l_fee_type_tab2, l_subsidy_id_tab2, l_subsidy_override_amount_tab2,
      l_pre_tax_yield_tab2, l_after_tax_yield_tab2, l_implicit_interest_rate_tab2,
      l_implicit_non_idc_i_rate_tab2, l_pre_tax_irr_tab2, l_after_tax_irr_tab2,
      l_sub_pre_tax_yield_tab2, l_sub_after_tax_yield_tab2, l_sub_impl_interest_rate_tab2,
      l_sub_impl_non_idc_int_ra_tab2, l_sub_pre_tax_irr_tab2, l_sub_after_tax_irr_tab2,
      l_item_insurance_category_tab2, l_qte_id_tab2, l_funding_date_tab2,
      l_stream_type_subclass_tab2, l_lse_id_tab2, l_item_description_tab2,
      l_fee_purpose_code_tab2, l_date_funding_expected_tab2, l_manufacturer_name_tab2,
      l_model_number_tab2, l_down_payment_recei_code_tab2, l_capitalize_down_paym_yn_tab2,

      --sechawla 17-Jul-09 PRB ESG Enhancements : added new column ORIG_CONTRACT_LINE_ID in okl_k_lines
      l_ORIG_CONTRACT_LINE_ID_tab2

    limit G_BULK_SIZE;
    EXIT WHEN l_id_tab2.COUNT = 0;

    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_id_tab2.count=' || l_id_tab2.COUNT);
    END IF;
    FOR i IN l_id_tab2.first..l_id_tab2.last
    LOOP

      --print('Processing record ' || i);
      l_id_tab(l_okl_k_lines_counter) := l_id_tab2(i);
      -- Change id
      --print('l_okl_k_lines_counter='|| l_okl_k_lines_counter || ' id=' || l_id_tab(l_okl_k_lines_counter));
      l_new_id := find_mapping_id(l_id_tab(l_okl_k_lines_counter));
      IF (l_new_id = -1) THEN
        IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                  OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ERROR : Mapping id not found for ' || l_id_tab(l_okl_k_lines_counter));
        END IF;
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        --raise_application_error(-20001, 'Can not find mapping id');
      END IF;
      l_id_tab(l_okl_k_lines_counter) := l_new_id;
      l_osid_mapping_tab(l_okl_k_lines_counter).id := l_id_tab(l_okl_k_lines_counter);

      l_kle_id_tab(l_okl_k_lines_counter) := l_kle_id_tab2(i);
      -- Change kle_id ??? AKP. No, Leave it alone
      /*if (l_kle_id_tab(l_okl_k_lines_counter) is not null) then
        l_new_kle_id := find_mapping_id(l_kle_id_tab(l_okl_k_lines_counter));
        if (l_new_kle_id = -1) then
          print('ERROR : Mapping kle_id not found for ' || l_kle_id_tab(l_okl_k_lines_counter));
          raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        end if;
        l_kle_id_tab(l_okl_k_lines_counter) := l_new_kle_id;
      end if; */

      --print('Before assigning sty_id');
      l_sty_id_tab(l_okl_k_lines_counter) := l_sty_id_tab2(i);
      l_object_version_number_tab(l_okl_k_lines_counter) := l_object_version_number_tab2(i);
      l_lao_amount_tab(l_okl_k_lines_counter) := l_lao_amount_tab2(i);
      l_fee_charge_tab(l_okl_k_lines_counter) := l_fee_charge_tab2(i);
      l_title_date_tab(l_okl_k_lines_counter) := l_title_date_tab2(i);
      l_date_residual_last_revi_tab(l_okl_k_lines_counter) := l_date_residual_last_revi_tab2(i);
      l_date_last_reamortisatio_tab(l_okl_k_lines_counter) := l_date_last_reamortisatio_tab2(i);
      l_termination_purchase_am_tab(l_okl_k_lines_counter) := l_termination_purchase_am_tab2(i);
      l_date_last_cleanup_tab(l_okl_k_lines_counter) := l_date_last_cleanup_tab2(i);
      l_remarketed_amount_tab(l_okl_k_lines_counter) := l_remarketed_amount_tab2(i);
      l_date_remarketed_tab(l_okl_k_lines_counter) := l_date_remarketed_tab2(i);
      l_remarket_margin_tab(l_okl_k_lines_counter) := l_remarket_margin_tab2(i);
      l_repurchased_amount_tab(l_okl_k_lines_counter) := l_repurchased_amount_tab2(i);
      l_date_repurchased_tab(l_okl_k_lines_counter) := l_date_repurchased_tab2(i);
      l_gain_loss_tab(l_okl_k_lines_counter) := l_gain_loss_tab2(i);
      l_floor_amount_tab(l_okl_k_lines_counter) := l_floor_amount_tab2(i);
      l_previous_contract_tab(l_okl_k_lines_counter) := l_previous_contract_tab2(i);
      l_tracked_residual_tab(l_okl_k_lines_counter) := l_tracked_residual_tab2(i);
      l_date_title_received_tab(l_okl_k_lines_counter) := l_date_title_received_tab2(i);
      l_estimated_oec_tab(l_okl_k_lines_counter) := l_estimated_oec_tab2(i);
      l_residual_percentage_tab(l_okl_k_lines_counter) := l_residual_percentage_tab2(i);
      l_capital_reduction_tab(l_okl_k_lines_counter) := l_capital_reduction_tab2(i);
      l_vendor_advance_paid_tab(l_okl_k_lines_counter) := l_vendor_advance_paid_tab2(i);
      l_tradein_amount_tab(l_okl_k_lines_counter) := l_tradein_amount_tab2(i);
      l_delivered_date_tab(l_okl_k_lines_counter) := l_delivered_date_tab2(i);
      l_year_of_manufacture_tab(l_okl_k_lines_counter) := l_year_of_manufacture_tab2(i);
      l_initial_direct_cost_tab(l_okl_k_lines_counter) := l_initial_direct_cost_tab2(i);
      l_occupancy_tab(l_okl_k_lines_counter) := l_occupancy_tab2(i);
      l_date_last_inspection_tab(l_okl_k_lines_counter) := l_date_last_inspection_tab2(i);
      l_date_next_inspection_du_tab(l_okl_k_lines_counter) := l_date_next_inspection_du_tab2(i);
      l_weighted_average_life_tab(l_okl_k_lines_counter) := l_weighted_average_life_tab2(i);
      l_bond_equivalent_yield_tab(l_okl_k_lines_counter) := l_bond_equivalent_yield_tab2(i);
      l_refinance_amount_tab(l_okl_k_lines_counter) := l_refinance_amount_tab2(i);
      l_year_built_tab(l_okl_k_lines_counter) := l_year_built_tab2(i);
      l_coverage_ratio_tab(l_okl_k_lines_counter) := l_coverage_ratio_tab2(i);
      l_gross_square_footage_tab(l_okl_k_lines_counter) := l_gross_square_footage_tab2(i);
      l_net_rentable_tab(l_okl_k_lines_counter) := l_net_rentable_tab2(i);
      l_date_letter_acceptance_tab(l_okl_k_lines_counter) := l_date_letter_acceptance_tab2(i);
      l_date_commitment_expirat_tab(l_okl_k_lines_counter) := l_date_commitment_expirat_tab2(i);
      l_date_appraisal_tab(l_okl_k_lines_counter) := l_date_appraisal_tab2(i);
      l_appraisal_value_tab(l_okl_k_lines_counter) := l_appraisal_value_tab2(i);
      l_residual_value_tab(l_okl_k_lines_counter) := l_residual_value_tab2(i);
      l_percent_tab(l_okl_k_lines_counter) := l_percent_tab2(i);
      l_coverage_tab(l_okl_k_lines_counter) := l_coverage_tab2(i);
      l_lrv_amount_tab(l_okl_k_lines_counter) := l_lrv_amount_tab2(i);
      l_amount_tab(l_okl_k_lines_counter) := l_amount_tab2(i);
      l_lrs_percent_tab(l_okl_k_lines_counter) := l_lrs_percent_tab2(i);
      l_evergreen_percent_tab(l_okl_k_lines_counter) := l_evergreen_percent_tab2(i);
      l_percent_stake_tab(l_okl_k_lines_counter) := l_percent_stake_tab2(i);
      l_amount_stake_tab(l_okl_k_lines_counter) := l_amount_stake_tab2(i);
      l_date_sold_tab(l_okl_k_lines_counter) := l_date_sold_tab2(i);
      l_sty_id_for_tab(l_okl_k_lines_counter) := l_sty_id_for_tab2(i);
      l_attribute_category_tab(l_okl_k_lines_counter) := l_attribute_category_tab2(i);
      l_attribute1_tab(l_okl_k_lines_counter) := l_attribute1_tab2(i);
      l_attribute2_tab(l_okl_k_lines_counter) := l_attribute2_tab2(i);
      l_attribute3_tab(l_okl_k_lines_counter) := l_attribute3_tab2(i);
      l_attribute4_tab(l_okl_k_lines_counter) := l_attribute4_tab2(i);
      l_attribute5_tab(l_okl_k_lines_counter) := l_attribute5_tab2(i);
      l_attribute6_tab(l_okl_k_lines_counter) := l_attribute6_tab2(i);
      l_attribute7_tab(l_okl_k_lines_counter) := l_attribute7_tab2(i);
      l_attribute8_tab(l_okl_k_lines_counter) := l_attribute8_tab2(i);
      l_attribute9_tab(l_okl_k_lines_counter) := l_attribute9_tab2(i);
      l_attribute10_tab(l_okl_k_lines_counter) := l_attribute10_tab2(i);
      l_attribute11_tab(l_okl_k_lines_counter) := l_attribute11_tab2(i);
      l_attribute12_tab(l_okl_k_lines_counter) := l_attribute12_tab2(i);
      l_attribute13_tab(l_okl_k_lines_counter) := l_attribute13_tab2(i);
      l_attribute14_tab(l_okl_k_lines_counter) := l_attribute14_tab2(i);
      l_attribute15_tab(l_okl_k_lines_counter) := l_attribute15_tab2(i);
      l_created_by_tab(l_okl_k_lines_counter) := l_created_by_tab2(i);
      l_creation_date_tab(l_okl_k_lines_counter) := l_creation_date_tab2(i);
      l_last_updated_by_tab(l_okl_k_lines_counter) := l_last_updated_by_tab2(i);
      l_last_update_date_tab(l_okl_k_lines_counter) := l_last_update_date_tab2(i);
      l_last_update_login_tab(l_okl_k_lines_counter) := l_last_update_login_tab2(i);
      l_nty_code_tab(l_okl_k_lines_counter) := l_nty_code_tab2(i);
      l_fcg_code_tab(l_okl_k_lines_counter) := l_fcg_code_tab2(i);
      l_prc_code_tab(l_okl_k_lines_counter) := l_prc_code_tab2(i);
      l_re_lease_yn_tab(l_okl_k_lines_counter) := l_re_lease_yn_tab2(i);
      l_prescribed_asset_yn_tab(l_okl_k_lines_counter) := l_prescribed_asset_yn_tab2(i);
      l_credit_tenant_yn_tab(l_okl_k_lines_counter) := l_credit_tenant_yn_tab2(i);
      l_secured_deal_yn_tab(l_okl_k_lines_counter) := l_secured_deal_yn_tab2(i);
      l_clg_id_tab(l_okl_k_lines_counter) := l_clg_id_tab2(i);
      l_date_funding_tab(l_okl_k_lines_counter) := l_date_funding_tab2(i);
      l_date_funding_required_tab(l_okl_k_lines_counter) := l_date_funding_required_tab2(i);
      l_date_accepted_tab(l_okl_k_lines_counter) := l_date_accepted_tab2(i);
      l_date_delivery_expected_tab(l_okl_k_lines_counter) := l_date_delivery_expected_tab2(i);
      l_oec_tab(l_okl_k_lines_counter) := l_oec_tab2(i);
      l_capital_amount_tab(l_okl_k_lines_counter) := l_capital_amount_tab2(i);
      l_residual_grnty_amount_tab(l_okl_k_lines_counter) := l_residual_grnty_amount_tab2(i);
      l_residual_code_tab(l_okl_k_lines_counter) := l_residual_code_tab2(i);
      l_rvi_premium_tab(l_okl_k_lines_counter) := l_rvi_premium_tab2(i);
      l_credit_nature_tab(l_okl_k_lines_counter) := l_credit_nature_tab2(i);
      l_capitalized_interest_tab(l_okl_k_lines_counter) := l_capitalized_interest_tab2(i);
      l_capital_reduction_perce_tab(l_okl_k_lines_counter) := l_capital_reduction_perce_tab2(i);
      l_date_pay_investor_start_tab(l_okl_k_lines_counter) := l_date_pay_investor_start_tab2(i);
      l_pay_investor_frequency_tab(l_okl_k_lines_counter) := l_pay_investor_frequency_tab2(i);
      l_pay_investor_event_tab(l_okl_k_lines_counter) := l_pay_investor_event_tab2(i);
      l_pay_investor_remit_days_tab(l_okl_k_lines_counter) := l_pay_investor_remit_days_tab2(i);
      l_fee_type_tab(l_okl_k_lines_counter) := l_fee_type_tab2(i);
      l_subsidy_id_tab(l_okl_k_lines_counter) := l_subsidy_id_tab2(i);
      -- Store subsidy id in global
      l_osid_mapping_tab(l_okl_k_lines_counter).subsidy_id := l_subsidy_id_tab2(i);
      l_subsidy_override_amount_tab(l_okl_k_lines_counter) := l_subsidy_override_amount_tab2(i);
      l_pre_tax_yield_tab(l_okl_k_lines_counter) := l_pre_tax_yield_tab2(i);
      l_after_tax_yield_tab(l_okl_k_lines_counter) := l_after_tax_yield_tab2(i);
      l_implicit_interest_rate_tab(l_okl_k_lines_counter) := l_implicit_interest_rate_tab2(i);
      l_implicit_non_idc_i_rate_tab(l_okl_k_lines_counter) := l_implicit_non_idc_i_rate_tab2(i);
      l_pre_tax_irr_tab(l_okl_k_lines_counter) := l_pre_tax_irr_tab2(i);
      l_after_tax_irr_tab(l_okl_k_lines_counter) := l_after_tax_irr_tab2(i);
      l_sub_pre_tax_yield_tab(l_okl_k_lines_counter) := l_sub_pre_tax_yield_tab2(i);
      l_sub_after_tax_yield_tab(l_okl_k_lines_counter) := l_sub_after_tax_yield_tab2(i);
      l_sub_impl_interest_rate_tab(l_okl_k_lines_counter) := l_sub_impl_interest_rate_tab2(i);
      l_sub_impl_non_idc_int_ra_tab(l_okl_k_lines_counter) := l_sub_impl_non_idc_int_ra_tab2(i);
      l_sub_pre_tax_irr_tab(l_okl_k_lines_counter) := l_sub_pre_tax_irr_tab2(i);
      l_sub_after_tax_irr_tab(l_okl_k_lines_counter) := l_sub_after_tax_irr_tab2(i);

      --sechawla 17-Jul-09 PRB ESG Enhancements : added new column ORIG_CONTRACT_LINE_ID in okl_k_lines
      IF p_trans_type = 'CRB' THEN -- assign ORIG_CONTRACT_LINE_ID only if it is a Rebook copy
         l_ORIG_CONTRACT_LINE_ID_tab(l_okl_k_lines_counter) := l_ORIG_CONTRACT_LINE_ID_tab2(i);
      ELSE
         l_ORIG_CONTRACT_LINE_ID_tab(l_okl_k_lines_counter) := NULL;
      END IF;

      IF ( (l_item_insurance_category_tab2(i) IS NULL) AND (l_lse_id_tab2(i)=33) ) THEN
        BEGIN
          l_curr_id := l_id_tab2(i);
          -- Get id for 34
          SELECT id INTO l_34_id
          FROM   okc_k_lines_b
          WHERE  cle_id = l_curr_id
          AND    lse_id = 34;
          -- Query from mtl_system_items
          SELECT a.asset_category_id
          INTO   l_asset_category_id
          FROM   mtl_system_items a,
                 okc_k_items b
          WHERE  a.inventory_item_id = TO_NUMBER(b.object1_id1)
          AND    a.organization_id = TO_NUMBER(b.object1_id2)
          AND    b.cle_id = l_34_id;
          --and    b.cle_id = l_curr_id;  previous wrong
          l_item_insurance_category_tab(l_okl_k_lines_counter) := l_asset_category_id;
          EXCEPTION WHEN OTHERS THEN
            l_item_insurance_category_tab(l_okl_k_lines_counter) := NULL;
        END;
      ELSE
        l_item_insurance_category_tab(l_okl_k_lines_counter) := l_item_insurance_category_tab2(i);
      END IF;
      --print('Before assigning qte_id');
      l_qte_id_tab(l_okl_k_lines_counter) := l_qte_id_tab2(i);
      l_funding_date_tab(l_okl_k_lines_counter) := l_funding_date_tab2(i);
      l_stream_type_subclass_tab(l_okl_k_lines_counter) := l_stream_type_subclass_tab2(i);
      l_item_description_tab(l_okl_k_lines_counter) := l_item_description_tab2(i);
      l_fee_purpose_code_tab(l_okl_k_lines_counter) := l_fee_purpose_code_tab2(i);
      l_date_funding_expected_tab(l_okl_k_lines_counter) := l_date_funding_expected_tab2(i);
      l_manufacturer_name_tab(l_okl_k_lines_counter) := l_manufacturer_name_tab2(i);
      l_model_number_tab(l_okl_k_lines_counter) := l_model_number_tab2(i);
      l_down_payment_recei_code_tab(l_okl_k_lines_counter) := l_down_payment_recei_code_tab2(i);
      l_capitalize_down_paym_yn_tab(l_okl_k_lines_counter) := l_capitalize_down_paym_yn_tab2(i);

      --print('Before assigning l_okl_k_lines_rec l_okl_k_lines_rec_counter='|| l_okl_k_lines_rec_counter || ' l_okl_k_lines_counter=' || l_okl_k_lines_counter);

      --print('l_id_tab(' || l_okl_k_lines_counter || ')=' || l_id_tab(l_okl_k_lines_counter));
      l_okl_k_lines_rec(l_okl_k_lines_rec_counter).id := l_id_tab(l_okl_k_lines_counter);
      --print('Before assigning l_okl_k_lines_rec 1');
      --print('l_oec_tab=' || l_oec_tab(l_okl_k_lines_counter));
      l_okl_k_lines_rec(l_okl_k_lines_rec_counter).oec := l_oec_tab(l_okl_k_lines_counter);
      --print('Before assigning l_okl_k_lines_rec 2');
      l_okl_k_lines_rec(l_okl_k_lines_rec_counter).year_built := l_year_built_tab(l_okl_k_lines_counter);
      --print('Before assigning l_okl_k_lines_rec 3');
      l_okl_k_lines_rec(l_okl_k_lines_rec_counter).item_description := l_item_description_tab(l_okl_k_lines_counter);
      l_okl_k_lines_rec_counter := l_okl_k_lines_rec_counter + 1;

      l_okl_k_lines_counter := l_okl_k_lines_counter + 1;

    END LOOP;
  END LOOP;
  CLOSE c8;
  sort_osid_mapping_tab;
  sort_okl_k_lines_rec;

  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_okl_k_lines_counter=' || l_okl_k_lines_counter || ' l_id_tab.count=' || l_id_tab.COUNT);
  END IF;
  IF (l_okl_k_lines_counter > 1) THEN
    forall i IN l_id_tab.first..l_id_tab.last
      INSERT INTO okl_k_lines (
       id, kle_id, sty_id,
       object_version_number, lao_amount, fee_charge,
       title_date, date_residual_last_review, date_last_reamortisation,
       termination_purchase_amount, date_last_cleanup, remarketed_amount,
       date_remarketed, remarket_margin, repurchased_amount,
       date_repurchased, gain_loss, floor_amount,
       previous_contract, tracked_residual, date_title_received,
       estimated_oec, residual_percentage, capital_reduction,
       vendor_advance_paid, tradein_amount, delivered_date,
       year_of_manufacture, initial_direct_cost, occupancy,
       date_last_inspection, date_next_inspection_due, weighted_average_life,
       bond_equivalent_yield, refinance_amount, year_built,
       coverage_ratio, gross_square_footage, net_rentable,
       date_letter_acceptance, date_commitment_expiration, date_appraisal,
       appraisal_value, residual_value, percent,
       coverage, lrv_amount, amount,
       lrs_percent, evergreen_percent, percent_stake,
       amount_stake, date_sold, sty_id_for,
       attribute_category, attribute1, attribute2,
       attribute3, attribute4, attribute5,
       attribute6, attribute7, attribute8,
       attribute9, attribute10, attribute11,
       attribute12, attribute13, attribute14,
       attribute15, created_by, creation_date,
       last_updated_by, last_update_date, last_update_login,
       nty_code, fcg_code, prc_code,
       re_lease_yn, prescribed_asset_yn, credit_tenant_yn,
       secured_deal_yn, clg_id, date_funding,
       date_funding_required, date_accepted, date_delivery_expected,
       oec, capital_amount, residual_grnty_amount,
       residual_code, rvi_premium, credit_nature,
       capitalized_interest, capital_reduction_percent,date_pay_investor_start,
       pay_investor_frequency, pay_investor_event,pay_investor_remittance_days,
       fee_type, subsidy_id, subsidy_override_amount,
       pre_tax_yield, after_tax_yield, implicit_interest_rate,
       implicit_non_idc_interest_rate, pre_tax_irr, after_tax_irr,
       sub_pre_tax_yield, sub_after_tax_yield, sub_impl_interest_rate,
       sub_impl_non_idc_int_rate, sub_pre_tax_irr, sub_after_tax_irr,
       item_insurance_category, qte_id, funding_date,
       stream_type_subclass, fee_purpose_code, date_funding_expected,
       manufacturer_name, model_number, down_payment_receiver_code,
       capitalize_down_payment_yn,
       --sechawla 17-Jul-09 PRB ESG Enhancements : added new column ORIG_CONTRACT_LINE_ID in okl_k_lines
       ORIG_CONTRACT_LINE_ID
      ) VALUES (
     l_id_tab(i), l_kle_id_tab(i), l_sty_id_tab(i),
     l_object_version_number_tab(i), l_lao_amount_tab(i), l_fee_charge_tab(i),
     l_title_date_tab(i), l_date_residual_last_revi_tab(i), l_date_last_reamortisatio_tab(i),
     l_termination_purchase_am_tab(i), l_date_last_cleanup_tab(i), l_remarketed_amount_tab(i),
     l_date_remarketed_tab(i), l_remarket_margin_tab(i), l_repurchased_amount_tab(i),
     l_date_repurchased_tab(i), l_gain_loss_tab(i), l_floor_amount_tab(i),
     l_previous_contract_tab(i), l_tracked_residual_tab(i), l_date_title_received_tab(i),
     l_estimated_oec_tab(i), l_residual_percentage_tab(i), l_capital_reduction_tab(i),
     l_vendor_advance_paid_tab(i), l_tradein_amount_tab(i), l_delivered_date_tab(i),
     l_year_of_manufacture_tab(i), l_initial_direct_cost_tab(i), l_occupancy_tab(i),
     l_date_last_inspection_tab(i), l_date_next_inspection_du_tab(i), l_weighted_average_life_tab(i),
     l_bond_equivalent_yield_tab(i), l_refinance_amount_tab(i), l_year_built_tab(i),
     l_coverage_ratio_tab(i), l_gross_square_footage_tab(i), l_net_rentable_tab(i),
     l_date_letter_acceptance_tab(i), l_date_commitment_expirat_tab(i), l_date_appraisal_tab(i),
     l_appraisal_value_tab(i), l_residual_value_tab(i), l_percent_tab(i),
     l_coverage_tab(i), l_lrv_amount_tab(i), l_amount_tab(i),
     l_lrs_percent_tab(i), l_evergreen_percent_tab(i), l_percent_stake_tab(i),
     l_amount_stake_tab(i), l_date_sold_tab(i), l_sty_id_for_tab(i),
     l_attribute_category_tab(i), l_attribute1_tab(i), l_attribute2_tab(i),
     l_attribute3_tab(i), l_attribute4_tab(i), l_attribute5_tab(i),
     l_attribute6_tab(i), l_attribute7_tab(i), l_attribute8_tab(i),
     l_attribute9_tab(i), l_attribute10_tab(i), l_attribute11_tab(i),
     l_attribute12_tab(i), l_attribute13_tab(i), l_attribute14_tab(i),
     l_attribute15_tab(i), l_created_by_tab(i), l_creation_date_tab(i),
     l_last_updated_by_tab(i), l_last_update_date_tab(i), l_last_update_login_tab(i),
     l_nty_code_tab(i), l_fcg_code_tab(i), l_prc_code_tab(i),
     l_re_lease_yn_tab(i), l_prescribed_asset_yn_tab(i), l_credit_tenant_yn_tab(i),
     l_secured_deal_yn_tab(i), l_clg_id_tab(i), l_date_funding_tab(i),
     l_date_funding_required_tab(i), l_date_accepted_tab(i), l_date_delivery_expected_tab(i),
     l_oec_tab(i), l_capital_amount_tab(i), l_residual_grnty_amount_tab(i),
     l_residual_code_tab(i), l_rvi_premium_tab(i), l_credit_nature_tab(i),
     l_capitalized_interest_tab(i), l_capital_reduction_perce_tab(i), l_date_pay_investor_start_tab(i),
     l_pay_investor_frequency_tab(i), l_pay_investor_event_tab(i), l_pay_investor_remit_days_tab(i),
     l_fee_type_tab(i), l_subsidy_id_tab(i), l_subsidy_override_amount_tab(i),
     l_pre_tax_yield_tab(i), l_after_tax_yield_tab(i), l_implicit_interest_rate_tab(i),
     l_implicit_non_idc_i_rate_tab(i), l_pre_tax_irr_tab(i), l_after_tax_irr_tab(i),
     l_sub_pre_tax_yield_tab(i), l_sub_after_tax_yield_tab(i), l_sub_impl_interest_rate_tab(i),
     l_sub_impl_non_idc_int_ra_tab(i), l_sub_pre_tax_irr_tab(i), l_sub_after_tax_irr_tab(i),
     l_item_insurance_category_tab(i), l_qte_id_tab(i), l_funding_date_tab(i),
     l_stream_type_subclass_tab(i), l_fee_purpose_code_tab(i), l_date_funding_expected_tab(i),
     l_manufacturer_name_tab(i), l_model_number_tab(i), l_down_payment_recei_code_tab(i),
     l_capitalize_down_paym_yn_tab(i),
     --sechawla 17-Jul-09 PRB ESG Enhancements : added new column ORIG_CONTRACT_LINE_ID in okl_k_lines
     l_ORIG_CONTRACT_LINE_ID_tab(i)
    );
  END IF;

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'insert_okl_k_lines');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing insert_okl_k_lines:l_id_tab.count=' || l_id_tab.COUNT || ' ...');
  END IF;
  IF (l_id_tab.COUNT > 0) THEN
  FOR i IN l_id_tab.first..l_id_tab.last
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_id_tab('||i||')=' || l_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_kle_id_tab('||i||')=' || l_kle_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_sty_id_tab('||i||')=' || l_sty_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_object_version_number_tab('||i||')=' || l_object_version_number_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_lao_amount_tab('||i||')=' || l_lao_amount_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_fee_charge_tab('||i||')=' || l_fee_charge_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_title_date_tab('||i||')=' || l_title_date_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_date_residual_last_revi_tab('||i||')=' || l_date_residual_last_revi_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_date_last_reamortisatio_tab('||i||')=' || l_date_last_reamortisatio_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_termination_purchase_am_tab('||i||')=' || l_termination_purchase_am_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_date_last_cleanup_tab('||i||')=' || l_date_last_cleanup_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_remarketed_amount_tab('||i||')=' || l_remarketed_amount_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_date_remarketed_tab('||i||')=' || l_date_remarketed_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_remarket_margin_tab('||i||')=' || l_remarket_margin_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_repurchased_amount_tab('||i||')=' || l_repurchased_amount_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_date_repurchased_tab('||i||')=' || l_date_repurchased_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_gain_loss_tab('||i||')=' || l_gain_loss_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_floor_amount_tab('||i||')=' || l_floor_amount_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_previous_contract_tab('||i||')=' || l_previous_contract_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tracked_residual_tab('||i||')=' || l_tracked_residual_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_date_title_received_tab('||i||')=' || l_date_title_received_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_estimated_oec_tab('||i||')=' || l_estimated_oec_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_residual_percentage_tab('||i||')=' || l_residual_percentage_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_capital_reduction_tab('||i||')=' || l_capital_reduction_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_vendor_advance_paid_tab('||i||')=' || l_vendor_advance_paid_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tradein_amount_tab('||i||')=' || l_tradein_amount_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_delivered_date_tab('||i||')=' || l_delivered_date_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_year_of_manufacture_tab('||i||')=' || l_year_of_manufacture_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_initial_direct_cost_tab('||i||')=' || l_initial_direct_cost_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_occupancy_tab('||i||')=' || l_occupancy_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_date_last_inspection_tab('||i||')=' || l_date_last_inspection_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_date_next_inspection_du_tab('||i||')=' || l_date_next_inspection_du_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_weighted_average_life_tab('||i||')=' || l_weighted_average_life_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_bond_equivalent_yield_tab('||i||')=' || l_bond_equivalent_yield_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_refinance_amount_tab('||i||')=' || l_refinance_amount_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_year_built_tab('||i||')=' || l_year_built_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_coverage_ratio_tab('||i||')=' || l_coverage_ratio_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_gross_square_footage_tab('||i||')=' || l_gross_square_footage_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_net_rentable_tab('||i||')=' || l_net_rentable_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_date_letter_acceptance_tab('||i||')=' || l_date_letter_acceptance_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_date_commitment_expirat_tab('||i||')=' || l_date_commitment_expirat_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_date_appraisal_tab('||i||')=' || l_date_appraisal_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_appraisal_value_tab('||i||')=' || l_appraisal_value_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_residual_value_tab('||i||')=' || l_residual_value_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_percent_tab('||i||')=' || l_percent_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_coverage_tab('||i||')=' || l_coverage_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_lrv_amount_tab('||i||')=' || l_lrv_amount_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_amount_tab('||i||')=' || l_amount_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_lrs_percent_tab('||i||')=' || l_lrs_percent_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_evergreen_percent_tab('||i||')=' || l_evergreen_percent_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_percent_stake_tab('||i||')=' || l_percent_stake_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_amount_stake_tab('||i||')=' || l_amount_stake_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_date_sold_tab('||i||')=' || l_date_sold_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_sty_id_for_tab('||i||')=' || l_sty_id_for_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute_category_tab('||i||')=' || l_attribute_category_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute1_tab('||i||')=' || l_attribute1_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute2_tab('||i||')=' || l_attribute2_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute3_tab('||i||')=' || l_attribute3_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute4_tab('||i||')=' || l_attribute4_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute5_tab('||i||')=' || l_attribute5_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute6_tab('||i||')=' || l_attribute6_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute7_tab('||i||')=' || l_attribute7_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute8_tab('||i||')=' || l_attribute8_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute9_tab('||i||')=' || l_attribute9_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute10_tab('||i||')=' || l_attribute10_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute11_tab('||i||')=' || l_attribute11_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute12_tab('||i||')=' || l_attribute12_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute13_tab('||i||')=' || l_attribute13_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute14_tab('||i||')=' || l_attribute14_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute15_tab('||i||')=' || l_attribute15_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_created_by_tab('||i||')=' || l_created_by_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_creation_date_tab('||i||')=' || l_creation_date_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_last_updated_by_tab('||i||')=' || l_last_updated_by_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_last_update_date_tab('||i||')=' || l_last_update_date_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_last_update_login_tab('||i||')=' || l_last_update_login_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_nty_code_tab('||i||')=' || l_nty_code_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_fcg_code_tab('||i||')=' || l_fcg_code_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_prc_code_tab('||i||')=' || l_prc_code_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_re_lease_yn_tab('||i||')=' || l_re_lease_yn_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_prescribed_asset_yn_tab('||i||')=' || l_prescribed_asset_yn_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_credit_tenant_yn_tab('||i||')=' || l_credit_tenant_yn_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_secured_deal_yn_tab('||i||')=' || l_secured_deal_yn_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_clg_id_tab('||i||')=' || l_clg_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_date_funding_tab('||i||')=' || l_date_funding_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_date_funding_required_tab('||i||')=' || l_date_funding_required_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_date_accepted_tab('||i||')=' || l_date_accepted_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_date_delivery_expected_tab('||i||')=' || l_date_delivery_expected_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_oec_tab('||i||')=' || l_oec_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_capital_amount_tab('||i||')=' || l_capital_amount_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_residual_grnty_amount_tab('||i||')=' || l_residual_grnty_amount_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_residual_code_tab('||i||')=' || l_residual_code_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rvi_premium_tab('||i||')=' || l_rvi_premium_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_credit_nature_tab('||i||')=' || l_credit_nature_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_capitalized_interest_tab('||i||')=' || l_capitalized_interest_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_capital_reduction_perce_tab('||i||')=' || l_capital_reduction_perce_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_date_pay_investor_start_tab('||i||')=' || l_date_pay_investor_start_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_pay_investor_frequency_tab('||i||')=' || l_pay_investor_frequency_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_pay_investor_event_tab('||i||')=' || l_pay_investor_event_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_pay_investor_remit_days_tab('||i||')=' || l_pay_investor_remit_days_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_fee_type_tab('||i||')=' || l_fee_type_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_subsidy_id_tab('||i||')=' || l_subsidy_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_subsidy_override_amount_tab('||i||')=' || l_subsidy_override_amount_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_pre_tax_yield_tab('||i||')=' || l_pre_tax_yield_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_after_tax_yield_tab('||i||')=' || l_after_tax_yield_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_implicit_interest_rate_tab('||i||')=' || l_implicit_interest_rate_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_implicit_non_idc_i_rate_tab('||i||')=' || l_implicit_non_idc_i_rate_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_pre_tax_irr_tab('||i||')=' || l_pre_tax_irr_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_after_tax_irr_tab('||i||')=' || l_after_tax_irr_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_sub_pre_tax_yield_tab('||i||')=' || l_sub_pre_tax_yield_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_sub_after_tax_yield_tab('||i||')=' || l_sub_after_tax_yield_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_sub_impl_interest_rate_tab('||i||')=' || l_sub_impl_interest_rate_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_sub_impl_non_idc_int_ra_tab('||i||')=' || l_sub_impl_non_idc_int_ra_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_sub_pre_tax_irr_tab('||i||')=' || l_sub_pre_tax_irr_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_sub_after_tax_irr_tab('||i||')=' || l_sub_after_tax_irr_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_item_insurance_category_tab('||i||')=' || l_item_insurance_category_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_qte_id_tab('||i||')=' || l_qte_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_funding_date_tab('||i||')=' || l_funding_date_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_stream_type_subclass_tab('||i||')=' || l_stream_type_subclass_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_fee_purpose_code_tab('||i||')=' || l_fee_purpose_code_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_date_funding_expected_tab('||i||')=' || l_date_funding_expected_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_manufacturer_name_tab('||i||')=' || l_manufacturer_name_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_model_number_tab('||i||')=' || l_model_number_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_down_payment_recei_code_tab('||i||')=' || l_down_payment_recei_code_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_capitalize_down_paym_yn_tab('||i||')=' || l_capitalize_down_paym_yn_tab(i));

      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ORIG_CONTRACT_LINE_ID_tab('||i||')=' || l_ORIG_CONTRACT_LINE_ID_tab(i));
    END IF;
  END LOOP;
  END IF;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;  /* insert_okl_k_lines */

PROCEDURE do_sort_party_mapping_id IS
  TYPE numtabtype IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
  --a numtabtype;
  l_stack numtabtype;
  l_stack_index NUMBER := 0;
  N NUMBER;
  R NUMBER;
  L NUMBER;
  P NUMBER;
  W NUMBER;
  W2 NUMBER;
  X NUMBER;
  I NUMBER;
  J NUMBER;
BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  NULL;
  /*a(1) := 10;
  a(2) := 50;
  a(3) := 27;
  a(4) := 5;
  a(5) := 100;
  a(6) := 50;
  a(7) := 35;
  a(8) := 41;
  a(9) := 75;
  a(10) := 20;

  N := 10;
  */

  N := l_party_counter - 1;
  IF (N < 2) THEN
    RETURN;
  END IF;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := 1;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := N;

  --dbms_output.put_line('l_stack_index=' || l_stack_index);
  WHILE l_stack_index > 0
  LOOP
    R := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    L := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    --dbms_output.put_line('Pop: l_stack_index=' || l_stack_index);
    WHILE 1=1
    LOOP -- loop until L >= R
      I := L;
      J := R;
      P := FLOOR((L+R)/2);
      --if (a(L) > a(P)) then
      IF (l_party_id_mapping_tab(L).old_id > l_party_id_mapping_tab(P).old_id)
      THEN
        /*W := a(L);
        a(L) := a(P);
        a(P) := W;*/

        W := l_party_id_mapping_tab(L).old_id;
        W2 := l_party_id_mapping_tab(L).new_id;
        l_party_id_mapping_tab(L).old_id :=l_party_id_mapping_tab(P).old_id;
        l_party_id_mapping_tab(L).new_id :=l_party_id_mapping_tab(P).new_id;
        l_party_id_mapping_tab(P).old_id := W;
        l_party_id_mapping_tab(P).new_id := W2;
      END IF;
      --if (a(L) > a(R)) then
      IF (l_party_id_mapping_tab(L).old_id > l_party_id_mapping_tab(R).old_id)
      THEN
        /*W := a(L);
        a(L) := a(R);
        a(R) := W;*/
        W := l_party_id_mapping_tab(L).old_id;
        W2 := l_party_id_mapping_tab(L).new_id;
        l_party_id_mapping_tab(L).old_id :=l_party_id_mapping_tab(R).old_id;
        l_party_id_mapping_tab(L).new_id :=l_party_id_mapping_tab(R).new_id;
        l_party_id_mapping_tab(R).old_id := W;
        l_party_id_mapping_tab(R).new_id := W2;
      END IF;
      --if (a(P) > a(R)) then
      IF (l_party_id_mapping_tab(P).old_id > l_party_id_mapping_tab(R).old_id)
      THEN
        /*W := a(P);
        a(P) := a(R);
        a(R) := W; */
        W := l_party_id_mapping_tab(P).old_id;
        W2 := l_party_id_mapping_tab(P).new_id;
        l_party_id_mapping_tab(P).old_id :=l_party_id_mapping_tab(R).old_id;
        l_party_id_mapping_tab(P).new_id :=l_party_id_mapping_tab(R).new_id;
        l_party_id_mapping_tab(R).old_id := W;
        l_party_id_mapping_tab(R).new_id := W2;
      END IF;
      --X := a(P);
      X := l_party_id_mapping_tab(P).old_id;
      WHILE 1=1
      LOOP    -- until I > J
        --while (a(I) < X) loop
        WHILE (l_party_id_mapping_tab(I).old_id < X) LOOP
          I := I + 1;
        END LOOP;
        WHILE (X < l_party_id_mapping_tab(J).old_id) LOOP
          J := J - 1;
        END LOOP;
        IF (I <= J) THEN
          /*W := a(I);
          a(I) := a(J);
          a(J) := W;*/
          W := l_party_id_mapping_tab(I).old_id;
          W2 := l_party_id_mapping_tab(I).new_id;
          l_party_id_mapping_tab(I).old_id :=l_party_id_mapping_tab(J).old_id;
          l_party_id_mapping_tab(I).new_id :=l_party_id_mapping_tab(J).new_id;
          l_party_id_mapping_tab(J).old_id := W;
          l_party_id_mapping_tab(J).new_id := W2;
          I := I + 1;
          J := J - 1;
        END IF;
        EXIT WHEN I > J;
      END LOOP;
      IF (J - L < R - I) THEN
        IF (I < R) THEN
          --push(I); push(R);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := I;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := R;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        R := J;
      ELSE
        IF (L < J) THEN
          --push(L); push(J);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := L;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := J;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        L := I;
      END IF;

      EXIT WHEN (L >= R);
    END LOOP;
  END LOOP;

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'do_sort_party_mapping_id');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing do_sort_party_mapping:l_party_id_mapping_tab N=' || N || ' ...');
  END IF;

  --print array
  FOR i IN 1..N
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_party_id_mapping_tab('||i||')=' || l_party_id_mapping_tab(i).old_id || ':' || l_party_id_mapping_tab(i).new_id);
    END IF;
  END LOOP;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;  /* do_sort_party_mapping_id */

FUNCTION find_party_mapping_id(p_id IN NUMBER) RETURN NUMBER IS
hi NUMBER;
lo NUMBER;
m NUMBER;
BEGIN
  lo := 1;
  hi := l_party_counter - 1;
  WHILE (lo <= hi) LOOP
    m := FLOOR((hi + lo)/2);
    IF (l_party_id_mapping_tab(m).old_id = p_id) THEN
      RETURN l_party_id_mapping_tab(m).new_id;
    ELSIF (l_party_id_mapping_tab(m).old_id > p_id) THEN
      hi := m - 1;
    ELSE
      lo := m + 1;
    END IF;
  END LOOP;
  RETURN -1;
END;  /* find_party_mapping_id */

PROCEDURE prepare_okl_party_roles (p_old_id IN okl_k_party_roles.id%TYPE,
                                   p_new_id IN okl_k_party_roles.id%TYPE,
                                   p_flush IN VARCHAR2) IS
CURSOR c30(p_id okl_k_party_roles.id%TYPE) IS
SELECT
       a.id, a.object_version_number, a.attribute_category,
       a.attribute1, a.attribute2, a.attribute3,
       a.attribute4, a.attribute5, a.attribute6,
       a.attribute7, a.attribute8, a.attribute9,
       a.attribute10, a.attribute11, a.attribute12,
       a.attribute13, a.attribute14, a.attribute15
FROM okl_k_party_roles a
WHERE id = p_id;

    l_plid_tab2 l_plid_type;
    l_plobject_version_number_tab2 l_plobject_version_number_type;
    l_plattribute_category_tab2 l_plattribute_category_type;
    l_plattribute1_tab2 l_plattribute1_type;
    l_plattribute2_tab2 l_plattribute2_type;
    l_plattribute3_tab2 l_plattribute3_type;
    l_plattribute4_tab2 l_plattribute4_type;
    l_plattribute5_tab2 l_plattribute5_type;
    l_plattribute6_tab2 l_plattribute6_type;
    l_plattribute7_tab2 l_plattribute7_type;
    l_plattribute8_tab2 l_plattribute8_type;
    l_plattribute9_tab2 l_plattribute9_type;
    l_plattribute10_tab2 l_plattribute10_type;
    l_plattribute11_tab2 l_plattribute11_type;
    l_plattribute12_tab2 l_plattribute12_type;
    l_plattribute13_tab2 l_plattribute13_type;
    l_plattribute14_tab2 l_plattribute14_type;
    l_plattribute15_tab2 l_plattribute15_type;

BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  --print('In prepare_okl_party_roles p_old_id=' || p_old_id);
  --print('In prepare_okl_party_roles p_new_id=' || p_new_id);
  OPEN c30(p_old_id);
  LOOP
    FETCH c30 bulk collect INTO
     l_plid_tab2, l_plobject_version_number_tab2, l_plattribute_category_tab2,
     l_plattribute1_tab2, l_plattribute2_tab2, l_plattribute3_tab2,
     l_plattribute4_tab2, l_plattribute5_tab2, l_plattribute6_tab2,
     l_plattribute7_tab2, l_plattribute8_tab2, l_plattribute9_tab2,
     l_plattribute10_tab2, l_plattribute11_tab2, l_plattribute12_tab2,
     l_plattribute13_tab2, l_plattribute14_tab2, l_plattribute15_tab2
    limit G_BULK_SIZE;
    EXIT WHEN l_plid_tab2.COUNT = 0;

    FOR i IN l_plid_tab2.first..l_plid_tab2.last
    LOOP
      l_plid_tab(l_okl_k_party_roles_counter) := l_plid_tab2(i);
      -- Replace id
      l_plid_tab(l_okl_k_party_roles_counter) := p_new_id;

      l_plobject_version_number_tab(l_okl_k_party_roles_counter) := l_plobject_version_number_tab2(i);
      l_plattribute_category_tab(l_okl_k_party_roles_counter) := l_plattribute_category_tab2(i);
      l_plattribute1_tab(l_okl_k_party_roles_counter) := l_plattribute1_tab2(i);
      l_plattribute2_tab(l_okl_k_party_roles_counter) := l_plattribute2_tab2(i);
      l_plattribute3_tab(l_okl_k_party_roles_counter) := l_plattribute3_tab2(i);
      l_plattribute4_tab(l_okl_k_party_roles_counter) := l_plattribute4_tab2(i);
      l_plattribute5_tab(l_okl_k_party_roles_counter) := l_plattribute5_tab2(i);
      l_plattribute6_tab(l_okl_k_party_roles_counter) := l_plattribute6_tab2(i);
      l_plattribute7_tab(l_okl_k_party_roles_counter) := l_plattribute7_tab2(i);
      l_plattribute8_tab(l_okl_k_party_roles_counter) := l_plattribute8_tab2(i);
      l_plattribute9_tab(l_okl_k_party_roles_counter) := l_plattribute9_tab2(i);
      l_plattribute10_tab(l_okl_k_party_roles_counter) := l_plattribute10_tab2(i);
      l_plattribute11_tab(l_okl_k_party_roles_counter) := l_plattribute11_tab2(i);
      l_plattribute12_tab(l_okl_k_party_roles_counter) := l_plattribute12_tab2(i);
      l_plattribute13_tab(l_okl_k_party_roles_counter) := l_plattribute13_tab2(i);
      l_plattribute14_tab(l_okl_k_party_roles_counter) := l_plattribute14_tab2(i);
      l_plattribute15_tab(l_okl_k_party_roles_counter) := l_plattribute15_tab2(i);

      l_okl_k_party_roles_counter := l_okl_k_party_roles_counter + 1;

    END LOOP;

  END LOOP;
  CLOSE c30;

  IF (p_flush = 'Y') THEN
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_okl_k_party_roles_counter='|| l_okl_k_party_roles_counter || ' l_plid_tab.count='|| l_plid_tab.COUNT);
    END IF;
    IF (l_plid_tab.COUNT > 0) THEN
    forall i IN l_plid_tab.first..l_plid_tab.last
      INSERT INTO okl_k_party_roles (
       id, object_version_number, attribute_category,
       attribute1, attribute2, attribute3,
       attribute4, attribute5, attribute6,
       attribute7, attribute8, attribute9,
       attribute10, attribute11, attribute12,
       attribute13, attribute14, attribute15,
       created_by, creation_date, last_updated_by,
       last_update_date, last_update_login
      ) VALUES (
       l_plid_tab(i), l_plobject_version_number_tab(i), l_plattribute_category_tab(i),
       l_plattribute1_tab(i), l_plattribute2_tab(i), l_plattribute3_tab(i),
       l_plattribute4_tab(i), l_plattribute5_tab(i), l_plattribute6_tab(i),
       l_plattribute7_tab(i), l_plattribute8_tab(i), l_plattribute9_tab(i),
       l_plattribute10_tab(i), l_plattribute11_tab(i), l_plattribute12_tab(i),
       l_plattribute13_tab(i), l_plattribute14_tab(i), l_plattribute15_tab(i),
       l_created_by, SYSDATE, l_last_updated_by,
       SYSDATE, l_last_update_login
      );
    END IF;
  END IF;

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing prepare_okl_party_roles:l_plid_tab.count=' || l_plid_tab.COUNT || ' ...');
  END IF;
  IF (l_plid_tab.COUNT > 0) THEN
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing l_plid_tab...');
  END IF;
  FOR i IN l_plid_tab.FIRST..l_plid_tab.LAST
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_plid_tab('||i||')=' || l_plid_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_plobject_version_number_tab('||i||')=' || l_plobject_version_number_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_plattribute_category_tab('||i||')=' || l_plattribute_category_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_plattribute1_tab('||i||')=' || l_plattribute1_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_plattribute2_tab('||i||')=' || l_plattribute2_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_plattribute3_tab('||i||')=' || l_plattribute3_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_plattribute4_tab('||i||')=' || l_plattribute4_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_plattribute5_tab('||i||')=' || l_plattribute5_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_plattribute6_tab('||i||')=' || l_plattribute6_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_plattribute7_tab('||i||')=' || l_plattribute7_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_plattribute8_tab('||i||')=' || l_plattribute8_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_plattribute9_tab('||i||')=' || l_plattribute9_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_plattribute10_tab('||i||')=' || l_plattribute10_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_plattribute11_tab('||i||')=' || l_plattribute11_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_plattribute12_tab('||i||')=' || l_plattribute12_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_plattribute13_tab('||i||')=' || l_plattribute13_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_plattribute14_tab('||i||')=' || l_plattribute14_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_plattribute15_tab('||i||')=' || l_plattribute15_tab(i));
    END IF;
  END LOOP;

  END IF;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;  /* prepare_okl_party_roles */

PROCEDURE prepare_party_roles_tl (p_old_id IN okc_k_party_roles_b.id%TYPE,
                                  p_new_id IN okc_k_party_roles_b.id%TYPE,
                                  p_flush IN VARCHAR2) IS
CURSOR c10(p_id okc_k_party_roles_tl.id%TYPE) IS
SELECT
     id, LANGUAGE, source_lang,
     sfwt_flag, created_by, creation_date,
     last_updated_by, last_update_date, cognomen,
     alias, last_update_login, security_group_id
FROM okc_k_party_roles_tl
WHERE id = p_id;

    l_pid_tab2 l_pid_type;
    l_planguage_tab2 l_planguage_type;
    l_psource_lang_tab2 l_psource_lang_type;
    l_psfwt_flag_tab2 l_psfwt_flag_type;
    l_pcreated_by_tab2 l_pcreated_by_type;
    l_pcreation_date_tab2 l_pcreation_date_type;
    l_plast_updated_by_tab2 l_plast_updated_by_type;
    l_plast_update_date_tab2 l_plast_update_date_type;
    l_pcognomen_tab2 l_pcognomen_type;
    l_palias_tab2 l_palias_type;
    l_plast_update_login_tab2 l_plast_update_login_type;
    l_psecurity_group_id_tab2 l_psecurity_group_id_type;

BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  --print('In prepare_party_roles_tl p_old_id=' || p_old_id);
  --print('In prepare_party_roles_tl p_new_id=' || p_new_id);
  OPEN c10(p_old_id);
  LOOP
    FETCH c10 bulk collect INTO
      l_pid_tab2, l_planguage_tab2, l_psource_lang_tab2,
      l_psfwt_flag_tab2, l_pcreated_by_tab2, l_pcreation_date_tab2,
      l_plast_updated_by_tab2, l_plast_update_date_tab2, l_pcognomen_tab2,
      l_palias_tab2, l_plast_update_login_tab2, l_psecurity_group_id_tab2
    limit G_BULK_SIZE;
    EXIT WHEN l_pid_tab2.COUNT = 0;

    FOR i IN l_pid_tab2.first..l_pid_tab2.last
    LOOP
      l_pid_tab(l_party_roles_tl_counter) := l_pid_tab2(i);

      -- Replace id
      l_pid_tab(l_party_roles_tl_counter) := p_new_id;

      l_planguage_tab(l_party_roles_tl_counter) := l_planguage_tab2(i);
      l_psource_lang_tab(l_party_roles_tl_counter) := l_psource_lang_tab2(i);
      l_psfwt_flag_tab(l_party_roles_tl_counter) := l_psfwt_flag_tab2(i);
      l_pcreated_by_tab(l_party_roles_tl_counter) := l_pcreated_by_tab2(i);
      l_pcreation_date_tab(l_party_roles_tl_counter) := l_pcreation_date_tab2(i);
      l_plast_updated_by_tab(l_party_roles_tl_counter) := l_plast_updated_by_tab2(i);
      l_plast_update_date_tab(l_party_roles_tl_counter) := l_plast_update_date_tab2(i);
      l_pcognomen_tab(l_party_roles_tl_counter) := l_pcognomen_tab2(i);
      l_palias_tab(l_party_roles_tl_counter) := l_palias_tab2(i);
      l_plast_update_login_tab(l_party_roles_tl_counter) := l_plast_update_login_tab2(i);
      l_psecurity_group_id_tab(l_party_roles_tl_counter) := l_psecurity_group_id_tab2(i);

      l_party_roles_tl_counter := l_party_roles_tl_counter + 1;
    END LOOP;

  END LOOP;
  CLOSE c10;

  IF (p_flush = 'L') THEN
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_party_roles_tl_counter='|| l_party_roles_tl_counter || ' l_pid_tab.count='|| l_pid_tab.COUNT);
    END IF;
    IF (l_pid_tab.COUNT > 0) THEN
    forall i IN l_pid_tab.first..l_pid_tab.last
      INSERT INTO okc_k_party_roles_tl (
        id, LANGUAGE, source_lang,
        sfwt_flag, created_by, creation_date,
        last_updated_by, last_update_date, cognomen,
        alias, last_update_login, security_group_id
      ) VALUES (
        l_pid_tab(i), l_planguage_tab(i), l_psource_lang_tab(i),
        'N', l_created_by, SYSDATE,
        l_last_updated_by, SYSDATE,l_pcognomen_tab(i),
        l_palias_tab(i),l_last_update_login, l_psecurity_group_id_tab(i)
      );
    END IF;
  END IF;

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'prepare_party_roles_tl');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing prepare_party_roles_tl:l_pid_tab.count=' || l_pid_tab.COUNT || ' ...');
  END IF;
  IF (l_pid_tab.COUNT > 0) THEN
  FOR i IN l_pid_tab.first..l_pid_tab.last
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_pid_tab('||i||')=' || l_pid_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_planguage_tab('||i||')=' || l_planguage_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_psource_lang_tab('||i||')=' || l_psource_lang_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_pcognomen_tab('||i||')=' || l_pcognomen_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_palias_tab('||i||')=' || l_palias_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_psecurity_group_id_tab('||i||')=' || l_psecurity_group_id_tab(i));
    END IF;
  END LOOP;
  END IF;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;  /* prepare_party_roles_tl */

PROCEDURE prepare_contacts (p_old_id IN okc_k_party_roles_b.id%TYPE,
                                  p_new_id IN okc_k_party_roles_b.id%TYPE,
                                  p_flush IN VARCHAR2) IS
CURSOR c11(p_id okc_k_party_roles_tl.id%TYPE) IS
SELECT
     id, cpl_id, cro_code,
     dnz_chr_id, object1_id1, object1_id2,
     jtot_object1_code, object_version_number, created_by,
     creation_date, last_updated_by, last_update_date,
     contact_sequence, last_update_login, attribute_category,
     attribute1, attribute2, attribute3,
     attribute4, attribute5, attribute6,
     attribute7, attribute8, attribute9,
     attribute10, attribute11, attribute12,
     attribute13, attribute14, attribute15,
     security_group_id, start_date, end_date,
     primary_yn, resource_class
FROM okc_contacts
WHERE cpl_id = p_id;

    l_cid_tab2 l_cid_type;
    l_ccpl_id_tab2 l_ccpl_id_type;
    l_ccro_code_tab2 l_ccro_code_type;
    l_cdnz_chr_id_tab2 l_cdnz_chr_id_type;
    l_cobject1_id1_tab2 l_cobject1_id1_type;
    l_cobject1_id2_tab2 l_cobject1_id2_type;
    l_cjtot_object1_code_tab2 l_cjtot_object1_code_type;
    l_cobject_version_number_tab2 l_cobject_version_number_type;
    l_ccreated_by_tab2 l_ccreated_by_type;
    l_ccreation_date_tab2 l_ccreation_date_type;
    l_clast_updated_by_tab2 l_clast_updated_by_type;
    l_clast_update_date_tab2 l_clast_update_date_type;
    l_ccontact_sequence_tab2 l_ccontact_sequence_type;
    l_clast_update_login_tab2 l_clast_update_login_type;
    l_cattribute_category_tab2 l_cattribute_category_type;
    l_cattribute1_tab2 l_cattribute1_type;
    l_cattribute2_tab2 l_cattribute2_type;
    l_cattribute3_tab2 l_cattribute3_type;
    l_cattribute4_tab2 l_cattribute4_type;
    l_cattribute5_tab2 l_cattribute5_type;
    l_cattribute6_tab2 l_cattribute6_type;
    l_cattribute7_tab2 l_cattribute7_type;
    l_cattribute8_tab2 l_cattribute8_type;
    l_cattribute9_tab2 l_cattribute9_type;
    l_cattribute10_tab2 l_cattribute10_type;
    l_cattribute11_tab2 l_cattribute11_type;
    l_cattribute12_tab2 l_cattribute12_type;
    l_cattribute13_tab2 l_cattribute13_type;
    l_cattribute14_tab2 l_cattribute14_type;
    l_cattribute15_tab2 l_cattribute15_type;
    l_csecurity_group_id_tab2 l_csecurity_group_id_type;
    l_cstart_date_tab2 l_cstart_date_type;
    l_cend_date_tab2 l_cend_date_type;
    l_cprimary_yn_tab2 l_cprimary_yn_type;
    l_cresource_class_tab2 l_cresource_class_type;

BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  --print('In prepare_contacts p_old_id=' || p_old_id);
  --print('In prepare_contacts p_new_id=' || p_new_id);
  OPEN c11(p_old_id);
  LOOP
    FETCH c11 bulk collect INTO
     l_cid_tab2, l_ccpl_id_tab2, l_ccro_code_tab2,
     l_cdnz_chr_id_tab2, l_cobject1_id1_tab2, l_cobject1_id2_tab2,
     l_cjtot_object1_code_tab2,l_cobject_version_number_tab2,l_ccreated_by_tab2,
     l_ccreation_date_tab2, l_clast_updated_by_tab2, l_clast_update_date_tab2,
     l_ccontact_sequence_tab2, l_clast_update_login_tab2, l_cattribute_category_tab2,
     l_cattribute1_tab2, l_cattribute2_tab2, l_cattribute3_tab2,
     l_cattribute4_tab2, l_cattribute5_tab2, l_cattribute6_tab2,
     l_cattribute7_tab2, l_cattribute8_tab2, l_cattribute9_tab2,
     l_cattribute10_tab2, l_cattribute11_tab2, l_cattribute12_tab2,
     l_cattribute13_tab2, l_cattribute14_tab2, l_cattribute15_tab2,
     l_csecurity_group_id_tab2, l_cstart_date_tab2, l_cend_date_tab2,
     l_cprimary_yn_tab2, l_cresource_class_tab2
    limit G_BULK_SIZE;
    EXIT WHEN l_cid_tab2.COUNT = 0;

    FOR i IN l_cid_tab2.first..l_cid_tab2.last
    LOOP
      l_cid_tab(l_contacts_counter) := l_cid_tab2(i);

      -- Replace id
      l_cid_tab(l_contacts_counter) := okc_p_util.raw_to_number(sys_guid());

      l_ccpl_id_tab(l_contacts_counter) := l_ccpl_id_tab2(i);
      -- Replace cpl_id
      l_ccpl_id_tab(l_contacts_counter) := p_new_id;

      l_ccro_code_tab(l_contacts_counter) := l_ccro_code_tab2(i);
      l_cdnz_chr_id_tab(l_contacts_counter) := l_cdnz_chr_id_tab2(i);
      -- Replace dnz_chr_id
      l_cdnz_chr_id_tab(l_contacts_counter) := l_copied_id;

      l_cobject1_id1_tab(l_contacts_counter) := l_cobject1_id1_tab2(i);
      l_cobject1_id2_tab(l_contacts_counter) := l_cobject1_id2_tab2(i);
      l_cjtot_object1_code_tab(l_contacts_counter) := l_cjtot_object1_code_tab2(i);
      l_cobject_version_number_tab(l_contacts_counter) := l_cobject_version_number_tab2(i);
      l_ccreated_by_tab(l_contacts_counter) := l_ccreated_by_tab2(i);
      l_ccreation_date_tab(l_contacts_counter) := l_ccreation_date_tab2(i);
      l_clast_updated_by_tab(l_contacts_counter) := l_clast_updated_by_tab2(i);
      l_clast_update_date_tab(l_contacts_counter) := l_clast_update_date_tab2(i);
      l_ccontact_sequence_tab(l_contacts_counter) := l_ccontact_sequence_tab2(i);
      l_clast_update_login_tab(l_contacts_counter) := l_clast_update_login_tab2(i);
      l_cattribute_category_tab(l_contacts_counter) := l_cattribute_category_tab2(i);
      l_cattribute1_tab(l_contacts_counter) := l_cattribute1_tab2(i);
      l_cattribute2_tab(l_contacts_counter) := l_cattribute2_tab2(i);
      l_cattribute3_tab(l_contacts_counter) := l_cattribute3_tab2(i);
      l_cattribute4_tab(l_contacts_counter) := l_cattribute4_tab2(i);
      l_cattribute5_tab(l_contacts_counter) := l_cattribute5_tab2(i);
      l_cattribute6_tab(l_contacts_counter) := l_cattribute6_tab2(i);
      l_cattribute7_tab(l_contacts_counter) := l_cattribute7_tab2(i);
      l_cattribute8_tab(l_contacts_counter) := l_cattribute8_tab2(i);
      l_cattribute9_tab(l_contacts_counter) := l_cattribute9_tab2(i);
      l_cattribute10_tab(l_contacts_counter) := l_cattribute10_tab2(i);
      l_cattribute11_tab(l_contacts_counter) := l_cattribute11_tab2(i);
      l_cattribute12_tab(l_contacts_counter) := l_cattribute12_tab2(i);
      l_cattribute13_tab(l_contacts_counter) := l_cattribute13_tab2(i);
      l_cattribute14_tab(l_contacts_counter) := l_cattribute14_tab2(i);
      l_cattribute15_tab(l_contacts_counter) := l_cattribute15_tab2(i);
      l_csecurity_group_id_tab(l_contacts_counter) := l_csecurity_group_id_tab2(i);
      l_cstart_date_tab(l_contacts_counter) := l_cstart_date_tab2(i);
      l_cend_date_tab(l_contacts_counter) := l_cend_date_tab2(i);
      l_cprimary_yn_tab(l_contacts_counter) := l_cprimary_yn_tab2(i);
      l_cresource_class_tab(l_contacts_counter) := l_cresource_class_tab2(i);

      l_contacts_counter := l_contacts_counter + 1;
    END LOOP;

  END LOOP;
  CLOSE c11;

  IF (p_flush = 'L') THEN
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_contacts_counter='|| l_contacts_counter || ' l_cid_tab.count='|| l_cid_tab.COUNT);
    END IF;
    IF (l_contacts_counter > 1) THEN
      forall i IN l_cid_tab.first..l_cid_tab.last
        INSERT INTO okc_contacts (
          id, cpl_id, cro_code,
          dnz_chr_id, object1_id1, object1_id2,
          jtot_object1_code, object_version_number, created_by,
          creation_date, last_updated_by, last_update_date,
          contact_sequence, last_update_login, attribute_category,
          attribute1, attribute2, attribute3,
          attribute4, attribute5, attribute6,
          attribute7, attribute8, attribute9,
          attribute10, attribute11, attribute12,
          attribute13, attribute14, attribute15,
          security_group_id, start_date, end_date,
          primary_yn, resource_class
        ) VALUES (
         l_cid_tab(i), l_ccpl_id_tab(i), l_ccro_code_tab(i),
         l_cdnz_chr_id_tab(i), l_cobject1_id1_tab(i), l_cobject1_id2_tab(i),
         l_cjtot_object1_code_tab(i), 1, l_created_by,
         SYSDATE, l_last_updated_by, SYSDATE,
         l_ccontact_sequence_tab(i), l_last_update_login, l_cattribute_category_tab(i),
         l_cattribute1_tab(i), l_cattribute2_tab(i), l_cattribute3_tab(i),
         l_cattribute4_tab(i), l_cattribute5_tab(i), l_cattribute6_tab(i),
         l_cattribute7_tab(i), l_cattribute8_tab(i), l_cattribute9_tab(i),
         l_cattribute10_tab(i), l_cattribute11_tab(i), l_cattribute12_tab(i),
         l_cattribute13_tab(i), l_cattribute14_tab(i), l_cattribute15_tab(i),
         l_csecurity_group_id_tab(i), l_cstart_date_tab(i), l_cend_date_tab(i),
         l_cprimary_yn_tab(i),l_cresource_class_tab(i)
        );
    END IF;
  END IF;

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'prepare_contacts');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing prepare_contacts:l_cid_tab.count=' || l_cid_tab.COUNT || ' ...');
  END IF;
  IF (l_cid_tab.COUNT > 0) THEN
  FOR i IN l_cid_tab.first..l_cid_tab.last
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_cid_tab('||i||')=' || l_cid_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ccpl_id_tab('||i||')=' || l_ccpl_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ccro_code_tab('||i||')=' || l_ccro_code_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_cdnz_chr_id_tab('||i||')=' || l_cdnz_chr_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_cobject1_id1_tab('||i||')=' || l_cobject1_id1_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_cobject1_id2_tab('||i||')=' || l_cobject1_id2_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_cjtot_object1_code_tab('||i||')=' || l_cjtot_object1_code_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ccontact_sequence_tab('||i||')=' || l_ccontact_sequence_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_cattribute_category_tab('||i||')=' || l_cattribute_category_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_cattribute1_tab('||i||')=' || l_cattribute1_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_cattribute2_tab('||i||')=' || l_cattribute2_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_cattribute3_tab('||i||')=' || l_cattribute3_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_cattribute4_tab('||i||')=' || l_cattribute4_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_cattribute5_tab('||i||')=' || l_cattribute5_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_cattribute6_tab('||i||')=' || l_cattribute6_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_cattribute7_tab('||i||')=' || l_cattribute7_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_cattribute8_tab('||i||')=' || l_cattribute8_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_cattribute9_tab('||i||')=' || l_cattribute9_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_cattribute10_tab('||i||')=' || l_cattribute10_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_cattribute11_tab('||i||')=' || l_cattribute11_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_cattribute12_tab('||i||')=' || l_cattribute12_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_cattribute13_tab('||i||')=' || l_cattribute13_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_cattribute14_tab('||i||')=' || l_cattribute14_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_cattribute15_tab('||i||')=' || l_cattribute15_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_csecurity_group_id_tab('||i||')=' || l_csecurity_group_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_cstart_date_tab('||i||')=' || l_cstart_date_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_cend_date_tab('||i||')=' || l_cend_date_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_cprimary_yn_tab('||i||')=' || l_cprimary_yn_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_cresource_class_tab('||i||')=' || l_cresource_class_tab(i));
    END IF;
  END LOOP;
  END IF;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;  /* prepare_contacts */

FUNCTION find_phid_mapping_id(p_id IN NUMBER) RETURN NUMBER IS
hi NUMBER;
lo NUMBER;
m NUMBER;
BEGIN
  lo := 1;
  hi := l_party_payment_hdr_counter - 1;
  WHILE (lo <= hi) LOOP
    m := FLOOR((hi + lo)/2);
    IF (l_phid_mapping_tab(m).old_id = p_id) THEN
      RETURN l_phid_mapping_tab(m).new_id;
    ELSIF (l_phid_mapping_tab(m).old_id > p_id) THEN
      hi := m - 1;
    ELSE
      lo := m + 1;
    END IF;
  END LOOP;
  RETURN -1;
END;  /* find_phid_mapping_id */

PROCEDURE sort_phid_mapping_tab IS
  TYPE numtabtype IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
  --a numtabtype;
  l_stack numtabtype;
  l_stack_index NUMBER := 0;
  N NUMBER;
  R NUMBER;
  L NUMBER;
  P NUMBER;
  W NUMBER;
  W2 NUMBER;
  X NUMBER;
  I NUMBER;
  J NUMBER;
BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  NULL;

  N := l_party_payment_hdr_counter - 1;
  IF (N < 2) THEN
    RETURN;
  END IF;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := 1;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := N;

  --dbms_output.put_line('l_stack_index=' || l_stack_index);
  WHILE l_stack_index > 0
  LOOP
    R := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    L := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    --dbms_output.put_line('Pop: l_stack_index=' || l_stack_index);
    WHILE 1=1
    LOOP -- loop until L >= R
      I := L;
      J := R;
      P := FLOOR((L+R)/2);
      --if (a(L) > a(P)) then
      IF (l_phid_mapping_tab(L).old_id > l_phid_mapping_tab(P).old_id)
      THEN
        W := l_phid_mapping_tab(L).old_id;
        W2 := l_phid_mapping_tab(L).new_id;
        l_phid_mapping_tab(L).old_id :=l_phid_mapping_tab(P).old_id;
        l_phid_mapping_tab(L).new_id :=l_phid_mapping_tab(P).new_id;
        l_phid_mapping_tab(P).old_id := W;
        l_phid_mapping_tab(P).new_id := W2;
      END IF;
      --if (a(L) > a(R)) then
      IF (l_phid_mapping_tab(L).old_id > l_phid_mapping_tab(R).old_id)
      THEN
        W := l_phid_mapping_tab(L).old_id;
        W2 := l_phid_mapping_tab(L).new_id;
        l_phid_mapping_tab(L).old_id :=l_phid_mapping_tab(R).old_id;
        l_phid_mapping_tab(L).new_id :=l_phid_mapping_tab(R).new_id;
        l_phid_mapping_tab(R).old_id := W;
        l_phid_mapping_tab(R).new_id := W2;
      END IF;
      --if (a(P) > a(R)) then
      IF (l_phid_mapping_tab(P).old_id > l_phid_mapping_tab(R).old_id)
      THEN
        W := l_phid_mapping_tab(P).old_id;
        W2 := l_phid_mapping_tab(P).new_id;
        l_phid_mapping_tab(P).old_id :=l_phid_mapping_tab(R).old_id;
        l_phid_mapping_tab(P).new_id :=l_phid_mapping_tab(R).new_id;
        l_phid_mapping_tab(R).old_id := W;
        l_phid_mapping_tab(R).new_id := W2;
      END IF;
      --X := a(P);
      X := l_phid_mapping_tab(P).old_id;
      WHILE 1=1
      LOOP    -- until I > J
        --while (a(I) < X) loop
        WHILE (l_phid_mapping_tab(I).old_id < X) LOOP
          I := I + 1;
        END LOOP;
        WHILE (X < l_phid_mapping_tab(J).old_id) LOOP
          J := J - 1;
        END LOOP;
        IF (I <= J) THEN
          W := l_phid_mapping_tab(I).old_id;
          W2 := l_phid_mapping_tab(I).new_id;
          l_phid_mapping_tab(I).old_id :=l_phid_mapping_tab(J).old_id;
          l_phid_mapping_tab(I).new_id :=l_phid_mapping_tab(J).new_id;
          l_phid_mapping_tab(J).old_id := W;
          l_phid_mapping_tab(J).new_id := W2;
          I := I + 1;
          J := J - 1;
        END IF;
        EXIT WHEN I > J;
      END LOOP;
      IF (J - L < R - I) THEN
        IF (I < R) THEN
          --push(I); push(R);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := I;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := R;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        R := J;
      ELSE
        IF (L < J) THEN
          --push(L); push(J);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := L;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := J;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        L := I;
      END IF;

      EXIT WHEN (L >= R);
    END LOOP;
  END LOOP;

EXCEPTION WHEN OTHERS THEN

  --x_return_status := OKL_API.G_RET_STS_ERROR;
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing sort_phid_mapping_tab:l_phid_mapping_tab N=' || N || ' ...');
  END IF;
  --print array
  FOR i IN 1..N
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_phid_mapping_tab('||i||')=' || l_phid_mapping_tab(i).old_id || ':' || l_phid_mapping_tab(i).new_id);
    END IF;
  END LOOP;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;  /* sort_phid_mapping_tab */


Procedure copy_party_payment_hdr(p_old_id IN NUMBER,
                                 p_new_id IN NUMBER) IS
    TYPE l_phid_type is table of okl_party_payment_hdr.id%TYPE index by binary_integer;
    TYPE l_phdnz_chr_id_type is table of okl_party_payment_hdr.dnz_chr_id%TYPE index by binary_integer;
    TYPE l_phcle_id_type is table of okl_party_payment_hdr.cle_id%TYPE index by binary_integer;
    TYPE l_phppl_id_type is table of okl_party_payment_hdr.ppl_id%TYPE index by binary_integer;
    TYPE l_phpassthru_start_date_type is table of okl_party_payment_hdr.passthru_start_date%TYPE index by binary_integer;
    TYPE l_phpayout_basis_type is table of okl_party_payment_hdr.payout_basis%TYPE index by binary_integer;
    TYPE l_pheffective_from_type is table of okl_party_payment_hdr.effective_from%TYPE index by binary_integer;
    TYPE l_pheffective_to_type is table of okl_party_payment_hdr.effective_to%TYPE index by binary_integer;
    TYPE l_phobject_version_number_type is table of okl_party_payment_hdr.object_version_number%TYPE index by binary_integer;
    TYPE l_phpassthru_term_type is table of okl_party_payment_hdr.passthru_term%TYPE index by binary_integer;
    TYPE l_phpayout_basis_formula_type is table of okl_party_payment_hdr.payout_basis_formula%TYPE index by binary_integer;
    TYPE l_phpassthru_stre_type_id_type is table of okl_party_payment_hdr.passthru_stream_type_id%TYPE index by binary_integer;

    l_phid_tab l_phid_type;
    l_phdnz_chr_id_tab l_phdnz_chr_id_type;
    l_phcle_id_tab l_phcle_id_type;
    l_phppl_id_tab l_phppl_id_type;
    l_phpassthru_start_date_tab l_phpassthru_start_date_type;
    l_phpayout_basis_tab l_phpayout_basis_type;
    l_pheffective_from_tab l_pheffective_from_type;
    l_pheffective_to_tab l_pheffective_to_type;
    l_phobject_version_number_tab l_phobject_version_number_type;
    l_phpassthru_term_tab l_phpassthru_term_type;
    l_phpayout_basis_formula_tab l_phpayout_basis_formula_type;
    l_phpassthru_stre_type_id_tab l_phpassthru_stre_type_id_type;

    l_phid_tab2 l_phid_type;
    l_phdnz_chr_id_tab2 l_phdnz_chr_id_type;
    l_phcle_id_tab2 l_phcle_id_type;
    l_phppl_id_tab2 l_phppl_id_type;
    l_phpassthru_start_date_tab2 l_phpassthru_start_date_type;
    l_phpayout_basis_tab2 l_phpayout_basis_type;
    l_pheffective_from_tab2 l_pheffective_from_type;
    l_pheffective_to_tab2 l_pheffective_to_type;
    l_phobject_version_number_tab2 l_phobject_version_number_type;
    l_phpassthru_term_tab2 l_phpassthru_term_type;
    l_phpayout_basis_formula_tab2 l_phpayout_basis_formula_type;
    l_phpassthru_stre_type_id_tab2 l_phpassthru_stre_type_id_type;

CURSOR C31(p_id NUMBER) IS
SELECT
       a.id, a.dnz_chr_id, a.cle_id,
       a.ppl_id, a.passthru_start_date, a.payout_basis,
       a.effective_from, a.effective_to, a.object_version_number,
       a.passthru_term, a.payout_basis_formula, a.passthru_stream_type_id
FROM   okl_party_payment_hdr a
WHERE  a.dnz_chr_id = p_id;
l_new_cle_id NUMBER;

BEGIN
  NULL;
  OPEN C31(p_old_id);
  LOOP
    FETCH C31 BULK COLLECT INTO
     l_phid_tab2, l_phdnz_chr_id_tab2, l_phcle_id_tab2,
     l_phppl_id_tab2, l_phpassthru_start_date_tab2, l_phpayout_basis_tab2,
     l_pheffective_from_tab2, l_pheffective_to_tab2, l_phobject_version_number_tab2,
     l_phpassthru_term_tab2, l_phpayout_basis_formula_tab2, l_phpassthru_stre_type_id_tab2
    LIMIT G_BULK_SIZE;
    EXIT WHEN l_phid_tab2.COUNT = 0;

    FOR i IN l_phid_tab2.FIRST..l_phid_tab2.LAST
    LOOP
      l_phid_tab(l_party_payment_hdr_counter) := l_phid_tab2(i);
      -- Replace id
      l_phid_tab(l_party_payment_hdr_counter) := okc_p_util.raw_to_number(sys_guid());

      l_phid_mapping_tab(l_party_payment_hdr_counter).old_id :=
            l_phid_tab2(i);
      l_phid_mapping_tab(l_party_payment_hdr_counter).new_id :=
                                 l_phid_tab(l_party_payment_hdr_counter) ;

      l_phdnz_chr_id_tab(l_party_payment_hdr_counter) := l_phdnz_chr_id_tab2(i);
      l_phdnz_chr_id_tab(l_party_payment_hdr_counter) := p_new_id;

      l_phcle_id_tab(l_party_payment_hdr_counter) := l_phcle_id_tab2(i);
      l_new_cle_id := find_id(l_phcle_id_tab2(i));

      -- l_phcle_id_tab2 could be null for header evergreen passthru, dedey 11/09
      IF (l_phcle_id_tab2(i) IS NOT NULL) THEN
         IF (l_new_cle_id = -1) THEN
           IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                        OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ERROR: CLE_ID to NEW_CLE_ID mapping not found');
           END IF;
           RAISE OKL_API.G_EXCEPTION_ERROR;
         END IF;
         l_phcle_id_tab(l_party_payment_hdr_counter) := l_new_cle_id;
      END IF;

      l_phppl_id_tab(l_party_payment_hdr_counter) := l_phppl_id_tab2(i);
      l_phpassthru_start_date_tab(l_party_payment_hdr_counter) := l_phpassthru_start_date_tab2(i);
      l_phpayout_basis_tab(l_party_payment_hdr_counter) := l_phpayout_basis_tab2(i);
      l_pheffective_from_tab(l_party_payment_hdr_counter) := l_pheffective_from_tab2(i);
      l_pheffective_to_tab(l_party_payment_hdr_counter) := l_pheffective_to_tab2(i);
      l_phobject_version_number_tab(l_party_payment_hdr_counter) := l_phobject_version_number_tab2(i);
      l_phpassthru_term_tab(l_party_payment_hdr_counter) := l_phpassthru_term_tab2(i);
      l_phpayout_basis_formula_tab(l_party_payment_hdr_counter) := l_phpayout_basis_formula_tab2(i);
      l_phpassthru_stre_type_id_tab(l_party_payment_hdr_counter) := l_phpassthru_stre_type_id_tab2(i);

      l_party_payment_hdr_counter := l_party_payment_hdr_counter + 1;
    END LOOP;
  END LOOP;
  CLOSE C31;
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_party_payment_hdr_counter=' || l_party_payment_hdr_counter);
  END IF;
  IF (l_party_payment_hdr_counter > 1) THEN
    sort_phid_mapping_tab;
    FORALL i IN l_phid_tab.FIRST..l_phid_tab.LAST
    INSERT INTO okl_party_payment_hdr (
       id, dnz_chr_id, cle_id,
       ppl_id, passthru_start_date, payout_basis,
       effective_from, effective_to, created_by,
       creation_date, last_updated_by, last_update_date,
       last_update_login, object_version_number, passthru_term,
       payout_basis_formula, passthru_stream_type_id
    ) VALUES (
       l_phid_tab(i), l_phdnz_chr_id_tab(i), l_phcle_id_tab(i),
       l_phppl_id_tab(i), l_phpassthru_start_date_tab(i), l_phpayout_basis_tab(i),
       l_pheffective_from_tab(i), l_pheffective_to_tab(i), l_created_by,
       SYSDATE, l_last_updated_by, SYSDATE,
       l_last_update_login, l_phobject_version_number_tab(i), l_phpassthru_term_tab(i),
       l_phpayout_basis_formula_tab(i), l_phpassthru_stre_type_id_tab(i)
    );
  END IF;

EXCEPTION WHEN OTHERS THEN
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing l_phid_tab...l_phid_tab.COUNT=' || l_phid_tab.COUNT);
  END IF;
  IF (l_phid_tab.COUNT > 0) THEN
  for i in l_phID_tab.first..l_phID_tab.last
  loop
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ID('||i||')=' || l_phID_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'DNZ_CHR_ID('||i||')=' || l_phDNZ_CHR_ID_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'CLE_ID('||i||')=' || l_phCLE_ID_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'PPL_ID('||i||')=' || l_phPPL_ID_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'PASSTHRU_START_DATE('||i||')=' || l_phPASSTHRU_START_DATE_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'PAYOUT_BASIS('||i||')=' || l_phPAYOUT_BASIS_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'EFFECTIVE_FROM('||i||')=' || l_phEFFECTIVE_FROM_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'EFFECTIVE_TO('||i||')=' || l_phEFFECTIVE_TO_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'OBJECT_VERSION_NUMBER('||i||')=' || l_phOBJECT_VERSION_NUMBER_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'PASSTHRU_TERM('||i||')=' || l_phPASSTHRU_TERM_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'PAYOUT_BASIS_FORMULA('||i||')=' || l_phPAYOUT_BASIS_FORMULA_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'PASSTHRU_STREAM_TYPE_ID('||i||')=' || l_phPASSTHRU_STRE_TYPE_ID_tab(i));
    END IF;
  end loop;
  END IF;
  RAISE OKC_API.G_EXCEPTION_ERROR;

END;

PROCEDURE prepare_party_payment_dtls (p_old_id IN okc_k_party_roles_b.id%TYPE,
                                      p_new_id IN okc_k_party_roles_b.id%TYPE,
                                      p_flush IN VARCHAR2) IS
CURSOR c23(p_id NUMBER) IS
SELECT
     id, object_version_number, cpl_id,
     vendor_id, pay_site_id, payment_term_id,
     payment_method_code, pay_group_code, attribute_category,
     attribute1, attribute2, attribute3,
     attribute4, attribute5, attribute6,
     attribute7, attribute8, attribute9,
     attribute10, attribute11, attribute12,
     attribute13, attribute14, attribute15,
     created_by, creation_date, last_updated_by,
     last_update_date, last_update_login, payment_hdr_id,
     payment_start_date, payment_frequency, remit_days,
     disbursement_basis, disbursement_fixed_amount, disbursement_percent,
     processing_fee_basis, processing_fee_fixed_amount, processing_fee_percent,
     payment_basis,
      ORIG_CONTRACT_LINE_ID --sechawla 8677460  : PRB ESG Enhancements : copy this new column on rebook copy K
FROM okl_party_payment_dtls
WHERE cpl_id = p_id;

    l_ppid_tab2 l_ppid_type;
    l_ppobject_version_number_tab2 l_ppobject_version_number_type;
    l_ppcpl_id_tab2 l_ppcpl_id_type;
    l_ppvendor_id_tab2 l_ppvendor_id_type;
    l_pppay_site_id_tab2 l_pppay_site_id_type;
    l_pppayment_term_id_tab2 l_pppayment_term_id_type;
    l_pppayment_method_code_tab2 l_pppayment_method_code_type;
    l_pppay_group_code_tab2 l_pppay_group_code_type;
    l_ppattribute_category_tab2 l_ppattribute_category_type;
    l_ppattribute1_tab2 l_ppattribute1_type;
    l_ppattribute2_tab2 l_ppattribute2_type;
    l_ppattribute3_tab2 l_ppattribute3_type;
    l_ppattribute4_tab2 l_ppattribute4_type;
    l_ppattribute5_tab2 l_ppattribute5_type;
    l_ppattribute6_tab2 l_ppattribute6_type;
    l_ppattribute7_tab2 l_ppattribute7_type;
    l_ppattribute8_tab2 l_ppattribute8_type;
    l_ppattribute9_tab2 l_ppattribute9_type;
    l_ppattribute10_tab2 l_ppattribute10_type;
    l_ppattribute11_tab2 l_ppattribute11_type;
    l_ppattribute12_tab2 l_ppattribute12_type;
    l_ppattribute13_tab2 l_ppattribute13_type;
    l_ppattribute14_tab2 l_ppattribute14_type;
    l_ppattribute15_tab2 l_ppattribute15_type;
    l_ppcreated_by_tab2 l_ppcreated_by_type;
    l_ppcreation_date_tab2 l_ppcreation_date_type;
    l_pplast_updated_by_tab2 l_pplast_updated_by_type;
    l_pplast_update_date_tab2 l_pplast_update_date_type;
    l_pplast_update_login_tab2 l_pplast_update_login_type;
    l_pppayment_hdr_id_tab2 l_pppayment_hdr_id_type;
    l_pppayment_start_date_tab2 l_pppayment_start_date_type;
    l_pppayment_frequency_tab2 l_pppayment_frequency_type;
    l_ppremit_days_tab2 l_ppremit_days_type;
    l_ppdisbursement_basis_tab2 l_ppdisbursement_basis_type;
    l_ppdisbursement_fixed_am_tab2 l_ppdisbursement_fixed_am_type;
    l_ppdisbursement_percent_tab2 l_ppdisbursement_percent_type;
    l_ppprocessing_fee_basis_tab2 l_ppprocessing_fee_basis_type;
    l_ppprocessing_fee_fixedt_tab2 l_ppprocessing_fee_fixedt_type;
    l_ppprocessing_fee_percen_tab2 l_ppprocessing_fee_percen_type;
    l_pppayment_basis_tab2 l_pppayment_basis_type;

    l_ppORIG_CONTRACT_LINE_ID_tab2  l_ppORIG_CONTRACT_LINE_ID_type; --sechawla 8677460  : PRB ESG Enhancements :
    l_new_payment_hdr_id NUMBER;

BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  OPEN c23(p_old_id);
  LOOP
    FETCH c23 bulk collect INTO
     l_ppid_tab2, l_ppobject_version_number_tab2, l_ppcpl_id_tab2,
     l_ppvendor_id_tab2, l_pppay_site_id_tab2, l_pppayment_term_id_tab2,
     l_pppayment_method_code_tab2, l_pppay_group_code_tab2, l_ppattribute_category_tab2,
     l_ppattribute1_tab2, l_ppattribute2_tab2, l_ppattribute3_tab2,
     l_ppattribute4_tab2, l_ppattribute5_tab2, l_ppattribute6_tab2,
     l_ppattribute7_tab2, l_ppattribute8_tab2, l_ppattribute9_tab2,
     l_ppattribute10_tab2, l_ppattribute11_tab2, l_ppattribute12_tab2,
     l_ppattribute13_tab2, l_ppattribute14_tab2, l_ppattribute15_tab2,
     l_ppcreated_by_tab2, l_ppcreation_date_tab2, l_pplast_updated_by_tab2,
     l_pplast_update_date_tab2, l_pplast_update_login_tab2, l_pppayment_hdr_id_tab2,
     l_pppayment_start_date_tab2, l_pppayment_frequency_tab2, l_ppremit_days_tab2,
     l_ppdisbursement_basis_tab2, l_ppdisbursement_fixed_am_tab2, l_ppdisbursement_percent_tab2,
     l_ppprocessing_fee_basis_tab2, l_ppprocessing_fee_fixedt_tab2, l_ppprocessing_fee_percen_tab2,
     l_pppayment_basis_tab2,
     l_ppORIG_CONTRACT_LINE_ID_tab2  --sechawla 8677460  : PRB ESG Enhancements
    limit G_BULK_SIZE;
    EXIT WHEN l_ppid_tab2.COUNT = 0;
    FOR i IN l_ppid_tab2.first..l_ppid_tab2.last
    LOOP

      l_ppid_tab(l_party_payment_dtls_counter) := l_ppid_tab2(i);
      -- Change id
      l_ppid_tab(l_party_payment_dtls_counter) := okc_p_util.raw_to_number(sys_guid());

      l_ppobject_version_number_tab(l_party_payment_dtls_counter) := l_ppobject_version_number_tab2(i);
      l_ppcpl_id_tab(l_party_payment_dtls_counter) := l_ppcpl_id_tab2(i);
      -- Change cpl_id
      l_ppcpl_id_tab(l_party_payment_dtls_counter) := p_new_id;

      l_ppvendor_id_tab(l_party_payment_dtls_counter) := l_ppvendor_id_tab2(i);
      l_pppay_site_id_tab(l_party_payment_dtls_counter) := l_pppay_site_id_tab2(i);
      l_pppayment_term_id_tab(l_party_payment_dtls_counter) := l_pppayment_term_id_tab2(i);
      l_pppayment_method_code_tab(l_party_payment_dtls_counter) := l_pppayment_method_code_tab2(i);
      l_pppay_group_code_tab(l_party_payment_dtls_counter) := l_pppay_group_code_tab2(i);
      l_ppattribute_category_tab(l_party_payment_dtls_counter) := l_ppattribute_category_tab2(i);
      l_ppattribute1_tab(l_party_payment_dtls_counter) := l_ppattribute1_tab2(i);
      l_ppattribute2_tab(l_party_payment_dtls_counter) := l_ppattribute2_tab2(i);
      l_ppattribute3_tab(l_party_payment_dtls_counter) := l_ppattribute3_tab2(i);
      l_ppattribute4_tab(l_party_payment_dtls_counter) := l_ppattribute4_tab2(i);
      l_ppattribute5_tab(l_party_payment_dtls_counter) := l_ppattribute5_tab2(i);
      l_ppattribute6_tab(l_party_payment_dtls_counter) := l_ppattribute6_tab2(i);
      l_ppattribute7_tab(l_party_payment_dtls_counter) := l_ppattribute7_tab2(i);
      l_ppattribute8_tab(l_party_payment_dtls_counter) := l_ppattribute8_tab2(i);
      l_ppattribute9_tab(l_party_payment_dtls_counter) := l_ppattribute9_tab2(i);
      l_ppattribute10_tab(l_party_payment_dtls_counter) := l_ppattribute10_tab2(i);
      l_ppattribute11_tab(l_party_payment_dtls_counter) := l_ppattribute11_tab2(i);
      l_ppattribute12_tab(l_party_payment_dtls_counter) := l_ppattribute12_tab2(i);
      l_ppattribute13_tab(l_party_payment_dtls_counter) := l_ppattribute13_tab2(i);
      l_ppattribute14_tab(l_party_payment_dtls_counter) := l_ppattribute14_tab2(i);
      l_ppattribute15_tab(l_party_payment_dtls_counter) := l_ppattribute15_tab2(i);
      l_ppcreated_by_tab(l_party_payment_dtls_counter) := l_ppcreated_by_tab2(i);
      l_ppcreation_date_tab(l_party_payment_dtls_counter) := l_ppcreation_date_tab2(i);
      l_pplast_updated_by_tab(l_party_payment_dtls_counter) := l_pplast_updated_by_tab2(i);
      l_pplast_update_date_tab(l_party_payment_dtls_counter) := l_pplast_update_date_tab2(i);
      l_pplast_update_login_tab(l_party_payment_dtls_counter) := l_pplast_update_login_tab2(i);
      l_pppayment_hdr_id_tab(l_party_payment_dtls_counter) := l_pppayment_hdr_id_tab2(i);
      IF (l_pppayment_hdr_id_tab(l_party_payment_dtls_counter) IS NOT NULL) THEN
        l_new_payment_hdr_id := find_phid_mapping_id(
                          l_pppayment_hdr_id_tab(l_party_payment_dtls_counter));
        l_pppayment_hdr_id_tab(l_party_payment_dtls_counter) := l_new_payment_hdr_id;
      END IF;
      l_pppayment_start_date_tab(l_party_payment_dtls_counter) := l_pppayment_start_date_tab2(i);
      l_pppayment_frequency_tab(l_party_payment_dtls_counter) := l_pppayment_frequency_tab2(i);
      l_ppremit_days_tab(l_party_payment_dtls_counter) := l_ppremit_days_tab2(i);
      l_ppdisbursement_basis_tab(l_party_payment_dtls_counter) := l_ppdisbursement_basis_tab2(i);
      l_ppdisbursement_fixed_am_tab(l_party_payment_dtls_counter) := l_ppdisbursement_fixed_am_tab2(i);
      l_ppdisbursement_percent_tab(l_party_payment_dtls_counter) := l_ppdisbursement_percent_tab2(i);
      l_ppprocessing_fee_basis_tab(l_party_payment_dtls_counter) := l_ppprocessing_fee_basis_tab2(i);
      l_ppprocessing_fee_fixedt_tab(l_party_payment_dtls_counter) := l_ppprocessing_fee_fixedt_tab2(i);
      l_ppprocessing_fee_percen_tab(l_party_payment_dtls_counter) := l_ppprocessing_fee_percen_tab2(i);
      l_pppayment_basis_tab(l_party_payment_dtls_counter) := l_pppayment_basis_tab2(i);

      --sechawla 8677460  : PRB ESG Enhancements
      IF p_trans_type = 'CRB' THEN -- insert orig contract line id only if it is a rebook copy
         l_ppORIG_CONTRACT_LINE_ID_tab(l_party_payment_dtls_counter) :=  l_ppORIG_CONTRACT_LINE_ID_tab2(i);
      ELSE
         l_ppORIG_CONTRACT_LINE_ID_tab(l_party_payment_dtls_counter) := NULL;
	  END IF;

      l_party_payment_dtls_counter := l_party_payment_dtls_counter + 1;

    END LOOP;
  END LOOP;
  CLOSE c23;

  IF (p_flush = 'Y') THEN
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_party_payment_dtls_counter=' || l_party_payment_dtls_counter || ' l_ppid_tab.count=' || l_ppid_tab.COUNT);
    END IF;
    IF (l_party_payment_dtls_counter > 1) THEN
      forall i IN l_ppid_tab.first..l_ppid_tab.last
      INSERT INTO okl_party_payment_dtls (
       id, object_version_number, cpl_id,
       vendor_id, pay_site_id, payment_term_id,
       payment_method_code, pay_group_code, attribute_category,
       attribute1, attribute2, attribute3,
       attribute4, attribute5, attribute6,
       attribute7, attribute8, attribute9,
       attribute10, attribute11, attribute12,
       attribute13, attribute14, attribute15,
       created_by, creation_date, last_updated_by,
       last_update_date, last_update_login, payment_hdr_id,
       payment_start_date, payment_frequency, remit_days,
       disbursement_basis, disbursement_fixed_amount, disbursement_percent,
       processing_fee_basis, processing_fee_fixed_amount, processing_fee_percent,
       payment_basis,
       ORIG_CONTRACT_LINE_ID --sechawla 8677460  : PRB ESG Enhancements : copy this new column on rebook copy contract
      ) VALUES (
       l_ppid_tab(i), l_ppobject_version_number_tab(i), l_ppcpl_id_tab(i),
       l_ppvendor_id_tab(i), l_pppay_site_id_tab(i), l_pppayment_term_id_tab(i),
       l_pppayment_method_code_tab(i), l_pppay_group_code_tab(i), l_ppattribute_category_tab(i),
       l_ppattribute1_tab(i), l_ppattribute2_tab(i), l_ppattribute3_tab(i),
       l_ppattribute4_tab(i), l_ppattribute5_tab(i), l_ppattribute6_tab(i),
       l_ppattribute7_tab(i), l_ppattribute8_tab(i), l_ppattribute9_tab(i),
       l_ppattribute10_tab(i), l_ppattribute11_tab(i), l_ppattribute12_tab(i),
       l_ppattribute13_tab(i), l_ppattribute14_tab(i), l_ppattribute15_tab(i),
       l_created_by, SYSDATE, l_last_updated_by,
       SYSDATE, l_last_update_login, l_pppayment_hdr_id_tab(i),
       l_pppayment_start_date_tab(i), l_pppayment_frequency_tab(i), l_ppremit_days_tab(i),
       l_ppdisbursement_basis_tab(i), l_ppdisbursement_fixed_am_tab(i), l_ppdisbursement_percent_tab(i),
       l_ppprocessing_fee_basis_tab(i), l_ppprocessing_fee_fixedt_tab(i), l_ppprocessing_fee_percen_tab(i),
       l_pppayment_basis_tab(i),
       l_ppORIG_CONTRACT_LINE_ID_tab(i) --sechawla 8677460  : PRB ESG Enhancements
      );
    END IF;
  END IF;

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'prepare_party_payment_dtls');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing prepare_party_payment_dtls:l_ppid_tab.count=' ||l_ppid_tab.COUNT || ' ...');
  END IF;
  IF (l_ppid_tab.COUNT > 0) THEN
  FOR i IN l_ppid_tab.first..l_ppid_tab.last
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ppid_tab('||i||')=' || l_ppid_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ppobject_version_number_tab('||i||')=' || l_ppobject_version_number_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ppcpl_id_tab('||i||')=' || l_ppcpl_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ppvendor_id_tab('||i||')=' || l_ppvendor_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_pppay_site_id_tab('||i||')=' || l_pppay_site_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_pppayment_term_id_tab('||i||')=' || l_pppayment_term_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_pppayment_method_code_tab('||i||')=' || l_pppayment_method_code_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_pppay_group_code_tab('||i||')=' || l_pppay_group_code_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ppattribute_category_tab('||i||')=' || l_ppattribute_category_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ppattribute1_tab('||i||')=' || l_ppattribute1_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ppattribute2_tab('||i||')=' || l_ppattribute2_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ppattribute3_tab('||i||')=' || l_ppattribute3_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ppattribute4_tab('||i||')=' || l_ppattribute4_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ppattribute5_tab('||i||')=' || l_ppattribute5_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ppattribute6_tab('||i||')=' || l_ppattribute6_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ppattribute7_tab('||i||')=' || l_ppattribute7_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ppattribute8_tab('||i||')=' || l_ppattribute8_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ppattribute9_tab('||i||')=' || l_ppattribute9_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ppattribute10_tab('||i||')=' || l_ppattribute10_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ppattribute11_tab('||i||')=' || l_ppattribute11_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ppattribute12_tab('||i||')=' || l_ppattribute12_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ppattribute13_tab('||i||')=' || l_ppattribute13_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ppattribute14_tab('||i||')=' || l_ppattribute14_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ppattribute15_tab('||i||')=' || l_ppattribute15_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ppPAYMENT_HDR_ID_tab('||i||')=' || l_ppPAYMENT_HDR_ID_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ppPAYMENT_START_DATE_tab('||i||')=' || l_ppPAYMENT_START_DATE_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ppPAYMENT_FREQUENCY_tab('||i||')=' || l_ppPAYMENT_FREQUENCY_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ppREMIT_DAYS_tab('||i||')=' || l_ppREMIT_DAYS_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ppDISBURSEMENT_BASIS_tab('||i||')=' || l_ppDISBURSEMENT_BASIS_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ppDISBURSEMENT_FIXED_AMOUNT_tab('||i||')=' || l_ppDISBURSEMENT_FIXED_AM_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ppDISBURSEMENT_PERCENT_tab('||i||')=' || l_ppDISBURSEMENT_PERCENT_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ppPROCESSING_FEE_BASIS_tab('||i||')=' || l_ppPROCESSING_FEE_BASIS_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ppPROCESSING_FEE_FIXED_AMOUNT_tab('||i||')=' || l_ppPROCESSING_FEE_FIXEDt_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ppPROCESSING_FEE_PERCENT_tab('||i||')=' || l_ppPROCESSING_FEE_PERCEN_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ppPAYMENT_BASIS_tab('||i||')=' || l_ppPAYMENT_BASIS_tab(i));
    END IF;
  END LOOP;
  END IF;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END; /* prepare_party_payment_dtls */

FUNCTION find_vid_mapping_id(p_id IN NUMBER) RETURN VARCHAR2 IS
hi NUMBER;
lo NUMBER;
m NUMBER;
BEGIN
  lo := 1;
  hi := l_vid_counter - 1;
  WHILE (lo <= hi) LOOP
    m := FLOOR((hi + lo)/2);
    IF (l_vid_mapping_tab(m).cle_id = p_id) THEN
      RETURN l_vid_mapping_tab(m).object1_id1;
    ELSIF (l_vid_mapping_tab(m).cle_id > p_id) THEN
      hi := m - 1;
    ELSE
      lo := m + 1;
    END IF;
  END LOOP;
  RETURN NULL;
END;  /* find_vid_mapping_id */

PROCEDURE sort_vid_mapping_tab IS
  TYPE numtabtype IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
  --a numtabtype;
  l_stack numtabtype;
  l_stack_index NUMBER := 0;
  N NUMBER;
  R NUMBER;
  L NUMBER;
  P NUMBER;
  W NUMBER;
  W2 VARCHAR2(40);
  X NUMBER;
  I NUMBER;
  J NUMBER;
BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  NULL;

  N := l_vid_counter - 1;
  IF (N < 2) THEN
    RETURN;
  END IF;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := 1;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := N;

  --dbms_output.put_line('l_stack_index=' || l_stack_index);
  WHILE l_stack_index > 0
  LOOP
    R := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    L := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    --dbms_output.put_line('Pop: l_stack_index=' || l_stack_index);
    WHILE 1=1
    LOOP -- loop until L >= R
      I := L;
      J := R;
      P := FLOOR((L+R)/2);
      --if (a(L) > a(P)) then
      IF (l_vid_mapping_tab(L).cle_id > l_vid_mapping_tab(P).cle_id)
      THEN
        W := l_vid_mapping_tab(L).cle_id;
        W2 := l_vid_mapping_tab(L).object1_id1;
        l_vid_mapping_tab(L).cle_id :=l_vid_mapping_tab(P).cle_id;
        l_vid_mapping_tab(L).object1_id1 :=l_vid_mapping_tab(P).object1_id1;
        l_vid_mapping_tab(P).cle_id := W;
        l_vid_mapping_tab(P).object1_id1 := W2;
      END IF;
      --if (a(L) > a(R)) then
      IF (l_vid_mapping_tab(L).cle_id > l_vid_mapping_tab(R).cle_id)
      THEN
        W := l_vid_mapping_tab(L).cle_id;
        W2 := l_vid_mapping_tab(L).object1_id1;
        l_vid_mapping_tab(L).cle_id :=l_vid_mapping_tab(R).cle_id;
        l_vid_mapping_tab(L).object1_id1 :=l_vid_mapping_tab(R).object1_id1;
        l_vid_mapping_tab(R).cle_id := W;
        l_vid_mapping_tab(R).object1_id1 := W2;
      END IF;
      --if (a(P) > a(R)) then
      IF (l_vid_mapping_tab(P).cle_id > l_vid_mapping_tab(R).cle_id)
      THEN
        W := l_vid_mapping_tab(P).cle_id;
        W2 := l_vid_mapping_tab(P).object1_id1;
        l_vid_mapping_tab(P).cle_id :=l_vid_mapping_tab(R).cle_id;
        l_vid_mapping_tab(P).object1_id1 :=l_vid_mapping_tab(R).object1_id1;
        l_vid_mapping_tab(R).cle_id := W;
        l_vid_mapping_tab(R).object1_id1 := W2;
      END IF;
      --X := a(P);
      X := l_vid_mapping_tab(P).cle_id;
      WHILE 1=1
      LOOP    -- until I > J
        --while (a(I) < X) loop
        WHILE (l_vid_mapping_tab(I).cle_id < X) LOOP
          I := I + 1;
        END LOOP;
        WHILE (X < l_vid_mapping_tab(J).cle_id) LOOP
          J := J - 1;
        END LOOP;
        IF (I <= J) THEN
          W := l_vid_mapping_tab(I).cle_id;
          W2 := l_vid_mapping_tab(I).object1_id1;
          l_vid_mapping_tab(I).cle_id :=l_vid_mapping_tab(J).cle_id;
          l_vid_mapping_tab(I).object1_id1 :=l_vid_mapping_tab(J).object1_id1;
          l_vid_mapping_tab(J).cle_id := W;
          l_vid_mapping_tab(J).object1_id1 := W2;
          I := I + 1;
          J := J - 1;
        END IF;
        EXIT WHEN I > J;
      END LOOP;
      IF (J - L < R - I) THEN
        IF (I < R) THEN
          --push(I); push(R);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := I;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := R;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        R := J;
      ELSE
        IF (L < J) THEN
          --push(L); push(J);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := L;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := J;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        L := I;
      END IF;

      EXIT WHEN (L >= R);
    END LOOP;
  END LOOP;

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'sort_vid_mapping_tab');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing sort_vid_mapping_tab:l_vid_mapping_tab N=' || N || ' ...');
  END IF;

  --print array
  FOR i IN 1..N
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_vid_mapping_tab('||i||')=' || l_vid_mapping_tab(i).cle_id || ':' || l_vid_mapping_tab(i).object1_id1);
    END IF;
  END LOOP;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;  /* sort_vid_mapping_tab */

PROCEDURE insert_okc_k_party_roles(p_old_id IN okc_k_headers_b.id%TYPE,
                                   p_new_id IN okc_k_headers_b.id%TYPE) IS
CURSOR c9(p_id okc_k_party_roles_b.dnz_chr_id%TYPE) IS
SELECT
     id, chr_id, cle_id,
     dnz_chr_id, rle_code, object1_id1,
     object1_id2, jtot_object1_code, object_version_number,
     created_by, creation_date, last_updated_by,
     last_update_date, code, facility,
     minority_group_lookup_code, small_business_flag, women_owned_flag,
     last_update_login, attribute_category, attribute1,
     attribute2, attribute3, attribute4,
     attribute5, attribute6, attribute7,
     attribute8, attribute9, attribute10,
     attribute11, attribute12, attribute13,
     attribute14, attribute15, security_group_id,
     cpl_id, primary_yn, bill_to_site_use_id,
     cust_acct_id, id orig_system_id1
  FROM okc_k_party_roles_b
  WHERE dnz_chr_id = p_id
  AND (
    chr_id = chr_id
    OR (
        NVL(p_copy_lines_yn, 'N') = 'Y'
        AND cle_id IS NOT NULL
       )
  );

    TYPE l_id_type IS TABLE OF okc_k_party_roles_b.id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_chr_id_type IS TABLE OF okc_k_party_roles_b.chr_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_cle_id_type IS TABLE OF okc_k_party_roles_b.cle_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_dnz_chr_id_type IS TABLE OF okc_k_party_roles_b.dnz_chr_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_rle_code_type IS TABLE OF okc_k_party_roles_b.rle_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_object1_id1_type IS TABLE OF okc_k_party_roles_b.object1_id1%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_object1_id2_type IS TABLE OF okc_k_party_roles_b.object1_id2%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_jtot_object1_code_type IS TABLE OF okc_k_party_roles_b.jtot_object1_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_object_version_number_type IS TABLE OF okc_k_party_roles_b.object_version_number%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_created_by_type IS TABLE OF okc_k_party_roles_b.created_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_creation_date_type IS TABLE OF okc_k_party_roles_b.creation_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_last_updated_by_type IS TABLE OF okc_k_party_roles_b.last_updated_by%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_last_update_date_type IS TABLE OF okc_k_party_roles_b.last_update_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_code_type IS TABLE OF okc_k_party_roles_b.code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_facility_type IS TABLE OF okc_k_party_roles_b.facility%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_minority_group_lookup_c_type IS TABLE OF okc_k_party_roles_b.minority_group_lookup_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_small_business_flag_type IS TABLE OF okc_k_party_roles_b.small_business_flag%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_women_owned_flag_type IS TABLE OF okc_k_party_roles_b.women_owned_flag%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_last_update_login_type IS TABLE OF okc_k_party_roles_b.last_update_login%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute_category_type IS TABLE OF okc_k_party_roles_b.attribute_category%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute1_type IS TABLE OF okc_k_party_roles_b.attribute1%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute2_type IS TABLE OF okc_k_party_roles_b.attribute2%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute3_type IS TABLE OF okc_k_party_roles_b.attribute3%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute4_type IS TABLE OF okc_k_party_roles_b.attribute4%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute5_type IS TABLE OF okc_k_party_roles_b.attribute5%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute6_type IS TABLE OF okc_k_party_roles_b.attribute6%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute7_type IS TABLE OF okc_k_party_roles_b.attribute7%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute8_type IS TABLE OF okc_k_party_roles_b.attribute8%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute9_type IS TABLE OF okc_k_party_roles_b.attribute9%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute10_type IS TABLE OF okc_k_party_roles_b.attribute10%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute11_type IS TABLE OF okc_k_party_roles_b.attribute11%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute12_type IS TABLE OF okc_k_party_roles_b.attribute12%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute13_type IS TABLE OF okc_k_party_roles_b.attribute13%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute14_type IS TABLE OF okc_k_party_roles_b.attribute14%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_attribute15_type IS TABLE OF okc_k_party_roles_b.attribute15%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_security_group_id_type IS TABLE OF okc_k_party_roles_b.security_group_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_cpl_id_type IS TABLE OF okc_k_party_roles_b.cpl_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_primary_yn_type IS TABLE OF okc_k_party_roles_b.primary_yn%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_bill_to_site_use_id_type IS TABLE OF okc_k_party_roles_b.bill_to_site_use_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_cust_acct_id_type IS TABLE OF okc_k_party_roles_b.cust_acct_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_orig_system_id1_type IS TABLE OF okc_k_party_roles_b.orig_system_id1%TYPE INDEX BY BINARY_INTEGER;

    l_id_tab_old l_id_type;

    l_id_tab l_id_type;
    l_chr_id_tab l_chr_id_type;
    l_cle_id_tab l_cle_id_type;
    l_dnz_chr_id_tab l_dnz_chr_id_type;
    l_rle_code_tab l_rle_code_type;
    l_object1_id1_tab l_object1_id1_type;
    l_object1_id2_tab l_object1_id2_type;
    l_jtot_object1_code_tab l_jtot_object1_code_type;
    l_object_version_number_tab l_object_version_number_type;
    l_created_by_tab l_created_by_type;
    l_creation_date_tab l_creation_date_type;
    l_last_updated_by_tab l_last_updated_by_type;
    l_last_update_date_tab l_last_update_date_type;
    l_code_tab l_code_type;
    l_facility_tab l_facility_type;
    l_minority_group_lookup_c_tab l_minority_group_lookup_c_type;
    l_small_business_flag_tab l_small_business_flag_type;
    l_women_owned_flag_tab l_women_owned_flag_type;
    l_last_update_login_tab l_last_update_login_type;
    l_attribute_category_tab l_attribute_category_type;
    l_attribute1_tab l_attribute1_type;
    l_attribute2_tab l_attribute2_type;
    l_attribute3_tab l_attribute3_type;
    l_attribute4_tab l_attribute4_type;
    l_attribute5_tab l_attribute5_type;
    l_attribute6_tab l_attribute6_type;
    l_attribute7_tab l_attribute7_type;
    l_attribute8_tab l_attribute8_type;
    l_attribute9_tab l_attribute9_type;
    l_attribute10_tab l_attribute10_type;
    l_attribute11_tab l_attribute11_type;
    l_attribute12_tab l_attribute12_type;
    l_attribute13_tab l_attribute13_type;
    l_attribute14_tab l_attribute14_type;
    l_attribute15_tab l_attribute15_type;
    l_security_group_id_tab l_security_group_id_type;
    l_cpl_id_tab l_cpl_id_type;
    l_primary_yn_tab l_primary_yn_type;
    l_bill_to_site_use_id_tab l_bill_to_site_use_id_type;
    l_cust_acct_id_tab l_cust_acct_id_type;
    l_orig_system_id1_tab l_orig_system_id1_type;

    l_id_tab2 l_id_type;
    l_chr_id_tab2 l_chr_id_type;
    l_cle_id_tab2 l_cle_id_type;
    l_dnz_chr_id_tab2 l_dnz_chr_id_type;
    l_rle_code_tab2 l_rle_code_type;
    l_object1_id1_tab2 l_object1_id1_type;
    l_object1_id2_tab2 l_object1_id2_type;
    l_jtot_object1_code_tab2 l_jtot_object1_code_type;
    l_object_version_number_tab2 l_object_version_number_type;
    l_created_by_tab2 l_created_by_type;
    l_creation_date_tab2 l_creation_date_type;
    l_last_updated_by_tab2 l_last_updated_by_type;
    l_last_update_date_tab2 l_last_update_date_type;
    l_code_tab2 l_code_type;
    l_facility_tab2 l_facility_type;
    l_minority_group_lookup_c_tab2 l_minority_group_lookup_c_type;
    l_small_business_flag_tab2 l_small_business_flag_type;
    l_women_owned_flag_tab2 l_women_owned_flag_type;
    l_last_update_login_tab2 l_last_update_login_type;
    l_attribute_category_tab2 l_attribute_category_type;
    l_attribute1_tab2 l_attribute1_type;
    l_attribute2_tab2 l_attribute2_type;
    l_attribute3_tab2 l_attribute3_type;
    l_attribute4_tab2 l_attribute4_type;
    l_attribute5_tab2 l_attribute5_type;
    l_attribute6_tab2 l_attribute6_type;
    l_attribute7_tab2 l_attribute7_type;
    l_attribute8_tab2 l_attribute8_type;
    l_attribute9_tab2 l_attribute9_type;
    l_attribute10_tab2 l_attribute10_type;
    l_attribute11_tab2 l_attribute11_type;
    l_attribute12_tab2 l_attribute12_type;
    l_attribute13_tab2 l_attribute13_type;
    l_attribute14_tab2 l_attribute14_type;
    l_attribute15_tab2 l_attribute15_type;
    l_security_group_id_tab2 l_security_group_id_type;
    l_cpl_id_tab2 l_cpl_id_type;
    l_primary_yn_tab2 l_primary_yn_type;
    l_bill_to_site_use_id_tab2 l_bill_to_site_use_id_type;
    l_cust_acct_id_tab2 l_cust_acct_id_type;
    l_orig_system_id1_tab2 l_orig_system_id1_type;

    l_loop_counter NUMBER := 0;
    l_new_cle_id NUMBER := 0;

BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  NULL;
  OPEN c9(p_old_id);
  LOOP
    FETCH c9 bulk collect INTO
      l_id_tab2, l_chr_id_tab2, l_cle_id_tab2,
      l_dnz_chr_id_tab2, l_rle_code_tab2, l_object1_id1_tab2,
      l_object1_id2_tab2, l_jtot_object1_code_tab2, l_object_version_number_tab2,
      l_created_by_tab2, l_creation_date_tab2, l_last_updated_by_tab2,
      l_last_update_date_tab2, l_code_tab2, l_facility_tab2,
      l_minority_group_lookup_c_tab2, l_small_business_flag_tab2, l_women_owned_flag_tab2,
      l_last_update_login_tab2, l_attribute_category_tab2, l_attribute1_tab2,
      l_attribute2_tab2, l_attribute3_tab2, l_attribute4_tab2,
      l_attribute5_tab2, l_attribute6_tab2, l_attribute7_tab2,
      l_attribute8_tab2, l_attribute9_tab2, l_attribute10_tab2,
      l_attribute11_tab2, l_attribute12_tab2, l_attribute13_tab2,
      l_attribute14_tab2, l_attribute15_tab2, l_security_group_id_tab2,
      l_cpl_id_tab2, l_primary_yn_tab2, l_bill_to_site_use_id_tab2,
      l_cust_acct_id_tab2, l_orig_system_id1_tab2
    limit G_BULK_SIZE;
    EXIT WHEN l_id_tab2.COUNT = 0;

    FOR i IN l_id_tab2.first..l_id_tab2.last
    LOOP
      l_loop_counter := l_loop_counter + 1;

      -- Store old ids
      l_id_tab_old(l_loop_counter) := l_id_tab2(i);

      l_id_tab(l_loop_counter) := l_id_tab2(i);

      -- Store party old_id and new_id in mapping table
      l_party_id_mapping_tab(l_party_counter).old_id := l_id_tab2(i);

      -- Replace l_id_tab
      l_id_tab(l_loop_counter) := okc_p_util.raw_to_number(sys_guid());
      l_prid_tab(l_loop_counter) := l_id_tab(l_loop_counter);

      l_party_id_mapping_tab(l_party_counter).new_id := l_id_tab(l_loop_counter);
      l_chr_id_tab(l_loop_counter) := l_chr_id_tab2(i);

      -- Replace l_chr_id_tab
      IF (l_chr_id_tab(l_loop_counter) IS NOT NULL) THEN
        l_chr_id_tab(l_loop_counter) := p_new_id;
      END IF;

      l_cle_id_tab(l_loop_counter) := l_cle_id_tab2(i);

      -- Replace l_cle_id_tab
      IF (l_cle_id_tab(l_loop_counter) IS NOT NULL) THEN
        l_new_cle_id := find_mapping_id(l_cle_id_tab(l_loop_counter));
        IF (l_new_cle_id = -1) THEN
          IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ERROR : Mapping id not found for ' || l_cle_id_tab(l_loop_counter));
          END IF;
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        END IF;
        l_cle_id_tab(l_loop_counter) := l_new_cle_id;
      END IF;

      l_dnz_chr_id_tab(l_loop_counter) := l_dnz_chr_id_tab2(i);

      -- Replace dnz_chr_id
      l_dnz_chr_id_tab(l_loop_counter) := p_new_id;

      l_rle_code_tab(l_loop_counter) := l_rle_code_tab2(i);

      l_object1_id1_tab(l_loop_counter) := l_object1_id1_tab2(i);
      l_probject1_id1_tab(l_loop_counter) := l_object1_id1_tab(l_loop_counter);

      -- Store vendor id mapping for business event processing only
      IF (l_rle_code_tab(l_loop_counter) = 'OKL_VENDOR' AND
          l_cle_id_tab(l_loop_counter) IS NOT NULL) THEN
        l_vid_mapping_tab(l_vid_counter).cle_id :=  l_cle_id_tab(l_loop_counter);
        l_vid_mapping_tab(l_vid_counter).object1_id1 :=  l_object1_id1_tab(l_loop_counter);
        l_vid_counter := l_vid_counter + 1;
      END IF;


      l_object1_id2_tab(l_loop_counter) := l_object1_id2_tab2(i);
      l_jtot_object1_code_tab(l_loop_counter) := l_jtot_object1_code_tab2(i);
      l_object_version_number_tab(l_loop_counter) := l_object_version_number_tab2(i);
      l_created_by_tab(l_loop_counter) := l_created_by_tab2(i);
      l_creation_date_tab(l_loop_counter) := l_creation_date_tab2(i);
      l_last_updated_by_tab(l_loop_counter) := l_last_updated_by_tab2(i);
      l_last_update_date_tab(l_loop_counter) := l_last_update_date_tab2(i);
      l_code_tab(l_loop_counter) := l_code_tab2(i);
      l_facility_tab(l_loop_counter) := l_facility_tab2(i);
      l_minority_group_lookup_c_tab(l_loop_counter) := l_minority_group_lookup_c_tab2(i);
      l_small_business_flag_tab(l_loop_counter) := l_small_business_flag_tab2(i);
      l_women_owned_flag_tab(l_loop_counter) := l_women_owned_flag_tab2(i);
      l_last_update_login_tab(l_loop_counter) := l_last_update_login_tab2(i);
      l_attribute_category_tab(l_loop_counter) := l_attribute_category_tab2(i);
      l_attribute1_tab(l_loop_counter) := l_attribute1_tab2(i);
      l_attribute2_tab(l_loop_counter) := l_attribute2_tab2(i);
      l_attribute3_tab(l_loop_counter) := l_attribute3_tab2(i);
      l_attribute4_tab(l_loop_counter) := l_attribute4_tab2(i);
      l_attribute5_tab(l_loop_counter) := l_attribute5_tab2(i);
      l_attribute6_tab(l_loop_counter) := l_attribute6_tab2(i);
      l_attribute7_tab(l_loop_counter) := l_attribute7_tab2(i);
      l_attribute8_tab(l_loop_counter) := l_attribute8_tab2(i);
      l_attribute9_tab(l_loop_counter) := l_attribute9_tab2(i);
      l_attribute10_tab(l_loop_counter) := l_attribute10_tab2(i);
      l_attribute11_tab(l_loop_counter) := l_attribute11_tab2(i);
      l_attribute12_tab(l_loop_counter) := l_attribute12_tab2(i);
      l_attribute13_tab(l_loop_counter) := l_attribute13_tab2(i);
      l_attribute14_tab(l_loop_counter) := l_attribute14_tab2(i);
      l_attribute15_tab(l_loop_counter) := l_attribute15_tab2(i);
      l_security_group_id_tab(l_loop_counter) := l_security_group_id_tab2(i);
      l_cpl_id_tab(l_loop_counter) := l_cpl_id_tab2(i);
      l_primary_yn_tab(l_loop_counter) := l_primary_yn_tab2(i);
      l_bill_to_site_use_id_tab(l_loop_counter) := l_bill_to_site_use_id_tab2(i);
      l_cust_acct_id_tab(l_loop_counter) := l_cust_acct_id_tab2(i);
      l_orig_system_id1_tab(l_loop_counter) := l_orig_system_id1_tab2(i);

      l_party_counter := l_party_counter + 1;
    END LOOP;
  END LOOP;
  CLOSE c9;
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_vid_counter=' || l_vid_counter);
  END IF;
  IF (l_vid_counter > 1) THEN
    sort_vid_mapping_tab;
  END IF;

  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_party_counter='||l_party_counter || ' l_id_tab.count='||l_id_tab.COUNT);
  END IF;
  IF (l_party_counter > 1) THEN
    forall i IN l_id_tab.first..l_id_tab.last
      INSERT INTO okc_k_party_roles_b (
       id, chr_id, cle_id,
       dnz_chr_id, rle_code, object1_id1,
       object1_id2, jtot_object1_code, object_version_number,
       created_by, creation_date, last_updated_by,
       last_update_date, code, facility,
       minority_group_lookup_code, small_business_flag, women_owned_flag,
       last_update_login, attribute_category, attribute1,
       attribute2, attribute3, attribute4,
       attribute5, attribute6, attribute7,
       attribute8, attribute9, attribute10,
       attribute11, attribute12, attribute13,
       attribute14, attribute15, security_group_id,
       cpl_id, primary_yn, bill_to_site_use_id,
       cust_acct_id, orig_system_id1
     ) VALUES (
       l_id_tab(i), l_chr_id_tab(i), l_cle_id_tab(i),
       l_dnz_chr_id_tab(i), l_rle_code_tab(i), l_object1_id1_tab(i),
       l_object1_id2_tab(i), l_jtot_object1_code_tab(i), 1,
       l_created_by, SYSDATE, l_last_updated_by,
       SYSDATE, l_code_tab(i), l_facility_tab(i),
       l_minority_group_lookup_c_tab(i), l_small_business_flag_tab(i), l_women_owned_flag_tab(i),
       l_last_update_login, l_attribute_category_tab(i), l_attribute1_tab(i),
       l_attribute2_tab(i), l_attribute3_tab(i), l_attribute4_tab(i),
       l_attribute5_tab(i), l_attribute6_tab(i), l_attribute7_tab(i),
       l_attribute8_tab(i), l_attribute9_tab(i), l_attribute10_tab(i),
       l_attribute11_tab(i), l_attribute12_tab(i), l_attribute13_tab(i),
       l_attribute14_tab(i), l_attribute15_tab(i), l_security_group_id_tab(i),
       l_cpl_id_tab(i), l_primary_yn_tab(i), l_bill_to_site_use_id_tab(i),
       l_cust_acct_id_tab(i), l_orig_system_id1_tab(i)
     );

     do_sort_party_mapping_id;

     IF (l_id_tab_old.COUNT > 0) THEN
       FOR i IN l_id_tab_old.first..l_id_tab_old.last
       LOOP
          IF (i = l_id_tab.last)
          THEN
            prepare_party_roles_tl(l_id_tab_old(i), l_id_tab(i), 'L');
          ELSE
            prepare_party_roles_tl(l_id_tab_old(i), l_id_tab(i), 'NL');
          END IF;
       END LOOP;

       l_message := 'OKL_NEW_COPY_KPR_ERROR';
       FOR i IN l_id_tab_old.first..l_id_tab_old.last
       LOOP
          IF (i = l_id_tab.last)
          THEN
            prepare_okl_party_roles(l_id_tab_old(i), l_id_tab(i), 'Y');
          ELSE
            prepare_okl_party_roles(l_id_tab_old(i), l_id_tab(i), 'N');
          END IF;
       END LOOP;

       l_message := 'OKL_NEW_COPY_CRO_ERROR';
       FOR i IN l_id_tab_old.first..l_id_tab_old.last
       LOOP
          IF (i = l_id_tab.last)
          THEN
            prepare_contacts(l_id_tab_old(i), l_id_tab(i), 'L');
          ELSE
            prepare_contacts(l_id_tab_old(i), l_id_tab(i), 'NL');
          END IF;
       END LOOP;

       l_message := 'OKL_NEW_COPY_PHD_ERROR';
       IF (p_copy_lines_yn = 'Y') THEN
         IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Calling party_payment_hdr...');
         END IF;
         copy_party_payment_hdr(p_old_id, p_new_id);
       END IF;

       IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Calling party_payment_dtls...');
       END IF;
       l_message := 'OKL_NEW_COPY_PYD_ERROR';
       FOR i IN l_id_tab_old.first..l_id_tab_old.last
       LOOP
          IF (i = l_id_tab.last)
          THEN
            prepare_party_payment_dtls(l_id_tab_old(i), l_id_tab(i), 'Y');
          ELSE
            prepare_party_payment_dtls(l_id_tab_old(i), l_id_tab(i), 'N');
          END IF;
       END LOOP;
     END IF;
  END IF;

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'insert_okc_k_party_roles');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing insert_okc_k_party_roles:l_id_tab.count=' || l_id_tab.COUNT || ' ...');
  END IF;
  IF (l_id_tab.COUNT > 0) THEN
  FOR i IN l_id_tab.first..l_id_tab.last
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_id_tab('||i||')=' || l_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_chr_id_tab('||i||')=' || l_chr_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_cle_id_tab('||i||')=' || l_cle_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dnz_chr_id_tab('||i||')=' || l_dnz_chr_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rle_code_tab('||i||')=' || l_rle_code_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_object1_id1_tab('||i||')=' || l_object1_id1_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_object1_id2_tab('||i||')=' || l_object1_id2_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_jtot_object1_code_tab('||i||')=' || l_jtot_object1_code_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_code_tab('||i||')=' || l_code_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_facility_tab('||i||')=' || l_facility_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_minority_group_lookup_c_tab('||i||')=' || l_minority_group_lookup_c_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_small_business_flag_tab('||i||')=' || l_small_business_flag_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_women_owned_flag_tab('||i||')=' || l_women_owned_flag_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute_category_tab('||i||')=' || l_attribute_category_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute1_tab('||i||')=' || l_attribute1_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute2_tab('||i||')=' || l_attribute2_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute3_tab('||i||')=' || l_attribute3_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute4_tab('||i||')=' || l_attribute4_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute5_tab('||i||')=' || l_attribute5_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute6_tab('||i||')=' || l_attribute6_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute7_tab('||i||')=' || l_attribute7_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute8_tab('||i||')=' || l_attribute8_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute9_tab('||i||')=' || l_attribute9_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute10_tab('||i||')=' || l_attribute10_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute11_tab('||i||')=' || l_attribute11_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute12_tab('||i||')=' || l_attribute12_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute13_tab('||i||')=' || l_attribute13_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute14_tab('||i||')=' || l_attribute14_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_attribute15_tab('||i||')=' || l_attribute15_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_security_group_id_tab('||i||')=' || l_security_group_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_cpl_id_tab('||i||')=' || l_cpl_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_primary_yn_tab('||i||')=' || l_primary_yn_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_bill_to_site_use_id_tab('||i||')=' || l_bill_to_site_use_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_cust_acct_id_tab('||i||')=' || l_cust_acct_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_orig_system_id1_tab('||i||')=' || l_orig_system_id1_tab(i));
    END IF;
  END LOOP;
  END IF;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END; /* insert_okc_k_party_roles */

FUNCTION find_rid_mapping_id(p_id IN NUMBER) RETURN NUMBER IS
hi NUMBER;
lo NUMBER;
m NUMBER;
BEGIN
  lo := 1;
  hi := l_rule_groups_b_counter - 1;
  WHILE (lo <= hi) LOOP
    m := FLOOR((hi + lo)/2);
    IF (l_rid_mapping_tab(m).old_id = p_id) THEN
      RETURN l_rid_mapping_tab(m).new_id;
    ELSIF (l_rid_mapping_tab(m).old_id > p_id) THEN
      hi := m - 1;
    ELSE
      lo := m + 1;
    END IF;
  END LOOP;
  RETURN -1;
END;  /* find_rid_mapping_id */

PROCEDURE sort_rid_mapping_tab IS
  TYPE numtabtype IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
  --a numtabtype;
  l_stack numtabtype;
  l_stack_index NUMBER := 0;
  N NUMBER;
  R NUMBER;
  L NUMBER;
  P NUMBER;
  W NUMBER;
  W2 NUMBER;
  X NUMBER;
  I NUMBER;
  J NUMBER;
BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  NULL;

  N := l_rule_groups_b_counter - 1;
  IF (N < 2) THEN
    RETURN;
  END IF;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := 1;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := N;

  --dbms_output.put_line('l_stack_index=' || l_stack_index);
  WHILE l_stack_index > 0
  LOOP
    R := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    L := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    --dbms_output.put_line('Pop: l_stack_index=' || l_stack_index);
    WHILE 1=1
    LOOP -- loop until L >= R
      I := L;
      J := R;
      P := FLOOR((L+R)/2);
      --if (a(L) > a(P)) then
      IF (l_rid_mapping_tab(L).old_id > l_rid_mapping_tab(P).old_id)
      THEN
        W := l_rid_mapping_tab(L).old_id;
        W2 := l_rid_mapping_tab(L).new_id;
        l_rid_mapping_tab(L).old_id :=l_rid_mapping_tab(P).old_id;
        l_rid_mapping_tab(L).new_id :=l_rid_mapping_tab(P).new_id;
        l_rid_mapping_tab(P).old_id := W;
        l_rid_mapping_tab(P).new_id := W2;
      END IF;
      --if (a(L) > a(R)) then
      IF (l_rid_mapping_tab(L).old_id > l_rid_mapping_tab(R).old_id)
      THEN
        W := l_rid_mapping_tab(L).old_id;
        W2 := l_rid_mapping_tab(L).new_id;
        l_rid_mapping_tab(L).old_id :=l_rid_mapping_tab(R).old_id;
        l_rid_mapping_tab(L).new_id :=l_rid_mapping_tab(R).new_id;
        l_rid_mapping_tab(R).old_id := W;
        l_rid_mapping_tab(R).new_id := W2;
      END IF;
      --if (a(P) > a(R)) then
      IF (l_rid_mapping_tab(P).old_id > l_rid_mapping_tab(R).old_id)
      THEN
        W := l_rid_mapping_tab(P).old_id;
        W2 := l_rid_mapping_tab(P).new_id;
        l_rid_mapping_tab(P).old_id :=l_rid_mapping_tab(R).old_id;
        l_rid_mapping_tab(P).new_id :=l_rid_mapping_tab(R).new_id;
        l_rid_mapping_tab(R).old_id := W;
        l_rid_mapping_tab(R).new_id := W2;
      END IF;
      --X := a(P);
      X := l_rid_mapping_tab(P).old_id;
      WHILE 1=1
      LOOP    -- until I > J
        --while (a(I) < X) loop
        WHILE (l_rid_mapping_tab(I).old_id < X) LOOP
          I := I + 1;
        END LOOP;
        WHILE (X < l_rid_mapping_tab(J).old_id) LOOP
          J := J - 1;
        END LOOP;
        IF (I <= J) THEN
          W := l_rid_mapping_tab(I).old_id;
          W2 := l_rid_mapping_tab(I).new_id;
          l_rid_mapping_tab(I).old_id :=l_rid_mapping_tab(J).old_id;
          l_rid_mapping_tab(I).new_id :=l_rid_mapping_tab(J).new_id;
          l_rid_mapping_tab(J).old_id := W;
          l_rid_mapping_tab(J).new_id := W2;
          I := I + 1;
          J := J - 1;
        END IF;
        EXIT WHEN I > J;
      END LOOP;
      IF (J - L < R - I) THEN
        IF (I < R) THEN
          --push(I); push(R);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := I;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := R;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        R := J;
      ELSE
        IF (L < J) THEN
          --push(L); push(J);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := L;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := J;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        L := I;
      END IF;

      EXIT WHEN (L >= R);
    END LOOP;
  END LOOP;

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'sort_rid_mapping_tab');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing sort_rid_mapping_tab:l_rid_mapping_tab N=' || N || ' ...');
  END IF;

  --print array
  FOR i IN 1..N
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rid_mapping_tab('||i||')=' || l_rid_mapping_tab(i).old_id || ':' || l_rid_mapping_tab(i).new_id);
    END IF;
  END LOOP;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;  /* sort_rid_mapping_tab */


FUNCTION find_rrid_mapping_id(p_id IN NUMBER) RETURN NUMBER IS
hi NUMBER;
lo NUMBER;
m NUMBER;
BEGIN
  lo := 1;
  hi := l_rules_b_counter - 1;
  WHILE (lo <= hi) LOOP
    m := FLOOR((hi + lo)/2);
    IF (l_rrid_mapping_tab(m).old_id = p_id) THEN
      RETURN l_rrid_mapping_tab(m).new_id;
    ELSIF (l_rrid_mapping_tab(m).old_id > p_id) THEN
      hi := m - 1;
    ELSE
      lo := m + 1;
    END IF;
  END LOOP;
  RETURN -1;
END;  /* find_rrid_mapping_id */

PROCEDURE sort_rrid_mapping_tab IS
  TYPE numtabtype IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
  --a numtabtype;
  l_stack numtabtype;
  l_stack_index NUMBER := 0;
  N NUMBER;
  R NUMBER;
  L NUMBER;
  P NUMBER;
  W NUMBER;
  W2 NUMBER;
  X NUMBER;
  I NUMBER;
  J NUMBER;
BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  NULL;

  N := l_rules_b_counter - 1;
  IF (N < 2) THEN
    RETURN;
  END IF;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := 1;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := N;

  --dbms_output.put_line('l_stack_index=' || l_stack_index);
  WHILE l_stack_index > 0
  LOOP
    R := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    L := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    --dbms_output.put_line('Pop: l_stack_index=' || l_stack_index);
    WHILE 1=1
    LOOP -- loop until L >= R
      I := L;
      J := R;
      P := FLOOR((L+R)/2);
      --if (a(L) > a(P)) then
      IF (l_rrid_mapping_tab(L).old_id > l_rrid_mapping_tab(P).old_id)
      THEN
        W := l_rrid_mapping_tab(L).old_id;
        W2 := l_rrid_mapping_tab(L).new_id;
        l_rrid_mapping_tab(L).old_id :=l_rrid_mapping_tab(P).old_id;
        l_rrid_mapping_tab(L).new_id :=l_rrid_mapping_tab(P).new_id;
        l_rrid_mapping_tab(P).old_id := W;
        l_rrid_mapping_tab(P).new_id := W2;
      END IF;
      --if (a(L) > a(R)) then
      IF (l_rrid_mapping_tab(L).old_id > l_rrid_mapping_tab(R).old_id)
      THEN
        W := l_rrid_mapping_tab(L).old_id;
        W2 := l_rrid_mapping_tab(L).new_id;
        l_rrid_mapping_tab(L).old_id :=l_rrid_mapping_tab(R).old_id;
        l_rrid_mapping_tab(L).new_id :=l_rrid_mapping_tab(R).new_id;
        l_rrid_mapping_tab(R).old_id := W;
        l_rrid_mapping_tab(R).new_id := W2;
      END IF;
      --if (a(P) > a(R)) then
      IF (l_rrid_mapping_tab(P).old_id > l_rrid_mapping_tab(R).old_id)
      THEN
        W := l_rrid_mapping_tab(P).old_id;
        W2 := l_rrid_mapping_tab(P).new_id;
        l_rrid_mapping_tab(P).old_id :=l_rrid_mapping_tab(R).old_id;
        l_rrid_mapping_tab(P).new_id :=l_rrid_mapping_tab(R).new_id;
        l_rrid_mapping_tab(R).old_id := W;
        l_rrid_mapping_tab(R).new_id := W2;
      END IF;
      --X := a(P);
      X := l_rrid_mapping_tab(P).old_id;
      WHILE 1=1
      LOOP    -- until I > J
        --while (a(I) < X) loop
        WHILE (l_rrid_mapping_tab(I).old_id < X) LOOP
          I := I + 1;
        END LOOP;
        WHILE (X < l_rrid_mapping_tab(J).old_id) LOOP
          J := J - 1;
        END LOOP;
        IF (I <= J) THEN
          W := l_rrid_mapping_tab(I).old_id;
          W2 := l_rrid_mapping_tab(I).new_id;
          l_rrid_mapping_tab(I).old_id :=l_rrid_mapping_tab(J).old_id;
          l_rrid_mapping_tab(I).new_id :=l_rrid_mapping_tab(J).new_id;
          l_rrid_mapping_tab(J).old_id := W;
          l_rrid_mapping_tab(J).new_id := W2;
          I := I + 1;
          J := J - 1;
        END IF;
        EXIT WHEN I > J;
      END LOOP;
      IF (J - L < R - I) THEN
        IF (I < R) THEN
          --push(I); push(R);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := I;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := R;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        R := J;
      ELSE
        IF (L < J) THEN
          --push(L); push(J);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := L;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := J;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        L := I;
      END IF;

      EXIT WHEN (L >= R);
    END LOOP;
  END LOOP;

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'sort_rrid_mapping_tab');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing sort_rrid_mapping_tab:l_rrid_mapping_tab N=' || N || ' ...');
  END IF;

  --print array
  FOR i IN 1..N
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrid_mapping_tab('||i||')=' || l_rrid_mapping_tab(i).old_id || ':' || l_rrid_mapping_tab(i).new_id);
    END IF;
  END LOOP;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;  /* sort_rrid_mapping_tab */


PROCEDURE prepare_rule_groups_tl(p_old_id IN okc_rule_groups_b.id%TYPE,
                                 p_new_id IN okc_rule_groups_b.id%TYPE,
                                 p_flush IN VARCHAR2) IS
CURSOR c13(p_id NUMBER) IS
SELECT
     id, LANGUAGE, source_lang,
     sfwt_flag, comments, created_by,
     creation_date, last_updated_by, last_update_date,
     last_update_login, security_group_id
FROM okc_rule_groups_tl
WHERE id = p_id;

    l_rtid_tab2 l_rtid_type;
    l_rtlanguage_tab2 l_rtlanguage_type;
    l_rtsource_lang_tab2 l_rtsource_lang_type;
    l_rtsfwt_flag_tab2 l_rtsfwt_flag_type;
    l_rtcomments_tab2 l_rtcomments_type;
    l_rtcreated_by_tab2 l_rtcreated_by_type;
    l_rtcreation_date_tab2 l_rtcreation_date_type;
    l_rtlast_updated_by_tab2 l_rtlast_updated_by_type;
    l_rtlast_update_date_tab2 l_rtlast_update_date_type;
    l_rtlast_update_login_tab2 l_rtlast_update_login_type;
    l_rtsecurity_group_id_tab2 l_rtsecurity_group_id_type;

BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  NULL;
  OPEN c13(p_old_id);
  LOOP
    FETCH c13 bulk collect INTO
      l_rtid_tab2, l_rtlanguage_tab2, l_rtsource_lang_tab2,
      l_rtsfwt_flag_tab2, l_rtcomments_tab2, l_rtcreated_by_tab2,
      l_rtcreation_date_tab2,l_rtlast_updated_by_tab2,l_rtlast_update_date_tab2,
      l_rtlast_update_login_tab2, l_rtsecurity_group_id_tab2
    limit G_BULK_SIZE;
    EXIT WHEN l_rtid_tab2.COUNT = 0;
    FOR i IN l_rtid_tab2.first..l_rtid_tab2.last
    LOOP
      l_rtid_tab(l_rule_groups_tl_counter) := l_rtid_tab2(i);

      -- Change id
      l_rtid_tab(l_rule_groups_tl_counter) := p_new_id;

      l_rtlanguage_tab(l_rule_groups_tl_counter) := l_rtlanguage_tab2(i);
      l_rtsource_lang_tab(l_rule_groups_tl_counter) := l_rtsource_lang_tab2(i);
      l_rtsfwt_flag_tab(l_rule_groups_tl_counter) := l_rtsfwt_flag_tab2(i);
      l_rtcomments_tab(l_rule_groups_tl_counter) := l_rtcomments_tab2(i);
      l_rtcreated_by_tab(l_rule_groups_tl_counter) := l_rtcreated_by_tab2(i);
      l_rtcreation_date_tab(l_rule_groups_tl_counter) := l_rtcreation_date_tab2(i);
      l_rtlast_updated_by_tab(l_rule_groups_tl_counter) := l_rtlast_updated_by_tab2(i);
      l_rtlast_update_date_tab(l_rule_groups_tl_counter) := l_rtlast_update_date_tab2(i);
      l_rtlast_update_login_tab(l_rule_groups_tl_counter) := l_rtlast_update_login_tab2(i);
      l_rtsecurity_group_id_tab(l_rule_groups_tl_counter) := l_rtsecurity_group_id_tab2(i);

      l_rule_groups_tl_counter := l_rule_groups_tl_counter + 1;
    END LOOP;
  END LOOP;
  CLOSE c13;

  IF (p_flush = 'Y') THEN
    IF (l_rule_groups_tl_counter > 1) THEN
      forall i IN l_rtid_tab.first..l_rtid_tab.last
      INSERT INTO okc_rule_groups_tl (
        id, LANGUAGE, source_lang,
        sfwt_flag, comments, created_by,
        creation_date, last_updated_by, last_update_date,
        last_update_login, security_group_id
      ) VALUES (
        l_rtid_tab(i), l_rtlanguage_tab(i), l_rtsource_lang_tab(i),
        'N', l_rtcomments_tab(i), l_created_by,
        SYSDATE, l_last_updated_by, SYSDATE,
        l_last_update_login, l_rtsecurity_group_id_tab(i)
      );
    END IF;
  END IF;

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'prepare_rule_groups_tl');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing prepare_rule_groups_tl:l_rtid_tab.count=' || l_rtid_tab.COUNT || ' ...');
  END IF;
  IF (l_rtid_tab.COUNT > 0) THEN
  FOR i IN l_rtid_tab.first..l_rtid_tab.last
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rtid_tab('||i||')=' || l_rtid_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rtlanguage_tab('||i||')=' || l_rtlanguage_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rtsource_lang_tab('||i||')=' || l_rtsource_lang_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rtcomments_tab('||i||')=' || l_rtcomments_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rtsecurity_group_id_tab('||i||')=' || l_rtsecurity_group_id_tab(i));
    END IF;
  END LOOP;
  END IF;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;  /* prepare_rule_groups_tl */

PROCEDURE insert_okc_rules_tl(p_old_id IN okc_rules_b.id%TYPE,
                              p_new_id okc_rules_b.id%TYPE,
                              p_flush IN VARCHAR2 ) IS
CURSOR c15(p_id okc_rules_b.id%TYPE) IS
SELECT
     id, LANGUAGE, source_lang,
     sfwt_flag, comments, text,
     created_by, creation_date, last_updated_by,
     last_update_date, last_update_login, security_group_id
FROM okc_rules_tl
WHERE id = p_id;

    l_trid_tab2 l_trid_type;
    l_trlanguage_tab2 l_trlanguage_type;
    l_trsource_lang_tab2 l_trsource_lang_type;
    l_trsfwt_flag_tab2 l_trsfwt_flag_type;
    l_trcomments_tab2 l_trcomments_type;
    l_trtext_tab2 l_trtext_type;
    l_trcreated_by_tab2 l_trcreated_by_type;
    l_trcreation_date_tab2 l_trcreation_date_type;
    l_trlast_updated_by_tab2 l_trlast_updated_by_type;
    l_trlast_update_date_tab2 l_trlast_update_date_type;
    l_trlast_update_login_tab2 l_trlast_update_login_type;
    l_trsecurity_group_id_tab2 l_trsecurity_group_id_type;

BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  OPEN c15(p_old_id);
  LOOP
    FETCH c15 bulk collect INTO
     l_trid_tab2, l_trlanguage_tab2, l_trsource_lang_tab2,
     l_trsfwt_flag_tab2, l_trcomments_tab2, l_trtext_tab2,
     l_trcreated_by_tab2, l_trcreation_date_tab2, l_trlast_updated_by_tab2,
     l_trlast_update_date_tab2, l_trlast_update_login_tab2, l_trsecurity_group_id_tab2
    limit G_BULK_SIZE;
    EXIT WHEN l_trid_tab2.COUNT = 0;
    FOR i IN l_trid_tab2.first..l_trid_tab2.last
    LOOP

      l_trid_tab(l_rules_tl_counter) := l_trid_tab2(i);
      -- Change id
      l_trid_tab(l_rules_tl_counter) := p_new_id;

      l_trlanguage_tab(l_rules_tl_counter) := l_trlanguage_tab2(i);
      l_trsource_lang_tab(l_rules_tl_counter) := l_trsource_lang_tab2(i);
      l_trsfwt_flag_tab(l_rules_tl_counter) := l_trsfwt_flag_tab2(i);
      l_trcomments_tab(l_rules_tl_counter) := l_trcomments_tab2(i);
      l_trtext_tab(l_rules_tl_counter) := l_trtext_tab2(i);
      l_trcreated_by_tab(l_rules_tl_counter) := l_trcreated_by_tab2(i);
      l_trcreation_date_tab(l_rules_tl_counter) := l_trcreation_date_tab2(i);
      l_trlast_updated_by_tab(l_rules_tl_counter) := l_trlast_updated_by_tab2(i);
      l_trlast_update_date_tab(l_rules_tl_counter) := l_trlast_update_date_tab2(i);
      l_trlast_update_login_tab(l_rules_tl_counter) := l_trlast_update_login_tab2(i);
      l_trsecurity_group_id_tab(l_rules_tl_counter) := l_trsecurity_group_id_tab2(i);

      l_rules_tl_counter := l_rules_tl_counter + 1;
    END LOOP;
  END LOOP;
  CLOSE c15;

  IF (p_flush = 'Y') THEN
    IF (l_rules_tl_counter > 1) THEN
      forall i IN l_trid_tab.first..l_trid_tab.last
      INSERT INTO okc_rules_tl (
        id, LANGUAGE, source_lang,
        sfwt_flag, comments, text,
        created_by, creation_date, last_updated_by,
        last_update_date, last_update_login, security_group_id
      ) VALUES (
        l_trid_tab(i), l_trlanguage_tab(i), l_trsource_lang_tab(i),
        l_trsfwt_flag_tab(i), l_trcomments_tab(i), l_trtext_tab(i),
        l_trcreated_by_tab(i), l_trcreation_date_tab(i), l_trlast_updated_by_tab(i),
        l_trlast_update_date_tab(i), l_trlast_update_login_tab(i), l_trsecurity_group_id_tab(i)
      );
    END IF;
  END IF;

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'insert_okc_rules_tl');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing insert_okc_rules_tl:l_trid_tab.count=' || l_trid_tab.COUNT || ' ...');
  END IF;
  IF (l_trid_tab.COUNT > 0 ) THEN
  FOR i IN l_trid_tab.first..l_trid_tab.last
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_trid_tab('||i||')=' || l_trid_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_trlanguage_tab('||i||')=' || l_trlanguage_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_trsource_lang_tab('||i||')=' || l_trsource_lang_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_trsfwt_flag_tab('||i||')=' || l_trsfwt_flag_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_trcomments_tab('||i||')=' || l_trcomments_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_trtext_tab('||i||')=' || l_trtext_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_trsecurity_group_id_tab('||i||')=' || l_trsecurity_group_id_tab(i));
    END IF;
  END LOOP;
  END IF;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END; /* insert_okc_rules_tl */

PROCEDURE insert_okc_rules_b( p_old_id IN okc_rule_groups_b.id%TYPE,
                              p_new_id IN okc_rule_groups_b.id%TYPE) IS
CURSOR c14(p_id okc_rule_groups_b.id%TYPE) IS
SELECT
     a.id, a.rgp_id, a.object1_id1,
     a.object2_id1, a.object3_id1, a.object1_id2,
     a.object2_id2, a.object3_id2, a.jtot_object1_code,
     a.jtot_object2_code, a.jtot_object3_code, a.dnz_chr_id,
     a.std_template_yn, a.warn_yn, a.priority,
     a.object_version_number, a.created_by, a.creation_date,
     a.last_updated_by, a.last_update_date, a.last_update_login,
     a.attribute_category, a.attribute1, a.attribute2,
     a.attribute3, a.attribute4, a.attribute5,
     a.attribute6, a.attribute7, a.attribute8,
     a.attribute9, a.attribute10, a.attribute11,
     a.attribute12, a.attribute13, a.attribute14,
     a.attribute15, a.rule_information_category, a.rule_information1,
     a.rule_information2, a.rule_information3, a.rule_information4,
     a.rule_information5, a.rule_information6, a.rule_information7,
     a.rule_information8, a.rule_information9, a.rule_information10,
     a.rule_information11, a.rule_information12, a.rule_information13,
     a.rule_information14, a.rule_information15, a.security_group_id,
     a.template_yn, a.ans_set_jtot_object_code, a.ans_set_jtot_object_id1,
     a.ans_set_jtot_object_id2, a.display_sequence, a.comments
FROM okc_rules_b a,
     okc_rule_groups_b rgp,
     okc_rg_def_rules rgdef
WHERE a.dnz_chr_id=p_id
AND a.rgp_id=rgp.id
AND rgp.rgd_code=rgdef.rgd_code
AND a.rule_information_category = rgdef.rdf_code
  AND (
    rgp.chr_id = rgp.chr_id
    OR (
        NVL(p_copy_lines_yn, 'N') = 'Y'
        AND rgp.cle_id IS NOT NULL
       )
  );

    l_rrid_tab2 l_rrid_type;
    l_rrrgp_id_tab2 l_rrrgp_id_type;
    l_rrobject1_id1_tab2 l_rrobject1_id1_type;
    l_rrobject2_id1_tab2 l_rrobject2_id1_type;
    l_rrobject3_id1_tab2 l_rrobject3_id1_type;
    l_rrobject1_id2_tab2 l_rrobject1_id2_type;
    l_rrobject2_id2_tab2 l_rrobject2_id2_type;
    l_rrobject3_id2_tab2 l_rrobject3_id2_type;
    l_rrjtot_object1_code_tab2 l_rrjtot_object1_code_type;
    l_rrjtot_object2_code_tab2 l_rrjtot_object2_code_type;
    l_rrjtot_object3_code_tab2 l_rrjtot_object3_code_type;
    l_rrdnz_chr_id_tab2 l_rrdnz_chr_id_type;
    l_rrstd_template_yn_tab2 l_rrstd_template_yn_type;
    l_rrwarn_yn_tab2 l_rrwarn_yn_type;
    l_rrpriority_tab2 l_rrpriority_type;
    l_rrobject_version_number_tab2 l_rrobject_version_number_type;
    l_rrcreated_by_tab2 l_rrcreated_by_type;
    l_rrcreation_date_tab2 l_rrcreation_date_type;
    l_rrlast_updated_by_tab2 l_rrlast_updated_by_type;
    l_rrlast_update_date_tab2 l_rrlast_update_date_type;
    l_rrlast_update_login_tab2 l_rrlast_update_login_type;
    l_rrattribute_category_tab2 l_rrattribute_category_type;
    l_rrattribute1_tab2 l_rrattribute1_type;
    l_rrattribute2_tab2 l_rrattribute2_type;
    l_rrattribute3_tab2 l_rrattribute3_type;
    l_rrattribute4_tab2 l_rrattribute4_type;
    l_rrattribute5_tab2 l_rrattribute5_type;
    l_rrattribute6_tab2 l_rrattribute6_type;
    l_rrattribute7_tab2 l_rrattribute7_type;
    l_rrattribute8_tab2 l_rrattribute8_type;
    l_rrattribute9_tab2 l_rrattribute9_type;
    l_rrattribute10_tab2 l_rrattribute10_type;
    l_rrattribute11_tab2 l_rrattribute11_type;
    l_rrattribute12_tab2 l_rrattribute12_type;
    l_rrattribute13_tab2 l_rrattribute13_type;
    l_rrattribute14_tab2 l_rrattribute14_type;
    l_rrattribute15_tab2 l_rrattribute15_type;
    l_rrrule_information_cate_tab2 l_rrrule_information_cate_type;
    l_rrrule_information1_tab2 l_rrrule_information1_type;
    l_rrrule_information2_tab2 l_rrrule_information2_type;
    l_rrrule_information3_tab2 l_rrrule_information3_type;
    l_rrrule_information4_tab2 l_rrrule_information4_type;
    l_rrrule_information5_tab2 l_rrrule_information5_type;
    l_rrrule_information6_tab2 l_rrrule_information6_type;
    l_rrrule_information7_tab2 l_rrrule_information7_type;
    l_rrrule_information8_tab2 l_rrrule_information8_type;
    l_rrrule_information9_tab2 l_rrrule_information9_type;
    l_rrrule_information10_tab2 l_rrrule_information10_type;
    l_rrrule_information11_tab2 l_rrrule_information11_type;
    l_rrrule_information12_tab2 l_rrrule_information12_type;
    l_rrrule_information13_tab2 l_rrrule_information13_type;
    l_rrrule_information14_tab2 l_rrrule_information14_type;
    l_rrrule_information15_tab2 l_rrrule_information15_type;
    l_rrsecurity_group_id_tab2 l_rrsecurity_group_id_type;
    l_rrtemplate_yn_tab2 l_rrtemplate_yn_type;
    l_rrans_set_jtot_object_c_tab2 l_rrans_set_jtot_object_c_type;
    l_rrans_set_jtot_object_1_tab2 l_rrans_set_jtot_object_1_type;
    l_rrans_set_jtot_object_2_tab2 l_rrans_set_jtot_object_2_type;
    l_rrdisplay_sequence_tab2 l_rrdisplay_sequence_type;
    l_rrcomments_tab2 l_rrcomments_type;

    l_new_rgp_id NUMBER;
    l_new_id     NUMBER;

    l_return_status2 VARCHAR2(1);
    l_unsched_prin_stream_id NUMBER := NULL;
    l_unsched_loan_stream_id NUMBER := NULL;
    l_proceed_processing BOOLEAN := TRUE;
    l_prin_rule_id NUMBER := NULL;
    l_loan_rule_id NUMBER := NULL;
BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  NULL;
  okl_streams_util.get_dependent_stream_type (
       p_khr_id                => p_old_id,
       p_primary_sty_purpose   => 'RENT',
       p_dependent_sty_purpose => 'UNSCHEDULED_PRINCIPAL_PAYMENT',
       x_return_status	       => l_return_status2,
       x_dependent_sty_id      => l_unsched_prin_stream_id);
  IF (l_return_status2 <> OKC_API.G_RET_STS_SUCCESS) THEN
    l_unsched_prin_stream_id := NULL;
  END IF;

  okl_streams_util.get_dependent_stream_type (
       p_khr_id                => p_old_id,
       p_primary_sty_purpose   => 'RENT',
       p_dependent_sty_purpose => 'UNSCHEDULED_LOAN_PAYMENT',
       x_return_status	       => l_return_status2,
       x_dependent_sty_id      => l_unsched_loan_stream_id);
  IF (l_return_status2 <> OKC_API.G_RET_STS_SUCCESS) THEN
    l_unsched_loan_stream_id := NULL;
  END IF;

  --print('AKP:l_unsched_prin_stream_id=' || l_unsched_prin_stream_id);
  --print('AKP:l_unsched_loan_stream_id=' || l_unsched_loan_stream_id);
  OPEN c14(p_old_id);
  LOOP
    FETCH c14 bulk collect INTO
      l_rrid_tab2, l_rrrgp_id_tab2, l_rrobject1_id1_tab2,
      l_rrobject2_id1_tab2, l_rrobject3_id1_tab2, l_rrobject1_id2_tab2,
      l_rrobject2_id2_tab2, l_rrobject3_id2_tab2, l_rrjtot_object1_code_tab2,
      l_rrjtot_object2_code_tab2, l_rrjtot_object3_code_tab2, l_rrdnz_chr_id_tab2,
      l_rrstd_template_yn_tab2, l_rrwarn_yn_tab2, l_rrpriority_tab2,
      l_rrobject_version_number_tab2, l_rrcreated_by_tab2, l_rrcreation_date_tab2,
      l_rrlast_updated_by_tab2, l_rrlast_update_date_tab2, l_rrlast_update_login_tab2,
      l_rrattribute_category_tab2, l_rrattribute1_tab2, l_rrattribute2_tab2,
      l_rrattribute3_tab2, l_rrattribute4_tab2, l_rrattribute5_tab2,
      l_rrattribute6_tab2, l_rrattribute7_tab2, l_rrattribute8_tab2,
      l_rrattribute9_tab2, l_rrattribute10_tab2, l_rrattribute11_tab2,
      l_rrattribute12_tab2, l_rrattribute13_tab2, l_rrattribute14_tab2,
      l_rrattribute15_tab2, l_rrrule_information_cate_tab2, l_rrrule_information1_tab2,
      l_rrrule_information2_tab2, l_rrrule_information3_tab2, l_rrrule_information4_tab2,
      l_rrrule_information5_tab2, l_rrrule_information6_tab2, l_rrrule_information7_tab2,
      l_rrrule_information8_tab2, l_rrrule_information9_tab2, l_rrrule_information10_tab2,
      l_rrrule_information11_tab2, l_rrrule_information12_tab2, l_rrrule_information13_tab2,
      l_rrrule_information14_tab2, l_rrrule_information15_tab2, l_rrsecurity_group_id_tab2,
      l_rrtemplate_yn_tab2, l_rrans_set_jtot_object_c_tab2, l_rrans_set_jtot_object_1_tab2,
      l_rrans_set_jtot_object_2_tab2, l_rrdisplay_sequence_tab2, l_rrcomments_tab2
    limit G_BULK_SIZE;
    EXIT WHEN l_rrid_tab2.COUNT = 0;
    FOR i IN l_rrid_tab2.first..l_rrid_tab2.last
    LOOP

      l_proceed_processing := TRUE;
      IF p_trans_type not in ('CRB', 'CRL', 'CSP', 'CRV', 'ALI') THEN
        IF (l_rrobject1_id1_tab2(i) = to_char(l_unsched_prin_stream_id)) THEN
          l_proceed_processing := FALSE;
          l_prin_rule_id := l_rrid_tab2(i);
          --print('AKP:l_prin_rule_id=' || l_prin_rule_id);
        END IF;

        IF (l_rrobject1_id1_tab2(i) = to_char(l_unsched_loan_stream_id)) THEN
          l_proceed_processing := FALSE;
          l_loan_rule_id := l_rrid_tab2(i);
        END IF;

        IF (l_rrobject2_id1_tab2(i) = to_char(l_prin_rule_id)) THEN
          l_proceed_processing := FALSE;
        END IF;

        IF (l_rrobject2_id1_tab2(i) = to_char(l_loan_rule_id)) THEN
          l_proceed_processing := FALSE;
        END IF;

      END IF;

      /*IF (l_proceed_processing) THEN
      print('AKP: i=' || i || ': l_proceed_processing = TRUE');
      ELSE
      print('AKP: i=' || i || ': l_proceed_processing = FALSE');
      END IF;*/

      IF (l_proceed_processing) THEN
      -- Store old in tab3
      l_rrid_tab3(l_rules_b_counter) := l_rrid_tab2(i);

      l_rrid_tab(l_rules_b_counter) := l_rrid_tab2(i);
      -- Change id
      l_rrid_tab(l_rules_b_counter) := okc_p_util.raw_to_number(sys_guid());

      l_rrid_mapping_tab(l_rules_b_counter).old_id := l_rrid_tab3(l_rules_b_counter);
      l_rrid_mapping_tab(l_rules_b_counter).new_id := l_rrid_tab(l_rules_b_counter);

      l_rrrgp_id_tab(l_rules_b_counter) := l_rrrgp_id_tab2(i);
      -- Change rgp_id
      l_new_rgp_id := find_rid_mapping_id(l_rrrgp_id_tab(l_rules_b_counter));
      l_rrrgp_id_tab(l_rules_b_counter) := l_new_rgp_id;

      l_rrobject1_id1_tab(l_rules_b_counter) := l_rrobject1_id1_tab2(i);
      l_rrobject2_id1_tab(l_rules_b_counter) := l_rrobject2_id1_tab2(i);
      l_rrobject3_id1_tab(l_rules_b_counter) := l_rrobject3_id1_tab2(i);
      l_rrobject1_id2_tab(l_rules_b_counter) := l_rrobject1_id2_tab2(i);
      l_rrobject2_id2_tab(l_rules_b_counter) := l_rrobject2_id2_tab2(i);
      l_rrobject3_id2_tab(l_rules_b_counter) := l_rrobject3_id2_tab2(i);
      l_rrjtot_object1_code_tab(l_rules_b_counter) := l_rrjtot_object1_code_tab2(i);
      l_rrjtot_object2_code_tab(l_rules_b_counter) := l_rrjtot_object2_code_tab2(i);
      l_rrjtot_object3_code_tab(l_rules_b_counter) := l_rrjtot_object3_code_tab2(i);
      l_rrdnz_chr_id_tab(l_rules_b_counter) := l_rrdnz_chr_id_tab2(i);
      -- Change dnz_chr_id
      l_rrdnz_chr_id_tab(l_rules_b_counter) := p_new_id;

      l_rrstd_template_yn_tab(l_rules_b_counter) := l_rrstd_template_yn_tab2(i);
      l_rrwarn_yn_tab(l_rules_b_counter) := l_rrwarn_yn_tab2(i);
      l_rrpriority_tab(l_rules_b_counter) := l_rrpriority_tab2(i);
      l_rrobject_version_number_tab(l_rules_b_counter) := l_rrobject_version_number_tab2(i);
      l_rrcreated_by_tab(l_rules_b_counter) := l_rrcreated_by_tab2(i);
      l_rrcreation_date_tab(l_rules_b_counter) := l_rrcreation_date_tab2(i);
      l_rrlast_updated_by_tab(l_rules_b_counter) := l_rrlast_updated_by_tab2(i);
      l_rrlast_update_date_tab(l_rules_b_counter) := l_rrlast_update_date_tab2(i);
      l_rrlast_update_login_tab(l_rules_b_counter) := l_rrlast_update_login_tab2(i);
      l_rrattribute_category_tab(l_rules_b_counter) := l_rrattribute_category_tab2(i);
      l_rrattribute1_tab(l_rules_b_counter) := l_rrattribute1_tab2(i);
      l_rrattribute2_tab(l_rules_b_counter) := l_rrattribute2_tab2(i);
      l_rrattribute3_tab(l_rules_b_counter) := l_rrattribute3_tab2(i);
      l_rrattribute4_tab(l_rules_b_counter) := l_rrattribute4_tab2(i);
      l_rrattribute5_tab(l_rules_b_counter) := l_rrattribute5_tab2(i);
      l_rrattribute6_tab(l_rules_b_counter) := l_rrattribute6_tab2(i);
      l_rrattribute7_tab(l_rules_b_counter) := l_rrattribute7_tab2(i);
      l_rrattribute8_tab(l_rules_b_counter) := l_rrattribute8_tab2(i);
      l_rrattribute9_tab(l_rules_b_counter) := l_rrattribute9_tab2(i);
      l_rrattribute10_tab(l_rules_b_counter) := l_rrattribute10_tab2(i);
      l_rrattribute11_tab(l_rules_b_counter) := l_rrattribute11_tab2(i);
      l_rrattribute12_tab(l_rules_b_counter) := l_rrattribute12_tab2(i);
      l_rrattribute13_tab(l_rules_b_counter) := l_rrattribute13_tab2(i);
      l_rrattribute14_tab(l_rules_b_counter) := l_rrattribute14_tab2(i);
      l_rrattribute15_tab(l_rules_b_counter) := l_rrattribute15_tab2(i);
      l_rrrule_information_cate_tab(l_rules_b_counter) := l_rrrule_information_cate_tab2(i);
      l_rrrule_information1_tab(l_rules_b_counter) := l_rrrule_information1_tab2(i);
      --gboomina Bug 5362977 - Start
      -- Do not set Re-lease asset Flag to 'N' for Rebook and Re-lease copy
      -- contracts
      IF ( NVL(l_orig_system_source_code,OKL_API.G_MISS_CHAR) IN ('OKL_REBOOK','OKL_RELEASE'))
      THEN
        NULL;
      ELSE
        IF ( l_rrrule_information_cate_tab(l_rules_b_counter) = 'LARLES') THEN
          l_rrrule_information1_tab(l_rules_b_counter) := 'N';
        END IF;
      END IF;
      -- gboomina Bug 5362977 - End

      l_rrrule_information2_tab(l_rules_b_counter) := l_rrrule_information2_tab2(i);
      l_rrrule_information3_tab(l_rules_b_counter) := l_rrrule_information3_tab2(i);
      l_rrrule_information4_tab(l_rules_b_counter) := l_rrrule_information4_tab2(i);
      l_rrrule_information5_tab(l_rules_b_counter) := l_rrrule_information5_tab2(i);
      l_rrrule_information6_tab(l_rules_b_counter) := l_rrrule_information6_tab2(i);
      l_rrrule_information7_tab(l_rules_b_counter) := l_rrrule_information7_tab2(i);
      l_rrrule_information8_tab(l_rules_b_counter) := l_rrrule_information8_tab2(i);
      l_rrrule_information9_tab(l_rules_b_counter) := l_rrrule_information9_tab2(i);
      l_rrrule_information10_tab(l_rules_b_counter) := l_rrrule_information10_tab2(i);
      l_rrrule_information11_tab(l_rules_b_counter) := l_rrrule_information11_tab2(i);
      l_rrrule_information12_tab(l_rules_b_counter) := l_rrrule_information12_tab2(i);
      -- bug 6489689 veramach start
      IF (l_rrrule_information_cate_tab(l_rules_b_counter) = 'LASLL') THEN
        l_rrrule_information13_tab(l_rules_b_counter) := NULL;
      ELSE
        l_rrrule_information13_tab(l_rules_b_counter) := l_rrrule_information13_tab2(i);
      END IF;
      -- bug 6489689 veramach end
      l_rrrule_information14_tab(l_rules_b_counter) := l_rrrule_information14_tab2(i);
      l_rrrule_information15_tab(l_rules_b_counter) := l_rrrule_information15_tab2(i);
      l_rrsecurity_group_id_tab(l_rules_b_counter) := l_rrsecurity_group_id_tab2(i);
      l_rrtemplate_yn_tab(l_rules_b_counter) := l_rrtemplate_yn_tab2(i);
      l_rrans_set_jtot_object_c_tab(l_rules_b_counter) := l_rrans_set_jtot_object_c_tab2(i);
      l_rrans_set_jtot_object_1_tab(l_rules_b_counter) := l_rrans_set_jtot_object_1_tab2(i);
      l_rrans_set_jtot_object_2_tab(l_rules_b_counter) := l_rrans_set_jtot_object_2_tab2(i);
      l_rrdisplay_sequence_tab(l_rules_b_counter) := l_rrdisplay_sequence_tab2(i);
      l_rrcomments_tab(l_rules_b_counter) := l_rrcomments_tab2(i);

      l_rules_b_counter := l_rules_b_counter + 1;

      END IF; -- if proceed_processing
    END LOOP;
  END LOOP;
  CLOSE c14;

  IF (l_rules_b_counter > 1) THEN
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rules_b_counter='||l_rules_b_counter || ' l_rrid_tab.count='||l_rrid_tab.COUNT);
    END IF;
    sort_rrid_mapping_tab;
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sort_rrid_mapping_tab done...');
    END IF;
    -- Replace object1_id2
    FOR i IN l_rrid_tab.first..l_rrid_tab.last
    LOOP
       IF ((l_rrobject2_id1_tab(i) IS NOT NULL) AND
           --(l_rrobject2_id1_tab(i)  != '#' ) and
           (l_rrrule_information_cate_tab(i) = 'LASLL')) THEN
         BEGIN
         l_new_id := find_rrid_mapping_id(TO_NUMBER(l_rrobject2_id1_tab(i)));
         IF (l_new_id = -1) THEN
          IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ERROR : Mapping id not found for ' || l_rrobject2_id1_tab(i));
          END IF;
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
         END IF;
         l_rrobject2_id1_tab(i) := l_new_id;
         --print('object2_id1:l_new_id=' || l_new_id);
         EXCEPTION WHEN OTHERS THEN
           NULL;
           --print('l_rrobject2_id1_tab(i)=' || l_rrobject2_id1_tab(i));
         END;
       END IF;
    END LOOP;
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'replacing object1_id2 done...');
    END IF;

    forall i IN l_rrid_tab.first..l_rrid_tab.last
    INSERT INTO okc_rules_b (
     id, rgp_id, object1_id1,
     object2_id1, object3_id1, object1_id2,
     object2_id2, object3_id2, jtot_object1_code,
     jtot_object2_code, jtot_object3_code, dnz_chr_id,
     std_template_yn, warn_yn, priority,
     object_version_number, created_by, creation_date,
     last_updated_by, last_update_date, last_update_login,
     attribute_category, attribute1, attribute2,
     attribute3, attribute4, attribute5,
     attribute6, attribute7, attribute8,
     attribute9, attribute10, attribute11,
     attribute12, attribute13, attribute14,
     attribute15, rule_information_category, rule_information1,
     rule_information2, rule_information3, rule_information4,
     rule_information5, rule_information6, rule_information7,
     rule_information8, rule_information9, rule_information10,
     rule_information11, rule_information12, rule_information13,
     rule_information14, rule_information15, security_group_id,
     template_yn, ans_set_jtot_object_code, ans_set_jtot_object_id1,
     ans_set_jtot_object_id2, display_sequence, comments
    ) VALUES (
     l_rrid_tab(i), l_rrrgp_id_tab(i), l_rrobject1_id1_tab(i),
     l_rrobject2_id1_tab(i), l_rrobject3_id1_tab(i), l_rrobject1_id2_tab(i),
     l_rrobject2_id2_tab(i), l_rrobject3_id2_tab(i), l_rrjtot_object1_code_tab(i),
     l_rrjtot_object2_code_tab(i), l_rrjtot_object3_code_tab(i), l_rrdnz_chr_id_tab(i),
     l_rrstd_template_yn_tab(i), l_rrwarn_yn_tab(i), l_rrpriority_tab(i),
     1, l_created_by, SYSDATE,
     l_last_updated_by, SYSDATE, l_last_update_login,
     l_rrattribute_category_tab(i), l_rrattribute1_tab(i), l_rrattribute2_tab(i),
     l_rrattribute3_tab(i), l_rrattribute4_tab(i), l_rrattribute5_tab(i),
     l_rrattribute6_tab(i), l_rrattribute7_tab(i), l_rrattribute8_tab(i),
     l_rrattribute9_tab(i), l_rrattribute10_tab(i), l_rrattribute11_tab(i),
     l_rrattribute12_tab(i), l_rrattribute13_tab(i), l_rrattribute14_tab(i),
     l_rrattribute15_tab(i), l_rrrule_information_cate_tab(i), l_rrrule_information1_tab(i),
     l_rrrule_information2_tab(i), l_rrrule_information3_tab(i), l_rrrule_information4_tab(i),
     l_rrrule_information5_tab(i), l_rrrule_information6_tab(i), l_rrrule_information7_tab(i),
     l_rrrule_information8_tab(i), l_rrrule_information9_tab(i), l_rrrule_information10_tab(i),
     l_rrrule_information11_tab(i), l_rrrule_information12_tab(i), l_rrrule_information13_tab(i),
     l_rrrule_information14_tab(i), l_rrrule_information15_tab(i), l_rrsecurity_group_id_tab(i),
     l_rrtemplate_yn_tab(i), l_rrans_set_jtot_object_c_tab(i), l_rrans_set_jtot_object_1_tab(i),
     l_rrans_set_jtot_object_2_tab(i), l_rrdisplay_sequence_tab(i), l_rrcomments_tab(i)
    );
    -- AKP: Special processing link_slh_sll ???
    FOR i IN l_rrid_tab.first..l_rrid_tab.last
    LOOP
      IF ( i = l_rrid_tab.last) THEN
        insert_okc_rules_tl(l_rrid_tab3(i),l_rrid_tab(i), 'Y');
      ELSE
        insert_okc_rules_tl(l_rrid_tab3(i),l_rrid_tab(i), 'N');
      END IF;
    END LOOP;

  END IF;

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'insert_okc_rules_b');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing insert_okc_rules_b:l_rrid_tab.count=' || l_rrid_tab.COUNT || ' ...');
  END IF;

  IF (l_rrid_tab.COUNT > 0) THEN
  FOR i IN l_rrid_tab.first..l_rrid_tab.last
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrid_tab('||i||')=' || l_rrid_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrrgp_id_tab('||i||')=' || l_rrrgp_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrobject1_id1_tab('||i||')=' || l_rrobject1_id1_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrobject2_id1_tab('||i||')=' || l_rrobject2_id1_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrobject3_id1_tab('||i||')=' || l_rrobject3_id1_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrobject1_id2_tab('||i||')=' || l_rrobject1_id2_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrobject2_id2_tab('||i||')=' || l_rrobject2_id2_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrobject3_id2_tab('||i||')=' || l_rrobject3_id2_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrjtot_object1_code_tab('||i||')=' || l_rrjtot_object1_code_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrjtot_object2_code_tab('||i||')=' || l_rrjtot_object2_code_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrjtot_object3_code_tab('||i||')=' || l_rrjtot_object3_code_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrdnz_chr_id_tab('||i||')=' || l_rrdnz_chr_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrstd_template_yn_tab('||i||')=' || l_rrstd_template_yn_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrwarn_yn_tab('||i||')=' || l_rrwarn_yn_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrpriority_tab('||i||')=' || l_rrpriority_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrattribute_category_tab('||i||')=' || l_rrattribute_category_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrattribute1_tab('||i||')=' || l_rrattribute1_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrattribute2_tab('||i||')=' || l_rrattribute2_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrattribute3_tab('||i||')=' || l_rrattribute3_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrattribute4_tab('||i||')=' || l_rrattribute4_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrattribute5_tab('||i||')=' || l_rrattribute5_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrattribute6_tab('||i||')=' || l_rrattribute6_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrattribute7_tab('||i||')=' || l_rrattribute7_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrattribute8_tab('||i||')=' || l_rrattribute8_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrattribute9_tab('||i||')=' || l_rrattribute9_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrattribute10_tab('||i||')=' || l_rrattribute10_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrattribute11_tab('||i||')=' || l_rrattribute11_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrattribute12_tab('||i||')=' || l_rrattribute12_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrattribute13_tab('||i||')=' || l_rrattribute13_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrattribute14_tab('||i||')=' || l_rrattribute14_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrattribute15_tab('||i||')=' || l_rrattribute15_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrrule_information_cate_tab('||i||')=' || l_rrrule_information_cate_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrrule_information1_tab('||i||')=' || l_rrrule_information1_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrrule_information2_tab('||i||')=' || l_rrrule_information2_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrrule_information3_tab('||i||')=' || l_rrrule_information3_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrrule_information4_tab('||i||')=' || l_rrrule_information4_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrrule_information5_tab('||i||')=' || l_rrrule_information5_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrrule_information6_tab('||i||')=' || l_rrrule_information6_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrrule_information7_tab('||i||')=' || l_rrrule_information7_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrrule_information8_tab('||i||')=' || l_rrrule_information8_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrrule_information9_tab('||i||')=' || l_rrrule_information9_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrrule_information10_tab('||i||')=' || l_rrrule_information10_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrrule_information11_tab('||i||')=' || l_rrrule_information11_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrrule_information12_tab('||i||')=' || l_rrrule_information12_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrrule_information13_tab('||i||')=' || l_rrrule_information13_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrrule_information14_tab('||i||')=' || l_rrrule_information14_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrrule_information15_tab('||i||')=' || l_rrrule_information15_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrsecurity_group_id_tab('||i||')=' || l_rrsecurity_group_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrtemplate_yn_tab('||i||')=' || l_rrtemplate_yn_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrans_set_jtot_object_c_tab('||i||')=' || l_rrans_set_jtot_object_c_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrans_set_jtot_object_1_tab('||i||')=' || l_rrans_set_jtot_object_1_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrans_set_jtot_object_2_tab('||i||')=' || l_rrans_set_jtot_object_2_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrdisplay_sequence_tab('||i||')=' || l_rrdisplay_sequence_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrcomments_tab('||i||')=' || l_rrcomments_tab(i));
    END IF;
  END LOOP;
  END IF;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END; /* insert_okc_rules_b */

FUNCTION find_tid_mapping_id(p_id IN VARCHAR2) RETURN NUMBER IS
hi NUMBER;
lo NUMBER;
m NUMBER;
BEGIN
  lo := 1;
  hi := l_tid_counter - 1;
  WHILE (lo <= hi) LOOP
    m := FLOOR((hi + lo)/2);
    IF (l_tid_mapping_tab(m).rgd_code = p_id) THEN
      RETURN l_tid_mapping_tab(m).id;
    ELSIF (l_tid_mapping_tab(m).rgd_code > p_id) THEN
      hi := m - 1;
    ELSE
      lo := m + 1;
    END IF;
  END LOOP;
  RETURN -1;
END;  /* find_tid_mapping_id */

PROCEDURE sort_tid_mapping_tab IS
  TYPE numtabtype IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
  --a numtabtype;
  l_stack numtabtype;
  l_stack_index NUMBER := 0;
  N NUMBER;
  R NUMBER;
  L NUMBER;
  P NUMBER;
  W VARCHAR2(30);
  W2 NUMBER;
  X VARCHAR2(30);
  I NUMBER;
  J NUMBER;
BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  NULL;

  N := l_tid_counter - 1;
  IF (N < 2) THEN
    RETURN;
  END IF;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := 1;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := N;

  --dbms_output.put_line('l_stack_index=' || l_stack_index);
  WHILE l_stack_index > 0
  LOOP
    R := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    L := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    --dbms_output.put_line('Pop: l_stack_index=' || l_stack_index);
    WHILE 1=1
    LOOP -- loop until L >= R
      I := L;
      J := R;
      P := FLOOR((L+R)/2);
      --if (a(L) > a(P)) then
      IF (l_tid_mapping_tab(L).rgd_code > l_tid_mapping_tab(P).rgd_code)
      THEN
        W := l_tid_mapping_tab(L).rgd_code;
        W2 := l_tid_mapping_tab(L).id;
        l_tid_mapping_tab(L).rgd_code :=l_tid_mapping_tab(P).rgd_code;
        l_tid_mapping_tab(L).id :=l_tid_mapping_tab(P).id;
        l_tid_mapping_tab(P).rgd_code := W;
        l_tid_mapping_tab(P).id := W2;
      END IF;
      --if (a(L) > a(R)) then
      IF (l_tid_mapping_tab(L).rgd_code > l_tid_mapping_tab(R).rgd_code)
      THEN
        W := l_tid_mapping_tab(L).rgd_code;
        W2 := l_tid_mapping_tab(L).id;
        l_tid_mapping_tab(L).rgd_code :=l_tid_mapping_tab(R).rgd_code;
        l_tid_mapping_tab(L).id :=l_tid_mapping_tab(R).id;
        l_tid_mapping_tab(R).rgd_code := W;
        l_tid_mapping_tab(R).id := W2;
      END IF;
      --if (a(P) > a(R)) then
      IF (l_tid_mapping_tab(P).rgd_code > l_tid_mapping_tab(R).rgd_code)
      THEN
        W := l_tid_mapping_tab(P).rgd_code;
        W2 := l_tid_mapping_tab(P).id;
        l_tid_mapping_tab(P).rgd_code :=l_tid_mapping_tab(R).rgd_code;
        l_tid_mapping_tab(P).id :=l_tid_mapping_tab(R).id;
        l_tid_mapping_tab(R).rgd_code := W;
        l_tid_mapping_tab(R).id := W2;
      END IF;
      --X := a(P);
      X := l_tid_mapping_tab(P).rgd_code;
      WHILE 1=1
      LOOP    -- until I > J
        --while (a(I) < X) loop
        WHILE (l_tid_mapping_tab(I).rgd_code < X) LOOP
          I := I + 1;
        END LOOP;
        WHILE (X < l_tid_mapping_tab(J).rgd_code) LOOP
          J := J - 1;
        END LOOP;
        IF (I <= J) THEN
          W := l_tid_mapping_tab(I).rgd_code;
          W2 := l_tid_mapping_tab(I).id;
          l_tid_mapping_tab(I).rgd_code :=l_tid_mapping_tab(J).rgd_code;
          l_tid_mapping_tab(I).id :=l_tid_mapping_tab(J).id;
          l_tid_mapping_tab(J).rgd_code := W;
          l_tid_mapping_tab(J).id := W2;
          I := I + 1;
          J := J - 1;
        END IF;
        EXIT WHEN I > J;
      END LOOP;
      IF (J - L < R - I) THEN
        IF (I < R) THEN
          --push(I); push(R);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := I;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := R;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        R := J;
      ELSE
        IF (L < J) THEN
          --push(L); push(J);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := L;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := J;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        L := I;
      END IF;

      EXIT WHEN (L >= R);
    END LOOP;
  END LOOP;

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'sort_tid_mapping_tab');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing sort_tid_mapping_tab:l_tid_mapping_tab N=' || N || ' ...');
  END IF;

  --print array
  FOR i IN 1..N
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tid_mapping_tab('||i||')=' || l_tid_mapping_tab(i).rgd_code || ':' || l_tid_mapping_tab(i).id);
    END IF;
  END LOOP;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;  /* sort_tid_mapping_tab */

PROCEDURE insert_okc_rule_groups (p_old_id IN okc_k_headers_b.id%TYPE,
                                  p_new_id IN okc_k_headers_b.id%TYPE) IS
CURSOR c12(p_id NUMBER) IS
SELECT
     id, rgd_code, chr_id,
     cle_id, dnz_chr_id, parent_rgp_id,
     sat_code, object_version_number, rgp_type,
     created_by, creation_date, last_updated_by,
     last_update_date, last_update_login, attribute_category,
     attribute1, attribute2, attribute3,
     attribute4, attribute5, attribute6,
     attribute7, attribute8, attribute9,
     attribute10, attribute11, attribute12,
     attribute13, attribute14, attribute15,
     security_group_id
FROM okc_rule_groups_b
WHERE dnz_chr_id = p_id
  AND (
    chr_id = chr_id
    OR (
        NVL(p_copy_lines_yn, 'N') = 'Y'
        AND cle_id IS NOT NULL
       )
  );

    l_rid_tab2 l_rid_type;
    l_rrgd_code_tab2 l_rrgd_code_type;
    l_rchr_id_tab2 l_rchr_id_type;
    l_rcle_id_tab2 l_rcle_id_type;
    l_rdnz_chr_id_tab2 l_rdnz_chr_id_type;
    l_rparent_rgp_id_tab2 l_rparent_rgp_id_type;
    l_rsat_code_tab2 l_rsat_code_type;
    l_robject_version_number_tab2 l_robject_version_number_type;
    l_rrgp_type_tab2 l_rrgp_type_type;
    l_rcreated_by_tab2 l_rcreated_by_type;
    l_rcreation_date_tab2 l_rcreation_date_type;
    l_rlast_updated_by_tab2 l_rlast_updated_by_type;
    l_rlast_update_date_tab2 l_rlast_update_date_type;
    l_rlast_update_login_tab2 l_rlast_update_login_type;
    l_rattribute_category_tab2 l_rattribute_category_type;
    l_rattribute1_tab2 l_rattribute1_type;
    l_rattribute2_tab2 l_rattribute2_type;
    l_rattribute3_tab2 l_rattribute3_type;
    l_rattribute4_tab2 l_rattribute4_type;
    l_rattribute5_tab2 l_rattribute5_type;
    l_rattribute6_tab2 l_rattribute6_type;
    l_rattribute7_tab2 l_rattribute7_type;
    l_rattribute8_tab2 l_rattribute8_type;
    l_rattribute9_tab2 l_rattribute9_type;
    l_rattribute10_tab2 l_rattribute10_type;
    l_rattribute11_tab2 l_rattribute11_type;
    l_rattribute12_tab2 l_rattribute12_type;
    l_rattribute13_tab2 l_rattribute13_type;
    l_rattribute14_tab2 l_rattribute14_type;
    l_rattribute15_tab2 l_rattribute15_type;
    l_rsecurity_group_id_tab2 l_rsecurity_group_id_type;

    l_new_cle_id NUMBER;
BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  NULL;
  OPEN c12(p_old_id);
  LOOP
    FETCH c12 bulk collect INTO
     l_rid_tab2, l_rrgd_code_tab2, l_rchr_id_tab2,
     l_rcle_id_tab2, l_rdnz_chr_id_tab2, l_rparent_rgp_id_tab2,
     l_rsat_code_tab2, l_robject_version_number_tab2, l_rrgp_type_tab2,
     l_rcreated_by_tab2, l_rcreation_date_tab2, l_rlast_updated_by_tab2,
     l_rlast_update_date_tab2, l_rlast_update_login_tab2, l_rattribute_category_tab2,
     l_rattribute1_tab2, l_rattribute2_tab2, l_rattribute3_tab2,
     l_rattribute4_tab2, l_rattribute5_tab2, l_rattribute6_tab2,
     l_rattribute7_tab2, l_rattribute8_tab2, l_rattribute9_tab2,
     l_rattribute10_tab2, l_rattribute11_tab2, l_rattribute12_tab2,
     l_rattribute13_tab2, l_rattribute14_tab2, l_rattribute15_tab2,
     l_rsecurity_group_id_tab2
    limit G_BULK_SIZE;
    EXIT WHEN l_rid_tab2.COUNT = 0;
    FOR i IN l_rid_tab2.first..l_rid_tab2.last
    LOOP

      l_rid_tab(l_rule_groups_b_counter) := l_rid_tab2(i);
      -- Store old value in tab3
      l_rid_tab3(l_rule_groups_b_counter) := l_rid_tab2(i);
      -- Change id
      l_rid_tab(l_rule_groups_b_counter) :=okc_p_util.raw_to_number(sys_guid());

      l_rid_mapping_tab(l_rule_groups_b_counter).old_id := l_rid_tab3(l_rule_groups_b_counter);
      l_rid_mapping_tab(l_rule_groups_b_counter).new_id := l_rid_tab(l_rule_groups_b_counter);

      l_rrgd_code_tab(l_rule_groups_b_counter) := l_rrgd_code_tab2(i);
      l_rchr_id_tab(l_rule_groups_b_counter) := l_rchr_id_tab2(i);
      -- Change chr_id
      IF (l_rchr_id_tab(l_rule_groups_b_counter) IS NOT NULL) THEN
        l_rchr_id_tab(l_rule_groups_b_counter) := p_new_id;
      END IF;

      l_rcle_id_tab(l_rule_groups_b_counter) := l_rcle_id_tab2(i);
      -- Change cle_id
      IF (l_rcle_id_tab(l_rule_groups_b_counter) IS NOT NULL) THEN
        l_new_cle_id := find_mapping_id(l_rcle_id_tab(l_rule_groups_b_counter));
        IF (l_new_cle_id = -1) THEN
          IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ERROR : Mapping id not found for ' || l_rcle_id_tab(l_rule_groups_b_counter));
          END IF;
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        END IF;
        l_rcle_id_tab(l_rule_groups_b_counter) := l_new_cle_id;
      END IF;

      l_rdnz_chr_id_tab(l_rule_groups_b_counter) := l_rdnz_chr_id_tab2(i);
      -- Change dnz_chr_id
      IF (l_rdnz_chr_id_tab(l_rule_groups_b_counter) IS NOT NULL) THEN
        l_rdnz_chr_id_tab(l_rule_groups_b_counter) := p_new_id;
      END IF;

      -- Store terms id for business event processing
      IF (l_rcle_id_tab(l_rule_groups_b_counter) IS NULL) THEN
        l_tid_mapping_tab(l_tid_counter).rgd_code := l_rrgd_code_tab(l_rule_groups_b_counter);
        l_tid_mapping_tab(l_tid_counter).id := l_rid_tab(l_rule_groups_b_counter);
        l_tid_counter := l_tid_counter + 1;
      END IF;

      l_rparent_rgp_id_tab(l_rule_groups_b_counter) := l_rparent_rgp_id_tab2(i);
      -- Change parent_rgp_id ??? AKP

      l_rsat_code_tab(l_rule_groups_b_counter) := l_rsat_code_tab2(i);
      l_robject_version_number_tab(l_rule_groups_b_counter) := l_robject_version_number_tab2(i);
      l_rrgp_type_tab(l_rule_groups_b_counter) := l_rrgp_type_tab2(i);
      l_rcreated_by_tab(l_rule_groups_b_counter) := l_rcreated_by_tab2(i);
      l_rcreation_date_tab(l_rule_groups_b_counter) := l_rcreation_date_tab2(i);
      l_rlast_updated_by_tab(l_rule_groups_b_counter) := l_rlast_updated_by_tab2(i);
      l_rlast_update_date_tab(l_rule_groups_b_counter) := l_rlast_update_date_tab2(i);
      l_rlast_update_login_tab(l_rule_groups_b_counter) := l_rlast_update_login_tab2(i);
      l_rattribute_category_tab(l_rule_groups_b_counter) := l_rattribute_category_tab2(i);
      l_rattribute1_tab(l_rule_groups_b_counter) := l_rattribute1_tab2(i);
      l_rattribute2_tab(l_rule_groups_b_counter) := l_rattribute2_tab2(i);
      l_rattribute3_tab(l_rule_groups_b_counter) := l_rattribute3_tab2(i);
      l_rattribute4_tab(l_rule_groups_b_counter) := l_rattribute4_tab2(i);
      l_rattribute5_tab(l_rule_groups_b_counter) := l_rattribute5_tab2(i);
      l_rattribute6_tab(l_rule_groups_b_counter) := l_rattribute6_tab2(i);
      l_rattribute7_tab(l_rule_groups_b_counter) := l_rattribute7_tab2(i);
      l_rattribute8_tab(l_rule_groups_b_counter) := l_rattribute8_tab2(i);
      l_rattribute9_tab(l_rule_groups_b_counter) := l_rattribute9_tab2(i);
      l_rattribute10_tab(l_rule_groups_b_counter) := l_rattribute10_tab2(i);
      l_rattribute11_tab(l_rule_groups_b_counter) := l_rattribute11_tab2(i);
      l_rattribute12_tab(l_rule_groups_b_counter) := l_rattribute12_tab2(i);
      l_rattribute13_tab(l_rule_groups_b_counter) := l_rattribute13_tab2(i);
      l_rattribute14_tab(l_rule_groups_b_counter) := l_rattribute14_tab2(i);
      l_rattribute15_tab(l_rule_groups_b_counter) := l_rattribute15_tab2(i);
      l_rsecurity_group_id_tab(l_rule_groups_b_counter) := l_rsecurity_group_id_tab2(i);

      l_rule_groups_b_counter := l_rule_groups_b_counter + 1;
    END LOOP;
  END LOOP;
  CLOSE c12;
  sort_tid_mapping_tab;

  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rule_groups_b_counter='||l_rule_groups_b_counter || ' l_rid_tab.count=' || l_rid_tab.COUNT);
  END IF;
  IF (l_rule_groups_b_counter > 1) THEN
    sort_rid_mapping_tab;

    forall i IN l_rid_tab.first..l_rid_tab.last
    INSERT INTO okc_rule_groups_b (
     id, rgd_code, chr_id,
     cle_id, dnz_chr_id, parent_rgp_id,
     sat_code, object_version_number, rgp_type,
     created_by, creation_date, last_updated_by,
     last_update_date, last_update_login, attribute_category,
     attribute1, attribute2, attribute3,
     attribute4, attribute5, attribute6,
     attribute7, attribute8, attribute9,
     attribute10, attribute11, attribute12,
     attribute13, attribute14, attribute15,
     security_group_id
    ) VALUES (
     l_rid_tab(i), l_rrgd_code_tab(i), l_rchr_id_tab(i),
     l_rcle_id_tab(i), l_rdnz_chr_id_tab(i), l_rparent_rgp_id_tab(i),
     l_rsat_code_tab(i), 1, l_rrgp_type_tab(i),
     l_created_by, SYSDATE, l_last_updated_by,
     SYSDATE, l_last_update_login, l_rattribute_category_tab(i),
     l_rattribute1_tab(i), l_rattribute2_tab(i), l_rattribute3_tab(i),
     l_rattribute4_tab(i), l_rattribute5_tab(i), l_rattribute6_tab(i),
     l_rattribute7_tab(i), l_rattribute8_tab(i), l_rattribute9_tab(i),
     l_rattribute10_tab(i), l_rattribute11_tab(i), l_rattribute12_tab(i),
     l_rattribute13_tab(i), l_rattribute14_tab(i), l_rattribute15_tab(i),
     l_rsecurity_group_id_tab(i)
    );
   FOR i IN l_rid_tab.first..l_rid_tab.last
   LOOP
     IF (i = l_rid_tab.last) THEN
       prepare_rule_groups_tl(l_rid_tab3(i), l_rid_tab(i), 'Y');
     ELSE
       prepare_rule_groups_tl(l_rid_tab3(i), l_rid_tab(i), 'N');
     END IF;
   END LOOP;

  l_message := 'OKL_NEW_COPY_RUL_ERROR';
  insert_okc_rules_b(p_chr_id, l_copied_id);

  END IF;

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'insert_okc_rule_groups');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing insert_okc_rule_groups:l_rid_tab.count=' || l_rid_tab.COUNT || ' ...');
  END IF;
  IF (l_rid_tab.COUNT > 0) THEN
  FOR i IN l_rid_tab.first..l_rid_tab.last
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rid_tab('||i||')=' || l_rid_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrgd_code_tab('||i||')=' || l_rrgd_code_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rchr_id_tab('||i||')=' || l_rchr_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rcle_id_tab('||i||')=' || l_rcle_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rdnz_chr_id_tab('||i||')=' || l_rdnz_chr_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rparent_rgp_id_tab('||i||')=' || l_rparent_rgp_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rsat_code_tab('||i||')=' || l_rsat_code_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rrgp_type_tab('||i||')=' || l_rrgp_type_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rattribute_category_tab('||i||')=' || l_rattribute_category_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rattribute1_tab('||i||')=' || l_rattribute1_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rattribute2_tab('||i||')=' || l_rattribute2_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rattribute3_tab('||i||')=' || l_rattribute3_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rattribute4_tab('||i||')=' || l_rattribute4_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rattribute5_tab('||i||')=' || l_rattribute5_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rattribute6_tab('||i||')=' || l_rattribute6_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rattribute7_tab('||i||')=' || l_rattribute7_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rattribute8_tab('||i||')=' || l_rattribute8_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rattribute9_tab('||i||')=' || l_rattribute9_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rattribute10_tab('||i||')=' || l_rattribute10_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rattribute11_tab('||i||')=' || l_rattribute11_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rattribute12_tab('||i||')=' || l_rattribute12_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rattribute13_tab('||i||')=' || l_rattribute13_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rattribute14_tab('||i||')=' || l_rattribute14_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rattribute15_tab('||i||')=' || l_rattribute15_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rsecurity_group_id_tab('||i||')=' || l_rsecurity_group_id_tab(i));
    END IF;
  END LOOP;
  END IF;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;  /* insert_okc_rule_groups */

FUNCTION find_oid_mapping_id(p_id IN NUMBER) RETURN VARCHAR2 IS
hi NUMBER;
lo NUMBER;
m NUMBER;
p VARCHAR2(2) := '-1';
BEGIN
  lo := 1;
  hi := l_items_counter - 1;
  WHILE (lo <= hi) LOOP
    m := FLOOR((hi + lo)/2);
    IF (l_oid_mapping_tab(m).cle_id = p_id) THEN
      RETURN l_oid_mapping_tab(m).object1_id1;
    ELSIF (l_oid_mapping_tab(m).cle_id > p_id) THEN
      hi := m - 1;
    ELSE
      lo := m + 1;
    END IF;
  END LOOP;
  RETURN p;
END;  /* find_oid_mapping_id */

PROCEDURE sort_oid_mapping_tab IS
  TYPE numtabtype IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
  --a numtabtype;
  l_stack numtabtype;
  l_stack_index NUMBER := 0;
  N NUMBER;
  R NUMBER;
  L NUMBER;
  P NUMBER;

  W NUMBER;
  W2 VARCHAR2(150);
  X NUMBER;
  I NUMBER;
  J NUMBER;
BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  NULL;

  N := l_items_counter - 1;
  IF (N < 2) THEN
    RETURN;
  END IF;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := 1;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := N;

  --dbms_output.put_line('l_stack_index=' || l_stack_index);
  WHILE l_stack_index > 0
  LOOP
    R := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    L := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    --dbms_output.put_line('Pop: l_stack_index=' || l_stack_index);
    WHILE 1=1
    LOOP -- loop until L >= R
      I := L;
      J := R;
      P := FLOOR((L+R)/2);
      --if (a(L) > a(P)) then
      IF (l_oid_mapping_tab(L).cle_id > l_oid_mapping_tab(P).cle_id)
      THEN
        W := l_oid_mapping_tab(L).cle_id;
        W2 := l_oid_mapping_tab(L).object1_id1;
        l_oid_mapping_tab(L).cle_id :=l_oid_mapping_tab(P).cle_id;
        l_oid_mapping_tab(L).object1_id1 :=l_oid_mapping_tab(P).object1_id1;
        l_oid_mapping_tab(P).cle_id := W;
        l_oid_mapping_tab(P).object1_id1 := W2;
      END IF;
      --if (a(L) > a(R)) then
      IF (l_oid_mapping_tab(L).cle_id > l_oid_mapping_tab(R).cle_id)
      THEN
        W := l_oid_mapping_tab(L).cle_id;
        W2 := l_oid_mapping_tab(L).object1_id1;
        l_oid_mapping_tab(L).cle_id :=l_oid_mapping_tab(R).cle_id;
        l_oid_mapping_tab(L).object1_id1 :=l_oid_mapping_tab(R).object1_id1;
        l_oid_mapping_tab(R).cle_id := W;
        l_oid_mapping_tab(R).object1_id1 := W2;
      END IF;
      --if (a(P) > a(R)) then
      IF (l_oid_mapping_tab(P).cle_id > l_oid_mapping_tab(R).cle_id)
      THEN
        W := l_oid_mapping_tab(P).cle_id;
        W2 := l_oid_mapping_tab(P).object1_id1;
        l_oid_mapping_tab(P).cle_id :=l_oid_mapping_tab(R).cle_id;
        l_oid_mapping_tab(P).object1_id1 :=l_oid_mapping_tab(R).object1_id1;
        l_oid_mapping_tab(R).cle_id := W;
        l_oid_mapping_tab(R).object1_id1 := W2;
      END IF;
      --X := a(P);
      X := l_oid_mapping_tab(P).cle_id;
      WHILE 1=1
      LOOP    -- until I > J
        --while (a(I) < X) loop
        WHILE (l_oid_mapping_tab(I).cle_id < X) LOOP
          I := I + 1;
        END LOOP;
        WHILE (X < l_oid_mapping_tab(J).cle_id) LOOP
          J := J - 1;
        END LOOP;
        IF (I <= J) THEN
          W := l_oid_mapping_tab(I).cle_id;
          W2 := l_oid_mapping_tab(I).object1_id1;
          l_oid_mapping_tab(I).cle_id :=l_oid_mapping_tab(J).cle_id;
          l_oid_mapping_tab(I).object1_id1 :=l_oid_mapping_tab(J).object1_id1;
          l_oid_mapping_tab(J).cle_id := W;
          l_oid_mapping_tab(J).object1_id1 := W2;
          I := I + 1;
          J := J - 1;
        END IF;
        EXIT WHEN I > J;
      END LOOP;
      IF (J - L < R - I) THEN
        IF (I < R) THEN
          --push(I); push(R);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := I;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := R;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        R := J;
      ELSE
        IF (L < J) THEN
          --push(L); push(J);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := L;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := J;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        L := I;
      END IF;

      EXIT WHEN (L >= R);
    END LOOP;
  END LOOP;

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'sort_oid_mapping_tab');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing sort_oid_mapping_tab:l_oid_mapping_tab N=' || N || ' ...');
  END IF;

  --print array
  FOR i IN 1..N
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_oid_mapping_tab('||i||')=' || l_oid_mapping_tab(i).cle_id || ':' || l_oid_mapping_tab(i).object1_id1);
    END IF;
  END LOOP;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;  /* sort_oid_mapping_tab */

FUNCTION find_okc_k_items_rec(p_id IN NUMBER) RETURN l_okc_k_items_rec_type IS
hi NUMBER;
lo NUMBER;
m NUMBER;
l_dummy_rec l_okc_k_items_rec_type;
BEGIN
  lo := 1;
  hi := l_okc_k_items_rec_counter - 1;
  WHILE (lo <= hi) LOOP
    m := FLOOR((hi + lo)/2);
    IF (l_okc_k_items_rec(m).id = p_id) THEN
      RETURN l_okc_k_items_rec(m);
    ELSIF (l_okc_k_items_rec(m).id > p_id) THEN
      hi := m - 1;
    ELSE
      lo := m + 1;
    END IF;
  END LOOP;
  l_dummy_rec.number_of_items := OKC_API.G_MISS_NUM;
  RETURN l_dummy_rec;
END;  /* find_okc_k_items_rec */

PROCEDURE sort_okc_k_items_rec IS
  TYPE numtabtype IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
  --a numtabtype;
  l_stack numtabtype;
  l_stack_index NUMBER := 0;
  N NUMBER;
  R NUMBER;
  L NUMBER;
  P NUMBER;
  W NUMBER;
  W2 NUMBER;
  W3 VARCHAR2(40);
  W4 VARCHAR2(200);
  X NUMBER;
  I NUMBER;
  J NUMBER;
BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  NULL;

  N := l_okc_k_items_rec_counter - 1;
  IF (N < 2) THEN
    RETURN;
  END IF;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := 1;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := N;

  --dbms_output.put_line('l_stack_index=' || l_stack_index);
  WHILE l_stack_index > 0
  LOOP
    R := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    L := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    --dbms_output.put_line('Pop: l_stack_index=' || l_stack_index);
    WHILE 1=1
    LOOP -- loop until L >= R
      I := L;
      J := R;
      P := FLOOR((L+R)/2);
      --if (a(L) > a(P)) then
      IF (l_okc_k_items_rec(L).id > l_okc_k_items_rec(P).id)
      THEN
        W := l_okc_k_items_rec(L).id;
        W2 := l_okc_k_items_rec(L).number_of_items;
        W3 := l_okc_k_items_rec(L).object1_id1;
        W4 := l_okc_k_items_rec(L).object1_id2;
        l_okc_k_items_rec(L).id :=l_okc_k_items_rec(P).id;
        l_okc_k_items_rec(L).number_of_items :=l_okc_k_items_rec(P).number_of_items;
        l_okc_k_items_rec(L).object1_id1 :=l_okc_k_items_rec(P).object1_id1;
        l_okc_k_items_rec(L).object1_id2 :=l_okc_k_items_rec(P).object1_id2;
        l_okc_k_items_rec(P).id := W;
        l_okc_k_items_rec(P).number_of_items := W2;
        l_okc_k_items_rec(P).object1_id1 := W3;
        l_okc_k_items_rec(P).object1_id2 := W4;
      END IF;
      --if (a(L) > a(R)) then
      IF (l_okc_k_items_rec(L).id > l_okc_k_items_rec(R).id)
      THEN
        W := l_okc_k_items_rec(L).id;
        W2 := l_okc_k_items_rec(L).number_of_items;
        W3 := l_okc_k_items_rec(L).object1_id1;
        W4 := l_okc_k_items_rec(L).object1_id2;
        l_okc_k_items_rec(L).id :=l_okc_k_items_rec(R).id;
        l_okc_k_items_rec(L).number_of_items :=l_okc_k_items_rec(R).number_of_items;
        l_okc_k_items_rec(L).object1_id1 :=l_okc_k_items_rec(R).object1_id1;
        l_okc_k_items_rec(L).object1_id2 :=l_okc_k_items_rec(R).object1_id2;
        l_okc_k_items_rec(R).id := W;
        l_okc_k_items_rec(R).number_of_items := W2;
        l_okc_k_items_rec(R).object1_id1 := W3;
        l_okc_k_items_rec(R).object1_id2 := W4;
      END IF;
      --if (a(P) > a(R)) then
      IF (l_okc_k_items_rec(P).id > l_okc_k_items_rec(R).id)
      THEN
        W := l_okc_k_items_rec(P).id;
        W2 := l_okc_k_items_rec(P).number_of_items;
        W3 := l_okc_k_items_rec(P).object1_id1;
        W4 := l_okc_k_items_rec(P).object1_id2;
        l_okc_k_items_rec(P).id :=l_okc_k_items_rec(R).id;
        l_okc_k_items_rec(P).number_of_items :=l_okc_k_items_rec(R).number_of_items;
        l_okc_k_items_rec(P).object1_id1 :=l_okc_k_items_rec(R).object1_id1;
        l_okc_k_items_rec(P).object1_id2 :=l_okc_k_items_rec(R).object1_id2;
        l_okc_k_items_rec(R).id := W;
        l_okc_k_items_rec(R).number_of_items := W2;
        l_okc_k_items_rec(R).object1_id1 := W3;
        l_okc_k_items_rec(R).object1_id2 := W4;
      END IF;
      --X := a(P);
      X := l_okc_k_items_rec(P).id;
      WHILE 1=1
      LOOP    -- until I > J
        --while (a(I) < X) loop
        WHILE (l_okc_k_items_rec(I).id < X) LOOP
          I := I + 1;
        END LOOP;
        WHILE (X < l_okc_k_items_rec(J).id) LOOP
          J := J - 1;
        END LOOP;
        IF (I <= J) THEN
          W := l_okc_k_items_rec(I).id;
          W2 := l_okc_k_items_rec(I).number_of_items;
          W3 := l_okc_k_items_rec(I).object1_id1;
          W4 := l_okc_k_items_rec(I).object1_id2;
          l_okc_k_items_rec(I).id :=l_okc_k_items_rec(J).id;
          l_okc_k_items_rec(I).number_of_items :=l_okc_k_items_rec(J).number_of_items;
          l_okc_k_items_rec(I).object1_id1 :=l_okc_k_items_rec(J).object1_id1;
          l_okc_k_items_rec(I).object1_id2 :=l_okc_k_items_rec(J).object1_id2;
          l_okc_k_items_rec(J).id := W;
          l_okc_k_items_rec(J).number_of_items := W2;
          l_okc_k_items_rec(J).object1_id1 := W3;
          l_okc_k_items_rec(J).object1_id2 := W4;
          I := I + 1;
          J := J - 1;
        END IF;
        EXIT WHEN I > J;
      END LOOP;
      IF (J - L < R - I) THEN
        IF (I < R) THEN
          --push(I); push(R);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := I;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := R;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        R := J;
      ELSE
        IF (L < J) THEN
          --push(L); push(J);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := L;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := J;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        L := I;
      END IF;

      EXIT WHEN (L >= R);
    END LOOP;
  END LOOP;
  /*print('Now Printing okc_k_items_rec...');
  for i in 1..N
  loop
    print('l_okc_k_items_rec('||i||')=' || l_okc_k_items_rec(i).id || ':' || l_okc_k_items_rec(i).number_of_items || ':' || l_okc_k_items_rec(i).object1_id1 || ':' || l_okc_k_items_rec(i).object1_id2 );
  end loop;*/


EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'sort_okc_k_items_rec');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing sort_okc_k_items_rec:l_okc_k_items_rec N=' || N || ' ...');
  END IF;

  --print array
  FOR i IN 1..N
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_okc_k_items_rec('||i||')='
	  || l_okc_k_items_rec(i).id || ':' || l_okc_k_items_rec(i).number_of_items || ':'
	  || l_okc_k_items_rec(i).object1_id1 || ':' || l_okc_k_items_rec(i).object1_id2 );
    END IF;
  END LOOP;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;  /* sort_okc_k_items_rec */



PROCEDURE insert_okc_k_items (p_old_id IN okc_k_headers_b.id%TYPE,
                       p_new_id IN okc_k_headers_b.id%TYPE) IS
CURSOR c16(p_id NUMBER) IS
SELECT
     a.id, a.cle_id, a.chr_id,
     a.cle_id_for, a.dnz_chr_id, a.object1_id1,
     a.object1_id2, a.jtot_object1_code, a.uom_code,
     a.exception_yn, a.number_of_items, a.priced_item_yn,
     a.object_version_number, a.created_by, a.creation_date,
     a.last_updated_by, a.last_update_date, a.last_update_login,
     a.security_group_id, a.upg_orig_system_ref, a.upg_orig_system_ref_id,
     a.program_application_id, a.program_id, a.program_update_date,
     a.request_id, b.lse_id
FROM okc_k_items a,
     okc_k_lines_b b
WHERE a.dnz_chr_id = p_id
AND   a.cle_id = b.id;

    TYPE l_ilse_id_type IS TABLE OF okc_k_lines_b.lse_id%TYPE INDEX BY BINARY_INTEGER;
    l_iid_tab2 l_iid_type;
    l_icle_id_tab2 l_icle_id_type;
    l_ichr_id_tab2 l_ichr_id_type;
    l_icle_id_for_tab2 l_icle_id_for_type;
    l_idnz_chr_id_tab2 l_idnz_chr_id_type;
    l_iobject1_id1_tab2 l_iobject1_id1_type;
    l_iobject1_id2_tab2 l_iobject1_id2_type;
    l_ijtot_object1_code_tab2 l_ijtot_object1_code_type;
    l_iuom_code_tab2 l_iuom_code_type;
    l_iexception_yn_tab2 l_iexception_yn_type;
    l_inumber_of_items_tab2 l_inumber_of_items_type;
    l_ipriced_item_yn_tab2 l_ipriced_item_yn_type;
    l_iobject_version_number_tab2 l_iobject_version_number_type;
    l_icreated_by_tab2 l_icreated_by_type;
    l_icreation_date_tab2 l_icreation_date_type;
    l_ilast_updated_by_tab2 l_ilast_updated_by_type;
    l_ilast_update_date_tab2 l_ilast_update_date_type;
    l_ilast_update_login_tab2 l_ilast_update_login_type;
    l_isecurity_group_id_tab2 l_isecurity_group_id_type;
    l_iupg_orig_system_ref_tab2 l_iupg_orig_system_ref_type;
    l_iupg_orig_system_ref_id_tab2 l_iupg_orig_system_ref_id_type;
    l_iprogram_application_id_tab2 l_iprogram_application_id_type;
    l_iprogram_id_tab2 l_iprogram_id_type;
    l_iprogram_update_date_tab2 l_iprogram_update_date_type;
    l_irequest_id_tab2 l_irequest_id_type;
    l_ilse_id_tab2 l_ilse_id_type;

    l_new_cle_id NUMBER;
    l_new_object1_id1 NUMBER;
BEGIN

  OPEN c16(p_old_id);
  LOOP
    FETCH c16 bulk collect INTO
     l_iid_tab2, l_icle_id_tab2, l_ichr_id_tab2,
     l_icle_id_for_tab2, l_idnz_chr_id_tab2, l_iobject1_id1_tab2,
     l_iobject1_id2_tab2, l_ijtot_object1_code_tab2, l_iuom_code_tab2,
     l_iexception_yn_tab2, l_inumber_of_items_tab2, l_ipriced_item_yn_tab2,
     l_iobject_version_number_tab2, l_icreated_by_tab2, l_icreation_date_tab2,
     l_ilast_updated_by_tab2, l_ilast_update_date_tab2, l_ilast_update_login_tab2,
     l_isecurity_group_id_tab2, l_iupg_orig_system_ref_tab2, l_iupg_orig_system_ref_id_tab2,
     l_iprogram_application_id_tab2, l_iprogram_id_tab2, l_iprogram_update_date_tab2,
     l_irequest_id_tab2, l_ilse_id_tab2
    limit G_BULK_SIZE;
    EXIT WHEN l_iid_tab2.COUNT = 0;
    FOR i IN l_iid_tab2.first..l_iid_tab2.last
    LOOP

      l_iid_tab(l_items_counter) := l_iid_tab2(i);
      -- Change id
      l_iid_tab(l_items_counter) := okc_p_util.raw_to_number(sys_guid());

      l_icle_id_tab(l_items_counter) := l_icle_id_tab2(i);
      -- Change cle_id
      IF (l_icle_id_tab(l_items_counter) IS NOT NULL) THEN
        l_new_cle_id := find_mapping_id(l_icle_id_tab(l_items_counter));
        IF (l_new_cle_id = -1) THEN
          IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ERROR : Mapping cle id not found for ' || l_icle_id_tab(l_items_counter));
          END IF;
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        END IF;
        l_icle_id_tab(l_items_counter) := l_new_cle_id;
      END IF;

      l_ichr_id_tab(l_items_counter) := l_ichr_id_tab2(i);
      -- Change chr_id
      IF (l_ichr_id_tab(l_items_counter) IS NOT NULL) THEN
        l_ichr_id_tab(l_items_counter):= p_new_id;
      END IF;

      l_icle_id_for_tab(l_items_counter) := l_icle_id_for_tab2(i);
      -- Change cle_id_for ??? AKP

      l_idnz_chr_id_tab(l_items_counter) := l_idnz_chr_id_tab2(i);
      -- Change dnz_chr_id
      l_idnz_chr_id_tab(l_items_counter) := p_new_id;

      l_iobject1_id1_tab(l_items_counter) := l_iobject1_id1_tab2(i);
      -- Change object1_id1
      IF(l_ilse_id_tab2(i) IN (53, 49, 57)) THEN
        -- Bug 4891184
        IF (l_iobject1_id1_tab(l_items_counter) IS NOT NULL) THEN
        l_new_object1_id1 := find_mapping_id(l_iobject1_id1_tab(l_items_counter));
        IF (l_new_object1_id1 = -1) THEN
          IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ERROR : Mapping object1_id not found for ' || l_iobject1_id1_tab(l_items_counter));
          END IF;
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        END IF;
        l_iobject1_id1_tab(l_items_counter) := l_new_object1_id1;
        END IF;
      END IF;
      l_iobject1_id2_tab(l_items_counter) := l_iobject1_id2_tab2(i);
      -- Change object1_id1 and object1_id2

      IF (p_trans_type NOT IN ('OKL_REBOOK', 'OKL_RELEASE') AND
          l_ilse_id_tab2(i) IN (42, 45)) THEN
        l_iobject1_id1_tab(l_items_counter) := NULL;
        l_iobject1_id2_tab(l_items_counter) := NULL;
      END IF;

      -- Store cle_id to object1_id1 mapping (needed for business function)
      l_oid_mapping_tab(l_items_counter).cle_id := l_icle_id_tab(l_items_counter);
      l_oid_mapping_tab(l_items_counter).object1_id1 := l_iobject1_id1_tab(l_items_counter);

      l_ijtot_object1_code_tab(l_items_counter) := l_ijtot_object1_code_tab2(i);
      l_iuom_code_tab(l_items_counter) := l_iuom_code_tab2(i);
      l_iexception_yn_tab(l_items_counter) := l_iexception_yn_tab2(i);
      l_inumber_of_items_tab(l_items_counter) := l_inumber_of_items_tab2(i);
      l_ipriced_item_yn_tab(l_items_counter) := l_ipriced_item_yn_tab2(i);
      l_iobject_version_number_tab(l_items_counter) := l_iobject_version_number_tab2(i);
      l_icreated_by_tab(l_items_counter) := l_icreated_by_tab2(i);
      l_icreation_date_tab(l_items_counter) := l_icreation_date_tab2(i);
      l_ilast_updated_by_tab(l_items_counter) := l_ilast_updated_by_tab2(i);
      l_ilast_update_date_tab(l_items_counter) := l_ilast_update_date_tab2(i);
      l_ilast_update_login_tab(l_items_counter) := l_ilast_update_login_tab2(i);
      l_isecurity_group_id_tab(l_items_counter) := l_isecurity_group_id_tab2(i);
      l_iupg_orig_system_ref_tab(l_items_counter) := l_iupg_orig_system_ref_tab2(i);
      l_iupg_orig_system_ref_id_tab(l_items_counter) := l_iupg_orig_system_ref_id_tab2(i);
      l_iprogram_application_id_tab(l_items_counter) := l_iprogram_application_id_tab2(i);
      l_iprogram_id_tab(l_items_counter) := l_iprogram_id_tab2(i);
      l_iprogram_update_date_tab(l_items_counter) := l_iprogram_update_date_tab2(i);
      l_irequest_id_tab(l_items_counter) := l_irequest_id_tab2(i);

      l_okc_k_items_rec(l_okc_k_items_rec_counter).id := l_icle_id_tab(l_items_counter);
      l_okc_k_items_rec(l_okc_k_items_rec_counter).number_of_items := l_inumber_of_items_tab(l_items_counter);
      l_okc_k_items_rec(l_okc_k_items_rec_counter).object1_id1 := l_iobject1_id1_tab(l_items_counter);
      l_okc_k_items_rec(l_okc_k_items_rec_counter).object1_id2 := l_iobject1_id2_tab(l_items_counter);
      l_okc_k_items_rec_counter := l_okc_k_items_rec_counter + 1 ;

      l_items_counter := l_items_counter + 1;
    END LOOP;
  END LOOP;
  CLOSE c16;
  sort_oid_mapping_tab;
  sort_okc_k_items_rec;

  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_items_counter=' || l_items_counter || ' l_iid_tab.count=' || l_iid_tab.COUNT);
  END IF;
  IF (l_items_counter > 1) THEN
    forall i IN l_iid_tab.first..l_iid_tab.last
     INSERT INTO okc_k_items (
       id, cle_id, chr_id,
       cle_id_for, dnz_chr_id, object1_id1,
       object1_id2, jtot_object1_code, uom_code,
       exception_yn, number_of_items, priced_item_yn,
       object_version_number, created_by, creation_date,
       last_updated_by, last_update_date, last_update_login,
       security_group_id, upg_orig_system_ref, upg_orig_system_ref_id,
       program_application_id, program_id, program_update_date,
       request_id
     ) VALUES (
       l_iid_tab(i), l_icle_id_tab(i), l_ichr_id_tab(i),
       l_icle_id_for_tab(i), l_idnz_chr_id_tab(i), l_iobject1_id1_tab(i),
       l_iobject1_id2_tab(i), l_ijtot_object1_code_tab(i), l_iuom_code_tab(i),
       l_iexception_yn_tab(i), l_inumber_of_items_tab(i), l_ipriced_item_yn_tab(i),
       1, l_icreated_by_tab(i), l_icreation_date_tab(i),
       l_ilast_updated_by_tab(i), l_ilast_update_date_tab(i), l_ilast_update_login_tab(i),
       l_isecurity_group_id_tab(i), l_iupg_orig_system_ref_tab(i), l_iupg_orig_system_ref_id_tab(i),
       l_iprogram_application_id_tab(i), l_iprogram_id_tab(i), l_iprogram_update_date_tab(i),
       l_irequest_id_tab(i)
     );
  END IF;

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'insert_okc_k_items');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing insert_okc_k_items:l_iid_tab.count=' || l_iid_tab.COUNT || ' ...');
  END IF;
  IF (l_iid_tab.COUNT > 0) THEN
  FOR i IN l_iid_tab.first..l_iid_tab.last
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_iid_tab('||i||')=' || l_iid_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_icle_id_tab('||i||')=' || l_icle_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ichr_id_tab('||i||')=' || l_ichr_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_icle_id_for_tab('||i||')=' || l_icle_id_for_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_idnz_chr_id_tab('||i||')=' || l_idnz_chr_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_iobject1_id1_tab('||i||')=' || l_iobject1_id1_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_iobject1_id2_tab('||i||')=' || l_iobject1_id2_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ijtot_object1_code_tab('||i||')=' || l_ijtot_object1_code_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_iuom_code_tab('||i||')=' || l_iuom_code_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_iexception_yn_tab('||i||')=' || l_iexception_yn_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_inumber_of_items_tab('||i||')=' || l_inumber_of_items_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ipriced_item_yn_tab('||i||')=' || l_ipriced_item_yn_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_isecurity_group_id_tab('||i||')=' || l_isecurity_group_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_iupg_orig_system_ref_tab('||i||')=' || l_iupg_orig_system_ref_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_iupg_orig_system_ref_id_tab('||i||')=' || l_iupg_orig_system_ref_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_iprogram_application_id_tab('||i||')=' || l_iprogram_application_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_iprogram_id_tab('||i||')=' || l_iprogram_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_iprogram_update_date_tab('||i||')=' || l_iprogram_update_date_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_irequest_id_tab('||i||')=' || l_irequest_id_tab(i));
    END IF;
  END LOOP;
  END IF;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;  /* insert okc_k_items */

PROCEDURE sort_trx_id_mapping_tab IS
  TYPE numtabtype IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
  --a numtabtype;
  l_stack numtabtype;
  l_stack_index NUMBER := 0;
  N NUMBER;
  R NUMBER;
  L NUMBER;
  P NUMBER;
  W NUMBER;
  W2 NUMBER;
  X NUMBER;
  I NUMBER;
  J NUMBER;
BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  NULL;

  N := l_trx_assets_counter - 1;
  IF (N < 2) THEN
    RETURN;
  END IF;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := 1;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := N;

  --dbms_output.put_line('l_stack_index=' || l_stack_index);
  WHILE l_stack_index > 0
  LOOP
    R := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    L := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    --dbms_output.put_line('Pop: l_stack_index=' || l_stack_index);
    WHILE 1=1
    LOOP -- loop until L >= R
      I := L;
      J := R;
      P := FLOOR((L+R)/2);
      --if (a(L) > a(P)) then
      IF (l_trx_id_mapping_tab(L).old_id > l_trx_id_mapping_tab(P).old_id)
      THEN
        W := l_trx_id_mapping_tab(L).old_id;
        W2 := l_trx_id_mapping_tab(L).new_id;
        l_trx_id_mapping_tab(L).old_id :=l_trx_id_mapping_tab(P).old_id;
        l_trx_id_mapping_tab(L).new_id :=l_trx_id_mapping_tab(P).new_id;
        l_trx_id_mapping_tab(P).old_id := W;
        l_trx_id_mapping_tab(P).new_id := W2;
      END IF;
      --if (a(L) > a(R)) then
      IF (l_trx_id_mapping_tab(L).old_id > l_trx_id_mapping_tab(R).old_id)
      THEN
        W := l_trx_id_mapping_tab(L).old_id;
        W2 := l_trx_id_mapping_tab(L).new_id;
        l_trx_id_mapping_tab(L).old_id :=l_trx_id_mapping_tab(R).old_id;
        l_trx_id_mapping_tab(L).new_id :=l_trx_id_mapping_tab(R).new_id;
        l_trx_id_mapping_tab(R).old_id := W;
        l_trx_id_mapping_tab(R).new_id := W2;
      END IF;
      --if (a(P) > a(R)) then
      IF (l_trx_id_mapping_tab(P).old_id > l_trx_id_mapping_tab(R).old_id)
      THEN
        W := l_trx_id_mapping_tab(P).old_id;
        W2 := l_trx_id_mapping_tab(P).new_id;
        l_trx_id_mapping_tab(P).old_id :=l_trx_id_mapping_tab(R).old_id;
        l_trx_id_mapping_tab(P).new_id :=l_trx_id_mapping_tab(R).new_id;
        l_trx_id_mapping_tab(R).old_id := W;
        l_trx_id_mapping_tab(R).new_id := W2;
      END IF;
      --X := a(P);
      X := l_trx_id_mapping_tab(P).old_id;
      WHILE 1=1
      LOOP    -- until I > J
        --while (a(I) < X) loop
        WHILE (l_trx_id_mapping_tab(I).old_id < X) LOOP
          I := I + 1;
        END LOOP;
        WHILE (X < l_trx_id_mapping_tab(J).old_id) LOOP
          J := J - 1;
        END LOOP;
        IF (I <= J) THEN
          W := l_trx_id_mapping_tab(I).old_id;
          W2 := l_trx_id_mapping_tab(I).new_id;
          l_trx_id_mapping_tab(I).old_id :=l_trx_id_mapping_tab(J).old_id;
          l_trx_id_mapping_tab(I).new_id :=l_trx_id_mapping_tab(J).new_id;
          l_trx_id_mapping_tab(J).old_id := W;
          l_trx_id_mapping_tab(J).new_id := W2;
          I := I + 1;
          J := J - 1;
        END IF;
        EXIT WHEN I > J;
      END LOOP;
      IF (J - L < R - I) THEN
        IF (I < R) THEN
          --push(I); push(R);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := I;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := R;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        R := J;
      ELSE
        IF (L < J) THEN
          --push(L); push(J);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := L;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := J;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        L := I;
      END IF;

      EXIT WHEN (L >= R);
    END LOOP;
  END LOOP;

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'sort_trx_id_mapping_tab');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing sort_trx_id_mapping_tab:l_trx_id_mapping_tab N=' || N || ' ...');
  END IF;

  --print array
  FOR i IN 1..N
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_trx_id_mapping_tab('||i||')=' || l_trx_id_mapping_tab(i).old_id || ':' || l_trx_id_mapping_tab(i).new_id);
    END IF;
  END LOOP;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;  /* sort_trx_id_mapping_tab */

FUNCTION find_trx_mapping_id(p_id IN NUMBER) RETURN NUMBER IS
hi NUMBER;
lo NUMBER;
m NUMBER;
BEGIN
  lo := 1;
  hi := l_trx_assets_counter - 1;
  WHILE (lo <= hi) LOOP
    m := FLOOR((hi + lo)/2);
    IF (l_trx_id_mapping_tab(m).old_id = p_id) THEN
      RETURN l_trx_id_mapping_tab(m).new_id;
    ELSIF (l_trx_id_mapping_tab(m).old_id > p_id) THEN
      hi := m - 1;
    ELSE
      lo := m + 1;
    END IF;
  END LOOP;
  RETURN -1;
END;  /* find_trx_mapping_id */


PROCEDURE sort_trx_id_mapping_tab2 IS
  TYPE numtabtype IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
  --a numtabtype;
  l_stack numtabtype;
  l_stack_index NUMBER := 0;
  N NUMBER;
  R NUMBER;
  L NUMBER;
  P NUMBER;
  W NUMBER;
  W2 NUMBER;
  X NUMBER;
  I NUMBER;
  J NUMBER;
BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  NULL;

  N := l_trx_assets_counter2 - 1;
  IF (N < 2) THEN
    RETURN;
  END IF;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := 1;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := N;

  --dbms_output.put_line('l_stack_index=' || l_stack_index);
  WHILE l_stack_index > 0
  LOOP
    R := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    L := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    --dbms_output.put_line('Pop: l_stack_index=' || l_stack_index);
    WHILE 1=1
    LOOP -- loop until L >= R
      I := L;
      J := R;
      P := FLOOR((L+R)/2);
      --if (a(L) > a(P)) then
      IF (l_trx_id_mapping_tab2(L).old_id > l_trx_id_mapping_tab2(P).old_id)
      THEN
        W := l_trx_id_mapping_tab2(L).old_id;
        W2 := l_trx_id_mapping_tab2(L).new_id;
        l_trx_id_mapping_tab2(L).old_id :=l_trx_id_mapping_tab2(P).old_id;
        l_trx_id_mapping_tab2(L).new_id :=l_trx_id_mapping_tab2(P).new_id;
        l_trx_id_mapping_tab2(P).old_id := W;
        l_trx_id_mapping_tab2(P).new_id := W2;
      END IF;
      --if (a(L) > a(R)) then
      IF (l_trx_id_mapping_tab2(L).old_id > l_trx_id_mapping_tab2(R).old_id)
      THEN
        W := l_trx_id_mapping_tab2(L).old_id;
        W2 := l_trx_id_mapping_tab2(L).new_id;
        l_trx_id_mapping_tab2(L).old_id :=l_trx_id_mapping_tab2(R).old_id;
        l_trx_id_mapping_tab2(L).new_id :=l_trx_id_mapping_tab2(R).new_id;
        l_trx_id_mapping_tab2(R).old_id := W;
        l_trx_id_mapping_tab2(R).new_id := W2;
      END IF;
      --if (a(P) > a(R)) then
      IF (l_trx_id_mapping_tab2(P).old_id > l_trx_id_mapping_tab2(R).old_id)
      THEN
        W := l_trx_id_mapping_tab2(P).old_id;
        W2 := l_trx_id_mapping_tab2(P).new_id;
        l_trx_id_mapping_tab2(P).old_id :=l_trx_id_mapping_tab2(R).old_id;
        l_trx_id_mapping_tab2(P).new_id :=l_trx_id_mapping_tab2(R).new_id;
        l_trx_id_mapping_tab2(R).old_id := W;
        l_trx_id_mapping_tab2(R).new_id := W2;
      END IF;
      --X := a(P);
      X := l_trx_id_mapping_tab2(P).old_id;
      WHILE 1=1
      LOOP    -- until I > J
        --while (a(I) < X) loop
        WHILE (l_trx_id_mapping_tab2(I).old_id < X) LOOP
          I := I + 1;
        END LOOP;
        WHILE (X < l_trx_id_mapping_tab2(J).old_id) LOOP
          J := J - 1;
        END LOOP;
        IF (I <= J) THEN
          W := l_trx_id_mapping_tab2(I).old_id;
          W2 := l_trx_id_mapping_tab2(I).new_id;
          l_trx_id_mapping_tab2(I).old_id :=l_trx_id_mapping_tab2(J).old_id;
          l_trx_id_mapping_tab2(I).new_id :=l_trx_id_mapping_tab2(J).new_id;
          l_trx_id_mapping_tab2(J).old_id := W;
          l_trx_id_mapping_tab2(J).new_id := W2;
          I := I + 1;
          J := J - 1;
        END IF;
        EXIT WHEN I > J;
      END LOOP;
      IF (J - L < R - I) THEN
        IF (I < R) THEN
          --push(I); push(R);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := I;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := R;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        R := J;
      ELSE
        IF (L < J) THEN
          --push(L); push(J);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := L;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := J;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        L := I;
      END IF;

      EXIT WHEN (L >= R);
    END LOOP;
  END LOOP;

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'sort_trx_id_mapping_tab2');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing sort_trx_id_mapping_tab2:l_trx_id_mapping_tab2 N=' || N || ' ...');
  END IF;

  --print array
  FOR i IN 1..N
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_trx_id_mapping_tab2('||i||')=' || l_trx_id_mapping_tab2(i).old_id || ':' || l_trx_id_mapping_tab2(i).new_id);
    END IF;
  END LOOP;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;  /* sort_trx_id_mapping_tab2 */

FUNCTION find_trx_mapping_id2(p_id IN NUMBER) RETURN NUMBER IS
hi NUMBER;
lo NUMBER;
m NUMBER;
BEGIN
  lo := 1;
  hi := l_trx_assets_counter2 - 1;
  WHILE (lo <= hi) LOOP
    m := FLOOR((hi + lo)/2);
    IF (l_trx_id_mapping_tab2(m).old_id = p_id) THEN
      RETURN l_trx_id_mapping_tab2(m).new_id;
    ELSIF (l_trx_id_mapping_tab2(m).old_id > p_id) THEN
      hi := m - 1;
    ELSE
      lo := m + 1;
    END IF;
  END LOOP;
  RETURN -1;
END;  /* find_trx_mapping_id2 */

PROCEDURE sort_txl_id_mapping_tab IS
  TYPE numtabtype IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
  --a numtabtype;
  l_stack numtabtype;
  l_stack_index NUMBER := 0;
  N NUMBER;
  R NUMBER;
  L NUMBER;
  P NUMBER;
  W NUMBER;
  W2 NUMBER;
  X NUMBER;
  I NUMBER;
  J NUMBER;
BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  NULL;

  N := l_txl_assets_b_counter - 1;
  IF (N < 2) THEN
    RETURN;
  END IF;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := 1;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := N;

  --dbms_output.put_line('l_stack_index=' || l_stack_index);
  WHILE l_stack_index > 0
  LOOP
    R := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    L := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    --dbms_output.put_line('Pop: l_stack_index=' || l_stack_index);
    WHILE 1=1
    LOOP -- loop until L >= R
      I := L;
      J := R;
      P := FLOOR((L+R)/2);
      --if (a(L) > a(P)) then
      IF (l_txl_id_mapping_tab(L).old_id > l_txl_id_mapping_tab(P).old_id)
      THEN
        W := l_txl_id_mapping_tab(L).old_id;
        W2 := l_txl_id_mapping_tab(L).new_id;
        l_txl_id_mapping_tab(L).old_id :=l_txl_id_mapping_tab(P).old_id;
        l_txl_id_mapping_tab(L).new_id :=l_txl_id_mapping_tab(P).new_id;
        l_txl_id_mapping_tab(P).old_id := W;
        l_txl_id_mapping_tab(P).new_id := W2;
      END IF;
      --if (a(L) > a(R)) then
      IF (l_txl_id_mapping_tab(L).old_id > l_txl_id_mapping_tab(R).old_id)
      THEN
        W := l_txl_id_mapping_tab(L).old_id;
        W2 := l_txl_id_mapping_tab(L).new_id;
        l_txl_id_mapping_tab(L).old_id :=l_txl_id_mapping_tab(R).old_id;
        l_txl_id_mapping_tab(L).new_id :=l_txl_id_mapping_tab(R).new_id;
        l_txl_id_mapping_tab(R).old_id := W;
        l_txl_id_mapping_tab(R).new_id := W2;
      END IF;
      --if (a(P) > a(R)) then
      IF (l_txl_id_mapping_tab(P).old_id > l_txl_id_mapping_tab(R).old_id)
      THEN
        W := l_txl_id_mapping_tab(P).old_id;
        W2 := l_txl_id_mapping_tab(P).new_id;
        l_txl_id_mapping_tab(P).old_id :=l_txl_id_mapping_tab(R).old_id;
        l_txl_id_mapping_tab(P).new_id :=l_txl_id_mapping_tab(R).new_id;
        l_txl_id_mapping_tab(R).old_id := W;
        l_txl_id_mapping_tab(R).new_id := W2;
      END IF;
      --X := a(P);
      X := l_txl_id_mapping_tab(P).old_id;
      WHILE 1=1
      LOOP    -- until I > J
        --while (a(I) < X) loop
        WHILE (l_txl_id_mapping_tab(I).old_id < X) LOOP
          I := I + 1;
        END LOOP;
        WHILE (X < l_txl_id_mapping_tab(J).old_id) LOOP
          J := J - 1;
        END LOOP;
        IF (I <= J) THEN
          W := l_txl_id_mapping_tab(I).old_id;
          W2 := l_txl_id_mapping_tab(I).new_id;
          l_txl_id_mapping_tab(I).old_id :=l_txl_id_mapping_tab(J).old_id;
          l_txl_id_mapping_tab(I).new_id :=l_txl_id_mapping_tab(J).new_id;
          l_txl_id_mapping_tab(J).old_id := W;
          l_txl_id_mapping_tab(J).new_id := W2;
          I := I + 1;
          J := J - 1;
        END IF;
        EXIT WHEN I > J;
      END LOOP;
      IF (J - L < R - I) THEN
        IF (I < R) THEN
          --push(I); push(R);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := I;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := R;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        R := J;
      ELSE
        IF (L < J) THEN
          --push(L); push(J);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := L;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := J;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        L := I;
      END IF;

      EXIT WHEN (L >= R);
    END LOOP;
  END LOOP;

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'sort_txl_id_mapping_tab');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing sort_txl_id_mapping_tab:l_txl_id_mapping_tab N=' || N || ' ...');
  END IF;

  --print array
  FOR i IN 1..N
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_txl_id_mapping_tab('||i||')=' || l_txl_id_mapping_tab(i).old_id || ':' || l_txl_id_mapping_tab(i).new_id);
    END IF;
  END LOOP;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;  /* sort_txl_id_mapping_tab */

FUNCTION find_txl_mapping_id(p_id IN NUMBER) RETURN NUMBER IS
hi NUMBER;
lo NUMBER;
m NUMBER;
BEGIN
  lo := 1;
  hi := l_txl_assets_b_counter - 1;
  WHILE (lo <= hi) LOOP
    m := FLOOR((hi + lo)/2);
    IF (l_txl_id_mapping_tab(m).old_id = p_id) THEN
      RETURN l_txl_id_mapping_tab(m).new_id;
    ELSIF (l_txl_id_mapping_tab(m).old_id > p_id) THEN
      hi := m - 1;
    ELSE
      lo := m + 1;
    END IF;
  END LOOP;
  RETURN -1;
END;  /* find_txl_mapping_id */

PROCEDURE insert_okl_txl_assets_tl(p_old_id IN okl_txl_assets_b.id%TYPE,
                                   p_new_id IN okl_txl_assets_b.id%TYPE,
                                   p_flush IN VARCHAR2 ) IS
CURSOR c19(p_id NUMBER) IS
SELECT
     id, LANGUAGE, source_lang,
     sfwt_flag, description, created_by,
     creation_date, last_updated_by, last_update_date,
     last_update_login
FROM okl_txl_assets_tl
WHERE id = p_id;

    l_tlid_tab2 l_tlid_type;
    l_tllanguage_tab2 l_tllanguage_type;
    l_tlsource_lang_tab2 l_tlsource_lang_type;
    l_tlsfwt_flag_tab2 l_tlsfwt_flag_type;
    l_tldescription_tab2 l_tldescription_type;
    l_tlcreated_by_tab2 l_tlcreated_by_type;
    l_tlcreation_date_tab2 l_tlcreation_date_type;
    l_tllast_updated_by_tab2 l_tllast_updated_by_type;
    l_tllast_update_date_tab2 l_tllast_update_date_type;
    l_tllast_update_login_tab2 l_tllast_update_login_type;

BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  OPEN c19(p_old_id);
  LOOP
    FETCH c19 bulk collect INTO
     l_tlid_tab2, l_tllanguage_tab2, l_tlsource_lang_tab2,
     l_tlsfwt_flag_tab2, l_tldescription_tab2, l_tlcreated_by_tab2,
     l_tlcreation_date_tab2, l_tllast_updated_by_tab2, l_tllast_update_date_tab2,
     l_tllast_update_login_tab2
    limit G_BULK_SIZE;
    EXIT WHEN l_tlid_tab2.COUNT=0;
    FOR i IN l_tlid_tab2.first..l_tlid_tab2.last
    LOOP

      l_tlid_tab(l_txl_assets_tl_counter) := l_tlid_tab2(i);
      -- Change id
      l_tlid_tab(l_txl_assets_tl_counter) := p_new_id;

      l_tllanguage_tab(l_txl_assets_tl_counter) := l_tllanguage_tab2(i);
      l_tlsource_lang_tab(l_txl_assets_tl_counter) := l_tlsource_lang_tab2(i);
      l_tlsfwt_flag_tab(l_txl_assets_tl_counter) := l_tlsfwt_flag_tab2(i);
      l_tldescription_tab(l_txl_assets_tl_counter) := l_tldescription_tab2(i);
      l_tlcreated_by_tab(l_txl_assets_tl_counter) := l_tlcreated_by_tab2(i);
      l_tlcreation_date_tab(l_txl_assets_tl_counter) := l_tlcreation_date_tab2(i);
      l_tllast_updated_by_tab(l_txl_assets_tl_counter) := l_tllast_updated_by_tab2(i);
      l_tllast_update_date_tab(l_txl_assets_tl_counter) := l_tllast_update_date_tab2(i);
      l_tllast_update_login_tab(l_txl_assets_tl_counter) := l_tllast_update_login_tab2(i);

      l_txl_assets_tl_counter := l_txl_assets_tl_counter + 1;

    END LOOP;
  END LOOP;
  CLOSE c19;

  IF (p_flush = 'Y') THEN
    IF (l_txl_assets_tl_counter > 1) THEN
      IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
              OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_txl_assets_tl_counter=' || l_txl_assets_tl_counter || ' l_tlid_tab.count=' || l_tlid_tab.COUNT);
      END IF;
      forall i IN l_tlid_tab.first..l_tlid_tab.last
        INSERT INTO okl_txl_assets_tl (
         id, LANGUAGE, source_lang,
         sfwt_flag, description, created_by,
         creation_date, last_updated_by, last_update_date,
         last_update_login
        ) VALUES (
         l_tlid_tab(i), l_tllanguage_tab(i), l_tlsource_lang_tab(i),
         l_tlsfwt_flag_tab(i), l_tldescription_tab(i), l_created_by,
         SYSDATE, l_last_updated_by, SYSDATE,
         l_last_update_login
        );
    END IF;
  END IF;

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'insert_okl_txl_assets_tl');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing insert_okl-txl_assets_tl:l_tlid_tab.count=' || l_tlid_tab.COUNT || ' ...');
  END IF;
  IF (l_tlid_tab.COUNT > 0) THEN
  FOR i IN l_tlid_tab.first..l_tlid_tab.last
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tlid_tab('||i||')=' || l_tlid_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tllanguage_tab('||i||')=' || l_tllanguage_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tlsource_lang_tab('||i||')=' || l_tlsource_lang_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tlsfwt_flag_tab('||i||')=' || l_tlsfwt_flag_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tldescription_tab('||i||')=' || l_tldescription_tab(i));
    END IF;
  END LOOP;
  END IF;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;  /* insert_okl_txl_assets_tl */

PROCEDURE insert_okl_txd_assets_tl(p_old_id IN okc_k_headers_b.id%TYPE,
                                   p_new_id IN okc_k_headers_b.id%TYPE,
                                   p_flush IN VARCHAR2) IS
CURSOR c21(p_id NUMBER) IS
SELECT
     id, LANGUAGE, source_lang,
     sfwt_flag, description, created_by,
     creation_date, last_updated_by, last_update_date,
     last_update_login
FROM okl_txd_assets_tl
WHERE id = p_id
AND id IN (
  SELECT b.id FROM okl_txd_assets_b b, okl_txl_assets_b c
  WHERE b.id = p_id
  AND   b.tal_id = c.id
  AND   c.dnz_khr_id = p_chr_id
);

    l_dlid_tab2 l_dlid_type;
    l_dllanguage_tab2 l_dllanguage_type;
    l_dlsource_lang_tab2 l_dlsource_lang_type;
    l_dlsfwt_flag_tab2 l_dlsfwt_flag_type;
    l_dldescription_tab2 l_dldescription_type;
    l_dlcreated_by_tab2 l_dlcreated_by_type;
    l_dlcreation_date_tab2 l_dlcreation_date_type;
    l_dllast_updated_by_tab2 l_dllast_updated_by_type;
    l_dllast_update_date_tab2 l_dllast_update_date_type;
    l_dllast_update_login_tab2 l_dllast_update_login_type;

BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  OPEN c21(p_old_id);
  LOOP
    FETCH c21 bulk collect INTO
      l_dlid_tab2, l_dllanguage_tab2, l_dlsource_lang_tab2,
      l_dlsfwt_flag_tab2, l_dldescription_tab2, l_dlcreated_by_tab2,
      l_dlcreation_date_tab2, l_dllast_updated_by_tab2, l_dllast_update_date_tab2,
      l_dllast_update_login_tab2
    limit G_BULK_SIZE;
    EXIT WHEN l_dlid_tab2.COUNT = 0;
    FOR i IN l_dlid_tab2.first..l_dlid_tab2.last
    LOOP

      l_dlid_tab(l_txd_assets_tl_counter) := l_dlid_tab2(i);
      -- Change id
      l_dlid_tab(l_txd_assets_tl_counter) := p_new_id;

      l_dllanguage_tab(l_txd_assets_tl_counter) := l_dllanguage_tab2(i);
      l_dlsource_lang_tab(l_txd_assets_tl_counter) := l_dlsource_lang_tab2(i);
      l_dlsfwt_flag_tab(l_txd_assets_tl_counter) := l_dlsfwt_flag_tab2(i);
      l_dldescription_tab(l_txd_assets_tl_counter) := l_dldescription_tab2(i);
      l_dlcreated_by_tab(l_txd_assets_tl_counter) := l_dlcreated_by_tab2(i);
      l_dlcreation_date_tab(l_txd_assets_tl_counter) := l_dlcreation_date_tab2(i);
      l_dllast_updated_by_tab(l_txd_assets_tl_counter) := l_dllast_updated_by_tab2(i);
      l_dllast_update_date_tab(l_txd_assets_tl_counter) := l_dllast_update_date_tab2(i);
      l_dllast_update_login_tab(l_txd_assets_tl_counter) := l_dllast_update_login_tab2(i);

      l_txd_assets_tl_counter := l_txd_assets_tl_counter + 1;

    END LOOP;
  END LOOP;
  CLOSE c21;
  IF (p_flush = 'Y') THEN
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_txd_assets_tl_counter=' || l_txd_assets_tl_counter || ' l_dlid_tab.count=' || l_dlid_tab.COUNT);
    END IF;
    IF (l_txd_assets_tl_counter > 1) THEN
      forall i IN l_dlid_tab.first..l_dlid_tab.last
      INSERT INTO okl_txd_assets_tl (
       id, LANGUAGE, source_lang,
       sfwt_flag, description, created_by,
       creation_date, last_updated_by, last_update_date,
       last_update_login
      ) VALUES (
       l_dlid_tab(i), l_dllanguage_tab(i), l_dlsource_lang_tab(i),
       l_dlsfwt_flag_tab(i), l_dldescription_tab(i), l_created_by,
       SYSDATE, l_last_updated_by, SYSDATE,
       l_last_update_login
      );
    END IF;
  END IF;
EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'insert_okl_txd_assets_tl');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing insert_okl_txd_assets_tl:l_dlid_tab.count=' || l_dlid_tab.COUNT || ' ...');
  END IF;
  IF (l_dlid_tab.COUNT > 0) THEN
  FOR i IN l_dlid_tab.first..l_dlid_tab.last
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dlid_tab('||i||')=' || l_dlid_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dllanguage_tab('||i||')=' || l_dllanguage_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dlsource_lang_tab('||i||')=' || l_dlsource_lang_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dlsfwt_flag_tab('||i||')=' || l_dlsfwt_flag_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dldescription_tab('||i||')=' || l_dldescription_tab(i));
    END IF;
  END LOOP;
  END IF;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;  /* insert_okl_txd_assets_tl */

PROCEDURE insert_okl_txd_assets_b(p_old_id IN okc_k_headers_b.id%TYPE,
                                  p_new_id IN okc_k_headers_b.id%TYPE) IS
CURSOR c20(p_id NUMBER) IS
SELECT
     id, object_version_number, tal_id,
     target_kle_id, line_detail_number, asset_number,
     quantity, cost, tax_book,
     life_in_months_tax, deprn_method_tax, deprn_rate_tax,
     salvage_value, split_percent, inventory_item_id,
     attribute_category, attribute1, attribute2,
     attribute3, attribute4, attribute5,
     attribute6, attribute7, attribute8,
     attribute9, attribute10, attribute11,
     attribute12, attribute13, attribute14,
     attribute15, created_by, creation_date,
     last_updated_by, last_update_date, last_update_login,
     currency_code, currency_conversion_type, currency_conversion_rate,
     currency_conversion_date
FROM okl_txd_assets_b
WHERE tal_id IN (
              SELECT a.id
              FROM okl_txl_assets_b a,
                        okc_k_lines_b b,
                        okc_k_items c
                 WHERE  a.dnz_khr_id = p_id
                 AND    b.dnz_chr_id = p_id
                 AND    c.dnz_chr_id = p_id
                 AND    b.lse_id = 42
                 AND    a.kle_id = b.id
                 AND    a.kle_id = c.cle_id
                 AND    c.object1_id1 IS NULL
                 AND    c.object1_id2 IS NULL
            );

    l_dbid_tab2 l_dbid_type;
    l_dbobject_version_number_tab2 l_dbobject_version_number_type;
    l_dbtal_id_tab2 l_dbtal_id_type;
    l_dbtarget_kle_id_tab2 l_dbtarget_kle_id_type;
    l_dbline_detail_number_tab2 l_dbline_detail_number_type;
    l_dbasset_number_tab2 l_dbasset_number_type;
    l_dbquantity_tab2 l_dbquantity_type;
    l_dbcost_tab2 l_dbcost_type;
    l_dbtax_book_tab2 l_dbtax_book_type;
    l_dblife_in_months_tax_tab2 l_dblife_in_months_tax_type;
    l_dbdeprn_method_tax_tab2 l_dbdeprn_method_tax_type;
    l_dbdeprn_rate_tax_tab2 l_dbdeprn_rate_tax_type;
    l_dbsalvage_value_tab2 l_dbsalvage_value_type;
    l_dbsplit_percent_tab2 l_dbsplit_percent_type;
    l_dbinventory_item_id_tab2 l_dbinventory_item_id_type;
    l_dbattribute_category_tab2 l_dbattribute_category_type;
    l_dbattribute1_tab2 l_dbattribute1_type;
    l_dbattribute2_tab2 l_dbattribute2_type;
    l_dbattribute3_tab2 l_dbattribute3_type;
    l_dbattribute4_tab2 l_dbattribute4_type;
    l_dbattribute5_tab2 l_dbattribute5_type;
    l_dbattribute6_tab2 l_dbattribute6_type;
    l_dbattribute7_tab2 l_dbattribute7_type;
    l_dbattribute8_tab2 l_dbattribute8_type;
    l_dbattribute9_tab2 l_dbattribute9_type;
    l_dbattribute10_tab2 l_dbattribute10_type;
    l_dbattribute11_tab2 l_dbattribute11_type;
    l_dbattribute12_tab2 l_dbattribute12_type;
    l_dbattribute13_tab2 l_dbattribute13_type;
    l_dbattribute14_tab2 l_dbattribute14_type;
    l_dbattribute15_tab2 l_dbattribute15_type;
    l_dbcreated_by_tab2 l_dbcreated_by_type;
    l_dbcreation_date_tab2 l_dbcreation_date_type;
    l_dblast_updated_by_tab2 l_dblast_updated_by_type;
    l_dblast_update_date_tab2 l_dblast_update_date_type;
    l_dblast_update_login_tab2 l_dblast_update_login_type;
    l_dbcurrency_code_tab2 l_dbcurrency_code_type;
    l_dbcurrency_convers_type_tab2 l_dbcurrency_convers_type_type;
    l_dbcurrency_convers_rate_tab2 l_dbcurrency_convers_rate_type;
    l_dbcurrency_convers_date_tab2 l_dbcurrency_convers_date_type;

    l_new_tal_id NUMBER;
    l_new_kle_id NUMBER;

BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  OPEN c20(p_old_id);
  LOOP
    FETCH c20 bulk collect INTO
      l_dbid_tab2, l_dbobject_version_number_tab2, l_dbtal_id_tab2,
      l_dbtarget_kle_id_tab2, l_dbline_detail_number_tab2, l_dbasset_number_tab2,
      l_dbquantity_tab2, l_dbcost_tab2, l_dbtax_book_tab2,
      l_dblife_in_months_tax_tab2, l_dbdeprn_method_tax_tab2, l_dbdeprn_rate_tax_tab2,
      l_dbsalvage_value_tab2, l_dbsplit_percent_tab2, l_dbinventory_item_id_tab2,
      l_dbattribute_category_tab2, l_dbattribute1_tab2, l_dbattribute2_tab2,
      l_dbattribute3_tab2, l_dbattribute4_tab2, l_dbattribute5_tab2,
      l_dbattribute6_tab2, l_dbattribute7_tab2, l_dbattribute8_tab2,
      l_dbattribute9_tab2, l_dbattribute10_tab2, l_dbattribute11_tab2,
      l_dbattribute12_tab2, l_dbattribute13_tab2, l_dbattribute14_tab2,
      l_dbattribute15_tab2, l_dbcreated_by_tab2, l_dbcreation_date_tab2,
      l_dblast_updated_by_tab2, l_dblast_update_date_tab2, l_dblast_update_login_tab2,
      l_dbcurrency_code_tab2, l_dbcurrency_convers_type_tab2, l_dbcurrency_convers_rate_tab2,
      l_dbcurrency_convers_date_tab2
    limit G_BULK_SIZE;
    EXIT WHEN l_dbid_tab2.COUNT = 0;
    FOR i IN l_dbid_tab2.first..l_dbid_tab2.last
    LOOP

      l_dbid_tab3(l_txd_assets_b_counter) := l_dbid_tab2(i);
      l_dbid_tab(l_txd_assets_b_counter) := l_dbid_tab2(i);
      -- Change id
      l_dbid_tab(l_txd_assets_b_counter) := okc_p_util.raw_to_number(sys_guid());

      l_dbobject_version_number_tab(l_txd_assets_b_counter) := l_dbobject_version_number_tab2(i);
      l_dbtal_id_tab(l_txd_assets_b_counter) := l_dbtal_id_tab2(i);
      -- Change tal_id
      l_new_tal_id := find_txl_mapping_id(l_dbtal_id_tab(l_txd_assets_b_counter));
      l_dbtal_id_tab(l_txd_assets_b_counter) := l_new_tal_id;

      l_dbtarget_kle_id_tab(l_txd_assets_b_counter) := l_dbtarget_kle_id_tab2(i);
      -- Change target_kle_id ??? AKP
      --l_new_kle_id := find_mapping_id(l_dbtarget_kle_id_tab(l_txd_assets_b_counter));
      --l_dbtarget_kle_id_tab(l_txd_assets_b_counter) := l_new_kle_id;
      l_dbtarget_kle_id_tab(l_txd_assets_b_counter) := NULL;

      l_dbline_detail_number_tab(l_txd_assets_b_counter) := l_dbline_detail_number_tab2(i);
      l_dbasset_number_tab(l_txd_assets_b_counter) := l_dbasset_number_tab2(i);
      l_dbquantity_tab(l_txd_assets_b_counter) := l_dbquantity_tab2(i);
      l_dbcost_tab(l_txd_assets_b_counter) := l_dbcost_tab2(i);
      l_dbtax_book_tab(l_txd_assets_b_counter) := l_dbtax_book_tab2(i);
      l_dblife_in_months_tax_tab(l_txd_assets_b_counter) := l_dblife_in_months_tax_tab2(i);
      l_dbdeprn_method_tax_tab(l_txd_assets_b_counter) := l_dbdeprn_method_tax_tab2(i);
      l_dbdeprn_rate_tax_tab(l_txd_assets_b_counter) := l_dbdeprn_rate_tax_tab2(i);
      l_dbsalvage_value_tab(l_txd_assets_b_counter) := l_dbsalvage_value_tab2(i);
      l_dbsplit_percent_tab(l_txd_assets_b_counter) := l_dbsplit_percent_tab2(i);
      l_dbinventory_item_id_tab(l_txd_assets_b_counter) := l_dbinventory_item_id_tab2(i);
      l_dbattribute_category_tab(l_txd_assets_b_counter) := l_dbattribute_category_tab2(i);
      l_dbattribute1_tab(l_txd_assets_b_counter) := l_dbattribute1_tab2(i);
      l_dbattribute2_tab(l_txd_assets_b_counter) := l_dbattribute2_tab2(i);
      l_dbattribute3_tab(l_txd_assets_b_counter) := l_dbattribute3_tab2(i);
      l_dbattribute4_tab(l_txd_assets_b_counter) := l_dbattribute4_tab2(i);
      l_dbattribute5_tab(l_txd_assets_b_counter) := l_dbattribute5_tab2(i);
      l_dbattribute6_tab(l_txd_assets_b_counter) := l_dbattribute6_tab2(i);
      l_dbattribute7_tab(l_txd_assets_b_counter) := l_dbattribute7_tab2(i);
      l_dbattribute8_tab(l_txd_assets_b_counter) := l_dbattribute8_tab2(i);
      l_dbattribute9_tab(l_txd_assets_b_counter) := l_dbattribute9_tab2(i);
      l_dbattribute10_tab(l_txd_assets_b_counter) := l_dbattribute10_tab2(i);
      l_dbattribute11_tab(l_txd_assets_b_counter) := l_dbattribute11_tab2(i);
      l_dbattribute12_tab(l_txd_assets_b_counter) := l_dbattribute12_tab2(i);
      l_dbattribute13_tab(l_txd_assets_b_counter) := l_dbattribute13_tab2(i);
      l_dbattribute14_tab(l_txd_assets_b_counter) := l_dbattribute14_tab2(i);
      l_dbattribute15_tab(l_txd_assets_b_counter) := l_dbattribute15_tab2(i);
      l_dbcreated_by_tab(l_txd_assets_b_counter) := l_dbcreated_by_tab2(i);
      l_dbcreation_date_tab(l_txd_assets_b_counter) := l_dbcreation_date_tab2(i);
      l_dblast_updated_by_tab(l_txd_assets_b_counter) := l_dblast_updated_by_tab2(i);
      l_dblast_update_date_tab(l_txd_assets_b_counter) := l_dblast_update_date_tab2(i);
      l_dblast_update_login_tab(l_txd_assets_b_counter) := l_dblast_update_login_tab2(i);
      /*l_dbcurrency_code_tab(l_txd_assets_b_counter) := l_dbcurrency_code_tab2(i);
      l_dbcurrency_convers_type_tab(l_txd_assets_b_counter) := l_dbcurrency_convers_type_tab2(i);
      l_dbcurrency_convers_rate_tab(l_txd_assets_b_counter) := l_dbcurrency_convers_rate_tab2(i);
      l_dbcurrency_convers_date_tab(l_txd_assets_b_counter) := l_dbcurrency_convers_date_tab2(i); */
      -- AKP: Default the following four from the contract header
      l_dbcurrency_code_tab(l_txd_assets_b_counter) := l_contract_currency;
      l_dbcurrency_convers_type_tab(l_txd_assets_b_counter) := l_conversion_type;
      l_dbcurrency_convers_rate_tab(l_txd_assets_b_counter) := l_conversion_rate;
      l_dbcurrency_convers_date_tab(l_txd_assets_b_counter) := l_conversion_rate_date;

      l_txd_assets_b_counter := l_txd_assets_b_counter + 1;

    END LOOP;
  END LOOP;
  CLOSE c20;
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_txd_assets_b_counter=' || l_txd_assets_b_counter || ' l_dbid_tab.count=' || l_dbid_tab.COUNT);
  END IF;
  IF (l_txd_assets_b_counter > 1) THEN
    forall i IN l_dbid_tab.first..l_dbid_tab.last
    INSERT INTO okl_txd_assets_b (
     id, object_version_number, tal_id,
     target_kle_id, line_detail_number, asset_number,
     quantity, cost, tax_book,
     life_in_months_tax, deprn_method_tax, deprn_rate_tax,
     salvage_value, split_percent, inventory_item_id,
     attribute_category, attribute1, attribute2,
     attribute3, attribute4, attribute5,
     attribute6, attribute7, attribute8,
     attribute9, attribute10, attribute11,
     attribute12, attribute13, attribute14,
     attribute15, created_by, creation_date,
     last_updated_by, last_update_date, last_update_login,
     currency_code, currency_conversion_type, currency_conversion_rate,
     currency_conversion_date
    ) VALUES (
     l_dbid_tab(i), 1, l_dbtal_id_tab(i),
     l_dbtarget_kle_id_tab(i), l_dbline_detail_number_tab(i), l_dbasset_number_tab(i),
     l_dbquantity_tab(i), l_dbcost_tab(i), l_dbtax_book_tab(i),
     l_dblife_in_months_tax_tab(i), l_dbdeprn_method_tax_tab(i), l_dbdeprn_rate_tax_tab(i),
     l_dbsalvage_value_tab(i), l_dbsplit_percent_tab(i), l_dbinventory_item_id_tab(i),
     l_dbattribute_category_tab(i), l_dbattribute1_tab(i), l_dbattribute2_tab(i),
     l_dbattribute3_tab(i), l_dbattribute4_tab(i), l_dbattribute5_tab(i),
     l_dbattribute6_tab(i), l_dbattribute7_tab(i), l_dbattribute8_tab(i),
     l_dbattribute9_tab(i), l_dbattribute10_tab(i), l_dbattribute11_tab(i),
     l_dbattribute12_tab(i), l_dbattribute13_tab(i), l_dbattribute14_tab(i),
     l_dbattribute15_tab(i), l_created_by, SYSDATE,
     l_last_updated_by, SYSDATE, l_last_update_login,
     l_dbcurrency_code_tab(i), l_dbcurrency_convers_type_tab(i), l_dbcurrency_convers_rate_tab(i),
     l_dbcurrency_convers_date_tab(i)
    );
    FOR i IN l_dbid_tab.first..l_dbid_tab.last
    LOOP
      IF (i = l_dbid_tab.last) THEN
        insert_okl_txd_assets_tl(l_dbid_tab3(i),l_dbid_tab(i), 'Y');
      ELSE
        insert_okl_txd_assets_tl(l_dbid_tab3(i),l_dbid_tab(i), 'N');
      END IF;
    END LOOP;
  END IF;
EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'insert_okl_txd_assets_b');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing insert_okl_txd_assets_b:l_dbid_tab.count=' || l_dbid_tab.COUNT || ' ...');
  END IF;
  IF (l_dbid_tab.COUNT > 0) THEN
  FOR i IN l_dbid_tab.first..l_dbid_tab.last
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dbid_tab('||i||')=' || l_dbid_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dbtal_id_tab('||i||')=' || l_dbtal_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dbtarget_kle_id_tab('||i||')=' || l_dbtarget_kle_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dbline_detail_number_tab('||i||')=' || l_dbline_detail_number_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dbasset_number_tab('||i||')=' || l_dbasset_number_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dbquantity_tab('||i||')=' || l_dbquantity_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dbcost_tab('||i||')=' || l_dbcost_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dbtax_book_tab('||i||')=' || l_dbtax_book_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dblife_in_months_tax_tab('||i||')=' || l_dblife_in_months_tax_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dbdeprn_method_tax_tab('||i||')=' || l_dbdeprn_method_tax_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dbdeprn_rate_tax_tab('||i||')=' || l_dbdeprn_rate_tax_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dbsalvage_value_tab('||i||')=' || l_dbsalvage_value_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dbsplit_percent_tab('||i||')=' || l_dbsplit_percent_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dbinventory_item_id_tab('||i||')=' || l_dbinventory_item_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dbattribute_category_tab('||i||')=' || l_dbattribute_category_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dbattribute1_tab('||i||')=' || l_dbattribute1_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dbattribute2_tab('||i||')=' || l_dbattribute2_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dbattribute3_tab('||i||')=' || l_dbattribute3_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dbattribute4_tab('||i||')=' || l_dbattribute4_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dbattribute5_tab('||i||')=' || l_dbattribute5_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dbattribute6_tab('||i||')=' || l_dbattribute6_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dbattribute7_tab('||i||')=' || l_dbattribute7_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dbattribute8_tab('||i||')=' || l_dbattribute8_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dbattribute9_tab('||i||')=' || l_dbattribute9_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dbattribute10_tab('||i||')=' || l_dbattribute10_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dbattribute11_tab('||i||')=' || l_dbattribute11_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dbattribute12_tab('||i||')=' || l_dbattribute12_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dbattribute13_tab('||i||')=' || l_dbattribute13_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dbattribute14_tab('||i||')=' || l_dbattribute14_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dbattribute15_tab('||i||')=' || l_dbattribute15_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dbcurrency_code_tab('||i||')=' || l_dbcurrency_code_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dbcurrency_convers_type_tab('||i||')=' || l_dbcurrency_convers_type_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dbcurrency_convers_rate_tab('||i||')=' || l_dbcurrency_convers_rate_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dbcurrency_convers_date_tab('||i||')=' || l_dbcurrency_convers_date_tab(i));
    END IF;
  END LOOP;
  END IF;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END; /* insert_okl_txd_assets_b */

FUNCTION find_dbid_mapping_id(p_id IN NUMBER) RETURN NUMBER IS
hi NUMBER;
lo NUMBER;
m NUMBER;
BEGIN
  lo := 1;
  hi := l_tal_to_kle_counter - 1;
  WHILE (lo <= hi) LOOP
    m := FLOOR((hi + lo)/2);
    IF (l_dbid_mapping_tab(m).tal_id = p_id) THEN
      RETURN l_dbid_mapping_tab(m).kle_id;
    ELSIF (l_dbid_mapping_tab(m).tal_id > p_id) THEN
      hi := m - 1;
    ELSE
      lo := m + 1;
    END IF;
  END LOOP;
  RETURN -1;
END;  /* find_dbid_mapping_id */

PROCEDURE sort_dbid_mapping_tab IS
  TYPE numtabtype IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
  --a numtabtype;
  l_stack numtabtype;
  l_stack_index NUMBER := 0;
  N NUMBER;
  R NUMBER;
  L NUMBER;
  P NUMBER;
  W NUMBER;
  W2 NUMBER;
  X NUMBER;
  I NUMBER;
  J NUMBER;
BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  NULL;

  N := l_tal_to_kle_counter - 1;
  IF (N < 2) THEN
    RETURN;
  END IF;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := 1;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := N;

  --dbms_output.put_line('l_stack_index=' || l_stack_index);
  WHILE l_stack_index > 0
  LOOP
    R := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    L := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    --dbms_output.put_line('Pop: l_stack_index=' || l_stack_index);
    WHILE 1=1
    LOOP -- loop until L >= R
      I := L;
      J := R;
      P := FLOOR((L+R)/2);
      --if (a(L) > a(P)) then
      IF (l_dbid_mapping_tab(L).tal_id > l_dbid_mapping_tab(P).tal_id)
      THEN
        W := l_dbid_mapping_tab(L).tal_id;
        W2 := l_dbid_mapping_tab(L).kle_id;
        l_dbid_mapping_tab(L).tal_id :=l_dbid_mapping_tab(P).tal_id;
        l_dbid_mapping_tab(L).kle_id :=l_dbid_mapping_tab(P).kle_id;
        l_dbid_mapping_tab(P).tal_id := W;
        l_dbid_mapping_tab(P).kle_id := W2;
      END IF;
      --if (a(L) > a(R)) then
      IF (l_dbid_mapping_tab(L).tal_id > l_dbid_mapping_tab(R).tal_id)
      THEN
        W := l_dbid_mapping_tab(L).tal_id;
        W2 := l_dbid_mapping_tab(L).kle_id;
        l_dbid_mapping_tab(L).tal_id :=l_dbid_mapping_tab(R).tal_id;
        l_dbid_mapping_tab(L).kle_id :=l_dbid_mapping_tab(R).kle_id;
        l_dbid_mapping_tab(R).tal_id := W;
        l_dbid_mapping_tab(R).kle_id := W2;
      END IF;
      --if (a(P) > a(R)) then
      IF (l_dbid_mapping_tab(P).tal_id > l_dbid_mapping_tab(R).tal_id)
      THEN
        W := l_dbid_mapping_tab(P).tal_id;
        W2 := l_dbid_mapping_tab(P).kle_id;
        l_dbid_mapping_tab(P).tal_id :=l_dbid_mapping_tab(R).tal_id;
        l_dbid_mapping_tab(P).kle_id :=l_dbid_mapping_tab(R).kle_id;
        l_dbid_mapping_tab(R).tal_id := W;
        l_dbid_mapping_tab(R).kle_id := W2;
      END IF;
      --X := a(P);
      X := l_dbid_mapping_tab(P).tal_id;
      WHILE 1=1
      LOOP    -- until I > J
        --while (a(I) < X) loop
        WHILE (l_dbid_mapping_tab(I).tal_id < X) LOOP
          I := I + 1;
        END LOOP;
        WHILE (X < l_dbid_mapping_tab(J).tal_id) LOOP
          J := J - 1;
        END LOOP;
        IF (I <= J) THEN
          W := l_dbid_mapping_tab(I).tal_id;
          W2 := l_dbid_mapping_tab(I).kle_id;
          l_dbid_mapping_tab(I).tal_id :=l_dbid_mapping_tab(J).tal_id;
          l_dbid_mapping_tab(I).kle_id :=l_dbid_mapping_tab(J).kle_id;
          l_dbid_mapping_tab(J).tal_id := W;
          l_dbid_mapping_tab(J).kle_id := W2;
          I := I + 1;
          J := J - 1;
        END IF;
        EXIT WHEN I > J;
      END LOOP;
      IF (J - L < R - I) THEN
        IF (I < R) THEN
          --push(I); push(R);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := I;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := R;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        R := J;
      ELSE
        IF (L < J) THEN
          --push(L); push(J);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := L;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := J;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        L := I;
      END IF;

      EXIT WHEN (L >= R);
    END LOOP;
  END LOOP;

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'sort_dbid_mapping_tab');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing sort_dbid_mapping_tab:l_dbid_mapping_tab N=' || N || ' ...');
  END IF;

  --print array
  FOR i IN 1..N
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dbid_mapping_tab('||i||')=' || l_dbid_mapping_tab(i).tal_id || ':' || l_dbid_mapping_tab(i).kle_id);
    END IF;
  END LOOP;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;  /* sort_dbid_mapping_tab */

PROCEDURE insert_okl_txl_assets_b(p_old_id IN okc_k_headers_b.id%TYPE,
                                  p_new_id IN okc_k_headers_b.id%TYPE) IS
CURSOR c18(p_id NUMBER) IS
SELECT
       a.id, a.object_version_number, a.tas_id,
       a.ilo_id, a.ilo_id_old, a.iay_id,
       a.iay_id_new, a.kle_id, a.dnz_khr_id,
       a.line_number, a.org_id, a.tal_type,
       a.asset_number, a.fa_location_id, a.original_cost,
       a.current_units, a.manufacturer_name, a.year_manufactured,
       a.supplier_id, a.used_asset_yn, a.tag_number,
       a.model_number, a.corporate_book, a.date_purchased,
       a.date_delivery, a.in_service_date, a.life_in_months,
       a.depreciation_id, a.depreciation_cost, a.deprn_method,
       a.deprn_rate, a.salvage_value, a.percent_salvage_value,
       a.attribute_category, a.attribute1, a.attribute2,
       a.attribute3, a.attribute4, a.attribute5,
       a.attribute6, a.attribute7, a.attribute8,
       a.attribute9, a.attribute10, a.attribute11,
       a.attribute12, a.attribute13, a.attribute14,
       a.attribute15, a.created_by, a.creation_date,
       a.last_updated_by, a.last_update_date, a.last_update_login,
       a.depreciate_yn, a.hold_period_days, a.old_salvage_value,
       a.new_residual_value, a.old_residual_value, a.units_retired,
       a.cost_retired, a.sale_proceeds, a.removal_cost,
       a.dnz_asset_id, a.date_due, a.rep_asset_id,
       a.lke_asset_id, a.match_amount, a.split_into_singles_flag,
       a.split_into_units, a.currency_code, a.currency_conversion_type,
       a.currency_conversion_rate, a.currency_conversion_date, a.asset_key_id,
       a.fa_trx_date
FROM okl_txl_assets_b a,
          okc_k_lines_b b,
          okc_k_items c
   WHERE  a.dnz_khr_id = p_id
   AND    b.dnz_chr_id = p_id
   AND    c.dnz_chr_id = p_id
   AND    b.lse_id = 42
   AND    a.kle_id = b.id
   AND    a.kle_id = c.cle_id
   AND    c.object1_id1 IS NULL
   AND    c.object1_id2 IS NULL;

    l_tbid_tab2 l_tbid_type;
    l_tbobject_version_number_tab2 l_tbobject_version_number_type;
    l_tbtas_id_tab2 l_tbtas_id_type;
    l_tbilo_id_tab2 l_tbilo_id_type;
    l_tbilo_id_old_tab2 l_tbilo_id_old_type;
    l_tbiay_id_tab2 l_tbiay_id_type;
    l_tbiay_id_new_tab2 l_tbiay_id_new_type;
    l_tbkle_id_tab2 l_tbkle_id_type;
    l_tbdnz_khr_id_tab2 l_tbdnz_khr_id_type;
    l_tbline_number_tab2 l_tbline_number_type;
    l_tborg_id_tab2 l_tborg_id_type;
    l_tbtal_type_tab2 l_tbtal_type_type;
    l_tbasset_number_tab2 l_tbasset_number_type;
    l_tbfa_location_id_tab2 l_tbfa_location_id_type;
    l_tboriginal_cost_tab2 l_tboriginal_cost_type;
    l_tbcurrent_units_tab2 l_tbcurrent_units_type;
    l_tbmanufacturer_name_tab2 l_tbmanufacturer_name_type;
    l_tbyear_manufactured_tab2 l_tbyear_manufactured_type;
    l_tbsupplier_id_tab2 l_tbsupplier_id_type;
    l_tbused_asset_yn_tab2 l_tbused_asset_yn_type;
    l_tbtag_number_tab2 l_tbtag_number_type;
    l_tbmodel_number_tab2 l_tbmodel_number_type;
    l_tbcorporate_book_tab2 l_tbcorporate_book_type;
    l_tbdate_purchased_tab2 l_tbdate_purchased_type;
    l_tbdate_delivery_tab2 l_tbdate_delivery_type;
    l_tbin_service_date_tab2 l_tbin_service_date_type;
    l_tblife_in_months_tab2 l_tblife_in_months_type;
    l_tbdepreciation_id_tab2 l_tbdepreciation_id_type;
    l_tbdepreciation_cost_tab2 l_tbdepreciation_cost_type;
    l_tbdeprn_method_tab2 l_tbdeprn_method_type;
    l_tbdeprn_rate_tab2 l_tbdeprn_rate_type;
    l_tbsalvage_value_tab2 l_tbsalvage_value_type;
    l_tbpercent_salvage_value_tab2 l_tbpercent_salvage_value_type;
    l_tbattribute_category_tab2 l_tbattribute_category_type;
    l_tbattribute1_tab2 l_tbattribute1_type;
    l_tbattribute2_tab2 l_tbattribute2_type;
    l_tbattribute3_tab2 l_tbattribute3_type;
    l_tbattribute4_tab2 l_tbattribute4_type;
    l_tbattribute5_tab2 l_tbattribute5_type;
    l_tbattribute6_tab2 l_tbattribute6_type;
    l_tbattribute7_tab2 l_tbattribute7_type;
    l_tbattribute8_tab2 l_tbattribute8_type;
    l_tbattribute9_tab2 l_tbattribute9_type;
    l_tbattribute10_tab2 l_tbattribute10_type;
    l_tbattribute11_tab2 l_tbattribute11_type;
    l_tbattribute12_tab2 l_tbattribute12_type;
    l_tbattribute13_tab2 l_tbattribute13_type;
    l_tbattribute14_tab2 l_tbattribute14_type;
    l_tbattribute15_tab2 l_tbattribute15_type;
    l_tbcreated_by_tab2 l_tbcreated_by_type;
    l_tbcreation_date_tab2 l_tbcreation_date_type;
    l_tblast_updated_by_tab2 l_tblast_updated_by_type;
    l_tblast_update_date_tab2 l_tblast_update_date_type;
    l_tblast_update_login_tab2 l_tblast_update_login_type;
    l_tbdepreciate_yn_tab2 l_tbdepreciate_yn_type;
    l_tbhold_period_days_tab2 l_tbhold_period_days_type;
    l_tbold_salvage_value_tab2 l_tbold_salvage_value_type;
    l_tbnew_residual_value_tab2 l_tbnew_residual_value_type;
    l_tbold_residual_value_tab2 l_tbold_residual_value_type;
    l_tbunits_retired_tab2 l_tbunits_retired_type;
    l_tbcost_retired_tab2 l_tbcost_retired_type;
    l_tbsale_proceeds_tab2 l_tbsale_proceeds_type;
    l_tbremoval_cost_tab2 l_tbremoval_cost_type;
    l_tbdnz_asset_id_tab2 l_tbdnz_asset_id_type;
    l_tbdate_due_tab2 l_tbdate_due_type;
    l_tbrep_asset_id_tab2 l_tbrep_asset_id_type;
    l_tblke_asset_id_tab2 l_tblke_asset_id_type;
    l_tbmatch_amount_tab2 l_tbmatch_amount_type;
    l_tbsplit_into_singles_fl_tab2 l_tbsplit_into_singles_fl_type;
    l_tbsplit_into_units_tab2 l_tbsplit_into_units_type;
    l_tbcurrency_code_tab2 l_tbcurrency_code_type;
    l_tbcurrency_convers_type_tab2 l_tbcurrency_convers_type_type;
    l_tbcurrency_convers_rate_tab2 l_tbcurrency_convers_rate_type;
    l_tbcurrency_convers_date_tab2 l_tbcurrency_convers_date_type;
    l_tbasset_key_id_tab2 l_tbasset_key_id_type;
    l_tbfa_trx_date_tab2 l_tbfa_trx_date_type;

  l_new_tas_id NUMBER;
  l_new_kle_id NUMBER;
  l_new_asset_number VARCHAR2(15);

BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  OPEN c18(p_old_id);
  LOOP
    FETCH c18 bulk collect INTO
      l_tbid_tab2, l_tbobject_version_number_tab2, l_tbtas_id_tab2,
      l_tbilo_id_tab2, l_tbilo_id_old_tab2, l_tbiay_id_tab2,
      l_tbiay_id_new_tab2, l_tbkle_id_tab2, l_tbdnz_khr_id_tab2,
      l_tbline_number_tab2, l_tborg_id_tab2, l_tbtal_type_tab2,
      l_tbasset_number_tab2, l_tbfa_location_id_tab2, l_tboriginal_cost_tab2,
      l_tbcurrent_units_tab2, l_tbmanufacturer_name_tab2, l_tbyear_manufactured_tab2,
      l_tbsupplier_id_tab2, l_tbused_asset_yn_tab2, l_tbtag_number_tab2,
      l_tbmodel_number_tab2, l_tbcorporate_book_tab2, l_tbdate_purchased_tab2,
      l_tbdate_delivery_tab2, l_tbin_service_date_tab2, l_tblife_in_months_tab2,
      l_tbdepreciation_id_tab2, l_tbdepreciation_cost_tab2, l_tbdeprn_method_tab2,
      l_tbdeprn_rate_tab2, l_tbsalvage_value_tab2, l_tbpercent_salvage_value_tab2,
      l_tbattribute_category_tab2, l_tbattribute1_tab2, l_tbattribute2_tab2,
      l_tbattribute3_tab2, l_tbattribute4_tab2, l_tbattribute5_tab2,
      l_tbattribute6_tab2, l_tbattribute7_tab2, l_tbattribute8_tab2,
      l_tbattribute9_tab2, l_tbattribute10_tab2, l_tbattribute11_tab2,
      l_tbattribute12_tab2, l_tbattribute13_tab2, l_tbattribute14_tab2,
      l_tbattribute15_tab2, l_tbcreated_by_tab2, l_tbcreation_date_tab2,
      l_tblast_updated_by_tab2, l_tblast_update_date_tab2, l_tblast_update_login_tab2,
      l_tbdepreciate_yn_tab2, l_tbhold_period_days_tab2, l_tbold_salvage_value_tab2,
      l_tbnew_residual_value_tab2, l_tbold_residual_value_tab2, l_tbunits_retired_tab2,
      l_tbcost_retired_tab2, l_tbsale_proceeds_tab2, l_tbremoval_cost_tab2,
      l_tbdnz_asset_id_tab2, l_tbdate_due_tab2, l_tbrep_asset_id_tab2,
      l_tblke_asset_id_tab2, l_tbmatch_amount_tab2, l_tbsplit_into_singles_fl_tab2,
      l_tbsplit_into_units_tab2, l_tbcurrency_code_tab2, l_tbcurrency_convers_type_tab2,
      l_tbcurrency_convers_rate_tab2, l_tbcurrency_convers_date_tab2, l_tbasset_key_id_tab2,
      l_tbfa_trx_date_tab2
    limit G_BULK_SIZE;
    EXIT WHEN l_tbid_tab2.COUNT = 0;
    FOR i IN l_tbid_tab2.first..l_tbid_tab2.last
    LOOP

      l_tbid_tab3(l_txl_assets_b_counter) := l_tbid_tab2(i);
      l_tbid_tab(l_txl_assets_b_counter) := l_tbid_tab2(i);
      -- Change id
      l_tbid_tab(l_txl_assets_b_counter) := okc_p_util.raw_to_number(sys_guid());
      l_txl_id_mapping_tab(l_txl_assets_b_counter).old_id := l_tbid_tab3(l_txl_assets_b_counter);
      l_txl_id_mapping_tab(l_txl_assets_b_counter).new_id := l_tbid_tab(l_txl_assets_b_counter);

      l_tbobject_version_number_tab(l_txl_assets_b_counter) := l_tbobject_version_number_tab2(i);
      l_tbtas_id_tab(l_txl_assets_b_counter) := l_tbtas_id_tab2(i);
      --Change tas_id
      l_new_tas_id := find_trx_mapping_id( l_tbtas_id_tab(l_txl_assets_b_counter));
        IF (l_new_tas_id = -1) THEN
          IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ERROR : Mapping id not found for ' || l_tbtas_id_tab(l_txl_assets_b_counter));
          END IF;
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        END IF;
      l_tbtas_id_tab(l_txl_assets_b_counter) := l_new_tas_id;

      l_tbilo_id_tab(l_txl_assets_b_counter) := l_tbilo_id_tab2(i);
      l_tbilo_id_old_tab(l_txl_assets_b_counter) := l_tbilo_id_old_tab2(i);
      l_tbiay_id_tab(l_txl_assets_b_counter) := l_tbiay_id_tab2(i);
      l_tbiay_id_new_tab(l_txl_assets_b_counter) := l_tbiay_id_new_tab2(i);
      l_tbkle_id_tab(l_txl_assets_b_counter) := l_tbkle_id_tab2(i);
      -- Change kle_id
      IF (l_tbkle_id_tab(l_txl_assets_b_counter) IS NOT NULL) THEN
        l_new_kle_id := find_mapping_id(l_tbkle_id_tab(l_txl_assets_b_counter));
        IF (l_new_kle_id = -1) THEN
          IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ERROR : Mapping id not found for ' || l_tbkle_id_tab(l_txl_assets_b_counter));
          END IF;
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        END IF;
        l_tbkle_id_tab(l_txl_assets_b_counter) := l_new_kle_id;
      END IF;

      -- Store Tal id to kle_id mapping
      l_dbid_mapping_tab(l_tal_to_kle_counter).tal_id := l_tbid_tab(l_txl_assets_b_counter);
      l_dbid_mapping_tab(l_tal_to_kle_counter).kle_id := l_tbkle_id_tab(l_txl_assets_b_counter);
      l_tal_to_kle_counter := l_tal_to_kle_counter + 1;

      l_tbdnz_khr_id_tab(l_txl_assets_b_counter) := l_tbdnz_khr_id_tab2(i);
      -- Change dnz_chr_id
      IF (l_tbdnz_khr_id_tab(l_txl_assets_b_counter) IS NOT NULL) THEN
        l_tbdnz_khr_id_tab(l_txl_assets_b_counter) := p_new_id;
      END IF;

      l_tbline_number_tab(l_txl_assets_b_counter) := l_tbline_number_tab2(i);
      l_tborg_id_tab(l_txl_assets_b_counter) := l_tborg_id_tab2(i);
      l_tbtal_type_tab(l_txl_assets_b_counter) := l_tbtal_type_tab2(i);
      l_tbasset_number_tab(l_txl_assets_b_counter) := l_tbasset_number_tab2(i);
      -- Change asset_number
      l_new_asset_number := find_aid_mapping_id(l_tbasset_number_tab(l_txl_assets_b_counter));
      IF (l_new_asset_number <> '-1') THEN
        l_tbasset_number_tab(l_txl_assets_b_counter) := l_new_asset_number;
      END IF;

      l_tbfa_location_id_tab(l_txl_assets_b_counter) := l_tbfa_location_id_tab2(i);
      l_tboriginal_cost_tab(l_txl_assets_b_counter) := l_tboriginal_cost_tab2(i);
      l_tbcurrent_units_tab(l_txl_assets_b_counter) := l_tbcurrent_units_tab2(i);
      l_tbmanufacturer_name_tab(l_txl_assets_b_counter) := l_tbmanufacturer_name_tab2(i);
      l_tbyear_manufactured_tab(l_txl_assets_b_counter) := l_tbyear_manufactured_tab2(i);
      l_tbsupplier_id_tab(l_txl_assets_b_counter) := l_tbsupplier_id_tab2(i);
      l_tbused_asset_yn_tab(l_txl_assets_b_counter) := l_tbused_asset_yn_tab2(i);
      l_tbtag_number_tab(l_txl_assets_b_counter) := l_tbtag_number_tab2(i);
      l_tbmodel_number_tab(l_txl_assets_b_counter) := l_tbmodel_number_tab2(i);
      l_tbcorporate_book_tab(l_txl_assets_b_counter) := l_tbcorporate_book_tab2(i);
      l_tbdate_purchased_tab(l_txl_assets_b_counter) := l_tbdate_purchased_tab2(i);
      l_tbdate_delivery_tab(l_txl_assets_b_counter) := l_tbdate_delivery_tab2(i);
      l_tbin_service_date_tab(l_txl_assets_b_counter) := l_tbin_service_date_tab2(i);
      l_tblife_in_months_tab(l_txl_assets_b_counter) := l_tblife_in_months_tab2(i);
      l_tbdepreciation_id_tab(l_txl_assets_b_counter) := l_tbdepreciation_id_tab2(i);
      l_tbdepreciation_cost_tab(l_txl_assets_b_counter) := l_tbdepreciation_cost_tab2(i);
      l_tbdeprn_method_tab(l_txl_assets_b_counter) := l_tbdeprn_method_tab2(i);
      l_tbdeprn_rate_tab(l_txl_assets_b_counter) := l_tbdeprn_rate_tab2(i);
      l_tbsalvage_value_tab(l_txl_assets_b_counter) := l_tbsalvage_value_tab2(i);
      l_tbpercent_salvage_value_tab(l_txl_assets_b_counter) := l_tbpercent_salvage_value_tab2(i);
      l_tbattribute_category_tab(l_txl_assets_b_counter) := l_tbattribute_category_tab2(i);
      l_tbattribute1_tab(l_txl_assets_b_counter) := l_tbattribute1_tab2(i);
      l_tbattribute2_tab(l_txl_assets_b_counter) := l_tbattribute2_tab2(i);
      l_tbattribute3_tab(l_txl_assets_b_counter) := l_tbattribute3_tab2(i);
      l_tbattribute4_tab(l_txl_assets_b_counter) := l_tbattribute4_tab2(i);
      l_tbattribute5_tab(l_txl_assets_b_counter) := l_tbattribute5_tab2(i);
      l_tbattribute6_tab(l_txl_assets_b_counter) := l_tbattribute6_tab2(i);
      l_tbattribute7_tab(l_txl_assets_b_counter) := l_tbattribute7_tab2(i);
      l_tbattribute8_tab(l_txl_assets_b_counter) := l_tbattribute8_tab2(i);
      l_tbattribute9_tab(l_txl_assets_b_counter) := l_tbattribute9_tab2(i);
      l_tbattribute10_tab(l_txl_assets_b_counter) := l_tbattribute10_tab2(i);
      l_tbattribute11_tab(l_txl_assets_b_counter) := l_tbattribute11_tab2(i);
      l_tbattribute12_tab(l_txl_assets_b_counter) := l_tbattribute12_tab2(i);
      l_tbattribute13_tab(l_txl_assets_b_counter) := l_tbattribute13_tab2(i);
      l_tbattribute14_tab(l_txl_assets_b_counter) := l_tbattribute14_tab2(i);
      l_tbattribute15_tab(l_txl_assets_b_counter) := l_tbattribute15_tab2(i);
      l_tbcreated_by_tab(l_txl_assets_b_counter) := l_tbcreated_by_tab2(i);
      l_tbcreation_date_tab(l_txl_assets_b_counter) := l_tbcreation_date_tab2(i);
      l_tblast_updated_by_tab(l_txl_assets_b_counter) := l_tblast_updated_by_tab2(i);
      l_tblast_update_date_tab(l_txl_assets_b_counter) := l_tblast_update_date_tab2(i);
      l_tblast_update_login_tab(l_txl_assets_b_counter) := l_tblast_update_login_tab2(i);
      l_tbdepreciate_yn_tab(l_txl_assets_b_counter) := l_tbdepreciate_yn_tab2(i);
      l_tbhold_period_days_tab(l_txl_assets_b_counter) := l_tbhold_period_days_tab2(i);
      l_tbold_salvage_value_tab(l_txl_assets_b_counter) := l_tbold_salvage_value_tab2(i);
      l_tbnew_residual_value_tab(l_txl_assets_b_counter) := l_tbnew_residual_value_tab2(i);
      l_tbold_residual_value_tab(l_txl_assets_b_counter) := l_tbold_residual_value_tab2(i);
      l_tbunits_retired_tab(l_txl_assets_b_counter) := l_tbunits_retired_tab2(i);
      l_tbcost_retired_tab(l_txl_assets_b_counter) := l_tbcost_retired_tab2(i);
      l_tbsale_proceeds_tab(l_txl_assets_b_counter) := l_tbsale_proceeds_tab2(i);
      l_tbremoval_cost_tab(l_txl_assets_b_counter) := l_tbremoval_cost_tab2(i);
      l_tbdnz_asset_id_tab(l_txl_assets_b_counter) := l_tbdnz_asset_id_tab2(i);
      l_tbdate_due_tab(l_txl_assets_b_counter) := l_tbdate_due_tab2(i);
      l_tbrep_asset_id_tab(l_txl_assets_b_counter) := l_tbrep_asset_id_tab2(i);
      l_tblke_asset_id_tab(l_txl_assets_b_counter) := l_tblke_asset_id_tab2(i);
      l_tbmatch_amount_tab(l_txl_assets_b_counter) := l_tbmatch_amount_tab2(i);
      l_tbsplit_into_singles_fl_tab(l_txl_assets_b_counter) := l_tbsplit_into_singles_fl_tab2(i);
      l_tbsplit_into_units_tab(l_txl_assets_b_counter) := l_tbsplit_into_units_tab2(i);
      /*l_tbcurrency_code_tab(l_txl_assets_b_counter) := l_tbcurrency_code_tab2(i);
      l_tbcurrency_convers_type_tab(l_txl_assets_b_counter) := l_tbcurrency_convers_type_tab2(i);
      l_tbcurrency_convers_rate_tab(l_txl_assets_b_counter) := l_tbcurrency_convers_rate_tab2(i);
      l_tbcurrency_convers_date_tab(l_txl_assets_b_counter) := l_tbcurrency_convers_date_tab2(i);*/
      -- AKP: Default the following four from the contract header
      l_tbcurrency_code_tab(l_txl_assets_b_counter) := l_contract_currency;
      l_tbcurrency_convers_type_tab(l_txl_assets_b_counter) := l_conversion_type;
      l_tbcurrency_convers_rate_tab(l_txl_assets_b_counter) := l_conversion_rate;
      l_tbcurrency_convers_date_tab(l_txl_assets_b_counter) := l_conversion_rate_date;
      l_tbasset_key_id_tab(l_txl_assets_b_counter) := l_tbasset_key_id_tab2(i);
      l_tbfa_trx_date_tab(l_txl_assets_b_counter) := l_tbfa_trx_date_tab2(i);

      l_txl_assets_b_counter := l_txl_assets_b_counter + 1;

    END LOOP;
  END LOOP;
  CLOSE c18;
  sort_dbid_mapping_tab;

  IF (l_txl_assets_b_counter > 1) THEN
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_txl_assets_b_counter=' || l_txl_assets_b_counter || ' l_tbid_tab.count=' || l_tbid_tab.COUNT);
    END IF;
    forall i IN l_tbid_tab.first..l_tbid_tab.last
    INSERT INTO okl_txl_assets_b (
     id, object_version_number, tas_id,
     ilo_id, ilo_id_old, iay_id,
     iay_id_new, kle_id, dnz_khr_id,
     line_number, org_id, tal_type,
     asset_number, fa_location_id, original_cost,
     current_units, manufacturer_name, year_manufactured,
     supplier_id, used_asset_yn, tag_number,
     model_number, corporate_book, date_purchased,
     date_delivery, in_service_date, life_in_months,
     depreciation_id, depreciation_cost, deprn_method,
     deprn_rate, salvage_value, percent_salvage_value,
     attribute_category, attribute1, attribute2,
     attribute3, attribute4, attribute5,
     attribute6, attribute7, attribute8,
     attribute9, attribute10, attribute11,
     attribute12, attribute13, attribute14,
     attribute15, created_by, creation_date,
     last_updated_by, last_update_date, last_update_login,
     depreciate_yn, hold_period_days, old_salvage_value,
     new_residual_value, old_residual_value, units_retired,
     cost_retired, sale_proceeds, removal_cost,
     dnz_asset_id, date_due, rep_asset_id,
     lke_asset_id, match_amount, split_into_singles_flag,
     split_into_units, currency_code, currency_conversion_type,
     currency_conversion_rate, currency_conversion_date, asset_key_id,
     fa_trx_date
    ) VALUES (
     l_tbid_tab(i), 1, l_tbtas_id_tab(i),
     l_tbilo_id_tab(i), l_tbilo_id_old_tab(i), l_tbiay_id_tab(i),
     l_tbiay_id_new_tab(i), l_tbkle_id_tab(i), l_tbdnz_khr_id_tab(i),
     l_tbline_number_tab(i), l_tborg_id_tab(i), p_trans_type,
     l_tbasset_number_tab(i), l_tbfa_location_id_tab(i), l_tboriginal_cost_tab(i),
     l_tbcurrent_units_tab(i), l_tbmanufacturer_name_tab(i), l_tbyear_manufactured_tab(i),
     l_tbsupplier_id_tab(i), l_tbused_asset_yn_tab(i), l_tbtag_number_tab(i),
     l_tbmodel_number_tab(i), l_tbcorporate_book_tab(i), l_tbdate_purchased_tab(i),
     l_tbdate_delivery_tab(i), l_tbin_service_date_tab(i), l_tblife_in_months_tab(i),
     l_tbdepreciation_id_tab(i), l_tbdepreciation_cost_tab(i), l_tbdeprn_method_tab(i),
     l_tbdeprn_rate_tab(i), l_tbsalvage_value_tab(i), l_tbpercent_salvage_value_tab(i),
     l_tbattribute_category_tab(i), l_tbattribute1_tab(i), l_tbattribute2_tab(i),
     l_tbattribute3_tab(i), l_tbattribute4_tab(i), l_tbattribute5_tab(i),
     l_tbattribute6_tab(i), l_tbattribute7_tab(i), l_tbattribute8_tab(i),
     l_tbattribute9_tab(i), l_tbattribute10_tab(i), l_tbattribute11_tab(i),
     l_tbattribute12_tab(i), l_tbattribute13_tab(i), l_tbattribute14_tab(i),
     l_tbattribute15_tab(i), l_created_by, SYSDATE,
     l_last_updated_by, SYSDATE, l_last_update_login,
     l_tbdepreciate_yn_tab(i), l_tbhold_period_days_tab(i), l_tbold_salvage_value_tab(i),
     l_tbnew_residual_value_tab(i), l_tbold_residual_value_tab(i), l_tbunits_retired_tab(i),
     l_tbcost_retired_tab(i), l_tbsale_proceeds_tab(i), l_tbremoval_cost_tab(i),
     l_tbdnz_asset_id_tab(i), l_tbdate_due_tab(i), l_tbrep_asset_id_tab(i),
     l_tblke_asset_id_tab(i), l_tbmatch_amount_tab(i), l_tbsplit_into_singles_fl_tab(i),
     l_tbsplit_into_units_tab(i), l_tbcurrency_code_tab(i), l_tbcurrency_convers_type_tab(i),
     l_tbcurrency_convers_rate_tab(i), l_tbcurrency_convers_date_tab(i), l_tbasset_key_id_tab(i),
     NULL
    );

    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Inserting okl_txl_assets_b done...' || TO_CHAR(SYSDATE,'HH24:MI:SS'));
    END IF;
    sort_txl_id_mapping_tab;
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Inserting okl_txl_assets_tl...' || TO_CHAR(SYSDATE,'HH24:MI:SS'));
    END IF;
    FOR i IN l_tbid_tab.first..l_tbid_tab.last
    LOOP
      IF (i = l_tbid_tab.last) THEN
        insert_okl_txl_assets_tl(l_tbid_tab3(i), l_tbid_tab(i), 'Y');
      ELSE
        insert_okl_txl_assets_tl(l_tbid_tab3(i), l_tbid_tab(i), 'N');
      END IF;
    END LOOP;

    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Inserting okl_txd_assets_b ' || TO_CHAR(SYSDATE,'HH24:MI:SS'));
    END IF;
    l_message := 'OKL_NEW_COPY_ASD_ERROR';
    insert_okl_txd_assets_b(p_chr_id, l_copied_id);
  END IF;

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'insert_okl_txl_assets_b');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing insert_okl_txl_assets_b:l_tbid_tab.count=' || l_tbid_tab.COUNT || ' ...');
  END IF;
  IF (l_tbid_tab.COUNT > 0) THEN
  FOR i IN l_tbid_tab.first..l_tbid_tab.last
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbid_tab('||i||')=' || l_tbid_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbtas_id_tab('||i||')=' || l_tbtas_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbilo_id_tab('||i||')=' || l_tbilo_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbilo_id_old_tab('||i||')=' || l_tbilo_id_old_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbiay_id_tab('||i||')=' || l_tbiay_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbiay_id_new_tab('||i||')=' || l_tbiay_id_new_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbkle_id_tab('||i||')=' || l_tbkle_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbdnz_khr_id_tab('||i||')=' || l_tbdnz_khr_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbline_number_tab('||i||')=' || l_tbline_number_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tborg_id_tab('||i||')=' || l_tborg_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbasset_number_tab('||i||')=' || l_tbasset_number_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbfa_location_id_tab('||i||')=' || l_tbfa_location_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tboriginal_cost_tab('||i||')=' || l_tboriginal_cost_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbcurrent_units_tab('||i||')=' || l_tbcurrent_units_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbmanufacturer_name_tab('||i||')=' || l_tbmanufacturer_name_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbyear_manufactured_tab('||i||')=' || l_tbyear_manufactured_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbsupplier_id_tab('||i||')=' || l_tbsupplier_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbused_asset_yn_tab('||i||')=' || l_tbused_asset_yn_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbtag_number_tab('||i||')=' || l_tbtag_number_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbmodel_number_tab('||i||')=' || l_tbmodel_number_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbcorporate_book_tab('||i||')=' || l_tbcorporate_book_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbdate_purchased_tab('||i||')=' || l_tbdate_purchased_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbdate_delivery_tab('||i||')=' || l_tbdate_delivery_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbin_service_date_tab('||i||')=' || l_tbin_service_date_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tblife_in_months_tab('||i||')=' || l_tblife_in_months_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbdepreciation_id_tab('||i||')=' || l_tbdepreciation_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbdepreciation_cost_tab('||i||')=' || l_tbdepreciation_cost_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbdeprn_method_tab('||i||')=' || l_tbdeprn_method_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbdeprn_rate_tab('||i||')=' || l_tbdeprn_rate_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbsalvage_value_tab('||i||')=' || l_tbsalvage_value_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbpercent_salvage_value_tab('||i||')=' || l_tbpercent_salvage_value_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbattribute_category_tab('||i||')=' || l_tbattribute_category_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbattribute1_tab('||i||')=' || l_tbattribute1_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbattribute2_tab('||i||')=' || l_tbattribute2_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbattribute3_tab('||i||')=' || l_tbattribute3_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbattribute4_tab('||i||')=' || l_tbattribute4_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbattribute5_tab('||i||')=' || l_tbattribute5_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbattribute6_tab('||i||')=' || l_tbattribute6_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbattribute7_tab('||i||')=' || l_tbattribute7_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbattribute8_tab('||i||')=' || l_tbattribute8_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbattribute9_tab('||i||')=' || l_tbattribute9_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbattribute10_tab('||i||')=' || l_tbattribute10_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbattribute11_tab('||i||')=' || l_tbattribute11_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbattribute12_tab('||i||')=' || l_tbattribute12_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbattribute13_tab('||i||')=' || l_tbattribute13_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbattribute14_tab('||i||')=' || l_tbattribute14_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbattribute15_tab('||i||')=' || l_tbattribute15_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbdepreciate_yn_tab('||i||')=' || l_tbdepreciate_yn_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbhold_period_days_tab('||i||')=' || l_tbhold_period_days_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbold_salvage_value_tab('||i||')=' || l_tbold_salvage_value_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbnew_residual_value_tab('||i||')=' || l_tbnew_residual_value_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbold_residual_value_tab('||i||')=' || l_tbold_residual_value_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbunits_retired_tab('||i||')=' || l_tbunits_retired_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbcost_retired_tab('||i||')=' || l_tbcost_retired_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbsale_proceeds_tab('||i||')=' || l_tbsale_proceeds_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbremoval_cost_tab('||i||')=' || l_tbremoval_cost_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbdnz_asset_id_tab('||i||')=' || l_tbdnz_asset_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbdate_due_tab('||i||')=' || l_tbdate_due_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbrep_asset_id_tab('||i||')=' || l_tbrep_asset_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tblke_asset_id_tab('||i||')=' || l_tblke_asset_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbmatch_amount_tab('||i||')=' || l_tbmatch_amount_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbsplit_into_singles_fl_tab('||i||')=' || l_tbsplit_into_singles_fl_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbsplit_into_units_tab('||i||')=' || l_tbsplit_into_units_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbcurrency_code_tab('||i||')=' || l_tbcurrency_code_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbcurrency_convers_type_tab('||i||')=' || l_tbcurrency_convers_type_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbcurrency_convers_rate_tab('||i||')=' || l_tbcurrency_convers_rate_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbcurrency_convers_date_tab('||i||')=' || l_tbcurrency_convers_date_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tbasset_key_id_tab('||i||')=' || l_tbasset_key_id_tab(i));
    END IF;
  END LOOP;
  END IF;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;  /* insert_okl_txl_assets_b */

PROCEDURE insert_okl_trx_assets(p_old_id IN okc_k_headers_b.id%TYPE,
                                p_new_id IN okc_k_headers_b.id%TYPE) IS
CURSOR c17(p_id NUMBER) IS
SELECT
     id, ica_id, tas_type,
     object_version_number, attribute_category, attribute1,
     attribute2, attribute3, attribute4,
     attribute5, attribute6, attribute7,
     attribute8, attribute9, attribute10,
     attribute11, attribute12, attribute13,
     attribute14, attribute15, created_by,
     creation_date, last_updated_by, last_update_date,
     last_update_login, tsu_code, try_id,
     date_trans_occurred, trans_number, comments,
     req_asset_id, total_match_amount, org_id,legal_entity_id
FROM okl_trx_assets
WHERE id IN
  (SELECT a.tas_id FROM okl_txl_assets_b a,
          okc_k_lines_b b,
          okc_k_items c
   WHERE  a.dnz_khr_id = p_id
   AND    b.dnz_chr_id = p_id
   AND    c.dnz_chr_id = p_id
   AND    b.lse_id = 42
   AND    a.kle_id = b.id
   AND    a.kle_id = c.cle_id
   AND    c.object1_id1 IS NULL
   AND    c.object1_id2 IS NULL);

    l_tid_tab2 l_tid_type;
    l_tica_id_tab2 l_tica_id_type;
    l_ttas_type_tab2 l_ttas_type_type;
    l_tobject_version_number_tab2 l_tobject_version_number_type;
    l_tattribute_category_tab2 l_tattribute_category_type;
    l_tattribute1_tab2 l_tattribute1_type;
    l_tattribute2_tab2 l_tattribute2_type;
    l_tattribute3_tab2 l_tattribute3_type;
    l_tattribute4_tab2 l_tattribute4_type;
    l_tattribute5_tab2 l_tattribute5_type;
    l_tattribute6_tab2 l_tattribute6_type;
    l_tattribute7_tab2 l_tattribute7_type;
    l_tattribute8_tab2 l_tattribute8_type;
    l_tattribute9_tab2 l_tattribute9_type;
    l_tattribute10_tab2 l_tattribute10_type;
    l_tattribute11_tab2 l_tattribute11_type;
    l_tattribute12_tab2 l_tattribute12_type;
    l_tattribute13_tab2 l_tattribute13_type;
    l_tattribute14_tab2 l_tattribute14_type;
    l_tattribute15_tab2 l_tattribute15_type;
    l_tcreated_by_tab2 l_tcreated_by_type;
    l_tcreation_date_tab2 l_tcreation_date_type;
    l_tlast_updated_by_tab2 l_tlast_updated_by_type;
    l_tlast_update_date_tab2 l_tlast_update_date_type;
    l_tlast_update_login_tab2 l_tlast_update_login_type;
    l_ttsu_code_tab2 l_ttsu_code_type;
    l_ttry_id_tab2 l_ttry_id_type;
    l_tdate_trans_occurred_tab2 l_tdate_trans_occurred_type;
    l_ttrans_number_tab2 l_ttrans_number_type;
    l_tcomments_tab2 l_tcomments_type;
    l_treq_asset_id_tab2 l_treq_asset_id_type;
    l_ttotal_match_amount_tab2 l_ttotal_match_amount_type;
    l_torg_id_tab2 l_torg_id_type;
    l_tlegal_entity_id_tab2  l_tlegal_entity_id_type;

BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  OPEN c17(p_old_id);
  LOOP
    FETCH c17 bulk collect INTO
     l_tid_tab2, l_tica_id_tab2, l_ttas_type_tab2,
     l_tobject_version_number_tab2, l_tattribute_category_tab2, l_tattribute1_tab2,
     l_tattribute2_tab2, l_tattribute3_tab2, l_tattribute4_tab2,
     l_tattribute5_tab2, l_tattribute6_tab2, l_tattribute7_tab2,
     l_tattribute8_tab2, l_tattribute9_tab2, l_tattribute10_tab2,
     l_tattribute11_tab2, l_tattribute12_tab2, l_tattribute13_tab2,
     l_tattribute14_tab2, l_tattribute15_tab2, l_tcreated_by_tab2,
     l_tcreation_date_tab2, l_tlast_updated_by_tab2, l_tlast_update_date_tab2,
     l_tlast_update_login_tab2, l_ttsu_code_tab2, l_ttry_id_tab2,
     l_tdate_trans_occurred_tab2, l_ttrans_number_tab2, l_tcomments_tab2,
     l_treq_asset_id_tab2, l_ttotal_match_amount_tab2, l_torg_id_tab2,l_tlegal_entity_id_tab2
    limit G_BULK_SIZE;
    EXIT WHEN l_tid_tab2.COUNT = 0;
    FOR i IN l_tid_tab2.first..l_tid_tab2.last
    LOOP

      l_tid_tab(l_trx_assets_counter) := l_tid_tab2(i);
      l_trx_id_mapping_tab(l_trx_assets_counter).old_id := l_tid_tab2(i);

      --Change id
      l_tid_tab(l_trx_assets_counter) := okc_p_util.raw_to_number(sys_guid());
      l_trx_id_mapping_tab(l_trx_assets_counter).new_id := l_tid_tab(l_trx_assets_counter);

      l_tica_id_tab(l_trx_assets_counter) := l_tica_id_tab2(i);
      l_ttas_type_tab(l_trx_assets_counter) := l_ttas_type_tab2(i);
      l_tobject_version_number_tab(l_trx_assets_counter) := l_tobject_version_number_tab2(i);
      l_tattribute_category_tab(l_trx_assets_counter) := l_tattribute_category_tab2(i);
      l_tattribute1_tab(l_trx_assets_counter) := l_tattribute1_tab2(i);
      l_tattribute2_tab(l_trx_assets_counter) := l_tattribute2_tab2(i);
      l_tattribute3_tab(l_trx_assets_counter) := l_tattribute3_tab2(i);
      l_tattribute4_tab(l_trx_assets_counter) := l_tattribute4_tab2(i);
      l_tattribute5_tab(l_trx_assets_counter) := l_tattribute5_tab2(i);
      l_tattribute6_tab(l_trx_assets_counter) := l_tattribute6_tab2(i);
      l_tattribute7_tab(l_trx_assets_counter) := l_tattribute7_tab2(i);
      l_tattribute8_tab(l_trx_assets_counter) := l_tattribute8_tab2(i);
      l_tattribute9_tab(l_trx_assets_counter) := l_tattribute9_tab2(i);
      l_tattribute10_tab(l_trx_assets_counter) := l_tattribute10_tab2(i);
      l_tattribute11_tab(l_trx_assets_counter) := l_tattribute11_tab2(i);
      l_tattribute12_tab(l_trx_assets_counter) := l_tattribute12_tab2(i);
      l_tattribute13_tab(l_trx_assets_counter) := l_tattribute13_tab2(i);
      l_tattribute14_tab(l_trx_assets_counter) := l_tattribute14_tab2(i);
      l_tattribute15_tab(l_trx_assets_counter) := l_tattribute15_tab2(i);
      l_tcreated_by_tab(l_trx_assets_counter) := l_tcreated_by_tab2(i);
      l_tcreation_date_tab(l_trx_assets_counter) := l_tcreation_date_tab2(i);
      l_tlast_updated_by_tab(l_trx_assets_counter) := l_tlast_updated_by_tab2(i);
      l_tlast_update_date_tab(l_trx_assets_counter) := l_tlast_update_date_tab2(i);
      l_tlast_update_login_tab(l_trx_assets_counter) := l_tlast_update_login_tab2(i);
      l_ttsu_code_tab(l_trx_assets_counter) := l_ttsu_code_tab2(i);
      l_ttry_id_tab(l_trx_assets_counter) := l_ttry_id_tab2(i);
      l_tdate_trans_occurred_tab(l_trx_assets_counter) := l_tdate_trans_occurred_tab2(i);
      l_ttrans_number_tab(l_trx_assets_counter) := l_ttrans_number_tab2(i);
      l_tcomments_tab(l_trx_assets_counter) := l_tcomments_tab2(i);
      l_treq_asset_id_tab(l_trx_assets_counter) := l_treq_asset_id_tab2(i);
      l_ttotal_match_amount_tab(l_trx_assets_counter) := l_ttotal_match_amount_tab2(i);
      l_torg_id_tab(l_trx_assets_counter) := l_torg_id_tab2(i);
      l_tlegal_entity_id_tab(l_trx_assets_counter) := l_tlegal_entity_id_tab2(i);

      l_trx_assets_counter := l_trx_assets_counter + 1;
    END LOOP;
  END LOOP;
  CLOSE c17;

  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_trx_assets_counter=' || l_trx_assets_counter || ' l_tid_tab.count=' || l_tid_tab.COUNT);
  END IF;
  IF (l_trx_assets_counter > 1) THEN
    forall i IN l_tid_tab.first..l_tid_tab.last
    INSERT INTO okl_trx_assets (
     id, ica_id, tas_type,
     object_version_number, attribute_category, attribute1,
     attribute2, attribute3, attribute4,
     attribute5, attribute6, attribute7,
     attribute8, attribute9, attribute10,
     attribute11, attribute12, attribute13,
     attribute14, attribute15, created_by,
     creation_date, last_updated_by, last_update_date,
     last_update_login, tsu_code, try_id,
     date_trans_occurred, trans_number, comments,
     req_asset_id, total_match_amount, org_id,legal_entity_id
     ,transaction_date
    ) VALUES (
     l_tid_tab(i), l_tica_id_tab(i), p_trans_type,
     1, l_tattribute_category_tab(i), l_tattribute1_tab(i),
     l_tattribute2_tab(i), l_tattribute3_tab(i), l_tattribute4_tab(i),
     l_tattribute5_tab(i), l_tattribute6_tab(i), l_tattribute7_tab(i),
     l_tattribute8_tab(i), l_tattribute9_tab(i), l_tattribute10_tab(i),
     l_tattribute11_tab(i), l_tattribute12_tab(i), l_tattribute13_tab(i),
     l_tattribute14_tab(i), l_tattribute15_tab(i), l_created_by,
     SYSDATE, l_last_updated_by, SYSDATE,
     l_last_update_login, 'ENTERED', l_ttry_id_tab(i),
     SYSDATE, okl_trn_seq.NEXTVAL, l_tcomments_tab(i),
     l_treq_asset_id_tab(i), l_ttotal_match_amount_tab(i), l_torg_id_tab(i),l_tlegal_entity_id_tab(i)
     ,SYSDATE
    );

    sort_trx_id_mapping_tab;

    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Inserting okl_txl_assets_b...' || TO_CHAR(SYSDATE,'HH24:MI:SS'));
    END IF;
    l_message := 'OKL_NEW_COPY_TAL_ERROR';
    insert_okl_txl_assets_b(p_chr_id, l_copied_id);

  END IF;
EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'insert_okl_trx_assets');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing insert_okl_trx_assets:l_tid_tab.count=' || l_tid_tab.COUNT || ' ...');
  END IF;
  IF (l_tid_tab.COUNT > 0) THEN
  FOR i IN l_tid_tab.first..l_tid_tab.last
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tid_tab('||i||')=' || l_tid_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tica_id_tab('||i||')=' || l_tica_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tattribute_category_tab('||i||')=' || l_tattribute_category_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tattribute1_tab('||i||')=' || l_tattribute1_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tattribute2_tab('||i||')=' || l_tattribute2_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tattribute3_tab('||i||')=' || l_tattribute3_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tattribute4_tab('||i||')=' || l_tattribute4_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tattribute5_tab('||i||')=' || l_tattribute5_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tattribute6_tab('||i||')=' || l_tattribute6_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tattribute7_tab('||i||')=' || l_tattribute7_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tattribute8_tab('||i||')=' || l_tattribute8_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tattribute9_tab('||i||')=' || l_tattribute9_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tattribute10_tab('||i||')=' || l_tattribute10_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tattribute11_tab('||i||')=' || l_tattribute11_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tattribute12_tab('||i||')=' || l_tattribute12_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tattribute13_tab('||i||')=' || l_tattribute13_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tattribute14_tab('||i||')=' || l_tattribute14_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tattribute15_tab('||i||')=' || l_tattribute15_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ttry_id_tab('||i||')=' || l_ttry_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tcomments_tab('||i||')=' || l_tcomments_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_treq_asset_id_tab('||i||')=' || l_treq_asset_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ttotal_match_amount_tab('||i||')=' || l_ttotal_match_amount_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_torg_id_tab('||i||')=' || l_torg_id_tab(i));
    END IF;
  END LOOP;
  END IF;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;  /* insert_okl_trx_assets */

PROCEDURE insert_okl_trx_assets_2(p_old_id IN okc_k_headers_b.id%TYPE,
                                 p_new_id IN okc_k_headers_b.id%TYPE) IS
CURSOR c17_2(p_id NUMBER) IS
SELECT
     id, ica_id, tas_type,
     object_version_number, attribute_category, attribute1,
     attribute2, attribute3, attribute4,
     attribute5, attribute6, attribute7,
     attribute8, attribute9, attribute10,
     attribute11, attribute12, attribute13,
     attribute14, attribute15, created_by,
     creation_date, last_updated_by, last_update_date,
     last_update_login, tsu_code, try_id,
     date_trans_occurred, trans_number, comments,
     req_asset_id, total_match_amount, org_id,legal_entity_id
FROM okl_trx_assets
WHERE id IN
(
  SELECT tas_id
  FROM okl_txl_itm_insts b
  WHERE kle_id IN
   (SELECT a.id
    FROM okc_k_lines_b a,
         okc_k_items   c
    WHERE   a.dnz_chr_id = p_id
    AND c.dnz_chr_id = p_id
    AND c.cle_id = a.id
    AND    a.lse_id = 45
    AND    c.object1_id1 IS NULL
    AND    c.object1_id2 IS NULL)
);

    l_t2id_tab2 l_t2id_type;
    l_t2ica_id_tab2 l_t2ica_id_type;
    l_t2tas_type_tab2 l_t2tas_type_type;
    l_t2object_version_number_tab2 l_t2object_version_number_type;
    l_t2attribute_category_tab2 l_t2attribute_category_type;
    l_t2attribute1_tab2 l_t2attribute1_type;
    l_t2attribute2_tab2 l_t2attribute2_type;
    l_t2attribute3_tab2 l_t2attribute3_type;
    l_t2attribute4_tab2 l_t2attribute4_type;
    l_t2attribute5_tab2 l_t2attribute5_type;
    l_t2attribute6_tab2 l_t2attribute6_type;
    l_t2attribute7_tab2 l_t2attribute7_type;
    l_t2attribute8_tab2 l_t2attribute8_type;
    l_t2attribute9_tab2 l_t2attribute9_type;
    l_t2attribute10_tab2 l_t2attribute10_type;
    l_t2attribute11_tab2 l_t2attribute11_type;
    l_t2attribute12_tab2 l_t2attribute12_type;
    l_t2attribute13_tab2 l_t2attribute13_type;
    l_t2attribute14_tab2 l_t2attribute14_type;
    l_t2attribute15_tab2 l_t2attribute15_type;
    l_t2created_by_tab2 l_t2created_by_type;
    l_t2creation_date_tab2 l_t2creation_date_type;
    l_t2last_updated_by_tab2 l_t2last_updated_by_type;
    l_t2last_update_date_tab2 l_t2last_update_date_type;
    l_t2last_update_login_tab2 l_t2last_update_login_type;
    l_t2tsu_code_tab2 l_t2tsu_code_type;
    l_t2try_id_tab2 l_t2try_id_type;
    l_t2date_trans_occurred_tab2 l_t2date_trans_occurred_type;
    l_t2trans_number_tab2 l_t2trans_number_type;
    l_t2comments_tab2 l_t2comments_type;
    l_t2req_asset_id_tab2 l_t2req_asset_id_type;
    l_t2total_match_amount_tab2 l_t2total_match_amount_type;
    l_t2org_id_tab2 l_t2org_id_type;
    l_t2legal_entity_id_tab2 l_t2legal_entity_id_type;

BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  OPEN c17_2(p_old_id);
  LOOP
    FETCH c17_2 bulk collect INTO
     l_t2id_tab2, l_t2ica_id_tab2, l_t2tas_type_tab2,
     l_t2object_version_number_tab2, l_t2attribute_category_tab2, l_t2attribute1_tab2,
     l_t2attribute2_tab2, l_t2attribute3_tab2, l_t2attribute4_tab2,
     l_t2attribute5_tab2, l_t2attribute6_tab2, l_t2attribute7_tab2,
     l_t2attribute8_tab2, l_t2attribute9_tab2, l_t2attribute10_tab2,
     l_t2attribute11_tab2, l_t2attribute12_tab2, l_t2attribute13_tab2,
     l_t2attribute14_tab2, l_t2attribute15_tab2, l_t2created_by_tab2,
     l_t2creation_date_tab2, l_t2last_updated_by_tab2, l_t2last_update_date_tab2,
     l_t2last_update_login_tab2, l_t2tsu_code_tab2, l_t2try_id_tab2,
     l_t2date_trans_occurred_tab2, l_t2trans_number_tab2, l_t2comments_tab2,
     l_t2req_asset_id_tab2, l_t2total_match_amount_tab2, l_t2org_id_tab2,l_t2legal_entity_id_tab2
    limit G_BULK_SIZE;
    EXIT WHEN l_t2id_tab2.COUNT = 0;
    FOR i IN l_t2id_tab2.first..l_t2id_tab2.last
    LOOP

      l_t2id_tab(l_trx_assets_counter2) := l_t2id_tab2(i);
      l_trx_id_mapping_tab2(l_trx_assets_counter2).old_id := l_t2id_tab2(i);
      -- Change id
      l_t2id_tab(l_trx_assets_counter2) := okc_p_util.raw_to_number(sys_guid());
      l_trx_id_mapping_tab2(l_trx_assets_counter2).new_id := l_t2id_tab(l_trx_assets_counter2);

      l_t2ica_id_tab(l_trx_assets_counter2) := l_t2ica_id_tab2(i);
      l_t2tas_type_tab(l_trx_assets_counter2) := l_t2tas_type_tab2(i);
      l_t2object_version_number_tab(l_trx_assets_counter2) := l_t2object_version_number_tab2(i);
      l_t2attribute_category_tab(l_trx_assets_counter2) := l_t2attribute_category_tab2(i);
      l_t2attribute1_tab(l_trx_assets_counter2) := l_t2attribute1_tab2(i);
      l_t2attribute2_tab(l_trx_assets_counter2) := l_t2attribute2_tab2(i);
      l_t2attribute3_tab(l_trx_assets_counter2) := l_t2attribute3_tab2(i);
      l_t2attribute4_tab(l_trx_assets_counter2) := l_t2attribute4_tab2(i);
      l_t2attribute5_tab(l_trx_assets_counter2) := l_t2attribute5_tab2(i);
      l_t2attribute6_tab(l_trx_assets_counter2) := l_t2attribute6_tab2(i);
      l_t2attribute7_tab(l_trx_assets_counter2) := l_t2attribute7_tab2(i);
      l_t2attribute8_tab(l_trx_assets_counter2) := l_t2attribute8_tab2(i);
      l_t2attribute9_tab(l_trx_assets_counter2) := l_t2attribute9_tab2(i);
      l_t2attribute10_tab(l_trx_assets_counter2) := l_t2attribute10_tab2(i);
      l_t2attribute11_tab(l_trx_assets_counter2) := l_t2attribute11_tab2(i);
      l_t2attribute12_tab(l_trx_assets_counter2) := l_t2attribute12_tab2(i);
      l_t2attribute13_tab(l_trx_assets_counter2) := l_t2attribute13_tab2(i);
      l_t2attribute14_tab(l_trx_assets_counter2) := l_t2attribute14_tab2(i);
      l_t2attribute15_tab(l_trx_assets_counter2) := l_t2attribute15_tab2(i);
      l_t2created_by_tab(l_trx_assets_counter2) := l_t2created_by_tab2(i);
      l_t2creation_date_tab(l_trx_assets_counter2) := l_t2creation_date_tab2(i);
      l_t2last_updated_by_tab(l_trx_assets_counter2) := l_t2last_updated_by_tab2(i);
      l_t2last_update_date_tab(l_trx_assets_counter2) := l_t2last_update_date_tab2(i);
      l_t2last_update_login_tab(l_trx_assets_counter2) := l_t2last_update_login_tab2(i);
      l_t2tsu_code_tab(l_trx_assets_counter2) := l_t2tsu_code_tab2(i);
      l_t2try_id_tab(l_trx_assets_counter2) := l_t2try_id_tab2(i);
      l_t2date_trans_occurred_tab(l_trx_assets_counter2) := l_t2date_trans_occurred_tab2(i);
      l_t2trans_number_tab(l_trx_assets_counter2) := l_t2trans_number_tab2(i);
      l_t2comments_tab(l_trx_assets_counter2) := l_t2comments_tab2(i);
      l_t2req_asset_id_tab(l_trx_assets_counter2) := l_t2req_asset_id_tab2(i);
      l_t2total_match_amount_tab(l_trx_assets_counter2) := l_t2total_match_amount_tab2(i);
      l_t2org_id_tab(l_trx_assets_counter2) := l_t2org_id_tab2(i);
      l_t2legal_entity_id_tab(l_trx_assets_counter2) := l_t2legal_entity_id_tab2(i);

      l_trx_assets_counter2 := l_trx_assets_counter2 + 1;

    END LOOP;
  END LOOP;
  CLOSE c17_2;

  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_trx_assets_counter2=' || l_trx_assets_counter2 || ' l_t2id_tab.count=' || l_t2id_tab.COUNT);
  END IF;
  IF (l_trx_assets_counter2 > 1) THEN
    forall i IN l_t2id_tab.first..l_t2id_tab.last
    INSERT INTO okl_trx_assets (
     id, ica_id, tas_type,
     object_version_number, attribute_category, attribute1,
     attribute2, attribute3, attribute4,
     attribute5, attribute6, attribute7,
     attribute8, attribute9, attribute10,
     attribute11, attribute12, attribute13,
     attribute14, attribute15, created_by,
     creation_date, last_updated_by, last_update_date,
     last_update_login, tsu_code, try_id,
     date_trans_occurred, trans_number, comments,
     req_asset_id, total_match_amount, org_id,legal_entity_id
     ,transaction_date
    ) VALUES (
     l_t2id_tab(i), l_t2ica_id_tab(i), p_trans_type,
     1, l_t2attribute_category_tab(i), l_t2attribute1_tab(i),
     l_t2attribute2_tab(i), l_t2attribute3_tab(i), l_t2attribute4_tab(i),
     l_t2attribute5_tab(i), l_t2attribute6_tab(i), l_t2attribute7_tab(i),
     l_t2attribute8_tab(i), l_t2attribute9_tab(i), l_t2attribute10_tab(i),
     l_t2attribute11_tab(i), l_t2attribute12_tab(i), l_t2attribute13_tab(i),
     l_t2attribute14_tab(i), l_t2attribute15_tab(i), l_created_by,
     SYSDATE, l_last_updated_by, SYSDATE,
     l_last_update_login, 'ENTERED', l_t2try_id_tab(i),
     SYSDATE, okl_trn_seq.NEXTVAL, l_t2comments_tab(i),
     l_t2req_asset_id_tab(i), l_t2total_match_amount_tab(i), l_t2org_id_tab(i),l_t2legal_entity_id_tab(i)
     ,SYSDATE
    );

    sort_trx_id_mapping_tab2;

  END IF;
EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'insert_okl_trx_assets_2');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing insert_okl_trx_assets_2:l_t2id_tab.count=' || l_t2id_tab.COUNT || ' ...');
  END IF;
  IF (l_t2id_tab.COUNT > 0) THEN
  FOR i IN l_t2id_tab.first..l_t2id_tab.last
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_t2id_tab('||i||')=' || l_t2id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_t2ica_id_tab('||i||')=' || l_t2ica_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_t2attribute_category_tab('||i||')=' || l_t2attribute_category_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_t2attribute1_tab('||i||')=' || l_t2attribute1_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_t2attribute2_tab('||i||')=' || l_t2attribute2_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_t2attribute3_tab('||i||')=' || l_t2attribute3_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_t2attribute4_tab('||i||')=' || l_t2attribute4_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_t2attribute5_tab('||i||')=' || l_t2attribute5_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_t2attribute6_tab('||i||')=' || l_t2attribute6_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_t2attribute7_tab('||i||')=' || l_t2attribute7_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_t2attribute8_tab('||i||')=' || l_t2attribute8_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_t2attribute9_tab('||i||')=' || l_t2attribute9_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_t2attribute10_tab('||i||')=' || l_t2attribute10_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_t2attribute11_tab('||i||')=' || l_t2attribute11_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_t2attribute12_tab('||i||')=' || l_t2attribute12_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_t2attribute13_tab('||i||')=' || l_t2attribute13_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_t2attribute14_tab('||i||')=' || l_t2attribute14_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_t2attribute15_tab('||i||')=' || l_t2attribute15_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_t2try_id_tab('||i||')=' || l_t2try_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_t2comments_tab('||i||')=' || l_t2comments_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_t2req_asset_id_tab('||i||')=' || l_t2req_asset_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_t2total_match_amount_tab('||i||')=' || l_t2total_match_amount_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_t2org_id_tab('||i||')=' || l_t2org_id_tab(i));
    END IF;
  END LOOP;
  END IF;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;  /* insert_okl_trx_assets_2 */

-- AKP: Delete this function from here. And use
-- okl_copy_asset_pvt.generate_instance_number_ib instead

  FUNCTION generate_instance_number_ib(x_instance_number_ib  OUT NOCOPY  OKL_TXL_ITM_INSTS_V.INSTANCE_NUMBER_IB%TYPE)
  RETURN VARCHAR2 IS
    x_return_status            VARCHAR2(3) := OKL_API.G_RET_STS_SUCCESS;
    G_APP_NAME                    CONSTANT  VARCHAR2(3)   :=  OKL_API.G_APP_NAME;
    G_UNEXPECTED_ERROR            CONSTANT  VARCHAR2(200) := 'OKL_CONTRACTS_UNEXP_ERROR';
    G_SQLCODE_TOKEN               CONSTANT  VARCHAR2(200) := 'SQLcode';
    G_SQLERRM_TOKEN               CONSTANT  VARCHAR2(200) := 'SQLerrm';
    -- cursor to get sequence number for asset number
    CURSOR c_instance_no_ib IS
    SELECT TO_CHAR(OKL_IBN_SEQ.NEXTVAL)
    FROM dual;
  BEGIN
    OPEN  c_instance_no_ib;
    FETCH c_instance_no_ib INTO x_instance_number_ib;
    IF (c_instance_no_ib%NOTFOUND) THEN
      x_return_status := OKC_API.G_RET_STS_ERROR;
      OKL_API.SET_MESSAGE(p_app_name 	 => g_app_name,
                          p_msg_name	 => g_unexpected_error,
                          p_token1	 => g_sqlcode_token,
                          p_token1_value => SQLCODE,
			  p_token2	 => g_sqlerrm_token,
			  p_token2_value => SQLERRM);
    END IF;
    CLOSE c_instance_no_ib;
    RETURN x_return_status;
  EXCEPTION
    WHEN OTHERS THEN
      IF c_instance_no_ib%ISOPEN THEN
        CLOSE c_instance_no_ib;
      END IF;
      x_return_status := OKC_API.G_RET_STS_UNEXP_ERROR;
      OKL_API.SET_MESSAGE(p_app_name 	 => g_app_name,
                          p_msg_name	 => g_unexpected_error,
                          p_token1	 => g_sqlcode_token,
                          p_token1_value => SQLCODE,
			  p_token2	 => g_sqlerrm_token,
			  p_token2_value => SQLERRM);
    RETURN x_return_status;
  END generate_instance_number_ib;

PROCEDURE insert_okl_txl_itm_insts(p_old_id IN okc_k_headers_b.id%TYPE,
                                   p_new_id IN okc_k_headers_b.id%TYPE) IS
CURSOR c22(p_id NUMBER) IS
SELECT
     p.id, p.object_version_number, p.tas_id,
     p.tal_id, p.kle_id, p.tal_type,
     p.line_number, p.instance_number_ib, p.object_id1_new,
     p.object_id2_new, p.jtot_object_code_new, p.object_id1_old,
     p.object_id2_old, p.jtot_object_code_old, p.inventory_org_id,
     p.serial_number, p.mfg_serial_number_yn, p.inventory_item_id,
     p.inv_master_org_id, p.attribute_category, p.attribute1,
     p.attribute2, p.attribute3, p.attribute4,
     p.attribute5, p.attribute6, p.attribute7,
     p.attribute8, p.attribute9, p.attribute10,
     p.attribute11, p.attribute12, p.attribute13,
     p.attribute14, p.attribute15, p.created_by,
     p.creation_date, p.last_updated_by, p.last_update_date,
     p.last_update_login, p.dnz_cle_id, p.instance_id,
     p.selected_for_split_flag, p.asd_id
FROM okl_txl_itm_insts p
WHERE p.kle_id IN
(
  SELECT a.id
  FROM okc_k_lines_b a,
       okc_k_items   c
  WHERE   a.dnz_chr_id = p_id
  AND c.dnz_chr_id = p_id
  AND c.cle_id = a.id
  AND    a.lse_id = 45
  AND    c.object1_id1 IS NULL
  AND    c.object1_id2 IS NULL
);

    l_tiid_tab2 l_tiid_type;
    l_tiobject_version_number_tab2 l_tiobject_version_number_type;
    l_titas_id_tab2 l_titas_id_type;
    l_tital_id_tab2 l_tital_id_type;
    l_tikle_id_tab2 l_tikle_id_type;
    l_tital_type_tab2 l_tital_type_type;
    l_tiline_number_tab2 l_tiline_number_type;
    l_tiinstance_number_ib_tab2 l_tiinstance_number_ib_type;
    l_tiobject_id1_new_tab2 l_tiobject_id1_new_type;
    l_tiobject_id2_new_tab2 l_tiobject_id2_new_type;
    l_tijtot_object_code_new_tab2 l_tijtot_object_code_new_type;
    l_tiobject_id1_old_tab2 l_tiobject_id1_old_type;
    l_tiobject_id2_old_tab2 l_tiobject_id2_old_type;
    l_tijtot_object_code_old_tab2 l_tijtot_object_code_old_type;
    l_tiinventory_org_id_tab2 l_tiinventory_org_id_type;
    l_tiserial_number_tab2 l_tiserial_number_type;
    l_timfg_serial_number_yn_tab2 l_timfg_serial_number_yn_type;
    l_tiinventory_item_id_tab2 l_tiinventory_item_id_type;
    l_tiinv_master_org_id_tab2 l_tiinv_master_org_id_type;
    l_tiattribute_category_tab2 l_tiattribute_category_type;
    l_tiattribute1_tab2 l_tiattribute1_type;
    l_tiattribute2_tab2 l_tiattribute2_type;
    l_tiattribute3_tab2 l_tiattribute3_type;
    l_tiattribute4_tab2 l_tiattribute4_type;
    l_tiattribute5_tab2 l_tiattribute5_type;
    l_tiattribute6_tab2 l_tiattribute6_type;
    l_tiattribute7_tab2 l_tiattribute7_type;
    l_tiattribute8_tab2 l_tiattribute8_type;
    l_tiattribute9_tab2 l_tiattribute9_type;
    l_tiattribute10_tab2 l_tiattribute10_type;
    l_tiattribute11_tab2 l_tiattribute11_type;
    l_tiattribute12_tab2 l_tiattribute12_type;
    l_tiattribute13_tab2 l_tiattribute13_type;
    l_tiattribute14_tab2 l_tiattribute14_type;
    l_tiattribute15_tab2 l_tiattribute15_type;
    l_ticreated_by_tab2 l_ticreated_by_type;
    l_ticreation_date_tab2 l_ticreation_date_type;
    l_tilast_updated_by_tab2 l_tilast_updated_by_type;
    l_tilast_update_date_tab2 l_tilast_update_date_type;
    l_tilast_update_login_tab2 l_tilast_update_login_type;
    l_tidnz_cle_id_tab2 l_tidnz_cle_id_type;
    l_tiinstance_id_tab2 l_tiinstance_id_type;
    l_tiselected_for_split_fl_tab2 l_tiselected_for_split_fl_type;
    l_tiasd_id_tab2 l_tiasd_id_type;

    l_new_tas_id NUMBER;
    l_new_tal_id NUMBER;
    l_new_kle_id NUMBER;
    l_new_dnz_cle_id NUMBER;
    l_new_asset_name VARCHAR2(150);
    l_generated_instance_number_ib NUMBER;
  l_return_status VARCHAR2(30);

BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  OPEN c22(p_old_id);
  LOOP
    FETCH c22 bulk collect INTO
      l_tiid_tab2, l_tiobject_version_number_tab2, l_titas_id_tab2,
      l_tital_id_tab2, l_tikle_id_tab2, l_tital_type_tab2,
      l_tiline_number_tab2, l_tiinstance_number_ib_tab2, l_tiobject_id1_new_tab2,
      l_tiobject_id2_new_tab2, l_tijtot_object_code_new_tab2, l_tiobject_id1_old_tab2,
      l_tiobject_id2_old_tab2, l_tijtot_object_code_old_tab2, l_tiinventory_org_id_tab2,
      l_tiserial_number_tab2, l_timfg_serial_number_yn_tab2, l_tiinventory_item_id_tab2,
      l_tiinv_master_org_id_tab2, l_tiattribute_category_tab2, l_tiattribute1_tab2,
      l_tiattribute2_tab2, l_tiattribute3_tab2, l_tiattribute4_tab2,
      l_tiattribute5_tab2, l_tiattribute6_tab2, l_tiattribute7_tab2,
      l_tiattribute8_tab2, l_tiattribute9_tab2, l_tiattribute10_tab2,
      l_tiattribute11_tab2, l_tiattribute12_tab2, l_tiattribute13_tab2,
      l_tiattribute14_tab2, l_tiattribute15_tab2, l_ticreated_by_tab2,
      l_ticreation_date_tab2, l_tilast_updated_by_tab2, l_tilast_update_date_tab2,
      l_tilast_update_login_tab2, l_tidnz_cle_id_tab2, l_tiinstance_id_tab2,
      l_tiselected_for_split_fl_tab2, l_tiasd_id_tab2
    limit G_BULK_SIZE;
    EXIT WHEN l_tiid_tab2.COUNT = 0;
    FOR i IN l_tiid_tab2.first..l_tiid_tab2.last
    LOOP

      l_tiid_tab(l_txl_itm_insts_counter) := l_tiid_tab2(i);
      -- Change id
      l_tiid_tab(l_txl_itm_insts_counter) := okc_p_util.raw_to_number(sys_guid());

      l_tiobject_version_number_tab(l_txl_itm_insts_counter) := l_tiobject_version_number_tab2(i);
      l_titas_id_tab(l_txl_itm_insts_counter) := l_titas_id_tab2(i);
      -- Change tas_id
      l_new_tas_id := find_trx_mapping_id2(l_titas_id_tab(l_txl_itm_insts_counter));
      l_titas_id_tab(l_txl_itm_insts_counter) := l_new_tas_id;

      l_tital_id_tab(l_txl_itm_insts_counter) := l_tital_id_tab2(i);
      -- Change tal_id
      --l_new_tal_id := find_txl_mapping_id(l_tital_id_tab(l_txl_itm_insts_counter));
      --l_tital_id_tab(l_txl_itm_insts_counter) := l_new_tal_id;
      l_new_tal_id := NULL;

      l_tikle_id_tab(l_txl_itm_insts_counter) := l_tikle_id_tab2(i);
      -- Change kle_id
      l_new_kle_id := find_mapping_id(l_tikle_id_tab(l_txl_itm_insts_counter));
        IF (l_new_kle_id = -1) THEN
          IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ERROR : Mapping id not found for ' || l_tikle_id_tab(l_txl_itm_insts_counter));
          END IF;
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        END IF;
      l_tikle_id_tab(l_txl_itm_insts_counter) := l_new_kle_id;

      l_tital_type_tab(l_txl_itm_insts_counter) := l_tital_type_tab2(i);
      l_tiline_number_tab(l_txl_itm_insts_counter) := l_tiline_number_tab2(i);
      l_tiinstance_number_ib_tab(l_txl_itm_insts_counter) := l_tiinstance_number_ib_tab2(i);

      -- Change instance_number_ib
      --print('Old asset_name: ' || l_tiinstance_number_ib_tab(l_txl_itm_insts_counter));
      --l_new_asset_name := find_aid_mapping_id(l_tiinstance_number_ib_tab(l_txl_itm_insts_counter));
      -- To do: expose okl_copy_asset_pvt.generate_instance_number_ib
      -- Use the package call instead
      l_return_status := generate_instance_number_ib(l_generated_instance_number_ib);
      IF l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF l_return_status = OKL_API.G_RET_STS_ERROR THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

      l_tiinstance_number_ib_tab(l_txl_itm_insts_counter) := l_generated_instance_number_ib;

      l_tiobject_id1_new_tab(l_txl_itm_insts_counter) := l_tiobject_id1_new_tab2(i);
      l_tiobject_id2_new_tab(l_txl_itm_insts_counter) := l_tiobject_id2_new_tab2(i);
      l_tijtot_object_code_new_tab(l_txl_itm_insts_counter) := l_tijtot_object_code_new_tab2(i);
      l_tiobject_id1_old_tab(l_txl_itm_insts_counter) := l_tiobject_id1_old_tab2(i);
      l_tiobject_id2_old_tab(l_txl_itm_insts_counter) := l_tiobject_id2_old_tab2(i);
      l_tijtot_object_code_old_tab(l_txl_itm_insts_counter) := l_tijtot_object_code_old_tab2(i);
      l_tiinventory_org_id_tab(l_txl_itm_insts_counter) := l_tiinventory_org_id_tab2(i);
      l_tiserial_number_tab(l_txl_itm_insts_counter) := l_tiserial_number_tab2(i);
      l_timfg_serial_number_yn_tab(l_txl_itm_insts_counter) := l_timfg_serial_number_yn_tab2(i);
      l_tiinventory_item_id_tab(l_txl_itm_insts_counter) := l_tiinventory_item_id_tab2(i);
      l_tiinv_master_org_id_tab(l_txl_itm_insts_counter) := l_tiinv_master_org_id_tab2(i);
      l_tiattribute_category_tab(l_txl_itm_insts_counter) := l_tiattribute_category_tab2(i);
      l_tiattribute1_tab(l_txl_itm_insts_counter) := l_tiattribute1_tab2(i);
      l_tiattribute2_tab(l_txl_itm_insts_counter) := l_tiattribute2_tab2(i);
      l_tiattribute3_tab(l_txl_itm_insts_counter) := l_tiattribute3_tab2(i);
      l_tiattribute4_tab(l_txl_itm_insts_counter) := l_tiattribute4_tab2(i);
      l_tiattribute5_tab(l_txl_itm_insts_counter) := l_tiattribute5_tab2(i);
      l_tiattribute6_tab(l_txl_itm_insts_counter) := l_tiattribute6_tab2(i);
      l_tiattribute7_tab(l_txl_itm_insts_counter) := l_tiattribute7_tab2(i);
      l_tiattribute8_tab(l_txl_itm_insts_counter) := l_tiattribute8_tab2(i);
      l_tiattribute9_tab(l_txl_itm_insts_counter) := l_tiattribute9_tab2(i);
      l_tiattribute10_tab(l_txl_itm_insts_counter) := l_tiattribute10_tab2(i);
      l_tiattribute11_tab(l_txl_itm_insts_counter) := l_tiattribute11_tab2(i);
      l_tiattribute12_tab(l_txl_itm_insts_counter) := l_tiattribute12_tab2(i);
      l_tiattribute13_tab(l_txl_itm_insts_counter) := l_tiattribute13_tab2(i);
      l_tiattribute14_tab(l_txl_itm_insts_counter) := l_tiattribute14_tab2(i);
      l_tiattribute15_tab(l_txl_itm_insts_counter) := l_tiattribute15_tab2(i);
      l_ticreated_by_tab(l_txl_itm_insts_counter) := l_ticreated_by_tab2(i);
      l_ticreation_date_tab(l_txl_itm_insts_counter) := l_ticreation_date_tab2(i);
      l_tilast_updated_by_tab(l_txl_itm_insts_counter) := l_tilast_updated_by_tab2(i);
      l_tilast_update_date_tab(l_txl_itm_insts_counter) := l_tilast_update_date_tab2(i);
      l_tilast_update_login_tab(l_txl_itm_insts_counter) := l_tilast_update_login_tab2(i);
      l_tidnz_cle_id_tab(l_txl_itm_insts_counter) := l_tidnz_cle_id_tab2(i);
      -- Change dnz_cle_id ??? AKP
      l_new_dnz_cle_id := find_mapping_id(l_tidnz_cle_id_tab(l_txl_itm_insts_counter));
        /*if (l_new_dnz_cle_id = -1) then
          print('ERROR : Mapping id not found for ' || l_tidnz_cle_id_tab(l_txl_itm_insts_counter));
          raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        end if;*/
      l_tidnz_cle_id_tab(l_txl_itm_insts_counter) := l_new_dnz_cle_id;

      l_tiinstance_id_tab(l_txl_itm_insts_counter) := l_tiinstance_id_tab2(i);
      l_tiselected_for_split_fl_tab(l_txl_itm_insts_counter) := l_tiselected_for_split_fl_tab2(i);
      l_tiasd_id_tab(l_txl_itm_insts_counter) := l_tiasd_id_tab2(i);

      l_txl_itm_insts_counter := l_txl_itm_insts_counter + 1;

    END LOOP;
  END LOOP;
  CLOSE c22;

  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_txl_itm_insts_counter=' || l_txl_itm_insts_counter || ' l_tiid_tab.count=' || l_tiid_tab.COUNT);
  END IF;
  IF (l_txl_itm_insts_counter > 1) THEN
    forall i IN l_tiid_tab.first..l_tiid_tab.last
      INSERT INTO okl_txl_itm_insts (
       id, object_version_number, tas_id,
       tal_id, kle_id, tal_type,
       line_number, instance_number_ib, object_id1_new,
       object_id2_new, jtot_object_code_new, object_id1_old,
       object_id2_old, jtot_object_code_old, inventory_org_id,
       serial_number, mfg_serial_number_yn, inventory_item_id,
       inv_master_org_id, attribute_category, attribute1,
       attribute2, attribute3, attribute4,
       attribute5, attribute6, attribute7,
       attribute8, attribute9, attribute10,
       attribute11, attribute12, attribute13,
       attribute14, attribute15, created_by,
       creation_date, last_updated_by, last_update_date,
       last_update_login, dnz_cle_id, instance_id,
       selected_for_split_flag, asd_id
      ) VALUES (
       l_tiid_tab(i), 1, l_titas_id_tab(i),
       l_tital_id_tab(i), l_tikle_id_tab(i), p_trans_type,
       l_tiline_number_tab(i), l_tiinstance_number_ib_tab(i), l_tiobject_id1_new_tab(i),
       l_tiobject_id2_new_tab(i), l_tijtot_object_code_new_tab(i), l_tiobject_id1_old_tab(i),
       l_tiobject_id2_old_tab(i), l_tijtot_object_code_old_tab(i), l_tiinventory_org_id_tab(i),
       l_tiserial_number_tab(i), l_timfg_serial_number_yn_tab(i), l_tiinventory_item_id_tab(i),
       l_tiinv_master_org_id_tab(i), l_tiattribute_category_tab(i), l_tiattribute1_tab(i),
       l_tiattribute2_tab(i), l_tiattribute3_tab(i), l_tiattribute4_tab(i),
       l_tiattribute5_tab(i), l_tiattribute6_tab(i), l_tiattribute7_tab(i),
       l_tiattribute8_tab(i), l_tiattribute9_tab(i), l_tiattribute10_tab(i),
       l_tiattribute11_tab(i), l_tiattribute12_tab(i), l_tiattribute13_tab(i),
       l_tiattribute14_tab(i), l_tiattribute15_tab(i), l_created_by,
       SYSDATE, l_last_updated_by, SYSDATE,
       l_last_update_login, l_tidnz_cle_id_tab(i), l_tiinstance_id_tab(i),
       l_tiselected_for_split_fl_tab(i), l_tiasd_id_tab(i)
      );
  END IF;
EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'insert_okl_txl_itm_insts');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing insert_okl_txl_itm_insts:l_tiid_tab.count=' || l_tiid_tab.COUNT || ' ...');
  END IF;
  IF (l_tiid_tab.COUNT > 0) THEN
  FOR i IN l_tiid_tab.first..l_tiid_tab.last
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tiid_tab('||i||')=' || l_tiid_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_titas_id_tab('||i||')=' || l_titas_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tital_id_tab('||i||')=' || l_tital_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tikle_id_tab('||i||')=' || l_tikle_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tiline_number_tab('||i||')=' || l_tiline_number_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tiinstance_number_ib_tab('||i||')=' || l_tiinstance_number_ib_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tiobject_id1_new_tab('||i||')=' || l_tiobject_id1_new_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tiobject_id2_new_tab('||i||')=' || l_tiobject_id2_new_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tijtot_object_code_new_tab('||i||')=' || l_tijtot_object_code_new_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tiobject_id1_old_tab('||i||')=' || l_tiobject_id1_old_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tiobject_id2_old_tab('||i||')=' || l_tiobject_id2_old_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tijtot_object_code_old_tab('||i||')=' || l_tijtot_object_code_old_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tiinventory_org_id_tab('||i||')=' || l_tiinventory_org_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tiserial_number_tab('||i||')=' || l_tiserial_number_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_timfg_serial_number_yn_tab('||i||')=' || l_timfg_serial_number_yn_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tiinventory_item_id_tab('||i||')=' || l_tiinventory_item_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tiinv_master_org_id_tab('||i||')=' || l_tiinv_master_org_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tiattribute_category_tab('||i||')=' || l_tiattribute_category_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tiattribute1_tab('||i||')=' || l_tiattribute1_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tiattribute2_tab('||i||')=' || l_tiattribute2_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tiattribute3_tab('||i||')=' || l_tiattribute3_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tiattribute4_tab('||i||')=' || l_tiattribute4_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tiattribute5_tab('||i||')=' || l_tiattribute5_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tiattribute6_tab('||i||')=' || l_tiattribute6_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tiattribute7_tab('||i||')=' || l_tiattribute7_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tiattribute8_tab('||i||')=' || l_tiattribute8_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tiattribute9_tab('||i||')=' || l_tiattribute9_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tiattribute10_tab('||i||')=' || l_tiattribute10_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tiattribute11_tab('||i||')=' || l_tiattribute11_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tiattribute12_tab('||i||')=' || l_tiattribute12_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tiattribute13_tab('||i||')=' || l_tiattribute13_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tiattribute14_tab('||i||')=' || l_tiattribute14_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tiattribute15_tab('||i||')=' || l_tiattribute15_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tidnz_cle_id_tab('||i||')=' || l_tidnz_cle_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tiinstance_id_tab('||i||')=' || l_tiinstance_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tiselected_for_split_fl_tab('||i||')=' || l_tiselected_for_split_fl_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tiasd_id_tab('||i||')=' || l_tiasd_id_tab(i));
    END IF;
  END LOOP;
  END IF;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;  /* insert_okl_txl_itm_insts */

PROCEDURE get_orig_depreciation_cost( p_fa_cost IN NUMBER,
                                      x_original_cost OUT NOCOPY NUMBER,
                                      x_depreciable_cost OUT NOCOPY NUMBER) IS
l_func_currency             VARCHAR2(15);
l_k_currency                VARCHAR2(15);
x_contract_currency         VARCHAR2(15);
x_currency_conversion_type  okl_txl_assets_b.currency_conversion_type%TYPE;
x_currency_conversion_rate  okl_txl_assets_b.currency_conversion_rate%TYPE;
x_currency_conversion_date  okl_txl_assets_b.currency_conversion_date%TYPE;
l_converted_cost            NUMBER;
BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  l_func_currency := OKL_ACCOUNTING_UTIL.get_func_curr_code;
  l_k_currency    := l_contract_currency;

  IF (l_func_currency = l_k_currency)  THEN
     x_original_cost := p_fa_cost;
     x_depreciable_cost :=  p_fa_cost;
  ELSE
     IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
            OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'p_khr_id='||l_copied_id || ' p_from_currency='||l_func_currency || ' p_transaction_date='||l_contract_start_date);
     END IF;
     okl_accounting_util.convert_to_contract_currency(
                          p_khr_id                    => l_copied_id,
                          p_from_currency             => l_func_currency,
                          p_transaction_date          => l_contract_start_date,
                          p_amount                    => p_fa_cost,
                          x_contract_currency         => x_contract_currency,
                          x_currency_conversion_type  => x_currency_conversion_type,
                          x_currency_conversion_rate  => x_currency_conversion_rate,
                          x_currency_conversion_date  => x_currency_conversion_date,
                          x_converted_amount          => l_converted_cost);
          IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'p_fa_cost='|| p_fa_cost || ' l_converted_cost='||l_converted_cost);
          END IF;
          IF (p_fa_cost >= 0) AND (l_converted_cost < 0) THEN
                --currency conversion rate was not found in Oracle GL
                OKC_API.set_message(p_app_name     => 'OKL_COPY_CONTRACT_PVT',
                               p_msg_name     => 'OKL_LLA_CONV_RATE_NOT_FOUND',
                               p_token1       => 'FROM_CURRENCY',
                               p_token1_value => x_contract_currency,
                               p_token2       => 'TO_CURRENCY',
                               p_token2_value => l_func_currency,
                               p_token3       => 'CONVERSION_TYPE',
                               p_token3_value => x_currency_conversion_type,
                               p_token4       => 'CONVERSION_DATE',
                               p_token4_value => TO_CHAR(x_currency_conversion_date,'DD-MON-YYYY'));
                RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;
          x_original_cost := l_converted_cost;
          x_depreciable_cost :=  l_converted_cost;
    END IF;

END; /* get_orig_depreciation_cost */

PROCEDURE get_deprn_details(p_deprn_method_code IN fa_books.deprn_method_code%TYPE,
                            p_life_in_months IN fa_books.life_in_months%TYPE,
                            p_adjusted_rate IN fa_books.adjusted_rate%TYPE, --vthiruva bug#4439068.
                            x_deprn_rate OUT NOCOPY fa_books.adjusted_rate%TYPE,
                            x_life_in_months OUT NOCOPY fa_books.life_in_months%TYPE)
IS
    --cursors
    CURSOR l_life_in_months_csr (p_deprn_method IN VARCHAR2,
                                 p_life_in_months IN NUMBER) IS
    SELECT 'Y'
    FROM   fa_methods
    WHERE  method_code = p_deprn_method
    AND    life_in_months = p_life_in_months
    AND    life_in_months IS NOT NULL;

    CURSOR l_rate_csr (p_deprn_method IN VARCHAR2,
                       p_rate         IN NUMBER) IS
    SELECT 'Y'
    FROM   fa_flat_rates ffr,
           fa_methods    fm
    WHERE  fm.method_code     = p_deprn_method
    AND    ffr.method_id      = fm.method_id
    AND    ffr.adjusted_rate  = p_rate
    AND    ffr.adjusting_rate  = 0;

    l_life_in_months_exists VARCHAR2(1);

    l_rate_exists VARCHAR2(1);

BEGIN
      --logic
      l_life_in_months_exists := 'N';
      OPEN l_life_in_months_csr(p_deprn_method   => p_deprn_method_code,
                                p_life_in_months => p_life_in_months);
      FETCH l_life_in_months_csr INTO l_life_in_months_exists;
      IF l_life_in_months_csr%NOTFOUND THEN
          NULL;
      END IF;
      CLOSE l_life_in_months_csr;

      IF l_life_in_months_exists = 'Y' THEN
          x_life_in_months := p_life_in_months;
          x_deprn_rate     := NULL;
      ELSIF l_life_in_months_exists = 'N' THEN
          l_rate_exists := 'N';
          OPEN l_rate_csr (p_deprn_method => p_deprn_method_code,
                           p_rate         => p_adjusted_rate);
          FETCH l_rate_csr INTO l_rate_exists;
          IF l_rate_csr%NOTFOUND THEN
             NULL;
          END IF;
          CLOSE l_rate_csr;
          IF l_rate_exists = 'Y' THEN
              x_deprn_rate     := p_adjusted_rate;
              x_life_in_months := NULL;
          END IF;
      END IF;

END; /* get_deprn_details */

PROCEDURE get_salvage_value(
        p_salvage_value IN fa_books.salvage_value%TYPE,
        p_percent_salvage_value IN fa_books.percent_salvage_value%TYPE,
        x_salvage_value OUT NOCOPY fa_books.salvage_value%TYPE,
        x_percent_salvage_value OUT NOCOPY fa_books.percent_salvage_value%TYPE) IS

l_func_currency             VARCHAR2(15);
l_k_currency                VARCHAR2(15);
x_contract_currency         VARCHAR2(15);
x_currency_conversion_type  okl_txl_assets_b.currency_conversion_type%TYPE;
x_currency_conversion_rate  okl_txl_assets_b.currency_conversion_rate%TYPE;
x_currency_conversion_date  okl_txl_assets_b.currency_conversion_date%TYPE;
l_salvage_value            NUMBER;
BEGIN
  l_func_currency := OKL_ACCOUNTING_UTIL.get_func_curr_code;
  l_k_currency    := l_contract_currency;

  IF (p_percent_salvage_value IS NULL) THEN
   IF (l_k_currency <> l_func_currency) THEN
     x_salvage_value := NULL;
     okl_accounting_util.convert_to_contract_currency(
                          p_khr_id                    => l_copied_id,
                          p_from_currency             => l_func_currency,
                          p_transaction_date          => l_contract_start_date,
                          p_amount                    => p_salvage_value,
                          x_contract_currency         => x_contract_currency,
                          x_currency_conversion_type  => x_currency_conversion_type,
                          x_currency_conversion_rate  => x_currency_conversion_rate,
                          x_currency_conversion_date  => x_currency_conversion_date,
                          x_converted_amount          => l_salvage_value);
          IF (p_salvage_value >= 0) AND (l_salvage_value < 0) THEN
                --currency conversion rate was not found in Oracle GL
                OKC_API.set_message(p_app_name     => 'OKL_COPY_CONTRACT_PVT',
                               p_msg_name     => 'OKL_LLA_CONV_RATE_NOT_FOUND',
                               p_token1       => 'FROM_CURRENCY',
                               p_token1_value => x_contract_currency,
                               p_token2       => 'TO_CURRENCY',
                               p_token2_value => l_func_currency,
                               p_token3       => 'CONVERSION_TYPE',
                               p_token3_value => x_currency_conversion_type,
                               p_token4       => 'CONVERSION_DATE',
                               p_token4_value => TO_CHAR(x_currency_conversion_date,'DD-MON-YYYY'));
                RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;
          x_salvage_value := l_salvage_value;
          --x_percent_salvage_value := null;
        ELSE
          x_salvage_value :=  p_salvage_value;
          --x_percent_salvage_value := null;
        END IF;
    ELSE
     x_percent_salvage_value := p_percent_salvage_value * 100;
    END IF;

END; /* get_salvage_value */

PROCEDURE insert_okl_trx_assets_3(p_old_id IN okc_k_headers_b.id%TYPE,
                           p_new_id IN okc_k_headers_b.id%TYPE) IS
CURSOR c27(p_id NUMBER) IS
SELECT
  fa.asset_id ID1,
  '#' ID2,
  fa.asset_number NAME,
  fat.description DESCRIPTION,
  fa.Asset_Id ASSET_ID,
  fa.Asset_Number ASSET_NUMBER,
  fb.book_type_code BOOK_TYPE_CODE,
  fb.life_in_months LIFE_IN_MONTHS,
  fb.original_cost ORIGINAL_COST,
  fb.cost COST,
  fb.adjusted_cost ADJUSTED_COST,
  fa.tag_number TAG_NUMBER,
  fa.current_units CURRENT_UNITS,
  fa.serial_number SERIAL_NUMBER,
  fb.reval_ceiling REVAL_CEILING,
  fa.new_used NEW_USED,
  fb.date_placed_in_service IN_SERVICE_DATE,
  fa.manufacturer_name MANUFACTURER_NAME,
  fa.model_number MODEL_NUMBER,
  fa.asset_type ASSET_TYPE,
  fb.salvage_value SALVAGE_VALUE,
  fb.percent_salvage_value PERCENT_SALVAGE_VALUE,
  fa.asset_category_id DEPRECIATION_CATEGORY,
  fb.deprn_start_date DEPR_START_DATE,
  fb.deprn_method_code DEPRN_METHOD_CODE,
  fb.rate_adjustment_factor RATE_ADJUSTMENT_FACTOR,
  fb.basic_rate BASIC_RATE,
  fb.adjusted_rate ADJUSTED_RATE,
  fb.Date_effective START_DATE_ACTIVE,
  fb.Date_ineffective END_DATE_ACTIVE,
  DECODE(SIGN(TRUNC(SYSDATE)-NVL(fb.date_effective,TRUNC(SYSDATE))),-1,'I', DECODE(SIGN(TRUNC(SYSDATE) - NVL(fb.date_ineffective,TRUNC(SYSDATE))), 1,'I','A ')) STATUS,
  NULL PRIMARY_UOM_CODE,
  fb.recoverable_cost RECOVERABLE_COST,
  fbc.org_id ORG_ID,
  fbc.set_of_books_id SET_OF_BOOKS_ID,
  fa.property_type_code PROPERTY_TYPE_CODE,
  fa.property_1245_1250_code PROPERTY_1245_1250_CODE,
  fa.in_use_flag IN_USE_FLAG,
  fa.owned_leased OWNED_LEASED,
  fa.inventorial INVENTORIAL,
  fa.ASSET_KEY_CCID ASSET_KEY_CCID,
  fbc.book_class book_class ,
  b.id,
  b.cle_id
FROM FA_BOOK_CONTROLS FBC,
     FA_BOOKS FB,
     FA_ADDITIONS_TL FAT,
     FA_ADDITIONS_B FA ,
     okc_k_items c,
     okc_k_lines_b b
WHERE
fbc.book_type_code = fb.book_type_code
AND NVL(fbc.date_ineffective,SYSDATE+1) > SYSDATE
AND fb.asset_id = fa.asset_id
AND fb.transaction_header_id_out IS NULL
AND fat.asset_id = fa.asset_id
AND fat.LANGUAGE = USERENV('LANG')
AND fa.asset_id = TO_CHAR(c.object1_id1) --for LSE_ID = 42
AND c.cle_id = b.id
AND c.object1_id1 IS NOT NULL
AND c.object1_id2 IS NOT NULL
AND b.lse_id = 42
AND b.dnz_chr_id=p_id
AND c.dnz_chr_id=p_id
AND fbc.book_class IN ('CORPORATE', 'TAX')
ORDER BY b.cle_id;



CURSOR c_base_language IS
  SELECT language_code
  FROM   fnd_languages
  WHERE installed_flag = 'B';

CURSOR c_languages IS
  SELECT language_code
  FROM   fnd_languages
  WHERE installed_flag IN ('B','I');

-- Bug# 5591618
/*
Changed the cursor to consider the try_id of 'Internal Asset Creation' for US
language. The base language could be different in different instances and
the cursor returns null if the base language is other than U.S lang.
This resulted in try_id turning 1 which is not a valid try_id and therefore
not able to activate a copied contract.
*/

CURSOR c_try_id IS
SELECT id
FROM   okl_trx_types_tl
WHERE  name = 'Internal Asset Creation'
AND    LANGUAGE = 'US';

--Bug# 5591618
/*
--CURSOR c_try_id IS
--SELECT a.id
--FROM   okl_trx_types_tl a,
       --fnd_languages b
--WHERE  a.name = 'Internal Asset Creation'
--AND    a.LANGUAGE = b.language_code
--AND    b.installed_flag = 'B';
*/

CURSOR c_location_id(p_asset_id IN fa_additions_b.asset_id%TYPE,
                     p_book_type_code IN fa_books.book_type_code%TYPE) IS
SELECT location_id
FROM   fa_distribution_history
WHERE  asset_id = p_asset_id
AND    book_type_code = p_book_type_code
AND    transaction_header_id_out IS NULL
AND    ROWNUM < 2;

    TYPE l_ID1_type IS TABLE OF fa_additions_b.asset_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ID2_type IS TABLE OF VARCHAR2(30) INDEX BY BINARY_INTEGER;
    TYPE l_NAME_type IS TABLE OF fa_additions_b.asset_number%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_DESCRIPTION_type IS TABLE OF fa_additions_tl.description%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ASSET_ID_type IS TABLE OF fa_additions_b.asset_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ASSET_NUMBER_type IS TABLE OF fa_additions_b.asset_number%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_BOOK_TYPE_CODE_type IS TABLE OF fa_books.book_type_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_LIFE_IN_MONTHS_type IS TABLE OF fa_books.life_in_months%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ORIGINAL_COST_type IS TABLE OF fa_books.original_cost%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_COST_type IS TABLE OF fa_books.cost%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ADJUSTED_COST_type IS TABLE OF fa_books.adjusted_cost%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_TAG_NUMBER_type IS TABLE OF fa_additions_b.tag_number%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_CURRENT_UNITS_type IS TABLE OF fa_additions_b.current_units%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_SERIAL_NUMBER_type IS TABLE OF fa_additions_b.serial_number%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_REVAL_CEILING_type IS TABLE OF fa_books.reval_ceiling%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_NEW_USED_type IS TABLE OF fa_additions_b.new_used%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_IN_SERVICE_DATE_type IS TABLE OF fa_books.date_placed_in_service%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_MANUFACTURER_NAME_type IS TABLE OF fa_additions_b.manufacturer_name%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_MODEL_NUMBER_type IS TABLE OF fa_additions_b.model_number%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ASSET_TYPE_type IS TABLE OF fa_additions_b.asset_type%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_SALVAGE_VALUE_type IS TABLE OF fa_books.salvage_value%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_PERCENT_SALVAGE_VALUE_type IS TABLE OF fa_books.percent_salvage_value%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_DEPRECIATION_CATEGORY_type IS TABLE OF fa_additions_b.asset_category_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_DEPR_START_DATE_type IS TABLE OF fa_books.deprn_start_date%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_DEPRN_METHOD_CODE_type IS TABLE OF fa_books.deprn_method_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_RATE_ADJUSTMENT_FACTOR_type IS TABLE OF fa_books.rate_adjustment_factor%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_BASIC_RATE_type IS TABLE OF fa_books.basic_rate%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ADJUSTED_RATE_type IS TABLE OF fa_books.adjusted_rate%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_START_DATE_ACTIVE_type IS TABLE OF fa_books.date_effective%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_END_DATE_ACTIVE_type IS TABLE OF fa_books.date_ineffective%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_STATUS_type IS TABLE OF VARCHAR2(30) INDEX BY BINARY_INTEGER;
    TYPE l_PRIMARY_UOM_CODE_type IS TABLE OF VARCHAR2(30) INDEX BY BINARY_INTEGER;
    TYPE l_RECOVERABLE_COST_type IS TABLE OF fa_books.recoverable_cost%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ORG_ID_type IS TABLE OF fa_book_controls.org_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_SET_OF_BOOKS_ID_type IS TABLE OF fa_book_controls.set_of_books_id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_PROPERTY_TYPE_CODE_type IS TABLE OF fa_additions_b.property_type_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_PROPERTY_1245_1250_CODE_type IS TABLE OF fa_additions_b.property_1245_1250_code%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_IN_USE_FLAG_type IS TABLE OF fa_additions_b.in_use_flag%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_OWNED_LEASED_type IS TABLE OF fa_additions_b.owned_leased%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_INVENTORIAL_type IS TABLE OF fa_additions_b.inventorial%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_ASSET_KEY_CCID_type IS TABLE OF fa_additions_b.asset_key_ccid%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_book_class_type IS TABLE OF fa_book_controls.book_class%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_id_type IS TABLE OF okc_k_lines_b.id%TYPE INDEX BY BINARY_INTEGER;
    TYPE l_cle_id_type IS TABLE OF okc_k_lines_b.cle_id%TYPE INDEX BY BINARY_INTEGER;

    TYPE l_lang_tab_type IS TABLE OF fnd_languages.language_code%TYPE INDEX BY BINARY_INTEGER;

    l_ID1_tab l_ID1_type;
    l_ID2_tab l_ID2_type;
    l_NAME_local_tab l_NAME_type;
    l_DESCRIPTION_tab l_DESCRIPTION_type;
    l_ASSET_ID_tab l_ASSET_ID_type;
    l_ASSET_NUMBER_tab l_ASSET_NUMBER_type;
    l_BOOK_TYPE_CODE_tab l_BOOK_TYPE_CODE_type;
    l_LIFE_IN_MONTHS_tab l_LIFE_IN_MONTHS_type;
    l_ORIGINAL_COST_tab l_ORIGINAL_COST_type;
    l_COST_tab l_COST_type;
    l_ADJUSTED_COST_tab l_ADJUSTED_COST_type;
    l_TAG_NUMBER_tab l_TAG_NUMBER_type;
    l_CURRENT_UNITS_tab l_CURRENT_UNITS_type;
    l_SERIAL_NUMBER_tab l_SERIAL_NUMBER_type;
    l_REVAL_CEILING_tab l_REVAL_CEILING_type;
    l_NEW_USED_tab l_NEW_USED_type;
    l_IN_SERVICE_DATE_tab l_IN_SERVICE_DATE_type;
    l_MANUFACTURER_NAME_tab l_MANUFACTURER_NAME_type;
    l_MODEL_NUMBER_tab l_MODEL_NUMBER_type;
    l_ASSET_TYPE_tab l_ASSET_TYPE_type;
    l_SALVAGE_VALUE_tab l_SALVAGE_VALUE_type;
    l_PERCENT_SALVAGE_VALUE_tab l_PERCENT_SALVAGE_VALUE_type;
    l_DEPRECIATION_CATEGORY_tab l_DEPRECIATION_CATEGORY_type;
    l_DEPR_START_DATE_tab l_DEPR_START_DATE_type;
    l_DEPRN_METHOD_CODE_tab l_DEPRN_METHOD_CODE_type;
    l_RATE_ADJUSTMENT_FACTOR_tab l_RATE_ADJUSTMENT_FACTOR_type;
    l_BASIC_RATE_tab l_BASIC_RATE_type;
    l_ADJUSTED_RATE_tab l_ADJUSTED_RATE_type;
    l_START_DATE_ACTIVE_tab l_START_DATE_ACTIVE_type;
    l_END_DATE_ACTIVE_tab l_END_DATE_ACTIVE_type;
    l_STATUS_tab l_STATUS_type;
    l_PRIMARY_UOM_CODE_tab l_PRIMARY_UOM_CODE_type;
    l_RECOVERABLE_COST_tab l_RECOVERABLE_COST_type;
    l_ORG_ID_tab l_ORG_ID_type;
    l_SET_OF_BOOKS_ID_tab l_SET_OF_BOOKS_ID_type;
    l_PROPERTY_TYPE_CODE_tab l_PROPERTY_TYPE_CODE_type;
    l_PROPERTY_1245_1250_CODE_tab l_PROPERTY_1245_1250_CODE_type;
    l_IN_USE_FLAG_tab l_IN_USE_FLAG_type;
    l_OWNED_LEASED_tab l_OWNED_LEASED_type;
    l_INVENTORIAL_tab l_INVENTORIAL_type;
    l_ASSET_KEY_CCID_tab l_ASSET_KEY_CCID_type;
    l_book_class_tab l_book_class_type;
    l_id_local_tab l_id_type;

    l_okl_trx_counter3 NUMBER := 1;

    l_ID1_tab2 l_ID1_type;
    l_ID2_tab2 l_ID2_type;
    l_NAME_local_tab2 l_NAME_type;
    l_DESCRIPTION_tab2 l_DESCRIPTION_type;
    l_ASSET_ID_tab2 l_ASSET_ID_type;
    l_ASSET_NUMBER_tab2 l_ASSET_NUMBER_type;
    l_BOOK_TYPE_CODE_tab2 l_BOOK_TYPE_CODE_type;
    l_LIFE_IN_MONTHS_tab2 l_LIFE_IN_MONTHS_type;
    l_ORIGINAL_COST_tab2 l_ORIGINAL_COST_type;
    l_COST_tab2 l_COST_type;
    l_ADJUSTED_COST_tab2 l_ADJUSTED_COST_type;
    l_TAG_NUMBER_tab2 l_TAG_NUMBER_type;
    l_CURRENT_UNITS_tab2 l_CURRENT_UNITS_type;
    l_SERIAL_NUMBER_tab2 l_SERIAL_NUMBER_type;
    l_REVAL_CEILING_tab2 l_REVAL_CEILING_type;
    l_NEW_USED_tab2 l_NEW_USED_type;
    l_IN_SERVICE_DATE_tab2 l_IN_SERVICE_DATE_type;
    l_MANUFACTURER_NAME_tab2 l_MANUFACTURER_NAME_type;
    l_MODEL_NUMBER_tab2 l_MODEL_NUMBER_type;
    l_ASSET_TYPE_tab2 l_ASSET_TYPE_type;
    l_SALVAGE_VALUE_tab2 l_SALVAGE_VALUE_type;
    l_PERCENT_SALVAGE_VALUE_tab2 l_PERCENT_SALVAGE_VALUE_type;
    l_DEPRECIATION_CATEGORY_tab2 l_DEPRECIATION_CATEGORY_type;
    l_DEPR_START_DATE_tab2 l_DEPR_START_DATE_type;
    l_DEPRN_METHOD_CODE_tab2 l_DEPRN_METHOD_CODE_type;
    l_RATE_ADJUSTMENT_FACTOR_tab2 l_RATE_ADJUSTMENT_FACTOR_type;
    l_BASIC_RATE_tab2 l_BASIC_RATE_type;
    l_ADJUSTED_RATE_tab2 l_ADJUSTED_RATE_type;
    l_START_DATE_ACTIVE_tab2 l_START_DATE_ACTIVE_type;
    l_END_DATE_ACTIVE_tab2 l_END_DATE_ACTIVE_type;
    l_STATUS_tab2 l_STATUS_type;
    l_PRIMARY_UOM_CODE_tab2 l_PRIMARY_UOM_CODE_type;
    l_RECOVERABLE_COST_tab2 l_RECOVERABLE_COST_type;
    l_ORG_ID_tab2 l_ORG_ID_type;
    l_SET_OF_BOOKS_ID_tab2 l_SET_OF_BOOKS_ID_type;
    l_PROPERTY_TYPE_CODE_tab2 l_PROPERTY_TYPE_CODE_type;
    l_PROPERTY_1245_1250_CODE_tab2 l_PROPERTY_1245_1250_CODE_type;
    l_IN_USE_FLAG_tab2 l_IN_USE_FLAG_type;
    l_OWNED_LEASED_tab2 l_OWNED_LEASED_type;
    l_INVENTORIAL_tab2 l_INVENTORIAL_type;
    l_ASSET_KEY_CCID_tab2 l_ASSET_KEY_CCID_type;
    l_book_class_tab2 l_book_class_type;
    l_id_local_tab2 l_id_type;
    l_cle_id_tab2 l_cle_id_type;

  l_new_id NUMBER;
  l_t3id_tab l_tid_type;

    -- okl_txl_assets_tl
    l_tl2id_tab l_tlid_type;
    l_tl2description_tab l_tldescription_type;
    l_tl2language_tab l_tllanguage_type;

    l_txl_assets_tl_counter4 NUMBER := 1;
    l_lang_tab l_lang_tab_type;
    l_base_language fnd_languages.language_code%TYPE;

  l_orig_cost NUMBER;
  l_depreciable_cost NUMBER;
  l_deprn_rate fa_books.adjusted_rate%TYPE;
  l_life_in_months fa_books.life_in_months%TYPE;
  l_salvage_value fa_books.salvage_value%TYPE;
  l_percent_salvage_value fa_books.percent_salvage_value%TYPE;

  --okl_txd_assets_b
  l_db2id_tab l_dbid_type;
    l_db2tal_id_tab l_dbtal_id_type;
    l_db2line_detail_number_tab l_dbline_detail_number_type;
    l_db2asset_number_tab l_dbasset_number_type;
    l_db2quantity_tab l_dbquantity_type;
    l_db2cost_tab l_dbcost_type;
    l_db2tax_book_tab l_dbtax_book_type;
    l_db2life_in_months_tax_tab l_dblife_in_months_tax_type;
    l_db2deprn_method_tax_tab l_dbdeprn_method_tax_type;
    l_db2deprn_rate_tax_tab l_dbdeprn_rate_tax_type;
    l_db2salvage_value_tab l_dbsalvage_value_type;

    l_txd_assets_b_counter4 NUMBER := 1;
  l_new_tal_id NUMBER;
  l_new_line_number NUMBER;
  l_junk_cost NUMBER;

    -- okl_txd_assets_tl
    l_dl2id_tab l_dlid_type;
    l_dl2description_tab l_dldescription_type;
    l_dl2language_tab l_dllanguage_type;

    l_txd_assets_tl_counter4 NUMBER := 1;

    l_location_id NUMBER;
    l_new_asset_number fa_additions_b.asset_number%TYPE;
    l_tmp_okl_42_rec l_okl_k_lines_rec_type;
    l_tmp_itm_rec l_okc_k_items_rec_type;

    l_cle_id NUMBER;
    l_new_33_id NUMBER;
    l_tmp_okl_33_rec l_okl_k_lines_rec_type;
    l_tmp_okc_34_rec l_okc_k_items_rec_type;
    l_new_34_id NUMBER;
    l_asset_name_old okc_k_lines_tl.name%TYPE;
    l_multi_gaap_profile okl_txd_assets_b.tax_book%TYPE;

   --Added by dpsingh for LE Uptake
  CURSOR contract_num_csr (p_ctr_id1 NUMBER) IS
  SELECT  contract_number
  FROM OKC_K_HEADERS_B
  WHERE id = p_ctr_id1;

  l_cntrct_number          OKC_K_HEADERS_B.CONTRACT_NUMBER%TYPE;
  l_legal_entity_id NUMBER;

BEGIN
  OPEN c_try_id;
  FETCH c_try_id INTO l_try_id;
  IF (c_try_id%NOTFOUND) THEN
    l_try_id := 1;
  END IF;
  CLOSE c_try_id;

  OPEN c_languages;
  FETCH c_languages bulk collect INTO
    l_lang_tab
  limit G_BULK_SIZE;
  CLOSE c_languages;

  FOR r IN c_base_language
  LOOP
    l_base_language := r.language_code;
  END LOOP;

  OPEN c27(p_old_id);
  LOOP
    FETCH c27 bulk collect INTO
     l_ID1_tab2, l_ID2_tab2, l_NAME_local_tab2,
     l_DESCRIPTION_tab2, l_ASSET_ID_tab2, l_ASSET_NUMBER_tab2,
     l_BOOK_TYPE_CODE_tab2, l_LIFE_IN_MONTHS_tab2, l_ORIGINAL_COST_tab2,
     l_COST_tab2, l_ADJUSTED_COST_tab2, l_TAG_NUMBER_tab2,
     l_CURRENT_UNITS_tab2, l_SERIAL_NUMBER_tab2, l_REVAL_CEILING_tab2,
     l_NEW_USED_tab2, l_IN_SERVICE_DATE_tab2, l_MANUFACTURER_NAME_tab2,
     l_MODEL_NUMBER_tab2, l_ASSET_TYPE_tab2, l_SALVAGE_VALUE_tab2,
     l_PERCENT_SALVAGE_VALUE_tab2, l_DEPRECIATION_CATEGORY_tab2, l_DEPR_START_DATE_tab2,
     l_DEPRN_METHOD_CODE_tab2, l_RATE_ADJUSTMENT_FACTOR_tab2, l_BASIC_RATE_tab2,
     l_ADJUSTED_RATE_tab2, l_START_DATE_ACTIVE_tab2, l_END_DATE_ACTIVE_tab2,
     l_STATUS_tab2, l_PRIMARY_UOM_CODE_tab2, l_RECOVERABLE_COST_tab2,
     l_ORG_ID_tab2, l_SET_OF_BOOKS_ID_tab2, l_PROPERTY_TYPE_CODE_tab2,
     l_PROPERTY_1245_1250_CODE_tab2, l_IN_USE_FLAG_tab2, l_OWNED_LEASED_tab2,
     l_INVENTORIAL_tab2, l_ASSET_KEY_CCID_tab2, l_book_class_tab2,
     l_id_local_tab2, l_cle_id_tab2
    limit G_BULK_SIZE;
    EXIT WHEN l_ID1_tab2.COUNT=0;
    FOR i IN l_ID1_tab2.first..l_ID1_tab2.last
    LOOP
      l_ID1_tab(l_okl_trx_counter3) := l_ID1_tab2(i);
      l_ID2_tab(l_okl_trx_counter3) := l_ID2_tab2(i);
      l_NAME_local_tab(l_okl_trx_counter3) := l_NAME_local_tab2(i);
      l_DESCRIPTION_tab(l_okl_trx_counter3) := l_DESCRIPTION_tab2(i);
      l_ASSET_ID_tab(l_okl_trx_counter3) := l_ASSET_ID_tab2(i);
      l_ASSET_NUMBER_tab(l_okl_trx_counter3) := l_ASSET_NUMBER_tab2(i);
      l_BOOK_TYPE_CODE_tab(l_okl_trx_counter3) := l_BOOK_TYPE_CODE_tab2(i);
      l_LIFE_IN_MONTHS_tab(l_okl_trx_counter3) := l_LIFE_IN_MONTHS_tab2(i);
      l_ORIGINAL_COST_tab(l_okl_trx_counter3) := l_ORIGINAL_COST_tab2(i);
      l_COST_tab(l_okl_trx_counter3) := l_COST_tab2(i);
      l_ADJUSTED_COST_tab(l_okl_trx_counter3) := l_ADJUSTED_COST_tab2(i);
      l_TAG_NUMBER_tab(l_okl_trx_counter3) := l_TAG_NUMBER_tab2(i);
      l_CURRENT_UNITS_tab(l_okl_trx_counter3) := l_CURRENT_UNITS_tab2(i);
      l_SERIAL_NUMBER_tab(l_okl_trx_counter3) := l_SERIAL_NUMBER_tab2(i);
      l_REVAL_CEILING_tab(l_okl_trx_counter3) := l_REVAL_CEILING_tab2(i);
      l_NEW_USED_tab(l_okl_trx_counter3) := l_NEW_USED_tab2(i);
      l_IN_SERVICE_DATE_tab(l_okl_trx_counter3) := l_IN_SERVICE_DATE_tab2(i);
      l_MANUFACTURER_NAME_tab(l_okl_trx_counter3) := l_MANUFACTURER_NAME_tab2(i);
      l_MODEL_NUMBER_tab(l_okl_trx_counter3) := l_MODEL_NUMBER_tab2(i);
      l_ASSET_TYPE_tab(l_okl_trx_counter3) := l_ASSET_TYPE_tab2(i);
      l_SALVAGE_VALUE_tab(l_okl_trx_counter3) := l_SALVAGE_VALUE_tab2(i);
      l_PERCENT_SALVAGE_VALUE_tab(l_okl_trx_counter3) := l_PERCENT_SALVAGE_VALUE_tab2(i);
      l_DEPRECIATION_CATEGORY_tab(l_okl_trx_counter3) := l_DEPRECIATION_CATEGORY_tab2(i);
      l_DEPR_START_DATE_tab(l_okl_trx_counter3) := l_DEPR_START_DATE_tab2(i);
      l_DEPRN_METHOD_CODE_tab(l_okl_trx_counter3) := l_DEPRN_METHOD_CODE_tab2(i);
      l_RATE_ADJUSTMENT_FACTOR_tab(l_okl_trx_counter3) := l_RATE_ADJUSTMENT_FACTOR_tab2(i);
      l_BASIC_RATE_tab(l_okl_trx_counter3) := l_BASIC_RATE_tab2(i);
      l_ADJUSTED_RATE_tab(l_okl_trx_counter3) := l_ADJUSTED_RATE_tab2(i);
      l_START_DATE_ACTIVE_tab(l_okl_trx_counter3) := l_START_DATE_ACTIVE_tab2(i);
      l_END_DATE_ACTIVE_tab(l_okl_trx_counter3) := l_END_DATE_ACTIVE_tab2(i);
      l_STATUS_tab(l_okl_trx_counter3) := l_STATUS_tab2(i);
      l_PRIMARY_UOM_CODE_tab(l_okl_trx_counter3) := l_PRIMARY_UOM_CODE_tab2(i);
      l_RECOVERABLE_COST_tab(l_okl_trx_counter3) := l_RECOVERABLE_COST_tab2(i);
      l_ORG_ID_tab(l_okl_trx_counter3) := l_ORG_ID_tab2(i);
      l_SET_OF_BOOKS_ID_tab(l_okl_trx_counter3) := l_SET_OF_BOOKS_ID_tab2(i);
      l_PROPERTY_TYPE_CODE_tab(l_okl_trx_counter3) := l_PROPERTY_TYPE_CODE_tab2(i);
      l_PROPERTY_1245_1250_CODE_tab(l_okl_trx_counter3) := l_PROPERTY_1245_1250_CODE_tab2(i);
      l_IN_USE_FLAG_tab(l_okl_trx_counter3) := l_IN_USE_FLAG_tab2(i);
      l_OWNED_LEASED_tab(l_okl_trx_counter3) := l_OWNED_LEASED_tab2(i);
      l_INVENTORIAL_tab(l_okl_trx_counter3) := l_INVENTORIAL_tab2(i);
      l_ASSET_KEY_CCID_tab(l_okl_trx_counter3) := l_ASSET_KEY_CCID_tab2(i);
      l_book_class_tab(l_okl_trx_counter3) := l_book_class_tab2(i);
      l_ID_local_tab(l_okl_trx_counter3) := l_ID_local_tab2(i);

      -- Change id (which is same as kle_id)
      l_new_id := find_mapping_id(l_ID_local_tab(l_okl_trx_counter3));
        IF (l_new_id = -1) THEN
          IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ERROR : Mapping id not found for ' || l_ID_local_tab(l_okl_trx_counter3));
          END IF;
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        END IF;
      l_ID_local_tab(l_okl_trx_counter3) := l_new_id;

      l_okl_trx_counter3 := l_okl_trx_counter3 + 1;

    END LOOP;
  END LOOP;
  CLOSE c27;
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ID1_tab.count=' || l_ID1_tab.COUNT);
  END IF;
  IF (l_ID1_tab.COUNT > 0) THEN
  FOR i IN l_ID1_tab.first..l_ID1_tab.last
  LOOP
    IF (l_book_class_tab(i) = 'CORPORATE') THEN
      -- Populate okl_trx_assets
      l_t3id_tab(l_trx_assets_counter4) := okc_p_util.raw_to_number(sys_guid());
      -- Populate kle to tas_id mapping
      l_cle_mapping_tab(l_trx_assets_counter4).old_id := l_ID_local_tab(i); -- kle_id
      --l_cle_mapping_tab(l_trx_assets_counter4).new_id :=  l_t3id_tab(l_trx_assets_counter4);
      l_cle_mapping_tab(l_trx_assets_counter4).line_number :=  1;

      -- Populate okl_txl_assets_b
      l_tb2id_tab(l_trx_assets_counter4) := okc_p_util.raw_to_number(sys_guid());
      l_cle_mapping_tab(l_trx_assets_counter4).new_id :=  l_tb2id_tab(l_trx_assets_counter4);
      l_tb2object_version_number_tab(l_trx_assets_counter4) := 1;
      l_tb2tas_id_tab(l_trx_assets_counter4) := l_t3id_tab(l_trx_assets_counter4);
      -- id already changed earlier
      l_tb2kle_id_tab(l_trx_assets_counter4) := l_ID_local_tab(i);

      -- Store Tal id to kle_id mapping
      l_dbid_mapping_tab(l_tal_to_kle_counter).tal_id := l_tb2id_tab(l_trx_assets_counter4);
      l_dbid_mapping_tab(l_tal_to_kle_counter).kle_id := l_tb2kle_id_tab(l_trx_assets_counter4);
      l_tal_to_kle_counter := l_tal_to_kle_counter + 1;

      l_tb2dnz_khr_id_tab(l_trx_assets_counter4) := l_copied_id;
      l_tb2asset_number_tab(l_trx_assets_counter4) := l_ASSET_NUMBER_tab(i);
      -- Change asset_number AKP???
      /* Bug 4439068 */
      IF p_trans_type not in ('CRB', 'CRL', 'CSP', 'CRV', 'ALI') THEN
        l_new_asset_number := find_aid_mapping_id(l_tb2asset_number_tab(l_trx_assets_counter4));
        IF (l_new_asset_number <> '-1') THEN
          l_tb2asset_number_tab(l_trx_assets_counter4) := l_new_asset_number;
        END IF;
      END IF;
      /* Bug 4439068 */

      l_tb2line_number_tab(l_trx_assets_counter4) := 1;
      l_tb2tal_type_tab(l_trx_assets_counter4) := p_trans_type;

      -- Populate location_id
      OPEN c_location_id(l_asset_id_tab(i), l_BOOK_TYPE_CODE_tab(i));
      FETCH c_location_id
      INTO  l_location_id;
      IF (c_location_id%NOTFOUND) THEN
        IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                  OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Location id not found for ' || l_asset_id_tab(i) || ' ' || l_BOOK_TYPE_CODE_tab(i));
        END IF;
        x_return_status := OKL_API.G_RET_STS_ERROR;
        CLOSE c_location_id;
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
      CLOSE c_location_id;
      l_tb2fa_location_id_tab(l_trx_assets_counter4) := l_location_id;

      -- Todo AKP

      get_orig_depreciation_cost(l_COST_tab(i), l_orig_cost, l_depreciable_cost);
      l_tb2original_cost_tab(l_trx_assets_counter4) := l_orig_cost;
      l_tb2depreciation_cost_tab(l_trx_assets_counter4) := l_depreciable_cost;
      -- Bug 4636587
      IF (p_trans_type = 'CRB') THEN
        l_tb2fa_cost_tab(l_trx_assets_counter4) := l_depreciable_cost;
      ELSE
        l_tb2fa_cost_tab(l_trx_assets_counter4) := NULL;
      END IF;

      l_tb2current_units_tab(l_trx_assets_counter4) := l_CURRENT_UNITS_tab(i);
      l_tb2manufacturer_name_tab(l_trx_assets_counter4) := l_MANUFACTURER_NAME_tab(i);
      l_tmp_okl_42_rec := find_okl_k_lines_rec(l_id_local_tab(i));
      IF (l_tmp_okl_42_rec.year_built = OKC_API.G_MISS_NUM ) THEN
        IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                  OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ERROR: Mapping okl_k_lines_rec not found for ' || l_id_local_tab(i));
        END IF;
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

      l_tb2year_manufactured_tab(l_trx_assets_counter4) := l_tmp_okl_42_rec.year_built;
      -- Todo AKP

      IF (l_NEW_USED_tab(i) = 'NEW' OR l_NEW_USED_tab(i) IS NULL) THEN
        l_tb2used_asset_yn_tab(l_trx_assets_counter4) := NULL;
      ELSE
        l_tb2used_asset_yn_tab(l_trx_assets_counter4) := 'Y';
      END IF;

      l_tb2tag_number_tab(l_trx_assets_counter4) := l_TAG_NUMBER_tab(i);
      l_tb2model_number_tab(l_trx_assets_counter4) := l_MODEL_NUMBER_tab(i);
      l_tb2corporate_book_tab(l_trx_assets_counter4) := l_BOOK_TYPE_CODE_tab(i);
      l_tb2in_service_date_tab(l_trx_assets_counter4) := l_IN_SERVICE_DATE_tab(i);
      l_tb2depreciation_id_tab(l_trx_assets_counter4) := l_DEPRECIATION_CATEGORY_tab(i);
      l_tb2deprn_method_tab(l_trx_assets_counter4) := l_DEPRN_METHOD_CODE_tab(i);
      -- Todo AKP

      get_deprn_details(l_DEPRN_METHOD_CODE_tab(i),
                        l_LIFE_IN_MONTHS_tab(i),
                        l_ADJUSTED_RATE_tab(i),
                        l_deprn_rate,
                        l_life_in_months);
      l_tb2deprn_rate_tab(l_trx_assets_counter4) := l_deprn_rate;
      l_tb2life_in_months_tab(l_trx_assets_counter4) := l_life_in_months;

      get_salvage_value(l_SALVAGE_VALUE_tab(i),
                        l_PERCENT_SALVAGE_VALUE_tab(i),
                        l_salvage_value,
                        l_percent_salvage_value);
      l_tb2salvage_value_tab(l_trx_assets_counter4) := l_salvage_value;
      l_tb2percent_salvage_value_tab(l_trx_assets_counter4) := l_percent_salvage_value;

      l_tb2asset_key_id_tab(l_trx_assets_counter4) := l_ASSET_KEY_CCID_tab(i);
      l_tb2fa_trx_date_tab(l_trx_assets_counter4) := NULL;

      -- Populate okl_trx_assets_tl
      FOR j IN l_lang_tab.first..l_lang_tab.last
      LOOP
        l_tl2id_tab(l_txl_assets_tl_counter4) := l_tb2id_tab(l_trx_assets_counter4);
        l_tl2description_tab(l_txl_assets_tl_counter4) := l_DESCRIPTION_tab(i);
        l_tl2language_tab(l_txl_assets_tl_counter4) := l_lang_tab(j);

        l_txl_assets_tl_counter4 := l_txl_assets_tl_counter4 + 1;
      END LOOP;

      l_trx_assets_counter4 := l_trx_assets_counter4 + 1;
    END IF;  /* if CORPORATE */
  END LOOP; /* end loop i */
  END IF; /* end if l_ID1_tab.count > 0*/
  sort_cle_mapping_tab;
  sort_dbid_mapping_tab;

  IF (l_ID1_tab.COUNT > 0) THEN
  l_multi_gaap_profile := OKL_SYSTEM_PARAMS_ALL_PUB.get_system_param_value(OKL_SYSTEM_PARAMS_ALL_PUB.G_RPT_PROD_BOOK_TYPE_CODE);
  IF (l_multi_gaap_profile IS NULL) THEN
    l_multi_gaap_profile := ' ';
  END IF;
  FOR i IN l_ID1_tab.first..l_ID1_tab.last
  LOOP
    IF (l_book_class_tab(i) = 'TAX') THEN
      IF ((l_BOOK_TYPE_CODE_tab(i) = l_multi_gaap_profile) AND
          p_trans_type NOT IN ('CRB', 'CRL')) THEN
        NULL;
      ELSE
      l_db2id_tab(l_txd_assets_b_counter4) := okc_p_util.raw_to_number(sys_guid());
      l_new_tal_id := find_cle_mapping_id(l_ID_local_tab(i));
      IF (l_new_tal_id = -1) THEN
        IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                  OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ERROR!!!!Mapping tal_id not found');
        END IF;
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      END IF;
      l_db2tal_id_tab(l_txd_assets_b_counter4) := l_new_tal_id;
      --print('l_new_tal_id='|| l_new_tal_id);
      l_db2asset_number_tab(l_txd_assets_b_counter4) := l_ASSET_NUMBER_tab(i);
      /* Bug 4439068 */
      IF p_trans_type not in ('CRB', 'CRL', 'CSP', 'CRV', 'ALI') THEN
      IF (l_db2asset_number_tab(l_txd_assets_b_counter4) IS NOT NULL) THEN
        l_new_asset_number := find_aid_mapping_id(l_db2asset_number_tab(l_txd_assets_b_counter4));
        IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                  OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_new_asset_number=' || l_new_asset_number);
        END IF;
        IF (l_new_asset_number <> '-1') THEN
          l_db2asset_number_tab(l_txd_assets_b_counter4) := l_new_asset_number;
        END IF;
      END IF;
      END IF;
      /* Bug 4439068 */

      l_new_line_number := find_cle_line_number(l_ID_local_tab(i));
      IF (l_new_line_number = -1) THEN
        IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                  OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ERROR!!!!Mapping line_number not found');
        END IF;
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      END IF;
      l_db2line_detail_number_tab(l_txd_assets_b_counter4) := l_new_line_number;

      l_db2quantity_tab(l_txd_assets_b_counter4) := l_CURRENT_UNITS_tab(i);

      get_orig_depreciation_cost(l_COST_tab(i), l_orig_cost, l_junk_cost);
      l_db2cost_tab(l_txd_assets_b_counter4) := l_orig_cost;
      l_db2tax_book_tab(l_txd_assets_b_counter4) := l_BOOK_TYPE_CODE_tab(i);
      l_db2salvage_value_tab(l_txd_assets_b_counter4) := l_SALVAGE_VALUE_tab(i);
      l_db2deprn_method_tax_tab(l_txd_assets_b_counter4) := l_DEPRN_METHOD_CODE_tab(i);

      get_deprn_details(l_DEPRN_METHOD_CODE_tab(i),
                        l_LIFE_IN_MONTHS_tab(i),
                        l_ADJUSTED_RATE_tab(i),
                        l_deprn_rate,
                        l_life_in_months);
      l_db2deprn_rate_tax_tab(l_txd_assets_b_counter4) := l_deprn_rate;
      l_db2life_in_months_tax_tab(l_txd_assets_b_counter4) := l_life_in_months;

      -- Populate okl_txd_assets_tl
      FOR j IN l_lang_tab.first..l_lang_tab.last
      LOOP
        l_dl2id_tab(l_txd_assets_tl_counter4) := l_db2id_tab(l_txd_assets_b_counter4);
        l_dl2description_tab(l_txd_assets_tl_counter4) := l_DESCRIPTION_tab(i);
        l_dl2language_tab(l_txd_assets_tl_counter4) := l_lang_tab(j);

        l_txd_assets_tl_counter4 := l_txd_assets_tl_counter4 + 1;
      END LOOP;

      l_txd_assets_b_counter4 := l_txd_assets_b_counter4 + 1;
    END IF; /* if multi-gaap */
    END IF;  /* TAX */
  END LOOP;
  END IF;

  IF (l_ID1_tab.COUNT < 1) THEN
    -- LOAN or LOAN-REVOLVING and BOOKED case
    --l_loan_booked_condition := false;
    --l_loan_booked_condition := check_loan_booked_condition;
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'In here. l_deal_type=' || l_deal_type || ' l_sts_code_orig=' || l_sts_code_orig);
        OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_id_tab.count=' || l_id_tab.COUNT || ' l_sts_code_orig=' || l_sts_code_orig);
    END IF;
    IF (l_deal_type IN ('LOAN', 'LOAN-REVOLVING')
        -- 4911174
        AND l_sts_code_orig IN ('BOOKED','EVERGREEN','EXPIRED','TERMINATED')) THEN
      IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
              OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_id_tab.count=' || l_id_tab.COUNT);
      END IF;
      IF (l_id_tab.count > 0) THEN
      FOR i IN l_id_tab.first..l_id_tab.last LOOP
        IF (l_lse_id_tab(i) = 42) THEN
          --print('Found 42: l_id_tab(' ||i || ')=' || l_id_tab(i) ||' l_name_tab('||i||')=' || l_name_tab(i));
          l_tmp_itm_rec := find_okc_k_items_rec(l_id_tab(i));
          --print('l_tmp_itm_rec.id object1_id1 object1_id2= ' || l_tmp_itm_rec.id || ':' || l_tmp_itm_rec.object1_id1 || ':' || l_tmp_itm_rec.object1_id2);
          IF (l_tmp_itm_rec.number_of_items = OKL_API.G_MISS_NUM ) THEN
            IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ERROR: Mapping okc_k_items rec not found for ' || l_id_tab(i));
            END IF;
            RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;
          IF ((l_tmp_itm_rec.object1_id1 IS NULL) AND
               (l_tmp_itm_rec.object1_id2 IS NULL)) THEN
            -- Populate okl_trx_assets
            --print('Yes object1_id1 and id2 null...');
            l_t3id_tab(l_trx_assets_counter4) := okc_p_util.raw_to_number(sys_guid());
            --print('Upto 1...');
            -- Populate kle to tas_id mapping
            l_cle_mapping_tab(l_trx_assets_counter4).old_id := l_id_tab(i); -- kle_id
            l_cle_mapping_tab(l_trx_assets_counter4).line_number :=  1;

            --print('Upto 2...');
            -- Populate okl_txl_assets_b
            l_tb2id_tab(l_trx_assets_counter4) := okc_p_util.raw_to_number(sys_guid());
            l_cle_mapping_tab(l_trx_assets_counter4).new_id :=  l_tb2id_tab(l_trx_assets_counter4);
            --print('Upto 3...');
            l_tb2object_version_number_tab(l_trx_assets_counter4) := 1;
            l_tb2tas_id_tab(l_trx_assets_counter4) := l_t3id_tab(l_trx_assets_counter4);
            -- id already changed earlier
            l_tb2kle_id_tab(l_trx_assets_counter4) := l_id_tab(i);

            --print('Upto 4...');
            -- Store Tal id to kle_id mapping
            l_dbid_mapping_tab(l_tal_to_kle_counter).tal_id := l_tb2id_tab(l_trx_assets_counter4);
            l_dbid_mapping_tab(l_tal_to_kle_counter).kle_id := l_tb2kle_id_tab(l_trx_assets_counter4);
            l_tal_to_kle_counter := l_tal_to_kle_counter + 1;

            --print('Upto asset_number...');
            --print('l_trx_assets_counter4=' || l_trx_assets_counter4);
            l_tb2dnz_khr_id_tab(l_trx_assets_counter4) := l_copied_id;
            --print('Upto asset_number l_name_tab('|| i || ')=' || l_name_tab(i));
            l_cle_id := find_cid_mapping_id(l_tb2kle_id_tab(l_trx_assets_counter4));
            --print('Upto 6 l_cle_id=' || l_cle_id);
            IF (l_cle_id = -1) THEN
                IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                                  OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ERROR: Mapping cle_id not found for id ' || l_tb2kle_id_tab(l_trx_assets_counter4));
                END IF;
                RAISE OKL_API.G_EXCEPTION_ERROR;
            END IF;

            l_asset_name_old := find_bid_mapping_id(l_cle_id, 33);
            IF (l_asset_name_old = '-1') THEN
              IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                              OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ERROR: Mapping bid_mapping not found for ' || l_cle_id);
              END IF;
              RAISE OKL_API.G_EXCEPTION_ERROR;
            END IF;
            IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_asset_name_old=' || l_asset_name_old);
            END IF;
            l_tb2asset_number_tab(l_trx_assets_counter4) := l_asset_name_old; --old asset
            --print('Upto asset_number l_name_tab('|| i || ')=' || l_name_tab(i));
            IF (l_tb2asset_number_tab(l_trx_assets_counter4) IS NOT NULL) THEN
              l_new_asset_number := find_aid_mapping_id(l_tb2asset_number_tab(l_trx_assets_counter4));
              IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                              OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_new_asset_number=' || l_new_asset_number);
              END IF;
              IF (l_new_asset_number <> '-1') THEN
                l_tb2asset_number_tab(l_trx_assets_counter4) := l_new_asset_number;
              END IF;
            END IF;

            --print('Upto asset_number...');
            l_tb2line_number_tab(l_trx_assets_counter4) := 1;
            l_tb2tal_type_tab(l_trx_assets_counter4) := p_trans_type;

            -- Populate location_id
            l_tb2fa_location_id_tab(l_trx_assets_counter4) := NULL;

            -- Todo AKP
            l_tmp_okl_33_rec := find_okl_k_lines_rec(l_cle_id);
            --print('Upto 8...l_tmp_okl_33_rec.oec=' || l_tmp_okl_33_rec.oec);
            IF (l_tmp_okl_33_rec.oec = OKL_API.G_MISS_NUM ) THEN
              IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                              OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ERROR: Mapping okl_k_lines_rec not found for ' || l_cle_id );
              END IF;
              RAISE OKL_API.G_EXCEPTION_ERROR;
            END IF;

            --print('Calling find_cle_lse_mapping with ' || l_cle_id || ':34');
            l_new_34_id := find_cle_lse_mapping_id(l_cle_id, 34);
            --print('Upto 9... l_new_34_id = ' || l_new_34_id);
            IF (l_new_34_id = -1) THEN
                IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                                  OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ERROR: Mapping cle_lse_mapping not found for ' || l_cle_id || ':33');
                END IF;
                RAISE OKL_API.G_EXCEPTION_ERROR;
            END IF;
            l_tmp_okc_34_rec := find_okc_k_items_rec(l_new_34_id);
            --print('Upto 10... l_tmp_okc_34_rec.number_of_items='|| l_tmp_okc_34_rec.number_of_items);
            IF (l_tmp_okc_34_rec.number_of_items = OKL_API.G_MISS_NUM) THEN
              IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                              OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ERROR: Mapping okl_k_lines_rec not found for ' || l_new_34_id );
              END IF;
              RAISE OKL_API.G_EXCEPTION_ERROR;
            END IF;

            --print('Upto 11...');
            l_tb2original_cost_tab(l_trx_assets_counter4) := l_tmp_okl_33_rec.oec;
            l_tb2depreciation_cost_tab(l_trx_assets_counter4) := l_tmp_okl_33_rec.oec;
            l_tb2current_units_tab(l_trx_assets_counter4) :=  l_tmp_okc_34_rec.number_of_items;
            -- Bug 4636587
            IF (p_trans_type = 'CRB') THEN
              l_tb2fa_cost_tab(l_trx_assets_counter4) := l_tmp_okl_33_rec.oec;
            ELSE
              l_tb2fa_cost_tab(l_trx_assets_counter4) := NULL;
            END IF;
            --print('Upto 11.1...');

            --print('Upto 12...');

            l_tmp_okl_42_rec := find_okl_k_lines_rec(l_id_tab(i));
            --print('Upto 13 l_tmp_okl_42_rec.year_built=' || l_tmp_okl_42_rec.year_built);
            IF (l_tmp_okl_42_rec.year_built = OKL_API.G_MISS_NUM) THEN
              IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                              OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ERROR: Mapping okl_k_lines_rec not found for ' || l_id_tab(i));
              END IF;
              RAISE OKL_API.G_EXCEPTION_ERROR;
            END IF;

            l_tb2year_manufactured_tab(l_trx_assets_counter4) := l_tmp_okl_42_rec.year_built;

            l_tb2manufacturer_name_tab(l_trx_assets_counter4) := NULL;
            l_tb2used_asset_yn_tab(l_trx_assets_counter4) := NULL;


            l_tb2tag_number_tab(l_trx_assets_counter4) := NULL;
            l_tb2model_number_tab(l_trx_assets_counter4) := NULL;
            l_tb2corporate_book_tab(l_trx_assets_counter4) := NULL;
            l_tb2in_service_date_tab(l_trx_assets_counter4) := NULL;
            l_tb2depreciation_id_tab(l_trx_assets_counter4) := NULL;
            l_tb2deprn_method_tab(l_trx_assets_counter4) := NULL;
            l_tb2deprn_rate_tab(l_trx_assets_counter4) := NULL;
            l_tb2life_in_months_tab(l_trx_assets_counter4) := NULL;
            l_tb2salvage_value_tab(l_trx_assets_counter4) := NULL;
            l_tb2percent_salvage_value_tab(l_trx_assets_counter4) := NULL;

            l_tb2asset_key_id_tab(l_trx_assets_counter4) := NULL;
            l_tb2fa_trx_date_tab(l_trx_assets_counter4) := NULL;

            --print('Upto 14...');

            -- Populate okl_trx_assets_tl
            FOR j IN l_lang_tab.first..l_lang_tab.last
            LOOP
            --print('Upto 15...');
              l_tl2id_tab(l_txl_assets_tl_counter4) := l_tb2id_tab(l_trx_assets_counter4);
              l_tl2description_tab(l_txl_assets_tl_counter4) := l_tmp_okl_33_rec.item_description;
              l_tl2language_tab(l_txl_assets_tl_counter4) := l_lang_tab(j);

              l_txl_assets_tl_counter4 := l_txl_assets_tl_counter4 + 1;
            END LOOP;

            l_trx_assets_counter4 := l_trx_assets_counter4 + 1;

          END IF; /* if object1_id1 is null and object1_id2 is null */

        END IF;  /* if lse_id_tab(i) = 42 */
      END LOOP;  /* loop on l_id_tab(i) */
      END IF; /* if l_id_tab.count > 0 */

    END IF; /* if loan BOOKED condition */
  END IF; /* if l_ID1_tab.count < 1 */

  -- By this time populated everything

  -- Insert into corr tables
  IF (l_trx_assets_counter4 > 1) THEN
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_trx_assets_counter4='||l_trx_assets_counter4 || ' l_t3id_tab.count='||l_t3id_tab.COUNT);
    END IF;

   --Added by dpsingh for LE Uptake
    l_legal_entity_id  := OKL_LEGAL_ENTITY_UTIL.get_khr_le_id(p_old_id) ;
    IF l_legal_entity_id IS NULL THEN
        -- get the contract number
       OPEN contract_num_csr(p_old_id);
       FETCH contract_num_csr INTO l_cntrct_number;
       CLOSE contract_num_csr;
	Okl_Api.set_message(p_app_name     => g_app_name,
                             p_msg_name     => 'OKL_LE_NOT_EXIST_CNTRCT',
			     p_token1           =>  'CONTRACT_NUMBER',
			     p_token1_value  =>  l_cntrct_number);
         RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    forall i IN l_t3id_tab.first..l_t3id_tab.last
      INSERT INTO okl_trx_assets (
        id, tas_type, object_version_number,
        tsu_code, try_id, date_trans_occurred,
        created_by, creation_date, last_updated_by,
        last_update_date, last_update_login, trans_number,legal_entity_id
        ,transaction_date
      ) VALUES (
        l_t3id_tab(i), p_trans_type, 1,
        'ENTERED', l_try_id, SYSDATE, -- AKP: populate try_id properly
        l_created_by, SYSDATE, l_last_updated_by,
        SYSDATE, l_last_update_login, okl_trn_seq.NEXTVAL,l_legal_entity_id
        ,SYSDATE
      );

    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_trx_assets_counter4='||l_trx_assets_counter4 || ' l_tb2id_tab.count='||l_tb2id_tab.COUNT);
    END IF;

    IF (l_tb2id_tab.COUNT > 0) THEN
    forall i IN l_tb2id_tab.first..l_tb2id_tab.last
      INSERT INTO okl_txl_assets_b (
        id, object_version_number, tas_id,
        kle_id, dnz_khr_id, line_number,
        asset_number, tal_type, original_cost,
        depreciation_cost, current_units, manufacturer_name,
        used_asset_yn, tag_number, model_number,
        corporate_book, in_service_date, depreciation_id,
        deprn_method, deprn_rate, life_in_months,
        salvage_value, percent_salvage_value, asset_key_id,
        fa_trx_date, created_by, creation_date,
        last_updated_by, last_update_date, last_update_login,
        fa_location_id, currency_code, currency_conversion_type,
        currency_conversion_rate, currency_conversion_date, year_manufactured,
        fa_cost
      ) VALUES (
        l_tb2id_tab(i), 1, l_tb2tas_id_tab(i),
        l_tb2kle_id_tab(i), l_tb2dnz_khr_id_tab(i), l_tb2line_number_tab(i),
        l_tb2asset_number_tab(i), l_tb2tal_type_tab(i), l_tb2original_cost_tab(i),
        l_tb2depreciation_cost_tab(i), l_tb2current_units_tab(i), l_tb2manufacturer_name_tab(i),
        l_tb2used_asset_yn_tab(i), l_tb2tag_number_tab(i), l_tb2model_number_tab(i),
        l_tb2corporate_book_tab(i), l_tb2in_service_date_tab(i), l_tb2depreciation_id_tab(i),
        l_tb2deprn_method_tab(i), l_tb2deprn_rate_tab(i), l_tb2life_in_months_tab(i),
        l_tb2salvage_value_tab(i), l_tb2percent_salvage_value_tab(i), l_tb2asset_key_id_tab(i),
        l_tb2fa_trx_date_tab(i), l_created_by, SYSDATE,
        l_last_updated_by, SYSDATE, l_last_update_login,
        l_tb2fa_location_id_tab(i), l_contract_currency, l_conversion_type,
        l_conversion_rate, l_conversion_rate_date, l_tb2year_manufactured_tab(i),
        l_tb2fa_cost_tab(i)
      );
      END IF;

      IF (l_txl_assets_tl_counter4 > 1) THEN
        IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                  OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_txl_assets_tl_counter4=' || l_txl_assets_tl_counter4 || ' l_tl2id_tab.count=' || l_tl2id_tab.COUNT);
        END IF;
        IF (l_tl2id_tab.COUNT > 0) THEN
        forall i IN l_tl2id_tab.first..l_tl2id_tab.last
          INSERT INTO okl_txl_assets_tl (
            id, LANGUAGE, source_lang,
            sfwt_flag, description, created_by,
            creation_date, last_updated_by, last_update_date,
            last_update_login
          ) VALUES (
            l_tl2id_tab(i), l_tl2language_tab(i), l_base_language,
            'N', l_tl2description_tab(i), l_created_by,
            SYSDATE, l_last_updated_by, SYSDATE,
            l_last_update_login
          );
         END IF;
      END IF;
  END IF;

  IF ( l_txd_assets_b_counter4  > 1) THEN
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_txd_assets_b_counter4='||l_txd_assets_b_counter4 || ' l_db2id_tab.count='||l_db2id_tab.COUNT);
    END IF;
    IF (l_db2id_tab.COUNT > 0) THEN
    forall i IN l_db2id_tab.first..l_db2id_tab.last
      INSERT INTO okl_txd_assets_b (
        id, object_version_number, tal_id,
        asset_number, line_detail_number, quantity,
        cost, tax_book, salvage_value,
        deprn_method_tax, life_in_months_tax, deprn_rate_tax,
        created_by, creation_date, last_updated_by,
        last_update_date, last_update_login, currency_code,
        currency_conversion_type, currency_conversion_rate, currency_conversion_date
      ) VALUES (
        l_db2id_tab(i), 1, l_db2tal_id_tab(i),
        l_db2asset_number_tab(i), l_db2line_detail_number_tab(i), l_db2quantity_tab(i),
        l_db2cost_tab(i), l_db2tax_book_tab(i), l_db2salvage_value_tab(i),
        l_db2deprn_method_tax_tab(i), l_db2life_in_months_tax_tab(i), l_db2deprn_rate_tax_tab(i),
        l_created_by, SYSDATE, l_last_updated_by,
        SYSDATE, l_last_update_login, l_contract_currency,
        l_conversion_type, l_conversion_rate, l_conversion_rate_date
      );
      END IF;

      IF ( l_txd_assets_tl_counter4  > 1) THEN
        IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                  OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_txd_assets_tl_counter4=' || l_txd_assets_tl_counter4 || ' l_dl2id_tab.count=' || l_dl2id_tab.COUNT);
        END IF;
        IF (l_dl2id_tab.COUNT > 0) THEN
        forall i IN l_dl2id_tab.first..l_dl2id_tab.last
          INSERT INTO okl_txd_assets_tl (
            id, LANGUAGE, source_lang,
            sfwt_flag, description, created_by,
            creation_date, last_updated_by, last_update_date,
            last_update_login
          ) VALUES (
            l_dl2id_tab(i), l_dl2language_tab(i), l_base_language,
            'N', l_dl2description_tab(i), l_created_by,
            SYSDATE, l_last_updated_by, SYSDATE,
            l_last_update_login
          );
        END IF;
      END IF;
  END IF;

EXCEPTION WHEN OTHERS THEN
  -- AKP: Replace OKL_AM_NO_OLD_SALVAGE_VALUE globally
  -- AKP: change p_msg_name to proper name
  -- AKP: Change p_token1 to proper token
  -- AKP: Change p_token1_value to proper value

  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
  END IF;
  x_return_status := OKL_API.G_RET_STS_ERROR;
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing okl_trx_assets:l_t3id_tab.count=' || l_t3id_tab.COUNT || ' ...');
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_try_id=' || l_try_id);
  END IF;
  IF (l_t3id_tab.COUNT > 0) THEN
  FOR i IN l_t3id_tab.first..l_t3id_tab.last
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_t3id_tab('||i||')=' || l_t3id_tab(i));
    END IF;
  END LOOP;
  END IF;

    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing l_tb2id_tab.count' || l_tb2id_tab.COUNT || ' ...');
    END IF;
    IF (l_tb2id_tab.COUNT > 0) THEN
    FOR i IN l_tb2id_tab.first..l_tb2id_tab.last
    LOOP
      IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
              OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tb2id_tab('||i||')='|| l_tb2id_tab(i));
        OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tb2tas_id_tab('||i||')=' ||  l_tb2tas_id_tab(i));
        OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tb2kle_id_tab('||i||')=' ||  l_tb2kle_id_tab(i));
        OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tb2dnz_khr_id_tab('||i||')=' ||  l_tb2dnz_khr_id_tab(i));
        OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tb2line_number_tab('||i||')=' ||  l_tb2line_number_tab(i));
        OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tb2asset_number_tab('||i||')=' ||  l_tb2asset_number_tab(i));
        OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tb2tal_type_tab('||i||')=' ||  l_tb2tal_type_tab(i));
        OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tb2original_cost_tab('||i||')=' ||  l_tb2original_cost_tab(i));
        OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tb2depreciation_cost_tab('||i||')=' ||  l_tb2depreciation_cost_tab(i));
        OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tb2current_units_tab('||i||')=' ||  l_tb2current_units_tab(i));
        OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tb2manufacturer_name_tab('||i||')=' ||  l_tb2manufacturer_name_tab(i));
        OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tb2used_asset_yn_tab('||i||')=' || l_tb2used_asset_yn_tab(i));
        OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tb2tag_number_tab('||i||')=' || l_tb2tag_number_tab(i));
        OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tb2model_number_tab('||i||')=' || l_tb2model_number_tab(i));
        OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tb2corporate_book_tab('||i||')=' || l_tb2corporate_book_tab(i));
        OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tb2in_service_date_tab('||i||')=' || l_tb2in_service_date_tab(i));
        OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tb2depreciation_id_tab('||i||')=' || l_tb2depreciation_id_tab(i));
        OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tb2deprn_method_tab('||i||')=' || l_tb2deprn_method_tab(i));
        OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tb2deprn_rate_tab('||i||')=' || l_tb2deprn_rate_tab(i));
        OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tb2life_in_months_tab('||i||')=' || l_tb2life_in_months_tab(i));
        OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tb2salvage_value_tab('||i||')=' || l_tb2salvage_value_tab(i));
        OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tb2percent_salvage_value_tab('||i||')=' || l_tb2percent_salvage_value_tab(i));
        OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tb2asset_key_id_tab('||i||')=' || l_tb2asset_key_id_tab(i));
        OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tb2fa_trx_date_tab('||i||')=' || l_tb2fa_trx_date_tab(i));
        OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tb2fa_location_id_tab('||i||')=' || l_tb2fa_location_id_tab(i));
        OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tb2fa_cost_tab('||i||')=' ||  l_tb2fa_cost_tab(i));
      END IF;

    END LOOP;
    END IF;

  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing l_tl2id_tab.count=' || l_tl2id_tab.COUNT || ' ...');
  END IF;
  IF (l_tl2id_tab.COUNT > 0) THEN
  FOR i IN l_tl2id_tab.first..l_tl2id_tab.last
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tl2id_tab('||i||')=' || l_tl2id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tl2language_tab('||i||')=' || l_tl2language_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_base_language('||i||')=' || l_base_language);
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_tl2description_tab('||i||')=' || l_tl2description_tab(i));
    END IF;
  END LOOP;
  END IF;

  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing l_db2id_tab.count=' || l_db2id_tab.COUNT || ' ...');
  END IF;
  IF (l_db2id_tab.COUNT > 0) THEN
  FOR i IN l_db2id_tab.first..l_db2id_tab.last
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_db2id_tab('||i||')=' || l_db2id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_db2tal_id_tab('||i||')=' || l_db2tal_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_db2asset_number_tab('||i||')=' || l_db2asset_number_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_db2line_detail_number_tab('||i||')=' || l_db2line_detail_number_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_db2quantity_tab('||i||')=' || l_db2quantity_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_db2cost_tab('||i||')=' || l_db2cost_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_db2tax_book_tab('||i||')=' || l_db2tax_book_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_db2salvage_value_tab('||i||')=' || l_db2salvage_value_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_db2deprn_method_tax_tab('||i||')=' || l_db2deprn_method_tax_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_db2life_in_months_tax_tab('||i||')=' || l_db2life_in_months_tax_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_db2deprn_rate_tax_tab('||i||')=' || l_db2deprn_rate_tax_tab(i));
    END IF;
  END LOOP;
  END IF;

  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing l_dl2id_tab.count=' || l_dl2id_tab.COUNT || ' ...');
  END IF;
  IF (l_dl2id_tab.COUNT > 0) THEN
  FOR i IN l_dl2id_tab.first..l_dl2id_tab.last
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dl2id_tab('||i||')=' || l_dl2id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dl2language_tab('||i||')=' || l_dl2language_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_base_language('||i||')=' || l_base_language);
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_dl2description_tab('||i||')=' || l_dl2description_tab(i));
    END IF;
  END LOOP;
  END IF;

  RAISE OKC_API.G_EXCEPTION_ERROR;
END; /* insert okl_trx_assets_3 */

PROCEDURE insert_okc_rg_party_roles(p_old_id IN okc_k_headers_b.id%TYPE,
                                    p_new_id IN okc_k_headers_b.id%TYPE) IS
CURSOR c25(p_id NUMBER) IS
SELECT
       a.id, a.rgp_id, a.rrd_id,
       a.cpl_id, a.dnz_chr_id, a.object_version_number,
       a.created_by, a.creation_date, a.last_updated_by,
       a.last_update_date, a.last_update_login, a.security_group_id
FROM okc_rg_party_roles a,
     okc_rule_groups_b b
WHERE a.rgp_id = b.id
AND   b.dnz_chr_id = p_id
  AND (
    b.chr_id = b.chr_id
    OR (
        NVL(p_trans_type, 'N') = 'Y'
        AND b.cle_id IS NOT NULL
       )
  );

    l_gid_tab2 l_gid_type;
    l_grgp_id_tab2 l_grgp_id_type;
    l_grrd_id_tab2 l_grrd_id_type;
    l_gcpl_id_tab2 l_gcpl_id_type;
    l_gdnz_chr_id_tab2 l_gdnz_chr_id_type;
    l_gobject_version_number_tab2 l_gobject_version_number_type;
    l_gcreated_by_tab2 l_gcreated_by_type;
    l_gcreation_date_tab2 l_gcreation_date_type;
    l_glast_updated_by_tab2 l_glast_updated_by_type;
    l_glast_update_date_tab2 l_glast_update_date_type;
    l_glast_update_login_tab2 l_glast_update_login_type;
    l_gsecurity_group_id_tab2 l_gsecurity_group_id_type;

  l_new_rgp_id NUMBER;
  l_new_cpl_id NUMBER;

BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  OPEN c25(p_old_id);
  LOOP
    FETCH c25 bulk collect INTO
     l_gid_tab2, l_grgp_id_tab2, l_grrd_id_tab2,
     l_gcpl_id_tab2, l_gdnz_chr_id_tab2, l_gobject_version_number_tab2,
     l_gcreated_by_tab2, l_gcreation_date_tab2, l_glast_updated_by_tab2,
     l_glast_update_date_tab2, l_glast_update_login_tab2, l_gsecurity_group_id_tab2

    limit G_BULK_SIZE;
    EXIT WHEN l_gid_tab2.COUNT = 0;
    FOR i IN l_gid_tab2.first..l_gid_tab2.last
    LOOP
      l_gid_tab(l_rg_party_roles_counter) := l_gid_tab2(i);
      -- Change id
      l_gid_tab(l_rg_party_roles_counter) := okc_p_util.raw_to_number(sys_guid());

      l_grgp_id_tab(l_rg_party_roles_counter) := l_grgp_id_tab2(i);
      -- Change rgp_id
      l_new_rgp_id := find_rid_mapping_id(l_grgp_id_tab(l_rg_party_roles_counter));
        IF (l_new_rgp_id = -1) THEN
          IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ERROR : Mapping id not found for ' || l_grgp_id_tab(l_rg_party_roles_counter));
          END IF;
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        END IF;
      l_grgp_id_tab(l_rg_party_roles_counter) := l_new_rgp_id;

      l_grrd_id_tab(l_rg_party_roles_counter) := l_grrd_id_tab2(i);
      -- Change rrd_id ??? AKP

      l_gcpl_id_tab(l_rg_party_roles_counter) := l_gcpl_id_tab2(i);
      -- Change cpl_id
      l_new_cpl_id := find_party_mapping_id(l_gcpl_id_tab(l_rg_party_roles_counter));
      l_gcpl_id_tab(l_rg_party_roles_counter) := l_new_cpl_id;

      l_gdnz_chr_id_tab(l_rg_party_roles_counter) := l_gdnz_chr_id_tab2(i);
      -- Change dnz_chr_id
      l_gdnz_chr_id_tab(l_rg_party_roles_counter) := p_new_id;

      l_gobject_version_number_tab(l_rg_party_roles_counter) := l_gobject_version_number_tab2(i);
      l_gcreated_by_tab(l_rg_party_roles_counter) := l_gcreated_by_tab2(i);
      l_gcreation_date_tab(l_rg_party_roles_counter) := l_gcreation_date_tab2(i);
      l_glast_updated_by_tab(l_rg_party_roles_counter) := l_glast_updated_by_tab2(i);
      l_glast_update_date_tab(l_rg_party_roles_counter) := l_glast_update_date_tab2(i);
      l_glast_update_login_tab(l_rg_party_roles_counter) := l_glast_update_login_tab2(i);
      l_gsecurity_group_id_tab(l_rg_party_roles_counter) := l_gsecurity_group_id_tab2(i);

      l_rg_party_roles_counter := l_rg_party_roles_counter + 1;

    END LOOP;
  END LOOP;
  CLOSE c25;
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_rg_party_roles_counter='||l_rg_party_roles_counter || ' l_gid_tab.count=' || l_gid_tab.COUNT);
  END IF;
  IF (l_rg_party_roles_counter > 1) THEN
    forall i IN l_gid_tab.first..l_gid_tab.last
    INSERT INTO okc_rg_party_roles (
       id, rgp_id, rrd_id,
       cpl_id, dnz_chr_id, object_version_number,
       created_by, creation_date, last_updated_by,
       last_update_date, last_update_login, security_group_id
    ) VALUES (
       l_gid_tab(i), l_grgp_id_tab(i), l_grrd_id_tab(i),
       l_gcpl_id_tab(i), l_gdnz_chr_id_tab(i), l_gobject_version_number_tab(i),
       l_created_by, SYSDATE, l_last_updated_by,
       SYSDATE, l_last_update_login, l_gsecurity_group_id_tab(i)
    );
  END IF;
EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'okc_rg_party_roles');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing okc_rg_party_roles: l_gid_tab.count=' || l_gid_tab.COUNT || ' ...');
  END IF;
  IF (l_gid_tab.COUNT > 0) THEN
  FOR i IN l_gid_tab.first..l_gid_tab.last
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_gid_tab('||i||')=' || l_gid_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_grgp_id_tab('||i||')=' || l_grgp_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_grrd_id_tab('||i||')=' || l_grrd_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_gcpl_id_tab('||i||')=' || l_gcpl_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_gdnz_chr_id_tab('||i||')=' || l_gdnz_chr_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_gobject_version_number_tab('||i||')=' || l_gobject_version_number_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_gsecurity_group_id_tab('||i||')=' || l_gsecurity_group_id_tab(i));
    END IF;
  END LOOP;
  END IF;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END; /* insert_okc_rg_party_roles */

PROCEDURE insert_okl_supp_invoice_dtls(p_old_id IN okc_k_headers_b.id%TYPE)
IS
CURSOR c26(p_id NUMBER) IS
SELECT
       a.id, a.object_version_number, a.cle_id,
       a.fa_cle_id, a.invoice_number, a.date_invoiced,
       a.date_due, a.shipping_address_id1, a.shipping_address_id2,
       a.shipping_address_code, a.attribute_category, a.attribute1,
       a.attribute2, a.attribute3, a.attribute4,
       a.attribute5, a.attribute6, a.attribute7,
       a.attribute8, a.attribute9, a.attribute10,
       a.attribute11, a.attribute12, a.attribute13,
       a.attribute14, a.attribute15, a.created_by,
       a.creation_date, a.last_updated_by, a.last_update_date,
       a.last_update_login
FROM okl_supp_invoice_dtls a,
     okc_k_lines_b b
WHERE b.dnz_chr_id = p_id
AND (
    ( a.cle_id = b.id AND b.lse_id IN (34,44) )
    -- Bug (duplicate supp invoice dtls lines because of the OR condition)
    --OR
    --( a.fa_cle_id = b.id AND b.lse_id = 42 )
);

    -- Commented here. Moved it to make global.
    /*
    TYPE l_osid_type is table of okl_supp_invoice_dtls.id%TYPE index by binary_integer;
    TYPE l_osobject_version_number_type is table of okl_supp_invoice_dtls.object_version_number%TYPE index by binary_integer;
    TYPE l_oscle_id_type is table of okl_supp_invoice_dtls.cle_id%TYPE index by binary_integer;
    TYPE l_osfa_cle_id_type is table of okl_supp_invoice_dtls.fa_cle_id%TYPE index by binary_integer;
    TYPE l_osinvoice_number_type is table of okl_supp_invoice_dtls.invoice_number%TYPE index by binary_integer;
    TYPE l_osdate_invoiced_type is table of okl_supp_invoice_dtls.date_invoiced%TYPE index by binary_integer;
    TYPE l_osdate_due_type is table of okl_supp_invoice_dtls.date_due%TYPE index by binary_integer;
    TYPE l_osshipping_address_id1_type is table of okl_supp_invoice_dtls.shipping_address_id1%TYPE index by binary_integer;
    TYPE l_osshipping_address_id2_type is table of okl_supp_invoice_dtls.shipping_address_id2%TYPE index by binary_integer;
    TYPE l_osshipping_address_code_type is table of okl_supp_invoice_dtls.shipping_address_code%TYPE index by binary_integer;
    TYPE l_osattribute_category_type is table of okl_supp_invoice_dtls.attribute_category%TYPE index by binary_integer;
    TYPE l_osattribute1_type is table of okl_supp_invoice_dtls.attribute1%TYPE index by binary_integer;
    TYPE l_osattribute2_type is table of okl_supp_invoice_dtls.attribute2%TYPE index by binary_integer;
    TYPE l_osattribute3_type is table of okl_supp_invoice_dtls.attribute3%TYPE index by binary_integer;
    TYPE l_osattribute4_type is table of okl_supp_invoice_dtls.attribute4%TYPE index by binary_integer;
    TYPE l_osattribute5_type is table of okl_supp_invoice_dtls.attribute5%TYPE index by binary_integer;
    TYPE l_osattribute6_type is table of okl_supp_invoice_dtls.attribute6%TYPE index by binary_integer;
    TYPE l_osattribute7_type is table of okl_supp_invoice_dtls.attribute7%TYPE index by binary_integer;
    TYPE l_osattribute8_type is table of okl_supp_invoice_dtls.attribute8%TYPE index by binary_integer;
    TYPE l_osattribute9_type is table of okl_supp_invoice_dtls.attribute9%TYPE index by binary_integer;
    TYPE l_osattribute10_type is table of okl_supp_invoice_dtls.attribute10%TYPE index by binary_integer;
    TYPE l_osattribute11_type is table of okl_supp_invoice_dtls.attribute11%TYPE index by binary_integer;
    TYPE l_osattribute12_type is table of okl_supp_invoice_dtls.attribute12%TYPE index by binary_integer;
    TYPE l_osattribute13_type is table of okl_supp_invoice_dtls.attribute13%TYPE index by binary_integer;
    TYPE l_osattribute14_type is table of okl_supp_invoice_dtls.attribute14%TYPE index by binary_integer;
    TYPE l_osattribute15_type is table of okl_supp_invoice_dtls.attribute15%TYPE index by binary_integer;
    TYPE l_oscreated_by_type is table of okl_supp_invoice_dtls.created_by%TYPE index by binary_integer;
    TYPE l_oscreation_date_type is table of okl_supp_invoice_dtls.creation_date%TYPE index by binary_integer;
    TYPE l_oslast_updated_by_type is table of okl_supp_invoice_dtls.last_updated_by%TYPE index by binary_integer;
    TYPE l_oslast_update_date_type is table of okl_supp_invoice_dtls.last_update_date%TYPE index by binary_integer;
    TYPE l_oslast_update_login_type is table of okl_supp_invoice_dtls.last_update_login%TYPE index by binary_integer;

    l_osid_tab l_osid_type;
    l_osobject_version_number_tab l_osobject_version_number_type;
    l_oscle_id_tab l_oscle_id_type;
    l_osfa_cle_id_tab l_osfa_cle_id_type;
    l_osinvoice_number_tab l_osinvoice_number_type;
    l_osdate_invoiced_tab l_osdate_invoiced_type;
    l_osdate_due_tab l_osdate_due_type;
    l_osshipping_address_id1_tab l_osshipping_address_id1_type;
    l_osshipping_address_id2_tab l_osshipping_address_id2_type;
    l_osshipping_address_code_tab l_osshipping_address_code_type;
    l_osattribute_category_tab l_osattribute_category_type;
    l_osattribute1_tab l_osattribute1_type;
    l_osattribute2_tab l_osattribute2_type;
    l_osattribute3_tab l_osattribute3_type;
    l_osattribute4_tab l_osattribute4_type;
    l_osattribute5_tab l_osattribute5_type;
    l_osattribute6_tab l_osattribute6_type;
    l_osattribute7_tab l_osattribute7_type;
    l_osattribute8_tab l_osattribute8_type;
    l_osattribute9_tab l_osattribute9_type;
    l_osattribute10_tab l_osattribute10_type;
    l_osattribute11_tab l_osattribute11_type;
    l_osattribute12_tab l_osattribute12_type;
    l_osattribute13_tab l_osattribute13_type;
    l_osattribute14_tab l_osattribute14_type;
    l_osattribute15_tab l_osattribute15_type;
    l_oscreated_by_tab l_oscreated_by_type;
    l_oscreation_date_tab l_oscreation_date_type;
    l_oslast_updated_by_tab l_oslast_updated_by_type;
    l_oslast_update_date_tab l_oslast_update_date_type;
    l_oslast_update_login_tab l_oslast_update_login_type;

    l_supp_invoice_dtls_counter number := 1;
    */

    l_osid_tab2 l_osid_type;
    l_osobject_version_number_tab2 l_osobject_version_number_type;
    l_oscle_id_tab2 l_oscle_id_type;
    l_osfa_cle_id_tab2 l_osfa_cle_id_type;
    l_osinvoice_number_tab2 l_osinvoice_number_type;
    l_osdate_invoiced_tab2 l_osdate_invoiced_type;
    l_osdate_due_tab2 l_osdate_due_type;
    l_osshipping_address_id1_tab2 l_osshipping_address_id1_type;
    l_osshipping_address_id2_tab2 l_osshipping_address_id2_type;
    l_osshipping_address_code_tab2 l_osshipping_address_code_type;
    l_osattribute_category_tab2 l_osattribute_category_type;
    l_osattribute1_tab2 l_osattribute1_type;
    l_osattribute2_tab2 l_osattribute2_type;
    l_osattribute3_tab2 l_osattribute3_type;
    l_osattribute4_tab2 l_osattribute4_type;
    l_osattribute5_tab2 l_osattribute5_type;
    l_osattribute6_tab2 l_osattribute6_type;
    l_osattribute7_tab2 l_osattribute7_type;
    l_osattribute8_tab2 l_osattribute8_type;
    l_osattribute9_tab2 l_osattribute9_type;
    l_osattribute10_tab2 l_osattribute10_type;
    l_osattribute11_tab2 l_osattribute11_type;
    l_osattribute12_tab2 l_osattribute12_type;
    l_osattribute13_tab2 l_osattribute13_type;
    l_osattribute14_tab2 l_osattribute14_type;
    l_osattribute15_tab2 l_osattribute15_type;
    l_oscreated_by_tab2 l_oscreated_by_type;
    l_oscreation_date_tab2 l_oscreation_date_type;
    l_oslast_updated_by_tab2 l_oslast_updated_by_type;
    l_oslast_update_date_tab2 l_oslast_update_date_type;
    l_oslast_update_login_tab2 l_oslast_update_login_type;

  l_new_cle_id NUMBER;
  l_new_fa_cle_id NUMBER;
BEGIN
  OPEN c26(p_old_id);
  LOOP
    FETCH c26 bulk collect INTO
     l_osid_tab2, l_osobject_version_number_tab2, l_oscle_id_tab2,
     l_osfa_cle_id_tab2, l_osinvoice_number_tab2, l_osdate_invoiced_tab2,
     l_osdate_due_tab2, l_osshipping_address_id1_tab2, l_osshipping_address_id2_tab2,
     l_osshipping_address_code_tab2, l_osattribute_category_tab2, l_osattribute1_tab2,
     l_osattribute2_tab2, l_osattribute3_tab2, l_osattribute4_tab2,
     l_osattribute5_tab2, l_osattribute6_tab2, l_osattribute7_tab2,
     l_osattribute8_tab2, l_osattribute9_tab2, l_osattribute10_tab2,
     l_osattribute11_tab2, l_osattribute12_tab2, l_osattribute13_tab2,
     l_osattribute14_tab2, l_osattribute15_tab2, l_oscreated_by_tab2,
     l_oscreation_date_tab2, l_oslast_updated_by_tab2, l_oslast_update_date_tab2,
     l_oslast_update_login_tab2
    limit G_BULK_SIZE;
    EXIT WHEN l_osid_tab2.COUNT = 0;
    FOR i IN l_osid_tab2.first..l_osid_tab2.last
    LOOP
      l_osid_tab(l_supp_invoice_dtls_counter) := l_osid_tab2(i);
      -- Change id
      l_osid_tab(l_supp_invoice_dtls_counter) := okc_p_util.raw_to_number(sys_guid());

      l_osobject_version_number_tab(l_supp_invoice_dtls_counter) := l_osobject_version_number_tab2(i);
      l_oscle_id_tab(l_supp_invoice_dtls_counter) := l_oscle_id_tab2(i);
      -- Change cle_id
      IF (l_oscle_id_tab(l_supp_invoice_dtls_counter) IS NOT NULL) THEN
        l_new_cle_id := find_mapping_id(l_oscle_id_tab(l_supp_invoice_dtls_counter));
        IF (l_new_cle_id = -1) THEN
          IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ERROR : Mapping id not found for ' || l_oscle_id_tab(l_supp_invoice_dtls_counter));
          END IF;
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        END IF;
        l_oscle_id_tab(l_supp_invoice_dtls_counter) := l_new_cle_id;
      END IF;

      l_osfa_cle_id_tab(l_supp_invoice_dtls_counter) := l_osfa_cle_id_tab2(i);
      -- Change fa_cle_id
      IF (l_osfa_cle_id_tab(l_supp_invoice_dtls_counter) IS NOT NULL) THEN
        l_new_fa_cle_id := find_mapping_id(l_osfa_cle_id_tab(l_supp_invoice_dtls_counter));
        l_osfa_cle_id_tab(l_supp_invoice_dtls_counter) := l_new_fa_cle_id;
      END IF;

      l_osinvoice_number_tab(l_supp_invoice_dtls_counter) := l_osinvoice_number_tab2(i);
      l_osdate_invoiced_tab(l_supp_invoice_dtls_counter) := l_osdate_invoiced_tab2(i);
      l_osdate_due_tab(l_supp_invoice_dtls_counter) := l_osdate_due_tab2(i);
      l_osshipping_address_id1_tab(l_supp_invoice_dtls_counter) := l_osshipping_address_id1_tab2(i);
      l_osshipping_address_id2_tab(l_supp_invoice_dtls_counter) := l_osshipping_address_id2_tab2(i);
      l_osshipping_address_code_tab(l_supp_invoice_dtls_counter) := l_osshipping_address_code_tab2(i);
      l_osattribute_category_tab(l_supp_invoice_dtls_counter) := l_osattribute_category_tab2(i);
      l_osattribute1_tab(l_supp_invoice_dtls_counter) := l_osattribute1_tab2(i);
      l_osattribute2_tab(l_supp_invoice_dtls_counter) := l_osattribute2_tab2(i);
      l_osattribute3_tab(l_supp_invoice_dtls_counter) := l_osattribute3_tab2(i);
      l_osattribute4_tab(l_supp_invoice_dtls_counter) := l_osattribute4_tab2(i);
      l_osattribute5_tab(l_supp_invoice_dtls_counter) := l_osattribute5_tab2(i);
      l_osattribute6_tab(l_supp_invoice_dtls_counter) := l_osattribute6_tab2(i);
      l_osattribute7_tab(l_supp_invoice_dtls_counter) := l_osattribute7_tab2(i);
      l_osattribute8_tab(l_supp_invoice_dtls_counter) := l_osattribute8_tab2(i);
      l_osattribute9_tab(l_supp_invoice_dtls_counter) := l_osattribute9_tab2(i);
      l_osattribute10_tab(l_supp_invoice_dtls_counter) := l_osattribute10_tab2(i);
      l_osattribute11_tab(l_supp_invoice_dtls_counter) := l_osattribute11_tab2(i);
      l_osattribute12_tab(l_supp_invoice_dtls_counter) := l_osattribute12_tab2(i);
      l_osattribute13_tab(l_supp_invoice_dtls_counter) := l_osattribute13_tab2(i);
      l_osattribute14_tab(l_supp_invoice_dtls_counter) := l_osattribute14_tab2(i);
      l_osattribute15_tab(l_supp_invoice_dtls_counter) := l_osattribute15_tab2(i);
      l_oscreated_by_tab(l_supp_invoice_dtls_counter) := l_oscreated_by_tab2(i);
      l_oscreation_date_tab(l_supp_invoice_dtls_counter) := l_oscreation_date_tab2(i);
      l_oslast_updated_by_tab(l_supp_invoice_dtls_counter) := l_oslast_updated_by_tab2(i);
      l_oslast_update_date_tab(l_supp_invoice_dtls_counter) := l_oslast_update_date_tab2(i);
      l_oslast_update_login_tab(l_supp_invoice_dtls_counter) := l_oslast_update_login_tab2(i);

      l_supp_invoice_dtls_counter := l_supp_invoice_dtls_counter + 1;

    END LOOP;
  END LOOP;
  CLOSE c26;
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_supp_invoice_dtls_counter=' || l_supp_invoice_dtls_counter || ' l_osid_tab.count=' || l_osid_tab.COUNT);
  END IF;
  IF (l_supp_invoice_dtls_counter > 1) THEN
    forall i IN l_osid_tab.first..l_osid_tab.last
    INSERT INTO okl_supp_invoice_dtls (
       id, object_version_number, cle_id,
       fa_cle_id, invoice_number, date_invoiced,
       date_due, shipping_address_id1, shipping_address_id2,
       shipping_address_code, attribute_category, attribute1,
       attribute2, attribute3, attribute4,
       attribute5, attribute6, attribute7,
       attribute8, attribute9, attribute10,
       attribute11, attribute12, attribute13,
       attribute14, attribute15, created_by,
       creation_date, last_updated_by, last_update_date,
       last_update_login
    ) VALUES (
       l_osid_tab(i), 1, l_oscle_id_tab(i),
       l_osfa_cle_id_tab(i), l_osinvoice_number_tab(i), l_osdate_invoiced_tab(i),
       l_osdate_due_tab(i), l_osshipping_address_id1_tab(i), l_osshipping_address_id2_tab(i),
       l_osshipping_address_code_tab(i), l_osattribute_category_tab(i), l_osattribute1_tab(i),
       l_osattribute2_tab(i), l_osattribute3_tab(i), l_osattribute4_tab(i),
       l_osattribute5_tab(i), l_osattribute6_tab(i), l_osattribute7_tab(i),
       l_osattribute8_tab(i), l_osattribute9_tab(i), l_osattribute10_tab(i),
       l_osattribute11_tab(i), l_osattribute12_tab(i), l_osattribute13_tab(i),
       l_osattribute14_tab(i), l_osattribute15_tab(i), l_created_by,
       SYSDATE, l_last_updated_by, SYSDATE,
       l_last_update_login
    );
  END IF;

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'okl_supp_invoice_dtls');*/
  /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing okl_supp_invoice_dtls: l_osid_tab.count=' || l_osid_tab.COUNT || ' ...');
  END IF;
  IF (l_osid_tab.COUNT > 0) THEN
  FOR i IN l_osid_tab.first..l_osid_tab.last
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_osid_tab('||i||')=' || l_osid_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_oscle_id_tab('||i||')=' || l_oscle_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_osfa_cle_id_tab('||i||')=' || l_osfa_cle_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_osinvoice_number_tab('||i||')=' || l_osinvoice_number_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_osdate_invoiced_tab('||i||')=' || l_osdate_invoiced_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_osdate_due_tab('||i||')=' || l_osdate_due_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_osshipping_address_id1_tab('||i||')=' || l_osshipping_address_id1_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_osshipping_address_id2_tab('||i||')=' || l_osshipping_address_id2_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_osshipping_address_code_tab('||i||')=' || l_osshipping_address_code_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_osattribute_category_tab('||i||')=' || l_osattribute_category_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_osattribute1_tab('||i||')=' || l_osattribute1_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_osattribute2_tab('||i||')=' || l_osattribute2_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_osattribute3_tab('||i||')=' || l_osattribute3_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_osattribute4_tab('||i||')=' || l_osattribute4_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_osattribute5_tab('||i||')=' || l_osattribute5_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_osattribute6_tab('||i||')=' || l_osattribute6_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_osattribute7_tab('||i||')=' || l_osattribute7_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_osattribute8_tab('||i||')=' || l_osattribute8_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_osattribute9_tab('||i||')=' || l_osattribute9_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_osattribute10_tab('||i||')=' || l_osattribute10_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_osattribute11_tab('||i||')=' || l_osattribute11_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_osattribute12_tab('||i||')=' || l_osattribute12_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_osattribute13_tab('||i||')=' || l_osattribute13_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_osattribute14_tab('||i||')=' || l_osattribute14_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_osattribute15_tab('||i||')=' || l_osattribute15_tab(i));
    END IF;
  END LOOP;
  END IF;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;

PROCEDURE get_object1_id1(p_install_location_type_code IN okx_install_items_v.location_type_code%TYPE,
                          p_install_location_id IN okx_install_items_v.location_id%TYPE,
                          p_instance_number IN okx_install_items_v.instance_number%TYPE,
                          x_object_id1_new OUT NOCOPY NUMBER
) IS

    --Cursors
    CURSOR c_get_iti_object_id1(p_party_site_id HZ_PARTY_SITE_USES.PARTY_SITE_ID%TYPE)
    IS
    SELECT psu.party_site_use_id
    FROM HZ_PARTY_SITE_USES psu,
         HZ_PARTY_SITES ps
    WHERE ps.party_site_id =   psu.party_site_id
    AND psu.site_use_type = 'INSTALL_AT'
    AND psu.party_site_id = p_party_site_id;

    CURSOR l_site_use_csr (p_location_id IN NUMBER) IS
    SELECT psu.party_site_use_id
    FROM   hz_party_site_uses psu,
           hz_party_sites     ps
    WHERE  psu.party_site_id     = ps.party_site_id
    AND    psu.site_use_type     = 'INSTALL_AT'
    AND    ps.location_id        = p_location_id;

    l_site_use_rec    l_site_use_csr%ROWTYPE;

    --Cursor to get address for error
    CURSOR l_address_csr (pty_site_id IN NUMBER ) IS
    SELECT SUBSTR(arp_addr_label_pkg.format_address(NULL,hl.address1,hl.address2,hl.address3, hl.address4,hl.city,hl.county,hl.state,hl.province,hl.postal_code,NULL,hl.country,NULL, NULL,NULL,NULL,NULL,NULL,NULL,'n','n',80,1,1),1,80)
    FROM hz_locations hl,
         hz_party_sites ps
    WHERE hl.location_id = ps.location_id
    AND   ps.party_site_id = pty_site_id;

    CURSOR l_address_csr2 (loc_id IN NUMBER) IS
    SELECT SUBSTR(arp_addr_label_pkg.format_address(NULL,hl.address1,hl.address2,hl.address3, hl.address4,hl.city,hl.county,hl.state,hl.province,hl.postal_code,NULL,hl.country,NULL, NULL,NULL,NULL,NULL,NULL,NULL,'n','n',80,1,1),1,80)
    FROM hz_locations hl
    WHERE hl.location_id = loc_id;

    l_address VARCHAR2(80);

BEGIN
    --Logic
    IF NVL(p_install_location_type_code,OKL_API.G_MISS_CHAR) NOT IN ('HZ_PARTY_SITES','HZ_LOCATIONS') THEN
    --Raise Error
    OKL_API.Set_Message(p_app_name     => 'OKL_COPY_CONTRACT_PVT',
                        p_msg_name     => 'OKL_INVALID_INSTALL_LOC_TYPE',
                        p_token1       => 'LOCATION_TYPE',
                        p_token1_value => p_install_location_type_code,
                        p_token2       => 'LOCATION_TYPE1',
                        p_token2_value => 'HZ_PARTY_SITES',
                        p_token3       => 'LOCATION_TYPE2',
                        p_token3_value => 'HZ_LOCATIONS');
    x_return_status := OKL_API.G_RET_STS_ERROR;
    RAISE OKL_API.G_EXCEPTION_ERROR;

    ELSIF NVL(p_install_location_type_code,OKL_API.G_MISS_CHAR) = 'HZ_PARTY_SITES' THEN

                OPEN  c_get_iti_object_id1(p_install_location_id);
                FETCH c_get_iti_object_id1 INTO x_OBJECT_ID1_NEW;
                IF c_get_iti_object_id1%NOTFOUND THEN
                    OPEN l_address_csr(pty_site_id => p_install_location_id);
                    FETCH l_address_csr INTO l_address;
                    CLOSE l_address_csr;
                    --Raise Error : not defined as install_at
                    OKL_API.Set_Message
                             (p_app_name     => 'OKL_COPY_CONTRACT_PVT',
                              p_msg_name     => 'OKL_INSTALL_LOC_MISSING_USAGE',
                              p_token1       => 'USAGE_TYPE',
                              p_token1_value => 'INSTALL_AT',
                              p_token2       => 'ADDRESS',
                              p_token2_value => l_address,
                              p_token3       => 'INSTANCE_NUMBER',
                              p_token3_value => p_instance_number);
                    x_return_status := OKL_API.G_RET_STS_ERROR;
                    RAISE OKL_API.G_EXCEPTION_ERROR;
                END IF;
                CLOSE c_get_iti_object_id1;

    ELSIF NVL(p_install_location_type_code,OKL_API.G_MISS_CHAR) = 'HZ_LOCATIONS' THEN

                OPEN  l_site_use_csr(p_install_location_id);
                FETCH l_site_use_csr INTO l_site_use_rec;
                IF l_site_use_csr%NOTFOUND THEN
                    OPEN l_address_csr2(loc_id => p_install_location_id);
                    FETCH l_address_csr2 INTO l_address;
                    CLOSE l_address_csr2;
                    --Raise Error : not defined as install_at
                    OKL_API.Set_Message(p_app_name  => 'OKL_COPY_CONTRACT_PVT2',
                              p_msg_name     => 'OKL_INSTALL_LOC_MISSING_USAGE',
                              p_token1       => 'USAGE_TYPE',
                              p_token1_value => 'INSTALL_AT',
                              p_token2       => 'ADDRESS',
                              p_token2_value => l_address,
                              p_token3       => 'INSTANCE_NUMBER',
                              p_token3_value => p_instance_number);
                    x_return_status := OKL_API.G_RET_STS_ERROR;
                    RAISE OKL_API.G_EXCEPTION_ERROR;

                END IF;
                x_object_id1_new := l_site_use_rec.party_site_use_id;
                CLOSE l_site_use_csr;


    END IF;

END; /* get_object1_id1 */

PROCEDURE insert_okl_txl_itm_insts2(p_old_id IN okc_k_headers_b.id%TYPE,
                                    p_new_id IN okc_k_headers_b.id%TYPE) IS
CURSOR c28(p_id NUMBER) IS
SELECT csi.inventory_item_id,
       csi.inv_master_organization_id,
       csi.instance_number,
       b.id,
       b.cle_id,
       c.object1_id1,
       csi.location_type_code,
       csi.location_id,
       csi.serial_number
FROM   okx_install_items_v csi,
       okc_k_lines_b b,
       okc_k_items c
WHERE  b.dnz_chr_id = p_id
AND    b.lse_id = 45
AND    c.dnz_chr_id = p_id
AND    b.id = c.cle_id
AND    csi.id1 = TO_NUMBER(c.object1_id1);

CURSOR c_get_cle(p_id NUMBER, p_lse_id NUMBER) IS
    SELECT id
    FROM okc_k_lines_b
    WHERE cle_id = p_id
    AND lse_id = p_lse_id;

/*cursor c_get_object1_id1(p_id number, p_lse_id number) is
  select c.object1_id2
  from   okc_k_items c,
         okc_k_lines_b b
  where c.cle_id = b.id
  and   b.id = p_id
  and b.lse_id = p_lse_id;*/

TYPE l_inventory_item_id_type IS TABLE OF okx_install_items_v.inventory_item_id%TYPE INDEX BY BINARY_INTEGER;
TYPE l_inv_master_org_id_type IS TABLE OF okx_install_items_v.inv_master_organization_id%TYPE INDEX BY BINARY_INTEGER;
TYPE l_instance_number_type IS TABLE OF okx_install_items_v.instance_number%TYPE INDEX BY BINARY_INTEGER;
TYPE l_id_type IS TABLE OF okc_k_lines_b.id%TYPE INDEX BY BINARY_INTEGER;
TYPE l_cle_id_type IS TABLE OF okc_k_lines_b.cle_id%TYPE INDEX BY BINARY_INTEGER;
TYPE l_object1_id1_type IS TABLE OF okc_k_items.object1_id1%TYPE INDEX BY BINARY_INTEGER;
TYPE l_location_type_code_type IS TABLE OF okx_install_items_v.location_type_code%TYPE INDEX BY BINARY_INTEGER;
TYPE l_location_id_type IS TABLE OF okx_install_items_v.location_id%TYPE INDEX BY BINARY_INTEGER;
TYPE l_serial_number_type IS TABLE OF okx_install_items_v.serial_number%TYPE INDEX BY BINARY_INTEGER;

l_inventory_item_id_tab2 l_inventory_item_id_type;
l_inv_master_org_id_tab2 l_inv_master_org_id_type;
l_instance_number_tab2 l_instance_number_type;
l_id_tab2 l_id_type;
l_cle_id_tab2 l_cle_id_type;
l_object1_id1_tab2 l_object1_id1_type;
l_location_type_code_tab2 l_location_type_code_type;
l_location_id_tab2 l_location_id_type;
l_serial_number_tab2 l_serial_number_type;

l_inventory_item_id_tab3 l_inventory_item_id_type;
l_inv_master_org_id_tab3 l_inv_master_org_id_type;
l_instance_number_tab3 l_instance_number_type;
l_id_tab3 l_id_type;
l_cle_id_tab3 l_cle_id_type;
l_object1_id1_tab3 l_object1_id1_type;
l_location_type_code_tab3 l_location_type_code_type;
l_location_id_tab3 l_location_id_type;
l_serial_number_tab3 l_serial_number_type;

-- okl_trx_assets
l_t4id_tab l_tid_type;
l_trx_assets_counter5 NUMBER := 1;

/* Commented here. To make it global */
-- okl_txl_itm_insts
/*
l_ti2id_tab l_tiid_type;
l_ti2tas_id_tab l_titas_id_type;
l_ti2kle_id_tab l_tikle_id_type;
l_ti2line_number_tab l_tiline_number_type;
l_ti2instance_number_ib_tab l_tiinstance_number_ib_type;
l_ti2object_id1_new_tab l_tiobject_id1_new_type;
l_ti2object_id2_new_tab l_tiobject_id2_new_type;
l_ti2jtot_object_code_new_tab l_tijtot_object_code_new_type;
l_ti2dnz_cle_id_tab l_tidnz_cle_id_type;
l_ti2inventory_item_id_tab l_tiinventory_item_id_type;
l_ti2inv_master_org_id_tab l_tiinv_master_org_id_type;
l_ti2inventory_org_id_tab l_tiinventory_org_id_type;
l_ti2serial_number_tab l_tiserial_number_type;
l_ti2mfg_serial_number_yn_tab l_timfg_serial_number_yn_type;

--l_txl_itm_insts_counter2 number := 1;
*/
l_instance_counter NUMBER := 1;
l_dnz_cle_id NUMBER;
l_object1_id1 VARCHAR2(40);
l_new_kle_id NUMBER;
l_new_cle_id NUMBER;
l_new_line_number NUMBER;
l_new_dnz_cle_id NUMBER;
l_new_object_id1 VARCHAR2(40);
l_new_id NUMBER;
l_local_cle_id NUMBER;
l_local_cle_id2 NUMBER;

BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  NULL;
  OPEN c28(p_old_id);
  LOOP
    FETCH c28 bulk collect INTO
      l_inventory_item_id_tab2, l_inv_master_org_id_tab2,
      l_instance_number_tab2, l_id_tab2,
      l_cle_id_tab2, l_object1_id1_tab2,
      l_location_type_code_tab2, l_location_id_tab2,
      l_serial_number_tab2
    limit G_BULK_SIZE;
    EXIT WHEN l_inventory_item_id_tab2.COUNT=0;
    FOR i IN l_inventory_item_id_tab2.first..l_inventory_item_id_tab2.last
    LOOP
      l_inventory_item_id_tab3(l_instance_counter) := l_inventory_item_id_tab2(i);
      l_inv_master_org_id_tab3(l_instance_counter) := l_inv_master_org_id_tab2(i);
      l_instance_number_tab3(l_instance_counter) := l_instance_number_tab2(i);
      l_id_tab3(l_instance_counter) := l_id_tab2(i);
      l_cle_id_tab3(l_instance_counter) := l_cle_id_tab2(i);
      l_object1_id1_tab3(l_instance_counter) := l_object1_id1_tab2(i);
      l_location_type_code_tab3(l_instance_counter) := l_location_type_code_tab2(i);
      l_location_id_tab3(l_instance_counter) := l_location_id_tab2(i);
      l_serial_number_tab3(l_instance_counter) := l_serial_number_tab2(i);

      l_instance_counter := l_instance_counter + 1;
    END LOOP;
  END LOOP;
  CLOSE c28;
  IF (l_inventory_item_id_tab3.count > 0) THEN
  FOR i IN l_inventory_item_id_tab3.first..l_inventory_item_id_tab3.last
  LOOP
    l_t4id_tab(l_trx_assets_counter5) := okc_p_util.raw_to_number(sys_guid());

    l_ti2id_tab(l_txl_itm_insts_counter2) := okc_p_util.raw_to_number(sys_guid());
    l_ti2tas_id_tab(l_txl_itm_insts_counter2) := l_t4id_tab(l_trx_assets_counter5);
    l_ti2kle_id_tab(l_txl_itm_insts_counter2) := l_id_tab3(i);
    -- Change kle_id
    l_new_kle_id := find_mapping_id(l_ti2kle_id_tab(l_txl_itm_insts_counter2));
        IF (l_new_kle_id = -1) THEN
          IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ERROR : Mapping id not found for ' || l_ti2kle_id_tab(l_txl_itm_insts_counter2));
          END IF;
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        END IF;
    l_ti2kle_id_tab(l_txl_itm_insts_counter2) := l_new_kle_id;

    l_new_cle_id := find_mapping_id(l_cle_id_tab3(i));
    l_new_line_number := find_cle_line_number2(l_new_cle_id);
    IF (l_new_line_number = -1) THEN
      l_cle_mapping_tab2(l_trx_assets_counter6).old_id := l_new_cle_id;
      l_cle_mapping_tab2(l_trx_assets_counter6).new_id := 1;

      l_trx_assets_counter6 := l_trx_assets_counter6 + 1;
      l_new_line_number := 1;
    END IF;
    l_ti2line_number_tab(l_txl_itm_insts_counter2) := l_new_line_number;
    l_ti2instance_number_ib_tab(l_txl_itm_insts_counter2) := l_instance_number_tab3(i);

    -- AKP: to do
    --l_ti2object_id1_new_tab(l_txl_itm_insts_counter2) := null;

    get_object1_id1(l_location_type_code_tab3(i), l_location_id_tab3(i), l_instance_number_tab3(i), l_new_object_id1);
    l_ti2object_id1_new_tab(l_txl_itm_insts_counter2) := l_new_object_id1;

    l_ti2object_id2_new_tab(l_txl_itm_insts_counter2) := '#';
    l_ti2jtot_object_code_new_tab(l_txl_itm_insts_counter2) := 'OKX_PARTSITE';

    /*print('l_id_tab3(' || i || ')=' || l_id_tab3(i));
    for r in c_get_cle(l_id_tab3(i) , 33 )
    loop
      l_dnz_cle_id := r.id;
    end loop;*/
    l_new_id := find_id(l_id_tab3(i));
    --print('l_new_id=' || l_new_id);
    IF (l_new_id = -1) THEN
      IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
              OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ERROR: OLD_LINE_ID to NEW_LINE_ID mapping not found');
      END IF;
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    l_local_cle_id := find_cid_mapping_id(l_new_id);
    --print('l_local_cle_id=' || l_local_cle_id);
    IF (l_local_cle_id = -1) THEN
      IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
              OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ERROR: ID to CLE_ID mapping not found');
      END IF;
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    l_local_cle_id2 := find_cid_mapping_id(l_local_cle_id);
    --print('l_local_cle_id2=' || l_local_cle_id2);
    IF (l_local_cle_id2 = -1) THEN
      IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
              OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ERROR: ID to CLE_ID mapping not found');
      END IF;
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    --l_new_dnz_cle_id := find_mapping_id(l_dnz_cle_id);
    l_ti2dnz_cle_id_tab(l_txl_itm_insts_counter2) := l_local_cle_id2;
    l_ti2inventory_item_id_tab(l_txl_itm_insts_counter2) := l_inventory_item_id_tab3(i);
    l_ti2inv_master_org_id_tab(l_txl_itm_insts_counter2) := l_inv_master_org_id_tab3(i);

    /*print('Before c_get_object1_id1:l_id_tab3(' || i || ')=' || l_id_tab3(i));
    for r in c_get_object1_id1(l_id_tab3(i) , 34 )
    loop
      l_object1_id1 := r.object1_id2;
    end loop;
    l_ti2inventory_org_id_tab(l_txl_itm_insts_counter2) := to_number(l_object1_id1);*/
    l_ti2inventory_org_id_tab(l_txl_itm_insts_counter2) := l_inventory_org_id;

    l_ti2serial_number_tab(l_txl_itm_insts_counter2) := l_serial_number_tab3(i);
    IF (l_ti2serial_number_tab(l_txl_itm_insts_counter2) IS NULL) THEN
      l_ti2mfg_serial_number_yn_tab(l_txl_itm_insts_counter2) := 'N';
    ELSE
      l_ti2mfg_serial_number_yn_tab(l_txl_itm_insts_counter2) := 'Y';
    END IF;

    l_txl_itm_insts_counter2 := l_txl_itm_insts_counter2 + 1;

    l_trx_assets_counter5 := l_trx_assets_counter5 + 1;
  END LOOP;
  END IF; /* if l_inventory_item_id_tab3.count > 0 */

  -- Now populate
  IF (l_trx_assets_counter5 > 1) THEN
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_trx_assets_counter5='||l_trx_assets_counter5 || ' l_t4id_tab.count='||l_t4id_tab.COUNT);
    END IF;
    forall i IN l_t4id_tab.first..l_t4id_tab.last
      INSERT INTO okl_trx_assets (
        id, tas_type, object_version_number,
        tsu_code, try_id, date_trans_occurred,
        created_by, creation_date, last_updated_by,
        last_update_date, last_update_login, trans_number
        ,transaction_date
      ) VALUES (
        l_t4id_tab(i), p_trans_type, 1,
        'ENTERED', l_try_id, SYSDATE, -- AKP: populate try_id properly
        l_created_by, SYSDATE, l_last_updated_by,
        SYSDATE, l_last_update_login, okl_trn_seq.NEXTVAL
        ,SYSDATE
      );
  END IF;

  IF (l_txl_itm_insts_counter2  > 1) THEN
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_txl_itm_insts_counter2='||l_txl_itm_insts_counter2 || ' l_ti2id_tab.count='||l_ti2id_tab.COUNT);
    END IF;
    forall i IN l_ti2id_tab.first..l_ti2id_tab.last
    INSERT INTO okl_txl_itm_insts (
      id, object_version_number, tas_id,
      tal_type, kle_id, line_number,
      instance_number_ib, object_id1_new, object_id2_new,
      jtot_object_code_new, dnz_cle_id, inventory_item_id,
      inv_master_org_id, inventory_org_id, created_by,
      creation_date, last_updated_by, last_update_date,
      last_update_login, serial_number, mfg_serial_number_yn
    ) VALUES (
      l_ti2id_tab(i), 1, l_ti2tas_id_tab(i),
      p_trans_type, l_ti2kle_id_tab(i), l_ti2line_number_tab(i),
      l_ti2instance_number_ib_tab(i), l_ti2object_id1_new_tab(i), l_ti2object_id2_new_tab(i),
      l_ti2jtot_object_code_new_tab(i), l_ti2dnz_cle_id_tab(i), l_ti2inventory_item_id_tab(i),
      l_ti2inv_master_org_id_tab(i), l_ti2inventory_org_id_tab(i), l_created_by,
      SYSDATE, l_last_updated_by, SYSDATE,
      l_last_update_login, l_ti2serial_number_tab(i), l_ti2mfg_serial_number_yn_tab(i)
    );
  END IF;

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'insert_okl_txl_itm_instst2');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing okl_trx_assets:l_t4id_tab.count=' || l_t4id_tab.COUNT || ' ...');
  END IF;
  IF (l_t4id_tab.COUNT > 0) THEN
  FOR i IN l_t4id_tab.first..l_t4id_tab.last
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_t4id_tab('||i||')=' || l_t4id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_try_id=' || l_try_id);
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'p_trans_type=' || p_trans_type);
    END IF;
  END LOOP;
  END IF;

  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing okl_txl_itm_insts:l_ti2id_tab.count=' || l_ti2id_tab.COUNT || ' ...');
  END IF;
  IF (l_ti2id_tab.COUNT > 0) THEN
  FOR i IN l_ti2id_tab.first..l_ti2id_tab.last
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ti2id_tab('||i||')=' || l_ti2id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ti2tas_id_tab('||i||')=' || l_ti2tas_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'p_trans_type=' || p_trans_type);
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ti2kle_id_tab('||i||')=' || l_ti2kle_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ti2line_number_tab('||i||')=' || l_ti2line_number_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ti2instance_number_ib_tab('||i||')=' || l_ti2instance_number_ib_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ti2object_id1_new_tab('||i||')=' || l_ti2object_id1_new_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ti2object_id2_new_tab('||i||')=' || l_ti2object_id2_new_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ti2jtot_object_code_new_tab('||i||')=' || l_ti2jtot_object_code_new_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ti2dnz_cle_id_tab('||i||')=' || l_ti2dnz_cle_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ti2inventory_item_id_tab('||i||')=' || l_ti2inventory_item_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ti2inv_master_org_id_tab('||i||')=' || l_ti2inv_master_org_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ti2inventory_org_id_tab('||i||')=' || l_ti2inventory_org_id_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ti2serial_number_tab('||i||')=' || l_ti2serial_number_tab(i));
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ti2mfg_serial_number_yn_tab('||i||')=' || l_ti2mfg_serial_number_yn_tab(i));
    END IF;
  END LOOP;
  END IF;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END; /* insert_okl_txl_itm_insts2 */

FUNCTION find_sid_mapping_id(p_id IN NUMBER) RETURN NUMBER IS
hi NUMBER;
lo NUMBER;
m NUMBER;
BEGIN
  lo := 1;
  hi := l_counter - 1;
  WHILE (lo <= hi) LOOP
    m := FLOOR((hi + lo)/2);
    IF (l_sid_mapping_tab(m).id = p_id) THEN
      RETURN l_sid_mapping_tab(m).lse_id;
    ELSIF (l_sid_mapping_tab(m).id > p_id) THEN
      hi := m - 1;
    ELSE
      lo := m + 1;
    END IF;
  END LOOP;
  RETURN -1;
END;  /* find_sid_mapping_id */

PROCEDURE sort_sid_mapping_tab IS
  TYPE numtabtype IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
  --a numtabtype;
  l_stack numtabtype;
  l_stack_index NUMBER := 0;
  N NUMBER;
  R NUMBER;
  L NUMBER;
  P NUMBER;
  W NUMBER;
  W2 NUMBER;
  X NUMBER;
  I NUMBER;
  J NUMBER;
BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  NULL;

  N := l_counter - 1;
  IF (N < 2) THEN
    RETURN;
  END IF;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := 1;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := N;

  --dbms_output.put_line('l_stack_index=' || l_stack_index);
  WHILE l_stack_index > 0
  LOOP
    R := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    L := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    --dbms_output.put_line('Pop: l_stack_index=' || l_stack_index);
    WHILE 1=1
    LOOP -- loop until L >= R
      I := L;
      J := R;
      P := FLOOR((L+R)/2);
      --if (a(L) > a(P)) then
      IF (l_sid_mapping_tab(L).id > l_sid_mapping_tab(P).id)
      THEN
        W := l_sid_mapping_tab(L).id;
        W2 := l_sid_mapping_tab(L).lse_id;
        l_sid_mapping_tab(L).id :=l_sid_mapping_tab(P).id;
        l_sid_mapping_tab(L).lse_id :=l_sid_mapping_tab(P).lse_id;
        l_sid_mapping_tab(P).id := W;
        l_sid_mapping_tab(P).lse_id := W2;
      END IF;
      --if (a(L) > a(R)) then
      IF (l_sid_mapping_tab(L).id > l_sid_mapping_tab(R).id)
      THEN
        W := l_sid_mapping_tab(L).id;
        W2 := l_sid_mapping_tab(L).lse_id;
        l_sid_mapping_tab(L).id :=l_sid_mapping_tab(R).id;
        l_sid_mapping_tab(L).lse_id :=l_sid_mapping_tab(R).lse_id;
        l_sid_mapping_tab(R).id := W;
        l_sid_mapping_tab(R).lse_id := W2;
      END IF;
      --if (a(P) > a(R)) then
      IF (l_sid_mapping_tab(P).id > l_sid_mapping_tab(R).id)
      THEN
        W := l_sid_mapping_tab(P).id;
        W2 := l_sid_mapping_tab(P).lse_id;
        l_sid_mapping_tab(P).id :=l_sid_mapping_tab(R).id;
        l_sid_mapping_tab(P).lse_id :=l_sid_mapping_tab(R).lse_id;
        l_sid_mapping_tab(R).id := W;
        l_sid_mapping_tab(R).lse_id := W2;
      END IF;
      --X := a(P);
      X := l_sid_mapping_tab(P).id;
      WHILE 1=1
      LOOP    -- until I > J
        --while (a(I) < X) loop
        WHILE (l_sid_mapping_tab(I).id < X) LOOP
          I := I + 1;
        END LOOP;
        WHILE (X < l_sid_mapping_tab(J).id) LOOP
          J := J - 1;
        END LOOP;
        IF (I <= J) THEN
          W := l_sid_mapping_tab(I).id;
          W2 := l_sid_mapping_tab(I).lse_id;
          l_sid_mapping_tab(I).id :=l_sid_mapping_tab(J).id;
          l_sid_mapping_tab(I).lse_id :=l_sid_mapping_tab(J).lse_id;
          l_sid_mapping_tab(J).id := W;
          l_sid_mapping_tab(J).lse_id := W2;
          I := I + 1;
          J := J - 1;
        END IF;
        EXIT WHEN I > J;
      END LOOP;
      IF (J - L < R - I) THEN
        IF (I < R) THEN
          --push(I); push(R);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := I;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := R;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        R := J;
      ELSE
        IF (L < J) THEN
          --push(L); push(J);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := L;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := J;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        L := I;
      END IF;

      EXIT WHEN (L >= R);
    END LOOP;
  END LOOP;

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'sort_sid_mapping_tab');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing sort_sid_mapping_tab:l_sid_mapping_tab N=' || N || ' ...');
  END IF;

  --print array
  FOR i IN 1..N
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_sid_mapping_tab('||i||')=' || l_sid_mapping_tab(i).id || ':' || l_sid_mapping_tab(i).lse_id);
    END IF;
  END LOOP;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;  /* sort_sid_mapping_tab */

PROCEDURE raise_business_event_header(
                  p_chr_id IN NUMBER
                 ,x_return_status OUT NOCOPY VARCHAR2
)
	IS
	  l_check VARCHAR2(1);
          l_parameter_list           wf_parameter_list_t;
BEGIN

  x_return_status := Okc_Api.G_RET_STS_SUCCESS;
  -- Our contract is always new. So commented following check
  --IF (p_source_code = 'new') THEN
   wf_event.AddParameterToList(G_WF_ITM_CONTRACT_ID,p_chr_id,l_parameter_list);
   OKL_WF_PVT.raise_event (p_api_version    => p_api_version,
                                 p_init_msg_list  => p_init_msg_list,
				 x_return_status  => x_return_status,
				 x_msg_count      => x_msg_count,
				 x_msg_data       => x_msg_data,
				 p_event_name     => G_WF_EVT_KHR_CREATED,
				 p_parameters     => l_parameter_list);

  --END IF;

     EXCEPTION
     WHEN OTHERS THEN
       x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
       RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
END raise_business_event_header;

PROCEDURE raise_business_event(
                p_api_version       IN NUMBER,
                p_init_msg_list     IN VARCHAR2,
                x_return_status     OUT NOCOPY VARCHAR2,
                x_msg_count         OUT NOCOPY NUMBER,
                x_msg_data          OUT NOCOPY VARCHAR2,
                p_event_name        IN wf_events.name%TYPE,
                p_parameter_list    IN wf_parameter_list_t,
                p_contract_process  IN VARCHAR2) IS

l_chr_id              okc_k_headers_b.id%TYPE;
--l_contract_process    VARCHAR2(30);
l_parameter_list      WF_PARAMETER_LIST_T := p_parameter_list;

BEGIN
  -- check to see if the the contract_id is not null, this is required since
  -- credit limit events do not necessarily pass a contract
  l_chr_id := wf_event.GetValueForParameter(G_WF_ITM_CONTRACT_ID,p_parameter_list);
  IF(l_chr_id IS NOT NULL)THEN
    -- if there exists a contract in context, then derive the contract process status
    --l_contract_process := okl_lla_util_pvt.get_contract_process(l_chr_id);
    IF(p_contract_process IS NOT NULL)THEN
       -- add the contract process status to the parameter list only the value is not null
       wf_event.AddParameterToList(G_WF_ITM_CONTRACT_PROCESS,p_contract_process,l_parameter_list);
    END IF;
  END IF;
  OKL_WF_PVT.raise_event (p_api_version    => p_api_version,
			  p_init_msg_list  => p_init_msg_list,
			  x_return_status  => x_return_status,
			  x_msg_count      => x_msg_count,
			  x_msg_data       => x_msg_data,
			  p_event_name     => p_event_name,
			  p_parameters     => l_parameter_list);

  EXCEPTION
    WHEN OTHERS THEN
      x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
END raise_business_event;

PROCEDURE raise_business_event_subsidy(p_api_version IN NUMBER,
                                 p_init_msg_list IN VARCHAR2,
                                 p_chr_id IN okc_k_headers_b.id%TYPE,
                                 p_asset_id IN okc_k_lines_b.id%TYPE,
                                 p_subsidy_id IN okl_subsidies_b.id%TYPE,
                                 p_event_name IN VARCHAR2,
                                 p_contract_process IN VARCHAR2,
                                 x_return_status OUT NOCOPY VARCHAR2,
                                 x_msg_count OUT NOCOPY NUMBER,
                                 x_msg_data OUT NOCOPY VARCHAR2
                                 ) IS
    l_parameter_list wf_parameter_list_t;
    l_contract_process VARCHAR2(20);
  BEGIN
    x_return_status := OKL_API.G_RET_STS_SUCCESS;

    -- wrapper API to get contract process. this API determines in which status the
    -- contract in question is.
    --l_contract_process := okl_lla_util_pvt.get_contract_process(p_chr_id => p_chr_id);
    wf_event.AddParameterToList(G_WF_ITM_CONTRACT_ID, p_chr_id, l_parameter_list);
    wf_event.AddParameterToList(G_WF_ITM_ASSET_ID, p_asset_id, l_parameter_list);
    wf_event.AddParameterToList(G_WF_ITM_SUBSIDY_ID, p_subsidy_id, l_parameter_list);
    wf_event.AddParameterToList(G_WF_ITM_CONTRACT_PROCESS, p_contract_process, l_parameter_list);
    OKL_WF_PVT.raise_event(p_api_version    => p_api_version,
                           p_init_msg_list  => p_init_msg_list,
                           x_return_status  => x_return_status,
                           x_msg_count      => x_msg_count,
                           x_msg_data       => x_msg_data,
                           p_event_name     => p_event_name,
                           p_parameters     => l_parameter_list);
  EXCEPTION
    WHEN OTHERS THEN
    x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
    RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
END raise_business_event_subsidy;

PROCEDURE raise_business_event_itm(
        p_api_version      IN NUMBER
       ,p_init_msg_list    IN VARCHAR2 DEFAULT OKC_API.G_FALSE
	      ,x_return_status    OUT NOCOPY VARCHAR2
       ,x_msg_count        OUT NOCOPY NUMBER
       ,x_msg_data         OUT NOCOPY VARCHAR2
       ,p_event_name       IN WF_EVENTS.NAME%TYPE
       ,p_event_param_list IN WF_PARAMETER_LIST_T
       ,p_contract_process IN VARCHAR2
    )IS
	    --l_process VARCHAR2(20);
     --p_chr_id  okc_k_headers_b.id%TYPE;
     l_parameter_list WF_PARAMETER_LIST_T := p_event_param_list;
   BEGIN
     --p_chr_id := wf_event.GetValueForParameter(G_WF_ITM_CONTRACT_ID,p_event_param_list);
     --l_process := Okl_Lla_Util_Pvt.get_contract_process(p_chr_id);
     wf_event.AddParameterToList(G_WF_ITM_CONTRACT_PROCESS,p_contract_process,l_parameter_list);

     OKL_WF_PVT.raise_event (p_api_version    => p_api_version,
                             p_init_msg_list  => p_init_msg_list,
                             x_return_status  => x_return_status,
                             x_msg_count      => x_msg_count,
                             x_msg_data       => x_msg_data,
                             p_event_name     => p_event_name,
                             p_parameters     => l_parameter_list);
   EXCEPTION
   WHEN OTHERS THEN
     x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
     RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
END raise_business_event_itm;

PROCEDURE raise_business_event_dep(p_api_version IN NUMBER,
                                  p_init_msg_list IN VARCHAR2,
                                  p_chr_id IN okc_k_headers_b.id%TYPE,
                                  p_asset_id IN okc_k_lines_b.id%TYPE,
                                  p_book_code IN okl_txl_assets_b.corporate_book%TYPE,
                                  p_event_name IN VARCHAR2,
                                  p_contract_process IN VARCHAR2,
                                  x_return_status OUT NOCOPY VARCHAR2,
                                  x_msg_count OUT NOCOPY NUMBER,
                                  x_msg_data OUT NOCOPY VARCHAR2
                                  ) IS
     l_parameter_list wf_parameter_list_t;
   BEGIN
     x_return_status := OKL_API.G_RET_STS_SUCCESS;

     -- wrapper API to get contract process. this API determines in which status the
     -- contract in question is.
     --l_contract_process := okl_lla_util_pvt.get_contract_process(p_chr_id => p_chr_id);
     wf_event.AddParameterToList(G_WF_ITM_CONTRACT_ID, p_chr_id, l_parameter_list);
     wf_event.AddParameterToList(G_WF_ITM_ASSET_ID, p_asset_id, l_parameter_list);
     wf_event.AddParameterToList(G_WF_ITM_BOOK_CODE, p_book_code, l_parameter_list);
     wf_event.AddParameterToList(G_WF_ITM_CONTRACT_PROCESS, p_contract_process, l_parameter_list);
     OKL_WF_PVT.raise_event(p_api_version    => p_api_version,
                            p_init_msg_list  => p_init_msg_list,
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_event_name     => p_event_name,
                            p_parameters     => l_parameter_list);

   EXCEPTION
     WHEN OTHERS THEN
     x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
     RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
END raise_business_event_dep;


   PROCEDURE raise_business_event_txd(p_api_version IN NUMBER,
                                  p_init_msg_list IN VARCHAR2,
                                  p_chr_id IN okc_k_headers_b.id%TYPE,
                                  p_asset_id IN okc_k_lines_b.id%TYPE,
                                  p_event_name IN VARCHAR2,
                                  p_contract_process IN VARCHAR2,
                                  x_return_status OUT NOCOPY VARCHAR2,
                                  x_msg_count OUT NOCOPY NUMBER,
                                  x_msg_data OUT NOCOPY VARCHAR2
                                  ) IS
     l_parameter_list wf_parameter_list_t;
     --l_contract_process VARCHAR2(20);
   BEGIN
     x_return_status := OKL_API.G_RET_STS_SUCCESS;

     -- wrapper API to get contract process. this API determines in which status the
     -- contract in question is.
     --l_contract_process := okl_lla_util_pvt.get_contract_process(p_chr_id => p_chr_id);
     wf_event.AddParameterToList(G_WF_ITM_CONTRACT_ID, p_chr_id, l_parameter_list);
     wf_event.AddParameterToList(G_WF_ITM_ASSET_ID, p_asset_id, l_parameter_list);
     wf_event.AddParameterToList(G_WF_ITM_CONTRACT_PROCESS, p_contract_process, l_parameter_list);

     OKL_WF_PVT.raise_event(p_api_version    => p_api_version,
                            p_init_msg_list  => p_init_msg_list,
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_event_name     => p_event_name,
                            p_parameters     => l_parameter_list);
   EXCEPTION
     WHEN OTHERS THEN
     x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
     RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
   END raise_business_event_txd;

PROCEDURE raise_business_event_itm
                           (p_api_version IN NUMBER,
                            p_init_msg_list IN VARCHAR2,
                            p_chr_id IN okc_k_headers_b.id%TYPE,
                            p_asset_id IN okc_k_lines_b.id%TYPE,
                            p_ser_num IN okl_txl_itm_insts.serial_number%TYPE,
                            p_event_name IN VARCHAR2,
                            p_contract_process IN VARCHAR2,
                            x_return_status OUT NOCOPY VARCHAR2,
                            x_msg_count OUT NOCOPY NUMBER,
                            x_msg_data OUT NOCOPY VARCHAR2
                           ) IS
  l_parameter_list wf_parameter_list_t;
BEGIN
  x_return_status := OKL_API.G_RET_STS_SUCCESS;

  wf_event.AddParameterToList(G_WF_ITM_CONTRACT_ID, p_chr_id, l_parameter_list);
  wf_event.AddParameterToList(G_WF_ITM_ASSET_ID, p_asset_id, l_parameter_list);
  wf_event.AddParameterToList(G_WF_ITM_SERIAL_NUM, p_ser_num, l_parameter_list);
  wf_event.AddParameterToList(G_WF_ITM_CONTRACT_PROCESS, p_contract_process, l_parameter_list);

  OKL_WF_PVT.raise_event(p_api_version    => p_api_version,
                         p_init_msg_list  => p_init_msg_list,
                         x_return_status  => x_return_status,
                         x_msg_count      => x_msg_count,
                         x_msg_data       => x_msg_data,
                         p_event_name     => p_event_name,
                         p_parameters     => l_parameter_list);
EXCEPTION
  WHEN OTHERS THEN
  x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
  RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
END raise_business_event_itm;

   PROCEDURE raise_business_event_supp
                                 (p_api_version IN NUMBER,
                                  p_init_msg_list IN VARCHAR2,
                                  p_chr_id IN okc_k_headers_b.id%TYPE,
                                  p_asset_id IN okc_k_lines_b.id%TYPE,
                                  p_vendor_id IN po_vendors.vendor_id%TYPE,
                                  p_event_name IN VARCHAR2,
                                  p_contract_process IN VARCHAR2,
                                  x_return_status OUT NOCOPY VARCHAR2,
                                  x_msg_count OUT NOCOPY NUMBER,
                                  x_msg_data OUT NOCOPY VARCHAR2
                                  ) IS
     l_parameter_list wf_parameter_list_t;
   BEGIN
     x_return_status := OKL_API.G_RET_STS_SUCCESS;

     -- wrapper API to get contract process. this API determines in which status the
     -- contract in question is.
     --l_contract_process := okl_lla_util_pvt.get_contract_process(p_chr_id => p_chr_id);
     wf_event.AddParameterToList(G_WF_ITM_CONTRACT_ID, p_chr_id, l_parameter_list);
     wf_event.AddParameterToList(G_WF_ITM_ASSET_ID, p_asset_id, l_parameter_list);
     wf_event.AddParameterToList(G_WF_ITM_PARTY_ID, p_vendor_id, l_parameter_list);
     wf_event.AddParameterToList(G_WF_ITM_CONTRACT_PROCESS, p_contract_process, l_parameter_list);

     OKL_WF_PVT.raise_event(p_api_version    => p_api_version,
                            p_init_msg_list  => p_init_msg_list,
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_event_name     => p_event_name,
                            p_parameters     => l_parameter_list);
   EXCEPTION
     WHEN OTHERS THEN
     x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
     RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
   END raise_business_event_supp;

PROCEDURE raise_business_event_rules
                          (p_api_version IN NUMBER,
                           p_init_msg_list IN VARCHAR2,
                           x_return_status OUT NOCOPY VARCHAR2,
                           x_msg_count OUT NOCOPY NUMBER,
                           x_msg_data OUT NOCOPY VARCHAR2,
                           p_event_name IN VARCHAR2,
                           p_event_param_list IN WF_PARAMETER_LIST_T,
                           p_contract_process IN VARCHAR2
                          ) IS
  --l_contract_process VARCHAR2(20);
  l_event_param_list WF_PARAMETER_LIST_T := p_event_param_list;
BEGIN
  x_return_status := OKL_API.G_RET_STS_SUCCESS;

  wf_event.AddParameterToList(G_WF_ITM_CONTRACT_PROCESS, p_contract_process, l_event_param_list);

  OKL_WF_PVT.raise_event(p_api_version    => p_api_version,
                         p_init_msg_list  => p_init_msg_list,
                         x_return_status  => x_return_status,
                         x_msg_count      => x_msg_count,
                         x_msg_data       => x_msg_data,
                         p_event_name     => p_event_name,
                         p_parameters     => l_event_param_list);
EXCEPTION
  WHEN OTHERS THEN
  x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
  RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
END raise_business_event_rules;

FUNCTION find_ssid_mapping_id(p_id IN NUMBER) RETURN VARCHAR2 IS
hi NUMBER;
lo NUMBER;
m NUMBER;
BEGIN
  lo := 1;
  hi := l_ssid_counter - 1;
  WHILE (lo <= hi) LOOP
    m := FLOOR((hi + lo)/2);
    IF (l_ssid_mapping_tab(m).cle_id = p_id) THEN
      RETURN l_ssid_mapping_tab(m).object1_id1;
    ELSIF (l_ssid_mapping_tab(m).cle_id > p_id) THEN
      hi := m - 1;
    ELSE
      lo := m + 1;
    END IF;
  END LOOP;
  RETURN NULL;
END;  /* find_ssid_mapping_id */

PROCEDURE sort_ssid_mapping_tab IS
  TYPE numtabtype IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
  --a numtabtype;
  l_stack numtabtype;
  l_stack_index NUMBER := 0;
  N NUMBER;
  R NUMBER;
  L NUMBER;
  P NUMBER;
  W NUMBER;
  W2 VARCHAR2(40);
  X NUMBER;
  I NUMBER;
  J NUMBER;
BEGIN
  IF (G_DEBUG_ENABLED = 'Y') THEN
    G_IS_DEBUG_STATEMENT_ON := OKL_DEBUG_PUB.CHECK_LOG_ON(G_MODULE, FND_LOG.LEVEL_STATEMENT);
  END IF;
  NULL;

  N := l_ssid_counter - 1;
  IF (N < 2) THEN
    RETURN;
  END IF;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := 1;
  l_stack_index := l_stack_index + 1;
  l_stack(l_stack_index) := N;

  --dbms_output.put_line('l_stack_index=' || l_stack_index);
  WHILE l_stack_index > 0
  LOOP
    R := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    L := l_stack(l_stack_index);
    l_stack_index := l_stack_index - 1;
    --dbms_output.put_line('Pop: l_stack_index=' || l_stack_index);
    WHILE 1=1
    LOOP -- loop until L >= R
      I := L;
      J := R;
      P := FLOOR((L+R)/2);
      --if (a(L) > a(P)) then
      IF (l_ssid_mapping_tab(L).cle_id > l_ssid_mapping_tab(P).cle_id)
      THEN
        W := l_ssid_mapping_tab(L).cle_id;
        W2 := l_ssid_mapping_tab(L).object1_id1;
        l_ssid_mapping_tab(L).cle_id :=l_ssid_mapping_tab(P).cle_id;
        l_ssid_mapping_tab(L).object1_id1 :=l_ssid_mapping_tab(P).object1_id1;
        l_ssid_mapping_tab(P).cle_id := W;
        l_ssid_mapping_tab(P).object1_id1 := W2;
      END IF;
      --if (a(L) > a(R)) then
      IF (l_ssid_mapping_tab(L).cle_id > l_ssid_mapping_tab(R).cle_id)
      THEN
        W := l_ssid_mapping_tab(L).cle_id;
        W2 := l_ssid_mapping_tab(L).object1_id1;
        l_ssid_mapping_tab(L).cle_id :=l_ssid_mapping_tab(R).cle_id;
        l_ssid_mapping_tab(L).object1_id1 :=l_ssid_mapping_tab(R).object1_id1;
        l_ssid_mapping_tab(R).cle_id := W;
        l_ssid_mapping_tab(R).object1_id1 := W2;
      END IF;
      --if (a(P) > a(R)) then
      IF (l_ssid_mapping_tab(P).cle_id > l_ssid_mapping_tab(R).cle_id)
      THEN
        W := l_ssid_mapping_tab(P).cle_id;
        W2 := l_ssid_mapping_tab(P).object1_id1;
        l_ssid_mapping_tab(P).cle_id :=l_ssid_mapping_tab(R).cle_id;
        l_ssid_mapping_tab(P).object1_id1 :=l_ssid_mapping_tab(R).object1_id1;
        l_ssid_mapping_tab(R).cle_id := W;
        l_ssid_mapping_tab(R).object1_id1 := W2;
      END IF;
      --X := a(P);
      X := l_ssid_mapping_tab(P).cle_id;
      WHILE 1=1
      LOOP    -- until I > J
        --while (a(I) < X) loop
        WHILE (l_ssid_mapping_tab(I).cle_id < X) LOOP
          I := I + 1;
        END LOOP;
        WHILE (X < l_ssid_mapping_tab(J).cle_id) LOOP
          J := J - 1;
        END LOOP;
        IF (I <= J) THEN
          W := l_ssid_mapping_tab(I).cle_id;
          W2 := l_ssid_mapping_tab(I).object1_id1;
          l_ssid_mapping_tab(I).cle_id :=l_ssid_mapping_tab(J).cle_id;
          l_ssid_mapping_tab(I).object1_id1 :=l_ssid_mapping_tab(J).object1_id1;
          l_ssid_mapping_tab(J).cle_id := W;
          l_ssid_mapping_tab(J).object1_id1 := W2;
          I := I + 1;
          J := J - 1;
        END IF;
        EXIT WHEN I > J;
      END LOOP;
      IF (J - L < R - I) THEN
        IF (I < R) THEN
          --push(I); push(R);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := I;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := R;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        R := J;
      ELSE
        IF (L < J) THEN
          --push(L); push(J);
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := L;
          l_stack_index := l_stack_index + 1;
          l_stack(l_stack_index) := J;
          --dbms_output.put_line('Push: l_stack_index=' || l_stack_index);
        END IF;
        L := I;
      END IF;

      EXIT WHEN (L >= R);
    END LOOP;
  END LOOP;

EXCEPTION WHEN OTHERS THEN

  x_return_status := OKL_API.G_RET_STS_ERROR;
  /*OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => 'OKL_AM_NO_OLD_SALVAGE_VALUE',
                      p_token1 => 'ASSET_NUMBER',
                      p_token1_value => 'sort_ssid_mapping_tab');*/
    /* DEBUG */
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing sort_ssid_mapping_tab:l_ssid_mapping_tab N=' || N || ' ...');
  END IF;

  --print array
  FOR i IN 1..N
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_ssid_mapping_tab('||i||')=' || l_ssid_mapping_tab(i).cle_id || ':' || l_ssid_mapping_tab(i).object1_id1);
    END IF;
  END LOOP;

  RAISE OKC_API.G_EXCEPTION_ERROR;

END;  /* sort_ssid_mapping_tab */

BEGIN

   l_message := 'OKL_NEW_COPY_CHR_ERROR';
   l_curr_pos := 'okl_copy_lease_contract:1';
   x_return_status      := OKL_API.G_RET_STS_SUCCESS;
    -- Call start_activity to create savepoint, check compatibility
    -- and initialize message list
    x_return_status := OKL_API.START_ACTIVITY (
                               l_api_name
                               ,p_init_msg_list
                               ,'_PVT'
                               ,x_return_status);
    -- Check if activity started successfully
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

  l_curr_pos := 'okl_copy_lease_contract:2';
  IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'p_trans_type=' || p_trans_type);
  END IF;
  FOR c1rec IN c1(p_chr_id)
  LOOP
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Source id = ' || c1rec.id || ' processing started:' || TO_CHAR(SYSDATE,'HH24:MI:SS'));
    END IF;
    l_inventory_org_id := c1rec.inv_organization_id;
    l_curr_pos := 'okl_copy_lease_contract:3';
    l_orig_system_source_code := 'OKC_HDR';
    IF (c1rec.scs_code = 'QUOTE') THEN
      l_orig_system_source_code := 'OKL_QUOTE';
    END IF;
    IF (p_trans_type = 'CRB') THEN
     l_orig_system_source_code := 'OKL_REBOOK';
    ELSIF (p_trans_type = 'CRL') THEN
     l_orig_system_source_code := 'OKL_RELEASE';
    ELSIF (p_trans_type = 'SPLC') THEN
     l_orig_system_source_code := 'OKL_SPLIT';
    END IF;

    l_sts_code := 'NEW'; -- 4716939
    IF (c1rec.scs_code = 'LEASE') THEN
      l_sts_code := 'NEW';
    ELSIF (c1rec.scs_code = 'QUOTE') THEN
      IF (c1rec.sts_code = 'NEW') THEN
        l_sts_code := 'NEW';
      ELSE
        l_sts_code := 'INCOMPLETE';
      END IF;
    END IF;
    l_sts_code_orig := c1rec.sts_code;

    l_curr_pos := 'okl_copy_lease_contract:4';
-- kmotepal populating contract id from sys guid instead of using OKC sequence which fixes the bug 4436545 (Reverted back for OKL.H)
    SELECT  okc_k_headers_b_s.NEXTVAL INTO l_copied_id FROM dual;
    --l_copied_id := okc_p_util.raw_to_number(sys_guid());

    l_contract_currency := c1rec.currency_code;
    l_contract_start_date := c1rec.start_date;
    l_conversion_type := c1rec.CONVERSION_TYPE;
    l_conversion_rate :=  c1rec.CONVERSION_RATE;
    l_conversion_rate_date := c1rec.CONVERSION_RATE_DATE;
    l_template_yn := c1rec.TEMPLATE_YN;

      -- AKP: what api??
    --l_contract_number := p_contract_number;

    l_curr_pos := 'okl_copy_lease_contract:5';
    IF (p_contract_number IS NULL) THEN
      l_curr_pos := 'okl_copy_lease_contract:6';
      okc_contract_pvt.generate_contract_number(
        p_scs_code => c1rec.scs_code,
        p_modifier => p_contract_number_modifier,
        x_return_status => x_return_status,
        x_contract_number => l_contract_number);
      IF (x_return_status <> OKC_API.G_RET_STS_SUCCESS) THEN
  	     OKC_API.SET_MESSAGE(p_app_name	=> g_app_name,
                                 p_msg_name	=> g_unexpected_error,
                                 p_token1		=> g_sqlcode_token,
                                 p_token1_value	=> SQLCODE,
                                 p_token2		=> g_sqlerrm_token,
                                 p_token2_value	=> SQLERRM);
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      END IF;
    ELSE
      l_contract_number := p_contract_number;
    END IF;

    --print('l_contract_number=' ||l_contract_number);
    --print('c1rec.contract_number=' ||c1rec.contract_number);
    -- Bug 4738057
    l_contract_exists := FALSE;
    FOR contract_exists_rec IN contract_exists_csr(l_contract_number)
    LOOP
      l_contract_exists := TRUE;
    END LOOP;
    IF ((l_contract_number = c1rec.contract_number) OR
        (l_contract_exists) ) THEN
      OKL_API.set_message(p_app_name => 'OKC',
                      p_msg_name => 'OKC_CONTRACT_EXISTS',
                      p_token1 => 'VALUE1',
                      p_token1_value => l_contract_number,
                      p_token2 => 'VALUE2',
                      p_token2_value => ' ');
       x_return_status := OKL_API.HANDLE_EXCEPTIONS(
                                  l_api_name,
                                  G_PKG_NAME,
                                  'OKL_API.G_RET_STS_ERROR',
                                  x_msg_count,
                                  x_msg_data,
                                  '_PVT');
       RETURN;
      --RAISE OKC_API.G_EXCEPTION_ERROR;
    END IF;

    l_curr_pos := 'okl_copy_lease_contract:7';
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_contract_number=' || l_contract_number);
    END IF;

    -- AKP: need to do all validatations here
    validate_currency_code(x_return_status, l_contract_currency );
    IF (x_return_status <> OKC_API.G_RET_STS_SUCCESS) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    END IF;

    l_curr_pos := 'okl_copy_lease_contract:8';
    validate_orig_sys_code(x_return_status, l_orig_system_source_code);
    IF (x_return_status <> OKC_API.G_RET_STS_SUCCESS) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    END IF;

    l_curr_pos := 'okl_copy_lease_contract:9';
    validate_currency_conv_type(x_return_status, l_conversion_type);
    IF (x_return_status <> OKC_API.G_RET_STS_SUCCESS) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    END IF;

    BEGIN
      l_curr_pos := 'okl_copy_lease_contract:10';
      INSERT INTO okc_k_headers_b (
       ID, CONTRACT_NUMBER, AUTHORING_ORG_ID,
       CONTRACT_NUMBER_MODIFIER, CHR_ID_RESPONSE, CHR_ID_AWARD,
       CHR_ID_RENEWED, INV_ORGANIZATION_ID, STS_CODE,
       QCL_ID, SCS_CODE, TRN_CODE,
       CURRENCY_CODE, ARCHIVED_YN, DELETED_YN,
       TEMPLATE_YN, CHR_TYPE, OBJECT_VERSION_NUMBER,
       CREATED_BY, CREATION_DATE, LAST_UPDATED_BY,
       CUST_PO_NUMBER_REQ_YN, PRE_PAY_REQ_YN, CUST_PO_NUMBER,
       DPAS_RATING, TEMPLATE_USED, DATE_APPROVED,
       DATETIME_CANCELLED, AUTO_RENEW_DAYS, DATE_ISSUED,
       DATETIME_RESPONDED, RFP_TYPE, KEEP_ON_MAIL_LIST,
       SET_ASIDE_PERCENT, RESPONSE_COPIES_REQ, DATE_CLOSE_PROJECTED,
       DATETIME_PROPOSED, DATE_SIGNED, DATE_TERMINATED,
       DATE_RENEWED, START_DATE, END_DATE,
       BUY_OR_SELL, ISSUE_OR_RECEIVE, LAST_UPDATE_LOGIN,
       ESTIMATED_AMOUNT, ATTRIBUTE_CATEGORY, LAST_UPDATE_DATE,
       ATTRIBUTE1, ATTRIBUTE2, ATTRIBUTE3,
       ATTRIBUTE4, ATTRIBUTE5, ATTRIBUTE6,
       ATTRIBUTE7, ATTRIBUTE8, ATTRIBUTE9,
       ATTRIBUTE10, ATTRIBUTE11, ATTRIBUTE12,
       ATTRIBUTE13, ATTRIBUTE14, ATTRIBUTE15,
       SECURITY_GROUP_ID, CHR_ID_RENEWED_TO, ESTIMATED_AMOUNT_RENEWED,
       CURRENCY_CODE_RENEWED, UPG_ORIG_SYSTEM_REF, UPG_ORIG_SYSTEM_REF_ID,
       APPLICATION_ID, RESOLVED_UNTIL, ORIG_SYSTEM_SOURCE_CODE,
       ORIG_SYSTEM_ID1, ORIG_SYSTEM_REFERENCE1, PROGRAM_APPLICATION_ID,
       PROGRAM_ID, PROGRAM_UPDATE_DATE, REQUEST_ID,
       PRICE_LIST_ID, PRICING_DATE, TOTAL_LINE_LIST_PRICE,
       SIGN_BY_DATE, USER_ESTIMATED_AMOUNT, GOVERNING_CONTRACT_YN,
       CONVERSION_TYPE, CONVERSION_RATE,
       CONVERSION_RATE_DATE, CONVERSION_EURO_RATE, CUST_ACCT_ID,
       BILL_TO_SITE_USE_ID, INV_RULE_ID, RENEWAL_TYPE_CODE,
       RENEWAL_NOTIFY_TO, RENEWAL_END_DATE, SHIP_TO_SITE_USE_ID,
       PAYMENT_TERM_ID,
       ORG_ID   --MOAC
      ) VALUES (
       l_copied_id, l_contract_number, c1rec.AUTHORING_ORG_ID,
       NULL, NULL, NULL,
       c1rec.CHR_ID_RENEWED, c1rec.INV_ORGANIZATION_ID, l_sts_code,
       c1rec.QCL_ID, c1rec.SCS_CODE, NULL,
       c1rec.CURRENCY_CODE, 'N', 'N',
       'N', c1rec.CHR_TYPE, 1,
       l_created_by, SYSDATE, l_last_updated_by,
       c1rec.CUST_PO_NUMBER_REQ_YN, c1rec.PRE_PAY_REQ_YN, c1rec.CUST_PO_NUMBER,
       c1rec.DPAS_RATING, DECODE(c1rec.template_yn,'Y',c1rec.CONTRACT_NUMBER,NULL), NULL,
       NULL, c1rec.AUTO_RENEW_DAYS, NULL,
       NULL, NULL, c1rec.KEEP_ON_MAIL_LIST,
       NULL, NULL, NULL,
       NULL, c1rec.DATE_SIGNED, NULL,
       NULL, c1rec.START_DATE, c1rec.END_DATE,
       c1rec.BUY_OR_SELL, c1rec.ISSUE_OR_RECEIVE, l_last_update_login,
       c1rec.ESTIMATED_AMOUNT, c1rec.ATTRIBUTE_CATEGORY, SYSDATE,
       c1rec.ATTRIBUTE1, c1rec.ATTRIBUTE2, c1rec.ATTRIBUTE3,
       c1rec.ATTRIBUTE4, c1rec.ATTRIBUTE5, c1rec.ATTRIBUTE6,
       c1rec.ATTRIBUTE7, c1rec.ATTRIBUTE8, c1rec.ATTRIBUTE9,
       c1rec.ATTRIBUTE10, c1rec.ATTRIBUTE11, c1rec.ATTRIBUTE12,
       c1rec.ATTRIBUTE13, c1rec.ATTRIBUTE14, c1rec.ATTRIBUTE15,
       c1rec.SECURITY_GROUP_ID, c1rec.CHR_ID_RENEWED_TO, c1rec.ESTIMATED_AMOUNT_RENEWED,
       c1rec.CURRENCY_CODE_RENEWED, c1rec.UPG_ORIG_SYSTEM_REF, c1rec.UPG_ORIG_SYSTEM_REF_ID,
       c1rec.APPLICATION_ID, c1rec.RESOLVED_UNTIL, l_orig_system_source_code,
       --decode(p_trans_type, 'RBK', c1rec.orig_system_id1, c1rec.ID), null, c1rec.PROGRAM_APPLICATION_ID,
       c1rec.ID, NULL, c1rec.PROGRAM_APPLICATION_ID,
       c1rec.PROGRAM_ID, c1rec.PROGRAM_UPDATE_DATE, c1rec.REQUEST_ID,
       c1rec.PRICE_LIST_ID, c1rec.PRICING_DATE, c1rec.TOTAL_LINE_LIST_PRICE,
       c1rec.SIGN_BY_DATE, NULL, c1rec.GOVERNING_CONTRACT_YN,
       c1rec.CONVERSION_TYPE, c1rec.CONVERSION_RATE,
       c1rec.CONVERSION_RATE_DATE, c1rec.CONVERSION_EURO_RATE, c1rec.CUST_ACCT_ID,
       c1rec.BILL_TO_SITE_USE_ID, c1rec.INV_RULE_ID, c1rec.RENEWAL_TYPE_CODE,
       c1rec.RENEWAL_NOTIFY_TO, c1rec.RENEWAL_END_DATE, c1rec.SHIP_TO_SITE_USE_ID,
       c1rec.PAYMENT_TERM_ID,
       c1rec.AUTHORING_ORG_ID   --MOAC
      );
      --) RETURNING ID into l_copied_id;

      EXCEPTION WHEN OTHERS THEN
         IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
           OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ERROR during insert into okc_k_headers_b...');
         END IF;
         OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => l_message,
                      p_token1 => 'CONTRACT_NUMBER',
                      p_token1_value => l_contract_number);
         RAISE OKC_API.G_EXCEPTION_ERROR;
    END;
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_copied_id=' || l_copied_id);
    END IF;

    l_curr_pos := 'okl_copy_lease_contract:11';
    BEGIN
       l_hstv_rec.chr_id := l_copied_id;
       l_hstv_rec.sts_code_from := NULL;
       l_hstv_rec.sts_code_to := l_sts_code;
       l_hstv_rec.reason_code := 'CREATE';
       l_hstv_rec.opn_code := 'STS_CHG';
       l_hstv_rec.manual_yn := 'N';
       l_hstv_rec.contract_version := '1.1';

      l_curr_pos := 'okl_copy_lease_contract:12';
       OKC_K_HISTORY_PUB.create_k_history(
         p_api_version          => p_api_version,
         p_init_msg_list        => p_init_msg_list,
         x_return_status   	=> x_return_status,
         x_msg_count       	=> x_msg_count,
         x_msg_data        	=> x_msg_data,
         p_hstv_rec             => l_hstv_rec,
         x_hstv_rec             => x_hstv_rec);
      IF (x_return_status <> OKC_API.G_RET_STS_SUCCESS) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      END IF;
      EXCEPTION WHEN OTHERS THEN
         IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
           OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ERROR during insert into create_k_history...');
         END IF;
         RAISE OKC_API.G_EXCEPTION_ERROR;
    END;

    BEGIN
      l_curr_pos := 'okl_copy_lease_contract:13';
      l_message := 'OKL_NEW_COPY_VER_ERROR';
      INSERT INTO okc_k_vers_numbers (
         chr_id, major_version, minor_version,
         object_version_number, created_by, creation_date,
         last_updated_by, last_update_date, last_update_login
         --security_group_id
      ) VALUES (
         l_copied_id, 0, 1,
         1, l_created_by, SYSDATE,
         l_last_updated_by, SYSDATE, l_last_update_login
         --FND_GLOBAL.SECURITY_GROUP_ID
      );
    EXCEPTION WHEN OTHERS THEN
       IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
         OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ERROR during inser into okc_k_vers_numbers...');
       END IF;
       OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => l_message,
                      p_token1 => 'CONTRACT_NUMBER',
                      p_token1_value => l_contract_number);
       RAISE OKC_API.G_EXCEPTION_ERROR;
    END;

    l_curr_pos := 'okl_copy_lease_contract:14';
    l_message := 'OKL_NEW_COPY_CHR_ERROR';
    insert_okc_k_headers_tl(p_chr_id, l_copied_id);
    l_curr_pos := 'okl_copy_lease_contract:15';
    l_message := 'OKL_NEW_COPY_KHR_ERROR';
    insert_okl_k_headers(p_chr_id, l_copied_id);
    l_message := 'OKL_NEW_COPY_CSP_ERROR';
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Calling okl_slctd_optns ...');
    END IF;
    l_curr_pos := 'okl_copy_lease_contract:16';
    insert_okl_slctd_optns(p_chr_id, l_copied_id);
  /*end loop;*/

    l_curr_pos := 'okl_copy_lease_contract:17';
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Governances...');
    END IF;
    FOR c2rec IN c2(p_chr_id)
    LOOP
      BEGIN
        l_curr_pos := 'okl_copy_lease_contract:18';
        l_message := 'OKL_NEW_COPY_GVE_ERROR';
        INSERT INTO okc_governances (
          ID, DNZ_CHR_ID, CHR_ID,
          CLE_ID, CHR_ID_REFERRED, CLE_ID_REFERRED,
          ISA_AGREEMENT_ID, COPIED_ONLY_YN, OBJECT_VERSION_NUMBER,
          CREATED_BY, CREATION_DATE, LAST_UPDATED_BY,
          LAST_UPDATE_DATE, LAST_UPDATE_LOGIN, SECURITY_GROUP_ID
        ) VALUES (
          okc_p_util.raw_to_number(sys_guid()), l_copied_id, l_copied_id,
          c2rec.CLE_ID, c2rec.CHR_ID_REFERRED, c2rec.CLE_ID_REFERRED,
          c2rec.ISA_AGREEMENT_ID, c2rec.COPIED_ONLY_YN, c2rec.OBJECT_VERSION_NUMBER,
          l_created_by, SYSDATE, l_last_updated_by,
          SYSDATE, l_last_update_login, c2rec.SECURITY_GROUP_ID
        ) RETURNING ID INTO l_gov_id;
        EXCEPTION WHEN OTHERS THEN
           IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                        OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
             OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ERROR during inser into okc_governances...');
           END IF;
           RAISE OKC_API.G_EXCEPTION_ERROR;
      END;

      l_curr_pos := 'okl_copy_lease_contract:19';
      IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
              OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_gov_id=' || l_gov_id);
      END IF;
      /*  AKP: We dont need okc_governances_h
      for c3rec in c3(p_chr_id)
      loop
        l_curr_pos := 'okl_copy_lease_contract:20';
        insert into okc_governances_h (
          ID, DNZ_CHR_ID, CHR_ID,
          CLE_ID, CHR_ID_REFERRED, CLE_ID_REFERRED,
          ISA_AGREEMENT_ID, MAJOR_VERSION, OBJECT_VERSION_NUMBER,
          COPIED_ONLY_YN, CREATED_BY, CREATION_DATE,
          LAST_UPDATED_BY, LAST_UPDATE_DATE, LAST_UPDATE_LOGIN,
          SECURITY_GROUP_ID
        ) VALUES (
          l_gov_id, l_copied_id, l_copied_id,
          c3rec.CLE_ID, c3rec.CHR_ID_REFERRED, c3rec.CLE_ID_REFERRED,
          c3rec.ISA_AGREEMENT_ID, c3rec.MAJOR_VERSION, c3rec.OBJECT_VERSION_NUMBER,
          c3rec.COPIED_ONLY_YN, c3rec.CREATED_BY, SYSDATE,
          c3rec.LAST_UPDATED_BY, SYSDATE, c3rec.LAST_UPDATE_LOGIN,
          c3rec.SECURITY_GROUP_ID
        );
      end loop; */
    END LOOP;

    l_curr_pos := 'okl_copy_lease_contract:21';
    copy_var_int_rate_params(p_chr_id, l_copied_id, l_contract_start_date,
                             p_trans_type, p_rbk_date);
    l_curr_pos := 'okl_copy_lease_contract:21.1';
    IF (NVL(p_copy_lines_yn, 'N') = 'N') THEN
      -- Do only header level rules/roles etc
      l_curr_pos := 'okl_copy_lease_contract:22';
      IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
              OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Inserting okc_k_party_roles...' || TO_CHAR(SYSDATE,'HH24:MI:SS'));
      END IF;
      l_message := 'OKL_NEW_COPY_CPL_ERROR';
      insert_okc_k_party_roles(p_chr_id, l_copied_id); -- _b _tl contacts okl_party_payment_dtls

      l_curr_pos := 'okl_copy_lease_contract:23';
      IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
              OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Inserting okc_rule_groups...' || TO_CHAR(SYSDATE,'HH24:MI:SS'));
      END IF;
      l_message := 'OKL_NEW_COPY_RGP_ERROR';
      insert_okc_rule_groups(p_chr_id, l_copied_id); -- _b,_tl and rules(_b,_tl)

      l_curr_pos := 'okl_copy_lease_contract:24';
      l_message := 'OKL_NEW_COPY_RGR_ERROR';
      IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
              OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Inserting okc_rg_party_roles...' || TO_CHAR(SYSDATE,'HH24:MI:SS'));
      END IF;
      insert_okc_rg_party_roles(p_chr_id, l_copied_id);
    ELSE

      --Copy lines
      l_curr_pos := 'okl_copy_lease_contract:25';
      IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
              OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'okc_k_lines Lines...' || TO_CHAR(SYSDATE,'HH24:MI:SS'));
      END IF;
      l_counter := 1;
      l_message := 'OKL_NEW_COPY_CLE_ERROR';
      OPEN c4(p_chr_id);
      LOOP
        l_curr_pos := 'okl_copy_lease_contract:26';
        FETCH c4 bulk collect INTO
        l_id_tab2,l_line_number_tab2,l_chr_id_tab2,
        l_cle_id_tab2,l_cle_id_renewed_tab2,l_dnz_chr_id_tab2,
        l_display_sequence_tab2,l_sts_code_tab2,l_trn_code_tab2,
        l_lse_id_tab2,l_exception_yn_tab2,l_object_version_number_tab2,
        l_created_by_tab2,l_creation_date_tab2,l_last_updated_by_tab2,
        l_last_update_date_tab2,l_hidden_ind_tab2,l_price_negotiated_tab2,
        l_price_level_ind_tab2,l_price_unit_tab2,l_price_unit_percent_tab2,
        l_invoice_line_level_ind_tab2,l_dpas_rating_tab2,l_template_used_tab2,
        l_price_type_tab2,l_currency_code_tab2,l_last_update_login_tab2,
        l_date_terminated_tab2,l_start_date_tab2,l_end_date_tab2,
        l_attribute_category_tab2,l_attribute1_tab2,l_attribute2_tab2,
        l_attribute3_tab2,l_attribute4_tab2,l_attribute5_tab2,
        l_attribute6_tab2,l_attribute7_tab2,l_attribute8_tab2,
        l_attribute9_tab2,l_attribute10_tab2,l_attribute11_tab2,
        l_attribute12_tab2,l_attribute13_tab2,l_attribute14_tab2,
        l_attribute15_tab2,l_security_group_id_tab2,l_cle_id_renewed_to_tab2,
        l_price_negotiated_renewed_tb2,l_currency_code_renewed_tab2,l_upg_orig_system_ref_tab2,
        l_upg_orig_system_ref_id_tab2,l_date_renewed_tab2,l_orig_system_source_code_tab2,
        l_orig_system_id1_tab2,l_orig_system_reference1_tab2,l_program_application_id_tab2,
        l_program_id_tab2,l_program_update_date_tab2,l_request_id_tab2,
        l_price_list_id_tab2,l_price_list_line_id_tab2,l_line_list_price_tab2,
        l_item_to_price_yn_tab2,l_pricing_date_tab2,l_price_basis_yn_tab2,
        l_config_header_id_tab2,l_config_revision_number_tab2,l_config_complete_yn_tab2,
        l_config_valid_yn_tab2,l_config_top_model_line_id_tb2,l_config_item_type_tab2,
        l_config_item_id_tab2,l_service_item_yn_tab2,l_ph_pricing_type_tab2,
        l_ph_price_break_basis_tab2,l_ph_min_qty_tab2,l_ph_min_amt_tab2,
        l_ph_qp_reference_id_tab2,l_ph_value_tab2,l_ph_enforce_price_list_yn_tb2,
        l_ph_adjustment_tab2,l_ph_integrated_with_qp_tab2,l_cust_acct_id_tab2,
        l_bill_to_site_use_id_tab2,l_inv_rule_id_tab2,l_line_renewal_type_code_tab2,
        l_ship_to_site_use_id_tab2,l_payment_term_id_tab2 , l_fee_type_tab2,
        l_name_tab2
        limit G_BULK_SIZE;

        IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                  OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_id_tab2.count=' || l_id_tab2.COUNT);
        END IF;
        IF l_id_tab2.COUNT > 0 THEN
          NULL;
          l_curr_pos := 'okl_copy_lease_contract:27';
          FOR i IN l_id_tab2.first..l_id_tab2.last
          LOOP
            --if ( (l_fee_type_tab2(i) = 'ROLLOVER' and
                    --l_lse_id_tab2(i) = 52 and
                    --p_trans_type = 'CFA') or
                 --(l_sts_code_tab2(i) = 'ABANDONED') or
                 --(l_lse_id_tab2(i) = 47) ) then
              --null;
            --else
              l_id_tab3(l_counter) := l_id_tab2(i);
              l_id_tab(l_counter) := l_id_tab2(i); -- populate from guid() later
              l_line_number_tab(l_counter) := l_line_number_tab2(i);
              l_chr_id_tab(l_counter) := l_chr_id_tab2(i);

              -- Change chr_id
              IF (l_chr_id_tab(l_counter) IS NOT NULL) THEN
                l_chr_id_tab(l_counter) := l_copied_id;
              END IF;

              l_cle_id_tab(l_counter) := l_cle_id_tab2(i);
              l_cle_id_renewed_tab(l_counter) := l_cle_id_renewed_tab2(i);

              -- Change dnz_chr_id
              --l_dnz_chr_id_tab(l_counter) := l_dnz_chr_id_tab2(i);
              l_dnz_chr_id_tab(l_counter) := l_copied_id;

              l_display_sequence_tab(l_counter) := l_display_sequence_tab2(i);
              l_sts_code_tab(l_counter) := l_sts_code_tab2(i);
              l_trn_code_tab(l_counter) := l_trn_code_tab2(i);
              l_lse_id_tab(l_counter) := l_lse_id_tab2(i);
              l_exception_yn_tab(l_counter) := l_exception_yn_tab2(i);
              l_object_version_number_tab(l_counter) := l_object_version_number_tab2(i);
              l_created_by_tab(l_counter) := l_created_by_tab2(i);
              l_creation_date_tab(l_counter) := l_creation_date_tab2(i);
              l_last_updated_by_tab(l_counter) := l_last_updated_by_tab2(i);
              l_last_update_date_tab(l_counter) := l_last_update_date_tab2(i);
              l_hidden_ind_tab(l_counter) := l_hidden_ind_tab2(i);
              l_price_negotiated_tab(l_counter) := l_price_negotiated_tab2(i);
              l_price_level_ind_tab(l_counter) := l_price_level_ind_tab2(i);
              l_price_unit_tab(l_counter) := l_price_unit_tab2(i);
              l_price_unit_percent_tab(l_counter) := l_price_unit_percent_tab2(i);
              l_invoice_line_level_ind_tab(l_counter) := l_invoice_line_level_ind_tab2(i);
              l_dpas_rating_tab(l_counter) := l_dpas_rating_tab2(i);
              l_template_used_tab(l_counter) := l_template_used_tab2(i);
              l_price_type_tab(l_counter) := l_price_type_tab2(i);
              l_currency_code_tab(l_counter) := l_currency_code_tab2(i);
              l_last_update_login_tab(l_counter) := l_last_update_login_tab2(i);
              l_date_terminated_tab(l_counter) := l_date_terminated_tab2(i);
              l_start_date_tab(l_counter) := l_start_date_tab2(i);
              l_end_date_tab(l_counter) := l_end_date_tab2(i);
              l_attribute_category_tab(l_counter) := l_attribute_category_tab2(i);
              l_attribute1_tab(l_counter) := l_attribute1_tab2(i);
              l_attribute2_tab(l_counter) := l_attribute2_tab2(i);
              l_attribute3_tab(l_counter) := l_attribute3_tab2(i);
              l_attribute4_tab(l_counter) := l_attribute4_tab2(i);
              l_attribute5_tab(l_counter) := l_attribute5_tab2(i);
              l_attribute6_tab(l_counter) := l_attribute6_tab2(i);
              l_attribute7_tab(l_counter) := l_attribute7_tab2(i);
              l_attribute8_tab(l_counter) := l_attribute8_tab2(i);
              l_attribute9_tab(l_counter) := l_attribute9_tab2(i);
              l_attribute10_tab(l_counter) := l_attribute10_tab2(i);
              l_attribute11_tab(l_counter) := l_attribute11_tab2(i);
              l_attribute12_tab(l_counter) := l_attribute12_tab2(i);
              l_attribute13_tab(l_counter) := l_attribute13_tab2(i);
              l_attribute14_tab(l_counter) := l_attribute14_tab2(i);
              l_attribute15_tab(l_counter) := l_attribute15_tab2(i);
              l_security_group_id_tab(l_counter) := l_security_group_id_tab2(i);
              l_cle_id_renewed_to_tab(l_counter) := l_cle_id_renewed_to_tab2(i);
              l_price_negotiated_renewed_tab(l_counter) := l_price_negotiated_renewed_tb2(i);
              l_currency_code_renewed_tab(l_counter) := l_currency_code_renewed_tab2(i);
              l_upg_orig_system_ref_tab(l_counter) := l_upg_orig_system_ref_tab2(i);
              l_upg_orig_system_ref_id_tab(l_counter) := l_upg_orig_system_ref_id_tab2(i);
              l_date_renewed_tab(l_counter) := l_date_renewed_tab2(i);
              l_orig_system_source_code_tab(l_counter) := l_orig_system_source_code_tab2(i);
              --l_orig_system_id1_tab(l_counter) := l_orig_system_id1_tab2(i);

              -- Populate proper values
              l_orig_system_id1_tab(l_counter) := l_id_tab(l_counter);
              l_id_tab(l_counter) := okc_p_util.raw_to_number(sys_guid());
              -- Populate proper values done

              -- Store sid mapping for business function processing
              l_sid_mapping_tab(l_counter).id := l_id_tab(l_counter);
              l_sid_mapping_tab(l_counter).lse_id := l_lse_id_tab(l_counter);

              l_orig_system_reference1_tab(l_counter) := l_orig_system_reference1_tab2(i);
              l_program_application_id_tab(l_counter) := l_program_application_id_tab2(i);
              l_program_id_tab(l_counter) := l_program_id_tab2(i);
              l_program_update_date_tab(l_counter) := l_program_update_date_tab2(i);
              l_request_id_tab(l_counter) := l_request_id_tab2(i);
              l_price_list_id_tab(l_counter) := l_price_list_id_tab2(i);
              l_price_list_line_id_tab(l_counter) := l_price_list_line_id_tab2(i);
              l_line_list_price_tab(l_counter) := l_line_list_price_tab2(i);
              l_item_to_price_yn_tab(l_counter) := l_item_to_price_yn_tab2(i);
              l_pricing_date_tab(l_counter) := l_pricing_date_tab2(i);
              l_price_basis_yn_tab(l_counter) := l_price_basis_yn_tab2(i);
              l_config_header_id_tab(l_counter) := l_config_header_id_tab2(i);
              l_config_revision_number_tab(l_counter) := l_config_revision_number_tab2(i);
              l_config_complete_yn_tab(l_counter) := l_config_complete_yn_tab2(i);
              l_config_valid_yn_tab(l_counter) := l_config_valid_yn_tab2(i);
              l_config_top_model_line_id_tab(l_counter) := l_config_top_model_line_id_tb2(i);
              l_config_item_type_tab(l_counter) := l_config_item_type_tab2(i);
              l_config_item_id_tab(l_counter) := l_config_item_id_tab2(i);
              l_service_item_yn_tab(l_counter) := l_service_item_yn_tab2(i);
              l_ph_pricing_type_tab(l_counter) := l_ph_pricing_type_tab2(i);
              l_ph_price_break_basis_tab(l_counter) := l_ph_price_break_basis_tab2(i);
              l_ph_min_qty_tab(l_counter) := l_ph_min_qty_tab2(i);
              l_ph_min_amt_tab(l_counter) := l_ph_min_amt_tab2(i);
              l_ph_qp_reference_id_tab(l_counter) := l_ph_qp_reference_id_tab2(i);
              l_ph_value_tab(l_counter) := l_ph_value_tab2(i);
              l_ph_enforce_price_list_yn_tab(l_counter) := l_ph_enforce_price_list_yn_tb2(i);
              l_ph_adjustment_tab(l_counter) := l_ph_adjustment_tab2(i);
              l_ph_integrated_with_qp_tab(l_counter) := l_ph_integrated_with_qp_tab2(i);
              l_cust_acct_id_tab(l_counter) := l_cust_acct_id_tab2(i);
              l_bill_to_site_use_id_tab(l_counter) := l_bill_to_site_use_id_tab2(i);
              l_inv_rule_id_tab(l_counter) := l_inv_rule_id_tab2(i);
              l_line_renewal_type_code_tab(l_counter) := l_line_renewal_type_code_tab2(i);
              l_ship_to_site_use_id_tab(l_counter) := l_ship_to_site_use_id_tab2(i);
              l_payment_term_id_tab(l_counter) := l_payment_term_id_tab2(i);
              l_name_tab(l_counter) := l_name_tab2(i);
              --print('c4:l_name_tab(' || l_counter||')=' || l_name_tab(l_counter) || ' l_lse_id_tab(' || l_counter||')=' || l_lse_id_tab(l_counter));

              -- Another table
              l_orig_system_tab(l_counter).orig_system_id1 := l_orig_system_id1_tab(l_counter);
              l_orig_system_tab(l_counter).id := l_id_tab(l_counter);

              -- Id Mapping table
              l_id_mapping_tab(l_counter).old_id := l_id_tab3(l_counter);
              l_id_mapping_tab(l_counter).new_id := l_id_tab(l_counter);

              --l_bid_mapping_tab(l_counter).old_id := l_id_tab(l_counter)*100 + l_lse_id_tab(l_counter);
              l_bid_mapping_tab(l_counter).old_id := l_id_tab(l_counter);
              l_bid_mapping_tab(l_counter).new_id := l_name_tab(l_counter);

              IF ( (l_fee_type_tab2(i) = 'ROLLOVER' AND
                      l_lse_id_tab2(i) = 52 AND
                      p_trans_type = 'CFA') OR
                   (l_sts_code_tab2(i) = 'ABANDONED') OR
                   (l_lse_id_tab2(i) = 47) ) THEN
                IF (l_chr_id_tab(i) IS NOT NULL) THEN
                   -- Populate delete id tabs
                  l_delete_id_tab(l_delete_counter) := l_id_tab(l_counter);
                  l_delete_counter := l_delete_counter + 1;
                ELSE -- Bug 4872258
                  IF (l_sts_code_tab2(i) = 'ABANDONED') THEN -- 5127961
                    l_delete_id_tab(l_delete_counter) := l_id_tab(l_counter);
                    l_delete_counter := l_delete_counter + 1;
                  ELSE
                  -- Populate 'ENTERED' id tabs
                  l_entered_id_tab(l_entered_counter) := l_id_tab(l_counter);
                  l_entered_sts_code_tab(l_entered_counter) := 'ENTERED';
                  IF (l_sts_code_tab2(i) = 'ABANDONED') THEN
                    l_entered_sts_code_tab(l_entered_counter) := 'ABANDONED';
                  END IF;
                  IF (p_trans_type = 'CRB') THEN  -- Bug 4959361
                    IF (l_sts_code_tab2(i) = 'TERMINATED') THEN
                      l_entered_sts_code_tab(l_entered_counter) := 'TERMINATED';
                    ELSE
                      l_date_terminated_tab(l_counter) := NULL;
                      l_trn_code_tab(l_counter) := NULL;
                    END IF;
                  ELSE
                      l_date_terminated_tab(l_counter) := NULL;
                      l_trn_code_tab(l_counter) := NULL;
                  END IF;
                  l_entered_counter := l_entered_counter + 1;
                  l_id2_tab(l_id2_tab_counter) := l_id_tab(i);
                  l_lse_id2_tab(l_id2_tab_counter) := l_lse_id_tab(i);
                  l_id2_tab_counter := l_id2_tab_counter + 1;
                  END IF; -- 5127961
                END IF;
              ELSE
                 -- Populate 'ENTERED' id tabs
                l_entered_id_tab(l_entered_counter) := l_id_tab(l_counter);
                l_entered_sts_code_tab(l_entered_counter) := 'ENTERED';
                --IF (l_sts_code_tab2(i) = 'ABANDONED') THEN
                  --l_entered_sts_code_tab(l_entered_counter) := 'ABANDONED';
                --END IF;
                --4959361
                IF (p_trans_type = 'CRB') THEN
                  IF (l_sts_code_tab2(i) = 'TERMINATED') THEN
                    l_entered_sts_code_tab(l_entered_counter) := 'TERMINATED';
                  ELSE
                      l_date_terminated_tab(l_counter) := NULL;
                      l_trn_code_tab(l_counter) := NULL;
                  END IF;
                ELSE
                      l_date_terminated_tab(l_counter) := NULL;
                      l_trn_code_tab(l_counter) := NULL;
                END IF;
                l_entered_counter := l_entered_counter + 1;
                l_id2_tab(l_id2_tab_counter) := l_id_tab(i);
                l_lse_id2_tab(l_id2_tab_counter) := l_lse_id_tab(i);
                l_id2_tab_counter := l_id2_tab_counter + 1;
              END IF;

              l_counter := l_counter + 1;
            --end if;
          END LOOP;
        ELSE
          EXIT;
        END IF;
        l_curr_pos := 'okl_copy_lease_contract:28';

      END LOOP;
      CLOSE c4;
      IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
              OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_counter [ For okc_k_lines_b ] =' || l_counter);
      END IF;

      -- Sort l_orig_system_tab
      l_curr_pos := 'okl_copy_lease_contract:29';
      do_sort;
      l_curr_pos := 'okl_copy_lease_contract:30';
      do_id_mapping_sort;
      l_curr_pos := 'okl_copy_lease_contract:31';
      sort_sid_mapping_tab;
      l_curr_pos := 'okl_copy_lease_contract:32';
      sort_bid_mapping_tab;
      l_curr_pos := 'okl_copy_lease_contract:33';
      --print('Sort done..');

      /*print('Before update values...');
      for i in 1..l_counter-1
      loop
        print('id='||l_id_tab(i) || ' cle_id=' || l_cle_id_tab(i)||' orig_system_id1='||l_orig_system_id1_tab(i));
      end loop;
      */

      IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
              OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Update Started ...' || TO_CHAR(SYSDATE,'HH24:MI:SS'));
      END IF;
      -- Update cle_id
      FOR i IN 1..l_counter-1
      LOOP
        IF (l_cle_id_tab(i) IS NOT NULL) THEN
          l_new_id := find_id(l_cle_id_tab(i));
          IF (l_new_id = -1) THEN
            IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ERROR!!!!Mapping line id not found');
            END IF;
            RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
          END IF;
          l_cle_id_tab(i) := l_new_id;

          l_cle_lse_mapping_tab(l_cle_lse_counter).cle_id := l_cle_id_tab(i);
          l_cle_lse_mapping_tab(l_cle_lse_counter).lse_id := l_lse_id_tab(i);
          l_cle_lse_mapping_tab(l_cle_lse_counter).id := l_id_tab(i);
          l_cle_lse_counter := l_cle_lse_counter + 1;
          --print('Storing cle_lse: ' || l_cle_id_tab(i)||':' || l_lse_id_tab(i) || ':' || l_id_tab(i));

          -- Store id to cle_id mapping in l_cid_mapping_tab
          l_cid_mapping_tab(l_cid_counter).old_id := l_id_tab(i);
          l_cid_mapping_tab(l_cid_counter).new_id := l_cle_id_tab(i);
          --print('l_new_id=' || l_new_id);
          l_cid_counter := l_cid_counter + 1;
        END IF;
      END LOOP;
      IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
              OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Update Finished ...' || TO_CHAR(SYSDATE,'HH24:MI:SS'));
      END IF;
      l_curr_pos := 'okl_copy_lease_contract:34';
      sort_cid_mapping_tab;
      l_curr_pos := 'okl_copy_lease_contract:35';
      sort_cle_lse_mapping_tab;

      /*
      print('After update values...');
      for i in 1..l_counter-1
      loop
        print('id='||l_id_tab(i) || ' cle_id=' || l_cle_id_tab(i)||' orig_system_id1='||l_orig_system_id1_tab(i));
      end loop;
      */

      IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
              OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Before Inserting okc_k_lines_b...' || TO_CHAR(SYSDATE,'HH24:MI:SS'));
        OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_id_tab.count='||l_id_tab.COUNT);
      END IF;
      IF (l_id_tab.COUNT > 0) THEN
      BEGIN
        l_curr_pos := 'okl_copy_lease_contract:36';
        forall i IN l_id_tab.first..l_id_tab.last
        INSERT INTO okc_k_lines_b (
         id, line_number, chr_id,
         cle_id, cle_id_renewed, dnz_chr_id,
         display_sequence, sts_code, trn_code,
         lse_id, exception_yn, object_version_number,
         created_by, creation_date, last_updated_by,
         last_update_date, hidden_ind, price_negotiated,
         price_level_ind, price_unit, price_unit_percent,
         invoice_line_level_ind, dpas_rating, template_used,
         price_type, currency_code, last_update_login,
         date_terminated, start_date, end_date,
         attribute_category, attribute1, attribute2,
         attribute3, attribute4, attribute5,
         attribute6, attribute7, attribute8,
         attribute9, attribute10, attribute11,
         attribute12, attribute13, attribute14,
         attribute15, security_group_id, cle_id_renewed_to,
         price_negotiated_renewed, currency_code_renewed, upg_orig_system_ref,
         upg_orig_system_ref_id, date_renewed, orig_system_source_code,
         orig_system_id1, orig_system_reference1, program_application_id,
         program_id, program_update_date, request_id,
         price_list_id, price_list_line_id, line_list_price,
         item_to_price_yn, pricing_date, price_basis_yn,
         config_header_id, config_revision_number, config_complete_yn,
         config_valid_yn, config_top_model_line_id, config_item_type,
         config_item_id, service_item_yn, ph_pricing_type,
         ph_price_break_basis, ph_min_qty, ph_min_amt,
         ph_qp_reference_id, ph_value, ph_enforce_price_list_yn,
         ph_adjustment, ph_integrated_with_qp, cust_acct_id,
         bill_to_site_use_id, inv_rule_id, line_renewal_type_code,
         ship_to_site_use_id, payment_term_id)
        VALUES (
         l_id_tab(i), l_line_number_tab(i), l_chr_id_tab(i),
         l_cle_id_tab(i), l_cle_id_renewed_tab(i), l_dnz_chr_id_tab(i),
         l_display_sequence_tab(i), 'ENTERED', l_trn_code_tab(i), -- Bug 4959361 NULL,
         l_lse_id_tab(i), l_exception_yn_tab(i), 1,
         l_created_by, SYSDATE, l_last_updated_by,
         SYSDATE, l_hidden_ind_tab(i), l_price_negotiated_tab(i),
         l_price_level_ind_tab(i), l_price_unit_tab(i), l_price_unit_percent_tab(i),
         l_invoice_line_level_ind_tab(i), l_dpas_rating_tab(i), l_template_used_tab(i),
         l_price_type_tab(i), l_currency_code_tab(i), l_last_update_login,
         -- Bug 4959361 NULL, l_start_date_tab(i), l_end_date_tab(i),
         l_date_terminated_tab(i), l_start_date_tab(i), l_end_date_tab(i),
         l_attribute_category_tab(i), l_attribute1_tab(i), l_attribute2_tab(i),
         l_attribute3_tab(i), l_attribute4_tab(i), l_attribute5_tab(i),
         l_attribute6_tab(i), l_attribute7_tab(i), l_attribute8_tab(i),
         l_attribute9_tab(i), l_attribute10_tab(i), l_attribute11_tab(i),
         l_attribute12_tab(i), l_attribute13_tab(i), l_attribute14_tab(i),
         l_attribute15_tab(i), l_security_group_id_tab(i), l_cle_id_renewed_to_tab(i),
         l_price_negotiated_renewed_tab(i), l_currency_code_renewed_tab(i), l_upg_orig_system_ref_tab(i),
         l_upg_orig_system_ref_id_tab(i), NULL, 'OKC_LINE',
         l_id_tab3(i), l_orig_system_reference1_tab(i), l_program_application_id_tab(i),
         l_program_id_tab(i), l_program_update_date_tab(i), l_request_id_tab(i),
         l_price_list_id_tab(i), l_price_list_line_id_tab(i), l_line_list_price_tab(i),
         l_item_to_price_yn_tab(i), l_pricing_date_tab(i), l_price_basis_yn_tab(i),
         l_config_header_id_tab(i), l_config_revision_number_tab(i), l_config_complete_yn_tab(i),
         l_config_valid_yn_tab(i), l_config_top_model_line_id_tab(i), l_config_item_type_tab(i),
         l_config_item_id_tab(i), l_service_item_yn_tab(i), l_ph_pricing_type_tab(i),
         l_ph_price_break_basis_tab(i), l_ph_min_qty_tab(i), l_ph_min_amt_tab(i),
         NULL, l_ph_value_tab(i), l_ph_enforce_price_list_yn_tab(i),
         l_ph_adjustment_tab(i), NULL, l_cust_acct_id_tab(i),
         l_bill_to_site_use_id_tab(i), l_inv_rule_id_tab(i), l_line_renewal_type_code_tab(i),
         l_ship_to_site_use_id_tab(i), l_payment_term_id_tab(i)
        );
      EXCEPTION WHEN OTHERS THEN
         IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
           OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ERROR during insert into okc_k_lines_b...');
         END IF;
         RAISE OKC_API.G_EXCEPTION_ERROR;
    END;
    END IF;

      IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
              OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Inserting okc_k_lines_tl...' || TO_CHAR(SYSDATE,'HH24:MI:SS'));
      END IF;
      -- Now insert okc_k_lines_tl
      /*
      for i in 1..l_counter-1 loop
        --old id to be used to query, new id to update
        -- Store okc_k_lines_b l_id_tab into l_id_tab3 for future reference
        if (i = l_counter - 1) then
          insert_okc_k_lines_tl_old(l_id_tab3(i), l_id_tab(i), 'Y');
        else
          insert_okc_k_lines_tl_old(l_id_tab3(i), l_id_tab(i), 'N');
        end if;
      end loop;
      */
      l_curr_pos := 'okl_copy_lease_contract:37';
      l_message := 'OKL_NEW_COPY_CLE_ERROR';
      insert_okc_k_lines_tl(p_chr_id);
      --sort_aid_mapping_tab;
      IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
              OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'After sort_aid_mapping_tab...' || TO_CHAR(SYSDATE,'HH24:MI:SS'));
      END IF;

      l_message := 'OKL_NEW_COPY_KLE_ERROR';
      IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
              OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Inserting okl_k_lines...' || TO_CHAR(SYSDATE,'HH24:MI:SS'));
      END IF;
      l_curr_pos := 'okl_copy_lease_contract:38';
      insert_okl_k_lines;

      IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
              OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Inserting okc_k_party_roles...' || TO_CHAR(SYSDATE,'HH24:MI:SS'));
      END IF;
      l_curr_pos := 'okl_copy_lease_contract:39';
      l_message := 'OKL_NEW_COPY_CPL_ERROR';
      insert_okc_k_party_roles(p_chr_id, l_copied_id); -- _b _tl contacts okl_party_payment_dtls

      IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
              OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Inserting okc_rule_groups...' || TO_CHAR(SYSDATE,'HH24:MI:SS'));
      END IF;
      l_curr_pos := 'okl_copy_lease_contract:40';
      l_message := 'OKL_NEW_COPY_RGP_ERROR';
      insert_okc_rule_groups(p_chr_id, l_copied_id); -- _b,_tl and rules(_b,_tl)

      IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
              OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Inserting okc_rg_party_roles...' || TO_CHAR(SYSDATE,'HH24:MI:SS'));
      END IF;
      l_curr_pos := 'okl_copy_lease_contract:41';
      l_message := 'OKL_NEW_COPY_RGR_ERROR';
      insert_okc_rg_party_roles(p_chr_id, l_copied_id);

      IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
              OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Inserting okc_k_items...' || TO_CHAR(SYSDATE,'HH24:MI:SS'));
      END IF;
      l_curr_pos := 'okl_copy_lease_contract:42';
      l_message := 'OKL_NEW_COPY_CIM_ERROR';
      insert_okc_k_items(p_chr_id, l_copied_id);

      IF ((l_sts_code_orig IN (
         'APPROVED', 'COMPLETE', 'INCOMPLETE', 'NEW',
          'PASSED', 'PENDING_APPROVAL')) OR
          (nvl(l_template_yn, 'N') = 'Y' )) THEN
        IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                  OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Inserting okl_trx_assets...' || TO_CHAR(SYSDATE,'HH24:MI:SS'));
        END IF;
        l_curr_pos := 'okl_copy_lease_contract:43';
        l_message := 'OKL_NEW_COPY_ASSET_TAS_ERROR';
        insert_okl_trx_assets(p_chr_id, l_copied_id);

        IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                  OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Inserting okl_txl_itm_insts...' || TO_CHAR(SYSDATE,'HH24:MI:SS'));
        END IF;
        l_curr_pos := 'okl_copy_lease_contract:44';
        l_message := 'OKL_NEW_COPY_IB_TAS_ERROR';
        insert_okl_trx_assets_2(p_chr_id, l_copied_id);
        l_curr_pos := 'okl_copy_lease_contract:45';
        l_message := 'OKL_NEW_COPY_ITI_ERROR';
        insert_okl_txl_itm_insts(p_chr_id, l_copied_id);
      ELSE
        IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                  OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Inserting okl_trx_assets BOOKED...' || TO_CHAR(SYSDATE,'HH24:MI:SS'));
        END IF;
        l_curr_pos := 'okl_copy_lease_contract:46';
        l_message := 'OKL_NEW_COPY_ASSET_TAS_ERROR';
        insert_okl_trx_assets_3(p_chr_id, l_copied_id);
        IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                  OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Inserting okl_txl_itm_insts BOOKED...' || TO_CHAR(SYSDATE,'HH24:MI:SS'));
        END IF;
        l_curr_pos := 'okl_copy_lease_contract:47';
        l_message := 'OKL_NEW_COPY_IB_TAS_ERROR';
        insert_okl_txl_itm_insts2(p_chr_id, l_copied_id);
      END IF;

      -- Delete the abandoned/rollover/insurance lines now
      IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
              OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Delete started ' || TO_CHAR(SYSDATE,'HH24:MI:SS'));
      END IF;
      l_curr_pos := 'okl_copy_lease_contract:48';
      IF (l_delete_counter > 1) THEN
        IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                  OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_delete_counter=' || l_delete_counter);
        END IF;
        FOR i IN l_delete_id_tab.first..l_delete_id_tab.last
        LOOP
          IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_delete_id_tab(' || i || ')=' || l_delete_id_tab(i));
          END IF;
          select count(1) into l_line_count  -- 5207066
          FROM   okc_k_lines_b
          where  id = l_delete_id_tab(i);
          IF (l_line_count > 0) THEN  -- 5207066
          Okl_Contract_Pub.delete_contract_line(
              p_api_version    => p_api_version,
              p_init_msg_list  => p_init_msg_list,
              x_return_status  => x_return_status,
              x_msg_count      => x_msg_count,
              x_msg_data       => x_msg_data,
              p_line_id        => l_delete_id_tab(i));
          IF x_return_status <> OKL_API.G_RET_STS_SUCCESS THEN
              RAISE G_EXCEPTION_HALT_PROCESS;
          END IF;
          END IF;

        END LOOP;
      END IF;

      -- Update status as ENTERED
      IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
              OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Update sts_code started ' || TO_CHAR(SYSDATE,'HH24:MI:SS'));
      END IF;
      l_curr_pos := 'okl_copy_lease_contract:49';
      IF (l_entered_counter > 1) THEN

        forall i IN l_entered_id_tab.first..l_entered_id_tab.last
          UPDATE okc_k_lines_b
          SET sts_code = l_entered_sts_code_tab(i) -- Bug 4872258
          --SET sts_code = 'ENTERED'
          WHERE id = l_entered_id_tab(i);
      END IF;

      IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
              OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Inserting okl_supp_invoice_dtls...' || TO_CHAR(SYSDATE,'HH24:MI:SS'));
      END IF;
      l_curr_pos := 'okl_copy_lease_contract:50';
      l_message := 'OKL_NEW_COPY_SID_ERROR';
      insert_okl_supp_invoice_dtls(p_chr_id);
      /* AKP: Commented out for now: it takes lot of time to execute formula
      print('Before formula execute x_return_status='||x_return_status || ' ' || to_char(sysdate,'HH24:MI:SS'));

      -- Post Processing (to calculate CAPITAL_AMOUNT)
      l_curr_pos := 'okl_copy_lease_contract:51';
      if (l_id2_tab.count > 0) then
      for i in l_id2_tab.first..l_id2_tab.last
      loop
        if (l_lse_id2_tab(i) = 33) then
          --print('Calling with ' || l_id2_tab(i));
          okl_execute_formula_pub.execute(p_api_version=> p_api_version,
                        p_init_msg_list => p_init_msg_list,
                        x_return_status => x_return_status,
                        x_msg_count => x_msg_count,
                        x_msg_data => x_msg_data,
                        p_formula_name => 'LINE_CAP_AMNT',
                        p_contract_id => l_copied_id,
                        p_line_id => l_id2_tab(i),
                        x_value => l_capital_amount);
          if (x_return_status = OKC_API.G_RET_STS_UNEXP_ERROR) then
            raise OKC_API.G_EXCEPTION_UNEXPECTED_ERROR;
          elsif (x_return_status = OKC_API.G_RET_STS_ERROR) then
            raise OKC_API.G_EXCEPTION_ERROR;
          end if;
        end if;
      end loop;
      end if;
      */
    END IF; /* if copy_lines_yn <> 'N' */
    END LOOP; /* for c1rec */
      --x_return_status := OKL_API.G_RET_STS_SUCCESS;

    x_chr_id := l_copied_id;
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'After formula execute x_return_status='||x_return_status || ' ' || TO_CHAR(SYSDATE,'HH24:MI:SS'));
    END IF;

    -- Now do all the business events processing
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Doing raise_business_event_header...' );
    END IF;
    l_curr_pos := 'okl_copy_lease_contract:52';
    raise_business_event_header(p_chr_id        => x_chr_id
	                       ,x_return_status => x_return_status);
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    -- For Create Top Line and Subsidy

    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Doing raise_business_event...' );
    END IF;
    l_curr_pos := 'okl_copy_lease_contract:53';
    l_contract_process := okl_lla_util_pvt.get_contract_process(l_copied_id);

    IF (l_counter > 1) THEN
      l_parameter_list := NULL;
      l_raise_business_event := OKL_API.G_FALSE;
      l_event_name := NULL;
      l_curr_pos := 'okl_copy_lease_contract:54';
      FOR i IN l_id_tab.first..l_id_tab.last
      LOOP
        IF l_lse_id_tab(i) = 58 THEN
            -- raise the business event for create credit limit, if line style code is FREE_FORM
            l_event_name  := G_WF_EVT_CR_LMT_CREATED;
            l_raise_business_event := OKL_API.G_TRUE;
            wf_event.AddParameterToList(G_WF_ITM_CR_LINE_ID,l_copied_id,l_parameter_list);
            wf_event.AddParameterToList(G_WF_ITM_CR_LMT_ID,l_id_tab(i),l_parameter_list);
        ELSIF l_lse_id_tab(i) = 33 THEN
            -- raise the business event for create asset, if line style code is FREE_FORM1
            l_event_name  := G_WF_EVT_ASSET_CREATED;
            wf_event.AddParameterToList(G_WF_ITM_CONTRACT_ID,l_copied_id,l_parameter_list);
            wf_event.AddParameterToList(G_WF_ITM_ASSET_ID,l_id_tab(i),l_parameter_list);
        ELSIF l_lse_id_tab(i) = 48 THEN
            -- raise the business event for create service, if line style code is SOLD_SERVICE
            l_event_name  := G_WF_EVT_SERVICE_CREATED;
            wf_event.AddParameterToList(G_WF_ITM_CONTRACT_ID,l_copied_id,l_parameter_list);
            wf_event.AddParameterToList(G_WF_ITM_SRV_LINE_ID,l_id_tab(i),l_parameter_list);
        --create_fee event is raised from here rather than okl_maintain_fee_pvt
        --as contract import process does not call okl_maintain_fee_pvt, but directly calls
        --okl_contract_pvt
        ELSIF l_lse_id_tab(i) = 52 THEN
            -- raise the business event for create fee, if line style code is FEE
            l_event_name  := G_WF_EVT_FEE_CREATED;
            wf_event.AddParameterToList(G_WF_ITM_CONTRACT_ID,l_copied_id,l_parameter_list);
            wf_event.AddParameterToList(G_WF_ITM_FEE_LINE_ID,l_id_tab(i),l_parameter_list);
        END IF;

        -- raise business event only if the contract is a lease contract, the raise_event flag is on and business event
        -- name is specified. the event should also be raised if this is a credit limit, in which case is_lease_contract
        -- does not hold good
        IF(l_raise_business_event = OKL_API.G_TRUE AND l_event_name IS NOT NULL) THEN
        	 raise_business_event(p_api_version    => p_api_version,
                              p_init_msg_list  => p_init_msg_list,
                              x_return_status  => x_return_status,
                              x_msg_count      => x_msg_count,
                              x_msg_data       => x_msg_data,
                              p_event_name     => l_event_name,
                              p_parameter_list => l_parameter_list,
                              p_contract_process  => l_contract_process );
          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;
          l_parameter_list := NULL;
          l_raise_business_event := OKL_API.G_FALSE;
          l_event_name := NULL;
        END IF;

        -- Subsidy
        IF (l_lse_id_tab(i) = 70) THEN
         raise_business_event_subsidy(p_api_version         => p_api_version,
                              p_init_msg_list    => p_init_msg_list,
                              p_chr_id           => l_copied_id,
                              p_asset_id         => l_cle_id_tab(i),
                              p_subsidy_id       => find_osid_mapping_id(l_id_tab(i)),
                              p_event_name       => G_WF_EVT_ASSET_SUBSIDY_CRTD,
                              p_contract_process => l_contract_process,
                              x_return_status    => x_return_status,
                              x_msg_count        => x_msg_count,
                              x_msg_data         => x_msg_data
                             );
         IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
         ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_ERROR;
         END IF;

        END IF;
      END LOOP;
    END IF;

    IF (l_counter > 1) THEN
      l_curr_pos := 'okl_copy_lease_contract:55';
      IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
              OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Doing raise_business_event_itm...' );
      END IF;
      -- For Create Fee Asset and Create Usage Line and Create Usage Asset
      l_parameter_list := NULL;
      l_raise_business_event := OKL_API.G_FALSE;
      l_business_event_name := NULL;
      FOR i IN l_id_tab.first..l_id_tab.last
      LOOP

        IF(l_lse_id_tab(i) = 53 ) THEN
           l_raise_business_event := OKL_API.G_TRUE;
           l_business_event_name  := G_WF_EVT_ASSET_FEE_CREATED;
           wf_event.AddParameterToList(G_WF_ITM_FEE_LINE_ID,l_cle_id_tab(i),l_parameter_list);
        ELSIF(l_lse_id_tab(i) = 49 ) THEN
           l_raise_business_event := OKL_API.G_TRUE;
           l_business_event_name  := G_WF_EVT_ASSET_SERV_FEE_CRTD;
           wf_event.AddParameterToList(G_WF_ITM_SERV_LINE_ID,l_cle_id_tab(i),l_parameter_list);
        END IF;

        IF(l_raise_business_event = OKL_API.G_TRUE AND l_business_event_name IS NOT NULL)THEN
      	   wf_event.AddParameterToList(G_WF_ITM_CONTRACT_ID,l_copied_id,l_parameter_list);
             --Ashish ??? Done
      	   --wf_event.AddParameterToList(G_WF_ITM_ASSET_ID,p_cimv_rec.object1_id1,l_parameter_list);
             l_new_object1_id1 := find_oid_mapping_id(l_id_tab(i));
             IF (l_new_object1_id1 = '-1') THEN
               IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                                OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Can not find mapping object1_id1 for ' || l_id_tab(i));
               END IF;
               RAISE OKL_API.G_EXCEPTION_ERROR;
             END IF;
      	   wf_event.AddParameterToList(G_WF_ITM_ASSET_ID,l_new_object1_id1,l_parameter_list);

    	   raise_business_event_itm(p_api_version      => p_api_version
                               ,p_init_msg_list    => p_init_msg_list
    	                     ,x_return_status    => x_return_status
                               ,x_msg_count        => x_msg_count
                               ,x_msg_data         => x_msg_data
                               ,p_event_name       => l_business_event_name
                               ,p_event_param_list => l_parameter_list
                               ,p_contract_process => l_contract_process);
          l_raise_business_event := OKL_API.G_FALSE;
          l_business_event_name := NULL;
          l_parameter_list := NULL;
        END IF;

        IF (l_lse_id_tab(i) = 56) THEN
          okl_ubb_wf_pvt.raise_create_event (
                           p_api_version    => p_api_version,
                           p_init_msg_list  => p_init_msg_list,
                           x_return_status  => x_return_status,
                           x_msg_count      => x_msg_count,
                           x_msg_data       => x_msg_data,
                           p_chr_id         => l_copied_id,
                           p_ubb_id         => l_id_tab(i));
          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;
        ELSIF (l_lse_id_tab(i) = 57) THEN
          okl_ubb_wf_pvt.raise_add_asset_event (
                           p_api_version    => p_api_version,
                           p_init_msg_list  => p_init_msg_list,
                           x_return_status  => x_return_status,
                           x_msg_count      => x_msg_count,
                           x_msg_data       => x_msg_data,
                           p_chr_id         => l_copied_id,
                           p_ubb_id         => l_cle_id_tab(i),
                           p_cle_id         => l_id_tab(i));
        END IF;

      END LOOP;
    END IF;

    IF (l_party_counter > 1) THEN
      IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
              OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Doing raise_business_event_itm again...' );
      END IF;
      l_curr_pos := 'okl_copy_lease_contract:56';
      -- For create party
      l_parameter_list := NULL;
      FOR i IN l_prid_tab.first..l_prid_tab.last
      LOOP

        wf_event.AddParameterToList(G_WF_ITM_CONTRACT_ID,l_copied_id,l_parameter_list);
        --vthiruva..04-jan-2004.. Modified to pass object1_id1 as party id and
        --added party_role_id to list of paramters passed to raise business event.
        --wf_event.AddParameterToList(G_WF_ITM_PARTY_ID,p_cplv_rec.object1_id1,l_parameter_list);
        --wf_event.AddParameterToList(G_WF_ITM_PARTY_ROLE_ID,x_cplv_rec.id,l_parameter_list);
        wf_event.AddParameterToList(G_WF_ITM_PARTY_ID,l_probject1_id1_tab(i),l_parameter_list);
        wf_event.AddParameterToList(G_WF_ITM_PARTY_ROLE_ID,l_prid_tab(i),l_parameter_list);

  	  raise_business_event_itm(p_api_version      => p_api_version
                            ,p_init_msg_list    => p_init_msg_list
  	                  ,x_return_status    => x_return_status
                            ,x_msg_count        => x_msg_count
                            ,x_msg_data         => x_msg_data
                            ,p_event_name       => G_WF_EVT_KHR_PARTY_CREATED
                            ,p_event_param_list => l_parameter_list
                            ,p_contract_process => l_contract_process);

        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
           RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
           RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;
        l_parameter_list := NULL;

      END LOOP;
    END IF;

    IF (l_txl_assets_b_counter > 1) THEN
      IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
              OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Doing raise_business_event_dep...' );
      END IF;
      l_curr_pos := 'okl_copy_lease_contract:57';
      -- For Create book Depreciation
      FOR i IN l_tbid_tab.first..l_tbid_tab.last
      LOOP
        IF (l_tbcorporate_book_tab(i) IS NOT NULL) THEN
         raise_business_event_dep
                             (p_api_version         => p_api_version,
                              p_init_msg_list       => p_init_msg_list,
                              p_chr_id              => l_copied_id,
                              p_asset_id            => find_cid_mapping_id(l_tbkle_id_tab(i)),
                              p_book_code           => l_tbcorporate_book_tab(i),
                              p_event_name          => G_WF_EVT_ASSETBOOK_DPRN_CRTD,
                              p_contract_process    => l_contract_process,
                              x_return_status       => x_return_status,
                              x_msg_count           => x_msg_count,
                              x_msg_data            => x_msg_data
                             );
         IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
         ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_ERROR;
         END IF;
        END IF;
      END LOOP;
    END IF;

    IF (l_trx_assets_counter4 > 1) THEN
      IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
              OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Doing raise_business_event_dep 2...' );
      END IF;
      l_curr_pos := 'okl_copy_lease_contract:58';
      FOR i IN l_tb2id_tab.first..l_tb2id_tab.last
      LOOP
        IF (l_tb2corporate_book_tab(i) IS NOT NULL) THEN
         raise_business_event_dep
                             (p_api_version         => p_api_version,
                              p_init_msg_list       => p_init_msg_list,
                              p_chr_id              => l_copied_id,
                              p_asset_id            => find_cid_mapping_id(l_tb2kle_id_tab(i)),
                              p_book_code           => l_tb2corporate_book_tab(i),
                              p_event_name          => G_WF_EVT_ASSETBOOK_DPRN_CRTD,
                              p_contract_process    => l_contract_process,
                              x_return_status       => x_return_status,
                              x_msg_count           => x_msg_count,
                              x_msg_data            => x_msg_data
                             );
         IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
         ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_ERROR;
         END IF;
        END IF;
      END LOOP;
    END IF;

    -- Create Tax Depreciation
    IF (l_tal_to_kle_counter > 1) THEN
      l_curr_pos := 'okl_copy_lease_contract:59';
      FOR i IN l_dbid_mapping_tab.first..l_dbid_mapping_tab.last
      LOOP
        l_tal_kle_cle_id := find_cid_mapping_id(l_dbid_mapping_tab(i).kle_id);
        IF (l_tal_kle_cle_id = -1) THEN
          IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                      OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'ERROR: TAL_ID to KLE_ID to CLE_ID mapping not found');
          END IF;
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;
        raise_business_event_txd
                   ( p_api_version         => p_api_version,
                     p_init_msg_list       => p_init_msg_list,
                     p_chr_id              => l_copied_id,
                     p_asset_id            => l_tal_kle_cle_id,
                     p_event_name          => G_WF_EVT_ASSETTAX_DPRN_CRTD,
                     p_contract_process    => l_contract_process,
                     x_return_status       => x_return_status,
                     x_msg_count           => x_msg_count,
                     x_msg_data            => x_msg_data
                   );
        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;
      END LOOP;
    END IF;

    -- Create Serial Number
    IF ( l_txl_itm_insts_counter > 1 ) THEN
      IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
              OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Doing raise_business_event_itm...');
      END IF;
      l_curr_pos := 'okl_copy_lease_contract:60';
      FOR i IN l_tiid_tab.first..l_tiid_tab.last
      LOOP
        IF (l_tiserial_number_tab(i) IS NOT NULL) THEN
          raise_business_event_itm
                    ( p_api_version         => p_api_version,
                      p_init_msg_list       => p_init_msg_list,
                      p_chr_id              => l_copied_id,
                      p_asset_id            => l_tidnz_cle_id_tab(i),
                      p_ser_num             => l_tiserial_number_tab(i),
                      p_event_name          => G_WF_EVT_ASSET_SERIAL_CRTD,
                      p_contract_process    => l_contract_process,
                      x_return_status       => x_return_status,
                      x_msg_count           => x_msg_count,
                      x_msg_data            => x_msg_data
                    );
       IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
       ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
       END IF;
        END IF;
      END LOOP;
    END IF;

    -- Create Serial Number2
    IF ( l_txl_itm_insts_counter2 > 1 ) THEN
      IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
              OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Doing raise_business_event_itm 2...');
      END IF;
      l_curr_pos := 'okl_copy_lease_contract:61';
      FOR i IN l_ti2id_tab.first..l_ti2id_tab.last
      LOOP
        IF (l_ti2serial_number_tab(i) IS NOT NULL) THEN
          raise_business_event_itm
                    ( p_api_version         => p_api_version,
                      p_init_msg_list       => p_init_msg_list,
                      p_chr_id              => l_copied_id,
                      p_asset_id            => l_ti2dnz_cle_id_tab(i),
                      p_ser_num             => l_ti2serial_number_tab(i),
                      p_event_name          => G_WF_EVT_ASSET_SERIAL_CRTD,
                      p_contract_process    => l_contract_process,
                      x_return_status       => x_return_status,
                      x_msg_count           => x_msg_count,
                      x_msg_data            => x_msg_data
                    );
       IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
       ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
       END IF;
        END IF;
      END LOOP;
    END IF;

    -- For Create Supplier Invoice Details
    IF (l_supp_invoice_dtls_counter > 1) THEN
      l_curr_pos := 'okl_copy_lease_contract:62';
      FOR i IN l_osid_tab.first..l_osid_tab.last
      LOOP
        l_vendor_id := NULL;
        IF (l_vid_counter > 1) THEN
          l_vendor_id  := find_vid_mapping_id(l_oscle_id_tab(i));
        END IF;
        raise_business_event_supp
             ( p_api_version         => p_api_version,
               p_init_msg_list       => p_init_msg_list,
               p_chr_id              => l_copied_id,
               p_asset_id            => l_oscle_id_tab(i),
               p_vendor_id           => l_vendor_id,
               p_event_name          => G_WF_EVT_ASSET_SUP_INV_CRTD,
               p_contract_process    => l_contract_process,
               x_return_status       => x_return_status,
               x_msg_count           => x_msg_count,
               x_msg_data            => x_msg_data
             );
       IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
       ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
       END IF;
      END LOOP;
    END IF;

    -- For Rule Groups
    IF (l_rule_groups_b_counter > 1) THEN
      l_raise_business_event := OKL_API.G_FALSE;
      l_business_event_name := NULL;
      l_curr_pos := 'okl_copy_lease_contract:63';

      FOR i IN l_rid_tab.first..l_rid_tab.last
      LOOP

        l_terms_id := NULL;
        IF(l_rrgd_code_tab(i) = 'LAAFLG' AND l_rchr_id_tab(i) IS NOT NULL)
        THEN
          -- raise business event for the Liens and Title for Terms and Conditions for the Contract
          l_raise_business_event := OKL_API.G_TRUE;
          l_business_event_name := G_WF_EVT_CONTRACT_TERM_UPDATED;
          l_terms_id := find_tid_mapping_id(l_rrgd_code_tab(i));
          IF(l_terms_id IS NOT NULL)THEN
            wf_event.AddParameterToList(G_WF_ITM_TERMS_ID, l_terms_id, l_parameter_list);
          END IF;
        ELSIF(l_rrgd_code_tab(i) = 'LAAFLG' AND l_rcle_id_tab(i) IS NOT NULL)
        THEN
          --raise business event for Liens Title and Registration for the Assets
          l_raise_business_event := OKL_API.G_TRUE;
          l_business_event_name := G_WF_EVT_ASSET_FILING_UPDATED;
          wf_event.AddParameterToList(G_WF_ITM_ASSET_ID, l_rcle_id_tab(i), l_parameter_list);
        ELSIF(l_rrgd_code_tab(i) = 'LAASTX' AND l_rcle_id_tab(i) IS NOT NULL)
        THEN
          -- raise business event for tax, property tax updated.
          l_raise_business_event := OKL_API.G_TRUE;
          l_business_event_name := G_WF_EVT_ASSET_PROPTAX_UPDATED;
          wf_event.AddParameterToList(G_WF_ITM_ASSET_ID, l_rcle_id_tab(i), l_parameter_list);
        ELSIF(l_rrgd_code_tab(i) = 'LAPSTH' AND l_rcle_id_tab(i) IS NOT NULL)
        THEN
          l_line_style := find_sid_mapping_id(l_rcle_id_tab(i));
          -- raise business event for service line update passthru
          IF(l_line_style IS NOT NULL AND l_line_style = 48)THEN
            l_raise_business_event := OKL_API.G_TRUE;
            l_business_event_name := G_WF_EVT_SERV_PASS_UPDATED;
            wf_event.AddParameterToList(G_WF_ITM_SERV_LINE_ID, l_rcle_id_tab(i), l_parameter_list);
            -- check if the service line in context has a service contract associated with it
            -- if so, pass the service contract id and service contract line id as parameters
            IF (NOT(l_queried)) THEN
              OPEN c29(l_copied_id);
              LOOP
                FETCH c29 bulk collect INTO
                l_s2cle_id_tab, l_s2object1_id1_tab;
                EXIT WHEN l_s2cle_id_tab.COUNT = 0;
                FOR j IN l_s2cle_id_tab.first..l_s2cle_id_tab.last
                LOOP
                  -- Store cle_id and object1_id1 for business function only
                  l_ssid_mapping_tab(l_ssid_counter).cle_id := l_s2cle_id_tab(j);
                  l_ssid_mapping_tab(l_ssid_counter).object1_id1 := l_s2object1_id1_tab(j);
                  l_ssid_counter := l_ssid_counter + 1;
                END LOOP;
              END LOOP;
              CLOSE c29;
              sort_ssid_mapping_tab;
              l_queried := TRUE;
            END IF;
            l_service_top_line_id := find_ssid_mapping_id(l_rcle_id_tab(i));
            IF(l_service_top_line_id IS NOT NULL)THEN
              l_serv_contract_id := l_copied_id;
              wf_event.AddParameterToList(G_WF_ITM_SERV_CHR_ID, l_serv_contract_id, l_parameter_list);
              wf_event.AddParameterToList(G_WF_ITM_SERV_CLE_ID, l_service_top_line_id, l_parameter_list);
            END IF;
          -- raise the business event for update passthrough for Fee Line
          ELSIF(l_line_style IS NOT NULL AND l_line_style = 52)THEN
            l_raise_business_event := OKL_API.G_TRUE;
            l_business_event_name := G_WF_EVT_FEE_PASS_UPDATED;
            wf_event.AddParameterToList(G_WF_ITM_FEE_LINE_ID, l_rcle_id_tab(i), l_parameter_list);
          END IF;
        ELSIF(l_rrgd_code_tab(i) = 'LAFEXP' AND l_rcle_id_tab(i) IS NOT NULL)
        THEN
          l_line_style := find_sid_mapping_id(l_rcle_id_tab(i));
          /*OPEN get_line_style(p_line_id);
          FETCH get_line_style INTO l_line_style;
          CLOSE get_line_style;*/
          -- raise business event for service line update expense
          IF(l_line_style IS NOT NULL AND l_line_style = 48)THEN
            l_raise_business_event := OKL_API.G_TRUE;
            l_business_event_name := G_WF_EVT_SERV_FEXP_UPDATED;
            wf_event.AddParameterToList(G_WF_ITM_SERV_LINE_ID, l_rcle_id_tab(i), l_parameter_list);
            -- check if the service line in context has a service contract associated with it
            -- if so, pass the service contract id and service contract line id as parameters
            /*OPEN get_serv_chr_from_serv(p_chr_id, p_line_id);
            FETCH get_serv_chr_from_serv INTO l_service_top_line_id;
            CLOSE get_serv_chr_from_serv;*/
            IF (NOT(l_queried)) THEN
              OPEN c29(l_copied_id);
              LOOP
                FETCH c29 bulk collect INTO
                l_s2cle_id_tab, l_s2object1_id1_tab;
                EXIT WHEN l_s2cle_id_tab.COUNT = 0;
                FOR j IN l_s2cle_id_tab.first..l_s2cle_id_tab.last
                LOOP
                  -- Store cle_id and object1_id1 for business function only
                  l_ssid_mapping_tab(l_ssid_counter).cle_id := l_s2cle_id_tab(j);
                  l_ssid_mapping_tab(l_ssid_counter).object1_id1 := l_s2object1_id1_tab(j);
                  l_ssid_counter := l_ssid_counter + 1;
                END LOOP;
              END LOOP;
              CLOSE c29;
              sort_ssid_mapping_tab;
              l_queried := TRUE;
            END IF;
            l_service_top_line_id := find_ssid_mapping_id(l_rcle_id_tab(i));
            IF(l_service_top_line_id IS NOT NULL)THEN
              /*OPEN get_serv_cle_from_serv(l_service_top_line_id);
              FETCH get_serv_cle_from_serv INTO l_serv_contract_id;
              CLOSE get_serv_cle_from_serv; */
              l_serv_contract_id := l_copied_id;
              wf_event.AddParameterToList(G_WF_ITM_SERV_CHR_ID, l_serv_contract_id, l_parameter_list);
              wf_event.AddParameterToList(G_WF_ITM_SERV_CLE_ID, l_service_top_line_id, l_parameter_list);
            END IF;
          ELSIF(l_line_style IS NOT NULL AND l_line_style = 52)THEN
            l_raise_business_event := OKL_API.G_TRUE;
            l_business_event_name := G_WF_EVT_FEE_EXP_UPDATED;
            wf_event.AddParameterToList(G_WF_ITM_FEE_LINE_ID, l_rcle_id_tab(i), l_parameter_list);
          END IF;
        END IF;

     -- check if the business event needs to be raised
      IF (l_raise_business_event = OKL_API.G_TRUE AND
          l_business_event_name IS NOT NULL )THEN
       -- since contract id is called as 'CONTRACT_ID'  for all the above events, it is being
       -- added to the parameter list here, than duplicating it in all the above if conditions

        wf_event.AddParameterToList(G_WF_ITM_CONTRACT_ID, l_copied_id, l_parameter_list);
        raise_business_event_rules
                           (p_api_version     => p_api_version,
                            p_init_msg_list   => p_init_msg_list,
                            x_return_status   => x_return_status,
                            x_msg_count       => x_msg_count,
                            x_msg_data        => x_msg_data,
                            p_event_name      => l_business_event_name,
                            p_event_param_list => l_parameter_list,
                            p_contract_process => l_contract_process
                           );
        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;

        l_raise_business_event := OKL_API.G_FALSE;
        l_business_event_name := NULL;

      END IF;

      END LOOP;
    END IF;

    -- End of business events processing

    l_curr_pos := 'okl_copy_lease_contract:64';
    OKL_API.END_ACTIVITY (x_msg_count,
                          x_msg_data );
    IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
          OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Done ' || TO_CHAR(SYSDATE,'HH24:MI:SS'));
    END IF;
     EXCEPTION
       WHEN OKL_API.G_EXCEPTION_ERROR THEN
         IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
         END IF;
         OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => l_message,
                      p_token1 => 'CONTRACT_NUMBER',
                      p_token1_value => l_contract_number);
       x_return_status := OKL_API.HANDLE_EXCEPTIONS(
                                  l_api_name,
                                  G_PKG_NAME,
                                  'OKL_API.G_RET_STS_ERROR',
                                  x_msg_count,
                                  x_msg_data,
                                  '_PVT');
       IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_curr_pos='||l_curr_pos);
       END IF;
       --print('sqlcode='||sqlcode || ':sqlerrm=' || sqlerrm);
       IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing copy_lease_contract:l_id_tab ...');
       END IF;
       FOR i IN 1..l_counter-1
       LOOP
         IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'id('||i||')='||l_id_tab(i) || ' cle_id('||i||')=' || l_cle_id_tab(i)||' orig_system_id1('||i||')='||l_orig_system_id1_tab(i));
           OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'lse_id('||i||')='||l_lse_id_tab(i) || ' name_tab('||i||')=' || l_name_tab(i));
         END IF;
       END LOOP;
       WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
         IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
         END IF;
         OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => l_message,
                      p_token1 => 'CONTRACT_NUMBER',
                      p_token1_value => l_contract_number);
       x_return_status :=OKL_API.HANDLE_EXCEPTIONS(
                                 l_api_name,
                                 G_PKG_NAME,
                                 'OKL_API.G_RET_STS_UNEXP_ERROR',
                                 x_msg_count,
                                 x_msg_data,
                                 '_PVT');
       IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_curr_pos='||l_curr_pos);
       END IF;
       --print('sqlcode='||sqlcode || ':sqlerrm=' || sqlerrm);
       IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing copy_lease_contract:l_id_tab ...');
       END IF;
       FOR i IN 1..l_counter-1
       LOOP
         IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'id('||i||')='||l_id_tab(i) || ' cle_id('||i||')=' || l_cle_id_tab(i)||' orig_system_id1('||i||')='||l_orig_system_id1_tab(i));
           OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'lse_id('||i||')='||l_lse_id_tab(i) || ' name_tab('||i||')=' || l_name_tab(i));
         END IF;
       END LOOP;
       WHEN OTHERS THEN
         IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'sqlcode=' || SQLCODE || ':sqlerrm=' || SQLERRM);
         END IF;
         OKL_API.set_message(p_app_name => 'OKL',
                      p_msg_name => l_message,
                      p_token1 => 'CONTRACT_NUMBER',
                      p_token1_value => l_contract_number);
       x_return_status :=OKL_API.HANDLE_EXCEPTIONS(
                                 l_api_name,
                                 G_PKG_NAME,
                                 'OTHERS',
                                 x_msg_count,
                                 x_msg_data,
                                 '_PVT');
       IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'l_curr_pos='||l_curr_pos);
       END IF;
       --print('sqlcode='||sqlcode || ':sqlerrm=' || sqlerrm);
       IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'Printing copy_lease_contract:l_id_tab ...');
       END IF;
       FOR i IN 1..l_counter-1
       LOOP
         IF (G_IS_DEBUG_STATEMENT_ON = true) THEN
                    OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'id('||i||')='||l_id_tab(i) || ' cle_id('||i||')=' || l_cle_id_tab(i)||' orig_system_id1('||i||')='||l_orig_system_id1_tab(i));
           OKL_DEBUG_PUB.LOG_DEBUG(FND_LOG.LEVEL_STATEMENT, G_MODULE,'lse_id('||i||')='||l_lse_id_tab(i) || ' name_tab('||i||')=' || l_name_tab(i));
         END IF;
       END LOOP;
END;  /* copy_lease_contract_new */

--------------------------------------------------------------------------------
-- Start of comments
--
-- Procedure Name  : copy_lease_contract
-- Description     : Copies the contract and all the lines attached to the contract
-- Business Rules  :
-- Parameters      :
-- Version         : 1.0
-- Notes           :
-- End of comments
--------------------------------------------------------------------------------
PROCEDURE copy_lease_contract(
            p_api_version              IN  NUMBER,
            p_init_msg_list            IN  VARCHAR2 DEFAULT OKL_API.G_FALSE,
            x_return_status            OUT NOCOPY VARCHAR2,
            x_msg_count                OUT NOCOPY NUMBER,
            x_msg_data                 OUT NOCOPY VARCHAR2,
            p_commit                   IN  VARCHAR2 DEFAULT 'F',
            p_chr_id                   IN  NUMBER,
            p_contract_number	       IN  VARCHAR2,
            p_contract_number_modifier IN  VARCHAR2,
            p_to_template_yn	       IN  VARCHAR2 DEFAULT 'N',
            p_renew_ref_yn             IN  VARCHAR2,
            p_copy_lines_yn            IN VARCHAR2,
            p_override_org	           IN  VARCHAR2 DEFAULT 'N',
            p_trans_type               IN  VARCHAR2,
            x_chr_id                   OUT NOCOPY NUMBER) IS

    l_api_name      CONSTANT VARCHAR2(30) := 'COPY_LEASE_CONTRACT';
    lt_klev_tbl_type         klev_tbl_type;
    ltx_klev_tbl_type        klev_tbl_type;
    i                        NUMBER := 0;

    CURSOR c_get_old_k_top_line(p_dnz_chr_id OKC_K_LINES_B.DNZ_CHR_ID%TYPE) IS
/*
    SELECT cle.id top_line
    FROM okc_subclasses_b scs,
         okc_subclass_top_line stl,
         okc_line_styles_b lse,
         okc_k_lines_b cle
    WHERE cle.dnz_chr_id = p_dnz_chr_id
    AND cle.cle_id is null
    and cle.chr_id = cle.dnz_chr_id
    AND cle.lse_id = lse.id
    AND lse.lse_parent_id is null
    AND lse.lse_type = 'TLS'
    AND lse.id = stl.lse_Id
    AND stl.scs_code = scs.code
    AND scs.cls_code = 'OKL';
*/
    SELECT cle.id top_line
    FROM okc_line_styles_b lse,
         okc_k_lines_b cle
    WHERE cle.dnz_chr_id = p_dnz_chr_id
    AND cle.cle_id is null
    and cle.chr_id = cle.dnz_chr_id
    AND cle.lse_id = lse.id
    AND lse.lse_type = 'TLS';


   --cursor to get date signed from original contract
   Cursor l_date_sig_csr(p_chr_id       IN NUMBER,
                         p_chr_number   IN VARCHAR2,
                         p_chr_modifier IN VARCHAR2)  is
   Select chr.date_signed
   From   okc_k_headers_b chr
   where
   (      (chr.id = p_chr_id and p_chr_id is not null)
   or     (p_chr_id is null and p_chr_modifier is null and p_chr_number is not null and chr.contract_number = p_chr_number )
   or     (p_chr_id is null and p_chr_modifier is not null and p_chr_number is not null and chr.contract_number_modifier = p_chr_modifier and chr.contract_number = p_chr_number)
   );

   l_date_signed date;
   l_chrv_rec OKL_OKC_MIGRATION_PVT.chrv_rec_type;
   lx_chrv_rec OKL_OKC_MIGRATION_PVT.chrv_rec_type;

   --cursor to get insurance top lines after the copy for deletion
   --Bug # 2412839 - Since copy insurance functionality is not supported at this
   -- time insurance lines will be deleted after they get copied by generic copy
   Cursor ins_top_line_csr (p_chr_id IN NUMBER) is
   select cle.id
   from   OKC_LINE_STYLES_B lse,
          OKC_K_LINES_B cle
   where  lse.lty_code       = 'INSURANCE'
   and    lse.id             = cle.lse_id
   and    lse.lse_type       = 'TLS'
   and    lse.application_id = 540
   and    cle.chr_id         = p_chr_id;

   l_ins_top_line_id   okc_k_lines_b.id%TYPE;
   --cursor to get subclass code of the copied contract
   --Bug #2555692
   Cursor l_scs_csr (p_chr_id IN NUMBER) is
   Select scs_code,
          orig_system_id1
   From   okc_k_headers_b
   where  id = p_chr_id;

   l_scs_code okc_k_headers_b.SCS_CODE%TYPE;
   l_orig_chr_id   okc_k_headers_b.ORIG_SYSTEM_ID1%TYPE;

   --Bug # 2792330 S and O
   --get the status of source contract
   Cursor l_sts_csr (pchrid in number) is
   Select sts_code
   From   OKC_K_HEADERS_B
   Where  id = pchrid;

   l_sts_code      okc_k_headers_b.STS_CODE%TYPE;
   l_quote_chr_id  okc_k_headers_b.ID%TYPE;

    --Bug# 3621663
    --cursor to get multi-gaap reporting book transaction
    cursor l_txd_csr (p_book_type_code in varchar2,
                      p_chr_id         in number) is
    select txdb.id
    from   okl_txd_assets_b txdb,
           okl_txl_assets_b txlb,
           okc_k_lines_b    cleb,
           okc_line_styles_b lseb
    where  txdb.tax_book         =  p_book_type_code
    and    txdb.tal_id           =  txlb.id
    and    txlb.kle_id           =  cleb.id
    and    cleb.lse_id           = lseb.id
    and    lseb.lty_code         = 'FIXED_ASSET'
    and    cleb.dnz_chr_id       = p_chr_id;

    l_txd_rec   l_txd_csr%ROWTYPE;

    l_adpv_tbl  OKL_TXD_ASSETS_PUB.adpv_tbl_type;

    l_rep_book_type          okl_txd_assets_b.tax_book%TYPE;
    l_rbk_cpy                varchar2(1);

   --cursor to find status of the parent contract
    cursor l_parent_sts_csr (p_chr_id in number) is
    select stsb.ste_code,
           parent_chrb.scs_code
    from   okc_statuses_b stsb,
           okc_k_headers_b parent_chrb
    where  stsb.code       = parent_chrb.sts_code
    and    parent_chrb.id  = p_chr_id;

    l_parent_sts_rec l_parent_sts_csr%ROWTYPE;
    --Bug# 3621663

    -- apaul,Bug#4381642
    lp_khrv_rec Okl_Contract_Pub.khrv_rec_type;
    lx_khrv_rec Okl_Contract_Pub.khrv_rec_type;

  BEGIN
    x_return_status      := OKL_API.G_RET_STS_SUCCESS;
    -- Call start_activity to create savepoint, check compatibility
    -- and initialize message list
    x_return_status := OKL_API.START_ACTIVITY (
                               l_api_name
                               ,p_init_msg_list
                               ,'_PVT'
                               ,x_return_status);
    -- Check if activity started successfully
    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    -- TO copy the Copy the contract first
    OKL_COPY_CONTRACT_PUB.copy_contract(p_api_version              => p_api_version,
                                        p_init_msg_list            => p_init_msg_list,
                                        x_return_status            => x_return_status,
                                        x_msg_count                => x_msg_count,
                                        x_msg_data                 => x_msg_data,
                                        p_commit                   => OKL_API.G_FALSE,
                                        p_chr_id                   => p_chr_id,
                                        p_contract_number          => p_contract_number,
                                        p_contract_number_modifier => p_contract_number_modifier,
                                        p_to_template_yn           => p_to_template_yn,
                                        p_renew_ref_yn             => p_renew_ref_yn,
                                        p_copy_lines_yn            => 'N',
                                        p_override_org             => p_override_org,
                                        x_chr_id                   => x_chr_id);

     IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
           --bug # 2518454
           --OKL_API.set_message(p_app_name => G_APP_NAME,
                               --p_msg_name => G_COPY_HEADER);
           RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
     ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
           --bug # 2518454
           --OKL_API.set_message(p_app_name => G_APP_NAME,
                               --p_msg_name => G_COPY_HEADER);
         RAISE OKL_API.G_EXCEPTION_ERROR;
     END IF;

     --to update date signed on copied chr
     Open  l_date_sig_csr(p_chr_id       => p_chr_id,
                          p_chr_number   => p_contract_number,
                          p_chr_modifier => p_contract_number_modifier);
         Fetch l_date_sig_csr into l_date_signed;
         If l_date_sig_csr%NOTFOUND Then
             Null;
         Else
             l_chrv_rec.id := x_chr_id;
             l_chrv_rec.date_signed := l_date_signed;

             OKL_OKC_MIGRATION_PVT.update_contract_header(
                     p_api_version       => p_api_version,
                     p_init_msg_list     => p_init_msg_list,
                     x_return_status     => x_return_status,
                     x_msg_count         => x_msg_count,
                     x_msg_data          => x_msg_data,
                     p_restricted_update => OKC_API.G_FALSE,
                     p_chrv_rec          => l_chrv_rec,
                     x_chrv_rec          => lx_chrv_rec);

            IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
                RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
            ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
                RAISE OKL_API.G_EXCEPTION_ERROR;
            End If;

          END IF;
    Close l_date_sig_csr;

    If nvl(p_copy_lines_yn,'N') = 'Y' Then
        -- Now the Copy the Asset lines
        i := 1;
        FOR r_get_old_k_top_line IN c_get_old_k_top_line(p_chr_id)
        LOOP
            lt_klev_tbl_type(i).id  := r_get_old_k_top_line.top_line;
            IF c_get_old_k_top_line%NOTFOUND THEN
                -- store SQL error message on message stack
                --OKL_API.set_message(p_app_name     => G_APP_NAME,
                --                    p_msg_name     => G_NO_MATCHING_RECORD,
                --                    p_token1       => G_COL_NAME_TOKEN,
                --                    p_token1_value => 'dnz_chr_id');
                --x_return_status := OKL_API.G_RET_STS_ERROR;
                --EXIT WHEN (x_return_status = OKL_API.G_RET_STS_ERROR);
                EXIT;
            END IF;
            i := i + 1;
        END LOOP;
        --IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        --  RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        --ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        --  RAISE OKL_API.G_EXCEPTION_ERROR;
        --END IF;
        If lt_klev_tbl_type.FIRST is NOT NULL Then
            --means contract has some lines then
            -- Copy all the lines for the old contract number
            OKL_COPY_ASSET_PUB.COPY_ALL_LINES(p_api_version        => p_api_version,
                                              p_init_msg_list      => p_init_msg_list,
                                              x_return_status      => x_return_status,
                                              x_msg_count          => x_msg_count,
                                              x_msg_data           => x_msg_data,
                                              p_from_cle_id_tbl    => lt_klev_tbl_type,
                                              p_to_cle_id          => null,
                                              p_to_chr_id          => x_chr_id,
                                              p_to_template_yn     => 'N',
                                              p_copy_reference     => 'COPY',
                                              p_copy_line_party_yn => 'Y',
                                              p_renew_ref_yn       => 'N',
                                              p_trans_type         => p_trans_type,
                                              x_cle_id_tbl         => ltx_klev_tbl_type);
            IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
                OKL_API.set_message(p_app_name => G_APP_NAME,
                                    p_msg_name => G_COPY_LINE);
                RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
            ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
                OKL_API.set_message(p_app_name => G_APP_NAME,
                                    p_msg_name => G_COPY_LINE);
                RAISE OKL_API.G_EXCEPTION_ERROR;
            END IF;
            --
            --Bug# 2522268 : Physically delete all the lines with source lines having
            --               abandoned status
            cleanup_abandoned_lines(p_api_version     => p_api_version,
                                    p_init_msg_list   => p_init_msg_list,
                                    x_return_status   => x_return_Status,
                                    x_msg_count       => x_msg_count,
                                    x_msg_data        => x_msg_data,
                                    p_chr_id          => x_chr_id);
            If x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR Then
                raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
            Elsif x_return_status = OKL_API.G_RET_STS_ERROR Then
                raise OKL_API.G_EXCEPTION_ERROR;
            End If;
            --
            --Bug# 2522268 End
            --
  	    --
	    --Bug# 3923883 : Physically delete all the rollover lines
            IF(p_trans_type is not null AND p_trans_type = 'CFA') THEN

	     cleanup_rollover_lines(p_api_version     => p_api_version,
                             p_init_msg_list   => p_init_msg_list,
                             x_return_status   => x_return_Status,
                             x_msg_count       => x_msg_count,
                             x_msg_data        => x_msg_data,
                             p_chr_id          => x_chr_id);
	     If x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR Then
	         raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
	     Elsif x_return_status = OKL_API.G_RET_STS_ERROR Then
	         raise OKL_API.G_EXCEPTION_ERROR;
	     End If;

	    End If;
            --
	    --Bug# 3923883 End
	    --

          End If;

    End If; -- if p_copy_lines_y_n flag
/*---------------This pushed into copy asset lines -----------------------------
        ------------------------------------------------------------------------
        --special process to change the linked line links for covered asset
        ------------------------------------------------------------------------
     Open l_lnk_csr(p_chr_id => x_chr_id);
     Loop
         Fetch l_lnk_csr into
           l_new_lnk_cle_id,
           l_orig_lnk_cle_id,
           l_new_lnk_cim_id,
           l_jtot_object1_code,
           l_object1_id1,
           l_object1_id2;

         Exit when l_lnk_csr%NOTFOUND;
         If l_jtot_object1_code in  ('OKX_COVASST', 'OKL_USAGE') And
                                    (l_object1_id1 is not null)   Then

              link_cov_asst( p_api_version      =>  p_api_version,
                             p_init_msg_list    =>  p_init_msg_list,
                             x_return_status    =>  x_return_status,
                             x_msg_count        =>  x_msg_count,
                             x_msg_data         =>  x_msg_data,
                             p_orig_lnk_cle_id  =>  l_orig_lnk_cle_id,
                             p_new_lnk_cim_id   =>  l_new_lnk_cim_id,
                             p_object_code      =>  l_jtot_object1_code,
                             p_new_chr_id       =>  x_chr_id );

              If x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR Then
                  raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
              Elsif x_return_status = OKL_API.G_RET_STS_ERROR Then
                  raise OKL_API.G_EXCEPTION_ERROR;
              End If;
         End If;
       End Loop;
       Close l_lnk_csr;
       -------------------------------------------------------------------------
       --end of special processing for fixing linked lines
       -------------------------------------------------------------------------
This pushed into copy asset lies----------------------------------------------*/
--------------------------------------------------------------------------------
  --Bug # 2337570 - TEMPLATE COPY DOES NOT DEFAULT ALL FIELDS ON HEADER
  --copy governances for master lease contract and credit line references
--------------------------------------------------------------------------------
    copy_governances(
        p_api_version    => p_api_version,
        p_init_msg_list  => p_init_msg_list,
        x_return_status  => x_return_status,
        x_msg_count      => x_msg_count,
        x_msg_data       => x_msg_data,
        p_from_chr_id    => p_chr_id,
        p_to_chr_id      => x_chr_id);

    If x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR Then
        raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    Elsif x_return_status = OKL_API.G_RET_STS_ERROR Then
        raise OKL_API.G_EXCEPTION_ERROR;
    End If;

--------------------------------------------------------------------------------
    --Bug # 2412839 - Since copy insurance functionality is not supported at this
   -- time insurance lines will be deleted after they get copied by generic copy
--------------------------------------------------------------------------------
   Open ins_top_line_csr(p_chr_id => x_chr_id);
   Loop
       Fetch ins_top_line_csr into
             l_ins_top_line_id;
       Exit when ins_top_line_csr%NotFound;
       OKL_CONTRACT_PUB.delete_contract_line(
             p_api_version    => p_api_version,
             p_init_msg_list  => p_init_msg_list,
             x_return_status  => x_return_status,
             x_msg_count      => x_msg_count,
             x_msg_data       => x_msg_data,
             p_line_id        => l_ins_top_line_id);
       If x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR Then
           raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
       Elsif x_return_status = OKL_API.G_RET_STS_ERROR Then
           raise OKL_API.G_EXCEPTION_ERROR;
       End If;
   End Loop;
   Close ins_top_line_csr;

   --Bug# 3541098 - Do not delete yields and interim interest details
   --               for a Re-book or Split contract transaction.
   --               Yields and interim interest details are to be
   --               deleted for Copy contract or Re-lease transaction.

   if p_trans_type IN ('CFA','CRL') then
     --Bug# 3159691
     delete_yields(
       p_api_version    => p_api_version,
       p_init_msg_list  => p_init_msg_list,
       x_return_status  => x_return_status,
       x_msg_count      => x_msg_count,
       x_msg_data       => x_msg_data,
       p_chr_id         => x_chr_id,
       --Bug# 3973640
       p_trans_type     => p_trans_type);
   end if;

   --Bug# 3541098 end

   If x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR Then
       raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
   Elsif x_return_status = OKL_API.G_RET_STS_ERROR Then
       raise OKL_API.G_EXCEPTION_ERROR;
   End If;

  --Start Bug# 3621663
   -----------------------------------------------------------------------------
   --delete multigaap reporting books from transaction tables after copy
   --if it is not a copy for rebook
   ---------------------------------------------------------------------------
   open l_parent_sts_csr(p_chr_id => p_chr_id);
   fetch l_parent_sts_csr into l_parent_sts_rec;
   if l_parent_sts_csr%NOTFOUND then
       null;
   end if;
   close l_parent_sts_csr;

   If nvl(l_parent_sts_rec.ste_code,OKL_API.G_MISS_CHAR) not in ('ENTERED','SIGNED')
      and nvl(l_parent_sts_rec.scs_code,OKL_API.G_MISS_CHAR) = 'LEASE'
      and nvl(p_copy_lines_yn,'N') = 'Y' then
       If nvl(p_trans_type,OKL_API.G_MISS_CHAR) not in ('CRB','CRL') then
           l_rep_book_type := OKL_SYSTEM_PARAMS_ALL_PUB.get_system_param_value(OKL_SYSTEM_PARAMS_ALL_PUB.G_RPT_PROD_BOOK_TYPE_CODE);
           i := 0;
           If nvl(l_rep_book_type,OKL_API.G_MISS_CHAR) <> OKL_API.G_MISS_CHAR then
               open l_txd_csr (p_book_type_code  => l_rep_book_type,
                               p_chr_id          => x_chr_id);
               Loop
                   fetch l_txd_csr into l_txd_rec;
                   exit when l_txd_csr%NOTFOUND;
                   i := i+1;
                   l_adpv_tbl(i).id := l_txd_rec.id;
               end Loop;
               close l_txd_csr;

               If l_adpv_tbl.COUNT <> 0 then
                   OKL_TXD_ASSETS_PUB.delete_txd_asset_Def(
                       p_api_version         => p_api_version,
                       p_init_msg_list       => p_init_msg_list,
                       x_return_status       => x_return_status,
                       x_msg_count           => x_msg_count,
                       x_msg_data            => x_msg_data,
                       p_adpv_tbl            => l_adpv_tbl);
                   If x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR Then
                       raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
                   Elsif x_return_status = OKL_API.G_RET_STS_ERROR Then
                       raise OKL_API.G_EXCEPTION_ERROR;
                   End If;
               End If;
           End If;
        End If;
   End If;
   --End Bug Fix 3621663

   --Start Bug# 2555692
   -----------------------------------------------------------------------------
   --reset the contract status to 'NEW' for 'LEASE' and 'QUOTE'
   -----------------------------------------------------------------------------
   Open l_scs_csr(p_chr_id => x_chr_id);
   Fetch l_scs_csr into l_scs_code,l_orig_chr_id;
   If l_scs_csr%NOTFOUND Then
       null;
   Else
      --Bug # 2792330 : Enhancement for S and O for 'QUOTE' status
      --If l_scs_code in ('LEASE','QUOTE') Then
      If l_scs_code  = 'LEASE'  Then
          reset_contract_status
               (p_api_version   => p_api_version,
                p_init_msg_list => p_init_msg_list,
                x_return_status => x_return_status,
                x_msg_count     => x_msg_count,
                x_msg_data      => x_msg_data,
                p_chr_id        => x_chr_id,
                p_status        => 'NEW',
                p_cascade_lines => p_copy_lines_yn);

           If x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR Then
               raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
           Elsif x_return_status = OKL_API.G_RET_STS_ERROR Then
               raise OKL_API.G_EXCEPTION_ERROR;
           End If;

	   -- apaul,Bug#4381642
	   -- Reset Securitized Flag
	    l_chrv_rec.id := x_chr_id;
	    lp_khrv_rec.id := x_chr_id;
	    lp_khrv_rec.SECURITIZED_CODE := NULL;

	    Okl_Contract_Pub.update_contract_header(
	      p_api_version   => p_api_version,
	      p_init_msg_list => p_init_msg_list,
	      x_return_status => x_return_status,
	      x_msg_count     => x_msg_count,
	      x_msg_data      => x_msg_data,
	      p_chrv_rec      => l_chrv_rec,
	      p_khrv_rec      => lp_khrv_rec,
	      x_chrv_rec      => lx_chrv_rec,
	      x_khrv_rec      => lx_khrv_rec);

	     IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
	       RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
	     ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
	       RAISE OKL_API.G_EXCEPTION_ERROR;
	     END IF;
	   -- END,apaul,Bug#4381642

       ElsIf l_scs_code = 'QUOTE' Then

           Open l_sts_csr(pchrid => l_orig_chr_id);
           Fetch l_sts_csr into l_sts_code;
           If l_sts_csr%NOTFOUND then
               l_sts_code := 'INCOMPLETE';
           End If;
           Close l_sts_csr;

           If l_sts_code = 'NEW' Then
               l_sts_code := 'NEW';
           Else
              l_sts_code := 'INCOMPLETE';
           End If;

           reset_contract_status
               (p_api_version   => p_api_version,
                p_init_msg_list => p_init_msg_list,
                x_return_status => x_return_status,
                x_msg_count     => x_msg_count,
                x_msg_data      => x_msg_data,
                p_chr_id        => x_chr_id,
                p_status        => l_sts_code,
                p_cascade_lines => p_copy_lines_yn);

           If x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR Then
               raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
           Elsif x_return_status = OKL_API.G_RET_STS_ERROR Then
               raise OKL_API.G_EXCEPTION_ERROR;
           End If;

           /*----Bug# 5591688 : Commenting as okl_quote_plans_pvt is stubbed in R12
           -- quotes are no longer copied using copy contract
           --call quote API for modification of plan structure
           OKL_QUOTE_PLANS_PVT.modify_quote_structure
                                   ( p_api_version         => p_api_version,
                                     p_init_msg_list       => p_init_msg_list,
                                     --Bug# 3143522
                                     p_transaction_control => OKL_API.G_FALSE,
                                     p_chr_id              => x_chr_id,
                                     p_modify_reason_code  => 'COPY_QUOTE',
                                     x_chr_id              => l_quote_chr_id,
                                     x_return_status       => x_return_status,
                                     x_msg_count           => x_msg_count,
                                     x_msg_data            => x_msg_data);

           If x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR Then
               raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
           Elsif x_return_status = OKL_API.G_RET_STS_ERROR Then
               raise OKL_API.G_EXCEPTION_ERROR;
           End If;
           ------------------------End of commented code----------*/

       End If;
   End If;
   Close l_scs_csr;
   -----------------------------------------------------------------------------
   --End of resetting the copied contract status to new
   -----------------------------------------------------------------------------
   --End Bug# 2555692
   OKL_API.END_ACTIVITY (x_msg_count,
                          x_msg_data );
  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN
    x_return_status := OKL_API.HANDLE_EXCEPTIONS(
                               l_api_name,
                               G_PKG_NAME,
                               'OKL_API.G_RET_STS_ERROR',
                               x_msg_count,
                               x_msg_data,
                               '_PVT');
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
    x_return_status :=OKL_API.HANDLE_EXCEPTIONS(
                              l_api_name,
                              G_PKG_NAME,
                              'OKL_API.G_RET_STS_UNEXP_ERROR',
                              x_msg_count,
                              x_msg_data,
                              '_PVT');
    WHEN OTHERS THEN
    x_return_status :=OKL_API.HANDLE_EXCEPTIONS(
                              l_api_name,
                              G_PKG_NAME,
                              'OTHERS',
                              x_msg_count,
                              x_msg_data,
                              '_PVT');
  END copy_lease_contract;

End okl_copy_contract_Pvt;

/
