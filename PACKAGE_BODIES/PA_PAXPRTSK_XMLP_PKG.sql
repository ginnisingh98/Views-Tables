--------------------------------------------------------
--  DDL for Package Body PA_PAXPRTSK_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PA_PAXPRTSK_XMLP_PKG" AS
/* $Header: PAXPRTSKB.pls 120.0 2008/01/02 11:52:10 krreddy noship $ */
  FUNCTION GET_COVER_PAGE_VALUES RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COVER_PAGE_VALUES;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      INIT_FAILURE EXCEPTION;
      P_NAME VARCHAR2(30);
      P_NUMBER VARCHAR2(30);
      P_TASK_ID NUMBER(15);
      P_TASK_NAME VARCHAR2(30);
      P_TASK_NUMBER VARCHAR2(30);
      DISP_SUBTASKS VARCHAR2(40);
      DISP_ST_DETAILS VARCHAR2(40);
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      C_TOP_TASK_ID := TOP_TASK_ID;
      C_DISPLAY_SUBTASKS := NVL(DISPLAY_SUBTASKS,'Y');
      C_DISPLAY_SUBTASK_DETAILS := NVL(DISPLAY_SUBTASK_DETAILS,'Y');
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
      SELECT
        DECODE(PA_INSTALL.IS_BILLING_LICENSED
              ,'Y'
              ,'N'
              ,'Y')
      INTO P_COSTING
      FROM
        DUAL;
      P_RULE_OPTIMIZER := FND_PROFILE.VALUE('PA_RULE_BASED_OPTIMIZER');
      IF P_RULE_OPTIMIZER = 'Y' THEN
        EXECUTE IMMEDIATE
          'ALTER SESSION SET OPTIMIZER_GOAL = RULE';
      END IF;
      P_DEBUG_MODE := FND_PROFILE.VALUE('PA_DEBUG_MODE');
      SELECT
        NAME,
        SEGMENT1
      INTO P_NAME,P_NUMBER
      FROM
        PA_PROJECTS
      WHERE PROJECT_ID = PROJ;
      C_PROJECT_NAME := P_NAME;
      C_PROJECT_NUMBER := P_NUMBER;
      IF C_TOP_TASK_ID IS NOT NULL THEN
        SELECT
          T.TASK_ID
        INTO P_TASK_ID
        FROM
          PA_TASKS T
        WHERE PROJECT_ID = PROJ
          AND DECODE(C_TOP_TASK_ID
              ,''
              ,T.PARENT_TASK_ID
              ,'All'
              ,T.PARENT_TASK_ID
              ,NULL) is null
          AND DECODE(C_TOP_TASK_ID
              ,''
              ,T.TASK_ID
              ,'All'
              ,T.TASK_ID
              ,C_TOP_TASK_ID) = T.TASK_ID;
      END IF;
      C_TASK_ID := P_TASK_ID;
      IF C_DISPLAY_SUBTASKS IS NOT NULL THEN
        SELECT
          SUBSTR(MEANING
                ,1
                ,40)
        INTO DISP_SUBTASKS
        FROM
          FND_LOOKUPS
        WHERE LOOKUP_CODE = C_DISPLAY_SUBTASKS
          AND LOOKUP_TYPE = 'YES_NO';
      END IF;
      C_DISPLAY_SUB := DISP_SUBTASKS;
      IF C_DISPLAY_SUBTASKS IS NOT NULL THEN
        SELECT
          SUBSTR(MEANING
                ,1
                ,40)
        INTO DISP_ST_DETAILS
        FROM
          FND_LOOKUPS
        WHERE LOOKUP_CODE = C_DISPLAY_SUBTASK_DETAILS
          AND LOOKUP_TYPE = 'YES_NO';
      END IF;
      C_DISPLAY_ST_DET := DISP_ST_DETAILS;
      IF C_TOP_TASK_ID IS NOT NULL THEN
        SELECT
          TASK_NAME,
          TASK_NUMBER
        INTO P_TASK_NAME,P_TASK_NUMBER
        FROM
          PA_TASKS
        WHERE TASK_ID = C_TOP_TASK_ID;
        C_TASK_NAME := P_TASK_NAME;
        C_TASK_NUMBER := P_TASK_NUMBER;
      END IF;
      IF (GET_COMPANY_NAME <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (NO_DATA_FOUND_FUNC <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        IF (NO_DATA_FOUND_FUNC <> TRUE) THEN
          RAISE INIT_FAILURE;
        END IF;
      WHEN OTHERS THEN
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,NULL);
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION GET_COMPANY_NAME RETURN BOOLEAN IS
    L_NAME GL_SETS_OF_BOOKS.NAME%TYPE;
  BEGIN
    SELECT
      GL.NAME
    INTO L_NAME
    FROM
      GL_SETS_OF_BOOKS GL,
      PA_IMPLEMENTATIONS PI
    WHERE GL.SET_OF_BOOKS_ID = PI.SET_OF_BOOKS_ID;
    C_COMPANY_NAME_HEADER := L_NAME;
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COMPANY_NAME;

  FUNCTION NO_DATA_FOUND_FUNC RETURN BOOLEAN IS
    MESSAGE_NAME VARCHAR2(80);
  BEGIN
    SELECT
      MEANING
    INTO MESSAGE_NAME
    FROM
      PA_LOOKUPS
    WHERE LOOKUP_TYPE = 'MESSAGE'
      AND LOOKUP_CODE = 'NO_DATA_FOUND';
    C_NO_DATA_FOUND := SUBSTR(MESSAGE_NAME,4,14);
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END NO_DATA_FOUND_FUNC;

  FUNCTION G_PARENTGROUPFILTER RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END G_PARENTGROUPFILTER;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    END;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION G_SUBTASK_DETAILGROUPFILTER(DIRECT IN VARCHAR2) RETURN BOOLEAN IS
  BEGIN
    IF P_COSTING = 'Y' OR DIRECT = 'N' THEN
      RETURN (FALSE);
    ELSE
      RETURN (TRUE);
    END IF;
    RETURN (TRUE);
  END G_SUBTASK_DETAILGROUPFILTER;

  FUNCTION G_JOB_BILL_RATESGROUPFILTER(DIRECT IN VARCHAR2) RETURN BOOLEAN IS
  BEGIN
    IF P_COSTING = 'Y' OR DIRECT = 'N' THEN
      RETURN (FALSE);
    ELSE
      RETURN (TRUE);
    END IF;
    RETURN (TRUE);
  END G_JOB_BILL_RATESGROUPFILTER;

  FUNCTION G_JOB_TITLE_ORGROUPFILTER(DIRECT IN VARCHAR2) RETURN BOOLEAN IS
  BEGIN
    IF P_COSTING = 'Y' OR DIRECT = 'N' THEN
      RETURN (FALSE);
    ELSE
      RETURN (TRUE);
    END IF;
    RETURN (TRUE);
  END G_JOB_TITLE_ORGROUPFILTER;

  FUNCTION G_JOB_ASSGN_ORGROUPFILTER(DIRECT IN VARCHAR2) RETURN BOOLEAN IS
  BEGIN
    IF P_COSTING = 'Y' OR DIRECT = 'N' THEN
      RETURN (FALSE);
    ELSE
      RETURN (TRUE);
    END IF;
    RETURN (TRUE);
  END G_JOB_ASSGN_ORGROUPFILTER;

  FUNCTION G_LABOR_MULTGROUPFILTER(DIRECT IN VARCHAR2) RETURN BOOLEAN IS
  BEGIN
    IF P_COSTING = 'Y' OR DIRECT = 'N' THEN
      RETURN (FALSE);
    ELSE
      RETURN (TRUE);
    END IF;
    RETURN (TRUE);
  END G_LABOR_MULTGROUPFILTER;

  FUNCTION G_NL_BILL_RATESGROUPFILTER(DIRECT IN VARCHAR2) RETURN BOOLEAN IS
  BEGIN
    IF P_COSTING = 'Y' OR DIRECT = 'N' THEN
      RETURN (FALSE);
    ELSE
      RETURN (TRUE);
    END IF;
    RETURN (TRUE);
  END G_NL_BILL_RATESGROUPFILTER;

  FUNCTION G_EMP_BILL_RATESGROUPFILTER(DIRECT IN VARCHAR2) RETURN BOOLEAN IS
  BEGIN
    IF P_COSTING = 'Y' OR DIRECT = 'N' THEN
      RETURN (FALSE);
    ELSE
      RETURN (TRUE);
    END IF;
    RETURN (TRUE);
  END G_EMP_BILL_RATESGROUPFILTER;

  FUNCTION CF_JOB_REASONFORMULA(JOB_DISC_REASON IN VARCHAR2) RETURN CHAR IS
    L_REASON PA_LOOKUPS.MEANING%TYPE;
  BEGIN
    SELECT
      MEANING
    INTO L_REASON
    FROM
      PA_LOOKUPS
    WHERE LOOKUP_TYPE = 'RATE AND DISCOUNT REASON'
      AND LOOKUP_CODE = JOB_DISC_REASON;
    RETURN (L_REASON);
  EXCEPTION
    WHEN OTHERS THEN
      L_REASON := NULL;
      RETURN (L_REASON);
  END CF_JOB_REASONFORMULA;

  FUNCTION CF_NL_REASONFORMULA(NL_DISC_REASON IN VARCHAR2) RETURN CHAR IS
    L_REASON PA_LOOKUPS.MEANING%TYPE;
  BEGIN
    SELECT
      MEANING
    INTO L_REASON
    FROM
      PA_LOOKUPS
    WHERE LOOKUP_TYPE = 'RATE AND DISCOUNT REASON'
      AND LOOKUP_CODE = NL_DISC_REASON;
    RETURN (L_REASON);
  EXCEPTION
    WHEN OTHERS THEN
      L_REASON := NULL;
      RETURN (L_REASON);
  END CF_NL_REASONFORMULA;

  FUNCTION CF_EMP_REASONFORMULA(RATE_DISC_REASON_CODE IN VARCHAR2) RETURN CHAR IS
    L_REASON PA_LOOKUPS.MEANING%TYPE;
  BEGIN
    SELECT
      MEANING
    INTO L_REASON
    FROM
      PA_LOOKUPS
    WHERE LOOKUP_TYPE = 'RATE AND DISCOUNT REASON'
      AND LOOKUP_CODE = RATE_DISC_REASON_CODE;
    RETURN (L_REASON);
  EXCEPTION
    WHEN OTHERS THEN
      L_REASON := NULL;
      RETURN (L_REASON);
  END CF_EMP_REASONFORMULA;

  FUNCTION CF_REVENUE_ACCRUAL_MTHFORMULA(REVENUE_ACCRUAL_METHOD IN VARCHAR2
                                        ,PROJECT_ID1 IN NUMBER) RETURN CHAR IS
    TMP_FLAG VARCHAR2(80);
  BEGIN
    IF REVENUE_ACCRUAL_METHOD IS NOT NULL THEN
      SELECT
        MEANING
      INTO TMP_FLAG
      FROM
        PA_LOOKUPS LKP,
        PA_PROJECTS PRJ
      WHERE LKP.LOOKUP_TYPE = 'REVENUE ACCRUAL METHOD'
        AND LKP.LOOKUP_CODE = PRJ.REVENUE_ACCRUAL_METHOD
        AND PRJ.PROJECT_ID = PROJECT_ID1;
      RETURN TMP_FLAG;
    ELSE
      RETURN NULL;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      RAISE;
  END CF_REVENUE_ACCRUAL_MTHFORMULA;

  FUNCTION CF_INV_MTHFORMULA(INVOICE_METHOD IN VARCHAR2
                            ,PROJECT_ID1 IN NUMBER) RETURN CHAR IS
    TMP_FLAG VARCHAR2(80);
  BEGIN
    IF INVOICE_METHOD IS NOT NULL THEN
      SELECT
        MEANING
      INTO TMP_FLAG
      FROM
        PA_LOOKUPS LKP,
        PA_PROJECTS PRJ
      WHERE LKP.LOOKUP_TYPE = 'INVOICE METHOD'
        AND LKP.LOOKUP_CODE = PRJ.INVOICE_METHOD
        AND PRJ.PROJECT_ID = PROJECT_ID1;
      RETURN TMP_FLAG;
    ELSE
      RETURN NULL;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      RAISE;
  END CF_INV_MTHFORMULA;

  FUNCTION CF_CUSTOMER_NUMBERFORMULA(CUSTOMER_ID1 IN NUMBER
                                    ,PROJECT_ID1 IN NUMBER) RETURN CHAR IS
    TMP_FLAG VARCHAR2(80);
  BEGIN
    IF CUSTOMER_ID1 IS NOT NULL THEN
      SELECT
        CUSTOMER_NUMBER
      INTO TMP_FLAG
      FROM
        PA_PROJECT_CUSTOMERS_V
      WHERE PROJECT_ID = PROJECT_ID1
        AND CUSTOMER_ID = CUSTOMER_ID1;
      RETURN TMP_FLAG;
    ELSE
      RETURN NULL;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      RAISE;
  END CF_CUSTOMER_NUMBERFORMULA;

  FUNCTION CF_CUSTOMER_NAMEFORMULA(CUSTOMER_ID1 IN NUMBER
                                  ,PROJECT_ID1 IN NUMBER) RETURN CHAR IS
    TMP_FLAG VARCHAR2(80);
  BEGIN
    IF CUSTOMER_ID1 IS NOT NULL THEN
      SELECT
        CUSTOMER_NAME
      INTO TMP_FLAG
      FROM
        PA_PROJECT_CUSTOMERS_V
      WHERE PROJECT_ID = PROJECT_ID1
        AND CUSTOMER_ID = CUSTOMER_ID1;
      RETURN TMP_FLAG;
    ELSE
      RETURN NULL;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      RAISE;
  END CF_CUSTOMER_NAMEFORMULA;

  FUNCTION C_COMPANY_NAME_HEADER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COMPANY_NAME_HEADER;
  END C_COMPANY_NAME_HEADER_P;

  FUNCTION C_PROJECT_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_PROJECT_NAME;
  END C_PROJECT_NAME_P;

  FUNCTION C_PROJECT_NUMBER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_PROJECT_NUMBER;
  END C_PROJECT_NUMBER_P;

  FUNCTION C_NO_DATA_FOUND_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NO_DATA_FOUND;
  END C_NO_DATA_FOUND_P;

  FUNCTION C_TASK_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_TASK_ID;
  END C_TASK_ID_P;

  FUNCTION C_TASK_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_TASK_NAME;
  END C_TASK_NAME_P;

  FUNCTION C_TASK_NUMBER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_TASK_NUMBER;
  END C_TASK_NUMBER_P;

  FUNCTION C_DISPLAY_ST_DET_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_DISPLAY_ST_DET;
  END C_DISPLAY_ST_DET_P;

  FUNCTION C_DISPLAY_SUB_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_DISPLAY_SUB;
  END C_DISPLAY_SUB_P;

  FUNCTION GET_CURRENCY_CODE RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
   /* STPROC.INIT('begin :X0 := PA_CURRENCY.GET_CURRENCY_CODE; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;*/
    RETURN NULL;
  END GET_CURRENCY_CODE;

  FUNCTION ROUND_CURRENCY_AMT(X_AMOUNT IN NUMBER) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
   /* STPROC.INIT('begin :X0 := PA_CURRENCY.ROUND_CURRENCY_AMT(:X_AMOUNT); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(X_AMOUNT);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;*/
    RETURN NULL;
  END ROUND_CURRENCY_AMT;

  FUNCTION CURRENCY_FMT_MASK(X_LENGTH IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
   /* STPROC.INIT('begin :X0 := PA_CURRENCY.CURRENCY_FMT_MASK(:X_LENGTH); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(X_LENGTH);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;*/
     RETURN NULL;
  END CURRENCY_FMT_MASK;

  FUNCTION RPT_CURRENCY_FMT_MASK(X_ORG_ID IN NUMBER
                                ,X_LENGTH IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := PA_CURRENCY.RPT_CURRENCY_FMT_MASK(:X_ORG_ID, :X_LENGTH); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(X_ORG_ID);
    STPROC.BIND_I(X_LENGTH);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;*/
     RETURN NULL;
  END RPT_CURRENCY_FMT_MASK;

END PA_PAXPRTSK_XMLP_PKG;


/
