--------------------------------------------------------
--  DDL for Package Body DPP_BPEL_GETPROMOS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."DPP_BPEL_GETPROMOS" AS
/* $Header: dppvbunb.pls 120.1 2007/12/12 06:04:19 sdasan noship $ */
	FUNCTION PL_TO_SQL16(aPlsqlItem DPP_PRICING_PVT.DPP_PL_NOTIFY_REC_TYPE)
 	RETURN DPP_PRICING_PVT_DPP_PL_NOTI14 IS
	aSqlItem DPP_PRICING_PVT_DPP_PL_NOTI14;
	BEGIN
		-- initialize the object
		aSqlItem := DPP_PRICING_PVT_DPP_PL_NOTI14(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
		aSqlItem.PP_TRANSACTION_NO := aPlsqlItem.PP_TRANSACTION_NO;
		aSqlItem.EFFECTIVITY_DATE := aPlsqlItem.EFFECTIVITY_DATE;
		aSqlItem.ORG_ID := aPlsqlItem.ORG_ID;
		aSqlItem.VENDOR_ID := aPlsqlItem.VENDOR_ID;
		aSqlItem.VENDOR_SITE_ID := aPlsqlItem.VENDOR_SITE_ID;
		aSqlItem.VENDOR_NUMBER := aPlsqlItem.VENDOR_NUMBER;
		aSqlItem.VENDOR_NAME := aPlsqlItem.VENDOR_NAME;
		aSqlItem.VENDOR_SITE_CODE := aPlsqlItem.VENDOR_SITE_CODE;
		aSqlItem.OPERATING_UNIT := aPlsqlItem.OPERATING_UNIT;
		RETURN aSqlItem;
	END PL_TO_SQL16;
	FUNCTION SQL_TO_PL16(aSqlItem DPP_PRICING_PVT_DPP_PL_NOTI14)
	RETURN DPP_PRICING_PVT.DPP_PL_NOTIFY_REC_TYPE IS
	aPlsqlItem DPP_PRICING_PVT.DPP_PL_NOTIFY_REC_TYPE;
	BEGIN
		aPlsqlItem.PP_TRANSACTION_NO := aSqlItem.PP_TRANSACTION_NO;
		aPlsqlItem.EFFECTIVITY_DATE := aSqlItem.EFFECTIVITY_DATE;
		aPlsqlItem.ORG_ID := aSqlItem.ORG_ID;
		aPlsqlItem.VENDOR_ID := aSqlItem.VENDOR_ID;
		aPlsqlItem.VENDOR_SITE_ID := aSqlItem.VENDOR_SITE_ID;
		aPlsqlItem.VENDOR_NUMBER := aSqlItem.VENDOR_NUMBER;
		aPlsqlItem.VENDOR_NAME := aSqlItem.VENDOR_NAME;
		aPlsqlItem.VENDOR_SITE_CODE := aSqlItem.VENDOR_SITE_CODE;
		aPlsqlItem.OPERATING_UNIT := aSqlItem.OPERATING_UNIT;
		RETURN aPlsqlItem;
	END SQL_TO_PL16;
	FUNCTION PL_TO_SQL18(aPlsqlItem DPP_PRICING_PVT.DPP_OBJECT_NAME_TBL_TYPE)
 	RETURN DPPPRICINGPVTDPPPLNOTI16_DPP_ IS
	aSqlItem DPPPRICINGPVTDPPPLNOTI16_DPP_;
	BEGIN
		-- initialize the table
		aSqlItem := DPPPRICINGPVTDPPPLNOTI16_DPP_();
		aSqlItem.EXTEND(aPlsqlItem.COUNT);
		FOR I IN aPlsqlItem.FIRST..aPlsqlItem.LAST LOOP
			aSqlItem(I + 1 - aPlsqlItem.FIRST) := aPlsqlItem(I);
		END LOOP;
		RETURN aSqlItem;
	END PL_TO_SQL18;
	FUNCTION SQL_TO_PL18(aSqlItem DPPPRICINGPVTDPPPLNOTI16_DPP_)
	RETURN DPP_PRICING_PVT.DPP_OBJECT_NAME_TBL_TYPE IS
	aPlsqlItem DPP_PRICING_PVT.DPP_OBJECT_NAME_TBL_TYPE;
	BEGIN
		FOR I IN 1..aSqlItem.COUNT LOOP
			aPlsqlItem(I) := aSqlItem(I);
		END LOOP;
		RETURN aPlsqlItem;
	END SQL_TO_PL18;
	FUNCTION PL_TO_SQL19(aPlsqlItem DPP_PRICING_PVT.DPP_PL_NOTIFY_LINE_REC_TYPE)
 	RETURN DPP_PRICING_PVT_DPP_PL_NOTI16 IS
	aSqlItem DPP_PRICING_PVT_DPP_PL_NOTI16;
	BEGIN
		-- initialize the object
		aSqlItem := DPP_PRICING_PVT_DPP_PL_NOTI16(NULL, NULL, NULL, NULL, NULL);
		aSqlItem.INVENTORY_ITEM_ID := aPlsqlItem.INVENTORY_ITEM_ID;
		aSqlItem.ITEM_NUMBER := aPlsqlItem.ITEM_NUMBER;
		aSqlItem.OBJECT_NAME_TBL := PL_TO_SQL18(aPlsqlItem.OBJECT_NAME_TBL);
		aSqlItem.NEW_PRICE := aPlsqlItem.NEW_PRICE;
		aSqlItem.CURRENCY_CODE := aPlsqlItem.CURRENCY_CODE;
		RETURN aSqlItem;
	END PL_TO_SQL19;
	FUNCTION SQL_TO_PL19(aSqlItem DPP_PRICING_PVT_DPP_PL_NOTI16)
	RETURN DPP_PRICING_PVT.DPP_PL_NOTIFY_LINE_REC_TYPE IS
	aPlsqlItem DPP_PRICING_PVT.DPP_PL_NOTIFY_LINE_REC_TYPE;
	BEGIN
		aPlsqlItem.INVENTORY_ITEM_ID := aSqlItem.INVENTORY_ITEM_ID;
		aPlsqlItem.ITEM_NUMBER := aSqlItem.ITEM_NUMBER;
		aPlsqlItem.OBJECT_NAME_TBL := SQL_TO_PL18(aSqlItem.OBJECT_NAME_TBL);
		aPlsqlItem.NEW_PRICE := aSqlItem.NEW_PRICE;
		aPlsqlItem.CURRENCY_CODE := aSqlItem.CURRENCY_CODE;
		RETURN aPlsqlItem;
	END SQL_TO_PL19;
	FUNCTION PL_TO_SQL17(aPlsqlItem DPP_PRICING_PVT.DPP_PL_NOTIFY_LINE_TBL_TYPE)
 	RETURN DPP_PRICING_PVT_DPP_PL_NOTI15 IS
	aSqlItem DPP_PRICING_PVT_DPP_PL_NOTI15;
	BEGIN
		-- initialize the table
		aSqlItem := DPP_PRICING_PVT_DPP_PL_NOTI15();
		aSqlItem.EXTEND(aPlsqlItem.COUNT);
		FOR I IN aPlsqlItem.FIRST..aPlsqlItem.LAST LOOP
			aSqlItem(I + 1 - aPlsqlItem.FIRST) := PL_TO_SQL19(aPlsqlItem(I));
		END LOOP;
		RETURN aSqlItem;
	END PL_TO_SQL17;
	FUNCTION SQL_TO_PL17(aSqlItem DPP_PRICING_PVT_DPP_PL_NOTI15)
	RETURN DPP_PRICING_PVT.DPP_PL_NOTIFY_LINE_TBL_TYPE IS
	aPlsqlItem DPP_PRICING_PVT.DPP_PL_NOTIFY_LINE_TBL_TYPE;
	BEGIN
		FOR I IN 1..aSqlItem.COUNT LOOP
			aPlsqlItem(I) := SQL_TO_PL19(aSqlItem(I));
		END LOOP;
		RETURN aPlsqlItem;
	END SQL_TO_PL17;

   PROCEDURE DPP_PRICING_PVT$NOTIFY_PROMOT (P_API_VERSION NUMBER,P_INIT_MSG_LIST VARCHAR2,P_COMMIT VARCHAR2,P_VALIDATION_LEVEL NUMBER,
   X_RETURN_STATUS OUT NOCOPY VARCHAR2,X_MSG_COUNT OUT NOCOPY NUMBER,X_MSG_DATA OUT NOCOPY VARCHAR2,
   P_PL_NOTIFY_HDR_REC IN OUT NOCOPY DPP_PRICING_PVT_DPP_PL_NOTI14,P_PL_NOTIFY_LINE_TBL IN OUT NOCOPY DPP_PRICING_PVT_DPP_PL_NOTI15) IS
      P_PL_NOTIFY_HDR_REC_ APPS.DPP_PRICING_PVT.DPP_PL_NOTIFY_REC_TYPE;
      P_PL_NOTIFY_LINE_TBL_ APPS.DPP_PRICING_PVT.DPP_PL_NOTIFY_LINE_TBL_TYPE;
   BEGIN
      P_PL_NOTIFY_HDR_REC_ := DPP_BPEL_GETPROMOS.SQL_TO_PL16(P_PL_NOTIFY_HDR_REC);
      P_PL_NOTIFY_LINE_TBL_ := DPP_BPEL_GETPROMOS.SQL_TO_PL17(P_PL_NOTIFY_LINE_TBL);
      APPS.DPP_PRICING_PVT.NOTIFY_PROMOTIONS(P_API_VERSION,P_INIT_MSG_LIST,P_COMMIT,P_VALIDATION_LEVEL,X_RETURN_STATUS,X_MSG_COUNT,X_MSG_DATA,P_PL_NOTIFY_HDR_REC_,P_PL_NOTIFY_LINE_TBL_);
      P_PL_NOTIFY_HDR_REC := DPP_BPEL_GETPROMOS.PL_TO_SQL16(P_PL_NOTIFY_HDR_REC_);
      P_PL_NOTIFY_LINE_TBL := DPP_BPEL_GETPROMOS.PL_TO_SQL17(P_PL_NOTIFY_LINE_TBL_);
   END DPP_PRICING_PVT$NOTIFY_PROMOT;

END DPP_BPEL_GETPROMOS;

/
