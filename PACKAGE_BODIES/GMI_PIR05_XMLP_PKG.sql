--------------------------------------------------------
--  DDL for Package Body GMI_PIR05_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."GMI_PIR05_XMLP_PKG" AS
/* $Header: PIR05B.pls 120.0 2007/12/24 13:18:43 nchinnam noship $ */
  FUNCTION WHSE_DESCFORMULA RETURN VARCHAR2 IS
    WHSE_DESC VARCHAR2(40);
  BEGIN
    SELECT
      WHSE_NAME
    INTO WHSE_DESC
    FROM
      IC_WHSE_MST
    WHERE WHSE_CODE = WHSE;
    RETURN (WHSE_DESC);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END WHSE_DESCFORMULA;
  FUNCTION AFTERPFORM RETURN BOOLEAN IS
    CURSOR CYCLE_DESC(CYCLE_ID_1 number) IS
      SELECT
        CYCLE_NO
      FROM
        IC_CYCL_HDR
      WHERE CYCLE_ID = CYCLE_ID_1;
    CURSOR CURSOR_00007(CYCLE_ID_1 number) IS
      SELECT
        MIN(COUNT_NO)
      FROM
        IC_CYCL_DTL
      WHERE CYCLE_ID = CYCLE_ID_1;
    CURSOR CURSOR_00011(CYCLE_ID_1 number) IS
      SELECT
        count(*)
      FROM
        IC_PHYS_CNT
      WHERE IC_PHYS_CNT.WHSE_CODE = WHSE
        AND IC_PHYS_CNT.CYCLE_ID = CYCLE_ID_1
        AND IC_PHYS_CNT.COUNT_NO >= FROM_COUNT
        AND IC_PHYS_CNT.COUNT_NO <= TO_COUNT
        AND IC_PHYS_CNT.CREATION_DATE <> IC_PHYS_CNT.LAST_UPDATE_DATE;
    X_MIN_COUNT NUMBER := 0;
    COUNT NUMBER;
    COUNT1 NUMBER;
    COUNT2 NUMBER;
  BEGIN
  CYCLE_ID_1:=CYCLE_ID;
    IF CYCLE_ID_1 IS NOT NULL THEN
     BEGIN
      OPEN CYCLE_DESC(CYCLE_ID_1);
      FETCH CYCLE_DESC
       INTO CYCLE;
      CLOSE CYCLE_DESC;
      Exception when others then
      raise_application_error(-20001,SQLERRM);
     END;
    END IF;
    SELECT
      PRINT_FORMAT
    INTO PRN_FOR
    FROM
      IC_CYCL_HDR
    WHERE IC_CYCL_HDR.WHSE_CODE = WHSE
      AND IC_CYCL_HDR.CYCLE_ID = CYCLE_ID_1;
    IF PRN_FOR = 0 THEN
      IF (SORT_BY = 'ITEM,LOT,LOCATION') THEN
        F_ORDER_BY := 'ITEM_NO,LOT_NO,SUBLOT_NO,LOCATION ASC';
      END IF;
      IF (SORT_BY = 'LOCATION,ITEM,LOT') THEN
        F_ORDER_BY := 'LOCATION,ITEM_NO,LOT_NO,SUBLOT_NO ASC';
      END IF;
      IF (SORT_BY = 'ITEM,LOCATION,LOT') THEN
        F_ORDER_BY := 'ITEM_NO,LOCATION,LOT_NO,SUBLOT_NO ASC';
      END IF;
      IF (SORT_BY = 'COUNT_NUMBER') THEN
        F_ORDER_BY := 'COUNT_NO,ITEM_NO,LOT_NO,SUBLOT_NO,LOCATION ASC';
      END IF;
    END IF;
    IF PRN_FOR = 2 THEN
      F_ORDER_BY := 'COUNT_NO';
    END IF;
    IF PRN_FOR = 1 THEN
      IF (SORT_BY = 'COUNT_NUMBER') THEN
        F_ORDER_BY := 'COUNT_NO,ITEM_NO,LOT_NO,SUBLOT_NO,LOCATION ASC';
      END IF;
      IF (SORT_BY = 'ITEM,LOT,LOCATION') THEN
        F_ORDER_BY := 'ITEM_NO,LOT_NO,SUBLOT_NO,LOCATION ASC';
      END IF;
      IF (SORT_BY = 'LOCATION,ITEM,LOT') THEN
        F_ORDER_BY := 'LOCATION,ITEM_NO,LOT_NO,SUBLOT_NO ASC';
      END IF;
      IF (SORT_BY = 'ITEM,LOCATION,LOT') THEN
        F_ORDER_BY := 'ITEM_NO,LOCATION,LOT_NO,SUBLOT_NO ASC';
      END IF;
    END IF;
   BEGIN
   SELECT MIN(COUNT_NO)
   INTO   X_MIN_COUNT
   FROM   IC_CYCL_DTL
   WHERE  CYCLE_ID = CYCLE_ID_1
   AND    rownum=1;
   /*
    OPEN CURSOR_00007(CYCLE_ID_1);
    FETCH CURSOR_00007
     INTO X_MIN_COUNT;
    IF (CURSOR_00007%NOTFOUND) THEN
      CLOSE CURSOR_00007;
    END IF;
    CLOSE CURSOR_00007;*/
    exception when others then
    raise_application_error(-20001,SQLERRM);
   END;
     BEGIN
     SELECT   count(*)
     INTO     COUNT2
     FROM     IC_PHYS_CNT
     WHERE IC_PHYS_CNT.WHSE_CODE = WHSE
     AND   IC_PHYS_CNT.CYCLE_ID = CYCLE_ID_1
     AND   IC_PHYS_CNT.COUNT_NO >= FROM_COUNT
     AND   IC_PHYS_CNT.COUNT_NO <= TO_COUNT
     AND   IC_PHYS_CNT.CREATION_DATE <> IC_PHYS_CNT.LAST_UPDATE_DATE
     AND   rownum=1;
/*    OPEN CURSOR_00011(CYCLE_ID_1);
    FETCH CURSOR_00011
     INTO COUNT2;
    IF COUNT2 > 0 THEN
      CLOSE CURSOR_00011;
    END IF;
    CLOSE CURSOR_00011;*/
    exception when others then
    raise_application_error(-20001,SQLERRM);
     END;
    RETURN (TRUE);
  /*EXCEPTION
    WHEN OTHERS THEN
    raise_application_error(-20001,SQLERRM);
      RETURN (false);*/
  END AFTERPFORM;
  FUNCTION CYCLE_NOFORMULA RETURN VARCHAR2 IS
    CYCLE_NO VARCHAR2(32);
  BEGIN
    SELECT
      CYCLE_NO,
      CYCLE_SOURCE
    INTO CYCLE_NO,PHYSICAL_OR_CYCLE
    FROM
      IC_CYCL_HDR
    WHERE CYCLE_ID = CYCLE_ID_1;
    RETURN (CYCLE_NO);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CYCLE_NOFORMULA;
  PROCEDURE GMI_PIR05_XMLP_PKG_HEADER IS
  BEGIN
    NULL;
  END GMI_PIR05_XMLP_PKG_HEADER;
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    RETURN (TRUE);
  END BEFOREREPORT;
  FUNCTION F_ITEMUM2FORMULA(ITEM_UM2 IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    IF ITEM_UM2 IS NOT NULL THEN
      P_ITEMUM2LABEL := 'Quantity2:';
      P_ITEMUM2DASH := '______________________';
      P_CSITEMUM2_LABEL := 'Quantity2:';
      P_CSITEMUM2_DASH := '______________________';
    ELSE
      P_ITEMUM2LABEL := '             ';
      P_ITEMUM2DASH := '               ';
      P_CSITEMUM2_LABEL := '             ';
      P_CSITEMUM2_DASH := '               ';
    END IF;
    RETURN 1;
  END F_ITEMUM2FORMULA;
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;
  FUNCTION P_ITEMUM2LABEL_P RETURN VARCHAR2 IS
  BEGIN
    RETURN P_ITEMUM2LABEL;
  END P_ITEMUM2LABEL_P;
  FUNCTION P_ITEMUM2DASH_P RETURN VARCHAR2 IS
  BEGIN
    RETURN P_ITEMUM2DASH;
  END P_ITEMUM2DASH_P;
  FUNCTION P_CSITEMUM2_LABEL_P RETURN VARCHAR2 IS
  BEGIN
    RETURN P_CSITEMUM2_LABEL;
  END P_CSITEMUM2_LABEL_P;
  FUNCTION P_CSITEMUM2_DASH_P RETURN VARCHAR2 IS
  BEGIN
    RETURN P_CSITEMUM2_DASH;
  END P_CSITEMUM2_DASH_P;
END GMI_PIR05_XMLP_PKG;


/
