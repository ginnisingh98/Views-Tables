--------------------------------------------------------
--  DDL for Package Body INV_INVMVTEX_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."INV_INVMVTEX_XMLP_PKG" AS
/* $Header: INVMVTEXB.pls 120.1 2008/02/21 11:12:47 dwkrishn noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    DECLARE
      L_RETURN_STATUS VARCHAR2(100);
      L_MSG_COUNT NUMBER;
      L_MSG_DATA VARCHAR2(1000);
      L_INIT_MSG_LIST VARCHAR2(100);
      L_TP_TYPE VARCHAR2(200);
    BEGIN
      INV_MGD_MVT_VALIDATE_PROC.VALIDATE_TRANSACTION(P_API_VERSION_NUMBER => 1
                                                    ,P_INIT_MSG_LIST => L_INIT_MSG_LIST
                                                    ,P_LEGAL_ENTITY_ID => P_LEGAL_ENTITY_ID
                                                    ,P_ECONOMIC_ZONE_CODE => P_ECONOMIC_ZONE_CODE
                                                    ,P_USAGE_TYPE => P_USAGE_TYPE
                                                    ,P_STAT_TYPE => P_STAT_TYPE
                                                    ,P_PERIOD_NAME => P_PERIOD_NAME
                                                    ,P_DOCUMENT_SOURCE_TYPE => P_DOCUMENT_SOURCE_TYPE
                                                    ,X_RETURN_STATUS => L_RETURN_STATUS
                                                    ,X_MSG_COUNT => L_MSG_COUNT
                                                    ,X_MSG_DATA => L_MSG_DATA);
      /*SRW.MESSAGE(200
                 ,' OUT INV_MGD_MVT_VALIDATE_PROC.Validate_transaction')*/NULL;
      /*SRW.MESSAGE(300
                 ,' x_return_status=' || L_RETURN_STATUS)*/NULL;
    EXCEPTION
      WHEN OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'INV_MGD_MVT_VALIDATE_PROC.Validate_transaction Unexpected Failure. Failed in BEFORE REPORT TRIGGER')*/NULL;
        RETURN (FALSE);
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Failed in AFTER REPORT TRIGGER')*/NULL;
        RETURN (FALSE);
    END;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION CF_ACTION_TEXT1FORMULA(COLUMN_NAME1 IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    IF COLUMN_NAME1 = 'COMMODITY_CODE' THEN
      FND_MESSAGE.SET_NAME('INV'
                          ,'INV_MGD_MVT_EXCP_CC_ACTION');
    ELSIF COLUMN_NAME1 = 'UNIT_WEIGHT' THEN
      FND_MESSAGE.SET_NAME('INV'
                          ,'INV_MGD_MVT_EXCP_UNW_ACTION');
    END IF;
    CP_ACTION_TEXT1 := FND_MESSAGE.GET;
    RETURN (0);
  END CF_ACTION_TEXT1FORMULA;

  FUNCTION CF_ACTION_TEXT2FORMULA RETURN NUMBER IS
  BEGIN
    FND_MESSAGE.SET_NAME('INV'
                        ,'INV_MGD_MVT_EXCP_EXR_ACTION');
    CP_ACTION_TEXT3 := FND_MESSAGE.GET;
    RETURN (0);
  END CF_ACTION_TEXT2FORMULA;

  FUNCTION CF_ACTION_TEXT4FORMULA RETURN NUMBER IS
  BEGIN
    FND_MESSAGE.SET_NAME('INV'
                        ,'INV_MGD_MVT_EXCP_VAT_ACTION');
    CP_ACTION_TEXT4 := FND_MESSAGE.GET;
    RETURN (0);
  END CF_ACTION_TEXT4FORMULA;

  --FUNCTION CF_ACTION_TEXT5FORMULA RETURN NUMBER IS
  FUNCTION CF_ACTION_TEXT5FORMULA RETURN VARCHAR2 IS
  BEGIN
    FND_MESSAGE.SET_NAME('INV'
                        ,'INV_MGD_MVT_EXCP_GEN_ACTION');
    CP_ACTION_TEXT5 := FND_MESSAGE.GET;
    --RETURN (0);
    RETURN (CP_ACTION_TEXT5);
  END CF_ACTION_TEXT5FORMULA;

  FUNCTION CF_ERROR_TEXT1FORMULA(ERROR_NAME IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    IF ERROR_NAME = 'INV_MGD_MVT_MIS_COMC' THEN
      FND_MESSAGE.SET_NAME('INV'
                          ,'INV_MGD_MVT_MIS_COMC');
    ELSIF ERROR_NAME = 'INV_MGD_MVT_MIS_UNW' THEN
      FND_MESSAGE.SET_NAME('INV'
                          ,'INV_MGD_MVT_MIS_UNW');
    END IF;
    CP_ERROR_TEXT1 := FND_MESSAGE.GET;
    RETURN (0);
  END CF_ERROR_TEXT1FORMULA;

  FUNCTION CF_ERROR_TEXT2FORMULA RETURN NUMBER IS
  BEGIN
    FND_MESSAGE.SET_NAME('INV'
                        ,'INV_MGD_MVT_MIS_UOM');
    CP_ERROR_TEXT2 := FND_MESSAGE.GET;
    RETURN (0);
  END CF_ERROR_TEXT2FORMULA;

  FUNCTION CF_ERROR_TEXT3FORMULA RETURN NUMBER IS
  BEGIN
    FND_MESSAGE.SET_NAME('INV'
                        ,'INV_MGD_MVT_MIS_EXR');
    CP_ERROR_TEXT3 := FND_MESSAGE.GET;
    RETURN (0);
  END CF_ERROR_TEXT3FORMULA;

  FUNCTION CF_ERROR_TEXT4FORMULA RETURN NUMBER IS
  BEGIN
    FND_MESSAGE.SET_NAME('INV'
                        ,'INV_MGD_MVT_MIS_TP_VAT');
    CP_ERROR_TEXT4 := FND_MESSAGE.GET;
    RETURN (0);
  END CF_ERROR_TEXT4FORMULA;

  --FUNCTION CF_ERROR_TEXT5FORMULA RETURN NUMBER IS
  FUNCTION CF_ERROR_TEXT5FORMULA RETURN VARCHAR2 IS
  BEGIN
    FND_MESSAGE.SET_NAME('INV'
                        ,'INV_MGD_MVT_INVAL_VAL');
    CP_ERROR_TEXT5 := FND_MESSAGE.GET;
    --RETURN (0);
    RETURN (CP_ERROR_TEXT5);
  END CF_ERROR_TEXT5FORMULA;

  --FUNCTION CF_ERROR_TEXT6FORMULA RETURN NUMBER IS
  FUNCTION CF_ERROR_TEXT6FORMULA RETURN VARCHAR2 IS
  BEGIN
    FND_MESSAGE.SET_NAME('INV'
                        ,'INV_MGD_MVT_MIS_INV');
    CP_ERROR_TEXT7 := FND_MESSAGE.GET;
    --RETURN (0);
    RETURN (CP_ERROR_TEXT7);
  END CF_ERROR_TEXT6FORMULA;

  FUNCTION CF_ACTION_TEXT2FORMULA0014 RETURN NUMBER IS
  BEGIN
    FND_MESSAGE.SET_NAME('INV'
                        ,'INV_MGD_MVT_EXCP_UOM_ACTION');
    CP_ACTION_TEXT2 := FND_MESSAGE.GET;
    RETURN (0);
  END CF_ACTION_TEXT2FORMULA0014;

  FUNCTION CF_GET_ZONE_NAMEFORMULA RETURN NUMBER IS
  BEGIN
    SELECT
      ZONE_DISPLAY_NAME
    INTO CP_ZONE_DISPLAY_NAME
    FROM
      MTL_ECONOMIC_ZONES_VL
    WHERE ZONE_CODE = P_ECONOMIC_ZONE_CODE;
    RETURN (0);
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END CF_GET_ZONE_NAMEFORMULA;

  FUNCTION CF_ERROR_TEXT6FORMULA0006 RETURN NUMBER IS
  BEGIN
    FND_MESSAGE.SET_NAME('INV'
                        ,'INV_MGD_MVT_MIS_ITEM');
    CP_ERROR_TEXT6 := FND_MESSAGE.GET;
    RETURN (0);
  END CF_ERROR_TEXT6FORMULA0006;

  FUNCTION CF_ACTION_TEXT6FORMULA RETURN NUMBER IS
  BEGIN
    FND_MESSAGE.SET_NAME('INV'
                        ,'INV_MGD_MVT_EXCP_ITEM_ACTION');
    CP_ACTION_TEXT6 := FND_MESSAGE.GET;
    RETURN (0);
  END CF_ACTION_TEXT6FORMULA;

  FUNCTION CF_GET_USAGE_TYPEFORMULA RETURN NUMBER IS
  BEGIN
    SELECT
      MEANING
    INTO CP_USAGE_TYPE_NAME
    FROM
      FND_LOOKUPS
    WHERE LOOKUP_TYPE = 'MVT_USAGE_TYPES'
      AND LOOKUP_CODE = P_USAGE_TYPE;
    RETURN (0);
  END CF_GET_USAGE_TYPEFORMULA;

  FUNCTION CF_GET_STAT_TYPEFORMULA RETURN NUMBER IS
  BEGIN
    SELECT
      MEANING
    INTO CP_STAT_TYPE_NAME
    FROM
      FND_LOOKUPS
    WHERE LOOKUP_TYPE = 'MVT_STAT_TYPES'
      AND LOOKUP_CODE = P_STAT_TYPE;
    RETURN (0);
  END CF_GET_STAT_TYPEFORMULA;

  FUNCTION CF_GET_WARN_FLAGFORMULA RETURN NUMBER IS
  BEGIN
    SELECT
      MEANING
    INTO CP_DISPLAY_WARN_FLAG
    FROM
      FND_LOOKUPS
    WHERE LOOKUP_TYPE = 'YES_NO'
      AND LOOKUP_CODE = P_DISPLAY_WARN_FLAG;
    RETURN (0);
  END CF_GET_WARN_FLAGFORMULA;

  FUNCTION CF_GET_DOCUMENT_SOURCE_TYPEFOR RETURN NUMBER IS
  BEGIN
    IF P_DOCUMENT_SOURCE_TYPE IS NOT NULL THEN
      SELECT
        MEANING
      INTO CP_SOURCE_DOCUMENT_TYPE
      FROM
        FND_LOOKUPS
      WHERE LOOKUP_TYPE = 'MVT_SOURCE_DOCUMENT_TYPES'
        AND LOOKUP_CODE = P_DOCUMENT_SOURCE_TYPE;
    ELSE
      CP_SOURCE_DOCUMENT_TYPE := ' ';
    END IF;
    RETURN (0);
  END CF_GET_DOCUMENT_SOURCE_TYPEFOR;

  FUNCTION CP_ACTION_TEXT1_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_ACTION_TEXT1;
  END CP_ACTION_TEXT1_P;

  FUNCTION CP_ERROR_TEXT1_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_ERROR_TEXT1;
  END CP_ERROR_TEXT1_P;

  FUNCTION CP_ACTION_TEXT5_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_ACTION_TEXT5;
  END CP_ACTION_TEXT5_P;

  FUNCTION CP_ERROR_TEXT5_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_ERROR_TEXT5;
  END CP_ERROR_TEXT5_P;

  FUNCTION CP_ERROR_TEXT7_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_ERROR_TEXT7;
  END CP_ERROR_TEXT7_P;

  FUNCTION CP_ACTION_TEXT3_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_ACTION_TEXT3;
  END CP_ACTION_TEXT3_P;

  FUNCTION CP_ERROR_TEXT3_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_ERROR_TEXT3;
  END CP_ERROR_TEXT3_P;

  FUNCTION CP_ACTION_TEXT2_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_ACTION_TEXT2;
  END CP_ACTION_TEXT2_P;

  FUNCTION CP_ERROR_TEXT2_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_ERROR_TEXT2;
  END CP_ERROR_TEXT2_P;

  FUNCTION CP_ACTION_TEXT4_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_ACTION_TEXT4;
  END CP_ACTION_TEXT4_P;

  FUNCTION CP_ERROR_TEXT4_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_ERROR_TEXT4;
  END CP_ERROR_TEXT4_P;

  FUNCTION CP_ERROR_TEXT6_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_ERROR_TEXT6;
  END CP_ERROR_TEXT6_P;

  FUNCTION CP_ACTION_TEXT6_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_ACTION_TEXT6;
  END CP_ACTION_TEXT6_P;

  FUNCTION CP_ZONE_DISPLAY_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_ZONE_DISPLAY_NAME;
  END CP_ZONE_DISPLAY_NAME_P;

  FUNCTION CP_USAGE_TYPE_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_USAGE_TYPE_NAME;
  END CP_USAGE_TYPE_NAME_P;

  FUNCTION CP_STAT_TYPE_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_STAT_TYPE_NAME;
  END CP_STAT_TYPE_NAME_P;

  FUNCTION CP_DISPLAY_WARN_FLAG_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_DISPLAY_WARN_FLAG;
  END CP_DISPLAY_WARN_FLAG_P;

  FUNCTION CP_SOURCE_DOCUMENT_TYPE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_SOURCE_DOCUMENT_TYPE;
  END CP_SOURCE_DOCUMENT_TYPE_P;

END INV_INVMVTEX_XMLP_PKG;


/
