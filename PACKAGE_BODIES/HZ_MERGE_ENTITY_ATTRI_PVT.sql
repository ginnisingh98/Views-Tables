--------------------------------------------------------
--  DDL for Package Body HZ_MERGE_ENTITY_ATTRI_PVT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."HZ_MERGE_ENTITY_ATTRI_PVT" AS
/*$Header: ARHMPATB.pls 120.39.12010000.2 2008/09/09 07:06:12 kguggila ship $ */
PROCEDURE log(
   message      IN      VARCHAR2,
   newline      IN      BOOLEAN DEFAULT TRUE);

function get_party_last_upd_date(p_attribute_party_id in number, p_entity_name in varchar2) return date;

PROCEDURE log(
   message 	IN	VARCHAR2,
   newline	IN	BOOLEAN DEFAULT TRUE) IS
BEGIN

  IF message = 'NEWLINE' THEN
   FND_FILE.NEW_LINE(FND_FILE.LOG, 1);
  ELSIF (newline) THEN
    FND_FILE.put_line(fnd_file.log,message);
  ELSE
    FND_FILE.put(fnd_file.log,message);
  END IF;
END log;

function get_healthCarePartyId(p_merge_batch_id in number) return number is
	cursor get_healthCarePartyId_csr is
		SELECT PP.PARTY_ID
		FROM HZ_PERSON_PROFILES PP,HZ_DUP_SETS DS, HZ_DUP_SET_PARTIES DSP, HZ_DUP_BATCH DB
		WHERE PP.PARTY_ID =DSP.DUP_PARTY_ID
		AND DB.DUP_BATCH_ID = DS.DUP_BATCH_ID
		AND DS.DUP_SET_ID = DSP.DUP_SET_ID
		AND sysdate between pp.effective_start_date and nvl(pp.effective_end_date,sysdate)
		AND DSP.DUP_SET_ID= p_merge_batch_id
		AND PP.CREATED_BY_MODULE = 'CTB_PERSON_REGISTRY_SERVICES'
		AND NVL(DSP.MERGE_FLAG,'Y') <> 'N'
		AND ROWNUM = 1;
l_party_id number;
begin
	open get_healthCarePartyId_csr;
	fetch get_healthCarePartyId_csr into l_party_id;
        close get_healthCarePartyId_csr;
	return l_party_id;

end get_healthCarePartyId;

function get_InternalFlagPartyId(p_merge_batch_id in number,p_entity_name in VARCHAR2) return number is
	cursor get_PPInternalFlagPartyId_csr is
		SELECT PP.PARTY_ID
		FROM HZ_PERSON_PROFILES PP,HZ_DUP_SETS DS, HZ_DUP_SET_PARTIES DSP, HZ_DUP_BATCH DB
		WHERE PP.PARTY_ID =DSP.DUP_PARTY_ID
		AND DB.DUP_BATCH_ID = DS.DUP_BATCH_ID
		AND DS.DUP_SET_ID = DSP.DUP_SET_ID
		AND sysdate between pp.effective_start_date and nvl(pp.effective_end_date,sysdate)
		AND DSP.DUP_SET_ID= p_merge_batch_id
		AND PP.INTERNAL_FLAG = 'Y'
		AND NVL(DSP.MERGE_FLAG,'Y') <> 'N'
		AND ROWNUM = 1;
        cursor get_OPInternalFlagPartyId_csr is
		SELECT OP.PARTY_ID
		FROM HZ_ORGANIZATION_PROFILES OP,HZ_DUP_SETS DS, HZ_DUP_SET_PARTIES DSP, HZ_DUP_BATCH DB
		WHERE OP.PARTY_ID =DSP.DUP_PARTY_ID
		AND DB.DUP_BATCH_ID = DS.DUP_BATCH_ID
		AND DS.DUP_SET_ID = DSP.DUP_SET_ID
		AND sysdate between op.effective_start_date and nvl(op.effective_end_date,sysdate)
		AND DSP.DUP_SET_ID= p_merge_batch_id
		AND OP.INTERNAL_FLAG = 'Y'
		AND NVL(DSP.MERGE_FLAG,'Y') <> 'N'
		AND ROWNUM = 1;

l_party_id number;
begin
        if p_entity_name = 'HZ_PERSON_PROFILES' then
		open  get_PPInternalFlagPartyId_csr;
		fetch get_PPInternalFlagPartyId_csr into l_party_id;
	        close get_PPInternalFlagPartyId_csr;
        end if;
	if p_entity_name = 'HZ_ORGANIZATION_PROFILES' then
		open  get_OPInternalFlagPartyId_csr;
		fetch get_OPInternalFlagPartyId_csr into l_party_id;
	        close get_OPInternalFlagPartyId_csr;
	end if;

	return l_party_id;


end get_InternalFlagPartyId;

/* private procedures, called in do_profile_attribute_merge */
PROCEDURE construct_organization_rec(
        p_merge_batch_id          IN      NUMBER,
        p_merge_to_party_id	  IN      NUMBER,
        x_organization_rec        OUT NOCOPY HZ_PARTY_V2PUB.ORGANIZATION_REC_TYPE,
	x_return_status           OUT NOCOPY          VARCHAR2
 ) is
	cursor	get_org_rec_csr is
		select attribute_name, attribute_value, attribute_type, attribute_party_id
		from HZ_MERGE_ENTITY_ATTRIBUTES
		where merge_to_party_id = p_merge_to_party_id
		and entity_name = 'HZ_ORGANIZATION_PROFILES'
		and merge_batch_id = p_merge_batch_id;

l_attribute_name varchar2(30);
l_attribute_value varchar2(2000);
l_attribute_type varchar2(30);
l_attribute_party_id number;
l_organization_rec HZ_PARTY_V2PUB.ORGANIZATION_REC_TYPE;
l_attribute_date_value date; -- Bug No:3729832
begin
	-- Initialize return status to SUCCESS
        x_return_status := FND_API.G_RET_STS_SUCCESS;

	open get_org_rec_csr;
	loop
		fetch get_org_rec_csr into l_attribute_name, l_attribute_value, l_attribute_type,l_attribute_party_id;
		exit when get_org_rec_csr %NOTFOUND;
		if l_attribute_type = 'D' then
		 --l_attribute_value := to_date(l_attribute_value,'YYYY/MM/DD');
		   l_attribute_date_value := to_date(l_attribute_value, 'YYYY/MM/DD'); -- Bug No:3729832
		elsif l_attribute_type = 'N' then
		   l_attribute_value := to_number(l_attribute_value);
	        end if;

		-- The following code is generated from fnd_columns, commented
                -- out NOCOPY the columns are not supported in hz_party_v2pub.organization_rec
		IF L_ATTRIBUTE_NAME = 'BEST_TIME_CONTACT_END' THEN
			L_ORGANIZATION_REC.BEST_TIME_CONTACT_END := l_attribute_date_value;--L_ATTRIBUTE_VALUE; -- Bug No:3729832
		ELSIF L_ATTRIBUTE_NAME = 'ORGANIZATION_NAME_PHONETIC' THEN
			L_ORGANIZATION_REC.ORGANIZATION_NAME_PHONETIC := L_ATTRIBUTE_VALUE;
		--ELSIF L_ATTRIBUTE_NAME = 'TAX_NAME' THEN
		--	L_ORGANIZATION_REC.TAX_NAME := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'TAX_REFERENCE' THEN
			L_ORGANIZATION_REC.TAX_REFERENCE := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'GSA_INDICATOR_FLAG' THEN
			L_ORGANIZATION_REC.GSA_INDICATOR_FLAG := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'JGZZ_FISCAL_CODE' THEN
			L_ORGANIZATION_REC.JGZZ_FISCAL_CODE := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'ANALYSIS_FY' THEN
			L_ORGANIZATION_REC.ANALYSIS_FY := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'FISCAL_YEAREND_MONTH' THEN
			L_ORGANIZATION_REC.FISCAL_YEAREND_MONTH := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'CURR_FY_POTENTIAL_REVENUE' THEN
			L_ORGANIZATION_REC.CURR_FY_POTENTIAL_REVENUE := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'MISSION_STATEMENT' THEN
			L_ORGANIZATION_REC.MISSION_STATEMENT := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'ORGANIZATION_TYPE' THEN
			L_ORGANIZATION_REC.ORGANIZATION_TYPE := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'BUSINESS_SCOPE' THEN
			L_ORGANIZATION_REC.BUSINESS_SCOPE := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'CORPORATION_CLASS' THEN
			L_ORGANIZATION_REC.CORPORATION_CLASS := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'KNOWN_AS' THEN
			L_ORGANIZATION_REC.KNOWN_AS := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'LOCAL_BUS_IDENTIFIER' THEN
			L_ORGANIZATION_REC.LOCAL_BUS_IDENTIFIER := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'PREF_FUNCTIONAL_CURRENCY' THEN
			L_ORGANIZATION_REC.PREF_FUNCTIONAL_CURRENCY := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'REGISTRATION_TYPE' THEN
			L_ORGANIZATION_REC.REGISTRATION_TYPE := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'TOTAL_EMPLOYEES_TEXT' THEN
			L_ORGANIZATION_REC.TOTAL_EMPLOYEES_TEXT := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'TOTAL_EMP_EST_IND' THEN
			L_ORGANIZATION_REC.TOTAL_EMP_EST_IND := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'INCORP_YEAR' THEN
			L_ORGANIZATION_REC.INCORP_YEAR := L_ATTRIBUTE_VALUE;
		--ELSIF L_ATTRIBUTE_NAME = 'PRIMARY_CONTACT_ID' THEN
		--	L_ORGANIZATION_REC.PRIMARY_CONTACT_ID := L_ATTRIBUTE_VALUE;
	/*	ELSIF L_ATTRIBUTE_NAME = 'LAST_UPDATE_DATE' THEN
			L_ORGANIZATION_REC.LAST_UPDATE_DATE := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'CREATION_DATE' THEN
			L_ORGANIZATION_REC.CREATION_DATE := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'CREATED_BY' THEN
			L_ORGANIZATION_REC.CREATED_BY := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'LAST_UPDATE_LOGIN' THEN
			L_ORGANIZATION_REC.LAST_UPDATE_LOGIN := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'WH_UPDATE_DATE' THEN
			L_ORGANIZATION_REC.WH_UPDATE_DATE := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'PROGRAM_ID' THEN
			L_ORGANIZATION_REC.PROGRAM_ID := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'PROGRAM_UPDATE_DATE' THEN
			L_ORGANIZATION_REC.PROGRAM_UPDATE_DATE := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'CONTENT_SOURCE_TYPE' THEN
			L_ORGANIZATION_REC.CONTENT_SOURCE_TYPE := L_ATTRIBUTE_VALUE;
	*/
		ELSIF L_ATTRIBUTE_NAME = 'CONTENT_SOURCE_NUMBER' THEN
			L_ORGANIZATION_REC.CONTENT_SOURCE_NUMBER := L_ATTRIBUTE_VALUE;
	/*	ELSIF L_ATTRIBUTE_NAME = 'EFFECTIVE_START_DATE' THEN
			L_ORGANIZATION_REC.EFFECTIVE_START_DATE := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'EFFECTIVE_END_DATE' THEN
			L_ORGANIZATION_REC.EFFECTIVE_END_DATE := L_ATTRIBUTE_VALUE;
	*/
		ELSIF L_ATTRIBUTE_NAME = 'SIC_CODE_TYPE' THEN
			L_ORGANIZATION_REC.SIC_CODE_TYPE := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'LOCAL_ACTIVITY_CODE' THEN
			L_ORGANIZATION_REC.LOCAL_ACTIVITY_CODE := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'EMP_AT_PRIMARY_ADR' THEN
			L_ORGANIZATION_REC.EMP_AT_PRIMARY_ADR := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'EMP_AT_PRIMARY_ADR_TEXT' THEN
			L_ORGANIZATION_REC.EMP_AT_PRIMARY_ADR_TEXT := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'EMP_AT_PRIMARY_ADR_EST_IND' THEN
			L_ORGANIZATION_REC.EMP_AT_PRIMARY_ADR_EST_IND := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'EMP_AT_PRIMARY_ADR_MIN_IND' THEN
			L_ORGANIZATION_REC.EMP_AT_PRIMARY_ADR_MIN_IND := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'AVG_HIGH_CREDIT' THEN
			L_ORGANIZATION_REC.AVG_HIGH_CREDIT := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'TOTAL_PAYMENTS' THEN
			L_ORGANIZATION_REC.TOTAL_PAYMENTS := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE12' THEN
			L_ORGANIZATION_REC.ATTRIBUTE12 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE13' THEN
			L_ORGANIZATION_REC.ATTRIBUTE13 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE14' THEN
			L_ORGANIZATION_REC.ATTRIBUTE14 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE15' THEN
			L_ORGANIZATION_REC.ATTRIBUTE15 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE16' THEN
			L_ORGANIZATION_REC.ATTRIBUTE16 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE17' THEN
			L_ORGANIZATION_REC.ATTRIBUTE17 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE18' THEN
			L_ORGANIZATION_REC.ATTRIBUTE18 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE19' THEN
			L_ORGANIZATION_REC.ATTRIBUTE19 := L_ATTRIBUTE_VALUE;
/*		ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE_CATEGORY' THEN
			L_ORGANIZATION_REC.GLOBAL_ATTRIBUTE_CATEGORY := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE1' THEN
			L_ORGANIZATION_REC.GLOBAL_ATTRIBUTE1 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE2' THEN
			L_ORGANIZATION_REC.GLOBAL_ATTRIBUTE2 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE3' THEN
			L_ORGANIZATION_REC.GLOBAL_ATTRIBUTE3 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE4' THEN
			L_ORGANIZATION_REC.GLOBAL_ATTRIBUTE4 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE5' THEN
			L_ORGANIZATION_REC.GLOBAL_ATTRIBUTE5 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE6' THEN
			L_ORGANIZATION_REC.GLOBAL_ATTRIBUTE6 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE7' THEN
			L_ORGANIZATION_REC.GLOBAL_ATTRIBUTE7 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE9' THEN
			L_ORGANIZATION_REC.GLOBAL_ATTRIBUTE9 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE10' THEN
			L_ORGANIZATION_REC.GLOBAL_ATTRIBUTE10 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE11' THEN
			L_ORGANIZATION_REC.GLOBAL_ATTRIBUTE11 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE13' THEN
			L_ORGANIZATION_REC.GLOBAL_ATTRIBUTE13 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE14' THEN
			L_ORGANIZATION_REC.GLOBAL_ATTRIBUTE14 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE16' THEN
			L_ORGANIZATION_REC.GLOBAL_ATTRIBUTE16 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE17' THEN
			L_ORGANIZATION_REC.GLOBAL_ATTRIBUTE17 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE19' THEN
			L_ORGANIZATION_REC.GLOBAL_ATTRIBUTE19 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE20' THEN
			L_ORGANIZATION_REC.GLOBAL_ATTRIBUTE20 := L_ATTRIBUTE_VALUE; */
		--ELSIF L_ATTRIBUTE_NAME = 'DUNS_NUMBER' THEN
		--	L_ORGANIZATION_REC.DUNS_NUMBER := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'ENQUIRY_DUNS' THEN
			L_ORGANIZATION_REC.ENQUIRY_DUNS := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'CEO_NAME' THEN
			L_ORGANIZATION_REC.CEO_NAME := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'CEO_TITLE' THEN
			L_ORGANIZATION_REC.CEO_TITLE := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'PRINCIPAL_NAME' THEN
			L_ORGANIZATION_REC.PRINCIPAL_NAME := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'PRINCIPAL_TITLE' THEN
			L_ORGANIZATION_REC.PRINCIPAL_TITLE := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'LEGAL_STATUS' THEN
			L_ORGANIZATION_REC.LEGAL_STATUS := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'CONTROL_YR' THEN
			L_ORGANIZATION_REC.CONTROL_YR := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'EMPLOYEES_TOTAL' THEN
			L_ORGANIZATION_REC.EMPLOYEES_TOTAL := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'BRANCH_FLAG' THEN
			L_ORGANIZATION_REC.BRANCH_FLAG := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'OOB_IND' THEN
			L_ORGANIZATION_REC.OOB_IND := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'LINE_OF_BUSINESS' THEN
			L_ORGANIZATION_REC.LINE_OF_BUSINESS := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'CONG_DIST_CODE' THEN
			L_ORGANIZATION_REC.CONG_DIST_CODE := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'SIC_CODE' THEN
			L_ORGANIZATION_REC.SIC_CODE := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'IMPORT_IND' THEN
			L_ORGANIZATION_REC.IMPORT_IND := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'EXPORT_IND' THEN
			L_ORGANIZATION_REC.EXPORT_IND := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'DEBARMENT_IND' THEN
			L_ORGANIZATION_REC.DEBARMENT_IND := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'MINORITY_OWNED_TYPE' THEN
			L_ORGANIZATION_REC.MINORITY_OWNED_TYPE := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'WOMAN_OWNED_IND' THEN
			L_ORGANIZATION_REC.WOMAN_OWNED_IND := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'DISADV_8A_IND' THEN
			L_ORGANIZATION_REC.DISADV_8A_IND := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'SMALL_BUS_IND' THEN
			L_ORGANIZATION_REC.SMALL_BUS_IND := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'DEBARMENTS_COUNT' THEN
			L_ORGANIZATION_REC.DEBARMENTS_COUNT := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'DEBARMENTS_DATE' THEN
			L_ORGANIZATION_REC.DEBARMENTS_DATE := l_attribute_date_value;--L_ATTRIBUTE_VALUE; -- Bug No:3729832
		ELSIF L_ATTRIBUTE_NAME = 'FAILURE_SCORE' THEN
			L_ORGANIZATION_REC.FAILURE_SCORE := L_ATTRIBUTE_VALUE;
		--ELSIF L_ATTRIBUTE_NAME = 'FAILURE_SCORE_NATL_PERCENTILE' THEN --Commented out as this is an obsoleted column
			--L_ORGANIZATION_REC.FAILURE_SCORE_NATNL_PERCENTILE := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'FAILURE_SCORE_OVERRIDE_CODE' THEN
			L_ORGANIZATION_REC.FAILURE_SCORE_OVERRIDE_CODE := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'FAILURE_SCORE_COMMENTARY' THEN
			L_ORGANIZATION_REC.FAILURE_SCORE_COMMENTARY := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_FAILURE_SCORE' THEN
			L_ORGANIZATION_REC.GLOBAL_FAILURE_SCORE := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'DB_RATING' THEN
			L_ORGANIZATION_REC.DB_RATING := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'CREDIT_SCORE' THEN
			L_ORGANIZATION_REC.CREDIT_SCORE := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'CREDIT_SCORE_COMMENTARY' THEN
			L_ORGANIZATION_REC.CREDIT_SCORE_COMMENTARY := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'PAYDEX_SCORE' THEN
			L_ORGANIZATION_REC.PAYDEX_SCORE := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'BEST_TIME_CONTACT_BEGIN' THEN
			L_ORGANIZATION_REC.BEST_TIME_CONTACT_BEGIN := l_attribute_date_value;--L_ATTRIBUTE_VALUE; -- Bug No:3729832
		--ELSIF L_ATTRIBUTE_NAME = 'ORGANIZATION_PROFILE_ID' THEN
		--	L_ORGANIZATION_REC.ORGANIZATION_PROFILE_ID := L_ATTRIBUTE_VALUE;
		--ELSIF L_ATTRIBUTE_NAME = 'PARTY_ID' THEN
		--	L_ORGANIZATION_REC.PARTY_REC.PARTY_ID := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'ORGANIZATION_NAME' THEN
			L_ORGANIZATION_REC.ORGANIZATION_NAME := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE_CATEGORY' THEN
			L_ORGANIZATION_REC.ATTRIBUTE_CATEGORY := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE1' THEN
			L_ORGANIZATION_REC.ATTRIBUTE1 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE2' THEN
			L_ORGANIZATION_REC.ATTRIBUTE2 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE3' THEN
			L_ORGANIZATION_REC.ATTRIBUTE3 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE4' THEN
			L_ORGANIZATION_REC.ATTRIBUTE4 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE5' THEN
			L_ORGANIZATION_REC.ATTRIBUTE5 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE6' THEN
			L_ORGANIZATION_REC.ATTRIBUTE6 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE7' THEN
			L_ORGANIZATION_REC.ATTRIBUTE7 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE8' THEN
			L_ORGANIZATION_REC.ATTRIBUTE8 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE9' THEN
			L_ORGANIZATION_REC.ATTRIBUTE9 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE10' THEN
			L_ORGANIZATION_REC.ATTRIBUTE10 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE11' THEN
			L_ORGANIZATION_REC.ATTRIBUTE11 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'CREDIT_SCORE_AGE' THEN
			L_ORGANIZATION_REC.CREDIT_SCORE_AGE := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'CREDIT_SCORE_CLASS' THEN
			L_ORGANIZATION_REC.CREDIT_SCORE_CLASS := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'CREDIT_SCORE_COMMENTARY10' THEN
			L_ORGANIZATION_REC.CREDIT_SCORE_COMMENTARY10 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'CREDIT_SCORE_COMMENTARY2' THEN
			L_ORGANIZATION_REC.CREDIT_SCORE_COMMENTARY2 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'CREDIT_SCORE_COMMENTARY3' THEN
			L_ORGANIZATION_REC.CREDIT_SCORE_COMMENTARY3 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'CREDIT_SCORE_COMMENTARY4' THEN
			L_ORGANIZATION_REC.CREDIT_SCORE_COMMENTARY4 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'CREDIT_SCORE_COMMENTARY5' THEN
			L_ORGANIZATION_REC.CREDIT_SCORE_COMMENTARY5 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'CREDIT_SCORE_COMMENTARY6' THEN
			L_ORGANIZATION_REC.CREDIT_SCORE_COMMENTARY6 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'CREDIT_SCORE_COMMENTARY7' THEN
			L_ORGANIZATION_REC.CREDIT_SCORE_COMMENTARY7 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'CREDIT_SCORE_COMMENTARY8' THEN
			L_ORGANIZATION_REC.CREDIT_SCORE_COMMENTARY8 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'CREDIT_SCORE_COMMENTARY9' THEN
			L_ORGANIZATION_REC.CREDIT_SCORE_COMMENTARY9 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'CREDIT_SCORE_DATE' THEN
			L_ORGANIZATION_REC.CREDIT_SCORE_DATE := l_attribute_date_value;--L_ATTRIBUTE_VALUE; -- Bug No:3729832
		ELSIF L_ATTRIBUTE_NAME = 'CREDIT_SCORE_INCD_DEFAULT' THEN
			L_ORGANIZATION_REC.CREDIT_SCORE_INCD_DEFAULT := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'CREDIT_SCORE_NATL_PERCENTILE' THEN
			L_ORGANIZATION_REC.CREDIT_SCORE_NATL_PERCENTILE := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'DISPLAYED_DUNS_PARTY_ID' THEN
			L_ORGANIZATION_REC.DISPLAYED_DUNS_PARTY_ID := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'FAILURE_SCORE_AGE' THEN
			L_ORGANIZATION_REC.FAILURE_SCORE_AGE := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'FAILURE_SCORE_CLASS' THEN
			L_ORGANIZATION_REC.FAILURE_SCORE_CLASS := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'FAILURE_SCORE_COMMENTARY10' THEN
			L_ORGANIZATION_REC.FAILURE_SCORE_COMMENTARY10 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'FAILURE_SCORE_COMMENTARY2' THEN
			L_ORGANIZATION_REC.FAILURE_SCORE_COMMENTARY2 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'FAILURE_SCORE_COMMENTARY3' THEN
			L_ORGANIZATION_REC.FAILURE_SCORE_COMMENTARY3 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'FAILURE_SCORE_COMMENTARY4' THEN
			L_ORGANIZATION_REC.FAILURE_SCORE_COMMENTARY4 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'FAILURE_SCORE_COMMENTARY5' THEN
			L_ORGANIZATION_REC.FAILURE_SCORE_COMMENTARY5 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'FAILURE_SCORE_COMMENTARY6' THEN
			L_ORGANIZATION_REC.FAILURE_SCORE_COMMENTARY6 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'FAILURE_SCORE_COMMENTARY7' THEN
			L_ORGANIZATION_REC.FAILURE_SCORE_COMMENTARY7 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'FAILURE_SCORE_COMMENTARY8' THEN
			L_ORGANIZATION_REC.FAILURE_SCORE_COMMENTARY8 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'FAILURE_SCORE_COMMENTARY9' THEN
			L_ORGANIZATION_REC.FAILURE_SCORE_COMMENTARY9 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'FAILURE_SCORE_DATE' THEN
			L_ORGANIZATION_REC.FAILURE_SCORE_DATE := l_attribute_date_value; --L_ATTRIBUTE_VALUE; -- Bug No:3729832
		ELSIF L_ATTRIBUTE_NAME = 'FAILURE_SCORE_INCD_DEFAULT' THEN
			L_ORGANIZATION_REC.FAILURE_SCORE_INCD_DEFAULT := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'FAILURE_SCORE_NATNL_PERCENTILE' THEN
			L_ORGANIZATION_REC.FAILURE_SCORE_NATNL_PERCENTILE := L_ATTRIBUTE_VALUE;
	/*	ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE12' THEN
			L_ORGANIZATION_REC.GLOBAL_ATTRIBUTE12 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE15' THEN
			L_ORGANIZATION_REC.GLOBAL_ATTRIBUTE15 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE18' THEN
			L_ORGANIZATION_REC.GLOBAL_ATTRIBUTE18 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE8' THEN
			L_ORGANIZATION_REC.GLOBAL_ATTRIBUTE8 := L_ATTRIBUTE_VALUE;
	*/
		ELSIF L_ATTRIBUTE_NAME = 'HIGH_CREDIT' THEN
			L_ORGANIZATION_REC.HIGH_CREDIT := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'HQ_BRANCH_IND' THEN
			L_ORGANIZATION_REC.HQ_BRANCH_IND := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'INTERNAL_FLAG' THEN
			L_ORGANIZATION_REC.INTERNAL_FLAG := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'KNOWN_AS2' THEN
			L_ORGANIZATION_REC.KNOWN_AS2 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'KNOWN_AS3' THEN
			L_ORGANIZATION_REC.KNOWN_AS3 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'KNOWN_AS4' THEN
			L_ORGANIZATION_REC.KNOWN_AS4 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'KNOWN_AS5' THEN
			L_ORGANIZATION_REC.KNOWN_AS5 := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'LABOR_SURPLUS_IND' THEN
			L_ORGANIZATION_REC.LABOR_SURPLUS_IND := L_ATTRIBUTE_VALUE;
		--ELSIF L_ATTRIBUTE_NAME = 'LAST_UPDATED_BY' THEN
		--	L_ORGANIZATION_REC.LAST_UPDATED_BY := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'LOCAL_ACTIVITY_CODE_TYPE' THEN
			L_ORGANIZATION_REC.LOCAL_ACTIVITY_CODE_TYPE := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'LOCAL_BUS_IDEN_TYPE' THEN
			L_ORGANIZATION_REC.LOCAL_BUS_IDEN_TYPE := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'MAXIMUM_CREDIT_CURRENCY_CODE' THEN
			L_ORGANIZATION_REC.MAXIMUM_CREDIT_CURRENCY_CODE := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'MAXIMUM_CREDIT_RECOMMENDATION' THEN
			L_ORGANIZATION_REC.MAXIMUM_CREDIT_RECOMMENDATION := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'MINORITY_OWNED_IND' THEN
			L_ORGANIZATION_REC.MINORITY_OWNED_IND := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'NEXT_FY_POTENTIAL_REVENUE' THEN
			L_ORGANIZATION_REC.NEXT_FY_POTENTIAL_REVENUE := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'PARENT_SUB_IND' THEN
			L_ORGANIZATION_REC.PARENT_SUB_IND := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'PAYDEX_NORM' THEN
			L_ORGANIZATION_REC.PAYDEX_NORM := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'PAYDEX_THREE_MONTHS_AGO' THEN
			L_ORGANIZATION_REC.PAYDEX_THREE_MONTHS_AGO := L_ATTRIBUTE_VALUE;
		--ELSIF L_ATTRIBUTE_NAME = 'PROGRAM_APPLICATION_ID' THEN
		--	L_ORGANIZATION_REC.PROGRAM_APPLICATION_ID := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'PUBLIC_PRIVATE_OWNERSHIP_FLAG' THEN
			L_ORGANIZATION_REC.PUBLIC_PRIVATE_OWNERSHIP_FLAG := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'RENT_OWN_IND' THEN
			L_ORGANIZATION_REC.RENT_OWN_IND := L_ATTRIBUTE_VALUE;
		--ELSIF L_ATTRIBUTE_NAME = 'REQUEST_ID' THEN
		--	L_ORGANIZATION_REC.REQUEST_ID := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'TOTAL_EMPLOYEES_IND' THEN
			L_ORGANIZATION_REC.TOTAL_EMPLOYEES_IND := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'TOTAL_EMP_MIN_IND' THEN
			L_ORGANIZATION_REC.TOTAL_EMP_MIN_IND := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'YEAR_ESTABLISHED' THEN
			L_ORGANIZATION_REC.YEAR_ESTABLISHED := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE20' THEN
			L_ORGANIZATION_REC.ATTRIBUTE20 := L_ATTRIBUTE_VALUE;
		--ELSIF L_ATTRIBUTE_NAME = 'BUSINESS_REPORT' THEN
		--ELSIF L_ATTRIBUTE_NAME = 'STATUS' THEN
		--	L_ORGANIZATION_REC.STATUS := L_ATTRIBUTE_VALUE;
		--ELSIF L_ATTRIBUTE_NAME = 'APPLICATION_ID' THEN
		--	L_ORGANIZATION_REC.APPLICATION_ID := L_ATTRIBUTE_VALUE;
		--ELSIF L_ATTRIBUTE_NAME = 'CREATED_BY_MODULE' THEN
		--	L_ORGANIZATION_REC.CREATED_BY_MODULE := L_ATTRIBUTE_VALUE;
		ELSIF L_ATTRIBUTE_NAME = 'DUNS_NUMBER_C' THEN
			L_ORGANIZATION_REC.DUNS_NUMBER_C := L_ATTRIBUTE_VALUE;
		--ELSIF L_ATTRIBUTE_NAME = 'OBJECT_VERSION_NUMBER' THEN
		--	L_ORGANIZATION_REC.OBJECT_VERSION_NUMBER := L_ATTRIBUTE_VALUE;
		END IF;

	End loop;
	Close get_org_rec_csr;
	L_ORGANIZATION_REC.PARTY_REC.PARTY_ID := P_MERGE_TO_PARTY_ID;
	X_organization_rec := l_organization_rec;
EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_MERGE_SQL_ERROR');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
    FND_MSG_PUB.ADD;
    x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;

End construct_organization_rec;

/* private procedures, called in do_profile_attribute_merge */
PROCEDURE construct_person_rec(
        p_merge_batch_id          IN      NUMBER,
        p_merge_to_party_id       IN      NUMBER,
        p_orig_sys_ref            IN      VARCHAR2,
        x_person_rec         OUT NOCOPY HZ_PARTY_V2PUB.PERSON_REC_TYPE,
	x_return_status               OUT NOCOPY          VARCHAR2
 ) is
	cursor	get_person_rec_csr is
		select attribute_name, attribute_value, attribute_type
		from HZ_MERGE_ENTITY_ATTRIBUTES
		where merge_to_party_id = p_merge_to_party_id
		and entity_name = 'HZ_PERSON_PROFILES'
		and merge_batch_id = p_merge_batch_id;

l_attribute_name varchar2(30);
l_attribute_value varchar2(2000);
l_attribute_type varchar2(30);
l_person_rec HZ_PARTY_V2PUB.PERSON_REC_TYPE;
l_attribute_date_value  date; -- Bug No:3729832
begin
	-- Initialize return status to SUCCESS
        x_return_status := FND_API.G_RET_STS_SUCCESS;

	open get_person_rec_csr;
	loop
		fetch get_person_rec_csr into l_attribute_name, l_attribute_value, l_attribute_type;
		exit when get_person_rec_csr %NOTFOUND;

		if l_attribute_type = 'D' then
		 --l_attribute_value := to_date(l_attribute_value,'YYYY/MM/DD');
		   l_attribute_date_value := to_date(l_attribute_value, 'YYYY/MM/DD'); -- Bug No:3729832
		elsif l_attribute_type = 'N' then
		   l_attribute_value := to_number(l_attribute_value);
		end if;

		-- The following code is generated from fnd_columns, commented
                -- out NOCOPY the columns are not supported in hz_party_v2pub.person_rec

                IF (NVL(p_orig_sys_ref,'X') LIKE 'PER:%') THEN -- bug no: 4193165

		  IF (NVL(FND_PROFILE.VALUE('HZ_CREATED_BY_MODULE'), '-222') <> 'HR API') THEN

		     IF (NVL(FND_PROFILE.VALUE('HZ_PROTECT_HR_PERSON_INFO'),'N') ='Y') THEN  --Update HR sensitive columns

			IF L_ATTRIBUTE_NAME = 'GENDER' THEN
			   L_PERSON_REC.GENDER := L_ATTRIBUTE_VALUE;
			ELSIF L_ATTRIBUTE_NAME = 'DATE_OF_BIRTH' THEN
			   L_PERSON_REC.DATE_OF_BIRTH := l_attribute_date_value; -- L_ATTRIBUTE_VALUE; -- Bug No:3729832
			ELSIF L_ATTRIBUTE_NAME = 'PLACE_OF_BIRTH' THEN
			   L_PERSON_REC.PLACE_OF_BIRTH := L_ATTRIBUTE_VALUE;
			ELSIF L_ATTRIBUTE_NAME = 'MARITAL_STATUS' THEN
			   L_PERSON_REC.MARITAL_STATUS := L_ATTRIBUTE_VALUE;
			END IF;

		      END IF;

		   ELSE --Only HR
		     IF L_ATTRIBUTE_NAME = 'PERSON_FIRST_NAME' THEN
			L_PERSON_REC.PERSON_FIRST_NAME := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'PERSON_LAST_NAME' THEN
			L_PERSON_REC.PERSON_LAST_NAME := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'PERSON_MIDDLE_NAME' THEN
			L_PERSON_REC.PERSON_MIDDLE_NAME := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'PERSON_NAME_SUFFIX' THEN
			L_PERSON_REC.PERSON_NAME_SUFFIX := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'PERSON_PREVIOUS_LAST_NAME' THEN
			L_PERSON_REC.PERSON_PREVIOUS_LAST_NAME := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'PERSON_TITLE' THEN
			L_PERSON_REC.PERSON_TITLE := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'KNOWN_AS' THEN
			L_PERSON_REC.KNOWN_AS := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'PERSON_FIRST_NAME_PHONETIC' THEN
			L_PERSON_REC.PERSON_FIRST_NAME_PHONETIC := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'PERSON_LAST_NAME_PHONETIC' THEN
			L_PERSON_REC.PERSON_LAST_NAME_PHONETIC := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'PERSON_NAME_PHONETIC' THEN
			L_PERSON_REC.PERSON_NAME_PHONETIC := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'GENDER' THEN
			L_PERSON_REC.GENDER := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'DATE_OF_BIRTH' THEN
			L_PERSON_REC.DATE_OF_BIRTH := l_attribute_date_value;
		     ELSIF L_ATTRIBUTE_NAME = 'PLACE_OF_BIRTH' THEN
			L_PERSON_REC.PLACE_OF_BIRTH := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'MARITAL_STATUS' THEN
			L_PERSON_REC.MARITAL_STATUS := L_ATTRIBUTE_VALUE;
		     END IF;

		   END IF; --For IF (NVL(FND_PROFILE.VALUE('HZ_CREATED_BY_MODULE'), '-222') <> 'HR API')

		ELSE --orig_sys_ref other than 'PER:%'
		  IF L_ATTRIBUTE_NAME = 'PERSON_FIRST_NAME' THEN
		     L_PERSON_REC.PERSON_FIRST_NAME := L_ATTRIBUTE_VALUE;
		  ELSIF L_ATTRIBUTE_NAME = 'PERSON_LAST_NAME' THEN
		     L_PERSON_REC.PERSON_LAST_NAME := L_ATTRIBUTE_VALUE;
		  ELSIF L_ATTRIBUTE_NAME = 'PERSON_MIDDLE_NAME' THEN
		     L_PERSON_REC.PERSON_MIDDLE_NAME := L_ATTRIBUTE_VALUE;
		  ELSIF L_ATTRIBUTE_NAME = 'PERSON_NAME_SUFFIX' THEN
		     L_PERSON_REC.PERSON_NAME_SUFFIX := L_ATTRIBUTE_VALUE;
		  ELSIF L_ATTRIBUTE_NAME = 'PERSON_PREVIOUS_LAST_NAME' THEN
		     L_PERSON_REC.PERSON_PREVIOUS_LAST_NAME := L_ATTRIBUTE_VALUE;
		  ELSIF L_ATTRIBUTE_NAME = 'PERSON_TITLE' THEN
		     L_PERSON_REC.PERSON_TITLE := L_ATTRIBUTE_VALUE;
		  ELSIF L_ATTRIBUTE_NAME = 'KNOWN_AS' THEN
		     L_PERSON_REC.KNOWN_AS := L_ATTRIBUTE_VALUE;
		  ELSIF L_ATTRIBUTE_NAME = 'PERSON_FIRST_NAME_PHONETIC' THEN
		     L_PERSON_REC.PERSON_FIRST_NAME_PHONETIC := L_ATTRIBUTE_VALUE;
		  ELSIF L_ATTRIBUTE_NAME = 'PERSON_LAST_NAME_PHONETIC' THEN
		     L_PERSON_REC.PERSON_LAST_NAME_PHONETIC := L_ATTRIBUTE_VALUE;
		  ELSIF L_ATTRIBUTE_NAME = 'PERSON_NAME_PHONETIC' THEN
		     L_PERSON_REC.PERSON_NAME_PHONETIC := L_ATTRIBUTE_VALUE;
		  ELSIF L_ATTRIBUTE_NAME = 'GENDER' THEN
		     L_PERSON_REC.GENDER := L_ATTRIBUTE_VALUE;
		  ELSIF L_ATTRIBUTE_NAME = 'DATE_OF_BIRTH' THEN
		     L_PERSON_REC.DATE_OF_BIRTH := l_attribute_date_value;
		  ELSIF L_ATTRIBUTE_NAME = 'PLACE_OF_BIRTH' THEN
		     L_PERSON_REC.PLACE_OF_BIRTH := L_ATTRIBUTE_VALUE;
		  ELSIF L_ATTRIBUTE_NAME = 'MARITAL_STATUS' THEN
		     L_PERSON_REC.MARITAL_STATUS := L_ATTRIBUTE_VALUE;
		  END IF;

		END IF; -- For IF (NVL(p_orig_sys_ref,'X') LIKE 'PER:%')

		     --update other attributes
		     IF L_ATTRIBUTE_NAME = 'MARITAL_STATUS_EFFECTIVE_DATE' THEN
			L_PERSON_REC.MARITAL_STATUS_EFFECTIVE_DATE := l_attribute_date_value; --L_ATTRIBUTE_VALUE; -- Bug No:3729832
		     ELSIF L_ATTRIBUTE_NAME = 'PERSONAL_INCOME' THEN
			L_PERSON_REC.PERSONAL_INCOME := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'HEAD_OF_HOUSEHOLD_FLAG' THEN
			L_PERSON_REC.HEAD_OF_HOUSEHOLD_FLAG := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'HOUSEHOLD_INCOME' THEN
			L_PERSON_REC.HOUSEHOLD_INCOME := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'HOUSEHOLD_SIZE' THEN
			L_PERSON_REC.HOUSEHOLD_SIZE := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'RENT_OWN_IND' THEN
			L_PERSON_REC.RENT_OWN_IND := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'LAST_KNOWN_GPS' THEN
			L_PERSON_REC.LAST_KNOWN_GPS := L_ATTRIBUTE_VALUE;
		/*   ELSIF L_ATTRIBUTE_NAME = 'BEST_TIME_CONTACT_BEGIN' THEN
			L_PERSON_REC.BEST_TIME_CONTACT_BEGIN := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'BEST_TIME_CONTACT_END' THEN
			L_PERSON_REC.BEST_TIME_CONTACT_END := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'EFFECTIVE_START_DATE' THEN
			L_PERSON_REC.EFFECTIVE_START_DATE := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'EFFECTIVE_END_DATE' THEN
			L_PERSON_REC.EFFECTIVE_END_DATE := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'CONTENT_SOURCE_TYPE' THEN
			L_PERSON_REC.CONTENT_SOURCE_TYPE := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'CONTENT_SOURCE_NUMBER' THEN
			L_PERSON_REC.CONTENT_SOURCE_NUMBER := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'PROGRAM_UPDATE_DATE' THEN
			L_PERSON_REC.PROGRAM_UPDATE_DATE := L_ATTRIBUTE_VALUE; */
		     ELSIF L_ATTRIBUTE_NAME = 'PERSON_PRE_NAME_ADJUNCT' THEN
			L_PERSON_REC.PERSON_PRE_NAME_ADJUNCT := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'PERSON_ACADEMIC_TITLE' THEN
			L_PERSON_REC.PERSON_ACADEMIC_TITLE := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'PERSON_INITIALS' THEN
			L_PERSON_REC.PERSON_INITIALS := L_ATTRIBUTE_VALUE;
		   --ELSIF L_ATTRIBUTE_NAME = 'TAX_NAME' THEN
		   --	L_PERSON_REC.TAX_NAME := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'TAX_REFERENCE' THEN
			L_PERSON_REC.TAX_REFERENCE := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'JGZZ_FISCAL_CODE' THEN
			L_PERSON_REC.JGZZ_FISCAL_CODE := L_ATTRIBUTE_VALUE;
		   --ELSIF L_ATTRIBUTE_NAME = 'PRIMARY_CONTACT_ID' THEN
		   --	L_PERSON_REC.PRIMARY_CONTACT_ID := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'PERSON_IDEN_TYPE' THEN
			L_PERSON_REC.PERSON_IDEN_TYPE := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'PERSON_IDENTIFIER' THEN
			L_PERSON_REC.PERSON_IDENTIFIER := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'DATE_OF_DEATH' THEN
			L_PERSON_REC.DATE_OF_DEATH := l_attribute_date_value;-- L_ATTRIBUTE_VALUE; -- Bug No:3729832
		     ELSIF L_ATTRIBUTE_NAME = 'DECLARED_ETHNICITY' THEN
			L_PERSON_REC.DECLARED_ETHNICITY := L_ATTRIBUTE_VALUE;
		   --ELSIF L_ATTRIBUTE_NAME = 'PERSON_PROFILE_ID' THEN
		   --	L_PERSON_REC.PERSON_PROFILE_ID := L_ATTRIBUTE_VALUE;
		   --ELSIF L_ATTRIBUTE_NAME = 'PARTY_ID' THEN
		   --	L_PERSON_REC.PARTY_ID := L_ATTRIBUTE_VALUE;
		   --ELSIF L_ATTRIBUTE_NAME = 'PERSON_NAME' THEN
		   --	L_PERSON_REC.PERSON_NAME := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'INTERNAL_FLAG' THEN
			L_PERSON_REC.INTERNAL_FLAG := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'KNOWN_AS2' THEN
			L_PERSON_REC.KNOWN_AS2 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'KNOWN_AS3' THEN
			L_PERSON_REC.KNOWN_AS3 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'KNOWN_AS4' THEN
			L_PERSON_REC.KNOWN_AS4 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'KNOWN_AS5' THEN
			L_PERSON_REC.KNOWN_AS5 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'MIDDLE_NAME_PHONETIC' THEN
			L_PERSON_REC.MIDDLE_NAME_PHONETIC := L_ATTRIBUTE_VALUE;
		   --ELSIF L_ATTRIBUTE_NAME = 'STATUS' THEN
		   --	L_PERSON_REC.STATUS := L_ATTRIBUTE_VALUE;
		   --   ELSIF L_ATTRIBUTE_NAME = 'APPLICATION_ID' THEN
		   --L_PERSON_REC.APPLICATION_ID := L_ATTRIBUTE_VALUE;
		   --ELSIF L_ATTRIBUTE_NAME = 'CREATED_BY_MODULE' THEN
		   --ELSIF L_ATTRIBUTE_NAME = 'OBJECT_VERSION_NUMBER' THEN
		   --   L_PERSON_REC.OBJECT_VERSION_NUMBER := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE_CATEGORY' THEN
			L_PERSON_REC.ATTRIBUTE_CATEGORY := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE2' THEN
		      L_PERSON_REC.ATTRIBUTE2 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE3' THEN
			L_PERSON_REC.ATTRIBUTE3 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE4' THEN
			L_PERSON_REC.ATTRIBUTE4 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE5' THEN
			L_PERSON_REC.ATTRIBUTE5 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE6' THEN
			L_PERSON_REC.ATTRIBUTE6 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE7' THEN
			L_PERSON_REC.ATTRIBUTE7 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE9' THEN
			L_PERSON_REC.ATTRIBUTE9 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE10' THEN
			L_PERSON_REC.ATTRIBUTE10 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE11' THEN
			L_PERSON_REC.ATTRIBUTE11 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE12' THEN
			L_PERSON_REC.ATTRIBUTE12 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE13' THEN
			L_PERSON_REC.ATTRIBUTE13 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE14' THEN
			L_PERSON_REC.ATTRIBUTE14 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE16' THEN
			L_PERSON_REC.ATTRIBUTE16 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE17' THEN
			L_PERSON_REC.ATTRIBUTE17 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE18' THEN
			L_PERSON_REC.ATTRIBUTE18 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE19' THEN
			L_PERSON_REC.ATTRIBUTE19 := L_ATTRIBUTE_VALUE;
	      /*     ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE_CATEGORY' THEN
			L_PERSON_REC.GLOBAL_ATTRIBUTE_CATEGORY := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE1' THEN
			L_PERSON_REC.GLOBAL_ATTRIBUTE1 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE2' THEN
			L_PERSON_REC.GLOBAL_ATTRIBUTE2 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE3' THEN
			L_PERSON_REC.GLOBAL_ATTRIBUTE3 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE4' THEN
			L_PERSON_REC.GLOBAL_ATTRIBUTE4 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE5' THEN
			L_PERSON_REC.GLOBAL_ATTRIBUTE5 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE6' THEN
			L_PERSON_REC.GLOBAL_ATTRIBUTE6 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE7' THEN
			L_PERSON_REC.GLOBAL_ATTRIBUTE7 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE8' THEN
			L_PERSON_REC.GLOBAL_ATTRIBUTE8 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE10' THEN
			L_PERSON_REC.GLOBAL_ATTRIBUTE10 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE11' THEN
			L_PERSON_REC.GLOBAL_ATTRIBUTE11 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE12' THEN
			L_PERSON_REC.GLOBAL_ATTRIBUTE12 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE13' THEN
			L_PERSON_REC.GLOBAL_ATTRIBUTE13 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE14' THEN
			L_PERSON_REC.GLOBAL_ATTRIBUTE14 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE15' THEN
			L_PERSON_REC.GLOBAL_ATTRIBUTE15 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE16' THEN
			L_PERSON_REC.GLOBAL_ATTRIBUTE16 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE17' THEN
			L_PERSON_REC.GLOBAL_ATTRIBUTE17 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE18' THEN
			L_PERSON_REC.GLOBAL_ATTRIBUTE18 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE19' THEN
			L_PERSON_REC.GLOBAL_ATTRIBUTE19 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE20' THEN
			L_PERSON_REC.GLOBAL_ATTRIBUTE20 := L_ATTRIBUTE_VALUE;*/
	      /*     ELSIF L_ATTRIBUTE_NAME = 'LAST_UPDATE_DATE' THEN
			L_PERSON_REC.LAST_UPDATE_DATE := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'LAST_UPDATED_BY' THEN
			L_PERSON_REC.LAST_UPDATED_BY := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'CREATION_DATE' THEN
			L_PERSON_REC.CREATION_DATE := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'CREATED_BY' THEN
			L_PERSON_REC.CREATED_BY := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'LAST_UPDATE_LOGIN' THEN
			L_PERSON_REC.LAST_UPDATE_LOGIN := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'WH_UPDATE_DATE' THEN
			L_PERSON_REC.WH_UPDATE_DATE := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'REQUEST_ID' THEN
			L_PERSON_REC.REQUEST_ID := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'PROGRAM_APPLICATION_ID' THEN
			L_PERSON_REC.PROGRAM_APPLICATION_ID := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'GLOBAL_ATTRIBUTE9' THEN
			L_PERSON_REC.GLOBAL_ATTRIBUTE9 := L_ATTRIBUTE_VALUE; */
		   --ELSIF L_ATTRIBUTE_NAME = 'PROGRAM_ID' THEN
		   --   L_PERSON_REC.PROGRAM_ID := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE1' THEN
			L_PERSON_REC.ATTRIBUTE1 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE15' THEN
			L_PERSON_REC.ATTRIBUTE15 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE20' THEN
			L_PERSON_REC.ATTRIBUTE20 := L_ATTRIBUTE_VALUE;
		     ELSIF L_ATTRIBUTE_NAME = 'ATTRIBUTE8' THEN
			L_PERSON_REC.ATTRIBUTE8 := L_ATTRIBUTE_VALUE;
		     END IF;

	End loop;
	Close get_person_rec_csr;
	L_PERSON_REC.PARTY_REC.PARTY_ID := P_MERGE_TO_PARTY_ID;
	X_person_rec := l_person_rec;
EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_MERGE_SQL_ERROR');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
    FND_MSG_PUB.ADD;
    x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
end construct_person_rec;

/* procedure called in HZ_MERGE_PKG */
PROCEDURE do_profile_attribute_merge(
        p_merge_batch_id        IN      NUMBER,
        p_merge_to_party_id     IN      NUMBER,
        p_entity_name           IN	VARCHAR2,
        x_return_status         OUT NOCOPY     VARCHAR2
) is

l_org_rec HZ_PARTY_V2PUB.ORGANIZATION_REC_TYPE;
l_person_rec HZ_PARTY_V2PUB.PERSON_REC_TYPE;
l_profile_id number;
l_msg_count number;
l_msg_data varchar2(2000);
l_object_version_number number;
l_attribute_party_id number;
l_party_id number;
l_orig_sys_ref varchar2(240);
l_automerge_flag varchar2(1);

	cursor get_obj_version_csr is
	select object_version_number,orig_system_reference
	from hz_parties
	where party_id = p_merge_to_party_id;

	cursor	get_attri_party_csr is
		select attribute_party_id
		from HZ_MERGE_ENTITY_ATTRIBUTES
		where merge_to_party_id = p_merge_to_party_id
		and entity_name = 'HZ_ORGANIZATION_PROFILES'
		and merge_batch_id = p_merge_batch_id
		and attribute_name = 'BUSINESS_REPORT';

	cursor get_automerge_flag_csr is
		select nvl(db.automerge_flag,'N')
		from hz_dup_batch db, hz_dup_sets ds
		where db.dup_batch_id = ds.dup_batch_id
		and ds.dup_set_id = p_merge_batch_id
		and rownum=1;

begin
	-- Initialize return status to SUCCESS
        x_return_status := FND_API.G_RET_STS_SUCCESS;

	open get_automerge_flag_csr;
    	fetch get_automerge_flag_csr into l_automerge_flag;
    	close get_automerge_flag_csr;

	if p_entity_name = 'HZ_ORGANIZATION_PROFILES'
	then
	   if l_automerge_flag = 'N' or (l_automerge_flag = 'Y' and  nvl(fnd_profile.value('HZ_PROF_ATTR_DEFAULT'), 'MASTER') <> 'MASTER')
    	  then
		open get_obj_version_csr;
		fetch get_obj_version_csr into l_object_version_number,l_orig_sys_ref;
		close get_obj_version_csr;

		Construct_organization_rec(p_merge_batch_id,p_merge_to_party_id,l_org_rec,x_return_status);

		Hz_party_v2pub.update_organization (
			p_init_msg_list         => FND_API.G_FALSE,
			p_organization_rec      => l_org_rec,
			p_party_object_version_number =>l_object_version_number,
			x_profile_id            => l_profile_id,
			x_return_status         => x_return_status,
			x_msg_count             => l_msg_count,
			x_msg_data              =>l_msg_data
		);

		open get_attri_party_csr;
		fetch get_attri_party_csr into l_attribute_party_id;
		close get_attri_party_csr;

		UPDATE hz_organization_profiles
	        SET business_report = (select business_report
					from hz_organization_profiles
					where party_id = l_attribute_party_id
			                and sysdate between effective_start_date and nvl(effective_end_date,sysdate)
					and rownum=1),
		    last_update_date = SYSDATE,
		    last_update_login = FND_GLOBAL.LOGIN_ID,
	            last_updated_by = FND_GLOBAL.USER_ID,
	            object_version_number = nvl(object_version_number,1)+1
		where party_id = p_merge_to_party_id
                and sysdate between effective_start_date and nvl(effective_end_date,sysdate);
	  end if; -- if l_automerge_flag = 'N'
	elsif  p_entity_name = 'HZ_PERSON_PROFILES' then
	 if l_automerge_flag = 'N' or (l_automerge_flag = 'Y' and  nvl(fnd_profile.value('HZ_PROF_ATTR_DEFAULT'), 'MASTER') <> 'MASTER')
    	 then
		open get_obj_version_csr;
		fetch get_obj_version_csr into l_object_version_number, l_orig_sys_ref;
		close get_obj_version_csr;

		Construct_person_rec(p_merge_batch_id, p_merge_to_party_id, l_orig_sys_ref,l_person_rec,x_return_status);

		Hz_party_v2pub.update_person (
			p_init_msg_list               => FND_API.G_FALSE,
			p_person_rec            => l_person_rec,
			p_party_object_version_number => l_object_version_number,
			x_profile_id                  => l_profile_id,
			x_return_status               => x_return_status,
			x_msg_count                   => l_msg_count,
			x_msg_data                    =>l_msg_data
		);
	   end if; -- if l_automerge_flag = 'N'
		-- update_org/person api doesn't allow update created_by_module
                -- per chris, call update directly.

		l_party_id :=null;
		l_party_id := get_healthCarePartyId(p_merge_batch_id);
		if  l_party_id is not null
		then
			update hz_person_profiles
			set created_by_module = 'CTB_PERSON_REGISTRY_SERVICES',
			    last_update_date = SYSDATE,
			    last_update_login = FND_GLOBAL.LOGIN_ID,
			    last_updated_by = FND_GLOBAL.USER_ID,
			    object_version_number = nvl(object_version_number,1)+1
			where party_id = p_merge_to_party_id
			and sysdate between effective_start_date and nvl(effective_end_date,sysdate);

		end if;
	end if;
	l_party_id := get_InternalFlagPartyId(p_merge_batch_id,p_entity_name);

	    if l_party_id is not null then
	    	update HZ_MERGE_ENTITY_ATTRIBUTES
	    	set  attribute_value =  'Y',
	    	attribute_party_id = l_party_id,
	    	last_update_date = SYSDATE,
	    	last_update_login = FND_GLOBAL.LOGIN_ID,
	    	last_updated_by = FND_GLOBAL.USER_ID,
	    	object_version_number = nvl(object_version_number,1)+1
	    	where attribute_name = 'INTERNAL_FLAG'
	    	and merge_batch_id = p_merge_batch_id
	    	and merge_to_party_id = p_merge_to_party_id;
             end if;


EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_MERGE_SQL_ERROR');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
    FND_MSG_PUB.ADD;
    x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;

end do_profile_attribute_merge;

-- private procedures, called in create_merge_attributes

function get_attribute_value(p_attribute_name in varchar2, p_party_id in number,p_entity_name in varchar2)
return varchar2 is

l_str varchar2(2000);
l_value varchar2(2000);

begin
	if (instr(p_attribute_name,'TIME') > 0 or instr(p_attribute_name,'DATE')> 0 )
		and (p_attribute_name not in ('LAST_UPDATED_BY', 'LAST_UPDATE_LOGIN')) -- bug 4726700
	then
		l_str := 'select to_char('||p_attribute_name||','||'''YYYY/MM/DD'')'||
		 ' from '||p_entity_name||
		 ' where party_id = :party_id'||
		 ' and sysdate between effective_start_date and nvl(effective_end_date,sysdate)';
		-- fnd_file.put_line(fnd_file.log, l_str);
		 execute immediate l_str into l_value using p_party_id;

        else
		l_str := 'select to_char('||p_attribute_name||')'||
		 ' from '||p_entity_name||
		 ' where party_id = :party_id'||
		 ' and sysdate between effective_start_date and nvl(effective_end_date,sysdate)';
		 --fnd_file.put_line(fnd_file.log, l_str);
		 execute immediate l_str into l_value using p_party_id;
	end if;
	return l_value;
end;

-- private procedure. Group includes both single attribute group and multi attributes group
procedure update_group_attribute_value(p_attribute_name in varchar2,
					p_candidate_party_id in number,
					p_merge_batch_id        IN      NUMBER,
					p_merge_to_party_id     IN      NUMBER,
					p_derived_last_update_date IN DATE,
					p_entity_name           IN VARCHAR2,
					p_proc_type IN VARCHAR2 DEFAULT 'C') is

	-- get all attributes for the passing in group leader attribute name
	cursor get_group_attributes_csr(p_attribute_name varchar2, p_lookup_type varchar2) is
		select c1.lookup_code
		from ar_lookups c, ar_lookups t, ar_lookups c1
		where c.lookup_type = t.lookup_code
		and c1.lookup_type = t.lookup_code
		and substrb(c.externally_visible_flag,6,3) = substrb(c1.externally_visible_flag,6,3)
		and c.lookup_type = c1.lookup_type
		and t.lookup_type = p_lookup_type
		and c.lookup_code = p_attribute_name
		and c1.enabled_flag = 'Y';

l_group_attribute_name varchar2(150);
l_attribute_name varchar2(30);
l_value varchar2(2000);
l_lookup_type varchar2(30);
begin
	if p_entity_name = 'HZ_ORGANIZATION_PROFILES'
	then
	     l_lookup_type := 'ORG_PROFILE_CATEGORY';
	elsif p_entity_name = 'HZ_PERSON_PROFILES'
	then l_lookup_type := 'PERSON_PROFILE_CATEGORY';
	end if;
	open get_group_attributes_csr(p_attribute_name,l_lookup_type);
	loop
		fetch get_group_attributes_csr into l_group_attribute_name;
		exit when get_group_attributes_csr%NOTFOUND;
		l_value := get_attribute_value(l_group_attribute_name,p_candidate_party_id,p_entity_name);

	     if p_proc_type = 'C'
	     then
		update hz_merge_entity_attributes
		set    attribute_value = l_value, -- l_value has already formatted
		--attribute_value = decode(attribute_type,'D',to_char(to_date(l_value),'YYYY/MM/DD'),l_value), -- Bug No:3729832
			attribute_party_id = p_candidate_party_id,
			derived_last_update_date = p_derived_last_update_date,
			last_update_date = SYSDATE,
			last_update_login = FND_GLOBAL.LOGIN_ID,
			last_updated_by = FND_GLOBAL.USER_ID,
			object_version_number = nvl(object_version_number,1)+1
		where attribute_name = l_group_attribute_name
		and merge_batch_id = p_merge_batch_id
		and entity_name = p_entity_name
		and merge_to_party_id =p_merge_to_party_id
		and attribute_value is null;
	     else
	       	update hz_merge_entity_attributes
		set    attribute_value = l_value, -- l_value has already formatted
		--attribute_value = decode(attribute_type,'D',to_char(to_date(l_value),'YYYY/MM/DD'),l_value), -- Bug No:3729832
			attribute_party_id = p_candidate_party_id,
			derived_last_update_date = p_derived_last_update_date,
			last_update_date = SYSDATE,
			last_update_login = FND_GLOBAL.LOGIN_ID,
			last_updated_by = FND_GLOBAL.USER_ID,
			object_version_number = nvl(object_version_number,1)+1
		where attribute_name = l_group_attribute_name
		and merge_batch_id = p_merge_batch_id
		and entity_name = p_entity_name
		and merge_to_party_id =p_merge_to_party_id;
	     end if;

	end loop;
	close get_group_attributes_csr;
end;

/* Profile attribute merge defaulting rule:
Default to selected party profile attribute values which are not null.
For nullable leader attribute values, default to candidate party
profile attribute values based on profile values, also, update master party
profile to leader attribute group values.*/

procedure default_attribute_values(
        p_merge_batch_id        IN      NUMBER,
        p_merge_to_party_id     IN      NUMBER,
        p_entity_name           IN VARCHAR2) is

	-- get master party attributes where leader is null
	cursor get_leader_attribute_name_csr(p_lookup_type varchar2) is
		select attri.attribute_name
		from hz_merge_entity_attributes attri, ar_lookups c, ar_lookups t
		where attri.attribute_name = c.lookup_code
		and c.lookup_type = t.lookup_code
		and t.lookup_type = p_lookup_type
		and attribute_value is null and substrb(c.externally_visible_flag,10,1) = 'L'
		and merge_batch_id = p_merge_batch_id
		and merge_to_party_id = p_merge_to_party_id
		and c.enabled_flag = 'Y';

	-- get candidate parties with desc order for last update date
	cursor get_org_candidate_party_csr is
		select mp.from_party_id, pro.last_update_date
		from hz_organization_profiles pro, hz_merge_parties mp
		where pro.party_id = mp.from_party_id
		and mp.batch_id = p_merge_batch_id
		and sysdate between pro.effective_start_date and nvl(pro.effective_end_date,sysdate)
		order by pro.last_update_date desc;

	-- get candidate parties with desc order for latest creation date
	cursor get_org_candidate_party_lc_csr is
		select mp.from_party_id, pro.last_update_date
		from hz_organization_profiles pro, hz_merge_parties mp
		where pro.party_id = mp.from_party_id
		and mp.batch_id = p_merge_batch_id
		and sysdate between pro.effective_start_date and nvl(pro.effective_end_date,sysdate)
		order by pro.creation_date desc, pro.party_id desc;

	-- get candidate parties with desc order for earlist creation date
	cursor get_org_candidate_party_ec_csr is
		select mp.from_party_id, pro.last_update_date
		from hz_organization_profiles pro, hz_merge_parties mp
		where pro.party_id = mp.from_party_id
		and mp.batch_id = p_merge_batch_id
		and sysdate between pro.effective_start_date and nvl(pro.effective_end_date,sysdate)
		order by pro.creation_date, pro.party_id;

	-- get candidate parties with desc order for last update date
        cursor get_per_candidate_party_csr is
                select mp.from_party_id, pro.last_update_date
                from hz_person_profiles pro, hz_merge_parties mp
                where pro.party_id = mp.from_party_id
                and mp.batch_id = p_merge_batch_id
                and sysdate between pro.effective_start_date and nvl(pro.effective_end_date,sysdate)
                order by pro.last_update_date desc;

	-- get candidate parties with desc order for last creation date
        cursor get_per_candidate_party_lc_csr is
                select mp.from_party_id, pro.last_update_date
                from hz_person_profiles pro, hz_merge_parties mp
                where pro.party_id = mp.from_party_id
                and mp.batch_id = p_merge_batch_id
                and sysdate between pro.effective_start_date and nvl(pro.effective_end_date,sysdate)
                order by pro.creation_date desc, pro.party_id desc;

	-- get candidate parties with desc order for earlist creation date
        cursor get_per_candidate_party_ec_csr is
                select mp.from_party_id, pro.last_update_date
                from hz_person_profiles pro, hz_merge_parties mp
                where pro.party_id = mp.from_party_id
                and mp.batch_id = p_merge_batch_id
                and sysdate between pro.effective_start_date and nvl(pro.effective_end_date,sysdate)
                order by pro.creation_date, pro.party_id;


l_attribute_name varchar2(30);
l_party_id number;
l_last_update_date DATE;
l_value varchar2(2000);
l_str varchar2(2000);
l_group_attribute_name varchar2(2000);
l_attri_def_prof varchar2(30);
l_attri_def_next_prof varchar2(30);
begin

--	l_attri_def_prof := nvl(fnd_profile.value('HZ_PROF_ATTR_DEFAULT'), 'MASTER');
	l_attri_def_next_prof := nvl(fnd_profile.value('HZ_PROF_ATTR_DEFAULT_NEXT'), 'LATEST_UPDATE_DATE');

	if p_entity_name = 'HZ_ORGANIZATION_PROFILES'
	then
		open get_leader_attribute_name_csr('ORG_PROFILE_CATEGORY');
		loop
			fetch get_leader_attribute_name_csr into l_attribute_name;
			exit when get_leader_attribute_name_csr%NOTFOUND;

			/************* LATEST_UPDATE_DATE CASE **************/

			if l_attri_def_next_prof = 'LATEST_UPDATE_DATE'
			then
			   open get_org_candidate_party_csr;
			   loop
				fetch get_org_candidate_party_csr into l_party_id,l_last_update_date;
				exit when get_org_candidate_party_csr%NOTFOUND;
				if l_attribute_name in ('EMPLOYEES_TOTAL','TOTAL_EMPLOYEES_TEXT')
				then
					l_value := get_attribute_value('EMPLOYEES_TOTAL', l_party_id,p_entity_name)||
					           get_attribute_value('TOTAL_EMPLOYEES_TEXT', l_party_id,p_entity_name);
				elsif l_attribute_name in ('EMP_AT_PRIMARY_ADR','EMP_AT_PRIMARY_ADR_TEXT')
				then
					l_value := get_attribute_value('EMP_AT_PRIMARY_ADR', l_party_id,p_entity_name)||
					           get_attribute_value('EMP_AT_PRIMARY_ADR_TEXT', l_party_id, p_entity_name);
				else
					l_value := get_attribute_value(l_attribute_name, l_party_id,p_entity_name);
				end if;
				if l_value is not null
				then
					update_group_attribute_value(p_attribute_name=>l_attribute_name,
					p_candidate_party_id => l_party_id,
					p_merge_batch_id    => p_merge_batch_id,
					p_merge_to_party_id =>p_merge_to_party_id,
					p_derived_last_update_date => l_last_update_date,
					p_entity_name       => p_entity_name);

					exit; -- exit from the second loop

				end if;
			   end loop; -- for each candidate party desc on last update date
			   close get_org_candidate_party_csr;
			end if; -- latest update date case

			/************* LATEST_CREATION_DATE CASE **************/

			if l_attri_def_next_prof = 'LATEST_CREATION_DATE'
			then
			   open get_org_candidate_party_lc_csr;
			   loop
				fetch get_org_candidate_party_lc_csr into l_party_id,l_last_update_date;
				exit when get_org_candidate_party_lc_csr%NOTFOUND;
				if l_attribute_name in ('EMPLOYEES_TOTAL','TOTAL_EMPLOYEES_TEXT')
				then
					l_value := get_attribute_value('EMPLOYEES_TOTAL', l_party_id,p_entity_name)||
					           get_attribute_value('TOTAL_EMPLOYEES_TEXT', l_party_id,p_entity_name);
				elsif l_attribute_name in ('EMP_AT_PRIMARY_ADR','EMP_AT_PRIMARY_ADR_TEXT')
				then
					l_value := get_attribute_value('EMP_AT_PRIMARY_ADR', l_party_id,p_entity_name)||
					           get_attribute_value('EMP_AT_PRIMARY_ADR_TEXT', l_party_id, p_entity_name);
				else
					l_value := get_attribute_value(l_attribute_name, l_party_id,p_entity_name);
				end if;
				if l_value is not null
				then
					update_group_attribute_value(p_attribute_name=>l_attribute_name,
					p_candidate_party_id => l_party_id,
					p_merge_batch_id    => p_merge_batch_id,
					p_merge_to_party_id =>p_merge_to_party_id,
					p_derived_last_update_date => l_last_update_date,
					p_entity_name       => p_entity_name);

					exit; -- exit from the second loop

				end if;
			   end loop; -- for each candidate party desc on last creation date
			   close get_org_candidate_party_lc_csr;
			end if; -- latest creation date case

			/************* EARLIEST_CREATION_DATE CASE **************/

			if l_attri_def_next_prof = 'EARLIEST_CREATION_DATE'
			then
			   open get_org_candidate_party_ec_csr;
			   loop
				fetch get_org_candidate_party_ec_csr into l_party_id,l_last_update_date;
				exit when get_org_candidate_party_ec_csr%NOTFOUND;
				if l_attribute_name in ('EMPLOYEES_TOTAL','TOTAL_EMPLOYEES_TEXT')
				then
					l_value := get_attribute_value('EMPLOYEES_TOTAL', l_party_id,p_entity_name)||
					           get_attribute_value('TOTAL_EMPLOYEES_TEXT', l_party_id,p_entity_name);
				elsif l_attribute_name in ('EMP_AT_PRIMARY_ADR','EMP_AT_PRIMARY_ADR_TEXT')
				then
					l_value := get_attribute_value('EMP_AT_PRIMARY_ADR', l_party_id,p_entity_name)||
					           get_attribute_value('EMP_AT_PRIMARY_ADR_TEXT', l_party_id, p_entity_name);
				else
					l_value := get_attribute_value(l_attribute_name, l_party_id,p_entity_name);
				end if;
				if l_value is not null
				then
					update_group_attribute_value(p_attribute_name=>l_attribute_name,
					p_candidate_party_id => l_party_id,
					p_merge_batch_id    => p_merge_batch_id,
					p_merge_to_party_id =>p_merge_to_party_id,
					p_derived_last_update_date => l_last_update_date,
					p_entity_name       => p_entity_name);

					exit; -- exit from the second loop

				end if;
			   end loop; -- for each candidate party desc on earliest creation date
			   close get_org_candidate_party_ec_csr;
			end if; -- earliest creation date case

		end loop;
		close get_leader_attribute_name_csr;
	elsif p_entity_name = 'HZ_PERSON_PROFILES'
	then
		open get_leader_attribute_name_csr('PERSON_PROFILE_CATEGORY');
                loop
			fetch get_leader_attribute_name_csr into l_attribute_name;
                        exit when get_leader_attribute_name_csr%NOTFOUND;

			/************* LATEST_UPDATE_DATE CASE **************/

			if (l_attri_def_next_prof = 'LATEST_UPDATE_DATE')
			then
			   open get_per_candidate_party_csr;
			   loop
				fetch get_per_candidate_party_csr into l_party_id,l_last_update_date;
				exit when get_per_candidate_party_csr%NOTFOUND;
				l_value := get_attribute_value(l_attribute_name, l_party_id,p_entity_name);

				if l_value is not null
				then
					update_group_attribute_value(p_attribute_name=>l_attribute_name,
					p_candidate_party_id => l_party_id,
					p_merge_batch_id    => p_merge_batch_id,
					p_merge_to_party_id => p_merge_to_party_id,
	                  		p_derived_last_update_date => l_last_update_date,
					p_entity_name       => p_entity_name);
					exit; -- exit from the second loop
				end if;
			end loop; -- for each candidate party desc on last update date
			close get_per_candidate_party_csr;
		    end if; -- person lastest update date case

		/************* LATEST_CREATION_DATE CASE **************/

			if (l_attri_def_next_prof = 'LATEST_CREATION_DATE')
			then
			   open get_per_candidate_party_lc_csr;
			   loop
				fetch get_per_candidate_party_lc_csr into l_party_id,l_last_update_date;
				exit when get_per_candidate_party_lc_csr%NOTFOUND;
				l_value := get_attribute_value(l_attribute_name, l_party_id,p_entity_name);

				if l_value is not null
				then
					update_group_attribute_value(p_attribute_name=>l_attribute_name,
					p_candidate_party_id => l_party_id,
					p_merge_batch_id    => p_merge_batch_id,
					p_merge_to_party_id => p_merge_to_party_id,
	                  		p_derived_last_update_date => l_last_update_date,
					p_entity_name       => p_entity_name);
					exit; -- exit from the second loop
				end if;
			end loop; -- for each candidate party desc on last creation date
			close get_per_candidate_party_lc_csr;
		    end if; -- person lastest creation date case

		     /************* EARLIEST_CREATION_DATE CASE **************/

			if (l_attri_def_next_prof = 'EARLIEST_CREATION_DATE')
			then
			   open get_per_candidate_party_ec_csr;
			   loop
				fetch get_per_candidate_party_ec_csr into l_party_id,l_last_update_date;
				exit when get_per_candidate_party_ec_csr%NOTFOUND;
				l_value := get_attribute_value(l_attribute_name, l_party_id,p_entity_name);

				if l_value is not null
				then
					update_group_attribute_value(p_attribute_name=>l_attribute_name,
					p_candidate_party_id => l_party_id,
					p_merge_batch_id    => p_merge_batch_id,
					p_merge_to_party_id => p_merge_to_party_id,
	                  		p_derived_last_update_date => l_last_update_date,
					p_entity_name       => p_entity_name);
					exit; -- exit from the second loop
				end if;
			end loop; -- for each candidate party desc on last creation date
			close get_per_candidate_party_ec_csr;
		    end if; -- person earliest creation date case

		end loop;
		close get_leader_attribute_name_csr;
	end if;
end;

procedure default_business_report(
        p_merge_batch_id        IN      NUMBER,
        p_merge_to_party_id     IN      NUMBER) is

	cursor master_business_rpt_csr is
		select 'x'
		from hz_organization_profiles
		where party_id = p_merge_to_party_id
		and business_report is not null
		and sysdate between effective_start_date and nvl(effective_end_date,sysdate);

	-- get candidate parties with desc order for last update date
	cursor get_business_report_party_csr is
		select mp.from_party_id, pro.last_update_date
		from hz_organization_profiles pro, hz_merge_parties mp
		where pro.party_id = mp.from_party_id
		and mp.batch_id = p_merge_batch_id
		and pro.business_report is not null
		and sysdate between pro.effective_start_date and nvl(pro.effective_end_date,sysdate)
		order by pro.last_update_date desc;

l_from_party_id number;
l_last_update_date date;
l_tmp varchar2(1);
begin
	open master_business_rpt_csr;
	fetch master_business_rpt_csr into l_tmp;
	if master_business_rpt_csr%NOTFOUND
	then
		open get_business_report_party_csr;
		loop
			fetch get_business_report_party_csr into l_from_party_id, l_last_update_date;
			exit when get_business_report_party_csr%NOTFOUND;

			update hz_merge_entity_attributes
			set     attribute_party_id = l_from_party_id,
				last_update_date = SYSDATE,
				last_update_login = FND_GLOBAL.LOGIN_ID,
				last_updated_by = FND_GLOBAL.USER_ID,
				object_version_number = nvl(object_version_number,1)+1,
				derived_last_update_date = l_last_update_date
			where attribute_name = 'BUSINESS_REPORT'
			and merge_batch_id = p_merge_batch_id
			and entity_name = 'HZ_ORGANIZATION_PROFILES'
			and merge_to_party_id =p_merge_to_party_id;

			close master_business_rpt_csr;
			close get_business_report_party_csr;
			return; -- only need to get the first party_id which has latest update date.
		end loop;
	end if;
	close master_business_rpt_csr;
end;


PROCEDURE default_most_occur_attri(
        p_merge_batch_id        IN      NUMBER,
        p_merge_to_party_id     IN      NUMBER,
        p_entity_name           IN VARCHAR2,
        x_return_status         OUT NOCOPY          VARCHAR2,
        x_msg_count            	OUT NOCOPY     	NUMBER,
        x_msg_data              OUT NOCOPY     	VARCHAR2
) is
	cursor get_entity_attri_csr(l_table_name varchar2)
	    is
	select col.column_name, col.column_type
	from fnd_tables tbl, fnd_columns col
	where tbl.table_id = col.table_id
	and tbl.table_name = l_table_name
	-- adding the following clause for performance 4956759
	and tbl.application_id = 222
	and tbl.application_id = col.application_id;

l_attri_value varchar2(2000);
l_attri_def_prof varchar2(30);
l_attri_def_next_prof varchar2(30);
l_col_name varchar2(30);
l_col_type varchar2(1);
l_value_count number;
l_max_count number;
l_date_clause varchar2(30);
l_order_by_clause varchar2(80);
l_str varchar2(2000);
l_attri_party_id number;
l_derived_date date;
begin
	x_return_status := fnd_api.g_ret_sts_success;
	l_attri_def_next_prof := nvl(fnd_profile.value('HZ_PROF_ATTR_DEFAULT_NEXT'), 'LATEST_UPDATE_DATE');
	if l_attri_def_next_prof = 'LATEST_UPDATE_DATE'
	then
		l_date_clause := 'LAST_UPDATE_DATE';
		l_order_by_clause := ' order by LAST_UPDATE_DATE DESC';
	elsif l_attri_def_next_prof = 'LATEST_CREATION_DATE'
	then
		l_date_clause := 'CREATION_DATE';
		l_order_by_clause := ' order by CREATION_DATE DESC, PARTY_ID DESC';
                -- added sec. order by due to import bug for creation_date - time truncated
	elsif l_attri_def_next_prof = 'EARLIEST_CREATION_DATE'
	then
		l_date_clause := 'CREATION_DATE';
		l_order_by_clause := ' order by CREATION_DATE, PARTY_ID';
	end if;

	open get_entity_attri_csr(p_entity_name);
        loop
	-- need to use d-sql in a loop in order to get
        -- attribute_value(table column value) from profile table

	fetch get_entity_attri_csr into l_col_name,l_col_type;
        exit when get_entity_attri_csr %NOTFOUND;
	if p_entity_name = 'HZ_ORGANIZATION_PROFILES'
	then
	     if l_col_name <> 'BUSINESS_REPORT'
	     then
		l_str := 'select party_id,  decode('''||l_col_type||''',''D'',to_char(attri_value,''YYYY/MM/DD''),attri_value)  from '||
		'(SELECT party_id, attri_value, rank() over (order by cntAttri desc) rank, '||l_date_clause || ' from '||
		'(SELECT OP.PARTY_ID, OP.'||l_col_name||' attri_value, count(*) over (partition by OP.'||l_col_name||') as cntAttri, '||'op.'||l_date_clause||
	' from HZ_ORGANIZATION_PROFILES OP,HZ_PARTIES PARTY, HZ_DUP_SETS DS, HZ_DUP_SET_PARTIES DSP, HZ_DUP_BATCH DB '||
	'WHERE OP.PARTY_ID =DSP.DUP_PARTY_ID AND DB.DUP_BATCH_ID = DS.DUP_BATCH_ID '||
	'AND DS.DUP_SET_ID = DSP.DUP_SET_ID AND OP.PARTY_ID = PARTY.PARTY_ID '||
	'AND sysdate between effective_start_date and nvl(effective_end_date,sysdate) '||
	'AND OP.'||l_col_name||' is not null '||
        'AND nvl(merge_flag, ''Y'') <> ''N'' AND DSP.DUP_SET_ID= '||':p_merge_batch_id'||')' || l_order_by_clause||')'
	||' where rank = 1 and rownum=1' ;  --added rownum=1, in case same create/update date for rank = 1

		-- fnd_file.put_line(fnd_file.log, l_str);
	     end if; -- <> 'BUSINESS_REPORT'
	else -- PERSON CASE
          	l_str := 'select party_id,  decode('''||l_col_type||''',''D'',to_char(attri_value,''YYYY/MM/DD''),attri_value)  from '||
		'(SELECT party_id, attri_value, rank() over (order by cntAttri desc) rank, '||l_date_clause || ' from '||
		'(SELECT OP.PARTY_ID, OP.'||l_col_name||' attri_value, count(*) over (partition by OP.'||l_col_name||') as cntAttri, '||'op.'||l_date_clause||
	' from HZ_PERSON_PROFILES OP,HZ_PARTIES PARTY, HZ_DUP_SETS DS, HZ_DUP_SET_PARTIES DSP, HZ_DUP_BATCH DB '||
	'WHERE OP.PARTY_ID =DSP.DUP_PARTY_ID AND DB.DUP_BATCH_ID = DS.DUP_BATCH_ID '||
	'AND DS.DUP_SET_ID = DSP.DUP_SET_ID AND OP.PARTY_ID = PARTY.PARTY_ID '||
	'AND sysdate between effective_start_date and nvl(effective_end_date,sysdate) '||
	'AND OP.'||l_col_name||' is not null '||
        'AND nvl(merge_flag, ''Y'') <> ''N'' AND DSP.DUP_SET_ID= '||':p_merge_batch_id'||')' || l_order_by_clause||')'
	||' where rank = 1 and rownum=1' ;  --added rownum=1, in case same create/update date for rank = 1

		--fnd_file.put_line(fnd_file.log, l_str);
	end if;
       BEGIN
	execute immediate l_str into l_attri_party_id, l_attri_value using p_merge_batch_id;
	-- fnd_file.put_line(fnd_file.log, l_attri_value || l_col_name);
       EXCEPTION
       WHEN NO_DATA_FOUND THEN
        l_attri_party_id := p_merge_to_party_id;
        l_attri_value := null;
       WHEN OTHERS THEN
        l_attri_party_id := p_merge_to_party_id;
        l_attri_value := null;
       END;
	if l_col_name <> 'BUSINESS_REPORT'
	then
		l_derived_date := get_party_last_upd_date(l_attri_party_id,p_entity_name);
		insert into hz_merge_entity_attributes(
				MERGE_BATCH_ID,
				MERGE_TO_PARTY_ID,
				ATTRIBUTE_NAME,
				ATTRIBUTE_VALUE,
				ATTRIBUTE_TYPE,
				ATTRIBUTE_PARTY_ID,
				ENTITY_NAME,
				DERIVED_LAST_UPDATE_DATE,
				OBJECT_VERSION_NUMBER,
				CREATED_BY ,
				CREATION_DATE ,
				LAST_UPDATED_BY,
				LAST_UPDATE_LOGIN,
				LAST_UPDATE_DATE) values
				(p_merge_batch_id,
				p_merge_to_party_id,
				l_col_name,
				l_attri_value,
				l_col_type,
	                        l_attri_party_id,
				p_entity_name,
				l_derived_date,
                                1,
				nvl(fnd_global.user_id,-1),
				sysdate,
				nvl(fnd_global.user_id,-1),
				nvl(fnd_global.login_id,-1),
				sysdate);
	end if;

    end loop;

EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_MERGE_SQL_ERROR');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
    FND_MSG_PUB.ADD;
    x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;

end;

/* private API */
PROCEDURE create_merge_attributes(
        p_merge_batch_id        IN      NUMBER,
        p_merge_to_party_id     IN      NUMBER,
        p_entity_name           IN VARCHAR2,
        x_return_status         OUT NOCOPY          VARCHAR2,
        x_msg_count            	OUT NOCOPY     	NUMBER,
        x_msg_data              OUT NOCOPY     	VARCHAR2
) is
	cursor get_entity_attri_csr(l_table_name varchar2) is
		select col.column_name, col.column_type
		from fnd_tables tbl, fnd_columns col
		where tbl.table_id = col.table_id
		and tbl.table_name = l_table_name
		-- adding the following clause for performance 4956759
	    and tbl.application_id = 222
	    and tbl.application_id = col.application_id;

	-- get party with latest update date
	cursor get_party_id_lu_csr is
		select party_id
 		from(
 			select pro.party_id party_id,
			RANK() OVER (ORDER BY pro.last_update_date desc ) rank
			from hz_parties pro, hz_dup_set_parties mp
			where pro.party_id = mp.dup_party_id
			and mp.dup_set_id = p_merge_batch_id)
	        where rank = 1 and rownum=1;

	-- get party with latest creation date
	cursor get_party_id_lc_csr is
		select party_id
 		from(
 			select pro.party_id party_id,
			RANK() OVER (ORDER BY pro.creation_date desc, pro.party_id desc ) rank
			from hz_parties pro, hz_dup_set_parties mp
			where pro.party_id = mp.dup_party_id
			and mp.dup_set_id = p_merge_batch_id)
	        where rank = 1;

		-- note: use second order by party id for all creation date related query due to bug in import-time trunc out

		-- get party with earlist creation date
		cursor get_party_id_ec_csr is
		select party_id
 		from(
 			select pro.party_id party_id,
			RANK() OVER (ORDER BY pro.creation_date, pro.party_id ) rank
			from hz_parties pro, hz_dup_set_parties mp
			where pro.party_id = mp.dup_party_id
			and mp.dup_set_id = p_merge_batch_id)
	        where rank = 1;


l_col_name varchar2(30);
l_col_type varchar2(1);
str varchar2(2000);
l_party_id number;
l_col_name_var varchar2(30);
l_prof_value varchar2(30);
l_selected_party_id number;
begin
	savepoint create_merge_attributes_pvt;
	-- Initialize return status to SUCCESS
        x_return_status := FND_API.G_RET_STS_SUCCESS;

	if p_entity_name not in ('HZ_ORGANIZATION_PROFILES','HZ_PERSON_PROFILES')
	then
		FND_MESSAGE.SET_NAME( 'AR', 'HZ_INVALID_ENTITY_NAME' );
		FND_MSG_PUB.ADD;
		RAISE FND_API.G_EXC_ERROR;
	end if;

	l_prof_value := nvl(fnd_profile.value('HZ_PROF_ATTR_DEFAULT'), 'MASTER');
	--dbms_output.put_line('profile value '|| l_prof_value);
	if l_prof_value = 'MASTER'
	then l_selected_party_id := p_merge_to_party_id;
	elsif l_prof_value = 'LATEST_UPDATE_DATE'
	then
		open get_party_id_lu_csr;
		fetch get_party_id_lu_csr into l_selected_party_id;
		close get_party_id_lu_csr;
	elsif l_prof_value = 'LATEST_CREATION_DATE'
	then
		open get_party_id_lc_csr;
		fetch get_party_id_lc_csr into l_selected_party_id;
		close get_party_id_lc_csr;

	elsif l_prof_value = 'EARLIEST_CREATION_DATE'
	then
		open get_party_id_ec_csr;
		fetch get_party_id_ec_csr into l_selected_party_id;
		close get_party_id_ec_csr;
	elsif l_prof_value = 'MOST_OCCURRING'
	then
		default_most_occur_attri(
        	p_merge_batch_id        => p_merge_batch_id,
        	p_merge_to_party_id      => p_merge_to_party_id,
        	p_entity_name            => p_entity_name,
        	x_return_status          => x_return_status,
		x_msg_count            	 => x_msg_count,
        	x_msg_data               => x_msg_data
		);

		if x_return_status = fnd_api.g_ret_sts_success
		then
			return; -- done all of the logic for this defaulting rule.
		elsif x_return_status = fnd_api.g_ret_sts_unexp_error
		then
			raise fnd_api.g_exc_unexpected_error;
		end if;

	end if;


	-- handle business report with seperate logic
	open get_entity_attri_csr(p_entity_name);
        loop
		-- need to use d-sql in a loop in order to get
                -- attribute_value(table column value) from profile table

		fetch get_entity_attri_csr into l_col_name,l_col_type;
                exit when get_entity_attri_csr %NOTFOUND;
		if l_col_name = 'BUSINESS_REPORT'
		then
			insert into hz_merge_entity_attributes(
				MERGE_BATCH_ID,
				MERGE_TO_PARTY_ID,
				ATTRIBUTE_NAME,
				ATTRIBUTE_VALUE,
				ATTRIBUTE_TYPE,
				ATTRIBUTE_PARTY_ID,
				ENTITY_NAME,
				DERIVED_LAST_UPDATE_DATE,
				OBJECT_VERSION_NUMBER,
				CREATED_BY ,
				CREATION_DATE ,
				LAST_UPDATED_BY,
				LAST_UPDATE_LOGIN,
				LAST_UPDATE_DATE) select
				p_merge_batch_id,
				p_merge_to_party_id,
				'BUSINESS_REPORT',
				'CLOB',
				l_col_type,
	                        p_merge_to_party_id,
				p_entity_name,
				last_update_date,
                                1,
				nvl(fnd_global.user_id,-1),
				sysdate,
				nvl(fnd_global.user_id,-1),
				nvl(fnd_global.login_id,-1),
				sysdate
	                        from HZ_ORGANIZATION_PROFILES
	                        where party_id = l_selected_party_id
				and sysdate between effective_start_date and nvl(effective_end_date,sysdate);

				default_business_report(
					p_merge_batch_id=>p_merge_batch_id,
					p_merge_to_party_id  => p_merge_to_party_id);
		else
			-- need to use d-sql to get to_char(l_col_name) from entity table
			-- ex. select to_char(SIC_CODE) from hz_organization_profiles to get attribute_value

			str := 'insert into hz_merge_entity_attributes( '||
			'MERGE_BATCH_ID,'||
			'MERGE_TO_PARTY_ID,'||
			'ATTRIBUTE_NAME,'||
			'ATTRIBUTE_VALUE,'||
			'ATTRIBUTE_TYPE,'||
			'ATTRIBUTE_PARTY_ID,'||
			'ENTITY_NAME ,'||
			'DERIVED_LAST_UPDATE_DATE ,'||
			'OBJECT_VERSION_NUMBER,'||
			'CREATED_BY ,'||
			'CREATION_DATE ,'||
			'LAST_UPDATED_BY,'||
			'LAST_UPDATE_LOGIN,'||
			'LAST_UPDATE_DATE) '||
			'select '||
			p_merge_batch_id ||','||
			p_merge_to_party_id ||','||
			''''||l_col_name||''''||','||
			'decode('||''''||l_col_type||''''||',''D'','||'to_char('||l_col_name||','||'''YYYY/MM/DD'')'||','||'to_char('||l_col_name||')'||')'||','||

			''''||l_col_type||''''||','||
			l_selected_party_id ||','||
			''''||p_entity_name||''''||','||
			'last_update_date'||','||
			'1,'||
			'nvl(fnd_global.user_id,-1)'||','||
			'sysdate'||','||
			'nvl(fnd_global.user_id,-1)'||','||
			'nvl(fnd_global.login_id,-1)'||','||
			 'sysdate'||
			' from '|| p_entity_name ||
			' where party_id = '||':selected_party_id'||
			' and sysdate between effective_start_date and nvl(effective_end_date,sysdate)';

		        --fnd_file.put_line(fnd_file.log, str);
			EXECUTE IMMEDIATE str using l_selected_party_id;
		end if;
	end loop;
	close get_entity_attri_csr;

     default_attribute_values(
        p_merge_batch_id => p_merge_batch_id,
        p_merge_to_party_id => p_merge_to_party_id,
        p_entity_name   => p_entity_name);

     if  p_entity_name = 'HZ_PERSON_PROFILES' then
	l_party_id :=null;
	l_party_id := get_healthCarePartyId(p_merge_batch_id);
	if  l_party_id is not null then
		update HZ_MERGE_ENTITY_ATTRIBUTES
		set  attribute_value =  'CTB_PERSON_REGISTRY_SERVICES',
		     attribute_party_id = l_party_id,
		     last_update_date = SYSDATE,
		     last_update_login = FND_GLOBAL.LOGIN_ID,
		     last_updated_by = FND_GLOBAL.USER_ID,
		     object_version_number = nvl(object_version_number,1)+1
		where attribute_name = 'CREATED_BY_MODULE'
		and merge_batch_id = p_merge_batch_id
		and merge_to_party_id = p_merge_to_party_id;

	end if;
    end if;
    l_party_id := get_InternalFlagPartyId(p_merge_batch_id,p_entity_name);

    if l_party_id is not null then
    	update HZ_MERGE_ENTITY_ATTRIBUTES
    	set  attribute_value =  'Y',
    	attribute_party_id = l_party_id,
    	last_update_date = SYSDATE,
    	last_update_login = FND_GLOBAL.LOGIN_ID,
    	last_updated_by = FND_GLOBAL.USER_ID,
    	object_version_number = nvl(object_version_number,1)+1
    	where attribute_name = 'INTERNAL_FLAG'
    	and merge_batch_id = p_merge_batch_id
    	and merge_to_party_id = p_merge_to_party_id;
    end if;




EXCEPTION

   WHEN FND_API.G_EXC_ERROR THEN
     ROLLBACK TO create_merge_attributes_pvt;
     x_return_status := FND_API.G_RET_STS_ERROR;
     FND_MSG_PUB.Count_And_Get(
        p_encoded => FND_API.G_FALSE,
        p_count => x_msg_count,
        p_data  => x_msg_data);

   WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
     ROLLBACK TO create_merge_attributes_pvt;
     x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
     FND_MSG_PUB.Count_And_Get(
        p_encoded => FND_API.G_FALSE,
        p_count => x_msg_count,
        p_data  => x_msg_data);

   WHEN OTHERS THEN
     ROLLBACK TO create_merge_attributes_pvt;
     x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
     FND_MESSAGE.SET_NAME('AR', 'HZ_API_OTHERS_EXCEP');
     FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
     FND_MSG_PUB.ADD;
     FND_MSG_PUB.Count_And_Get(
        p_encoded => FND_API.G_FALSE,
        p_count => x_msg_count,
        p_data  => x_msg_data);

end create_merge_attributes;

function is_leading_attribute(p_attribute_name in varchar2, p_lookup_type in varchar2) return varchar2 is
	cursor get_leading_attri_csr is
		select 'X'
		from ar_lookups c,
		ar_lookups t
		where c.lookup_type = t.lookup_code
		and c.enabled_flag = 'Y'
		and t.lookup_type = p_lookup_type
		and substrb(c.externally_visible_flag,10,1) = 'L'
		and c.lookup_code = p_attribute_name;

l_tmp varchar2(1);
begin
	open get_leading_attri_csr;
	fetch get_leading_attri_csr into l_tmp;
	if get_leading_attri_csr%FOUND
	then
		close get_leading_attri_csr;
		return 'Y';
	else
		close get_leading_attri_csr;
		return 'N';
	end if;
end;

/* private API */
PROCEDURE update_merge_attribute (
	p_merge_batch_id          IN      NUMBER,
        p_merge_to_party_id       IN      NUMBER,
	p_attribute_name	  IN	  VARCHAR2,
	p_attribute_value	  IN      VARCHAR2,
	p_attribute_party_id	  IN      NUMBER,
	p_entity_name		  IN      VARCHAR2,
	px_object_version_number  IN OUT NOCOPY    NUMBER,
        x_return_status           OUT NOCOPY     VARCHAR2,
	x_msg_count               OUT NOCOPY     NUMBER,
	x_msg_data                OUT NOCOPY     VARCHAR2
) is
	cursor get_obj_version_number_csr is
		select object_version_number
		from HZ_MERGE_ENTITY_ATTRIBUTES
		where merge_batch_id = p_merge_batch_id
		and merge_to_party_id = p_merge_to_party_id
		and entity_name = p_entity_name
		and attribute_name = p_attribute_name;

	cursor get_org_last_update_date_csr is
		select last_update_date
		from hz_organization_profiles
		where party_id = p_attribute_party_id
		and sysdate between effective_start_date and nvl(effective_end_date,sysdate);

	cursor get_per_last_update_date_csr is
		select last_update_date
		from hz_person_profiles
		where party_id = p_attribute_party_id
		and sysdate between effective_start_date and nvl(effective_end_date,sysdate);

l_object_version_number number;
l_last_update_date date;
l_lookup_type varchar2(30);

begin

	savepoint update_merge_attributes_pvt;
	-- Initialize return status to SUCCESS
        x_return_status := FND_API.G_RET_STS_SUCCESS;

	if p_entity_name = 'HZ_ORGANIZATION_PROFILES'
	then
	     l_lookup_type := 'ORG_PROFILE_CATEGORY';
	elsif p_entity_name = 'HZ_PERSON_PROFILES'
	then l_lookup_type := 'PERSON_PROFILE_CATEGORY';
	end if;

	if is_leading_attribute(p_attribute_name,l_lookup_type) = 'N'
	then
		/* if pass in attribute name is not leading attri, no update action */
		return;

	end if;

	open get_obj_version_number_csr;
	fetch get_obj_version_number_csr into l_object_version_number;
	close get_obj_version_number_csr;

	IF (l_object_version_number <> px_object_version_number) THEN
		IF FND_MSG_PUB.Check_Msg_Level(FND_MSG_PUB.G_MSG_LVL_ERROR) THEN
		-- row has been changed by another user.
			FND_MESSAGE.SET_NAME('AR', 'HZ_API_RECORD_CHANGED');
			FND_MESSAGE.SET_TOKEN('TABLE', 'HZ_MERGE_ENTITY_ATTRIBUTES');
			FND_MSG_PUB.ADD;
			RAISE FND_API.G_EXC_ERROR;
		END IF;
	END IF;

	px_object_version_number := nvl(l_object_version_number,1)+1;

	if p_entity_name = 'HZ_ORGANIZATION_PROFILES'
	then
		open get_org_last_update_date_csr;
		fetch get_org_last_update_date_csr into l_last_update_date;
		close get_org_last_update_date_csr;
	elsif p_entity_name = 'HZ_PERSON_PROFILES'
	then
		open get_per_last_update_date_csr;
		fetch get_per_last_update_date_csr into l_last_update_date;
		close get_per_last_update_date_csr;
	end if;
	if p_attribute_name in ('KNOWN_AS','KNOWN_AS2','KNOWN_AS3','KNOWN_AS4','KNOWN_AS5')
	then
	   update HZ_MERGE_ENTITY_ATTRIBUTES
	   set	attribute_value = p_attribute_value,
		attribute_party_id = p_attribute_party_id,
		derived_last_update_date = decode(p_attribute_party_id,null,SYSDATE,l_last_update_date),
		last_update_date = SYSDATE,
		last_update_login = FND_GLOBAL.LOGIN_ID,
		last_updated_by = FND_GLOBAL.USER_ID,
		object_version_number = px_object_version_number
	where attribute_name = p_attribute_name
		and merge_batch_id = p_merge_batch_id
		and merge_to_party_id = p_merge_to_party_id
		and entity_name = p_entity_name;
	else
	   if p_attribute_party_id is not null -- not user entered
	   then
		update_group_attribute_value(p_attribute_name=>p_attribute_name,
					p_candidate_party_id => p_attribute_party_id,
					p_merge_batch_id    => p_merge_batch_id,
					p_merge_to_party_id =>p_merge_to_party_id,
					p_derived_last_update_date => l_last_update_date,
					p_entity_name       => p_entity_name,
					p_proc_type => 'U');
		 update HZ_MERGE_ENTITY_ATTRIBUTES
		 set object_version_number = px_object_version_number
		 where attribute_name = p_attribute_name
		 and merge_batch_id = p_merge_batch_id
		 and merge_to_party_id = p_merge_to_party_id
		 and entity_name = p_entity_name;
	   end if;
       end if;

       UPDATE HZ_DUP_SETS
       SET STATUS = 'MAPPING',
           LAST_UPDATE_LOGIN = HZ_UTILITY_V2PUB.LAST_UPDATE_LOGIN,
           LAST_UPDATE_DATE = HZ_UTILITY_V2PUB.LAST_UPDATE_DATE,
           LAST_UPDATED_BY = HZ_UTILITY_V2PUB.LAST_UPDATED_BY,
	   object_version_number = nvl(object_version_number,1)+1
       WHERE DUP_SET_ID = p_merge_batch_id;

EXCEPTION

   WHEN FND_API.G_EXC_ERROR THEN
     ROLLBACK TO update_merge_attributes_pvt;
     x_return_status := FND_API.G_RET_STS_ERROR;
     FND_MSG_PUB.Count_And_Get(
        p_encoded => FND_API.G_FALSE,
        p_count => x_msg_count,
        p_data  => x_msg_data);

   WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
     ROLLBACK TO update_merge_attributes_pvt ;
     x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
     FND_MSG_PUB.Count_And_Get(
        p_encoded => FND_API.G_FALSE,
        p_count => x_msg_count,
        p_data  => x_msg_data);

   WHEN OTHERS THEN
     ROLLBACK TO update_merge_attributes_pvt;
     x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
     FND_MESSAGE.SET_NAME('AR', 'HZ_API_OTHERS_EXCEP');
     FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
     FND_MSG_PUB.ADD;
     FND_MSG_PUB.Count_And_Get(
        p_encoded => FND_API.G_FALSE,
        p_count => x_msg_count,
        p_data  => x_msg_data);

end update_merge_attribute;

/* This function is called in profile attribute merge UI */
function get_attri_value_meaning(p_profile_type in varchar2,p_attri_name in varchar2, p_attri_value in varchar2)
return varchar2 is
begin

	if p_profile_type = 'ORGANIZATION'
	then

		if p_attri_name = 'SIC_CODE_TYPE'
		then
			return HZ_UTILITY_v2PUB.Get_LookupMeaning('AR_LOOKUPS','SIC_CODE_TYPE',p_attri_value);
		elsif p_attri_name = 'LEGAL_STATUS'
		then
			return HZ_UTILITY_v2PUB.Get_LookupMeaning('AR_LOOKUPS','LEGAL_STATUS',p_attri_value);
		elsif p_attri_name = 'HQ_BRANCH_IND'
		then
			return HZ_UTILITY_v2PUB.Get_LookupMeaning('AR_LOOKUPS','HQ_BRANCH_IND',p_attri_value);
		elsif p_attri_name = 'FISCAL_YEAREND_MONTH'
		then
			return HZ_UTILITY_v2PUB.Get_LookupMeaning('AR_LOOKUPS','MONTH',p_attri_value);
		elsif p_attri_name = 'LOCAL_BUS_IDEN_TYPE'
		then
			return HZ_UTILITY_v2PUB.Get_LookupMeaning('AR_LOOKUPS','LOCAL_BUS_IDEN_TYPE',p_attri_value);
		elsif p_attri_name = 'REGISTRATION_TYPE'
		then
			return HZ_UTILITY_v2PUB.Get_LookupMeaning('AR_LOOKUPS','REGISTRATION_TYPE',p_attri_value);
		elsif p_attri_name = 'LOCAL_ACTIVITY_CODE_TYPE'
		then
			return HZ_UTILITY_v2PUB.Get_LookupMeaning('AR_LOOKUPS','LOCAL_ACTIVITY_CODE_TYPE',p_attri_value);

		elsif p_attri_name = 'LOCAL_ACTIVITY_CODE'
		then
			return HZ_UTILITY_v2PUB.Get_LookupMeaning('AR_LOOKUPS','NACE',p_attri_value);
		elsif p_attri_name = 'REGISTRATION_TYPE'
		then
			return HZ_UTILITY_v2PUB.Get_LookupMeaning('AR_LOOKUPS','REGISTRATION_TYPE',p_attri_value);
		elsif p_attri_name = 'TOTAL_EMPLOYEES_IND'
		then
			return HZ_UTILITY_v2PUB.Get_LookupMeaning('AR_LOOKUPS','TOTAL_EMPLOYEES_INDICATOR',p_attri_value);
		elsif  p_attri_name = 'TOTAL_EMP_EST_IND'
		then
			return HZ_UTILITY_v2PUB.Get_LookupMeaning('AR_LOOKUPS','TOTAL_EMP_EST_IND', p_attri_value);
		elsif  p_attri_name = 'TOTAL_EMP_MIN_IND'
		then
			return HZ_UTILITY_v2PUB.Get_LookupMeaning('AR_LOOKUPS','TOTAL_EMP_MIN_IND', p_attri_value);
		elsif   p_attri_name = 'EMP_AT_PRIMARY_ADR_EST_IND'
		then
			return HZ_UTILITY_v2PUB.Get_LookupMeaning('AR_LOOKUPS','EMP_AT_PRIMARY_ADR_EST_IND',p_attri_value);
		elsif  p_attri_name = 'EMP_AT_PRIMARY_ADR_MIN_IND'
		then
			return HZ_UTILITY_v2PUB.Get_LookupMeaning('AR_LOOKUPS','EMP_AT_PRIMARY_ADR_MIN_IND',p_attri_value);
		elsif p_attri_value in ('Y','N')
		then
			return HZ_UTILITY_v2PUB.Get_LookupMeaning('AR_LOOKUPS','YES/NO',p_attri_value);
		else return p_attri_value;
		end if;
	elsif p_profile_type = 'PERSON'
	then
		if p_attri_name = 'PERSON_PRE_NAME_ADJUNCT'
		then
			return HZ_UTILITY_v2PUB.Get_LookupMeaning('AR_LOOKUPS','CONTACT_TITLE',p_attri_value);
		elsif p_attri_name = 'MARITAL_STATUS'
		then
			return HZ_UTILITY_v2PUB.Get_LookupMeaning('AR_LOOKUPS','MARITAL_STATUS',p_attri_value);
		elsif p_attri_value in ('Y','N')
		then
			return HZ_UTILITY_v2PUB.Get_LookupMeaning('AR_LOOKUPS','YES/NO',p_attri_value);
		--Start bug 7279978
		elsif p_attri_name = 'RENT_OWN_IND'
		then
			return HZ_UTILITY_v2PUB.Get_LookupMeaning('AR_LOOKUPS','OWN_RENT_IND',p_attri_value);
		--End bug 7279978
		else return p_attri_value;
		end if;
	end if;

end  get_attri_value_meaning;
function get_party_last_upd_date(p_attribute_party_id in number, p_entity_name in varchar2) return date is

	 cursor get_org_last_update_date_csr is
                select last_update_date
                from hz_organization_profiles
                where party_id = p_attribute_party_id
                and sysdate between effective_start_date and nvl(effective_end_date,sysdate);

	 cursor get_per_last_update_date_csr is
                select last_update_date
                from hz_person_profiles
                where party_id = p_attribute_party_id
                and sysdate between effective_start_date and nvl(effective_end_date,sysdate);
l_last_update_date date;
begin
	 if p_entity_name = 'HZ_ORGANIZATION_PROFILES'
        then
                open get_org_last_update_date_csr;
                fetch get_org_last_update_date_csr into l_last_update_date;
                close get_org_last_update_date_csr;
        elsif p_entity_name = 'HZ_PERSON_PROFILES'
        then
                open get_per_last_update_date_csr;
                fetch get_per_last_update_date_csr into l_last_update_date;
                close get_per_last_update_date_csr;
	end if;
	return l_last_update_date;
end get_party_last_upd_date;

function is_attri_party_data_changed(p_merge_batch_id in varchar2,p_entity_name in varchar2) return
varchar2 is
	cursor 	org_party_data_changed_csr(l_attribute_party_id number) is
		  select 'x'
                from hz_merge_entity_attributes
                where merge_batch_id = p_merge_batch_id
		and attribute_name <> 'BUSINESS_REPORT'
                and attribute_party_id = l_attribute_party_id and rownum = 1
                and  derived_last_update_date <> (select last_update_date
                                                 from hz_organization_profiles
                                                 where party_Id =l_attribute_party_id
                                                and sysdate between effective_start_date and nvl(effective_end_date,sysdate));

	cursor 	person_party_data_changed_csr(l_attribute_party_id number) is
		select 'x'
		from hz_merge_entity_attributes
		where merge_batch_id = p_merge_batch_id
		and attribute_party_id = l_attribute_party_id and rownum = 1
		and  derived_last_update_date <> (select last_update_date
						 from hz_person_profiles
						 where party_Id = l_attribute_party_id
						and sysdate between effective_start_date and nvl(effective_end_date,sysdate));
	cursor  get_attri_party_id_csr is
		select distinct attribute_party_id
		from hz_merge_entity_attributes
		where merge_batch_id = p_merge_batch_id;

l_tmp varchar2(1);
l_attribute_party_id number;
begin
	open get_attri_party_id_csr;
	loop
		fetch get_attri_party_id_csr into l_attribute_party_id;
		exit when get_attri_party_id_csr%NOTFOUND;

		if p_entity_name = 'HZ_ORGANIZATION_PROFILES'
		then
			open org_party_data_changed_csr(l_attribute_party_id);
			fetch org_party_data_changed_csr into l_tmp;
			if org_party_data_changed_csr%FOUND
			then
				close org_party_data_changed_csr;
				return 'Y';
			end if;
			close  org_party_data_changed_csr;
		elsif p_entity_name = 'HZ_PERSON_PROFILES'
		then
			open person_party_data_changed_csr(l_attribute_party_id);
			fetch person_party_data_changed_csr into l_tmp;
			if person_party_data_changed_csr%FOUND
			then
				close person_party_data_changed_csr;
				return 'Y';
			end if;
			close person_party_data_changed_csr;
		end if;
	end loop;
	close get_attri_party_id_csr;
	return 'N';

end is_attri_party_data_changed;

/* sync up attribute values in hz_merge_entity_attributes and hz_organization/person_profiles*/
PROCEDURE sync_merge_attributes(
        p_merge_batch_id        IN      NUMBER,
        p_merge_to_party_id     IN      NUMBER,
        p_entity_name           IN VARCHAR2,
        x_return_status         OUT NOCOPY          VARCHAR2,
        x_msg_count            	OUT NOCOPY     	NUMBER,
        x_msg_data              OUT NOCOPY     	VARCHAR2
) is
	cursor  get_attri_party_id_csr is
		select distinct attribute_party_id, derived_last_update_date
		from hz_merge_entity_attributes
		where merge_batch_id = p_merge_batch_id
		and merge_to_party_id = p_merge_to_party_id
		and attribute_name <> 'BUSINESS_REPORT';

	cursor get_dirty_attri_names_csr(l_attribute_party_id number) is
		select attribute_name, entity_name
		from hz_merge_entity_attributes attri
		where merge_batch_id = p_merge_batch_id
		and merge_to_party_id = p_merge_to_party_id
		and attribute_party_id = l_attribute_party_id
		and attribute_name <> 'BUSINESS_REPORT';

	cursor attri_party_id_count_csr is
		select count(distinct attribute_party_id)
		from hz_merge_entity_attributes
		where merge_batch_id = p_merge_batch_id
		and merge_to_party_id = p_merge_to_party_id
		and attribute_party_id <> p_merge_to_party_id;

l_count number;
l_attribute_name varchar2(30);
l_attri_party_id number;
l_entity_name varchar2(30);
l_value varchar2(2000);
l_derived_last_upd_date date;
l_party_last_upd_date date;
begin
	-- Initialize return status to SUCCESS
        x_return_status := FND_API.G_RET_STS_SUCCESS;

	if is_attri_party_data_changed(p_merge_batch_id, p_entity_name) = 'N'
	then
		--dbms_output.put_line('no data change');

		return;
	else
		open attri_party_id_count_csr;
		fetch attri_party_id_count_csr into l_count;
		close attri_party_id_count_csr;

		if l_count = 0 -- only orig default(master party) is there, we can re-default.
		then
			delete from hz_merge_entity_attributes
			where merge_batch_id = p_merge_batch_id;

			create_merge_attributes(
				p_merge_batch_id  => p_merge_batch_id,
				p_merge_to_party_id =>p_merge_to_party_id,
				p_entity_name   =>p_entity_name,
				x_return_status =>x_return_status,
				x_msg_count    =>x_msg_count,
				x_msg_data  =>x_msg_data);
		else      -- data has been updated by the user

			open get_attri_party_id_csr;
			loop
				fetch get_attri_party_id_csr into l_attri_party_id,l_derived_last_upd_date;
				exit when get_attri_party_id_csr%NOTFOUND;
				l_party_last_upd_date := get_party_last_upd_date(l_attri_party_id,p_entity_name);
				if l_derived_last_upd_date <> l_party_last_upd_date
				then
				  open get_dirty_attri_names_csr(l_attri_party_id);
				  loop
					fetch get_dirty_attri_names_csr into l_attribute_name, l_entity_name;
					exit when get_dirty_attri_names_csr%NOTFOUND;
					l_value := get_attribute_value(l_attribute_name, l_attri_party_id,l_entity_name);

					--dbms_output.put_line('l_value =  '||l_value);
					--dbms_output.put_line('l_attribute_name =  '||l_attribute_name);

					update hz_merge_entity_attributes
					set attribute_value = l_value, -- value formatted already
						derived_last_update_date = l_party_last_upd_date,
						last_update_date = SYSDATE,
						last_update_login = FND_GLOBAL.LOGIN_ID,
						last_updated_by = FND_GLOBAL.USER_ID,
						object_version_number = nvl(object_version_number,1)+1
					where attribute_name = l_attribute_name
					and merge_batch_id = p_merge_batch_id
					and entity_name = p_entity_name
					and merge_to_party_id =p_merge_to_party_id
					and attribute_party_id = l_attri_party_id;
				  end loop;
				  close get_dirty_attri_names_csr;
			        end if;
			end loop;
			close get_attri_party_id_csr;
		end if; -- if l_count = 0
	end if;
EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_API_OTHERS_EXCEP');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
    FND_MSG_PUB.ADD;
    x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
end sync_merge_attributes;

END HZ_MERGE_ENTITY_ATTRI_PVT;

/
