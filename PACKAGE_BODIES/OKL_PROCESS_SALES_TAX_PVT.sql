--------------------------------------------------------
--  DDL for Package Body OKL_PROCESS_SALES_TAX_PVT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."OKL_PROCESS_SALES_TAX_PVT" AS
/* $Header: OKLRPSTB.pls 120.56.12010000.6 2010/05/06 23:10:49 sachandr ship $ */

  ---------------------------------------------------------------------------
  -- FUNCTION get_seq_id
  ---------------------------------------------------------------------------
  FUNCTION get_seq_id RETURN NUMBER IS
  BEGIN
    RETURN(okc_p_util.raw_to_number(sys_guid()));
  END get_seq_id;

 /*========================================================================
 | PRIVATE PROCEDURE get_ship_to_site_use_id
 |
 | DESCRIPTION
 |    This procedure derives the ship To location for a customer
 |
 | CALLED FROM
 |    Other procedures in this API
 |
 | CALLS PROCEDURES/FUNCTIONS
 |
 |
 | PARAMETERS
 |  Input Parameters
 |      p_cust_acct_id                          -- cutomer a/c ID
 |      p_fin_asset_id                          -- Financial Asset ID
 |  Output Parameters
 |      x_ship_to_site_use_id           -- ship to Location
 |
 | KNOWN ISSUES
 |
 | NOTES
 |
 |
 | MODIFICATION HISTORY
 | Date                  Author            Description of Changes
 | 22-NOV-07            ASAWANKA           Created  for bug# 6612165
 |
 *=======================================================================*/
PROCEDURE get_ship_to_site_use_id(
    p_api_version                   IN  NUMBER,
    p_init_msg_list                     IN  VARCHAR2 DEFAULT OKC_API.G_FALSE,
    x_return_status                     OUT NOCOPY VARCHAR2,
    x_msg_count                         OUT NOCOPY NUMBER,
    x_msg_data                          OUT NOCOPY VARCHAR2,
    p_cust_acct_id                  IN  NUMBER,
    p_fin_asset_id                  IN  NUMBER,
    x_ship_to_site_use_id                       OUT NOCOPY NUMBER) IS

    l_return_status              VARCHAR2(1) := OKL_API.G_RET_STS_SUCCESS;

    --Cursor to get the  install_location_id of the asset
    CURSOR l_get_instlocid(cp_fin_asset_id IN NUMBER) IS
    SELECT  csi.install_location_id,
                -- csi.location_id
            csi.install_location_type_code
    FROM   csi_item_instances csi,
           okc_k_items cim,
           okc_k_lines_b   inst,
           okc_k_lines_b   ib,
           okc_line_styles_b lse
    WHERE  csi.instance_id = TO_NUMBER(cim.object1_id1)
    AND    cim.cle_id = ib.id
    AND    ib.cle_id = inst.id
    AND    inst.lse_id = lse.id
    AND    lse.lty_code = 'FREE_FORM2'
    AND    inst.cle_id = cp_fin_asset_id ;

    -- get the Install Base Line ID (INST_ITEM) for the financial asset
    CURSOR  l_institem_csr(cp_fin_asset_id IN NUMBER) IS
    SELECT  ib.id  inst_item_id
    FROM    okc_k_lines_b   inst,
            okc_k_lines_b   ib
    WHERE   ib.cle_id = inst.id
    AND     inst.lse_id = 43
    AND     inst.cle_id = cp_fin_asset_id;

    -- get the party site use ID
    CURSOR l_txlitminsts_csr(cp_kle_id IN NUMBER) IS
    SELECT object_id1_new
        FROM   okl_txl_itm_insts
        WHERE  kle_id = cp_kle_id;

        -- get the party site id
        CURSOR l_partysiteuses_csr(cp_party_site_use_id IN NUMBER) IS
        SELECT party_site_id
        FROM   hz_party_site_uses
        WHERE  party_site_use_id = cp_party_site_use_id;

    --Cursor to get the corresponding hz_location id for the install location id
    CURSOR l_get_location_id(cp_party_site_id  IN NUMBER) IS
    SELECT hzp.location_id
    FROM   HZ_PARTY_SITES HZP
    WHERE  HZP.PARTY_SITE_ID = cp_party_site_id;

    --Cursor to get the corresponding party_site_id FOR  a location id
    CURSOR l_get_party_site_id(cp_location_id IN NUMBER) IS
    SELECT HZP.PARTY_SITE_ID
    FROM   HZ_PARTY_SITES HZP,
           HZ_PARTY_SITE_USES HZU
    WHERE  HZP.LOCATION_ID = cp_location_id
    AND    HZP.party_site_id  = HZU.PARTY_SITE_ID
    AND    HZU.SITE_USE_TYPE = 'INSTALL_AT'   ;

    --Cursor to get the ship_to_site_use_id corresponding to the install_location_id of the asset
    CURSOR l_get_shiptositeid(cp_cust_acct_id IN NUMBER, cp_inst_loc_id IN NUMBER,cp_loc_id IN NUMBER) IS
    SELECT /*a.CUST_ACCT_SITE_ID */
           b.site_use_id
    FROM   hz_cust_acct_sites_all a,
           hz_cust_site_uses_all  b,
           hz_party_sites      c
    WHERE  a.CUST_ACCT_SITE_ID = b.CUST_ACCT_SITE_ID
    AND    b.site_use_code     = 'SHIP_TO'
    AND    a.party_site_id     = c.party_site_id
    AND    a.cust_account_id   = cp_cust_acct_id
    AND    a.org_id            = NVL(TO_NUMBER(SUBSTRB(USERENV('CLIENT_INFO'),1,10)),-99)
    AND    c.party_site_id     = cp_inst_loc_id
    AND    c.location_id       = cp_loc_id;

        l_inst_loc_id                   NUMBER;
        l_inst_loc_type_code    VARCHAR2(30);
        l_loc_id                                NUMBER;
        l_ship_to_siteuseid     NUMBER;
        l_inst_item_id                  NUMBER;
        l_party_site_use_id             NUMBER;

BEGIN

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.get_ship_to_site_use_id','Begin(+)');
    END IF;

    --Print Input Variables
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ship_to_site_use_id.',
              'p_init_msg_list :'||p_init_msg_list);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ship_to_site_use_id.',
              'p_cust_acct_id :'||p_cust_acct_id);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ship_to_site_use_id.',
              'p_fin_asset_id :'||p_fin_asset_id);

    END IF;

    x_return_status :=  OKL_API.G_RET_STS_SUCCESS;

    OPEN  l_get_instlocid(p_fin_asset_id);
    FETCH l_get_instlocid INTO l_inst_loc_id, l_inst_loc_type_code;

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ship_to_site_use_id.',
              'l_inst_loc_id'||l_inst_loc_id);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ship_to_site_use_id.',
              'l_inst_loc_type_code'||l_inst_loc_type_code);
    END IF;

    IF l_get_instlocid%NOTFOUND  THEN
       -- For non Booked contracts, Install Location is not available in IB
       -- get the location from the asset on the contract.

       IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ship_to_site_use_id.',
              'l_get_instlocid%NOTFOUND');

       END IF;

       -- get the INST_ITEM line ID for the financial asset
       OPEN   l_institem_csr(p_fin_asset_id);
       FETCH  l_institem_csr INTO l_inst_item_id;
       CLOSE  l_institem_csr;

       -- get the party site use ID
       OPEN  l_txlitminsts_csr(l_inst_item_id);
           FETCH l_txlitminsts_csr INTO l_party_site_use_id;
           CLOSE l_txlitminsts_csr;

           -- get the party site ID
           OPEN  l_partysiteuses_csr(l_party_site_use_id);
           FETCH l_partysiteuses_csr INTO l_inst_loc_id;  --party site ID
           CLOSE l_partysiteuses_csr;

           -- get the location ID
           OPEN  l_get_location_id(l_inst_loc_id);
           FETCH l_get_location_id INTO l_loc_id;
           CLOSE l_get_location_id;

           IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ship_to_site_use_id.',
              'l_inst_item_id '||l_inst_item_id);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ship_to_site_use_id.',
              'l_party_site_use_id '||l_party_site_use_id);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ship_to_site_use_id.',
              'l_inst_loc_id '||l_inst_loc_id);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ship_to_site_use_id.',
              'l_loc_id '||l_loc_id);

       END IF;

       IF l_inst_loc_id IS NULL OR l_loc_id IS NULL THEN
                -- Install Location id is required
                OKL_API.set_message( p_app_name      => 'OKC',
                            p_msg_name      => G_REQUIRED_VALUE,
                            p_token1        => G_COL_NAME_TOKEN,
                            p_token1_value  => 'INSTALL_LOCATION_ID');
                RAISE OKL_API.G_EXCEPTION_ERROR;
       END IF;
    ELSE
       IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ship_to_site_use_id.',
              'l_get_instlocid%FOUND');

       END IF;
       --Check the source of the install location id
       IF l_inst_loc_type_code = 'HZ_PARTY_SITES' THEN
                -- get hz location id
                OPEN  l_get_location_id(l_inst_loc_id);
                FETCH l_get_location_id INTO l_loc_id;
                CLOSE l_get_location_id;
       ELSIF l_inst_loc_type_code = 'HZ_LOCATIONS' THEN
                l_loc_id := l_inst_loc_id;
                -- get party site id
                OPEN l_get_party_site_id(l_loc_id);
                FETCH l_get_party_site_id INTO l_inst_loc_id;
                CLOSE l_get_party_site_id;
       END IF;

       IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ship_to_site_use_id.',
              'l_loc_id '||l_loc_id);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ship_to_site_use_id.',
              'l_inst_loc_id '||l_inst_loc_id);

       END IF;

    END IF;
    CLOSE l_get_instlocid;

    --get the ship to site use id of the asset
    OPEN  l_get_shiptositeid(p_cust_acct_id,l_inst_loc_id,l_loc_id);
    FETCH l_get_shiptositeid INTO l_ship_to_siteuseid;  -- l_ship_to_siteuseid  may be null
    CLOSE l_get_shiptositeid;



    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ship_to_site_use_id.',
              'l_ship_to_siteuseid '||l_ship_to_siteuseid);

    END IF;

    x_ship_to_site_use_id := l_ship_to_siteuseid;



    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
       FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.get_ship_to_site_use_id ','End(-)');
    END IF;

EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN
         IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.get_ship_to_site_use_id ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
         END IF;

         IF l_get_instlocid%ISOPEN THEN
            CLOSE l_get_instlocid;
         END IF;

                 IF l_institem_csr%ISOPEN THEN
                    CLOSE l_institem_csr;
                 END IF;

                 IF l_txlitminsts_csr%ISOPEN THEN
                    CLOSE l_txlitminsts_csr;
                 END IF;

                 IF l_partysiteuses_csr%ISOPEN THEN
                    CLOSE l_partysiteuses_csr;
                 END IF;

                 IF l_get_location_id%ISOPEN THEN
                    CLOSE l_get_location_id;
                 END IF;

                 IF l_get_party_site_id%ISOPEN THEN
                    CLOSE l_get_party_site_id;
                 END IF;


             IF l_get_shiptositeid%ISOPEN THEN
                CLOSE l_get_shiptositeid;
             END IF;

         x_return_status := OKL_API.G_RET_STS_ERROR;
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
         IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.get_ship_to_site_use_id ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_UNEXPECTED_ERROR');
         END IF;

         IF l_get_instlocid%ISOPEN THEN
            CLOSE l_get_instlocid;
         END IF;

                 IF l_institem_csr%ISOPEN THEN
                    CLOSE l_institem_csr;
                 END IF;

                 IF l_txlitminsts_csr%ISOPEN THEN
                    CLOSE l_txlitminsts_csr;
                 END IF;

                 IF l_partysiteuses_csr%ISOPEN THEN
                    CLOSE l_partysiteuses_csr;
                 END IF;

                 IF l_get_location_id%ISOPEN THEN
                    CLOSE l_get_location_id;
                 END IF;

                 IF l_get_party_site_id%ISOPEN THEN
                    CLOSE l_get_party_site_id;
                 END IF;


             IF l_get_shiptositeid%ISOPEN THEN
                CLOSE l_get_shiptositeid;
             END IF;
         x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
    WHEN OTHERS THEN
         IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
            FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.get_ship_to_site_use_id ',
                  'EXCEPTION :'||sqlerrm);
         END IF;

         IF l_get_instlocid%ISOPEN THEN
            CLOSE l_get_instlocid;
         END IF;

                 IF l_institem_csr%ISOPEN THEN
                    CLOSE l_institem_csr;
                 END IF;

                 IF l_txlitminsts_csr%ISOPEN THEN
                    CLOSE l_txlitminsts_csr;
                 END IF;

                 IF l_partysiteuses_csr%ISOPEN THEN
                    CLOSE l_partysiteuses_csr;
                 END IF;

                 IF l_get_location_id%ISOPEN THEN
                    CLOSE l_get_location_id;
                 END IF;

                 IF l_get_party_site_id%ISOPEN THEN
                    CLOSE l_get_party_site_id;
                 END IF;


             IF l_get_shiptositeid%ISOPEN THEN
                CLOSE l_get_shiptositeid;
             END IF;
         x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
         -- unexpected error
         OKL_API.set_message(p_app_name      => g_app_name,
                         p_msg_name      => g_unexpected_error,
                         p_token1        => g_sqlcode_token,
                         p_token1_value  => sqlcode,
                         p_token2        => g_sqlerrm_token,
                         p_token2_value  => sqlerrm);
END get_ship_to_site_use_id;

/*========================================================================
 | PUBLIC FUNCTION is_serialized_and_alc
 |
 | DESCRIPTION
 |    This function checks if any of the assets of the contract is serialized
 |    and has gone through Asset Relocation Change transaction. If so, returns
 |    'Y', else 'N'
 |
 | CALLED FROM                                  Authoring component
 |
 |
 | CALLS PROCEDURES/FUNCTIONS
 |
 |
 | PARAMETERS
 |      p_contract_id            -- Contract Identifier
 |
 | KNOWN ISSUES
 |
 | NOTES
 |
 |
 | MODIFICATION HISTORY
 | Date          Author     Description of Changes
 | 05-JUL-07    RRAVIKIR      Created
 |
 *=======================================================================*/
  FUNCTION is_serialized_and_alc(p_contract_id   IN NUMBER)
    RETURN VARCHAR2 IS

    -- Local variables
    l_value                  VARCHAR2(1);

    -- Cursors
    CURSOR l_k_serialized_and_alc(p_chr_id IN NUMBER) IS
    SELECT '1'
    FROM okl_tax_sources
    WHERE khr_id = p_chr_id
    AND entity_code = G_ASSETS_ENTITY_CODE
    AND event_class_code = G_ALC_EVENT_CODE
    AND alc_serialized_yn IN ('Y', 'L')
    AND rownum = 1;
  BEGIN
    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.is_serialized_and_alc','Begin(+)');
    END IF;

    --Print Input Variables
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.is_serialized_and_alc.',
              'p_contract_id :'||p_contract_id);
    END IF;

    OPEN l_k_serialized_and_alc(p_chr_id  =>  p_contract_id);
    FETCH l_k_serialized_and_alc INTO l_value;
    CLOSE l_k_serialized_and_alc;

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.is_serialized_and_alc ','End(-)');
    END IF;

    IF (l_value IS NULL) THEN
      RETURN 'N';
    ELSE
      RETURN 'Y';
    END IF;

  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN

      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.is_serialized_and_alc ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
      END IF;

      IF (l_k_serialized_and_alc%ISOPEN) THEN
        CLOSE l_k_serialized_and_alc;
      END IF;

    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.is_serialized_and_alc ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_UNEXPECTED_ERROR');
      END IF;

      IF (l_k_serialized_and_alc%ISOPEN) THEN
        CLOSE l_k_serialized_and_alc;
      END IF;

    WHEN OTHERS THEN

      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.is_serialized_and_alc ',
                  'EXCEPTION :'||sqlerrm);
      END IF;

      IF (l_k_serialized_and_alc%ISOPEN) THEN
        CLOSE l_k_serialized_and_alc;
      END IF;

  END is_serialized_and_alc;

  /*========================================================================
   | PRIVATE PROCEDURE validate_tax_code
   |
   | DESCRIPTION
   |    This procedure populates the asset location change serialized total tax
   |
   | CALLED FROM
   |        process_tax_determ_override()
   |        process_asset_loc_tax()
   |
   | CALLS PROCEDURES/FUNCTIONS
   |        okl_tax_sources_pub.update_tax_sources()
   |
   | PARAMETERS
   |      p_source_trx_id              -- Source Transaction Identifier
   |
   | KNOWN ISSUES
   |
   | NOTES
   |
   |
   | MODIFICATION HISTORY
   | Date          Author     Description of Changes
   | 11-APR-07    RRAVIKIR      Created
   |
   *=======================================================================*/
    PROCEDURE validate_tax_code(
      p_api_version                   IN  NUMBER,
      p_init_msg_list                 IN  VARCHAR2 DEFAULT OKL_API.G_FALSE,
      x_return_status                 OUT NOCOPY VARCHAR2,
      x_msg_count                     OUT NOCOPY NUMBER,
      x_msg_data                      OUT NOCOPY VARCHAR2,
      p_trx_date                      IN  DATE,
      p_tbc_code                      IN  VARCHAR2 DEFAULT NULL,
      p_ufc_code                      IN  VARCHAR2 DEFAULT NULL,
      p_pc_code                       IN  VARCHAR2 DEFAULT NULL,
      x_valid_code                    OUT NOCOPY VARCHAR2) IS

      -- Local variables
      l_api_name                      CONSTANT VARCHAR2(30) := 'validate_tax_code';
      l_return_status                 VARCHAR2(1) := OKL_API.G_RET_STS_SUCCESS;

      l_dummy                         VARCHAR2(1);

      -- Cursors
      CURSOR l_tbc_csr(cp_trx_date IN DATE, cp_tbc_code IN VARCHAR2) IS
      SELECT '1'
      FROM      zx_fc_business_categories_v
      WHERE classification_code = cp_tbc_code
          AND   effective_from  <= cp_trx_date
          AND  (effective_to >= cp_trx_date OR effective_to is NULL);

      CURSOR l_ufc_csr(cp_trx_date IN DATE, cp_ufc_code IN VARCHAR2) IS
      SELECT '1'
      FROM      zx_fc_user_defined_v
          WHERE classification_code = cp_ufc_code
      AND   effective_from  <= cp_trx_date
          AND   (effective_to >= cp_trx_date OR effective_to is NULL);

      CURSOR l_pc_csr(cp_trx_date IN DATE, cp_pc_code IN VARCHAR2) IS
      SELECT '1'
      FROM      zx_fc_product_categories_v
      WHERE classification_code = cp_pc_code
          AND   effective_from  <= cp_trx_date
          AND   (effective_to >= cp_trx_date OR effective_to is NULL);

    BEGIN
      IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.validate_tax_code','Begin(+)');
      END IF;

      --Print Input Variables
      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.validate_tax_code.',
                'p_init_msg_list :'||p_init_msg_list);
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.validate_tax_code.',
                'p_trx_date :'||p_trx_date);
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.validate_tax_code.',
                'p_tbc_code :'||p_tbc_code);
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.validate_tax_code.',
                'p_ufc_code :'||p_ufc_code);
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.validate_tax_code.',
                'p_pc_code :'||p_pc_code);
      END IF;

      IF (p_tbc_code IS NOT NULL) THEN

        OPEN l_tbc_csr(p_trx_date, p_tbc_code);
        FETCH l_tbc_csr INTO l_dummy;
        CLOSE l_tbc_csr;

      ELSIF (p_ufc_code IS NOT NULL) THEN

        OPEN l_ufc_csr(p_trx_date, p_ufc_code);
        FETCH l_ufc_csr INTO l_dummy;
        CLOSE l_ufc_csr;

      ELSIF (p_pc_code IS NOT NULL) THEN

        OPEN l_pc_csr(p_trx_date, p_pc_code);
        FETCH l_pc_csr INTO l_dummy;
        CLOSE l_pc_csr;

      END IF;

      IF (l_dummy = '1') THEN
        x_valid_code := 'S';
      ELSE
        x_valid_code := 'F';
      END IF;

      x_return_status := l_return_status;

      IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.validate_tax_code ','End(-)');
      END IF;

    EXCEPTION

      WHEN OKL_API.G_EXCEPTION_ERROR THEN

        IF (l_tbc_csr%ISOPEN) THEN
          CLOSE l_tbc_csr;
        END IF;

        IF (l_ufc_csr%ISOPEN) THEN
          CLOSE l_ufc_csr;
        END IF;

        IF (l_pc_csr%ISOPEN) THEN
          CLOSE l_pc_csr;
        END IF;

        IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
           FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.validate_tax_code ',
                    'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
        END IF;

        x_return_status := OKL_API.G_RET_STS_ERROR;

      WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN

        IF (l_tbc_csr%ISOPEN) THEN
          CLOSE l_tbc_csr;
        END IF;

        IF (l_ufc_csr%ISOPEN) THEN
          CLOSE l_ufc_csr;
        END IF;

        IF (l_pc_csr%ISOPEN) THEN
          CLOSE l_pc_csr;
        END IF;

        IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
           FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.validate_tax_code ',
                    'EXCEPTION :'||'OKL_API.G_EXCEPTION_UNEXPECTED_ERROR');
        END IF;

        x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;

      WHEN OTHERS THEN

        IF (l_tbc_csr%ISOPEN) THEN
          CLOSE l_tbc_csr;
        END IF;

        IF (l_ufc_csr%ISOPEN) THEN
          CLOSE l_ufc_csr;
        END IF;

        IF (l_pc_csr%ISOPEN) THEN
          CLOSE l_pc_csr;
        END IF;

        IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
           FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.validate_tax_code ',
                    'EXCEPTION :'||sqlerrm);
        END IF;

        x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
        -- unexpected error
        OKL_API.set_message(p_app_name      => g_app_name,
                            p_msg_name      => g_unexpected_error,
                            p_token1        => g_sqlcode_token,
                            p_token1_value  => sqlcode,
                            p_token2        => g_sqlerrm_token,
                            p_token2_value  => sqlerrm);

    END validate_tax_code;

/*========================================================================
 | PRIVATE PROCEDURE copy_tax_trx_data
 |
 | DESCRIPTION
 |    This procedure copies the quote objects tax data into OKL_TAX_TRX_DETAILS
 |    table
 |
 | CALLED FROM
 |        process_quote_tax()
 |        process_quoting_upfront_tax()
 |
 | CALLS PROCEDURES/FUNCTIONS
 |
 |
 | PARAMETERS
 |      p_trx_id                     -- Transaction Identifier
 |      p_entity_code                -- Entity code
 |      p_event_class_code           -- Event class code
 |
 | KNOWN ISSUES
 |
 | NOTES
 |
 |
 | MODIFICATION HISTORY
 | Date          Author     Description of Changes
 | 07-MAY-07    RRAVIKIR      Created
 |
 *=======================================================================*/
  PROCEDURE copy_tax_trx_data (
    p_api_version                   IN NUMBER,
    p_init_msg_list                 IN VARCHAR2 DEFAULT OKL_API.G_FALSE,
    x_return_status                 OUT NOCOPY VARCHAR2,
    x_msg_count                     OUT NOCOPY NUMBER,
    x_msg_data                      OUT NOCOPY VARCHAR2,
    p_trx_id                        IN  NUMBER,
    p_entity_code                                   IN  VARCHAR2,
    p_event_class_code              IN  VARCHAR2,
    p_source_trx_name               IN  VARCHAR2) IS

    -- Local variables
    l_api_version                   CONSTANT NUMBER := 1;
    l_api_name                      CONSTANT VARCHAR2(30) := 'copy_tax_trx_data';

    l_tax_lines_tbl                 tax_lines_tbl_type;
    i                               NUMBER := 0;
    l_txs_id                        NUMBER;

    -- Cursor to retrieve tax data
    CURSOR l_get_tax_data_csr(cp_trx_id            IN NUMBER,
                              cp_entity_code       IN VARCHAR2,
                              cp_event_class_code  IN VARCHAR2) IS
    SELECT tax_rate_id,
           tax_rate_code,
           tax_exemption_id,
           tax_rate,
           tax_date,
           line_amt,
           internal_organization_id,
           application_id,
           entity_code,
           event_class_code,
           event_type_code,
           trx_id,
           trx_line_id,
           trx_level_type,
           trx_line_number,
           tax_line_number,
           tax_regime_id,
           tax_regime_code,
           tax_id,
           tax,
           tax_status_id,
           tax_status_code,
           tax_apportionment_line_number,
           legal_entity_id,
           trx_number,
           trx_date,
           tax_jurisdiction_id,
           tax_jurisdiction_code,
           tax_type_code,
           tax_currency_code,
           taxable_amt_tax_curr,
           trx_currency_code,
           minimum_accountable_unit,
           precision,
           currency_conversion_type,
           currency_conversion_rate,
           currency_conversion_date,
           tax_determine_date,
           taxable_amt,
           tax_amt
    FROM zx_detail_tax_lines_gt
    WHERE trx_id = cp_trx_id
    AND   application_id = G_OKL_APPLICATION_ID
    AND   trx_level_type = G_TRX_LEVEL_TYPE
    AND   entity_code = cp_entity_code
    AND   event_class_code = cp_event_class_code;

    -- get the primary key of okl_tax_sources
    CURSOR l_taxsourceid_csr(cp_trx_id IN NUMBER, cp_trx_line_id IN NUMBER) IS
    SELECT id
    FROM   okl_tax_sources
    WHERE  trx_id = cp_trx_id
    AND    trx_line_id = cp_trx_line_id;

  BEGIN
    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.copy_tax_trx_data','Begin(+)');
    END IF;

    --Print Input Variables
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.copy_tax_trx_data.',
             'p_init_msg_list :'||p_init_msg_list);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.copy_tax_trx_data.',
              'p_trx_id :'||p_trx_id);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.copy_tax_trx_data.',
             'p_entity_code :'||p_entity_code);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.copy_tax_trx_data.',
              'p_event_class_code :'||p_event_class_code);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.copy_tax_trx_data.',
              'p_source_trx_name :'||p_source_trx_name);
    END IF;

    -- Populate the tax data into eBtax global session table
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.copy_tax_trx_data.',
              'INSERT INTO OKL_TAX_TRX_DETAILS');
    END IF;

    l_tax_lines_tbl.DELETE;
    FOR l_get_tax_data_rec IN l_get_tax_data_csr(cp_trx_id           => p_trx_id,
                                                 cp_entity_code      => p_entity_code,
                                                 cp_event_class_code => p_event_class_code) LOOP
      l_tax_lines_tbl(i).id  := get_seq_id;

      OPEN  l_taxsourceid_csr(l_get_tax_data_rec.trx_id, l_get_tax_data_rec.trx_line_id);
      FETCH l_taxsourceid_csr INTO l_txs_id;
      IF l_taxsourceid_csr%NOTFOUND THEN
        OKL_API.set_message(p_app_name     => 'OKL',
                            p_msg_name     => 'OKL_TX_SRC_TRX_ERR',
                                                        p_token1       => 'LINE_NUM',
                                                        p_token1_value => i);
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
      CLOSE l_taxsourceid_csr;

      l_tax_lines_tbl(i).txs_id                       := l_txs_id;
          l_tax_lines_tbl(i).tax_determination_date       := l_get_tax_data_rec.tax_determine_date;
          l_tax_lines_tbl(i).tax_rate_id                  := l_get_tax_data_rec.tax_rate_id;
          l_tax_lines_tbl(i).tax_rate_code                := l_get_tax_data_rec.tax_rate_code;
          l_tax_lines_tbl(i).taxable_amount               := l_get_tax_data_rec.taxable_amt;
          l_tax_lines_tbl(i).tax_exemption_id             := l_get_tax_data_rec.tax_exemption_id;
          l_tax_lines_tbl(i).tax_rate                     := l_get_tax_data_rec.tax_rate;
          l_tax_lines_tbl(i).tax_amount                   := l_get_tax_data_rec.tax_amt;

      l_tax_lines_tbl(i).tax_date                     := l_get_tax_data_rec.tax_date;
      l_tax_lines_tbl(i).line_amt                     := l_get_tax_data_rec.line_amt;
      l_tax_lines_tbl(i).internal_organization_id     := l_get_tax_data_rec.internal_organization_id;
      l_tax_lines_tbl(i).application_id               := l_get_tax_data_rec.application_id;
      l_tax_lines_tbl(i).entity_code                  := l_get_tax_data_rec.entity_code;
      l_tax_lines_tbl(i).event_class_code             := l_get_tax_data_rec.event_class_code;
      l_tax_lines_tbl(i).event_type_code              := l_get_tax_data_rec.event_type_code;
      l_tax_lines_tbl(i).trx_id                       := l_get_tax_data_rec.trx_id;
      l_tax_lines_tbl(i).trx_line_id                  := l_get_tax_data_rec.trx_line_id;
      l_tax_lines_tbl(i).trx_level_type               := l_get_tax_data_rec.trx_level_type;
      l_tax_lines_tbl(i).trx_line_number              := l_get_tax_data_rec.trx_line_number;
      l_tax_lines_tbl(i).tax_line_number              := l_get_tax_data_rec.tax_line_number;
      l_tax_lines_tbl(i).tax_regime_id                := l_get_tax_data_rec.tax_regime_id;
      l_tax_lines_tbl(i).tax_regime_code              := l_get_tax_data_rec.tax_regime_code;
      l_tax_lines_tbl(i).tax_id                       := l_get_tax_data_rec.tax_id;
      l_tax_lines_tbl(i).tax                          := l_get_tax_data_rec.tax;
      l_tax_lines_tbl(i).tax_status_id                := l_get_tax_data_rec.tax_status_id;
      l_tax_lines_tbl(i).tax_status_code              := l_get_tax_data_rec.tax_status_code;
      l_tax_lines_tbl(i).tax_apportionment_line_number   := l_get_tax_data_rec.tax_apportionment_line_number;
      l_tax_lines_tbl(i).legal_entity_id              := l_get_tax_data_rec.legal_entity_id;
      l_tax_lines_tbl(i).trx_number                   := l_get_tax_data_rec.trx_number;
      l_tax_lines_tbl(i).trx_date                     := l_get_tax_data_rec.trx_date;
      l_tax_lines_tbl(i).tax_jurisdiction_id          := l_get_tax_data_rec.tax_jurisdiction_id;
      l_tax_lines_tbl(i).tax_jurisdiction_code        := l_get_tax_data_rec.tax_jurisdiction_code;
      l_tax_lines_tbl(i).tax_type_code                := l_get_tax_data_rec.tax_type_code;
      l_tax_lines_tbl(i).tax_currency_code            := l_get_tax_data_rec.tax_currency_code;
      l_tax_lines_tbl(i).taxable_amt_tax_curr         := l_get_tax_data_rec.taxable_amt_tax_curr;
      l_tax_lines_tbl(i).trx_currency_code            := l_get_tax_data_rec.trx_currency_code;
      l_tax_lines_tbl(i).minimum_accountable_unit     := l_get_tax_data_rec.minimum_accountable_unit;
      l_tax_lines_tbl(i).precision                    := l_get_tax_data_rec.precision;
      l_tax_lines_tbl(i).currency_conversion_type     := l_get_tax_data_rec.currency_conversion_type;
      l_tax_lines_tbl(i).currency_conversion_rate     := l_get_tax_data_rec.currency_conversion_rate;
      l_tax_lines_tbl(i).currency_conversion_date     := l_get_tax_data_rec.currency_conversion_date;
      -- columns for backward compatibility
      l_tax_lines_tbl(i).tax_determine_date           := l_get_tax_data_rec.tax_determine_date;
      l_tax_lines_tbl(i).taxable_amt                  := l_get_tax_data_rec.taxable_amt;
      l_tax_lines_tbl(i).tax_amt                      := l_get_tax_data_rec.tax_amt;


          l_tax_lines_tbl(i).billed_yn                    := 'N'; -- tax lines calculated by tax engine are not billed

      IF (p_source_trx_name = 'Estimated Billing') THEN
            l_tax_lines_tbl(i).tax_call_type_code           := G_INVOICE_TAX;
      ELSIF (p_source_trx_name = 'Sales Quote') THEN
        l_tax_lines_tbl(i).tax_call_type_code           := G_UPFRONT_TAX;
      ELSIF (p_source_trx_name = 'Tax Schedule') THEN
        l_tax_lines_tbl(i).tax_call_type_code           := G_TAX_SCHEDULE;
      END IF;

          l_tax_lines_tbl(i).program_id                   := null;
          l_tax_lines_tbl(i).request_id                   := null;
          l_tax_lines_tbl(i).program_application_id       := null;
          l_tax_lines_tbl(i).program_update_date          := null;
          l_tax_lines_tbl(i).attribute_category           := null;
          l_tax_lines_tbl(i).attribute1                   := null;
          l_tax_lines_tbl(i).attribute2                   := null;
          l_tax_lines_tbl(i).attribute3                   := null;
          l_tax_lines_tbl(i).attribute4                   := null;
          l_tax_lines_tbl(i).attribute5                   := null;
          l_tax_lines_tbl(i).attribute6                   := null;
          l_tax_lines_tbl(i).attribute7                   := null;
          l_tax_lines_tbl(i).attribute8                   := null;
          l_tax_lines_tbl(i).attribute9                   := null;
          l_tax_lines_tbl(i).attribute10                  := null;
          l_tax_lines_tbl(i).attribute11                  := null;
          l_tax_lines_tbl(i).attribute12                  := null;
          l_tax_lines_tbl(i).attribute13                  := null;
          l_tax_lines_tbl(i).attribute14                  := null;
          l_tax_lines_tbl(i).attribute15                  := null;
          l_tax_lines_tbl(i).created_by                   := G_USER_ID;
          l_tax_lines_tbl(i).creation_date                := SYSDATE;
          l_tax_lines_tbl(i).last_updated_by              := G_USER_ID;
          l_tax_lines_tbl(i).last_update_date             := SYSDATE;
          l_tax_lines_tbl(i).last_update_login            := G_LOGIN_ID;
          l_tax_lines_tbl(i).object_version_number        := null;

      i := i+1;
    END LOOP;

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.calculate_tax.',
                          'l_tax_lines_tbl.COUNT '||l_tax_lines_tbl.COUNT);
        END IF;

    ---- Insert into okl_tax_trx_details begin -----
    BEGIN
      IF l_tax_lines_tbl.COUNT > 0 THEN
        FORALL indx in l_tax_lines_tbl.FIRST..l_tax_lines_tbl.LAST
          -- SAVE EXCEPTIONS
          INSERT INTO okl_tax_trx_details VALUES l_tax_lines_tbl(indx);
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        IF SQL%BULK_EXCEPTIONS.COUNT > 0 THEN
                  FOR i IN 1..SQL%BULK_EXCEPTIONS.COUNT LOOP
                                                OKL_API.set_message(
                                                                     p_app_name      => 'OKL',
                                     p_msg_name      => 'OKL_TX_TRX_INS_ERR',
                                     p_token1        => 'TABLE_NAME',
                                     p_token1_value  => 'okl_tax_trx_details',
                                     p_token2        => 'ERROR_CODE',
                                                                         p_token2_value  => SQLERRM(SQL%BULK_EXCEPTIONS(i).ERROR_CODE),
                                                                         p_token3        => 'ITERATION',
                                                                         p_token3_value  => SQL%BULK_EXCEPTIONS(i).ERROR_INDEX);
                  END LOOP;
                  RAISE OKL_API.G_EXCEPTION_ERROR;
                END IF;
        END;
    ---- Insert into okl_tax_trx_details end -----

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.copy_tax_trx_data ','End(-)');
    END IF;

  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN

      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.copy_tax_trx_data ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
      END IF;

      x_return_status := OKL_API.G_RET_STS_ERROR;

    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.copy_tax_trx_data ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_UNEXPECTED_ERROR');
      END IF;

      x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;

    WHEN OTHERS THEN

      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.copy_tax_trx_data ',
                  'EXCEPTION :'||sqlerrm);
      END IF;

      x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
      -- unexpected error
      OKL_API.set_message(p_app_name      => g_app_name,
                          p_msg_name      => g_unexpected_error,
                          p_token1        => g_sqlcode_token,
                          p_token1_value  => sqlcode,
                          p_token2        => g_sqlerrm_token,
                          p_token2_value  => sqlerrm);

  END copy_tax_trx_data;

  /*========================================================================
   | PRIVATE PROCEDURE populate_ser_split_total_tax
   |
   | DESCRIPTION
   |    This procedure populates the serialized total tax column after the split
   |    asset process, provided that asset has gone through ALC prior to Split
   |    transaction
   |
   | CALLED FROM
   |        process_split_asset_tax()
   |
   | CALLS PROCEDURES/FUNCTIONS
   |        okl_tax_sources_pub.update_tax_sources()
   |
   | PARAMETERS
   |      p_asset_id              -- Asset Identifier
   |
   | KNOWN ISSUES
   |
   | NOTES
   |
   |
   | MODIFICATION HISTORY
   | Date          Author     Description of Changes
   | 26-Jul-07    RRAVIKIR      Created
   |
   *=======================================================================*/
    PROCEDURE populate_ser_split_total_tax(
      p_api_version                   IN  NUMBER,
      p_init_msg_list                 IN  VARCHAR2 DEFAULT OKL_API.G_FALSE,
      x_return_status                 OUT NOCOPY VARCHAR2,
      x_msg_count                     OUT NOCOPY NUMBER,
      x_msg_data                      OUT NOCOPY VARCHAR2,
      p_asset_id                      IN  NUMBER,
      p_serialized_asset              IN  VARCHAR2) IS

      -- Local variables
      l_api_name                      CONSTANT VARCHAR2(30) := 'populate_ser_split_total_tax';
      l_return_status                 VARCHAR2(1) := OKL_API.G_RET_STS_SUCCESS;
      l_total_tax_amount              NUMBER;
      i                               NUMBER;
      j                               NUMBER;
      l_total_line_amount             NUMBER;

      -- Local data structure
      l_txsv_tbl                      txsv_tbl_type;
      lx_txsv_tbl                     txsv_tbl_type;

      -- Cursors
      CURSOR l_taxablelines_ser_csr(cp_kle_id IN NUMBER, cp_sty_id IN NUMBER) IS
      SELECT id
      FROM okl_tax_sources
      WHERE kle_id = cp_kle_id
      AND sty_id = cp_sty_id
      AND tax_call_type_code = G_UPFRONT_TAX
      AND tax_line_status_code = G_ACTIVE_STATUS
      AND entity_code = G_CONTRACTS_ENTITY_CODE
      AND event_class_code = G_BOOKING_EVENT_CLASS_CODE;

      CURSOR l_alc_total_tax_ser_csr(cp_kle_id IN NUMBER, cp_sty_id IN NUMBER) IS
      SELECT SUM(total_tax)
      FROM okl_tax_sources
      WHERE kle_id = cp_kle_id
      AND sty_id = cp_sty_id
      AND tax_call_type_code = G_UPFRONT_TAX
      AND tax_line_status_code = G_ACTIVE_STATUS
      AND entity_code = G_CONTRACTS_ENTITY_CODE
      AND event_class_code = G_BOOKING_EVENT_CLASS_CODE;

      CURSOR l_alc_total_line_amt_ser_csr(cp_kle_id IN NUMBER, cp_sty_id IN NUMBER) IS
      SELECT SUM(assessable_value)
      FROM okl_tax_sources
      WHERE kle_id = cp_kle_id
      AND sty_id = cp_sty_id
      AND tax_call_type_code = G_UPFRONT_TAX
      AND tax_line_status_code = G_ACTIVE_STATUS
      AND entity_code = G_CONTRACTS_ENTITY_CODE
      AND event_class_code = G_BOOKING_EVENT_CLASS_CODE;

      CURSOR l_fetch_stream_types_csr(cp_kle_id IN NUMBER) IS
      SELECT DISTINCT sty_id
      FROM okl_tax_sources
      WHERE kle_id = cp_kle_id
      AND tax_call_type_code = G_UPFRONT_TAX
      AND tax_line_status_code = G_ACTIVE_STATUS
      AND entity_code = G_CONTRACTS_ENTITY_CODE
      AND event_class_code = G_BOOKING_EVENT_CLASS_CODE;

    BEGIN
      IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.populate_ser_split_total_tax','Begin(+)');
      END IF;

      --Print Input Variables
      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_ser_split_total_tax.',
                'p_init_msg_list :'||p_init_msg_list);
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_ser_split_total_tax.',
                'p_asset_id :'||p_asset_id);
      END IF;

      -- Get the modified tax lines from tax sources, sum up the total tax amount
      -- and store in alc_serialized_total_tax column of okl_tax_sources
      i := 1;

      IF (p_serialized_asset = 'Y') THEN
        FOR l_fetch_stream_types_rec IN l_fetch_stream_types_csr(p_asset_id) LOOP

          j := 1;
          FOR l_taxablelines_ser_rec IN l_taxablelines_ser_csr(cp_kle_id     => p_asset_id,
                                                               cp_sty_id     => l_fetch_stream_types_rec.sty_id) LOOP

            IF (j = 1) THEN
              OPEN l_alc_total_tax_ser_csr(cp_kle_id      => p_asset_id,
                                           cp_sty_id      => l_fetch_stream_types_rec.sty_id);
              FETCH l_alc_total_tax_ser_csr INTO l_total_tax_amount;
              CLOSE l_alc_total_tax_ser_csr;

              OPEN l_alc_total_line_amt_ser_csr(cp_kle_id      => p_asset_id,
                                           cp_sty_id      => l_fetch_stream_types_rec.sty_id);
              FETCH l_alc_total_line_amt_ser_csr INTO l_total_line_amount;
              CLOSE l_alc_total_line_amt_ser_csr;

              j := j + 1;
            END IF;

            IF l_total_tax_amount IS NULL THEN
              l_total_tax_amount := 0;
            END IF;
            -- Populate Tax Sources data structure and update total tax
            l_txsv_tbl(i).id                             := l_taxablelines_ser_rec.id;
            l_txsv_tbl(i).alc_serialized_total_tax       := l_total_tax_amount;
            l_txsv_tbl(i).alc_serialized_total_line_amt  := l_total_line_amount;

            i := i + 1;

          END LOOP;
        END LOOP;
      END IF;

      IF (l_txsv_tbl.COUNT > 0) THEN
        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_ser_split_total_tax',
              'Calling okl_tax_sources_pub.update_tax_sources for updating Total Tax for all Lines in Tax Sources');
        END IF;

        okl_tax_sources_pub.update_tax_sources(p_api_version     => p_api_version
                                              ,p_init_msg_list   => p_init_msg_list
                                              ,x_return_status   => l_return_status
                                              ,x_msg_count       => x_msg_count
                                              ,x_msg_data        => x_msg_data
                                              ,p_txsv_tbl        => l_txsv_tbl
                                              ,x_txsv_tbl        => lx_txsv_tbl);

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_ser_split_total_tax',
             'Return Status' || l_return_status);
        END IF;

        IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;

      END IF;

      x_return_status := l_return_status;

      IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.populate_ser_split_total_tax ','End(-)');
      END IF;

    EXCEPTION

      WHEN OKL_API.G_EXCEPTION_ERROR THEN

        IF (l_alc_total_tax_ser_csr%ISOPEN) THEN
          CLOSE l_alc_total_tax_ser_csr;
        END IF;

        IF (l_taxablelines_ser_csr%ISOPEN) THEN
          CLOSE l_taxablelines_ser_csr;
        END IF;

        IF (l_fetch_stream_types_csr%ISOPEN) THEN
          CLOSE l_fetch_stream_types_csr;
        END IF;

        IF (l_alc_total_line_amt_ser_csr%ISOPEN) THEN
          CLOSE l_alc_total_line_amt_ser_csr;
        END IF;

        IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
           FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.populate_ser_split_total_tax ',
                    'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
        END IF;

        x_return_status := OKL_API.G_RET_STS_ERROR;

      WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN

        IF (l_alc_total_tax_ser_csr%ISOPEN) THEN
          CLOSE l_alc_total_tax_ser_csr;
        END IF;

        IF (l_taxablelines_ser_csr%ISOPEN) THEN
          CLOSE l_taxablelines_ser_csr;
        END IF;

        IF (l_fetch_stream_types_csr%ISOPEN) THEN
          CLOSE l_fetch_stream_types_csr;
        END IF;

        IF (l_alc_total_line_amt_ser_csr%ISOPEN) THEN
          CLOSE l_alc_total_line_amt_ser_csr;
        END IF;

        IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
           FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.populate_ser_split_total_tax ',
                    'EXCEPTION :'||'OKL_API.G_EXCEPTION_UNEXPECTED_ERROR');
        END IF;

        x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;

      WHEN OTHERS THEN

        IF (l_alc_total_tax_ser_csr%ISOPEN) THEN
          CLOSE l_alc_total_tax_ser_csr;
        END IF;

        IF (l_taxablelines_ser_csr%ISOPEN) THEN
          CLOSE l_taxablelines_ser_csr;
        END IF;

        IF (l_fetch_stream_types_csr%ISOPEN) THEN
          CLOSE l_fetch_stream_types_csr;
        END IF;

        IF (l_alc_total_line_amt_ser_csr%ISOPEN) THEN
          CLOSE l_alc_total_line_amt_ser_csr;
        END IF;

        IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
           FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.populate_ser_split_total_tax ',
                    'EXCEPTION :'||sqlerrm);
        END IF;

        x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
        -- unexpected error
        OKL_API.set_message(p_app_name      => g_app_name,
                            p_msg_name      => g_unexpected_error,
                            p_token1        => g_sqlcode_token,
                            p_token1_value  => sqlcode,
                            p_token2        => g_sqlerrm_token,
                            p_token2_value  => sqlerrm);

    END populate_ser_split_total_tax;

  /*========================================================================
   | PRIVATE PROCEDURE populate_alc_total_tax
   |
   | DESCRIPTION
   |    This procedure populates the asset location change serialized total tax
   |
   | CALLED FROM
   |        process_tax_determ_override()
   |        process_asset_loc_tax()
   |
   | CALLS PROCEDURES/FUNCTIONS
   |        okl_tax_sources_pub.update_tax_sources()
   |
   | PARAMETERS
   |      p_source_trx_id              -- Source Transaction Identifier
   |
   | KNOWN ISSUES
   |
   | NOTES
   |
   |
   | MODIFICATION HISTORY
   | Date          Author     Description of Changes
   | 11-APR-07    RRAVIKIR      Created
   |
   *=======================================================================*/
    PROCEDURE populate_alc_total_tax(
      p_api_version                   IN  NUMBER,
      p_init_msg_list                 IN  VARCHAR2 DEFAULT OKL_API.G_FALSE,
      x_return_status                 OUT NOCOPY VARCHAR2,
      x_msg_count                     OUT NOCOPY NUMBER,
      x_msg_data                      OUT NOCOPY VARCHAR2,
      p_asset_id                      IN  NUMBER,
      p_request_id                    IN  NUMBER,
      p_serialized_asset              IN  VARCHAR2 DEFAULT NULL) IS

      -- Local variables
      l_api_name                      CONSTANT VARCHAR2(30) := 'populate_alc_total_tax';
      l_return_status                 VARCHAR2(1) := OKL_API.G_RET_STS_SUCCESS;
      l_total_tax_amount              NUMBER;
      i                               NUMBER;
      j                               NUMBER;

      -- Local data structure
      l_txsv_tbl                      txsv_tbl_type;
      lx_txsv_tbl                     txsv_tbl_type;

      -- Cursors
      CURSOR l_taxablelines_csr(cp_kle_id IN NUMBER, cp_request_id IN NUMBER) IS
      SELECT id
      FROM okl_tax_sources
      WHERE trx_id IN (SELECT id
                       FROM okl_trx_assets
                       WHERE req_asset_id = cp_request_id)
      AND kle_id = cp_kle_id
      AND tax_call_type_code = G_UPFRONT_TAX
      AND tax_line_status_code = G_ACTIVE_STATUS
      AND entity_code = G_ASSETS_ENTITY_CODE
      AND event_class_code = G_ALC_EVENT_CODE;

      CURSOR l_taxablelines_ser_csr(cp_kle_id IN NUMBER, cp_request_id IN NUMBER, cp_sty_id IN NUMBER) IS
      SELECT id
      FROM okl_tax_sources
      WHERE trx_id IN (SELECT id
                       FROM okl_trx_assets
                       WHERE req_asset_id = cp_request_id)
      AND kle_id = cp_kle_id
      AND sty_id = cp_sty_id
      AND tax_call_type_code = G_UPFRONT_TAX
      AND tax_line_status_code = G_INACTIVE_STATUS
      AND entity_code = G_ASSETS_ENTITY_CODE
      AND event_class_code = G_ALC_EVENT_CODE;

      CURSOR l_alc_total_tax_ser_csr(cp_request_id IN NUMBER, cp_kle_id IN NUMBER, cp_sty_id IN NUMBER) IS
      SELECT SUM(total_tax)
      FROM okl_tax_sources
      WHERE trx_id IN (SELECT id
                       FROM okl_trx_assets
                       WHERE req_asset_id = cp_request_id)
      AND kle_id = cp_kle_id
      AND sty_id = cp_sty_id
      AND tax_call_type_code = G_UPFRONT_TAX
      AND tax_line_status_code = G_INACTIVE_STATUS
      AND entity_code = G_ASSETS_ENTITY_CODE
      AND event_class_code = G_ALC_EVENT_CODE;

      CURSOR l_alc_total_tax_csr(cp_request_id IN NUMBER) IS
      SELECT SUM(total_tax)
      FROM okl_tax_sources
      WHERE trx_id IN (SELECT id
                       FROM okl_trx_assets
                       WHERE req_asset_id = cp_request_id)
      AND tax_call_type_code = G_UPFRONT_TAX
      AND tax_line_status_code = G_ACTIVE_STATUS
      AND entity_code = G_ASSETS_ENTITY_CODE
      AND event_class_code = G_ALC_EVENT_CODE;

      CURSOR l_fetch_stream_types_csr(cp_kle_id IN NUMBER, cp_request_id IN NUMBER) IS
      SELECT DISTINCT sty_id
      FROM okl_tax_sources
      WHERE trx_id IN (SELECT id
                       FROM okl_trx_assets
                       WHERE req_asset_id = cp_request_id)
      AND kle_id = cp_kle_id
      AND tax_call_type_code = G_UPFRONT_TAX
      AND tax_line_status_code = G_INACTIVE_STATUS
      AND entity_code = G_ASSETS_ENTITY_CODE
      AND event_class_code = G_ALC_EVENT_CODE;

    BEGIN
      IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.populate_alc_total_tax','Begin(+)');
      END IF;

      --Print Input Variables
      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_alc_total_tax.',
                'p_init_msg_list :'||p_init_msg_list);
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_alc_total_tax.',
                'p_asset_id :'||p_asset_id);
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_alc_total_tax.',
                'p_request_id :'||p_request_id);
      END IF;

      -- Get the modified tax lines from tax sources, sum up the total tax amount
      -- and store in alc_serialized_total_tax column of okl_tax_sources
      i := 1;
      IF (p_serialized_asset = 'Y') THEN
        FOR l_fetch_stream_types_rec IN l_fetch_stream_types_csr(cp_kle_id     => p_asset_id,
                                                                 cp_request_id => p_request_id) LOOP
          j := 1;
          FOR l_taxablelines_ser_rec IN l_taxablelines_ser_csr(cp_kle_id     => p_asset_id,
                                                               cp_request_id => p_request_id,
                                                               cp_sty_id     => l_fetch_stream_types_rec.sty_id) LOOP

            IF (j = 1) THEN
              OPEN l_alc_total_tax_ser_csr(cp_request_id  => p_request_id,
                                           cp_kle_id      => p_asset_id,
                                           cp_sty_id      => l_fetch_stream_types_rec.sty_id);
              FETCH l_alc_total_tax_ser_csr INTO l_total_tax_amount;
              CLOSE l_alc_total_tax_ser_csr;

              j := j + 1;
            END IF;

            IF l_total_tax_amount IS NULL THEN
              l_total_tax_amount := 0;
            END IF;
            -- Populate Tax Sources data structure and update total tax
            l_txsv_tbl(i).id                       := l_taxablelines_ser_rec.id;
            l_txsv_tbl(i).alc_serialized_total_tax := l_total_tax_amount;
            l_txsv_tbl(i).tax_line_status_code     := G_ACTIVE_STATUS;

            i := i + 1;

          END LOOP;
        END LOOP;
      ELSE
        FOR l_taxablelines_rec IN l_taxablelines_csr(cp_kle_id => p_asset_id, cp_request_id => p_request_id) LOOP

          IF (i = 1) THEN
            OPEN l_alc_total_tax_csr(cp_request_id  => p_request_id);
            FETCH l_alc_total_tax_csr INTO l_total_tax_amount;
            CLOSE l_alc_total_tax_csr;
          END IF;

          IF l_total_tax_amount IS NULL THEN
            l_total_tax_amount := 0;
          END IF;
          -- Populate Tax Sources data structure and update total tax
          l_txsv_tbl(i).id                       := l_taxablelines_rec.id;
          l_txsv_tbl(i).alc_serialized_total_tax := l_total_tax_amount;

          i := i+1;

        END LOOP;
      END IF;

      IF (l_txsv_tbl.COUNT > 0) THEN
        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_alc_total_tax',
              'Calling okl_tax_sources_pub.update_tax_sources for updating Total Tax for all Lines in Tax Sources');
        END IF;

        okl_tax_sources_pub.update_tax_sources(p_api_version     => p_api_version
                                              ,p_init_msg_list   => p_init_msg_list
                                              ,x_return_status   => l_return_status
                                              ,x_msg_count       => x_msg_count
                                              ,x_msg_data        => x_msg_data
                                              ,p_txsv_tbl        => l_txsv_tbl
                                              ,x_txsv_tbl        => lx_txsv_tbl);

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_alc_total_tax',
             'Return Status' || l_return_status);
        END IF;

        IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;

      END IF;

      x_return_status := l_return_status;

      IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.populate_alc_total_tax ','End(-)');
      END IF;

    EXCEPTION

      WHEN OKL_API.G_EXCEPTION_ERROR THEN

        IF (l_alc_total_tax_csr%ISOPEN) THEN
          CLOSE l_alc_total_tax_csr;
        END IF;

        IF (l_taxablelines_ser_csr%ISOPEN) THEN
          CLOSE l_taxablelines_ser_csr;
        END IF;

        IF (l_taxablelines_csr%ISOPEN) THEN
          CLOSE l_taxablelines_csr;
        END IF;

        IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
           FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.populate_alc_total_tax ',
                    'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
        END IF;

        IF (l_fetch_stream_types_csr%ISOPEN) THEN
          CLOSE l_fetch_stream_types_csr;
        END IF;

        x_return_status := OKL_API.G_RET_STS_ERROR;

      WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN

        IF (l_alc_total_tax_csr%ISOPEN) THEN
          CLOSE l_alc_total_tax_csr;
        END IF;

        IF (l_taxablelines_ser_csr%ISOPEN) THEN
          CLOSE l_taxablelines_ser_csr;
        END IF;

        IF (l_taxablelines_csr%ISOPEN) THEN
          CLOSE l_taxablelines_csr;
        END IF;

        IF (l_fetch_stream_types_csr%ISOPEN) THEN
          CLOSE l_fetch_stream_types_csr;
        END IF;

        IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
           FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.populate_alc_total_tax ',
                    'EXCEPTION :'||'OKL_API.G_EXCEPTION_UNEXPECTED_ERROR');
        END IF;

        x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;

      WHEN OTHERS THEN

        IF (l_alc_total_tax_csr%ISOPEN) THEN
          CLOSE l_alc_total_tax_csr;
        END IF;

        IF (l_taxablelines_ser_csr%ISOPEN) THEN
          CLOSE l_taxablelines_ser_csr;
        END IF;

        IF (l_taxablelines_csr%ISOPEN) THEN
          CLOSE l_taxablelines_csr;
        END IF;

        IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
           FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.populate_alc_total_tax ',
                    'EXCEPTION :'||sqlerrm);
        END IF;

        IF (l_fetch_stream_types_csr%ISOPEN) THEN
          CLOSE l_fetch_stream_types_csr;
        END IF;

        x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
        -- unexpected error
        OKL_API.set_message(p_app_name      => g_app_name,
                            p_msg_name      => g_unexpected_error,
                            p_token1        => g_sqlcode_token,
                            p_token1_value  => sqlcode,
                            p_token2        => g_sqlerrm_token,
                            p_token2_value  => sqlerrm);

    END populate_alc_total_tax;

  /*========================================================================
   | PRIVATE PROCEDURE update_tax_sources_total
   |
   | DESCRIPTION
   |    This procedure fetches the tax amount from ZX_LINES and updates
   |    the tax sources
   |
   | CALLED FROM
   |        process_contract_reversal_tax()
   |        process_quote_tax()
   |        process_asset_loc_tax()
   |        process_booking_upfront_tax()
   |        process_quoting_upfront_tax()
   |        process_tax_determ_override()
   |        process_tax_details_override()
   |        process_rebook_upfront_tax()
   |
   | CALLS PROCEDURES/FUNCTIONS
   |        okl_tax_sources_pub.update_tax_sources()
   |        populate_alc_total_tax()
   |
   | PARAMETERS
   |      p_source_trx_id              -- Source Transaction Identifier
   |
   | KNOWN ISSUES
   |
   | NOTES
   |
   |
   | MODIFICATION HISTORY
   | Date          Author     Description of Changes
   | 11-APR-07    RRAVIKIR      Created
   |
   *=======================================================================*/
    PROCEDURE update_tax_sources_total(
      p_api_version                   IN  NUMBER,
      p_init_msg_list                 IN  VARCHAR2 DEFAULT OKL_API.G_FALSE,
      x_return_status                 OUT NOCOPY VARCHAR2,
      x_msg_count                     OUT NOCOPY NUMBER,
      x_msg_data                      OUT NOCOPY VARCHAR2,
      p_source_trx_id                 IN  NUMBER,
      p_source_trx_name               IN  VARCHAR2 DEFAULT NULL,
      p_serialized_asset              IN  VARCHAR2 DEFAULT NULL) IS

      -- Local variables
      l_api_name                      CONSTANT VARCHAR2(30) := 'update_tax_sources_total';
      l_return_status                 VARCHAR2(1) := OKL_API.G_RET_STS_SUCCESS;
      l_total_tax_amount              NUMBER;
      i                               NUMBER;

      -- Local data structure
      l_txsv_tbl                      txsv_tbl_type;
      lx_txsv_tbl                     txsv_tbl_type;

      -- Cursors
      CURSOR l_taxablelines_rbk_csr(cp_trx_id IN NUMBER) IS
      SELECT id, trx_line_id,application_id, event_class_code, entity_code,
             trx_level_type
      FROM okl_tax_sources
      WHERE trx_id = cp_trx_id
      AND tax_call_type_code = G_UPFRONT_TAX
      AND tax_line_status_code = G_INACTIVE_STATUS
      AND adjusted_doc_trx_id IS NOT NULL;

      CURSOR l_taxablelines_csr(cp_trx_id IN NUMBER) IS
      SELECT id, trx_line_id,application_id, event_class_code, entity_code,
             trx_level_type
      FROM okl_tax_sources
      WHERE trx_id = cp_trx_id
      AND tax_call_type_code = G_UPFRONT_TAX
      AND tax_line_status_code = G_ACTIVE_STATUS;

      CURSOR l_taxablelines_txs_csr(cp_trx_id IN NUMBER) IS
      SELECT id, trx_line_id,application_id, event_class_code, entity_code,
             trx_level_type
      FROM okl_tax_sources
      WHERE trx_id = cp_trx_id
      AND tax_call_type_code = G_TAX_SCHEDULE
      AND tax_line_status_code = G_ACTIVE_STATUS;

      CURSOR l_taxablelines_bill_csr(cp_trx_id IN NUMBER) IS
      SELECT id, trx_line_id,application_id, event_class_code, entity_code,
             trx_level_type
      FROM okl_tax_sources
      WHERE trx_id = cp_trx_id
      AND tax_call_type_code = G_INVOICE_TAX
      AND tax_line_status_code = G_ACTIVE_STATUS;

      CURSOR l_zxlinestotaltax_csr(cp_trx_id  IN NUMBER, cp_trx_line_id   IN NUMBER,
                                   cp_application_id  IN NUMBER, cp_event_class_code IN VARCHAR2,
                                   cp_entity_code  IN VARCHAR2, cp_trx_level_type  IN VARCHAR2) IS
      SELECT  SUM(tax_amt) total_tax
      FROM    zx_lines
      WHERE   trx_id = cp_trx_id
      AND     trx_line_id = cp_trx_line_id
      AND     application_id = cp_application_id
      AND     event_class_code = cp_event_class_code
      AND     entity_code = cp_entity_code
      AND     trx_level_type = cp_trx_level_type
      AND     nvl(cancel_flag, 'N') <> 'Y';

      CURSOR l_totaltax_quote_csr(cp_trx_id  IN NUMBER, cp_trx_line_id   IN NUMBER,
                                   cp_application_id  IN NUMBER, cp_event_class_code IN VARCHAR2,
                                   cp_entity_code  IN VARCHAR2, cp_trx_level_type  IN VARCHAR2) IS
      SELECT  SUM(tax_amt) total_tax
      FROM    zx_detail_tax_lines_gt
      WHERE   trx_id = cp_trx_id
      AND     trx_line_id = cp_trx_line_id
      AND     application_id = cp_application_id
      AND     event_class_code = cp_event_class_code
      AND     entity_code = cp_entity_code
      AND     trx_level_type = cp_trx_level_type
      AND     nvl(cancel_flag, 'N') <> 'Y';

      CURSOR l_taxablelines_alc_ser_csr(cp_trx_id IN NUMBER) IS
      SELECT id, trx_line_id,application_id, event_class_code, entity_code,
             trx_level_type
      FROM okl_tax_sources
      WHERE trx_id = cp_trx_id
      AND tax_call_type_code = G_UPFRONT_TAX
      AND tax_line_status_code = G_INACTIVE_STATUS;

    BEGIN
      IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.update_tax_sources_total','Begin(+)');
      END IF;

      --Print Input Variables
      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.update_tax_sources_total.',
                'p_init_msg_list :'||p_init_msg_list);
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.update_tax_sources_total.',
                'p_source_trx_id :'||p_source_trx_id);
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.update_tax_sources_total.',
                'p_source_trx_name :'||p_source_trx_name);
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.update_tax_sources_total.',
                'p_serialized_asset :'||p_serialized_asset);
      END IF;

      i := 1;
      IF p_source_trx_name = 'Estimated Billing' THEN
        FOR l_taxablelines_bill_rec IN l_taxablelines_bill_csr(cp_trx_id => p_source_trx_id) LOOP

          -- Get the modified tax lines from zx_detail_tax_lines_gt, sum up the total tax amount
          -- and store in total_tax column of okl_tax_sources
          OPEN l_totaltax_quote_csr(cp_trx_id           => p_source_trx_id,
                                    cp_trx_line_id      => l_taxablelines_bill_rec.trx_line_id,
                                    cp_application_id   => l_taxablelines_bill_rec.application_id,
                                    cp_event_class_code => l_taxablelines_bill_rec.event_class_code,
                                    cp_entity_code      => l_taxablelines_bill_rec.entity_code,
                                    cp_trx_level_type   => l_taxablelines_bill_rec.trx_level_type);
          FETCH l_totaltax_quote_csr INTO l_total_tax_amount;
          CLOSE l_totaltax_quote_csr;

          IF l_total_tax_amount IS NULL THEN
            l_total_tax_amount := 0;
          END IF;

          -- Populate Tax Sources data structure and update total tax
          l_txsv_tbl(i).id := l_taxablelines_bill_rec.id;
          l_txsv_tbl(i).total_tax := l_total_tax_amount;

          i := i+1;

        END LOOP;

      ELSIF p_source_trx_name = 'Rebook' THEN

        -- Get the modified tax lines from zx_lines, sum up the total tax amount
        -- and store in total_tax column of okl_tax_sources
        FOR l_taxablelines_rbk_rec IN l_taxablelines_rbk_csr(cp_trx_id => p_source_trx_id) LOOP
          OPEN l_zxlinestotaltax_csr(cp_trx_id           => p_source_trx_id,
                                     cp_trx_line_id      => l_taxablelines_rbk_rec.trx_line_id,
                                     cp_application_id   => l_taxablelines_rbk_rec.application_id,
                                     cp_event_class_code => l_taxablelines_rbk_rec.event_class_code,
                                     cp_entity_code      => l_taxablelines_rbk_rec.entity_code,
                                     cp_trx_level_type   => l_taxablelines_rbk_rec.trx_level_type);
          FETCH l_zxlinestotaltax_csr INTO l_total_tax_amount;
          CLOSE l_zxlinestotaltax_csr;

          IF l_total_tax_amount IS NULL THEN
            l_total_tax_amount := 0;
          END IF;
          -- Populate Tax Sources data structure and update total tax
          l_txsv_tbl(i).id := l_taxablelines_rbk_rec.id;
          l_txsv_tbl(i).total_tax := l_total_tax_amount;

          i := i+1;

        END LOOP;

      ELSIF (p_source_trx_name = 'Asset Relocation' AND p_serialized_asset = 'Y') THEN

        -- Get the modified tax lines from zx_lines, sum up the total tax amount
        -- and store in total_tax column of okl_tax_sources
        FOR l_taxablelines_alc_ser_rec IN l_taxablelines_alc_ser_csr(cp_trx_id => p_source_trx_id) LOOP
          OPEN l_zxlinestotaltax_csr(cp_trx_id           => p_source_trx_id,
                                     cp_trx_line_id      => l_taxablelines_alc_ser_rec.trx_line_id,
                                     cp_application_id   => l_taxablelines_alc_ser_rec.application_id,
                                     cp_event_class_code => l_taxablelines_alc_ser_rec.event_class_code,
                                     cp_entity_code      => l_taxablelines_alc_ser_rec.entity_code,
                                     cp_trx_level_type   => l_taxablelines_alc_ser_rec.trx_level_type);
          FETCH l_zxlinestotaltax_csr INTO l_total_tax_amount;
          CLOSE l_zxlinestotaltax_csr;

          IF l_total_tax_amount IS NULL THEN
            l_total_tax_amount := 0;
          END IF;
          -- Populate Tax Sources data structure and update total tax
          l_txsv_tbl(i).id := l_taxablelines_alc_ser_rec.id;
          l_txsv_tbl(i).total_tax := l_total_tax_amount;

          i := i+1;
        END LOOP;

      ELSIF (p_source_trx_name = 'Tax Schedule') THEN

        -- Get the modified tax lines from zx_lines_det_factors, sum up the total tax amount
        -- and store in total_tax column of okl_tax_sources
        FOR l_taxablelines_txs_rec IN l_taxablelines_txs_csr(cp_trx_id => p_source_trx_id) LOOP
          OPEN l_totaltax_quote_csr(cp_trx_id           => p_source_trx_id,
                                    cp_trx_line_id      => l_taxablelines_txs_rec.trx_line_id,
                                    cp_application_id   => l_taxablelines_txs_rec.application_id,
                                    cp_event_class_code => l_taxablelines_txs_rec.event_class_code,
                                    cp_entity_code      => l_taxablelines_txs_rec.entity_code,
                                    cp_trx_level_type   => l_taxablelines_txs_rec.trx_level_type);
          FETCH l_totaltax_quote_csr INTO l_total_tax_amount;
          CLOSE l_totaltax_quote_csr;

          IF l_total_tax_amount IS NOT NULL THEN
            -- Populate Tax Sources data structure and update total tax
            l_txsv_tbl(i).id := l_taxablelines_txs_rec.id;
            l_txsv_tbl(i).total_tax := l_total_tax_amount;
          END IF;

          i := i+1;
        END LOOP;

      ELSE

        -- Get the modified tax lines from zx_lines, sum up the total tax amount
        -- and store in total_tax column of okl_tax_sources
        FOR l_taxablelines_rec IN l_taxablelines_csr(cp_trx_id => p_source_trx_id) LOOP

          IF p_source_trx_name = 'Sales Quote' THEN
            OPEN l_totaltax_quote_csr(cp_trx_id           => p_source_trx_id,
                                      cp_trx_line_id      => l_taxablelines_rec.trx_line_id,
                                      cp_application_id   => l_taxablelines_rec.application_id,
                                      cp_event_class_code => l_taxablelines_rec.event_class_code,
                                      cp_entity_code      => l_taxablelines_rec.entity_code,
                                      cp_trx_level_type   => l_taxablelines_rec.trx_level_type);
            FETCH l_totaltax_quote_csr INTO l_total_tax_amount;
            CLOSE l_totaltax_quote_csr;
          ELSE
            OPEN l_zxlinestotaltax_csr(cp_trx_id           => p_source_trx_id,
                                       cp_trx_line_id      => l_taxablelines_rec.trx_line_id,
                                       cp_application_id   => l_taxablelines_rec.application_id,
                                       cp_event_class_code => l_taxablelines_rec.event_class_code,
                                       cp_entity_code      => l_taxablelines_rec.entity_code,
                                       cp_trx_level_type   => l_taxablelines_rec.trx_level_type);
            FETCH l_zxlinestotaltax_csr INTO l_total_tax_amount;
            CLOSE l_zxlinestotaltax_csr;
          END IF;

          IF l_total_tax_amount IS NULL THEN
            l_total_tax_amount := 0;
          END IF;
          -- Populate Tax Sources data structure and update total tax
          l_txsv_tbl(i).id        := l_taxablelines_rec.id;
          l_txsv_tbl(i).total_tax := l_total_tax_amount;

          IF (p_source_trx_name = 'Split Asset') THEN
            -- This is to make adjustable tax sources for previous active Upfront tax
            -- after reverse document call
            l_txsv_tbl(i).tax_line_status_code := G_INACTIVE_STATUS;
          END IF;

          i := i+1;

        END LOOP;
      END IF;

      IF (l_txsv_tbl.COUNT > 0) THEN
        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.update_tax_sources_total',
              'Calling okl_tax_sources_pub.update_tax_sources for updating Total Tax for all Lines in Tax Sources');
        END IF;

        okl_tax_sources_pub.update_tax_sources(p_api_version     => p_api_version
                                              ,p_init_msg_list   => p_init_msg_list
                                              ,x_return_status   => l_return_status
                                              ,x_msg_count       => x_msg_count
                                              ,x_msg_data        => x_msg_data
                                              ,p_txsv_tbl        => l_txsv_tbl
                                              ,x_txsv_tbl        => lx_txsv_tbl);

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.update_tax_sources_total',
             'Return Status' || l_return_status);
        END IF;

        IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;

      END IF;

      x_return_status := l_return_status;

      IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.update_tax_sources_total ','End(-)');
      END IF;

    EXCEPTION

      WHEN OKL_API.G_EXCEPTION_ERROR THEN

        IF (l_taxablelines_csr%ISOPEN) THEN
          CLOSE l_taxablelines_csr;
        END IF;

        IF (l_taxablelines_bill_csr%ISOPEN) THEN
          CLOSE l_taxablelines_bill_csr;
        END IF;

        IF (l_zxlinestotaltax_csr%ISOPEN) THEN
          CLOSE l_zxlinestotaltax_csr;
        END IF;

        IF (l_totaltax_quote_csr%ISOPEN) THEN
          CLOSE l_totaltax_quote_csr;
        END IF;

        IF (l_taxablelines_rbk_csr%ISOPEN) THEN
          CLOSE l_taxablelines_rbk_csr;
        END IF;

        IF (l_taxablelines_alc_ser_csr%ISOPEN) THEN
          CLOSE l_taxablelines_alc_ser_csr;
        END IF;

        IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
           FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.update_tax_sources_total ',
                    'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
        END IF;

        x_return_status := OKL_API.G_RET_STS_ERROR;

      WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN

        IF (l_taxablelines_csr%ISOPEN) THEN
          CLOSE l_taxablelines_csr;
        END IF;

        IF (l_taxablelines_bill_csr%ISOPEN) THEN
          CLOSE l_taxablelines_bill_csr;
        END IF;

        IF (l_zxlinestotaltax_csr%ISOPEN) THEN
          CLOSE l_zxlinestotaltax_csr;
        END IF;

        IF (l_totaltax_quote_csr%ISOPEN) THEN
          CLOSE l_totaltax_quote_csr;
        END IF;

        IF (l_taxablelines_rbk_csr%ISOPEN) THEN
          CLOSE l_taxablelines_rbk_csr;
        END IF;

        IF (l_taxablelines_alc_ser_csr%ISOPEN) THEN
          CLOSE l_taxablelines_alc_ser_csr;
        END IF;

        IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
           FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.update_tax_sources_total ',
                    'EXCEPTION :'||'OKL_API.G_EXCEPTION_UNEXPECTED_ERROR');
        END IF;

        x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;

      WHEN OTHERS THEN

        IF (l_taxablelines_csr%ISOPEN) THEN
          CLOSE l_taxablelines_csr;
        END IF;

        IF (l_taxablelines_bill_csr%ISOPEN) THEN
          CLOSE l_taxablelines_bill_csr;
        END IF;

        IF (l_zxlinestotaltax_csr%ISOPEN) THEN
          CLOSE l_zxlinestotaltax_csr;
        END IF;

        IF (l_totaltax_quote_csr%ISOPEN) THEN
          CLOSE l_totaltax_quote_csr;
        END IF;

        IF (l_taxablelines_rbk_csr%ISOPEN) THEN
          CLOSE l_taxablelines_rbk_csr;
        END IF;

        IF (l_taxablelines_alc_ser_csr%ISOPEN) THEN
          CLOSE l_taxablelines_alc_ser_csr;
        END IF;

        IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
           FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.update_tax_sources_total ',
                    'EXCEPTION :'||sqlerrm);
        END IF;

        x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
        -- unexpected error
        OKL_API.set_message(p_app_name      => g_app_name,
                            p_msg_name      => g_unexpected_error,
                            p_token1        => g_sqlcode_token,
                            p_token1_value  => sqlcode,
                            p_token2        => g_sqlerrm_token,
                            p_token2_value  => sqlerrm);

    END update_tax_sources_total;

/*========================================================================
 | PRIVATE PROCEDURE make_tax_sources_reportable
 |
 | DESCRIPTION
 |    This procedure makes the tax sources reportable
 |
 | CALLED FROM
 |        process_asset_loc_tax()
 |        process_booking_upfront_tax()
 |        process_rebook_upfront_tax()
 |
 | CALLS PROCEDURES/FUNCTIONS
 |
 |
 | PARAMETERS
 |      p_source_trx_id              -- Source Transaction Identifier
 |
 | KNOWN ISSUES
 |
 | NOTES
 |
 |
 | MODIFICATION HISTORY
 | Date          Author     Description of Changes
 | 16-MAY-07    RRAVIKIR      Created
 |
 *=======================================================================*/
  PROCEDURE make_tax_sources_reportable(
    p_api_version                       IN  NUMBER,
    p_init_msg_list                     IN  VARCHAR2 DEFAULT OKL_API.G_FALSE,
    x_return_status                     OUT NOCOPY VARCHAR2,
    x_msg_count                         OUT NOCOPY NUMBER,
    x_msg_data                          OUT NOCOPY VARCHAR2,
    p_source_trx_id                 IN  NUMBER) IS

    -- Local variables
    l_api_name                      CONSTANT VARCHAR2(30) := 'make_tax_sources_reportable';
    l_return_status                 VARCHAR2(1) := OKL_API.G_RET_STS_SUCCESS;
    l_total_tax_amount              NUMBER;

    -- Local data structure
    l_txsv_tbl                      txsv_tbl_type;
    lx_txsv_tbl                     txsv_tbl_type;

    i                               NUMBER;

    -- Cursors
    CURSOR l_taxablelines_csr(cp_trx_id IN NUMBER) IS
    SELECT id, trx_line_id,application_id, event_class_code, entity_code,
           trx_level_type
    FROM okl_tax_sources
    WHERE trx_id = cp_trx_id
    AND tax_call_type_code = G_UPFRONT_TAX
    AND tax_line_status_code = G_ACTIVE_STATUS;

  BEGIN
    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.make_tax_sources_reportable','Begin(+)');
    END IF;

    --Print Input Variables
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.make_tax_sources_reportable.',
              'p_init_msg_list :'||p_init_msg_list);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.make_tax_sources_reportable.',
              'p_source_trx_id :'||p_source_trx_id);
    END IF;

    i := 1;
    FOR l_taxablelines_rec IN l_taxablelines_csr(cp_trx_id => p_source_trx_id) LOOP

      -- Populate Tax Sources data structure and update total tax
      l_txsv_tbl(i).id := l_taxablelines_rec.id;
      l_txsv_tbl(i).tax_reporting_flag := 'Y';
      l_txsv_tbl(i).reported_yn := 'Y';

      i := i + 1;
    END LOOP;

    IF (l_txsv_tbl.COUNT > 0) THEN
      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.make_tax_sources_reportable',
            'Calling okl_tax_sources_pub.update_tax_sources for making Tax Sources Reportable');
      END IF;

      okl_tax_sources_pub.update_tax_sources(p_api_version     => p_api_version
                                            ,p_init_msg_list   => p_init_msg_list
                                            ,x_return_status   => l_return_status
                                            ,x_msg_count       => x_msg_count
                                            ,x_msg_data        => x_msg_data
                                            ,p_txsv_tbl        => l_txsv_tbl
                                            ,x_txsv_tbl        => lx_txsv_tbl);

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.make_tax_sources_reportable',
            'Return Status' || l_return_status);
      END IF;

      IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

    END IF;

    x_return_status := l_return_status;

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.make_tax_sources_reportable ','End(-)');
    END IF;

  EXCEPTION

    WHEN OKL_API.G_EXCEPTION_ERROR THEN

      IF (l_taxablelines_csr%ISOPEN) THEN
        CLOSE l_taxablelines_csr;
      END IF;

      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.make_tax_sources_reportable ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
      END IF;

      x_return_status := OKL_API.G_RET_STS_ERROR;

    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN

      IF (l_taxablelines_csr%ISOPEN) THEN
        CLOSE l_taxablelines_csr;
      END IF;

      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.make_tax_sources_reportable ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_UNEXPECTED_ERROR');
      END IF;

      x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;

    WHEN OTHERS THEN

      IF (l_taxablelines_csr%ISOPEN) THEN
        CLOSE l_taxablelines_csr;
      END IF;

      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.make_tax_sources_reportable ',
                  'EXCEPTION :'||sqlerrm);
      END IF;

      x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
      -- unexpected error
      OKL_API.set_message(p_app_name      => g_app_name,
                          p_msg_name      => g_unexpected_error,
                          p_token1        => g_sqlcode_token,
                          p_token1_value  => sqlcode,
                          p_token2        => g_sqlerrm_token,
                          p_token2_value  => sqlerrm);

  END make_tax_sources_reportable;

/*========================================================================
 | PRIVATE PROCEDURE process_final_upfront_tax
 |
 | DESCRIPTION
 |    This procedure processes the final upfront tax for 'Booking', 'Asset
 |    Location change' and 'Rebook' transactions
 |
 | CALLED FROM
 |    Other procedures in this API
 |
 | CALLS PROCEDURES/FUNCTIONS
 |       OKL_TAX_INTERFACE_PVT.mark_reporting_flag
 |
 | PARAMETERS
 |  Input Parameters
 |      p_trx_id                        -- Transaction identifier
 |      p_application_id        -- Application identifier
 |      p_entity_code           -- Entity code
 |      p_event_class_code      -- Event class code
 |
 |  Output Parameters
 |
 | KNOWN ISSUES
 |
 | NOTES
 |
 |
 | MODIFICATION HISTORY
 | Date                  Author            Description of Changes
 | 22-MAR-07            RRAVIKIR           Created
 *=======================================================================*/
  PROCEDURE process_final_upfront_tax(
    p_api_version                       IN  NUMBER,
    p_init_msg_list                     IN  VARCHAR2 DEFAULT OKL_API.G_FALSE,
    x_return_status                     OUT NOCOPY VARCHAR2,
    x_msg_count                         OUT NOCOPY NUMBER,
    x_msg_data                          OUT NOCOPY VARCHAR2,
    p_trx_id                        IN  NUMBER,
    p_application_id                IN  NUMBER,
    p_entity_code                   IN  VARCHAR2,
    p_event_class_code              IN  VARCHAR2) IS

    -- Local variables
    l_api_version                   CONSTANT NUMBER := 1;
    l_api_name                      CONSTANT VARCHAR2(30) := 'process_final_upfront_tax';
    l_return_status                 VARCHAR2(1) := OKL_API.G_RET_STS_SUCCESS;

  BEGIN

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.process_final_upfront_tax','Begin(+)');
    END IF;

    --Print Input Variables
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_final_upfront_tax.',
              'p_init_msg_list :'||p_init_msg_list);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_final_upfront_tax.',
              'p_trx_id :'||p_trx_id);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_final_upfront_tax.',
              'p_application_id :'||p_application_id);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_final_upfront_tax.',
              'p_entity_code :'||p_entity_code);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_final_upfront_tax.',
              'p_event_class_code :'||p_event_class_code);
    END IF;

    -- Required Values
    IF p_trx_id IS NULL THEN
       OKL_API.set_message( p_msg_name      => G_REQUIRED_VALUE,
                            p_token1        => G_COL_NAME_TOKEN,
                            p_token1_value  => 'TRX_ID');
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    IF p_application_id IS NULL THEN
       OKL_API.set_message( p_msg_name      => G_REQUIRED_VALUE,
                            p_token1        => G_COL_NAME_TOKEN,
                            p_token1_value  => 'APPLICATION_ID');
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    IF p_entity_code IS NULL THEN
       OKL_API.set_message( p_msg_name      => G_REQUIRED_VALUE,
                            p_token1        => G_COL_NAME_TOKEN,
                            p_token1_value  => 'ENTITY_CODE');
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    IF p_event_class_code IS NULL THEN
       OKL_API.set_message( p_msg_name      => G_REQUIRED_VALUE,
                            p_token1        => G_COL_NAME_TOKEN,
                            p_token1_value  => 'EVENT_CLASS_CODE');
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    -- End required values

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_final_upfront_tax.',
              'Calling OKL_TAX_INTERFACE_PVT.mark_reporting_flag');
    END IF;

    OKL_TAX_INTERFACE_PVT.mark_reporting_flag( p_api_version         => p_api_version,
                                               p_init_msg_list       => p_init_msg_list,
                                               x_return_status       => l_return_status,
                                               x_msg_count           => x_msg_count,
                                               x_msg_data            => x_msg_data,
                                               p_trx_id              => p_trx_id,
                                               p_application_id      => p_application_id,
                                               p_entity_code         => p_entity_code,
                                               p_event_class_code    => p_event_class_code);

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_final_upfront_tax.',
              'Return Status' || l_return_status);
    END IF;

    IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    x_return_status := l_return_status;

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.process_final_upfront_tax ','End(-)');
    END IF;

  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN

      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.process_final_upfront_tax ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
      END IF;

      x_return_status := OKL_API.G_RET_STS_ERROR;

    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.process_final_upfront_tax ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_UNEXPECTED_ERROR');
      END IF;

      x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;

    WHEN OTHERS THEN

      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.process_final_upfront_tax ',
                  'EXCEPTION :'||sqlerrm);
      END IF;

      x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
      -- unexpected error
      OKL_API.set_message(p_app_name      => g_app_name,
                          p_msg_name      => g_unexpected_error,
                          p_token1        => g_sqlcode_token,
                          p_token1_value  => sqlcode,
                          p_token2        => g_sqlerrm_token,
                          p_token2_value  => sqlerrm);

  END process_final_upfront_tax;

/*========================================================================
 | PRIVATE PROCEDURE populate_tax_trx_details
 |
 | DESCRIPTION
 |    This procedure is called by tax module to populate tax data into ZX global
 |    session table. eBtax uses this table to show the tax data for Quote
 |    objects (Sales Quote, Lease Application and Termination Quote)
 |
 | CALLED FROM                                  OLM Tax Module
 |
 |
 | CALLS PROCEDURES/FUNCTIONS
 |
 |
 | PARAMETERS
 |      p_trx_id                     -- Transaction Identifier
 |      p_trx_line_id                -- Transaction Line Identifier
 |      p_application_id             -- Application Identifier
 |      p_trx_level_type             -- Transaction level type
 |      p_entity_code                -- Entity code
 |      p_event_class_code           -- Event class code
 |
 | KNOWN ISSUES
 |
 | NOTES
 |
 |
 | MODIFICATION HISTORY
 | Date          Author     Description of Changes
 | 04-APR-07    RRAVIKIR      Created
 |
 *=======================================================================*/
  PROCEDURE populate_tax_trx_details (
    p_api_version                   IN NUMBER,
    p_init_msg_list                 IN VARCHAR2 DEFAULT OKL_API.G_FALSE,
    x_return_status                 OUT NOCOPY VARCHAR2,
    x_msg_count                     OUT NOCOPY NUMBER,
    x_msg_data                      OUT NOCOPY VARCHAR2,
    p_trx_id                        IN  NUMBER,
    p_trx_line_id                   IN  NUMBER,
    p_application_id                IN  NUMBER,
    p_trx_level_type                        IN  VARCHAR2,
    p_entity_code                                   IN  VARCHAR2,
    p_event_class_code              IN  VARCHAR2) IS

    -- Local variables
    l_api_version                   CONSTANT NUMBER := 1;
    l_api_name                      CONSTANT VARCHAR2(30) := 'populate_tax_trx_details';
    l_return_status                 VARCHAR2(1) := OKL_API.G_RET_STS_SUCCESS;

    -- Cursor to retrieve tax data
    CURSOR l_get_tax_data_csr IS
    SELECT tax_determine_date,
           tax_rate_id,
           tax_rate_code,
           taxable_amt,
           tax_exemption_id,
           tax_rate,
           tax_amt,
           tax_date,
           line_amt,
           internal_organization_id,
           application_id,
           entity_code,
           event_class_code,
           event_type_code ,
           trx_id,
           trx_line_id,
           trx_level_type,
           trx_line_number,
           tax_line_number ,
           tax_regime_id ,
           tax_regime_code ,
           tax_id,
           tax,
           tax_status_id,
           tax_status_code,
           tax_apportionment_line_number,
           legal_entity_id,
           trx_number,
           trx_date,
           tax_jurisdiction_id,
           tax_jurisdiction_code,
           tax_type_code,
           tax_currency_code ,
           taxable_amt_tax_curr,
           trx_currency_code,
           minimum_accountable_unit,
           precision,
           currency_conversion_type,
           currency_conversion_rate,
           currency_conversion_date
    FROM okl_tax_trx_details
    WHERE trx_id = p_trx_id
    AND   trx_line_id = p_trx_line_id
    AND   application_id = p_application_id
    AND   trx_level_type = p_trx_level_type
    AND   entity_code = p_entity_code
    AND   event_class_code = p_event_class_code;

  BEGIN
    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_trx_details','Begin(+)');
    END IF;

    --Print Input Variables
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_trx_details.',
              'p_init_msg_list :'||p_init_msg_list);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_trx_details.',
              'p_trx_id :'||p_trx_id);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_trx_details.',
              'p_trx_line_id :'||p_trx_line_id);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_trx_details.',
              'p_application_id :'||p_application_id);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_trx_details.',
              'p_trx_level_type :'||p_trx_level_type);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_trx_details.',
              'p_entity_code :'||p_entity_code);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_trx_details.',
              'p_event_class_code :'||p_event_class_code);
    END IF;

    -- Populate the tax data into eBtax global session table
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_trx_details.',
              'INSERT INTO zx_detail_tax_lines_gt');
    END IF;

    FOR l_get_tax_data_rec IN l_get_tax_data_csr LOOP
      INSERT INTO zx_detail_tax_lines_gt(
           tax_line_id,
           tax_determine_date,
           tax_rate_id,
           tax_rate_code,
           taxable_amt,
           tax_exemption_id,
           tax_rate,
           tax_amt,
           tax_date,
           line_amt,
           internal_organization_id,
           application_id,
           entity_code,
           event_class_code,
           event_type_code ,
           trx_id,
           trx_line_id,
           trx_level_type,
           trx_line_number,
           tax_line_number ,
           tax_regime_id ,
           tax_regime_code ,
           tax_id,
           tax,
           tax_status_id,
           tax_status_code,
           tax_apportionment_line_number,
           legal_entity_id,
           trx_number,
           trx_date,
           tax_jurisdiction_id,
           tax_jurisdiction_code,
           tax_type_code,
           tax_currency_code ,
           taxable_amt_tax_curr,
           trx_currency_code,
           minimum_accountable_unit,
           precision,
           currency_conversion_type,
           currency_conversion_rate,
           currency_conversion_date,
           created_by,
           creation_date,
           last_updated_by,
           last_update_date,
           last_update_login,
           object_version_number) VALUES
           (
           zx_lines_s.nextval,
           l_get_tax_data_rec.tax_determine_date,
           l_get_tax_data_rec.tax_rate_id,
           l_get_tax_data_rec.tax_rate_code,
           l_get_tax_data_rec.taxable_amt,
           l_get_tax_data_rec.tax_exemption_id,
           l_get_tax_data_rec.tax_rate,
           l_get_tax_data_rec.tax_amt,
           l_get_tax_data_rec.tax_date,
           l_get_tax_data_rec.line_amt,
           l_get_tax_data_rec.internal_organization_id,
           l_get_tax_data_rec.application_id,
           l_get_tax_data_rec.entity_code,
           l_get_tax_data_rec.event_class_code,
           l_get_tax_data_rec.event_type_code ,
           l_get_tax_data_rec.trx_id,
           l_get_tax_data_rec.trx_line_id,
           l_get_tax_data_rec.trx_level_type,
           l_get_tax_data_rec.trx_line_number,
           l_get_tax_data_rec.tax_line_number ,
           l_get_tax_data_rec.tax_regime_id ,
           l_get_tax_data_rec.tax_regime_code ,
           l_get_tax_data_rec.tax_id,
           l_get_tax_data_rec.tax,
           l_get_tax_data_rec.tax_status_id,
           l_get_tax_data_rec.tax_status_code,
           l_get_tax_data_rec.tax_apportionment_line_number,
           l_get_tax_data_rec.legal_entity_id,
           l_get_tax_data_rec.trx_number,
           l_get_tax_data_rec.trx_date,
           l_get_tax_data_rec.tax_jurisdiction_id,
           l_get_tax_data_rec.tax_jurisdiction_code,
           l_get_tax_data_rec.tax_type_code,
           l_get_tax_data_rec.tax_currency_code,
           l_get_tax_data_rec.taxable_amt_tax_curr,
           l_get_tax_data_rec.trx_currency_code,
           l_get_tax_data_rec.minimum_accountable_unit,
           l_get_tax_data_rec.precision,
           l_get_tax_data_rec.currency_conversion_type,
           l_get_tax_data_rec.currency_conversion_rate,
           l_get_tax_data_rec.currency_conversion_date,
           G_USER_ID,
           SYSDATE,
           G_USER_ID,
           SYSDATE,
           G_LOGIN_ID,
           1);
    END LOOP;

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_trx_details.',
              'Return Status' || l_return_status);
    END IF;

    x_return_status := l_return_status;

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_trx_details ','End(-)');
    END IF;

  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN

      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_trx_details ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
      END IF;

      x_return_status := OKL_API.G_RET_STS_ERROR;

    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_trx_details ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_UNEXPECTED_ERROR');
      END IF;

      x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;

    WHEN OTHERS THEN

      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_trx_details ',
                  'EXCEPTION :'||sqlerrm);
      END IF;

      x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
      -- unexpected error
      OKL_API.set_message(p_app_name      => g_app_name,
                          p_msg_name      => g_unexpected_error,
                          p_token1        => g_sqlcode_token,
                          p_token1_value  => sqlcode,
                          p_token2        => g_sqlerrm_token,
                          p_token2_value  => sqlerrm);

  END populate_tax_trx_details;

/*========================================================================
 | PRIVATE PROCEDURE process_contract_reversal_tax
 |
 | DESCRIPTION
 |    This procedure is called from calculate_sales_tax procedure to reverse the
 |    tax entries during contract reversal
 |
 | CALLED FROM                                  calculate_sales_tax()
 |
 |
 | CALLS PROCEDURES/FUNCTIONS
 |     OKL_TAX_SOURCES_PUB.update_tax_sources()
 |
 |
 | PARAMETERS
 |      p_source_trx_id                 -- Source transaction ID
 |      p_source_trx_name       -- Source transaction Name
 |      p_source_table          -- Source table
 |
 | KNOWN ISSUES
 |
 | NOTES
 |
 |
 | MODIFICATION HISTORY
 | Date                  Author            Description of Changes
 | 11-APR-07            RRAVIKIR           Created
 |
 *=======================================================================*/
 PROCEDURE process_contract_reversal_tax(
        p_api_version                   IN  NUMBER,
    p_init_msg_list                     IN  VARCHAR2 DEFAULT OKC_API.G_FALSE,
    x_return_status                     OUT NOCOPY VARCHAR2,
    x_msg_count                         OUT NOCOPY NUMBER,
    x_msg_data                          OUT NOCOPY VARCHAR2,
    p_source_trx_id                                     IN  NUMBER,
    p_source_trx_name               IN  VARCHAR2,
    p_source_table                  IN  VARCHAR2) IS

    ------------- Reverse contract -------------------------
    --p_source_trx_id           ---> okl_trx_assets.id
    --p_source_trx_name     ---> 'Reverse'
    --p_source_table        ---> 'OKL_TRX_CONTRACTS'
    --------------------------------------------------
    -- Local variables
        l_return_status                 VARCHAR2(1) := OKL_API.G_RET_STS_SUCCESS;
    l_rev_trx_type_id               NUMBER;
    l_khr_id                        NUMBER;
    l_legal_entity_id               NUMBER;
    l_trx_date                      DATE;
    l_trx_level_type                VARCHAR2(30);
    l_org_id                        NUMBER;

    i                               NUMBER;
    l_fetch_size                    NUMBER := 10000;
    l_reverse                       BOOLEAN := FALSE;

        TYPE tax_sources_tbl_type IS TABLE OF OKL_TAX_SOURCES%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE tax_src_tbl_type IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;

    l_newtaxsourcesrev_tbl          tax_sources_tbl_type;
    l_tax_src_tbl                   tax_src_tbl_type;
    lp_txsv_rec                     txsv_rec_type;
    lx_txsv_rec                     txsv_rec_type;

    -- Cursors
    -- Booking tax lines will be the only ACTIVE set of tax lines at the time K is being Reversed
        -- Contract can be reversed only if no other transactions have happened on the contract
        -- this cursor selects existing active upfront taxable lines for a contract that is being reversed
        CURSOR l_prevtaxsourcesbk_csr(cp_khr_id IN NUMBER) IS
        SELECT id, khr_id, kle_id, asset_number, trx_id, trx_line_id, entity_code,
               event_class_code, trx_level_type, tax_call_type_code, sty_id,
               trx_business_category, tax_line_status_code, sel_id, reported_yn,
               line_name, application_id, tax_reporting_flag, default_taxation_country,
               product_category, user_defined_fisc_class, line_intended_use,
               tax_classification_code, inventory_item_id, bill_to_cust_acct_id,
               org_id, legal_entity_id, line_amt, assessable_value, total_tax,
               product_type, product_fisc_classification, trx_date, provnl_tax_determination_date,
               try_id, ship_to_location_id, ship_to_party_site_id, ship_to_party_id,
               bill_to_party_site_id, bill_to_location_id, bill_to_party_id,
               ship_to_cust_acct_site_use_id, bill_to_cust_acct_site_use_id,
               trx_currency_code, currency_conversion_date, currency_conversion_rate,
               currency_conversion_type
        FROM   okl_tax_sources
        WHERE  khr_id = cp_khr_id
        AND    tax_call_type_code = G_UPFRONT_TAX
        AND    tax_line_status_code = G_ACTIVE_STATUS;

    CURSOR l_trxcontracts_csr(cp_trx_id IN NUMBER, cp_trx_type_name IN VARCHAR2) IS
        SELECT a.try_id, a.khr_id, a.legal_entity_id, a.date_transaction_occurred
        FROM   okl_trx_contracts a, okl_trx_types_tl b
        WHERE  a.id = cp_trx_id
        AND    a.try_id = b.id
        AND    b.name = cp_trx_type_name
    AND    language = 'US';

    TYPE prevtaxsources_tbl_type IS TABLE OF l_prevtaxsourcesbk_csr%ROWTYPE  INDEX BY BINARY_INTEGER;

    l_prevtaxsourcesbk_tbl          prevtaxsources_tbl_type;

    rev_trx_lines_tbl               zx_trx_lines_tbl_type;
    rev_trx_hdr_rec                 line_params_rec_type;

  BEGIN

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.process_contract_reversal_tax','Begin(+)');
    END IF;

    --Print Input Variables
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_contract_reversal_tax.',
              'p_init_msg_list :'||p_init_msg_list);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_contract_reversal_tax.',
              'p_source_trx_id :'||p_source_trx_id);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_contract_reversal_tax.',
              'p_source_trx_name :'||p_source_trx_name);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_contract_reversal_tax.',
              'p_source_table :'||p_source_table);
    END IF;

    x_return_status := OKL_API.G_RET_STS_SUCCESS;

    -- validate the source trx id
    OPEN  l_trxcontracts_csr(p_source_trx_id, p_source_trx_name);
    FETCH l_trxcontracts_csr INTO l_rev_trx_type_id, l_khr_id, l_legal_entity_id, l_trx_date;
    IF l_trxcontracts_csr%NOTFOUND THEN
       -- source trx id is invalid
       OKC_API.set_message( p_app_name      => 'OKC',
                            p_msg_name      => G_INVALID_VALUE,
                            p_token1        => G_COL_NAME_TOKEN,
                            p_token1_value  => 'SOURCE_TRX_ID');
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    CLOSE l_trxcontracts_csr;

    -- Logic starts
    i := 1;
        l_newtaxsourcesrev_tbl.DELETE;
        l_tax_src_tbl.DELETE;

    OPEN l_prevtaxsourcesbk_csr(cp_khr_id  => l_khr_id);
        LOOP
              l_prevtaxsourcesbk_tbl.delete;
              FETCH l_prevtaxsourcesbk_csr BULK COLLECT INTO l_prevtaxsourcesbk_tbl LIMIT l_fetch_size;
              IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_contract_reversal_tax.',
                                'l_prevtaxsourcesbk_tbl.COUNT '||l_prevtaxsourcesbk_tbl.COUNT );
          END IF;

          IF l_prevtaxsourcesbk_tbl.COUNT > 0 THEN
          -- Create new tax sources for 'Reverse' transaction
              -- Number of new tax sources transactions is same as the number of
          -- previous Booking tax sources. Pick the previous tax sources for
          -- 'Booking' and create them again as new tax sources for trx type
          -- 'Reverse'.  Contract can be reversed only  if no other transaction
          -- has happned on the contract, after Booking. Hence contract structure
          -- remains the same between contract booking and contract reversal.
          -- Hence we can safely Pick the previous tax sources for 'Booking' and
          -- create them again as new tax sources for trx type 'Reverse'.

            l_reverse := TRUE; -- Check if the tax is created for the contract

            FOR k IN l_prevtaxsourcesbk_tbl.FIRST..l_prevtaxsourcesbk_tbl.LAST LOOP
              IF i = 1 THEN
                l_org_id := l_prevtaxsourcesbk_tbl(k).org_id;
                l_trx_level_type := l_prevtaxsourcesbk_tbl(k).trx_level_type;
              END IF;

              -- Build new table for reversal
              l_newtaxsourcesrev_tbl(i).id                               := get_seq_id;
              l_newtaxsourcesrev_tbl(i).kle_id                           := l_prevtaxsourcesbk_tbl(k).kle_id;
              l_newtaxsourcesrev_tbl(i).khr_id                           := l_prevtaxsourcesbk_tbl(k).khr_id;
              l_newtaxsourcesrev_tbl(i).asset_number                     := l_prevtaxsourcesbk_tbl(k).asset_number;
              l_newtaxsourcesrev_tbl(i).trx_id                           := p_source_trx_id;
              l_newtaxsourcesrev_tbl(i).trx_line_id                      := l_newtaxsourcesrev_tbl(i).id;
              l_newtaxsourcesrev_tbl(i).entity_code                      := G_CONTRACTS_ENTITY_CODE;
              l_newtaxsourcesrev_tbl(i).event_class_code                 := G_REBOOK_EVENT_CLASS_CODE;
              l_newtaxsourcesrev_tbl(i).trx_level_type                   := l_prevtaxsourcesbk_tbl(k).trx_level_type;
              l_newtaxsourcesrev_tbl(i).adjusted_doc_entity_code         := l_prevtaxsourcesbk_tbl(k).entity_code;
              l_newtaxsourcesrev_tbl(i).adjusted_doc_event_class_code    := l_prevtaxsourcesbk_tbl(k).event_class_code;
              l_newtaxsourcesrev_tbl(i).adjusted_doc_trx_id              := l_prevtaxsourcesbk_tbl(k).trx_id;
              l_newtaxsourcesrev_tbl(i).adjusted_doc_trx_line_id         := l_prevtaxsourcesbk_tbl(k).trx_line_id;
              l_newtaxsourcesrev_tbl(i).adjusted_doc_trx_level_type      := l_prevtaxsourcesbk_tbl(k).trx_level_type;
              l_newtaxsourcesrev_tbl(i).adjusted_doc_number              := null;
              l_newtaxsourcesrev_tbl(i).adjusted_doc_date                := null;
              l_newtaxsourcesrev_tbl(i).tax_call_type_code               := G_UPFRONT_TAX;
              l_newtaxsourcesrev_tbl(i).sty_id                           := l_prevtaxsourcesbk_tbl(k).sty_id;
              l_newtaxsourcesrev_tbl(i).trx_business_category            := l_prevtaxsourcesbk_tbl(k).trx_business_category;
              l_newtaxsourcesrev_tbl(i).tax_line_status_code             := G_ACTIVE_STATUS;
              l_newtaxsourcesrev_tbl(i).sel_id                           := l_prevtaxsourcesbk_tbl(k).sel_id;
              l_newtaxsourcesrev_tbl(i).reported_yn                      := l_prevtaxsourcesbk_tbl(k).reported_yn;
                          l_newtaxsourcesrev_tbl(i).program_id                       := null;
                          l_newtaxsourcesrev_tbl(i).request_id                       := null;
                          l_newtaxsourcesrev_tbl(i).program_application_id           := null;
                          l_newtaxsourcesrev_tbl(i).program_update_date              := null;
                          l_newtaxsourcesrev_tbl(i).attribute_category               := null;

                      l_newtaxsourcesrev_tbl(i).attribute1                    := null;
                          l_newtaxsourcesrev_tbl(i).attribute2                    := null;
                          l_newtaxsourcesrev_tbl(i).attribute3                    := null;
                          l_newtaxsourcesrev_tbl(i).attribute4                    := null;
                          l_newtaxsourcesrev_tbl(i).attribute5                    := null;
                          l_newtaxsourcesrev_tbl(i).attribute6                    := null;
                          l_newtaxsourcesrev_tbl(i).attribute7                    := null;
                          l_newtaxsourcesrev_tbl(i).attribute8                    := null;
                          l_newtaxsourcesrev_tbl(i).attribute9                    := null;
                          l_newtaxsourcesrev_tbl(i).attribute10                   := null;
                          l_newtaxsourcesrev_tbl(i).attribute11                   := null;
                          l_newtaxsourcesrev_tbl(i).attribute12                   := null;
                          l_newtaxsourcesrev_tbl(i).attribute13                   := null;
                          l_newtaxsourcesrev_tbl(i).attribute14                   := null;
                          l_newtaxsourcesrev_tbl(i).attribute15                   := null;
                          l_newtaxsourcesrev_tbl(i).created_by                    := G_USER_ID;
                          l_newtaxsourcesrev_tbl(i).creation_date                 := SYSDATE;
                          l_newtaxsourcesrev_tbl(i).last_updated_by               := G_USER_ID;
                          l_newtaxsourcesrev_tbl(i).last_update_date              := SYSDATE;
                          l_newtaxsourcesrev_tbl(i).last_update_login             := G_LOGIN_ID;
                          l_newtaxsourcesrev_tbl(i).object_version_number         := null;

              l_newtaxsourcesrev_tbl(i).line_name                 := l_prevtaxsourcesbk_tbl(k).line_name;
              l_newtaxsourcesrev_tbl(i).application_id            := l_prevtaxsourcesbk_tbl(k).application_id;
              l_newtaxsourcesrev_tbl(i).tax_reporting_flag        := l_prevtaxsourcesbk_tbl(k).tax_reporting_flag;
              l_newtaxsourcesrev_tbl(i).default_taxation_country  := l_prevtaxsourcesbk_tbl(k).default_taxation_country;
              l_newtaxsourcesrev_tbl(i).product_category          := l_prevtaxsourcesbk_tbl(k).product_category;
              l_newtaxsourcesrev_tbl(i).user_defined_fisc_class   := l_prevtaxsourcesbk_tbl(k).user_defined_fisc_class;
              l_newtaxsourcesrev_tbl(i).line_intended_use         := l_prevtaxsourcesbk_tbl(k).line_intended_use;
              l_newtaxsourcesrev_tbl(i).tax_classification_code   := l_prevtaxsourcesbk_tbl(k).tax_classification_code;
              l_newtaxsourcesrev_tbl(i).inventory_item_id         := l_prevtaxsourcesbk_tbl(k).inventory_item_id;
              l_newtaxsourcesrev_tbl(i).bill_to_cust_acct_id      := l_prevtaxsourcesbk_tbl(k).bill_to_cust_acct_id;
              l_newtaxsourcesrev_tbl(i).org_id                    := l_prevtaxsourcesbk_tbl(k).org_id;
              l_newtaxsourcesrev_tbl(i).legal_entity_id           := l_prevtaxsourcesbk_tbl(k).legal_entity_id;
              l_newtaxsourcesrev_tbl(i).line_amt                  := -l_prevtaxsourcesbk_tbl(k).line_amt;
              l_newtaxsourcesrev_tbl(i).assessable_value          := -l_prevtaxsourcesbk_tbl(k).assessable_value;

              l_newtaxsourcesrev_tbl(i).total_tax                 := null;  -- this col will be populated after reverse doc API is called
              l_newtaxsourcesrev_tbl(i).trx_date                  := l_trx_date;
              l_newtaxsourcesrev_tbl(i).try_id                    := l_rev_trx_type_id;

              l_newtaxsourcesrev_tbl(i).product_type                    := l_prevtaxsourcesbk_tbl(k).product_type;
              l_newtaxsourcesrev_tbl(i).product_fisc_classification     := l_prevtaxsourcesbk_tbl(k).product_fisc_classification;
              l_newtaxsourcesrev_tbl(i).provnl_tax_determination_date   := null;
              l_newtaxsourcesrev_tbl(i).ship_to_location_id             := l_prevtaxsourcesbk_tbl(k).ship_to_location_id;
              l_newtaxsourcesrev_tbl(i).ship_to_party_site_id           := l_prevtaxsourcesbk_tbl(k).ship_to_party_site_id;
              l_newtaxsourcesrev_tbl(i).ship_to_party_id                := l_prevtaxsourcesbk_tbl(k).ship_to_party_id;
              l_newtaxsourcesrev_tbl(i).bill_to_party_site_id           := l_prevtaxsourcesbk_tbl(k).bill_to_party_site_id;
              l_newtaxsourcesrev_tbl(i).bill_to_location_id             := l_prevtaxsourcesbk_tbl(k).bill_to_location_id;
              l_newtaxsourcesrev_tbl(i).bill_to_party_id                := l_prevtaxsourcesbk_tbl(k).bill_to_party_id;
              l_newtaxsourcesrev_tbl(i).ship_to_cust_acct_site_use_id   := l_prevtaxsourcesbk_tbl(k).ship_to_cust_acct_site_use_id;
              l_newtaxsourcesrev_tbl(i).bill_to_cust_acct_site_use_id   := l_prevtaxsourcesbk_tbl(k).bill_to_cust_acct_site_use_id;
              l_newtaxsourcesrev_tbl(i).trx_currency_code               := l_prevtaxsourcesbk_tbl(k).trx_currency_code;
              l_newtaxsourcesrev_tbl(i).currency_conversion_type        := l_prevtaxsourcesbk_tbl(k).currency_conversion_type;
              l_newtaxsourcesrev_tbl(i).currency_conversion_rate        := l_prevtaxsourcesbk_tbl(k).currency_conversion_rate;
              l_newtaxsourcesrev_tbl(i).currency_conversion_date        := l_prevtaxsourcesbk_tbl(k).currency_conversion_date;

              -- Store the prev booking tax source IDs in a table. This table will be used inactivate the Booking sources
              l_tax_src_tbl(i) :=  l_prevtaxsourcesbk_tbl(k).id;

              -- Populate the ZX reverse transaction lines table for tax call
              rev_trx_lines_tbl(i).internal_organization_id := l_org_id;
              rev_trx_lines_tbl(i).reversing_appln_id := G_OKL_APPLICATION_ID;
              rev_trx_lines_tbl(i).reversing_entity_code := G_CONTRACTS_ENTITY_CODE;
              rev_trx_lines_tbl(i).reversing_evnt_cls_code := G_REBOOK_EVENT_CLASS_CODE;
              rev_trx_lines_tbl(i).reversing_trx_id := p_source_trx_id;
              rev_trx_lines_tbl(i).reversing_trx_level_type := l_trx_level_type;
              rev_trx_lines_tbl(i).reversing_trx_line_id := l_newtaxsourcesrev_tbl(i).id;

              rev_trx_lines_tbl(i).reversed_appln_id := G_OKL_APPLICATION_ID;
              rev_trx_lines_tbl(i).reversed_entity_code := G_CONTRACTS_ENTITY_CODE;
              rev_trx_lines_tbl(i).reversed_evnt_cls_code:= G_BOOKING_EVENT_CLASS_CODE;
              rev_trx_lines_tbl(i).reversed_trx_id := l_newtaxsourcesrev_tbl(i).adjusted_doc_trx_id;
              rev_trx_lines_tbl(i).reversed_trx_level_type := l_trx_level_type;
              rev_trx_lines_tbl(i).reversed_trx_line_id := l_newtaxsourcesrev_tbl(i).adjusted_doc_trx_line_id;

                  i := i + 1;
            END LOOP;
          END IF;
          EXIT WHEN l_prevtaxsourcesbk_csr%NOTFOUND;
    END LOOP;
    CLOSE l_prevtaxsourcesbk_csr;

    -- Inactivate the previous ACTIVE tax lines - begin
    -- Inactivate previous Booking tax sources
        -- No Change needed for previous booking tax lines in eBTax
    IF l_tax_src_tbl.COUNT > 0 THEN
      BEGIN
        FORALL i IN l_tax_src_tbl.FIRST..l_tax_src_tbl.LAST
          UPDATE okl_tax_sources SET tax_line_status_code = G_INACTIVE_STATUS WHERE id = l_tax_src_tbl(i);
      EXCEPTION
        WHEN OTHERS THEN
          IF SQL%BULK_EXCEPTIONS.COUNT > 0 THEN
                        FOR i IN 1..SQL%BULK_EXCEPTIONS.COUNT LOOP
                                                                OKL_API.set_message(
                                                                     p_app_name      => 'OKL',
                                     p_msg_name      => 'OKL_TX_TRX_UPD_ERR',
                                     p_token1        => 'TABLE_NAME',
                                     p_token1_value  => 'OKL_TAX_SOURCES',
                                     p_token2        => 'ERROR_CODE',
                                                                         p_token2_value  => SQLERRM(-SQL%BULK_EXCEPTIONS(i).ERROR_CODE),
                                                                         p_token3        => 'ITERATION',
                                                                         p_token3_value  => SQL%BULK_EXCEPTIONS(i).ERROR_INDEX);
                        END LOOP;
                        RAISE OKL_API.G_EXCEPTION_ERROR;
                  END IF;
      END;
    END IF;

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_contract_reversal_tax.',
                        'Inactivated the previous active upfront tax lines ' );
    END IF;
    -- Inactivate the previous ACTIVE tax lines - end

    -- bulk insert into okl_tax_sources -- start
    BEGIN
      IF l_newtaxsourcesrev_tbl.COUNT > 0 THEN
        FORALL indx in l_newtaxsourcesrev_tbl.FIRST..l_newtaxsourcesrev_tbl.LAST
          -- SAVE EXCEPTIONS
          INSERT INTO okl_tax_sources VALUES l_newtaxsourcesrev_tbl(indx);
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        IF SQL%BULK_EXCEPTIONS.COUNT > 0 THEN
                  FOR i IN 1..SQL%BULK_EXCEPTIONS.COUNT LOOP
                        OKL_API.set_message(p_app_name      => 'OKL',
                                p_msg_name      => 'OKL_TX_TRX_INS_ERR',
                                p_token1        => 'TABLE_NAME',
                                p_token1_value  => 'OKL_TAX_SOURCES',
                                p_token2        => 'ERROR_CODE',
                                p_token2_value  => SQLERRM(-SQL%BULK_EXCEPTIONS(i).ERROR_CODE),
                                                                p_token3        => 'ITERATION',
                                                                p_token3_value  => SQL%BULK_EXCEPTIONS(i).ERROR_INDEX);
          END LOOP;
                  RAISE OKL_API.G_EXCEPTION_ERROR;
                END IF;
    END;
    -- bulk insert into okl_tax_sources -- end

    -- At this point, the latest active upfront tax sources are the ones
        -- corresponding to 'Reverse' transaction. If user queries the booking tax
        -- (contract booking page) at this point, UI will display the tax corresponding
        -- to 'Reverse' trx type. At any point, there can be only 1 set of active
    -- upfront tax lines for a contract. Hence the old Booking tax sources are
    -- inactivated and new tax sources are created for 'Reverse' trx type.
    -- No changes are needed to the tax lines that exist in eBTax for the 'Booking'
    -- event

        -- Populate ZX reverse transaction tables
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_contract_reversal_tax.',
              'Calling OKL_TAX_INTERFACE_PVT.reverse_document');
    END IF;

    IF (l_reverse) THEN  -- Process Reversal only if the tax is created for the contract

      rev_trx_hdr_rec.internal_organization_id := l_org_id;
      rev_trx_hdr_rec.application_id           := G_OKL_APPLICATION_ID;
      rev_trx_hdr_rec.trx_id                   := p_source_trx_id;
      rev_trx_hdr_rec.legal_entity_id          := l_legal_entity_id;
      rev_trx_hdr_rec.entity_code              := G_CONTRACTS_ENTITY_CODE;
      rev_trx_hdr_rec.event_class_code         := G_REBOOK_EVENT_CLASS_CODE;

      OKL_TAX_INTERFACE_PVT.reverse_document (
                              p_api_version       => p_api_version,
                              p_init_msg_list     => p_init_msg_list,
                              x_return_status     => l_return_status,
                              x_msg_count         => x_msg_count,
                              x_msg_data          => x_msg_data,
                              p_rev_trx_hdr_rec   => rev_trx_hdr_rec,
                              p_rev_trx_lines_tbl => rev_trx_lines_tbl);

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_contract_reversal_tax.',
              'Return Status' || l_return_status);
      END IF;

      IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

      -- Get the total tax amount corresponding to 'Reverse' transaction from
      -- zx_lines and update total_tax on okl_tax_sources
      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_contract_reversal_tax.',
          'Calling "update_tax_sources_total" for updating Total Tax for all Lines in Tax Sources');
      END IF;

      update_tax_sources_total(p_api_version    => p_api_version,
                               p_init_msg_list  => p_init_msg_list,
                               x_return_status  => l_return_status,
                               x_msg_count      => x_msg_count,
                               x_msg_data       => x_msg_data,
                               p_source_trx_id  => p_source_trx_id);

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_contract_reversal_tax.',
          'Return Status' || l_return_status);
      END IF;

      IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

    END IF;

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
       FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.process_contract_reversal_tax ','End(-)');
    END IF;

  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN
         IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.process_contract_reversal_tax ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
         END IF;

         IF l_prevtaxsourcesbk_csr%ISOPEN THEN
            CLOSE l_prevtaxsourcesbk_csr;
         END IF;

         IF l_trxcontracts_csr%ISOPEN THEN
            CLOSE l_trxcontracts_csr;
         END IF;

         x_return_status := OKL_API.G_RET_STS_ERROR;
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
         IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.process_contract_reversal_tax ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_UNEXPECTED_ERROR');
         END IF;

         IF l_prevtaxsourcesbk_csr%ISOPEN THEN
            CLOSE l_prevtaxsourcesbk_csr;
         END IF;

         IF l_trxcontracts_csr%ISOPEN THEN
            CLOSE l_trxcontracts_csr;
         END IF;

         x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;

    WHEN OTHERS THEN
         IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
            FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.process_contract_reversal_tax ',
                  'EXCEPTION :'||sqlerrm);
         END IF;

         IF l_prevtaxsourcesbk_csr%ISOPEN THEN
            CLOSE l_prevtaxsourcesbk_csr;
         END IF;

         IF l_trxcontracts_csr%ISOPEN THEN
            CLOSE l_trxcontracts_csr;
         END IF;

         x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
         -- unexpected error
         OKL_API.set_message(p_app_name      => g_app_name,
                         p_msg_name      => g_unexpected_error,
                         p_token1        => g_sqlcode_token,
                         p_token1_value  => sqlcode,
                         p_token2        => g_sqlerrm_token,
                         p_token2_value  => sqlerrm);

  END process_contract_reversal_tax;

/*========================================================================
 | PUBLIC PROCEDURE get_location_party_ids
 |
 | DESCRIPTION
 |    This procedure derives the Location and Party Identifiers from the
 |    customer account and financial asset
 |
 | CALLED FROM
 |    Other procedures in this API
 |
 | CALLS PROCEDURES/FUNCTIONS
 |
 |
 | PARAMETERS
 |  Input Parameters
 |      p_cust_acct_id                          -- Customer a/c identifier
 |      p_fin_asset_id                          -- Financial Asset identifier
 |      p_khr_id                    -- Contract identifier
 |
 |      Either p_khr_id or p_fin_asset_id is mandatory
 |
 |  Output Parameters
 |   x_ship_to_site_use_id              -- Ship to site use identifier
 |   x_bill_to_party_site_id        -- Bill to party site identifier
 |   x_bill_to_location_id          -- Bill to location identifier
 |   x_bill_to_party_id             -- Bill to party identifier
 |   x_ship_to_party_site_id        -- Ship to party site identifier
 |   x_ship_to_location_id          -- Ship to location identifier
 |   x_ship_to_party_id             -- Ship to party identifier
 |
 | KNOWN ISSUES
 |
 | NOTES
 |
 |
 | MODIFICATION HISTORY
 | Date                  Author            Description of Changes
 | 08-APR-05            SECHAWLA           Created
 | 22-Feb-07            RRAVIKIR           Retrieve the following values as out
 |                                         params - x_bill_to_party_site_id
 |                                                  x_bill_to_location_id
 |                                                  x_bill_to_party_id
 |                                                  x_ship_to_party_site_id
 |                                                  x_ship_to_location_id
 |                                                  x_ship_to_party_id
 | 06-nov-2007          sechawla           6602476  Modified l_get_ship_to_ids to
 |                                                  pick the first supplier invoice incase of multiple invoices
 |                                                  Modified the inner query of l_get_ship_to_ids
 *=======================================================================*/
  PROCEDURE get_location_party_ids(
        p_api_version                   IN  NUMBER,
    p_init_msg_list                     IN  VARCHAR2 DEFAULT OKL_API.G_FALSE,
    x_return_status                     OUT NOCOPY VARCHAR2,
    x_msg_count                         OUT NOCOPY NUMBER,
    x_msg_data                          OUT NOCOPY VARCHAR2,
    p_cust_acct_id                  IN  NUMBER,
    p_fin_asset_id                  IN  NUMBER,
    p_khr_id                        IN  NUMBER,
    x_bill_to_party_site_id         OUT NOCOPY NUMBER,
    x_bill_to_location_id           OUT NOCOPY NUMBER,
    x_bill_to_party_id              OUT NOCOPY NUMBER,
    x_bill_to_site_use_id                       OUT NOCOPY NUMBER,
    x_ship_to_party_site_id         OUT NOCOPY NUMBER,
    x_ship_to_location_id           OUT NOCOPY NUMBER,
    x_ship_to_party_id              OUT NOCOPY NUMBER,
    x_ship_to_site_use_id                       OUT NOCOPY NUMBER) IS

    l_return_status              VARCHAR2(1) := OKL_API.G_RET_STS_SUCCESS;

    --Cursor to get the 'SHIP_TO' identifiers corresponding to the install_location_id of the asset
    CURSOR l_get_ship_to_ids(cp_site_use_id IN NUMBER) IS -- asaanka changed for bug # 6612165
    SELECT
           b.site_use_id,
           c.party_site_id,
           c.party_id,
           c.location_id
    FROM   hz_cust_acct_sites_all a,
           hz_cust_site_uses_all  b,
           hz_party_sites      c
    WHERE
           a.cust_acct_site_id = b.cust_acct_site_id
    AND    b.site_use_code     = 'SHIP_TO'
    AND    b.site_use_id       =  cp_site_use_id -- asaanka changed for bug # 6612165
    AND    a.party_site_id     = c.party_site_id
    AND    a.cust_account_id   = p_cust_acct_id;

    -- Cursor to get the 'BILL_TO' identifiers of the asset
    CURSOR l_get_line_bill_to_ids IS
    SELECT
           c.party_site_id,
           c.party_id,
           c.location_id,
           b.site_use_id
    FROM   hz_cust_acct_sites_all a,
           hz_cust_site_uses_all  b,
           hz_party_sites      c
    WHERE
           a.cust_acct_site_id = b.cust_acct_site_id
    AND    b.site_use_code     = 'BILL_TO'
    AND    b.site_use_id       = (SELECT DECODE(okcl.bill_to_site_use_id, null, okch.bill_to_site_use_id, okcl.bill_to_site_use_id)
                                  FROM okc_k_headers_all_b okch, okc_k_lines_v okcl
                                  WHERE okcl.dnz_chr_id = okch.id
                                  AND okcl.id = p_fin_asset_id)
    AND    a.party_site_id     = c.party_site_id
    AND    a.cust_account_id   = p_cust_acct_id;

    -- Cursor to get the 'BILL_TO' identifiers of the contract
    CURSOR l_get_chr_bill_to_ids IS
    SELECT
           c.party_site_id,
           c.party_id,
           c.location_id,
           b.site_use_id
    FROM   hz_cust_acct_sites_all a,
           hz_cust_site_uses_all  b,
           hz_party_sites      c
    WHERE
           a.cust_acct_site_id = b.cust_acct_site_id
    AND    b.site_use_code     = 'BILL_TO'
    AND    b.site_use_id       = (SELECT bill_to_site_use_id
                                  FROM okc_k_headers_all_b
                                  WHERE id = p_khr_id)
    AND    a.party_site_id     = c.party_site_id
    AND    a.cust_account_id   = p_cust_acct_id;

    l_bill_to_party_site_id        NUMBER;
    l_bill_to_location_id          NUMBER;
    l_bill_to_party_id             NUMBER;
    l_bill_to_site_use_id                  NUMBER;
    l_ship_to_party_site_id        NUMBER;
    l_ship_to_location_id          NUMBER;
    l_ship_to_party_id             NUMBER;
    l_ship_to_site_use_id                  NUMBER;

  BEGIN

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.get_location_party_ids','Begin(+)');
    END IF;

    --Print Input Variables
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_location_party_ids.',
              'p_init_msg_list :'||p_init_msg_list);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_location_party_ids.',
              'p_cust_acct_id :'||p_cust_acct_id);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_location_party_ids.',
              'p_fin_asset_id :'||p_fin_asset_id);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_location_party_ids.',
              'p_khr_id :'||p_khr_id);
    END IF;

    -- Required Values
    IF p_fin_asset_id IS NULL AND p_khr_id IS NULL THEN
       OKL_API.set_message( p_msg_name      => G_REQUIRED_VALUE,
                            p_token1        => G_COL_NAME_TOKEN,
                            p_token1_value  => 'CONTRACT_ID');
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    IF (p_fin_asset_id IS NOT NULL) THEN
          get_ship_to_site_use_id(
              p_api_version                  => p_api_version,
              p_init_msg_list                => OKC_API.G_FALSE,
              x_return_status                => x_return_status,
              x_msg_count                    => x_msg_count,
              x_msg_data                     => x_msg_data,
              p_cust_acct_id                 => p_cust_acct_id,
              p_fin_asset_id                 => p_fin_asset_id,
              x_ship_to_site_use_id          => l_ship_to_site_use_id);

               IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN  -- will never be setting this to unexpecetd inside get_tbc ?
                    RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
               ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
                    RAISE OKL_API.G_EXCEPTION_ERROR;
               END IF;
        -- Get the 'SHIP_TO' indetifiers of the asset
          IF l_ship_to_site_use_id IS NOT NULL THEN
              OPEN  l_get_ship_to_ids(l_ship_to_site_use_id);
              FETCH l_get_ship_to_ids INTO l_ship_to_site_use_id, l_ship_to_party_site_id,
                                           l_ship_to_party_id, l_ship_to_location_id;  -- these values may be null
              CLOSE l_get_ship_to_ids;
          END IF;
    END IF;

    -- Get the 'BILL_TO' indetifiers of the contract
    IF (p_fin_asset_id IS NULL) THEN
      OPEN  l_get_chr_bill_to_ids;
      FETCH l_get_chr_bill_to_ids INTO l_bill_to_party_site_id, l_bill_to_party_id,
                                       l_bill_to_location_id, l_bill_to_site_use_id;
      CLOSE l_get_chr_bill_to_ids;
    ELSE    -- Get the 'BILL_TO' indetifiers of the asset
      OPEN  l_get_line_bill_to_ids;
      FETCH l_get_line_bill_to_ids INTO l_bill_to_party_site_id, l_bill_to_party_id,
                                        l_bill_to_location_id, l_bill_to_site_use_id;
      CLOSE l_get_line_bill_to_ids;
    END IF;

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_location_party_ids.',
              'l_ship_to_party_site_id '||l_ship_to_party_site_id);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_location_party_ids.',
              'l_ship_to_location_id '||l_ship_to_location_id);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_location_party_ids.',
              'l_ship_to_party_id '||l_ship_to_party_id);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_location_party_ids.',
              'l_ship_to_site_use_id '||l_ship_to_site_use_id);

          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_location_party_ids.',
              'l_bill_to_party_site_id '||l_bill_to_party_site_id);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_location_party_ids.',
              'l_bill_to_location_id '||l_bill_to_location_id);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_location_party_ids.',
              'l_bill_to_party_id '||l_bill_to_party_id);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_location_party_ids.',
              'l_bill_to_site_use_id '||l_bill_to_site_use_id);
    END IF;

    x_ship_to_site_use_id          := l_ship_to_site_use_id;
    x_ship_to_party_site_id        := l_ship_to_party_site_id;
    x_ship_to_location_id          := l_ship_to_location_id;
    x_ship_to_party_id             := l_ship_to_party_id;
    x_bill_to_party_site_id        := l_bill_to_party_site_id;
    x_bill_to_location_id          := l_bill_to_location_id;
    x_bill_to_party_id             := l_bill_to_party_id;
    x_bill_to_site_use_id          := l_bill_to_site_use_id;

    x_return_status                :=  OKL_API.G_RET_STS_SUCCESS;

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
       FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.get_location_party_ids ','End(-)');
    END IF;

  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN
         IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.get_location_party_ids ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
         END IF;

             IF l_get_ship_to_ids%ISOPEN THEN
                CLOSE l_get_ship_to_ids;
             END IF;

             IF l_get_line_bill_to_ids%ISOPEN THEN
                CLOSE l_get_line_bill_to_ids;
             END IF;

             IF l_get_chr_bill_to_ids%ISOPEN THEN
                CLOSE l_get_chr_bill_to_ids;
             END IF;

         x_return_status := OKL_API.G_RET_STS_ERROR;
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
         IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.get_location_party_ids ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_UNEXPECTED_ERROR');
         END IF;

             IF l_get_ship_to_ids%ISOPEN THEN
                CLOSE l_get_ship_to_ids;
             END IF;

             IF l_get_line_bill_to_ids%ISOPEN THEN
                CLOSE l_get_line_bill_to_ids;
             END IF;

             IF l_get_chr_bill_to_ids%ISOPEN THEN
                CLOSE l_get_chr_bill_to_ids;
             END IF;

         x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;

    WHEN OTHERS THEN
         IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
            FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.get_location_party_ids ',
                  'EXCEPTION :'||sqlerrm);
         END IF;

             IF l_get_ship_to_ids%ISOPEN THEN
                CLOSE l_get_ship_to_ids;
             END IF;

             IF l_get_line_bill_to_ids%ISOPEN THEN
                CLOSE l_get_line_bill_to_ids;
             END IF;

             IF l_get_chr_bill_to_ids%ISOPEN THEN
                CLOSE l_get_chr_bill_to_ids;
             END IF;

         x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
         -- unexpected error
         OKL_API.set_message(p_app_name      => g_app_name,
                         p_msg_name      => g_unexpected_error,
                         p_token1        => g_sqlcode_token,
                         p_token1_value  => sqlcode,
                         p_token2        => g_sqlerrm_token,
                         p_token2_value  => sqlerrm);

  END get_location_party_ids;

/*========================================================================
 | PRIVATE PROCEDURE get_tbc_code
 |
 | DESCRIPTION
 |    This retrieves TBC (Transaction Business Category) for tax call, based upon
 |    the contract and line level tax determinats
 |
 | CALLED FROM
 |
 |
 | CALLS PROCEDURES/FUNCTIONS
 |
 |
 | PARAMETERS
 |   Input Parameters
 |      p_sty_id                                   -- Stream Type ID
 |      p_try_id                                   -- Transaction Type ID
 |      p_book_class_code              -- Book class code
 |      p_tax_country_code             -- Tax country code
 |  Output Parameters
 |      x_tbc_code                                 -- TBC Code
 |
 | KNOWN ISSUES
 |
 | NOTES
 |
 |
 | MODIFICATION HISTORY
 | Date                  Author    Description of Changes
 | 17-APR-07            RRAVIKIR   Created
 |
 *=======================================================================*/
  PROCEDURE get_tbc_code(
    p_api_version            IN  NUMBER,
    p_init_msg_list          IN  VARCHAR2 DEFAULT OKC_API.G_FALSE,
    x_return_status          OUT NOCOPY VARCHAR2,
    x_msg_count              OUT NOCOPY NUMBER,
    x_msg_data               OUT NOCOPY VARCHAR2,
    p_try_id                             IN  NUMBER,
    p_sty_id                 IN  NUMBER,
    p_book_class_code        IN VARCHAR2,
    p_tax_country_code       IN VARCHAR2,
    x_tbc_code               OUT NOCOPY VARCHAR2) IS

    -- Get all the TBC definitions applicable to a transaction type
    CURSOR  l_tbcdef_csr(cp_try_id IN NUMBER) IS
    SELECT      result_code tbc_code,
            try_id,
            sty_id ,
            book_class_code,
            tax_country_code,
                        'Y' select_yn      -- All TBCs returned by this cursor are selected initially
    FROM    okl_tax_attr_definitions
    WHERE   (try_id = cp_try_id OR try_id IS NULL)
    AND     RESULT_TYPE_CODE = 'TBC_CODE'
    AND     NVL(expire_flag, 'N') = 'N';

    TYPE tbcdefs_tbl_type IS TABLE OF l_tbcdef_csr%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE tbcdefs_selected_tbl_type IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
    TYPE det_null_tbl_type IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;

    l_tbcdefs_tbl                       tbcdefs_tbl_type;
    l_det_null_tbl                      det_null_tbl_type;
    l_tbcdefs_selected_tbl      tbcdefs_selected_tbl_type;

    i                                           NUMBER;
    j                                           NUMBER;
    k                                           NUMBER;
    tbc_set_count                       NUMBER;
    l_tbc_code                          VARCHAR2(30);
    selected_count                      NUMBER;
    det_match_cnt                       NUMBER;
    l_selected_tbc_pos          NUMBER;

  BEGIN

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.get_tbc_code','Begin(+)');
    END IF;

    --Print Input Variables
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tbc_code.',
           'p_init_msg_list :'||p_init_msg_list);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tbc_code.',
           'p_sty_id :'||p_sty_id);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tbc_code.',
           'p_try_id :'||p_try_id);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tbc_code.',
           'p_book_class_code :'||p_book_class_code);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tbc_code.',
           'p_tax_country_code :'||p_tax_country_code);
    END IF;


    OPEN  l_tbcdef_csr(p_try_id);
    FETCH l_tbcdef_csr BULK COLLECT INTO l_tbcdefs_tbl;
    CLOSE l_tbcdef_csr;

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tbc_code.',
      'l_tbcdefs_tbl.COUNT '||l_tbcdefs_tbl.COUNT);
    END IF;

    IF l_tbcdefs_tbl.COUNT > 0 THEN                -- MAIN END IF
      k := 1;
      FOR i IN 1 .. 3 LOOP -- determinant loop
        tbc_set_count := 0;

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tbc_code.', 'i '||i);
        END IF;

        FOR j IN  l_tbcdefs_tbl.FIRST .. l_tbcdefs_tbl.LAST LOOP
              IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tbc_code.',
                   'j '||j||' l_tbcdefs_tbl(j).select_yn '||l_tbcdefs_tbl(j).select_yn );
              END IF;

                  IF l_tbcdefs_tbl(j).select_yn = 'Y' THEN
            IF i = 1 THEN   -- stream type
                          IF p_sty_id IS NULL THEN
                                IF l_tbcdefs_tbl(j).sty_id IS NULL THEN
                                   tbc_set_count := tbc_set_count + 1;
                                ELSE
                                   l_tbcdefs_tbl(j).select_yn := 'N';
                                END IF;
                          ELSE
                                IF l_tbcdefs_tbl(j).sty_id IS NULL OR l_tbcdefs_tbl(j).sty_id = p_sty_id THEN
                                  tbc_set_count := tbc_set_count + 1;
                                ELSE
                                  l_tbcdefs_tbl(j).select_yn := 'N';
                                END IF;
                          END IF
     ;
                    ELSIF i = 2 THEN -- book class code
                      IF p_book_class_code IS NULL THEN
                            IF l_tbcdefs_tbl(j).book_class_code IS NULL THEN
                                  tbc_set_count := tbc_set_count + 1;
                                ELSE
                                  l_tbcdefs_tbl(j).select_yn := 'N';
                                END IF;
                          ELSE
                                IF l_tbcdefs_tbl(j).book_class_code IS NULL OR l_tbcdefs_tbl(j).book_class_code = p_book_class_code THEN
                                  tbc_set_count := tbc_set_count + 1;
                                ELSE
                                  l_tbcdefs_tbl(j).select_yn := 'N';
                                END IF;
                          END IF;

                    ELSIF i = 3 THEN -- tax country (last determinant)
                      IF p_tax_country_code IS NULL THEN
                            IF l_tbcdefs_tbl(j).tax_country_code IS NULL THEN
                                  tbc_set_count := tbc_set_count + 1;
                  l_tbcdefs_selected_tbl(k) := j;
                                ELSE
                                  l_tbcdefs_tbl(j).select_yn := 'N';
                                END IF;
                          ELSE
                                IF l_tbcdefs_tbl(j).tax_country_code IS NULL OR l_tbcdefs_tbl(j).tax_country_code = p_tax_country_code THEN
                                  tbc_set_count := tbc_set_count + 1;
                  l_tbcdefs_selected_tbl(k) := j;
                                ELSE
                                  l_tbcdefs_tbl(j).select_yn := 'N';
                                END IF;
                          END IF;

              k := k + 1;
                        END IF;

                        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tbc_code.',
                         'tbc_set_count '||tbc_set_count);
                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tbc_code.',
                         'l_tbcdefs_tbl(j).select_yn '||l_tbcdefs_tbl(j).select_yn);
                END IF;
              END IF;
        END LOOP;

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
               FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tbc_code.',
                  'tbc_set_count '||tbc_set_count);
        END IF;

        IF tbc_set_count = 0 THEN
              EXIT;
        END IF;
      END LOOP;  -- determinant loop

      -- At this point l_tbcdefs_tbl has been scanned for all the determinants.
      -- select_yn flag in this table is set to 'Y' for TBCs that have either Null
      -- determinant value or value matching with the transaction. Table l_tbcdefs_selected_tbl
          -- holds those indexes of original table l_tbcdefs_tbl, that have seleted TBCs.
          -- At this point this table may contain more than 1 TBCs. If so, we need to further filter
          -- out TBCs from this table based upon the priority of the determinants.
          -- Following priority order is used :
      -- 1.  Transaction Type
      -- 2.  Stream Type
      -- 3.  Book Class
      -- 4.  Tax Country

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
            FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tbc_code.',
                  'tbc_set_count outside first loop'||tbc_set_count);
      END IF;

      IF tbc_set_count = 1 THEN
        l_tbc_code := l_tbcdefs_tbl(l_tbcdefs_selected_tbl(1)).tbc_code;
      ELSIF tbc_set_count > 1 THEN
            -- There can be more than one selected TBCs at this point
            -- apply determinant priority logic to select 1 TBC
            selected_count := tbc_set_count;

            IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tbc_code.',
                     'l_tbcdefs_selected_tbl.count '||l_tbcdefs_selected_tbl.count );
            END IF;

            FOR i IN 1 .. 4 LOOP  -- determinant loop

                  IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tbc_code.',
                      'i '||i||' selected_count '||selected_count );
              END IF;

                  j := 1;
                  det_match_cnt := 0;
                  l_det_null_tbl.DELETE;

                  IF selected_count > 1 THEN
                    FOR k IN l_tbcdefs_selected_tbl.FIRST .. l_tbcdefs_selected_tbl.LAST LOOP  -- finally selected indexes
                          -- At this point all the selecetd TBCs will either have Null determinant
              -- value or determinant value matching with the calling transaction
                      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                            FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tbc_code.',   'k '||k);
                          END IF;

                          IF i = 1 THEN -- transaction type
                            IF l_tbcdefs_tbl(l_tbcdefs_selected_tbl(k)).try_id IS NULL THEN
                                  l_det_null_tbl(j) := l_tbcdefs_selected_tbl(k);
                                  j := j + 1;
                            ELSE
                                  det_match_cnt := det_match_cnt + 1;
                                  l_selected_tbc_pos := l_tbcdefs_selected_tbl(k);
                                  -- l_selected_tbc_pos will be used as the index of the selected TBC,
                                  -- when only one TBC is left
                            END IF;

                            IF k = tbc_set_count THEN  -- last record
                                  IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                                    FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tbc_code.',
                                                'det_match_cnt '||det_match_cnt||' l_det_null_tbl.count '||l_det_null_tbl.count);
                                  END IF;

                                  IF det_match_cnt = selected_count THEN --k THEN
                                    NULL; -- all records have matching values, do nothing
                                  ELSIF det_match_cnt = 0  THEN -- ALL records have NULL try_id
                                    NULL; -- keep all records selected. Don't exclude yet.
                                  ELSIF det_match_cnt = 1 THEN
                                    selected_count := 1;
                                  ELSE -- more than one but less than total selected  records have matching values
                                    FOR p IN l_det_null_tbl.FIRST .. l_det_null_tbl.LAST LOOP
                                          l_tbcdefs_tbl(l_det_null_tbl(p)).select_yn := 'N';
                                          selected_count := selected_count - 1;
                                    END LOOP;
                                  END IF;
                            END IF;

                          ELSIF i = 2 THEN -- stream type
                            IF p_sty_id IS NOT NULL THEN
                  -- IF p_sty_id is null then l_tbcdefs_tbl will have more than 1 TBCs with
                                  -- only NULL values for sty_id. So no need to filter further, move on to next determinant
                                  -- When system is processing a determinant, there will always be more than one selected TBCS
                                  -- This is because, at the end of processing each determinant, we check the selected count
                                  -- If selected count = 1 then we do not process next determinant and exit
                                  IF l_tbcdefs_tbl(l_tbcdefs_selected_tbl(k)).select_yn = 'Y' THEN -- if still selected
                                    IF l_tbcdefs_tbl(l_tbcdefs_selected_tbl(k)).sty_id IS NULL THEN
                                      l_det_null_tbl(j) := l_tbcdefs_selected_tbl(k);
                                          j := j + 1;
                                    ELSE
                                          det_match_cnt := det_match_cnt + 1;
                                          l_selected_tbc_pos := l_tbcdefs_selected_tbl(k);
                                          -- l_selected_tbc_pos will be used as the index of the selected TBC,
                                          -- when only one TBC is left
                                    END IF;
                                  END IF;

                                  IF k = tbc_set_count THEN  -- last record
                                    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                                          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tbc_code.',
                                                  'det_match_cnt '||det_match_cnt||' l_det_null_tbl.count '||l_det_null_tbl.count);
                                    END IF;

                                    IF det_match_cnt = selected_count THEN --k THEN
                                          NULL; -- all records have matching values, do nothing
                                    ELSIF det_match_cnt = 0  THEN -- ALL records have NULL try_id
                                          NULL; -- keep all records selected. Don't exclude yet.
                                    ELSIF det_match_cnt = 1 THEN
                                          selected_count := 1;
                                    ELSE -- more than one but less than total selected  records have matching values
                                          FOR p IN l_det_null_tbl.FIRST .. l_det_null_tbl.LAST LOOP
                                            l_tbcdefs_tbl(l_det_null_tbl(p)).select_yn := 'N';
                                            selected_count := selected_count - 1;
                                          END LOOP;
                                END IF;
                                  END IF;
                            END IF;

                          ELSIF i = 3 THEN -- book class
                            IF p_book_class_code IS NOT NULL THEN
                                  -- IF p_book_class_code is null then l_tbcdefs_tbl will have more than 1 TBCs with
                                  -- only NULL values for book_class_code. So no need to filter further, move on to next determinant
                                  -- When system is processing a determinant, there will always be more than one selected TBCS
                                  -- This is because, at the end of processing each determinant, we check the selected count
                                  -- If selected count = 1 then we do not process next determinant and exit
                                  IF l_tbcdefs_tbl(l_tbcdefs_selected_tbl(k)).select_yn = 'Y' THEN -- if still selected
                                    IF l_tbcdefs_tbl(l_tbcdefs_selected_tbl(k)).book_class_code IS NULL THEN
                                      l_det_null_tbl(j) := l_tbcdefs_selected_tbl(k);
                                          j := j + 1;
                                    ELSE
                                      det_match_cnt := det_match_cnt + 1;
                                          l_selected_tbc_pos := l_tbcdefs_selected_tbl(k);
                                          -- l_selected_tbc_pos will be used as the index of the selected TBC,
                                          -- when only one TBC is left
                                    END IF;
                                  END IF;

                                  IF k = tbc_set_count THEN  -- last record
                                    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                                          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tbc_code.',
                                                  'det_match_cnt '||det_match_cnt||' l_det_null_tbl.count '||l_det_null_tbl.count);
                                    END IF;

                                    IF det_match_cnt = selected_count THEN --k THEN
                                          NULL; -- all records have matching values, do nothing
                                ELSIF det_match_cnt = 0  THEN -- ALL records have NULL try_id
                                          NULL; -- keep all records selected. Don't exclude yet.
                                    ELSIF det_match_cnt = 1 THEN
                                          selected_count := 1;
                                    ELSE -- more than one but less than total selected  records have matching values
                                          FOR p IN l_det_null_tbl.FIRST .. l_det_null_tbl.LAST LOOP
                                            l_tbcdefs_tbl(l_det_null_tbl(p)).select_yn := 'N';
                                            selected_count := selected_count - 1;
                                          END LOOP;
                                    END IF;
                                  END IF;
                            END IF;

                          ELSIF i = 4 THEN -- tax country
                            IF p_tax_country_code IS NOT NULL THEN
                                  -- IF p_tax_country_code is null then l_tbcdefs_tbl will have more than 1 TBCs with
                                  -- only NULL values for tax_country_code. So no need to filter further, move on to next determinant
                                  -- When system is processing a determinant, there will always be more than one selected TBCS
                                  -- This is because, at the end of processing each determinant, we check the selected count
                                  -- If selected count = 1 then we do not process next determinant and exit
                                  IF l_tbcdefs_tbl(l_tbcdefs_selected_tbl(k)).select_yn = 'Y' THEN -- if still selected
                                    IF l_tbcdefs_tbl(l_tbcdefs_selected_tbl(k)).tax_country_code IS NULL THEN
                                      l_det_null_tbl(j) := l_tbcdefs_selected_tbl(k);
                                          j := j + 1;
                                    ELSE
                                      det_match_cnt := det_match_cnt + 1;
                                          l_selected_tbc_pos := l_tbcdefs_selected_tbl(k);
                                          -- l_selected_tbc_pos will be used as the index of the selected TBC,
                                          -- when only one TBC is left
                                    END IF;
                                  END IF;

                                  IF k = tbc_set_count THEN  -- last record
                                    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                                          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tbc_code.',
                                                  'det_match_cnt '||det_match_cnt||' l_det_null_tbl.count '||l_det_null_tbl.count);
                                    END IF;

                                    IF det_match_cnt = selected_count THEN --k THEN
                                          NULL; -- all records have matching values, do nothing
                                    ELSIF det_match_cnt = 0  THEN -- ALL records have NULL try_id
                                          NULL; -- keep all records selected. Don't exclude yet.
                                    ELSIF det_match_cnt = 1 THEN
                                          selected_count := 1;
                                    ELSE -- more than one but less than total selected  records have matching values
                                          FOR p IN l_det_null_tbl.FIRST .. l_det_null_tbl.LAST LOOP
                                            l_tbcdefs_tbl(l_det_null_tbl(p)).select_yn := 'N';
                                            selected_count := selected_count - 1;
                                          END LOOP;
                                    END IF;
                                  END IF;
                            END IF;
                          END IF;
                    END LOOP;
                  ELSIF selected_count = 1 THEN
                    EXIT;
                  END IF;
            END LOOP; -- determinant loop

            IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tbc_code.',
                                'selected_count outside 2nd loop '||selected_count);
            END IF;

        IF selected_count = 1 THEN
                  l_tbc_code := l_tbcdefs_tbl(l_selected_tbc_pos).tbc_code;
            ELSIF selected_count > 1 THEN  -- still more than one TBCs are selected
                  l_tbc_code := NULL;
            END IF;

      ELSIF tbc_set_count = 0 THEN
            l_tbc_code := NULL;
      END IF;

    END IF;  -- MAIN END IF ends

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tbc_code.',
                  'l_tbc_code '||l_tbc_code);
    END IF;

    x_return_status := OKL_API.G_RET_STS_SUCCESS;

    -- TBC can be NULL
    x_tbc_code := l_tbc_code;

  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN

      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.get_tbc_code ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
      END IF;

      IF l_tbcdef_csr%ISOPEN THEN
        CLOSE l_tbcdef_csr;
      END IF;

      x_return_status := OKL_API.G_RET_STS_ERROR;
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN

      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.get_tbc_code ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_UNEXPECTED_ERROR');
      END IF;

      IF l_tbcdef_csr%ISOPEN THEN
        CLOSE l_tbcdef_csr;
      END IF;

      x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;

    WHEN OTHERS THEN
      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.get_tbc_code ',
                  'EXCEPTION :'||sqlerrm);
      END IF;

      IF l_tbcdef_csr%ISOPEN THEN
        CLOSE l_tbcdef_csr;
      END IF;

      x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
      -- unexpected error
      OKL_API.set_message(p_app_name      => g_app_name,
                         p_msg_name          => g_unexpected_error,
                         p_token1            => g_sqlcode_token,
                         p_token1_value      => sqlcode,
                         p_token2            => g_sqlerrm_token,
                         p_token2_value      => sqlerrm);

  END get_tbc_code;

/*========================================================================
 | PRIVATE PROCEDURE get_pc_code
 |
 | DESCRIPTION
 |    This procedure retrieves PC (Product Category) for tax call, based upon the
 |    contract and line level tax determinats
 |
 | CALLED FROM
 |
 |
 | CALLS PROCEDURES/FUNCTIONS
 |
 |
 | PARAMETERS
 |   Input Parameters
 |      p_sty_id                                   -- Stream Type ID
 |      p_purchase_option_code     -- Purchase option code
 |      p_int_disclosed_code       -- Interest disclosed code
 |      p_title_trnsfr_code                -- Transfer Of Title
 |      p_sale_lease_back_code     -- Sale and Lease Back
 |      p_lease_purchased_code     -- Purchase of Lease
 |      p_tax_country_code             -- Tax country code
 |  Output Parameters
 |      x_pc_code                                  -- PC Code
 |
 | KNOWN ISSUES
 |
 | NOTES
 |
 |
 | MODIFICATION HISTORY
 | Date                  Author    Description of Changes
 | 17-APR-07            RRAVIKIR   Created
 |
 *=======================================================================*/
  PROCEDURE get_pc_code(
    p_api_version            IN  NUMBER,
    p_init_msg_list          IN  VARCHAR2 DEFAULT OKC_API.G_FALSE,
    x_return_status          OUT NOCOPY VARCHAR2,
    x_msg_count              OUT NOCOPY NUMBER,
    x_msg_data               OUT NOCOPY VARCHAR2,
    p_sty_id                 IN  NUMBER,
    p_purchase_option_code   IN VARCHAR2,
    p_int_disclosed_code     IN VARCHAR2,
    p_title_trnsfr_code      IN VARCHAR2,
    p_sale_lease_back_code   IN VARCHAR2,
    p_lease_purchased_code   in varchar2,
    p_tax_country_code       IN VARCHAR2,
    x_pc_code                OUT NOCOPY VARCHAR2) IS

    -- Get all the PC definitions
    CURSOR  l_pcdef_csr IS
    SELECT      result_code pc_code,
            sty_id,
            purchase_option_code,
            int_disclosed_code,
            title_trnsfr_code,
            sale_lease_back_code,
            lease_purchased_code,
            tax_country_code,
                        'Y' select_yn      -- All PCs returned by this cursor are selected initially
    FROM    okl_tax_attr_definitions
    WHERE   (sty_id = p_sty_id OR sty_id IS NULL)
    AND     result_type_code = 'PC_CODE'
    AND     NVL(expire_flag, 'N') = 'N';

    TYPE pcdefs_tbl_type IS TABLE OF l_pcdef_csr%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE pcdefs_selected_tbl_type IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
    TYPE det_null_tbl_type IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;

    l_pcdefs_tbl                        pcdefs_tbl_type;
    l_det_null_tbl                      det_null_tbl_type;
    l_pcdefs_selected_tbl       pcdefs_selected_tbl_type;

    i                                           NUMBER;
    j                                           NUMBER;
    k                                           NUMBER;
    pc_set_count                        NUMBER;
    l_pc_code                           VARCHAR2(30);
    selected_count                      NUMBER;
    det_match_cnt                       NUMBER;
    l_selected_pc_pos           NUMBER;

  BEGIN

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.get_pc_code','Begin(+)');
    END IF;

    --Print Input Variables
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_pc_code.',
           'p_init_msg_list :'||p_init_msg_list);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_pc_code.',
           'p_sty_id :'||p_sty_id);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_pc_code.',
           'p_purchase_option_code :'||p_purchase_option_code);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_pc_code.',
           'p_int_disclosed_code :'||p_int_disclosed_code);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_pc_code.',
           'p_title_trnsfr_code :'||p_title_trnsfr_code);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_pc_code.',
           'p_sale_lease_back_code :'||p_sale_lease_back_code);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_pc_code.',
           'p_lease_purchased_code :'||p_lease_purchased_code);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_pc_code.',
           'p_tax_country_code :'||p_tax_country_code);
    END IF;

    OPEN  l_pcdef_csr;
    FETCH l_pcdef_csr BULK COLLECT INTO l_pcdefs_tbl;
    CLOSE l_pcdef_csr;

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_pc_code.',
      'l_pcdefs_tbl.COUNT '||l_pcdefs_tbl.COUNT);
    END IF;

    IF l_pcdefs_tbl.COUNT > 0 THEN               -- MAIN IF
      k := 1;
      FOR i IN 1 .. 6 LOOP -- determinant loop
        pc_set_count := 0;

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_pc_code.',  'i '||i);
        END IF;

        FOR j IN  l_pcdefs_tbl.FIRST .. l_pcdefs_tbl.LAST LOOP
              IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_pc_code.',
                   'j '||j||' l_pcdefs_tbl(j).select_yn '||l_pcdefs_tbl(j).select_yn );
              END IF;

                  IF l_pcdefs_tbl(j).select_yn = 'Y' THEN
                    IF i = 1 THEN -- purchase option
                      IF p_purchase_option_code IS NULL THEN
                            IF l_pcdefs_tbl(j).purchase_option_code IS NULL THEN
                                  pc_set_count := pc_set_count + 1;
                                ELSE
                                  l_pcdefs_tbl(j).select_yn := 'N';
                                END IF;
                          ELSE
                                IF l_pcdefs_tbl(j).purchase_option_code IS NULL OR l_pcdefs_tbl(j).purchase_option_code = p_purchase_option_code THEN
                                  pc_set_count := pc_set_count + 1;
                                ELSE
                                  l_pcdefs_tbl(j).select_yn := 'N';
                                END IF;
                          END IF;

                    ELSIF i = 2 THEN -- Interest disclosed code
                      IF p_int_disclosed_code IS NULL OR p_int_disclosed_code = 'N' THEN
                IF l_pcdefs_tbl(j).int_disclosed_code = 'N' THEN -- INT_DISCLOSED_CODE can not be null on DB
                                  pc_set_count := pc_set_count + 1;
                                ELSE
                                  l_pcdefs_tbl(j).select_yn := 'N';
                                END IF;
                          ELSE
                pc_set_count := pc_set_count + 1;
                          END IF;

                    ELSIF i = 3 THEN -- Title transfer code
                      IF p_title_trnsfr_code IS NULL OR p_title_trnsfr_code = 'N' THEN
                IF l_pcdefs_tbl(j).title_trnsfr_code = 'N' THEN -- TITLE_TRNSFR_CODE can not be null on DB
                                  pc_set_count := pc_set_count + 1;
                                ELSE
                                  l_pcdefs_tbl(j).select_yn := 'N';
                                END IF;
                          ELSE
                pc_set_count := pc_set_count + 1;
                          END IF;

                    ELSIF i = 4 THEN -- Sale lease back code
                      IF p_sale_lease_back_code IS NULL OR p_sale_lease_back_code = 'N' THEN
                IF l_pcdefs_tbl(j).sale_lease_back_code = 'N' THEN --SALE_LEASE_BACK_CODE can not be null on DB
                                  pc_set_count := pc_set_count + 1;
                                ELSE
                                  l_pcdefs_tbl(j).select_yn := 'N';
                                END IF;
                          ELSE
                pc_set_count := pc_set_count + 1;
                          END IF;

                    ELSIF i = 5 THEN -- Lease purchased code
                      IF p_lease_purchased_code IS NULL OR p_lease_purchased_code = 'N' THEN
                IF l_pcdefs_tbl(j).lease_purchased_code = 'N' THEN --LEASE_PURCHASED_CODE can not be null on DB
                                  pc_set_count := pc_set_count + 1;
                                ELSE
                                  l_pcdefs_tbl(j).select_yn := 'N';
                                END IF;
                          ELSE
                pc_set_count := pc_set_count + 1;
                          END IF;

                    ELSIF i = 6 THEN -- tax country (last determinant)
                      IF p_tax_country_code IS NULL THEN
                            IF l_pcdefs_tbl(j).tax_country_code IS NULL THEN
                                  pc_set_count := pc_set_count + 1;
                  l_pcdefs_selected_tbl(k) := j;
                                ELSE
                                  l_pcdefs_tbl(j).select_yn := 'N';
                                END IF;
                          ELSE
                                IF l_pcdefs_tbl(j).tax_country_code IS NULL OR l_pcdefs_tbl(j).tax_country_code = p_tax_country_code THEN
                                  pc_set_count := pc_set_count + 1;
                  l_pcdefs_selected_tbl(k) := j;
                                ELSE
                                  l_pcdefs_tbl(j).select_yn := 'N';
                                END IF;
                          END IF;

              k := k + 1;
                        END IF;

                        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_pc_code.',
                         'pc_set_count '||pc_set_count);
                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_pc_code.',
                         'l_pcdefs_tbl(j).select_yn '||l_pcdefs_tbl(j).select_yn);
                END IF;
              END IF;
        END LOOP;

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
               FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_pc_code.',
                  'pc_set_count '||pc_set_count);
        END IF;

        IF pc_set_count = 0 THEN
              EXIT;
        END IF;
      END LOOP;  -- determinant loop

      -- At this point l_pcdefs_tbl has been scanned for all the determinants.
      -- select_yn flag in this table is set to 'Y' for PCs that have either Null
      -- determinnt value or value matching with the transaction. Table l_pcdefs_selected_tbl
          -- holds those indexes of original table l_pcdefs_tbl, that have seleted PCs.
          -- At this point this table may contain more than 1 PCs. If so, we need to further filter
          -- out PCs from this table based upon the priority of the determinants.
          -- Following priority order is used :
      -- 1.  Stream Type
      -- 2.  Purchase option
      -- 3.  Interest disclosed code
      -- 4.  Title transfer code
      -- 5.  Sale Lease back code
      -- 6.  Lease purchased code
      -- 7.  Tax Country

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
            FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_pc_code.',
                  'pc_set_count outside first loop'||pc_set_count);
      END IF;

      IF pc_set_count = 1 THEN
        l_pc_code := l_pcdefs_tbl(l_pcdefs_selected_tbl(1)).pc_code;
      ELSIF pc_set_count > 1 THEN
            -- There can be more than one selected PCs at this point
            -- apply determinant priority logic to select 1 PC
            selected_count := pc_set_count;

            IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_pc_code.',
                     'l_pcdefs_selected_tbl.count '||l_pcdefs_selected_tbl.count );
            END IF;

            FOR i IN 1 .. 7 LOOP  -- determinant loop

                  IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_pc_code.',
                      'i '||i||' selected_count '||selected_count );
              END IF;

                  j := 1;
                  det_match_cnt := 0;
                  l_det_null_tbl.DELETE;

                  IF selected_count > 1 THEN
                    FOR k IN l_pcdefs_selected_tbl.FIRST .. l_pcdefs_selected_tbl.LAST LOOP  -- finally selected indexes
                                        -- At this point all the selecetd PCs will either have Null determinant value or determinant value matching with the calling transaction
                      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                            FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_pc_code.',    'k '||k);
                          END IF;

                          IF i = 1 THEN -- Stream Type
                            IF l_pcdefs_tbl(l_pcdefs_selected_tbl(k)).sty_id IS NULL THEN
                              l_det_null_tbl(j) := l_pcdefs_selected_tbl(k);
                                  j := j + 1;
                            ELSE
                                  det_match_cnt := det_match_cnt + 1;
                                  l_selected_pc_pos := l_pcdefs_selected_tbl(k);
                                  -- l_selected_pc_pos will be used as the index of the selected PC,
                                  -- when only one PC is left
                            END IF;

                            IF k = pc_set_count THEN  -- last record
                              IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                                    FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_pc_code.',
                                                  'det_match_cnt '||det_match_cnt||' l_det_null_tbl.count '||l_det_null_tbl.count);
                              END IF;

                              IF det_match_cnt = selected_count THEN --k THEN
                                    NULL; -- all records have matching values, do nothing
                              ELSIF det_match_cnt = 0  THEN -- ALL records have NULL try_id
                                    NULL; -- keep all records selected. Don't exclude yet.
                              ELSIF det_match_cnt = 1 THEN
                                    selected_count := 1;
                              ELSE -- more than one but less than total selected  records have matching values
                                    FOR p IN l_det_null_tbl.FIRST .. l_det_null_tbl.LAST LOOP
                                      l_pcdefs_tbl(l_det_null_tbl(p)).select_yn := 'N';
                                      selected_count := selected_count - 1;
                                    END LOOP;
                              END IF;
                            END IF;

                          ELSIF i = 2 THEN -- Purchase option
                            IF p_purchase_option_code IS NOT NULL THEN
                                  -- IF p_purchase_option_code is null then l_pcdefs_tbl will have more than 1 PCs with
                                  -- only NULL values for purchase_option_code. So no need to filter further, move on to next determinant
                                  -- When system is processing a determinant, there will always be more than one selected PCS
                                  -- This is because, at the end of processing each determinant, we check the selected count
                                  -- If selected count = 1 then we do not process next determinant and exit
                                  IF l_pcdefs_tbl(l_pcdefs_selected_tbl(k)).select_yn = 'Y' THEN -- if still selected
                                    IF l_pcdefs_tbl(l_pcdefs_selected_tbl(k)).purchase_option_code IS NULL THEN
                                          l_det_null_tbl(j) := l_pcdefs_selected_tbl(k);
                                          j := j + 1;
                                    ELSE
                                          det_match_cnt := det_match_cnt + 1;
                                          l_selected_pc_pos := l_pcdefs_selected_tbl(k);
                                          -- l_selected_pc_pos will be used as the index of the selected PC,
                                          -- when only one PC is left
                                    END IF;
                                  END IF;

                                  IF k = pc_set_count THEN  -- last record
                                        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                                           FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_pc_code.',
                                                  'det_match_cnt '||det_match_cnt||' l_det_null_tbl.count '||l_det_null_tbl.count);
                                        END IF;

                                        IF det_match_cnt = selected_count THEN --k THEN
                                          NULL; -- all records have matching values, do nothing
                                        ELSIF det_match_cnt = 0  THEN -- ALL records have NULL try_id
                                          NULL; -- keep all records selected. Don't exclude yet.
                                        ELSIF det_match_cnt = 1 THEN
                                          selected_count := 1;
                                        ELSE -- more than one but less than total selected  records have matching values
                                          FOR p IN l_det_null_tbl.FIRST .. l_det_null_tbl.LAST LOOP
                                                l_pcdefs_tbl(l_det_null_tbl(p)).select_yn := 'N';
                                                selected_count := selected_count - 1;
                                          END LOOP;
                                        END IF;
                                  END IF;
                                END IF;

                          ELSIF i = 3 THEN -- Interest disclosed code
                IF p_int_disclosed_code = 'Y' THEN
                  -- IF p_int_disclosed_code is null or 'N' then l_ufcdefs_tbl will have only 'N' values for
                                  -- INT_DISCLOSED_CODE. So no need to filter further
                                  IF l_pcdefs_tbl(l_pcdefs_selected_tbl(k)).select_yn = 'Y' THEN -- if still selected
                                    IF l_pcdefs_tbl(l_pcdefs_selected_tbl(k)).int_disclosed_code = 'N' THEN
                                          l_det_null_tbl(j) := l_pcdefs_selected_tbl(k);
                                          j := j + 1;
                                    ELSE
                                          det_match_cnt := det_match_cnt + 1;
                                          l_selected_pc_pos := l_pcdefs_selected_tbl(k);
                                          -- l_selected_pc_pos will be used as the index of the selected PC,
                                          -- when only one PC is left
                                    END IF;
                                  END IF;

                                  IF k = pc_set_count THEN  -- last record
                                        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                                           FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_pc_code.',
                                                  'det_match_cnt '||det_match_cnt||' l_det_null_tbl.count '||l_det_null_tbl.count);
                                        END IF;

                                        IF det_match_cnt = selected_count THEN --k THEN
                                          NULL; -- all records have matching values, do nothing
                                        ELSIF det_match_cnt = 0  THEN -- ALL records have NULL try_id
                                          NULL; -- keep all records selected. Don't exclude yet.
                                        ELSIF det_match_cnt = 1 THEN
                                          selected_count := 1;
                                        ELSE -- more than one but less than total selected  records have matching values
                                          FOR p IN l_det_null_tbl.FIRST .. l_det_null_tbl.LAST LOOP
                                                l_pcdefs_tbl(l_det_null_tbl(p)).select_yn := 'N';
                                                selected_count := selected_count - 1;
                                          END LOOP;
                                        END IF;
                                  END IF;
                                END IF;

                          ELSIF i = 4 THEN -- Title transfer code
                            IF p_title_trnsfr_code = 'Y' THEN
                  -- IF p_title_trnsfr_code is null or 'N' then l_ufcdefs_tbl will have only 'N' values for
                                  -- title_trnsfr_code. So no need to filter further
                                  IF l_pcdefs_tbl(l_pcdefs_selected_tbl(k)).select_yn = 'Y' THEN -- if still selected
                                    IF l_pcdefs_tbl(l_pcdefs_selected_tbl(k)).title_trnsfr_code = 'N' THEN
                                          l_det_null_tbl(j) := l_pcdefs_selected_tbl(k);
                                          j := j + 1;
                                    ELSE
                                          det_match_cnt := det_match_cnt + 1;
                                          l_selected_pc_pos := l_pcdefs_selected_tbl(k);
                                          -- l_selected_pc_pos will be used as the index of the selected PC,
                                          -- when only one PC is left
                                    END IF;
                                  END IF;

                                  IF k = pc_set_count THEN  -- last record
                                    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                                          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_pc_code.',
                                                  'det_match_cnt '||det_match_cnt||' l_det_null_tbl.count '||l_det_null_tbl.count);
                                    END IF;

                                    IF det_match_cnt = selected_count THEN --k THEN
                                          NULL; -- all records have matching values, do nothing
                                    ELSIF det_match_cnt = 0  THEN -- ALL records have NULL try_id
                                          NULL; -- keep all records selected. Don't exclude yet.
                                    ELSIF det_match_cnt = 1 THEN
                                          selected_count := 1;
                                    ELSE -- more than one but less than total selected  records have matching values
                                          FOR p IN l_det_null_tbl.FIRST .. l_det_null_tbl.LAST LOOP
                                            l_pcdefs_tbl(l_det_null_tbl(p)).select_yn := 'N';
                                            selected_count := selected_count - 1;
                                          END LOOP;
                                    END IF;
                                  END IF;
                            END IF;

                          ELSIF i = 5 THEN -- Sale Lease back code
                            IF p_sale_lease_back_code = 'Y' THEN
                  -- IF p_sale_lease_back_code is null or 'N' then l_ufcdefs_tbl will have only 'N' values for
                                  -- sale_lease_back_code. So no need to filter further
                                  IF l_pcdefs_tbl(l_pcdefs_selected_tbl(k)).select_yn = 'Y' THEN -- if still selected
                                    IF l_pcdefs_tbl(l_pcdefs_selected_tbl(k)).sale_lease_back_code = 'N' THEN
                                          l_det_null_tbl(j) := l_pcdefs_selected_tbl(k);
                                          j := j + 1;
                                    ELSE
                                          det_match_cnt := det_match_cnt + 1;
                                          l_selected_pc_pos := l_pcdefs_selected_tbl(k);
                                          -- l_selected_pc_pos will be used as the index of the selected PC,
                                          -- when only one PC is left
                                    END IF;
                                  END IF;

                                  IF k = pc_set_count THEN  -- last record
                                        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                                           FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_pc_code.',
                                                  'det_match_cnt '||det_match_cnt||' l_det_null_tbl.count '||l_det_null_tbl.count);
                                        END IF;

                                        IF det_match_cnt = selected_count THEN --k THEN
                                          NULL; -- all records have matching values, do nothing
                                        ELSIF det_match_cnt = 0  THEN -- ALL records have NULL try_id
                                          NULL; -- keep all records selected. Don't exclude yet.
                                        ELSIF det_match_cnt = 1 THEN
                                          selected_count := 1;
                                        ELSE -- more than one but less than total selected  records have matching values
                                          FOR p IN l_det_null_tbl.FIRST .. l_det_null_tbl.LAST LOOP
                                                l_pcdefs_tbl(l_det_null_tbl(p)).select_yn := 'N';
                                                selected_count := selected_count - 1;
                                          END LOOP;
                                        END IF;
                                  END IF;
                                END IF;

                          ELSIF i = 6 THEN -- Lease purchased code
                            IF p_lease_purchased_code = 'Y' THEN
                  -- IF p_lease_purchased_code is null or 'N' then l_ufcdefs_tbl will have only 'N' values for
                                  -- lease_purchased_code. So no need to filter further
                                  IF l_pcdefs_tbl(l_pcdefs_selected_tbl(k)).select_yn = 'Y' THEN -- if still selected
                                    IF l_pcdefs_tbl(l_pcdefs_selected_tbl(k)).lease_purchased_code = 'N' THEN
                                          l_det_null_tbl(j) := l_pcdefs_selected_tbl(k);
                                          j := j + 1;
                                    ELSE
                                          det_match_cnt := det_match_cnt + 1;
                                          l_selected_pc_pos := l_pcdefs_selected_tbl(k);
                                          -- l_selected_pc_pos will be used as the index of the selected PC,
                                          -- when only one PC is left
                                    END IF;
                                  END IF;

                                  IF k = pc_set_count THEN  -- last record
                                        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                                           FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_pc_code.',
                                                  'det_match_cnt '||det_match_cnt||' l_det_null_tbl.count '||l_det_null_tbl.count);
                                        END IF;

                                        IF det_match_cnt = selected_count THEN --k THEN
                                          NULL; -- all records have matching values, do nothing
                                        ELSIF det_match_cnt = 0  THEN -- ALL records have NULL try_id
                                          NULL; -- keep all records selected. Don't exclude yet.
                                        ELSIF det_match_cnt = 1 THEN
                                          selected_count := 1;
                                        ELSE -- more than one but less than total selected  records have matching values
                                          FOR p IN l_det_null_tbl.FIRST .. l_det_null_tbl.LAST LOOP
                                                l_pcdefs_tbl(l_det_null_tbl(p)).select_yn := 'N';
                                                selected_count := selected_count - 1;
                                          END LOOP;
                                        END IF;
                                  END IF;
                                END IF;

                          ELSIF i = 7 THEN -- Tax Country
                            IF p_tax_country_code IS NOT NULL THEN
                                  -- IF p_tax_country_code is null then l_pcdefs_tbl will have more than 1 PCs with
                                  -- only NULL values for tax_country_code. So no need to filter further, move on to next determinant
                                  -- When system is processing a determinant, there will always be more than one selected PCS
                                  -- This is because, at the end of processing each determinant, we check the selected count
                                  -- If selected count = 1 then we do not process next determinant and exit
                                  IF l_pcdefs_tbl(l_pcdefs_selected_tbl(k)).select_yn = 'Y' THEN -- if still selected
                                    IF l_pcdefs_tbl(l_pcdefs_selected_tbl(k)).tax_country_code IS NULL THEN
                                          l_det_null_tbl(j) := l_pcdefs_selected_tbl(k);
                                          j := j + 1;
                                    ELSE
                                          det_match_cnt := det_match_cnt + 1;
                                          l_selected_pc_pos := l_pcdefs_selected_tbl(k);
                                          -- l_selected_pc_pos will be used as the index of the selected PC,
                                          -- when only one PC is left
                                    END IF;
                                  END IF;

                                  IF k = pc_set_count THEN  -- last record
                                        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                                           FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_pc_code.',
                                                  'det_match_cnt '||det_match_cnt||' l_det_null_tbl.count '||l_det_null_tbl.count);
                                        END IF;

                                        IF det_match_cnt = selected_count THEN --k THEN
                                          NULL; -- all records have matching values, do nothing
                                        ELSIF det_match_cnt = 0  THEN -- ALL records have NULL try_id
                                          NULL; -- keep all records selected. Don't exclude yet.
                                        ELSIF det_match_cnt = 1 THEN
                                          selected_count := 1;
                                        ELSE -- more than one but less than total selected  records have matching values
                                          FOR p IN l_det_null_tbl.FIRST .. l_det_null_tbl.LAST LOOP
                                                l_pcdefs_tbl(l_det_null_tbl(p)).select_yn := 'N';
                                                selected_count := selected_count - 1;
                                          END LOOP;
                                        END IF;
                                  END IF;

                                END IF;
                          END IF;
                    END LOOP;
                  ELSIF selected_count = 1 THEN
                    EXIT;
                  END IF;
            END LOOP; -- determinant loop

            IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_pc_code.',
                                'selected_count outside 2nd loop '||selected_count);
            END IF;

            IF selected_count = 1 THEN
                  l_pc_code := l_pcdefs_tbl(l_selected_pc_pos).pc_code;
            ELSIF selected_count > 1 THEN  -- still more than one PCs are selected
                  l_pc_code := NULL;
            END IF;
      ELSIF pc_set_count = 0 THEN
            l_pc_code := NULL;
      END IF;

    END IF;  -- MAIN IF ends

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_pc_code.',
                  'l_pc_code '||l_pc_code);
    END IF;

    x_return_status := OKL_API.G_RET_STS_SUCCESS;

    -- PC can be null
    x_pc_code := l_pc_code;

  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN

      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.get_pc_code ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
      END IF;

      IF l_pcdef_csr%ISOPEN THEN
        CLOSE l_pcdef_csr;
      END IF;

      x_return_status := OKL_API.G_RET_STS_ERROR;
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN

      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.get_pc_code ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_UNEXPECTED_ERROR');
      END IF;

      IF l_pcdef_csr%ISOPEN THEN
        CLOSE l_pcdef_csr;
      END IF;

      x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;

    WHEN OTHERS THEN
      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.get_pc_code ',
                  'EXCEPTION :'||sqlerrm);
      END IF;

      IF l_pcdef_csr%ISOPEN THEN
        CLOSE l_pcdef_csr;
      END IF;

      x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
      -- unexpected error
      OKL_API.set_message(p_app_name      => g_app_name,
                         p_msg_name          => g_unexpected_error,
                         p_token1            => g_sqlcode_token,
                         p_token1_value      => sqlcode,
                         p_token2            => g_sqlerrm_token,
                         p_token2_value      => sqlerrm);

  END get_pc_code;

/*========================================================================
 | PRIVATE PROCEDURE get_ufc_code
 |
 | DESCRIPTION
 |    This procedure retrieves UFC (User Fiscal Classification) for tax call,
 |    based upon the contract and line level tax determinats
 |
 | CALLED FROM
 |
 |
 | CALLS PROCEDURES/FUNCTIONS
 |
 |
 | PARAMETERS
 |   Input Parameters
 |      p_purchase_option          -- Purchase option
 |      p_fin_product_id                   -- Financial Product
 |      p_try_id                                   -- Transaction Type ID
 |      p_sty_id                                   -- Stream Type ID
 |      p_int_disclosed_code       -- Interest Disclosed
 |      p_title_trnsfr_code                -- Transfer Of Title
 |      p_sale_lease_back_code     -- Sale and Lease Back
 |      p_lease_purchased_code     -- Purchase of Lease
 |      p_equip_usage_code                 -- Usage of Equipment
 |      p_vendor_site_id                   -- Vendor Site ID
 |      p_age_of_equip                     -- Age of Equipment
 |      p_term_quote_type_code     -- Termination quote type code
 |      p_term_quote_reason_code   -- Termination quote reason code
 |      p_tax_country_code         -- Tax country code
 |  Output Parameters
 |      x_ufc_code                                 -- UFC Code
 |
 | KNOWN ISSUES
 |
 | NOTES
 |
 |
 | MODIFICATION HISTORY
 | Date                  Author    Description of Changes
 | 08-APR-05            SECHAWLA   Created
 | 20-APR-07            RRAVIKIR   Modified
 |
 *=======================================================================*/

  PROCEDURE get_ufc_code(
        p_api_version                   IN  NUMBER,
    p_init_msg_list                     IN  VARCHAR2 DEFAULT OKC_API.G_FALSE,
    x_return_status                     OUT NOCOPY VARCHAR2,
    x_msg_count                         OUT NOCOPY NUMBER,
    x_msg_data                          OUT NOCOPY VARCHAR2,
    p_purchase_option               IN  VARCHAR2,
    p_fin_product_id                            IN  VARCHAR2,
    p_try_id                                            IN  NUMBER,
    p_sty_id                                            IN  NUMBER,
    p_int_disclosed_code                        IN  VARCHAR2,
    p_title_trnsfr_code                         IN  VARCHAR2,
    p_sale_lease_back_code                      IN  VARCHAR2,
    p_lease_purchased_code                      IN  VARCHAR2,
    p_equip_usage_code                          IN  VARCHAR2,
    p_vendor_site_id                            IN  NUMBER,
    p_age_of_equip                                      IN  NUMBER,
    p_term_quote_type_code          IN  VARCHAR2 DEFAULT NULL,
    p_term_quote_reason_code        IN  VARCHAR2 DEFAULT NULL,
    p_tax_country_code              IN  VARCHAR2,
        x_ufc_code                      OUT NOCOPY VARCHAR2) IS

    l_return_status              VARCHAR2(1) := OKL_API.G_RET_STS_SUCCESS;

    -- Get all the UFC definitions applicable to a transaction type
    CURSOR  l_ufcdef_csr(cp_try_id IN NUMBER) IS
    SELECT      result_code ufc_code,
            try_id,
            sty_id ,
                        purchase_option_code,
                        equip_usage_code,
                        vendor_site_id,
                        age_of_equip_from,
                        age_of_equip_to,
                        pdt_id,
                        int_disclosed_code ,
                        title_trnsfr_code,
                        sale_lease_back_code,
                        lease_purchased_code,
            term_quote_type_code,
            term_quote_reason_code,
            tax_country_code,
                        'Y' select_yn      -- all ufcs returned by this cursor are selected initially
    FROM    okl_tax_attr_definitions
    WHERE   (try_id = cp_try_id OR try_id IS NULL)
    AND     RESULT_TYPE_CODE = 'UFC_CODE'
    AND     NVL(expire_flag, 'N') = 'N';


    TYPE ufcdefs_tbl_type IS TABLE OF l_ufcdef_csr%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE ufcdefs_selected_tbl_type IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
    TYPE det_null_tbl_type IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;

    l_ufcdefs_tbl                       ufcdefs_tbl_type;
    l_det_null_tbl                      det_null_tbl_type;
    l_ufcdefs_selected_tbl      ufcdefs_selected_tbl_type;

    i                                           NUMBER;
    j                                           NUMBER;
    k                                           NUMBER;
    ufc_set_count                       NUMBER;
    l_ufc_code                          VARCHAR2(30);
    selected_count                      NUMBER;
    det_match_cnt                       NUMBER;
    l_selected_ufc_pos          NUMBER;
  BEGIN

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code','Begin(+)');
    END IF;

    -- Print Input Variables
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
              'p_init_msg_list :'||p_init_msg_list);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
              'p_purchase_option :'||p_purchase_option);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
              'p_fin_product_id :'||p_fin_product_id);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
              'p_try_id :'||p_try_id);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
              'p_sty_id :'||p_sty_id);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
              'p_int_disclosed_code :'||p_int_disclosed_code);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
              'p_title_trnsfr_code :'||p_title_trnsfr_code);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
              'p_sale_lease_back_code :'||p_sale_lease_back_code);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
              'p_lease_purchased_code :'||p_lease_purchased_code);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
              'p_equip_usage_code :'||p_equip_usage_code);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
              'p_vendor_site_id :'||p_vendor_site_id);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
              'p_age_of_equip :'||p_age_of_equip);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
              'term_quote_type_code :'|| p_term_quote_type_code);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
              'term_quote_reason_code :'|| p_term_quote_reason_code);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
              'p_tax_country_code :'|| p_tax_country_code);
    END IF;

    x_return_status := OKL_API.G_RET_STS_SUCCESS;

    OPEN  l_ufcdef_csr(p_try_id);
    FETCH l_ufcdef_csr BULK COLLECT INTO l_ufcdefs_tbl;
    CLOSE l_ufcdef_csr;

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
              'l_ufcdefs_tbl.COUNT '||l_ufcdefs_tbl.COUNT);
    END IF;

    IF l_ufcdefs_tbl.COUNT > 0 THEN  -- MAIN IF
      k := 1;
      FOR i IN 1 .. 13 LOOP -- determinant loop
        ufc_set_count := 0;

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
                     'i '||i);
        END IF;

        FOR j IN  l_ufcdefs_tbl.FIRST .. l_ufcdefs_tbl.LAST LOOP

          IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
            FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
                       'j '||j||' l_ufcdefs_tbl(j).select_yn '||l_ufcdefs_tbl(j).select_yn );
          END IF;

                  IF l_ufcdefs_tbl(j).select_yn = 'Y' THEN
                        IF i = 1 THEN   -- stream type
                          IF p_sty_id IS NULL THEN
                IF l_ufcdefs_tbl(j).sty_id IS NULL THEN
                  ufc_set_count := ufc_set_count + 1;
                ELSE
                  l_ufcdefs_tbl(j).select_yn := 'N';
                END IF;
              ELSE
                                IF l_ufcdefs_tbl(j).sty_id IS NULL OR l_ufcdefs_tbl(j).sty_id = p_sty_id THEN
                          ufc_set_count := ufc_set_count + 1;
                        ELSE
                          l_ufcdefs_tbl(j).select_yn := 'N';
                END IF;
              END IF;

                        ELSIF i = 2 THEN   -- term quote type
                          IF p_term_quote_type_code IS NULL THEN
                IF l_ufcdefs_tbl(j).term_quote_type_code IS NULL THEN
                  ufc_set_count := ufc_set_count + 1;
                ELSE
                  l_ufcdefs_tbl(j).select_yn := 'N';
                END IF;
              ELSE
                                IF l_ufcdefs_tbl(j).term_quote_type_code IS NULL OR
                  l_ufcdefs_tbl(j).term_quote_type_code = p_term_quote_type_code THEN
                          ufc_set_count := ufc_set_count + 1;
                        ELSE
                          l_ufcdefs_tbl(j).select_yn := 'N';
                END IF;
              END IF;

                        ELSIF i = 3 THEN   -- term quote reason
                          IF p_term_quote_reason_code IS NULL THEN
                IF l_ufcdefs_tbl(j).term_quote_reason_code IS NULL THEN
                  ufc_set_count := ufc_set_count + 1;
                ELSE
                  l_ufcdefs_tbl(j).select_yn := 'N';
                END IF;
              ELSE
                                IF l_ufcdefs_tbl(j).term_quote_reason_code IS NULL OR
                  l_ufcdefs_tbl(j).term_quote_reason_code = p_term_quote_reason_code THEN
                          ufc_set_count := ufc_set_count + 1;
                        ELSE
                          l_ufcdefs_tbl(j).select_yn := 'N';
                END IF;
              END IF;

            ELSIF i = 4 THEN -- purchase option
              IF p_purchase_option IS NULL THEN
                IF l_ufcdefs_tbl(j).purchase_option_code IS NULL THEN
                  ufc_set_count := ufc_set_count + 1;
                ELSE
                  l_ufcdefs_tbl(j).select_yn := 'N';
                END IF;
              ELSE
                                IF l_ufcdefs_tbl(j).purchase_option_code IS NULL OR l_ufcdefs_tbl(j).purchase_option_code = p_purchase_option THEN
                          ufc_set_count := ufc_set_count + 1;
                        ELSE
                          l_ufcdefs_tbl(j).select_yn := 'N';
                END IF;
              END IF;

                        ELSIF i = 5 THEN -- usage of equipment
                          IF p_equip_usage_code IS NULL THEN
                IF l_ufcdefs_tbl(j).equip_usage_code IS NULL THEN
                  ufc_set_count := ufc_set_count + 1;
                ELSE
                  l_ufcdefs_tbl(j).select_yn := 'N';
                END IF;
              ELSE  -- 22-NOV-05 SECHAWLA 4742539 : fixed the parameter name in the following comparison
                                IF l_ufcdefs_tbl(j).equip_usage_code IS NULL OR l_ufcdefs_tbl(j).equip_usage_code = p_equip_usage_code THEN
                          ufc_set_count := ufc_set_count + 1;
                        ELSE
                          l_ufcdefs_tbl(j).select_yn := 'N';
                END IF;
              END IF;

                        ELSIF i = 6 THEN -- vendor location
                          IF p_VENDOR_SITE_ID IS NULL THEN
                IF l_ufcdefs_tbl(j).VENDOR_SITE_ID IS NULL THEN
                  ufc_set_count := ufc_set_count + 1;
                ELSE
                  l_ufcdefs_tbl(j).select_yn := 'N';
                END IF;
              ELSE  -- 22-NOV-05 SECHAWLA 4742539 : fixed the parameter name in the following comparison
                                IF l_ufcdefs_tbl(j).VENDOR_SITE_ID IS NULL OR l_ufcdefs_tbl(j).VENDOR_SITE_ID = p_VENDOR_SITE_ID THEN
                          ufc_set_count := ufc_set_count + 1;
                        ELSE
                          l_ufcdefs_tbl(j).select_yn := 'N';
                END IF;
              END IF;

            ELSIF i = 7 THEN -- age of equipment
                          IF p_age_of_equip IS NULL THEN
                IF l_ufcdefs_tbl(j).age_of_equip_from IS NULL AND l_ufcdefs_tbl(j).age_of_equip_to IS NULL THEN
                  ufc_set_count := ufc_set_count + 1;
                ELSE
                  l_ufcdefs_tbl(j).select_yn := 'N';
                END IF;
              ELSE
                                IF ( (l_ufcdefs_tbl(j).age_of_equip_from IS NULL AND l_ufcdefs_tbl(j).age_of_equip_to IS NULL) OR
                                         ( (l_ufcdefs_tbl(j).age_of_equip_to IS NOT NULL) AND (p_age_of_equip BETWEEN nvl(l_ufcdefs_tbl(j).age_of_equip_from,0) AND  l_ufcdefs_tbl(j).age_of_equip_to) )OR
                                         ( l_ufcdefs_tbl(j).age_of_equip_to IS NULL AND l_ufcdefs_tbl(j).age_of_equip_from <= p_age_of_equip)
                               ) THEN
                                  ufc_set_count := ufc_set_count + 1;
                        ELSE
                          l_ufcdefs_tbl(j).select_yn := 'N';
                END IF;
              END IF;

            ELSIF i = 8 THEN -- financial product
                          IF p_fin_product_id IS NULL THEN
                IF l_ufcdefs_tbl(j).pdt_id IS NULL THEN
                  ufc_set_count := ufc_set_count + 1;
                ELSE
                  l_ufcdefs_tbl(j).select_yn := 'N';
                END IF;
              ELSE
                            IF l_ufcdefs_tbl(j).pdt_id IS NULL OR l_ufcdefs_tbl(j).pdt_id = p_fin_product_id THEN
                          ufc_set_count := ufc_set_count + 1;
                        ELSE
                          l_ufcdefs_tbl(j).select_yn := 'N';
                END IF;
              END IF;

                        ELSIF i = 9 THEN -- interest disclosed
                          IF p_int_disclosed_code IS NULL OR p_int_disclosed_code = 'N' THEN
                IF l_ufcdefs_tbl(j).int_disclosed_code = 'N' THEN -- INT_DISCLOSED_CODE can not be null on DB
                  ufc_set_count := ufc_set_count + 1;
                ELSE
                  l_ufcdefs_tbl(j).select_yn := 'N';
                END IF;
              ELSE
                                ufc_set_count := ufc_set_count + 1;
              END IF;

            ELSIF i = 10 THEN -- transfer of Title
                          IF p_title_trnsfr_code IS NULL OR p_title_trnsfr_code = 'N' THEN
                IF l_ufcdefs_tbl(j).title_trnsfr_code = 'N' THEN -- TITLE_TRNSFR_CODE can not be null on DB
                  ufc_set_count := ufc_set_count + 1;
                ELSE
                  l_ufcdefs_tbl(j).select_yn := 'N';
                END IF;
              ELSE
                                ufc_set_count := ufc_set_count + 1;
              END IF;

            ELSIF i = 11 THEN -- sale and lease back
                          IF p_sale_lease_back_code IS NULL OR p_sale_lease_back_code = 'N' THEN
                IF l_ufcdefs_tbl(j).sale_lease_back_code = 'N' THEN --SALE_LEASE_BACK_CODE can not be null on DB
                  ufc_set_count := ufc_set_count + 1;
                ELSE
                  l_ufcdefs_tbl(j).select_yn := 'N';
                END IF;
              ELSE
                                ufc_set_count := ufc_set_count + 1;
              END IF;

            ELSIF i = 12 THEN -- purchase of lease
                          IF p_lease_purchased_code IS NULL OR p_lease_purchased_code = 'N' THEN
                IF l_ufcdefs_tbl(j).lease_purchased_code = 'N' THEN --LEASE_PURCHASED_CODE can not be null on DB
                  ufc_set_count := ufc_set_count + 1;
                ELSE
                  l_ufcdefs_tbl(j).select_yn := 'N';
                END IF;
              ELSE
                                ufc_set_count := ufc_set_count + 1;
              END IF;

            ELSIF i = 13 THEN --taxation country (last determinant)
                          IF p_tax_country_code IS NULL THEN
                IF l_ufcdefs_tbl(j).tax_country_code IS NULL THEN
                  ufc_set_count := ufc_set_count + 1;
                  l_ufcdefs_selected_tbl(k) := j;
                  k := k + 1; --Added by bkatraga for bug 9483019
                ELSE
                  l_ufcdefs_tbl(j).select_yn := 'N';
                END IF;
              ELSE
                IF l_ufcdefs_tbl(j).tax_country_code IS NULL OR
                  l_ufcdefs_tbl(j).tax_country_code = p_tax_country_code THEN
                                  ufc_set_count := ufc_set_count + 1;
                                  l_ufcdefs_selected_tbl(k) := j;
                                  k := k + 1; --Added by bkatraga for bug 9483019
                ELSE
                  l_ufcdefs_tbl(j).select_yn := 'N';
                END IF;
              END IF;

              /*IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
                               'k '||k||' l_ufcdefs_selected_tbl(k) '||l_ufcdefs_selected_tbl(k));
              END IF;*/
              --k := k + 1; Commented by bkatraga for bug 9483019
                        END IF;

                        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
                          'ufc_set_count '||ufc_set_count);
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
                          'l_ufcdefs_tbl(j).select_yn '||l_ufcdefs_tbl(j).select_yn);
            END IF;
          END IF;
        END LOOP;

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
                          'ufc_set_count '||ufc_set_count);
        END IF;

        IF ufc_set_count = 0 THEN
          EXIT;
        END IF;
      END LOOP;

      -- At this point l_ufcdefs_tbl has been scanned for all the determinants.
      -- select_yn flag in this table is set to 'Y' for ufcs that have either Null
      -- determinnt value or value matching with the transaction. Table l_ufcdefs_selected_tbl
          -- holds those indexes of original table l_ufcdefs_tbl, that have seleted ufcs.
          -- At this point this table may contain more than 1 ufcs. If so, we need to further filter
          -- out ufcs from this table based upon the priority of the determinants.
          -- Following priority order is used :
      -- 1.  Transaction Type
      -- 2.  Stream Type
      -- 3.  Purchase Option
      -- 4.  Usage Of Equipment
      -- 5.  Vendor Location
      -- 6.  Age of Equipment
      -- 7.  Financial Product
      -- 8.  Interest Disclosed
      -- 9.  Transfer Of Title
      -- 10. Sale and Lease back
      -- 11. Purchase of Lease

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
                          'ufc_set_count outside first loop'||ufc_set_count);
      END IF;

      IF ufc_set_count = 1 THEN
        l_ufc_code := l_ufcdefs_tbl(l_ufcdefs_selected_tbl(1)).ufc_code;

      ELSIF ufc_set_count > 1 THEN
        -- There can be more than one selected ufcs at this point
        -- apply determinant priority logic to select 1 ufc

        selected_count := ufc_set_count;

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
                          'l_ufcdefs_selected_tbl.count '||l_ufcdefs_selected_tbl.count );
        END IF;

        FOR i IN 1..14 LOOP  -- determinant loop

          IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
            FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
                          'i '||i||' selected_count '||selected_count );
          END IF;

          j := 1;
          det_match_cnt := 0;
          l_det_null_tbl.DELETE;

          IF selected_count > 1 THEN
                FOR k IN l_ufcdefs_selected_tbl.FIRST .. l_ufcdefs_selected_tbl.LAST LOOP  -- finally selected indexes
                  -- At this point all the selecetd ufcs will either have Null determinant value or determinant value matching with the calling transaction
              IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.','k '||k);
                          END IF;

                  IF i = 1 THEN -- transaction type
                            IF l_ufcdefs_tbl(l_ufcdefs_selected_tbl(k)).try_id IS NULL THEN

                          l_det_null_tbl(j) := l_ufcdefs_selected_tbl(k);
                          j := j + 1;
                        ELSE
                          det_match_cnt := det_match_cnt + 1;
                          l_selected_ufc_pos := l_ufcdefs_selected_tbl(k);
                                -- l_selected_ufc_pos will be used as the index of the selected ufc,
                                        -- when only one UFC is left
                        END IF;

                        IF k = ufc_set_count THEN  -- last record
                          IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
                                                        'det_match_cnt '||det_match_cnt||' l_det_null_tbl.count '||l_det_null_tbl.count);
                          END IF;

                          IF det_match_cnt = selected_count THEN --k THEN
                                NULL; -- all records have matching values, do nothing
                          ELSIF det_match_cnt = 0  THEN -- ALL records have NULL try_id
                                NULL; -- keep all records selected. Don't exclude yet.
                          ELSIF det_match_cnt = 1 THEN
                                selected_count := 1;
                          ELSE -- more than one but less than total selected  records have matching values
                                FOR p IN l_det_null_tbl.FIRST .. l_det_null_tbl.LAST LOOP
                                  l_ufcdefs_tbl(l_det_null_tbl(p)).select_yn := 'N';
                                  selected_count := selected_count - 1;
                                END LOOP;
                          END IF;
                        END IF;

              ELSIF i = 2 THEN -- stream type
                IF p_sty_id IS NOT NULL THEN
                  -- IF p_sty_id is null then l_ufcdefs_tbl will have more than 1 ufcs with
                                  -- only NULL values for sty_id. So no need to filter further, move on to next determinant
                                  -- When system is processing a determinant, there will always be more than one selected ufcS
                                  -- This is because, at the end of processing each determinant, we check the selected count
                                  -- If selected count = 1 then we do not process next determinant and exit
                  IF l_ufcdefs_tbl(l_ufcdefs_selected_tbl(k)).select_yn = 'Y' THEN -- if still selected
                    IF l_ufcdefs_tbl(l_ufcdefs_selected_tbl(k)).sty_id IS NULL THEN
                                  l_det_null_tbl(j) := l_ufcdefs_selected_tbl(k);
                                  j := j + 1;
                                ELSE
                                  det_match_cnt := det_match_cnt + 1;
                                  l_selected_ufc_pos := l_ufcdefs_selected_tbl(k);
                                  -- l_selected_ufc_pos will be used as the index of the selected ufc,
                                      -- when only one UFC is left
                                END IF;
                      END IF;

                          IF k = ufc_set_count THEN  -- last record
                                IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
                                                                              'det_match_cnt '||det_match_cnt||' l_det_null_tbl.count '||l_det_null_tbl.count);
                                END IF;

                                IF det_match_cnt = selected_count THEN --k THEN
                                  NULL; -- all records have matching values, do nothing
                                ELSIF det_match_cnt = 0  THEN -- ALL records have NULL try_id
                                  NULL; -- keep all records selected. Don't exclude yet.
                                ELSIF det_match_cnt = 1 THEN
                                  selected_count := 1;
                                ELSE -- more than one but less than total selected  records have matching values
                                  FOR p IN l_det_null_tbl.FIRST .. l_det_null_tbl.LAST LOOP
                                    l_ufcdefs_tbl(l_det_null_tbl(p)).select_yn := 'N';
                                    selected_count := selected_count - 1;
                                  END LOOP;
                                END IF;
                          END IF;
                        END IF;

              ELSIF i = 3 THEN -- termination quote type
                IF p_term_quote_type_code IS NOT NULL THEN
                  -- IF p_term_quote_type_code is null then l_ufcdefs_tbl will have more than 1 ufcs with
                                  -- only NULL values for term_quote_type_code. So no need to filter further, move on to next determinant
                                  -- When system is processing a determinant, there will always be more than one selected ufcS
                                  -- This is because, at the end of processing each determinant, we check the selected count
                                  -- If selected count = 1 then we do not process next determinant and exit
                  IF l_ufcdefs_tbl(l_ufcdefs_selected_tbl(k)).select_yn = 'Y' THEN -- if still selected
                    IF l_ufcdefs_tbl(l_ufcdefs_selected_tbl(k)).term_quote_type_code IS NULL THEN
                                  l_det_null_tbl(j) := l_ufcdefs_selected_tbl(k);
                                  j := j + 1;
                                ELSE
                                  det_match_cnt := det_match_cnt + 1;
                                  l_selected_ufc_pos := l_ufcdefs_selected_tbl(k);
                                  -- l_selected_ufc_pos will be used as the index of the selected ufc,
                                      -- when only one UFC is left
                                END IF;
                      END IF;

                          IF k = ufc_set_count THEN  -- last record
                                IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
                                                                              'det_match_cnt '||det_match_cnt||' l_det_null_tbl.count '||l_det_null_tbl.count);
                                END IF;

                                IF det_match_cnt = selected_count THEN --k THEN
                                  NULL; -- all records have matching values, do nothing
                                ELSIF det_match_cnt = 0  THEN -- ALL records have NULL try_id
                                  NULL; -- keep all records selected. Don't exclude yet.
                                ELSIF det_match_cnt = 1 THEN
                                  selected_count := 1;
                                ELSE -- more than one but less than total selected  records have matching values
                                  FOR p IN l_det_null_tbl.FIRST .. l_det_null_tbl.LAST LOOP
                                    l_ufcdefs_tbl(l_det_null_tbl(p)).select_yn := 'N';
                                    selected_count := selected_count - 1;
                                  END LOOP;
                                END IF;
                          END IF;
                        END IF;

              ELSIF i = 4 THEN -- termination quote reason
                IF p_term_quote_reason_code IS NOT NULL THEN
                  -- IF p_term_quote_reason_code is null then l_ufcdefs_tbl will have more than 1 ufcs with
                                  -- only NULL values for term_quote_reason_code. So no need to filter further, move on to next determinant
                                  -- When system is processing a determinant, there will always be more than one selected ufcS
                                  -- This is because, at the end of processing each determinant, we check the selected count
                                  -- If selected count = 1 then we do not process next determinant and exit
                  IF l_ufcdefs_tbl(l_ufcdefs_selected_tbl(k)).select_yn = 'Y' THEN -- if still selected
                    IF l_ufcdefs_tbl(l_ufcdefs_selected_tbl(k)).term_quote_reason_code IS NULL THEN
                                  l_det_null_tbl(j) := l_ufcdefs_selected_tbl(k);
                                  j := j + 1;
                                ELSE
                                  det_match_cnt := det_match_cnt + 1;
                                  l_selected_ufc_pos := l_ufcdefs_selected_tbl(k);
                                  -- l_selected_ufc_pos will be used as the index of the selected ufc,
                                      -- when only one UFC is left
                                END IF;
                      END IF;

                          IF k = ufc_set_count THEN  -- last record
                                IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
                                                                              'det_match_cnt '||det_match_cnt||' l_det_null_tbl.count '||l_det_null_tbl.count);
                                END IF;

                                IF det_match_cnt = selected_count THEN --k THEN
                                  NULL; -- all records have matching values, do nothing
                                ELSIF det_match_cnt = 0  THEN -- ALL records have NULL try_id
                                  NULL; -- keep all records selected. Don't exclude yet.
                                ELSIF det_match_cnt = 1 THEN
                                  selected_count := 1;
                                ELSE -- more than one but less than total selected  records have matching values
                                  FOR p IN l_det_null_tbl.FIRST .. l_det_null_tbl.LAST LOOP
                                    l_ufcdefs_tbl(l_det_null_tbl(p)).select_yn := 'N';
                                    selected_count := selected_count - 1;
                                  END LOOP;
                                END IF;
                          END IF;
                        END IF;

              ELSIF i = 5 THEN -- purchase option
                IF p_purchase_option IS NOT NULL THEN
                  -- IF p_purchase_option is null then l_ufcdefs_tbl will have more than 1 ufcs with
                                  -- only NULL values for purchase_option. So no need to filter further, move on to next determinant
                                  -- When system is processing a determinant, there will always be more than one selected ufcS
                                  -- This is because, at the end of processing each determinant, we check the selected count
                                  -- If selected count = 1 then we do not process next determinant and exit
                  IF l_ufcdefs_tbl(l_ufcdefs_selected_tbl(k)).select_yn = 'Y' THEN -- if still selected
                    IF l_ufcdefs_tbl(l_ufcdefs_selected_tbl(k)).purchase_option_code IS NULL THEN
                                  l_det_null_tbl(j) := l_ufcdefs_selected_tbl(k);
                                  j := j + 1;
                                ELSE
                                  det_match_cnt := det_match_cnt + 1;
                                  l_selected_ufc_pos := l_ufcdefs_selected_tbl(k);
                                  -- l_selected_ufc_pos will be used as the index of the selected ufc,
                                      -- when only one UFC is left
                                END IF;
                      END IF;

                          IF k = ufc_set_count THEN  -- last record
                                IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
                                                                              'det_match_cnt '||det_match_cnt||' l_det_null_tbl.count '||l_det_null_tbl.count);
                                END IF;

                                IF det_match_cnt = selected_count THEN --k THEN
                                  NULL; -- all records have matching values, do nothing
                                ELSIF det_match_cnt = 0  THEN -- ALL records have NULL try_id
                                  NULL; -- keep all records selected. Don't exclude yet.
                                ELSIF det_match_cnt = 1 THEN
                                  selected_count := 1;
                                ELSE -- more than one but less than total selected  records have matching values
                                  FOR p IN l_det_null_tbl.FIRST .. l_det_null_tbl.LAST LOOP
                                    l_ufcdefs_tbl(l_det_null_tbl(p)).select_yn := 'N';
                                    selected_count := selected_count - 1;
                                  END LOOP;
                                END IF;
                          END IF;
                        END IF;

              ELSIF i = 6 THEN --  usage of equipment
                IF p_equip_usage_code IS NOT NULL THEN
                  -- IF p_equip_usage_code is null then l_ufcdefs_tbl will have more than 1 ufcs with
                                  -- only NULL values for equip_usage_code. So no need to filter further, move on to next determinant
                                  -- When system is processing a determinant, there will always be more than one selected ufcS
                                  -- This is because, at the end of processing each determinant, we check the selected count
                                  -- If selected count = 1 then we do not process next determinant and exit
                  IF l_ufcdefs_tbl(l_ufcdefs_selected_tbl(k)).select_yn = 'Y' THEN -- if still selected
                    IF l_ufcdefs_tbl(l_ufcdefs_selected_tbl(k)).equip_usage_code IS NULL THEN
                                  l_det_null_tbl(j) := l_ufcdefs_selected_tbl(k);
                                  j := j + 1;
                                ELSE
                                  det_match_cnt := det_match_cnt + 1;
                                  l_selected_ufc_pos := l_ufcdefs_selected_tbl(k);
                                  -- l_selected_ufc_pos will be used as the index of the selected ufc,
                                      -- when only one UFC is left
                                END IF;
                      END IF;

                          IF k = ufc_set_count THEN  -- last record
                                IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
                                                                              'det_match_cnt '||det_match_cnt||' l_det_null_tbl.count '||l_det_null_tbl.count);
                                END IF;

                                IF det_match_cnt = selected_count THEN --k THEN
                                  NULL; -- all records have matching values, do nothing
                                ELSIF det_match_cnt = 0  THEN -- ALL records have NULL try_id
                                  NULL; -- keep all records selected. Don't exclude yet.
                                ELSIF det_match_cnt = 1 THEN
                                  selected_count := 1;
                                ELSE -- more than one but less than total selected  records have matching values
                                  FOR p IN l_det_null_tbl.FIRST .. l_det_null_tbl.LAST LOOP
                                    l_ufcdefs_tbl(l_det_null_tbl(p)).select_yn := 'N';
                                    selected_count := selected_count - 1;
                                  END LOOP;
                                END IF;
                          END IF;
                        END IF;

              ELSIF i = 7 THEN -- vendor location
                IF p_vendor_site_id IS NOT NULL THEN
                  -- IF p_vendor_site_id is null then l_ufcdefs_tbl will have more than 1 ufcs with
                                  -- only NULL values for vendor_site_id. So no need to filter further, move on to next determinant
                                  -- When system is processing a determinant, there will always be more than one selected ufcS
                                  -- This is because, at the end of processing each determinant, we check the selected count
                                  -- If selected count = 1 then we do not process next determinant and exit
                  IF l_ufcdefs_tbl(l_ufcdefs_selected_tbl(k)).select_yn = 'Y' THEN -- if still selected
                    IF l_ufcdefs_tbl(l_ufcdefs_selected_tbl(k)).vendor_site_id IS NULL THEN
                                  l_det_null_tbl(j) := l_ufcdefs_selected_tbl(k);
                                  j := j + 1;
                                ELSE
                                  det_match_cnt := det_match_cnt + 1;
                                  l_selected_ufc_pos := l_ufcdefs_selected_tbl(k);
                                  -- l_selected_ufc_pos will be used as the index of the selected ufc,
                                      -- when only one UFC is left
                                END IF;
                      END IF;

                          IF k = ufc_set_count THEN  -- last record
                                IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
                                                                              'det_match_cnt '||det_match_cnt||' l_det_null_tbl.count '||l_det_null_tbl.count);
                                END IF;

                                IF det_match_cnt = selected_count THEN --k THEN
                                  NULL; -- all records have matching values, do nothing
                                ELSIF det_match_cnt = 0  THEN -- ALL records have NULL try_id
                                  NULL; -- keep all records selected. Don't exclude yet.
                                ELSIF det_match_cnt = 1 THEN
                                  selected_count := 1;
                                ELSE -- more than one but less than total selected  records have matching values
                                  FOR p IN l_det_null_tbl.FIRST .. l_det_null_tbl.LAST LOOP
                                    l_ufcdefs_tbl(l_det_null_tbl(p)).select_yn := 'N';
                                    selected_count := selected_count - 1;
                                  END LOOP;
                                END IF;
                          END IF;
                        END IF;

              ELSIF i = 8 THEN -- age of equipment
                IF p_age_of_equip IS NOT NULL THEN
                  -- IF p_age_of_equip is null then l_ufcdefs_tbl will have more than 1 ufcs with
                                  -- only NULL values for age_of_equip. So no need to filter further, move on to next determinant
                                  -- When system is processing a determinant, there will always be more than one selected ufcS
                                  -- This is because, at the end of processing each determinant, we check the selected count
                                  -- If selected count = 1 then we do not process next determinant and exit
                  IF l_ufcdefs_tbl(l_ufcdefs_selected_tbl(k)).select_yn = 'Y' THEN -- if still selected
                        IF  (l_ufcdefs_tbl(l_ufcdefs_selected_tbl(k)).age_of_equip_from IS NULL AND
                                                 l_ufcdefs_tbl(l_ufcdefs_selected_tbl(k)).age_of_equip_to IS NULL)  THEN
                                  l_det_null_tbl(j) := l_ufcdefs_selected_tbl(k);
                                  j := j + 1;
                                ELSE
                                  det_match_cnt := det_match_cnt + 1;
                                  l_selected_ufc_pos := l_ufcdefs_selected_tbl(k);
                                  -- l_selected_ufc_pos will be used as the index of the selected ufc,
                                      -- when only one UFC is left
                                END IF;
                      END IF;

                          IF k = ufc_set_count THEN  -- last record
                                IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
                                                                              'det_match_cnt '||det_match_cnt||' l_det_null_tbl.count '||l_det_null_tbl.count);
                                END IF;

                                IF det_match_cnt = selected_count THEN --k THEN
                                  NULL; -- all records have matching values, do nothing
                                ELSIF det_match_cnt = 0  THEN -- ALL records have NULL try_id
                                  NULL; -- keep all records selected. Don't exclude yet.
                                ELSIF det_match_cnt = 1 THEN
                                  selected_count := 1;
                                ELSE -- more than one but less than total selected  records have matching values
                                  FOR p IN l_det_null_tbl.FIRST .. l_det_null_tbl.LAST LOOP
                                    l_ufcdefs_tbl(l_det_null_tbl(p)).select_yn := 'N';
                                    selected_count := selected_count - 1;
                                  END LOOP;
                                END IF;
                          END IF;
                        END IF;

              ELSIF i = 9 THEN -- financial product
                IF p_fin_product_id IS NOT NULL THEN
                  -- IF p_fin_product_id is null then l_ufcdefs_tbl will have more than 1 ufcs with
                                  -- only NULL values for fin_product_id. So no need to filter further, move on to next determinant
                                  -- When system is processing a determinant, there will always be more than one selected ufcS
                                  -- This is because, at the end of processing each determinant, we check the selected count
                                  -- If selected count = 1 then we do not process next determinant and exit
                  IF l_ufcdefs_tbl(l_ufcdefs_selected_tbl(k)).select_yn = 'Y' THEN -- if still selected
                    IF l_ufcdefs_tbl(l_ufcdefs_selected_tbl(k)).pdt_id IS NULL THEN
                                  l_det_null_tbl(j) := l_ufcdefs_selected_tbl(k);
                                  j := j + 1;
                                ELSE
                                  det_match_cnt := det_match_cnt + 1;
                                  l_selected_ufc_pos := l_ufcdefs_selected_tbl(k);
                                  -- l_selected_ufc_pos will be used as the index of the selected ufc,
                                      -- when only one UFC is left
                                END IF;
                      END IF;

                          IF k = ufc_set_count THEN  -- last record
                                IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
                                                                              'det_match_cnt '||det_match_cnt||' l_det_null_tbl.count '||l_det_null_tbl.count);
                                END IF;

                                IF det_match_cnt = selected_count THEN --k THEN
                                  NULL; -- all records have matching values, do nothing
                                ELSIF det_match_cnt = 0  THEN -- ALL records have NULL try_id
                                  NULL; -- keep all records selected. Don't exclude yet.
                                ELSIF det_match_cnt = 1 THEN
                                  selected_count := 1;
                                ELSE -- more than one but less than total selected  records have matching values
                                  FOR p IN l_det_null_tbl.FIRST .. l_det_null_tbl.LAST LOOP
                                    l_ufcdefs_tbl(l_det_null_tbl(p)).select_yn := 'N';
                                    selected_count := selected_count - 1;
                                  END LOOP;
                                END IF;
                          END IF;
                        END IF;

              ELSIF i = 10 THEN -- interest disclosed
                IF p_int_disclosed_code = 'Y' THEN
                  -- IF p_int_disclosed_code is 'Y' then l_ufcdefs_tbl will have more than 1 ufcs with
                                  -- only NULL values for int_disclosed_code. So no need to filter further, move on to next determinant
                                  -- When system is processing a determinant, there will always be more than one selected ufcS
                                  -- This is because, at the end of processing each determinant, we check the selected count
                                  -- If selected count = 1 then we do not process next determinant and exit
                  IF l_ufcdefs_tbl(l_ufcdefs_selected_tbl(k)).select_yn = 'Y' THEN -- if still selected
                    IF l_ufcdefs_tbl(l_ufcdefs_selected_tbl(k)).int_disclosed_code = 'N' THEN
                                  l_det_null_tbl(j) := l_ufcdefs_selected_tbl(k);
                                  j := j + 1;
                                ELSE
                                  det_match_cnt := det_match_cnt + 1;
                                  l_selected_ufc_pos := l_ufcdefs_selected_tbl(k);
                                  -- l_selected_ufc_pos will be used as the index of the selected ufc,
                                      -- when only one UFC is left
                                END IF;
                      END IF;

                          IF k = ufc_set_count THEN  -- last record
                                IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
                                                                              'det_match_cnt '||det_match_cnt||' l_det_null_tbl.count '||l_det_null_tbl.count);
                                END IF;

                                IF det_match_cnt = selected_count THEN --k THEN
                                  NULL; -- all records have matching values, do nothing
                                ELSIF det_match_cnt = 0  THEN -- ALL records have NULL try_id
                                  NULL; -- keep all records selected. Don't exclude yet.
                                ELSIF det_match_cnt = 1 THEN
                                  selected_count := 1;
                                ELSE -- more than one but less than total selected  records have matching values
                                  FOR p IN l_det_null_tbl.FIRST .. l_det_null_tbl.LAST LOOP
                                    l_ufcdefs_tbl(l_det_null_tbl(p)).select_yn := 'N';
                                    selected_count := selected_count - 1;
                                  END LOOP;
                                END IF;
                          END IF;
                        END IF;

              ELSIF i = 11 THEN -- transfer of title
                IF p_title_trnsfr_code = 'Y' THEN
                  -- IF p_title_trnsfr_code is 'Y' then l_ufcdefs_tbl will have more than 1 ufcs with
                                  -- only NULL values for title_trnsfr_code. So no need to filter further, move on to next determinant
                                  -- When system is processing a determinant, there will always be more than one selected ufcS
                                  -- This is because, at the end of processing each determinant, we check the selected count
                                  -- If selected count = 1 then we do not process next determinant and exit
                  IF l_ufcdefs_tbl(l_ufcdefs_selected_tbl(k)).select_yn = 'Y' THEN -- if still selected
                    IF l_ufcdefs_tbl(l_ufcdefs_selected_tbl(k)).title_trnsfr_code = 'N' THEN
                                  l_det_null_tbl(j) := l_ufcdefs_selected_tbl(k);
                                  j := j + 1;
                                ELSE
                                  det_match_cnt := det_match_cnt + 1;
                                  l_selected_ufc_pos := l_ufcdefs_selected_tbl(k);
                                  -- l_selected_ufc_pos will be used as the index of the selected ufc,
                                      -- when only one UFC is left
                                END IF;
                      END IF;

                          IF k = ufc_set_count THEN  -- last record
                                IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
                                                                              'det_match_cnt '||det_match_cnt||' l_det_null_tbl.count '||l_det_null_tbl.count);
                                END IF;

                                IF det_match_cnt = selected_count THEN --k THEN
                                  NULL; -- all records have matching values, do nothing
                                ELSIF det_match_cnt = 0  THEN -- ALL records have NULL try_id
                                  NULL; -- keep all records selected. Don't exclude yet.
                                ELSIF det_match_cnt = 1 THEN
                                  selected_count := 1;
                                ELSE -- more than one but less than total selected  records have matching values
                                  FOR p IN l_det_null_tbl.FIRST .. l_det_null_tbl.LAST LOOP
                                    l_ufcdefs_tbl(l_det_null_tbl(p)).select_yn := 'N';
                                    selected_count := selected_count - 1;
                                  END LOOP;
                                END IF;
                          END IF;
                        END IF;

              ELSIF i = 12 THEN -- sale and lease back
                IF p_sale_lease_back_code = 'Y' THEN
                  -- IF p_sale_lease_back_code is 'Y' then l_ufcdefs_tbl will have more than 1 ufcs with
                                  -- only NULL values for sale_lease_back_code. So no need to filter further, move on to next determinant
                                  -- When system is processing a determinant, there will always be more than one selected ufcS
                                  -- This is because, at the end of processing each determinant, we check the selected count
                                  -- If selected count = 1 then we do not process next determinant and exit
                  IF l_ufcdefs_tbl(l_ufcdefs_selected_tbl(k)).select_yn = 'Y' THEN -- if still selected
                    IF l_ufcdefs_tbl(l_ufcdefs_selected_tbl(k)).sale_lease_back_code = 'N' THEN
                                  l_det_null_tbl(j) := l_ufcdefs_selected_tbl(k);
                                  j := j + 1;
                                ELSE
                                  det_match_cnt := det_match_cnt + 1;
                                  l_selected_ufc_pos := l_ufcdefs_selected_tbl(k);
                                  -- l_selected_ufc_pos will be used as the index of the selected ufc,
                                      -- when only one UFC is left
                                END IF;
                      END IF;

                          IF k = ufc_set_count THEN  -- last record
                                IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
                                                                              'det_match_cnt '||det_match_cnt||' l_det_null_tbl.count '||l_det_null_tbl.count);
                                END IF;

                                IF det_match_cnt = selected_count THEN --k THEN
                                  NULL; -- all records have matching values, do nothing
                                ELSIF det_match_cnt = 0  THEN -- ALL records have NULL try_id
                                  NULL; -- keep all records selected. Don't exclude yet.
                                ELSIF det_match_cnt = 1 THEN
                                  selected_count := 1;
                                ELSE -- more than one but less than total selected  records have matching values
                                  FOR p IN l_det_null_tbl.FIRST .. l_det_null_tbl.LAST LOOP
                                    l_ufcdefs_tbl(l_det_null_tbl(p)).select_yn := 'N';
                                    selected_count := selected_count - 1;
                                  END LOOP;
                                END IF;
                          END IF;
                        END IF;

              ELSIF i = 13 THEN -- purchase of lease
                IF p_lease_purchased_code = 'Y' THEN
                  -- IF p_lease_purchased_code is 'Y' then l_ufcdefs_tbl will have more than 1 ufcs with
                                  -- only NULL values for lease_purchased_code. So no need to filter further, move on to next determinant
                                  -- When system is processing a determinant, there will always be more than one selected ufcS
                                  -- This is because, at the end of processing each determinant, we check the selected count
                                  -- If selected count = 1 then we do not process next determinant and exit
                  IF l_ufcdefs_tbl(l_ufcdefs_selected_tbl(k)).select_yn = 'Y' THEN -- if still selected
                    IF l_ufcdefs_tbl(l_ufcdefs_selected_tbl(k)).lease_purchased_code = 'N' THEN
                                  l_det_null_tbl(j) := l_ufcdefs_selected_tbl(k);
                                  j := j + 1;
                                ELSE
                                  det_match_cnt := det_match_cnt + 1;
                                  l_selected_ufc_pos := l_ufcdefs_selected_tbl(k);
                                  -- l_selected_ufc_pos will be used as the index of the selected ufc,
                                      -- when only one UFC is left
                                END IF;
                      END IF;

                          IF k = ufc_set_count THEN  -- last record
                                IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
                                                                              'det_match_cnt '||det_match_cnt||' l_det_null_tbl.count '||l_det_null_tbl.count);
                                END IF;

                                IF det_match_cnt = selected_count THEN --k THEN
                                  NULL; -- all records have matching values, do nothing
                                ELSIF det_match_cnt = 0  THEN -- ALL records have NULL try_id
                                  NULL; -- keep all records selected. Don't exclude yet.
                                ELSIF det_match_cnt = 1 THEN
                                  selected_count := 1;
                                ELSE -- more than one but less than total selected  records have matching values
                                  FOR p IN l_det_null_tbl.FIRST .. l_det_null_tbl.LAST LOOP
                                    l_ufcdefs_tbl(l_det_null_tbl(p)).select_yn := 'N';
                                    selected_count := selected_count - 1;
                                  END LOOP;
                                END IF;
                          END IF;
                        END IF;

              ELSIF i = 14 THEN -- tax country
                IF p_tax_country_code IS NOT NULL THEN
                  -- IF p_tax_country_code is null then l_ufcdefs_tbl will have more than 1 ufcs with
                                  -- only NULL values for tax_country_code. So no need to filter further, move on to next determinant
                                  -- When system is processing a determinant, there will always be more than one selected ufcS
                                  -- This is because, at the end of processing each determinant, we check the selected count
                                  -- If selected count = 1 then we do not process next determinant and exit
                  IF l_ufcdefs_tbl(l_ufcdefs_selected_tbl(k)).select_yn = 'Y' THEN -- if still selected
                    IF l_ufcdefs_tbl(l_ufcdefs_selected_tbl(k)).tax_country_code IS NULL THEN
                                  l_det_null_tbl(j) := l_ufcdefs_selected_tbl(k);
                                  j := j + 1;
                                ELSE
                                  det_match_cnt := det_match_cnt + 1;
                                  l_selected_ufc_pos := l_ufcdefs_selected_tbl(k);
                                  -- l_selected_ufc_pos will be used as the index of the selected ufc,
                                      -- when only one UFC is left
                                END IF;
                      END IF;

                          IF k = ufc_set_count THEN  -- last record
                                IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
                                                                              'det_match_cnt '||det_match_cnt||' l_det_null_tbl.count '||l_det_null_tbl.count);
                                END IF;

                                IF det_match_cnt = selected_count THEN --k THEN
                                  NULL; -- all records have matching values, do nothing
                                ELSIF det_match_cnt = 0  THEN -- ALL records have NULL try_id
                                  NULL; -- keep all records selected. Don't exclude yet.
                                ELSIF det_match_cnt = 1 THEN
                                  selected_count := 1;
                                ELSE -- more than one but less than total selected  records have matching values
                                  FOR p IN l_det_null_tbl.FIRST .. l_det_null_tbl.LAST LOOP
                                    l_ufcdefs_tbl(l_det_null_tbl(p)).select_yn := 'N';
                                    selected_count := selected_count - 1;
                                  END LOOP;
                                END IF;
                          END IF;
                        END IF;
              END IF;
                END LOOP;
          ELSIF selected_count = 1 THEN
                EXIT;
          END IF;
        END LOOP; -- determinant loop

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
                                                    'selected_count outside 2nd loop '||selected_count);
        END IF;

        IF selected_count = 1 THEN
                  l_ufc_code := l_ufcdefs_tbl(l_selected_ufc_pos).ufc_code;
                ELSIF selected_count > 1 THEN  -- still more than one ufcs are selected
          l_ufc_code := NULL;
        END IF;

      ELSIF ufc_set_count = 0 THEN
        l_ufc_code := NULL;
      END IF;
    END IF;  -- MAIN IF Ends

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code.',
                          'l_ufc_code '||l_ufc_code);
    END IF;

    -- UFC can be NULL
    x_ufc_code := l_ufc_code;

  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN

      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
      END IF;

      IF l_ufcdef_csr%ISOPEN THEN
        CLOSE l_ufcdef_csr;
      END IF;

      x_return_status := OKL_API.G_RET_STS_ERROR;
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN

      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_UNEXPECTED_ERROR');
      END IF;

      IF l_ufcdef_csr%ISOPEN THEN
        CLOSE l_ufcdef_csr;
      END IF;

      x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;

    WHEN OTHERS THEN
      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.get_ufc_code ',
                  'EXCEPTION :'||sqlerrm);
      END IF;

          IF l_ufcdef_csr%ISOPEN THEN
        CLOSE l_ufcdef_csr;
      END IF;


      x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
      -- unexpected error
      OKL_API.set_message(p_app_name      => g_app_name,
                         p_msg_name      => g_unexpected_error,
                         p_token1        => g_sqlcode_token,
                         p_token1_value  => sqlcode,
                         p_token2        => g_sqlerrm_token,
                         p_token2_value  => sqlerrm);

  END get_ufc_code;

/*========================================================================
 | PRIVATE PROCEDURE populate_tax_info
 |
 | DESCRIPTION
 |    This procedure derives the tax sources and tax details to populate ZX tables
 |
 | CALLED FROM
 |     process_booking_upfront_tax
 |     process_quote_tax
 |     process_asset_loc_tax
 |     process_quoting_upfront_tax
 |
 |
 | CALLS PROCEDURES/FUNCTIONS
 |     get_ufc_code()
 |     okl_am_util_pvt.get_formula_value()
 |
 | PARAMETERS
 |      p_prch_opt_det                  -- Purchase Option
 |      p_fin_prod_id_det               -- Financial product
 |      p_int_disclosed_det             -- Interest Disclosed
 |      -- asset level begin
 |      p_TITLE_TRNSFR_CODE             -- Transfer of Title
 |      p_SALE_LEASE_BACK_CODE  -- Sale and Lease Back
 |      p_LEASE_PURCHASED_CODE  -- Purchase of Lease
 |      p_EQUIP_USAGE_CODE              -- Usage Of Equipment
 |      p_VENDOR_SITE_ID                -- Vendor Site ID
 |      p_AGE_OF_EQUIP                  -- Age of Equipment
 |      p_kle_id                                -- Kle ID
 |      p_asset_number                  -- Asset Number
 |      p_ship_to_site_use_id   -- Ship to Site Use ID
 |      p_inventory_item_id             -- Inventory Item ID
 |     --asset level end
 |      p_sty_id                                -- Stream Type ID
 |      p_taxable_basis                 -- Taxable Basis Amount
 |      p_tax_call_cnt                  -- counter
 |      px_tax_sources_tbl              -- table used to store tax source transactions
 |      p_khr_id                                -- contract ID
 |      p_source_trx_id                 -- Source Trx ID
 |      p_source_table                  -- Source Table
 |      p_reported_yn                   -- reportable y/n
 |      p_fma_id                                -- formula ID
 |      p_formula_name                  -- formula name
 |      p_bill_to_siteuseid             -- Bill to site use id
 |      lx_trx_rec_tbl                  -- table used to store input data for the TAx Engine call
 |      p_k_start_date                  -- contract start date
 |      p_currency_code                 -- Currency Code
 |      p_cust_trx_type_id              -- AR customer trx type
 |      p_minimum_accountable_unit      -- Minimum accountable unit for currency
 |      p_precision                             -- currency precision
 |
 | KNOWN ISSUES
 |
 | NOTES
 |
 |
 | MODIFICATION HISTORY
 | Date           Author        Description of Changes
 | 08-APR-05      SECHAWLA      Created
 | 05-DEC-05      SECHAWLA      Use a different index p_trx_rec_tbl_cnt
 |                              to populate p_trx_rec_tbl. This happens
 |                              only for the 'Rebook' transaction
 | 04-Jan-08      SECHAWLA      6651621 Added 3 additional parameters to taxable basis override formula -
 |                              'LINE_NAME', 'DEFAULT_TAXABLE_BASIS', 'SOURCE_TRX_NAME'
 | 15-Nov-09      sechawla      9121244 wrong variable was being used to send tax classification code to ebtax
 |                              because of which fresh tax call, right after the upgrade, using migrated AR setups
 |                              was not calculating any tax.
 *=======================================================================*/

  PROCEDURE populate_tax_info(
    p_api_version                       IN  NUMBER,
    p_init_msg_list                     IN  VARCHAR2 DEFAULT OKC_API.G_FALSE,
    x_return_status                     OUT NOCOPY VARCHAR2,
    x_msg_count                         OUT NOCOPY NUMBER,
    x_msg_data                          OUT NOCOPY VARCHAR2,
    p_prch_opt_det                                      IN  VARCHAR2,
    p_fin_prod_id_det                           IN  NUMBER,
    p_int_disclosed_det                         IN  VARCHAR2,
    p_title_trnsfr_code                     IN  VARCHAR2,
    p_sale_lease_back_code                  IN  VARCHAR2,
    p_lease_purchased_code                  IN  VARCHAR2,
    p_equip_usage_code                      IN  VARCHAR2,
    p_vendor_site_id                        IN  NUMBER,
    p_age_of_equip                                      IN  NUMBER,
    p_source_trx_name               IN  VARCHAR2,
    p_cust_trx_type_id              IN  NUMBER,
    p_book_class_code               IN  VARCHAR2,
    p_tax_call_cnt                                      IN NUMBER,
    p_line_params_tbl_cnt           IN NUMBER DEFAULT NULL,
    p_fma_id                                            IN NUMBER,
    p_formula_name                                      IN VARCHAR2,
    p_minimum_accountable_unit          IN NUMBER,
    p_precision                                         IN NUMBER,
    p_sales_quote_id                IN NUMBER, -- Used only for Sales Quote tax call
    p_event_type_code               IN VARCHAR2,
    p_ledger_id                     IN NUMBER,
    p_line_level_action             IN VARCHAR2,
    p_tax_src_params_rec                    IN tax_src_params_rec_type,
    p_quote_flag                    IN VARCHAR2,
    p_rounding_ship_to_party_id     IN NUMBER,
    p_rounding_bill_to_party_id     IN NUMBER,
    p_line_amt_includes_tax_flag    IN VARCHAR2,
    p_term_quote_type_code          IN VARCHAR2,
    p_term_quote_reason_code        IN VARCHAR2,
    p_alc_ser_def_code              IN VARCHAR2 DEFAULT NULL,
    px_tax_sources_tbl                  IN OUT NOCOPY tax_sources_tbl_type,
    px_line_params_tbl                  IN OUT NOCOPY line_params_tbl_type) IS

    lx_tbc_code                                         VARCHAR2(30);
    lx_ufc_code                     VARCHAR2(30);
    lx_pc_code                      VARCHAR2(30);
    lx_tax_classification_code      VARCHAR2(50);
    l_assessable_value                          NUMBER;
    l_line_amt                                          NUMBER;
    l_add_params                                        okl_execute_formula_pub.ctxt_val_tbl_type;
    l_set_of_books_id               NUMBER;
    l_alc_fetch_code                BOOLEAN := FALSE;

    lx_tax_valid_code               VARCHAR2(1);

    CURSOR c_get_set_of_books_id(cp_org_id IN NUMBER) IS
    SELECT set_of_books_id
    FROM   ar_system_parameters_all
    WHERE  org_id = cp_org_id;

    l_next_index                    NUMBER;

  BEGIN

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info','Begin(+)');
    END IF;

    --Print Input Variables
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info.',
              'p_init_msg_list :'||p_init_msg_list);
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info.',
              'p_prch_opt_det :'||p_prch_opt_det);
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info.',
              'p_prch_opt_det :'||p_prch_opt_det);
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info.',
              'p_fin_prod_id_det :'||p_fin_prod_id_det);
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info.',
              'p_int_disclosed_det :'||p_int_disclosed_det);
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info.',
              'p_title_trnsfr_code :'||p_title_trnsfr_code);
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info.',
              'p_sale_lease_back_code :'||p_sale_lease_back_code);
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info.',
              'p_lease_purchased_code :'||p_lease_purchased_code);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info.',
              'p_equip_usage_code :'||p_equip_usage_code);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info.',
              'p_vendor_site_id :'||p_vendor_site_id);
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info.',
              'p_age_of_equip :'||p_age_of_equip);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info.',
              'p_tax_call_cnt :'||p_tax_call_cnt);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info.',
              'px_tax_sources_tbl.count :'||px_tax_sources_tbl.count);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info.',
              'p_fma_id :'||p_fma_id);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info.',
              'p_formula_name :'||p_formula_name);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info.',
              'p_cust_trx_type_id :'||p_cust_trx_type_id);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info.',
              'p_minimum_accountable_unit :'||p_minimum_accountable_unit);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info.',
              'p_precision :'||p_precision);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info.',
              'p_sales_quote_id :'||p_sales_quote_id);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info.',
              'p_event_type_code :'||p_event_type_code);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info.',
              'p_ledger_id :'||p_ledger_id);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info.',
              'p_quote_flag :'||p_quote_flag);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info.',
              'p_line_level_action :'||p_line_level_action);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info.',
              'p_rounding_ship_to_party_id :'||p_rounding_ship_to_party_id);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info.',
              'p_rounding_bill_to_party_id :'||p_rounding_bill_to_party_id);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info.',
              'p_line_amt_includes_tax_flag :'||p_line_amt_includes_tax_flag);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info.',
              'p_line_amt_includes_tax_flag :'||p_line_amt_includes_tax_flag);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info.',
              'p_line_amt_includes_tax_flag :'||p_line_amt_includes_tax_flag);
    END IF;

    IF (p_source_trx_name = 'Asset Relocation' AND
        p_tax_src_params_rec.alc_serialized_yn IN ('Y', 'L') AND
        p_alc_ser_def_code IN ('A', 'F')) THEN
      l_alc_fetch_code := TRUE;
    ELSIF (p_source_trx_name = 'Asset Relocation' AND
          (p_tax_src_params_rec.alc_serialized_yn IS NULL OR
           p_tax_src_params_rec.alc_serialized_yn = 'N')) THEN
      l_alc_fetch_code := TRUE;
    END IF;

    IF (l_alc_fetch_code OR p_source_trx_name <> 'Asset Relocation') THEN
    -- This processing will be done only once for Asset Relocation transaction for
    -- the Serialized/Non-Serialized asset. It will be processed as needed for
    -- other transactions
      -- Get TBC code
          get_tbc_code(p_api_version                 => p_api_version,
                           p_init_msg_list               => OKC_API.G_FALSE,
                           x_return_status               => x_return_status,
                           x_msg_count                   => x_msg_count,
                   x_msg_data                    => x_msg_data,
                   p_sty_id                                          => p_tax_src_params_rec.sty_id,  -- used if pymnts exist
                           p_try_id                                          => p_tax_src_params_rec.try_id,
                   p_book_class_code             => p_book_class_code,
                   p_tax_country_code            => p_tax_src_params_rec.default_taxation_country,
                   x_tbc_code                    => lx_tbc_code);

      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

      -- Validate TBC Code
      IF lx_tbc_code IS NOT NULL THEN
        validate_tax_code(
          p_api_version     => p_api_version,
          p_init_msg_list   => p_init_msg_list,
          x_return_status   => x_return_status,
          x_msg_count       => x_msg_count,
          x_msg_data        => x_msg_data,
          p_trx_date        => p_tax_src_params_rec.trx_date,
          p_tbc_code        => lx_tbc_code,
          x_valid_code      => lx_tax_valid_code); -- 'S' --> Success, 'F' --> Failure

        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;
      END IF;

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info.',
                  'lx_tbc_code'||lx_tbc_code);
      END IF;

      -- Get the first level determinant for TBC basing on transaction, if the value is null
      IF lx_tbc_code IS NULL OR lx_tax_valid_code = 'F' THEN
        IF p_source_trx_name IN ('Tax Schedule', 'Estimated Billing') THEN
          lx_tbc_code := 'SALES_TRANSACTION';
        ELSE
          lx_tbc_code := 'BOOKING';
        END IF;
      END IF;

      IF (p_source_trx_name = 'Asset Relocation' AND
          p_tax_src_params_rec.alc_serialized_yn = 'Y' AND
          p_alc_ser_def_code = 'F') THEN
        G_TBC_CODE := lx_tbc_code;
      END IF;

      -- Get PC code
      get_pc_code(p_api_version                 => p_api_version,
                          p_init_msg_list               => OKC_API.G_FALSE,
                          x_return_status               => x_return_status,
                          x_msg_count                   => x_msg_count,
                  x_msg_data                    => x_msg_data,
                  p_sty_id                                          => p_tax_src_params_rec.sty_id,  -- used if pymnts exist
                  p_purchase_option_code        => p_prch_opt_det,
                  p_int_disclosed_code          => p_int_disclosed_det,
                  p_title_trnsfr_code           => p_title_trnsfr_code,
                  p_sale_lease_back_code        => p_sale_lease_back_code,
                  p_lease_purchased_code        => p_lease_purchased_code,
                  p_tax_country_code            => p_tax_src_params_rec.default_taxation_country,
                  x_pc_code                     => lx_pc_code);

      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

      -- Validate PC Code
      IF lx_pc_code IS NOT NULL THEN
        validate_tax_code(
            p_api_version     => p_api_version,
            p_init_msg_list   => p_init_msg_list,
            x_return_status   => x_return_status,
            x_msg_count       => x_msg_count,
            x_msg_data        => x_msg_data,
            p_trx_date        => p_tax_src_params_rec.trx_date,
            p_pc_code         => lx_pc_code,
            x_valid_code      => lx_tax_valid_code); -- 'S' --> Success, 'F' --> Failure

        IF (lx_tax_valid_code = 'F') THEN
          lx_pc_code := null;
        END IF;

        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;
      END IF;

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info.',
                  'lx_pc_code'||lx_pc_code);
      END IF;

      IF (p_source_trx_name = 'Asset Relocation' AND
          p_tax_src_params_rec.alc_serialized_yn = 'Y' AND
          p_alc_ser_def_code = 'F') THEN
        G_PC_CODE := lx_pc_code;
      END IF;

      -- contract level call begin
      -- Get UFC code
          get_ufc_code(p_api_version                 => p_api_version,
                           p_init_msg_list               => OKC_API.G_FALSE,
                           x_return_status               => x_return_status,
                           x_msg_count                   => x_msg_count,
                   x_msg_data                    => x_msg_data,
                           p_purchase_option             => p_prch_opt_det,
                                   p_fin_product_id                          => p_fin_prod_id_det,
                           p_try_id                                          => p_tax_src_params_rec.try_id,
                           p_sty_id                                          => p_tax_src_params_rec.sty_id,  -- used if pymnts exist
                           p_int_disclosed_code              => p_int_disclosed_det,
                           p_title_trnsfr_code               => p_title_trnsfr_code, -- asset level
                           p_sale_lease_back_code                => p_sale_lease_back_code, -- asset level
                           p_lease_purchased_code                => p_lease_purchased_code, -- asset level
                           p_equip_usage_code                    => p_equip_usage_code ,-- asset level
                           p_vendor_site_id                          => p_vendor_site_id, -- asset level
                           p_age_of_equip                                => p_age_of_equip, -- asset level
                   p_term_quote_type_code        => p_term_quote_type_code,
                   p_term_quote_reason_code      => p_term_quote_reason_code,
                   p_tax_country_code            => p_tax_src_params_rec.default_taxation_country,
                           x_ufc_code                    => lx_ufc_code);

      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

      -- Validate UFC Code
      IF lx_ufc_code IS NOT NULL THEN
        validate_tax_code(
            p_api_version     => p_api_version,
            p_init_msg_list   => p_init_msg_list,
            x_return_status   => x_return_status,
            x_msg_count       => x_msg_count,
            x_msg_data        => x_msg_data,
            p_trx_date        => p_tax_src_params_rec.trx_date,
            p_ufc_code        => lx_ufc_code,
            x_valid_code      => lx_tax_valid_code); -- 'S' --> Success, 'F' --> Failure

        IF (lx_tax_valid_code = 'F') THEN
          lx_ufc_code := null;
        END IF;

        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;
      END IF;

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info.',
                  'lx_ufc_code'||lx_ufc_code);
      END IF;

      IF (p_source_trx_name = 'Asset Relocation' AND
          p_tax_src_params_rec.alc_serialized_yn = 'Y' AND
          p_alc_ser_def_code = 'F') THEN
        G_UFC_CODE := lx_ufc_code;
      END IF;

    END IF;

        -- Check if taxable basis override applies
        IF p_fma_id IS NOT NULL THEN
          -- execute tax basis override formula, pass tax determinants
          l_add_params(1).name  := 'PURCHASE_OPTION';
          l_add_params(1).value := p_prch_opt_det;

          l_add_params(2).name      := 'FINANCIAL_PRODUCT_ID';
          l_add_params(2).value := p_fin_prod_id_det;

          l_add_params(3).name  := 'TRX_TYPE_ID';
          l_add_params(3).value := p_tax_src_params_rec.try_id;

          l_add_params(4).name  := 'STREAM_TYPE_ID';
          l_add_params(4).value := p_tax_src_params_rec.sty_id;

          l_add_params(5).name  := 'INTEREST_DISCLOSED';
          l_add_params(5).value := p_int_disclosed_det;

          l_add_params(6).name  := 'TRANSFER_OF_TITLE';
          l_add_params(6).value := p_title_trnsfr_code;

          l_add_params(7).name  := 'SALE_LEASE_BACK';
          l_add_params(7).value := p_sale_lease_back_code;

          l_add_params(8).name  := 'PURCHASE_OF_LEASE';
          l_add_params(8).value := p_lease_purchased_code;

          l_add_params(9).name  := 'USAGE_OF_EQUIPMENT';
          l_add_params(9).value := p_equip_usage_code;

          l_add_params(10).name := 'VENDOR_SITE_ID';
          l_add_params(10).value := p_vendor_site_id;

          l_add_params(11).name := 'AGE_OF_EQUIPMENT';
          l_add_params(11).value        := p_age_of_equip;

          l_add_params(12).name := 'BOOK_CLASS';
          l_add_params(12).value        := p_book_class_code;

          l_add_params(13).name := 'BILL_TO_PARTY_SITE_ID';
          l_add_params(13).value        := p_tax_src_params_rec.bill_to_party_site_id;

          l_add_params(14).name := 'BILL_TO_LOCATION_ID';
          l_add_params(14).value        := p_tax_src_params_rec.bill_to_location_id;

          l_add_params(15).name := 'BILL_TO_PARTY_ID';
          l_add_params(15).value        := p_tax_src_params_rec.bill_to_party_id;

          l_add_params(16).name := 'SHIP_TO_PARTY_SITE_ID';
          l_add_params(16).value        :=  p_tax_src_params_rec.ship_to_party_site_id;

          l_add_params(17).name := 'SHIP_TO_LOCATION_ID';
          l_add_params(17).value        :=  p_tax_src_params_rec.ship_to_location_id;

          l_add_params(18).name := 'SHIP_TO_PARTY_ID';
          l_add_params(18).value        :=  p_tax_src_params_rec.ship_to_party_id;

          -- Directly Mapped
          l_add_params(19).name := 'BILL_TO_SITE_USE_ID';
          l_add_params(19).value        :=  p_tax_src_params_rec.bill_to_cust_acct_site_use_id;

          l_add_params(20).name := 'INVENTORY_ITEM_ID';
          l_add_params(20).value        := p_tax_src_params_rec.inventory_item_id;

          l_add_params(21).name := 'SHIP_TO_SITE_USE_ID';
          l_add_params(21).value        := p_tax_src_params_rec.ship_to_cust_acct_site_use_id;

          --SECHAWLA 04-Jan-08 6651621 - Added 3 additional parameters - begin
          --'LINE_NAME', 'DEFAULT_TAXABLE_BASIS', 'SOURCE_TRX_NAME'
          l_add_params(22).name := 'LINE_NAME';
          l_add_params(22).value  := p_tax_src_params_rec.line_name;

          l_add_params(23).name := 'SOURCE_TRX_NAME';
          l_add_params(23).value  := p_source_trx_name;

          l_add_params(24).name := 'DEFAULT_TAXABLE_BASIS';
          l_add_params(24).value  := p_tax_src_params_rec.line_amt;
          --SECHAWLA 04-Jan-08 6651621 - Added 3 additional parameters - end

          l_next_index := 25;  --SECHAWLA 04-Jan-08 6651621 - Added

          IF p_sales_quote_id IS NOT NULL THEN
            l_add_params(l_next_index).name   := 'SALES_QUOTE_ID'; --SECHAWLA 04-Jan-08 6651621 Use l_next_index for conditional assignments
            l_add_params(l_next_index).value      := p_sales_quote_id;--SECHAWLA 04-Jan-08 6651621 Use l_next_index for conditional assignments
            l_next_index := l_next_index + 1;
          END IF;

          IF (p_source_trx_name = 'Estimated Billing') THEN
            l_add_params(l_next_index).name   := 'TERM_QUOTE_TYPE_CODE';--SECHAWLA 04-Jan-08 6651621 Use l_next_index for conditional assignments
            l_add_params(l_next_index).value      := p_term_quote_type_code;--SECHAWLA 04-Jan-08 6651621 Use l_next_index for conditional assignments

            l_next_index := l_next_index + 1; --SECHAWLA 04-Jan-08 6651621 - Added

            l_add_params(l_next_index).name   := 'TERM_QUOTE_REASON_CODE';--SECHAWLA 04-Jan-08 6651621 Use l_next_index for conditional assignments
            l_add_params(l_next_index).value      := p_term_quote_reason_code;--SECHAWLA 04-Jan-08 6651621 Use l_next_index for conditional assignments
          END IF;

      okl_am_util_pvt.get_formula_value(
                            p_formula_name           => p_formula_name,
                            p_chr_id                 => p_tax_src_params_rec.khr_id,  -- will be NULL for sales Quote tax call
                            p_cle_id                 => p_tax_src_params_rec.kle_id,  -- will be NULL for sales Quote tax call
                            p_additional_parameters  => l_add_params,
                            x_formula_value          => l_assessable_value,  --OVERRIDEN TAXABLE BASIS
                            x_return_status          => x_return_status);

      IF (x_return_status IN (OKL_API.G_RET_STS_UNEXP_ERROR, OKL_API.G_RET_STS_ERROR)) THEN
        OKL_API.init_msg_list('T');
        OKL_API.set_message(p_app_name      => 'OKL',
                            p_msg_name      => 'OKL_TX_FRM_TXN_ERR',
                            p_token1        => 'FMA_NAME',
                            p_token1_value  => p_formula_name,
                            p_token2        => 'TRX_NAME ',
                                                        p_token2_value  => p_source_trx_name);
         RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info.',
                  'calculated l_assessable_value '||l_assessable_value);
      END IF;
        END IF;

    -- Populate the line_amt in l_assessable_value if null
    IF l_assessable_value IS NULL THEN
      l_assessable_value  := p_tax_src_params_rec.line_amt;
      l_line_amt                  := p_tax_src_params_rec.line_amt;
    ELSE
      l_line_amt                  := l_assessable_value;
    END IF;

    -- Get Set of Books ID
    OPEN c_get_set_of_books_id(cp_org_id  =>  p_tax_src_params_rec.org_id);
    FETCH c_get_set_of_books_id INTO l_set_of_books_id;
    CLOSE c_get_set_of_books_id;

    -- Get the tax classification code
    IF (l_alc_fetch_code OR p_source_trx_name <> 'Asset Relocation') THEN
          IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info.',
                  'Calling  OKL_TAX_INTERFACE_PVT.get_tax_classification_code .. ');
      END IF;

      OKL_TAX_INTERFACE_PVT.get_tax_classification_code (
                      x_return_status                 =>  x_return_status,
                      p_ship_to_site_use_id           =>  p_tax_src_params_rec.ship_to_cust_acct_site_use_id,
                      p_bill_to_site_use_id           =>  p_tax_src_params_rec.bill_to_cust_acct_site_use_id,
                      p_inventory_item_id             =>  p_tax_src_params_rec.inventory_item_id,
                      p_organization_id               =>  p_tax_src_params_rec.org_id,
                      p_set_of_books_id               =>  l_set_of_books_id,
                      p_trx_date                      =>  p_tax_src_params_rec.trx_date,
                      p_trx_type_id                   =>  null,
                      p_entity_code                   =>  G_AR_ENTITY_CODE,
                      p_event_class_code              =>  G_INVOICE_EVENT_CLASS_CODE,
                      p_application_id                =>  G_AR_APPLICATION_ID,
                      p_internal_organization_id      =>  p_tax_src_params_rec.org_id,
                      x_tax_classification_code       =>  lx_tax_classification_code );

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info.',
                  'Return Status '|| x_return_status);
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info.',
                  'lx_tax_classification_code = '|| lx_tax_classification_code);
      END IF;

      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

      IF (p_source_trx_name = 'Asset Relocation' AND
          p_tax_src_params_rec.alc_serialized_yn = 'Y' AND
          p_alc_ser_def_code = 'F') THEN
        G_TAX_CLASS_CODE := lx_tax_classification_code;
      END IF;

    END IF;

    IF (p_source_trx_name = 'Asset Relocation' AND
        p_tax_src_params_rec.alc_serialized_yn IN ('Y', 'L') AND
        p_alc_ser_def_code = 'N') THEN
      lx_ufc_code                := G_UFC_CODE;
      lx_tbc_code                := G_TBC_CODE;
      lx_pc_code                 := G_PC_CODE;
      lx_tax_classification_code := G_TAX_CLASS_CODE;
    END IF;

    -- populate okl_tax_sources pl/sql table
    px_tax_sources_tbl(p_tax_call_cnt).id                                  := get_seq_id;
    px_tax_sources_tbl(p_tax_call_cnt).khr_id                              := p_tax_src_params_rec.khr_id;
    px_tax_sources_tbl(p_tax_call_cnt).kle_id                              := p_tax_src_params_rec.kle_id;
        px_tax_sources_tbl(p_tax_call_cnt).sty_id                              := p_tax_src_params_rec.sty_id;
    px_tax_sources_tbl(p_tax_call_cnt).inventory_item_id                   := p_tax_src_params_rec.inventory_item_id;
    px_tax_sources_tbl(p_tax_call_cnt).legal_entity_id                     := p_tax_src_params_rec.legal_entity_id;
    px_tax_sources_tbl(p_tax_call_cnt).line_amt                            := l_line_amt;
    px_tax_sources_tbl(p_tax_call_cnt).line_name                           := p_tax_src_params_rec.line_name;
    px_tax_sources_tbl(p_tax_call_cnt).line_intended_use                   := p_tax_src_params_rec.line_intended_use;
    px_tax_sources_tbl(p_tax_call_cnt).org_id                              := p_tax_src_params_rec.org_id;
    px_tax_sources_tbl(p_tax_call_cnt).product_type                        := G_DEFAULT_PRODUCT_TYPE;
    px_tax_sources_tbl(p_tax_call_cnt).assessable_value                    := l_assessable_value;
    px_tax_sources_tbl(p_tax_call_cnt).asset_number                        := p_tax_src_params_rec.asset_number;
    px_tax_sources_tbl(p_tax_call_cnt).reported_yn                         := p_tax_src_params_rec.reported_yn;

    px_tax_sources_tbl(p_tax_call_cnt).trx_id                              := p_tax_src_params_rec.trx_id;

    IF (p_source_trx_name = 'Estimated Billing') THEN
      px_tax_sources_tbl(p_tax_call_cnt).trx_line_id                       := p_tax_src_params_rec.trx_line_id;
    ELSE
      px_tax_sources_tbl(p_tax_call_cnt).trx_line_id                       := px_tax_sources_tbl(p_tax_call_cnt).id;
    END IF;

    px_tax_sources_tbl(p_tax_call_cnt).trx_level_type                      := G_TRX_LEVEL_TYPE;
    px_tax_sources_tbl(p_tax_call_cnt).trx_currency_code                   := p_tax_src_params_rec.trx_currency_code;
    px_tax_sources_tbl(p_tax_call_cnt).trx_date                            := p_tax_src_params_rec.trx_date;
    px_tax_sources_tbl(p_tax_call_cnt).try_id                              := p_tax_src_params_rec.try_id;

    px_tax_sources_tbl(p_tax_call_cnt).entity_code      := p_tax_src_params_rec.entity_code;
    px_tax_sources_tbl(p_tax_call_cnt).event_class_code := p_tax_src_params_rec.event_class_code;
    px_tax_sources_tbl(p_tax_call_cnt).application_id   := G_OKL_APPLICATION_ID;
        px_tax_sources_tbl(p_tax_call_cnt).request_id       := null;

        px_tax_sources_tbl(p_tax_call_cnt).program_id             := null;
        px_tax_sources_tbl(p_tax_call_cnt).program_application_id := null;
        px_tax_sources_tbl(p_tax_call_cnt).program_update_date    := null;

        px_tax_sources_tbl(p_tax_call_cnt).attribute_category    := null;
        px_tax_sources_tbl(p_tax_call_cnt).attribute1            := null;
        px_tax_sources_tbl(p_tax_call_cnt).attribute2            := null;
        px_tax_sources_tbl(p_tax_call_cnt).attribute3            := null;
        px_tax_sources_tbl(p_tax_call_cnt).attribute4            := null;
        px_tax_sources_tbl(p_tax_call_cnt).attribute5            := null;
        px_tax_sources_tbl(p_tax_call_cnt).attribute6            := null;
        px_tax_sources_tbl(p_tax_call_cnt).attribute7            := null;
        px_tax_sources_tbl(p_tax_call_cnt).attribute8            := null;
        px_tax_sources_tbl(p_tax_call_cnt).attribute9            := null;
        px_tax_sources_tbl(p_tax_call_cnt).attribute10           := null;
        px_tax_sources_tbl(p_tax_call_cnt).attribute11           := null;
        px_tax_sources_tbl(p_tax_call_cnt).attribute12           := null;
        px_tax_sources_tbl(p_tax_call_cnt).attribute13           := null;
        px_tax_sources_tbl(p_tax_call_cnt).attribute14           := null;
        px_tax_sources_tbl(p_tax_call_cnt).attribute15           := null;
        px_tax_sources_tbl(p_tax_call_cnt).created_by            := G_USER_ID;
        px_tax_sources_tbl(p_tax_call_cnt).creation_date         := SYSDATE;
        px_tax_sources_tbl(p_tax_call_cnt).last_updated_by       := G_USER_ID;
        px_tax_sources_tbl(p_tax_call_cnt).last_update_date      := SYSDATE;
        px_tax_sources_tbl(p_tax_call_cnt).last_update_login     := G_LOGIN_ID;
        px_tax_sources_tbl(p_tax_call_cnt).object_version_number := null;

    px_tax_sources_tbl(p_tax_call_cnt).currency_conversion_date            := p_tax_src_params_rec.currency_conversion_date;
    px_tax_sources_tbl(p_tax_call_cnt).currency_conversion_rate            := p_tax_src_params_rec.currency_conversion_rate;
    px_tax_sources_tbl(p_tax_call_cnt).currency_conversion_type            := p_tax_src_params_rec.currency_conversion_type;

    px_tax_sources_tbl(p_tax_call_cnt).product_fisc_classification         := null;
    px_tax_sources_tbl(p_tax_call_cnt).product_category                    := lx_pc_code;
    px_tax_sources_tbl(p_tax_call_cnt).user_defined_fisc_class             := lx_ufc_code;
    px_tax_sources_tbl(p_tax_call_cnt).tax_classification_code             := lx_tax_classification_code;
    px_tax_sources_tbl(p_tax_call_cnt).tax_reporting_flag                  := p_tax_src_params_rec.tax_reporting_flag;
    px_tax_sources_tbl(p_tax_call_cnt).provnl_tax_determination_date       := null;
    px_tax_sources_tbl(p_tax_call_cnt).default_taxation_country            := p_tax_src_params_rec.default_taxation_country;
    px_tax_sources_tbl(p_tax_call_cnt).adjusted_doc_entity_code            := p_tax_src_params_rec.adjusted_doc_entity_code;
    px_tax_sources_tbl(p_tax_call_cnt).adjusted_doc_event_class_code       := p_tax_src_params_rec.adjusted_doc_event_class_code;
    px_tax_sources_tbl(p_tax_call_cnt).adjusted_doc_trx_id                 := p_tax_src_params_rec.adjusted_doc_trx_id;
        px_tax_sources_tbl(p_tax_call_cnt).adjusted_doc_trx_line_id            := p_tax_src_params_rec.adjusted_doc_trx_line_id;
        px_tax_sources_tbl(p_tax_call_cnt).adjusted_doc_trx_level_type         := p_tax_src_params_rec.adjusted_doc_trx_level_type;
        px_tax_sources_tbl(p_tax_call_cnt).adjusted_doc_number                 := p_tax_src_params_rec.adjusted_doc_number;
        px_tax_sources_tbl(p_tax_call_cnt).adjusted_doc_date                   := p_tax_src_params_rec.adjusted_doc_date;
        px_tax_sources_tbl(p_tax_call_cnt).tax_call_type_code                  := p_tax_src_params_rec.tax_call_type_code;
        px_tax_sources_tbl(p_tax_call_cnt).trx_business_category               := lx_tbc_code;
        px_tax_sources_tbl(p_tax_call_cnt).tax_line_status_code                := p_tax_src_params_rec.tax_line_status_code;

    px_tax_sources_tbl(p_tax_call_cnt).ship_to_location_id                 := p_tax_src_params_rec.ship_to_location_id;
    px_tax_sources_tbl(p_tax_call_cnt).ship_to_party_site_id               := p_tax_src_params_rec.ship_to_party_site_id;
    px_tax_sources_tbl(p_tax_call_cnt).ship_to_party_id                    := p_tax_src_params_rec.ship_to_party_id;
    px_tax_sources_tbl(p_tax_call_cnt).ship_to_cust_acct_site_use_id       := p_tax_src_params_rec.ship_to_cust_acct_site_use_id;
    px_tax_sources_tbl(p_tax_call_cnt).bill_to_cust_acct_id                := p_tax_src_params_rec.bill_to_cust_acct_id;
    px_tax_sources_tbl(p_tax_call_cnt).bill_to_party_site_id               := p_tax_src_params_rec.bill_to_party_site_id;
    px_tax_sources_tbl(p_tax_call_cnt).bill_to_location_id                 := p_tax_src_params_rec.bill_to_location_id;
    px_tax_sources_tbl(p_tax_call_cnt).bill_to_party_id                    := p_tax_src_params_rec.bill_to_party_id;
    px_tax_sources_tbl(p_tax_call_cnt).bill_to_cust_acct_site_use_id       := p_tax_src_params_rec.bill_to_cust_acct_site_use_id;

    -- Populate ALC_SERIALIZED_YN for ALC transaction
    IF (p_source_trx_name = 'Asset Relocation') THEN
      IF (p_tax_src_params_rec.alc_serialized_yn IN ('Y', 'L')) THEN
        px_tax_sources_tbl(p_tax_call_cnt).alc_serialized_yn                 := p_tax_src_params_rec.alc_serialized_yn;
        px_tax_sources_tbl(p_tax_call_cnt).alc_serialized_total_line_amt     := p_tax_src_params_rec.alc_serialized_total_line_amt;
      ELSE
        px_tax_sources_tbl(p_tax_call_cnt).alc_serialized_yn                 := 'N';
        px_tax_sources_tbl(p_tax_call_cnt).alc_serialized_total_line_amt     := p_tax_src_params_rec.alc_serialized_total_line_amt;
      END IF;
    END IF;

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info.',
                  'POPULATED px_tax_sources_tbl ');
    END IF;

    IF (p_line_params_tbl_cnt IS NULL) THEN
      px_line_params_tbl(p_tax_call_cnt).application_id                     := G_OKL_APPLICATION_ID;
      px_line_params_tbl(p_tax_call_cnt).trx_id                             := p_tax_src_params_rec.trx_id;
      px_line_params_tbl(p_tax_call_cnt).internal_organization_id           := p_tax_src_params_rec.org_id;
      px_line_params_tbl(p_tax_call_cnt).entity_code                        := p_tax_src_params_rec.entity_code;
      px_line_params_tbl(p_tax_call_cnt).event_class_code                   := p_tax_src_params_rec.event_class_code;
      px_line_params_tbl(p_tax_call_cnt).event_type_code                    := p_event_type_code;
      px_line_params_tbl(p_tax_call_cnt).trx_date                           := p_tax_src_params_rec.trx_date;
      px_line_params_tbl(p_tax_call_cnt).ledger_id                          := p_ledger_id;
      px_line_params_tbl(p_tax_call_cnt).legal_entity_id                    := p_tax_src_params_rec.legal_entity_id;
      px_line_params_tbl(p_tax_call_cnt).trx_level_type                     := p_tax_src_params_rec.trx_level_type;
      px_line_params_tbl(p_tax_call_cnt).line_level_action                  := p_line_level_action;

      IF (p_source_trx_name = 'Estimated Billing') THEN
        px_line_params_tbl(p_tax_call_cnt).trx_line_id                      := p_tax_src_params_rec.trx_line_id;
      ELSE
        px_line_params_tbl(p_tax_call_cnt).trx_line_id                      := px_tax_sources_tbl(p_tax_call_cnt).id;
      END IF;

      px_line_params_tbl(p_tax_call_cnt).line_amt                           := l_line_amt;
      px_line_params_tbl(p_tax_call_cnt).tax_reporting_flag                 := p_tax_src_params_rec.tax_reporting_flag;
      px_line_params_tbl(p_tax_call_cnt).default_taxation_country           := p_tax_src_params_rec.default_taxation_country;
      px_line_params_tbl(p_tax_call_cnt).product_type                       := p_tax_src_params_rec.product_type;

      --sechawla 9121244  : p_tax_src_params_rec.tax_classification_code does not have tax classification code populated
      --correct variable to use is lx_tax_classification_code
      --px_line_params_tbl(p_tax_call_cnt).output_tax_classification_code     := p_tax_src_params_rec.tax_classification_code;
      px_line_params_tbl(p_tax_call_cnt).output_tax_classification_code     := lx_tax_classification_code;
      --sechawla 9121244  : end

      px_line_params_tbl(p_tax_call_cnt).assessable_value                   := l_assessable_value;
      px_line_params_tbl(p_tax_call_cnt).receivables_trx_type_id            := p_cust_trx_type_id;
      px_line_params_tbl(p_tax_call_cnt).product_id                         := p_tax_src_params_rec.inventory_item_id;
      px_line_params_tbl(p_tax_call_cnt).adjusted_doc_entity_code           := p_tax_src_params_rec.adjusted_doc_entity_code;
      px_line_params_tbl(p_tax_call_cnt).adjusted_doc_event_class_code      := p_tax_src_params_rec.adjusted_doc_event_class_code;
      px_line_params_tbl(p_tax_call_cnt).adjusted_doc_trx_id                := p_tax_src_params_rec.adjusted_doc_trx_id;
      px_line_params_tbl(p_tax_call_cnt).adjusted_doc_line_id               := p_tax_src_params_rec.adjusted_doc_trx_line_id;
      px_line_params_tbl(p_tax_call_cnt).adjusted_doc_trx_level_type        := p_tax_src_params_rec.adjusted_doc_trx_level_type;
      px_line_params_tbl(p_tax_call_cnt).adjusted_doc_number                := p_tax_src_params_rec.adjusted_doc_number;
      px_line_params_tbl(p_tax_call_cnt).adjusted_doc_date                  := p_tax_src_params_rec.adjusted_doc_date;
      px_line_params_tbl(p_tax_call_cnt).line_amt_includes_tax_flag         := p_line_amt_includes_tax_flag;

      px_line_params_tbl(p_tax_call_cnt).trx_business_category              := lx_tbc_code;
      px_line_params_tbl(p_tax_call_cnt).product_category                   := lx_pc_code;
      px_line_params_tbl(p_tax_call_cnt).user_defined_fisc_class            := lx_ufc_code;
      px_line_params_tbl(p_tax_call_cnt).line_intended_use                  := p_tax_src_params_rec.line_intended_use;
      px_line_params_tbl(p_tax_call_cnt).ship_to_cust_acct_site_use_id      := p_tax_src_params_rec.ship_to_cust_acct_site_use_id;
      px_line_params_tbl(p_tax_call_cnt).bill_to_cust_acct_site_use_id      := p_tax_src_params_rec.bill_to_cust_acct_site_use_id;
      px_line_params_tbl(p_tax_call_cnt).bill_to_party_site_id              := p_tax_src_params_rec.bill_to_party_site_id;
      px_line_params_tbl(p_tax_call_cnt).bill_to_location_id                := p_tax_src_params_rec.bill_to_location_id;
      px_line_params_tbl(p_tax_call_cnt).bill_to_party_id                   := p_tax_src_params_rec.bill_to_party_id;
      px_line_params_tbl(p_tax_call_cnt).ship_to_party_site_id              := p_tax_src_params_rec.ship_to_party_site_id;
      px_line_params_tbl(p_tax_call_cnt).ship_to_location_id                := p_tax_src_params_rec.ship_to_location_id;
      px_line_params_tbl(p_tax_call_cnt).ship_to_party_id                   := p_tax_src_params_rec.ship_to_party_id;
      px_line_params_tbl(p_tax_call_cnt).rounding_ship_to_party_id          := p_rounding_ship_to_party_id;
      px_line_params_tbl(p_tax_call_cnt).rounding_bill_to_party_id          := p_rounding_bill_to_party_id;
      px_line_params_tbl(p_tax_call_cnt).trx_currency_code                  := p_tax_src_params_rec.trx_currency_code;
      px_line_params_tbl(p_tax_call_cnt).precision                          := p_precision;
      px_line_params_tbl(p_tax_call_cnt).minimum_accountable_unit           := p_minimum_accountable_unit;
      px_line_params_tbl(p_tax_call_cnt).currency_conversion_date           := p_tax_src_params_rec.currency_conversion_date;
      px_line_params_tbl(p_tax_call_cnt).currency_conversion_rate           := p_tax_src_params_rec.currency_conversion_rate;
      px_line_params_tbl(p_tax_call_cnt).currency_conversion_type               := p_tax_src_params_rec.currency_conversion_type;
    ELSE -- Applicable for 'Rebook' transaction only
      px_line_params_tbl(p_line_params_tbl_cnt).application_id              := G_OKL_APPLICATION_ID;
      px_line_params_tbl(p_line_params_tbl_cnt).trx_id                      := p_tax_src_params_rec.trx_id;
      px_line_params_tbl(p_line_params_tbl_cnt).internal_organization_id    := p_tax_src_params_rec.org_id;
      px_line_params_tbl(p_line_params_tbl_cnt).entity_code                 := p_tax_src_params_rec.entity_code;
      px_line_params_tbl(p_line_params_tbl_cnt).event_class_code            := p_tax_src_params_rec.event_class_code;
      px_line_params_tbl(p_line_params_tbl_cnt).event_type_code             := p_event_type_code;
      px_line_params_tbl(p_line_params_tbl_cnt).trx_date                    := p_tax_src_params_rec.trx_date;
      px_line_params_tbl(p_line_params_tbl_cnt).ledger_id                   := p_ledger_id;
      px_line_params_tbl(p_line_params_tbl_cnt).legal_entity_id             := p_tax_src_params_rec.legal_entity_id;
      px_line_params_tbl(p_line_params_tbl_cnt).trx_level_type              := p_tax_src_params_rec.trx_level_type;
      px_line_params_tbl(p_line_params_tbl_cnt).line_level_action           := p_line_level_action;

      IF (p_source_trx_name = 'Estimated Billing') THEN
        px_line_params_tbl(p_tax_call_cnt).trx_line_id                      := p_tax_src_params_rec.trx_line_id;
      ELSE
        px_line_params_tbl(p_tax_call_cnt).trx_line_id                      := px_tax_sources_tbl(p_tax_call_cnt).id;
      END IF;

      px_line_params_tbl(p_line_params_tbl_cnt).line_amt                    := l_line_amt;
      px_line_params_tbl(p_line_params_tbl_cnt).tax_reporting_flag          := p_tax_src_params_rec.tax_reporting_flag;
      px_line_params_tbl(p_line_params_tbl_cnt).default_taxation_country    := p_tax_src_params_rec.default_taxation_country;
      px_line_params_tbl(p_line_params_tbl_cnt).product_type                := p_tax_src_params_rec.product_type;

      --sechawla 9121244  : p_tax_src_params_rec.tax_classification_code does not have tax classification code populated
      --correct variable to use is lx_tax_classification_code
      --px_line_params_tbl(p_line_params_tbl_cnt).output_tax_classification_code := p_tax_src_params_rec.tax_classification_code;
      px_line_params_tbl(p_line_params_tbl_cnt).output_tax_classification_code     := lx_tax_classification_code;
      --sechawla 9121244  : end

      px_line_params_tbl(p_line_params_tbl_cnt).assessable_value            := l_assessable_value;
      px_line_params_tbl(p_line_params_tbl_cnt).receivables_trx_type_id     := p_cust_trx_type_id;
      px_line_params_tbl(p_line_params_tbl_cnt).product_id                  := p_tax_src_params_rec.inventory_item_id;
      px_line_params_tbl(p_line_params_tbl_cnt).adjusted_doc_entity_code    := p_tax_src_params_rec.adjusted_doc_entity_code;
      px_line_params_tbl(p_line_params_tbl_cnt).adjusted_doc_event_class_code  := p_tax_src_params_rec.adjusted_doc_event_class_code;
      px_line_params_tbl(p_line_params_tbl_cnt).adjusted_doc_trx_id         := p_tax_src_params_rec.adjusted_doc_trx_id;
      px_line_params_tbl(p_line_params_tbl_cnt).adjusted_doc_line_id        := p_tax_src_params_rec.adjusted_doc_trx_line_id;
      px_line_params_tbl(p_line_params_tbl_cnt).adjusted_doc_trx_level_type := p_tax_src_params_rec.adjusted_doc_trx_level_type;
      px_line_params_tbl(p_line_params_tbl_cnt).adjusted_doc_number         := p_tax_src_params_rec.adjusted_doc_number;
      px_line_params_tbl(p_line_params_tbl_cnt).adjusted_doc_date           := p_tax_src_params_rec.adjusted_doc_date;
      px_line_params_tbl(p_line_params_tbl_cnt).line_amt_includes_tax_flag  := p_line_amt_includes_tax_flag;

      px_line_params_tbl(p_line_params_tbl_cnt).trx_business_category       := lx_tbc_code;
      px_line_params_tbl(p_line_params_tbl_cnt).product_category            := lx_pc_code;
      px_line_params_tbl(p_line_params_tbl_cnt).user_defined_fisc_class     := lx_ufc_code;
      px_line_params_tbl(p_line_params_tbl_cnt).line_intended_use           := p_tax_src_params_rec.line_intended_use;
      px_line_params_tbl(p_line_params_tbl_cnt).ship_to_cust_acct_site_use_id  := p_tax_src_params_rec.ship_to_cust_acct_site_use_id;
      px_line_params_tbl(p_line_params_tbl_cnt).bill_to_cust_acct_site_use_id  := p_tax_src_params_rec.bill_to_cust_acct_site_use_id;
      px_line_params_tbl(p_line_params_tbl_cnt).bill_to_party_site_id       := p_tax_src_params_rec.bill_to_party_site_id;
      px_line_params_tbl(p_line_params_tbl_cnt).bill_to_location_id         := p_tax_src_params_rec.bill_to_location_id;
      px_line_params_tbl(p_line_params_tbl_cnt).bill_to_party_id            := p_tax_src_params_rec.bill_to_party_id;
      px_line_params_tbl(p_line_params_tbl_cnt).ship_to_party_site_id       := p_tax_src_params_rec.ship_to_party_site_id;
      px_line_params_tbl(p_line_params_tbl_cnt).ship_to_location_id         := p_tax_src_params_rec.ship_to_location_id;
      px_line_params_tbl(p_line_params_tbl_cnt).ship_to_party_id            := p_tax_src_params_rec.ship_to_party_id;
      px_line_params_tbl(p_line_params_tbl_cnt).rounding_ship_to_party_id   := p_rounding_ship_to_party_id;
      px_line_params_tbl(p_line_params_tbl_cnt).rounding_bill_to_party_id   := p_rounding_bill_to_party_id;
      px_line_params_tbl(p_line_params_tbl_cnt).trx_currency_code           := p_tax_src_params_rec.trx_currency_code;
      px_line_params_tbl(p_line_params_tbl_cnt).precision                   := p_precision;
      px_line_params_tbl(p_line_params_tbl_cnt).minimum_accountable_unit    := p_minimum_accountable_unit;
      px_line_params_tbl(p_line_params_tbl_cnt).currency_conversion_date    := p_tax_src_params_rec.currency_conversion_date;
      px_line_params_tbl(p_line_params_tbl_cnt).currency_conversion_rate    := p_tax_src_params_rec.currency_conversion_rate;
      px_line_params_tbl(p_line_params_tbl_cnt).currency_conversion_type        := p_tax_src_params_rec.currency_conversion_type;
    END IF;

        IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
       FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info ','End(-)');
    END IF;

  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN
         IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
         END IF;

         IF (c_get_set_of_books_id%ISOPEN) THEN
           CLOSE c_get_set_of_books_id;
         END IF;

         x_return_status := OKL_API.G_RET_STS_ERROR;
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
         IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_UNEXPECTED_ERROR');
         END IF;

         IF (c_get_set_of_books_id%ISOPEN) THEN
           CLOSE c_get_set_of_books_id;
         END IF;

         x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;

    WHEN OTHERS THEN
         IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
            FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_info ',
                  'EXCEPTION :'||sqlerrm);
         END IF;

         IF (c_get_set_of_books_id%ISOPEN) THEN
           CLOSE c_get_set_of_books_id;
         END IF;

         x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
         -- unexpected error
         OKL_API.set_message(p_app_name  => g_app_name,
                         p_msg_name      => g_unexpected_error,
                         p_token1        => g_sqlcode_token,
                         p_token1_value  => sqlcode,
                         p_token2        => g_sqlerrm_token,
                         p_token2_value  => sqlerrm);

  END populate_tax_info;

/*========================================================================
 | PRIVATE PROCEDURE populate_tax_codes
 |
 | DESCRIPTION
 |    This procedure derives the tax codes
 |
 | CALLED FROM
 |     process_tax_schedule_tax
 |
 |
 | CALLS PROCEDURES/FUNCTIONS
 |     get_ufc_code()
 |
 | PARAMETERS
 |
 | KNOWN ISSUES
 |
 | NOTES
 |
 |
 | MODIFICATION HISTORY
 | Date           Author        Description of Changes
 | 22-AUG-07      RRAVIKIR      Created
 *=======================================================================*/
 PROCEDURE populate_tax_codes(
    p_api_version                       IN  NUMBER,
    p_init_msg_list                     IN  VARCHAR2 DEFAULT OKC_API.G_FALSE,
    x_return_status                     OUT NOCOPY VARCHAR2,
    x_msg_count                         OUT NOCOPY NUMBER,
    x_msg_data                          OUT NOCOPY VARCHAR2,
    p_prch_opt_det                                      IN  VARCHAR2,
    p_fin_prod_id_det                           IN  NUMBER,
    p_int_disclosed_det                         IN  VARCHAR2,
    p_title_trnsfr_code                     IN  VARCHAR2,
    p_sale_lease_back_code                  IN  VARCHAR2,
    p_lease_purchased_code                  IN  VARCHAR2,
    p_equip_usage_code                      IN  VARCHAR2,
    p_vendor_site_id                        IN  NUMBER,
    p_age_of_equip                                      IN  NUMBER,
    p_source_trx_name               IN  VARCHAR2,
    p_book_class_code               IN  VARCHAR2,
    p_tax_code_cnt                  IN  NUMBER,
    p_sty_id                        IN  NUMBER,
    p_try_id                        IN  NUMBER,
    p_tax_country_code              IN  VARCHAR2,
    p_khr_id                        IN  NUMBER,
    p_kle_id                        IN  NUMBER,
    p_bill_to_party_site_id         IN  NUMBER,
    p_bill_to_location_id           IN  NUMBER,
    p_bill_to_party_id              IN  NUMBER,
    p_bill_to_cust_acct_site_id     IN  NUMBER,
    p_ship_to_party_site_id         IN  NUMBER DEFAULT NULL,
    p_ship_to_location_id           IN  NUMBER DEFAULT NULL,
    p_ship_to_party_id              IN  NUMBER DEFAULT NULL,
    p_ship_to_cust_acct_site_id     IN  NUMBER DEFAULT NULL,
    p_inventory_item_id             IN  NUMBER DEFAULT NULL,
    p_org_id                        IN  NUMBER,
    p_trx_date                      IN  DATE,
    px_tax_codes_tbl                IN  OUT NOCOPY tax_codes_tbl_type) IS

    lx_tbc_code                                         VARCHAR2(30);
    lx_ufc_code                     VARCHAR2(30);
    lx_pc_code                      VARCHAR2(30);
    lx_tax_classification_code      VARCHAR2(50);
    l_set_of_books_id               NUMBER;
    lx_tax_valid_code               VARCHAR2(1);

    CURSOR c_get_set_of_books_id(cp_org_id IN NUMBER) IS
    SELECT set_of_books_id
    FROM   ar_system_parameters_all
    WHERE  org_id = cp_org_id;

  BEGIN

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_codes','Begin(+)');
    END IF;

    --Print Input Variables
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_codes.',
              'p_init_msg_list :'||p_init_msg_list);
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_codes.',
              'p_prch_opt_det :'||p_prch_opt_det);
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_codes.',
              'p_prch_opt_det :'||p_prch_opt_det);
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_codes.',
              'p_fin_prod_id_det :'||p_fin_prod_id_det);
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_codes.',
              'p_int_disclosed_det :'||p_int_disclosed_det);
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_codes.',
              'p_title_trnsfr_code :'||p_title_trnsfr_code);
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_codes.',
              'p_sale_lease_back_code :'||p_sale_lease_back_code);
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_codes.',
              'p_lease_purchased_code :'||p_lease_purchased_code);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_codes.',
              'p_equip_usage_code :'||p_equip_usage_code);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_codes.',
              'p_vendor_site_id :'||p_vendor_site_id);
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_codes.',
              'p_age_of_equip :'||p_age_of_equip);
    END IF;

    -- Get TBC code
    get_tbc_code(p_api_version                   => p_api_version,
                           p_init_msg_list               => OKC_API.G_FALSE,
                           x_return_status               => x_return_status,
                           x_msg_count                   => x_msg_count,
                   x_msg_data                    => x_msg_data,
                   p_sty_id                                          => p_sty_id,  -- used if pymnts exist
                           p_try_id                                          => p_try_id,
                   p_book_class_code             => p_book_class_code,
                   p_tax_country_code            => p_tax_country_code,
                   x_tbc_code                    => lx_tbc_code);

    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    -- Validate TBC Code
    IF lx_tbc_code IS NOT NULL THEN
      validate_tax_code(
          p_api_version     => p_api_version,
          p_init_msg_list   => p_init_msg_list,
          x_return_status   => x_return_status,
          x_msg_count       => x_msg_count,
          x_msg_data        => x_msg_data,
          p_trx_date        => p_trx_date,
          p_tbc_code        => lx_tbc_code,
          x_valid_code      => lx_tax_valid_code); -- 'S' --> Success, 'F' --> Failure

      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
    END IF;

    -- Get the first level determinant for TBC basing on transaction, if the value is null
    IF ((lx_tbc_code IS NULL OR lx_tax_valid_code = 'F')AND p_source_trx_name = 'Tax Schedule') THEN
      lx_tbc_code := 'SALES_TRANSACTION';
    END IF;

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_codes.',
                  'lx_tbc_code'||lx_tbc_code);
    END IF;

    -- Get PC code
    get_pc_code(p_api_version                   => p_api_version,
                          p_init_msg_list               => OKC_API.G_FALSE,
                          x_return_status               => x_return_status,
                          x_msg_count                   => x_msg_count,
                  x_msg_data                    => x_msg_data,
                  p_sty_id                                          => p_sty_id,
                  p_purchase_option_code        => p_prch_opt_det,
                  p_int_disclosed_code          => p_int_disclosed_det,
                  p_title_trnsfr_code           => p_title_trnsfr_code,
                  p_sale_lease_back_code        => p_sale_lease_back_code,
                  p_lease_purchased_code        => p_lease_purchased_code,
                  p_tax_country_code            => p_tax_country_code,
                  x_pc_code                     => lx_pc_code);

    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    -- Validate PC Code
    IF lx_pc_code IS NOT NULL THEN
      validate_tax_code(
            p_api_version     => p_api_version,
            p_init_msg_list   => p_init_msg_list,
            x_return_status   => x_return_status,
            x_msg_count       => x_msg_count,
            x_msg_data        => x_msg_data,
            p_trx_date        => p_trx_date,
            p_pc_code         => lx_pc_code,
            x_valid_code      => lx_tax_valid_code); -- 'S' --> Success, 'F' --> Failure

      IF (lx_tax_valid_code = 'F') THEN
        lx_pc_code := null;
      END IF;

      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
    END IF;

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_codes.',
                  'lx_pc_code'||lx_pc_code);
    END IF;

    -- Get UFC code
    get_ufc_code(p_api_version                   => p_api_version,
                           p_init_msg_list               => OKC_API.G_FALSE,
                           x_return_status               => x_return_status,
                           x_msg_count                   => x_msg_count,
                   x_msg_data                    => x_msg_data,
                           p_purchase_option             => p_prch_opt_det,
                                   p_fin_product_id                          => p_fin_prod_id_det,
                           p_try_id                                          => p_try_id,
                           p_sty_id                                          => p_sty_id,  -- used if pymnts exist
                           p_int_disclosed_code              => p_int_disclosed_det,
                           p_title_trnsfr_code               => p_title_trnsfr_code, -- asset level
                           p_sale_lease_back_code                => p_sale_lease_back_code, -- asset level
                           p_lease_purchased_code                => p_lease_purchased_code, -- asset level
                           p_equip_usage_code                    => p_equip_usage_code ,-- asset level
                           p_vendor_site_id                          => p_vendor_site_id, -- asset level
                           p_age_of_equip                                => p_age_of_equip, -- asset level
                   p_term_quote_type_code        => null,
                   p_term_quote_reason_code      => null,
                   p_tax_country_code            => p_tax_country_code,
                           x_ufc_code                    => lx_ufc_code);

    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    -- Validate UFC Code
    IF lx_ufc_code IS NOT NULL THEN
      validate_tax_code(
            p_api_version     => p_api_version,
            p_init_msg_list   => p_init_msg_list,
            x_return_status   => x_return_status,
            x_msg_count       => x_msg_count,
            x_msg_data        => x_msg_data,
            p_trx_date        => p_trx_date,
            p_ufc_code        => lx_ufc_code,
            x_valid_code      => lx_tax_valid_code); -- 'S' --> Success, 'F' --> Failure

      IF (lx_tax_valid_code = 'F') THEN
        lx_ufc_code := null;
      END IF;

      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
    END IF;

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_codes.',
                  'lx_ufc_code'||lx_ufc_code);
    END IF;

    -- Get Set of Books ID
    OPEN c_get_set_of_books_id(cp_org_id  =>  p_org_id);
    FETCH c_get_set_of_books_id INTO l_set_of_books_id;
    CLOSE c_get_set_of_books_id;

    -- Get the tax classification code
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_codes.',
                  'Calling  OKL_TAX_INTERFACE_PVT.get_tax_classification_code .. ');
    END IF;

    OKL_TAX_INTERFACE_PVT.get_tax_classification_code (
                      x_return_status                 =>  x_return_status,
                      p_ship_to_site_use_id           =>  p_ship_to_cust_acct_site_id,
                      p_bill_to_site_use_id           =>  p_bill_to_cust_acct_site_id,
                      p_inventory_item_id             =>  p_inventory_item_id,
                      p_organization_id               =>  p_org_id,
                      p_set_of_books_id               =>  l_set_of_books_id,
                      p_trx_date                      =>  p_trx_date,
                      p_trx_type_id                   =>  null,
                      p_entity_code                   =>  G_AR_ENTITY_CODE,
                      p_event_class_code              =>  G_INVOICE_EVENT_CLASS_CODE,
                      p_application_id                =>  G_AR_APPLICATION_ID,
                      p_internal_organization_id      =>  p_org_id,
                      x_tax_classification_code       =>  lx_tax_classification_code );

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_codes.',
                  'Return Status '|| x_return_status);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_codes.',
                  'lx_tax_classification_code = '|| lx_tax_classification_code);
    END IF;

    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    px_tax_codes_tbl(p_tax_code_cnt).khr_id          := p_khr_id;
    px_tax_codes_tbl(p_tax_code_cnt).kle_id          := p_kle_id;
    px_tax_codes_tbl(p_tax_code_cnt).sty_id          := p_sty_id;
    px_tax_codes_tbl(p_tax_code_cnt).tbc_code        := lx_tbc_code;
    px_tax_codes_tbl(p_tax_code_cnt).pc_code         := lx_pc_code;
    px_tax_codes_tbl(p_tax_code_cnt).ufc_code        := lx_ufc_code;
    px_tax_codes_tbl(p_tax_code_cnt).tax_class_code  := lx_tax_classification_code;

        IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
       FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_codes ','End(-)');
    END IF;

  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN
      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_codes ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
      END IF;

      IF (c_get_set_of_books_id%ISOPEN) THEN
        CLOSE c_get_set_of_books_id;
      END IF;

      x_return_status := OKL_API.G_RET_STS_ERROR;

    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_codes ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_UNEXPECTED_ERROR');
      END IF;

      IF (c_get_set_of_books_id%ISOPEN) THEN
        CLOSE c_get_set_of_books_id;
      END IF;

      x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;

    WHEN OTHERS THEN

      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.populate_tax_codes ',
                  'EXCEPTION :'||sqlerrm);
      END IF;

      IF (c_get_set_of_books_id%ISOPEN) THEN
        CLOSE c_get_set_of_books_id;
      END IF;

      x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;

      OKL_API.set_message(p_app_name  => g_app_name,
                         p_msg_name      => g_unexpected_error,
                         p_token1        => g_sqlcode_token,
                         p_token1_value  => sqlcode,
                         p_token2        => g_sqlerrm_token,
                         p_token2_value  => sqlerrm);

  END populate_tax_codes;

/*========================================================================
 | PUBLIC PROCEDURE get_billing_stream_types
 |
 | DESCRIPTION
 |    This procedure is called by the Tax Calculation Setup Screen to derive
 |    List of Values for the screen LOV field "Stream Type For Billing"
 |
 | CALLED FROM
 |    Tax Calculation Setup Screen
 |
 | CALLS PROCEDURES/FUNCTIONS
 |
 |
 | PARAMETERS
 |  Input Parameters
 |      p_org_id                        -- org ID
 |      p_sty_code              -- Stream Type Code
 |  Output Parameters
 |      x_sty_id_tbl        -- Table of Billing Stream Types
 |
 | KNOWN ISSUES
 |
 | NOTES
 |
 |
 | MODIFICATION HISTORY
 | Date                  Author            Description of Changes
 | 08-APR-05            SECHAWLA           Created
 |
 *=======================================================================*/


  PROCEDURE get_billing_stream_types(
    p_api_version                       IN  NUMBER,
    p_init_msg_list                     IN  VARCHAR2 DEFAULT OKC_API.G_FALSE,
    x_return_status                     OUT NOCOPY VARCHAR2,
    x_msg_count                         OUT NOCOPY NUMBER,
    x_msg_data                          OUT NOCOPY VARCHAR2,
    p_org_id                                            IN  NUMBER,
    p_sty_code                                          IN  VARCHAR2,
        x_sty_id_tbl                                    OUT NOCOPY sty_id_tbl_type) IS

  -- get all the Billable, enabled streams of purpose FEE_PAYMENT
  CURSOR l_strmtype_csr(cp_sty_code IN VARCHAR2) IS
  SELECT a.id, a.code, a.stream_type_purpose, b.meaning
  FROM   okl_strm_type_b a, fnd_lookups b
  WHERE  a.stream_type_purpose = 'FEE_PAYMENT'
  AND    a.billable_yn = 'Y'
  AND    a.stream_type_purpose = b.lookup_code
  AND    b.lookup_type = 'OKL_STREAM_TYPE_PURPOSE'
  AND    b.enabled_flag = 'Y'
  AND    upper(a.code) like decode(cp_sty_code, NULL, a.code, '%', a.code, upper(cp_sty_code)||'%');

  -- get all the SGT sets for a given OU
  CURSOR l_stgentmptsets_csr(cp_org_id IN NUMBER) IS
  SELECT id
  FROM   okl_st_gen_tmpt_sets
  WHERE  org_id = cp_org_id
  --asawanka bug fix 4659674 start
  AND    product_type = 'FINANCIAL';
  --asawanka bug fix 4659674 end

  -- Get all SGTs for a given SGT Set
  CURSOR l_stgentemplates_csr(cp_gts_id IN NUMBER) IS
  SELECT id
  FROM   okl_st_gen_templates
  WHERE  gts_id = cp_gts_id
  AND    tmpt_status = G_ACTIVE_STATUS;

  -- Get all the SGT Lines for a given SGT
  CURSOR l_stgentmptlns_csr(cp_gtt_id IN NUMBER) IS
  SELECT primary_sty_id
  FROM   okl_st_gen_tmpt_lns
  WHERE  gtt_id = cp_gtt_id
  AND    primary_yn = 'Y';

  l_sty_id_tbl                          sty_id_tbl_type;

  l_stream_type_found           VARCHAR2(1);
  sty_id_tbl_cnt                        NUMBER := 0;
  l_sgt_set_found                       VARCHAR2(1) := 'N';
  l_strm_type_cnt                       NUMBER := 0;
  l_any_active_sgt_found        VARCHAR2(1);
  l_active_sgt_found        VARCHAR2(1);
  l_id                                          NUMBER;

  BEGIN

   IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.get_billing_stream_types','Begin(+)');
   END IF;

   --Print Input Variables
   IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_billing_stream_types.',
              'p_init_msg_list :'||p_init_msg_list);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_billing_stream_types.',
              'p_org_id :'||p_org_id);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_billing_stream_types.',
              'p_sty_code :'||p_sty_code);
   END IF;

   x_return_status := OKL_API.G_RET_STS_SUCCESS;

   -- Check if any stream generation template set exists for this OU
   OPEN  l_stgentmptsets_csr(p_org_id);
   FETCH l_stgentmptsets_csr INTO l_id;
   IF l_stgentmptsets_csr%FOUND THEN
                l_sgt_set_found := 'Y';
   END IF;
   CLOSE l_stgentmptsets_csr;

   IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_billing_stream_types.',
              'l_sgt_set_found'||l_sgt_set_found);
   END IF;

   l_any_active_sgt_found := 'N'; -- Flag to indicate if any ACTIVE SGT exists across all SGT Sets

   FOR l_strmtype_rec IN l_strmtype_csr(p_sty_code) LOOP -- All/User selected billable stream types of purpose 'FEE_PAYMENT'
        l_strm_type_cnt := l_strm_type_cnt + 1;

        IF l_sgt_set_found = 'Y' THEN -- If there are any SGT sets for this OU

                l_stream_type_found := 'N';

                IF l_strm_type_cnt = 1 OR l_any_active_sgt_found = 'Y' THEN



                    -- When the following piece of code is executed for the first stream type, it sets the flag
                                -- l_any_active_sgt_found (along with other processing logic) to 'Y' if any ACTIVE SGT
                                -- is found across all SGT sets. If there are no ACTIVE SGTs across all the SGT sets, then
                                -- this piece of code is not executed for the remaining stream types
                                FOR l_stgentmptsets_rec IN l_stgentmptsets_csr(p_org_id) LOOP -- all SGT sets for a given org


                                l_active_sgt_found := 'N';
                                FOR l_stgentemplates_rec IN l_stgentemplates_csr(l_stgentmptsets_rec.id) LOOP -- all ACTIVE versions of a given SGT
                                        l_active_sgt_found := 'Y';
                                        l_any_active_sgt_found := 'Y';
                                        FOR l_stgentmptlns_rec IN l_stgentmptlns_csr(l_stgentemplates_rec.id) LOOP -- all lines (stream types) in a given version
                                        IF l_stgentmptlns_rec.primary_sty_id = l_strmtype_rec.id THEN
                                                l_stream_type_found := 'Y';
                                                EXIT;
                                        ELSE
                                                l_stream_type_found := 'N';
                                        END IF;
                                        END LOOP;
                                        --IF l_stream_type_found = 'N' THEN
					--dcshanmu bug 6667098 start
					IF l_stream_type_found = 'Y' THEN
					--dcshanmu bug 6667098 end
                                                EXIT;
                                        END IF;
                                END LOOP;
                                --IF l_active_sgt_found = 'Y' AND l_stream_type_found = 'N' THEN
				--dcshanmu bug 6667098 start
				IF l_active_sgt_found = 'Y' AND l_stream_type_found = 'Y' THEN
				--dcshanmu bug 6667098 end
                                        EXIT;
                                END IF;
                                END LOOP;

                END IF; -- IF l_strm_type_cnt = 1 OR l_any_active_sgt_found = 'Y' THEN


            IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_billing_stream_types.',
                  'l_any_active_sgt_found'||l_any_active_sgt_found);
                    END IF;

                    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_billing_stream_types.',
                  'l_stream_type_found'||l_stream_type_found);
                    END IF;

                -- If there are no ACTIVE SGTs across all SGT sets OR stream type found under ACTIVE SGTs,
                -- then consider stream type for the LOV
                IF l_any_active_sgt_found = 'N' OR l_stream_type_found = 'Y' THEN
                        sty_id_tbl_cnt := sty_id_tbl_cnt + 1;

                                l_sty_id_tbl(sty_id_tbl_cnt).sty_id  := l_strmtype_rec.id;
                                l_sty_id_tbl(sty_id_tbl_cnt).sty_code := l_strmtype_rec.code;
                                l_sty_id_tbl(sty_id_tbl_cnt).sty_purpose := l_strmtype_rec.meaning;

                        END IF;


                ELSE -- there are no SGT sets existing for this OU, so consider stream type for the LOV

            IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_billing_stream_types.',
                  'There are no SGT sets existing for this OU');
                    END IF;

                sty_id_tbl_cnt := sty_id_tbl_cnt + 1;

                        l_sty_id_tbl(sty_id_tbl_cnt).sty_id  := l_strmtype_rec.id;
                        l_sty_id_tbl(sty_id_tbl_cnt).sty_code := l_strmtype_rec.code;
                        l_sty_id_tbl(sty_id_tbl_cnt).sty_purpose := l_strmtype_rec.meaning;

                END IF;
        END LOOP;

        x_sty_id_tbl := l_sty_id_tbl;


    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
       FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.get_billing_stream_types ','End(-)');
    END IF;


  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN
         IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.get_billing_stream_types ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
         END IF;


                 IF l_strmtype_csr%ISOPEN THEN
                    CLOSE l_strmtype_csr;
                 END IF;

                 IF l_stgentmptsets_csr%ISOPEN THEN
                    CLOSE l_stgentmptsets_csr;
                 END IF;

                 IF l_stgentemplates_csr%ISOPEN THEN
                    CLOSE l_stgentemplates_csr;
                 END IF;

                 IF l_stgentmptlns_csr%ISOPEN THEN
                    CLOSE l_stgentmptlns_csr;
                 END IF;

         x_return_status := OKL_API.G_RET_STS_ERROR;
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
         IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.get_billing_stream_types ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_UNEXPECTED_ERROR');
         END IF;

         IF l_strmtype_csr%ISOPEN THEN
                    CLOSE l_strmtype_csr;
                 END IF;

                 IF l_stgentmptsets_csr%ISOPEN THEN
                    CLOSE l_stgentmptsets_csr;
                 END IF;

                 IF l_stgentemplates_csr%ISOPEN THEN
                    CLOSE l_stgentemplates_csr;
                 END IF;

                 IF l_stgentmptlns_csr%ISOPEN THEN
                    CLOSE l_stgentmptlns_csr;
                 END IF;

         x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;

    WHEN OTHERS THEN
         IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
            FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.get_billing_stream_types ',
                  'EXCEPTION :'||sqlerrm);
         END IF;

         IF l_strmtype_csr%ISOPEN THEN
                    CLOSE l_strmtype_csr;
                 END IF;

                 IF l_stgentmptsets_csr%ISOPEN THEN
                    CLOSE l_stgentmptsets_csr;
                 END IF;

                 IF l_stgentemplates_csr%ISOPEN THEN
                    CLOSE l_stgentemplates_csr;
                 END IF;

                 IF l_stgentmptlns_csr%ISOPEN THEN
                    CLOSE l_stgentmptlns_csr;
                 END IF;

         x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
         -- unexpected error
         OKL_API.set_message(p_app_name      => g_app_name,
                         p_msg_name      => g_unexpected_error,
                         p_token1        => g_sqlcode_token,
                         p_token1_value  => sqlcode,
                         p_token2        => g_sqlerrm_token,
                         p_token2_value  => sqlerrm);

  END get_billing_stream_types;

/*========================================================================
 | PRIVATE PROCEDURE get_k_hdr_tax_params
 |
 | DESCRIPTION
 |    This procedure is called by other procedures in this API to derive
 |    contract level tax determinats
 |
 | CALLED FROM
 |
 |
 | CALLS PROCEDURES/FUNCTIONS
 |     okl_am_util_pvt.get_rule_record
 |
 |
 | PARAMETERS
 |  Input parameters
 |      p_khr_id                                -- Contract ID
 |      p_source_trx_name           -- Source Transaction
 |      p_source_table                          -- Source Trx Table
 |      p_qtp_code                  -- Quote Type (Termination / Repurchase)
 |      p_early_term_yn                         -- Early termination yn
 |      p_purpose_code              -- Stream Type purpose
 |  Output Parameters
 |      x_cust_acct_id                          -- Customer A/c ID
 |      x_bill_to_siteuseid             -- Bill To Site Use ID
 |      x_currency_code                         -- Curency Code
 |      x_cust_trx_type_id              -- Customer Trx Type ID
 |      x_precision                                     -- Currency Precision
 |      x_minimum_accountable_unit  -- Currncy Min accountable unit
 |              x_prch_opt_det                          -- Purchase Option
 |              x_fin_prod_id_det                       -- Financial Product ID
 |              x_int_disclosed_det                     -- Interest Disclosed
 |
 | KNOWN ISSUES
 |
 | NOTES
 |
 |
 | MODIFICATION HISTORY
 | Date            Author         Description of Changes
 | 08-APR-05       SECHAWLA        Created
 | 23-NOV-05       SECHAWLA        4742539 System picking wrong TBC
 |
 *=======================================================================*/

  PROCEDURE get_k_hdr_tax_params(
        p_api_version                   IN  NUMBER,
    p_init_msg_list                     IN  VARCHAR2 DEFAULT OKC_API.G_FALSE,
    x_return_status                     OUT NOCOPY VARCHAR2,
    x_msg_count                         OUT NOCOPY NUMBER,
    x_msg_data                          OUT NOCOPY VARCHAR2,
    p_khr_id                        IN  NUMBER,
    p_source_trx_name               IN  VARCHAR2,
    p_source_table                                      IN  VARCHAR2,
    p_qtp_code                      IN  VARCHAR2 DEFAULT NULL, -- Used only for termination/repurchase quote
    p_early_term_yn                                 IN  VARCHAR2 DEFAULT NULL, -- Used only for termination/repurchase quote
    p_purpose_code                  IN  VARCHAR2 DEFAULT NULL, -- Used only in process_invoice_tax to identify remk,asset repair,vendor cure invoices
    x_cust_acct_id                                      OUT NOCOPY  NUMBER,
        x_bill_to_siteuseid             OUT NOCOPY  NUMBER,
        x_currency_code                                 OUT NOCOPY  VARCHAR2,
    x_cust_trx_type_id              OUT NOCOPY  NUMBER,
    x_precision                                     OUT NOCOPY  NUMBER,
        x_minimum_accountable_unit      OUT NOCOPY  NUMBER,
        x_prch_opt_det                              OUT NOCOPY  VARCHAR2,
        x_fin_prod_id_det                           OUT NOCOPY  NUMBER,
        x_int_disclosed_det                             OUT NOCOPY  VARCHAR2,
    x_org_id                        OUT NOCOPY  NUMBER,
    x_book_class_code               OUT NOCOPY  VARCHAR2,
    x_bill_to_party_site_id         OUT NOCOPY  NUMBER,
    x_bill_to_party_id              OUT NOCOPY  NUMBER,
    x_bill_to_location_id           OUT NOCOPY  NUMBER,
    x_currency_conversion_type      OUT NOCOPY  VARCHAR2,
    x_currency_conversion_rate      OUT NOCOPY  NUMBER,
    x_currency_conversion_date      OUT NOCOPY  DATE,
    x_contract_start_date           OUT NOCOPY  DATE ) IS

    --Cursor to get the customer_account_id for the customer
    CURSOR c_get_contractinfo_csr(cp_khr_id IN NUMBER) IS
    SELECT cust_acct_id, bill_to_site_use_id, currency_code, org_id,
           conversion_type, conversion_rate, conversion_rate_date, start_date
    FROM   okc_k_headers_b
    WHERE  id = cp_khr_id;

    --get currency attributes
    CURSOR l_fndcurrency_csr(cp_currency_code IN VARCHAR2) IS
    SELECT precision, minimum_accountable_unit
    FROM   fnd_currencies
    WHERE  currency_code = cp_currency_code
        AND    enabled_flag = 'Y'
    AND    NVL(start_date_active, sysdate) <= sysdate
    AND    NVL(end_date_active, sysdate) >= sysdate;

    --Get the AR customer transaction type used by OKL
    CURSOR l_racusttrxtypes_csr IS
    SELECT cust_trx_type_id
        FROM   ra_cust_trx_types_all
        WHERE  name = 'Invoice-OKL';

        -- get the financial product
    CURSOR l_oklkheaders_csr(cp_khr_id IN NUMBER) IS
    SELECT pdt_id, deal_type
    FROM   okl_k_headers
    WHERE  id = cp_khr_id;

    l_cust_trx_type_id                          NUMBER;

    l_return_status                 VARCHAR2(1) := OKL_API.G_RET_STS_SUCCESS;
        l_precision                             NUMBER;
        l_minimum_accountable_unit              NUMBER;

        l_rulv_rec                      okl_rule_pub.rulv_rec_type;
        l_rulv_empty_rec                                okl_rule_pub.rulv_rec_type;

        l_prch_opt_det                              VARCHAR2(450);
        l_fin_prod_id_det                           NUMBER;
        l_int_disclosed_det                         VARCHAR2(30);
        l_purpose_code                                  VARCHAR2(30);
    l_book_class_code               VARCHAR2(30);

    lx_bill_to_party_site_id        NUMBER;
    lx_bill_to_location_id          NUMBER;
    lx_bill_to_party_id             NUMBER;
    lx_bill_to_siteuseid            NUMBER;
    lx_ship_to_party_site_id        NUMBER;
    lx_ship_to_location_id          NUMBER;
    lx_ship_to_party_id             NUMBER;
    lx_ship_to_siteuseid                NUMBER;

    l_get_contractinfo_rec            c_get_contractinfo_csr%ROWTYPE;

  BEGIN

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.get_k_hdr_tax_params','Begin(+)');
    END IF;

    --Print Input Variables
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_k_hdr_tax_params.',
              'p_init_msg_list :'||p_init_msg_list);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_k_hdr_tax_params.',
              'p_khr_id :'||p_khr_id);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_k_hdr_tax_params.',
              'p_source_trx_name :'||p_source_trx_name);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_k_hdr_tax_params.',
              'p_source_table :'||p_source_table);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_k_hdr_tax_params.',
              'p_qtp_code :'||p_qtp_code);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_k_hdr_tax_params.',
              'p_early_term_yn :'||p_early_term_yn);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_k_hdr_tax_params.',
              'p_purpose_code :'||p_purpose_code);
    END IF;

    OPEN  c_get_contractinfo_csr(p_khr_id);
    FETCH c_get_contractinfo_csr INTO l_get_contractinfo_rec;
    IF c_get_contractinfo_csr%NOTFOUND THEN
        -- KHR ID is invalid
        OKC_API.set_message( p_app_name      => 'OKC',
                             p_msg_name      => G_INVALID_VALUE,
                             p_token1        => G_COL_NAME_TOKEN,
                             p_token1_value  => 'KHR_ID');
        RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;
        CLOSE c_get_contractinfo_csr;

        IF l_get_contractinfo_rec.currency_code IS NULL THEN
           OKC_API.set_message( p_app_name      => 'OKC',
                             p_msg_name      => G_REQUIRED_VALUE,
                             p_token1        => G_COL_NAME_TOKEN,
                             p_token1_value  => 'CURRENCY_CODE');

        RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_k_hdr_tax_params.',
                  'l_get_custacctid_rec.cust_acct_id'||l_get_contractinfo_rec.cust_acct_id);

              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_k_hdr_tax_params.',
                  'l_get_custacctid_rec.bill_to_site_use_id'||l_get_contractinfo_rec.bill_to_site_use_id);

              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_k_hdr_tax_params.',
                  'l_get_custacctid_rec.currency_code'||l_get_contractinfo_rec.currency_code);
    END IF;


        OPEN  l_fndcurrency_csr(l_get_contractinfo_rec.currency_code);
    FETCH l_fndcurrency_csr INTO l_precision, l_minimum_accountable_unit;  -- l_minimum_accountable_unit is optional in fnd_currencies
                                                                                                                                                                   -- but mandatory for tax team
                                                                                                                                                                   -- check with Nilesh
    IF l_fndcurrency_csr%NOTFOUND THEN
       -- currency code is invalid
       OKC_API.set_message( p_app_name      => 'OKC',
                            p_msg_name      => G_INVALID_VALUE,
                            p_token1        => G_COL_NAME_TOKEN,
                            p_token1_value  => 'CURRENCY_CODE');

       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    CLOSE l_fndcurrency_csr;

    -- get the AR cust trx type ID
    OPEN  l_racusttrxtypes_csr;
    FETCH l_racusttrxtypes_csr INTO l_cust_trx_type_id;
    IF l_racusttrxtypes_csr%NOTFOUND THEN
       -- cust trx tyep id is required
       OKC_API.set_message( p_app_name      => 'OKC',
                            p_msg_name      => G_REQUIRED_VALUE,
                            p_token1        => G_COL_NAME_TOKEN,
                            p_token1_value  => 'CUST_TRX_TYPE_ID');

       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    CLOSE l_racusttrxtypes_csr;



    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_k_hdr_tax_params.',
                  'l_precision'||l_precision);

        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_k_hdr_tax_params.',
                  'l_minimum_accountable_unit'||l_minimum_accountable_unit);

        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_k_hdr_tax_params.',
                  'l_cust_trx_type_id'||l_cust_trx_type_id);


    END IF;
     ----------- Identify the determinants : TBC and directly mapped  START ---------------------

     -- Financial Product - K level
         OPEN  l_oklkheaders_csr(p_khr_id);
     FETCH l_oklkheaders_csr INTO l_fin_prod_id_det, l_book_class_code;
     CLOSE l_oklkheaders_csr;

     IF l_fin_prod_id_det IS NULL THEN -- financial product is mandatory on the contract
       OKC_API.set_message( p_app_name      => 'OKC',
                            p_msg_name      => G_REQUIRED_VALUE,
                            p_token1        => G_COL_NAME_TOKEN,
                            p_token1_value  => 'Financial Product');
       RAISE OKL_API.G_EXCEPTION_ERROR;
     END IF;

         IF p_source_trx_name = 'Estimated Billing' AND p_source_table = 'OKL_TRX_QUOTES_B' THEN -- Termination/Repurchase quote creation/updation
            IF p_qtp_code LIKE 'TER%' THEN
               IF p_early_term_yn = 'Y' THEN
                    -- get Early term purchase option - K level

                        l_rulv_rec := l_rulv_empty_rec ;
                        okl_am_util_pvt.get_rule_record(
                                                      p_rgd_code         => 'AMTEOC'
                                     ,p_rdf_code         => 'AMBPOC'
                                     ,p_chr_id           => p_khr_id
                                     ,p_cle_id           => NULL
                                     ,p_message_yn       => FALSE
                                     ,x_rulv_rec         => l_rulv_rec  -- hold a rule instance from okc_rules_b
                                     ,x_return_status    => x_return_status
                                     ,x_msg_count        => x_msg_count
                                     ,x_msg_data         => x_msg_data);

                        IF (x_return_status = OKL_API.G_RET_STS_SUCCESS) THEN
                                -- Rule instance is found
                                IF (l_rulv_rec.rule_information11 IS NOT NULL) AND (l_rulv_rec.rule_information11 <> OKL_API.G_MISS_CHAR) THEN

                                l_prch_opt_det  :=  l_rulv_rec.rule_information11;  -- It can have a value 'NONE' which is OK

                                END IF;


                        END IF;
                        ---
               ELSE
                        -- EOT Purchase Option - K level
                        l_rulv_rec := l_rulv_empty_rec ;
                        okl_am_util_pvt.get_rule_record( p_rgd_code         => 'AMTFOC'
                                     ,p_rdf_code         => 'AMBPOC'
                                     ,p_chr_id           => p_khr_id
                                     ,p_cle_id           => NULL
                                     ,p_message_yn       => FALSE
                                     ,x_rulv_rec         => l_rulv_rec  -- hold a rule instance from okc_rules_b
                                     ,x_return_status    => x_return_status
                                     ,x_msg_count        => x_msg_count
                                     ,x_msg_data         => x_msg_data);

                        IF (x_return_status = OKL_API.G_RET_STS_SUCCESS) THEN
                                -- Rule instance is found
                                IF (l_rulv_rec.rule_information11 IS NOT NULL) AND (l_rulv_rec.rule_information11 <> OKL_API.G_MISS_CHAR) THEN

                                l_prch_opt_det  :=  l_rulv_rec.rule_information11;  -- It can have a value 'NONE' which is OK

                                END IF;

                        END IF;

        -----
               END IF;

           -- Interest Disclosed - K Level
           l_rulv_rec := l_rulv_empty_rec ;
           okl_am_util_pvt.get_rule_record( p_rgd_code         => 'LAHDTX'
                                     ,p_rdf_code         => 'LASTCL'
                                     ,p_chr_id           => p_khr_id
                                     ,p_cle_id           => NULL
                                     ,p_message_yn       => FALSE
                                     ,x_rulv_rec         => l_rulv_rec  -- hold a rule instance from okc_rules_b
                                     ,x_return_status    => x_return_status
                                     ,x_msg_count        => x_msg_count
                                     ,x_msg_data         => x_msg_data);

           IF (x_return_status = OKL_API.G_RET_STS_SUCCESS) THEN
                        -- Rule instance is found
                        IF (l_rulv_rec.rule_information2 IS NOT NULL) AND (l_rulv_rec.rule_information2 <> OKL_API.G_MISS_CHAR) THEN

                                l_int_disclosed_det  :=  l_rulv_rec.rule_information2;
                        ELSE -- interest diclosed is optional on the contract

                                l_int_disclosed_det  := 'N';
                        END IF;

                   ELSE -- interest diclosed is optional on the contract

                        l_int_disclosed_det  := 'N';
                        x_return_status := OKL_API.G_RET_STS_SUCCESS;
                   END IF;
                        ----

            ELSE -- repurchase quote creation / updation
               l_prch_opt_det := NULL; -- Purchase option is not applicable for Repurcsae Quote creation, updation
               l_fin_prod_id_det := NULL; -- financial product is NA for repurchase quote creation, updation
               l_int_disclosed_det  := 'N';
            END IF;
         ELSIF (  (p_source_trx_name = 'Billing' OR p_source_trx_name = 'Credit Memo')
                   AND p_source_table = 'OKL_TXD_AR_LN_DTLS_B'
               ) THEN -- Billing from other transactions (not stream biling)
               IF p_qtp_code LIKE 'TER%' THEN  -- termination quote billing
                        IF p_early_term_yn = 'Y' THEN
                                -- get Early term purchase option
                                l_rulv_rec := l_rulv_empty_rec ;
                                okl_am_util_pvt.get_rule_record(
                                                      p_rgd_code         => 'AMTEOC'
                                     ,p_rdf_code         => 'AMBPOC'
                                     ,p_chr_id           => p_khr_id
                                     ,p_cle_id           => NULL
                                     ,p_message_yn       => FALSE
                                     ,x_rulv_rec         => l_rulv_rec  -- hold a rule instance from okc_rules_b
                                     ,x_return_status    => x_return_status
                                     ,x_msg_count        => x_msg_count
                                     ,x_msg_data         => x_msg_data);

                                IF (x_return_status = OKL_API.G_RET_STS_SUCCESS) THEN
                                        -- Rule instance is found
                                        IF (l_rulv_rec.rule_information11 IS NOT NULL) AND (l_rulv_rec.rule_information11 <> OKL_API.G_MISS_CHAR) THEN

                                        l_prch_opt_det  :=  l_rulv_rec.rule_information11;  -- It can have a value 'NONE' which is OK

                                        END IF;

                                END IF;
                                ---
                        ELSE
                                -- get EOT purchase option
                                l_rulv_rec := l_rulv_empty_rec ;
                                okl_am_util_pvt.get_rule_record(
                                                      p_rgd_code         => 'AMTFOC'
                                     ,p_rdf_code         => 'AMBPOC'
                                     ,p_chr_id           => p_khr_id
                                     ,p_cle_id           => NULL
                                     ,p_message_yn       => FALSE
                                     ,x_rulv_rec         => l_rulv_rec  -- hold a rule instance from okc_rules_b
                                     ,x_return_status    => x_return_status
                                     ,x_msg_count        => x_msg_count
                                     ,x_msg_data         => x_msg_data);

                                IF (x_return_status = OKL_API.G_RET_STS_SUCCESS) THEN
                                        -- Rule instance is found
                                        IF (l_rulv_rec.rule_information11 IS NOT NULL) AND (l_rulv_rec.rule_information11 <> OKL_API.G_MISS_CHAR) THEN

                                        l_prch_opt_det  :=  l_rulv_rec.rule_information11;  -- It can have a value 'NONE' which is OK

                                        END IF;

                                END IF;
                                ---
                        END IF;

                        -- Interest Disclosed - K Level
                        l_rulv_rec := l_rulv_empty_rec ;
                        okl_am_util_pvt.get_rule_record( p_rgd_code         => 'LAHDTX'
                                     ,p_rdf_code         => 'LASTCL'
                                     ,p_chr_id           => p_khr_id
                                     ,p_cle_id           => NULL
                                     ,p_message_yn       => FALSE
                                     ,x_rulv_rec         => l_rulv_rec  -- hold a rule instance from okc_rules_b
                                     ,x_return_status    => x_return_status
                                     ,x_msg_count        => x_msg_count
                                     ,x_msg_data         => x_msg_data);

                        IF (x_return_status = OKL_API.G_RET_STS_SUCCESS) THEN
                                -- Rule instance is found
                                IF (l_rulv_rec.rule_information2 IS NOT NULL) AND (l_rulv_rec.rule_information2 <> OKL_API.G_MISS_CHAR) THEN

                                        l_int_disclosed_det  :=  l_rulv_rec.rule_information2;
                                ELSE -- interest diclosed is optional on the contract

                                        l_int_disclosed_det  := 'N';
                                END IF;

                                ELSE -- interest diclosed is optional on the contract

                                l_int_disclosed_det  := 'N';
                                x_return_status := OKL_API.G_RET_STS_SUCCESS;
                                END IF;
                                ----
               ELSIF p_qtp_code LIKE 'REP%' OR p_purpose_code IN ('AMBSPR','CURE','REPAIR_CHARGE') THEN
                         -- Repurchase quote billing  OR  Remk,asset repair or vendor cure billing

                         l_prch_opt_det := NULL; -- Purchase option is not applicable for Repurcsae Quote billing
                         l_fin_prod_id_det := NULL; -- Fin product is NA for repurchase quote billing
                         l_int_disclosed_det  := 'N';

               -- SECHAWLA 23-NOV-05 4742539 : added the following piece of code : begin
               ELSE
                     -- EOT Purchase Option - K level
                         l_rulv_rec := l_rulv_empty_rec ;
                         okl_am_util_pvt.get_rule_record( p_rgd_code         => 'AMTFOC'
                                     ,p_rdf_code         => 'AMBPOC'
                                     ,p_chr_id           => p_khr_id
                                     ,p_cle_id           => NULL
                                     ,p_message_yn       => FALSE
                                     ,x_rulv_rec         => l_rulv_rec  -- hold a rule instance from okc_rules_b
                                     ,x_return_status    => x_return_status
                                     ,x_msg_count        => x_msg_count
                                     ,x_msg_data         => x_msg_data);

                         IF (x_return_status = OKL_API.G_RET_STS_SUCCESS) THEN
                                -- Rule instance is found
                                IF (l_rulv_rec.rule_information11 IS NOT NULL) AND (l_rulv_rec.rule_information11 <> OKL_API.G_MISS_CHAR) THEN

                                l_prch_opt_det  :=  l_rulv_rec.rule_information11;  -- It can have a value 'NONE' which is OK

                                END IF;

                        END IF;

                        -- Interest Disclosed - K Level
                        l_rulv_rec := l_rulv_empty_rec ;
                        okl_am_util_pvt.get_rule_record( p_rgd_code         => 'LAHDTX'
                                     ,p_rdf_code         => 'LASTCL'
                                     ,p_chr_id           => p_khr_id
                                     ,p_cle_id           => NULL
                                     ,p_message_yn       => FALSE
                                     ,x_rulv_rec         => l_rulv_rec  -- hold a rule instance from okc_rules_b
                                     ,x_return_status    => x_return_status
                                     ,x_msg_count        => x_msg_count
                                     ,x_msg_data         => x_msg_data);

                        IF (x_return_status = OKL_API.G_RET_STS_SUCCESS) THEN
                                -- Rule instance is found
                                IF (l_rulv_rec.rule_information2 IS NOT NULL) AND (l_rulv_rec.rule_information2 <> OKL_API.G_MISS_CHAR) THEN

                                        l_int_disclosed_det  :=  l_rulv_rec.rule_information2;
                                ELSE -- interest diclosed is optional on the contract

                                        l_int_disclosed_det  := 'N';
                                END IF;

                                ELSE -- interest diclosed is optional on the contract

                                l_int_disclosed_det  := 'N';
                                x_return_status := OKL_API.G_RET_STS_SUCCESS;
                                END IF;
                        -- SECHAWLA 23-NOV-05 4742539 : end

               END IF;


         ELSE  -- for all other cases, use EOT purchase option

        -- EOT Purchase Option - K level
        l_rulv_rec := l_rulv_empty_rec ;
        okl_am_util_pvt.get_rule_record( p_rgd_code         => 'AMTFOC'
                                     ,p_rdf_code         => 'AMBPOC'
                                     ,p_chr_id           => p_khr_id
                                     ,p_cle_id           => NULL
                                     ,p_message_yn       => FALSE
                                     ,x_rulv_rec         => l_rulv_rec  -- hold a rule instance from okc_rules_b
                                     ,x_return_status    => x_return_status
                                     ,x_msg_count        => x_msg_count
                                     ,x_msg_data         => x_msg_data);

        IF (x_return_status = OKL_API.G_RET_STS_SUCCESS) THEN
                -- Rule instance is found
                IF (l_rulv_rec.rule_information11 IS NOT NULL) AND (l_rulv_rec.rule_information11 <> OKL_API.G_MISS_CHAR) THEN

                l_prch_opt_det  :=  l_rulv_rec.rule_information11;  -- It can have a value 'NONE' which is OK

                END IF;

        END IF;

        -- Interest Disclosed - K Level
        l_rulv_rec := l_rulv_empty_rec ;
        okl_am_util_pvt.get_rule_record( p_rgd_code         => 'LAHDTX'
                                     ,p_rdf_code         => 'LASTCL'
                                     ,p_chr_id           => p_khr_id
                                     ,p_cle_id           => NULL
                                     ,p_message_yn       => FALSE
                                     ,x_rulv_rec         => l_rulv_rec  -- hold a rule instance from okc_rules_b
                                     ,x_return_status    => x_return_status
                                     ,x_msg_count        => x_msg_count
                                     ,x_msg_data         => x_msg_data);

        IF (x_return_status = OKL_API.G_RET_STS_SUCCESS) THEN
                -- Rule instance is found
                IF (l_rulv_rec.rule_information2 IS NOT NULL) AND (l_rulv_rec.rule_information2 <> OKL_API.G_MISS_CHAR) THEN

                        l_int_disclosed_det  :=  l_rulv_rec.rule_information2;
                ELSE -- interest diclosed is optional on the contract

                        l_int_disclosed_det  := 'N';
                END IF;

                ELSE -- interest diclosed is optional on the contract

                l_int_disclosed_det  := 'N';
                x_return_status := OKL_API.G_RET_STS_SUCCESS;
                END IF;
    END IF;


        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_k_hdr_tax_params.',
                  'l_prch_opt_det'||l_prch_opt_det);
    END IF;


    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_k_hdr_tax_params.',
                  'l_int_disclosed_det'||l_int_disclosed_det);
    END IF;

    -- get the 'bill_to' identifiers -- start
    IF p_source_trx_name NOT IN ('Funding', 'Disbursement', 'Debit Memo') THEN
      get_location_party_ids( p_api_version                  => p_api_version,
                                                  p_init_msg_list                => p_init_msg_list,
                                                  x_return_status                => x_return_status,
                                                  x_msg_count                    => x_msg_count,
                                                  x_msg_data                     => x_msg_data,
                                                  p_cust_acct_id                 => l_get_contractinfo_rec.cust_acct_id,
                                                  p_fin_asset_id                 => null,
                              p_khr_id                       => p_khr_id,
                              x_bill_to_party_site_id        => lx_bill_to_party_site_id,
                              x_bill_to_location_id          => lx_bill_to_location_id,
                              x_bill_to_party_id                 => lx_bill_to_party_id,
                              x_bill_to_site_use_id                  => lx_bill_to_siteuseid,
                              x_ship_to_party_site_id        => lx_ship_to_party_site_id,
                              x_ship_to_location_id          => lx_ship_to_location_id,
                              x_ship_to_party_id             => lx_ship_to_party_id,
                              x_ship_to_site_use_id                  => lx_ship_to_siteuseid);
    END IF;

    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_k_hdr_tax_params.',
                  'lx_bill_to_party_site_id'||lx_bill_to_party_site_id);
    END IF;

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_k_hdr_tax_params.',
                  'lx_bill_to_location_id'||lx_bill_to_location_id);
    END IF;

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_k_hdr_tax_params.',
                  'lx_bill_to_party_id'||lx_bill_to_party_id);
    END IF;
     -- get the 'bill_to' identifiers -- end

    x_cust_acct_id                                      := l_get_contractinfo_rec.cust_acct_id;
    x_bill_to_siteuseid             := l_get_contractinfo_rec.bill_to_site_use_id;
        x_currency_code                                 := l_get_contractinfo_rec.currency_code;
    x_org_id                        := l_get_contractinfo_rec.org_id;
    x_currency_conversion_type      := l_get_contractinfo_rec.conversion_type;
    x_currency_conversion_rate      := l_get_contractinfo_rec.conversion_rate;
    x_currency_conversion_date      := l_get_contractinfo_rec.conversion_rate_date;
    x_contract_start_date           := l_get_contractinfo_rec.start_date;

    x_bill_to_party_site_id         := lx_bill_to_party_site_id;
    x_bill_to_party_id              := lx_bill_to_party_id;
    x_bill_to_location_id           := lx_bill_to_location_id;

    x_book_class_code               := l_book_class_code;
    x_cust_trx_type_id              := l_cust_trx_type_id;
    x_precision                                     := l_precision;
        x_minimum_accountable_unit      := l_minimum_accountable_unit;
        x_prch_opt_det                              := l_prch_opt_det;
        x_fin_prod_id_det                           := l_fin_prod_id_det;
        x_int_disclosed_det             := l_int_disclosed_det;


    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
       FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.get_k_hdr_tax_params ','End(-)');
    END IF;

  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN
         IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.get_k_hdr_tax_params ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
         END IF;

         IF c_get_contractinfo_csr%ISOPEN THEN
            CLOSE c_get_contractinfo_csr;
         END IF;

                 IF l_fndcurrency_csr%ISOPEN THEN
                    CLOSE l_fndcurrency_csr;
                 END IF;

                 IF l_racusttrxtypes_csr%ISOPEN THEN
                    CLOSE l_racusttrxtypes_csr;
                 END IF;

                 IF l_oklkheaders_csr%ISOPEN THEN
                    CLOSE l_oklkheaders_csr;
                 END IF;

         x_return_status := OKL_API.G_RET_STS_ERROR;
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
         IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.get_k_hdr_tax_params ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_UNEXPECTED_ERROR');
         END IF;

         IF c_get_contractinfo_csr%ISOPEN THEN
            CLOSE c_get_contractinfo_csr;
         END IF;

                 IF l_fndcurrency_csr%ISOPEN THEN
                    CLOSE l_fndcurrency_csr;
                 END IF;

                 IF l_racusttrxtypes_csr%ISOPEN THEN
                    CLOSE l_racusttrxtypes_csr;
                 END IF;

                 IF l_oklkheaders_csr%ISOPEN THEN
                    CLOSE l_oklkheaders_csr;
                 END IF;

         x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;

    WHEN OTHERS THEN
         IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
            FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.get_k_hdr_tax_params ',
                  'EXCEPTION :'||sqlerrm);
         END IF;

         IF c_get_contractinfo_csr%ISOPEN THEN
            CLOSE c_get_contractinfo_csr;
         END IF;

                 IF l_fndcurrency_csr%ISOPEN THEN
                    CLOSE l_fndcurrency_csr;
                 END IF;

                 IF l_racusttrxtypes_csr%ISOPEN THEN
                    CLOSE l_racusttrxtypes_csr;
                 END IF;

                 IF l_oklkheaders_csr%ISOPEN THEN
                    CLOSE l_oklkheaders_csr;
                 END IF;

         x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
         -- unexpected error
         OKL_API.set_message(p_app_name      => g_app_name,
                         p_msg_name      => g_unexpected_error,
                         p_token1        => g_sqlcode_token,
                         p_token1_value  => sqlcode,
                         p_token2        => g_sqlerrm_token,
                         p_token2_value  => sqlerrm);

  END get_k_hdr_tax_params;

/*========================================================================
 | PRIVATE PROCEDURE get_asset_tax_params
 |
 | DESCRIPTION
 |    This procedure is called by other procedures in this API to derive
 |    asset level tax determinats
 |
 | CALLED FROM
 |
 |
 | CALLS PROCEDURES/FUNCTIONS
 |     okl_am_util_pvt.get_rule_record
 |
 |
 | PARAMETERS
 |  Input parameters
 |      p_khr_id                        -- Contract ID
 |      p_kle_id                        -- Financial Asset ID
 |      p_source_trx_name       -- Source Transaction Name
 |      p_source_table              -- Source Transaction Table
 |      p_qtp_code              -- Quote Type
 |      p_purpose_code          -- Stream Type Purpose
 |  Output Parameters
 |      x_transfer_of_title             -- Transfer of Title
 |      x_sale_lease_back               -- Sale and Lease Back
 |              x_purchase_of_lease             -- Purchase of Lease
 |          x_usage_of_equipment        -- Usage of Equipment
 |              x_age_of_equipment              -- Age of Equipment
 |              x_vendor_site_id                -- Vendor Site ID
 |
 | KNOWN ISSUES
 |
 | NOTES
 |
 |
 | MODIFICATION HISTORY
 | Date                  Author            Description of Changes
 | 08-APR-05            SECHAWLA           Created
 |
 *=======================================================================*/

  PROCEDURE get_asset_tax_params(
        p_api_version                   IN  NUMBER,
    p_init_msg_list                     IN  VARCHAR2 DEFAULT OKC_API.G_FALSE,
    x_return_status                     OUT NOCOPY VARCHAR2,
    x_msg_count                         OUT NOCOPY NUMBER,
    x_msg_data                          OUT NOCOPY VARCHAR2,
    p_khr_id                        IN  NUMBER,
    p_kle_id                        IN  NUMBER,  -- financial asset id
    p_source_trx_name               IN  VARCHAR2,
    p_source_table                                      IN  VARCHAR2,
    p_qtp_code                      IN  VARCHAR2 DEFAULT NULL, -- Used only for term / repurchase quote
    p_purpose_code                  IN  VARCHAR2 DEFAULT NULL, -- Used only in process_invoice_tax to identify remk,asset repair,vendor cure invoices
    x_transfer_of_title                         OUT NOCOPY VARCHAR2,
    x_sale_lease_back                           OUT NOCOPY VARCHAR2,
    x_purchase_of_lease                         OUT NOCOPY VARCHAR2,
    x_usage_of_equipment                        OUT NOCOPY VARCHAR2,
        x_age_of_equipment                              OUT NOCOPY NUMBER,
        x_vendor_site_id                                OUT NOCOPY NUMBER
        ) IS

    --get the asset number
    CURSOR l_okclines_csr(cp_fin_asset_id IN NUMBER) IS
    SELECT name
    FROM   OKC_K_LINES_v
    WHERE  id = cp_fin_asset_id;

    -- get the model line id (ITEM) for a financial asset id
    CURSOR l_modelline_csr(cp_fin_asset_id IN NUMBER) IS
    SELECT id
    FROM   okc_k_lines_b
    WHERE  cle_id   = cp_fin_asset_id
    AND    lse_id = 34 ; -- model line LSE ID

    -- Get the vendor for asset/service/fee line
    CURSOR l_partyroles_csr(cp_line_id IN NUMBER) IS
    SELECT object1_id1  --is fk to po_vendors.vendor_id
        FROM   okc_k_party_roles_b
    WHERE  cle_id = cp_line_id  --fee/service top line id for fee and service, model line id for asset line
    AND    rle_code = 'OKL_VENDOR';

    -- get the primary pay vendor location for the vendor
    CURSOR l_povendorsites_csr(cp_vendor_id IN NUMBER) IS
    SELECT vendor_site_id
    FROM   po_vendor_sites
    WHERE  vendor_id = cp_vendor_id
    AND    primary_pay_site_flag = 'Y';


    l_return_status                 VARCHAR2(1) := OKL_API.G_RET_STS_SUCCESS;

        l_rulv_rec                      okl_rule_pub.rulv_rec_type;
        l_rulv_empty_rec                                okl_rule_pub.rulv_rec_type;
        l_name                                                  VARCHAR2(150);

        l_transfer_of_title                             VARCHAR2(30);
        l_sale_lease_back                               VARCHAR2(30);
        l_purchase_of_lease                             VARCHAR2(30);
        l_usage_of_equipment                    VARCHAR2(450);
        l_age_of_equipment                              NUMBER;
        l_vendor_site_id                NUMBER;
        l_model_line_id                                 NUMBER;
    l_vendor_id                                         NUMBER;
    l_vndr_cnt                                          NUMBER;
    l_purpose_code                                      VARCHAR2(30);

  BEGIN

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.get_asset_tax_params','Begin(+)');
    END IF;

    --Print Input Variables
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_asset_tax_params.',
              'p_init_msg_list :'||p_init_msg_list);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_asset_tax_params.',
              'p_khr_id :'||to_char(p_khr_id));
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_asset_tax_params.',
              'p_kle_id :'||to_char(p_kle_id));
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_asset_tax_params.',
              'p_source_trx_name :'||p_source_trx_name);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_asset_tax_params.',
              'p_source_table :'||p_source_table);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_asset_tax_params.',
              'p_qtp_code :'||p_qtp_code);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_asset_tax_params.',
              'p_purpose_code :'||p_purpose_code);

    END IF;


    IF ( (p_source_trx_name IS NULL AND p_source_table = 'OKL_TRX_QUOTES_B' AND p_qtp_code LIKE 'REP%')-- Repurchase quote creation/updation
             OR
                 (      (    p_source_trx_name = 'Billing' OR p_source_trx_name = 'Credit Memo' )
               AND (    p_source_table = 'OKL_TXD_AR_LN_DTLS_B' )
               AND (    p_qtp_code LIKE 'REP%' OR p_purpose_code IN ('AMBSPR','CURE','REPAIR_CHARGE')  )
         ) -- Repurchase quote billing OR  Remk,asset repair or vendor cure  billing
           ) THEN

           l_transfer_of_title  := 'N';
           l_sale_lease_back := 'N';
           l_purchase_of_lease := 'N';
           l_usage_of_equipment  := NULL;
           l_age_of_equipment := NULL;
           l_vendor_site_id := NULL;

        ELSE
        -- get transfer of title  -- financial Asset level
        l_rulv_rec := l_rulv_empty_rec ;
        okl_am_util_pvt.get_rule_record(  p_rgd_code         => 'LAASTX'
                                     ,p_rdf_code         => 'LAASTX'
                                     ,p_chr_id           => p_khr_id
                                     ,p_cle_id           => p_kle_id
                                     ,p_message_yn       => FALSE
                                     ,x_rulv_rec         => l_rulv_rec  -- hold a rule instance from okc_rules_b
                                     ,x_return_status    => x_return_status
                                     ,x_msg_count        => x_msg_count
                                     ,x_msg_data         => x_msg_data);

        IF (x_return_status = OKL_API.G_RET_STS_SUCCESS) THEN
                -- Rule instance is found
                IF (l_rulv_rec.rule_information6 IS NOT NULL) AND (l_rulv_rec.rule_information6 <> OKL_API.G_MISS_CHAR) THEN

                        l_transfer_of_title  :=  l_rulv_rec.rule_information6;
                ELSE -- transfer of title is optional on the contract

                        l_transfer_of_title  := 'N';
                END IF;
                ELSE -- transfer of title is optional on the contract

                l_transfer_of_title  := 'N';
                x_return_status := OKL_API.G_RET_STS_SUCCESS;
                END IF;
                -- get transfer of title : end

                -- get sale_lease_back -- financial Asset level
                l_rulv_rec := l_rulv_empty_rec ;
                okl_am_util_pvt.get_rule_record( p_rgd_code         => 'LAASTX'
                                     ,p_rdf_code         => 'LAASTX'
                                     ,p_chr_id           => p_khr_id
                                     ,p_cle_id           => p_kle_id
                                     ,p_message_yn       => FALSE
                                     ,x_rulv_rec         => l_rulv_rec  -- hold a rule instance from okc_rules_b
                                     ,x_return_status    => x_return_status
                                     ,x_msg_count        => x_msg_count
                                     ,x_msg_data         => x_msg_data);

                IF (x_return_status = OKL_API.G_RET_STS_SUCCESS) THEN
                -- Rule instance is found
                IF (l_rulv_rec.rule_information7 IS NOT NULL) AND (l_rulv_rec.rule_information7 <> OKL_API.G_MISS_CHAR) THEN

                        l_sale_lease_back  :=  l_rulv_rec.rule_information7;
                ELSE -- sale and lease back is optional on the contract

                        l_sale_lease_back := 'N';
                END IF;
                ELSE -- sale and lease back is optional on the contract

                l_sale_lease_back := 'N';
                x_return_status := OKL_API.G_RET_STS_SUCCESS;
                END IF;
                -- get sale_lease_back : end


                -- get purchase_of_lease -- financial Asset level
                l_rulv_rec := l_rulv_empty_rec ;
                okl_am_util_pvt.get_rule_record( p_rgd_code         => 'LAASTX'
                                     ,p_rdf_code         => 'LAASTX'
                                     ,p_chr_id           => p_khr_id
                                     ,p_cle_id           => p_kle_id
                                     ,p_message_yn       => FALSE
                                     ,x_rulv_rec         => l_rulv_rec  -- hold a rule instance from okc_rules_b
                                     ,x_return_status    => x_return_status
                                     ,x_msg_count        => x_msg_count
                                     ,x_msg_data         => x_msg_data);

        IF (x_return_status = OKL_API.G_RET_STS_SUCCESS) THEN
                -- Rule instance is found
                IF (l_rulv_rec.rule_information8 IS NOT NULL) AND (l_rulv_rec.rule_information8 <> OKL_API.G_MISS_CHAR) THEN

                        l_purchase_of_lease  :=  l_rulv_rec.rule_information8;
                ELSE -- purchase of lease is optional on the contract

                        l_purchase_of_lease := 'N';
                END IF;
        ELSE -- purchase of lease is optional on the contract

                l_purchase_of_lease := 'N';
                x_return_status := OKL_API.G_RET_STS_SUCCESS;
        END IF;
        -- get purchase_of_lease : end


        -- get usage_of_equipment -- financial Asset level
        l_rulv_rec := l_rulv_empty_rec ;
        okl_am_util_pvt.get_rule_record( p_rgd_code         => 'LAASTX'
                                     ,p_rdf_code         => 'LAASTX'
                                     ,p_chr_id           => p_khr_id
                                     ,p_cle_id           => p_kle_id
                                     ,p_message_yn       => FALSE
                                     ,x_rulv_rec         => l_rulv_rec  -- hold a rule instance from okc_rules_b
                                     ,x_return_status    => x_return_status
                                     ,x_msg_count        => x_msg_count
                                     ,x_msg_data         => x_msg_data);

        IF (x_return_status = OKL_API.G_RET_STS_SUCCESS) THEN
                -- Rule instance is found
                IF (l_rulv_rec.rule_information9 IS NOT NULL) AND (l_rulv_rec.rule_information9 <> OKL_API.G_MISS_CHAR) THEN

                        l_usage_of_equipment  :=  l_rulv_rec.rule_information9;

                END IF;
                ELSE
                x_return_status := OKL_API.G_RET_STS_SUCCESS;
                END IF;
                -- get usage_of_equipment : end


                -- get age_of_equipment  -- financial Asset level
                l_rulv_rec := l_rulv_empty_rec ;
                okl_am_util_pvt.get_rule_record( p_rgd_code         => 'LAASTX'
                                     ,p_rdf_code         => 'LAASTX'
                                     ,p_chr_id           => p_khr_id
                                     ,p_cle_id           => p_kle_id
                                     ,p_message_yn       => FALSE
                                     ,x_rulv_rec         => l_rulv_rec  -- hold a rule instance from okc_rules_b
                                     ,x_return_status    => x_return_status
                                     ,x_msg_count        => x_msg_count
                                     ,x_msg_data         => x_msg_data);

                IF (x_return_status = OKL_API.G_RET_STS_SUCCESS) THEN
                -- Rule instance is found
                IF (l_rulv_rec.rule_information10 IS NOT NULL) AND (l_rulv_rec.rule_information10 <> OKL_API.G_MISS_CHAR) THEN

                        l_age_of_equipment  :=  to_number(l_rulv_rec.rule_information10);

                END IF;
                ELSE
                x_return_status := OKL_API.G_RET_STS_SUCCESS;
                END IF;
                -- get age_of_equipment : end


                -- get Vendor site

                -- Get the Model line for the financial asset line
                OPEN  l_modelline_csr(p_kle_id);
                FETCH l_modelline_csr INTO l_model_line_id;
                CLOSE l_modelline_csr;

                -- get the asset line Vendor
                -- Check if multiple vendors exist.  If so, vendor location is not a determinant
                l_vndr_cnt := 0;
                FOR l_partyroles_rec in l_partyroles_csr(l_model_line_id) LOOP
                l_vndr_cnt := l_vndr_cnt + 1;
                l_vendor_id := l_partyroles_rec.object1_id1;  -- vendor is optional
                END LOOP;


                IF l_vndr_cnt =  1 AND l_vendor_id IS NOT NULL THEN
                -- get the primary vendor site (if defined) from AP
                -- vendor site is applicable for fin asset / service / fee lines / sublines
                OPEN   l_povendorsites_csr(l_vendor_id);
                FETCH  l_povendorsites_csr INTO l_vendor_site_id; -- will be null if none of the sites are checked as primary
                CLOSE  l_povendorsites_csr;

                END IF;
                -- get Vendor site  : end
        END IF;

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_asset_tax_params.',
              'l_transfer_of_title'||l_transfer_of_title);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_asset_tax_params.',
              'l_sale_lease_back'||l_sale_lease_back);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_asset_tax_params.',
              'l_purchase_of_lease'||l_purchase_of_lease);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_asset_tax_params.',
              'l_usage_of_equipment'||l_usage_of_equipment);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_asset_tax_params.',
              'l_age_of_equipment'||l_age_of_equipment);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_asset_tax_params.',
              'l_vendor_site_id'||l_vendor_site_id);
    END IF;

    x_transfer_of_title  := l_transfer_of_title;
    x_sale_lease_back    := l_sale_lease_back;
    x_purchase_of_lease  := l_purchase_of_lease;
    x_usage_of_equipment := l_usage_of_equipment;
        x_age_of_equipment       := l_age_of_equipment;
        x_vendor_site_id         := l_vendor_site_id;

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
       FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.get_asset_tax_params ','End(-)');
    END IF;

  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN

      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.get_asset_tax_params ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
      END IF;

      IF l_okclines_csr%ISOPEN THEN
         CLOSE l_okclines_csr;
      END IF;

          IF l_modelline_csr%ISOPEN THEN
             CLOSE l_modelline_csr;
          END IF;

          IF l_partyroles_csr%ISOPEN THEN
             CLOSE l_partyroles_csr;
          END IF;

          IF l_povendorsites_csr%ISOPEN THEN
             CLOSE l_povendorsites_csr;
          END IF;

          x_return_status := OKL_API.G_RET_STS_ERROR;
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.get_asset_tax_params ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_UNEXPECTED_ERROR');
      END IF;

      IF l_okclines_csr%ISOPEN THEN
         CLOSE l_okclines_csr;
      END IF;

          IF l_modelline_csr%ISOPEN THEN
             CLOSE l_modelline_csr;
          END IF;

          IF l_partyroles_csr%ISOPEN THEN
             CLOSE l_partyroles_csr;
          END IF;

          IF l_povendorsites_csr%ISOPEN THEN
             CLOSE l_povendorsites_csr;
          END IF;


      x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;

    WHEN OTHERS THEN
      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.get_asset_tax_params ',
                  'EXCEPTION :'||sqlerrm);
      END IF;

          IF l_okclines_csr%ISOPEN THEN
         CLOSE l_okclines_csr;
      END IF;

          IF l_modelline_csr%ISOPEN THEN
             CLOSE l_modelline_csr;
          END IF;

          IF l_partyroles_csr%ISOPEN THEN
             CLOSE l_partyroles_csr;
          END IF;

          IF l_povendorsites_csr%ISOPEN THEN
             CLOSE l_povendorsites_csr;
          END IF;


      x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
         -- unexpected error
      OKL_API.set_message(p_app_name      => g_app_name,
                         p_msg_name      => g_unexpected_error,
                         p_token1        => g_sqlcode_token,
                         p_token1_value  => sqlcode,
                         p_token2        => g_sqlerrm_token,
                         p_token2_value  => sqlerrm);

  END get_asset_tax_params;

/*========================================================================
 | PRIVATE PROCEDURE process_tax_schedule_tax
 |
 | DESCRIPTION
 |    This procedure is called from calculate_sales_tax procedure to calculate
 |    tax schedule for customer requests, booking and rebooking
 |
 | CALLED FROM                                  calculate_sales_tax()
 |
 |
 | CALLS PROCEDURES/FUNCTIONS
 |     get_k_hdr_tax_params()
 |     get_asset_tax_params()
 |     get_location_party_ids()
 |     get_ufc_code()
 |     OKL_TAX_INTERFACE_PVT.calculate_tax()
 |
 |
 | PARAMETERS
 |      p_source_trx_id                 -- Source transaction ID
 |      p_source_trx_name       -- Source transaction Name
 |      p_source_table          -- Source table
 |
 | KNOWN ISSUES
 |
 | NOTES
 |
 |
 | MODIFICATION HISTORY
 | Date                  Author            Description of Changes
 | 08-APR-05            SECHAWLA           Created
 | 22-APR-08            SECHAWLA 6975983   Do not error out if there is no tax in eBTax for
 |                                         the Billed stream elements. Create taxable line
 |                                         in okl_tax_sources. There won't be aby tax lines
 |                                         in okl_tax_trx_details.
 |
 *=======================================================================*/
  PROCEDURE process_tax_schedule_tax(
        p_api_version                   IN  NUMBER,
    p_init_msg_list                     IN  VARCHAR2 DEFAULT OKC_API.G_FALSE,
    x_return_status                     OUT NOCOPY VARCHAR2,
    x_msg_count                         OUT NOCOPY NUMBER,
    x_msg_data                          OUT NOCOPY VARCHAR2,
    p_source_trx_id                                     IN  NUMBER,
    p_source_trx_name               IN  VARCHAR2,
    p_source_table                  IN  VARCHAR2) IS

        l_return_status              VARCHAR2(1) := OKL_API.G_RET_STS_SUCCESS;
        i                                                        NUMBER;

        -- get the tax schedule request details
   CURSOR  l_trxrequests_csr(cp_trx_id IN NUMBER, cp_trx_type_name IN VARCHAR2) IS
   SELECT  a.dnz_khr_id, a.start_date, a.end_date, a.try_id, a.legal_entity_id, a.org_id
   FROM    okl_trx_requests a, okl_trx_types_tl b
   WHERE   a.id = cp_trx_id
   AND     a.try_id = b.id
   AND     b.name = cp_trx_type_name
   AND     language = 'US';

   --Cursor to get all the streams / stream elements associated with the contract
   -- This cursor picks up the K, asset, service, fee , service subline, fee subline level payments
   -- We are excluding Insurance streams. Usage lines do not have payments / streams
   CURSOR c_k_unbilled_streams_csr(cp_contract_id IN NUMBER,
                                   cp_date_from   IN DATE,
                                   cp_date_to     IN DATE) IS
   SELECT strm.khr_id,
          strm.kle_id, -- can be null for K level streams
          lse.lty_code,
          NULL asset_number,
          NULL trx_id,
          NULL trx_line_id,
          NULL entity_code,
          NULL event_class_code,
          NULL trx_level_type,
          NULL adjusted_doc_entity_code,
          NULL adjusted_doc_event_class_code,
          NULL adjusted_doc_trx_id,
          NULL adjusted_doc_trx_line_id,
          NULL adjusted_doc_trx_level_type,
          NULL adjusted_doc_number,
          NULL adjusted_doc_date,
          G_TAX_SCHEDULE tax_call_type_code,
          strm.sty_id stream_type_id,
          NULL trx_business_category,
          'ACTIVE' tax_line_status_code,
          selm.id sel_id,
          'N' reported_yn,
          typ.code Stream_Type,
          typ.billable_yn Billable,
          strm.id stream_id,
          strm.transaction_number,
          selm.amount,
          selm.stream_element_date stream_element_date,
          NULL tax_sources_id,
          NULL asset_line_id,
          NULL ship_to_siteuseid,
          NULL inventory_item_id
    FROM  okl_strm_type_b typ,
          okl_streams strm,
          okl_strm_elements selm,
          okc_k_lines_b lines,
          okc_line_styles_b lse
    WHERE  strm.sty_id = typ.id
    AND    strm.id = selm.stm_id
    AND    typ.billable_yn = 'Y'
    AND    strm.say_code ='CURR'
    AND    strm.active_yn = 'Y'
    AND    strm.purpose_code IS NULL
    AND    strm.khr_id = cp_contract_id
    AND    selm.stream_element_date BETWEEN cp_date_from AND cp_date_to
    AND    strm.kle_id = lines.id(+)
    AND    lines.lse_id = lse.id (+)
    AND    lse.lty_code (+) <> 'INSURANCE'
    AND  NOT EXISTS -- tax lines don't exist in AR ( This condition is added to pick up stream elements billed under
                    -- old solution : date_billed may not be null but billing may not have been run completely, so tax
                    -- may not have been calculated in AR
         (SELECT NULL
          FROM  okl_bpd_tld_ar_lines_v cnsld
          WHERE cnsld.sel_id = selm.id)
    ORDER  BY  strm.kle_id, strm.sty_id;

    -- get Billed stream elements
    CURSOR c_k_billed_streams_csr(cp_contract_id IN NUMBER,
                                  cp_date_from   IN DATE,
                                  cp_date_to     IN DATE) IS
    SELECT strm.khr_id,
           strm.kle_id, -- can be null for K level streams
           strm.sty_id stream_type_id,
           selm.id sel_id,
           selm.stream_element_date stream_element_date,
           cnsld.customer_trx_id,
           cnsld.customer_trx_line_id,
           selm.amount --SECHAWLA 22-APR-08 6975983 : added
     FROM  okl_strm_type_b typ,
           okl_streams strm,
           okl_strm_elements selm,
           okc_k_lines_b lines,
           okc_line_styles_b lse,
           okl_bpd_tld_ar_lines_v cnsld
    WHERE  strm.sty_id = typ.id
    AND    strm.id = selm.stm_id
    AND    typ.billable_yn = 'Y'
    AND    strm.say_code ='CURR'
    AND    strm.active_yn = 'Y'
    AND    strm.purpose_code IS NULL
    AND    strm.khr_id = cp_contract_id
    AND    selm.stream_element_date BETWEEN cp_date_from AND cp_date_to
    AND    selm.date_billed IS NOT NULL  -- pick billed stream elements
    AND    strm.kle_id = lines.id(+)
    AND    lines.lse_id = lse.id (+)
    AND    lse.lty_code (+) <> 'INSURANCE'
    AND    cnsld.sel_id = selm.id
    AND    cnsld.khr_id = strm.khr_id;
    --  ORDER  BY  strm.kle_id, strm.sty_id;

    -- get the billing line details
    CURSOR l_txdarlndtls_csr(cp_sel_id IN NUMBER, cp_sty_id IN NUMBER) IS
    SELECT hdr.id trx_id, det.id trx_line_id
    FROM   okl_trx_ar_invoices_b hdr, okl_txl_ar_inv_lns_b line, okl_txd_ar_ln_dtls_b det
    WHERE  det.sel_id = cp_sel_id
    AND    det.sty_id = cp_sty_id
    AND    det.til_id_details = line.id
    AND    line.tai_id = hdr.id;

    -- get all the financial asset lines for the contract
    CURSOR l_finassets_csr(CP_KHR_ID IN NUMBER) IS
    SELECT DISTINCT strm.kle_id fin_asset_id -- is DISTINCT req ? can an asset line have more than one stream types ?
    FROM   okl_strm_type_b typ,
           okl_streams strm,
           okc_k_lines_b lines,
           okc_line_styles_b sty
    WHERE  strm.sty_id = typ.id
    AND    typ.billable_yn = 'Y'
    AND    strm.say_code ='CURR'
    AND    strm.active_yn = 'Y'
    AND    strm.purpose_code IS NULL
    AND    strm.khr_id = CP_KHR_ID
    AND    strm.kle_id = lines.id
    AND    lines.lse_id = sty.id
    AND    sty.lty_code = 'FREE_FORM1';

    --get the asset number
    CURSOR l_okclines_csr(cp_fin_asset_id IN NUMBER) IS
    SELECT name, lse_id
    FROM   OKC_K_LINES_v
    WHERE  id = cp_fin_asset_id;

    -- get contract/line stream types (K1-A1-ST1, K1-A1-ST2, K1-S1-ST3, K1-ST4...)
    CURSOR l_kstreamtypes_csr(cp_khr_id IN NUMBER) IS
    SELECT typ.code Stream_Type,
           strm.id stream_id,
           strm.kle_id line_id,
                   strm.sty_id stream_type_id,
           sty.lty_code
    FROM   okl_strm_type_b typ,
           okl_streams strm,
           okc_k_lines_b lines,
           okc_line_styles_b sty
    WHERE  strm.sty_id = typ.id
    AND    typ.billable_yn = 'Y'
    AND    strm.say_code ='CURR'
    AND    strm.active_yn = 'Y'
    AND    strm.purpose_code IS NULL
    AND    strm.khr_id = cp_khr_id
    AND    strm.kle_id = lines.id(+)
    AND    lines.lse_id = sty.id (+)
    AND    sty.lty_code (+) <> 'INSURANCE';

    -- Get the financial asset associated with a given subline
    CURSOR l_finasset_csr(cp_fee_serviced_asset_line_id IN NUMBER, cp_line_type IN VARCHAR2) IS
    SELECT cim.object1_id1
    FROM   okc_k_lines_b cle, okc_line_styles_b lse, okc_k_items cim
    WHERE  cle.lse_id = lse.id
    AND    lse.lty_code = cp_line_type
    AND    cim.cle_id = cle.id
    AND    cle.id = cp_fee_serviced_asset_line_id;

        -- get the inventory item id and inventory item org for a financial asset
        CURSOR l_invitem_csr(cp_fin_asset_id IN NUMBER) IS
        SELECT cim_model.object1_id1,
           cim_model.object1_id2
    FROM   okc_k_items cim_model,
           okc_k_lines_b cleb_model,
           okc_line_styles_b lseb_model
    WHERE  cim_model.cle_id    = cleb_model.id
    AND    cleb_model.cle_id   = cp_fin_asset_id
    AND    lseb_model.id       = cleb_model.lse_id
    AND    lseb_model.lty_code = 'ITEM';

    -- get the tax lines corresponding to billing tax source ID
    CURSOR l_taxtrxdetails_csr(cp_txs_id IN NUMBER) IS
    SELECT *
    FROM   okl_tax_trx_details
    WHERE  txs_id = cp_txs_id;

    -- Get the vendor for asset/service/fee line
    CURSOR l_partyroles_csr(cp_line_id IN NUMBER) IS
    SELECT object1_id1  --is fk to po_vendors.vendor_id
        FROM   okc_k_party_roles_b
    WHERE  cle_id = cp_line_id  --fee/service top line id for fee and service, model line id for asset line
    AND    rle_code = 'OKL_VENDOR';

    -- get the primary pay vendor location for the vendor
    CURSOR l_povendorsites_csr(cp_vendor_id IN NUMBER) IS
    SELECT vendor_site_id
    FROM   po_vendor_sites
    WHERE  vendor_id = cp_vendor_id
    AND    primary_pay_site_flag = 'Y';

    -- check if stream element is billed in AR
    -- Get total tax for a taxable line
    CURSOR l_get_zx_total_tax(cp_trx_id IN NUMBER, cp_trx_line_id IN NUMBER) IS
    SELECT SUM(zx.tax_amt)  tax_amt
    FROM zx_lines zx
    WHERE zx.trx_id                     = cp_trx_id
    AND   zx.trx_line_id                = cp_trx_line_id
    AND   zx.entity_code                = G_AR_ENTITY_CODE
    AND   zx.event_class_code           = G_INVOICE_EVENT_CLASS_CODE
    AND   zx.application_id             = G_AR_APPLICATION_ID;

    -- Get tax values for a taxable line
    CURSOR l_get_zx_taxable_line_info(cp_trx_id IN NUMBER, cp_trx_line_id IN NUMBER) IS
    SELECT zx.line_amt,
           zx.taxable_amt,
           zx.trx_date,
           zx.tax_determine_date,
           zx.trx_currency_code,
           zx.currency_conversion_type,
           zx.currency_conversion_rate,
           zx.currency_conversion_date,
           zxdet.product_category,
           zxdet.trx_business_category,
           zxdet.product_fisc_classification,
           zxdet.user_defined_fisc_class,
           zxdet.product_type,
           zxdet.internal_organization_id,
           zxdet.input_tax_classification_code,
           zx.legal_entity_id,
           zxdet.line_intended_use
    FROM   zx_lines zx,
           zx_lines_det_factors zxdet
    WHERE  zx.trx_line_id                = cp_trx_line_id
    AND    zx.trx_id                     = cp_trx_id
    AND    zx.internal_organization_id   = MO_GLOBAL.get_current_org_id
    AND    zx.entity_code                = G_AR_ENTITY_CODE
    AND    zx.event_class_code           = G_INVOICE_EVENT_CLASS_CODE
    AND    zx.application_id             = G_AR_APPLICATION_ID
    AND    zx.trx_line_id                = zxdet.trx_line_id
    AND    zx.trx_id                     = zxdet.trx_id
    AND    zx.internal_organization_id   = zxdet.internal_organization_id
    AND    zx.entity_code                = zxdet.entity_code
    AND    zx.event_class_code           = zxdet.event_class_code
    AND    zx.application_id             = zxdet.application_id
    AND    ROWNUM = 1;

    -- get tax lines from eBTax
    CURSOR l_get_zx_tax_lines(cp_trx_id IN NUMBER, cp_trx_line_id IN NUMBER) IS
    SELECT zx.tax_rate_id,
           zx.tax_rate_code,
           zx.tax_exemption_id,
           zx.tax_rate,
           zx.tax_date,
           zx.line_amt,
           zx.internal_organization_id,
           zx.application_id,
           zx.entity_code,
           zx.event_class_code,
           zx.event_type_code,
           zx.trx_id,
           zx.trx_line_id,
           zx.trx_level_type,
           zx.trx_line_number,
           zx.tax_line_number,
           zx.tax_regime_id,
           zx.tax_regime_code,
           zx.tax_id,
           zx.tax,
           zx.tax_status_id,
           zx.tax_status_code,
           zx.tax_apportionment_line_number,
           zx.legal_entity_id,
           zx.trx_number,
           zx.trx_date,
           zx.tax_jurisdiction_id,
           zx.tax_jurisdiction_code,
           zx.tax_type_code,
           zx.tax_currency_code,
           zx.taxable_amt_tax_curr,
           zx.trx_currency_code,
           zx.minimum_accountable_unit,
           zx.precision,
           zx.currency_conversion_type,
           zx.currency_conversion_rate,
           zx.currency_conversion_date,
           zx.tax_determine_date,
           zx.taxable_amt,
           zx.tax_amt,
           zxdet.product_category,
           zxdet.trx_business_category,
           zxdet.product_fisc_classification,
           zxdet.user_defined_fisc_class,
           zxdet.product_type
    FROM zx_lines zx,
         zx_lines_det_factors zxdet
    WHERE  zx.trx_id                     = cp_trx_id
    AND    zx.trx_line_id                = cp_trx_line_id
    AND    zx.internal_organization_id   = MO_GLOBAL.get_current_org_id
    AND    zx.entity_code                = G_AR_ENTITY_CODE
    AND    zx.event_class_code           = G_INVOICE_EVENT_CLASS_CODE
    AND    zx.application_id             = G_AR_APPLICATION_ID
    AND    zx.trx_line_id                = zxdet.trx_line_id
    AND    zx.trx_id                     = zxdet.trx_id
    AND    zx.internal_organization_id   = zxdet.internal_organization_id
    AND    zx.entity_code                = zxdet.entity_code
    AND    zx.event_class_code           = zxdet.event_class_code
    AND    zx.application_id             = zxdet.application_id;

    -- Local Record Structures
        TYPE contract_streams_rec_type IS RECORD (
          khr_id                                                        NUMBER,
          kle_id                                                        NUMBER,
                  lty_code                          VARCHAR2(30),
          asset_number                                          VARCHAR2(15),
          trx_id                                                        NUMBER,
          trx_line_id                                           NUMBER,
          entity_code                                           VARCHAR2(30),
          event_class_code                                      VARCHAR2(30),
          trx_level_type                                        VARCHAR2(30),
          adjusted_doc_entity_code                      VARCHAR2(30),
          adjusted_doc_event_class_code         VARCHAR2(30),
          adjusted_doc_trx_id                           NUMBER,
          adjusted_doc_trx_line_id                      NUMBER,
          adjusted_doc_trx_level_type           VARCHAR2(30),
          adjusted_doc_number                           VARCHAR2(150),
          adjusted_doc_date                                     DATE,
          tax_call_type_code                            VARCHAR2(30),
          stream_type_id                                        NUMBER,
          trx_business_category                         VARCHAR2(30),
          tax_line_status_code                          VARCHAR2(30),
          sel_id                                                        NUMBER,
          reported_yn                                           VARCHAR2(1),
          Stream_Type                                           VARCHAR2(150),
          Billable                                                      VARCHAR2(1),
          stream_id                                                     NUMBER,
          transaction_number                    NUMBER,
          amount                                                        NUMBER,
          stream_element_date                           DATE,
          tax_sources_id                    NUMBER,
          asset_line_id                     NUMBER,
          ship_to_siteuseid                 NUMBER,
          inventory_item_id                 NUMBER );

    TYPE bill_ts_tx_src_rec_type IS RECORD (
                BILL_ID                                         NUMBER,
                        TS_KHR_ID                                       NUMBER,
                        TS_KLE_ID                                       NUMBER,
                        BILL_ASSET_NUMBER               VARCHAR2(15),
                        BILL_TRX_ID                                     NUMBER ,
                        BILL_TRX_LINE_ID                                NUMBER ,
                        TS_TRX_ID                                               NUMBER,
                        TS_TRX_LINE_ID                                  NUMBER,
                        TS_STY_ID                                               NUMBER,
                        BILL_TRX_BUSINESS_CATEGORY              VARCHAR2(30),
                        TS_SEL_ID                                               NUMBER,
                        TS_SEL_DATE                                             DATE);

        TYPE asset_level_det_rec_type IS RECORD
        (fin_asset_id                           NUMBER,
         transfer_of_title                      VARCHAR2(30),
         sale_lease_back                        VARCHAR2(30),
         purchase_of_lease                      VARCHAR2(30),
         usage_of_equipment                     VARCHAR2(30),
         vendor_site_id                         NUMBER,
         age_of_equipment                       NUMBER);

        TYPE k_billed_streams_rec_type IS RECORD (
           khr_id                  NUMBER,
           kle_id                  NUMBER,
           sty_id                  NUMBER,
           sel_id                  NUMBER,
           sel_date                DATE,
           customer_trx_id         NUMBER,
           customer_trx_line_id    NUMBER,
	       sel_amount              NUMBER); --SECHAWLA 22-APR-08 6975983 : added;

    TYPE contract_streams_tbl_type IS TABLE OF contract_streams_rec_type INDEX BY BINARY_INTEGER;
    TYPE bill_ts_tx_src_tbl_type IS TABLE OF bill_ts_tx_src_rec_type INDEX BY BINARY_INTEGER;
        TYPE asset_level_det_tbl_type IS TABLE OF asset_level_det_rec_type INDEX BY BINARY_INTEGER;
        TYPE finassets_tbl_type IS TABLE OF l_finassets_csr%ROWTYPE INDEX BY BINARY_INTEGER;
        TYPE kstreamtypes_tbl_type IS TABLE OF l_kstreamtypes_csr%ROWTYPE  INDEX BY BINARY_INTEGER;
        TYPE k_billed_streams_tbl_type IS TABLE OF k_billed_streams_rec_type INDEX BY BINARY_INTEGER;

    l_get_zx_taxable_line_info_rec  l_get_zx_taxable_line_info%ROWTYPE;
    l_ts_asset_level_det_tbl            asset_level_det_tbl_type;
    l_kstreamtypes_tbl              kstreamtypes_tbl_type;
    l_finassets_tbl                             finassets_tbl_type;
        l_contract_streams_tbl          contract_streams_tbl_type;
        l_tax_sources_tbl               tax_sources_tbl_type;
        l_tax_trx_details_tbl           tax_lines_tbl_type;
        l_K_unbilled_streams_rec        contract_streams_rec_type;
        l_bill_ts_tx_src_tbl            bill_ts_tx_src_tbl_type;
        l_k_billed_streams_tbl                  k_billed_streams_tbl_type;
    lx_tax_codes_tbl                tax_codes_tbl_type;
    lx_line_params_tbl              line_params_tbl_type;
    lp_hdr_params_rec               hdr_params_rec_type;

        l_fetch_size                    NUMBER := 10000;

        l_ts_trx_type_id_det            NUMBER;
        l_asset_number                  VARCHAR2(150);

        l_tax_sources_id                NUMBER;

        l_ts_prch_opt_det                               VARCHAR2(450);
        l_ts_fin_prod_id_det                    NUMBER;
        l_ts_int_disclosed_det                  VARCHAR2(30);

        l_ts_transfer_of_title                  VARCHAR2(30);
        l_ts_sale_lease_back                    VARCHAR2(30);
        l_ts_purchase_of_lease                  VARCHAR2(30);
        l_ts_usage_of_equipment                 VARCHAR2(450);
        l_ts_age_of_equipment                   NUMBER;
        l_ts_vendor_site_id             NUMBER;

        l_fin_asset_id                                  NUMBER;
        ind                                                     NUMBER;
        l_asset_line_id                                 NUMBER;
        l_inv_item_org_id                               NUMBER;
        l_contract_streams_tbc                  VARCHAR2(30);
        l_unbilled_strms_exist                  BOOLEAN := FALSE;
        l_bill_ts_tx_src_cnt                    NUMBER;

    j                                                           NUMBER;
    l_cust_trx_type_id                          NUMBER;
    l_vendor_id                                         NUMBER;
    l_vndr_cnt                                          NUMBER;
    l_dummy                                                     VARCHAR2(1);
        l_ts_khr_id                                             NUMBER;
    l_ts_start_date                                     DATE;
    l_ts_end_date                                       DATE;

    l_cust_acct_id                                      NUMBER;
    l_bill_to_siteuseid                 NUMBER;
        l_currency_code                                 VARCHAR2(15);
        l_precision                             NUMBER;
        l_minimum_accountable_unit              NUMBER;

    lx_bill_to_party_site_id        NUMBER;
    lx_bill_to_location_id          NUMBER;
    lx_bill_to_party_id             NUMBER;
    lx_bill_to_siteuseid            NUMBER;
    lx_ship_to_party_site_id        NUMBER;
    lx_ship_to_location_id          NUMBER;
    lx_ship_to_party_id             NUMBER;
    lx_ship_to_siteuseid                NUMBER;

    lx_org_id                       NUMBER;
    lx_book_class_code              VARCHAR2(30);
    lx_currency_conversion_type     VARCHAR2(30);
    lx_currency_conversion_rate     NUMBER;
    lx_currency_conversion_date     DATE;
    lx_contract_start_date          DATE;

        l_name                                                  VARCHAR2(150);
    l_lse_id                        NUMBER;
    l_tax_code_count                NUMBER;
    l_taxation_country              VARCHAR2(2);
    l_ledger_id                     NUMBER;
    l_legal_entity_id               NUMBER;
    l_inv_item_id                   NUMBER;
    l_inv_org_id                    NUMBER;
    l_org_id                        NUMBER;
    l_value_fetched                 BOOLEAN;

    l_tbc_code                      VARCHAR2(240);
    l_ufc_code                      VARCHAR2(240);
    l_pc_code                       VARCHAR2(240);
    l_tax_class_code                VARCHAR2(50);
    l_total_tax                     NUMBER;

  BEGIN
    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.process_tax_schedule_tax','Begin(+)');
        END IF;

        -- Print Input Variables
        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_schedule_tax.',
                  'p_init_msg_list :'||p_init_msg_list);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_schedule_tax.',
                  'p_source_trx_id :'||p_source_trx_id);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_schedule_tax.',
                  'p_source_trx_name :'||p_source_trx_name);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_schedule_tax.',
                  'p_source_table :'||p_source_table);
        END IF;

    x_return_status := OKL_API.G_RET_STS_SUCCESS;

    OPEN  l_trxrequests_csr(p_source_trx_id, p_source_trx_name);
        FETCH l_trxrequests_csr INTO l_ts_khr_id, l_ts_start_date, l_ts_end_date,
                                 l_ts_trx_type_id_det, l_legal_entity_id, l_org_id;
    IF l_trxrequests_csr%NOTFOUND THEN
      -- source trx id is invalid
      OKC_API.set_message( p_app_name      => 'OKC',
                           p_msg_name      => G_INVALID_VALUE,
                           p_token1        => G_COL_NAME_TOKEN,
                           p_token1_value  => 'SOURCE_TRX_ID');
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    CLOSE l_trxrequests_csr;

    -- Fetch the Ledger info
    l_ledger_id := okl_accounting_util.get_set_of_books_id;

    -- Fetch the Tax country
    l_taxation_country := get_default_taxation_country(x_return_status     => x_return_status,
                                                       x_msg_count         => x_msg_count,
                                                       x_msg_data          => x_msg_data,
                                                       p_legal_entity_id   => l_legal_entity_id);

    -- Get K header level tax parameters
    get_k_hdr_tax_params(
                                        p_api_version                  => p_api_version,
                                p_init_msg_list                => OKC_API.G_FALSE,
                                x_return_status                => x_return_status,
                                x_msg_count                    => x_msg_count,
                                x_msg_data                     => x_msg_data,
                                p_khr_id                       => l_ts_khr_id,
                                p_source_trx_name              => p_source_trx_name,
                            p_source_table                                 => p_source_table,
                                x_cust_acct_id                             => l_cust_acct_id,
                                        x_bill_to_siteuseid            => lx_bill_to_siteuseid,
                                        x_currency_code                            => l_currency_code,
                                x_cust_trx_type_id             => l_cust_trx_type_id,
                                x_precision                                        => l_precision,
                                        x_minimum_accountable_unit     => l_minimum_accountable_unit,
                                        x_prch_opt_det                             => l_ts_prch_opt_det,
                                        x_fin_prod_id_det                          => l_ts_fin_prod_id_det,
                                        x_int_disclosed_det                        => l_ts_int_disclosed_det,
                    x_org_id                       => lx_org_id,
                    x_book_class_code              => lx_book_class_code,
                    x_bill_to_party_site_id        => lx_bill_to_party_site_id,
                    x_bill_to_party_id             => lx_bill_to_party_id,
                    x_bill_to_location_id          => lx_bill_to_location_id,
                    x_currency_conversion_type     => lx_currency_conversion_type,
                    x_currency_conversion_rate     => lx_currency_conversion_rate,
                    x_currency_conversion_date     => lx_currency_conversion_date,
                    x_contract_start_date          => lx_contract_start_date);

    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    --------------- Process Billed Stream elements - Start -------------------

    -- Check if any of the stream elements between the given date range are
    -- billed (under old/new solution) If so, insert already calculated tax
    -- lines into tax sources and tax trx details with trx type of
    -- 'Tax Schedule'  If Billed under new solution, then tax would have been
    -- calculated under 'Billing' transaction type and tax lines inserted into
    -- okl_tax_sources/okl_tax_trx_detials. Insert these tax lines back into tax
    -- sources/tax trx details with transaction type of 'Tax Schedule'

    l_bill_ts_tx_src_cnt := 0;
    l_bill_ts_tx_src_tbl.DELETE;
    OPEN  c_k_billed_streams_csr(l_ts_khr_id, l_ts_start_date, l_ts_end_date);
    LOOP
      l_k_billed_streams_tbl.DELETE;
      FETCH c_k_billed_streams_csr BULK COLLECT INTO l_k_billed_streams_tbl LIMIT l_fetch_size;

          IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_schedule_tax.',
                              'l_k_billed_streams_tbl.COUNT '||l_k_billed_streams_tbl.COUNT);
          END IF;

          IF l_k_billed_streams_tbl.COUNT > 0 THEN

        l_tax_sources_tbl.DELETE;
                l_tax_trx_details_tbl.DELETE;
                i := 1;
        FOR k IN l_k_billed_streams_tbl.FIRST..l_k_billed_streams_tbl.LAST LOOP

          l_total_tax := 0;

          OPEN  l_get_zx_taxable_line_info(l_k_billed_streams_tbl(k).customer_trx_id, l_k_billed_streams_tbl(k).customer_trx_line_id);
          FETCH l_get_zx_taxable_line_info INTO l_get_zx_taxable_line_info_rec;
          IF l_get_zx_taxable_line_info%NOTFOUND THEN  -- data should exist in the billing tables
            --SECHAWLA 22-APR-08 6975983 : begin
            --SECHAWLA 22-APR-08 6975983 : shouldn't fail if no tax calculated in eBTax for AR Invoice
            /*
			OKL_API.set_message( p_app_name      => 'OKL',
                                 p_msg_name      => 'OKL_TX_NO_BILLING_INFO');
            RAISE OKL_API.G_EXCEPTION_ERROR;
            */
            -- In scenario where there is no tax in eBTax for billed AR invoices (stream elements),
			-- Tax determinants can not be derived. Tax determinants are passed to AR through Ar Interface
			-- But these are not stored in actual AR tables. When AR makes tax call to eBTax, these determinants
			-- are passed to ebTax and stored in eBTax. Since in this case, there is no data in eBTax tables,
			-- it is not possible to derive these values. Hence storing Null values
            l_get_zx_taxable_line_info_rec.trx_business_category := NULL;
            l_get_zx_taxable_line_info_rec.product_category := NULL;
            l_get_zx_taxable_line_info_rec.user_defined_fisc_class := NULL;
            l_get_zx_taxable_line_info_rec.line_intended_use := NULL;
            l_get_zx_taxable_line_info_rec.input_tax_classification_code := NULL;
            l_get_zx_taxable_line_info_rec.product_type := NULL;
            l_get_zx_taxable_line_info_rec.product_fisc_classification := NULL;


            l_get_zx_taxable_line_info_rec.internal_organization_id := l_org_id;
            l_get_zx_taxable_line_info_rec.legal_entity_id := l_legal_entity_id;

            l_get_zx_taxable_line_info_rec.line_amt  := l_k_billed_streams_tbl(k).sel_amount;
            l_get_zx_taxable_line_info_rec.taxable_amt := l_k_billed_streams_tbl(k).sel_amount;

            l_get_zx_taxable_line_info_rec.trx_date := l_k_billed_streams_tbl(k).sel_date;

            l_get_zx_taxable_line_info_rec.tax_determine_date := NULL;

            l_get_zx_taxable_line_info_rec.trx_currency_code := l_currency_code;
            l_get_zx_taxable_line_info_rec.currency_conversion_type := NULL;
            l_get_zx_taxable_line_info_rec.currency_conversion_rate := NULL;
            l_get_zx_taxable_line_info_rec.currency_conversion_date := NULL;
            --SECHAWLA 22-APR-08 6975983 : end
          END IF;
          CLOSE l_get_zx_taxable_line_info;

          OPEN l_get_zx_total_tax(l_k_billed_streams_tbl(k).customer_trx_id, l_k_billed_streams_tbl(k).customer_trx_line_id);
          FETCH l_get_zx_total_tax INTO l_total_tax;
          CLOSE l_get_zx_total_tax;

          IF (l_k_billed_streams_tbl(k).kle_id IS NOT NULL) THEN
                OPEN  l_okclines_csr(l_k_billed_streams_tbl(k).kle_id);
                    FETCH l_okclines_csr INTO l_name, l_lse_id;
                    CLOSE l_okclines_csr;
          END IF;

          -- populate tax sources table with transaction type of 'Tax Schedule'
          l_tax_sources_tbl(k).id                               := get_seq_id;
          l_tax_sources_tbl(k).kle_id                           := l_k_billed_streams_tbl(k).kle_id;
          l_tax_sources_tbl(k).khr_id                           := l_ts_khr_id;

          IF (l_lse_id = 33) THEN
            l_tax_sources_tbl(k).asset_number                   := l_name;
          END IF;

          l_tax_sources_tbl(k).trx_id                           := p_source_trx_id;
          l_tax_sources_tbl(k).trx_line_id                      := l_tax_sources_tbl(k).id;
          l_tax_sources_tbl(k).entity_code                      := G_TAX_SCH_ENTITY_CODE;
          l_tax_sources_tbl(k).event_class_code                 := G_TAX_SCHEDULE;
          l_tax_sources_tbl(k).trx_level_type                   := G_TRX_LEVEL_TYPE;
          l_tax_sources_tbl(k).adjusted_doc_entity_code         := null;
          l_tax_sources_tbl(k).adjusted_doc_event_class_code    := null;
          l_tax_sources_tbl(k).adjusted_doc_trx_id              := null;
          l_tax_sources_tbl(k).adjusted_doc_trx_line_id         := null;
          l_tax_sources_tbl(k).adjusted_doc_trx_level_type      := null;
          l_tax_sources_tbl(k).adjusted_doc_number              := null;
          l_tax_sources_tbl(k).adjusted_doc_date                := null;
          l_tax_sources_tbl(k).tax_call_type_code               := G_TAX_SCHEDULE;
          l_tax_sources_tbl(k).sty_id                           := l_k_billed_streams_tbl(k).sty_id;
          l_tax_sources_tbl(k).trx_business_category            := l_get_zx_taxable_line_info_rec.trx_business_category;
          l_tax_sources_tbl(k).tax_line_status_code             := G_ACTIVE_STATUS;
          l_tax_sources_tbl(k).sel_id                           := l_k_billed_streams_tbl(k).sel_id;
          l_tax_sources_tbl(k).reported_yn                      := 'Y';
                  l_tax_sources_tbl(k).program_id                       := null;
                  l_tax_sources_tbl(k).request_id                       := null;
                  l_tax_sources_tbl(k).program_application_id           := null;
                  l_tax_sources_tbl(k).program_update_date              := null;
                  l_tax_sources_tbl(k).attribute_category               := null;

                  l_tax_sources_tbl(k).attribute1                    := null;
                  l_tax_sources_tbl(k).attribute2                    := null;
                  l_tax_sources_tbl(k).attribute3                    := null;
                  l_tax_sources_tbl(k).attribute4                    := null;
                  l_tax_sources_tbl(k).attribute5                    := null;
                  l_tax_sources_tbl(k).attribute6                    := null;
                  l_tax_sources_tbl(k).attribute7                    := null;
                  l_tax_sources_tbl(k).attribute8                    := null;
                  l_tax_sources_tbl(k).attribute9                    := null;
                  l_tax_sources_tbl(k).attribute10                   := null;
                  l_tax_sources_tbl(k).attribute11                   := null;
                  l_tax_sources_tbl(k).attribute12                   := null;
                  l_tax_sources_tbl(k).attribute13                   := null;
                  l_tax_sources_tbl(k).attribute14                   := null;
                  l_tax_sources_tbl(k).attribute15                   := null;
                  l_tax_sources_tbl(k).created_by                    := G_USER_ID;
                  l_tax_sources_tbl(k).creation_date                 := SYSDATE;
                  l_tax_sources_tbl(k).last_updated_by               := G_USER_ID;
                  l_tax_sources_tbl(k).last_update_date              := SYSDATE;
                  l_tax_sources_tbl(k).last_update_login             := G_LOGIN_ID;
                  l_tax_sources_tbl(k).object_version_number         := null;

          l_tax_sources_tbl(k).line_name                 := l_name;
          l_tax_sources_tbl(k).application_id            := G_OKL_APPLICATION_ID;
          l_tax_sources_tbl(k).tax_reporting_flag        := 'Y';
          l_tax_sources_tbl(k).default_taxation_country  := l_taxation_country;
          l_tax_sources_tbl(k).product_category          := l_get_zx_taxable_line_info_rec.product_category;
          l_tax_sources_tbl(k).user_defined_fisc_class   := l_get_zx_taxable_line_info_rec.user_defined_fisc_class;
          l_tax_sources_tbl(k).line_intended_use         := l_get_zx_taxable_line_info_rec.line_intended_use;
          l_tax_sources_tbl(k).tax_classification_code   := l_get_zx_taxable_line_info_rec.input_tax_classification_code;
          l_tax_sources_tbl(k).inventory_item_id         := null;
          l_tax_sources_tbl(k).bill_to_cust_acct_id      := l_cust_acct_id;
          l_tax_sources_tbl(k).org_id                    := l_get_zx_taxable_line_info_rec.internal_organization_id;
          l_tax_sources_tbl(k).legal_entity_id           := l_get_zx_taxable_line_info_rec.legal_entity_id;
          l_tax_sources_tbl(k).line_amt                  := l_get_zx_taxable_line_info_rec.line_amt;
          l_tax_sources_tbl(k).assessable_value          := l_get_zx_taxable_line_info_rec.taxable_amt;

          l_tax_sources_tbl(k).total_tax                 := l_total_tax;
          l_tax_sources_tbl(k).trx_date                  := l_get_zx_taxable_line_info_rec.trx_date;
          l_tax_sources_tbl(k).try_id                    := l_ts_trx_type_id_det ; --SECHAWLA 22-APR-08 6975983 --null;

          l_tax_sources_tbl(k).product_type                    := l_get_zx_taxable_line_info_rec.product_type;
          l_tax_sources_tbl(k).product_fisc_classification     := l_get_zx_taxable_line_info_rec.product_fisc_classification;
          l_tax_sources_tbl(k).provnl_tax_determination_date   := l_get_zx_taxable_line_info_rec.tax_determine_date;
          l_tax_sources_tbl(k).ship_to_location_id             := null;
          l_tax_sources_tbl(k).ship_to_party_site_id           := null;
          l_tax_sources_tbl(k).ship_to_party_id                := null;
          l_tax_sources_tbl(k).bill_to_party_site_id           := null;
          l_tax_sources_tbl(k).bill_to_location_id             := null;
          l_tax_sources_tbl(k).bill_to_party_id                := null;
          l_tax_sources_tbl(k).ship_to_cust_acct_site_use_id   := null;
          l_tax_sources_tbl(k).bill_to_cust_acct_site_use_id   := null;
          l_tax_sources_tbl(k).trx_currency_code               := l_get_zx_taxable_line_info_rec.trx_currency_code;
          l_tax_sources_tbl(k).currency_conversion_type        := l_get_zx_taxable_line_info_rec.currency_conversion_type;
          l_tax_sources_tbl(k).currency_conversion_rate        := l_get_zx_taxable_line_info_rec.currency_conversion_rate;
          l_tax_sources_tbl(k).currency_conversion_date        := l_get_zx_taxable_line_info_rec.currency_conversion_date;

          -- Populate Tax trx details for each tax source
          FOR l_get_zx_tax_lines_rec IN l_get_zx_tax_lines(l_k_billed_streams_tbl(k).customer_trx_id,
                                                           l_k_billed_streams_tbl(k).customer_trx_line_id) LOOP

            l_tax_trx_details_tbl(i).id                           := get_seq_id;
            l_tax_trx_details_tbl(i).txs_id                       := l_tax_sources_tbl(k).id;
                l_tax_trx_details_tbl(i).tax_determination_date       := l_get_zx_tax_lines_rec.tax_determine_date;
                l_tax_trx_details_tbl(i).tax_rate_id                  := l_get_zx_tax_lines_rec.tax_rate_id;
                l_tax_trx_details_tbl(i).tax_rate_code                := l_get_zx_tax_lines_rec.tax_rate_code;
                l_tax_trx_details_tbl(i).taxable_amount               := l_get_zx_tax_lines_rec.taxable_amt;
                l_tax_trx_details_tbl(i).tax_exemption_id             := l_get_zx_tax_lines_rec.tax_exemption_id;
                l_tax_trx_details_tbl(i).tax_rate                     := l_get_zx_tax_lines_rec.tax_rate;
                l_tax_trx_details_tbl(i).tax_amount                   := l_get_zx_tax_lines_rec.tax_amt;

            l_tax_trx_details_tbl(i).tax_date                     := l_get_zx_tax_lines_rec.tax_date;
            l_tax_trx_details_tbl(i).line_amt                     := l_get_zx_tax_lines_rec.line_amt;
            l_tax_trx_details_tbl(i).internal_organization_id     := l_get_zx_tax_lines_rec.internal_organization_id;
            l_tax_trx_details_tbl(i).application_id               := l_get_zx_tax_lines_rec.application_id;
            l_tax_trx_details_tbl(i).entity_code                  := l_get_zx_tax_lines_rec.entity_code;
            l_tax_trx_details_tbl(i).event_class_code             := l_get_zx_tax_lines_rec.event_class_code;
            l_tax_trx_details_tbl(i).event_type_code              := l_get_zx_tax_lines_rec.event_type_code;
            l_tax_trx_details_tbl(i).trx_id                       := l_tax_sources_tbl(k).trx_id;
            l_tax_trx_details_tbl(i).trx_line_id                  := l_tax_sources_tbl(k).trx_line_id;
            l_tax_trx_details_tbl(i).trx_level_type               := l_get_zx_tax_lines_rec.trx_level_type;
            l_tax_trx_details_tbl(i).trx_line_number              := l_get_zx_tax_lines_rec.trx_line_number;
            l_tax_trx_details_tbl(i).tax_line_number              := l_get_zx_tax_lines_rec.tax_line_number;
            l_tax_trx_details_tbl(i).tax_regime_id                := l_get_zx_tax_lines_rec.tax_regime_id;
            l_tax_trx_details_tbl(i).tax_regime_code              := l_get_zx_tax_lines_rec.tax_regime_code;
            l_tax_trx_details_tbl(i).tax_id                       := l_get_zx_tax_lines_rec.tax_id;
            l_tax_trx_details_tbl(i).tax                          := l_get_zx_tax_lines_rec.tax;
            l_tax_trx_details_tbl(i).tax_status_id                := l_get_zx_tax_lines_rec.tax_status_id;
            l_tax_trx_details_tbl(i).tax_status_code              := l_get_zx_tax_lines_rec.tax_status_code;
            l_tax_trx_details_tbl(i).tax_apportionment_line_number := l_get_zx_tax_lines_rec.tax_apportionment_line_number;
            l_tax_trx_details_tbl(i).legal_entity_id              := l_get_zx_tax_lines_rec.legal_entity_id;
            l_tax_trx_details_tbl(i).trx_number                   := l_get_zx_tax_lines_rec.trx_number;
            l_tax_trx_details_tbl(i).trx_date                     := l_get_zx_tax_lines_rec.trx_date;
            l_tax_trx_details_tbl(i).tax_jurisdiction_id          := l_get_zx_tax_lines_rec.tax_jurisdiction_id;
            l_tax_trx_details_tbl(i).tax_jurisdiction_code        := l_get_zx_tax_lines_rec.tax_jurisdiction_code;
            l_tax_trx_details_tbl(i).tax_type_code                := l_get_zx_tax_lines_rec.tax_type_code;
            l_tax_trx_details_tbl(i).tax_currency_code            := l_get_zx_tax_lines_rec.tax_currency_code;
            l_tax_trx_details_tbl(i).taxable_amt_tax_curr         := l_get_zx_tax_lines_rec.taxable_amt_tax_curr;
            l_tax_trx_details_tbl(i).trx_currency_code            := l_get_zx_tax_lines_rec.trx_currency_code;
            l_tax_trx_details_tbl(i).minimum_accountable_unit     := l_get_zx_tax_lines_rec.minimum_accountable_unit;
            l_tax_trx_details_tbl(i).precision                    := l_get_zx_tax_lines_rec.precision;
            l_tax_trx_details_tbl(i).currency_conversion_type     := l_get_zx_tax_lines_rec.currency_conversion_type;
            l_tax_trx_details_tbl(i).currency_conversion_rate     := l_get_zx_tax_lines_rec.currency_conversion_rate;
            l_tax_trx_details_tbl(i).currency_conversion_date     := l_get_zx_tax_lines_rec.currency_conversion_date;

            -- columns for backward compatibility
            l_tax_trx_details_tbl(i).tax_determine_date           := l_get_zx_tax_lines_rec.tax_determine_date;
            l_tax_trx_details_tbl(i).taxable_amt                  := l_get_zx_tax_lines_rec.taxable_amt;
            l_tax_trx_details_tbl(i).tax_amt                      := l_get_zx_tax_lines_rec.tax_amt;
                l_tax_trx_details_tbl(i).billed_yn                    := 'Y'; -- tax lines calculated by tax engine are not billed
                l_tax_trx_details_tbl(i).tax_call_type_code           := G_TAX_SCHEDULE;

                l_tax_trx_details_tbl(i).program_id                   := null;
                l_tax_trx_details_tbl(i).request_id                   := null;
                l_tax_trx_details_tbl(i).program_application_id       := null;
                l_tax_trx_details_tbl(i).program_update_date          := null;
                l_tax_trx_details_tbl(i).attribute_category           := null;
                l_tax_trx_details_tbl(i).attribute1                   := null;
                l_tax_trx_details_tbl(i).attribute2                   := null;
                l_tax_trx_details_tbl(i).attribute3                   := null;
                l_tax_trx_details_tbl(i).attribute4                   := null;
                l_tax_trx_details_tbl(i).attribute5                   := null;
                l_tax_trx_details_tbl(i).attribute6                   := null;
                l_tax_trx_details_tbl(i).attribute7                   := null;
                l_tax_trx_details_tbl(i).attribute8                   := null;
                l_tax_trx_details_tbl(i).attribute9                   := null;
                l_tax_trx_details_tbl(i).attribute10                  := null;
                l_tax_trx_details_tbl(i).attribute11                  := null;
                l_tax_trx_details_tbl(i).attribute12                  := null;
                l_tax_trx_details_tbl(i).attribute13                  := null;
                l_tax_trx_details_tbl(i).attribute14                  := null;
                l_tax_trx_details_tbl(i).attribute15                  := null;
                l_tax_trx_details_tbl(i).created_by                   := G_USER_ID;
                l_tax_trx_details_tbl(i).creation_date                := SYSDATE;
                l_tax_trx_details_tbl(i).last_updated_by              := G_USER_ID;
                l_tax_trx_details_tbl(i).last_update_date             := SYSDATE;
                l_tax_trx_details_tbl(i).last_update_login            := G_LOGIN_ID;
                l_tax_trx_details_tbl(i).object_version_number        := null;

            i := i + 1;
          END LOOP;

        END LOOP;
      END IF;
      EXIT WHEN c_k_billed_streams_csr%NOTFOUND;
    END LOOP;
    CLOSE c_k_billed_streams_csr;

        -- At this point l_tax_sources_tbl and l_tax_trx_details_tbl tables have
        -- all the data for the billed stream elements

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_schedule_tax.',
                                          'before Insert into okl_tax_sources ');
    END IF;

    ---- Insert into okl_tax_sources begin -----
    BEGIN
      IF l_tax_sources_tbl.COUNT > 0 THEN
        FORALL indx in l_tax_sources_tbl.FIRST..l_tax_sources_tbl.LAST
        -- SAVE EXCEPTIONS
        INSERT INTO okl_tax_sources VALUES l_tax_sources_tbl(indx);
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        IF SQL%BULK_EXCEPTIONS.COUNT > 0 THEN
                  FOR i IN 1..SQL%BULK_EXCEPTIONS.COUNT LOOP
                        OKL_API.set_message(p_app_name      => 'OKL',
                                p_msg_name      => 'OKL_TX_TRX_INS_ERR',
                                p_token1        => 'TABLE_NAME',
                                p_token1_value  => 'OKL_TAX_SOURCES',
                                p_token2        => 'ERROR_CODE',
                                                                p_token2_value  => SQLERRM(-SQL%BULK_EXCEPTIONS(i).ERROR_CODE),
                                                                p_token3        => 'ITERATION',
                                                                p_token3_value  => SQL%BULK_EXCEPTIONS(i).ERROR_INDEX);
                  END LOOP;
                  RAISE OKL_API.G_EXCEPTION_ERROR;
                END IF;
    END;
    ---- Insert into okl_tax_sources end -----

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_schedule_tax.',
                                          'before Insert into okl_tax_trx_details ');
    END IF;

        ---- Insert into okl_tax_trx_details begin -----
    BEGIN
      IF l_tax_trx_details_tbl.COUNT > 0 THEN
        FORALL indx IN l_tax_trx_details_tbl.FIRST..l_tax_trx_details_tbl.LAST
        -- SAVE EXCEPTIONS
          INSERT INTO okl_tax_trx_details VALUES l_tax_trx_details_tbl(indx);
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        IF SQL%BULK_EXCEPTIONS.COUNT > 0 THEN
                  FOR i IN 1..SQL%BULK_EXCEPTIONS.COUNT LOOP
                        OKL_API.set_message(p_app_name      => 'OKL',
                                p_msg_name      => 'OKL_TX_TRX_INS_ERR',
                                p_token1        => 'TABLE_NAME',
                                p_token1_value  => 'OKL_TAX_TRX_DETAILS',
                                p_token2        => 'ERROR_CODE',
                                                                p_token2_value  => SQLERRM(-SQL%BULK_EXCEPTIONS(i).ERROR_CODE),
                                                                p_token3        => 'ITERATION',
                                                                p_token3_value  => SQL%BULK_EXCEPTIONS(i).ERROR_INDEX);
                  END LOOP;
                  RAISE OKL_API.G_EXCEPTION_ERROR;
                END IF;
    END;

        ---- Insert into okl_tax_trx_details end -----

        -- At this point tax sources and tax trx details have been created for the already billed
        -- and taxed stream elements under transaction type 'Tax Schedule'

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_schedule_tax.',
                                          'Process Billed Stream elements end ');
    END IF;
    --------------- Process Billed Stream elements - End -------------------

    -----------------Process Unbilled Stream elements - Start --------------
    OPEN  c_k_unbilled_streams_csr(l_ts_khr_id, l_ts_start_date, l_ts_end_date);
    FETCH c_k_unbilled_streams_csr INTO l_K_unbilled_streams_rec;
    IF c_k_unbilled_streams_csr%FOUND THEN
      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_schedule_tax.',
                                          'l_unbilled_strms_exist = TRUE ');
      END IF;

      l_unbilled_strms_exist := TRUE;
    END IF;
    CLOSE c_k_unbilled_streams_csr;

    IF (l_unbilled_strms_exist) THEN -- Processing for Unbilled streams - Start

          -------------- Get financial asset line level TBC Determinants ---------------
      i := 0;
      OPEN l_finassets_csr(l_ts_khr_id);
      LOOP
        l_finassets_tbl.DELETE;
        FETCH l_finassets_csr BULK COLLECT INTO l_finassets_tbl LIMIT l_fetch_size;

        IF l_finassets_tbl.COUNT > 0 THEN
          FOR K IN l_finassets_tbl.FIRST..l_finassets_tbl.LAST LOOP

                get_asset_tax_params(
                                                                p_api_version                  => p_api_version,
                                                        p_init_msg_list                => OKC_API.G_FALSE,
                                                        x_return_status                => x_return_status,
                                                        x_msg_count                    => x_msg_count,
                                                        x_msg_data                     => x_msg_data,
                                                        p_khr_id                       => l_ts_khr_id,
                                                        p_kle_id                       => l_finassets_tbl(k).fin_asset_id,
                                                        p_source_trx_name              => p_source_trx_name,
                                                p_source_table                             => p_source_table,
                                                        x_transfer_of_title                        => l_ts_transfer_of_title,
                                                        x_sale_lease_back                          => l_ts_sale_lease_back,
                                                        x_purchase_of_lease                        => l_ts_purchase_of_lease,
                                                        x_usage_of_equipment               => l_ts_usage_of_equipment,
                                                                x_age_of_equipment                         => l_ts_age_of_equipment,
                                                                x_vendor_site_id                       => l_ts_vendor_site_id);

            IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
                  RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
                ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
                  RAISE OKL_API.G_EXCEPTION_ERROR;
                END IF;

                l_ts_asset_level_det_tbl(i).fin_asset_id := l_finassets_tbl(k).fin_asset_id;
                l_ts_asset_level_det_tbl(i).transfer_of_title := l_ts_transfer_of_title;
                l_ts_asset_level_det_tbl(i).sale_lease_back := l_ts_sale_lease_back;
                l_ts_asset_level_det_tbl(i).purchase_of_lease := l_ts_purchase_of_lease;
                l_ts_asset_level_det_tbl(i).usage_of_equipment  := l_ts_usage_of_equipment;
                l_ts_asset_level_det_tbl(i).vendor_site_id      := l_ts_vendor_site_id;
                l_ts_asset_level_det_tbl(i).age_of_equipment := l_ts_age_of_equipment;

                i := i + 1;
          END LOOP;
        END IF;
        EXIT WHEN l_finassets_csr%NOTFOUND;
      END LOOP;
      CLOSE l_finassets_csr;

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_schedule_tax.',
                                          'after hdr level and asset level determinant fetch ');
      END IF;

      -------- Get all codes at stream type level (for each unique combination of K/Line and stream type) -----------

      OPEN l_kstreamtypes_csr(l_ts_khr_id);
      LOOP
        l_kstreamtypes_tbl.DELETE;
        FETCH l_kstreamtypes_csr BULK COLLECT INTO l_kstreamtypes_tbl LIMIT l_fetch_size;

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_schedule_tax.',
                                                          'l_kstreamtypes_tbl.COUNT '||l_kstreamtypes_tbl.COUNT);
        END IF;

        IF l_kstreamtypes_tbl.COUNT > 0 THEN

          l_tax_code_count := 1;
          lx_tax_codes_tbl.DELETE;
          FOR K IN l_kstreamtypes_tbl.FIRST..l_kstreamtypes_tbl.LAST LOOP

                IF (l_kstreamtypes_tbl(k).line_id IS NULL OR
                l_kstreamtypes_tbl(k).lty_code IN ('SOLD_SERVICE', 'FEE')) THEN

              -- K level stream or service/fee line level stream
              IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_schedule_tax.',
                                                                          'hdr level OR Service/Fee Line level ');
                  END IF;

              l_vendor_id := NULL;
              l_ts_vendor_site_id := NULL;

              -- Vendor site is applicable for fin asset / service / fee lines / sublines
              -- Vendor site is not applicable at the K level
              IF l_kstreamtypes_tbl(k).line_id IS NOT NULL THEN -- service or fee line
                -- Check if multiple vendors exist.  If so, vendor location is
                -- not a determinant, get the service / fee line Vendor
                        l_vndr_cnt := 0;

                FOR l_partyroles_rec IN l_partyroles_csr(l_kstreamtypes_tbl(k).line_id) LOOP -- pass top service/fee line id
                          l_vndr_cnt := l_vndr_cnt + 1;
                          l_vendor_id := l_partyroles_rec.object1_id1;  -- vendor is optional
                        END LOOP;

                        IF l_vndr_cnt =  1 AND l_vendor_id IS NOT NULL THEN
                          -- get the primary pay vendor site (if defined) from AP
                          OPEN   l_povendorsites_csr(l_vendor_id);
                          FETCH  l_povendorsites_csr INTO l_ts_vendor_site_id; -- will be null if none of the sites are checked as primary
                          CLOSE  l_povendorsites_csr;
                        END IF;
                  END IF;

              populate_tax_codes( p_api_version                  => p_api_version,
                                  p_init_msg_list                => OKC_API.G_FALSE,
                                  x_return_status                => x_return_status,
                                  x_msg_count                    => x_msg_count,
                                  x_msg_data                     => x_msg_data,
                                  p_prch_opt_det                                 =>     l_ts_prch_opt_det,
                                  p_fin_prod_id_det                              =>     l_ts_fin_prod_id_det,
                                  p_int_disclosed_det                    =>     l_ts_int_disclosed_det,
                                  p_title_trnsfr_code                    =>     null,
                                  p_sale_lease_back_code                 =>     null,
                                  p_lease_purchased_code                 =>     null,
                                  p_equip_usage_code                     =>     null,
                                  p_vendor_site_id                           => l_ts_vendor_site_id,
                                  p_age_of_equip                                 =>     null,
                                  p_source_trx_name              => p_source_trx_name,
                                  p_book_class_code              => lx_book_class_code,
                                  p_tax_code_cnt                 => l_tax_code_count,
                                  p_sty_id                       => l_kstreamtypes_tbl(k).stream_type_id,
                                  p_try_id                       => l_ts_trx_type_id_det,
                                  p_tax_country_code             => l_taxation_country,
                                  p_khr_id                       => l_ts_khr_id,
                                  p_kle_id                       => l_kstreamtypes_tbl(k).line_id,
                                  p_bill_to_party_site_id        => lx_bill_to_party_site_id,
                                  p_bill_to_location_id          => lx_bill_to_location_id,
                                  p_bill_to_party_id             => lx_bill_to_party_id,
                                  p_bill_to_cust_acct_site_id    => lx_bill_to_siteuseid,
                                  p_org_id                       => l_org_id,
                                  p_trx_date                     => l_ts_start_date,
                                  px_tax_codes_tbl               => lx_tax_codes_tbl);

              IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
                    RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
                  ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
                        RAISE OKL_API.G_EXCEPTION_ERROR;
                  END IF;

              l_tax_code_count := l_tax_code_count + 1;

            ELSIF l_kstreamtypes_tbl(k).lty_code IN ('FREE_FORM1','LINK_SERV_ASSET','LINK_FEE_ASSET') THEN
                  -- Asset level stream or service/fee sub line level stream

                  IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_schedule_tax.',
                                                                          'asset / service subline / fee subline level ');
                  END IF;

                  IF l_kstreamtypes_tbl(k).lty_code = 'FREE_FORM1' THEN
                        l_fin_asset_id := l_kstreamtypes_tbl(k).line_id;
                  ELSE
                        -- If subline level, get the attached fin asset id
                        OPEN  l_finasset_csr(l_kstreamtypes_tbl(k).line_id, l_kstreamtypes_tbl(k).lty_code);
                        FETCH l_finasset_csr INTO l_fin_asset_id;
                        CLOSE l_finasset_csr;
                  END IF;

                  IF l_ts_asset_level_det_tbl.count > 0 THEN
                        ind := l_ts_asset_level_det_tbl.FIRST;
                        LOOP

                          IF l_ts_asset_level_det_tbl(ind).fin_asset_id = l_fin_asset_id THEN

                        -- Equipment Type(inventory item id)
                                -- get the inventory item id
                                OPEN   l_invitem_csr(l_fin_asset_id);
                                FETCH  l_invitem_csr INTO l_inv_item_id, l_inv_org_id;
                                IF l_invitem_csr%NOTFOUND THEN
                                  OKL_API.set_message(
                                                     p_app_name      => 'OKL',
                             p_msg_name      => 'OKL_TX_INV_ITEM_ERR',
                                                 p_token1        => 'ASSET_NUMBER',
                                                         p_token1_value  => 'FIN_ASSET_ID');

                                  RAISE OKL_API.G_EXCEPTION_ERROR;
                                END IF;
                                CLOSE  l_invitem_csr;

                                -- get the Location Party ID's
                                get_location_party_ids(
                                                                        p_api_version                  => p_api_version,
                                                                p_init_msg_list                => OKC_API.G_FALSE,
                                                                x_return_status                => x_return_status,
                                                                x_msg_count                    => x_msg_count,
                                                                x_msg_data                     => x_msg_data,
                                                                p_cust_acct_id                 => l_cust_acct_id,
                                                                p_fin_asset_id                 => l_fin_asset_id,
                                    p_khr_id                       => l_ts_khr_id,
                                    x_bill_to_party_site_id        => lx_bill_to_party_site_id,
                                    x_bill_to_location_id          => lx_bill_to_location_id,
                                    x_bill_to_party_id             => lx_bill_to_party_id,
                                    x_bill_to_site_use_id                  => lx_bill_to_siteuseid,
                                    x_ship_to_party_site_id        => lx_ship_to_party_site_id,
                                    x_ship_to_location_id          => lx_ship_to_location_id,
                                    x_ship_to_party_id             => lx_ship_to_party_id,
                                    x_ship_to_site_use_id                  => lx_ship_to_siteuseid);

                    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
                                  RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
                                ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
                                  RAISE OKL_API.G_EXCEPTION_ERROR;
                                END IF;

                    populate_tax_codes( p_api_version                  => p_api_version,
                                        p_init_msg_list                => OKC_API.G_FALSE,
                                        x_return_status                => x_return_status,
                                        x_msg_count                    => x_msg_count,
                                        x_msg_data                     => x_msg_data,
                                        p_prch_opt_det                             => l_ts_prch_opt_det,
                                        p_fin_prod_id_det                          => l_ts_fin_prod_id_det,
                                        p_int_disclosed_det                        => l_ts_int_disclosed_det,
                                        p_title_trnsfr_code                        => l_ts_asset_level_det_tbl(ind).transfer_of_title,
                                        p_sale_lease_back_code             => l_ts_asset_level_det_tbl(ind).sale_lease_back,
                                        p_lease_purchased_code             => l_ts_asset_level_det_tbl(ind).purchase_of_lease,
                                        p_equip_usage_code                         => l_ts_asset_level_det_tbl(ind).usage_of_equipment,
                                        p_vendor_site_id                           => l_ts_asset_level_det_tbl(ind).vendor_site_id,
                                        p_age_of_equip                             => l_ts_asset_level_det_tbl(ind).age_of_equipment,
                                        p_source_trx_name              => p_source_trx_name,
                                        p_book_class_code              => lx_book_class_code,
                                        p_tax_code_cnt                 => l_tax_code_count,
                                        p_sty_id                       => l_kstreamtypes_tbl(k).stream_type_id,
                                        p_try_id                       => l_ts_trx_type_id_det,
                                        p_tax_country_code             => l_taxation_country,
                                        p_khr_id                       => l_ts_khr_id,
                                        p_kle_id                       => l_fin_asset_id,
                                        p_bill_to_party_site_id        => lx_bill_to_party_site_id,
                                        p_bill_to_location_id          => lx_bill_to_location_id,
                                        p_bill_to_party_id             => lx_bill_to_party_id,
                                        p_bill_to_cust_acct_site_id    => lx_bill_to_siteuseid,
                                        p_ship_to_party_site_id         => lx_ship_to_party_site_id,
                                        p_ship_to_location_id           => lx_ship_to_location_id,
                                        p_ship_to_party_id              => lx_ship_to_party_id,
                                        p_ship_to_cust_acct_site_id     => lx_ship_to_siteuseid,
                                        p_inventory_item_id             => l_inv_item_id,
                                        p_org_id                        => l_org_id,
                                        p_trx_date                      => l_ts_start_date,
                                        px_tax_codes_tbl                => lx_tax_codes_tbl);

                    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
                          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
                        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
                              RAISE OKL_API.G_EXCEPTION_ERROR;
                        END IF;

                    l_tax_code_count := l_tax_code_count + 1;

                            EXIT;
                          END IF;

                  EXIT WHEN (ind = l_ts_asset_level_det_tbl.LAST);
                  ind := l_ts_asset_level_det_tbl.NEXT(ind);
                    END LOOP;
              END IF;
            END IF;

          END LOOP;
        END IF;
        EXIT WHEN l_kstreamtypes_csr%NOTFOUND;
      END LOOP;
      CLOSE l_kstreamtypes_csr;

      -- Taxable Basis Override not allowed for Tax Schedule type of calls

      l_tax_sources_tbl.DELETE;
      OPEN  c_k_unbilled_streams_csr(l_ts_khr_id, l_ts_start_date, l_ts_end_date);
      LOOP
        l_contract_streams_tbl.DELETE;
        FETCH c_k_unbilled_streams_csr BULK COLLECT INTO l_contract_streams_tbl LIMIT l_fetch_size;

                  IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
            FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_schedule_tax.',
                                                 'l_contract_streams_tbl.COUNT '||l_contract_streams_tbl.COUNT );
          END IF;

                  IF l_contract_streams_tbl.COUNT > 0 THEN
            -- insert each row into tax sources
            -- fill in the missing values IN l_contract_streams_tbl
            FOR K IN l_contract_streams_tbl.FIRST..l_contract_streams_tbl.LAST LOOP

              IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                    FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_schedule_tax.',
                                                                                 'l_contract_streams_tbl(k).lty_code '||l_contract_streams_tbl(k).lty_code );
                          END IF;

              -- populate asset number for fin asset line / sublines
              IF l_contract_streams_tbl(k).lty_code IN ('FREE_FORM1','LINK_SERV_ASSET', 'LINK_FEE_ASSET') THEN

                IF l_contract_streams_tbl(k).lty_code = 'FREE_FORM1' THEN
                  l_asset_line_id := l_contract_streams_tbl(k).kle_id;
                ELSE -- Service subline or Fee subline
                  --get the financial asset associated with the subline

                  -- see if pervious fetch fro aaatched asset id can be stored and used here instead of curosr fetch
                          OPEN  l_finasset_csr(l_contract_streams_tbl(k).kle_id, l_contract_streams_tbl(k).lty_code); -- contract_streams_tbl(k).kle_id is a subline here
                          FETCH l_finasset_csr INTO l_asset_line_id;
                          CLOSE l_finasset_csr;
                        END IF;

                l_contract_streams_tbl(k).asset_line_id := l_asset_line_id;  -- populate asset id for subline as well

                OPEN  l_okclines_csr(l_asset_line_id);
                                FETCH l_okclines_csr INTO l_name, l_lse_id;
                                CLOSE  l_okclines_csr;

                                l_contract_streams_tbl(k).asset_number := l_name;-- populate asset num for subline as well

                                get_location_party_ids(
                                                                        p_api_version                  => p_api_version,
                                                                p_init_msg_list                => OKC_API.G_FALSE,
                                                                x_return_status                => x_return_status,
                                                                x_msg_count                    => x_msg_count,
                                                                x_msg_data                     => x_msg_data,
                                                                p_cust_acct_id                 => l_cust_acct_id,
                                                                p_fin_asset_id                 => l_asset_line_id,
                                    p_khr_id                       => l_ts_khr_id,
                                    x_bill_to_party_site_id        => lx_bill_to_party_site_id,
                                    x_bill_to_location_id          => lx_bill_to_location_id,
                                    x_bill_to_party_id             => lx_bill_to_party_id,
                                    x_bill_to_site_use_id                  => lx_bill_to_siteuseid,
                                    x_ship_to_party_site_id        => lx_ship_to_party_site_id,
                                    x_ship_to_location_id          => lx_ship_to_location_id,
                                    x_ship_to_party_id             => lx_ship_to_party_id,
                                    x_ship_to_site_use_id                  => lx_ship_to_siteuseid);

                IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
                          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
                        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
                          RAISE OKL_API.G_EXCEPTION_ERROR;
                        END IF;

                        l_contract_streams_tbl(k).ship_to_siteuseid := lx_ship_to_siteuseid;

                        -- get the inventory item id
                        OPEN l_invitem_csr(l_asset_line_id);
                        FETCH  l_invitem_csr INTO l_inv_item_id, l_inv_item_org_id;
                        IF l_invitem_csr%NOTFOUND THEN
                          OKL_API.set_message(p_app_name      => 'OKL',
                                      p_msg_name      => 'OKL_TX_INV_ITEM_ERR',
                                                                          p_token1        => 'ASSET_NUMBER',
                                                                          p_token1_value  => l_asset_number);
                  RAISE OKL_API.G_EXCEPTION_ERROR;
                        END IF;
                        CLOSE  l_invitem_csr;

                        l_contract_streams_tbl(k).inventory_item_id := l_inv_item_id;

              ELSE
                OPEN  l_okclines_csr(l_contract_streams_tbl(k).kle_id);
                                FETCH l_okclines_csr INTO l_name, l_lse_id;
                                CLOSE  l_okclines_csr;
                          END IF;

              -- Populate tax sources table with transaction type of 'Tax Schedule'
              l_tax_sources_tbl(k).id                               := get_seq_id;
              l_tax_sources_tbl(k).kle_id                           := l_contract_streams_tbl(k).kle_id;
              l_tax_sources_tbl(k).khr_id                           := l_ts_khr_id;
              l_tax_sources_tbl(k).asset_number                     := l_contract_streams_tbl(k).asset_number;

              l_tax_sources_tbl(k).trx_id                           := p_source_trx_id;
              l_tax_sources_tbl(k).trx_line_id                      := l_tax_sources_tbl(k).id;
              l_tax_sources_tbl(k).entity_code                      := G_TAX_SCH_ENTITY_CODE;
              l_tax_sources_tbl(k).event_class_code                 := G_TAX_SCHEDULE;
              l_tax_sources_tbl(k).trx_level_type                   := G_TRX_LEVEL_TYPE;
              l_tax_sources_tbl(k).adjusted_doc_entity_code         := null;
              l_tax_sources_tbl(k).adjusted_doc_event_class_code    := null;
              l_tax_sources_tbl(k).adjusted_doc_trx_id              := null;
              l_tax_sources_tbl(k).adjusted_doc_trx_line_id         := null;
              l_tax_sources_tbl(k).adjusted_doc_trx_level_type      := null;
              l_tax_sources_tbl(k).adjusted_doc_number              := null;
              l_tax_sources_tbl(k).adjusted_doc_date                := null;
              l_tax_sources_tbl(k).tax_call_type_code               := G_TAX_SCHEDULE;
              l_tax_sources_tbl(k).sty_id                           := l_contract_streams_tbl(k).stream_type_id;

              l_value_fetched := FALSE;
                  IF lx_tax_codes_tbl.COUNT > 0 THEN
                        ind := lx_tax_codes_tbl.FIRST;
                        LOOP

                          IF ((nvl(lx_tax_codes_tbl(ind).kle_id,-11) = nvl(l_contract_streams_tbl(k).kle_id,-11)) AND
                                  (lx_tax_codes_tbl(ind).sty_id = l_contract_streams_tbl(k).stream_type_id)) THEN

                                l_tbc_code := lx_tax_codes_tbl(ind).tbc_code;
                    l_ufc_code := lx_tax_codes_tbl(ind).ufc_code;
                    l_pc_code := lx_tax_codes_tbl(ind).pc_code;
                    l_tax_class_code := lx_tax_codes_tbl(ind).tax_class_code;

                            EXIT;
                          END IF;

                          EXIT WHEN (ind = lx_tax_codes_tbl.LAST);
                  ind := lx_tax_codes_tbl.NEXT(ind);
                        END LOOP;
                        l_contract_streams_tbl(k).trx_business_category := l_contract_streams_tbc;
                  END IF;

              l_tax_sources_tbl(k).trx_business_category            := l_tbc_code;
              l_tax_sources_tbl(k).tax_line_status_code             := G_ACTIVE_STATUS;
              l_tax_sources_tbl(k).sel_id                           := l_contract_streams_tbl(k).sel_id;
              l_tax_sources_tbl(k).reported_yn                      := 'N';
                      l_tax_sources_tbl(k).program_id                       := null;
                      l_tax_sources_tbl(k).request_id                       := null;
                      l_tax_sources_tbl(k).program_application_id           := null;
                      l_tax_sources_tbl(k).program_update_date              := null;
                      l_tax_sources_tbl(k).attribute_category               := null;

                      l_tax_sources_tbl(k).attribute1                    := null;
                      l_tax_sources_tbl(k).attribute2                    := null;
                      l_tax_sources_tbl(k).attribute3                    := null;
                      l_tax_sources_tbl(k).attribute4                    := null;
                      l_tax_sources_tbl(k).attribute5                    := null;
                      l_tax_sources_tbl(k).attribute6                    := null;
                      l_tax_sources_tbl(k).attribute7                    := null;
                      l_tax_sources_tbl(k).attribute8                    := null;
                      l_tax_sources_tbl(k).attribute9                    := null;
                      l_tax_sources_tbl(k).attribute10                   := null;
                      l_tax_sources_tbl(k).attribute11                   := null;
                      l_tax_sources_tbl(k).attribute12                   := null;
                      l_tax_sources_tbl(k).attribute13                   := null;
                      l_tax_sources_tbl(k).attribute14                   := null;
                      l_tax_sources_tbl(k).attribute15                   := null;
                      l_tax_sources_tbl(k).created_by                    := G_USER_ID;
                      l_tax_sources_tbl(k).creation_date                 := SYSDATE;
                      l_tax_sources_tbl(k).last_updated_by               := G_USER_ID;
                      l_tax_sources_tbl(k).last_update_date              := SYSDATE;
                      l_tax_sources_tbl(k).last_update_login             := G_LOGIN_ID;
                      l_tax_sources_tbl(k).object_version_number         := null;

              l_tax_sources_tbl(k).line_name                 := l_name;
              l_tax_sources_tbl(k).application_id            := G_OKL_APPLICATION_ID;
              l_tax_sources_tbl(k).tax_reporting_flag        := 'N';
              l_tax_sources_tbl(k).default_taxation_country  := l_taxation_country;
              l_tax_sources_tbl(k).product_category          := l_pc_code;
              l_tax_sources_tbl(k).user_defined_fisc_class   := l_ufc_code;
              l_tax_sources_tbl(k).line_intended_use         := l_ts_age_of_equipment;
              l_tax_sources_tbl(k).tax_classification_code   := l_tax_class_code;
              l_tax_sources_tbl(k).inventory_item_id         := l_contract_streams_tbl(k).inventory_item_id;
              l_tax_sources_tbl(k).bill_to_cust_acct_id      := l_cust_acct_id;
              l_tax_sources_tbl(k).org_id                    := l_org_id;
              l_tax_sources_tbl(k).legal_entity_id           := l_legal_entity_id;
              l_tax_sources_tbl(k).line_amt                  := l_contract_streams_tbl(k).amount;
              l_tax_sources_tbl(k).assessable_value          := l_contract_streams_tbl(k).amount;

              l_tax_sources_tbl(k).total_tax                 := null;
              l_tax_sources_tbl(k).trx_date                  := l_contract_streams_tbl(k).stream_element_date;
              l_tax_sources_tbl(k).try_id                    := l_ts_trx_type_id_det;

              l_tax_sources_tbl(k).product_type                    := G_DEFAULT_PRODUCT_TYPE;
              l_tax_sources_tbl(k).product_fisc_classification     := null;
              l_tax_sources_tbl(k).provnl_tax_determination_date   := l_contract_streams_tbl(k).stream_element_date;
              l_tax_sources_tbl(k).ship_to_location_id             := lx_ship_to_location_id;
              l_tax_sources_tbl(k).ship_to_party_site_id           := lx_ship_to_party_site_id;
              l_tax_sources_tbl(k).ship_to_party_id                := lx_ship_to_party_id;
              l_tax_sources_tbl(k).bill_to_party_site_id           := lx_bill_to_party_site_id;
              l_tax_sources_tbl(k).bill_to_location_id             := lx_bill_to_location_id;
              l_tax_sources_tbl(k).bill_to_party_id                := lx_bill_to_party_id;
              l_tax_sources_tbl(k).ship_to_cust_acct_site_use_id   := lx_ship_to_siteuseid;
              l_tax_sources_tbl(k).bill_to_cust_acct_site_use_id   := lx_bill_to_siteuseid;
              l_tax_sources_tbl(k).trx_currency_code               := l_currency_code;
              l_tax_sources_tbl(k).currency_conversion_type        := lx_currency_conversion_type;
              l_tax_sources_tbl(k).currency_conversion_rate        := lx_currency_conversion_rate;
              l_tax_sources_tbl(k).currency_conversion_date        := lx_currency_conversion_date;

              -- Populate Tax Trx Table to call 'calculate_tax'
              lx_line_params_tbl(k).application_id                     := G_OKL_APPLICATION_ID;
              lx_line_params_tbl(k).trx_id                             := p_source_trx_id;
              lx_line_params_tbl(k).internal_organization_id           := l_org_id;
              lx_line_params_tbl(k).entity_code                        := l_tax_sources_tbl(k).entity_code;
              lx_line_params_tbl(k).event_class_code                   := l_tax_sources_tbl(k).event_class_code;
              lx_line_params_tbl(k).event_type_code                    := G_TAX_SCH_CRE_EVT_TYPE_CODE;
              lx_line_params_tbl(k).trx_date                           := l_tax_sources_tbl(k).trx_date;
              lx_line_params_tbl(k).ledger_id                          := l_ledger_id;
              lx_line_params_tbl(k).legal_entity_id                    := l_legal_entity_id;
              lx_line_params_tbl(k).trx_level_type                     := l_tax_sources_tbl(k).trx_level_type;
              lx_line_params_tbl(k).line_level_action                  := G_CREATE_LINE_LEVEL_ACTION;

              lx_line_params_tbl(k).trx_line_id                        := l_tax_sources_tbl(k).trx_line_id;

              lx_line_params_tbl(k).line_amt                           := l_tax_sources_tbl(k).line_amt;
              lx_line_params_tbl(k).tax_reporting_flag                 := l_tax_sources_tbl(k).tax_reporting_flag;
              lx_line_params_tbl(k).default_taxation_country           := l_tax_sources_tbl(k).default_taxation_country;
              lx_line_params_tbl(k).product_type                       := l_tax_sources_tbl(k).product_type;
              lx_line_params_tbl(k).output_tax_classification_code     := l_tax_sources_tbl(k).tax_classification_code;
              lx_line_params_tbl(k).assessable_value                   := l_tax_sources_tbl(k).line_amt;
              lx_line_params_tbl(k).receivables_trx_type_id            := l_cust_trx_type_id;
              lx_line_params_tbl(k).product_id                         := l_tax_sources_tbl(k).inventory_item_id;
              lx_line_params_tbl(k).adjusted_doc_entity_code           := null;
              lx_line_params_tbl(k).adjusted_doc_event_class_code      := null;
              lx_line_params_tbl(k).adjusted_doc_trx_id                := null;
              lx_line_params_tbl(k).adjusted_doc_line_id               := null;
              lx_line_params_tbl(k).adjusted_doc_trx_level_type        := null;
              lx_line_params_tbl(k).adjusted_doc_number                := null;
              lx_line_params_tbl(k).adjusted_doc_date                  := null;
              lx_line_params_tbl(k).line_amt_includes_tax_flag         := 'N';

              lx_line_params_tbl(k).trx_business_category              := l_tax_sources_tbl(k).trx_business_category;
              lx_line_params_tbl(k).product_category                   := l_tax_sources_tbl(k).product_category;
              lx_line_params_tbl(k).user_defined_fisc_class            := l_tax_sources_tbl(k).user_defined_fisc_class;
              lx_line_params_tbl(k).line_intended_use                  := l_tax_sources_tbl(k).line_intended_use;
              lx_line_params_tbl(k).ship_to_cust_acct_site_use_id      := l_tax_sources_tbl(k).ship_to_cust_acct_site_use_id;
              lx_line_params_tbl(k).bill_to_cust_acct_site_use_id      := l_tax_sources_tbl(k).bill_to_cust_acct_site_use_id;
              lx_line_params_tbl(k).bill_to_party_site_id              := l_tax_sources_tbl(k).bill_to_party_site_id;
              lx_line_params_tbl(k).bill_to_location_id                := l_tax_sources_tbl(k).bill_to_location_id;
              lx_line_params_tbl(k).bill_to_party_id                   := l_tax_sources_tbl(k).bill_to_party_id;
              lx_line_params_tbl(k).ship_to_party_site_id              := l_tax_sources_tbl(k).ship_to_party_site_id;
              lx_line_params_tbl(k).ship_to_location_id                := l_tax_sources_tbl(k).ship_to_location_id;
              lx_line_params_tbl(k).ship_to_party_id                   := l_tax_sources_tbl(k).ship_to_party_id;
              lx_line_params_tbl(k).rounding_ship_to_party_id          := l_tax_sources_tbl(k).ship_to_cust_acct_site_use_id;
              lx_line_params_tbl(k).rounding_bill_to_party_id          := l_tax_sources_tbl(k).bill_to_cust_acct_site_use_id;
              lx_line_params_tbl(k).trx_currency_code                  := l_tax_sources_tbl(k).trx_currency_code;
              lx_line_params_tbl(k).precision                          := l_precision;
              lx_line_params_tbl(k).minimum_accountable_unit           := l_minimum_accountable_unit;
              lx_line_params_tbl(k).currency_conversion_date           := l_tax_sources_tbl(k).currency_conversion_date;
              lx_line_params_tbl(k).currency_conversion_rate           := l_tax_sources_tbl(k).currency_conversion_rate;
              lx_line_params_tbl(k).currency_conversion_type           := l_tax_sources_tbl(k).currency_conversion_type;

            END LOOP;
          END IF;

          EXIT WHEN c_k_unbilled_streams_csr%NOTFOUND;
      END LOOP;
      CLOSE c_k_unbilled_streams_csr;

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_schedule_tax.',
                                                                                 'before Insert into okl_tax_sources ');
          END IF;

      ---- Insert into okl_tax_sources begin -----
      BEGIN
        IF l_tax_sources_tbl.COUNT > 0 THEN
          FORALL indx in l_tax_sources_tbl.FIRST..l_tax_sources_tbl.LAST
          -- SAVE EXCEPTIONS
          INSERT INTO okl_tax_sources VALUES l_tax_sources_tbl(indx);
        END IF;
      EXCEPTION
        WHEN OTHERS THEN
          IF SQL%BULK_EXCEPTIONS.COUNT > 0 THEN
                    FOR i IN 1..SQL%BULK_EXCEPTIONS.COUNT LOOP
                          OKL_API.set_message(p_app_name      => 'OKL',
                                p_msg_name      => 'OKL_TX_TRX_INS_ERR',
                                p_token1        => 'TABLE_NAME',
                                p_token1_value  => 'OKL_TAX_SOURCES',
                                p_token2        => 'ERROR_CODE',
                                                                p_token2_value  => SQLERRM(-SQL%BULK_EXCEPTIONS(i).ERROR_CODE),
                                                                p_token3        => 'ITERATION',
                                                                p_token3_value  => SQL%BULK_EXCEPTIONS(i).ERROR_INDEX);
                    END LOOP;
                    RAISE OKL_API.G_EXCEPTION_ERROR;
                  END IF;
      END;
      ---- Insert into okl_tax_sources end -----

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_schedule_tax.',
                                                 'lx_line_params_tbl.COUNT '||lx_line_params_tbl.COUNT);
          END IF;

      IF lx_line_params_tbl.COUNT > 0 THEN
            IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_schedule_tax.',
                               'Before Calling OKL_TAX_INTERFACE_PVT.calculate_tax  '||x_return_status);
            END IF;

        lp_hdr_params_rec.application_id           := G_OKL_APPLICATION_ID;
        lp_hdr_params_rec.trx_id                   := p_source_trx_id;
        lp_hdr_params_rec.internal_organization_id := l_org_id;
        lp_hdr_params_rec.entity_code              := G_TAX_SCH_ENTITY_CODE;
        lp_hdr_params_rec.event_class_code         := G_TAX_SCHEDULE;
        lp_hdr_params_rec.event_type_code          := G_TAX_SCH_CRE_EVT_TYPE_CODE;
        lp_hdr_params_rec.quote_flag               := 'Y';

        OKL_TAX_INTERFACE_PVT.calculate_tax(
                                    p_api_version       =>  p_api_version,
                                    p_init_msg_list     =>  p_init_msg_list,
                                    x_return_status     =>  x_return_status,
                                    x_msg_count         =>  x_msg_count,
                                    x_msg_data          =>  x_msg_data,
                                    p_hdr_params_rec    =>  lp_hdr_params_rec,
                                    p_line_params_tbl   =>  lx_line_params_tbl);

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_schedule_tax.',
                                   'After tax engine call '||x_return_status);
            END IF;

            IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;
      END IF;

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_schedule_tax.',
             'Calling "update_tax_sources_total" .. ');
      END IF;

      update_tax_sources_total(p_api_version    => p_api_version,
                               p_init_msg_list  => p_init_msg_list,
                               x_return_status  => x_return_status,
                               x_msg_count      => x_msg_count,
                               x_msg_data       => x_msg_data,
                               p_source_trx_id  => p_source_trx_id,
                               p_source_trx_name => p_source_trx_name  );

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_schedule_tax.',
             'Return Status' || x_return_status);
      END IF;

      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_schedule_tax.',
             'Calling "copy_tax_trx_data" .. ');
      END IF;

      copy_tax_trx_data ( p_api_version       => p_api_version,
                          p_init_msg_list     => p_init_msg_list,
                          x_return_status     => x_return_status,
                          x_msg_count         => x_msg_count,
                          x_msg_data          => x_msg_data,
                          p_trx_id            => p_source_trx_id,
                          p_entity_code           => G_TAX_SCH_ENTITY_CODE,
                          p_event_class_code  => G_TAX_SCHEDULE,
                          p_source_trx_name   => p_source_trx_name);


      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_schedule_tax.',
             'Return Status' || x_return_status);
      END IF;

      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

    END IF;  -- Processing for Unbilled streams - End

    -----------------Process Unbilled Stream elements - End --------------

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.process_tax_schedule_tax ','End(-)');
    END IF;

  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN
      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.process_tax_schedule_tax ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
      END IF;

      IF l_trxrequests_csr%ISOPEN THEN
        CLOSE l_trxrequests_csr;
      END IF;

      IF c_k_unbilled_streams_csr%ISOPEN THEN
        CLOSE c_k_unbilled_streams_csr;
      END IF;

      IF c_k_billed_streams_csr%ISOPEN THEN
        CLOSE c_k_billed_streams_csr;
      END IF;

      IF l_txdarlndtls_csr%ISOPEN THEN
        CLOSE l_txdarlndtls_csr;
      END IF;

      IF l_finassets_csr%ISOPEN THEN
        CLOSE l_finassets_csr;
      END IF;

      IF l_okclines_csr%ISOPEN THEN
        CLOSE l_okclines_csr;
      END IF;

      IF l_kstreamtypes_csr%ISOPEN THEN
        CLOSE l_kstreamtypes_csr;
      END IF;

      IF l_finasset_csr%ISOPEN THEN
        CLOSE l_finasset_csr;
      END IF;

      IF l_invitem_csr%ISOPEN THEN
        CLOSE l_invitem_csr;
      END IF;

      IF l_partyroles_csr%ISOPEN THEN
        CLOSE l_partyroles_csr;
      END IF;

      IF l_povendorsites_csr%ISOPEN THEN
        CLOSE l_povendorsites_csr;
      END IF;

      IF l_get_zx_total_tax%ISOPEN THEN
        CLOSE l_get_zx_total_tax;
      END IF;

      IF l_get_zx_taxable_line_info%ISOPEN THEN
        CLOSE l_get_zx_taxable_line_info;
      END IF;

      IF l_get_zx_tax_lines%ISOPEN THEN
        CLOSE l_get_zx_tax_lines;
      END IF;

      x_return_status := OKL_API.G_RET_STS_ERROR;

    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.process_tax_schedule_tax ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_UNEXPECTED_ERROR');
      END IF;

      IF l_trxrequests_csr%ISOPEN THEN
        CLOSE l_trxrequests_csr;
      END IF;

      IF c_k_unbilled_streams_csr%ISOPEN THEN
        CLOSE c_k_unbilled_streams_csr;
      END IF;

      IF c_k_billed_streams_csr%ISOPEN THEN
        CLOSE c_k_billed_streams_csr;
      END IF;

      IF l_txdarlndtls_csr%ISOPEN THEN
        CLOSE l_txdarlndtls_csr;
      END IF;

      IF l_finassets_csr%ISOPEN THEN
        CLOSE l_finassets_csr;
      END IF;

      IF l_okclines_csr%ISOPEN THEN
        CLOSE l_okclines_csr;
      END IF;

      IF l_kstreamtypes_csr%ISOPEN THEN
        CLOSE l_kstreamtypes_csr;
      END IF;

      IF l_finasset_csr%ISOPEN THEN
        CLOSE l_finasset_csr;
      END IF;

      IF l_invitem_csr%ISOPEN THEN
        CLOSE l_invitem_csr;
      END IF;

      IF l_partyroles_csr%ISOPEN THEN
        CLOSE l_partyroles_csr;
      END IF;

      IF l_povendorsites_csr%ISOPEN THEN
        CLOSE l_povendorsites_csr;
      END IF;

      IF l_get_zx_total_tax%ISOPEN THEN
        CLOSE l_get_zx_total_tax;
      END IF;

      IF l_get_zx_taxable_line_info%ISOPEN THEN
        CLOSE l_get_zx_taxable_line_info;
      END IF;

      IF l_get_zx_tax_lines%ISOPEN THEN
        CLOSE l_get_zx_tax_lines;
      END IF;

      x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;

    WHEN OTHERS THEN
      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.process_tax_schedule_tax ',
                  'EXCEPTION :'||sqlerrm);
      END IF;

      IF l_trxrequests_csr%ISOPEN THEN
        CLOSE l_trxrequests_csr;
      END IF;

      IF c_k_unbilled_streams_csr%ISOPEN THEN
        CLOSE c_k_unbilled_streams_csr;
      END IF;

      IF c_k_billed_streams_csr%ISOPEN THEN
        CLOSE c_k_billed_streams_csr;
      END IF;

      IF l_txdarlndtls_csr%ISOPEN THEN
        CLOSE l_txdarlndtls_csr;
      END IF;

      IF l_finassets_csr%ISOPEN THEN
        CLOSE l_finassets_csr;
      END IF;

      IF l_okclines_csr%ISOPEN THEN
        CLOSE l_okclines_csr;
      END IF;

      IF l_kstreamtypes_csr%ISOPEN THEN
        CLOSE l_kstreamtypes_csr;
      END IF;

      IF l_finasset_csr%ISOPEN THEN
        CLOSE l_finasset_csr;
      END IF;

      IF l_invitem_csr%ISOPEN THEN
        CLOSE l_invitem_csr;
      END IF;

      IF l_partyroles_csr%ISOPEN THEN
        CLOSE l_partyroles_csr;
      END IF;

      IF l_povendorsites_csr%ISOPEN THEN
        CLOSE l_povendorsites_csr;
      END IF;

      IF l_get_zx_total_tax%ISOPEN THEN
        CLOSE l_get_zx_total_tax;
      END IF;

      IF l_get_zx_taxable_line_info%ISOPEN THEN
        CLOSE l_get_zx_taxable_line_info;
      END IF;

      IF l_get_zx_tax_lines%ISOPEN THEN
        CLOSE l_get_zx_tax_lines;
      END IF;

      x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
      -- unexpected error
      OKL_API.set_message(p_app_name      => g_app_name,
                          p_msg_name      => g_unexpected_error,
                          p_token1        => g_sqlcode_token,
                          p_token1_value  => sqlcode,
                          p_token2        => g_sqlerrm_token,
                          p_token2_value  => sqlerrm);

  END process_tax_schedule_tax;

/*========================================================================
 | PRIVATE PROCEDURE process_quote_tax
 |
 | DESCRIPTION
 |    This procedure is called from calculate_sales_tax procedure to calculate
 |    invoice tax for Termination / repurchase quote creation/updation/deletion
 |
 | CALLED FROM                                  calculate_sales_tax()
 |
 |
 | CALLS PROCEDURES/FUNCTIONS
 |     get_k_hdr_tax_params()
 |     get_asset_tax_params()
 |     get_location_party_ids()
 |     get_ufc_code()
 |     OKL_TAX_INTERFACE_PVT.calculate_tax()
 |
 |
 | PARAMETERS
 |      p_source_trx_id                 -- Source transaction ID
 |      p_source_trx_name       -- Source transaction Name
 |      p_source_table          -- Source table
 |
 | KNOWN ISSUES
 |
 | NOTES
 |
 |
 | MODIFICATION HISTORY
 | Date                  Author            Description of Changes
 | 08-APR-05            SECHAWLA           Created
 |
 *=======================================================================*/
  PROCEDURE process_quote_tax(
        p_api_version                   IN  NUMBER,
    p_init_msg_list                     IN  VARCHAR2 DEFAULT OKC_API.G_FALSE,
    x_return_status                     OUT NOCOPY VARCHAR2,
    x_msg_count                         OUT NOCOPY NUMBER,
    x_msg_data                          OUT NOCOPY VARCHAR2,
    p_source_trx_id                                     IN  NUMBER,
    p_source_trx_name               IN  VARCHAR2,
    p_source_table                  IN  VARCHAR2) IS

    ---- Termination/Repurchase Quote Creation -------
        --p_source_trx_id               ---> okl_trx_quotes_b.id
        --p_source_trx_name     ---> 'Estimated Billing'
        --p_source_table        ---> 'OKL_TRX_QUOTES_B'
    --------------------------------------------------

        l_return_status                 VARCHAR2(1) := OKL_API.G_RET_STS_SUCCESS;

        -- Get quote details
        CURSOR l_trxquotes_csr(cp_qte_id IN NUMBER) IS
        SELECT khr_id, date_effective_from, early_termination_yn, qtp_code,
           legal_entity_id, qrs_code
        FROM   okl_trx_quotes_b
        WHERE  id = cp_qte_id;

        -- get the previous tax source transaction for this quote
        CURSOR l_prevtaxsources_csr(cp_trx_id IN NUMBER) IS
        SELECT id
        FROM   okl_tax_sources
        WHERE  trx_id = cp_trx_id;

        -- get the previous tax trx details
        CURSOR l_prevtaxtrxdet_csr(cp_txs_id IN NUMBER) IS
        SELECT ID
        FROM   okl_tax_trx_details
        WHERE  txs_id = cp_txs_id;

        -- get the tax eligible quote lines
        CURSOR l_txlquotelines_csr(cp_qte_id IN NUMBER) IS
        SELECT txl.id, txl.sty_id, txl.kle_id,
           txl.qlt_code, txl.amount, txl.try_id, cle.name
        FROM   okl_txl_quote_lines_b txl, okc_k_lines_v cle
        WHERE  qte_id = cp_qte_id
        AND    qlt_code NOT IN ('AMCFIA', 'AMCTAX', 'AMYOUB', 'AMCSDD')
    AND    txl.kle_id = cle.id (+);

        -- AMYOUB - Outstanding bal : excluding as it is not invoiced So no tax will be calculated on it during acceptance
        -- AMCTAX - Tax/VAT : excluding for old quotes. New quotes wil not have this quote line
        -- AMCFIA - Used for internal purpose.

        --get line name
        CURSOR l_okclines_csr(cp_line_id IN NUMBER) IS
        SELECT name, lse_id
        FROM   okc_k_lines_v
        WHERE  id = cp_line_id;

    -- get the inventory item id and inventory item org for a financial asset
        CURSOR l_invitem_csr(cp_fin_asset_id IN NUMBER) IS
        SELECT cim_model.object1_id1,
           cim_model.object1_id2
    FROM   okc_k_items cim_model,
           okc_k_lines_b cleb_model,
           okc_line_styles_b lseb_model
    WHERE  cim_model.cle_id    = cleb_model.id
    AND    cleb_model.cle_id   = cp_fin_asset_id
    AND    lseb_model.id       = cleb_model.lse_id
    AND    lseb_model.lty_code = 'ITEM';

    -- Check if tax basis override formula exists
        CURSOR l_txbasisoverride_csr(cp_try_id IN NUMBER) IS
        SELECT fma_id
        FROM   okl_tax_basis_override
        WHERE  try_id = cp_try_id
        AND    org_id = MO_GLOBAL.get_current_org_id;

    -- GET FORMULA NAME
    CURSOR l_formulae_csr(cp_fma_id IN NUMBER) IS
    SELECT name
    FROM   okl_formulae_b
    WHERE  id = cp_fma_id;

        TYPE prevtaxsrc_tbl_type IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
        TYPE prevtaxtrxdet_tbl_type IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
        TYPE txlquotelines_tbl_type IS TABLE OF l_txlquotelines_csr%ROWTYPE INDEX BY BINARY_INTEGER;

        l_qte_khr_id                                    NUMBER;
        l_qte_dt_eff_from                               DATE;

        l_prevtaxsrc_tbl                            prevtaxsrc_tbl_type;
        l_prevtaxtrxdet_tbl                             prevtaxtrxdet_tbl_type;
        l_txlquotelines_tbl                             txlquotelines_tbl_type;
    l_tax_sources_tbl                           tax_sources_tbl_type;
    lp_tax_src_params_rec           tax_src_params_rec_type;
    lx_line_params_tbl              line_params_tbl_type;
    lx_tax_sources_tbl                  tax_sources_tbl_type;
    lp_hdr_params_rec               hdr_params_rec_type;

        l_fetch_size                    NUMBER := 10000;
        i                                                               NUMBER;
        j                                                               NUMBER;
        k                                                               NUMBER;

        l_cust_acct_id                                  NUMBER;
    l_bill_to_siteuseid                 NUMBER;
    l_currency_code                                     VARCHAR2(15);
    l_precision                         NUMBER;
    l_minimum_accountable_unit          NUMBER;
    l_cust_trx_type_id                          NUMBER;
    l_legal_entity_id               NUMBER;

    l_qte_prch_opt_det                          VARCHAR2(450);
    l_qte_fin_prod_id_det                       NUMBER;
    l_qte_int_disclosed_det                     VARCHAR2(30);

    l_name                                                      VARCHAR2(150);
    l_qte_transfer_of_title                     VARCHAR2(30);
    l_qte_sale_lease_back                       VARCHAR2(30);
    l_qte_purchase_of_lease                     VARCHAR2(30);
    l_qte_usage_of_equipment        VARCHAR2(450);
    l_qte_age_of_equipment                      NUMBER;
    l_qte_vendor_site_id            NUMBER;
    l_inv_item_id                                       NUMBER;
        l_inv_item_org_id                               NUMBER;
    l_taxation_country              VARCHAR2(2);

    lx_bill_to_party_site_id        NUMBER;
    lx_bill_to_location_id          NUMBER;
    lx_bill_to_party_id             NUMBER;
    lx_bill_to_siteuseid            NUMBER;
    lx_ship_to_party_site_id        NUMBER;
    lx_ship_to_location_id          NUMBER;
    lx_ship_to_party_id             NUMBER;
    lx_ship_to_siteuseid                NUMBER;
        lx_tbc_code                                             VARCHAR2(30);
    l_ledger_id                     NUMBER;
    l_lse_id                        NUMBER;

        l_taxable_basis                                 NUMBER;
    l_fma_id                                            NUMBER;
    l_formula_name                                      VARCHAR2(150);
    l_add_params                                        okl_execute_formula_pub.ctxt_val_tbl_type;
    lx_sty_id                                           NUMBER;
    l_early_term_yn                                     VARCHAR2(1);
        l_qtp_code                                              VARCHAR2(30);
    asset_cnt                       NUMBER;
    tax_call_cnt                    NUMBER;

    lx_org_id                       NUMBER;
    lx_book_class_code              VARCHAR2(30);
    lx_currency_conversion_type     VARCHAR2(30);
    lx_currency_conversion_rate     NUMBER;
    lx_currency_conversion_date     DATE;
    lx_contract_start_date          DATE;

    lx_cust_acct_id                                     NUMBER;
    lx_currency_code                            VARCHAR2(15);
    lx_precision                        NUMBER;
    lx_minimum_accountable_unit         NUMBER;
    lx_cust_trx_type_id                         NUMBER;

    lx_pb_prch_opt_det                          VARCHAR2(450);
    lx_pb_fin_prod_id_det                       NUMBER;
    lx_pb_int_disclosed_det                     VARCHAR2(30);

    l_qrs_code                      VARCHAR2(30);

  BEGIN

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax','Begin(+)');
    END IF;

    --Print Input Variables
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
              'p_init_msg_list :'||p_init_msg_list);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
              'p_source_trx_id :'||p_source_trx_id);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
              'p_source_trx_name :'||p_source_trx_name);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
              'p_source_table :'||p_source_table);
    END IF;

    x_return_status := OKL_API.G_RET_STS_SUCCESS;

    -- Validate soure trx id
    OPEN  l_trxquotes_csr(p_source_trx_id);
    FETCH l_trxquotes_csr INTO l_qte_khr_id, l_qte_dt_eff_from,
                               l_early_term_yn, l_qtp_code, l_legal_entity_id,
                               l_qrs_code;
    IF l_trxquotes_csr%NOTFOUND THEN
      -- source trx id is invalid
      OKC_API.set_message( p_app_name      => 'OKC',
                           p_msg_name      => G_INVALID_VALUE,
                           p_token1        => G_COL_NAME_TOKEN,
                           p_token1_value  => 'SOURCE_TRX_ID');
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    CLOSE l_trxquotes_csr;

    --Check if tax source transactions already exist for this quote. If so, delete the previous tax transcations and
    --recalculate tax
    OPEN  l_prevtaxsources_csr(p_source_trx_id);
    LOOP
      l_prevtaxsrc_tbl.DELETE;
      FETCH l_prevtaxsources_csr BULK COLLECT INTO l_prevtaxsrc_tbl LIMIT l_fetch_size;
      IF l_prevtaxsrc_tbl.COUNT > 0 THEN

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                                  'Deleteing prev tax source transactions for this quote ');
        END IF;

        i := 0;
        l_prevtaxtrxdet_tbl.DELETE;
        FOR k IN l_prevtaxsrc_tbl.FIRST .. l_prevtaxsrc_tbl.LAST LOOP
          FOR  l_prevtaxtrxdet_rec IN l_prevtaxtrxdet_csr(l_prevtaxsrc_tbl(k)) LOOP
            i := i + 1;
            l_prevtaxtrxdet_tbl(i):= l_prevtaxtrxdet_rec.id;

          END LOOP;
        END LOOP;

        -- delete from both the tables.
        BEGIN
          IF l_prevtaxtrxdet_tbl.COUNT > 0 THEN
            FORALL i IN l_prevtaxtrxdet_tbl.FIRST..l_prevtaxtrxdet_tbl.LAST
              DELETE FROM OKL_TAX_TRX_DETAILS WHERE id = l_prevtaxtrxdet_tbl(i);
          END IF;
        EXCEPTION
          WHEN OTHERS THEN
            IF SQL%BULK_EXCEPTIONS.COUNT > 0 THEN
                          FOR i IN 1..SQL%BULK_EXCEPTIONS.COUNT LOOP
                                OKL_API.set_message(
                                                                     p_app_name      => 'OKL',
                                     p_msg_name      => 'OKL_TX_TRX_DEL_ERR',
                                     p_token1        => 'TABLE_NAME',
                                     p_token1_value  => 'OKL_TAX_TRX_DETAILS',
                                     p_token2        => 'ERROR_CODE',
                                                                         p_token2_value  => SQLERRM(-SQL%BULK_EXCEPTIONS(i).ERROR_CODE),
                                                                         p_token3        => 'ITERATION',
                                                                         p_token3_value  => SQL%BULK_EXCEPTIONS(i).ERROR_INDEX);
                          END LOOP;
                          RAISE OKL_API.G_EXCEPTION_ERROR;
                        END IF;
        END;

                IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                                  'Deleted from okl_tax_trx_details...  ');
        END IF;

        BEGIN
          FORALL i IN l_prevtaxsrc_tbl.FIRST..l_prevtaxsrc_tbl.LAST
            DELETE FROM OKL_TAX_SOURCES WHERE id = l_prevtaxsrc_tbl(i);
        EXCEPTION
          WHEN OTHERS THEN
            IF SQL%BULK_EXCEPTIONS.COUNT > 0 THEN
                          FOR i IN 1..SQL%BULK_EXCEPTIONS.COUNT LOOP
                                OKL_API.set_message(
                                                                     p_app_name      => 'OKL',
                                     p_msg_name      => 'OKL_TX_TRX_DEL_ERR',
                                     p_token1        => 'TABLE_NAME',
                                     p_token1_value  => 'OKL_TAX_SOURCES',
                                     p_token2        => 'ERROR_CODE',
                                                                         p_token2_value  => SQLERRM(-SQL%BULK_EXCEPTIONS(i).ERROR_CODE),
                                                                         p_token3        => 'ITERATION',
                                                                         p_token3_value  => SQL%BULK_EXCEPTIONS(i).ERROR_INDEX);
                          END LOOP;
                          RAISE OKL_API.G_EXCEPTION_ERROR;
                        END IF;
        END;

                IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                                  'Deleted from okl_tax_sources...  ');
        END IF;
      END IF;

      EXIT WHEN l_prevtaxsources_csr%NOTFOUND;
    END LOOP;
        CLOSE l_prevtaxsources_csr;

        -- Get contract header info
    get_k_hdr_tax_params(
        p_api_version                  => p_api_version,
        p_init_msg_list                => p_init_msg_list,
        x_return_status                => x_return_status,
        x_msg_count                    => x_msg_count,
        x_msg_data                     => x_msg_data,
        p_khr_id                       => l_qte_khr_id,
        p_source_trx_name              => p_source_trx_name,
        p_source_table                             => p_source_table,
        p_qtp_code                     => l_qtp_code,
        p_early_term_yn                            => l_early_term_yn,
        x_cust_acct_id                             => lx_cust_acct_id,
                x_bill_to_siteuseid            => lx_bill_to_siteuseid,
                x_currency_code                            => lx_currency_code,
        x_cust_trx_type_id             => lx_cust_trx_type_id,
        x_precision                                        => lx_precision,
                x_minimum_accountable_unit     => lx_minimum_accountable_unit,
                x_prch_opt_det                             => lx_pb_prch_opt_det,
                x_fin_prod_id_det                          => lx_pb_fin_prod_id_det,
                x_int_disclosed_det                        => lx_pb_int_disclosed_det,
        x_org_id                       => lx_org_id,
        x_book_class_code              => lx_book_class_code,
        x_bill_to_party_site_id        => lx_bill_to_party_site_id,
        x_bill_to_party_id             => lx_bill_to_party_id,
        x_bill_to_location_id          => lx_bill_to_location_id,
        x_currency_conversion_type     => lx_currency_conversion_type,
        x_currency_conversion_rate     => lx_currency_conversion_rate,
        x_currency_conversion_date     => lx_currency_conversion_date,
        x_contract_start_date          => lx_contract_start_date);

        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                'l_cust_acct_id '||lx_cust_acct_id );
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                'lx_bill_to_siteuseid '||lx_bill_to_siteuseid );
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                'lx_currency_code '||lx_currency_code );
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                'lx_cust_trx_type_id '||lx_cust_trx_type_id );
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                'lx_precision '||lx_precision );
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                'lx_minimum_accountable_unit '||lx_minimum_accountable_unit );
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                'lx_pb_prch_opt_det '||lx_pb_prch_opt_det );
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                'lx_pb_fin_prod_id_det '||lx_pb_fin_prod_id_det );
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                'lx_pb_int_disclosed_det '||lx_pb_int_disclosed_det );
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                'lx_org_id '||lx_org_id );
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                'lx_book_class_code '||lx_book_class_code );
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                'lx_bill_to_party_site_id '||lx_bill_to_party_site_id );
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                'lx_bill_to_party_id '||lx_bill_to_party_id );
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                'lx_bill_to_location_id '||lx_bill_to_location_id );
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                'lx_currency_conversion_type '||lx_currency_conversion_type );
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                'lx_currency_conversion_rate '||lx_currency_conversion_rate );
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                'lx_currency_conversion_date '||lx_currency_conversion_date );
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                'lx_contract_start_date '||lx_contract_start_date );
    END IF;

    -- Fetch the Ledger info
    l_ledger_id := okl_accounting_util.get_set_of_books_id;

    -- Fetch the Tax country
    l_taxation_country := get_default_taxation_country(x_return_status     => x_return_status,
                                                       x_msg_count         => x_msg_count,
                                                       x_msg_data          => x_msg_data,
                                                       p_legal_entity_id   => l_legal_entity_id);
        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    tax_call_cnt := 1;
    OPEN  l_txlquotelines_csr(p_source_trx_id);
    LOOP
      l_txlquotelines_tbl.DELETE;
      l_tax_sources_tbl.DELETE;
      FETCH l_txlquotelines_csr BULK COLLECT INTO l_txlquotelines_tbl LIMIT l_fetch_size;

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                                  'l_txlquotelines_tbl.COUNT '||l_txlquotelines_tbl.COUNT);
      END IF;

      IF l_txlquotelines_tbl.COUNT > 0 THEN
        FOR k IN l_txlquotelines_tbl.FIRST .. l_txlquotelines_tbl.LAST LOOP

          IF l_txlquotelines_tbl(k).kle_id IS NOT NULL THEN -- asset level quote line

            IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                                  'asset level quote line ');
                END IF;

            OPEN  l_okclines_csr(l_txlquotelines_tbl(k).kle_id);
                FETCH l_okclines_csr INTO l_name, l_lse_id;
                CLOSE l_okclines_csr;

            IF (l_lse_id = 33) THEN
              -- Get the financial asset level determinants
                  get_asset_tax_params(
                                                p_api_version                  => p_api_version,
                                        p_init_msg_list                => OKC_API.G_FALSE,
                                        x_return_status                => x_return_status,
                                        x_msg_count                    => x_msg_count,
                                        x_msg_data                     => x_msg_data,
                                        p_khr_id                       => l_qte_khr_id,
                                        p_kle_id                       => l_txlquotelines_tbl(k).kle_id,
                                        p_source_trx_name              => p_source_trx_name,
                                        p_source_table                             => p_source_table,
                                        p_qtp_code                     => l_qtp_code,
                                    x_transfer_of_title                    => l_qte_transfer_of_title,
                                        x_sale_lease_back                          => l_qte_sale_lease_back,
                                        x_purchase_of_lease                        => l_qte_purchase_of_lease,
                                        x_usage_of_equipment               => l_qte_usage_of_equipment,
                                                x_age_of_equipment                         => l_qte_age_of_equipment,
                                                x_vendor_site_id                       => l_qte_vendor_site_id);

                          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
                    RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
                  ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
                    RAISE OKL_API.G_EXCEPTION_ERROR;
                  END IF;

                  -- Equipment Type(inventory item id)
                  -- get the inventory item id
                          OPEN  l_invitem_csr(l_txlquotelines_tbl(k).kle_id);
                          FETCH l_invitem_csr INTO l_inv_item_id, l_inv_item_org_id;
                          IF l_invitem_csr%NOTFOUND THEN
                            OKL_API.set_message(
                                                p_app_name      => 'OKL',
                                p_msg_name      => 'OKL_TX_INV_ITEM_ERR',
                                        p_token1        => 'ASSET_NUMBER',
                                                        p_token1_value  => l_name);

                    RAISE OKL_API.G_EXCEPTION_ERROR;
                          END IF;
                          CLOSE l_invitem_csr;

              IF l_qtp_code LIKE 'TER%' THEN  -- Ship to Location is not applicable for repurchase quote
                            -- Get the ship_to and _bill_to identifiers
                            get_location_party_ids(
                                                                        p_api_version                  => p_api_version,
                                                                p_init_msg_list                => OKC_API.G_FALSE,
                                                                x_return_status                => x_return_status,
                                                                x_msg_count                    => x_msg_count,
                                                                x_msg_data                     => x_msg_data,
                                                                p_cust_acct_id                 => lx_cust_acct_id,
                                                                p_fin_asset_id                 => l_txlquotelines_tbl(k).kle_id,
                                    p_khr_id                       => l_qte_khr_id,
                                    x_bill_to_party_site_id        => lx_bill_to_party_site_id,
                                    x_bill_to_location_id          => lx_bill_to_location_id,
                                    x_bill_to_party_id             => lx_bill_to_party_id,
                                    x_bill_to_site_use_id                  => lx_bill_to_siteuseid,
                                    x_ship_to_party_site_id        => lx_ship_to_party_site_id,
                                    x_ship_to_location_id          => lx_ship_to_location_id,
                                    x_ship_to_party_id             => lx_ship_to_party_id,
                                    x_ship_to_site_use_id                  => lx_ship_to_siteuseid);

                            IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
                                  RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
                            ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
                          RAISE OKL_API.G_EXCEPTION_ERROR;
                            END IF;
                          END IF;

                          IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                    FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                                  'l_name '||l_name);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                                  'l_qte_khr_id '||l_qte_khr_id);
                            FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                                  'l_txlquotelines_tbl(k).kle_id '||l_txlquotelines_tbl(k).kle_id);
                            FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                                  'l_qte_transfer_of_title '||l_qte_transfer_of_title);
                            FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                                  'l_qte_sale_lease_back '||l_qte_sale_lease_back);
                            FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                                  'l_qte_purchase_of_lease '||l_qte_purchase_of_lease);
                            FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                                  'l_qte_usage_of_equipment '||l_qte_usage_of_equipment);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                                  'l_qte_age_of_equipment '||l_qte_age_of_equipment);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                                  'l_qte_vendor_site_id '||l_qte_vendor_site_id);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                                  'l_inv_item_id '||l_inv_item_id);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                                  'l_inv_item_org_id '||l_inv_item_org_id);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                                  'lx_ship_to_siteuseid '||lx_ship_to_siteuseid);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                                'lx_ship_to_party_site_id '||lx_ship_to_party_site_id );
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                                'lx_ship_to_location_id '||lx_ship_to_location_id );
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                                'lx_ship_to_party_id '||lx_ship_to_party_id );
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                                'lx_bill_to_party_site_id '||lx_bill_to_party_site_id );
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                                'lx_bill_to_location_id '||lx_bill_to_location_id );
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                                'lx_bill_to_party_id '||lx_bill_to_party_id );
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                                'lx_bill_to_siteuseid '||lx_bill_to_siteuseid );
                  END IF;
            END IF;
          END IF; -- if asset level quote line

          -- SECHAWLA 17-MAR-06 5022404 : For Billing adjustment quote line, get stream type from quote lines table
          IF l_txlquotelines_tbl(k).qlt_code = 'BILL_ADJST' THEN
            lx_sty_id := l_txlquotelines_tbl(k).sty_id;
          ELSE
            OKL_STREAMS_UTIL.get_primary_stream_type( p_khr_id                           => l_qte_khr_id,
                                                                                                          p_primary_sty_purpose  => l_txlquotelines_tbl(k).qlt_code,
                                                                                                          x_return_status                => x_return_status,
                                                                                                          x_primary_sty_id       => lx_sty_id);

                        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
                          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
                        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
                  RAISE OKL_API.G_EXCEPTION_ERROR;
                        END IF;
                  END IF;

          IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                                  'stream type '||lx_sty_id);
          END IF;

          IF (tax_call_cnt = 1) THEN
                -- Check if taxable bais override applies to Estimated Billing transaction
                OPEN  l_txbasisoverride_csr(l_txlquotelines_tbl(k).try_id);
                FETCH l_txbasisoverride_csr INTO l_fma_id;
                CLOSE l_txbasisoverride_csr;

                IF l_fma_id IS NOT NULL THEN
                  OPEN  l_formulae_csr(l_fma_id);
                  FETCH l_formulae_csr INTO l_formula_name;
                  IF l_formulae_csr%NOTFOUND THEN
                        OKC_API.set_message( p_app_name      => 'OKC',
                                     p_msg_name      => G_INVALID_VALUE,
                                     p_token1        => G_COL_NAME_TOKEN,
                                     p_token1_value  => 'FMA_ID');
                        RAISE OKL_API.G_EXCEPTION_ERROR;
                  END IF;
                  CLOSE l_formulae_csr;

              IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                                  'l_formula_name '||l_formula_name);
              END IF;
            END IF;
          END IF;

          -- Populate tax sources record -- start
          lp_tax_src_params_rec.kle_id       := l_txlquotelines_tbl(k).kle_id;

          IF (l_lse_id = 33) THEN
            lp_tax_src_params_rec.asset_number := l_txlquotelines_tbl(k).name;
          END IF;

          lp_tax_src_params_rec.line_name      := l_txlquotelines_tbl(k).name;

          lp_tax_src_params_rec.ship_to_cust_acct_site_use_id   := lx_ship_to_siteuseid;
          lp_tax_src_params_rec.ship_to_party_site_id           := lx_ship_to_party_site_id;
          lp_tax_src_params_rec.ship_to_party_id                := lx_ship_to_party_id;
          lp_tax_src_params_rec.ship_to_location_id             := lx_ship_to_location_id;

          lp_tax_src_params_rec.bill_to_party_site_id         := lx_bill_to_party_site_id;
          lp_tax_src_params_rec.bill_to_party_id              := lx_bill_to_party_id;
          lp_tax_src_params_rec.bill_to_location_id           := lx_bill_to_location_id;
          lp_tax_src_params_rec.bill_to_cust_acct_site_use_id := lx_bill_to_siteuseid;

          lp_tax_src_params_rec.inventory_item_id             := l_inv_item_id;
          lp_tax_src_params_rec.sty_id                        := lx_sty_id;

          lp_tax_src_params_rec.khr_id                        := l_qte_khr_id;
          lp_tax_src_params_rec.trx_id                        := p_source_trx_id;
          lp_tax_src_params_rec.trx_line_id                   := l_txlquotelines_tbl(k).id;
          lp_tax_src_params_rec.entity_code                   := G_AM_QUOTES_ENTITY_CODE;
          lp_tax_src_params_rec.event_class_code              := G_AM_QTE_EVENT_CLASS_CODE;
          lp_tax_src_params_rec.trx_level_type                := G_TRX_LEVEL_TYPE;
          lp_tax_src_params_rec.tax_call_type_code            := G_INVOICE_TAX;
          lp_tax_src_params_rec.tax_reporting_flag            := 'N';
          lp_tax_src_params_rec.reported_yn                   := 'N';
          lp_tax_src_params_rec.trx_date                      := lx_contract_start_date;
          lp_tax_src_params_rec.trx_currency_code             := lx_currency_code;
          lp_tax_src_params_rec.line_intended_use             := l_qte_usage_of_equipment;
          lp_tax_src_params_rec.bill_to_cust_acct_id          := lx_cust_acct_id;
          lp_tax_src_params_rec.org_id                        := lx_org_id;
          lp_tax_src_params_rec.legal_entity_id               := l_legal_entity_id;
          lp_tax_src_params_rec.line_amt                      := l_txlquotelines_tbl(k).amount;
          lp_tax_src_params_rec.try_id                        := l_txlquotelines_tbl(k).try_id;

          lp_tax_src_params_rec.adjusted_doc_entity_code      := null;
          lp_tax_src_params_rec.adjusted_doc_event_class_code := null;
          lp_tax_src_params_rec.adjusted_doc_trx_id           := null;
              lp_tax_src_params_rec.adjusted_doc_trx_line_id      := null;
              lp_tax_src_params_rec.adjusted_doc_trx_level_type   := null;
              lp_tax_src_params_rec.adjusted_doc_number           := null;
              lp_tax_src_params_rec.adjusted_doc_date             := null;
          lp_tax_src_params_rec.tax_line_status_code          := G_ACTIVE_STATUS;
          lp_tax_src_params_rec.default_taxation_country      := l_taxation_country;

          lp_tax_src_params_rec.currency_conversion_type      := lx_currency_conversion_type;
          lp_tax_src_params_rec.currency_conversion_rate      := lx_currency_conversion_rate;
          lp_tax_src_params_rec.currency_conversion_date      := lx_currency_conversion_date;
          -- Populate tax sources record -- end

          populate_tax_info(
                                        p_api_version                  => p_api_version,
                                        p_init_msg_list                => OKC_API.G_FALSE,
                                        x_return_status                => x_return_status,
                                        x_msg_count                    => x_msg_count,
                                        x_msg_data                     => x_msg_data,
                                        p_prch_opt_det                             => lx_pb_prch_opt_det,
                                        p_fin_prod_id_det                          => lx_pb_fin_prod_id_det,
                                        p_int_disclosed_det                        => lx_pb_int_disclosed_det,
                                        p_title_trnsfr_code                        => l_qte_transfer_of_title,
                                        p_sale_lease_back_code             => l_qte_sale_lease_back,
                                        p_lease_purchased_code             => l_qte_purchase_of_lease,
                                        p_equip_usage_code                         => l_qte_usage_of_equipment,
                                        p_vendor_site_id                           => l_qte_vendor_site_id,
                                        p_age_of_equip                             => l_qte_age_of_equipment,
                    p_source_trx_name              => p_source_trx_name,
                                    p_cust_trx_type_id             => lx_cust_trx_type_id,
                                    p_book_class_code              => lx_book_class_code,
                                        p_tax_call_cnt                             => tax_call_cnt,
                                        p_fma_id                                           => l_fma_id,
                                        p_formula_name                             => l_formula_name,
                                        p_minimum_accountable_unit         => lx_minimum_accountable_unit,
                                        p_precision                                        => lx_precision,
                                        p_sales_quote_id                           => null,
                                    p_event_type_code              => G_AM_QTE_CRE_EVT_TYPE_CODE,
                                    p_ledger_id                    => l_ledger_id,
                                    p_line_level_action            => G_CREATE_LINE_LEVEL_ACTION,
                                    p_tax_src_params_rec           => lp_tax_src_params_rec,
                                    p_quote_flag                   => 'Y',
                                    p_rounding_ship_to_party_id    => lx_ship_to_party_id,
                                    p_rounding_bill_to_party_id    => lx_bill_to_party_id,
                                    p_line_amt_includes_tax_flag   => 'N',
                    p_term_quote_type_code         => l_qtp_code,
                    p_term_quote_reason_code       => l_qrs_code,
                                    px_tax_sources_tbl                     => lx_tax_sources_tbl,
                                    px_line_params_tbl             => lx_line_params_tbl );

          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;

                  IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                    FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                        'lx_tax_sources_tbl.count '|| lx_tax_sources_tbl.COUNT );
          END IF;

                  tax_call_cnt := tax_call_cnt + 1;

        END LOOP;
      END IF;
      EXIT WHEN l_txlquotelines_csr%NOTFOUND;
    END LOOP;
    CLOSE l_txlquotelines_csr;

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                        'tax_call_cnt '||tax_call_cnt);
    END IF;

    -- Insert into okl_tax_sources
        BEGIN
      IF lx_tax_sources_tbl.COUNT > 0 THEN
        FORALL indx in lx_tax_sources_tbl.FIRST..lx_tax_sources_tbl.LAST
          -- SAVE EXCEPTIONS
          INSERT INTO okl_tax_sources VALUES lx_tax_sources_tbl(indx);
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        IF SQL%BULK_EXCEPTIONS.COUNT > 0 THEN
                  FOR i IN 1..SQL%BULK_EXCEPTIONS.COUNT LOOP
                          OKL_API.set_message(   p_app_name      => 'OKL',
                                     p_msg_name      => 'OKL_TX_TRX_INS_ERR',
                                     p_token1        => 'TABLE_NAME',
                                     p_token1_value  => 'OKL_TAX_SOURCES',
                                     p_token2        => 'ERROR_CODE',
                                                                         p_token2_value  => SQLERRM(-SQL%BULK_EXCEPTIONS(i).ERROR_CODE),
                                                                         p_token3        => 'ITERATION',
                                                                         p_token3_value  => SQL%BULK_EXCEPTIONS(i).ERROR_INDEX);
                  END LOOP;
                  RAISE OKL_API.G_EXCEPTION_ERROR;
                END IF;
    END;
    -- Insert into okl_tax_sources end

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                                       'Insert into okl_tax_sources ');
        END IF;

    IF lx_line_params_tbl.COUNT > 0 THEN
          IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                               'Before Calling OKL_TAX_INTERFACE_PVT.calculate_tax  '||x_return_status);
          END IF;

      lp_hdr_params_rec.application_id           := G_OKL_APPLICATION_ID;
      lp_hdr_params_rec.trx_id                   := p_source_trx_id;
      lp_hdr_params_rec.internal_organization_id := lx_org_id;
      lp_hdr_params_rec.entity_code              := G_AM_QUOTES_ENTITY_CODE;
      lp_hdr_params_rec.event_class_code         := G_AM_QTE_EVENT_CLASS_CODE;
      lp_hdr_params_rec.event_type_code          := G_AM_QTE_CRE_EVT_TYPE_CODE;
      lp_hdr_params_rec.quote_flag               := 'Y';

      OKL_TAX_INTERFACE_PVT.calculate_tax(
                                    p_api_version       =>  p_api_version,
                                    p_init_msg_list     =>  p_init_msg_list,
                                    x_return_status     =>  x_return_status,
                                    x_msg_count         =>  x_msg_count,
                                    x_msg_data          =>  x_msg_data,
                                    p_hdr_params_rec    =>  lp_hdr_params_rec,
                                    p_line_params_tbl   =>  lx_line_params_tbl);

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
                                   'After tax engine call '||x_return_status);
          END IF;

          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
    END IF;

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
             'Calling "update_tax_sources_total" .. ');
    END IF;

    update_tax_sources_total(p_api_version    => p_api_version,
                             p_init_msg_list  => p_init_msg_list,
                             x_return_status  => x_return_status,
                             x_msg_count      => x_msg_count,
                             x_msg_data       => x_msg_data,
                             p_source_trx_id  => p_source_trx_id,
                             p_source_trx_name => p_source_trx_name  );

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
             'Return Status' || x_return_status);
    END IF;

    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
             'Calling "copy_tax_trx_data" .. ');
    END IF;

    copy_tax_trx_data ( p_api_version       => p_api_version,
                        p_init_msg_list     => p_init_msg_list,
                        x_return_status     => x_return_status,
                        x_msg_count         => x_msg_count,
                        x_msg_data          => x_msg_data,
                        p_trx_id            => p_source_trx_id,
                        p_entity_code           => G_AM_QUOTES_ENTITY_CODE,
                        p_event_class_code  => G_AM_QTE_EVENT_CLASS_CODE,
                        p_source_trx_name   => p_source_trx_name);


    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax.',
             'Return Status' || x_return_status);
    END IF;

    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
       FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax ','End(-)');
    END IF;

  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN
      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
      END IF;

      IF l_trxquotes_csr%ISOPEN THEN
        CLOSE l_trxquotes_csr;
      END IF;

      IF l_prevtaxsources_csr%ISOPEN THEN
        CLOSE l_prevtaxsources_csr;
      END IF;

      IF l_prevtaxtrxdet_csr%ISOPEN THEN
        CLOSE l_prevtaxtrxdet_csr;
      END IF;

      IF l_txlquotelines_csr%ISOPEN THEN
        CLOSE l_txlquotelines_csr;
      END IF;

      IF l_okclines_csr%ISOPEN THEN
        CLOSE l_okclines_csr;
      END IF;

      IF l_invitem_csr%ISOPEN THEN
        CLOSE l_invitem_csr;
      END IF;

      IF l_txbasisoverride_csr%ISOPEN THEN
        CLOSE l_txbasisoverride_csr;
      END IF;

      IF l_formulae_csr%ISOPEN THEN
        CLOSE l_formulae_csr;
      END IF;

      x_return_status := OKL_API.G_RET_STS_ERROR;
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
      END IF;

      IF l_trxquotes_csr%ISOPEN THEN
        CLOSE l_trxquotes_csr;
      END IF;

      IF l_prevtaxsources_csr%ISOPEN THEN
        CLOSE l_prevtaxsources_csr;
      END IF;

      IF l_prevtaxtrxdet_csr%ISOPEN THEN
        CLOSE l_prevtaxtrxdet_csr;
      END IF;

      IF l_txlquotelines_csr%ISOPEN THEN
        CLOSE l_txlquotelines_csr;
      END IF;

      IF l_okclines_csr%ISOPEN THEN
        CLOSE l_okclines_csr;
      END IF;

      IF l_invitem_csr%ISOPEN THEN
        CLOSE l_invitem_csr;
      END IF;

      IF l_txbasisoverride_csr%ISOPEN THEN
        CLOSE l_txbasisoverride_csr;
      END IF;

      IF l_formulae_csr%ISOPEN THEN
        CLOSE l_formulae_csr;
      END IF;

      x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;

    WHEN OTHERS THEN
      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.process_quote_tax ',
                  'EXCEPTION :'||sqlerrm);
      END IF;

      IF l_trxquotes_csr%ISOPEN THEN
        CLOSE l_trxquotes_csr;
      END IF;

      IF l_prevtaxsources_csr%ISOPEN THEN
        CLOSE l_prevtaxsources_csr;
      END IF;

      IF l_prevtaxtrxdet_csr%ISOPEN THEN
        CLOSE l_prevtaxtrxdet_csr;
      END IF;

      IF l_txlquotelines_csr%ISOPEN THEN
        CLOSE l_txlquotelines_csr;
      END IF;

      IF l_okclines_csr%ISOPEN THEN
        CLOSE l_okclines_csr;
      END IF;

      IF l_invitem_csr%ISOPEN THEN
        CLOSE l_invitem_csr;
      END IF;

      IF l_txbasisoverride_csr%ISOPEN THEN
        CLOSE l_txbasisoverride_csr;
      END IF;

      IF l_formulae_csr%ISOPEN THEN
        CLOSE l_formulae_csr;
      END IF;

      x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
      -- unexpected error
      OKL_API.set_message(p_app_name      => g_app_name,
                          p_msg_name      => g_unexpected_error,
                          p_token1        => g_sqlcode_token,
                          p_token1_value  => sqlcode,
                          p_token2        => g_sqlerrm_token,
                          p_token2_value  => sqlerrm);

  END process_quote_tax;

/*========================================================================
 | PRIVATE PROCEDURE process_asset_loc_tax
 |
 | DESCRIPTION
 |    This procedure is called from calculate_sales_tax procedure to calculate
 |    upfront tax for Asset location Change
 |
 | CALLED FROM                                  calculate_sales_tax()
 |
 |
 | CALLS PROCEDURES/FUNCTIONS
 |     OKL_TAX_SOURCES_PUB.update_tax_sources()
 |     get_k_hdr_tax_params()
 |     get_asset_tax_params()
 |     get_location_party_ids()
 |     get_ufc_code()
 |     OKL_TAX_INTERFACE_PVT.calculate_tax()
 |
 |
 | PARAMETERS
 |      p_source_trx_id                 -- Source transaction ID
 |      p_source_trx_name       -- Source transaction Name
 |      p_source_table          -- Source table
 |      p_tax_call_type         -- Tax call type (Values - 'ESTIMATED'/ 'ACTUAL')
 |      p_serialized_asset      -- Serialized Asset (Values - 'Y'/'N')
 |      p_request_id            -- Id of OKL_trx_Requests
 |      p_alc_final_call        -- Determines if the asset location change final
 |                                 call is being made for the serialized asset
 |                                 (Values - null/'N'/'Y')
 |
 | KNOWN ISSUES
 |
 | NOTES
 |
 |
 | MODIFICATION HISTORY
 | Date                  Author            Description of Changes
 | 08-APR-05            SECHAWLA           Created
 |
 *=======================================================================*/
  PROCEDURE process_asset_loc_tax(
        p_api_version                   IN  NUMBER,
    p_init_msg_list                     IN  VARCHAR2 DEFAULT OKC_API.G_FALSE,
    x_return_status                     OUT NOCOPY VARCHAR2,
    x_msg_count                         OUT NOCOPY NUMBER,
    x_msg_data                          OUT NOCOPY VARCHAR2,
    p_source_trx_id                                     IN  NUMBER,
    p_source_trx_name               IN  VARCHAR2,
    p_source_table                  IN  VARCHAR2,
    p_tax_call_type                 IN  VARCHAR2,
    p_serialized_asset              IN  VARCHAR2,
    p_request_id                    IN  NUMBER,
    p_alc_final_call                IN  VARCHAR2) IS

     -------------Asset Location Change --------------
    --p_source_trx_id           ---> okl_trx_assets.id
    --p_source_trx_name     ---> 'Asset Relocation'  (changed from Internal Asset Creation to Asset Relocation)
    --p_source_table        ---> 'OKL_TRX_ASSETS'
    --p_tax_call_type       ---> Tax call type
    --p_serialized_asset    ---> Serialized Asset (Y/N)
    --p_request_id          ---> Id of OKL_trx_Requests
    --------------------------------------------------
        l_return_status                 VARCHAR2(1) := OKL_API.G_RET_STS_SUCCESS;

        -- validate source trx id
        CURSOR l_trxassets_csr(cp_trx_id IN NUMBER, cp_trx_type_name IN VARCHAR2) IS
        SELECT a.try_id, a.date_trans_occurred, a.legal_entity_id
        FROM   okl_trx_assets a , okl_trx_types_tl b
        WHERE  a.id = cp_trx_id
        AND    a.try_id = b.id
        AND    b.name = cp_trx_type_name
    AND    language = 'US';

        -- get the trx line details
        CURSOR l_txlitminsts_csr(cp_id IN NUMBER) IS
        SELECT kle_id, -- Id of INST_ITEM line
               OBJECT_ID1_NEW, -- ID of okx_party_site_uses_v
                   DNZ_CLE_ID  -- id of FREE_FORM1
        FROM   okl_txl_itm_insts
        WHERE  tas_id = cp_id;

        -- get the new location id
        --asawanka modified for bug # 6612165
        CURSOR l_partysiteuses_csr(cp_id1 IN NUMBER) IS
        SELECT location_id, party_site_id
        FROM   okx_party_site_uses_v
        WHERE  id1 = cp_id1
        AND    site_use_type = 'INSTALL_AT';

        -- get the acive upfront tax sources for this asset
        -- k1 > A1 > RENT
        -- k1 > A1 > Estimated Property Tax
        CURSOR l_taxsources_csr(cp_khr_id IN NUMBER, cp_kle_id IN NUMBER) IS
        SELECT id, org_id, entity_code, event_class_code
        FROM   okl_tax_sources
        WHERE  khr_id = cp_khr_id
        AND    kle_id = cp_kle_id
        AND    tax_call_type_code = G_UPFRONT_TAX
        AND    tax_line_status_code = G_ACTIVE_STATUS
    AND    application_id = G_OKL_APPLICATION_ID
    AND    trx_level_type = G_TRX_LEVEL_TYPE
        AND    adjusted_doc_trx_id IS NULL
    AND    adjusted_doc_trx_line_id IS NULL;

        -- get the contract id
        CURSOR l_okcklines_csr(cp_kle_id IN NUMBER) IS
        SELECT chr_id, name
        FROM   okc_k_lines_v
        WHERE  id = cp_kle_id;

        -- get the current, active, billable streams for the asset
        CURSOR l_assetstreams_csr(cp_khr_id IN NUMBER, cp_kle_id IN NUMBER) IS
        SELECT typ.code Stream_Type,
           strm.id stream_id,
           strm.kle_id line_id,
                   strm.sty_id stream_type_id
    FROM   okl_strm_type_b typ,
           okl_streams strm
    WHERE  strm.sty_id = typ.id
    AND    typ.billable_yn = 'Y'
    AND    strm.say_code ='CURR'
    AND    strm.active_yn = 'Y'
    AND    strm.purpose_code IS NULL
    AND    strm.khr_id = cp_khr_id
    AND    strm.kle_id = cp_kle_id;

    -- get the total stream amount
    CURSOR l_strmelements_csr(cp_stm_id IN NUMBER) IS
    SELECT sum(amount)
        FROM   okl_strm_elements
        WHERE  stm_id = cp_stm_id;

        -- Chaeck if tax basis override formula exists
        CURSOR l_txbasisoverride_csr(cp_try_id IN NUMBER) IS
        SELECT fma_id
        FROM   okl_tax_basis_override
        WHERE  try_id = cp_try_id
        AND    org_id = MO_GLOBAL.get_current_org_id;

        -- get the inventory item id and inventory item org for a financial asset
        CURSOR l_invitem_csr(cp_fin_asset_id IN NUMBER) IS
        SELECT cim_model.object1_id1,
           cim_model.object1_id2
    FROM   okc_k_items cim_model,
           okc_k_lines_b cleb_model,
           okc_line_styles_b lseb_model
    WHERE  cim_model.cle_id    = cleb_model.id
    AND    cleb_model.cle_id   = cp_fin_asset_id
    AND    lseb_model.id       = cleb_model.lse_id
    AND    lseb_model.lty_code = 'ITEM';

    -- GET FORMULA NAME
    CURSOR l_formulae_csr(cp_fma_id IN NUMBER) IS
    SELECT name
    FROM   okl_formulae_b
    WHERE  id = cp_fma_id;

    CURSOR l_okltaxsources_csr(cp_app_id  IN  NUMBER, cp_trx_id  IN  NUMBER) IS
    SELECT entity_code, event_class_code
    FROM okl_tax_sources
    WHERE application_id = cp_app_id
    AND trx_id = cp_trx_id
    AND trx_level_type = G_TRX_LEVEL_TYPE
        AND tax_call_type_code = G_UPFRONT_TAX
        AND tax_line_status_code = G_ACTIVE_STATUS
    AND entity_code = G_ASSETS_ENTITY_CODE
    AND event_class_code = G_ALC_EVENT_CODE
    AND ROWNUM = 1;

    CURSOR c_get_ast_instances(p_parent_line_id IN NUMBER) IS
    SELECT  count(*)
    FROM    okc_k_lines_v okcl,
            okc_line_styles_v lse
    WHERE   okcl.cle_id = p_parent_line_id
    AND     okcl.lse_id = lse.id
    AND     lse.lty_code = 'FREE_FORM2';

    CURSOR c_get_streams_count(cp_khr_id IN NUMBER, cp_kle_id IN NUMBER) IS
    SELECT  count(*)
    FROM   okl_strm_type_b typ,
           okl_streams strm
    WHERE  strm.sty_id = typ.id
    AND    typ.billable_yn = 'Y'
    AND    strm.say_code ='CURR'
    AND    strm.active_yn = 'Y'
    AND    strm.purpose_code IS NULL
    AND    strm.khr_id = cp_khr_id
    AND    strm.kle_id = cp_kle_id;

    l_taxsources_rec         l_okltaxsources_csr%ROWTYPE;

    --asawanka added for bug #6612165
    --Cursor to get the ship_to_site_use_id corresponding to the install_location_id of the asset
    CURSOR l_get_shiptositeid(cp_cust_acct_id IN NUMBER, cp_inst_loc_id IN NUMBER,cp_loc_id IN NUMBER) IS
    SELECT b.site_use_id,
           c.party_site_id,
           c.party_id,
           c.location_id
    FROM   hz_cust_acct_sites_all a,
           hz_cust_site_uses_all  b,
           hz_party_sites      c
    WHERE  a.CUST_ACCT_SITE_ID = b.CUST_ACCT_SITE_ID
    AND    b.site_use_code     = 'SHIP_TO'
    AND    a.party_site_id     = c.party_site_id
    AND    a.cust_account_id   = cp_cust_acct_id
    AND    a.org_id            = MO_GLOBAL.get_current_org_id
    AND    c.party_site_id     = cp_inst_loc_id
    AND    c.location_id       = cp_loc_id;

    SUBTYPE txsv_rec_type IS okl_txs_pvt.txsv_rec_type;

        TYPE  tax_src_tbl_type IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;

        l_tax_src_tbl                                           tax_src_tbl_type;
    lp_tax_src_params_rec               tax_src_params_rec_type;
    lx_line_params_tbl                  line_params_tbl_type;
    lx_tax_sources_tbl                      tax_sources_tbl_type;
    lp_hdr_params_rec                   hdr_params_rec_type;

        l_alc_trx_type_id_det                           NUMBER;
        l_inst_item_line_id                                     NUMBER;
        l_party_site_uses_id1               NUMBER;
        l_fin_asset_id                                          NUMBER;
        l_new_location_id                   NUMBER;
        --asawanka added for bug# 6612165 start
        l_install_location_id               NUMBER;
        --asawanka added for bug# 6612165 end
        l_chr_id                                                        NUMBER;
        l_name                                                          VARCHAR2(150);
        l_total_strm_tax                                        NUMBER;
        l_total_prev_tax                                        NUMBER;
        l_total_curr_tax                                        NUMBER;

        lx_cust_acct_id                                         NUMBER;
        lx_currency_code                                        VARCHAR2(15);
        lx_precision                                    NUMBER;
        lx_minimum_accountable_unit                     NUMBER;
        lx_cust_trx_type_id                                     NUMBER;

        lx_alc_prch_opt_det                                     VARCHAR2(450);
        lx_alc_fin_prod_id_det                          NUMBER;
        lx_alc_int_disclosed_det                        VARCHAR2(30);

        lx_alc_transfer_of_title                        VARCHAR2(30);
        lx_alc_sale_lease_back                          VARCHAR2(30);
        lx_alc_purchase_of_lease                        VARCHAR2(30);
        lx_alc_usage_of_equipment                       VARCHAR2(450);
        lx_alc_age_of_equipment                         NUMBER;
        lx_alc_vendor_site_id                   NUMBER;

        lp_txsv_rec                                                     txsv_rec_type;
        lp_txsv_rec_emp                                         txsv_rec_type;
    lx_txsv_rec                                                 txsv_rec_type;

    lx_tbc_code                                                 VARCHAR2(30);
    l_taxable_basis                                             NUMBER;
    l_taxable_ser_basis                             NUMBER;
    l_fma_id                                                    NUMBER;
    l_inv_item_id                                               NUMBER;
        l_inv_item_org_id                                       NUMBER;
    l_legal_entity_id                   NUMBER;
    l_ledger_id                         NUMBER;
    l_taxation_country                  VARCHAR2(2);

    lx_bill_to_party_site_id            NUMBER;
    lx_bill_to_location_id              NUMBER;
    lx_bill_to_party_id                 NUMBER;
    lx_bill_to_siteuseid                NUMBER;
    lx_ship_to_party_site_id            NUMBER;
    lx_ship_to_location_id              NUMBER;
    lx_ship_to_party_id                 NUMBER;
    lx_ship_to_siteuseid                    NUMBER;

        l_add_params                                            okl_execute_formula_pub.ctxt_val_tbl_type;
        l_formula_name                                          VARCHAR2(150);
        l_trx_date                                                      DATE;
        l_tax_source_id                                         NUMBER;
        k                                                                       NUMBER;
        j                                                                       NUMBER;
        next_tx_src_cnt                                         NUMBER;
    tax_call_cnt                        NUMBER;

    lx_org_id                       NUMBER;
    lx_book_class_code              VARCHAR2(30);
    l_entity_code                   VARCHAR2(30);
    l_event_class_code              VARCHAR2(30);
    lx_currency_conversion_type     VARCHAR2(30);
    lx_currency_conversion_rate     NUMBER;
    lx_currency_conversion_date     DATE;
    lx_contract_start_date          DATE;
    l_org_id                        NUMBER;
    l_asset_inst_count              NUMBER;
    l_alc_ser_def_code              VARCHAR2(1) := 'N';
    l_stream_count                  NUMBER;

  BEGIN

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax','Begin(+)');
    END IF;

    --Print Input Variables
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
              'p_init_msg_list :'||p_init_msg_list);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
              'p_source_trx_id :'||p_source_trx_id);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
              'p_source_trx_name :'||p_source_trx_name);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
              'p_source_table :'||p_source_table);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
              'p_tax_call_type :'||p_tax_call_type);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
              'p_serialized_asset :'||p_serialized_asset);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
              'p_request_id :'||p_request_id);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
              'p_alc_final_call :'||p_alc_final_call);
    END IF;

    x_return_status := OKL_API.G_RET_STS_SUCCESS;

    -- validate the source trx id
        OPEN  l_trxassets_csr(p_source_trx_id, p_source_trx_name);
        FETCH l_trxassets_csr INTO l_alc_trx_type_id_det, l_trx_date, l_legal_entity_id;
        IF l_trxassets_csr%NOTFOUND THEN
          -- source trx id is invalid
          OKC_API.set_message( p_app_name      => 'OKC',
                                   p_msg_name      => G_INVALID_VALUE,
                                       p_token1        => G_COL_NAME_TOKEN,
                                           p_token1_value  => 'SOURCE_TRX_ID');
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;
        CLOSE l_trxassets_csr;

    IF p_tax_call_type = G_ESTIMATED_CALL_TYPE  THEN

          -- get trx line details
          OPEN  l_txlitminsts_csr(p_source_trx_id);
          FETCH l_txlitminsts_csr INTO l_inst_item_line_id, l_party_site_uses_id1, l_fin_asset_id;
          IF l_txlitminsts_csr%NOTFOUND THEN
            OKC_API.set_message( p_app_name      => 'OKC',
                                             p_msg_name      => G_REQUIRED_VALUE,
                                             p_token1        => G_COL_NAME_TOKEN,
                                             p_token1_value  => 'PARTY_SITE_USES_ID1');
            RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;

      IF l_fin_asset_id IS NULL THEN
            OKC_API.set_message( p_app_name      => 'OKC',
                                             p_msg_name      => G_REQUIRED_VALUE,
                                             p_token1        => G_COL_NAME_TOKEN,
                                             p_token1_value  => 'DNZ_CLE_ID');
            RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;
          CLOSE l_txlitminsts_csr;

          OPEN  l_okcklines_csr(l_fin_asset_id);
          FETCH l_okcklines_csr INTO l_chr_id, l_name;
          IF l_okcklines_csr%NOTFOUND THEN
            OKC_API.set_message( p_app_name      => 'OKC',
                                             p_msg_name      => G_INVALID_VALUE,
                                             p_token1        => G_COL_NAME_TOKEN,
                                             p_token1_value  => 'DNZ_CLE_ID');
            RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;
          CLOSE l_okcklines_csr;

          -- get the new location id
          OPEN  l_partysiteuses_csr(l_party_site_uses_id1);
          FETCH l_partysiteuses_csr INTO l_new_location_id,l_install_location_id;
          IF l_partysiteuses_csr%NOTFOUND THEN
            OKC_API.set_message( p_app_name      => 'OKC',
                                             p_msg_name      => G_REQUIRED_VALUE,
                                             p_token1        => G_COL_NAME_TOKEN,
                                             p_token1_value  => 'LOCATION_ID');
            RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;
          CLOSE l_partysiteuses_csr;

          IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                          'l_inst_item_line_id'||l_inst_item_line_id);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                          'l_party_site_uses_id1'||l_party_site_uses_id1);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                          'l_fin_asset_id'||l_fin_asset_id);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                          'l_chr_id'||l_chr_id);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                          'l_name'||l_name);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                          'l_new_location_id'||l_new_location_id);
          END IF;

      -- Populate tax sources id to deactivate existing upfront tax lines for this asset.
      IF (p_serialized_asset = 'N' OR (p_serialized_asset = 'Y' AND (p_alc_final_call IS NULL OR p_alc_final_call = 'Y')))  THEN -- This processing will be done only once for the serialized asset
        k := 1;
            l_tax_src_tbl.DELETE;
            -- This cursor will fetch only a few rows
            FOR l_taxsources_rec IN l_taxsources_csr(l_chr_id, l_fin_asset_id) LOOP
                  -- K1 > A1 > RENT
                  -- K2 > A1 > Estimated Property Tax

                  -- Store the tax source IDs in a table
                  l_tax_src_tbl(k) := l_taxsources_rec.ID;

          IF (k = 1) THEN
            l_org_id := l_taxsources_rec.org_id;
            l_entity_code := l_taxsources_rec.entity_code;
            l_event_class_code := l_taxsources_rec.event_class_code;
          END IF;

                  k := k + 1;
            END LOOP;

        -- Inactivate the previous ACTIVE upfront tax lines - begin
        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                        'l_tax_src_tbl.COUNT '||l_tax_src_tbl.COUNT );
        END IF;

        IF l_tax_src_tbl.COUNT > 0 THEN
          BEGIN
            FORALL i IN l_tax_src_tbl.FIRST..l_tax_src_tbl.LAST
              UPDATE OKL_TAX_SOURCES SET TAX_LINE_STATUS_CODE = G_INACTIVE_STATUS WHERE id = l_tax_src_tbl(i);

          EXCEPTION
            WHEN OTHERS THEN
              IF SQL%BULK_EXCEPTIONS.COUNT > 0 THEN
                            FOR i IN 1..SQL%BULK_EXCEPTIONS.COUNT LOOP
                                                                OKL_API.set_message(
                                                                     p_app_name      => 'OKL',
                                     p_msg_name      => 'OKL_TX_TRX_UPD_ERR',
                                     p_token1        => 'TABLE_NAME',
                                     p_token1_value  => 'OKL_TAX_SOURCES',
                                     p_token2        => 'ERROR_CODE',
                                                                         p_token2_value  => SQLERRM(-SQL%BULK_EXCEPTIONS(i).ERROR_CODE),
                                                                         p_token3        => 'ITERATION',
                                                                         p_token3_value  => SQL%BULK_EXCEPTIONS(i).ERROR_INDEX);
                            END LOOP;
                            RAISE OKL_API.G_EXCEPTION_ERROR;
                          END IF;
          END;

          IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                        'Inactivated the previous active upfront tax lines ' );
          END IF;
        END IF;
        -- Inactivate the previous ACTIVE upfront tax lines - end

            IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                          'Updated existing tax lines status to INACIVE');
            END IF;

      END IF;  -- Processing will be only once for the serialized asset

          -- Get contract header info
      get_k_hdr_tax_params(
        p_api_version                  => p_api_version,
        p_init_msg_list                => p_init_msg_list,
        x_return_status                => x_return_status,
        x_msg_count                    => x_msg_count,
        x_msg_data                     => x_msg_data,
        p_khr_id                       => l_chr_id,
        p_source_trx_name              => p_source_trx_name,
        p_source_table                             => p_source_table,
        x_cust_acct_id                             => lx_cust_acct_id,
                x_bill_to_siteuseid            => lx_bill_to_siteuseid,
                x_currency_code                            => lx_currency_code,
        x_cust_trx_type_id             => lx_cust_trx_type_id,
        x_precision                                        => lx_precision,
                x_minimum_accountable_unit     => lx_minimum_accountable_unit,
                x_prch_opt_det                             => lx_alc_prch_opt_det,
                x_fin_prod_id_det                          => lx_alc_fin_prod_id_det,
                x_int_disclosed_det                        => lx_alc_int_disclosed_det,
        x_org_id                       => lx_org_id,
        x_book_class_code              => lx_book_class_code,
        x_bill_to_party_site_id        => lx_bill_to_party_site_id,
        x_bill_to_party_id             => lx_bill_to_party_id,
        x_bill_to_location_id          => lx_bill_to_location_id,
        x_currency_conversion_type     => lx_currency_conversion_type,
        x_currency_conversion_rate     => lx_currency_conversion_rate,
        x_currency_conversion_date     => lx_currency_conversion_date,
        x_contract_start_date          => lx_contract_start_date);

          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                'lx_cust_acct_id '||lx_cust_acct_id );
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                'lx_bill_to_siteuseid '||lx_bill_to_siteuseid );
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                'lx_currency_code '||lx_currency_code );
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                'lx_cust_trx_type_id '||lx_cust_trx_type_id );
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                'lx_precision '||lx_precision );
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                'lx_minimum_accountable_unit '||lx_minimum_accountable_unit );
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                'lx_alc_prch_opt_det '||lx_alc_prch_opt_det );
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                'lx_alc_fin_prod_id_det '||lx_alc_fin_prod_id_det );
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                'lx_alc_int_disclosed_det '||lx_alc_int_disclosed_det );
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                'lx_org_id '||lx_org_id );
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                'lx_book_class_code '||lx_book_class_code );
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                'lx_bill_to_party_site_id '||lx_bill_to_party_site_id );
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                'lx_bill_to_party_id '||lx_bill_to_party_id );
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                'lx_bill_to_location_id '||lx_bill_to_location_id );
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                'lx_currency_conversion_type '||lx_currency_conversion_type );
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                'lx_currency_conversion_rate '||lx_currency_conversion_rate );
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                'lx_currency_conversion_date '||lx_currency_conversion_date );
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                'lx_contract_start_date '||lx_contract_start_date );
      END IF;

          -- get the asset level determinants
          get_asset_tax_params(
                   p_api_version                  => p_api_version,
               p_init_msg_list                => OKC_API.G_FALSE,
               x_return_status                => x_return_status,
               x_msg_count                    => x_msg_count,
               x_msg_data                     => x_msg_data,
               p_khr_id                       => l_chr_id,
               p_kle_id                       => l_fin_asset_id,
               p_source_trx_name              => p_source_trx_name,
               p_source_table                             => p_source_table,
               x_transfer_of_title                        => lx_alc_transfer_of_title,
               x_sale_lease_back                          => lx_alc_sale_lease_back,
               x_purchase_of_lease                        => lx_alc_purchase_of_lease,
               x_usage_of_equipment                   => lx_alc_usage_of_equipment,
                   x_age_of_equipment                     => lx_alc_age_of_equipment,
                   x_vendor_site_id                   => lx_alc_vendor_site_id);

          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
                RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
                RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;

          -- Equipment Type(inventory item id)
          -- get the inventory item id
          OPEN   l_invitem_csr(l_fin_asset_id);
          FETCH  l_invitem_csr INTO l_inv_item_id, l_inv_item_org_id;
          IF l_invitem_csr%NOTFOUND THEN
            OKL_API.set_message( p_app_name      => 'OKL',
                                             p_msg_name      => 'OKL_TX_INV_ITEM_ERR',
                                                         p_token1        => 'ASSET_NUMBER',
                                                         p_token1_value  => l_name);
            RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;
          CLOSE  l_invitem_csr;

      -- get the Equipment Locationn (IB Loc)
          get_location_party_ids(   p_api_version                  => p_api_version,
                                    p_init_msg_list                => OKC_API.G_FALSE,
                                    x_return_status                => x_return_status,
                                    x_msg_count                    => x_msg_count,
                                    x_msg_data                     => x_msg_data,
                                    p_cust_acct_id                 => lx_cust_acct_id,
                                    p_fin_asset_id                 => l_fin_asset_id,
                                    p_khr_id                       => l_chr_id,
                                    x_bill_to_party_site_id        => lx_bill_to_party_site_id,
                                    x_bill_to_location_id          => lx_bill_to_location_id,
                                    x_bill_to_party_id             => lx_bill_to_party_id,
                                    x_bill_to_site_use_id          => lx_bill_to_siteuseid,
                                    x_ship_to_party_site_id        => lx_ship_to_party_site_id,
                                    x_ship_to_location_id          => lx_ship_to_location_id,
                                    x_ship_to_party_id             => lx_ship_to_party_id,
                                    x_ship_to_site_use_id          => lx_ship_to_siteuseid);

      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN  -- will never be setting this to unexpecetd inside get_ufc_code ?
                RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
                RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;

          IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                          'l_fin_asset_id '||l_fin_asset_id);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                          'lx_alc_transfer_of_title '||lx_alc_transfer_of_title);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                          'lx_alc_sale_lease_back '||lx_alc_sale_lease_back);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                          'lx_alc_purchase_of_lease '||lx_alc_purchase_of_lease);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                          'lx_alc_usage_of_equipment '||lx_alc_usage_of_equipment);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                          'lx_alc_age_of_equipment '||lx_alc_age_of_equipment);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                          'lx_alc_vendor_site_id '||lx_alc_vendor_site_id);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                          'l_inv_item_id '||l_inv_item_id);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                          'l_inv_item_org_id '||l_inv_item_org_id);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                          'lx_ship_to_siteuseid '||lx_ship_to_siteuseid);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                      'lx_ship_to_party_site_id '||lx_ship_to_party_site_id );
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                      'lx_ship_to_location_id '||lx_ship_to_location_id );
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                      'lx_ship_to_party_id '||lx_ship_to_party_id );
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                      'lx_bill_to_party_site_id '||lx_bill_to_party_site_id );
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                      'lx_bill_to_location_id '||lx_bill_to_location_id );
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                      'lx_bill_to_party_id '||lx_bill_to_party_id );
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                      'lx_bill_to_siteuseid '||lx_bill_to_siteuseid );
          END IF;

          --asaawnka added for bug #6612165 start
          IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                          'lx_cust_acct_id '||lx_cust_acct_id);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                          'l_install_location_id '||l_install_location_id);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                          'l_new_location_id '||l_new_location_id);
          END IF;
          --get the ship to addresses for the new location specified during asset location change
          OPEN  l_get_shiptositeid(lx_cust_acct_id,l_install_location_id,l_new_location_id);
          FETCH l_get_shiptositeid INTO lx_ship_to_siteuseid, lx_ship_to_party_site_id,
                                          lx_ship_to_party_id, lx_ship_to_location_id;
          CLOSE l_get_shiptositeid;

          IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                          'lx_ship_to_siteuseid '||lx_ship_to_siteuseid);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                      'lx_ship_to_party_site_id '||lx_ship_to_party_site_id );
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                      'lx_ship_to_location_id '||lx_ship_to_location_id );
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                      'lx_ship_to_party_id '||lx_ship_to_party_id );
          END IF;
          --asaawnka added for bug #6612165 end


          -- Check if taxable bais override applies to Asset location Change transaction
          OPEN  l_txbasisoverride_csr(l_alc_trx_type_id_det);
          FETCH l_txbasisoverride_csr INTO l_fma_id;
          CLOSE l_txbasisoverride_csr;

          IF l_fma_id IS NOT NULL THEN

                OPEN  l_formulae_csr(l_fma_id);
                FETCH l_formulae_csr INTO l_formula_name;
                IF l_formulae_csr%NOTFOUND THEN
                  OKC_API.set_message( p_app_name      => 'OKC',
                                                   p_msg_name      => G_INVALID_VALUE,
                                                   p_token1        => G_COL_NAME_TOKEN,
                                                   p_token1_value  => 'FMA_ID');
                  RAISE OKL_API.G_EXCEPTION_ERROR;
                END IF;
                CLOSE l_formulae_csr;

                IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                          'l_formula_name '||l_formula_name);
                END IF;
          END IF;

      -- Fetch the Ledger info
      l_ledger_id := okl_accounting_util.get_set_of_books_id;

      -- Fetch the Tax country
      l_taxation_country := get_default_taxation_country(x_return_status     => x_return_status,
                                                         x_msg_count         => x_msg_count,
                                                         x_msg_data          => x_msg_data,
                                                         p_legal_entity_id   => l_legal_entity_id);
          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

      OPEN c_get_streams_count(l_chr_id, l_fin_asset_id);
      FETCH c_get_streams_count INTO l_stream_count;
      CLOSE c_get_streams_count;


      -- If the asset is serialized, divide the taxable amount by number of instances count
      -- Fetch the number of instances of asset
      OPEN c_get_ast_instances(l_fin_asset_id);
      FETCH c_get_ast_instances INTO l_asset_inst_count;
      CLOSE c_get_ast_instances;

      -- 'l_alc_ser_def_code' value is used in specific to derive the TBC, PC, UFC codes only once
      -- for serialized asset in order to prevent the same processing for all serial numbers
      IF (p_serialized_asset = 'Y' AND l_stream_count > 1) THEN
        l_alc_ser_def_code := 'A'; -- If there are multiple stream types, fetch the codes always
      ELSIF (p_serialized_asset = 'Y' AND ((p_alc_final_call IS NULL OR p_alc_final_call = 'Y') AND l_asset_inst_count = 1)) THEN
        l_alc_ser_def_code := 'F'; -- If asset is serialized and asset is having only 1 unit , then fetch it
      ELSIF (p_serialized_asset = 'Y' AND p_alc_final_call IS NULL) THEN
        l_alc_ser_def_code := 'F'; -- If the asset is serialized and having multiple units, fetch only first time
      ELSIF (p_serialized_asset = 'Y' AND p_alc_final_call IN ('N', 'Y')) THEN
        l_alc_ser_def_code := 'N'; -- If the asset is serialized and having multiple units, fetch is already done in
                                   -- previous 'elsif' .. so don't fetch anymore, use the previous fetched values
      ELSIF (p_serialized_asset IS NULL OR p_serialized_asset = 'N') THEN
        l_alc_ser_def_code := 'A'; -- If the asset is not serialized fetch it
      END IF;

          tax_call_cnt := 1;

          -- This cursor will return only a few rows, typically 1 or 2
      -- For Non-Serialized asset
         -- A1 > Rent , A1 - Estimated Property tax etc
      -- For Serialized asset
         -- A1_ser1 > Rent , A1_ser1 - Estimated Property tax ( tax call)
         -- A1_ser2 > Rent , A1_ser2 - Estimated Property tax (2 tax call)
         -- A1_ser3 > Rent , A1_ser3 - Estimated Property tax (3 tax call)
          FOR l_assetstreams_rec IN l_assetstreams_csr(l_chr_id, l_fin_asset_id) LOOP

                IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                          'Processing current payment '||l_assetstreams_rec.stream_type_id);
                END IF;

                -- Get the default taxable basis amount
                OPEN  l_strmelements_csr(l_assetstreams_rec.stream_id);
                FETCH l_strmelements_csr INTO l_taxable_basis;
                CLOSE l_strmelements_csr;

        IF (p_serialized_asset = 'Y' AND l_asset_inst_count IS NOT NULL) THEN
          l_taxable_ser_basis := l_taxable_basis / l_asset_inst_count;
        END IF;

        -- Populate tax sources record -- start
        lp_tax_src_params_rec.kle_id       := l_fin_asset_id;
        lp_tax_src_params_rec.asset_number := l_name;
        lp_tax_src_params_rec.line_name    := l_name;

        lp_tax_src_params_rec.ship_to_cust_acct_site_use_id   := lx_ship_to_siteuseid;
        lp_tax_src_params_rec.ship_to_party_site_id           := lx_ship_to_party_site_id;
        lp_tax_src_params_rec.ship_to_party_id                := lx_ship_to_party_id;
        lp_tax_src_params_rec.ship_to_location_id             := lx_ship_to_location_id;

        lp_tax_src_params_rec.bill_to_party_site_id         := lx_bill_to_party_site_id;
        lp_tax_src_params_rec.bill_to_party_id              := lx_bill_to_party_id;
        lp_tax_src_params_rec.bill_to_location_id           := lx_bill_to_location_id;
        lp_tax_src_params_rec.bill_to_cust_acct_site_use_id := lx_bill_to_siteuseid;

        lp_tax_src_params_rec.inventory_item_id             := l_inv_item_id;
        lp_tax_src_params_rec.sty_id                        := l_assetstreams_rec.stream_type_id;

        lp_tax_src_params_rec.khr_id                        := l_chr_id;
        lp_tax_src_params_rec.trx_id                        := p_source_trx_id;
        lp_tax_src_params_rec.entity_code                   := G_ASSETS_ENTITY_CODE;
        lp_tax_src_params_rec.event_class_code              := G_ALC_EVENT_CODE;
        lp_tax_src_params_rec.trx_level_type                := G_TRX_LEVEL_TYPE;
        lp_tax_src_params_rec.tax_call_type_code            := G_UPFRONT_TAX;
        lp_tax_src_params_rec.tax_reporting_flag            := 'N';
        lp_tax_src_params_rec.reported_yn                   := 'N';
        lp_tax_src_params_rec.trx_date                      := l_trx_date;
        lp_tax_src_params_rec.trx_currency_code             := lx_currency_code;
        lp_tax_src_params_rec.line_intended_use             := lx_alc_usage_of_equipment;
        lp_tax_src_params_rec.bill_to_cust_acct_id          := lx_cust_acct_id;
        lp_tax_src_params_rec.org_id                        := lx_org_id;
        lp_tax_src_params_rec.legal_entity_id               := l_legal_entity_id;
        lp_tax_src_params_rec.try_id                        := l_alc_trx_type_id_det;

        lp_tax_src_params_rec.adjusted_doc_entity_code      := null;
        lp_tax_src_params_rec.adjusted_doc_event_class_code := null;
        lp_tax_src_params_rec.adjusted_doc_trx_id           := null;
            lp_tax_src_params_rec.adjusted_doc_trx_line_id      := null;
            lp_tax_src_params_rec.adjusted_doc_trx_level_type   := null;
            lp_tax_src_params_rec.adjusted_doc_number           := null;
            lp_tax_src_params_rec.adjusted_doc_date             := null;

        lp_tax_src_params_rec.default_taxation_country      := l_taxation_country;

        lp_tax_src_params_rec.currency_conversion_type      := lx_currency_conversion_type;
        lp_tax_src_params_rec.currency_conversion_rate      := lx_currency_conversion_rate;
        lp_tax_src_params_rec.currency_conversion_date      := lx_currency_conversion_date;

        IF (p_serialized_asset = 'Y') THEN
          lp_tax_src_params_rec.line_amt                      := l_taxable_ser_basis;
          lp_tax_src_params_rec.alc_serialized_total_line_amt := l_taxable_basis;
          lp_tax_src_params_rec.tax_line_status_code          := G_INACTIVE_STATUS;

          IF (p_alc_final_call = 'Y') THEN
            -- Indicates tax for last serial number. Also, used to display the
            -- HGrid data
            -- alc_serialized_yn is set at the stream type level. If A1 is
            -- serialized (3 units), with 2 stream types, okl_tax_sources will
            -- have 6 rows. Out of these 2 rows (last ones for each atream type)
            -- will have alc_serialized_yn set to 'L'
            lp_tax_src_params_rec.alc_serialized_yn           := 'L';
          ELSE
            lp_tax_src_params_rec.alc_serialized_yn           := p_serialized_asset;
          END IF;

        ELSE
          lp_tax_src_params_rec.line_amt                      := l_taxable_basis;
          lp_tax_src_params_rec.alc_serialized_total_line_amt := l_taxable_basis;
          lp_tax_src_params_rec.tax_line_status_code          := G_ACTIVE_STATUS;
        END IF;
        -- Populate tax sources record -- end

                populate_tax_info(
                                        p_api_version                  => p_api_version,
                                        p_init_msg_list                => OKC_API.G_FALSE,
                                        x_return_status                => x_return_status,
                                        x_msg_count                    => x_msg_count,
                                        x_msg_data                     => x_msg_data,
                                        p_prch_opt_det                             => lx_alc_prch_opt_det,
                                        p_fin_prod_id_det                          => lx_alc_fin_prod_id_det,
                                        p_int_disclosed_det                        => lx_alc_int_disclosed_det,
                                        p_title_trnsfr_code                        => lx_alc_transfer_of_title,
                                        p_sale_lease_back_code             => lx_alc_sale_lease_back,
                                        p_lease_purchased_code             => lx_alc_purchase_of_lease,
                                        p_equip_usage_code                         => lx_alc_usage_of_equipment,
                                        p_vendor_site_id                           => lx_alc_vendor_site_id,
                                        p_age_of_equip                             => lx_alc_age_of_equipment,
                    p_source_trx_name              => p_source_trx_name,
                                    p_cust_trx_type_id             => lx_cust_trx_type_id,
                                    p_book_class_code              => lx_book_class_code,
                                        p_tax_call_cnt                             => tax_call_cnt,
                                        p_fma_id                                           => l_fma_id,
                                        p_formula_name                             => l_formula_name,
                                        p_minimum_accountable_unit         => lx_minimum_accountable_unit,
                                        p_precision                                        => lx_precision,
                                        p_sales_quote_id                           => null,
                                    p_event_type_code              => G_ALC_CRE_EVENT_CODE,
                                    p_ledger_id                    => l_ledger_id,
                                    p_line_level_action            => G_CREATE_LINE_LEVEL_ACTION,
                                    p_tax_src_params_rec           => lp_tax_src_params_rec,
                                    p_quote_flag                   => 'N',
                                    p_rounding_ship_to_party_id    => lx_ship_to_party_id,
                                    p_rounding_bill_to_party_id    => lx_bill_to_party_id,
                                    p_line_amt_includes_tax_flag   => 'N',
                    p_term_quote_type_code         => null,
                    p_term_quote_reason_code       => null,
                    p_alc_ser_def_code             => l_alc_ser_def_code,
                                    px_tax_sources_tbl                     => lx_tax_sources_tbl,
                                    px_line_params_tbl             => lx_line_params_tbl );

        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;

                IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                                        'lx_tax_sources_tbl.count '||lx_tax_sources_tbl.count);
        END IF;

                tax_call_cnt := tax_call_cnt + 1;
      END LOOP;

          IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                          'prepared new tax sources ');
          END IF;

      -- insert into okl_tax_sources
          BEGIN
        IF lx_tax_sources_tbl.COUNT > 0 THEN
          FORALL indx in lx_tax_sources_tbl.FIRST..lx_tax_sources_tbl.LAST
            -- SAVE EXCEPTIONS
            INSERT INTO okl_tax_sources VALUES lx_tax_sources_tbl(indx);
        END IF;
      EXCEPTION
        WHEN OTHERS THEN
          IF SQL%BULK_EXCEPTIONS.COUNT > 0 THEN
                        FOR i IN 1..SQL%BULK_EXCEPTIONS.COUNT LOOP
                          OKL_API.set_message(
                                                                     p_app_name      => 'OKL',
                                     p_msg_name      => 'OKL_TX_TRX_INS_ERR',
                                     p_token1        => 'TABLE_NAME',
                                     p_token1_value  => 'OKL_TAX_SOURCES',
                                     p_token2        => 'ERROR_CODE',
                                                                         p_token2_value  => SQLERRM(-SQL%BULK_EXCEPTIONS(i).ERROR_CODE),
                                                                         p_token3        => 'ITERATION',
                                                                         p_token3_value  => SQL%BULK_EXCEPTIONS(i).ERROR_INDEX);
                        END LOOP;
                        RAISE OKL_API.G_EXCEPTION_ERROR;
                  END IF;
      END;
      -- Insert into okl_tax_sources end --

          IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                          ' inserted into okl_tax_sources ' );
          END IF;

      -- At this point tax sources for previous upfront tax have been Inactivated
      -- and tax sources for the current tax calculations have been inserted"
      -- Incase of  a non serailzed asset, sample tax sources are -
      -- K1 > A1 > RENT
      -- K1 > A1 > Est Prop Tax
      -- Above Tax sources are created during the single call from ALC to OKl Tax Engine
      -- Incase of  a serailzed asset (3 units) , sample tax sources after the
      -- first call to OKL Tax engine, for 1st serial no. are -
      -- K1 > A1 > Ser 1 > RENT
      -- K1 > A1 > Ser 1 > Est Prop Tax
      -- During subsequent calls (for each serial no.), following taxsources will be created
      -- K1 > A1 > Ser 2 > RENT
      -- K1 > A1 > Ser 2 > Est Prop Tax
      -- K1 > A1 > Ser 3 > RENT
      -- K1 > A1 > Ser 4 > Est Prop Tax
          -- Call tax engine to calculate new tax for the current asset location change transaction
          IF lx_line_params_tbl.COUNT > 0 THEN
            IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                               'Before tax engine call '||x_return_status);
            END IF;

        lp_hdr_params_rec.application_id           := G_OKL_APPLICATION_ID;
        lp_hdr_params_rec.trx_id                   := p_source_trx_id;
        lp_hdr_params_rec.internal_organization_id := lx_org_id;
        lp_hdr_params_rec.entity_code              := G_ASSETS_ENTITY_CODE;
        lp_hdr_params_rec.event_class_code         := G_ALC_EVENT_CODE;
        lp_hdr_params_rec.event_type_code          := G_ALC_CRE_EVENT_CODE;
        lp_hdr_params_rec.quote_flag               := 'N';

        OKL_TAX_INTERFACE_PVT.calculate_tax(
                                    p_api_version       =>  p_api_version,
                                    p_init_msg_list     =>  p_init_msg_list,
                                    x_return_status     =>  x_return_status,
                                    x_msg_count         =>  x_msg_count,
                                    x_msg_data          =>  x_msg_data,
                                    p_hdr_params_rec    =>  lp_hdr_params_rec,
                                    p_line_params_tbl   =>  lx_line_params_tbl);

                IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
                                   'After tax engine call '||x_return_status);
            END IF;

            IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;
      END IF;

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
             'Calling "update_tax_sources_total" .. ');
      END IF;

      update_tax_sources_total(p_api_version      => p_api_version,
                               p_init_msg_list    => p_init_msg_list,
                               x_return_status    => x_return_status,
                               x_msg_count        => x_msg_count,
                               x_msg_data         => x_msg_data,
                               p_source_trx_id    => p_source_trx_id,
                               p_source_trx_name  => p_source_trx_name,
                               p_serialized_asset => p_serialized_asset);

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
             'Return Status' || x_return_status);
      END IF;

      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

      IF (p_serialized_asset = 'Y' AND p_alc_final_call = 'Y') THEN
        G_UFC_CODE := null;
        G_TBC_CODE := null;
        G_PC_CODE := null;
        G_TAX_CLASS_CODE := null;

        populate_alc_total_tax(p_api_version      => p_api_version,
                               p_init_msg_list    => p_init_msg_list,
                               x_return_status    => l_return_status,
                               x_msg_count        => x_msg_count,
                               x_msg_data         => x_msg_data,
                               p_asset_id         => l_fin_asset_id,
                               p_request_id       => p_request_id,
                               p_serialized_asset => p_serialized_asset);

        IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;
      ELSE
        populate_alc_total_tax(p_api_version      => p_api_version,
                               p_init_msg_list    => p_init_msg_list,
                               x_return_status    => l_return_status,
                               x_msg_count        => x_msg_count,
                               x_msg_data         => x_msg_data,
                               p_asset_id         => l_fin_asset_id,
                               p_request_id       => p_request_id);

        IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;
      END IF;

    ELSIF p_tax_call_type = G_ACTUAL_CALL_TYPE THEN

      OPEN l_okltaxsources_csr(cp_app_id  =>  G_OKL_APPLICATION_ID,
                               cp_trx_id  =>  p_source_trx_id);
      FETCH l_okltaxsources_csr into l_taxsources_rec;
      CLOSE l_okltaxsources_csr;


      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
              'process_final_upfront_tax');
      END IF;

      -- Call ebtax procedure to flip the reportable flag from N to Y
      process_final_upfront_tax( p_api_version       => p_api_version,
                                         p_init_msg_list     => p_init_msg_list,
                                 x_return_status     => x_return_status,
                                     x_msg_count         => x_msg_count,
                                         x_msg_data          => x_msg_data,
                                         p_trx_id                        => p_source_trx_id,
                                     p_application_id    => G_OKL_APPLICATION_ID,
                                 p_entity_code       => l_taxsources_rec.entity_code,
                                 p_event_class_code  => l_taxsources_rec.event_class_code);

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
              'Return Status' || x_return_status);
      END IF;

      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
                RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
                RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
             'Calling "make_tax_sources_reportable" .. ');
      END IF;

      make_tax_sources_reportable(p_api_version    => p_api_version,
                                  p_init_msg_list  => p_init_msg_list,
                                  x_return_status  => x_return_status,
                                  x_msg_count      => x_msg_count,
                                  x_msg_data       => x_msg_data,
                                  p_source_trx_id  => p_source_trx_id);

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax.',
             'Return Status' || x_return_status);
      END IF;

      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

    END IF;

    -- CS will Call BPD API with ALC trx, to create tax only invoice.

        IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
       FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax ','End(-)');
    END IF;
  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN
         IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
         END IF;

         IF l_trxassets_csr%ISOPEN THEN
            CLOSE l_trxassets_csr;
         END IF;

         IF l_txlitminsts_csr%ISOPEN THEN
            CLOSE l_txlitminsts_csr;
         END IF;

         IF l_partysiteuses_csr%ISOPEN THEN
            CLOSE l_partysiteuses_csr;
         END IF;

         IF l_taxsources_csr%ISOPEN THEN
            CLOSE l_taxsources_csr;
         END IF;

         IF l_okcklines_csr%ISOPEN THEN
            CLOSE l_okcklines_csr;
         END IF;

         IF l_assetstreams_csr%ISOPEN THEN
            CLOSE l_assetstreams_csr;
         END IF;

         IF l_strmelements_csr%ISOPEN THEN
            CLOSE l_strmelements_csr;
         END IF;

         IF l_txbasisoverride_csr%ISOPEN THEN
            CLOSE l_txbasisoverride_csr;
         END IF;

         IF l_invitem_csr%ISOPEN THEN
            CLOSE l_invitem_csr;
         END IF;

         IF l_formulae_csr%ISOPEN THEN
            CLOSE l_formulae_csr;
         END IF;

         IF c_get_streams_count%ISOPEN THEN
            CLOSE c_get_streams_count;
         END IF;

         x_return_status := OKL_API.G_RET_STS_ERROR;
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
         IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_UNEXPECTED_ERROR');
         END IF;

         IF l_trxassets_csr%ISOPEN THEN
            CLOSE l_trxassets_csr;
         END IF;

         IF l_txlitminsts_csr%ISOPEN THEN
            CLOSE l_txlitminsts_csr;
         END IF;

         IF l_partysiteuses_csr%ISOPEN THEN
            CLOSE l_partysiteuses_csr;
         END IF;

         IF l_taxsources_csr%ISOPEN THEN
            CLOSE l_taxsources_csr;
         END IF;

         IF l_okcklines_csr%ISOPEN THEN
            CLOSE l_okcklines_csr;
         END IF;

         IF l_assetstreams_csr%ISOPEN THEN
            CLOSE l_assetstreams_csr;
         END IF;

         IF l_strmelements_csr%ISOPEN THEN
            CLOSE l_strmelements_csr;
         END IF;

         IF l_txbasisoverride_csr%ISOPEN THEN
            CLOSE l_txbasisoverride_csr;
         END IF;

         IF l_invitem_csr%ISOPEN THEN
            CLOSE l_invitem_csr;
         END IF;

         IF l_formulae_csr%ISOPEN THEN
            CLOSE l_formulae_csr;
         END IF;

         IF c_get_streams_count%ISOPEN THEN
            CLOSE c_get_streams_count;
         END IF;

         x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;

    WHEN OTHERS THEN
         IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
            FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.process_asset_loc_tax ',
                  'EXCEPTION :'||sqlerrm);
         END IF;

         IF l_trxassets_csr%ISOPEN THEN
            CLOSE l_trxassets_csr;
         END IF;

         IF l_txlitminsts_csr%ISOPEN THEN
            CLOSE l_txlitminsts_csr;
         END IF;

         IF l_partysiteuses_csr%ISOPEN THEN
            CLOSE l_partysiteuses_csr;
         END IF;

         IF l_taxsources_csr%ISOPEN THEN
            CLOSE l_taxsources_csr;
         END IF;

         IF l_okcklines_csr%ISOPEN THEN
            CLOSE l_okcklines_csr;
         END IF;

         IF l_assetstreams_csr%ISOPEN THEN
            CLOSE l_assetstreams_csr;
         END IF;

         IF l_strmelements_csr%ISOPEN THEN
            CLOSE l_strmelements_csr;
         END IF;

         IF l_txbasisoverride_csr%ISOPEN THEN
            CLOSE l_txbasisoverride_csr;
         END IF;

         IF l_invitem_csr%ISOPEN THEN
            CLOSE l_invitem_csr;
         END IF;

         IF l_formulae_csr%ISOPEN THEN
            CLOSE l_formulae_csr;
         END IF;

         IF c_get_streams_count%ISOPEN THEN
            CLOSE c_get_streams_count;
         END IF;

         x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
         -- unexpected error
         OKL_API.set_message(p_app_name      => g_app_name,
                         p_msg_name      => g_unexpected_error,
                         p_token1        => g_sqlcode_token,
                         p_token1_value  => sqlcode,
                         p_token2        => g_sqlerrm_token,
                         p_token2_value  => sqlerrm);

  END process_asset_loc_tax;

/*========================================================================
 | PRIVATE PROCEDURE process_split_asset_tax
 |
 | DESCRIPTION
 |    This procedure is called from calculate_sales_tax procedure to Split
 |    the currently active upfront tax lines for the asset being split
 |
 | CALLED FROM                                  calculate_sales_tax()
 |
 |
 | CALLS PROCEDURES/FUNCTIONS
 |     OKL_TAX_SOURCES_PUB.update_tax_sources()
 |
 |
 | PARAMETERS
 |      p_source_trx_id                 -- Source transaction ID
 |      p_source_trx_name       -- Source transaction Name
 |      p_source_table          -- Source table
 |
 | KNOWN ISSUES
 |
 | NOTES
 |
 |
 | MODIFICATION HISTORY
 | Date                  Author            Description of Changes
 | 08-APR-05            SECHAWLA           Created
 |
 *=======================================================================*/
  PROCEDURE process_split_asset_tax(
        p_api_version                   IN  NUMBER,
    p_init_msg_list                     IN  VARCHAR2 DEFAULT OKC_API.G_FALSE,
    x_return_status                     OUT NOCOPY VARCHAR2,
    x_msg_count                         OUT NOCOPY NUMBER,
    x_msg_data                          OUT NOCOPY VARCHAR2,
    p_source_trx_id                                     IN  NUMBER,
    p_source_trx_name               IN  VARCHAR2,
    p_source_table                  IN  VARCHAR2) IS

    -------------Split Asset -------------------------
    --p_source_trx_id           ---> okl_trx_assets.id
    --p_source_trx_name     ---> 'Split Asset'
    --p_source_table        ---> 'OKL_TRX_ASSETS'
    --------------------------------------------------

        -- validate source trx id
        CURSOR l_trxassets_csr(cp_trx_id IN NUMBER, cp_trx_type_name IN VARCHAR2) IS
        SELECT a.try_id, a.date_trans_occurred
        FROM   okl_trx_assets a, okl_trx_types_tl b
        WHERE  a.id = cp_trx_id
        AND    a.try_id = b.id
        AND    b.name = cp_trx_type_name
    AND    language = 'US';

        -- get the trx line information
        CURSOR l_txlassets_csr(cp_id IN NUMBER) IS
        SELECT txl.id, okc.cle_id kle_id, -- financial asset to be split
               txl.dnz_khr_id,
               txl.asset_number,
               txl.current_units
        FROM   okl_txl_assets_b txl,
           okc_k_lines_b okc
        WHERE  txl.tas_id = cp_id
    AND    txl.kle_id = okc.id
    AND    txl.dnz_khr_id = okc.dnz_chr_id;

        -- get the trx details information
        CURSOR l_txdassets_csr(cp_id IN NUMBER) IS
        SELECT txd.id, okc.cle_id target_kle_id, txd.asset_number, txd.split_percent, txd.quantity
        FROM   okl_txd_assets_b txd,
           okc_k_lines_b okc
        WHERE  tal_id = cp_id
    AND    txd.target_kle_id = okc.id;


        -- get the current active upfront tax sources for this asset
        -- k1 > A1 > RENT
        -- k1 > A1 > Estimated Property Tax
        CURSOR l_taxsources_csr(cp_khr_id IN NUMBER, cp_kle_id IN NUMBER ) IS
        SELECT id, khr_id, kle_id, asset_number, trx_id, trx_line_id, entity_code, event_class_code,
               trx_level_type, tax_call_type_code, sty_id, trx_business_category, reported_yn,
           sel_id, line_name, application_id, tax_reporting_flag, default_taxation_country,
           product_category, user_defined_fisc_class, line_intended_use,
           tax_classification_code, inventory_item_id, bill_to_cust_acct_id, legal_entity_id,
                   line_amt, assessable_value, total_tax, product_type,
           product_fisc_classification, trx_date, provnl_tax_determination_date,
           try_id, ship_to_location_id, ship_to_party_site_id, ship_to_party_id,
           bill_to_party_site_id, bill_to_location_id, bill_to_party_id,
           ship_to_cust_acct_site_use_id, bill_to_cust_acct_site_use_id,
           trx_currency_code, currency_conversion_type, currency_conversion_rate,
           currency_conversion_date, org_id, alc_serialized_yn
        FROM   okl_tax_sources
        WHERE  khr_id = cp_khr_id
        AND    kle_id = cp_kle_id
        AND    tax_call_type_code = G_UPFRONT_TAX
        AND    tax_line_status_code = G_ACTIVE_STATUS
        AND    ADJUSTED_DOC_TRX_ID IS NULL
        AND    ADJUSTED_DOC_TRX_LINE_ID IS NULL;

        -- get the tax lines corresponding to previous upfront tax source ID
    CURSOR l_taxtrxdetails_csr(cp_txs_id IN NUMBER) IS
    SELECT *
    FROM   okl_tax_trx_details
    WHERE  txs_id = cp_txs_id;

    -- get the contract id
        CURSOR l_okcklines_csr(cp_kle_id IN NUMBER) IS
        SELECT dnz_chr_id, name
        FROM   okc_k_lines_v
        WHERE  id = cp_kle_id;

    CURSOR l_racusttrxtypes_csr IS
    SELECT cust_trx_type_id
        FROM   ra_cust_trx_types_all
        WHERE  name = 'Invoice-OKL';

    CURSOR l_fndcurrency_csr(cp_currency_code IN VARCHAR2) IS
    SELECT precision, minimum_accountable_unit
    FROM   fnd_currencies
    WHERE  currency_code = cp_currency_code
        AND    enabled_flag = 'Y'
    AND    NVL(start_date_active, sysdate) <= sysdate
    AND    NVL(end_date_active, sysdate) >= sysdate;

        TYPE tax_sources_tbl_type IS TABLE OF OKL_TAX_SOURCES%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE tax_src_tbl_type IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;

        l_tax_src_tbl                                           tax_src_tbl_type;
        l_tax_sources_tbl                   tax_sources_tbl_type;
    rev_trx_lines_tbl                   zx_trx_lines_tbl_type;
    rev_trx_hdr_rec                     line_params_rec_type;
    l_line_params_tbl                   line_params_tbl_type;
    l_new_tax_sources_tbl               tax_sources_tbl_type;
    lp_hdr_params_rec                   hdr_params_rec_type;

    l_spl_trx_type_id                                   NUMBER;
    l_trx_date                                                  DATE;
    l_fin_asset_id                                              NUMBER;
    l_dnz_khr_id                                                NUMBER;
        l_asset_number                                          VARCHAR2(150);
        l_txl_id                                                        NUMBER;
        l_txd_id                                                        NUMBER;
        l_current_units                                         NUMBER;
    l_dnz_chr_id                                                NUMBER;
        l_name                                                          VARCHAR2(150);
        k                                                                       NUMBER;
        j                                                                       NUMBER;
        old_tx_src_cnt                                          NUMBER;
        new_tax_count                                           NUMBER;
    lp_txsv_rec                                                 txsv_rec_type;
        lp_txsv_rec_emp                                         txsv_rec_type;
    lx_txsv_rec                                                 txsv_rec_type;
    l_split_ratio                                               NUMBER;
    l_reverse                           BOOLEAN := FALSE;
    l_org_id                            NUMBER;
    l_legal_entity_id                   NUMBER;

    l_cust_trx_type_id                  NUMBER;
    l_precision                         NUMBER;
    l_minimum_accountable_unit          NUMBER;
    l_hdr_total_tax                     NUMBER := 0;
    l_trx_currency_code                 VARCHAR2(15);
    l_asset_ser_alc                     VARCHAR2(1);

  BEGIN

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax','Begin(+)');
    END IF;

    --Print Input Variables
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax.',
              'p_init_msg_list :'||p_init_msg_list);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax.',
              'p_source_trx_id :'||p_source_trx_id);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax.',
              'p_source_trx_name :'||p_source_trx_name);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax.',
              'p_source_table :'||p_source_table);
    END IF;

    x_return_status := OKL_API.G_RET_STS_SUCCESS;

    -- validate the source trx id
    OPEN  l_trxassets_csr(p_source_trx_id, p_source_trx_name);
    FETCH l_trxassets_csr INTO l_spl_trx_type_id, l_trx_date;
    IF l_trxassets_csr%NOTFOUND THEN
      -- source trx id is invalid
      OKC_API.set_message( p_app_name      => 'OKC',
                           p_msg_name      => G_INVALID_VALUE,
                           p_token1        => G_COL_NAME_TOKEN,
                           p_token1_value  => 'SOURCE_TRX_ID');
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    CLOSE l_trxassets_csr;

    -- get trx line information
    OPEN  l_txlassets_csr(p_source_trx_id);
    FETCH l_txlassets_csr INTO l_txl_id, l_fin_asset_id, l_dnz_khr_id,
                               l_asset_number, l_current_units;
    IF l_txlassets_csr%NOTFOUND THEN
      OKC_API.set_message( p_app_name      => 'OKC',
                           p_msg_name      => G_REQUIRED_VALUE,
                           p_token1        => G_COL_NAME_TOKEN,
                           p_token1_value  => 'Financial Asset');
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    IF l_fin_asset_id IS NULL THEN
      OKC_API.set_message( p_app_name      => 'OKC',
                           p_msg_name      => G_REQUIRED_VALUE,
                           p_token1        => G_COL_NAME_TOKEN,
                           p_token1_value  => 'KLE_ID');
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    IF l_current_units IS NULL THEN
      OKC_API.set_message( p_app_name      => 'OKC',
                           p_msg_name      => G_REQUIRED_VALUE,
                           p_token1        => G_COL_NAME_TOKEN,
                           p_token1_value  => 'CURRENT_UNITS');
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    CLOSE l_txlassets_csr;

    IF l_dnz_khr_id IS NULL OR l_asset_number IS NULL THEN
      OPEN  l_okcklines_csr(l_fin_asset_id);
      FETCH l_okcklines_csr INTO l_dnz_chr_id, l_name;
      IF l_okcklines_csr%NOTFOUND THEN
        OKC_API.set_message( p_app_name      => 'OKC',
                             p_msg_name      => G_INVALID_VALUE,
                             p_token1        => G_COL_NAME_TOKEN,
                             p_token1_value  => 'KLE_ID');
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
      CLOSE l_okcklines_csr;

      IF l_dnz_khr_id IS NULL THEN
        l_dnz_khr_id := l_dnz_chr_id;
      END IF;

      IF l_asset_number IS NULL THEN
        l_asset_number := l_name;
        IF l_asset_number IS NULL THEN
          OKC_API.set_message( p_app_name      => 'OKC',
                               p_msg_name      => G_REQUIRED_VALUE,
                               p_token1        => G_COL_NAME_TOKEN,
                               p_token1_value  => 'ASSET_NUMBER');
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;
      END IF;
    END IF;

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax.',
                  'l_txl_id'||l_txl_id);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax.',
                  'l_fin_asset_id'||l_fin_asset_id);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax.',
                  'l_dnz_khr_id'||l_dnz_khr_id);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax.',
                  'l_asset_number'||l_asset_number);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax.',
                  'l_current_units'||l_current_units);
    END IF;


    -- Create adjusting tax source transaction for the previous active tax lines
    -- These tax lines could have resulted from an earlier booking / rebooking /
    -- asset location change / split asset transactions
    -- Deactivate existing upfront tax lines for this asset.
    k := 1;
    l_tax_sources_tbl.DELETE;
    l_tax_src_tbl.DELETE;
    -- This cursor will fetch only a few rows
    FOR l_taxsources_rec IN l_taxsources_csr(l_dnz_khr_id, l_fin_asset_id) LOOP
      -- K1 > A1 > RENT
      -- K2 > A1 > Estimated Property Tax

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax.',
                  'creating -ve tax sources for prev ACTIVE upfront tax lines '||' k = '||k);
      END IF;

      IF (k = 1) THEN
        l_reverse                           := TRUE;
        l_org_id                            := l_taxsources_rec.org_id;
        l_legal_entity_id                   := l_taxsources_rec.legal_entity_id;
        l_trx_currency_code                 := l_taxsources_rec.trx_currency_code;
      END IF;

      l_hdr_total_tax := l_hdr_total_tax + l_taxsources_rec.total_tax;

      -- Create adjusting tax source transaction for the previous active tax lines
          l_tax_sources_tbl(k).id                           := get_seq_id;
      l_tax_sources_tbl(k).khr_id                       := l_taxsources_rec.khr_id;
      l_tax_sources_tbl(k).kle_id                       := l_taxsources_rec.kle_id;
      l_tax_sources_tbl(k).asset_number                 := l_taxsources_rec.asset_number;
      l_tax_sources_tbl(k).trx_id                       := p_source_trx_id; -- split asset trx id
      l_tax_sources_tbl(k).trx_line_id                  := l_tax_sources_tbl(k).id;
      l_tax_sources_tbl(k).entity_code                  := G_CONTRACTS_ENTITY_CODE;
      l_tax_sources_tbl(k).event_class_code             := G_REBOOK_EVENT_CLASS_CODE;
      l_tax_sources_tbl(k).trx_level_type               := G_TRX_LEVEL_TYPE;
      l_tax_sources_tbl(k).adjusted_doc_entity_code     := l_taxsources_rec.entity_code;
      l_tax_sources_tbl(k).adjusted_doc_event_class_code := l_taxsources_rec.event_class_code;
      l_tax_sources_tbl(k).adjusted_doc_trx_id           := l_taxsources_rec.trx_id;
      l_tax_sources_tbl(k).adjusted_doc_trx_line_id      := l_taxsources_rec.trx_line_id;
      l_tax_sources_tbl(k).adjusted_doc_trx_level_type   := l_taxsources_rec.trx_level_type;
          l_tax_sources_tbl(k).adjusted_doc_number           := NULL;
          l_tax_sources_tbl(k).adjusted_doc_date             := NULL;
          l_tax_sources_tbl(k).tax_call_type_code            := l_taxsources_rec.tax_call_type_code;
          l_tax_sources_tbl(k).sty_id                        := l_taxsources_rec.sty_id;
          l_tax_sources_tbl(k).trx_business_category         := l_taxsources_rec.trx_business_category;
          l_tax_sources_tbl(k).tax_line_status_code          := G_ACTIVE_STATUS;

          l_tax_sources_tbl(k).sel_id                        := l_taxsources_rec.sel_id;
          l_tax_sources_tbl(k).line_name                     := l_taxsources_rec.line_name;
          l_tax_sources_tbl(k).application_id                := l_taxsources_rec.application_id;
          l_tax_sources_tbl(k).tax_reporting_flag            := l_taxsources_rec.tax_reporting_flag;
          l_tax_sources_tbl(k).default_taxation_country      := l_taxsources_rec.default_taxation_country;
          l_tax_sources_tbl(k).product_category              := l_taxsources_rec.product_category;
          l_tax_sources_tbl(k).user_defined_fisc_class       := l_taxsources_rec.user_defined_fisc_class;
          l_tax_sources_tbl(k).line_intended_use             := l_taxsources_rec.line_intended_use;
          l_tax_sources_tbl(k).tax_classification_code       := l_taxsources_rec.tax_classification_code;
          l_tax_sources_tbl(k).inventory_item_id             := l_taxsources_rec.inventory_item_id;
          l_tax_sources_tbl(k).bill_to_cust_acct_id          := l_taxsources_rec.bill_to_cust_acct_id;
          l_tax_sources_tbl(k).org_id                        := l_taxsources_rec.org_id;
          l_tax_sources_tbl(k).legal_entity_id               := l_taxsources_rec.legal_entity_id;
          l_tax_sources_tbl(k).line_amt                      := -l_taxsources_rec.line_amt;
          l_tax_sources_tbl(k).assessable_value              := -l_taxsources_rec.assessable_value;
          l_tax_sources_tbl(k).total_tax                     := null; -- Populated after Reverse document ZX call
          l_tax_sources_tbl(k).product_type                  := l_taxsources_rec.product_type;
          l_tax_sources_tbl(k).product_fisc_classification   := l_taxsources_rec.product_fisc_classification;
          l_tax_sources_tbl(k).trx_date                      := l_trx_date;
          l_tax_sources_tbl(k).provnl_tax_determination_date := l_taxsources_rec.trx_date;
          l_tax_sources_tbl(k).try_id                        := l_spl_trx_type_id;
          l_tax_sources_tbl(k).ship_to_location_id           := l_taxsources_rec.ship_to_location_id;
          l_tax_sources_tbl(k).ship_to_party_site_id         := l_taxsources_rec.ship_to_party_site_id;
          l_tax_sources_tbl(k).ship_to_party_id              := l_taxsources_rec.ship_to_party_id;
          l_tax_sources_tbl(k).bill_to_party_site_id         := l_taxsources_rec.bill_to_party_site_id;
          l_tax_sources_tbl(k).bill_to_location_id           := l_taxsources_rec.bill_to_location_id;
          l_tax_sources_tbl(k).bill_to_party_id              := l_taxsources_rec.bill_to_party_id;
          l_tax_sources_tbl(k).ship_to_cust_acct_site_use_id := l_taxsources_rec.ship_to_cust_acct_site_use_id;
          l_tax_sources_tbl(k).bill_to_cust_acct_site_use_id := l_taxsources_rec.bill_to_cust_acct_site_use_id;
          l_tax_sources_tbl(k).trx_currency_code             := l_taxsources_rec.trx_currency_code;
          l_tax_sources_tbl(k).currency_conversion_type      := l_taxsources_rec.currency_conversion_type;
          l_tax_sources_tbl(k).currency_conversion_rate      := l_taxsources_rec.currency_conversion_rate;
          l_tax_sources_tbl(k).currency_conversion_date      := l_taxsources_rec.currency_conversion_date;
      l_tax_sources_tbl(k).alc_serialized_yn             := l_taxsources_rec.alc_serialized_yn;

      l_tax_sources_tbl(k).reported_yn                   := l_taxsources_rec.reported_yn;
          l_tax_sources_tbl(k).program_id                    := NULL;
          l_tax_sources_tbl(k).request_id                    := NULL;
          l_tax_sources_tbl(k).program_application_id        := NULL;
          l_tax_sources_tbl(k).program_update_date           := NULL;
          l_tax_sources_tbl(k).attribute_category            := NULL;

          l_tax_sources_tbl(k).attribute1                    := NULL;
          l_tax_sources_tbl(k).attribute2                    := NULL;
          l_tax_sources_tbl(k).attribute3                    := NULL;
          l_tax_sources_tbl(k).attribute4                    := NULL;
          l_tax_sources_tbl(k).attribute5                    := NULL;
          l_tax_sources_tbl(k).attribute6                    := NULL;
          l_tax_sources_tbl(k).attribute7                    := NULL;
          l_tax_sources_tbl(k).attribute8                    := NULL;
          l_tax_sources_tbl(k).attribute9                    := NULL;
          l_tax_sources_tbl(k).attribute10                   := NULL;
          l_tax_sources_tbl(k).attribute11                   := NULL;
          l_tax_sources_tbl(k).attribute12                   := NULL;
          l_tax_sources_tbl(k).attribute13                   := NULL;
          l_tax_sources_tbl(k).attribute14                   := NULL;
          l_tax_sources_tbl(k).attribute15                   := NULL;
          l_tax_sources_tbl(k).created_by                    := G_USER_ID;
          l_tax_sources_tbl(k).creation_date                 := SYSDATE;
          l_tax_sources_tbl(k).last_updated_by               := G_USER_ID;
          l_tax_sources_tbl(k).last_update_date              := SYSDATE;
          l_tax_sources_tbl(k).last_update_login             := G_LOGIN_ID;
          l_tax_sources_tbl(k).object_version_number         := NULL;

      l_tax_src_tbl(k)                                   := l_taxsources_rec.id;

      -- Populate the ZX reverse transaction lines table for tax call
      rev_trx_lines_tbl(k).internal_organization_id      := l_org_id;
      rev_trx_lines_tbl(k).reversing_appln_id            := G_OKL_APPLICATION_ID;
      rev_trx_lines_tbl(k).reversing_entity_code         := G_CONTRACTS_ENTITY_CODE;
      rev_trx_lines_tbl(k).reversing_evnt_cls_code       := G_REBOOK_EVENT_CLASS_CODE;
      rev_trx_lines_tbl(k).reversing_trx_id              := p_source_trx_id;
      rev_trx_lines_tbl(k).reversing_trx_level_type      := l_taxsources_rec.trx_level_type;
      rev_trx_lines_tbl(k).reversing_trx_line_id         := l_tax_sources_tbl(k).id;

      rev_trx_lines_tbl(k).reversed_appln_id             := G_OKL_APPLICATION_ID;
      rev_trx_lines_tbl(k).reversed_entity_code          := l_taxsources_rec.entity_code;
      rev_trx_lines_tbl(k).reversed_evnt_cls_code        := l_taxsources_rec.event_class_code;
      rev_trx_lines_tbl(k).reversed_trx_id               := l_taxsources_rec.trx_id;
      rev_trx_lines_tbl(k).reversed_trx_level_type       := l_taxsources_rec.trx_level_type;
      rev_trx_lines_tbl(k).reversed_trx_line_id          := l_taxsources_rec.trx_line_id;

      k := k + 1;
    END LOOP;

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax.',
                  ' k = '||k);
    END IF;

    -- Inactivate the previous ACTIVE tax lines - begin
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax.',
                  ' Inactivating the status of previous active upfront tax sources - Start ');
    END IF;

    IF l_tax_src_tbl.COUNT > 0 THEN
      BEGIN
        FORALL i IN l_tax_src_tbl.FIRST..l_tax_src_tbl.LAST
          UPDATE okl_tax_sources SET tax_line_status_code = G_INACTIVE_STATUS WHERE id = l_tax_src_tbl(i);
      EXCEPTION
        WHEN OTHERS THEN
          IF SQL%BULK_EXCEPTIONS.COUNT > 0 THEN
                        FOR i IN 1..SQL%BULK_EXCEPTIONS.COUNT LOOP
                                                                OKL_API.set_message(
                                                                     p_app_name      => 'OKL',
                                     p_msg_name      => 'OKL_TX_TRX_UPD_ERR',
                                     p_token1        => 'TABLE_NAME',
                                     p_token1_value  => 'OKL_TAX_SOURCES',
                                     p_token2        => 'ERROR_CODE',
                                                                         p_token2_value  => SQLERRM(-SQL%BULK_EXCEPTIONS(i).ERROR_CODE),
                                                                         p_token3        => 'ITERATION',
                                                                         p_token3_value  => SQL%BULK_EXCEPTIONS(i).ERROR_INDEX);
                        END LOOP;
                        RAISE OKL_API.G_EXCEPTION_ERROR;
                  END IF;
      END;
    END IF;

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax.',
                        'Inactivating the status of previous active upfront tax sources - End ' );
    END IF;
    -- Inactivate the previous ACTIVE tax lines - end

    -- bulk insert into okl_tax_sources -- start
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax.',
                  ' Insert Adjusting tax sources  - Start');
    END IF;

    BEGIN
      IF l_tax_sources_tbl.COUNT > 0 THEN
        FORALL indx in l_tax_sources_tbl.FIRST..l_tax_sources_tbl.LAST
          -- SAVE EXCEPTIONS
          INSERT INTO okl_tax_sources VALUES l_tax_sources_tbl(indx);
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        IF SQL%BULK_EXCEPTIONS.COUNT > 0 THEN
                  FOR i IN 1..SQL%BULK_EXCEPTIONS.COUNT LOOP
                        OKL_API.set_message(p_app_name      => 'OKL',
                                p_msg_name      => 'OKL_TX_TRX_INS_ERR',
                                p_token1        => 'TABLE_NAME',
                                p_token1_value  => 'OKL_TAX_SOURCES',
                                p_token2        => 'ERROR_CODE',
                                p_token2_value  => SQLERRM(-SQL%BULK_EXCEPTIONS(i).ERROR_CODE),
                                                                p_token3        => 'ITERATION',
                                                                p_token3_value  => SQL%BULK_EXCEPTIONS(i).ERROR_INDEX);
          END LOOP;
              RAISE OKL_API.G_EXCEPTION_ERROR;
                END IF;
    END;

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax.',
                  ' Insert Adjusting tax sources  - End');
    END IF;
    -- bulk insert into okl_tax_sources -- end

    -- Reverse document call
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax.',
              'Calling OKL_TAX_INTERFACE_PVT.reverse_document');
    END IF;

    IF (l_reverse) THEN  -- Process Reversal only if the tax is created for the contract

      rev_trx_hdr_rec.internal_organization_id := l_org_id;
      rev_trx_hdr_rec.application_id           := G_OKL_APPLICATION_ID;
      rev_trx_hdr_rec.trx_id                   := p_source_trx_id;
      rev_trx_hdr_rec.legal_entity_id          := l_legal_entity_id;
      rev_trx_hdr_rec.entity_code              := G_CONTRACTS_ENTITY_CODE;
      rev_trx_hdr_rec.event_class_code         := G_REBOOK_EVENT_CLASS_CODE;

      OKL_TAX_INTERFACE_PVT.reverse_document (
                              p_api_version       => p_api_version,
                              p_init_msg_list     => p_init_msg_list,
                              x_return_status     => x_return_status,
                              x_msg_count         => x_msg_count,
                              x_msg_data          => x_msg_data,
                              p_rev_trx_hdr_rec   => rev_trx_hdr_rec,
                              p_rev_trx_lines_tbl => rev_trx_lines_tbl);

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax.',
              'Return Status' || x_return_status);
      END IF;

      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

      -- Get the total tax amount corresponding to 'Reverse' transaction from
      -- zx_lines and update total_tax on okl_tax_sources
      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax.',
          'Calling "update_tax_sources_total" for updating Total Tax for all Lines in Tax Sources');
      END IF;

      update_tax_sources_total(p_api_version     => p_api_version,
                               p_init_msg_list   => p_init_msg_list,
                               x_return_status   => x_return_status,
                               x_msg_count       => x_msg_count,
                               x_msg_data        => x_msg_data,
                               p_source_trx_id   => p_source_trx_id,
                               p_source_trx_name => p_source_trx_name);

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax.',
          'Return Status' || x_return_status);
      END IF;

      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

    END IF;

    -- get the AR cust trx type ID
    OPEN  l_racusttrxtypes_csr;
    FETCH l_racusttrxtypes_csr INTO l_cust_trx_type_id;
    IF l_racusttrxtypes_csr%NOTFOUND THEN
       -- cust trx tyep id is required
       OKC_API.set_message( p_app_name      => 'OKC',
                            p_msg_name      => G_REQUIRED_VALUE,
                            p_token1        => G_COL_NAME_TOKEN,
                            p_token1_value  => 'CUST_TRX_TYPE_ID');
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    CLOSE l_racusttrxtypes_csr;

        OPEN  l_fndcurrency_csr(l_trx_currency_code);
    FETCH l_fndcurrency_csr INTO l_precision, l_minimum_accountable_unit;  -- l_minimum_accountable_unit is optional in fnd_currencies
                                                                                                                                           -- but mandatory for tax team
                                                                                                                                           -- check with Nilesh
    IF l_fndcurrency_csr%NOTFOUND THEN
      OKC_API.set_message( p_app_name      => 'OKC',
                           p_msg_name      => G_INVALID_VALUE,
                           p_token1        => G_COL_NAME_TOKEN,
                           p_token1_value  => 'CURRENCY_CODE');
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    CLOSE l_fndcurrency_csr;

    IF k > 1 THEN -- if there are any existing ACTIVE upfront tax lines
      old_tx_src_cnt := k - 1;  -- tax source trx count for the original asset

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax.',
                  'old_tx_src_cnt '||old_tx_src_cnt );
      END IF;

      l_asset_ser_alc := is_serialized_and_alc(l_dnz_khr_id);

          -- create tax sources for assets after split
      l_new_tax_sources_tbl.DELETE;
      new_tax_count := 1;
      FOR l_txdassets_rec IN l_txdassets_csr(l_txl_id) LOOP  -- for each new asset

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax.',
                  'asset after split '||l_txdassets_rec.asset_number );
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax.',
                  'split_percent '||l_txdassets_rec.split_percent );
        END IF;

        IF l_txdassets_rec.split_percent IS NOT NULL THEN
          l_split_ratio := l_txdassets_rec.split_percent  / 100;
        ELSE
          l_split_ratio := l_txdassets_rec.quantity / l_current_units;
        END IF;

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax.',
                  'l_split_ratio '||l_split_ratio );
        END IF;

        -- for each new asset, create as many tax source transactions as the original asset
        FOR k IN 1..old_tx_src_cnt LOOP

          IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax.',
                       'Creating tax src for the new asset, k = '||k);
          END IF;

                  -- Create new tax sources for split transaction
              l_new_tax_sources_tbl(new_tax_count).id                           := get_seq_id;
          l_new_tax_sources_tbl(new_tax_count).khr_id                       := l_dnz_khr_id;
          l_new_tax_sources_tbl(new_tax_count).kle_id                       := l_txdassets_rec.target_kle_id;
          l_new_tax_sources_tbl(new_tax_count).asset_number                 := l_txdassets_rec.asset_number;
          l_new_tax_sources_tbl(new_tax_count).trx_id                       := p_source_trx_id; -- split asset trx id
          l_new_tax_sources_tbl(new_tax_count).trx_line_id                  := l_new_tax_sources_tbl(new_tax_count).id;
          l_new_tax_sources_tbl(new_tax_count).entity_code                  := G_CONTRACTS_ENTITY_CODE;
          l_new_tax_sources_tbl(new_tax_count).event_class_code             := G_BOOKING_EVENT_CLASS_CODE;
          l_new_tax_sources_tbl(new_tax_count).trx_level_type               := G_TRX_LEVEL_TYPE;
          l_new_tax_sources_tbl(new_tax_count).adjusted_doc_entity_code     := NULL;
          l_new_tax_sources_tbl(new_tax_count).adjusted_doc_event_class_code := NULL;
          l_new_tax_sources_tbl(new_tax_count).adjusted_doc_trx_id           := NULL;
          l_new_tax_sources_tbl(new_tax_count).adjusted_doc_trx_line_id      := NULL;
          l_new_tax_sources_tbl(new_tax_count).adjusted_doc_trx_level_type   := NULL;
              l_new_tax_sources_tbl(new_tax_count).adjusted_doc_number           := NULL;
              l_new_tax_sources_tbl(new_tax_count).adjusted_doc_date             := NULL;
              l_new_tax_sources_tbl(new_tax_count).tax_call_type_code            := G_UPFRONT_TAX;
              l_new_tax_sources_tbl(new_tax_count).sty_id                        := l_tax_sources_tbl(k).sty_id;
              l_new_tax_sources_tbl(new_tax_count).trx_business_category         := l_tax_sources_tbl(k).trx_business_category;
              l_new_tax_sources_tbl(new_tax_count).tax_line_status_code          := G_ACTIVE_STATUS;

              l_new_tax_sources_tbl(new_tax_count).sel_id                        := l_tax_sources_tbl(k).sel_id;
              l_new_tax_sources_tbl(new_tax_count).line_name                     := l_txdassets_rec.asset_number;
              l_new_tax_sources_tbl(new_tax_count).application_id                := G_OKL_APPLICATION_ID;
              l_new_tax_sources_tbl(new_tax_count).tax_reporting_flag            := l_tax_sources_tbl(k).tax_reporting_flag;
              l_new_tax_sources_tbl(new_tax_count).default_taxation_country      := l_tax_sources_tbl(k).default_taxation_country;
              l_new_tax_sources_tbl(new_tax_count).product_category              := l_tax_sources_tbl(k).product_category;
              l_new_tax_sources_tbl(new_tax_count).user_defined_fisc_class       := l_tax_sources_tbl(k).user_defined_fisc_class;
              l_new_tax_sources_tbl(new_tax_count).line_intended_use             := l_tax_sources_tbl(k).line_intended_use;
              l_new_tax_sources_tbl(new_tax_count).tax_classification_code       := l_tax_sources_tbl(k).tax_classification_code;
              l_new_tax_sources_tbl(new_tax_count).inventory_item_id             := l_tax_sources_tbl(k).inventory_item_id;
              l_new_tax_sources_tbl(new_tax_count).bill_to_cust_acct_id          := l_tax_sources_tbl(k).bill_to_cust_acct_id;
              l_new_tax_sources_tbl(new_tax_count).org_id                        := l_tax_sources_tbl(k).org_id;
              l_new_tax_sources_tbl(new_tax_count).legal_entity_id               := l_tax_sources_tbl(k).legal_entity_id;
              l_new_tax_sources_tbl(new_tax_count).line_amt                      := -l_tax_sources_tbl(k).line_amt * l_split_ratio;
              l_new_tax_sources_tbl(new_tax_count).assessable_value              := -l_tax_sources_tbl(k).assessable_value * l_split_ratio;
              l_new_tax_sources_tbl(new_tax_count).total_tax                     := null; -- Populated after tax call
              l_new_tax_sources_tbl(new_tax_count).product_type                  := l_tax_sources_tbl(k).product_type;
              l_new_tax_sources_tbl(new_tax_count).product_fisc_classification   := l_tax_sources_tbl(k).product_fisc_classification;
              l_new_tax_sources_tbl(new_tax_count).trx_date                      := l_tax_sources_tbl(k).trx_date;
              l_new_tax_sources_tbl(new_tax_count).provnl_tax_determination_date := l_tax_sources_tbl(k).provnl_tax_determination_date;
              l_new_tax_sources_tbl(new_tax_count).try_id                        := l_spl_trx_type_id;
              l_new_tax_sources_tbl(new_tax_count).ship_to_location_id           := l_tax_sources_tbl(k).ship_to_location_id;
              l_new_tax_sources_tbl(new_tax_count).ship_to_party_site_id         := l_tax_sources_tbl(k).ship_to_party_site_id;
              l_new_tax_sources_tbl(new_tax_count).ship_to_party_id              := l_tax_sources_tbl(k).ship_to_party_id;
              l_new_tax_sources_tbl(new_tax_count).bill_to_party_site_id         := l_tax_sources_tbl(k).bill_to_party_site_id;
              l_new_tax_sources_tbl(new_tax_count).bill_to_location_id           := l_tax_sources_tbl(k).bill_to_location_id;
              l_new_tax_sources_tbl(new_tax_count).bill_to_party_id              := l_tax_sources_tbl(k).bill_to_party_id;
              l_new_tax_sources_tbl(new_tax_count).ship_to_cust_acct_site_use_id := l_tax_sources_tbl(k).ship_to_cust_acct_site_use_id;
              l_new_tax_sources_tbl(new_tax_count).bill_to_cust_acct_site_use_id := l_tax_sources_tbl(k).bill_to_cust_acct_site_use_id;
              l_new_tax_sources_tbl(new_tax_count).trx_currency_code             := l_tax_sources_tbl(k).trx_currency_code;
              l_new_tax_sources_tbl(new_tax_count).currency_conversion_type      := l_tax_sources_tbl(k).currency_conversion_type;
              l_new_tax_sources_tbl(new_tax_count).currency_conversion_rate      := l_tax_sources_tbl(k).currency_conversion_rate;
              l_new_tax_sources_tbl(new_tax_count).currency_conversion_date      := l_tax_sources_tbl(k).currency_conversion_date;
              l_new_tax_sources_tbl(new_tax_count).alc_serialized_yn             := l_tax_sources_tbl(k).alc_serialized_yn;

          l_new_tax_sources_tbl(new_tax_count).reported_yn                   := l_tax_sources_tbl(k).reported_yn;
              l_new_tax_sources_tbl(new_tax_count).program_id                    := NULL;
              l_new_tax_sources_tbl(new_tax_count).request_id                    := NULL;
              l_new_tax_sources_tbl(new_tax_count).program_application_id        := NULL;
              l_new_tax_sources_tbl(new_tax_count).program_update_date           := NULL;
              l_new_tax_sources_tbl(new_tax_count).attribute_category            := NULL;

              l_new_tax_sources_tbl(new_tax_count).attribute1                    := NULL;
              l_new_tax_sources_tbl(new_tax_count).attribute2                    := NULL;
              l_new_tax_sources_tbl(new_tax_count).attribute3                    := NULL;
              l_new_tax_sources_tbl(new_tax_count).attribute4                    := NULL;
              l_new_tax_sources_tbl(new_tax_count).attribute5                    := NULL;
              l_new_tax_sources_tbl(new_tax_count).attribute6                    := NULL;
              l_new_tax_sources_tbl(new_tax_count).attribute7                    := NULL;
              l_new_tax_sources_tbl(new_tax_count).attribute8                    := NULL;
              l_new_tax_sources_tbl(new_tax_count).attribute9                    := NULL;
              l_new_tax_sources_tbl(new_tax_count).attribute10                   := NULL;
              l_new_tax_sources_tbl(new_tax_count).attribute11                   := NULL;
              l_new_tax_sources_tbl(new_tax_count).attribute12                   := NULL;
              l_new_tax_sources_tbl(new_tax_count).attribute13                   := NULL;
              l_new_tax_sources_tbl(new_tax_count).attribute14                   := NULL;
              l_new_tax_sources_tbl(new_tax_count).attribute15                   := NULL;
              l_new_tax_sources_tbl(new_tax_count).created_by                    := G_USER_ID;
              l_new_tax_sources_tbl(new_tax_count).creation_date                 := SYSDATE;
              l_new_tax_sources_tbl(new_tax_count).last_updated_by               := G_USER_ID;
              l_new_tax_sources_tbl(new_tax_count).last_update_date              := SYSDATE;
              l_new_tax_sources_tbl(new_tax_count).last_update_login             := G_LOGIN_ID;
              l_new_tax_sources_tbl(new_tax_count).object_version_number         := NULL;

          -- Populate line params table for tax calculation
          l_line_params_tbl(new_tax_count).application_id                     := G_OKL_APPLICATION_ID;
          l_line_params_tbl(new_tax_count).trx_id                             := p_source_trx_id;
          l_line_params_tbl(new_tax_count).internal_organization_id           := l_tax_sources_tbl(k).org_id;
          l_line_params_tbl(new_tax_count).entity_code                        := G_CONTRACTS_ENTITY_CODE;
          l_line_params_tbl(new_tax_count).event_class_code                   := G_BOOKING_EVENT_CLASS_CODE;
          l_line_params_tbl(new_tax_count).event_type_code                    := G_BOOKING_CRE_EVT_TYPE_CODE;
          l_line_params_tbl(new_tax_count).trx_date                           := l_tax_sources_tbl(k).trx_date;
          l_line_params_tbl(new_tax_count).ledger_id                          := okl_accounting_util.get_set_of_books_id;
          l_line_params_tbl(new_tax_count).legal_entity_id                    := l_tax_sources_tbl(k).legal_entity_id;
          l_line_params_tbl(new_tax_count).trx_level_type                     := G_TRX_LEVEL_TYPE;
          l_line_params_tbl(new_tax_count).line_level_action                  := G_CREATE_LINE_LEVEL_ACTION;
          l_line_params_tbl(new_tax_count).trx_line_id                        := l_new_tax_sources_tbl(new_tax_count).id;
          l_line_params_tbl(new_tax_count).line_amt                           := -l_tax_sources_tbl(k).line_amt * l_split_ratio;
          l_line_params_tbl(new_tax_count).tax_reporting_flag                 := l_tax_sources_tbl(k).tax_reporting_flag;
          l_line_params_tbl(new_tax_count).default_taxation_country           := l_tax_sources_tbl(k).default_taxation_country;
          l_line_params_tbl(new_tax_count).product_type                       := l_tax_sources_tbl(k).product_type;
          l_line_params_tbl(new_tax_count).output_tax_classification_code     := l_tax_sources_tbl(k).tax_classification_code;
          l_line_params_tbl(new_tax_count).assessable_value                   := -l_tax_sources_tbl(k).assessable_value * l_split_ratio;
          l_line_params_tbl(new_tax_count).receivables_trx_type_id            := l_cust_trx_type_id;
          l_line_params_tbl(new_tax_count).product_id                         := l_tax_sources_tbl(k).inventory_item_id;
          l_line_params_tbl(new_tax_count).adjusted_doc_entity_code           := NULL;
          l_line_params_tbl(new_tax_count).adjusted_doc_event_class_code      := NULL;
          l_line_params_tbl(new_tax_count).adjusted_doc_trx_id                := NULL;
          l_line_params_tbl(new_tax_count).adjusted_doc_line_id               := NULL;
          l_line_params_tbl(new_tax_count).adjusted_doc_trx_level_type        := NULL;
          l_line_params_tbl(new_tax_count).adjusted_doc_number                := NULL;
          l_line_params_tbl(new_tax_count).adjusted_doc_date                  := NULL;
          l_line_params_tbl(new_tax_count).line_amt_includes_tax_flag         := 'N';
          l_line_params_tbl(new_tax_count).trx_business_category              := l_tax_sources_tbl(k).trx_business_category;
          l_line_params_tbl(new_tax_count).product_category                   := l_tax_sources_tbl(k).product_category;
          l_line_params_tbl(new_tax_count).user_defined_fisc_class            := l_tax_sources_tbl(k).user_defined_fisc_class;
          l_line_params_tbl(new_tax_count).line_intended_use                  := l_tax_sources_tbl(k).line_intended_use;
          l_line_params_tbl(new_tax_count).ship_to_cust_acct_site_use_id      := l_tax_sources_tbl(k).ship_to_cust_acct_site_use_id;
          l_line_params_tbl(new_tax_count).bill_to_cust_acct_site_use_id      := l_tax_sources_tbl(k).bill_to_cust_acct_site_use_id;
          l_line_params_tbl(new_tax_count).bill_to_party_site_id              := l_tax_sources_tbl(k).bill_to_party_site_id;
          l_line_params_tbl(new_tax_count).bill_to_location_id                := l_tax_sources_tbl(k).bill_to_location_id;
          l_line_params_tbl(new_tax_count).bill_to_party_id                   := l_tax_sources_tbl(k).bill_to_party_id;
          l_line_params_tbl(new_tax_count).ship_to_party_site_id              := l_tax_sources_tbl(k).ship_to_party_site_id;
          l_line_params_tbl(new_tax_count).ship_to_location_id                := l_tax_sources_tbl(k).ship_to_location_id;
          l_line_params_tbl(new_tax_count).ship_to_party_id                   := l_tax_sources_tbl(k).ship_to_party_id;
          l_line_params_tbl(new_tax_count).rounding_ship_to_party_id          := l_tax_sources_tbl(k).ship_to_party_id;
          l_line_params_tbl(new_tax_count).rounding_bill_to_party_id          := l_tax_sources_tbl(k).bill_to_party_id;
          l_line_params_tbl(new_tax_count).trx_currency_code                  := l_tax_sources_tbl(k).trx_currency_code;
          l_line_params_tbl(new_tax_count).precision                          := l_precision;
          l_line_params_tbl(new_tax_count).minimum_accountable_unit           := l_minimum_accountable_unit;
          l_line_params_tbl(new_tax_count).currency_conversion_date           := l_tax_sources_tbl(k).currency_conversion_date;
          l_line_params_tbl(new_tax_count).currency_conversion_rate           := l_tax_sources_tbl(k).currency_conversion_rate;
          l_line_params_tbl(new_tax_count).currency_conversion_type               := l_tax_sources_tbl(k).currency_conversion_type;
          l_line_params_tbl(new_tax_count).provnl_tax_determination_date      := l_tax_sources_tbl(k).provnl_tax_determination_date;
          l_line_params_tbl(new_tax_count).ctrl_total_hdr_tax_amt             := l_hdr_total_tax;

              new_tax_count := new_tax_count + 1;

            END LOOP;

      END LOOP;

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax.',
                     'l_line_params_tbl.COUNT '||l_line_params_tbl.COUNT);
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax.',
                     'l_new_tax_sources_tbl.COUNT '||l_new_tax_sources_tbl.COUNT);
      END IF;

      -- bulk insert into okl_tax_sources -- start
      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax.',
                  ' Insert Split asset tax sources  - Start');
      END IF;

      BEGIN
        IF l_new_tax_sources_tbl.COUNT > 0 THEN
          FORALL indx in l_new_tax_sources_tbl.FIRST..l_new_tax_sources_tbl.LAST
            -- SAVE EXCEPTIONS
            INSERT INTO okl_tax_sources VALUES l_new_tax_sources_tbl(indx);
        END IF;
      EXCEPTION
        WHEN OTHERS THEN
          IF SQL%BULK_EXCEPTIONS.COUNT > 0 THEN
                    FOR i IN 1..SQL%BULK_EXCEPTIONS.COUNT LOOP
                          OKL_API.set_message(p_app_name      => 'OKL',
                                  p_msg_name      => 'OKL_TX_TRX_INS_ERR',
                                  p_token1        => 'TABLE_NAME',
                                  p_token1_value  => 'OKL_TAX_SOURCES',
                                  p_token2        => 'ERROR_CODE',
                                  p_token2_value  => SQLERRM(-SQL%BULK_EXCEPTIONS(i).ERROR_CODE),
                                                                  p_token3        => 'ITERATION',
                                                                  p_token3_value  => SQL%BULK_EXCEPTIONS(i).ERROR_INDEX);
            END LOOP;
                        RAISE OKL_API.G_EXCEPTION_ERROR;
                  END IF;
      END;

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax.',
                  ' Insert Split asset tax sources  - End');
      END IF;
      -- bulk insert into okl_tax_sources -- end


          IF l_line_params_tbl.COUNT > 0 THEN
            IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax.',
                               'Before tax engine call '||x_return_status);
            END IF;

        lp_hdr_params_rec.application_id           := G_OKL_APPLICATION_ID;
        lp_hdr_params_rec.trx_id                   := p_source_trx_id;
        lp_hdr_params_rec.internal_organization_id := l_org_id;
        lp_hdr_params_rec.entity_code              := G_CONTRACTS_ENTITY_CODE;
        lp_hdr_params_rec.event_class_code         := G_BOOKING_EVENT_CLASS_CODE;
        lp_hdr_params_rec.event_type_code          := G_BOOKING_CRE_EVT_TYPE_CODE;
        lp_hdr_params_rec.quote_flag               := 'N';

        OKL_TAX_INTERFACE_PVT.calculate_tax(
                                    p_api_version       =>  p_api_version,
                                    p_init_msg_list     =>  p_init_msg_list,
                                    x_return_status     =>  x_return_status,
                                    x_msg_count         =>  x_msg_count,
                                    x_msg_data          =>  x_msg_data,
                                    p_hdr_params_rec    =>  lp_hdr_params_rec,
                                    p_line_params_tbl   =>  l_line_params_tbl);

                IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax.',
                                   'After tax engine call '||x_return_status);
            END IF;

            IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;
      END IF;

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax.',
             'Calling "update_tax_sources_total" .. ');
      END IF;

      update_tax_sources_total(p_api_version    => p_api_version,
                               p_init_msg_list  => p_init_msg_list,
                               x_return_status  => x_return_status,
                               x_msg_count      => x_msg_count,
                               x_msg_data       => x_msg_data,
                               p_source_trx_id  => p_source_trx_id);

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax.',
             'Return Status' || x_return_status);
      END IF;

      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

      -- Populate Serialized Asset total tax, if the ALC happened on the asset
      -- before the Split process
      IF (l_asset_ser_alc = 'Y') THEN
        FOR l_txdassets_rec IN l_txdassets_csr(l_txl_id) LOOP
          populate_ser_split_total_tax(p_api_version      => p_api_version,
                                       p_init_msg_list    => p_init_msg_list,
                                       x_return_status    => x_return_status,
                                       x_msg_count        => x_msg_count,
                                       x_msg_data         => x_msg_data,
                                       p_asset_id         => l_txdassets_rec.target_kle_id,
                                       p_serialized_asset => l_asset_ser_alc);

          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;
        END LOOP;
      END IF;

    END IF; -- if there are any existing ACTIVE upfront tax lines

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
       FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax ','End(-)');
    END IF;

  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN
      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
      END IF;

      IF l_trxassets_csr%ISOPEN THEN
        CLOSE l_trxassets_csr;
      END IF;

      IF l_txlassets_csr%ISOPEN THEN
        CLOSE l_txlassets_csr;
      END IF;

      IF l_txdassets_csr%ISOPEN THEN
        CLOSE l_txdassets_csr;
      END IF;

      IF l_taxsources_csr%ISOPEN THEN
        CLOSE l_taxsources_csr;
      END IF;

      IF l_taxtrxdetails_csr%ISOPEN THEN
        CLOSE l_taxtrxdetails_csr;
      END IF;

      IF l_okcklines_csr%ISOPEN THEN
        CLOSE l_okcklines_csr;
      END IF;

      IF l_racusttrxtypes_csr%ISOPEN THEN
        CLOSE l_racusttrxtypes_csr;
      END IF;

      IF l_fndcurrency_csr%ISOPEN THEN
        CLOSE l_fndcurrency_csr;
      END IF;

    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_UNEXPECTED_ERROR');
      END IF;

      IF l_trxassets_csr%ISOPEN THEN
        CLOSE l_trxassets_csr;
      END IF;

      IF l_txlassets_csr%ISOPEN THEN
        CLOSE l_txlassets_csr;
      END IF;

      IF l_txdassets_csr%ISOPEN THEN
        CLOSE l_txdassets_csr;
      END IF;

      IF l_taxsources_csr%ISOPEN THEN
        CLOSE l_taxsources_csr;
      END IF;

      IF l_taxtrxdetails_csr%ISOPEN THEN
        CLOSE l_taxtrxdetails_csr;
      END IF;

      IF l_okcklines_csr%ISOPEN THEN
        CLOSE l_okcklines_csr;
      END IF;

      IF l_racusttrxtypes_csr%ISOPEN THEN
        CLOSE l_racusttrxtypes_csr;
      END IF;

      IF l_fndcurrency_csr%ISOPEN THEN
        CLOSE l_fndcurrency_csr;
      END IF;

      x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;

    WHEN OTHERS THEN
      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.process_split_asset_tax ',
                  'EXCEPTION :'||sqlerrm);
      END IF;

      IF l_trxassets_csr%ISOPEN THEN
        CLOSE l_trxassets_csr;
      END IF;

      IF l_txlassets_csr%ISOPEN THEN
        CLOSE l_txlassets_csr;
      END IF;

      IF l_txdassets_csr%ISOPEN THEN
        CLOSE l_txdassets_csr;
      END IF;

      IF l_taxsources_csr%ISOPEN THEN
        CLOSE l_taxsources_csr;
      END IF;

      IF l_taxtrxdetails_csr%ISOPEN THEN
        CLOSE l_taxtrxdetails_csr;
      END IF;

      IF l_okcklines_csr%ISOPEN THEN
        CLOSE l_okcklines_csr;
      END IF;

      IF l_racusttrxtypes_csr%ISOPEN THEN
        CLOSE l_racusttrxtypes_csr;
      END IF;

      IF l_fndcurrency_csr%ISOPEN THEN
        CLOSE l_fndcurrency_csr;
      END IF;

      x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
      -- unexpected error
      OKL_API.set_message(p_app_name      => g_app_name,
                          p_msg_name      => g_unexpected_error,
                          p_token1        => g_sqlcode_token,
                          p_token1_value  => sqlcode,
                          p_token2        => g_sqlerrm_token,
                          p_token2_value  => sqlerrm);

  END process_split_asset_tax;

/*========================================================================
 | PRIVATE PROCEDURE process_booking_upfront_tax
 |
 | DESCRIPTION
 |    This procedure is called from calculate_sales_tax procedure to calculate
 |    Upfront tax during Pre Booking and Booking
 |
 | CALLED FROM                                  calculate_sales_tax()
 |
 |
 | CALLS PROCEDURES/FUNCTIONS
 |     get_k_hdr_tax_params()
 |     get_asset_tax_params()
 |     get_location_party_ids()
 |     populate_tax_info()
 |     OKL_TAX_INTERFACE_PVT.calculate_tax()
 |
 |
 | PARAMETERS
 |      p_source_trx_id                 -- Source transaction ID
 |      p_source_trx_name       -- Source transaction Name
 |      p_source_table          -- Source table
 |      p_tax_call_type         -- 'ESTIMATED'/'ACTUAL'
 |
 | KNOWN ISSUES
 |
 | NOTES
 |
 |
 | MODIFICATION HISTORY
 | Date          Author     Description of Changes
 | 08-APR-05    SECHAWLA      Created
 | 29-NOV-05    SECHAWLA      4772640 Modified to merge Pre-Booking and Booking
 |                            setups into 'Booking'
 |
 *=======================================================================*/
 PROCEDURE process_booking_upfront_tax(
        p_api_version                   IN  NUMBER,
    p_init_msg_list                     IN  VARCHAR2 DEFAULT OKC_API.G_FALSE,
    x_return_status                     OUT NOCOPY VARCHAR2,
    x_msg_count                         OUT NOCOPY NUMBER,
    x_msg_data                          OUT NOCOPY VARCHAR2,
    p_source_trx_id                                     IN  NUMBER,
    p_source_trx_name               IN  VARCHAR2,
    p_source_table                  IN  VARCHAR2,
    p_tax_call_type                 IN  VARCHAR2) IS

     -------------Booking --------------
    --p_source_trx_id           ---> okl_trx_contracts.id
    --p_source_trx_name     ---> 'Booking'
    --p_source_table        ---> 'OKL_TRX_CONTRACTS'
    --p_tax_call_type       ---> 'ESTIMATED'/'ACTUAL'
    --------------------------------------------------
        l_return_status                 VARCHAR2(1) := OKL_API.G_RET_STS_SUCCESS;

        -- validate source trx id (Booking)
        CURSOR l_trxcontracts_csr(cp_trx_id IN NUMBER, cp_trx_type_name IN VARCHAR2) IS
        SELECT a.try_id, a.khr_id, a.legal_entity_id
        FROM   okl_trx_contracts a , okl_trx_types_tl b
        WHERE  a.id = cp_trx_id
        AND    a.try_id = b.id
        AND    b.name = cp_trx_type_name
    AND    language = 'US';

        -- validate source trx id (Rebook)
    -- okl_trx_contracts.khr_id has original contract id
    -- okl_trx_contracts.khr_id_new has rebook copy contract id
        CURSOR l_trxcontracts_rbk_csr(cp_trx_id IN NUMBER, cp_trx_type_name IN VARCHAR2) IS
        SELECT a.khr_id_new, a.legal_entity_id
        FROM   okl_trx_contracts a , okl_trx_types_tl b
        WHERE  a.id = cp_trx_id
        AND    a.try_id = b.id
        AND    b.name = cp_trx_type_name
    AND    language = 'US';

    CURSOR l_bookingtrxtypeid_csr IS
    SELECT id
        FROM   okl_trx_types_v
        WHERE  NAME = 'Booking';

    CURSOR l_tax_src_info_csr(cp_khr_id IN NUMBER, cp_trx_id IN NUMBER) IS
    SELECT org_id, application_id, entity_code, event_class_code
    FROM   okl_tax_sources
    WHERE  khr_id = cp_khr_id
    AND    tax_call_type_code = G_UPFRONT_TAX
    AND    tax_line_status_code = G_ACTIVE_STATUS
    AND    application_id = G_OKL_APPLICATION_ID
    AND    trx_id = cp_trx_id
    AND    trx_level_type = G_TRX_LEVEL_TYPE
    AND    ROWNUM = 1;

    CURSOR l_prev_taxsources_csr(cp_khr_id IN NUMBER, cp_trx_id IN NUMBER) IS
    SELECT id
    FROM   okl_tax_sources
    WHERE  khr_id = cp_khr_id
    AND    tax_call_type_code = G_UPFRONT_TAX
    AND    tax_line_status_code = G_ACTIVE_STATUS
    AND    application_id = G_OKL_APPLICATION_ID
    AND    trx_id = cp_trx_id
    AND    trx_level_type = G_TRX_LEVEL_TYPE;

    --delete the pre-booking tax source transaction and tax details
        -- This cursor is used during Booking. It will pick up the Pre-booking tax lines
        -- Pre-Booking tax lines will be the only ACTIVE set of tax lines at the time K is being Booked
    CURSOR l_prevtaxsourcesbk_csr(cp_khr_id IN NUMBER) IS
    SELECT id
    FROM   okl_tax_sources
    WHERE  khr_id = cp_khr_id
    AND    tax_call_type_code = G_UPFRONT_TAX
    AND    tax_line_status_code = G_ACTIVE_STATUS
    AND    application_id = G_OKL_APPLICATION_ID
    AND    trx_level_type = G_TRX_LEVEL_TYPE;

        -- Get all the asset lines of the contract
        CURSOR l_finassets_csr(cp_chr_id IN NUMBER) IS
    SELECT cle.id  fin_asset_id, cle.name asset_number
    FROM   okc_k_lines_v cle
    WHERE  cle.chr_id = cp_chr_id
    AND    cle.lse_id = 33
    AND    sts_code NOT IN ('ABANDONED', 'EXPIRED', 'REVERSED', 'TERMINATED');

        -- get the current contract and asset line level payments
        CURSOR  l_k_asset_pymnts_csr(cp_chr_id IN NUMBER) IS
        SELECT  rgpb.cle_id  line_id,
                        styb.id  stream_type_id,
                        styb.CODE stream_type_code,
                        sum(nvl((rulb2.RULE_INFORMATION3 * rulb2.RULE_INFORMATION6),0) + nvl(rulb2.RULE_INFORMATION8,0)) line_amt
        FROM
                okc_rule_groups_b rgpb,
                okc_rules_b       rulb,
                okc_rules_b       rulb2,
                okl_strm_type_b   styb
    WHERE   rgpb.dnz_chr_id = cp_chr_id
        AND    rgpb.chr_id     = cp_chr_id
        AND    rgpb.cle_id IS NULL
        AND    rgpb.rgd_code   = 'LALEVL'
        AND    rulb.rgp_id     = rgpb.id
        AND    rulb.rule_information_category  = 'LASLH'
        AND    rulb.dnz_chr_id                 = cp_chr_id
        AND    styb.id                         = rulb.object1_id1
        AND    rulb2.object2_id1               = rulb.id
        AND    rulb2.rgp_id                    = rgpb.id
        AND    rulb2.rule_information_category = 'LASLL'
        GROUP BY rgpb.cle_id, styb.id, styb.CODE
        -- Bug 9682559
        -- , rulb2.RULE_INFORMATION6
        -- End Bug 9682559
    UNION
        SELECT  rgpb.cle_id  line_id,
                        styb.id                 stream_type_id,
                        styb.CODE               stream_type_code,
                    sum(nvl((rulb2.RULE_INFORMATION3 * rulb2.RULE_INFORMATION6),0) + nvl(rulb2.RULE_INFORMATION8,0)) line_amt
        FROM    okc_k_lines_b       cleb,
                okc_rule_groups_b rgpb,
                okc_rules_b       rulb,
            okc_rules_b       rulb2,
            okl_strm_type_b   styb
        WHERE   rgpb.dnz_chr_id = cp_chr_id
        AND     rgpb.chr_id    IS NULL
        AND     rgpb.cle_id  = cleb.id
        AND     cleb.dnz_chr_id = cp_chr_id
        AND     cleb.lse_id     = 33
    AND     cleb.sts_code NOT IN ('ABANDONED', 'EXPIRED', 'REVERSED', 'TERMINATED')
        AND     rgpb.rgd_code   = 'LALEVL'
        AND     rulb.rgp_id     = rgpb.id
        AND     rulb.rule_information_category  = 'LASLH'
        AND     rulb.dnz_chr_id                 = cp_chr_id
        AND     styb.id                         = rulb.object1_id1
        AND     rulb2.object2_id1               = rulb.id
        AND     rulb2.rgp_id                    = rgpb.id
        AND     rulb2.rule_information_category = 'LASLL'
    GROUP BY rgpb.cle_id, styb.id, styb.CODE;
    -- Bug 9682559
    -- , rulb2.RULE_INFORMATION6;
    -- End Bug 9682559
   -- get the inventory item id and inventory item org for a financial asset
    CURSOR l_invitem_csr(cp_fin_asset_id IN NUMBER) IS
        SELECT cim_model.object1_id1,
           cim_model.object1_id2
    FROM   okc_k_items cim_model,
           okc_k_lines_b cleb_model,
           okc_line_styles_b lseb_model
    WHERE  cim_model.cle_id    = cleb_model.id
    AND    cleb_model.cle_id   = cp_fin_asset_id
    AND    lseb_model.id       = cleb_model.lse_id
    AND    lseb_model.lty_code = 'ITEM';

        -- Check if tax basis override formula exists
        CURSOR l_txbasisoverride_csr(cp_try_id IN NUMBER) IS
        SELECT fma_id
        FROM   okl_tax_basis_override
        WHERE  try_id = cp_try_id
        AND    org_id = MO_GLOBAL.get_current_org_id;

        -- GET FORMULA NAME
    CURSOR l_formulae_csr(cp_fma_id IN NUMBER) IS
    SELECT name
    FROM   Okl_formulae_b
    WHERE  id = cp_fma_id;

    l_fetch_size                    NUMBER := 10000;
    l_bk_trx_type_id_det                        NUMBER;
    l_khr_id                                            NUMBER;
    l_legal_entity_id               NUMBER;
    i                                                           NUMBER;
    l_fma_id                                            NUMBER;
    l_formula_name                                      VARCHAR2(150);
    l_ledger_id                     NUMBER;

    lx_cust_acct_id                                     NUMBER;
    lx_currency_code                                    VARCHAR2(15);
    lx_precision                        NUMBER;
    lx_minimum_accountable_unit         NUMBER;
    lx_cust_trx_type_id                         NUMBER;

    lx_pb_prch_opt_det                          VARCHAR2(450);
    lx_pb_fin_prod_id_det                       NUMBER;
    lx_pb_int_disclosed_det                     VARCHAR2(30);
    l_tax_call_type                             VARCHAR2(30);

    l_pb_transfer_of_title                      VARCHAR2(30);
    l_pb_sale_lease_back                        VARCHAR2(30);
    l_pb_purchase_of_lease                      VARCHAR2(30);
    l_pb_usage_of_equipment                     VARCHAR2(450);
    l_pb_age_of_equipment                       NUMBER;
    l_pb_vendor_site_id             NUMBER;
    l_inv_item_id                                       NUMBER;
        l_inv_item_org_id                               NUMBER;

    lx_bill_to_party_site_id        NUMBER;
    lx_bill_to_location_id          NUMBER;
    lx_bill_to_party_id             NUMBER;
    lx_bill_to_siteuseid            NUMBER;
    lx_ship_to_party_site_id        NUMBER;
    lx_ship_to_location_id          NUMBER;
    lx_ship_to_party_id             NUMBER;
    lx_ship_to_siteuseid                NUMBER;

    lx_org_id                       NUMBER;
    lx_book_class_code              VARCHAR2(30);
    lx_currency_conversion_type     VARCHAR2(30);
    lx_currency_conversion_rate     NUMBER;
    lx_currency_conversion_date     DATE;
    lx_contract_start_date          DATE;

    tax_call_cnt                                        NUMBER;
    k_pymnt_exist                                       VARCHAR2(1);
    l_reported_yn                                       VARCHAR2(1);

    l_internal_organization_id      NUMBER;
    l_application_id                NUMBER;
    l_entity_code                   VARCHAR2(30);
    l_event_class_code              VARCHAR2(30);
    k                               NUMBER;
    l_taxation_country              VARCHAR2(2);
    ind                                                         NUMBER;
    l_delete_data                   BOOLEAN := FALSE;

    l_event_type_code               VARCHAR2(30);


    TYPE  prev_tax_source_tbl_type IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
    TYPE  prev_tx_trx_det_tbl_type IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
    TYPE k_asset_pymnts_tbl_type  IS TABLE OF l_k_asset_pymnts_csr%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE finassets_tbl_type       IS TABLE OF l_finassets_csr%ROWTYPE INDEX BY BINARY_INTEGER;

    l_k_asset_pymnts_tbl                        k_asset_pymnts_tbl_type;
    l_prev_tax_source_tbl           prev_tax_source_tbl_type;
    lp_hdr_params_rec               hdr_params_rec_type;
    l_transaction_rec               transaction_rec_type;
    lp_tax_src_params_rec           tax_src_params_rec_type;
    lx_line_params_tbl              line_params_tbl_type;
        l_pb_asset_level_det_tbl            asset_level_det_tbl_type;
    lx_tax_sources_tbl                  tax_sources_tbl_type;
    l_finassets_tbl                             finassets_tbl_type;

  BEGIN

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax','Begin(+)');
    END IF;

    --Print Input Variables
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
              'p_init_msg_list :'||p_init_msg_list);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
              'p_source_trx_id :'||p_source_trx_id);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
              'p_source_trx_name :'||p_source_trx_name);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
              'p_source_table :'||p_source_table);

    END IF;

    x_return_status := OKL_API.G_RET_STS_SUCCESS;

    IF (p_source_trx_name = 'Booking') THEN
      -- validate the source trx id
      OPEN  l_trxcontracts_csr(p_source_trx_id, p_source_trx_name);
      FETCH l_trxcontracts_csr INTO l_bk_trx_type_id_det, l_khr_id, l_legal_entity_id;
      -- At this point, l_bk_trx_type_id_det will be the id of Booking trx type
      IF l_trxcontracts_csr%NOTFOUND THEN
        -- source trx id is invalid
        OKC_API.set_message( p_app_name      => 'OKC',
                             p_msg_name      => G_INVALID_VALUE,
                             p_token1        => G_COL_NAME_TOKEN,
                             p_token1_value  => 'SOURCE_TRX_ID');
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
      CLOSE l_trxcontracts_csr;
    ELSIF (p_source_trx_name = 'Rebook') THEN
      -- validate the source trx id
      OPEN  l_trxcontracts_rbk_csr(p_source_trx_id, p_source_trx_name);
      FETCH l_trxcontracts_rbk_csr INTO l_khr_id, l_legal_entity_id;
      -- At this point, l_bk_trx_type_id_det will be the id of Booking trx type
      IF l_trxcontracts_rbk_csr%NOTFOUND THEN
        -- source trx id is invalid
        OKC_API.set_message( p_app_name      => 'OKC',
                             p_msg_name      => G_INVALID_VALUE,
                             p_token1        => G_COL_NAME_TOKEN,
                             p_token1_value  => 'SOURCE_TRX_ID');
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
      CLOSE l_trxcontracts_rbk_csr;

      OPEN  l_bookingtrxtypeid_csr;
      FETCH l_bookingtrxtypeid_csr INTO l_bk_trx_type_id_det;
      CLOSE l_bookingtrxtypeid_csr;

    END IF;

    l_tax_call_type := upper(p_tax_call_type);

    IF (l_tax_call_type IS NOT NULL AND
        l_tax_call_type NOT IN (G_ESTIMATED_CALL_TYPE, G_ACTUAL_CALL_TYPE)) THEN
      OKC_API.set_message( p_app_name      => 'OKC',
                           p_msg_name      => G_INVALID_VALUE,
                           p_token1        => G_COL_NAME_TOKEN,
                           p_token1_value  => 'TAX_CALL_TYPE');
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    IF (l_tax_call_type = G_ESTIMATED_CALL_TYPE) THEN

      l_event_class_code        := G_BOOKING_EVENT_CLASS_CODE;
      l_event_type_code         := G_BOOKING_CRE_EVT_TYPE_CODE;

      -- Fetch info from tax sources
      OPEN  l_tax_src_info_csr(l_khr_id, p_source_trx_id);
      FETCH l_tax_src_info_csr INTO l_internal_organization_id, l_application_id,
                                    l_entity_code, l_event_class_code;
      CLOSE l_tax_src_info_csr;

      -- Check if estimated Booking tax lines already exist for p_source_trx_id
      -- This may happen if contract is validated multiple times prior to activation
      -- Bulk delete Previous Booking tax sources
      OPEN  l_prev_taxsources_csr(l_khr_id, p_source_trx_id);
      LOOP
        l_prev_tax_source_tbl.DELETE;
            FETCH l_prev_taxsources_csr BULK COLLECT INTO l_prev_tax_source_tbl LIMIT l_fetch_size;
        IF l_prev_tax_source_tbl.COUNT > 0 THEN
          l_delete_data := TRUE;
          BEGIN
            FORALL i IN l_prev_tax_source_tbl.FIRST..l_prev_tax_source_tbl.LAST
              DELETE FROM OKL_TAX_SOURCES WHERE id = l_prev_tax_source_tbl(i);

          EXCEPTION
                WHEN OTHERS THEN
                  IF SQL%BULK_EXCEPTIONS.COUNT > 0 THEN
                                FOR i IN 1..SQL%BULK_EXCEPTIONS.COUNT LOOP
                                    OKL_API.set_message(p_app_name      => 'OKL',
                                        p_msg_name      => 'OKL_TX_TRX_DEL_ERR',
                                        p_token1        => 'TABLE_NAME',
                                        p_token1_value  => 'OKL_TAX_SOURCES',
                                        p_token2        => 'ERROR_CODE',
                                        p_token2_value  => SQLERRM(-SQL%BULK_EXCEPTIONS(i).ERROR_CODE),
                                                                                p_token3        => 'ITERATION',
                                                                                p_token3_value  => SQL%BULK_EXCEPTIONS(i).ERROR_INDEX);
                            END LOOP;
                                RAISE OKL_API.G_EXCEPTION_ERROR;
                          END IF;
          END;
        END IF;
        EXIT WHEN l_prev_taxsources_csr%NOTFOUND;
      END LOOP;
      CLOSE l_prev_taxsources_csr;
      -- deletion from tax sources -- end

      -- delete booking tax lines from zx_lines -- start
      IF (l_delete_data) THEN

        l_transaction_rec.internal_organization_id := l_internal_organization_id;
        l_transaction_rec.application_id           := l_application_id;
        l_transaction_rec.entity_code              := l_entity_code;
        l_transaction_rec.event_class_code         := l_event_class_code;
        l_transaction_rec.event_type_code          := G_BOOK_DEL_EVENT_CODE;

        l_transaction_rec.trx_id                   :=  p_source_trx_id;

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
              'OKL_TAX_INTERFACE_PVT.update_document');
        END IF;

        OKL_TAX_INTERFACE_PVT.update_document(p_api_version     => p_api_version,
                                              p_init_msg_list   => p_init_msg_list,
                                              x_return_status   => x_return_status,
                                              x_msg_count       => x_msg_count,
                                              x_msg_data        => x_msg_data,
                                              p_transaction_rec => l_transaction_rec);

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
              'Return Status' || x_return_status);
        END IF;

            IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;
      END IF;
      -- delete booking tax lines from zx_lines -- end

      -- Fetch the Ledger info
      l_ledger_id := okl_accounting_util.get_set_of_books_id;
      l_reported_yn := 'N';

      -- Fetch the Tax country
      l_taxation_country := get_default_taxation_country(x_return_status     => x_return_status,
                                                         x_msg_count         => x_msg_count,
                                                         x_msg_data          => x_msg_data,
                                                         p_legal_entity_id   => l_legal_entity_id);
          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

      -- Check if taxable basis override applies to Estimated Booking / Booking transaction
      OPEN  l_txbasisoverride_csr(l_bk_trx_type_id_det);
      FETCH l_txbasisoverride_csr INTO l_fma_id;
      CLOSE l_txbasisoverride_csr;

      IF l_fma_id IS NOT NULL THEN
        OPEN  l_formulae_csr(l_fma_id);
        FETCH l_formulae_csr INTO l_formula_name;
        IF l_formulae_csr%NOTFOUND THEN
          OKC_API.set_message( p_app_name      => 'OKC',
                               p_msg_name      => G_INVALID_VALUE,
                               p_token1        => G_COL_NAME_TOKEN,
                               p_token1_value  => 'FMA_ID');
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;
        CLOSE l_formulae_csr;

            IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                        'l_formula_name '||l_formula_name );
        END IF;
          END IF;

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                'l_khr_id '||l_khr_id );
      END IF;
          -- Get contract header info
      get_k_hdr_tax_params(
        p_api_version                  => p_api_version,
        p_init_msg_list                => p_init_msg_list,
        x_return_status                => x_return_status,
        x_msg_count                    => x_msg_count,
        x_msg_data                     => x_msg_data,
        p_khr_id                       => l_khr_id,
        p_source_trx_name              => p_source_trx_name,
        p_source_table                             => p_source_table,
        x_cust_acct_id                             => lx_cust_acct_id,
                x_bill_to_siteuseid            => lx_bill_to_siteuseid,
                x_currency_code                            => lx_currency_code,
        x_cust_trx_type_id             => lx_cust_trx_type_id,
        x_precision                                        => lx_precision,
                x_minimum_accountable_unit     => lx_minimum_accountable_unit,
                x_prch_opt_det                             => lx_pb_prch_opt_det,
                x_fin_prod_id_det                          => lx_pb_fin_prod_id_det,
                x_int_disclosed_det                        => lx_pb_int_disclosed_det,
        x_org_id                       => lx_org_id,
        x_book_class_code              => lx_book_class_code,
        x_bill_to_party_site_id        => lx_bill_to_party_site_id,
        x_bill_to_party_id             => lx_bill_to_party_id,
        x_bill_to_location_id          => lx_bill_to_location_id,
        x_currency_conversion_type     => lx_currency_conversion_type,
        x_currency_conversion_rate     => lx_currency_conversion_rate,
        x_currency_conversion_date     => lx_currency_conversion_date,
        x_contract_start_date          => lx_contract_start_date);

          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                'l_cust_acct_id '||lx_cust_acct_id );
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                'lx_bill_to_siteuseid '||lx_bill_to_siteuseid );
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                'lx_currency_code '||lx_currency_code );
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                'lx_cust_trx_type_id '||lx_cust_trx_type_id );
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                'lx_precision '||lx_precision );
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                'lx_minimum_accountable_unit '||lx_minimum_accountable_unit );
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                'lx_pb_prch_opt_det '||lx_pb_prch_opt_det );
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                'lx_pb_fin_prod_id_det '||lx_pb_fin_prod_id_det );
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                'lx_pb_int_disclosed_det '||lx_pb_int_disclosed_det );
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                'lx_org_id '||lx_org_id );
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                'lx_book_class_code '||lx_book_class_code );
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                'lx_bill_to_party_site_id '||lx_bill_to_party_site_id );
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                'lx_bill_to_party_id '||lx_bill_to_party_id );
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                'lx_bill_to_location_id '||lx_bill_to_location_id );
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                'lx_currency_conversion_type '||lx_currency_conversion_type );
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                'lx_currency_conversion_rate '||lx_currency_conversion_rate );
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                'lx_currency_conversion_date '||lx_currency_conversion_date );
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                'lx_contract_start_date '||lx_contract_start_date );
      END IF;

      -- Tax call will be made at the contract and asset line level, even if no payments exist at any of these levels
      i := 0;

      OPEN l_finassets_csr(l_khr_id);
      LOOP
        l_finassets_tbl.DELETE;
        FETCH l_finassets_csr BULK COLLECT INTO l_finassets_tbl LIMIT l_fetch_size;

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                'l_finassets_tbl.COUNT '||l_finassets_tbl.COUNT );
            END IF;

            IF l_finassets_tbl.COUNT > 0 THEN

          FOR K IN l_finassets_tbl.FIRST..l_finassets_tbl.LAST LOOP

            l_pb_transfer_of_title   := null;
                l_pb_sale_lease_back     := null;
                l_pb_purchase_of_lease   := null;
                l_pb_usage_of_equipment  := null;
                        l_pb_age_of_equipment    := null;
                        l_pb_vendor_site_id      := null;

            lx_bill_to_party_site_id := null;
            lx_bill_to_location_id   := null;
            lx_bill_to_party_id      := null;
            lx_bill_to_siteuseid     := null;
            lx_ship_to_party_site_id := null;
            lx_ship_to_location_id   := null;
            lx_ship_to_party_id      := null;
            lx_ship_to_siteuseid     := null;

            -- Get financial asset line level tax determinants --
                get_asset_tax_params(
                                                                p_api_version                  => p_api_version,
                                                        p_init_msg_list                => OKC_API.G_FALSE,
                                                        x_return_status                => x_return_status,
                                                        x_msg_count                    => x_msg_count,
                                                        x_msg_data                     => x_msg_data,
                                                        p_khr_id                       => l_khr_id,
                                                        p_kle_id                       => l_finassets_tbl(k).fin_asset_id,
                                                        p_source_trx_name              => p_source_trx_name,
                                                    p_source_table                                 => p_source_table,
                                                        x_transfer_of_title                        => l_pb_transfer_of_title,
                                                        x_sale_lease_back                          => l_pb_sale_lease_back,
                                                        x_purchase_of_lease                        => l_pb_purchase_of_lease,
                                                        x_usage_of_equipment               => l_pb_usage_of_equipment,
                                                                x_age_of_equipment                         => l_pb_age_of_equipment,
                                                                x_vendor_site_id                       => l_pb_vendor_site_id);

                        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
                  RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
                ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
                  RAISE OKL_API.G_EXCEPTION_ERROR;
                END IF;

                -- Equipment Type(inventory item id)
                        -- get the inventory item id
                        OPEN   l_invitem_csr(l_finassets_tbl(k).fin_asset_id);
                        FETCH  l_invitem_csr INTO l_inv_item_id, l_inv_item_org_id;
                        IF l_invitem_csr%NOTFOUND THEN
                          OKL_API.set_message(
                                                     p_app_name      => 'OKL',
                             p_msg_name      => 'OKL_TX_INV_ITEM_ERR',
                                                 p_token1        => 'ASSET_NUMBER',
                                                         p_token1_value  => l_finassets_tbl(k).asset_number);

                          RAISE OKL_API.G_EXCEPTION_ERROR;
                        END IF;
                        CLOSE  l_invitem_csr;

                        -- get the Location Party ID's
                        get_location_party_ids(
                                                                        p_api_version                  => p_api_version,
                                                                p_init_msg_list                => OKC_API.G_FALSE,
                                                                x_return_status                => x_return_status,
                                                                x_msg_count                    => x_msg_count,
                                                                x_msg_data                     => x_msg_data,
                                                                p_cust_acct_id                 => lx_cust_acct_id,
                                                                p_fin_asset_id                 => l_finassets_tbl(k).fin_asset_id,
                                    p_khr_id                       => l_khr_id,
                                    x_bill_to_party_site_id        => lx_bill_to_party_site_id,
                                    x_bill_to_location_id          => lx_bill_to_location_id,
                                    x_bill_to_party_id             => lx_bill_to_party_id,
                                    x_bill_to_site_use_id                  => lx_bill_to_siteuseid,
                                    x_ship_to_party_site_id        => lx_ship_to_party_site_id,
                                    x_ship_to_location_id          => lx_ship_to_location_id,
                                    x_ship_to_party_id             => lx_ship_to_party_id,
                                    x_ship_to_site_use_id                  => lx_ship_to_siteuseid);

            IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
                          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
                        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
                          RAISE OKL_API.G_EXCEPTION_ERROR;
                        END IF;

                l_pb_asset_level_det_tbl(i).fin_asset_id       := l_finassets_tbl(k).fin_asset_id;
                l_pb_asset_level_det_tbl(i).asset_number       := l_finassets_tbl(k).asset_number;
                l_pb_asset_level_det_tbl(i).transfer_of_title  := l_pb_transfer_of_title;
                l_pb_asset_level_det_tbl(i).sale_lease_back    := l_pb_sale_lease_back;
                l_pb_asset_level_det_tbl(i).purchase_of_lease  := l_pb_purchase_of_lease;
                l_pb_asset_level_det_tbl(i).usage_of_equipment := l_pb_usage_of_equipment;
                l_pb_asset_level_det_tbl(i).vendor_site_id         := l_pb_vendor_site_id;
                l_pb_asset_level_det_tbl(i).age_of_equipment   := l_pb_age_of_equipment;

                        -- tax engine parameters
                        l_pb_asset_level_det_tbl(i).inv_item_id        := l_inv_item_id;
                        l_pb_asset_level_det_tbl(i).inv_org_id         := l_inv_item_org_id;

                        -- Party, location identifiers
            l_pb_asset_level_det_tbl(i).ship_to_site_use_id   := lx_ship_to_siteuseid;
            l_pb_asset_level_det_tbl(i).ship_to_party_site_id := lx_ship_to_party_site_id;
            l_pb_asset_level_det_tbl(i).ship_to_location_id   := lx_ship_to_location_id;
            l_pb_asset_level_det_tbl(i).ship_to_party_id      := lx_ship_to_party_id;

            l_pb_asset_level_det_tbl(i).bill_to_party_site_id := lx_bill_to_party_site_id;
            l_pb_asset_level_det_tbl(i).bill_to_location_id   := lx_bill_to_location_id;
            l_pb_asset_level_det_tbl(i).bill_to_party_id      := lx_bill_to_party_id;
            l_pb_asset_level_det_tbl(i).bill_to_site_use_id   := lx_bill_to_siteuseid;

                        l_pb_asset_level_det_tbl(i).asset_pymnt_exist     := 'N';

            IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.', 'i '||i );
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                                'fin_asset_id '||l_finassets_tbl(k).fin_asset_id );
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                                'asset_number '||l_finassets_tbl(k).asset_number );
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                                'l_pb_transfer_of_title '||l_pb_transfer_of_title );
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                                'l_pb_sale_lease_back '||l_pb_sale_lease_back );
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                                'l_pb_purchase_of_lease '||l_pb_purchase_of_lease );
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                                'l_pb_usage_of_equipment '||l_pb_usage_of_equipment );
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                                'l_pb_vendor_site_id '||l_pb_vendor_site_id );
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                                'l_pb_age_of_equipment '||l_pb_age_of_equipment );
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                                'l_inv_item_id '||l_inv_item_id );
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                                'l_inv_item_org_id '||l_inv_item_org_id );
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                                'lx_ship_to_siteuseid '||lx_ship_to_siteuseid );
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                                'lx_ship_to_party_site_id '||lx_ship_to_party_site_id );
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                                'lx_ship_to_location_id '||lx_ship_to_location_id );
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                                'lx_ship_to_party_id '||lx_ship_to_party_id );
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                                'lx_bill_to_party_site_id '||lx_bill_to_party_site_id );
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                                'lx_bill_to_location_id '||lx_bill_to_location_id );
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                                'lx_bill_to_party_id '||lx_bill_to_party_id );
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                                'lx_bill_to_siteuseid '||lx_bill_to_siteuseid );
                    END IF;

                        i := i+1;
          END LOOP;
        END IF;
        EXIT WHEN l_finassets_csr%NOTFOUND;
      END LOOP;
      CLOSE l_finassets_csr;

      -- Get TBC at payment level (for each unique combination of K/Asset Line and payment) --
      k_pymnt_exist := 'N';

      i := 1;
      OPEN l_k_asset_pymnts_csr(l_khr_id);
      LOOP
        l_k_asset_pymnts_tbl.DELETE;
        FETCH l_k_asset_pymnts_csr BULK COLLECT INTO l_k_asset_pymnts_tbl LIMIT l_fetch_size;

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                        'l_k_asset_pymnts_tbl.count '||l_k_asset_pymnts_tbl.count||' i = '||i );
        END IF;

        IF l_k_asset_pymnts_tbl.count = 0 AND i = 1 THEN
                  -- No payments exist
                  -- tax call will still be made at the K hdr and each fin asset line level
                  tax_call_cnt := 1;

                  -- contract level call begin
                  IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                        'No payments exist, tax_call_cnt = '||tax_call_cnt);
          END IF;

          -- Populate tax sources record -- start
          lp_tax_src_params_rec.kle_id       := null;
          lp_tax_src_params_rec.asset_number := null;
          lp_tax_src_params_rec.line_name    := null;

          lp_tax_src_params_rec.ship_to_cust_acct_site_use_id   := null;
          lp_tax_src_params_rec.ship_to_party_site_id := null;
          lp_tax_src_params_rec.ship_to_party_id      := null;
          lp_tax_src_params_rec.ship_to_location_id   := null;

          lp_tax_src_params_rec.bill_to_party_site_id         := lx_bill_to_party_site_id;
          lp_tax_src_params_rec.bill_to_party_id              := lx_bill_to_party_id;
          lp_tax_src_params_rec.bill_to_location_id           := lx_bill_to_location_id;
          lp_tax_src_params_rec.bill_to_cust_acct_site_use_id := lx_bill_to_siteuseid;

          lp_tax_src_params_rec.inventory_item_id             := null;
          lp_tax_src_params_rec.sty_id                        := null;
          lp_tax_src_params_rec.khr_id                        := l_khr_id;
          lp_tax_src_params_rec.trx_id                        := p_source_trx_id;
          lp_tax_src_params_rec.entity_code                   := G_CONTRACTS_ENTITY_CODE;
          lp_tax_src_params_rec.event_class_code              := l_event_class_code;
          lp_tax_src_params_rec.trx_level_type                := G_TRX_LEVEL_TYPE;
              lp_tax_src_params_rec.tax_call_type_code            := G_UPFRONT_TAX;
          lp_tax_src_params_rec.tax_reporting_flag            := l_reported_yn;
          lp_tax_src_params_rec.reported_yn                   := l_reported_yn;
          lp_tax_src_params_rec.trx_date                      := lx_contract_start_date;
          lp_tax_src_params_rec.trx_currency_code             := lx_currency_code;
          lp_tax_src_params_rec.line_intended_use             := null;
          lp_tax_src_params_rec.bill_to_cust_acct_id          := lx_cust_acct_id;
          lp_tax_src_params_rec.org_id                        := lx_org_id;
          lp_tax_src_params_rec.legal_entity_id               := l_legal_entity_id;
          lp_tax_src_params_rec.line_amt                      := 0;
          lp_tax_src_params_rec.try_id                        := l_bk_trx_type_id_det;

          lp_tax_src_params_rec.adjusted_doc_entity_code      := null;
          lp_tax_src_params_rec.adjusted_doc_event_class_code := null;
          lp_tax_src_params_rec.adjusted_doc_trx_id           := null;
              lp_tax_src_params_rec.adjusted_doc_trx_line_id      := null;
              lp_tax_src_params_rec.adjusted_doc_trx_level_type   := null;
              lp_tax_src_params_rec.adjusted_doc_number           := null;
              lp_tax_src_params_rec.adjusted_doc_date             := null;
          lp_tax_src_params_rec.tax_line_status_code          := G_ACTIVE_STATUS;
          lp_tax_src_params_rec.default_taxation_country      := l_taxation_country;

          lp_tax_src_params_rec.currency_conversion_type      := lx_currency_conversion_type;
          lp_tax_src_params_rec.currency_conversion_rate      := lx_currency_conversion_rate;
          lp_tax_src_params_rec.currency_conversion_date      := lx_currency_conversion_date;
          -- Populate tax sources record -- end

                  populate_tax_info(
                        p_api_version                  => p_api_version,
                        p_init_msg_list                => OKC_API.G_FALSE,
                        x_return_status                => x_return_status,
                        x_msg_count                    => x_msg_count,
                        x_msg_data                     => x_msg_data,
                        p_prch_opt_det                             => lx_pb_prch_opt_det,
                                p_fin_prod_id_det                          => lx_pb_fin_prod_id_det,
                                p_int_disclosed_det                        => lx_pb_int_disclosed_det,
                        -- asset level begin
                        p_title_trnsfr_code                        => null,
                        p_sale_lease_back_code             => null,
                        p_lease_purchased_code             => null,
                        p_equip_usage_code                         => null,
                        p_vendor_site_id                           => null,
                        p_age_of_equip                             => null,
                p_source_trx_name              => p_source_trx_name,
                p_cust_trx_type_id             => lx_cust_trx_type_id,
                p_book_class_code              => lx_book_class_code,
                        p_tax_call_cnt                             => tax_call_cnt,
                        p_fma_id                                           => l_fma_id,
                        p_formula_name                             => l_formula_name,
                        p_minimum_accountable_unit         => lx_minimum_accountable_unit,
                        p_precision                                        => lx_precision,
                        p_sales_quote_id                           => null,
                p_event_type_code              => l_event_type_code,
                p_ledger_id                    => l_ledger_id,
                p_line_level_action            => G_CREATE_LINE_LEVEL_ACTION,
                p_tax_src_params_rec           => lp_tax_src_params_rec,
                p_quote_flag                   => 'N',
                p_rounding_ship_to_party_id    => null,
                p_rounding_bill_to_party_id    => lx_bill_to_party_id,
                p_line_amt_includes_tax_flag   => 'N',
                p_term_quote_type_code         => null,
                p_term_quote_reason_code       => null,
                px_tax_sources_tbl                         => lx_tax_sources_tbl,
                px_line_params_tbl             => lx_line_params_tbl );

          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;

                  IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                        'lx_tax_sources_tbl.count '|| lx_tax_sources_tbl.COUNT );
          END IF;
                  -- contract level call end

                  tax_call_cnt := tax_call_cnt + 1;

          IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                        'tax_call_cnt '||tax_call_cnt);
          END IF;

                  -- Fin asset level call begin
                  IF l_pb_asset_level_det_tbl.COUNT > 0 THEN
                        FOR asset_cnt IN l_pb_asset_level_det_tbl.FIRST .. l_pb_asset_level_det_tbl.LAST LOOP

              -- Populate tax sources record -- start
              lp_tax_src_params_rec.kle_id       := l_pb_asset_level_det_tbl(asset_cnt).fin_asset_id;
              lp_tax_src_params_rec.asset_number := l_pb_asset_level_det_tbl(asset_cnt).asset_number;
              lp_tax_src_params_rec.line_name    := l_pb_asset_level_det_tbl(asset_cnt).asset_number;

              lp_tax_src_params_rec.ship_to_cust_acct_site_use_id   := l_pb_asset_level_det_tbl(asset_cnt).ship_to_site_use_id;
              lp_tax_src_params_rec.ship_to_party_site_id := l_pb_asset_level_det_tbl(asset_cnt).ship_to_party_site_id;
              lp_tax_src_params_rec.ship_to_party_id      := l_pb_asset_level_det_tbl(asset_cnt).ship_to_party_id;
              lp_tax_src_params_rec.ship_to_location_id   := l_pb_asset_level_det_tbl(asset_cnt).ship_to_location_id;

              lp_tax_src_params_rec.bill_to_party_site_id         := l_pb_asset_level_det_tbl(asset_cnt).bill_to_party_site_id;
              lp_tax_src_params_rec.bill_to_party_id              := l_pb_asset_level_det_tbl(asset_cnt).bill_to_party_id;
              lp_tax_src_params_rec.bill_to_location_id           := l_pb_asset_level_det_tbl(asset_cnt).bill_to_location_id;
              lp_tax_src_params_rec.bill_to_cust_acct_site_use_id := l_pb_asset_level_det_tbl(asset_cnt).bill_to_site_use_id;

              lp_tax_src_params_rec.inventory_item_id             := l_pb_asset_level_det_tbl(asset_cnt).inv_item_id;
              lp_tax_src_params_rec.sty_id                        := null;
              lp_tax_src_params_rec.khr_id                        := l_khr_id;
              lp_tax_src_params_rec.trx_id                        := p_source_trx_id;
              lp_tax_src_params_rec.entity_code                   := G_CONTRACTS_ENTITY_CODE;
              lp_tax_src_params_rec.event_class_code              := l_event_class_code;
              lp_tax_src_params_rec.trx_level_type                := G_TRX_LEVEL_TYPE;
              lp_tax_src_params_rec.tax_call_type_code            := G_UPFRONT_TAX;
              lp_tax_src_params_rec.tax_reporting_flag            := l_reported_yn;
              lp_tax_src_params_rec.reported_yn                   := l_reported_yn;
              lp_tax_src_params_rec.trx_date                      := lx_contract_start_date;
              lp_tax_src_params_rec.trx_currency_code             := lx_currency_code;
              lp_tax_src_params_rec.line_intended_use             := l_pb_asset_level_det_tbl(asset_cnt).usage_of_equipment;
              lp_tax_src_params_rec.bill_to_cust_acct_id          := lx_cust_acct_id;
              lp_tax_src_params_rec.org_id                        := lx_org_id;
              lp_tax_src_params_rec.legal_entity_id               := l_legal_entity_id;
              lp_tax_src_params_rec.line_amt                      := 0;
              lp_tax_src_params_rec.try_id                        := l_bk_trx_type_id_det;

              lp_tax_src_params_rec.adjusted_doc_entity_code      := null;
              lp_tax_src_params_rec.adjusted_doc_event_class_code := null;
              lp_tax_src_params_rec.adjusted_doc_trx_id           := null;
                  lp_tax_src_params_rec.adjusted_doc_trx_line_id      := null;
                  lp_tax_src_params_rec.adjusted_doc_trx_level_type   := null;
                  lp_tax_src_params_rec.adjusted_doc_number           := null;
                  lp_tax_src_params_rec.adjusted_doc_date             := null;
              lp_tax_src_params_rec.tax_line_status_code          := G_ACTIVE_STATUS;
              lp_tax_src_params_rec.default_taxation_country      := l_taxation_country;

              lp_tax_src_params_rec.currency_conversion_type      := lx_currency_conversion_type;
              lp_tax_src_params_rec.currency_conversion_rate      := lx_currency_conversion_rate;
              lp_tax_src_params_rec.currency_conversion_date      := lx_currency_conversion_date;
              -- Populate tax sources record -- end

                          -- asset level call begin
                          populate_tax_info(
                                        p_api_version                  => p_api_version,
                                        p_init_msg_list                => OKC_API.G_FALSE,
                                        x_return_status                => x_return_status,
                                        x_msg_count                    => x_msg_count,
                                        x_msg_data                     => x_msg_data,
                                        p_prch_opt_det                             => lx_pb_prch_opt_det,
                                        p_fin_prod_id_det                          => lx_pb_fin_prod_id_det,
                                        p_int_disclosed_det                        => lx_pb_int_disclosed_det,
                                        -- asset level begin
                                        p_title_trnsfr_code                        => l_pb_asset_level_det_tbl(asset_cnt).transfer_of_title,
                                        p_sale_lease_back_code             => l_pb_asset_level_det_tbl(asset_cnt).sale_lease_back,
                                        p_lease_purchased_code             => l_pb_asset_level_det_tbl(asset_cnt).purchase_of_lease,
                                        p_equip_usage_code                         => l_pb_asset_level_det_tbl(asset_cnt).usage_of_equipment,
                                        p_vendor_site_id                           => l_pb_asset_level_det_tbl(asset_cnt).vendor_site_id,
                                        p_age_of_equip                             => l_pb_asset_level_det_tbl(asset_cnt).age_of_equipment,
                    p_source_trx_name              => p_source_trx_name,
                                    p_cust_trx_type_id             => lx_cust_trx_type_id,
                                    p_book_class_code              => lx_book_class_code,
                                        p_tax_call_cnt                             => tax_call_cnt,
                                        p_fma_id                                           => l_fma_id,
                                        p_formula_name                             => l_formula_name,
                                        p_minimum_accountable_unit         => lx_minimum_accountable_unit,
                                        p_precision                                        => lx_precision,
                                        p_sales_quote_id                           => null,
                                    p_event_type_code              => l_event_type_code,
                                    p_ledger_id                    => l_ledger_id,
                                    p_line_level_action            => G_CREATE_LINE_LEVEL_ACTION,
                                    p_tax_src_params_rec           => lp_tax_src_params_rec,
                                    p_quote_flag                   => 'N',
                                    p_rounding_ship_to_party_id    => l_pb_asset_level_det_tbl(asset_cnt).ship_to_party_id,
                                    p_rounding_bill_to_party_id    => l_pb_asset_level_det_tbl(asset_cnt).bill_to_party_id,
                                    p_line_amt_includes_tax_flag   => 'N',
                    p_term_quote_type_code         => null,
                    p_term_quote_reason_code       => null,
                                    px_tax_sources_tbl                     => lx_tax_sources_tbl,
                                    px_line_params_tbl             => lx_line_params_tbl );

              IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
                RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
                  ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
                RAISE OKL_API.G_EXCEPTION_ERROR;
                  END IF;
                          -- asset level call end

                          IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                            FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                                        'lx_tax_sources_tbl.count '||lx_tax_sources_tbl.count);
              END IF;

                          tax_call_cnt := tax_call_cnt + 1;
                        END LOOP;
                  END IF;
                  -- Fin asset level call end
                  -- No payments exist - end
        ELSIF l_k_asset_pymnts_tbl.COUNT > 0 THEN
                  IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                        'payments exist ');
          END IF;

          FOR K IN l_k_asset_pymnts_tbl.FIRST..l_k_asset_pymnts_tbl.LAST LOOP
                tax_call_cnt := i;

                        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                                'tax_call_cnt '||tax_call_cnt);
            END IF;

                IF l_k_asset_pymnts_tbl(k).line_id IS NULL THEN
              -- K level payment
                  IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                            FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                                'K level payment ');
              END IF;

              -- Populate tax sources record -- start
              lp_tax_src_params_rec.kle_id       := null;
              lp_tax_src_params_rec.asset_number := null;
              lp_tax_src_params_rec.line_name    := null;

              lp_tax_src_params_rec.ship_to_cust_acct_site_use_id   := null;
              lp_tax_src_params_rec.ship_to_party_site_id := null;
              lp_tax_src_params_rec.ship_to_party_id      := null;
              lp_tax_src_params_rec.ship_to_location_id   := null;

              lp_tax_src_params_rec.bill_to_party_site_id         := lx_bill_to_party_site_id;
              lp_tax_src_params_rec.bill_to_party_id              := lx_bill_to_party_id;
              lp_tax_src_params_rec.bill_to_location_id           := lx_bill_to_location_id;
              lp_tax_src_params_rec.bill_to_cust_acct_site_use_id := lx_bill_to_siteuseid;

              lp_tax_src_params_rec.inventory_item_id             := null;
              lp_tax_src_params_rec.sty_id                        := l_k_asset_pymnts_tbl(k).stream_type_id;
              lp_tax_src_params_rec.khr_id                        := l_khr_id;
              lp_tax_src_params_rec.trx_id                        := p_source_trx_id;
              lp_tax_src_params_rec.entity_code                   := G_CONTRACTS_ENTITY_CODE;
              lp_tax_src_params_rec.event_class_code              := l_event_class_code;
              lp_tax_src_params_rec.trx_level_type                := G_TRX_LEVEL_TYPE;
              lp_tax_src_params_rec.tax_call_type_code            := G_UPFRONT_TAX;
              lp_tax_src_params_rec.tax_reporting_flag            := l_reported_yn;
              lp_tax_src_params_rec.reported_yn                   := l_reported_yn;
              lp_tax_src_params_rec.trx_date                      := lx_contract_start_date;
              lp_tax_src_params_rec.trx_currency_code             := lx_currency_code;
              lp_tax_src_params_rec.line_intended_use             := null;
              lp_tax_src_params_rec.bill_to_cust_acct_id          := lx_cust_acct_id;
              lp_tax_src_params_rec.org_id                        := lx_org_id;
              lp_tax_src_params_rec.legal_entity_id               := l_legal_entity_id;
              lp_tax_src_params_rec.line_amt                      := l_k_asset_pymnts_tbl(k).line_amt;
              lp_tax_src_params_rec.try_id                        := l_bk_trx_type_id_det;

              lp_tax_src_params_rec.adjusted_doc_entity_code      := null;
              lp_tax_src_params_rec.adjusted_doc_event_class_code := null;
              lp_tax_src_params_rec.adjusted_doc_trx_id           := null;
                  lp_tax_src_params_rec.adjusted_doc_trx_line_id      := null;
                  lp_tax_src_params_rec.adjusted_doc_trx_level_type   := null;
                  lp_tax_src_params_rec.adjusted_doc_number           := null;
                  lp_tax_src_params_rec.adjusted_doc_date             := null;
              lp_tax_src_params_rec.tax_line_status_code          := G_ACTIVE_STATUS;
              lp_tax_src_params_rec.default_taxation_country      := l_taxation_country;

              lp_tax_src_params_rec.currency_conversion_type      := lx_currency_conversion_type;
              lp_tax_src_params_rec.currency_conversion_rate      := lx_currency_conversion_rate;
              lp_tax_src_params_rec.currency_conversion_date      := lx_currency_conversion_date;
              -- Populate tax sources record -- end

                          populate_tax_info(
                                              p_api_version                  => p_api_version,
                                              p_init_msg_list                => OKC_API.G_FALSE,
                                              x_return_status                => x_return_status,
                                              x_msg_count                    => x_msg_count,
                                              x_msg_data                     => x_msg_data,
                                              p_prch_opt_det                             => lx_pb_prch_opt_det,
                                                      p_fin_prod_id_det                      => lx_pb_fin_prod_id_det,
                                                      p_int_disclosed_det                        => lx_pb_int_disclosed_det,
                                              -- asset level begin
                                              p_title_trnsfr_code                        => null,
                                              p_sale_lease_back_code         => null,
                                              p_lease_purchased_code             => null,
                                              p_equip_usage_code                         => null,
                                              p_vendor_site_id                       => null,
                                              p_age_of_equip                             => null,
                                      p_source_trx_name              => p_source_trx_name,
                                      p_cust_trx_type_id             => lx_cust_trx_type_id,
                                      p_book_class_code              => lx_book_class_code,
                                              p_tax_call_cnt                             => tax_call_cnt,
                                              p_fma_id                                       => l_fma_id,
                                              p_formula_name                             => l_formula_name,
                                              p_minimum_accountable_unit         => lx_minimum_accountable_unit,
                                              p_precision                                        => lx_precision,
                                              p_sales_quote_id                       => null,
                                      p_event_type_code              => l_event_type_code,
                                      p_ledger_id                    => l_ledger_id,
                                      p_line_level_action            => G_CREATE_LINE_LEVEL_ACTION,
                                      p_tax_src_params_rec           => lp_tax_src_params_rec,
                                      p_quote_flag                   => 'N',
                                      p_rounding_ship_to_party_id    => null,
                                      p_rounding_bill_to_party_id    => lx_bill_to_party_id,
                                      p_line_amt_includes_tax_flag   => 'N',
                                      p_term_quote_type_code         => null,
                                      p_term_quote_reason_code       => null,
                                      px_tax_sources_tbl                         => lx_tax_sources_tbl,
                                      px_line_params_tbl             => lx_line_params_tbl );

              IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
                RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
                  ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
                RAISE OKL_API.G_EXCEPTION_ERROR;
                  END IF;

                          IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                            FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                                        'lx_tax_sources_tbl.count '||lx_tax_sources_tbl.count);
              END IF;

                  k_pymnt_exist := 'Y';

                ELSE  -- asset line level payment

                  IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                            FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                                        'asset line level payment ');
              END IF;

                  IF l_pb_asset_level_det_tbl.count > 0 THEN
                        ind := l_pb_asset_level_det_tbl.FIRST;
                        LOOP
                          IF l_pb_asset_level_det_tbl(ind).fin_asset_id = l_k_asset_pymnts_tbl(k).line_id THEN
                            -- get the determinants and get TBC
                            l_pb_asset_level_det_tbl(ind).asset_pymnt_exist := 'Y';

                    -- Populate tax sources record -- start
                    lp_tax_src_params_rec.kle_id       := l_k_asset_pymnts_tbl(k).line_id;
                    lp_tax_src_params_rec.asset_number := l_pb_asset_level_det_tbl(ind).asset_number;
                    lp_tax_src_params_rec.line_name    := l_pb_asset_level_det_tbl(ind).asset_number;

                    lp_tax_src_params_rec.ship_to_cust_acct_site_use_id   := l_pb_asset_level_det_tbl(ind).ship_to_site_use_id;
                    lp_tax_src_params_rec.ship_to_party_site_id := l_pb_asset_level_det_tbl(ind).ship_to_party_site_id;
                    lp_tax_src_params_rec.ship_to_party_id      := l_pb_asset_level_det_tbl(ind).ship_to_party_id;
                    lp_tax_src_params_rec.ship_to_location_id   := l_pb_asset_level_det_tbl(ind).ship_to_location_id;

                    lp_tax_src_params_rec.bill_to_party_site_id         := l_pb_asset_level_det_tbl(ind).bill_to_party_site_id;
                    lp_tax_src_params_rec.bill_to_party_id              := l_pb_asset_level_det_tbl(ind).bill_to_party_id;
                    lp_tax_src_params_rec.bill_to_location_id           := l_pb_asset_level_det_tbl(ind).bill_to_location_id;
                    lp_tax_src_params_rec.bill_to_cust_acct_site_use_id := l_pb_asset_level_det_tbl(ind).bill_to_site_use_id;

                    lp_tax_src_params_rec.inventory_item_id             := l_pb_asset_level_det_tbl(ind).inv_item_id;
                    lp_tax_src_params_rec.sty_id                        := l_k_asset_pymnts_tbl(k).stream_type_id;
                    lp_tax_src_params_rec.khr_id                        := l_khr_id;
                    lp_tax_src_params_rec.trx_id                        := p_source_trx_id;
                    lp_tax_src_params_rec.entity_code                   := G_CONTRACTS_ENTITY_CODE;
                    lp_tax_src_params_rec.event_class_code              := l_event_class_code;
                    lp_tax_src_params_rec.trx_level_type                := G_TRX_LEVEL_TYPE;
                    lp_tax_src_params_rec.tax_call_type_code            := G_UPFRONT_TAX;
                    lp_tax_src_params_rec.tax_reporting_flag            := l_reported_yn;
                    lp_tax_src_params_rec.reported_yn                   := l_reported_yn;
                    lp_tax_src_params_rec.trx_date                      := lx_contract_start_date;
                    lp_tax_src_params_rec.trx_currency_code             := lx_currency_code;
                    lp_tax_src_params_rec.line_intended_use             := l_pb_asset_level_det_tbl(ind).usage_of_equipment;
                    lp_tax_src_params_rec.bill_to_cust_acct_id          := lx_cust_acct_id;
                    lp_tax_src_params_rec.org_id                        := lx_org_id;
                    lp_tax_src_params_rec.legal_entity_id               := l_legal_entity_id;
                    lp_tax_src_params_rec.line_amt                      := l_k_asset_pymnts_tbl(k).line_amt;
                    lp_tax_src_params_rec.try_id                        := l_bk_trx_type_id_det;

                    lp_tax_src_params_rec.adjusted_doc_entity_code      := null;
                    lp_tax_src_params_rec.adjusted_doc_event_class_code := null;
                    lp_tax_src_params_rec.adjusted_doc_trx_id           := null;
                        lp_tax_src_params_rec.adjusted_doc_trx_line_id      := null;
                        lp_tax_src_params_rec.adjusted_doc_trx_level_type   := null;
                        lp_tax_src_params_rec.adjusted_doc_number           := null;
                        lp_tax_src_params_rec.adjusted_doc_date             := null;
                    lp_tax_src_params_rec.tax_line_status_code          := G_ACTIVE_STATUS;
                    lp_tax_src_params_rec.default_taxation_country      := l_taxation_country;

                    lp_tax_src_params_rec.currency_conversion_type      := lx_currency_conversion_type;
                    lp_tax_src_params_rec.currency_conversion_rate      := lx_currency_conversion_rate;
                    lp_tax_src_params_rec.currency_conversion_date      := lx_currency_conversion_date;
                    -- Populate tax sources record -- end

                                -- asset level call begin
                                populate_tax_info(
                                                p_api_version                  => p_api_version,
                                                    p_init_msg_list                => OKC_API.G_FALSE,
                                                    x_return_status                => x_return_status,
                                                    x_msg_count                    => x_msg_count,
                                                    x_msg_data                     => x_msg_data,
                                                    p_prch_opt_det                                 => lx_pb_prch_opt_det,
                                                    p_fin_prod_id_det                      => lx_pb_fin_prod_id_det,
                                                    p_int_disclosed_det                    => lx_pb_int_disclosed_det,
                                                    -- asset level begin
                                                    p_title_trnsfr_code                    => l_pb_asset_level_det_tbl(ind).transfer_of_title,
                                                    p_sale_lease_back_code                 => l_pb_asset_level_det_tbl(ind).sale_lease_back,
                                                    p_lease_purchased_code                 => l_pb_asset_level_det_tbl(ind).purchase_of_lease,
                                                    p_equip_usage_code                     => l_pb_asset_level_det_tbl(ind).usage_of_equipment,
                                                    p_vendor_site_id                       => l_pb_asset_level_det_tbl(ind).vendor_site_id,
                                                    p_age_of_equip                                 => l_pb_asset_level_det_tbl(ind).age_of_equipment,
                                p_source_trx_name              => p_source_trx_name,
                                                p_cust_trx_type_id             => lx_cust_trx_type_id,
                                                p_book_class_code              => lx_book_class_code,
                                                    p_tax_call_cnt                                 => tax_call_cnt,
                                                    p_fma_id                                       => l_fma_id,
                                                    p_formula_name                                 => l_formula_name,
                                                    p_minimum_accountable_unit     => lx_minimum_accountable_unit,
                                                    p_precision                                    => lx_precision,
                                                    p_sales_quote_id                       => null,
                                                p_event_type_code              => l_event_type_code,
                                                p_ledger_id                    => l_ledger_id,
                                                p_line_level_action            => G_CREATE_LINE_LEVEL_ACTION,
                                                p_tax_src_params_rec           => lp_tax_src_params_rec,
                                                p_quote_flag                   => 'N',
                                                p_rounding_ship_to_party_id    => l_pb_asset_level_det_tbl(ind).ship_to_party_id,
                                                p_rounding_bill_to_party_id    => l_pb_asset_level_det_tbl(ind).bill_to_party_id,
                                                p_line_amt_includes_tax_flag   => 'N',
                                p_term_quote_type_code         => null,
                                p_term_quote_reason_code       => null,
                                                px_tax_sources_tbl                         => lx_tax_sources_tbl,
                                                px_line_params_tbl             => lx_line_params_tbl );

                    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
                          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
                                ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
                          RAISE OKL_API.G_EXCEPTION_ERROR;
                                END IF;

                                IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                                                                'lx_tax_sources_tbl.count '||lx_tax_sources_tbl.count);
                                END IF;
                                    -- asset level call end
                            EXIT;
                      END IF;
                      EXIT WHEN (ind = l_pb_asset_level_det_tbl.LAST);
                  ind := l_pb_asset_level_det_tbl.NEXT(ind);
                        END LOOP;
                  END IF;
                END IF;
                i := i + 1;
          END LOOP;
        END IF;
        EXIT WHEN l_k_asset_pymnts_csr%NOTFOUND;
      END LOOP;
      CLOSE l_k_asset_pymnts_csr;

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.', 'i '||i);
      END IF;

      IF i > 1 THEN -- some payments exist
        tax_call_cnt := i; -- pick the last index

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                     'some payments exist, tax_call_cnt= '||tax_call_cnt);
        END IF;

            IF k_pymnt_exist = 'N' THEN -- K level payment does not exist

              -- contract level call begin
                  --tax_call_cnt := i; -- pick the last index
                  IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                'K level payment does not exist ');
          END IF;

          -- Populate tax sources record -- start
          lp_tax_src_params_rec.kle_id       := null;
          lp_tax_src_params_rec.asset_number := null;
          lp_tax_src_params_rec.line_name    := null;

          lp_tax_src_params_rec.ship_to_cust_acct_site_use_id   := null;
          lp_tax_src_params_rec.ship_to_party_site_id := null;
          lp_tax_src_params_rec.ship_to_party_id      := null;
          lp_tax_src_params_rec.ship_to_location_id   := null;

          lp_tax_src_params_rec.bill_to_party_site_id         := lx_bill_to_party_site_id;
          lp_tax_src_params_rec.bill_to_party_id              := lx_bill_to_party_id;
          lp_tax_src_params_rec.bill_to_location_id           := lx_bill_to_location_id;
          lp_tax_src_params_rec.bill_to_cust_acct_site_use_id := lx_bill_to_siteuseid;

          lp_tax_src_params_rec.inventory_item_id             := null;
          lp_tax_src_params_rec.sty_id                        := null;
          lp_tax_src_params_rec.khr_id                        := l_khr_id;
          lp_tax_src_params_rec.trx_id                        := p_source_trx_id;
          lp_tax_src_params_rec.entity_code                   := G_CONTRACTS_ENTITY_CODE;
          lp_tax_src_params_rec.event_class_code              := l_event_class_code;
          lp_tax_src_params_rec.trx_level_type                := G_TRX_LEVEL_TYPE;
          lp_tax_src_params_rec.tax_call_type_code            := G_UPFRONT_TAX;
          lp_tax_src_params_rec.tax_reporting_flag            := l_reported_yn;
          lp_tax_src_params_rec.reported_yn                   := l_reported_yn;
          lp_tax_src_params_rec.trx_date                      := lx_contract_start_date;
          lp_tax_src_params_rec.trx_currency_code             := lx_currency_code;
          lp_tax_src_params_rec.line_intended_use             := null;
          lp_tax_src_params_rec.bill_to_cust_acct_id          := lx_cust_acct_id;
          lp_tax_src_params_rec.org_id                        := lx_org_id;
          lp_tax_src_params_rec.legal_entity_id               := l_legal_entity_id;
          lp_tax_src_params_rec.line_amt                      := 0;
          lp_tax_src_params_rec.try_id                        := l_bk_trx_type_id_det;

          lp_tax_src_params_rec.adjusted_doc_entity_code      := null;
          lp_tax_src_params_rec.adjusted_doc_event_class_code := null;
          lp_tax_src_params_rec.adjusted_doc_trx_id           := null;
              lp_tax_src_params_rec.adjusted_doc_trx_line_id      := null;
              lp_tax_src_params_rec.adjusted_doc_trx_level_type   := null;
              lp_tax_src_params_rec.adjusted_doc_number           := null;
              lp_tax_src_params_rec.adjusted_doc_date             := null;
          lp_tax_src_params_rec.tax_line_status_code          := G_ACTIVE_STATUS;
          lp_tax_src_params_rec.default_taxation_country      := l_taxation_country;

          lp_tax_src_params_rec.currency_conversion_type      := lx_currency_conversion_type;
          lp_tax_src_params_rec.currency_conversion_rate      := lx_currency_conversion_rate;
          lp_tax_src_params_rec.currency_conversion_date      := lx_currency_conversion_date;
          -- Populate tax sources record -- end

                  populate_tax_info(
                                              p_api_version                  => p_api_version,
                                              p_init_msg_list                => OKC_API.G_FALSE,
                                              x_return_status                => x_return_status,
                                              x_msg_count                    => x_msg_count,
                                              x_msg_data                     => x_msg_data,
                                              p_prch_opt_det                             => lx_pb_prch_opt_det,
                                                      p_fin_prod_id_det                      => lx_pb_fin_prod_id_det,
                                                      p_int_disclosed_det                        => lx_pb_int_disclosed_det,
                                              -- asset level begin
                                              p_title_trnsfr_code                        => null,
                                              p_sale_lease_back_code         => null,
                                              p_lease_purchased_code             => null,
                                              p_equip_usage_code                         => null,
                                              p_vendor_site_id                       => null,
                                              p_age_of_equip                             => null,
                                      p_source_trx_name              => p_source_trx_name,
                                      p_cust_trx_type_id             => lx_cust_trx_type_id,
                                      p_book_class_code              => lx_book_class_code,
                                              p_tax_call_cnt                             => tax_call_cnt,
                                              p_fma_id                                       => l_fma_id,
                                              p_formula_name                             => l_formula_name,
                                              p_minimum_accountable_unit         => lx_minimum_accountable_unit,
                                              p_precision                                        => lx_precision,
                                              p_sales_quote_id                       => null,
                                      p_event_type_code              => l_event_type_code,
                                      p_ledger_id                    => l_ledger_id,
                                      p_line_level_action            => G_CREATE_LINE_LEVEL_ACTION,
                                      p_tax_src_params_rec           => lp_tax_src_params_rec,
                                      p_quote_flag                   => 'N',
                                      p_rounding_ship_to_party_id    => null,
                                      p_rounding_bill_to_party_id    => lx_bill_to_party_id,
                                      p_line_amt_includes_tax_flag   => 'N',
                                      p_term_quote_type_code         => null,
                                      p_term_quote_reason_code       => null,
                                      px_tax_sources_tbl                         => lx_tax_sources_tbl,
                                      px_line_params_tbl             => lx_line_params_tbl );

          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;

                  IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                             'lx_tax_sources_tbl.count '||lx_tax_sources_tbl.count);
                  END IF;
                  -- contract level call end
                  tax_call_cnt := tax_call_cnt + 1;
            END IF;

            -- this table will have one record for each asset
            -- check if payment does not exist for any of the assets
            FOR k IN l_pb_asset_level_det_tbl.FIRST .. l_pb_asset_level_det_tbl.LAST LOOP
              IF l_pb_asset_level_det_tbl(k).asset_pymnt_exist = 'N' THEN -- asset level payment does not exist
                IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                          'tax_call_cnt '||tax_call_cnt||'asset_pymnt_exist = N ' );
                        END IF;

            -- asset level call begin
            -- Populate tax sources record -- start
            lp_tax_src_params_rec.kle_id       := l_pb_asset_level_det_tbl(k).fin_asset_id;
            lp_tax_src_params_rec.asset_number := l_pb_asset_level_det_tbl(k).asset_number;
            lp_tax_src_params_rec.line_name    := l_pb_asset_level_det_tbl(k).asset_number;

            lp_tax_src_params_rec.ship_to_cust_acct_site_use_id   := l_pb_asset_level_det_tbl(k).ship_to_site_use_id;
            lp_tax_src_params_rec.ship_to_party_site_id := l_pb_asset_level_det_tbl(k).ship_to_party_site_id;
            lp_tax_src_params_rec.ship_to_party_id      := l_pb_asset_level_det_tbl(k).ship_to_party_id;
            lp_tax_src_params_rec.ship_to_location_id   := l_pb_asset_level_det_tbl(k).ship_to_location_id;
            lp_tax_src_params_rec.bill_to_party_site_id         := l_pb_asset_level_det_tbl(k).bill_to_party_site_id;
            lp_tax_src_params_rec.bill_to_party_id              := l_pb_asset_level_det_tbl(k).bill_to_party_id;
            lp_tax_src_params_rec.bill_to_location_id           := l_pb_asset_level_det_tbl(k).bill_to_location_id;
            lp_tax_src_params_rec.bill_to_cust_acct_site_use_id := l_pb_asset_level_det_tbl(k).bill_to_site_use_id;
            lp_tax_src_params_rec.inventory_item_id             := l_pb_asset_level_det_tbl(ind).inv_item_id;
            lp_tax_src_params_rec.sty_id                        := null;
            lp_tax_src_params_rec.khr_id                        := l_khr_id;
            lp_tax_src_params_rec.trx_id                        := p_source_trx_id;
            lp_tax_src_params_rec.entity_code                   := G_CONTRACTS_ENTITY_CODE;
            lp_tax_src_params_rec.event_class_code              := l_event_class_code;
            lp_tax_src_params_rec.trx_level_type                := G_TRX_LEVEL_TYPE;
            lp_tax_src_params_rec.tax_call_type_code            := G_UPFRONT_TAX;
            lp_tax_src_params_rec.tax_reporting_flag            := l_reported_yn;
            lp_tax_src_params_rec.reported_yn                   := l_reported_yn;
            lp_tax_src_params_rec.trx_date                      := lx_contract_start_date;
            lp_tax_src_params_rec.trx_currency_code             := lx_currency_code;
            lp_tax_src_params_rec.line_intended_use             := l_pb_asset_level_det_tbl(k).usage_of_equipment;
            lp_tax_src_params_rec.bill_to_cust_acct_id          := lx_cust_acct_id;
            lp_tax_src_params_rec.org_id                        := lx_org_id;
            lp_tax_src_params_rec.legal_entity_id               := l_legal_entity_id;
            lp_tax_src_params_rec.line_amt                      := 0;
            lp_tax_src_params_rec.try_id                        := l_bk_trx_type_id_det;

            lp_tax_src_params_rec.adjusted_doc_entity_code      := null;
            lp_tax_src_params_rec.adjusted_doc_event_class_code := null;
            lp_tax_src_params_rec.adjusted_doc_trx_id           := null;
                lp_tax_src_params_rec.adjusted_doc_trx_line_id      := null;
                lp_tax_src_params_rec.adjusted_doc_trx_level_type   := null;
                lp_tax_src_params_rec.adjusted_doc_number           := null;
                lp_tax_src_params_rec.adjusted_doc_date             := null;
            lp_tax_src_params_rec.tax_line_status_code          := G_ACTIVE_STATUS;
            lp_tax_src_params_rec.default_taxation_country      := l_taxation_country;
            lp_tax_src_params_rec.currency_conversion_type      := lx_currency_conversion_type;
            lp_tax_src_params_rec.currency_conversion_rate      := lx_currency_conversion_rate;
            lp_tax_src_params_rec.currency_conversion_date      := lx_currency_conversion_date;
            -- Populate tax sources record -- end

                -- asset level call begin
                        populate_tax_info(
                                                p_api_version                  => p_api_version,
                                                    p_init_msg_list                => OKC_API.G_FALSE,
                                                    x_return_status                => x_return_status,
                                                    x_msg_count                    => x_msg_count,
                                                    x_msg_data                     => x_msg_data,
                                                    p_prch_opt_det                                 => lx_pb_prch_opt_det,
                                                    p_fin_prod_id_det                      => lx_pb_fin_prod_id_det,
                                                    p_int_disclosed_det                    => lx_pb_int_disclosed_det,
                                                    -- asset level begin
                                                    p_title_trnsfr_code                    => l_pb_asset_level_det_tbl(k).transfer_of_title,
                                                    p_sale_lease_back_code                 => l_pb_asset_level_det_tbl(k).sale_lease_back,
                                                    p_lease_purchased_code                 => l_pb_asset_level_det_tbl(k).purchase_of_lease,
                                                    p_equip_usage_code                     => l_pb_asset_level_det_tbl(k).usage_of_equipment,
                                                    p_vendor_site_id                       => l_pb_asset_level_det_tbl(k).vendor_site_id,
                                                    p_age_of_equip                                 => l_pb_asset_level_det_tbl(k).age_of_equipment,
                                p_source_trx_name              => p_source_trx_name,
                                                p_cust_trx_type_id             => lx_cust_trx_type_id,
                                                p_book_class_code              => lx_book_class_code,
                                                    p_tax_call_cnt                                 => tax_call_cnt,
                                                    p_fma_id                                       => l_fma_id,
                                                    p_formula_name                                 => l_formula_name,
                                                    p_minimum_accountable_unit     => lx_minimum_accountable_unit,
                                                    p_precision                                    => lx_precision,
                                                    p_sales_quote_id                       => null,
                                                p_event_type_code              => l_event_type_code,
                                                p_ledger_id                    => l_ledger_id,
                                                p_line_level_action            => G_CREATE_LINE_LEVEL_ACTION,
                                                p_tax_src_params_rec           => lp_tax_src_params_rec,
                                                p_quote_flag                   => 'N',
                                                p_rounding_ship_to_party_id    => l_pb_asset_level_det_tbl(k).ship_to_party_id,
                                                p_rounding_bill_to_party_id    => l_pb_asset_level_det_tbl(k).bill_to_party_id,
                                                p_line_amt_includes_tax_flag   => 'N',
                                p_term_quote_type_code         => null,
                                p_term_quote_reason_code       => null,
                                                px_tax_sources_tbl                         => lx_tax_sources_tbl,
                                                px_line_params_tbl             => lx_line_params_tbl );

            IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
              RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
                ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
              RAISE OKL_API.G_EXCEPTION_ERROR;
                END IF;
                        -- asset level call end
                        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                                'lx_tax_sources_tbl.count '||lx_tax_sources_tbl.count);
                        END IF;

                    tax_call_cnt := tax_call_cnt + 1;
              END IF;
            END LOOP;
      END IF;

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                        'lx_tax_sources_tbl.COUNT '||lx_tax_sources_tbl.COUNT);
          END IF;

      -- insert into okl_tax_sources
          BEGIN
        IF lx_tax_sources_tbl.COUNT > 0 THEN
          FORALL indx in lx_tax_sources_tbl.FIRST..lx_tax_sources_tbl.LAST
            -- SAVE EXCEPTIONS
            INSERT INTO okl_tax_sources VALUES lx_tax_sources_tbl(indx);
        END IF;
      EXCEPTION
        WHEN OTHERS THEN
          IF SQL%BULK_EXCEPTIONS.COUNT > 0 THEN
                        FOR i IN 1..SQL%BULK_EXCEPTIONS.COUNT LOOP
                          OKL_API.set_message(
                                                                     p_app_name      => 'OKL',
                                     p_msg_name      => 'OKL_TX_TRX_INS_ERR',
                                     p_token1        => 'TABLE_NAME',
                                     p_token1_value  => 'OKL_TAX_SOURCES',
                                     p_token2        => 'ERROR_CODE',
                                                                         p_token2_value  => SQLERRM(-SQL%BULK_EXCEPTIONS(i).ERROR_CODE),
                                                                         p_token3        => 'ITERATION',
                                                                         p_token3_value  => SQL%BULK_EXCEPTIONS(i).ERROR_INDEX);
                        END LOOP;
                        RAISE OKL_API.G_EXCEPTION_ERROR;
                  END IF;
      END;
      -- Insert into okl_tax_sources end --

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                                       'Insert into okl_tax_sources ');
          END IF;

          IF lx_line_params_tbl.COUNT > 0 THEN
            IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                               'Before tax engine call '||x_return_status);
            END IF;

        lp_hdr_params_rec.application_id           := G_OKL_APPLICATION_ID;
        lp_hdr_params_rec.trx_id                   := p_source_trx_id;
        lp_hdr_params_rec.internal_organization_id := lx_org_id;
        lp_hdr_params_rec.entity_code              := G_CONTRACTS_ENTITY_CODE;
        lp_hdr_params_rec.event_class_code         := l_event_class_code;
        lp_hdr_params_rec.event_type_code          := l_event_type_code;
        lp_hdr_params_rec.quote_flag               := 'N';

        OKL_TAX_INTERFACE_PVT.calculate_tax(
                                    p_api_version       =>  p_api_version,
                                    p_init_msg_list     =>  p_init_msg_list,
                                    x_return_status     =>  x_return_status,
                                    x_msg_count         =>  x_msg_count,
                                    x_msg_data          =>  x_msg_data,
                                    p_hdr_params_rec    =>  lp_hdr_params_rec,
                                    p_line_params_tbl   =>  lx_line_params_tbl);

                IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
                                   'After tax engine call '||x_return_status);
            END IF;

            IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;
      END IF;

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
             'Calling "update_tax_sources_total" .. ');
      END IF;

      update_tax_sources_total(p_api_version    => p_api_version,
                               p_init_msg_list  => p_init_msg_list,
                               x_return_status  => x_return_status,
                               x_msg_count      => x_msg_count,
                               x_msg_data       => x_msg_data,
                               p_source_trx_id  => p_source_trx_id);

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
             'Return Status' || x_return_status);
      END IF;

      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

    ELSIF (l_tax_call_type = G_ACTUAL_CALL_TYPE) THEN

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
              'process_final_upfront_tax');
      END IF;

      -- Call ebtax procedure to flip the reportable flag from N to Y
      process_final_upfront_tax( p_api_version       => p_api_version,
                                         p_init_msg_list     => p_init_msg_list,
                                     x_return_status     => x_return_status,
                                     x_msg_count         => x_msg_count,
                                         x_msg_data          => x_msg_data,
                                         p_trx_id                        => p_source_trx_id,
                                     p_application_id    => G_OKL_APPLICATION_ID,
                                 p_entity_code       => G_CONTRACTS_ENTITY_CODE,
                                 p_event_class_code  => G_BOOKING_EVENT_CLASS_CODE);

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
              'Return Status' || x_return_status);
      END IF;

          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
                RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
                RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
             'Calling "make_tax_sources_reportable" .. ');
      END IF;

      make_tax_sources_reportable(p_api_version    => p_api_version,
                                  p_init_msg_list  => p_init_msg_list,
                                  x_return_status  => x_return_status,
                                  x_msg_count      => x_msg_count,
                                  x_msg_data       => x_msg_data,
                                  p_source_trx_id  => p_source_trx_id);

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax.',
             'Return Status' || x_return_status);
      END IF;

      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

    END IF;

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
       FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax ','End(-)');
    END IF;
  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN
         IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
         END IF;

         IF l_trxcontracts_csr%ISOPEN THEN
            CLOSE l_trxcontracts_csr;
         END IF;

         IF l_tax_src_info_csr%ISOPEN THEN
           CLOSE l_tax_src_info_csr;
         END IF;

         IF l_prev_taxsources_csr%ISOPEN THEN
            CLOSE l_prev_taxsources_csr;
         END IF;

         IF l_finassets_csr%ISOPEN THEN
            CLOSE l_finassets_csr;
         END IF;

         IF l_k_asset_pymnts_csr%ISOPEN THEN
            CLOSE l_k_asset_pymnts_csr;
         END IF;

         IF l_invitem_csr%ISOPEN THEN
            CLOSE l_invitem_csr;
         END IF;

         IF l_txbasisoverride_csr%ISOPEN THEN
            CLOSE l_txbasisoverride_csr;
         END IF;

         IF l_formulae_csr%ISOPEN THEN
            CLOSE l_formulae_csr;
         END IF;

         x_return_status := OKL_API.G_RET_STS_ERROR;
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
         IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_UNEXPECTED_ERROR');
         END IF;

         IF l_trxcontracts_csr%ISOPEN THEN
            CLOSE l_trxcontracts_csr;
         END IF;

         IF l_tax_src_info_csr%ISOPEN THEN
           CLOSE l_tax_src_info_csr;
         END IF;

         IF l_prev_taxsources_csr%ISOPEN THEN
            CLOSE l_prev_taxsources_csr;
         END IF;

         IF l_finassets_csr%ISOPEN THEN
            CLOSE l_finassets_csr;
         END IF;

         IF l_k_asset_pymnts_csr%ISOPEN THEN
            CLOSE l_k_asset_pymnts_csr;
         END IF;

         IF l_invitem_csr%ISOPEN THEN
            CLOSE l_invitem_csr;
         END IF;

         IF l_txbasisoverride_csr%ISOPEN THEN
            CLOSE l_txbasisoverride_csr;
         END IF;

         IF l_formulae_csr%ISOPEN THEN
            CLOSE l_formulae_csr;
         END IF;

         x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;

    WHEN OTHERS THEN
         IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
            FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.process_booking_upfront_tax ',
                  'EXCEPTION :'||sqlerrm);
         END IF;

         IF l_trxcontracts_csr%ISOPEN THEN
            CLOSE l_trxcontracts_csr;
         END IF;

         IF l_tax_src_info_csr%ISOPEN THEN
           CLOSE l_tax_src_info_csr;
         END IF;

         IF l_prev_taxsources_csr%ISOPEN THEN
            CLOSE l_prev_taxsources_csr;
         END IF;

         IF l_finassets_csr%ISOPEN THEN
            CLOSE l_finassets_csr;
         END IF;

         IF l_k_asset_pymnts_csr%ISOPEN THEN
            CLOSE l_k_asset_pymnts_csr;
         END IF;

         IF l_invitem_csr%ISOPEN THEN
            CLOSE l_invitem_csr;
         END IF;

         IF l_txbasisoverride_csr%ISOPEN THEN
            CLOSE l_txbasisoverride_csr;
         END IF;

         IF l_formulae_csr%ISOPEN THEN
            CLOSE l_formulae_csr;
         END IF;

         x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
         -- unexpected error
         OKL_API.set_message(p_app_name      => g_app_name,
                             p_msg_name      => g_unexpected_error,
                             p_token1        => g_sqlcode_token,
                             p_token1_value  => sqlcode,
                             p_token2        => g_sqlerrm_token,
                             p_token2_value  => sqlerrm);

  END process_booking_upfront_tax;

/*========================================================================
 | PRIVATE PROCEDURE process_pre_rbk_upfront_tax
 |
 | DESCRIPTION
 |    This procedure is called from calculate_sales_tax procedure to calculate
 |    Upfront tax during Pre Rebooking
 |
 | CALLED FROM                                  calculate_sales_tax()
 |
 |
 | CALLS PROCEDURES/FUNCTIONS
 |     process_booking_upfront_tax()
 |
 | PARAMETERS
 |      p_source_trx_id                 -- Source transaction ID
 |      p_source_trx_name       -- Source transaction Name
 |      p_source_table          -- Source table
 |
 | KNOWN ISSUES
 |
 | NOTES
 |
 |
 | MODIFICATION HISTORY
 | Date          Author            Description of Changes
 | 08-APR-05     SECHAWLA           Created
 | 29-NOV-05     SECHAWLA           4772640 Modified to merge Pre-Rebook trx type
 |                                  setups into 'Booking'
 |
 *=======================================================================*/
  PROCEDURE process_pre_rbk_upfront_tax(
        p_api_version                   IN  NUMBER,
    p_init_msg_list                     IN  VARCHAR2 DEFAULT OKC_API.G_FALSE,
    x_return_status                     OUT NOCOPY VARCHAR2,
    x_msg_count                         OUT NOCOPY NUMBER,
    x_msg_data                          OUT NOCOPY VARCHAR2,
    p_source_trx_id                                     IN  NUMBER,
    p_source_trx_name               IN  VARCHAR2,
    p_source_table                  IN  VARCHAR2,
    p_tax_call_type                 IN  VARCHAR2) IS

    -------------Pre Rebook --------------
    --p_source_trx_id           ---> okl_trx_contracts.id
    --p_source_trx_name     ---> 'Rebook'
    --p_source_table        ---> 'OKL_TRX_CONTRACTS'
    --p_tax_call_type       ---> 'ESTIMATED'
    --------------------------------------------------

  BEGIN

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.process_pre_rbk_upfront_tax','Begin(+)');
    END IF;

    --Print Input Variables
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_pre_rbk_upfront_tax.',
              'p_init_msg_list :'||p_init_msg_list);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_pre_rbk_upfront_tax.',
              'p_source_trx_id :'||p_source_trx_id);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_pre_rbk_upfront_tax.',
              'p_source_trx_name :'||p_source_trx_name);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_pre_rbk_upfront_tax.',
              'p_source_table :'||p_source_table);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_pre_rbk_upfront_tax.',
              'p_tax_call_type :'||p_tax_call_type);
    END IF;

    x_return_status := OKL_API.G_RET_STS_SUCCESS;

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_pre_rbk_upfront_tax.',
                  'Calling process_booking_upfront_tax');
    END IF;

    process_booking_upfront_tax(p_api_version        =>  p_api_version,
                                p_init_msg_list      =>  p_init_msg_list,
                                x_return_status      =>  x_return_status,
                                x_msg_count          =>  x_msg_count,
                                x_msg_data           =>  x_msg_data,
                                p_source_trx_id          =>  p_source_trx_id,
                                p_source_trx_name    =>  p_source_trx_name,
                                p_source_table       =>  p_source_table,
                                p_tax_call_type      =>  p_tax_call_type);

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_pre_rbk_upfront_tax.',
                  'Finished process_booking_upfront_tax '|| x_return_status);
    END IF;

        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
       FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.process_pre_rbk_upfront_tax ','End(-)');
    END IF;

  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN
      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.process_pre_rbk_upfront_tax ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
      END IF;

      x_return_status := OKL_API.G_RET_STS_ERROR;

    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.process_pre_rbk_upfront_tax ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_UNEXPECTED_ERROR');
      END IF;

      x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;

    WHEN OTHERS THEN
      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.process_pre_rbk_upfront_tax ',
                  'EXCEPTION :'||sqlerrm);
      END IF;

      x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
      -- unexpected error
      OKL_API.set_message(p_app_name      => g_app_name,
                          p_msg_name      => g_unexpected_error,
                          p_token1        => g_sqlcode_token,
                          p_token1_value  => sqlcode,
                          p_token2        => g_sqlerrm_token,
                          p_token2_value  => sqlerrm);
  END process_pre_rbk_upfront_tax;

/*========================================================================
 | PRIVATE PROCEDURE process_rebook_upfront_tax
 |
 | DESCRIPTION
 |    This procedure is called from calculate_sales_tax procedure to calculate
 |    Upfront tax during Rebook
 |
 | CALLED FROM                                  calculate_sales_tax()
 |
 |
 | CALLS PROCEDURES/FUNCTIONS
 |     OKL_TAX_INTERFACE_PVT.reverse_document()
 |     update_tax_sources_total()
 |     okl_tax_sources_pub.update_tax_sources()
 |     process_final_upfront_tax()
 |
 |
 | PARAMETERS
 |      p_source_trx_id                 -- Source transaction ID
 |      p_source_trx_name       -- Source transaction Name
 |      p_source_table          -- Source table
 |
 | KNOWN ISSUES
 |
 | NOTES
 |
 |
 | MODIFICATION HISTORY
 | Date           Author        Description of Changes
 | 08-APR-05      SECHAWLA        Created
 | 29-NOV-05      SECHAWLA        4772640 Modified to merge Rebook trx type setups
 |                                into 'Booking' trx type
 |
 *=======================================================================*/
  PROCEDURE process_rebook_upfront_tax(
        p_api_version                   IN  NUMBER,
    p_init_msg_list                     IN  VARCHAR2 DEFAULT OKC_API.G_FALSE,
    x_return_status                     OUT NOCOPY VARCHAR2,
    x_msg_count                         OUT NOCOPY NUMBER,
    x_msg_data                          OUT NOCOPY VARCHAR2,
    p_source_trx_id                                     IN  NUMBER,
    p_source_trx_name               IN  VARCHAR2,
    p_source_table                  IN  VARCHAR2) IS

     -------------Rebook --------------
    --p_source_trx_id           ---> okl_trx_contracts.id
    --p_source_trx_name     ---> 'Rebook'
    --p_source_table        ---> 'OKL_TRX_CONTRACTS'
    --------------------------------------------------

        l_return_status                 VARCHAR2(1) := OKL_API.G_RET_STS_SUCCESS;

        -- validate source trx id
    -- okl_trx_contracts.khr_id has original contract id
    -- okl_trx_contracts.khr_id_new has rebook copy contract id
        CURSOR l_trxcontracts_csr(cp_trx_id IN NUMBER, cp_trx_type_name IN VARCHAR2) IS
        SELECT a.try_id, a.khr_id, a.khr_id_new, a.date_transaction_occurred
        FROM   okl_trx_contracts a , okl_trx_types_tl b
        WHERE  a.id = cp_trx_id
        AND    a.try_id = b.id
        AND    b.name = cp_trx_type_name
    AND    language = 'US';

    -- Booking tax lines will be the only ACTIVE set of tax lines at the time K is being Reversed
        -- Contract can be reversed only if no other transactions have happened on the contract
        -- this cursor selects existing active upfront taxable lines for a contract that is being reversed
        CURSOR l_prevtaxsources_csr(cp_khr_id IN NUMBER) IS
        SELECT id, khr_id, kle_id, asset_number, trx_id, trx_line_id, entity_code,
               event_class_code, trx_level_type, tax_call_type_code, sty_id,
               trx_business_category, tax_line_status_code, sel_id, reported_yn,
               line_name, application_id, tax_reporting_flag, default_taxation_country,
               product_category, user_defined_fisc_class, line_intended_use,
               tax_classification_code, inventory_item_id, bill_to_cust_acct_id,
               org_id, legal_entity_id, line_amt, assessable_value, total_tax,
               product_type, product_fisc_classification, trx_date, provnl_tax_determination_date,
               try_id, ship_to_location_id, ship_to_party_site_id, ship_to_party_id,
               bill_to_party_site_id, bill_to_location_id, bill_to_party_id,
               ship_to_cust_acct_site_use_id, bill_to_cust_acct_site_use_id,
               trx_currency_code, currency_conversion_date, currency_conversion_rate,
               currency_conversion_type
        FROM   okl_tax_sources
        WHERE  khr_id = cp_khr_id
        AND    tax_call_type_code = G_UPFRONT_TAX
        AND    tax_line_status_code = G_ACTIVE_STATUS
    AND    application_id = G_OKL_APPLICATION_ID
    AND    trx_level_type = G_TRX_LEVEL_TYPE
        AND    ADJUSTED_DOC_TRX_ID IS NULL
        AND    ADJUSTED_DOC_TRX_LINE_ID IS NULL;

    CURSOR l_rbk_taxablelines_csr(cp_trx_id IN NUMBER, cp_khr_id IN NUMBER) IS
    SELECT id, kle_id
    FROM okl_tax_sources
    WHERE trx_id = cp_trx_id
    AND   khr_id = cp_khr_id
    AND   tax_call_type_code = G_UPFRONT_TAX
    AND   tax_line_status_code = G_ACTIVE_STATUS;

    CURSOR l_orig_kle_id(cp_kle_id IN NUMBER) IS
    SELECT orig_system_id1
    FROM   okc_k_lines_b
    WHERE  id = cp_kle_id;

    CURSOR l_new_line_id(cp_orig_system_id IN NUMBER) IS
    SELECT id
    FROM   okc_k_lines_b
    WHERE  orig_system_id1 = cp_orig_system_id;

        TYPE  tax_src_tbl_type IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
        TYPE  prev_tx_src_tbl_type IS TABLE OF l_prevtaxsources_csr%ROWTYPE INDEX BY BINARY_INTEGER;

    l_prevtaxsources_tbl                        prev_tx_src_tbl_type;
        l_tax_src_tbl                                   tax_src_tbl_type;
        l_tax_sources_tbl               tax_sources_tbl_type;
    rev_trx_lines_tbl               zx_trx_lines_tbl_type;
    rev_trx_hdr_rec                 line_params_rec_type;
    l_txsv_tbl                      txsv_tbl_type;
    lx_txsv_tbl                     txsv_tbl_type;

        l_fetch_size                    NUMBER := 10000;
    i                                                           NUMBER;
    j                                                           NUMBER;

    l_trx_date                      DATE;
    l_trx_level_type                VARCHAR2(30);
    l_org_id                        NUMBER;
    l_legal_entity_id               NUMBER;
    l_reversed_trx_id               NUMBER;
    l_rbk_khr_id                    NUMBER;
    l_rbk_trx_type_id_det                       NUMBER;
    l_khr_id                                            NUMBER;
    l_kle_id                        NUMBER;
    l_sync_kle_id                   NUMBER;
    l_booking_tax_exists            BOOLEAN := FALSE;

  BEGIN

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.process_rebook_upfront_tax','Begin(+)');
    END IF;

    --Print Input Variables
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_rebook_upfront_tax.',
              'p_init_msg_list :'||p_init_msg_list);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_rebook_upfront_tax.',
              'p_source_trx_id :'||p_source_trx_id);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_rebook_upfront_tax.',
              'p_source_trx_name :'||p_source_trx_name);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_rebook_upfront_tax.',
              'p_source_table :'||p_source_table);
    END IF;

    x_return_status := OKL_API.G_RET_STS_SUCCESS;

    -- Validate the source trx id
    OPEN  l_trxcontracts_csr(p_source_trx_id, p_source_trx_name);
    FETCH l_trxcontracts_csr INTO l_rbk_trx_type_id_det, l_khr_id, l_rbk_khr_id, l_trx_date; -- l_khr_id has original contract id
    -- At this point l_rbk_trx_type_id_det has the id of the Rebook trx type
    IF l_trxcontracts_csr%NOTFOUND THEN
      -- source trx id is invalid
      OKC_API.set_message( p_app_name      => 'OKC',
                           p_msg_name      => G_INVALID_VALUE,
                           p_token1        => G_COL_NAME_TOKEN,
                           p_token1_value  => 'SOURCE_TRX_ID');
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    CLOSE l_trxcontracts_csr;

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_rebook_upfront_tax.',
                'l_rbk_trx_type_id_det '||l_rbk_trx_type_id_det );
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_rebook_upfront_tax.',
                'l_khr_id '||l_khr_id );
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_rebook_upfront_tax.',
                'l_rbk_khr_id '||l_rbk_khr_id );
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_rebook_upfront_tax.',
                'l_trx_date '||l_trx_date );
    END IF;

        --Create negative tax lines for the previously active upfront tax lines
    i := 1;
        j := 1;
        l_tax_sources_tbl.DELETE;
        l_tax_src_tbl.DELETE;

    OPEN l_prevtaxsources_csr(l_khr_id);
        LOOP
          l_prevtaxsources_tbl.DELETE;
          FETCH l_prevtaxsources_csr BULK COLLECT INTO l_prevtaxsources_tbl LIMIT l_fetch_size;
          IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
            FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_rebook_upfront_tax.',
                                'l_prevtaxsources_tbl.COUNT '||l_prevtaxsources_tbl.COUNT );
      END IF;

      IF l_prevtaxsources_tbl.COUNT > 0 THEN
        l_booking_tax_exists := TRUE;
        FOR k IN  l_prevtaxsources_tbl.FIRST..l_prevtaxsources_tbl.LAST LOOP

          IF i = 1 THEN
            l_org_id          := l_prevtaxsources_tbl(k).org_id;
            l_trx_level_type  := l_prevtaxsources_tbl(k).trx_level_type;
            l_legal_entity_id := l_prevtaxsources_tbl(k).legal_entity_id;
            l_reversed_trx_id := l_prevtaxsources_tbl(k).trx_id;
          END IF;

          -- Create adjusting tax source transaction for the previous active tax lines
              l_tax_sources_tbl(i).id                            := get_seq_id;
          l_tax_sources_tbl(i).khr_id                        := l_prevtaxsources_tbl(k).khr_id;
          l_tax_sources_tbl(i).kle_id                        := l_prevtaxsources_tbl(k).kle_id;
          l_tax_sources_tbl(i).asset_number                  := l_prevtaxsources_tbl(k).asset_number;
          l_tax_sources_tbl(i).trx_id                        := p_source_trx_id;
          l_tax_sources_tbl(i).trx_line_id                   := l_tax_sources_tbl(i).id;
          l_tax_sources_tbl(i).entity_code                   := G_CONTRACTS_ENTITY_CODE;
          l_tax_sources_tbl(i).event_class_code              := G_REBOOK_EVENT_CLASS_CODE;
          l_tax_sources_tbl(i).trx_level_type                := G_TRX_LEVEL_TYPE;
          l_tax_sources_tbl(i).adjusted_doc_entity_code      := l_prevtaxsources_tbl(k).entity_code;
          l_tax_sources_tbl(i).adjusted_doc_event_class_code := l_prevtaxsources_tbl(k).event_class_code;
          l_tax_sources_tbl(i).adjusted_doc_trx_id           := l_prevtaxsources_tbl(k).trx_id;
                  l_tax_sources_tbl(i).adjusted_doc_trx_line_id      := l_prevtaxsources_tbl(k).trx_line_id;
                  l_tax_sources_tbl(i).adjusted_doc_trx_level_type   := l_prevtaxsources_tbl(k).trx_level_type;
                  l_tax_sources_tbl(i).adjusted_doc_number           := NULL;
                  l_tax_sources_tbl(i).adjusted_doc_date             := NULL;
                  l_tax_sources_tbl(i).tax_call_type_code            := G_UPFRONT_TAX;
                  l_tax_sources_tbl(i).sty_id                        := l_prevtaxsources_tbl(k).sty_id;
                  l_tax_sources_tbl(i).trx_business_category         := l_prevtaxsources_tbl(k).trx_business_category;
                  l_tax_sources_tbl(i).tax_line_status_code          := G_INACTIVE_STATUS;

          l_tax_sources_tbl(i).sel_id                        := l_prevtaxsources_tbl(k).sel_id;
                  l_tax_sources_tbl(i).reported_yn                   := l_prevtaxsources_tbl(k).reported_yn;
          l_tax_sources_tbl(i).tax_reporting_flag            := l_prevtaxsources_tbl(k).tax_reporting_flag;
                  l_tax_sources_tbl(i).program_id                    := NULL;
                  l_tax_sources_tbl(i).request_id                    := NULL;
                  l_tax_sources_tbl(i).program_application_id        := NULL;
                  l_tax_sources_tbl(i).program_update_date           := NULL;
                  l_tax_sources_tbl(i).attribute_category            := NULL;

                  l_tax_sources_tbl(i).attribute1                    := NULL;
                  l_tax_sources_tbl(i).attribute2                    := NULL;
                  l_tax_sources_tbl(i).attribute3                    := NULL;
                  l_tax_sources_tbl(i).attribute4                    := NULL;
                  l_tax_sources_tbl(i).attribute5                    := NULL;
                  l_tax_sources_tbl(i).attribute6                    := NULL;
                  l_tax_sources_tbl(i).attribute7                    := NULL;
                  l_tax_sources_tbl(i).attribute8                    := NULL;
                  l_tax_sources_tbl(i).attribute9                    := NULL;
                  l_tax_sources_tbl(i).attribute10                   := NULL;
                  l_tax_sources_tbl(i).attribute11                   := NULL;
                  l_tax_sources_tbl(i).attribute12                   := NULL;
                  l_tax_sources_tbl(i).attribute13                   := NULL;
                  l_tax_sources_tbl(i).attribute14                   := NULL;
                  l_tax_sources_tbl(i).attribute15                   := NULL;
                  l_tax_sources_tbl(i).created_by                    := G_USER_ID;
                  l_tax_sources_tbl(i).creation_date                 := SYSDATE;
                  l_tax_sources_tbl(i).last_updated_by               := G_USER_ID;
                  l_tax_sources_tbl(i).last_update_date              := SYSDATE;
                  l_tax_sources_tbl(i).last_update_login             := G_LOGIN_ID;
                  l_tax_sources_tbl(i).object_version_number         := NULL;

          l_tax_sources_tbl(i).line_name                 := l_prevtaxsources_tbl(k).line_name;
          l_tax_sources_tbl(i).application_id            := l_prevtaxsources_tbl(k).application_id;
          l_tax_sources_tbl(i).default_taxation_country  := l_prevtaxsources_tbl(k).default_taxation_country;
          l_tax_sources_tbl(i).product_category          := l_prevtaxsources_tbl(k).product_category;
          l_tax_sources_tbl(i).user_defined_fisc_class   := l_prevtaxsources_tbl(k).user_defined_fisc_class;
          l_tax_sources_tbl(i).line_intended_use         := l_prevtaxsources_tbl(k).line_intended_use;
          l_tax_sources_tbl(i).tax_classification_code   := l_prevtaxsources_tbl(k).tax_classification_code;
          l_tax_sources_tbl(i).inventory_item_id         := l_prevtaxsources_tbl(k).inventory_item_id;
          l_tax_sources_tbl(i).bill_to_cust_acct_id      := l_prevtaxsources_tbl(k).bill_to_cust_acct_id;
          l_tax_sources_tbl(i).org_id                    := l_prevtaxsources_tbl(k).org_id;
          l_tax_sources_tbl(i).legal_entity_id           := l_prevtaxsources_tbl(k).legal_entity_id;
          l_tax_sources_tbl(i).line_amt                  := -l_prevtaxsources_tbl(k).line_amt;
          l_tax_sources_tbl(i).assessable_value          := -l_prevtaxsources_tbl(k).assessable_value;

          l_tax_sources_tbl(i).total_tax                 := null;  -- this col will be populated after reverse doc API is called
          l_tax_sources_tbl(i).trx_date                  := l_trx_date;
          l_tax_sources_tbl(i).try_id                    := l_rbk_trx_type_id_det;

          l_tax_sources_tbl(i).product_type                    := l_prevtaxsources_tbl(k).product_type;
          l_tax_sources_tbl(i).product_fisc_classification     := l_prevtaxsources_tbl(k).product_fisc_classification;
          l_tax_sources_tbl(i).provnl_tax_determination_date   := null;
          l_tax_sources_tbl(i).ship_to_location_id             := l_prevtaxsources_tbl(k).ship_to_location_id;
          l_tax_sources_tbl(i).ship_to_party_site_id           := l_prevtaxsources_tbl(k).ship_to_party_site_id;
          l_tax_sources_tbl(i).ship_to_party_id                := l_prevtaxsources_tbl(k).ship_to_party_id;
          l_tax_sources_tbl(i).bill_to_party_site_id           := l_prevtaxsources_tbl(k).bill_to_party_site_id;
          l_tax_sources_tbl(i).bill_to_location_id             := l_prevtaxsources_tbl(k).bill_to_location_id;
          l_tax_sources_tbl(i).bill_to_party_id                := l_prevtaxsources_tbl(k).bill_to_party_id;
          l_tax_sources_tbl(i).ship_to_cust_acct_site_use_id   := l_prevtaxsources_tbl(k).ship_to_cust_acct_site_use_id;
          l_tax_sources_tbl(i).bill_to_cust_acct_site_use_id   := l_prevtaxsources_tbl(k).bill_to_cust_acct_site_use_id;
          l_tax_sources_tbl(i).trx_currency_code               := l_prevtaxsources_tbl(k).trx_currency_code;
          l_tax_sources_tbl(i).currency_conversion_type        := l_prevtaxsources_tbl(k).currency_conversion_type;
          l_tax_sources_tbl(i).currency_conversion_rate        := l_prevtaxsources_tbl(k).currency_conversion_rate;
          l_tax_sources_tbl(i).currency_conversion_date        := l_prevtaxsources_tbl(k).currency_conversion_date;

          -- Store the tax source IDs in a table
          l_tax_src_tbl(i)                                     := l_prevtaxsources_tbl(k).id;

          -- Populate the ZX reverse transaction lines table for tax call
          rev_trx_lines_tbl(i).internal_organization_id        := l_org_id;
          rev_trx_lines_tbl(i).reversing_appln_id              := G_OKL_APPLICATION_ID;
          rev_trx_lines_tbl(i).reversing_entity_code           := G_CONTRACTS_ENTITY_CODE;
          rev_trx_lines_tbl(i).reversing_evnt_cls_code         := G_REBOOK_EVENT_CLASS_CODE;
          rev_trx_lines_tbl(i).reversing_trx_id                := p_source_trx_id;
          rev_trx_lines_tbl(i).reversing_trx_level_type        := l_trx_level_type;
          rev_trx_lines_tbl(i).reversing_trx_line_id           := l_tax_sources_tbl(i).trx_line_id;

          rev_trx_lines_tbl(i).reversed_appln_id               := G_OKL_APPLICATION_ID;
          rev_trx_lines_tbl(i).reversed_entity_code            := l_prevtaxsources_tbl(k).entity_code;
          rev_trx_lines_tbl(i).reversed_evnt_cls_code          := l_prevtaxsources_tbl(k).event_class_code;
          rev_trx_lines_tbl(i).reversed_trx_id                 := l_tax_sources_tbl(i).adjusted_doc_trx_id;
          rev_trx_lines_tbl(i).reversed_trx_level_type         := l_trx_level_type;
          rev_trx_lines_tbl(i).reversed_trx_line_id            := l_tax_sources_tbl(i).adjusted_doc_trx_line_id;

          i := i + 1;
        END LOOP;
      END IF;
      EXIT WHEN l_prevtaxsources_csr%NOTFOUND;
    END LOOP;
    CLOSE l_prevtaxsources_csr;

    -- Inactivate the previous ACTIVE tax lines - begin
    IF l_tax_src_tbl.COUNT > 0 THEN
      BEGIN
        FORALL i IN l_tax_src_tbl.FIRST..l_tax_src_tbl.LAST
          UPDATE OKL_TAX_SOURCES SET TAX_LINE_STATUS_CODE = G_INACTIVE_STATUS WHERE id = l_tax_src_tbl(i);
      EXCEPTION
        WHEN OTHERS THEN
          IF SQL%BULK_EXCEPTIONS.COUNT > 0 THEN
                        FOR i IN 1..SQL%BULK_EXCEPTIONS.COUNT LOOP
                                                                OKL_API.set_message(
                                                                     p_app_name      => 'OKL',
                                     p_msg_name      => 'OKL_TX_TRX_UPD_ERR',
                                     p_token1        => 'TABLE_NAME',
                                     p_token1_value  => 'OKL_TAX_SOURCES',
                                     p_token2        => 'ERROR_CODE',
                                                                         p_token2_value  => SQLERRM(-SQL%BULK_EXCEPTIONS(i).ERROR_CODE),
                                                                         p_token3        => 'ITERATION',
                                                                         p_token3_value  => SQL%BULK_EXCEPTIONS(i).ERROR_INDEX);
                    END LOOP;
                        RAISE OKL_API.G_EXCEPTION_ERROR;
                  END IF;
      END;

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_rebook_upfront_tax.',
                        'Inactivated the previous active upfront tax lines ' );
      END IF;
    END IF;
    -- Inactivate the previous ACTIVE tax lines - end

    -- Push the negative tax lines populated before for original contract into
    -- tax sources
    -- bulk insert into okl_tax_sources -- start
    BEGIN
      IF l_tax_sources_tbl.COUNT > 0 THEN
        FORALL indx in l_tax_sources_tbl.FIRST..l_tax_sources_tbl.LAST
          -- SAVE EXCEPTIONS
          INSERT INTO okl_tax_sources VALUES l_tax_sources_tbl(indx);
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        IF SQL%BULK_EXCEPTIONS.COUNT > 0 THEN
                  FOR i IN 1..SQL%BULK_EXCEPTIONS.COUNT LOOP
                        OKL_API.set_message(p_app_name      => 'OKL',
                                p_msg_name      => 'OKL_TX_TRX_INS_ERR',
                                p_token1        => 'TABLE_NAME',
                                p_token1_value  => 'OKL_TAX_SOURCES',
                                p_token2        => 'ERROR_CODE',
                                p_token2_value  => SQLERRM(-SQL%BULK_EXCEPTIONS(i).ERROR_CODE),
                                                                p_token3        => 'ITERATION',
                                                                p_token3_value  => SQL%BULK_EXCEPTIONS(i).ERROR_INDEX);
          END LOOP;
                  RAISE OKL_API.G_EXCEPTION_ERROR;
                END IF;
    END;
    -- bulk insert into okl_tax_sources -- end

    -- Reverse document call for the reversal of original contract tax sources
        -- Populate ZX reverse transaction tables
    IF (l_booking_tax_exists) THEN -- Perform reversal only if the booking tax exists
      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_rebook_upfront_tax.',
              'Calling OKL_TAX_INTERFACE_PVT.reverse_document');
      END IF;

      rev_trx_hdr_rec.internal_organization_id := l_org_id;
      rev_trx_hdr_rec.application_id           := G_OKL_APPLICATION_ID;
      rev_trx_hdr_rec.trx_id                   := p_source_trx_id;
      rev_trx_hdr_rec.legal_entity_id          := l_legal_entity_id;
      rev_trx_hdr_rec.entity_code              := G_CONTRACTS_ENTITY_CODE;
      rev_trx_hdr_rec.event_class_code         := G_REBOOK_EVENT_CLASS_CODE;

      OKL_TAX_INTERFACE_PVT.reverse_document (
                              p_api_version       => p_api_version,
                              p_init_msg_list     => p_init_msg_list,
                              x_return_status     => x_return_status,
                              x_msg_count         => x_msg_count,
                              x_msg_data          => x_msg_data,
                              p_rev_trx_hdr_rec   => rev_trx_hdr_rec,
                              p_rev_trx_lines_tbl => rev_trx_lines_tbl);

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_rebook_upfront_tax.',
              'Return Status' || x_return_status);
      END IF;

      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

      -- Get the total tax amount corresponding to 'Reverse' transaction initiated
      -- for the 'Rebook' transaction and update total_tax in okl_tax_sources
      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_rebook_upfront_tax.',
          'Calling "update_tax_sources_total" for updating Total Tax for all Lines in Tax Sources');
      END IF;

      update_tax_sources_total(p_api_version      => p_api_version,
                               p_init_msg_list    => p_init_msg_list,
                               x_return_status    => x_return_status,
                               x_msg_count        => x_msg_count,
                               x_msg_data         => x_msg_data,
                               p_source_trx_id    => p_source_trx_id,
                               p_source_trx_name  => p_source_trx_name);

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_rebook_upfront_tax.',
          'Return Status' || x_return_status);
      END IF;

      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

    END IF;  -- Perform reversal only if the booking tax exists

    -- Sync rebook tax sources with original contract info
    i := 1;
    FOR l_rbk_taxablelines_rec IN l_rbk_taxablelines_csr(cp_trx_id => p_source_trx_id,
                                                         cp_khr_id => l_rbk_khr_id ) LOOP
      l_sync_kle_id := null;

      l_txsv_tbl(i).id      := l_rbk_taxablelines_rec.id;
      l_txsv_tbl(i).khr_id  := l_khr_id; -- sync the parent contract id

      l_kle_id := l_rbk_taxablelines_rec.kle_id;

      IF (l_kle_id IS NOT NULL) THEN  -- Asset Line, else Contract level tax line

        -- Sync rebook tax sources with original contract line ids (for existing assets)
        -- and new contract line id (for new assets)
        -- Sync the parent contract kle_id's
        OPEN l_orig_kle_id(cp_kle_id  => l_kle_id);
        FETCH l_orig_kle_id INTO l_sync_kle_id;
        IF l_orig_kle_id%NOTFOUND THEN
          OKC_API.set_message( p_app_name      => 'OKC',
                               p_msg_name      => G_INVALID_VALUE,
                               p_token1        => G_COL_NAME_TOKEN,
                              p_token1_value  => 'SOURCE_TRX_ID');
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;
        CLOSE l_orig_kle_id;

        IF (l_sync_kle_id IS NOT NULL) THEN
          l_txsv_tbl(i).kle_id  := l_sync_kle_id;
        ELSE
          -- This means the asset is newly created during Rebook process, so fetch
          -- the id of okc_k_lines_b where the orig_system_id1 is the kle_id of
          -- l_rbk_taxablelines_rec
          OPEN l_new_line_id(cp_orig_system_id => l_kle_id);
          FETCH l_new_line_id INTO l_sync_kle_id;
          IF l_new_line_id%NOTFOUND THEN
            OKC_API.set_message( p_app_name      => 'OKC',
                                 p_msg_name      => G_INVALID_VALUE,
                                 p_token1        => G_COL_NAME_TOKEN,
                                 p_token1_value  => 'SOURCE_TRX_ID');
            RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;
          CLOSE l_new_line_id;

          l_txsv_tbl(i).kle_id  := l_sync_kle_id;
        END IF;

      END IF;

      i := i+1;

    END LOOP;

    IF (l_txsv_tbl.COUNT > 0) THEN

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_rebook_upfront_tax',
           'Calling okl_tax_sources_pub.update_tax_sources for synching back original contract info for all Lines in Tax Sources');
      END IF;

      okl_tax_sources_pub.update_tax_sources(p_api_version     => p_api_version
                                            ,p_init_msg_list   => p_init_msg_list
                                            ,x_return_status   => x_return_status
                                            ,x_msg_count       => x_msg_count
                                            ,x_msg_data        => x_msg_data
                                            ,p_txsv_tbl        => l_txsv_tbl
                                            ,x_txsv_tbl        => lx_txsv_tbl);

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_rebook_upfront_tax',
              'Return Status' || x_return_status);
      END IF;

      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
    END IF;
    -- End Sync rebook tax sources with original contract info

    -- Change the reportable flag after synching back the rebook copy contract
    -- with the original contract
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_rebook_upfront_tax.',
              'process_final_upfront_tax');
    END IF;

    -- Call ebtax procedure to flip the reportable flag from N to Y
    process_final_upfront_tax( p_api_version       => p_api_version,
                                   p_init_msg_list     => p_init_msg_list,
                               x_return_status     => x_return_status,
                                   x_msg_count         => x_msg_count,
                                       x_msg_data          => x_msg_data,
                                       p_trx_id                    => p_source_trx_id,
                                   p_application_id    => G_OKL_APPLICATION_ID,
                               p_entity_code       => G_CONTRACTS_ENTITY_CODE,
                               p_event_class_code  => G_BOOKING_EVENT_CLASS_CODE);

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_rebook_upfront_tax.',
            'Return Status' || x_return_status);
    END IF;

    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_rebook_upfront_tax.',
            'Calling "make_tax_sources_reportable" .. ');
    END IF;

    make_tax_sources_reportable(p_api_version    => p_api_version,
                                p_init_msg_list  => p_init_msg_list,
                                x_return_status  => x_return_status,
                                x_msg_count      => x_msg_count,
                                x_msg_data       => x_msg_data,
                                p_source_trx_id  => p_source_trx_id);

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_rebook_upfront_tax.',
            'Return Status' || x_return_status);
    END IF;

    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
       FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.process_rebook_upfront_tax ','End(-)');
    END IF;

  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN
      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.process_rebook_upfront_tax ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
      END IF;

      IF l_trxcontracts_csr%ISOPEN THEN
        CLOSE l_trxcontracts_csr;
      END IF;

      IF l_prevtaxsources_csr%ISOPEN THEN
        CLOSE l_prevtaxsources_csr;
      END IF;

      IF l_rbk_taxablelines_csr%ISOPEN THEN
        CLOSE l_rbk_taxablelines_csr;
      END IF;

      IF l_orig_kle_id%ISOPEN THEN
        CLOSE l_orig_kle_id;
      END IF;

      IF l_new_line_id%ISOPEN THEN
        CLOSE l_new_line_id;
      END IF;

      x_return_status := OKL_API.G_RET_STS_ERROR;

    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.process_rebook_upfront_tax ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_UNEXPECTED_ERROR');
      END IF;

      IF l_trxcontracts_csr%ISOPEN THEN
        CLOSE l_trxcontracts_csr;
      END IF;

      IF l_prevtaxsources_csr%ISOPEN THEN
        CLOSE l_prevtaxsources_csr;
      END IF;

      IF l_rbk_taxablelines_csr%ISOPEN THEN
        CLOSE l_rbk_taxablelines_csr;
      END IF;

      IF l_orig_kle_id%ISOPEN THEN
        CLOSE l_orig_kle_id;
      END IF;

      IF l_new_line_id%ISOPEN THEN
        CLOSE l_new_line_id;
      END IF;

      x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;

    WHEN OTHERS THEN
      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.process_rebook_upfront_tax ',
                  'EXCEPTION :'||sqlerrm);
      END IF;

      IF l_trxcontracts_csr%ISOPEN THEN
        CLOSE l_trxcontracts_csr;
      END IF;

      IF l_prevtaxsources_csr%ISOPEN THEN
        CLOSE l_prevtaxsources_csr;
      END IF;

      IF l_rbk_taxablelines_csr%ISOPEN THEN
        CLOSE l_rbk_taxablelines_csr;
      END IF;

      IF l_orig_kle_id%ISOPEN THEN
        CLOSE l_orig_kle_id;
      END IF;

      IF l_new_line_id%ISOPEN THEN
        CLOSE l_new_line_id;
      END IF;

      x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
      -- unexpected error
      OKL_API.set_message(p_app_name      => g_app_name,
                          p_msg_name      => g_unexpected_error,
                          p_token1        => g_sqlcode_token,
                          p_token1_value  => sqlcode,
                          p_token2        => g_sqlerrm_token,
                          p_token2_value  => sqlerrm);

  END process_rebook_upfront_tax;

/*========================================================================
 | PRIVATE PROCEDURE process_quoting_upfront_tax
 |
 | DESCRIPTION
 |    This procedure is called from calculate_sales_tax procedure to calculate
 |    Upfront tax for a sales quote
 |
 | CALLED FROM                                  calculate_sales_tax()
 |
 |
 | CALLS PROCEDURES/FUNCTIONS
 |     populate_tax_info()
 |     OKL_TAX_INTERFACE_PVT.calculate_tax()
 |
 |
 | PARAMETERS
 |      p_source_trx_id                 -- Source transaction ID
 |      p_source_trx_name       -- Source transaction Name
 |      p_source_table          -- Source table
 |
 | KNOWN ISSUES
 |
 | NOTES
 |
 |
 | MODIFICATION HISTORY
 | Date         Author     Description of Changes
 | 08-APR-05   SECHAWLA     Created
 | 12-DEC-05   SECHAWLA     4690074 - modified cursor l_get_location_id to map
 |                                    Install site id of the assets to
 |                                    PARTY_SITE_USE_ID in hz_party_site_uses
 |
 *=======================================================================*/
  PROCEDURE process_quoting_upfront_tax(
        p_api_version                   IN  NUMBER,
    p_init_msg_list                     IN  VARCHAR2 DEFAULT OKC_API.G_FALSE,
    x_return_status                     OUT NOCOPY VARCHAR2,
    x_msg_count                         OUT NOCOPY NUMBER,
    x_msg_data                          OUT NOCOPY VARCHAR2,
    p_source_trx_id                                     IN  NUMBER,
    p_source_trx_name               IN  VARCHAR2,
    p_source_table                  IN  VARCHAR2) IS

    ---------------------Sales Quote / Lease Application ----------------
    --p_source_trx_id           ---> okl_lease_quotes_b.id  (sales quote ID)
    --p_source_trx_name     ---> 'Sales Quote'
    --p_source_table        ---> 'OKL_LEASE_QUOTES_B'
    -- 'Sales Quote' is not going to store/add try_id in okl_lease_quotes_b,
    -- as it will be the same for all the rows
    ----------------------------------------------------------------------

        l_return_status                 VARCHAR2(1) := OKL_API.G_RET_STS_SUCCESS;

        -- Validate source trx id
        CURSOR l_leasequotes_csr(cp_trx_id IN NUMBER) IS
        SELECT expected_start_date, product_id, interest_disclosed,
               transfer_of_title, sale_and_lease_back, purchase_of_lease, usage_category,
               age_of_equipment, parent_object_code , parent_object_id, legal_entity_id
        FROM   okl_lease_quotes_b
        WHERE  id = cp_trx_id;

        -- Get the transaction type id
        CURSOR l_trxtypes_csr IS
        SELECT id
        FROM   okl_trx_types_tl
        WHERE  name = 'Sales Quote'
    AND    language = 'US';

        -- Get Currency code and cust a/c for lease opportunity
        CURSOR l_leaseopp_csr(cp_id IN NUMBER) IS
        SELECT lop.currency_code, lop.cust_acct_id, lop.prospect_id,  --> (party id)
           lop.org_id, lsq.expected_start_date, lop.currency_conversion_type,
           lop.currency_conversion_rate, lop.currency_conversion_date, lsq.line_intended_use,
           pdt.name
        FROM   okl_lease_opportunities_b lop, okl_lease_quotes_b lsq, okl_products pdt
        WHERE  lsq.parent_object_id = lop.id
    AND    lsq.parent_object_code = 'LEASEOPP'
    AND    lsq.product_id = pdt.id
    AND    lsq.id = cp_id;

        -- Get Currency code and cust a/c for lease application
        CURSOR l_leaseapp_csr(cp_id IN NUMBER) IS
        SELECT lap.currency_code, lap.cust_acct_id, lap.prospect_id, --> (party id)
           lap.org_id, lsq.expected_start_date, lap.currency_conversion_type,
           lap.currency_conversion_rate, lap.currency_conversion_date, lsq.line_intended_use,
           pdt.name
        FROM   okl_lease_applications_b lap, okl_lease_quotes_b lsq, okl_products pdt
        WHERE  lsq.parent_object_id = lap.id
    AND    lsq.parent_object_code = 'LEASEAPP'
    AND    lsq.primary_quote = 'Y'
    AND    lsq.product_id = pdt.id
    AND    lsq.id = cp_id;

        -- Check if quoting tax was already calculated for this quote. If so, first
        -- delete the quoting tax source transaction and tax details
    CURSOR l_prevtaxsources_csr(cp_trx_id IN NUMBER) IS
    SELECT id
    FROM   okl_tax_sources
    WHERE  tax_call_type_code = G_UPFRONT_TAX
    AND    trx_id = cp_trx_id;

        -- Get the previous tax trx details
        CURSOR l_prevtaxtrxdet_csr(cp_txs_id IN NUMBER) IS
        SELECT ID
        FROM   okl_tax_trx_details
        WHERE  txs_id = cp_txs_id;

        -- Get all the assets of the sales quote
        CURSOR l_quoteassets_csr(cp_quote_id IN NUMBER) IS
    SELECT AST.ID  asset_id, asset_number, install_site_id
    FROM   OKL_ASSETS_B AST
    WHERE  AST.PARENT_OBJECT_CODE = 'LEASEQUOTE'
    AND    AST.PARENT_OBJECT_ID = cp_quote_id;

    -- Get Inv item and supplier
    CURSOR l_assetcomponent_csr(cp_asset_id IN NUMBER) IS
    SELECT inv_item_id, supplier_id
    FROM   okl_asset_components_b
    WHERE  asset_id = cp_asset_id
    AND    primary_component = 'Y';

        -- Get the quote and asset level cash flows for a sales quote
        CURSOR l_q_asset_cashflows_csr(cp_quote_id IN NUMBER) IS
        SELECT cfo.source_id ,  ast.asset_number, caf.sty_id,
           sum(nvl((cfl.amount * cfl.number_of_periods),0) + nvl(cfl.stub_amount,0)) taxable_basis
        FROM   OKL_ASSETS_B ast, okl_cash_flow_objects cfo, okl_cash_flows caf, okl_cash_flow_levels cfl
        WHERE  AST.PARENT_OBJECT_CODE = 'LEASEQUOTE'
        AND    AST.PARENT_OBJECT_ID = cp_quote_id
        AND    ast.id = cfo.source_id
        AND    cfo.oty_code = 'QUOTED_ASSET'
        AND    cfo.source_table = 'OKL_ASSETS_B'
        AND    cfo.id = caf.cfo_id
        AND    caf.cft_code = 'PAYMENT_SCHEDULE'
        AND    caf.sts_code IN ('CURRENT', 'WORK')
        AND    caf.id = cfl.caf_id
        GROUP BY cfo.source_id ,  ast.asset_number, caf.sty_id
    UNION
    SELECT cfo.source_id ,  null, caf.sty_id,
           sum(nvl((cfl.amount * cfl.number_of_periods),0) + nvl(cfl.stub_amount,0)) taxable_basis
        FROM   okl_cash_flow_objects cfo, okl_cash_flows caf, okl_cash_flow_levels cfl
        WHERE  cfo.oty_code = 'LEASE_QUOTE'
        AND    cfo.source_table = 'OKL_LEASE_QUOTES_B'
        AND    cfo.source_id = cp_quote_id
        AND    cfo.id = caf.cfo_id
        AND    caf.cft_code = 'PAYMENT_SCHEDULE'
        AND    caf.sts_code IN ('CURRENT', 'WORK')
        AND    caf.id = cfl.caf_id
        GROUP BY cfo.source_id ,  null, caf.sty_id;

        -- Get 'BILL_TO' identifiers for the quote party
        CURSOR l_billtosite_csr(cp_party_id IN NUMBER) IS
    SELECT
           b.site_use_id,
           c.party_site_id,
           c.party_id,
           c.location_id
    FROM   hz_cust_acct_sites_all a,
           hz_cust_site_uses_all  b,
           hz_party_sites      c,
           hz_parties d
    WHERE
           a.cust_acct_site_id = b.cust_acct_site_id
    AND    b.site_use_code     = 'BILL_TO'
    AND    d.party_id          = cp_party_id
    AND    a.party_site_id     = c.party_site_id
    AND    c.party_id          = d.party_id;

        -- Get 'SHIP_TO' identifiers for the quote party
        CURSOR l_shiptosite_csr(cp_party_id IN NUMBER) IS
    SELECT
           b.site_use_id,
           c.party_site_id,
           c.party_id,
           c.location_id
    FROM   hz_cust_acct_sites_all a,
           hz_cust_site_uses_all  b,
           hz_party_sites      c,
           hz_parties d
    WHERE
           a.cust_acct_site_id = b.cust_acct_site_id
    AND    b.site_use_code     = 'SHIP_TO'
    AND    d.party_id          = cp_party_id
    AND    a.party_site_id     = c.party_site_id
    AND    c.party_id          = d.party_id;

    -- Check if tax basis override formula exists
        CURSOR l_txbasisoverride_csr(cp_try_id IN NUMBER) IS
        SELECT fma_id
        FROM   okl_tax_basis_override
        WHERE  try_id = cp_try_id
        AND    org_id = MO_GLOBAL.get_current_org_id;

        -- GET FORMULA NAME
    CURSOR l_formulae_csr(cp_fma_id IN NUMBER) IS
    SELECT name
    FROM   Okl_formulae_b
    WHERE  id = cp_fma_id;

    -- Get the AR customer transaction type used by OKL
    CURSOR l_racusttrxtypes_csr IS
    SELECT cust_trx_type_id
        FROM   ra_cust_trx_types_all
        WHERE  name = 'Invoice-OKL';

    -- Get currency attributes
    CURSOR l_fndcurrency_csr(cp_currency_code IN VARCHAR2) IS
    SELECT precision, minimum_accountable_unit
    FROM   fnd_currencies
    WHERE  currency_code = cp_currency_code
        AND    enabled_flag = 'Y'
    AND    NVL(start_date_active, sysdate) <= sysdate
    AND    NVL(end_date_active, sysdate) >= sysdate;

    -- Get the primary pay vendor location for the vendor
    CURSOR l_povendorsites_csr(cp_vendor_id IN NUMBER) IS
    SELECT vendor_site_id
    FROM   po_vendor_sites
    WHERE  vendor_id = cp_vendor_id
    AND    primary_pay_site_flag = 'Y';

    -- Cursor to get the corresponding hz_location id for the install location id
    CURSOR l_get_location_id(cp_party_site_id  IN NUMBER) IS
    -- SECHAWLA 12-DEC-05 4690074
    SELECT hzp.location_id
    FROM   HZ_PARTY_SITES hzp, hz_party_site_uses hsu
    WHERE  hsu.PARTY_SITE_USE_ID = cp_party_site_id
    AND    hzp.party_Site_id = hsu.party_site_id;

    -- Cursor to get the ship_to_site_use_id corresponding to the install_location_id of the asset
    CURSOR l_get_shiptositeid(cp_cust_acct_id IN NUMBER, cp_inst_loc_id IN NUMBER,cp_loc_id IN NUMBER) IS
    SELECT b.site_use_id, c.party_site_id, c.party_id, c.location_id
    FROM   hz_cust_acct_sites_all a,
           hz_cust_site_uses_all  b,
           hz_party_sites      c
    WHERE  a.cust_acct_site_id = b.cust_acct_site_id
    AND    b.site_use_code     = 'SHIP_TO'
    AND    a.party_site_id     = c.party_site_id
    AND    a.cust_account_id   = cp_cust_acct_id
    AND    a.org_id            = MO_GLOBAL.get_current_org_id
    AND    c.party_site_id     = cp_inst_loc_id
    AND    c.location_id       = cp_loc_id;

    TYPE asset_level_det_rec_type IS RECORD
        (asset_id                                               NUMBER,
         asset_number                                   VARCHAR2(150),
         vendor_site_id                                 NUMBER,
         inv_item_id                                    NUMBER,
         ship_to_site_use_id                    NUMBER,
         asset_pymnt_exist                              VARCHAR2(1));

    TYPE  prev_tx_src_tbl_type IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
    TYPE  prev_tx_trx_det_tbl_type IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
    TYPE  quoteassets_tbl_type IS TABLE OF l_quoteassets_csr%ROWTYPE INDEX BY BINARY_INTEGER;
        TYPE asset_level_det_tbl_type IS TABLE OF asset_level_det_rec_type INDEX BY BINARY_INTEGER;
        TYPE q_asset_cashflows_tbl_type IS TABLE OF l_q_asset_cashflows_csr%ROWTYPE INDEX BY BINARY_INTEGER;

        l_q_asset_cashflows_tbl                 q_asset_cashflows_tbl_type;
        l_sq_asset_level_det_tbl            asset_level_det_tbl_type;
    l_quoteassets_tbl                           quoteassets_tbl_type;
    l_prevtaxsources_tbl                        prev_tx_src_tbl_type;
    l_prevtaxtrxdet_tbl                         prev_tx_trx_det_tbl_type;
    lp_tax_src_params_rec           tax_src_params_rec_type;

    lx_line_params_tbl              line_params_tbl_type;
    lx_tax_sources_tbl                  tax_sources_tbl_type;
    lp_hdr_params_rec               hdr_params_rec_type;

    l_sq_trx_type_id                            NUMBER;
    l_parent_object_code                        VARCHAR2(30);
        l_parent_object_id                              NUMBER;
    l_legal_entity_id               NUMBER;
        l_inv_item_id                                   NUMBER;
        l_supplier_id                                   NUMBER;

    l_reported_yn                                       VARCHAR2(1);
    l_ledger_id                     NUMBER;
    l_taxation_country              VARCHAR2(2);

        l_k_start_date                                  DATE;
        l_sq_fin_prod_id                                NUMBER;
        l_sq_int_disclosed                              VARCHAR2(30);
        l_sq_transfer_of_title                  VARCHAR2(30);
    l_sq_sale_lease_back                        VARCHAR2(30);
    l_sq_purchase_of_lease                      VARCHAR2(30);
    l_sq_usage_of_equipment                     VARCHAR2(450);
    l_sq_age_of_equipment                       NUMBER;

        l_inv_item_org_id                               NUMBER;

    l_fetch_size                    NUMBER := 10000;
    i                                                           NUMBER;
    l_fma_id                                            NUMBER;
    l_formula_name                                      VARCHAR2(150);

    l_cust_acct_id                                      NUMBER;
    l_bill_to_siteuseid                 NUMBER;
    l_bill_to_party_site_id         NUMBER;
    l_bill_to_party_id              NUMBER;
    l_bill_to_location_id           NUMBER;
    l_currency_code                                     VARCHAR2(15);
    l_precision                         NUMBER;
    l_minimum_accountable_unit          NUMBER;
    l_cust_trx_type_id                          NUMBER;
    l_party_id                                          NUMBER;
    l_vendor_site_id                            NUMBER;
    l_loc_id                                            NUMBER;
    l_ship_to_siteuseid                         NUMBER;
    l_ship_to_party_site_id         NUMBER;
    l_ship_to_party_id              NUMBER;
    l_ship_to_location_id           NUMBER;
    l_org_id                        NUMBER;
    l_start_date                    DATE;
    l_currency_conversion_type      VARCHAR2(30);
    l_currency_conversion_rate      NUMBER;
    l_currency_conversion_date      DATE;
    l_line_intended_use             VARCHAR2(240);
    l_deal_type                     VARCHAR2(30);

    tax_call_cnt                                        NUMBER;
    Q_pymnt_exist                                       VARCHAR2(1);
    ind                                                         NUMBER;

  BEGIN

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax','Begin(+)');
    END IF;

    --Print Input Variables
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
              'p_init_msg_list :'||p_init_msg_list);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
              'p_source_trx_id :'||p_source_trx_id);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
              'p_source_trx_name :'||p_source_trx_name);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
              'p_source_table :'||p_source_table);
    END IF;

    x_return_status := OKL_API.G_RET_STS_SUCCESS;

    -- Validate the source trx id
    OPEN  l_leasequotes_csr(p_source_trx_id);
    FETCH l_leasequotes_csr INTO  l_k_start_date, l_sq_fin_prod_id, l_sq_int_disclosed,
              l_sq_transfer_of_title, l_sq_sale_lease_back, l_sq_purchase_of_lease, l_sq_usage_of_equipment,
                  l_sq_age_of_equipment, l_parent_object_code, l_parent_object_id, l_legal_entity_id;

    IF l_leasequotes_csr%NOTFOUND THEN
      -- Source trx id is invalid
      OKC_API.set_message( p_app_name      => 'OKC',
                           p_msg_name      => G_INVALID_VALUE,
                           p_token1        => G_COL_NAME_TOKEN,
                           p_token1_value  => 'SOURCE_TRX_ID');
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    CLOSE l_leasequotes_csr;

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
            'l_k_start_date '||l_k_start_date );
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
            'l_sq_fin_prod_id '||l_sq_fin_prod_id );
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
            'l_sq_int_disclosed '||l_sq_int_disclosed );
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
            'l_sq_transfer_of_title '||l_sq_transfer_of_title );
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
            'l_sq_sale_lease_back '||l_sq_sale_lease_back );
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
            'l_sq_purchase_of_lease '||l_sq_purchase_of_lease );
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
            'l_sq_usage_of_equipment '||l_sq_usage_of_equipment );
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
            'l_sq_age_of_equipment '||l_sq_age_of_equipment );
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
            'l_parent_object_code '||l_parent_object_code );
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
            'l_parent_object_id '||l_parent_object_id );
    END IF;

        -- Check if Quoting tax lines already exist for this quote
    OPEN  l_prevtaxsources_csr(p_source_trx_id);
        LOOP
          l_prevtaxsources_tbl.DELETE;
          FETCH l_prevtaxsources_csr BULK COLLECT INTO l_prevtaxsources_tbl LIMIT l_fetch_size;
      IF l_prevtaxsources_tbl.COUNT > 0 THEN
        i := 0;
        l_prevtaxtrxdet_tbl.DELETE;

        FOR k IN l_prevtaxsources_tbl.FIRST .. l_prevtaxsources_tbl.LAST LOOP
          -- Get the corresponding tax trx details
          FOR  l_prevtaxtrxdet_rec IN l_prevtaxtrxdet_csr(l_prevtaxsources_tbl(k)) LOOP
            i := i + 1;
            l_prevtaxtrxdet_tbl(i):= l_prevtaxtrxdet_rec.id;

          END LOOP;
        END LOOP;

        -- Delete from both the tables.
        BEGIN
          IF l_prevtaxtrxdet_tbl.COUNT > 0 THEN
            FORALL i IN l_prevtaxtrxdet_tbl.FIRST..l_prevtaxtrxdet_tbl.LAST
              DELETE FROM OKL_TAX_TRX_DETAILS WHERE id = l_prevtaxtrxdet_tbl(i);

          END IF;
        EXCEPTION
          WHEN OTHERS THEN
            IF SQL%BULK_EXCEPTIONS.COUNT > 0 THEN
                          FOR i IN 1..SQL%BULK_EXCEPTIONS.COUNT LOOP
                                OKL_API.set_message( p_app_name      => 'OKL',
                                     p_msg_name      => 'OKL_TX_TRX_DEL_ERR',
                                     p_token1        => 'TABLE_NAME',
                                     p_token1_value  => 'OKL_TAX_TRX_DETAILS',
                                     p_token2        => 'ERROR_CODE',
                                                                         p_token2_value  => SQLERRM(-SQL%BULK_EXCEPTIONS(i).ERROR_CODE),
                                                                         p_token3        => 'ITERATION',
                                                                         p_token3_value  => SQL%BULK_EXCEPTIONS(i).ERROR_INDEX);
                          END LOOP;
                          RAISE OKL_API.G_EXCEPTION_ERROR;
                        END IF;
        END;

        BEGIN
          FORALL i IN l_prevtaxsources_tbl.FIRST..l_prevtaxsources_tbl.LAST
            DELETE FROM OKL_TAX_SOURCES WHERE id = l_prevtaxsources_tbl(i);
        EXCEPTION
          WHEN OTHERS THEN
                IF SQL%BULK_EXCEPTIONS.COUNT > 0 THEN
                          FOR i IN 1..SQL%BULK_EXCEPTIONS.COUNT LOOP
                                OKL_API.set_message( p_app_name      => 'OKL',
                                     p_msg_name      => 'OKL_TX_TRX_DEL_ERR',
                                     p_token1        => 'TABLE_NAME',
                                     p_token1_value  => 'OKL_TAX_SOURCES',
                                     p_token2        => 'ERROR_CODE',
                                                                         p_token2_value  => SQLERRM(-SQL%BULK_EXCEPTIONS(i).ERROR_CODE),
                                                                         p_token3        => 'ITERATION',
                                                                         p_token3_value  => SQL%BULK_EXCEPTIONS(i).ERROR_INDEX);
                          END LOOP;
                          RAISE OKL_API.G_EXCEPTION_ERROR;
                        END IF;
        END;

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
                                'Deleted prev tax sources and lines for this sales quote ' );
        END IF;

      END IF;
      EXIT WHEN l_prevtaxsources_csr%NOTFOUND;
    END LOOP;
    CLOSE l_prevtaxsources_csr;

    -- Fetch the Ledger info
    l_ledger_id := okl_accounting_util.get_set_of_books_id;
    l_reported_yn := 'N';

    -- Fetch the Tax country
    l_taxation_country := get_default_taxation_country(x_return_status     => x_return_status,
                                                       x_msg_count         => x_msg_count,
                                                       x_msg_data          => x_msg_data,
                                                       p_legal_entity_id   => l_legal_entity_id);
        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    -- Fetch 'Sales Quote' Trx type ID
    OPEN l_trxtypes_csr;
    FETCH l_trxtypes_csr INTO l_sq_trx_type_id;
    CLOSE l_trxtypes_csr;

    -- Check if taxable basis override applies to 'Sales Quote' transaction
    OPEN  l_txbasisoverride_csr(cp_try_id => l_sq_trx_type_id);
    FETCH l_txbasisoverride_csr INTO l_fma_id;
    CLOSE l_txbasisoverride_csr;

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
                'Sales Quote Trx Type ID '||l_sq_trx_type_id );
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
                'Formula ID '||l_fma_id );
    END IF;

    IF l_fma_id IS NOT NULL THEN
      OPEN  l_formulae_csr(l_fma_id);
      FETCH l_formulae_csr INTO l_formula_name;
      IF l_formulae_csr%NOTFOUND THEN
        OKC_API.set_message( p_app_name      => 'OKC',
                             p_msg_name      => G_INVALID_VALUE,
                             p_token1        => G_COL_NAME_TOKEN,
                             p_token1_value  => 'FMA_ID');
        RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;
          CLOSE l_formulae_csr;

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
                'l_formula_name '||l_formula_name );
      END IF;
        END IF;

        -- Get the AR cust trx type ID
    OPEN  l_racusttrxtypes_csr;
    FETCH l_racusttrxtypes_csr INTO l_cust_trx_type_id;
    IF l_racusttrxtypes_csr%NOTFOUND THEN
      -- Cust trx type id is required
      OKC_API.set_message( p_app_name      => 'OKC',
                           p_msg_name      => G_REQUIRED_VALUE,
                           p_token1        => G_COL_NAME_TOKEN,
                           p_token1_value  => 'CUST_TRX_TYPE_ID');
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    CLOSE l_racusttrxtypes_csr;

    -- Fetch parent object values
        IF l_parent_object_code ='LEASEOPP' THEN
          OPEN  l_leaseopp_csr(p_source_trx_id);
          FETCH l_leaseopp_csr INTO l_currency_code, l_cust_acct_id, l_party_id,  -- l_cust_acct_id may be null
                                l_org_id, l_start_date, l_currency_conversion_type,
                                l_currency_conversion_rate, l_currency_conversion_date,
                                l_line_intended_use,l_deal_type;
          IF l_leaseopp_csr%NOTFOUND THEN
            OKC_API.set_message( p_app_name      => 'OKC',
                             p_msg_name      => G_REQUIRED_VALUE,
                             p_token1        => G_COL_NAME_TOKEN,
                             p_token1_value  => 'CURRENCY_CODE');
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
          CLOSE l_leaseopp_csr;
        ELSIF l_parent_object_code ='LEASEAPP' THEN
          OPEN  l_leaseapp_csr(p_source_trx_id);
          FETCH l_leaseapp_csr INTO l_currency_code, l_cust_acct_id, l_party_id, -- l_cust_acct_id may be null
                                l_org_id, l_start_date, l_currency_conversion_type,
                                l_currency_conversion_rate, l_currency_conversion_date,
                                l_line_intended_use, l_deal_type;
          IF l_leaseapp_csr%NOTFOUND THEN
            OKC_API.set_message( p_app_name      => 'OKC',
                             p_msg_name      => G_REQUIRED_VALUE,
                             p_token1        => G_COL_NAME_TOKEN,
                             p_token1_value  => 'CURRENCY_CODE');
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
          CLOSE l_leaseapp_csr;
        END IF;

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
            'l_currency_code '||l_currency_code );
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
            'l_cust_acct_id '||l_cust_acct_id );
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
            'l_party_id '||l_party_id );
    END IF;

        -- Get Bill to Site Use ID from TCA
        -- This cursor may return more than one Bill To sites for a party
        -- Select the first bill to returned by the cursor
        -- Bill To is not captured on a sales quote. So we get it from TCA
        -- There may not be any Bill To site defined for a party
    OPEN  l_billtosite_csr(l_party_id);
        FETCH l_billtosite_csr INTO l_bill_to_siteuseid, l_bill_to_party_site_id,
                                l_bill_to_party_id, l_bill_to_location_id;
        IF l_billtosite_csr%NOTFOUND THEN
          OKC_API.set_message( p_app_name      => 'OKL',
                           p_msg_name      => 'OKL_TX_NO_SQ_BILL_TO');
      RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;
        CLOSE l_billtosite_csr ;

    -- Fetch precision, minimum accountable unit
    OPEN  l_fndcurrency_csr(l_currency_code);
    FETCH l_fndcurrency_csr INTO l_precision, l_minimum_accountable_unit;
    IF l_fndcurrency_csr%NOTFOUND THEN
      -- Currency code is invalid
      OKC_API.set_message( p_app_name      => 'OKC',
                           p_msg_name      => G_INVALID_VALUE,
                           p_token1        => G_COL_NAME_TOKEN,
                           p_token1_value  => 'CURRENCY_CODE');
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    CLOSE l_fndcurrency_csr;

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
            'l_bill_to_siteuseid '||l_bill_to_siteuseid );
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
            'l_precision '||l_precision );
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
            'l_minimum_accountable_unit '||l_minimum_accountable_unit );
    END IF;

    -- Sales Quoting is not capturing Purchase Option as of now.
    -- So this determinant will be null for Sales Quote

    -- Get all the assets belonging to a quote
    -------------- Populate asset level TBC Determinants ---------------
    i := 0;

    OPEN l_quoteassets_csr(p_source_trx_id);
    LOOP
      l_quoteassets_tbl.DELETE;
      FETCH l_quoteassets_csr BULK COLLECT INTO l_quoteassets_tbl LIMIT l_fetch_size;

      IF l_quoteassets_tbl.COUNT > 0 THEN
        FOR K IN l_quoteassets_tbl.FIRST..l_quoteassets_tbl.LAST LOOP

          OPEN  l_assetcomponent_csr(l_quoteassets_tbl(k).asset_id);
                  FETCH l_assetcomponent_csr INTO l_inv_item_id, l_supplier_id;
                  CLOSE l_assetcomponent_csr;

                  IF l_supplier_id IS NOT NULL THEN
                        OPEN   l_povendorsites_csr(l_supplier_id);
                FETCH  l_povendorsites_csr INTO l_vendor_site_id; -- will be null if none of the sites are checked as primary
                CLOSE  l_povendorsites_csr;
          END IF;

          -- get the location ID
                  OPEN  l_get_location_id(l_quoteassets_tbl(k).install_site_id);
                  FETCH l_get_location_id INTO l_loc_id;
                  CLOSE l_get_location_id;

                  IF l_loc_id IS NULL THEN
            -- Install Location id is required
                OKL_API.set_message( p_app_name      => 'OKC',
                                 p_msg_name      => G_REQUIRED_VALUE,
                                 p_token1        => G_COL_NAME_TOKEN,
                                 p_token1_value  => 'INSTALL_LOCATION_ID');
                RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;

              IF l_cust_acct_id IS NOT NULL THEN
                -- Get the ship to site use id of the asset
                OPEN  l_get_shiptositeid(l_cust_acct_id,l_quoteassets_tbl(k).install_site_id,l_loc_id);
                FETCH l_get_shiptositeid INTO l_ship_to_siteuseid, l_ship_to_party_site_id,
                                          l_ship_to_party_id, l_ship_to_location_id;
                CLOSE l_get_shiptositeid;
          ELSE
                OPEN  l_shiptosite_csr(l_party_id);
                FETCH l_shiptosite_csr INTO l_ship_to_siteuseid, l_ship_to_party_site_id,
                                        l_ship_to_party_id, l_ship_to_location_id;
                CLOSE l_shiptosite_csr;
          END IF;

          l_sq_asset_level_det_tbl(i).asset_id            := l_quoteassets_tbl(k).asset_id;
          l_sq_asset_level_det_tbl(i).asset_number        := l_quoteassets_tbl(k).asset_number;
          l_sq_asset_level_det_tbl(i).vendor_site_id      := l_vendor_site_id;
          l_sq_asset_level_det_tbl(i).inv_item_id         := l_inv_item_id;
          l_sq_asset_level_det_tbl(i).ship_to_site_use_id := l_ship_to_siteuseid;

          l_sq_asset_level_det_tbl(i).asset_pymnt_exist := 'N';

          IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
                                'i '||i );
            FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
                                'asset_id '||l_sq_asset_level_det_tbl(i).asset_id );
            FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
                                'asset_number '||l_sq_asset_level_det_tbl(i).asset_number );
            FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
                                'vendor_site_id '||l_sq_asset_level_det_tbl(i).vendor_site_id );
            FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
                                'inv_item_id '||l_sq_asset_level_det_tbl(i).inv_item_id );
            FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
                                'ship_to_site_use_id '||l_sq_asset_level_det_tbl(i).ship_to_site_use_id );
            FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
                                'asset_pymnt_exist '||l_sq_asset_level_det_tbl(i).asset_pymnt_exist );
          END IF;

                  i := i+1;
        END LOOP;
      END IF;
          EXIT WHEN l_quoteassets_csr%NOTFOUND;
    END LOOP;
    CLOSE l_quoteassets_csr;

    -- Populate tax info
    Q_pymnt_exist := 'N';

    i := 1;
    OPEN l_q_asset_cashflows_csr(p_source_trx_id);
    LOOP
      l_q_asset_cashflows_tbl.DELETE;
      FETCH l_q_asset_cashflows_csr BULK COLLECT INTO l_q_asset_cashflows_tbl LIMIT l_fetch_size;

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
                'l_q_asset_cashflows_tbl.count '||l_q_asset_cashflows_tbl.count||' i = '||i );
      END IF;

          IF l_q_asset_cashflows_tbl.count = 0 AND i = 1 THEN
                -- No payments exist
        -- Tax call will still be made at the Q hdr and each asset level

                tax_call_cnt := 1;

                -- Quote level call begin

                IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
                  'tax_call_cnt '||tax_call_cnt );
        END IF;

        -- Populate tax sources record -- start
        lp_tax_src_params_rec.kle_id       := null;
        lp_tax_src_params_rec.asset_number := null;
        lp_tax_src_params_rec.line_name    := null;

        lp_tax_src_params_rec.ship_to_cust_acct_site_use_id   := l_ship_to_siteuseid;
        lp_tax_src_params_rec.ship_to_party_site_id           := l_ship_to_party_site_id;
        lp_tax_src_params_rec.ship_to_party_id                := l_ship_to_party_id;
        lp_tax_src_params_rec.ship_to_location_id             := l_ship_to_location_id;

        lp_tax_src_params_rec.bill_to_party_site_id         := l_bill_to_party_site_id;
        lp_tax_src_params_rec.bill_to_party_id              := l_bill_to_party_id;
        lp_tax_src_params_rec.bill_to_location_id           := l_bill_to_location_id;
        lp_tax_src_params_rec.bill_to_cust_acct_site_use_id := l_bill_to_siteuseid;

        lp_tax_src_params_rec.inventory_item_id             := null;
        lp_tax_src_params_rec.sty_id                        := null;
        lp_tax_src_params_rec.khr_id                        := null;
        lp_tax_src_params_rec.trx_id                        := p_source_trx_id;
        lp_tax_src_params_rec.entity_code                   := G_SQ_ENTITY_CODE;
        lp_tax_src_params_rec.event_class_code              := G_SQ_EVENT_CLASS_CODE;
        lp_tax_src_params_rec.trx_level_type                := G_TRX_LEVEL_TYPE;
        lp_tax_src_params_rec.tax_call_type_code            := G_UPFRONT_TAX;
        lp_tax_src_params_rec.tax_reporting_flag            := l_reported_yn;
        lp_tax_src_params_rec.reported_yn                   := l_reported_yn;
        lp_tax_src_params_rec.trx_date                      := l_start_date;
        lp_tax_src_params_rec.trx_currency_code             := l_currency_code;
        lp_tax_src_params_rec.line_intended_use             := l_line_intended_use;
        lp_tax_src_params_rec.bill_to_cust_acct_id          := l_cust_acct_id;
        lp_tax_src_params_rec.org_id                        := l_org_id;
        lp_tax_src_params_rec.legal_entity_id               := l_legal_entity_id;
        lp_tax_src_params_rec.line_amt                      := 0;
        lp_tax_src_params_rec.try_id                        := l_sq_trx_type_id;

        lp_tax_src_params_rec.adjusted_doc_entity_code      := null;
        lp_tax_src_params_rec.adjusted_doc_event_class_code := null;
        lp_tax_src_params_rec.adjusted_doc_trx_id           := null;
        lp_tax_src_params_rec.adjusted_doc_trx_line_id      := null;
        lp_tax_src_params_rec.adjusted_doc_trx_level_type   := null;
        lp_tax_src_params_rec.adjusted_doc_number           := null;
            lp_tax_src_params_rec.adjusted_doc_date             := null;
        lp_tax_src_params_rec.tax_line_status_code          := G_ACTIVE_STATUS;
        lp_tax_src_params_rec.default_taxation_country      := l_taxation_country;

        lp_tax_src_params_rec.currency_conversion_type      := l_currency_conversion_type;
        lp_tax_src_params_rec.currency_conversion_rate      := l_currency_conversion_rate;
        lp_tax_src_params_rec.currency_conversion_date      := l_currency_conversion_date;
        -- Populate tax sources record -- end

        populate_tax_info(
                        p_api_version                  => p_api_version,
                        p_init_msg_list                => OKC_API.G_FALSE,
                        x_return_status                => x_return_status,
                        x_msg_count                    => x_msg_count,
                        x_msg_data                     => x_msg_data,
                        p_prch_opt_det                             => null,  -- purchase option is not captured on Sales Quote
                                p_fin_prod_id_det                          => l_sq_fin_prod_id,
                                p_int_disclosed_det                        => l_sq_int_disclosed,
                        p_title_trnsfr_code                        => null,
                        p_sale_lease_back_code             => null,
                        p_lease_purchased_code             => null,
                        p_equip_usage_code                         => null,
                        p_vendor_site_id                           => null,
                        p_age_of_equip                             => null,
                p_source_trx_name              => p_source_trx_name,
                p_cust_trx_type_id             => l_cust_trx_type_id,
                p_book_class_code              => l_deal_type,
                        p_tax_call_cnt                             => tax_call_cnt,
                        p_fma_id                                           => l_fma_id,
                        p_formula_name                             => l_formula_name,
                        p_minimum_accountable_unit         => l_minimum_accountable_unit,
                        p_precision                                        => l_precision,
                        p_sales_quote_id                           => p_source_trx_id,
                p_event_type_code              => G_SQ_CRE_EVT_TYPE_CODE,
                p_ledger_id                    => l_ledger_id,
                p_line_level_action            => G_CREATE_LINE_LEVEL_ACTION,
                p_tax_src_params_rec           => lp_tax_src_params_rec,
                p_quote_flag                   => 'Y',
                p_rounding_ship_to_party_id    => null,
                p_rounding_bill_to_party_id    => l_bill_to_party_id,
                p_line_amt_includes_tax_flag   => 'N',
                p_term_quote_type_code         => null,
                p_term_quote_reason_code       => null,
                px_tax_sources_tbl                         => lx_tax_sources_tbl,
                px_line_params_tbl             => lx_line_params_tbl );

        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;

                IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
                        'lx_tax_sources_tbl.count '||lx_tax_sources_tbl.count||' lx_line_params_tbl.count '||lx_line_params_tbl.count);
        END IF;
            -- quote level call end

                tax_call_cnt := tax_call_cnt + 1;

                IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
                  'tax_call_cnt '||tax_call_cnt );
        END IF;

            -- Asset level call begin
                IF l_sq_asset_level_det_tbl.COUNT > 0 THEN

                  FOR asset_cnt IN l_sq_asset_level_det_tbl.FIRST .. l_sq_asset_level_det_tbl.LAST LOOP

            -- Populate tax sources record -- start
            lp_tax_src_params_rec.kle_id       := null;
            lp_tax_src_params_rec.asset_number := l_sq_asset_level_det_tbl(asset_cnt).asset_number;
            lp_tax_src_params_rec.line_name    := l_sq_asset_level_det_tbl(asset_cnt).asset_number;

            lp_tax_src_params_rec.ship_to_cust_acct_site_use_id   := l_sq_asset_level_det_tbl(asset_cnt).ship_to_site_use_id;
            lp_tax_src_params_rec.ship_to_party_site_id           := l_ship_to_party_site_id;
            lp_tax_src_params_rec.ship_to_party_id                := l_ship_to_party_id;
            lp_tax_src_params_rec.ship_to_location_id             := l_ship_to_location_id;

            lp_tax_src_params_rec.bill_to_party_site_id         := l_bill_to_party_site_id;
            lp_tax_src_params_rec.bill_to_party_id              := l_bill_to_party_id;
            lp_tax_src_params_rec.bill_to_location_id           := l_bill_to_location_id;
            lp_tax_src_params_rec.bill_to_cust_acct_site_use_id := l_bill_to_siteuseid;

            lp_tax_src_params_rec.inventory_item_id             := l_sq_asset_level_det_tbl(asset_cnt).inv_item_id;
            lp_tax_src_params_rec.sty_id                        := null;
            lp_tax_src_params_rec.khr_id                        := null;
            lp_tax_src_params_rec.trx_id                        := p_source_trx_id;
            lp_tax_src_params_rec.entity_code                   := G_SQ_ENTITY_CODE;
            lp_tax_src_params_rec.event_class_code              := G_SQ_EVENT_CLASS_CODE;
            lp_tax_src_params_rec.trx_level_type                := G_TRX_LEVEL_TYPE;
            lp_tax_src_params_rec.tax_call_type_code            := G_UPFRONT_TAX;
            lp_tax_src_params_rec.tax_reporting_flag            := l_reported_yn;
            lp_tax_src_params_rec.reported_yn                   := l_reported_yn;
            lp_tax_src_params_rec.trx_date                      := l_start_date;
            lp_tax_src_params_rec.trx_currency_code             := l_currency_code;
            lp_tax_src_params_rec.line_intended_use             := l_line_intended_use;
            lp_tax_src_params_rec.bill_to_cust_acct_id          := l_cust_acct_id;
            lp_tax_src_params_rec.org_id                        := l_org_id;
            lp_tax_src_params_rec.legal_entity_id               := l_legal_entity_id;
            lp_tax_src_params_rec.line_amt                      := 0;
            lp_tax_src_params_rec.try_id                        := l_sq_trx_type_id;

            lp_tax_src_params_rec.adjusted_doc_entity_code      := null;
            lp_tax_src_params_rec.adjusted_doc_event_class_code := null;
            lp_tax_src_params_rec.adjusted_doc_trx_id           := null;
            lp_tax_src_params_rec.adjusted_doc_trx_line_id      := null;
            lp_tax_src_params_rec.adjusted_doc_trx_level_type   := null;
            lp_tax_src_params_rec.adjusted_doc_number           := null;
                lp_tax_src_params_rec.adjusted_doc_date             := null;
            lp_tax_src_params_rec.tax_line_status_code          := G_ACTIVE_STATUS;
            lp_tax_src_params_rec.default_taxation_country      := l_taxation_country;

            lp_tax_src_params_rec.currency_conversion_type      := l_currency_conversion_type;
            lp_tax_src_params_rec.currency_conversion_rate      := l_currency_conversion_rate;
            lp_tax_src_params_rec.currency_conversion_date      := l_currency_conversion_date;
            -- Populate tax sources record -- end

                    -- asset level call begin
            populate_tax_info(
                        p_api_version                  => p_api_version,
                        p_init_msg_list                => OKC_API.G_FALSE,
                        x_return_status                => x_return_status,
                        x_msg_count                    => x_msg_count,
                        x_msg_data                     => x_msg_data,
                        p_prch_opt_det                             => null,  -- purchase option is not captured on Sales Quote
                                p_fin_prod_id_det                          => l_sq_fin_prod_id,
                                p_int_disclosed_det                        => l_sq_int_disclosed,
                        p_title_trnsfr_code                        => l_sq_transfer_of_title,
                        p_sale_lease_back_code             => l_sq_sale_lease_back,
                        p_lease_purchased_code             => l_sq_purchase_of_lease,
                        p_equip_usage_code                         => l_sq_usage_of_equipment,
                        p_vendor_site_id                           => l_sq_asset_level_det_tbl(asset_cnt).vendor_site_id,
                        p_age_of_equip                             => l_sq_age_of_equipment,
                p_source_trx_name              => p_source_trx_name,
                p_cust_trx_type_id             => l_cust_trx_type_id,
                p_book_class_code              => l_deal_type,
                        p_tax_call_cnt                             => tax_call_cnt,
                        p_fma_id                                           => l_fma_id,
                        p_formula_name                             => l_formula_name,
                        p_minimum_accountable_unit         => l_minimum_accountable_unit,
                        p_precision                                        => l_precision,
                        p_sales_quote_id                           => p_source_trx_id,
                p_event_type_code              => G_SQ_CRE_EVT_TYPE_CODE,
                p_ledger_id                    => l_ledger_id,
                p_line_level_action            => G_CREATE_LINE_LEVEL_ACTION,
                p_tax_src_params_rec           => lp_tax_src_params_rec,
                p_quote_flag                   => 'Y',
                p_rounding_ship_to_party_id    => null,
                p_rounding_bill_to_party_id    => l_bill_to_party_id,
                p_line_amt_includes_tax_flag   => 'N',
                p_term_quote_type_code         => null,
                p_term_quote_reason_code       => null,
                px_tax_sources_tbl                         => lx_tax_sources_tbl,
                px_line_params_tbl             => lx_line_params_tbl );

            IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
              RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
                ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
              RAISE OKL_API.G_EXCEPTION_ERROR;
                END IF;
                        -- asset level call end

                        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
                                        'lx_tax_sources_tbl.count '||lx_tax_sources_tbl.count||' lx_line_params_tbl.count '||lx_line_params_tbl.count);
                    END IF;
                        tax_call_cnt := tax_call_cnt + 1;
                  END LOOP;
                END IF;
                -- Asset level call end
                -- No payments exist - end

            ELSIF l_q_asset_cashflows_tbl.COUNT > 0 THEN
                  IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
                        'payments exist ');
          END IF;

          FOR K IN l_q_asset_cashflows_tbl.FIRST..l_q_asset_cashflows_tbl.LAST LOOP

                        tax_call_cnt := i;

                IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
                                'tax_call_cnt '||tax_call_cnt);
                END IF;

                IF l_q_asset_cashflows_tbl(k).asset_number IS NULL THEN
              -- Q level payment

                  IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                            FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
                                        'Quote level payment ');
              END IF;

              -- Populate tax sources record -- start
              lp_tax_src_params_rec.kle_id       := null;
              lp_tax_src_params_rec.asset_number := null;
              lp_tax_src_params_rec.line_name    := null;

              lp_tax_src_params_rec.ship_to_cust_acct_site_use_id   := l_ship_to_siteuseid;
              lp_tax_src_params_rec.ship_to_party_site_id           := l_ship_to_party_site_id;
              lp_tax_src_params_rec.ship_to_party_id                := l_ship_to_party_id;
              lp_tax_src_params_rec.ship_to_location_id             := l_ship_to_location_id;

              lp_tax_src_params_rec.bill_to_party_site_id         := l_bill_to_party_site_id;
              lp_tax_src_params_rec.bill_to_party_id              := l_bill_to_party_id;
              lp_tax_src_params_rec.bill_to_location_id           := l_bill_to_location_id;
              lp_tax_src_params_rec.bill_to_cust_acct_site_use_id := l_bill_to_siteuseid;

              lp_tax_src_params_rec.inventory_item_id             := null;
              lp_tax_src_params_rec.sty_id                        := l_q_asset_cashflows_tbl(k).sty_id;
              lp_tax_src_params_rec.khr_id                        := null;
              lp_tax_src_params_rec.trx_id                        := p_source_trx_id;
              lp_tax_src_params_rec.entity_code                   := G_SQ_ENTITY_CODE;
              lp_tax_src_params_rec.event_class_code              := G_SQ_EVENT_CLASS_CODE;
              lp_tax_src_params_rec.trx_level_type                := G_TRX_LEVEL_TYPE;
              lp_tax_src_params_rec.tax_call_type_code            := G_UPFRONT_TAX;
              lp_tax_src_params_rec.tax_reporting_flag            := l_reported_yn;
              lp_tax_src_params_rec.reported_yn                   := l_reported_yn;
              lp_tax_src_params_rec.trx_date                      := l_start_date;
              lp_tax_src_params_rec.trx_currency_code             := l_currency_code;
              lp_tax_src_params_rec.line_intended_use             := l_line_intended_use;
              lp_tax_src_params_rec.bill_to_cust_acct_id          := l_cust_acct_id;
              lp_tax_src_params_rec.org_id                        := l_org_id;
              lp_tax_src_params_rec.legal_entity_id               := l_legal_entity_id;
              lp_tax_src_params_rec.line_amt                      := l_q_asset_cashflows_tbl(k).taxable_basis;
              lp_tax_src_params_rec.try_id                        := l_sq_trx_type_id;

              lp_tax_src_params_rec.adjusted_doc_entity_code      := null;
              lp_tax_src_params_rec.adjusted_doc_event_class_code := null;
              lp_tax_src_params_rec.adjusted_doc_trx_id           := null;
              lp_tax_src_params_rec.adjusted_doc_trx_line_id      := null;
              lp_tax_src_params_rec.adjusted_doc_trx_level_type   := null;
              lp_tax_src_params_rec.adjusted_doc_number           := null;
                  lp_tax_src_params_rec.adjusted_doc_date             := null;
              lp_tax_src_params_rec.tax_line_status_code          := G_ACTIVE_STATUS;
              lp_tax_src_params_rec.default_taxation_country      := l_taxation_country;

              lp_tax_src_params_rec.currency_conversion_type      := l_currency_conversion_type;
              lp_tax_src_params_rec.currency_conversion_rate      := l_currency_conversion_rate;
              lp_tax_src_params_rec.currency_conversion_date      := l_currency_conversion_date;
              -- Populate tax sources record -- end

              populate_tax_info(
                        p_api_version                  => p_api_version,
                        p_init_msg_list                => OKC_API.G_FALSE,
                        x_return_status                => x_return_status,
                        x_msg_count                    => x_msg_count,
                        x_msg_data                     => x_msg_data,
                        p_prch_opt_det                             => null,  -- purchase option is not captured on Sales Quote
                                p_fin_prod_id_det                          => l_sq_fin_prod_id,
                                p_int_disclosed_det                        => l_sq_int_disclosed,
                        p_title_trnsfr_code                        => null,
                        p_sale_lease_back_code             => null,
                        p_lease_purchased_code             => null,
                        p_equip_usage_code                         => null,
                        p_vendor_site_id                           => null,
                        p_age_of_equip                             => null,
                p_source_trx_name              => p_source_trx_name,
                p_cust_trx_type_id             => l_cust_trx_type_id,
                p_book_class_code              => l_deal_type,
                        p_tax_call_cnt                             => tax_call_cnt,
                        p_fma_id                                           => l_fma_id,
                        p_formula_name                             => l_formula_name,
                        p_minimum_accountable_unit         => l_minimum_accountable_unit,
                        p_precision                                        => l_precision,
                        p_sales_quote_id                           => p_source_trx_id,
                p_event_type_code              => G_SQ_CRE_EVT_TYPE_CODE,
                p_ledger_id                    => l_ledger_id,
                p_line_level_action            => G_CREATE_LINE_LEVEL_ACTION,
                p_tax_src_params_rec           => lp_tax_src_params_rec,
                p_quote_flag                   => 'Y',
                p_rounding_ship_to_party_id    => null,
                p_rounding_bill_to_party_id    => l_bill_to_party_id,
                p_line_amt_includes_tax_flag   => 'N',
                p_term_quote_type_code         => null,
                p_term_quote_reason_code       => null,
                px_tax_sources_tbl                         => lx_tax_sources_tbl,
                px_line_params_tbl             => lx_line_params_tbl );

              IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
                RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
                  ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
                RAISE OKL_API.G_EXCEPTION_ERROR;
                  END IF;

                          IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
                                        'lx_tax_sources_tbl.count '||lx_tax_sources_tbl.count||' lx_line_params_tbl.count '||lx_line_params_tbl.count);
                      END IF;

                  Q_pymnt_exist := 'Y';

                ELSE  -- asset line level payment
                  IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                             FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
                                        'Asset level payment ');
              END IF;

                  IF l_sq_asset_level_det_tbl.count > 0 THEN
                        ind := l_sq_asset_level_det_tbl.FIRST;
                        LOOP
                          IF l_sq_asset_level_det_tbl(ind).asset_number = l_q_asset_cashflows_tbl(k).asset_number THEN
                            l_sq_asset_level_det_tbl(ind).asset_pymnt_exist := 'Y';

                            -- asset level call begin
                    -- Populate tax sources record -- start
                    lp_tax_src_params_rec.kle_id       := null;
                    lp_tax_src_params_rec.asset_number := l_sq_asset_level_det_tbl(ind).asset_number;
                    lp_tax_src_params_rec.line_name    := l_sq_asset_level_det_tbl(ind).asset_number;

                    lp_tax_src_params_rec.ship_to_cust_acct_site_use_id   := l_sq_asset_level_det_tbl(ind).ship_to_site_use_id;
                    lp_tax_src_params_rec.ship_to_party_site_id           := l_ship_to_party_site_id;
                    lp_tax_src_params_rec.ship_to_party_id                := l_ship_to_party_id;
                    lp_tax_src_params_rec.ship_to_location_id             := l_ship_to_location_id;

                    lp_tax_src_params_rec.bill_to_party_site_id         := l_bill_to_party_site_id;
                    lp_tax_src_params_rec.bill_to_party_id              := l_bill_to_party_id;
                    lp_tax_src_params_rec.bill_to_location_id           := l_bill_to_location_id;
                    lp_tax_src_params_rec.bill_to_cust_acct_site_use_id := l_bill_to_siteuseid;

                    lp_tax_src_params_rec.inventory_item_id             := l_sq_asset_level_det_tbl(ind).inv_item_id;
                    lp_tax_src_params_rec.sty_id                        := l_q_asset_cashflows_tbl(k).sty_id;
                    lp_tax_src_params_rec.khr_id                        := null;
                    lp_tax_src_params_rec.trx_id                        := p_source_trx_id;
                    lp_tax_src_params_rec.entity_code                   := G_SQ_ENTITY_CODE;
                    lp_tax_src_params_rec.event_class_code              := G_SQ_EVENT_CLASS_CODE;
                    lp_tax_src_params_rec.trx_level_type                := G_TRX_LEVEL_TYPE;
                    lp_tax_src_params_rec.tax_call_type_code            := G_UPFRONT_TAX;
                    lp_tax_src_params_rec.tax_reporting_flag            := l_reported_yn;
                    lp_tax_src_params_rec.reported_yn                   := l_reported_yn;
                    lp_tax_src_params_rec.trx_date                      := l_start_date;
                    lp_tax_src_params_rec.trx_currency_code             := l_currency_code;
                    lp_tax_src_params_rec.line_intended_use             := l_line_intended_use;
                    lp_tax_src_params_rec.bill_to_cust_acct_id          := l_cust_acct_id;
                    lp_tax_src_params_rec.org_id                        := l_org_id;
                    lp_tax_src_params_rec.legal_entity_id               := l_legal_entity_id;
                    lp_tax_src_params_rec.line_amt                      := l_q_asset_cashflows_tbl(k).taxable_basis;
                    lp_tax_src_params_rec.try_id                        := l_sq_trx_type_id;

                    lp_tax_src_params_rec.adjusted_doc_entity_code      := null;
                    lp_tax_src_params_rec.adjusted_doc_event_class_code := null;
                    lp_tax_src_params_rec.adjusted_doc_trx_id           := null;
                    lp_tax_src_params_rec.adjusted_doc_trx_line_id      := null;
                    lp_tax_src_params_rec.adjusted_doc_trx_level_type   := null;
                    lp_tax_src_params_rec.adjusted_doc_number           := null;
                        lp_tax_src_params_rec.adjusted_doc_date             := null;
                    lp_tax_src_params_rec.tax_line_status_code          := G_ACTIVE_STATUS;
                    lp_tax_src_params_rec.default_taxation_country      := l_taxation_country;

                    lp_tax_src_params_rec.currency_conversion_type      := l_currency_conversion_type;
                    lp_tax_src_params_rec.currency_conversion_rate      := l_currency_conversion_rate;
                    lp_tax_src_params_rec.currency_conversion_date      := l_currency_conversion_date;
                    -- Populate tax sources record -- end

                            -- asset level call begin
                    populate_tax_info(
                                     p_api_version                  => p_api_version,
                                     p_init_msg_list                => OKC_API.G_FALSE,
                                     x_return_status                => x_return_status,
                                     x_msg_count                    => x_msg_count,
                                     x_msg_data                     => x_msg_data,
                                     p_prch_opt_det                                 => null,  -- purchase option is not captured on Sales Quote
                                             p_fin_prod_id_det                      => l_sq_fin_prod_id,
                                             p_int_disclosed_det                    => l_sq_int_disclosed,
                                     p_title_trnsfr_code                    => l_sq_transfer_of_title,
                                     p_sale_lease_back_code                 => l_sq_sale_lease_back,
                                     p_lease_purchased_code                 => l_sq_purchase_of_lease,
                                     p_equip_usage_code                     => l_sq_usage_of_equipment,
                                     p_vendor_site_id                       => l_sq_asset_level_det_tbl(ind).vendor_site_id,
                                     p_age_of_equip                                 => l_sq_age_of_equipment,
                             p_source_trx_name              => p_source_trx_name,
                             p_cust_trx_type_id             => l_cust_trx_type_id,
                             p_book_class_code              => l_deal_type,
                                     p_tax_call_cnt                         => tax_call_cnt,
                                     p_fma_id                                       => l_fma_id,
                                     p_formula_name                                 => l_formula_name,
                                     p_minimum_accountable_unit     => l_minimum_accountable_unit,
                                     p_precision                                        => l_precision,
                                     p_sales_quote_id                       => p_source_trx_id,
                             p_event_type_code              => G_SQ_CRE_EVT_TYPE_CODE,
                             p_ledger_id                    => l_ledger_id,
                             p_line_level_action            => G_CREATE_LINE_LEVEL_ACTION,
                             p_tax_src_params_rec           => lp_tax_src_params_rec,
                             p_quote_flag                   => 'Y',
                             p_rounding_ship_to_party_id    => null,
                             p_rounding_bill_to_party_id    => l_bill_to_party_id,
                             p_line_amt_includes_tax_flag   => 'N',
                             p_term_quote_type_code         => null,
                             p_term_quote_reason_code       => null,
                             px_tax_sources_tbl                     => lx_tax_sources_tbl,
                             px_line_params_tbl             => lx_line_params_tbl );

                    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
                          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
                                ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
                      RAISE OKL_API.G_EXCEPTION_ERROR;
                                END IF;

                                IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                                          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
                                                                'lx_tax_sources_tbl.count '||lx_tax_sources_tbl.count||' lx_line_params_tbl.count '||lx_line_params_tbl.count);
                                        END IF;
                                    -- asset level call end
                          EXIT;
                    END IF;
                    EXIT WHEN (ind = l_sq_asset_level_det_tbl.LAST);
                ind := l_sq_asset_level_det_tbl.NEXT(ind);
                  END LOOP;
                END IF;
          END IF;
                  i := i + 1;
        END LOOP;
      END IF;
      EXIT WHEN l_q_asset_cashflows_csr%NOTFOUND;
    END LOOP;
    CLOSE l_q_asset_cashflows_csr;

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
            FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
                'i '||i);
    END IF;

    IF i > 1 THEN -- some payments exist
      tax_call_cnt := i; -- pick the last index

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
            FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
            'some payments exist, tax_call_cnt= '||tax_call_cnt);
      END IF;

      IF Q_pymnt_exist = 'N' THEN -- Q level payment does not exist
            -- Quote level call begin

            IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
                'Q level payment does not exist ');
        END IF;

        -- Populate tax sources record -- start
        lp_tax_src_params_rec.kle_id       := null;
        lp_tax_src_params_rec.asset_number := null;
        lp_tax_src_params_rec.line_name    := null;

        lp_tax_src_params_rec.ship_to_cust_acct_site_use_id   := l_ship_to_siteuseid;
        lp_tax_src_params_rec.ship_to_party_site_id           := l_ship_to_party_site_id;
        lp_tax_src_params_rec.ship_to_party_id                := l_ship_to_party_id;
        lp_tax_src_params_rec.ship_to_location_id             := l_ship_to_location_id;

        lp_tax_src_params_rec.bill_to_party_site_id         := l_bill_to_party_site_id;
        lp_tax_src_params_rec.bill_to_party_id              := l_bill_to_party_id;
        lp_tax_src_params_rec.bill_to_location_id           := l_bill_to_location_id;
        lp_tax_src_params_rec.bill_to_cust_acct_site_use_id := l_bill_to_siteuseid;

        lp_tax_src_params_rec.inventory_item_id             := null;
        lp_tax_src_params_rec.sty_id                        := null;
        lp_tax_src_params_rec.khr_id                        := null;
        lp_tax_src_params_rec.trx_id                        := p_source_trx_id;
        lp_tax_src_params_rec.entity_code                   := G_SQ_ENTITY_CODE;
        lp_tax_src_params_rec.event_class_code              := G_SQ_EVENT_CLASS_CODE;
        lp_tax_src_params_rec.trx_level_type                := G_TRX_LEVEL_TYPE;
        lp_tax_src_params_rec.tax_call_type_code            := G_UPFRONT_TAX;
        lp_tax_src_params_rec.tax_reporting_flag            := l_reported_yn;
        lp_tax_src_params_rec.reported_yn                   := l_reported_yn;
        lp_tax_src_params_rec.trx_date                      := l_start_date;
        lp_tax_src_params_rec.trx_currency_code             := l_currency_code;
        lp_tax_src_params_rec.line_intended_use             := l_line_intended_use;
        lp_tax_src_params_rec.bill_to_cust_acct_id          := l_cust_acct_id;
        lp_tax_src_params_rec.org_id                        := l_org_id;
        lp_tax_src_params_rec.legal_entity_id               := l_legal_entity_id;
        lp_tax_src_params_rec.line_amt                      := 0;
        lp_tax_src_params_rec.try_id                        := l_sq_trx_type_id;

        lp_tax_src_params_rec.adjusted_doc_entity_code      := null;
        lp_tax_src_params_rec.adjusted_doc_event_class_code := null;
        lp_tax_src_params_rec.adjusted_doc_trx_id           := null;
        lp_tax_src_params_rec.adjusted_doc_trx_line_id      := null;
        lp_tax_src_params_rec.adjusted_doc_trx_level_type   := null;
        lp_tax_src_params_rec.adjusted_doc_number           := null;
            lp_tax_src_params_rec.adjusted_doc_date             := null;
        lp_tax_src_params_rec.tax_line_status_code          := G_ACTIVE_STATUS;
        lp_tax_src_params_rec.default_taxation_country      := l_taxation_country;

        lp_tax_src_params_rec.currency_conversion_type      := l_currency_conversion_type;
        lp_tax_src_params_rec.currency_conversion_rate      := l_currency_conversion_rate;
        lp_tax_src_params_rec.currency_conversion_date      := l_currency_conversion_date;
        -- Populate tax sources record -- end

        populate_tax_info(
                        p_api_version                  => p_api_version,
                        p_init_msg_list                => OKC_API.G_FALSE,
                        x_return_status                => x_return_status,
                        x_msg_count                    => x_msg_count,
                        x_msg_data                     => x_msg_data,
                        p_prch_opt_det                             => null,  -- purchase option is not captured on Sales Quote
                                p_fin_prod_id_det                          => l_sq_fin_prod_id,
                                p_int_disclosed_det                        => l_sq_int_disclosed,
                        p_title_trnsfr_code                        => null,
                        p_sale_lease_back_code             => null,
                        p_lease_purchased_code             => null,
                        p_equip_usage_code                         => null,
                        p_vendor_site_id                           => null,
                        p_age_of_equip                             => null,
                p_source_trx_name              => p_source_trx_name,
                p_cust_trx_type_id             => l_cust_trx_type_id,
                p_book_class_code              => l_deal_type,
                        p_tax_call_cnt                             => tax_call_cnt,
                        p_fma_id                                           => l_fma_id,
                        p_formula_name                             => l_formula_name,
                        p_minimum_accountable_unit         => l_minimum_accountable_unit,
                        p_precision                                        => l_precision,
                        p_sales_quote_id                           => p_source_trx_id,
                p_event_type_code              => G_SQ_CRE_EVT_TYPE_CODE,
                p_ledger_id                    => l_ledger_id,
                p_line_level_action            => G_CREATE_LINE_LEVEL_ACTION,
                p_tax_src_params_rec           => lp_tax_src_params_rec,
                p_quote_flag                   => 'Y',
                p_rounding_ship_to_party_id    => null,
                p_rounding_bill_to_party_id    => l_bill_to_party_id,
                p_line_amt_includes_tax_flag   => 'N',
                p_term_quote_type_code         => null,
                p_term_quote_reason_code       => null,
                px_tax_sources_tbl                         => lx_tax_sources_tbl,
                px_line_params_tbl             => lx_line_params_tbl );

        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;

                IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                  FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
                                'lx_tax_sources_tbl.count '||lx_tax_sources_tbl.count||' lx_line_params_tbl.count '||lx_line_params_tbl.count);
        END IF;
                -- quote level call end
                tax_call_cnt := tax_call_cnt + 1;
      END IF;

          -- this table will have one record for each asset
          -- check if payment does not exist for any of the assets
          FOR k IN l_sq_asset_level_det_tbl.FIRST .. l_sq_asset_level_det_tbl.LAST LOOP
            IF l_sq_asset_level_det_tbl(k).asset_pymnt_exist = 'N' THEN -- aset level payment does not exist

          IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
                          'tax_call_cnt '||tax_call_cnt||'asset_pymnt_exist = N ' );
              END IF;

          -- Populate tax sources record -- start
          lp_tax_src_params_rec.kle_id       := null;
          lp_tax_src_params_rec.asset_number := l_sq_asset_level_det_tbl(k).asset_number;
          lp_tax_src_params_rec.line_name    := l_sq_asset_level_det_tbl(k).asset_number;

          lp_tax_src_params_rec.ship_to_cust_acct_site_use_id   := l_sq_asset_level_det_tbl(k).ship_to_site_use_id;
          lp_tax_src_params_rec.ship_to_party_site_id           := l_ship_to_party_site_id;
          lp_tax_src_params_rec.ship_to_party_id                := l_ship_to_party_id;
          lp_tax_src_params_rec.ship_to_location_id             := l_ship_to_location_id;

          lp_tax_src_params_rec.bill_to_party_site_id         := l_bill_to_party_site_id;
          lp_tax_src_params_rec.bill_to_party_id              := l_bill_to_party_id;
          lp_tax_src_params_rec.bill_to_location_id           := l_bill_to_location_id;
          lp_tax_src_params_rec.bill_to_cust_acct_site_use_id := l_bill_to_siteuseid;

          lp_tax_src_params_rec.inventory_item_id             := l_sq_asset_level_det_tbl(k).inv_item_id;
          lp_tax_src_params_rec.sty_id                        := null;
          lp_tax_src_params_rec.khr_id                        := null;
          lp_tax_src_params_rec.trx_id                        := p_source_trx_id;
          lp_tax_src_params_rec.entity_code                   := G_SQ_ENTITY_CODE;
          lp_tax_src_params_rec.event_class_code              := G_SQ_EVENT_CLASS_CODE;
          lp_tax_src_params_rec.trx_level_type                := G_TRX_LEVEL_TYPE;
          lp_tax_src_params_rec.tax_call_type_code            := G_UPFRONT_TAX;
          lp_tax_src_params_rec.tax_reporting_flag            := l_reported_yn;
          lp_tax_src_params_rec.reported_yn                   := l_reported_yn;
          lp_tax_src_params_rec.trx_date                      := l_start_date;
          lp_tax_src_params_rec.trx_currency_code             := l_currency_code;
          lp_tax_src_params_rec.line_intended_use             := l_line_intended_use;
          lp_tax_src_params_rec.bill_to_cust_acct_id          := l_cust_acct_id;
          lp_tax_src_params_rec.org_id                        := l_org_id;
          lp_tax_src_params_rec.legal_entity_id               := l_legal_entity_id;
          lp_tax_src_params_rec.line_amt                      := 0;
          lp_tax_src_params_rec.try_id                        := l_sq_trx_type_id;

          lp_tax_src_params_rec.adjusted_doc_entity_code      := null;
          lp_tax_src_params_rec.adjusted_doc_event_class_code := null;
          lp_tax_src_params_rec.adjusted_doc_trx_id           := null;
          lp_tax_src_params_rec.adjusted_doc_trx_line_id      := null;
          lp_tax_src_params_rec.adjusted_doc_trx_level_type   := null;
          lp_tax_src_params_rec.adjusted_doc_number           := null;
          lp_tax_src_params_rec.adjusted_doc_date             := null;
          lp_tax_src_params_rec.tax_line_status_code          := G_ACTIVE_STATUS;
          lp_tax_src_params_rec.default_taxation_country      := l_taxation_country;

          lp_tax_src_params_rec.currency_conversion_type      := l_currency_conversion_type;
          lp_tax_src_params_rec.currency_conversion_rate      := l_currency_conversion_rate;
          lp_tax_src_params_rec.currency_conversion_date      := l_currency_conversion_date;
          -- Populate tax sources record -- end

              -- asset level call begin
          populate_tax_info(
                        p_api_version                  => p_api_version,
                        p_init_msg_list                => OKC_API.G_FALSE,
                        x_return_status                => x_return_status,
                        x_msg_count                    => x_msg_count,
                        x_msg_data                     => x_msg_data,
                        p_prch_opt_det                             => null,  -- purchase option is not captured on Sales Quote
                                p_fin_prod_id_det                          => l_sq_fin_prod_id,
                                p_int_disclosed_det                        => l_sq_int_disclosed,
                        p_title_trnsfr_code                        => l_sq_transfer_of_title,
                        p_sale_lease_back_code             => l_sq_sale_lease_back,
                        p_lease_purchased_code             => l_sq_purchase_of_lease,
                        p_equip_usage_code                         => l_sq_usage_of_equipment,
                        p_vendor_site_id                           => l_sq_asset_level_det_tbl(k).vendor_site_id,
                        p_age_of_equip                             => l_sq_age_of_equipment,
                p_source_trx_name              => p_source_trx_name,
                p_cust_trx_type_id             => l_cust_trx_type_id,
                p_book_class_code              => l_deal_type,
                        p_tax_call_cnt                             => tax_call_cnt,
                        p_fma_id                                           => l_fma_id,
                        p_formula_name                             => l_formula_name,
                        p_minimum_accountable_unit         => l_minimum_accountable_unit,
                        p_precision                                        => l_precision,
                        p_sales_quote_id                           => p_source_trx_id,
                p_event_type_code              => G_SQ_CRE_EVT_TYPE_CODE,
                p_ledger_id                    => l_ledger_id,
                p_line_level_action            => G_CREATE_LINE_LEVEL_ACTION,
                p_tax_src_params_rec           => lp_tax_src_params_rec,
                p_quote_flag                   => 'Y',
                p_rounding_ship_to_party_id    => null,
                p_rounding_bill_to_party_id    => l_bill_to_party_id,
                p_line_amt_includes_tax_flag   => 'N',
                p_term_quote_type_code         => null,
                p_term_quote_reason_code       => null,
                px_tax_sources_tbl                         => lx_tax_sources_tbl,
                px_line_params_tbl             => lx_line_params_tbl );

          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;
                  -- asset level call end

                  IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
                                                'lx_tax_sources_tbl.count '||lx_tax_sources_tbl.count||' lx_line_params_tbl.count '||lx_line_params_tbl.count);
                  END IF;

          tax_call_cnt := tax_call_cnt + 1;

             END IF;
           END LOOP;
         END IF;

     IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
           FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
                        'lx_tax_sources_tbl.COUNT '||lx_tax_sources_tbl.COUNT);
           FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
                        'lx_line_params_tbl.COUNT '||lx_line_params_tbl.COUNT);
        END IF;

    -- Insert into okl_tax_sources
        BEGIN
      IF lx_tax_sources_tbl.COUNT > 0 THEN
        FORALL indx in lx_tax_sources_tbl.FIRST..lx_tax_sources_tbl.LAST
          -- SAVE EXCEPTIONS
          INSERT INTO okl_tax_sources VALUES lx_tax_sources_tbl(indx);
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        IF SQL%BULK_EXCEPTIONS.COUNT > 0 THEN
                  FOR i IN 1..SQL%BULK_EXCEPTIONS.COUNT LOOP
                        OKL_API.set_message(     p_app_name      => 'OKL',
                                     p_msg_name      => 'OKL_TX_TRX_INS_ERR',
                                     p_token1        => 'TABLE_NAME',
                                     p_token1_value  => 'OKL_TAX_SOURCES',
                                     p_token2        => 'ERROR_CODE',
                                                                         p_token2_value  => SQLERRM(-SQL%BULK_EXCEPTIONS(i).ERROR_CODE),
                                                                         p_token3        => 'ITERATION',
                                                                         p_token3_value  => SQL%BULK_EXCEPTIONS(i).ERROR_INDEX);
                  END LOOP;
                  RAISE OKL_API.G_EXCEPTION_ERROR;
                END IF;
    END;

    ---- Insert into okl_tax_sources end -----
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                 FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
                        'Insert into okl_tax_sources ');
        END IF;

    IF lx_line_params_tbl.COUNT > 0 THEN
          IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
                               'Before Calling OKL_TAX_INTERFACE_PVT.calculate_tax  '||x_return_status);
          END IF;

      lp_hdr_params_rec.application_id           := G_OKL_APPLICATION_ID;
      lp_hdr_params_rec.trx_id                   := p_source_trx_id;
      lp_hdr_params_rec.internal_organization_id := l_org_id;
      lp_hdr_params_rec.entity_code              := G_SQ_ENTITY_CODE;
      lp_hdr_params_rec.event_class_code         := G_SQ_EVENT_CLASS_CODE;
      lp_hdr_params_rec.event_type_code          := G_SQ_CRE_EVT_TYPE_CODE;
      lp_hdr_params_rec.quote_flag               := 'Y';

      OKL_TAX_INTERFACE_PVT.calculate_tax(
                                    p_api_version       =>  p_api_version,
                                    p_init_msg_list     =>  p_init_msg_list,
                                    x_return_status     =>  x_return_status,
                                    x_msg_count         =>  x_msg_count,
                                    x_msg_data          =>  x_msg_data,
                                    p_hdr_params_rec    =>  lp_hdr_params_rec,
                                    p_line_params_tbl   =>  lx_line_params_tbl);

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
                                   'After tax engine call '||x_return_status);
          END IF;

          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
    END IF;

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
             'Calling "update_tax_sources_total" .. ');
    END IF;

    update_tax_sources_total(p_api_version    => p_api_version,
                             p_init_msg_list  => p_init_msg_list,
                             x_return_status  => x_return_status,
                             x_msg_count      => x_msg_count,
                             x_msg_data       => x_msg_data,
                             p_source_trx_id  => p_source_trx_id,
                             p_source_trx_name => p_source_trx_name  );

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
             'Return Status' || x_return_status);
    END IF;

    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
             'Calling "copy_tax_trx_data" .. ');
    END IF;

    copy_tax_trx_data ( p_api_version       => p_api_version,
                        p_init_msg_list     => p_init_msg_list,
                        x_return_status     => x_return_status,
                        x_msg_count         => x_msg_count,
                        x_msg_data          => x_msg_data,
                        p_trx_id            => p_source_trx_id,
                        p_entity_code           => G_SQ_ENTITY_CODE,
                        p_event_class_code  => G_SQ_EVENT_CLASS_CODE,
                        p_source_trx_name   => p_source_trx_name);


    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax.',
             'Return Status' || x_return_status);
    END IF;

    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
       FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax ','End(-)');
    END IF;

  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN
      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
      END IF;

      IF l_leasequotes_csr%ISOPEN THEN
        CLOSE l_leasequotes_csr;
      END IF;

      IF l_leaseopp_csr%ISOPEN THEN
        CLOSE l_leaseopp_csr;
      END IF;

      IF l_leaseapp_csr%ISOPEN THEN
        CLOSE l_leaseapp_csr;
      END IF;

      IF l_prevtaxsources_csr%ISOPEN THEN
        CLOSE l_prevtaxsources_csr;
      END IF;

      IF l_prevtaxtrxdet_csr%ISOPEN THEN
        CLOSE l_prevtaxtrxdet_csr;
      END IF;

      IF l_quoteassets_csr%ISOPEN THEN
        CLOSE l_quoteassets_csr;
      END IF;

      IF l_assetcomponent_csr%ISOPEN THEN
        CLOSE l_assetcomponent_csr;
      END IF;

      IF l_q_asset_cashflows_csr%ISOPEN THEN
        CLOSE l_q_asset_cashflows_csr;
      END IF;

      IF l_billtosite_csr%ISOPEN THEN
        CLOSE l_billtosite_csr;
      END IF;

      IF l_shiptosite_csr%ISOPEN THEN
        CLOSE l_shiptosite_csr;
      END IF;

      IF l_trxtypes_csr%ISOPEN THEN
        CLOSE l_trxtypes_csr;
      END IF;

      IF l_txbasisoverride_csr%ISOPEN THEN
        CLOSE l_txbasisoverride_csr;
      END IF;

      IF l_formulae_csr%ISOPEN THEN
        CLOSE l_formulae_csr;
      END IF;

      IF l_racusttrxtypes_csr%ISOPEN THEN
        CLOSE l_racusttrxtypes_csr;
      END IF;

      IF l_fndcurrency_csr%ISOPEN THEN
        CLOSE l_fndcurrency_csr;
      END IF;

      IF l_povendorsites_csr%ISOPEN THEN
        CLOSE l_povendorsites_csr;
      END IF;

      IF l_get_location_id%ISOPEN THEN
        CLOSE l_get_location_id;
      END IF;

      IF l_get_shiptositeid%ISOPEN THEN
        CLOSE l_get_shiptositeid;
      END IF;

      x_return_status := OKL_API.G_RET_STS_ERROR;

    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_UNEXPECTED_ERROR');
      END IF;

      IF l_leasequotes_csr%ISOPEN THEN
        CLOSE l_leasequotes_csr;
      END IF;

      IF l_leaseopp_csr%ISOPEN THEN
        CLOSE l_leaseopp_csr;
      END IF;

      IF l_leaseapp_csr%ISOPEN THEN
        CLOSE l_leaseapp_csr;
      END IF;

      IF l_prevtaxsources_csr%ISOPEN THEN
        CLOSE l_prevtaxsources_csr;
      END IF;

      IF l_prevtaxtrxdet_csr%ISOPEN THEN
        CLOSE l_prevtaxtrxdet_csr;
      END IF;

      IF l_quoteassets_csr%ISOPEN THEN
        CLOSE l_quoteassets_csr;
      END IF;

      IF l_assetcomponent_csr%ISOPEN THEN
        CLOSE l_assetcomponent_csr;
      END IF;

      IF l_q_asset_cashflows_csr%ISOPEN THEN
        CLOSE l_q_asset_cashflows_csr;
      END IF;

      IF l_billtosite_csr%ISOPEN THEN
        CLOSE l_billtosite_csr;
      END IF;

      IF l_shiptosite_csr%ISOPEN THEN
        CLOSE l_shiptosite_csr;
      END IF;

      IF l_trxtypes_csr%ISOPEN THEN
        CLOSE l_trxtypes_csr;
      END IF;

      IF l_txbasisoverride_csr%ISOPEN THEN
        CLOSE l_txbasisoverride_csr;
      END IF;

      IF l_formulae_csr%ISOPEN THEN
        CLOSE l_formulae_csr;
      END IF;

      IF l_racusttrxtypes_csr%ISOPEN THEN
        CLOSE l_racusttrxtypes_csr;
      END IF;

      IF l_fndcurrency_csr%ISOPEN THEN
        CLOSE l_fndcurrency_csr;
      END IF;

      IF l_povendorsites_csr%ISOPEN THEN
        CLOSE l_povendorsites_csr;
      END IF;

      IF l_get_location_id%ISOPEN THEN
        CLOSE l_get_location_id;
      END IF;

      IF l_get_shiptositeid%ISOPEN THEN
        CLOSE l_get_shiptositeid;
      END IF;

      x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;

    WHEN OTHERS THEN
      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.process_quoting_upfront_tax ',
                  'EXCEPTION :'||sqlerrm);
      END IF;

      IF l_leasequotes_csr%ISOPEN THEN
        CLOSE l_leasequotes_csr;
      END IF;

      IF l_leaseopp_csr%ISOPEN THEN
        CLOSE l_leaseopp_csr;
      END IF;

      IF l_leaseapp_csr%ISOPEN THEN
        CLOSE l_leaseapp_csr;
      END IF;

      IF l_prevtaxsources_csr%ISOPEN THEN
        CLOSE l_prevtaxsources_csr;
      END IF;

      IF l_prevtaxtrxdet_csr%ISOPEN THEN
        CLOSE l_prevtaxtrxdet_csr;
      END IF;

      IF l_quoteassets_csr%ISOPEN THEN
        CLOSE l_quoteassets_csr;
      END IF;

      IF l_assetcomponent_csr%ISOPEN THEN
        CLOSE l_assetcomponent_csr;
      END IF;

      IF l_q_asset_cashflows_csr%ISOPEN THEN
        CLOSE l_q_asset_cashflows_csr;
      END IF;

      IF l_billtosite_csr%ISOPEN THEN
        CLOSE l_billtosite_csr;
      END IF;

      IF l_shiptosite_csr%ISOPEN THEN
        CLOSE l_shiptosite_csr;
      END IF;

      IF l_trxtypes_csr%ISOPEN THEN
        CLOSE l_trxtypes_csr;
      END IF;

      IF l_txbasisoverride_csr%ISOPEN THEN
        CLOSE l_txbasisoverride_csr;
      END IF;

      IF l_formulae_csr%ISOPEN THEN
        CLOSE l_formulae_csr;
      END IF;

      IF l_racusttrxtypes_csr%ISOPEN THEN
        CLOSE l_racusttrxtypes_csr;
      END IF;

      IF l_fndcurrency_csr%ISOPEN THEN
        CLOSE l_fndcurrency_csr;
      END IF;

      IF l_povendorsites_csr%ISOPEN THEN
        CLOSE l_povendorsites_csr;
      END IF;

      IF l_get_location_id%ISOPEN THEN
        CLOSE l_get_location_id;
      END IF;

      IF l_get_shiptositeid%ISOPEN THEN
        CLOSE l_get_shiptositeid;
      END IF;

      x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
      -- unexpected error
      OKL_API.set_message(p_app_name      => g_app_name,
                          p_msg_name      => g_unexpected_error,
                          p_token1        => g_sqlcode_token,
                          p_token1_value  => sqlcode,
                          p_token2        => g_sqlerrm_token,
                          p_token2_value  => sqlerrm);
  END process_quoting_upfront_tax;

  /*========================================================================
   | PUBLIC PROCEDURE calculate_sales_tax
   |
   | DESCRIPTION
   |    This procedure is called by OLM tax events to calculate tax
   |
   | CALLED FROM          OLM Tax Events
   |
   |
   | CALLS PROCEDURES/FUNCTIONS
   |     process_tax_schedule_tax()
   |     process_quote_tax()
   |     process_asset_loc_tax()
   |     process_split_asset_tax()
   |     process_booking_upfront_tax()
   |     process_pre_rbk_upfront_tax()
   |     process_rebook_upfront_tax()
   |
   |
   | PARAMETERS
   |      p_source_trx_id     -- Source transaction ID
   |      p_source_trx_name   -- Source transaction Name
   |      p_source_table      -- Source table
   |      p_tax_call_type     -- Tax call type (applies to Booking, Rebook, Asset Location Change)
   |      p_serialized_asset  -- Serialized asset Y/N flag (applies to Asset Location Change)
   |      p_request_id        -- ID of Okl_Trx_Requests  (applies to Asset Location Change)
   |
   | KNOWN ISSUES
   |
   | NOTES
   |
   |
   | MODIFICATION HISTORY
   | Date          Author     Description of Changes
   | 08-APR-05    SECHAWLA      Created
   | 12-DEC-05    SECHAWLA      4690074  set a message if OU does not allow
   |                                     tax calculation
   | 23-MAR-10   SMADHAVA 9327076 Calculate Upfront tax only if prior upfront tax calculation done
   *=======================================================================*/
    PROCEDURE calculate_sales_tax(
      p_api_version                   IN  NUMBER,
      p_init_msg_list                 IN  VARCHAR2 DEFAULT OKC_API.G_FALSE,
      x_return_status                 OUT NOCOPY VARCHAR2,
      x_msg_count                     OUT NOCOPY NUMBER,
      x_msg_data                      OUT NOCOPY VARCHAR2,
      p_source_trx_id                 IN  NUMBER,
      p_source_trx_name               IN  VARCHAR2,
      p_source_table                  IN  VARCHAR2,
      p_tax_call_type                 IN  VARCHAR2 DEFAULT NULL,
      p_serialized_asset              IN  VARCHAR2 DEFAULT NULL,
      p_request_id                    IN  NUMBER   DEFAULT NULL,
      p_alc_final_call                IN  VARCHAR2 DEFAULT NULL)IS

      --------------- CS Tax Schedule ------------------
      --p_source_trx_id   ---> okl_trx_requests.id
      --p_source_trx_name     ---> 'Tax Schedule'
      --p_source_table        ---> 'OKL_TRX_REQUESTS'
      --------------------------------------------------

      --------------- Booking ------------------
      --p_source_trx_id   ---> okl_trx_contracts.id
      --p_source_trx_name     ---> 'Booking'
      --p_source_table        ---> 'OKL_TRX_CONTRACTS'
      --p_tax_call_type       ---> 'ESTIMATED'/'ACTUAL' call type
      --------------------------------------------------

      --------------- Rebook ------------------
      --p_source_trx_id   ---> okl_trx_contracts.id
      --p_source_trx_name     ---> 'Rebook'
      --p_source_table        ---> 'OKL_TRX_CONTRACTS'
      --p_tax_call_type       ---> 'ESTIMATED'/'ACTUAL' call type
      --------------------------------------------------

      -------------- Split Asset ------------------
      --p_source_trx_id   ---> okl_trx_assets.id
      --p_source_trx_name     ---> 'Split Asset'
      --p_source_table        ---> 'OKL_TRX_ASSETS'
      --------------------------------------------------

      -------------- Reverse ------------------
      --p_source_trx_id   ---> okl_trx_assets.id
      --p_source_trx_name     ---> 'Reverse'
      --p_source_table        ---> 'OKL_TRX_ASSETS'
      --------------------------------------------------

      ---- Termination/Repurchase Quote Creation -------
      --p_source_trx_id   ---> okl_trx_quotes_b.id
      --p_source_trx_name     ---> 'Estimated Billing'
      --p_source_table        ---> 'OKL_TRX_QUOTES_B'
      --------------------------------------------------

      /*-----------------------------------------------------------------------+
      | Cursor Declarations                                                   |
      +-----------------------------------------------------------------------*/
      -- Get the OU tax options
      CURSOR  l_systemparams_csr(cp_org_id  IN  NUMBER) IS
      SELECT  tax_upfront_yn, tax_invoice_yn
      FROM    OKL_SYSTEM_PARAMS_ALL
      WHERE   org_id = cp_org_id;

      CURSOR l_tax_schedule_csr(cp_trx_id IN NUMBER) IS
      SELECT rul.rule_information5
      FROM okc_rules_b rul,
           okc_rule_groups_b rgp,
           okl_trx_requests trx
      WHERE rgp.dnz_chr_id = trx.dnz_khr_id
      AND   rul.rgp_id = rgp.id
      AND   rgp.rgd_code = 'LAHDTX'
      AND   rul.rule_information_category = 'LASTPR'
      AND   trx.id = cp_trx_id
      AND   trx.request_type_code = 'TAX_SCHEDULES';

	  -- ER#9327076
      CURSOR get_ast_reloc_khr(p_trx_id okl_trx_assets.ID%TYPE) IS
        SELECT cle.dnz_chr_id
         FROM   okl_trx_assets trx,
                    okl_txl_itm_insts inst,
                    okc_k_lines_b cle
        WHERE  trx.tas_type = 'ALG'
             AND inst.tas_id = trx.ID
             AND cle.ID = inst.kle_id
			 AND trx.id = p_trx_id;

      CURSOR get_rbk_act_khr(p_trx_id okl_trx_contracts.ID%TYPE) IS
        SELECT chr.ID
         FROM   okl_trx_contracts trx,
                    okc_k_headers_b chr
        WHERE  chr.ID = trx.khr_id
             AND trx.ID = p_trx_id ;

      /*-----------------------------------------------------------------------+
      | Local Variable Declarations and initializations                       |
      +-----------------------------------------------------------------------*/
      l_api_version            CONSTANT NUMBER := 1;
      l_api_name               CONSTANT VARCHAR2(30) := 'calculate_sales_tax';
      l_return_status          VARCHAR2(1) := OKL_API.G_RET_STS_SUCCESS;

      l_ou_tax_upfront_yn         VARCHAR2(1);
      l_ou_tax_invoice_yn         VARCHAR2(1);
      l_k_tax_schedule_yn         VARCHAR2(1);

      l_source_table              VARCHAR2(30);

      l_tax_call_type             VARCHAR2(30);
      l_org_id                    NUMBER;
      l_quote_object_code         VARCHAR2(30);
      l_quote_object_id           NUMBER;
	  l_chr_id                    OKC_K_HEADERS_B.ID%TYPE; --ER# 9327076

    BEGIN

      IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.calculate_sales_tax','Begin(+)');
      END IF;

      --Print Input Variables
      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.calculate_sales_tax.',
                'p_init_msg_list :'||p_init_msg_list);
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.calculate_sales_tax.',
                'p_source_trx_id :'||to_char(p_source_trx_id));
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.calculate_sales_tax.',
                'p_source_trx_name :'||p_source_trx_name);
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.calculate_sales_tax.',
                'p_source_table :'||p_source_table);
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.calculate_sales_tax.',
              'p_tax_call_type :'||p_tax_call_type);
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.calculate_sales_tax.',
              'p_serialized_asset :'||p_serialized_asset);
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.calculate_sales_tax.',
              'p_request_id :'||p_request_id);
      END IF;

      --Check API version, initialize message list and create savepoint.
      l_return_status := OKL_API.START_ACTIVITY(l_api_name,
                                                G_PKG_NAME,
                                                p_init_msg_list,
                                                l_api_version,
                                                p_api_version,
                                                '_PVT',
                                                x_return_status);
      IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

      l_source_table := upper(p_source_table);
      l_org_id := mo_global.get_current_org_id;

      -- Get the OU Tax options
      OPEN  l_systemparams_csr(cp_org_id  => l_org_id);
      FETCH l_systemparams_csr INTO l_ou_tax_upfront_yn, l_ou_tax_invoice_yn;
      IF  l_systemparams_csr%NOTFOUND THEN
        -- Tax options are not setup for this operating unit.
        OKL_API.set_message(   p_app_name      => 'OKL',
                               p_msg_name      => 'OKL_TX_NO_TAX_SETUP');
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
      CLOSE l_systemparams_csr;

      IF p_source_trx_name = 'Tax Schedule' THEN

        OPEN  l_tax_schedule_csr(cp_trx_id  => p_source_trx_id);
        FETCH l_tax_schedule_csr INTO l_k_tax_schedule_yn ;
        CLOSE l_tax_schedule_csr;

        IF  l_k_tax_schedule_yn = 'Y' THEN -- OU allows Tax schedule type of call
          process_tax_schedule_tax(
                            p_api_version     =>   p_api_version,
                            p_init_msg_list   =>   OKL_API.G_FALSE,
                            x_return_status   =>   x_return_status,
                            x_msg_count       =>   x_msg_count,
                            x_msg_data        =>   x_msg_data,
                            p_source_trx_id   =>   p_source_trx_id,
                            p_source_trx_name =>   p_source_trx_name,
                            p_source_table    =>   l_source_table);

          IF x_return_status <> OKL_API.G_RET_STS_SUCCESS THEN
            OKL_API.set_message( p_app_name      => 'OKL',
                                 p_msg_name      => 'OKL_TX_INTERFACE_ERROR',
                                 p_token1        => 'TRX_TYPE',
                                 p_token1_value  => p_source_trx_name);

            IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
              RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
            ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
              RAISE OKL_API.G_EXCEPTION_ERROR;
            END IF;
          END IF;
        ELSE -- SECHAWLA 12-DEC-05 4690074 : added else section
          OKL_API.set_message(   p_app_name      => 'OKL',
                                 p_msg_name      => 'OKL_TAX_SCH_FLAG_NOT_SET');
        END IF;

      ELSIF p_source_trx_name = 'Estimated Billing' AND l_source_table = 'OKL_TRX_QUOTES_B' THEN -- AM Quote creation
        process_quote_tax(    p_api_version     =>   p_api_version,
                              p_init_msg_list   =>   OKL_API.G_FALSE,
                              x_return_status   =>   x_return_status,
                              x_msg_count       =>   x_msg_count,
                              x_msg_data        =>   x_msg_data,
                              p_source_trx_id   =>   p_source_trx_id,
                              p_source_trx_name =>   p_source_trx_name,
                              p_source_table    =>   l_source_table);

        IF x_return_status <> OKL_API.G_RET_STS_SUCCESS THEN
          OKL_API.set_message(   p_app_name      => 'OKL',
                                 p_msg_name      => 'OKL_TX_QUOTE_TAX_ERR');
        END IF;

        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;

      ELSIF (p_source_trx_name = 'Asset Relocation') THEN

    -- Commented for ER# 9327076 - Asset relocation upfront tax to be calculated only if
    -- prior upfront tax transactions exist. The tax decision will not be decided by l_ou_tax_upfront_yn
	-- anymore.
     --   IF  l_ou_tax_upfront_yn = 'Y' THEN -- OU allows upfront type of call
	 OPEN get_ast_reloc_khr(p_source_trx_id);
	   FETCH get_ast_reloc_khr INTO l_chr_id;
	 CLOSE get_ast_reloc_khr;

	   IF (OKL_LA_SALES_TAX_PVT.check_prior_upfront_tax(l_chr_id)) THEN

          IF p_tax_call_type IS NULL THEN
              OKC_API.set_message( p_app_name      => 'OKC',
                                   p_msg_name      => G_REQUIRED_VALUE,
                                   p_token1        => G_COL_NAME_TOKEN,
                                   p_token1_value  => 'Tax Call Type');
              RAISE OKL_API.G_EXCEPTION_ERROR;
          ELSE
            l_tax_call_type := upper(p_tax_call_type);
            IF l_tax_call_type NOT IN (G_ESTIMATED_CALL_TYPE, G_ACTUAL_CALL_TYPE) THEN
              OKC_API.set_message( p_app_name      => 'OKC',
                                   p_msg_name      => G_INVALID_VALUE,
                                   p_token1        => G_COL_NAME_TOKEN,
                                   p_token1_value  => 'Tax Call Type');
              RAISE OKL_API.G_EXCEPTION_ERROR;
            END IF;
          END IF;

          process_asset_loc_tax(p_api_version       =>   p_api_version,
                                p_init_msg_list     =>   OKL_API.G_FALSE,
                                x_return_status     =>   x_return_status,
                                x_msg_count         =>   x_msg_count,
                                x_msg_data          =>   x_msg_data,
                                p_source_trx_id     =>   p_source_trx_id,
                                p_source_trx_name   =>   p_source_trx_name,
                                p_source_table      =>   l_source_table,
                                p_tax_call_type     =>   p_tax_call_type,
                                p_serialized_asset  =>   p_serialized_asset,
                                p_request_id        =>   p_request_id,
                                p_alc_final_call    =>   p_alc_final_call);

          IF x_return_status <> OKL_API.G_RET_STS_SUCCESS THEN
            OKL_API.set_message( p_app_name      => 'OKL',
                                 p_msg_name      => 'OKL_TX_INTERFACE_ERROR',
                                 p_token1        => 'TRX_TYPE',
                                 p_token1_value  => p_source_trx_name);

            IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
              RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
            ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
              RAISE OKL_API.G_EXCEPTION_ERROR;
            END IF;
          END IF;

		-- ER# 9327076
        -- ELSE -- SECHAWLA 12-DEC-05 4690074 : added else section
        --  OKL_API.set_message(   p_app_name      => 'OKL',
        --                         p_msg_name      => 'OKL_TX_OU_NO_TAX',
        --                         p_token1        => 'TAX_CALL_TYPE',
        --                        p_token1_value  => 'Upfront Tax');
        END IF;
      ELSIF p_source_trx_name = 'Split Asset' THEN
        process_split_asset_tax(p_api_version     =>   p_api_version,
                                p_init_msg_list   =>   OKL_API.G_FALSE,
                                x_return_status   =>   x_return_status,
                                x_msg_count       =>   x_msg_count,
                                x_msg_data        =>   x_msg_data,
                                p_source_trx_id   =>   p_source_trx_id,
                                p_source_trx_name =>   p_source_trx_name,
                                p_source_table    =>   l_source_table);

        IF x_return_status <> OKL_API.G_RET_STS_SUCCESS THEN
          OKL_API.set_message(   p_app_name      => 'OKL',
                                 p_msg_name      => 'OKL_TX_INTERFACE_ERROR',
                                 p_token1        => 'TRX_TYPE',
                                 p_token1_value  => p_source_trx_name);

          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;
        END IF;

      ELSIF ( p_source_trx_name = 'Booking') THEN
        IF l_ou_tax_upfront_yn = 'Y' THEN -- OU allows upfront type of call
          IF p_tax_call_type IS NULL THEN
            OKC_API.set_message( p_app_name      => 'OKC',
                                 p_msg_name      => G_REQUIRED_VALUE,
                                 p_token1        => G_COL_NAME_TOKEN,
                                 p_token1_value  => 'Tax Call Type');
            RAISE OKL_API.G_EXCEPTION_ERROR;
          ELSE
            l_tax_call_type := upper(p_tax_call_type);
            IF l_tax_call_type NOT IN (G_ESTIMATED_CALL_TYPE, G_ACTUAL_CALL_TYPE) THEN
              OKC_API.set_message( p_app_name      => 'OKC',
                                   p_msg_name      => G_INVALID_VALUE,
                                   p_token1        => G_COL_NAME_TOKEN,
                                   p_token1_value  => 'Tax Call Type');
              RAISE OKL_API.G_EXCEPTION_ERROR;
            END IF;
          END IF;

          process_booking_upfront_tax(
                            p_api_version     =>   p_api_version,
                            p_init_msg_list   =>   OKL_API.G_FALSE,
                            x_return_status   =>   x_return_status,
                            x_msg_count       =>   x_msg_count,
                            x_msg_data        =>   x_msg_data,
                            p_source_trx_id   =>   p_source_trx_id,
                            p_source_trx_name =>   p_source_trx_name,
                            p_source_table    =>   l_source_table,
                            p_tax_call_type   =>   p_tax_call_type);

          IF x_return_status <> OKL_API.G_RET_STS_SUCCESS THEN
            OKL_API.set_message(p_app_name      => 'OKL',
                                p_msg_name      => 'OKL_TX_INTERFACE_ERROR',
                                p_token1        => 'TRX_TYPE',
                                p_token1_value  => p_source_trx_name);

            IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
              RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
            ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
              RAISE OKL_API.G_EXCEPTION_ERROR;
            END IF;
          END IF;

        ELSE -- SECHAWLA 12-DEC-05 4690074 : added else section
          OKL_API.set_message(   p_app_name      => 'OKL',
                                 p_msg_name      => 'OKL_TX_OU_NO_TAX',
                                 p_token1        => 'TAX_CALL_TYPE',
                                 p_token1_value  => 'Upfront Tax');
        END IF;
        -- Authoring will create a CS request during Booking (no tax schedule call during pre-booking) for Tax Schedule
        -- and then make the Tax Schedule call directly using that trx

      ELSIF  p_source_trx_name = 'Rebook' AND p_tax_call_type = G_ESTIMATED_CALL_TYPE THEN
        -- Commented for ER# 9327076 - Pre-Rebook upfront tax to be calculated only if
        -- prior upfront tax transactions exist. The tax decision will not be decided by l_ou_tax_upfront_yn
	    -- anymore.
        --IF  l_ou_tax_upfront_yn = 'Y' THEN -- OU allows upfront type of call
		OPEN get_rbk_act_khr(p_source_trx_id);
		  FETCH get_rbk_act_khr INTO l_chr_id;
		CLOSE get_rbk_act_khr;

	   IF (OKL_LA_SALES_TAX_PVT.check_prior_upfront_tax(l_chr_id)) THEN
          process_pre_rbk_upfront_tax(
                            p_api_version     =>   p_api_version,
                            p_init_msg_list   =>   OKL_API.G_FALSE,
                            x_return_status   =>   x_return_status,
                            x_msg_count       =>   x_msg_count,
                            x_msg_data        =>   x_msg_data,
                            p_source_trx_id   =>   p_source_trx_id,
                            p_source_trx_name =>   p_source_trx_name,
                            p_source_table    =>   l_source_table,
                            p_tax_call_type   =>   p_tax_call_type);

          IF x_return_status <> OKL_API.G_RET_STS_SUCCESS THEN
            OKL_API.set_message( p_app_name      => 'OKL',
                                 p_msg_name      => 'OKL_TX_INTERFACE_ERROR',
                                 p_token1        => 'TRX_TYPE',
                                 p_token1_value  => p_source_trx_name);

            IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
              RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
            ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
              RAISE OKL_API.G_EXCEPTION_ERROR;
            END IF;
          END IF;
        --ELSE -- SECHAWLA 12-DEC-05 4690074 : added else section
        --  OKL_API.set_message(   p_app_name      => 'OKL',
        --                         p_msg_name      => 'OKL_TX_OU_NO_TAX',
        --                        p_token1        => 'TAX_CALL_TYPE',
        --                         p_token1_value  => 'Upfront Tax');
        END IF;

      ELSIF  p_source_trx_name = 'Rebook' AND p_tax_call_type = G_ACTUAL_CALL_TYPE THEN
        -- Commented for ER# 9327076 - Rebook activation upfront tax to be calculated only if
        -- prior upfront tax transactions exist. The tax decision will not be decided by l_ou_tax_upfront_yn
	    -- anymore.
        --IF  l_ou_tax_upfront_yn = 'Y' THEN -- OU allows upfront type of call
		OPEN get_rbk_act_khr(p_source_trx_id);
		  FETCH get_rbk_act_khr INTO l_chr_id;
		CLOSE get_rbk_act_khr;

	   IF (OKL_LA_SALES_TAX_PVT.check_prior_upfront_tax(l_chr_id)) THEN
          process_rebook_upfront_tax(
                            p_api_version       =>   p_api_version,
                            p_init_msg_list     =>   OKL_API.G_FALSE,
                            x_return_status     =>   x_return_status,
                            x_msg_count         =>   x_msg_count,
                            x_msg_data          =>   x_msg_data,
                            p_source_trx_id     =>   p_source_trx_id,
                            p_source_trx_name   =>   p_source_trx_name,
                            p_source_table      =>   l_source_table);

          IF x_return_status <> OKL_API.G_RET_STS_SUCCESS THEN
            OKL_API.set_message( p_app_name      => 'OKL',
                                 p_msg_name      => 'OKL_TX_INTERFACE_ERROR',
                                 p_token1        => 'TRX_TYPE',
                                 p_token1_value  => p_source_trx_name);

            IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
              RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
            ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
              RAISE OKL_API.G_EXCEPTION_ERROR;
            END IF;
          END IF;

        --ELSE -- SECHAWLA 12-DEC-05 4690074 : added else section
        --  OKL_API.set_message(   p_app_name      => 'OKL',
        --                         p_msg_name      => 'OKL_TX_OU_NO_TAX',
        --                         p_token1        => 'TAX_CALL_TYPE',
        --                         p_token1_value  => 'Upfront Tax');
        END IF;

      ELSIF p_source_trx_name = 'Reverse' THEN
      -- No need to check "tax_upfront_yn" flag in case of contract reversal
        process_contract_reversal_tax(
                            p_api_version     =>   p_api_version,
                            p_init_msg_list   =>   OKL_API.G_FALSE,
                            x_return_status   =>   x_return_status,
                            x_msg_count       =>   x_msg_count,
                            x_msg_data        =>   x_msg_data,
                            p_source_trx_id   =>   p_source_trx_id,
                            p_source_trx_name =>   p_source_trx_name,
                            p_source_table    =>   l_source_table);

        IF x_return_status <> OKL_API.G_RET_STS_SUCCESS THEN
          OKL_API.set_message(   p_app_name      => 'OKL',
                                 p_msg_name      => 'OKL_TX_INTERFACE_ERROR',
                                 p_token1        => 'TRX_TYPE',
                                 p_token1_value  => p_source_trx_name);

          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;
        END IF;

      ELSIF  p_source_trx_name = 'Sales Quote'  THEN
        IF  l_ou_tax_upfront_yn = 'Y' THEN -- OU allows upfront type of call
          process_quoting_upfront_tax(
                            p_api_version     =>   p_api_version,
                            p_init_msg_list   =>   OKL_API.G_FALSE,
                            x_return_status   =>   x_return_status,
                            x_msg_count       =>   x_msg_count,
                            x_msg_data        =>   x_msg_data,
                            p_source_trx_id   =>   p_source_trx_id,
                            p_source_trx_name =>   p_source_trx_name,
                            p_source_table    =>   l_source_table);

          IF x_return_status <> OKL_API.G_RET_STS_SUCCESS THEN
            OKL_API.set_message( p_app_name      => 'OKL',
                                 p_msg_name      => 'OKL_TX_INTERFACE_ERROR',
                                 p_token1        => 'TRX_TYPE',
                                 p_token1_value  => p_source_trx_name);

            IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
              RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
            ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
              RAISE OKL_API.G_EXCEPTION_ERROR;
            END IF;
          END IF;
        ELSE -- SECHAWLA 12-DEC-05 4690074 : added else section
          OKL_API.set_message(   p_app_name      => 'OKL',
                                 p_msg_name      => 'OKL_TX_OU_NO_TAX',
                                 p_token1        => 'TAX_CALL_TYPE',
                                 p_token1_value  => 'Upfront Tax');
        END IF;

      ELSE
        OKC_API.set_message( p_app_name      => 'OKC',
                             p_msg_name      => G_INVALID_VALUE,
                             p_token1        => G_COL_NAME_TOKEN,
                             p_token1_value  => 'Transaction Type');
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

      x_return_status := l_return_status; -- added for 12.0 since the above code that sets
                                         -- x_return_status is commented
      IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.calculate_sales_tax ','End(-)');
      END IF;

      -- End the transaction
      OKL_API.END_ACTIVITY(x_msg_count, x_msg_data);

    EXCEPTION
      WHEN OKL_API.G_EXCEPTION_ERROR THEN

        IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.calculate_sales_tax ',
                    'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
        END IF;

        IF l_systemparams_csr%ISOPEN THEN
          CLOSE l_systemparams_csr;
        END IF;

        IF l_tax_schedule_csr%ISOPEN THEN
          CLOSE l_tax_schedule_csr;
        END IF;

        x_return_status := OKL_API.HANDLE_EXCEPTIONS
        (
          l_api_name,
          G_PKG_NAME,
          'OKL_API.G_RET_STS_ERROR',
          x_msg_count,
          x_msg_data,
          '_PVT'
        );
      WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
        IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.calculate_sales_tax ',
                    'EXCEPTION :'||'OKL_API.G_EXCEPTION_UNEXPECTED_ERROR');
        END IF;

        IF l_systemparams_csr%ISOPEN THEN
          CLOSE l_systemparams_csr;
        END IF;

        IF l_tax_schedule_csr%ISOPEN THEN
          CLOSE l_tax_schedule_csr;
        END IF;

        x_return_status :=OKL_API.HANDLE_EXCEPTIONS
        (
          l_api_name,
          G_PKG_NAME,
          'OKL_API.G_RET_STS_UNEXP_ERROR',
          x_msg_count,
          x_msg_data,
          '_PVT'
        );
      WHEN OTHERS THEN

        IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.calculate_sales_tax ',
                    'EXCEPTION :'||sqlerrm);
        END IF;

        IF l_systemparams_csr%ISOPEN THEN
          CLOSE l_systemparams_csr;
        END IF;

        IF l_tax_schedule_csr%ISOPEN THEN
          CLOSE l_tax_schedule_csr;
        END IF;

        x_return_status :=OKL_API.HANDLE_EXCEPTIONS
        (
          l_api_name,
          G_PKG_NAME,
          'OTHERS',
          x_msg_count,
          x_msg_data,
          '_PVT'
        );

        x_return_status := l_return_status; -- added for 12.0 since the above code that sets
        IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.calculate_sales_tax ','End(-)');
        END IF;

        -- end the transaction
        OKL_API.END_ACTIVITY(x_msg_count, x_msg_data);

    END calculate_sales_tax;

/*========================================================================
 | PUBLIC PROCEDURE set_tax_security_context
 |
 | DESCRIPTION
 |    This procedure is called by update tax common components for setting the
 |    tax security context before invoking Tax Determinant Lov's
 |
 | CALLED FROM                                  Tax Common components
 |
 |
 | CALLS PROCEDURES/FUNCTIONS
 |     OKL_TAX_INTERFACE_PVT.set_tax_security_context
 |
 |
 | PARAMETERS
 |      p_internal_org_id               -- Operatng Unit Identifier
 |      p_legal_entity_id       -- Legal Entity Identifier
 |      p_transaction_date      -- Transaction Date
 |
 | KNOWN ISSUES
 |
 | NOTES
 |
 |
 | MODIFICATION HISTORY
 | Date          Author     Description of Changes
 | 24-JAN-07    RRAVIKIR      Created
 *=======================================================================*/
  PROCEDURE set_tax_security_context(
    p_api_version                       IN  NUMBER,
    p_init_msg_list                     IN  VARCHAR2 DEFAULT OKL_API.G_FALSE,
    x_return_status                     OUT NOCOPY VARCHAR2,
    x_msg_count                         OUT NOCOPY NUMBER,
    x_msg_data                          OUT NOCOPY VARCHAR2,
    p_internal_org_id                           IN  NUMBER,
    p_legal_entity_id               IN  NUMBER,
    p_transaction_date              IN  DATE) IS

    l_api_version            CONSTANT NUMBER := 1;
    l_api_name               CONSTANT VARCHAR2(30) := 'set_tax_security_context';
    l_return_status          VARCHAR2(1) := OKL_API.G_RET_STS_SUCCESS;

    x_effective_date         DATE;

  BEGIN

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.set_tax_security_context','Begin(+)');
    END IF;

    --Print Input Variables
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.set_tax_security_context.',
              'p_init_msg_list :'||p_init_msg_list);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.set_tax_security_context.',
              'p_internal_org_id :'||to_char(p_internal_org_id));
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.set_tax_security_context.',
              'p_legal_entity_id :'||p_legal_entity_id);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.set_tax_security_context.',
              'p_transaction_date :'||p_transaction_date);
    END IF;

    --Check API version, initialize message list and create savepoint.
    l_return_status := OKL_API.START_ACTIVITY(l_api_name,
                                              G_PKG_NAME,
                                              p_init_msg_list,
                                              l_api_version,
                                              p_api_version,
                                              '_PVT',
                                              x_return_status);

    IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    -- Required Values
    IF p_internal_org_id IS NULL THEN
       OKL_API.set_message( p_msg_name      => G_REQUIRED_VALUE,
                            p_token1        => G_COL_NAME_TOKEN,
                            p_token1_value  => 'INTERNAL_ORG_ID');
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    IF p_legal_entity_id IS NULL THEN
       OKL_API.set_message( p_msg_name      => G_REQUIRED_VALUE,
                            p_token1        => G_COL_NAME_TOKEN,
                            p_token1_value  => 'LEGAL_ENTITY_ID');
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    IF p_transaction_date IS NULL THEN
       OKL_API.set_message( p_msg_name      => G_REQUIRED_VALUE,
                            p_token1        => G_COL_NAME_TOKEN,
                            p_token1_value  => 'TRANSACTION_DATE');
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.set_tax_security_context.',
              'Calling OKL_TAX_INTERFACE_PVT.set_tax_security_context');
    END IF;

    -- Set Tax Security Context
    OKL_TAX_INTERFACE_PVT.set_tax_security_context(p_api_version           => p_api_version,
                                                   p_init_msg_list         => p_init_msg_list,
                                                   x_return_status         => l_return_status,
                                                   x_msg_count             => x_msg_count,
                                                   x_msg_data              => x_msg_data,
                                                   p_internal_org_id       => p_internal_org_id,
                                                   p_legal_entity_id       => p_legal_entity_id,
                                                   p_transaction_date      => p_transaction_date);

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.set_tax_security_context.',
              'Return Status' || l_return_status);
    END IF;

    IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    x_return_status := l_return_status;

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.set_tax_security_context ','End(-)');
    END IF;

    -- end the transaction
    OKL_API.END_ACTIVITY(x_msg_count, x_msg_data);


   EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN

      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.set_tax_security_context ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
      END IF;

      x_return_status := OKL_API.HANDLE_EXCEPTIONS
      (
        l_api_name,
        G_PKG_NAME,
        'OKL_API.G_RET_STS_ERROR',
        x_msg_count,
        x_msg_data,
        '_PVT'
      );
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.set_tax_security_context ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_UNEXPECTED_ERROR');
      END IF;

      x_return_status :=OKL_API.HANDLE_EXCEPTIONS
      (
        l_api_name,
        G_PKG_NAME,
        'OKL_API.G_RET_STS_UNEXP_ERROR',
        x_msg_count,
        x_msg_data,
        '_PVT'
      );
    WHEN OTHERS THEN

      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.set_tax_security_context ',
                  'EXCEPTION :'||sqlerrm);
      END IF;

      x_return_status :=OKL_API.HANDLE_EXCEPTIONS
      (
        l_api_name,
        G_PKG_NAME,
        'OTHERS',
        x_msg_count,
        x_msg_data,
        '_PVT'
      );
  END set_tax_security_context;

/*========================================================================
 | PUBLIC PROCEDURE process_tax_determ_override
 |
 | DESCRIPTION
 |    This procedure is called by 'BOOKING', 'REBOOK' and 'ASSET LOCATION
 |    CHANGE' transactions to override tax determinants
 |
 | CALLED FROM                                  OLM Tax Events
 |
 |
 | CALLS PROCEDURES/FUNCTIONS
 |
 |
 | PARAMETERS
 |      p_trx_id                     -- Transaction Identifier
 |      p_tax_sources_id                 -- Tax Sources table unique Identifier
 |      p_trx_business_category      -- Transaction Business Category (Tax Determinant)
 |      p_product_category           -- Product Category (Tax Determinant)
 |      p_user_defined_fisc_class    -- User defined fiscal class (Tax Determinant)
 |      p_line_intended_use          -- Line intended use (Tax Determinant)
 |
 | KNOWN ISSUES
 |
 | NOTES
 |
 |
 | MODIFICATION HISTORY
 | Date          Author     Description of Changes
 | 01-FEB-07    RRAVIKIR      Created
 | 05-Jun-08    SECHAWLA      6844953  : Added nvl to the IF condition that
 |                                       checks whether determinants need
 |                                       to be modified
 |
 *=======================================================================*/
  PROCEDURE process_tax_determ_override(
    p_api_version                       IN  NUMBER,
    p_init_msg_list                     IN  VARCHAR2 DEFAULT OKL_API.G_FALSE,
    x_return_status                     OUT NOCOPY VARCHAR2,
    x_msg_count                         OUT NOCOPY NUMBER,
    x_msg_data                          OUT NOCOPY VARCHAR2,
    p_trx_id                        IN  NUMBER,
    p_tax_sources_id                IN  NUMBER,
    p_trx_business_category         IN  VARCHAR2,
    p_product_category                          IN  VARCHAR2,
    p_user_defined_fisc_class       IN  VARCHAR2,
    p_line_intended_use             IN  VARCHAR2,
    p_request_id                    IN  NUMBER DEFAULT NULL,
    p_asset_id                      IN  NUMBER DEFAULT NULL) IS

    -- Local variables
    l_api_version                   CONSTANT NUMBER := 1;
    l_api_name                      CONSTANT VARCHAR2(30) := 'process_tax_determ';
    l_return_status                 VARCHAR2(1) := OKL_API.G_RET_STS_SUCCESS;
    lx_doc_level_recalc_flag        VARCHAR2(1);
    l_total_tax_amount              NUMBER;

    -- Local data structure
    l_txsv_rec                    txsv_rec_type;
    lx_txsv_rec                   txsv_rec_type;

    l_transaction_rec             transaction_rec_type;

    -- Cursors
    CURSOR l_taxsources_csr(cp_tax_sources_id IN NUMBER) IS
    SELECT org_id, trx_line_id, application_id, event_class_code,
           entity_code, trx_level_type, khr_id, product_category, user_defined_fisc_class,
           trx_business_category, line_intended_use, alc_serialized_yn
    FROM  okl_tax_sources
    WHERE id = cp_tax_sources_id;

    CURSOR l_zxlinestotaltax_csr(cp_trx_id  IN NUMBER, cp_trx_line_id   IN NUMBER,
                                 cp_application_id  IN NUMBER, cp_event_class_code IN VARCHAR2,
                                 cp_entity_code  IN VARCHAR2, cp_trx_level_type  IN VARCHAR2) IS
    SELECT  SUM(zx_lines.tax_amt) total_tax
    FROM    zx_lines
    WHERE   trx_id = cp_trx_id
    AND     trx_line_id = cp_trx_line_id
    AND     application_id = cp_application_id
    AND     event_class_code = cp_event_class_code
    AND     entity_code = cp_entity_code
    AND     trx_level_type = cp_trx_level_type
    AND     nvl(cancel_flag, 'N') <> 'Y';

    -- Cursor Records
    l_taxsources_rec         l_taxsources_csr%ROWTYPE;

    l_values_changed         BOOLEAN := FALSE;
    l_alc_event              BOOLEAN := FALSE;

  BEGIN
    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.process_tax_determ_override','Begin(+)');
    END IF;

    --Print Input Variables
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_determ_override.',
              'p_init_msg_list :'||p_init_msg_list);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_determ_override.',
              'p_trx_id :'||p_trx_id);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_determ_override.',
              'p_tax_sources_id :'||p_tax_sources_id);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_determ_override.',
              'p_trx_business_category :'||p_trx_business_category);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_determ_override.',
              'p_product_category :'||p_product_category);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_determ_override.',
              'p_user_defined_fisc_class :'||p_user_defined_fisc_class);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_determ_override.',
              'p_line_intended_use :'||p_line_intended_use);
    END IF;

    --Check API version, initialize message list and create savepoint.
    l_return_status := OKL_API.START_ACTIVITY(l_api_name,
                                              G_PKG_NAME,
                                              p_init_msg_list,
                                              l_api_version,
                                              p_api_version,
                                              '_PVT',
                                              x_return_status);

    IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    -- Required Values
    IF p_tax_sources_id IS NULL THEN
       OKL_API.set_message( p_msg_name      => G_REQUIRED_VALUE,
                            p_token1        => G_COL_NAME_TOKEN,
                            p_token1_value  => 'TAX_SOURCES_ID');
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    IF p_trx_business_category IS NULL THEN
       OKL_API.set_message( p_msg_name      => G_REQUIRED_VALUE,
                            p_token1        => G_COL_NAME_TOKEN,
                            p_token1_value  => 'TRX_BUSINESS_CATEGORY');
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    IF p_trx_id IS NULL THEN
       OKL_API.set_message( p_msg_name      => G_REQUIRED_VALUE,
                            p_token1        => G_COL_NAME_TOKEN,
                            p_token1_value  => 'TRX_ID');
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    -- End required values

    -- Fetch Tax Sources details
    OPEN l_taxsources_csr(cp_tax_sources_id  =>  p_tax_sources_id);
    FETCH l_taxsources_csr INTO l_taxsources_rec;
    CLOSE l_taxsources_csr;

    -- Check if the tax determinant values are changed
    -- SECHAWLA 05-Jun-08 6844953 : Added nvl
    IF (nvl(l_taxsources_rec.trx_business_category,'XYZ') <> nvl(p_trx_business_category,'XYZ') OR
        nvl(l_taxsources_rec.product_category,'XYZ') <> nvl(p_product_category,'XYZ') OR
        nvl(l_taxsources_rec.user_defined_fisc_class,'XYZ') <> nvl(p_user_defined_fisc_class,'XYZ') OR
        nvl(l_taxsources_rec.line_intended_use,'XYZ') <> nvl(p_line_intended_use,'XYZ')) THEN
      l_values_changed := TRUE;
    END IF;

    IF (l_values_changed) THEN
      -- Populate Tax Sources data structure and update tax determinants
      l_txsv_rec.id := p_tax_sources_id;
      l_txsv_rec.trx_business_category := p_trx_business_category;
      l_txsv_rec.product_category := p_product_category;
      l_txsv_rec.user_defined_fisc_class := p_user_defined_fisc_class;
      l_txsv_rec.line_intended_use := p_line_intended_use;

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_determ_override.',
              'Calling okl_tax_sources_pub.update_tax_sources for Updating Tax determinants');
      END IF;

      okl_tax_sources_pub.update_tax_sources(p_api_version     => p_api_version
                                            ,p_init_msg_list   => p_init_msg_list
                                            ,x_return_status   => l_return_status
                                            ,x_msg_count       => x_msg_count
                                            ,x_msg_data        => x_msg_data
                                            ,p_txsv_rec        => l_txsv_rec
                                            ,x_txsv_rec        => lx_txsv_rec);

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_determ_override.',
              'Return Status' || l_return_status);
      END IF;

      IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
      -- End tax determinants update

      -- Recalculate Tax based on modified determinants
      -- Populate transaction record
      l_transaction_rec.trx_id := p_trx_id;
      l_transaction_rec.application_id           := l_taxsources_rec.application_id;
      l_transaction_rec.internal_organization_id := l_taxsources_rec.org_id;
      l_transaction_rec.entity_code              := l_taxsources_rec.entity_code ;
      l_transaction_rec.event_class_code         := l_taxsources_rec.event_class_code ;

      IF l_taxsources_rec.event_class_code = 'BOOKING' THEN
        l_transaction_rec.event_type_code       := G_BOOK_UPD_EVENT_CODE;
      ELSIF l_taxsources_rec.event_class_code = 'ASSET_RELOCATION' THEN
        l_transaction_rec.event_type_code       := G_ALC_UPD_EVENT_CODE;
        l_alc_event := TRUE;
          END IF;

      -- Recalculate tax with new determinants
      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_determ_override.',
              'Calling OKL_TAX_INTERFACE_PVT.process_tax_determ_override');
      END IF;

      OKL_TAX_INTERFACE_PVT.process_tax_determ_override(p_api_version             => p_api_version,
                                                        p_init_msg_list           => p_init_msg_list,
                                                        x_return_status           => l_return_status,
                                                        x_msg_count               => x_msg_count,
                                                        x_msg_data                => x_msg_data,
                                                        p_trx_id                  => p_trx_id,
                                                        p_tax_sources_id          => p_tax_sources_id,
                                                        p_trx_business_category   => p_trx_business_category,
                                                        p_product_category                => p_product_category,
                                                        p_user_defined_fisc_class => p_user_defined_fisc_class,
                                                        p_line_intended_use       => p_line_intended_use,
                                                        p_transaction_rec         => l_transaction_rec,
                                                        x_doc_level_recalc_flag   => lx_doc_level_recalc_flag);

      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_determ_override.',
              'Return Status' || l_return_status);
      END IF;

      IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

      -- Action based on return status
      IF (lx_doc_level_recalc_flag = 'Y') THEN
        -- Recalculation of tax for this particular taxable line has changed the tax
        -- for other taxable lines as well, so update the total_tax column for all
        -- the transaction lines including the one for which tax call was made

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_determ_override.',
            'Calling "update_tax_sources_total" for updating Total Tax for all Lines in Tax Sources');
        END IF;

        IF (l_alc_event) THEN
          update_tax_sources_total(p_api_version    => p_api_version,
                                   p_init_msg_list  => p_init_msg_list,
                                   x_return_status  => l_return_status,
                                   x_msg_count      => x_msg_count,
                                   x_msg_data       => x_msg_data,
                                   p_source_trx_id  => p_trx_id,
                                   p_source_trx_name => 'Asset Relocation');

          IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
          ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;

        ELSE
          update_tax_sources_total(p_api_version    => p_api_version,
                                   p_init_msg_list  => p_init_msg_list,
                                   x_return_status  => l_return_status,
                                   x_msg_count      => x_msg_count,
                                   x_msg_data       => x_msg_data,
                                   p_source_trx_id  => p_trx_id);
          IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
          ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;

        END IF;

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_determ_override.',
            'Return Status' || l_return_status);
        END IF;

        IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;

      ELSIF (lx_doc_level_recalc_flag = 'N') THEN

        -- Recalculation of tax for this particular taxable line has not changed the
        -- tax for other taxable lines, so update the total_tax column for this
        -- transaction line only
        OPEN l_zxlinestotaltax_csr(cp_trx_id           => p_trx_id,
                                   cp_trx_line_id      => l_taxsources_rec.trx_line_id,
                                   cp_application_id   => l_taxsources_rec.application_id,
                                   cp_event_class_code => l_taxsources_rec.event_class_code,
                                   cp_entity_code      => l_taxsources_rec.entity_code,
                                   cp_trx_level_type   => l_taxsources_rec.trx_level_type);
        FETCH l_zxlinestotaltax_csr INTO l_total_tax_amount;
        CLOSE l_zxlinestotaltax_csr;

        -- Populate Tax Sources data structure and update total tax
        l_txsv_rec.id := p_tax_sources_id;
        l_txsv_rec.total_tax := l_total_tax_amount;

        IF (l_alc_event) THEN
          l_txsv_rec.alc_serialized_total_tax := l_total_tax_amount;
        END IF;

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_determ_override.',
              'Calling okl_tax_sources_pub.update_tax_sources for updating Total Tax for current line in Tax Sources');
        END IF;

        okl_tax_sources_pub.update_tax_sources(p_api_version     => p_api_version
                                              ,p_init_msg_list   => p_init_msg_list
                                              ,x_return_status   => l_return_status
                                              ,x_msg_count       => x_msg_count
                                              ,x_msg_data        => x_msg_data
                                              ,p_txsv_rec        => l_txsv_rec
                                              ,x_txsv_rec        => lx_txsv_rec);

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_determ_override.',
            'Return Status' || l_return_status);
        END IF;

        IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
         RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;
      END IF;
      -- End actions based on return status
      -- End Recalculate tax

      -- Condition to populate 'ALC_SERIALIZED_TOTAL_TAX' column of tax sources
      IF (l_alc_event AND l_taxsources_rec.alc_serialized_yn = 'Y') THEN
        populate_alc_total_tax(p_api_version    => p_api_version,
                               p_init_msg_list  => p_init_msg_list,
                               x_return_status  => l_return_status,
                               x_msg_count      => x_msg_count,
                               x_msg_data       => x_msg_data,
                               p_asset_id       => p_asset_id,
                               p_request_id     => p_request_id);

        IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;
      END IF;

      -- Call Authoring package to sync tax values for 'BOOKING' and 'REBOOK' transactions
      IF (l_taxsources_rec.event_class_code = 'BOOKING' OR
          l_taxsources_rec.event_class_code = 'REBOOK') THEN
        OKL_LA_SALES_TAX_PVT.process_tax_override(
                                              p_api_version      => p_api_version,
                                              p_init_msg_list    => p_init_msg_list,
                                              p_chr_id           => l_taxsources_rec.khr_id,
                                              p_transaction_id   => p_trx_id,
                                              x_return_status    => l_return_status,
                                              x_msg_count        => x_msg_count,
                                              x_msg_data         => x_msg_data );
        IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;
      END IF;
      -- End call to Authoring package

    END IF;

    x_return_status := l_return_status;

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.process_tax_determ_override ','End(-)');
    END IF;

    -- end the transaction
    OKL_API.END_ACTIVITY(x_msg_count, x_msg_data);

  EXCEPTION

    WHEN OKL_API.G_EXCEPTION_ERROR THEN

      IF (l_zxlinestotaltax_csr%ISOPEN) THEN
        CLOSE l_zxlinestotaltax_csr;
      END IF;

      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.process_tax_determ_override ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
      END IF;

      x_return_status := OKL_API.HANDLE_EXCEPTIONS
      (
        l_api_name,
        G_PKG_NAME,
        'OKL_API.G_RET_STS_ERROR',
        x_msg_count,
        x_msg_data,
        '_PVT'
      );
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN

      IF (l_zxlinestotaltax_csr%ISOPEN) THEN
        CLOSE l_zxlinestotaltax_csr;
      END IF;

      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.process_tax_determ_override ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_UNEXPECTED_ERROR');
      END IF;

      x_return_status :=OKL_API.HANDLE_EXCEPTIONS
      (
        l_api_name,
        G_PKG_NAME,
        'OKL_API.G_RET_STS_UNEXP_ERROR',
        x_msg_count,
        x_msg_data,
        '_PVT'
      );
    WHEN OTHERS THEN

      IF (l_zxlinestotaltax_csr%ISOPEN) THEN
        CLOSE l_zxlinestotaltax_csr;
      END IF;

      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.process_tax_determ_override ',
                  'EXCEPTION :'||sqlerrm);
      END IF;

      x_return_status :=OKL_API.HANDLE_EXCEPTIONS
      (
        l_api_name,
        G_PKG_NAME,
        'OTHERS',
        x_msg_count,
        x_msg_data,
        '_PVT'
      );
  END process_tax_determ_override;

/*========================================================================
 | PUBLIC PROCEDURE process_tax_details_override
 |
 | DESCRIPTION
 |    This procedure is called by 'BOOKING', 'REBOOK' and 'ASSET LOCATION
 |    CHANGE' transactions to override tax details
 |
 | CALLED FROM                                  OLM Tax Events
 |
 |
 | CALLS PROCEDURES/FUNCTIONS
 |
 |
 | PARAMETERS
 |      p_event_id                               -- Tax Lines window will return an event id
 |                                      when there are any user overrides. It is
 |                                      this event id value that needs to be passed
 |                                      by OA Tax Override and Forms Tax Override Uis,
 |                                      to this API
 |      p_internal_organization_id   -- Organization Identifier
 |      p_trx_id                     -- Transaction Identifier
 |      p_application_id             -- Application Identifier
 |      p_entity_code                -- Entity code
 |      p_event_class_code           -- Event class code
 |
 | KNOWN ISSUES
 |
 | NOTES
 |
 |
 | MODIFICATION HISTORY
 | Date          Author     Description of Changes
 | 22-FEB-07    RRAVIKIR      Created
 |
 *=======================================================================*/
  PROCEDURE process_tax_details_override(
    p_api_version                       IN  NUMBER,
    p_init_msg_list                     IN  VARCHAR2 DEFAULT OKL_API.G_FALSE,
    x_return_status                     OUT NOCOPY VARCHAR2,
    x_msg_count                         OUT NOCOPY NUMBER,
    x_msg_data                          OUT NOCOPY VARCHAR2,
    p_event_id                      IN  NUMBER,
    p_internal_organization_id      IN  NUMBER,
    p_trx_id                        IN  NUMBER,
    p_application_id                IN  NUMBER,
    p_entity_code                                   IN  VARCHAR2,
    p_event_class_code              IN  VARCHAR2) IS

    -- Local variables
    l_api_version                   CONSTANT NUMBER := 1;
    l_api_name                      CONSTANT VARCHAR2(30) := 'process_tax_details';
    l_return_status                 VARCHAR2(1) := OKL_API.G_RET_STS_SUCCESS;
    l_total_tax_amount              NUMBER;

    -- Local data structure
    l_txsv_rec                    txsv_rec_type;
    lx_txsv_rec                   txsv_rec_type;
    l_transaction_rec             transaction_rec_type;

    -- Cursors
  BEGIN

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.process_tax_details_override','Begin(+)');
    END IF;

    --Print Input Variables
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_details_override.',
              'p_init_msg_list :'||p_init_msg_list);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_details_override.',
              'p_trx_id :'||p_trx_id);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_details_override.',
              'p_event_id :'||p_event_id);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_details_override.',
              'p_internal_organization_id :'||p_internal_organization_id);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_details_override.',
              'p_application_id :'||p_application_id);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_details_override.',
              'p_entity_code :'||p_entity_code);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_details_override.',
              'p_event_class_code :'||p_event_class_code);
    END IF;

    --Check API version, initialize message list and create savepoint.
    l_return_status := OKL_API.START_ACTIVITY(l_api_name,
                                              G_PKG_NAME,
                                              p_init_msg_list,
                                              l_api_version,
                                              p_api_version,
                                              '_PVT',
                                              x_return_status);

    IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    -- Required Values
    IF p_application_id IS NULL THEN
       OKL_API.set_message( p_msg_name      => G_REQUIRED_VALUE,
                            p_token1        => G_COL_NAME_TOKEN,
                            p_token1_value  => 'APPLICATION_ID');
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    IF p_entity_code IS NULL THEN
       OKL_API.set_message( p_msg_name      => G_REQUIRED_VALUE,
                            p_token1        => G_COL_NAME_TOKEN,
                            p_token1_value  => 'ENTITY_CODE');
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    IF p_event_class_code IS NULL THEN
       OKL_API.set_message( p_msg_name      => G_REQUIRED_VALUE,
                            p_token1        => G_COL_NAME_TOKEN,
                            p_token1_value  => 'EVENT_CLASS_CODE');
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    IF p_internal_organization_id IS NULL THEN
       OKL_API.set_message( p_msg_name      => G_REQUIRED_VALUE,
                            p_token1        => G_COL_NAME_TOKEN,
                            p_token1_value  => 'INTERNAL_ORGANIZATION_ID');
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    IF p_trx_id IS NULL THEN
       OKL_API.set_message( p_msg_name      => G_REQUIRED_VALUE,
                            p_token1        => G_COL_NAME_TOKEN,
                            p_token1_value  => 'TRX_ID');
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;
    -- End required values

    -- Populate Transaction record
    l_transaction_rec.application_id    := p_application_id;
    l_transaction_rec.entity_code       := p_entity_code;
    l_transaction_rec.event_class_code  := p_event_class_code;

    IF  p_event_class_code = 'BOOKING' THEN
      l_transaction_rec.event_type_code  := G_BOOK_OVERRIDE_EVENT;
    ELSIF p_event_class_code = 'ASSET_RELOCATION' THEN
      l_transaction_rec.event_type_code  := G_ALC_OVERRIDE_EVENT;
    END IF;

    l_transaction_rec.trx_id  := p_trx_id;
    l_transaction_rec.internal_organization_id := p_internal_organization_id;

    -- Override tax with new values
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_details_override.',
              'Calling OKL_TAX_INTERFACE_PVT.process_tax_details_override');
    END IF;

    OKL_TAX_INTERFACE_PVT.process_tax_details_override
        (p_api_version           => p_api_version,
         p_init_msg_list         => p_init_msg_list,
         x_return_status         => l_return_status,
         x_msg_count             => x_msg_count,
         x_msg_data              => x_msg_data,
         p_transaction_rec       => l_transaction_rec,
         p_override_level        => G_OVERRIDE_LEVEL,
         p_event_id              => p_event_id);

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_details_override.',
              'Return Status' || l_return_status);
    END IF;

    IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    -- Overriding a tax line can impact the tax lines of other transaction lines
    -- Get the modified tax lines from zx_lines, sum up the total tax amount
    -- and store in total_tax column of okl_tax_sources

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_details_override.',
          'Calling "update_tax_sources_total" for updating Total Tax for all Lines in Tax Sources');
    END IF;

    update_tax_sources_total(p_api_version    => p_api_version,
                             p_init_msg_list  => p_init_msg_list,
                             x_return_status  => l_return_status,
                             x_msg_count      => x_msg_count,
                             x_msg_data       => x_msg_data,
                             p_source_trx_id  => p_trx_id);

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.process_tax_details_override.',
          'Return Status' || l_return_status);
    END IF;

    IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    x_return_status := l_return_status;

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.process_tax_details_override ','End(-)');
    END IF;

    -- end the transaction
    OKL_API.END_ACTIVITY(x_msg_count, x_msg_data);

  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN

      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.process_tax_details_override ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
      END IF;

      x_return_status := OKL_API.HANDLE_EXCEPTIONS
      (
        l_api_name,
        G_PKG_NAME,
        'OKL_API.G_RET_STS_ERROR',
        x_msg_count,
        x_msg_data,
        '_PVT'
      );
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.process_tax_details_override ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_UNEXPECTED_ERROR');
      END IF;

      x_return_status :=OKL_API.HANDLE_EXCEPTIONS
      (
        l_api_name,
        G_PKG_NAME,
        'OKL_API.G_RET_STS_UNEXP_ERROR',
        x_msg_count,
        x_msg_data,
        '_PVT'
      );
    WHEN OTHERS THEN

      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.process_tax_details_override ',
                  'EXCEPTION :'||sqlerrm);
      END IF;

      x_return_status :=OKL_API.HANDLE_EXCEPTIONS
      (
        l_api_name,
        G_PKG_NAME,
        'OTHERS',
        x_msg_count,
        x_msg_data,
        '_PVT'
      );
  END process_tax_details_override;

  /*========================================================================
   | PUBLIC PROCEDURE get_tax_determinants
   |
   | DESCRIPTION
   |    This procedure will be called by Billing and P2P transactions to derive
   |    tax determinants. Billing -  Invoice tax is to be reported from AR. Pass
   |    reporting flag as 'Y' in autoinvoice interface P2P - PRODUCT_CATEGORY,
   |    LINE_INTENDED_USE, USER_DEFINED_FISC_CLASS are not applicable in case of
   |    P2P, hence the out parameters will be null in this case. Tax reporting
   |    flag not in AP interface table - Not applicable
   |
   | CALLED FROM          OLM Billing and Disbursement Modules
   |
   |
   | CALLS PROCEDURES/FUNCTIONS
   |       okl_am_util_pvt.get_formula_value()
   |
   | PARAMETERS
   |   - Billing
   |      p_source_trx_id   -- OKL_TXD_AR_LN_DTLS_B.ID
   |      p_source_trx_name   -- Billing / Credit Memo transaction
   |      p_source_table      -- OKL_TXD_AR_LN_DTLS_B
   |   - P2P
   |      p_source_trx_id   -- OKL_TXL_AP_INV_LNS_ALL_B.ID
   |      p_source_trx_name   -- Funding / Disbursements transaction
   |      p_source_table      -- OKL_TXL_AP_INV_LNS_ALL_B
   |
   | KNOWN ISSUES
   |
   | NOTES
   |
   |
   | MODIFICATION HISTORY
   | Date          Author   Description of Changes
   | 01-MAR-07    RRAVIKIR  Created
   | 04-Jan-08    SECHAWLA  6651621 Added 3 additional parameters to taxable basis override formula -
 |                            'LINE_NAME', 'DEFAULT_TAXABLE_BASIS', 'SOURCE_TRX_NAME'
   |
   *=======================================================================*/
    PROCEDURE get_tax_determinants(
      p_api_version                   IN  NUMBER,
      p_init_msg_list                 IN  VARCHAR2 DEFAULT OKL_API.G_FALSE,
      x_return_status                 OUT NOCOPY VARCHAR2,
      x_msg_count                     OUT NOCOPY NUMBER,
      x_msg_data                      OUT NOCOPY VARCHAR2,
      p_source_trx_id                 IN  NUMBER,
      p_source_trx_name               IN  VARCHAR2,
      p_source_table                  IN  VARCHAR2,
      x_tax_det_rec                   OUT NOCOPY tax_det_rec_type) IS

      -- Billing / Credit Memo Cursors
      -- Get the billing details
          CURSOR l_billingdtls_csr(cp_det_line_id IN NUMBER) IS
          SELECT hdr.id hdr_id, hdr.khr_id, hdr.date_invoiced, hdr.try_id try_id,
             hdr.qte_id, hdr.ibt_id , hdr.legal_entity_id, line.id line_id, line.kle_id,
             line.isl_id, det.sty_id, det.amount
      FROM   okl_trx_ar_invoices_b hdr, okl_txl_ar_inv_lns_b line,
             okl_txd_ar_ln_dtls_b det
      WHERE  det.id = cp_det_line_id
      AND    det.til_id_details = line.id
      AND    line.tai_id = hdr.id;

      -- Get the quote details
      CURSOR l_trxquotes_csr(cp_qte_id IN NUMBER) IS
      SELECT qtp_code, qrs_code, early_termination_yn
      FROM   okl_trx_quotes_b
      WHERE  id = cp_qte_id;

      -- Get stream type purpose for a given stream type id
      CURSOR l_strmtype_csr(cp_sty_id IN NUMBER) IS
      SELECT stream_type_purpose
      FROM   okl_strm_type_b
      WHERE  id = cp_sty_id;

      -- Get the line type
      CURSOR l_okclinestyle_csr(cp_kle_id IN NUMBER) IS
      SELECT lse.lty_code
          FROM   okc_k_lines_b line, okc_line_styles_b lse
          WHERE  line.lse_id = lse.id
          AND    line.id = cp_kle_id;

      -- Get line name
          CURSOR l_okclines_csr(cp_line_id IN NUMBER) IS
          SELECT name
          FROM   okc_k_lines_v
          WHERE  id = cp_line_id;

      -- Get the financial asset associated with a given subline
      CURSOR l_finasset_csr(cp_fee_serviced_asset_line_id IN NUMBER, cp_line_type IN VARCHAR2) IS
      SELECT cim.object1_id1
      FROM   okc_k_lines_b cle, okc_line_styles_b lse, okc_k_items cim
      WHERE  cle.lse_id = lse.id
      AND    lse.lty_code = cp_line_type
      AND    cim.cle_id = cle.id
      AND    cle.id = cp_fee_serviced_asset_line_id;

      -- get the inventory item from the sales order
      CURSOR l_oeorderlines_csr(cp_line_id IN NUMBER) IS
      SELECT inventory_item_id, ship_from_org_id, ship_to_org_id
      FROM   oe_order_lines_all
      WHERE  line_id = cp_line_id;

      -- get the inventory item id and inventory item org for a financial asset
      CURSOR l_invitem_csr(cp_fin_asset_id IN NUMBER) IS
      SELECT cim_model.object1_id1,
             cim_model.object1_id2
      FROM   okc_k_items cim_model,
             okc_k_lines_b cleb_model,
             okc_line_styles_b lseb_model
      WHERE  cim_model.cle_id    = cleb_model.id
      AND    cleb_model.cle_id   = cp_fin_asset_id
      AND    lseb_model.id       = cleb_model.lse_id
      AND    lseb_model.lty_code = 'ITEM';

      CURSOR c_get_set_of_books_id(cp_org_id IN NUMBER) IS
      SELECT set_of_books_id
      FROM   ar_system_parameters_all
      WHERE  org_id = cp_org_id;

      -- Check if tax basis override formula exists
      CURSOR l_txbasisoverride_csr(cp_try_id IN NUMBER) IS
      SELECT fma_id
      FROM   okl_tax_basis_override
      WHERE  try_id = cp_try_id
      AND    org_id = MO_GLOBAL.get_current_org_id;

      -- get formula name
      CURSOR l_formulae_csr(cp_fma_id IN NUMBER) IS
      SELECT name
      FROM   okl_formulae_b
      WHERE  id = cp_fma_id;

      -- Funding / Debit Memo / Disbursement Cursors
          CURSOR l_disbdtls_csr(cp_line_id IN NUMBER) IS
          SELECT hdr.id hdr_id, line.khr_id, hdr.date_invoiced, hdr.try_id try_id,
             hdr.qte_id, hdr.legal_entity_id, line.id line_id, line.kle_id,
             line.sty_id, line.amount, hdr.ipvs_id
      FROM   okl_trx_ap_invoices_b hdr, okl_txl_ap_inv_lns_b line
      WHERE  line.id = cp_line_id
      AND    line.tap_id = hdr.id;

      CURSOR l_get_vendor_csr(cp_vendor_site_id IN NUMBER) IS
      SELECT vendor_id
      FROM   po_vendor_sites
      WHERE  vendor_site_id = cp_vendor_site_id;

      -- Record types
      l_billingdtls_rec               l_billingdtls_csr%ROWTYPE;
      l_disbdtls_rec                  l_disbdtls_csr%ROWTYPE;
      l_add_params                                        okl_execute_formula_pub.ctxt_val_tbl_type;

      -- Local variables
      l_api_version                   CONSTANT NUMBER := 1;
      l_api_name                      CONSTANT VARCHAR2(30) := 'get_tax_determinants';

      l_qtp_code                      okl_trx_quotes_b.qtp_code%TYPE;
      l_qte_reason                    okl_trx_quotes_b.qrs_code%TYPE;
      l_early_term_yn                 okl_trx_quotes_b.early_termination_yn%TYPE;
      l_purpose_code                  okl_strm_type_b.stream_type_purpose%TYPE;
      l_product_type                  VARCHAR2(30);
      l_def_tax_country               VARCHAR2(2);
      l_reporting_flag                VARCHAR2(1);

      lx_cust_acct_id                 NUMBER;
      lx_currency_code                VARCHAR2(15);
      lx_precision                    NUMBER;
      lx_minimum_accountable_unit     NUMBER;
      lx_cust_trx_type_id             NUMBER;

      lx_pb_prch_opt_det              VARCHAR2(450);
      lx_pb_fin_prod_id_det           NUMBER;
      lx_pb_int_disclosed_det         VARCHAR2(30);
      lx_bill_to_party_site_id        NUMBER;
      lx_bill_to_location_id          NUMBER;
      lx_bill_to_party_id             NUMBER;
      lx_bill_to_siteuseid            NUMBER;
      lx_ship_to_party_site_id        NUMBER;
      lx_ship_to_location_id          NUMBER;
      lx_ship_to_party_id             NUMBER;
      lx_ship_to_siteuseid            NUMBER;

      lx_org_id                       NUMBER;
      lx_book_class_code              VARCHAR2(30);
      lx_currency_conversion_type     VARCHAR2(30);
      lx_currency_conversion_rate     NUMBER;
      lx_currency_conversion_date     DATE;
      lx_contract_start_date          DATE;
      lx_transfer_of_title            VARCHAR2(30);
      lx_sale_lease_back              VARCHAR2(30);
      lx_purchase_of_lease            VARCHAR2(30);
      lx_usage_of_equipment           VARCHAR2(450);
      lx_age_of_equipment             NUMBER;
      lx_vendor_site_id               NUMBER;
      lx_tbc_code                     VARCHAR2(240);
      lx_pc_code                      VARCHAR2(240);
      lx_ufc_code                     VARCHAR2(240);
      lx_tax_classification_code      VARCHAR2(50);
      lx_assessable_value             NUMBER;

      l_line_type                     VARCHAR2(100);
      l_fin_asset_id                  NUMBER;
      l_inv_item_id                   NUMBER;
      l_inv_item_org_id               NUMBER;
      l_name                          VARCHAR2(30);
      l_set_of_books_id               NUMBER;
      l_fma_id                        NUMBER;
      l_formula_name                  VARCHAR2(150);
      l_event_class_code              VARCHAR2(30);
      l_asset_exists                  BOOLEAN := FALSE;
      l_vendor_id                     NUMBER;
      lx_tax_valid_code               VARCHAR2(1);

    BEGIN

      IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants','Begin(+)');
      END IF;

      --Print Input Variables
      IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                'p_init_msg_list :'||p_init_msg_list);
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                'p_source_trx_id :'||p_source_trx_id);
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                'p_source_trx_name :'||p_source_trx_name);
        FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                'p_source_table :'||p_source_table);
      END IF;

      --Check API version, initialize message list and create savepoint.
      x_return_status := OKL_API.START_ACTIVITY(l_api_name,
                                                G_PKG_NAME,
                                                p_init_msg_list,
                                                l_api_version,
                                                p_api_version,
                                                '_PVT',
                                                x_return_status);
      IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
      ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

      IF p_source_trx_name IN ('Billing', 'Credit Memo', 'Rollover Billing',
                               'Rollover Credit Memo', 'Release Billing',
                               'Release Credit Memo') THEN

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                  'Call to (Billing, Credit Memo, Rollover Billing, Rollover Credit Memo,
                            Release Billing, Release Credit Memo) .. ');
        END IF;

        -- Validate source trx id
        OPEN  l_billingdtls_csr(p_source_trx_id);
        FETCH l_billingdtls_csr INTO l_billingdtls_rec;
        IF l_billingdtls_csr %NOTFOUND THEN
          OKC_API.set_message( p_app_name      => 'OKC',
                               p_msg_name      => G_INVALID_VALUE,
                               p_token1        => G_COL_NAME_TOKEN,
                               p_token1_value  => 'SOURCE_TRX_ID');
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;
        CLOSE l_billingdtls_csr;

        IF l_billingdtls_rec.qte_id IS NOT NULL THEN  -- Invoice created for a quote
          OPEN  l_trxquotes_csr(l_billingdtls_rec.qte_id);
          FETCH l_trxquotes_csr INTO l_qtp_code, l_qte_reason, l_early_term_yn;
          CLOSE l_trxquotes_csr;
        END IF;

        IF l_billingdtls_rec.sty_id IS NOT NULL THEN
          OPEN  l_strmtype_csr(l_billingdtls_rec.sty_id);
          FETCH l_strmtype_csr INTO l_purpose_code;
          CLOSE l_strmtype_csr;
        END IF;

        l_product_type := G_SERVICES;
        l_def_tax_country := get_default_taxation_country(x_return_status     => x_return_status,
                                                          x_msg_count         => x_msg_count,
                                                          x_msg_data          => x_msg_data,
                                                          p_legal_entity_id   => l_billingdtls_rec.legal_entity_id);
            IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' l_qtp_code :'||l_qtp_code);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' l_qte_reason :'||l_qte_reason);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' l_early_term_yn :'||l_early_term_yn);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' l_purpose_code :'||l_purpose_code);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' l_def_tax_country :'||l_def_tax_country);
        END IF;

        l_reporting_flag := 'Y';

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                  'Call to (Billing, Credit Memo, Rollover Billing, Rollover Credit Memo,
                            Release Billing, Release Credit Memo) .. ');
        END IF;
        -- get header level tax parameters
        get_k_hdr_tax_params( p_api_version                  => p_api_version,
                              p_init_msg_list                => p_init_msg_list,
                              x_return_status                => x_return_status,
                              x_msg_count                    => x_msg_count,
                              x_msg_data                     => x_msg_data,
                              p_khr_id                       => l_billingdtls_rec.khr_id,
                              p_source_trx_name              => p_source_trx_name,
                              p_source_table                 => p_source_table,
                              x_cust_acct_id                 => lx_cust_acct_id,
                              x_bill_to_siteuseid            => lx_bill_to_siteuseid,
                              x_currency_code                => lx_currency_code,
                              x_cust_trx_type_id             => lx_cust_trx_type_id,
                              x_precision                    => lx_precision,
                              x_minimum_accountable_unit     => lx_minimum_accountable_unit,
                              x_prch_opt_det                 => lx_pb_prch_opt_det,
                              x_fin_prod_id_det              => lx_pb_fin_prod_id_det,
                              x_int_disclosed_det            => lx_pb_int_disclosed_det,
                              x_org_id                       => lx_org_id,
                              x_book_class_code              => lx_book_class_code,
                              x_bill_to_party_site_id        => lx_bill_to_party_site_id,
                              x_bill_to_party_id             => lx_bill_to_party_id,
                              x_bill_to_location_id          => lx_bill_to_location_id,
                              x_currency_conversion_type     => lx_currency_conversion_type,
                              x_currency_conversion_rate     => lx_currency_conversion_rate,
                              x_currency_conversion_date     => lx_currency_conversion_date,
                              x_contract_start_date          => lx_contract_start_date);
        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' l_billingdtls_rec.khr_id :'||l_billingdtls_rec.khr_id);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_cust_acct_id :'||lx_cust_acct_id);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_bill_to_siteuseid :'||lx_bill_to_siteuseid);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_currency_code :'||lx_currency_code);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_cust_trx_type_id :'||lx_cust_trx_type_id);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_precision :'||lx_precision);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_minimum_accountable_unit :'||lx_minimum_accountable_unit);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_pb_prch_opt_det :'||lx_pb_prch_opt_det);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_pb_fin_prod_id_det :'||lx_pb_fin_prod_id_det);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_pb_int_disclosed_det :'||lx_pb_int_disclosed_det);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_org_id :'||lx_org_id);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_book_class_code :'||lx_book_class_code);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_bill_to_party_site_id :'||lx_bill_to_party_site_id);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_bill_to_party_id :'||lx_bill_to_party_id);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_bill_to_location_id :'||l_def_tax_country);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_currency_conversion_type :'||lx_currency_conversion_type);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_currency_conversion_rate :'||lx_currency_conversion_rate);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_currency_conversion_date :'||lx_currency_conversion_date);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_contract_start_date :'||lx_contract_start_date);
        END IF;

        -- Line level Invoice
        IF l_billingdtls_rec.kle_id IS NOT NULL THEN

          OPEN  l_okclinestyle_csr(l_billingdtls_rec.kle_id);
          FETCH l_okclinestyle_csr INTO l_line_type;
          CLOSE l_okclinestyle_csr;

          IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
            FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants',
                  'line level inv '||' l_line_type = '||l_line_type);
          END IF;

          IF l_line_type IN ('FREE_FORM1','LINK_SERV_ASSET','LINK_FEE_ASSET') THEN

            l_asset_exists := TRUE;

            -- For regular stream billing, l_line_type can have any of the above 3 values
            -- For transaction billing, l_line_type can only be FREE_FORM1
            OPEN  l_okclines_csr(l_billingdtls_rec.kle_id);
            FETCH l_okclines_csr INTO l_name;
            CLOSE l_okclines_csr;

            IF l_line_type = 'FREE_FORM1' THEN
              l_fin_asset_id := l_billingdtls_rec.kle_id;
            ELSE
              -- If subline level, get the attached fin asset id
                  OPEN  l_finasset_csr(l_billingdtls_rec.kle_id, l_line_type);
                  FETCH l_finasset_csr INTO l_fin_asset_id;
                  CLOSE l_finasset_csr;
            END IF;

            -- Get the asset level determinants
            get_asset_tax_params(
                                p_api_version                  => p_api_version,
                        p_init_msg_list                => p_init_msg_list,
                        x_return_status                => x_return_status,
                        x_msg_count                    => x_msg_count,
                        x_msg_data                     => x_msg_data,
                        p_khr_id                       => l_billingdtls_rec.khr_id,
                        p_kle_id                       => l_fin_asset_id,
                        p_source_trx_name              => p_source_trx_name,
                        p_source_table                 => p_source_table,
                        p_qtp_code                     => l_qtp_code,
                        p_purpose_code                 => l_purpose_code,
                        x_transfer_of_title                        => lx_transfer_of_title,
                        x_sale_lease_back                          => lx_sale_lease_back,
                        x_purchase_of_lease                        => lx_purchase_of_lease,
                        x_usage_of_equipment               => lx_usage_of_equipment,
                                x_age_of_equipment                         => lx_age_of_equipment,
                                x_vendor_site_id                       => lx_vendor_site_id);
                    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
                  RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
            ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
                  RAISE OKL_API.G_EXCEPTION_ERROR;
            END IF;

            IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' l_fin_asset_id :'||l_fin_asset_id);
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_transfer_of_title :'||lx_transfer_of_title);
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_sale_lease_back :'||lx_sale_lease_back);
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_purchase_of_lease :'||lx_purchase_of_lease);
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_usage_of_equipment :'||lx_usage_of_equipment);
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_age_of_equipment :'||lx_age_of_equipment);
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_vendor_site_id :'||lx_vendor_site_id);
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' l_billingdtls_rec.qte_id :'||l_billingdtls_rec.qte_id);
            END IF;

            -- Equipment Type(inventory item id)
            -- Get the inventory item id
            IF l_billingdtls_rec.qte_id IS NULL AND l_purpose_code = 'AMBSPR' THEN -- Remarketing billing
              l_product_type := G_GOODS;

              IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                  ' AMBSPR ');
              END IF;

              OPEN  l_oeorderlines_csr(l_billingdtls_rec.isl_id);
                  FETCH l_oeorderlines_csr INTO l_inv_item_id, l_inv_item_org_id, lx_ship_to_siteuseid;
                  -- ship_to_org_id from oe_order_lines_all is the site_use_id value from hz_cust_site_uses_all
                  -- which is the ship_to_site_use_id
                  IF l_oeorderlines_csr%NOTFOUND THEN
                    OKC_API.set_message( p_app_name      => 'OKC',
                                     p_msg_name      => G_INVALID_VALUE,
                                     p_token1        => G_COL_NAME_TOKEN,
                                     p_token1_value  => 'ISL_ID');
                RAISE OKL_API.G_EXCEPTION_ERROR;
              END IF;
              CLOSE l_oeorderlines_csr;

            ELSIF l_purpose_code = 'CURE' THEN -- vendor cure billing

              IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                  ' CURE ');
              END IF;

                  l_inv_item_id := NULL;
                  l_inv_item_org_id := NULL;

            ELSE
                          OPEN  l_invitem_csr(l_fin_asset_id);
                          FETCH l_invitem_csr INTO l_inv_item_id, l_inv_item_org_id;
                          IF l_invitem_csr%NOTFOUND THEN
                            OKL_API.set_message(
                                             p_app_name      => 'OKL',
                         p_msg_name      => 'OKL_TX_INV_ITEM_ERR',
                                 p_token1        => 'ASSET_NUMBER',
                                                 p_token1_value  => l_name);

                            RAISE OKL_API.G_EXCEPTION_ERROR;
                          END IF;
                          CLOSE l_invitem_csr;
            END IF;

            -- At this point l_bill_to_siteuseid has Bill To of the K (derived in
            -- call to get_k_hdr_tax_params above)
            -- l_bill_to_siteuseid will be overridden below depending upon the
            -- type of invoice
            IF l_qtp_code LIKE 'REP%' OR l_purpose_code IN ('CURE','REPAIR_CHARGE') THEN
              -- Ship to is not applicable for Repurchase quote billing, vendor
              -- cure billing and asset repair billing
              lx_ship_to_siteuseid := NULL;
              IF l_qtp_code LIKE 'REP%' OR l_purpose_code = 'CURE' THEN
                IF l_billingdtls_rec.ibt_id IS NULL THEN
                  OKL_API.set_message(  p_app_name      => 'OKL',
                                            p_msg_name      => 'OKL_TX_NO_INV_BILL_TO');

                      RAISE OKL_API.G_EXCEPTION_ERROR;

                ELSE
                  lx_bill_to_siteuseid := l_billingdtls_rec.ibt_id;
                END IF;
              ELSE -- asset repair invoice
                IF l_billingdtls_rec.ibt_id IS NOT NULL THEN
                  -- ibt_id is populated if asset repair is billed to vendor
                  -- If billed to lessee, ibt_id will be null. So use bill to from K
                  lx_bill_to_siteuseid := l_billingdtls_rec.ibt_id;
                END IF;
              END IF;

            ELSIF l_purpose_code = 'AMBSPR' THEN -- Remarketing billing
              IF l_billingdtls_rec.ibt_id IS NULL THEN
                OKL_API.set_message(    p_app_name      => 'OKL',
                                            p_msg_name      => 'OKL_TX_NO_INV_BILL_TO');

                        RAISE OKL_API.G_EXCEPTION_ERROR;
              ELSE
                lx_bill_to_siteuseid := l_billingdtls_rec.ibt_id;
              END IF;
              --ship to (lx_ship_to_siteuseid) is already derived above for Remarketing billing

            ELSE

                          -- get the Location Party ID's
                          get_location_party_ids(
                                                                        p_api_version                  => p_api_version,
                                                                p_init_msg_list                => p_init_msg_list,
                                                                x_return_status                => x_return_status,
                                                                x_msg_count                    => x_msg_count,
                                                                x_msg_data                     => x_msg_data,
                                                                p_cust_acct_id                 => lx_cust_acct_id,
                                                                p_fin_asset_id                 => l_fin_asset_id,
                                    p_khr_id                       => l_billingdtls_rec.khr_id,
                                    x_bill_to_party_site_id        => lx_bill_to_party_site_id,
                                    x_bill_to_location_id          => lx_bill_to_location_id,
                                    x_bill_to_party_id             => lx_bill_to_party_id,
                                    x_bill_to_site_use_id                  => lx_bill_to_siteuseid,
                                    x_ship_to_party_site_id        => lx_ship_to_party_site_id,
                                    x_ship_to_location_id          => lx_ship_to_location_id,
                                    x_ship_to_party_id             => lx_ship_to_party_id,
                                    x_ship_to_site_use_id                  => lx_ship_to_siteuseid);

                          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
                RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
                          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
                RAISE OKL_API.G_EXCEPTION_ERROR;
                          END IF;

              IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_bill_to_party_site_id :'||lx_bill_to_party_site_id);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_bill_to_location_id :'||lx_bill_to_location_id);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_bill_to_party_id :'||lx_bill_to_party_id);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_bill_to_siteuseid :'||lx_bill_to_siteuseid);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_ship_to_party_site_id :'||lx_ship_to_party_site_id);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_ship_to_location_id :'||lx_ship_to_location_id);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_ship_to_party_id :'||lx_ship_to_party_id);
                FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_ship_to_siteuseid :'||lx_ship_to_siteuseid);
              END IF;

                        END IF;

              END IF;
        END IF;

        -- Asset doesn't exist
        IF (NOT l_asset_exists) THEN
          lx_transfer_of_title      := null;
          lx_sale_lease_back        := null;
          lx_purchase_of_lease      := null;
          lx_usage_of_equipment     := null;
                  lx_age_of_equipment       := null;
                  lx_vendor_site_id         := null;
          lx_ship_to_party_site_id  := null;
          lx_ship_to_location_id    := null;
          lx_ship_to_party_id       := null;
          lx_ship_to_siteuseid      := null;
          l_inv_item_id             := null;
          l_inv_item_org_id         := null;
          l_fin_asset_id            := null;
        END IF;

        -- Get TBC code
        get_tbc_code(p_api_version                 => p_api_version,
                     p_init_msg_list               => p_init_msg_list,
                     x_return_status               => x_return_status,
                     x_msg_count                   => x_msg_count,
                     x_msg_data                    => x_msg_data,
                     p_sty_id                      => l_billingdtls_rec.sty_id,
                     p_try_id                      => l_billingdtls_rec.try_id,
                     p_book_class_code             => lx_book_class_code,
                     p_tax_country_code            => l_def_tax_country,
                     x_tbc_code                    => lx_tbc_code);

        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;

        -- Validate TBC Code
        IF lx_tbc_code IS NOT NULL THEN
          validate_tax_code(
            p_api_version     => p_api_version,
            p_init_msg_list   => p_init_msg_list,
            x_return_status   => x_return_status,
            x_msg_count       => x_msg_count,
            x_msg_data        => x_msg_data,
            p_trx_date        => l_billingdtls_rec.date_invoiced,
            p_tbc_code        => lx_tbc_code,
            x_valid_code      => lx_tax_valid_code); -- 'S' --> Success, 'F' --> Failure

          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;
        END IF;

        IF (lx_tbc_code IS NULL OR lx_tax_valid_code = 'F') THEN
          lx_tbc_code := 'SALES_TRANSACTION';
        END IF;

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
              'lx_tbc_code '||lx_tbc_code);
        END IF;

        -- Get PC code
        get_pc_code(p_api_version                 => p_api_version,
                    p_init_msg_list               => p_init_msg_list,
                    x_return_status               => x_return_status,
                    x_msg_count                   => x_msg_count,
                    x_msg_data                    => x_msg_data,
                    p_sty_id                      => l_billingdtls_rec.sty_id,
                    p_purchase_option_code        => lx_pb_prch_opt_det,
                    p_int_disclosed_code          => lx_pb_int_disclosed_det,
                    p_title_trnsfr_code           => lx_transfer_of_title,
                    p_sale_lease_back_code        => lx_sale_lease_back,
                    p_lease_purchased_code        => lx_purchase_of_lease,
                    p_tax_country_code            => l_def_tax_country,
                    x_pc_code                     => lx_pc_code);
        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;

        -- Validate PC Code
        IF lx_pc_code IS NOT NULL THEN
          validate_tax_code(
            p_api_version     => p_api_version,
            p_init_msg_list   => p_init_msg_list,
            x_return_status   => x_return_status,
            x_msg_count       => x_msg_count,
            x_msg_data        => x_msg_data,
            p_trx_date        => l_billingdtls_rec.date_invoiced,
            p_pc_code         => lx_pc_code,
            x_valid_code      => lx_tax_valid_code); -- 'S' --> Success, 'F' --> Failure

          IF (lx_tax_valid_code = 'F') THEN
            lx_pc_code := null;
          END IF;

          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;
        END IF;

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                  'lx_pc_code '||lx_pc_code);
        END IF;

        -- Get UFC code
        get_ufc_code(p_api_version                 => p_api_version,
                     p_init_msg_list               => p_init_msg_list,
                     x_return_status               => x_return_status,
                     x_msg_count                   => x_msg_count,
                     x_msg_data                    => x_msg_data,
                     p_purchase_option             => lx_pb_prch_opt_det,
                     p_fin_product_id              => lx_pb_fin_prod_id_det,
                     p_try_id                      => l_billingdtls_rec.try_id,
                     p_sty_id                      => l_billingdtls_rec.sty_id,
                     p_int_disclosed_code          => lx_pb_int_disclosed_det,
                     p_title_trnsfr_code           => lx_transfer_of_title,
                     p_sale_lease_back_code        => lx_sale_lease_back,
                     p_lease_purchased_code        => lx_purchase_of_lease,
                     p_equip_usage_code            => lx_usage_of_equipment ,
                     p_vendor_site_id              => lx_vendor_site_id,
                     p_age_of_equip                => lx_age_of_equipment,
                     p_term_quote_type_code        => null,
                     p_term_quote_reason_code      => null,
                     p_tax_country_code            => l_def_tax_country,
                     x_ufc_code                    => lx_ufc_code);
        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;

        -- Validate UFC Code
        IF lx_ufc_code IS NOT NULL THEN
          validate_tax_code(
            p_api_version     => p_api_version,
            p_init_msg_list   => p_init_msg_list,
            x_return_status   => x_return_status,
            x_msg_count       => x_msg_count,
            x_msg_data        => x_msg_data,
            p_trx_date        => l_billingdtls_rec.date_invoiced,
            p_ufc_code        => lx_ufc_code,
            x_valid_code      => lx_tax_valid_code); -- 'S' --> Success, 'F' --> Failure

          IF (lx_tax_valid_code = 'F') THEN
            lx_ufc_code := null;
          END IF;

          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;
        END IF;

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                  'lx_ufc_code '||lx_ufc_code);
        END IF;

        -- Get the tax classification code
        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                  'Calling  OKL_TAX_INTERFACE_PVT.get_tax_classification_code .. ');
        END IF;

        -- Get Set of Books ID
        OPEN c_get_set_of_books_id(cp_org_id  =>  lx_org_id);
        FETCH c_get_set_of_books_id INTO l_set_of_books_id;
        CLOSE c_get_set_of_books_id;

        IF p_source_trx_name IN ('Billing', 'Rollover Billing', 'Release Billing') THEN
          l_event_class_code := G_INVOICE_EVENT_CLASS_CODE;
        ELSIF p_source_trx_name IN ('Credit Memo', 'Rollover Credit Memo', 'Release Credit Memo') THEN
          l_event_class_code := G_CRE_MEM_EVENT_CLASS_CODE;
        END IF;

        OKL_TAX_INTERFACE_PVT.get_tax_classification_code (
                        x_return_status                 =>  x_return_status,
                        p_ship_to_site_use_id           =>  lx_ship_to_siteuseid,
                        p_bill_to_site_use_id           =>  lx_bill_to_siteuseid,
                        p_inventory_item_id             =>  l_inv_item_id,
                        p_organization_id               =>  lx_org_id,
                        p_set_of_books_id               =>  l_set_of_books_id,
                        p_trx_date                      =>  l_billingdtls_rec.date_invoiced,
                        p_trx_type_id                   =>  null,
                        p_entity_code                   =>  G_AR_ENTITY_CODE,
                        p_event_class_code              =>  l_event_class_code,
                        p_application_id                =>  G_AR_APPLICATION_ID,
                        p_internal_organization_id      =>  lx_org_id,
                        x_tax_classification_code       =>  lx_tax_classification_code );

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                'Return Status '|| x_return_status);

          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                'lx_tax_classification_code '|| lx_tax_classification_code);
        END IF;

        -- Check if taxable basis override applies to Billing / Credit Memo
        OPEN  l_txbasisoverride_csr(l_billingdtls_rec.try_id);
        FETCH l_txbasisoverride_csr INTO l_fma_id;
        CLOSE l_txbasisoverride_csr;

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' l_fma_id :'||l_fma_id);
        END IF;

        IF l_fma_id IS NOT NULL THEN
          OPEN  l_formulae_csr(l_fma_id);
          FETCH l_formulae_csr INTO l_formula_name;

          IF l_formulae_csr%NOTFOUND THEN
            OKC_API.set_message( p_app_name      => 'OKC',
                                 p_msg_name      => G_INVALID_VALUE,
                                 p_token1        => G_COL_NAME_TOKEN,
                                 p_token1_value  => 'FMA_ID');
            RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;
          CLOSE l_formulae_csr;

          IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
            FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                    'l_formula_name '||l_formula_name );
          END IF;

          -- execute tax basis override formula, pass tax determinants
          l_add_params(1).name  := 'PURCHASE_OPTION';
          l_add_params(1).value := lx_pb_prch_opt_det;

          l_add_params(2).name  := 'FINANCIAL_PRODUCT_ID';
          l_add_params(2).value := lx_pb_fin_prod_id_det;

          l_add_params(3).name  := 'TRX_TYPE_ID';
          l_add_params(3).value := l_billingdtls_rec.try_id;

          l_add_params(4).name  := 'STREAM_TYPE_ID';
          l_add_params(4).value := l_billingdtls_rec.sty_id;

          l_add_params(5).name  := 'INTEREST_DISCLOSED';
          l_add_params(5).value := lx_pb_int_disclosed_det;

          l_add_params(6).name  := 'TRANSFER_OF_TITLE';
          l_add_params(6).value := lx_transfer_of_title;

          l_add_params(7).name  := 'SALE_LEASE_BACK';
          l_add_params(7).value := lx_sale_lease_back;

          l_add_params(8).name  := 'PURCHASE_OF_LEASE';
          l_add_params(8).value := lx_purchase_of_lease;

          l_add_params(9).name  := 'USAGE_OF_EQUIPMENT';
          l_add_params(9).value := lx_usage_of_equipment;

          l_add_params(10).name := 'VENDOR_SITE_ID';
          l_add_params(10).value := lx_vendor_site_id;

          l_add_params(11).name := 'AGE_OF_EQUIPMENT';
          l_add_params(11).value  := lx_age_of_equipment;

          l_add_params(12).name := 'BOOK_CLASS';
          l_add_params(12).value  := lx_book_class_code;

          l_add_params(13).name := 'BILL_TO_PARTY_SITE_ID';
          l_add_params(13).value  := lx_bill_to_party_site_id;

          l_add_params(14).name := 'BILL_TO_LOCATION_ID';
          l_add_params(14).value  := lx_bill_to_location_id;

          l_add_params(15).name := 'BILL_TO_PARTY_ID';
          l_add_params(15).value  := lx_bill_to_party_id;

          l_add_params(16).name := 'SHIP_TO_PARTY_SITE_ID';
          l_add_params(16).value  :=  null;

          l_add_params(17).name := 'SHIP_TO_LOCATION_ID';
          l_add_params(17).value  :=  null;

          l_add_params(18).name := 'SHIP_TO_PARTY_ID';
          l_add_params(18).value  :=  null;

          l_add_params(19).name := 'BILL_TO_SITE_USE_ID';
          l_add_params(19).value  :=  lx_bill_to_siteuseid;

          l_add_params(20).name := 'INVENTORY_ITEM_ID';
          l_add_params(20).value  := l_inv_item_id;

          l_add_params(21).name := 'SHIP_TO_SITE_USE_ID';
          l_add_params(21).value  := lx_ship_to_siteuseid;

          --SECHAWLA 04-Jan-08 6651621 - Added 3 additional parameters - begin
          --'LINE_NAME', 'DEFAULT_TAXABLE_BASIS', 'SOURCE_TRX_NAME'
          l_add_params(22).name := 'LINE_NAME';
          l_add_params(22).value  := Null; -- Line name is not relevant for billing and disbursement type of calls

          l_add_params(23).name := 'SOURCE_TRX_NAME';
          l_add_params(23).value  := p_source_trx_name;

          l_add_params(24).name := 'DEFAULT_TAXABLE_BASIS';
          l_add_params(24).value  := l_billingdtls_rec.amount;
          --SECHAWLA 04-Jan-08 6651621 - Added 3 additional parameters - end

          okl_am_util_pvt.get_formula_value( p_formula_name           => l_formula_name,
                                             p_chr_id                 => l_billingdtls_rec.khr_id,
                                             p_cle_id                 => l_fin_asset_id,
                                             p_additional_parameters  => l_add_params,
                                             x_formula_value          => lx_assessable_value,
                                             x_return_status          => x_return_status);

          IF (x_return_status IN (OKL_API.G_RET_STS_UNEXP_ERROR, OKL_API.G_RET_STS_ERROR)) THEN
            OKL_API.init_msg_list('T');
            OKL_API.set_message(p_app_name      => 'OKL',
                                p_msg_name      => 'OKL_TX_FRM_TXN_ERR',
                                p_token1        => 'FMA_NAME',
                                p_token1_value  => l_formula_name,
                                p_token2        => 'TRX_NAME ',
                                                            p_token2_value  => p_source_trx_name);
            RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;

          IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
            FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                'calculated l_assessable_value '||lx_assessable_value);
          END IF;

        ELSE
          lx_assessable_value := l_billingdtls_rec.amount;
        END IF; --IF l_fma_id IS NOT NULL THEN

        x_tax_det_rec.x_tax_code                   :=  lx_tax_classification_code;
        x_tax_det_rec.x_trx_business_category      :=  lx_tbc_code;
        x_tax_det_rec.x_product_category           :=  lx_pc_code;
        x_tax_det_rec.x_product_type               :=  l_product_type;
        x_tax_det_rec.x_line_intended_use          :=  lx_usage_of_equipment;
        x_tax_det_rec.x_user_defined_fisc_class    :=  lx_ufc_code;
        x_tax_det_rec.x_assessable_value           :=  lx_assessable_value;
        x_tax_det_rec.x_default_taxation_country   :=  l_def_tax_country;
        x_tax_det_rec.x_upstream_trx_reported_flag :=  l_reporting_flag;

      ELSIF p_source_trx_name IN ('Funding', 'Disbursement', 'Debit Memo') THEN

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                  'Call to (Funding, Disbursement, Debit Memo) .. ');
        END IF;

        -- Validate source trx id
        OPEN  l_disbdtls_csr(p_source_trx_id);
        FETCH l_disbdtls_csr INTO l_disbdtls_rec;
        IF l_disbdtls_csr %NOTFOUND THEN
          OKC_API.set_message( p_app_name      => 'OKC',
                               p_msg_name      => G_INVALID_VALUE,
                               p_token1        => G_COL_NAME_TOKEN,
                               p_token1_value  => 'SOURCE_TRX_ID');
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;
        CLOSE l_disbdtls_csr;

        IF (l_disbdtls_rec.ipvs_id IS NOT NULL) THEN
          OPEN  l_get_vendor_csr(l_disbdtls_rec.ipvs_id);
          FETCH l_get_vendor_csr INTO l_vendor_id;
          CLOSE l_get_vendor_csr;
        END IF;

        IF l_disbdtls_rec.qte_id IS NOT NULL THEN  -- Invoice created for a quote
          OPEN  l_trxquotes_csr(l_disbdtls_rec.qte_id);
          FETCH l_trxquotes_csr INTO l_qtp_code, l_qte_reason, l_early_term_yn;
          CLOSE l_trxquotes_csr;
        END IF;

        IF l_disbdtls_rec.sty_id IS NOT NULL THEN
          OPEN  l_strmtype_csr(l_disbdtls_rec.sty_id);
          FETCH l_strmtype_csr INTO l_purpose_code;
          CLOSE l_strmtype_csr;
        END IF;

        l_product_type := G_SERVICES;
        l_def_tax_country := get_default_taxation_country(x_return_status     => x_return_status,
                                                          x_msg_count         => x_msg_count,
                                                          x_msg_data          => x_msg_data,
                                                          p_legal_entity_id   => l_disbdtls_rec.legal_entity_id);
            IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' l_qtp_code :'||l_qtp_code);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' l_qte_reason :'||l_qte_reason);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' l_early_term_yn :'||l_early_term_yn);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' l_purpose_code :'||l_purpose_code);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' l_def_tax_country :'||l_def_tax_country);
        END IF;

        -- get header level tax parameters
        get_k_hdr_tax_params( p_api_version                  => p_api_version,
                              p_init_msg_list                => p_init_msg_list,
                              x_return_status                => x_return_status,
                              x_msg_count                    => x_msg_count,
                              x_msg_data                     => x_msg_data,
                              p_khr_id                       => l_disbdtls_rec.khr_id,
                              p_source_trx_name              => p_source_trx_name,
                              p_source_table                 => p_source_table,
                              x_cust_acct_id                 => lx_cust_acct_id,
                              x_bill_to_siteuseid            => lx_bill_to_siteuseid,
                              x_currency_code                => lx_currency_code,
                              x_cust_trx_type_id             => lx_cust_trx_type_id,
                              x_precision                    => lx_precision,
                              x_minimum_accountable_unit     => lx_minimum_accountable_unit,
                              x_prch_opt_det                 => lx_pb_prch_opt_det,
                              x_fin_prod_id_det              => lx_pb_fin_prod_id_det,
                              x_int_disclosed_det            => lx_pb_int_disclosed_det,
                              x_org_id                       => lx_org_id,
                              x_book_class_code              => lx_book_class_code,
                              x_bill_to_party_site_id        => lx_bill_to_party_site_id,
                              x_bill_to_party_id             => lx_bill_to_party_id,
                              x_bill_to_location_id          => lx_bill_to_location_id,
                              x_currency_conversion_type     => lx_currency_conversion_type,
                              x_currency_conversion_rate     => lx_currency_conversion_rate,
                              x_currency_conversion_date     => lx_currency_conversion_date,
                              x_contract_start_date          => lx_contract_start_date);
        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' l_billingdtls_rec.khr_id :'||l_billingdtls_rec.khr_id);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_cust_acct_id :'||lx_cust_acct_id);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_bill_to_siteuseid :'||lx_bill_to_siteuseid);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_currency_code :'||lx_currency_code);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_cust_trx_type_id :'||lx_cust_trx_type_id);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_precision :'||lx_precision);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_minimum_accountable_unit :'||lx_minimum_accountable_unit);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_pb_prch_opt_det :'||lx_pb_prch_opt_det);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_pb_fin_prod_id_det :'||lx_pb_fin_prod_id_det);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_pb_int_disclosed_det :'||lx_pb_int_disclosed_det);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_org_id :'||lx_org_id);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_book_class_code :'||lx_book_class_code);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_bill_to_party_site_id :'||lx_bill_to_party_site_id);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_bill_to_party_id :'||lx_bill_to_party_id);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_bill_to_location_id :'||l_def_tax_country);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_currency_conversion_type :'||lx_currency_conversion_type);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_currency_conversion_rate :'||lx_currency_conversion_rate);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_currency_conversion_date :'||lx_currency_conversion_date);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_contract_start_date :'||lx_contract_start_date);
        END IF;

        -- Line level Invoice
        IF l_disbdtls_rec.kle_id IS NOT NULL THEN

          OPEN  l_okclinestyle_csr(l_disbdtls_rec.kle_id);
          FETCH l_okclinestyle_csr INTO l_line_type;
          CLOSE l_okclinestyle_csr;

          IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
            FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants',
                  'line level inv '||' l_line_type = '||l_line_type);
          END IF;

          IF l_line_type IN ('FREE_FORM1','LINK_SERV_ASSET','LINK_FEE_ASSET') THEN

            l_asset_exists := TRUE;

            -- For regular stream billing, l_line_type can have any of the above 3 values
            -- For transaction billing, l_line_type can only be FREE_FORM1
            OPEN  l_okclines_csr(l_disbdtls_rec.kle_id);
            FETCH l_okclines_csr INTO l_name;
            CLOSE l_okclines_csr;

            IF l_line_type = 'FREE_FORM1' THEN
              l_fin_asset_id := l_disbdtls_rec.kle_id;
            ELSE
              -- If subline level, get the attached fin asset id
                  OPEN  l_finasset_csr(l_disbdtls_rec.kle_id, l_line_type);
                  FETCH l_finasset_csr INTO l_fin_asset_id;
                  CLOSE l_finasset_csr;
            END IF;

            -- Get the asset level determinants
            get_asset_tax_params(
                                p_api_version                  => p_api_version,
                        p_init_msg_list                => p_init_msg_list,
                        x_return_status                => x_return_status,
                        x_msg_count                    => x_msg_count,
                        x_msg_data                     => x_msg_data,
                        p_khr_id                       => l_disbdtls_rec.khr_id,
                        p_kle_id                       => l_fin_asset_id,
                        p_source_trx_name              => p_source_trx_name,
                        p_source_table                 => p_source_table,
                        p_qtp_code                     => l_qtp_code,
                        p_purpose_code                 => l_purpose_code,
                        x_transfer_of_title                        => lx_transfer_of_title,
                        x_sale_lease_back                          => lx_sale_lease_back,
                        x_purchase_of_lease                        => lx_purchase_of_lease,
                        x_usage_of_equipment               => lx_usage_of_equipment,
                                x_age_of_equipment                         => lx_age_of_equipment,
                                x_vendor_site_id                       => lx_vendor_site_id);
                    IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
                  RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
            ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
                  RAISE OKL_API.G_EXCEPTION_ERROR;
            END IF;

            IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' l_fin_asset_id :'||l_fin_asset_id);
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_transfer_of_title :'||lx_transfer_of_title);
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_sale_lease_back :'||lx_sale_lease_back);
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_purchase_of_lease :'||lx_purchase_of_lease);
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_usage_of_equipment :'||lx_usage_of_equipment);
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_age_of_equipment :'||lx_age_of_equipment);
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' lx_vendor_site_id :'||lx_vendor_site_id);
              FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                ' l_billingdtls_rec.qte_id :'||l_billingdtls_rec.qte_id);
            END IF;

            -- Get the inventory item id
                        OPEN  l_invitem_csr(l_fin_asset_id);
                FETCH l_invitem_csr INTO l_inv_item_id, l_inv_item_org_id;
                        IF l_invitem_csr%NOTFOUND THEN
                          OKL_API.set_message(
                                             p_app_name      => 'OKL',
                         p_msg_name      => 'OKL_TX_INV_ITEM_ERR',
                                 p_token1        => 'ASSET_NUMBER',
                                                 p_token1_value  => l_name);

                          RAISE OKL_API.G_EXCEPTION_ERROR;
                        END IF;
                        CLOSE l_invitem_csr;

          END IF;
        END IF;

        -- Asset doesn't exist
        IF (NOT l_asset_exists) THEN
          lx_transfer_of_title      := null;
          lx_sale_lease_back        := null;
          lx_purchase_of_lease      := null;
          lx_usage_of_equipment     := null;
                  lx_age_of_equipment       := null;
                  lx_vendor_site_id         := null;
          lx_ship_to_party_site_id  := null;
          lx_ship_to_location_id    := null;
          lx_ship_to_party_id       := null;
          lx_ship_to_siteuseid      := null;
          l_inv_item_id             := null;
          l_inv_item_org_id         := null;
          l_fin_asset_id            := null;
        END IF;

        -- Get TBC code
        get_tbc_code(p_api_version                 => p_api_version,
                     p_init_msg_list               => p_init_msg_list,
                     x_return_status               => x_return_status,
                     x_msg_count                   => x_msg_count,
                     x_msg_data                    => x_msg_data,
                     p_sty_id                      => l_disbdtls_rec.sty_id,
                     p_try_id                      => l_disbdtls_rec.try_id,
                     p_book_class_code             => lx_book_class_code,
                     p_tax_country_code            => l_def_tax_country,
                     x_tbc_code                    => lx_tbc_code);

        IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;

        -- Validate TBC Code
        IF lx_tbc_code IS NOT NULL THEN
          validate_tax_code(
            p_api_version     => p_api_version,
            p_init_msg_list   => p_init_msg_list,
            x_return_status   => x_return_status,
            x_msg_count       => x_msg_count,
            x_msg_data        => x_msg_data,
            p_trx_date        => l_disbdtls_rec.date_invoiced,
            p_tbc_code        => lx_tbc_code,
            x_valid_code      => lx_tax_valid_code); -- 'S' --> Success, 'F' --> Failure

          IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
          ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
            RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;
        END IF;

        IF (lx_tbc_code IS NULL OR lx_tax_valid_code = 'F') THEN
          lx_tbc_code := 'PURCHASE_TRANSACTION';
        END IF;

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
              'lx_tbc_code '||lx_tbc_code);
        END IF;

        -- Get the tax classification code
        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
               'Calling  OKL_TAX_INTERFACE_PVT.get_tax_classification_code .. ');
        END IF;

        -- Get Set of Books ID
        OPEN c_get_set_of_books_id(cp_org_id  =>  lx_org_id);
        FETCH c_get_set_of_books_id INTO l_set_of_books_id;
        CLOSE c_get_set_of_books_id;

        OKL_TAX_INTERFACE_PVT.get_tax_classification_code (
                        x_return_status                 =>  x_return_status,
                        p_ship_to_site_use_id           =>  lx_ship_to_siteuseid,
                        p_bill_to_site_use_id           =>  lx_bill_to_siteuseid,
                        p_inventory_item_id             =>  l_inv_item_id,
                        p_organization_id               =>  lx_org_id,
                        p_set_of_books_id               =>  l_set_of_books_id,
                        p_trx_date                      =>  l_disbdtls_rec.date_invoiced,
                        p_trx_type_id                   =>  null,
                        p_entity_code                   =>  G_AP_ENTITY_CODE,
                        p_event_class_code              =>  G_AP_EVENT_CLASS_CODE,
                        p_application_id                =>  G_AP_APPLICATION_ID,
                        p_internal_organization_id      =>  lx_org_id,
                        p_vendor_id                                 =>  l_vendor_id,
                        p_vendor_site_id                        =>  l_disbdtls_rec.ipvs_id,
                        x_tax_classification_code       =>  lx_tax_classification_code );

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                'Return Status '|| x_return_status);
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                'lx_tax_classification_code = '|| lx_tax_classification_code);
        END IF;

        OPEN  l_txbasisoverride_csr(l_disbdtls_rec.try_id);
        FETCH l_txbasisoverride_csr INTO l_fma_id;
        CLOSE l_txbasisoverride_csr;

        IF l_fma_id IS NOT NULL THEN
          OPEN  l_formulae_csr(l_fma_id);
          FETCH l_formulae_csr INTO l_formula_name;

          IF l_formulae_csr%NOTFOUND THEN
            OKC_API.set_message( p_app_name      => 'OKC',
                                 p_msg_name      => G_INVALID_VALUE,
                                 p_token1        => G_COL_NAME_TOKEN,
                                 p_token1_value  => 'FMA_ID');
            RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;
          CLOSE l_formulae_csr;

          IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
            FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
                'l_formula_name '||l_formula_name );
          END IF;

          -- execute tax basis override formula, pass tax determinants
          l_add_params(1).name  := 'PURCHASE_OPTION';
          l_add_params(1).value := lx_pb_prch_opt_det;

          l_add_params(2).name  := 'FINANCIAL_PRODUCT_ID';
          l_add_params(2).value := lx_pb_fin_prod_id_det;

          l_add_params(3).name  := 'TRX_TYPE_ID';
          l_add_params(3).value := l_disbdtls_rec.try_id;

          l_add_params(4).name  := 'STREAM_TYPE_ID';
          l_add_params(4).value := l_disbdtls_rec.sty_id;

          l_add_params(5).name  := 'INTEREST_DISCLOSED';
          l_add_params(5).value := lx_pb_int_disclosed_det;

          l_add_params(6).name  := 'TRANSFER_OF_TITLE';
          l_add_params(6).value := lx_transfer_of_title;

          l_add_params(7).name  := 'SALE_LEASE_BACK';
          l_add_params(7).value := lx_sale_lease_back;

          l_add_params(8).name  := 'PURCHASE_OF_LEASE';
          l_add_params(8).value := lx_purchase_of_lease;

          l_add_params(9).name  := 'USAGE_OF_EQUIPMENT';
          l_add_params(9).value := lx_usage_of_equipment;

          l_add_params(10).name := 'VENDOR_SITE_ID';
          l_add_params(10).value := lx_vendor_site_id;

          l_add_params(11).name := 'AGE_OF_EQUIPMENT';
          l_add_params(11).value  := lx_age_of_equipment;

          l_add_params(12).name := 'BOOK_CLASS';
          l_add_params(12).value  := lx_book_class_code;

          l_add_params(13).name := 'BILL_TO_PARTY_SITE_ID';
          l_add_params(13).value  := lx_bill_to_party_site_id;

          l_add_params(14).name := 'BILL_TO_LOCATION_ID';
          l_add_params(14).value  := lx_bill_to_location_id;

          l_add_params(15).name := 'BILL_TO_PARTY_ID';
          l_add_params(15).value  := lx_bill_to_party_id;

          l_add_params(16).name := 'SHIP_TO_PARTY_SITE_ID';
          l_add_params(16).value  :=  null;

          l_add_params(17).name := 'SHIP_TO_LOCATION_ID';
          l_add_params(17).value  :=  null;

          l_add_params(18).name := 'SHIP_TO_PARTY_ID';
          l_add_params(18).value  :=  null;

              -- Directly Mapped
          l_add_params(19).name := 'BILL_TO_SITE_USE_ID';
          l_add_params(19).value  :=  lx_bill_to_siteuseid;

          l_add_params(20).name := 'INVENTORY_ITEM_ID';
          l_add_params(20).value  := l_inv_item_id;

          l_add_params(21).name := 'SHIP_TO_SITE_USE_ID';
          l_add_params(21).value  := lx_ship_to_siteuseid;

          --SECHAWLA 04-Jan-08 6651621 - Added 3 additional parameters - begin
          --'LINE_NAME', 'DEFAULT_TAXABLE_BASIS', 'SOURCE_TRX_NAME'
          l_add_params(22).name := 'LINE_NAME';
          l_add_params(22).value  := Null; -- Line name is not relevant for billing and disbursement type of calls

          l_add_params(23).name := 'SOURCE_TRX_NAME';
          l_add_params(23).value  := p_source_trx_name;

          l_add_params(24).name := 'DEFAULT_TAXABLE_BASIS';
          l_add_params(24).value  := l_disbdtls_rec.amount;
          --SECHAWLA 04-Jan-08 6651621 - Added 3 additional parameters - end


          okl_am_util_pvt.get_formula_value( p_formula_name           => l_formula_name,
                                             p_chr_id                 => l_disbdtls_rec.khr_id,
                                             p_cle_id                 => l_fin_asset_id,
                                             p_additional_parameters  => l_add_params,
                                             x_formula_value          => lx_assessable_value,
                                             x_return_status          => x_return_status);

          IF (x_return_status IN (OKL_API.G_RET_STS_UNEXP_ERROR, OKL_API.G_RET_STS_ERROR)) THEN
            OKL_API.init_msg_list('T');
            OKL_API.set_message(p_app_name      => 'OKL',
                                p_msg_name      => 'OKL_TX_FRM_TXN_ERR',
                                p_token1        => 'FMA_NAME',
                                p_token1_value  => l_formula_name,
                                p_token2        => 'TRX_NAME ',
                                                            p_token2_value  => p_source_trx_name);
            RAISE OKL_API.G_EXCEPTION_ERROR;
          END IF;

          IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
            FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants.',
            'calculated l_assessable_value '||lx_assessable_value);
          END IF;

        ELSE
          lx_assessable_value := l_disbdtls_rec.amount;
        END IF; --IF l_fma_id IS NOT NULL THEN

        x_tax_det_rec.x_tax_code                   :=  lx_tax_classification_code;
        x_tax_det_rec.x_trx_business_category      :=  lx_tbc_code;
        x_tax_det_rec.x_product_type               :=  l_product_type;
        x_tax_det_rec.x_assessable_value           :=  lx_assessable_value;
        x_tax_det_rec.x_default_taxation_country   :=  l_def_tax_country;
        x_tax_det_rec.x_product_category           :=  null;
        x_tax_det_rec.x_line_intended_use          :=  null;
        x_tax_det_rec.x_user_defined_fisc_class    :=  null;
        x_tax_det_rec.x_upstream_trx_reported_flag :=  null;

      ELSE
        OKC_API.set_message( p_app_name      => 'OKC',
                             p_msg_name      => G_INVALID_VALUE,
                             p_token1        => G_COL_NAME_TOKEN,
                             p_token1_value  => 'SOURCE_TRX_NAME');
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;

      IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants ','End(-)');
      END IF;

      -- End the transaction
      OKL_API.END_ACTIVITY(x_msg_count, x_msg_data);

    EXCEPTION
      WHEN OKL_API.G_EXCEPTION_ERROR THEN

        IF (l_billingdtls_csr%ISOPEN) THEN
          CLOSE l_billingdtls_csr;
        END IF;

        IF (l_trxquotes_csr%ISOPEN) THEN
          CLOSE l_trxquotes_csr;
        END IF;

        IF (l_strmtype_csr%ISOPEN) THEN
          CLOSE l_strmtype_csr;
        END IF;

        IF (l_okclinestyle_csr%ISOPEN) THEN
          CLOSE l_okclinestyle_csr;
        END IF;

        IF (l_okclines_csr%ISOPEN) THEN
          CLOSE l_okclines_csr;
        END IF;

        IF (l_finasset_csr%ISOPEN) THEN
          CLOSE l_finasset_csr;
        END IF;

        IF (l_oeorderlines_csr%ISOPEN) THEN
          CLOSE l_oeorderlines_csr;
        END IF;

        IF (l_invitem_csr%ISOPEN) THEN
          CLOSE l_invitem_csr;
        END IF;

        IF (c_get_set_of_books_id%ISOPEN) THEN
          CLOSE c_get_set_of_books_id;
        END IF;

        IF (l_txbasisoverride_csr%ISOPEN) THEN
          CLOSE l_txbasisoverride_csr;
        END IF;

        IF (l_formulae_csr%ISOPEN) THEN
          CLOSE l_formulae_csr;
        END IF;

        IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
           FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants ',
                    'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
        END IF;

        x_return_status := OKL_API.HANDLE_EXCEPTIONS
        (
          l_api_name,
          G_PKG_NAME,
          'OKL_API.G_RET_STS_ERROR',
          x_msg_count,
          x_msg_data,
          '_PVT');

      WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN

        IF (l_billingdtls_csr%ISOPEN) THEN
          CLOSE l_billingdtls_csr;
        END IF;

        IF (l_trxquotes_csr%ISOPEN) THEN
          CLOSE l_trxquotes_csr;
        END IF;

        IF (l_strmtype_csr%ISOPEN) THEN
          CLOSE l_strmtype_csr;
        END IF;

        IF (l_okclinestyle_csr%ISOPEN) THEN
          CLOSE l_okclinestyle_csr;
        END IF;

        IF (l_okclines_csr%ISOPEN) THEN
          CLOSE l_okclines_csr;
        END IF;

        IF (l_finasset_csr%ISOPEN) THEN
          CLOSE l_finasset_csr;
        END IF;

        IF (l_oeorderlines_csr%ISOPEN) THEN
          CLOSE l_oeorderlines_csr;
        END IF;

        IF (l_invitem_csr%ISOPEN) THEN
          CLOSE l_invitem_csr;
        END IF;

        IF (c_get_set_of_books_id%ISOPEN) THEN
          CLOSE c_get_set_of_books_id;
        END IF;

        IF (l_txbasisoverride_csr%ISOPEN) THEN
          CLOSE l_txbasisoverride_csr;
        END IF;

        IF (l_formulae_csr%ISOPEN) THEN
          CLOSE l_formulae_csr;
        END IF;

        IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
           FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants ',
                    'EXCEPTION :'||'OKL_API.G_EXCEPTION_UNEXPECTED_ERROR');
        END IF;

        x_return_status :=OKL_API.HANDLE_EXCEPTIONS
        (
          l_api_name,
          G_PKG_NAME,
          'OKL_API.G_RET_STS_UNEXP_ERROR',
          x_msg_count,
          x_msg_data,
          '_PVT');

      WHEN OTHERS THEN

        IF (l_billingdtls_csr%ISOPEN) THEN
          CLOSE l_billingdtls_csr;
        END IF;

        IF (l_trxquotes_csr%ISOPEN) THEN
          CLOSE l_trxquotes_csr;
        END IF;

        IF (l_strmtype_csr%ISOPEN) THEN
          CLOSE l_strmtype_csr;
        END IF;

        IF (l_okclinestyle_csr%ISOPEN) THEN
          CLOSE l_okclinestyle_csr;
        END IF;

        IF (l_okclines_csr%ISOPEN) THEN
          CLOSE l_okclines_csr;
        END IF;

        IF (l_finasset_csr%ISOPEN) THEN
          CLOSE l_finasset_csr;
        END IF;

        IF (l_oeorderlines_csr%ISOPEN) THEN
          CLOSE l_oeorderlines_csr;
        END IF;

        IF (l_invitem_csr%ISOPEN) THEN
          CLOSE l_invitem_csr;
        END IF;

        IF (c_get_set_of_books_id%ISOPEN) THEN
          CLOSE c_get_set_of_books_id;
        END IF;

        IF (l_txbasisoverride_csr%ISOPEN) THEN
          CLOSE l_txbasisoverride_csr;
        END IF;

        IF (l_formulae_csr%ISOPEN) THEN
          CLOSE l_formulae_csr;
        END IF;

        IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
           FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.get_tax_determinants ',
                    'EXCEPTION :'||sqlerrm);
        END IF;

        x_return_status :=OKL_API.HANDLE_EXCEPTIONS
        (
          l_api_name,
          G_PKG_NAME,
          'OTHERS',
          x_msg_count,
          x_msg_data,
          '_PVT');

        -- End the transaction
        OKL_API.END_ACTIVITY(x_msg_count, x_msg_data);

    END get_tax_determinants;

/*========================================================================
 | PUBLIC FUNCTION get_default_taxation_country
 |
 | DESCRIPTION
 |    This function is called by Tax component consumers to derive the default
 |    taxation country based on legal entity
 |
 | CALLED FROM                                  Tax consumers (Booking, Sales etc.,)
 |
 |
 | CALLS PROCEDURES/FUNCTIONS
 |
 |
 | PARAMETERS
 |      p_legal_entity_id            -- Legal Entity Identifier
 |
 | KNOWN ISSUES
 |
 | NOTES
 |
 |
 | MODIFICATION HISTORY
 | Date          Author     Description of Changes
 | 05-MAR-07    RRAVIKIR      Created
 |
 *=======================================================================*/
  FUNCTION get_default_taxation_country(x_return_status     OUT NOCOPY VARCHAR2,
                                        x_msg_count         OUT NOCOPY NUMBER,
                                        x_msg_data          OUT NOCOPY VARCHAR2,
                                        p_legal_entity_id   IN NUMBER)
    RETURN VARCHAR2 IS

    -- Local variables
    l_api_name                    CONSTANT VARCHAR2(30) := 'get_default_taxation_country';
    l_return_status               VARCHAR2(1) := OKL_API.G_RET_STS_SUCCESS;

    -- Local data structure
    lx_legal_entity_rec    legal_entity_rec_type;

  BEGIN
    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.get_default_taxation_country','Begin(+)');
    END IF;

    --Print Input Variables
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_default_taxation_country.',
              'p_legal_entity_id :'||p_legal_entity_id);
    END IF;

    xle_utilities_grp.get_legalentity_info(x_return_status      => l_return_status,
                                                    x_msg_count             => x_msg_count,
                                                    x_msg_data              => x_msg_data,
                                                p_party_id          => null,
                                                p_legalentity_id        => p_legal_entity_id,
                                                x_legalentity_info  => lx_legal_entity_rec);
    IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    x_return_status := l_return_status;

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.get_default_taxation_country ','End(-)');
    END IF;

    RETURN lx_legal_entity_rec.country;

  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN

      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.get_default_taxation_country ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
      END IF;

      x_return_status := OKL_API.G_RET_STS_ERROR;

    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.get_default_taxation_country ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_UNEXPECTED_ERROR');
      END IF;

      x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;

    WHEN OTHERS THEN

      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.get_default_taxation_country ',
                  'EXCEPTION :'||sqlerrm);
      END IF;

      x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
      -- unexpected error
      OKL_API.set_message(p_app_name      => g_app_name,
                          p_msg_name      => g_unexpected_error,
                          p_token1        => g_sqlcode_token,
                          p_token1_value  => sqlcode,
                          p_token2        => g_sqlerrm_token,
                          p_token2_value  => sqlerrm);

  END get_default_taxation_country;

/*========================================================================
 | PUBLIC FUNCTION get_line_intended_use_name
 |
 | DESCRIPTION
 |    This function derives the line intended use name basing on the code
 |
 | CALLED FROM                                  Sales objects
 |
 |
 | CALLS PROCEDURES/FUNCTIONS
 |
 |
 | PARAMETERS
 |      p_intend_use_code            -- Intended use for tax code
 |
 | KNOWN ISSUES
 |
 | NOTES
 |
 |
 | MODIFICATION HISTORY
 | Date          Author     Description of Changes
 | 05-MAR-07    RRAVIKIR      Created
 |
 *=======================================================================*/
  FUNCTION get_line_intended_use_name(p_intend_use_code   IN VARCHAR2)
    RETURN VARCHAR2 IS

    -- Local variables
    l_intend_use_name     VARCHAR2(240);

    -- Cursors
    CURSOR l_get_intend_use_name_csr IS
    SELECT classification_name
    FROM zx_fc_intended_use_v
    WHERE classification_code = p_intend_use_code;
  BEGIN
    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.get_line_intended_use_name','Begin(+)');
    END IF;

    --Print Input Variables
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.get_line_intended_use_name.',
              'p_intend_use_code :'||p_intend_use_code);
    END IF;

    OPEN l_get_intend_use_name_csr;
    FETCH l_get_intend_use_name_csr INTO l_intend_use_name;
    CLOSE l_get_intend_use_name_csr;

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.get_line_intended_use_name ','End(-)');
    END IF;

    RETURN l_intend_use_name;

  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN

      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.get_line_intended_use_name ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
      END IF;

      IF (l_get_intend_use_name_csr%ISOPEN) THEN
        CLOSE l_get_intend_use_name_csr;
      END IF;

    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.get_line_intended_use_name ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_UNEXPECTED_ERROR');
      END IF;

      IF (l_get_intend_use_name_csr%ISOPEN) THEN
        CLOSE l_get_intend_use_name_csr;
      END IF;

    WHEN OTHERS THEN

      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.get_line_intended_use_name ',
                  'EXCEPTION :'||sqlerrm);
      END IF;

      IF (l_get_intend_use_name_csr%ISOPEN) THEN
        CLOSE l_get_intend_use_name_csr;
      END IF;

  END get_line_intended_use_name;

/*========================================================================
 | PUBLIC PROCEDURE cancel_document_tax
 |
 | DESCRIPTION
 |    This procedure is called by 'Pre-Rebook' and 'Rebook' processes to cancel
 |    the tax
 |
 | CALLED FROM                                  OLM Rebook Module
 |
 |
 | CALLS PROCEDURES/FUNCTIONS
 |
 |
 | PARAMETERS
 |      p_source_trx_id         --  OKL_TRX_CONTRACTS.ID (ID of Pre-Rebook or Rebook transaction)
 |      p_source_trx_name   -- Pre-Rebook (used for upgrade) or Rebook
 |      p_source_table      -- OKL_TRX_CONTRACTS
 |
 | KNOWN ISSUES
 |
 | NOTES
 |
 |
 | MODIFICATION HISTORY
 | Date          Author     Description of Changes
 | 01-MAR-07    RRAVIKIR      Created
 |
 *=======================================================================*/
  PROCEDURE cancel_document_tax (
    p_api_version                   IN NUMBER,
    p_init_msg_list                 IN VARCHAR2 DEFAULT OKL_API.G_FALSE,
    x_return_status                 OUT NOCOPY VARCHAR2,
    x_msg_count                     OUT NOCOPY NUMBER,
    x_msg_data                      OUT NOCOPY VARCHAR2,
    p_source_trx_id                 IN  NUMBER,
    p_source_trx_name               IN  VARCHAR2,
    p_source_table                  IN  VARCHAR2) IS

    -- Local variables
    l_api_version                   CONSTANT NUMBER := 1;
    l_api_name                      CONSTANT VARCHAR2(30) := 'cancel_document_tax';
    l_return_status                 VARCHAR2(1) := OKL_API.G_RET_STS_SUCCESS;

    l_internal_org_id               NUMBER;
    l_application_id                NUMBER;
    l_entity_code                   VARCHAR2(30);
    l_event_class_code              VARCHAR2(30);
    i                               NUMBER;

    -- Local record structure
    l_txsv_tbl                      txsv_tbl_type;
    lx_txsv_tbl                     txsv_tbl_type;
    l_transaction_rec               transaction_rec_type;

    -- Cursor
    -- This cursor wll pick all the tax sources coresponding to the Rebook validate transaction
    -- Rebook can be abandoned only prior to Rebook activation. Hence tax sources
    -- picked by this cursor will --be the ones created at the time of validation
    CURSOR l_taxsources_csr(cp_trx_id IN NUMBER) IS
    SELECT id, org_id, application_id, entity_code, event_class_code
    FROM okl_tax_sources
    WHERE trx_id = cp_trx_id
    AND application_id = G_OKL_APPLICATION_ID
    AND TAX_CALL_TYPE_CODE = G_UPFRONT_TAX
    AND TAX_LINE_STATUS_CODE = G_ACTIVE_STATUS;

    CURSOR l_taxsources_prbk_csr(cp_trx_id IN NUMBER) IS
    SELECT id, org_id, entity_code, event_class_code
    FROM okl_tax_sources
    WHERE trx_id = cp_trx_id
    AND TAX_CALL_TYPE_CODE = G_UPFRONT_TAX
    AND TAX_LINE_STATUS_CODE = G_ACTIVE_STATUS;

    CURSOR l_trxcontracts_csr(cp_trx_id IN NUMBER, cp_trx_type_name IN VARCHAR2) IS
    SELECT '1'
    FROM   okl_trx_contracts a , okl_trx_types_tl b
    WHERE  a.id = cp_trx_id
    AND    a.try_id = b.id
    AND    b.name = cp_trx_type_name
    AND    language = 'US';

    CURSOR l_trxcontracts_base_csr(cp_trx_id IN NUMBER, cp_trx_type_name IN VARCHAR2) IS
    SELECT '1'
    FROM   okl_trx_contracts_all a , okl_trx_types_tl b
    WHERE  a.id = cp_trx_id
    AND    a.try_id = b.id
    AND    b.name = cp_trx_type_name
    AND    language = 'US';

  BEGIN
    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.cancel_document_tax','Begin(+)');
    END IF;

    --Print Input Variables
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.cancel_document_tax.',
              'p_init_msg_list :'||p_init_msg_list);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.cancel_document_tax.',
              'p_source_trx_id :'||p_source_trx_id);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.cancel_document_tax.',
              'p_source_trx_name :'||p_source_trx_name);
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.cancel_document_tax.',
              'p_source_table :'||p_source_table);
    END IF;

    --Check API version, initialize message list and create savepoint.
    l_return_status := OKL_API.START_ACTIVITY(l_api_name,
                                              G_PKG_NAME,
                                              p_init_msg_list,
                                              l_api_version,
                                              p_api_version,
                                              '_PVT',
                                              x_return_status);

    IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    -- Required Values
    IF p_source_trx_id IS NULL THEN
       OKL_API.set_message( p_msg_name      => G_REQUIRED_VALUE,
                            p_token1        => G_COL_NAME_TOKEN,
                            p_token1_value  => 'SOURCE_TRX_ID');
       RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    -- validate the source trx id
    IF (p_source_trx_name = 'Pre-Rebook') THEN
      OPEN  l_trxcontracts_base_csr(p_source_trx_id, p_source_trx_name);
      IF l_trxcontracts_base_csr%NOTFOUND THEN
        -- source trx id is invalid
        OKC_API.set_message( p_app_name      => 'OKC',
                             p_msg_name      => G_INVALID_VALUE,
                             p_token1        => G_COL_NAME_TOKEN,
                             p_token1_value  => 'SOURCE_TRX_ID');
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
      CLOSE l_trxcontracts_base_csr;
    ELSIF (p_source_trx_name = 'Rebook') THEN
      OPEN  l_trxcontracts_csr(p_source_trx_id, p_source_trx_name);
      IF l_trxcontracts_csr%NOTFOUND THEN
        -- source trx id is invalid
        OKC_API.set_message( p_app_name      => 'OKC',
                             p_msg_name      => G_INVALID_VALUE,
                             p_token1        => G_COL_NAME_TOKEN,
                             p_token1_value  => 'SOURCE_TRX_ID');
        RAISE OKL_API.G_EXCEPTION_ERROR;
      END IF;
      CLOSE l_trxcontracts_csr;
    END IF;

    IF (p_source_trx_name IN ('Pre-Rebook','Rebook')) THEN -- Main condition
      -- 'Pre-Rebook' condition is called as part of upgrade, to cancel pending
      -- rebook transactions cancel tax lines in OKL schema

      -- 'Rebook' condition is called after the upgrade to cancel tax lines,
      -- when a rebook is abandoned cancel tax lines in OKL and ebTax schema
          -- Rebook validation tax call would have been made using transaction type
      -- 'Rebook' and event class 'BOOKING'

      i := 1;
      IF (p_source_trx_name = 'Pre-Rebook') THEN

        FOR l_taxsources_prbk_rec in l_taxsources_prbk_csr(cp_trx_id  => p_source_trx_id) LOOP

          UPDATE okl_tax_sources SET tax_line_status_code = G_CANCELLED_STATUS
          WHERE id = l_taxsources_prbk_rec.id;

        END LOOP;

      ELSIF (p_source_trx_name = 'Rebook') THEN

        FOR l_taxsources_rec in l_taxsources_csr(cp_trx_id  => p_source_trx_id) LOOP

          l_txsv_tbl(i).id                   := l_taxsources_rec.id;
              l_txsv_tbl(i).tax_line_status_code := G_CANCELLED_STATUS;

          IF (i = 1) THEN
            l_internal_org_id   := l_taxsources_rec.org_id;
            l_application_id    := l_taxsources_rec.application_id;
            l_entity_code       := l_taxsources_rec.entity_code;
            l_event_class_code  := l_taxsources_rec.event_class_code;
          END IF;

          i := i + 1;

        END LOOP;

      END IF;

      IF (i > 1 AND p_source_trx_name = 'Rebook') THEN -- Update Tax Sources

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.cancel_document_tax.',
               'Calling OKL_TAX_SOURCES_PUB.update_tax_sources ');
        END IF;

        OKL_TAX_SOURCES_PUB.update_tax_sources(p_api_version     => p_api_version
                                              ,p_init_msg_list   => p_init_msg_list
                                              ,x_return_status   => l_return_status
                                              ,x_msg_count       => x_msg_count
                                              ,x_msg_data        => x_msg_data
                                              ,p_txsv_tbl        => l_txsv_tbl
                                              ,x_txsv_tbl        => lx_txsv_tbl);

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.cancel_document_tax.',
              'Return Status' || l_return_status);
        END IF;

        IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;

        -- 'Rebook' specific condition to cancel tax lines in ebTax schema
        l_transaction_rec.internal_organization_id := l_internal_org_id;
        l_transaction_rec.application_id           := l_application_id;
        l_transaction_rec.entity_code              := l_entity_code;
        l_transaction_rec.event_class_code         := l_event_class_code;
        l_transaction_rec.event_type_code          := G_BOOKING_CANCEL;
        l_transaction_rec.trx_id                   :=  p_source_trx_id;

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.cancel_document_tax.',
            'Calling  OKL_TAX_INTERFACE_PVT.cancel_document_tax ');
        END IF;

        OKL_TAX_INTERFACE_PVT.update_document(p_api_version     => p_api_version,
                                              p_init_msg_list   => p_init_msg_list,
                                              x_return_status   => l_return_status,
                                              x_msg_count       => x_msg_count,
                                              x_msg_data        => x_msg_data,
                                              p_transaction_rec => l_transaction_rec);

        IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
          FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.cancel_document_tax.',
            'Return Status' || l_return_status);
        END IF;

        IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
        ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
          RAISE OKL_API.G_EXCEPTION_ERROR;
        END IF;

      END IF; -- Update Tax Sources

    END IF; -- Main condition

    x_return_status := l_return_status;

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.cancel_document_tax ','End(-)');
    END IF;

    -- end the transaction
    OKL_API.END_ACTIVITY(x_msg_count, x_msg_data);
  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN

      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.cancel_document_tax ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
      END IF;

      IF (l_taxsources_csr%ISOPEN) THEN
        CLOSE l_taxsources_csr;
      END IF;

      IF (l_trxcontracts_csr%ISOPEN) THEN
        CLOSE l_trxcontracts_csr;
      END IF;

      IF (l_trxcontracts_base_csr%ISOPEN) THEN
        CLOSE l_trxcontracts_base_csr;
      END IF;

      IF (l_taxsources_prbk_csr%ISOPEN) THEN
        CLOSE l_taxsources_prbk_csr;
      END IF;

      x_return_status := OKL_API.HANDLE_EXCEPTIONS
      ( l_api_name,
        G_PKG_NAME,
        'OKL_API.G_RET_STS_ERROR',
        x_msg_count,
        x_msg_data,
        '_PVT');
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN

      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.cancel_document_tax ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_UNEXPECTED_ERROR');
      END IF;

      IF (l_taxsources_csr%ISOPEN) THEN
        CLOSE l_taxsources_csr;
      END IF;

      IF (l_trxcontracts_csr%ISOPEN) THEN
        CLOSE l_trxcontracts_csr;
      END IF;

      IF (l_trxcontracts_base_csr%ISOPEN) THEN
        CLOSE l_trxcontracts_base_csr;
      END IF;

      IF (l_taxsources_prbk_csr%ISOPEN) THEN
        CLOSE l_taxsources_prbk_csr;
      END IF;

      x_return_status :=OKL_API.HANDLE_EXCEPTIONS
      ( l_api_name,
        G_PKG_NAME,
        'OKL_API.G_RET_STS_UNEXP_ERROR',
        x_msg_count,
        x_msg_data,
        '_PVT');
    WHEN OTHERS THEN

      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.cancel_document_tax ',
                  'EXCEPTION :'||sqlerrm);
      END IF;

      IF (l_taxsources_csr%ISOPEN) THEN
        CLOSE l_taxsources_csr;
      END IF;

      IF (l_trxcontracts_csr%ISOPEN) THEN
        CLOSE l_trxcontracts_csr;
      END IF;

      IF (l_trxcontracts_base_csr%ISOPEN) THEN
        CLOSE l_trxcontracts_base_csr;
      END IF;

      IF (l_taxsources_prbk_csr%ISOPEN) THEN
        CLOSE l_taxsources_prbk_csr;
      END IF;

      x_return_status :=OKL_API.HANDLE_EXCEPTIONS
      ( l_api_name,
        G_PKG_NAME,
        'OTHERS',
        x_msg_count,
        x_msg_data,
        '_PVT');
  END cancel_document_tax;

/*========================================================================
 | PUBLIC PROCEDURE copy_global_tax_data
 |
 | DESCRIPTION
 |    This procedure is called by tax module to populate tax data into ZX global
 |    session table. eBtax uses this table to show the tax data for Quote
 |    objects (Sales Quote, Lease Application and Termination Quote)
 |
 | CALLED FROM                                  OLM Tax Module
 |
 |
 | CALLS PROCEDURES/FUNCTIONS
 |     OKL_TAX_INTERFACE_PVT.copy_global_tax_data
 |
 | PARAMETERS
 |      p_trx_id                     -- Transaction Identifier
 |      p_trx_line_id                -- Transaction Line Identifier
 |      p_application_id             -- Application Identifier
 |      p_trx_level_type             -- Transaction level type
 |      p_entity_code                -- Entity code
 |      p_event_class_code           -- Event class code
 |
 | KNOWN ISSUES
 |
 | NOTES
 |
 |
 | MODIFICATION HISTORY
 | Date          Author     Description of Changes
 | 04-APR-07    RRAVIKIR      Created
 |
 *=======================================================================*/
  PROCEDURE copy_global_tax_data (
    p_api_version                   IN NUMBER,
    p_init_msg_list                 IN VARCHAR2 DEFAULT OKL_API.G_FALSE,
    x_return_status                 OUT NOCOPY VARCHAR2,
    x_msg_count                     OUT NOCOPY NUMBER,
    x_msg_data                      OUT NOCOPY VARCHAR2,
    p_trx_id                        IN  NUMBER,
    p_trx_line_id                   IN  NUMBER,
    p_application_id                IN  NUMBER,
    p_trx_level_type                        IN  VARCHAR2,
    p_entity_code                                   IN  VARCHAR2,
    p_event_class_code              IN  VARCHAR2) IS

    -- Local variables
    l_api_version                   CONSTANT NUMBER := 1;
    l_api_name                      CONSTANT VARCHAR2(30) := 'copy_global_tax_data';
    l_return_status                 VARCHAR2(1) := OKL_API.G_RET_STS_SUCCESS;

  BEGIN
    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.copy_global_tax_data','Begin(+)');
    END IF;

    --Print Input Variables
    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.copy_global_tax_data.',
              'p_init_msg_list :'||p_init_msg_list);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.copy_global_tax_data.',
              'p_trx_id :'||p_trx_id);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.copy_global_tax_data.',
              'p_trx_line_id :'||p_trx_line_id);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.copy_global_tax_data.',
              'p_application_id :'||p_application_id);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.copy_global_tax_data.',
              'p_trx_level_type :'||p_trx_level_type);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.copy_global_tax_data.',
              'p_entity_code :'||p_entity_code);
         FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.copy_global_tax_data.',
              'p_event_class_code :'||p_event_class_code);
    END IF;

    --Check API version, initialize message list and create savepoint.
    l_return_status := OKL_API.START_ACTIVITY(l_api_name,
                                              G_PKG_NAME,
                                              p_init_msg_list,
                                              l_api_version,
                                              p_api_version,
                                              '_PVT',
                                              x_return_status);

    IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.copy_global_tax_data.',
          'Calling OKL_TAX_INTERFACE_PVT.copy_global_tax_data');
    END IF;

    OKL_TAX_INTERFACE_PVT.copy_global_tax_data(p_api_version          => p_api_version,
                                               p_init_msg_list        => p_init_msg_list,
                                               x_return_status        => l_return_status,
                                               x_msg_count            => x_msg_count,
                                               x_msg_data             => x_msg_data,
                                               p_trx_id               => p_trx_id,
                                               p_trx_line_id          => p_trx_line_id,
                                               p_application_id       => p_application_id,
                                               p_trx_level_type           => p_trx_level_type,
                                               p_entity_code              => p_entity_code,
                                               p_event_class_code     => p_event_class_code);

    IF (G_DEBUG_LEVEL_STATEMENT >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_STATEMENT,'OKL_PROCESS_SALES_TAX_PVT.copy_global_tax_data.',
          'After calling OKL_TAX_INTERFACE_PVT.copy_global_tax_data - Return Status ' || l_return_status);
    END IF;

    IF (l_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    ELSIF (l_return_status = OKL_API.G_RET_STS_ERROR) THEN
      RAISE OKL_API.G_EXCEPTION_ERROR;
    END IF;

    x_return_status := l_return_status;

    IF (G_DEBUG_LEVEL_PROCEDURE >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.STRING(G_DEBUG_LEVEL_PROCEDURE,'OKL_PROCESS_SALES_TAX_PVT.copy_global_tax_data ','End(-)');
    END IF;

    -- end the transaction
    OKL_API.END_ACTIVITY(x_msg_count, x_msg_data);
  EXCEPTION
    WHEN OKL_API.G_EXCEPTION_ERROR THEN

      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.copy_global_tax_data ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_ERROR');
      END IF;

      x_return_status := OKL_API.HANDLE_EXCEPTIONS
      (
        l_api_name,
        G_PKG_NAME,
        'OKL_API.G_RET_STS_ERROR',
        x_msg_count,
        x_msg_data,
        '_PVT'
      );
    WHEN OKL_API.G_EXCEPTION_UNEXPECTED_ERROR THEN
      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.copy_global_tax_data ',
                  'EXCEPTION :'||'OKL_API.G_EXCEPTION_UNEXPECTED_ERROR');
      END IF;

      x_return_status :=OKL_API.HANDLE_EXCEPTIONS
      (
        l_api_name,
        G_PKG_NAME,
        'OKL_API.G_RET_STS_UNEXP_ERROR',
        x_msg_count,
        x_msg_data,
        '_PVT'
      );
    WHEN OTHERS THEN

      IF (G_DEBUG_LEVEL_EXCEPTION >= G_DEBUG_CURRENT_RUNTIME_LEVEL) THEN
         FND_LOG.STRING(G_DEBUG_LEVEL_EXCEPTION,'OKL_PROCESS_SALES_TAX_PVT.copy_global_tax_data ',
                  'EXCEPTION :'||sqlerrm);
      END IF;

      x_return_status :=OKL_API.HANDLE_EXCEPTIONS
      (
        l_api_name,
        G_PKG_NAME,
        'OTHERS',
        x_msg_count,
        x_msg_data,
        '_PVT'
      );
  END copy_global_tax_data;

END OKL_PROCESS_SALES_TAX_PVT;

/
