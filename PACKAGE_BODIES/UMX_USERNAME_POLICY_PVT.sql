--------------------------------------------------------
--  DDL for Package Body UMX_USERNAME_POLICY_PVT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."UMX_USERNAME_POLICY_PVT" AS
/* $Header: UMXVUNPB.pls 120.5 2005/09/01 23:18:04 kching noship $ */

  --
  -- Procedure        :  get_suggested_username
  -- Type             :  Public
  -- Pre_reqs         :  None
  -- Description      :  This API will return the suggested user name for a person.
  --                     The user name will be generated via the
  --                     oracle.apps.fnd.umx.username.generate Business Event
  --                     which will be raised by this API.  The event could
  --                     return a null value as the user name if the user name
  --                     could not be generated.
  -- Input Parameters :
  -- @param     p_person_party_id
  --    Description:  Person Party ID of the person who to generate
  --                  a username for.
  --    Required   :  N
  -- Output Parameters :
  --   x_suggested_username: Username generated by the Username Policy. May return null.
  --
  --
  procedure get_suggested_username (p_person_party_id    in HZ_PARTIES.PARTY_ID%TYPE default null,
                                    x_suggested_username out nocopy FND_USER.USER_NAME%TYPE) is

    l_parameter_list wf_parameter_list_t;
    l_event_key varchar2 (240);

  begin

    if (FND_LOG.G_CURRENT_RUNTIME_LEVEL <= FND_LOG.LEVEL_PROCEDURE) then
      FND_LOG.STRING (FND_LOG.LEVEL_PROCEDURE,
                      'fnd.plsql.UMXVUNPB.get_suggested_username.begin',
                      'p_person_party_id: ' || p_person_party_id);
    end if;

    -- Raising the Business Event
    -- p_person_party_id could be null.  In this case, we expect the subscription to handle
    -- the null party id.
    wf_event.addParametertoList('UMX_PERSON_PARTY_ID', p_person_party_id, l_parameter_list);
    select UMX_USERNAME_POLICY_S.nextval into l_event_key from dual;

    -- Log the event key
    if (FND_LOG.G_CURRENT_RUNTIME_LEVEL <= FND_LOG.LEVEL_PROCEDURE) then
      FND_LOG.STRING (FND_LOG.LEVEL_PROCEDURE,
                      'fnd.plsql.UMXVUNPB.run_policy',
                      'Raising event with event key: ' || l_event_key);
    end if;

    -- Raise the generate user name event.
    -- Calling raise3 because l_parameter_list is an in/out parameter.
    wf_event.raise3('oracle.apps.fnd.umx.username.generate', l_event_key, null, l_parameter_list, sysdate);
    x_suggested_username := wf_event.getValueForParameter ('UMX_GENERATED_USERNAME', l_parameter_list);

    if (FND_LOG.G_CURRENT_RUNTIME_LEVEL <= FND_LOG.LEVEL_PROCEDURE) then
      FND_LOG.STRING (FND_LOG.LEVEL_PROCEDURE,
                      'fnd.plsql.UMXVUNPB.get_suggested_username.end',
                      'x_suggested_username: ' || x_suggested_username);
    end if;

  end get_suggested_username;

  --
  -- Procedure        :  get_username_policy_desc
  -- Type             :  Public
  -- Pre_reqs         :  None
  -- Description      :  This API will return the description of the user name
  --                     policy.  The return parameters / user name policy is
  --                     based on the UMX: User Name Policy (UMX_USERNAME_POLICY)
  --                     profile option, which points to a LOOKUP TYPE that
  --                     should include the following:
  --
  --                       LOOKUP CODES: DESCRIPTION, PROMPT, HINT
  --
  --                     with the appropriate LOOKUP MEANING defined. Example:
  --
  --                       LOOKUP TYPE: UMX_USERNAME_POLICY:EMAIL
  --
  --  LOOKUP CODE    MEANING                     DESCRIPTION
  --  -----------    --------------------------  -------------------------------
  --  PROMPT         User Name                   Prompt of the user name text
  --                                             input field.
  --
  --  DESCRIPTION    User Names must be based    Description of the policy
  --                 on Email Address
  --
  --  HINT           example: michael@email.com  Example of what the username should
  --                                             look like.
  --
  -- Input Parameters :
  -- Output Parameters :
  -- x_policy_code:      User Name Policy code. Preseeded policies are:
  --
  --                     Code: UMX_USERNAME_POLICY:EMAIL
  --                     Meaning: User name should be defined as Email Address.
  --                              Product teams may choose to hide the email
  --                              field in any account creation / registration
  --                              UI's as long as the entered username (email)
  --                              is copied into the fnd_user.email_address field
  --                              as well.
  --
  --                     Code: UMX_USERNAME_POLICY:NONE
  --                     Meaning: No username policy / format defined, freetext
  --
  --                     Code: Anything else, this would be a custom policy defined
  --                           at a client site.
  --
  -- x_description:      User Name Policy description. May be null. For example:
  --
  --                       "User Names must be based on <b>Email Address</b>".
  --                       The description can be displayed as a quick tip in
  --                       the user account creation/registration page.
  --
  -- x_prompt:           Prompt of the User Name field. Defaults to "User Name" if
  --                     none is defined in the policy.
  --
  -- x_hint:             An example of the user name format. May be null. For
  --                     example:
  --
  --                       "(example: first.last@domain.com)"
  --
  --                     The hint can be displayed as an inline hint below the
  --                     User Name field in any user account creation/registration
  --                     page.
  --
  --
  procedure get_username_policy_desc
                (x_policy_code out nocopy FND_LOOKUP_TYPES.LOOKUP_TYPE%TYPE,
                 x_description out nocopy FND_LOOKUP_VALUES.MEANING%TYPE,
                 x_prompt      out nocopy FND_LOOKUP_VALUES.MEANING%TYPE,
                 x_hint        out nocopy FND_LOOKUP_VALUES.MEANING%TYPE) is

    cursor getPolicyDesc (p_lookup_type in varchar2) is
      select lookup_code, meaning
      from   fnd_lookups
      where  lookup_type = p_lookup_type
      and    lookup_code in ('DESCRIPTION', 'PROMPT', 'HINT')
      and    enabled_flag = 'Y'
      and    start_date_active < sysdate
      and    nvl (end_date_active, sysdate + 1) > sysdate;

    cursor get_none_policy_prompt is
      select meaning
      from   fnd_lookups
      where  lookup_type = 'UMX_USERNAME_POLICY:NONE'
      and    lookup_code = 'PROMPT'
      and    enabled_flag = 'Y'
      and    start_date_active < sysdate
      and    nvl (end_date_active, sysdate + 1) > sysdate;

  begin

    if (FND_LOG.G_CURRENT_RUNTIME_LEVEL <= FND_LOG.LEVEL_PROCEDURE) then
      FND_LOG.STRING (FND_LOG.LEVEL_PROCEDURE,
                      'fnd.plsql.UMXVUNPB.get_username_policy_desc.begin', null);
    end if;

    -- First, get the Policy Code
    fnd_profile.get (name => 'UMX_USERNAME_POLICY',
                     val  => x_policy_code);

    -- Now, get the of the Policy
    if (x_policy_code is null) then
      -- Get the default policy: UMX_USERNAME_POLICY:NONE
      for lookup_code in getPolicyDesc ('UMX_USERNAME_POLICY:NONE') loop
        if (lookup_code.lookup_code = 'DESCRIPTION') then
          x_description :=  lookup_code.meaning;
        elsif (lookup_code.lookup_code = 'PROMPT') then
          x_prompt := lookup_code.meaning;
        else
          x_hint := lookup_code.meaning;
        end if;
      end loop;
    else
      for lookup_code in getPolicyDesc (x_policy_code) loop
        if (lookup_code.lookup_code = 'DESCRIPTION') then
          x_description :=  lookup_code.meaning;
        elsif (lookup_code.lookup_code = 'PROMPT') then
          x_prompt := lookup_code.meaning;
        else
          x_hint := lookup_code.meaning;
        end if;
      end loop;

      -- If x_prompt is missing, we have to defualt to the no policy ('User Name').
      if (x_prompt is null) then
        open get_none_policy_prompt;
        fetch get_none_policy_prompt into x_prompt;
        close get_none_policy_prompt;
      end if;
    end if;

    if (FND_LOG.G_CURRENT_RUNTIME_LEVEL <= FND_LOG.LEVEL_PROCEDURE) then
      FND_LOG.STRING (FND_LOG.LEVEL_PROCEDURE,
                      'fnd.plsql.UMXVUNPB.get_username_policy_desc.end',
                      'x_policy_code: ' || x_policy_code ||
                      ' | x_description: ' || x_description ||
                      ' | x_prompt: ' || x_prompt ||
                      ' | x_hint: ' || x_hint);
    end if;

  end get_username_policy_desc;

  --
  -- Procedure        :  policy_subscription
  -- Type             :  Private
  -- Pre_reqs         :  None
  -- Description      :  The is the subscription API which registers to the
  --                     oracle.apps.fnd.umx.username.generate Workflow Business
  --                     Event.  This subscription will generate the suggested
  --                     user name by querying the email address stored in TCA.
  --                     This API is intented to be called as a Business Subscription
  --                     Rule Function.
  -- Input Parameters :
  -- @param     p_subscription_guid
  --    Description:  Workflow Business Subscription GUID
  --    Required   :  Y
  -- @param     p_event
  --    Description:  The event message.
  --    Required   :  Y
  -- Output Parameters :
  --
  function policy_subscription (p_subscription_guid in raw,
                                p_event             in out nocopy WF_EVENT_T) return varchar2 is

    l_person_party_id HZ_PARTIES.PARTY_ID%type;
    l_username        fnd_user.user_name%type;

  begin

    l_person_party_id := p_event.getValueForParameter ('UMX_PERSON_PARTY_ID');

    if (FND_LOG.G_CURRENT_RUNTIME_LEVEL <= FND_LOG.LEVEL_PROCEDURE) then
      FND_LOG.STRING (FND_LOG.LEVEL_PROCEDURE,
                      'fnd.plsql.UMXVUNPB.policy_subscription.begin',
                      'p_subscription_guid: ' || p_subscription_guid ||
                      ' | l_person_party_id: ' || l_person_party_id);
    end if;


    UMX_REGISTER_USER_PVT.Get_Party_Email_Address (
          p_person_party_id => l_person_party_id,
          x_email_address   => l_username);

    p_event.addParametertoList('UMX_GENERATED_USERNAME', l_username);

    if (FND_LOG.G_CURRENT_RUNTIME_LEVEL <= FND_LOG.LEVEL_PROCEDURE) then
      FND_LOG.STRING (FND_LOG.LEVEL_PROCEDURE,
                      'fnd.plsql.UMXVUNPB.policy_subscription.end',
                      'l_username: ' || l_username);
    end if;

    return 'SUCCESS';

  end policy_subscription;

/* =========================START OBSOLETE IMPLEMENTATION======================*/
  --
  -- Procedure        :  run_policy
  -- Type             :  Private
  -- Pre_reqs         :  None
  -- Description      :  (OBSOLETED, please use the "GET" API)
  --                     This API will invoke the Username Policy
  --                     workflow process and return the generated
  --                     username and status "SUCCESS".  It will
  --                     return error message and status "FAIL"
  --                     if error occurs.
  -- Input Parameters :
  -- @param     p_reg_serv_code
  --    Description:  Registration Service Code
  --    Required   :  Y
  -- @param     p_person_party_id
  --    Description:  Person Party ID of the person who generate
  --                  a username for.
  --    Required   :  Y
  -- Output Parameters :
  -- x_generated_username: Username generated by the Username Policy
  -- x_policy_override: The Username Policy determine if this policy
  --                    can be overridden by the caller.
  --                    Y - caller can override the policy
  --                    N - caller cannot override the policy
  -- x_result_code: Result code from running the Username Policy
  --                (SUCCESS/FAIL)
  -- x_policy_code: Policy Type (Example: EMAIL)
  -- x_policy_name: Policy Name (Example: Email Address)
  -- x_policy_desc: A brief description of the format used to generate
  --                the username. (Example: "(exameple: first.last@domain.com)")
  -- x_error_msg: Description why the Username Policy failed
  --
  --
  Procedure run_policy (
    p_reg_serv_code      in  UMX_REG_SERVICES_B.REG_SERVICE_CODE%TYPE,
    p_person_party_id    in  HZ_PARTIES.PARTY_ID%TYPE,
    x_generated_username out NOCOPY FND_USER.USER_NAME%TYPE,
    x_policy_override    out NOCOPY varchar2,
    x_policy_code        out NOCOPY varchar2,
    x_policy_name        out NOCOPY varchar2,
    x_policy_desc        out NOCOPY varchar2,
    x_result_code        out NOCOPY varchar2,
    x_error_msg          out NOCOPY varchar2
  ) is

    l_user_id FND_USER.USER_ID%type;
    l_person_party_id FND_USER.PERSON_PARTY_ID%type;

  begin

    run_policy (p_reg_serv_code, p_person_party_id, x_generated_username,
                x_policy_override, x_policy_code, x_policy_name, x_policy_desc,
                x_result_code, x_error_msg, l_user_id, l_person_party_id);

  end run_policy;

  --
  -- Procedure        :  run_policy
  -- Type             :  Private
  -- Pre_reqs         :  None
  -- Description      :  (OBSOLETED, please use the "GET" API)
  --                     workflow process and return the generated
  --                     username and status "SUCCESS".  It will
  --                     return error message and status "FAIL"
  --                     if error occurs.
  -- Input Parameters :
  -- @param     p_reg_serv_code
  --    Description:  Registration Service Code
  --    Required   :  Y
  -- @param     p_person_party_id
  --    Description:  Person Party ID of the person who generate
  --                  a username for.
  --    Required   :  Y
  -- Output Parameters :
  -- x_generated_username: Username generated by the Username Policy
  -- x_policy_override: The Username Policy determine if this policy
  --                    can be overridden by the caller.
  --                    Y - caller can override the policy
  --                    N - caller cannot override the policy
  -- x_result_code: Result code from running the Username Policy
  --                (SUCCESS/FAIL)
  -- x_policy_code: Policy Type (Example: EMAIL)
  -- x_policy_name: Policy Name (Example: Email Address)
  -- x_policy_desc: A brief description of the format used to generate
  --                the username. (Example: "(exameple: first.last@domain.com)")
  -- x_error_msg: Description why the Username Policy failed
  -- x_exist_user_id: User ID of the existing person.
  -- x_exist_per_party_id: Person party ID of the existing person.
  --
  --
  Procedure run_policy (
    p_reg_serv_code       in  UMX_REG_SERVICES_B.REG_SERVICE_CODE%TYPE,
    p_person_party_id     in  HZ_PARTIES.PARTY_ID%TYPE,
    x_generated_username  out NOCOPY FND_USER.USER_NAME%TYPE,
    x_policy_override     out NOCOPY varchar2,
    x_policy_code         out NOCOPY varchar2,
    x_policy_name         out NOCOPY varchar2,
    x_policy_desc         out NOCOPY varchar2,
    x_result_code         out NOCOPY varchar2,
    x_error_msg           out NOCOPY varchar2,
    x_exist_user_id       out NOCOPY FND_USER.USER_ID%TYPE,
    x_exist_per_party_id  out NOCOPY FND_USER.PERSON_PARTY_ID%TYPE
  ) is
  cursor getRegTypeCode (l_reg_serv_code in UMX_reg_services_b.reg_service_code%type) is
    select reg_service_type
    from   UMX_reg_services_b
    where  reg_service_code = l_reg_serv_code;

  cursor get_person_party_id (p_user_name in FND_USER.USER_NAME%type) is
    select user_id, person_party_id
    from   fnd_user
    where  user_name = p_user_name;

  l_reg_type_code UMX_reg_services_b.reg_service_type%type;
  l_itemkey varchar2 (6) := '#SYNCH';

  begin

    if (FND_LOG.G_CURRENT_RUNTIME_LEVEL <= FND_LOG.LEVEL_PROCEDURE) then
      FND_LOG.STRING (FND_LOG.LEVEL_PROCEDURE,
                      'fnd.plsql.UMXVUNPB.run_policy.begin',
                      'p_reg_serv_code: ' || p_reg_serv_code ||
                      ' | p_person_party_id: ' || p_person_party_id);
    end if;

    -- Get the Registration Type Code from UMX_REG_SERVICES_B
    open getRegTypeCode (p_reg_serv_code);
    fetch getRegTypeCode into l_reg_type_code;
    if (getRegTypeCode%notfound) then
      -- Cannot find the Registration Type Code, raise error
      close getRegTypeCode;
      fnd_message.set_name('FND','UMX_COMMON_MISS_PARAM_MSG');
      fnd_message.set_token('PARAM', 'Registration Type Code');
      fnd_message.set_token('API', 'JTF_UM_WF_APPROVAL.CreateProcess');
      raise_application_error ('-20000', fnd_message.get);
    end if;
    close getRegTypeCode;

    -- Start Process
    wf_engine.CreateProcess (itemtype => g_itemtype,
                             itemkey  => l_itemkey);

    -- Initialize workflow item attributes
    wf_engine.SetItemAttrText (itemtype => g_itemtype,
                               itemkey  => l_itemkey,
                               aname    => 'REG_SERV_CODE',
                               avalue   =>  p_reg_serv_code);

    wf_engine.SetItemAttrText (itemtype => g_itemtype,
                               itemkey  => l_itemkey,
                               aname    => 'REG_TYPE_CODE',
                               avalue   =>  l_reg_type_code);

    wf_engine.SetItemAttrNumber (itemtype => g_itemtype,
                                 itemkey  => l_itemkey,
                                 aname    => 'PERSON_PARTY_ID',
                                 avalue   => p_person_party_id);

    wf_engine.StartProcess (itemtype => g_itemtype,
                            itemkey  => l_itemkey);

    x_generated_username := wf_engine.GetItemAttrText (
                              itemtype => g_itemtype,
                              itemkey  => l_itemkey,
                              aname    => 'GENERATED_USERNAME');

    x_policy_override := wf_engine.GetItemAttrText (
                           itemtype => g_itemtype,
                           itemkey  => l_itemkey,
                           aname    => 'POLICY_OVERRIDE');

-- For Testing
-- x_policy_override := 'N';

    x_policy_code := wf_engine.GetItemAttrText (
                       itemtype => g_itemtype,
                       itemkey  => l_itemkey,
                       aname    => 'POLICY_CODE');

    x_policy_name := wf_engine.GetItemAttrText (
                       itemtype => g_itemtype,
                       itemkey  => l_itemkey,
                       aname    => 'POLICY_NAME');

    x_policy_desc := wf_engine.GetItemAttrText (
                       itemtype => g_itemtype,
                       itemkey  => l_itemkey,
                       aname    => 'POLICY_DESC');

    x_result_code := wf_engine.GetItemAttrText (
                       itemtype => g_itemtype,
                       itemkey  => l_itemkey,
                       aname    => 'RESULT_CODE');

    x_error_msg := wf_engine.GetItemAttrText (
                     itemtype => g_itemtype,
                     itemkey  => l_itemkey,
                     aname    => 'ERROR_MSG');

    if (x_error_msg = 'UMX_CREATEUSERACCT_ACC_EXIS_ER') then
      -- We need to get the person party id of the existing user
      open get_person_party_id (p_user_name => x_generated_username);
      fetch get_person_party_id into x_exist_user_id, x_exist_per_party_id;
      close get_person_party_id;
    end if;

    if (FND_LOG.G_CURRENT_RUNTIME_LEVEL <= FND_LOG.LEVEL_PROCEDURE) then
      FND_LOG.STRING (FND_LOG.LEVEL_PROCEDURE,
                      'fnd.plsql.UMXVUNPB.run_policy.end',
                      'x_generated_username: ' || x_generated_username ||
                      ' | x_policy_override: ' || x_policy_override ||
                      ' | x_policy_code: ' || x_policy_code ||
                      ' | x_policy_name: ' || x_policy_name ||
                      ' | x_policy_desc: ' || x_policy_desc ||
                      ' | x_result_code: ' || x_result_code ||
                      ' | x_error_msg: ' || x_error_msg);
    end if;

  end run_policy;

  --
  -- Procedure
  --      Selector
  --
  -- Description
  --      (OBSOLETED) Determine which process to run
  -- IN
  --   itemtype  - A valid item type from (WF_ITEM_TYPES table).
  --   itemkey   - A string generated from the application object's primary key.
  --   actid     - The function activity(instance id).
  --   funcmode  - Run/Cancel/Timeout
  -- OUT
  --   resultout - Name of workflow process to run
  --
  procedure Selector (item_type    in  varchar2,
                      item_key     in  varchar2,
                      activity_id  in  number,
                      command      in  varchar2,
                      resultout    out NOCOPY varchar2) is

  begin

    -- RUN mode - normal process execution
    if (command = 'RUN') then
      -- Return process to run
      resultout := 'UMX_USERNAME_POLICY';
    end if;

  exception
    when others then
      wf_core.context ('UMX_USERNAME_POLICY_PVT', 'Selector', item_type,
                        item_key, to_char (activity_id), command);
      raise;
  end selector;

  --
  -- Procedure
  --      gen_username
  --
  -- Description
  --      (OBSOLETED) Generate the username
  -- IN
  --   itemtype  - A valid item type from (WF_ITEM_TYPES table).
  --   itemkey   - A string generated from the application object's primary key.
  --   actid     - The function activity(instance id).
  --   funcmode  - Run/Cancel/Timeout
  -- OUT
  --   resultout - Name of workflow process to run
  --
  procedure gen_username (item_type    in  varchar2,
                          item_key     in  varchar2,
                          activity_id  in  number,
                          command      in  varchar2,
                          resultout    out NOCOPY varchar2) is

  l_person_party_id HZ_PARTIES.PARTY_ID%type;
  l_username wf_item_attribute_values.text_value%type;

  begin

    -- RUN mode - normal process execution
    if (command = 'RUN') then

      l_person_party_id := wf_engine.GetItemAttrNumber (
        itemtype => item_type,
        itemkey  => item_key,
        aname    => 'PERSON_PARTY_ID');

      -- We need to get email address from TCA
      -- Email will be the username in this policy
      UMX_REGISTER_USER_PVT.Get_Party_Email_Address (
          p_person_party_id => l_person_party_id,
          x_email_address   => l_username);

-- For testing
-- l_username := null;
      if (l_username is null) then
        -- No email address, error occur
        resultout := 'FAIL';

        wf_engine.SetItemAttrText (
            itemtype => item_type,
            itemkey  => item_key,
            aname    => 'ERROR_MSG',
            avalue   => 'UMX_CREATEUSERACCT_NOEMAIL_ERR');

      else

        resultout := 'SUCCESS';

        -- Write the username to the WF Attribute
        wf_engine.SetItemAttrText (
            itemtype => item_type,
            itemkey  => item_key,
            aname    => 'GENERATED_USERNAME',
            avalue   => upper(l_username));

      end if;

      wf_engine.SetItemAttrText (
          itemtype => item_type,
          itemkey  => item_key,
          aname    => 'RESULT_CODE',
          avalue   => resultout);

    end if;

  exception
    when others then
      wf_core.context ('UMX_USERNAME_POLICY_PVT', 'gen_username',
                        item_type, item_key, to_char (activity_id), command);
      raise;
  end gen_username;

  --
  -- Procedure
  --      chk_username_avail
  --
  -- Description
  --      (OBSOLETED) Check if the username is available in FND_USER table
  -- IN
  --   itemtype  - A valid item type from (WF_ITEM_TYPES table).
  --   itemkey   - A string generated from the application object's primary key.
  --   actid     - The function activity(instance id).
  --   funcmode  - Run/Cancel/Timeout
  -- OUT
  --   resultout - Name of workflow process to run
  --
  procedure chk_username_avail (item_type    in  varchar2,
                                item_key     in  varchar2,
                                activity_id  in  number,
                                command      in  varchar2,
                                resultout    out NOCOPY varchar2) is

  l_username wf_item_attribute_values.text_value%type;
  errorMess  varchar2 (30) := null;

  cursor checkUsername (l_username in fnd_user.user_name%type)is
    select 1
    from   fnd_user
    where  user_name = l_username;

  begin

    -- RUN mode - normal process execution
    if (command = 'RUN') then

      -- Set the default WF attribute
      resultout := 'SUCCESS';

      l_username := wf_engine.GetActivityAttrText (
        itemtype => item_type,
        itemkey  => item_key,
        actid    => activity_id,
        aname    => 'USERNAME');

      -- Check the length of the username.
      -- Username could be as big as 4000 characters
      if (LENGTH (l_username) > 100) then
        -- username is greater than the size of the available space for username
        errorMess := 'UMX_CREATEUSERACCT_LONG_EML_ER';

      else

        -- Check if this username is being used.
        open checkUsername (l_username);
        fetch checkUsername into l_username;
        if (checkUsername%found) then
-- For testing
-- if (checkUsername%notfound) then
          -- Username is already being taken.  Return failed.
          errorMess := 'UMX_CREATEUSERACCT_ACC_EXIS_ER';
        end if;
        close checkUsername;

      end if;

      if (errorMess is not null) then

        resultout := 'FAIL';

        -- Error occurs, set the error message.
        wf_engine.SetItemAttrText (
          itemtype => item_type,
          itemkey  => item_key,
          aname    => 'ERROR_MSG',
          avalue   => errorMess);

        wf_engine.SetItemAttrText (
          itemtype => item_type,
          itemkey  => item_key,
          aname    => 'RESULT_CODE',
          avalue   => resultout);

      end if;
    end if;

  exception
    when others then
      wf_core.context ('UMX_USERNAME_POLICY_PVT', 'chk_username_avail',
                        item_type, item_key, to_char (activity_id), command);
      raise;
  end chk_username_avail;

  --
  -- Procedure
  --      collision_resolution
  --
  -- Description
  --      (OBSOLETED) Template to resolve collision of username
  -- IN
  --   itemtype  - A valid item type from (WF_ITEM_TYPES table).
  --   itemkey   - A string generated from the application object's primary key.
  --   actid     - The function activity(instance id).
  --   funcmode  - Run/Cancel/Timeout
  -- OUT
  --   resultout - Name of workflow process to run
  --
  procedure collision_resolution (item_type    in  varchar2,
                                  item_key     in  varchar2,
                                  activity_id  in  number,
                                  command      in  varchar2,
                                  resultout    out NOCOPY varchar2) is

  begin

    -- RUN mode - normal process execution
    if (command = 'RUN') then

      raise_application_error ('-20000', 'User name cannot be generated; email address not found.');

    end if;

  exception
    when others then
      wf_core.context ('UMX_USERNAME_POLICY_PVT', 'collision_resolution',
                        item_type, item_key, to_char (activity_id), command);
      raise;
  end collision_resolution;
/* =========================END OBSOLETE IMPLEMENTATION======================*/
end UMX_USERNAME_POLICY_PVT;

/
