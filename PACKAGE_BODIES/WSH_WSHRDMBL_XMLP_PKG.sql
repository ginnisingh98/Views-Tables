--------------------------------------------------------
--  DDL for Package Body WSH_WSHRDMBL_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."WSH_WSHRDMBL_XMLP_PKG" AS
/* $Header: WSHRDMBLB.pls 120.2 2007/12/25 07:24:10 nchinnam noship $ */
  FUNCTION CF_SHIPPER_NAMEFORMULA(STOP_ID IN NUMBER) RETURN CHAR IS
    L_SHIPPER_NAME VARCHAR2(240);
  BEGIN
    SELECT
      ORGANIZATION_NAME
    INTO L_SHIPPER_NAME
    FROM
      WSH_SHIP_FROM_ORGS_V WSFO,
      WSH_TRIP_STOPS WTS
    WHERE TRIP_ID = P_TRIP_ID
      AND WTS.STOP_LOCATION_ID = WSFO.LOCATION_ID
      AND WTS.STOP_SEQUENCE_NUMBER = (
      SELECT
        MIN(STOP_SEQUENCE_NUMBER)
      FROM
        WSH_TRIP_STOPS
      WHERE TRIP_ID = WTS.TRIP_ID );
    RETURN L_SHIPPER_NAME;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN NULL;
    WHEN TOO_MANY_ROWS THEN
      BEGIN
        SELECT
          DISTINCT
          ORGANIZATION_NAME
        INTO L_SHIPPER_NAME
        FROM
          WSH_SHIP_FROM_ORGS_V WSFO,
          WSH_TRIP_STOPS WTS,
          WSH_NEW_DELIVERIES WND,
          WSH_DELIVERY_LEGS WDL
        WHERE WTS.TRIP_ID = P_TRIP_ID
          AND WTS.STOP_ID = CF_SHIPPER_NAMEFORMULA.STOP_ID
          AND WDL.PICK_UP_STOP_ID = WTS.STOP_ID
          AND WND.DELIVERY_ID = WDL.DELIVERY_ID
          AND WTS.STOP_LOCATION_ID = WSFO.LOCATION_ID
          AND WND.ORGANIZATION_ID = WSFO.ORGANIZATION_ID
          AND WTS.STOP_SEQUENCE_NUMBER = (
          SELECT
            MIN(STOP_SEQUENCE_NUMBER)
          FROM
            WSH_TRIP_STOPS
          WHERE TRIP_ID = WTS.TRIP_ID )
          AND ROWNUM = 1;
        RETURN L_SHIPPER_NAME;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RETURN NULL;
      END;
  END CF_SHIPPER_NAMEFORMULA;

  FUNCTION CF_ADDRESS_TRIPS_STOPSFORMULA(ADDRESS1 IN VARCHAR2
                                        ,ADDRESS2 IN VARCHAR2
                                        ,ADDRESS3 IN VARCHAR2
                                        ,ADDRESS4 IN VARCHAR2) RETURN CHAR IS
    L_ADDRESS VARCHAR2(1000) := NULL;
  BEGIN
    IF ADDRESS1 IS NOT NULL THEN
      L_ADDRESS := ADDRESS1;
    END IF;
    IF ADDRESS2 IS NOT NULL THEN
      L_ADDRESS := L_ADDRESS || ' ,' || ADDRESS2;
    END IF;
    IF ADDRESS3 IS NOT NULL THEN
      L_ADDRESS := L_ADDRESS || ' ,' || ADDRESS3;
    END IF;
    IF ADDRESS4 IS NOT NULL THEN
      L_ADDRESS := L_ADDRESS || ' ,' || ADDRESS4;
    END IF;
    RETURN (L_ADDRESS);
  END CF_ADDRESS_TRIPS_STOPSFORMULA;

  FUNCTION CF_ADDRESS_DELIVERIES_PICKEDUP(ADDRESS1_DP IN VARCHAR2
                                         ,ADDRESS2_DP IN VARCHAR2
                                         ,ADDRESS3_DP IN VARCHAR2
                                         ,ADDRESS4_DP IN VARCHAR2) RETURN CHAR IS
    L_ADDRESS VARCHAR2(1000) := NULL;
  BEGIN
    IF ADDRESS1_DP IS NOT NULL THEN
      L_ADDRESS := ADDRESS1_DP;
    END IF;
    IF ADDRESS2_DP IS NOT NULL THEN
      L_ADDRESS := L_ADDRESS || ' ,' || ADDRESS2_DP;
    END IF;
    IF ADDRESS3_DP IS NOT NULL THEN
      L_ADDRESS := L_ADDRESS || ' ,' || ADDRESS3_DP;
    END IF;
    IF ADDRESS4_DP IS NOT NULL THEN
      L_ADDRESS := L_ADDRESS || ' ,' || ADDRESS4_DP;
    END IF;
    RETURN (L_ADDRESS);
  END CF_ADDRESS_DELIVERIES_PICKEDUP;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
    L_RETURN_STATUS VARCHAR2(1);
  BEGIN
    IF (P_TRIP_ID IS NOT NULL AND NVL(P_PRINT_BOLS
       ,'N') = 'Y') THEN
      WSH_MBOLS_PVT.PRINT_BOLS(P_TRIP_ID => P_TRIP_ID
                              ,P_CONC_REQUEST_ID => P_CONC_REQUEST_ID
                              ,X_RETURN_STATUS => L_RETURN_STATUS);
      /*SRW.MESSAGE(1
                 ,'conc request id' || P_CONC_REQUEST_ID)*/NULL;
      /*SRW.MESSAGE(1
                 ,'l_return_status -->' || L_RETURN_STATUS)*/NULL;
      IF L_RETURN_STATUS <> 'S' THEN
        WSH_UTIL_CORE.PRINTMSG('ERROR: Failed to submit Bill of Lading concurrent request');
      END IF;
    END IF;
    BEGIN
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Failed in SRWEXIT')*/NULL;
        RAISE;
    END;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION CF_NO_DATA_FOUNDFORMULA RETURN CHAR IS
    L_TRIP_NAME WSH_TRIPS.NAME%TYPE;
  BEGIN
    SELECT
      NAME
    INTO L_TRIP_NAME
    FROM
      WSH_TRIPS
    WHERE TRIP_ID = P_TRIP_ID;
    RETURN ('*** No data found for trip ' || L_TRIP_NAME || ' ***');
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN NULL;
  END CF_NO_DATA_FOUNDFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Failed FND SRWINIT.')*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION CF_ITEM_DESCRIPTION_IPFORMULA(ITEM_DESCRIPTION_IP IN VARCHAR2
                                        ,INVENTORY_ITEM_ID_IP IN NUMBER
                                        ,ORGANIZATION_ID_IP IN NUMBER) RETURN CHAR IS
    CURSOR INVENTORY_LABEL(ID IN NUMBER,ORG_ID IN NUMBER) IS
      SELECT
        DESCRIPTION
      FROM
        MTL_SYSTEM_ITEMS_VL
      WHERE INVENTORY_ITEM_ID = ID
        AND ORGANIZATION_ID = ORG_ID;
    NAME VARCHAR2(250);
  BEGIN
    NAME := ITEM_DESCRIPTION_IP;
    IF (INVENTORY_ITEM_ID_IP IS NOT NULL) THEN
      OPEN INVENTORY_LABEL(INVENTORY_ITEM_ID_IP,ORGANIZATION_ID_IP);
      FETCH INVENTORY_LABEL
       INTO NAME;
      IF (INVENTORY_LABEL%NOTFOUND) THEN
        NAME := ITEM_DESCRIPTION_IP;
      END IF;
      CLOSE INVENTORY_LABEL;
    END IF;
    RETURN NAME;
  END CF_ITEM_DESCRIPTION_IPFORMULA;

  FUNCTION CF_ITEM_DESCRIPTION_DFORMULA(ITEM_DESCRIPTION_D IN VARCHAR2
                                       ,INVENTORY_ITEM_ID_D IN NUMBER
                                       ,ORGANIZATION_ID_D IN NUMBER) RETURN CHAR IS
    CURSOR INVENTORY_LABEL(ID IN NUMBER,ORG_ID IN NUMBER) IS
      SELECT
        DESCRIPTION
      FROM
        MTL_SYSTEM_ITEMS_VL
      WHERE INVENTORY_ITEM_ID = ID
        AND ORGANIZATION_ID = ORG_ID;
    NAME VARCHAR2(250);
  BEGIN
    NAME := ITEM_DESCRIPTION_D;
    IF (INVENTORY_ITEM_ID_D IS NOT NULL) THEN
      OPEN INVENTORY_LABEL(INVENTORY_ITEM_ID_D,ORGANIZATION_ID_D);
      FETCH INVENTORY_LABEL
       INTO NAME;
      IF (INVENTORY_LABEL%NOTFOUND) THEN
        NAME := ITEM_DESCRIPTION_D;
      END IF;
      CLOSE INVENTORY_LABEL;
    END IF;
    RETURN NAME;
  END CF_ITEM_DESCRIPTION_DFORMULA;

  FUNCTION CF_MODE_MEANFORMULA(MODE_OF_TRANSPORT IN VARCHAR2) RETURN CHAR IS
    L_MODE_MEAN VARCHAR2(80);
  BEGIN
    IF MODE_OF_TRANSPORT IS NOT NULL THEN
      SELECT
        MEANING
      INTO L_MODE_MEAN
      FROM
        FND_LOOKUP_VALUES_VL
      WHERE LOOKUP_TYPE = 'WSH_MODE_OF_TRANSPORT'
        AND LOOKUP_CODE = MODE_OF_TRANSPORT;
    ELSE
      L_MODE_MEAN := NULL;
    END IF;
    RETURN L_MODE_MEAN;
  END CF_MODE_MEANFORMULA;

  FUNCTION CF_SERVICE_LEVELFORMULA(SERVICE_LEVEL IN VARCHAR2) RETURN CHAR IS
    L_SERVICE_LEVEL VARCHAR2(80);
    L_LOOKUP_TYPE VARCHAR2(30);
  BEGIN
    IF SERVICE_LEVEL IS NOT NULL THEN
      L_LOOKUP_TYPE := 'WSH_SERVICE_LEVELS';
      SELECT
        MEANING
      INTO L_SERVICE_LEVEL
      FROM
        FND_LOOKUP_VALUES_VL
      WHERE LOOKUP_TYPE = L_LOOKUP_TYPE
        AND LOOKUP_CODE = SERVICE_LEVEL;
    ELSE
      L_SERVICE_LEVEL := NULL;
    END IF;
    RETURN L_SERVICE_LEVEL;
  END CF_SERVICE_LEVELFORMULA;

  FUNCTION CF_TRIP_STATUSFORMULA(TRIP_STATUS IN VARCHAR2) RETURN CHAR IS
    L_TRIP_STATUS VARCHAR2(80);
  BEGIN
    SELECT
      MEANING
    INTO L_TRIP_STATUS
    FROM
      FND_LOOKUP_VALUES_VL
    WHERE LOOKUP_TYPE = 'TRIP_STATUS'
      AND LOOKUP_CODE = TRIP_STATUS;
    RETURN L_TRIP_STATUS;
  END CF_TRIP_STATUSFORMULA;

  FUNCTION CF_STOP_STATUSFORMULA(STOP_STATUS IN VARCHAR2) RETURN CHAR IS
    L_STOP_STATUS VARCHAR2(80);
  BEGIN
    SELECT
      MEANING
    INTO L_STOP_STATUS
    FROM
      FND_LOOKUP_VALUES_VL
    WHERE LOOKUP_TYPE = 'TRIP_STOP_STATUS'
      AND LOOKUP_CODE = STOP_STATUS;
    RETURN L_STOP_STATUS;
  END CF_STOP_STATUSFORMULA;

  FUNCTION CF_WEIGHT_UOMFORMULA(WEIGHT_UOM IN VARCHAR2) RETURN CHAR IS
    L_WEIGHT_UOM VARCHAR2(25);
  BEGIN
    IF WEIGHT_UOM IS NOT NULL THEN
      SELECT
        UNIT_OF_MEASURE_TL
      INTO L_WEIGHT_UOM
      FROM
        MTL_UNITS_OF_MEASURE_VL
      WHERE UOM_CODE = WEIGHT_UOM;
    ELSE
      L_WEIGHT_UOM := '';
    END IF;
    RETURN L_WEIGHT_UOM;
  END CF_WEIGHT_UOMFORMULA;

  FUNCTION CF_VOLUME_UOMFORMULA(VOLUME_UOM IN VARCHAR2) RETURN CHAR IS
    CURSOR L_GET_UOM(P_VOLUME_UOM_CODE IN VARCHAR2) IS
      SELECT
        UNIT_OF_MEASURE_TL
      FROM
        MTL_UNITS_OF_MEASURE_VL
      WHERE UOM_CODE = P_VOLUME_UOM_CODE;
    L_VOLUME_UOM VARCHAR2(25);
  BEGIN
    IF VOLUME_UOM IS NOT NULL THEN
      OPEN L_GET_UOM(VOLUME_UOM);
      FETCH L_GET_UOM
       INTO L_VOLUME_UOM;
      CLOSE L_GET_UOM;
    ELSE
      L_VOLUME_UOM := '';
    END IF;
    RETURN L_VOLUME_UOM;
  EXCEPTION
    WHEN OTHERS THEN
      IF L_GET_UOM%ISOPEN THEN
        CLOSE L_GET_UOM;
      END IF;
      RETURN NULL;
  END CF_VOLUME_UOMFORMULA;

  FUNCTION CF_DELIVERY_STATUS_DPFORMULA(DELIVERY_STATUS_DP IN VARCHAR2) RETURN CHAR IS
    L_STATUS_MEANING VARCHAR2(80);
  BEGIN
    SELECT
      MEANING
    INTO L_STATUS_MEANING
    FROM
      FND_LOOKUP_VALUES_VL
    WHERE LOOKUP_TYPE = 'DELIVERY_STATUS'
      AND LOOKUP_CODE = DELIVERY_STATUS_DP;
    RETURN L_STATUS_MEANING;
  END CF_DELIVERY_STATUS_DPFORMULA;

  FUNCTION CF_WEIGHT_UOM_DPFORMULA(WEIGHT_UOM_DP IN VARCHAR2) RETURN CHAR IS
    L_WEIGHT_UNIT VARCHAR2(25);
  BEGIN
    IF WEIGHT_UOM_DP IS NOT NULL THEN
      SELECT
        UNIT_OF_MEASURE_TL
      INTO L_WEIGHT_UNIT
      FROM
        MTL_UNITS_OF_MEASURE_VL
      WHERE UOM_CODE = WEIGHT_UOM_DP;
    ELSE
      L_WEIGHT_UNIT := NULL;
    END IF;
    RETURN L_WEIGHT_UNIT;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END CF_WEIGHT_UOM_DPFORMULA;

  FUNCTION CF_VOLUME_UOM_DPFORMULA(VOLUME_UOM_DP IN VARCHAR2) RETURN CHAR IS
    L_VOLUME_UNIT VARCHAR2(25);
  BEGIN
    IF VOLUME_UOM_DP IS NOT NULL THEN
      SELECT
        UNIT_OF_MEASURE_TL
      INTO L_VOLUME_UNIT
      FROM
        MTL_UNITS_OF_MEASURE_VL
      WHERE UOM_CODE = VOLUME_UOM_DP;
    ELSE
      L_VOLUME_UNIT := NULL;
    END IF;
    RETURN L_VOLUME_UNIT;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END CF_VOLUME_UOM_DPFORMULA;

  FUNCTION CF_VOLUME_UOM_DDFORMULA(VOLUME_UOM_DD IN VARCHAR2) RETURN CHAR IS
    L_VOLUME_UNIT VARCHAR2(25);
  BEGIN
    IF VOLUME_UOM_DD IS NOT NULL THEN
      SELECT
        UNIT_OF_MEASURE_TL
      INTO L_VOLUME_UNIT
      FROM
        MTL_UNITS_OF_MEASURE_VL
      WHERE UOM_CODE = VOLUME_UOM_DD;
    ELSE
      L_VOLUME_UNIT := NULL;
    END IF;
    RETURN L_VOLUME_UNIT;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END CF_VOLUME_UOM_DDFORMULA;

  FUNCTION CF_WEIGHT_UOM_DDFORMULA(WEIGHT_UOM_DD IN VARCHAR2) RETURN CHAR IS
    L_WEIGHT_UNIT VARCHAR2(25);
  BEGIN
    IF WEIGHT_UOM_DD IS NOT NULL THEN
      SELECT
        UNIT_OF_MEASURE_TL
      INTO L_WEIGHT_UNIT
      FROM
        MTL_UNITS_OF_MEASURE_VL
      WHERE UOM_CODE = WEIGHT_UOM_DD;
    ELSE
      L_WEIGHT_UNIT := NULL;
    END IF;
    RETURN L_WEIGHT_UNIT;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END CF_WEIGHT_UOM_DDFORMULA;

  FUNCTION CF_DELIVERY_STATUS_DDFORMULA(DELIVERY_STATUS_DD IN VARCHAR2) RETURN CHAR IS
    L_STATUS_MEANING VARCHAR2(80);
  BEGIN
    SELECT
      MEANING
    INTO L_STATUS_MEANING
    FROM
      FND_LOOKUP_VALUES_VL
    WHERE LOOKUP_TYPE = 'DELIVERY_STATUS'
      AND LOOKUP_CODE = DELIVERY_STATUS_DD;
    RETURN L_STATUS_MEANING;
  END CF_DELIVERY_STATUS_DDFORMULA;

  FUNCTION CF_COMMODITY_CLASS_PICKEDFORMU(INVENTORY_ITEM_ID_IP IN NUMBER
                                         ,ORGANIZATION_ID_IP IN NUMBER) RETURN CHAR IS
    L_CLASS_LIST VARCHAR2(1000);
    CURSOR C_CATEGORY(C_INV_ITEM_ID IN NUMBER,C_INV_ORG_ID IN NUMBER) IS
      SELECT
        CONCATENATED_SEGMENTS COMM_CLASS
      FROM
        MTL_CATEGORIES_KFV MC,
        MTL_ITEM_CATEGORIES MIC,
        MTL_CATEGORY_SETS_VL MCSTL
      WHERE MIC.INVENTORY_ITEM_ID = C_INV_ITEM_ID
        AND MIC.ORGANIZATION_ID = C_INV_ORG_ID
        AND MIC.CATEGORY_SET_ID = MCSTL.CATEGORY_SET_ID
        AND MC.CATEGORY_ID = MIC.CATEGORY_ID
        AND MCSTL.CATEGORY_SET_NAME = 'WSH_COMMODITY_CODE'
      ORDER BY
        MC.CATEGORY_ID;
  BEGIN
    /*SRW.REFERENCE(INVENTORY_ITEM_ID_IP)*/NULL;
    /*SRW.REFERENCE(ORGANIZATION_ID_IP)*/NULL;
    FOR c_rec IN C_CATEGORY(INVENTORY_ITEM_ID_IP , ORGANIZATION_ID_IP) LOOP
      IF (L_CLASS_LIST IS NULL) THEN
        L_CLASS_LIST := C_REC.COMM_CLASS;
      ELSE
        L_CLASS_LIST := L_CLASS_LIST || ', ' || C_REC.COMM_CLASS;
      END IF;
    END LOOP;
    RETURN (L_CLASS_LIST);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_COMMODITY_CLASS_PICKEDFORMU;

  FUNCTION CF_COMMODITY_CLASS_DROPPEDFORM(INVENTORY_ITEM_ID_D IN NUMBER
                                         ,ORGANIZATION_ID_D IN NUMBER) RETURN CHAR IS
    L_CLASS_LIST VARCHAR2(1000);
    CURSOR C_CATEGORY(C_INV_ITEM_ID IN NUMBER,C_INV_ORG_ID IN NUMBER) IS
      SELECT
        CONCATENATED_SEGMENTS COMM_CLASS
      FROM
        MTL_CATEGORIES_KFV MC,
        MTL_ITEM_CATEGORIES MIC,
        MTL_CATEGORY_SETS_VL MCSTL
      WHERE MIC.INVENTORY_ITEM_ID = C_INV_ITEM_ID
        AND MIC.ORGANIZATION_ID = C_INV_ORG_ID
        AND MIC.CATEGORY_SET_ID = MCSTL.CATEGORY_SET_ID
        AND MC.CATEGORY_ID = MIC.CATEGORY_ID
        AND MCSTL.CATEGORY_SET_NAME = 'WSH_COMMODITY_CODE'
      ORDER BY
        MC.CATEGORY_ID;
  BEGIN
    /*SRW.REFERENCE(INVENTORY_ITEM_ID_D)*/NULL;
    /*SRW.REFERENCE(ORGANIZATION_ID_D)*/NULL;
    FOR c_rec IN C_CATEGORY(INVENTORY_ITEM_ID_D , ORGANIZATION_ID_D) LOOP
      IF (L_CLASS_LIST IS NULL) THEN
        L_CLASS_LIST := C_REC.COMM_CLASS;
      ELSE
        L_CLASS_LIST := L_CLASS_LIST || ', ' || C_REC.COMM_CLASS;
      END IF;
    END LOOP;
    RETURN (L_CLASS_LIST);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_COMMODITY_CLASS_DROPPEDFORM;

  FUNCTION CF_PARENT_DEL_NAME_DPFORMULA(DELIVERY_LEG_ID_DP IN NUMBER) RETURN CHAR IS
    L_PARENT_DEL_NAME VARCHAR2(30) := NULL;
  BEGIN
    IF DELIVERY_LEG_ID_DP IS NOT NULL THEN
      SELECT
        NAME
      INTO L_PARENT_DEL_NAME
      FROM
        WSH_NEW_DELIVERIES
      WHERE DELIVERY_ID in (
        SELECT
          DELIVERY_ID
        FROM
          WSH_DELIVERY_LEGS
        WHERE DELIVERY_LEG_ID in (
          SELECT
            PARENT_DELIVERY_LEG_ID
          FROM
            WSH_DELIVERY_LEGS
          WHERE DELIVERY_LEG_ID = DELIVERY_LEG_ID_DP ) )
        AND ROWNUM = 1;
    END IF;
    RETURN L_PARENT_DEL_NAME;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN L_PARENT_DEL_NAME;
  END CF_PARENT_DEL_NAME_DPFORMULA;

  FUNCTION CF_PARENT_DEL_NAME_DDFORMULA(DELIVERY_LEG_ID_DD IN NUMBER) RETURN CHAR IS
    L_PARENT_DEL_NAME VARCHAR2(30) := NULL;
  BEGIN
    IF DELIVERY_LEG_ID_DD IS NOT NULL THEN
      SELECT
        NAME
      INTO L_PARENT_DEL_NAME
      FROM
        WSH_NEW_DELIVERIES
      WHERE DELIVERY_ID in (
        SELECT
          DELIVERY_ID
        FROM
          WSH_DELIVERY_LEGS
        WHERE DELIVERY_LEG_ID in (
          SELECT
            PARENT_DELIVERY_LEG_ID
          FROM
            WSH_DELIVERY_LEGS
          WHERE DELIVERY_LEG_ID = DELIVERY_LEG_ID_DD ) )
        AND ROWNUM = 1;
    END IF;
    RETURN L_PARENT_DEL_NAME;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN L_PARENT_DEL_NAME;
  END CF_PARENT_DEL_NAME_DDFORMULA;

  FUNCTION CF_FREIGHT_TERMS_DPFORMULA(FREIGHT_TERMS_CODE IN VARCHAR2) RETURN CHAR IS
    L_FREIGHT_TERMS VARCHAR2(80);
  BEGIN
    /*SRW.REFERENCE(FREIGHT_TERMS_CODE)*/NULL;
    IF FREIGHT_TERMS_CODE IS NOT NULL THEN
      SELECT
        FV.FREIGHT_TERMS
      INTO L_FREIGHT_TERMS
      FROM
        OE_FRGHT_TERMS_ACTIVE_V FV
      WHERE FV.FREIGHT_TERMS_CODE = CF_FREIGHT_TERMS_DPFORMULA.FREIGHT_TERMS_CODE;
    ELSE
      L_FREIGHT_TERMS := '';
    END IF;
    RETURN (L_FREIGHT_TERMS);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      /*SRW.MESSAGE(1
                 ,'Freight terms lookups not found.')*/NULL;
      RETURN (NULL);
    WHEN OTHERS THEN
      RAISE;
  END CF_FREIGHT_TERMS_DPFORMULA;

  FUNCTION CF_FREIGHT_TERMS_DDFORMULA(FREIGHT_TERMS_DD1 IN VARCHAR2) RETURN CHAR IS
    L_FREIGHT_TERMS VARCHAR2(80);
  BEGIN
    /*SRW.REFERENCE(FREIGHT_TERMS_DD1)*/NULL;
    IF FREIGHT_TERMS_DD1 IS NOT NULL THEN
      SELECT
        FV.FREIGHT_TERMS
      INTO L_FREIGHT_TERMS
      FROM
        OE_FRGHT_TERMS_ACTIVE_V FV
      WHERE FV.FREIGHT_TERMS_CODE = FREIGHT_TERMS_DD1;
    ELSE
      L_FREIGHT_TERMS := '';
    END IF;
    RETURN (L_FREIGHT_TERMS);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      /*SRW.MESSAGE(1
                 ,'Freight terms lookups not found.')*/NULL;
      RETURN (NULL);
    WHEN OTHERS THEN
      RAISE;
  END CF_FREIGHT_TERMS_DDFORMULA;

END WSH_WSHRDMBL_XMLP_PKG;



/
