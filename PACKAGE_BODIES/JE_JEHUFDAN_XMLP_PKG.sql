--------------------------------------------------------
--  DDL for Package Body JE_JEHUFDAN_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JE_JEHUFDAN_XMLP_PKG" AS
/* $Header: JEHUFDANB.pls 120.1 2007/12/25 16:54:17 dwkrishn noship $ */
  FUNCTION REPORT_NAMEFORMULA(COMPANY_NAME IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      L_REPORT_NAME VARCHAR2(80);
      L_CONC_PROGRAM_ID NUMBER;
    BEGIN
      RP_COMPANY_NAME := COMPANY_NAME;
      SELECT
        CR.CONCURRENT_PROGRAM_ID
      INTO L_CONC_PROGRAM_ID
      FROM
        FND_CONCURRENT_REQUESTS CR
      WHERE CR.PROGRAM_APPLICATION_ID = 7002
        AND CR.REQUEST_ID = P_CONC_REQUEST_ID;
      SELECT
        CP.USER_CONCURRENT_PROGRAM_NAME
      INTO L_REPORT_NAME
      FROM
        FND_CONCURRENT_PROGRAMS_VL CP
      WHERE CP.CONCURRENT_PROGRAM_ID = L_CONC_PROGRAM_ID
        AND CP.APPLICATION_ID = 7002;
      RP_REPORT_NAME := SUBSTR(L_REPORT_NAME,1,INSTR(L_REPORT_NAME,' (XML)'));
      RETURN (L_REPORT_NAME);
    EXCEPTION
      WHEN OTHERS THEN
        IF (P_REPORT_TYPE = 'REVAL RESERVE') THEN
          RP_REPORT_NAME := ':Revaluation Reserve Summary Report:';
        ELSE
          IF (P_REPORT_TYPE = 'RESERVE') THEN
            RP_REPORT_NAME := ':Reserve Summary Report:';
          ELSE
            RP_REPORT_NAME := 'REPORT ERROR';
          END IF;
        END IF;
        RETURN (RP_REPORT_NAME);
    END;
    RETURN NULL;
  END REPORT_NAMEFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    CP_PERIOD_FROM := P_PERIOD1;
    CP_PERIOD_TO := P_PERIOD2;
    SELECT
      DECODE(PERIOD_CLOSE_DATE
            ,NULL
            ,'OPEN'
            ,'CLOSED')
    INTO CP_OPEN_CLOSED
    FROM
      FA_DEPRN_PERIODS
    WHERE BOOK_TYPE_CODE = P_BOOK
      AND PERIOD_NAME = P_PERIOD2;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    BEGIN
      NULL;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION PERIOD1_PCFORMULA RETURN NUMBER IS
  BEGIN
    DECLARE
      L_PERIOD_POD DATE;
      L_PERIOD_PCD DATE;
      L_PERIOD_PC NUMBER(15);
      L_PERIOD_FY NUMBER(15);
    BEGIN
      SELECT
        PERIOD_COUNTER,
        PERIOD_OPEN_DATE,
        NVL(PERIOD_CLOSE_DATE
           ,SYSDATE),
        FISCAL_YEAR
      INTO L_PERIOD_PC,L_PERIOD_POD,L_PERIOD_PCD,L_PERIOD_FY
      FROM
        FA_DEPRN_PERIODS
      WHERE BOOK_TYPE_CODE = P_BOOK
        AND PERIOD_NAME = P_PERIOD1;
      PERIOD1_POD := L_PERIOD_POD;
      PERIOD1_PCD := L_PERIOD_PCD;
      PERIOD1_FY := L_PERIOD_FY;
      RETURN (L_PERIOD_PC);
    END;
    RETURN NULL;
  END PERIOD1_PCFORMULA;

  FUNCTION PERIOD2_PCFORMULA RETURN NUMBER IS
  BEGIN
    DECLARE
      L_PERIOD_POD DATE;
      L_PERIOD_PCD DATE;
      L_PERIOD_PC NUMBER(15);
      L_PERIOD_FY NUMBER(15);
    BEGIN
      SELECT
        PERIOD_COUNTER,
        PERIOD_OPEN_DATE,
        NVL(PERIOD_CLOSE_DATE
           ,SYSDATE),
        FISCAL_YEAR
      INTO L_PERIOD_PC,L_PERIOD_POD,L_PERIOD_PCD,L_PERIOD_FY
      FROM
        FA_DEPRN_PERIODS
      WHERE BOOK_TYPE_CODE = P_BOOK
        AND PERIOD_NAME = P_PERIOD2;
      PERIOD2_POD := L_PERIOD_POD;
      PERIOD2_PCD := L_PERIOD_PCD;
      PERIOD2_FY := L_PERIOD_FY;
      RETURN (L_PERIOD_PC);
    END;
    RETURN NULL;
  END PERIOD2_PCFORMULA;

  FUNCTION DO_INSERTFORMULA RETURN NUMBER IS
  BEGIN
    BEGIN
      IF (P_REPORT_TYPE = 'RESERVE' OR P_REPORT_TYPE = 'REVAL RESERVE') THEN
        INSERT_INFO;
        RETURN (1);
      ELSE
        RETURN (0);
      END IF;
    END;
    RETURN NULL;
  END DO_INSERTFORMULA;

  FUNCTION ADJUSTFORMULA(TAX IN NUMBER
                        ,FLAT IN NUMBER
                        ,NON_STR_UNPLANNED IN NUMBER) RETURN NUMBER IS
  BEGIN
    BEGIN
      IF (NVL(TAX
         ,0) + NVL(FLAT
         ,0) - NVL(NON_STR_UNPLANNED
         ,0)) = 0 THEN
        RETURN (0);
      ELSE
        RETURN (NVL(TAX
                  ,0) + NVL(FLAT
                  ,0) - NVL(NON_STR_UNPLANNED
                  ,0));
      END IF;
    END;
    RETURN NULL;
  END ADJUSTFORMULA;

  FUNCTION ENDFORMULA(LIFE IN NUMBER
                     ,EXPENSE IN NUMBER
                     ,ADJUST IN NUMBER
                     ,PRODUCTION IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (NVL(LIFE
              ,0) + NVL(EXPENSE
              ,0) + NVL(ADJUST
              ,0) + NVL(PRODUCTION
              ,0));
  END ENDFORMULA;

  FUNCTION LIFEFORMULA(STRAIGHT IN NUMBER
                      ,STR_UNPLANNED IN NUMBER
                      ,EXPENSE IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (NVL(STRAIGHT
              ,0) - NVL(STR_UNPLANNED
              ,0) - NVL(EXPENSE
              ,0));
  END LIFEFORMULA;

  PROCEDURE INSERT_INFO IS
  PRAGMA AUTONOMOUS_TRANSACTION;
  BEGIN
    SELECT
      P1.PERIOD_COUNTER,
      P1.PERIOD_OPEN_DATE,
      NVL(P1.PERIOD_CLOSE_DATE
         ,SYSDATE),
      P2.PERIOD_COUNTER,
      NVL(P2.PERIOD_CLOSE_DATE
         ,SYSDATE),
      BC.DISTRIBUTION_SOURCE_BOOK
    INTO CP_PERIOD1_PC,CP_PERIOD1_POD,CP_PERIOD1_PCD,CP_PERIOD2_PC,CP_PERIOD2_PCD,CP_DISTRIBUTION_SOURCE_BOOK
    FROM
      FA_DEPRN_PERIODS P1,
      FA_DEPRN_PERIODS P2,
      FA_BOOK_CONTROLS BC
    WHERE BC.BOOK_TYPE_CODE = P_BOOK
      AND P1.BOOK_TYPE_CODE = P_BOOK
      AND P1.PERIOD_NAME = P_PERIOD1
      AND P2.BOOK_TYPE_CODE = P_BOOK
      AND P2.PERIOD_NAME = P_PERIOD2;
    CP_BALANCE_TYPE := 'CR';
    DELETE FROM JE_HU_BALANCES_REPORT;
    DELETE FROM FA_LOOKUPS_B
     WHERE LOOKUP_TYPE = 'REPORT TYPE';
    DELETE FROM FA_LOOKUPS_TL
     WHERE LOOKUP_TYPE = 'REPORT TYPE';
    INSERT INTO FA_LOOKUPS_B
      (LOOKUP_TYPE
      ,LOOKUP_CODE
      ,LAST_UPDATED_BY
      ,LAST_UPDATE_DATE
      ,ENABLED_FLAG)
    VALUES   ('REPORT TYPE'
      ,P_REPORT_TYPE
      ,1
      ,SYSDATE
      ,'Y');
    INSERT INTO FA_LOOKUPS_TL
      (LOOKUP_TYPE
      ,LOOKUP_CODE
      ,LANGUAGE
      ,SOURCE_LANG
      ,MEANING
      ,LAST_UPDATED_BY
      ,LAST_UPDATE_DATE)
      SELECT
        'REPORT TYPE',
        P_REPORT_TYPE,
        L.LANGUAGE_CODE,
        USERENV('LANG'),
        P_REPORT_TYPE,
        1,
        SYSDATE
      FROM
        FND_LANGUAGES L
      WHERE L.INSTALLED_FLAG IN ( 'I' , 'B' );
    GET_ADJUSTMENTS;
    GET_ADJUSTMENTS_METHOD;
    GET_ADJ_STR_UNPLANNED;
    GET_ADJ_NON_STR_UNPLANNED;
    GET_FIRST_MON_NON_STR_UNPL;
    GET_FIRST_MON_STR_UNPL;
    GET_DEPRN_EFFECTS;
    GET_DEPRN_EFFECTS_METHOD;
    GET_DEPRN_EFFECTS_FIRST;
    COMMIT;
  END INSERT_INFO;

  PROCEDURE GET_ADJUSTMENTS IS
  BEGIN
    INSERT INTO JE_HU_BALANCES_REPORT
      (CATEGORY_ID
      ,ASSET_ID
      ,DISTRIBUTION_CCID
      ,ADJUSTMENT_CCID
      ,CATEGORY_BOOKS_ACCOUNT
      ,SOURCE_TYPE_CODE
      ,AMOUNT)
      SELECT
        AH.CATEGORY_ID,
        AH.ASSET_ID,
        DH.CODE_COMBINATION_ID,
        AJ.CODE_COMBINATION_ID,
        null,
        AJ.SOURCE_TYPE_CODE,
        SUM(DECODE(AJ.DEBIT_CREDIT_FLAG
                  ,CP_BALANCE_TYPE
                  ,1
                  ,-1) * AJ.ADJUSTMENT_AMOUNT)
      FROM
        FA_LOOKUPS RT,
        FA_DISTRIBUTION_HISTORY DH,
        FA_TRANSACTION_HEADERS TH,
        FA_ASSET_HISTORY AH,
        FA_ADJUSTMENTS AJ
      WHERE RT.LOOKUP_TYPE = 'REPORT TYPE'
        AND RT.LOOKUP_CODE = P_REPORT_TYPE
        AND DH.BOOK_TYPE_CODE = CP_DISTRIBUTION_SOURCE_BOOK
        AND AJ.ASSET_ID = DH.ASSET_ID
        AND AJ.BOOK_TYPE_CODE = P_BOOK
        AND AJ.DISTRIBUTION_ID = DH.DISTRIBUTION_ID
        AND AJ.ADJUSTMENT_TYPE in ( P_REPORT_TYPE , DECODE(P_REPORT_TYPE
            ,'REVAL RESERVE'
            ,'REVAL AMORT') )
        AND AJ.PERIOD_COUNTER_CREATED BETWEEN CP_PERIOD1_PC
        AND CP_PERIOD2_PC
        AND TH.TRANSACTION_HEADER_ID = AJ.TRANSACTION_HEADER_ID
        AND AH.ASSET_ID = DH.ASSET_ID
        AND ( ( AH.ASSET_TYPE <> 'EXPENSED'
        AND P_REPORT_TYPE IN ( 'COST' , 'CIP COST' ) )
      OR ( AH.ASSET_TYPE = 'CAPITALIZED'
        AND P_REPORT_TYPE IN ( 'RESERVE' , 'REVAL RESERVE' ) ) )
        AND TH.TRANSACTION_HEADER_ID BETWEEN AH.TRANSACTION_HEADER_ID_IN
        AND NVL(AH.TRANSACTION_HEADER_ID_OUT - 1
         ,TH.TRANSACTION_HEADER_ID)
        AND ( DECODE(RT.LOOKUP_CODE
            ,AJ.ADJUSTMENT_TYPE
            ,1
            ,0) * AJ.ADJUSTMENT_AMOUNT ) <> 0
      GROUP BY
        AH.CATEGORY_ID,
        AH.ASSET_ID,
        DH.CODE_COMBINATION_ID,
        AJ.CODE_COMBINATION_ID,
        AJ.SOURCE_TYPE_CODE;
    IF P_REPORT_TYPE = 'RESERVE' THEN
      INSERT INTO JE_HU_BALANCES_REPORT
        (CATEGORY_ID
        ,ASSET_ID
        ,DISTRIBUTION_CCID
        ,ADJUSTMENT_CCID
        ,CATEGORY_BOOKS_ACCOUNT
        ,SOURCE_TYPE_CODE
        ,AMOUNT)
        SELECT
          CB.CATEGORY_ID,
          DH.ASSET_ID,
          DH.CODE_COMBINATION_ID,
          null,
          CB.DEPRN_RESERVE_ACCT,
          'ADDITION',
          SUM(DD.DEPRN_RESERVE)
        FROM
          FA_DISTRIBUTION_HISTORY DH,
          FA_CATEGORY_BOOKS CB,
          FA_ADDITIONS AD,
          FA_DEPRN_DETAIL DD
        WHERE NOT EXISTS (
          SELECT
            BR.ASSET_ID
          FROM
            JE_HU_BALANCES_REPORT BR
          WHERE BR.ASSET_ID = DH.ASSET_ID
            AND BR.DISTRIBUTION_CCID = DH.CODE_COMBINATION_ID
            AND BR.SOURCE_TYPE_CODE = 'ADDITION' )
          AND DD.BOOK_TYPE_CODE = P_BOOK
          AND ( DD.PERIOD_COUNTER + 1 ) BETWEEN CP_PERIOD1_PC
          AND CP_PERIOD2_PC
          AND DD.DEPRN_SOURCE_CODE = 'B'
          AND DD.ASSET_ID = DH.ASSET_ID
          AND DD.DEPRN_RESERVE <> 0
          AND DD.DISTRIBUTION_ID = DH.DISTRIBUTION_ID
          AND DD.ASSET_ID = AD.ASSET_ID
          AND DD.BOOK_TYPE_CODE = CB.BOOK_TYPE_CODE
          AND AD.ASSET_CATEGORY_ID = CB.CATEGORY_ID
        GROUP BY
          CB.CATEGORY_ID,
          DH.ASSET_ID,
          DH.CODE_COMBINATION_ID,
          CB.DEPRN_RESERVE_ACCT;
    END IF;
  END GET_ADJUSTMENTS;

  PROCEDURE GET_ADJUSTMENTS_METHOD IS
  BEGIN
    /*SRW.MESSAGE('001'
               ,'PC1: ' || TO_CHAR(CP_PERIOD1_PC))*/NULL;
    /*SRW.MESSAGE('002'
               ,'PC2: ' || TO_CHAR(CP_PERIOD2_PC))*/NULL;
    INSERT INTO JE_HU_BALANCES_REPORT
      (CATEGORY_ID
      ,ASSET_ID
      ,DISTRIBUTION_CCID
      ,ADJUSTMENT_CCID
      ,CATEGORY_BOOKS_ACCOUNT
      ,SOURCE_TYPE_CODE
      ,AMOUNT)
      SELECT
        AH.CATEGORY_ID,
        AH.ASSET_ID,
        DH.CODE_COMBINATION_ID,
        AJ.CODE_COMBINATION_ID,
        null,
        ME.RATE_SOURCE_RULE,
        SUM(DECODE(AJ.DEBIT_CREDIT_FLAG
                  ,CP_BALANCE_TYPE
                  ,1
                  ,-1) * AJ.ADJUSTMENT_AMOUNT)
      FROM
        FA_LOOKUPS RT,
        FA_DISTRIBUTION_HISTORY DH,
        FA_TRANSACTION_HEADERS TH,
        FA_ASSET_HISTORY AH,
        FA_ADJUSTMENTS AJ,
        FA_METHODS ME,
        FA_BOOKS BO,
        FA_DEPRN_PERIODS DP
      WHERE RT.LOOKUP_TYPE = 'REPORT TYPE'
        AND RT.LOOKUP_CODE = P_REPORT_TYPE
        AND DH.BOOK_TYPE_CODE = CP_DISTRIBUTION_SOURCE_BOOK
        AND AJ.ASSET_ID = DH.ASSET_ID
        AND AJ.BOOK_TYPE_CODE = P_BOOK
        AND AJ.DISTRIBUTION_ID = DH.DISTRIBUTION_ID
        AND AJ.ADJUSTMENT_TYPE in ( P_REPORT_TYPE , DECODE(P_REPORT_TYPE
            ,'REVAL RESERVE'
            ,'REVAL AMORT') )
        AND AJ.PERIOD_COUNTER_CREATED BETWEEN CP_PERIOD1_PC
        AND CP_PERIOD2_PC
        AND AJ.SOURCE_TYPE_CODE = 'DEPRECIATION'
        AND TH.TRANSACTION_HEADER_ID = AJ.TRANSACTION_HEADER_ID
        AND AH.ASSET_ID = DH.ASSET_ID
        AND ( ( AH.ASSET_TYPE <> 'EXPENSED'
        AND P_REPORT_TYPE IN ( 'COST' , 'CIP COST' ) )
      OR ( AH.ASSET_TYPE = 'CAPITALIZED'
        AND P_REPORT_TYPE IN ( 'RESERVE' , 'REVAL RESERVE' ) ) )
        AND TH.TRANSACTION_HEADER_ID BETWEEN AH.TRANSACTION_HEADER_ID_IN
        AND NVL(AH.TRANSACTION_HEADER_ID_OUT - 1
         ,TH.TRANSACTION_HEADER_ID)
        AND ( DECODE(RT.LOOKUP_CODE
            ,AJ.ADJUSTMENT_TYPE
            ,1
            ,0) * AJ.ADJUSTMENT_AMOUNT ) <> 0
        AND DP.PERIOD_COUNTER = CP_PERIOD2_PC
        AND DP.BOOK_TYPE_CODE = P_BOOK
        AND NVL(DP.PERIOD_CLOSE_DATE
         ,SYSDATE) between BO.DATE_EFFECTIVE
        AND NVL(BO.DATE_INEFFECTIVE
         ,SYSDATE)
        AND BO.BOOK_TYPE_CODE = P_BOOK
        AND BO.ASSET_ID = AJ.ASSET_ID
        AND ME.METHOD_CODE = BO.DEPRN_METHOD_CODE
        AND NVL(ME.LIFE_IN_MONTHS
         ,0) = NVL(BO.LIFE_IN_MONTHS
         ,0)
      GROUP BY
        AH.CATEGORY_ID,
        AH.ASSET_ID,
        DH.CODE_COMBINATION_ID,
        AJ.CODE_COMBINATION_ID,
        ME.RATE_SOURCE_RULE;
  END GET_ADJUSTMENTS_METHOD;

  PROCEDURE GET_ADJ_STR_UNPLANNED IS
  BEGIN
    INSERT INTO JE_HU_BALANCES_REPORT
      (CATEGORY_ID
      ,ASSET_ID
      ,DISTRIBUTION_CCID
      ,ADJUSTMENT_CCID
      ,CATEGORY_BOOKS_ACCOUNT
      ,SOURCE_TYPE_CODE
      ,AMOUNT)
      SELECT
        AH.CATEGORY_ID,
        AH.ASSET_ID,
        DH.CODE_COMBINATION_ID,
        null,
        CB.DEPRN_RESERVE_ACCT,
        'STR UNPLANNED',
        SUM(DECODE(AJ.DEBIT_CREDIT_FLAG
                  ,CP_BALANCE_TYPE
                  ,-1
                  ,1) * AJ.ADJUSTMENT_AMOUNT)
      FROM
        FA_LOOKUPS RT,
        FA_DISTRIBUTION_HISTORY DH,
        FA_CATEGORY_BOOKS CB,
        FA_TRANSACTION_HEADERS TH,
        FA_ASSET_HISTORY AH,
        FA_ADJUSTMENTS AJ,
        FA_LOOKUPS LO,
        FA_METHODS ME,
        FA_BOOKS BO
      WHERE RT.LOOKUP_TYPE = 'REPORT TYPE'
        AND RT.LOOKUP_CODE = P_REPORT_TYPE
        AND DH.BOOK_TYPE_CODE = CP_DISTRIBUTION_SOURCE_BOOK
        AND AJ.ASSET_ID = DH.ASSET_ID
        AND AJ.BOOK_TYPE_CODE = P_BOOK
        AND AJ.DISTRIBUTION_ID = DH.DISTRIBUTION_ID
        AND AJ.ADJUSTMENT_TYPE = 'EXPENSE'
        AND AJ.PERIOD_COUNTER_ADJUSTED BETWEEN CP_PERIOD1_PC
        AND CP_PERIOD2_PC
        AND AJ.SOURCE_TYPE_CODE = 'DEPRECIATION'
        AND TH.TRANSACTION_HEADER_ID = AJ.TRANSACTION_HEADER_ID
        AND AH.ASSET_ID = DH.ASSET_ID
        AND TH.TRANSACTION_HEADER_ID BETWEEN AH.TRANSACTION_HEADER_ID_IN
        AND NVL(AH.TRANSACTION_HEADER_ID_OUT - 1
         ,TH.TRANSACTION_HEADER_ID)
        AND TH.TRANSACTION_SUBTYPE = LO.LOOKUP_CODE
        AND LO.LOOKUP_TYPE = 'UNPLANNED DEPRN'
        AND CB.BOOK_TYPE_CODE = AJ.BOOK_TYPE_CODE
        AND CB.CATEGORY_ID = AH.CATEGORY_ID
        AND AJ.ASSET_ID = BO.ASSET_ID
        AND AJ.BOOK_TYPE_CODE = BO.BOOK_TYPE_CODE
        AND TH.TRANSACTION_HEADER_ID = BO.TRANSACTION_HEADER_ID_IN
        AND ME.METHOD_CODE = BO.DEPRN_METHOD_CODE
        AND ME.STL_METHOD_FLAG = 'YES'
        AND NVL(ME.LIFE_IN_MONTHS
         ,0) = NVL(BO.LIFE_IN_MONTHS
         ,0)
      GROUP BY
        AH.CATEGORY_ID,
        AH.ASSET_ID,
        DH.CODE_COMBINATION_ID,
        AJ.CODE_COMBINATION_ID,
        CB.DEPRN_RESERVE_ACCT;
  END GET_ADJ_STR_UNPLANNED;

  PROCEDURE GET_DEPRN_EFFECTS IS
  BEGIN
    INSERT INTO JE_HU_BALANCES_REPORT
      (CATEGORY_ID
      ,ASSET_ID
      ,DISTRIBUTION_CCID
      ,ADJUSTMENT_CCID
      ,CATEGORY_BOOKS_ACCOUNT
      ,SOURCE_TYPE_CODE
      ,AMOUNT)
      SELECT
        AH.CATEGORY_ID,
        AH.ASSET_ID,
        DH.CODE_COMBINATION_ID,
        null,
        DECODE(RT.LOOKUP_CODE
              ,'RESERVE'
              ,CB.DEPRN_RESERVE_ACCT
              ,'REVAL RESERVE'
              ,CB.REVAL_RESERVE_ACCT),
        DECODE(DD.DEPRN_SOURCE_CODE
              ,'D'
              ,'DEPRECIATION'
              ,'ADDITION'),
        SUM(DECODE(RT.LOOKUP_CODE
                  ,'RESERVE'
                  ,DD.DEPRN_AMOUNT
                  ,'REVAL RESERVE'
                  ,-DD.REVAL_AMORTIZATION))
      FROM
        FA_LOOKUPS RT,
        FA_CATEGORY_BOOKS CB,
        FA_DISTRIBUTION_HISTORY DH,
        FA_ASSET_HISTORY AH,
        FA_DEPRN_DETAIL DD,
        FA_DEPRN_PERIODS DP
      WHERE DH.BOOK_TYPE_CODE = CP_DISTRIBUTION_SOURCE_BOOK
        AND AH.ASSET_ID = DH.ASSET_ID
        AND AH.ASSET_TYPE = 'CAPITALIZED'
        AND AH.DATE_EFFECTIVE < NVL(DH.DATE_INEFFECTIVE
         ,SYSDATE)
        AND NVL(DH.DATE_INEFFECTIVE
         ,SYSDATE) <= NVL(AH.DATE_INEFFECTIVE
         ,SYSDATE)
        AND CB.CATEGORY_ID = AH.CATEGORY_ID
        AND CB.BOOK_TYPE_CODE = P_BOOK
        AND ( ( DD.DEPRN_SOURCE_CODE = 'B'
        AND ( DD.PERIOD_COUNTER + 1 ) < CP_PERIOD2_PC )
      OR ( DD.DEPRN_SOURCE_CODE = 'D' ) )
        AND DD.BOOK_TYPE_CODE || '' = P_BOOK
        AND DD.ASSET_ID = DH.ASSET_ID
        AND DD.DISTRIBUTION_ID = DH.DISTRIBUTION_ID
        AND DD.PERIOD_COUNTER between CP_PERIOD1_PC
        AND CP_PERIOD2_PC
        AND DP.BOOK_TYPE_CODE = DD.BOOK_TYPE_CODE
        AND DP.PERIOD_COUNTER = DD.PERIOD_COUNTER
        AND DECODE(RT.LOOKUP_CODE
            ,'RESERVE'
            ,CB.DEPRN_RESERVE_ACCT
            ,'REVAL RESERVE'
            ,CB.REVAL_RESERVE_ACCT) is not null
        AND DECODE(RT.LOOKUP_CODE
            ,'RESERVE'
            ,DD.DEPRN_AMOUNT
            ,'REVAL RESERVE'
            ,NVL(DD.REVAL_AMORTIZATION
               ,0)) <> 0
      GROUP BY
        AH.CATEGORY_ID,
        AH.ASSET_ID,
        DH.CODE_COMBINATION_ID,
        DECODE(RT.LOOKUP_CODE
              ,'RESERVE'
              ,CB.DEPRN_RESERVE_ACCT
              ,'REVAL RESERVE'
              ,CB.REVAL_RESERVE_ACCT),
        DD.DEPRN_SOURCE_CODE;
  END GET_DEPRN_EFFECTS;

  PROCEDURE GET_DEPRN_EFFECTS_FIRST IS
  BEGIN
    INSERT INTO JE_HU_BALANCES_REPORT
      (CATEGORY_ID
      ,ASSET_ID
      ,DISTRIBUTION_CCID
      ,ADJUSTMENT_CCID
      ,CATEGORY_BOOKS_ACCOUNT
      ,SOURCE_TYPE_CODE
      ,AMOUNT)
      SELECT
        AH.CATEGORY_ID,
        AH.ASSET_ID,
        DH.CODE_COMBINATION_ID,
        null,
        DECODE(RT.LOOKUP_CODE
              ,'RESERVE'
              ,CB.DEPRN_RESERVE_ACCT
              ,'REVAL RESERVE'
              ,CB.REVAL_RESERVE_ACCT),
        'FIRST',
        SUM(DECODE(RT.LOOKUP_CODE
                  ,'RESERVE'
                  ,DD.DEPRN_AMOUNT
                  ,'REVAL RESERVE'
                  ,-DD.REVAL_AMORTIZATION))
      FROM
        FA_LOOKUPS RT,
        FA_CATEGORY_BOOKS CB,
        FA_DISTRIBUTION_HISTORY DH,
        FA_ASSET_HISTORY AH,
        FA_DEPRN_DETAIL DD,
        FA_DEPRN_PERIODS DP,
        FA_DEPRN_PERIODS DP1,
        FA_BOOKS BO
      WHERE DH.BOOK_TYPE_CODE = CP_DISTRIBUTION_SOURCE_BOOK
        AND AH.ASSET_ID = DH.ASSET_ID
        AND AH.ASSET_TYPE = 'CAPITALIZED'
        AND AH.DATE_EFFECTIVE < NVL(DH.DATE_INEFFECTIVE
         ,SYSDATE)
        AND NVL(DH.DATE_INEFFECTIVE
         ,SYSDATE) <= NVL(AH.DATE_INEFFECTIVE
         ,SYSDATE)
        AND CB.CATEGORY_ID = AH.CATEGORY_ID
        AND CB.BOOK_TYPE_CODE = P_BOOK
        AND DD.DEPRN_SOURCE_CODE = 'D'
        AND DD.BOOK_TYPE_CODE || '' = P_BOOK
        AND DD.ASSET_ID = DH.ASSET_ID
        AND DD.DISTRIBUTION_ID = DH.DISTRIBUTION_ID
        AND DD.PERIOD_COUNTER between CP_PERIOD1_PC
        AND CP_PERIOD2_PC
        AND DP.BOOK_TYPE_CODE = DD.BOOK_TYPE_CODE
        AND DP.PERIOD_COUNTER = DD.PERIOD_COUNTER
        AND DECODE(RT.LOOKUP_CODE
            ,'RESERVE'
            ,CB.DEPRN_RESERVE_ACCT
            ,'REVAL RESERVE'
            ,CB.REVAL_RESERVE_ACCT) is not null
        AND DECODE(RT.LOOKUP_CODE
            ,'RESERVE'
            ,DD.DEPRN_AMOUNT
            ,'REVAL RESERVE'
            ,NVL(DD.REVAL_AMORTIZATION
               ,0)) <> 0
        AND DP1.PERIOD_COUNTER = CP_PERIOD2_PC
        AND DP1.BOOK_TYPE_CODE = P_BOOK
        AND NVL(DP1.PERIOD_CLOSE_DATE
         ,SYSDATE) between BO.DATE_EFFECTIVE
        AND NVL(BO.DATE_INEFFECTIVE
         ,SYSDATE)
        AND BO.BOOK_TYPE_CODE = P_BOOK
        AND BO.ASSET_ID = AH.ASSET_ID
        AND BO.PERIOD_COUNTER_FULLY_RESERVED = (
        SELECT
          MIN(PERIOD_COUNTER)
        FROM
          FA_DEPRN_DETAIL DD2
        WHERE DD2.BOOK_TYPE_CODE = DD.BOOK_TYPE_CODE
          AND DD2.ASSET_ID = DD.ASSET_ID
          AND DD2.DEPRN_SOURCE_CODE = 'D' )
      GROUP BY
        AH.CATEGORY_ID,
        AH.ASSET_ID,
        DH.CODE_COMBINATION_ID,
        DECODE(RT.LOOKUP_CODE
              ,'RESERVE'
              ,CB.DEPRN_RESERVE_ACCT
              ,'REVAL RESERVE'
              ,CB.REVAL_RESERVE_ACCT);
  END GET_DEPRN_EFFECTS_FIRST;

  PROCEDURE GET_DEPRN_EFFECTS_METHOD IS
  BEGIN
    INSERT INTO JE_HU_BALANCES_REPORT
      (CATEGORY_ID
      ,ASSET_ID
      ,DISTRIBUTION_CCID
      ,ADJUSTMENT_CCID
      ,CATEGORY_BOOKS_ACCOUNT
      ,SOURCE_TYPE_CODE
      ,AMOUNT)
      SELECT
        AH.CATEGORY_ID,
        AH.ASSET_ID,
        DH.CODE_COMBINATION_ID,
        null,
        DECODE(RT.LOOKUP_CODE
              ,'RESERVE'
              ,CB.DEPRN_RESERVE_ACCT
              ,'REVAL RESERVE'
              ,CB.REVAL_RESERVE_ACCT),
        ME.RATE_SOURCE_RULE,
        SUM(DECODE(RT.LOOKUP_CODE
                  ,'RESERVE'
                  ,DD.DEPRN_AMOUNT
                  ,'REVAL RESERVE'
                  ,-DD.REVAL_AMORTIZATION))
      FROM
        FA_LOOKUPS RT,
        FA_CATEGORY_BOOKS CB,
        FA_DISTRIBUTION_HISTORY DH,
        FA_ASSET_HISTORY AH,
        FA_DEPRN_DETAIL DD,
        FA_DEPRN_PERIODS DP,
        FA_DEPRN_PERIODS DP1,
        FA_METHODS ME,
        FA_BOOKS BO
      WHERE DH.BOOK_TYPE_CODE = CP_DISTRIBUTION_SOURCE_BOOK
        AND AH.ASSET_ID = DH.ASSET_ID
        AND AH.ASSET_TYPE = 'CAPITALIZED'
        AND AH.DATE_EFFECTIVE < NVL(DH.DATE_INEFFECTIVE
         ,SYSDATE)
        AND NVL(DH.DATE_INEFFECTIVE
         ,SYSDATE) <= NVL(AH.DATE_INEFFECTIVE
         ,SYSDATE)
        AND CB.CATEGORY_ID = AH.CATEGORY_ID
        AND CB.BOOK_TYPE_CODE = P_BOOK
        AND DD.DEPRN_SOURCE_CODE = 'D'
        AND DD.BOOK_TYPE_CODE || '' = P_BOOK
        AND DD.ASSET_ID = DH.ASSET_ID
        AND DD.DISTRIBUTION_ID = DH.DISTRIBUTION_ID
        AND DD.PERIOD_COUNTER between CP_PERIOD1_PC
        AND CP_PERIOD2_PC
        AND DP.BOOK_TYPE_CODE = DD.BOOK_TYPE_CODE
        AND DP.PERIOD_COUNTER = DD.PERIOD_COUNTER
        AND DECODE(RT.LOOKUP_CODE
            ,'RESERVE'
            ,CB.DEPRN_RESERVE_ACCT
            ,'REVAL RESERVE'
            ,CB.REVAL_RESERVE_ACCT) is not null
        AND DECODE(RT.LOOKUP_CODE
            ,'RESERVE'
            ,DD.DEPRN_AMOUNT
            ,'REVAL RESERVE'
            ,NVL(DD.REVAL_AMORTIZATION
               ,0)) <> 0
        AND DP1.PERIOD_COUNTER = CP_PERIOD2_PC
        AND DP1.BOOK_TYPE_CODE = P_BOOK
        AND NVL(DP1.PERIOD_CLOSE_DATE
         ,SYSDATE) between BO.DATE_EFFECTIVE
        AND NVL(BO.DATE_INEFFECTIVE
         ,SYSDATE)
        AND BO.BOOK_TYPE_CODE = P_BOOK
        AND BO.ASSET_ID = AH.ASSET_ID
        AND ME.METHOD_CODE = BO.DEPRN_METHOD_CODE
        AND NVL(ME.LIFE_IN_MONTHS
         ,0) = NVL(BO.LIFE_IN_MONTHS
         ,0)
      GROUP BY
        AH.CATEGORY_ID,
        AH.ASSET_ID,
        ME.RATE_SOURCE_RULE,
        DH.CODE_COMBINATION_ID,
        DECODE(RT.LOOKUP_CODE
              ,'RESERVE'
              ,CB.DEPRN_RESERVE_ACCT
              ,'REVAL RESERVE'
              ,CB.REVAL_RESERVE_ACCT);
  END GET_DEPRN_EFFECTS_METHOD;

  FUNCTION CF_CURRENT_DATEFORMULA RETURN CHAR IS
    DATE1 VARCHAR2(21);
  BEGIN
    SELECT
      FND_DATE.DATE_TO_CHARDT(SYSDATE)
    INTO DATE1
    FROM
      DUAL;
    RETURN (DATE1);
  END CF_CURRENT_DATEFORMULA;

  PROCEDURE GET_ADJ_NON_STR_UNPLANNED IS
  BEGIN
    INSERT INTO JE_HU_BALANCES_REPORT
      (CATEGORY_ID
      ,ASSET_ID
      ,DISTRIBUTION_CCID
      ,ADJUSTMENT_CCID
      ,CATEGORY_BOOKS_ACCOUNT
      ,SOURCE_TYPE_CODE
      ,AMOUNT)
      SELECT
        AH.CATEGORY_ID,
        AH.ASSET_ID,
        DH.CODE_COMBINATION_ID,
        null,
        CB.DEPRN_RESERVE_ACCT,
        'NON STR UNPLN',
        SUM(DECODE(AJ.DEBIT_CREDIT_FLAG
                  ,CP_BALANCE_TYPE
                  ,-1
                  ,1) * AJ.ADJUSTMENT_AMOUNT)
      FROM
        FA_LOOKUPS RT,
        FA_DISTRIBUTION_HISTORY DH,
        FA_CATEGORY_BOOKS CB,
        FA_TRANSACTION_HEADERS TH,
        FA_ASSET_HISTORY AH,
        FA_ADJUSTMENTS AJ,
        FA_LOOKUPS LO,
        FA_METHODS ME,
        FA_BOOKS BO
      WHERE RT.LOOKUP_TYPE = 'REPORT TYPE'
        AND RT.LOOKUP_CODE = P_REPORT_TYPE
        AND DH.BOOK_TYPE_CODE = CP_DISTRIBUTION_SOURCE_BOOK
        AND AJ.ASSET_ID = DH.ASSET_ID
        AND AJ.BOOK_TYPE_CODE = P_BOOK
        AND AJ.DISTRIBUTION_ID = DH.DISTRIBUTION_ID
        AND AJ.ADJUSTMENT_TYPE = 'EXPENSE'
        AND AJ.PERIOD_COUNTER_ADJUSTED BETWEEN CP_PERIOD1_PC
        AND CP_PERIOD2_PC
        AND AJ.SOURCE_TYPE_CODE = 'DEPRECIATION'
        AND TH.TRANSACTION_HEADER_ID = AJ.TRANSACTION_HEADER_ID
        AND AH.ASSET_ID = DH.ASSET_ID
        AND TH.TRANSACTION_HEADER_ID BETWEEN AH.TRANSACTION_HEADER_ID_IN
        AND NVL(AH.TRANSACTION_HEADER_ID_OUT - 1
         ,TH.TRANSACTION_HEADER_ID)
        AND TH.TRANSACTION_SUBTYPE = LO.LOOKUP_CODE
        AND LO.LOOKUP_TYPE = 'UNPLANNED DEPRN'
        AND CB.BOOK_TYPE_CODE = AJ.BOOK_TYPE_CODE
        AND CB.CATEGORY_ID = AH.CATEGORY_ID
        AND AJ.ASSET_ID = BO.ASSET_ID
        AND AJ.BOOK_TYPE_CODE = BO.BOOK_TYPE_CODE
        AND TH.TRANSACTION_HEADER_ID = BO.TRANSACTION_HEADER_ID_IN
        AND ME.METHOD_CODE = BO.DEPRN_METHOD_CODE
        AND ME.STL_METHOD_FLAG = 'NO'
        AND NVL(ME.LIFE_IN_MONTHS
         ,0) = NVL(BO.LIFE_IN_MONTHS
         ,0)
      GROUP BY
        AH.CATEGORY_ID,
        AH.ASSET_ID,
        DH.CODE_COMBINATION_ID,
        AJ.CODE_COMBINATION_ID,
        CB.DEPRN_RESERVE_ACCT;
  END GET_ADJ_NON_STR_UNPLANNED;

  FUNCTION CF_UNPLANNEDFORMULA(FIRST_STR IN NUMBER
                              ,STR_UNPLANNED IN NUMBER
                              ,NON_STR_UNPLANNED IN NUMBER
                              ,FIRST_NON_STR IN NUMBER) RETURN NUMBER IS
  BEGIN
    /*SRW.MESSAGE('001'
               ,'First Str: ' || FIRST_STR)*/NULL;
    RETURN (STR_UNPLANNED + NON_STR_UNPLANNED + FIRST_STR + FIRST_NON_STR);
  END CF_UNPLANNEDFORMULA;

  PROCEDURE GET_FIRST_MON_STR_UNPL IS
  BEGIN
    INSERT INTO JE_HU_BALANCES_REPORT
      (CATEGORY_ID
      ,ASSET_ID
      ,DISTRIBUTION_CCID
      ,ADJUSTMENT_CCID
      ,CATEGORY_BOOKS_ACCOUNT
      ,SOURCE_TYPE_CODE
      ,AMOUNT)
      SELECT
        AH.CATEGORY_ID,
        AH.ASSET_ID,
        DH.CODE_COMBINATION_ID,
        null,
        DECODE(RT.LOOKUP_CODE
              ,'RESERVE'
              ,CB.DEPRN_RESERVE_ACCT
              ,'REVAL RESERVE'
              ,CB.REVAL_RESERVE_ACCT),
        'FIRST STR',
        SUM(NVL(DD.DEPRN_ADJUSTMENT_AMOUNT
               ,0))
      FROM
        FA_LOOKUPS RT,
        FA_CATEGORY_BOOKS CB,
        FA_DISTRIBUTION_HISTORY DH,
        FA_ASSET_HISTORY AH,
        FA_DEPRN_DETAIL DD,
        FA_DEPRN_PERIODS DP,
        FA_BOOKS BO,
        FA_METHODS ME,
        FA_TRANSACTION_HEADERS TH
      WHERE DH.BOOK_TYPE_CODE = CP_DISTRIBUTION_SOURCE_BOOK
        AND AH.ASSET_ID = DH.ASSET_ID
        AND AH.ASSET_TYPE = 'CAPITALIZED'
        AND AH.DATE_EFFECTIVE < NVL(DH.DATE_INEFFECTIVE
         ,SYSDATE)
        AND NVL(DH.DATE_INEFFECTIVE
         ,SYSDATE) <= NVL(AH.DATE_INEFFECTIVE
         ,SYSDATE)
        AND CB.CATEGORY_ID = AH.CATEGORY_ID
        AND CB.BOOK_TYPE_CODE = P_BOOK
        AND DD.DEPRN_SOURCE_CODE = 'B'
        AND DD.BOOK_TYPE_CODE || '' = P_BOOK
        AND DD.ASSET_ID = DH.ASSET_ID
        AND DD.DISTRIBUTION_ID = DH.DISTRIBUTION_ID
        AND DD.PERIOD_COUNTER between CP_PERIOD1_PC - 1
        AND CP_PERIOD2_PC
        AND DP.BOOK_TYPE_CODE = DD.BOOK_TYPE_CODE
        AND DP.PERIOD_COUNTER = DD.PERIOD_COUNTER
        AND DECODE(RT.LOOKUP_CODE
            ,'RESERVE'
            ,CB.DEPRN_RESERVE_ACCT
            ,'REVAL RESERVE'
            ,CB.REVAL_RESERVE_ACCT) is not null
        AND DD.DEPRN_ADJUSTMENT_AMOUNT is not null
        AND DD.ASSET_ID = BO.ASSET_ID
        AND DD.BOOK_TYPE_CODE = BO.BOOK_TYPE_CODE
        AND BO.TRANSACTION_HEADER_ID_IN = TH.TRANSACTION_HEADER_ID
        AND TH.TRANSACTION_TYPE_CODE = 'ADDITION'
        AND ME.METHOD_CODE = BO.DEPRN_METHOD_CODE
        AND ME.STL_METHOD_FLAG = 'YES'
        AND NVL(ME.LIFE_IN_MONTHS
         ,0) = NVL(BO.LIFE_IN_MONTHS
         ,0)
      GROUP BY
        AH.CATEGORY_ID,
        AH.ASSET_ID,
        DH.CODE_COMBINATION_ID,
        DECODE(RT.LOOKUP_CODE
              ,'RESERVE'
              ,CB.DEPRN_RESERVE_ACCT
              ,'REVAL RESERVE'
              ,CB.REVAL_RESERVE_ACCT),
        DD.DEPRN_SOURCE_CODE;
  END GET_FIRST_MON_STR_UNPL;

  PROCEDURE GET_FIRST_MON_NON_STR_UNPL IS
  BEGIN
    INSERT INTO JE_HU_BALANCES_REPORT
      (CATEGORY_ID
      ,ASSET_ID
      ,DISTRIBUTION_CCID
      ,ADJUSTMENT_CCID
      ,CATEGORY_BOOKS_ACCOUNT
      ,SOURCE_TYPE_CODE
      ,AMOUNT)
      SELECT
        AH.CATEGORY_ID,
        AH.ASSET_ID,
        DH.CODE_COMBINATION_ID,
        null,
        DECODE(RT.LOOKUP_CODE
              ,'RESERVE'
              ,CB.DEPRN_RESERVE_ACCT
              ,'REVAL RESERVE'
              ,CB.REVAL_RESERVE_ACCT),
        'FIRST NON STR',
        SUM(NVL(DD.DEPRN_ADJUSTMENT_AMOUNT
               ,0))
      FROM
        FA_LOOKUPS RT,
        FA_CATEGORY_BOOKS CB,
        FA_DISTRIBUTION_HISTORY DH,
        FA_ASSET_HISTORY AH,
        FA_DEPRN_DETAIL DD,
        FA_DEPRN_PERIODS DP,
        FA_BOOKS BO,
        FA_METHODS ME,
        FA_TRANSACTION_HEADERS TH
      WHERE DH.BOOK_TYPE_CODE = CP_DISTRIBUTION_SOURCE_BOOK
        AND AH.ASSET_ID = DH.ASSET_ID
        AND AH.ASSET_TYPE = 'CAPITALIZED'
        AND AH.DATE_EFFECTIVE < NVL(DH.DATE_INEFFECTIVE
         ,SYSDATE)
        AND NVL(DH.DATE_INEFFECTIVE
         ,SYSDATE) <= NVL(AH.DATE_INEFFECTIVE
         ,SYSDATE)
        AND CB.CATEGORY_ID = AH.CATEGORY_ID
        AND CB.BOOK_TYPE_CODE = P_BOOK
        AND DD.DEPRN_SOURCE_CODE = 'B'
        AND DD.BOOK_TYPE_CODE || '' = P_BOOK
        AND DD.ASSET_ID = DH.ASSET_ID
        AND DD.DISTRIBUTION_ID = DH.DISTRIBUTION_ID
        AND DD.PERIOD_COUNTER between CP_PERIOD1_PC - 1
        AND CP_PERIOD2_PC
        AND DP.BOOK_TYPE_CODE = DD.BOOK_TYPE_CODE
        AND DP.PERIOD_COUNTER = DD.PERIOD_COUNTER
        AND DECODE(RT.LOOKUP_CODE
            ,'RESERVE'
            ,CB.DEPRN_RESERVE_ACCT
            ,'REVAL RESERVE'
            ,CB.REVAL_RESERVE_ACCT) is not null
        AND DD.DEPRN_ADJUSTMENT_AMOUNT is not null
        AND DD.ASSET_ID = BO.ASSET_ID
        AND DD.BOOK_TYPE_CODE = BO.BOOK_TYPE_CODE
        AND BO.TRANSACTION_HEADER_ID_IN = TH.TRANSACTION_HEADER_ID
        AND TH.TRANSACTION_TYPE_CODE = 'ADDITION'
        AND ME.METHOD_CODE = BO.DEPRN_METHOD_CODE
        AND ME.STL_METHOD_FLAG = 'NO'
        AND NVL(ME.LIFE_IN_MONTHS
         ,0) = NVL(BO.LIFE_IN_MONTHS
         ,0)
      GROUP BY
        AH.CATEGORY_ID,
        AH.ASSET_ID,
        DH.CODE_COMBINATION_ID,
        DECODE(RT.LOOKUP_CODE
              ,'RESERVE'
              ,CB.DEPRN_RESERVE_ACCT
              ,'REVAL RESERVE'
              ,CB.REVAL_RESERVE_ACCT),
        DD.DEPRN_SOURCE_CODE;
  END GET_FIRST_MON_NON_STR_UNPL;

  FUNCTION CF_TOTAL_DEPRECIATIONFORMULA(CF_UNPLANNED IN NUMBER
                                       ,END1 IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CF_UNPLANNED + END1);
  END CF_TOTAL_DEPRECIATIONFORMULA;

  FUNCTION ACCT_BAL_APROMPT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ACCT_BAL_APROMPT;
  END ACCT_BAL_APROMPT_P;

  FUNCTION ACCT_CC_APROMPT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ACCT_CC_APROMPT;
  END ACCT_CC_APROMPT_P;

  FUNCTION CAT_MAJ_RPROMPT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CAT_MAJ_RPROMPT;
  END CAT_MAJ_RPROMPT_P;

  FUNCTION PERIOD1_POD_P RETURN DATE IS
  BEGIN
    RETURN PERIOD1_POD;
  END PERIOD1_POD_P;

  FUNCTION PERIOD1_PCD_P RETURN DATE IS
  BEGIN
    RETURN PERIOD1_PCD;
  END PERIOD1_PCD_P;

  FUNCTION PERIOD1_FY_P RETURN NUMBER IS
  BEGIN
    RETURN PERIOD1_FY;
  END PERIOD1_FY_P;

  FUNCTION PERIOD2_POD_P RETURN DATE IS
  BEGIN
    RETURN PERIOD2_POD;
  END PERIOD2_POD_P;

  FUNCTION PERIOD2_PCD_P RETURN DATE IS
  BEGIN
    RETURN PERIOD2_PCD;
  END PERIOD2_PCD_P;

  FUNCTION PERIOD2_FY_P RETURN NUMBER IS
  BEGIN
    RETURN PERIOD2_FY;
  END PERIOD2_FY_P;

  FUNCTION RP_COMPANY_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_COMPANY_NAME;
  END RP_COMPANY_NAME_P;

  FUNCTION RP_REPORT_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_REPORT_NAME;
  END RP_REPORT_NAME_P;

  FUNCTION RP_BAL_LPROMPT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_BAL_LPROMPT;
  END RP_BAL_LPROMPT_P;

  FUNCTION RP_CTR_APROMPT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_CTR_APROMPT;
  END RP_CTR_APROMPT_P;

  FUNCTION CP_DISTRIBUTION_SOURCE_BOOK_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_DISTRIBUTION_SOURCE_BOOK;
  END CP_DISTRIBUTION_SOURCE_BOOK_P;

  FUNCTION CP_PERIOD1_PC_P RETURN NUMBER IS
  BEGIN
    RETURN CP_PERIOD1_PC;
  END CP_PERIOD1_PC_P;

  FUNCTION CP_PERIOD1_POD_P RETURN DATE IS
  BEGIN
    RETURN CP_PERIOD1_POD;
  END CP_PERIOD1_POD_P;

  FUNCTION CP_PERIOD1_PCD_P RETURN DATE IS
  BEGIN
    RETURN CP_PERIOD1_PCD;
  END CP_PERIOD1_PCD_P;

  FUNCTION CP_PERIOD2_PC_P RETURN NUMBER IS
  BEGIN
    RETURN CP_PERIOD2_PC;
  END CP_PERIOD2_PC_P;

  FUNCTION CP_PERIOD2_PCD_P RETURN DATE IS
  BEGIN
    RETURN CP_PERIOD2_PCD;
  END CP_PERIOD2_PCD_P;

  FUNCTION CP_BALANCE_TYPE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_BALANCE_TYPE;
  END CP_BALANCE_TYPE_P;

  FUNCTION CP_PERIOD_FROM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_PERIOD_FROM;
  END CP_PERIOD_FROM_P;

  FUNCTION CP_PERIOD_TO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_PERIOD_TO;
  END CP_PERIOD_TO_P;

  FUNCTION CP_OPEN_CLOSED_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_OPEN_CLOSED;
  END CP_OPEN_CLOSED_P;

  FUNCTION B_PERIOD_OPENFORMATTRIGGER RETURN VARCHAR2 IS
-- DAVID HAIMES JULY 1999 11.5 UPGRADE BUG

END_DATE DATE;

BEGIN

SELECT PERIOD_CLOSE_DATE
INTO END_DATE
FROM FA_DEPRN_PERIODS
WHERE BOOK_TYPE_CODE = P_BOOK
AND PERIOD_NAME = P_PERIOD2;


IF END_DATE IS NULL THEN
	RETURN('TRUE');
ELSE
	RETURN('FALSE');
END IF;
RETURN(NULL);
END;

END JE_JEHUFDAN_XMLP_PKG;



/
