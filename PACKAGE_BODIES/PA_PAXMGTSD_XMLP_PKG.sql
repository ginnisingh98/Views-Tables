--------------------------------------------------------
--  DDL for Package Body PA_PAXMGTSD_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PA_PAXMGTSD_XMLP_PKG" AS
/* $Header: PAXMGTSDB.pls 120.0 2008/01/02 11:38:18 krreddy noship $ */
  FUNCTION GET_COVER_PAGE_VALUES RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COVER_PAGE_VALUES;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      INIT_FAILURE EXCEPTION;
      P_ORG HR_ORGANIZATION_UNITS.NAME%TYPE;
      P_MGR VARCHAR2(30);
      P_NUMBER VARCHAR2(30);
      P_NAME VARCHAR2(30);
      TSK_NUM VARCHAR2(30);
      TSK_NAME VARCHAR2(30);
      P_COST_BGT_CODE VARCHAR2(30);
      P_COST_BGT_TYPE VARCHAR2(30);
      P_REV_BGT_CODE VARCHAR2(30);
      P_REV_BGT_TYPE VARCHAR2(30);
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
      /*SRW.USER_EXIT('FND GETPROFILE
                    NAME="PA_RULE_BASED_OPTIMIZER"
                    FIELD=":p_rule_optimizer"
                    PRINT_ERROR="N"')*/NULL;
      P_DEBUG_MODE := FND_PROFILE.VALUE('PA_DEBUG_MODE');
      IF TASK_ORG IS NOT NULL THEN
        SELECT
          SUBSTR(NAME
                ,1
                ,60)
        INTO P_ORG
        FROM
          HR_ORGANIZATION_UNITS
        WHERE TASK_ORG = ORGANIZATION_ID;
      END IF;
      C_ORG := P_ORG;
      IF TASK_MGR IS NOT NULL THEN
        SELECT
          FULL_NAME
        INTO P_MGR
        FROM
          PER_PEOPLE_F
        WHERE TASK_MGR = PERSON_ID
          AND sysdate between EFFECTIVE_START_DATE
          AND NVL(EFFECTIVE_END_DATE
           ,SYSDATE + 1)
          AND EMPLOYEE_NUMBER IS NOT NULL;
      END IF;
      C_MGR := P_MGR;
      IF PROJ IS NOT NULL THEN
        SELECT
          SEGMENT1,
          NAME
        INTO P_NUMBER,P_NAME
        FROM
          PA_PROJECTS
        WHERE PROJ = PROJECT_ID;
      END IF;
      C_PROJ_NUM := P_NUMBER;
      C_PROJ_NAME := P_NAME;
      IF TASK IS NOT NULL THEN
        SELECT
          TASK_NUMBER,
          TASK_NAME
        INTO TSK_NUM,TSK_NAME
        FROM
          PA_TASKS
        WHERE TASK = TASK_ID;
      END IF;
      C_TASK_NUM := TSK_NUM;
      C_TASK_NAME := TSK_NAME;
      IF (GET_COMPANY_NAME <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (NO_DATA_FOUND_FUNC <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (COST_BGT_CODE IS NULL) THEN
        SELECT
          BUDGET_TYPE_CODE,
          BUDGET_TYPE
        INTO P_COST_BGT_CODE,P_COST_BGT_TYPE
        FROM
          PA_BUDGET_TYPES
        WHERE BUDGET_AMOUNT_CODE = 'C'
          AND PREDEFINED_FLAG = 'Y'
          AND BUDGET_TYPE_CODE = 'AC';
        C_COST_BGT_CODE := P_COST_BGT_CODE;
        C_COST_BGT_NAME := P_COST_BGT_TYPE;
      ELSE
        SELECT
          BUDGET_TYPE
        INTO P_COST_BGT_TYPE
        FROM
          PA_BUDGET_TYPES
        WHERE BUDGET_TYPE_CODE = COST_BGT_CODE;
        C_COST_BGT_CODE := COST_BGT_CODE;
        C_COST_BGT_NAME := P_COST_BGT_TYPE;
      END IF;
      IF (REV_BGT_CODE IS NULL) THEN
        SELECT
          BUDGET_TYPE_CODE,
          BUDGET_TYPE
        INTO P_REV_BGT_CODE,P_REV_BGT_TYPE
        FROM
          PA_BUDGET_TYPES
        WHERE BUDGET_AMOUNT_CODE = 'R'
          AND PREDEFINED_FLAG = 'Y'
          AND BUDGET_TYPE_CODE = 'AR';
        C_REV_BGT_CODE := P_REV_BGT_CODE;
        C_REV_BGT_NAME := P_REV_BGT_TYPE;
      ELSE
        SELECT
          BUDGET_TYPE
        INTO P_REV_BGT_TYPE
        FROM
          PA_BUDGET_TYPES
        WHERE BUDGET_TYPE_CODE = REV_BGT_CODE;
        C_REV_BGT_CODE := REV_BGT_CODE;
        C_REV_BGT_NAME := P_REV_BGT_TYPE;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION GET_COMPANY_NAME RETURN BOOLEAN IS
    L_NAME GL_SETS_OF_BOOKS.NAME%TYPE;
  BEGIN
    SELECT
      GL.NAME
    INTO L_NAME
    FROM
      GL_SETS_OF_BOOKS GL,
      PA_IMPLEMENTATIONS PI
    WHERE GL.SET_OF_BOOKS_ID = PI.SET_OF_BOOKS_ID;
    C_COMPANY_NAME_HEADER := L_NAME;
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COMPANY_NAME;

  FUNCTION NO_DATA_FOUND_FUNC RETURN BOOLEAN IS
    MESSAGE_NAME VARCHAR2(80);
  BEGIN
    SELECT
      MEANING
    INTO MESSAGE_NAME
    FROM
      PA_LOOKUPS
    WHERE LOOKUP_TYPE = 'MESSAGE'
      AND LOOKUP_CODE = 'NO_DATA_FOUND';
    C_NO_DATA_FOUND := MESSAGE_NAME;
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END NO_DATA_FOUND_FUNC;

  FUNCTION GET_PERIOD(SD IN DATE) RETURN VARCHAR2 IS
    PERNAME VARCHAR2(30);
    ST_DATE DATE;
    E_DATE DATE;
  BEGIN
    IF (PA_PERIOD IS NULL) THEN
      SELECT
        PERIOD_NAME,
        START_DATE,
        END_DATE
      INTO PERNAME,ST_DATE,E_DATE
      FROM
        PA_PERIODS
      WHERE TRUNC(SYSDATE) between TRUNC(START_DATE)
        AND TRUNC(END_DATE);
    ELSE
      SELECT
        PERIOD_NAME,
        START_DATE,
        END_DATE
      INTO PERNAME,ST_DATE,E_DATE
      FROM
        PA_PERIODS
      WHERE PERIOD_NAME = PA_PERIOD;
    END IF;
    C_START_DATE := to_char(ST_DATE,'DD-MON-YY');
    C_END_DATE := to_char(E_DATE,'DD-MON-YY');
    RETURN (PERNAME);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END GET_PERIOD;

  FUNCTION PERIOD_NAMEFORMULA RETURN VARCHAR2 IS
  BEGIN
    RETURN (GET_PERIOD(SYSDATE));
  END PERIOD_NAMEFORMULA;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    END;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION C_TASK_ACTUAL_COSTFORMULA RETURN NUMBER IS
  BEGIN
    RETURN NULL;
  END C_TASK_ACTUAL_COSTFORMULA;

  FUNCTION C_ACT_PER_REVFORMULA(RESOURCE_LIST_MEMBER_ID IN NUMBER
                               ,TASK_ID3 IN NUMBER
                               ,PERIOD_NAME IN VARCHAR2
                               ,PROJECT_ID2 IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (GET_PERIOD_AMT('REVENUE'
                         ,RESOURCE_LIST_MEMBER_ID
                         ,TASK_ID3
                         ,PA_PERIOD
                         ,PROJECT_ID2));
  END C_ACT_PER_REVFORMULA;

  FUNCTION GET_PERIOD_AMT(X_TYPE IN VARCHAR2
                         ,X_RSRC_LIST_MEMBER_ID IN NUMBER
                         ,X_TASK_ID IN NUMBER
			 ,PERIOD_NAME IN VARCHAR2
			 ,PROJECT_ID2 IN NUMBER
			 ) RETURN NUMBER IS
    X_REVENUE NUMBER;
    X_RAW_COST NUMBER;
    X_BURDENED_COST NUMBER;
    X_QUANTITY NUMBER;
    X_LABOR_HOURS NUMBER;
    X_BILLABLE_RAW_COST NUMBER;
    X_BILLABLE_BURDENED_COST NUMBER;
    X_BILLABLE_QUANTITY NUMBER;
    X_BILLABLE_LABOR_HOURS NUMBER;
    X_CMT_RAW_COST NUMBER;
    X_CMT_BURDENED_COST NUMBER;
    X_UNIT_OF_MEASURE VARCHAR2(100);
    X_ERR_STAGE VARCHAR2(100);
    X_ERR_CODE NUMBER;
    L_PRD_START_DATE DATE;
    L_PRD_END_DATE DATE;
  BEGIN
    X_REVENUE := 0;
    X_RAW_COST := 0;
    X_BURDENED_COST := 0;
    X_QUANTITY := 0;
    X_LABOR_HOURS := 0;
    X_BILLABLE_RAW_COST := 0;
    X_BILLABLE_BURDENED_COST := 0;
    X_BILLABLE_QUANTITY := 0;
    X_BILLABLE_LABOR_HOURS := 0;
    X_CMT_RAW_COST := 0;
    X_CMT_BURDENED_COST := 0;
    X_UNIT_OF_MEASURE := NULL;
    X_ERR_STAGE := NULL;
    X_ERR_CODE := 0;
    L_PRD_START_DATE := NULL;
    L_PRD_END_DATE := NULL;
    SELECT
      START_DATE,
      END_DATE
    INTO L_PRD_START_DATE,L_PRD_END_DATE
    FROM
      PA_PERIODS
    WHERE PERIOD_NAME = GET_PERIOD_AMT.PERIOD_NAME
      AND PERIOD_NAME IS NOT NULL;
    PA_ACCUM_API.GET_PROJ_ACCUM_ACTUALS(PROJECT_ID2
                                       ,X_TASK_ID
                                       ,X_RSRC_LIST_MEMBER_ID
                                       ,'P'
                                       ,PERIOD_NAME
                                       ,L_PRD_START_DATE
                                       ,L_PRD_END_DATE
                                       ,X_REVENUE
                                       ,X_RAW_COST
                                       ,X_BURDENED_COST
                                       ,X_QUANTITY
                                       ,X_LABOR_HOURS
                                       ,X_BILLABLE_RAW_COST
                                       ,X_BILLABLE_BURDENED_COST
                                       ,X_BILLABLE_QUANTITY
                                       ,X_BILLABLE_LABOR_HOURS
                                       ,X_CMT_RAW_COST
                                       ,X_CMT_BURDENED_COST
                                       ,X_UNIT_OF_MEASURE
                                       ,X_ERR_STAGE
                                       ,X_ERR_CODE);
    IF (X_ERR_CODE = 0) THEN
      IF (X_TYPE = 'REVENUE') THEN
        RETURN (X_REVENUE);
      ELSE
        RETURN (X_BURDENED_COST);
      END IF;
    ELSE
      RETURN (-1);
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END GET_PERIOD_AMT;

  FUNCTION C_ACT_PER_COSTFORMULA(RESOURCE_LIST_MEMBER_ID1 IN NUMBER
                                ,TASK_ID5 IN NUMBER
                                ,PERIOD_NAME IN VARCHAR2
                                ,PROJECT_ID2 IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (GET_PERIOD_AMT('COST'
                         ,RESOURCE_LIST_MEMBER_ID1
                         ,TASK_ID5
                         ,PA_PERIOD
                         ,PROJECT_ID2));
  END C_ACT_PER_COSTFORMULA;

  FUNCTION C_ACT_PER_REV_SUMFORMULA(C_ACT_PER_REV IN NUMBER
                                   ,MEMBER_LEVEL2 IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (GET_PERIOD_AMT_SUM(C_ACT_PER_REV
                             ,MEMBER_LEVEL2));
  END C_ACT_PER_REV_SUMFORMULA;

  FUNCTION GET_RSRC_NAME_DISP(X_ALIAS IN VARCHAR2
                             ,X_LEVEL IN NUMBER) RETURN VARCHAR2 IS
    LNAME VARCHAR2(30);
  BEGIN
    LNAME := NULL;
    LNAME := (LPAD(' '
                 ,2 * (X_LEVEL - 1)) || X_ALIAS);
    RETURN (LNAME);
  END GET_RSRC_NAME_DISP;

  FUNCTION C_ACT_PER_COST_SUMFORMULA(C_ACT_PER_COST IN NUMBER
                                    ,MEMBER_LEVEL1 IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (GET_PERIOD_AMT_SUM(C_ACT_PER_COST
                             ,MEMBER_LEVEL1));
  END C_ACT_PER_COST_SUMFORMULA;

  FUNCTION GET_PERIOD_AMT_SUM(X_AMT IN NUMBER
                             ,X_LEVEL IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (X_LEVEL = 1) THEN
      RETURN (X_AMT);
    ELSE
      RETURN (0);
    END IF;
  END GET_PERIOD_AMT_SUM;

  FUNCTION C_SUM_RPT_TOTALSFORMULA(PARENT_TASK_ID IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    RETURN (CHECK_SUM_RPT_TOTALS(PARENT_TASK_ID));
  END C_SUM_RPT_TOTALSFORMULA;

  FUNCTION CHECK_SUM_RPT_TOTALS(PARENT_TASK_ID IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    IF (TASK IS NULL) THEN
      IF (PARENT_TASK_ID IS NULL) THEN
        C_SUM_RPT_TOTALS:='YES';
        RETURN ('YES');
      ELSE
        C_SUM_RPT_TOTALS:='NO';
        RETURN ('NO');
      END IF;
    ELSE
      C_SUM_RPT_TOTALS:='YES';
      RETURN ('YES');
    END IF;
  END CHECK_SUM_RPT_TOTALS;

  FUNCTION C_RPT_BGT_COST_SUMFORMULA(BGT_COST_SUM IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (GET_REPORT_LINE_TOTAL(BGT_COST_SUM));
  END C_RPT_BGT_COST_SUMFORMULA;

  FUNCTION GET_REPORT_LINE_TOTAL(X_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (C_SUM_RPT_TOTALS = 'YES') THEN
      RETURN (X_AMOUNT);
    ELSE
      RETURN (0);
    END IF;
  END GET_REPORT_LINE_TOTAL;

  FUNCTION C_RPT_ACT_COST_SUMFORMULA(ACT_COST_SUM IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (GET_REPORT_LINE_TOTAL(ACT_COST_SUM));
  END C_RPT_ACT_COST_SUMFORMULA;

  FUNCTION C_RPT_ACT_PER_COST_SUMFORMULA(C_ACT_PER_COST_SUM IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (GET_REPORT_LINE_TOTAL(C_ACT_PER_COST_SUM));
  END C_RPT_ACT_PER_COST_SUMFORMULA;

  FUNCTION C_RPT_ACT_REV_SUMFORMULA(ACT_REV_SUM IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (GET_REPORT_LINE_TOTAL(ACT_REV_SUM));
  END C_RPT_ACT_REV_SUMFORMULA;

  FUNCTION C_RPT_ACT_PER_REV_SUMFORMULA(C_ACT_PER_REV_SUM IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (GET_REPORT_LINE_TOTAL(C_ACT_PER_REV_SUM));
  END C_RPT_ACT_PER_REV_SUMFORMULA;

  FUNCTION C_RPT_BGT_REV_SUMFORMULA(BGT_REV_SUM IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (GET_REPORT_LINE_TOTAL(BGT_REV_SUM));
  END C_RPT_BGT_REV_SUMFORMULA;

  FUNCTION CF_CURRENCY_CODEFORMULA RETURN CHAR IS
  BEGIN
    RETURN (PA_MULTI_CURRENCY.GET_ACCT_CURRENCY_CODE);
  END CF_CURRENCY_CODEFORMULA;

  FUNCTION C_COMPANY_NAME_HEADER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COMPANY_NAME_HEADER;
  END C_COMPANY_NAME_HEADER_P;

  FUNCTION C_NO_DATA_FOUND_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NO_DATA_FOUND;
  END C_NO_DATA_FOUND_P;

  FUNCTION C_ORG_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_ORG;
  END C_ORG_P;

  FUNCTION C_PROJ_NUM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_PROJ_NUM;
  END C_PROJ_NUM_P;

  FUNCTION C_PROJ_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_PROJ_NAME;
  END C_PROJ_NAME_P;

  FUNCTION C_MGR_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_MGR;
  END C_MGR_P;

  FUNCTION C_START_DATE_P RETURN DATE IS
  BEGIN
    RETURN C_START_DATE;
  END C_START_DATE_P;

  FUNCTION C_END_DATE_P RETURN DATE IS
  BEGIN
    RETURN C_END_DATE;
  END C_END_DATE_P;

  FUNCTION C_COST_BGT_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COST_BGT_NAME;
  END C_COST_BGT_NAME_P;

  FUNCTION C_REV_BGT_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_REV_BGT_NAME;
  END C_REV_BGT_NAME_P;

  FUNCTION C_COST_BGT_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COST_BGT_CODE;
  END C_COST_BGT_CODE_P;

  FUNCTION C_REV_BGT_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_REV_BGT_CODE;
  END C_REV_BGT_CODE_P;

  FUNCTION C_TASK_NUM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_TASK_NUM;
  END C_TASK_NUM_P;

  FUNCTION C_TASK_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_TASK_NAME;
  END C_TASK_NAME_P;

END PA_PAXMGTSD_XMLP_PKG;


/
