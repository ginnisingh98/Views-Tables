--------------------------------------------------------
--  DDL for Package Body OKS_RULE_MIGRATE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."OKS_RULE_MIGRATE" AS
/* $Header: OKSRMIGB.pls 120.4 2006/08/02 23:37:28 tweichen noship $ */


-- Global vars to hold the min and max hdr_id for each sub-request range
 type range_rec is record (
 	lo number,
	hi number,
	jobno number);
 type rangeArray is VARRAY(50) of range_rec;
 range_arr rangeArray;
 g_instance_id integer := 0;
--------------------------------------------------------------------------------
-------------- Global Varibale declarations for Rules Migration ----------------
--------------------------------------------------------------------------------
-- Global constant for the threshold count before splitting into sub-requests
         MAX_SINGLE_REQUEST	NUMBER := 500;

-- Global constant for the maximum allowed sub-requests (parallel workers)
         MAX_JOBS		NUMBER := 30;

--------------------------------------------------------------------------------
FUNCTION GET_DATA_VOLUME RETURN NUMBER IS

 CURSOR L_DATA_VOLUME_CSR IS
 SELECT /*+ PARALLEL(L) */ COUNT(*)
  FROM OKC_K_LINES_B L
 WHERE LSE_ID IN (1,2,3,4,5,6,7,8,9,10,11,35, 12,13,14,15,16,17,18,19,20,21,22,23,24,46) ;
 L_COUNT NUMBER;
BEGIN

 OPEN L_DATA_VOLUME_CSR ;
 FETCH L_DATA_VOLUME_CSR INTO L_COUNT;
 CLOSE L_DATA_VOLUME_CSR;
 RETURN(NVL(L_COUNT,0));

END GET_DATA_VOLUME;




--------------------------------------------------------------------------------------------
--             Generate Range and Split Function.                                         --
--------------------------------------------------------------------------------------------

procedure split_range (
 p_lo number,
 p_hi number,
 p_buckets number) is
 -- splits range (p_lo=>p_hi) into p_buckets pieces and appends to VArrays.
 l_lo number := p_lo;
 l_idx1 number := range_arr.count + 1;
 l_idx2 number := range_arr.count + p_buckets;
 l_bucket_width integer;
begin
  FND_FILE.PUT_LINE (FND_FILE.LOG, 'p_lo = '||p_lo );
  FND_FILE.PUT_LINE (FND_FILE.LOG, 'p_hi = '||p_hi );
  FND_FILE.PUT_LINE (FND_FILE.LOG, 'p_buckets = '||p_buckets );

  If p_buckets = 0 then
     return;
  End if;
  if range_arr.count > 0 then
     -- so we don't overlap high value of previous range
     l_lo := p_lo + 1;
  end if;

  l_bucket_width := (p_hi - l_lo) / p_buckets;

  range_arr.extend(p_buckets);

  for idx in l_idx1..l_idx2 loop
      range_arr(idx).lo := l_lo + ((idx - l_idx1) * l_bucket_width);
      if idx < l_idx2 then
	 range_arr(idx).hi := range_arr(idx).lo + l_bucket_width -1;
      else
	range_arr(idx).hi := p_hi;
      end if;
  end loop;
end split_range;

function generate_ranges (
     p_lo  IN number,
     p_hi  IN number,
     p_avg In number,
     p_stddev IN number,
     p_total  IN number,
     p_sub_requests IN number) return integer is

 l_total_buckets integer := 0;
 l_stdlo number := greatest(round(p_avg - p_stddev), p_lo);
 l_stdhi number := least(round(p_avg + p_stddev), p_hi);
 l_stddev_percent number   := 0.66;  -- the area covered by +/-1 stddev


 l_outlier_buckets integer := 0;
 l_std_buckets integer     := 0;
 l_lo_buckets integer      := 0;
 l_hi_buckets integer      := 0;
 l_outlier_entries_per_bucket number := 0;
 modidx integer;
begin
  range_arr := rangeArray();

  --l_total_buckets := greatest(nvl(p_sub_requests,3), least(p_total/MAX_SINGLE_REQUEST, MAX_JOBS));
    l_total_buckets := greatest(p_sub_requests,2);
  l_outlier_buckets := l_total_buckets * (1 - l_stddev_percent);
  if l_outlier_buckets > 0 then
     l_outlier_entries_per_bucket := p_total * (1 - l_stddev_percent)
                                                  / l_outlier_buckets ;
  end if;

  for idx in 1..l_outlier_buckets
  loop
       modidx := mod(idx,2);
       -- alternate assignment between hi and lo buckets
       if modidx = 1
          AND (p_hi - (l_hi_buckets+1) * l_outlier_entries_per_bucket)
          > l_stdhi then
               -- allocate buckets for positive outliers
               l_hi_buckets := l_hi_buckets + 1;
       elsif modidx = 0
          AND (p_lo + (l_lo_buckets+1) * l_outlier_entries_per_bucket)
          < l_stdlo then
               -- allocate buckets for negative outliers
               l_lo_buckets := l_lo_buckets + 1;
          -- else min or max has been consumed, save bucket for middle
      end if;
  end loop;

  -- compute middle buckets
  l_std_buckets := l_total_buckets - l_lo_buckets - l_hi_buckets;

  -- in case low-high allocations yielded zero buckets.
  -- i.e., outliers were folded into middle buckets.
  if l_lo_buckets = 0 then
       l_stdlo := p_lo;
  end if;
  if l_hi_buckets = 0 then
       l_stdhi := p_hi;
  end if;

  -- ranges for negative outliers
  split_range(p_lo, l_stdlo, l_lo_buckets);
  -- ranges for +/-1 stddev from mean
  split_range(l_stdlo, l_stdhi, l_std_buckets);
  -- ranges for positive outliers
  split_range(l_stdhi, p_hi, l_hi_buckets);

  return l_total_buckets;
end generate_ranges;



------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
------                     Rule Migration new process code starts from here                              ---
------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------


PROCEDURE UPDATE_RULE_RECORD(
     P_ID                 IN NUMBER,
     P_COLUMN_NAME        IN VARCHAR2,
     P_NEW_VALUE          IN VARCHAR2,
     P_CURRENT_VALUE      IN VARCHAR2,
     P_RULE_INFO_CATEGORY IN VARCHAR2,
     P_ROW_ID             IN VARCHAR2,
     P_MAJOR_VERSION      IN NUMBER,
     X_RETURN_STATUS      OUT NOCOPY VARCHAR2,
     X_ERROR_MSG          OUT NOCOPY VARCHAR2) is

 L_STMT  varchar2(2000);
 L_STMT1 varchar2(2000);

BEGIN
  X_RETURN_STATUS := 'S' ;

  IF(P_MAJOR_VERSION IS NULL) THEN

    L_STMT := 'UPDATE OKC_RULES_B SET '|| P_COLUMN_NAME ||
              ' =  :1 ' || ' WHERE ID = :2 AND RULE_INFORMATION_CATEGORY = :3 ';
    EXECUTE IMMEDIATE L_STMT USING  P_NEW_VALUE , P_ID , P_RULE_INFO_CATEGORY;

  ELSE

    L_STMT := 'UPDATE OKC_RULES_BH SET '|| P_COLUMN_NAME ||
              ' =  :1 ' || ' WHERE ID = :2 AND RULE_INFORMATION_CATEGORY = :3
	      AND MAJOR_VERSION = :4';

    EXECUTE IMMEDIATE L_STMT USING  P_NEW_VALUE , P_ID , P_RULE_INFO_CATEGORY,P_MAJOR_VERSION;

  END IF;

  L_STMT1 := 'UPDATE OKS_RULE_ERROR SET NEW_VALUE = :1 ' ||
              ' WHERE ROWID = '|| ''''||P_ROW_ID || '''' ;

  EXECUTE IMMEDIATE L_STMT1 USING  P_NEW_VALUE;

  X_RETURN_STATUS := 'S';

EXCEPTION
WHEN OTHERS THEN
  X_RETURN_STATUS := 'E' ;
  X_ERROR_MSG     := SQLERRM;


END UPDATE_RULE_RECORD;


--------------------------------------------------------------------------------------------
-- This is the main procedure called from validate rule Concurrent request .              --
--------------------------------------------------------------------------------------------

Procedure Validate_data1 (
    ERRBUF            OUT  NOCOPY VARCHAR2,
    RETCODE           OUT  NOCOPY NUMBER,
    P_STATUS          IN   VARCHAR2,
    P_ORG_ID          IN   NUMBER,
    P_LEVEL           IN VARCHAR2,
    P_SUB_REQUESTS    IN NUMBER,
    P_BATCH_SIZE      IN NUMBER )
IS

  Cursor l_hdr_agg_csr1 IS
  Select /*+ PARALLEL(rgp) */
         min(rgp.id) minid,
         max(rgp.id) maxid,
         avg(rgp.id) avgid,
         stddev(rgp.id) stdid,
         count(*) total
    From OKC_RULE_GROUPS_B rgp ;

  Cursor l_hdr_agg_csr2 IS
  Select /*+ PARALLEL(hdr) */
         min(hdr.id) minid,
         max(hdr.id) maxid,
         avg(hdr.id) avgid,
         stddev(hdr.id) stdid,
         count(*) total
    From OKC_K_HEADERS_B Hdr;

  Cursor l_hdr_agg_csr3 IS
  Select /*+ PARALLEL(rgp) */
         min(rgp.id) minid,
         max(rgp.id) maxid,
         avg(rgp.id) avgid,
         stddev(rgp.id) stdid,
         count(*) total
    From OKC_RULE_GROUPS_BH rgp ;

  Cursor l_hdr_agg_csr4 IS
  Select /*+ PARALLEL(hdr) */
         min(hdr.id) minid,
         max(hdr.id) maxid,
         avg(hdr.id) avgid,
         stddev(hdr.id) stdid,
         count(*) total
    From OKC_K_HEADERS_BH Hdr;

  l_hdr_agg_rec l_hdr_agg_csr1%ROWTYPE;

  -----------------------------------------------------------------
  --  Variable declaration for report                            --
  -----------------------------------------------------------------
  CURSOR L_REPORT_CSR IS
  SELECT OKS1.CONTRACT_NUMBER
       , OKS1.CONTRACT_NUMBER_MODIFIER
       , OKS1.LINE_NUMBER
       , OKS1.MAJOR_VERSION
       , OKS1.ATTRIBUTE_NAME
       , OKS1.ATTRIBUTE_VALUE
   FROM OKS_RULE_ERROR OKS1;

   CURSOR L_LEVEL IS
   SELECT MEANING
   FROM FND_LOOKUPS
   WHERE LOOKUP_TYPE='OKS_VAL_LOOKUP'
   AND LOOKUP_CODE=P_LEVEL;


TYPE L_CHR_TBL IS TABLE OF  CHAR(50) INDEX  By BINARY_INTEGER ;
TYPE L_CHR1_TBL IS TABLE OF  CHAR(20) INDEX  By BINARY_INTEGER ;
TYPE L_CHR2_TBL IS TABLE OF  CHAR(50) INDEX  By BINARY_INTEGER ;
TYPE L_CHR3_TBL IS TABLE OF  CHAR(100) INDEX  By BINARY_INTEGER ;

 L_CONTRACT_NUMBER L_CHR_TBL;
 L_MODIFIER        L_CHR_TBL;
 L_LINE_NUMBER     L_CHR1_TBL;
 L_MAJOR_VERSION   L_CHR1_TBL;
 L_ATTRIBUTE_NAME  L_CHR2_TBL;
 L_ATTRIBUTE_VALUE L_CHR3_TBL;
----------------------------------------------------------------
 l_sub_requests        INTEGER ;
 ip_sub_requests       INTEGER ;
 l_batch_size          INTEGER ;
 l_ret                 INTEGER;
 trunc_curs            INTEGER;
 rc                    INTEGER;
 plevel_msg            VARCHAR2(50);
 Contract_Number_msg   VARCHAR2(50);
 Modifier_msg          VARCHAR2(50);
 Major_Version_msg     VARCHAR2(50);
 Line_Number_msg       VARCHAR2(50);
 Attribute_Name_msg    VARCHAR2(50);
 Current_Value_msg     VARCHAR2(50);
 Validation_Report_msg VARCHAR2(50);
 l_truncate_string     varchar2(2000);


 ---------Variables for collecting table stats -----------------
 L_RETURN_CODE          VARCHAR2(100);
 L_ERROR_BUFFER         VARCHAR2(2000);


 ----------------------------------------------------------------
----------For NLS Numeric Characters---------------------------
-----------------------------------------------------------------
l_format varchar2(200);
l_us_yn VARCHAR2(30);

CURSOR l_nls_csr is
select   c.profile_option_value
  from   fnd_profile_options p,
         fnd_profile_option_values c
 where  p.profile_option_name = 'ICX_NUMERIC_CHARACTERS'
   and    p.start_date_active  <= sysdate
   and    nvl(p.end_date_active, sysdate) >= sysdate
   and    c.profile_option_id = p.profile_option_id
   and    c.application_id    = p.application_id
   and    c.level_id          = 10001
   and    c.level_value       = 0;
------------------------------------------------------------------


BEGIN
 FND_FILE.PUT_LINE (FND_FILE.LOG, '-------------------------------------------------------------------------------');
 FND_FILE.PUT_LINE (FND_FILE.LOG, '           START OF LOG FOR THE MAIN PROCEDURE                                 ');
 FND_FILE.PUT_LINE (FND_FILE.LOG, '-------------------------------------------------------------------------------');
 FND_FILE.PUT_LINE (FND_FILE.LOG, '----------Parameters passed to the Concurrent Request are as follows-----------');
 FND_FILE.PUT_LINE (FND_FILE.LOG, 'P_STATUS ==============> '||P_STATUS);
 FND_FILE.PUT_LINE (FND_FILE.LOG, 'P_ORG_ID ==============> '||P_ORG_ID);
 FND_FILE.PUT_LINE (FND_FILE.LOG, 'P_LEVEL  ==============> '||P_LEVEL);
 FND_FILE.PUT_LINE (FND_FILE.LOG, 'P_SUB_REQUESTS ========> '||P_SUB_REQUESTS);
 FND_FILE.PUT_LINE (FND_FILE.LOG, 'P_BATCH_SIZE  =========> '||P_BATCH_SIZE);
 FND_FILE.PUT_LINE (FND_FILE.LOG, '-------------------------------------------------------------------------------');

 IF P_SUB_REQUESTS IS NULL OR P_SUB_REQUESTS > 30 OR P_SUB_REQUESTS = 0 then
  ip_sub_requests := 30 ;
 ELSE
  ip_sub_requests := p_sub_requests ;
 END IF;

 IF p_batch_size is null or p_batch_size > 10000 or p_batch_size = 0 then
   l_batch_size := 10000;
 ELSE
   l_batch_size := p_batch_size;
 END IF;

 open L_LEVEL;
 fetch L_LEVEL into plevel_msg;
 close L_LEVEL;

 FND_MESSAGE.CLEAR;
 FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CONTRACT_NO');
 Contract_Number_msg := FND_MESSAGE.GET;

 FND_MESSAGE.CLEAR;
 FND_MESSAGE.SET_NAME('OKS','OKS_VAL_MODIFIER');
 Modifier_msg := FND_MESSAGE.GET;

 FND_MESSAGE.CLEAR;
 FND_MESSAGE.SET_NAME('OKS','OKS_VAL_MAJOR_VERSION');
 Major_Version_msg := FND_MESSAGE.GET;

 FND_MESSAGE.CLEAR;
 FND_MESSAGE.SET_NAME('OKS','OKS_VAL_LINE_NUMBER');
 Line_Number_msg := FND_MESSAGE.GET;

 FND_MESSAGE.CLEAR;
 FND_MESSAGE.SET_NAME('OKS','OKS_VAL_ATTRIBUTE_NAME');
 Attribute_Name_msg := FND_MESSAGE.GET;

 FND_MESSAGE.CLEAR;
 FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CURRENT_VALUE');
 Current_Value_msg := FND_MESSAGE.GET;

 FND_MESSAGE.CLEAR;
 FND_MESSAGE.SET_NAME('OKS','OKS_VAL_VALIDATION_REPORT');
 Validation_Report_msg := FND_MESSAGE.GET;

 open  l_nls_csr;
 fetch l_nls_csr into l_format;
 close l_nls_csr;
 if SUBSTR(l_format,0,1) = ',' THEN
    l_us_yn := 'false';
 else
    l_us_yn := 'true';
 end if;

l_truncate_string := 'TRUNCATE TABLE ' ;
l_truncate_string := l_truncate_string || 'OKS';
l_truncate_string := l_truncate_string || '.OKS_RULE_ERROR';


IF P_LEVEL = 'HDR'  THEN
   -------------------------------------------------------------------------------------------
   --                  Code to validate the Header rule.                                    --
   -------------------------------------------------------------------------------------------
      IF (FND_CONC_GLOBAL.request_data is null)  THEN

         trunc_curs := DBMS_SQL.OPEN_CURSOR;
         DBMS_SQL.PARSE(trunc_curs,l_truncate_string,dbms_sql.native);
	    rc := dbms_sql.execute(trunc_curs);
         DBMS_SQL.CLOSE_CURSOR(trunc_curs);


         If (p_status is null and p_org_id is null ) then
            -- The following csr is on OKC_RULE_GROUPS_B
            open  l_hdr_agg_csr1;
            fetch l_hdr_agg_csr1 into l_hdr_agg_rec;
            close l_hdr_agg_csr1;

            FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor opened is l_hdr_agg_csr1' );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.minid = '|| l_hdr_agg_rec.minid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.maxid = '|| l_hdr_agg_rec.maxid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.avgid = '|| l_hdr_agg_rec.avgid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.stdid = '|| l_hdr_agg_rec.stdid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.total = '|| l_hdr_agg_rec.total );

            l_sub_requests := generate_ranges(l_hdr_agg_rec.minid,
                                              l_hdr_agg_rec.maxid,
                                              l_hdr_agg_rec.avgid,
                                              l_hdr_agg_rec.stdid,
                                              l_hdr_agg_rec.total,
                                              nvl(ip_sub_requests,30));

            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_sub_requests = '|| l_sub_requests );

         Else
            -- The following csr is on OKC_K_HEADERS_B
            open  l_hdr_agg_csr2;
            fetch l_hdr_agg_csr2 into l_hdr_agg_rec;
            close l_hdr_agg_csr2;

            FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor opened is l_hdr_agg_csr2' );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.minid = '|| l_hdr_agg_rec.minid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.maxid = '|| l_hdr_agg_rec.maxid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.avgid = '|| l_hdr_agg_rec.avgid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.stdid = '|| l_hdr_agg_rec.stdid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.total = '|| l_hdr_agg_rec.total );

            l_sub_requests := generate_ranges(l_hdr_agg_rec.minid,
                                              l_hdr_agg_rec.maxid,
                                              l_hdr_agg_rec.avgid,
                                              l_hdr_agg_rec.stdid,
                                              l_hdr_agg_rec.total,
                                              nvl(ip_sub_requests,30));
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_sub_requests = '|| l_sub_requests );

         End If;

         FOR idx in reverse 1..l_sub_requests
         LOOP
            l_ret := FND_REQUEST.submit_request('OKS',
                                             'OKS_VALIDATE_HDR_RULE_DATA1',
                                              to_char(idx), -- UI job display
                                              null,
                                              TRUE, -- TRUE means isSubRequest
                                              p_status,
                                              p_org_id,
                                              nvl(l_batch_size,10000),
					      l_us_yn,
                                              range_arr(idx).lo,
                                              range_arr(idx).hi);

           IF (l_ret = 0) then
               errbuf := fnd_message.get;
               retcode := 2;
               FND_FILE.PUT_LINE (FND_FILE.LOG, 'Sub-request failed to submit: ' || errbuf);
               return;
           ELSE
               FND_FILE.PUT_LINE (FND_FILE.LOG, 'Sub-request '||to_char(l_ret)||' submitted');
               FND_FILE.PUT_LINE (FND_FILE.LOG, 'Sub-request '||to_char(l_ret)||' p_low_id ==> '|| range_arr(idx).lo || ' l_hig_id ==> '||range_arr(idx).hi );
           END IF;
         END LOOP;
         FND_CONC_GLOBAL.set_req_globals(conc_status => 'PAUSED',
                                         request_data => to_char(l_sub_requests));
             errbuf := to_char(l_sub_requests) || ' sub-requests submitted';
             retcode := 0;
             return;
     End If;
   -------------------------------------------------------------------------------------------
   --                  Code to validate the Header rule ends here .                         --
   -------------------------------------------------------------------------------------------
ELSIF P_LEVEL = 'HDRH' THEN
   -------------------------------------------------------------------------------------------
   --                  Code to validate the Header History rule.                             --
   -------------------------------------------------------------------------------------------
     IF (FND_CONC_GLOBAL.request_data is null) THEN

         trunc_curs := DBMS_SQL.OPEN_CURSOR;
         DBMS_SQL.PARSE(trunc_curs,l_truncate_string,dbms_sql.native);
	    rc := dbms_sql.execute(trunc_curs);
         DBMS_SQL.CLOSE_CURSOR(trunc_curs);

         If (p_status is null and p_org_id is null ) then
            -- The following csr is on OKC_RULE_GROUPS_BH
            open  l_hdr_agg_csr3;
            fetch l_hdr_agg_csr3 into l_hdr_agg_rec;
            close l_hdr_agg_csr3;

            FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor opened is l_hdr_agg_csr3' );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.minid = '|| l_hdr_agg_rec.minid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.maxid = '|| l_hdr_agg_rec.maxid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.avgid = '|| l_hdr_agg_rec.avgid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.stdid = '|| l_hdr_agg_rec.stdid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.total = '|| l_hdr_agg_rec.total );

            l_sub_requests := generate_ranges(l_hdr_agg_rec.minid,
                                              l_hdr_agg_rec.maxid,
                                              l_hdr_agg_rec.avgid,
                                              l_hdr_agg_rec.stdid,
                                              l_hdr_agg_rec.total,
                                              nvl(ip_sub_requests,30));
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_sub_requests = '|| l_sub_requests );
         Else
            -- The following csr is on OKC_K_HEADERS_BH
            open  l_hdr_agg_csr4;
            fetch l_hdr_agg_csr4 into l_hdr_agg_rec;
            close l_hdr_agg_csr4;

            FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor opened is l_hdr_agg_csr4' );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.minid = '|| l_hdr_agg_rec.minid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.maxid = '|| l_hdr_agg_rec.maxid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.avgid = '|| l_hdr_agg_rec.avgid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.stdid = '|| l_hdr_agg_rec.stdid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.total = '|| l_hdr_agg_rec.total );

            l_sub_requests := generate_ranges(l_hdr_agg_rec.minid,
                                              l_hdr_agg_rec.maxid,
                                              l_hdr_agg_rec.avgid,
                                              l_hdr_agg_rec.stdid,
                                              l_hdr_agg_rec.total,
                                              nvl(ip_sub_requests,30));
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_sub_requests = '|| l_sub_requests );
         End If;
         FOR idx in reverse 1..l_sub_requests
         LOOP
            l_ret := FND_REQUEST.submit_request('OKS',
                                             'OKS_VALIDATE_HDRH_RULE_DATA1',
                                              to_char(idx), -- UI job display
                                              null,
                                              TRUE, -- TRUE means isSubRequest
                                              p_status,
                                              p_org_id,
                                              nvl(l_batch_size,10000),
					      l_us_yn,
                                              range_arr(idx).lo,
                                              range_arr(idx).hi);

           IF (l_ret = 0) then
               errbuf := fnd_message.get;
               retcode := 2;
               FND_FILE.PUT_LINE (FND_FILE.LOG, 'Sub-request failed to submit: ' || errbuf);
               return;
           ELSE
               FND_FILE.PUT_LINE (FND_FILE.LOG, 'Sub-request '||to_char(l_ret)||' submitted');
               FND_FILE.PUT_LINE (FND_FILE.LOG, 'Sub-request '||to_char(l_ret)||' p_low_id ==> '|| range_arr(idx).lo || ' l_hig_id ==> '||range_arr(idx).hi );
           END IF;
         END LOOP;
         FND_CONC_GLOBAL.set_req_globals(conc_status => 'PAUSED',
                                         request_data => to_char(l_sub_requests));
             errbuf := to_char(l_sub_requests) || ' sub-requests submitted';
             retcode := 0;
             return;
     End If;



   -------------------------------------------------------------------------------------------
   --                  Code to validate the Header History rule ends here .                 --
   -------------------------------------------------------------------------------------------

ELSIF P_LEVEL = 'LINE' THEN
   -------------------------------------------------------------------------------------------
   --                  Code to validate the Line rule.                                      --
   -------------------------------------------------------------------------------------------
      IF (FND_CONC_GLOBAL.request_data is null)  THEN

         trunc_curs := DBMS_SQL.OPEN_CURSOR;
         DBMS_SQL.PARSE(trunc_curs,l_truncate_string,dbms_sql.native);
	    rc := dbms_sql.execute(trunc_curs);
         DBMS_SQL.CLOSE_CURSOR(trunc_curs);

         If (p_status is null and p_org_id is null ) then
            -- The following csr is on OKC_RULE_GROUPS_B
            open  l_hdr_agg_csr1;
            fetch l_hdr_agg_csr1 into l_hdr_agg_rec;
            close l_hdr_agg_csr1;

            FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor opened is l_hdr_agg_csr1' );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.minid = '|| l_hdr_agg_rec.minid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.maxid = '|| l_hdr_agg_rec.maxid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.avgid = '|| l_hdr_agg_rec.avgid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.stdid = '|| l_hdr_agg_rec.stdid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.total = '|| l_hdr_agg_rec.total );

            l_sub_requests := generate_ranges(l_hdr_agg_rec.minid,
                                              l_hdr_agg_rec.maxid,
                                              l_hdr_agg_rec.avgid,
                                              l_hdr_agg_rec.stdid,
                                              l_hdr_agg_rec.total,
                                              nvl(ip_sub_requests,30));
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_sub_requests = '|| l_sub_requests );
         Else
            -- The following csr is on OKC_K_HEADERS_B
            open  l_hdr_agg_csr2;
            fetch l_hdr_agg_csr2 into l_hdr_agg_rec;
            close l_hdr_agg_csr2;

            FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor opened is l_hdr_agg_csr2' );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.minid = '|| l_hdr_agg_rec.minid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.maxid = '|| l_hdr_agg_rec.maxid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.avgid = '|| l_hdr_agg_rec.avgid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.stdid = '|| l_hdr_agg_rec.stdid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.total = '|| l_hdr_agg_rec.total );

            l_sub_requests := generate_ranges(l_hdr_agg_rec.minid,
                                              l_hdr_agg_rec.maxid,
                                              l_hdr_agg_rec.avgid,
                                              l_hdr_agg_rec.stdid,
                                              l_hdr_agg_rec.total,
                                              nvl(ip_sub_requests,30));
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_sub_requests = '|| l_sub_requests );
         End If;
	 FOR idx in reverse 1..l_sub_requests
         LOOP
            l_ret := FND_REQUEST.submit_request('OKS',
                                             'OKS_VALIDATE_LINE_RULE_DATA1',
                                              to_char(idx), -- UI job display
                                              null,
                                              TRUE, -- TRUE means isSubRequest
                                              p_status,
                                              p_org_id,
                                              nvl(l_batch_size,10000),
					      l_us_yn,
                                              range_arr(idx).lo,
                                              range_arr(idx).hi);

           IF (l_ret = 0) then
               errbuf := fnd_message.get;
               retcode := 2;
               FND_FILE.PUT_LINE (FND_FILE.LOG, 'Sub-request failed to submit: ' || errbuf);
               return;
           ELSE
               FND_FILE.PUT_LINE (FND_FILE.LOG, 'Sub-request '||to_char(l_ret)||' submitted');
               FND_FILE.PUT_LINE (FND_FILE.LOG, 'Sub-request '||to_char(l_ret)||' p_low_id ==> '|| range_arr(idx).lo || ' l_hig_id ==> '||range_arr(idx).hi );
           END IF;
         END LOOP;
         FND_CONC_GLOBAL.set_req_globals(conc_status => 'PAUSED',
                                         request_data => to_char(l_sub_requests));
             errbuf := to_char(l_sub_requests) || ' sub-requests submitted';
             retcode := 0;
             return;
      End If;
   -------------------------------------------------------------------------------------------
   --                  Code to validate the Line rule ends here .                         --
   -------------------------------------------------------------------------------------------
ELSIF P_LEVEL = 'LINEH' THEN
   -------------------------------------------------------------------------------------------
   --                  Code to validate the Line History rule.                              --
   -------------------------------------------------------------------------------------------
      IF (FND_CONC_GLOBAL.request_data is null) THEN

         trunc_curs := DBMS_SQL.OPEN_CURSOR;
         DBMS_SQL.PARSE(trunc_curs,l_truncate_string,dbms_sql.native);
	    rc := dbms_sql.execute(trunc_curs);
         DBMS_SQL.CLOSE_CURSOR(trunc_curs);

         If (p_status is null and p_org_id is null ) then
            -- The following csr is on OKC_RULE_GROUPS_B
            open  l_hdr_agg_csr3;
            fetch l_hdr_agg_csr3 into l_hdr_agg_rec;
            close l_hdr_agg_csr3;

            FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor opened is l_hdr_agg_csr3' );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.minid = '|| l_hdr_agg_rec.minid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.maxid = '|| l_hdr_agg_rec.maxid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.avgid = '|| l_hdr_agg_rec.avgid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.stdid = '|| l_hdr_agg_rec.stdid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.total = '|| l_hdr_agg_rec.total );

            l_sub_requests := generate_ranges(l_hdr_agg_rec.minid,
                                              l_hdr_agg_rec.maxid,
                                              l_hdr_agg_rec.avgid,
                                              l_hdr_agg_rec.stdid,
                                              l_hdr_agg_rec.total,
                                              nvl(ip_sub_requests,30));
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_sub_requests = '|| l_sub_requests );
         Else
            -- The following csr is on OKC_K_HEADERS_B
            open  l_hdr_agg_csr4;
            fetch l_hdr_agg_csr4 into l_hdr_agg_rec;
            close l_hdr_agg_csr4;

            FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor opened is l_hdr_agg_csr4' );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.minid = '|| l_hdr_agg_rec.minid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.maxid = '|| l_hdr_agg_rec.maxid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.avgid = '|| l_hdr_agg_rec.avgid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.stdid = '|| l_hdr_agg_rec.stdid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.total = '|| l_hdr_agg_rec.total );

            l_sub_requests := generate_ranges(l_hdr_agg_rec.minid,
                                              l_hdr_agg_rec.maxid,
                                              l_hdr_agg_rec.avgid,
                                              l_hdr_agg_rec.stdid,
                                              l_hdr_agg_rec.total,
                                              nvl(ip_sub_requests,30));
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_sub_requests = '|| l_sub_requests );
         End If;

         FOR idx in reverse 1..l_sub_requests
         LOOP
            l_ret := FND_REQUEST.submit_request('OKS',
                                             'OKS_VALIDATE_LINEH_RULE_DATA1',
                                              to_char(idx), -- UI job display
                                              null,
                                              TRUE, -- TRUE means isSubRequest
                                              p_status,
                                              p_org_id,
                                              nvl(l_batch_size,10000),
					      l_us_yn,
                                              range_arr(idx).lo,
                                              range_arr(idx).hi);

           IF (l_ret = 0) then
               errbuf := fnd_message.get;
               retcode := 2;
               FND_FILE.PUT_LINE (FND_FILE.LOG, 'Sub-request failed to submit: ' || errbuf);
               return;
           ELSE
               FND_FILE.PUT_LINE (FND_FILE.LOG, 'Sub-request '||to_char(l_ret)||' submitted');
               FND_FILE.PUT_LINE (FND_FILE.LOG, 'Sub-request '||to_char(l_ret)||' p_low_id ==> '|| range_arr(idx).lo || ' l_hig_id ==> '||range_arr(idx).hi );
           END IF;
         END LOOP;
         FND_CONC_GLOBAL.set_req_globals(conc_status => 'PAUSED',
                                         request_data => to_char(l_sub_requests));
             errbuf := to_char(l_sub_requests) || ' sub-requests submitted';
             retcode := 0;
             return;
      End If;
   -------------------------------------------------------------------------------------------
   --                  Code to validate the ALL rules ends here .                   --
   -------------------------------------------------------------------------------------------

ELSIF P_LEVEL = 'ALL' THEN
   -------------------------------------------------------------------------------------------
   --                  Code to validate the ALL rules.                              --
   -------------------------------------------------------------------------------------------
      IF (FND_CONC_GLOBAL.request_data is null) THEN

         trunc_curs := DBMS_SQL.OPEN_CURSOR;
         DBMS_SQL.PARSE(trunc_curs,l_truncate_string,dbms_sql.native);
	    rc := dbms_sql.execute(trunc_curs);
         DBMS_SQL.CLOSE_CURSOR(trunc_curs);


         If (p_status is null and p_org_id is null ) then
            -- The following csr is on OKC_RULE_GROUPS_BH
            open  l_hdr_agg_csr3;
            fetch l_hdr_agg_csr3 into l_hdr_agg_rec;
            close l_hdr_agg_csr3;

            FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor opened is l_hdr_agg_csr3' );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.minid = '|| l_hdr_agg_rec.minid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.maxid = '|| l_hdr_agg_rec.maxid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.total = '|| l_hdr_agg_rec.total );

         Else
            -- The following csr is on OKC_K_HEADERS_BH
            open  l_hdr_agg_csr4;
            fetch l_hdr_agg_csr4 into l_hdr_agg_rec;
            close l_hdr_agg_csr4;

            FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor opened is l_hdr_agg_csr4' );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.minid = '|| l_hdr_agg_rec.minid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.maxid = '|| l_hdr_agg_rec.maxid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.total = '|| l_hdr_agg_rec.total );
         End If;


         l_ret := FND_REQUEST.submit_request('OKS',
                                             'OKS_VALIDATE_ALL_HISTORY',
                                              to_char(ip_sub_requests), -- UI job display
                                              null,
                                              TRUE, -- TRUE means isSubRequest
                                              p_status,
                                              p_org_id,
                                              nvl(l_batch_size,10000),
					      l_us_yn,
                                              l_hdr_agg_rec.minid,
                                              l_hdr_agg_rec.maxid);

         IF (l_ret = 0) then
             errbuf := fnd_message.get;
             retcode := 2;
             FND_FILE.PUT_LINE (FND_FILE.LOG, 'Sub-request failed to submit: ' || errbuf);
             return;
         ELSE
             FND_FILE.PUT_LINE (FND_FILE.LOG, 'Sub-request '||to_char(l_ret)||' submitted');
             FND_FILE.PUT_LINE (FND_FILE.LOG, 'Sub-request '||to_char(l_ret)||' p_low_id ==> '|| l_hdr_agg_rec.minid || ' l_hig_id ==> '||l_hdr_agg_rec.maxid );
         END IF;



         If (p_status is null and p_org_id is null ) then
            -- The following csr is on OKC_RULE_GROUPS_B
            open  l_hdr_agg_csr1;
            fetch l_hdr_agg_csr1 into l_hdr_agg_rec;
            close l_hdr_agg_csr1;

            FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor opened is l_hdr_agg_csr1' );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.minid = '|| l_hdr_agg_rec.minid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.maxid = '|| l_hdr_agg_rec.maxid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.avgid = '|| l_hdr_agg_rec.avgid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.stdid = '|| l_hdr_agg_rec.stdid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.total = '|| l_hdr_agg_rec.total );

            l_sub_requests := generate_ranges(l_hdr_agg_rec.minid,
                                              l_hdr_agg_rec.maxid,
                                              l_hdr_agg_rec.avgid,
                                              l_hdr_agg_rec.stdid,
                                              l_hdr_agg_rec.total,
                                              nvl(ip_sub_requests-1,30));
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_sub_requests = '|| l_sub_requests );
         Else
            -- The following csr is on OKC_K_HEADERS_B
            open  l_hdr_agg_csr2;
            fetch l_hdr_agg_csr2 into l_hdr_agg_rec;
            close l_hdr_agg_csr2;

            FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor opened is l_hdr_agg_csr2' );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.minid = '|| l_hdr_agg_rec.minid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.maxid = '|| l_hdr_agg_rec.maxid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.avgid = '|| l_hdr_agg_rec.avgid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.stdid = '|| l_hdr_agg_rec.stdid );
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_hdr_agg_re.total = '|| l_hdr_agg_rec.total );

            l_sub_requests := generate_ranges(l_hdr_agg_rec.minid,
                                              l_hdr_agg_rec.maxid,
                                              l_hdr_agg_rec.avgid,
                                              l_hdr_agg_rec.stdid,
                                              l_hdr_agg_rec.total,
                                              nvl(ip_sub_requests-1,30));
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'l_sub_requests = '|| l_sub_requests );
         End If;

         FOR idx in reverse 1..l_sub_requests
         LOOP
            l_ret := FND_REQUEST.submit_request('OKS',
                                             'OKS_VALIDATE_ALL',
                                              to_char(idx), -- UI job display
                                              null,
                                              TRUE, -- TRUE means isSubRequest
                                              p_status,
                                              p_org_id,
                                              nvl(l_batch_size,10000),
					      l_us_yn,
                                              range_arr(idx).lo,
                                              range_arr(idx).hi);

           IF (l_ret = 0) then
               errbuf := fnd_message.get;
               retcode := 2;
               FND_FILE.PUT_LINE (FND_FILE.LOG, 'Sub-request failed to submit: ' || errbuf);
               return;
           ELSE
               FND_FILE.PUT_LINE (FND_FILE.LOG, 'Sub-request '||to_char(l_ret)||' submitted');
               FND_FILE.PUT_LINE (FND_FILE.LOG, 'Sub-request '||to_char(l_ret)||' p_low_id ==> '|| range_arr(idx).lo || ' l_hig_id ==> '||range_arr(idx).hi );
           END IF;
         END LOOP;


         FND_CONC_GLOBAL.set_req_globals(conc_status => 'PAUSED',
                                         request_data => to_char(l_sub_requests));
             errbuf := to_char(l_sub_requests) || ' sub-requests submitted';
             retcode := 0;
             return;
      End If;
   -------------------------------------------------------------------------------------------
   --                  Code to validate ALL rules ends here .                   --
   -------------------------------------------------------------------------------------------

END IF;
   -------------------------------------------------------------------------------------------
   --                      Code to generate the output report                               --
   -------------------------------------------------------------------------------------------
   OPEN L_REPORT_CSR ;
   FND_FILE.PUT_LINE(FND_FILE.OUTPUT ,rpad('-',289,'-'));
   FND_FILE.PUT_LINE(FND_FILE.OUTPUT ,rpad(' ',119,' ')|| plevel_msg ||' '||Validation_Report_msg||rpad(' ',119,' '));
   FND_FILE.PUT_LINE(FND_FILE.OUTPUT ,rpad('-',289,'-'));
   FND_FILE.PUT_LINE(FND_FILE.OUTPUT ,Contract_Number_msg||rpad(' ',35,' ')||Modifier_msg||rpad(' ',42,' ')||Major_Version_msg||rpad(' ',7,' ')||Line_Number_msg||rpad(' ',9,' ')||Attribute_Name_msg||rpad(' ',36,' ')||Current_Value_msg);

   LOOP

     FETCH L_REPORT_CSR BULK COLLECT INTO L_CONTRACT_NUMBER
                                        , L_MODIFIER
                                        , L_LINE_NUMBER
                                        , L_MAJOR_VERSION
                                        , L_ATTRIBUTE_NAME
                                        , L_ATTRIBUTE_VALUE LIMIT 7000;
     EXIT WHEN L_CONTRACT_NUMBER.COUNT = 0;

     FOR I IN L_CONTRACT_NUMBER.FIRST..L_CONTRACT_NUMBER.LAST
     LOOP
          FND_FILE.PUT_LINE(FND_FILE.OUTPUT ,L_CONTRACT_NUMBER(I)||rpad(nvl(L_MODIFIER(I),'---------------'),50,' ')||
	 rpad(nvl(L_MAJOR_VERSION(I),'-----'),20,' ')||rpad(nvl(L_LINE_NUMBER(I),'-----'),20,' ')||L_ATTRIBUTE_NAME(I)||L_ATTRIBUTE_VALUE(I));

     END LOOP;
     L_CONTRACT_NUMBER.DELETE;

   END LOOP;

   If(L_REPORT_CSR%ISOPEN) THEN
	Close  L_REPORT_CSR;
   END IF;

  ----------------------------------------------------------------------------------------------------
  ---                  Added the following code to analyze the OKS_RULE_ERROR table                ---
  ----------------------------------------------------------------------------------------------------
  FND_STATS.Gather_Table_Stats(OWNNAME =>'OKS',
                               TABNAME =>'OKS_RULE_ERROR',
                               PERCENT => 20,
                               RETCODE => l_return_code,
                               ERRBUF  => l_error_buffer);

  ----------------------------------------------------------------------------------------------------

EXCEPTION

     WHEN UTL_FILE.INVALID_PATH THEN
          FND_FILE.PUT_LINE (FND_FILE.LOG, 'FILE LOCATION OR NAME WAS INVALID');
          NULL;
     WHEN UTL_FILE.INVALID_MODE THEN
          FND_FILE.PUT_LINE (FND_FILE.LOG, 'FILE OPEN MODE STRING WAS INVALID');
          NULL;
     WHEN UTL_FILE.INVALID_FILEHANDLE THEN
          FND_FILE.PUT_LINE (FND_FILE.LOG, 'FILE HANDLE WAS INVALID');
          NULL;
     WHEN UTL_FILE.INVALID_OPERATION THEN
          FND_FILE.PUT_LINE (FND_FILE.LOG, 'FILE IS NOT OPEN FOR WRITTING');
          NULL;
     WHEN UTL_FILE.WRITE_ERROR THEN
          FND_FILE.PUT_LINE (FND_FILE.LOG, 'OS ERROR OCCURRED DURING WRITE OPERATION');
          NULL;

End Validate_data1;

--------------------------------------------------------------------------------------------
--    This is the procedure called from VALIDATE_DATA1 to validate HDR rule data           --
--------------------------------------------------------------------------------------------
Procedure VALIDATE_HDR_RULE(
                            ERRBUF            OUT NOCOPY VARCHAR2 ,
                            RETCODE           OUT NOCOPY NUMBER ,
                            p_status          in VARCHAR2,
                            p_org_id          in NUMBER ,
                            p_batch_size      in NUMBER,
			    p_us_yn           in VARCHAR2,
                            p_id_low          in NUMBER,
                            p_id_hig          in NUMBER)
IS

Type l_num_tbl is table of  NUMBER         index  by BINARY_INTEGER ;
Type l_date_tbl is table of DATE           index  by BINARY_INTEGER ;
Type l_chr_tbl is table of  VARCHAR2(2000) index  by BINARY_INTEGER ;


ID                        l_num_tbl ;
CHR_ID                    l_num_tbl ;
DNZ_CHR_ID                l_num_tbl ;
ACCT_RULE_ID              l_num_tbl ;
PAYMENT_TYPE              L_CHR_TBL ;
CC_NO                     l_chr_tbl ;
CC_EXPIRY_DATE            l_date_tbl;
CC_BANK_ACCT_ID           l_num_tbl ;
CC_AUTH_CODE              l_chr_tbl ;
GRACE_DURATION            l_num_tbl ;
GRACE_PERIOD              l_chr_tbl ;
EST_REV_PERCENT           l_num_tbl ;
EST_REV_DATE              l_date_tbl;
INVOICE_TEXT              l_chr_tbl ;
INV_PRINT_FLAG            l_chr_tbl ;
PRICE_UOM                 l_chr_tbl ;
TAX_AMOUNT                l_num_tbl ;
TAX_INCLUSIVE_YN          l_chr_tbl ;
TAX_STATUS                l_chr_tbl ;
TAX_CODE                  l_num_tbl ;
TAX_EXEMPTION_ID          l_num_tbl ;
BILLING_SCHEDULE_TYPE     l_chr_tbl ;
CUST_ACCT_ID              l_num_tbl ;
BILL_TO_SITE_USE_ID       l_num_tbl ;
INV_RULE_ID               l_num_tbl ;
RENEWAL_TYPE_CODE         l_chr_tbl ;
RENEWAL_NOTIFY_TO         l_num_tbl ;
RENEWAL_END_DATE          l_date_tbl;
SHIP_TO_SITE_USE_ID       l_num_tbl ;
PAYMENT_TERM_ID           l_num_tbl ;
BILLING_PROFILE_ID        l_num_tbl ;
RENEWAL_STATUS            l_chr_tbl ;
ELECTRONIC_RENEWAL_FLAG   l_chr_tbl ;
QUOTE_TO_CONTACT_ID       l_num_tbl ;
QUOTE_TO_SITE_ID          l_num_tbl ;
QUOTE_TO_EMAIL_ID         l_num_tbl ;
QUOTE_TO_PHONE_ID         l_num_tbl ;
QUOTE_TO_FAX_ID           l_num_tbl ;
RENEWAL_PO_REQUIRED       l_chr_tbl ;
RENEWAL_PRICE_LIST        l_num_tbl ;
RENEWAL_PRICING_TYPE      l_chr_tbl ;
RENEWAL_MARKUP_PERCENT    l_num_tbl ;
RENEWAL_GRACE_DURATION    l_num_tbl ;
RENEWAL_GRACE_PERIOD      l_chr_tbl ;
RENEWAL_EST_REV_PERCENT   l_num_tbl ;
RENEWAL_EST_REV_DURATION  l_num_tbl ;
RENEWAL_EST_REV_PERIOD    l_chr_tbl ;
RENEWAL_PRICE_LIST_USED   l_num_tbl ;
RENEWAL_TYPE_USED         l_chr_tbl ;
RENEWAL_NOTIFICATION_TO   l_num_tbl ;
RENEWAL_PO_USED           l_chr_tbl ;
RENEWAL_PRICING_TYPE_USED l_chr_tbl ;
RENEWAL_MARKUP_PERCENT_USED   l_num_tbl ;
REV_EST_PERCENT_USED      l_num_tbl ;
REV_EST_DURATION_USED     l_num_tbl ;
BILLING_PROFILE_USED      l_num_tbl ;
REV_EST_PERIOD_USED       l_chr_tbl ;
ERN_FLAG_USED_YN          l_chr_tbl ;
EVN_THRESHOLD_AMT         l_num_tbl ;
EVN_THRESHOLD_CUR         l_chr_tbl ;
ERN_THRESHOLD_AMT         l_num_tbl ;
ERN_THRESHOLD_CUR         l_chr_tbl ;
RENEWAL_GRACE_DURATION_USED   l_num_tbl ;
RENEWAL_GRACE_PERIOD_USED l_chr_tbl ;
INV_TRX_TYPE              l_chr_tbl ;
INV_PRINT_PROFILE         l_chr_tbl ;
RENEWAL_PO_NUMBER         l_chr_tbl ;
AR_INTERFACE_YN           l_chr_tbl ;
HOLD_BILLING              l_chr_tbl ;
SUMMARY_TRX_YN            l_chr_tbl ;
SERVICE_PO_NUMBER         l_chr_tbl ;
SERVICE_PO_REQUIRED       l_chr_tbl ;
PRICE_LIST_ID             l_num_tbl ;
CONVERSION_TYPE           l_chr_tbl ;
CONVERSION_RATE           l_num_tbl ;
CONVERSION_RATE_DATE      l_date_tbl;
CONVERSION_EURO_RATE      l_num_tbl ;



-- FOLLOWING ARE NUMBER FIELDS --
ACCT_RULE_ID_CHR              l_chr_tbl ;
CC_BANK_ACCT_ID_CHR           l_chr_tbl ;
GRACE_DURATION_CHR            l_chr_tbl ;
EST_REV_PERCENT_CHR           l_chr_tbl ;
TAX_AMOUNT_CHR                l_chr_tbl ;
TAX_CODE_CHR                  l_chr_tbl ;
TAX_EXEMPTION_ID_CHR          l_chr_tbl ;
CUST_ACCT_ID_CHR              l_chr_tbl ;
BILL_TO_SITE_USE_ID_CHR       l_chr_tbl ;
INV_RULE_ID_CHR               l_chr_tbl ;
RENEWAL_NOTIFY_TO_CHR         l_chr_tbl ;
SHIP_TO_SITE_USE_ID_CHR       l_chr_tbl ;
PAYMENT_TERM_ID_CHR           l_chr_tbl ;
BILLING_PROFILE_ID_CHR        l_chr_tbl ;
QUOTE_TO_CONTACT_ID_CHR       l_chr_tbl ;
QUOTE_TO_SITE_ID_CHR          l_chr_tbl ;
QUOTE_TO_EMAIL_ID_CHR         l_chr_tbl ;
QUOTE_TO_PHONE_ID_CHR         l_chr_tbl ;
QUOTE_TO_FAX_ID_CHR           l_chr_tbl ;
RENEWAL_PRICE_LIST_CHR        l_chr_tbl ;
RENEWAL_MARKUP_PERCENT_CHR    l_chr_tbl ;
RENEWAL_GRACE_DURATION_CHR    l_chr_tbl ;
RENEWAL_EST_REV_PERCENT_CHR   l_chr_tbl ;
RENEWAL_EST_REV_DURATION_CHR  l_chr_tbl ;
RENEWAL_PRICE_LIST_USED_CHR   l_chr_tbl ;
RENEWAL_NOTIFICATION_TO_CHR   l_chr_tbl ;
RENEWAL_MARKUP_PERCENT_USED_CH l_chr_tbl ;
REV_EST_PERCENT_USED_CHR      l_chr_tbl ;
REV_EST_DURATION_USED_CHR     l_chr_tbl ;
BILLING_PROFILE_USED_CHR      l_chr_tbl ;
EVN_THRESHOLD_AMT_CHR         l_chr_tbl ;
ERN_THRESHOLD_AMT_CHR         l_chr_tbl ;
RENEWAL_GRACE_DURATION_USED_CH l_chr_tbl ;
PRICE_LIST_ID_CHR             l_chr_tbl ;
CONVERSION_RATE_CHR           l_chr_tbl ;
CONVERSION_EURO_RATE_CHR      l_chr_tbl ;

-- FOLLOWING ARE DATE FIELDS --
CC_EXPIRY_DATE_CHR            l_chr_tbl ;
EST_REV_DATE_CHR              l_chr_tbl ;
RENEWAL_END_DATE_CHR          l_chr_tbl ;
CONVERSION_RATE_DATE_CHR      l_chr_tbl ;

--Misc Variables --
L_ATTRIBUTE_NAME              VARCHAR2(2000);
L_ERROR_MSG                   VARCHAR2(2000);

l_us_yn                       BOOLEAN;

-------------------------------------------------------------------------------
-- The following is the cursor opened if all the parameters passed are null  --
-------------------------------------------------------------------------------
CURSOR l_hdr_rule_csr1 (p_id_low in NUMBER , p_id_hig in NUMBER )is
SELECT * FROM (
SELECT  RGP.CHR_ID CHR_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)))
            ACCT_RULE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' , '!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)))
            CC_BANK_ACCT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)))
            GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)), NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)))
            EST_REV_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!' ),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)))
            TAX_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' , '!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)))
            TAX_CODE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)))
            TAX_EXEMPTION_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)))
            BILLING_PROFILE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)))
            QUOTE_TO_CONTACT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT2_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4)))
            QUOTE_TO_SITE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)))
            QUOTE_TO_EMAIL_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)))
            QUOTE_TO_PHONE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)))
            QUOTE_TO_FAX_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)))
            RENEWAL_PRICE_LIST
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)))
            RENEWAL_MARKUP_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)))
            RENEWAL_GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)))
            RENEWAL_EST_REV_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)))
            RENEWAL_EST_REV_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)))
            RENEWAL_PRICE_LIST_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)))
            RENEWAL_NOTIFICATION_TO
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)))
            RENEWAL_MARKUP_PERCENT_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)))
            REV_EST_PERCENT_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)))
            REV_EST_DURATION_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)))
            BILLING_PROFILE_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)))
            EVN_THRESHOLD_AMT
        ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),
	    '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)))
            ERN_THRESHOLD_AMT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)))
            RENEWAL_GRACE_DURATION_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)))
            CONVERSION_RATE --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)))
            CONVERSION_EURO_RATE --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)))
            CUST_ACCT_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)))
            BILL_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)))
            INV_RULE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)))
            RENEWAL_NOTIFY_TO --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)))
            SHIP_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)))
            PAYMENT_TERM_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)))
            PRICE_LIST_ID --OKC
FROM OKC_RULE_GROUPS_B RGP
   , OKC_RULES_B RUL
WHERE rgp.id = rul.rgp_id
  AND rgp.cle_id is null
  AND rgp.chr_id is not null
  AND rgp.rgd_code = 'SVC_K'
  AND   RUL.RULE_INFORMATION_CATEGORY IN
       ('ARL','CCR','GPR','RVE','IRT','TAX','ERN','QTO', 'RPO', 'RPT','RER', 'RRU',
        'RRE', 'SBG', 'SPO','SLH','PRE', 'CVN','CAN', 'BTO', 'IRE', 'REN', 'STO', 'PTR')
  AND RGP.DNZ_CHR_ID = RUL.DNZ_CHR_ID
  AND RGP.ID BETWEEN P_ID_LOW  AND P_ID_HIG
  GROUP BY rgp.chr_id )
WHERE
  ACCT_RULE_ID    IS NOT NULL OR
  CC_BANK_ACCT_ID IS NOT NULL OR
  GRACE_DURATION  IS NOT NULL OR
  EST_REV_PERCENT IS NOT NULL OR
  TAX_AMOUNT      IS NOT NULL OR
  TAX_CODE        IS NOT NULL OR
  TAX_EXEMPTION_ID    IS NOT NULL OR
  BILLING_PROFILE_ID  IS NOT NULL OR
  QUOTE_TO_CONTACT_ID IS NOT NULL OR
  QUOTE_TO_SITE_ID    IS NOT NULL OR
  QUOTE_TO_EMAIL_ID   IS NOT NULL OR
  QUOTE_TO_PHONE_ID   IS NOT NULL OR
  QUOTE_TO_FAX_ID     IS NOT NULL OR
  RENEWAL_PRICE_LIST  IS NOT NULL OR
  RENEWAL_MARKUP_PERCENT   IS NOT NULL OR
  RENEWAL_GRACE_DURATION   IS NOT NULL OR
  RENEWAL_EST_REV_PERCENT  IS NOT NULL OR
  RENEWAL_EST_REV_DURATION IS NOT NULL OR
  RENEWAL_PRICE_LIST_USED  IS NOT NULL OR
  RENEWAL_NOTIFICATION_TO  IS NOT NULL OR
  RENEWAL_MARKUP_PERCENT_USED IS NOT NULL OR
  REV_EST_PERCENT_USED  IS NOT NULL OR
  REV_EST_DURATION_USED IS NOT NULL OR
  BILLING_PROFILE_USED  IS NOT NULL OR
  EVN_THRESHOLD_AMT  IS NOT NULL OR
  ERN_THRESHOLD_AMT  IS NOT NULL OR
  RENEWAL_GRACE_DURATION_USED IS NOT NULL OR
  CONVERSION_RATE     IS NOT NULL OR
  CONVERSION_EURO_RATE IS NOT NULL OR
  CUST_ACCT_ID        IS NOT NULL OR
  BILL_TO_SITE_USE_ID IS NOT NULL OR
  INV_RULE_ID         IS NOT NULL OR
  RENEWAL_NOTIFY_TO   IS NOT NULL OR
  SHIP_TO_SITE_USE_ID IS NOT NULL OR
  PAYMENT_TERM_ID     IS NOT NULL OR
  PRICE_LIST_ID       IS NOT NULL ;


-------------------------------------------------------------------------------
-- The following is the cursor opened if any of the following parameters are --
-- passed to the concurrent request                                          --
-- 1. p_status
-- 2. p_org_id
-------------------------------------------------------------------------------
CURSOR l_hdr_rule_csr2 (p_id_low in NUMBER , p_id_hig in NUMBER , p_status in VARCHAR2 , p_org_id in NUMBER )is
SELECT * FROM (
SELECT  RGP.CHR_ID CHR_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)))
            ACCT_RULE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' , '!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)))
            CC_BANK_ACCT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)))
            GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)), NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)))
            EST_REV_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!' ),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)))
            TAX_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' , '!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)))
            TAX_CODE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)))
            TAX_EXEMPTION_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)))
            BILLING_PROFILE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)))
            QUOTE_TO_CONTACT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT2_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4)))
            QUOTE_TO_SITE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)))
            QUOTE_TO_EMAIL_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)))
            QUOTE_TO_PHONE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)))
            QUOTE_TO_FAX_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)))
            RENEWAL_PRICE_LIST
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)))
            RENEWAL_MARKUP_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)))
            RENEWAL_GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)))
            RENEWAL_EST_REV_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)))
            RENEWAL_EST_REV_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)))
            RENEWAL_PRICE_LIST_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)))
            RENEWAL_NOTIFICATION_TO
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)))
            RENEWAL_MARKUP_PERCENT_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)))
            REV_EST_PERCENT_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)))
            REV_EST_DURATION_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)))
            BILLING_PROFILE_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)))
            EVN_THRESHOLD_AMT
        ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),
	    '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)))
            ERN_THRESHOLD_AMT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)))
            RENEWAL_GRACE_DURATION_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)))
            CONVERSION_RATE --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)))
            CONVERSION_EURO_RATE --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)))
            CUST_ACCT_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)))
            BILL_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)))
            INV_RULE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)))
            RENEWAL_NOTIFY_TO --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)))
            SHIP_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)))
            PAYMENT_TERM_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)))
            PRICE_LIST_ID --OKC
FROM OKC_RULE_GROUPS_B RGP
   , OKC_RULES_B RUL
   , OKC_K_HEADERS_B HDR
WHERE rgp.id = rul.rgp_id
  and rgp.cle_id is null
  and rgp.chr_id is not null
  and rgp.rgd_code = 'SVC_K'
  AND   RUL.RULE_INFORMATION_CATEGORY IN
       ('ARL','CCR','GPR','RVE','IRT','TAX','ERN','QTO', 'RPO', 'RPT','RER', 'RRU',
        'RRE', 'SBG', 'SPO','SLH','PRE', 'CVN','CAN', 'BTO', 'IRE', 'REN', 'STO', 'PTR')
  AND HDR.ID BETWEEN P_ID_LOW  AND P_ID_HIG
  AND HDR.ID = RGP.DNZ_CHR_ID
  AND RGP.DNZ_CHR_ID = RUL.DNZ_CHR_ID
  AND HDR.ID = RUL.DNZ_CHR_ID
  AND HDR.STS_CODE = nvl(p_status,HDR.STS_CODE)
  AND HDR.AUTHORING_ORG_ID = nvl(P_ORG_ID, HDR.AUTHORING_ORG_ID)
  GROUP BY rgp.chr_id )
WHERE
  ACCT_RULE_ID    IS NOT NULL OR
  CC_BANK_ACCT_ID IS NOT NULL OR
  GRACE_DURATION  IS NOT NULL OR
  EST_REV_PERCENT IS NOT NULL OR
  TAX_AMOUNT      IS NOT NULL OR
  TAX_CODE        IS NOT NULL OR
  TAX_EXEMPTION_ID    IS NOT NULL OR
  BILLING_PROFILE_ID  IS NOT NULL OR
  QUOTE_TO_CONTACT_ID IS NOT NULL OR
  QUOTE_TO_SITE_ID    IS NOT NULL OR
  QUOTE_TO_EMAIL_ID   IS NOT NULL OR
  QUOTE_TO_PHONE_ID   IS NOT NULL OR
  QUOTE_TO_FAX_ID     IS NOT NULL OR
  RENEWAL_PRICE_LIST  IS NOT NULL OR
  RENEWAL_MARKUP_PERCENT   IS NOT NULL OR
  RENEWAL_GRACE_DURATION   IS NOT NULL OR
  RENEWAL_EST_REV_PERCENT  IS NOT NULL OR
  RENEWAL_EST_REV_DURATION IS NOT NULL OR
  RENEWAL_PRICE_LIST_USED  IS NOT NULL OR
  RENEWAL_NOTIFICATION_TO  IS NOT NULL OR
  RENEWAL_MARKUP_PERCENT_USED IS NOT NULL OR
  REV_EST_PERCENT_USED  IS NOT NULL OR
  REV_EST_DURATION_USED IS NOT NULL OR
  BILLING_PROFILE_USED  IS NOT NULL OR
  EVN_THRESHOLD_AMT  IS NOT NULL OR
  ERN_THRESHOLD_AMT  IS NOT NULL OR
  RENEWAL_GRACE_DURATION_USED IS NOT NULL OR
  CONVERSION_RATE     IS NOT NULL OR
  CONVERSION_EURO_RATE IS NOT NULL OR
  CUST_ACCT_ID        IS NOT NULL OR
  BILL_TO_SITE_USE_ID IS NOT NULL OR
  INV_RULE_ID         IS NOT NULL OR
  RENEWAL_NOTIFY_TO   IS NOT NULL OR
  SHIP_TO_SITE_USE_ID IS NOT NULL OR
  PAYMENT_TERM_ID     IS NOT NULL OR
  PRICE_LIST_ID       IS NOT NULL ;

-------------------------------------------------------------------------
-------The following cursors will be opened if p_us_yn is false
----------------------------------------------------------------------------

-------------------------------------------------------------------------------
-- The following is the cursor opened if all the parameters passed are null  --
-------------------------------------------------------------------------------
CURSOR l_hdr_rule_csr1_nus (p_id_low in NUMBER , p_id_hig in NUMBER )is
SELECT * FROM (
SELECT  RGP.CHR_ID CHR_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)))
            ACCT_RULE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' , '!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)))
            CC_BANK_ACCT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)))
            GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)), NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)))
            EST_REV_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!' ),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)))
            TAX_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' , '!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)))
            TAX_CODE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)))
            TAX_EXEMPTION_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)))
            BILLING_PROFILE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)))
            QUOTE_TO_CONTACT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT2_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4)))
            QUOTE_TO_SITE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)))
            QUOTE_TO_EMAIL_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)))
            QUOTE_TO_PHONE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)))
            QUOTE_TO_FAX_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)))
            RENEWAL_PRICE_LIST
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)))
            RENEWAL_MARKUP_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)))
            RENEWAL_GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)))
            RENEWAL_EST_REV_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)))
            RENEWAL_EST_REV_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)))
            RENEWAL_PRICE_LIST_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)))
            RENEWAL_NOTIFICATION_TO
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)))
            RENEWAL_MARKUP_PERCENT_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)))
            REV_EST_PERCENT_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)))
            REV_EST_DURATION_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)))
            BILLING_PROFILE_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)))
            EVN_THRESHOLD_AMT
        ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),
	    '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)))
            ERN_THRESHOLD_AMT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)))
            RENEWAL_GRACE_DURATION_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)))
            CONVERSION_RATE --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)))
            CONVERSION_EURO_RATE --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)))
            CUST_ACCT_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)))
            BILL_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)))
            INV_RULE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)))
            RENEWAL_NOTIFY_TO --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)))
            SHIP_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)))
            PAYMENT_TERM_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)))
            PRICE_LIST_ID --OKC
FROM OKC_RULE_GROUPS_B RGP
   , OKC_RULES_B RUL
WHERE rgp.id = rul.rgp_id
  AND rgp.cle_id is null
  AND rgp.chr_id is not null
  AND rgp.rgd_code = 'SVC_K'
  AND   RUL.RULE_INFORMATION_CATEGORY IN
       ('ARL','CCR','GPR','RVE','IRT','TAX','ERN','QTO', 'RPO', 'RPT','RER', 'RRU',
        'RRE', 'SBG', 'SPO','SLH','PRE', 'CVN','CAN', 'BTO', 'IRE', 'REN', 'STO', 'PTR')
  AND RGP.DNZ_CHR_ID = RUL.DNZ_CHR_ID
  AND RGP.ID BETWEEN P_ID_LOW  AND P_ID_HIG
  GROUP BY rgp.chr_id )
WHERE
  ACCT_RULE_ID    IS NOT NULL OR
  CC_BANK_ACCT_ID IS NOT NULL OR
  GRACE_DURATION  IS NOT NULL OR
  EST_REV_PERCENT IS NOT NULL OR
  TAX_AMOUNT      IS NOT NULL OR
  TAX_CODE        IS NOT NULL OR
  TAX_EXEMPTION_ID    IS NOT NULL OR
  BILLING_PROFILE_ID  IS NOT NULL OR
  QUOTE_TO_CONTACT_ID IS NOT NULL OR
  QUOTE_TO_SITE_ID    IS NOT NULL OR
  QUOTE_TO_EMAIL_ID   IS NOT NULL OR
  QUOTE_TO_PHONE_ID   IS NOT NULL OR
  QUOTE_TO_FAX_ID     IS NOT NULL OR
  RENEWAL_PRICE_LIST  IS NOT NULL OR
  RENEWAL_MARKUP_PERCENT   IS NOT NULL OR
  RENEWAL_GRACE_DURATION   IS NOT NULL OR
  RENEWAL_EST_REV_PERCENT  IS NOT NULL OR
  RENEWAL_EST_REV_DURATION IS NOT NULL OR
  RENEWAL_PRICE_LIST_USED  IS NOT NULL OR
  RENEWAL_NOTIFICATION_TO  IS NOT NULL OR
  RENEWAL_MARKUP_PERCENT_USED IS NOT NULL OR
  REV_EST_PERCENT_USED  IS NOT NULL OR
  REV_EST_DURATION_USED IS NOT NULL OR
  BILLING_PROFILE_USED  IS NOT NULL OR
  EVN_THRESHOLD_AMT  IS NOT NULL OR
  ERN_THRESHOLD_AMT  IS NOT NULL OR
  RENEWAL_GRACE_DURATION_USED IS NOT NULL OR
  CONVERSION_RATE     IS NOT NULL OR
  CONVERSION_EURO_RATE IS NOT NULL OR
  CUST_ACCT_ID        IS NOT NULL OR
  BILL_TO_SITE_USE_ID IS NOT NULL OR
  INV_RULE_ID         IS NOT NULL OR
  RENEWAL_NOTIFY_TO   IS NOT NULL OR
  SHIP_TO_SITE_USE_ID IS NOT NULL OR
  PAYMENT_TERM_ID     IS NOT NULL OR
  PRICE_LIST_ID       IS NOT NULL ;


-------------------------------------------------------------------------------
-- The following is the cursor opened if any of the following parameters are --
-- passed to the concurrent request                                          --
-- 1. p_status
-- 2. p_org_id
-------------------------------------------------------------------------------
CURSOR l_hdr_rule_csr2_nus (p_id_low in NUMBER , p_id_hig in NUMBER , p_status in VARCHAR2 , p_org_id in NUMBER )is
SELECT * FROM (
SELECT  RGP.CHR_ID CHR_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)))
            ACCT_RULE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' , '!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)))
            CC_BANK_ACCT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)))
            GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)), NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)))
            EST_REV_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!' ),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)))
            TAX_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' , '!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)))
            TAX_CODE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)))
            TAX_EXEMPTION_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)))
            BILLING_PROFILE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)))
            QUOTE_TO_CONTACT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT2_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4)))
            QUOTE_TO_SITE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)))
            QUOTE_TO_EMAIL_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)))
            QUOTE_TO_PHONE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)))
            QUOTE_TO_FAX_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)))
            RENEWAL_PRICE_LIST
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)))
            RENEWAL_MARKUP_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)))
            RENEWAL_GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)))
            RENEWAL_EST_REV_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)))
            RENEWAL_EST_REV_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)))
            RENEWAL_PRICE_LIST_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)))
            RENEWAL_NOTIFICATION_TO
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)))
            RENEWAL_MARKUP_PERCENT_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)))
            REV_EST_PERCENT_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)))
            REV_EST_DURATION_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)))
            BILLING_PROFILE_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)))
            EVN_THRESHOLD_AMT
        ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),
	    '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)))
            ERN_THRESHOLD_AMT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)))
            RENEWAL_GRACE_DURATION_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)))
            CONVERSION_RATE --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)))
            CONVERSION_EURO_RATE --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)))
            CUST_ACCT_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)))
            BILL_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)))
            INV_RULE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)))
            RENEWAL_NOTIFY_TO --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)))
            SHIP_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)))
            PAYMENT_TERM_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)))
            PRICE_LIST_ID --OKC
FROM OKC_RULE_GROUPS_B RGP
   , OKC_RULES_B RUL
   , OKC_K_HEADERS_B HDR
WHERE rgp.id = rul.rgp_id
  and rgp.cle_id is null
  and rgp.chr_id is not null
  and rgp.rgd_code = 'SVC_K'
  AND   RUL.RULE_INFORMATION_CATEGORY IN
       ('ARL','CCR','GPR','RVE','IRT','TAX','ERN','QTO', 'RPO', 'RPT','RER', 'RRU',
        'RRE', 'SBG', 'SPO','SLH','PRE', 'CVN','CAN', 'BTO', 'IRE', 'REN', 'STO', 'PTR')
  AND HDR.ID BETWEEN P_ID_LOW  AND P_ID_HIG
  AND HDR.ID = RGP.DNZ_CHR_ID
  AND RGP.DNZ_CHR_ID = RUL.DNZ_CHR_ID
  AND HDR.ID = RUL.DNZ_CHR_ID
  AND HDR.STS_CODE = nvl(p_status,HDR.STS_CODE)
  AND HDR.AUTHORING_ORG_ID = nvl(P_ORG_ID, HDR.AUTHORING_ORG_ID)
  GROUP BY rgp.chr_id )
WHERE
  ACCT_RULE_ID    IS NOT NULL OR
  CC_BANK_ACCT_ID IS NOT NULL OR
  GRACE_DURATION  IS NOT NULL OR
  EST_REV_PERCENT IS NOT NULL OR
  TAX_AMOUNT      IS NOT NULL OR
  TAX_CODE        IS NOT NULL OR
  TAX_EXEMPTION_ID    IS NOT NULL OR
  BILLING_PROFILE_ID  IS NOT NULL OR
  QUOTE_TO_CONTACT_ID IS NOT NULL OR
  QUOTE_TO_SITE_ID    IS NOT NULL OR
  QUOTE_TO_EMAIL_ID   IS NOT NULL OR
  QUOTE_TO_PHONE_ID   IS NOT NULL OR
  QUOTE_TO_FAX_ID     IS NOT NULL OR
  RENEWAL_PRICE_LIST  IS NOT NULL OR
  RENEWAL_MARKUP_PERCENT   IS NOT NULL OR
  RENEWAL_GRACE_DURATION   IS NOT NULL OR
  RENEWAL_EST_REV_PERCENT  IS NOT NULL OR
  RENEWAL_EST_REV_DURATION IS NOT NULL OR
  RENEWAL_PRICE_LIST_USED  IS NOT NULL OR
  RENEWAL_NOTIFICATION_TO  IS NOT NULL OR
  RENEWAL_MARKUP_PERCENT_USED IS NOT NULL OR
  REV_EST_PERCENT_USED  IS NOT NULL OR
  REV_EST_DURATION_USED IS NOT NULL OR
  BILLING_PROFILE_USED  IS NOT NULL OR
  EVN_THRESHOLD_AMT  IS NOT NULL OR
  ERN_THRESHOLD_AMT  IS NOT NULL OR
  RENEWAL_GRACE_DURATION_USED IS NOT NULL OR
  CONVERSION_RATE     IS NOT NULL OR
  CONVERSION_EURO_RATE IS NOT NULL OR
  CUST_ACCT_ID        IS NOT NULL OR
  BILL_TO_SITE_USE_ID IS NOT NULL OR
  INV_RULE_ID         IS NOT NULL OR
  RENEWAL_NOTIFY_TO   IS NOT NULL OR
  SHIP_TO_SITE_USE_ID IS NOT NULL OR
  PAYMENT_TERM_ID     IS NOT NULL OR
  PRICE_LIST_ID       IS NOT NULL ;


----------------------------------------------------------------------------
-- Cursor to populate data in OKS_RULE_ERROR table .                      --
----------------------------------------------------------------------------
CURSOR L_HDR_DTLS_CSR ( P_HDR_ID  IN NUMBER , P_CATEGORY IN VARCHAR2 ) IS
SELECT HDR.CONTRACT_NUMBER
     , HDR.CONTRACT_NUMBER_MODIFIER
     , RUL.ID
     , RGP.ID RGP_ID
 FROM  OKC_K_HEADERS_B HDR
     , OKC_RULE_GROUPS_B RGP
     , OKC_RULES_B RUL
WHERE HDR.ID = P_HDR_ID
  AND RGP.DNZ_CHR_ID = P_HDR_ID
  AND RGP.CHR_ID = P_HDR_ID
  AND RGP.DNZ_CHR_ID = RUL.DNZ_CHR_ID
  AND RGP.ID = RUL.RGP_ID
  AND RUL.RULE_INFORMATION_CATEGORY = P_CATEGORY ;

L_HDR_DTLS_REC L_HDR_DTLS_CSR%ROWTYPE;
----------------------------------------------------------------------------


BEGIN
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'--------------Start of Sub request for Header Rule Data Validation----------------');
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');
 FND_FILE.PUT_LINE (FND_FILE.LOG, '----------Parameters passed to the Subrequest Request are as follows  -----------');
 FND_FILE.PUT_LINE (FND_FILE.LOG, 'P_STATUS ==============> '||P_STATUS);
 FND_FILE.PUT_LINE (FND_FILE.LOG, 'P_ORG_ID ==============> '||P_ORG_ID);
 FND_FILE.PUT_LINE (FND_FILE.LOG, 'P_BATCH_SIZE  =========> '||P_BATCH_SIZE);
 FND_FILE.PUT_LINE (FND_FILE.LOG, 'P_ID_LOW ==============> '||p_ID_LOW);
 FND_FILE.PUT_LINE (FND_FILE.LOG, 'P_ID_HIG ==============> '||P_ID_HIG);
 FND_FILE.PUT_LINE (FND_FILE.LOG, '---------------------------------------------------------------------------------');


-- FND_FILE.PUT_LINE(FND_FILE.OUTPUT ,'-----------------------------------------------------------------------');
-- FND_FILE.PUT_LINE(FND_FILE.OUTPUT ,'                Start of Header Validation Report for                  ');
-- FND_FILE.PUT_LINE(FND_FILE.OUTPUT ,'-----------------------------------------------------------------------');
-- FND_FILE.PUT_LINE(FND_FILE.OUTPUT ,' Contract Number      |Modifier                |Line Number    |Rule Category     |Attribute Name       |Current Value       ');

if(p_us_yn = 'true') THEN
   l_us_yn:=true;
else
   l_us_yn:=false;
end if;


if(l_us_yn) THEN
 If (p_status is null and p_org_id is null  )  then
     OPEN l_hdr_rule_csr1(p_id_low , p_id_hig);
     FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor opened is l_hdr_rule_csr1');
 Else
     OPEN l_hdr_rule_csr2(p_id_low , p_id_hig, p_status , p_org_id);
     FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor opened is l_hdr_rule_csr2');
 End IF;

else
 If (p_status is null and p_org_id is null  )  then
     OPEN l_hdr_rule_csr1_nus(p_id_low , p_id_hig);
     FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor opened is l_hdr_rule_csr1_nus');
 Else
     OPEN l_hdr_rule_csr2_nus(p_id_low , p_id_hig, p_status , p_org_id);
     FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor opened is l_hdr_rule_csr2_nus');
 End IF;

end if;

 Loop
    ------------------------------------------------------------------------------------

  if(l_us_yn) then

    --Start of If to choose the cursor to be fetched --
    If (p_status is null and p_org_id is null )  then
        FETCH l_hdr_rule_csr1 bulk collect into
                        CHR_ID
                        ,ACCT_RULE_ID_CHR
                        --,CC_EXPIRY_DATE_CHR
                        ,CC_BANK_ACCT_ID_CHR
                        ,GRACE_DURATION_CHR
                        ,EST_REV_PERCENT_CHR
                        --,EST_REV_DATE_CHR
                        ,TAX_AMOUNT_CHR
                        ,TAX_CODE_CHR
                        ,TAX_EXEMPTION_ID_CHR
                        ,BILLING_PROFILE_ID_CHR
                        ,QUOTE_TO_CONTACT_ID_CHR
                        ,QUOTE_TO_SITE_ID_CHR
                        ,QUOTE_TO_EMAIL_ID_CHR
                        ,QUOTE_TO_PHONE_ID_CHR
                        ,QUOTE_TO_FAX_ID_CHR
                        ,RENEWAL_PRICE_LIST_CHR
                        ,RENEWAL_MARKUP_PERCENT_CHR
                        ,RENEWAL_GRACE_DURATION_CHR
                        ,RENEWAL_EST_REV_PERCENT_CHR
                        ,RENEWAL_EST_REV_DURATION_CHR
                        ,RENEWAL_PRICE_LIST_USED_CHR
                        ,RENEWAL_NOTIFICATION_TO_CHR
                        ,RENEWAL_MARKUP_PERCENT_USED_CH
                        ,REV_EST_PERCENT_USED_CHR
                        ,REV_EST_DURATION_USED_CHR
                        ,BILLING_PROFILE_USED_CHR
                        ,EVN_THRESHOLD_AMT_CHR
                        ,ERN_THRESHOLD_AMT_CHR
                        ,RENEWAL_GRACE_DURATION_USED_CH
                        ,CONVERSION_RATE_CHR              --OKC
                        --,CONVERSION_RATE_DATE_CHR         --OKC
                        ,CONVERSION_EURO_RATE_CHR         --OKC
                        ,CUST_ACCT_ID_CHR                 --OKC
                        ,BILL_TO_SITE_USE_ID_CHR          --OKC
                        ,INV_RULE_ID_CHR                  --OKC
                        ,RENEWAL_NOTIFY_TO_CHR            --OKC
                        --,RENEWAL_END_DATE_CHR             --OKC
                        ,SHIP_TO_SITE_USE_ID_CHR          --OKC
                        ,PAYMENT_TERM_ID_CHR              --OKC
                        ,PRICE_LIST_ID_CHR  LIMIT p_batch_size; --OKC

       FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor fetched is l_hdr_rule_csr1');
       FND_FILE.PUT_LINE(FND_FILE.LOG , 'FETCHED ROW COUNT = '|| CHR_ID.COUNT );
       EXIT WHEN CHR_ID.COUNT = 0 ;
    Else
        FETCH l_hdr_rule_csr2 bulk collect into
                        CHR_ID
                        ,ACCT_RULE_ID_CHR
                        --,CC_EXPIRY_DATE_CHR
                        ,CC_BANK_ACCT_ID_CHR
                        ,GRACE_DURATION_CHR
                        ,EST_REV_PERCENT_CHR
                        --,EST_REV_DATE_CHR
                        ,TAX_AMOUNT_CHR
                        ,TAX_CODE_CHR
                        ,TAX_EXEMPTION_ID_CHR
                        ,BILLING_PROFILE_ID_CHR
                        ,QUOTE_TO_CONTACT_ID_CHR
                        ,QUOTE_TO_SITE_ID_CHR
                        ,QUOTE_TO_EMAIL_ID_CHR
                        ,QUOTE_TO_PHONE_ID_CHR
                        ,QUOTE_TO_FAX_ID_CHR
                        ,RENEWAL_PRICE_LIST_CHR
                        ,RENEWAL_MARKUP_PERCENT_CHR
                        ,RENEWAL_GRACE_DURATION_CHR
                        ,RENEWAL_EST_REV_PERCENT_CHR
                        ,RENEWAL_EST_REV_DURATION_CHR
                        ,RENEWAL_PRICE_LIST_USED_CHR
                        ,RENEWAL_NOTIFICATION_TO_CHR
                        ,RENEWAL_MARKUP_PERCENT_USED_CH
                        ,REV_EST_PERCENT_USED_CHR
                        ,REV_EST_DURATION_USED_CHR
                        ,BILLING_PROFILE_USED_CHR
                        ,EVN_THRESHOLD_AMT_CHR
                        ,ERN_THRESHOLD_AMT_CHR
                        ,RENEWAL_GRACE_DURATION_USED_CH
                        ,CONVERSION_RATE_CHR              --OKC
                        --,CONVERSION_RATE_DATE_CHR         --OKC
                        ,CONVERSION_EURO_RATE_CHR         --OKC
                        ,CUST_ACCT_ID_CHR                 --OKC
                        ,BILL_TO_SITE_USE_ID_CHR          --OKC
                        ,INV_RULE_ID_CHR                  --OKC
                        ,RENEWAL_NOTIFY_TO_CHR            --OKC
                        --,RENEWAL_END_DATE_CHR             --OKC
                        ,SHIP_TO_SITE_USE_ID_CHR          --OKC
                        ,PAYMENT_TERM_ID_CHR              --OKC
                        ,PRICE_LIST_ID_CHR  LIMIT p_batch_size; --OKC

       FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor fetched is l_hdr_rule_csr2');
       FND_FILE.PUT_LINE(FND_FILE.LOG , 'FETCHED ROW COUNT = '|| CHR_ID.COUNT );
       EXIT WHEN CHR_ID.COUNT = 0 ;

    End IF;
    --End of If to choose the cursor to be fetched --

else

    --Start of If to choose the cursor to be fetched --
    If (p_status is null and p_org_id is null )  then
        FETCH l_hdr_rule_csr1_nus bulk collect into
                        CHR_ID
                        ,ACCT_RULE_ID_CHR
                        --,CC_EXPIRY_DATE_CHR
                        ,CC_BANK_ACCT_ID_CHR
                        ,GRACE_DURATION_CHR
                        ,EST_REV_PERCENT_CHR
                        --,EST_REV_DATE_CHR
                        ,TAX_AMOUNT_CHR
                        ,TAX_CODE_CHR
                        ,TAX_EXEMPTION_ID_CHR
                        ,BILLING_PROFILE_ID_CHR
                        ,QUOTE_TO_CONTACT_ID_CHR
                        ,QUOTE_TO_SITE_ID_CHR
                        ,QUOTE_TO_EMAIL_ID_CHR
                        ,QUOTE_TO_PHONE_ID_CHR
                        ,QUOTE_TO_FAX_ID_CHR
                        ,RENEWAL_PRICE_LIST_CHR
                        ,RENEWAL_MARKUP_PERCENT_CHR
                        ,RENEWAL_GRACE_DURATION_CHR
                        ,RENEWAL_EST_REV_PERCENT_CHR
                        ,RENEWAL_EST_REV_DURATION_CHR
                        ,RENEWAL_PRICE_LIST_USED_CHR
                        ,RENEWAL_NOTIFICATION_TO_CHR
                        ,RENEWAL_MARKUP_PERCENT_USED_CH
                        ,REV_EST_PERCENT_USED_CHR
                        ,REV_EST_DURATION_USED_CHR
                        ,BILLING_PROFILE_USED_CHR
                        ,EVN_THRESHOLD_AMT_CHR
                        ,ERN_THRESHOLD_AMT_CHR
                        ,RENEWAL_GRACE_DURATION_USED_CH
                        ,CONVERSION_RATE_CHR              --OKC
                        --,CONVERSION_RATE_DATE_CHR         --OKC
                        ,CONVERSION_EURO_RATE_CHR         --OKC
                        ,CUST_ACCT_ID_CHR                 --OKC
                        ,BILL_TO_SITE_USE_ID_CHR          --OKC
                        ,INV_RULE_ID_CHR                  --OKC
                        ,RENEWAL_NOTIFY_TO_CHR            --OKC
                        --,RENEWAL_END_DATE_CHR             --OKC
                        ,SHIP_TO_SITE_USE_ID_CHR          --OKC
                        ,PAYMENT_TERM_ID_CHR              --OKC
                        ,PRICE_LIST_ID_CHR  LIMIT p_batch_size; --OKC

       FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor fetched is l_hdr_rule_csr1');
       FND_FILE.PUT_LINE(FND_FILE.LOG , 'FETCHED ROW COUNT = '|| CHR_ID.COUNT );
       EXIT WHEN CHR_ID.COUNT = 0 ;
    Else
        FETCH l_hdr_rule_csr2_nus bulk collect into
                        CHR_ID
                        ,ACCT_RULE_ID_CHR
                        --,CC_EXPIRY_DATE_CHR
                        ,CC_BANK_ACCT_ID_CHR
                        ,GRACE_DURATION_CHR
                        ,EST_REV_PERCENT_CHR
                        --,EST_REV_DATE_CHR
                        ,TAX_AMOUNT_CHR
                        ,TAX_CODE_CHR
                        ,TAX_EXEMPTION_ID_CHR
                        ,BILLING_PROFILE_ID_CHR
                        ,QUOTE_TO_CONTACT_ID_CHR
                        ,QUOTE_TO_SITE_ID_CHR
                        ,QUOTE_TO_EMAIL_ID_CHR
                        ,QUOTE_TO_PHONE_ID_CHR
                        ,QUOTE_TO_FAX_ID_CHR
                        ,RENEWAL_PRICE_LIST_CHR
                        ,RENEWAL_MARKUP_PERCENT_CHR
                        ,RENEWAL_GRACE_DURATION_CHR
                        ,RENEWAL_EST_REV_PERCENT_CHR
                        ,RENEWAL_EST_REV_DURATION_CHR
                        ,RENEWAL_PRICE_LIST_USED_CHR
                        ,RENEWAL_NOTIFICATION_TO_CHR
                        ,RENEWAL_MARKUP_PERCENT_USED_CH
                        ,REV_EST_PERCENT_USED_CHR
                        ,REV_EST_DURATION_USED_CHR
                        ,BILLING_PROFILE_USED_CHR
                        ,EVN_THRESHOLD_AMT_CHR
                        ,ERN_THRESHOLD_AMT_CHR
                        ,RENEWAL_GRACE_DURATION_USED_CH
                        ,CONVERSION_RATE_CHR              --OKC
                        --,CONVERSION_RATE_DATE_CHR         --OKC
                        ,CONVERSION_EURO_RATE_CHR         --OKC
                        ,CUST_ACCT_ID_CHR                 --OKC
                        ,BILL_TO_SITE_USE_ID_CHR          --OKC
                        ,INV_RULE_ID_CHR                  --OKC
                        ,RENEWAL_NOTIFY_TO_CHR            --OKC
                        --,RENEWAL_END_DATE_CHR             --OKC
                        ,SHIP_TO_SITE_USE_ID_CHR          --OKC
                        ,PAYMENT_TERM_ID_CHR              --OKC
                        ,PRICE_LIST_ID_CHR  LIMIT p_batch_size; --OKC

       FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor fetched is l_hdr_rule_csr2');
       FND_FILE.PUT_LINE(FND_FILE.LOG , 'FETCHED ROW COUNT = '|| CHR_ID.COUNT );
       EXIT WHEN CHR_ID.COUNT = 0 ;

    End IF;
    --End of If to choose the cursor to be fetched --


end if;
    ------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------
    -- Begin of code to validate data type .
    FOR a in CHR_ID.FIRST..CHR_ID.LAST
    LOOP
       --1. Validation for ARL rule .
       BEGIN
          ACCT_RULE_ID(1)      := ACCT_RULE_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'ARL') ;
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_ACCT_RULE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'ARL'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         , ACCT_RULE_ID_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );
       END;

       --2. Validation for CCR rule .
       BEGIN
          CC_BANK_ACCT_ID(1)      := CC_BANK_ACCT_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'CCR') ;
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CC_BANK_ACCT_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'CCR'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , CC_BANK_ACCT_ID_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION3'  ||L_ATTRIBUTE_NAME || CC_BANK_ACCT_ID_CHR(a)  );
       END;

       --3. Validation for GPR rule .
       BEGIN
          GRACE_DURATION(1)    := GRACE_DURATION_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'GPR') ;
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_GRACE_DURATION');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'GPR'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , GRACE_DURATION_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || GRACE_DURATION_CHR(a)  );
       END;

       --4. Validation for RVE rule .
       BEGIN
          EST_REV_PERCENT(1)      := EST_REV_PERCENT_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RVE') ;
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EST_REV_PERCENT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RVE'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , EST_REV_PERCENT_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || EST_REV_PERCENT_CHR(a)  );
       END;

       --5. Validation for IRT rule.
       BEGIN
          TAX_AMOUNT(1)      := TAX_AMOUNT_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'IRT') ;
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_AMOUNT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'IRT'  ,'RULE_INFORMATION4'    ,L_ATTRIBUTE_NAME         , TAX_AMOUNT_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || TAX_AMOUNT_CHR(a)  );
       END;

       --6. Validation for TAX (TAX_CODE) rule.
       BEGIN
          TAX_CODE(1)      := TAX_CODE_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'TAX') ;
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_CODE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'TAX'  ,'OBJECT2_ID1'    ,L_ATTRIBUTE_NAME         , TAX_CODE_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT2_ID1' ||L_ATTRIBUTE_NAME || TAX_CODE_CHR(a)  );
       END;

       --7. Validation for TAX (TAX_EXEMPTION_ID) rule.
       BEGIN
          TAX_EXEMPTION_ID(1)      := TAX_EXEMPTION_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'TAX');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_EXEMPTION_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'TAX'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , TAX_EXEMPTION_ID_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || TAX_EXEMPTION_ID_CHR(a)  );
       END;


       --8. Validation for CAN  rule.
       BEGIN
          CUST_ACCT_ID(1)      := CUST_ACCT_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'CAN');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CUST_ACCT_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'CAN'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , CUST_ACCT_ID_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || CUST_ACCT_ID_CHR(a)  );
       END;

       --9. Validation for BTO  rule.
       BEGIN
          BILL_TO_SITE_USE_ID(1)      := BILL_TO_SITE_USE_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'BTO');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BILL_TO_SITE_USE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'BTO'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , BILL_TO_SITE_USE_ID_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || BILL_TO_SITE_USE_ID_CHR(a)  );
       END;


       --10. Validation for IRE  rule.
       BEGIN
          INV_RULE_ID(1)      := INV_RULE_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'IRE');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_INV_RULE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'IRE'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , INV_RULE_ID_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || INV_RULE_ID_CHR(a)  );
       END;

       --11. Validation for REN ( RENEWAL_NOTIFY_TO )  rule.
       BEGIN
          RENEWAL_NOTIFY_TO(1)      := RENEWAL_NOTIFY_TO_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'IRE');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_NOTIFY_TO');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'REN'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_NOTIFY_TO_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || RENEWAL_NOTIFY_TO_CHR(a)  );
       END;

       --12. Validation for STO rule.
       BEGIN
          SHIP_TO_SITE_USE_ID(1)      := SHIP_TO_SITE_USE_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'STO');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_SHIP_TO_SITE_USE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'STO'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , SHIP_TO_SITE_USE_ID_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || SHIP_TO_SITE_USE_ID_CHR(a)  );
       END;

       --13. Validation for PTR rule.
       BEGIN
          PAYMENT_TERM_ID(1)      := PAYMENT_TERM_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'PTR');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PAYMENT_TERM_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'PTR'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , PAYMENT_TERM_ID_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || PAYMENT_TERM_ID_CHR(a)  );
       END;

       --14. Validation for ERN rule.
       BEGIN
          BILLING_PROFILE_ID(1)      := BILLING_PROFILE_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'ERN');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BILLING_PROFILE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'ERN'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , BILLING_PROFILE_ID_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || BILLING_PROFILE_ID_CHR(a)  );
       END;


       --15. Validation for QTO ( QUOTE_TO_CONTACT_ID )rule.
       BEGIN
          QUOTE_TO_CONTACT_ID(1)      := QUOTE_TO_CONTACT_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'QTO');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_CONTACT_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'QTO'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_CONTACT_ID_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || QUOTE_TO_CONTACT_ID_CHR(a)  );
       END;

       --16. Validation for QTO ( QUOTE_TO_SITE_ID ) rule.
       BEGIN
          QUOTE_TO_SITE_ID(1)      := QUOTE_TO_SITE_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'QTO');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_SITE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'QTO'  ,'RULE_INFORMATION4'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_SITE_ID_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT2_ID1' ||L_ATTRIBUTE_NAME || QUOTE_TO_SITE_ID_CHR(a)  );
       END;

       --17. Validation for QTO ( QUOTE_TO_EMAIL_ID ) rule.
       BEGIN
          QUOTE_TO_EMAIL_ID(1)      := QUOTE_TO_EMAIL_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'QTO');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_EMAIL_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'QTO'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_EMAIL_ID_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION1'  ||L_ATTRIBUTE_NAME || QUOTE_TO_EMAIL_ID_CHR(a)  );
       END;

       --18. Validation for QTO ( QUOTE_TO_PHONE_ID ) rule.
       BEGIN
          QUOTE_TO_PHONE_ID(1)      := QUOTE_TO_PHONE_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'QTO');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_PHONE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'QTO'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_PHONE_ID_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || QUOTE_TO_PHONE_ID_CHR(a)  );
       END;

       --19. Validation for QTO ( QUOTE_TO_FAX_ID ) rule.
       BEGIN
          QUOTE_TO_FAX_ID(1)      := QUOTE_TO_FAX_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'QTO');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_FAX_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'QTO'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_FAX_ID_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION3' ||L_ATTRIBUTE_NAME || QUOTE_TO_FAX_ID_CHR(a)  );
       END;

       --20. Validation for RPT ( RENEWAL_PRICE_LIST ) rule.
       BEGIN
          RENEWAL_PRICE_LIST(1)      := RENEWAL_PRICE_LIST_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RPT');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_PRICE_LIST');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RPT'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , RENEWAL_PRICE_LIST_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || RENEWAL_PRICE_LIST_CHR(a)  );
       END;

       --21. Validation for RPT ( RENEWAL_MARKUP_PERCENT ) rule.
       BEGIN
          RENEWAL_MARKUP_PERCENT(1)      := RENEWAL_MARKUP_PERCENT_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RPT');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_MARKUP_PERCENT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RPT'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_MARKUP_PERCENT_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || RENEWAL_MARKUP_PERCENT_CHR(a)  );
       END;

       --22. Validation for RPT ( RENEWAL_GRACE_DURATION ) rule.
       BEGIN
          RENEWAL_GRACE_DURATION(1)      := RENEWAL_GRACE_DURATION_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RPT');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_GRACE_DURATION');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RPT'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , RENEWAL_GRACE_DURATION_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION3' ||L_ATTRIBUTE_NAME || RENEWAL_GRACE_DURATION_CHR(a)  );
       END;

       --23. Validation for RER ( RENEWAL_EST_REV_PERCENT ) rule.
       BEGIN
          RENEWAL_EST_REV_PERCENT(1)      := RENEWAL_EST_REV_PERCENT_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RER');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_EREV_PERCENT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RER'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , RENEWAL_EST_REV_PERCENT_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || RENEWAL_EST_REV_PERCENT_CHR(a)  );
       END;

       --24. Validation for RER ( RENEWAL_EST_REV_DURATION ) rule.
       BEGIN
          RENEWAL_EST_REV_DURATION(1)      := RENEWAL_EST_REV_DURATION_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RER');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_EREV_DURATION');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RER'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_EST_REV_DURATION_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION2'  ||L_ATTRIBUTE_NAME || RENEWAL_EST_REV_DURATION_CHR(a)  );
       END;

       --25. Validation for RRU ( RENEWAL_PRICE_LIST_USED ) rule.
       BEGIN
          RENEWAL_PRICE_LIST_USED(1)      := RENEWAL_PRICE_LIST_USED_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_PRICE_LIST_U');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RRU'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , RENEWAL_PRICE_LIST_USED_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || RENEWAL_PRICE_LIST_USED_CHR(a)  );
       END;

       --26. Validation for RRU ( RENEWAL_NOTIFICATION_TO ) rule.
       BEGIN
          RENEWAL_NOTIFICATION_TO(1)      := RENEWAL_NOTIFICATION_TO_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_NOTIFICATION');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RRU'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_NOTIFICATION_TO_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || RENEWAL_NOTIFICATION_TO_CHR(a)  );
       END;

       --27. Validation for RRU ( RENEWAL_NOTIFICATION_TO ) rule.
       BEGIN
          RENEWAL_MARKUP_PERCENT_USED(1)      := RENEWAL_MARKUP_PERCENT_USED_CH(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_MPERCENT_U');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RRU'  ,'RULE_INFORMATION5'    ,L_ATTRIBUTE_NAME         , RENEWAL_MARKUP_PERCENT_USED_CH(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION5' ||L_ATTRIBUTE_NAME || RENEWAL_MARKUP_PERCENT_USED_CH(a)  );
       END;

       --28. Validation for RRU ( REV_EST_PERCENT_USED ) rule.
       BEGIN
          REV_EST_PERCENT_USED(1)      := REV_EST_PERCENT_USED_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_REV_EST_PERCENT_U');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RRU'  ,'RULE_INFORMATION6'    ,L_ATTRIBUTE_NAME         , REV_EST_PERCENT_USED_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION6' ||L_ATTRIBUTE_NAME || REV_EST_PERCENT_USED_CHR(a)  );
       END;

       --29. Validation for RRU ( REV_EST_DURATION_USED ) rule.
       BEGIN
          REV_EST_DURATION_USED(1)      := REV_EST_DURATION_USED_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_REV_EST_DURATION_U');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RRU'  ,'RULE_INFORMATION7'    ,L_ATTRIBUTE_NAME         , REV_EST_DURATION_USED_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION7'||L_ATTRIBUTE_NAME || REV_EST_DURATION_USED_CHR(a)  );
       END;

       --30. Validation for RRU ( BILLING_PROFILE_USED ) rule.
       BEGIN
          BILLING_PROFILE_USED(1)      := BILLING_PROFILE_USED_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BILLING_PROFILE_U');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RRU'  ,'RULE_INFORMATION9'    ,L_ATTRIBUTE_NAME         , BILLING_PROFILE_USED_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION9' ||L_ATTRIBUTE_NAME || BILLING_PROFILE_USED_CHR(a)  );
       END;

       --31. Validation for RRU ( EVN_THRESHOLD_AMT ) rule.
       BEGIN
          EVN_THRESHOLD_AMT(1)      := EVN_THRESHOLD_AMT_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EVN_THRESHOLD_AMT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RRU'  ,'RULE_INFORMATION11'    ,L_ATTRIBUTE_NAME         , EVN_THRESHOLD_AMT_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION11' ||L_ATTRIBUTE_NAME || EVN_THRESHOLD_AMT_CHR(a)  );
       END;

       --32. Validation for RRU ( ERN_THRESHOLD_AMT ) rule.
       BEGIN
          ERN_THRESHOLD_AMT(1)      := ERN_THRESHOLD_AMT_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_ERN_THRESHOLD_AMT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RRU'  ,'RULE_INFORMATION13'    ,L_ATTRIBUTE_NAME         , ERN_THRESHOLD_AMT_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION13' ||L_ATTRIBUTE_NAME || ERN_THRESHOLD_AMT_CHR(a)  );
       END;

       --33. Validation for RRE ( RENEWAL_GRACE_DURATION_USED ) rule.
       BEGIN
          RENEWAL_GRACE_DURATION_USED(1)      := RENEWAL_GRACE_DURATION_USED_CH(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RRE');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_GDURATION_U');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RRE'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , RENEWAL_GRACE_DURATION_USED_CH(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || RENEWAL_GRACE_DURATION_USED_CH(a)  );
       END;

       --34. Validation for PRE ( PRICE_LIST_ID ) rule.
       BEGIN
          PRICE_LIST_ID(1)      := PRICE_LIST_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'PRE');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PRICE_LIST_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'PRE'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , PRICE_LIST_ID_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || PRICE_LIST_ID_CHR(a)  );
       END;

       --35. Validation for CVN ( CONVERSION_RATE ) rule.
       BEGIN
          CONVERSION_RATE(1)      := CONVERSION_RATE_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'CVN');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CONVERSION_RATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'CVN'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , CONVERSION_RATE_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || CONVERSION_RATE_CHR(a)  );
       END;

       --36. Validation for CVN ( CONVERSION_EURO_RATE ) rule.
       BEGIN
          CONVERSION_EURO_RATE(1)      := CONVERSION_EURO_RATE_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'CVN');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CONVERSION_EURO_RATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'CVN'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , CONVERSION_EURO_RATE_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION3' ||L_ATTRIBUTE_NAME || CONVERSION_EURO_RATE_CHR(a)  );
       END;

/*
       --37. Validation for CCR ( CC_EXPIRY_DATE ) rule.
       BEGIN
          CC_EXPIRY_DATE(1)      := to_date(CC_EXPIRY_DATE_CHR(a),'yyyy/mm/dd hh24:mi:ss');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'CCR');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CC_EXPIRY_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'CCR'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , CC_EXPIRY_DATE_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION2'  ||L_ATTRIBUTE_NAME || CC_EXPIRY_DATE_CHR(a)  );
       END;
*/
/*
       --38. Validation for RVE ( EST_REV_DATE ) rule.
       BEGIN
          EST_REV_DATE(1)      := to_date(EST_REV_DATE_CHR(a),'yyyy/mm/dd hh24:mi:ss');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RVE');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EST_REV_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RVE'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , EST_REV_DATE_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || EST_REV_DATE_CHR(a)  );
       END;

*/
/*
       --39. Validation for REN ( RENEWAL_END_DATE ) rule.
       BEGIN
          RENEWAL_END_DATE(1)      := to_date(RENEWAL_END_DATE_CHR(a),'yyyy/mm/dd hh24:mi:ss');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'REN');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_END_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'REN'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , RENEWAL_END_DATE_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION3' ||L_ATTRIBUTE_NAME || RENEWAL_END_DATE_CHR(a)  );
       END;
*/
/*
       --40. Validation for REN ( CONVERSION_RATE_DATE ) rule.
       BEGIN
          CONVERSION_RATE_DATE(1)      := to_date(CONVERSION_RATE_DATE_CHR(a),'yyyy/mm/dd hh24:mi:ss');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'REN');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CONVERSION_RATE_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'CVN'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , CONVERSION_RATE_DATE_CHR(a),
                                       L_ERROR_MSG );
	 -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || CONVERSION_RATE_DATE_CHR(a)  );
       END;
*/

    END LOOP;
    CHR_ID.DELETE;

    -- End of code to validate data type .
    ------------------------------------------------------------------------------------

 End Loop;




  If(l_hdr_rule_csr1%ISOPEN) THEN
    Close  l_hdr_rule_csr1;
  END IF;
  If(l_hdr_rule_csr2%ISOPEN) THEN
    Close  l_hdr_rule_csr2;
  End if;

  If(l_hdr_rule_csr1_nus%ISOPEN) THEN
    Close  l_hdr_rule_csr1_nus;
  END IF;
  If(l_hdr_rule_csr2_nus%ISOPEN) THEN
    Close  l_hdr_rule_csr2_nus;
  End if;


EXCEPTION
WHEN OTHERS THEN
  If(l_hdr_rule_csr1%ISOPEN) THEN
    Close  l_hdr_rule_csr1;
  END IF;
  If(l_hdr_rule_csr2%ISOPEN) THEN
    Close  l_hdr_rule_csr2;
  End if;
  If(l_hdr_rule_csr1_nus%ISOPEN) THEN
    Close  l_hdr_rule_csr1_nus;
  END IF;
  If(l_hdr_rule_csr2_nus%ISOPEN) THEN
    Close  l_hdr_rule_csr2_nus;
  End if;

END VALIDATE_HDR_RULE;

--------------------------------------------------------------------------------------------
--    This is the procedure called from VALIDATE_DATA1 to validate Line rule data           --
--------------------------------------------------------------------------------------------

Procedure VALIDATE_LINE_RULE(
			    ERRBUF            OUT NOCOPY VARCHAR2 ,
                            RETCODE           OUT NOCOPY NUMBER ,
                            p_status          in VARCHAR2,
                            p_org_id          in NUMBER ,
                            p_batch_size      in NUMBER,
			    p_us_yn           in VARCHAR2,
                            p_id_low          in NUMBER,
                            p_id_hig          in NUMBER)
IS

Type l_num_tbl is table of  NUMBER         index  by BINARY_INTEGER ;
Type l_date_tbl is table of DATE           index  by BINARY_INTEGER ;
Type l_chr_tbl is table of  VARCHAR2(2000) index  by BINARY_INTEGER ;

--table types declared with existing rule name wherever applicable


CLE_ID                          l_num_tbl ;
DNZ_CHR_ID                      l_num_tbl ;
DISCOUNT_LIST                   l_num_tbl ;  --DST
ACCT_RULE_ID                    l_num_tbl ;  --ARL
PAYMENT_TYPE                    l_chr_tbl ;  --CCR
CC_NO                           l_chr_tbl ;  --CCR
CC_EXPIRY_DATE			l_date_tbl ; --CCR
CC_BANK_ACCT_ID			l_num_tbl ;  --CCR
CC_AUTH_CODE			l_chr_tbl ;  --CCR
GRACE_DURATION			l_num_tbl ;  --GPR
GRACE_PERIOD			l_chr_tbl ;  --GPR
INVOICE_TEXT			l_chr_tbl ;  --IRT
INV_PRINT_FLAG			l_chr_tbl ;  --IRT
PRICE_UOM			l_chr_tbl ;  --IRT
TAX_AMOUNT			l_num_tbl ;  --IRT
TAX_INCLUSIVE_YN		l_chr_tbl ;  --IRT
TAX_STATUS			l_chr_tbl ;  --TAX
TAX_CODE			l_num_tbl ;  --TAX
TAX_EXEMPTION_ID		l_num_tbl ;  --TAX
IB_TRANS_TYPE			l_chr_tbl ;  --IBR
IB_TRANS_DATE			l_date_tbl ; --IBR
IB_TRX_DETAILS			l_chr_tbl ;  --IBR
CLVL_LIST_PRICE			l_num_tbl ;  --PDL
CLVL_QUANTITY			l_num_tbl ;  --PDL
CLVL_EXTENDED_AMT		l_num_tbl ;  --PDL
TOPLVL_OPERAND_CODE		l_chr_tbl ;  --PDL
TOPLVL_OPERAND_VAL		l_num_tbl ;  --PDL
CLVL_UOM_CODE			l_chr_tbl ;  --PDL
TOPLVL_QUANTITY			l_num_tbl ;  --PDL
TOPLVL_UOM_CODE			l_chr_tbl ;  --PDL
TOPLVL_ADJ_PRICE		l_num_tbl ;  --PDL
TOPLVL_PRICE_QTY		l_num_tbl ;  --PDL
STATUS_TEXT			l_chr_tbl ;  --PDL
LINE_LIST_PRICE                 l_num_tbl ;  --PDL
AVERAGING_INTERVAL		l_num_tbl ;  --QRE
USAGE_PERIOD			l_chr_tbl ;  --QRE
SETTLEMENT_INTERVAL		l_chr_tbl ;  --QRE
MINIMUM_QUANTITY		l_num_tbl ;  --QRE
DEFAULT_QUANTITY		l_num_tbl ;  --QRE
AMCV_FLAG			l_chr_tbl ;  --QRE
FIXED_QUANTITY			l_num_tbl ;  --QRE
USAGE_DURATION			l_num_tbl ;  --QRE
LEVEL_YN			l_chr_tbl ;  --QRE
USAGE_TYPE			l_chr_tbl ;  --QRE
UOM_QUANTIFIED			l_chr_tbl ;  --QRE
BASE_READING			l_num_tbl ;  --QRE
USAGE_EST_METHOD		l_chr_tbl ;  --QRE
BILLING_SCHEDULE_TYPE		l_chr_tbl ;  --SLH
CUST_ACCT_ID			l_num_tbl ;  --CAN (OKC)
BILL_TO_SITE_USE_ID		l_num_tbl ;  --BTO (OKC)
INV_RULE_ID			l_num_tbl ;  --IRE (OKC)
LINE_RENEWAL_TYPE_CODE		l_chr_tbl ;  --REN (OKC)
SHIP_TO_SITE_USE_ID		l_num_tbl ;  --STO (OKC)
PAYMENT_TERM_ID			l_num_tbl ;  --PTR (OKC)
-- Following for Coverage --
EXCEPTION_COV_ID		l_num_tbl ;
PM_PROGRAM_ID			l_num_tbl ;
PRICE_LIST_ID			l_num_tbl ;
RCN_INCIDENT_SEVERITY_ID	l_num_tbl ;
RCN_PDF_ID			l_num_tbl ;
LIMIT_UOM_QUANTIFIED		l_num_tbl ;
DISCOUNT_AMOUNT			l_num_tbl ;
DISCOUNT_PERCENT		l_num_tbl ;

-- Following for SLL --
LEVEL_PERIODS			l_num_tbl ;
UOM_PER_PERIOD			l_num_tbl ;
ADVANCE_PERIODS			l_num_tbl ;
LEVEL_AMOUNT			l_num_tbl ;
INVOICE_OFFSET_DAYS		l_num_tbl ;
INTERFACE_OFFSET_DAYS		l_num_tbl ;



-- FOLLOWING ARE NUMBER FIELDS --
DISCOUNT_LIST_CHR               l_chr_tbl ;  --DST
ACCT_RULE_ID_CHR                l_chr_tbl ;  --ARL
CC_BANK_ACCT_ID_CHR		l_chr_tbl ;  --CCR
GRACE_DURATION_CHR		l_chr_tbl ;  --GPR
TAX_AMOUNT_CHR   		l_chr_tbl ;  --IRT
TAX_CODE_CHR    		l_chr_tbl ;  --TAX
TAX_EXEMPTION_ID_CHR		l_chr_tbl ;  --TAX
CLVL_LIST_PRICE_CHR		l_chr_tbl ;  --PDL
CLVL_QUANTITY_CHR		l_chr_tbl ;  --PDL
CLVL_EXTENDED_AMT_CHR   	l_chr_tbl ;  --PDL
TOPLVL_OPERAND_VAL_CHR		l_chr_tbl ;  --PDL
TOPLVL_QUANTITY_CHR		l_chr_tbl ;  --PDL
TOPLVL_ADJ_PRICE_CHR		l_chr_tbl ;  --PDL
TOPLVL_PRICE_QTY_CHR		l_chr_tbl ;  --PDL
LINE_LIST_PRICE_CHR             l_chr_tbl ;  --PDL (OKC) rule_info4
AVERAGING_INTERVAL_CHR		l_chr_tbl ;  --QRE
MINIMUM_QUANTITY_CHR		l_chr_tbl ;  --QRE
DEFAULT_QUANTITY_CHR		l_chr_tbl ;  --QRE
FIXED_QUANTITY_CHR		l_chr_tbl ;  --QRE
USAGE_DURATION_CHR		l_chr_tbl ;  --QRE
BASE_READING_CHR		l_chr_tbl ;  --QRE
CUST_ACCT_ID_CHR		l_chr_tbl ;  --CAN (OKC)
BILL_TO_SITE_USE_ID_CHR		l_chr_tbl ;  --BTO (OKC)
INV_RULE_ID_CHR			l_chr_tbl ;  --IRE (OKC)
SHIP_TO_SITE_USE_ID_CHR		l_chr_tbl ;  --STO (OKC)
PAYMENT_TERM_ID_CHR		l_chr_tbl ;  --PTR (OKC)

---- FOLLOWING ARE NUMBER FIELDS For Coverage/PM----
EXCEPTION_COV_ID_chr            l_chr_tbl ;
PM_PROGRAM_ID_chr               l_chr_tbl ;
--DISCOUNT_LIST_chr               l_chr_tbl ;
PRICE_LIST_ID_chr               l_chr_tbl ;
RCN_INCIDENT_SEVERITY_ID_chr    l_chr_tbl ;
RCN_PDF_ID_chr                  l_chr_tbl ;
LIMIT_UOM_QUANTIFIED_chr        l_chr_tbl ;
DISCOUNT_AMOUNT_chr             l_chr_tbl ;
DISCOUNT_PERCENT_chr            l_chr_tbl ;

----- FOLLOWING ARE NUMBER FIELDS For SLL-----
LEVEL_PERIODS_CHR		l_chr_tbl ;
UOM_PER_PERIOD_CHR		l_chr_tbl ;
ADVANCE_PERIODS_CHR		l_chr_tbl ;
LEVEL_AMOUNT_CHR		l_chr_tbl ;
INVOICE_OFFSET_DAYS_CHR		l_chr_tbl ;
INTERFACE_OFFSET_DAYS_CHR	l_chr_tbl ;


-- FOLLOWING ARE DATE FIELDS --
CC_EXPIRY_DATE_CHR		l_chr_tbl ; --CCR
IB_TRANS_DATE_CHR		l_chr_tbl ; --IBR

--Misc Variables --
L_ATTRIBUTE_NAME              VARCHAR2(2000);
L_ERROR_MSG                   VARCHAR2(2000);

l_us_yn                       BOOLEAN;

-------------------------------------------------------------------------------
-- The following is the cursor opened if all the parameters passed are null  --
-------------------------------------------------------------------------------
CURSOR L_LINE_CSR1 (p_id_low in NUMBER , p_id_hig in NUMBER ) IS
SELECT * FROM (
SELECT  RGP.CLE_ID     CLE_ID
       ,RGP.DNZ_CHR_ID DNZ_CHR_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)))
               DISCOUNT_LIST
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)))
               ACCT_RULE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)))
               CC_BANK_ACCT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)))
               GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)))
               TAX_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)))
               TAX_CODE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)))
               TAX_EXEMPTION_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)))
               CLVL_LIST_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)))
               CLVL_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)))
               CLVL_EXTENDED_AMT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION4)))
               LINE_LIST_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)))
               TOPLVL_OPERAND_VAL
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)))
               TOPLVL_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)))
               TOPLVL_ADJ_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)))
               TOPLVL_PRICE_QTY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)))
               AVERAGING_INTERVAL
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)))
               MINIMUM_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)))
               DEFAULT_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)))
               FIXED_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)))
               USAGE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)))
               BASE_READING
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)))
               CUST_ACCT_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)))
               BILL_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)))
               INV_RULE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)))
               SHIP_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)))
               PAYMENT_TERM_ID --OKC
        ----------------------------- COVERAGE CODE START -------------------------------------------------
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)))
               EXCEPTION_COV_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)))
               PM_PROGRAM_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PRE',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PRE',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PRE',RUL.OBJECT1_ID1)))
               PRICE_LIST_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)))
               RCN_INCIDENT_SEVERITY_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)))
               RCN_PDF_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)))
               LIMIT_UOM_QUANTIFIED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)))
               DISCOUNT_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)))
               DISCOUNT_PERCENT
        ----------------------------- COVERAGE CODE END ----------------------------------------------------
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)))
               LEVEL_AMOUNT
  FROM OKC_RULE_GROUPS_B RGP
     , OKC_RULES_B RUL
 WHERE RGP.ID  = RUL.RGP_ID
   AND RUL.RULE_INFORMATION_CATEGORY IN ('DST','ARL','CCR','GPR','IRT','TAX','IBR','PDL','QRE','SLH','CAN','BTO','IRE','LRT','STO','PTR',
                                         'ECE','PMP','DST','RCN','RSN','LMT','PRE','SLL')
   AND RGP.CLE_ID IS NOT NULL
   AND RGP.RGD_CODE = 'SVC_K'
   AND RGP.DNZ_CHR_ID = RUL.DNZ_CHR_ID
   AND RGP.ID BETWEEN P_ID_LOW  AND P_ID_HIG
 GROUP BY RGP.CLE_ID ,RGP.DNZ_CHR_ID )
WHERE   DISCOUNT_LIST IS NOT NULL OR
  ACCT_RULE_ID IS NOT NULL OR
  CC_BANK_ACCT_ID IS NOT NULL OR
  GRACE_DURATION IS NOT NULL OR
  TAX_AMOUNT IS NOT NULL OR
  TAX_CODE IS NOT NULL OR
  TAX_EXEMPTION_ID IS NOT NULL OR
  CLVL_LIST_PRICE IS NOT NULL OR
  CLVL_QUANTITY IS NOT NULL OR
  CLVL_EXTENDED_AMT IS NOT NULL OR
  TOPLVL_OPERAND_VAL IS NOT NULL OR
  TOPLVL_QUANTITY IS NOT NULL OR
  TOPLVL_ADJ_PRICE IS NOT NULL OR
  TOPLVL_PRICE_QTY IS NOT NULL OR
  AVERAGING_INTERVAL IS NOT NULL OR
  MINIMUM_QUANTITY IS NOT NULL OR
  DEFAULT_QUANTITY IS NOT NULL OR
  FIXED_QUANTITY IS NOT NULL OR
  USAGE_DURATION IS NOT NULL OR
  BASE_READING IS NOT NULL OR
  -- OKC --
  CUST_ACCT_ID IS NOT NULL OR
  BILL_TO_SITE_USE_ID IS NOT NULL OR
  INV_RULE_ID IS NOT NULL OR
  SHIP_TO_SITE_USE_ID IS NOT NULL OR
  PAYMENT_TERM_ID IS NOT NULL OR
  -- COVERAGE CODE START --
  EXCEPTION_COV_ID IS NOT NULL OR
  PM_PROGRAM_ID IS NOT NULL OR
  PRICE_LIST_ID IS NOT NULL OR
  RCN_INCIDENT_SEVERITY_ID IS NOT NULL OR
  RCN_PDF_ID IS NOT NULL OR
  LIMIT_UOM_QUANTIFIED IS NOT NULL OR
  DISCOUNT_AMOUNT IS NOT NULL OR
  DISCOUNT_PERCENT IS NOT NULL OR
  -- COVERAGE CODE END ---
  LEVEL_AMOUNT IS NOT NULL ;

 -------------------------------------------------------------------------------
-- The following is the cursor opened if any of the following parameters are --
-- passed to the concurrent request                                          --
-- 1. p_status
-- 2. p_org_id
-------------------------------------------------------------------------------
CURSOR L_LINE_CSR2 (p_id_low in NUMBER , p_id_hig in NUMBER  , p_status in VARCHAR2 , p_org_id in NUMBER ) IS
SELECT * FROM (
SELECT  RGP.CLE_ID     CLE_ID
       ,RGP.DNZ_CHR_ID DNZ_CHR_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)))
               DISCOUNT_LIST
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)))
               ACCT_RULE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)))
               CC_BANK_ACCT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)))
               GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)))
               TAX_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)))
               TAX_CODE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)))
               TAX_EXEMPTION_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)))
               CLVL_LIST_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)))
               CLVL_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)))
               CLVL_EXTENDED_AMT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION4)))
               LINE_LIST_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)))
               TOPLVL_OPERAND_VAL
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)))
               TOPLVL_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)))
               TOPLVL_ADJ_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)))
               TOPLVL_PRICE_QTY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)))
               AVERAGING_INTERVAL
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)))
               MINIMUM_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)))
               DEFAULT_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)))
               FIXED_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)))
               USAGE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)))
               BASE_READING
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)))
               CUST_ACCT_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)))
               BILL_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)))
               INV_RULE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)))
               SHIP_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)))
               PAYMENT_TERM_ID --OKC
        ----------------------------- COVERAGE CODE START -------------------------------------------------
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)))
               EXCEPTION_COV_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)))
               PM_PROGRAM_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PRE',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PRE',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PRE',RUL.OBJECT1_ID1)))
               PRICE_LIST_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)))
               RCN_INCIDENT_SEVERITY_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)))
               RCN_PDF_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)))
               LIMIT_UOM_QUANTIFIED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)))
               DISCOUNT_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)))
               DISCOUNT_PERCENT
        ----------------------------- COVERAGE CODE END ----------------------------------------------------
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)))
               LEVEL_AMOUNT
  FROM OKC_RULE_GROUPS_B RGP
     , OKC_RULES_B RUL
     , OKC_K_HEADERS_B HDR
 WHERE RGP.ID  = RUL.RGP_ID
   AND RUL.RULE_INFORMATION_CATEGORY IN ('DST','ARL','CCR','GPR','IRT','TAX','IBR','PDL','QRE','SLH','CAN','BTO','IRE','LRT','STO','PTR',
                                         'ECE','PMP','DST','RCN','RSN','LMT','PRE','SLL')
   AND RGP.CLE_ID IS NOT NULL
   AND RGP.RGD_CODE = 'SVC_K'
   AND RGP.DNZ_CHR_ID = RUL.DNZ_CHR_ID
   AND HDR.STS_CODE = NVL(P_STATUS,HDR.STS_CODE)
   AND HDR.AUTHORING_ORG_ID = NVL(P_ORG_ID,HDR.AUTHORING_ORG_ID)
   AND HDR.ID = RGP.DNZ_CHR_ID
   AND HDR.ID = RUL.DNZ_CHR_ID
   AND HDR.ID BETWEEN P_ID_LOW  AND P_ID_HIG
 GROUP BY RGP.CLE_ID ,RGP.DNZ_CHR_ID )
WHERE   DISCOUNT_LIST IS NOT NULL OR
  ACCT_RULE_ID IS NOT NULL OR
  CC_BANK_ACCT_ID IS NOT NULL OR
  GRACE_DURATION IS NOT NULL OR
  TAX_AMOUNT IS NOT NULL OR
  TAX_CODE IS NOT NULL OR
  TAX_EXEMPTION_ID IS NOT NULL OR
  CLVL_LIST_PRICE IS NOT NULL OR
  CLVL_QUANTITY IS NOT NULL OR
  CLVL_EXTENDED_AMT IS NOT NULL OR
  TOPLVL_OPERAND_VAL IS NOT NULL OR
  TOPLVL_QUANTITY IS NOT NULL OR
  TOPLVL_ADJ_PRICE IS NOT NULL OR
  TOPLVL_PRICE_QTY IS NOT NULL OR
  AVERAGING_INTERVAL IS NOT NULL OR
  MINIMUM_QUANTITY IS NOT NULL OR
  DEFAULT_QUANTITY IS NOT NULL OR
  FIXED_QUANTITY IS NOT NULL OR
  USAGE_DURATION IS NOT NULL OR
  BASE_READING IS NOT NULL OR
  -- OKC --
  CUST_ACCT_ID IS NOT NULL OR
  BILL_TO_SITE_USE_ID IS NOT NULL OR
  INV_RULE_ID IS NOT NULL OR
  SHIP_TO_SITE_USE_ID IS NOT NULL OR
  PAYMENT_TERM_ID IS NOT NULL OR
  -- COVERAGE CODE START --
  EXCEPTION_COV_ID IS NOT NULL OR
  PM_PROGRAM_ID IS NOT NULL OR
  PRICE_LIST_ID IS NOT NULL OR
  RCN_INCIDENT_SEVERITY_ID IS NOT NULL OR
  RCN_PDF_ID IS NOT NULL OR
  LIMIT_UOM_QUANTIFIED IS NOT NULL OR
  DISCOUNT_AMOUNT IS NOT NULL OR
  DISCOUNT_PERCENT IS NOT NULL OR
  -- COVERAGE CODE END ---
  LEVEL_AMOUNT IS NOT NULL;


-------------------------------------------------------------------------------
-- The following is the cursor opened if all the parameters passed are null  --
-------------------------------------------------------------------------------
CURSOR L_LINE_CSR1_nus(p_id_low in NUMBER , p_id_hig in NUMBER ) IS
SELECT * FROM (
SELECT  RGP.CLE_ID     CLE_ID
       ,RGP.DNZ_CHR_ID DNZ_CHR_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)))
               DISCOUNT_LIST
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)))
               ACCT_RULE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)))
               CC_BANK_ACCT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)))
               GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)))
               TAX_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)))
               TAX_CODE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)))
               TAX_EXEMPTION_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)))
               CLVL_LIST_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)))
               CLVL_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)))
               CLVL_EXTENDED_AMT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION4)))
               LINE_LIST_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)))
               TOPLVL_OPERAND_VAL
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)))
               TOPLVL_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)))
               TOPLVL_ADJ_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)))
               TOPLVL_PRICE_QTY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)))
               AVERAGING_INTERVAL
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)))
               MINIMUM_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)))
               DEFAULT_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)))
               FIXED_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)))
               USAGE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)))
               BASE_READING
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)))
               CUST_ACCT_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)))
               BILL_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)))
               INV_RULE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)))
               SHIP_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)))
               PAYMENT_TERM_ID --OKC
        ----------------------------- COVERAGE CODE START -------------------------------------------------
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)))
               EXCEPTION_COV_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)))
               PM_PROGRAM_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PRE',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PRE',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PRE',RUL.OBJECT1_ID1)))
               PRICE_LIST_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)))
               RCN_INCIDENT_SEVERITY_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)))
               RCN_PDF_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)))
               LIMIT_UOM_QUANTIFIED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)))
               DISCOUNT_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)))
               DISCOUNT_PERCENT
        ----------------------------- COVERAGE CODE END ----------------------------------------------------
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)))
               LEVEL_AMOUNT
  FROM OKC_RULE_GROUPS_B RGP
     , OKC_RULES_B RUL
 WHERE RGP.ID  = RUL.RGP_ID
   AND RUL.RULE_INFORMATION_CATEGORY IN ('DST','ARL','CCR','GPR','IRT','TAX','IBR','PDL','QRE','SLH','CAN','BTO','IRE','LRT','STO','PTR',
                                         'ECE','PMP','DST','RCN','RSN','LMT','PRE','SLL')
   AND RGP.CLE_ID IS NOT NULL
   AND RGP.RGD_CODE = 'SVC_K'
   AND RGP.DNZ_CHR_ID = RUL.DNZ_CHR_ID
   AND RGP.ID BETWEEN P_ID_LOW  AND P_ID_HIG
 GROUP BY RGP.CLE_ID ,RGP.DNZ_CHR_ID )
WHERE   DISCOUNT_LIST IS NOT NULL OR
  ACCT_RULE_ID IS NOT NULL OR
  CC_BANK_ACCT_ID IS NOT NULL OR
  GRACE_DURATION IS NOT NULL OR
  TAX_AMOUNT IS NOT NULL OR
  TAX_CODE IS NOT NULL OR
  TAX_EXEMPTION_ID IS NOT NULL OR
  CLVL_LIST_PRICE IS NOT NULL OR
  CLVL_QUANTITY IS NOT NULL OR
  CLVL_EXTENDED_AMT IS NOT NULL OR
  TOPLVL_OPERAND_VAL IS NOT NULL OR
  TOPLVL_QUANTITY IS NOT NULL OR
  TOPLVL_ADJ_PRICE IS NOT NULL OR
  TOPLVL_PRICE_QTY IS NOT NULL OR
  AVERAGING_INTERVAL IS NOT NULL OR
  MINIMUM_QUANTITY IS NOT NULL OR
  DEFAULT_QUANTITY IS NOT NULL OR
  FIXED_QUANTITY IS NOT NULL OR
  USAGE_DURATION IS NOT NULL OR
  BASE_READING IS NOT NULL OR
  -- OKC --
  CUST_ACCT_ID IS NOT NULL OR
  BILL_TO_SITE_USE_ID IS NOT NULL OR
  INV_RULE_ID IS NOT NULL OR
  SHIP_TO_SITE_USE_ID IS NOT NULL OR
  PAYMENT_TERM_ID IS NOT NULL OR
  -- COVERAGE CODE START --
  EXCEPTION_COV_ID IS NOT NULL OR
  PM_PROGRAM_ID IS NOT NULL OR
  PRICE_LIST_ID IS NOT NULL OR
  RCN_INCIDENT_SEVERITY_ID IS NOT NULL OR
  RCN_PDF_ID IS NOT NULL OR
  LIMIT_UOM_QUANTIFIED IS NOT NULL OR
  DISCOUNT_AMOUNT IS NOT NULL OR
  DISCOUNT_PERCENT IS NOT NULL OR
  -- COVERAGE CODE END ---
  LEVEL_AMOUNT IS NOT NULL ;

 -------------------------------------------------------------------------------
-- The following is the cursor opened if any of the following parameters are --
-- passed to the concurrent request                                          --
-- 1. p_status
-- 2. p_org_id
-------------------------------------------------------------------------------
CURSOR L_LINE_CSR2_nus(p_id_low in NUMBER , p_id_hig in NUMBER  , p_status in VARCHAR2 , p_org_id in NUMBER ) IS
SELECT * FROM (
SELECT  RGP.CLE_ID     CLE_ID
       ,RGP.DNZ_CHR_ID DNZ_CHR_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)))
               DISCOUNT_LIST
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)))
               ACCT_RULE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)))
               CC_BANK_ACCT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)))
               GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)))
               TAX_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)))
               TAX_CODE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)))
               TAX_EXEMPTION_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)))
               CLVL_LIST_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)))
               CLVL_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)))
               CLVL_EXTENDED_AMT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION4)))
               LINE_LIST_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)))
               TOPLVL_OPERAND_VAL
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)))
               TOPLVL_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)))
               TOPLVL_ADJ_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)))
               TOPLVL_PRICE_QTY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)))
               AVERAGING_INTERVAL
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)))
               MINIMUM_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)))
               DEFAULT_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)))
               FIXED_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)))
               USAGE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)))
               BASE_READING
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)))
               CUST_ACCT_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)))
               BILL_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)))
               INV_RULE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)))
               SHIP_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)))
               PAYMENT_TERM_ID --OKC
        ----------------------------- COVERAGE CODE START -------------------------------------------------
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)))
               EXCEPTION_COV_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)))
               PM_PROGRAM_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PRE',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PRE',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PRE',RUL.OBJECT1_ID1)))
               PRICE_LIST_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)))
               RCN_INCIDENT_SEVERITY_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)))
               RCN_PDF_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)))
               LIMIT_UOM_QUANTIFIED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)))
               DISCOUNT_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)))
               DISCOUNT_PERCENT
        ----------------------------- COVERAGE CODE END ----------------------------------------------------
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)))
               LEVEL_AMOUNT
  FROM OKC_RULE_GROUPS_B RGP
     , OKC_RULES_B RUL
     , OKC_K_HEADERS_B HDR
 WHERE RGP.ID  = RUL.RGP_ID
   AND RUL.RULE_INFORMATION_CATEGORY IN ('DST','ARL','CCR','GPR','IRT','TAX','IBR','PDL','QRE','SLH','CAN','BTO','IRE','LRT','STO','PTR',
                                         'ECE','PMP','DST','RCN','RSN','LMT','PRE','SLL')
   AND RGP.CLE_ID IS NOT NULL
   AND RGP.RGD_CODE = 'SVC_K'
   AND RGP.DNZ_CHR_ID = RUL.DNZ_CHR_ID
   AND HDR.STS_CODE = NVL(P_STATUS,HDR.STS_CODE)
   AND HDR.AUTHORING_ORG_ID = NVL(P_ORG_ID,HDR.AUTHORING_ORG_ID)
   AND HDR.ID = RGP.DNZ_CHR_ID
   AND HDR.ID = RUL.DNZ_CHR_ID
   AND HDR.ID BETWEEN P_ID_LOW  AND P_ID_HIG
 GROUP BY RGP.CLE_ID ,RGP.DNZ_CHR_ID )
WHERE   DISCOUNT_LIST IS NOT NULL OR
  ACCT_RULE_ID IS NOT NULL OR
  CC_BANK_ACCT_ID IS NOT NULL OR
  GRACE_DURATION IS NOT NULL OR
  TAX_AMOUNT IS NOT NULL OR
  TAX_CODE IS NOT NULL OR
  TAX_EXEMPTION_ID IS NOT NULL OR
  CLVL_LIST_PRICE IS NOT NULL OR
  CLVL_QUANTITY IS NOT NULL OR
  CLVL_EXTENDED_AMT IS NOT NULL OR
  TOPLVL_OPERAND_VAL IS NOT NULL OR
  TOPLVL_QUANTITY IS NOT NULL OR
  TOPLVL_ADJ_PRICE IS NOT NULL OR
  TOPLVL_PRICE_QTY IS NOT NULL OR
  AVERAGING_INTERVAL IS NOT NULL OR
  MINIMUM_QUANTITY IS NOT NULL OR
  DEFAULT_QUANTITY IS NOT NULL OR
  FIXED_QUANTITY IS NOT NULL OR
  USAGE_DURATION IS NOT NULL OR
  BASE_READING IS NOT NULL OR
  -- OKC --
  CUST_ACCT_ID IS NOT NULL OR
  BILL_TO_SITE_USE_ID IS NOT NULL OR
  INV_RULE_ID IS NOT NULL OR
  SHIP_TO_SITE_USE_ID IS NOT NULL OR
  PAYMENT_TERM_ID IS NOT NULL OR
  -- COVERAGE CODE START --
  EXCEPTION_COV_ID IS NOT NULL OR
  PM_PROGRAM_ID IS NOT NULL OR
  PRICE_LIST_ID IS NOT NULL OR
  RCN_INCIDENT_SEVERITY_ID IS NOT NULL OR
  RCN_PDF_ID IS NOT NULL OR
  LIMIT_UOM_QUANTIFIED IS NOT NULL OR
  DISCOUNT_AMOUNT IS NOT NULL OR
  DISCOUNT_PERCENT IS NOT NULL OR
  -- COVERAGE CODE END ---
  LEVEL_AMOUNT IS NOT NULL;


----------------------------------------------------------------------------
-- Cursor to populate data in OKS_RULE_ERROR table .                      --
----------------------------------------------------------------------------
CURSOR L_LINE_DTLS_CSR (P_CLE_ID  IN NUMBER ,P_HDR_ID IN NUMBER, P_CATEGORY IN VARCHAR2 ) IS
SELECT HDR.CONTRACT_NUMBER
     , HDR.CONTRACT_NUMBER_MODIFIER
     , LIN.LINE_NUMBER
     , RUL.ID
     , RGP.ID RGP_ID
 FROM  OKC_K_HEADERS_B HDR
     , OKC_RULE_GROUPS_B RGP
     , OKC_RULES_B RUL
     , OKC_K_LINES_B LIN
WHERE HDR.ID = P_HDR_ID
  AND LIN.ID= P_CLE_ID
  AND RGP.DNZ_CHR_ID = P_HDR_ID
  AND RGP.DNZ_CHR_ID = RUL.DNZ_CHR_ID
  AND RGP.CLE_ID = LIN.ID
  AND RGP.ID = RUL.RGP_ID
  AND RUL.RULE_INFORMATION_CATEGORY = P_CATEGORY ;

L_LINE_DTLS_REC L_LINE_DTLS_CSR%ROWTYPE;
----------------------------------------------------------------------------

BEGIN
  FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');
  FND_FILE.PUT_LINE(FND_FILE.LOG ,'--------------Start of Sub request for Line Rule Data Validation------------------');
  FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');
  FND_FILE.PUT_LINE (FND_FILE.LOG, '----------Parameters passed to the Subrequest Request are as follows  -----------');
  FND_FILE.PUT_LINE (FND_FILE.LOG, 'P_STATUS ==============> '||P_STATUS);
  FND_FILE.PUT_LINE (FND_FILE.LOG, 'P_ORG_ID ==============> '||P_ORG_ID);
  FND_FILE.PUT_LINE (FND_FILE.LOG, 'P_BATCH_SIZE  =========> '||P_BATCH_SIZE);
  FND_FILE.PUT_LINE (FND_FILE.LOG, 'P_ID_LOW ==============> '||p_ID_LOW);
  FND_FILE.PUT_LINE (FND_FILE.LOG, 'P_ID_HIG ==============> '||P_ID_HIG);
  FND_FILE.PUT_LINE (FND_FILE.LOG, '---------------------------------------------------------------------------------');


--  FND_FILE.PUT_LINE(FND_FILE.OUTPUT ,'-----------------------------------------------------------------------');
--  FND_FILE.PUT_LINE(FND_FILE.OUTPUT ,'                  Start of Line Validation Report for                  ');
--  FND_FILE.PUT_LINE(FND_FILE.OUTPUT ,'-----------------------------------------------------------------------');
--  FND_FILE.PUT_LINE(FND_FILE.OUTPUT ,' Contract Number      |Modifier                |Line Number    |Rule Category     |Attribute Name       |Current Value       ');

  if(p_us_yn = 'true') THEN
    l_us_yn := true;
  else
    l_us_yn := false;
  end if;

  if(l_us_yn) then
    If ( p_status is null and p_org_id is null  )  then
       OPEN L_LINE_CSR1(p_id_low , p_id_hig);
       FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor opened is L_LINE_CSR1');
    Else
       OPEN L_LINE_CSR2(p_id_low , p_id_hig , p_status , p_org_id);
       FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor opened is L_LINE_CSR2');
    End IF;
  else
    If ( p_status is null and p_org_id is null  )  then
       OPEN L_LINE_CSR1_nus(p_id_low , p_id_hig);
       FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor opened is L_LINE_CSR1_nus');
    Else
       OPEN L_LINE_CSR2_nus(p_id_low , p_id_hig , p_status , p_org_id);
       FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor opened is L_LINE_CSR2_nus');
    End IF;

  end if;


  Loop

     ------------------------------------------------------------------------------------
    --Start of If to choose the cursor to be fetched --
  if(l_us_yn) then
    If (p_status is null and p_org_id is null )  then
        FETCH L_LINE_CSR1 bulk collect into
		CLE_ID,
		DNZ_CHR_ID,
		DISCOUNT_LIST_CHR,
		ACCT_RULE_ID_CHR,
		--CC_EXPIRY_DATE_CHR,
		CC_BANK_ACCT_ID_CHR,
		GRACE_DURATION_CHR,
		TAX_AMOUNT_CHR,
		TAX_CODE_CHR,
		TAX_EXEMPTION_ID_CHR,
		--IB_TRANS_DATE_CHR,
		CLVL_LIST_PRICE_CHR,
		CLVL_QUANTITY_CHR,
		CLVL_EXTENDED_AMT_CHR,
                LINE_LIST_PRICE_CHR,
		TOPLVL_OPERAND_VAL_CHR,
		TOPLVL_QUANTITY_CHR,
		TOPLVL_ADJ_PRICE_CHR,
		TOPLVL_PRICE_QTY_CHR,
		AVERAGING_INTERVAL_CHR,
		MINIMUM_QUANTITY_CHR,
		DEFAULT_QUANTITY_CHR,
		FIXED_QUANTITY_CHR,
		USAGE_DURATION_CHR,
        	BASE_READING_CHR,
		CUST_ACCT_ID_CHR,
		BILL_TO_SITE_USE_ID_CHR,
		INV_RULE_ID_CHR,
		SHIP_TO_SITE_USE_ID_CHR,
		PAYMENT_TERM_ID_CHR	   ,
            -----------------------------------
		EXCEPTION_COV_ID_chr,
		PM_PROGRAM_ID_chr,
		PRICE_LIST_ID_chr,
		RCN_INCIDENT_SEVERITY_ID_chr,
		RCN_PDF_ID_chr,
		LIMIT_UOM_QUANTIFIED_chr,
	        DISCOUNT_AMOUNT_chr,
		DISCOUNT_PERCENT_chr,
	    -----------------------------------
	        --LEVEL_PERIODS_CHR,
		--UOM_PER_PERIOD_CHR,
		--ADVANCE_PERIODS_CHR,
		LEVEL_AMOUNT_CHR
		--INVOICE_OFFSET_DAYS_CHR,
		--INTERFACE_OFFSET_DAYS_CHR
            LIMIT p_batch_size; --OKC

      FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor fetched is L_LINE_CSR1');
      FND_FILE.PUT_LINE(FND_FILE.LOG , 'FETCHED ROW COUNT = '|| CLE_ID.COUNT );
      EXIT WHEN CLE_ID.COUNT = 0 ;

    Else
        FETCH L_LINE_CSR2 bulk collect into
		CLE_ID,
		DNZ_CHR_ID,
		DISCOUNT_LIST_CHR,
		ACCT_RULE_ID_CHR,
		--CC_EXPIRY_DATE_CHR,
		CC_BANK_ACCT_ID_CHR,
		GRACE_DURATION_CHR,
		TAX_AMOUNT_CHR,
		TAX_CODE_CHR,
		TAX_EXEMPTION_ID_CHR,
		--IB_TRANS_DATE_CHR,
		CLVL_LIST_PRICE_CHR,
		CLVL_QUANTITY_CHR,
		CLVL_EXTENDED_AMT_CHR,
                LINE_LIST_PRICE_CHR,
		TOPLVL_OPERAND_VAL_CHR,
		TOPLVL_QUANTITY_CHR,
		TOPLVL_ADJ_PRICE_CHR,
		TOPLVL_PRICE_QTY_CHR,
		AVERAGING_INTERVAL_CHR,
		MINIMUM_QUANTITY_CHR,
		DEFAULT_QUANTITY_CHR,
		FIXED_QUANTITY_CHR,
		USAGE_DURATION_CHR,
        	BASE_READING_CHR,
		CUST_ACCT_ID_CHR,
		BILL_TO_SITE_USE_ID_CHR,
		INV_RULE_ID_CHR,
		SHIP_TO_SITE_USE_ID_CHR,
		PAYMENT_TERM_ID_CHR	   ,
            -----------------------------------
		EXCEPTION_COV_ID_chr,
		PM_PROGRAM_ID_chr,
		PRICE_LIST_ID_chr,
		RCN_INCIDENT_SEVERITY_ID_chr,
		RCN_PDF_ID_chr,
		LIMIT_UOM_QUANTIFIED_chr,
		DISCOUNT_AMOUNT_chr,
		DISCOUNT_PERCENT_chr,
	    -----------------------------------
	        --LEVEL_PERIODS_CHR,
		--UOM_PER_PERIOD_CHR,
		--ADVANCE_PERIODS_CHR,
		LEVEL_AMOUNT_CHR
		--INVOICE_OFFSET_DAYS_CHR,
		--INTERFACE_OFFSET_DAYS_CHR
		LIMIT p_batch_size; --OKC

      FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor fetched is L_LINE_CSR2');
      FND_FILE.PUT_LINE(FND_FILE.LOG , 'FETCHED ROW COUNT = '|| CLE_ID.COUNT );
      EXIT WHEN CLE_ID.COUNT = 0 ;

    End IF;
    --End of If to choose the cursor to be fetched --

   else
    If (p_status is null and p_org_id is null )  then
        FETCH L_LINE_CSR1_nus bulk collect into
		CLE_ID,
		DNZ_CHR_ID,
		DISCOUNT_LIST_CHR,
		ACCT_RULE_ID_CHR,
		--CC_EXPIRY_DATE_CHR,
		CC_BANK_ACCT_ID_CHR,
		GRACE_DURATION_CHR,
		TAX_AMOUNT_CHR,
		TAX_CODE_CHR,
		TAX_EXEMPTION_ID_CHR,
		--IB_TRANS_DATE_CHR,
		CLVL_LIST_PRICE_CHR,
		CLVL_QUANTITY_CHR,
		CLVL_EXTENDED_AMT_CHR,
                LINE_LIST_PRICE_CHR,
		TOPLVL_OPERAND_VAL_CHR,
		TOPLVL_QUANTITY_CHR,
		TOPLVL_ADJ_PRICE_CHR,
		TOPLVL_PRICE_QTY_CHR,
		AVERAGING_INTERVAL_CHR,
		MINIMUM_QUANTITY_CHR,
		DEFAULT_QUANTITY_CHR,
		FIXED_QUANTITY_CHR,
		USAGE_DURATION_CHR,
        	BASE_READING_CHR,
		CUST_ACCT_ID_CHR,
		BILL_TO_SITE_USE_ID_CHR,
		INV_RULE_ID_CHR,
		SHIP_TO_SITE_USE_ID_CHR,
		PAYMENT_TERM_ID_CHR	   ,
            -----------------------------------
		EXCEPTION_COV_ID_chr,
		PM_PROGRAM_ID_chr,
		PRICE_LIST_ID_chr,
		RCN_INCIDENT_SEVERITY_ID_chr,
		RCN_PDF_ID_chr,
		LIMIT_UOM_QUANTIFIED_chr,
	        DISCOUNT_AMOUNT_chr,
		DISCOUNT_PERCENT_chr,
	    -----------------------------------
	        --LEVEL_PERIODS_CHR,
		--UOM_PER_PERIOD_CHR,
		--ADVANCE_PERIODS_CHR,
		LEVEL_AMOUNT_CHR
		--INVOICE_OFFSET_DAYS_CHR,
		--INTERFACE_OFFSET_DAYS_CHR
            LIMIT p_batch_size; --OKC

      FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor fetched is L_LINE_CSR1');
      FND_FILE.PUT_LINE(FND_FILE.LOG , 'FETCHED ROW COUNT = '|| CLE_ID.COUNT );
      EXIT WHEN CLE_ID.COUNT = 0 ;

    Else
        FETCH L_LINE_CSR2_nus bulk collect into
		CLE_ID,
		DNZ_CHR_ID,
		DISCOUNT_LIST_CHR,
		ACCT_RULE_ID_CHR,
		--CC_EXPIRY_DATE_CHR,
		CC_BANK_ACCT_ID_CHR,
		GRACE_DURATION_CHR,
		TAX_AMOUNT_CHR,
		TAX_CODE_CHR,
		TAX_EXEMPTION_ID_CHR,
		--IB_TRANS_DATE_CHR,
		CLVL_LIST_PRICE_CHR,
		CLVL_QUANTITY_CHR,
		CLVL_EXTENDED_AMT_CHR,
                LINE_LIST_PRICE_CHR,
		TOPLVL_OPERAND_VAL_CHR,
		TOPLVL_QUANTITY_CHR,
		TOPLVL_ADJ_PRICE_CHR,
		TOPLVL_PRICE_QTY_CHR,
		AVERAGING_INTERVAL_CHR,
		MINIMUM_QUANTITY_CHR,
		DEFAULT_QUANTITY_CHR,
		FIXED_QUANTITY_CHR,
		USAGE_DURATION_CHR,
        	BASE_READING_CHR,
		CUST_ACCT_ID_CHR,
		BILL_TO_SITE_USE_ID_CHR,
		INV_RULE_ID_CHR,
		SHIP_TO_SITE_USE_ID_CHR,
		PAYMENT_TERM_ID_CHR	   ,
            -----------------------------------
		EXCEPTION_COV_ID_chr,
		PM_PROGRAM_ID_chr,
		PRICE_LIST_ID_chr,
		RCN_INCIDENT_SEVERITY_ID_chr,
		RCN_PDF_ID_chr,
		LIMIT_UOM_QUANTIFIED_chr,
		DISCOUNT_AMOUNT_chr,
		DISCOUNT_PERCENT_chr,
	    -----------------------------------
	        --LEVEL_PERIODS_CHR,
		--UOM_PER_PERIOD_CHR,
		--ADVANCE_PERIODS_CHR,
		LEVEL_AMOUNT_CHR
		--INVOICE_OFFSET_DAYS_CHR,
		--INTERFACE_OFFSET_DAYS_CHR
		LIMIT p_batch_size; --OKC

      FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor fetched is L_LINE_CSR2');
      FND_FILE.PUT_LINE(FND_FILE.LOG , 'FETCHED ROW COUNT = '|| CLE_ID.COUNT );
      EXIT WHEN CLE_ID.COUNT = 0 ;

    End IF;
    --End of If to choose the cursor to be fetched --

   end if;
    ------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------
    -- Begin of code to validate data type .

    FOR i in CLE_ID.FIRST..CLE_ID.LAST
    LOOP
       --1. Validation for DST rule .
       BEGIN
          DISCOUNT_LIST(1)      := DISCOUNT_LIST_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'DST') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DISCOUNT_LIST');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'DST'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,DISCOUNT_LIST_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || DISCOUNT_LIST_CHR(i) );
       END;

       --2. Validation for ARL rule .
       BEGIN
          ACCT_RULE_ID(1)      := ACCT_RULE_ID_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'ARL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_ACCT_RULE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER  ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'ARL'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,ACCT_RULE_ID_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(i) );
       END;

       --3. Validation for CCR rule .
       BEGIN
          CC_BANK_ACCT_ID(1)      := CC_BANK_ACCT_ID_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'CCR') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CC_BANK_ACCT_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'CCR'    ,'RULE_INFORMATION3'   ,L_ATTRIBUTE_NAME         ,CC_BANK_ACCT_ID_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION3' ||L_ATTRIBUTE_NAME || CC_BANK_ACCT_ID_CHR(i) );
       END;


       --4. Validation for GPR rule .
       BEGIN
          GRACE_DURATION(1)      := GRACE_DURATION_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'GPR') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_GRACE_DURATION');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'GPR'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,GRACE_DURATION_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || GRACE_DURATION_CHR(i) );
       END;
       --5. Validation for IRT rule .
       BEGIN
          TAX_AMOUNT(1)      := TAX_AMOUNT_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'IRT') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_AMOUNT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'IRT'    ,'RULE_INFORMATION4'   ,L_ATTRIBUTE_NAME         ,TAX_AMOUNT_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || TAX_AMOUNT_CHR(i) );
       END;

       --6. Validation for TAX rule .
       BEGIN
          TAX_CODE(1)      := TAX_CODE_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'TAX') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_CODE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'TAX'    ,'OBJECT2_ID1'   ,L_ATTRIBUTE_NAME         ,TAX_CODE_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT2_ID1' ||L_ATTRIBUTE_NAME || TAX_CODE_CHR(i) );
       END;

       --7. Validation for TAX rule .
       BEGIN
          TAX_EXEMPTION_ID(1)      := TAX_EXEMPTION_ID_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'TAX') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_EXEMPTION_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'TAX'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,TAX_EXEMPTION_ID_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || TAX_EXEMPTION_ID_CHR(i) );
       END;

       --8. Validation for PDL rule .
       BEGIN
          CLVL_LIST_PRICE(1)      := CLVL_LIST_PRICE_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CLVL_LIST_PRICE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PDL'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,CLVL_LIST_PRICE_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || CLVL_LIST_PRICE_CHR(i) );
       END;

       --9. Validation for PDL rule .
       BEGIN
          CLVL_QUANTITY(1)      := CLVL_QUANTITY_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CLVL_QUANTITY');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PDL'    ,'RULE_INFORMATION2'   ,L_ATTRIBUTE_NAME         ,CLVL_QUANTITY_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || CLVL_QUANTITY_CHR(i) );
       END;

       --10. Validation for PDL rule .
       BEGIN
          CLVL_EXTENDED_AMT(1)      := CLVL_EXTENDED_AMT_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CLVL_EXTENDED_AMT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PDL'    ,'RULE_INFORMATION3'   ,L_ATTRIBUTE_NAME         ,CLVL_EXTENDED_AMT_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION3' ||L_ATTRIBUTE_NAME || CLVL_EXTENDED_AMT_CHR(i) );
       END;

       --11. Validation for PDL rule .
       BEGIN
          TOPLVL_OPERAND_VAL(1)      := TOPLVL_OPERAND_VAL_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_OPERAND_VAL');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PDL'    ,'RULE_INFORMATION6'   ,L_ATTRIBUTE_NAME         ,TOPLVL_OPERAND_VAL_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION6' ||L_ATTRIBUTE_NAME || TOPLVL_OPERAND_VAL_CHR(i) );
       END;

       --12. Validation for PDL rule .
       BEGIN
          TOPLVL_QUANTITY(1)      := TOPLVL_QUANTITY_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_QUANTITY');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PDL'    ,'RULE_INFORMATION8'   ,L_ATTRIBUTE_NAME         ,TOPLVL_QUANTITY_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION8' ||L_ATTRIBUTE_NAME || TOPLVL_QUANTITY_CHR(i) );
       END;

       --13. Validation for PDL rule .
       BEGIN
          TOPLVL_ADJ_PRICE(1)      := TOPLVL_ADJ_PRICE_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_ADJ_PRICE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PDL'    ,'RULE_INFORMATION10'   ,L_ATTRIBUTE_NAME         ,TOPLVL_ADJ_PRICE_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION10' ||L_ATTRIBUTE_NAME || TOPLVL_ADJ_PRICE_CHR(i) );
       END;

       --14. Validation for PDL rule .
       BEGIN
          TOPLVL_PRICE_QTY(1)      := TOPLVL_PRICE_QTY_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_PRICE_QTY');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PDL'    ,'RULE_INFORMATION13'   ,L_ATTRIBUTE_NAME         ,TOPLVL_PRICE_QTY_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION13' ||L_ATTRIBUTE_NAME || TOPLVL_PRICE_QTY_CHR(i) );
       END;

       --15. Validation for QRE rule .
       BEGIN
          AVERAGING_INTERVAL(1)      := AVERAGING_INTERVAL_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'QRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_AVERAGING_INTERVAL');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'QRE'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,AVERAGING_INTERVAL_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || AVERAGING_INTERVAL_CHR(i) );
       END;

       --16. Validation for QRE rule .
       BEGIN
          MINIMUM_QUANTITY(1)      := MINIMUM_QUANTITY_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'QRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_MINIMUM_QUANTITY');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'QRE'    ,'RULE_INFORMATION4'   ,L_ATTRIBUTE_NAME         ,MINIMUM_QUANTITY_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || MINIMUM_QUANTITY_CHR(i) );
       END;


       --17. Validation for QRE rule .
       BEGIN
          DEFAULT_QUANTITY(1)      := DEFAULT_QUANTITY_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'QRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DEFAULT_QUANTITY');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'QRE'    ,'RULE_INFORMATION5'   ,L_ATTRIBUTE_NAME         ,DEFAULT_QUANTITY_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION5' ||L_ATTRIBUTE_NAME || DEFAULT_QUANTITY_CHR(i) );
       END;

       --18. Validation for QRE rule .
       BEGIN
          FIXED_QUANTITY(1)      := FIXED_QUANTITY_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'QRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_FIXED_QUANTITY');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'QRE'    ,'RULE_INFORMATION7'   ,L_ATTRIBUTE_NAME         ,FIXED_QUANTITY_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION7' ||L_ATTRIBUTE_NAME || FIXED_QUANTITY_CHR(i) );
       END;

       --19. Validation for QRE rule .
       BEGIN
          USAGE_DURATION(1)      := USAGE_DURATION_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'QRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_USAGE_DURATION');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'QRE'    ,'RULE_INFORMATION8'   ,L_ATTRIBUTE_NAME         ,USAGE_DURATION_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION8' ||L_ATTRIBUTE_NAME || USAGE_DURATION_CHR(i) );
       END;

       --20. Validation for QRE rule .
       BEGIN
          BASE_READING(1)      := BASE_READING_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'QRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BASE_READING');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'QRE'    ,'RULE_INFORMATION12'   ,L_ATTRIBUTE_NAME         ,BASE_READING_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION13' ||L_ATTRIBUTE_NAME || BASE_READING_CHR(i) );
       END;

       --21. Validation for CAN rule .
       BEGIN
          CUST_ACCT_ID(1)      := CUST_ACCT_ID_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'CAN') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CUST_ACCT_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'CAN'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,CUST_ACCT_ID_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || CUST_ACCT_ID_CHR(i) );
       END;

       --22. Validation for BTO rule .
       BEGIN
          BILL_TO_SITE_USE_ID(1)      := BILL_TO_SITE_USE_ID_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'BTO') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BILL_TO_SITE_USE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'BTO'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,BILL_TO_SITE_USE_ID_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || BILL_TO_SITE_USE_ID_CHR(i) );
       END;

       --23. Validation for IRE rule .
       BEGIN
          INV_RULE_ID(1)      := INV_RULE_ID_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'IRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_INV_RULE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'IRE'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,INV_RULE_ID_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || INV_RULE_ID_CHR(i) );
       END;

       --24. Validation for STO rule .
       BEGIN
          SHIP_TO_SITE_USE_ID(1)      := SHIP_TO_SITE_USE_ID_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'STO') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_SHIP_TO_SITE_USE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'STO'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,SHIP_TO_SITE_USE_ID_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || SHIP_TO_SITE_USE_ID_CHR(i) );
       END;

       --25. Validation for PTR rule .
       BEGIN
          PAYMENT_TERM_ID(1)      := PAYMENT_TERM_ID_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'PTR') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PAYMENT_TERM_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PTR'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,PAYMENT_TERM_ID_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || PAYMENT_TERM_ID_CHR(i) );
       END;

/*
       --26. Validation for CCR rule .
       BEGIN
          CC_EXPIRY_DATE(1)      := CC_EXPIRY_DATE_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'CCR') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CC_EXPIRY_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'CCR'    ,'RULE_INFORMATION2'   ,L_ATTRIBUTE_NAME         ,CC_EXPIRY_DATE_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || CC_EXPIRY_DATE_CHR(i) );
       END;
   */

  /*
       --27. Validation for IBR  rule .
       BEGIN
          IB_TRANS_DATE(1)      := IB_TRANS_DATE_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'IBR') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_IB_TRANS_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'IBR'    ,'RULE_INFORMATION2'   ,L_ATTRIBUTE_NAME         ,IB_TRANS_DATE_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || IB_TRANS_DATE_CHR(i) );
       END;
*/


    --28
       BEGIN
          EXCEPTION_COV_ID(1)      := EXCEPTION_COV_ID_chr(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'ECE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EXCEPTION_COV_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'ECE'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,EXCEPTION_COV_ID_chr(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || EXCEPTION_COV_ID_chr(i));
       END;
--29
       BEGIN
          PM_PROGRAM_ID(1)      := PM_PROGRAM_ID_chr(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'PMP') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PM_PROGRAM_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PMP'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,PM_PROGRAM_ID_chr(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || PM_PROGRAM_ID_chr(i));

       END;
--30
       BEGIN
          PRICE_LIST_ID(1)      := PRICE_LIST_ID_chr(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'PRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PRICE_LIST_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PRE'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,PRICE_LIST_ID_chr(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || PRICE_LIST_ID_chr(i));

       END;
--31
       BEGIN
          RCN_INCIDENT_SEVERITY_ID(1)      := RCN_INCIDENT_SEVERITY_ID_chr(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'RCN') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RCN_INCIDENT_SVR_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'RCN'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,RCN_INCIDENT_SEVERITY_ID_chr(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || RCN_INCIDENT_SEVERITY_ID_chr(i));

       END;
--32
       BEGIN
          RCN_PDF_ID(1)      := RCN_PDF_ID_chr(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'RCN') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RCN_PDF_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'RCN'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,RCN_PDF_ID_chr(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || RCN_PDF_ID_chr(i));

       END;
--33

       BEGIN
          LIMIT_UOM_QUANTIFIED(1)      := LIMIT_UOM_QUANTIFIED_chr(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'LMT') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_LIMIT_UOM_QUANTIFIED');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'LMT'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,LIMIT_UOM_QUANTIFIED_chr(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || LIMIT_UOM_QUANTIFIED_chr(i));

       END;
--34
       BEGIN
          DISCOUNT_AMOUNT(1)      := DISCOUNT_AMOUNT_chr(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'LMT') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DISCOUNT_AMOUNT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'LMT'    ,'RULE_INFORMATION2'   ,L_ATTRIBUTE_NAME         ,DISCOUNT_AMOUNT_chr(i),
                                       L_ERROR_MSG );
         -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || DISCOUNT_AMOUNT_chr(i));

       END;
--35
       BEGIN
          DISCOUNT_PERCENT(1)      := DISCOUNT_PERCENT_chr(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'LMT') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DISCOUNT_PERCENT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'LMT'    ,'RULE_INFORMATION4'   ,L_ATTRIBUTE_NAME         ,DISCOUNT_PERCENT_chr(i),
                                       L_ERROR_MSG );
         -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(i));

       END;

--35a
       BEGIN
          LINE_LIST_PRICE(1)      := LINE_LIST_PRICE_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_LINE_LIST_PRICE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'LMT'    ,'RULE_INFORMATION4'   ,L_ATTRIBUTE_NAME         ,LINE_LIST_PRICE_CHR(i),
                                       L_ERROR_MSG );
         -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || LINE_LIST_PRICE_CHR(i));

       END;
----------------------------------------------------------------------------------------------------------------------
--FOR SLL

/*
--36
       BEGIN
          LEVEL_PERIODS(1)      := LEVEL_PERIODS_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'SLL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_LEVEL_PERIODS');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'SLL'    ,'RULE_INFORMATION3'   ,L_ATTRIBUTE_NAME         ,LEVEL_PERIODS_CHR(i),
                                       L_ERROR_MSG );
         -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(i));

       END;
*/

/*
--37
       BEGIN
          UOM_PER_PERIOD(1)      := UOM_PER_PERIOD_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'SLL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_UOM_PER_PERIOD');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'SLL'    ,'RULE_INFORMATION4'   ,L_ATTRIBUTE_NAME         ,UOM_PER_PERIOD_CHR(i),
                                       L_ERROR_MSG );
         -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(i));

       END;
*/

/*
--38
       BEGIN
          ADVANCE_PERIODS(1)      := ADVANCE_PERIODS_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'SLL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_ADVANCE_PERIODS');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'SLL'    ,'RULE_INFORMATION5'   ,L_ATTRIBUTE_NAME         ,ADVANCE_PERIODS_CHR(i),
                                       L_ERROR_MSG );
         -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(i));

       END;
*/

--39
       BEGIN
          LEVEL_AMOUNT(1)      := LEVEL_AMOUNT_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'SLL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_LEVEL_AMOUNT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'SLL'    ,'RULE_INFORMATION6'   ,L_ATTRIBUTE_NAME         ,LEVEL_AMOUNT_CHR(i),
                                       L_ERROR_MSG );
         -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(i));

       END;

/*
--40
       BEGIN
          INVOICE_OFFSET_DAYS(1)      := INVOICE_OFFSET_DAYS_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'SLL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_INVOICE_OFFSET_DAYS');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'SLL'    ,'RULE_INFORMATION7'   ,L_ATTRIBUTE_NAME         ,INVOICE_OFFSET_DAYS_CHR(i),
                                       L_ERROR_MSG );
         -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(i));

       END;
*/

/*
--41
       BEGIN
          INTERFACE_OFFSET_DAYS(1)      := INTERFACE_OFFSET_DAYS_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'SLL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_INTERFACE_OFFSET_DAYS');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'SLL'    ,'RULE_INFORMATION8'   ,L_ATTRIBUTE_NAME         ,INTERFACE_OFFSET_DAYS_CHR(i),
                                       L_ERROR_MSG );
         -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(i));

       END;
*/

    End Loop;

     CLE_ID.DELETE;

    -- End of code to validate data type .
    ------------------------------------------------------------------------------------

  End Loop;

  If(L_LINE_CSR1%ISOPEN) THEN
    Close  L_LINE_CSR1;
  END IF;
  If(L_LINE_CSR2%ISOPEN) THEN
    Close  L_LINE_CSR2;
  End if;

  If(L_LINE_CSR1_nus%ISOPEN) THEN
    Close  L_LINE_CSR1_nus;
  END IF;
  If(L_LINE_CSR2_nus%ISOPEN) THEN
    Close  L_LINE_CSR2_nus;
  End if;


EXCEPTION
WHEN OTHERS THEN
  If(L_LINE_CSR1%ISOPEN) THEN
    Close  L_LINE_CSR1;
  END IF;
  If(L_LINE_CSR2%ISOPEN) THEN
    Close  L_LINE_CSR2;
  End if;
  If(L_LINE_CSR1_nus%ISOPEN) THEN
    Close  L_LINE_CSR1_nus;
  END IF;
  If(L_LINE_CSR2_nus%ISOPEN) THEN
    Close  L_LINE_CSR2_nus;
  End if;



END VALIDATE_LINE_RULE;

--------------------------------------------------------------------------------------------
--    This is the procedure called from VALIDATE_DATA1 to validate Line History rule data           --
--------------------------------------------------------------------------------------------

Procedure VALIDATE_LINE_HIST_RULE(
			    ERRBUF            OUT NOCOPY VARCHAR2 ,
                            RETCODE           OUT NOCOPY NUMBER ,
                            p_status          in VARCHAR2,
                            p_org_id          in NUMBER ,
                            p_batch_size      in NUMBER,
			    p_us_yn           in VARCHAR2,
                            p_id_low          in NUMBER,
                            p_id_hig          in NUMBER)
IS

Type l_num_tbl is table of  NUMBER         index  by BINARY_INTEGER ;
Type l_date_tbl is table of DATE           index  by BINARY_INTEGER ;
Type l_chr_tbl is table of  VARCHAR2(2000) index  by BINARY_INTEGER ;

--table types declared with existing rule name wherever applicable


CLE_ID                          l_num_tbl ;
MAJOR_VERSION                   l_num_tbl ;
DNZ_CHR_ID                      l_num_tbl ;
DISCOUNT_LIST                   l_num_tbl ;  --DST
ACCT_RULE_ID                    l_num_tbl ;  --ARL
PAYMENT_TYPE                    l_chr_tbl ;  --CCR
CC_NO                           l_chr_tbl ;  --CCR
CC_EXPIRY_DATE			l_date_tbl ; --CCR
CC_BANK_ACCT_ID			l_num_tbl ;  --CCR
CC_AUTH_CODE			l_chr_tbl ;  --CCR
GRACE_DURATION			l_num_tbl ;  --GPR
GRACE_PERIOD			l_chr_tbl ;  --GPR
INVOICE_TEXT			l_chr_tbl ;  --IRT
INV_PRINT_FLAG			l_chr_tbl ;  --IRT
PRICE_UOM			l_chr_tbl ;  --IRT
TAX_AMOUNT			l_num_tbl ;  --IRT
TAX_INCLUSIVE_YN		l_chr_tbl ;  --IRT
TAX_STATUS			l_chr_tbl ;  --TAX
TAX_CODE			l_num_tbl ;  --TAX
TAX_EXEMPTION_ID		l_num_tbl ;  --TAX
IB_TRANS_TYPE			l_chr_tbl ;  --IBR
IB_TRANS_DATE			l_date_tbl ; --IBR
IB_TRX_DETAILS			l_chr_tbl ;  --IBR
CLVL_LIST_PRICE			l_num_tbl ;  --PDL
CLVL_QUANTITY			l_num_tbl ;  --PDL
CLVL_EXTENDED_AMT		l_num_tbl ;  --PDL
TOPLVL_OPERAND_CODE		l_chr_tbl ;  --PDL
TOPLVL_OPERAND_VAL		l_num_tbl ;  --PDL
CLVL_UOM_CODE			l_chr_tbl ;  --PDL
TOPLVL_QUANTITY			l_num_tbl ;  --PDL
TOPLVL_UOM_CODE			l_chr_tbl ;  --PDL
TOPLVL_ADJ_PRICE		l_num_tbl ;  --PDL
TOPLVL_PRICE_QTY		l_num_tbl ;  --PDL
STATUS_TEXT			l_chr_tbl ;  --PDL
LINE_LIST_PRICE                 l_num_tbl ;  --PDL (OKC) rule_info4
AVERAGING_INTERVAL		l_num_tbl ;  --QRE
USAGE_PERIOD			l_chr_tbl ;  --QRE
SETTLEMENT_INTERVAL		l_chr_tbl ;  --QRE
MINIMUM_QUANTITY		l_num_tbl ;  --QRE
DEFAULT_QUANTITY		l_num_tbl ;  --QRE
AMCV_FLAG			l_chr_tbl ;  --QRE
FIXED_QUANTITY			l_num_tbl ;  --QRE
USAGE_DURATION			l_num_tbl ;  --QRE
LEVEL_YN			l_chr_tbl ;  --QRE
USAGE_TYPE			l_chr_tbl ;  --QRE
UOM_QUANTIFIED			l_chr_tbl ;  --QRE
BASE_READING			l_num_tbl ;  --QRE
USAGE_EST_METHOD		l_chr_tbl ;  --QRE
BILLING_SCHEDULE_TYPE		l_chr_tbl ;  --SLH
CUST_ACCT_ID			l_num_tbl ;  --CAN (OKC)
BILL_TO_SITE_USE_ID		l_num_tbl ;  --BTO (OKC)
INV_RULE_ID			l_num_tbl ;  --IRE (OKC)
LINE_RENEWAL_TYPE_CODE		l_chr_tbl ;  --REN (OKC)
SHIP_TO_SITE_USE_ID		l_num_tbl ;  --STO (OKC)
PAYMENT_TERM_ID			l_num_tbl ;  --PTR (OKC)

-- Following for SLL --
LEVEL_PERIODS			l_num_tbl ;
UOM_PER_PERIOD			l_num_tbl ;
ADVANCE_PERIODS			l_num_tbl ;
LEVEL_AMOUNT			l_num_tbl ;
INVOICE_OFFSET_DAYS		l_num_tbl ;
INTERFACE_OFFSET_DAYS		l_num_tbl ;


-- FOLLOWING ARE NUMBER FIELDS --
DISCOUNT_LIST_CHR               l_chr_tbl ;  --DST
ACCT_RULE_ID_CHR                l_chr_tbl ;  --ARL
CC_BANK_ACCT_ID_CHR		l_chr_tbl ;  --CCR
GRACE_DURATION_CHR		l_chr_tbl ;  --GPR
TAX_AMOUNT_CHR   		l_chr_tbl ;  --IRT
TAX_CODE_CHR    		l_chr_tbl ;  --TAX
TAX_EXEMPTION_ID_CHR		l_chr_tbl ;  --TAX
CLVL_LIST_PRICE_CHR		l_chr_tbl ;  --PDL
CLVL_QUANTITY_CHR		l_chr_tbl ;  --PDL
CLVL_EXTENDED_AMT_CHR   	l_chr_tbl ;  --PDL
TOPLVL_OPERAND_VAL_CHR		l_chr_tbl ;  --PDL
TOPLVL_QUANTITY_CHR		l_chr_tbl ;  --PDL
TOPLVL_ADJ_PRICE_CHR		l_chr_tbl ;  --PDL
TOPLVL_PRICE_QTY_CHR		l_chr_tbl ;  --PDL
AVERAGING_INTERVAL_CHR		l_chr_tbl ;  --QRE
MINIMUM_QUANTITY_CHR		l_chr_tbl ;  --QRE
DEFAULT_QUANTITY_CHR		l_chr_tbl ;  --QRE
FIXED_QUANTITY_CHR		l_chr_tbl ;  --QRE
USAGE_DURATION_CHR		l_chr_tbl ;  --QRE
BASE_READING_CHR		l_chr_tbl ;  --QRE
CUST_ACCT_ID_CHR		l_chr_tbl ;  --CAN (OKC)
BILL_TO_SITE_USE_ID_CHR		l_chr_tbl ;  --BTO (OKC)
INV_RULE_ID_CHR			l_chr_tbl ;  --IRE (OKC)
SHIP_TO_SITE_USE_ID_CHR		l_chr_tbl ;  --STO (OKC)
PAYMENT_TERM_ID_CHR		l_chr_tbl ;  --PTR (OKC)
LINE_LIST_PRICE_CHR             l_chr_tbl ;  --PDL (OKC) rule_info4

-- Following for Coverage --
EXCEPTION_COV_ID            l_num_tbl ;
PM_PROGRAM_ID               l_num_tbl ;
PRICE_LIST_ID               l_num_tbl ;
RCN_INCIDENT_SEVERITY_ID    l_num_tbl ;
RCN_PDF_ID                  l_num_tbl ;
LIMIT_UOM_QUANTIFIED        l_num_tbl ;
DISCOUNT_AMOUNT             l_num_tbl ;
DISCOUNT_PERCENT            l_num_tbl ;



---- FOLLOWING ARE NUMBER FIELDS For Coverage/PM----
EXCEPTION_COV_ID_chr            l_chr_tbl ;
PM_PROGRAM_ID_chr               l_chr_tbl ;
--DISCOUNT_LIST_chr               l_chr_tbl ;
PRICE_LIST_ID_chr               l_chr_tbl ;
RCN_INCIDENT_SEVERITY_ID_chr    l_chr_tbl ;
RCN_PDF_ID_chr                  l_chr_tbl ;
LIMIT_UOM_QUANTIFIED_chr        l_chr_tbl ;
DISCOUNT_AMOUNT_chr             l_chr_tbl ;
DISCOUNT_PERCENT_chr            l_chr_tbl ;

----- FOLLOWING ARE NUMBER FIELDS For SLL-----
LEVEL_PERIODS_CHR		l_chr_tbl ;
UOM_PER_PERIOD_CHR		l_chr_tbl ;
ADVANCE_PERIODS_CHR		l_chr_tbl ;
LEVEL_AMOUNT_CHR		l_chr_tbl ;
INVOICE_OFFSET_DAYS_CHR		l_chr_tbl ;
INTERFACE_OFFSET_DAYS_CHR	l_chr_tbl ;


-- FOLLOWING ARE DATE FIELDS --
CC_EXPIRY_DATE_CHR		l_chr_tbl ; --CCR
IB_TRANS_DATE_CHR		l_chr_tbl ; --IBR

--Misc Variables --
L_ATTRIBUTE_NAME              VARCHAR2(2000);
L_ERROR_MSG                   VARCHAR2(2000);

l_us_yn                       BOOLEAN;
-------------------------------------------------------------------------------
-- The following is the cursor opened if all the parameters passed are null  --
-------------------------------------------------------------------------------

CURSOR L_LINE_HIST_CSR1 (p_id_low in NUMBER , p_id_hig in NUMBER ) IS
SELECT * FROM (
SELECT  RGP.CLE_ID        CLE_ID
       ,RUL.MAJOR_VERSION MAJOR_VERSION
       ,RGP.DNZ_CHR_ID    DNZ_CHR_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)))
               DISCOUNT_LIST
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)))
               ACCT_RULE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)))
               CC_BANK_ACCT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)))
               GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)))
               TAX_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)))
               TAX_CODE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)))
               TAX_EXEMPTION_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)))
               CLVL_LIST_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)))
               CLVL_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)))
               CLVL_EXTENDED_AMT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION4)))
               LINE_LIST_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)))
               TOPLVL_OPERAND_VAL
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)))
               TOPLVL_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)))
               TOPLVL_ADJ_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)))
               TOPLVL_PRICE_QTY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)))
               AVERAGING_INTERVAL
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)))
               MINIMUM_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)))
               DEFAULT_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)))
               FIXED_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)))
               USAGE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)))
               BASE_READING
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)))
               CUST_ACCT_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)))
               BILL_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)))
               INV_RULE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)))
               SHIP_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)))
               PAYMENT_TERM_ID --OKC
        ----------------------------- COVERAGE CODE START -------------------------------------------------
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)))
               EXCEPTION_COV_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)))
               PM_PROGRAM_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PRE',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PRE',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PRE',RUL.OBJECT1_ID1)))
               PRICE_LIST_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)))
               RCN_INCIDENT_SEVERITY_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)))
               RCN_PDF_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)))
               LIMIT_UOM_QUANTIFIED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)))
               DISCOUNT_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)))
               DISCOUNT_PERCENT
        ----------------------------- COVERAGE CODE END ----------------------------------------------------
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)))
               LEVEL_AMOUNT
  FROM OKC_RULE_GROUPS_BH RGP
     , OKC_RULES_BH       RUL
 WHERE RGP.ID  = RUL.RGP_ID
   AND RGP.MAJOR_VERSION = RUL.MAJOR_VERSION
   AND RGP.DNZ_CHR_ID    = RUL.DNZ_CHR_ID
   AND RUL.RULE_INFORMATION_CATEGORY IN ('DST','ARL','CCR','GPR','IRT','TAX','IBR','PDL','QRE','SLH','CAN','BTO','IRE','LRT','STO','PTR',
                                         'ECE','PMP','DST','RCN','RSN','LMT','PRE','SLL')
   AND RGP.CLE_ID IS NOT NULL
   AND RGP.RGD_CODE = 'SVC_K'
   AND RGP.ID BETWEEN P_ID_LOW  AND P_ID_HIG
 GROUP BY RGP.CLE_ID ,RUL.MAJOR_VERSION,RGP.DNZ_CHR_ID )
WHERE DISCOUNT_LIST IS NOT NULL OR
      ACCT_RULE_ID IS NOT NULL OR
      CC_BANK_ACCT_ID IS NOT NULL OR
      GRACE_DURATION IS NOT NULL OR
      TAX_AMOUNT IS NOT NULL OR
      TAX_CODE IS NOT NULL OR
      TAX_EXEMPTION_ID IS NOT NULL OR
      CLVL_LIST_PRICE IS NOT NULL OR
      CLVL_QUANTITY IS NOT NULL OR
      CLVL_EXTENDED_AMT IS NOT NULL OR
      TOPLVL_OPERAND_VAL IS NOT NULL OR
      TOPLVL_QUANTITY IS NOT NULL OR
      TOPLVL_ADJ_PRICE IS NOT NULL OR
      TOPLVL_PRICE_QTY IS NOT NULL OR
      AVERAGING_INTERVAL IS NOT NULL OR
      MINIMUM_QUANTITY IS NOT NULL OR
      DEFAULT_QUANTITY IS NOT NULL OR
      FIXED_QUANTITY IS NOT NULL OR
      USAGE_DURATION IS NOT NULL OR
      BASE_READING IS NOT NULL OR
      -- OKC --
      CUST_ACCT_ID IS NOT NULL OR
      BILL_TO_SITE_USE_ID IS NOT NULL OR
      INV_RULE_ID IS NOT NULL OR
      SHIP_TO_SITE_USE_ID IS NOT NULL OR
      PAYMENT_TERM_ID IS NOT NULL OR
      -- COVERAGE CODE START --
      EXCEPTION_COV_ID IS NOT NULL OR
      PM_PROGRAM_ID IS NOT NULL OR
      PRICE_LIST_ID IS NOT NULL OR
      RCN_INCIDENT_SEVERITY_ID IS NOT NULL OR
      RCN_PDF_ID IS NOT NULL OR
      LIMIT_UOM_QUANTIFIED IS NOT NULL OR
      DISCOUNT_AMOUNT IS NOT NULL OR
      DISCOUNT_PERCENT IS NOT NULL OR
      -- COVERAGE CODE END ---
      LEVEL_AMOUNT IS NOT NULL ;

 -------------------------------------------------------------------------------
-- The following is the cursor opened if any of the following parameters are --
-- passed to the concurrent request                                          --
-- 1. p_status
-- 2. p_org_id
-------------------------------------------------------------------------------

CURSOR L_LINE_HIST_CSR2 (p_id_low in NUMBER , p_id_hig in NUMBER  , p_status in VARCHAR2 , p_org_id in NUMBER ) IS
SELECT * FROM (
SELECT  RGP.CLE_ID        CLE_ID
       ,RUL.MAJOR_VERSION MAJOR_VERSION
       ,RGP.DNZ_CHR_ID    DNZ_CHR_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)))
               DISCOUNT_LIST
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)))
               ACCT_RULE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)))
               CC_BANK_ACCT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)))
               GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)))
               TAX_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)))
               TAX_CODE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)))
               TAX_EXEMPTION_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)))
               CLVL_LIST_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)))
               CLVL_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)))
               CLVL_EXTENDED_AMT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION4)))
               LINE_LIST_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)))
               TOPLVL_OPERAND_VAL
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)))
               TOPLVL_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)))
               TOPLVL_ADJ_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)))
               TOPLVL_PRICE_QTY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)))
               AVERAGING_INTERVAL
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)))
               MINIMUM_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)))
               DEFAULT_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)))
               FIXED_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)))
               USAGE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)))
               BASE_READING
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)))
               CUST_ACCT_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)))
               BILL_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)))
               INV_RULE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)))
               SHIP_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)))
               PAYMENT_TERM_ID --OKC
        ----------------------------- COVERAGE CODE START -------------------------------------------------
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)))
               EXCEPTION_COV_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)))
               PM_PROGRAM_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PRE',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PRE',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PRE',RUL.OBJECT1_ID1)))
               PRICE_LIST_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)))
               RCN_INCIDENT_SEVERITY_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)))
               RCN_PDF_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)))
               LIMIT_UOM_QUANTIFIED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)))
               DISCOUNT_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)))
               DISCOUNT_PERCENT
        ----------------------------- COVERAGE CODE END ----------------------------------------------------
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)))
               LEVEL_AMOUNT
  FROM OKC_RULE_GROUPS_BH RGP
     , OKC_RULES_BH RUL
     , OKC_K_HEADERS_BH HDR
 WHERE RGP.ID  = RUL.RGP_ID
   AND RUL.RULE_INFORMATION_CATEGORY IN ('DST','ARL','CCR','GPR','IRT','TAX','IBR','PDL','QRE','SLH','CAN','BTO','IRE','LRT','STO','PTR',
                                         'ECE','PMP','DST','RCN','RSN','LMT','PRE','SLL')
   AND RGP.CLE_ID IS NOT NULL
   AND RGP.RGD_CODE = 'SVC_K'
   AND HDR.STS_CODE = NVL(P_STATUS,HDR.STS_CODE)
   AND HDR.AUTHORING_ORG_ID = NVL(P_ORG_ID,HDR.AUTHORING_ORG_ID)
   AND HDR.MAJOR_VERSION = RGP.MAJOR_VERSION
   AND HDR.ID = RGP.DNZ_CHR_ID
   AND RGP.DNZ_CHR_ID = RUL.DNZ_CHR_ID
   AND RGP.MAJOR_VERSION = RUL.MAJOR_VERSION
   AND HDR.ID = RUL.DNZ_CHR_ID
   AND HDR.MAJOR_VERSION = RUL.MAJOR_VERSION
   AND HDR.ID BETWEEN P_ID_LOW  AND P_ID_HIG
 GROUP BY RGP.CLE_ID ,RUL.MAJOR_VERSION,RGP.DNZ_CHR_ID )
WHERE   DISCOUNT_LIST IS NOT NULL OR
  ACCT_RULE_ID IS NOT NULL OR
  CC_BANK_ACCT_ID IS NOT NULL OR
  GRACE_DURATION IS NOT NULL OR
  TAX_AMOUNT IS NOT NULL OR
  TAX_CODE IS NOT NULL OR
  TAX_EXEMPTION_ID IS NOT NULL OR
  CLVL_LIST_PRICE IS NOT NULL OR
  CLVL_QUANTITY IS NOT NULL OR
  CLVL_EXTENDED_AMT IS NOT NULL OR
  TOPLVL_OPERAND_VAL IS NOT NULL OR
  TOPLVL_QUANTITY IS NOT NULL OR
  TOPLVL_ADJ_PRICE IS NOT NULL OR
  TOPLVL_PRICE_QTY IS NOT NULL OR
  AVERAGING_INTERVAL IS NOT NULL OR
  MINIMUM_QUANTITY IS NOT NULL OR
  DEFAULT_QUANTITY IS NOT NULL OR
  FIXED_QUANTITY IS NOT NULL OR
  USAGE_DURATION IS NOT NULL OR
  BASE_READING IS NOT NULL OR
  -- OKC --
  CUST_ACCT_ID IS NOT NULL OR
  BILL_TO_SITE_USE_ID IS NOT NULL OR
  INV_RULE_ID IS NOT NULL OR
  SHIP_TO_SITE_USE_ID IS NOT NULL OR
  PAYMENT_TERM_ID IS NOT NULL OR
  -- COVERAGE CODE START --
  EXCEPTION_COV_ID IS NOT NULL OR
  PM_PROGRAM_ID IS NOT NULL OR
  PRICE_LIST_ID IS NOT NULL OR
  RCN_INCIDENT_SEVERITY_ID IS NOT NULL OR
  RCN_PDF_ID IS NOT NULL OR
  LIMIT_UOM_QUANTIFIED IS NOT NULL OR
  DISCOUNT_AMOUNT IS NOT NULL OR
  DISCOUNT_PERCENT IS NOT NULL OR
  -- COVERAGE CODE END ---
  LEVEL_AMOUNT IS NOT NULL ;

CURSOR L_LINE_HIST_CSR1_nus (p_id_low in NUMBER , p_id_hig in NUMBER ) IS
SELECT * FROM (
SELECT  RGP.CLE_ID        CLE_ID
       ,RUL.MAJOR_VERSION MAJOR_VERSION
       ,RGP.DNZ_CHR_ID    DNZ_CHR_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)))
               DISCOUNT_LIST
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)))
               ACCT_RULE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)))
               CC_BANK_ACCT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)))
               GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)))
               TAX_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)))
               TAX_CODE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)))
               TAX_EXEMPTION_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)))
               CLVL_LIST_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)))
               CLVL_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)))
               CLVL_EXTENDED_AMT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION4)))
               LINE_LIST_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)))
               TOPLVL_OPERAND_VAL
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)))
               TOPLVL_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)))
               TOPLVL_ADJ_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)))
               TOPLVL_PRICE_QTY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)))
               AVERAGING_INTERVAL
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)))
               MINIMUM_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)))
               DEFAULT_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)))
               FIXED_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)))
               USAGE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)))
               BASE_READING
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)))
               CUST_ACCT_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)))
               BILL_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)))
               INV_RULE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)))
               SHIP_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)))
               PAYMENT_TERM_ID --OKC
        ----------------------------- COVERAGE CODE START -------------------------------------------------
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)))
               EXCEPTION_COV_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)))
               PM_PROGRAM_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PRE',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PRE',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PRE',RUL.OBJECT1_ID1)))
               PRICE_LIST_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)))
               RCN_INCIDENT_SEVERITY_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)))
               RCN_PDF_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)))
               LIMIT_UOM_QUANTIFIED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)))
               DISCOUNT_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)))
               DISCOUNT_PERCENT
        ----------------------------- COVERAGE CODE END ----------------------------------------------------
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)))
               LEVEL_AMOUNT
  FROM OKC_RULE_GROUPS_BH RGP
     , OKC_RULES_BH       RUL
 WHERE RGP.ID  = RUL.RGP_ID
   AND RGP.MAJOR_VERSION = RUL.MAJOR_VERSION
   AND RGP.DNZ_CHR_ID    = RUL.DNZ_CHR_ID
   AND RUL.RULE_INFORMATION_CATEGORY IN ('DST','ARL','CCR','GPR','IRT','TAX','IBR','PDL','QRE','SLH','CAN','BTO','IRE','LRT','STO','PTR',
                                         'ECE','PMP','DST','RCN','RSN','LMT','PRE','SLL')
   AND RGP.CLE_ID IS NOT NULL
   AND RGP.RGD_CODE = 'SVC_K'
   AND RGP.ID BETWEEN P_ID_LOW  AND P_ID_HIG
 GROUP BY RGP.CLE_ID ,RUL.MAJOR_VERSION,RGP.DNZ_CHR_ID )
WHERE DISCOUNT_LIST IS NOT NULL OR
      ACCT_RULE_ID IS NOT NULL OR
      CC_BANK_ACCT_ID IS NOT NULL OR
      GRACE_DURATION IS NOT NULL OR
      TAX_AMOUNT IS NOT NULL OR
      TAX_CODE IS NOT NULL OR
      TAX_EXEMPTION_ID IS NOT NULL OR
      CLVL_LIST_PRICE IS NOT NULL OR
      CLVL_QUANTITY IS NOT NULL OR
      CLVL_EXTENDED_AMT IS NOT NULL OR
      TOPLVL_OPERAND_VAL IS NOT NULL OR
      TOPLVL_QUANTITY IS NOT NULL OR
      TOPLVL_ADJ_PRICE IS NOT NULL OR
      TOPLVL_PRICE_QTY IS NOT NULL OR
      AVERAGING_INTERVAL IS NOT NULL OR
      MINIMUM_QUANTITY IS NOT NULL OR
      DEFAULT_QUANTITY IS NOT NULL OR
      FIXED_QUANTITY IS NOT NULL OR
      USAGE_DURATION IS NOT NULL OR
      BASE_READING IS NOT NULL OR
      -- OKC --
      CUST_ACCT_ID IS NOT NULL OR
      BILL_TO_SITE_USE_ID IS NOT NULL OR
      INV_RULE_ID IS NOT NULL OR
      SHIP_TO_SITE_USE_ID IS NOT NULL OR
      PAYMENT_TERM_ID IS NOT NULL OR
      -- COVERAGE CODE START --
      EXCEPTION_COV_ID IS NOT NULL OR
      PM_PROGRAM_ID IS NOT NULL OR
      PRICE_LIST_ID IS NOT NULL OR
      RCN_INCIDENT_SEVERITY_ID IS NOT NULL OR
      RCN_PDF_ID IS NOT NULL OR
      LIMIT_UOM_QUANTIFIED IS NOT NULL OR
      DISCOUNT_AMOUNT IS NOT NULL OR
      DISCOUNT_PERCENT IS NOT NULL OR
      -- COVERAGE CODE END ---
      LEVEL_AMOUNT IS NOT NULL ;

 -------------------------------------------------------------------------------
-- The following is the cursor opened if any of the following parameters are --
-- passed to the concurrent request                                          --
-- 1. p_status
-- 2. p_org_id
-------------------------------------------------------------------------------

CURSOR L_LINE_HIST_CSR2_nus (p_id_low in NUMBER , p_id_hig in NUMBER  , p_status in VARCHAR2 , p_org_id in NUMBER ) IS
SELECT * FROM (
SELECT  RGP.CLE_ID        CLE_ID
       ,RUL.MAJOR_VERSION MAJOR_VERSION
       ,RGP.DNZ_CHR_ID    DNZ_CHR_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)))
               DISCOUNT_LIST
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)))
               ACCT_RULE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)))
               CC_BANK_ACCT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)))
               GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)))
               TAX_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)))
               TAX_CODE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)))
               TAX_EXEMPTION_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)))
               CLVL_LIST_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)))
               CLVL_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)))
               CLVL_EXTENDED_AMT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION4)))
               LINE_LIST_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)))
               TOPLVL_OPERAND_VAL
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)))
               TOPLVL_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)))
               TOPLVL_ADJ_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)))
               TOPLVL_PRICE_QTY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)))
               AVERAGING_INTERVAL
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)))
               MINIMUM_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)))
               DEFAULT_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)))
               FIXED_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)))
               USAGE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)))
               BASE_READING
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)))
               CUST_ACCT_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)))
               BILL_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)))
               INV_RULE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)))
               SHIP_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)))
               PAYMENT_TERM_ID --OKC
        ----------------------------- COVERAGE CODE START -------------------------------------------------
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)))
               EXCEPTION_COV_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)))
               PM_PROGRAM_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PRE',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PRE',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PRE',RUL.OBJECT1_ID1)))
               PRICE_LIST_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)))
               RCN_INCIDENT_SEVERITY_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)))
               RCN_PDF_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)))
               LIMIT_UOM_QUANTIFIED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)))
               DISCOUNT_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)))
               DISCOUNT_PERCENT
        ----------------------------- COVERAGE CODE END ----------------------------------------------------
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)))
               LEVEL_AMOUNT
  FROM OKC_RULE_GROUPS_BH RGP
     , OKC_RULES_BH RUL
     , OKC_K_HEADERS_BH HDR
 WHERE RGP.ID  = RUL.RGP_ID
   AND RUL.RULE_INFORMATION_CATEGORY IN ('DST','ARL','CCR','GPR','IRT','TAX','IBR','PDL','QRE','SLH','CAN','BTO','IRE','LRT','STO','PTR',
                                         'ECE','PMP','DST','RCN','RSN','LMT','PRE','SLL')
   AND RGP.CLE_ID IS NOT NULL
   AND RGP.RGD_CODE = 'SVC_K'
   AND HDR.STS_CODE = NVL(P_STATUS,HDR.STS_CODE)
   AND HDR.AUTHORING_ORG_ID = NVL(P_ORG_ID,HDR.AUTHORING_ORG_ID)
   AND HDR.MAJOR_VERSION = RGP.MAJOR_VERSION
   AND HDR.ID = RGP.DNZ_CHR_ID
   AND RGP.DNZ_CHR_ID = RUL.DNZ_CHR_ID
   AND RGP.MAJOR_VERSION = RUL.MAJOR_VERSION
   AND HDR.ID = RUL.DNZ_CHR_ID
   AND HDR.MAJOR_VERSION = RUL.MAJOR_VERSION
   AND HDR.ID BETWEEN P_ID_LOW  AND P_ID_HIG
 GROUP BY RGP.CLE_ID ,RUL.MAJOR_VERSION,RGP.DNZ_CHR_ID )
WHERE   DISCOUNT_LIST IS NOT NULL OR
  ACCT_RULE_ID IS NOT NULL OR
  CC_BANK_ACCT_ID IS NOT NULL OR
  GRACE_DURATION IS NOT NULL OR
  TAX_AMOUNT IS NOT NULL OR
  TAX_CODE IS NOT NULL OR
  TAX_EXEMPTION_ID IS NOT NULL OR
  CLVL_LIST_PRICE IS NOT NULL OR
  CLVL_QUANTITY IS NOT NULL OR
  CLVL_EXTENDED_AMT IS NOT NULL OR
  TOPLVL_OPERAND_VAL IS NOT NULL OR
  TOPLVL_QUANTITY IS NOT NULL OR
  TOPLVL_ADJ_PRICE IS NOT NULL OR
  TOPLVL_PRICE_QTY IS NOT NULL OR
  AVERAGING_INTERVAL IS NOT NULL OR
  MINIMUM_QUANTITY IS NOT NULL OR
  DEFAULT_QUANTITY IS NOT NULL OR
  FIXED_QUANTITY IS NOT NULL OR
  USAGE_DURATION IS NOT NULL OR
  BASE_READING IS NOT NULL OR
  -- OKC --
  CUST_ACCT_ID IS NOT NULL OR
  BILL_TO_SITE_USE_ID IS NOT NULL OR
  INV_RULE_ID IS NOT NULL OR
  SHIP_TO_SITE_USE_ID IS NOT NULL OR
  PAYMENT_TERM_ID IS NOT NULL OR
  -- COVERAGE CODE START --
  EXCEPTION_COV_ID IS NOT NULL OR
  PM_PROGRAM_ID IS NOT NULL OR
  PRICE_LIST_ID IS NOT NULL OR
  RCN_INCIDENT_SEVERITY_ID IS NOT NULL OR
  RCN_PDF_ID IS NOT NULL OR
  LIMIT_UOM_QUANTIFIED IS NOT NULL OR
  DISCOUNT_AMOUNT IS NOT NULL OR
  DISCOUNT_PERCENT IS NOT NULL OR
  -- COVERAGE CODE END ---
  LEVEL_AMOUNT IS NOT NULL ;


 ----------------------------------------------------------------------------
-- Cursor to populate data in OKS_RULE_ERROR table .                      --
----------------------------------------------------------------------------
CURSOR L_LINE_DTLS_CSR (P_CLE_ID  IN NUMBER ,P_HDR_ID IN NUMBER, P_CATEGORY IN VARCHAR2 ,P_MAJOR_VERSION IN NUMBER ) IS
SELECT HDR.CONTRACT_NUMBER
     , HDR.CONTRACT_NUMBER_MODIFIER
     , LIN.MAJOR_VERSION
     , LIN.LINE_NUMBER
     , RUL.ID
     , RGP.ID RGP_ID
 FROM  OKC_K_HEADERS_BH HDR
     , OKC_RULE_GROUPS_BH RGP
     , OKC_RULES_BH RUL
     , OKC_K_LINES_BH LIN
WHERE HDR.ID = P_HDR_ID
  AND LIN.ID= P_CLE_ID
  AND RGP.DNZ_CHR_ID = P_HDR_ID
  AND RGP.DNZ_CHR_ID = RUL.DNZ_CHR_ID
  AND RGP.CLE_ID = LIN.ID
  AND RGP.ID = RUL.RGP_ID
  AND RUL.RULE_INFORMATION_CATEGORY = P_CATEGORY
  AND RGP.MAJOR_VERSION = P_MAJOR_VERSION;

L_LINE_DTLS_REC L_LINE_DTLS_CSR%ROWTYPE;
----------------------------------------------------------------------------

BEGIN
  FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');
  FND_FILE.PUT_LINE(FND_FILE.LOG ,'--------------Start of Sub request for Line History Rule Data Validation----------');
  FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');
  FND_FILE.PUT_LINE (FND_FILE.LOG, '----------Parameters passed to the Subrequest Request are as follows  -----------');
  FND_FILE.PUT_LINE (FND_FILE.LOG, 'P_STATUS ==============> '||P_STATUS);
  FND_FILE.PUT_LINE (FND_FILE.LOG, 'P_ORG_ID ==============> '||P_ORG_ID);
  FND_FILE.PUT_LINE (FND_FILE.LOG, 'P_BATCH_SIZE  =========> '||P_BATCH_SIZE);
  FND_FILE.PUT_LINE (FND_FILE.LOG, 'P_ID_LOW ==============> '||p_ID_LOW);
  FND_FILE.PUT_LINE (FND_FILE.LOG, 'P_ID_HIG ==============> '||P_ID_HIG);
  FND_FILE.PUT_LINE (FND_FILE.LOG, '---------------------------------------------------------------------------------');


--  FND_FILE.PUT_LINE(FND_FILE.OUTPUT ,'-----------------------------------------------------------------------');
--  FND_FILE.PUT_LINE(FND_FILE.OUTPUT ,'             Start of Line History Validation Report for               ');
--  FND_FILE.PUT_LINE(FND_FILE.OUTPUT ,'-----------------------------------------------------------------------');
--  FND_FILE.PUT_LINE(FND_FILE.OUTPUT ,' Contract Number      |Modifier                |Line Number    |Rule Category     |Attribute Name       |Current Value       ');


  if(p_us_yn = 'true') then
    l_us_yn := true;
  else
    l_us_yn := false;
  end if;

  if(l_us_yn) then
    If ( p_status is null and p_org_id is null  )  then
       OPEN L_LINE_HIST_CSR1(p_id_low , p_id_hig);
       FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor opened is L_LINE_HIST_CSR1');
    Else
       OPEN L_LINE_HIST_CSR2(p_id_low , p_id_hig , p_status , p_org_id);
       FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor opened is L_LINE_HIST_CSR2');
    End IF;

  else

    If ( p_status is null and p_org_id is null  )  then
       OPEN L_LINE_HIST_CSR1_nus(p_id_low , p_id_hig);
       FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor opened is L_LINE_HIST_CSR1_nus');
    Else
       OPEN L_LINE_HIST_CSR2_nus(p_id_low , p_id_hig , p_status , p_org_id);
       FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor opened is L_LINE_HIST_CSR2_nus');
    End IF;

  end if;

  Loop

     ------------------------------------------------------------------------------------
   if(l_us_yn) then

    --Start of If to choose the cursor to be fetched --

    If (p_status is null and p_org_id is null )  then
        FETCH L_LINE_HIST_CSR1 bulk collect into
		CLE_ID,
		MAJOR_VERSION,
		DNZ_CHR_ID,
		DISCOUNT_LIST_CHR,
		ACCT_RULE_ID_CHR,
		--CC_EXPIRY_DATE_CHR,
		CC_BANK_ACCT_ID_CHR,
		GRACE_DURATION_CHR,
		TAX_AMOUNT_CHR,
		TAX_CODE_CHR,
		TAX_EXEMPTION_ID_CHR,
		--IB_TRANS_DATE_CHR,
		CLVL_LIST_PRICE_CHR,
		CLVL_QUANTITY_CHR,
		CLVL_EXTENDED_AMT_CHR,
                LINE_LIST_PRICE_CHR,
		TOPLVL_OPERAND_VAL_CHR,
		TOPLVL_QUANTITY_CHR,
		TOPLVL_ADJ_PRICE_CHR,
		TOPLVL_PRICE_QTY_CHR,
		AVERAGING_INTERVAL_CHR,
		MINIMUM_QUANTITY_CHR,
		DEFAULT_QUANTITY_CHR,
		FIXED_QUANTITY_CHR,
		USAGE_DURATION_CHR,
        	BASE_READING_CHR,
		CUST_ACCT_ID_CHR,
		BILL_TO_SITE_USE_ID_CHR,
		INV_RULE_ID_CHR,
		SHIP_TO_SITE_USE_ID_CHR,
		PAYMENT_TERM_ID_CHR	   ,
                --------------------
                EXCEPTION_COV_ID_chr,
                PM_PROGRAM_ID_chr,
                PRICE_LIST_ID_chr,
                RCN_INCIDENT_SEVERITY_ID_chr,
                RCN_PDF_ID_chr,
                LIMIT_UOM_QUANTIFIED_chr,
                DISCOUNT_AMOUNT_chr,
                DISCOUNT_PERCENT_chr,
	        -----------------------------------
	        --LEVEL_PERIODS_CHR,
		--UOM_PER_PERIOD_CHR,
		--ADVANCE_PERIODS_CHR,
		LEVEL_AMOUNT_CHR
		--INVOICE_OFFSET_DAYS_CHR,
		--INTERFACE_OFFSET_DAYS_CHR
		LIMIT p_batch_size; --OKC

      FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor fetched is L_LINE_HIST_CSR1');
      FND_FILE.PUT_LINE(FND_FILE.LOG , 'FETCHED ROW COUNT = '|| CLE_ID.COUNT );
      EXIT WHEN CLE_ID.COUNT = 0 ;

    Else
        FETCH L_LINE_HIST_CSR2 bulk collect into
		CLE_ID,
		MAJOR_VERSION,
		DNZ_CHR_ID,
		DISCOUNT_LIST_CHR,
		ACCT_RULE_ID_CHR,
		--CC_EXPIRY_DATE_CHR,
		CC_BANK_ACCT_ID_CHR,
		GRACE_DURATION_CHR,
		TAX_AMOUNT_CHR,
		TAX_CODE_CHR,
		TAX_EXEMPTION_ID_CHR,
		--IB_TRANS_DATE_CHR,
		CLVL_LIST_PRICE_CHR,
		CLVL_QUANTITY_CHR,
		CLVL_EXTENDED_AMT_CHR,
                LINE_LIST_PRICE_CHR,
		TOPLVL_OPERAND_VAL_CHR,
		TOPLVL_QUANTITY_CHR,
		TOPLVL_ADJ_PRICE_CHR,
		TOPLVL_PRICE_QTY_CHR,
		AVERAGING_INTERVAL_CHR,
		MINIMUM_QUANTITY_CHR,
		DEFAULT_QUANTITY_CHR,
		FIXED_QUANTITY_CHR,
		USAGE_DURATION_CHR,
        	BASE_READING_CHR,
		CUST_ACCT_ID_CHR,
		BILL_TO_SITE_USE_ID_CHR,
		INV_RULE_ID_CHR,
		SHIP_TO_SITE_USE_ID_CHR,
		PAYMENT_TERM_ID_CHR	   ,
                --------------------
                EXCEPTION_COV_ID_chr,
                PM_PROGRAM_ID_chr,
                PRICE_LIST_ID_chr,
                RCN_INCIDENT_SEVERITY_ID_chr,
                RCN_PDF_ID_chr,
                LIMIT_UOM_QUANTIFIED_chr,
                DISCOUNT_AMOUNT_chr,
                DISCOUNT_PERCENT_chr,
                -----------------------------------
	        --LEVEL_PERIODS_CHR,
		--UOM_PER_PERIOD_CHR,
		--ADVANCE_PERIODS_CHR,
		LEVEL_AMOUNT_CHR
		--INVOICE_OFFSET_DAYS_CHR,
		--INTERFACE_OFFSET_DAYS_CHR
		LIMIT p_batch_size; --OKC

      FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor fetched is L_LINE_HIST_CSR2');
      FND_FILE.PUT_LINE(FND_FILE.LOG , 'FETCHED ROW COUNT = '|| CLE_ID.COUNT );
      EXIT WHEN CLE_ID.COUNT = 0 ;

    End IF;

    --End of If to choose the cursor to be fetched --

   else

    --Start of If to choose the cursor to be fetched --

    If (p_status is null and p_org_id is null )  then
        FETCH L_LINE_HIST_CSR1_nus bulk collect into
		CLE_ID,
		MAJOR_VERSION,
		DNZ_CHR_ID,
		DISCOUNT_LIST_CHR,
		ACCT_RULE_ID_CHR,
		--CC_EXPIRY_DATE_CHR,
		CC_BANK_ACCT_ID_CHR,
		GRACE_DURATION_CHR,
		TAX_AMOUNT_CHR,
		TAX_CODE_CHR,
		TAX_EXEMPTION_ID_CHR,
		--IB_TRANS_DATE_CHR,
		CLVL_LIST_PRICE_CHR,
		CLVL_QUANTITY_CHR,
		CLVL_EXTENDED_AMT_CHR,
                LINE_LIST_PRICE_CHR,
		TOPLVL_OPERAND_VAL_CHR,
		TOPLVL_QUANTITY_CHR,
		TOPLVL_ADJ_PRICE_CHR,
		TOPLVL_PRICE_QTY_CHR,
		AVERAGING_INTERVAL_CHR,
		MINIMUM_QUANTITY_CHR,
		DEFAULT_QUANTITY_CHR,
		FIXED_QUANTITY_CHR,
		USAGE_DURATION_CHR,
        	BASE_READING_CHR,
		CUST_ACCT_ID_CHR,
		BILL_TO_SITE_USE_ID_CHR,
		INV_RULE_ID_CHR,
		SHIP_TO_SITE_USE_ID_CHR,
		PAYMENT_TERM_ID_CHR	   ,
                --------------------
                EXCEPTION_COV_ID_chr,
                PM_PROGRAM_ID_chr,
                PRICE_LIST_ID_chr,
                RCN_INCIDENT_SEVERITY_ID_chr,
                RCN_PDF_ID_chr,
                LIMIT_UOM_QUANTIFIED_chr,
                DISCOUNT_AMOUNT_chr,
                DISCOUNT_PERCENT_chr,
	        -----------------------------------
	        --LEVEL_PERIODS_CHR,
		--UOM_PER_PERIOD_CHR,
		--ADVANCE_PERIODS_CHR,
		LEVEL_AMOUNT_CHR
		--INVOICE_OFFSET_DAYS_CHR,
		--INTERFACE_OFFSET_DAYS_CHR
		LIMIT p_batch_size; --OKC

      FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor fetched is L_LINE_HIST_CSR1');
      FND_FILE.PUT_LINE(FND_FILE.LOG , 'FETCHED ROW COUNT = '|| CLE_ID.COUNT );
      EXIT WHEN CLE_ID.COUNT = 0 ;

    Else
        FETCH L_LINE_HIST_CSR2_nus bulk collect into
		CLE_ID,
		MAJOR_VERSION,
		DNZ_CHR_ID,
		DISCOUNT_LIST_CHR,
		ACCT_RULE_ID_CHR,
		--CC_EXPIRY_DATE_CHR,
		CC_BANK_ACCT_ID_CHR,
		GRACE_DURATION_CHR,
		TAX_AMOUNT_CHR,
		TAX_CODE_CHR,
		TAX_EXEMPTION_ID_CHR,
		--IB_TRANS_DATE_CHR,
		CLVL_LIST_PRICE_CHR,
		CLVL_QUANTITY_CHR,
		CLVL_EXTENDED_AMT_CHR,
                LINE_LIST_PRICE_CHR,
		TOPLVL_OPERAND_VAL_CHR,
		TOPLVL_QUANTITY_CHR,
		TOPLVL_ADJ_PRICE_CHR,
		TOPLVL_PRICE_QTY_CHR,
		AVERAGING_INTERVAL_CHR,
		MINIMUM_QUANTITY_CHR,
		DEFAULT_QUANTITY_CHR,
		FIXED_QUANTITY_CHR,
		USAGE_DURATION_CHR,
        	BASE_READING_CHR,
		CUST_ACCT_ID_CHR,
		BILL_TO_SITE_USE_ID_CHR,
		INV_RULE_ID_CHR,
		SHIP_TO_SITE_USE_ID_CHR,
		PAYMENT_TERM_ID_CHR	   ,
                --------------------
                EXCEPTION_COV_ID_chr,
                PM_PROGRAM_ID_chr,
                PRICE_LIST_ID_chr,
                RCN_INCIDENT_SEVERITY_ID_chr,
                RCN_PDF_ID_chr,
                LIMIT_UOM_QUANTIFIED_chr,
                DISCOUNT_AMOUNT_chr,
                DISCOUNT_PERCENT_chr,
                -----------------------------------
	        --LEVEL_PERIODS_CHR,
		--UOM_PER_PERIOD_CHR,
		--ADVANCE_PERIODS_CHR,
		LEVEL_AMOUNT_CHR
		--INVOICE_OFFSET_DAYS_CHR,
		--INTERFACE_OFFSET_DAYS_CHR
		LIMIT p_batch_size; --OKC

      FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor fetched is L_LINE_HIST_CSR2');
      FND_FILE.PUT_LINE(FND_FILE.LOG , 'FETCHED ROW COUNT = '|| CLE_ID.COUNT );
      EXIT WHEN CLE_ID.COUNT = 0 ;

    End IF;

    --End of If to choose the cursor to be fetched --

   end if;
    ------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------
    -- Begin of code to validate data type .

    FOR i in CLE_ID.FIRST..CLE_ID.LAST
    LOOP
       --1. Validation for DST rule .
       BEGIN
          DISCOUNT_LIST(1)      := DISCOUNT_LIST_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'DST',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DISCOUNT_LIST');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'DST'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,DISCOUNT_LIST_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || DISCOUNT_LIST_CHR(i) );
       END;

       --2. Validation for ARL rule .
       BEGIN
          ACCT_RULE_ID(1)      := ACCT_RULE_ID_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'ARL',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_ACCT_RULE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION  ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'ARL'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,ACCT_RULE_ID_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(i) );
       END;

       --3. Validation for CCR rule .
       BEGIN
          CC_BANK_ACCT_ID(1)      := CC_BANK_ACCT_ID_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'CCR',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CC_BANK_ACCT_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'CCR'    ,'RULE_INFORMATION3'   ,L_ATTRIBUTE_NAME         ,CC_BANK_ACCT_ID_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION3' ||L_ATTRIBUTE_NAME || CC_BANK_ACCT_ID_CHR(i) );
       END;


       --4. Validation for GPR rule .
       BEGIN
          GRACE_DURATION(1)      := GRACE_DURATION_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'GPR',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_GRACE_DURATION');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'GPR'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,GRACE_DURATION_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || GRACE_DURATION_CHR(i) );
       END;
       --5. Validation for IRT rule .
       BEGIN
          TAX_AMOUNT(1)      := TAX_AMOUNT_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'IRT',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_AMOUNT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'IRT'    ,'RULE_INFORMATION4'   ,L_ATTRIBUTE_NAME         ,TAX_AMOUNT_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || TAX_AMOUNT_CHR(i) );
       END;

       --6. Validation for TAX rule .
       BEGIN
          TAX_CODE(1)      := TAX_CODE_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'TAX',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_CODE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'TAX'    ,'OBJECT2_ID1'   ,L_ATTRIBUTE_NAME         ,TAX_CODE_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT2_ID1' ||L_ATTRIBUTE_NAME || TAX_CODE_CHR(i) );
       END;

       --7. Validation for TAX rule .
       BEGIN
          TAX_EXEMPTION_ID(1)      := TAX_EXEMPTION_ID_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'TAX',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_EXEMPTION_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'TAX'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,TAX_EXEMPTION_ID_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || TAX_EXEMPTION_ID_CHR(i) );
       END;

       --8. Validation for PDL rule .
       BEGIN
          CLVL_LIST_PRICE(1)      := CLVL_LIST_PRICE_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'PDL',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CLVL_LIST_PRICE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'PDL'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,CLVL_LIST_PRICE_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || CLVL_LIST_PRICE_CHR(i) );
       END;

       --9. Validation for PDL rule .
       BEGIN
          CLVL_QUANTITY(1)      := CLVL_QUANTITY_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'PDL',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CLVL_QUANTITY');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'PDL'    ,'RULE_INFORMATION2'   ,L_ATTRIBUTE_NAME         ,CLVL_QUANTITY_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || CLVL_QUANTITY_CHR(i) );
       END;

       --10. Validation for PDL rule .
       BEGIN
          CLVL_EXTENDED_AMT(1)      := CLVL_EXTENDED_AMT_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'PDL',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CLVL_EXTENDED_AMT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'PDL'    ,'RULE_INFORMATION3'   ,L_ATTRIBUTE_NAME         ,CLVL_EXTENDED_AMT_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION3' ||L_ATTRIBUTE_NAME || CLVL_EXTENDED_AMT_CHR(i) );
       END;

       --11. Validation for PDL rule .
       BEGIN
          TOPLVL_OPERAND_VAL(1)      := TOPLVL_OPERAND_VAL_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'PDL',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_OPERAND_VAL');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'PDL'    ,'RULE_INFORMATION6'   ,L_ATTRIBUTE_NAME         ,TOPLVL_OPERAND_VAL_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION6' ||L_ATTRIBUTE_NAME || TOPLVL_OPERAND_VAL_CHR(i) );
       END;

       --12. Validation for PDL rule .
       BEGIN
          TOPLVL_QUANTITY(1)      := TOPLVL_QUANTITY_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'PDL',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_QUANTITY');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'PDL'    ,'RULE_INFORMATION8'   ,L_ATTRIBUTE_NAME         ,TOPLVL_QUANTITY_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION8' ||L_ATTRIBUTE_NAME || TOPLVL_QUANTITY_CHR(i) );
       END;

       --13. Validation for PDL rule .
       BEGIN
          TOPLVL_ADJ_PRICE(1)      := TOPLVL_ADJ_PRICE_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'PDL',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_ADJ_PRICE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'PDL'    ,'RULE_INFORMATION10'   ,L_ATTRIBUTE_NAME         ,TOPLVL_ADJ_PRICE_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION10' ||L_ATTRIBUTE_NAME || TOPLVL_ADJ_PRICE_CHR(i) );
       END;

       --14. Validation for PDL rule .
       BEGIN
          TOPLVL_PRICE_QTY(1)      := TOPLVL_PRICE_QTY_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'PDL',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_PRICE_QTY');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'PDL'    ,'RULE_INFORMATION13'   ,L_ATTRIBUTE_NAME         ,TOPLVL_PRICE_QTY_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION13' ||L_ATTRIBUTE_NAME || TOPLVL_PRICE_QTY_CHR(i) );
       END;

       --15. Validation for QRE rule .
       BEGIN
          AVERAGING_INTERVAL(1)      := AVERAGING_INTERVAL_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'QRE',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_AVERAGING_INTERVAL');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'QRE'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,AVERAGING_INTERVAL_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || AVERAGING_INTERVAL_CHR(i) );
       END;

       --16. Validation for QRE rule .
       BEGIN
          MINIMUM_QUANTITY(1)      := MINIMUM_QUANTITY_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'QRE',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_MINIMUM_QUANTITY');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'QRE'    ,'RULE_INFORMATION4'   ,L_ATTRIBUTE_NAME         ,MINIMUM_QUANTITY_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || MINIMUM_QUANTITY_CHR(i) );
       END;


       --17. Validation for QRE rule .
       BEGIN
          DEFAULT_QUANTITY(1)      := DEFAULT_QUANTITY_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'QRE',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DEFAULT_QUANTITY');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'QRE'    ,'RULE_INFORMATION5'   ,L_ATTRIBUTE_NAME         ,DEFAULT_QUANTITY_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION5' ||L_ATTRIBUTE_NAME || DEFAULT_QUANTITY_CHR(i) );
       END;

       --18. Validation for QRE rule .
       BEGIN
          FIXED_QUANTITY(1)      := FIXED_QUANTITY_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'QRE',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_FIXED_QUANTITY');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'QRE'    ,'RULE_INFORMATION7'   ,L_ATTRIBUTE_NAME         ,FIXED_QUANTITY_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION7' ||L_ATTRIBUTE_NAME || FIXED_QUANTITY_CHR(i) );
       END;

       --19. Validation for QRE rule .
       BEGIN
          USAGE_DURATION(1)      := USAGE_DURATION_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'QRE',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_USAGE_DURATION');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'QRE'    ,'RULE_INFORMATION8'   ,L_ATTRIBUTE_NAME         ,USAGE_DURATION_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION8' ||L_ATTRIBUTE_NAME || USAGE_DURATION_CHR(i) );
       END;

       --20. Validation for QRE rule .
       BEGIN
          BASE_READING(1)      := BASE_READING_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'QRE',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BASE_READING');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'QRE'    ,'RULE_INFORMATION12'   ,L_ATTRIBUTE_NAME         ,BASE_READING_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION13' ||L_ATTRIBUTE_NAME || BASE_READING_CHR(i) );
       END;

       --21. Validation for CAN rule .
       BEGIN
          CUST_ACCT_ID(1)      := CUST_ACCT_ID_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'CAN',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CUST_ACCT_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'CAN'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,CUST_ACCT_ID_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || CUST_ACCT_ID_CHR(i) );
       END;

       --22. Validation for BTO rule .
       BEGIN
          BILL_TO_SITE_USE_ID(1)      := BILL_TO_SITE_USE_ID_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'BTO',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BILL_TO_SITE_USE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'BTO'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,BILL_TO_SITE_USE_ID_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || BILL_TO_SITE_USE_ID_CHR(i) );
       END;

       --23. Validation for IRE rule .
       BEGIN
          INV_RULE_ID(1)      := INV_RULE_ID_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'IRE',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_INV_RULE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'IRE'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,INV_RULE_ID_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || INV_RULE_ID_CHR(i) );
       END;

       --24. Validation for STO rule .
       BEGIN
          SHIP_TO_SITE_USE_ID(1)      := SHIP_TO_SITE_USE_ID_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'STO',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_SHIP_TO_SITE_USE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'STO'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,SHIP_TO_SITE_USE_ID_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || SHIP_TO_SITE_USE_ID_CHR(i) );
       END;

       --25. Validation for PTR rule .
       BEGIN
          PAYMENT_TERM_ID(1)      := PAYMENT_TERM_ID_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'PTR',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PAYMENT_TERM_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'PTR'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,PAYMENT_TERM_ID_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || PAYMENT_TERM_ID_CHR(i) );
       END;

/*
       --26. Validation for CCR rule .
       BEGIN
          CC_EXPIRY_DATE(1)      := CC_EXPIRY_DATE_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'CCR',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CC_EXPIRY_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'CCR'    ,'RULE_INFORMATION2'   ,L_ATTRIBUTE_NAME         ,CC_EXPIRY_DATE_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || CC_EXPIRY_DATE_CHR(i) );
       END;

*/

/*
       --27. Validation for IBR  rule .
       BEGIN
          IB_TRANS_DATE(1)      := IB_TRANS_DATE_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'IBR',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_IB_TRANS_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'IBR'    ,'RULE_INFORMATION2'   ,L_ATTRIBUTE_NAME         ,IB_TRANS_DATE_CHR(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || IB_TRANS_DATE_CHR(i) );
       END;
*/

    --28
       BEGIN
          EXCEPTION_COV_ID(1)      := EXCEPTION_COV_ID_chr(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'ECE',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EXCEPTION_COV_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(i),L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'ECE'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,EXCEPTION_COV_ID_chr(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || EXCEPTION_COV_ID_chr(i));
       END;
--29
       BEGIN
          PM_PROGRAM_ID(1)      := PM_PROGRAM_ID_chr(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'PMP',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PM_PROGRAM_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'PMP'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,PM_PROGRAM_ID_chr(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || PM_PROGRAM_ID_chr(i));

       END;
--30
       BEGIN
          PRICE_LIST_ID(1)      := PRICE_LIST_ID_chr(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'PRE',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PRICE_LIST_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'PRE'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,PRICE_LIST_ID_chr(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || PRICE_LIST_ID_chr(i));

       END;
--31
       BEGIN
          RCN_INCIDENT_SEVERITY_ID(1)      := RCN_INCIDENT_SEVERITY_ID_chr(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'RCN',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RCN_INCIDENT_SVR_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(i),L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'RCN'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,RCN_INCIDENT_SEVERITY_ID_chr(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || RCN_INCIDENT_SEVERITY_ID_chr(i));

       END;
--32
       BEGIN
          RCN_PDF_ID(1)      := RCN_PDF_ID_chr(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'RCN',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RCN_PDF_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'RCN'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,RCN_PDF_ID_chr(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || RCN_PDF_ID_chr(i));

       END;
--33

       BEGIN
          LIMIT_UOM_QUANTIFIED(1)      := LIMIT_UOM_QUANTIFIED_chr(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'LMT',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_LIMIT_UOM_QUANTIFIED');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'LMT'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,LIMIT_UOM_QUANTIFIED_chr(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || LIMIT_UOM_QUANTIFIED_chr(i));

       END;
--34
       BEGIN
          DISCOUNT_AMOUNT(1)      := DISCOUNT_AMOUNT_chr(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'LMT',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DISCOUNT_AMOUNT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'LMT'    ,'RULE_INFORMATION2'   ,L_ATTRIBUTE_NAME         ,DISCOUNT_AMOUNT_chr(i),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || DISCOUNT_AMOUNT_chr(i));

       END;
--35
       BEGIN
          DISCOUNT_PERCENT(1)      := DISCOUNT_PERCENT_chr(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'LMT',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DISCOUNT_PERCENT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'LMT'    ,'RULE_INFORMATION4'   ,L_ATTRIBUTE_NAME         ,DISCOUNT_PERCENT_chr(i),
                                       L_ERROR_MSG );
         -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(i));

       END;
--35a
       BEGIN
          LINE_LIST_PRICE(1)      := LINE_LIST_PRICE_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'PDL',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_LINE_LIST_PRICE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'LMT'    ,'RULE_INFORMATION4'   ,L_ATTRIBUTE_NAME         ,LINE_LIST_PRICE_CHR(i),
                                       L_ERROR_MSG );
         -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || LINE_LIST_PRICE_CHR(i));

       END;
----------------------------------------------------------------------------------------------------------------------
--FOR SLL

/*
--36
       BEGIN
          LEVEL_PERIODS(1)      := LEVEL_PERIODS_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'SLL',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_LEVEL_PERIODS');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'SLL'    ,'RULE_INFORMATION3'   ,L_ATTRIBUTE_NAME         ,LEVEL_PERIODS_CHR(i),
                                       L_ERROR_MSG );
         -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(i));

       END;
*/

/*
--37
       BEGIN
          UOM_PER_PERIOD(1)      := UOM_PER_PERIOD_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'SLL',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_UOM_PER_PERIOD');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'SLL'    ,'RULE_INFORMATION4'   ,L_ATTRIBUTE_NAME         ,UOM_PER_PERIOD_CHR(i),
                                       L_ERROR_MSG );
         -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(i));

       END;

*/

/*
--38
       BEGIN
          ADVANCE_PERIODS(1)      := ADVANCE_PERIODS_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'SLL',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_ADVANCE_PERIODS');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'SLL'    ,'RULE_INFORMATION5'   ,L_ATTRIBUTE_NAME         ,ADVANCE_PERIODS_CHR(i),
                                       L_ERROR_MSG );
         -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(i));

       END;

*/
--39
       BEGIN
          LEVEL_AMOUNT(1)      := LEVEL_AMOUNT_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'SLL',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_LEVEL_AMOUNT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'SLL'    ,'RULE_INFORMATION6'   ,L_ATTRIBUTE_NAME         ,LEVEL_AMOUNT_CHR(i),
                                       L_ERROR_MSG );
         -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(i));

       END;

/*
--40
       BEGIN
          INVOICE_OFFSET_DAYS(1)      := INVOICE_OFFSET_DAYS_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'SLL',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_INVOICE_OFFSET_DAYS');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(i),L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'SLL'    ,'RULE_INFORMATION7'   ,L_ATTRIBUTE_NAME         ,INVOICE_OFFSET_DAYS_CHR(i),
                                       L_ERROR_MSG );
         -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(i));

       END;

*/
/*

--41
       BEGIN
          INTERFACE_OFFSET_DAYS(1)      := INTERFACE_OFFSET_DAYS_CHR(i);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID(i),DNZ_CHR_ID(i),'SLL',MAJOR_VERSION(i)) ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_INTERFACE_OFFSET_DAYS');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(i), CLE_ID(i),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION(i), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'SLL'    ,'RULE_INFORMATION8'   ,L_ATTRIBUTE_NAME         ,INTERFACE_OFFSET_DAYS_CHR(i),
                                       L_ERROR_MSG );
         -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(i));

       END;
*/


    End Loop;

     CLE_ID.DELETE;

    -- End of code to validate data type .
    ------------------------------------------------------------------------------------

  End Loop;


  If(L_LINE_HIST_CSR1%ISOPEN) THEN
    Close  L_LINE_HIST_CSR1;
  END IF;
  If(L_LINE_HIST_CSR2%ISOPEN) THEN
    Close  L_LINE_HIST_CSR2;
  End if;

  If(L_LINE_HIST_CSR1_nus%ISOPEN) THEN
    Close  L_LINE_HIST_CSR1_nus;
  END IF;
  If(L_LINE_HIST_CSR2_nus%ISOPEN) THEN
    Close  L_LINE_HIST_CSR2_nus;
  End if;


EXCEPTION
WHEN OTHERS THEN
  If(L_LINE_HIST_CSR1%ISOPEN) THEN
    Close  L_LINE_HIST_CSR1;
  END IF;
  If(L_LINE_HIST_CSR2%ISOPEN) THEN
    Close  L_LINE_HIST_CSR2;
  End if;
  If(L_LINE_HIST_CSR1_nus%ISOPEN) THEN
    Close  L_LINE_HIST_CSR1_nus;
  END IF;
  If(L_LINE_HIST_CSR2_nus%ISOPEN) THEN
    Close  L_LINE_HIST_CSR2_nus;
  End if;


END VALIDATE_LINE_HIST_RULE;

--------------------------------------------------------------------------------------------
--    This is the procedure called from VALIDATE_DATA1 to validate Header History rule data           --
--------------------------------------------------------------------------------------------

Procedure VALIDATE_HDR_HIST_RULE(
			    ERRBUF            OUT NOCOPY VARCHAR2 ,
                            RETCODE           OUT NOCOPY NUMBER ,
                            p_status          in VARCHAR2,
                            p_org_id          in NUMBER ,
                            p_batch_size      in NUMBER,
			    p_us_yn           in VARCHAR2,
                            p_id_low          in NUMBER,
                            p_id_hig          in NUMBER)
IS

Type l_num_tbl is table of  NUMBER         index  by BINARY_INTEGER ;
Type l_date_tbl is table of DATE           index  by BINARY_INTEGER ;
Type l_chr_tbl is table of  VARCHAR2(2000) index  by BINARY_INTEGER ;

--table types declared with existing rule name wherever applicable



MAJOR_VERSION             l_num_tbl ;
CHR_ID                    l_num_tbl ;
DNZ_CHR_ID                l_num_tbl ;
ACCT_RULE_ID              l_num_tbl ;
PAYMENT_TYPE              L_CHR_TBL ;
CC_NO                     l_chr_tbl ;
CC_EXPIRY_DATE            l_date_tbl;
CC_BANK_ACCT_ID           l_num_tbl ;
CC_AUTH_CODE              l_chr_tbl ;
GRACE_DURATION            l_num_tbl ;
GRACE_PERIOD              l_chr_tbl ;
EST_REV_PERCENT           l_num_tbl ;
EST_REV_DATE              l_date_tbl;
INVOICE_TEXT              l_chr_tbl ;
INV_PRINT_FLAG            l_chr_tbl ;
PRICE_UOM                 l_chr_tbl ;
TAX_AMOUNT                l_num_tbl ;
TAX_INCLUSIVE_YN          l_chr_tbl ;
TAX_STATUS                l_chr_tbl ;
TAX_CODE                  l_num_tbl ;
TAX_EXEMPTION_ID          l_num_tbl ;
BILLING_SCHEDULE_TYPE     l_chr_tbl ;
CUST_ACCT_ID              l_num_tbl ;
BILL_TO_SITE_USE_ID       l_num_tbl ;
INV_RULE_ID               l_num_tbl ;
RENEWAL_TYPE_CODE         l_chr_tbl ;
RENEWAL_NOTIFY_TO         l_num_tbl ;
RENEWAL_END_DATE          l_date_tbl;
SHIP_TO_SITE_USE_ID       l_num_tbl ;
PAYMENT_TERM_ID           l_num_tbl ;
BILLING_PROFILE_ID        l_num_tbl ;
RENEWAL_STATUS            l_chr_tbl ;
ELECTRONIC_RENEWAL_FLAG   l_chr_tbl ;
QUOTE_TO_CONTACT_ID       l_num_tbl ;
QUOTE_TO_SITE_ID          l_num_tbl ;
QUOTE_TO_EMAIL_ID         l_num_tbl ;
QUOTE_TO_PHONE_ID         l_num_tbl ;
QUOTE_TO_FAX_ID           l_num_tbl ;
RENEWAL_PO_REQUIRED       l_chr_tbl ;
RENEWAL_PRICE_LIST        l_num_tbl ;
RENEWAL_PRICING_TYPE      l_chr_tbl ;
RENEWAL_MARKUP_PERCENT    l_num_tbl ;
RENEWAL_GRACE_DURATION    l_num_tbl ;
RENEWAL_GRACE_PERIOD      l_chr_tbl ;
RENEWAL_EST_REV_PERCENT   l_num_tbl ;
RENEWAL_EST_REV_DURATION  l_num_tbl ;
RENEWAL_EST_REV_PERIOD    l_chr_tbl ;
RENEWAL_PRICE_LIST_USED   l_num_tbl ;
RENEWAL_TYPE_USED         l_chr_tbl ;
RENEWAL_NOTIFICATION_TO   l_num_tbl ;
RENEWAL_PO_USED           l_chr_tbl ;
RENEWAL_PRICING_TYPE_USED l_chr_tbl ;
RENEWAL_MARKUP_PERCENT_USED   l_num_tbl ;
REV_EST_PERCENT_USED      l_num_tbl ;
REV_EST_DURATION_USED     l_num_tbl ;
BILLING_PROFILE_USED      l_num_tbl ;
REV_EST_PERIOD_USED       l_chr_tbl ;
ERN_FLAG_USED_YN          l_chr_tbl ;
EVN_THRESHOLD_AMT         l_num_tbl ;
EVN_THRESHOLD_CUR         l_chr_tbl ;
ERN_THRESHOLD_AMT         l_num_tbl ;
ERN_THRESHOLD_CUR         l_chr_tbl ;
RENEWAL_GRACE_DURATION_USED   l_num_tbl ;
RENEWAL_GRACE_PERIOD_USED l_chr_tbl ;
INV_TRX_TYPE              l_chr_tbl ;
INV_PRINT_PROFILE         l_chr_tbl ;
RENEWAL_PO_NUMBER         l_chr_tbl ;
AR_INTERFACE_YN           l_chr_tbl ;
HOLD_BILLING              l_chr_tbl ;
SUMMARY_TRX_YN            l_chr_tbl ;
SERVICE_PO_NUMBER         l_chr_tbl ;
SERVICE_PO_REQUIRED       l_chr_tbl ;
PRICE_LIST_ID             l_num_tbl ;
CONVERSION_TYPE           l_chr_tbl ;
CONVERSION_RATE           l_num_tbl ;
CONVERSION_RATE_DATE      l_date_tbl;
CONVERSION_EURO_RATE      l_num_tbl ;



-- FOLLOWING ARE NUMBER FIELDS --
ACCT_RULE_ID_CHR              l_chr_tbl ;
CC_BANK_ACCT_ID_CHR           l_chr_tbl ;
GRACE_DURATION_CHR            l_chr_tbl ;
EST_REV_PERCENT_CHR           l_chr_tbl ;
TAX_AMOUNT_CHR                l_chr_tbl ;
TAX_CODE_CHR                  l_chr_tbl ;
TAX_EXEMPTION_ID_CHR          l_chr_tbl ;
CUST_ACCT_ID_CHR              l_chr_tbl ;
BILL_TO_SITE_USE_ID_CHR       l_chr_tbl ;
INV_RULE_ID_CHR               l_chr_tbl ;
RENEWAL_NOTIFY_TO_CHR         l_chr_tbl ;
SHIP_TO_SITE_USE_ID_CHR       l_chr_tbl ;
PAYMENT_TERM_ID_CHR           l_chr_tbl ;
BILLING_PROFILE_ID_CHR        l_chr_tbl ;
QUOTE_TO_CONTACT_ID_CHR       l_chr_tbl ;
QUOTE_TO_SITE_ID_CHR          l_chr_tbl ;
QUOTE_TO_EMAIL_ID_CHR         l_chr_tbl ;
QUOTE_TO_PHONE_ID_CHR         l_chr_tbl ;
QUOTE_TO_FAX_ID_CHR           l_chr_tbl ;
RENEWAL_PRICE_LIST_CHR        l_chr_tbl ;
RENEWAL_MARKUP_PERCENT_CHR    l_chr_tbl ;
RENEWAL_GRACE_DURATION_CHR    l_chr_tbl ;
RENEWAL_EST_REV_PERCENT_CHR   l_chr_tbl ;
RENEWAL_EST_REV_DURATION_CHR  l_chr_tbl ;
RENEWAL_PRICE_LIST_USED_CHR   l_chr_tbl ;
RENEWAL_NOTIFICATION_TO_CHR   l_chr_tbl ;
RENEWAL_MARKUP_PERCENT_USED_CH l_chr_tbl ;
REV_EST_PERCENT_USED_CHR      l_chr_tbl ;
REV_EST_DURATION_USED_CHR     l_chr_tbl ;
BILLING_PROFILE_USED_CHR      l_chr_tbl ;
EVN_THRESHOLD_AMT_CHR         l_chr_tbl ;
ERN_THRESHOLD_AMT_CHR         l_chr_tbl ;
RENEWAL_GRACE_DURATION_USED_CH l_chr_tbl ;
PRICE_LIST_ID_CHR             l_chr_tbl ;
CONVERSION_RATE_CHR           l_chr_tbl ;
CONVERSION_EURO_RATE_CHR      l_chr_tbl ;

-- FOLLOWING ARE DATE FIELDS --
CC_EXPIRY_DATE_CHR            l_chr_tbl ;
EST_REV_DATE_CHR              l_chr_tbl ;
RENEWAL_END_DATE_CHR          l_chr_tbl ;
CONVERSION_RATE_DATE_CHR      l_chr_tbl ;

--Misc Variables --
L_ATTRIBUTE_NAME              VARCHAR2(2000);
L_ERROR_MSG                   VARCHAR2(2000);

l_us_yn                       BOOLEAN;
-------------------------------------------------------------------------------
-- The following is the cursor opened if all the parameters passed are null  --
-------------------------------------------------------------------------------
CURSOR l_hdr_rule_hist_csr1 (p_id_low in NUMBER , p_id_hig in NUMBER )is
SELECT * FROM (
SELECT  RGP.DNZ_CHR_ID DNZ_CHR_ID
       ,RUL.MAJOR_VERSION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)))
            ACCT_RULE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' , '!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)))
            CC_BANK_ACCT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)))
            GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)), NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)))
            EST_REV_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!' ),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)))
            TAX_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' , '!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)))
            TAX_CODE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)))
            TAX_EXEMPTION_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)))
            BILLING_PROFILE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)))
            QUOTE_TO_CONTACT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT2_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4)))
            QUOTE_TO_SITE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)))
            QUOTE_TO_EMAIL_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)))
            QUOTE_TO_PHONE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)))
            QUOTE_TO_FAX_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)))
            RENEWAL_PRICE_LIST
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)))
            RENEWAL_MARKUP_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)))
            RENEWAL_GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)))
            RENEWAL_EST_REV_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)))
            RENEWAL_EST_REV_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)))
            RENEWAL_PRICE_LIST_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)))
            RENEWAL_NOTIFICATION_TO
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)))
            RENEWAL_MARKUP_PERCENT_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)))
            REV_EST_PERCENT_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)))
            REV_EST_DURATION_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)))
            BILLING_PROFILE_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)))
            EVN_THRESHOLD_AMT
        ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),
	    '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)))
            ERN_THRESHOLD_AMT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)))
            RENEWAL_GRACE_DURATION_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)))
            CONVERSION_RATE --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)))
            CONVERSION_EURO_RATE --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)))
            CUST_ACCT_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)))
            BILL_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)))
            INV_RULE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)))
            RENEWAL_NOTIFY_TO --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)))
            SHIP_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)))
            PAYMENT_TERM_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)))
            PRICE_LIST_ID --OKC
FROM OKC_RULE_GROUPS_BH RGP
   , OKC_RULES_BH RUL
WHERE rgp.id = rul.rgp_id
  and rgp.cle_id is null
  and rgp.chr_id is not null
  and rgp.rgd_code = 'SVC_K'
  AND   RUL.RULE_INFORMATION_CATEGORY IN
       ('ARL','CCR','GPR','RVE','IRT','TAX','ERN','QTO', 'RPO', 'RPT','RER', 'RRU',
        'RRE', 'SBG', 'SPO','SLH','PRE', 'CVN','CAN', 'BTO', 'IRE', 'REN', 'STO', 'PTR')
  and rgp.id between p_id_low  and p_id_hig
  GROUP BY rgp.dnz_chr_id, RUL.MAJOR_VERSION )
WHERE
  ACCT_RULE_ID    IS NOT NULL OR
  CC_BANK_ACCT_ID IS NOT NULL OR
  GRACE_DURATION  IS NOT NULL OR
  EST_REV_PERCENT IS NOT NULL OR
  TAX_AMOUNT      IS NOT NULL OR
  TAX_CODE        IS NOT NULL OR
  TAX_EXEMPTION_ID    IS NOT NULL OR
  BILLING_PROFILE_ID  IS NOT NULL OR
  QUOTE_TO_CONTACT_ID IS NOT NULL OR
  QUOTE_TO_SITE_ID    IS NOT NULL OR
  QUOTE_TO_EMAIL_ID   IS NOT NULL OR
  QUOTE_TO_PHONE_ID   IS NOT NULL OR
  QUOTE_TO_FAX_ID     IS NOT NULL OR
  RENEWAL_PRICE_LIST  IS NOT NULL OR
  RENEWAL_MARKUP_PERCENT   IS NOT NULL OR
  RENEWAL_GRACE_DURATION   IS NOT NULL OR
  RENEWAL_EST_REV_PERCENT  IS NOT NULL OR
  RENEWAL_EST_REV_DURATION IS NOT NULL OR
  RENEWAL_PRICE_LIST_USED  IS NOT NULL OR
  RENEWAL_NOTIFICATION_TO  IS NOT NULL OR
  RENEWAL_MARKUP_PERCENT_USED IS NOT NULL OR
  REV_EST_PERCENT_USED  IS NOT NULL OR
  REV_EST_DURATION_USED IS NOT NULL OR
  BILLING_PROFILE_USED  IS NOT NULL OR
  EVN_THRESHOLD_AMT  IS NOT NULL OR
  ERN_THRESHOLD_AMT  IS NOT NULL OR
  RENEWAL_GRACE_DURATION_USED IS NOT NULL OR
  CONVERSION_RATE     IS NOT NULL OR
  CONVERSION_EURO_RATE IS NOT NULL OR
  CUST_ACCT_ID        IS NOT NULL OR
  BILL_TO_SITE_USE_ID IS NOT NULL OR
  INV_RULE_ID         IS NOT NULL OR
  RENEWAL_NOTIFY_TO   IS NOT NULL OR
  SHIP_TO_SITE_USE_ID IS NOT NULL OR
  PAYMENT_TERM_ID     IS NOT NULL OR
  PRICE_LIST_ID       IS NOT NULL ;


-------------------------------------------------------------------------------
-- The following is the cursor opened if any of the following parameters are --
-- passed to the concurrent request                                          --
-- 1. p_status
-- 2. p_org_id
-------------------------------------------------------------------------------
CURSOR l_hdr_rule_hist_csr2 (p_id_low in NUMBER , p_id_hig in NUMBER , p_status in VARCHAR2 , p_org_id in NUMBER )is
SELECT * FROM (
SELECT  RGP.DNZ_CHR_ID DNZ_CHR_ID
       ,RUL.MAJOR_VERSION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)))
            ACCT_RULE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' , '!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)))
            CC_BANK_ACCT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)))
            GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)), NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)))
            EST_REV_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!' ),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)))
            TAX_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' , '!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)))
            TAX_CODE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)))
            TAX_EXEMPTION_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)))
            BILLING_PROFILE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)))
            QUOTE_TO_CONTACT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT2_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4)))
            QUOTE_TO_SITE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)))
            QUOTE_TO_EMAIL_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)))
            QUOTE_TO_PHONE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)))
            QUOTE_TO_FAX_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)))
            RENEWAL_PRICE_LIST
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)))
            RENEWAL_MARKUP_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)))
            RENEWAL_GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)))
            RENEWAL_EST_REV_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)))
            RENEWAL_EST_REV_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)))
            RENEWAL_PRICE_LIST_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)))
            RENEWAL_NOTIFICATION_TO
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)))
            RENEWAL_MARKUP_PERCENT_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)))
            REV_EST_PERCENT_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)))
            REV_EST_DURATION_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)))
            BILLING_PROFILE_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)))
            EVN_THRESHOLD_AMT
        ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),
	    '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)))
            ERN_THRESHOLD_AMT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)))
            RENEWAL_GRACE_DURATION_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)))
            CONVERSION_RATE --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)))
            CONVERSION_EURO_RATE --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)))
            CUST_ACCT_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)))
            BILL_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)))
            INV_RULE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)))
            RENEWAL_NOTIFY_TO --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)))
            SHIP_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)))
            PAYMENT_TERM_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)))
            PRICE_LIST_ID --OKC
FROM OKC_RULE_GROUPS_BH RGP
   , OKC_RULES_BH RUL
   , OKC_K_HEADERS_BH HDR
WHERE rgp.id = rul.rgp_id
  and rgp.cle_id is null
  and rgp.chr_id is not null
  and rgp.rgd_code = 'SVC_K'
  AND RUL.RULE_INFORMATION_CATEGORY IN
       ('ARL','CCR','GPR','RVE','IRT','TAX','ERN','QTO', 'RPO', 'RPT','RER', 'RRU',
        'RRE', 'SBG', 'SPO','SLH','PRE', 'CVN','CAN', 'BTO', 'IRE', 'REN', 'STO', 'PTR')
  AND HDR.id between p_id_low and p_id_hig
  AND HDR.id = RGP.DNZ_CHR_ID
  AND HDR.STS_CODE = nvl(p_status,HDR.STS_CODE)
  AND HDR.AUTHORING_ORG_ID = nvl(P_ORG_ID,HDR.AUTHORING_ORG_ID)
  GROUP BY RGP.DNZ_CHR_ID,RUL.MAJOR_VERSION )
WHERE
  ACCT_RULE_ID    IS NOT NULL OR
  CC_BANK_ACCT_ID IS NOT NULL OR
  GRACE_DURATION  IS NOT NULL OR
  EST_REV_PERCENT IS NOT NULL OR
  TAX_AMOUNT      IS NOT NULL OR
  TAX_CODE        IS NOT NULL OR
  TAX_EXEMPTION_ID    IS NOT NULL OR
  BILLING_PROFILE_ID  IS NOT NULL OR
  QUOTE_TO_CONTACT_ID IS NOT NULL OR
  QUOTE_TO_SITE_ID    IS NOT NULL OR
  QUOTE_TO_EMAIL_ID   IS NOT NULL OR
  QUOTE_TO_PHONE_ID   IS NOT NULL OR
  QUOTE_TO_FAX_ID     IS NOT NULL OR
  RENEWAL_PRICE_LIST  IS NOT NULL OR
  RENEWAL_MARKUP_PERCENT   IS NOT NULL OR
  RENEWAL_GRACE_DURATION   IS NOT NULL OR
  RENEWAL_EST_REV_PERCENT  IS NOT NULL OR
  RENEWAL_EST_REV_DURATION IS NOT NULL OR
  RENEWAL_PRICE_LIST_USED  IS NOT NULL OR
  RENEWAL_NOTIFICATION_TO  IS NOT NULL OR
  RENEWAL_MARKUP_PERCENT_USED IS NOT NULL OR
  REV_EST_PERCENT_USED  IS NOT NULL OR
  REV_EST_DURATION_USED IS NOT NULL OR
  BILLING_PROFILE_USED  IS NOT NULL OR
  EVN_THRESHOLD_AMT  IS NOT NULL OR
  ERN_THRESHOLD_AMT  IS NOT NULL OR
  RENEWAL_GRACE_DURATION_USED IS NOT NULL OR
  CONVERSION_RATE     IS NOT NULL OR
  CONVERSION_EURO_RATE IS NOT NULL OR
  CUST_ACCT_ID        IS NOT NULL OR
  BILL_TO_SITE_USE_ID IS NOT NULL OR
  INV_RULE_ID         IS NOT NULL OR
  RENEWAL_NOTIFY_TO   IS NOT NULL OR
  SHIP_TO_SITE_USE_ID IS NOT NULL OR
  PAYMENT_TERM_ID     IS NOT NULL OR
  PRICE_LIST_ID       IS NOT NULL ;


-------------------------------------------------------------------------------
-- The following is the cursor opened if all the parameters passed are null  --
-------------------------------------------------------------------------------
CURSOR l_hdr_rule_hist_csr1_nus (p_id_low in NUMBER , p_id_hig in NUMBER )is
SELECT * FROM (
SELECT  RGP.DNZ_CHR_ID DNZ_CHR_ID
       ,RUL.MAJOR_VERSION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)))
            ACCT_RULE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' , '!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)))
            CC_BANK_ACCT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)))
            GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)), NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)))
            EST_REV_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!' ),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)))
            TAX_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' , '!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)))
            TAX_CODE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)))
            TAX_EXEMPTION_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)))
            BILLING_PROFILE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)))
            QUOTE_TO_CONTACT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT2_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4)))
            QUOTE_TO_SITE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)))
            QUOTE_TO_EMAIL_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)))
            QUOTE_TO_PHONE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)))
            QUOTE_TO_FAX_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)))
            RENEWAL_PRICE_LIST
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)))
            RENEWAL_MARKUP_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)))
            RENEWAL_GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)))
            RENEWAL_EST_REV_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)))
            RENEWAL_EST_REV_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)))
            RENEWAL_PRICE_LIST_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)))
            RENEWAL_NOTIFICATION_TO
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)))
            RENEWAL_MARKUP_PERCENT_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)))
            REV_EST_PERCENT_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)))
            REV_EST_DURATION_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)))
            BILLING_PROFILE_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)))
            EVN_THRESHOLD_AMT
        ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),
	    '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)))
            ERN_THRESHOLD_AMT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)))
            RENEWAL_GRACE_DURATION_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)))
            CONVERSION_RATE --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)))
            CONVERSION_EURO_RATE --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)))
            CUST_ACCT_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)))
            BILL_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)))
            INV_RULE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)))
            RENEWAL_NOTIFY_TO --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)))
            SHIP_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)))
            PAYMENT_TERM_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)))
            PRICE_LIST_ID --OKC
FROM OKC_RULE_GROUPS_BH RGP
   , OKC_RULES_BH RUL
WHERE rgp.id = rul.rgp_id
  and rgp.cle_id is null
  and rgp.chr_id is not null
  and rgp.rgd_code = 'SVC_K'
  AND   RUL.RULE_INFORMATION_CATEGORY IN
       ('ARL','CCR','GPR','RVE','IRT','TAX','ERN','QTO', 'RPO', 'RPT','RER', 'RRU',
        'RRE', 'SBG', 'SPO','SLH','PRE', 'CVN','CAN', 'BTO', 'IRE', 'REN', 'STO', 'PTR')
  and rgp.id between p_id_low  and p_id_hig
  GROUP BY rgp.dnz_chr_id, RUL.MAJOR_VERSION )
WHERE
  ACCT_RULE_ID    IS NOT NULL OR
  CC_BANK_ACCT_ID IS NOT NULL OR
  GRACE_DURATION  IS NOT NULL OR
  EST_REV_PERCENT IS NOT NULL OR
  TAX_AMOUNT      IS NOT NULL OR
  TAX_CODE        IS NOT NULL OR
  TAX_EXEMPTION_ID    IS NOT NULL OR
  BILLING_PROFILE_ID  IS NOT NULL OR
  QUOTE_TO_CONTACT_ID IS NOT NULL OR
  QUOTE_TO_SITE_ID    IS NOT NULL OR
  QUOTE_TO_EMAIL_ID   IS NOT NULL OR
  QUOTE_TO_PHONE_ID   IS NOT NULL OR
  QUOTE_TO_FAX_ID     IS NOT NULL OR
  RENEWAL_PRICE_LIST  IS NOT NULL OR
  RENEWAL_MARKUP_PERCENT   IS NOT NULL OR
  RENEWAL_GRACE_DURATION   IS NOT NULL OR
  RENEWAL_EST_REV_PERCENT  IS NOT NULL OR
  RENEWAL_EST_REV_DURATION IS NOT NULL OR
  RENEWAL_PRICE_LIST_USED  IS NOT NULL OR
  RENEWAL_NOTIFICATION_TO  IS NOT NULL OR
  RENEWAL_MARKUP_PERCENT_USED IS NOT NULL OR
  REV_EST_PERCENT_USED  IS NOT NULL OR
  REV_EST_DURATION_USED IS NOT NULL OR
  BILLING_PROFILE_USED  IS NOT NULL OR
  EVN_THRESHOLD_AMT  IS NOT NULL OR
  ERN_THRESHOLD_AMT  IS NOT NULL OR
  RENEWAL_GRACE_DURATION_USED IS NOT NULL OR
  CONVERSION_RATE     IS NOT NULL OR
  CONVERSION_EURO_RATE IS NOT NULL OR
  CUST_ACCT_ID        IS NOT NULL OR
  BILL_TO_SITE_USE_ID IS NOT NULL OR
  INV_RULE_ID         IS NOT NULL OR
  RENEWAL_NOTIFY_TO   IS NOT NULL OR
  SHIP_TO_SITE_USE_ID IS NOT NULL OR
  PAYMENT_TERM_ID     IS NOT NULL OR
  PRICE_LIST_ID       IS NOT NULL ;


-------------------------------------------------------------------------------
-- The following is the cursor opened if any of the following parameters are --
-- passed to the concurrent request                                          --
-- 1. p_status
-- 2. p_org_id
-------------------------------------------------------------------------------
CURSOR l_hdr_rule_hist_csr2_nus (p_id_low in NUMBER , p_id_hig in NUMBER , p_status in VARCHAR2 , p_org_id in NUMBER )is
SELECT * FROM (
SELECT  RGP.DNZ_CHR_ID DNZ_CHR_ID
       ,RUL.MAJOR_VERSION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)))
            ACCT_RULE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' , '!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)))
            CC_BANK_ACCT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)))
            GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)), NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)))
            EST_REV_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!' ),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)))
            TAX_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' , '!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)))
            TAX_CODE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)))
            TAX_EXEMPTION_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)))
            BILLING_PROFILE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)))
            QUOTE_TO_CONTACT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT2_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4)))
            QUOTE_TO_SITE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)))
            QUOTE_TO_EMAIL_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)))
            QUOTE_TO_PHONE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)))
            QUOTE_TO_FAX_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)))
            RENEWAL_PRICE_LIST
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)))
            RENEWAL_MARKUP_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)))
            RENEWAL_GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)))
            RENEWAL_EST_REV_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)))
            RENEWAL_EST_REV_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)))
            RENEWAL_PRICE_LIST_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)))
            RENEWAL_NOTIFICATION_TO
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)))
            RENEWAL_MARKUP_PERCENT_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)))
            REV_EST_PERCENT_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)))
            REV_EST_DURATION_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)))
            BILLING_PROFILE_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)))
            EVN_THRESHOLD_AMT
        ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),
	    '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)))
            ERN_THRESHOLD_AMT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)))
            RENEWAL_GRACE_DURATION_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)))
            CONVERSION_RATE --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)))
            CONVERSION_EURO_RATE --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)))
            CUST_ACCT_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)))
            BILL_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)))
            INV_RULE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)))
            RENEWAL_NOTIFY_TO --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)))
            SHIP_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)))
            PAYMENT_TERM_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)))
            PRICE_LIST_ID --OKC
FROM OKC_RULE_GROUPS_BH RGP
   , OKC_RULES_BH RUL
   , OKC_K_HEADERS_BH HDR
WHERE rgp.id = rul.rgp_id
  and rgp.cle_id is null
  and rgp.chr_id is not null
  and rgp.rgd_code = 'SVC_K'
  AND RUL.RULE_INFORMATION_CATEGORY IN
       ('ARL','CCR','GPR','RVE','IRT','TAX','ERN','QTO', 'RPO', 'RPT','RER', 'RRU',
        'RRE', 'SBG', 'SPO','SLH','PRE', 'CVN','CAN', 'BTO', 'IRE', 'REN', 'STO', 'PTR')
  AND HDR.id between p_id_low and p_id_hig
  AND HDR.id = RGP.DNZ_CHR_ID
  AND HDR.STS_CODE = nvl(p_status,HDR.STS_CODE)
  AND HDR.AUTHORING_ORG_ID = nvl(P_ORG_ID,HDR.AUTHORING_ORG_ID)
  GROUP BY RGP.DNZ_CHR_ID,RUL.MAJOR_VERSION )
WHERE
  ACCT_RULE_ID    IS NOT NULL OR
  CC_BANK_ACCT_ID IS NOT NULL OR
  GRACE_DURATION  IS NOT NULL OR
  EST_REV_PERCENT IS NOT NULL OR
  TAX_AMOUNT      IS NOT NULL OR
  TAX_CODE        IS NOT NULL OR
  TAX_EXEMPTION_ID    IS NOT NULL OR
  BILLING_PROFILE_ID  IS NOT NULL OR
  QUOTE_TO_CONTACT_ID IS NOT NULL OR
  QUOTE_TO_SITE_ID    IS NOT NULL OR
  QUOTE_TO_EMAIL_ID   IS NOT NULL OR
  QUOTE_TO_PHONE_ID   IS NOT NULL OR
  QUOTE_TO_FAX_ID     IS NOT NULL OR
  RENEWAL_PRICE_LIST  IS NOT NULL OR
  RENEWAL_MARKUP_PERCENT   IS NOT NULL OR
  RENEWAL_GRACE_DURATION   IS NOT NULL OR
  RENEWAL_EST_REV_PERCENT  IS NOT NULL OR
  RENEWAL_EST_REV_DURATION IS NOT NULL OR
  RENEWAL_PRICE_LIST_USED  IS NOT NULL OR
  RENEWAL_NOTIFICATION_TO  IS NOT NULL OR
  RENEWAL_MARKUP_PERCENT_USED IS NOT NULL OR
  REV_EST_PERCENT_USED  IS NOT NULL OR
  REV_EST_DURATION_USED IS NOT NULL OR
  BILLING_PROFILE_USED  IS NOT NULL OR
  EVN_THRESHOLD_AMT  IS NOT NULL OR
  ERN_THRESHOLD_AMT  IS NOT NULL OR
  RENEWAL_GRACE_DURATION_USED IS NOT NULL OR
  CONVERSION_RATE     IS NOT NULL OR
  CONVERSION_EURO_RATE IS NOT NULL OR
  CUST_ACCT_ID        IS NOT NULL OR
  BILL_TO_SITE_USE_ID IS NOT NULL OR
  INV_RULE_ID         IS NOT NULL OR
  RENEWAL_NOTIFY_TO   IS NOT NULL OR
  SHIP_TO_SITE_USE_ID IS NOT NULL OR
  PAYMENT_TERM_ID     IS NOT NULL OR
  PRICE_LIST_ID       IS NOT NULL ;



----------------------------------------------------------------------------
-- Cursor to populate data in OKS_RULE_ERROR table .                      --
----------------------------------------------------------------------------
CURSOR L_HDR_DTLS_CSR ( P_HDR_ID  IN NUMBER , P_CATEGORY IN VARCHAR2 ,P_MAJOR_VERSION IN NUMBER ) IS
SELECT HDR.CONTRACT_NUMBER
     , HDR.CONTRACT_NUMBER_MODIFIER
     , HDR.MAJOR_VERSION
     , RUL.ID
     , RGP.ID RGP_ID
 FROM  OKC_K_HEADERS_BH HDR
     , OKC_RULE_GROUPS_BH RGP
     , OKC_RULES_BH RUL
WHERE HDR.ID = P_HDR_ID
  AND RGP.DNZ_CHR_ID = P_HDR_ID
  AND RGP.CHR_ID = P_HDR_ID
  AND RGP.ID = RUL.RGP_ID
  AND RGP.DNZ_CHR_ID = RUL.DNZ_CHR_ID
  AND RUL.RULE_INFORMATION_CATEGORY = P_CATEGORY
  AND RGP.MAJOR_VERSION = P_MAJOR_VERSION;

L_HDR_DTLS_REC L_HDR_DTLS_CSR%ROWTYPE;
----------------------------------------------------------------------------


BEGIN
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'--------------Start of Sub request for Header History Rule Data Validation--------');
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');
 FND_FILE.PUT_LINE (FND_FILE.LOG, '----------Parameters passed to the Subrequest Request are as follows  -----------');
 FND_FILE.PUT_LINE (FND_FILE.LOG, 'P_STATUS ==============> '||P_STATUS);
 FND_FILE.PUT_LINE (FND_FILE.LOG, 'P_ORG_ID ==============> '||P_ORG_ID);
 FND_FILE.PUT_LINE (FND_FILE.LOG, 'P_BATCH_SIZE  =========> '||P_BATCH_SIZE);
 FND_FILE.PUT_LINE (FND_FILE.LOG, 'P_ID_LOW ==============> '||p_ID_LOW);
 FND_FILE.PUT_LINE (FND_FILE.LOG, 'P_ID_HIG ==============> '||P_ID_HIG);
 FND_FILE.PUT_LINE (FND_FILE.LOG, '---------------------------------------------------------------------------------');


-- FND_FILE.PUT_LINE(FND_FILE.OUTPUT ,'-----------------------------------------------------------------------');
-- FND_FILE.PUT_LINE(FND_FILE.OUTPUT ,'                Start of Header History Validation Report for          ');
-- FND_FILE.PUT_LINE(FND_FILE.OUTPUT ,'-----------------------------------------------------------------------');
-- FND_FILE.PUT_LINE(FND_FILE.OUTPUT ,' Contract Number      |Modifier                |Line Number    |Rule Category     |Attribute Name       |Current Value       ');

if(p_us_yn = 'true') THEN
  l_us_yn := true;
 else
  l_us_yn := false;
end if;

if(l_us_yn) THEN
 If (p_status is null and p_org_id is null  )  then
     OPEN l_hdr_rule_hist_csr1(p_id_low , p_id_hig);
     FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor opened is l_hdr_rule_hist_csr1');
 Else
     OPEN l_hdr_rule_hist_csr2(p_id_low , p_id_hig, p_status , p_org_id);
     FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor opened is l_hdr_rule_hist_csr2');
 End IF;
else
 If (p_status is null and p_org_id is null  )  then
     OPEN l_hdr_rule_hist_csr1_nus(p_id_low , p_id_hig);
     FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor opened is l_hdr_rule_hist_csr1_nus');
 Else
     OPEN l_hdr_rule_hist_csr2_nus(p_id_low , p_id_hig, p_status , p_org_id);
     FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor opened is l_hdr_rule_hist_csr2_nus');
 End IF;
end if;

 Loop
    ------------------------------------------------------------------------------------
    --Start of If to choose the cursor to be fetched --

 if(l_us_yn) THEN
    If (p_status is null and p_org_id is null )  then
        FETCH l_hdr_rule_hist_csr1 bulk collect into
                        CHR_ID
			,MAJOR_VERSION
                        ,ACCT_RULE_ID_CHR
                        --,CC_EXPIRY_DATE_CHR
                        ,CC_BANK_ACCT_ID_CHR
                        ,GRACE_DURATION_CHR
                        ,EST_REV_PERCENT_CHR
                        --,EST_REV_DATE_CHR
                        ,TAX_AMOUNT_CHR
                        ,TAX_CODE_CHR
                        ,TAX_EXEMPTION_ID_CHR
                        ,BILLING_PROFILE_ID_CHR
                        ,QUOTE_TO_CONTACT_ID_CHR
                        ,QUOTE_TO_SITE_ID_CHR
                        ,QUOTE_TO_EMAIL_ID_CHR
                        ,QUOTE_TO_PHONE_ID_CHR
                        ,QUOTE_TO_FAX_ID_CHR
                        ,RENEWAL_PRICE_LIST_CHR
                        ,RENEWAL_MARKUP_PERCENT_CHR
                        ,RENEWAL_GRACE_DURATION_CHR
                        ,RENEWAL_EST_REV_PERCENT_CHR
                        ,RENEWAL_EST_REV_DURATION_CHR
                        ,RENEWAL_PRICE_LIST_USED_CHR
                        ,RENEWAL_NOTIFICATION_TO_CHR
                        ,RENEWAL_MARKUP_PERCENT_USED_CH
                        ,REV_EST_PERCENT_USED_CHR
                        ,REV_EST_DURATION_USED_CHR
                        ,BILLING_PROFILE_USED_CHR
                        ,EVN_THRESHOLD_AMT_CHR
                        ,ERN_THRESHOLD_AMT_CHR
                        ,RENEWAL_GRACE_DURATION_USED_CH
                        ,CONVERSION_RATE_CHR              --OKC
                        --,CONVERSION_RATE_DATE_CHR         --OKC
                        ,CONVERSION_EURO_RATE_CHR         --OKC
                        ,CUST_ACCT_ID_CHR                 --OKC
                        ,BILL_TO_SITE_USE_ID_CHR          --OKC
                        ,INV_RULE_ID_CHR                  --OKC
                        ,RENEWAL_NOTIFY_TO_CHR            --OKC
                        --,RENEWAL_END_DATE_CHR             --OKC
                        ,SHIP_TO_SITE_USE_ID_CHR          --OKC
                        ,PAYMENT_TERM_ID_CHR              --OKC
                        ,PRICE_LIST_ID_CHR  LIMIT p_batch_size; --OKC

       FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor fetched is l_hdr_rule_hist_csr1');
       FND_FILE.PUT_LINE(FND_FILE.LOG , 'FETCHED ROW COUNT = '|| CHR_ID.COUNT );
       EXIT WHEN CHR_ID.COUNT = 0 ;
    Else
        FETCH l_hdr_rule_hist_csr2 bulk collect into
                        CHR_ID
			,MAJOR_VERSION
                        ,ACCT_RULE_ID_CHR
                        --,CC_EXPIRY_DATE_CHR
                        ,CC_BANK_ACCT_ID_CHR
                        ,GRACE_DURATION_CHR
                        ,EST_REV_PERCENT_CHR
                        --,EST_REV_DATE_CHR
                        ,TAX_AMOUNT_CHR
                        ,TAX_CODE_CHR
                        ,TAX_EXEMPTION_ID_CHR
                        ,BILLING_PROFILE_ID_CHR
                        ,QUOTE_TO_CONTACT_ID_CHR
                        ,QUOTE_TO_SITE_ID_CHR
                        ,QUOTE_TO_EMAIL_ID_CHR
                        ,QUOTE_TO_PHONE_ID_CHR
                        ,QUOTE_TO_FAX_ID_CHR
                        ,RENEWAL_PRICE_LIST_CHR
                        ,RENEWAL_MARKUP_PERCENT_CHR
                        ,RENEWAL_GRACE_DURATION_CHR
                        ,RENEWAL_EST_REV_PERCENT_CHR
                        ,RENEWAL_EST_REV_DURATION_CHR
                        ,RENEWAL_PRICE_LIST_USED_CHR
                        ,RENEWAL_NOTIFICATION_TO_CHR
                        ,RENEWAL_MARKUP_PERCENT_USED_CH
                        ,REV_EST_PERCENT_USED_CHR
                        ,REV_EST_DURATION_USED_CHR
                        ,BILLING_PROFILE_USED_CHR
                        ,EVN_THRESHOLD_AMT_CHR
                        ,ERN_THRESHOLD_AMT_CHR
                        ,RENEWAL_GRACE_DURATION_USED_CH
                        ,CONVERSION_RATE_CHR              --OKC
                        --,CONVERSION_RATE_DATE_CHR         --OKC
                        ,CONVERSION_EURO_RATE_CHR         --OKC
                        ,CUST_ACCT_ID_CHR                 --OKC
                        ,BILL_TO_SITE_USE_ID_CHR          --OKC
                        ,INV_RULE_ID_CHR                  --OKC
                        ,RENEWAL_NOTIFY_TO_CHR            --OKC
                        --,RENEWAL_END_DATE_CHR             --OKC
                        ,SHIP_TO_SITE_USE_ID_CHR          --OKC
                        ,PAYMENT_TERM_ID_CHR              --OKC
                        ,PRICE_LIST_ID_CHR  LIMIT p_batch_size; --OKC

       FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor fetched is l_hdr_rule_hist_csr2');
       FND_FILE.PUT_LINE(FND_FILE.LOG , 'FETCHED ROW COUNT = '|| CHR_ID.COUNT );
       EXIT WHEN CHR_ID.COUNT = 0 ;

    End IF;
        --End of If to choose the cursor to be fetched --

else

    If (p_status is null and p_org_id is null )  then
        FETCH l_hdr_rule_hist_csr1_nus bulk collect into
                        CHR_ID
			,MAJOR_VERSION
                        ,ACCT_RULE_ID_CHR
                        --,CC_EXPIRY_DATE_CHR
                        ,CC_BANK_ACCT_ID_CHR
                        ,GRACE_DURATION_CHR
                        ,EST_REV_PERCENT_CHR
                        --,EST_REV_DATE_CHR
                        ,TAX_AMOUNT_CHR
                        ,TAX_CODE_CHR
                        ,TAX_EXEMPTION_ID_CHR
                        ,BILLING_PROFILE_ID_CHR
                        ,QUOTE_TO_CONTACT_ID_CHR
                        ,QUOTE_TO_SITE_ID_CHR
                        ,QUOTE_TO_EMAIL_ID_CHR
                        ,QUOTE_TO_PHONE_ID_CHR
                        ,QUOTE_TO_FAX_ID_CHR
                        ,RENEWAL_PRICE_LIST_CHR
                        ,RENEWAL_MARKUP_PERCENT_CHR
                        ,RENEWAL_GRACE_DURATION_CHR
                        ,RENEWAL_EST_REV_PERCENT_CHR
                        ,RENEWAL_EST_REV_DURATION_CHR
                        ,RENEWAL_PRICE_LIST_USED_CHR
                        ,RENEWAL_NOTIFICATION_TO_CHR
                        ,RENEWAL_MARKUP_PERCENT_USED_CH
                        ,REV_EST_PERCENT_USED_CHR
                        ,REV_EST_DURATION_USED_CHR
                        ,BILLING_PROFILE_USED_CHR
                        ,EVN_THRESHOLD_AMT_CHR
                        ,ERN_THRESHOLD_AMT_CHR
                        ,RENEWAL_GRACE_DURATION_USED_CH
                        ,CONVERSION_RATE_CHR              --OKC
                        --,CONVERSION_RATE_DATE_CHR         --OKC
                        ,CONVERSION_EURO_RATE_CHR         --OKC
                        ,CUST_ACCT_ID_CHR                 --OKC
                        ,BILL_TO_SITE_USE_ID_CHR          --OKC
                        ,INV_RULE_ID_CHR                  --OKC
                        ,RENEWAL_NOTIFY_TO_CHR            --OKC
                        --,RENEWAL_END_DATE_CHR             --OKC
                        ,SHIP_TO_SITE_USE_ID_CHR          --OKC
                        ,PAYMENT_TERM_ID_CHR              --OKC
                        ,PRICE_LIST_ID_CHR  LIMIT p_batch_size; --OKC

       FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor fetched is l_hdr_rule_hist_csr1');
       FND_FILE.PUT_LINE(FND_FILE.LOG , 'FETCHED ROW COUNT = '|| CHR_ID.COUNT );
       EXIT WHEN CHR_ID.COUNT = 0 ;
    Else
        FETCH l_hdr_rule_hist_csr2_nus bulk collect into
                        CHR_ID
			,MAJOR_VERSION
                        ,ACCT_RULE_ID_CHR
                        --,CC_EXPIRY_DATE_CHR
                        ,CC_BANK_ACCT_ID_CHR
                        ,GRACE_DURATION_CHR
                        ,EST_REV_PERCENT_CHR
                        --,EST_REV_DATE_CHR
                        ,TAX_AMOUNT_CHR
                        ,TAX_CODE_CHR
                        ,TAX_EXEMPTION_ID_CHR
                        ,BILLING_PROFILE_ID_CHR
                        ,QUOTE_TO_CONTACT_ID_CHR
                        ,QUOTE_TO_SITE_ID_CHR
                        ,QUOTE_TO_EMAIL_ID_CHR
                        ,QUOTE_TO_PHONE_ID_CHR
                        ,QUOTE_TO_FAX_ID_CHR
                        ,RENEWAL_PRICE_LIST_CHR
                        ,RENEWAL_MARKUP_PERCENT_CHR
                        ,RENEWAL_GRACE_DURATION_CHR
                        ,RENEWAL_EST_REV_PERCENT_CHR
                        ,RENEWAL_EST_REV_DURATION_CHR
                        ,RENEWAL_PRICE_LIST_USED_CHR
                        ,RENEWAL_NOTIFICATION_TO_CHR
                        ,RENEWAL_MARKUP_PERCENT_USED_CH
                        ,REV_EST_PERCENT_USED_CHR
                        ,REV_EST_DURATION_USED_CHR
                        ,BILLING_PROFILE_USED_CHR
                        ,EVN_THRESHOLD_AMT_CHR
                        ,ERN_THRESHOLD_AMT_CHR
                        ,RENEWAL_GRACE_DURATION_USED_CH
                        ,CONVERSION_RATE_CHR              --OKC
                        --,CONVERSION_RATE_DATE_CHR         --OKC
                        ,CONVERSION_EURO_RATE_CHR         --OKC
                        ,CUST_ACCT_ID_CHR                 --OKC
                        ,BILL_TO_SITE_USE_ID_CHR          --OKC
                        ,INV_RULE_ID_CHR                  --OKC
                        ,RENEWAL_NOTIFY_TO_CHR            --OKC
                        --,RENEWAL_END_DATE_CHR             --OKC
                        ,SHIP_TO_SITE_USE_ID_CHR          --OKC
                        ,PAYMENT_TERM_ID_CHR              --OKC
                        ,PRICE_LIST_ID_CHR  LIMIT p_batch_size; --OKC

       FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor fetched is l_hdr_rule_hist_csr2');
       FND_FILE.PUT_LINE(FND_FILE.LOG , 'FETCHED ROW COUNT = '|| CHR_ID.COUNT );
       EXIT WHEN CHR_ID.COUNT = 0 ;

    End IF;
        --End of If to choose the cursor to be fetched --

end if;


    ------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------
    -- Begin of code to validate data type .
    FOR a in CHR_ID.FIRST..CHR_ID.LAST
    LOOP
       --1. Validation for ARL rule .
       BEGIN
          ACCT_RULE_ID(1)      := ACCT_RULE_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'ARL',MAJOR_VERSION(a)) ;
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_ACCT_RULE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'ARL'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         , ACCT_RULE_ID_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );
       END;

       --2. Validation for CCR rule .
       BEGIN
          CC_BANK_ACCT_ID(1)      := CC_BANK_ACCT_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'CCR',MAJOR_VERSION(a)) ;
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CC_BANK_ACCT_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'CCR'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , CC_BANK_ACCT_ID_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION3'  ||L_ATTRIBUTE_NAME || CC_BANK_ACCT_ID_CHR(a)  );
       END;

       --3. Validation for GPR rule .
       BEGIN
          GRACE_DURATION(1)    := GRACE_DURATION_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'GPR',MAJOR_VERSION(a)) ;
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_GRACE_DURATION');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'GPR'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , GRACE_DURATION_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || GRACE_DURATION_CHR(a)  );
       END;

       --4. Validation for RVE rule .
       BEGIN
          EST_REV_PERCENT(1)      := EST_REV_PERCENT_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RVE',MAJOR_VERSION(a)) ;
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EST_REV_PERCENT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'RVE'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , EST_REV_PERCENT_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || EST_REV_PERCENT_CHR(a)  );
       END;

       --5. Validation for IRT rule.
       BEGIN
          TAX_AMOUNT(1)      := TAX_AMOUNT_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'IRT',MAJOR_VERSION(a)) ;
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_AMOUNT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'IRT'  ,'RULE_INFORMATION4'    ,L_ATTRIBUTE_NAME         , TAX_AMOUNT_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || TAX_AMOUNT_CHR(a)  );
       END;

       --6. Validation for TAX (TAX_CODE) rule.
       BEGIN
          TAX_CODE(1)      := TAX_CODE_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'TAX',MAJOR_VERSION(a)) ;
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_CODE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'TAX'  ,'OBJECT2_ID1'    ,L_ATTRIBUTE_NAME         , TAX_CODE_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT2_ID1' ||L_ATTRIBUTE_NAME || TAX_CODE_CHR(a)  );
       END;

       --7. Validation for TAX (TAX_EXEMPTION_ID) rule.
       BEGIN
          TAX_EXEMPTION_ID(1)      := TAX_EXEMPTION_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'TAX',MAJOR_VERSION(a));
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_EXEMPTION_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'TAX'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , TAX_EXEMPTION_ID_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || TAX_EXEMPTION_ID_CHR(a)  );
       END;


       --8. Validation for CAN  rule.
       BEGIN
          CUST_ACCT_ID(1)      := CUST_ACCT_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'CAN',MAJOR_VERSION(a));
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CUST_ACCT_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'CAN'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , CUST_ACCT_ID_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || CUST_ACCT_ID_CHR(a)  );
       END;

       --9. Validation for BTO  rule.
       BEGIN
          BILL_TO_SITE_USE_ID(1)      := BILL_TO_SITE_USE_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'BTO',MAJOR_VERSION(a));
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BILL_TO_SITE_USE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'BTO'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , BILL_TO_SITE_USE_ID_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || BILL_TO_SITE_USE_ID_CHR(a)  );
       END;


       --10. Validation for IRE  rule.
       BEGIN
          INV_RULE_ID(1)      := INV_RULE_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'IRE',MAJOR_VERSION(a));
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_INV_RULE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'IRE'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , INV_RULE_ID_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || INV_RULE_ID_CHR(a)  );
       END;

       --11. Validation for REN ( RENEWAL_NOTIFY_TO )  rule.
       BEGIN
          RENEWAL_NOTIFY_TO(1)      := RENEWAL_NOTIFY_TO_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'IRE',MAJOR_VERSION(a));
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_NOTIFY_TO');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'REN'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_NOTIFY_TO_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || RENEWAL_NOTIFY_TO_CHR(a)  );
       END;

       --12. Validation for STO rule.
       BEGIN
          SHIP_TO_SITE_USE_ID(1)      := SHIP_TO_SITE_USE_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'STO',MAJOR_VERSION(a));
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_SHIP_TO_SITE_USE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'STO'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , SHIP_TO_SITE_USE_ID_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || SHIP_TO_SITE_USE_ID_CHR(a)  );
       END;

       --13. Validation for PTR rule.
       BEGIN
          PAYMENT_TERM_ID(1)      := PAYMENT_TERM_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'PTR',MAJOR_VERSION(a));
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PAYMENT_TERM_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'PTR'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , PAYMENT_TERM_ID_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || PAYMENT_TERM_ID_CHR(a)  );
       END;

       --14. Validation for ERN rule.
       BEGIN
          BILLING_PROFILE_ID(1)      := BILLING_PROFILE_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'ERN',MAJOR_VERSION(a));
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BILLING_PROFILE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'ERN'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , BILLING_PROFILE_ID_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || BILLING_PROFILE_ID_CHR(a)  );
       END;


       --15. Validation for QTO ( QUOTE_TO_CONTACT_ID )rule.
       BEGIN
          QUOTE_TO_CONTACT_ID(1)      := QUOTE_TO_CONTACT_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'QTO',MAJOR_VERSION(a));
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_CONTACT_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'QTO'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_CONTACT_ID_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || QUOTE_TO_CONTACT_ID_CHR(a)  );
       END;

       --16. Validation for QTO ( QUOTE_TO_SITE_ID ) rule.
       BEGIN
          QUOTE_TO_SITE_ID(1)      := QUOTE_TO_SITE_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'QTO',MAJOR_VERSION(a));
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_SITE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'QTO'  ,'RULE_INFORMATION4'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_SITE_ID_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT2_ID1' ||L_ATTRIBUTE_NAME || QUOTE_TO_SITE_ID_CHR(a)  );
       END;

       --17. Validation for QTO ( QUOTE_TO_EMAIL_ID ) rule.
       BEGIN
          QUOTE_TO_EMAIL_ID(1)      := QUOTE_TO_EMAIL_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'QTO',MAJOR_VERSION(a));
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_EMAIL_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'QTO'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_EMAIL_ID_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION1'  ||L_ATTRIBUTE_NAME || QUOTE_TO_EMAIL_ID_CHR(a)  );
       END;

       --18. Validation for QTO ( QUOTE_TO_PHONE_ID ) rule.
       BEGIN
          QUOTE_TO_PHONE_ID(1)      := QUOTE_TO_PHONE_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'QTO',MAJOR_VERSION(a));
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_PHONE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'QTO'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_PHONE_ID_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || QUOTE_TO_PHONE_ID_CHR(a)  );
       END;

       --19. Validation for QTO ( QUOTE_TO_FAX_ID ) rule.
       BEGIN
          QUOTE_TO_FAX_ID(1)      := QUOTE_TO_FAX_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'QTO',MAJOR_VERSION(a));
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_FAX_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'QTO'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_FAX_ID_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION3' ||L_ATTRIBUTE_NAME || QUOTE_TO_FAX_ID_CHR(a)  );
       END;

       --20. Validation for RPT ( RENEWAL_PRICE_LIST ) rule.
       BEGIN
          RENEWAL_PRICE_LIST(1)      := RENEWAL_PRICE_LIST_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RPT',MAJOR_VERSION(a));
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_PRICE_LIST');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'RPT'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , RENEWAL_PRICE_LIST_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || RENEWAL_PRICE_LIST_CHR(a)  );
       END;

       --21. Validation for RPT ( RENEWAL_MARKUP_PERCENT ) rule.
       BEGIN
          RENEWAL_MARKUP_PERCENT(1)      := RENEWAL_MARKUP_PERCENT_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RPT',MAJOR_VERSION(a));
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_MARKUP_PERCENT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'RPT'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_MARKUP_PERCENT_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || RENEWAL_MARKUP_PERCENT_CHR(a)  );
       END;

       --22. Validation for RPT ( RENEWAL_GRACE_DURATION ) rule.
       BEGIN
          RENEWAL_GRACE_DURATION(1)      := RENEWAL_GRACE_DURATION_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RPT',MAJOR_VERSION(a));
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_GRACE_DURATION');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'RPT'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , RENEWAL_GRACE_DURATION_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION3' ||L_ATTRIBUTE_NAME || RENEWAL_GRACE_DURATION_CHR(a)  );
       END;

       --23. Validation for RER ( RENEWAL_EST_REV_PERCENT ) rule.
       BEGIN
          RENEWAL_EST_REV_PERCENT(1)      := RENEWAL_EST_REV_PERCENT_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RER',MAJOR_VERSION(a));
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_EREV_PERCENT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'RER'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , RENEWAL_EST_REV_PERCENT_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || RENEWAL_EST_REV_PERCENT_CHR(a)  );
       END;

       --24. Validation for RER ( RENEWAL_EST_REV_DURATION ) rule.
       BEGIN
          RENEWAL_EST_REV_DURATION(1)      := RENEWAL_EST_REV_DURATION_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RER',MAJOR_VERSION(a));
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_EREV_DURATION');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'RER'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_EST_REV_DURATION_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION2'  ||L_ATTRIBUTE_NAME || RENEWAL_EST_REV_DURATION_CHR(a)  );
       END;

       --25. Validation for RRU ( RENEWAL_PRICE_LIST_USED ) rule.
       BEGIN
          RENEWAL_PRICE_LIST_USED(1)      := RENEWAL_PRICE_LIST_USED_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RRU',MAJOR_VERSION(a));
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_PRICE_LIST_U');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'RRU'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , RENEWAL_PRICE_LIST_USED_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || RENEWAL_PRICE_LIST_USED_CHR(a)  );
       END;

       --26. Validation for RRU ( RENEWAL_NOTIFICATION_TO ) rule.
       BEGIN
          RENEWAL_NOTIFICATION_TO(1)      := RENEWAL_NOTIFICATION_TO_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RRU',MAJOR_VERSION(a));
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_NOTIFICATION');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'RRU'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_NOTIFICATION_TO_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || RENEWAL_NOTIFICATION_TO_CHR(a)  );
       END;

       --27. Validation for RRU ( RENEWAL_NOTIFICATION_TO ) rule.
       BEGIN
          RENEWAL_MARKUP_PERCENT_USED(1)      := RENEWAL_MARKUP_PERCENT_USED_CH(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RRU',MAJOR_VERSION(a));
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_MPERCENT_U');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'RRU'  ,'RULE_INFORMATION5'    ,L_ATTRIBUTE_NAME         , RENEWAL_MARKUP_PERCENT_USED_CH(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION5' ||L_ATTRIBUTE_NAME || RENEWAL_MARKUP_PERCENT_USED_CH(a)  );
       END;

       --28. Validation for RRU ( REV_EST_PERCENT_USED ) rule.
       BEGIN
          REV_EST_PERCENT_USED(1)      := REV_EST_PERCENT_USED_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RRU',MAJOR_VERSION(a));
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_REV_EST_PERCENT_U');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'RRU'  ,'RULE_INFORMATION6'    ,L_ATTRIBUTE_NAME         , REV_EST_PERCENT_USED_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION6' ||L_ATTRIBUTE_NAME || REV_EST_PERCENT_USED_CHR(a)  );
       END;

       --29. Validation for RRU ( REV_EST_DURATION_USED ) rule.
       BEGIN
          REV_EST_DURATION_USED(1)      := REV_EST_DURATION_USED_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RRU',MAJOR_VERSION(a));
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_REV_EST_DURATION_U');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'RRU'  ,'RULE_INFORMATION7'    ,L_ATTRIBUTE_NAME         , REV_EST_DURATION_USED_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION7'||L_ATTRIBUTE_NAME || REV_EST_DURATION_USED_CHR(a)  );
       END;

       --30. Validation for RRU ( BILLING_PROFILE_USED ) rule.
       BEGIN
          BILLING_PROFILE_USED(1)      := BILLING_PROFILE_USED_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RRU',MAJOR_VERSION(a));
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BILLING_PROFILE_U');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'RRU'  ,'RULE_INFORMATION9'    ,L_ATTRIBUTE_NAME         , BILLING_PROFILE_USED_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION9' ||L_ATTRIBUTE_NAME || BILLING_PROFILE_USED_CHR(a)  );
       END;

       --31. Validation for RRU ( EVN_THRESHOLD_AMT ) rule.
       BEGIN
          EVN_THRESHOLD_AMT(1)      := EVN_THRESHOLD_AMT_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RRU',MAJOR_VERSION(a));
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EVN_THRESHOLD_AMT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'RRU'  ,'RULE_INFORMATION11'    ,L_ATTRIBUTE_NAME         , EVN_THRESHOLD_AMT_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION11' ||L_ATTRIBUTE_NAME || EVN_THRESHOLD_AMT_CHR(a)  );
       END;

       --32. Validation for RRU ( ERN_THRESHOLD_AMT ) rule.
       BEGIN
          ERN_THRESHOLD_AMT(1)      := ERN_THRESHOLD_AMT_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RRU',MAJOR_VERSION(a));
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_ERN_THRESHOLD_AMT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'RRU'  ,'RULE_INFORMATION13'    ,L_ATTRIBUTE_NAME         , ERN_THRESHOLD_AMT_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION13' ||L_ATTRIBUTE_NAME || ERN_THRESHOLD_AMT_CHR(a)  );
       END;

       --33. Validation for RRE ( RENEWAL_GRACE_DURATION_USED ) rule.
       BEGIN
          RENEWAL_GRACE_DURATION_USED(1)      := RENEWAL_GRACE_DURATION_USED_CH(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RRE',MAJOR_VERSION(a));
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_GDURATION_U');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'RRE'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , RENEWAL_GRACE_DURATION_USED_CH(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || RENEWAL_GRACE_DURATION_USED_CH(a)  );
       END;

       --34. Validation for PRE ( PRICE_LIST_ID ) rule.
       BEGIN
          PRICE_LIST_ID(1)      := PRICE_LIST_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'PRE',MAJOR_VERSION(a));
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PRICE_LIST_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'PRE'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , PRICE_LIST_ID_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || PRICE_LIST_ID_CHR(a)  );
       END;

       --35. Validation for CVN ( CONVERSION_RATE ) rule.
       BEGIN
          CONVERSION_RATE(1)      := CONVERSION_RATE_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'CVN',MAJOR_VERSION(a));
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CONVERSION_RATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'CVN'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , CONVERSION_RATE_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || CONVERSION_RATE_CHR(a)  );
       END;

       --36. Validation for CVN ( CONVERSION_EURO_RATE ) rule.
       BEGIN
          CONVERSION_EURO_RATE(1)      := CONVERSION_EURO_RATE_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'CVN',MAJOR_VERSION(a));
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CONVERSION_EURO_RATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'CVN'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , CONVERSION_EURO_RATE_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION3' ||L_ATTRIBUTE_NAME || CONVERSION_EURO_RATE_CHR(a)  );
       END;

/*
       --37. Validation for CCR ( CC_EXPIRY_DATE ) rule.
       BEGIN
          CC_EXPIRY_DATE(1)      := to_date(CC_EXPIRY_DATE_CHR(a),'yyyy/mm/dd hh24:mi:ss');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'CCR',MAJOR_VERSION(a));
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CC_EXPIRY_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'CCR'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , CC_EXPIRY_DATE_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION2'  ||L_ATTRIBUTE_NAME || CC_EXPIRY_DATE_CHR(a)  );
       END;
*/

/*
       --38. Validation for RVE ( EST_REV_DATE ) rule.
       BEGIN
          EST_REV_DATE(1)      := to_date(EST_REV_DATE_CHR(a),'yyyy/mm/dd hh24:mi:ss');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RVE',MAJOR_VERSION(a));
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EST_REV_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'RVE'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , EST_REV_DATE_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || EST_REV_DATE_CHR(a)  );
       END;
*/

/*
       --39. Validation for REN ( RENEWAL_END_DATE ) rule.
       BEGIN
          RENEWAL_END_DATE(1)      := to_date(RENEWAL_END_DATE_CHR(a),'yyyy/mm/dd hh24:mi:ss');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'REN',MAJOR_VERSION(a));
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_END_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'REN'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , RENEWAL_END_DATE_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION3' ||L_ATTRIBUTE_NAME || RENEWAL_END_DATE_CHR(a)  );
       END;
*/

/*
       --40. Validation for REN ( CONVERSION_RATE_DATE ) rule.
       BEGIN
          CONVERSION_RATE_DATE(1)      := to_date(CONVERSION_RATE_DATE_CHR(a),'yyyy/mm/dd hh24:mi:ss');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'REN',MAJOR_VERSION(a));
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CONVERSION_RATE_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , MAJOR_VERSION(a),'HDRH',
                                      'CVN'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , CONVERSION_RATE_DATE_CHR(a),
                                       L_ERROR_MSG );
	--  FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || CONVERSION_RATE_DATE_CHR(a)  );
       END;
*/

    END LOOP;
    CHR_ID.DELETE;




    -- End of code to validate data type .
    ------------------------------------------------------------------------------------

 End Loop;


  If(l_hdr_rule_hist_csr1%ISOPEN) THEN
    Close  l_hdr_rule_hist_csr1;
  END IF;
  If(l_hdr_rule_hist_csr2%ISOPEN) THEN
    Close  l_hdr_rule_hist_csr2;
  End if;

  If(l_hdr_rule_hist_csr1_nus%ISOPEN) THEN
    Close  l_hdr_rule_hist_csr1_nus;
  END IF;
  If(l_hdr_rule_hist_csr2_nus%ISOPEN) THEN
    Close  l_hdr_rule_hist_csr2_nus;
  End if;


EXCEPTION
WHEN OTHERS THEN
  If(l_hdr_rule_hist_csr1%ISOPEN) THEN
    Close  l_hdr_rule_hist_csr1;
  END IF;
  If(l_hdr_rule_hist_csr2%ISOPEN) THEN
    Close  l_hdr_rule_hist_csr2;
  End if;
  If(l_hdr_rule_hist_csr1_nus%ISOPEN) THEN
    Close  l_hdr_rule_hist_csr1_nus;
  END IF;
  If(l_hdr_rule_hist_csr2_nus%ISOPEN) THEN
    Close  l_hdr_rule_hist_csr2_nus;
  End if;

END VALIDATE_HDR_HIST_RULE;

--------------------------------------------------------------------------------------------
--    This is the procedure called from VALIDATE_DATA1 to validate ALL rule data           --
--------------------------------------------------------------------------------------------
Procedure VALIDATE_ALL_RULE(
                            ERRBUF            OUT NOCOPY VARCHAR2 ,
                            RETCODE           OUT NOCOPY NUMBER ,
                            p_status          in VARCHAR2,
                            p_org_id          in NUMBER ,
                            p_batch_size      in NUMBER,
			    p_us_yn           in VARCHAR2,
                            p_id_low          in NUMBER,
                            p_id_hig          in NUMBER)
IS

Type l_num_tbl is table of  NUMBER         index  by BINARY_INTEGER ;
Type l_date_tbl is table of DATE           index  by BINARY_INTEGER ;
Type l_chr_tbl is table of  VARCHAR2(2000) index  by BINARY_INTEGER ;


ID                        l_num_tbl ;
CHR_ID                    l_num_tbl ;
CLE_ID                    l_num_tbl ;
DNZ_CHR_ID                l_num_tbl ;
ACCT_RULE_ID              l_num_tbl ;
PAYMENT_TYPE              L_CHR_TBL ;
CC_NO                     l_chr_tbl ;
CC_EXPIRY_DATE            l_date_tbl;
CC_BANK_ACCT_ID           l_num_tbl ;
CC_AUTH_CODE              l_chr_tbl ;
GRACE_DURATION            l_num_tbl ;
GRACE_PERIOD              l_chr_tbl ;
EST_REV_PERCENT           l_num_tbl ;
EST_REV_DATE              l_date_tbl;
INVOICE_TEXT              l_chr_tbl ;
INV_PRINT_FLAG            l_chr_tbl ;
PRICE_UOM                 l_chr_tbl ;
TAX_AMOUNT                l_num_tbl ;
TAX_INCLUSIVE_YN          l_chr_tbl ;
TAX_STATUS                l_chr_tbl ;
TAX_CODE                  l_num_tbl ;
TAX_EXEMPTION_ID          l_num_tbl ;
BILLING_SCHEDULE_TYPE     l_chr_tbl ;
CUST_ACCT_ID              l_num_tbl ;
BILL_TO_SITE_USE_ID       l_num_tbl ;
INV_RULE_ID               l_num_tbl ;
RENEWAL_TYPE_CODE         l_chr_tbl ;
RENEWAL_NOTIFY_TO         l_num_tbl ;
RENEWAL_END_DATE          l_date_tbl;
SHIP_TO_SITE_USE_ID       l_num_tbl ;
PAYMENT_TERM_ID           l_num_tbl ;
BILLING_PROFILE_ID        l_num_tbl ;
RENEWAL_STATUS            l_chr_tbl ;
ELECTRONIC_RENEWAL_FLAG   l_chr_tbl ;
QUOTE_TO_CONTACT_ID       l_num_tbl ;
QUOTE_TO_SITE_ID          l_num_tbl ;
QUOTE_TO_EMAIL_ID         l_num_tbl ;
QUOTE_TO_PHONE_ID         l_num_tbl ;
QUOTE_TO_FAX_ID           l_num_tbl ;
RENEWAL_PO_REQUIRED       l_chr_tbl ;
RENEWAL_PRICE_LIST        l_num_tbl ;
RENEWAL_PRICING_TYPE      l_chr_tbl ;
RENEWAL_MARKUP_PERCENT    l_num_tbl ;
RENEWAL_GRACE_DURATION    l_num_tbl ;
RENEWAL_GRACE_PERIOD      l_chr_tbl ;
RENEWAL_EST_REV_PERCENT   l_num_tbl ;
RENEWAL_EST_REV_DURATION  l_num_tbl ;
RENEWAL_EST_REV_PERIOD    l_chr_tbl ;
RENEWAL_PRICE_LIST_USED   l_num_tbl ;
RENEWAL_TYPE_USED         l_chr_tbl ;
RENEWAL_NOTIFICATION_TO   l_num_tbl ;
RENEWAL_PO_USED           l_chr_tbl ;
RENEWAL_PRICING_TYPE_USED l_chr_tbl ;
RENEWAL_MARKUP_PERCENT_USED   l_num_tbl ;
REV_EST_PERCENT_USED      l_num_tbl ;
REV_EST_DURATION_USED     l_num_tbl ;
BILLING_PROFILE_USED      l_num_tbl ;
REV_EST_PERIOD_USED       l_chr_tbl ;
ERN_FLAG_USED_YN          l_chr_tbl ;
EVN_THRESHOLD_AMT         l_num_tbl ;
EVN_THRESHOLD_CUR         l_chr_tbl ;
ERN_THRESHOLD_AMT         l_num_tbl ;
ERN_THRESHOLD_CUR         l_chr_tbl ;
RENEWAL_GRACE_DURATION_USED   l_num_tbl ;
RENEWAL_GRACE_PERIOD_USED l_chr_tbl ;
INV_TRX_TYPE              l_chr_tbl ;
INV_PRINT_PROFILE         l_chr_tbl ;
RENEWAL_PO_NUMBER         l_chr_tbl ;
AR_INTERFACE_YN           l_chr_tbl ;
HOLD_BILLING              l_chr_tbl ;
SUMMARY_TRX_YN            l_chr_tbl ;
SERVICE_PO_NUMBER         l_chr_tbl ;
SERVICE_PO_REQUIRED       l_chr_tbl ;
PRICE_LIST_ID             l_num_tbl ;
CONVERSION_TYPE           l_chr_tbl ;
CONVERSION_RATE           l_num_tbl ;
CONVERSION_RATE_DATE      l_date_tbl;
CONVERSION_EURO_RATE      l_num_tbl ;
----extra rules from line------------------
DISCOUNT_LIST		  l_num_tbl ;
CLVL_LIST_PRICE		  l_num_tbl ;
CLVL_QUANTITY		  l_num_tbl ;
CLVL_EXTENDED_AMT	  l_num_tbl ;
TOPLVL_OPERAND_VAL	  l_num_tbl ;
TOPLVL_QUANTITY		  l_num_tbl ;
TOPLVL_ADJ_PRICE	  l_num_tbl ;
TOPLVL_PRICE_QTY	  l_num_tbl ;
AVERAGING_INTERVAL	  l_num_tbl ;
MINIMUM_QUANTITY	  l_num_tbl ;
DEFAULT_QUANTITY	  l_num_tbl ;
FIXED_QUANTITY		  l_num_tbl ;
USAGE_DURATION		  l_num_tbl ;
BASE_READING		  l_num_tbl ;
EXCEPTION_COV_ID	  l_num_tbl ;
PM_PROGRAM_ID		  l_num_tbl ;
RCN_INCIDENT_SEVERITY_ID  l_num_tbl ;
RCN_PDF_ID		  l_num_tbl ;
LIMIT_UOM_QUANTIFIED	  l_num_tbl ;
DISCOUNT_AMOUNT		  l_num_tbl ;
DISCOUNT_PERCENT	  l_num_tbl ;
LEVEL_AMOUNT		  l_num_tbl ;



-- FOLLOWING ARE NUMBER FIELDS --
ACCT_RULE_ID_CHR              l_chr_tbl ;
CC_BANK_ACCT_ID_CHR           l_chr_tbl ;
GRACE_DURATION_CHR            l_chr_tbl ;
EST_REV_PERCENT_CHR           l_chr_tbl ;
TAX_AMOUNT_CHR                l_chr_tbl ;
TAX_CODE_CHR                  l_chr_tbl ;
TAX_EXEMPTION_ID_CHR          l_chr_tbl ;
CUST_ACCT_ID_CHR              l_chr_tbl ;
BILL_TO_SITE_USE_ID_CHR       l_chr_tbl ;
INV_RULE_ID_CHR               l_chr_tbl ;
RENEWAL_NOTIFY_TO_CHR         l_chr_tbl ;
SHIP_TO_SITE_USE_ID_CHR       l_chr_tbl ;
PAYMENT_TERM_ID_CHR           l_chr_tbl ;
BILLING_PROFILE_ID_CHR        l_chr_tbl ;
QUOTE_TO_CONTACT_ID_CHR       l_chr_tbl ;
QUOTE_TO_SITE_ID_CHR          l_chr_tbl ;
QUOTE_TO_EMAIL_ID_CHR         l_chr_tbl ;
QUOTE_TO_PHONE_ID_CHR         l_chr_tbl ;
QUOTE_TO_FAX_ID_CHR           l_chr_tbl ;
RENEWAL_PRICE_LIST_CHR        l_chr_tbl ;
RENEWAL_MARKUP_PERCENT_CHR    l_chr_tbl ;
RENEWAL_GRACE_DURATION_CHR    l_chr_tbl ;
RENEWAL_EST_REV_PERCENT_CHR   l_chr_tbl ;
RENEWAL_EST_REV_DURATION_CHR  l_chr_tbl ;
RENEWAL_PRICE_LIST_USED_CHR   l_chr_tbl ;
RENEWAL_NOTIFICATION_TO_CHR   l_chr_tbl ;
RENEWAL_MARKUP_PERCENT_USED_CH l_chr_tbl ;
REV_EST_PERCENT_USED_CHR      l_chr_tbl ;
REV_EST_DURATION_USED_CHR     l_chr_tbl ;
BILLING_PROFILE_USED_CHR      l_chr_tbl ;
EVN_THRESHOLD_AMT_CHR         l_chr_tbl ;
ERN_THRESHOLD_AMT_CHR         l_chr_tbl ;
RENEWAL_GRACE_DURATION_USED_CH l_chr_tbl ;
PRICE_LIST_ID_CHR             l_chr_tbl ;
CONVERSION_RATE_CHR           l_chr_tbl ;
CONVERSION_EURO_RATE_CHR      l_chr_tbl ;
----extra rules from line------------------
DISCOUNT_LIST_CHR       	l_chr_tbl ;
CLVL_LIST_PRICE_CHR		l_chr_tbl ;
CLVL_QUANTITY_CHR		l_chr_tbl ;
CLVL_EXTENDED_AMT_CHR		l_chr_tbl ;
TOPLVL_OPERAND_VAL_CHR		l_chr_tbl ;
TOPLVL_QUANTITY_CHR		l_chr_tbl ;
TOPLVL_ADJ_PRICE_CHR		l_chr_tbl ;
TOPLVL_PRICE_QTY_CHR		l_chr_tbl ;
AVERAGING_INTERVAL_CHR		l_chr_tbl ;
MINIMUM_QUANTITY_CHR		l_chr_tbl ;
DEFAULT_QUANTITY_CHR		l_chr_tbl ;
FIXED_QUANTITY_CHR		l_chr_tbl ;
USAGE_DURATION_CHR		l_chr_tbl ;
BASE_READING_CHR		l_chr_tbl ;
EXCEPTION_COV_ID_CHR		l_chr_tbl ;
PM_PROGRAM_ID_CHR		l_chr_tbl ;
RCN_INCIDENT_SEVERITY_ID_CHR	l_chr_tbl ;
RCN_PDF_ID_CHR			l_chr_tbl ;
LIMIT_UOM_QUANTIFIED_CHR	l_chr_tbl ;
DISCOUNT_AMOUNT_CHR		l_chr_tbl ;
DISCOUNT_PERCENT_CHR		l_chr_tbl ;
LEVEL_AMOUNT_CHR		l_chr_tbl ;

-- FOLLOWING ARE DATE FIELDS --
CC_EXPIRY_DATE_CHR            l_chr_tbl ;
EST_REV_DATE_CHR              l_chr_tbl ;
RENEWAL_END_DATE_CHR          l_chr_tbl ;
CONVERSION_RATE_DATE_CHR      l_chr_tbl ;

--Misc Variables --
L_ATTRIBUTE_NAME              VARCHAR2(2000);
L_ERROR_MSG                   VARCHAR2(2000);

l_us_yn                       BOOLEAN;
-------------------------------------------------------------------------------
-- The following is the cursor opened if all the parameters passed are null  --
-------------------------------------------------------------------------------
CURSOR l_hdr_rule_csr1 (p_id_low in NUMBER , p_id_hig in NUMBER )is
SELECT * FROM (
SELECT  RGP.CHR_ID CHR_ID
       ,RGP.CLE_ID
       ,RGP.DNZ_CHR_ID DNZ_CHR_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)))
            ACCT_RULE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' , '!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)))
            CC_BANK_ACCT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)))
            GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)), NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)))
            EST_REV_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!' ),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)))
            TAX_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' , '!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)))
            TAX_CODE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)))
            TAX_EXEMPTION_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)))
            BILLING_PROFILE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)))
            QUOTE_TO_CONTACT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT2_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4)))
            QUOTE_TO_SITE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)))
            QUOTE_TO_EMAIL_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)))
            QUOTE_TO_PHONE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)))
            QUOTE_TO_FAX_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)))
            RENEWAL_PRICE_LIST
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)))
            RENEWAL_MARKUP_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)))
            RENEWAL_GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)))
            RENEWAL_EST_REV_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)))
            RENEWAL_EST_REV_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)))
            RENEWAL_PRICE_LIST_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)))
            RENEWAL_NOTIFICATION_TO
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)))
            RENEWAL_MARKUP_PERCENT_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)))
            REV_EST_PERCENT_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)))
            REV_EST_DURATION_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)))
            BILLING_PROFILE_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)))
            EVN_THRESHOLD_AMT
        ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),
	    '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)))
            ERN_THRESHOLD_AMT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)))
            RENEWAL_GRACE_DURATION_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)))
            CONVERSION_RATE --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)))
            CONVERSION_EURO_RATE --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)))
            CUST_ACCT_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)))
            BILL_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)))
            INV_RULE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)))
            RENEWAL_NOTIFY_TO --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)))
            SHIP_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)))
            PAYMENT_TERM_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)))
            PRICE_LIST_ID --OKC
       ----------------------Extra Rules for lines added------------------------------------------
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)))
               DISCOUNT_LIST
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)))
               CLVL_LIST_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)))
               CLVL_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)))
               CLVL_EXTENDED_AMT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)))
               TOPLVL_OPERAND_VAL
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)))
               TOPLVL_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)))
               TOPLVL_ADJ_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)))
               TOPLVL_PRICE_QTY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)))
               AVERAGING_INTERVAL
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)))
               MINIMUM_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)))
               DEFAULT_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)))
               FIXED_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)))
               USAGE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)))
               BASE_READING
        ----------------------------- COVERAGE CODE START -------------------------------------------------
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)))
               EXCEPTION_COV_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)))
               PM_PROGRAM_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)))
               RCN_INCIDENT_SEVERITY_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)))
               RCN_PDF_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)))
               LIMIT_UOM_QUANTIFIED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)))
               DISCOUNT_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)))
               DISCOUNT_PERCENT
        ----------------------------- COVERAGE CODE END ----------------------------------------------------
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)))
               LEVEL_AMOUNT

FROM OKC_RULE_GROUPS_B RGP
   , OKC_RULES_B RUL
WHERE rgp.id = rul.rgp_id
  AND rgp.rgd_code = 'SVC_K'
  AND   RUL.RULE_INFORMATION_CATEGORY IN
       ('ARL','CCR','GPR','RVE','IRT','TAX','ERN','QTO', 'RPO', 'RPT','RER', 'RRU',
        'RRE', 'SBG', 'SPO','SLH','PRE', 'CVN','CAN', 'BTO', 'IRE', 'REN', 'STO', 'PTR',
	'DST','PDL','QRE','ECE','PMP','RCN','LMT','SLL')
  AND RGP.DNZ_CHR_ID = RUL.DNZ_CHR_ID
  AND RGP.ID BETWEEN P_ID_LOW  AND P_ID_HIG
  GROUP BY rgp.chr_id,rgp.cle_id,rgp.dnz_chr_id )
WHERE
  ACCT_RULE_ID    IS NOT NULL OR
  CC_BANK_ACCT_ID IS NOT NULL OR
  GRACE_DURATION  IS NOT NULL OR
  EST_REV_PERCENT IS NOT NULL OR
  TAX_AMOUNT      IS NOT NULL OR
  TAX_CODE        IS NOT NULL OR
  TAX_EXEMPTION_ID    IS NOT NULL OR
  BILLING_PROFILE_ID  IS NOT NULL OR
  QUOTE_TO_CONTACT_ID IS NOT NULL OR
  QUOTE_TO_SITE_ID    IS NOT NULL OR
  QUOTE_TO_EMAIL_ID   IS NOT NULL OR
  QUOTE_TO_PHONE_ID   IS NOT NULL OR
  QUOTE_TO_FAX_ID     IS NOT NULL OR
  RENEWAL_PRICE_LIST  IS NOT NULL OR
  RENEWAL_MARKUP_PERCENT   IS NOT NULL OR
  RENEWAL_GRACE_DURATION   IS NOT NULL OR
  RENEWAL_EST_REV_PERCENT  IS NOT NULL OR
  RENEWAL_EST_REV_DURATION IS NOT NULL OR
  RENEWAL_PRICE_LIST_USED  IS NOT NULL OR
  RENEWAL_NOTIFICATION_TO  IS NOT NULL OR
  RENEWAL_MARKUP_PERCENT_USED IS NOT NULL OR
  REV_EST_PERCENT_USED  IS NOT NULL OR
  REV_EST_DURATION_USED IS NOT NULL OR
  BILLING_PROFILE_USED  IS NOT NULL OR
  EVN_THRESHOLD_AMT  IS NOT NULL OR
  ERN_THRESHOLD_AMT  IS NOT NULL OR
  RENEWAL_GRACE_DURATION_USED IS NOT NULL OR
  CONVERSION_RATE     IS NOT NULL OR
  CONVERSION_EURO_RATE IS NOT NULL OR
  CUST_ACCT_ID        IS NOT NULL OR
  BILL_TO_SITE_USE_ID IS NOT NULL OR
  INV_RULE_ID         IS NOT NULL OR
  RENEWAL_NOTIFY_TO   IS NOT NULL OR
  SHIP_TO_SITE_USE_ID IS NOT NULL OR
  PAYMENT_TERM_ID     IS NOT NULL OR
 PRICE_LIST_ID       IS NOT NULL OR
   -----extra line rules added---------------------
  DISCOUNT_LIST	      IS NOT NULL OR
  CLVL_LIST_PRICE     IS NOT NULL OR
  CLVL_QUANTITY       IS NOT NULL OR
  CLVL_EXTENDED_AMT   IS NOT NULL OR
  TOPLVL_OPERAND_VAL  IS NOT NULL OR
  TOPLVL_QUANTITY     IS NOT NULL OR
  TOPLVL_ADJ_PRICE    IS NOT NULL OR
  TOPLVL_PRICE_QTY    IS NOT NULL OR
  AVERAGING_INTERVAL  IS NOT NULL OR
  MINIMUM_QUANTITY    IS NOT NULL OR
  DEFAULT_QUANTITY    IS NOT NULL OR
  FIXED_QUANTITY      IS NOT NULL OR
  USAGE_DURATION      IS NOT NULL OR
  BASE_READING        IS NOT NULL OR
  EXCEPTION_COV_ID    IS NOT NULL OR
  PM_PROGRAM_ID       IS NOT NULL OR
  RCN_INCIDENT_SEVERITY_ID IS NOT NULL OR
  RCN_PDF_ID           IS NOT NULL OR
  LIMIT_UOM_QUANTIFIED IS NOT NULL OR
  DISCOUNT_AMOUNT      IS NOT NULL OR
  DISCOUNT_PERCENT     IS NOT NULL OR
  LEVEL_AMOUNT         IS NOT NULL;




-------------------------------------------------------------------------------
-- The following is the cursor opened if any of the following parameters are --
-- passed to the concurrent request                                          --
-- 1. p_status
-- 2. p_org_id
-------------------------------------------------------------------------------
CURSOR l_hdr_rule_csr2 (p_id_low in NUMBER , p_id_hig in NUMBER , p_status in VARCHAR2 , p_org_id in NUMBER )is
SELECT * FROM (
SELECT  RGP.CHR_ID CHR_ID
       ,RGP.CLE_ID
       ,RGP.DNZ_CHR_ID DNZ_CHR_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)))
            ACCT_RULE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' , '!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)))
            CC_BANK_ACCT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)))
            GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)), NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)))
            EST_REV_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!' ),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)))
            TAX_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' , '!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)))
            TAX_CODE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)))
            TAX_EXEMPTION_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)))
            BILLING_PROFILE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)))
            QUOTE_TO_CONTACT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT2_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4)))
            QUOTE_TO_SITE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)))
            QUOTE_TO_EMAIL_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)))
            QUOTE_TO_PHONE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)))
            QUOTE_TO_FAX_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)))
            RENEWAL_PRICE_LIST
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)))
            RENEWAL_MARKUP_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)))
            RENEWAL_GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)))
            RENEWAL_EST_REV_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)))
            RENEWAL_EST_REV_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)))
            RENEWAL_PRICE_LIST_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)))
            RENEWAL_NOTIFICATION_TO
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)))
            RENEWAL_MARKUP_PERCENT_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)))
            REV_EST_PERCENT_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)))
            REV_EST_DURATION_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)))
            BILLING_PROFILE_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)))
            EVN_THRESHOLD_AMT
        ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),
	    '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)))
            ERN_THRESHOLD_AMT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)))
            RENEWAL_GRACE_DURATION_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)))
            CONVERSION_RATE --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)))
            CONVERSION_EURO_RATE --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)))
            CUST_ACCT_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)))
            BILL_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)))
            INV_RULE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)))
            RENEWAL_NOTIFY_TO --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)))
            SHIP_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)))
            PAYMENT_TERM_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)))
            PRICE_LIST_ID --OKC
       ----------------------Extra Rules for lines added------------------------------------------
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)))
               DISCOUNT_LIST
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)))
               CLVL_LIST_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)))
               CLVL_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)))
               CLVL_EXTENDED_AMT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)))
               TOPLVL_OPERAND_VAL
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)))
               TOPLVL_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)))
               TOPLVL_ADJ_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)))
               TOPLVL_PRICE_QTY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)))
               AVERAGING_INTERVAL
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)))
               MINIMUM_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)))
               DEFAULT_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)))
               FIXED_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)))
               USAGE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)))
               BASE_READING
        ----------------------------- COVERAGE CODE START -------------------------------------------------
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)))
               EXCEPTION_COV_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)))
               PM_PROGRAM_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)))
               RCN_INCIDENT_SEVERITY_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)))
               RCN_PDF_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)))
               LIMIT_UOM_QUANTIFIED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)))
               DISCOUNT_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)))
               DISCOUNT_PERCENT
        ----------------------------- COVERAGE CODE END ----------------------------------------------------
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)))
               LEVEL_AMOUNT

FROM OKC_RULE_GROUPS_B RGP
   , OKC_RULES_B RUL
   , OKC_K_HEADERS_B HDR
WHERE rgp.id = rul.rgp_id
  and rgp.rgd_code = 'SVC_K'
  AND   RUL.RULE_INFORMATION_CATEGORY IN
       ('ARL','CCR','GPR','RVE','IRT','TAX','ERN','QTO', 'RPO', 'RPT','RER', 'RRU',
        'RRE', 'SBG', 'SPO','SLH','PRE', 'CVN','CAN', 'BTO', 'IRE', 'REN', 'STO', 'PTR',
	'DST','PDL','QRE','ECE','PMP','RCN','LMT','SLL')
  AND HDR.ID BETWEEN P_ID_LOW  AND P_ID_HIG
  AND HDR.ID = RGP.DNZ_CHR_ID
  AND RGP.DNZ_CHR_ID = RUL.DNZ_CHR_ID
  AND HDR.ID = RUL.DNZ_CHR_ID
  AND HDR.STS_CODE = nvl(p_status,HDR.STS_CODE)
  AND HDR.AUTHORING_ORG_ID = nvl(P_ORG_ID, HDR.AUTHORING_ORG_ID)
  GROUP BY rgp.chr_id,rgp.cle_id,rgp.dnz_chr_id )
WHERE
  ACCT_RULE_ID    IS NOT NULL OR
  CC_BANK_ACCT_ID IS NOT NULL OR
  GRACE_DURATION  IS NOT NULL OR
  EST_REV_PERCENT IS NOT NULL OR
  TAX_AMOUNT      IS NOT NULL OR
  TAX_CODE        IS NOT NULL OR
  TAX_EXEMPTION_ID    IS NOT NULL OR
  BILLING_PROFILE_ID  IS NOT NULL OR
  QUOTE_TO_CONTACT_ID IS NOT NULL OR
  QUOTE_TO_SITE_ID    IS NOT NULL OR
  QUOTE_TO_EMAIL_ID   IS NOT NULL OR
  QUOTE_TO_PHONE_ID   IS NOT NULL OR
  QUOTE_TO_FAX_ID     IS NOT NULL OR
  RENEWAL_PRICE_LIST  IS NOT NULL OR
  RENEWAL_MARKUP_PERCENT   IS NOT NULL OR
  RENEWAL_GRACE_DURATION   IS NOT NULL OR
  RENEWAL_EST_REV_PERCENT  IS NOT NULL OR
  RENEWAL_EST_REV_DURATION IS NOT NULL OR
  RENEWAL_PRICE_LIST_USED  IS NOT NULL OR
  RENEWAL_NOTIFICATION_TO  IS NOT NULL OR
  RENEWAL_MARKUP_PERCENT_USED IS NOT NULL OR
  REV_EST_PERCENT_USED  IS NOT NULL OR
  REV_EST_DURATION_USED IS NOT NULL OR
  BILLING_PROFILE_USED  IS NOT NULL OR
  EVN_THRESHOLD_AMT  IS NOT NULL OR
  ERN_THRESHOLD_AMT  IS NOT NULL OR
  RENEWAL_GRACE_DURATION_USED IS NOT NULL OR
  CONVERSION_RATE     IS NOT NULL OR
  CONVERSION_EURO_RATE IS NOT NULL OR
  CUST_ACCT_ID        IS NOT NULL OR
  BILL_TO_SITE_USE_ID IS NOT NULL OR
  INV_RULE_ID         IS NOT NULL OR
  RENEWAL_NOTIFY_TO   IS NOT NULL OR
  SHIP_TO_SITE_USE_ID IS NOT NULL OR
  PAYMENT_TERM_ID     IS NOT NULL OR
  PRICE_LIST_ID       IS NOT NULL OR
  -----extra line rules added---------------------
  DISCOUNT_LIST	      IS NOT NULL OR
  CLVL_LIST_PRICE     IS NOT NULL OR
  CLVL_QUANTITY       IS NOT NULL OR
  CLVL_EXTENDED_AMT   IS NOT NULL OR
  TOPLVL_OPERAND_VAL  IS NOT NULL OR
  TOPLVL_QUANTITY     IS NOT NULL OR
  TOPLVL_ADJ_PRICE    IS NOT NULL OR
  TOPLVL_PRICE_QTY    IS NOT NULL OR
  AVERAGING_INTERVAL  IS NOT NULL OR
  MINIMUM_QUANTITY    IS NOT NULL OR
  DEFAULT_QUANTITY    IS NOT NULL OR
  FIXED_QUANTITY      IS NOT NULL OR
  USAGE_DURATION      IS NOT NULL OR
  BASE_READING        IS NOT NULL OR
  EXCEPTION_COV_ID    IS NOT NULL OR
  PM_PROGRAM_ID       IS NOT NULL OR
  RCN_INCIDENT_SEVERITY_ID IS NOT NULL OR
  RCN_PDF_ID           IS NOT NULL OR
  LIMIT_UOM_QUANTIFIED IS NOT NULL OR
  DISCOUNT_AMOUNT      IS NOT NULL OR
  DISCOUNT_PERCENT     IS NOT NULL OR
  LEVEL_AMOUNT         IS NOT NULL;



-------------------------------------------------------------------------------
-- The following is the cursor opened if all the parameters passed are null  --
-------------------------------------------------------------------------------
CURSOR l_hdr_rule_csr1_nus (p_id_low in NUMBER , p_id_hig in NUMBER )is
SELECT * FROM (
SELECT  RGP.CHR_ID CHR_ID
       ,RGP.CLE_ID
       ,RGP.DNZ_CHR_ID DNZ_CHR_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)))
            ACCT_RULE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' , '!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)))
            CC_BANK_ACCT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)))
            GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)), NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)))
            EST_REV_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!' ),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)))
            TAX_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' , '!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)))
            TAX_CODE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)))
            TAX_EXEMPTION_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)))
            BILLING_PROFILE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)))
            QUOTE_TO_CONTACT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT2_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4)))
            QUOTE_TO_SITE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)))
            QUOTE_TO_EMAIL_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)))
            QUOTE_TO_PHONE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)))
            QUOTE_TO_FAX_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)))
            RENEWAL_PRICE_LIST
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)))
            RENEWAL_MARKUP_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)))
            RENEWAL_GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)))
            RENEWAL_EST_REV_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)))
            RENEWAL_EST_REV_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)))
            RENEWAL_PRICE_LIST_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)))
            RENEWAL_NOTIFICATION_TO
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)))
            RENEWAL_MARKUP_PERCENT_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)))
            REV_EST_PERCENT_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)))
            REV_EST_DURATION_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)))
            BILLING_PROFILE_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)))
            EVN_THRESHOLD_AMT
        ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),
	    '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)))
            ERN_THRESHOLD_AMT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)))
            RENEWAL_GRACE_DURATION_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)))
            CONVERSION_RATE --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)))
            CONVERSION_EURO_RATE --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)))
            CUST_ACCT_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)))
            BILL_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)))
            INV_RULE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)))
            RENEWAL_NOTIFY_TO --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)))
            SHIP_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)))
            PAYMENT_TERM_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)))
            PRICE_LIST_ID --OKC
       ----------------------Extra Rules for lines added------------------------------------------
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)))
               DISCOUNT_LIST
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)))
               CLVL_LIST_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)))
               CLVL_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)))
               CLVL_EXTENDED_AMT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)))
               TOPLVL_OPERAND_VAL
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)))
               TOPLVL_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)))
               TOPLVL_ADJ_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)))
               TOPLVL_PRICE_QTY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)))
               AVERAGING_INTERVAL
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)))
               MINIMUM_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)))
               DEFAULT_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)))
               FIXED_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)))
               USAGE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)))
               BASE_READING
        ----------------------------- COVERAGE CODE START -------------------------------------------------
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)))
               EXCEPTION_COV_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)))
               PM_PROGRAM_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)))
               RCN_INCIDENT_SEVERITY_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)))
               RCN_PDF_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)))
               LIMIT_UOM_QUANTIFIED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)))
               DISCOUNT_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)))
               DISCOUNT_PERCENT
        ----------------------------- COVERAGE CODE END ----------------------------------------------------
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)))
               LEVEL_AMOUNT

FROM OKC_RULE_GROUPS_B RGP
   , OKC_RULES_B RUL
WHERE rgp.id = rul.rgp_id
  AND rgp.rgd_code = 'SVC_K'
  AND   RUL.RULE_INFORMATION_CATEGORY IN
       ('ARL','CCR','GPR','RVE','IRT','TAX','ERN','QTO', 'RPO', 'RPT','RER', 'RRU',
        'RRE', 'SBG', 'SPO','SLH','PRE', 'CVN','CAN', 'BTO', 'IRE', 'REN', 'STO', 'PTR',
	'DST','PDL','QRE','ECE','PMP','RCN','LMT','SLL')
  AND RGP.DNZ_CHR_ID = RUL.DNZ_CHR_ID
  AND RGP.ID BETWEEN P_ID_LOW  AND P_ID_HIG
  GROUP BY rgp.chr_id,rgp.cle_id,rgp.dnz_chr_id )
WHERE
  ACCT_RULE_ID    IS NOT NULL OR
  CC_BANK_ACCT_ID IS NOT NULL OR
  GRACE_DURATION  IS NOT NULL OR
  EST_REV_PERCENT IS NOT NULL OR
  TAX_AMOUNT      IS NOT NULL OR
  TAX_CODE        IS NOT NULL OR
  TAX_EXEMPTION_ID    IS NOT NULL OR
  BILLING_PROFILE_ID  IS NOT NULL OR
  QUOTE_TO_CONTACT_ID IS NOT NULL OR
  QUOTE_TO_SITE_ID    IS NOT NULL OR
  QUOTE_TO_EMAIL_ID   IS NOT NULL OR
  QUOTE_TO_PHONE_ID   IS NOT NULL OR
  QUOTE_TO_FAX_ID     IS NOT NULL OR
  RENEWAL_PRICE_LIST  IS NOT NULL OR
  RENEWAL_MARKUP_PERCENT   IS NOT NULL OR
  RENEWAL_GRACE_DURATION   IS NOT NULL OR
  RENEWAL_EST_REV_PERCENT  IS NOT NULL OR
  RENEWAL_EST_REV_DURATION IS NOT NULL OR
  RENEWAL_PRICE_LIST_USED  IS NOT NULL OR
  RENEWAL_NOTIFICATION_TO  IS NOT NULL OR
  RENEWAL_MARKUP_PERCENT_USED IS NOT NULL OR
  REV_EST_PERCENT_USED  IS NOT NULL OR
  REV_EST_DURATION_USED IS NOT NULL OR
  BILLING_PROFILE_USED  IS NOT NULL OR
  EVN_THRESHOLD_AMT  IS NOT NULL OR
  ERN_THRESHOLD_AMT  IS NOT NULL OR
  RENEWAL_GRACE_DURATION_USED IS NOT NULL OR
  CONVERSION_RATE     IS NOT NULL OR
  CONVERSION_EURO_RATE IS NOT NULL OR
  CUST_ACCT_ID        IS NOT NULL OR
  BILL_TO_SITE_USE_ID IS NOT NULL OR
  INV_RULE_ID         IS NOT NULL OR
  RENEWAL_NOTIFY_TO   IS NOT NULL OR
  SHIP_TO_SITE_USE_ID IS NOT NULL OR
  PAYMENT_TERM_ID     IS NOT NULL OR
 PRICE_LIST_ID       IS NOT NULL OR
   -----extra line rules added---------------------
  DISCOUNT_LIST	      IS NOT NULL OR
  CLVL_LIST_PRICE     IS NOT NULL OR
  CLVL_QUANTITY       IS NOT NULL OR
  CLVL_EXTENDED_AMT   IS NOT NULL OR
  TOPLVL_OPERAND_VAL  IS NOT NULL OR
  TOPLVL_QUANTITY     IS NOT NULL OR
  TOPLVL_ADJ_PRICE    IS NOT NULL OR
  TOPLVL_PRICE_QTY    IS NOT NULL OR
  AVERAGING_INTERVAL  IS NOT NULL OR
  MINIMUM_QUANTITY    IS NOT NULL OR
  DEFAULT_QUANTITY    IS NOT NULL OR
  FIXED_QUANTITY      IS NOT NULL OR
  USAGE_DURATION      IS NOT NULL OR
  BASE_READING        IS NOT NULL OR
  EXCEPTION_COV_ID    IS NOT NULL OR
  PM_PROGRAM_ID       IS NOT NULL OR
  RCN_INCIDENT_SEVERITY_ID IS NOT NULL OR
  RCN_PDF_ID           IS NOT NULL OR
  LIMIT_UOM_QUANTIFIED IS NOT NULL OR
  DISCOUNT_AMOUNT      IS NOT NULL OR
  DISCOUNT_PERCENT     IS NOT NULL OR
  LEVEL_AMOUNT         IS NOT NULL;




-------------------------------------------------------------------------------
-- The following is the cursor opened if any of the following parameters are --
-- passed to the concurrent request                                          --
-- 1. p_status
-- 2. p_org_id
-------------------------------------------------------------------------------
CURSOR l_hdr_rule_csr2_nus (p_id_low in NUMBER , p_id_hig in NUMBER , p_status in VARCHAR2 , p_org_id in NUMBER )is
SELECT * FROM (
SELECT  RGP.CHR_ID CHR_ID
       ,RGP.CLE_ID
       ,RGP.DNZ_CHR_ID DNZ_CHR_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)))
            ACCT_RULE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' , '!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)))
            CC_BANK_ACCT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)))
            GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)), NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)))
            EST_REV_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!' ),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)))
            TAX_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' , '!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)))
            TAX_CODE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)))
            TAX_EXEMPTION_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)))
            BILLING_PROFILE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)))
            QUOTE_TO_CONTACT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT2_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4)))
            QUOTE_TO_SITE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)))
            QUOTE_TO_EMAIL_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)))
            QUOTE_TO_PHONE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)))
            QUOTE_TO_FAX_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)))
            RENEWAL_PRICE_LIST
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)))
            RENEWAL_MARKUP_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)))
            RENEWAL_GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)))
            RENEWAL_EST_REV_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)))
            RENEWAL_EST_REV_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)))
            RENEWAL_PRICE_LIST_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)))
            RENEWAL_NOTIFICATION_TO
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)))
            RENEWAL_MARKUP_PERCENT_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)))
            REV_EST_PERCENT_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)))
            REV_EST_DURATION_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)))
            BILLING_PROFILE_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)))
            EVN_THRESHOLD_AMT
        ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),
	    '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)))
            ERN_THRESHOLD_AMT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)))
            RENEWAL_GRACE_DURATION_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)))
            CONVERSION_RATE --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)))
            CONVERSION_EURO_RATE --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)))
            CUST_ACCT_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)))
            BILL_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)))
            INV_RULE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)))
            RENEWAL_NOTIFY_TO --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)))
            SHIP_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)))
            PAYMENT_TERM_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)))
            PRICE_LIST_ID --OKC
       ----------------------Extra Rules for lines added------------------------------------------
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)))
               DISCOUNT_LIST
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)))
               CLVL_LIST_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)))
               CLVL_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)))
               CLVL_EXTENDED_AMT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)))
               TOPLVL_OPERAND_VAL
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)))
               TOPLVL_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)))
               TOPLVL_ADJ_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)))
               TOPLVL_PRICE_QTY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)))
               AVERAGING_INTERVAL
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)))
               MINIMUM_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)))
               DEFAULT_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)))
               FIXED_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)))
               USAGE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)))
               BASE_READING
        ----------------------------- COVERAGE CODE START -------------------------------------------------
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)))
               EXCEPTION_COV_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)))
               PM_PROGRAM_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)))
               RCN_INCIDENT_SEVERITY_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)))
               RCN_PDF_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)))
               LIMIT_UOM_QUANTIFIED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)))
               DISCOUNT_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)))
               DISCOUNT_PERCENT
        ----------------------------- COVERAGE CODE END ----------------------------------------------------
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)))
               LEVEL_AMOUNT

FROM OKC_RULE_GROUPS_B RGP
   , OKC_RULES_B RUL
   , OKC_K_HEADERS_B HDR
WHERE rgp.id = rul.rgp_id
  and rgp.rgd_code = 'SVC_K'
  AND   RUL.RULE_INFORMATION_CATEGORY IN
       ('ARL','CCR','GPR','RVE','IRT','TAX','ERN','QTO', 'RPO', 'RPT','RER', 'RRU',
        'RRE', 'SBG', 'SPO','SLH','PRE', 'CVN','CAN', 'BTO', 'IRE', 'REN', 'STO', 'PTR',
	'DST','PDL','QRE','ECE','PMP','RCN','LMT','SLL')
  AND HDR.ID BETWEEN P_ID_LOW  AND P_ID_HIG
  AND HDR.ID = RGP.DNZ_CHR_ID
  AND RGP.DNZ_CHR_ID = RUL.DNZ_CHR_ID
  AND HDR.ID = RUL.DNZ_CHR_ID
  AND HDR.STS_CODE = nvl(p_status,HDR.STS_CODE)
  AND HDR.AUTHORING_ORG_ID = nvl(P_ORG_ID, HDR.AUTHORING_ORG_ID)
  GROUP BY rgp.chr_id,rgp.cle_id,rgp.dnz_chr_id )
WHERE
  ACCT_RULE_ID    IS NOT NULL OR
  CC_BANK_ACCT_ID IS NOT NULL OR
  GRACE_DURATION  IS NOT NULL OR
  EST_REV_PERCENT IS NOT NULL OR
  TAX_AMOUNT      IS NOT NULL OR
  TAX_CODE        IS NOT NULL OR
  TAX_EXEMPTION_ID    IS NOT NULL OR
  BILLING_PROFILE_ID  IS NOT NULL OR
  QUOTE_TO_CONTACT_ID IS NOT NULL OR
  QUOTE_TO_SITE_ID    IS NOT NULL OR
  QUOTE_TO_EMAIL_ID   IS NOT NULL OR
  QUOTE_TO_PHONE_ID   IS NOT NULL OR
  QUOTE_TO_FAX_ID     IS NOT NULL OR
  RENEWAL_PRICE_LIST  IS NOT NULL OR
  RENEWAL_MARKUP_PERCENT   IS NOT NULL OR
  RENEWAL_GRACE_DURATION   IS NOT NULL OR
  RENEWAL_EST_REV_PERCENT  IS NOT NULL OR
  RENEWAL_EST_REV_DURATION IS NOT NULL OR
  RENEWAL_PRICE_LIST_USED  IS NOT NULL OR
  RENEWAL_NOTIFICATION_TO  IS NOT NULL OR
  RENEWAL_MARKUP_PERCENT_USED IS NOT NULL OR
  REV_EST_PERCENT_USED  IS NOT NULL OR
  REV_EST_DURATION_USED IS NOT NULL OR
  BILLING_PROFILE_USED  IS NOT NULL OR
  EVN_THRESHOLD_AMT  IS NOT NULL OR
  ERN_THRESHOLD_AMT  IS NOT NULL OR
  RENEWAL_GRACE_DURATION_USED IS NOT NULL OR
  CONVERSION_RATE     IS NOT NULL OR
  CONVERSION_EURO_RATE IS NOT NULL OR
  CUST_ACCT_ID        IS NOT NULL OR
  BILL_TO_SITE_USE_ID IS NOT NULL OR
  INV_RULE_ID         IS NOT NULL OR
  RENEWAL_NOTIFY_TO   IS NOT NULL OR
  SHIP_TO_SITE_USE_ID IS NOT NULL OR
  PAYMENT_TERM_ID     IS NOT NULL OR
  PRICE_LIST_ID       IS NOT NULL OR
  -----extra line rules added---------------------
  DISCOUNT_LIST	      IS NOT NULL OR
  CLVL_LIST_PRICE     IS NOT NULL OR
  CLVL_QUANTITY       IS NOT NULL OR
  CLVL_EXTENDED_AMT   IS NOT NULL OR
  TOPLVL_OPERAND_VAL  IS NOT NULL OR
  TOPLVL_QUANTITY     IS NOT NULL OR
  TOPLVL_ADJ_PRICE    IS NOT NULL OR
  TOPLVL_PRICE_QTY    IS NOT NULL OR
  AVERAGING_INTERVAL  IS NOT NULL OR
  MINIMUM_QUANTITY    IS NOT NULL OR
  DEFAULT_QUANTITY    IS NOT NULL OR
  FIXED_QUANTITY      IS NOT NULL OR
  USAGE_DURATION      IS NOT NULL OR
  BASE_READING        IS NOT NULL OR
  EXCEPTION_COV_ID    IS NOT NULL OR
  PM_PROGRAM_ID       IS NOT NULL OR
  RCN_INCIDENT_SEVERITY_ID IS NOT NULL OR
  RCN_PDF_ID           IS NOT NULL OR
  LIMIT_UOM_QUANTIFIED IS NOT NULL OR
  DISCOUNT_AMOUNT      IS NOT NULL OR
  DISCOUNT_PERCENT     IS NOT NULL OR
  LEVEL_AMOUNT         IS NOT NULL;


----------------------------------------------------------------------------
-- Cursor to populate data in OKS_RULE_ERROR table .                      --
----------------------------------------------------------------------------
CURSOR L_HDR_DTLS_CSR ( P_HDR_ID  IN NUMBER , P_CATEGORY IN VARCHAR2 ) IS
SELECT HDR.CONTRACT_NUMBER
     , HDR.CONTRACT_NUMBER_MODIFIER
     , RUL.ID
     , RGP.ID RGP_ID
 FROM  OKC_K_HEADERS_B HDR
     , OKC_RULE_GROUPS_B RGP
     , OKC_RULES_B RUL
WHERE HDR.ID = P_HDR_ID
  AND RGP.DNZ_CHR_ID = P_HDR_ID
  AND RGP.CHR_ID = P_HDR_ID
  AND RGP.ID = RUL.RGP_ID
  AND RGP.DNZ_CHR_ID = RUL.DNZ_CHR_ID
  AND RUL.RULE_INFORMATION_CATEGORY = P_CATEGORY ;

L_HDR_DTLS_REC L_HDR_DTLS_CSR%ROWTYPE;
----------------------------------------------------------------------------

----------------------------------------------------------------------------
-- Cursor to populate data in OKS_RULE_ERROR table .                      --
----------------------------------------------------------------------------
CURSOR L_LINE_DTLS_CSR (P_CLE_ID  IN NUMBER ,P_HDR_ID IN NUMBER, P_CATEGORY IN VARCHAR2 ) IS
SELECT HDR.CONTRACT_NUMBER
     , HDR.CONTRACT_NUMBER_MODIFIER
     , LIN.LINE_NUMBER
     , RUL.ID
     , RGP.ID RGP_ID
 FROM  OKC_K_HEADERS_B HDR
     , OKC_RULE_GROUPS_B RGP
     , OKC_RULES_B RUL
     , OKC_K_LINES_B LIN
WHERE HDR.ID = P_HDR_ID
  AND LIN.ID= P_CLE_ID
  AND RGP.DNZ_CHR_ID = P_HDR_ID
  AND RGP.CLE_ID = LIN.ID
  AND RGP.ID = RUL.RGP_ID
  AND RGP.DNZ_CHR_ID = RUL.DNZ_CHR_ID
  AND RUL.RULE_INFORMATION_CATEGORY = P_CATEGORY ;

L_LINE_DTLS_REC L_LINE_DTLS_CSR%ROWTYPE;
----------------------------------------------------------------------------



BEGIN
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'--------------Start of Sub request for Header Rule Data Validation----------------');
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');
 FND_FILE.PUT_LINE (FND_FILE.LOG, '----------Parameters passed to the Subrequest Request are as follows  -----------');
 FND_FILE.PUT_LINE (FND_FILE.LOG, 'P_STATUS ==============> '||P_STATUS);
 FND_FILE.PUT_LINE (FND_FILE.LOG, 'P_ORG_ID ==============> '||P_ORG_ID);
 FND_FILE.PUT_LINE (FND_FILE.LOG, 'P_BATCH_SIZE  =========> '||P_BATCH_SIZE);
 FND_FILE.PUT_LINE (FND_FILE.LOG, 'P_ID_LOW ==============> '||p_ID_LOW);
 FND_FILE.PUT_LINE (FND_FILE.LOG, 'P_ID_HIG ==============> '||P_ID_HIG);
 FND_FILE.PUT_LINE (FND_FILE.LOG, '---------------------------------------------------------------------------------');


-- FND_FILE.PUT_LINE(FND_FILE.OUTPUT ,'-----------------------------------------------------------------------');
-- FND_FILE.PUT_LINE(FND_FILE.OUTPUT ,'                Start of Header Validation Report for                  ');
-- FND_FILE.PUT_LINE(FND_FILE.OUTPUT ,'-----------------------------------------------------------------------');
-- FND_FILE.PUT_LINE(FND_FILE.OUTPUT ,' Contract Number      |Modifier                |Line Number    |Rule Category     |Attribute Name       |Current Value       ');


 if(p_us_yn = 'true') then
   l_us_yn := true;
 else
   l_us_yn := false;
 end if;

 if(l_us_yn) then
   If (p_status is null and p_org_id is null  )  then
       OPEN l_hdr_rule_csr1(p_id_low , p_id_hig);
       FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor opened is l_hdr_rule_csr1');
   Else
       OPEN l_hdr_rule_csr2(p_id_low , p_id_hig, p_status , p_org_id);
       FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor opened is l_hdr_rule_csr2');
   End IF;
else
   If (p_status is null and p_org_id is null  )  then
       OPEN l_hdr_rule_csr1_nus(p_id_low , p_id_hig);
       FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor opened is l_hdr_rule_csr1_nus');
   Else
       OPEN l_hdr_rule_csr2_nus(p_id_low , p_id_hig, p_status , p_org_id);
       FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor opened is l_hdr_rule_csr2_nus');
   End IF;

end if;

 Loop
    ------------------------------------------------------------------------------------
  if(l_us_yn) then
    --Start of If to choose the cursor to be fetched --
    If (p_status is null and p_org_id is null )  then
        FETCH l_hdr_rule_csr1 bulk collect into
                        CHR_ID
			,CLE_ID
                        ,DNZ_CHR_ID
                        ,ACCT_RULE_ID_CHR
                        --,CC_EXPIRY_DATE_CHR
                        ,CC_BANK_ACCT_ID_CHR
                        ,GRACE_DURATION_CHR
                        ,EST_REV_PERCENT_CHR
                        --,EST_REV_DATE_CHR
                        ,TAX_AMOUNT_CHR
                        ,TAX_CODE_CHR
                        ,TAX_EXEMPTION_ID_CHR
                        ,BILLING_PROFILE_ID_CHR
                        ,QUOTE_TO_CONTACT_ID_CHR
                        ,QUOTE_TO_SITE_ID_CHR
                        ,QUOTE_TO_EMAIL_ID_CHR
                        ,QUOTE_TO_PHONE_ID_CHR
                        ,QUOTE_TO_FAX_ID_CHR
                        ,RENEWAL_PRICE_LIST_CHR
                        ,RENEWAL_MARKUP_PERCENT_CHR
                        ,RENEWAL_GRACE_DURATION_CHR
                        ,RENEWAL_EST_REV_PERCENT_CHR
                        ,RENEWAL_EST_REV_DURATION_CHR
                        ,RENEWAL_PRICE_LIST_USED_CHR
                        ,RENEWAL_NOTIFICATION_TO_CHR
                        ,RENEWAL_MARKUP_PERCENT_USED_CH
                        ,REV_EST_PERCENT_USED_CHR
                        ,REV_EST_DURATION_USED_CHR
                        ,BILLING_PROFILE_USED_CHR
                        ,EVN_THRESHOLD_AMT_CHR
                        ,ERN_THRESHOLD_AMT_CHR
                        ,RENEWAL_GRACE_DURATION_USED_CH
                        ,CONVERSION_RATE_CHR              --OKC
                        --,CONVERSION_RATE_DATE_CHR         --OKC
                        ,CONVERSION_EURO_RATE_CHR         --OKC
                        ,CUST_ACCT_ID_CHR                 --OKC
                        ,BILL_TO_SITE_USE_ID_CHR          --OKC
                        ,INV_RULE_ID_CHR                  --OKC
                        ,RENEWAL_NOTIFY_TO_CHR            --OKC
                        --,RENEWAL_END_DATE_CHR             --OKC
                        ,SHIP_TO_SITE_USE_ID_CHR          --OKC
                        ,PAYMENT_TERM_ID_CHR              --OKC
                        ,PRICE_LIST_ID_CHR                --OKC
                 -------------EXTRA LINE RULES------------------------
			,DISCOUNT_LIST_CHR
			,CLVL_LIST_PRICE_CHR
			,CLVL_QUANTITY_CHR
			,CLVL_EXTENDED_AMT_CHR
			,TOPLVL_OPERAND_VAL_CHR
			,TOPLVL_QUANTITY_CHR
			,TOPLVL_ADJ_PRICE_CHR
			,TOPLVL_PRICE_QTY_CHR
			,AVERAGING_INTERVAL_CHR
			,MINIMUM_QUANTITY_CHR
			,DEFAULT_QUANTITY_CHR
			,FIXED_QUANTITY_CHR
			,USAGE_DURATION_CHR
			,BASE_READING_CHR
			,EXCEPTION_COV_ID_CHR
			,PM_PROGRAM_ID_CHR
			,RCN_INCIDENT_SEVERITY_ID_CHR
			,RCN_PDF_ID_CHR
			,LIMIT_UOM_QUANTIFIED_CHR
			,DISCOUNT_AMOUNT_CHR
			,DISCOUNT_PERCENT_CHR
			,LEVEL_AMOUNT_CHR
			LIMIT p_batch_size;

       FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor fetched is l_hdr_rule_csr1');
       FND_FILE.PUT_LINE(FND_FILE.LOG , 'FETCHED ROW COUNT = '|| CHR_ID.COUNT );
       EXIT WHEN CHR_ID.COUNT = 0 ;
    Else
        FETCH l_hdr_rule_csr2 bulk collect into
                        CHR_ID
			,CLE_ID
			,DNZ_CHR_ID
                        ,ACCT_RULE_ID_CHR
                        --,CC_EXPIRY_DATE_CHR
                        ,CC_BANK_ACCT_ID_CHR
                        ,GRACE_DURATION_CHR
                        ,EST_REV_PERCENT_CHR
                        --,EST_REV_DATE_CHR
                        ,TAX_AMOUNT_CHR
                        ,TAX_CODE_CHR
                        ,TAX_EXEMPTION_ID_CHR
                        ,BILLING_PROFILE_ID_CHR
                        ,QUOTE_TO_CONTACT_ID_CHR
                        ,QUOTE_TO_SITE_ID_CHR
                        ,QUOTE_TO_EMAIL_ID_CHR
                        ,QUOTE_TO_PHONE_ID_CHR
                        ,QUOTE_TO_FAX_ID_CHR
                        ,RENEWAL_PRICE_LIST_CHR
                        ,RENEWAL_MARKUP_PERCENT_CHR
                        ,RENEWAL_GRACE_DURATION_CHR
                        ,RENEWAL_EST_REV_PERCENT_CHR
                        ,RENEWAL_EST_REV_DURATION_CHR
                        ,RENEWAL_PRICE_LIST_USED_CHR
                        ,RENEWAL_NOTIFICATION_TO_CHR
                        ,RENEWAL_MARKUP_PERCENT_USED_CH
                        ,REV_EST_PERCENT_USED_CHR
                        ,REV_EST_DURATION_USED_CHR
                        ,BILLING_PROFILE_USED_CHR
                        ,EVN_THRESHOLD_AMT_CHR
                        ,ERN_THRESHOLD_AMT_CHR
                        ,RENEWAL_GRACE_DURATION_USED_CH
                        ,CONVERSION_RATE_CHR              --OKC
                        --,CONVERSION_RATE_DATE_CHR         --OKC
                        ,CONVERSION_EURO_RATE_CHR         --OKC
                        ,CUST_ACCT_ID_CHR                 --OKC
                        ,BILL_TO_SITE_USE_ID_CHR          --OKC
                        ,INV_RULE_ID_CHR                  --OKC
                        ,RENEWAL_NOTIFY_TO_CHR            --OKC
                        --,RENEWAL_END_DATE_CHR           --OKC
                        ,SHIP_TO_SITE_USE_ID_CHR          --OKC
                        ,PAYMENT_TERM_ID_CHR              --OKC
                        ,PRICE_LIST_ID_CHR                --OKC
                 -------------EXTRA LINE RULES------------------------
			,DISCOUNT_LIST_CHR
			,CLVL_LIST_PRICE_CHR
			,CLVL_QUANTITY_CHR
			,CLVL_EXTENDED_AMT_CHR
			,TOPLVL_OPERAND_VAL_CHR
			,TOPLVL_QUANTITY_CHR
			,TOPLVL_ADJ_PRICE_CHR
			,TOPLVL_PRICE_QTY_CHR
			,AVERAGING_INTERVAL_CHR
			,MINIMUM_QUANTITY_CHR
			,DEFAULT_QUANTITY_CHR
			,FIXED_QUANTITY_CHR
			,USAGE_DURATION_CHR
			,BASE_READING_CHR
			,EXCEPTION_COV_ID_CHR
			,PM_PROGRAM_ID_CHR
			,RCN_INCIDENT_SEVERITY_ID_CHR
			,RCN_PDF_ID_CHR
			,LIMIT_UOM_QUANTIFIED_CHR
			,DISCOUNT_AMOUNT_CHR
			,DISCOUNT_PERCENT_CHR
			,LEVEL_AMOUNT_CHR
			LIMIT p_batch_size;


       FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor fetched is l_hdr_rule_csr2');
       FND_FILE.PUT_LINE(FND_FILE.LOG , 'FETCHED ROW COUNT = '|| CHR_ID.COUNT );
       EXIT WHEN CHR_ID.COUNT = 0 ;

    End IF;
    --End of If to choose the cursor to be fetched --

   else
    --Start of If to choose the cursor to be fetched --
    If (p_status is null and p_org_id is null )  then
        FETCH l_hdr_rule_csr1_nus bulk collect into
                        CHR_ID
			,CLE_ID
                        ,DNZ_CHR_ID
                        ,ACCT_RULE_ID_CHR
                        --,CC_EXPIRY_DATE_CHR
                        ,CC_BANK_ACCT_ID_CHR
                        ,GRACE_DURATION_CHR
                        ,EST_REV_PERCENT_CHR
                        --,EST_REV_DATE_CHR
                        ,TAX_AMOUNT_CHR
                        ,TAX_CODE_CHR
                        ,TAX_EXEMPTION_ID_CHR
                        ,BILLING_PROFILE_ID_CHR
                        ,QUOTE_TO_CONTACT_ID_CHR
                        ,QUOTE_TO_SITE_ID_CHR
                        ,QUOTE_TO_EMAIL_ID_CHR
                        ,QUOTE_TO_PHONE_ID_CHR
                        ,QUOTE_TO_FAX_ID_CHR
                        ,RENEWAL_PRICE_LIST_CHR
                        ,RENEWAL_MARKUP_PERCENT_CHR
                        ,RENEWAL_GRACE_DURATION_CHR
                        ,RENEWAL_EST_REV_PERCENT_CHR
                        ,RENEWAL_EST_REV_DURATION_CHR
                        ,RENEWAL_PRICE_LIST_USED_CHR
                        ,RENEWAL_NOTIFICATION_TO_CHR
                        ,RENEWAL_MARKUP_PERCENT_USED_CH
                        ,REV_EST_PERCENT_USED_CHR
                        ,REV_EST_DURATION_USED_CHR
                        ,BILLING_PROFILE_USED_CHR
                        ,EVN_THRESHOLD_AMT_CHR
                        ,ERN_THRESHOLD_AMT_CHR
                        ,RENEWAL_GRACE_DURATION_USED_CH
                        ,CONVERSION_RATE_CHR              --OKC
                        --,CONVERSION_RATE_DATE_CHR         --OKC
                        ,CONVERSION_EURO_RATE_CHR         --OKC
                        ,CUST_ACCT_ID_CHR                 --OKC
                        ,BILL_TO_SITE_USE_ID_CHR          --OKC
                        ,INV_RULE_ID_CHR                  --OKC
                        ,RENEWAL_NOTIFY_TO_CHR            --OKC
                        --,RENEWAL_END_DATE_CHR             --OKC
                        ,SHIP_TO_SITE_USE_ID_CHR          --OKC
                        ,PAYMENT_TERM_ID_CHR              --OKC
                        ,PRICE_LIST_ID_CHR                --OKC
                 -------------EXTRA LINE RULES------------------------
			,DISCOUNT_LIST_CHR
			,CLVL_LIST_PRICE_CHR
			,CLVL_QUANTITY_CHR
			,CLVL_EXTENDED_AMT_CHR
			,TOPLVL_OPERAND_VAL_CHR
			,TOPLVL_QUANTITY_CHR
			,TOPLVL_ADJ_PRICE_CHR
			,TOPLVL_PRICE_QTY_CHR
			,AVERAGING_INTERVAL_CHR
			,MINIMUM_QUANTITY_CHR
			,DEFAULT_QUANTITY_CHR
			,FIXED_QUANTITY_CHR
			,USAGE_DURATION_CHR
			,BASE_READING_CHR
			,EXCEPTION_COV_ID_CHR
			,PM_PROGRAM_ID_CHR
			,RCN_INCIDENT_SEVERITY_ID_CHR
			,RCN_PDF_ID_CHR
			,LIMIT_UOM_QUANTIFIED_CHR
			,DISCOUNT_AMOUNT_CHR
			,DISCOUNT_PERCENT_CHR
			,LEVEL_AMOUNT_CHR
			LIMIT p_batch_size;

       FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor fetched is l_hdr_rule_csr1');
       FND_FILE.PUT_LINE(FND_FILE.LOG , 'FETCHED ROW COUNT = '|| CHR_ID.COUNT );
       EXIT WHEN CHR_ID.COUNT = 0 ;
    Else
        FETCH l_hdr_rule_csr2_nus bulk collect into
                        CHR_ID
			,CLE_ID
			,DNZ_CHR_ID
                        ,ACCT_RULE_ID_CHR
                        --,CC_EXPIRY_DATE_CHR
                        ,CC_BANK_ACCT_ID_CHR
                        ,GRACE_DURATION_CHR
                        ,EST_REV_PERCENT_CHR
                        --,EST_REV_DATE_CHR
                        ,TAX_AMOUNT_CHR
                        ,TAX_CODE_CHR
                        ,TAX_EXEMPTION_ID_CHR
                        ,BILLING_PROFILE_ID_CHR
                        ,QUOTE_TO_CONTACT_ID_CHR
                        ,QUOTE_TO_SITE_ID_CHR
                        ,QUOTE_TO_EMAIL_ID_CHR
                        ,QUOTE_TO_PHONE_ID_CHR
                        ,QUOTE_TO_FAX_ID_CHR
                        ,RENEWAL_PRICE_LIST_CHR
                        ,RENEWAL_MARKUP_PERCENT_CHR
                        ,RENEWAL_GRACE_DURATION_CHR
                        ,RENEWAL_EST_REV_PERCENT_CHR
                        ,RENEWAL_EST_REV_DURATION_CHR
                        ,RENEWAL_PRICE_LIST_USED_CHR
                        ,RENEWAL_NOTIFICATION_TO_CHR
                        ,RENEWAL_MARKUP_PERCENT_USED_CH
                        ,REV_EST_PERCENT_USED_CHR
                        ,REV_EST_DURATION_USED_CHR
                        ,BILLING_PROFILE_USED_CHR
                        ,EVN_THRESHOLD_AMT_CHR
                        ,ERN_THRESHOLD_AMT_CHR
                        ,RENEWAL_GRACE_DURATION_USED_CH
                        ,CONVERSION_RATE_CHR              --OKC
                        --,CONVERSION_RATE_DATE_CHR         --OKC
                        ,CONVERSION_EURO_RATE_CHR         --OKC
                        ,CUST_ACCT_ID_CHR                 --OKC
                        ,BILL_TO_SITE_USE_ID_CHR          --OKC
                        ,INV_RULE_ID_CHR                  --OKC
                        ,RENEWAL_NOTIFY_TO_CHR            --OKC
                        --,RENEWAL_END_DATE_CHR           --OKC
                        ,SHIP_TO_SITE_USE_ID_CHR          --OKC
                        ,PAYMENT_TERM_ID_CHR              --OKC
                        ,PRICE_LIST_ID_CHR                --OKC
                 -------------EXTRA LINE RULES------------------------
			,DISCOUNT_LIST_CHR
			,CLVL_LIST_PRICE_CHR
			,CLVL_QUANTITY_CHR
			,CLVL_EXTENDED_AMT_CHR
			,TOPLVL_OPERAND_VAL_CHR
			,TOPLVL_QUANTITY_CHR
			,TOPLVL_ADJ_PRICE_CHR
			,TOPLVL_PRICE_QTY_CHR
			,AVERAGING_INTERVAL_CHR
			,MINIMUM_QUANTITY_CHR
			,DEFAULT_QUANTITY_CHR
			,FIXED_QUANTITY_CHR
			,USAGE_DURATION_CHR
			,BASE_READING_CHR
			,EXCEPTION_COV_ID_CHR
			,PM_PROGRAM_ID_CHR
			,RCN_INCIDENT_SEVERITY_ID_CHR
			,RCN_PDF_ID_CHR
			,LIMIT_UOM_QUANTIFIED_CHR
			,DISCOUNT_AMOUNT_CHR
			,DISCOUNT_PERCENT_CHR
			,LEVEL_AMOUNT_CHR
			LIMIT p_batch_size;


       FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor fetched is l_hdr_rule_csr2');
       FND_FILE.PUT_LINE(FND_FILE.LOG , 'FETCHED ROW COUNT = '|| CHR_ID.COUNT );
       EXIT WHEN CHR_ID.COUNT = 0 ;

    End IF;
    --End of If to choose the cursor to be fetched --

   end if;
    ------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------
    -- Begin of code to validate data type .
    FOR a in CHR_ID.FIRST..CHR_ID.LAST
    LOOP
       --1. Validation for ARL rule .
       BEGIN
          ACCT_RULE_ID(1)      := ACCT_RULE_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'ARL') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_ACCT_RULE_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'ARL'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         , ACCT_RULE_ID_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'ARL') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_ACCT_RULE_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'ARL'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         , ACCT_RULE_ID_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --2. Validation for CCR rule .
       BEGIN
          CC_BANK_ACCT_ID(1)      := CC_BANK_ACCT_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'CCR') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CC_BANK_ACCT_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'CCR'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , CC_BANK_ACCT_ID_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION3'  ||L_ATTRIBUTE_NAME || CC_BANK_ACCT_ID_CHR(a)  );
         END IF;
       	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'CCR') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CC_BANK_ACCT_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'CCR'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , CC_BANK_ACCT_ID_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --3. Validation for GPR rule .
       BEGIN
          GRACE_DURATION(1)    := GRACE_DURATION_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'GPR') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_GRACE_DURATION');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'GPR'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , GRACE_DURATION_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || GRACE_DURATION_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'GPR') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_GRACE_DURATION');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'GPR'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , GRACE_DURATION_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --4. Validation for RVE rule .
       BEGIN
          EST_REV_PERCENT(1)      := EST_REV_PERCENT_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RVE') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EST_REV_PERCENT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RVE'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , EST_REV_PERCENT_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || EST_REV_PERCENT_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'RVE') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EST_REV_PERCENT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'RVE'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , EST_REV_PERCENT_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --5. Validation for IRT rule.
       BEGIN
          TAX_AMOUNT(1)      := TAX_AMOUNT_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'IRT') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_AMOUNT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'IRT'  ,'RULE_INFORMATION4'    ,L_ATTRIBUTE_NAME         , TAX_AMOUNT_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || TAX_AMOUNT_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'IRT') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_AMOUNT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'IRT'  ,'RULE_INFORMATION4'    ,L_ATTRIBUTE_NAME         , TAX_AMOUNT_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --6. Validation for TAX (TAX_CODE) rule.
       BEGIN
          TAX_CODE(1)      := TAX_CODE_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'TAX') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_CODE');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'TAX'  ,'OBJECT2_ID1'    ,L_ATTRIBUTE_NAME         , TAX_CODE_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT2_ID1' ||L_ATTRIBUTE_NAME || TAX_CODE_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'TAX') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_CODE');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'TAX'  ,'OBJECT2_ID1'    ,L_ATTRIBUTE_NAME         , TAX_CODE_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --7. Validation for TAX (TAX_EXEMPTION_ID) rule.
       BEGIN
          TAX_EXEMPTION_ID(1)      := TAX_EXEMPTION_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'TAX');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_EXEMPTION_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'TAX'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , TAX_EXEMPTION_ID_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || TAX_EXEMPTION_ID_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'TAX') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_EXEMPTION_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'TAX'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , TAX_EXEMPTION_ID_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;


       --8. Validation for CAN  rule.
       BEGIN
          CUST_ACCT_ID(1)      := CUST_ACCT_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'CAN');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CUST_ACCT_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'CAN'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , CUST_ACCT_ID_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || CUST_ACCT_ID_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'CAN') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CUST_ACCT_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'CAN'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , CUST_ACCT_ID_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --9. Validation for BTO  rule.
       BEGIN
          BILL_TO_SITE_USE_ID(1)      := BILL_TO_SITE_USE_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'BTO');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BILL_TO_SITE_USE_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'BTO'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , BILL_TO_SITE_USE_ID_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || BILL_TO_SITE_USE_ID_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'BTO') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BILL_TO_SITE_USE_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'BTO'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , BILL_TO_SITE_USE_ID_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;


       --10. Validation for IRE  rule.
       BEGIN
          INV_RULE_ID(1)      := INV_RULE_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'IRE');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_INV_RULE_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'IRE'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , INV_RULE_ID_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || INV_RULE_ID_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'IRE') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_INV_RULE_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'IRE'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , INV_RULE_ID_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --11. Validation for REN ( RENEWAL_NOTIFY_TO )  rule.
       BEGIN
          RENEWAL_NOTIFY_TO(1)      := RENEWAL_NOTIFY_TO_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'IRE');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_NOTIFY_TO');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'REN'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_NOTIFY_TO_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || RENEWAL_NOTIFY_TO_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'IRE') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_NOTIFY_TO');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'REN'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_NOTIFY_TO_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --12. Validation for STO rule.
       BEGIN
          SHIP_TO_SITE_USE_ID(1)      := SHIP_TO_SITE_USE_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'STO');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_SHIP_TO_SITE_USE_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'STO'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , SHIP_TO_SITE_USE_ID_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || SHIP_TO_SITE_USE_ID_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'STO') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_SHIP_TO_SITE_USE_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'STO'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , SHIP_TO_SITE_USE_ID_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --13. Validation for PTR rule.
       BEGIN
          PAYMENT_TERM_ID(1)      := PAYMENT_TERM_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'PTR');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PAYMENT_TERM_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'PTR'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , PAYMENT_TERM_ID_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || PAYMENT_TERM_ID_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'PTR') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PAYMENT_TERM_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PTR'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , PAYMENT_TERM_ID_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --14. Validation for ERN rule.
       BEGIN
          BILLING_PROFILE_ID(1)      := BILLING_PROFILE_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'ERN');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BILLING_PROFILE_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                                VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'ERN'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , BILLING_PROFILE_ID_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || BILLING_PROFILE_ID_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'ERN') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BILLING_PROFILE_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'ERN'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , BILLING_PROFILE_ID_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;


       --15. Validation for QTO ( QUOTE_TO_CONTACT_ID )rule.
       BEGIN
          QUOTE_TO_CONTACT_ID(1)      := QUOTE_TO_CONTACT_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'QTO');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_CONTACT_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                                VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'QTO'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_CONTACT_ID_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || QUOTE_TO_CONTACT_ID_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'QTO') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_CONTACT_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'QTO'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_CONTACT_ID_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --16. Validation for QTO ( QUOTE_TO_SITE_ID ) rule.
       BEGIN
          QUOTE_TO_SITE_ID(1)      := QUOTE_TO_SITE_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'QTO');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_SITE_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'QTO'  ,'RULE_INFORMATION4'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_SITE_ID_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT2_ID1' ||L_ATTRIBUTE_NAME || QUOTE_TO_SITE_ID_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'QTO') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_SITE_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'QTO'  ,'RULE_INFORMATION4'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_SITE_ID_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --17. Validation for QTO ( QUOTE_TO_EMAIL_ID ) rule.
       BEGIN
          QUOTE_TO_EMAIL_ID(1)      := QUOTE_TO_EMAIL_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'QTO');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_EMAIL_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'QTO'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_EMAIL_ID_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION1'  ||L_ATTRIBUTE_NAME || QUOTE_TO_EMAIL_ID_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'QTO') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_EMAIL_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'QTO'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_EMAIL_ID_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --18. Validation for QTO ( QUOTE_TO_PHONE_ID ) rule.
       BEGIN
          QUOTE_TO_PHONE_ID(1)      := QUOTE_TO_PHONE_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'QTO');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_PHONE_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'QTO'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_PHONE_ID_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || QUOTE_TO_PHONE_ID_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'QTO') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_PHONE_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'QTO'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_PHONE_ID_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --19. Validation for QTO ( QUOTE_TO_FAX_ID ) rule.
       BEGIN
          QUOTE_TO_FAX_ID(1)      := QUOTE_TO_FAX_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'QTO');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_FAX_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                                VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'QTO'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_FAX_ID_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION3' ||L_ATTRIBUTE_NAME || QUOTE_TO_FAX_ID_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'QTO') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_FAX_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'QTO'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_FAX_ID_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --20. Validation for RPT ( RENEWAL_PRICE_LIST ) rule.
       BEGIN
          RENEWAL_PRICE_LIST(1)      := RENEWAL_PRICE_LIST_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RPT');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_PRICE_LIST');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RPT'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , RENEWAL_PRICE_LIST_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || RENEWAL_PRICE_LIST_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'RPT') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_PRICE_LIST');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'RPT'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , RENEWAL_PRICE_LIST_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --21. Validation for RPT ( RENEWAL_MARKUP_PERCENT ) rule.
       BEGIN
          RENEWAL_MARKUP_PERCENT(1)      := RENEWAL_MARKUP_PERCENT_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RPT');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_MARKUP_PERCENT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                                VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RPT'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_MARKUP_PERCENT_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || RENEWAL_MARKUP_PERCENT_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'RPT') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_MARKUP_PERCENT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'RPT'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_MARKUP_PERCENT_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --22. Validation for RPT ( RENEWAL_GRACE_DURATION ) rule.
       BEGIN
          RENEWAL_GRACE_DURATION(1)      := RENEWAL_GRACE_DURATION_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RPT');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_GRACE_DURATION');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                                VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RPT'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , RENEWAL_GRACE_DURATION_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION3' ||L_ATTRIBUTE_NAME || RENEWAL_GRACE_DURATION_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'RPT') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_GRACE_DURATION');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'RPT'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , RENEWAL_GRACE_DURATION_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --23. Validation for RER ( RENEWAL_EST_REV_PERCENT ) rule.
       BEGIN
          RENEWAL_EST_REV_PERCENT(1)      := RENEWAL_EST_REV_PERCENT_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RER');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_EREV_PERCENT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RER'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , RENEWAL_EST_REV_PERCENT_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || RENEWAL_EST_REV_PERCENT_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'RER') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_EREV_PERCENT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'RER'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , RENEWAL_EST_REV_PERCENT_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --24. Validation for RER ( RENEWAL_EST_REV_DURATION ) rule.
       BEGIN
          RENEWAL_EST_REV_DURATION(1)      := RENEWAL_EST_REV_DURATION_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RER');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_EREV_DURATION');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                                VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RER'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_EST_REV_DURATION_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION2'  ||L_ATTRIBUTE_NAME || RENEWAL_EST_REV_DURATION_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'RER') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_EREV_DURATION');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'RER'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_EST_REV_DURATION_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --25. Validation for RRU ( RENEWAL_PRICE_LIST_USED ) rule.
       BEGIN
          RENEWAL_PRICE_LIST_USED(1)      := RENEWAL_PRICE_LIST_USED_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RRU');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_PRICE_LIST_U');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RRU'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , RENEWAL_PRICE_LIST_USED_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || RENEWAL_PRICE_LIST_USED_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'RRU') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_PRICE_LIST_U');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'RRU'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , RENEWAL_PRICE_LIST_USED_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --26. Validation for RRU ( RENEWAL_NOTIFICATION_TO ) rule.
       BEGIN
          RENEWAL_NOTIFICATION_TO(1)      := RENEWAL_NOTIFICATION_TO_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RRU');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_NOTIFICATION');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RRU'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_NOTIFICATION_TO_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || RENEWAL_NOTIFICATION_TO_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'RRU') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_NOTIFICATION');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'RRU'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_NOTIFICATION_TO_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --27. Validation for RRU ( RENEWAL_NOTIFICATION_TO ) rule.
       BEGIN
          RENEWAL_MARKUP_PERCENT_USED(1)      := RENEWAL_MARKUP_PERCENT_USED_CH(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RRU');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_MPERCENT_U');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RRU'  ,'RULE_INFORMATION5'    ,L_ATTRIBUTE_NAME         , RENEWAL_MARKUP_PERCENT_USED_CH(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION5' ||L_ATTRIBUTE_NAME || RENEWAL_MARKUP_PERCENT_USED_CH(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'RRU') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_MPERCENT_U');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'RRU'  ,'RULE_INFORMATION5'    ,L_ATTRIBUTE_NAME         , RENEWAL_MARKUP_PERCENT_USED_CH(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --28. Validation for RRU ( REV_EST_PERCENT_USED ) rule.
       BEGIN
          REV_EST_PERCENT_USED(1)      := REV_EST_PERCENT_USED_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RRU');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_REV_EST_PERCENT_U');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                                VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RRU'  ,'RULE_INFORMATION6'    ,L_ATTRIBUTE_NAME         , REV_EST_PERCENT_USED_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION6' ||L_ATTRIBUTE_NAME || REV_EST_PERCENT_USED_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'RRU') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_REV_EST_PERCENT_U');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'RRU'  ,'RULE_INFORMATION6'    ,L_ATTRIBUTE_NAME         , REV_EST_PERCENT_USED_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --29. Validation for RRU ( REV_EST_DURATION_USED ) rule.
       BEGIN
          REV_EST_DURATION_USED(1)      := REV_EST_DURATION_USED_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RRU');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_REV_EST_DURATION_U');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RRU'  ,'RULE_INFORMATION7'    ,L_ATTRIBUTE_NAME         , REV_EST_DURATION_USED_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION7'||L_ATTRIBUTE_NAME || REV_EST_DURATION_USED_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'RRU') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_REV_EST_DURATION_U');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'RRU'  ,'RULE_INFORMATION7'    ,L_ATTRIBUTE_NAME         , REV_EST_DURATION_USED_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --30. Validation for RRU ( BILLING_PROFILE_USED ) rule.
       BEGIN
          BILLING_PROFILE_USED(1)      := BILLING_PROFILE_USED_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RRU');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BILLING_PROFILE_U');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RRU'  ,'RULE_INFORMATION9'    ,L_ATTRIBUTE_NAME         , BILLING_PROFILE_USED_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION9' ||L_ATTRIBUTE_NAME || BILLING_PROFILE_USED_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'RRU') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BILLING_PROFILE_U');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'RRU'  ,'RULE_INFORMATION9'    ,L_ATTRIBUTE_NAME         , BILLING_PROFILE_USED_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --31. Validation for RRU ( EVN_THRESHOLD_AMT ) rule.
       BEGIN
          EVN_THRESHOLD_AMT(1)      := EVN_THRESHOLD_AMT_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RRU');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EVN_THRESHOLD_AMT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                                VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RRU'  ,'RULE_INFORMATION11'    ,L_ATTRIBUTE_NAME         , EVN_THRESHOLD_AMT_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION11' ||L_ATTRIBUTE_NAME || EVN_THRESHOLD_AMT_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'RRU') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EVN_THRESHOLD_AMT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'RRU'  ,'RULE_INFORMATION11'    ,L_ATTRIBUTE_NAME         , EVN_THRESHOLD_AMT_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --32. Validation for RRU ( ERN_THRESHOLD_AMT ) rule.
       BEGIN
          ERN_THRESHOLD_AMT(1)      := ERN_THRESHOLD_AMT_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RRU');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_ERN_THRESHOLD_AMT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RRU'  ,'RULE_INFORMATION13'    ,L_ATTRIBUTE_NAME         , ERN_THRESHOLD_AMT_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION13' ||L_ATTRIBUTE_NAME || ERN_THRESHOLD_AMT_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'RRU') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_ERN_THRESHOLD_AMT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'RRU'  ,'RULE_INFORMATION13'    ,L_ATTRIBUTE_NAME         , ERN_THRESHOLD_AMT_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --33. Validation for RRE ( RENEWAL_GRACE_DURATION_USED ) rule.
       BEGIN
          RENEWAL_GRACE_DURATION_USED(1)      := RENEWAL_GRACE_DURATION_USED_CH(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RRE');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_GDURATION_U');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RRE'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , RENEWAL_GRACE_DURATION_USED_CH(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || RENEWAL_GRACE_DURATION_USED_CH(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'RRE') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_GDURATION_U');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'RRE'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , RENEWAL_GRACE_DURATION_USED_CH(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --34. Validation for PRE ( PRICE_LIST_ID ) rule.
       BEGIN
          PRICE_LIST_ID(1)      := PRICE_LIST_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'PRE');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PRICE_LIST_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'PRE'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , PRICE_LIST_ID_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || PRICE_LIST_ID_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'PRE') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PRICE_LIST_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PRE'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , PRICE_LIST_ID_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --35. Validation for CVN ( CONVERSION_RATE ) rule.
       BEGIN
          CONVERSION_RATE(1)      := CONVERSION_RATE_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'CVN');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CONVERSION_RATE');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'CVN'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , CONVERSION_RATE_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || CONVERSION_RATE_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'CVN') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CONVERSION_RATE');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'CVN'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , CONVERSION_RATE_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --36. Validation for CVN ( CONVERSION_EURO_RATE ) rule.
       BEGIN
          CONVERSION_EURO_RATE(1)      := CONVERSION_EURO_RATE_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'CVN');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CONVERSION_EURO_RATE');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'CVN'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , CONVERSION_EURO_RATE_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION3' ||L_ATTRIBUTE_NAME || CONVERSION_EURO_RATE_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'CVN') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CONVERSION_EURO_RATE');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'CVN'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , CONVERSION_EURO_RATE_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

/*
       --37. Validation for CCR ( CC_EXPIRY_DATE ) rule.
       BEGIN
          CC_EXPIRY_DATE(1)      := to_date(CC_EXPIRY_DATE_CHR(a),'yyyy/mm/dd hh24:mi:ss');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'CCR');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CC_EXPIRY_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'CCR'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , CC_EXPIRY_DATE_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION2'  ||L_ATTRIBUTE_NAME || CC_EXPIRY_DATE_CHR(a)  );
       END;
*/
/*
       --38. Validation for RVE ( EST_REV_DATE ) rule.
       BEGIN
          EST_REV_DATE(1)      := to_date(EST_REV_DATE_CHR(a),'yyyy/mm/dd hh24:mi:ss');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RVE');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EST_REV_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RVE'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , EST_REV_DATE_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || EST_REV_DATE_CHR(a)  );
       END;

*/
/*
       --39. Validation for REN ( RENEWAL_END_DATE ) rule.
       BEGIN
          RENEWAL_END_DATE(1)      := to_date(RENEWAL_END_DATE_CHR(a),'yyyy/mm/dd hh24:mi:ss');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'REN');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_END_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'REN'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , RENEWAL_END_DATE_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION3' ||L_ATTRIBUTE_NAME || RENEWAL_END_DATE_CHR(a)  );
       END;
*/
/*
       --40. Validation for REN ( CONVERSION_RATE_DATE ) rule.
       BEGIN
          CONVERSION_RATE_DATE(1)      := to_date(CONVERSION_RATE_DATE_CHR(a),'yyyy/mm/dd hh24:mi:ss');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'REN');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CONVERSION_RATE_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'CVN'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , CONVERSION_RATE_DATE_CHR(a),
                                       L_ERROR_MSG );
	 -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || CONVERSION_RATE_DATE_CHR(a)  );
       END;
*/

-----------------extra line rules---------------------------------------
       --41. Validation for DST rule .
       BEGIN
          DISCOUNT_LIST(1)      := DISCOUNT_LIST_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'DST') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DISCOUNT_LIST');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'DST'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,DISCOUNT_LIST_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'DST') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DISCOUNT_LIST');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'DST'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,DISCOUNT_LIST_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || DISCOUNT_LIST_CHR(a) );
         END IF;
       END;
       --42. Validation for PDL rule .
       BEGIN
          CLVL_LIST_PRICE(1)      := CLVL_LIST_PRICE_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'PDL') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CLVL_LIST_PRICE');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'PDL'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,CLVL_LIST_PRICE_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'PDL') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CLVL_LIST_PRICE');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PDL'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,CLVL_LIST_PRICE_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || CLVL_LIST_PRICE_CHR(a) );
         END IF;
       END;

       --43. Validation for PDL rule .
       BEGIN
          CLVL_QUANTITY(1)      := CLVL_QUANTITY_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'PDL') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CLVL_QUANTITY');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'PDL'    ,'RULE_INFORMATION2'   ,L_ATTRIBUTE_NAME         ,CLVL_QUANTITY_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'PDL') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CLVL_QUANTITY');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PDL'    ,'RULE_INFORMATION2'   ,L_ATTRIBUTE_NAME         ,CLVL_QUANTITY_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || CLVL_QUANTITY_CHR(a) );
         END IF;
       END;

       --44. Validation for PDL rule .
       BEGIN
          CLVL_EXTENDED_AMT(1)      := CLVL_EXTENDED_AMT_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'PDL') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CLVL_EXTENDED_AMT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'PDL'    ,'RULE_INFORMATION3'   ,L_ATTRIBUTE_NAME         ,CLVL_EXTENDED_AMT_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'PDL') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CLVL_EXTENDED_AMT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PDL'    ,'RULE_INFORMATION3'   ,L_ATTRIBUTE_NAME         ,CLVL_EXTENDED_AMT_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION3' ||L_ATTRIBUTE_NAME || CLVL_EXTENDED_AMT_CHR(a) );
         END IF;
       END;

       --45. Validation for PDL rule .
       BEGIN
          TOPLVL_OPERAND_VAL(1)      := TOPLVL_OPERAND_VAL_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'PDL') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_OPERAND_VAL');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'PDL'    ,'RULE_INFORMATION6'   ,L_ATTRIBUTE_NAME         ,TOPLVL_OPERAND_VAL_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'PDL') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_OPERAND_VAL');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PDL'    ,'RULE_INFORMATION6'   ,L_ATTRIBUTE_NAME         ,TOPLVL_OPERAND_VAL_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION6' ||L_ATTRIBUTE_NAME || TOPLVL_OPERAND_VAL_CHR(a) );
         END IF;
       END;

       --46. Validation for PDL rule .
       BEGIN
          TOPLVL_QUANTITY(1)      := TOPLVL_QUANTITY_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'PDL') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_QUANTITY');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'PDL'    ,'RULE_INFORMATION8'   ,L_ATTRIBUTE_NAME         ,TOPLVL_QUANTITY_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'PDL') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_QUANTITY');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PDL'    ,'RULE_INFORMATION8'   ,L_ATTRIBUTE_NAME         ,TOPLVL_QUANTITY_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION8' ||L_ATTRIBUTE_NAME || TOPLVL_QUANTITY_CHR(a) );
         END IF;
       END;

       --47. Validation for PDL rule .
       BEGIN
          TOPLVL_ADJ_PRICE(1)      := TOPLVL_ADJ_PRICE_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'PDL') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_ADJ_PRICE');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'PDL'    ,'RULE_INFORMATION10'   ,L_ATTRIBUTE_NAME         ,TOPLVL_ADJ_PRICE_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'PDL') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_ADJ_PRICE');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PDL'    ,'RULE_INFORMATION10'   ,L_ATTRIBUTE_NAME         ,TOPLVL_ADJ_PRICE_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION10' ||L_ATTRIBUTE_NAME || TOPLVL_ADJ_PRICE_CHR(a) );
         END IF;
       END;

       --48. Validation for PDL rule .
       BEGIN
          TOPLVL_PRICE_QTY(1)      := TOPLVL_PRICE_QTY_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'PDL') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_PRICE_QTY');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'PDL'    ,'RULE_INFORMATION13'   ,L_ATTRIBUTE_NAME         ,TOPLVL_PRICE_QTY_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'PDL') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_PRICE_QTY');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PDL'    ,'RULE_INFORMATION13'   ,L_ATTRIBUTE_NAME         ,TOPLVL_PRICE_QTY_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION13' ||L_ATTRIBUTE_NAME || TOPLVL_PRICE_QTY_CHR(a) );
         END IF;
       END;

       --49. Validation for QRE rule .
       BEGIN
          AVERAGING_INTERVAL(1)      := AVERAGING_INTERVAL_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'QRE') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_AVERAGING_INTERVAL');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'QRE'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,AVERAGING_INTERVAL_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'QRE') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_AVERAGING_INTERVAL');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'QRE'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,AVERAGING_INTERVAL_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || AVERAGING_INTERVAL_CHR(a) );
         END IF;
       END;

       --50. Validation for QRE rule .
       BEGIN
          MINIMUM_QUANTITY(1)      := MINIMUM_QUANTITY_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'QRE') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_MINIMUM_QUANTITY');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'QRE'    ,'RULE_INFORMATION4'   ,L_ATTRIBUTE_NAME         ,MINIMUM_QUANTITY_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'QRE') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_MINIMUM_QUANTITY');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'QRE'    ,'RULE_INFORMATION4'   ,L_ATTRIBUTE_NAME         ,MINIMUM_QUANTITY_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || MINIMUM_QUANTITY_CHR(a) );
         END IF;
       END;


       --51. Validation for QRE rule .
       BEGIN
          DEFAULT_QUANTITY(1)      := DEFAULT_QUANTITY_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'QRE') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DEFAULT_QUANTITY');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'QRE'    ,'RULE_INFORMATION5'   ,L_ATTRIBUTE_NAME         ,DEFAULT_QUANTITY_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'QRE') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DEFAULT_QUANTITY');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'QRE'    ,'RULE_INFORMATION5'   ,L_ATTRIBUTE_NAME         ,DEFAULT_QUANTITY_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION5' ||L_ATTRIBUTE_NAME || DEFAULT_QUANTITY_CHR(a) );
         END IF;
       END;

       --52. Validation for QRE rule .
       BEGIN
          FIXED_QUANTITY(1)      := FIXED_QUANTITY_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'QRE') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_FIXED_QUANTITY');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'QRE'    ,'RULE_INFORMATION7'   ,L_ATTRIBUTE_NAME         ,FIXED_QUANTITY_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'QRE') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_FIXED_QUANTITY');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'QRE'    ,'RULE_INFORMATION7'   ,L_ATTRIBUTE_NAME         ,FIXED_QUANTITY_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION7' ||L_ATTRIBUTE_NAME || FIXED_QUANTITY_CHR(a) );
         END IF;
       END;

       --53. Validation for QRE rule .
       BEGIN
          USAGE_DURATION(1)      := USAGE_DURATION_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'QRE') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_USAGE_DURATION');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'QRE'    ,'RULE_INFORMATION8'   ,L_ATTRIBUTE_NAME         ,USAGE_DURATION_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'QRE') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_USAGE_DURATION');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'QRE'    ,'RULE_INFORMATION8'   ,L_ATTRIBUTE_NAME         ,USAGE_DURATION_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION8' ||L_ATTRIBUTE_NAME || USAGE_DURATION_CHR(a) );
         END IF;
       END;

       --54. Validation for QRE rule .
       BEGIN
          BASE_READING(1)      := BASE_READING_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'QRE') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BASE_READING');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'QRE'    ,'RULE_INFORMATION12'   ,L_ATTRIBUTE_NAME         ,BASE_READING_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'QRE') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BASE_READING');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'QRE'    ,'RULE_INFORMATION12'   ,L_ATTRIBUTE_NAME         ,BASE_READING_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION13' ||L_ATTRIBUTE_NAME || BASE_READING_CHR(a) );
         END IF;
       END;

      --55
       BEGIN
          EXCEPTION_COV_ID(1)      := EXCEPTION_COV_ID_chr(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'ECE') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EXCEPTION_COV_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'ECE'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,EXCEPTION_COV_ID_chr(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'ECE') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EXCEPTION_COV_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'ECE'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,EXCEPTION_COV_ID_chr(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || EXCEPTION_COV_ID_chr(a));
         END IF;
       END;

       --56
       BEGIN
          PM_PROGRAM_ID(1)      := PM_PROGRAM_ID_chr(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'PMP') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PM_PROGRAM_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'PMP'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,PM_PROGRAM_ID_chr(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'PMP') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PM_PROGRAM_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PMP'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,PM_PROGRAM_ID_chr(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || PM_PROGRAM_ID_chr(a));
         END IF;
       END;
       --57
       BEGIN
          RCN_INCIDENT_SEVERITY_ID(1)      := RCN_INCIDENT_SEVERITY_ID_chr(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RCN') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RCN_INCIDENT_SVR_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RCN'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,RCN_INCIDENT_SEVERITY_ID_chr(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'RCN') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RCN_INCIDENT_SVR_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'RCN'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,RCN_INCIDENT_SEVERITY_ID_chr(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || RCN_INCIDENT_SEVERITY_ID_chr(a));
         END IF;
       END;

       --58
       BEGIN
          RCN_PDF_ID(1)      := RCN_PDF_ID_chr(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RCN') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RCN_PDF_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RCN'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,RCN_PDF_ID_chr(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'RCN') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RCN_PDF_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'RCN'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,RCN_PDF_ID_chr(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || RCN_PDF_ID_chr(a));
         END IF;
       END;

       --59

       BEGIN
          LIMIT_UOM_QUANTIFIED(1)      := LIMIT_UOM_QUANTIFIED_chr(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'LMT') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_LIMIT_UOM_QUANTIFIED');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'LMT'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,LIMIT_UOM_QUANTIFIED_chr(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'LMT') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_LIMIT_UOM_QUANTIFIED');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'LMT'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,LIMIT_UOM_QUANTIFIED_chr(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || LIMIT_UOM_QUANTIFIED_chr(a));
         END IF;
       END;

     --60
       BEGIN
          DISCOUNT_AMOUNT(1)      := DISCOUNT_AMOUNT_chr(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'LMT') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DISCOUNT_AMOUNT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'LMT'    ,'RULE_INFORMATION2'   ,L_ATTRIBUTE_NAME         ,DISCOUNT_AMOUNT_chr(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'LMT') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DISCOUNT_AMOUNT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'LMT'    ,'RULE_INFORMATION2'   ,L_ATTRIBUTE_NAME         ,DISCOUNT_AMOUNT_chr(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || DISCOUNT_AMOUNT_chr(a));
         END IF;
       END;

      --61
       BEGIN
          DISCOUNT_PERCENT(1)      := DISCOUNT_PERCENT_chr(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'LMT') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DISCOUNT_PERCENT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'LMT'    ,'RULE_INFORMATION4'   ,L_ATTRIBUTE_NAME         ,DISCOUNT_PERCENT_chr(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'LMT') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DISCOUNT_PERCENT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'LMT'    ,'RULE_INFORMATION4'   ,L_ATTRIBUTE_NAME         ,DISCOUNT_PERCENT_chr(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));
         END IF;
       END;
----------------------------------------------------------------------------------------------------------------------

       --62
       BEGIN
          LEVEL_AMOUNT(1)      := LEVEL_AMOUNT_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'SLL') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_LEVEL_AMOUNT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'SLL'    ,'RULE_INFORMATION6'   ,L_ATTRIBUTE_NAME         ,LEVEL_AMOUNT_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'SLL') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_LEVEL_AMOUNT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'SLL'    ,'RULE_INFORMATION6'   ,L_ATTRIBUTE_NAME         ,LEVEL_AMOUNT_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));
         END IF;

       END;


    END LOOP;
    CHR_ID.DELETE;

    -- End of code to validate data type .
    ------------------------------------------------------------------------------------

 End Loop;




  If(l_hdr_rule_csr1%ISOPEN) THEN
    Close  l_hdr_rule_csr1;
  END IF;
  If(l_hdr_rule_csr2%ISOPEN) THEN
    Close  l_hdr_rule_csr2;
  End if;

  If(l_hdr_rule_csr1_nus%ISOPEN) THEN
    Close  l_hdr_rule_csr1_nus;
  END IF;
  If(l_hdr_rule_csr2_nus%ISOPEN) THEN
    Close  l_hdr_rule_csr2_nus;
  End if;

EXCEPTION
WHEN OTHERS THEN
  If(l_hdr_rule_csr1%ISOPEN) THEN
    Close  l_hdr_rule_csr1;
  END IF;
  If(l_hdr_rule_csr2%ISOPEN) THEN
    Close  l_hdr_rule_csr2;
  End if;
  If(l_hdr_rule_csr1_nus%ISOPEN) THEN
    Close  l_hdr_rule_csr1_nus;
  END IF;
  If(l_hdr_rule_csr2_nus%ISOPEN) THEN
    Close  l_hdr_rule_csr2_nus;
  End if;


END VALIDATE_ALL_RULE;

--------------------------------------------------------------------------------------------
--    This is the procedure called from VALIDATE_DATA1 to validate ALL history rule data           --
--------------------------------------------------------------------------------------------
Procedure VALIDATE_ALLH_RULE(
                            ERRBUF            OUT NOCOPY VARCHAR2 ,
                            RETCODE           OUT NOCOPY NUMBER ,
                            p_status          in VARCHAR2,
                            p_org_id          in NUMBER ,
                            p_batch_size      in NUMBER,
			    p_us_yn           in VARCHAR2,
                            p_id_low          in NUMBER,
                            p_id_hig          in NUMBER)
IS

Type l_num_tbl is table of  NUMBER         index  by BINARY_INTEGER ;
Type l_date_tbl is table of DATE           index  by BINARY_INTEGER ;
Type l_chr_tbl is table of  VARCHAR2(2000) index  by BINARY_INTEGER ;


ID                        l_num_tbl ;
CHR_ID                    l_num_tbl ;
CLE_ID                    l_num_tbl ;
MAJOR_VERSION             l_num_tbl ;
DNZ_CHR_ID                l_num_tbl ;
ACCT_RULE_ID              l_num_tbl ;
PAYMENT_TYPE              L_CHR_TBL ;
CC_NO                     l_chr_tbl ;
CC_EXPIRY_DATE            l_date_tbl;
CC_BANK_ACCT_ID           l_num_tbl ;
CC_AUTH_CODE              l_chr_tbl ;
GRACE_DURATION            l_num_tbl ;
GRACE_PERIOD              l_chr_tbl ;
EST_REV_PERCENT           l_num_tbl ;
EST_REV_DATE              l_date_tbl;
INVOICE_TEXT              l_chr_tbl ;
INV_PRINT_FLAG            l_chr_tbl ;
PRICE_UOM                 l_chr_tbl ;
TAX_AMOUNT                l_num_tbl ;
TAX_INCLUSIVE_YN          l_chr_tbl ;
TAX_STATUS                l_chr_tbl ;
TAX_CODE                  l_num_tbl ;
TAX_EXEMPTION_ID          l_num_tbl ;
BILLING_SCHEDULE_TYPE     l_chr_tbl ;
CUST_ACCT_ID              l_num_tbl ;
BILL_TO_SITE_USE_ID       l_num_tbl ;
INV_RULE_ID               l_num_tbl ;
RENEWAL_TYPE_CODE         l_chr_tbl ;
RENEWAL_NOTIFY_TO         l_num_tbl ;
RENEWAL_END_DATE          l_date_tbl;
SHIP_TO_SITE_USE_ID       l_num_tbl ;
PAYMENT_TERM_ID           l_num_tbl ;
BILLING_PROFILE_ID        l_num_tbl ;
RENEWAL_STATUS            l_chr_tbl ;
ELECTRONIC_RENEWAL_FLAG   l_chr_tbl ;
QUOTE_TO_CONTACT_ID       l_num_tbl ;
QUOTE_TO_SITE_ID          l_num_tbl ;
QUOTE_TO_EMAIL_ID         l_num_tbl ;
QUOTE_TO_PHONE_ID         l_num_tbl ;
QUOTE_TO_FAX_ID           l_num_tbl ;
RENEWAL_PO_REQUIRED       l_chr_tbl ;
RENEWAL_PRICE_LIST        l_num_tbl ;
RENEWAL_PRICING_TYPE      l_chr_tbl ;
RENEWAL_MARKUP_PERCENT    l_num_tbl ;
RENEWAL_GRACE_DURATION    l_num_tbl ;
RENEWAL_GRACE_PERIOD      l_chr_tbl ;
RENEWAL_EST_REV_PERCENT   l_num_tbl ;
RENEWAL_EST_REV_DURATION  l_num_tbl ;
RENEWAL_EST_REV_PERIOD    l_chr_tbl ;
RENEWAL_PRICE_LIST_USED   l_num_tbl ;
RENEWAL_TYPE_USED         l_chr_tbl ;
RENEWAL_NOTIFICATION_TO   l_num_tbl ;
RENEWAL_PO_USED           l_chr_tbl ;
RENEWAL_PRICING_TYPE_USED l_chr_tbl ;
RENEWAL_MARKUP_PERCENT_USED   l_num_tbl ;
REV_EST_PERCENT_USED      l_num_tbl ;
REV_EST_DURATION_USED     l_num_tbl ;
BILLING_PROFILE_USED      l_num_tbl ;
REV_EST_PERIOD_USED       l_chr_tbl ;
ERN_FLAG_USED_YN          l_chr_tbl ;
EVN_THRESHOLD_AMT         l_num_tbl ;
EVN_THRESHOLD_CUR         l_chr_tbl ;
ERN_THRESHOLD_AMT         l_num_tbl ;
ERN_THRESHOLD_CUR         l_chr_tbl ;
RENEWAL_GRACE_DURATION_USED   l_num_tbl ;
RENEWAL_GRACE_PERIOD_USED l_chr_tbl ;
INV_TRX_TYPE              l_chr_tbl ;
INV_PRINT_PROFILE         l_chr_tbl ;
RENEWAL_PO_NUMBER         l_chr_tbl ;
AR_INTERFACE_YN           l_chr_tbl ;
HOLD_BILLING              l_chr_tbl ;
SUMMARY_TRX_YN            l_chr_tbl ;
SERVICE_PO_NUMBER         l_chr_tbl ;
SERVICE_PO_REQUIRED       l_chr_tbl ;
PRICE_LIST_ID             l_num_tbl ;
CONVERSION_TYPE           l_chr_tbl ;
CONVERSION_RATE           l_num_tbl ;
CONVERSION_RATE_DATE      l_date_tbl;
CONVERSION_EURO_RATE      l_num_tbl ;
----extra rules from line------------------
DISCOUNT_LIST		  l_num_tbl ;
CLVL_LIST_PRICE		  l_num_tbl ;
CLVL_QUANTITY		  l_num_tbl ;
CLVL_EXTENDED_AMT	  l_num_tbl ;
TOPLVL_OPERAND_VAL	  l_num_tbl ;
TOPLVL_QUANTITY		  l_num_tbl ;
TOPLVL_ADJ_PRICE	  l_num_tbl ;
TOPLVL_PRICE_QTY	  l_num_tbl ;
AVERAGING_INTERVAL	  l_num_tbl ;
MINIMUM_QUANTITY	  l_num_tbl ;
DEFAULT_QUANTITY	  l_num_tbl ;
FIXED_QUANTITY		  l_num_tbl ;
USAGE_DURATION		  l_num_tbl ;
BASE_READING		  l_num_tbl ;
EXCEPTION_COV_ID	  l_num_tbl ;
PM_PROGRAM_ID		  l_num_tbl ;
RCN_INCIDENT_SEVERITY_ID  l_num_tbl ;
RCN_PDF_ID		  l_num_tbl ;
LIMIT_UOM_QUANTIFIED	  l_num_tbl ;
DISCOUNT_AMOUNT		  l_num_tbl ;
DISCOUNT_PERCENT	  l_num_tbl ;
LEVEL_AMOUNT		  l_num_tbl ;



-- FOLLOWING ARE NUMBER FIELDS --
ACCT_RULE_ID_CHR              l_chr_tbl ;
CC_BANK_ACCT_ID_CHR           l_chr_tbl ;
GRACE_DURATION_CHR            l_chr_tbl ;
EST_REV_PERCENT_CHR           l_chr_tbl ;
TAX_AMOUNT_CHR                l_chr_tbl ;
TAX_CODE_CHR                  l_chr_tbl ;
TAX_EXEMPTION_ID_CHR          l_chr_tbl ;
CUST_ACCT_ID_CHR              l_chr_tbl ;
BILL_TO_SITE_USE_ID_CHR       l_chr_tbl ;
INV_RULE_ID_CHR               l_chr_tbl ;
RENEWAL_NOTIFY_TO_CHR         l_chr_tbl ;
SHIP_TO_SITE_USE_ID_CHR       l_chr_tbl ;
PAYMENT_TERM_ID_CHR           l_chr_tbl ;
BILLING_PROFILE_ID_CHR        l_chr_tbl ;
QUOTE_TO_CONTACT_ID_CHR       l_chr_tbl ;
QUOTE_TO_SITE_ID_CHR          l_chr_tbl ;
QUOTE_TO_EMAIL_ID_CHR         l_chr_tbl ;
QUOTE_TO_PHONE_ID_CHR         l_chr_tbl ;
QUOTE_TO_FAX_ID_CHR           l_chr_tbl ;
RENEWAL_PRICE_LIST_CHR        l_chr_tbl ;
RENEWAL_MARKUP_PERCENT_CHR    l_chr_tbl ;
RENEWAL_GRACE_DURATION_CHR    l_chr_tbl ;
RENEWAL_EST_REV_PERCENT_CHR   l_chr_tbl ;
RENEWAL_EST_REV_DURATION_CHR  l_chr_tbl ;
RENEWAL_PRICE_LIST_USED_CHR   l_chr_tbl ;
RENEWAL_NOTIFICATION_TO_CHR   l_chr_tbl ;
RENEWAL_MARKUP_PERCENT_USED_CH l_chr_tbl ;
REV_EST_PERCENT_USED_CHR      l_chr_tbl ;
REV_EST_DURATION_USED_CHR     l_chr_tbl ;
BILLING_PROFILE_USED_CHR      l_chr_tbl ;
EVN_THRESHOLD_AMT_CHR         l_chr_tbl ;
ERN_THRESHOLD_AMT_CHR         l_chr_tbl ;
RENEWAL_GRACE_DURATION_USED_CH l_chr_tbl ;
PRICE_LIST_ID_CHR             l_chr_tbl ;
CONVERSION_RATE_CHR           l_chr_tbl ;
CONVERSION_EURO_RATE_CHR      l_chr_tbl ;
----extra rules from line------------------
DISCOUNT_LIST_CHR       	l_chr_tbl ;
CLVL_LIST_PRICE_CHR		l_chr_tbl ;
CLVL_QUANTITY_CHR		l_chr_tbl ;
CLVL_EXTENDED_AMT_CHR		l_chr_tbl ;
TOPLVL_OPERAND_VAL_CHR		l_chr_tbl ;
TOPLVL_QUANTITY_CHR		l_chr_tbl ;
TOPLVL_ADJ_PRICE_CHR		l_chr_tbl ;
TOPLVL_PRICE_QTY_CHR		l_chr_tbl ;
AVERAGING_INTERVAL_CHR		l_chr_tbl ;
MINIMUM_QUANTITY_CHR		l_chr_tbl ;
DEFAULT_QUANTITY_CHR		l_chr_tbl ;
FIXED_QUANTITY_CHR		l_chr_tbl ;
USAGE_DURATION_CHR		l_chr_tbl ;
BASE_READING_CHR		l_chr_tbl ;
EXCEPTION_COV_ID_CHR		l_chr_tbl ;
PM_PROGRAM_ID_CHR		l_chr_tbl ;
RCN_INCIDENT_SEVERITY_ID_CHR	l_chr_tbl ;
RCN_PDF_ID_CHR			l_chr_tbl ;
LIMIT_UOM_QUANTIFIED_CHR	l_chr_tbl ;
DISCOUNT_AMOUNT_CHR		l_chr_tbl ;
DISCOUNT_PERCENT_CHR		l_chr_tbl ;
LEVEL_AMOUNT_CHR		l_chr_tbl ;

-- FOLLOWING ARE DATE FIELDS --
CC_EXPIRY_DATE_CHR            l_chr_tbl ;
EST_REV_DATE_CHR              l_chr_tbl ;
RENEWAL_END_DATE_CHR          l_chr_tbl ;
CONVERSION_RATE_DATE_CHR      l_chr_tbl ;

--Misc Variables --
L_ATTRIBUTE_NAME              VARCHAR2(2000);
L_ERROR_MSG                   VARCHAR2(2000);

l_us_yn                       BOOLEAN;
-------------------------------------------------------------------------------
-- The following is the cursor opened if all the parameters passed are null  --
-------------------------------------------------------------------------------
CURSOR l_hdr_rule_csr1 (p_id_low in NUMBER , p_id_hig in NUMBER )is
SELECT * FROM (
SELECT  RGP.CHR_ID CHR_ID
       ,RUL.MAJOR_VERSION MAJOR_VERSION
       ,RGP.CLE_ID CLE_ID
       ,RGP.DNZ_CHR_ID DNZ_CHR_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)))
            ACCT_RULE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' , '!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)))
            CC_BANK_ACCT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)))
            GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)), NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)))
            EST_REV_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!' ),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)))
            TAX_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' , '!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)))
            TAX_CODE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)))
            TAX_EXEMPTION_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)))
            BILLING_PROFILE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)))
            QUOTE_TO_CONTACT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT2_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4)))
            QUOTE_TO_SITE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)))
            QUOTE_TO_EMAIL_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)))
            QUOTE_TO_PHONE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)))
            QUOTE_TO_FAX_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)))
            RENEWAL_PRICE_LIST
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)))
            RENEWAL_MARKUP_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)))
            RENEWAL_GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)))
            RENEWAL_EST_REV_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)))
            RENEWAL_EST_REV_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)))
            RENEWAL_PRICE_LIST_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)))
            RENEWAL_NOTIFICATION_TO
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)))
            RENEWAL_MARKUP_PERCENT_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)))
            REV_EST_PERCENT_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)))
            REV_EST_DURATION_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)))
            BILLING_PROFILE_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)))
            EVN_THRESHOLD_AMT
        ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),
	    '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)))
            ERN_THRESHOLD_AMT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)))
            RENEWAL_GRACE_DURATION_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)))
            CONVERSION_RATE --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)))
            CONVERSION_EURO_RATE --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)))
            CUST_ACCT_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)))
            BILL_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)))
            INV_RULE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)))
            RENEWAL_NOTIFY_TO --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)))
            SHIP_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)))
            PAYMENT_TERM_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)))
            PRICE_LIST_ID --OKC
       ----------------------Extra Rules for lines added------------------------------------------
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)))
               DISCOUNT_LIST
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)))
               CLVL_LIST_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)))
               CLVL_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)))
               CLVL_EXTENDED_AMT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)))
               TOPLVL_OPERAND_VAL
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)))
               TOPLVL_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)))
               TOPLVL_ADJ_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)))
               TOPLVL_PRICE_QTY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)))
               AVERAGING_INTERVAL
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)))
               MINIMUM_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)))
               DEFAULT_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)))
               FIXED_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)))
               USAGE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)))
               BASE_READING
        ----------------------------- COVERAGE CODE START -------------------------------------------------
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)))
               EXCEPTION_COV_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)))
               PM_PROGRAM_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)))
               RCN_INCIDENT_SEVERITY_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)))
               RCN_PDF_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)))
               LIMIT_UOM_QUANTIFIED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)))
               DISCOUNT_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)))
               DISCOUNT_PERCENT
        ----------------------------- COVERAGE CODE END ----------------------------------------------------
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)))
               LEVEL_AMOUNT

FROM OKC_RULE_GROUPS_BH RGP
   , OKC_RULES_BH RUL
WHERE rgp.id = rul.rgp_id
  AND rgp.rgd_code = 'SVC_K'
  AND   RUL.RULE_INFORMATION_CATEGORY IN
       ('ARL','CCR','GPR','RVE','IRT','TAX','ERN','QTO', 'RPO', 'RPT','RER', 'RRU',
        'RRE', 'SBG', 'SPO','SLH','PRE', 'CVN','CAN', 'BTO', 'IRE', 'REN', 'STO', 'PTR',
	'DST','PDL','QRE','ECE','PMP','RCN','LMT','SLL')
  AND RGP.DNZ_CHR_ID = RUL.DNZ_CHR_ID
  AND RGP.ID BETWEEN P_ID_LOW  AND P_ID_HIG
  GROUP BY RGP.CHR_ID,RUL.MAJOR_VERSION,RGP.CLE_ID,RGP.DNZ_CHR_ID)
WHERE
  ACCT_RULE_ID    IS NOT NULL OR
  CC_BANK_ACCT_ID IS NOT NULL OR
  GRACE_DURATION  IS NOT NULL OR
  EST_REV_PERCENT IS NOT NULL OR
  TAX_AMOUNT      IS NOT NULL OR
  TAX_CODE        IS NOT NULL OR
  TAX_EXEMPTION_ID    IS NOT NULL OR
  BILLING_PROFILE_ID  IS NOT NULL OR
  QUOTE_TO_CONTACT_ID IS NOT NULL OR
  QUOTE_TO_SITE_ID    IS NOT NULL OR
  QUOTE_TO_EMAIL_ID   IS NOT NULL OR
  QUOTE_TO_PHONE_ID   IS NOT NULL OR
  QUOTE_TO_FAX_ID     IS NOT NULL OR
  RENEWAL_PRICE_LIST  IS NOT NULL OR
  RENEWAL_MARKUP_PERCENT   IS NOT NULL OR
  RENEWAL_GRACE_DURATION   IS NOT NULL OR
  RENEWAL_EST_REV_PERCENT  IS NOT NULL OR
  RENEWAL_EST_REV_DURATION IS NOT NULL OR
  RENEWAL_PRICE_LIST_USED  IS NOT NULL OR
  RENEWAL_NOTIFICATION_TO  IS NOT NULL OR
  RENEWAL_MARKUP_PERCENT_USED IS NOT NULL OR
  REV_EST_PERCENT_USED  IS NOT NULL OR
  REV_EST_DURATION_USED IS NOT NULL OR
  BILLING_PROFILE_USED  IS NOT NULL OR
  EVN_THRESHOLD_AMT  IS NOT NULL OR
  ERN_THRESHOLD_AMT  IS NOT NULL OR
  RENEWAL_GRACE_DURATION_USED IS NOT NULL OR
  CONVERSION_RATE     IS NOT NULL OR
  CONVERSION_EURO_RATE IS NOT NULL OR
  CUST_ACCT_ID        IS NOT NULL OR
  BILL_TO_SITE_USE_ID IS NOT NULL OR
  INV_RULE_ID         IS NOT NULL OR
  RENEWAL_NOTIFY_TO   IS NOT NULL OR
  SHIP_TO_SITE_USE_ID IS NOT NULL OR
  PAYMENT_TERM_ID     IS NOT NULL OR
 PRICE_LIST_ID       IS NOT NULL OR
   -----extra line rules added---------------------
  DISCOUNT_LIST	      IS NOT NULL OR
  CLVL_LIST_PRICE     IS NOT NULL OR
  CLVL_QUANTITY       IS NOT NULL OR
  CLVL_EXTENDED_AMT   IS NOT NULL OR
  TOPLVL_OPERAND_VAL  IS NOT NULL OR
  TOPLVL_QUANTITY     IS NOT NULL OR
  TOPLVL_ADJ_PRICE    IS NOT NULL OR
  TOPLVL_PRICE_QTY    IS NOT NULL OR
  AVERAGING_INTERVAL  IS NOT NULL OR
  MINIMUM_QUANTITY    IS NOT NULL OR
  DEFAULT_QUANTITY    IS NOT NULL OR
  FIXED_QUANTITY      IS NOT NULL OR
  USAGE_DURATION      IS NOT NULL OR
  BASE_READING        IS NOT NULL OR
  EXCEPTION_COV_ID    IS NOT NULL OR
  PM_PROGRAM_ID       IS NOT NULL OR
  RCN_INCIDENT_SEVERITY_ID IS NOT NULL OR
  RCN_PDF_ID           IS NOT NULL OR
  LIMIT_UOM_QUANTIFIED IS NOT NULL OR
  DISCOUNT_AMOUNT      IS NOT NULL OR
  DISCOUNT_PERCENT     IS NOT NULL OR
  LEVEL_AMOUNT         IS NOT NULL;




-------------------------------------------------------------------------------
-- The following is the cursor opened if any of the following parameters are --
-- passed to the concurrent request                                          --
-- 1. p_status
-- 2. p_org_id
-------------------------------------------------------------------------------
CURSOR l_hdr_rule_csr2 (p_id_low in NUMBER , p_id_hig in NUMBER , p_status in VARCHAR2 , p_org_id in NUMBER )is
SELECT * FROM (
SELECT  RGP.CHR_ID CHR_ID
       ,RUL.MAJOR_VERSION MAJOR_VERSION
       ,RGP.CLE_ID CLE_ID
       ,RGP.DNZ_CHR_ID DNZ_CHR_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)))
            ACCT_RULE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' , '!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)))
            CC_BANK_ACCT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)))
            GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)), NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)))
            EST_REV_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!' ),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)))
            TAX_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' , '!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)))
            TAX_CODE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)))
            TAX_EXEMPTION_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)))
            BILLING_PROFILE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)))
            QUOTE_TO_CONTACT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT2_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4)))
            QUOTE_TO_SITE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)))
            QUOTE_TO_EMAIL_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)))
            QUOTE_TO_PHONE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)))
            QUOTE_TO_FAX_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)))
            RENEWAL_PRICE_LIST
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)))
            RENEWAL_MARKUP_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)))
            RENEWAL_GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)))
            RENEWAL_EST_REV_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)))
            RENEWAL_EST_REV_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)))
            RENEWAL_PRICE_LIST_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)))
            RENEWAL_NOTIFICATION_TO
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)))
            RENEWAL_MARKUP_PERCENT_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)))
            REV_EST_PERCENT_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)))
            REV_EST_DURATION_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)))
            BILLING_PROFILE_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)))
            EVN_THRESHOLD_AMT
        ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),
	    '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)))
            ERN_THRESHOLD_AMT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)))
            RENEWAL_GRACE_DURATION_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)))
            CONVERSION_RATE --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)))
            CONVERSION_EURO_RATE --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)))
            CUST_ACCT_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)))
            BILL_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)))
            INV_RULE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)))
            RENEWAL_NOTIFY_TO --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)))
            SHIP_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)))
            PAYMENT_TERM_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)))
            PRICE_LIST_ID --OKC
       ----------------------Extra Rules for lines added------------------------------------------
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)))
               DISCOUNT_LIST
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)))
               CLVL_LIST_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)))
               CLVL_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)))
               CLVL_EXTENDED_AMT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)))
               TOPLVL_OPERAND_VAL
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)))
               TOPLVL_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)))
               TOPLVL_ADJ_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)))
               TOPLVL_PRICE_QTY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)))
               AVERAGING_INTERVAL
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)))
               MINIMUM_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)))
               DEFAULT_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)))
               FIXED_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)))
               USAGE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)))
               BASE_READING
        ----------------------------- COVERAGE CODE START -------------------------------------------------
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)))
               EXCEPTION_COV_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)))
               PM_PROGRAM_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)))
               RCN_INCIDENT_SEVERITY_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)))
               RCN_PDF_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)))
               LIMIT_UOM_QUANTIFIED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)))
               DISCOUNT_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)))
               DISCOUNT_PERCENT
        ----------------------------- COVERAGE CODE END ----------------------------------------------------
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)))
               LEVEL_AMOUNT

FROM OKC_RULE_GROUPS_BH RGP
   , OKC_RULES_BH RUL
   , OKC_K_HEADERS_BH HDR
WHERE rgp.id = rul.rgp_id
  and rgp.rgd_code = 'SVC_K'
  AND   RUL.RULE_INFORMATION_CATEGORY IN
       ('ARL','CCR','GPR','RVE','IRT','TAX','ERN','QTO', 'RPO', 'RPT','RER', 'RRU',
        'RRE', 'SBG', 'SPO','SLH','PRE', 'CVN','CAN', 'BTO', 'IRE', 'REN', 'STO', 'PTR',
	'DST','PDL','QRE','ECE','PMP','RCN','LMT','SLL')
  AND HDR.ID BETWEEN P_ID_LOW  AND P_ID_HIG
  AND HDR.ID = RGP.DNZ_CHR_ID
  AND RGP.DNZ_CHR_ID = RUL.DNZ_CHR_ID
  AND HDR.ID = RUL.DNZ_CHR_ID
  AND HDR.STS_CODE = nvl(p_status,HDR.STS_CODE)
  AND HDR.AUTHORING_ORG_ID = nvl(P_ORG_ID, HDR.AUTHORING_ORG_ID)
  GROUP BY RGP.CHR_ID,RUL.MAJOR_VERSION,RGP.CLE_ID,RGP.DNZ_CHR_ID)
WHERE
  ACCT_RULE_ID    IS NOT NULL OR
  CC_BANK_ACCT_ID IS NOT NULL OR
  GRACE_DURATION  IS NOT NULL OR
  EST_REV_PERCENT IS NOT NULL OR
  TAX_AMOUNT      IS NOT NULL OR
  TAX_CODE        IS NOT NULL OR
  TAX_EXEMPTION_ID    IS NOT NULL OR
  BILLING_PROFILE_ID  IS NOT NULL OR
  QUOTE_TO_CONTACT_ID IS NOT NULL OR
  QUOTE_TO_SITE_ID    IS NOT NULL OR
  QUOTE_TO_EMAIL_ID   IS NOT NULL OR
  QUOTE_TO_PHONE_ID   IS NOT NULL OR
  QUOTE_TO_FAX_ID     IS NOT NULL OR
  RENEWAL_PRICE_LIST  IS NOT NULL OR
  RENEWAL_MARKUP_PERCENT   IS NOT NULL OR
  RENEWAL_GRACE_DURATION   IS NOT NULL OR
  RENEWAL_EST_REV_PERCENT  IS NOT NULL OR
  RENEWAL_EST_REV_DURATION IS NOT NULL OR
  RENEWAL_PRICE_LIST_USED  IS NOT NULL OR
  RENEWAL_NOTIFICATION_TO  IS NOT NULL OR
  RENEWAL_MARKUP_PERCENT_USED IS NOT NULL OR
  REV_EST_PERCENT_USED  IS NOT NULL OR
  REV_EST_DURATION_USED IS NOT NULL OR
  BILLING_PROFILE_USED  IS NOT NULL OR
  EVN_THRESHOLD_AMT  IS NOT NULL OR
  ERN_THRESHOLD_AMT  IS NOT NULL OR
  RENEWAL_GRACE_DURATION_USED IS NOT NULL OR
  CONVERSION_RATE     IS NOT NULL OR
  CONVERSION_EURO_RATE IS NOT NULL OR
  CUST_ACCT_ID        IS NOT NULL OR
  BILL_TO_SITE_USE_ID IS NOT NULL OR
  INV_RULE_ID         IS NOT NULL OR
  RENEWAL_NOTIFY_TO   IS NOT NULL OR
  SHIP_TO_SITE_USE_ID IS NOT NULL OR
  PAYMENT_TERM_ID     IS NOT NULL OR
  PRICE_LIST_ID       IS NOT NULL OR
  -----extra line rules added---------------------
  DISCOUNT_LIST	      IS NOT NULL OR
  CLVL_LIST_PRICE     IS NOT NULL OR
  CLVL_QUANTITY       IS NOT NULL OR
  CLVL_EXTENDED_AMT   IS NOT NULL OR
  TOPLVL_OPERAND_VAL  IS NOT NULL OR
  TOPLVL_QUANTITY     IS NOT NULL OR
  TOPLVL_ADJ_PRICE    IS NOT NULL OR
  TOPLVL_PRICE_QTY    IS NOT NULL OR
  AVERAGING_INTERVAL  IS NOT NULL OR
  MINIMUM_QUANTITY    IS NOT NULL OR
  DEFAULT_QUANTITY    IS NOT NULL OR
  FIXED_QUANTITY      IS NOT NULL OR
  USAGE_DURATION      IS NOT NULL OR
  BASE_READING        IS NOT NULL OR
  EXCEPTION_COV_ID    IS NOT NULL OR
  PM_PROGRAM_ID       IS NOT NULL OR
  RCN_INCIDENT_SEVERITY_ID IS NOT NULL OR
  RCN_PDF_ID           IS NOT NULL OR
  LIMIT_UOM_QUANTIFIED IS NOT NULL OR
  DISCOUNT_AMOUNT      IS NOT NULL OR
  DISCOUNT_PERCENT     IS NOT NULL OR
  LEVEL_AMOUNT         IS NOT NULL;


-------------------------------------------------------------------------------
-- The following is the cursor opened if all the parameters passed are null  --
-------------------------------------------------------------------------------
CURSOR l_hdr_rule_csr1_nus (p_id_low in NUMBER , p_id_hig in NUMBER )is
SELECT * FROM (
SELECT  RGP.CHR_ID CHR_ID
       ,RUL.MAJOR_VERSION MAJOR_VERSION
       ,RGP.CLE_ID CLE_ID
       ,RGP.DNZ_CHR_ID DNZ_CHR_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)))
            ACCT_RULE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' , '!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)))
            CC_BANK_ACCT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)))
            GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)), NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)))
            EST_REV_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!' ),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)))
            TAX_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' , '!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)))
            TAX_CODE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)))
            TAX_EXEMPTION_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)))
            BILLING_PROFILE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)))
            QUOTE_TO_CONTACT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT2_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4)))
            QUOTE_TO_SITE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)))
            QUOTE_TO_EMAIL_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)))
            QUOTE_TO_PHONE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)))
            QUOTE_TO_FAX_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)))
            RENEWAL_PRICE_LIST
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)))
            RENEWAL_MARKUP_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)))
            RENEWAL_GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)))
            RENEWAL_EST_REV_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)))
            RENEWAL_EST_REV_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)))
            RENEWAL_PRICE_LIST_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)))
            RENEWAL_NOTIFICATION_TO
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)))
            RENEWAL_MARKUP_PERCENT_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)))
            REV_EST_PERCENT_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)))
            REV_EST_DURATION_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)))
            BILLING_PROFILE_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)))
            EVN_THRESHOLD_AMT
        ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),
	    '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)))
            ERN_THRESHOLD_AMT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)))
            RENEWAL_GRACE_DURATION_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)))
            CONVERSION_RATE --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)))
            CONVERSION_EURO_RATE --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)))
            CUST_ACCT_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)))
            BILL_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)))
            INV_RULE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)))
            RENEWAL_NOTIFY_TO --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)))
            SHIP_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)))
            PAYMENT_TERM_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)))
            PRICE_LIST_ID --OKC
       ----------------------Extra Rules for lines added------------------------------------------
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)))
               DISCOUNT_LIST
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)))
               CLVL_LIST_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)))
               CLVL_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)))
               CLVL_EXTENDED_AMT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)))
               TOPLVL_OPERAND_VAL
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)))
               TOPLVL_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)))
               TOPLVL_ADJ_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)))
               TOPLVL_PRICE_QTY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)))
               AVERAGING_INTERVAL
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)))
               MINIMUM_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)))
               DEFAULT_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)))
               FIXED_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)))
               USAGE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)))
               BASE_READING
        ----------------------------- COVERAGE CODE START -------------------------------------------------
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)))
               EXCEPTION_COV_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)))
               PM_PROGRAM_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)))
               RCN_INCIDENT_SEVERITY_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)))
               RCN_PDF_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)))
               LIMIT_UOM_QUANTIFIED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)))
               DISCOUNT_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)))
               DISCOUNT_PERCENT
        ----------------------------- COVERAGE CODE END ----------------------------------------------------
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)))
               LEVEL_AMOUNT

FROM OKC_RULE_GROUPS_BH RGP
   , OKC_RULES_BH RUL
WHERE rgp.id = rul.rgp_id
  AND rgp.rgd_code = 'SVC_K'
  AND   RUL.RULE_INFORMATION_CATEGORY IN
       ('ARL','CCR','GPR','RVE','IRT','TAX','ERN','QTO', 'RPO', 'RPT','RER', 'RRU',
        'RRE', 'SBG', 'SPO','SLH','PRE', 'CVN','CAN', 'BTO', 'IRE', 'REN', 'STO', 'PTR',
	'DST','PDL','QRE','ECE','PMP','RCN','LMT','SLL')
  AND RGP.DNZ_CHR_ID = RUL.DNZ_CHR_ID
  AND RGP.ID BETWEEN P_ID_LOW  AND P_ID_HIG
  GROUP BY RGP.CHR_ID,RUL.MAJOR_VERSION,RGP.CLE_ID,RGP.DNZ_CHR_ID)
WHERE
  ACCT_RULE_ID    IS NOT NULL OR
  CC_BANK_ACCT_ID IS NOT NULL OR
  GRACE_DURATION  IS NOT NULL OR
  EST_REV_PERCENT IS NOT NULL OR
  TAX_AMOUNT      IS NOT NULL OR
  TAX_CODE        IS NOT NULL OR
  TAX_EXEMPTION_ID    IS NOT NULL OR
  BILLING_PROFILE_ID  IS NOT NULL OR
  QUOTE_TO_CONTACT_ID IS NOT NULL OR
  QUOTE_TO_SITE_ID    IS NOT NULL OR
  QUOTE_TO_EMAIL_ID   IS NOT NULL OR
  QUOTE_TO_PHONE_ID   IS NOT NULL OR
  QUOTE_TO_FAX_ID     IS NOT NULL OR
  RENEWAL_PRICE_LIST  IS NOT NULL OR
  RENEWAL_MARKUP_PERCENT   IS NOT NULL OR
  RENEWAL_GRACE_DURATION   IS NOT NULL OR
  RENEWAL_EST_REV_PERCENT  IS NOT NULL OR
  RENEWAL_EST_REV_DURATION IS NOT NULL OR
  RENEWAL_PRICE_LIST_USED  IS NOT NULL OR
  RENEWAL_NOTIFICATION_TO  IS NOT NULL OR
  RENEWAL_MARKUP_PERCENT_USED IS NOT NULL OR
  REV_EST_PERCENT_USED  IS NOT NULL OR
  REV_EST_DURATION_USED IS NOT NULL OR
  BILLING_PROFILE_USED  IS NOT NULL OR
  EVN_THRESHOLD_AMT  IS NOT NULL OR
  ERN_THRESHOLD_AMT  IS NOT NULL OR
  RENEWAL_GRACE_DURATION_USED IS NOT NULL OR
  CONVERSION_RATE     IS NOT NULL OR
  CONVERSION_EURO_RATE IS NOT NULL OR
  CUST_ACCT_ID        IS NOT NULL OR
  BILL_TO_SITE_USE_ID IS NOT NULL OR
  INV_RULE_ID         IS NOT NULL OR
  RENEWAL_NOTIFY_TO   IS NOT NULL OR
  SHIP_TO_SITE_USE_ID IS NOT NULL OR
  PAYMENT_TERM_ID     IS NOT NULL OR
 PRICE_LIST_ID       IS NOT NULL OR
   -----extra line rules added---------------------
  DISCOUNT_LIST	      IS NOT NULL OR
  CLVL_LIST_PRICE     IS NOT NULL OR
  CLVL_QUANTITY       IS NOT NULL OR
  CLVL_EXTENDED_AMT   IS NOT NULL OR
  TOPLVL_OPERAND_VAL  IS NOT NULL OR
  TOPLVL_QUANTITY     IS NOT NULL OR
  TOPLVL_ADJ_PRICE    IS NOT NULL OR
  TOPLVL_PRICE_QTY    IS NOT NULL OR
  AVERAGING_INTERVAL  IS NOT NULL OR
  MINIMUM_QUANTITY    IS NOT NULL OR
  DEFAULT_QUANTITY    IS NOT NULL OR
  FIXED_QUANTITY      IS NOT NULL OR
  USAGE_DURATION      IS NOT NULL OR
  BASE_READING        IS NOT NULL OR
  EXCEPTION_COV_ID    IS NOT NULL OR
  PM_PROGRAM_ID       IS NOT NULL OR
  RCN_INCIDENT_SEVERITY_ID IS NOT NULL OR
  RCN_PDF_ID           IS NOT NULL OR
  LIMIT_UOM_QUANTIFIED IS NOT NULL OR
  DISCOUNT_AMOUNT      IS NOT NULL OR
  DISCOUNT_PERCENT     IS NOT NULL OR
  LEVEL_AMOUNT         IS NOT NULL;




-------------------------------------------------------------------------------
-- The following is the cursor opened if any of the following parameters are --
-- passed to the concurrent request                                          --
-- 1. p_status
-- 2. p_org_id
-------------------------------------------------------------------------------
CURSOR l_hdr_rule_csr2_nus (p_id_low in NUMBER , p_id_hig in NUMBER , p_status in VARCHAR2 , p_org_id in NUMBER )is
SELECT * FROM (
SELECT  RGP.CHR_ID CHR_ID
       ,RUL.MAJOR_VERSION MAJOR_VERSION
       ,RGP.CLE_ID CLE_ID
       ,RGP.DNZ_CHR_ID DNZ_CHR_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)))
            ACCT_RULE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' , '!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)))
            CC_BANK_ACCT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)))
            GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)), NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)))
            EST_REV_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!' ),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)))
            TAX_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' , '!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)))
            TAX_CODE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)))
            TAX_EXEMPTION_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)))
            BILLING_PROFILE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)))
            QUOTE_TO_CONTACT_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT2_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4)))
            QUOTE_TO_SITE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)))
            QUOTE_TO_EMAIL_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)))
            QUOTE_TO_PHONE_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)))
            QUOTE_TO_FAX_ID
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)))
            RENEWAL_PRICE_LIST
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)))
            RENEWAL_MARKUP_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)))
            RENEWAL_GRACE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)))
            RENEWAL_EST_REV_PERCENT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)))
            RENEWAL_EST_REV_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)))
            RENEWAL_PRICE_LIST_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)))
            RENEWAL_NOTIFICATION_TO
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)))
            RENEWAL_MARKUP_PERCENT_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)))
            REV_EST_PERCENT_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)))
            REV_EST_DURATION_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)))
            BILLING_PROFILE_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)))
            EVN_THRESHOLD_AMT
        ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),
	    '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.' ,'!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)))
            ERN_THRESHOLD_AMT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)))
            RENEWAL_GRACE_DURATION_USED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)))
            CONVERSION_RATE --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)))
            CONVERSION_EURO_RATE --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)))
            CUST_ACCT_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)))
            BILL_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)))
            INV_RULE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)))
            RENEWAL_NOTIFY_TO --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)))
            SHIP_TO_SITE_USE_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)))
            PAYMENT_TERM_ID --OKC
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),
            '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),NULL,
            MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)))
            PRICE_LIST_ID --OKC
       ----------------------Extra Rules for lines added------------------------------------------
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)))
               DISCOUNT_LIST
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)))
               CLVL_LIST_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)))
               CLVL_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)))
               CLVL_EXTENDED_AMT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)))
               TOPLVL_OPERAND_VAL
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)))
               TOPLVL_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)))
               TOPLVL_ADJ_PRICE
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)))
               TOPLVL_PRICE_QTY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)))
               AVERAGING_INTERVAL
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)))
               MINIMUM_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)))
               DEFAULT_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)))
               FIXED_QUANTITY
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)))
               USAGE_DURATION
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)))
               BASE_READING
        ----------------------------- COVERAGE CODE START -------------------------------------------------
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1)))
               EXCEPTION_COV_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1)))
               PM_PROGRAM_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1)))
               RCN_INCIDENT_SEVERITY_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1)))
               RCN_PDF_ID
       ,DECODE(TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)),NULL,
               MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1)))
               LIMIT_UOM_QUANTIFIED
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION2)))
               DISCOUNT_AMOUNT
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LMT' ,RUL.RULE_INFORMATION4)))
               DISCOUNT_PERCENT
        ----------------------------- COVERAGE CODE END ----------------------------------------------------
       ,DECODE(TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)),
               '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.','!'),
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)),NULL,
               MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLL' ,RUL.RULE_INFORMATION6)))
               LEVEL_AMOUNT

FROM OKC_RULE_GROUPS_BH RGP
   , OKC_RULES_BH RUL
   , OKC_K_HEADERS_BH HDR
WHERE rgp.id = rul.rgp_id
  and rgp.rgd_code = 'SVC_K'
  AND   RUL.RULE_INFORMATION_CATEGORY IN
       ('ARL','CCR','GPR','RVE','IRT','TAX','ERN','QTO', 'RPO', 'RPT','RER', 'RRU',
        'RRE', 'SBG', 'SPO','SLH','PRE', 'CVN','CAN', 'BTO', 'IRE', 'REN', 'STO', 'PTR',
	'DST','PDL','QRE','ECE','PMP','RCN','LMT','SLL')
  AND HDR.ID BETWEEN P_ID_LOW  AND P_ID_HIG
  AND HDR.ID = RGP.DNZ_CHR_ID
  AND RGP.DNZ_CHR_ID = RUL.DNZ_CHR_ID
  AND HDR.ID = RUL.DNZ_CHR_ID
  AND HDR.STS_CODE = nvl(p_status,HDR.STS_CODE)
  AND HDR.AUTHORING_ORG_ID = nvl(P_ORG_ID, HDR.AUTHORING_ORG_ID)
  GROUP BY RGP.CHR_ID,RUL.MAJOR_VERSION,RGP.CLE_ID,RGP.DNZ_CHR_ID)
WHERE
  ACCT_RULE_ID    IS NOT NULL OR
  CC_BANK_ACCT_ID IS NOT NULL OR
  GRACE_DURATION  IS NOT NULL OR
  EST_REV_PERCENT IS NOT NULL OR
  TAX_AMOUNT      IS NOT NULL OR
  TAX_CODE        IS NOT NULL OR
  TAX_EXEMPTION_ID    IS NOT NULL OR
  BILLING_PROFILE_ID  IS NOT NULL OR
  QUOTE_TO_CONTACT_ID IS NOT NULL OR
  QUOTE_TO_SITE_ID    IS NOT NULL OR
  QUOTE_TO_EMAIL_ID   IS NOT NULL OR
  QUOTE_TO_PHONE_ID   IS NOT NULL OR
  QUOTE_TO_FAX_ID     IS NOT NULL OR
  RENEWAL_PRICE_LIST  IS NOT NULL OR
  RENEWAL_MARKUP_PERCENT   IS NOT NULL OR
  RENEWAL_GRACE_DURATION   IS NOT NULL OR
  RENEWAL_EST_REV_PERCENT  IS NOT NULL OR
  RENEWAL_EST_REV_DURATION IS NOT NULL OR
  RENEWAL_PRICE_LIST_USED  IS NOT NULL OR
  RENEWAL_NOTIFICATION_TO  IS NOT NULL OR
  RENEWAL_MARKUP_PERCENT_USED IS NOT NULL OR
  REV_EST_PERCENT_USED  IS NOT NULL OR
  REV_EST_DURATION_USED IS NOT NULL OR
  BILLING_PROFILE_USED  IS NOT NULL OR
  EVN_THRESHOLD_AMT  IS NOT NULL OR
  ERN_THRESHOLD_AMT  IS NOT NULL OR
  RENEWAL_GRACE_DURATION_USED IS NOT NULL OR
  CONVERSION_RATE     IS NOT NULL OR
  CONVERSION_EURO_RATE IS NOT NULL OR
  CUST_ACCT_ID        IS NOT NULL OR
  BILL_TO_SITE_USE_ID IS NOT NULL OR
  INV_RULE_ID         IS NOT NULL OR
  RENEWAL_NOTIFY_TO   IS NOT NULL OR
  SHIP_TO_SITE_USE_ID IS NOT NULL OR
  PAYMENT_TERM_ID     IS NOT NULL OR
  PRICE_LIST_ID       IS NOT NULL OR
  -----extra line rules added---------------------
  DISCOUNT_LIST	      IS NOT NULL OR
  CLVL_LIST_PRICE     IS NOT NULL OR
  CLVL_QUANTITY       IS NOT NULL OR
  CLVL_EXTENDED_AMT   IS NOT NULL OR
  TOPLVL_OPERAND_VAL  IS NOT NULL OR
  TOPLVL_QUANTITY     IS NOT NULL OR
  TOPLVL_ADJ_PRICE    IS NOT NULL OR
  TOPLVL_PRICE_QTY    IS NOT NULL OR
  AVERAGING_INTERVAL  IS NOT NULL OR
  MINIMUM_QUANTITY    IS NOT NULL OR
  DEFAULT_QUANTITY    IS NOT NULL OR
  FIXED_QUANTITY      IS NOT NULL OR
  USAGE_DURATION      IS NOT NULL OR
  BASE_READING        IS NOT NULL OR
  EXCEPTION_COV_ID    IS NOT NULL OR
  PM_PROGRAM_ID       IS NOT NULL OR
  RCN_INCIDENT_SEVERITY_ID IS NOT NULL OR
  RCN_PDF_ID           IS NOT NULL OR
  LIMIT_UOM_QUANTIFIED IS NOT NULL OR
  DISCOUNT_AMOUNT      IS NOT NULL OR
  DISCOUNT_PERCENT     IS NOT NULL OR
  LEVEL_AMOUNT         IS NOT NULL;



----------------------------------------------------------------------------
-- Cursor to populate data in OKS_RULE_ERROR table .                      --
----------------------------------------------------------------------------
CURSOR L_HDR_DTLS_CSR ( P_HDR_ID  IN NUMBER , P_CATEGORY IN VARCHAR2 ) IS
SELECT HDR.CONTRACT_NUMBER
     , HDR.CONTRACT_NUMBER_MODIFIER
     , HDR.MAJOR_VERSION
     , RUL.ID
     , RGP.ID RGP_ID
 FROM  OKC_K_HEADERS_BH HDR
     , OKC_RULE_GROUPS_BH RGP
     , OKC_RULES_BH RUL
WHERE HDR.ID = P_HDR_ID
  AND RGP.DNZ_CHR_ID = P_HDR_ID
  AND RGP.CHR_ID = P_HDR_ID
  AND RGP.ID = RUL.RGP_ID
  AND RGP.DNZ_CHR_ID = RUL.DNZ_CHR_ID
  AND RUL.RULE_INFORMATION_CATEGORY = P_CATEGORY ;

L_HDR_DTLS_REC L_HDR_DTLS_CSR%ROWTYPE;
----------------------------------------------------------------------------

----------------------------------------------------------------------------
-- Cursor to populate data in OKS_RULE_ERROR table .                      --
----------------------------------------------------------------------------
CURSOR L_LINE_DTLS_CSR (P_CLE_ID  IN NUMBER ,P_HDR_ID IN NUMBER, P_CATEGORY IN VARCHAR2 ) IS
SELECT HDR.CONTRACT_NUMBER
     , HDR.CONTRACT_NUMBER_MODIFIER
     , LIN.MAJOR_VERSION
     , LIN.LINE_NUMBER
     , RUL.ID
     , RGP.ID RGP_ID
 FROM  OKC_K_HEADERS_BH HDR
     , OKC_RULE_GROUPS_BH RGP
     , OKC_RULES_BH RUL
     , OKC_K_LINES_BH LIN
WHERE HDR.ID = P_HDR_ID
  AND LIN.ID= P_CLE_ID
  AND RGP.DNZ_CHR_ID = P_HDR_ID
  AND RGP.DNZ_CHR_ID = RUL.DNZ_CHR_ID
  AND RGP.CLE_ID = LIN.ID
  AND RGP.ID = RUL.RGP_ID
  AND RUL.RULE_INFORMATION_CATEGORY = P_CATEGORY ;

L_LINE_DTLS_REC L_LINE_DTLS_CSR%ROWTYPE;
----------------------------------------------------------------------------



BEGIN
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'--------------Start of Sub request for Header Rule Data Validation----------------');
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');
 FND_FILE.PUT_LINE (FND_FILE.LOG, '----------Parameters passed to the Subrequest Request are as follows  -----------');
 FND_FILE.PUT_LINE (FND_FILE.LOG, 'P_STATUS ==============> '||P_STATUS);
 FND_FILE.PUT_LINE (FND_FILE.LOG, 'P_ORG_ID ==============> '||P_ORG_ID);
 FND_FILE.PUT_LINE (FND_FILE.LOG, 'P_BATCH_SIZE  =========> '||P_BATCH_SIZE);
 FND_FILE.PUT_LINE (FND_FILE.LOG, 'P_ID_LOW ==============> '||p_ID_LOW);
 FND_FILE.PUT_LINE (FND_FILE.LOG, 'P_ID_HIG ==============> '||P_ID_HIG);
 FND_FILE.PUT_LINE (FND_FILE.LOG, '---------------------------------------------------------------------------------');


-- FND_FILE.PUT_LINE(FND_FILE.OUTPUT ,'-----------------------------------------------------------------------');
-- FND_FILE.PUT_LINE(FND_FILE.OUTPUT ,'                Start of Header Validation Report for                  ');
-- FND_FILE.PUT_LINE(FND_FILE.OUTPUT ,'-----------------------------------------------------------------------');
-- FND_FILE.PUT_LINE(FND_FILE.OUTPUT ,' Contract Number      |Modifier                |Line Number    |Rule Category     |Attribute Name       |Current Value       ');


 if(p_us_yn = 'true') then
   l_us_yn := true;
 else
   l_us_yn := false;
 end if;

 if(l_us_yn) then
   If (p_status is null and p_org_id is null  )  then
       OPEN l_hdr_rule_csr1(p_id_low , p_id_hig);
       FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor opened is l_hdr_rule_csr1');
   Else
       OPEN l_hdr_rule_csr2(p_id_low , p_id_hig, p_status , p_org_id);
       FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor opened is l_hdr_rule_csr2');
   End IF;

 else
   If (p_status is null and p_org_id is null  )  then
       OPEN l_hdr_rule_csr1_nus(p_id_low , p_id_hig);
       FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor opened is l_hdr_rule_csr1_nus');
   Else
       OPEN l_hdr_rule_csr2_nus(p_id_low , p_id_hig, p_status , p_org_id);
       FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor opened is l_hdr_rule_csr2_nus');
   End IF;

  end if;

 Loop
    -----------------------------------------------------------------------------------
   if(l_us_yn) then
    --Start of If to choose the cursor to be fetched --
    If (p_status is null and p_org_id is null )  then
        FETCH l_hdr_rule_csr1 bulk collect into
                        CHR_ID
			,MAJOR_VERSION
			,CLE_ID
			,DNZ_CHR_ID
                        ,ACCT_RULE_ID_CHR
                        --,CC_EXPIRY_DATE_CHR
                        ,CC_BANK_ACCT_ID_CHR
                        ,GRACE_DURATION_CHR
                        ,EST_REV_PERCENT_CHR
                        --,EST_REV_DATE_CHR
                        ,TAX_AMOUNT_CHR
                        ,TAX_CODE_CHR
                        ,TAX_EXEMPTION_ID_CHR
                        ,BILLING_PROFILE_ID_CHR
                        ,QUOTE_TO_CONTACT_ID_CHR
                        ,QUOTE_TO_SITE_ID_CHR
                        ,QUOTE_TO_EMAIL_ID_CHR
                        ,QUOTE_TO_PHONE_ID_CHR
                        ,QUOTE_TO_FAX_ID_CHR
                        ,RENEWAL_PRICE_LIST_CHR
                        ,RENEWAL_MARKUP_PERCENT_CHR
                        ,RENEWAL_GRACE_DURATION_CHR
                        ,RENEWAL_EST_REV_PERCENT_CHR
                        ,RENEWAL_EST_REV_DURATION_CHR
                        ,RENEWAL_PRICE_LIST_USED_CHR
                        ,RENEWAL_NOTIFICATION_TO_CHR
                        ,RENEWAL_MARKUP_PERCENT_USED_CH
                        ,REV_EST_PERCENT_USED_CHR
                        ,REV_EST_DURATION_USED_CHR
                        ,BILLING_PROFILE_USED_CHR
                        ,EVN_THRESHOLD_AMT_CHR
                        ,ERN_THRESHOLD_AMT_CHR
                        ,RENEWAL_GRACE_DURATION_USED_CH
                        ,CONVERSION_RATE_CHR              --OKC
                        --,CONVERSION_RATE_DATE_CHR         --OKC
                        ,CONVERSION_EURO_RATE_CHR         --OKC
                        ,CUST_ACCT_ID_CHR                 --OKC
                        ,BILL_TO_SITE_USE_ID_CHR          --OKC
                        ,INV_RULE_ID_CHR                  --OKC
                        ,RENEWAL_NOTIFY_TO_CHR            --OKC
                        --,RENEWAL_END_DATE_CHR             --OKC
                        ,SHIP_TO_SITE_USE_ID_CHR          --OKC
                        ,PAYMENT_TERM_ID_CHR              --OKC
                        ,PRICE_LIST_ID_CHR                --OKC
                 -------------EXTRA LINE RULES------------------------
			,DISCOUNT_LIST_CHR
			,CLVL_LIST_PRICE_CHR
			,CLVL_QUANTITY_CHR
			,CLVL_EXTENDED_AMT_CHR
			,TOPLVL_OPERAND_VAL_CHR
			,TOPLVL_QUANTITY_CHR
			,TOPLVL_ADJ_PRICE_CHR
			,TOPLVL_PRICE_QTY_CHR
			,AVERAGING_INTERVAL_CHR
			,MINIMUM_QUANTITY_CHR
			,DEFAULT_QUANTITY_CHR
			,FIXED_QUANTITY_CHR
			,USAGE_DURATION_CHR
			,BASE_READING_CHR
			,EXCEPTION_COV_ID_CHR
			,PM_PROGRAM_ID_CHR
			,RCN_INCIDENT_SEVERITY_ID_CHR
			,RCN_PDF_ID_CHR
			,LIMIT_UOM_QUANTIFIED_CHR
			,DISCOUNT_AMOUNT_CHR
			,DISCOUNT_PERCENT_CHR
			,LEVEL_AMOUNT_CHR
			LIMIT p_batch_size;

       FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor fetched is l_hdr_rule_csr1');
       FND_FILE.PUT_LINE(FND_FILE.LOG , 'FETCHED ROW COUNT = '|| CHR_ID.COUNT );
       EXIT WHEN CHR_ID.COUNT = 0 ;
    Else
        FETCH l_hdr_rule_csr2 bulk collect into
                        CHR_ID
			,MAJOR_VERSION
			,CLE_ID
			,DNZ_CHR_ID
                        ,ACCT_RULE_ID_CHR
                        --,CC_EXPIRY_DATE_CHR
                        ,CC_BANK_ACCT_ID_CHR
                        ,GRACE_DURATION_CHR
                        ,EST_REV_PERCENT_CHR
                        --,EST_REV_DATE_CHR
                        ,TAX_AMOUNT_CHR
                        ,TAX_CODE_CHR
                        ,TAX_EXEMPTION_ID_CHR
                        ,BILLING_PROFILE_ID_CHR
                        ,QUOTE_TO_CONTACT_ID_CHR
                        ,QUOTE_TO_SITE_ID_CHR
                        ,QUOTE_TO_EMAIL_ID_CHR
                        ,QUOTE_TO_PHONE_ID_CHR
                        ,QUOTE_TO_FAX_ID_CHR
                        ,RENEWAL_PRICE_LIST_CHR
                        ,RENEWAL_MARKUP_PERCENT_CHR
                        ,RENEWAL_GRACE_DURATION_CHR
                        ,RENEWAL_EST_REV_PERCENT_CHR
                        ,RENEWAL_EST_REV_DURATION_CHR
                        ,RENEWAL_PRICE_LIST_USED_CHR
                        ,RENEWAL_NOTIFICATION_TO_CHR
                        ,RENEWAL_MARKUP_PERCENT_USED_CH
                        ,REV_EST_PERCENT_USED_CHR
                        ,REV_EST_DURATION_USED_CHR
                        ,BILLING_PROFILE_USED_CHR
                        ,EVN_THRESHOLD_AMT_CHR
                        ,ERN_THRESHOLD_AMT_CHR
                        ,RENEWAL_GRACE_DURATION_USED_CH
                        ,CONVERSION_RATE_CHR              --OKC
                        --,CONVERSION_RATE_DATE_CHR         --OKC
                        ,CONVERSION_EURO_RATE_CHR         --OKC
                        ,CUST_ACCT_ID_CHR                 --OKC
                        ,BILL_TO_SITE_USE_ID_CHR          --OKC
                        ,INV_RULE_ID_CHR                  --OKC
                        ,RENEWAL_NOTIFY_TO_CHR            --OKC
                        --,RENEWAL_END_DATE_CHR           --OKC
                        ,SHIP_TO_SITE_USE_ID_CHR          --OKC
                        ,PAYMENT_TERM_ID_CHR              --OKC
                        ,PRICE_LIST_ID_CHR                --OKC
                 -------------EXTRA LINE RULES------------------------
			,DISCOUNT_LIST_CHR
			,CLVL_LIST_PRICE_CHR
			,CLVL_QUANTITY_CHR
			,CLVL_EXTENDED_AMT_CHR
			,TOPLVL_OPERAND_VAL_CHR
			,TOPLVL_QUANTITY_CHR
			,TOPLVL_ADJ_PRICE_CHR
			,TOPLVL_PRICE_QTY_CHR
			,AVERAGING_INTERVAL_CHR
			,MINIMUM_QUANTITY_CHR
			,DEFAULT_QUANTITY_CHR
			,FIXED_QUANTITY_CHR
			,USAGE_DURATION_CHR
			,BASE_READING_CHR
			,EXCEPTION_COV_ID_CHR
			,PM_PROGRAM_ID_CHR
			,RCN_INCIDENT_SEVERITY_ID_CHR
			,RCN_PDF_ID_CHR
			,LIMIT_UOM_QUANTIFIED_CHR
			,DISCOUNT_AMOUNT_CHR
			,DISCOUNT_PERCENT_CHR
			,LEVEL_AMOUNT_CHR
			LIMIT p_batch_size;


       FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor fetched is l_hdr_rule_csr2');
       FND_FILE.PUT_LINE(FND_FILE.LOG , 'FETCHED ROW COUNT = '|| CHR_ID.COUNT );
       EXIT WHEN CHR_ID.COUNT = 0 ;

    End IF;
    --End of If to choose the cursor to be fetched --
  else
    --Start of If to choose the cursor to be fetched --
    If (p_status is null and p_org_id is null )  then
        FETCH l_hdr_rule_csr1_nus bulk collect into
                        CHR_ID
			,MAJOR_VERSION
			,CLE_ID
			,DNZ_CHR_ID
                        ,ACCT_RULE_ID_CHR
                        --,CC_EXPIRY_DATE_CHR
                        ,CC_BANK_ACCT_ID_CHR
                        ,GRACE_DURATION_CHR
                        ,EST_REV_PERCENT_CHR
                        --,EST_REV_DATE_CHR
                        ,TAX_AMOUNT_CHR
                        ,TAX_CODE_CHR
                        ,TAX_EXEMPTION_ID_CHR
                        ,BILLING_PROFILE_ID_CHR
                        ,QUOTE_TO_CONTACT_ID_CHR
                        ,QUOTE_TO_SITE_ID_CHR
                        ,QUOTE_TO_EMAIL_ID_CHR
                        ,QUOTE_TO_PHONE_ID_CHR
                        ,QUOTE_TO_FAX_ID_CHR
                        ,RENEWAL_PRICE_LIST_CHR
                        ,RENEWAL_MARKUP_PERCENT_CHR
                        ,RENEWAL_GRACE_DURATION_CHR
                        ,RENEWAL_EST_REV_PERCENT_CHR
                        ,RENEWAL_EST_REV_DURATION_CHR
                        ,RENEWAL_PRICE_LIST_USED_CHR
                        ,RENEWAL_NOTIFICATION_TO_CHR
                        ,RENEWAL_MARKUP_PERCENT_USED_CH
                        ,REV_EST_PERCENT_USED_CHR
                        ,REV_EST_DURATION_USED_CHR
                        ,BILLING_PROFILE_USED_CHR
                        ,EVN_THRESHOLD_AMT_CHR
                        ,ERN_THRESHOLD_AMT_CHR
                        ,RENEWAL_GRACE_DURATION_USED_CH
                        ,CONVERSION_RATE_CHR              --OKC
                        --,CONVERSION_RATE_DATE_CHR         --OKC
                        ,CONVERSION_EURO_RATE_CHR         --OKC
                        ,CUST_ACCT_ID_CHR                 --OKC
                        ,BILL_TO_SITE_USE_ID_CHR          --OKC
                        ,INV_RULE_ID_CHR                  --OKC
                        ,RENEWAL_NOTIFY_TO_CHR            --OKC
                        --,RENEWAL_END_DATE_CHR             --OKC
                        ,SHIP_TO_SITE_USE_ID_CHR          --OKC
                        ,PAYMENT_TERM_ID_CHR              --OKC
                        ,PRICE_LIST_ID_CHR                --OKC
                 -------------EXTRA LINE RULES------------------------
			,DISCOUNT_LIST_CHR
			,CLVL_LIST_PRICE_CHR
			,CLVL_QUANTITY_CHR
			,CLVL_EXTENDED_AMT_CHR
			,TOPLVL_OPERAND_VAL_CHR
			,TOPLVL_QUANTITY_CHR
			,TOPLVL_ADJ_PRICE_CHR
			,TOPLVL_PRICE_QTY_CHR
			,AVERAGING_INTERVAL_CHR
			,MINIMUM_QUANTITY_CHR
			,DEFAULT_QUANTITY_CHR
			,FIXED_QUANTITY_CHR
			,USAGE_DURATION_CHR
			,BASE_READING_CHR
			,EXCEPTION_COV_ID_CHR
			,PM_PROGRAM_ID_CHR
			,RCN_INCIDENT_SEVERITY_ID_CHR
			,RCN_PDF_ID_CHR
			,LIMIT_UOM_QUANTIFIED_CHR
			,DISCOUNT_AMOUNT_CHR
			,DISCOUNT_PERCENT_CHR
			,LEVEL_AMOUNT_CHR
			LIMIT p_batch_size;

       FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor fetched is l_hdr_rule_csr1');
       FND_FILE.PUT_LINE(FND_FILE.LOG , 'FETCHED ROW COUNT = '|| CHR_ID.COUNT );
       EXIT WHEN CHR_ID.COUNT = 0 ;
    Else
        FETCH l_hdr_rule_csr2_nus bulk collect into
                        CHR_ID
			,MAJOR_VERSION
			,CLE_ID
			,DNZ_CHR_ID
                        ,ACCT_RULE_ID_CHR
                        --,CC_EXPIRY_DATE_CHR
                        ,CC_BANK_ACCT_ID_CHR
                        ,GRACE_DURATION_CHR
                        ,EST_REV_PERCENT_CHR
                        --,EST_REV_DATE_CHR
                        ,TAX_AMOUNT_CHR
                        ,TAX_CODE_CHR
                        ,TAX_EXEMPTION_ID_CHR
                        ,BILLING_PROFILE_ID_CHR
                        ,QUOTE_TO_CONTACT_ID_CHR
                        ,QUOTE_TO_SITE_ID_CHR
                        ,QUOTE_TO_EMAIL_ID_CHR
                        ,QUOTE_TO_PHONE_ID_CHR
                        ,QUOTE_TO_FAX_ID_CHR
                        ,RENEWAL_PRICE_LIST_CHR
                        ,RENEWAL_MARKUP_PERCENT_CHR
                        ,RENEWAL_GRACE_DURATION_CHR
                        ,RENEWAL_EST_REV_PERCENT_CHR
                        ,RENEWAL_EST_REV_DURATION_CHR
                        ,RENEWAL_PRICE_LIST_USED_CHR
                        ,RENEWAL_NOTIFICATION_TO_CHR
                        ,RENEWAL_MARKUP_PERCENT_USED_CH
                        ,REV_EST_PERCENT_USED_CHR
                        ,REV_EST_DURATION_USED_CHR
                        ,BILLING_PROFILE_USED_CHR
                        ,EVN_THRESHOLD_AMT_CHR
                        ,ERN_THRESHOLD_AMT_CHR
                        ,RENEWAL_GRACE_DURATION_USED_CH
                        ,CONVERSION_RATE_CHR              --OKC
                        --,CONVERSION_RATE_DATE_CHR         --OKC
                        ,CONVERSION_EURO_RATE_CHR         --OKC
                        ,CUST_ACCT_ID_CHR                 --OKC
                        ,BILL_TO_SITE_USE_ID_CHR          --OKC
                        ,INV_RULE_ID_CHR                  --OKC
                        ,RENEWAL_NOTIFY_TO_CHR            --OKC
                        --,RENEWAL_END_DATE_CHR           --OKC
                        ,SHIP_TO_SITE_USE_ID_CHR          --OKC
                        ,PAYMENT_TERM_ID_CHR              --OKC
                        ,PRICE_LIST_ID_CHR                --OKC
                 -------------EXTRA LINE RULES------------------------
			,DISCOUNT_LIST_CHR
			,CLVL_LIST_PRICE_CHR
			,CLVL_QUANTITY_CHR
			,CLVL_EXTENDED_AMT_CHR
			,TOPLVL_OPERAND_VAL_CHR
			,TOPLVL_QUANTITY_CHR
			,TOPLVL_ADJ_PRICE_CHR
			,TOPLVL_PRICE_QTY_CHR
			,AVERAGING_INTERVAL_CHR
			,MINIMUM_QUANTITY_CHR
			,DEFAULT_QUANTITY_CHR
			,FIXED_QUANTITY_CHR
			,USAGE_DURATION_CHR
			,BASE_READING_CHR
			,EXCEPTION_COV_ID_CHR
			,PM_PROGRAM_ID_CHR
			,RCN_INCIDENT_SEVERITY_ID_CHR
			,RCN_PDF_ID_CHR
			,LIMIT_UOM_QUANTIFIED_CHR
			,DISCOUNT_AMOUNT_CHR
			,DISCOUNT_PERCENT_CHR
			,LEVEL_AMOUNT_CHR
			LIMIT p_batch_size;


       FND_FILE.PUT_LINE (FND_FILE.LOG, 'Cursor fetched is l_hdr_rule_csr2');
       FND_FILE.PUT_LINE(FND_FILE.LOG , 'FETCHED ROW COUNT = '|| CHR_ID.COUNT );
       EXIT WHEN CHR_ID.COUNT = 0 ;

    End IF;
    --End of If to choose the cursor to be fetched --

  end if;
    ------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------
    -- Begin of code to validate data type .
    FOR a in CHR_ID.FIRST..CHR_ID.LAST
    LOOP
       --1. Validation for ARL rule .
       BEGIN
          ACCT_RULE_ID(1)      := ACCT_RULE_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'ARL') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_ACCT_RULE_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'ARL'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         , ACCT_RULE_ID_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'ARL');
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_ACCT_RULE_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'ARL'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         , ACCT_RULE_ID_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --2. Validation for CCR rule .
       BEGIN
          CC_BANK_ACCT_ID(1)      := CC_BANK_ACCT_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'CCR') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CC_BANK_ACCT_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'CCR'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , CC_BANK_ACCT_ID_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION3'  ||L_ATTRIBUTE_NAME || CC_BANK_ACCT_ID_CHR(a)  );
         END IF;
       	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'CCR') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CC_BANK_ACCT_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'CCR'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , CC_BANK_ACCT_ID_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --3. Validation for GPR rule .
       BEGIN
          GRACE_DURATION(1)    := GRACE_DURATION_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'GPR') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_GRACE_DURATION');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'GPR'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , GRACE_DURATION_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || GRACE_DURATION_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'GPR') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_GRACE_DURATION');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'GPR'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , GRACE_DURATION_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --4. Validation for RVE rule .
       BEGIN
          EST_REV_PERCENT(1)      := EST_REV_PERCENT_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RVE') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EST_REV_PERCENT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'RVE'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , EST_REV_PERCENT_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || EST_REV_PERCENT_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'RVE') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EST_REV_PERCENT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'RVE'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , EST_REV_PERCENT_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --5. Validation for IRT rule.
       BEGIN
          TAX_AMOUNT(1)      := TAX_AMOUNT_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'IRT') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_AMOUNT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'IRT'  ,'RULE_INFORMATION4'    ,L_ATTRIBUTE_NAME         , TAX_AMOUNT_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || TAX_AMOUNT_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'IRT') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_AMOUNT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'IRT'  ,'RULE_INFORMATION4'    ,L_ATTRIBUTE_NAME         , TAX_AMOUNT_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --6. Validation for TAX (TAX_CODE) rule.
       BEGIN
          TAX_CODE(1)      := TAX_CODE_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'TAX') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_CODE');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'TAX'  ,'OBJECT2_ID1'    ,L_ATTRIBUTE_NAME         , TAX_CODE_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT2_ID1' ||L_ATTRIBUTE_NAME || TAX_CODE_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'TAX') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_CODE');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'TAX'  ,'OBJECT2_ID1'    ,L_ATTRIBUTE_NAME         , TAX_CODE_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --7. Validation for TAX (TAX_EXEMPTION_ID) rule.
       BEGIN
          TAX_EXEMPTION_ID(1)      := TAX_EXEMPTION_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'TAX');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_EXEMPTION_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'TAX'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , TAX_EXEMPTION_ID_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || TAX_EXEMPTION_ID_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'TAX') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_EXEMPTION_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'TAX'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , TAX_EXEMPTION_ID_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;


       --8. Validation for CAN  rule.
       BEGIN
          CUST_ACCT_ID(1)      := CUST_ACCT_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'CAN');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CUST_ACCT_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'CAN'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , CUST_ACCT_ID_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || CUST_ACCT_ID_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'CAN') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CUST_ACCT_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'CAN'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , CUST_ACCT_ID_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --9. Validation for BTO  rule.
       BEGIN
          BILL_TO_SITE_USE_ID(1)      := BILL_TO_SITE_USE_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'BTO');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BILL_TO_SITE_USE_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'BTO'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , BILL_TO_SITE_USE_ID_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || BILL_TO_SITE_USE_ID_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'BTO') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BILL_TO_SITE_USE_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'BTO'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , BILL_TO_SITE_USE_ID_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;


       --10. Validation for IRE  rule.
       BEGIN
          INV_RULE_ID(1)      := INV_RULE_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'IRE');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_INV_RULE_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'IRE'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , INV_RULE_ID_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || INV_RULE_ID_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'IRE') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_INV_RULE_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'IRE'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , INV_RULE_ID_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --11. Validation for REN ( RENEWAL_NOTIFY_TO )  rule.
       BEGIN
          RENEWAL_NOTIFY_TO(1)      := RENEWAL_NOTIFY_TO_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'IRE');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_NOTIFY_TO');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'REN'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_NOTIFY_TO_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || RENEWAL_NOTIFY_TO_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'IRE') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_NOTIFY_TO');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'REN'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_NOTIFY_TO_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --12. Validation for STO rule.
       BEGIN
          SHIP_TO_SITE_USE_ID(1)      := SHIP_TO_SITE_USE_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'STO');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_SHIP_TO_SITE_USE_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'STO'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , SHIP_TO_SITE_USE_ID_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || SHIP_TO_SITE_USE_ID_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'STO') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_SHIP_TO_SITE_USE_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'STO'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , SHIP_TO_SITE_USE_ID_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --13. Validation for PTR rule.
       BEGIN
          PAYMENT_TERM_ID(1)      := PAYMENT_TERM_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'PTR');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PAYMENT_TERM_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'PTR'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , PAYMENT_TERM_ID_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || PAYMENT_TERM_ID_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'PTR') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PAYMENT_TERM_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'PTR'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , PAYMENT_TERM_ID_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --14. Validation for ERN rule.
       BEGIN
          BILLING_PROFILE_ID(1)      := BILLING_PROFILE_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'ERN');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BILLING_PROFILE_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                                VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'ERN'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , BILLING_PROFILE_ID_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || BILLING_PROFILE_ID_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'ERN') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BILLING_PROFILE_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'ERN'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , BILLING_PROFILE_ID_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;


       --15. Validation for QTO ( QUOTE_TO_CONTACT_ID )rule.
       BEGIN
          QUOTE_TO_CONTACT_ID(1)      := QUOTE_TO_CONTACT_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'QTO');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_CONTACT_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                                VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'QTO'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_CONTACT_ID_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || QUOTE_TO_CONTACT_ID_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'QTO') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_CONTACT_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'QTO'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_CONTACT_ID_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --16. Validation for QTO ( QUOTE_TO_SITE_ID ) rule.
       BEGIN
          QUOTE_TO_SITE_ID(1)      := QUOTE_TO_SITE_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'QTO');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_SITE_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'QTO'  ,'RULE_INFORMATION4'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_SITE_ID_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT2_ID1' ||L_ATTRIBUTE_NAME || QUOTE_TO_SITE_ID_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'QTO') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_SITE_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'QTO'  ,'RULE_INFORMATION4'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_SITE_ID_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --17. Validation for QTO ( QUOTE_TO_EMAIL_ID ) rule.
       BEGIN
          QUOTE_TO_EMAIL_ID(1)      := QUOTE_TO_EMAIL_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'QTO');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_EMAIL_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'QTO'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_EMAIL_ID_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION1'  ||L_ATTRIBUTE_NAME || QUOTE_TO_EMAIL_ID_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'QTO') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_EMAIL_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'QTO'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_EMAIL_ID_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --18. Validation for QTO ( QUOTE_TO_PHONE_ID ) rule.
       BEGIN
          QUOTE_TO_PHONE_ID(1)      := QUOTE_TO_PHONE_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'QTO');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_PHONE_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'QTO'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_PHONE_ID_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || QUOTE_TO_PHONE_ID_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'QTO') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_PHONE_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'QTO'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_PHONE_ID_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --19. Validation for QTO ( QUOTE_TO_FAX_ID ) rule.
       BEGIN
          QUOTE_TO_FAX_ID(1)      := QUOTE_TO_FAX_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'QTO');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_FAX_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                                VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'QTO'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_FAX_ID_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION3' ||L_ATTRIBUTE_NAME || QUOTE_TO_FAX_ID_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'QTO') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_FAX_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'QTO'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_FAX_ID_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --20. Validation for RPT ( RENEWAL_PRICE_LIST ) rule.
       BEGIN
          RENEWAL_PRICE_LIST(1)      := RENEWAL_PRICE_LIST_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RPT');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_PRICE_LIST');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'RPT'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , RENEWAL_PRICE_LIST_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || RENEWAL_PRICE_LIST_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'RPT') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_PRICE_LIST');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'RPT'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , RENEWAL_PRICE_LIST_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --21. Validation for RPT ( RENEWAL_MARKUP_PERCENT ) rule.
       BEGIN
          RENEWAL_MARKUP_PERCENT(1)      := RENEWAL_MARKUP_PERCENT_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RPT');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_MARKUP_PERCENT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                                VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'RPT'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_MARKUP_PERCENT_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || RENEWAL_MARKUP_PERCENT_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'RPT') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_MARKUP_PERCENT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'RPT'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_MARKUP_PERCENT_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --22. Validation for RPT ( RENEWAL_GRACE_DURATION ) rule.
       BEGIN
          RENEWAL_GRACE_DURATION(1)      := RENEWAL_GRACE_DURATION_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RPT');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_GRACE_DURATION');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                                VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'RPT'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , RENEWAL_GRACE_DURATION_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION3' ||L_ATTRIBUTE_NAME || RENEWAL_GRACE_DURATION_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'RPT') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_GRACE_DURATION');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'RPT'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , RENEWAL_GRACE_DURATION_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --23. Validation for RER ( RENEWAL_EST_REV_PERCENT ) rule.
       BEGIN
          RENEWAL_EST_REV_PERCENT(1)      := RENEWAL_EST_REV_PERCENT_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RER');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_EREV_PERCENT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'RER'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , RENEWAL_EST_REV_PERCENT_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || RENEWAL_EST_REV_PERCENT_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'RER') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_EREV_PERCENT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'RER'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , RENEWAL_EST_REV_PERCENT_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --24. Validation for RER ( RENEWAL_EST_REV_DURATION ) rule.
       BEGIN
          RENEWAL_EST_REV_DURATION(1)      := RENEWAL_EST_REV_DURATION_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RER');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_EREV_DURATION');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                                VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'RER'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_EST_REV_DURATION_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION2'  ||L_ATTRIBUTE_NAME || RENEWAL_EST_REV_DURATION_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'RER') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_EREV_DURATION');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'RER'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_EST_REV_DURATION_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --25. Validation for RRU ( RENEWAL_PRICE_LIST_USED ) rule.
       BEGIN
          RENEWAL_PRICE_LIST_USED(1)      := RENEWAL_PRICE_LIST_USED_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RRU');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_PRICE_LIST_U');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'RRU'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , RENEWAL_PRICE_LIST_USED_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || RENEWAL_PRICE_LIST_USED_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'RRU') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_PRICE_LIST_U');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'RRU'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , RENEWAL_PRICE_LIST_USED_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --26. Validation for RRU ( RENEWAL_NOTIFICATION_TO ) rule.
       BEGIN
          RENEWAL_NOTIFICATION_TO(1)      := RENEWAL_NOTIFICATION_TO_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RRU');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_NOTIFICATION');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'RRU'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_NOTIFICATION_TO_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || RENEWAL_NOTIFICATION_TO_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'RRU') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_NOTIFICATION');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'RRU'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_NOTIFICATION_TO_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --27. Validation for RRU ( RENEWAL_NOTIFICATION_TO ) rule.
       BEGIN
          RENEWAL_MARKUP_PERCENT_USED(1)      := RENEWAL_MARKUP_PERCENT_USED_CH(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RRU');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_MPERCENT_U');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'RRU'  ,'RULE_INFORMATION5'    ,L_ATTRIBUTE_NAME         , RENEWAL_MARKUP_PERCENT_USED_CH(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION5' ||L_ATTRIBUTE_NAME || RENEWAL_MARKUP_PERCENT_USED_CH(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'RRU') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_MPERCENT_U');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'RRU'  ,'RULE_INFORMATION5'    ,L_ATTRIBUTE_NAME         , RENEWAL_MARKUP_PERCENT_USED_CH(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --28. Validation for RRU ( REV_EST_PERCENT_USED ) rule.
       BEGIN
          REV_EST_PERCENT_USED(1)      := REV_EST_PERCENT_USED_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RRU');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_REV_EST_PERCENT_U');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                                VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'RRU'  ,'RULE_INFORMATION6'    ,L_ATTRIBUTE_NAME         , REV_EST_PERCENT_USED_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION6' ||L_ATTRIBUTE_NAME || REV_EST_PERCENT_USED_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'RRU') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_REV_EST_PERCENT_U');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'RRU'  ,'RULE_INFORMATION6'    ,L_ATTRIBUTE_NAME         , REV_EST_PERCENT_USED_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --29. Validation for RRU ( REV_EST_DURATION_USED ) rule.
       BEGIN
          REV_EST_DURATION_USED(1)      := REV_EST_DURATION_USED_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RRU');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_REV_EST_DURATION_U');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'RRU'  ,'RULE_INFORMATION7'    ,L_ATTRIBUTE_NAME         , REV_EST_DURATION_USED_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION7'||L_ATTRIBUTE_NAME || REV_EST_DURATION_USED_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'RRU') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_REV_EST_DURATION_U');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'RRU'  ,'RULE_INFORMATION7'    ,L_ATTRIBUTE_NAME         , REV_EST_DURATION_USED_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --30. Validation for RRU ( BILLING_PROFILE_USED ) rule.
       BEGIN
          BILLING_PROFILE_USED(1)      := BILLING_PROFILE_USED_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RRU');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BILLING_PROFILE_U');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'RRU'  ,'RULE_INFORMATION9'    ,L_ATTRIBUTE_NAME         , BILLING_PROFILE_USED_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION9' ||L_ATTRIBUTE_NAME || BILLING_PROFILE_USED_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'RRU') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BILLING_PROFILE_U');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'RRU'  ,'RULE_INFORMATION9'    ,L_ATTRIBUTE_NAME         , BILLING_PROFILE_USED_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --31. Validation for RRU ( EVN_THRESHOLD_AMT ) rule.
       BEGIN
          EVN_THRESHOLD_AMT(1)      := EVN_THRESHOLD_AMT_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RRU');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EVN_THRESHOLD_AMT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                                VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'RRU'  ,'RULE_INFORMATION11'    ,L_ATTRIBUTE_NAME         , EVN_THRESHOLD_AMT_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION11' ||L_ATTRIBUTE_NAME || EVN_THRESHOLD_AMT_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'RRU') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EVN_THRESHOLD_AMT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'RRU'  ,'RULE_INFORMATION11'    ,L_ATTRIBUTE_NAME         , EVN_THRESHOLD_AMT_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --32. Validation for RRU ( ERN_THRESHOLD_AMT ) rule.
       BEGIN
          ERN_THRESHOLD_AMT(1)      := ERN_THRESHOLD_AMT_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RRU');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_ERN_THRESHOLD_AMT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'RRU'  ,'RULE_INFORMATION13'    ,L_ATTRIBUTE_NAME         , ERN_THRESHOLD_AMT_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION13' ||L_ATTRIBUTE_NAME || ERN_THRESHOLD_AMT_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'RRU') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_ERN_THRESHOLD_AMT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'RRU'  ,'RULE_INFORMATION13'    ,L_ATTRIBUTE_NAME         , ERN_THRESHOLD_AMT_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --33. Validation for RRE ( RENEWAL_GRACE_DURATION_USED ) rule.
       BEGIN
          RENEWAL_GRACE_DURATION_USED(1)      := RENEWAL_GRACE_DURATION_USED_CH(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RRE');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_GDURATION_U');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'RRE'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , RENEWAL_GRACE_DURATION_USED_CH(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || RENEWAL_GRACE_DURATION_USED_CH(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'RRE') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_GDURATION_U');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'RRE'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , RENEWAL_GRACE_DURATION_USED_CH(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --34. Validation for PRE ( PRICE_LIST_ID ) rule.
       BEGIN
          PRICE_LIST_ID(1)      := PRICE_LIST_ID_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'PRE');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PRICE_LIST_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'PRE'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , PRICE_LIST_ID_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || PRICE_LIST_ID_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'PRE') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PRICE_LIST_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'PRE'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , PRICE_LIST_ID_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --35. Validation for CVN ( CONVERSION_RATE ) rule.
       BEGIN
          CONVERSION_RATE(1)      := CONVERSION_RATE_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'CVN');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CONVERSION_RATE');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'CVN'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , CONVERSION_RATE_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || CONVERSION_RATE_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'CVN') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CONVERSION_RATE');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'CVN'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , CONVERSION_RATE_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

       --36. Validation for CVN ( CONVERSION_EURO_RATE ) rule.
       BEGIN
          CONVERSION_EURO_RATE(1)      := CONVERSION_EURO_RATE_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
         IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'CVN');
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CONVERSION_EURO_RATE');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'CVN'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , CONVERSION_EURO_RATE_CHR(a),
                                       L_ERROR_MSG );
	   -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION3' ||L_ATTRIBUTE_NAME || CONVERSION_EURO_RATE_CHR(a)  );
         END IF;
	 IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'CVN') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CONVERSION_EURO_RATE');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'CVN'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , CONVERSION_EURO_RATE_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));

	 END IF;

       END;

/*
       --37. Validation for CCR ( CC_EXPIRY_DATE ) rule.
       BEGIN
          CC_EXPIRY_DATE(1)      := to_date(CC_EXPIRY_DATE_CHR(a),'yyyy/mm/dd hh24:mi:ss');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'CCR');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CC_EXPIRY_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'CCR'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , CC_EXPIRY_DATE_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION2'  ||L_ATTRIBUTE_NAME || CC_EXPIRY_DATE_CHR(a)  );
       END;
*/
/*
       --38. Validation for RVE ( EST_REV_DATE ) rule.
       BEGIN
          EST_REV_DATE(1)      := to_date(EST_REV_DATE_CHR(a),'yyyy/mm/dd hh24:mi:ss');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RVE');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EST_REV_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'RVE'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , EST_REV_DATE_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || EST_REV_DATE_CHR(a)  );
       END;

*/
/*
       --39. Validation for REN ( RENEWAL_END_DATE ) rule.
       BEGIN
          RENEWAL_END_DATE(1)      := to_date(RENEWAL_END_DATE_CHR(a),'yyyy/mm/dd hh24:mi:ss');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'REN');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_END_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'REN'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , RENEWAL_END_DATE_CHR(a),
                                       L_ERROR_MSG );
	  -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION3' ||L_ATTRIBUTE_NAME || RENEWAL_END_DATE_CHR(a)  );
       END;
*/
/*
       --40. Validation for REN ( CONVERSION_RATE_DATE ) rule.
       BEGIN
          CONVERSION_RATE_DATE(1)      := to_date(CONVERSION_RATE_DATE_CHR(a),'yyyy/mm/dd hh24:mi:ss');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'REN');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CONVERSION_RATE_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'CVN'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , CONVERSION_RATE_DATE_CHR(a),
                                       L_ERROR_MSG );
	 -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || CONVERSION_RATE_DATE_CHR(a)  );
       END;
*/

-----------------extra line rules---------------------------------------
       --41. Validation for DST rule .
       BEGIN
          DISCOUNT_LIST(1)      := DISCOUNT_LIST_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'DST') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DISCOUNT_LIST');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'DST'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,DISCOUNT_LIST_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'DST') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DISCOUNT_LIST');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'DST'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,DISCOUNT_LIST_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || DISCOUNT_LIST_CHR(a) );
         END IF;
       END;
       --42. Validation for PDL rule .
       BEGIN
          CLVL_LIST_PRICE(1)      := CLVL_LIST_PRICE_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'PDL') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CLVL_LIST_PRICE');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'PDL'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,CLVL_LIST_PRICE_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'PDL') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CLVL_LIST_PRICE');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'PDL'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,CLVL_LIST_PRICE_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || CLVL_LIST_PRICE_CHR(a) );
         END IF;
       END;

       --43. Validation for PDL rule .
       BEGIN
          CLVL_QUANTITY(1)      := CLVL_QUANTITY_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'PDL') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CLVL_QUANTITY');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'PDL'    ,'RULE_INFORMATION2'   ,L_ATTRIBUTE_NAME         ,CLVL_QUANTITY_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'PDL') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CLVL_QUANTITY');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'PDL'    ,'RULE_INFORMATION2'   ,L_ATTRIBUTE_NAME         ,CLVL_QUANTITY_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || CLVL_QUANTITY_CHR(a) );
         END IF;
       END;

       --44. Validation for PDL rule .
       BEGIN
          CLVL_EXTENDED_AMT(1)      := CLVL_EXTENDED_AMT_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'PDL') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CLVL_EXTENDED_AMT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'PDL'    ,'RULE_INFORMATION3'   ,L_ATTRIBUTE_NAME         ,CLVL_EXTENDED_AMT_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'PDL') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CLVL_EXTENDED_AMT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'PDL'    ,'RULE_INFORMATION3'   ,L_ATTRIBUTE_NAME         ,CLVL_EXTENDED_AMT_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION3' ||L_ATTRIBUTE_NAME || CLVL_EXTENDED_AMT_CHR(a) );
         END IF;
       END;

       --45. Validation for PDL rule .
       BEGIN
          TOPLVL_OPERAND_VAL(1)      := TOPLVL_OPERAND_VAL_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'PDL') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_OPERAND_VAL');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'PDL'    ,'RULE_INFORMATION6'   ,L_ATTRIBUTE_NAME         ,TOPLVL_OPERAND_VAL_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'PDL') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_OPERAND_VAL');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'PDL'    ,'RULE_INFORMATION6'   ,L_ATTRIBUTE_NAME         ,TOPLVL_OPERAND_VAL_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION6' ||L_ATTRIBUTE_NAME || TOPLVL_OPERAND_VAL_CHR(a) );
         END IF;
       END;

       --46. Validation for PDL rule .
       BEGIN
          TOPLVL_QUANTITY(1)      := TOPLVL_QUANTITY_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'PDL') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_QUANTITY');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'PDL'    ,'RULE_INFORMATION8'   ,L_ATTRIBUTE_NAME         ,TOPLVL_QUANTITY_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'PDL') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_QUANTITY');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'PDL'    ,'RULE_INFORMATION8'   ,L_ATTRIBUTE_NAME         ,TOPLVL_QUANTITY_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION8' ||L_ATTRIBUTE_NAME || TOPLVL_QUANTITY_CHR(a) );
         END IF;
       END;

       --47. Validation for PDL rule .
       BEGIN
          TOPLVL_ADJ_PRICE(1)      := TOPLVL_ADJ_PRICE_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'PDL') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_ADJ_PRICE');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'PDL'    ,'RULE_INFORMATION10'   ,L_ATTRIBUTE_NAME         ,TOPLVL_ADJ_PRICE_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'PDL') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_ADJ_PRICE');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'PDL'    ,'RULE_INFORMATION10'   ,L_ATTRIBUTE_NAME         ,TOPLVL_ADJ_PRICE_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION10' ||L_ATTRIBUTE_NAME || TOPLVL_ADJ_PRICE_CHR(a) );
         END IF;
       END;

       --48. Validation for PDL rule .
       BEGIN
          TOPLVL_PRICE_QTY(1)      := TOPLVL_PRICE_QTY_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'PDL') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_PRICE_QTY');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'PDL'    ,'RULE_INFORMATION13'   ,L_ATTRIBUTE_NAME         ,TOPLVL_PRICE_QTY_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'PDL') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_PRICE_QTY');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'PDL'    ,'RULE_INFORMATION13'   ,L_ATTRIBUTE_NAME         ,TOPLVL_PRICE_QTY_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION13' ||L_ATTRIBUTE_NAME || TOPLVL_PRICE_QTY_CHR(a) );
         END IF;
       END;

       --49. Validation for QRE rule .
       BEGIN
          AVERAGING_INTERVAL(1)      := AVERAGING_INTERVAL_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'QRE') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_AVERAGING_INTERVAL');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'QRE'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,AVERAGING_INTERVAL_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'QRE') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_AVERAGING_INTERVAL');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'QRE'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,AVERAGING_INTERVAL_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || AVERAGING_INTERVAL_CHR(a) );
         END IF;
       END;

       --50. Validation for QRE rule .
       BEGIN
          MINIMUM_QUANTITY(1)      := MINIMUM_QUANTITY_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'QRE') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_MINIMUM_QUANTITY');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'QRE'    ,'RULE_INFORMATION4'   ,L_ATTRIBUTE_NAME         ,MINIMUM_QUANTITY_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'QRE') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_MINIMUM_QUANTITY');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'QRE'    ,'RULE_INFORMATION4'   ,L_ATTRIBUTE_NAME         ,MINIMUM_QUANTITY_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || MINIMUM_QUANTITY_CHR(a) );
         END IF;
       END;


       --51. Validation for QRE rule .
       BEGIN
          DEFAULT_QUANTITY(1)      := DEFAULT_QUANTITY_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'QRE') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DEFAULT_QUANTITY');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'QRE'    ,'RULE_INFORMATION5'   ,L_ATTRIBUTE_NAME         ,DEFAULT_QUANTITY_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'QRE') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DEFAULT_QUANTITY');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'QRE'    ,'RULE_INFORMATION5'   ,L_ATTRIBUTE_NAME         ,DEFAULT_QUANTITY_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION5' ||L_ATTRIBUTE_NAME || DEFAULT_QUANTITY_CHR(a) );
         END IF;
       END;

       --52. Validation for QRE rule .
       BEGIN
          FIXED_QUANTITY(1)      := FIXED_QUANTITY_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'QRE') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_FIXED_QUANTITY');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'QRE'    ,'RULE_INFORMATION7'   ,L_ATTRIBUTE_NAME         ,FIXED_QUANTITY_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'QRE') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_FIXED_QUANTITY');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'QRE'    ,'RULE_INFORMATION7'   ,L_ATTRIBUTE_NAME         ,FIXED_QUANTITY_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION7' ||L_ATTRIBUTE_NAME || FIXED_QUANTITY_CHR(a) );
         END IF;
       END;

       --53. Validation for QRE rule .
       BEGIN
          USAGE_DURATION(1)      := USAGE_DURATION_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'QRE') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_USAGE_DURATION');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'QRE'    ,'RULE_INFORMATION8'   ,L_ATTRIBUTE_NAME         ,USAGE_DURATION_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'QRE') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_USAGE_DURATION');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'QRE'    ,'RULE_INFORMATION8'   ,L_ATTRIBUTE_NAME         ,USAGE_DURATION_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION8' ||L_ATTRIBUTE_NAME || USAGE_DURATION_CHR(a) );
         END IF;
       END;

       --54. Validation for QRE rule .
       BEGIN
          BASE_READING(1)      := BASE_READING_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'QRE') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BASE_READING');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'QRE'    ,'RULE_INFORMATION12'   ,L_ATTRIBUTE_NAME         ,BASE_READING_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'QRE') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BASE_READING');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'QRE'    ,'RULE_INFORMATION12'   ,L_ATTRIBUTE_NAME         ,BASE_READING_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION13' ||L_ATTRIBUTE_NAME || BASE_READING_CHR(a) );
         END IF;
       END;

      --55
       BEGIN
          EXCEPTION_COV_ID(1)      := EXCEPTION_COV_ID_chr(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'ECE') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EXCEPTION_COV_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'ECE'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,EXCEPTION_COV_ID_chr(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'ECE') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EXCEPTION_COV_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'ECE'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,EXCEPTION_COV_ID_chr(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || EXCEPTION_COV_ID_chr(a));
         END IF;
       END;

       --56
       BEGIN
          PM_PROGRAM_ID(1)      := PM_PROGRAM_ID_chr(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'PMP') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PM_PROGRAM_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'PMP'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,PM_PROGRAM_ID_chr(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'PMP') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PM_PROGRAM_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'PMP'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,PM_PROGRAM_ID_chr(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || PM_PROGRAM_ID_chr(a));
         END IF;
       END;
       --57
       BEGIN
          RCN_INCIDENT_SEVERITY_ID(1)      := RCN_INCIDENT_SEVERITY_ID_chr(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RCN') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RCN_INCIDENT_SVR_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'RCN'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,RCN_INCIDENT_SEVERITY_ID_chr(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'RCN') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RCN_INCIDENT_SVR_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'RCN'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,RCN_INCIDENT_SEVERITY_ID_chr(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || RCN_INCIDENT_SEVERITY_ID_chr(a));
         END IF;
       END;

       --58
       BEGIN
          RCN_PDF_ID(1)      := RCN_PDF_ID_chr(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'RCN') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RCN_PDF_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'RCN'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,RCN_PDF_ID_chr(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'RCN') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RCN_PDF_ID');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'RCN'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,RCN_PDF_ID_chr(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || RCN_PDF_ID_chr(a));
         END IF;
       END;

       --59

       BEGIN
          LIMIT_UOM_QUANTIFIED(1)      := LIMIT_UOM_QUANTIFIED_chr(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'LMT') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_LIMIT_UOM_QUANTIFIED');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'LMT'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,LIMIT_UOM_QUANTIFIED_chr(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'LMT') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_LIMIT_UOM_QUANTIFIED');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'LMT'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,LIMIT_UOM_QUANTIFIED_chr(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || LIMIT_UOM_QUANTIFIED_chr(a));
         END IF;
       END;

     --60
       BEGIN
          DISCOUNT_AMOUNT(1)      := DISCOUNT_AMOUNT_chr(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'LMT') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DISCOUNT_AMOUNT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'LMT'    ,'RULE_INFORMATION2'   ,L_ATTRIBUTE_NAME         ,DISCOUNT_AMOUNT_chr(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'LMT') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DISCOUNT_AMOUNT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'LMT'    ,'RULE_INFORMATION2'   ,L_ATTRIBUTE_NAME         ,DISCOUNT_AMOUNT_chr(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || DISCOUNT_AMOUNT_chr(a));
         END IF;
       END;

      --61
       BEGIN
          DISCOUNT_PERCENT(1)      := DISCOUNT_PERCENT_chr(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'LMT') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DISCOUNT_PERCENT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'LMT'    ,'RULE_INFORMATION4'   ,L_ATTRIBUTE_NAME         ,DISCOUNT_PERCENT_chr(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'LMT') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DISCOUNT_PERCENT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'LMT'    ,'RULE_INFORMATION4'   ,L_ATTRIBUTE_NAME         ,DISCOUNT_PERCENT_chr(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));
         END IF;
       END;
----------------------------------------------------------------------------------------------------------------------

       --62
       BEGIN
          LEVEL_AMOUNT(1)      := LEVEL_AMOUNT_CHR(a);
       EXCEPTION
       WHEN OTHERS THEN
	 IF(CHR_ID(A) IS NOT NULL) THEN
           OPEN  L_HDR_DTLS_CSR(CHR_ID(A),'SLL') ;
           FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
           CLOSE L_HDR_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_LEVEL_AMOUNT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER,MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID(a),
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a),'HDRH',
                                      'SLL'    ,'RULE_INFORMATION6'   ,L_ATTRIBUTE_NAME         ,LEVEL_AMOUNT_CHR(a),
                                       L_ERROR_MSG );
           -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_HDR_DTLS_REC.CONTRACT_NUMBER      || L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || ACCT_RULE_ID_CHR(a)  );

	 END IF;

         IF(CLE_ID(A) IS NOT NULL) THEN
           OPEN  L_LINE_DTLS_CSR(CLE_ID(a),DNZ_CHR_ID(a),'SLL') ;
           FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
           CLOSE L_LINE_DTLS_CSR;
           FND_MESSAGE.CLEAR;
           FND_MESSAGE.SET_NAME('OKS','OKS_VAL_LEVEL_AMOUNT');
           L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
           L_ERROR_MSG      := SQLERRM;
           INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,MAJOR_VERSION,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID(a), CLE_ID(a),
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION(a), L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'SLL'    ,'RULE_INFORMATION6'   ,L_ATTRIBUTE_NAME         ,LEVEL_AMOUNT_CHR(a),
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr(a));
         END IF;

       END;


    END LOOP;
    CHR_ID.DELETE;

    -- End of code to validate data type .
    ------------------------------------------------------------------------------------

 End Loop;




  If(l_hdr_rule_csr1%ISOPEN) THEN
    Close  l_hdr_rule_csr1;
  END IF;
  If(l_hdr_rule_csr2%ISOPEN) THEN
    Close  l_hdr_rule_csr2;
  End if;

  If(l_hdr_rule_csr1_nus%ISOPEN) THEN
    Close  l_hdr_rule_csr1_nus;
  END IF;
  If(l_hdr_rule_csr2_nus%ISOPEN) THEN
    Close  l_hdr_rule_csr2_nus;
  End if;

EXCEPTION
WHEN OTHERS THEN
  If(l_hdr_rule_csr1%ISOPEN) THEN
    Close  l_hdr_rule_csr1;
  END IF;
  If(l_hdr_rule_csr2%ISOPEN) THEN
    Close  l_hdr_rule_csr2;
  End if;
  If(l_hdr_rule_csr1_nus%ISOPEN) THEN
    Close  l_hdr_rule_csr1_nus;
  END IF;
  If(l_hdr_rule_csr2_nus%ISOPEN) THEN
    Close  l_hdr_rule_csr2_nus;
  End if;

END VALIDATE_ALLH_RULE;

-------------------------------------------------------------------------------------------
--      abcxyz Here onwards the reprocess and  synchronization code starts.              --
--  Delete from here till the end while sending the file in validation phase             --
-------------------------------------------------------------------------------------------



--------------------------------------------------------------------------------------------
--    This is the procedure called from Reprocess_data to Reprocess Header rule data      --
--------------------------------------------------------------------------------------------

Procedure REPROCESS_HDR_RULE(prow_id         in ROWID ,
                             p_id            in NUMBER ,
			     p_us_yn         in BOOLEAN,
                             x_return_status OUT NOCOPY  VARCHAR2)
IS


CHR_ID                    NUMBER ;
L_DNZ_CHR_ID                NUMBER ;
ACCT_RULE_ID              NUMBER ;
L_PAYMENT_TYPE              VARCHAR2(2000) ;
L_CC_NO                     VARCHAR2(2000) ;
L_CC_EXPIRY_DATE            date;
CC_BANK_ACCT_ID           NUMBER ;
L_CC_AUTH_CODE              VARCHAR2(2000) ;
GRACE_DURATION            NUMBER ;
L_GRACE_PERIOD              VARCHAR2(2000) ;
EST_REV_PERCENT           NUMBER ;
L_EST_REV_DATE              date;
L_INVOICE_TEXT              VARCHAR2(2000) ;
L_INV_PRINT_FLAG            VARCHAR2(2000) ;
L_PRICE_UOM                 VARCHAR2(2000) ;
TAX_AMOUNT                NUMBER ;
L_TAX_INCLUSIVE_YN          VARCHAR2(2000) ;
L_TAX_STATUS                VARCHAR2(2000) ;
TAX_CODE                  NUMBER ;
TAX_EXEMPTION_ID          NUMBER ;
L_BILLING_SCHEDULE_TYPE     VARCHAR2(2000) ;
CUST_ACCT_ID              NUMBER ;
BILL_TO_SITE_USE_ID       NUMBER ;
INV_RULE_ID               NUMBER ;
L_RENEWAL_TYPE_CODE         VARCHAR2(2000) ;
RENEWAL_NOTIFY_TO         NUMBER ;
L_RENEWAL_END_DATE          date;
SHIP_TO_SITE_USE_ID       NUMBER ;
PAYMENT_TERM_ID           NUMBER ;
BILLING_PROFILE_ID        NUMBER ;
L_RENEWAL_STATUS            VARCHAR2(2000) ;
L_ELECTRONIC_RENEWAL_FLAG   VARCHAR2(2000) ;
QUOTE_TO_CONTACT_ID       NUMBER ;
QUOTE_TO_SITE_ID          NUMBER ;
QUOTE_TO_EMAIL_ID         NUMBER ;
QUOTE_TO_PHONE_ID         NUMBER ;
QUOTE_TO_FAX_ID           NUMBER ;
L_RENEWAL_PO_REQUIRED       VARCHAR2(2000) ;
RENEWAL_PRICE_LIST        NUMBER ;
L_RENEWAL_PRICING_TYPE      VARCHAR2(2000) ;
RENEWAL_MARKUP_PERCENT    NUMBER ;
RENEWAL_GRACE_DURATION    NUMBER ;
L_RENEWAL_GRACE_PERIOD      VARCHAR2(2000) ;
RENEWAL_EST_REV_PERCENT   NUMBER ;
RENEWAL_EST_REV_DURATION  NUMBER ;
L_RENEWAL_EST_REV_PERIOD    VARCHAR2(2000) ;
RENEWAL_PRICE_LIST_USED   NUMBER ;
L_RENEWAL_TYPE_USED         VARCHAR2(2000) ;
RENEWAL_NOTIFICATION_TO   NUMBER ;
L_RENEWAL_PO_USED           VARCHAR2(2000) ;
L_RENEWAL_PRICING_TYPE_USED VARCHAR2(2000) ;
RENEWAL_MARKUP_PERCENT_USED   NUMBER ;
REV_EST_PERCENT_USED      NUMBER ;
REV_EST_DURATION_USED     NUMBER ;
BILLING_PROFILE_USED      NUMBER ;
L_REV_EST_PERIOD_USED       VARCHAR2(2000) ;
L_ERN_FLAG_USED_YN          VARCHAR2(2000) ;
EVN_THRESHOLD_AMT         NUMBER ;
L_EVN_THRESHOLD_CUR         VARCHAR2(2000) ;
ERN_THRESHOLD_AMT         NUMBER ;
L_ERN_THRESHOLD_CUR         VARCHAR2(2000) ;
RENEWAL_GRACE_DURATION_USED   NUMBER ;
L_RENEWAL_GRACE_PERIOD_USED VARCHAR2(2000) ;
L_INV_TRX_TYPE              VARCHAR2(2000) ;
L_INV_PRINT_PROFILE         VARCHAR2(2000) ;
L_RENEWAL_PO_NUMBER         VARCHAR2(2000) ;
L_AR_INTERFACE_YN           VARCHAR2(2000) ;
L_HOLD_BILLING              VARCHAR2(2000) ;
L_SUMMARY_TRX_YN            VARCHAR2(2000) ;
L_SERVICE_PO_NUMBER         VARCHAR2(2000) ;
L_SERVICE_PO_REQUIRED       VARCHAR2(2000) ;
PRICE_LIST_ID             NUMBER ;
L_CONVERSION_TYPE           VARCHAR2(2000) ;
CONVERSION_RATE           NUMBER ;
L_CONVERSION_RATE_DATE      date;
CONVERSION_EURO_RATE      NUMBER ;



-- FOLLOWING ARE NUMBER FIELDS --
ACCT_RULE_ID_CHR              VARCHAR2(2000) ;
CC_BANK_ACCT_ID_CHR           VARCHAR2(2000) ;
GRACE_DURATION_CHR            VARCHAR2(2000) ;
EST_REV_PERCENT_CHR           VARCHAR2(2000) ;
TAX_AMOUNT_CHR                VARCHAR2(2000) ;
TAX_CODE_CHR                  VARCHAR2(2000) ;
TAX_EXEMPTION_ID_CHR          VARCHAR2(2000) ;
CUST_ACCT_ID_CHR              VARCHAR2(2000) ;
BILL_TO_SITE_USE_ID_CHR       VARCHAR2(2000) ;
INV_RULE_ID_CHR               VARCHAR2(2000) ;
RENEWAL_NOTIFY_TO_CHR         VARCHAR2(2000) ;
SHIP_TO_SITE_USE_ID_CHR       VARCHAR2(2000) ;
PAYMENT_TERM_ID_CHR           VARCHAR2(2000) ;
BILLING_PROFILE_ID_CHR        VARCHAR2(2000) ;
QUOTE_TO_CONTACT_ID_CHR       VARCHAR2(2000) ;
QUOTE_TO_SITE_ID_CHR          VARCHAR2(2000) ;
QUOTE_TO_EMAIL_ID_CHR         VARCHAR2(2000) ;
QUOTE_TO_PHONE_ID_CHR         VARCHAR2(2000) ;
QUOTE_TO_FAX_ID_CHR           VARCHAR2(2000) ;
RENEWAL_PRICE_LIST_CHR        VARCHAR2(2000) ;
RENEWAL_MARKUP_PERCENT_CHR    VARCHAR2(2000) ;
RENEWAL_GRACE_DURATION_CHR    VARCHAR2(2000) ;
RENEWAL_EST_REV_PERCENT_CHR   VARCHAR2(2000) ;
RENEWAL_EST_REV_DURATION_CHR  VARCHAR2(2000) ;
RENEWAL_PRICE_LIST_USED_CHR   VARCHAR2(2000) ;
RENEWAL_NOTIFICATION_TO_CHR   VARCHAR2(2000) ;
RENEWAL_MARKUP_PERCENT_USED_CH VARCHAR2(2000) ;
REV_EST_PERCENT_USED_CHR      VARCHAR2(2000) ;
REV_EST_DURATION_USED_CHR     VARCHAR2(2000) ;
BILLING_PROFILE_USED_CHR      VARCHAR2(2000) ;
EVN_THRESHOLD_AMT_CHR         VARCHAR2(2000) ;
ERN_THRESHOLD_AMT_CHR         VARCHAR2(2000) ;
RENEWAL_GRACE_DURATION_USED_CH VARCHAR2(2000) ;
PRICE_LIST_ID_CHR             VARCHAR2(2000) ;
CONVERSION_RATE_CHR           VARCHAR2(2000) ;
CONVERSION_EURO_RATE_CHR      VARCHAR2(2000) ;

-- FOLLOWING ARE DATE FIELDS --
CC_EXPIRY_DATE_CHR            VARCHAR2(2000) ;
EST_REV_DATE_CHR              VARCHAR2(2000) ;
RENEWAL_END_DATE_CHR          VARCHAR2(2000) ;
CONVERSION_RATE_DATE_CHR      VARCHAR2(2000) ;

--Misc Variables --
L_ATTRIBUTE_NAME              VARCHAR2(2000);
L_ERROR_MSG                   VARCHAR2(2000);

MAIN_EXCEPTION               EXCEPTION;
VAL_EXCEPTION                EXCEPTION;
Eflag                        NUMBER;   --Flag for Validation
Emsg                         VARCHAR2(2000);
iEflag                       NUMBER;   --Flag for Insert or update exception
ISQLCODE                     NUMBER;
l_chr_id                     NUMBER;
rowcount                     NUMBER;

LOCK_EXCEPTION              EXCEPTION;
L_LOCK_ID                   NUMBER;
CURSOR L_LOCK_HDR_CSR (p_id in number ) IS
SELECT ID
FROM OKC_K_HEADERS_B
WHERE ID = P_ID
FOR UPDATE NOWAIT;

-------------------------------------------------------------------------------
-- The following is the cursor opened if p_us_yn  is true   --
-------------------------------------------------------------------------------
CURSOR l_hdr_rule_csr (p_id in NUMBER)is
SELECT  RGP.CHR_ID CHR_ID
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),
       --               '!,.','!')                                                            ACCT_RULE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1))                   ACCT_RULE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,'CCR'))                             PAYMENT_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION1))             CC_NO
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,
                  to_date(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                    CC_EXPIRY_DATE
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
       --               '!,.' , '!')                                                          CC_BANK_ACCT_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3))             CC_BANK_ACCT_ID

       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION4))             CC_AUTH_CODE
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
       --               '!,.','!')                                                            GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1))             GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION2))             GRACE_PERIOD
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)),
       --               '!,','!')                                                             EST_REV_PERCENT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1))             EST_REV_PERCENT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,
                    to_date(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                  EST_REV_DATE
       -- Checked in gsidev conversion needed.
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
                      '!,' ,'!' )                                                             TAX_AMOUNT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.RULE_INFORMATION2))             TAX_STATUS
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
                      '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-,. ' , '!')     TAX_CODE
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
       --               '!,.','!')                                                            TAX_EXEMPTION_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1))                   TAX_EXEMPTION_ID
       --,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLH' ,RUL.RULE_INFORMATION1))           BILLING_SCHEDULE_TYPE
       ,decode(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION_CATEGORY)),'QRE','T',
                MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLH' ,RUL.RULE_INFORMATION1)) )   BILLING_SCHEDULE_TYPE
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),
                      '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_- ,.','!')       BILLING_PROFILE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION2))             RENEWAL_STATUS
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION3))             ELECTRONIC_RENEWAL_FLAG
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),
       --               '!,.' ,'!')                                                          QUOTE_TO_CONTACT_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1))                  QUOTE_TO_CONTACT_ID
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT2_ID1)),
       --               '!,.','!')                                                           QUOTE_TO_SITE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4))            QUOTE_TO_SITE_ID
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),
       --               '!,.','!')                                                           QUOTE_TO_EMAIL_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1))            QUOTE_TO_EMAIL_ID
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),
       --               '!,.','!')                                                           QUOTE_TO_PHONE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2))            QUOTE_TO_PHONE_ID
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),
       --               '!,.','!')                                                           QUOTE_TO_FAX_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3))            QUOTE_TO_FAX_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPO' ,RUL.RULE_INFORMATION1))            RENEWAL_PO_REQUIRED
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),
       --               '!,.','!')                                                           RENEWAL_PRICE_LIST
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1))                  RENEWAL_PRICE_LIST
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION1))            RENEWAL_PRICING_TYPE
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),
       --               '!%,' ,'!')                                                          RENEWAL_MARKUP_PERCENT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2))            RENEWAL_MARKUP_PERCENT
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),
       --               '!,.','!')                                                           RENEWAL_GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3))            RENEWAL_GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION4))            RENEWAL_GRACE_PERIOD
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),
       --               '!%,' ,'!')                                                          RENEWAL_EST_REV_PERCENT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1))            RENEWAL_EST_REV_PERCENT
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),
       --               '!,.','!')                                                           RENEWAL_EST_REV_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2))            RENEWAL_EST_REV_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION3))            RENEWAL_EST_REV_PERIOD
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),
       --               '!,.','!')                                                           RENEWAL_PRICE_LIST_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1))                  RENEWAL_PRICE_LIST_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION1))            RENEWAL_TYPE_USED
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),
       --               '!,.','!')                                                           RENEWAL_NOTIFICATION_TO
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2))            RENEWAL_NOTIFICATION_TO
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION3))            RENEWAL_PO_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION4))            RENEWAL_PRICING_TYPE_USED
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),
       --               '!,%' ,'!')                                                          RENEWAL_MARKUP_PERCENT_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5))            RENEWAL_MARKUP_PERCENT_USED
       -- Checked in gsidev conversion needed.
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),
                      '!%,' ,'!')                                                            REV_EST_PERCENT_USED
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),
       --               '!,.','!')                                                           REV_EST_DURATION_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7))            REV_EST_DURATION_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION8))            REV_EST_PERIOD_USED
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),
                      '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,. ','!')       BILLING_PROFILE_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION10))           ERN_FLAG_USED_YN
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),
       --              '!,' ,'!')                                                            EVN_THRESHOLD_AMT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11))           EVN_THRESHOLD_AMT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION12))           EVN_THRESHOLD_CUR
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),
       --              '!,' ,'!')                                                            ERN_THRESHOLD_AMT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13))           ERN_THRESHOLD_AMT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION14))           ERN_THRESHOLD_CUR
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),
       --              '!,.','!')                                                            RENEWAL_GRACE_DURATION_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1))            RENEWAL_GRACE_DURATION_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION2))            RENEWAL_GRACE_PERIOD_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.OBJECT1_ID1))                  INV_TRX_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION9))            INV_PRINT_PROFILE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION10))           RENEWAL_PO_NUMBER
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION11))           AR_INTERFACE_YN
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION12))           HOLD_BILLING
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION13))           SUMMARY_TRX_YN
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SPO' ,RUL.RULE_INFORMATION1))            SERVICE_PO_NUMBER
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SPO' ,RUL.RULE_INFORMATION2))            SERVICE_PO_REQUIRED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.OBJECT1_ID1))                  CONVERSION_TYPE       --OKC
       -- needs translation
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),
                     '!,','!')                                                               CONVERSION_RATE       --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,
                  to_date(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                   CONVERSION_RATE_DATE  --OKC
        -- needs translation
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),
                     '!,','!')                                                               CONVERSION_EURO_RATE  --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                            CUST_ACCT_ID          --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1))                  CUST_ACCT_ID          --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                            BILL_TO_SITE_USE_ID   --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1))                  BILL_TO_SITE_USE_ID   --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                            INV_RULE_ID           --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1))                  INV_RULE_ID           --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION1))            RENEWAL_TYPE_CODE     --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),
       --              '!,.','!')                                                            RENEWAL_NOTIFY_TO     --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2))            RENEWAL_NOTIFY_TO     --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,
                  to_date(RUL.RULE_INFORMATION3,'yyyy/mm/dd hh24:mi:ss')))                   RENEWAL_END_DATE      --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                            SHIP_TO_SITE_USE_ID   --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1))                  SHIP_TO_SITE_USE_ID   --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                            PAYMENT_TERM_ID       --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1))                  PAYMENT_TERM_ID       --OKC

       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),
                     '!,.','!')                                                              PRICE_LIST_ID         --OKC
FROM OKC_RULE_GROUPS_B RGP
   , OKC_RULES_B RUL
WHERE rgp.id = rul.rgp_id
  and rgp.cle_id is null
  and rgp.rgd_code = 'SVC_K'
  AND   RUL.RULE_INFORMATION_CATEGORY IN
       ('ARL','CCR','GPR','RVE','IRT','TAX','ERN','QTO', 'RPO', 'RPT','RER', 'RRU',
        'RRE', 'SBG', 'SPO','SLH','PRE', 'CVN','CAN', 'BTO', 'IRE', 'REN', 'STO', 'PTR')
  and rgp.RGD_CODE = 'SVC_K'
  and rgp.id =p_id
  GROUP BY rgp.chr_id;

-------------------------------------------------------------------------------
-- The following is the cursor opened if p_us_yn  is false   --
-------------------------------------------------------------------------------

CURSOR l_hdr_rule_csr_nus (p_id in NUMBER) is
SELECT  RGP.CHR_ID CHR_ID
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),
       --               '!,. ','!')                                                           ACCT_RULE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1))                   ACCT_RULE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,'CCR'))                             PAYMENT_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION1))             CC_NO
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,
                  to_date(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                    CC_EXPIRY_DATE
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
       --               '!,. ' , '!')                                                         CC_BANK_ACCT_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3))             CC_BANK_ACCT_ID

       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION4))             CC_AUTH_CODE
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
       --               '!,. ','!')                                                           GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1))             GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION2))             GRACE_PERIOD
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)),
       --               '!. ','!')                                                            EST_REV_PERCENT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1))             EST_REV_PERCENT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,
                    to_date(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                  EST_REV_DATE
       -- Checked in gsidev conversion needed.
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
                      '!. ' ,'!' )                                                            TAX_AMOUNT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.RULE_INFORMATION2))             TAX_STATUS
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
                      '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-,. ' , '!')     TAX_CODE
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
       --               '!,. ','!')                                                           TAX_EXEMPTION_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1))                   TAX_EXEMPTION_ID
       --,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLH' ,RUL.RULE_INFORMATION1))           BILLING_SCHEDULE_TYPE
       ,decode(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION_CATEGORY)),'QRE','T',
                MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLH' ,RUL.RULE_INFORMATION1)) )   BILLING_SCHEDULE_TYPE
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),
                      '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-,. ','!')       BILLING_PROFILE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION2))             RENEWAL_STATUS
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION3))             ELECTRONIC_RENEWAL_FLAG
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),
       --               '!,. ' ,'!')                                                          QUOTE_TO_CONTACT_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1))                   QUOTE_TO_CONTACT_ID
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT2_ID1)),
       --               '!,. ','!')                                                           QUOTE_TO_SITE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4))             QUOTE_TO_SITE_ID
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),
       --               '!,. ','!')                                                           QUOTE_TO_EMAIL_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1))             QUOTE_TO_EMAIL_ID
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),
       --               '!,. ','!')                                                           QUOTE_TO_PHONE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2))             QUOTE_TO_PHONE_ID
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),
       --               '!,. ','!')                                                           QUOTE_TO_FAX_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3))             QUOTE_TO_FAX_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPO' ,RUL.RULE_INFORMATION1))             RENEWAL_PO_REQUIRED
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),
       --               '!,. ','!')                                                           RENEWAL_PRICE_LIST
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1))                   RENEWAL_PRICE_LIST
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION1))             RENEWAL_PRICING_TYPE
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),
       --               '!%. ' ,'!')                                                          RENEWAL_MARKUP_PERCENT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2))             RENEWAL_MARKUP_PERCENT
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),
       --               '!,. ','!')                                                           RENEWAL_GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3))             RENEWAL_GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION4))             RENEWAL_GRACE_PERIOD
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),
       --               '!%. ' ,'!')                                                          RENEWAL_EST_REV_PERCENT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1))             RENEWAL_EST_REV_PERCENT
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),
       --               '!,. ','!')                                                           RENEWAL_EST_REV_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2))             RENEWAL_EST_REV_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION3))             RENEWAL_EST_REV_PERIOD
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),
       --               '!,. ','!')                                                           RENEWAL_PRICE_LIST_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1))                   RENEWAL_PRICE_LIST_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION1))             RENEWAL_TYPE_USED
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),
       --               '!,. ','!')                                                           RENEWAL_NOTIFICATION_TO
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2))             RENEWAL_NOTIFICATION_TO
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION3))             RENEWAL_PO_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION4))             RENEWAL_PRICING_TYPE_USED
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),
       --               '!. %' ,'!')                                                          RENEWAL_MARKUP_PERCENT_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5))             RENEWAL_MARKUP_PERCENT_USED
       -- Checked in gsidev conversion needed.
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),
                      '!%. ' ,'!')                                                            REV_EST_PERCENT_USED
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),
       --               '!,. ','!')                                                           REV_EST_DURATION_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7))             REV_EST_DURATION_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION8))             REV_EST_PERIOD_USED
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),
                      '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,. ','!')        BILLING_PROFILE_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION10))            ERN_FLAG_USED_YN
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),
       --              '!. ' ,'!')                                                            EVN_THRESHOLD_AMT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11))            EVN_THRESHOLD_AMT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION12))            EVN_THRESHOLD_CUR
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),
       --              '!. ' ,'!')                                                            ERN_THRESHOLD_AMT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13))            ERN_THRESHOLD_AMT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION14))            ERN_THRESHOLD_CUR
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),
       --              '!,. ','!')                                                            RENEWAL_GRACE_DURATION_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1))             RENEWAL_GRACE_DURATION_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION2))             RENEWAL_GRACE_PERIOD_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.OBJECT1_ID1))                   INV_TRX_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION9))             INV_PRINT_PROFILE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION10))            RENEWAL_PO_NUMBER
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION11))            AR_INTERFACE_YN
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION12))            HOLD_BILLING
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION13))            SUMMARY_TRX_YN
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SPO' ,RUL.RULE_INFORMATION1))             SERVICE_PO_NUMBER
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SPO' ,RUL.RULE_INFORMATION2))             SERVICE_PO_REQUIRED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.OBJECT1_ID1))                   CONVERSION_TYPE       --OKC
       -- needs translation
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),
                     '!. ','!')                                                               CONVERSION_RATE       --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,
                  to_date(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                    CONVERSION_RATE_DATE  --OKC
        -- needs translation
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),
                     '!. ','!')                                                               CONVERSION_EURO_RATE  --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                            CUST_ACCT_ID          --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1))                   CUST_ACCT_ID          --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                            BILL_TO_SITE_USE_ID   --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1))                   BILL_TO_SITE_USE_ID   --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                            INV_RULE_ID           --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1))                   INV_RULE_ID           --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION1))             RENEWAL_TYPE_CODE     --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),
       --              '!,. ','!')                                                            RENEWAL_NOTIFY_TO     --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2))             RENEWAL_NOTIFY_TO     --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,
                  to_date(RUL.RULE_INFORMATION3,'yyyy/mm/dd hh24:mi:ss')))                    RENEWAL_END_DATE      --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                            SHIP_TO_SITE_USE_ID   --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1))                   SHIP_TO_SITE_USE_ID   --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                            PAYMENT_TERM_ID       --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1))                   PAYMENT_TERM_ID       --OKC

       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),
                     '!,. ','!')                                                              PRICE_LIST_ID         --OKC
FROM OKC_RULE_GROUPS_B RGP
   , OKC_RULES_B RUL
WHERE rgp.id = rul.rgp_id
  and rgp.cle_id is null
  and rgp.rgd_code = 'SVC_K'
  AND   RUL.RULE_INFORMATION_CATEGORY IN
       ('ARL','CCR','GPR','RVE','IRT','TAX','ERN','QTO', 'RPO', 'RPT','RER', 'RRU',
        'RRE', 'SBG', 'SPO','SLH','PRE', 'CVN','CAN', 'BTO', 'IRE', 'REN', 'STO', 'PTR')
  and rgp.RGD_CODE = 'SVC_K'
  and rgp.id =p_id
  GROUP BY rgp.chr_id;


----------------------------------------------------------------------------
-- Cursor to populate data in OKS_RULE_ERROR table .                      --
----------------------------------------------------------------------------
CURSOR L_HDR_DTLS_CSR ( P_HDR_ID  IN NUMBER , P_CATEGORY IN VARCHAR2 ) IS
SELECT HDR.CONTRACT_NUMBER
     , HDR.CONTRACT_NUMBER_MODIFIER
     , RUL.ID
     , RGP.ID RGP_ID
 FROM  OKC_K_HEADERS_B HDR
     , OKC_RULE_GROUPS_B RGP
     , OKC_RULES_B RUL
WHERE HDR.ID = P_HDR_ID
  AND RGP.DNZ_CHR_ID = P_HDR_ID
  AND RGP.CHR_ID = P_HDR_ID
  AND RGP.ID = RUL.RGP_ID
  AND RGP.DNZ_CHR_ID = RUL.DNZ_CHR_ID
  AND RUL.RULE_INFORMATION_CATEGORY = P_CATEGORY ;

L_HDR_DTLS_REC L_HDR_DTLS_CSR%ROWTYPE;
----------------------------------------------------------------------------
--Cursor to check whether the record exists in OKC_RULE_GROUPS_B table.
----------------------------------------------------------------------------
CURSOR L_CHECK_RGP_CSR ( P_ID IN NUMBER ) IS
SELECT CHR_ID
  FROM OKC_RULE_GROUPS_B
 WHERE ID = P_ID;

-------------------------------------------------------
-- Cursor to lock okc_k_lines_b before going for update
-------------------------------------------------------
 CURSOR L_LOCK_LINE_CSR (p_rgp_id  in number ) IS
 SELECT OKC.DNZ_CHR_ID
   FROM OKC_K_LINES_B OKC
      , OKC_RULE_GROUPS_B RGP
  WHERE OKC.DNZ_CHR_ID = RGP.DNZ_CHR_ID
    AND RGP.ID = p_rgp_id
    AND LSE_ID in ( 1,12,19,46)
    FOR UPDATE NOWAIT;



BEGIN
-- FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');
-- FND_FILE.PUT_LINE(FND_FILE.LOG ,'-------------- Start of Sub request for Header Rule Data Reprocessing     --------');
-- FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');

DBMS_TRANSACTION.SAVEPOINT('BEFORE_TRANSACTION');
Begin
If(p_us_yn) THEN
    OPEN l_hdr_rule_csr(p_id);
    FETCH l_hdr_rule_csr into
                         L_CHR_ID
                        ,ACCT_RULE_ID_CHR
                        ,L_PAYMENT_TYPE
                        ,L_CC_NO
                        ,CC_EXPIRY_DATE_CHR
                        ,CC_BANK_ACCT_ID_CHR
                        ,L_CC_AUTH_CODE
                        ,GRACE_DURATION_CHR
                        ,L_GRACE_PERIOD
                        ,EST_REV_PERCENT_CHR
                        ,EST_REV_DATE_CHR
                        ,TAX_AMOUNT_CHR
                        ,L_TAX_STATUS
                        ,TAX_CODE_CHR
                        ,TAX_EXEMPTION_ID_CHR
                        ,L_BILLING_SCHEDULE_TYPE
                        ,BILLING_PROFILE_ID_CHR
                        ,L_RENEWAL_STATUS
                        ,L_ELECTRONIC_RENEWAL_FLAG
                        ,QUOTE_TO_CONTACT_ID_CHR
                        ,QUOTE_TO_SITE_ID_CHR
                        ,QUOTE_TO_EMAIL_ID_CHR
                        ,QUOTE_TO_PHONE_ID_CHR
                        ,QUOTE_TO_FAX_ID_CHR
                        ,L_RENEWAL_PO_REQUIRED
                        ,RENEWAL_PRICE_LIST_CHR
                        ,L_RENEWAL_PRICING_TYPE
                        ,RENEWAL_MARKUP_PERCENT_CHR
                        ,RENEWAL_GRACE_DURATION_CHR
                        ,L_RENEWAL_GRACE_PERIOD
                        ,RENEWAL_EST_REV_PERCENT_CHR
                        ,RENEWAL_EST_REV_DURATIOn_CHR
                        ,L_RENEWAL_EST_REV_PERIOD
                        ,RENEWAL_PRICE_LIST_USED_CHR
                        ,L_RENEWAL_TYPE_USED
                        ,RENEWAL_NOTIFICATION_TO_CHR
                        ,L_RENEWAL_PO_USED
                        ,L_RENEWAL_PRICING_TYPE_USED
                        ,RENEWAL_MARKUP_PERCENT_USED_CH
                        ,REV_EST_PERCENT_USED_CHR
                        ,REV_EST_DURATION_USED_CHR
                        ,L_REV_EST_PERIOD_USED
                        ,BILLING_PROFILE_USED_CHR
                        ,L_ERN_FLAG_USED_YN
                        ,EVN_THRESHOLD_AMT_CHR
                        ,L_EVN_THRESHOLD_CUR
                        ,ERN_THRESHOLD_AMT_CHR
                        ,L_ERN_THRESHOLD_CUR
                        ,RENEWAL_GRACE_DURATION_USED_CH
                        ,L_RENEWAL_GRACE_PERIOD_USED
                        ,L_INV_TRX_TYPE
                        ,L_INV_PRINT_PROFILE
                        ,L_RENEWAL_PO_NUMBER
                        ,L_AR_INTERFACE_YN
                        ,L_HOLD_BILLING
                        ,L_SUMMARY_TRX_YN
                        ,L_SERVICE_PO_NUMBER
                        ,L_SERVICE_PO_REQUIRED
                        ,L_CONVERSION_TYPE                --OKC
                        ,CONVERSION_RATE_CHR              --OKC
                        ,CONVERSION_RATE_DATE_CHR         --OKC
                        ,CONVERSION_EURO_RATE_CHR         --OKC
                        ,CUST_ACCT_ID_CHR                 --OKC
                        ,BILL_TO_SITE_USE_ID_CHR          --OKC
                        ,INV_RULE_ID_CHR                  --OKC
                        ,L_RENEWAL_TYPE_CODE              --OKC
                        ,RENEWAL_NOTIFY_TO_CHR            --OKC
                        ,RENEWAL_END_DATE_CHR             --OKC
                        ,SHIP_TO_SITE_USE_ID_CHR          --OKC
                        ,PAYMENT_TERM_ID_CHR              --OKC
                        ,PRICE_LIST_ID_CHR  ;             --OKC
      close l_hdr_rule_csr;
Else
    OPEN l_hdr_rule_csr_nus(p_id);
    FETCH l_hdr_rule_csr_nus into
                         L_CHR_ID
                        ,ACCT_RULE_ID_CHR
                        ,L_PAYMENT_TYPE
                        ,L_CC_NO
                        ,CC_EXPIRY_DATE_CHR
                        ,CC_BANK_ACCT_ID_CHR
                        ,L_CC_AUTH_CODE
                        ,GRACE_DURATION_CHR
                        ,L_GRACE_PERIOD
                        ,EST_REV_PERCENT_CHR
                        ,EST_REV_DATE_CHR
                        ,TAX_AMOUNT_CHR
                        ,L_TAX_STATUS
                        ,TAX_CODE_CHR
                        ,TAX_EXEMPTION_ID_CHR
                        ,L_BILLING_SCHEDULE_TYPE
                        ,BILLING_PROFILE_ID_CHR
                        ,L_RENEWAL_STATUS
                        ,L_ELECTRONIC_RENEWAL_FLAG
                        ,QUOTE_TO_CONTACT_ID_CHR
                        ,QUOTE_TO_SITE_ID_CHR
                        ,QUOTE_TO_EMAIL_ID_CHR
                        ,QUOTE_TO_PHONE_ID_CHR
                        ,QUOTE_TO_FAX_ID_CHR
                        ,L_RENEWAL_PO_REQUIRED
                        ,RENEWAL_PRICE_LIST_CHR
                        ,L_RENEWAL_PRICING_TYPE
                        ,RENEWAL_MARKUP_PERCENT_CHR
                        ,RENEWAL_GRACE_DURATION_CHR
                        ,L_RENEWAL_GRACE_PERIOD
                        ,RENEWAL_EST_REV_PERCENT_CHR
                        ,RENEWAL_EST_REV_DURATIOn_CHR
                        ,L_RENEWAL_EST_REV_PERIOD
                        ,RENEWAL_PRICE_LIST_USED_CHR
                        ,L_RENEWAL_TYPE_USED
                        ,RENEWAL_NOTIFICATION_TO_CHR
                        ,L_RENEWAL_PO_USED
                        ,L_RENEWAL_PRICING_TYPE_USED
                        ,RENEWAL_MARKUP_PERCENT_USED_CH
                        ,REV_EST_PERCENT_USED_CHR
                        ,REV_EST_DURATION_USED_CHR
                        ,L_REV_EST_PERIOD_USED
                        ,BILLING_PROFILE_USED_CHR
                        ,L_ERN_FLAG_USED_YN
                        ,EVN_THRESHOLD_AMT_CHR
                        ,L_EVN_THRESHOLD_CUR
                        ,ERN_THRESHOLD_AMT_CHR
                        ,L_ERN_THRESHOLD_CUR
                        ,RENEWAL_GRACE_DURATION_USED_CH
                        ,L_RENEWAL_GRACE_PERIOD_USED
                        ,L_INV_TRX_TYPE
                        ,L_INV_PRINT_PROFILE
                        ,L_RENEWAL_PO_NUMBER
                        ,L_AR_INTERFACE_YN
                        ,L_HOLD_BILLING
                        ,L_SUMMARY_TRX_YN
                        ,L_SERVICE_PO_NUMBER
                        ,L_SERVICE_PO_REQUIRED
                        ,L_CONVERSION_TYPE                --OKC
                        ,CONVERSION_RATE_CHR              --OKC
                        ,CONVERSION_RATE_DATE_CHR         --OKC
                        ,CONVERSION_EURO_RATE_CHR         --OKC
                        ,CUST_ACCT_ID_CHR                 --OKC
                        ,BILL_TO_SITE_USE_ID_CHR          --OKC
                        ,INV_RULE_ID_CHR                  --OKC
                        ,L_RENEWAL_TYPE_CODE              --OKC
                        ,RENEWAL_NOTIFY_TO_CHR            --OKC
                        ,RENEWAL_END_DATE_CHR             --OKC
                        ,SHIP_TO_SITE_USE_ID_CHR          --OKC
                        ,PAYMENT_TERM_ID_CHR              --OKC
                        ,PRICE_LIST_ID_CHR  ;             --OKC
      Close l_hdr_rule_csr_nus;
End if;
Exception
  When others then
      Emsg :=SQLERRM;
      RAISE LOCK_EXCEPTION;
End;

BEGIN
 OPEN  L_LOCK_HDR_CSR( l_chr_id);
 FETCH L_LOCK_HDR_CSR into L_LOCK_ID;
 CLOSE L_LOCK_HDR_CSR;

 OPEN  L_LOCK_LINE_CSR(p_id);
 FETCH L_LOCK_LINE_CSR INTO L_LOCK_ID;
 CLOSE L_LOCK_LINE_CSR;

EXCEPTION
   WHEN OTHERS THEN
        Emsg :=SQLERRM;
        RAISE LOCK_EXCEPTION;
END;

Eflag:=0;
iEflag:=0;
Begin
If(l_chr_id is not null) then
 begin
   update okc_k_headers_b
      set conversion_type      = l_conversion_type,
          conversion_rate      = conversion_rate_chr,
          conversion_rate_date = conversion_rate_date_chr,
          conversion_euro_rate = conversion_euro_rate_chr,
          cust_acct_id         = cust_acct_id_chr,
          bill_to_site_use_id  = bill_to_site_use_id_chr,
          inv_rule_id          = inv_rule_id_chr,
          renewal_type_code    = l_renewal_type_code,
          renewal_notify_to    = renewal_notify_to_chr,
          renewal_end_date     = renewal_end_date_chr,
          ship_to_site_use_id  = ship_to_site_use_id_chr,
          payment_term_id      = payment_term_id_chr,
          price_list_id        = price_list_id_chr
     where id = l_chr_id;
     rowcount := SQL%ROWCOUNT;
 Exception
   When others then
        iEflag:=1;
        Emsg :=SQLERRM;
        Raise;
 End;
 If rowcount > 0 then --A
       Begin
       Update oks_k_headers_b set
          acct_rule_id                  = acct_rule_id_chr
         ,payment_type                  = l_payment_type
         ,cc_no                         = l_cc_no
         ,cc_expiry_date                = cc_expiry_date_chr
         ,cc_bank_acct_id               = cc_bank_acct_id_chr
         ,cc_auth_code                  = l_cc_auth_code
         ,grace_duration                = grace_duration_chr
         ,grace_period                  = l_grace_period
         ,est_rev_percent               = est_rev_percent_chr
         ,est_rev_date                  = est_rev_date_chr
         ,tax_amount                    = tax_amount_chr
         ,tax_status                    = l_tax_status
         ,tax_code                      = tax_code_chr
         ,tax_exemption_id              = tax_exemption_id_chr
         ,billing_schedule_type         = l_billing_schedule_type
         ,billing_profile_id            = billing_profile_id_chr
         ,renewal_status                = l_renewal_status
         ,electronic_renewal_flag       = l_electronic_renewal_flag
         ,quote_to_contact_id           = quote_to_contact_id_chr
         ,quote_to_site_id              = quote_to_site_id_chr
         ,quote_to_email_id             = quote_to_email_id_chr
         ,quote_to_phone_id             = quote_to_phone_id_chr
         ,quote_to_fax_id               = quote_to_fax_id_chr
         ,renewal_po_required           = l_renewal_po_required
         ,renewal_price_list            = renewal_price_list_chr
         ,renewal_pricing_type          = l_renewal_pricing_type
         ,renewal_markup_percent        = renewal_markup_percent_chr
         ,renewal_grace_duration        = renewal_grace_duration_chr
         ,renewal_grace_period          = l_renewal_grace_period
         ,renewal_est_rev_percent       = renewal_est_rev_percent_chr
         ,renewal_est_rev_duration      = renewal_est_rev_duration_chr
         ,renewal_est_rev_period        = l_renewal_est_rev_period
         ,renewal_price_list_used       = renewal_price_list_used_chr
         ,renewal_type_used             = l_renewal_type_used
         ,renewal_notification_to       = renewal_notification_to_chr
         ,renewal_po_used               = l_renewal_po_used
         ,renewal_pricing_type_used     = l_renewal_pricing_type_used
         ,renewal_markup_percent_used   = renewal_markup_percent_used_ch
         ,rev_est_percent_used          = rev_est_percent_used_chr
         ,rev_est_duration_used         = rev_est_duration_used_chr
         ,rev_est_period_used           = l_rev_est_period_used
         ,billing_profile_used          = billing_profile_used_chr
         ,ern_flag_used_yn              = l_ern_flag_used_yn
         ,evn_threshold_amt             = evn_threshold_amt_chr
         ,evn_threshold_cur             = l_evn_threshold_cur
         ,ern_threshold_amt             = ern_threshold_amt_chr
         ,ern_threshold_cur             = l_ern_threshold_cur
         ,renewal_grace_duration_used   = renewal_grace_duration_used_ch
         ,renewal_grace_period_used     = l_renewal_grace_period_used
         ,inv_trx_type                  = l_inv_trx_type
         ,inv_print_profile             = l_inv_print_profile
         ,renewal_po_number             = l_renewal_po_number
         ,ar_interface_yn               = l_ar_interface_yn
         ,hold_billing                  = l_hold_billing
         ,summary_trx_yn                = l_summary_trx_yn
         ,service_po_number             = l_service_po_number
         ,service_po_required           = l_service_po_required
       Where chr_id = l_chr_id ;
       rowcount := SQL%ROWCOUNT;
       Exception
          When others then
               iEflag:=1;
               Emsg :=SQLERRM;
               Raise;
       End;

       If rowcount = 0 then
       Begin
          insert into oks_k_headers_b(
              id
             ,chr_id
             ,acct_rule_id
             ,payment_type
             ,cc_no
             ,cc_expiry_date
             ,cc_bank_acct_id
             ,cc_auth_code
             ,grace_duration
             ,grace_period
             ,est_rev_percent
             ,est_rev_date
             ,tax_amount
             ,tax_status
             ,tax_code
             ,tax_exemption_id
             ,billing_schedule_type
             ,billing_profile_id
             ,renewal_status
             ,electronic_renewal_flag
             ,quote_to_contact_id
             ,quote_to_site_id
             ,quote_to_email_id
             ,quote_to_phone_id
             ,quote_to_fax_id
             ,renewal_po_required
             ,renewal_price_list
             ,renewal_pricing_type
             ,renewal_markup_percent
             ,renewal_grace_duration
             ,renewal_grace_period
             ,renewal_est_rev_percent
             ,renewal_est_rev_duration
             ,renewal_est_rev_period
             ,renewal_price_list_used
             ,renewal_type_used
             ,renewal_notification_to
             ,renewal_po_used
             ,renewal_pricing_type_used
             ,renewal_markup_percent_used
             ,rev_est_percent_used
             ,rev_est_duration_used
             ,rev_est_period_used
             ,billing_profile_used
             ,ern_flag_used_yn
             ,evn_threshold_amt
             ,evn_threshold_cur
             ,ern_threshold_amt
             ,ern_threshold_cur
             ,renewal_grace_duration_used
             ,renewal_grace_period_used
             ,inv_trx_type
             ,inv_print_profile
             ,renewal_po_number
             ,ar_interface_yn
             ,hold_billing
             ,summary_trx_yn
             ,service_po_number
             ,service_po_required
             ,created_by
             ,creation_date
             ,last_updated_by
             ,last_update_date
             ,last_update_login
             ,object_version_number  )
          values (
              l_chr_id
             ,l_chr_id
             ,acct_rule_id_chr
             ,l_payment_type
             ,l_cc_no
             ,cc_expiry_date_chr
             ,cc_bank_acct_id_chr
             ,l_cc_auth_code
             ,grace_duration_chr
             ,l_grace_period
             ,est_rev_percent_chr
             ,est_rev_date_chr
             ,tax_amount_chr
             ,l_tax_status
             ,tax_code_chr
             ,tax_exemption_id_chr
             ,l_billing_schedule_type
             ,billing_profile_id_chr
             ,l_renewal_status
             ,l_electronic_renewal_flag
             ,quote_to_contact_id_chr
             ,quote_to_site_id_chr
             ,quote_to_email_id_chr
             ,quote_to_phone_id_chr
             ,quote_to_fax_id_chr
             ,l_renewal_po_required
             ,renewal_price_list_chr
             ,l_renewal_pricing_type
             ,renewal_markup_percent_chr
             ,renewal_grace_duration_chr
             ,l_renewal_grace_period
             ,renewal_est_rev_percent_chr
             ,renewal_est_rev_duration_chr
             ,l_renewal_est_rev_period
             ,renewal_price_list_used_chr
             ,l_renewal_type_used
             ,renewal_notification_to_chr
             ,l_renewal_po_used
             ,l_renewal_pricing_type_used
             ,renewal_markup_percent_used_ch
             ,rev_est_percent_used_chr
             ,rev_est_duration_used_chr
             ,l_rev_est_period_used
             ,billing_profile_used_chr
             ,l_ern_flag_used_yn
             ,evn_threshold_amt_chr
             ,l_evn_threshold_cur
             ,ern_threshold_amt_chr
             ,l_ern_threshold_cur
             ,renewal_grace_duration_used_ch
             ,l_renewal_grace_period_used
             ,l_inv_trx_type
             ,l_inv_print_profile
             ,l_renewal_po_number
             ,l_ar_interface_yn
             ,l_hold_billing
             ,l_summary_trx_yn
             ,l_service_po_number
             ,l_service_po_required
             ,1
             ,sysdate
             ,1
             ,sysdate
             ,2003
             ,1   );
       Exception when others then
          ieflag:=1;
          emsg :=sqlerrm;
          isqlcode := sqlcode;
          Raise;
       End ;
       End If;
 End if; --rowcount > 0 A
Else --If(l_chr_id is not null) then
 open  l_check_rgp_csr(p_id);
 fetch l_check_rgp_csr into l_chr_id;
 close l_check_rgp_csr;
 If l_chr_id is not null then  --B
 Begin
    insert into oks_k_headers_b oks1
            (oks1.id
            ,oks1.chr_id
            ,oks1.object_version_number
            ,oks1.created_by
            ,oks1.creation_date
            ,oks1.last_updated_by
            ,oks1.last_update_date
            ,oks1.last_update_login )
     values
           ( l_chr_id,
             l_chr_id,
             1,
             1,
             sysdate,
             1,
             sysdate,
             2003
           );
 Exception when others then
    ieflag:=1;
    emsg :=sqlerrm;
    isqlcode := sqlcode;
    Raise;
 End ;
 End if ; --l_chr_id not null  B
End If; --If(l_chr_id is not null) then

Exception
 When others then
 Emsg := SQLERRM;
End ;

If ieflag <> 1  then
  Begin
    Update okc_k_lines_b okco
       Set okco.price_negotiated = ( select sum(okci.price_negotiated)
                                       from okc_k_lines_b okci
                                      where okci.cle_id = okco.id)
     Where okco.lse_id in ( 1,12,19)
       and okco.dnz_chr_id = l_lock_id;

    Update oks_k_lines_b okso
       Set okso.tax_amount = ( Select oksi.tax_amount
                                 From oks_k_lines_b oksi
                                    , okc_k_lines_b okci
                                Where okci.lse_id =46
                                  and okci.id = oksi.cle_id
                                  and oksi.cle_id = okso.cle_id
                                  and okci.id = okso.cle_id )
     Where okso.dnz_chr_id = l_lock_id
       and exists (select 1 from okc_k_lines_b okc
                    where okc.id = okso.cle_id
                      and okc.lse_id in ( 1,12,19,46));
  Exception
     When others then
        Emsg := SQLERRM;
	FND_FILE.PUT_LINE(FND_FILE.LOG ,'DML Failed for in reproces hdr update of line Price nego '||p_id||'with Error Message '||L_ERROR_MSG);
        Raise;
  End;
End If;

    ------------------------------------------------------------------------------------------------
    --If insert or update failed then validate the records. Begin of code to validate data type . --
    -- If data fails validation then set the Eflag to 1.                                          --
    ------------------------------------------------------------------------------------------------

if ( iEflag = 1) THEN

       DBMS_TRANSACTION.ROLLBACK_SAVEPOINT('BEFORE_TRANSACTION');
       chr_id  := l_chr_id;
       --1. Validation for ARL rule .
       BEGIN
          ACCT_RULE_ID      := ACCT_RULE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'ARL') ;
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_ACCT_RULE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'ARL'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         , ACCT_RULE_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --2. Validation for CCR rule .
       BEGIN
          CC_BANK_ACCT_ID     := CC_BANK_ACCT_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'CCR') ;
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CC_BANK_ACCT_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'CCR'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , CC_BANK_ACCT_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --3. Validation for GPR rule .
       BEGIN
          GRACE_DURATION   := GRACE_DURATION_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'GPR') ;
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_GRACE_DURATION');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'GPR'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , GRACE_DURATION_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --4. Validation for RVE rule .
       BEGIN
          EST_REV_PERCENT      := EST_REV_PERCENT_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'RVE') ;
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EST_REV_PERCENT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RVE'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , EST_REV_PERCENT_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --5. Validation for IRT rule.
       BEGIN
          TAX_AMOUNT     := TAX_AMOUNT_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'IRT') ;
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_AMOUNT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'IRT'  ,'RULE_INFORMATION4'    ,L_ATTRIBUTE_NAME         , TAX_AMOUNT_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --6. Validation for TAX (TAX_CODE) rule.
       BEGIN
          TAX_CODE      := TAX_CODE_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'TAX') ;
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_CODE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'TAX'  ,'OBJECT2_ID1'    ,L_ATTRIBUTE_NAME         , TAX_CODE_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --7. Validation for TAX (TAX_EXEMPTION_ID) rule.
       BEGIN
          TAX_EXEMPTION_ID      := TAX_EXEMPTION_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'TAX');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_EXEMPTION_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'TAX'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , TAX_EXEMPTION_ID_CHR,
                                       L_ERROR_MSG );
	   Eflag:=1;
       END;


       --8. Validation for CAN  rule.
       BEGIN
          CUST_ACCT_ID      := CUST_ACCT_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'CAN');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CUST_ACCT_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'CAN'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , CUST_ACCT_ID_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --9. Validation for BTO  rule.
       BEGIN
          BILL_TO_SITE_USE_ID     := BILL_TO_SITE_USE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'BTO');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BILL_TO_SITE_USE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'BTO'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , BILL_TO_SITE_USE_ID_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;


       --10. Validation for IRE  rule.
       BEGIN
          INV_RULE_ID      := INV_RULE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'IRE');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_INV_RULE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'IRE'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , INV_RULE_ID_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --11. Validation for REN ( RENEWAL_NOTIFY_TO )  rule.
       BEGIN
          RENEWAL_NOTIFY_TO      := RENEWAL_NOTIFY_TO_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'IRE');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_NOTIFY_TO');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'REN'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_NOTIFY_TO_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --12. Validation for STO rule.
       BEGIN
          SHIP_TO_SITE_USE_ID      := SHIP_TO_SITE_USE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'STO');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_SHIP_TO_SITE_USE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'STO'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , SHIP_TO_SITE_USE_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --13. Validation for PTR rule.
       BEGIN
          PAYMENT_TERM_ID      := PAYMENT_TERM_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'PTR');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PAYMENT_TERM_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'PTR'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , PAYMENT_TERM_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --14. Validation for ERN rule.
       BEGIN
          BILLING_PROFILE_ID      := BILLING_PROFILE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'ERN');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BILLING_PROFILE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'ERN'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , BILLING_PROFILE_ID_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;


       --15. Validation for QTO ( QUOTE_TO_CONTACT_ID )rule.
       BEGIN
          QUOTE_TO_CONTACT_ID      := QUOTE_TO_CONTACT_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'QTO');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_CONTACT_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'QTO'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_CONTACT_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --16. Validation for QTO ( QUOTE_TO_SITE_ID ) rule.
       BEGIN
          QUOTE_TO_SITE_ID      := QUOTE_TO_SITE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'QTO');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_SITE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'QTO'  ,'RULE_INFORMATION4'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_SITE_ID_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --17. Validation for QTO ( QUOTE_TO_EMAIL_ID ) rule.
       BEGIN
          QUOTE_TO_EMAIL_ID      := QUOTE_TO_EMAIL_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'QTO');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_EMAIL_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'QTO'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_EMAIL_ID_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --18. Validation for QTO ( QUOTE_TO_PHONE_ID ) rule.
       BEGIN
          QUOTE_TO_PHONE_ID     := QUOTE_TO_PHONE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'QTO');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_PHONE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'QTO'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_PHONE_ID_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --19. Validation for QTO ( QUOTE_TO_FAX_ID ) rule.
       BEGIN
          QUOTE_TO_FAX_ID     := QUOTE_TO_FAX_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'QTO');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_FAX_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'QTO'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_FAX_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --20. Validation for RPT ( RENEWAL_PRICE_LIST ) rule.
       BEGIN
          RENEWAL_PRICE_LIST      := RENEWAL_PRICE_LIST_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'RPT');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_PRICE_LIST');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RPT'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , RENEWAL_PRICE_LIST_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --21. Validation for RPT ( RENEWAL_MARKUP_PERCENT ) rule.
       BEGIN
          RENEWAL_MARKUP_PERCENT      := RENEWAL_MARKUP_PERCENT_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'RPT');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_MARKUP_PERCENT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RPT'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_MARKUP_PERCENT_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --22. Validation for RPT ( RENEWAL_GRACE_DURATION ) rule.
       BEGIN
          RENEWAL_GRACE_DURATION      := RENEWAL_GRACE_DURATION_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'RPT');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_GRACE_DURATION');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RPT'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , RENEWAL_GRACE_DURATION_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --23. Validation for RER ( RENEWAL_EST_REV_PERCENT ) rule.
       BEGIN
          RENEWAL_EST_REV_PERCENT      := RENEWAL_EST_REV_PERCENT_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'RER');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_EREV_PERCENT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RER'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , RENEWAL_EST_REV_PERCENT_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --24. Validation for RER ( RENEWAL_EST_REV_DURATION ) rule.
       BEGIN
          RENEWAL_EST_REV_DURATION      := RENEWAL_EST_REV_DURATION_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'RER');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_EREV_DURATION');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RER'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_EST_REV_DURATION_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --25. Validation for RRU ( RENEWAL_PRICE_LIST_USED ) rule.
       BEGIN
          RENEWAL_PRICE_LIST_USED     := RENEWAL_PRICE_LIST_USED_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_PRICE_LIST_U');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RRU'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , RENEWAL_PRICE_LIST_USED_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --26. Validation for RRU ( RENEWAL_NOTIFICATION_TO ) rule.
       BEGIN
          RENEWAL_NOTIFICATION_TO      := RENEWAL_NOTIFICATION_TO_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_NOTIFICATION');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RRU'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_NOTIFICATION_TO_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --27. Validation for RRU ( RENEWAL_NOTIFICATION_TO ) rule.
       BEGIN
          RENEWAL_MARKUP_PERCENT_USED      := RENEWAL_MARKUP_PERCENT_USED_CH;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_MPERCENT_U');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RRU'  ,'RULE_INFORMATION5'    ,L_ATTRIBUTE_NAME         , RENEWAL_MARKUP_PERCENT_USED_CH,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --28. Validation for RRU ( REV_EST_PERCENT_USED ) rule.
       BEGIN
          REV_EST_PERCENT_USED      := REV_EST_PERCENT_USED_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_REV_EST_PERCENT_U');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RRU'  ,'RULE_INFORMATION6'    ,L_ATTRIBUTE_NAME         , REV_EST_PERCENT_USED_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --29. Validation for RRU ( REV_EST_DURATION_USED ) rule.
       BEGIN
          REV_EST_DURATION_USED      := REV_EST_DURATION_USED_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_REV_EST_DURATION_U');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RRU'  ,'RULE_INFORMATION7'    ,L_ATTRIBUTE_NAME         , REV_EST_DURATION_USED_CHR,
                                       L_ERROR_MSG );
             Eflag:=1;
       END;

       --30. Validation for RRU ( BILLING_PROFILE_USED ) rule.
       BEGIN
          BILLING_PROFILE_USED      := BILLING_PROFILE_USED_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BILLING_PROFILE_U');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RRU'  ,'RULE_INFORMATION9'    ,L_ATTRIBUTE_NAME         , BILLING_PROFILE_USED_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --31. Validation for RRU ( EVN_THRESHOLD_AMT ) rule.
       BEGIN
          EVN_THRESHOLD_AMT      := EVN_THRESHOLD_AMT_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EVN_THRESHOLD_AMT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RRU'  ,'RULE_INFORMATION11'    ,L_ATTRIBUTE_NAME         , EVN_THRESHOLD_AMT_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --32. Validation for RRU ( ERN_THRESHOLD_AMT ) rule.
       BEGIN
          ERN_THRESHOLD_AMT      := ERN_THRESHOLD_AMT_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_ERN_THRESHOLD_AMT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RRU'  ,'RULE_INFORMATION13'    ,L_ATTRIBUTE_NAME         , ERN_THRESHOLD_AMT_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --33. Validation for RRE ( RENEWAL_GRACE_DURATION_USED ) rule.
       BEGIN
          RENEWAL_GRACE_DURATION_USED      := RENEWAL_GRACE_DURATION_USED_CH;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'RRE');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_GDURATION_U');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RRE'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , RENEWAL_GRACE_DURATION_USED_CH,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --34. Validation for PRE ( PRICE_LIST_ID ) rule.
       BEGIN
          PRICE_LIST_ID      := PRICE_LIST_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'PRE');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PRICE_LIST_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'PRE'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , PRICE_LIST_ID_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --35. Validation for CVN ( CONVERSION_RATE ) rule.
       BEGIN
          CONVERSION_RATE      := CONVERSION_RATE_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'CVN');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CONVERSION_RATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'CVN'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , CONVERSION_RATE_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --36. Validation for CVN ( CONVERSION_EURO_RATE ) rule.
       BEGIN
          CONVERSION_EURO_RATE      := CONVERSION_EURO_RATE_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'CVN');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CONVERSION_EURO_RATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'CVN'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , CONVERSION_EURO_RATE_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --37. Validation for CCR ( CC_EXPIRY_DATE ) rule.
       BEGIN
          L_CC_EXPIRY_DATE      := to_date(CC_EXPIRY_DATE_CHR,'yyyy/mm/dd hh24:mi:ss');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'CCR');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CC_EXPIRY_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'CCR'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , CC_EXPIRY_DATE_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --38. Validation for RVE ( EST_REV_DATE ) rule.
       BEGIN
          L_EST_REV_DATE      := to_date(EST_REV_DATE_CHR,'yyyy/mm/dd hh24:mi:ss');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'RVE');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EST_REV_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RVE'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , EST_REV_DATE_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --39. Validation for REN ( RENEWAL_END_DATE ) rule.
       BEGIN
          L_RENEWAL_END_DATE      := to_date(RENEWAL_END_DATE_CHR,'yyyy/mm/dd hh24:mi:ss');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'REN');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_END_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'REN'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , RENEWAL_END_DATE_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --40. Validation for REN ( CONVERSION_RATE_DATE ) rule.
       BEGIN
          L_CONVERSION_RATE_DATE      := to_date(CONVERSION_RATE_DATE_CHR,'yyyy/mm/dd hh24:mi:ss');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'REN');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CONVERSION_RATE_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'CVN'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , CONVERSION_RATE_DATE_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;
       Emsg := SQLERRM;
End If;

    -- End of code to validate data type .
  ---------------------------------------------------------------------------------------

IF Eflag = 1 THEN
   Eflag :=0;
   FND_FILE.PUT_LINE(FND_FILE.LOG ,'Validation failed for rgp_id :'||p_id||' Error Message: '||Emsg||' '||L_ERROR_MSG);
   Raise VAL_EXCEPTION;
END IF;


If iEflag = 1 THEN
  iEflag := 0;
  FND_FILE.PUT_LINE(FND_FILE.LOG ,'Insert/Update failed for rgp_id :'||p_id||' Error Message: '||Emsg);
  Raise MAIN_EXCEPTION;
End If;

x_return_status:='S';


EXCEPTION
  WHEN MAIN_EXCEPTION THEN
  FND_FILE.PUT_LINE(FND_FILE.LOG ,SQLCODE );
  FND_FILE.PUT_LINE(FND_FILE.LOG ,SQLERRM );
    IF ISQLCODE in ( 1,-1)  THEN
      x_return_status:='S';
    Else
      x_return_status:='E';
      Update oks_rule_reprocess
      set errormsg= Emsg
      where rowid=prow_id;
    End If;

  WHEN VAL_EXCEPTION THEN
       x_return_status:='E';
      Update oks_rule_reprocess
      set errormsg=L_ERROR_MSG
      where rowid=prow_id;
   WHEN LOCK_EXCEPTION THEN
	X_RETURN_STATUS := 'E';
	L_ERROR_MSG := Emsg;
        Update oks_rule_reprocess
        set errormsg=L_ERROR_MSG
        where rowid=prow_id;
	FND_FILE.PUT_LINE(FND_FILE.LOG ,'DML Failed for LOCK '||p_id||'with Error Message '||L_ERROR_MSG);
   WHEN OTHERS THEN
	X_RETURN_STATUS := 'E';
	L_ERROR_MSG := Emsg;
        Update oks_rule_reprocess
        set errormsg=L_ERROR_MSG
        where rowid=prow_id;
	FND_FILE.PUT_LINE(FND_FILE.LOG ,'DML Failed for'||p_id||'with Error Message '||L_ERROR_MSG);


END REPROCESS_HDR_RULE;

--------------------------------------------------------------------------------------------
--    This is the procedure called from Reprocess_data to Reprocess Line rule data           --
--------------------------------------------------------------------------------------------

Procedure REPROCESS_LINE_RULE(prow_id         in ROWID ,
                              p_id            in NUMBER ,
			      p_us_yn         in BOOLEAN,
                              x_return_status OUT NOCOPY  VARCHAR2)

IS

ID                              number;
CLE_ID                          number ;
DNZ_CHR_ID                      number ;
L_ID                            number;
L_CLE_ID                        number ;
L_DNZ_CHR_ID                    number ;
DISCOUNT_LIST                   number ;          --DST
ACCT_RULE_ID                    number ;          --ARL
L_PAYMENT_TYPE                  varchar2(2000) ;  --CCR
L_CC_NO                         varchar2(2000) ;  --CCR
L_CC_EXPIRY_DATE		date ;            --CCR
CC_BANK_ACCT_ID			number ;          --CCR
L_CC_AUTH_CODE			varchar2(2000) ;  --CCR
GRACE_DURATION			number ;          --GPR
L_GRACE_PERIOD			varchar2(2000) ;  --GPR
L_INVOICE_TEXT			varchar2(2000) ;  --IRT
L_INV_PRINT_FLAG		varchar2(2000) ;  --IRT
L_PRICE_UOM			varchar2(2000) ;  --IRT
TAX_AMOUNT			number ;          --IRT
L_TAX_INCLUSIVE_YN		varchar2(2000) ;  --IRT
L_TAX_STATUS			varchar2(2000) ;  --TAX
TAX_CODE			number ;          --TAX
TAX_EXEMPTION_ID		number ;          --TAX
L_IB_TRANS_TYPE			varchar2(2000) ;  --IBR
IB_TRANS_DATE			date ;            --IBR
L_IB_TRX_DETAILS                varchar2(2000) ;  --IBR
CLVL_LIST_PRICE			number ;          --PDL
CLVL_QUANTITY			number ;          --PDL
CLVL_EXTENDED_AMT		number ;          --PDL
L_TOPLVL_OPERAND_CODE		varchar2(2000) ;  --PDL
TOPLVL_OPERAND_VAL		number ;          --PDL
L_CLVL_UOM_CODE			varchar2(2000) ;  --PDL
TOPLVL_QUANTITY			number ;          --PDL
L_TOPLVL_UOM_CODE               varchar2(2000) ;  --PDL
TOPLVL_ADJ_PRICE		number ;          --PDL
TOPLVL_PRICE_QTY		number ;          --PDL
L_STATUS_TEXT			varchar2(2000) ;  --PDL
AVERAGING_INTERVAL		number ;          --QRE
L_USAGE_PERIOD			varchar2(2000) ;  --QRE
L_SETTLEMENT_INTERVAL		varchar2(2000) ;  --QRE
MINIMUM_QUANTITY		number ;          --QRE
DEFAULT_QUANTITY		number ;          --QRE
L_AMCV_FLAG			varchar2(2000) ;  --QRE
FIXED_QUANTITY			number ;          --QRE
USAGE_DURATION			number ;          --QRE
L_LEVEL_YN			varchar2(2000) ;  --QRE
L_USAGE_TYPE			varchar2(2000) ;  --QRE
L_UOM_QUANTIFIED                varchar2(2000) ;  --QRE
BASE_READING			number ;          --QRE
L_USAGE_EST_METHOD		varchar2(2000) ;  --QRE
L_BILLING_SCHEDULE_TYPE		varchar2(2000) ;  --SLH
CUST_ACCT_ID			number ;          --CAN (OKC)
BILL_TO_SITE_USE_ID		number ;          --BTO (OKC)
INV_RULE_ID			number ;          --IRE (OKC)
L_LINE_RENEWAL_TYPE_CODE        varchar2(2000) ;  --REN (OKC)
SHIP_TO_SITE_USE_ID		number ;          --STO (OKC)
PAYMENT_TERM_ID			number ;          --PTR (OKC)
LINE_LIST_PRICE                 number ;          --PDL rule_info4 (OKC)

-- FOLLOWING ARE NUMBER FIELDS --
DISCOUNT_LIST_CHR               varchar2(2000) ;  --DST
ACCT_RULE_ID_CHR                varchar2(2000) ;  --ARL
CC_BANK_ACCT_ID_CHR		varchar2(2000) ;  --CCR
GRACE_DURATION_CHR		varchar2(2000) ;  --GPR
TAX_AMOUNT_CHR   		varchar2(2000) ;  --IRT
TAX_CODE_CHR    		varchar2(2000) ;  --TAX
TAX_EXEMPTION_ID_CHR		varchar2(2000) ;  --TAX
CLVL_LIST_PRICE_CHR		varchar2(2000) ;  --PDL
CLVL_QUANTITY_CHR		varchar2(2000) ;  --PDL
CLVL_EXTENDED_AMT_CHR   	varchar2(2000) ;  --PDL
TOPLVL_OPERAND_VAL_CHR		varchar2(2000) ;  --PDL
TOPLVL_QUANTITY_CHR		varchar2(2000) ;  --PDL
TOPLVL_ADJ_PRICE_CHR		varchar2(2000) ;  --PDL
TOPLVL_PRICE_QTY_CHR		varchar2(2000) ;  --PDL
AVERAGING_INTERVAL_CHR		varchar2(2000) ;  --QRE
MINIMUM_QUANTITY_CHR		varchar2(2000) ;  --QRE
DEFAULT_QUANTITY_CHR		varchar2(2000) ;  --QRE
FIXED_QUANTITY_CHR		varchar2(2000) ;  --QRE
USAGE_DURATION_CHR		varchar2(2000) ;  --QRE
BASE_READING_CHR		varchar2(2000) ;  --QRE
CUST_ACCT_ID_CHR		varchar2(2000) ;  --CAN (OKC)
BILL_TO_SITE_USE_ID_CHR		varchar2(2000) ;  --BTO (OKC)
INV_RULE_ID_CHR			varchar2(2000) ;  --IRE (OKC)
SHIP_TO_SITE_USE_ID_CHR		varchar2(2000) ;  --STO (OKC)
PAYMENT_TERM_ID_CHR		varchar2(2000) ;  --PTR (OKC)
LINE_LIST_PRICE_CHR             varchar2(2000) ;  --PDL (OKC)
------------------------------------------------------------
EXCEPTION_COV_ID_CHR            Varchar2(2000);
PM_PROGRAM_ID_CHR               Varchar2(2000);
PRICE_LIST_ID_CHR               Varchar2(2000);
RCN_INCIDENT_SEVERITY_ID_CHR    Varchar2(2000);
RCN_PDF_ID_CHR                  Varchar2(2000);
RSN_INCIDENT_SEVERITY_ID_CHR    Varchar2(2000);
RSN_PDF_ID_CHR                  Varchar2(2000);
DISCOUNT_PERCENT_CHR            Varchar2(2000);
DISCOUNT_AMOUNT_CHR             Varchar2(2000);
-----------------------------------------------
EXCEPTION_COV_ID                Number ;
L_INHERITANCE_TYPE              Varchar2(2000);
Prod_Upgrade_YN_CHR             Varchar2(2000);
Coverage_Type_CHR               Varchar2(2000);
TRANSFER_OPTION_CHR             Varchar2(2000);
PM_PROGRAM_ID                   Number ;
PM_CONF_REQ_YN_CHR              Varchar2(2000);
PM_SCH_EXISTS_YN_CHR            Varchar2(2000);
ALLOW_BT_DISCOUNT_CHR           Varchar2(2000);
L_OFFSET_DURATION               Varchar2(2000);
PRICE_LIST_ID                   Number ;
RCN_INCIDENT_SEVERITY_ID        Number ;
RCN_PDF_ID                      Number ;
RCN_REACT_TIME_NAME             Varchar2(2000);
RCN_WORK_THRU_YN                Varchar2(2000);
RCN_REACT_ACTIVE_YN             Varchar2(2000);
RSN_INCIDENT_SEVERITY_ID        Number ;
RSN_PDF_ID                      Number ;
RSN_REACT_TIME_NAME             Varchar2(2000);
RSN_WORK_THRU_YN                Varchar2(2000);
RSN_REACT_ACTIVE_YN             Varchar2(2000);
L_LIMIT_UOM_QUANTIFIED          Varchar2(2000);
DISCOUNT_AMOUNT                 Number;
DISCOUNT_PERCENT                Number;
L_Sync_Date_Install             Varchar2(2000);

------------------------------------------------
-- FOLLOWING ARE DATE FIELDS --
CC_EXPIRY_DATE_CHR		varchar2(2000) ; --CCR
IB_TRANS_DATE_CHR		varchar2(2000) ; --IBR

--Misc Variables --
L_ATTRIBUTE_NAME                VARCHAR2(2000);
L_ERROR_MSG                     VARCHAR2(2000);
 L_USERENV_LANG                 VARCHAR2(100) := OKC_UTIL.get_userenv_lang ;

MAIN_EXCEPTION                  EXCEPTION;
VAL_EXCEPTION                   EXCEPTION;
LOCK_EXCEPTION                  EXCEPTION;
L_LOCK_ID                       NUMBER;
rowcount                        number;

-------------------------------------------------------
-- Cursor to lock okc_k_lines_b before going for update
-------------------------------------------------------
CURSOR L_LOCK_LINE_CSR (p_id in number ) IS
SELECT ID
  FROM OKC_K_LINES_B
 WHERE ID = P_ID
   FOR UPDATE NOWAIT;

Eflag                          NUMBER;
Emsg                           VARCHAR2(2000);
iEflag                         NUMBER:=0;
l_upd_cle_id                   NUMBER;
ISQLCODE                       NUMBER;

-------------------------------------------------------------------------------
-- The following is the cursor opened if p_us_yn is TRUE  --
-------------------------------------------------------------------------------
CURSOR l_line_rule_csr (p_id in NUMBER)is
SELECT  RGP.CLE_ID     ID
       ,RGP.CLE_ID     CLE_ID
       ,RGP.DNZ_CHR_ID DNZ_CHR_ID

   -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                          DISCOUNT_LIST
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1))                DISCOUNT_LIST

       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1))                ACCT_RULE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,'CCR'))                          PAYMENT_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION1))          CC_NO
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,
            to_date(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                       CC_EXPIRY_DATE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
       --              '!,.','!')                                                          CC_BANK_ACCT_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3))          CC_BANK_ACCT_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION4))          CC_AUTH_CODE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
       --              '!,.','!')                                                          GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1))          GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION2))          GRACE_PERIOD
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION1))          INVOICE_TEXT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION2))          INV_PRINT_FLAG
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION3))          PRICE_UOM
        -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
                     '!,','!')                                                             TAX_AMOUNT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION5))          TAX_INCLUSIVE_YN
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.RULE_INFORMATION2))          TAX_STATUS
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
                     '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!')       TAX_CODE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                          TAX_EXEMPTION_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1))                TAX_EXEMPTION_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IBR' ,RUL.RULE_INFORMATION1))          IB_TRANS_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IBR' ,
            TO_DATE(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                       IB_TRANS_DATE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IBR' ,RUL.RULE_INFORMATION3))          IB_TRX_DETAILS
        -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),
                     '!,','!')                                                             CLVL_LIST_PRICE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),
       --              '!,.','!')                                                          CLVL_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2))          CLVL_QUANTITY
       -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),
                     '!,','!')                                                             CLVL_EXTENDED_AMT
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION4)),
                     '!,','!')                                                             LINE_LIST_PRICE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION5))          TOPLVL_OPERAND_CODE
        -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),
                     '!,','!')                                                             TOPLVL_OPERAND_VAL
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION7))          CLVL_UOM_CODE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),
       --              '!,.','!')                                                          TOPLVL_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8))          TOPLVL_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION9))          TOPLVL_UOM_CODE
       -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),
                     '!,','!')                                                             TOPLVL_ADJ_PRICE
       -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),
                     '!,','!')                                                             TOPLVL_PRICE_QTY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION12)) STATUS_TEXT
       -------  Character to number conversion -- Records dosent exitsts in gsidev fro this category  QRE.
       -- Not sure whethet translation is required or not. since records dosent exitst in gsidev - no trans done
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),
       --              '!,.','!')                                                           AVERAGING_INTERVAL
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1))           AVERAGING_INTERVAL
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION2))           USAGE_PERIOD
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION3))           SETTLEMENT_INTERVAL
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),
       --              '!,.','!')                                                           MINIMUM_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4))           MINIMUM_QUANTITY
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),
       --              '!,.','!')                                                           DEFAULT_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5))           DEFAULT_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION6))           AMCV_FLAG
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),
       --              '!,.','!')                                                           FIXED_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7))               FIXED_QUANTITY
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),
       --              '!,.','!')       USAGE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8))           USAGE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION9))           LEVEL_YN
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION10))          USAGE_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION11))          UOM_QUANTIFIED
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),
       --              '!,.','!')       BASE_READING
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12))          BASE_READING
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,DECODE(RUL.RULE_INFORMATION6,'Y','AMCV'))) USAGE_EST_METHOD
       --,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLH' ,RUL.RULE_INFORMATION1))           BILLING_SCHEDULE_TYPE
       ,decode(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION_CATEGORY)),'QRE','T',
                MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLH' ,RUL.RULE_INFORMATION1)) )  BILLING_SCHEDULE_TYPE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                           CUST_ACCT_ID           --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1))                 CUST_ACCT_ID           --OKC
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                           BILL_TO_SITE_USE_ID    --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1))                 BILL_TO_SITE_USE_ID    --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1))                 INV_RULE_ID            --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LRT' ,RUL.RULE_INFORMATION1))           LINE_RENEWAL_TYPE_CODE --OKC
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                           SHIP_TO_SITE_USE_ID    --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1))                 SHIP_TO_SITE_USE_ID    --OKC
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                           PAYMENT_TERM_ID        --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1))                 PAYMENT_TERM_ID        --OKC
       ----- For Coverages
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1))             EXCEPTION_COV_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'WHE',RUL.RULE_INFORMATION1))             INHERITANCE_TYPE
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'UGE',RUL.RULE_INFORMATION1))             PROD_UPGRADE_YN_CHR
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'CVE',RUL.RULE_INFORMATION1))             COVERAGE_TYPE_CHR
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'STR',decode(RUL.RULE_INFORMATION1,'Y','TRANS','TERM'))) TRANSFER_OPTION_CHR
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1))                   PM_PROGRAM_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.RULE_INFORMATION1))             PM_CONF_REQ_YN_CHR
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.RULE_INFORMATION2))             PM_SCH_EXISTS_YN_CHR
       --,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'DST',RUL.OBJECT1_ID1))                 DISCOUNT_LIST
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'BTD','Y'))ALLOW_BT_DISCOUNT_CHR
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'OFS',RUL.RULE_INFORMATION1))OFFSET_DURATION
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PRE',RUL.OBJECT1_ID1))                   PRICE_LIST_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1))                   RCN_INCIDENT_SEVERITY_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1))             RCN_PDF_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION2))             RCN_REACT_TIME_NAME
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION3))             RCN_WORK_THRU_YN
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION4))             RCN_REACT_ACTIVE_YN
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RSN',RUL.RULE_INFORMATION2))             RSN_REACT_TIME_NAME
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1))             LIMIT_UOM_QUANTIFIED
       -------  Character to number conversion -- Records dosent exitsts in gsidev fro this category  LMT.
       -- Not sure whethet translation is required or not. since records dosent exitst in gsidev - no trans done
       --,TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION2)),
       --              '!,','!')                                                           DISCOUNT_AMOUNT
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION2))             DISCOUNT_AMOUNT
       --,TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION4)),
       --              '!%,','!')                                                          DISCOUNT_PERCENT
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION4))             DISCOUNT_PERCENT
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT','N'))Sync_Date_Install


  FROM OKC_RULE_GROUPS_B RGP
     , OKC_RULES_B RUL
 WHERE RGP.ID  = RUL.RGP_ID
   AND RUL.RULE_INFORMATION_CATEGORY IN ('DST','ARL','CCR','GPR','IRT','TAX','IBR','PDL','QRE','SLH','CAN','BTO','IRE','LRT','STO','PTR',
'ECE','WHE','UGE','STR','CVE','PMP','BTD','RCN','RSN','LMT','OFS','PRE','CVR')
   AND RGP.CLE_ID IS NOT NULL
   AND RGP.RGD_CODE = 'SVC_K'
   AND RGP.id = p_id
 GROUP BY RGP.CLE_ID ,RGP.CLE_ID, RGP.DNZ_CHR_ID;


-------------------------------------------------------------------------------
-- The following is the cursor opened if p_us_yn is FALSE  --
-------------------------------------------------------------------------------

CURSOR l_line_rule_csr_nus (p_id in NUMBER)is
SELECT  RGP.CLE_ID     ID
       ,RGP.CLE_ID     CLE_ID
       ,RGP.DNZ_CHR_ID DNZ_CHR_ID
   -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                         DISCOUNT_LIST
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1))                DISCOUNT_LIST

       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1))                ACCT_RULE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,'CCR'))                          PAYMENT_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION1))          CC_NO
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,
            to_date(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                       CC_EXPIRY_DATE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
       --              '!,. ','!')                                                         CC_BANK_ACCT_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3))          CC_BANK_ACCT_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION4))          CC_AUTH_CODE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
       --              '!,. ','!')                                                         GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1))          GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION2))          GRACE_PERIOD
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION1))          INVOICE_TEXT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION2))          INV_PRINT_FLAG
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION3))          PRICE_UOM
        -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
                     '!. ','!')                                                            TAX_AMOUNT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION5))          TAX_INCLUSIVE_YN
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.RULE_INFORMATION2))          TAX_STATUS
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
                     '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,. ','!')      TAX_CODE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                         TAX_EXEMPTION_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1))                TAX_EXEMPTION_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IBR' ,RUL.RULE_INFORMATION1))          IB_TRANS_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IBR' ,
            TO_DATE(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                       IB_TRANS_DATE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IBR' ,RUL.RULE_INFORMATION3))          IB_TRX_DETAILS
        -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),
                     '!. ','!')                                                             CLVL_LIST_PRICE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),
       --              '!,. ','!')                                                          CLVL_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2))           CLVL_QUANTITY
       -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),
                     '!. ','!')                                                             CLVL_EXTENDED_AMT
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION4)),
                     '!. ','!')                                                             LINE_LIST_PRICE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION5))           TOPLVL_OPERAND_CODE
        -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),
                     '!. ','!')                                                             TOPLVL_OPERAND_VAL
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION7))           CLVL_UOM_CODE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),
       --              '!,. ','!')                                                          TOPLVL_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8))           TOPLVL_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION9))           TOPLVL_UOM_CODE
       -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),
                     '!. ','!')                                                             TOPLVL_ADJ_PRICE
       -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),
                     '!. ','!')                                                             TOPLVL_PRICE_QTY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION12)) STATUS_TEXT
       -------  Character to number conversion -- Records dosent exitsts in gsidev fro this category  QRE.
       -- Not sure whethet translation is required or not. since records dosent exitst in gsidev - no trans done
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),
       --              '!,. ','!')                                                           AVERAGING_INTERVAL
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1))            AVERAGING_INTERVAL
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION2))            USAGE_PERIOD
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION3))            SETTLEMENT_INTERVAL
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),
       --              '!,. ','!')                                                           MINIMUM_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4))            MINIMUM_QUANTITY
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),
       --              '!,. ','!')                                                           DEFAULT_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5))            DEFAULT_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION6))            AMCV_FLAG
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),
       --              '!,. ','!')                                                           FIXED_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7))            FIXED_QUANTITY
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),
       --              '!,. ','!')       USAGE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8))            USAGE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION9))            LEVEL_YN
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION10))           USAGE_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION11))           UOM_QUANTIFIED
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),
       --              '!,. ','!')       BASE_READING
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12))           BASE_READING
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,DECODE(RUL.RULE_INFORMATION6,'Y','AMCV'))) USAGE_EST_METHOD
       --,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLH' ,RUL.RULE_INFORMATION1))          BILLING_SCHEDULE_TYPE
       ,decode(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION_CATEGORY)),'QRE','T',
                MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLH' ,RUL.RULE_INFORMATION1)) )  BILLING_SCHEDULE_TYPE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                           CUST_ACCT_ID           --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1))                  CUST_ACCT_ID           --OKC
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                           BILL_TO_SITE_USE_ID    --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1))                  BILL_TO_SITE_USE_ID    --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1))                  INV_RULE_ID            --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LRT' ,RUL.RULE_INFORMATION1))            LINE_RENEWAL_TYPE_CODE --OKC
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                           SHIP_TO_SITE_USE_ID    --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1))                  SHIP_TO_SITE_USE_ID    --OKC
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                           PAYMENT_TERM_ID        --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1))                  PAYMENT_TERM_ID        --OKC
       ----- For Coverages
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1))               EXCEPTION_COV_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'WHE',RUL.RULE_INFORMATION1))               INHERITANCE_TYPE
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'UGE',RUL.RULE_INFORMATION1))               PROD_UPGRADE_YN_CHR
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'CVE',RUL.RULE_INFORMATION1))               COVERAGE_TYPE_CHR
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'STR',decode(RUL.RULE_INFORMATION1,'Y','TRANS','TERM'))) TRANSFER_OPTION_CHR
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1))                     PM_PROGRAM_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.RULE_INFORMATION1))               PM_CONF_REQ_YN_CHR
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.RULE_INFORMATION2))               PM_SCH_EXISTS_YN_CHR
       --,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'DST',RUL.OBJECT1_ID1))                   DISCOUNT_LIST
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'BTD','Y'))ALLOW_BT_DISCOUNT_CHR
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'OFS',RUL.RULE_INFORMATION1))OFFSET_DURATION
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PRE',RUL.OBJECT1_ID1))                     PRICE_LIST_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1))                     RCN_INCIDENT_SEVERITY_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1))               RCN_PDF_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION2))               RCN_REACT_TIME_NAME
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION3))               RCN_WORK_THRU_YN
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION4))               RCN_REACT_ACTIVE_YN
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RSN',RUL.RULE_INFORMATION2))               RSN_REACT_TIME_NAME
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1))               LIMIT_UOM_QUANTIFIED
       -------  Character to number conversion -- Records dosent exitsts in gsidev fro this category  LMT.
       -- Not sure whethet translation is required or not. since records dosent exitst in gsidev - no trans done
       --,TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION2)),
       --              '!. ','!')                                                           DISCOUNT_AMOUNT
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION2))              DISCOUNT_AMOUNT
       --,TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION4)),
       --              '!%. ','!')                                                          DISCOUNT_PERCENT
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION4))              DISCOUNT_PERCENT
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT','N'))Sync_Date_Install

  FROM OKC_RULE_GROUPS_B RGP
     , OKC_RULES_B RUL
 WHERE RGP.ID  = RUL.RGP_ID
   AND RUL.RULE_INFORMATION_CATEGORY IN ('DST','ARL','CCR','GPR','IRT','TAX','IBR','PDL','QRE','SLH','CAN','BTO','IRE','LRT','STO','PTR',
'ECE','WHE','UGE','STR','CVE','PMP','BTD','RCN','RSN','LMT','OFS','PRE','CVR')
   AND RGP.CLE_ID IS NOT NULL
   AND RGP.RGD_CODE = 'SVC_K'
   AND RGP.id = p_id
 GROUP BY RGP.CLE_ID ,RGP.CLE_ID, RGP.DNZ_CHR_ID;


----------------------------------------------------------------------------
-- Cursor to populate data in OKS_RULE_ERROR table .                      --
----------------------------------------------------------------------------
CURSOR L_LINE_DTLS_CSR (P_CLE_ID  IN NUMBER ,P_HDR_ID IN NUMBER, P_CATEGORY IN VARCHAR2 ) IS
SELECT HDR.CONTRACT_NUMBER
     , HDR.CONTRACT_NUMBER_MODIFIER
     , LIN.LINE_NUMBER
     , RUL.ID
     , RGP.ID RGP_ID
 FROM  OKC_K_HEADERS_B HDR
     , OKC_RULE_GROUPS_B RGP
     , OKC_RULES_B RUL
     , OKC_K_LINES_B LIN
WHERE HDR.ID = P_HDR_ID
  AND LIN.ID= P_CLE_ID
  AND RGP.DNZ_CHR_ID = P_HDR_ID
  AND RGP.CLE_ID = LIN.ID
  AND RGP.ID = RUL.RGP_ID
  AND RGP.DNZ_CHR_ID = RUL.DNZ_CHR_ID
  AND RUL.RULE_INFORMATION_CATEGORY = P_CATEGORY ;

L_LINE_DTLS_REC L_LINE_DTLS_CSR%ROWTYPE;
----------------------------------------------------------------------------
--Cursor to check whether the record exists in OKC_RULE_GROUPS_b table.
----------------------------------------------------------------------------
CURSOR L_CHECK_RGP_CSR ( P_ID IN NUMBER ) IS
SELECT CLE_ID ,DNZ_CHR_ID
  FROM OKC_RULE_GROUPS_B
 WHERE ID = P_ID;

-----------------------------------------------------------------
-- Newly added code to synchronize cc_no , po , Price list from--
-- Header to Top lines                                         --
-----------------------------------------------------------------
 l_payment_typei    varchar2(2000);
 l_cc_noi           varchar2(2000);
 l_cc_expiry_datei  date;
 --l_cc_bank_acct_idi number;
 --l_cc_auth_codei    varchar2(2000);
 l_cust_po_numberi  varchar2(2000);
 l_cust_po_number_req_yni varchar2(10);
 l_price_list_idi   number;
 l_dnz_chr_idi      number;
 l_lse_idi          number;

 CURSOR L_SYNHL_CSR ( p_rgp_id in number ) is
  select oks.payment_type
       , oks.cc_no
       , oks.cc_expiry_date
       --, oks.cc_bank_acct_id
       --, oks.cc_auth_code
       , okc.cust_po_number
       , okc.cust_po_number_req_yn
       , okc.price_list_id
       , okc.id
       , okcl.lse_id
    from oks_k_headers_b oks
       , okc_k_headers_b okc
       , okc_k_lines_b   okcl
       , okc_rule_groups_b rgp
   where oks.chr_id = okc.id
     and okcl.lse_id in ( 1,12,19,46)
     and okcl.dnz_chr_id = oks.chr_id
     and okcl.dnz_chr_id = okc.id
     and rgp.id = p_rgp_id
     and rgp.cle_id = okcl.id
     and rgp.dnz_chr_id = oks.chr_id
     and rgp.dnz_chr_id = okc.id
     and okc.id = oks.chr_id;



BEGIN
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'--------------    Start of Sub request for Line Rule Data Reprocessing    --------');
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');

 DBMS_TRANSACTION.SAVEPOINT('BEFORE_TRANSACTION');
Begin
If (p_us_yn) then
    open l_line_rule_csr(p_id);
    fetch l_line_rule_csr into
                         l_id
                        ,l_cle_id
                        ,l_dnz_chr_id
                        ,discount_list_chr
                        ,acct_rule_id_chr
                        ,l_payment_type
                        ,l_cc_no
                        ,cc_expiry_date_chr
                        ,cc_bank_acct_id_chr
                        ,l_cc_auth_code
                        ,grace_duration_chr
                        ,l_grace_period
                        ,l_invoice_text
                        ,l_inv_print_flag
                        ,l_price_uom
                        ,tax_amount_chr
                        ,l_tax_inclusive_yn
                        ,l_tax_status
                        ,tax_code_chr
                        ,tax_exemption_id_chr
                        ,l_ib_trans_type
                        ,ib_trans_date_chr
                        ,l_ib_trx_details
                        --,prod_price
                        --,service_price
                        ,clvl_list_price_chr
                        ,clvl_quantity_chr
                        ,clvl_extended_amt_chr
                        ,line_list_price_chr
                        ,l_toplvl_operand_code
                        ,toplvl_operand_val_chr
                        ,l_clvl_uom_code
                        ,toplvl_quantity_chr
                        ,l_toplvl_uom_code
                        ,toplvl_adj_price_chr
                        ,toplvl_price_qty_chr
                        ,l_status_text
                        ,averaging_interval_chr
                        ,l_usage_period
                        ,l_settlement_interval
                        ,minimum_quantity_chr
                        ,default_quantity_chr
                        ,l_amcv_flag
                        ,fixed_quantity_chr
                        ,usage_duration_chr
                        ,l_level_yn
                        ,l_usage_type
                        ,l_uom_quantified
                        ,base_reading_chr
                        ,l_usage_est_method
                        ,l_billing_schedule_type
                        ,cust_acct_id_chr         --okc
                        ,bill_to_site_use_id_chr  --okc
                        ,inv_rule_id_chr          --okc
                        ,l_line_renewal_type_code --okc
                        ,ship_to_site_use_id_chr  --okc
                        ,payment_term_id_chr      --okc
                        -------------------------------
                       ,exception_cov_id_chr,
                        l_inheritance_type,
                        prod_upgrade_yn_chr,
                        coverage_type_chr,
                        transfer_option_chr,
                        pm_program_id_chr,
                        pm_conf_req_yn_chr,
                        pm_sch_exists_yn_chr,
                        allow_bt_discount_chr,
                        l_offset_duration,
                        price_list_id_chr,
                        rcn_incident_severity_id_chr,
                        rcn_pdf_id_chr,
                        rcn_react_time_name,
                        rcn_work_thru_yn,
                        rcn_react_active_yn,
                        rsn_react_time_name,
                        l_limit_uom_quantified,
                        discount_amount_chr,
                        discount_percent_chr,
                        l_sync_date_install;
                        ---------------------------------
      close l_line_rule_csr;

else
      open l_line_rule_csr_nus(p_id);
      fetch l_line_rule_csr_nus into
                         l_id
                        ,l_cle_id
                        ,l_dnz_chr_id
                        ,discount_list_chr
                        ,acct_rule_id_chr
                        ,l_payment_type
                        ,l_cc_no
                        ,cc_expiry_date_chr
                        ,cc_bank_acct_id_chr
                        ,l_cc_auth_code
                        ,grace_duration_chr
                        ,l_grace_period
                        ,l_invoice_text
                        ,l_inv_print_flag
                        ,l_price_uom
                        ,tax_amount_chr
                        ,l_tax_inclusive_yn
                        ,l_tax_status
                        ,tax_code_chr
                        ,tax_exemption_id_chr
                        ,l_ib_trans_type
                        ,ib_trans_date_chr
                        ,l_ib_trx_details
                        ,clvl_list_price_chr
                        ,clvl_quantity_chr
                        ,clvl_extended_amt_chr
                        ,line_list_price_chr
                        ,l_toplvl_operand_code
                        ,toplvl_operand_val_chr
                        ,l_clvl_uom_code
                        ,toplvl_quantity_chr
                        ,l_toplvl_uom_code
                        ,toplvl_adj_price_chr
                        ,toplvl_price_qty_chr
                        ,l_status_text
                        ,averaging_interval_chr
                        ,l_usage_period
                        ,l_settlement_interval
                        ,minimum_quantity_chr
                        ,default_quantity_chr
                        ,l_amcv_flag
                        ,fixed_quantity_chr
                        ,usage_duration_chr
                        ,l_level_yn
                        ,l_usage_type
                        ,l_uom_quantified
                        ,base_reading_chr
                        ,l_usage_est_method
                        ,l_billing_schedule_type
                        ,cust_acct_id_chr         --okc
                        ,bill_to_site_use_id_chr  --okc
                        ,inv_rule_id_chr          --okc
                        ,l_line_renewal_type_code --okc
                        ,ship_to_site_use_id_chr  --okc
                        ,payment_term_id_chr      --okc
                        --------------------------------
                        ,exception_cov_id_chr,
                        l_inheritance_type,
                        prod_upgrade_yn_chr,
                        coverage_type_chr,
                        transfer_option_chr,
                        pm_program_id_chr,
                        pm_conf_req_yn_chr,
                        pm_sch_exists_yn_chr,
                        allow_bt_discount_chr,
                        l_offset_duration,
                        price_list_id_chr,
                        rcn_incident_severity_id_chr,
                        rcn_pdf_id_chr,
                        rcn_react_time_name,
                        rcn_work_thru_yn,
                        rcn_react_active_yn,
                        rsn_react_time_name,
                        l_limit_uom_quantified,
                        discount_amount_chr,
                        discount_percent_chr,
                        l_sync_date_install;
                        -----------------------------------
      close l_line_rule_csr_nus;
End if;
rowcount := sql%rowcount;
Exception
   When others then
     ieflag:=1;
     emsg :=sqlerrm;
     Raise;

End;

Begin
  open  l_lock_line_csr( l_cle_id);
  fetch l_lock_line_csr into l_lock_id;
  close l_lock_line_csr;
Exception
  when others then
    ieflag:=1;
    emsg :=sqlerrm;
    raise lock_exception;
End;

Begin
 ---------------------------------------------------------------------------
 -- Code added to synchronize Hdr level cc no,po,pricelist,cust_po_number --
 ---------------------------------------------------------------------------
 Begin
 l_dnz_chr_idi := Null;
 Open  l_synhl_csr ( p_id );
 Fetch l_synhl_csr into l_payment_typei
                     , l_cc_noi
                     , l_cc_expiry_datei
                     --, l_cc_bank_acct_idi
                     --, l_cc_auth_codei
                     , l_cust_po_numberi
                     , l_cust_po_number_req_yni
                     , l_price_list_idi
                     , l_dnz_chr_idi
                     , l_lse_idi ;
 Close l_synhl_csr;
 Exception
    When others then
      ieflag:=1;
      emsg :=sqlerrm;
      Raise;
 End;

 Eflag:=0;
 iEflag := 0;

 If l_cle_id > 0 then  -- Label AA
    l_upd_cle_id := l_cle_id;
    Begin
      Update okc_k_lines_b
        Set cust_acct_id           = cust_acct_id_chr
           ,bill_to_site_use_id    = bill_to_site_use_id_chr
           ,inv_rule_id            = inv_rule_id_chr
           ,line_renewal_type_code = l_line_renewal_type_code
           ,ship_to_site_use_id    = ship_to_site_use_id_chr
           ,payment_term_id        = payment_term_id_chr
           ,line_list_price        = line_list_price_chr
          , price_list_id          = decode(l_lse_idi,1 ,l_price_list_idi
                                                     ,12,l_price_list_idi
                                                     ,19,l_price_list_idi
                                                     ,46,l_price_list_idi,price_list_id_chr )
      Where id = l_upd_cle_id ;
      rowcount := sql%rowcount;
     Exception
        When others then
          ieflag:=1;
          emsg :=sqlerrm;
          Raise;
    End;

    If rowcount > 0 then  --Label BB
       Begin
       Update oks_k_lines_b set
         discount_list         = discount_list_chr
        ,acct_rule_id          = acct_rule_id_chr
        ,grace_duration        = grace_duration_chr
        ,grace_period          = l_grace_period
        ,inv_print_flag        = l_inv_print_flag
        ,price_uom             = l_price_uom
        ,tax_amount            = tax_amount_chr
        ,tax_inclusive_yn      = l_tax_inclusive_yn
        ,tax_status            = l_tax_status
        ,tax_code              = tax_code_chr
        ,tax_exemption_id      = tax_exemption_id_chr
        ,ib_trans_type         = l_ib_trans_type
        ,ib_trans_date         = ib_trans_date_chr
        ,clvl_list_price       = clvl_list_price_chr
        ,clvl_quantity         = clvl_quantity_chr
        ,clvl_extended_amt     = clvl_extended_amt_chr
        ,toplvl_operand_code   = l_toplvl_operand_code
        ,toplvl_operand_val    = toplvl_operand_val_chr
        ,clvl_uom_code         = l_clvl_uom_code
        ,toplvl_quantity       = toplvl_quantity_chr
        ,toplvl_uom_code       = l_toplvl_uom_code
        ,toplvl_adj_price      = toplvl_adj_price_chr
        ,toplvl_price_qty      = toplvl_price_qty_chr
        ,averaging_interval    = averaging_interval_chr
        ,usage_period          = l_usage_period
        ,settlement_interval   = l_settlement_interval
        ,minimum_quantity      = minimum_quantity_chr
        ,default_quantity      = default_quantity_chr
        ,amcv_flag             = l_amcv_flag
        ,fixed_quantity        = fixed_quantity_chr
        ,usage_duration        = usage_duration_chr
        ,level_yn              = l_level_yn
        ,usage_type            = l_usage_type
        ,uom_quantified        = l_uom_quantified
        ,base_reading          = base_reading_chr
        ,usage_est_method      = l_usage_est_method
        ,billing_schedule_type = l_billing_schedule_type
        ,cust_po_number        = l_cust_po_numberi  --to synchronize hdr value to lines
        ,cust_po_number_req_yn = l_cust_po_number_req_yni
        ,payment_type          = l_payment_typei
        ,cc_no                 = l_cc_noi
        ,cc_expiry_date        = l_cc_expiry_datei
        --,cc_bank_acct_id       = l_cc_bank_acct_idi
        --,cc_auth_code          = l_cc_auth_codei
        ----------------------------------------------
        ,exception_cov_id      = exception_cov_id_chr
        ,inheritance_type      = l_inheritance_type
        ,prod_upgrade_yn       = prod_upgrade_yn_chr
        ,coverage_type         = coverage_type_chr
        ,transfer_option       = transfer_option_chr
        ,pm_program_id         = pm_program_id_chr
        ,pm_conf_req_yn        = pm_conf_req_yn_chr
        ,pm_sch_exists_yn      = pm_sch_exists_yn_chr
        ,allow_bt_discount     = allow_bt_discount_chr
        ,incident_severity_id  = rcn_incident_severity_id_chr
        ,pdf_id                = rcn_pdf_id_chr
        ,work_thru_yn          = rcn_work_thru_yn
        ,react_active_yn       = rcn_react_active_yn
        ,limit_uom_quantified  = l_limit_uom_quantified
        ,discount_amount       = discount_amount_chr
        ,discount_percent      = discount_percent_chr
        ,sync_date_install     = l_sync_date_install
       Where cle_id = l_upd_cle_id;
       rowcount := sql%rowcount;
       Exception
         When others then
           ieflag:=1;
           emsg :=sqlerrm;
           Raise;
       End;
       If rowcount > 0 then -- Lable GG
       Begin
           If l_offset_duration is not null then -- Label FF
              l_upd_cle_id := l_cle_id ;
              update oks_k_lines_b t1
              set (t1.offset_period ,t1.offset_duration) =
                  (select tim2.uom_code,tim2.duration
                    from okc_timevalues_b tim ,okc_timevalues_b tim2,okc_rules_b rul,okc_rule_groups_b rgp
                    where tim.id = offset_duration
                      and rgp.cle_id = l_upd_cle_id
                      and rul.rule_information1 = tim.id
                      and rul.rule_information_category = 'OFS'
                      and rgp.id = rul.rgp_id
                      and tim2.id = tim.tve_id_started
                      and tim.dnz_chr_id = tim2.dnz_chr_id
                      and t1.cle_id = rgp.cle_id)
             where t1.cle_id = l_upd_cle_id;
          End if; -- Label FF
       Exception
         When others then
           ieflag:=1;
           emsg :=sqlerrm;
           Raise;
       End;
       End If; --Label GG
       Begin
           If rowcount > 0 then  --Label CC
             Begin
             For lang_i in okc_util.g_language_code.first..okc_util.g_language_code.last
             Loop
              Update oks_k_lines_tl
                 Set invoice_text    = l_invoice_text
                    ,ib_trx_details  = l_ib_trx_details
                    ,status_text     = l_status_text
                    ,react_time_name = rcn_react_time_name
               Where id = l_upd_cle_id
                 and language    = okc_util.g_language_code(lang_i)
                 and source_lang = l_userenv_lang ;
                 rowcount := sql%rowcount;
             End loop;
             Exception
                When others then
                   ieflag:=1;
                   emsg :=sqlerrm;
                   Raise;
             End;
             If rowcount = 0 then -- Label DD
                Begin
                   For lang_i in okc_util.g_language_code.first..okc_util.g_language_code.last
                   Loop
                        Insert into oks_k_lines_tl (
                        id,
                        language,
                        source_lang,
                        sfwt_flag,
                        invoice_text,
                        ib_trx_details,
                        status_text,
                        react_time_name,
                        security_group_id,
                        created_by,
                        creation_date,
                        last_updated_by,
                        last_update_date,
                        last_update_login)
                        values(
                        l_upd_cle_id,
                        okc_util.g_language_code(lang_i),
                        l_userenv_lang,
                        'S',
                        l_invoice_text,
                        l_ib_trx_details,
                        l_status_text,
                        rcn_react_time_name,
                        null, --security_group_id,
                        1,
                        sysdate,
                        1,
                        sysdate,
                        2003
                        );
                   End loop;
                Exception
                  When others then
                     ieflag:=1;
                     emsg :=sqlerrm;
                     Raise;
                End;
             End If; --Label DD
           Elsif rowcount = 0 then  -- Label CC
             Begin
             Insert into oks_k_lines_b
                ( id
                 ,cle_id
                 ,dnz_chr_id
                 ,discount_list
                 ,acct_rule_id
                 ,grace_duration
                 ,grace_period
                 ,inv_print_flag
                 ,price_uom
                 ,tax_amount
                 ,tax_inclusive_yn
                 ,tax_status
                 ,tax_code
                 ,tax_exemption_id
                 ,ib_trans_type
                 ,ib_trans_date
                 ,clvl_list_price
                 ,clvl_quantity
                 ,clvl_extended_amt
                 ,toplvl_operand_code
                 ,toplvl_operand_val
                 ,clvl_uom_code
                 ,toplvl_quantity
                 ,toplvl_uom_code
                 ,toplvl_adj_price
                 ,toplvl_price_qty
                 ,averaging_interval
                 ,usage_period
                 ,settlement_interval
                 ,minimum_quantity
                 ,default_quantity
                 ,amcv_flag
                 ,fixed_quantity
                 ,usage_duration
                 ,level_yn
                 ,usage_type
                 ,uom_quantified
                 ,base_reading
                 ,usage_est_method
                 ,billing_schedule_type
                 ,cust_po_number --to synchronize hdr value to line
                 ,cust_po_number_req_yn
                 ,payment_type
                 ,cc_no
                 ,cc_expiry_date
                 --,cc_bank_acct_id
                 --,cc_auth_code
                 ------------------------
                 ,exception_cov_id
                 ,inheritance_type
                 ,prod_upgrade_yn
                 ,coverage_type
                 ,transfer_option
                 ,pm_program_id
                 ,pm_conf_req_yn
                 ,pm_sch_exists_yn
                 ,allow_bt_discount
                 ,offset_duration
                 ,offset_period
                 ,incident_severity_id
                 ,pdf_id
                 ,work_thru_yn
                 ,react_active_yn
                 ,limit_uom_quantified
                 ,discount_amount
                 ,discount_percent
                 ,sync_date_install
                 -------------------------
                 ,created_by
                 ,creation_date
                 ,last_updated_by
                 ,last_update_date
                 ,last_update_login
                 ,object_version_number  )
                 Values (
                  l_id
                 ,l_cle_id
                 ,l_dnz_chr_id
                 ,discount_list_chr
                 ,acct_rule_id_chr
                 ,grace_duration_chr
                 ,l_grace_period
                 ,l_inv_print_flag
                 ,l_price_uom
                 ,tax_amount_chr
                 ,l_tax_inclusive_yn
                 ,l_tax_status
                 ,tax_code_chr
                 ,tax_exemption_id_chr
                 ,l_ib_trans_type
                 ,ib_trans_date_chr
                 ,clvl_list_price_chr
                 ,clvl_quantity_chr
                 ,clvl_extended_amt_chr
                 ,l_toplvl_operand_code
                 ,toplvl_operand_val_chr
                 ,l_clvl_uom_code
                 ,toplvl_quantity_chr
                 ,l_toplvl_uom_code
                 ,toplvl_adj_price_chr
                 ,toplvl_price_qty_chr
                 ,averaging_interval_chr
                 ,l_usage_period
                 ,l_settlement_interval
                 ,minimum_quantity_chr
                 ,default_quantity_chr
                 ,l_amcv_flag
                 ,fixed_quantity_chr
                 ,usage_duration_chr
                 ,l_level_yn
                 ,l_usage_type
                 ,l_uom_quantified
                 ,base_reading_chr
                 ,l_usage_est_method
                 ,l_billing_schedule_type
                 ,l_cust_po_numberi  --to synchronize hdr value to lines
                 ,l_cust_po_number_req_yni
                 ,l_payment_typei
                 ,l_cc_noi
                 ,l_cc_expiry_datei
                 --,l_cc_bank_acct_idi
                 --,l_cc_auth_codei
                 -------------------------
                 ,exception_cov_id_chr
                 ,l_inheritance_type
                 ,prod_upgrade_yn_chr
                 ,coverage_type_chr
                 ,transfer_option_chr
                 ,pm_program_id_chr
                 ,pm_conf_req_yn_chr
                 ,pm_sch_exists_yn_chr
                 ,allow_bt_discount_chr
                 ,null
                 ,null
                 ,rcn_incident_severity_id_chr
                 ,rcn_pdf_id_chr
                 ,rcn_work_thru_yn
                 ,rcn_react_active_yn
                 ,l_limit_uom_quantified
                 ,discount_amount_chr
                 ,discount_percent_chr
                 ,l_sync_date_install
                 ----------------------------
                 ,1
                 ,sysdate
                 ,1
                 ,sysdate
                 ,2003
                 ,1   );
             rowcount := sql%rowcount;
             Exception
               When others then
                  ieflag:=1;
                  emsg :=sqlerrm;
                  Raise;
             End;
             If rowcount > 0 then  -- Label HH
             Begin
               For lang_i in okc_util.g_language_code.first..okc_util.g_language_code.last
                  Loop
                  Insert into oks_k_lines_tl (
                     id,
                     language,
                     source_lang,
                     sfwt_flag,
                     invoice_text,
                     ib_trx_details,
                     status_text,
                     react_time_name,
                     security_group_id,
                     created_by,
                     creation_date,
                     last_updated_by,
                     last_update_date,
                     last_update_login)
                     values(
                     l_cle_id,
                     okc_util.g_language_code(lang_i),
                     l_userenv_lang,
                     'S',
                     l_invoice_text,
                     l_ib_trx_details,
                     l_status_text,
                     rcn_react_time_name,
                     null, --security_group_id,
                     1,
                     sysdate,
                     1,
                     sysdate,
                     2003
                     );
                  End loop;
             Exception
                When others then
                  ieflag:=1;
                  emsg :=sqlerrm;
                  Raise;
             End;
             End If; -- Label HH
             If rowcount > 0 then -- Label II
             Begin
                If l_offset_duration is not null then
                   l_upd_cle_id := cle_id ;
                   update oks_k_lines_b t1
                   set (t1.offset_period ,t1.offset_duration) =
                       (select tim2.uom_code,tim2.duration
                          from okc_timevalues_b tim ,okc_timevalues_b tim2,okc_rules_b rul,okc_rule_groups_b rgp
                         where tim.id = offset_duration
                           and rgp.cle_id = l_upd_cle_id
                           and rul.rule_information1 = tim.id
                           and rul.rule_information_category = 'OFS'
                           and rgp.id = rul.rgp_id
                           and tim2.id = tim.tve_id_started
                           and tim.dnz_chr_id = tim2.dnz_chr_id
                           and t1.cle_id = rgp.cle_id)
                 where t1.cle_id = l_upd_cle_id;
                End if;
             Exception
                When others then
                  ieflag:=1;
                  emsg :=sqlerrm;
                  Raise;
             End;
             End if;  -- Label II
           End If; -- Label CC
      Exception
        When others then
          ieflag:=1;
          emsg :=sqlerrm;
          Raise;
    End;
    End If ;  --Label BB

 Elsif l_id is null then -- Label AA
   Open l_check_rgp_csr(p_id);
  Fetch l_check_rgp_csr into l_id,l_dnz_chr_id;
  Close l_check_rgp_csr;
  If id is not null then -- Label EE
     Begin
      insert into oks_k_lines_b(
                  id
                 ,cle_id
                 ,dnz_chr_id
                 ,cust_po_number --to synchronize hdr value to line
                 ,cust_po_number_req_yn
                 ,payment_type
                 ,cc_no
                 ,cc_expiry_date
                 --,cc_bank_acct_id
                 --,cc_auth_code
                 ,object_version_number
                 ,created_by
                 ,creation_date
                 ,last_updated_by
                 ,last_update_date
                 ,last_update_login)
         values ( l_id
                 ,l_id
                 ,l_dnz_chr_id
                 ,l_cust_po_numberi  --to synchronize hdr value to lines
                 ,l_cust_po_number_req_yni
                 ,l_payment_typei
                 ,l_cc_noi
                 ,l_cc_expiry_datei
                 --,l_cc_bank_acct_idi
                 --,l_cc_auth_codei
                 ,1
                 ,1
                 ,sysdate
                 ,1
                 ,sysdate
                 ,2003);
     Exception
       When others then
          ieflag:=1;
          emsg :=sqlerrm;
          Raise;
     End ;

     Begin
      for lang_i in okc_util.g_language_code.first..okc_util.g_language_code.last
      loop
        insert into oks_k_lines_tl (id
                      ,language
                      ,source_lang
                      ,sfwt_flag
                      ,created_by
                      ,creation_date
                      ,last_updated_by
                      ,last_update_date
                      ,last_update_login)
                values(
                       l_id
                      ,okc_util.g_language_code(lang_i)
                      ,l_userenv_lang
                      ,'S'
                      ,1
                      ,sysdate
                      ,1
                      ,sysdate
                      ,2003);
      End loop;
     Exception
       When others then
          ieflag:=1;
          emsg :=sqlerrm;
          Raise;
     End ;
  End If; -- Label EE
 End If; -- Label AA
Exception
 When others then
   ieflag :=1;
End;

 --------------------------------------------------------------------------------------------------
 --If insert or update failed then need to validate the data. Begin of code to validate data type .
 --If data fails validation then set the Eflag to 1. Begin of code to validate data type .       --
 --------------------------------------------------------------------------------------------------
if (iEflag = 1) THEN
       --o(l_cle_id||' Going for validation ');

       DBMS_TRANSACTION.ROLLBACK_SAVEPOINT('BEFORE_TRANSACTION');
       cle_id := l_cle_id;
       dnz_chr_id := l_dnz_chr_id;

          --1. Validation for DST rule .
       BEGIN
          DISCOUNT_LIST      := DISCOUNT_LIST_CHR;
          --o(l_cle_id||' xxx');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'DST') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DISCOUNT_LIST');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'DST'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,DISCOUNT_LIST_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --2. Validation for ARL rule .
       BEGIN
          ACCT_RULE_ID      := ACCT_RULE_ID_CHR;
          --o(l_cle_id||' xxx');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'ARL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_ACCT_RULE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER  ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'ARL'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,ACCT_RULE_ID_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --3. Validation for CCR rule .
       BEGIN
          CC_BANK_ACCT_ID      := CC_BANK_ACCT_ID_CHR;
          --o(l_cle_id||' xxx');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'CCR') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CC_BANK_ACCT_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'CCR'    ,'RULE_INFORMATION3'   ,L_ATTRIBUTE_NAME         ,CC_BANK_ACCT_ID_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;


       --4. Validation for GPR rule .
       BEGIN
          GRACE_DURATION      := GRACE_DURATION_CHR;
          --o(l_cle_id||' xxx');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'GPR') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_GRACE_DURATION');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'GPR'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,GRACE_DURATION_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;
       --5. Validation for IRT rule .
       BEGIN
          TAX_AMOUNT      := TAX_AMOUNT_CHR;
          --o(l_cle_id||' xxx');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'IRT') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_AMOUNT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'IRT'    ,'RULE_INFORMATION4'   ,L_ATTRIBUTE_NAME         ,TAX_AMOUNT_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --6. Validation for TAX rule .
       BEGIN
          TAX_CODE      := TAX_CODE_CHR;
          --o(l_cle_id||' xxx');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'TAX') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_CODE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'TAX'    ,'OBJECT2_ID1'   ,L_ATTRIBUTE_NAME         ,TAX_CODE_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --7. Validation for TAX rule .
       BEGIN
          TAX_EXEMPTION_ID      := TAX_EXEMPTION_ID_CHR;
          --o(l_cle_id||' xxx');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'TAX') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_EXEMPTION_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'TAX'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,TAX_EXEMPTION_ID_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --8. Validation for PDL rule .
       BEGIN
          CLVL_LIST_PRICE      := CLVL_LIST_PRICE_CHR;
          --o(l_cle_id||' xxx');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CLVL_LIST_PRICE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PDL'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,CLVL_LIST_PRICE_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --9. Validation for PDL rule .
       BEGIN
          CLVL_QUANTITY      := CLVL_QUANTITY_CHR;
          --o(l_cle_id||' xxx');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CLVL_QUANTITY');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PDL'    ,'RULE_INFORMATION2'   ,L_ATTRIBUTE_NAME         ,CLVL_QUANTITY_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --10. Validation for PDL rule .
       BEGIN
          CLVL_EXTENDED_AMT      := CLVL_EXTENDED_AMT_CHR;
          --o(l_cle_id||' xxx');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CLVL_EXTENDED_AMT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PDL'    ,'RULE_INFORMATION3'   ,L_ATTRIBUTE_NAME         ,CLVL_EXTENDED_AMT_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --11. Validation for PDL rule .
       BEGIN
          TOPLVL_OPERAND_VAL      := TOPLVL_OPERAND_VAL_CHR;
          --o(l_cle_id||' xxx');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_OPERAND_VAL');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PDL'    ,'RULE_INFORMATION6'   ,L_ATTRIBUTE_NAME         ,TOPLVL_OPERAND_VAL_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --12. Validation for PDL rule .
       BEGIN
          TOPLVL_QUANTITY      := TOPLVL_QUANTITY_CHR;
          --o(l_cle_id||' xxx');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_QUANTITY');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PDL'    ,'RULE_INFORMATION8'   ,L_ATTRIBUTE_NAME         ,TOPLVL_QUANTITY_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --13. Validation for PDL rule .
       BEGIN
          TOPLVL_ADJ_PRICE      := TOPLVL_ADJ_PRICE_CHR;
          --o(l_cle_id||' xxx');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_ADJ_PRICE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PDL'    ,'RULE_INFORMATION10'   ,L_ATTRIBUTE_NAME         ,TOPLVL_ADJ_PRICE_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --14. Validation for PDL rule .
       BEGIN
          TOPLVL_PRICE_QTY      := TOPLVL_PRICE_QTY_CHR;
          --o(l_cle_id||' xxx');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_PRICE_QTY');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PDL'    ,'RULE_INFORMATION13'   ,L_ATTRIBUTE_NAME         ,TOPLVL_PRICE_QTY_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --15. Validation for QRE rule .
       BEGIN
          AVERAGING_INTERVAL      := AVERAGING_INTERVAL_CHR;
          --o(l_cle_id||' xxx');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'QRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_AVERAGING_INTERVAL');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'QRE'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,AVERAGING_INTERVAL_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --16. Validation for QRE rule .
       BEGIN
          MINIMUM_QUANTITY      := MINIMUM_QUANTITY_CHR;
          --o(l_cle_id||' xxx');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'QRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_MINIMUM_QUANTITY');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'QRE'    ,'RULE_INFORMATION4'   ,L_ATTRIBUTE_NAME         ,MINIMUM_QUANTITY_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;


       --17. Validation for QRE rule .
       BEGIN
          DEFAULT_QUANTITY      := DEFAULT_QUANTITY_CHR;
          --o(l_cle_id||' xxx');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'QRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DEFAULT_QUANTITY');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'QRE'    ,'RULE_INFORMATION5'   ,L_ATTRIBUTE_NAME         ,DEFAULT_QUANTITY_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --18. Validation for QRE rule .
       BEGIN
          FIXED_QUANTITY      := FIXED_QUANTITY_CHR;
          --o(l_cle_id||' xxx');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'QRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_FIXED_QUANTITY');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'QRE'    ,'RULE_INFORMATION7'   ,L_ATTRIBUTE_NAME         ,FIXED_QUANTITY_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --19. Validation for QRE rule .
       BEGIN
          USAGE_DURATION      := USAGE_DURATION_CHR;
          --o(l_cle_id||' xxx');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'QRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_USAGE_DURATION');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'QRE'    ,'RULE_INFORMATION8'   ,L_ATTRIBUTE_NAME         ,USAGE_DURATION_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --20. Validation for QRE rule .
       BEGIN
          BASE_READING      := BASE_READING_CHR;
          --o(l_cle_id||' xxx');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'QRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BASE_READING');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'QRE'    ,'RULE_INFORMATION12'   ,L_ATTRIBUTE_NAME         ,BASE_READING_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --21. Validation for CAN rule .
       BEGIN
          CUST_ACCT_ID      := CUST_ACCT_ID_CHR;
          --o(l_cle_id||' xxx');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'CAN') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CUST_ACCT_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'CAN'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,CUST_ACCT_ID_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --22. Validation for BTO rule .
       BEGIN
          BILL_TO_SITE_USE_ID      := BILL_TO_SITE_USE_ID_CHR;
          --o(l_cle_id||' xxx');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'BTO') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BILL_TO_SITE_USE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'BTO'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,BILL_TO_SITE_USE_ID_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --23. Validation for IRE rule .
       BEGIN
          INV_RULE_ID      := INV_RULE_ID_CHR;
          --o(l_cle_id||' xxx');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'IRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_INV_RULE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'IRE'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,INV_RULE_ID_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --24. Validation for STO rule .
       BEGIN
          SHIP_TO_SITE_USE_ID      := SHIP_TO_SITE_USE_ID_CHR;
          --o(l_cle_id||' xxx');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'STO') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_SHIP_TO_SITE_USE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'STO'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,SHIP_TO_SITE_USE_ID_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --25. Validation for PTR rule .
       BEGIN
          PAYMENT_TERM_ID      := PAYMENT_TERM_ID_CHR;
          --o(l_cle_id||' xxx');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'PTR') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PAYMENT_TERM_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PTR'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,PAYMENT_TERM_ID_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --26. Validation for CCR rule .
       BEGIN
          L_CC_EXPIRY_DATE      := CC_EXPIRY_DATE_CHR;
          --o(l_cle_id||' xxx');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'CCR') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CC_EXPIRY_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'CCR'    ,'RULE_INFORMATION2'   ,L_ATTRIBUTE_NAME         ,CC_EXPIRY_DATE_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --27. Validation for IBR  rule .
       BEGIN
          IB_TRANS_DATE      := IB_TRANS_DATE_CHR;
          --o(l_cle_id||' xxx');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'IBR') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_IB_TRANS_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'IBR'    ,'RULE_INFORMATION2'   ,L_ATTRIBUTE_NAME         ,IB_TRANS_DATE_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

    --28
       BEGIN
          EXCEPTION_COV_ID      := EXCEPTION_COV_ID_chr;
          --o(l_cle_id||' xxx');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'ECE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EXCEPTION_COV_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'ECE'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,EXCEPTION_COV_ID_chr,
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || EXCEPTION_COV_ID_chr);
	  Eflag:=1;
       END;
--29
       BEGIN
          PM_PROGRAM_ID      := PM_PROGRAM_ID_chr;
          --o(l_cle_id||' xxx');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'PMP') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PM_PROGRAM_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PMP'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,PM_PROGRAM_ID_chr,
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || PM_PROGRAM_ID_chr);
	  Eflag:=1;
       END;
--30
       BEGIN
          PRICE_LIST_ID      := PRICE_LIST_ID_chr;
          --o(l_cle_id||' xxx');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'PRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PRICE_LIST_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PRE'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,PRICE_LIST_ID_chr,
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || PRICE_LIST_ID_chr);
	  Eflag:=1;
       END;
--31
       BEGIN
          RCN_INCIDENT_SEVERITY_ID      := RCN_INCIDENT_SEVERITY_ID_chr;
          --o(l_cle_id||' xxx');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'RCN') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RCN_INCIDENT_SVR_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'RCN'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,RCN_INCIDENT_SEVERITY_ID_chr,
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || RCN_INCIDENT_SEVERITY_ID_chr);
	  Eflag:=1;
       END;
--32
       BEGIN
          RCN_PDF_ID      := RCN_PDF_ID_chr;
          --o(l_cle_id||' xxx');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'RCN') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RCN_PDF_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'RCN'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,RCN_PDF_ID_chr,
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || RCN_PDF_ID_chr);
	  Eflag:=1;
       END;
--33
       BEGIN
          DISCOUNT_AMOUNT      := DISCOUNT_AMOUNT_chr;
          --o(l_cle_id||' xxx');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'LMT') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DISCOUNT_AMOUNT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'LMT'    ,'RULE_INFORMATION2'   ,L_ATTRIBUTE_NAME         ,DISCOUNT_AMOUNT_chr,
                                       L_ERROR_MSG );
         -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || DISCOUNT_AMOUNT_chr);
	  Eflag:=1;
       END;
--34
       BEGIN
          DISCOUNT_PERCENT      := DISCOUNT_PERCENT_chr;
          --o(l_cle_id||' xxx');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'LMT') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DISCOUNT_PERCENT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'LMT'    ,'RULE_INFORMATION4'   ,L_ATTRIBUTE_NAME         ,DISCOUNT_PERCENT_chr,
                                       L_ERROR_MSG );
         -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr);
	  Eflag:=1;
       END;
--35
       BEGIN
          LINE_LIST_PRICE      := LINE_LIST_PRICE_CHR;
          --o(l_cle_id||' xxx');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_LINE_LIST_PRICE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PDL'    ,'RULE_INFORMATION4'   ,L_ATTRIBUTE_NAME         ,LINE_LIST_PRICE_CHR,
                                       L_ERROR_MSG );
         -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr);
	  Eflag:=1;
       END;
--o(l_cle_id||' Done with validation');


End If;

-- End of code to validate data type .


IF Eflag = 1 THEN
   Eflag :=0;
   FND_FILE.PUT_LINE(FND_FILE.LOG ,'Validation failed for rgp_id :'||p_id||' Error Message: '||L_ERROR_MSG);
   Raise VAL_EXCEPTION;
END IF;


If iEflag = 1 THEN
  iEflag := 0;
  FND_FILE.PUT_LINE(FND_FILE.LOG ,'Insert/Update failed for rgp_id :'||p_id||' Error Message: '||Emsg);
  Raise MAIN_EXCEPTION;
End If;


 x_return_status:='S';


EXCEPTION
  WHEN MAIN_EXCEPTION THEN
      FND_FILE.PUT_LINE(FND_FILE.LOG ,SQLCODE );
      FND_FILE.PUT_LINE(FND_FILE.LOG ,SQLERRM );
      L_ERROR_MSG := emsg;
      IF ISQLCODE in ( 1,-1) THEN
         x_return_status:='S';
      Else
         x_return_status:='E';
         Update oks_rule_reprocess
            set errormsg= L_ERROR_MSG
          where rowid=prow_id;
      End If;
  WHEN VAL_EXCEPTION THEN
      L_ERROR_MSG := emsg;
      x_return_status:='E';
      Update oks_rule_reprocess
         set errormsg=L_ERROR_MSG
       where rowid=prow_id;
   WHEN LOCK_EXCEPTION THEN
        L_ERROR_MSG := emsg;
	X_RETURN_STATUS := 'E';
        Update oks_rule_reprocess
           set errormsg=L_ERROR_MSG
         where rowid=prow_id;
	FND_FILE.PUT_LINE(FND_FILE.LOG ,'DML Failed for LOCK '||p_id||'with Error Message '||L_ERROR_MSG);
   WHEN OTHERS THEN
	X_RETURN_STATUS := 'E';
        L_ERROR_MSG := emsg;
        Update oks_rule_reprocess
           set errormsg=L_ERROR_MSG
         where rowid=prow_id;
	FND_FILE.PUT_LINE(FND_FILE.LOG ,'DML Failed for'||p_id||'with Error Message '||L_ERROR_MSG);

END REPROCESS_LINE_RULE;


Procedure REPROCESS_HDR_HIST_RULE(
			    prow_id            in ROWID ,
                            p_id               in NUMBER ,
			    p_major_version    in NUMBER ,
			    p_us_yn           in BOOLEAN,
                            x_return_status    OUT NOCOPY  VARCHAR2)
IS


CHR_ID                    NUMBER ;
DNZ_CHR_ID                NUMBER ;
ACCT_RULE_ID              NUMBER ;
PAYMENT_TYPE              VARCHAR2(2000) ;
CC_NO                     VARCHAR2(2000) ;
CC_EXPIRY_DATE            DATE;
CC_BANK_ACCT_ID           NUMBER ;
CC_AUTH_CODE              VARCHAR2(2000) ;
GRACE_DURATION            NUMBER ;
GRACE_PERIOD              VARCHAR2(2000) ;
EST_REV_PERCENT           NUMBER ;
EST_REV_DATE              DATE;
INVOICE_TEXT              VARCHAR2(2000) ;
INV_PRINT_FLAG            VARCHAR2(2000) ;
PRICE_UOM                 VARCHAR2(2000) ;
TAX_AMOUNT                NUMBER ;
TAX_INCLUSIVE_YN          VARCHAR2(2000) ;
TAX_STATUS                VARCHAR2(2000) ;
TAX_CODE                  NUMBER ;
TAX_EXEMPTION_ID          NUMBER ;
BILLING_SCHEDULE_TYPE     VARCHAR2(2000) ;
CUST_ACCT_ID              NUMBER ;
BILL_TO_SITE_USE_ID       NUMBER ;
INV_RULE_ID               NUMBER ;
L_RENEWAL_TYPE_CODE         VARCHAR2(2000) ;
RENEWAL_NOTIFY_TO         NUMBER ;
RENEWAL_END_DATE          DATE;
SHIP_TO_SITE_USE_ID       NUMBER ;
PAYMENT_TERM_ID           NUMBER ;
BILLING_PROFILE_ID        NUMBER ;
RENEWAL_STATUS            VARCHAR2(2000) ;
ELECTRONIC_RENEWAL_FLAG   VARCHAR2(2000) ;
QUOTE_TO_CONTACT_ID       NUMBER ;
QUOTE_TO_SITE_ID          NUMBER ;
QUOTE_TO_EMAIL_ID         NUMBER ;
QUOTE_TO_PHONE_ID         NUMBER ;
QUOTE_TO_FAX_ID           NUMBER ;
RENEWAL_PO_REQUIRED       VARCHAR2(2000) ;
RENEWAL_PRICE_LIST        NUMBER ;
RENEWAL_PRICING_TYPE      VARCHAR2(2000) ;
RENEWAL_MARKUP_PERCENT    NUMBER ;
RENEWAL_GRACE_DURATION    NUMBER ;
RENEWAL_GRACE_PERIOD      VARCHAR2(2000) ;
RENEWAL_EST_REV_PERCENT   NUMBER ;
RENEWAL_EST_REV_DURATION  NUMBER ;
RENEWAL_EST_REV_PERIOD    VARCHAR2(2000) ;
RENEWAL_PRICE_LIST_USED   NUMBER ;
RENEWAL_TYPE_USED         VARCHAR2(2000) ;
RENEWAL_NOTIFICATION_TO   NUMBER ;
RENEWAL_PO_USED           VARCHAR2(2000) ;
RENEWAL_PRICING_TYPE_USED VARCHAR2(2000) ;
RENEWAL_MARKUP_PERCENT_USED   NUMBER ;
REV_EST_PERCENT_USED      NUMBER ;
REV_EST_DURATION_USED     NUMBER ;
BILLING_PROFILE_USED      NUMBER ;
REV_EST_PERIOD_USED       VARCHAR2(2000) ;
ERN_FLAG_USED_YN          VARCHAR2(2000) ;
EVN_THRESHOLD_AMT         NUMBER ;
EVN_THRESHOLD_CUR         VARCHAR2(2000) ;
ERN_THRESHOLD_AMT         NUMBER ;
ERN_THRESHOLD_CUR         VARCHAR2(2000) ;
RENEWAL_GRACE_DURATION_USED   NUMBER ;
RENEWAL_GRACE_PERIOD_USED VARCHAR2(2000) ;
INV_TRX_TYPE              VARCHAR2(2000) ;
INV_PRINT_PROFILE         VARCHAR2(2000) ;
RENEWAL_PO_NUMBER         VARCHAR2(2000) ;
AR_INTERFACE_YN           VARCHAR2(2000) ;
HOLD_BILLING              VARCHAR2(2000) ;
SUMMARY_TRX_YN            VARCHAR2(2000) ;
SERVICE_PO_NUMBER         VARCHAR2(2000) ;
SERVICE_PO_REQUIRED       VARCHAR2(2000) ;
PRICE_LIST_ID             NUMBER ;
L_CONVERSION_TYPE           VARCHAR2(2000) ;
CONVERSION_RATE           NUMBER ;
CONVERSION_RATE_DATE      DATE;
CONVERSION_EURO_RATE      NUMBER ;



-- FOLLOWING ARE NUMBER FIELDS --
ACCT_RULE_ID_CHR              VARCHAR2(2000) ;
CC_BANK_ACCT_ID_CHR           VARCHAR2(2000) ;
GRACE_DURATION_CHR            VARCHAR2(2000) ;
EST_REV_PERCENT_CHR           VARCHAR2(2000) ;
TAX_AMOUNT_CHR                VARCHAR2(2000) ;
TAX_CODE_CHR                  VARCHAR2(2000) ;
TAX_EXEMPTION_ID_CHR          VARCHAR2(2000) ;
CUST_ACCT_ID_CHR              VARCHAR2(2000) ;
BILL_TO_SITE_USE_ID_CHR       VARCHAR2(2000) ;
INV_RULE_ID_CHR               VARCHAR2(2000) ;
RENEWAL_NOTIFY_TO_CHR         VARCHAR2(2000) ;
SHIP_TO_SITE_USE_ID_CHR       VARCHAR2(2000) ;
PAYMENT_TERM_ID_CHR           VARCHAR2(2000) ;
BILLING_PROFILE_ID_CHR        VARCHAR2(2000) ;
QUOTE_TO_CONTACT_ID_CHR       VARCHAR2(2000) ;
QUOTE_TO_SITE_ID_CHR          VARCHAR2(2000) ;
QUOTE_TO_EMAIL_ID_CHR         VARCHAR2(2000) ;
QUOTE_TO_PHONE_ID_CHR         VARCHAR2(2000) ;
QUOTE_TO_FAX_ID_CHR           VARCHAR2(2000) ;
RENEWAL_PRICE_LIST_CHR        VARCHAR2(2000) ;
RENEWAL_MARKUP_PERCENT_CHR    VARCHAR2(2000) ;
RENEWAL_GRACE_DURATION_CHR    VARCHAR2(2000) ;
RENEWAL_EST_REV_PERCENT_CHR   VARCHAR2(2000) ;
RENEWAL_EST_REV_DURATION_CHR  VARCHAR2(2000) ;
RENEWAL_PRICE_LIST_USED_CHR   VARCHAR2(2000) ;
RENEWAL_NOTIFICATION_TO_CHR   VARCHAR2(2000) ;
RENEWAL_MARKUP_PERCENT_USED_CH VARCHAR2(2000) ;
REV_EST_PERCENT_USED_CHR      VARCHAR2(2000) ;
REV_EST_DURATION_USED_CHR     VARCHAR2(2000) ;
BILLING_PROFILE_USED_CHR      VARCHAR2(2000) ;
EVN_THRESHOLD_AMT_CHR         VARCHAR2(2000) ;
ERN_THRESHOLD_AMT_CHR         VARCHAR2(2000) ;
RENEWAL_GRACE_DURATION_USED_CH VARCHAR2(2000) ;
PRICE_LIST_ID_CHR             VARCHAR2(2000) ;
CONVERSION_RATE_CHR           VARCHAR2(2000) ;
CONVERSION_EURO_RATE_CHR      VARCHAR2(2000) ;

-- FOLLOWING ARE DATE FIELDS --
CC_EXPIRY_DATE_CHR            VARCHAR2(2000) ;
EST_REV_DATE_CHR              VARCHAR2(2000) ;
RENEWAL_END_DATE_CHR          VARCHAR2(2000) ;
CONVERSION_RATE_DATE_CHR      VARCHAR2(2000) ;

--Misc Variables --
L_ATTRIBUTE_NAME              VARCHAR2(2000);
L_ERROR_MSG                   VARCHAR2(2000);

MAIN_EXCEPTION               EXCEPTION;
VAL_EXCEPTION                EXCEPTION;
Eflag                        NUMBER;
Emsg                         VARCHAR2(2000);
iEflag                       NUMBER:=0;
ISQLCODE                     NUMBER;
l_chr_id                     NUMBER;

-------------------------------------------------------------------------------
-- The following is the cursor opened if p_us_yn  is true   --
-------------------------------------------------------------------------------

CURSOR l_hdr_rule_csr (p_id in NUMBER)is
SELECT  RGP.CHR_ID CHR_ID
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),
       --               '!,.','!')                                                           ACCT_RULE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1))                   ACCT_RULE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,'CCR'))                             PAYMENT_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION1))             CC_NO
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,
                  to_date(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                    CC_EXPIRY_DATE
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
       --               '!,.' , '!')                                                         CC_BANK_ACCT_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3))             CC_BANK_ACCT_ID

       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION4))             CC_AUTH_CODE
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
       --               '!,.','!')                                                           GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1))             GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION2))             GRACE_PERIOD
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)),
       --               '!,','!')                                                            EST_REV_PERCENT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1))             EST_REV_PERCENT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,
                    to_date(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                  EST_REV_DATE
       -- Checked in gsidev conversion needed.
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
                      '!,' ,'!' )                                                            TAX_AMOUNT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.RULE_INFORMATION2))             TAX_STATUS
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
                      '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-,. ' , '!')     TAX_CODE
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
       --               '!,.','!')                                                            TAX_EXEMPTION_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1))                   TAX_EXEMPTION_ID
       --,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLH' ,RUL.RULE_INFORMATION1))             BILLING_SCHEDULE_TYPE
       ,decode(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION_CATEGORY)),'QRE','T',
                MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLH' ,RUL.RULE_INFORMATION1)) )   BILLING_SCHEDULE_TYPE
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),
                      '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_- ,.','!')       BILLING_PROFILE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION2))             RENEWAL_STATUS
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION3))             ELECTRONIC_RENEWAL_FLAG
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),
       --               '!,.' ,'!')                                                          QUOTE_TO_CONTACT_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1))                   QUOTE_TO_CONTACT_ID
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT2_ID1)),
       --               '!,.','!')                                                           QUOTE_TO_SITE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4))            QUOTE_TO_SITE_ID
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),
       --               '!,.','!')                                                           QUOTE_TO_EMAIL_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1))             QUOTE_TO_EMAIL_ID
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),
       --               '!,.','!')                                                           QUOTE_TO_PHONE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2))             QUOTE_TO_PHONE_ID
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),
       --               '!,.','!')                                                           QUOTE_TO_FAX_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3))             QUOTE_TO_FAX_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPO' ,RUL.RULE_INFORMATION1))             RENEWAL_PO_REQUIRED
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),
       --               '!,.','!')                                                           RENEWAL_PRICE_LIST
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1))                   RENEWAL_PRICE_LIST
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION1))             RENEWAL_PRICING_TYPE
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),
       --               '!%,' ,'!')                                                          RENEWAL_MARKUP_PERCENT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2))             RENEWAL_MARKUP_PERCENT
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),
       --               '!,.','!')                                                           RENEWAL_GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3))             RENEWAL_GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION4))             RENEWAL_GRACE_PERIOD
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),
       --               '!%,' ,'!')                                                          RENEWAL_EST_REV_PERCENT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1))             RENEWAL_EST_REV_PERCENT
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),
       --               '!,.','!')                                                           RENEWAL_EST_REV_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2))             RENEWAL_EST_REV_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION3))             RENEWAL_EST_REV_PERIOD
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),
       --               '!,.','!')                                                           RENEWAL_PRICE_LIST_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1))                   RENEWAL_PRICE_LIST_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION1))             RENEWAL_TYPE_USED
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),
       --               '!,.','!')                                                           RENEWAL_NOTIFICATION_TO
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2))             RENEWAL_NOTIFICATION_TO
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION3))             RENEWAL_PO_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION4))             RENEWAL_PRICING_TYPE_USED
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),
       --               '!,%' ,'!')                                                          RENEWAL_MARKUP_PERCENT_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5))             RENEWAL_MARKUP_PERCENT_USED
       -- Checked in gsidev conversion needed.
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),
                      '!%,' ,'!')                                                            REV_EST_PERCENT_USED
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),
       --               '!,.','!')                                                           REV_EST_DURATION_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7))             REV_EST_DURATION_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION8))             REV_EST_PERIOD_USED
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),
                      '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,. ','!')        BILLING_PROFILE_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION10))            ERN_FLAG_USED_YN
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),
       --              '!,' ,'!')                                                            EVN_THRESHOLD_AMT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11))            EVN_THRESHOLD_AMT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION12))            EVN_THRESHOLD_CUR
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),
       --              '!,' ,'!')                                                            ERN_THRESHOLD_AMT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13))            ERN_THRESHOLD_AMT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION14))            ERN_THRESHOLD_CUR
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),
       --              '!,.','!')                                                            RENEWAL_GRACE_DURATION_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1))             RENEWAL_GRACE_DURATION_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION2))             RENEWAL_GRACE_PERIOD_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.OBJECT1_ID1))                   INV_TRX_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION9))             INV_PRINT_PROFILE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION10))            RENEWAL_PO_NUMBER
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION11))            AR_INTERFACE_YN
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION12))            HOLD_BILLING
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION13))            SUMMARY_TRX_YN
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SPO' ,RUL.RULE_INFORMATION1))             SERVICE_PO_NUMBER
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SPO' ,RUL.RULE_INFORMATION2))             SERVICE_PO_REQUIRED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.OBJECT1_ID1))                   CONVERSION_TYPE       --OKC
       -- needs translation
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),
                     '!,','!')                                                               CONVERSION_RATE       --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,
                  to_date(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                    CONVERSION_RATE_DATE  --OKC
        -- needs translation
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),
                     '!,','!')                                                               CONVERSION_EURO_RATE  --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                            CUST_ACCT_ID          --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1))                   CUST_ACCT_ID          --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                            BILL_TO_SITE_USE_ID   --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1))                   BILL_TO_SITE_USE_ID   --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                            INV_RULE_ID           --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1))                   INV_RULE_ID           --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION1))             RENEWAL_TYPE_CODE     --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),
       --              '!,.','!')                                                            RENEWAL_NOTIFY_TO     --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2))             RENEWAL_NOTIFY_TO     --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,
                  to_date(RUL.RULE_INFORMATION3,'yyyy/mm/dd hh24:mi:ss')))                    RENEWAL_END_DATE      --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                            SHIP_TO_SITE_USE_ID   --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1))                   SHIP_TO_SITE_USE_ID   --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                            PAYMENT_TERM_ID       --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1))                   PAYMENT_TERM_ID       --OKC

       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),
                     '!,.','!')                                                              PRICE_LIST_ID         --OKC
FROM OKC_RULE_GROUPS_BH RGP
   , OKC_RULES_BH RUL
WHERE rgp.id = rul.rgp_id
  and rul.major_version=rgp.major_version
  and rgp.cle_id is null
  and rgp.rgd_code = 'SVC_K'
  AND   RUL.RULE_INFORMATION_CATEGORY IN
       ('ARL','CCR','GPR','RVE','IRT','TAX','ERN','QTO', 'RPO', 'RPT','RER', 'RRU',
        'RRE', 'SBG', 'SPO','SLH','PRE', 'CVN','CAN', 'BTO', 'IRE', 'REN', 'STO', 'PTR')
  and rgp.RGD_CODE = 'SVC_K'
  and rgp.id =p_id
  and rgp.major_version = p_major_version
  GROUP BY rgp.chr_id;

-------------------------------------------------------------------------------
-- The following is the cursor opened if p_us_yn  is false   --
-------------------------------------------------------------------------------

CURSOR l_hdr_rule_csr_nus (p_id in NUMBER) is
SELECT  RGP.CHR_ID CHR_ID
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),
       --               '!,. ','!')                                                           ACCT_RULE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1))                   ACCT_RULE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,'CCR'))                             PAYMENT_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION1))             CC_NO
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,
                  to_date(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                    CC_EXPIRY_DATE
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
       --               '!,. ' , '!')                                                         CC_BANK_ACCT_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3))             CC_BANK_ACCT_ID

       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION4))             CC_AUTH_CODE
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
       --               '!,. ','!')                                                           GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1))             GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION2))             GRACE_PERIOD
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)),
       --               '!. ','!')                                                            EST_REV_PERCENT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1))             EST_REV_PERCENT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,
                    to_date(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                  EST_REV_DATE
       -- Checked in gsidev conversion needed.
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
                      '!. ' ,'!' )                                                            TAX_AMOUNT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.RULE_INFORMATION2))             TAX_STATUS
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
                      '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-,. ' , '!')     TAX_CODE
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
       --               '!,. ','!')                                                           TAX_EXEMPTION_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1))                   TAX_EXEMPTION_ID
       --,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLH' ,RUL.RULE_INFORMATION1))             BILLING_SCHEDULE_TYPE
       ,decode(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION_CATEGORY)),'QRE','T',
                MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLH' ,RUL.RULE_INFORMATION1)) )   BILLING_SCHEDULE_TYPE
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),
                      '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-,. ','!')       BILLING_PROFILE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION2))             RENEWAL_STATUS
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION3))             ELECTRONIC_RENEWAL_FLAG
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),
       --               '!,. ' ,'!')                                                          QUOTE_TO_CONTACT_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1))                   QUOTE_TO_CONTACT_ID
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT2_ID1)),
       --               '!,. ','!')                                                           QUOTE_TO_SITE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4))             QUOTE_TO_SITE_ID
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),
       --               '!,. ','!')                                                           QUOTE_TO_EMAIL_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1))             QUOTE_TO_EMAIL_ID
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),
       --               '!,. ','!')                                                           QUOTE_TO_PHONE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2))             QUOTE_TO_PHONE_ID
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),
       --               '!,. ','!')                                                           QUOTE_TO_FAX_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3))             QUOTE_TO_FAX_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPO' ,RUL.RULE_INFORMATION1))             RENEWAL_PO_REQUIRED
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),
       --               '!,. ','!')                                                           RENEWAL_PRICE_LIST
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1))                   RENEWAL_PRICE_LIST
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION1))             RENEWAL_PRICING_TYPE
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),
       --               '!%. ' ,'!')                                                          RENEWAL_MARKUP_PERCENT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2))             RENEWAL_MARKUP_PERCENT
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),
       --               '!,. ','!')                                                           RENEWAL_GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3))             RENEWAL_GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION4))             RENEWAL_GRACE_PERIOD
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),
       --               '!%. ' ,'!')                                                          RENEWAL_EST_REV_PERCENT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1))             RENEWAL_EST_REV_PERCENT
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),
       --               '!,. ','!')                                                           RENEWAL_EST_REV_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2))             RENEWAL_EST_REV_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION3))             RENEWAL_EST_REV_PERIOD
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),
       --               '!,. ','!')                                                           RENEWAL_PRICE_LIST_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1))                   RENEWAL_PRICE_LIST_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION1))             RENEWAL_TYPE_USED
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),
       --               '!,. ','!')                                                           RENEWAL_NOTIFICATION_TO
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2))             RENEWAL_NOTIFICATION_TO
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION3))             RENEWAL_PO_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION4))             RENEWAL_PRICING_TYPE_USED
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),
       --               '!. %' ,'!')                                                          RENEWAL_MARKUP_PERCENT_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5))             RENEWAL_MARKUP_PERCENT_USED
       -- Checked in gsidev conversion needed.
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),
                      '!%. ' ,'!')                                                            REV_EST_PERCENT_USED
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),
       --               '!,. ','!')                                                           REV_EST_DURATION_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7))             REV_EST_DURATION_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION8))             REV_EST_PERIOD_USED
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),
                      '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,. ','!')        BILLING_PROFILE_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION10))            ERN_FLAG_USED_YN
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),
       --              '!. ' ,'!')                                                            EVN_THRESHOLD_AMT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11))            EVN_THRESHOLD_AMT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION12))            EVN_THRESHOLD_CUR
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),
       --              '!. ' ,'!')                                                            ERN_THRESHOLD_AMT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13))            ERN_THRESHOLD_AMT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION14))            ERN_THRESHOLD_CUR
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),
       --              '!,. ','!')                                                            RENEWAL_GRACE_DURATION_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1))             RENEWAL_GRACE_DURATION_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION2))             RENEWAL_GRACE_PERIOD_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.OBJECT1_ID1))                   INV_TRX_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION9))             INV_PRINT_PROFILE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION10))            RENEWAL_PO_NUMBER
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION11))            AR_INTERFACE_YN
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION12))            HOLD_BILLING
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION13))            SUMMARY_TRX_YN
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SPO' ,RUL.RULE_INFORMATION1))             SERVICE_PO_NUMBER
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SPO' ,RUL.RULE_INFORMATION2))             SERVICE_PO_REQUIRED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.OBJECT1_ID1))                   CONVERSION_TYPE       --OKC
       -- needs translation
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),
                     '!. ','!')                                                               CONVERSION_RATE       --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,
                  to_date(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                    CONVERSION_RATE_DATE  --OKC
        -- needs translation
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),
                     '!. ','!')                                                               CONVERSION_EURO_RATE  --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                            CUST_ACCT_ID          --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1))                   CUST_ACCT_ID          --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                            BILL_TO_SITE_USE_ID   --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1))                   BILL_TO_SITE_USE_ID   --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                            INV_RULE_ID           --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1))                   INV_RULE_ID           --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION1))             RENEWAL_TYPE_CODE     --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),
       --              '!,. ','!')                                                            RENEWAL_NOTIFY_TO     --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2))             RENEWAL_NOTIFY_TO     --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,
                  to_date(RUL.RULE_INFORMATION3,'yyyy/mm/dd hh24:mi:ss')))                    RENEWAL_END_DATE      --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                            SHIP_TO_SITE_USE_ID   --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1))                   SHIP_TO_SITE_USE_ID   --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                            PAYMENT_TERM_ID       --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1))                   PAYMENT_TERM_ID       --OKC

       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),
                     '!,. ','!')                                                              PRICE_LIST_ID         --OKC
FROM OKC_RULE_GROUPS_B RGP
   , OKC_RULES_B RUL
WHERE rgp.id = rul.rgp_id
  and rgp.cle_id is null
  and rgp.rgd_code = 'SVC_K'
  AND   RUL.RULE_INFORMATION_CATEGORY IN
       ('ARL','CCR','GPR','RVE','IRT','TAX','ERN','QTO', 'RPO', 'RPT','RER', 'RRU',
        'RRE', 'SBG', 'SPO','SLH','PRE', 'CVN','CAN', 'BTO', 'IRE', 'REN', 'STO', 'PTR')
  and rgp.RGD_CODE = 'SVC_K'
  and rgp.id =p_id
  GROUP BY rgp.chr_id;



----------------------------------------------------------------------------
-- Cursor to populate data in OKS_RULE_ERROR table .                      --
----------------------------------------------------------------------------
CURSOR L_HDR_DTLS_CSR ( P_HDR_ID  IN NUMBER , P_CATEGORY IN VARCHAR2 ) IS
SELECT HDR.CONTRACT_NUMBER
     , HDR.CONTRACT_NUMBER_MODIFIER
     , RUL.MAJOR_VERSION
     , RUL.ID
     , RGP.ID RGP_ID
 FROM  OKC_K_HEADERS_BH HDR
     , OKC_RULE_GROUPS_BH RGP
     , OKC_RULES_BH RUL
WHERE HDR.ID = P_HDR_ID
  AND RGP.DNZ_CHR_ID = P_HDR_ID
  AND RGP.CHR_ID = P_HDR_ID
  AND RGP.ID = RUL.RGP_ID
  AND RGP.DNZ_CHR_ID = RUL.DNZ_CHR_ID
  AND HDR.major_version = Rgp.major_version
  and Rgp.major_version = RUL.major_version
  AND RUL.major_version = p_major_version
  AND RUL.RULE_INFORMATION_CATEGORY = P_CATEGORY ;

L_HDR_DTLS_REC L_HDR_DTLS_CSR%ROWTYPE;
----------------------------------------------------------------------------
--Cursor to check whether the record exists in OKC_RULE_GROUPS_BH table.
----------------------------------------------------------------------------
CURSOR L_CHECK_RGP_CSR ( P_ID IN NUMBER , P_MAJOR_VERSION IN NUMBER ) IS
SELECT CHR_ID
  FROM OKC_RULE_GROUPS_BH
 WHERE ID = P_ID
   AND MAJOR_VERSION = P_MAJOR_VERSION;
----------------------------------------------------------------------------


BEGIN
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'--------------Start of Sub request for Header History Rule Data Reprocessing--------');
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');

DBMS_TRANSACTION.SAVEPOINT('BEFORE_TRANSACTION');


if(p_us_yn) THEN
    OPEN l_hdr_rule_csr(p_id);
    FETCH l_hdr_rule_csr into
                          CHR_ID
                        ,ACCT_RULE_ID_CHR
                        ,PAYMENT_TYPE
                        ,CC_NO
                        ,CC_EXPIRY_DATE_CHR
                        ,CC_BANK_ACCT_ID_CHR
                        ,CC_AUTH_CODE
                        ,GRACE_DURATION_CHR
                        ,GRACE_PERIOD
                        ,EST_REV_PERCENT_CHR
                        ,EST_REV_DATE_CHR
                        ,TAX_AMOUNT_CHR
                        ,TAX_STATUS
                        ,TAX_CODE_CHR
                        ,TAX_EXEMPTION_ID_CHR
                        ,BILLING_SCHEDULE_TYPE
                        ,BILLING_PROFILE_ID_CHR
                        ,RENEWAL_STATUS
                        ,ELECTRONIC_RENEWAL_FLAG
                        ,QUOTE_TO_CONTACT_ID_CHR
                        ,QUOTE_TO_SITE_ID_CHR
                        ,QUOTE_TO_EMAIL_ID_CHR
                        ,QUOTE_TO_PHONE_ID_CHR
                        ,QUOTE_TO_FAX_ID_CHR
                        ,RENEWAL_PO_REQUIRED
                        ,RENEWAL_PRICE_LIST_CHR
                        ,RENEWAL_PRICING_TYPE
                        ,RENEWAL_MARKUP_PERCENT_CHR
                        ,RENEWAL_GRACE_DURATION_CHR
                        ,RENEWAL_GRACE_PERIOD
                        ,RENEWAL_EST_REV_PERCENT_CHR
                        ,RENEWAL_EST_REV_DURATIOn_CHR
                        ,RENEWAL_EST_REV_PERIOD
                        ,RENEWAL_PRICE_LIST_USED_CHR
                        ,RENEWAL_TYPE_USED
                        ,RENEWAL_NOTIFICATION_TO_CHR
                        ,RENEWAL_PO_USED
                        ,RENEWAL_PRICING_TYPE_USED
                        ,RENEWAL_MARKUP_PERCENT_USED_CH
                        ,REV_EST_PERCENT_USED_CHR
                        ,REV_EST_DURATION_USED_CHR
                        ,REV_EST_PERIOD_USED
                        ,BILLING_PROFILE_USED_CHR
                        ,ERN_FLAG_USED_YN
                        ,EVN_THRESHOLD_AMT_CHR
                        ,EVN_THRESHOLD_CUR
                        ,ERN_THRESHOLD_AMT_CHR
                        ,ERN_THRESHOLD_CUR
                        ,RENEWAL_GRACE_DURATION_USED_CH
                        ,RENEWAL_GRACE_PERIOD_USED
                        ,INV_TRX_TYPE
                        ,INV_PRINT_PROFILE
                        ,RENEWAL_PO_NUMBER
                        ,AR_INTERFACE_YN
                        ,HOLD_BILLING
                        ,SUMMARY_TRX_YN
                        ,SERVICE_PO_NUMBER
                        ,SERVICE_PO_REQUIRED
                        ,L_CONVERSION_TYPE                 --OKC
                        ,CONVERSION_RATE_CHR              --OKC
                        ,CONVERSION_RATE_DATE_CHR         --OKC
                        ,CONVERSION_EURO_RATE_CHR         --OKC
                        ,CUST_ACCT_ID_CHR                 --OKC
                        ,BILL_TO_SITE_USE_ID_CHR          --OKC
                        ,INV_RULE_ID_CHR                  --OKC
                        ,L_RENEWAL_TYPE_CODE                --OKC
                        ,RENEWAL_NOTIFY_TO_CHR            --OKC
                        ,RENEWAL_END_DATE_CHR             --OKC
                        ,SHIP_TO_SITE_USE_ID_CHR          --OKC
                        ,PAYMENT_TERM_ID_CHR              --OKC
                        ,PRICE_LIST_ID_CHR  ;             --OKC

      close l_hdr_rule_csr;
else
    OPEN l_hdr_rule_csr_nus(p_id);
    FETCH l_hdr_rule_csr_nus into
                          CHR_ID
                        ,ACCT_RULE_ID_CHR
                        ,PAYMENT_TYPE
                        ,CC_NO
                        ,CC_EXPIRY_DATE_CHR
                        ,CC_BANK_ACCT_ID_CHR
                        ,CC_AUTH_CODE
                        ,GRACE_DURATION_CHR
                        ,GRACE_PERIOD
                        ,EST_REV_PERCENT_CHR
                        ,EST_REV_DATE_CHR
                        ,TAX_AMOUNT_CHR
                        ,TAX_STATUS
                        ,TAX_CODE_CHR
                        ,TAX_EXEMPTION_ID_CHR
                        ,BILLING_SCHEDULE_TYPE
                        ,BILLING_PROFILE_ID_CHR
                        ,RENEWAL_STATUS
                        ,ELECTRONIC_RENEWAL_FLAG
                        ,QUOTE_TO_CONTACT_ID_CHR
                        ,QUOTE_TO_SITE_ID_CHR
                        ,QUOTE_TO_EMAIL_ID_CHR
                        ,QUOTE_TO_PHONE_ID_CHR
                        ,QUOTE_TO_FAX_ID_CHR
                        ,RENEWAL_PO_REQUIRED
                        ,RENEWAL_PRICE_LIST_CHR
                        ,RENEWAL_PRICING_TYPE
                        ,RENEWAL_MARKUP_PERCENT_CHR
                        ,RENEWAL_GRACE_DURATION_CHR
                        ,RENEWAL_GRACE_PERIOD
                        ,RENEWAL_EST_REV_PERCENT_CHR
                        ,RENEWAL_EST_REV_DURATIOn_CHR
                        ,RENEWAL_EST_REV_PERIOD
                        ,RENEWAL_PRICE_LIST_USED_CHR
                        ,RENEWAL_TYPE_USED
                        ,RENEWAL_NOTIFICATION_TO_CHR
                        ,RENEWAL_PO_USED
                        ,RENEWAL_PRICING_TYPE_USED
                        ,RENEWAL_MARKUP_PERCENT_USED_CH
                        ,REV_EST_PERCENT_USED_CHR
                        ,REV_EST_DURATION_USED_CHR
                        ,REV_EST_PERIOD_USED
                        ,BILLING_PROFILE_USED_CHR
                        ,ERN_FLAG_USED_YN
                        ,EVN_THRESHOLD_AMT_CHR
                        ,EVN_THRESHOLD_CUR
                        ,ERN_THRESHOLD_AMT_CHR
                        ,ERN_THRESHOLD_CUR
                        ,RENEWAL_GRACE_DURATION_USED_CH
                        ,RENEWAL_GRACE_PERIOD_USED
                        ,INV_TRX_TYPE
                        ,INV_PRINT_PROFILE
                        ,RENEWAL_PO_NUMBER
                        ,AR_INTERFACE_YN
                        ,HOLD_BILLING
                        ,SUMMARY_TRX_YN
                        ,SERVICE_PO_NUMBER
                        ,SERVICE_PO_REQUIRED
                        ,L_CONVERSION_TYPE                 --OKC
                        ,CONVERSION_RATE_CHR              --OKC
                        ,CONVERSION_RATE_DATE_CHR         --OKC
                        ,CONVERSION_EURO_RATE_CHR         --OKC
                        ,CUST_ACCT_ID_CHR                 --OKC
                        ,BILL_TO_SITE_USE_ID_CHR          --OKC
                        ,INV_RULE_ID_CHR                  --OKC
                        ,L_RENEWAL_TYPE_CODE                --OKC
                        ,RENEWAL_NOTIFY_TO_CHR            --OKC
                        ,RENEWAL_END_DATE_CHR             --OKC
                        ,SHIP_TO_SITE_USE_ID_CHR          --OKC
                        ,PAYMENT_TERM_ID_CHR              --OKC
                        ,PRICE_LIST_ID_CHR  ;             --OKC

      close l_hdr_rule_csr_nus;
end if;

      Eflag :=0;
      iEflag :=0;


if(CHR_ID  is not null) then
--Attempting to insert records first
--as OKS_RULE_REPROCESS might have many  records with no data issue

  BEGIN
     INSERT INTO oks_k_headers_bh(
        ID
      ,MAJOR_VERSION
      ,CHR_ID
      ,ACCT_RULE_ID
      ,PAYMENT_TYPE
      ,CC_NO
      ,CC_EXPIRY_DATE
      ,CC_BANK_ACCT_ID
      ,CC_AUTH_CODE
      ,GRACE_DURATION
      ,GRACE_PERIOD
      ,EST_REV_PERCENT
      ,EST_REV_DATE
      ,TAX_AMOUNT
      ,TAX_STATUS
      ,TAX_CODE
      ,TAX_EXEMPTION_ID
      ,BILLING_SCHEDULE_TYPE
      ,BILLING_PROFILE_ID
      ,RENEWAL_STATUS
      ,ELECTRONIC_RENEWAL_FLAG
      ,QUOTE_TO_CONTACT_ID
      ,QUOTE_TO_SITE_ID
      ,QUOTE_TO_EMAIL_ID
      ,QUOTE_TO_PHONE_ID
      ,QUOTE_TO_FAX_ID
      ,RENEWAL_PO_REQUIRED
      ,RENEWAL_PRICE_LIST
      ,RENEWAL_PRICING_TYPE
      ,RENEWAL_MARKUP_PERCENT
      ,RENEWAL_GRACE_DURATION
      ,RENEWAL_GRACE_PERIOD
      ,RENEWAL_EST_REV_PERCENT
      ,RENEWAL_EST_REV_DURATION
      ,RENEWAL_EST_REV_PERIOD
      ,RENEWAL_PRICE_LIST_USED
      ,RENEWAL_TYPE_USED
      ,RENEWAL_NOTIFICATION_TO
      ,RENEWAL_PO_USED
      ,RENEWAL_PRICING_TYPE_USED
      ,RENEWAL_MARKUP_PERCENT_USED
      ,REV_EST_PERCENT_USED
      ,REV_EST_DURATION_USED
      ,REV_EST_PERIOD_USED
      ,BILLING_PROFILE_USED
      ,ERN_FLAG_USED_YN
      ,EVN_THRESHOLD_AMT
      ,EVN_THRESHOLD_CUR
      ,ERN_THRESHOLD_AMT
      ,ERN_THRESHOLD_CUR
      ,RENEWAL_GRACE_DURATION_USED
      ,RENEWAL_GRACE_PERIOD_USED
      ,INV_TRX_TYPE
      ,INV_PRINT_PROFILE
      ,RENEWAL_PO_NUMBER
      ,AR_INTERFACE_YN
      ,HOLD_BILLING
      ,SUMMARY_TRX_YN
      ,SERVICE_PO_NUMBER
      ,SERVICE_PO_REQUIRED
      ,CREATED_BY
      ,CREATION_DATE
      ,LAST_UPDATED_BY
      ,LAST_UPDATE_DATE
      ,LAST_UPDATE_LOGIN
      ,OBJECT_VERSION_NUMBER  )
    VALUES (
       CHR_ID
      ,P_MAJOR_VERSION
      ,CHR_ID
      ,ACCT_RULE_ID_CHR
      ,PAYMENT_TYPE
      ,CC_NO
      ,CC_EXPIRY_DATE_CHR
      ,CC_BANK_ACCT_ID_CHR
      ,CC_AUTH_CODE
      ,GRACE_DURATION_CHR
      ,GRACE_PERIOD
      ,EST_REV_PERCENT_CHR
      ,EST_REV_DATE_CHR
      ,TAX_AMOUNT_CHR
      ,TAX_STATUS
      ,TAX_CODE_CHR
      ,TAX_EXEMPTION_ID_CHR
      ,BILLING_SCHEDULE_TYPE
      ,BILLING_PROFILE_ID_CHR
      ,RENEWAL_STATUS
      ,ELECTRONIC_RENEWAL_FLAG
      ,QUOTE_TO_CONTACT_ID_CHR
      ,QUOTE_TO_SITE_ID_CHR
      ,QUOTE_TO_EMAIL_ID_CHR
      ,QUOTE_TO_PHONE_ID_CHR
      ,QUOTE_TO_FAX_ID_CHR
      ,RENEWAL_PO_REQUIRED
      ,RENEWAL_PRICE_LIST_CHR
      ,RENEWAL_PRICING_TYPE
      ,RENEWAL_MARKUP_PERCENT_CHR
      ,RENEWAL_GRACE_DURATION_CHR
      ,RENEWAL_GRACE_PERIOD
      ,RENEWAL_EST_REV_PERCENT_CHR
      ,RENEWAL_EST_REV_DURATIOn_CHR
      ,RENEWAL_EST_REV_PERIOD
      ,RENEWAL_PRICE_LIST_USED_CHR
      ,RENEWAL_TYPE_USED
      ,RENEWAL_NOTIFICATION_TO_CHR
      ,RENEWAL_PO_USED
      ,RENEWAL_PRICING_TYPE_USED
      ,RENEWAL_MARKUP_PERCENT_USED_CH
      ,REV_EST_PERCENT_USED_CHR
      ,REV_EST_DURATION_USED_CHR
      ,REV_EST_PERIOD_USED
      ,BILLING_PROFILE_USED_CHR
      ,ERN_FLAG_USED_YN
      ,EVN_THRESHOLD_AMT_CHR
      ,EVN_THRESHOLD_CUR
      ,ERN_THRESHOLD_AMT_CHR
      ,ERN_THRESHOLD_CUR
      ,RENEWAL_GRACE_DURATION_USED_CH
      ,RENEWAL_GRACE_PERIOD_USED
      ,INV_TRX_TYPE
      ,INV_PRINT_PROFILE
      ,RENEWAL_PO_NUMBER
      ,AR_INTERFACE_YN
      ,HOLD_BILLING
      ,SUMMARY_TRX_YN
      ,SERVICE_PO_NUMBER
      ,SERVICE_PO_REQUIRED
      ,1
      ,SYSDATE
      ,1
      ,SYSDATE
      ,2003
      ,1   );

 EXCEPTION When others then
   iEflag:=1;
   Emsg :=SQLERRM;
   ISQLCODE := SQLCODE;
 END;
ELSE
    BEGIN
    OPEN  L_CHECK_RGP_CSR(P_ID,P_MAJOR_VERSION);
    FETCH L_CHECK_RGP_CSR INTO L_CHR_ID;
    CLOSE L_CHECK_RGP_CSR;

    if(l_chr_id is not null) then
      INSERT INTO OKS_K_HEADERS_BH OKS1
	    ( OKS1.ID
	    ,OKS1.MAJOR_VERSION
	    ,OKS1.CHR_ID
	    ,OKS1.OBJECT_VERSION_NUMBER
	    ,OKS1.CREATED_BY
	    ,OKS1.CREATION_DATE
	    ,OKS1.LAST_UPDATED_BY
	    ,OKS1.LAST_UPDATE_DATE
	    ,OKS1.LAST_UPDATE_LOGIN )
	    values
	    ( l_chr_id,
              p_major_version,
              l_chr_id,
              1,
              1,
              SYSDATE,
              1,
              SYSDATE,
              2003
	    );
    end if;
    EXCEPTION When others then
      iEflag:=1;
      Emsg :=SQLERRM;
      ISQLCODE := SQLCODE;
    END;
 END IF;


--If insert successful then go for update

if(iEflag = 0) THEN

  BEGIN
    UPDATE okc_k_headers_bh SET
          CONVERSION_TYPE          =  L_CONVERSION_TYPE ,
          CONVERSION_RATE          =  CONVERSION_RATE_CHR ,
          CONVERSION_RATE_DATE     =  CONVERSION_RATE_DATE_CHR  ,
          CONVERSION_EURO_RATE     =  CONVERSION_EURO_RATE_CHR  ,
          CUST_ACCT_ID             =  CUST_ACCT_ID_CHR  ,
          BILL_TO_SITE_USE_ID      =  BILL_TO_SITE_USE_ID_CHR   ,
          INV_RULE_ID              =  INV_RULE_ID_CHR   ,
          RENEWAL_TYPE_CODE        =  L_RENEWAL_TYPE_CODE ,
          RENEWAL_NOTIFY_TO        =  RENEWAL_NOTIFY_TO_CHR  ,
          RENEWAL_END_DATE         =  RENEWAL_END_DATE_CHR   ,
          SHIP_TO_SITE_USE_ID      =  SHIP_TO_SITE_USE_ID_CHR  ,
          PAYMENT_TERM_ID          =  PAYMENT_TERM_ID_CHR   ,
          PRICE_LIST_ID            =  PRICE_LIST_ID_CHR
     WHERE id = chr_id
     and   major_version = P_MAJOR_VERSION;

     EXCEPTION When others then
          iEflag:=1;
	  Emsg :=SQLERRM;
  END;

End If;


    ------------------------------------------------------------------------------------
    --If insert or update failed then need to validate
    -- Begin of code to validate data type .
    -- If data fails validation then set the Eflag to 1

if( iEflag = 1) THEN

       DBMS_TRANSACTION.ROLLBACK_SAVEPOINT('BEFORE_TRANSACTION');

       --1. Validation for ARL rule .
       BEGIN
          ACCT_RULE_ID      := ACCT_RULE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'ARL') ;
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_ACCT_RULE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'ARL'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         , ACCT_RULE_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --2. Validation for CCR rule .
       BEGIN
          CC_BANK_ACCT_ID      := CC_BANK_ACCT_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'CCR') ;
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CC_BANK_ACCT_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'CCR'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , CC_BANK_ACCT_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --3. Validation for GPR rule .
       BEGIN
          GRACE_DURATION    := GRACE_DURATION_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'GPR') ;
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_GRACE_DURATION');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'GPR'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , GRACE_DURATION_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --4. Validation for RVE rule .
       BEGIN
          EST_REV_PERCENT      := EST_REV_PERCENT_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'RVE') ;
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EST_REV_PERCENT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'RVE'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , EST_REV_PERCENT_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --5. Validation for IRT rule.
       BEGIN
          TAX_AMOUNT      := TAX_AMOUNT_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'IRT') ;
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_AMOUNT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'IRT'  ,'RULE_INFORMATION4'    ,L_ATTRIBUTE_NAME         , TAX_AMOUNT_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --6. Validation for TAX (TAX_CODE) rule.
       BEGIN
          TAX_CODE      := TAX_CODE_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'TAX') ;
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_CODE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'TAX'  ,'OBJECT2_ID1'    ,L_ATTRIBUTE_NAME         , TAX_CODE_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --7. Validation for TAX (TAX_EXEMPTION_ID) rule.
       BEGIN
          TAX_EXEMPTION_ID      := TAX_EXEMPTION_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'TAX');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_EXEMPTION_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'TAX'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , TAX_EXEMPTION_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;


       --8. Validation for CAN  rule.
       BEGIN
          CUST_ACCT_ID      := CUST_ACCT_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'CAN');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CUST_ACCT_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'CAN'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , CUST_ACCT_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --9. Validation for BTO  rule.
       BEGIN
          BILL_TO_SITE_USE_ID      := BILL_TO_SITE_USE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'BTO');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BILL_TO_SITE_USE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'BTO'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , BILL_TO_SITE_USE_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;


       --10. Validation for IRE  rule.
       BEGIN
          INV_RULE_ID      := INV_RULE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'IRE');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_INV_RULE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'IRE'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , INV_RULE_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --11. Validation for REN ( RENEWAL_NOTIFY_TO )  rule.
       BEGIN
          RENEWAL_NOTIFY_TO      := RENEWAL_NOTIFY_TO_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'IRE');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_NOTIFY_TO');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'REN'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_NOTIFY_TO_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --12. Validation for STO rule.
       BEGIN
          SHIP_TO_SITE_USE_ID      := SHIP_TO_SITE_USE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'STO');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_SHIP_TO_SITE_USE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'STO'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , SHIP_TO_SITE_USE_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --13. Validation for PTR rule.
       BEGIN
          PAYMENT_TERM_ID      := PAYMENT_TERM_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'PTR');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PAYMENT_TERM_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'PTR'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , PAYMENT_TERM_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --14. Validation for ERN rule.
       BEGIN
          BILLING_PROFILE_ID      := BILLING_PROFILE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'ERN');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BILLING_PROFILE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'ERN'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , BILLING_PROFILE_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;


       --15. Validation for QTO ( QUOTE_TO_CONTACT_ID )rule.
       BEGIN
          QUOTE_TO_CONTACT_ID      := QUOTE_TO_CONTACT_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'QTO');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_CONTACT_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'QTO'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_CONTACT_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --16. Validation for QTO ( QUOTE_TO_SITE_ID ) rule.
       BEGIN
          QUOTE_TO_SITE_ID      := QUOTE_TO_SITE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'QTO');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_SITE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'QTO'  ,'RULE_INFORMATION4'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_SITE_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --17. Validation for QTO ( QUOTE_TO_EMAIL_ID ) rule.
       BEGIN
          QUOTE_TO_EMAIL_ID      := QUOTE_TO_EMAIL_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'QTO');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_EMAIL_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'QTO'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_EMAIL_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --18. Validation for QTO ( QUOTE_TO_PHONE_ID ) rule.
       BEGIN
          QUOTE_TO_PHONE_ID      := QUOTE_TO_PHONE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'QTO');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_PHONE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'QTO'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_PHONE_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --19. Validation for QTO ( QUOTE_TO_FAX_ID ) rule.
       BEGIN
          QUOTE_TO_FAX_ID      := QUOTE_TO_FAX_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'QTO');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_FAX_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'QTO'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_FAX_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --20. Validation for RPT ( RENEWAL_PRICE_LIST ) rule.
       BEGIN
          RENEWAL_PRICE_LIST      := RENEWAL_PRICE_LIST_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'RPT');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_PRICE_LIST');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'RPT'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , RENEWAL_PRICE_LIST_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --21. Validation for RPT ( RENEWAL_MARKUP_PERCENT ) rule.
       BEGIN
          RENEWAL_MARKUP_PERCENT      := RENEWAL_MARKUP_PERCENT_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'RPT');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_MARKUP_PERCENT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'RPT'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_MARKUP_PERCENT_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --22. Validation for RPT ( RENEWAL_GRACE_DURATION ) rule.
       BEGIN
          RENEWAL_GRACE_DURATION      := RENEWAL_GRACE_DURATION_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'RPT');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_GRACE_DURATION');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'RPT'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , RENEWAL_GRACE_DURATION_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --23. Validation for RER ( RENEWAL_EST_REV_PERCENT ) rule.
       BEGIN
          RENEWAL_EST_REV_PERCENT      := RENEWAL_EST_REV_PERCENT_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'RER');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_EREV_PERCENT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'RER'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , RENEWAL_EST_REV_PERCENT_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --24. Validation for RER ( RENEWAL_EST_REV_DURATION ) rule.
       BEGIN
          RENEWAL_EST_REV_DURATION      := RENEWAL_EST_REV_DURATION_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'RER');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_EREV_DURATION');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'RER'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_EST_REV_DURATION_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --25. Validation for RRU ( RENEWAL_PRICE_LIST_USED ) rule.
       BEGIN
          RENEWAL_PRICE_LIST_USED      := RENEWAL_PRICE_LIST_USED_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_PRICE_LIST_U');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'RRU'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , RENEWAL_PRICE_LIST_USED_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --26. Validation for RRU ( RENEWAL_NOTIFICATION_TO ) rule.
       BEGIN
          RENEWAL_NOTIFICATION_TO      := RENEWAL_NOTIFICATION_TO_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_NOTIFICATION');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'RRU'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_NOTIFICATION_TO_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --27. Validation for RRU ( RENEWAL_NOTIFICATION_TO ) rule.
       BEGIN
          RENEWAL_MARKUP_PERCENT_USED      := RENEWAL_MARKUP_PERCENT_USED_CH;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_MPERCENT_U');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'RRU'  ,'RULE_INFORMATION5'    ,L_ATTRIBUTE_NAME         , RENEWAL_MARKUP_PERCENT_USED_CH,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --28. Validation for RRU ( REV_EST_PERCENT_USED ) rule.
       BEGIN
          REV_EST_PERCENT_USED      := REV_EST_PERCENT_USED_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_REV_EST_PERCENT_U');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'RRU'  ,'RULE_INFORMATION6'    ,L_ATTRIBUTE_NAME         , REV_EST_PERCENT_USED_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --29. Validation for RRU ( REV_EST_DURATION_USED ) rule.
       BEGIN
          REV_EST_DURATION_USED      := REV_EST_DURATION_USED_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_REV_EST_DURATION_U');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'RRU'  ,'RULE_INFORMATION7'    ,L_ATTRIBUTE_NAME         , REV_EST_DURATION_USED_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --30. Validation for RRU ( BILLING_PROFILE_USED ) rule.
       BEGIN
          BILLING_PROFILE_USED      := BILLING_PROFILE_USED_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BILLING_PROFILE_U');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'RRU'  ,'RULE_INFORMATION9'    ,L_ATTRIBUTE_NAME         , BILLING_PROFILE_USED_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --31. Validation for RRU ( EVN_THRESHOLD_AMT ) rule.
       BEGIN
          EVN_THRESHOLD_AMT      := EVN_THRESHOLD_AMT_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EVN_THRESHOLD_AMT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'RRU'  ,'RULE_INFORMATION11'    ,L_ATTRIBUTE_NAME         , EVN_THRESHOLD_AMT_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --32. Validation for RRU ( ERN_THRESHOLD_AMT ) rule.
       BEGIN
          ERN_THRESHOLD_AMT      := ERN_THRESHOLD_AMT_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_ERN_THRESHOLD_AMT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'RRU'  ,'RULE_INFORMATION13'    ,L_ATTRIBUTE_NAME         , ERN_THRESHOLD_AMT_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --33. Validation for RRE ( RENEWAL_GRACE_DURATION_USED ) rule.
       BEGIN
          RENEWAL_GRACE_DURATION_USED      := RENEWAL_GRACE_DURATION_USED_CH;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'RRE');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_GDURATION_U');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'RRE'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , RENEWAL_GRACE_DURATION_USED_CH,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --34. Validation for PRE ( PRICE_LIST_ID ) rule.
       BEGIN
          PRICE_LIST_ID      := PRICE_LIST_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'PRE');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PRICE_LIST_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'PRE'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , PRICE_LIST_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --35. Validation for CVN ( CONVERSION_RATE ) rule.
       BEGIN
          CONVERSION_RATE      := CONVERSION_RATE_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'CVN');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CONVERSION_RATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'CVN'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , CONVERSION_RATE_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --36. Validation for CVN ( CONVERSION_EURO_RATE ) rule.
       BEGIN
          CONVERSION_EURO_RATE      := CONVERSION_EURO_RATE_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'CVN');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CONVERSION_EURO_RATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'CVN'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , CONVERSION_EURO_RATE_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --37. Validation for CCR ( CC_EXPIRY_DATE ) rule.
       BEGIN
          CC_EXPIRY_DATE      := to_date(CC_EXPIRY_DATE_CHR,'yyyy/mm/dd hh24:mi:ss');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'CCR');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CC_EXPIRY_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'CCR'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , CC_EXPIRY_DATE_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --38. Validation for RVE ( EST_REV_DATE ) rule.
       BEGIN
          EST_REV_DATE      := to_date(EST_REV_DATE_CHR,'yyyy/mm/dd hh24:mi:ss');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'RVE');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EST_REV_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'RVE'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , EST_REV_DATE_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --39. Validation for REN ( RENEWAL_END_DATE ) rule.
       BEGIN
          RENEWAL_END_DATE      := to_date(RENEWAL_END_DATE_CHR,'yyyy/mm/dd hh24:mi:ss');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'REN');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_END_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'REN'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , RENEWAL_END_DATE_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --40. Validation for REN ( CONVERSION_RATE_DATE ) rule.
       BEGIN
          CONVERSION_RATE_DATE      := to_date(CONVERSION_RATE_DATE_CHR,'yyyy/mm/dd hh24:mi:ss');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(CHR_ID,'REN');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CONVERSION_RATE_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'CVN'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , CONVERSION_RATE_DATE_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;


End If;

    -- End of code to validate data type .





IF Eflag = 1 THEN
   Eflag :=0;
   FND_FILE.PUT_LINE(FND_FILE.LOG ,'Validation failed for rgp_id :'||p_id||'Major Version: '||p_major_version||
   ' Error Message: '||L_ERROR_MSG);
   Raise VAL_EXCEPTION;
END IF;


If iEflag = 1 THEN
  iEflag := 0;
  FND_FILE.PUT_LINE(FND_FILE.LOG ,'Insert/Update failed for rgp_id :'||p_id||'Major Version: '||p_major_version||
  ' Error Message: '||Emsg);
  Raise MAIN_EXCEPTION;
End If;



x_return_status:='S';



EXCEPTION
  WHEN MAIN_EXCEPTION THEN
    IF ISQLCODE in (1,-1) THEN
      x_return_status:='S';
    Else
      x_return_status:='E';
      Update oks_rule_reprocess
      set errormsg= Emsg
      where rowid=prow_id;
    End If;
  WHEN VAL_EXCEPTION THEN
       x_return_status:='E';
      Update oks_rule_reprocess
      set errormsg=L_ERROR_MSG
      where rowid=prow_id;
   WHEN OTHERS THEN
	X_RETURN_STATUS := 'E';
	L_ERROR_MSG := SQLERRM;
        Update oks_rule_reprocess
        set errormsg=L_ERROR_MSG
        where rowid=prow_id;
	FND_FILE.PUT_LINE(FND_FILE.LOG ,'DML Failed for'||p_id||'with Error Message '||L_ERROR_MSG);

END REPROCESS_HDR_HIST_RULE;



Procedure REPROCESS_SYNCHL_RULE (prow_id in ROWID
                                ,p_id    in NUMBER
                                ,p_major_version_number in NUMBER
                                ,p_us_yn in BOOLEAN
                                ,x_return_status OUT NOCOPY VARCHAR2 )
IS

 CURSOR L_SYNHL_CSR ( p_id in NUMBER ) is
  select oks.payment_type
       , oks.cc_no
       , oks.cc_expiry_date
       --, oks.cc_bank_acct_id
       --, oks.cc_auth_code
       , okc.cust_po_number
       , okc.cust_po_number_req_yn
       , okc.price_list_id
       , okc.id
    from oks_k_headers_b oks
       , okc_k_headers_b okc
   where oks.chr_id = okc.id
     and oks.chr_id = p_id;

-------------------------------------------------------
-- Cursor to lock okc_k_lines_b before going for update
-------------------------------------------------------
 CURSOR L_LOCK_LINE_CSR (p_id in number ) IS
 SELECT 1
   FROM OKC_K_LINES_B
  WHERE DNZ_CHR_ID = P_ID
    AND LSE_ID in ( 1,12,19,46)
    FOR UPDATE NOWAIT;


 l_payment_type    varchar2(2000);
 l_cc_no           varchar2(2000);
 l_cc_expiry_date  date;
 --l_cc_bank_acct_id number;
 --l_cc_auth_code    varchar2(2000);
 l_cust_po_number  varchar2(2000);
 l_cust_po_number_req_yn varchar2(10);
 l_price_list_id   number;
 l_dnz_chr_id      number;
 l_lock_id         number;
 l_error_msg       varchar2(2000);

 LOCK_EXCEPTION                  EXCEPTION;

BEGIN

 DBMS_TRANSACTION.SAVEPOINT('BEFORE_TRANSACTION');

 BEGIN
    open l_lock_line_csr(p_id);
   fetch l_lock_line_csr into l_lock_id;
   close l_lock_line_csr;
 Exception
   When others then
        Raise lock_exception;
 END;

  x_return_status := 'S';
   open l_synhl_csr ( p_id );
  fetch l_synhl_csr into l_payment_type
                        ,l_cc_no
                        ,l_cc_expiry_date
                        --,l_cc_bank_acct_id
                        --,l_cc_auth_code
                        ,l_cust_po_number
                        ,l_cust_po_number_req_yn
                        ,l_price_list_id
                        ,l_dnz_chr_id ;
   close l_synhl_csr ;

     Update oks_k_lines_b oks
        set oks.payment_type    = l_payment_type
          , oks.cc_no           = l_cc_no
          , oks.cc_expiry_date  = l_cc_expiry_date
          --, oks.cc_bank_acct_id = l_cc_bank_acct_id
          --, oks.cc_auth_code    = l_cc_auth_code
          , oks.cust_po_number  = l_cust_po_number
          , oks.cust_po_number_req_yn = l_cust_po_number_req_yn
          , oks.tax_amount      = ( select oksi.tax_amount
                                      from oks_k_lines_b  oksi
                                         , okc_k_lines_b okci
                                     where okci.lse_id = 46
                                       and okci.id = oksi.cle_id
                                       and oksi.cle_id = oks.cle_id
                                       and okci.id = oks.cle_id )
      where oks.dnz_chr_id = p_id
        and exists (
     select 1 from okc_k_lines_b okc
      where okc.id = oks.cle_id
        and okc.lse_id in ( 1,12,19,46));

     Update okc_k_lines_b okc
        set okc.price_list_id = l_price_list_id
          , okc.price_negotiated = ( select sum(okci.price_negotiated)
                                       from okc_k_lines_b okci
                                      where ( okci.cle_id = okc.id OR (okci.id = okc.id and okci.lse_id = 46 )))
      where dnz_chr_id = p_id
        and lse_id in ( 1,12,19,46);
Exception
  When LOCK_EXCEPTIOn then
        X_RETURN_STATUS := 'E';
        L_ERROR_MSG := SQLERRM;
        DBMS_TRANSACTION.ROLLBACK_SAVEPOINT('BEFORE_TRANSACTION');
        Update oks_rule_reprocess
        set errormsg=L_ERROR_MSG
        where rowid=prow_id;
        FND_FILE.PUT_LINE(FND_FILE.LOG ,'DML Failed for LOCK  OKSSYNHL '||p_id||'with Error Message '||L_ERROR_MSG);
   WHEN OTHERS THEN
        X_RETURN_STATUS := 'E';
        L_ERROR_MSG := SQLERRM;
        DBMS_TRANSACTION.ROLLBACK_SAVEPOINT('BEFORE_TRANSACTION');
        Update oks_rule_reprocess
        set errormsg=L_ERROR_MSG
        where rowid=prow_id;
        FND_FILE.PUT_LINE(FND_FILE.LOG ,'DML Failed for LOCK  OKSSYNHL '||p_id||'with Error Message '||L_ERROR_MSG);

End REPROCESS_SYNCHL_RULE;


Procedure REPROCESS_OKSLEVEL (prow_id in ROWID
                             ,p_id    in NUMBER
                             ,p_major_version_number in NUMBER
                             ,p_us_yn in BOOLEAN
                             ,x_return_status OUT NOCOPY VARCHAR2 )
IS
  Type l_num_tbl is table of NUMBER index  by BINARY_INTEGER ;
  Type l_date_tbl is table of DATE  index  by BINARY_INTEGER ;
  Type l_chr_tbl is table of Varchar2(2000) index  by BINARY_INTEGER ;
  L_ERRM  VARCHAR2(1000);


 CURSOR L_LVL_CSR( p_rgp_id in number ) is
  SELECT RUL.ID    RUL_ID
       , LINES.ID  CLE_ID
       , LINES.DNZ_CHR_ID DNZ_CHR_ID
       , NVL(LINES.CLE_ID , LINES.ID ) PARENT_CLE_ID
    FROM OKC_RULES_B RUL
       , OKC_K_LINES_B LINES
       , OKC_RULE_GROUPS_B RGP
   WHERE RUL.RULE_INFORMATION_CATEGORY = 'SLL'
     AND RUL.RGP_ID = RGP.ID
     AND RGP.DNZ_CHR_ID = LINES.DNZ_CHR_ID
     AND RGP.CLE_ID = LINES.ID
     AND RGP.CLE_ID IS NOT NULL
     AND RGP.ID = P_RGP_ID;

  CLE_IDI        L_NUM_TBL;
  DNZ_CHR_IDI    L_NUM_TBL;
  PARENT_CLE_IDI L_NUM_TBL;
  RUL_IDI        L_NUM_TBL;
  L_ERROR_MSG    VARCHAr2(2000);

Begin
  x_return_status := 'S';
  OPEN  L_LVL_CSR (P_ID );
  FETCH L_LVL_CSR BULK COLLECT INTO  RUL_IDI
                                    ,CLE_IDI
                                    ,DNZ_CHR_IDI
                                    ,PARENT_CLE_IDI;
  CLOSE L_LVL_CSR;

  IF RUL_IDI.COUNT > 0 THEN
    FORALL I IN RUL_IDI.FIRST..RUL_IDI.LAST
      UPDATE OKS_LEVEL_ELEMENTS
         SET CLE_ID = CLE_IDI(I)
           , DNZ_CHR_ID = DNZ_CHR_IDI(I)
           , PARENT_CLE_ID = PARENT_CLE_IDI(I)
       WHERE RUL_ID = RUL_IDI(I);
  END IF;

  Exception
     When others then
        X_RETURN_STATUS := 'E';
        L_ERROR_MSG := SQLERRM;
        DBMS_TRANSACTION.ROLLBACK_SAVEPOINT('BEFORE_TRANSACTION');
        Update oks_rule_reprocess
        set errormsg=L_ERROR_MSG
        where rowid=prow_id;
        FND_FILE.PUT_LINE(FND_FILE.LOG ,'DML Failed for Reprocess of OKSLEVEL '||p_id||'with Error Message '||L_ERROR_MSG);




End REPROCESS_OKSLEVEL ;

Procedure REPROCESS_LINE_HIST_RULE(prow_id  in ROWID ,
                                   p_id     in NUMBER ,
			           p_major_version   in NUMBER ,
			           p_us_yn           in BOOLEAN,
                                   x_return_status   OUT NOCOPY  VARCHAR2)
IS

CLE_ID                          NUMBER ;
DNZ_CHR_ID                      NUMBER ;
DISCOUNT_LIST                   NUMBER ;  --DST
ACCT_RULE_ID                    NUMBER ;  --ARL
PAYMENT_TYPE                    VARCHAR2(2000) ;  --CCR
CC_NO                           VARCHAR2(2000) ;  --CCR
CC_EXPIRY_DATE			DATE ; --CCR
CC_BANK_ACCT_ID			NUMBER ;  --CCR
CC_AUTH_CODE			VARCHAR2(2000) ;  --CCR
GRACE_DURATION			NUMBER ;  --GPR
GRACE_PERIOD			VARCHAR2(2000) ;  --GPR
l_INVOICE_TEXT			VARCHAR2(2000) ;  --IRT
INV_PRINT_FLAG			VARCHAR2(2000) ;  --IRT
PRICE_UOM			VARCHAR2(2000) ;  --IRT
TAX_AMOUNT			NUMBER ;  --IRT
TAX_INCLUSIVE_YN		VARCHAR2(2000) ;  --IRT
TAX_STATUS			VARCHAR2(2000) ;  --TAX
TAX_CODE			NUMBER ;  --TAX
TAX_EXEMPTION_ID		NUMBER ;  --TAX
IB_TRANS_TYPE			VARCHAR2(2000) ;  --IBR
IB_TRANS_DATE			DATE ; --IBR
l_IB_TRX_DETAILS			VARCHAR2(2000) ;  --IBR
CLVL_LIST_PRICE			NUMBER ;  --PDL
CLVL_QUANTITY			NUMBER ;  --PDL
CLVL_EXTENDED_AMT		NUMBER ;  --PDL
TOPLVL_OPERAND_CODE		VARCHAR2(2000) ;  --PDL
TOPLVL_OPERAND_VAL		NUMBER ;  --PDL
CLVL_UOM_CODE			VARCHAR2(2000) ;  --PDL
TOPLVL_QUANTITY			NUMBER ;  --PDL
TOPLVL_UOM_CODE			VARCHAR2(2000) ;  --PDL
TOPLVL_ADJ_PRICE		NUMBER ;  --PDL
TOPLVL_PRICE_QTY		NUMBER ;  --PDL
l_STATUS_TEXT			VARCHAR2(2000) ;  --PDL
AVERAGING_INTERVAL		NUMBER ;  --QRE
USAGE_PERIOD			VARCHAR2(2000) ;  --QRE
SETTLEMENT_INTERVAL		VARCHAR2(2000) ;  --QRE
MINIMUM_QUANTITY		NUMBER ;  --QRE
DEFAULT_QUANTITY		NUMBER ;  --QRE
AMCV_FLAG			VARCHAR2(2000) ;  --QRE
FIXED_QUANTITY			NUMBER ;  --QRE
USAGE_DURATION			NUMBER ;  --QRE
LEVEL_YN			VARCHAR2(2000) ;  --QRE
USAGE_TYPE			VARCHAR2(2000) ;  --QRE
UOM_QUANTIFIED			VARCHAR2(2000) ;  --QRE
BASE_READING			NUMBER ;  --QRE
USAGE_EST_METHOD		VARCHAR2(2000) ;  --QRE
BILLING_SCHEDULE_TYPE		VARCHAR2(2000) ;  --SLH
CUST_ACCT_ID			NUMBER ;  --CAN (OKC)
BILL_TO_SITE_USE_ID		NUMBER ;  --BTO (OKC)
INV_RULE_ID			NUMBER ;  --IRE (OKC)
L_LINE_RENEWAL_TYPE_CODE		VARCHAR2(2000) ;  --REN (OKC)
SHIP_TO_SITE_USE_ID		NUMBER ;  --STO (OKC)
PAYMENT_TERM_ID			NUMBER ;  --PTR (OKC)
LINE_LIST_PRICE                 NUMBER ;  --PDL rule_info4 (OKC)

-- FOLLOWING ARE NUMBER FIELDS --
DISCOUNT_LIST_CHR               VARCHAR2(2000) ;  --DST
ACCT_RULE_ID_CHR                VARCHAR2(2000) ;  --ARL
CC_BANK_ACCT_ID_CHR		VARCHAR2(2000) ;  --CCR
GRACE_DURATION_CHR		VARCHAR2(2000) ;  --GPR
TAX_AMOUNT_CHR   		VARCHAR2(2000) ;  --IRT
TAX_CODE_CHR    		VARCHAR2(2000) ;  --TAX
TAX_EXEMPTION_ID_CHR		VARCHAR2(2000) ;  --TAX
CLVL_LIST_PRICE_CHR		VARCHAR2(2000) ;  --PDL
CLVL_QUANTITY_CHR		VARCHAR2(2000) ;  --PDL
CLVL_EXTENDED_AMT_CHR   	VARCHAR2(2000) ;  --PDL
TOPLVL_OPERAND_VAL_CHR		VARCHAR2(2000) ;  --PDL
TOPLVL_QUANTITY_CHR		VARCHAR2(2000) ;  --PDL
TOPLVL_ADJ_PRICE_CHR		VARCHAR2(2000) ;  --PDL
TOPLVL_PRICE_QTY_CHR		VARCHAR2(2000) ;  --PDL
AVERAGING_INTERVAL_CHR		VARCHAR2(2000) ;  --QRE
MINIMUM_QUANTITY_CHR		VARCHAR2(2000) ;  --QRE
DEFAULT_QUANTITY_CHR		VARCHAR2(2000) ;  --QRE
FIXED_QUANTITY_CHR		VARCHAR2(2000) ;  --QRE
USAGE_DURATION_CHR		VARCHAR2(2000) ;  --QRE
BASE_READING_CHR		VARCHAR2(2000) ;  --QRE
CUST_ACCT_ID_CHR		VARCHAR2(2000) ;  --CAN (OKC)
BILL_TO_SITE_USE_ID_CHR		VARCHAR2(2000) ;  --BTO (OKC)
INV_RULE_ID_CHR			VARCHAR2(2000) ;  --IRE (OKC)
SHIP_TO_SITE_USE_ID_CHR		VARCHAR2(2000) ;  --STO (OKC)
PAYMENT_TERM_ID_CHR		VARCHAR2(2000) ;  --PTR (OKC)
LINE_LIST_PRICE_CHR             VARCHAR2(2000) ;  --PDL rule_info4 (OKC)
------------------------------------------------------------
    EXCEPTION_COV_ID_CHR        Varchar2(2000);
    PM_PROGRAM_ID_CHR             Varchar2(2000);
    PRICE_LIST_ID_CHR              Varchar2(2000);
    RCN_INCIDENT_SEVERITY_ID_CHR       Varchar2(2000);
    RCN_PDF_ID_CHR                    Varchar2(2000);
    RSN_INCIDENT_SEVERITY_ID_CHR      Varchar2(2000);
    RSN_PDF_ID_CHR                     Varchar2(2000);
    DISCOUNT_PERCENT_CHR        Varchar2(2000);
    DISCOUNT_AMOUNT_CHR         Varchar2(2000);
 -------------------------------------------------------------
    EXCEPTION_COV_ID        Number ;
    L_INHERITANCE_TYPE        Varchar2(2000);
    Prod_Upgrade_YN_CHR         Varchar2(2000);
    Coverage_Type_CHR           Varchar2(2000);
    TRANSFER_OPTION_CHR         Varchar2(2000);
    PM_PROGRAM_ID           Number ;
    PM_CONF_REQ_YN_CHR          Varchar2(2000);
    PM_SCH_EXISTS_YN_CHR        Varchar2(2000);
    ALLOW_BT_DISCOUNT_CHR       Varchar2(2000);
    l_OFFSET_DURATION         Varchar2(2000);
    PRICE_LIST_ID           Number ;
    RCN_INCIDENT_SEVERITY_ID    Number ;
    RCN_PDF_ID                  Number ;
    RCN_REACT_TIME_NAME         Varchar2(2000);
    RCN_WORK_THRU_YN            Varchar2(2000);
    RCN_REACT_ACTIVE_YN         Varchar2(2000);
    RSN_INCIDENT_SEVERITY_ID    Number ;
    RSN_PDF_ID                  Number ;
    RSN_REACT_TIME_NAME         Varchar2(2000);
    RSN_WORK_THRU_YN            Varchar2(2000);
    RSN_REACT_ACTIVE_YN         Varchar2(2000);
    l_LIMIT_UOM_QUANTIFIED    Varchar2(2000);
    DISCOUNT_AMOUNT         Number;
    DISCOUNT_PERCENT        Number;
    l_Sync_Date_Install       Varchar2(2000);

-------------------------------------------------------------



-- FOLLOWING ARE DATE FIELDS --
CC_EXPIRY_DATE_CHR		VARCHAR2(2000) ; --CCR
IB_TRANS_DATE_CHR		VARCHAR2(2000) ; --IBR

--Misc Variables --
L_ATTRIBUTE_NAME              VARCHAR2(2000);
L_ERROR_MSG                   VARCHAR2(2000);

MAIN_EXCEPTION               EXCEPTION;
VAL_EXCEPTION               EXCEPTION;
Eflag                        NUMBER;
Emsg                         VARCHAR2(2000);
iEflag                       NUMBER:=0;
l_upd_cle_id                 NUMBER;
ISQLCODE                     NUMBER;
l_cle_id                     NUMBER;

-------------------------------------------------------------------------------
-- The following is the cursor opened if p_us_yn is true  --
-------------------------------------------------------------------------------
CURSOR l_line_rule_csr (p_id in NUMBER)is
SELECT  RGP.CLE_id cle_id
       ,RGP.dnz_chr_id dnz_chr_id
   -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                          DISCOUNT_LIST
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1))                DISCOUNT_LIST

       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1))                ACCT_RULE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,'CCR'))                          PAYMENT_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION1))          CC_NO
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,
            to_date(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                       CC_EXPIRY_DATE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
       --              '!,.','!')                                                          CC_BANK_ACCT_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3))          CC_BANK_ACCT_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION4))          CC_AUTH_CODE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
       --              '!,.','!')                                                          GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1))          GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION2))          GRACE_PERIOD
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION1))          INVOICE_TEXT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION2))          INV_PRINT_FLAG
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION3))          PRICE_UOM
        -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
                     '!,','!')                                                             TAX_AMOUNT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION5))          TAX_INCLUSIVE_YN
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.RULE_INFORMATION2))          TAX_STATUS
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
                     '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!')       TAX_CODE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                          TAX_EXEMPTION_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1))                TAX_EXEMPTION_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IBR' ,RUL.RULE_INFORMATION1))          IB_TRANS_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IBR' ,
            TO_DATE(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                       IB_TRANS_DATE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IBR' ,RUL.RULE_INFORMATION3))          IB_TRX_DETAILS
        -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),
                     '!,','!')                                                             CLVL_LIST_PRICE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),
       --              '!,.','!')                                                          CLVL_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2))          CLVL_QUANTITY
       -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),
                     '!,','!')                                                             CLVL_EXTENDED_AMT
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION4)),
                     '!,','!')                                                             LINE_LIST_PRICE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION5))          TOPLVL_OPERAND_CODE
        -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),
                     '!,','!')                                                             TOPLVL_OPERAND_VAL
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION7))          CLVL_UOM_CODE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),
       --              '!,.','!')                                                          TOPLVL_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8))          TOPLVL_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION9))          TOPLVL_UOM_CODE
       -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),
                     '!,','!')                                                             TOPLVL_ADJ_PRICE
       -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),
                     '!,','!')                                                             TOPLVL_PRICE_QTY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION12)) STATUS_TEXT
       -------  Character to number conversion -- Records dosent exitsts in gsidev fro this category  QRE.
       -- Not sure whethet translation is required or not. since records dosent exitst in gsidev - no trans done
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),
       --              '!,.','!')                                                           AVERAGING_INTERVAL
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1))           AVERAGING_INTERVAL
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION2))           USAGE_PERIOD
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION3))           SETTLEMENT_INTERVAL
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),
       --              '!,.','!')                                                           MINIMUM_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4))           MINIMUM_QUANTITY
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),
       --              '!,.','!')                                                           DEFAULT_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5))           DEFAULT_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION6))           AMCV_FLAG
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),
       --              '!,.','!')                                                           FIXED_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7))               FIXED_QUANTITY
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),
       --              '!,.','!')       USAGE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8))           USAGE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION9))           LEVEL_YN
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION10))          USAGE_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION11))          UOM_QUANTIFIED
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),
       --              '!,.','!')       BASE_READING
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12))          BASE_READING
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,DECODE(RUL.RULE_INFORMATION6,'Y','AMCV'))) USAGE_EST_METHOD
       --,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLH' ,RUL.RULE_INFORMATION1))           BILLING_SCHEDULE_TYPE
       ,decode(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION_CATEGORY)),'QRE','T',
                MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLH' ,RUL.RULE_INFORMATION1)) ) BILLING_SCHEDULE_TYPE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                           CUST_ACCT_ID           --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1))                 CUST_ACCT_ID           --OKC
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                           BILL_TO_SITE_USE_ID    --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1))                 BILL_TO_SITE_USE_ID    --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1))                 INV_RULE_ID            --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LRT' ,RUL.RULE_INFORMATION1))           LINE_RENEWAL_TYPE_CODE --OKC
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                           SHIP_TO_SITE_USE_ID    --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1))                 SHIP_TO_SITE_USE_ID    --OKC
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                           PAYMENT_TERM_ID        --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1))                 PAYMENT_TERM_ID        --OKC
       ----- For Coverages
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1))             EXCEPTION_COV_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'WHE',RUL.RULE_INFORMATION1))             INHERITANCE_TYPE
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'UGE',RUL.RULE_INFORMATION1))             PROD_UPGRADE_YN
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'CVE',RUL.RULE_INFORMATION1))             COVERAGE_TYPE
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'STR',decode(RUL.RULE_INFORMATION1,'Y','TRANS','TERM'))) TRANSFER_OPTION
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1))                   PM_PROGRAM_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.RULE_INFORMATION1))             PM_CONF_REQ_YN
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.RULE_INFORMATION2))             PM_SCH_EXISTS_YN
       --,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'DST',RUL.OBJECT1_ID1))                 DISCOUNT_LIST
       --,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'BTD',DECODE(LINE.LSE_ID ,16,'Y',RUL.RULE_INFORMATION1))) ALLOW_BT_DISCOUNT
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'BTD','Y'))ALLOW_BT_DISCOUNT
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'OFS',RUL.RULE_INFORMATION1))OFFSET_DURATION
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PRE',RUL.OBJECT1_ID1))                   PRICE_LIST_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1))                   RCN_INCIDENT_SEVERITY_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1))             RCN_PDF_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION2))             RCN_REACT_TIME_NAME
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION3))             RCN_WORK_THRU_YN
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION4))             RCN_REACT_ACTIVE_YN
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RSN',RUL.RULE_INFORMATION2))             RSN_REACT_TIME_NAME
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1))             LIMIT_UOM_QUANTIFIED
       -------  Character to number conversion -- Records dosent exitsts in gsidev fro this category  LMT.
       -- Not sure whethet translation is required or not. since records dosent exitst in gsidev - no trans done
       --,TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION2)),
       --              '!,','!')                                                           DISCOUNT_AMOUNT
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION2))             DISCOUNT_AMOUNT
       --,TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION4)),
       --              '!%,','!')                                                          DISCOUNT_PERCENT
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION4))             DISCOUNT_PERCENT
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT','N'))Sync_Date_Install

  FROM OKC_RULE_GROUPS_BH RGP
     , OKC_RULES_BH RUL
 WHERE RGP.ID  = RUL.RGP_ID
   and rul.major_version=rgp.major_version
   AND RUL.RULE_INFORMATION_CATEGORY IN ('DST','ARL','CCR','GPR','IRT','TAX','IBR','PDL','QRE','SLH','CAN','BTO','IRE','LRT','STO','PTR',
   'ECE','WHE','UGE','STR','CVE','PMP','BTD','RCN','RSN','LMT','OFS','PRE','CVR')
   AND RGP.CLE_ID IS NOT NULL
   AND RGP.RGD_CODE = 'SVC_K'
   AND RGP.id = p_id
   AND RGP.major_version = p_major_version
GROUP BY RGP.CLE_id,RGP.dnz_chr_id;

-------------------------------------------------------------------------------
-- The following is the cursor opened if p_us_yn is false  --
-------------------------------------------------------------------------------
CURSOR l_line_rule_csr_nus (p_id in NUMBER)is
SELECT  RGP.CLE_id cle_id
       ,RGP.dnz_chr_id dnz_chr_id
   -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                          DISCOUNT_LIST
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1))                DISCOUNT_LIST

       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1))                ACCT_RULE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,'CCR'))                          PAYMENT_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION1))          CC_NO
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,
            to_date(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                       CC_EXPIRY_DATE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
       --              '!,. ','!')                                                          CC_BANK_ACCT_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3))          CC_BANK_ACCT_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION4))          CC_AUTH_CODE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
       --              '!,. ','!')                                                          GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1))          GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION2))          GRACE_PERIOD
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION1))          INVOICE_TEXT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION2))          INV_PRINT_FLAG
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION3))          PRICE_UOM
        -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
                     '!. ','!')                                                             TAX_AMOUNT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION5))          TAX_INCLUSIVE_YN
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.RULE_INFORMATION2))          TAX_STATUS
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
                     '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,. ','!')       TAX_CODE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                          TAX_EXEMPTION_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1))                TAX_EXEMPTION_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IBR' ,RUL.RULE_INFORMATION1))          IB_TRANS_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IBR' ,
            TO_DATE(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                       IB_TRANS_DATE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IBR' ,RUL.RULE_INFORMATION3))          IB_TRX_DETAILS
        -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),
                     '!. ','!')                                                             CLVL_LIST_PRICE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),
       --              '!,. ','!')                                                          CLVL_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2))          CLVL_QUANTITY
       -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),
                     '!. ','!')                                                             CLVL_EXTENDED_AMT
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION4)),
                     '!. ','!')                                                             LINE_LIST_PRICE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION5))          TOPLVL_OPERAND_CODE
        -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),
                     '!. ','!')                                                             TOPLVL_OPERAND_VAL
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION7))          CLVL_UOM_CODE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),
       --              '!,. ','!')                                                          TOPLVL_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8))          TOPLVL_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION9))          TOPLVL_UOM_CODE
       -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),
                     '!. ','!')                                                             TOPLVL_ADJ_PRICE
       -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),
                     '!. ','!')                                                             TOPLVL_PRICE_QTY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION12)) STATUS_TEXT
       -------  Character to number conversion -- Records dosent exitsts in gsidev fro this category  QRE.
       -- Not sure whethet translation is required or not. since records dosent exitst in gsidev - no trans done
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),
       --              '!,. ','!')                                                           AVERAGING_INTERVAL
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1))           AVERAGING_INTERVAL
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION2))           USAGE_PERIOD
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION3))           SETTLEMENT_INTERVAL
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),
       --              '!,. ','!')                                                           MINIMUM_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4))           MINIMUM_QUANTITY
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),
       --              '!,. ','!')                                                           DEFAULT_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5))           DEFAULT_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION6))           AMCV_FLAG
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),
       --              '!,. ','!')                                                           FIXED_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7))               FIXED_QUANTITY
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),
       --              '!,. ','!')       USAGE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8))           USAGE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION9))           LEVEL_YN
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION10))          USAGE_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION11))          UOM_QUANTIFIED
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),
       --              '!,. ','!')       BASE_READING
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12))          BASE_READING
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,DECODE(RUL.RULE_INFORMATION6,'Y','AMCV'))) USAGE_EST_METHOD
       --,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLH' ,RUL.RULE_INFORMATION1))           BILLING_SCHEDULE_TYPE
       ,decode(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION_CATEGORY)),'QRE','T',
                MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLH' ,RUL.RULE_INFORMATION1)) ) BILLING_SCHEDULE_TYPE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                           CUST_ACCT_ID           --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1))                 CUST_ACCT_ID           --OKC
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                           BILL_TO_SITE_USE_ID    --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1))                 BILL_TO_SITE_USE_ID    --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1))                 INV_RULE_ID            --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LRT' ,RUL.RULE_INFORMATION1))           LINE_RENEWAL_TYPE_CODE --OKC
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                           SHIP_TO_SITE_USE_ID    --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1))                 SHIP_TO_SITE_USE_ID    --OKC
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                           PAYMENT_TERM_ID        --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1))                 PAYMENT_TERM_ID        --OKC
       ----- For Coverages
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1))             EXCEPTION_COV_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'WHE',RUL.RULE_INFORMATION1))             INHERITANCE_TYPE
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'UGE',RUL.RULE_INFORMATION1))             PROD_UPGRADE_YN
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'CVE',RUL.RULE_INFORMATION1))             COVERAGE_TYPE
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'STR',decode(RUL.RULE_INFORMATION1,'Y','TRANS','TERM'))) TRANSFER_OPTION
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1))                   PM_PROGRAM_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.RULE_INFORMATION1))             PM_CONF_REQ_YN
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.RULE_INFORMATION2))             PM_SCH_EXISTS_YN
       --,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'DST',RUL.OBJECT1_ID1))                 DISCOUNT_LIST
       --,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'BTD',DECODE(LINE.LSE_ID ,16,'Y',RUL.RULE_INFORMATION1))) ALLOW_BT_DISCOUNT
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'BTD','Y'))ALLOW_BT_DISCOUNT
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'OFS',RUL.RULE_INFORMATION1))OFFSET_DURATION
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PRE',RUL.OBJECT1_ID1))                   PRICE_LIST_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1))                   RCN_INCIDENT_SEVERITY_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1))             RCN_PDF_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION2))             RCN_REACT_TIME_NAME
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION3))             RCN_WORK_THRU_YN
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION4))             RCN_REACT_ACTIVE_YN
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RSN',RUL.RULE_INFORMATION2))             RSN_REACT_TIME_NAME
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1))             LIMIT_UOM_QUANTIFIED
       -------  Character to number conversion -- Records dosent exitsts in gsidev fro this category  LMT.
       -- Not sure whethet translation is required or not. since records dosent exitst in gsidev - no trans done
       --,TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION2)),
       --              '!. ','!')                                                           DISCOUNT_AMOUNT
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION2))             DISCOUNT_AMOUNT
       --,TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION4)),
       --              '!%. ','!')                                                          DISCOUNT_PERCENT
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION4))             DISCOUNT_PERCENT
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT','N'))Sync_Date_Install
  FROM OKC_RULE_GROUPS_BH RGP
     , OKC_RULES_BH RUL
 WHERE RGP.ID  = RUL.RGP_ID
   and rul.major_version=rgp.major_version
   AND RUL.RULE_INFORMATION_CATEGORY IN ('DST','ARL','CCR','GPR','IRT','TAX','IBR','PDL','QRE','SLH','CAN','BTO','IRE','LRT','STO','PTR',
   'ECE','WHE','UGE','STR','CVE','PMP','BTD','RCN','RSN','LMT','OFS','PRE','CVR')
   AND RGP.CLE_ID IS NOT NULL
   AND RGP.RGD_CODE = 'SVC_K'
   AND RGP.id = p_id
   AND RGP.major_version = p_major_version
GROUP BY RGP.CLE_id,RGP.dnz_chr_id;




 ----------------------------------------------------------------------------
-- Cursor to populate data in OKS_RULE_ERROR table .                      --
----------------------------------------------------------------------------
CURSOR L_LINE_DTLS_CSR (P_CLE_ID  IN NUMBER ,P_HDR_ID IN NUMBER, P_CATEGORY IN VARCHAR2 ) IS
SELECT HDR.CONTRACT_NUMBER
     , HDR.CONTRACT_NUMBER_MODIFIER
     , LIN.LINE_NUMBER
     , RUL.MAJOR_VERSION
     , RUL.ID
     , RGP.ID RGP_ID
 FROM  OKC_K_HEADERS_BH HDR
     , OKC_RULE_GROUPS_BH RGP
     , OKC_RULES_BH RUL
     , OKC_K_LINES_BH LIN
WHERE HDR.ID = P_HDR_ID
  AND LIN.ID= P_CLE_ID
  AND RGP.DNZ_CHR_ID = P_HDR_ID
  AND RGP.CLE_ID = LIN.ID
  AND RGP.ID = RUL.RGP_ID
  AND RGP.DNZ_CHR_ID = RUL.DNZ_CHR_ID
  AND hdr.major_version=rgp.major_version
  AND LIN.major_version=rgp.major_version
  AND rgp.major_version=rul.major_version
  and rul.major_version=p_major_version
  AND RUL.RULE_INFORMATION_CATEGORY = P_CATEGORY ;

 L_LINE_DTLS_REC L_LINE_DTLS_CSR%ROWTYPE;
 L_USERENV_LANG               VARCHAR2(100) := OKC_UTIL.get_userenv_lang ;
----------------------------------------------------------------------------
--Cursor to check whether the record exists in OKC_RULE_GROUPS_BH table.
----------------------------------------------------------------------------
CURSOR L_CHECK_RGP_CSR ( P_ID IN NUMBER , P_MAJOR_VERSION IN NUMBER ) IS
SELECT CLE_ID,DNZ_CHR_ID
  FROM OKC_RULE_GROUPS_BH
 WHERE ID = P_ID
   AND MAJOR_VERSION = P_MAJOR_VERSION;
----------------------------------------------------------------------------


BEGIN
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'--------------Start of Sub request for Line History Rule Data Reprocessing--------');
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');

DBMS_TRANSACTION.SAVEPOINT('BEFORE_TRANSACTION');


if(p_us_yn) THEN
    OPEN l_line_rule_csr(p_id);
    FETCH l_line_rule_csr into
                         CLE_ID
                        ,DNZ_CHR_ID
                        ,DISCOUNT_LIST_CHR
                        ,ACCT_RULE_ID_CHR
                        ,PAYMENT_TYPE
                        ,CC_NO
                        ,CC_EXPIRY_DATE_CHR
                        ,CC_BANK_ACCT_ID_CHR
                        ,CC_AUTH_CODE
                        ,GRACE_DURATION_CHR
                        ,GRACE_PERIOD
                        ,l_INVOICE_TEXT
                        ,INV_PRINT_FLAG
                        ,PRICE_UOM
                        ,TAX_AMOUNT_CHR
                        ,TAX_INCLUSIVE_YN
                        ,TAX_STATUS
                        ,TAX_CODE_CHR
                        ,TAX_EXEMPTION_ID_CHR
                        ,IB_TRANS_TYPE
                        ,IB_TRANS_DATE_CHR
                        ,l_IB_TRX_DETAILS
                        --,PROD_PRICE
                        --,SERVICE_PRICE
                        ,CLVL_LIST_PRICE_CHR
                        ,CLVL_QUANTITY_CHR
                        ,CLVL_EXTENDED_AMT_CHR
                        ,LINE_LIST_PRICE_CHR
                        ,TOPLVL_OPERAND_CODE
                        ,TOPLVL_OPERAND_VAL_CHR
                        ,CLVL_UOM_CODE
                        ,TOPLVL_QUANTITY_CHR
                        ,TOPLVL_UOM_CODE
                        ,TOPLVL_ADJ_PRICE_CHR
                        ,TOPLVL_PRICE_QTY_CHR
                        ,l_STATUS_TEXT
                        ,AVERAGING_INTERVAL_CHR
                        ,USAGE_PERIOD
                        ,SETTLEMENT_INTERVAL
                        ,MINIMUM_QUANTITY_CHR
                        ,DEFAULT_QUANTITY_CHR
                        ,AMCV_FLAG
                        ,FIXED_QUANTITY_CHR
                        ,USAGE_DURATION_CHR
                        ,LEVEL_YN
                        ,USAGE_TYPE
                        ,UOM_QUANTIFIED
                        ,BASE_READING_CHR
                        ,USAGE_EST_METHOD
                        ,BILLING_SCHEDULE_TYPE
                        ,CUST_ACCT_ID_CHR           --OKC
                        ,BILL_TO_SITE_USE_ID_CHR    --OKC
                        ,INV_RULE_ID_CHR            --OKC
                        ,L_LINE_RENEWAL_TYPE_CODE     --OKC
                        ,SHIP_TO_SITE_USE_ID_CHR    --OKC
                        ,PAYMENT_TERM_ID_CHR       --OKC
-------------------------------------------------------------------------------
		  , EXCEPTION_COV_ID_CHR,
		    l_INHERITANCE_TYPE,
		    Prod_Upgrade_YN_CHR,
		    Coverage_Type_CHR,
		    TRANSFER_OPTION_CHR,
		    PM_PROGRAM_ID_CHR,
		    PM_CONF_REQ_YN_CHR,
		    PM_SCH_EXISTS_YN_CHR,
		    --DISCOUNT_LIST,
		    ALLOW_BT_DISCOUNT_CHR,
		    l_OFFSET_DURATION,
		    --OFFSET_PERIOD,
		    PRICE_LIST_ID_CHR,
		    RCN_INCIDENT_SEVERITY_ID_CHR,
		    RCN_PDF_ID_CHR,
		    RCN_REACT_TIME_NAME,
		    RCN_WORK_THRU_YN,
		    RCN_REACT_ACTIVE_YN,
		    RSN_REACT_TIME_NAME,
		    l_LIMIT_UOM_QUANTIFIED,
		    DISCOUNT_AMOUNT_CHR,
		    DISCOUNT_PERCENT_CHR,
		    l_Sync_Date_Install;
		-------------------------------------------------------------------------------

      Close l_line_rule_csr;
else
    OPEN l_line_rule_csr_nus(p_id);
    FETCH l_line_rule_csr_nus into
                         CLE_ID
                        ,DNZ_CHR_ID
                        ,DISCOUNT_LIST_CHR
                        ,ACCT_RULE_ID_CHR
                        ,PAYMENT_TYPE
                        ,CC_NO
                        ,CC_EXPIRY_DATE_CHR
                        ,CC_BANK_ACCT_ID_CHR
                        ,CC_AUTH_CODE
                        ,GRACE_DURATION_CHR
                        ,GRACE_PERIOD
                        ,l_INVOICE_TEXT
                        ,INV_PRINT_FLAG
                        ,PRICE_UOM
                        ,TAX_AMOUNT_CHR
                        ,TAX_INCLUSIVE_YN
                        ,TAX_STATUS
                        ,TAX_CODE_CHR
                        ,TAX_EXEMPTION_ID_CHR
                        ,IB_TRANS_TYPE
                        ,IB_TRANS_DATE_CHR
                        ,l_IB_TRX_DETAILS
                        --,PROD_PRICE
                        --,SERVICE_PRICE
                        ,CLVL_LIST_PRICE_CHR
                        ,CLVL_QUANTITY_CHR
                        ,CLVL_EXTENDED_AMT_CHR
                        ,LINE_LIST_PRICE_CHR
                        ,TOPLVL_OPERAND_CODE
                        ,TOPLVL_OPERAND_VAL_CHR
                        ,CLVL_UOM_CODE
                        ,TOPLVL_QUANTITY_CHR
                        ,TOPLVL_UOM_CODE
                        ,TOPLVL_ADJ_PRICE_CHR
                        ,TOPLVL_PRICE_QTY_CHR
                        ,l_STATUS_TEXT
                        ,AVERAGING_INTERVAL_CHR
                        ,USAGE_PERIOD
                        ,SETTLEMENT_INTERVAL
                        ,MINIMUM_QUANTITY_CHR
                        ,DEFAULT_QUANTITY_CHR
                        ,AMCV_FLAG
                        ,FIXED_QUANTITY_CHR
                        ,USAGE_DURATION_CHR
                        ,LEVEL_YN
                        ,USAGE_TYPE
                        ,UOM_QUANTIFIED
                        ,BASE_READING_CHR
                        ,USAGE_EST_METHOD
                        ,BILLING_SCHEDULE_TYPE
                        ,CUST_ACCT_ID_CHR           --OKC
                        ,BILL_TO_SITE_USE_ID_CHR    --OKC
                        ,INV_RULE_ID_CHR            --OKC
                        ,L_LINE_RENEWAL_TYPE_CODE     --OKC
                        ,SHIP_TO_SITE_USE_ID_CHR    --OKC
                        ,PAYMENT_TERM_ID_CHR       --OKC
-------------------------------------------------------------------------------
		  , EXCEPTION_COV_ID_CHR,
		    l_INHERITANCE_TYPE,
		    Prod_Upgrade_YN_CHR,
		    Coverage_Type_CHR,
		    TRANSFER_OPTION_CHR,
		    PM_PROGRAM_ID_CHR,
		    PM_CONF_REQ_YN_CHR,
		    PM_SCH_EXISTS_YN_CHR,
		    --DISCOUNT_LIST,
		    ALLOW_BT_DISCOUNT_CHR,
		    l_OFFSET_DURATION,
		    --OFFSET_PERIOD,
		    PRICE_LIST_ID_CHR,
		    RCN_INCIDENT_SEVERITY_ID_CHR,
		    RCN_PDF_ID_CHR,
		    RCN_REACT_TIME_NAME,
		    RCN_WORK_THRU_YN,
		    RCN_REACT_ACTIVE_YN,
		    RSN_REACT_TIME_NAME,
		    l_LIMIT_UOM_QUANTIFIED,
		    DISCOUNT_AMOUNT_CHR,
		    DISCOUNT_PERCENT_CHR,
		    l_Sync_Date_Install;

		-------------------------------------------------------------------------------

      Close l_line_rule_csr_nus;

end if;
      Eflag:=0;
      iEflag := 0;

if(CLE_ID is not null) THEN
--Attempting to insert records first
--as OKS_RULE_REPROCESS might have many  records with no data issue

  BEGIN
    INSERT INTO OKS_K_LINES_BH
                       ( ID
		        ,MAJOR_VERSION
                        ,CLE_ID
                        ,DNZ_CHR_ID
                        ,DISCOUNT_LIST
                        ,ACCT_RULE_ID
                        ,PAYMENT_TYPE
                        ,CC_NO
                        ,CC_EXPIRY_DATE
                        ,CC_BANK_ACCT_ID
                        ,CC_AUTH_CODE
                        ,GRACE_DURATION
                        ,GRACE_PERIOD
                        ,INV_PRINT_FLAG
                        ,PRICE_UOM
                        ,TAX_AMOUNT
                        ,TAX_INCLUSIVE_YN
                        ,TAX_STATUS
                        ,TAX_CODE
                        ,TAX_EXEMPTION_ID
                        ,IB_TRANS_TYPE
                        ,IB_TRANS_DATE
                        --,PROD_PRICE
                        --,SERVICE_PRICE
                        ,CLVL_LIST_PRICE
                        ,CLVL_QUANTITY
                        ,CLVL_EXTENDED_AMT
                        ,TOPLVL_OPERAND_CODE
                        ,TOPLVL_OPERAND_VAL
                        ,CLVL_UOM_CODE
                        ,TOPLVL_QUANTITY
                        ,TOPLVL_UOM_CODE
                        ,TOPLVL_ADJ_PRICE
                        ,TOPLVL_PRICE_QTY
                        ,AVERAGING_INTERVAL
                        ,USAGE_PERIOD
                        ,SETTLEMENT_INTERVAL
                        ,MINIMUM_QUANTITY
                        ,DEFAULT_QUANTITY
                        ,AMCV_FLAG
                        ,FIXED_QUANTITY
                        ,USAGE_DURATION
                        ,LEVEL_YN
                        ,USAGE_TYPE
                        ,UOM_QUANTIFIED
                        ,BASE_READING
                        ,USAGE_EST_METHOD
                        ,BILLING_SCHEDULE_TYPE,
-----------------------------------------------------------------------
			EXCEPTION_COV_ID,
                        INHERITANCE_TYPE,
                        Prod_Upgrade_YN,
                        Coverage_Type,
                        TRANSFER_OPTION,
                        PM_PROGRAM_ID,
                        PM_CONF_REQ_YN,
                        PM_SCH_EXISTS_YN,
                        ALLOW_BT_DISCOUNT,
                        OFFSET_DURATION,
                        OFFSET_PERIOD,
                        INCIDENT_SEVERITY_ID,
                        PDF_ID,
                        WORK_THRU_YN,
                        REACT_ACTIVE_YN,
                        LIMIT_UOM_QUANTIFIED,
                        DISCOUNT_AMOUNT,
                        DISCOUNT_PERCENT,
                        Sync_Date_Install
-----------------------------------------------------------------------

                        ,CREATED_BY
                        ,CREATION_DATE
                        ,LAST_UPDATED_BY
                        ,LAST_UPDATE_DATE
                        ,LAST_UPDATE_LOGIN
                        ,OBJECT_VERSION_NUMBER  )
                 VALUES (CLE_ID
		        ,p_major_version
                        ,CLE_ID
                        ,DNZ_CHR_ID
                        ,DISCOUNT_LIST_CHR
                        ,ACCT_RULE_ID_CHR
                        ,PAYMENT_TYPE
                        ,CC_NO
                        ,CC_EXPIRY_DATE_CHR
                        ,CC_BANK_ACCT_ID_CHR
                        ,CC_AUTH_CODE
                        ,GRACE_DURATION_CHR
                        ,GRACE_PERIOD
                        ,INV_PRINT_FLAG
                        ,PRICE_UOM
                        ,TAX_AMOUNT_CHR
                        ,TAX_INCLUSIVE_YN
                        ,TAX_STATUS
                        ,TAX_CODE_CHR
                        ,TAX_EXEMPTION_ID_CHR
                        ,IB_TRANS_TYPE
                        ,IB_TRANS_DATE_CHR
                        --,PROD_PRICE
                        --,SERVICE_PRICE
                        ,CLVL_LIST_PRICE_CHR
                        ,CLVL_QUANTITY_CHR
                        ,CLVL_EXTENDED_AMT_CHR
                        ,TOPLVL_OPERAND_CODE
                        ,TOPLVL_OPERAND_VAL_CHR
                        ,CLVL_UOM_CODE
                        ,TOPLVL_QUANTITY_CHR
                        ,TOPLVL_UOM_CODE
                        ,TOPLVL_ADJ_PRICE_CHR
                        ,TOPLVL_PRICE_QTY_CHR
                        ,AVERAGING_INTERVAL_CHR
                        ,USAGE_PERIOD
                        ,SETTLEMENT_INTERVAL
                        ,MINIMUM_QUANTITY_CHR
                        ,DEFAULT_QUANTITY_CHR
                        ,AMCV_FLAG
                        ,FIXED_QUANTITY_CHR
                        ,USAGE_DURATION_CHR
                        ,LEVEL_YN
                        ,USAGE_TYPE
                        ,UOM_QUANTIFIED
                        ,BASE_READING_CHR
                        ,USAGE_EST_METHOD
                        ,BILLING_SCHEDULE_TYPE,
                        ---------------------------------------------------------
                        EXCEPTION_COV_ID_CHR,
		        l_INHERITANCE_TYPE,
		        Prod_Upgrade_YN_CHR,
		        Coverage_Type_CHR,
		        TRANSFER_OPTION_CHR,
		        PM_PROGRAM_ID_CHR,
		        PM_CONF_REQ_YN_CHR,
		        PM_SCH_EXISTS_YN_CHR,
		        ALLOW_BT_DISCOUNT_CHR,
		        NULL,
		        NULL,
		        RCN_INCIDENT_SEVERITY_ID_CHR,
		        RCN_PDF_ID_CHR,
		        RCN_WORK_THRU_YN,
		        RCN_REACT_ACTIVE_YN,
		        l_LIMIT_UOM_QUANTIFIED,
		        DISCOUNT_AMOUNT_CHR,
		        DISCOUNT_PERCENT_CHR,
		        l_Sync_Date_Install
                        ---------------------------------------------------------
                        ,1
                        ,sysdate
                        ,1
                        ,sysdate
                        ,2003
                        ,1   );

	IF l_OFFSET_DURATION IS NOT NULL THEN
            l_upd_cle_id  := cle_id;

	    UPDATE OKS_K_LINES_B T1
	    SET (T1.offset_period ,T1.offset_duration) =
	        (SELECT TIM2.UOM_CODE,TIM2.DURATION
	         FROM okc_timevalues_b TIM ,okc_timevalues_b TIM2,okc_rules_b Rul,OKC_RULE_GROUPS_B RGP
	         WHERE  TIM.Id = OFFSET_DURATION
	         AND    RGP.CLE_ID = l_upd_cle_id
	         AND    RUL.rule_information1 = TIM.Id
	         AND    RUL.rule_information_category = 'OFS'
	         AND    RGP.ID = RUL.RGP_ID
             	 AND    TIM2.ID = TIM.TVE_ID_STARTED
                 AND    TIM.DNZ_CHR_ID = TIM2.DNZ_CHR_ID
	         AND    T1.CLE_ID = RGP.CLE_ID)
	WHERE T1.CLE_ID = l_upd_cle_id;

	END IF;


                   FOR lang_i IN OKC_UTIL.g_language_code.FIRST..OKC_UTIL.g_language_code.LAST
                   LOOP
                        INSERT INTO OKS_K_LINES_TLH (
                        id,
                        MAJOR_VERSION,
                        language,
                        source_lang,
                        sfwt_flag,
                        invoice_text,
                        ib_trx_details,
                        status_text,
                        react_time_name,
                        security_group_id,
                        created_by,
                        creation_date,
                        last_updated_by,
                        last_update_date,
                        last_update_login)
                        VALUES(
                        CLE_ID,
			p_major_version,
                        OKC_UTIL.g_language_code(lang_i),
                        L_USERENV_LANG,
                        'S',
                        l_invoice_text,
                        l_ib_trx_details,
                        l_status_text,
                        RCN_REACT_TIME_NAME,
                        null, --security_group_id,
                        1,
                        sysdate,
                        1,
                        sysdate,
                        2003
                        );
                   END LOOP;

 EXCEPTION When others then
   iEflag:=1;
   Emsg :=SQLERRM;
   ISQLCODE := SQLCODE;
 END;

ELSE
  BEGIN
  OPEN  L_CHECK_RGP_CSR(P_ID,P_MAJOR_VERSION);
  FETCH L_CHECK_RGP_CSR INTO L_CLE_ID,DNZ_CHR_ID;
  CLOSE L_CHECK_RGP_CSR;

  If( l_cle_id is not null) then

    INSERT INTO OKS_K_LINES_BH (ID
                              ,MAJOR_VERSION
                              ,CLE_ID
                              ,DNZ_CHR_ID
                              ,OBJECT_VERSION_NUMBER
                              ,CREATED_BY
                              ,CREATION_DATE
                              ,LAST_UPDATED_BY
                              ,LAST_UPDATE_DATE
                              ,LAST_UPDATE_LOGIN)
                      VALUES ( l_cle_id
			      ,p_major_version
                              ,l_cle_id
                              ,DNZ_CHR_ID
                              ,1
                              ,1
                              ,SYSDATE
                              ,1
                              ,SYSDATE
                              ,2003);

    FOR lang_i IN OKC_UTIL.g_language_code.FIRST..OKC_UTIL.g_language_code.LAST
    LOOP
       INSERT INTO OKS_K_LINES_TLH (ID
				  ,MAJOR_VERSION
                                  ,LANGUAGE
                                  ,SOURCE_LANG
                                  ,SFWT_FLAG
                                  ,created_by
                                  ,creation_date
                                  ,last_updated_by
                                  ,last_update_date
                                  ,last_update_login)
                           VALUES(
                                   l_cle_id
				  ,p_major_version
                                  ,OKC_UTIL.g_language_code(lang_i)
                                  ,L_USERENV_LANG
                                  ,'S'
                                  ,1
                                  ,sysdate
                                  ,1
                                  ,sysdate
                                  ,2003);
    END LOOP;
  END IF;
  EXCEPTION When others then
    iEflag:=1;
    Emsg :=SQLERRM;
    ISQLCODE := SQLCODE;
 END;

 end if;

--If insert is successful then go for update

if(iEflag = 0) THEN
 l_upd_cle_id := cle_id;

  BEGIN
      UPDATE OKC_K_LINES_BH
        SET
            CUST_ACCT_ID           = CUST_ACCT_ID_CHR
          , BILL_TO_SITE_USE_ID    = BILL_TO_SITE_USE_ID_CHR
          , INV_RULE_ID            = INV_RULE_ID_CHR
          , LINE_RENEWAL_TYPE_CODE = L_LINE_RENEWAL_TYPE_CODE
          , SHIP_TO_SITE_USE_ID    = SHIP_TO_SITE_USE_ID_CHR
          , PAYMENT_TERM_ID        = PAYMENT_TERM_ID_CHR
          , LINE_LIST_PRICE        = LINE_LIST_PRICE_CHR
     WHERE ID = l_upd_cle_id
     and   major_version = p_major_version;

     EXCEPTION When others then
          iEflag:=1;
	  Emsg :=SQLERRM;
  END;

End If;



    ------------------------------------------------------------------------------------
    -- If insert or update failed then need to validate
    -- Begin of code to validate data type .
    -- If data fails validation then set the Eflag to 1

if(iEflag = 1) THEN

       DBMS_TRANSACTION.ROLLBACK_SAVEPOINT('BEFORE_TRANSACTION');

     -- Begin of code to validate data type .
       --1. Validation for DST rule .
       BEGIN
          DISCOUNT_LIST      := DISCOUNT_LIST_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'DST') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DISCOUNT_LIST');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'DST'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,DISCOUNT_LIST_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --2. Validation for ARL rule .
       BEGIN
          ACCT_RULE_ID      := ACCT_RULE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'ARL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_ACCT_RULE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION  ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'ARL'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,ACCT_RULE_ID_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --3. Validation for CCR rule .
       BEGIN
          CC_BANK_ACCT_ID      := CC_BANK_ACCT_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'CCR') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CC_BANK_ACCT_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'CCR'    ,'RULE_INFORMATION3'   ,L_ATTRIBUTE_NAME         ,CC_BANK_ACCT_ID_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;


       --4. Validation for GPR rule .
       BEGIN
          GRACE_DURATION      := GRACE_DURATION_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'GPR') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_GRACE_DURATION');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'GPR'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,GRACE_DURATION_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;
       --5. Validation for IRT rule .
       BEGIN
          TAX_AMOUNT      := TAX_AMOUNT_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'IRT') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_AMOUNT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'IRT'    ,'RULE_INFORMATION4'   ,L_ATTRIBUTE_NAME         ,TAX_AMOUNT_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --6. Validation for TAX rule .
       BEGIN
          TAX_CODE      := TAX_CODE_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'TAX') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_CODE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'TAX'    ,'OBJECT2_ID1'   ,L_ATTRIBUTE_NAME         ,TAX_CODE_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --7. Validation for TAX rule .
       BEGIN
          TAX_EXEMPTION_ID      := TAX_EXEMPTION_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'TAX') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_EXEMPTION_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'TAX'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,TAX_EXEMPTION_ID_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --8. Validation for PDL rule .
       BEGIN
          CLVL_LIST_PRICE      := CLVL_LIST_PRICE_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CLVL_LIST_PRICE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'PDL'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,CLVL_LIST_PRICE_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --9. Validation for PDL rule .
       BEGIN
          CLVL_QUANTITY      := CLVL_QUANTITY_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CLVL_QUANTITY');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'PDL'    ,'RULE_INFORMATION2'   ,L_ATTRIBUTE_NAME         ,CLVL_QUANTITY_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --10. Validation for PDL rule .
       BEGIN
          CLVL_EXTENDED_AMT      := CLVL_EXTENDED_AMT_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CLVL_EXTENDED_AMT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'PDL'    ,'RULE_INFORMATION3'   ,L_ATTRIBUTE_NAME         ,CLVL_EXTENDED_AMT_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --11. Validation for PDL rule .
       BEGIN
          TOPLVL_OPERAND_VAL      := TOPLVL_OPERAND_VAL_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_OPERAND_VAL');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'PDL'    ,'RULE_INFORMATION6'   ,L_ATTRIBUTE_NAME         ,TOPLVL_OPERAND_VAL_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --12. Validation for PDL rule .
       BEGIN
          TOPLVL_QUANTITY      := TOPLVL_QUANTITY_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_QUANTITY');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'PDL'    ,'RULE_INFORMATION8'   ,L_ATTRIBUTE_NAME         ,TOPLVL_QUANTITY_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --13. Validation for PDL rule .
       BEGIN
          TOPLVL_ADJ_PRICE      := TOPLVL_ADJ_PRICE_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_ADJ_PRICE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'PDL'    ,'RULE_INFORMATION10'   ,L_ATTRIBUTE_NAME         ,TOPLVL_ADJ_PRICE_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --14. Validation for PDL rule .
       BEGIN
          TOPLVL_PRICE_QTY      := TOPLVL_PRICE_QTY_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_PRICE_QTY');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'PDL'    ,'RULE_INFORMATION13'   ,L_ATTRIBUTE_NAME         ,TOPLVL_PRICE_QTY_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --15. Validation for QRE rule .
       BEGIN
          AVERAGING_INTERVAL      := AVERAGING_INTERVAL_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'QRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_AVERAGING_INTERVAL');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'QRE'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,AVERAGING_INTERVAL_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --16. Validation for QRE rule .
       BEGIN
          MINIMUM_QUANTITY      := MINIMUM_QUANTITY_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'QRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_MINIMUM_QUANTITY');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'QRE'    ,'RULE_INFORMATION4'   ,L_ATTRIBUTE_NAME         ,MINIMUM_QUANTITY_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;


       --17. Validation for QRE rule .
       BEGIN
          DEFAULT_QUANTITY      := DEFAULT_QUANTITY_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'QRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DEFAULT_QUANTITY');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'QRE'    ,'RULE_INFORMATION5'   ,L_ATTRIBUTE_NAME         ,DEFAULT_QUANTITY_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --18. Validation for QRE rule .
       BEGIN
          FIXED_QUANTITY      := FIXED_QUANTITY_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'QRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_FIXED_QUANTITY');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'QRE'    ,'RULE_INFORMATION7'   ,L_ATTRIBUTE_NAME         ,FIXED_QUANTITY_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --19. Validation for QRE rule .
       BEGIN
          USAGE_DURATION      := USAGE_DURATION_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'QRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_USAGE_DURATION');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'QRE'    ,'RULE_INFORMATION8'   ,L_ATTRIBUTE_NAME         ,USAGE_DURATION_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --20. Validation for QRE rule .
       BEGIN
          BASE_READING      := BASE_READING_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'QRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BASE_READING');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'QRE'    ,'RULE_INFORMATION12'   ,L_ATTRIBUTE_NAME         ,BASE_READING_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --21. Validation for CAN rule .
       BEGIN
          CUST_ACCT_ID      := CUST_ACCT_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'CAN') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CUST_ACCT_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'CAN'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,CUST_ACCT_ID_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --22. Validation for BTO rule .
       BEGIN
          BILL_TO_SITE_USE_ID      := BILL_TO_SITE_USE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'BTO') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BILL_TO_SITE_USE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'BTO'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,BILL_TO_SITE_USE_ID_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --23. Validation for IRE rule .
       BEGIN
          INV_RULE_ID      := INV_RULE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'IRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_INV_RULE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'IRE'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,INV_RULE_ID_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --24. Validation for STO rule .
       BEGIN
          SHIP_TO_SITE_USE_ID      := SHIP_TO_SITE_USE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'STO') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_SHIP_TO_SITE_USE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'STO'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,SHIP_TO_SITE_USE_ID_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --25. Validation for PTR rule .
       BEGIN
          PAYMENT_TERM_ID      := PAYMENT_TERM_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'PTR') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PAYMENT_TERM_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'PTR'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,PAYMENT_TERM_ID_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --26. Validation for CCR rule .
       BEGIN
          CC_EXPIRY_DATE      := CC_EXPIRY_DATE_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'CCR') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CC_EXPIRY_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'CCR'    ,'RULE_INFORMATION2'   ,L_ATTRIBUTE_NAME         ,CC_EXPIRY_DATE_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --27. Validation for IBR  rule .
       BEGIN
          IB_TRANS_DATE      := IB_TRANS_DATE_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'IBR') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_IB_TRANS_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'IBR'    ,'RULE_INFORMATION2'   ,L_ATTRIBUTE_NAME         ,IB_TRANS_DATE_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;
    --28
       BEGIN
          EXCEPTION_COV_ID      := EXCEPTION_COV_ID_chr;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'ECE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EXCEPTION_COV_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'ECE'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,EXCEPTION_COV_ID_chr,
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || EXCEPTION_COV_ID_chr);
	  Eflag:=1;
       END;
--29
       BEGIN
          PM_PROGRAM_ID      := PM_PROGRAM_ID_chr;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'PMP') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PM_PROGRAM_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PMP'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,PM_PROGRAM_ID_chr,
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || PM_PROGRAM_ID_chr);
	  Eflag:=1;
       END;
--30
       BEGIN
          PRICE_LIST_ID      := PRICE_LIST_ID_chr;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'PRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PRICE_LIST_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PRE'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,PRICE_LIST_ID_chr,
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || PRICE_LIST_ID_chr);
	  Eflag:=1;
       END;
--31
       BEGIN
          RCN_INCIDENT_SEVERITY_ID      := RCN_INCIDENT_SEVERITY_ID_chr;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'RCN') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RCN_INCIDENT_SVR_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'RCN'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,RCN_INCIDENT_SEVERITY_ID_chr,
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || RCN_INCIDENT_SEVERITY_ID_chr);
	  Eflag:=1;
       END;
--32
       BEGIN
          RCN_PDF_ID      := RCN_PDF_ID_chr;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'RCN') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RCN_PDF_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'RCN'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,RCN_PDF_ID_chr,
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || RCN_PDF_ID_chr);
	  Eflag:=1;
       END;
--33
       BEGIN
          DISCOUNT_AMOUNT      := DISCOUNT_AMOUNT_chr;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'LMT') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DISCOUNT_AMOUNT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'LMT'    ,'RULE_INFORMATION2'   ,L_ATTRIBUTE_NAME         ,DISCOUNT_AMOUNT_chr,
                                       L_ERROR_MSG );
         -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || DISCOUNT_AMOUNT_chr);

	  Eflag:=1;
       END;
--34
       BEGIN
          DISCOUNT_PERCENT      := DISCOUNT_PERCENT_chr;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'LMT') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DISCOUNT_PERCENT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'LMT'    ,'RULE_INFORMATION4'   ,L_ATTRIBUTE_NAME         ,DISCOUNT_PERCENT_chr,
                                       L_ERROR_MSG );
         -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr);
	  Eflag:=1;
       END;

--53
       BEGIN
          LINE_LIST_PRICE      := LINE_LIST_PRICE_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(CLE_ID,DNZ_CHR_ID,'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_LINE_LIST_PRICE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PDL'    ,'RULE_INFORMATION4'   ,L_ATTRIBUTE_NAME         ,LINE_LIST_PRICE_CHR,
                                       L_ERROR_MSG );
         -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || LINE_LIST_PRICE_CHR);
	  Eflag:=1;
       END;
----------------------------------------------------------------------------------------------------------------------


End If;

--End of code for validation



IF Eflag = 1 THEN
   Eflag :=0;
   FND_FILE.PUT_LINE(FND_FILE.LOG ,'Validation failed for rgp_id :'||p_id||'Major Version: '||p_major_version||
   ' Error Message: '||L_ERROR_MSG);
   Raise VAL_EXCEPTION;
END IF;


If iEflag = 1 THEN
  iEflag := 0;
  FND_FILE.PUT_LINE(FND_FILE.LOG ,'Insert/Update failed for rgp_id :'||p_id||'Major Version: '||p_major_version||
  ' Error Message: '||Emsg);
  Raise MAIN_EXCEPTION;
End If;


 x_return_status:='S';


EXCEPTION
  WHEN MAIN_EXCEPTION THEN
    IF ISQLCODE in (1,-1) THEN
      x_return_status:='S';
    Else
      x_return_status:='E';
      Update oks_rule_reprocess
      set errormsg= Emsg
      where rowid=prow_id;
    End If;
  WHEN VAL_EXCEPTION THEN
       x_return_status:='E';
      Update oks_rule_reprocess
      set errormsg=L_ERROR_MSG
      where rowid=prow_id;
   WHEN OTHERS THEN
	X_RETURN_STATUS := 'E';
	L_ERROR_MSG := SQLERRM;
        Update oks_rule_reprocess
        set errormsg=L_ERROR_MSG
        where rowid=prow_id;
	FND_FILE.PUT_LINE(FND_FILE.LOG ,'DML Failed for'||p_id||'with Error Message '||L_ERROR_MSG);


END REPROCESS_LINE_HIST_RULE;



-----------------------------------------------------------------------------------------
-- This is the  Procedure called from the procedure REPROCESS_RULE_DATA_MAIN         --
--  Subrequest code for -"Service Contracts -Reeporcess rule data"         --
-----------------------------------------------------------------------------------------

PROCEDURE REPROCESS_RULE_DATA_SUBREQ(
    ERRBUF            OUT NOCOPY VARCHAR2,
    RETCODE           OUT NOCOPY NUMBER,
    P_BATCH_SIZE      IN  NUMBER,
    P_ID_LOW          IN  NUMBER,
    P_ID_HI           IN  NUMBER ) IS

TYPE L_NUM_TBL IS TABLE OF NUMBER INDEX BY BINARY_INTEGER ;
TYPE L_CHR_TBL IS TABLE OF VARCHAR2(2000) INDEX  BY BINARY_INTEGER ;
TYPE RowId_tbl_Type IS TABLE OF ROWID INDEX BY BINARY_INTEGER;


Cursor L_GET_REPROC_CSR (P_ID_LOW IN NUMBER,P_ID_HI IN NUMBER)
IS
Select rowid,
       id,
       major_version,
       misc
from   oks_rule_reprocess
where  id between P_ID_LOW and P_ID_HI;

L_ROWID                  RowId_tbl_Type;
L_RGP_ID                 L_NUM_TBL;
LEVEL                   L_CHR_TBL;
L_MAJOR_VERSION         L_NUM_TBL;
l_return_status         VARCHAR2(1);
L_DELETE_RGP_ID         L_NUM_TBL;
L_DELETE_ROWID         RowId_tbl_Type;
L_DELETE_COUNT          L_NUM_TBL;
j                       NUMBER := 0;


----------------------------------------------------------------
----------For NLS Numeric Characters---------------------------
-----------------------------------------------------------------
l_format varchar2(200);
l_us_yn boolean;

CURSOR l_nls_csr is
select   c.profile_option_value
  from   fnd_profile_options p,
         fnd_profile_option_values c
 where  p.profile_option_name = 'ICX_NUMERIC_CHARACTERS'
   and    p.start_date_active  <= sysdate
   and    nvl(p.end_date_active, sysdate) >= sysdate
   and    c.profile_option_id = p.profile_option_id
   and    c.application_id    = p.application_id
   and    c.level_id          = 10001
   and    c.level_value       = 0;
------------------------------------------------------------------


BEGIN

 open  l_nls_csr;
 fetch l_nls_csr into l_format;
 close l_nls_csr;
 if SUBSTR(l_format,0,1) = ',' THEN
    l_us_yn := false;
 else
    l_us_yn := true;
 end if;

Open L_GET_REPROC_CSR(P_ID_LOW,P_ID_HI);

LOOP
  FETCH L_GET_REPROC_CSR BULK COLLECT INTO L_ROWID,L_RGP_ID,L_MAJOR_VERSION,LEVEL
  LIMIT P_BATCH_SIZE;
  EXIT WHEN L_RGP_ID.COUNT=0;
  FOR I IN L_RGP_ID.FIRST..L_RGP_ID.LAST
  LOOP
     l_return_status:=NULL;
     If(LEVEL(I) = 'OKSHEDRS')  Then
         REPROCESS_HDR_RULE(L_ROWID(I),L_RGP_ID(I),l_us_yn,l_return_status);
         If l_return_status = 'S' Then
            j:=j+1;
            L_DELETE_ROWID(j) := L_ROWID(I);
         End If;
     ElsIf(LEVEL(I) = 'OKSLINES' )  Then
         REPROCESS_LINE_RULE(L_ROWID(I),L_RGP_ID(I),l_us_yn,l_return_status);
         If l_return_status = 'S' Then
            j:=j+1;
            L_DELETE_ROWID(j) := L_ROWID(I);
         End If;
     ElsIf(LEVEL(I) = 'OKSLINEH' )  Then
         REPROCESS_LINE_HIST_RULE(L_ROWID(I),L_RGP_ID(I),L_MAJOR_VERSION(I),l_us_yn,l_return_status);
         If l_return_status = 'S' Then
            j:=j+1;
            L_DELETE_ROWID(j) := L_ROWID(I);
         End If;
     ElsIf(LEVEL(I) = 'OKSHEDRH' )  Then
         REPROCESS_HDR_HIST_RULE(L_ROWID(I),L_RGP_ID(I),L_MAJOR_VERSION(I),l_us_yn,l_return_status);
         If l_return_status = 'S' Then
            j:=j+1;
            L_DELETE_ROWID(j) := L_ROWID(I);
         End If;
     Elsif ( LEVEL(I) = 'OKSSYNHL' ) Then
         REPROCESS_SYNCHL_RULE(L_ROWID(I),L_RGP_ID(I),L_MAJOR_VERSION(I),l_us_yn,l_return_status);
         If l_return_status = 'S' Then
            j:=j+1;
            L_DELETE_ROWID(j) := L_ROWID(I);
         End If;
     Elsif ( LEVEL(I) = 'OKSLEVEL' ) Then
         REPROCESS_OKSLEVEL(L_ROWID(I),L_RGP_ID(I),L_MAJOR_VERSION(I),l_us_yn,l_return_status);
         If l_return_status = 'S' Then
            j:=j+1;
            L_DELETE_ROWID(j) := L_ROWID(I);
         End If;
     End If;

  ------------------------------------------------------------------
  -- Do commit after every 500 procedure calls                     --
  ------------------------------------------------------------------
     IF L_DELETE_ROWID.COUNT > 500 THEN
        BEGIN
           FORALL X IN L_DELETE_ROWID.FIRST..L_DELETE_ROWID.LAST
             DELETE /*+ PARALLEL(OKS) */
               FROM  OKS_RULE_REPROCESS OKS
              WHERE ROWID = L_DELETE_ROWID(X);


        j := 0;
        FND_FILE.PUT_LINE(FND_FILE.LOG ,'Number of records reprocessed : '||L_DELETE_ROWID.COUNT);
        L_DELETE_ROWID.DELETE;
        COMMIT;

        EXCEPTION WHEN OTHERS THEN
            ROLLBACK;
        END;
    END IF;

  END LOOP;
  L_RGP_ID.DELETE;
END LOOP;
CLOSE L_GET_REPROC_CSR;

  ------------------------------------------------------------------
  -- The Following logic is to process any left over records      --
  ------------------------------------------------------------------
  IF L_DELETE_ROWID.COUNT > 0 THEN
        BEGIN
           FORALL X IN L_DELETE_ROWID.FIRST..L_DELETE_ROWID.LAST
             DELETE /*+ PARALLEL(OKS) */
               FROM  OKS_RULE_REPROCESS OKS
              WHERE ROWID = L_DELETE_ROWID(X);


        j := 0;
        FND_FILE.PUT_LINE(FND_FILE.LOG ,'Number of records reprocessed : '||L_DELETE_ROWID.COUNT);
        L_DELETE_ROWID.DELETE;
        COMMIT;

        EXCEPTION WHEN OTHERS THEN
            ROLLBACK;
        END;
    END IF;



END REPROCESS_RULE_DATA_SUBREQ;

-----------------------------------------------------------------------------------------
-- This is the  Procedure called from the procedure SYNCHRONIZE_RULE_DATA_MAIN         --
--  Subrequest code for -"Service Contracts -Synchronize rule data"         --
-----------------------------------------------------------------------------------------

PROCEDURE SYNCHRONIZE_RULE_DATA_SUBREQ(
    ERRBUF            OUT NOCOPY VARCHAR2,
    RETCODE           OUT NOCOPY NUMBER,
    P_BATCH_SIZE      IN  NUMBER,
    P_ID_LOW          IN  NUMBER,
    P_ID_HI           IN  NUMBER ) IS

 TYPE L_NUM_TBL IS TABLE OF NUMBER INDEX BY BINARY_INTEGER ;
 TYPE L_CHR_TBL IS TABLE OF VARCHAR2(2000) INDEX  BY BINARY_INTEGER ;

 TYPE L_CSR IS REF CURSOR;
 L_GET_UPG_CSR           L_CSR ;
 L_RGP_ID                NUMBER;
 L_CLE_ID                NUMBER;
 L_CHR_ID                NUMBER;
 L_DNZ_CHR_ID                NUMBER;
 L_STMT                  VARCHAR2(2000);
 L_RIC                   VARCHAR2(3);
 L_MAJOR_VERSION         NUMBER;

 L_COUNT                 NUMBER;
 L_DELETE_RGP_ID         L_NUM_TBL;
 L_DELETE_COUNT          L_NUM_TBL;
 L_DELETE_CATEGORY       L_CHR_TBL;

 L_RETURN_STATUS         VARCHAR2(1);
 I                       NUMBER := 0;

 ----------------------------------------------------------------
----------For NLS Numeric Characters---------------------------
-----------------------------------------------------------------
l_format varchar2(200);
l_us_yn boolean;

CURSOR l_nls_csr is
select   c.profile_option_value
  from   fnd_profile_options p,
         fnd_profile_option_values c
 where   p.profile_option_name = 'ICX_NUMERIC_CHARACTERS'
   and   p.start_date_active  <= sysdate
   and   nvl(p.end_date_active, sysdate) >= sysdate
   and   c.profile_option_id = p.profile_option_id
   and   c.application_id    = p.application_id
   and   c.level_id          = 10001
   and   c.level_value       = 0;
------------------------------------------------------------------


BEGIN

 open  l_nls_csr;
 fetch l_nls_csr into l_format;
 close l_nls_csr;
 if SUBSTR(l_format,0,1) = ',' THEN
    l_us_yn := false;
 else
    l_us_yn := true;
 end if;



  L_STMT :=  ' SELECT RGP_ID ,CLE_ID , CHR_ID, DNZ_CHR_ID ' ||
             ' ,SUM(COUNT(*)) OVER (ORDER BY RGP_ID ROWS UNBOUNDED PRECEDING) '||
--             ' ,DECODE(RULE_INFORMATION_CATEGORY,''SLL'' ,''SLL'',''CVR'' ,''CVR'', ''RCN'' ,''RCN'',''RSN'',''RSN'',''ALL'') '||
             ' ,RIC_CODE , Major_version'||
	     ' FROM OKS_RULE_UPGRADE '||
             ' WHERE RGP_ID BETWEEN :1 AND :2 '||
             ' GROUP BY RGP_ID , CLE_ID, CHR_ID, DNZ_CHR_ID '||
--             ' ,DECODE(RULE_INFORMATION_CATEGORY,''SLL'' ,''SLL'',''CVR'' ,''CVR'', ''RCN'' ,''RCN'',''RSN'', ''RSN'' ,''ALL'') ' ;
             ' ,RIC_CODE,Major_version ';

  OPEN L_GET_UPG_CSR FOR L_STMT USING P_ID_LOW , P_ID_HI ;
  LOOP
     FETCH L_GET_UPG_CSR INTO L_RGP_ID ,  L_CLE_ID, L_CHR_ID,L_DNZ_CHR_ID, L_COUNT , L_RIC,L_MAJOR_VERSION;
     EXIT WHEN L_GET_UPG_CSR%NOTFOUND;

     L_RETURN_STATUS:=NULL;

     IF L_CLE_ID IS NOT NULL AND L_RIC = 'ALL' AND L_MAJOR_VERSION IS NULL THEN
        -----------------------------------------------
        -- Call Line RULE Synchronization procedure
	-----------------------------------------------
        SYNCHRONIZE_RULE_LINE(L_RGP_ID,L_CLE_ID,L_DNZ_CHR_ID,l_us_yn,L_RETURN_STATUS);
        IF L_RETURN_STATUS = 'S' then
           I := I+1;
           L_DELETE_RGP_ID(I)   := L_RGP_ID;
           IF (I-1) = 0 THEN
              L_DELETE_COUNT(I)    := L_COUNT+1;
           ELSE
              L_DELETE_COUNT(I)    :=L_COUNT - L_DELETE_COUNT(I-1)+2;
           END IF;
           L_DELETE_CATEGORY(I) := 'ALL';
        END IF;
     ELSIF L_CLE_ID IS NOT NULL AND L_RIC = 'ALL' AND L_MAJOR_VERSION IS NOT NULL THEN
        -----------------------------------------------
        -- Call Line History  RULE Synchronization procedure
	-----------------------------------------------
        SYNCHRONIZE_RULE_LINEH(L_RGP_ID,L_CLE_ID,L_DNZ_CHR_ID,L_MAJOR_VERSION,l_us_yn,L_RETURN_STATUS);
        IF L_RETURN_STATUS = 'S' then
           I := I+1;
           L_DELETE_RGP_ID(I)   := L_RGP_ID;
           IF (I-1) = 0 THEN
              L_DELETE_COUNT(I)    := L_COUNT+1;
           ELSE
              L_DELETE_COUNT(I)    :=L_COUNT - L_DELETE_COUNT(I-1)+2;
           END IF;
           L_DELETE_CATEGORY(I) := 'ALL';
        END IF;
     ELSIF L_CHR_ID IS NOT NULL AND L_RIC = 'ALL' AND L_MAJOR_VERSION IS NULL THEN
        -----------------------------------------------
        -- Call Header Rule Synchronization procedure
        -----------------------------------------------
        SYNCHRONIZE_RULE_HDR(L_RGP_ID,L_CHR_ID,l_us_yn,L_RETURN_STATUS);
        IF L_RETURN_STATUS = 'S' then
           I := I+1;
           L_DELETE_RGP_ID(I)   := L_RGP_ID;
           IF (I-1) = 0 THEN
              L_DELETE_COUNT(I)    := L_COUNT+1;
           ELSE
              L_DELETE_COUNT(I)    :=L_COUNT - L_DELETE_COUNT(I-1)+2;
           END IF;
           L_DELETE_CATEGORY(I) := 'ALL';
        END IF;
     ELSIF L_CHR_ID IS NOT NULL AND L_RIC = 'ALL' AND L_MAJOR_VERSION IS NOT NULL THEN
        -----------------------------------------------
        -- Call Header History Rule Synchronization procedure
        -----------------------------------------------
        SYNCHRONIZE_RULE_HDRH(L_RGP_ID,L_CHR_ID,L_MAJOR_VERSION,l_us_yn,L_RETURN_STATUS);
        IF L_RETURN_STATUS = 'S' then
           I := I+1;
           L_DELETE_RGP_ID(I)   := L_RGP_ID;
           IF (I-1) = 0 THEN
              L_DELETE_COUNT(I)    := L_COUNT+1;
           ELSE
              L_DELETE_COUNT(I)    :=L_COUNT - L_DELETE_COUNT(I-1)+2;
           END IF;
           L_DELETE_CATEGORY(I) := 'ALL';
        END IF;
     ELSIF L_CLE_ID IS NOT NULL AND L_RIC = 'IGS' AND  L_MAJOR_VERSION IS NULL THEN
        -----------------------------------------------
        -- CAll Covereage Migration procedure

	SYNCHRONIZE_RULE_CVR(L_RGP_ID,L_CLE_ID,L_DNZ_CHR_ID,NULL,L_RETURN_STATUS);
        -----------------------------------------------

        IF L_RETURN_STATUS = 'S' then
           I := I+1;
           L_DELETE_RGP_ID(I)   := L_RGP_ID;
           IF (I-1) = 0 THEN
              L_DELETE_COUNT(I)    := L_COUNT+1;
           ELSE
              L_DELETE_COUNT(I)    :=L_COUNT - L_DELETE_COUNT(I-1)+2;
           END IF;
           L_DELETE_CATEGORY(I) := 'IGS';
        END IF;
     ELSIF L_CLE_ID IS NOT NULL AND L_RIC = 'IGS' AND  L_MAJOR_VERSION IS NOT NULL THEN
        -----------------------------------------------
        -- CAll Covereage History Migration procedure

	SYNCHRONIZE_RULE_CVR(L_RGP_ID,L_CLE_ID,L_DNZ_CHR_ID,L_MAJOR_VERSION,L_RETURN_STATUS);
        -----------------------------------------------

        IF L_RETURN_STATUS = 'S' then
           I := I+1;
           L_DELETE_RGP_ID(I)   := L_RGP_ID;
           IF (I-1) = 0 THEN
              L_DELETE_COUNT(I)    := L_COUNT+1;
           ELSE
              L_DELETE_COUNT(I)    :=L_COUNT - L_DELETE_COUNT(I-1)+2;
           END IF;
           L_DELETE_CATEGORY(I) := 'IGS';
        END IF;

     ELSIF L_CLE_ID IS NOT NULL AND L_RIC = 'OFS' THEN
        -----------------------------------------------
        -- CAll Covereage Migration procedure

	SYNCHRONIZE_RULE_OFS(L_RGP_ID,L_CLE_ID,L_DNZ_CHR_ID,L_MAJOR_VERSION,L_RETURN_STATUS);
        -----------------------------------------------

        IF L_RETURN_STATUS = 'S' then
           I := I+1;
           L_DELETE_RGP_ID(I)   := L_RGP_ID;
           IF (I-1) = 0 THEN
              L_DELETE_COUNT(I)    := L_COUNT+1;
           ELSE
              L_DELETE_COUNT(I)    :=L_COUNT - L_DELETE_COUNT(I-1)+2;
           END IF;
           L_DELETE_CATEGORY(I) := 'OFS';
        END IF;

     ELSIF L_CLE_ID IS NOT NULL AND L_RIC IN ( 'RIN' ) AND  L_MAJOR_VERSION IS NULL THEN
        FND_FILE.PUT_LINE(FND_FILE.LOG ,'Beforre Call');

        -----------------------------------------------
	SYNCHRONIZE_RULE_ATM(L_RGP_ID,L_CLE_ID,L_DNZ_CHR_ID,L_RETURN_STATUS);
        -----------------------------------------------
        FND_FILE.PUT_LINE(FND_FILE.LOG ,'After Call'||l_return_status);
        IF L_RETURN_STATUS = 'S' then
           I := I+1;
           L_DELETE_RGP_ID(I)   := L_RGP_ID;
           IF (I-1) = 0 THEN
              L_DELETE_COUNT(I)    := L_COUNT+1;
           ELSE
              L_DELETE_COUNT(I)    :=L_COUNT - L_DELETE_COUNT(I-1)+2;
           END IF;
           L_DELETE_CATEGORY(I) := 'RIN';
        END IF;

     ELSIF L_CLE_ID IS NOT NULL AND L_RIC IN ( 'RIN' ) AND  L_MAJOR_VERSION IS NOT NULL THEN
        -----------------------------------------------
	SYNCHRONIZE_RULE_ATMH(L_RGP_ID,L_CLE_ID,L_DNZ_CHR_ID,L_MAJOR_VERSION,L_RETURN_STATUS);
        -----------------------------------------------
        IF L_RETURN_STATUS = 'S' then
           I := I+1;
           L_DELETE_RGP_ID(I)   := L_RGP_ID;
           IF (I-1) = 0 THEN
              L_DELETE_COUNT(I)    := L_COUNT+1;
           ELSE
              L_DELETE_COUNT(I)    :=L_COUNT - L_DELETE_COUNT(I-1)+2;
           END IF;
           L_DELETE_CATEGORY(I) := 'RIN';
        END IF;
     ELSIF L_CLE_ID IS NOT NULL AND L_RIC IN ( 'PML' ) AND  L_MAJOR_VERSION IS NULL THEN
        -----------------------------------------------
	SYNCHRONIZE_RULE_PML(L_RGP_ID,L_CLE_ID,L_DNZ_CHR_ID,L_RETURN_STATUS);
        -----------------------------------------------
        IF L_RETURN_STATUS = 'S' then
           I := I+1;
           L_DELETE_RGP_ID(I)   := L_RGP_ID;
           IF (I-1) = 0 THEN
              L_DELETE_COUNT(I)    := L_COUNT+1;
           ELSE
              L_DELETE_COUNT(I)    :=L_COUNT - L_DELETE_COUNT(I-1)+2;
           END IF;
           L_DELETE_CATEGORY(I) := 'PML';
        END IF;
     ELSIF L_CLE_ID IS NOT NULL AND L_RIC='SLL'  THEN
        -----------------------------------------------
	SYNCHRONIZE_RULE_SLL(L_RGP_ID,L_CLE_ID,l_us_yn,L_RETURN_STATUS);
        -----------------------------------------------
        IF L_RETURN_STATUS = 'S' then
           I := I+1;
           L_DELETE_RGP_ID(I)   := L_RGP_ID;
           IF (I-1) = 0 THEN
              L_DELETE_COUNT(I)    := L_COUNT+1;
           ELSE
              L_DELETE_COUNT(I)    :=L_COUNT - L_DELETE_COUNT(I-1)+2;
           END IF;
           L_DELETE_CATEGORY(I) := 'SLL';
        END IF;
     ELSIF L_CHR_ID IS NOT NULL AND L_CLE_ID IS NULL AND L_RIC='SLL'  THEN
	   -----------------------------------------------
	 SYNCHRONIZE_RULE_SLLH(L_RGP_ID,L_CHR_ID,l_us_yn,L_RETURN_STATUS);
	    -----------------------------------------------
       IF L_RETURN_STATUS = 'S' then
          I := I+1;
	     L_DELETE_RGP_ID(I)   := L_RGP_ID;
		IF (I-1) = 0 THEN
		    L_DELETE_COUNT(I)    := L_COUNT+1;
     	ELSE
		    L_DELETE_COUNT(I)    :=L_COUNT - L_DELETE_COUNT(I-1)+2;
     	END IF;
          L_DELETE_CATEGORY(I) := 'SLL';
       END IF;
     ELSIF L_CLE_ID IS NOT NULL AND L_RIC IN ( 'PML' ) AND  L_MAJOR_VERSION IS NOT NULL THEN
        -----------------------------------------------
	--SYNCHRONIZE_RULE_PML(L_RGP_ID,L_CLE_ID,L_DNZ_CHR_ID,L_RETURN_STATUS);
        -----------------------------------------------
        --IF L_RETURN_STATUS = 'S' then
           I := I+1;
           L_DELETE_RGP_ID(I)   := L_RGP_ID;
           IF (I-1) = 0 THEN
              L_DELETE_COUNT(I)    := L_COUNT+1;
           ELSE
              L_DELETE_COUNT(I)    :=L_COUNT - L_DELETE_COUNT(I-1)+2;
           END IF;
           L_DELETE_CATEGORY(I) := 'PML';
        --END IF;
     END IF;

  ------------------------------------------------------------------
  -- Do commit after every 500 procedure calls                     --
  ------------------------------------------------------------------
     IF L_DELETE_RGP_ID.COUNT > 500 THEN
        BEGIN
           FORALL X IN L_DELETE_COUNT.FIRST..L_DELETE_COUNT.LAST
             DELETE /*+ PARALLEL(OKS) */
               FROM  OKS_RULE_UPGRADE OKS
              WHERE RGP_ID = L_DELETE_RGP_ID(X)
                AND RIC_CODE = L_DELETE_CATEGORY(X)
                AND ROWNUM < L_DELETE_COUNT(X);

        I := 0;
        FND_FILE.PUT_LINE(FND_FILE.LOG ,'Number of records synchronized: '||L_DELETE_RGP_ID.COUNT);
        L_DELETE_RGP_ID.DELETE;
        L_DELETE_CATEGORY.DELETE;
        L_DELETE_COUNT.DELETE;
        COMMIT;

        EXCEPTION WHEN OTHERS THEN
            ROLLBACK;
        END;
    END IF;

  END LOOP;
  CLOSE l_GET_UPG_CSR;

  ------------------------------------------------------------------
  -- The Following logic is to process any left over records      --
  ------------------------------------------------------------------
  IF L_DELETE_RGP_ID.COUNT > 0 THEN
        BEGIN
           FORALL X IN L_DELETE_COUNT.FIRST..L_DELETE_COUNT.LAST
             DELETE /*+ PARALLEL(OKS) */
               FROM  OKS_RULE_UPGRADE OKS
              WHERE RGP_ID = L_DELETE_RGP_ID(X)
                AND RIC_CODE = L_DELETE_CATEGORY(X)
                AND ROWNUM < L_DELETE_COUNT(X);

        I := 0;
        FND_FILE.PUT_LINE(FND_FILE.LOG ,'Number of records synchronized: '||L_DELETE_RGP_ID.COUNT);
        L_DELETE_RGP_ID.DELETE;
        L_DELETE_CATEGORY.DELETE;
        L_DELETE_COUNT.DELETE;
        COMMIT;

        EXCEPTION WHEN OTHERS THEN
            ROLLBACK;
        END;
    END IF;


END;

-----------------------------------------------------------------------------------------
-- This is the  Procedure called from the procedure SYNCHRONIZE_RULE_DATA_SUBREQ         --
--   code for -Synchronize Header rule data         --
-----------------------------------------------------------------------------------------



PROCEDURE SYNCHRONIZE_RULE_HDR(
    P_RGP_ID          IN NUMBER,
    P_CHR_ID          IN NUMBER,
    p_us_yn           in BOOLEAN,
    x_return_status            out NOCOPY VARCHAR2)

IS


DNZ_CHR_ID                NUMBER ;
ACCT_RULE_ID              NUMBER ;
L_PAYMENT_TYPE              VARCHAR2(2000) ;
L_CC_NO                     VARCHAR2(2000) ;
CC_EXPIRY_DATE            date;
CC_BANK_ACCT_ID           NUMBER ;
L_CC_AUTH_CODE              VARCHAR2(2000) ;
GRACE_DURATION            NUMBER ;
L_GRACE_PERIOD              VARCHAR2(2000) ;
EST_REV_PERCENT           NUMBER ;
EST_REV_DATE              date;
L_INVOICE_TEXT              VARCHAR2(2000) ;
L_INV_PRINT_FLAG            VARCHAR2(2000) ;
L_PRICE_UOM                 VARCHAR2(2000) ;
TAX_AMOUNT                NUMBER ;
L_TAX_INCLUSIVE_YN          VARCHAR2(2000) ;
L_TAX_STATUS                VARCHAR2(2000) ;
TAX_CODE                  NUMBER ;
TAX_EXEMPTION_ID          NUMBER ;
L_BILLING_SCHEDULE_TYPE     VARCHAR2(2000) ;
CUST_ACCT_ID              NUMBER ;
BILL_TO_SITE_USE_ID       NUMBER ;
INV_RULE_ID               NUMBER ;
L_RENEWAL_TYPE_CODE         VARCHAR2(2000) ;
RENEWAL_NOTIFY_TO         NUMBER ;
RENEWAL_END_DATE          date;
SHIP_TO_SITE_USE_ID       NUMBER ;
PAYMENT_TERM_ID           NUMBER ;
BILLING_PROFILE_ID        NUMBER ;
L_RENEWAL_STATUS            VARCHAR2(2000) ;
L_ELECTRONIC_RENEWAL_FLAG   VARCHAR2(2000) ;
QUOTE_TO_CONTACT_ID       NUMBER ;
QUOTE_TO_SITE_ID          NUMBER ;
QUOTE_TO_EMAIL_ID         NUMBER ;
QUOTE_TO_PHONE_ID         NUMBER ;
QUOTE_TO_FAX_ID           NUMBER ;
L_RENEWAL_PO_REQUIRED       VARCHAR2(2000) ;
RENEWAL_PRICE_LIST        NUMBER ;
L_RENEWAL_PRICING_TYPE      VARCHAR2(2000) ;
RENEWAL_MARKUP_PERCENT    NUMBER ;
RENEWAL_GRACE_DURATION    NUMBER ;
L_RENEWAL_GRACE_PERIOD      VARCHAR2(2000) ;
RENEWAL_EST_REV_PERCENT   NUMBER ;
RENEWAL_EST_REV_DURATION  NUMBER ;
L_RENEWAL_EST_REV_PERIOD    VARCHAR2(2000) ;
RENEWAL_PRICE_LIST_USED   NUMBER ;
L_RENEWAL_TYPE_USED         VARCHAR2(2000) ;
RENEWAL_NOTIFICATION_TO   NUMBER ;
L_RENEWAL_PO_USED           VARCHAR2(2000) ;
L_RENEWAL_PRICING_TYPE_USED VARCHAR2(2000) ;
RENEWAL_MARKUP_PERCENT_USED   NUMBER ;
REV_EST_PERCENT_USED      NUMBER ;
REV_EST_DURATION_USED     NUMBER ;
BILLING_PROFILE_USED      NUMBER ;
L_REV_EST_PERIOD_USED       VARCHAR2(2000) ;
L_ERN_FLAG_USED_YN          VARCHAR2(2000) ;
EVN_THRESHOLD_AMT         NUMBER ;
L_EVN_THRESHOLD_CUR         VARCHAR2(2000) ;
ERN_THRESHOLD_AMT         NUMBER ;
L_ERN_THRESHOLD_CUR         VARCHAR2(2000) ;
RENEWAL_GRACE_DURATION_USED   NUMBER ;
L_RENEWAL_GRACE_PERIOD_USED VARCHAR2(2000) ;
L_INV_TRX_TYPE              VARCHAR2(2000) ;
L_INV_PRINT_PROFILE         VARCHAR2(2000) ;
L_RENEWAL_PO_NUMBER         VARCHAR2(2000) ;
L_AR_INTERFACE_YN           VARCHAR2(2000) ;
L_HOLD_BILLING              VARCHAR2(2000) ;
L_SUMMARY_TRX_YN            VARCHAR2(2000) ;
L_SERVICE_PO_NUMBER         VARCHAR2(2000) ;
L_SERVICE_PO_REQUIRED       VARCHAR2(2000) ;
PRICE_LIST_ID             NUMBER ;
L_CONVERSION_TYPE           VARCHAR2(2000) ;
CONVERSION_RATE           NUMBER ;
CONVERSION_RATE_DATE      date;
CONVERSION_EURO_RATE      NUMBER ;



-- FOLLOWING ARE NUMBER FIELDS --
ACCT_RULE_ID_CHR              VARCHAR2(2000) ;
CC_BANK_ACCT_ID_CHR           VARCHAR2(2000) ;
GRACE_DURATION_CHR            VARCHAR2(2000) ;
EST_REV_PERCENT_CHR           VARCHAR2(2000) ;
TAX_AMOUNT_CHR                VARCHAR2(2000) ;
TAX_CODE_CHR                  VARCHAR2(2000) ;
TAX_EXEMPTION_ID_CHR          VARCHAR2(2000) ;
CUST_ACCT_ID_CHR              VARCHAR2(2000) ;
BILL_TO_SITE_USE_ID_CHR       VARCHAR2(2000) ;
INV_RULE_ID_CHR               VARCHAR2(2000) ;
RENEWAL_NOTIFY_TO_CHR         VARCHAR2(2000) ;
SHIP_TO_SITE_USE_ID_CHR       VARCHAR2(2000) ;
PAYMENT_TERM_ID_CHR           VARCHAR2(2000) ;
BILLING_PROFILE_ID_CHR        VARCHAR2(2000) ;
QUOTE_TO_CONTACT_ID_CHR       VARCHAR2(2000) ;
QUOTE_TO_SITE_ID_CHR          VARCHAR2(2000) ;
QUOTE_TO_EMAIL_ID_CHR         VARCHAR2(2000) ;
QUOTE_TO_PHONE_ID_CHR         VARCHAR2(2000) ;
QUOTE_TO_FAX_ID_CHR           VARCHAR2(2000) ;
RENEWAL_PRICE_LIST_CHR        VARCHAR2(2000) ;
RENEWAL_MARKUP_PERCENT_CHR    VARCHAR2(2000) ;
RENEWAL_GRACE_DURATION_CHR    VARCHAR2(2000) ;
RENEWAL_EST_REV_PERCENT_CHR   VARCHAR2(2000) ;
RENEWAL_EST_REV_DURATION_CHR  VARCHAR2(2000) ;
RENEWAL_PRICE_LIST_USED_CHR   VARCHAR2(2000) ;
RENEWAL_NOTIFICATION_TO_CHR   VARCHAR2(2000) ;
RENEWAL_MARKUP_PERCENT_USED_CH VARCHAR2(2000) ;
REV_EST_PERCENT_USED_CHR      VARCHAR2(2000) ;
REV_EST_DURATION_USED_CHR     VARCHAR2(2000) ;
BILLING_PROFILE_USED_CHR      VARCHAR2(2000) ;
EVN_THRESHOLD_AMT_CHR         VARCHAR2(2000) ;
ERN_THRESHOLD_AMT_CHR         VARCHAR2(2000) ;
RENEWAL_GRACE_DURATION_USED_CH VARCHAR2(2000) ;
PRICE_LIST_ID_CHR             VARCHAR2(2000) ;
CONVERSION_RATE_CHR           VARCHAR2(2000) ;
CONVERSION_EURO_RATE_CHR      VARCHAR2(2000) ;

-- FOLLOWING ARE DATE FIELDS --
CC_EXPIRY_DATE_CHR            VARCHAR2(2000) ;
EST_REV_DATE_CHR              VARCHAR2(2000) ;
RENEWAL_END_DATE_CHR          VARCHAR2(2000) ;
CONVERSION_RATE_DATE_CHR      VARCHAR2(2000) ;

--Misc Variables --
L_ATTRIBUTE_NAME              VARCHAR2(2000);
L_ERROR_MSG                   VARCHAR2(2000);
l_check_var                   VARCHAR2(1);
l_check_var1                  VARCHAR2(1);

MAIN_EXCEPTION              EXCEPTION;
VAL_EXCEPTION               EXCEPTION;
LOCK_EXCEPTION              EXCEPTION;
L_LOCK_ID                   NUMBER;

CURSOR L_LOCK_HDR_CSR (p_id in number ) IS
SELECT ID
FROM OKC_K_HEADERS_B
WHERE ID = P_ID
FOR UPDATE NOWAIT;




Eflag                        NUMBER;
Emsg                         VARCHAR2(2000);

CURSOR l_hdr_rule_csr (p_id in NUMBER)is
SELECT
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),
       --               '!,.','!')                                                           ACCT_RULE_ID
        MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1))                   ACCT_RULE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,'CCR'))                             PAYMENT_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION1))             CC_NO
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,
                  to_date(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                    CC_EXPIRY_DATE
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
       --               '!,.' , '!')                                                         CC_BANK_ACCT_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3))             CC_BANK_ACCT_ID

       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION4))             CC_AUTH_CODE
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
       --               '!,.','!')                                                           GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1))             GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION2))             GRACE_PERIOD
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)),
       --               '!,','!')                                                            EST_REV_PERCENT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1))             EST_REV_PERCENT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,
                    to_date(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                  EST_REV_DATE
       -- Checked in gsidev conversion needed.
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
                      '!,' ,'!' )                                                            TAX_AMOUNT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.RULE_INFORMATION2))             TAX_STATUS
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
                      '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-,. ' , '!')     TAX_CODE
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
       --               '!,.','!')                                                             TAX_EXEMPTION_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1))                  TAX_EXEMPTION_ID
       --,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLH' ,RUL.RULE_INFORMATION1))             BILLING_SCHEDULE_TYPE
       ,decode(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION_CATEGORY)),'QRE','T',
                MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLH' ,RUL.RULE_INFORMATION1)) )   BILLING_SCHEDULE_TYPE
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),
                      '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_- ,.','!')       BILLING_PROFILE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION2))             RENEWAL_STATUS
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION3))             ELECTRONIC_RENEWAL_FLAG
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),
       --               '!,.' ,'!')                                                          QUOTE_TO_CONTACT_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1))                   QUOTE_TO_CONTACT_ID
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT2_ID1)),
       --               '!,.','!')                                                           QUOTE_TO_SITE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4))            QUOTE_TO_SITE_ID
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),
       --               '!,.','!')                                                           QUOTE_TO_EMAIL_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1))             QUOTE_TO_EMAIL_ID
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),
       --               '!,.','!')                                                           QUOTE_TO_PHONE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2))             QUOTE_TO_PHONE_ID
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),
       --               '!,.','!')                                                           QUOTE_TO_FAX_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3))             QUOTE_TO_FAX_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPO' ,RUL.RULE_INFORMATION1))             RENEWAL_PO_REQUIRED
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),
       --               '!,.','!')                                                           RENEWAL_PRICE_LIST
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1))                   RENEWAL_PRICE_LIST
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION1))             RENEWAL_PRICING_TYPE
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),
       --               '!%,' ,'!')                                                          RENEWAL_MARKUP_PERCENT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2))             RENEWAL_MARKUP_PERCENT
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),
       --               '!,.','!')                                                           RENEWAL_GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3))             RENEWAL_GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION4))             RENEWAL_GRACE_PERIOD
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),
       --               '!%,' ,'!')                                                          RENEWAL_EST_REV_PERCENT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1))             RENEWAL_EST_REV_PERCENT
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),
       --               '!,.','!')                                                           RENEWAL_EST_REV_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2))             RENEWAL_EST_REV_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION3))             RENEWAL_EST_REV_PERIOD
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),
       --               '!,.','!')                                                           RENEWAL_PRICE_LIST_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1))                   RENEWAL_PRICE_LIST_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION1))             RENEWAL_TYPE_USED
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),
       --               '!,.','!')                                                           RENEWAL_NOTIFICATION_TO
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2))             RENEWAL_NOTIFICATION_TO
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION3))             RENEWAL_PO_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION4))             RENEWAL_PRICING_TYPE_USED
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),
       --               '!,%' ,'!')                                                          RENEWAL_MARKUP_PERCENT_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5))             RENEWAL_MARKUP_PERCENT_USED
       -- Checked in gsidev conversion needed.
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),
                      '!%,' ,'!')                                                            REV_EST_PERCENT_USED
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),
       --               '!,.','!')                                                           REV_EST_DURATION_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7))             REV_EST_DURATION_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION8))             REV_EST_PERIOD_USED
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),
                      '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,. ','!')        BILLING_PROFILE_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION10))            ERN_FLAG_USED_YN
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),
       --              '!,' ,'!')                                                            EVN_THRESHOLD_AMT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11))            EVN_THRESHOLD_AMT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION12))            EVN_THRESHOLD_CUR
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),
       --              '!,' ,'!')                                                            ERN_THRESHOLD_AMT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13))            ERN_THRESHOLD_AMT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION14))            ERN_THRESHOLD_CUR
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),
       --              '!,.','!')                                                            RENEWAL_GRACE_DURATION_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1))             RENEWAL_GRACE_DURATION_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION2))             RENEWAL_GRACE_PERIOD_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.OBJECT1_ID1))                   INV_TRX_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION9))             INV_PRINT_PROFILE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION10))            RENEWAL_PO_NUMBER
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION11))            AR_INTERFACE_YN
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION12))            HOLD_BILLING
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION13))            SUMMARY_TRX_YN
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SPO' ,RUL.RULE_INFORMATION1))             SERVICE_PO_NUMBER
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SPO' ,RUL.RULE_INFORMATION2))             SERVICE_PO_REQUIRED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.OBJECT1_ID1))                   CONVERSION_TYPE       --OKC
       -- needs translation
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),
                     '!,','!')                                                               CONVERSION_RATE       --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,
                  to_date(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                    CONVERSION_RATE_DATE  --OKC
        -- needs translation
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),
                     '!,','!')                                                               CONVERSION_EURO_RATE  --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                            CUST_ACCT_ID          --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1))                   CUST_ACCT_ID          --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                            BILL_TO_SITE_USE_ID   --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1))                   BILL_TO_SITE_USE_ID   --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                            INV_RULE_ID           --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1))                   INV_RULE_ID           --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION1))             RENEWAL_TYPE_CODE     --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),
       --              '!,.','!')                                                            RENEWAL_NOTIFY_TO     --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2))             RENEWAL_NOTIFY_TO     --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,
                  to_date(RUL.RULE_INFORMATION3,'yyyy/mm/dd hh24:mi:ss')))                    RENEWAL_END_DATE      --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                            SHIP_TO_SITE_USE_ID   --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1))                   SHIP_TO_SITE_USE_ID   --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                            PAYMENT_TERM_ID       --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1))                   PAYMENT_TERM_ID       --OKC

       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),
                     '!,.','!')                                                              PRICE_LIST_ID         --OKC
FROM OKC_RULE_GROUPS_B RGP
   , OKC_RULES_B RUL
WHERE rgp.id = rul.rgp_id
  and rgp.chr_id = P_CHR_ID
  and rgp.rgd_code = 'SVC_K'
  AND   RUL.RULE_INFORMATION_CATEGORY IN
       ('ARL','CCR','GPR','RVE','IRT','TAX','ERN','QTO', 'RPO', 'RPT','RER', 'RRU',
        'RRE', 'SBG', 'SPO','SLH','PRE', 'CVN','CAN', 'BTO', 'IRE', 'REN', 'STO', 'PTR')
  and rgp.RGD_CODE = 'SVC_K'
  and rgp.id = P_ID;

CURSOR l_hdr_rule_csr_nus (p_id in NUMBER)is
SELECT
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),
       --               '!,. ','!')                                                           ACCT_RULE_ID
        MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1))                   ACCT_RULE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,'CCR'))                             PAYMENT_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION1))             CC_NO
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,
                  to_date(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                    CC_EXPIRY_DATE
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
       --               '!,. ' , '!')                                                         CC_BANK_ACCT_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3))             CC_BANK_ACCT_ID

       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION4))             CC_AUTH_CODE
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
       --               '!,. ','!')                                                           GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1))             GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION2))             GRACE_PERIOD
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)),
       --               '!. ','!')                                                            EST_REV_PERCENT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1))             EST_REV_PERCENT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,
                    to_date(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                  EST_REV_DATE
       -- Checked in gsidev conversion needed.
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
                      '!. ' ,'!' )                                                            TAX_AMOUNT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.RULE_INFORMATION2))             TAX_STATUS
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
                      '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-,. ' , '!')     TAX_CODE
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
       --               '!,. ','!')                                                           TAX_EXEMPTION_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1))                   TAX_EXEMPTION_ID
       --,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLH' ,RUL.RULE_INFORMATION1))             BILLING_SCHEDULE_TYPE
       ,decode(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION_CATEGORY)),'QRE','T',
                MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLH' ,RUL.RULE_INFORMATION1)) )   BILLING_SCHEDULE_TYPE
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),
                      '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-,. ','!')       BILLING_PROFILE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION2))             RENEWAL_STATUS
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION3))             ELECTRONIC_RENEWAL_FLAG
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),
       --               '!,. ' ,'!')                                                          QUOTE_TO_CONTACT_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1))                   QUOTE_TO_CONTACT_ID
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT2_ID1)),
       --               '!,. ','!')                                                           QUOTE_TO_SITE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4))             QUOTE_TO_SITE_ID
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),
       --               '!,. ','!')                                                           QUOTE_TO_EMAIL_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1))             QUOTE_TO_EMAIL_ID
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),
       --               '!,. ','!')                                                           QUOTE_TO_PHONE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2))             QUOTE_TO_PHONE_ID
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),
       --               '!,. ','!')                                                           QUOTE_TO_FAX_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3))             QUOTE_TO_FAX_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPO' ,RUL.RULE_INFORMATION1))             RENEWAL_PO_REQUIRED
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),
       --               '!,. ','!')                                                           RENEWAL_PRICE_LIST
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1))                   RENEWAL_PRICE_LIST
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION1))             RENEWAL_PRICING_TYPE
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),
       --               '!%. ' ,'!')                                                          RENEWAL_MARKUP_PERCENT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2))             RENEWAL_MARKUP_PERCENT
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),
       --               '!,. ','!')                                                           RENEWAL_GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3))             RENEWAL_GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION4))             RENEWAL_GRACE_PERIOD
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),
       --               '!%. ' ,'!')                                                          RENEWAL_EST_REV_PERCENT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1))             RENEWAL_EST_REV_PERCENT
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),
       --               '!,. ','!')                                                           RENEWAL_EST_REV_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2))             RENEWAL_EST_REV_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION3))             RENEWAL_EST_REV_PERIOD
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),
       --               '!,. ','!')                                                           RENEWAL_PRICE_LIST_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1))                   RENEWAL_PRICE_LIST_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION1))             RENEWAL_TYPE_USED
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),
       --               '!,. ','!')                                                           RENEWAL_NOTIFICATION_TO
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2))             RENEWAL_NOTIFICATION_TO
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION3))             RENEWAL_PO_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION4))             RENEWAL_PRICING_TYPE_USED
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),
       --               '!. %' ,'!')                                                          RENEWAL_MARKUP_PERCENT_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5))             RENEWAL_MARKUP_PERCENT_USED
       -- Checked in gsidev conversion needed.
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),
                      '!%. ' ,'!')                                                            REV_EST_PERCENT_USED
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),
       --               '!,. ','!')                                                           REV_EST_DURATION_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7))             REV_EST_DURATION_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION8))             REV_EST_PERIOD_USED
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),
                      '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,. ','!')        BILLING_PROFILE_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION10))            ERN_FLAG_USED_YN
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),
       --              '!. ' ,'!')                                                            EVN_THRESHOLD_AMT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11))            EVN_THRESHOLD_AMT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION12))            EVN_THRESHOLD_CUR
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),
       --              '!. ' ,'!')                                                            ERN_THRESHOLD_AMT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13))            ERN_THRESHOLD_AMT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION14))            ERN_THRESHOLD_CUR
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),
       --              '!,. ','!')                                                            RENEWAL_GRACE_DURATION_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1))             RENEWAL_GRACE_DURATION_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION2))             RENEWAL_GRACE_PERIOD_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.OBJECT1_ID1))                   INV_TRX_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION9))             INV_PRINT_PROFILE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION10))            RENEWAL_PO_NUMBER
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION11))            AR_INTERFACE_YN
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION12))            HOLD_BILLING
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION13))            SUMMARY_TRX_YN
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SPO' ,RUL.RULE_INFORMATION1))             SERVICE_PO_NUMBER
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SPO' ,RUL.RULE_INFORMATION2))             SERVICE_PO_REQUIRED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.OBJECT1_ID1))                   CONVERSION_TYPE       --OKC
       -- needs translation
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),
                     '!. ','!')                                                               CONVERSION_RATE       --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,
                  to_date(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                    CONVERSION_RATE_DATE  --OKC
        -- needs translation
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),
                     '!. ','!')                                                               CONVERSION_EURO_RATE  --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                            CUST_ACCT_ID          --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1))                   CUST_ACCT_ID          --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                            BILL_TO_SITE_USE_ID   --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1))                   BILL_TO_SITE_USE_ID   --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                            INV_RULE_ID           --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1))                   INV_RULE_ID           --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION1))             RENEWAL_TYPE_CODE     --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),
       --              '!,. ','!')                                                            RENEWAL_NOTIFY_TO     --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2))             RENEWAL_NOTIFY_TO     --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,
                  to_date(RUL.RULE_INFORMATION3,'yyyy/mm/dd hh24:mi:ss')))                    RENEWAL_END_DATE      --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                            SHIP_TO_SITE_USE_ID   --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1))                   SHIP_TO_SITE_USE_ID   --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                            PAYMENT_TERM_ID       --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1))                   PAYMENT_TERM_ID       --OKC

       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),
                     '!,. ','!')                                                              PRICE_LIST_ID         --OKC
FROM OKC_RULE_GROUPS_B RGP
   , OKC_RULES_B RUL
WHERE rgp.id = rul.rgp_id
  and rgp.chr_id = P_CHR_ID
  and rgp.rgd_code = 'SVC_K'
  AND   RUL.RULE_INFORMATION_CATEGORY IN
       ('ARL','CCR','GPR','RVE','IRT','TAX','ERN','QTO', 'RPO', 'RPT','RER', 'RRU',
        'RRE', 'SBG', 'SPO','SLH','PRE', 'CVN','CAN', 'BTO', 'IRE', 'REN', 'STO', 'PTR')
  and rgp.RGD_CODE = 'SVC_K'
  and rgp.id = P_ID;

----------------------------------------------------------------------------
-- Cursor to populate data in OKS_RULE_ERROR table .                      --
----------------------------------------------------------------------------
CURSOR L_HDR_DTLS_CSR ( P_HDR_ID  IN NUMBER , P_CATEGORY IN VARCHAR2 ) IS
SELECT HDR.CONTRACT_NUMBER
     , HDR.CONTRACT_NUMBER_MODIFIER
     , RUL.ID
     , RGP.ID RGP_ID
 FROM  OKC_K_HEADERS_B HDR
     , OKC_RULE_GROUPS_B RGP
     , OKC_RULES_B RUL
WHERE HDR.ID = P_HDR_ID
  AND RGP.DNZ_CHR_ID = P_HDR_ID
  AND RGP.CHR_ID = P_HDR_ID
  AND RGP.ID = RUL.RGP_ID
  AND RGP.DNZ_CHR_ID = RUL.DNZ_CHR_ID
  AND RUL.RULE_INFORMATION_CATEGORY = P_CATEGORY ;

L_HDR_DTLS_REC L_HDR_DTLS_CSR%ROWTYPE;

-----------------------------------------------------------------
--Cursor to check if the records corresponding to chr_id exists
--in oks_k_headers_b
-----------------------------------------------------------------
Cursor Cur_KHdr_exists(p_chrid in number) IS
select 'x'
from  oks_k_headers_b
where chr_id=p_chrid;

-----------------------------------------------------------------
--Cursor to check if the records corresponding to rgp_id exists
--in okc_rule_groups_b
-----------------------------------------------------------------
Cursor Cur_RGP_exists(P_RGP_ID in number) IS
select 'x'
from  okc_rule_groups_b
where id = P_RGP_ID
and chr_id = P_CHR_ID;

-----------------------------------------------------------------
-- Newly added code to synchronize cc_no , po , Price list from--
-- Header to Top lines                                         --
-----------------------------------------------------------------
 l_payment_typei    varchar2(2000);
 l_cc_noi           varchar2(2000);
 l_cc_expiry_datei  date;
 --l_cc_bank_acct_idi number;
 --l_cc_auth_codei    varchar2(2000);
 l_cust_po_numberi  varchar2(2000);
 l_cust_po_number_req_yni varchar2(10);
 l_price_list_idi   number;
 l_dnz_chr_idi      number;

 CURSOR L_SYNHL_CSR ( p_id in NUMBER ) is
  select oks.payment_type
       , oks.cc_no
       , oks.cc_expiry_date
       --, oks.cc_bank_acct_id
       --, oks.cc_auth_code
       , okc.cust_po_number
       , okc.cust_po_number_req_yn
       , okc.price_list_id
       , okc.id
    from oks_k_headers_b oks
       , okc_k_headers_b okc
   where oks.chr_id = okc.id
     and oks.id = p_id;

-------------------------------------------------------
-- Cursor to lock okc_k_lines_b before going for update
-------------------------------------------------------
 CURSOR L_LOCK_LINE_CSR (p_id in number ) IS
 SELECT 1
   FROM OKC_K_LINES_B
  WHERE DNZ_CHR_ID = P_ID
    AND LSE_ID in ( 1,12,19,46)
    FOR UPDATE NOWAIT;




BEGIN
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'--------------Start of Sub request for Header Rule Data Synchronisation--------');
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');

DBMS_TRANSACTION.SAVEPOINT('BEFORE_TRANSACTION');

 BEGIN
 OPEN  L_LOCK_HDR_CSR( p_chr_id);
 FETCH L_LOCK_HDR_CSR into L_LOCK_ID;
 CLOSE L_LOCK_HDR_CSR;
 EXCEPTION
   WHEN OTHERS THEN
       RAISE LOCK_EXCEPTION;
 END;


if(p_us_yn) THEN
    OPEN l_hdr_rule_csr(p_rgp_id);
    FETCH l_hdr_rule_csr into
                         ACCT_RULE_ID_CHR
                        ,L_PAYMENT_TYPE
                        ,L_CC_NO
                        ,CC_EXPIRY_DATE_CHR
                        ,CC_BANK_ACCT_ID_CHR
                        ,L_CC_AUTH_CODE
                        ,GRACE_DURATION_CHR
                        ,L_GRACE_PERIOD
                        ,EST_REV_PERCENT_CHR
                        ,EST_REV_DATE_CHR
                        ,TAX_AMOUNT_CHR
                        ,L_TAX_STATUS
                        ,TAX_CODE_CHR
                        ,TAX_EXEMPTION_ID_CHR
                        ,L_BILLING_SCHEDULE_TYPE
                        ,BILLING_PROFILE_ID_CHR
                        ,L_RENEWAL_STATUS
                        ,L_ELECTRONIC_RENEWAL_FLAG
                        ,QUOTE_TO_CONTACT_ID_CHR
                        ,QUOTE_TO_SITE_ID_CHR
                        ,QUOTE_TO_EMAIL_ID_CHR
                        ,QUOTE_TO_PHONE_ID_CHR
                        ,QUOTE_TO_FAX_ID_CHR
                        ,L_RENEWAL_PO_REQUIRED
                        ,RENEWAL_PRICE_LIST_CHR
                        ,L_RENEWAL_PRICING_TYPE
                        ,RENEWAL_MARKUP_PERCENT_CHR
                        ,RENEWAL_GRACE_DURATION_CHR
                        ,L_RENEWAL_GRACE_PERIOD
                        ,RENEWAL_EST_REV_PERCENT_CHR
                        ,RENEWAL_EST_REV_DURATION_CHR
                        ,L_RENEWAL_EST_REV_PERIOD
                        ,RENEWAL_PRICE_LIST_USED_CHR
                        ,L_RENEWAL_TYPE_USED
                        ,RENEWAL_NOTIFICATION_TO_CHR
                        ,L_RENEWAL_PO_USED
                        ,L_RENEWAL_PRICING_TYPE_USED
                        ,RENEWAL_MARKUP_PERCENT_USED_CH
                        ,REV_EST_PERCENT_USED_CHR
                        ,REV_EST_DURATION_USED_CHR
                        ,L_REV_EST_PERIOD_USED
                        ,BILLING_PROFILE_USED_CHR
                        ,L_ERN_FLAG_USED_YN
                        ,EVN_THRESHOLD_AMT_CHR
                        ,L_EVN_THRESHOLD_CUR
                        ,ERN_THRESHOLD_AMT_CHR
                        ,L_ERN_THRESHOLD_CUR
                        ,RENEWAL_GRACE_DURATION_USED_CH
                        ,L_RENEWAL_GRACE_PERIOD_USED
                        ,L_INV_TRX_TYPE
                        ,L_INV_PRINT_PROFILE
                        ,L_RENEWAL_PO_NUMBER
                        ,L_AR_INTERFACE_YN
                        ,L_HOLD_BILLING
                        ,L_SUMMARY_TRX_YN
                        ,L_SERVICE_PO_NUMBER
                        ,L_SERVICE_PO_REQUIRED
                        ,L_CONVERSION_TYPE                 --OKC
                        ,CONVERSION_RATE_CHR              --OKC
                        ,CONVERSION_RATE_DATE_CHR         --OKC
                        ,CONVERSION_EURO_RATE_CHR         --OKC
                        ,CUST_ACCT_ID_CHR                 --OKC
                        ,BILL_TO_SITE_USE_ID_CHR          --OKC
                        ,INV_RULE_ID_CHR                  --OKC
                        ,L_RENEWAL_TYPE_CODE                --OKC
                        ,RENEWAL_NOTIFY_TO_CHR            --OKC
                        ,RENEWAL_END_DATE_CHR             --OKC
                        ,SHIP_TO_SITE_USE_ID_CHR          --OKC
                        ,PAYMENT_TERM_ID_CHR              --OKC
                        ,PRICE_LIST_ID_CHR  ; --OKC
      close l_hdr_rule_csr;
   else
    OPEN l_hdr_rule_csr_nus(p_rgp_id);

    FETCH l_hdr_rule_csr_nus into
                         ACCT_RULE_ID_CHR
                        ,L_PAYMENT_TYPE
                        ,L_CC_NO
                        ,CC_EXPIRY_DATE_CHR
                        ,CC_BANK_ACCT_ID_CHR
                        ,L_CC_AUTH_CODE
                        ,GRACE_DURATION_CHR
                        ,L_GRACE_PERIOD
                        ,EST_REV_PERCENT_CHR
                        ,EST_REV_DATE_CHR
                        ,TAX_AMOUNT_CHR
                        ,L_TAX_STATUS
                        ,TAX_CODE_CHR
                        ,TAX_EXEMPTION_ID_CHR
                        ,L_BILLING_SCHEDULE_TYPE
                        ,BILLING_PROFILE_ID_CHR
                        ,L_RENEWAL_STATUS
                        ,L_ELECTRONIC_RENEWAL_FLAG
                        ,QUOTE_TO_CONTACT_ID_CHR
                        ,QUOTE_TO_SITE_ID_CHR
                        ,QUOTE_TO_EMAIL_ID_CHR
                        ,QUOTE_TO_PHONE_ID_CHR
                        ,QUOTE_TO_FAX_ID_CHR
                        ,L_RENEWAL_PO_REQUIRED
                        ,RENEWAL_PRICE_LIST_CHR
                        ,L_RENEWAL_PRICING_TYPE
                        ,RENEWAL_MARKUP_PERCENT_CHR
                        ,RENEWAL_GRACE_DURATION_CHR
                        ,L_RENEWAL_GRACE_PERIOD
                        ,RENEWAL_EST_REV_PERCENT_CHR
                        ,RENEWAL_EST_REV_DURATIOn_CHR
                        ,L_RENEWAL_EST_REV_PERIOD
                        ,RENEWAL_PRICE_LIST_USED_CHR
                        ,L_RENEWAL_TYPE_USED
                        ,RENEWAL_NOTIFICATION_TO_CHR
                        ,L_RENEWAL_PO_USED
                        ,L_RENEWAL_PRICING_TYPE_USED
                        ,RENEWAL_MARKUP_PERCENT_USED_CH
                        ,REV_EST_PERCENT_USED_CHR
                        ,REV_EST_DURATION_USED_CHR
                        ,L_REV_EST_PERIOD_USED
                        ,BILLING_PROFILE_USED_CHR
                        ,L_ERN_FLAG_USED_YN
                        ,EVN_THRESHOLD_AMT_CHR
                        ,L_EVN_THRESHOLD_CUR
                        ,ERN_THRESHOLD_AMT_CHR
                        ,L_ERN_THRESHOLD_CUR
                        ,RENEWAL_GRACE_DURATION_USED_CH
                        ,L_RENEWAL_GRACE_PERIOD_USED
                        ,L_INV_TRX_TYPE
                        ,L_INV_PRINT_PROFILE
                        ,L_RENEWAL_PO_NUMBER
                        ,L_AR_INTERFACE_YN
                        ,L_HOLD_BILLING
                        ,L_SUMMARY_TRX_YN
                        ,L_SERVICE_PO_NUMBER
                        ,L_SERVICE_PO_REQUIRED
                        ,L_CONVERSION_TYPE                 --OKC
                        ,CONVERSION_RATE_CHR              --OKC
                        ,CONVERSION_RATE_DATE_CHR         --OKC
                        ,CONVERSION_EURO_RATE_CHR         --OKC
                        ,CUST_ACCT_ID_CHR                 --OKC
                        ,BILL_TO_SITE_USE_ID_CHR          --OKC
                        ,INV_RULE_ID_CHR                  --OKC
                        ,L_RENEWAL_TYPE_CODE                --OKC
                        ,RENEWAL_NOTIFY_TO_CHR            --OKC
                        ,RENEWAL_END_DATE_CHR             --OKC
                        ,SHIP_TO_SITE_USE_ID_CHR          --OKC
                        ,PAYMENT_TERM_ID_CHR              --OKC
                        ,PRICE_LIST_ID_CHR  ; --OKC


      close l_hdr_rule_csr_nus;
   end if;

      --initialised to zero
      --if set to 1 means was set in insert or update
      -- if set to 2 means was set in delete
      Eflag:=0;

      Emsg:=NULL;

    --End of If to choose the cursor to be fetched --
    ------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------
   -- Begin of code to check if the row exists in oks_headers_b

      l_check_var:=NULL;

      Open Cur_KHdr_exists(P_CHR_ID);
      Fetch Cur_KHdr_exists into l_check_var;
      Close Cur_KHdr_exists;

      l_check_var1 := NULL;
      Open Cur_RGP_exists(P_RGP_ID);
      Fetch Cur_RGP_exists into l_check_var1;
      Close Cur_RGP_exists;

      If(l_check_var is NULL and l_check_var1 is not null ) THEN

	  BEGIN
	    UPDATE okc_k_headers_b SET
	      CONVERSION_TYPE          =  L_CONVERSION_TYPE ,
              CONVERSION_RATE          =  CONVERSION_RATE_CHR ,
              CONVERSION_RATE_DATE     =  CONVERSION_RATE_DATE_CHR ,
              CONVERSION_EURO_RATE     =  CONVERSION_EURO_RATE_CHR ,
              CUST_ACCT_ID             =  CUST_ACCT_ID_CHR ,
              BILL_TO_SITE_USE_ID      =  BILL_TO_SITE_USE_ID_CHR  ,
              INV_RULE_ID              =  INV_RULE_ID_CHR ,
              RENEWAL_TYPE_CODE        =  L_RENEWAL_TYPE_CODE ,
              RENEWAL_NOTIFY_TO        =  RENEWAL_NOTIFY_TO_CHR ,
              RENEWAL_END_DATE         =  RENEWAL_END_DATE_CHR ,
              SHIP_TO_SITE_USE_ID      =  SHIP_TO_SITE_USE_ID_CHR ,
              PAYMENT_TERM_ID          =  PAYMENT_TERM_ID_CHR  ,
              PRICE_LIST_ID            =  PRICE_LIST_ID_CHR
	    WHERE id = p_chr_id;

	    EXCEPTION When others then
              Eflag:=1;
              Emsg :=SQLERRM;
	  END;

          If( Eflag <> 1) Then
	  BEGIN
	     INSERT INTO oks_k_headers_b(
	        ID
	      ,CHR_ID
	      ,ACCT_RULE_ID
	      ,PAYMENT_TYPE
	      ,CC_NO
	      ,CC_EXPIRY_DATE
	      ,CC_BANK_ACCT_ID
	      ,CC_AUTH_CODE
	      ,GRACE_DURATION
	      ,GRACE_PERIOD
	      ,EST_REV_PERCENT
	      ,EST_REV_DATE
	      ,TAX_AMOUNT
	      ,TAX_STATUS
	      ,TAX_CODE
	      ,TAX_EXEMPTION_ID
	      ,BILLING_SCHEDULE_TYPE
	      ,BILLING_PROFILE_ID
	      ,RENEWAL_STATUS
	      ,ELECTRONIC_RENEWAL_FLAG
	      ,QUOTE_TO_CONTACT_ID
	      ,QUOTE_TO_SITE_ID
	      ,QUOTE_TO_EMAIL_ID
	      ,QUOTE_TO_PHONE_ID
	      ,QUOTE_TO_FAX_ID
	      ,RENEWAL_PO_REQUIRED
	      ,RENEWAL_PRICE_LIST
	      ,RENEWAL_PRICING_TYPE
	      ,RENEWAL_MARKUP_PERCENT
	      ,RENEWAL_GRACE_DURATION
	      ,RENEWAL_GRACE_PERIOD
	      ,RENEWAL_EST_REV_PERCENT
	      ,RENEWAL_EST_REV_DURATIOn
	      ,RENEWAL_EST_REV_PERIOD
	      ,RENEWAL_PRICE_LIST_USED
	      ,RENEWAL_TYPE_USED
	      ,RENEWAL_NOTIFICATION_TO
	      ,RENEWAL_PO_USED
	      ,RENEWAL_PRICING_TYPE_USED
	      ,RENEWAL_MARKUP_PERCENT_USED
	      ,REV_EST_PERCENT_USED
	      ,REV_EST_DURATION_USED
	      ,REV_EST_PERIOD_USED
	      ,BILLING_PROFILE_USED
	      ,ERN_FLAG_USED_YN
	      ,EVN_THRESHOLD_AMT
	      ,EVN_THRESHOLD_CUR
	      ,ERN_THRESHOLD_AMT
	      ,ERN_THRESHOLD_CUR
	      ,RENEWAL_GRACE_DURATION_USED
	      ,RENEWAL_GRACE_PERIOD_USED
	      ,INV_TRX_TYPE
	      ,INV_PRINT_PROFILE
	      ,RENEWAL_PO_NUMBER
	      ,AR_INTERFACE_YN
	      ,HOLD_BILLING
	      ,SUMMARY_TRX_YN
	      ,SERVICE_PO_NUMBER
	      ,SERVICE_PO_REQUIRED
	      ,CREATED_BY
	      ,CREATION_DATE
	      ,LAST_UPDATED_BY
	      ,LAST_UPDATE_DATE
	      ,LAST_UPDATE_LOGIN
	      ,OBJECT_VERSION_NUMBER  )
	    VALUES (
	       P_CHR_ID
	      ,P_CHR_ID
	      ,ACCT_RULE_ID_CHR

	      ,L_PAYMENT_TYPE
	      ,L_CC_NO
	      ,CC_EXPIRY_DATE_CHR
	      ,CC_BANK_ACCT_ID_CHR
	      ,L_CC_AUTH_CODE
	      ,GRACE_DURATION_CHR
	      ,L_GRACE_PERIOD
	      ,EST_REV_PERCENT_CHR
	      ,EST_REV_DATE_CHR
	      ,TAX_AMOUNT_CHR
	      ,L_TAX_STATUS
	      ,TAX_CODE_CHR
	      ,TAX_EXEMPTION_ID_CHR
	      ,L_BILLING_SCHEDULE_TYPE
	      ,BILLING_PROFILE_ID_CHR
	      ,L_RENEWAL_STATUS
	      ,L_ELECTRONIC_RENEWAL_FLAG
	      ,QUOTE_TO_CONTACT_ID_CHR
	      ,QUOTE_TO_SITE_ID_CHR
	      ,QUOTE_TO_EMAIL_ID_CHR
	      ,QUOTE_TO_PHONE_ID_CHR
	      ,QUOTE_TO_FAX_ID_CHR
	      ,L_RENEWAL_PO_REQUIRED
	      ,RENEWAL_PRICE_LIST_CHR
	      ,L_RENEWAL_PRICING_TYPE
	      ,RENEWAL_MARKUP_PERCENT_CHR
	      ,RENEWAL_GRACE_DURATION_CHR
	      ,L_RENEWAL_GRACE_PERIOD
	      ,RENEWAL_EST_REV_PERCENT_CHR
	      ,RENEWAL_EST_REV_DURATIOn_CHR
	      ,L_RENEWAL_EST_REV_PERIOD
	      ,RENEWAL_PRICE_LIST_USED_CHR
	      ,L_RENEWAL_TYPE_USED
	      ,RENEWAL_NOTIFICATION_TO_CHR
	      ,L_RENEWAL_PO_USED
	      ,L_RENEWAL_PRICING_TYPE_USED
	      ,RENEWAL_MARKUP_PERCENT_USED_CH
	      ,REV_EST_PERCENT_USED_CHR
	      ,REV_EST_DURATION_USED_CHR
	      ,L_REV_EST_PERIOD_USED
	      ,BILLING_PROFILE_USED_CHR
	      ,L_ERN_FLAG_USED_YN
	      ,EVN_THRESHOLD_AMT_CHR
	      ,L_EVN_THRESHOLD_CUR
	      ,ERN_THRESHOLD_AMT_CHR
	      ,L_ERN_THRESHOLD_CUR
	      ,RENEWAL_GRACE_DURATION_USED_CH
	      ,L_RENEWAL_GRACE_PERIOD_USED
	      ,L_INV_TRX_TYPE
	      ,L_INV_PRINT_PROFILE
	      ,L_RENEWAL_PO_NUMBER
	      ,L_AR_INTERFACE_YN
	      ,L_HOLD_BILLING
	      ,L_SUMMARY_TRX_YN
	      ,L_SERVICE_PO_NUMBER
	      ,L_SERVICE_PO_REQUIRED
	      ,1
	      ,SYSDATE
	      ,1
	      ,SYSDATE
	      ,2003
	      ,1   );



	  EXCEPTION When others then
	    Eflag:=1;
	    Emsg :=SQLERRM;
	  END;

	  End If;


      Else
        l_check_var := NULL;
        Open Cur_RGP_exists(P_RGP_ID);
        Fetch Cur_RGP_exists into l_check_var;
	Close Cur_RGP_exists;

	If(l_check_var is not null) Then

        --Updating oks_k_headers_b
        BEGIN
	  UPDATE OKS_K_HEADERS_B
	  SET
	     ACCT_RULE_ID               =       ACCT_RULE_ID_CHR
            ,PAYMENT_TYPE		=       L_PAYMENT_TYPE
            ,CC_NO			=	L_CC_NO
            ,CC_EXPIRY_DATE		=	CC_EXPIRY_DATE_CHR
            ,CC_BANK_ACCT_ID		=	CC_BANK_ACCT_ID_CHR
            ,CC_AUTH_CODE		=	L_CC_AUTH_CODE
            ,GRACE_DURATION		=	GRACE_DURATION_CHR
            ,GRACE_PERIOD		=	L_GRACE_PERIOD
            ,EST_REV_PERCENT		=	EST_REV_PERCENT_CHR
            ,EST_REV_DATE		=	EST_REV_DATE_CHR
            ,TAX_AMOUNT			=	TAX_AMOUNT_CHR
            ,TAX_STATUS			=	L_TAX_STATUS
            ,TAX_CODE			=	TAX_CODE_CHR
            ,TAX_EXEMPTION_ID		=	TAX_EXEMPTION_ID_CHR
            ,BILLING_SCHEDULE_TYPE	=	L_BILLING_SCHEDULE_TYPE
            ,BILLING_PROFILE_ID		=	BILLING_PROFILE_ID_CHR
            ,RENEWAL_STATUS		=	L_RENEWAL_STATUS
            ,ELECTRONIC_RENEWAL_FLAG	=	L_ELECTRONIC_RENEWAL_FLAG
            ,QUOTE_TO_CONTACT_ID	=	QUOTE_TO_CONTACT_ID_CHR
            ,QUOTE_TO_SITE_ID		=	QUOTE_TO_SITE_ID_CHR
            ,QUOTE_TO_EMAIL_ID		=	QUOTE_TO_EMAIL_ID_CHR
            ,QUOTE_TO_PHONE_ID		=	QUOTE_TO_PHONE_ID_CHR
            ,QUOTE_TO_FAX_ID		=	QUOTE_TO_FAX_ID_CHR
            ,RENEWAL_PO_REQUIRED	=	L_RENEWAL_PO_REQUIRED
            ,RENEWAL_PRICE_LIST		=	RENEWAL_PRICE_LIST_CHR
            ,RENEWAL_PRICING_TYPE	=	L_RENEWAL_PRICING_TYPE
            ,RENEWAL_MARKUP_PERCENT	=	RENEWAL_MARKUP_PERCENT_CHR
            ,RENEWAL_GRACE_DURATION	=	RENEWAL_GRACE_DURATION_CHR
            ,RENEWAL_GRACE_PERIOD	=	L_RENEWAL_GRACE_PERIOD
            ,RENEWAL_EST_REV_PERCENT	=	RENEWAL_EST_REV_PERCENT_CHR
            ,RENEWAL_EST_REV_DURATION	=	RENEWAL_EST_REV_DURATIOn_CHR
            ,RENEWAL_EST_REV_PERIOD	=	L_RENEWAL_EST_REV_PERIOD
            ,RENEWAL_PRICE_LIST_USED	=	RENEWAL_PRICE_LIST_USED_CHR
            ,RENEWAL_TYPE_USED		=	L_RENEWAL_TYPE_USED
            ,RENEWAL_NOTIFICATION_TO	=	RENEWAL_NOTIFICATION_TO_CHR
            ,RENEWAL_PO_USED		=	L_RENEWAL_PO_USED
            ,RENEWAL_PRICING_TYPE_USED	=	L_RENEWAL_PRICING_TYPE_USED
            ,RENEWAL_MARKUP_PERCENT_USED=	RENEWAL_MARKUP_PERCENT_USED_CH
            ,REV_EST_PERCENT_USED	=	REV_EST_PERCENT_USED_CHR
            ,REV_EST_DURATION_USED	=	REV_EST_DURATION_USED_CHR
            ,REV_EST_PERIOD_USED	=	L_REV_EST_PERIOD_USED
            ,BILLING_PROFILE_USED	=	BILLING_PROFILE_USED_CHR
            ,ERN_FLAG_USED_YN		=	L_ERN_FLAG_USED_YN
            ,EVN_THRESHOLD_AMT		=	EVN_THRESHOLD_AMT_CHR
            ,EVN_THRESHOLD_CUR		=	L_EVN_THRESHOLD_CUR
            ,ERN_THRESHOLD_AMT		=	ERN_THRESHOLD_AMT_CHR
            ,ERN_THRESHOLD_CUR		=	L_ERN_THRESHOLD_CUR
            ,RENEWAL_GRACE_DURATION_USED=	RENEWAL_GRACE_DURATION_USED_CH
            ,RENEWAL_GRACE_PERIOD_USED	=	L_RENEWAL_GRACE_PERIOD_USED
            ,INV_TRX_TYPE		=	L_INV_TRX_TYPE
            ,INV_PRINT_PROFILE		=	L_INV_PRINT_PROFILE
            ,RENEWAL_PO_NUMBER		=	L_RENEWAL_PO_NUMBER
            ,AR_INTERFACE_YN		=	L_AR_INTERFACE_YN
            ,HOLD_BILLING		=	L_HOLD_BILLING
            ,SUMMARY_TRX_YN		=	L_SUMMARY_TRX_YN
            ,SERVICE_PO_NUMBER		=	L_SERVICE_PO_NUMBER
            ,SERVICE_PO_REQUIRED	=	L_SERVICE_PO_REQUIRED
	  WHERE CHR_ID = P_CHR_ID;

	     EXCEPTION When others then
               Eflag:=1;
               Emsg :=SQLERRM;

        END;

        If( Eflag <> 1) Then
          --Updating okc_k_headers_b

          BEGIN
	    UPDATE okc_k_headers_b SET
              CONVERSION_TYPE          =  L_CONVERSION_TYPE ,
              CONVERSION_RATE          =  CONVERSION_RATE_CHR ,
              CONVERSION_RATE_DATE     =  CONVERSION_RATE_DATE_CHR ,
              CONVERSION_EURO_RATE     =  CONVERSION_EURO_RATE_CHR,
              CUST_ACCT_ID             =  CUST_ACCT_ID_CHR ,
              BILL_TO_SITE_USE_ID      =  BILL_TO_SITE_USE_ID_CHR  ,
              INV_RULE_ID              =  INV_RULE_ID_CHR  ,
              RENEWAL_TYPE_CODE        =  L_RENEWAL_TYPE_CODE ,
              RENEWAL_NOTIFY_TO        =  RENEWAL_NOTIFY_TO_CHR ,
              RENEWAL_END_DATE         =  RENEWAL_END_DATE_CHR  ,
              SHIP_TO_SITE_USE_ID      =  SHIP_TO_SITE_USE_ID_CHR ,
              PAYMENT_TERM_ID          =  PAYMENT_TERM_ID_CHR  ,
              PRICE_LIST_ID            =  PRICE_LIST_ID_CHR
            WHERE id = p_chr_id;

             EXCEPTION When others then
               Eflag:=1;
               Emsg :=SQLERRM;
          END;

	End If;

	Else

	  BEGIN


	       Delete from oks_k_headers_b where chr_id = P_CHR_ID;



	        UPDATE okc_k_headers_b SET
	          CONVERSION_TYPE          =  L_CONVERSION_TYPE ,
	          CONVERSION_RATE          =  CONVERSION_RATE_CHR ,
		  CONVERSION_RATE_DATE     =  CONVERSION_RATE_DATE_CHR ,
	          CONVERSION_EURO_RATE     =  CONVERSION_EURO_RATE_CHR ,
                  CUST_ACCT_ID             =  CUST_ACCT_ID_CHR ,
                  BILL_TO_SITE_USE_ID      =  BILL_TO_SITE_USE_ID_CHR  ,
                  INV_RULE_ID              =  INV_RULE_ID_CHR  ,
                  RENEWAL_TYPE_CODE        =  L_RENEWAL_TYPE_CODE,
                  RENEWAL_NOTIFY_TO        =  RENEWAL_NOTIFY_TO_CHR ,
                  RENEWAL_END_DATE         =  RENEWAL_END_DATE_CHR  ,
                  SHIP_TO_SITE_USE_ID      =  SHIP_TO_SITE_USE_ID_CHR ,
                  PAYMENT_TERM_ID          =  PAYMENT_TERM_ID_CHR  ,
                  PRICE_LIST_ID            =  PRICE_LIST_ID_CHR
                WHERE id = p_chr_id;

	        EXCEPTION When others then
                  Eflag:=2;
                  Emsg :=SQLERRM;
          END;
	End If;
      End If;
      ---------------------------------------------------------------------------------------------
      -- Added the following code to synchronize header cc_no, po , price_list to top line level --
      ---------------------------------------------------------------------------------------------
      If Eflag <> 1 then
      If (l_cc_no is not null OR PRICE_LIST_ID_CHR is not null or CUST_ACCT_ID_CHR is not null ) then
      Begin
        BEGIN
         open  l_lock_line_csr(p_chr_id);
         fetch l_lock_line_csr into l_lock_id;
         close l_lock_line_csr;
        Exception
         When others then
              Raise lock_exception;
        End;
        open l_synhl_csr ( p_chr_id );
        fetch l_synhl_csr into l_payment_typei
                              ,l_cc_noi
                              ,l_cc_expiry_datei
                              --,l_cc_bank_acct_idi
                              --,l_cc_auth_codei
                              ,l_cust_po_numberi
                              ,l_cust_po_number_req_yni
                              ,l_price_list_idi
                              ,l_dnz_chr_idi ;
        close l_synhl_csr ;

        Update oks_k_lines_b oks
           set oks.payment_type    = l_payment_typei
             , oks.cc_no           = l_cc_noi
             , oks.cc_expiry_date  = l_cc_expiry_datei
             --, oks.cc_bank_acct_id = l_cc_bank_acct_idi
             --, oks.cc_auth_code    = l_cc_auth_codei
             , oks.cust_po_number  = l_cust_po_numberi
             , oks.cust_po_number_req_yn = l_cust_po_number_req_yni
             , oks.tax_amount      = ( select oksi.tax_amount
                                      from oks_k_lines_b  oksi
                                         , okc_k_lines_b okci
                                     where okci.lse_id = 46
                                       and okci.id = oksi.cle_id
                                       and oksi.cle_id = oks.cle_id
                                       and okci.id = oks.cle_id )
         where oks.dnz_chr_id = p_chr_id
           and exists (
        select 1 from okc_k_lines_b okc
         where okc.id = oks.cle_id
           and okc.lse_id in ( 1,12,19,46));

        Update okc_k_lines_b okc
           set okc.price_list_id = l_price_list_idi
             , okc.price_negotiated = ( select sum(okci.price_negotiated)
                                          from okc_k_lines_b okci
                                         where ( okci.cle_id = okc.id OR (okci.id = okc.id and okci.lse_id = 46 )))
         where dnz_chr_id = p_chr_id
           and lse_id in ( 1,12,19,46);
      Exception
        When others then
            X_RETURN_STATUS := 'E';
            L_ERROR_MSG := SQLERRM;
            DBMS_TRANSACTION.ROLLBACK_SAVEPOINT('BEFORE_TRANSACTION');
            FND_FILE.PUT_LINE(FND_FILE.LOG ,'DML Failed for LOCK  OKSSYNHL in header synchronize code '||p_chr_id||'with Error Message '||L_ERROR_MSG);
            RAISE ;
      END ;
      End If;
      End If;


      If(Eflag=1) Then

       DBMS_TRANSACTION.ROLLBACK_SAVEPOINT('BEFORE_TRANSACTION');

    -- Begin of code to validate data type .
    -- If data fails validation then set the Eflag to 1

       --1. Validation for ARL rule .
       BEGIN
          ACCT_RULE_ID      := ACCT_RULE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'ARL') ;
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_ACCT_RULE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'ARL'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         , ACCT_RULE_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --2. Validation for CCR rule .
       BEGIN
          CC_BANK_ACCT_ID     := CC_BANK_ACCT_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'CCR') ;
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CC_BANK_ACCT_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'CCR'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , CC_BANK_ACCT_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --3. Validation for GPR rule .
       BEGIN
          GRACE_DURATION   := GRACE_DURATION_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'GPR') ;
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_GRACE_DURATION');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'GPR'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , GRACE_DURATION_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --4. Validation for RVE rule .
       BEGIN
          EST_REV_PERCENT      := EST_REV_PERCENT_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'RVE') ;
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EST_REV_PERCENT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RVE'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , EST_REV_PERCENT_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --5. Validation for IRT rule.
       BEGIN
          TAX_AMOUNT     := TAX_AMOUNT_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'IRT') ;
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_AMOUNT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'IRT'  ,'RULE_INFORMATION4'    ,L_ATTRIBUTE_NAME         , TAX_AMOUNT_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --6. Validation for TAX (TAX_CODE) rule.
       BEGIN
          TAX_CODE      := TAX_CODE_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'TAX') ;
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_CODE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'TAX'  ,'OBJECT2_ID1'    ,L_ATTRIBUTE_NAME         , TAX_CODE_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --7. Validation for TAX (TAX_EXEMPTION_ID) rule.
       BEGIN
          TAX_EXEMPTION_ID      := TAX_EXEMPTION_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'TAX');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_EXEMPTION_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'TAX'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , TAX_EXEMPTION_ID_CHR,
                                       L_ERROR_MSG );
	   Eflag:=1;
       END;


       --8. Validation for CAN  rule.
       BEGIN
          CUST_ACCT_ID      := CUST_ACCT_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'CAN');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CUST_ACCT_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'CAN'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , CUST_ACCT_ID_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --9. Validation for BTO  rule.
       BEGIN
          BILL_TO_SITE_USE_ID     := BILL_TO_SITE_USE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'BTO');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BILL_TO_SITE_USE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'BTO'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , BILL_TO_SITE_USE_ID_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;


       --10. Validation for IRE  rule.
       BEGIN
          INV_RULE_ID      := INV_RULE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'IRE');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_INV_RULE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'IRE'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , INV_RULE_ID_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --11. Validation for REN ( RENEWAL_NOTIFY_TO )  rule.
       BEGIN
          RENEWAL_NOTIFY_TO      := RENEWAL_NOTIFY_TO_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'IRE');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_NOTIFY_TO');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'REN'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_NOTIFY_TO_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --12. Validation for STO rule.
       BEGIN
          SHIP_TO_SITE_USE_ID      := SHIP_TO_SITE_USE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'STO');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_SHIP_TO_SITE_USE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'STO'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , SHIP_TO_SITE_USE_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --13. Validation for PTR rule.
       BEGIN
          PAYMENT_TERM_ID      := PAYMENT_TERM_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'PTR');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PAYMENT_TERM_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'PTR'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , PAYMENT_TERM_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --14. Validation for ERN rule.
       BEGIN
          BILLING_PROFILE_ID      := BILLING_PROFILE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'ERN');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BILLING_PROFILE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'ERN'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , BILLING_PROFILE_ID_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;


       --15. Validation for QTO ( QUOTE_TO_CONTACT_ID )rule.
       BEGIN
          QUOTE_TO_CONTACT_ID      := QUOTE_TO_CONTACT_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'QTO');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_CONTACT_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'QTO'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_CONTACT_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --16. Validation for QTO ( QUOTE_TO_SITE_ID ) rule.
       BEGIN
          QUOTE_TO_SITE_ID      := QUOTE_TO_SITE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'QTO');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_SITE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'QTO'  ,'RULE_INFORMATION4'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_SITE_ID_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --17. Validation for QTO ( QUOTE_TO_EMAIL_ID ) rule.
       BEGIN
          QUOTE_TO_EMAIL_ID      := QUOTE_TO_EMAIL_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'QTO');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_EMAIL_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'QTO'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_EMAIL_ID_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --18. Validation for QTO ( QUOTE_TO_PHONE_ID ) rule.
       BEGIN
          QUOTE_TO_PHONE_ID     := QUOTE_TO_PHONE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'QTO');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_PHONE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'QTO'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_PHONE_ID_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --19. Validation for QTO ( QUOTE_TO_FAX_ID ) rule.
       BEGIN
          QUOTE_TO_FAX_ID     := QUOTE_TO_FAX_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'QTO');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_FAX_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'QTO'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_FAX_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --20. Validation for RPT ( RENEWAL_PRICE_LIST ) rule.
       BEGIN
          RENEWAL_PRICE_LIST      := RENEWAL_PRICE_LIST_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'RPT');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_PRICE_LIST');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RPT'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , RENEWAL_PRICE_LIST_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --21. Validation for RPT ( RENEWAL_MARKUP_PERCENT ) rule.
       BEGIN
          RENEWAL_MARKUP_PERCENT      := RENEWAL_MARKUP_PERCENT_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'RPT');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_MARKUP_PERCENT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RPT'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_MARKUP_PERCENT_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --22. Validation for RPT ( RENEWAL_GRACE_DURATION ) rule.
       BEGIN
          RENEWAL_GRACE_DURATION      := RENEWAL_GRACE_DURATION_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'RPT');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_GRACE_DURATION');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RPT'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , RENEWAL_GRACE_DURATION_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --23. Validation for RER ( RENEWAL_EST_REV_PERCENT ) rule.
       BEGIN
          RENEWAL_EST_REV_PERCENT      := RENEWAL_EST_REV_PERCENT_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'RER');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_EREV_PERCENT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RER'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , RENEWAL_EST_REV_PERCENT_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --24. Validation for RER ( RENEWAL_EST_REV_DURATION ) rule.
       BEGIN
          RENEWAL_EST_REV_DURATION      := RENEWAL_EST_REV_DURATION_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'RER');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_EREV_DURATION');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RER'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_EST_REV_DURATION_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --25. Validation for RRU ( RENEWAL_PRICE_LIST_USED ) rule.
       BEGIN
          RENEWAL_PRICE_LIST_USED     := RENEWAL_PRICE_LIST_USED_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_PRICE_LIST_U');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RRU'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , RENEWAL_PRICE_LIST_USED_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --26. Validation for RRU ( RENEWAL_NOTIFICATION_TO ) rule.
       BEGIN
          RENEWAL_NOTIFICATION_TO      := RENEWAL_NOTIFICATION_TO_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_NOTIFICATION');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RRU'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_NOTIFICATION_TO_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --27. Validation for RRU ( RENEWAL_NOTIFICATION_TO ) rule.
       BEGIN
          RENEWAL_MARKUP_PERCENT_USED      := RENEWAL_MARKUP_PERCENT_USED_CH;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_MPERCENT_U');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RRU'  ,'RULE_INFORMATION5'    ,L_ATTRIBUTE_NAME         , RENEWAL_MARKUP_PERCENT_USED_CH,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --28. Validation for RRU ( REV_EST_PERCENT_USED ) rule.
       BEGIN
          REV_EST_PERCENT_USED      := REV_EST_PERCENT_USED_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_REV_EST_PERCENT_U');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RRU'  ,'RULE_INFORMATION6'    ,L_ATTRIBUTE_NAME         , REV_EST_PERCENT_USED_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --29. Validation for RRU ( REV_EST_DURATION_USED ) rule.
       BEGIN
          REV_EST_DURATION_USED      := REV_EST_DURATION_USED_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_REV_EST_DURATION_U');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RRU'  ,'RULE_INFORMATION7'    ,L_ATTRIBUTE_NAME         , REV_EST_DURATION_USED_CHR,
                                       L_ERROR_MSG );
             Eflag:=1;
       END;

       --30. Validation for RRU ( BILLING_PROFILE_USED ) rule.
       BEGIN
          BILLING_PROFILE_USED      := BILLING_PROFILE_USED_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BILLING_PROFILE_U');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RRU'  ,'RULE_INFORMATION9'    ,L_ATTRIBUTE_NAME         , BILLING_PROFILE_USED_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --31. Validation for RRU ( EVN_THRESHOLD_AMT ) rule.
       BEGIN
          EVN_THRESHOLD_AMT      := EVN_THRESHOLD_AMT_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EVN_THRESHOLD_AMT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RRU'  ,'RULE_INFORMATION11'    ,L_ATTRIBUTE_NAME         , EVN_THRESHOLD_AMT_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --32. Validation for RRU ( ERN_THRESHOLD_AMT ) rule.
       BEGIN
          ERN_THRESHOLD_AMT      := ERN_THRESHOLD_AMT_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_ERN_THRESHOLD_AMT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RRU'  ,'RULE_INFORMATION13'    ,L_ATTRIBUTE_NAME         , ERN_THRESHOLD_AMT_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --33. Validation for RRE ( RENEWAL_GRACE_DURATION_USED ) rule.
       BEGIN
          RENEWAL_GRACE_DURATION_USED      := RENEWAL_GRACE_DURATION_USED_CH;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'RRE');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_GDURATION_U');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RRE'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , RENEWAL_GRACE_DURATION_USED_CH,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --34. Validation for PRE ( PRICE_LIST_ID ) rule.
       BEGIN
          PRICE_LIST_ID      := PRICE_LIST_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'PRE');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PRICE_LIST_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'PRE'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , PRICE_LIST_ID_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --35. Validation for CVN ( CONVERSION_RATE ) rule.
       BEGIN
          CONVERSION_RATE      := CONVERSION_RATE_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'CVN');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CONVERSION_RATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'CVN'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , CONVERSION_RATE_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --36. Validation for CVN ( CONVERSION_EURO_RATE ) rule.
       BEGIN
          CONVERSION_EURO_RATE      := CONVERSION_EURO_RATE_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'CVN');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CONVERSION_EURO_RATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'CVN'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , CONVERSION_EURO_RATE_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

/*
       --37. Validation for CCR ( CC_EXPIRY_DATE ) rule.
       BEGIN
          CC_EXPIRY_DATE      := to_date(CC_EXPIRY_DATE_CHR,'yyyy/mm/dd hh24:mi:ss');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'CCR');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CC_EXPIRY_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'CCR'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , CC_EXPIRY_DATE_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;
*/

/*
       --38. Validation for RVE ( EST_REV_DATE ) rule.
       BEGIN
          EST_REV_DATE      := to_date(EST_REV_DATE_CHR,'yyyy/mm/dd hh24:mi:ss');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'RVE');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EST_REV_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'RVE'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , EST_REV_DATE_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

*/
/*
       --39. Validation for REN ( RENEWAL_END_DATE ) rule.
       BEGIN
          RENEWAL_END_DATE      := to_date(RENEWAL_END_DATE_CHR,'yyyy/mm/dd hh24:mi:ss');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'REN');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_END_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'REN'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , RENEWAL_END_DATE_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;
*/

/*
       --40. Validation for REN ( CONVERSION_RATE_DATE ) rule.
       BEGIN
          CONVERSION_RATE_DATE      := to_date(CONVERSION_RATE_DATE_CHR,'yyyy/mm/dd hh24:mi:ss');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'REN');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CONVERSION_RATE_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER,'HDR',
                                      'CVN'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , CONVERSION_RATE_DATE_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

  */


    -- End of code to validate data type .
  ---------------------------------------------------------------------------------------



      End If;


      If(Eflag <> 0) Then
        Eflag:=0;
        Raise Main_Exception;
      End If;


      x_return_status := 'S';


  Exception
     When Main_exception THEN
      IF(Emsg is not null) THEN
         FND_FILE.PUT_LINE(FND_FILE.LOG ,'DML Failed for'||p_rgp_id||'with Error Message '||Emsg);
      End If;

      IF(L_ERROR_MSG is not null) THEN
         FND_FILE.PUT_LINE(FND_FILE.LOG ,'Validation for'||p_rgp_id||'Failed with Error Message '||L_ERROR_MSG);
      End If;

     x_return_status := 'E';
    WHEN LOCK_EXCEPTION  THEN
	X_RETURN_STATUS := 'E';
	L_ERROR_MSG := SQLERRM;
    	FND_FILE.PUT_LINE(FND_FILE.LOG ,'DML Failed for LOCK ROW'||p_rgp_id||'with Error Message '||L_ERROR_MSG);
    WHEN OTHERS THEN
	X_RETURN_STATUS := 'E';
	L_ERROR_MSG := SQLERRM;
    	FND_FILE.PUT_LINE(FND_FILE.LOG ,'DML Failed for'||p_rgp_id||'with Error Message '||L_ERROR_MSG);


END SYNCHRONIZE_RULE_HDR;

-----------------------------------------------------------------------------------------
-- This is the  Procedure called from the procedure SYNCHRONIZE_RULE_DATA_SUBREQ         --
--   code for -Synchronize Line rule data         --
-----------------------------------------------------------------------------------------


PROCEDURE SYNCHRONIZE_RULE_LINE(
    P_RGP_ID          IN NUMBER,
    P_CLE_ID           IN NUMBER,
    DNZ_CHR_ID         IN NUMBER,
    p_us_yn           in BOOLEAN,
    x_return_status            out NOCOPY VARCHAR2)

IS

L_DNZ_CHR_ID                    number;
DISCOUNT_LIST                   number ;  --DST
ACCT_RULE_ID                    number ;  --ARL
L_PAYMENT_TYPE                    varchar2(2000) ;  --CCR
L_CC_NO                           varchar2(2000) ;  --CCR
CC_EXPIRY_DATE			date ; --CCR
CC_BANK_ACCT_ID			number ;  --CCR
L_CC_AUTH_CODE			varchar2(2000) ;  --CCR
GRACE_DURATION			number ;  --GPR
L_GRACE_PERIOD			varchar2(2000) ;  --GPR
L_INVOICE_TEXT			varchar2(2000) ;  --IRT
L_INV_PRINT_FLAG			varchar2(2000) ;  --IRT
L_PRICE_UOM			varchar2(2000) ;  --IRT
TAX_AMOUNT			number ;  --IRT
L_TAX_INCLUSIVE_YN		varchar2(2000) ;  --IRT
L_TAX_STATUS			varchar2(2000) ;  --TAX
TAX_CODE			number ;  --TAX
TAX_EXEMPTION_ID		number ;  --TAX
L_IB_TRANS_TYPE			varchar2(2000) ;  --IBR
IB_TRANS_DATE			date ; --IBR
L_IB_TRX_DETAILS			varchar2(2000) ;  --IBR
CLVL_LIST_PRICE			number ;  --PDL
CLVL_QUANTITY			number ;  --PDL
CLVL_EXTENDED_AMT		number ;  --PDL
L_TOPLVL_OPERAND_CODE		varchar2(2000) ;  --PDL
TOPLVL_OPERAND_VAL		number ;  --PDL
L_CLVL_UOM_CODE			varchar2(2000) ;  --PDL
TOPLVL_QUANTITY			number ;  --PDL
L_TOPLVL_UOM_CODE			varchar2(2000) ;  --PDL
TOPLVL_ADJ_PRICE		number ;  --PDL
TOPLVL_PRICE_QTY		number ;  --PDL
L_STATUS_TEXT			varchar2(2000) ;  --PDL
AVERAGING_INTERVAL		number ;  --QRE
L_USAGE_PERIOD			varchar2(2000) ;  --QRE
L_SETTLEMENT_INTERVAL		varchar2(2000) ;  --QRE
MINIMUM_QUANTITY		number ;  --QRE
DEFAULT_QUANTITY		number ;  --QRE
L_AMCV_FLAG			varchar2(2000) ;  --QRE
FIXED_QUANTITY			number ;  --QRE
USAGE_DURATION			number ;  --QRE
L_LEVEL_YN			varchar2(2000) ;  --QRE
L_USAGE_TYPE			varchar2(2000) ;  --QRE
L_UOM_QUANTIFIED			varchar2(2000) ;  --QRE
BASE_READING			number ;  --QRE
L_USAGE_EST_METHOD		varchar2(2000) ;  --QRE
L_BILLING_SCHEDULE_TYPE		varchar2(2000) ;  --SLH
CUST_ACCT_ID			number ;  --CAN (OKC)
BILL_TO_SITE_USE_ID		number ;  --BTO (OKC)
INV_RULE_ID			number ;  --IRE (OKC)
L_LINE_RENEWAL_TYPE_CODE		varchar2(2000) ;  --REN (OKC)
SHIP_TO_SITE_USE_ID		number ;  --STO (OKC)
PAYMENT_TERM_ID			number ;  --PTR (OKC)
LINE_LIST_PRICE                 number ;  --PDL rule_info4 (OKC)

-- FOLLOWING ARE NUMBER FIELDS --
DISCOUNT_LIST_CHR               varchar2(2000) ;  --DST
ACCT_RULE_ID_CHR                varchar2(2000) ;  --ARL
CC_BANK_ACCT_ID_CHR		varchar2(2000) ;  --CCR
GRACE_DURATION_CHR		varchar2(2000) ;  --GPR
TAX_AMOUNT_CHR   		varchar2(2000) ;  --IRT
TAX_CODE_CHR    		varchar2(2000) ;  --TAX
TAX_EXEMPTION_ID_CHR		varchar2(2000) ;  --TAX
CLVL_LIST_PRICE_CHR		varchar2(2000) ;  --PDL
CLVL_QUANTITY_CHR		varchar2(2000) ;  --PDL
CLVL_EXTENDED_AMT_CHR   	varchar2(2000) ;  --PDL
TOPLVL_OPERAND_VAL_CHR		varchar2(2000) ;  --PDL
TOPLVL_QUANTITY_CHR		varchar2(2000) ;  --PDL
TOPLVL_ADJ_PRICE_CHR		varchar2(2000) ;  --PDL
TOPLVL_PRICE_QTY_CHR		varchar2(2000) ;  --PDL
AVERAGING_INTERVAL_CHR		varchar2(2000) ;  --QRE
MINIMUM_QUANTITY_CHR		varchar2(2000) ;  --QRE
DEFAULT_QUANTITY_CHR		varchar2(2000) ;  --QRE
FIXED_QUANTITY_CHR		varchar2(2000) ;  --QRE
USAGE_DURATION_CHR		varchar2(2000) ;  --QRE
BASE_READING_CHR		varchar2(2000) ;  --QRE
CUST_ACCT_ID_CHR		varchar2(2000) ;  --CAN (OKC)
BILL_TO_SITE_USE_ID_CHR		varchar2(2000) ;  --BTO (OKC)
INV_RULE_ID_CHR			varchar2(2000) ;  --IRE (OKC)
SHIP_TO_SITE_USE_ID_CHR		varchar2(2000) ;  --STO (OKC)
PAYMENT_TERM_ID_CHR		varchar2(2000) ;  --PTR (OKC)
LINE_LIST_PRICE_CHR             varchar2(2000) ;  --PDL rule_info4 (OKC)
------------------------------------------------------------
EXCEPTION_COV_ID_CHR            Varchar2(2000);
PM_PROGRAM_ID_CHR               Varchar2(2000);
PRICE_LIST_ID_CHR               Varchar2(2000);
RCN_INCIDENT_SEVERITY_ID_CHR    Varchar2(2000);
RCN_PDF_ID_CHR                  Varchar2(2000);
RSN_INCIDENT_SEVERITY_ID_CHR    Varchar2(2000);
RSN_PDF_ID_CHR                  Varchar2(2000);
DISCOUNT_PERCENT_CHR            Varchar2(2000);
DISCOUNT_AMOUNT_CHR             Varchar2(2000);
------------------------------------------------------------
EXCEPTION_COV_ID                Number ;
L_INHERITANCE_TYPE              Varchar2(2000);
Prod_Upgrade_YN_CHR             Varchar2(2000);
Coverage_Type_CHR               Varchar2(2000);
TRANSFER_OPTION_CHR             Varchar2(2000);
PM_PROGRAM_ID                   Number ;
PM_CONF_REQ_YN_CHR              Varchar2(2000);
PM_SCH_EXISTS_YN_CHR            Varchar2(2000);
ALLOW_BT_DISCOUNT_CHR           Varchar2(2000);
L_OFFSET_DURATION               Varchar2(2000);
PRICE_LIST_ID                   Number ;
RCN_INCIDENT_SEVERITY_ID        Number ;
RCN_PDF_ID                      Number ;
RCN_REACT_TIME_NAME             Varchar2(2000);
RCN_WORK_THRU_YN                Varchar2(2000);
RCN_REACT_ACTIVE_YN             Varchar2(2000);
RSN_INCIDENT_SEVERITY_ID        Number ;
RSN_PDF_ID                      Number ;
RSN_REACT_TIME_NAME             Varchar2(2000);
RSN_WORK_THRU_YN                Varchar2(2000);
RSN_REACT_ACTIVE_YN             Varchar2(2000);
L_LIMIT_UOM_QUANTIFIED          Varchar2(2000);
DISCOUNT_AMOUNT                 Number;
DISCOUNT_PERCENT                Number;
L_Sync_Date_Install             Varchar2(2000);

-----------------------------------------------------------
-- FOLLOWING ARE DATE FIELDS --
CC_EXPIRY_DATE_CHR		varchar2(2000) ; --CCR
IB_TRANS_DATE_CHR		varchar2(2000) ; --IBR

--Misc Variables --
L_ATTRIBUTE_NAME                VARCHAR2(2000);
L_ERROR_MSG                     VARCHAR2(2000);
 L_USERENV_LANG                 VARCHAR2(100) := OKC_UTIL.get_userenv_lang ;

MAIN_EXCEPTION                  EXCEPTION;
VAL_EXCEPTION                   EXCEPTION;
LOCK_EXCEPTION                  EXCEPTION;

 CURSOR L_LOCK_CSR ( P_CLE_ID in NUMBER ) IS
 SELECT ID
   FROM OKC_K_LINES_B
  WHERE ID = P_CLE_ID
    FOR UPDATE NOWAIT;
L_LOCK_ID                    NUMBER;
Eflag                        NUMBER;
Emsg                         VARCHAR2(2000);
l_check_var                  varchar2(1);
l_check_var1                 varchar2(1);

-------------------------------------------------------------------------------
-- The following is the cursor opened if all the parameters passed are null  --
-------------------------------------------------------------------------------
CURSOR l_line_rule_csr (p_id in NUMBER)is
SELECT     -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                          DISCOUNT_LIST
        MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1))                DISCOUNT_LIST

       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1))                ACCT_RULE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,'CCR'))                          PAYMENT_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION1))          CC_NO
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,
            to_date(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                       CC_EXPIRY_DATE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
       --              '!,.','!')                                                          CC_BANK_ACCT_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3))          CC_BANK_ACCT_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION4))          CC_AUTH_CODE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
       --              '!,.','!')                                                          GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1))          GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION2))          GRACE_PERIOD
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION1))          INVOICE_TEXT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION2))          INV_PRINT_FLAG
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION3))          PRICE_UOM
        -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
                     '!,','!')                                                             TAX_AMOUNT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION5))          TAX_INCLUSIVE_YN
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.RULE_INFORMATION2))          TAX_STATUS
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
                     '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!')       TAX_CODE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                          TAX_EXEMPTION_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1))                TAX_EXEMPTION_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IBR' ,RUL.RULE_INFORMATION1))          IB_TRANS_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IBR' ,
            TO_DATE(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                       IB_TRANS_DATE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IBR' ,RUL.RULE_INFORMATION3))          IB_TRX_DETAILS
        -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),
                     '!,','!')                                                             CLVL_LIST_PRICE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),
       --              '!,.','!')                                                          CLVL_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2))          CLVL_QUANTITY
       -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),
                     '!,','!')                                                             CLVL_EXTENDED_AMT
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION4)),
                     '!,','!')                                                             LINE_LIST_PRICE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION5))          TOPLVL_OPERAND_CODE
        -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),
                     '!,','!')                                                             TOPLVL_OPERAND_VAL
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION7))          CLVL_UOM_CODE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),
       --              '!,.','!')                                                          TOPLVL_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8))          TOPLVL_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION9))          TOPLVL_UOM_CODE
       -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),
                     '!,','!')                                                             TOPLVL_ADJ_PRICE
       -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),
                     '!,','!')                                                             TOPLVL_PRICE_QTY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION12)) STATUS_TEXT
       -------  Character to number conversion -- Records dosent exitsts in gsidev fro this category  QRE.
       -- Not sure whethet translation is required or not. since records dosent exitst in gsidev - no trans done
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),
       --              '!,.','!')                                                           AVERAGING_INTERVAL
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1))           AVERAGING_INTERVAL
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION2))           USAGE_PERIOD
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION3))           SETTLEMENT_INTERVAL
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),
       --              '!,.','!')                                                           MINIMUM_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4))           MINIMUM_QUANTITY
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),
       --              '!,.','!')                                                           DEFAULT_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5))           DEFAULT_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION6))           AMCV_FLAG
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),
       --              '!,.','!')                                                           FIXED_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7))               FIXED_QUANTITY
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),
       --              '!,.','!')       USAGE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8))           USAGE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION9))           LEVEL_YN
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION10))          USAGE_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION11))          UOM_QUANTIFIED
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),
       --              '!,.','!')       BASE_READING
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12))          BASE_READING
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,DECODE(RUL.RULE_INFORMATION6,'Y','AMCV'))) USAGE_EST_METHOD
       --,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLH' ,RUL.RULE_INFORMATION1))           BILLING_SCHEDULE_TYPE
       ,decode(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION_CATEGORY)),'QRE','T',
                MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLH' ,RUL.RULE_INFORMATION1)) ) BILLING_SCHEDULE_TYPE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                           CUST_ACCT_ID           --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1))                 CUST_ACCT_ID           --OKC
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                           BILL_TO_SITE_USE_ID    --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1))                 BILL_TO_SITE_USE_ID    --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1))                 INV_RULE_ID            --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LRT' ,RUL.RULE_INFORMATION1))           LINE_RENEWAL_TYPE_CODE --OKC
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                           SHIP_TO_SITE_USE_ID    --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1))                 SHIP_TO_SITE_USE_ID    --OKC
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                           PAYMENT_TERM_ID        --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1))                 PAYMENT_TERM_ID        --OKC
       ----- For Coverages
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1))             EXCEPTION_COV_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'WHE',RUL.RULE_INFORMATION1))             INHERITANCE_TYPE
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'UGE',RUL.RULE_INFORMATION1))             PROD_UPGRADE_YN_CHR
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'CVE',RUL.RULE_INFORMATION1))             COVERAGE_TYPE_CHR
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'STR',decode(RUL.RULE_INFORMATION1,'Y','TRANS','TERM'))) TRANSFER_OPTION_CHR
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1))                   PM_PROGRAM_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.RULE_INFORMATION1))             PM_CONF_REQ_YN_CHR
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.RULE_INFORMATION2))             PM_SCH_EXISTS_YN_CHR
       --,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'DST',RUL.OBJECT1_ID1))                 DISCOUNT_LIST
       --,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'BTD',DECODE(LINE.LSE_ID ,16,'Y',RUL.RULE_INFORMATION1))) ALLOW_BT_DISCOUNT
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'BTD','Y'))ALLOW_BT_DISCOUNT_CHR
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'OFS',RUL.RULE_INFORMATION1))OFFSET_DURATION
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PRE',RUL.OBJECT1_ID1))                   PRICE_LIST_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1))                   RCN_INCIDENT_SEVERITY_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1))             RCN_PDF_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION2))             RCN_REACT_TIME_NAME
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION3))             RCN_WORK_THRU_YN
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION4))             RCN_REACT_ACTIVE_YN
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RSN',RUL.RULE_INFORMATION2))             RSN_REACT_TIME_NAME
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1))             LIMIT_UOM_QUANTIFIED
       -------  Character to number conversion -- Records dosent exitsts in gsidev fro this category  LMT.
       -- Not sure whethet translation is required or not. since records dosent exitst in gsidev - no trans done
       --,TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION2)),
       --              '!,','!')                                                           DISCOUNT_AMOUNT
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION2))             DISCOUNT_AMOUNT
       --,TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION4)),
       --              '!%,','!')                                                          DISCOUNT_PERCENT
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION4))             DISCOUNT_PERCENT
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT','N'))Sync_Date_Install
--------------------------------------------------------------------------------------------------------------------
  FROM OKC_RULE_GROUPS_B RGP
     , OKC_RULES_B RUL
 WHERE RGP.ID  = RUL.RGP_ID
   AND RUL.RULE_INFORMATION_CATEGORY IN ('DST','ARL','CCR','GPR','IRT','TAX','IBR','PDL','QRE','SLH','CAN','BTO','IRE','LRT','STO','PTR',
'ECE','WHE','UGE','STR','CVE','PMP','BTD','RCN','RSN','LMT','OFS','PRE')
   AND RGP.CLE_ID = P_CLE_ID
   AND RGP.RGD_CODE = 'SVC_K'
   AND RGP.id = p_id;


CURSOR l_line_rule_csr_nus (p_id in NUMBER)is
SELECT
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                          DISCOUNT_LIST
        MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1))                DISCOUNT_LIST

       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1))                ACCT_RULE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,'CCR'))                          PAYMENT_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION1))          CC_NO
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,
            to_date(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                       CC_EXPIRY_DATE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
       --              '!,. ','!')                                                          CC_BANK_ACCT_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3))          CC_BANK_ACCT_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION4))          CC_AUTH_CODE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
       --              '!,. ','!')                                                          GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1))          GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION2))          GRACE_PERIOD
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION1))          INVOICE_TEXT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION2))          INV_PRINT_FLAG
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION3))          PRICE_UOM
        -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
                     '!. ','!')                                                             TAX_AMOUNT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION5))          TAX_INCLUSIVE_YN
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.RULE_INFORMATION2))          TAX_STATUS
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
                     '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,. ','!')       TAX_CODE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                          TAX_EXEMPTION_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1))                TAX_EXEMPTION_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IBR' ,RUL.RULE_INFORMATION1))          IB_TRANS_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IBR' ,
            TO_DATE(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                       IB_TRANS_DATE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IBR' ,RUL.RULE_INFORMATION3))          IB_TRX_DETAILS
        -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),
                     '!. ','!')                                                             CLVL_LIST_PRICE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),
       --              '!,. ','!')                                                          CLVL_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2))           CLVL_QUANTITY
       -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),
                     '!. ','!')                                                             CLVL_EXTENDED_AMT
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION4)),
                     '!. ','!')                                                             LINE_LIST_PRICE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION5))          TOPLVL_OPERAND_CODE
        -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),
                     '!. ','!')                                                             TOPLVL_OPERAND_VAL
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION7))          CLVL_UOM_CODE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),
       --              '!,. ','!')                                                          TOPLVL_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8))          TOPLVL_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION9))          TOPLVL_UOM_CODE
       -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),
                     '!. ','!')                                                             TOPLVL_ADJ_PRICE
       -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),
                     '!. ','!')                                                             TOPLVL_PRICE_QTY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION12)) STATUS_TEXT
       -------  Character to number conversion -- Records dosent exitsts in gsidev fro this category  QRE.
       -- Not sure whethet translation is required or not. since records dosent exitst in gsidev - no trans done
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),
       --              '!,. ','!')                                                           AVERAGING_INTERVAL
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1))           AVERAGING_INTERVAL
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION2))           USAGE_PERIOD
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION3))           SETTLEMENT_INTERVAL
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),
       --              '!,. ','!')                                                           MINIMUM_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4))           MINIMUM_QUANTITY
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),
       --              '!,. ','!')                                                           DEFAULT_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5))           DEFAULT_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION6))           AMCV_FLAG
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),
       --              '!,. ','!')                                                           FIXED_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7))               FIXED_QUANTITY
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),
       --              '!,. ','!')       USAGE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8))           USAGE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION9))           LEVEL_YN
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION10))          USAGE_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION11))          UOM_QUANTIFIED
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),
       --              '!,. ','!')       BASE_READING
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12))          BASE_READING
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,DECODE(RUL.RULE_INFORMATION6,'Y','AMCV'))) USAGE_EST_METHOD
       --,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLH' ,RUL.RULE_INFORMATION1))           BILLING_SCHEDULE_TYPE
       ,decode(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION_CATEGORY)),'QRE','T',
                MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLH' ,RUL.RULE_INFORMATION1)) ) BILLING_SCHEDULE_TYPE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                           CUST_ACCT_ID           --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1))                 CUST_ACCT_ID           --OKC
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                           BILL_TO_SITE_USE_ID    --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1))                 BILL_TO_SITE_USE_ID    --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1))                 INV_RULE_ID            --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LRT' ,RUL.RULE_INFORMATION1))           LINE_RENEWAL_TYPE_CODE --OKC
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                           SHIP_TO_SITE_USE_ID    --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1))                 SHIP_TO_SITE_USE_ID    --OKC
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                           PAYMENT_TERM_ID        --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1))                 PAYMENT_TERM_ID        --OKC
       ----- For Coverages
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1))             EXCEPTION_COV_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'WHE',RUL.RULE_INFORMATION1))             INHERITANCE_TYPE
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'UGE',RUL.RULE_INFORMATION1))             PROD_UPGRADE_YN_CHR
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'CVE',RUL.RULE_INFORMATION1))             COVERAGE_TYPE_CHR
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'STR',decode(RUL.RULE_INFORMATION1,'Y','TRANS','TERM'))) TRANSFER_OPTION_CHR
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1))                   PM_PROGRAM_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.RULE_INFORMATION1))             PM_CONF_REQ_YN_CHR
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.RULE_INFORMATION2))             PM_SCH_EXISTS_YN_CHR
       --,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'DST',RUL.OBJECT1_ID1))                 DISCOUNT_LIST
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'BTD','Y'))ALLOW_BT_DISCOUNT_CHR
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'OFS',RUL.RULE_INFORMATION1))OFFSET_DURATION
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PRE',RUL.OBJECT1_ID1))                   PRICE_LIST_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1))                   RCN_INCIDENT_SEVERITY_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1))             RCN_PDF_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION2))             RCN_REACT_TIME_NAME
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION3))             RCN_WORK_THRU_YN
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION4))             RCN_REACT_ACTIVE_YN
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RSN',RUL.RULE_INFORMATION2))             RSN_REACT_TIME_NAME
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1))             LIMIT_UOM_QUANTIFIED
       -------  Character to number conversion -- Records dosent exitsts in gsidev fro this category  LMT.
       -- Not sure whethet translation is required or not. since records dosent exitst in gsidev - no trans done
       --,TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION2)),
       --              '!. ','!')                                                           DISCOUNT_AMOUNT
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION2))             DISCOUNT_AMOUNT
       --,TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION4)),
       --              '!%. ','!')                                                          DISCOUNT_PERCENT
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION4))             DISCOUNT_PERCENT
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT','N'))Sync_Date_Install
--------------------------------------------------------------------------------------------------------------------
  FROM OKC_RULE_GROUPS_B RGP
     , OKC_RULES_B RUL
 WHERE RGP.ID  = RUL.RGP_ID
   AND RUL.RULE_INFORMATION_CATEGORY IN ('DST','ARL','CCR','GPR','IRT','TAX','IBR','PDL','QRE','SLH','CAN','BTO','IRE','LRT','STO','PTR',
'ECE','WHE','UGE','STR','CVE','PMP','BTD','RCN','RSN','LMT','OFS','PRE')
   AND RGP.CLE_ID = P_CLE_ID
   AND RGP.RGD_CODE = 'SVC_K'
   AND RGP.id = p_id;


 ----------------------------------------------------------------------------
-- Cursor to populate data in OKS_RULE_ERROR table .                      --
----------------------------------------------------------------------------
CURSOR L_LINE_DTLS_CSR (P_CLE_ID  IN NUMBER ,P_HDR_ID IN NUMBER, P_CATEGORY IN VARCHAR2 ) IS
SELECT HDR.CONTRACT_NUMBER
     , HDR.CONTRACT_NUMBER_MODIFIER
     , LIN.LINE_NUMBER
     , RUL.ID
     , RGP.ID RGP_ID
 FROM  OKC_K_HEADERS_B HDR
     , OKC_RULE_GROUPS_B RGP
     , OKC_RULES_B RUL
     , OKC_K_LINES_B LIN
WHERE HDR.ID = P_HDR_ID
  AND LIN.ID= P_CLE_ID
  AND RGP.DNZ_CHR_ID = P_HDR_ID
  AND RGP.CLE_ID = LIN.ID
  AND RGP.ID = RUL.RGP_ID
  AND RGP.DNZ_CHR_ID = RUL.DNZ_CHR_ID
  AND RUL.RULE_INFORMATION_CATEGORY = P_CATEGORY ;

L_LINE_DTLS_REC L_LINE_DTLS_CSR%ROWTYPE;
-----------------------------------------------------------------------------
--Cursor to check if the records corresponding to CLE_ID exists
--in oks_k_lines_b
-----------------------------------------------------------------------------
 Cursor Cur_Klin_exists(p_cleid in number) IS
 select 'x'
   from oks_k_lines_b
  where cle_id=p_cleid;

-----------------------------------------------------------------------------
--Cursor to check if the records corresponding to rgp_id exists
--in okc_rule_groups_b
-----------------------------------------------------------------------------
 Cursor Cur_RGP_exists(P_RGP_ID in number) IS
 select 'x'
   from okc_rule_groups_b
  where id = P_RGP_ID
    and cle_id is not null;


-----------------------------------------------------------------
-- Newly added code to synchronize cc_no , po , Price list from--
-- Header to Top lines                                         --
-----------------------------------------------------------------
 l_payment_typei    varchar2(2000);
 l_cc_noi           varchar2(2000);
 l_cc_expiry_datei  date;
 --l_cc_bank_acct_idi number;
 --l_cc_auth_codei    varchar2(2000);
 l_cust_po_numberi  varchar2(2000);
 l_cust_po_number_req_yni varchar2(10);
 l_price_list_idi   number;
 l_dnz_chr_idi      number;
 l_lse_idi          number;

 CURSOR L_SYNHL_CSR ( p_hdr_id in NUMBER , p_line_id in NUMBER ) is
  select oks.payment_type
       , oks.cc_no
       , oks.cc_expiry_date
       --, oks.cc_bank_acct_id
       --, oks.cc_auth_code
       , okc.cust_po_number
       , okc.cust_po_number_req_yn
       , okc.price_list_id
       , okc.id
       , okcl.lse_id
    from oks_k_headers_b oks
       , okc_k_headers_b okc
       , okc_k_lines_b   okcl
   where oks.chr_id = okc.id
     and okcl.lse_id in ( 1,12,19,46)
     and okcl.dnz_chr_id = oks.chr_id
     and okcl.dnz_chr_id = okc.id
     and oks.chr_id = p_hdr_id
     and okc.id     = p_hdr_id
     and okcl.id    = p_line_id ;

BEGIN
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'--------------  Start of Sub request for Line Rule Data Synchronisation   --------');
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');

 BEGIN
   OPEN L_LOCK_CSR (p_cle_id);
   FETCH L_LOCK_CSR into L_LOCK_ID;
   CLOSE L_LOCK_CSR;
 EXCEPTION
   WHEN OTHERS THEN
     RAISE LOCK_EXCEPTION;
 END;

 L_DNZ_CHR_ID := DNZ_CHR_ID;


 DBMS_TRANSACTION.SAVEPOINT('BEFORE_TRANSACTION');

if(p_us_yn) then
   OPEN l_line_rule_csr(p_rgp_id);

   FETCH l_line_rule_csr into
                         DISCOUNT_LIST_CHR
                        ,ACCT_RULE_ID_CHR
                        ,L_PAYMENT_TYPE
                        ,L_CC_NO
                        ,CC_EXPIRY_DATE_CHR
                        ,CC_BANK_ACCT_ID_CHR
                        ,L_CC_AUTH_CODE
                        ,GRACE_DURATION_CHR
                        ,L_GRACE_PERIOD
                        ,L_INVOICE_TEXT
                        ,L_INV_PRINT_FLAG
                        ,L_PRICE_UOM
                        ,TAX_AMOUNT_CHR
                        ,L_TAX_INCLUSIVE_YN
                        ,L_TAX_STATUS
                        ,TAX_CODE_CHR
                        ,TAX_EXEMPTION_ID_CHR
                        ,L_IB_TRANS_TYPE
                        ,IB_TRANS_DATE_CHR
                        ,L_IB_TRX_DETAILS
                        --,PROD_PRICE
                        --,SERVICE_PRICE
                        ,CLVL_LIST_PRICE_CHR
                        ,CLVL_QUANTITY_CHR
                        ,CLVL_EXTENDED_AMT_CHR
                        ,LINE_LIST_PRICE_CHR
                        ,L_TOPLVL_OPERAND_CODE
                        ,TOPLVL_OPERAND_VAL_CHR
                        ,L_CLVL_UOM_CODE
                        ,TOPLVL_QUANTITY_CHR
                        ,L_TOPLVL_UOM_CODE
                        ,TOPLVL_ADJ_PRICE_CHR
                        ,TOPLVL_PRICE_QTY_CHR
                        ,L_STATUS_TEXT
                        ,AVERAGING_INTERVAL_CHR
                        ,L_USAGE_PERIOD
                        ,L_SETTLEMENT_INTERVAL
                        ,MINIMUM_QUANTITY_CHR
                        ,DEFAULT_QUANTITY_CHR
                        ,L_AMCV_FLAG
                        ,FIXED_QUANTITY_CHR
                        ,USAGE_DURATION_CHR
                        ,L_LEVEL_YN
                        ,L_USAGE_TYPE
                        ,L_UOM_QUANTIFIED
                        ,BASE_READING_CHR
                        ,L_USAGE_EST_METHOD
                        ,L_BILLING_SCHEDULE_TYPE
                        ,CUST_ACCT_ID_CHR           --OKC
                        ,BILL_TO_SITE_USE_ID_CHR    --OKC
                        ,INV_RULE_ID_CHR            --OKC
                        ,L_LINE_RENEWAL_TYPE_CODE --OKC
                        ,SHIP_TO_SITE_USE_ID_CHR    --OKC
                        ,PAYMENT_TERM_ID_CHR       --OKC

-------------------------------------------------------------------------------
		  , EXCEPTION_COV_ID_CHR,
		    L_INHERITANCE_TYPE,
		    Prod_Upgrade_YN_CHR,
		    Coverage_Type_CHR,
		    TRANSFER_OPTION_CHR,
		    PM_PROGRAM_ID_CHR,
		    PM_CONF_REQ_YN_CHR,
		    PM_SCH_EXISTS_YN_CHR,
		    --DISCOUNT_LIST,
		    ALLOW_BT_DISCOUNT_CHR,
		    L_OFFSET_DURATION,
		    --OFFSET_PERIOD,
		    PRICE_LIST_ID_CHR,
		    RCN_INCIDENT_SEVERITY_ID_CHR,
		    RCN_PDF_ID_CHR,
		    RCN_REACT_TIME_NAME,
		    RCN_WORK_THRU_YN,
		    RCN_REACT_ACTIVE_YN,
		    RSN_REACT_TIME_NAME,
		    L_LIMIT_UOM_QUANTIFIED,
		    DISCOUNT_AMOUNT_CHR,
		    DISCOUNT_PERCENT_CHR,
		    L_Sync_Date_Install
		-------------------------------------------------------------------------------
			 ;      --OKC

      Close l_line_rule_csr;
   else
   OPEN l_line_rule_csr_nus(p_rgp_id);

   FETCH l_line_rule_csr_nus into
                         DISCOUNT_LIST_CHR
                        ,ACCT_RULE_ID_CHR
                        ,L_PAYMENT_TYPE
                        ,L_CC_NO
                        ,CC_EXPIRY_DATE_CHR
                        ,CC_BANK_ACCT_ID_CHR
                        ,L_CC_AUTH_CODE
                        ,GRACE_DURATION_CHR
                        ,L_GRACE_PERIOD
                        ,L_INVOICE_TEXT
                        ,L_INV_PRINT_FLAG
                        ,L_PRICE_UOM
                        ,TAX_AMOUNT_CHR
                        ,L_TAX_INCLUSIVE_YN
                        ,L_TAX_STATUS
                        ,TAX_CODE_CHR
                        ,TAX_EXEMPTION_ID_CHR
                        ,L_IB_TRANS_TYPE
                        ,IB_TRANS_DATE_CHR
                        ,L_IB_TRX_DETAILS
                        --,PROD_PRICE
                        --,SERVICE_PRICE
                        ,CLVL_LIST_PRICE_CHR
                        ,CLVL_QUANTITY_CHR
                        ,CLVL_EXTENDED_AMT_CHR
                        ,LINE_LIST_PRICE_CHR
                        ,L_TOPLVL_OPERAND_CODE
                        ,TOPLVL_OPERAND_VAL_CHR
                        ,L_CLVL_UOM_CODE
                        ,TOPLVL_QUANTITY_CHR
                        ,L_TOPLVL_UOM_CODE
                        ,TOPLVL_ADJ_PRICE_CHR
                        ,TOPLVL_PRICE_QTY_CHR
                        ,L_STATUS_TEXT
                        ,AVERAGING_INTERVAL_CHR
                        ,L_USAGE_PERIOD
                        ,L_SETTLEMENT_INTERVAL
                        ,MINIMUM_QUANTITY_CHR
                        ,DEFAULT_QUANTITY_CHR
                        ,L_AMCV_FLAG
                        ,FIXED_QUANTITY_CHR
                        ,USAGE_DURATION_CHR
                        ,L_LEVEL_YN
                        ,L_USAGE_TYPE
                        ,L_UOM_QUANTIFIED
                        ,BASE_READING_CHR
                        ,L_USAGE_EST_METHOD
                        ,L_BILLING_SCHEDULE_TYPE
                        ,CUST_ACCT_ID_CHR           --OKC
                        ,BILL_TO_SITE_USE_ID_CHR    --OKC
                        ,INV_RULE_ID_CHR            --OKC
                        ,L_LINE_RENEWAL_TYPE_CODE --OKC
                        ,SHIP_TO_SITE_USE_ID_CHR    --OKC
                        ,PAYMENT_TERM_ID_CHR       --OKC

-------------------------------------------------------------------------------
		  , EXCEPTION_COV_ID_CHR,
		    L_INHERITANCE_TYPE,
		    Prod_Upgrade_YN_CHR,
		    Coverage_Type_CHR,
		    TRANSFER_OPTION_CHR,
		    PM_PROGRAM_ID_CHR,
		    PM_CONF_REQ_YN_CHR,
		    PM_SCH_EXISTS_YN_CHR,
		    --DISCOUNT_LIST,
		    ALLOW_BT_DISCOUNT_CHR,
		    L_OFFSET_DURATION,
		    --OFFSET_PERIOD,
		    PRICE_LIST_ID_CHR,
		    RCN_INCIDENT_SEVERITY_ID_CHR,
		    RCN_PDF_ID_CHR,
		    RCN_REACT_TIME_NAME,
		    RCN_WORK_THRU_YN,
		    RCN_REACT_ACTIVE_YN,
		    RSN_REACT_TIME_NAME,
		    L_LIMIT_UOM_QUANTIFIED,
		    DISCOUNT_AMOUNT_CHR,
		    DISCOUNT_PERCENT_CHR,
		    L_Sync_Date_Install
		-------------------------------------------------------------------------------
			 ;      --OKC

      Close l_line_rule_csr_nus;

   end if;
   --End of If to choose the cursor to be fetched --
      ---------------------------------------------------------------------------
      -- Code added to synchronize Hdr level cc no,po,pricelist,cust_po_number --
      ---------------------------------------------------------------------------
      l_dnz_chr_idi := Null;
      Open  l_synhl_csr (dnz_chr_id , p_cle_id );
      Fetch l_synhl_csr into l_payment_typei
                           , l_cc_noi
                           , l_cc_expiry_datei
                           --, l_cc_bank_acct_idi
                           --, l_cc_auth_codei
                           , l_cust_po_numberi
                           , l_cust_po_number_req_yni
                           , l_price_list_idi
                           , l_dnz_chr_idi
                           , l_lse_idi ;
      Close l_synhl_csr;
      ---------------------------------------------------------------------------

      Eflag:=0;
      Emsg:=NULL;

      -- Begin of code to check if the row exists in oks_k_lines_b
      l_check_var:=NULL;
      Open  Cur_Klin_exists(P_Cle_ID);
      Fetch Cur_Klin_exists into l_check_var;
      Close Cur_Klin_exists;

      l_check_var1 := null;
      Open  Cur_RGP_exists(P_RGP_ID);
      Fetch Cur_RGP_exists into l_check_var1;
      Close Cur_RGP_exists;

      If(l_check_var is NULL and l_check_var1 is not null ) THEN
          BEGIN
             UPDATE OKC_K_LINES_B
                SET CUST_ACCT_ID           = CUST_ACCT_ID_CHR
                  , BILL_TO_SITE_USE_ID    = BILL_TO_SITE_USE_ID_CHR
                  , INV_RULE_ID            = INV_RULE_ID_CHR
                  , LINE_RENEWAL_TYPE_CODE = L_LINE_RENEWAL_TYPE_CODE
                  , SHIP_TO_SITE_USE_ID    = SHIP_TO_SITE_USE_ID_CHR
	          , PAYMENT_TERM_ID        = PAYMENT_TERM_ID_CHR
	          , PRICE_LIST_ID          = decode(l_lse_idi,1 ,l_price_list_idi
                                                             ,12,l_price_list_idi
                                                             ,19,l_price_list_idi
                                                             ,46,l_price_list_idi,PRICE_LIST_ID_CHR )
                  , LINE_LIST_PRICE        = LINE_LIST_PRICE_CHR
              WHERE ID = P_CLE_ID;

           EXCEPTION When others then
              Eflag:=1;
	      Emsg :=SQLERRM;
          END;

           If(Eflag<>1) Then
           BEGIN
              INSERT INTO OKS_K_LINES_B
                       ( ID
                        ,CLE_ID
                        ,DNZ_CHR_ID
                        ,DISCOUNT_LIST
                        ,ACCT_RULE_ID
                        --,PAYMENT_TYPE
                        --,CC_NO
                        --,CC_EXPIRY_DATE
                        --,CC_BANK_ACCT_ID
                        --,CC_AUTH_CODE
                        ,GRACE_DURATION
                        ,GRACE_PERIOD
                        ,INV_PRINT_FLAG
                        ,PRICE_UOM
                        ,TAX_AMOUNT
                        ,TAX_INCLUSIVE_YN
                        ,TAX_STATUS
                        ,TAX_CODE
                        ,TAX_EXEMPTION_ID
                        ,IB_TRANS_TYPE
                        ,IB_TRANS_DATE
                        --,PROD_PRICE
                        --,SERVICE_PRICE
                        ,CLVL_LIST_PRICE
                        ,CLVL_QUANTITY
                        ,CLVL_EXTENDED_AMT
                        ,TOPLVL_OPERAND_CODE
                        ,TOPLVL_OPERAND_VAL
                        ,CLVL_UOM_CODE
                        ,TOPLVL_QUANTITY
                        ,TOPLVL_UOM_CODE
                        ,TOPLVL_ADJ_PRICE
                        ,TOPLVL_PRICE_QTY
                        ,AVERAGING_INTERVAL
                        ,USAGE_PERIOD
                        ,SETTLEMENT_INTERVAL
                        ,MINIMUM_QUANTITY
                        ,DEFAULT_QUANTITY
                        ,AMCV_FLAG
                        ,FIXED_QUANTITY
                        ,USAGE_DURATION
                        ,LEVEL_YN
                        ,USAGE_TYPE
                        ,UOM_QUANTIFIED
                        ,BASE_READING
                        ,USAGE_EST_METHOD
                        ,BILLING_SCHEDULE_TYPE
                        ,CUST_PO_NUMBER --To synchronize hdr value to line
                        ,CUST_PO_NUMBER_REQ_YN
                        ,PAYMENT_TYPE
                        ,CC_NO
                        ,CC_EXPIRY_DATE
                        --,CC_BANK_ACCT_ID
                        --,CC_AUTH_CODE,
                        -------------------------------
			,EXCEPTION_COV_ID,
                        INHERITANCE_TYPE,
                        Prod_Upgrade_YN,
                        Coverage_Type,
                        TRANSFER_OPTION,
                        PM_PROGRAM_ID,
                        PM_CONF_REQ_YN,
                        PM_SCH_EXISTS_YN,
                        ALLOW_BT_DISCOUNT,
                        OFFSET_DURATION,
                        OFFSET_PERIOD,
                        INCIDENT_SEVERITY_ID,
                        PDF_ID,
                        WORK_THRU_YN,
                        REACT_ACTIVE_YN,
                        LIMIT_UOM_QUANTIFIED,
                        DISCOUNT_AMOUNT,
                        DISCOUNT_PERCENT,
                        Sync_Date_Install
                        -------------------------------
                        ,CREATED_BY
                        ,CREATION_DATE
                        ,LAST_UPDATED_BY
                        ,LAST_UPDATE_DATE
                        ,LAST_UPDATE_LOGIN
                        ,OBJECT_VERSION_NUMBER  )
                 VALUES (P_CLE_ID
                        ,P_CLE_ID
                        ,L_DNZ_CHR_ID
                        ,DISCOUNT_LIST_CHR
                        ,ACCT_RULE_ID_CHR
                        --,L_PAYMENT_TYPE
                        --,L_CC_NO
                        --,CC_EXPIRY_DATE_CHR
                        --,CC_BANK_ACCT_ID_CHR
                        --,L_CC_AUTH_CODE
                        ,GRACE_DURATION_CHR
                        ,L_GRACE_PERIOD
                        ,L_INV_PRINT_FLAG
                        ,L_PRICE_UOM
                        ,TAX_AMOUNT_CHR
                        ,L_TAX_INCLUSIVE_YN
                        ,L_TAX_STATUS
                        ,TAX_CODE_CHR
                        ,TAX_EXEMPTION_ID_CHR
                        ,L_IB_TRANS_TYPE
                        ,IB_TRANS_DATE_CHR
                        --,PROD_PRICE
                        --,SERVICE_PRICE
                        ,CLVL_LIST_PRICE_CHR
                        ,CLVL_QUANTITY_CHR
                        ,CLVL_EXTENDED_AMT_CHR
                        ,L_TOPLVL_OPERAND_CODE
                        ,TOPLVL_OPERAND_VAL_CHR
                        ,L_CLVL_UOM_CODE
                        ,TOPLVL_QUANTITY_CHR
                        ,L_TOPLVL_UOM_CODE
                        ,TOPLVL_ADJ_PRICE_CHR
                        ,TOPLVL_PRICE_QTY_CHR
                        ,AVERAGING_INTERVAL_CHR
                        ,L_USAGE_PERIOD
                        ,L_SETTLEMENT_INTERVAL
                        ,MINIMUM_QUANTITY_CHR
                        ,DEFAULT_QUANTITY_CHR
                        ,L_AMCV_FLAG
                        ,FIXED_QUANTITY_CHR
                        ,USAGE_DURATION_CHR
                        ,L_LEVEL_YN
                        ,L_USAGE_TYPE
                        ,L_UOM_QUANTIFIED
                        ,BASE_READING_CHR
                        ,L_USAGE_EST_METHOD
                        ,L_BILLING_SCHEDULE_TYPE
                        ,L_CUST_PO_NUMBERi  --To synchronize hdr value to lines
                        ,L_CUST_PO_NUMBER_REQ_YNI
                        ,L_PAYMENT_TYPEI
                        ,L_CC_NOI
                        ,L_CC_EXPIRY_DATEI
                        --,L_CC_BANK_ACCT_IDI
                        --,L_CC_AUTH_CODEI,
                        -------------------------------------
			,EXCEPTION_COV_ID_CHR,
                        L_INHERITANCE_TYPE,
                        Prod_Upgrade_YN_CHR,
                        Coverage_Type_CHR,
                        TRANSFER_OPTION_CHR,
                        PM_PROGRAM_ID_CHR,
                        PM_CONF_REQ_YN_CHR,
                        PM_SCH_EXISTS_YN_CHR,
                        ALLOW_BT_DISCOUNT_CHR,
			NULL,
			NULL,
                       --to_NUMBER(substr(OFFSET_DURATION,(INSTR(OFFSET_DURATION,'=')+1))),
                       --substr(OFFSET_DURATION,1,(INSTR(OFFSET_DURATION,'=')-1)) ,
                        RCN_INCIDENT_SEVERITY_ID_CHR,
                        RCN_PDF_ID_CHR,
                        RCN_WORK_THRU_YN,
                        RCN_REACT_ACTIVE_YN,
                        L_LIMIT_UOM_QUANTIFIED,
                        DISCOUNT_AMOUNT_CHR,
                        DISCOUNT_PERCENT_CHR,
                        L_Sync_Date_Install
                        -------------------------------------
                        ,1
                        ,sysdate
                        ,1
                        ,sysdate
                        ,2003
                        ,1   );


	 IF L_OFFSET_DURATION IS NOT NULL THEN
	    UPDATE OKS_K_LINES_B T1
	    SET (T1.offset_period ,T1.offset_duration) =
	        (SELECT TIM2.UOM_CODE,TIM2.DURATION
	         FROM okc_timevalues_b TIM ,okc_timevalues_b TIM2,okc_rules_b Rul,OKC_RULE_GROUPS_B RGP
	         WHERE  TIM.Id = OFFSET_DURATION
	         AND    RGP.CLE_ID = p_cle_id
	         AND    RUL.rule_information1 = TIM.Id
	         AND    RUL.rule_information_category = 'OFS'
	         AND    RGP.ID = RUL.RGP_ID
             	 AND    TIM2.ID = TIM.TVE_ID_STARTED
                 AND    TIM.DNZ_CHR_ID = TIM2.DNZ_CHR_ID
	         AND    T1.CLE_ID = RGP.CLE_ID)
	     WHERE T1.CLE_ID = p_cle_id;
	END IF;

        FOR lang_i IN OKC_UTIL.g_language_code.FIRST..OKC_UTIL.g_language_code.LAST
            LOOP
               INSERT INTO OKS_K_LINES_TL (
                        id,
                        language,
                        source_lang,
                        sfwt_flag,
                        invoice_text,
                        ib_trx_details,
                        status_text,
                        react_time_name,
                        security_group_id,
                        created_by,
                        creation_date,
                        last_updated_by,
                        last_update_date,
                        last_update_login)
                        VALUES(
                        P_CLE_ID,
                        OKC_UTIL.g_language_code(lang_i),
                        L_USERENV_LANG,
                        'S',
                        l_invoice_text,
                        l_ib_trx_details,
                        l_status_text,
                        RCN_REACT_TIME_NAME,
                        null, --security_group_id,
                        1,
                        sysdate,
                        1,
                        sysdate,
                        2003
                        );
             END LOOP;
          EXCEPTION When others then
            Eflag:=1;
            Emsg :=SQLERRM;
          END;
      End If;

      Else
        l_check_var := NULL;
        Open  Cur_RGP_exists(P_RGP_ID);
        Fetch Cur_RGP_exists into l_check_var;
	Close Cur_RGP_exists;

         If(l_check_var is not null) Then
     	    BEGIN
              UPDATE OKC_K_LINES_B
              SET
                CUST_ACCT_ID            = CUST_ACCT_ID_CHR
               , BILL_TO_SITE_USE_ID    = BILL_TO_SITE_USE_ID_CHR
               , INV_RULE_ID            = INV_RULE_ID_CHR
               , LINE_RENEWAL_TYPE_CODE = L_LINE_RENEWAL_TYPE_CODE
               , SHIP_TO_SITE_USE_ID    = SHIP_TO_SITE_USE_ID_CHR
               , PAYMENT_TERM_ID        = PAYMENT_TERM_ID_CHR
	       , PRICE_LIST_ID          = decode(l_lse_idi,1 ,l_price_list_idi
                                                          ,12,l_price_list_idi
                                                          ,19,l_price_list_idi
                                                          ,46,l_price_list_idi,PRICE_LIST_ID_CHR )
               , LINE_LIST_PRICE        = LINE_LIST_PRICE_CHR
              WHERE ID = P_CLE_ID;

               EXCEPTION When others then
                 Eflag:=1;
                 Emsg :=SQLERRM;
               END;

             If(Eflag<> 1) Then
             --Updating oks_k_lines_b
	     BEGIN
		  Update oks_k_lines_b set
			 DISCOUNT_LIST          =  DISCOUNT_LIST_CHR
                        ,ACCT_RULE_ID           =  ACCT_RULE_ID_CHR
                        --,PAYMENT_TYPE           =  L_PAYMENT_TYPE
                        --,CC_NO                  =  L_CC_NO
                        --,CC_EXPIRY_DATE         = CC_EXPIRY_DATE_CHR
                        --,CC_BANK_ACCT_ID        =  CC_BANK_ACCT_ID_CHR
                        --,CC_AUTH_CODE           =  L_CC_AUTH_CODE
                        ,GRACE_DURATION         =  GRACE_DURATION_CHR
                        ,GRACE_PERIOD           =  L_GRACE_PERIOD
                  --      ,INVOICE_TEXT           = L_INVOICE_TEXT
                        ,INV_PRINT_FLAG         = L_INV_PRINT_FLAG
                        ,PRICE_UOM		= L_PRICE_UOM
                        ,TAX_AMOUNT		= TAX_AMOUNT_CHR
                        ,TAX_INCLUSIVE_YN	= L_TAX_INCLUSIVE_YN
                        ,TAX_STATUS		= L_TAX_STATUS
                        ,TAX_CODE		= TAX_CODE_CHR
                        ,TAX_EXEMPTION_ID	= TAX_EXEMPTION_ID_CHR
                        ,IB_TRANS_TYPE		= L_IB_TRANS_TYPE
                        ,IB_TRANS_DATE		= IB_TRANS_DATE_CHR
                  --      ,IB_TRX_DETAILS		= IB_TRX_DETAILS_CHR
                       ,CLVL_LIST_PRICE		= CLVL_LIST_PRICE_CHR
                        ,CLVL_QUANTITY		= CLVL_QUANTITY_CHR
                        ,CLVL_EXTENDED_AMT	= CLVL_EXTENDED_AMT_CHR
                        ,TOPLVL_OPERAND_CODE	= L_TOPLVL_OPERAND_CODE
                        ,TOPLVL_OPERAND_VAL	= TOPLVL_OPERAND_VAL_CHR
                        ,CLVL_UOM_CODE		= L_CLVL_UOM_CODE
                        ,TOPLVL_QUANTITY	= TOPLVL_QUANTITY_CHR
                        ,TOPLVL_UOM_CODE	= L_TOPLVL_UOM_CODE
                        ,TOPLVL_ADJ_PRICE	= TOPLVL_ADJ_PRICE_CHR
                        ,TOPLVL_PRICE_QTY	= TOPLVL_PRICE_QTY_CHR
                    --    ,STATUS_TEXT		= STATUS_TEXT_CHR
                        ,AVERAGING_INTERVAL	= AVERAGING_INTERVAL_CHR
                        ,USAGE_PERIOD		= L_USAGE_PERIOD
                        ,SETTLEMENT_INTERVAL	= L_SETTLEMENT_INTERVAL
                        ,MINIMUM_QUANTITY	= MINIMUM_QUANTITY_CHR
                        ,DEFAULT_QUANTITY	= DEFAULT_QUANTITY_CHR
                        ,AMCV_FLAG		= L_AMCV_FLAG
                        ,FIXED_QUANTITY		= FIXED_QUANTITY_CHR
                        ,USAGE_DURATION		= USAGE_DURATION_CHR
                        ,LEVEL_YN		= L_LEVEL_YN
                        ,USAGE_TYPE		= L_USAGE_TYPE
                        ,UOM_QUANTIFIED		= L_UOM_QUANTIFIED
                        ,BASE_READING		= BASE_READING_CHR
                        ,USAGE_EST_METHOD	= L_USAGE_EST_METHOD
                        ,BILLING_SCHEDULE_TYPE	= L_BILLING_SCHEDULE_TYPE
                        ,CUST_PO_NUMBER         = L_CUST_PO_NUMBERI --To sync hdr values to line
                        ,CUST_PO_NUMBER_REQ_YN  = L_CUST_PO_NUMBER_REQ_YNI
                        ,PAYMENT_TYPE           = L_PAYMENT_TYPEI
                        ,CC_NO                  = L_CC_NOI
                        ,CC_EXPIRY_DATE         = L_CC_EXPIRY_DATEI
                        --,CC_BANK_ACCT_ID        = L_CC_BANK_ACCT_IDI
                        --,CC_AUTH_CODE           = L_CC_AUTH_CODEI,
                        -------------------------------------------------------
			,EXCEPTION_COV_ID 	= EXCEPTION_COV_ID_CHR,
                        INHERITANCE_TYPE 	= L_INHERITANCE_TYPE,
                        Prod_Upgrade_YN 	= Prod_Upgrade_YN_CHR,
                        Coverage_Type 		= Coverage_Type_CHR,
                        TRANSFER_OPTION		= TRANSFER_OPTION_CHR,
                        PM_PROGRAM_ID 		= PM_PROGRAM_ID_CHR,
                        PM_CONF_REQ_YN 		= PM_CONF_REQ_YN_CHR,
                        PM_SCH_EXISTS_YN 	= PM_SCH_EXISTS_YN_CHR,
                        ALLOW_BT_DISCOUNT 	= ALLOW_BT_DISCOUNT_CHR,
                        OFFSET_DURATION 	= NULL,--to_NUMBER(substr(OFFSET_DURATION,(INSTR(OFFSET_DURATION,'=')+1))),
                        OFFSET_PERIOD 		= NULL,--substr(OFFSET_DURATION,1,(INSTR(OFFSET_DURATION,'=')-1)),
                        INCIDENT_SEVERITY_ID 	= RCN_INCIDENT_SEVERITY_ID_CHR,
                        PDF_ID 			= RCN_PDF_ID_CHR,
                        WORK_THRU_YN 		= RCN_WORK_THRU_YN,
                        REACT_ACTIVE_YN 	= RCN_REACT_ACTIVE_YN,
                        LIMIT_UOM_QUANTIFIED 	= L_LIMIT_UOM_QUANTIFIED,
                        DISCOUNT_AMOUNT 	= DISCOUNT_AMOUNT_CHR,
                        DISCOUNT_PERCENT 	= DISCOUNT_PERCENT_CHR,
                        Sync_Date_Install 	= L_Sync_Date_Install

	          Where cle_id=p_cle_id;

		IF L_OFFSET_DURATION IS NOT NULL THEN

		    UPDATE OKS_K_LINES_B T1
		    SET (T1.offset_period ,T1.offset_duration) =
			(SELECT TIM2.UOM_CODE,TIM2.DURATION
		         FROM okc_timevalues_b TIM ,okc_timevalues_b TIM2,okc_rules_b Rul,OKC_RULE_GROUPS_B RGP
		         WHERE  TIM.Id = L_OFFSET_DURATION
			 AND    RGP.CLE_ID = p_cle_id
		         AND    RUL.rule_information1 = TIM.Id
		         AND    RUL.rule_information_category = 'OFS'
		         AND    RGP.ID = RUL.RGP_ID
		     	 AND    TIM2.ID = TIM.TVE_ID_STARTED
	                 AND    TIM.DNZ_CHR_ID = TIM2.DNZ_CHR_ID
		         AND    T1.CLE_ID = RGP.CLE_ID)
		     WHERE T1.CLE_ID = p_cle_id;
	        END IF;


         FOR lang_i IN OKC_UTIL.g_language_code.FIRST..OKC_UTIL.g_language_code.LAST
         LOOP
	  Update oks_k_lines_tl set

                        INVOICE_TEXT           = L_INVOICE_TEXT
                        ,IB_TRX_DETAILS		= L_IB_TRX_DETAILS
                        ,STATUS_TEXT		= L_STATUS_TEXT
          		,React_Time_Name	= RCN_REACT_TIME_NAME
          Where  id=p_cle_id
	  and   language = OKC_UTIL.g_language_code(lang_i)
	  and   source_lang = L_USERENV_LANG ;

          END LOOP;

	   EXCEPTION When others then
            Eflag:=1;
	    Emsg :=SQLERRM;
	  END;

         End If;
       Else ---l_check_var is not null
         BEGIN
	      Delete from oks_k_lines_b where cle_id = P_Cle_ID;

              UPDATE OKC_K_LINES_B
                 SET CUST_ACCT_ID           = CUST_ACCT_ID_CHR
		   , BILL_TO_SITE_USE_ID    = BILL_TO_SITE_USE_ID_CHR
	           , INV_RULE_ID            = INV_RULE_ID_CHR
	           , LINE_RENEWAL_TYPE_CODE = L_LINE_RENEWAL_TYPE_CODE
	           , SHIP_TO_SITE_USE_ID    = SHIP_TO_SITE_USE_ID_CHR
	           , PAYMENT_TERM_ID        = PAYMENT_TERM_ID_CHR
		   , PRICE_LIST_ID 	    = PRICE_LIST_ID_CHR
                   , LINE_LIST_PRICE        = LINE_LIST_PRICE_CHR
	       WHERE ID = P_CLE_ID;

          EXCEPTION
             When others then
	       Eflag:=2;
	       Emsg :=SQLERRM;
	  END;


        End If;
     End If; -- l_check_var is not null

if(Eflag=1) THEN

     DBMS_TRANSACTION.ROLLBACK_SAVEPOINT('BEFORE_TRANSACTION');

    ------------------------------------------------------------------------------------
    -- Begin of code to validate data type .
    -- If data fails validation then set the Eflag to 1

     -- Begin of code to validate data type .

          --1. Validation for DST rule .
       BEGIN
          DISCOUNT_LIST      := DISCOUNT_LIST_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'DST') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DISCOUNT_LIST');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'DST'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,DISCOUNT_LIST_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --2. Validation for ARL rule .
       BEGIN
          ACCT_RULE_ID      := ACCT_RULE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'ARL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_ACCT_RULE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER  ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'ARL'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,ACCT_RULE_ID_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --3. Validation for CCR rule .
       BEGIN
          CC_BANK_ACCT_ID      := CC_BANK_ACCT_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'CCR') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CC_BANK_ACCT_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'CCR'    ,'RULE_INFORMATION3'   ,L_ATTRIBUTE_NAME         ,CC_BANK_ACCT_ID_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;


       --4. Validation for GPR rule .
       BEGIN
          GRACE_DURATION      := GRACE_DURATION_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'GPR') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_GRACE_DURATION');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'GPR'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,GRACE_DURATION_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;
       --5. Validation for IRT rule .
       BEGIN
          TAX_AMOUNT      := TAX_AMOUNT_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'IRT') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_AMOUNT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'IRT'    ,'RULE_INFORMATION4'   ,L_ATTRIBUTE_NAME         ,TAX_AMOUNT_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --6. Validation for TAX rule .
       BEGIN
          TAX_CODE      := TAX_CODE_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'TAX') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_CODE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'TAX'    ,'OBJECT2_ID1'   ,L_ATTRIBUTE_NAME         ,TAX_CODE_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --7. Validation for TAX rule .
       BEGIN
          TAX_EXEMPTION_ID      := TAX_EXEMPTION_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'TAX') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_EXEMPTION_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'TAX'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,TAX_EXEMPTION_ID_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --8. Validation for PDL rule .
       BEGIN
          CLVL_LIST_PRICE      := CLVL_LIST_PRICE_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CLVL_LIST_PRICE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PDL'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,CLVL_LIST_PRICE_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --9. Validation for PDL rule .
       BEGIN
          CLVL_QUANTITY      := CLVL_QUANTITY_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CLVL_QUANTITY');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PDL'    ,'RULE_INFORMATION2'   ,L_ATTRIBUTE_NAME         ,CLVL_QUANTITY_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --10. Validation for PDL rule .
       BEGIN
          CLVL_EXTENDED_AMT      := CLVL_EXTENDED_AMT_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CLVL_EXTENDED_AMT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PDL'    ,'RULE_INFORMATION3'   ,L_ATTRIBUTE_NAME         ,CLVL_EXTENDED_AMT_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --11. Validation for PDL rule .
       BEGIN
          TOPLVL_OPERAND_VAL      := TOPLVL_OPERAND_VAL_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_OPERAND_VAL');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PDL'    ,'RULE_INFORMATION6'   ,L_ATTRIBUTE_NAME         ,TOPLVL_OPERAND_VAL_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --12. Validation for PDL rule .
       BEGIN
          TOPLVL_QUANTITY      := TOPLVL_QUANTITY_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_QUANTITY');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PDL'    ,'RULE_INFORMATION8'   ,L_ATTRIBUTE_NAME         ,TOPLVL_QUANTITY_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --13. Validation for PDL rule .
       BEGIN
          TOPLVL_ADJ_PRICE      := TOPLVL_ADJ_PRICE_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_ADJ_PRICE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PDL'    ,'RULE_INFORMATION10'   ,L_ATTRIBUTE_NAME         ,TOPLVL_ADJ_PRICE_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --14. Validation for PDL rule .
       BEGIN
          TOPLVL_PRICE_QTY      := TOPLVL_PRICE_QTY_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_PRICE_QTY');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PDL'    ,'RULE_INFORMATION13'   ,L_ATTRIBUTE_NAME         ,TOPLVL_PRICE_QTY_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --15. Validation for QRE rule .
       BEGIN
          AVERAGING_INTERVAL      := AVERAGING_INTERVAL_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'QRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_AVERAGING_INTERVAL');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'QRE'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,AVERAGING_INTERVAL_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --16. Validation for QRE rule .
       BEGIN
          MINIMUM_QUANTITY      := MINIMUM_QUANTITY_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'QRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_MINIMUM_QUANTITY');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'QRE'    ,'RULE_INFORMATION4'   ,L_ATTRIBUTE_NAME         ,MINIMUM_QUANTITY_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;


       --17. Validation for QRE rule .
       BEGIN
          DEFAULT_QUANTITY      := DEFAULT_QUANTITY_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'QRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DEFAULT_QUANTITY');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'QRE'    ,'RULE_INFORMATION5'   ,L_ATTRIBUTE_NAME         ,DEFAULT_QUANTITY_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --18. Validation for QRE rule .
       BEGIN
          FIXED_QUANTITY      := FIXED_QUANTITY_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'QRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_FIXED_QUANTITY');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'QRE'    ,'RULE_INFORMATION7'   ,L_ATTRIBUTE_NAME         ,FIXED_QUANTITY_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --19. Validation for QRE rule .
       BEGIN
          USAGE_DURATION      := USAGE_DURATION_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'QRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_USAGE_DURATION');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'QRE'    ,'RULE_INFORMATION8'   ,L_ATTRIBUTE_NAME         ,USAGE_DURATION_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --20. Validation for QRE rule .
       BEGIN
          BASE_READING      := BASE_READING_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'QRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BASE_READING');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'QRE'    ,'RULE_INFORMATION12'   ,L_ATTRIBUTE_NAME         ,BASE_READING_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --21. Validation for CAN rule .
       BEGIN
          CUST_ACCT_ID      := CUST_ACCT_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'CAN') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CUST_ACCT_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'CAN'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,CUST_ACCT_ID_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --22. Validation for BTO rule .
       BEGIN
          BILL_TO_SITE_USE_ID      := BILL_TO_SITE_USE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'BTO') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BILL_TO_SITE_USE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'BTO'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,BILL_TO_SITE_USE_ID_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --23. Validation for IRE rule .
       BEGIN
          INV_RULE_ID      := INV_RULE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'IRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_INV_RULE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'IRE'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,INV_RULE_ID_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --24. Validation for STO rule .
       BEGIN
          SHIP_TO_SITE_USE_ID      := SHIP_TO_SITE_USE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'STO') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_SHIP_TO_SITE_USE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'STO'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,SHIP_TO_SITE_USE_ID_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

       --25. Validation for PTR rule .
       BEGIN
          PAYMENT_TERM_ID      := PAYMENT_TERM_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'PTR') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PAYMENT_TERM_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PTR'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,PAYMENT_TERM_ID_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

/*
       --26. Validation for CCR rule .
       BEGIN
          CC_EXPIRY_DATE      := CC_EXPIRY_DATE_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'CCR') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CC_EXPIRY_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'CCR'    ,'RULE_INFORMATION2'   ,L_ATTRIBUTE_NAME         ,CC_EXPIRY_DATE_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;
*/

/*

       --27. Validation for IBR  rule .
       BEGIN
          IB_TRANS_DATE      := IB_TRANS_DATE_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'IBR') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_IB_TRANS_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'IBR'    ,'RULE_INFORMATION2'   ,L_ATTRIBUTE_NAME         ,IB_TRANS_DATE_CHR,
                                       L_ERROR_MSG );
	  Eflag:=1;
       END;

*/

    --28
       BEGIN
          EXCEPTION_COV_ID      := EXCEPTION_COV_ID_chr;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'ECE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EXCEPTION_COV_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'ECE'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,EXCEPTION_COV_ID_chr,
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || EXCEPTION_COV_ID_chr);

	  Eflag:=1;
       END;
--29
       BEGIN
          PM_PROGRAM_ID      := PM_PROGRAM_ID_chr;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'PMP') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PM_PROGRAM_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PMP'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,PM_PROGRAM_ID_chr,
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || PM_PROGRAM_ID_chr);

	  Eflag:=1;
       END;
--30
       BEGIN
          PRICE_LIST_ID      := PRICE_LIST_ID_chr;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'PRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PRICE_LIST_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PRE'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,PRICE_LIST_ID_chr,
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || PRICE_LIST_ID_chr);

	  Eflag:=1;
       END;
--31
       BEGIN
          RCN_INCIDENT_SEVERITY_ID      := RCN_INCIDENT_SEVERITY_ID_chr;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'RCN') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RCN_INCIDENT_SVR_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'RCN'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,RCN_INCIDENT_SEVERITY_ID_chr,
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || RCN_INCIDENT_SEVERITY_ID_chr);

	  Eflag:=1;
       END;
--32
       BEGIN
          RCN_PDF_ID      := RCN_PDF_ID_chr;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'RCN') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RCN_PDF_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'RCN'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,RCN_PDF_ID_chr,
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || RCN_PDF_ID_chr);

	  Eflag:=1;
       END;
--33
       BEGIN
          DISCOUNT_AMOUNT      := DISCOUNT_AMOUNT_chr;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'LMT') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DISCOUNT_AMOUNT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'LMT'    ,'RULE_INFORMATION2'   ,L_ATTRIBUTE_NAME         ,DISCOUNT_AMOUNT_chr,
                                       L_ERROR_MSG );
         -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || DISCOUNT_AMOUNT_chr);

	  Eflag:=1;
       END;
--34
       BEGIN
          DISCOUNT_PERCENT      := DISCOUNT_PERCENT_chr;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'LMT') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DISCOUNT_PERCENT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'LMT'    ,'RULE_INFORMATION4'   ,L_ATTRIBUTE_NAME         ,DISCOUNT_PERCENT_chr,
                                       L_ERROR_MSG );
         -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr);
	  Eflag:=1;
       END;


--35
       BEGIN
          LINE_LIST_PRICE      := LINE_LIST_PRICE_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_LINE_LIST_PRICE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PDL'    ,'RULE_INFORMATION4'   ,L_ATTRIBUTE_NAME         ,LINE_LIST_PRICE_CHR,
                                       L_ERROR_MSG );
         -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || LINE_LIST_PRICE_CHR);
	  Eflag:=1;
       END;

    -- End of code to validate data type .
  ---------------------------------------------------------------------------------------

  End If;


      If(Eflag <> 0) Then
        Eflag:=0;
        Raise Main_Exception;
      End If;



      x_return_status:= 'S';


  Exception
     When Main_exception THEN
      IF(Emsg is not null) THEN
         FND_FILE.PUT_LINE(FND_FILE.LOG ,'DML Failed for'||p_rgp_id||'with Error Message '||Emsg);
      End If;

      IF(L_ERROR_MSG is not null) THEN
         FND_FILE.PUT_LINE(FND_FILE.LOG ,'Validation for'||p_rgp_id||'Failed with Error Message '||L_ERROR_MSG);
      End If;

     x_return_status := 'E';
    WHEN LOCK_EXCEPTION THEN
	X_RETURN_STATUS := 'E';
	L_ERROR_MSG := SQLERRM;
    	FND_FILE.PUT_LINE(FND_FILE.LOG ,'DML Failed for LOCK'||p_rgp_id||'with Error Message '||L_ERROR_MSG);
    WHEN OTHERS THEN
	X_RETURN_STATUS := 'E';
	L_ERROR_MSG := SQLERRM;
    	FND_FILE.PUT_LINE(FND_FILE.LOG ,'DML Failed for'||p_rgp_id||'with Error Message '||L_ERROR_MSG);



END SYNCHRONIZE_RULE_LINE;

-----------------------------------------------------------------------------------------
-- This is the  Procedure called from the procedure SYNCHRONIZE_RULE_DATA_SUBREQ         --
--   code for -Synchronize Line History  rule data         --
-----------------------------------------------------------------------------------------


PROCEDURE SYNCHRONIZE_RULE_LINEH(
    P_RGP_ID          IN NUMBER,
    P_CLE_ID           IN NUMBER,
    DNZ_CHR_ID         IN NUMBER,
    p_major_version   in NUMBER ,
    p_us_yn           in BOOLEAN,
    x_return_status            out NOCOPY VARCHAR2)

IS

L_DNZ_CHR_ID                    NUMBER;
DISCOUNT_LIST                   NUMBER ;  --DST
ACCT_RULE_ID                    NUMBER ;  --ARL
L_PAYMENT_TYPE                    VARCHAR2(2000) ;  --CCR
L_CC_NO                           VARCHAR2(2000) ;  --CCR
CC_EXPIRY_DATE			DATE ; --CCR
CC_BANK_ACCT_ID			NUMBER ;  --CCR
L_CC_AUTH_CODE			VARCHAR2(2000) ;  --CCR
GRACE_DURATION			NUMBER ;  --GPR
L_GRACE_PERIOD			VARCHAR2(2000) ;  --GPR
L_INVOICE_TEXT			VARCHAR2(2000) ;  --IRT
L_INV_PRINT_FLAG			VARCHAR2(2000) ;  --IRT
L_PRICE_UOM			VARCHAR2(2000) ;  --IRT
TAX_AMOUNT			NUMBER ;  --IRT
L_TAX_INCLUSIVE_YN		VARCHAR2(2000) ;  --IRT
L_TAX_STATUS			VARCHAR2(2000) ;  --TAX
TAX_CODE			NUMBER ;  --TAX
TAX_EXEMPTION_ID		NUMBER ;  --TAX
L_IB_TRANS_TYPE			VARCHAR2(2000) ;  --IBR
IB_TRANS_DATE			DATE ; --IBR
L_IB_TRX_DETAILS			VARCHAR2(2000) ;  --IBR
CLVL_LIST_PRICE			NUMBER ;  --PDL
CLVL_QUANTITY			NUMBER ;  --PDL
CLVL_EXTENDED_AMT		NUMBER ;  --PDL
L_TOPLVL_OPERAND_CODE		VARCHAR2(2000) ;  --PDL
TOPLVL_OPERAND_VAL		NUMBER ;  --PDL
L_CLVL_UOM_CODE			VARCHAR2(2000) ;  --PDL
TOPLVL_QUANTITY			NUMBER ;  --PDL
L_TOPLVL_UOM_CODE			VARCHAR2(2000) ;  --PDL
TOPLVL_ADJ_PRICE		NUMBER ;  --PDL
TOPLVL_PRICE_QTY		NUMBER ;  --PDL
L_STATUS_TEXT			VARCHAR2(2000) ;  --PDL
AVERAGING_INTERVAL		NUMBER ;  --QRE
L_USAGE_PERIOD			VARCHAR2(2000) ;  --QRE
L_SETTLEMENT_INTERVAL		VARCHAR2(2000) ;  --QRE
MINIMUM_QUANTITY		NUMBER ;  --QRE
DEFAULT_QUANTITY		NUMBER ;  --QRE
L_AMCV_FLAG			VARCHAR2(2000) ;  --QRE
FIXED_QUANTITY			NUMBER ;  --QRE
USAGE_DURATION			NUMBER ;  --QRE
L_LEVEL_YN			VARCHAR2(2000) ;  --QRE
L_USAGE_TYPE			VARCHAR2(2000) ;  --QRE
L_UOM_QUANTIFIED			VARCHAR2(2000) ;  --QRE
BASE_READING			NUMBER ;  --QRE
L_USAGE_EST_METHOD		VARCHAR2(2000) ;  --QRE
L_BILLING_SCHEDULE_TYPE		VARCHAR2(2000) ;  --SLH
CUST_ACCT_ID			NUMBER ;  --CAN (OKC)
BILL_TO_SITE_USE_ID		NUMBER ;  --BTO (OKC)
INV_RULE_ID			NUMBER ;  --IRE (OKC)
L_LINE_RENEWAL_TYPE_CODE		VARCHAR2(2000) ;  --REN (OKC)
SHIP_TO_SITE_USE_ID		NUMBER ;  --STO (OKC)
PAYMENT_TERM_ID			NUMBER ;  --PTR (OKC)
LINE_LIST_PRICE                 NUMBER ;  --PDL rule_info4 (OKC)

-- FOLLOWING ARE NUMBER FIELDS --
DISCOUNT_LIST_CHR               VARCHAR2(2000) ;  --DST
ACCT_RULE_ID_CHR                VARCHAR2(2000) ;  --ARL
CC_BANK_ACCT_ID_CHR		VARCHAR2(2000) ;  --CCR
GRACE_DURATION_CHR		VARCHAR2(2000) ;  --GPR
TAX_AMOUNT_CHR   		VARCHAR2(2000) ;  --IRT
TAX_CODE_CHR    		VARCHAR2(2000) ;  --TAX
TAX_EXEMPTION_ID_CHR		VARCHAR2(2000) ;  --TAX
CLVL_LIST_PRICE_CHR		VARCHAR2(2000) ;  --PDL
CLVL_QUANTITY_CHR		VARCHAR2(2000) ;  --PDL
CLVL_EXTENDED_AMT_CHR   	VARCHAR2(2000) ;  --PDL
TOPLVL_OPERAND_VAL_CHR		VARCHAR2(2000) ;  --PDL
TOPLVL_QUANTITY_CHR		VARCHAR2(2000) ;  --PDL
TOPLVL_ADJ_PRICE_CHR		VARCHAR2(2000) ;  --PDL
TOPLVL_PRICE_QTY_CHR		VARCHAR2(2000) ;  --PDL
AVERAGING_INTERVAL_CHR		VARCHAR2(2000) ;  --QRE
MINIMUM_QUANTITY_CHR		VARCHAR2(2000) ;  --QRE
DEFAULT_QUANTITY_CHR		VARCHAR2(2000) ;  --QRE
FIXED_QUANTITY_CHR		VARCHAR2(2000) ;  --QRE
USAGE_DURATION_CHR		VARCHAR2(2000) ;  --QRE
BASE_READING_CHR		VARCHAR2(2000) ;  --QRE
CUST_ACCT_ID_CHR		VARCHAR2(2000) ;  --CAN (OKC)
BILL_TO_SITE_USE_ID_CHR		VARCHAR2(2000) ;  --BTO (OKC)
INV_RULE_ID_CHR			VARCHAR2(2000) ;  --IRE (OKC)
SHIP_TO_SITE_USE_ID_CHR		VARCHAR2(2000) ;  --STO (OKC)
PAYMENT_TERM_ID_CHR		VARCHAR2(2000) ;  --PTR (OKC)
LINE_LIST_PRICE_CHR             VARCHAR2(2000) ;  --PDL rule_info4 (OKC)
------------------------------------------------------------
EXCEPTION_COV_ID_CHR            Varchar2(2000);
PM_PROGRAM_ID_CHR               Varchar2(2000);
PRICE_LIST_ID_CHR               Varchar2(2000);
RCN_INCIDENT_SEVERITY_ID_CHR    Varchar2(2000);
RCN_PDF_ID_CHR                  Varchar2(2000);
RSN_INCIDENT_SEVERITY_ID_CHR    Varchar2(2000);
RSN_PDF_ID_CHR                  Varchar2(2000);
DISCOUNT_PERCENT_CHR            Varchar2(2000);
DISCOUNT_AMOUNT_CHR             Varchar2(2000);
------------------------------------------------------------
EXCEPTION_COV_ID                Number ;
L_INHERITANCE_TYPE              Varchar2(2000);
Prod_Upgrade_YN_CHR             Varchar2(2000);
Coverage_Type_CHR               Varchar2(2000);
TRANSFER_OPTION_CHR             Varchar2(2000);
PM_PROGRAM_ID                   Number ;
PM_CONF_REQ_YN_CHR              Varchar2(2000);
PM_SCH_EXISTS_YN_CHR            Varchar2(2000);
ALLOW_BT_DISCOUNT_CHR           Varchar2(2000);
L_OFFSET_DURATION               Varchar2(2000);
PRICE_LIST_ID                   Number ;
RCN_INCIDENT_SEVERITY_ID        Number ;
RCN_PDF_ID                      Number ;
RCN_REACT_TIME_NAME             Varchar2(2000);
RCN_WORK_THRU_YN                Varchar2(2000);
RCN_REACT_ACTIVE_YN             Varchar2(2000);
RSN_INCIDENT_SEVERITY_ID        Number ;
RSN_PDF_ID                      Number ;
RSN_REACT_TIME_NAME             Varchar2(2000);
RSN_WORK_THRU_YN                Varchar2(2000);
RSN_REACT_ACTIVE_YN             Varchar2(2000);
L_LIMIT_UOM_QUANTIFIED          Varchar2(2000);
DISCOUNT_AMOUNT                 Number;
DISCOUNT_PERCENT                Number;
L_Sync_Date_Install             Varchar2(2000);
-------------------------------------------------------------

-- FOLLOWING ARE DATE FIELDS --
CC_EXPIRY_DATE_CHR		VARCHAR2(2000) ; --CCR
IB_TRANS_DATE_CHR		VARCHAR2(2000) ; --IBR

--Misc Variables --
L_ATTRIBUTE_NAME              VARCHAR2(2000);
L_ERROR_MSG                   VARCHAR2(2000);

MAIN_EXCEPTION               EXCEPTION;
VAL_EXCEPTION               EXCEPTION;
LOCK_EXCEPTION              EXCEPTION;

 CURSOR L_LOCK_CSR ( P_CLE_ID in NUMBER, P_MAJOR_VERSION_NUMBER IN NUMBER ) IS
 SELECT ID
   FROM OKC_K_LINES_BH
  WHERE ID = P_CLE_ID
    AND MAJOR_VERSION = P_MAJOR_VERSION_NUMBER
    FOR UPDATE NOWAIT;
L_LOCK_ID                    NUMBER;

Eflag                        NUMBER;
Emsg                         VARCHAR2(2000);

-------------------------------------------------------------------------------
-- The following is the cursor opened if all the parameters passed are null  --
-------------------------------------------------------------------------------
CURSOR l_line_rule_csr (p_id in NUMBER)is
SELECT
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                          DISCOUNT_LIST
        MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1))                DISCOUNT_LIST

       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1))                ACCT_RULE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,'CCR'))                          PAYMENT_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION1))          CC_NO
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,
            to_date(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                       CC_EXPIRY_DATE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
       --              '!,.','!')                                                          CC_BANK_ACCT_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3))          CC_BANK_ACCT_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION4))          CC_AUTH_CODE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
       --              '!,.','!')                                                          GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1))          GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION2))          GRACE_PERIOD
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION1))          INVOICE_TEXT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION2))          INV_PRINT_FLAG
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION3))          PRICE_UOM
        -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
                     '!,','!')                                                             TAX_AMOUNT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION5))          TAX_INCLUSIVE_YN
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.RULE_INFORMATION2))          TAX_STATUS
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
                     '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,.','!')       TAX_CODE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                          TAX_EXEMPTION_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1))                TAX_EXEMPTION_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IBR' ,RUL.RULE_INFORMATION1))          IB_TRANS_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IBR' ,
            TO_DATE(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                       IB_TRANS_DATE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IBR' ,RUL.RULE_INFORMATION3))          IB_TRX_DETAILS
        -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),
                     '!,','!')                                                             CLVL_LIST_PRICE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),
       --              '!,.','!')                                                          CLVL_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2))          CLVL_QUANTITY
       -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),
                     '!,','!')                                                             CLVL_EXTENDED_AMT
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION4)),
                     '!,','!')                                                             LINE_LIST_PRICE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION5))          TOPLVL_OPERAND_CODE
        -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),
                     '!,','!')                                                             TOPLVL_OPERAND_VAL
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION7))          CLVL_UOM_CODE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),
       --              '!,.','!')                                                          TOPLVL_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8))          TOPLVL_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION9))          TOPLVL_UOM_CODE
       -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),
                     '!,','!')                                                             TOPLVL_ADJ_PRICE
       -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),
                     '!,','!')                                                             TOPLVL_PRICE_QTY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION12)) STATUS_TEXT
       -------  Character to number conversion -- Records dosent exitsts in gsidev fro this category  QRE.
       -- Not sure whethet translation is required or not. since records dosent exitst in gsidev - no trans done
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),
       --              '!,.','!')                                                           AVERAGING_INTERVAL
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1))           AVERAGING_INTERVAL
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION2))           USAGE_PERIOD
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION3))           SETTLEMENT_INTERVAL
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),
       --              '!,.','!')                                                           MINIMUM_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4))           MINIMUM_QUANTITY
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),
       --              '!,.','!')                                                           DEFAULT_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5))           DEFAULT_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION6))           AMCV_FLAG
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),
       --              '!,.','!')                                                           FIXED_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7))               FIXED_QUANTITY
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),
       --              '!,.','!')       USAGE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8))           USAGE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION9))           LEVEL_YN
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION10))          USAGE_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION11))          UOM_QUANTIFIED
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),
       --              '!,.','!')       BASE_READING
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12))          BASE_READING
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,DECODE(RUL.RULE_INFORMATION6,'Y','AMCV'))) USAGE_EST_METHOD
       --,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLH' ,RUL.RULE_INFORMATION1))           BILLING_SCHEDULE_TYPE
       ,decode(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION_CATEGORY)),'QRE','T',
                MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLH' ,RUL.RULE_INFORMATION1)) ) BILLING_SCHEDULE_TYPE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                           CUST_ACCT_ID           --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1))                 CUST_ACCT_ID           --OKC
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                           BILL_TO_SITE_USE_ID    --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1))                 BILL_TO_SITE_USE_ID    --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1))                 INV_RULE_ID            --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LRT' ,RUL.RULE_INFORMATION1))           LINE_RENEWAL_TYPE_CODE --OKC
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                           SHIP_TO_SITE_USE_ID    --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1))                 SHIP_TO_SITE_USE_ID    --OKC
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                           PAYMENT_TERM_ID        --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1))                 PAYMENT_TERM_ID        --OKC
       ----- For Coverages
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1))             EXCEPTION_COV_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'WHE',RUL.RULE_INFORMATION1))             INHERITANCE_TYPE
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'UGE',RUL.RULE_INFORMATION1))             PROD_UPGRADE_YN_CHR
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'CVE',RUL.RULE_INFORMATION1))             COVERAGE_TYPE_CHR
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'STR',decode(RUL.RULE_INFORMATION1,'Y','TRANS','TERM'))) TRANSFER_OPTION_CHR
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1))                   PM_PROGRAM_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.RULE_INFORMATION1))             PM_CONF_REQ_YN_CHR
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.RULE_INFORMATION2))             PM_SCH_EXISTS_YN_CHR
       --,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'DST',RUL.OBJECT1_ID1))                 DISCOUNT_LIST
       --,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'BTD',DECODE(LINE.LSE_ID ,16,'Y',RUL.RULE_INFORMATION1))) ALLOW_BT_DISCOUNT
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'BTD','Y'))ALLOW_BT_DISCOUNT_CHR
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'OFS',RUL.RULE_INFORMATION1))OFFSET_DURATION
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PRE',RUL.OBJECT1_ID1))                   PRICE_LIST_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1))                   RCN_INCIDENT_SEVERITY_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1))             RCN_PDF_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION2))             RCN_REACT_TIME_NAME
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION3))             RCN_WORK_THRU_YN
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION4))             RCN_REACT_ACTIVE_YN
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RSN',RUL.RULE_INFORMATION2))             RSN_REACT_TIME_NAME
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1))             LIMIT_UOM_QUANTIFIED
       -------  Character to number conversion -- Records dosent exitsts in gsidev fro this category  LMT.
       -- Not sure whethet translation is required or not. since records dosent exitst in gsidev - no trans done
       --,TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION2)),
       --              '!,','!')                                                           DISCOUNT_AMOUNT
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION2))             DISCOUNT_AMOUNT
       --,TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION4)),
       --              '!%,','!')                                                          DISCOUNT_PERCENT
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION4))             DISCOUNT_PERCENT
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT','N'))Sync_Date_Install
--------------------------------------------------------------------------------------------------------------------

  FROM OKC_RULE_GROUPS_BH RGP
     , OKC_RULES_BH RUL
 WHERE RGP.ID  = RUL.RGP_ID
   and rul.major_version=rgp.major_version
   AND RUL.RULE_INFORMATION_CATEGORY IN ('DST','ARL','CCR','GPR','IRT','TAX','IBR','PDL','QRE','SLH','CAN','BTO','IRE','LRT','STO','PTR',
   'ECE','WHE','UGE','STR','CVE','PMP','BTD','RCN','RSN','LMT','OFS','PRE')
   AND RGP.CLE_ID = P_CLE_ID
   AND RGP.RGD_CODE = 'SVC_K'
   AND RGP.id = p_id
   AND RGP.major_version = p_major_version
GROUP BY RGP.CLE_ID ,RGP.dnz_chr_id ;


CURSOR l_line_rule_csr_nus (p_id in NUMBER)is
SELECT
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                          DISCOUNT_LIST
        MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'DST' ,RUL.OBJECT1_ID1))                DISCOUNT_LIST

       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1))                ACCT_RULE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,'CCR'))                          PAYMENT_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION1))          CC_NO
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,
            to_date(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                       CC_EXPIRY_DATE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
       --              '!,. ','!')                                                          CC_BANK_ACCT_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3))          CC_BANK_ACCT_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION4))          CC_AUTH_CODE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
       --              '!,. ','!')                                                          GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1))          GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION2))          GRACE_PERIOD
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION1))          INVOICE_TEXT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION2))          INV_PRINT_FLAG
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION3))          PRICE_UOM
        -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
                     '!. ','!')                                                             TAX_AMOUNT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION5))          TAX_INCLUSIVE_YN
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.RULE_INFORMATION2))          TAX_STATUS
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
                     '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,. ','!')       TAX_CODE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                          TAX_EXEMPTION_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1))                TAX_EXEMPTION_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IBR' ,RUL.RULE_INFORMATION1))          IB_TRANS_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IBR' ,
            TO_DATE(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                       IB_TRANS_DATE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IBR' ,RUL.RULE_INFORMATION3))          IB_TRX_DETAILS
        -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION1)),
                     '!. ','!')                                                             CLVL_LIST_PRICE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2)),
       --              '!,. ','!')                                                          CLVL_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION2))          CLVL_QUANTITY
       -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION3)),
                     '!. ','!')                                                             CLVL_EXTENDED_AMT
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION4)),
                     '!. ','!')                                                             LINE_LIST_PRICE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION5))          TOPLVL_OPERAND_CODE
        -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION6)),
                     '!. ','!')                                                             TOPLVL_OPERAND_VAL
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION7))          CLVL_UOM_CODE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8)),
       --              '!,. ','!')                                                          TOPLVL_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION8))          TOPLVL_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION9))          TOPLVL_UOM_CODE
       -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION10)),
                     '!. ','!')                                                             TOPLVL_ADJ_PRICE
       -------  Character to number conversion -- This column needs translation --checked in gsidev
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION13)),
                     '!. ','!')                                                             TOPLVL_PRICE_QTY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PDL' ,RUL.RULE_INFORMATION12)) STATUS_TEXT
       -------  Character to number conversion -- Records dosent exitsts in gsidev fro this category  QRE.
       -- Not sure whethet translation is required or not. since records dosent exitst in gsidev - no trans done
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1)),
       --              '!,. ','!')                                                           AVERAGING_INTERVAL
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION1))           AVERAGING_INTERVAL
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION2))           USAGE_PERIOD
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION3))           SETTLEMENT_INTERVAL
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4)),
       --              '!,. ','!')                                                           MINIMUM_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION4))           MINIMUM_QUANTITY
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5)),
       --              '!,. ','!')                                                           DEFAULT_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION5))           DEFAULT_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION6))           AMCV_FLAG
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7)),
       --              '!,. ','!')                                                           FIXED_QUANTITY
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION7))               FIXED_QUANTITY
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8)),
       --              '!,. ','!')       USAGE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION8))           USAGE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION9))           LEVEL_YN
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION10))          USAGE_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION11))          UOM_QUANTIFIED
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12)),
       --              '!,. ','!')       BASE_READING
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION12))          BASE_READING
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,DECODE(RUL.RULE_INFORMATION6,'Y','AMCV'))) USAGE_EST_METHOD
       --,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLH' ,RUL.RULE_INFORMATION1))           BILLING_SCHEDULE_TYPE
       ,decode(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION_CATEGORY)),'QRE','T',
                MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLH' ,RUL.RULE_INFORMATION1)) ) BILLING_SCHEDULE_TYPE
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                           CUST_ACCT_ID           --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1))                 CUST_ACCT_ID           --OKC
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                           BILL_TO_SITE_USE_ID    --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1))                 BILL_TO_SITE_USE_ID    --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1))                 INV_RULE_ID            --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'LRT' ,RUL.RULE_INFORMATION1))           LINE_RENEWAL_TYPE_CODE --OKC
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                           SHIP_TO_SITE_USE_ID    --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1))                 SHIP_TO_SITE_USE_ID    --OKC
       -------  Character to number conversion -- No translation needed ,checked in gsidev
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                           PAYMENT_TERM_ID        --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1))                 PAYMENT_TERM_ID        --OKC
       ----- For Coverages
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'ECE',RUL.RULE_INFORMATION1))             EXCEPTION_COV_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'WHE',RUL.RULE_INFORMATION1))             INHERITANCE_TYPE
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'UGE',RUL.RULE_INFORMATION1))             PROD_UPGRADE_YN_CHR
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'CVE',RUL.RULE_INFORMATION1))             COVERAGE_TYPE_CHR
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'STR',decode(RUL.RULE_INFORMATION1,'Y','TRANS','TERM'))) TRANSFER_OPTION_CHR
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.OBJECT1_ID1))                   PM_PROGRAM_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.RULE_INFORMATION1))             PM_CONF_REQ_YN_CHR
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PMP',RUL.RULE_INFORMATION2))             PM_SCH_EXISTS_YN_CHR
       --,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'DST',RUL.OBJECT1_ID1))                 DISCOUNT_LIST
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'BTD','Y'))ALLOW_BT_DISCOUNT_CHR
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'OFS',RUL.RULE_INFORMATION1))OFFSET_DURATION
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'PRE',RUL.OBJECT1_ID1))                   PRICE_LIST_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1))                   RCN_INCIDENT_SEVERITY_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1))             RCN_PDF_ID
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION2))             RCN_REACT_TIME_NAME
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION3))             RCN_WORK_THRU_YN
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION4))             RCN_REACT_ACTIVE_YN
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RSN',RUL.RULE_INFORMATION2))             RSN_REACT_TIME_NAME
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION1))             LIMIT_UOM_QUANTIFIED
       -------  Character to number conversion -- Records dosent exitsts in gsidev fro this category  LMT.
       -- Not sure whethet translation is required or not. since records dosent exitst in gsidev - no trans done
       --,TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION2)),
       --              '!. ','!')                                                           DISCOUNT_AMOUNT
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION2))             DISCOUNT_AMOUNT
       --,TRANSLATE(MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION4)),
       --              '!%. ','!')                                                          DISCOUNT_PERCENT
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT',RUL.RULE_INFORMATION4))             DISCOUNT_PERCENT
       ,MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'LMT','N'))Sync_Date_Install
--------------------------------------------------------------------------------------------------------------------

  FROM OKC_RULE_GROUPS_BH RGP
     , OKC_RULES_BH RUL
 WHERE RGP.ID  = RUL.RGP_ID
   and rul.major_version=rgp.major_version
   AND RUL.RULE_INFORMATION_CATEGORY IN ('DST','ARL','CCR','GPR','IRT','TAX','IBR','PDL','QRE','SLH','CAN','BTO','IRE','LRT','STO','PTR',
   'ECE','WHE','UGE','STR','CVE','PMP','BTD','RCN','RSN','LMT','OFS','PRE')
   AND RGP.CLE_ID = P_CLE_ID
   AND RGP.RGD_CODE = 'SVC_K'
   AND RGP.id = p_id
   AND RGP.major_version = p_major_version
GROUP BY RGP.CLE_ID ,RGP.dnz_chr_id ;

 ----------------------------------------------------------------------------
-- Cursor to populate data in OKS_RULE_ERROR table .                      --
----------------------------------------------------------------------------
CURSOR L_LINE_DTLS_CSR (P_CLE_ID  IN NUMBER ,P_HDR_ID IN NUMBER, P_CATEGORY IN VARCHAR2 ) IS
SELECT HDR.CONTRACT_NUMBER
     , HDR.CONTRACT_NUMBER_MODIFIER
     , LIN.LINE_NUMBER
     , RUL.MAJOR_VERSION
     , RUL.ID
     , RGP.ID RGP_ID
 FROM  OKC_K_HEADERS_BH HDR
     , OKC_RULE_GROUPS_BH RGP
     , OKC_RULES_BH RUL
     , OKC_K_LINES_BH LIN
WHERE HDR.ID = P_HDR_ID
  AND LIN.ID= P_CLE_ID
  AND RGP.DNZ_CHR_ID = P_HDR_ID
  AND RGP.CLE_ID = LIN.ID
  AND RGP.ID = RUL.RGP_ID
  AND RGP.DNZ_CHR_ID = RUL.DNZ_CHR_ID
  AND hdr.major_version=rgp.major_version
  AND LIN.major_version=rgp.major_version
  AND rgp.major_version=rul.major_version
  and rul.major_version=p_major_version
  AND RUL.RULE_INFORMATION_CATEGORY = P_CATEGORY ;

-----------------------------------------------------------------------------
--Cursor to check if the records corresponding to cle_id exists
--in oks_k_lines_bh
-----------------------------------------------------------------------------

Cursor Cur_Klin_exists(p_cleid in number) IS
select 'x'
from  oks_k_lines_bh
where cle_id=p_cleid
and major_version =  p_major_version;

------------------------------------------------------------------------------

-----------------------------------------------------------------------------
--Cursor to check if the records corresponding to rgp_id exists
--in okc_rule_groups_bh
-----------------------------------------------------------------------------

Cursor Cur_RGP_exists(P_RGP_ID in number) IS
select 'x'
from  okc_rule_groups_bh
where id = P_RGP_ID
and   cle_id is not null
and major_version =  p_major_version;

------------------------------------------------------------------------------



L_LINE_DTLS_REC L_LINE_DTLS_CSR%ROWTYPE;
 L_USERENV_LANG               VARCHAR2(100) := OKC_UTIL.get_userenv_lang ;
 l_check_var                  VARCHAR2(1);
----------------------------------------------------------------------------


BEGIN
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'--------------Start of Sub request for Line History Rule Data Synchronization--------');
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');

 BEGIN
   OPEN L_LOCK_CSR (p_cle_id,p_major_version);
   FETCH L_LOCK_CSR into L_LOCK_ID;
   CLOSE L_LOCK_CSR;
 EXCEPTION
   WHEN OTHERS THEN
     RAISE LOCK_EXCEPTION;
 END;
 L_DNZ_CHR_ID := DNZ_CHR_ID;

DBMS_TRANSACTION.SAVEPOINT('BEFORE_TRANSACTION');

if(p_us_yn) then
    OPEN l_line_rule_csr(p_rgp_id);
    FETCH l_line_rule_csr into
                         DISCOUNT_LIST_CHR
                        ,ACCT_RULE_ID_CHR
                        ,L_PAYMENT_TYPE
                        ,L_CC_NO
                        ,CC_EXPIRY_DATE_CHR
                        ,CC_BANK_ACCT_ID_CHR
                        ,L_CC_AUTH_CODE
                        ,GRACE_DURATION_CHR
                        ,L_GRACE_PERIOD
                        ,L_INVOICE_TEXT
                        ,L_INV_PRINT_FLAG
                        ,L_PRICE_UOM
                        ,TAX_AMOUNT_CHR
                        ,L_TAX_INCLUSIVE_YN
                        ,L_TAX_STATUS
                        ,TAX_CODE_CHR
                        ,TAX_EXEMPTION_ID_CHR
                        ,L_IB_TRANS_TYPE
                        ,IB_TRANS_DATE_CHR
                        ,L_IB_TRX_DETAILS
                        --,PROD_PRICE
                        --,SERVICE_PRICE
                        ,CLVL_LIST_PRICE_CHR
                        ,CLVL_QUANTITY_CHR
                        ,CLVL_EXTENDED_AMT_CHR
                        ,LINE_LIST_PRICE_CHR
                        ,L_TOPLVL_OPERAND_CODE
                        ,TOPLVL_OPERAND_VAL_CHR
                        ,L_CLVL_UOM_CODE
                        ,TOPLVL_QUANTITY_CHR
                        ,L_TOPLVL_UOM_CODE
                        ,TOPLVL_ADJ_PRICE_CHR
                        ,TOPLVL_PRICE_QTY_CHR
                        ,L_STATUS_TEXT
                        ,AVERAGING_INTERVAL_CHR
                        ,L_USAGE_PERIOD
                        ,L_SETTLEMENT_INTERVAL
                        ,MINIMUM_QUANTITY_CHR
                        ,DEFAULT_QUANTITY_CHR
                        ,L_AMCV_FLAG
                        ,FIXED_QUANTITY_CHR
                        ,USAGE_DURATION_CHR
                        ,L_LEVEL_YN
                        ,L_USAGE_TYPE
                        ,L_UOM_QUANTIFIED
                        ,BASE_READING_CHR
                        ,L_USAGE_EST_METHOD
                        ,L_BILLING_SCHEDULE_TYPE
                        ,CUST_ACCT_ID_CHR           --OKC
                        ,BILL_TO_SITE_USE_ID_CHR    --OKC
                        ,INV_RULE_ID_CHR            --OKC
                        ,L_LINE_RENEWAL_TYPE_CODE     --OKC
                        ,SHIP_TO_SITE_USE_ID_CHR    --OKC
                        ,PAYMENT_TERM_ID_CHR       --OKC
-------------------------------------------------------------------------------
		  , EXCEPTION_COV_ID_CHR,
		    L_INHERITANCE_TYPE,
		    Prod_Upgrade_YN_CHR,
		    Coverage_Type_CHR,
		    TRANSFER_OPTION_CHR,
		    PM_PROGRAM_ID_CHR,
		    PM_CONF_REQ_YN_CHR,
		    PM_SCH_EXISTS_YN_CHR,
		    --DISCOUNT_LIST,
		    ALLOW_BT_DISCOUNT_CHR,
		    L_OFFSET_DURATION,
		    --OFFSET_PERIOD,
		    PRICE_LIST_ID_CHR,
		    RCN_INCIDENT_SEVERITY_ID_CHR,
		    RCN_PDF_ID_CHR,
		    RCN_REACT_TIME_NAME,
		    RCN_WORK_THRU_YN,
		    RCN_REACT_ACTIVE_YN,
		    RSN_REACT_TIME_NAME,
		    L_LIMIT_UOM_QUANTIFIED,
		    DISCOUNT_AMOUNT_CHR,
		    DISCOUNT_PERCENT_CHR,
		    L_Sync_Date_Install ;
		-------------------------------------------------------------------------------

      Close l_line_rule_csr;
  else
    OPEN l_line_rule_csr_nus(p_rgp_id);
    FETCH l_line_rule_csr_nus into
                         DISCOUNT_LIST_CHR
                        ,ACCT_RULE_ID_CHR
                        ,L_PAYMENT_TYPE
                        ,L_CC_NO
                        ,CC_EXPIRY_DATE_CHR
                        ,CC_BANK_ACCT_ID_CHR
                        ,L_CC_AUTH_CODE
                        ,GRACE_DURATION_CHR
                        ,L_GRACE_PERIOD
                        ,L_INVOICE_TEXT
                        ,L_INV_PRINT_FLAG
                        ,L_PRICE_UOM
                        ,TAX_AMOUNT_CHR
                        ,L_TAX_INCLUSIVE_YN
                        ,L_TAX_STATUS
                        ,TAX_CODE_CHR
                        ,TAX_EXEMPTION_ID_CHR
                        ,L_IB_TRANS_TYPE
                        ,IB_TRANS_DATE_CHR
                        ,L_IB_TRX_DETAILS
                        --,PROD_PRICE
                        --,SERVICE_PRICE
                        ,CLVL_LIST_PRICE_CHR
                        ,CLVL_QUANTITY_CHR
                        ,CLVL_EXTENDED_AMT_CHR
                        ,LINE_LIST_PRICE_CHR
                        ,L_TOPLVL_OPERAND_CODE
                        ,TOPLVL_OPERAND_VAL_CHR
                        ,L_CLVL_UOM_CODE
                        ,TOPLVL_QUANTITY_CHR
                        ,L_TOPLVL_UOM_CODE
                        ,TOPLVL_ADJ_PRICE_CHR
                        ,TOPLVL_PRICE_QTY_CHR
                        ,L_STATUS_TEXT
                        ,AVERAGING_INTERVAL_CHR
                        ,L_USAGE_PERIOD
                        ,L_SETTLEMENT_INTERVAL
                        ,MINIMUM_QUANTITY_CHR
                        ,DEFAULT_QUANTITY_CHR
                        ,L_AMCV_FLAG
                        ,FIXED_QUANTITY_CHR
                        ,USAGE_DURATION_CHR
                        ,L_LEVEL_YN
                        ,L_USAGE_TYPE
                        ,L_UOM_QUANTIFIED
                        ,BASE_READING_CHR
                        ,L_USAGE_EST_METHOD
                        ,L_BILLING_SCHEDULE_TYPE
                        ,CUST_ACCT_ID_CHR           --OKC
                        ,BILL_TO_SITE_USE_ID_CHR    --OKC
                        ,INV_RULE_ID_CHR            --OKC
                        ,L_LINE_RENEWAL_TYPE_CODE     --OKC
                        ,SHIP_TO_SITE_USE_ID_CHR    --OKC
                        ,PAYMENT_TERM_ID_CHR       --OKC
-------------------------------------------------------------------------------
		  , EXCEPTION_COV_ID_CHR,
		    L_INHERITANCE_TYPE,
		    Prod_Upgrade_YN_CHR,
		    Coverage_Type_CHR,
		    TRANSFER_OPTION_CHR,
		    PM_PROGRAM_ID_CHR,
		    PM_CONF_REQ_YN_CHR,
		    PM_SCH_EXISTS_YN_CHR,
		    --DISCOUNT_LIST,
		    ALLOW_BT_DISCOUNT_CHR,
		    L_OFFSET_DURATION,
		    --OFFSET_PERIOD,
		    PRICE_LIST_ID_CHR,
		    RCN_INCIDENT_SEVERITY_ID_CHR,
		    RCN_PDF_ID_CHR,
		    RCN_REACT_TIME_NAME,
		    RCN_WORK_THRU_YN,
		    RCN_REACT_ACTIVE_YN,
		    RSN_REACT_TIME_NAME,
		    L_LIMIT_UOM_QUANTIFIED,
		    DISCOUNT_AMOUNT_CHR,
		    DISCOUNT_PERCENT_CHR,
		    L_Sync_Date_Install ;
		-------------------------------------------------------------------------------

      Close l_line_rule_csr_nus;
   end if;

      Eflag:=0;

      Emsg:=NULL;

      l_check_var:=NULL;

      Open Cur_Klin_exists(P_Cle_ID);
      Fetch Cur_Klin_exists into l_check_var;
      Close Cur_Klin_exists;

      If(l_check_var is NULL) THEN

          BEGIN
             UPDATE OKC_K_LINES_BH
             SET
              CUST_ACCT_ID           = CUST_ACCT_ID_CHR
            , BILL_TO_SITE_USE_ID    = BILL_TO_SITE_USE_ID_CHR
            , INV_RULE_ID            = INV_RULE_ID_CHR
            , LINE_RENEWAL_TYPE_CODE = L_LINE_RENEWAL_TYPE_CODE
            , SHIP_TO_SITE_USE_ID    = SHIP_TO_SITE_USE_ID_CHR
	    , PAYMENT_TERM_ID        = PAYMENT_TERM_ID_CHR
            , LINE_LIST_PRICE        = LINE_LIST_PRICE_CHR
	  WHERE ID = P_CLE_ID
	  and major_version =  p_major_version;

           EXCEPTION When others then
              Eflag:=1;
	      Emsg :=SQLERRM;
          END;

           If(Eflag<>1) Then
           BEGIN
              INSERT INTO OKS_K_LINES_BH
                       ( ID
		        ,MAJOR_VERSION
                        ,CLE_ID
                        ,DNZ_CHR_ID
                        ,DISCOUNT_LIST
                        ,ACCT_RULE_ID
                        ,PAYMENT_TYPE
                        ,CC_NO
                        ,CC_EXPIRY_DATE
                        ,CC_BANK_ACCT_ID
                        ,CC_AUTH_CODE
                        ,GRACE_DURATION
                        ,GRACE_PERIOD
                        ,INV_PRINT_FLAG
                        ,PRICE_UOM
                        ,TAX_AMOUNT
                        ,TAX_INCLUSIVE_YN
                        ,TAX_STATUS
                        ,TAX_CODE
                        ,TAX_EXEMPTION_ID
                        ,IB_TRANS_TYPE
                        ,IB_TRANS_DATE
                        --,PROD_PRICE
                        --,SERVICE_PRICE
                        ,CLVL_LIST_PRICE
                        ,CLVL_QUANTITY
                        ,CLVL_EXTENDED_AMT
                        ,TOPLVL_OPERAND_CODE
                        ,TOPLVL_OPERAND_VAL
                        ,CLVL_UOM_CODE
                        ,TOPLVL_QUANTITY
                        ,TOPLVL_UOM_CODE
                        ,TOPLVL_ADJ_PRICE
                        ,TOPLVL_PRICE_QTY
                        ,AVERAGING_INTERVAL
                        ,USAGE_PERIOD
                        ,SETTLEMENT_INTERVAL
                        ,MINIMUM_QUANTITY
                        ,DEFAULT_QUANTITY
                        ,AMCV_FLAG
                        ,FIXED_QUANTITY
                        ,USAGE_DURATION
                        ,LEVEL_YN
                        ,USAGE_TYPE
                        ,UOM_QUANTIFIED
                        ,BASE_READING
                        ,USAGE_EST_METHOD
                        ,BILLING_SCHEDULE_TYPE,
-----------------------------------------------------------------------
			EXCEPTION_COV_ID,
                        INHERITANCE_TYPE,
                        Prod_Upgrade_YN,
                        Coverage_Type,
                        TRANSFER_OPTION,
                        PM_PROGRAM_ID,
                        PM_CONF_REQ_YN,
                        PM_SCH_EXISTS_YN,
                        ALLOW_BT_DISCOUNT,
                        OFFSET_DURATION,
                        OFFSET_PERIOD,
                        INCIDENT_SEVERITY_ID,
                        PDF_ID,
                        WORK_THRU_YN,
                        REACT_ACTIVE_YN,
                        LIMIT_UOM_QUANTIFIED,
                        DISCOUNT_AMOUNT,
                        DISCOUNT_PERCENT,
                        Sync_Date_Install
-----------------------------------------------------------------------

                        ,CREATED_BY
                        ,CREATION_DATE
                        ,LAST_UPDATED_BY
                        ,LAST_UPDATE_DATE
                        ,LAST_UPDATE_LOGIN
                        ,OBJECT_VERSION_NUMBER  )
                 VALUES (P_CLE_ID
		        ,p_MAJOR_VERSION
                        ,P_CLE_ID
                        ,L_DNZ_CHR_ID
                        ,DISCOUNT_LIST_CHR
                        ,ACCT_RULE_ID_CHR
                        ,L_PAYMENT_TYPE
                        ,L_CC_NO
                        ,CC_EXPIRY_DATE_CHR
                        ,CC_BANK_ACCT_ID_CHR
                        ,L_CC_AUTH_CODE
                        ,GRACE_DURATION_CHR
                        ,L_GRACE_PERIOD
                        ,L_INV_PRINT_FLAG
                        ,L_PRICE_UOM
                        ,TAX_AMOUNT_CHR
                        ,L_TAX_INCLUSIVE_YN
                        ,L_TAX_STATUS
                        ,TAX_CODE_CHR
                        ,TAX_EXEMPTION_ID_CHR
                        ,L_IB_TRANS_TYPE
                        ,IB_TRANS_DATE_CHR
                        --,PROD_PRICE
                        --,SERVICE_PRICE
                        ,CLVL_LIST_PRICE_CHR
                        ,CLVL_QUANTITY_CHR
                        ,CLVL_EXTENDED_AMT_CHR
                        ,L_TOPLVL_OPERAND_CODE
                        ,TOPLVL_OPERAND_VAL_CHR
                        ,L_CLVL_UOM_CODE
                        ,TOPLVL_QUANTITY_CHR
                        ,L_TOPLVL_UOM_CODE
                        ,TOPLVL_ADJ_PRICE_CHR
                        ,TOPLVL_PRICE_QTY_CHR
                        ,AVERAGING_INTERVAL_CHR
                        ,L_USAGE_PERIOD
                        ,L_SETTLEMENT_INTERVAL
                        ,MINIMUM_QUANTITY_CHR
                        ,DEFAULT_QUANTITY_CHR
                        ,L_AMCV_FLAG
                        ,FIXED_QUANTITY_CHR
                        ,USAGE_DURATION_CHR
                        ,L_LEVEL_YN
                        ,L_USAGE_TYPE
                        ,L_UOM_QUANTIFIED
                        ,BASE_READING_CHR
                        ,L_USAGE_EST_METHOD
                        ,L_BILLING_SCHEDULE_TYPE,
---------------------------------------------------------
			EXCEPTION_COV_ID_CHR,
                        L_INHERITANCE_TYPE,
                        Prod_Upgrade_YN_CHR,
                        Coverage_Type_CHR,
                        TRANSFER_OPTION_CHR,
                        PM_PROGRAM_ID_CHR,
                        PM_CONF_REQ_YN_CHR,
                        PM_SCH_EXISTS_YN_CHR,
                        ALLOW_BT_DISCOUNT_CHR,
			NULL,
			NULL,
                       --to_NUMBER(substr(OFFSET_DURATION,(INSTR(OFFSET_DURATION,'=')+1))),
                       --substr(OFFSET_DURATION,1,(INSTR(OFFSET_DURATION,'=')-1)) ,
                        RCN_INCIDENT_SEVERITY_ID_CHR,
                        RCN_PDF_ID_CHR,
                        RCN_WORK_THRU_YN,
                        RCN_REACT_ACTIVE_YN,
                        L_LIMIT_UOM_QUANTIFIED,
                        DISCOUNT_AMOUNT_CHR,
                        DISCOUNT_PERCENT_CHR,
                        L_Sync_Date_Install
---------------------------------------------------------
			,1
                        ,sysdate
                        ,1
                        ,sysdate
                        ,2003
                        ,1   );

	IF L_OFFSET_DURATION IS NOT NULL THEN

	    UPDATE OKS_K_LINES_B T1
	    SET (T1.offset_period ,T1.offset_duration) =
	        (SELECT TIM2.UOM_CODE,TIM2.DURATION
	         FROM okc_timevalues_b TIM ,okc_timevalues_b TIM2,okc_rules_b Rul,OKC_RULE_GROUPS_B RGP
	         WHERE  TIM.Id = L_OFFSET_DURATION
	         AND    RGP.CLE_ID = p_cle_id
	         AND    RUL.rule_information1 = TIM.Id
	         AND    RUL.rule_information_category = 'OFS'
	         AND    RGP.ID = RUL.RGP_ID
             	 AND    TIM2.ID = TIM.TVE_ID_STARTED
                 AND    TIM.DNZ_CHR_ID = TIM2.DNZ_CHR_ID
	         AND    T1.CLE_ID = RGP.CLE_ID)
	WHERE T1.CLE_ID = p_cle_id;
/*
	    UPDATE OKS_K_LINES_B T1
	    SET (T1.offset_period ,T1.offset_duration) =
	        (SELECT UOM_CODE,DURATION
	         FROM okc_timevalues_b TIM ,okc_rules_b Rul,OKC_RULE_GROUPS_B RGP
	         WHERE  RUL.Id = L_OFFSET_DURATION
	         AND    RGP.CLE_ID = p_cle_id
	         AND    RUL.rule_information1 = TIM.Id
	         AND    RUL.rule_information_category = 'OFS'
	         AND    RGP.ID = RUL.RGP_ID
	         AND    RUL.DNZ_CHR_ID = TIM.DNZ_CHR_ID
	         AND    RUL.DNZ_CHR_ID = RGP.DNZ_CHR_ID
	         AND    T1.CLE_ID = RGP.CLE_ID)
		WHERE T1.CLE_ID = p_cle_id;
 */
	END IF;


                   FOR lang_i IN OKC_UTIL.g_language_code.FIRST..OKC_UTIL.g_language_code.LAST
                   LOOP
                        INSERT INTO OKS_K_LINES_TLH (
                        id,
			MAJOR_VERSION,
                        language,
                        source_lang,
                        sfwt_flag,
                        invoice_text,
                        ib_trx_details,
                        status_text,
                        react_time_name,
                        security_group_id,
                        created_by,
                        creation_date,
                        last_updated_by,
                        last_update_date,
                        last_update_login)
                        VALUES(
                        P_CLE_ID,
			p_MAJOR_VERSION,
                        OKC_UTIL.g_language_code(lang_i),
                        L_USERENV_LANG,
                        'S',
                        L_invoice_text,
                        L_ib_trx_details,
                        L_status_text,
                        RCN_REACT_TIME_NAME,
                        null, --security_group_id,
                        1,
                        sysdate,
                        1,
                        sysdate,
                        2003
                        );
                   END LOOP;

          EXCEPTION When others then
            Eflag:=1;
            Emsg :=SQLERRM;
          END;

          End If;

      Else
        l_check_var := NULL;
        Open Cur_RGP_exists(P_RGP_ID);
        Fetch Cur_RGP_exists into l_check_var;
	Close Cur_RGP_exists;

	If(l_check_var is not null) Then

     	    BEGIN
              UPDATE OKC_K_LINES_BH
              SET CUST_ACCT_ID           = CUST_ACCT_ID_CHR
                , BILL_TO_SITE_USE_ID    = BILL_TO_SITE_USE_ID_CHR
                , INV_RULE_ID            = INV_RULE_ID_CHR
                , LINE_RENEWAL_TYPE_CODE = L_LINE_RENEWAL_TYPE_CODE
                , SHIP_TO_SITE_USE_ID    = SHIP_TO_SITE_USE_ID_CHR
                , PAYMENT_TERM_ID        = PAYMENT_TERM_ID_CHR
                , LINE_LIST_PRICE        = LINE_LIST_PRICE_CHR
	      WHERE ID = P_CLE_ID
	      and major_version =  p_major_version;

               EXCEPTION When others then
                 Eflag:=1;
                 Emsg :=SQLERRM;
               END;

          If(Eflag<> 1) Then

        --Updating oks_k_lines_bh
        BEGIN
	  Update oks_k_lines_bh set
                         DISCOUNT_LIST          =  DISCOUNT_LIST_CHR
                        ,ACCT_RULE_ID           =  ACCT_RULE_ID_CHR
                        ,PAYMENT_TYPE           =  L_PAYMENT_TYPE
                        ,CC_NO                  =  L_CC_NO
                        ,CC_EXPIRY_DATE         = CC_EXPIRY_DATE_CHR
                        ,CC_BANK_ACCT_ID        =  CC_BANK_ACCT_ID_CHR
                        ,CC_AUTH_CODE           =  L_CC_AUTH_CODE
                        ,GRACE_DURATION         =  GRACE_DURATION_CHR
                        ,GRACE_PERIOD           =  L_GRACE_PERIOD
                  --      ,INVOICE_TEXT           = INVOICE_TEXT
                        ,INV_PRINT_FLAG         = L_INV_PRINT_FLAG
                        ,PRICE_UOM		= L_PRICE_UOM
                        ,TAX_AMOUNT		= TAX_AMOUNT_CHR
                        ,TAX_INCLUSIVE_YN	= L_TAX_INCLUSIVE_YN
                        ,TAX_STATUS		= L_TAX_STATUS
                        ,TAX_CODE		= TAX_CODE_CHR
                        ,TAX_EXEMPTION_ID	= TAX_EXEMPTION_ID_CHR
                        ,IB_TRANS_TYPE		= L_IB_TRANS_TYPE
                        ,IB_TRANS_DATE		= IB_TRANS_DATE_CHR
                  --      ,IB_TRX_DETAILS		= IB_TRX_DETAILS_CHR
                       ,CLVL_LIST_PRICE		= CLVL_LIST_PRICE_CHR
                        ,CLVL_QUANTITY		= CLVL_QUANTITY_CHR
                        ,CLVL_EXTENDED_AMT	= CLVL_EXTENDED_AMT_CHR
                        ,TOPLVL_OPERAND_CODE	= L_TOPLVL_OPERAND_CODE
                        ,TOPLVL_OPERAND_VAL	= TOPLVL_OPERAND_VAL_CHR
                        ,CLVL_UOM_CODE		= L_CLVL_UOM_CODE
                        ,TOPLVL_QUANTITY	= TOPLVL_QUANTITY_CHR
                        ,TOPLVL_UOM_CODE	= L_TOPLVL_UOM_CODE
                        ,TOPLVL_ADJ_PRICE	= TOPLVL_ADJ_PRICE_CHR
                        ,TOPLVL_PRICE_QTY	= TOPLVL_PRICE_QTY_CHR
                    --    ,STATUS_TEXT		= STATUS_TEXT_CHR
                        ,AVERAGING_INTERVAL	= AVERAGING_INTERVAL_CHR
                        ,USAGE_PERIOD		= L_USAGE_PERIOD
                        ,SETTLEMENT_INTERVAL	= L_SETTLEMENT_INTERVAL
                        ,MINIMUM_QUANTITY	= MINIMUM_QUANTITY_CHR
                        ,DEFAULT_QUANTITY	= DEFAULT_QUANTITY_CHR
                        ,AMCV_FLAG		= L_AMCV_FLAG
                        ,FIXED_QUANTITY		= FIXED_QUANTITY_CHR
                        ,USAGE_DURATION		= USAGE_DURATION_CHR
                        ,LEVEL_YN		= L_LEVEL_YN
                        ,USAGE_TYPE		= L_USAGE_TYPE
                        ,UOM_QUANTIFIED		= L_UOM_QUANTIFIED
                        ,BASE_READING		= BASE_READING_CHR
                        ,USAGE_EST_METHOD	= L_USAGE_EST_METHOD
                        ,BILLING_SCHEDULE_TYPE	= L_BILLING_SCHEDULE_TYPE,
---------------------------------------------------------------------------------------------------
			EXCEPTION_COV_ID 	= EXCEPTION_COV_ID_CHR,
                        INHERITANCE_TYPE 	= L_INHERITANCE_TYPE,
                        Prod_Upgrade_YN 	= Prod_Upgrade_YN_CHR,
                        Coverage_Type 		= Coverage_Type_CHR,
                        TRANSFER_OPTION		= TRANSFER_OPTION_CHR,
                        PM_PROGRAM_ID 		= PM_PROGRAM_ID_CHR,
                        PM_CONF_REQ_YN 		= PM_CONF_REQ_YN_CHR,
                        PM_SCH_EXISTS_YN 	= PM_SCH_EXISTS_YN_CHR,
                        ALLOW_BT_DISCOUNT 	= ALLOW_BT_DISCOUNT_CHR,
                        OFFSET_DURATION 	= NULL,--to_NUMBER(substr(OFFSET_DURATION,(INSTR(OFFSET_DURATION,'=')+1))),
                        OFFSET_PERIOD 		= NULL,--substr(OFFSET_DURATION,1,(INSTR(OFFSET_DURATION,'=')-1)),
                        INCIDENT_SEVERITY_ID 	= RCN_INCIDENT_SEVERITY_ID_CHR,
                        PDF_ID 			= RCN_PDF_ID_CHR,
                        WORK_THRU_YN 		= RCN_WORK_THRU_YN,
                        REACT_ACTIVE_YN 	= RCN_REACT_ACTIVE_YN,
                        LIMIT_UOM_QUANTIFIED 	= L_LIMIT_UOM_QUANTIFIED,
                        DISCOUNT_AMOUNT 	= DISCOUNT_AMOUNT_CHR,
                        DISCOUNT_PERCENT 	= DISCOUNT_PERCENT_CHR,
                        Sync_Date_Install 	= L_Sync_Date_Install
          Where cle_id=p_cle_id
	  and major_version =  p_major_version;

	IF L_OFFSET_DURATION IS NOT NULL THEN

	    UPDATE OKS_K_LINES_B T1
	    SET (T1.offset_period ,T1.offset_duration) =
	        (SELECT TIM2.UOM_CODE,TIM2.DURATION
	         FROM okc_timevalues_b TIM ,okc_timevalues_b TIM2,okc_rules_b Rul,OKC_RULE_GROUPS_B RGP
	         WHERE  TIM.Id = L_OFFSET_DURATION
	         AND    RGP.CLE_ID = p_cle_id
	         AND    RUL.rule_information1 = TIM.Id
	         AND    RUL.rule_information_category = 'OFS'
	         AND    RGP.ID = RUL.RGP_ID
             	 AND    TIM2.ID = TIM.TVE_ID_STARTED
                 AND    TIM.DNZ_CHR_ID = TIM2.DNZ_CHR_ID
	         AND    T1.CLE_ID = RGP.CLE_ID)
	WHERE T1.CLE_ID = p_cle_id;
/*
	    UPDATE OKS_K_LINES_B T1
	    SET (T1.offset_period ,T1.offset_duration) =
	        (SELECT UOM_CODE,DURATION
	         FROM okc_timevalues_b TIM ,okc_rules_b Rul,OKC_RULE_GROUPS_B RGP
	         WHERE  RUL.Id = L_OFFSET_DURATION
	         AND    RGP.CLE_ID = p_cle_id
	         AND    RUL.rule_information1 = TIM.Id
	         AND    RUL.rule_information_category = 'OFS'
	         AND    RGP.ID = RUL.RGP_ID
	         AND    RUL.DNZ_CHR_ID = TIM.DNZ_CHR_ID
	         AND    RUL.DNZ_CHR_ID = RGP.DNZ_CHR_ID
	         AND    T1.CLE_ID = RGP.CLE_ID)
	WHERE T1.CLE_ID = p_cle_id;
 */
	END IF;


         FOR lang_i IN OKC_UTIL.g_language_code.FIRST..OKC_UTIL.g_language_code.LAST
         LOOP
	  Update oks_k_lines_tlh
             set INVOICE_TEXT       = L_INVOICE_TEXT
                ,IB_TRX_DETAILS     = L_IB_TRX_DETAILS
                ,STATUS_TEXT        = L_STATUS_TEXT
                ,React_Time_Name    = RCN_REACT_TIME_NAME
          Where id = p_cle_id
	    and language    = OKC_UTIL.g_language_code(lang_i)
	    and source_lang = L_USERENV_LANG
            and major_version =  p_major_version;

         END LOOP;

	   EXCEPTION When others then
            Eflag:=1;
	    Emsg :=SQLERRM;
	  END;

         End If;

	Else ---l_check_var is not null
           BEGIN
	      Delete from oks_k_lines_bh where cle_id = P_Cle_ID
	         and major_version =  p_major_version;

                UPDATE OKC_K_LINES_BH
                   SET CUST_ACCT_ID           = CUST_ACCT_ID_CHR
		     , BILL_TO_SITE_USE_ID    = BILL_TO_SITE_USE_ID_CHR
	             , INV_RULE_ID            = INV_RULE_ID_CHR
	             , LINE_RENEWAL_TYPE_CODE = L_LINE_RENEWAL_TYPE_CODE
	             , SHIP_TO_SITE_USE_ID    = SHIP_TO_SITE_USE_ID_CHR
	             , PAYMENT_TERM_ID        = PAYMENT_TERM_ID_CHR
                     , LINE_LIST_PRICE        = LINE_LIST_PRICE_CHR
	         WHERE ID = P_CLE_ID
                   and major_version =  p_major_version;

	   EXCEPTION When others then
	          Eflag:=2;
		  Emsg :=SQLERRM;
	   END;
        End If;
     End If; -- l_check_var is not null
if(Eflag=1) THEN

       DBMS_TRANSACTION.ROLLBACK_SAVEPOINT('BEFORE_TRANSACTION');
    ------------------------------------------------------------------------------------
    -- Begin of code to validate data type .
    -- If data fails validation then set the Eflag to 1

     -- Begin of code to validate data type .

       --1. Validation for DST rule .
       BEGIN
          DISCOUNT_LIST      := DISCOUNT_LIST_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'DST') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DISCOUNT_LIST');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'DST'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,DISCOUNT_LIST_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --2. Validation for ARL rule .
       BEGIN
          ACCT_RULE_ID      := ACCT_RULE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'ARL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_ACCT_RULE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION  ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'ARL'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,ACCT_RULE_ID_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --3. Validation for CCR rule .
       BEGIN
          CC_BANK_ACCT_ID      := CC_BANK_ACCT_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'CCR') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CC_BANK_ACCT_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'CCR'    ,'RULE_INFORMATION3'   ,L_ATTRIBUTE_NAME         ,CC_BANK_ACCT_ID_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;


       --4. Validation for GPR rule .
       BEGIN
          GRACE_DURATION      := GRACE_DURATION_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'GPR') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_GRACE_DURATION');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'GPR'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,GRACE_DURATION_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;
       --5. Validation for IRT rule .
       BEGIN
          TAX_AMOUNT      := TAX_AMOUNT_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'IRT') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_AMOUNT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'IRT'    ,'RULE_INFORMATION4'   ,L_ATTRIBUTE_NAME         ,TAX_AMOUNT_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --6. Validation for TAX rule .
       BEGIN
          TAX_CODE      := TAX_CODE_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'TAX') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_CODE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'TAX'    ,'OBJECT2_ID1'   ,L_ATTRIBUTE_NAME         ,TAX_CODE_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --7. Validation for TAX rule .
       BEGIN
          TAX_EXEMPTION_ID      := TAX_EXEMPTION_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'TAX') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_EXEMPTION_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'TAX'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,TAX_EXEMPTION_ID_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --8. Validation for PDL rule .
       BEGIN
          CLVL_LIST_PRICE      := CLVL_LIST_PRICE_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CLVL_LIST_PRICE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'PDL'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,CLVL_LIST_PRICE_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --9. Validation for PDL rule .
       BEGIN
          CLVL_QUANTITY      := CLVL_QUANTITY_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CLVL_QUANTITY');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'PDL'    ,'RULE_INFORMATION2'   ,L_ATTRIBUTE_NAME         ,CLVL_QUANTITY_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --10. Validation for PDL rule .
       BEGIN
          CLVL_EXTENDED_AMT      := CLVL_EXTENDED_AMT_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CLVL_EXTENDED_AMT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'PDL'    ,'RULE_INFORMATION3'   ,L_ATTRIBUTE_NAME         ,CLVL_EXTENDED_AMT_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --11. Validation for PDL rule .
       BEGIN
          TOPLVL_OPERAND_VAL      := TOPLVL_OPERAND_VAL_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_OPERAND_VAL');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'PDL'    ,'RULE_INFORMATION6'   ,L_ATTRIBUTE_NAME         ,TOPLVL_OPERAND_VAL_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --12. Validation for PDL rule .
       BEGIN
          TOPLVL_QUANTITY      := TOPLVL_QUANTITY_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_QUANTITY');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'PDL'    ,'RULE_INFORMATION8'   ,L_ATTRIBUTE_NAME         ,TOPLVL_QUANTITY_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --13. Validation for PDL rule .
       BEGIN
          TOPLVL_ADJ_PRICE      := TOPLVL_ADJ_PRICE_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_ADJ_PRICE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'PDL'    ,'RULE_INFORMATION10'   ,L_ATTRIBUTE_NAME         ,TOPLVL_ADJ_PRICE_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --14. Validation for PDL rule .
       BEGIN
          TOPLVL_PRICE_QTY      := TOPLVL_PRICE_QTY_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TOPLVL_PRICE_QTY');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'PDL'    ,'RULE_INFORMATION13'   ,L_ATTRIBUTE_NAME         ,TOPLVL_PRICE_QTY_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --15. Validation for QRE rule .
       BEGIN
          AVERAGING_INTERVAL      := AVERAGING_INTERVAL_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'QRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_AVERAGING_INTERVAL');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'QRE'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,AVERAGING_INTERVAL_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --16. Validation for QRE rule .
       BEGIN
          MINIMUM_QUANTITY      := MINIMUM_QUANTITY_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'QRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_MINIMUM_QUANTITY');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'QRE'    ,'RULE_INFORMATION4'   ,L_ATTRIBUTE_NAME         ,MINIMUM_QUANTITY_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;


       --17. Validation for QRE rule .
       BEGIN
          DEFAULT_QUANTITY      := DEFAULT_QUANTITY_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'QRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DEFAULT_QUANTITY');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'QRE'    ,'RULE_INFORMATION5'   ,L_ATTRIBUTE_NAME         ,DEFAULT_QUANTITY_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --18. Validation for QRE rule .
       BEGIN
          FIXED_QUANTITY      := FIXED_QUANTITY_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'QRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_FIXED_QUANTITY');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'QRE'    ,'RULE_INFORMATION7'   ,L_ATTRIBUTE_NAME         ,FIXED_QUANTITY_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --19. Validation for QRE rule .
       BEGIN
          USAGE_DURATION      := USAGE_DURATION_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'QRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_USAGE_DURATION');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'QRE'    ,'RULE_INFORMATION8'   ,L_ATTRIBUTE_NAME         ,USAGE_DURATION_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --20. Validation for QRE rule .
       BEGIN
          BASE_READING      := BASE_READING_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'QRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BASE_READING');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'QRE'    ,'RULE_INFORMATION12'   ,L_ATTRIBUTE_NAME         ,BASE_READING_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --21. Validation for CAN rule .
       BEGIN
          CUST_ACCT_ID      := CUST_ACCT_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'CAN') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CUST_ACCT_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'CAN'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,CUST_ACCT_ID_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --22. Validation for BTO rule .
       BEGIN
          BILL_TO_SITE_USE_ID      := BILL_TO_SITE_USE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'BTO') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BILL_TO_SITE_USE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'BTO'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,BILL_TO_SITE_USE_ID_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --23. Validation for IRE rule .
       BEGIN
          INV_RULE_ID      := INV_RULE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'IRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_INV_RULE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'IRE'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,INV_RULE_ID_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --24. Validation for STO rule .
       BEGIN
          SHIP_TO_SITE_USE_ID      := SHIP_TO_SITE_USE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'STO') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_SHIP_TO_SITE_USE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'STO'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,SHIP_TO_SITE_USE_ID_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

       --25. Validation for PTR rule .
       BEGIN
          PAYMENT_TERM_ID      := PAYMENT_TERM_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'PTR') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PAYMENT_TERM_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'PTR'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,PAYMENT_TERM_ID_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;
/*
       --26. Validation for CCR rule .
       BEGIN
          CC_EXPIRY_DATE      := CC_EXPIRY_DATE_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'CCR') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CC_EXPIRY_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'CCR'    ,'RULE_INFORMATION2'   ,L_ATTRIBUTE_NAME         ,CC_EXPIRY_DATE_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

*/
/*
       --27. Validation for IBR  rule .
       BEGIN
          IB_TRANS_DATE      := IB_TRANS_DATE_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'IBR') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_IB_TRANS_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINEH',
                                      'IBR'    ,'RULE_INFORMATION2'   ,L_ATTRIBUTE_NAME         ,IB_TRANS_DATE_CHR,
                                       L_ERROR_MSG );
           Eflag:=1;
       END;

*/

    --28
       BEGIN
          EXCEPTION_COV_ID      := EXCEPTION_COV_ID_chr;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'ECE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EXCEPTION_COV_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'ECE'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,EXCEPTION_COV_ID_chr,
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || EXCEPTION_COV_ID_chr);
	  Eflag:=1;
       END;
--29
       BEGIN
          PM_PROGRAM_ID      := PM_PROGRAM_ID_chr;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'PMP') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PM_PROGRAM_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PMP'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,PM_PROGRAM_ID_chr,
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || PM_PROGRAM_ID_chr);
	  Eflag:=1;
       END;
--30
       BEGIN
          PRICE_LIST_ID      := PRICE_LIST_ID_chr;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'PRE') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PRICE_LIST_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PRE'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,PRICE_LIST_ID_chr,
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || PRICE_LIST_ID_chr);
	  Eflag:=1;
       END;
--31
       BEGIN
          RCN_INCIDENT_SEVERITY_ID      := RCN_INCIDENT_SEVERITY_ID_chr;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'RCN') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RCN_INCIDENT_SVR_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'RCN'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         ,RCN_INCIDENT_SEVERITY_ID_chr,
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'OBJECT1_ID1' ||L_ATTRIBUTE_NAME || RCN_INCIDENT_SEVERITY_ID_chr);
	  Eflag:=1;
       END;
--32
       BEGIN
          RCN_PDF_ID      := RCN_PDF_ID_chr;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'RCN') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RCN_PDF_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'RCN'    ,'RULE_INFORMATION1'   ,L_ATTRIBUTE_NAME         ,RCN_PDF_ID_chr,
                                       L_ERROR_MSG );
          -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION1' ||L_ATTRIBUTE_NAME || RCN_PDF_ID_chr);
	  Eflag:=1;
       END;
--33
       BEGIN
          DISCOUNT_AMOUNT      := DISCOUNT_AMOUNT_chr;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'LMT') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DISCOUNT_AMOUNT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'LMT'    ,'RULE_INFORMATION2'   ,L_ATTRIBUTE_NAME         ,DISCOUNT_AMOUNT_chr,
                                       L_ERROR_MSG );
         -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION2' ||L_ATTRIBUTE_NAME || DISCOUNT_AMOUNT_chr);

	  Eflag:=1;
       END;
--34
       BEGIN
          DISCOUNT_PERCENT      := DISCOUNT_PERCENT_chr;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'LMT') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_DISCOUNT_PERCENT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'LMT'    ,'RULE_INFORMATION4'   ,L_ATTRIBUTE_NAME         ,DISCOUNT_PERCENT_chr,
                                       L_ERROR_MSG );
         -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || DISCOUNT_PERCENT_chr);
	  Eflag:=1;
       END;

--35
       BEGIN
          LINE_LIST_PRICE      := LINE_LIST_PRICE_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_LINE_DTLS_CSR(P_CLE_ID,DNZ_CHR_ID,'PDL') ;
          FETCH L_LINE_DTLS_CSR INTO L_LINE_DTLS_REC;
          CLOSE L_LINE_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_LINE_LIST_PRICE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID,RGP_ID,CHR_ID,CLE_ID,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION ,LINE_NUMBER, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_LINE_DTLS_REC.ID ,L_LINE_DTLS_REC.RGP_ID    , DNZ_CHR_ID, P_CLE_ID,
                                       L_LINE_DTLS_REC.CONTRACT_NUMBER,L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_LINE_DTLS_REC.MAJOR_VERSION, L_LINE_DTLS_REC.LINE_NUMBER,'LINE',
                                      'PDL'    ,'RULE_INFORMATION4'   ,L_ATTRIBUTE_NAME         ,LINE_LIST_PRICE_CHR,
                                       L_ERROR_MSG );
         -- FND_FILE.PUT_LINE(FND_FILE.OUTPUT , L_LINE_DTLS_REC.CONTRACT_NUMBER      || L_LINE_DTLS_REC.CONTRACT_NUMBER_MODIFIER || L_LINE_DTLS_REC.LINE_NUMBER ||'RULE_INFORMATION4' ||L_ATTRIBUTE_NAME || LINE_LIST_PRICE_CHR);
	  Eflag:=1;
       END;

   ----------------------------------------------------------------------------------------------------------------------
   --                                            End of validation .                                                   --
   ----------------------------------------------------------------------------------------------------------------------

  End If;

  If(Eflag <> 0) Then
     Eflag:=0;
     Raise Main_Exception;
  End If;

  x_return_status:= 'S';

  Exception
     When Main_exception THEN
        IF(Emsg is not null) THEN
           FND_FILE.PUT_LINE(FND_FILE.LOG ,'DML Failed for'||p_rgp_id||' '||p_major_version||'with Error Message '||Emsg);
        End If;
        IF(L_ERROR_MSG is not null) THEN
           FND_FILE.PUT_LINE(FND_FILE.LOG ,'Validation for'||p_rgp_id||' '||p_major_version||'Failed with Error Message '||L_ERROR_MSG);
        End If;
        x_return_status := 'E';
    WHEN LOCK_EXCEPTION THEN
	X_RETURN_STATUS := 'E';
	L_ERROR_MSG := SQLERRM;
    	FND_FILE.PUT_LINE(FND_FILE.LOG ,'DML Failed for GETTING LOCK '||p_rgp_id||'with Error Message '||L_ERROR_MSG);
    WHEN OTHERS THEN
	X_RETURN_STATUS := 'E';
	L_ERROR_MSG := SQLERRM;
    	FND_FILE.PUT_LINE(FND_FILE.LOG ,'DML Failed for'||p_rgp_id||'with Error Message '||L_ERROR_MSG);


END SYNCHRONIZE_RULE_LINEH;

-----------------------------------------------------------------------------------------
-- This is the  Procedure called from the procedure SYNCHRONIZE_RULE_DATA_SUBREQ         --
--   code for -Synchronize Header History  rule data         --
-----------------------------------------------------------------------------------------


PROCEDURE SYNCHRONIZE_RULE_HDRH(
    P_RGP_ID          IN NUMBER,
    P_CHR_ID          IN NUMBER,
    p_major_version   in NUMBER ,
    p_us_yn           in BOOLEAN,
    x_return_status            out NOCOPY VARCHAR2)

IS


CHR_ID                    NUMBER ;
DNZ_CHR_ID                NUMBER ;
ACCT_RULE_ID              NUMBER ;
L_PAYMENT_TYPE              VARCHAR2(2000) ;
L_CC_NO                     VARCHAR2(2000) ;
CC_EXPIRY_DATE            DATE;
CC_BANK_ACCT_ID           NUMBER ;
L_CC_AUTH_CODE              VARCHAR2(2000) ;
GRACE_DURATION            NUMBER ;
L_GRACE_PERIOD              VARCHAR2(2000) ;
EST_REV_PERCENT           NUMBER ;
EST_REV_DATE              DATE;
L_INVOICE_TEXT              VARCHAR2(2000) ;
L_INV_PRINT_FLAG            VARCHAR2(2000) ;
L_PRICE_UOM                 VARCHAR2(2000) ;
TAX_AMOUNT                NUMBER ;
L_TAX_INCLUSIVE_YN          VARCHAR2(2000) ;
L_TAX_STATUS                VARCHAR2(2000) ;
TAX_CODE                  NUMBER ;
TAX_EXEMPTION_ID          NUMBER ;
L_BILLING_SCHEDULE_TYPE     VARCHAR2(2000) ;
CUST_ACCT_ID              NUMBER ;
BILL_TO_SITE_USE_ID       NUMBER ;
INV_RULE_ID               NUMBER ;
L_RENEWAL_TYPE_CODE         VARCHAR2(2000) ;
RENEWAL_NOTIFY_TO         NUMBER ;
RENEWAL_END_DATE          DATE;
SHIP_TO_SITE_USE_ID       NUMBER ;
PAYMENT_TERM_ID           NUMBER ;
BILLING_PROFILE_ID        NUMBER ;
L_RENEWAL_STATUS            VARCHAR2(2000) ;
L_ELECTRONIC_RENEWAL_FLAG   VARCHAR2(2000) ;
QUOTE_TO_CONTACT_ID       NUMBER ;
QUOTE_TO_SITE_ID          NUMBER ;
QUOTE_TO_EMAIL_ID         NUMBER ;
QUOTE_TO_PHONE_ID         NUMBER ;
QUOTE_TO_FAX_ID           NUMBER ;
L_RENEWAL_PO_REQUIRED       VARCHAR2(2000) ;
RENEWAL_PRICE_LIST        NUMBER ;
L_RENEWAL_PRICING_TYPE      VARCHAR2(2000) ;
RENEWAL_MARKUP_PERCENT    NUMBER ;
RENEWAL_GRACE_DURATION    NUMBER ;
L_RENEWAL_GRACE_PERIOD      VARCHAR2(2000) ;
RENEWAL_EST_REV_PERCENT   NUMBER ;
RENEWAL_EST_REV_DURATION  NUMBER ;
L_RENEWAL_EST_REV_PERIOD    VARCHAR2(2000) ;
RENEWAL_PRICE_LIST_USED   NUMBER ;
L_RENEWAL_TYPE_USED         VARCHAR2(2000) ;
RENEWAL_NOTIFICATION_TO   NUMBER ;
L_RENEWAL_PO_USED           VARCHAR2(2000) ;
L_RENEWAL_PRICING_TYPE_USED VARCHAR2(2000) ;
RENEWAL_MARKUP_PERCENT_USED   NUMBER ;
REV_EST_PERCENT_USED      NUMBER ;
REV_EST_DURATION_USED     NUMBER ;
BILLING_PROFILE_USED      NUMBER ;
L_REV_EST_PERIOD_USED       VARCHAR2(2000) ;
L_ERN_FLAG_USED_YN          VARCHAR2(2000) ;
EVN_THRESHOLD_AMT         NUMBER ;
L_EVN_THRESHOLD_CUR         VARCHAR2(2000) ;
ERN_THRESHOLD_AMT         NUMBER ;
L_ERN_THRESHOLD_CUR         VARCHAR2(2000) ;
RENEWAL_GRACE_DURATION_USED   NUMBER ;
L_RENEWAL_GRACE_PERIOD_USED VARCHAR2(2000) ;
L_INV_TRX_TYPE              VARCHAR2(2000) ;
L_INV_PRINT_PROFILE         VARCHAR2(2000) ;
L_RENEWAL_PO_NUMBER         VARCHAR2(2000) ;
L_AR_INTERFACE_YN           VARCHAR2(2000) ;
L_HOLD_BILLING              VARCHAR2(2000) ;
L_SUMMARY_TRX_YN            VARCHAR2(2000) ;
L_SERVICE_PO_NUMBER         VARCHAR2(2000) ;
L_SERVICE_PO_REQUIRED       VARCHAR2(2000) ;
PRICE_LIST_ID             NUMBER ;
L_CONVERSION_TYPE           VARCHAR2(2000) ;
CONVERSION_RATE           NUMBER ;
CONVERSION_RATE_DATE      DATE;
CONVERSION_EURO_RATE      NUMBER ;



-- FOLLOWING ARE NUMBER FIELDS --
ACCT_RULE_ID_CHR              VARCHAR2(2000) ;
CC_BANK_ACCT_ID_CHR           VARCHAR2(2000) ;
GRACE_DURATION_CHR            VARCHAR2(2000) ;
EST_REV_PERCENT_CHR           VARCHAR2(2000) ;
TAX_AMOUNT_CHR                VARCHAR2(2000) ;
TAX_CODE_CHR                  VARCHAR2(2000) ;
TAX_EXEMPTION_ID_CHR          VARCHAR2(2000) ;
CUST_ACCT_ID_CHR              VARCHAR2(2000) ;
BILL_TO_SITE_USE_ID_CHR       VARCHAR2(2000) ;
INV_RULE_ID_CHR               VARCHAR2(2000) ;
RENEWAL_NOTIFY_TO_CHR         VARCHAR2(2000) ;
SHIP_TO_SITE_USE_ID_CHR       VARCHAR2(2000) ;
PAYMENT_TERM_ID_CHR           VARCHAR2(2000) ;
BILLING_PROFILE_ID_CHR        VARCHAR2(2000) ;
QUOTE_TO_CONTACT_ID_CHR       VARCHAR2(2000) ;
QUOTE_TO_SITE_ID_CHR          VARCHAR2(2000) ;
QUOTE_TO_EMAIL_ID_CHR         VARCHAR2(2000) ;
QUOTE_TO_PHONE_ID_CHR         VARCHAR2(2000) ;
QUOTE_TO_FAX_ID_CHR           VARCHAR2(2000) ;
RENEWAL_PRICE_LIST_CHR        VARCHAR2(2000) ;
RENEWAL_MARKUP_PERCENT_CHR    VARCHAR2(2000) ;
RENEWAL_GRACE_DURATION_CHR    VARCHAR2(2000) ;
RENEWAL_EST_REV_PERCENT_CHR   VARCHAR2(2000) ;
RENEWAL_EST_REV_DURATION_CHR  VARCHAR2(2000) ;
RENEWAL_PRICE_LIST_USED_CHR   VARCHAR2(2000) ;
RENEWAL_NOTIFICATION_TO_CHR   VARCHAR2(2000) ;
RENEWAL_MARKUP_PERCENT_USED_CH VARCHAR2(2000) ;
REV_EST_PERCENT_USED_CHR      VARCHAR2(2000) ;
REV_EST_DURATION_USED_CHR     VARCHAR2(2000) ;
BILLING_PROFILE_USED_CHR      VARCHAR2(2000) ;
EVN_THRESHOLD_AMT_CHR         VARCHAR2(2000) ;
ERN_THRESHOLD_AMT_CHR         VARCHAR2(2000) ;
RENEWAL_GRACE_DURATION_USED_CH VARCHAR2(2000) ;
PRICE_LIST_ID_CHR             VARCHAR2(2000) ;
CONVERSION_RATE_CHR           VARCHAR2(2000) ;
CONVERSION_EURO_RATE_CHR      VARCHAR2(2000) ;

-- FOLLOWING ARE DATE FIELDS --
CC_EXPIRY_DATE_CHR            VARCHAR2(2000) ;
EST_REV_DATE_CHR              VARCHAR2(2000) ;
RENEWAL_END_DATE_CHR          VARCHAR2(2000) ;
CONVERSION_RATE_DATE_CHR      VARCHAR2(2000) ;

--Misc Variables --
L_ATTRIBUTE_NAME              VARCHAR2(2000);
L_ERROR_MSG                   VARCHAR2(2000);

MAIN_EXCEPTION               EXCEPTION;
VAL_EXCEPTION               EXCEPTION;
Eflag                        NUMBER;
Emsg                         VARCHAR2(2000);



CURSOR l_hdr_rule_csr (p_id in NUMBER)is
SELECT
        -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),
       --               '!,.','!')                                                           ACCT_RULE_ID
        MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1))                   ACCT_RULE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,'CCR'))                             PAYMENT_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION1))             CC_NO
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,
                  to_date(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                    CC_EXPIRY_DATE
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
       --               '!,.' , '!')                                                         CC_BANK_ACCT_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3))             CC_BANK_ACCT_ID

       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION4))             CC_AUTH_CODE
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
       --               '!,.','!')                                                           GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1))             GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION2))             GRACE_PERIOD
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)),
       --               '!,','!')                                                            EST_REV_PERCENT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1))             EST_REV_PERCENT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,
                    to_date(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                  EST_REV_DATE
       -- Checked in gsidev conversion needed.
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
                      '!,' ,'!' )                                                            TAX_AMOUNT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.RULE_INFORMATION2))             TAX_STATUS
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
                      '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-,. ' , '!')     TAX_CODE
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
       --               '!,.','!')                                                           TAX_EXEMPTION_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1))                   TAX_EXEMPTION_ID
       --,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLH' ,RUL.RULE_INFORMATION1))             BILLING_SCHEDULE_TYPE
       ,decode(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION_CATEGORY)),'QRE','T',
                MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLH' ,RUL.RULE_INFORMATION1)) )   BILLING_SCHEDULE_TYPE
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),
                      '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_- ,.','!')       BILLING_PROFILE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION2))             RENEWAL_STATUS
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION3))             ELECTRONIC_RENEWAL_FLAG
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),
       --               '!,.' ,'!')                                                          QUOTE_TO_CONTACT_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1))                   QUOTE_TO_CONTACT_ID
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT2_ID1)),
       --               '!,.','!')                                                           QUOTE_TO_SITE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4))            QUOTE_TO_SITE_ID
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),
       --               '!,.','!')                                                           QUOTE_TO_EMAIL_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1))             QUOTE_TO_EMAIL_ID
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),
       --               '!,.','!')                                                           QUOTE_TO_PHONE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2))             QUOTE_TO_PHONE_ID
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),
       --               '!,.','!')                                                           QUOTE_TO_FAX_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3))             QUOTE_TO_FAX_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPO' ,RUL.RULE_INFORMATION1))             RENEWAL_PO_REQUIRED
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),
       --               '!,.','!')                                                           RENEWAL_PRICE_LIST
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1))                   RENEWAL_PRICE_LIST
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION1))             RENEWAL_PRICING_TYPE
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),
       --               '!%,' ,'!')                                                          RENEWAL_MARKUP_PERCENT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2))             RENEWAL_MARKUP_PERCENT
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),
       --               '!,.','!')                                                           RENEWAL_GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3))             RENEWAL_GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION4))             RENEWAL_GRACE_PERIOD
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),
       --               '!%,' ,'!')                                                          RENEWAL_EST_REV_PERCENT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1))             RENEWAL_EST_REV_PERCENT
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),
       --               '!,.','!')                                                           RENEWAL_EST_REV_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2))             RENEWAL_EST_REV_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION3))             RENEWAL_EST_REV_PERIOD
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),
       --               '!,.','!')                                                           RENEWAL_PRICE_LIST_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1))                   RENEWAL_PRICE_LIST_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION1))             RENEWAL_TYPE_USED
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),
       --               '!,.','!')                                                           RENEWAL_NOTIFICATION_TO
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2))             RENEWAL_NOTIFICATION_TO
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION3))             RENEWAL_PO_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION4))             RENEWAL_PRICING_TYPE_USED
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),
       --               '!,%' ,'!')                                                          RENEWAL_MARKUP_PERCENT_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5))             RENEWAL_MARKUP_PERCENT_USED
       -- Checked in gsidev conversion needed.
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),
                      '!%,' ,'!')                                                            REV_EST_PERCENT_USED
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),
       --               '!,.','!')                                                           REV_EST_DURATION_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7))             REV_EST_DURATION_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION8))             REV_EST_PERIOD_USED
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),
                      '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,. ','!')        BILLING_PROFILE_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION10))            ERN_FLAG_USED_YN
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),
       --              '!,' ,'!')                                                            EVN_THRESHOLD_AMT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11))            EVN_THRESHOLD_AMT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION12))            EVN_THRESHOLD_CUR
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),
       --              '!,' ,'!')                                                            ERN_THRESHOLD_AMT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13))            ERN_THRESHOLD_AMT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION14))            ERN_THRESHOLD_CUR
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),
       --              '!,.','!')                                                            RENEWAL_GRACE_DURATION_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1))             RENEWAL_GRACE_DURATION_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION2))             RENEWAL_GRACE_PERIOD_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.OBJECT1_ID1))                   INV_TRX_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION9))             INV_PRINT_PROFILE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION10))            RENEWAL_PO_NUMBER
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION11))            AR_INTERFACE_YN
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION12))            HOLD_BILLING
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION13))            SUMMARY_TRX_YN
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SPO' ,RUL.RULE_INFORMATION1))             SERVICE_PO_NUMBER
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SPO' ,RUL.RULE_INFORMATION2))             SERVICE_PO_REQUIRED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.OBJECT1_ID1))                   CONVERSION_TYPE       --OKC
       -- needs translation
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),
                     '!,','!')                                                               CONVERSION_RATE       --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,
                  to_date(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                    CONVERSION_RATE_DATE  --OKC
        -- needs translation
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),
                     '!,','!')                                                               CONVERSION_EURO_RATE  --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                            CUST_ACCT_ID          --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1))                   CUST_ACCT_ID          --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                            BILL_TO_SITE_USE_ID   --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1))                   BILL_TO_SITE_USE_ID   --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                            INV_RULE_ID           --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1))                   INV_RULE_ID           --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION1))             RENEWAL_TYPE_CODE     --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),
       --              '!,.','!')                                                            RENEWAL_NOTIFY_TO     --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2))             RENEWAL_NOTIFY_TO     --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,
                  to_date(RUL.RULE_INFORMATION3,'yyyy/mm/dd hh24:mi:ss')))                    RENEWAL_END_DATE      --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                            SHIP_TO_SITE_USE_ID   --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1))                   SHIP_TO_SITE_USE_ID   --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
       --              '!,.','!')                                                            PAYMENT_TERM_ID       --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1))                   PAYMENT_TERM_ID       --OKC

       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),
                     '!,.','!')                                                              PRICE_LIST_ID         --OKC
FROM OKC_RULE_GROUPS_BH RGP
   , OKC_RULES_BH RUL
WHERE rgp.id = rul.rgp_id
  and rul.major_version=rgp.major_version
  and rgp.chr_id = P_CHR_ID
  and rgp.rgd_code = 'SVC_K'
  AND   RUL.RULE_INFORMATION_CATEGORY IN
       ('ARL','CCR','GPR','RVE','IRT','TAX','ERN','QTO', 'RPO', 'RPT','RER', 'RRU',
        'RRE', 'SBG', 'SPO','SLH','PRE', 'CVN','CAN', 'BTO', 'IRE', 'REN', 'STO', 'PTR')
  and rgp.RGD_CODE = 'SVC_K'
  and rgp.id =p_id
  and rgp.major_version = p_major_version;


CURSOR l_hdr_rule_csr_nus (p_id in NUMBER)is
SELECT
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1)),
       --               '!,. ','!')                                                           ACCT_RULE_ID
        MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ARL' ,RUL.OBJECT1_ID1))                   ACCT_RULE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,'CCR'))                             PAYMENT_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION1))             CC_NO
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,
                  to_date(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                    CC_EXPIRY_DATE
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3)),
       --               '!,. ' , '!')                                                         CC_BANK_ACCT_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION3))             CC_BANK_ACCT_ID

       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CCR' ,RUL.RULE_INFORMATION4))             CC_AUTH_CODE
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1)),
       --               '!,. ','!')                                                           GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION1))             GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'GPR' ,RUL.RULE_INFORMATION2))             GRACE_PERIOD
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1)),
       --               '!. ','!')                                                            EST_REV_PERCENT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,RUL.RULE_INFORMATION1))             EST_REV_PERCENT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RVE' ,
                    to_date(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                  EST_REV_DATE
       -- Checked in gsidev conversion needed.
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRT' ,RUL.RULE_INFORMATION4)),
                      '!. ' ,'!' )                                                            TAX_AMOUNT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.RULE_INFORMATION2))             TAX_STATUS
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT2_ID1)),
                      '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-,. ' , '!')     TAX_CODE
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1)),
       --               '!,. ','!')                                                           TAX_EXEMPTION_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'TAX' ,RUL.OBJECT1_ID1))                   TAX_EXEMPTION_ID
       --,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLH' ,RUL.RULE_INFORMATION1))             BILLING_SCHEDULE_TYPE
       ,decode(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QRE' ,RUL.RULE_INFORMATION_CATEGORY)),'QRE','T',
                MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SLH' ,RUL.RULE_INFORMATION1)) )   BILLING_SCHEDULE_TYPE
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION1)),
                      '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-,. ','!')       BILLING_PROFILE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION2))             RENEWAL_STATUS
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'ERN' ,RUL.RULE_INFORMATION3))             ELECTRONIC_RENEWAL_FLAG
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1)),
       --               '!,. ' ,'!')                                                          QUOTE_TO_CONTACT_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT1_ID1))                   QUOTE_TO_CONTACT_ID
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.OBJECT2_ID1)),
       --               '!,. ','!')                                                           QUOTE_TO_SITE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION4))             QUOTE_TO_SITE_ID
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1)),
       --               '!,. ','!')                                                           QUOTE_TO_EMAIL_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION1))             QUOTE_TO_EMAIL_ID
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2)),
       --               '!,. ','!')                                                           QUOTE_TO_PHONE_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION2))             QUOTE_TO_PHONE_ID
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3)),
       --               '!,. ','!')                                                           QUOTE_TO_FAX_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'QTO' ,RUL.RULE_INFORMATION3))             QUOTE_TO_FAX_ID
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPO' ,RUL.RULE_INFORMATION1))             RENEWAL_PO_REQUIRED
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1)),
       --               '!,. ','!')                                                           RENEWAL_PRICE_LIST
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.OBJECT1_ID1))                   RENEWAL_PRICE_LIST
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION1))             RENEWAL_PRICING_TYPE
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2)),
       --               '!%. ' ,'!')                                                          RENEWAL_MARKUP_PERCENT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION2))             RENEWAL_MARKUP_PERCENT
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3)),
       --               '!,. ','!')                                                           RENEWAL_GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION3))             RENEWAL_GRACE_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RPT' ,RUL.RULE_INFORMATION4))             RENEWAL_GRACE_PERIOD
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1)),
       --               '!%. ' ,'!')                                                          RENEWAL_EST_REV_PERCENT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION1))             RENEWAL_EST_REV_PERCENT
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2)),
       --               '!,. ','!')                                                           RENEWAL_EST_REV_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION2))             RENEWAL_EST_REV_DURATION
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RER' ,RUL.RULE_INFORMATION3))             RENEWAL_EST_REV_PERIOD
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1)),
       --               '!,. ','!')                                                           RENEWAL_PRICE_LIST_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.OBJECT1_ID1))                   RENEWAL_PRICE_LIST_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION1))             RENEWAL_TYPE_USED
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2)),
       --               '!,. ','!')                                                           RENEWAL_NOTIFICATION_TO
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION2))             RENEWAL_NOTIFICATION_TO
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION3))             RENEWAL_PO_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION4))             RENEWAL_PRICING_TYPE_USED
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5)),
       --               '!. %' ,'!')                                                          RENEWAL_MARKUP_PERCENT_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION5))             RENEWAL_MARKUP_PERCENT_USED
       -- Checked in gsidev conversion needed.
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION6)),
                      '!%. ' ,'!')                                                            REV_EST_PERCENT_USED
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7)),
       --               '!,. ','!')                                                           REV_EST_DURATION_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION7))             REV_EST_DURATION_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION8))             REV_EST_PERIOD_USED
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION9)),
                      '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,. ','!')        BILLING_PROFILE_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION10))            ERN_FLAG_USED_YN
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11)),
       --              '!. ' ,'!')                                                            EVN_THRESHOLD_AMT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION11))            EVN_THRESHOLD_AMT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION12))            EVN_THRESHOLD_CUR
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13)),
       --              '!. ' ,'!')                                                            ERN_THRESHOLD_AMT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION13))            ERN_THRESHOLD_AMT
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRU' ,RUL.RULE_INFORMATION14))            ERN_THRESHOLD_CUR
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1)),
       --              '!,. ','!')                                                            RENEWAL_GRACE_DURATION_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION1))             RENEWAL_GRACE_DURATION_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'RRE' ,RUL.RULE_INFORMATION2))             RENEWAL_GRACE_PERIOD_USED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.OBJECT1_ID1))                   INV_TRX_TYPE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION9))             INV_PRINT_PROFILE
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION10))            RENEWAL_PO_NUMBER
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION11))            AR_INTERFACE_YN
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION12))            HOLD_BILLING
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SBG' ,RUL.RULE_INFORMATION13))            SUMMARY_TRX_YN
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SPO' ,RUL.RULE_INFORMATION1))             SERVICE_PO_NUMBER
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'SPO' ,RUL.RULE_INFORMATION2))             SERVICE_PO_REQUIRED
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.OBJECT1_ID1))                   CONVERSION_TYPE       --OKC
       -- needs translation
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION1)),
                     '!. ','!')                                                               CONVERSION_RATE       --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,
                  to_date(RUL.RULE_INFORMATION2,'yyyy/mm/dd hh24:mi:ss')))                    CONVERSION_RATE_DATE  --OKC
        -- needs translation
       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CVN' ,RUL.RULE_INFORMATION3)),
                     '!. ','!')                                                               CONVERSION_EURO_RATE  --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                            CUST_ACCT_ID          --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'CAN' ,RUL.OBJECT1_ID1))                   CUST_ACCT_ID          --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                            BILL_TO_SITE_USE_ID   --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'BTO' ,RUL.OBJECT1_ID1))                   BILL_TO_SITE_USE_ID   --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                            INV_RULE_ID           --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'IRE' ,RUL.OBJECT1_ID1))                   INV_RULE_ID           --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION1))             RENEWAL_TYPE_CODE     --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2)),
       --              '!,. ','!')                                                            RENEWAL_NOTIFY_TO     --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,RUL.RULE_INFORMATION2))             RENEWAL_NOTIFY_TO     --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'REN' ,
                  to_date(RUL.RULE_INFORMATION3,'yyyy/mm/dd hh24:mi:ss')))                    RENEWAL_END_DATE      --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                            SHIP_TO_SITE_USE_ID   --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'STO' ,RUL.OBJECT1_ID1))                   SHIP_TO_SITE_USE_ID   --OKC
       -- Checked in gsidev no conversion needed.
       --,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1)),
       --              '!,. ','!')                                                            PAYMENT_TERM_ID       --OKC
       ,MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PTR' ,RUL.OBJECT1_ID1))                   PAYMENT_TERM_ID       --OKC

       ,TRANSLATE(MAX(DECODE(RUL.RULE_INFORMATION_CATEGORY , 'PRE' ,RUL.OBJECT1_ID1)),
                     '!,. ','!')                                                              PRICE_LIST_ID         --OKC
FROM OKC_RULE_GROUPS_BH RGP
   , OKC_RULES_BH RUL
WHERE rgp.id = rul.rgp_id
  and rul.major_version=rgp.major_version
  and rgp.chr_id = P_CHR_ID
  and rgp.rgd_code = 'SVC_K'
  AND   RUL.RULE_INFORMATION_CATEGORY IN
       ('ARL','CCR','GPR','RVE','IRT','TAX','ERN','QTO', 'RPO', 'RPT','RER', 'RRU',
        'RRE', 'SBG', 'SPO','SLH','PRE', 'CVN','CAN', 'BTO', 'IRE', 'REN', 'STO', 'PTR')
  and rgp.RGD_CODE = 'SVC_K'
  and rgp.id =p_id
  and rgp.major_version = p_major_version;



----------------------------------------------------------------------------
-- Cursor to populate data in OKS_RULE_ERROR table .                      --
----------------------------------------------------------------------------
CURSOR L_HDR_DTLS_CSR ( P_HDR_ID  IN NUMBER , P_CATEGORY IN VARCHAR2 ) IS
SELECT HDR.CONTRACT_NUMBER
     , HDR.CONTRACT_NUMBER_MODIFIER
     , RUL.MAJOR_VERSION
     , RUL.ID
     , RGP.ID RGP_ID
 FROM  OKC_K_HEADERS_BH HDR
     , OKC_RULE_GROUPS_BH RGP
     , OKC_RULES_BH RUL
WHERE HDR.ID = P_HDR_ID
  AND RGP.DNZ_CHR_ID = P_HDR_ID
  AND RGP.CHR_ID = P_HDR_ID
  AND RGP.ID = RUL.RGP_ID
  AND RGP.DNZ_CHR_ID = RUL.DNZ_CHR_ID
  AND HDR.major_version = Rgp.major_version
  and Rgp.major_version = RUL.major_version
  AND RUL.major_version = p_major_version
  AND RUL.RULE_INFORMATION_CATEGORY = P_CATEGORY ;

L_HDR_DTLS_REC L_HDR_DTLS_CSR%ROWTYPE;
l_check_var varchar2(1);
----------------------------------------------------------------------------

-----------------------------------------------------------------------------
--Cursor to check if the records corresponding to chr_id exists
--in oks_k_headers_bh
-----------------------------------------------------------------------------

Cursor Cur_KHdr_exists(p_chrid in number) IS
select 'x'
from  oks_k_headers_bh
where chr_id=p_chrid
and major_version = p_major_version;

------------------------------------------------------------------------------

-----------------------------------------------------------------------------
--Cursor to check if the records corresponding to rgp_id exists
--in okc_rule_groups_bh
-----------------------------------------------------------------------------

Cursor Cur_RGP_exists(P_RGP_ID in number) IS
select 'x'
from  okc_rule_groups_bh
where id = P_RGP_ID
and chr_id is not null
and major_version = p_major_version;

------------------------------------------------------------------------------

BEGIN
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'--------------Start of Sub request for Header History Rule Data Synchronization--------');
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');

DBMS_TRANSACTION.SAVEPOINT('BEFORE_TRANSACTION');

if(p_us_yn) then

    OPEN l_hdr_rule_csr(p_rgp_id);

    FETCH l_hdr_rule_csr into
                         ACCT_RULE_ID_CHR
                        ,L_PAYMENT_TYPE
                        ,L_CC_NO
                        ,CC_EXPIRY_DATE_CHR
                        ,CC_BANK_ACCT_ID_CHR
                        ,L_CC_AUTH_CODE
                        ,GRACE_DURATION_CHR
                        ,L_GRACE_PERIOD
                        ,EST_REV_PERCENT_CHR
                        ,EST_REV_DATE_CHR
                        ,TAX_AMOUNT_CHR
                        ,L_TAX_STATUS
                        ,TAX_CODE_CHR
                        ,TAX_EXEMPTION_ID_CHR
                        ,L_BILLING_SCHEDULE_TYPE
                        ,BILLING_PROFILE_ID_CHR
                        ,L_RENEWAL_STATUS
                        ,L_ELECTRONIC_RENEWAL_FLAG
                        ,QUOTE_TO_CONTACT_ID_CHR
                        ,QUOTE_TO_SITE_ID_CHR
                        ,QUOTE_TO_EMAIL_ID_CHR
                        ,QUOTE_TO_PHONE_ID_CHR
                        ,QUOTE_TO_FAX_ID_CHR
                        ,L_RENEWAL_PO_REQUIRED
                        ,RENEWAL_PRICE_LIST_CHR
                        ,L_RENEWAL_PRICING_TYPE
                        ,RENEWAL_MARKUP_PERCENT_CHR
                        ,RENEWAL_GRACE_DURATION_CHR
                        ,L_RENEWAL_GRACE_PERIOD
                        ,RENEWAL_EST_REV_PERCENT_CHR
                        ,RENEWAL_EST_REV_DURATIOn_CHR
                        ,L_RENEWAL_EST_REV_PERIOD
                        ,RENEWAL_PRICE_LIST_USED_CHR
                        ,L_RENEWAL_TYPE_USED
                        ,RENEWAL_NOTIFICATION_TO_CHR
                        ,L_RENEWAL_PO_USED
                        ,L_RENEWAL_PRICING_TYPE_USED
                        ,RENEWAL_MARKUP_PERCENT_USED_CH
                        ,REV_EST_PERCENT_USED_CHR
                        ,REV_EST_DURATION_USED_CHR
                        ,L_REV_EST_PERIOD_USED
                        ,BILLING_PROFILE_USED_CHR
                        ,L_ERN_FLAG_USED_YN
                        ,EVN_THRESHOLD_AMT_CHR
                        ,L_EVN_THRESHOLD_CUR
                        ,ERN_THRESHOLD_AMT_CHR
                        ,L_ERN_THRESHOLD_CUR
                        ,RENEWAL_GRACE_DURATION_USED_CH
                        ,L_RENEWAL_GRACE_PERIOD_USED
                        ,L_INV_TRX_TYPE
                        ,L_INV_PRINT_PROFILE
                        ,L_RENEWAL_PO_NUMBER
                        ,L_AR_INTERFACE_YN
                        ,L_HOLD_BILLING
                        ,L_SUMMARY_TRX_YN
                        ,L_SERVICE_PO_NUMBER
                        ,L_SERVICE_PO_REQUIRED
                        ,L_CONVERSION_TYPE                 --OKC
                        ,CONVERSION_RATE_CHR              --OKC
                        ,CONVERSION_RATE_DATE_CHR         --OKC
                        ,CONVERSION_EURO_RATE_CHR         --OKC
                        ,CUST_ACCT_ID_CHR                 --OKC
                        ,BILL_TO_SITE_USE_ID_CHR          --OKC
                        ,INV_RULE_ID_CHR                  --OKC
                        ,L_RENEWAL_TYPE_CODE                --OKC
                        ,RENEWAL_NOTIFY_TO_CHR            --OKC
                        ,RENEWAL_END_DATE_CHR             --OKC
                        ,SHIP_TO_SITE_USE_ID_CHR          --OKC
                        ,PAYMENT_TERM_ID_CHR              --OKC
                        ,PRICE_LIST_ID_CHR  ; --OKC

      close l_hdr_rule_csr;
  else
    OPEN l_hdr_rule_csr_nus(p_rgp_id);

    FETCH l_hdr_rule_csr_nus into
                         ACCT_RULE_ID_CHR
                        ,L_PAYMENT_TYPE
                        ,L_CC_NO
                        ,CC_EXPIRY_DATE_CHR
                        ,CC_BANK_ACCT_ID_CHR
                        ,L_CC_AUTH_CODE
                        ,GRACE_DURATION_CHR
                        ,L_GRACE_PERIOD
                        ,EST_REV_PERCENT_CHR
                        ,EST_REV_DATE_CHR
                        ,TAX_AMOUNT_CHR
                        ,L_TAX_STATUS
                        ,TAX_CODE_CHR
                        ,TAX_EXEMPTION_ID_CHR
                        ,L_BILLING_SCHEDULE_TYPE
                        ,BILLING_PROFILE_ID_CHR
                        ,L_RENEWAL_STATUS
                        ,L_ELECTRONIC_RENEWAL_FLAG
                        ,QUOTE_TO_CONTACT_ID_CHR
                        ,QUOTE_TO_SITE_ID_CHR
                        ,QUOTE_TO_EMAIL_ID_CHR
                        ,QUOTE_TO_PHONE_ID_CHR
                        ,QUOTE_TO_FAX_ID_CHR
                        ,L_RENEWAL_PO_REQUIRED
                        ,RENEWAL_PRICE_LIST_CHR
                        ,L_RENEWAL_PRICING_TYPE
                        ,RENEWAL_MARKUP_PERCENT_CHR
                        ,RENEWAL_GRACE_DURATION_CHR
                        ,L_RENEWAL_GRACE_PERIOD
                        ,RENEWAL_EST_REV_PERCENT_CHR
                        ,RENEWAL_EST_REV_DURATIOn_CHR
                        ,L_RENEWAL_EST_REV_PERIOD
                        ,RENEWAL_PRICE_LIST_USED_CHR
                        ,L_RENEWAL_TYPE_USED
                        ,RENEWAL_NOTIFICATION_TO_CHR
                        ,L_RENEWAL_PO_USED
                        ,L_RENEWAL_PRICING_TYPE_USED
                        ,RENEWAL_MARKUP_PERCENT_USED_CH
                        ,REV_EST_PERCENT_USED_CHR
                        ,REV_EST_DURATION_USED_CHR
                        ,L_REV_EST_PERIOD_USED
                        ,BILLING_PROFILE_USED_CHR
                        ,L_ERN_FLAG_USED_YN
                        ,EVN_THRESHOLD_AMT_CHR
                        ,L_EVN_THRESHOLD_CUR
                        ,ERN_THRESHOLD_AMT_CHR
                        ,L_ERN_THRESHOLD_CUR
                        ,RENEWAL_GRACE_DURATION_USED_CH
                        ,L_RENEWAL_GRACE_PERIOD_USED
                        ,L_INV_TRX_TYPE
                        ,L_INV_PRINT_PROFILE
                        ,L_RENEWAL_PO_NUMBER
                        ,L_AR_INTERFACE_YN
                        ,L_HOLD_BILLING
                        ,L_SUMMARY_TRX_YN
                        ,L_SERVICE_PO_NUMBER
                        ,L_SERVICE_PO_REQUIRED
                        ,L_CONVERSION_TYPE                 --OKC
                        ,CONVERSION_RATE_CHR              --OKC
                        ,CONVERSION_RATE_DATE_CHR         --OKC
                        ,CONVERSION_EURO_RATE_CHR         --OKC
                        ,CUST_ACCT_ID_CHR                 --OKC
                        ,BILL_TO_SITE_USE_ID_CHR          --OKC
                        ,INV_RULE_ID_CHR                  --OKC
                        ,L_RENEWAL_TYPE_CODE                --OKC
                        ,RENEWAL_NOTIFY_TO_CHR            --OKC
                        ,RENEWAL_END_DATE_CHR             --OKC
                        ,SHIP_TO_SITE_USE_ID_CHR          --OKC
                        ,PAYMENT_TERM_ID_CHR              --OKC
                        ,PRICE_LIST_ID_CHR  ; --OKC

      close l_hdr_rule_csr_nus;
  end if;

      Eflag:=0;

      Emsg:=NULL;

    ------------------------------------------------------------------------------------
   -- Begin of code to check if the row exists in oks_headers_bh

      l_check_var:=NULL;

      Open Cur_KHdr_exists(P_CHR_ID);
      Fetch Cur_KHdr_exists into l_check_var;
      Close Cur_KHdr_exists;

      If(l_check_var is NULL) THEN

	  BEGIN
	    UPDATE okc_k_headers_bh SET
	      CONVERSION_TYPE          =  L_CONVERSION_TYPE ,
              CONVERSION_RATE          =  CONVERSION_RATE_CHR ,
              CONVERSION_RATE_DATE     =  CONVERSION_RATE_DATE_CHR ,
              CONVERSION_EURO_RATE     =  CONVERSION_EURO_RATE_CHR ,
              CUST_ACCT_ID             =  CUST_ACCT_ID_CHR ,
              BILL_TO_SITE_USE_ID      =  BILL_TO_SITE_USE_ID_CHR  ,
              INV_RULE_ID              =  INV_RULE_ID_CHR ,
              RENEWAL_TYPE_CODE        =  L_RENEWAL_TYPE_CODE ,
              RENEWAL_NOTIFY_TO        =  RENEWAL_NOTIFY_TO_CHR ,
              RENEWAL_END_DATE         =  RENEWAL_END_DATE_CHR ,
              SHIP_TO_SITE_USE_ID      =  SHIP_TO_SITE_USE_ID_CHR ,
              PAYMENT_TERM_ID          =  PAYMENT_TERM_ID_CHR  ,
              PRICE_LIST_ID            =  PRICE_LIST_ID_CHR
            WHERE id = p_chr_id
	     and major_version = p_major_version;

	    EXCEPTION When others then
              Eflag:=1;
              Emsg :=SQLERRM;
	  END;


          If( Eflag <> 1) Then
	  BEGIN
	     INSERT INTO oks_k_headers_bh(
	        ID
	       ,MAJOR_VERSION
	      ,CHR_ID
	      ,ACCT_RULE_ID
	      ,PAYMENT_TYPE
	      ,CC_NO
	      ,CC_EXPIRY_DATE
	      ,CC_BANK_ACCT_ID
	      ,CC_AUTH_CODE
	      ,GRACE_DURATION
	      ,GRACE_PERIOD
	      ,EST_REV_PERCENT
	      ,EST_REV_DATE
	      ,TAX_AMOUNT
	      ,TAX_STATUS
	      ,TAX_CODE
	      ,TAX_EXEMPTION_ID
	      ,BILLING_SCHEDULE_TYPE
	      ,BILLING_PROFILE_ID
	      ,RENEWAL_STATUS
	      ,ELECTRONIC_RENEWAL_FLAG
	      ,QUOTE_TO_CONTACT_ID
	      ,QUOTE_TO_SITE_ID
	      ,QUOTE_TO_EMAIL_ID
	      ,QUOTE_TO_PHONE_ID
	      ,QUOTE_TO_FAX_ID
	      ,RENEWAL_PO_REQUIRED
	      ,RENEWAL_PRICE_LIST
	      ,RENEWAL_PRICING_TYPE
	      ,RENEWAL_MARKUP_PERCENT
	      ,RENEWAL_GRACE_DURATION
	      ,RENEWAL_GRACE_PERIOD
	      ,RENEWAL_EST_REV_PERCENT
	      ,RENEWAL_EST_REV_DURATIOn
	      ,RENEWAL_EST_REV_PERIOD
	      ,RENEWAL_PRICE_LIST_USED
	      ,RENEWAL_TYPE_USED
	      ,RENEWAL_NOTIFICATION_TO
	      ,RENEWAL_PO_USED
	      ,RENEWAL_PRICING_TYPE_USED
	      ,RENEWAL_MARKUP_PERCENT_USED
	      ,REV_EST_PERCENT_USED
	      ,REV_EST_DURATION_USED
	      ,REV_EST_PERIOD_USED
	      ,BILLING_PROFILE_USED
	      ,ERN_FLAG_USED_YN
	      ,EVN_THRESHOLD_AMT
	      ,EVN_THRESHOLD_CUR
	      ,ERN_THRESHOLD_AMT
	      ,ERN_THRESHOLD_CUR
	      ,RENEWAL_GRACE_DURATION_USED
	      ,RENEWAL_GRACE_PERIOD_USED
	      ,INV_TRX_TYPE
	      ,INV_PRINT_PROFILE
	      ,RENEWAL_PO_NUMBER
	      ,AR_INTERFACE_YN
	      ,HOLD_BILLING
	      ,SUMMARY_TRX_YN
	      ,SERVICE_PO_NUMBER
	      ,SERVICE_PO_REQUIRED
	      ,CREATED_BY
	      ,CREATION_DATE
	      ,LAST_UPDATED_BY
	      ,LAST_UPDATE_DATE
	      ,LAST_UPDATE_LOGIN
	      ,OBJECT_VERSION_NUMBER  )
	    VALUES (
	       P_CHR_ID
	       ,P_MAJOR_VERSION
	      ,P_CHR_ID
	      ,ACCT_RULE_ID_CHR
	      ,L_PAYMENT_TYPE
	      ,L_CC_NO
	      ,CC_EXPIRY_DATE_CHR
	      ,CC_BANK_ACCT_ID_CHR
	      ,L_CC_AUTH_CODE
	      ,GRACE_DURATION_CHR
	      ,L_GRACE_PERIOD
	      ,EST_REV_PERCENT_CHR
	      ,EST_REV_DATE_CHR
	      ,TAX_AMOUNT_CHR
	      ,L_TAX_STATUS
	      ,TAX_CODE_CHR
	      ,TAX_EXEMPTION_ID_CHR
	      ,L_BILLING_SCHEDULE_TYPE
	      ,BILLING_PROFILE_ID_CHR
	      ,L_RENEWAL_STATUS
	      ,L_ELECTRONIC_RENEWAL_FLAG
	      ,QUOTE_TO_CONTACT_ID_CHR
	      ,QUOTE_TO_SITE_ID_CHR
	      ,QUOTE_TO_EMAIL_ID_CHR
	      ,QUOTE_TO_PHONE_ID_CHR
	      ,QUOTE_TO_FAX_ID_CHR
	      ,L_RENEWAL_PO_REQUIRED
	      ,RENEWAL_PRICE_LIST_CHR
	      ,L_RENEWAL_PRICING_TYPE
	      ,RENEWAL_MARKUP_PERCENT_CHR
	      ,RENEWAL_GRACE_DURATION_CHR
	      ,L_RENEWAL_GRACE_PERIOD
	      ,RENEWAL_EST_REV_PERCENT_CHR
	      ,RENEWAL_EST_REV_DURATIOn_CHR
	      ,L_RENEWAL_EST_REV_PERIOD
	      ,RENEWAL_PRICE_LIST_USED_CHR
	      ,L_RENEWAL_TYPE_USED
	      ,RENEWAL_NOTIFICATION_TO_CHR
	      ,L_RENEWAL_PO_USED
	      ,L_RENEWAL_PRICING_TYPE_USED
	      ,RENEWAL_MARKUP_PERCENT_USED_CH
	      ,REV_EST_PERCENT_USED_CHR
	      ,REV_EST_DURATION_USED_CHR
	      ,L_REV_EST_PERIOD_USED
	      ,BILLING_PROFILE_USED_CHR
	      ,L_ERN_FLAG_USED_YN
	      ,EVN_THRESHOLD_AMT_CHR
	      ,L_EVN_THRESHOLD_CUR
	      ,ERN_THRESHOLD_AMT_CHR
	      ,L_ERN_THRESHOLD_CUR
	      ,RENEWAL_GRACE_DURATION_USED_CH
	      ,L_RENEWAL_GRACE_PERIOD_USED
	      ,L_INV_TRX_TYPE
	      ,L_INV_PRINT_PROFILE
	      ,L_RENEWAL_PO_NUMBER
	      ,L_AR_INTERFACE_YN
	      ,L_HOLD_BILLING
	      ,L_SUMMARY_TRX_YN
	      ,L_SERVICE_PO_NUMBER
	      ,L_SERVICE_PO_REQUIRED
	      ,1
	      ,SYSDATE
	      ,1
	      ,SYSDATE
	      ,2003
	      ,1   );


	  EXCEPTION When others then
	    Eflag:=1;
	    Emsg :=SQLERRM;
	  END;

	  End If;


      Else
        l_check_var := NULL;
        Open Cur_RGP_exists(P_RGP_ID);
        Fetch Cur_RGP_exists into l_check_var;
	Close Cur_RGP_exists;

	If(l_check_var is not null) Then

        --Updating oks_k_headers_b
        BEGIN
	  UPDATE OKS_K_HEADERS_BH
	  SET
	     ACCT_RULE_ID               =       ACCT_RULE_ID_CHR
            ,PAYMENT_TYPE		=       L_PAYMENT_TYPE
            ,CC_NO			=	L_CC_NO
            ,CC_EXPIRY_DATE		=	CC_EXPIRY_DATE_CHR
            ,CC_BANK_ACCT_ID		=	CC_BANK_ACCT_ID_CHR
            ,CC_AUTH_CODE		=	L_CC_AUTH_CODE
            ,GRACE_DURATION		=	GRACE_DURATION_CHR
            ,GRACE_PERIOD		=	L_GRACE_PERIOD
            ,EST_REV_PERCENT		=	EST_REV_PERCENT_CHR
            ,EST_REV_DATE		=	EST_REV_DATE_CHR
            ,TAX_AMOUNT			=	TAX_AMOUNT_CHR
            ,TAX_STATUS			=	L_TAX_STATUS
            ,TAX_CODE			=	TAX_CODE_CHR
            ,TAX_EXEMPTION_ID		=	TAX_EXEMPTION_ID_CHR
            ,BILLING_SCHEDULE_TYPE	=	L_BILLING_SCHEDULE_TYPE
            ,BILLING_PROFILE_ID		=	BILLING_PROFILE_ID_CHR
            ,RENEWAL_STATUS		=	L_RENEWAL_STATUS
            ,ELECTRONIC_RENEWAL_FLAG	=	L_ELECTRONIC_RENEWAL_FLAG
            ,QUOTE_TO_CONTACT_ID	=	QUOTE_TO_CONTACT_ID_CHR
            ,QUOTE_TO_SITE_ID		=	QUOTE_TO_SITE_ID_CHR
            ,QUOTE_TO_EMAIL_ID		=	QUOTE_TO_EMAIL_ID_CHR
            ,QUOTE_TO_PHONE_ID		=	QUOTE_TO_PHONE_ID_CHR
            ,QUOTE_TO_FAX_ID		=	QUOTE_TO_FAX_ID_CHR
            ,RENEWAL_PO_REQUIRED	=	L_RENEWAL_PO_REQUIRED
            ,RENEWAL_PRICE_LIST		=	RENEWAL_PRICE_LIST_CHR
            ,RENEWAL_PRICING_TYPE	=	L_RENEWAL_PRICING_TYPE
            ,RENEWAL_MARKUP_PERCENT	=	RENEWAL_MARKUP_PERCENT_CHR
            ,RENEWAL_GRACE_DURATION	=	RENEWAL_GRACE_DURATION_CHR
            ,RENEWAL_GRACE_PERIOD	=	L_RENEWAL_GRACE_PERIOD
            ,RENEWAL_EST_REV_PERCENT	=	RENEWAL_EST_REV_PERCENT_CHR
            ,RENEWAL_EST_REV_DURATION	=	RENEWAL_EST_REV_DURATIOn_CHR
            ,RENEWAL_EST_REV_PERIOD	=	L_RENEWAL_EST_REV_PERIOD
            ,RENEWAL_PRICE_LIST_USED	=	RENEWAL_PRICE_LIST_USED_CHR
            ,RENEWAL_TYPE_USED		=	L_RENEWAL_TYPE_USED
            ,RENEWAL_NOTIFICATION_TO	=	RENEWAL_NOTIFICATION_TO_CHR
            ,RENEWAL_PO_USED		=	L_RENEWAL_PO_USED
            ,RENEWAL_PRICING_TYPE_USED	=	L_RENEWAL_PRICING_TYPE_USED
            ,RENEWAL_MARKUP_PERCENT_USED=	RENEWAL_MARKUP_PERCENT_USED_CH
            ,REV_EST_PERCENT_USED	=	REV_EST_PERCENT_USED_CHR
            ,REV_EST_DURATION_USED	=	REV_EST_DURATION_USED_CHR
            ,REV_EST_PERIOD_USED	=	L_REV_EST_PERIOD_USED
            ,BILLING_PROFILE_USED	=	BILLING_PROFILE_USED_CHR
            ,ERN_FLAG_USED_YN		=	L_ERN_FLAG_USED_YN
            ,EVN_THRESHOLD_AMT		=	EVN_THRESHOLD_AMT_CHR
            ,EVN_THRESHOLD_CUR		=	L_EVN_THRESHOLD_CUR
            ,ERN_THRESHOLD_AMT		=	ERN_THRESHOLD_AMT_CHR
            ,ERN_THRESHOLD_CUR		=	L_ERN_THRESHOLD_CUR
            ,RENEWAL_GRACE_DURATION_USED=	RENEWAL_GRACE_DURATION_USED_CH
            ,RENEWAL_GRACE_PERIOD_USED	=	L_RENEWAL_GRACE_PERIOD_USED
            ,INV_TRX_TYPE		=	L_INV_TRX_TYPE
            ,INV_PRINT_PROFILE		=	L_INV_PRINT_PROFILE
            ,RENEWAL_PO_NUMBER		=	L_RENEWAL_PO_NUMBER
            ,AR_INTERFACE_YN		=	L_AR_INTERFACE_YN
            ,HOLD_BILLING		=	L_HOLD_BILLING
            ,SUMMARY_TRX_YN		=	L_SUMMARY_TRX_YN
            ,SERVICE_PO_NUMBER		=	L_SERVICE_PO_NUMBER
            ,SERVICE_PO_REQUIRED	=	L_SERVICE_PO_REQUIRED
	  WHERE CHR_ID = P_CHR_ID
	  and major_version = p_major_version;


	     EXCEPTION When others then
               Eflag:=1;
               Emsg :=SQLERRM;

        END;

        If( Eflag <> 1) Then
          --Updating okc_k_headers_b

          BEGIN
	    UPDATE okc_k_headers_bh SET
              CONVERSION_TYPE          =  L_CONVERSION_TYPE ,
              CONVERSION_RATE          =  CONVERSION_RATE_CHR ,
              CONVERSION_RATE_DATE     =  CONVERSION_RATE_DATE_CHR ,
              CONVERSION_EURO_RATE     =  CONVERSION_EURO_RATE_CHR,
              CUST_ACCT_ID             =  CUST_ACCT_ID_CHR ,
              BILL_TO_SITE_USE_ID      =  BILL_TO_SITE_USE_ID_CHR  ,
              INV_RULE_ID              =  INV_RULE_ID_CHR  ,
              RENEWAL_TYPE_CODE        =  L_RENEWAL_TYPE_CODE ,
              RENEWAL_NOTIFY_TO        =  RENEWAL_NOTIFY_TO_CHR ,
              RENEWAL_END_DATE         =  RENEWAL_END_DATE_CHR  ,
              SHIP_TO_SITE_USE_ID      =  SHIP_TO_SITE_USE_ID_CHR ,
              PAYMENT_TERM_ID          =  PAYMENT_TERM_ID_CHR  ,
              PRICE_LIST_ID            =  PRICE_LIST_ID_CHR
	    WHERE id = p_chr_id
	    and major_version = p_major_version;

             EXCEPTION When others then
               Eflag:=1;
               Emsg :=SQLERRM;
          END;

	End If;


	Else

	  BEGIN

	    Delete from oks_k_headers_bh where chr_id = P_CHR_ID
	    and major_version = p_major_version;



	        UPDATE okc_k_headers_bh SET
	          CONVERSION_TYPE          =  L_CONVERSION_TYPE ,
	          CONVERSION_RATE          =  CONVERSION_RATE_CHR ,
		  CONVERSION_RATE_DATE     =  CONVERSION_RATE_DATE_CHR ,
	          CONVERSION_EURO_RATE     =  CONVERSION_EURO_RATE_CHR ,
                  CUST_ACCT_ID             =  CUST_ACCT_ID_CHR ,
                  BILL_TO_SITE_USE_ID      =  BILL_TO_SITE_USE_ID_CHR  ,
                  INV_RULE_ID              =  INV_RULE_ID_CHR  ,
                  RENEWAL_TYPE_CODE        =  L_RENEWAL_TYPE_CODE,
                  RENEWAL_NOTIFY_TO        =  RENEWAL_NOTIFY_TO_CHR ,
                  RENEWAL_END_DATE         =  RENEWAL_END_DATE_CHR  ,
                  SHIP_TO_SITE_USE_ID      =  SHIP_TO_SITE_USE_ID_CHR ,
                  PAYMENT_TERM_ID          =  PAYMENT_TERM_ID_CHR  ,
                  PRICE_LIST_ID            =  PRICE_LIST_ID_CHR
                WHERE id = p_chr_id
	     and major_version = p_major_version;

	        EXCEPTION When others then
                  Eflag:=2;
                  Emsg :=SQLERRM;




          END;

	End If;

      End If;


      If(Eflag=1) Then

      DBMS_TRANSACTION.ROLLBACK_SAVEPOINT('BEFORE_TRANSACTION');
    ------------------------------------------------------------------------------------
    -- Begin of code to validate data type .
    -- If data fails validation then set the Eflag to 1

       --1. Validation for ARL rule .
       BEGIN
          ACCT_RULE_ID      := ACCT_RULE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'ARL') ;
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_ACCT_RULE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY , COLUMN_NAME, ATTRIBUTE_NAME    , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'ARL'    ,'OBJECT1_ID1'   ,L_ATTRIBUTE_NAME         , ACCT_RULE_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --2. Validation for CCR rule .
       BEGIN
          CC_BANK_ACCT_ID      := CC_BANK_ACCT_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'CCR') ;
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.CLEAR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CC_BANK_ACCT_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'CCR'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , CC_BANK_ACCT_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --3. Validation for GPR rule .
       BEGIN
          GRACE_DURATION    := GRACE_DURATION_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'GPR') ;
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_GRACE_DURATION');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'GPR'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , GRACE_DURATION_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --4. Validation for RVE rule .
       BEGIN
          EST_REV_PERCENT      := EST_REV_PERCENT_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'RVE') ;
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EST_REV_PERCENT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'RVE'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , EST_REV_PERCENT_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --5. Validation for IRT rule.
       BEGIN
          TAX_AMOUNT      := TAX_AMOUNT_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'IRT') ;
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_AMOUNT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'IRT'  ,'RULE_INFORMATION4'    ,L_ATTRIBUTE_NAME         , TAX_AMOUNT_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --6. Validation for TAX (TAX_CODE) rule.
       BEGIN
          TAX_CODE      := TAX_CODE_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'TAX') ;
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_CODE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'TAX'  ,'OBJECT2_ID1'    ,L_ATTRIBUTE_NAME         , TAX_CODE_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --7. Validation for TAX (TAX_EXEMPTION_ID) rule.
       BEGIN
          TAX_EXEMPTION_ID      := TAX_EXEMPTION_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'TAX');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_TAX_EXEMPTION_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'TAX'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , TAX_EXEMPTION_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;


       --8. Validation for CAN  rule.
       BEGIN
          CUST_ACCT_ID      := CUST_ACCT_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'CAN');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CUST_ACCT_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'CAN'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , CUST_ACCT_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --9. Validation for BTO  rule.
       BEGIN
          BILL_TO_SITE_USE_ID      := BILL_TO_SITE_USE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'BTO');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BILL_TO_SITE_USE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'BTO'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , BILL_TO_SITE_USE_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;


       --10. Validation for IRE  rule.
       BEGIN
          INV_RULE_ID      := INV_RULE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'IRE');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_INV_RULE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'IRE'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , INV_RULE_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --11. Validation for REN ( RENEWAL_NOTIFY_TO )  rule.
       BEGIN
          RENEWAL_NOTIFY_TO      := RENEWAL_NOTIFY_TO_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'IRE');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_NOTIFY_TO');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'REN'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_NOTIFY_TO_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --12. Validation for STO rule.
       BEGIN
          SHIP_TO_SITE_USE_ID      := SHIP_TO_SITE_USE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'STO');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_SHIP_TO_SITE_USE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'STO'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , SHIP_TO_SITE_USE_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --13. Validation for PTR rule.
       BEGIN
          PAYMENT_TERM_ID      := PAYMENT_TERM_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'PTR');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PAYMENT_TERM_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'PTR'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , PAYMENT_TERM_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --14. Validation for ERN rule.
       BEGIN
          BILLING_PROFILE_ID      := BILLING_PROFILE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'ERN');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BILLING_PROFILE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'ERN'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , BILLING_PROFILE_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;


       --15. Validation for QTO ( QUOTE_TO_CONTACT_ID )rule.
       BEGIN
          QUOTE_TO_CONTACT_ID      := QUOTE_TO_CONTACT_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'QTO');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_CONTACT_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'QTO'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_CONTACT_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --16. Validation for QTO ( QUOTE_TO_SITE_ID ) rule.
       BEGIN
          QUOTE_TO_SITE_ID      := QUOTE_TO_SITE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'QTO');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_SITE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'QTO'  ,'RULE_INFORMATION4'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_SITE_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --17. Validation for QTO ( QUOTE_TO_EMAIL_ID ) rule.
       BEGIN
          QUOTE_TO_EMAIL_ID      := QUOTE_TO_EMAIL_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'QTO');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_EMAIL_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'QTO'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_EMAIL_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --18. Validation for QTO ( QUOTE_TO_PHONE_ID ) rule.
       BEGIN
          QUOTE_TO_PHONE_ID      := QUOTE_TO_PHONE_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'QTO');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_PHONE_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'QTO'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_PHONE_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --19. Validation for QTO ( QUOTE_TO_FAX_ID ) rule.
       BEGIN
          QUOTE_TO_FAX_ID      := QUOTE_TO_FAX_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'QTO');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_QUOTE_TO_FAX_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'QTO'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , QUOTE_TO_FAX_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --20. Validation for RPT ( RENEWAL_PRICE_LIST ) rule.
       BEGIN
          RENEWAL_PRICE_LIST      := RENEWAL_PRICE_LIST_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'RPT');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_PRICE_LIST');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'RPT'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , RENEWAL_PRICE_LIST_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --21. Validation for RPT ( RENEWAL_MARKUP_PERCENT ) rule.
       BEGIN
          RENEWAL_MARKUP_PERCENT      := RENEWAL_MARKUP_PERCENT_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'RPT');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_MARKUP_PERCENT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'RPT'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_MARKUP_PERCENT_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --22. Validation for RPT ( RENEWAL_GRACE_DURATION ) rule.
       BEGIN
          RENEWAL_GRACE_DURATION      := RENEWAL_GRACE_DURATION_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'RPT');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_GRACE_DURATION');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'RPT'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , RENEWAL_GRACE_DURATION_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --23. Validation for RER ( RENEWAL_EST_REV_PERCENT ) rule.
       BEGIN
          RENEWAL_EST_REV_PERCENT      := RENEWAL_EST_REV_PERCENT_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'RER');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_EREV_PERCENT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'RER'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , RENEWAL_EST_REV_PERCENT_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --24. Validation for RER ( RENEWAL_EST_REV_DURATION ) rule.
       BEGIN
          RENEWAL_EST_REV_DURATION      := RENEWAL_EST_REV_DURATION_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'RER');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_EREV_DURATION');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'RER'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_EST_REV_DURATION_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --25. Validation for RRU ( RENEWAL_PRICE_LIST_USED ) rule.
       BEGIN
          RENEWAL_PRICE_LIST_USED      := RENEWAL_PRICE_LIST_USED_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_PRICE_LIST_U');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'RRU'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , RENEWAL_PRICE_LIST_USED_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --26. Validation for RRU ( RENEWAL_NOTIFICATION_TO ) rule.
       BEGIN
          RENEWAL_NOTIFICATION_TO      := RENEWAL_NOTIFICATION_TO_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_NOTIFICATION');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'RRU'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , RENEWAL_NOTIFICATION_TO_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --27. Validation for RRU ( RENEWAL_NOTIFICATION_TO ) rule.
       BEGIN
          RENEWAL_MARKUP_PERCENT_USED      := RENEWAL_MARKUP_PERCENT_USED_CH;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_MPERCENT_U');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'RRU'  ,'RULE_INFORMATION5'    ,L_ATTRIBUTE_NAME         , RENEWAL_MARKUP_PERCENT_USED_CH,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --28. Validation for RRU ( REV_EST_PERCENT_USED ) rule.
       BEGIN
          REV_EST_PERCENT_USED      := REV_EST_PERCENT_USED_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_REV_EST_PERCENT_U');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'RRU'  ,'RULE_INFORMATION6'    ,L_ATTRIBUTE_NAME         , REV_EST_PERCENT_USED_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --29. Validation for RRU ( REV_EST_DURATION_USED ) rule.
       BEGIN
          REV_EST_DURATION_USED      := REV_EST_DURATION_USED_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_REV_EST_DURATION_U');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'RRU'  ,'RULE_INFORMATION7'    ,L_ATTRIBUTE_NAME         , REV_EST_DURATION_USED_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --30. Validation for RRU ( BILLING_PROFILE_USED ) rule.
       BEGIN
          BILLING_PROFILE_USED      := BILLING_PROFILE_USED_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_BILLING_PROFILE_U');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'RRU'  ,'RULE_INFORMATION9'    ,L_ATTRIBUTE_NAME         , BILLING_PROFILE_USED_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --31. Validation for RRU ( EVN_THRESHOLD_AMT ) rule.
       BEGIN
          EVN_THRESHOLD_AMT      := EVN_THRESHOLD_AMT_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EVN_THRESHOLD_AMT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'RRU'  ,'RULE_INFORMATION11'    ,L_ATTRIBUTE_NAME         , EVN_THRESHOLD_AMT_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --32. Validation for RRU ( ERN_THRESHOLD_AMT ) rule.
       BEGIN
          ERN_THRESHOLD_AMT      := ERN_THRESHOLD_AMT_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'RRU');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_ERN_THRESHOLD_AMT');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'RRU'  ,'RULE_INFORMATION13'    ,L_ATTRIBUTE_NAME         , ERN_THRESHOLD_AMT_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --33. Validation for RRE ( RENEWAL_GRACE_DURATION_USED ) rule.
       BEGIN
          RENEWAL_GRACE_DURATION_USED      := RENEWAL_GRACE_DURATION_USED_CH;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'RRE');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_GDURATION_U');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'RRE'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , RENEWAL_GRACE_DURATION_USED_CH,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --34. Validation for PRE ( PRICE_LIST_ID ) rule.
       BEGIN
          PRICE_LIST_ID      := PRICE_LIST_ID_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'PRE');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_PRICE_LIST_ID');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'PRE'  ,'OBJECT1_ID1'    ,L_ATTRIBUTE_NAME         , PRICE_LIST_ID_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --35. Validation for CVN ( CONVERSION_RATE ) rule.
       BEGIN
          CONVERSION_RATE      := CONVERSION_RATE_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'CVN');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CONVERSION_RATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'CVN'  ,'RULE_INFORMATION1'    ,L_ATTRIBUTE_NAME         , CONVERSION_RATE_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

       --36. Validation for CVN ( CONVERSION_EURO_RATE ) rule.
       BEGIN
          CONVERSION_EURO_RATE      := CONVERSION_EURO_RATE_CHR;
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'CVN');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CONVERSION_EURO_RATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'CVN'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , CONVERSION_EURO_RATE_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

  /*
       --37. Validation for CCR ( CC_EXPIRY_DATE ) rule.
       BEGIN
          CC_EXPIRY_DATE      := to_date(CC_EXPIRY_DATE_CHR,'yyyy/mm/dd hh24:mi:ss');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'CCR');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CC_EXPIRY_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'CCR'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , CC_EXPIRY_DATE_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

*/
/*
       --38. Validation for RVE ( EST_REV_DATE ) rule.
       BEGIN
          EST_REV_DATE      := to_date(EST_REV_DATE_CHR,'yyyy/mm/dd hh24:mi:ss');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'RVE');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_EST_REV_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'RVE'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , EST_REV_DATE_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;
*/
/*
       --39. Validation for REN ( RENEWAL_END_DATE ) rule.
       BEGIN
          RENEWAL_END_DATE      := to_date(RENEWAL_END_DATE_CHR,'yyyy/mm/dd hh24:mi:ss');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'REN');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_RENEWAL_END_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'REN'  ,'RULE_INFORMATION3'    ,L_ATTRIBUTE_NAME         , RENEWAL_END_DATE_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;
*/
/*

       --40. Validation for REN ( CONVERSION_RATE_DATE ) rule.
       BEGIN
          CONVERSION_RATE_DATE      := to_date(CONVERSION_RATE_DATE_CHR,'yyyy/mm/dd hh24:mi:ss');
       EXCEPTION
       WHEN OTHERS THEN
          OPEN  L_HDR_DTLS_CSR(P_CHR_ID,'REN');
          FETCH L_HDR_DTLS_CSR INTO L_HDR_DTLS_REC;
          CLOSE L_HDR_DTLS_CSR;
          FND_MESSAGE.SET_NAME('OKS','OKS_VAL_CONVERSION_RATE_DATE');
          L_ATTRIBUTE_NAME := FND_MESSAGE.GET;
          L_ERROR_MSG      := SQLERRM;
          INSERT INTO OKS_RULE_ERROR (ID                , RGP_ID                  , CHR_ID       ,
                                      CONTRACT_NUMBER   , CONTRACT_NUMBER_MODIFIER, MAJOR_VERSION, SCRIPT_NAME  ,
                                      RULE_INFORMATION_CATEGORY, COLUMN_NAME , ATTRIBUTE_NAME          , ATTRIBUTE_VALUE,
                                      ERROR_MSG)
                               VALUES (L_HDR_DTLS_REC.ID ,L_HDR_DTLS_REC.RGP_ID    , P_CHR_ID,
                                       L_HDR_DTLS_REC.CONTRACT_NUMBER,L_HDR_DTLS_REC.CONTRACT_NUMBER_MODIFIER , L_HDR_DTLS_REC.MAJOR_VERSION,'HDRH',
                                      'CVN'  ,'RULE_INFORMATION2'    ,L_ATTRIBUTE_NAME         , CONVERSION_RATE_DATE_CHR,
                                       L_ERROR_MSG );
          Eflag:=1;
       END;

  */


    -- End of code to validate data type .
  ---------------------------------------------------------------------------------------

     End If;


      If(Eflag <> 0) Then
        Eflag:=0;
        Raise Main_Exception;
      End If;


      x_return_status := 'S';


  Exception
     When Main_exception THEN
      IF(Emsg is not null) THEN
         FND_FILE.PUT_LINE(FND_FILE.LOG ,'DML Failed for'||p_rgp_id||' '||p_major_version||'with Error Message '||Emsg);
      End If;

      IF(L_ERROR_MSG is not null) THEN
         FND_FILE.PUT_LINE(FND_FILE.LOG ,'Validation for'||p_rgp_id||' '||p_major_version||'Failed with Error Message '||L_ERROR_MSG);
      End If;

     x_return_status := 'E';
    WHEN OTHERS THEN
	X_RETURN_STATUS := 'E';
	L_ERROR_MSG := SQLERRM;
    	FND_FILE.PUT_LINE(FND_FILE.LOG ,'DML Failed for'||p_rgp_id||'with Error Message '||L_ERROR_MSG);


END SYNCHRONIZE_RULE_HDRH;

Procedure SYNCHRONIZE_RULE_SLL(P_RGP_ID IN NUMBER,P_CLE_ID IN NUMBER,P_US_YN IN BOOLEAN, X_RETURN_STATUS OUT NOCOPY VARCHAR2)
IS

L_RGP_ID  CONSTANT NUMBER  := P_RGP_ID ;
L_CLE_ID  CONSTANT NUMBER := P_CLE_ID ;
L_ERROR_MSG                   VARCHAR2(2000);

-- Addition of code on Mar-16-2004 starts
 CURSOR L_LVL_CSR( P_CLE_ID IN NUMBER ) is
  SELECT RUL.ID    RUL_ID
       , LINES.ID  CLE_ID
       , LINES.DNZ_CHR_ID DNZ_CHR_ID
       , NVL(LINES.CLE_ID , LINES.ID ) PARENT_CLE_ID
    FROM OKC_RULES_B RUL
       , OKC_K_LINES_B LINES
       , OKC_RULE_GROUPS_B RGP
   WHERE RUL.RULE_INFORMATION_CATEGORY = 'SLL'
     AND RUL.RGP_ID = RGP.ID
     AND RGP.DNZ_CHR_ID = LINES.DNZ_CHR_ID
     AND RGP.CLE_ID = LINES.ID
     AND RGP.CLE_ID IS NOT NULL
     AND RGP.CLE_ID = P_CLE_ID
     AND LINES.ID = P_CLE_ID;

  Type l_num_tbl is table of NUMBER index  by BINARY_INTEGER ;
  Type l_date_tbl is table of DATE  index  by BINARY_INTEGER ;
  Type l_chr_tbl is table of Varchar2(2000) index  by BINARY_INTEGER ;
  L_ERRM  VARCHAR2(1000);

  CLE_IDI        L_NUM_TBL;
  DNZ_CHR_IDI    L_NUM_TBL;
  PARENT_CLE_IDI L_NUM_TBL;
  RUL_IDI        L_NUM_TBL;
-- Addition on Mar-16-2004 ends .


BEGIN

 FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'--------------Start of Sub request for LINE RULE SLL  ----------------------------');
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');

DBMS_TRANSACTION.SAVEPOINT('BEFORE_TRANSACTION');

DELETE FROM OKS_STREAM_LEVELS_B
WHERE cle_id = P_CLE_ID;

If p_us_yn then
   insert into oks_stream_levels_b b1
    (ID
    ,CHR_ID
    ,CLE_ID
    ,DNZ_CHR_ID
    ,SEQUENCE_NO
    ,UOM_CODE
    ,START_DATE
    ,END_DATE
    ,LEVEL_PERIODS
    ,UOM_PER_PERIOD
    ,ADVANCE_PERIODS
    ,LEVEL_AMOUNT
    ,INVOICE_OFFSET_DAYS
    ,INTERFACE_OFFSET_DAYS
    ,COMMENTS
    ,DUE_ARR_YN
    ,AMOUNT
    ,LINES_DETAILED_YN
    ,OBJECT_VERSION_NUMBER
    ,SECURITY_GROUP_ID
    ,REQUEST_ID
    ,CREATED_BY
    ,CREATION_DATE
    ,LAST_UPDATED_BY
    ,LAST_UPDATE_DATE
    ,LAST_UPDATE_LOGIN)
     select
       rules.id       id,
       rgp.chr_id     chr_id,
       rgp.cle_id     cle_id,
       rgp.dnz_chr_id dnz_chr_id,
       rules.rule_information1 sequence_no,
       rules.object1_id1 uom_code,
       to_date(rules.rule_information2, 'yyyy/mm/dd hh24:mi:ss') start_date,
       null,
       rules.rule_information3 level_periods,
       rules.rule_information4  uom_per_period,
       rules.rule_information5 advance_periods,
       TRANSLATE( rules.rule_information6,'!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_, ' ,'!' ) level_amount,
       TRANSLATE( rules.rule_information7,'!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-,. ' ,'!' ) invoice_offset_days,
       TRANSLATE( rules.rule_information8,'!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-,. ' ,'!' ) interface_offset_days,
       rules.rule_information9   comments,
       rules.rule_information10  due_arr_yn,
       rules.rule_information11 amount,
       null,
       rules.object_version_number object_version_number,
       null,
       null,
       1,
       SYSDATE,
       1,
       SYSDATE,
       2003
  from okc_rule_groups_b rgp,
       okc_rules_b rules
 where rgp.rgd_code = 'SVC_K'
   and rgp.id = rules.rgp_id
   and rules.rule_information_category = 'SLL'
   and rgp.id = p_rgp_id
   and rgp.cle_id = p_cle_id;
Else

   insert into oks_stream_levels_b b1
    (ID
    ,CHR_ID
    ,CLE_ID
    ,DNZ_CHR_ID
    ,SEQUENCE_NO
    ,UOM_CODE
    ,START_DATE
    ,END_DATE
    ,LEVEL_PERIODS
    ,UOM_PER_PERIOD
    ,ADVANCE_PERIODS
    ,LEVEL_AMOUNT
    ,INVOICE_OFFSET_DAYS
    ,INTERFACE_OFFSET_DAYS
    ,COMMENTS
    ,DUE_ARR_YN
    ,AMOUNT
    ,LINES_DETAILED_YN
    ,OBJECT_VERSION_NUMBER
    ,SECURITY_GROUP_ID
    ,REQUEST_ID
    ,CREATED_BY
    ,CREATION_DATE
    ,LAST_UPDATED_BY
    ,LAST_UPDATE_DATE
    ,LAST_UPDATE_LOGIN)
     select
       rules.id       id,
       rgp.chr_id     chr_id,
       rgp.cle_id     cle_id,
       rgp.dnz_chr_id dnz_chr_id,
       rules.rule_information1 sequence_no,
       rules.object1_id1 uom_code,
       to_date(rules.rule_information2, 'yyyy/mm/dd hh24:mi:ss') start_date,
       null,
       rules.rule_information3 level_periods,
       rules.rule_information4  uom_per_period,
       rules.rule_information5 advance_periods,
       TRANSLATE( rules.rule_information6,'!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_. ' ,'!' ) level_amount,
       TRANSLATE( rules.rule_information7,'!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-,. ' ,'!' ) invoice_offset_days,
       TRANSLATE( rules.rule_information8,'!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-,. ' ,'!' ) interface_offset_days,
       rules.rule_information9   comments,
       rules.rule_information10  due_arr_yn,
       rules.rule_information11 amount,
       null,
       rules.object_version_number object_version_number,
       null,
       null,
       1,
       SYSDATE,
       1,
       SYSDATE,
       2003
  from okc_rule_groups_b rgp,
       okc_rules_b rules
 where rgp.rgd_code = 'SVC_K'
   and rgp.id = rules.rgp_id
   and rules.rule_information_category = 'SLL'
   and rgp.id = p_rgp_id
   and rgp.cle_id = p_cle_id;
End If;

  -- New code addition on Mar-16-2004 starts

  FND_FILE.PUT_LINE(FND_FILE.LOG ,'Successful on inserting rec in oks_stream_levels_b');

  OPEN  L_LVL_CSR ( p_cle_id );
  FETCH L_LVL_CSR BULK COLLECT INTO
                             RUL_IDI
                            ,CLE_IDI
                            ,DNZ_CHR_IDI
                            ,PARENT_CLE_IDI;
  CLOSE L_LVL_CSR;
  IF RUL_IDI.COUNT > 0 THEN
    FORALL I IN RUL_IDI.FIRST..RUL_IDI.LAST
      UPDATE OKS_LEVEL_ELEMENTS
         SET CLE_ID = CLE_IDI(I)
           , DNZ_CHR_ID = DNZ_CHR_IDI(I)
           , PARENT_CLE_ID = PARENT_CLE_IDI(I)
       WHERE RUL_ID = RUL_IDI(I);
  END IF;

  FND_FILE.PUT_LINE(FND_FILE.LOG ,'Successful update of oks_level_elements table ');

  -- New code addition on Mar-16-2004 ends


X_RETURN_STATUS := 'S';

EXCEPTION
WHEN OTHERS THEN
FND_FILE.PUT_LINE(FND_FILE.LOG ,'DML Failed for'||p_rgp_id||'with Error Message '||SQLERRM);
DBMS_TRANSACTION.ROLLBACK_SAVEPOINT('BEFORE_TRANSACTION');
X_RETURN_STATUS := 'E';
L_ERROR_MSG := SQLERRM;



END SYNCHRONIZE_RULE_SLL;

---------------------------------------------------------------------------------------------
--                  SYNCHRONIZE CODE FOR HEADER SLL RULE MIGRATION                         --
---------------------------------------------------------------------------------------------
PROCEDURE SYNCHRONIZE_RULE_SLLH(P_RGP_ID IN NUMBER,P_CHR_ID IN NUMBER,P_US_YN IN BOOLEAN,X_RETURN_STATUS OUT NOCOPY VARCHAR2)
IS

L_RGP_ID  CONSTANT NUMBER := P_RGP_ID ;
L_CHR_ID  CONSTANT NUMBER := P_CHR_ID ;
L_ERROR_MSG VARCHAR2(2000);

BEGIN

 FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'--------------Start of Sub request for HDR RULE SLL   ----------------------------');
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');

DBMS_TRANSACTION.SAVEPOINT('BEFORE_TRANSACTION');

DELETE FROM OKS_STREAM_LEVELS_B
WHERE chr_id = P_CHR_ID;
insert  into oks_stream_levels_b(
ID,CHR_ID,CLE_ID,DNZ_CHR_ID,SEQUENCE_NO,UOM_CODE,START_DATE,END_DATE,
LEVEL_PERIODS,UOM_PER_PERIOD,ADVANCE_PERIODS,LEVEL_AMOUNT,
INVOICE_OFFSET_DAYS,INTERFACE_OFFSET_DAYS,COMMENTS,DUE_ARR_YN,
AMOUNT,LINES_DETAILED_YN,OBJECT_VERSION_NUMBER,SECURITY_GROUP_ID,
REQUEST_ID,CREATED_BY,CREATION_DATE,LAST_UPDATED_BY,LAST_UPDATE_DATE,LAST_UPDATE_LOGIN)
select rules.id id, rgp.chr_id chr_id, rgp.cle_id cle_id, rgp.dnz_chr_id
	  dnz_chr_id, rules.rule_information1 sequence_no,
       rules.object1_id1 uom_code, to_date(rules.rule_information2,
       'yyyy/mm/dd hh24:mi:ss') start_date, null,
       rules.rule_information3 level_periods, rules.rule_information4
       uom_per_period, rules.rule_information5 advance_periods,
       rules.rule_information6 level_amount, replace(replace(substr(
       rule_information7, 0, length(RULE_INFORMATION7) -3 ), ','), '.')
       || replace(substr(RULE_INFORMATION7, -3), ',', '.')
       invoice_offset_days, replace(replace(substr(rule_information8, 0,
       length(RULE_INFORMATION8) -3 ), ','), '.') || replace(substr(
       RULE_INFORMATION8, -3), ', ','.') interface_offset_days,
       rules.rule_information9 comments, rules.rule_information10
       due_arr_yn, rules.rule_information11 amount, null,
       rules.object_version_number object_version_number, null, null, 1,
   	  SYSDATE, 1, SYSDATE, 2003
  from okc_rule_groups_b rgp,
	  okc_rules_b rules
 where rgp.rgd_code = 'SVC_K'
   and rgp.id = P_RGP_ID
   and rgp.chr_id=P_CHR_ID
   and rules.rgp_id = rgp.id
   and rules.rule_information_category = 'SLL';

X_RETURN_STATUS := 'S';

EXCEPTION
  WHEN OTHERS THEN
       FND_FILE.PUT_LINE(FND_FILE.LOG ,'DML Failed for SLL HDR Sync '||p_rgp_id||'with Error Message '||SQLERRM);
       DBMS_TRANSACTION.ROLLBACK_SAVEPOINT('BEFORE_TRANSACTION');
       X_RETURN_STATUS := 'E';
       L_ERROR_MSG := SQLERRM;

END SYNCHRONIZE_RULE_SLLH;



PROCEDURE SYNCHRONIZE_RULE_OFS(
				P_RGP_ID IN NUMBER,
				P_CLE_ID IN NUMBER,
				P_DNZ_CHR_ID IN NUMBER,
				P_MAJOR_VERSION IN NUMBER,
				X_RETURN_STATUS OUT NOCOPY VARCHAR2) AS

L_RGP_ID  CONSTANT NUMBER  := P_RGP_ID ;
L_CLE_ID  CONSTANT NUMBER := P_CLE_ID ;
L_DNZ_CHR_ID  CONSTANT NUMBER := P_DNZ_CHR_ID ;
L_MAJOR_VERSION  CONSTANT NUMBER := P_MAJOR_VERSION ;
L_ERROR_MSG                   VARCHAR2(2000);

-----------------------------------------------------------------------------
--Cursor to check if the records corresponding to CLE_ID exists
--in oks_k_lines_b
-----------------------------------------------------------------------------

Cursor Cur_Klin_exists(p_cleid in number) IS
select 'x'
from  oks_k_lines_b
where cle_id=p_cleid;

Cursor Cur_Klinh_exists(p_cleid in number,p_major_version IN NUMBER) IS
select 'x'
from  oks_k_lines_bh
where cle_id=p_cleid
AND  major_version = p_major_version;
-----------------------------------------------------------------------------
--Cursor to check if the records corresponding to rgp_id exists
--in okc_rule_groups_b
-----------------------------------------------------------------------------

Cursor Cur_RGP_exists(P_RGP_ID in number) IS
select 'x'
from  okc_rule_groups_b
where id = P_RGP_ID
and   cle_id is not null;

Cursor Cur_RGPH_exists(P_RGP_ID in number,p_major_version IN NUMBER) IS
select 'x'
from  okc_rule_groups_bh
where id = P_RGP_ID
AND   major_version = p_major_version
and   cle_id is not null;
-----------------------------------------------------------------------------
--Cursor to get Offset Period and Duration
-----------------------------------------------------------------------------

Cursor Cur_Off_Period(l_cleid in number,l_rgp_id IN NUMBER) IS
	SELECT TIM2.UOM_CODE,TIM2.DURATION
	FROM okc_timevalues_b TIM,okc_timevalues_b TIM2 ,okc_rules_b Rul,OKC_RULE_GROUPS_B RGP
	WHERE  RGP.CLE_ID = l_cle_id
	AND    RUL.rule_information1 = TIM.Id
	AND    RUL.rule_information_category = 'OFS'
	AND    RGP.ID = RUL.RGP_ID
	AND    RUL.DNZ_CHR_ID = TIM.DNZ_CHR_ID
	AND    RUL.DNZ_CHR_ID = RGP.DNZ_CHR_ID
	AND    TIM2.ID = TIM.TVE_ID_STARTED
	AND    TIM.DNZ_CHR_ID = TIM2.DNZ_CHR_ID
	AND    RGP.ID = L_RGP_ID;

Cursor Cur_Off_Period_H(l_cleid in number,l_rgp_id IN NUMBER,l_major_version IN NUMBER) IS
	SELECT TIM2.UOM_CODE,TIM2.DURATION
	FROM okc_timevalues_bh TIM,okc_timevalues_bh TIM2 ,okc_rules_bh Rul,OKC_RULE_GROUPS_BH RGP
	WHERE  RGP.CLE_ID = l_cle_id
	AND    RUL.rule_information1 = TIM.Id
	AND    RUL.rule_information_category = 'OFS'
	AND    RGP.ID = RUL.RGP_ID
	AND    RUL.DNZ_CHR_ID = TIM.DNZ_CHR_ID
	AND    RUL.DNZ_CHR_ID = RGP.DNZ_CHR_ID
	AND    TIM2.ID = TIM.TVE_ID_STARTED
	AND    TIM.DNZ_CHR_ID = TIM2.DNZ_CHR_ID
	AND    RGP.ID = L_RGP_ID
	AND    rgp.major_version = l_major_version
	AND    rgp.major_Version = Rul.major_version
	AND    rul.major_Version = tim.major_version
	AND    tim.major_version = tim2.major_version;

l_check_var Varchar2(2);
l_off_period VARCHAR2(100) ;
l_off_duraion NUMBER;

BEGIN

 FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'--------------Start of Sub request for LINE RULE OFS  ----------------------------');
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');

DBMS_TRANSACTION.SAVEPOINT('BEFORE_TRANSACTION');


IF L_MAJOR_VERSION IS NULL THEN

   l_check_var := NULL;
   Open Cur_RGP_exists(P_RGP_ID);
   Fetch Cur_RGP_exists into l_check_var;
   Close Cur_RGP_exists;

   If(l_check_var is null) Then

      Delete from oks_k_lines_b where cle_id = P_Cle_ID;

   else

      l_check_var:=NULL;

      Open Cur_Klin_exists(P_Cle_ID);
      Fetch Cur_Klin_exists into l_check_var;
      Close Cur_Klin_exists;

	If(l_check_var is NOT NULL) THEN


	UPDATE OKS_K_LINES_B T1
	    SET (T1.offset_period ,T1.offset_duration) =
	        (SELECT TIM2.UOM_CODE,TIM2.DURATION
	         FROM okc_timevalues_b TIM,okc_timevalues_b TIM2 ,okc_rules_b Rul,OKC_RULE_GROUPS_B RGP
	         WHERE  RGP.CLE_ID = l_cle_id
	         AND    RUL.rule_information1 = TIM.Id
	         AND    RUL.rule_information_category = 'OFS'
	         AND    RGP.ID = RUL.RGP_ID
	         AND    RUL.DNZ_CHR_ID = TIM.DNZ_CHR_ID
	         AND    RUL.DNZ_CHR_ID = RGP.DNZ_CHR_ID
             AND    TIM2.ID = TIM.TVE_ID_STARTED
             AND    TIM.DNZ_CHR_ID = TIM2.DNZ_CHR_ID
             AND    RGP.ID = L_RGP_ID)
        WHERE T1.CLE_ID = l_cle_id
             AND  T1.DNZ_CHR_ID = l_dnz_chr_id;

	ELSE

	      Open Cur_Off_Period(P_Cle_ID,P_RGP_ID);
	      Fetch Cur_Off_Period into l_off_period,l_off_duraion;
	      Close Cur_Off_Period;


              INSERT INTO OKS_K_LINES_B
                       ( ID
                        ,CLE_ID
                        ,DNZ_CHR_ID
            			,OFFSET_PERIOD
			            ,OFFSET_DURATION
                        ,CREATED_BY
                        ,CREATION_DATE
                        ,LAST_UPDATED_BY
                        ,LAST_UPDATE_DATE
                        ,LAST_UPDATE_LOGIN
                        ,OBJECT_VERSION_NUMBER  )
                 VALUES (P_CLE_ID
                        ,P_CLE_ID
                        ,L_DNZ_CHR_ID
			,l_off_period
			,l_off_duraion
                        ,1
                        ,sysdate
                        ,1
                        ,sysdate
                        ,2003
                        ,1   );
	END IF;

  end if;
END IF;

IF L_MAJOR_VERSION IS NOT NULL THEN

   l_check_var := NULL;
   Open Cur_RGPH_exists(P_RGP_ID,l_major_version);
   Fetch Cur_RGPH_exists into l_check_var;
   Close Cur_RGPH_exists;

   If(l_check_var is null) Then

      	DELETE FROM OKS_K_LINES_BH
	WHERE cle_id = P_Cle_ID
	AND   major_version = l_major_version;

   else


      l_check_var:=NULL;

      Open Cur_Klinh_exists(P_Cle_ID,l_major_version);
      Fetch Cur_Klinh_exists into l_check_var;
      Close Cur_Klinh_exists;

	If(l_check_var is NOT NULL) THEN


	UPDATE OKS_K_LINES_BH T1
	    SET (T1.offset_period ,T1.offset_duration) =
	        (SELECT TIM2.UOM_CODE,TIM2.DURATION
	         FROM okc_timevalues_bh TIM ,okc_timevalues_bh TIM2,okc_rules_bh Rul,OKC_RULE_GROUPS_BH RGP
	         WHERE  RGP.CLE_ID = l_cle_id
	         AND    RUL.rule_information1 = TIM.Id
	         AND    RUL.rule_information_category = 'OFS'
	         AND    RGP.ID = RUL.RGP_ID
	         AND    RUL.DNZ_CHR_ID = TIM.DNZ_CHR_ID
	         AND    RUL.DNZ_CHR_ID = RGP.DNZ_CHR_ID
             AND    TIM2.ID = TIM.TVE_ID_STARTED
             AND    TIM.DNZ_CHR_ID = TIM2.DNZ_CHR_ID
             	 AND    RGP.MAJOR_VERSION = RUL.MAJOR_VERSION
             	 AND    RGP.MAJOR_VERSION = l_major_version
             	 AND    RUL.MAJOR_VERSION = TIM.MAJOR_VERSION
                 AND    TIM2.MAJOR_VERSION = TIM.MAJOR_VERSION
                 AND    RGP.ID = L_RGP_ID)
        WHERE T1.CLE_ID = l_cle_id
             AND  T1.DNZ_CHR_ID = l_dnz_chr_id
	     AND  T1.Major_Version = l_major_version;



	ELSE

	      Open Cur_Off_Period_H(P_Cle_ID,P_RGP_ID,l_major_version);
	      Fetch Cur_Off_Period_H into l_off_period,l_off_duraion;
	      Close Cur_Off_Period_H;


              INSERT INTO OKS_K_LINES_BH
                       ( ID
                        ,CLE_ID
                        ,DNZ_CHR_ID
                        ,MAJOR_VERSION
            			,OFFSET_PERIOD
			            ,OFFSET_DURATION
                        ,CREATED_BY
                        ,CREATION_DATE
                        ,LAST_UPDATED_BY
                        ,LAST_UPDATE_DATE
                        ,LAST_UPDATE_LOGIN
                        ,OBJECT_VERSION_NUMBER  )
                 VALUES (P_CLE_ID
                        ,P_CLE_ID
                        ,L_DNZ_CHR_ID
                        ,P_MAJOR_VERSION
            			,l_off_period
			             ,l_off_duraion
                        ,1
                        ,sysdate
                        ,1
                        ,sysdate
                        ,2003
                        ,1   );
	END IF;


   end if;

END IF;

X_RETURN_STATUS := 'S';

EXCEPTION
WHEN OTHERS THEN
DBMS_TRANSACTION.ROLLBACK_SAVEPOINT('BEFORE_TRANSACTION');
X_RETURN_STATUS := 'E';
L_ERROR_MSG := SQLERRM;
FND_FILE.PUT_LINE(FND_FILE.LOG ,'DML Failed for'||p_rgp_id||'with Error Message '||L_ERROR_MSG);

END SYNCHRONIZE_RULE_OFS;


PROCEDURE SYNCHRONIZE_RULE_CVR(
				P_RGP_ID IN NUMBER,
				P_CLE_ID IN NUMBER,
				P_DNZ_CHR_ID IN NUMBER,
				P_MAJOR_VERSION IN NUMBER,
				X_RETURN_STATUS OUT NOCOPY VARCHAR2) AS

L_RGP_ID  CONSTANT NUMBER  := P_RGP_ID ;
L_CLE_ID  CONSTANT NUMBER := P_CLE_ID ;
L_DNZ_CHR_ID  CONSTANT NUMBER := P_DNZ_CHR_ID ;
L_MAJOR_VERSION  CONSTANT NUMBER := P_MAJOR_VERSION ;
L_ERROR_MSG                   VARCHAR2(2000);

Cursor Cur_RGP_exists(p_RGP_ID in number) IS
select 'x'
from  okc_rule_groups_b
where id = p_RGP_ID
and   cle_id is not null;

Cursor Cur_RGPH_exists(P_RGP_ID in number,p_major_version IN NUMBER) IS
select 'x'
from  okc_rule_groups_bh
where id = P_RGP_ID
AND   major_version = p_major_version
and   cle_id is not null;

l_check_var VARCHAR2(1);

BEGIN

 FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'--------------Start of Sub request for LINE RULE CVR  ----------------------------');
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');

DBMS_TRANSACTION.SAVEPOINT('BEFORE_TRANSACTION');

IF L_MAJOR_VERSION IS NULL THEN

	BEGIN
		l_check_var := NULL;
		Open Cur_RGP_exists(L_RGP_ID);
		Fetch Cur_RGP_exists into l_check_var;
		Close Cur_RGP_exists;

		IF(l_check_var is null) THEN
			Delete from oks_k_lines_b where cle_id = L_Cle_ID;
		END IF;

		DELETE  OKS_COVERAGE_TIMES
		WHERE   COV_TZE_LINE_ID IN (SELECT ID FROM OKS_COVERAGE_TIMEZONES
							WHERE  CLE_ID = L_CLE_ID AND DNZ_CHR_ID = L_DNZ_CHR_ID)
		AND	DNZ_CHR_ID = L_DNZ_CHR_ID;

		DELETE  OKS_COVERAGE_TIMEZONES
		WHERE  CLE_ID = L_CLE_ID
		AND	DNZ_CHR_ID = L_DNZ_CHR_ID;

		--COMMIT;



		insert  into oks_coverage_timezones oct (
		       id, cle_id, dnz_chr_id, timezone_id, default_yn, created_by,
		       creation_date, last_updated_by, last_update_date,
		       last_update_login, security_group_id, program_application_id,
		       program_id, program_update_date, request_id, object_version_number)
		select
		       distinct rgp.cle_id, rgp.cle_id, rgp.dnz_chr_id, times.tze_id, 'Y',
		       2003, sysdate, 2003, sysdate, 2003, null, null, null, null, null, 1
		  from okc_rule_groups_b rgp,
		       okc_rules_b rules,
		       okc_timevalues_b times,
		       okc_cover_times cvt
		 where rgp.id = rules.rgp_id
		   and rgp.dnz_chr_id = rules.dnz_chr_id
		   and rules.rule_information_category = 'CVR'
		   and rules.id = cvt.rul_id
		   and cvt.tve_id = times.id
		   and rgp.id = L_RGP_ID
		   and rgp.dnz_chr_id = L_DNZ_CHR_ID
		   and rgp.cle_id = L_CLE_ID;



		insert into oks_coverage_times oct (
		       id, cov_tze_line_id, dnz_chr_id, start_hour, start_minute,
		       end_hour, end_minute, monday_yn, tuesday_yn, wednesday_yn,
		       thursday_yn, friday_yn, saturday_yn, sunday_yn, created_by,
		       creation_date, last_updated_by, last_update_date,
		       last_update_login, security_group_id, program_application_id,
		       program_id, program_update_date, request_id, object_version_number)
		select
		       time_val.id, tze.id tze_id, time_val.dnz_chr_id, time_val.start_hour,
		       time_val.start_minute, time_val.end_hour, time_val.end_minute,
			decode( time_val.start_day_of_week, 'MON', 'Y', 'N') monday_yn,
			decode( time_val.start_day_of_week, 'TUE', 'Y', 'N') tuesday_yn,
			decode (time_val.start_day_of_week, 'WED', 'Y', 'N') wednesday_yn,
		       decode(time_val.start_day_of_week, 'THU', 'Y', 'N') thursday_yn,
		       decode(time_val.start_day_of_week, 'FRI', 'Y', 'N') friday_yn,
		       decode(time_val.start_day_of_week, 'SAT', 'Y', 'N') saturday_yn,
		       decode(time_val.start_day_of_week, 'SUN', 'Y', 'N' ) sunday_yn, 2003,
		       sysdate, 2003, sysdate, 2003, null, null, null, null, null, 1
		  from okc_time_ig_startend_val_v time_val,
		       okc_cover_times cvt,
		       okc_rules_b rules,
		       okc_rule_groups_b rgp,
		       oks_coverage_timezones tze
		 where time_val.id = cvt.tve_id
		   and cvt.rul_id = rules.id
		   and time_val.dnz_chr_id = cvt.dnz_chr_id
		   and rules.rule_information_category = 'CVR'
		   and rules.dnz_chr_id = rgp.dnz_chr_id
		   and rules.rgp_id = rgp.id
		   and rgp.cle_id = tze.id
		   and rgp.dnz_chr_id = tze.dnz_chr_id
		   and rgp.id = L_RGP_ID
		   and rgp.dnz_chr_id = L_DNZ_CHR_ID
		   and rgp.cle_id = L_CLE_ID;


	END;

ELSE

--FOR HISTORY

	BEGIN

		l_check_var := NULL;
		Open Cur_RGPH_exists(L_RGP_ID,L_MAJOR_VERSION);
		Fetch Cur_RGPH_exists into l_check_var;
		Close Cur_RGPH_exists;

		If(l_check_var is null) Then

			Delete from oks_k_lines_bh where cle_id = P_Cle_ID and major_version = L_MAJOR_VERSION;
		END IF;

		DELETE  OKS_COVERAGE_TIMES_H
		WHERE   COV_TZE_LINE_ID IN (SELECT ID FROM OKS_COVERAGE_TIMEZONES_H
							WHERE  CLE_ID = L_CLE_ID AND MAJOR_VERSION = L_MAJOR_VERSION
							AND	DNZ_CHR_ID = L_DNZ_CHR_ID)
		AND	MAJOR_VERSION = L_MAJOR_VERSION
		AND	DNZ_CHR_ID = L_DNZ_CHR_ID;

		DELETE  OKS_COVERAGE_TIMEZONES_H
		WHERE  CLE_ID = L_CLE_ID
		AND	DNZ_CHR_ID = L_DNZ_CHR_ID
		AND	MAJOR_VERSION = L_MAJOR_VERSION;


		INSERT INTO OKS_COVERAGE_TIMEZONES_H oct (
		       id, cle_id, dnz_chr_id, timezone_id, default_yn, created_by,
		       creation_date, last_updated_by, last_update_date,
		       last_update_login, security_group_id, program_application_id,
		       program_id, program_update_date, request_id, object_version_number,major_version)
		select distinct rgp.cle_id, rgp.cle_id, rgp.dnz_chr_id, times.tze_id, 'Y',
		       1, sysdate, 1, sysdate, 2003, null, null, null, null, null,1, times.major_version
		  from okc_rule_groups_bh rgp,
		       okc_rules_bh rules,
		       okc_timevalues_bh times,
		       okc_cover_times_h cvt
		 where rgp.id = rules.rgp_id
		   and rgp.dnz_chr_id = rules.dnz_chr_id
		   and rules.rule_information_category = 'CVR'
		   and rules.id = cvt.rul_id
		   and cvt.tve_id = times.id
		   and rgp.major_version = rules.major_version
		   and cvt.major_version = rules.major_version
		   and cvt.major_version = times.major_version
		   and rgp.id = L_RGP_ID
		   and rgp.dnz_chr_id = L_DNZ_CHR_ID
		   and rgp.cle_id = L_CLE_ID
		   and rgp.major_version = l_major_version;



		INSERT INTO OKS_COVERAGE_TIMES_H oct (
		       id, cov_tze_line_id, dnz_chr_id, start_hour, start_minute,
		       end_hour, end_minute, monday_yn, tuesday_yn, wednesday_yn,
		       thursday_yn, friday_yn, saturday_yn, sunday_yn, created_by,
		       creation_date, last_updated_by, last_update_date,
		       last_update_login, security_group_id, program_application_id,
		       program_id, program_update_date, request_id,major_version, object_version_number)
		select
		       time_val.id, tze.id tze_id, time_val.dnz_chr_id, time_val.start_hour,
		       time_val.start_minute, time_val.end_hour, time_val.end_minute,
			decode( time_val.start_day_of_week, 'MON', 'Y', 'N') monday_yn,
			decode( time_val.start_day_of_week, 'TUE', 'Y', 'N') tuesday_yn,
			decode (time_val.start_day_of_week, 'WED', 'Y', 'N') wednesday_yn,
		       decode(time_val.start_day_of_week, 'THU', 'Y', 'N') thursday_yn,
		       decode(time_val.start_day_of_week, 'FRI', 'Y', 'N') friday_yn,
		       decode(time_val.start_day_of_week, 'SAT', 'Y', 'N') saturday_yn,
		       decode(time_val.start_day_of_week, 'SUN', 'Y', 'N' ) sunday_yn, 1,
		       sysdate, 1, sysdate, 2003, null, null, null, null, null,tze.major_version, 1
		  from oks_covtimes_hist_v time_val, --oks_time_ig_startend_val_hv time_val,
		       okc_cover_times_h cvt,
		       okc_rules_bh rules,
		       okc_rule_groups_bh rgp,
		       oks_coverage_timezones_h tze
		 where time_val.id = cvt.tve_id
		   and cvt.rul_id = rules.id
		   and time_val.dnz_chr_id = cvt.dnz_chr_id
		   and rules.rule_information_category = 'CVR'
		   and rules.dnz_chr_id = rgp.dnz_chr_id
		   and rules.rgp_id = rgp.id
		   and rgp.id = L_RGP_ID
		   and rgp.dnz_chr_id = L_DNZ_CHR_ID
		   and rgp.cle_id = L_CLE_ID
		   and rgp.cle_id = tze.id
		   and rgp.dnz_chr_id = tze.dnz_chr_id
		   and time_val.major_version = cvt.major_version
		   and cvt.major_version = rules.major_version
		   and rules.major_version = rgp.major_version
		   and rgp.major_version = tze.major_version
		   and rgp.major_version = l_major_version;


	END;

END IF;

X_RETURN_STATUS := 'S';

EXCEPTION
WHEN OTHERS THEN
DBMS_TRANSACTION.ROLLBACK_SAVEPOINT('BEFORE_TRANSACTION');
X_RETURN_STATUS := 'E';
L_ERROR_MSG := SQLERRM;
FND_FILE.PUT_LINE(FND_FILE.LOG ,'DML Failed for'||p_rgp_id||'with Error Message '||L_ERROR_MSG);

END SYNCHRONIZE_RULE_CVR;

Procedure SYNCHRONIZE_RULE_ATM(
				P_RGP_ID IN NUMBER,
				P_CLE_ID IN NUMBER,
				P_DNZ_CHR_ID IN NUMBER,
				X_RETURN_STATUS OUT NOCOPY VARCHAR2) AS

L_RGP_ID  CONSTANT NUMBER  := P_RGP_ID ;
L_CLE_ID  CONSTANT NUMBER := P_CLE_ID ;
L_DNZ_CHR_ID  CONSTANT NUMBER := P_DNZ_CHR_ID ;
L_ERROR_MSG                   VARCHAR2(2000);
l_check_var     VARCHAR2(1) := NULL;
CURSOR GET_RCN_RSN_INFO (L_RGP_ID IN NUMBER,L_CLE_ID IN NUMBER,L_DNZ_CHR_ID IN NUMBER) IS
SELECT
RGP.CLE_ID  ID,
RGP.CLE_ID  CLE_ID,
RGP.DNZ_CHR_ID DNZ_RGP_ID,
MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1))RCN_INCIDENT_SEVERITY_ID,
MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1))RCN_PDF_ID,
MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION2))RCN_REACT_TIME_NAME,
MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION3))RCN_WORK_THRU_YN,
MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION4))RCN_REACT_ACTIVE_YN,
MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RSN',RUL.RULE_INFORMATION2))RSN_REACT_TIME_NAME
FROM    OKC_RULE_GROUPS_B RGP,
        OKC_RULES_B RUL
WHERE   RGP.ID  = RUL.RGP_ID
AND    RUL.RULE_INFORMATION_CATEGORY IN ('RCN','RSN')
AND    RUL.DNZ_CHR_ID = RGP.DNZ_CHR_ID
AND    RGP.CLE_ID IS NOT NULL
AND RGP.ID  = L_RGP_ID
AND RGP.CLE_ID  = L_CLE_ID
AND RGP.DNZ_CHR_ID  = L_DNZ_CHR_ID
GROUP BY RGP.CLE_ID ,RGP.CLE_ID, RGP.DNZ_CHR_ID;


REC_RCN_RSN_INFO GET_RCN_RSN_INFO%ROWTYPE;

Cursor Cur_Klin_exists(p_cleid in number) IS
select 'x'
from  oks_k_lines_b
where cle_id=p_cleid;
 L_USERENV_LANG               VARCHAR2(100) := OKC_UTIL.get_userenv_lang ;
 l_NOT_FOUND NUMBER := 0;

BEGIN ----MAIN BEGIN
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'--------------Start of Sub request for LINE RULE RCN/RSN--------------------------');
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');

DBMS_TRANSACTION.SAVEPOINT('BEFORE_TRANSACTION');

DELETE   OKS_ACTION_TIMES
WHERE  CLE_ID = L_CLE_ID
AND	DNZ_CHR_ID = L_DNZ_CHR_ID;

DELETE   OKS_ACTION_TIME_TYPES
WHERE   CLE_ID = L_CLE_ID
AND	DNZ_CHR_ID = L_DNZ_CHR_ID;

BEGIN

OPEN GET_RCN_RSN_INFO (L_RGP_ID ,L_CLE_ID,L_DNZ_CHR_ID );
l_NOT_FOUND := 0;
FETCH  GET_RCN_RSN_INFO INTO REC_RCN_RSN_INFO;

	IF GET_RCN_RSN_INFO%NOTFOUND THEN
		l_NOT_FOUND := 1;
	END IF;

CLOSE GET_RCN_RSN_INFO;

      l_check_var:=NULL;

      Open Cur_Klin_exists(L_Cle_ID);
      Fetch Cur_Klin_exists into l_check_var;
      Close Cur_Klin_exists;

	IF ((l_check_var is NOT NULL) AND (l_NOT_FOUND = 1) ) THEN

		DELETE OKS_K_LINES_TL
		WHERE  ID IN (SELECT ID FROM OKS_K_LINES_B 	WHERE CLE_ID = l_CLE_ID
								AND DNZ_CHR_ID = L_DNZ_CHR_ID);

		DELETE OKS_K_LINES_B
		WHERE CLE_ID = l_CLE_ID;

    	ELSIF((l_check_var is NOT NULL) AND (l_NOT_FOUND = 0))  THEN


        --Updating oks_k_lines_b
        BEGIN
            UPDATE OKS_K_LINES_B SET
            INCIDENT_SEVERITY_ID = REC_RCN_RSN_INFO.RCN_INCIDENT_SEVERITY_ID,
            PDF_ID              = REC_RCN_RSN_INFO.RCN_PDF_ID,
            --REACT_TIME_NAME     = REC_RCN_RSN_INFO.RCN_REACT_TIME_NAME,
            WORK_THRU_YN        =   REC_RCN_RSN_INFO.RCN_WORK_THRU_YN,
            REACT_ACTIVE_YN     = REC_RCN_RSN_INFO.RCN_REACT_ACTIVE_YN
            WHERE CLE_ID = L_CLE_ID
	    AND DNZ_CHR_ID = L_DNZ_CHR_ID;

            FOR lang_i IN OKC_UTIL.g_language_code.FIRST..OKC_UTIL.g_language_code.LAST    LOOP
                UPDATE  OKS_K_LINES_TL SET
                        REACT_TIME_NAME     = REC_RCN_RSN_INFO.RCN_REACT_TIME_NAME
                WHERE   id= (SELECT id FROM OKS_K_LINES_B
				WHERE CLE_ID = L_CLE_ID
				AND DNZ_CHR_ID = L_DNZ_CHR_ID)
                AND     language = OKC_UTIL.g_language_code(lang_i)
                AND     source_lang = L_USERENV_LANG ;
            END LOOP;
        END;
    ELSE
        BEGIN
	  IF (l_check_var is NOT NULL) THEN
            INSERT INTO OKS_K_LINES_B (
                                        ID
                                        ,CLE_ID
                                        ,DNZ_CHR_ID
                                        ,INCIDENT_SEVERITY_ID
                                        ,PDF_ID
                                        ,WORK_THRU_YN
                                        ,REACT_ACTIVE_YN
					,OBJECT_VERSION_NUMBER
					,CREATED_BY
					,CREATION_DATE
					,LAST_UPDATED_BY
					,LAST_UPDATE_DATE
					,LAST_UPDATE_LOGIN)
                VALUES
                                       (
                                         REC_RCN_RSN_INFO.ID
                                        ,REC_RCN_RSN_INFO.CLE_ID
                                        ,REC_RCN_RSN_INFO.DNZ_RGP_ID
                                        ,REC_RCN_RSN_INFO.RCN_INCIDENT_SEVERITY_ID
                                        ,REC_RCN_RSN_INFO.RCN_PDF_ID
                                        ,REC_RCN_RSN_INFO.RCN_WORK_THRU_YN
                                        ,REC_RCN_RSN_INFO.RCN_REACT_ACTIVE_YN
					,2003
                                        ,2003
                                        ,SYSDATE
                                        ,2003
                                        ,SYSDATE
                                        ,2003);


            FOR lang_i IN OKC_UTIL.g_language_code.FIRST..OKC_UTIL.g_language_code.LAST    LOOP
                INSERT INTO OKS_K_LINES_TL(
                                            ID
                                            ,LANGUAGE
                                            ,SOURCE_LANG
                                            ,SFWT_FLAG
                                            ,INVOICE_TEXT
                                            ,IB_TRX_DETAILS
                                            ,STATUS_TEXT
                                            ,REACT_TIME_NAME
                                            ,SECURITY_GROUP_ID
                                            ,CREATED_BY
                                            ,CREATION_DATE
                                            ,LAST_UPDATED_BY
                                            ,LAST_UPDATE_DATE
                                            ,LAST_UPDATE_LOGIN)
                VALUES
                                           (REC_RCN_RSN_INFO.ID
                                           ,OKC_UTIL.g_language_code(lang_i)
                                           ,L_USERENV_LANG
                                           ,'S'
                                           ,NULL
                                           ,NULL
                                           ,NULL
                                           ,REC_RCN_RSN_INFO.RCN_REACT_TIME_NAME
                                           ,NULL
                                           ,2003
                                           ,SYSDATE
                                           ,2003
                                           ,SYSDATE
                                           ,2003);


                    END LOOP;
           END IF;
        END;
    END IF;



END;

BEGIN
    IF REC_RCN_RSN_INFO.RCN_REACT_TIME_NAME IS NOT NULL THEN
                    INSERT INTO oks_action_time_types
                                                            (ID,
                                                            CLE_ID,
                                                            DNZ_CHR_ID,
                                                            ACTION_TYPE_CODE,
                                                            SECURITY_GROUP_ID,
                                                            PROGRAM_APPLICATION_ID,
                                                            PROGRAM_ID,
                                                            PROGRAM_UPDATE_DATE,
                                                            REQUEST_ID,
                                                            CREATED_BY,
                                                            CREATION_DATE,
                                                            LAST_UPDATED_BY,
                                                            LAST_UPDATE_DATE,
                                                            LAST_UPDATE_LOGIN,
                                                            OBJECT_VERSION_NUMBER)
                        VALUES
                                                           (okc_p_util.raw_to_number(sys_guid())
                                                            ,REC_RCN_RSN_INFO.CLE_ID
                                                            ,REC_RCN_RSN_INFO.DNZ_RGP_ID
                                                            ,'RCN',NULL,NULL,NULL,NULL,NULL,
                                                            2003,
                                                            SYSDATE,
                                                            2003,
                                                            sysdate,
                                                            2003,
                                                            2003);

    END IF;

    IF REC_RCN_RSN_INFO.RSN_REACT_TIME_NAME IS NOT NULL THEN
                    INSERT INTO oks_action_time_types
                                                            (ID,
                                                            CLE_ID,
                                                            DNZ_CHR_ID,
                                                            ACTION_TYPE_CODE,
                                                            SECURITY_GROUP_ID,
                                                            PROGRAM_APPLICATION_ID,
                                                            PROGRAM_ID,
                                                            PROGRAM_UPDATE_DATE,
                                                            REQUEST_ID,
                                                            CREATED_BY,
                                                            CREATION_DATE,
                                                            LAST_UPDATED_BY,
                                                            LAST_UPDATE_DATE,
                                                            LAST_UPDATE_LOGIN,
                                                            OBJECT_VERSION_NUMBER)
                        VALUES
                                                           (okc_p_util.raw_to_number(sys_guid())
                                                            ,REC_RCN_RSN_INFO.CLE_ID
                                                            ,REC_RCN_RSN_INFO.DNZ_RGP_ID
                                                            ,'RSN',NULL,NULL,NULL,NULL,NULL,
                                                            2003,
                                                            SYSDATE,
                                                            2003,
                                                            SYSDATE,
                                                            2003,
                                                            2003);

    END IF;

END;


BEGIN

insert into oks_action_times oat (
       id, cov_action_type_id, cle_id, dnz_chr_id, sun_duration,
       mon_duration, tue_duration, wed_duration, thu_duration,
       fri_duration, sat_duration, uom_code, created_by, creation_date,
       last_updated_by, last_update_date, last_update_login,
       security_group_id, program_application_id, program_id,
       program_update_date, request_id, object_version_number)
select   rin.rul_id, att.id, rgp.cle_id, att.dnz_chr_id,
        max(decode(tim.day_of_week, 'SUN', rin.duration)),
        max(decode( tim.day_of_week, 'MON', rin.duration)),
        max(decode( tim.day_of_week, 'TUE', rin.duration)),
        max(decode( tim.day_of_week, 'WED', rin.duration)),
        max(decode( tim.day_of_week, 'THU', rin.duration)),
        max(decode( tim.day_of_week, 'FRI', rin.duration)),
        max(decode( tim.day_of_week, 'SAT', rin.duration)), 'MIN', 2003, sysdate, 2003,
       sysdate, 2003, null, null, null, null, null, 1
  from okc_timevalues_b tim,
       okc_react_intervals rin,
       okc_rules_b rul,
       okc_rule_groups_b rgp,
       oks_action_time_types att
 where att.cle_id = rgp.cle_id
   and rgp.id = rul.rgp_id
   and rul.rule_information_category in ('RCN', 'RSN')
   and rul.id = rin.rul_id
   and rin.tve_id = tim.id
   and rgp.dnz_chr_id = rul.dnz_chr_id
   and rul.dnz_chr_id = att.dnz_chr_id
   and tim.dnz_chr_id = rin.dnz_chr_id
   and tim.dnz_chr_id = rgp.dnz_chr_id
   and tim.dnz_chr_id = rul.dnz_chr_id
   and tim.dnz_chr_id = att.dnz_chr_id
   and rul.rule_information_category = att.action_type_code
   and rgp.dnz_chr_id = l_dnz_chr_id
   and rgp.cle_id = l_cle_id
   and rgp.id = l_rgp_id
 group by rin.rul_id, att.id, rgp.cle_id, att.dnz_chr_id;

END;



X_RETURN_STATUS := 'S';

EXCEPTION
WHEN OTHERS THEN
DBMS_TRANSACTION.ROLLBACK_SAVEPOINT('BEFORE_TRANSACTION');
X_RETURN_STATUS := 'E';
L_ERROR_MSG := SQLERRM;
FND_FILE.PUT_LINE(FND_FILE.LOG ,'DML Failed for'||p_rgp_id||'with Error Message '||L_ERROR_MSG);

END SYNCHRONIZE_RULE_ATM;



Procedure SYNCHRONIZE_RULE_ATMH(P_RGP_ID IN NUMBER,
				P_CLE_ID IN NUMBER,
				P_DNZ_CHR_ID IN NUMBER,
				P_MAJOR_VERSION IN NUMBER,
				X_RETURN_STATUS OUT NOCOPY VARCHAR2) AS

L_RGP_ID  CONSTANT NUMBER  := P_RGP_ID ;
L_CLE_ID  CONSTANT NUMBER := P_CLE_ID ;
L_DNZ_CHR_ID  CONSTANT NUMBER := P_DNZ_CHR_ID ;
L_MAJOR_VERSION  CONSTANT NUMBER := P_MAJOR_VERSION ;
L_ERROR_MSG                   VARCHAR2(2000);
l_check_var     VARCHAR2(1) := NULL;


CURSOR GET_RCN_RSN_INFO (L_RGP_ID IN NUMBER,L_CLE_ID IN NUMBER,L_DNZ_CHR_ID IN NUMBER,L_MAJOR_VERSION IN NUMBER) IS
SELECT
RGP.CLE_ID  ID,
RGP.CLE_ID  CLE_ID,
RGP.DNZ_CHR_ID DNZ_RGP_ID,
MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.OBJECT1_ID1))RCN_INCIDENT_SEVERITY_ID,
MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION1))RCN_PDF_ID,
MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION2))RCN_REACT_TIME_NAME,
MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION3))RCN_WORK_THRU_YN,
MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RCN',RUL.RULE_INFORMATION4))RCN_REACT_ACTIVE_YN,
MAX(decode(RUL.RULE_INFORMATION_CATEGORY,'RSN',RUL.RULE_INFORMATION2))RSN_REACT_TIME_NAME
FROM    OKC_RULE_GROUPS_BH RGP,
        OKC_RULES_BH RUL
WHERE   RGP.ID  = RUL.RGP_ID
AND    RUL.RULE_INFORMATION_CATEGORY IN ('RCN','RSN')
AND    RUL.DNZ_CHR_ID = RGP.DNZ_CHR_ID
AND    RGP.CLE_ID IS NOT NULL
AND RGP.ID  = L_RGP_ID
AND RGP.CLE_ID  = L_CLE_ID
AND RGP.DNZ_CHR_ID  = L_DNZ_CHR_ID
AND RGP.MAJOR_VERSION = RUL.MAJOR_VERSION
AND RGP.MAJOR_VERSION = L_MAJOR_VERSION
GROUP BY RGP.CLE_ID ,RGP.CLE_ID, RGP.DNZ_CHR_ID;


REC_RCN_RSN_INFO GET_RCN_RSN_INFO%ROWTYPE;

Cursor Cur_Klin_exists(p_cleid in number,p_major_version in number) IS
select 'x'
from  oks_k_lines_bh
where cle_id=p_cleid
AND MAJOR_VERSION = p_MAJOR_VERSION;

 L_USERENV_LANG               VARCHAR2(100) := OKC_UTIL.get_userenv_lang ;

l_NOT_FOUND NUMBER := 0;

BEGIN
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'--------------Start of Sub request for LINE RULE RCN/RSN--------------------------');
 FND_FILE.PUT_LINE(FND_FILE.LOG ,'----------------------------------------------------------------------------------');

DBMS_TRANSACTION.SAVEPOINT('BEFORE_TRANSACTION');

DELETE   OKS_ACTION_TIMES_H
WHERE  CLE_ID = L_CLE_ID
AND DNZ_CHR_ID = L_DNZ_CHR_ID
AND MAJOR_VERSION = L_MAJOR_VERSION;

DELETE   OKS_ACTION_TIME_TYPES_H
WHERE   CLE_ID = L_CLE_ID
AND DNZ_CHR_ID = L_DNZ_CHR_ID
AND MAJOR_VERSION = L_MAJOR_VERSION;

BEGIN

	OPEN GET_RCN_RSN_INFO (L_RGP_ID ,L_CLE_ID,L_DNZ_CHR_ID,L_MAJOR_VERSION);
		l_NOT_FOUND := 0;
	FETCH  GET_RCN_RSN_INFO INTO REC_RCN_RSN_INFO;

	IF GET_RCN_RSN_INFO%NOTFOUND THEN
		l_NOT_FOUND := 1;
	END IF;

	CLOSE GET_RCN_RSN_INFO;

	l_check_var:=NULL;

	Open Cur_Klin_exists(L_Cle_ID,L_MAJOR_VERSION);
	Fetch Cur_Klin_exists into l_check_var;
	Close Cur_Klin_exists;


	IF ((l_check_var is NOT NULL) AND (l_NOT_FOUND = 1) ) THEN

		DELETE OKS_K_LINES_TL
		WHERE  ID IN (SELECT ID FROM OKS_K_LINES_B
					WHERE CLE_ID = l_CLE_ID
					AND DNZ_CHR_ID = L_DNZ_CHR_ID);

		DELETE OKS_K_LINES_B
		WHERE CLE_ID = l_CLE_ID
		AND DNZ_CHR_ID = L_DNZ_CHR_ID;

    	ELSIF((l_check_var is NOT NULL) AND (l_NOT_FOUND = 0))  THEN

        --Updating oks_k_lines_b
        BEGIN
            UPDATE OKS_K_LINES_BH SET
            INCIDENT_SEVERITY_ID = REC_RCN_RSN_INFO.RCN_INCIDENT_SEVERITY_ID,
            PDF_ID              = REC_RCN_RSN_INFO.RCN_PDF_ID,
            --REACT_TIME_NAME     = REC_RCN_RSN_INFO.RCN_REACT_TIME_NAME,
            WORK_THRU_YN        =   REC_RCN_RSN_INFO.RCN_WORK_THRU_YN,
            REACT_ACTIVE_YN     = REC_RCN_RSN_INFO.RCN_REACT_ACTIVE_YN
            WHERE CLE_ID = L_CLE_ID
	    AND DNZ_CHR_ID = L_DNZ_CHR_ID
	    AND MAJOR_VERSION = L_MAJOR_VERSION;

            FOR lang_i IN OKC_UTIL.g_language_code.FIRST..OKC_UTIL.g_language_code.LAST    LOOP
                UPDATE  OKS_K_LINES_TLH SET
                        REACT_TIME_NAME     = REC_RCN_RSN_INFO.RCN_REACT_TIME_NAME
                WHERE   id= (SELECT id FROM OKS_K_LINES_BH
				WHERE 	CLE_ID = L_CLE_ID
				AND	DNZ_CHR_ID = L_DNZ_CHR_ID
				AND 	MAJOR_VERSION = L_MAJOR_VERSION)
		AND	MAJOR_VERSION = L_MAJOR_VERSION
                AND     language = OKC_UTIL.g_language_code(lang_i)
                AND     source_lang = L_USERENV_LANG ;
            END LOOP;
        END;
    ELSE
        BEGIN
	  IF (l_check_var is NOT NULL) THEN

            INSERT INTO OKS_K_LINES_BH (
                                        ID
                                        ,CLE_ID
                                        ,DNZ_CHR_ID
                                        ,INCIDENT_SEVERITY_ID
                                        ,PDF_ID
                                        ,WORK_THRU_YN
                                        ,REACT_ACTIVE_YN
					,MAJOR_VERSION
					,OBJECT_VERSION_NUMBER
					,CREATED_BY
					,CREATION_DATE
					,LAST_UPDATED_BY
					,LAST_UPDATE_DATE
					,LAST_UPDATE_LOGIN)
                VALUES
                                       (
                                         REC_RCN_RSN_INFO.ID
                                        ,REC_RCN_RSN_INFO.CLE_ID
                                        ,REC_RCN_RSN_INFO.DNZ_RGP_ID
                                        ,REC_RCN_RSN_INFO.RCN_INCIDENT_SEVERITY_ID
                                        ,REC_RCN_RSN_INFO.RCN_PDF_ID
                                        ,REC_RCN_RSN_INFO.RCN_WORK_THRU_YN
                                        ,REC_RCN_RSN_INFO.RCN_REACT_ACTIVE_YN
					,L_MAJOR_VERSION
					,2003
                                        ,2003
                                        ,SYSDATE
                                        ,2003
                                        ,SYSDATE
                                        ,2003);


            FOR lang_i IN OKC_UTIL.g_language_code.FIRST..OKC_UTIL.g_language_code.LAST    LOOP
                INSERT INTO OKS_K_LINES_TLH(
                                            ID
                                            ,LANGUAGE
                                            ,SOURCE_LANG
                                            ,SFWT_FLAG
                                            ,INVOICE_TEXT
                                            ,IB_TRX_DETAILS
                                            ,STATUS_TEXT
                                            ,REACT_TIME_NAME
                                            ,SECURITY_GROUP_ID
                                            ,CREATED_BY
                                            ,CREATION_DATE
                                            ,LAST_UPDATED_BY
                                            ,LAST_UPDATE_DATE
                                            ,LAST_UPDATE_LOGIN
					    ,MAJOR_VERSION)
                VALUES
                                           (REC_RCN_RSN_INFO.ID
                                           ,OKC_UTIL.g_language_code(lang_i)
                                           ,L_USERENV_LANG
                                           ,'S'
                                           ,NULL
                                           ,NULL
                                           ,NULL
                                           ,REC_RCN_RSN_INFO.RCN_REACT_TIME_NAME
                                           ,NULL
                                           ,2003
                                           ,SYSDATE
                                           ,2003
                                           ,SYSDATE
                                           ,2003
					   ,L_MAJOR_VERSION);


                    END LOOP;
           END IF;
        END;
    END IF;



END;

BEGIN
    IF REC_RCN_RSN_INFO.RCN_REACT_TIME_NAME IS NOT NULL THEN
                    INSERT INTO oks_action_time_types_H
                                                            (ID,
                                                            CLE_ID,
                                                            DNZ_CHR_ID,
                                                            ACTION_TYPE_CODE,
                                                            SECURITY_GROUP_ID,
                                                            PROGRAM_APPLICATION_ID,
                                                            PROGRAM_ID,
                                                            PROGRAM_UPDATE_DATE,
                                                            REQUEST_ID,
                                                            CREATED_BY,
                                                            CREATION_DATE,
                                                            LAST_UPDATED_BY,
                                                            LAST_UPDATE_DATE,
                                                            LAST_UPDATE_LOGIN,
                                                            OBJECT_VERSION_NUMBER,
							    MAJOR_VERSION)
                        VALUES
                                                           (okc_p_util.raw_to_number(sys_guid())
                                                            ,REC_RCN_RSN_INFO.CLE_ID
                                                            ,REC_RCN_RSN_INFO.DNZ_RGP_ID
                                                            ,'RCN',NULL,NULL,NULL,NULL,NULL,
                                                            2003,
                                                            SYSDATE,
                                                            2003,
                                                            sysdate,
                                                            2003,
                                                            1,
							    l_major_version);

    END IF;

    IF REC_RCN_RSN_INFO.RSN_REACT_TIME_NAME IS NOT NULL THEN
                    INSERT INTO oks_action_time_types_H
                                                            (ID,
                                                            CLE_ID,
                                                            DNZ_CHR_ID,
                                                            ACTION_TYPE_CODE,
                                                            SECURITY_GROUP_ID,
                                                            PROGRAM_APPLICATION_ID,
                                                            PROGRAM_ID,
                                                            PROGRAM_UPDATE_DATE,
                                                            REQUEST_ID,
                                                            CREATED_BY,
                                                            CREATION_DATE,
                                                            LAST_UPDATED_BY,
                                                            LAST_UPDATE_DATE,
                                                            LAST_UPDATE_LOGIN,
                                                            OBJECT_VERSION_NUMBER,
							    MAJOR_VERSION)
                        VALUES
                                                           (okc_p_util.raw_to_number(sys_guid())
                                                            ,REC_RCN_RSN_INFO.CLE_ID
                                                            ,REC_RCN_RSN_INFO.DNZ_RGP_ID
                                                            ,'RSN',NULL,NULL,NULL,NULL,NULL,
                                                            2003,
                                                            SYSDATE,
                                                            2003,
                                                            SYSDATE,
                                                            2003,
                                                            1,
							    l_major_version);

    END IF;

END;


BEGIN

insert into oks_action_times_h oat (
       id, cov_action_type_id, cle_id, dnz_chr_id, sun_duration,
       mon_duration, tue_duration, wed_duration, thu_duration,
       fri_duration, sat_duration, uom_code, created_by, creation_date,
       last_updated_by, last_update_date, last_update_login,
       security_group_id, program_application_id, program_id,
       program_update_date, request_id, object_version_number,major_version)
select   rin.rul_id, att.id, rgp.cle_id, att.dnz_chr_id,
	max(decode(tim.day_of_week, 'SUN', rin.duration)),
	max(decode( tim.day_of_week, 'MON', rin.duration)),
	max(decode( tim.day_of_week, 'TUE', rin.duration)),
	max(decode( tim.day_of_week, 'WED', rin.duration)),
	max(decode( tim.day_of_week, 'THU', rin.duration)),
	max(decode( tim.day_of_week, 'FRI', rin.duration)),
	max(decode( tim.day_of_week, 'SAT', rin.duration)), 'MIN', 1, sysdate, 1,
       sysdate, 2003, null, null, null, null, null,1, tim.major_version
  from okc_timevalues_bh tim,
       okc_react_intervals_h rin,
       okc_rules_bh rul,
       okc_rule_groups_bh rgp,
       oks_action_time_types_h att
 where att.cle_id = rgp.cle_id
   and rgp.id = rul.rgp_id
   and rul.rule_information_category in ('RCN', 'RSN')
   and rul.id = rin.rul_id
   and rin.tve_id = tim.id
   and rgp.dnz_chr_id = rul.dnz_chr_id
   and rul.dnz_chr_id = att.dnz_chr_id
   and tim.dnz_chr_id = rin.dnz_chr_id
   and tim.dnz_chr_id = rgp.dnz_chr_id
   and tim.dnz_chr_id = rul.dnz_chr_id
   and tim.dnz_chr_id = att.dnz_chr_id
   and rul.rule_information_category = att.action_type_code
   and rgp.major_Version = att.major_version
   and rgp.major_Version = rul.major_version
   and rul.major_Version = rin.major_version
   and rin.major_Version = tim.major_version
   and rgp.major_version = l_major_version
   and rgp.cle_id = l_cle_id
   and rgp.id = l_rgp_id
   and rgp.dnz_chr_id = l_dnz_chr_id
 group by rin.rul_id, att.id, rgp.cle_id, att.dnz_chr_id,tim.major_version;
END;



X_RETURN_STATUS := 'S';

EXCEPTION
WHEN OTHERS THEN
DBMS_TRANSACTION.ROLLBACK_SAVEPOINT('BEFORE_TRANSACTION');
X_RETURN_STATUS := 'E';
L_ERROR_MSG := SQLERRM;
FND_FILE.PUT_LINE(FND_FILE.LOG ,'DML Failed for'||p_rgp_id||'with Error Message '||L_ERROR_MSG);

END SYNCHRONIZE_RULE_ATMH;

Procedure SYNCHRONIZE_RULE_PML(
		P_RGP_ID IN NUMBER,
		P_CLE_ID IN NUMBER,
		P_DNZ_CHR_ID IN NUMBER,
		X_RETURN_STATUS OUT NOCOPY VARCHAR2) AS

L_RGP_ID  CONSTANT NUMBER  := P_RGP_ID ;
L_CLE_ID  CONSTANT NUMBER := P_CLE_ID ;
L_DNZ_CHR_ID  CONSTANT NUMBER := P_DNZ_CHR_ID ;
L_ERROR_MSG VARCHAR2(2000);

BEGIN

DBMS_TRANSACTION.SAVEPOINT('BEFORE_TRANSACTION');

	DELETE FROM OKS_PM_STREAM_LEVELS
	WHERE CLE_ID = L_CLE_ID
	AND DNZ_CHR_ID = L_DNZ_CHR_ID;

	DELETE FROM OKS_PM_ACTIVITIES
	WHERE CLE_ID = L_CLE_ID
	AND DNZ_CHR_ID = L_DNZ_CHR_ID;



INSERT INTO OKS_PM_ACTIVITIES
(ID,
CLE_ID,
DNZ_CHR_ID,
ACTIVITY_ID,
SELECT_YN,
CONF_REQ_YN,
SCH_EXISTS_YN,
PROGRAM_APPLICATION_ID,
PROGRAM_ID,
PROGRAM_UPDATE_DATE,
OBJECT_VERSION_NUMBER,
SECURITY_GROUP_ID,
REQUEST_ID,
CREATED_BY,
CREATION_DATE,
LAST_UPDATED_BY,
LAST_UPDATE_DATE,
LAST_UPDATE_LOGIN)
SELECT
RUL.ID,
RGP.CLE_ID,
RUL.DNZ_CHR_ID,
RUL.OBJECT1_ID1,
RUL.RULE_INFORMATION1,
RUL.RULE_INFORMATION2,
RUL.RULE_INFORMATION3,
NULL,
NULL,
NULL,
1,
NULL,
NULL,
1,
SYSDATE,
1,
SYSDATE,
2003
FROM    OKC_RULES_B RUL,
        OKC_RULE_GROUPS_B RGP
WHERE   RUL.RGP_ID = RGP.ID
AND     RUL.DNZ_CHR_ID = RGP.DNZ_CHR_ID
AND     RUL.rule_information_category = 'PMA'
AND	RGP.ID = L_RGP_ID
AND 	RGP.DNZ_CHR_ID = L_DNZ_CHR_ID
AND	RGP.CLE_ID = L_CLE_ID;


Insert INTO OKS_PM_STREAM_LEVELS
(ID,
CLE_ID,
DNZ_CHR_ID,
ACTIVITY_LINE_ID,
SEQUENCE_NUMBER,
NUMBER_OF_OCCURENCES,
START_DATE,
END_DATE,
FREQUENCY,
FREQUENCY_UOM,
OFFSET_DURATION,
OFFSET_UOM,
AUTOSCHEDULE_YN,
PROGRAM_APPLICATION_ID,
PROGRAM_ID,
PROGRAM_UPDATE_DATE,
OBJECT_VERSION_NUMBER,
SECURITY_GROUP_ID,
REQUEST_ID,
CREATED_BY,
CREATION_DATE,
LAST_UPDATED_BY,
LAST_UPDATE_DATE,
LAST_UPDATE_LOGIN)
select
PML.ID,
RGP.CLE_ID,
PML.DNZ_CHR_ID,
PML.OBJECT2_ID1,
PML.RULE_INFORMATION1,
PML.RULE_INFORMATION2,
to_date(PML.RULE_INFORMATION3,'YYYY/MM/DD'),
to_date(PML.RULE_INFORMATION4,'YYYY/MM/DD'),
PML.RULE_INFORMATION5,
PML.RULE_INFORMATION6,
PML.RULE_INFORMATION7,
PML.RULE_INFORMATION8,
PML.RULE_INFORMATION9,
NULL,
NULL,
NULL,
1,
NULL,
NULL,
1,
SYSDATE,
1,
SYSDATE,
2003
FROM OKC_RULES_B PMP,
     OKC_RULES_B PML,
     OKC_RULE_GROUPS_B RGP
WHERE   PML.object1_id1 = PMP.ID
AND     RGP.ID = PMP.RGP_ID
AND     RGP.ID = PML.RGP_ID
AND     PMP.DNZ_CHR_ID = PML.DNZ_CHR_ID
AND     PML.rule_information_category =   'PML'
AND     PMP.rule_information_category =   'PMP'
AND	RGP.ID = L_RGP_ID
AND 	RGP.DNZ_CHR_ID = L_DNZ_CHR_ID
AND	RGP.CLE_ID = L_CLE_ID;

update oks_pm_schedules
set activity_line_id=pma_rule_id,stream_line_id=rule_id
where cle_id = l_cle_id
AND DNZ_CHR_ID = L_DNZ_CHR_ID;

X_RETURN_STATUS := 'S';

EXCEPTION
WHEN OTHERS THEN
DBMS_TRANSACTION.ROLLBACK_SAVEPOINT('BEFORE_TRANSACTION');
X_RETURN_STATUS := 'E';
L_ERROR_MSG := SQLERRM;
FND_FILE.PUT_LINE(FND_FILE.LOG ,'DML Failed for'||p_rgp_id||'with Error Message '||L_ERROR_MSG);

END SYNCHRONIZE_RULE_PML;


-----------------------------------------------------------------------------------------
-- This is the Main Procedure called from the concurrent request -                     --
-- "Service Contracts - Reprocess/Synchronize rule data"                               --
-----------------------------------------------------------------------------------------
PROCEDURE SYNCHRONIZE_REPROC_RULE_DATA(
    ERRBUF            OUT  NOCOPY VARCHAR2,
    RETCODE           OUT  NOCOPY NUMBER,
    P_SUB_REQUESTS    IN NUMBER,
    P_BATCH_SIZE      IN NUMBER )
IS

 TYPE L_NUM_TBL IS TABLE OF NUMBER INDEX  BY BINARY_INTEGER ;
 TYPE L_DATE_TBL IS TABLE OF DATE INDEX  BY BINARY_INTEGER ;
 TYPE L_CHR_TBL IS TABLE OF VARCHAR2(2000) INDEX  BY BINARY_INTEGER ;

 CURSOR L_GET_UPGRADE_INFO IS
  SELECT /*+ PARALLEL(RGP) */
         MIN(RGP.RGP_ID) MINID,
         MAX(RGP.RGP_ID) MAXID,
         AVG(RGP.RGP_ID) AVGID,
         STDDEV(RGP.RGP_ID) STDID,
         COUNT(*) TOTAL
    FROM OKS_RULE_UPGRADE RGP;

 L_GET_UPGRADE_INFO_REC L_GET_UPGRADE_INFO%ROWTYPE;

  CURSOR L_GET_REPROCESS_INFO IS
  SELECT /*+ PARALLEL(RGP) */
         MIN(RGP.ID) MINID,
         MAX(RGP.ID) MAXID,
         AVG(RGP.ID) AVGID,
         STDDEV(RGP.ID) STDID,
         COUNT(*) TOTAL
   FROM OKS_RULE_REPROCESS RGP;

--- Code to prep the data in OKS_RULE_UPGRADE  --
 L_LINE_ID    L_NUM_TBL ;
 L_DNZ_CHR_ID L_NUM_TBL ;
 L_CUST_PO_NUMBER L_CHR_TBL;
 L_CUST_PO_NUMBER_REQ_YN L_CHR_TBL;
 L_PRICE_LIST_ID  L_NUM_TBL ;

 CURSOR L_UPGLINE_CSR IS
 SELECT /*+ PARALLEL(UPG) */
        UPG.RGP_ID
      , UPG.DNZ_CHR_ID
      , OKCH.CUST_PO_NUMBER
      , OKCH.CUST_PO_NUMBER_REQ_YN
      , OKCH.PRICE_LIST_ID
   FROM OKS_RULE_UPGRADE UPG
      , OKC_K_HEADERS_B OKCH
  WHERE UPG.RIC_CODE = 'LIN'
    AND NOT EXISTS ( SELECT 1 FROM OKS_K_LINES_B OKS1
                      WHERE OKS1.CLE_ID = UPG.RGP_ID )
    AND OKCH.ID = UPG.DNZ_CHR_ID
 GROUP BY UPG.RGP_ID, UPG.DNZ_CHR_ID, CUST_PO_NUMBER, CUST_PO_NUMBER_REQ_YN, PRICE_LIST_ID ;

 CURSOR L_REPROCESS_CNT_CSR IS
 SELECT /*+ INDEX_FFS( l OKS_RULE_REPROCESS_NU1)  */
        COUNT(*)
   FROM OKS_RULE_REPROCESS l;

 CURSOR L_UPGRADE_CNT_CSR IS
 SELECT /*+ INDEX_FFS( l OKS_RULE_UPGRADE_NU1)  */
         COUNT(*)
   FROM OKS_RULE_UPGRADE l;


 TYPE L_CSR IS REF CURSOR;
 L_UPGRD_CSR     L_CSR ;
 L_REPROC_CSR    L_CSR ;
 L_STMT          VARCHAR2(2000);
 START_ID        NUMBER;
 END_ID          NUMBER;
 I               NUMBER :=0 ;


 L_SUB_REQUESTS    NUMBER;
 L_RET             INTEGER;
 rc                INTEGER;
 trunc_curs        INTEGER;
 l_truncate_string     varchar2(2000);
  L_USERENV_LANG               VARCHAR2(100) := OKC_UTIL.get_userenv_lang ;

  ---------Variables for collecting table stats -----------------
 L_RETURN_CODE          VARCHAR2(100);
 L_ERROR_BUFFER         VARCHAR2(2000);
 IP_SUB_REQUESTS        INTEGER ;
 sync_sub_requests      INTEGER ;
 reproc_sub_requests    INTEGER ;
 l_batch_size           INTEGER ;

 -----------Variables for calculating distribution--------------
 P_BUCKET_VALUE         NUMBER ;
 L_REPROC_CNT           NUMBER ;
 L_UPGRD_CNT            NUMBER ;

 L_GET_REPROCESS_INFO_REC  L_GET_REPROCESS_INFO%ROWTYPE;


BEGIN

  ----------------------------------------------------------------------------------------------------
  ---                  Added the following code to analyze the OKS_RULE_UPGRADE table              ---
  ----------------------------------------------------------------------------------------------------
  FND_STATS.Gather_Table_Stats(OWNNAME =>'OKS',
                               TABNAME =>'OKS_RULE_UPGRADE',
                               PERCENT => 20,
                               RETCODE => l_return_code,
                               ERRBUF  => l_error_buffer);

  ----------------------------------------------------------------------------------------------------

  ----------------------------------------------------------------------------------------------------
  ---                  Added the following code to analyze the OKS_RULE_REPROCESS table            ---
  ----------------------------------------------------------------------------------------------------
  FND_STATS.Gather_Table_Stats(OWNNAME =>'OKS',
                               TABNAME =>'OKS_RULE_REPROCESS',
                               PERCENT => 20,
                               RETCODE => l_return_code,
                               ERRBUF  => l_error_buffer);

  ----------------------------------------------------------------------------------------------------

  -- Code added on July-06-2004 as part of bug#3615375. This is to synchronize Warrant contract Headers
  -- that doesn't have any associated rules.
  INSERT /*+ PARALLEL(OKS1) */ INTO OKS_K_HEADERS_B OKS1
   ( OKS1.ID
    ,OKS1.CHR_ID
    ,OKS1.OBJECT_VERSION_NUMBER
    ,OKS1.CREATED_BY
    ,OKS1.CREATION_DATE
    ,OKS1.LAST_UPDATED_BY
    ,OKS1.LAST_UPDATE_DATE
    ,OKS1.LAST_UPDATE_LOGIN )
  SELECT  /*+ PARALLEL(UPG1) */
     DNZ_CHR_ID
    ,DNZ_CHR_ID
    ,1
    ,1
    ,SYSDATE
    ,1
    ,SYSDATE
    ,2003
   FROM OKS_RULE_UPGRADE UPG1
  WHERE UPG1.RIC_CODE = 'HDR'
    AND NOT EXISTS ( SELECT 1
                       FROM OKC_RULE_GROUPS_B RGP
                          , OKC_RULES_B RULE
                      WHERE RGP.DNZ_CHR_ID = UPG1.DNZ_CHR_ID
                        AND RGP.CHR_ID = UPG1.DNZ_CHR_ID
                        AND RGP.ID     = RULE.RGP_ID )
    AND NOT EXISTS ( SELECT 1 FROM OKS_K_HEADERS_B OKSHI
                      WHERE OKSHI.CHR_ID = UPG1.DNZ_CHR_ID )
  GROUP BY DNZ_CHR_ID;

 DELETE FROM OKS_RULE_UPGRADE
  WHERE RIC_CODE = 'HDR';


 DELETE /*+ PARALLEL(UPG1) */
   FROM OKS_RULE_UPGRADE UPG1
  WHERE UPG1.RIC_CODE = 'LIN'
    AND EXISTS ( SELECT /*+ INDEX_FFS( UPG2 OKS_RULE_UPGRADE_NU2) */ 1 FROM OKS_RULE_UPGRADE UPG2
                  WHERE UPG2.RGP_ID = UPG1.RGP_ID
                    AND UPG2.RIC_CODE = 'ALL' );
 COMMIT;

 DELETE /*+ PARALLEL(UPG1) */
   FROM OKS_RULE_UPGRADE UPG1
  WHERE UPG1.RIC_CODE = 'LIN'
    AND EXISTS ( SELECT 1 FROM OKS_K_LINES_B OKS
                  WHERE OKS.CLE_ID = UPG1.RGP_ID );
 COMMIT;


 DELETE /*+ PARALLEL(UPG1) */
   FROM OKS_RULE_UPGRADE UPG1
  WHERE UPG1.RIC_CODE = 'LIN'
    AND NOT EXISTS ( SELECT 1 FROM OKC_K_LINES_B OKC
                      WHERE OKC.ID = UPG1.RGP_ID );
 COMMIT;


 OPEN  L_UPGLINE_CSR;
 FETCH L_UPGLINE_CSR BULK COLLECT INTO L_LINE_ID ,L_DNZ_CHR_ID,L_CUST_PO_NUMBER, L_CUST_PO_NUMBER_REQ_YN, L_PRICE_LIST_ID;
 CLOSE L_UPGLINE_CSR;

 IF L_LINE_ID.COUNT > 0 THEN
   FORALL I IN L_LINE_ID.FIRST..L_LINE_ID.LAST
   INSERT /*+ PARALLEL(OKS) */ INTO OKS_K_LINES_B OKS
    (ID
    ,CLE_ID
    ,DNZ_CHR_ID
    ,CUST_PO_NUMBER
    ,CUST_PO_NUMBER_REQ_YN
    ,OBJECT_VERSION_NUMBER
    ,CREATED_BY
    ,CREATION_DATE
    ,LAST_UPDATED_BY
    ,LAST_UPDATE_DATE
    ,LAST_UPDATE_LOGIN)
   VALUES(
     L_LINE_ID(I)
    ,L_LINE_ID(I)
    ,L_DNZ_CHR_ID(I)
    ,L_CUST_PO_NUMBER(I)
    ,L_CUST_PO_NUMBER_REQ_YN(I)
    ,1
    ,1
    ,SYSDATE
    ,1
    ,SYSDATE
    ,2003 );

    FOR lang_i IN OKC_UTIL.g_language_code.FIRST..OKC_UTIL.g_language_code.LAST
    LOOP
    FORALL I IN L_LINE_ID.FIRST..L_LINE_ID.LAST
       INSERT INTO OKS_K_LINES_TL (ID
                                  ,LANGUAGE
                                  ,SOURCE_LANG
                                  ,SFWT_FLAG
                                  ,created_by
                                  ,creation_date
                                  ,last_updated_by
                                  ,last_update_date
                                  ,last_update_login)
                           VALUES(
                                   L_LINE_ID(I)
                                  ,OKC_UTIL.g_language_code(lang_i)
                                  ,L_USERENV_LANG
                                  ,'S'
                                  ,1
                                  ,sysdate
                                  ,1
                                  ,sysdate
                                  ,2003);
    END LOOP;

    FORALL I IN L_LINE_ID.FIRST..L_LINE_ID.LAST
    UPDATE OKC_K_LINES_B
       SET PRICE_LIST_ID = L_PRICE_LIST_ID(I)
     WHERE ID = L_LINE_ID(I);

   FORALL I IN L_LINE_ID.FIRST..L_LINE_ID.LAST
   DELETE FROM /*+ PARALLEL(UPG) */ OKS_RULE_UPGRADE UPG
    WHERE RGP_ID = L_LINE_ID(I)
     AND RIC_CODE = 'LIN';
   COMMIT;
  L_LINE_ID.DELETE;
  L_DNZ_CHR_ID.DELETE;
 END IF;

 l_truncate_string := 'TRUNCATE TABLE ' ;
 l_truncate_string := l_truncate_string || 'OKS';
 l_truncate_string := l_truncate_string || '.OKS_RULE_ERROR';

 IF P_SUB_REQUESTS IS NULL OR P_SUB_REQUESTS > 30 OR P_SUB_REQUESTS = 0 then
  ip_sub_requests := 30 ;
 ELSE
  ip_sub_requests := p_sub_requests ;
 END IF;

 IF p_batch_size is null or p_batch_size > 10000 or p_batch_size = 0 then
   l_batch_size := 10000;
 ELSE
   l_batch_size := p_batch_size;
 END IF;

 -------------------------------------------------------------------------------------
 --                       Code for Synchronization phase                            --
 -------------------------------------------------------------------------------------
 IF (FND_CONC_GLOBAL.REQUEST_DATA IS NULL) THEN
    trunc_curs := DBMS_SQL.OPEN_CURSOR;
    DBMS_SQL.PARSE(trunc_curs,l_truncate_string,dbms_sql.native);
    rc := dbms_sql.execute(trunc_curs);
    DBMS_SQL.CLOSE_CURSOR(trunc_curs);

    OPEN L_UPGRADE_CNT_CSR;
    FETCH L_UPGRADE_CNT_CSR INTO L_UPGRD_CNT;
    CLOSE L_UPGRADE_CNT_CSR;

    P_BUCKET_VALUE := CEIL(L_UPGRD_CNT/IP_SUB_REQUESTS);

    IF(P_BUCKET_VALUE = 0) THEN
      P_BUCKET_VALUE := 1;
    END IF;

    L_STMT := 'SELECT MIN(RGP_ID),MAX(RGP_ID)FROM (SELECT /*+  PARALLEL(L) */ RGP_ID ,FLOOR(SUM(COUNT(*)) OVER (ORDER BY RGP_ID ROWS UNBOUNDED PRECEDING)/ :1 ) BUCKET FROM   OKS_RULE_UPGRADE L GROUP BY RGP_ID) GROUP BY BUCKET';

    I:=0;

    OPEN L_UPGRD_CSR FOR L_STMT USING P_BUCKET_VALUE ;
    LOOP
        FETCH L_UPGRD_CSR INTO START_ID,END_ID;
        EXIT WHEN L_UPGRD_CSR%NOTFOUND;
        I:=I+1;
        L_RET := FND_REQUEST.SUBMIT_REQUEST('OKS',
                                 'OKS_SYNCHRONIZE_SUBREQUEST',
                                  TO_CHAR(I), -- UI JOB DISPLAY
                                  NULL,
                                  TRUE, -- TRUE MEANS IS SUBREQUEST
                                  NVL(l_batch_size,10000),
                                  START_ID,
                                  END_ID);

        IF (L_RET = 0) THEN
            ERRBUF := FND_MESSAGE.GET;
            RETCODE := 2;
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'SUB-REQUEST FAILED TO SUBMIT: ' || ERRBUF);
            RETURN;
        ELSE
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'SUB-REQUEST '||TO_CHAR(L_RET)||' SUBMITTED');
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'SUB-REQUEST '||TO_CHAR(L_RET)||' LOW_ID ==>'||START_ID||' HIG_ID ==>'||END_ID);
           END IF;
    END LOOP;
    CLOSE L_UPGRD_CSR;
    IF( I > 0) THEN
      FND_CONC_GLOBAL.SET_REQ_GLOBALS(CONC_STATUS => 'PAUSED',
                                     REQUEST_DATA => TO_CHAR(IP_SUB_REQUESTS));
      ERRBUF := TO_CHAR(I) || ' SUB-REQUESTS SUBMITTED';
      RETCODE := 0;
      RETURN;
    END IF;
  ELSIF ((FND_CONC_GLOBAL.REQUEST_DATA IS NOT NULL) AND (FND_CONC_GLOBAL.REQUEST_DATA <>  'REPROCESS' )) THEN
    COMMIT;
    RETCODE := 0;
 END IF;
 -------------------------------------------------------------------------------------
 --                       Code for Reprocessing phase                               --
 -------------------------------------------------------------------------------------
 IF (FND_CONC_GLOBAL.REQUEST_DATA not in ('REPROCESS') OR FND_CONC_GLOBAL.REQUEST_DATA IS NULL) THEN

    OPEN L_REPROCESS_CNT_CSR;
    FETCH L_REPROCESS_CNT_CSR INTO L_REPROC_CNT;
    CLOSE L_REPROCESS_CNT_CSR;

    P_BUCKET_VALUE := CEIL(L_REPROC_CNT/IP_SUB_REQUESTS);

    IF(P_BUCKET_VALUE = 0) THEN
      P_BUCKET_VALUE := 1;
    END IF;

    L_STMT := 'SELECT MIN(ID),MAX(ID)FROM (SELECT /*+  PARALLEL(L) */ ID,FLOOR(SUM(COUNT(*)) OVER (ORDER BY ID ROWS UNBOUNDED PRECEDING)/:1) BUCKET  FROM   OKS_RULE_REPROCESS L GROUP BY ID )GROUP BY BUCKET';
    I:=0;

    OPEN L_REPROC_CSR FOR L_STMT USING P_BUCKET_VALUE ;
    LOOP
        FETCH L_REPROC_CSR INTO START_ID,END_ID;
        EXIT WHEN L_REPROC_CSR%NOTFOUND;
        I:=I+1;
        L_RET := FND_REQUEST.SUBMIT_REQUEST('OKS',
                                 'OKS_REPROCESS_SUBREQUEST',
                                  TO_CHAR(I), -- UI JOB DISPLAY
                                  NULL,
                                  TRUE, -- TRUE MEANS IS SUBREQUEST
                                  NVL(l_batch_size,10000),
                                  START_ID,
                                  END_ID);


        IF (L_RET = 0) THEN
            ERRBUF := FND_MESSAGE.GET;
            RETCODE := 2;
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'SUB-REQUEST FAILED TO SUBMIT: ' || ERRBUF);
            RETURN;
        ELSE
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'SUB-REQUEST '||TO_CHAR(L_RET)||' SUBMITTED');
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'SUB-REQUEST '||TO_CHAR(L_RET)||' LOW_ID ==>'||START_ID||' HIG_ID ==>'||END_ID);
           END IF;
    END LOOP;

    CLOSE L_REPROC_CSR;
    IF( I > 0) THEN
      FND_CONC_GLOBAL.SET_REQ_GLOBALS(CONC_STATUS => 'PAUSED',
                                   REQUEST_DATA => 'REPROCESS' );
      ERRBUF := TO_CHAR(I) || ' SUB-REQUESTS SUBMITTED';
      RETCODE := 0;
      RETURN;
    END IF;
  ELSIF ((FND_CONC_GLOBAL.REQUEST_DATA IS NOT NULL)) THEN
    COMMIT;
    RETCODE := 0;
   -- RETURN;
 END IF;
/* Commenting out the code as request ...Need to check with Hari if this code is required
 -------------------------------------------------------------------------------------
 --                       Code for processing credit card records                             --
 -------------------------------------------------------------------------------------
 IF (FND_CONC_GLOBAL.REQUEST_DATA <>  'CREDITCARD' OR FND_CONC_GLOBAL.REQUEST_DATA IS NULL) THEN

       l_ret := FND_REQUEST.submit_request('OKS',
                                           'OKSMIGCC',
                                           null, -- UI job display
                                           null,
                                           TRUE, -- TRUE means isSubRequest
                                           20,
                                           5000);

        IF (L_RET = 0) THEN
            ERRBUF := FND_MESSAGE.GET;
            RETCODE := 2;
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'CREDIT CARD SUB-REQUEST FAILED TO SUBMIT: ' || ERRBUF);
            RETURN;
        ELSE
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'SUB-REQUEST '||TO_CHAR(L_RET)||' SUBMITTED');
            FND_FILE.PUT_LINE (FND_FILE.LOG, 'SUB-REQUEST '||TO_CHAR(L_RET)||' LOW_ID ==>'||START_ID||' HIG_ID ==>'||END_ID);

            FND_CONC_GLOBAL.SET_REQ_GLOBALS(CONC_STATUS => 'PAUSED',
                                   REQUEST_DATA => 'CREDITCARD' );
             ERRBUF := TO_CHAR(I) || ' SUB-REQUESTS SUBMITTED';
             RETCODE := 0;
             RETURN;
        END IF;
  ELSIF ((FND_CONC_GLOBAL.REQUEST_DATA IS NOT NULL)) THEN
    COMMIT;
    RETCODE := 0;
    RETURN;

 END IF;

End of commenting*/

END SYNCHRONIZE_REPROC_RULE_DATA;

END OKS_RULE_MIGRATE;

/
