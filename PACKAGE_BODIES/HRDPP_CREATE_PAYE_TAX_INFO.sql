--------------------------------------------------------
--  DDL for Package Body HRDPP_CREATE_PAYE_TAX_INFO
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."HRDPP_CREATE_PAYE_TAX_INFO" as
/*
 * Generated by hr_pump_meta_mapper at: 2013/08/29 22:08:55
 * Generated for API: HR_AU_TAX_API.CREATE_PAYE_TAX_INFO
 */
--
dh constant date := hr_api.g_date;
nh constant number := hr_api.g_number;
vh constant varchar2(64) := hr_api.g_varchar2;
c_sot constant date := to_date('01010001','DDMMYYYY');
cn constant varchar2(32) := '<NULL>';
dn constant date := null;
nn constant number := null;
vn constant varchar2(1) := null;
--
function dc(p in date) return varchar2 is
begin
if p<c_sot then
 if p<>trunc(p) then
  return to_char(p,'SYYYY/MM/DD HH24:MI:SS');
 end if;
 return to_char(p,'SYYYY/MM/DD');
elsif p<>trunc(p) then
 return to_char(p,'YYYY/MM/DD HH24:MI:SS');
end if;
return to_char(p,'YYYY/MM/DD');
end dc;
function d(p in varchar2) return date is
begin
if length(p)=10 then
return to_date(p,'YYYY/MM/DD');
elsif length(p)=19 then
return to_date(p,'YYYY/MM/DD HH24:MI:SS');
elsif length(p)=11 then
return to_date(p,'SYYYY/MM/DD');
elsif length(p)=20 then
return to_date(p,'SYYYY/MM/DD HH24:MI:SS');
end if;
-- Try default format as last resort.
return to_date(p,'YYYY/MM/DD');
end d;
function n(p in varchar2) return number is
begin
return to_number(p);
end n;
function dd(p in date,i in varchar2)
return varchar2 is
begin
if upper(i) = 'N' then return dc(p);
else return cn; end if;
end dd;
function nd(p in number,i in varchar2)
return varchar2 is
begin
if upper(i) = 'N' then return to_char(p);
else return cn; end if;
end nd;
--
procedure iuk
(p_batch_line_id  in number,
p_user_key_value in varchar2,
p_unique_key_id  in number)
is
begin
hr_data_pump.entry('ins_user_key');
insert into hr_pump_batch_line_user_keys
(user_key_id, batch_line_id,user_key_value,unique_key_id)
values
(hr_pump_batch_line_user_keys_s.nextval,
p_batch_line_id,
p_user_key_value,
p_unique_key_id);
hr_data_pump.exit('ins_user_key');
end iuk;
--
procedure insert_batch_lines
(p_batch_id      in number
,p_data_pump_batch_line_id in number default null
,p_data_pump_business_grp_name in varchar2 default null
,p_user_sequence in number default null
,p_link_value    in number default null
,P_EFFECTIVE_DATE in date
,P_ENTRY_TYPE in varchar2
,P_REASON in varchar2 default null
,P_SUBPRIORITY in number default null
,P_DATE_EARNED in date default null
,P_ATTRIBUTE_CATEGORY in varchar2 default null
,P_ATTRIBUTE1 in varchar2 default null
,P_ATTRIBUTE2 in varchar2 default null
,P_ATTRIBUTE3 in varchar2 default null
,P_ATTRIBUTE4 in varchar2 default null
,P_ATTRIBUTE5 in varchar2 default null
,P_ATTRIBUTE6 in varchar2 default null
,P_ATTRIBUTE7 in varchar2 default null
,P_ATTRIBUTE8 in varchar2 default null
,P_ATTRIBUTE9 in varchar2 default null
,P_ATTRIBUTE10 in varchar2 default null
,P_ATTRIBUTE11 in varchar2 default null
,P_ATTRIBUTE12 in varchar2 default null
,P_ATTRIBUTE13 in varchar2 default null
,P_ATTRIBUTE14 in varchar2 default null
,P_ATTRIBUTE15 in varchar2 default null
,P_ATTRIBUTE16 in varchar2 default null
,P_ATTRIBUTE17 in varchar2 default null
,P_ATTRIBUTE18 in varchar2 default null
,P_ATTRIBUTE19 in varchar2 default null
,P_ATTRIBUTE20 in varchar2 default null
,P_AUSTRALIAN_RESIDENT_FLAG in varchar2
,P_TAX_FREE_THRESHOLD_FLAG in varchar2
,P_REBATE_AMOUNT in number default null
,P_FTA_CLAIM_FLAG in varchar2
,P_SAVINGS_REBATE_FLAG in varchar2
,P_HECS_SFSS_FLAG in varchar2
,P_DECLARATION_SIGNED_DATE in varchar2
,P_MEDICARE_LEVY_VARIATION_CODE in varchar2
,P_SPOUSE_MLS_FLAG in varchar2
,P_DEPENDENT_CHILDREN in varchar2 default null
,P_TAX_VARIATION_TYPE in varchar2
,P_TAX_VARIATION_AMOUNT in number default null
,P_TAX_FILE_NUMBER in varchar2
,P_ORIGINAL_ENTRY_USER_KEY in varchar2 default null
,P_ASSIGNMENT_USER_KEY in varchar2
,P_COST_ALLOC_KEYFLEX_USER_KEY in varchar2 default null
,P_UPDATING_ACTION_USER_KEY in varchar2 default null
,P_COMMENT_USER_KEY in varchar2 default null
,P_TARGET_ENTRY_USER_KEY in varchar2 default null) is
blid number := p_data_pump_batch_line_id;
begin
if blid is not null then
delete from hr_pump_batch_lines where batch_line_id = blid;
delete from hr_pump_batch_exceptions
where source_type = 'BATCH_LINE' and source_id = blid;
end if;
insert into hr_pump_batch_lines
(batch_id
,batch_line_id
,business_group_name
,api_module_id
,line_status
,user_sequence
,link_value
,pval001
,pval002
,pval003
,pval004
,pval005
,pval006
,pval007
,pval008
,pval009
,pval010
,pval011
,pval012
,pval013
,pval014
,pval015
,pval016
,pval017
,pval018
,pval019
,pval020
,pval021
,pval022
,pval023
,pval024
,pval025
,pval026
,pval027
,pval028
,pval029
,pval030
,pval031
,pval032
,pval033
,pval034
,pval035
,pval036
,pval037
,pval038
,pval039
,pval045
,pval046
,pval047
,pval048
,pval049
,pval050)
values
(p_batch_id
,nvl(blid,hr_pump_batch_lines_s.nextval)
,p_data_pump_business_grp_name
,2169
,'U'
,p_user_sequence
,p_link_value
,dc(P_EFFECTIVE_DATE)
,P_ENTRY_TYPE
,P_REASON
,P_SUBPRIORITY
,dc(P_DATE_EARNED)
,P_ATTRIBUTE_CATEGORY
,P_ATTRIBUTE1
,P_ATTRIBUTE2
,P_ATTRIBUTE3
,P_ATTRIBUTE4
,P_ATTRIBUTE5
,P_ATTRIBUTE6
,P_ATTRIBUTE7
,P_ATTRIBUTE8
,P_ATTRIBUTE9
,P_ATTRIBUTE10
,P_ATTRIBUTE11
,P_ATTRIBUTE12
,P_ATTRIBUTE13
,P_ATTRIBUTE14
,P_ATTRIBUTE15
,P_ATTRIBUTE16
,P_ATTRIBUTE17
,P_ATTRIBUTE18
,P_ATTRIBUTE19
,P_ATTRIBUTE20
,P_AUSTRALIAN_RESIDENT_FLAG
,P_TAX_FREE_THRESHOLD_FLAG
,P_REBATE_AMOUNT
,P_FTA_CLAIM_FLAG
,P_SAVINGS_REBATE_FLAG
,P_HECS_SFSS_FLAG
,P_DECLARATION_SIGNED_DATE
,P_MEDICARE_LEVY_VARIATION_CODE
,P_SPOUSE_MLS_FLAG
,P_DEPENDENT_CHILDREN
,P_TAX_VARIATION_TYPE
,P_TAX_VARIATION_AMOUNT
,P_TAX_FILE_NUMBER
,P_ORIGINAL_ENTRY_USER_KEY
,P_ASSIGNMENT_USER_KEY
,P_COST_ALLOC_KEYFLEX_USER_KEY
,P_UPDATING_ACTION_USER_KEY
,P_COMMENT_USER_KEY
,P_TARGET_ENTRY_USER_KEY);
end insert_batch_lines;
--
procedure call
(p_business_group_id in number,
p_batch_line_id     in number) is
cursor cr is
select l.rowid myrowid,
decode(l.pval001,cn,dn,d(l.pval001)) p1,
decode(l.pval002,cn,vn,l.pval002) p2,
decode(l.pval003,cn,vn,vn,vn,l.pval003) p3,
l.pval003 d3,
decode(l.pval004,cn,nn,vn,nn,n(l.pval004)) p4,
l.pval004 d4,
decode(l.pval005,cn,dn,vn,dn,d(l.pval005)) p5,
l.pval005 d5,
decode(l.pval006,cn,vn,vn,vn,l.pval006) p6,
l.pval006 d6,
decode(l.pval007,cn,vn,vn,vn,l.pval007) p7,
l.pval007 d7,
decode(l.pval008,cn,vn,vn,vn,l.pval008) p8,
l.pval008 d8,
decode(l.pval009,cn,vn,vn,vn,l.pval009) p9,
l.pval009 d9,
decode(l.pval010,cn,vn,vn,vn,l.pval010) p10,
l.pval010 d10,
decode(l.pval011,cn,vn,vn,vn,l.pval011) p11,
l.pval011 d11,
decode(l.pval012,cn,vn,vn,vn,l.pval012) p12,
l.pval012 d12,
decode(l.pval013,cn,vn,vn,vn,l.pval013) p13,
l.pval013 d13,
decode(l.pval014,cn,vn,vn,vn,l.pval014) p14,
l.pval014 d14,
decode(l.pval015,cn,vn,vn,vn,l.pval015) p15,
l.pval015 d15,
decode(l.pval016,cn,vn,vn,vn,l.pval016) p16,
l.pval016 d16,
decode(l.pval017,cn,vn,vn,vn,l.pval017) p17,
l.pval017 d17,
decode(l.pval018,cn,vn,vn,vn,l.pval018) p18,
l.pval018 d18,
decode(l.pval019,cn,vn,vn,vn,l.pval019) p19,
l.pval019 d19,
decode(l.pval020,cn,vn,vn,vn,l.pval020) p20,
l.pval020 d20,
decode(l.pval021,cn,vn,vn,vn,l.pval021) p21,
l.pval021 d21,
decode(l.pval022,cn,vn,vn,vn,l.pval022) p22,
l.pval022 d22,
decode(l.pval023,cn,vn,vn,vn,l.pval023) p23,
l.pval023 d23,
decode(l.pval024,cn,vn,vn,vn,l.pval024) p24,
l.pval024 d24,
decode(l.pval025,cn,vn,vn,vn,l.pval025) p25,
l.pval025 d25,
decode(l.pval026,cn,vn,vn,vn,l.pval026) p26,
l.pval026 d26,
decode(l.pval027,cn,vn,
 hr_pump_get.gl(l.pval027,'AU_AUST_RES_SENR_AUS',d(l.pval001),vn)) p27,
decode(l.pval028,cn,vn,
 hr_pump_get.gl(l.pval028,'YES_NO',d(l.pval001),vn)) p28,
decode(l.pval029,cn,nn,vn,nn,n(l.pval029)) p29,
l.pval029 d29,
decode(l.pval030,cn,vn,
 hr_pump_get.gl(l.pval030,'HR_AU_FTA_PAYMENT_BASIS',d(l.pval001),vn)) p30,
decode(l.pval031,cn,vn,
 hr_pump_get.gl(l.pval031,'YES_NO',d(l.pval001),vn)) p31,
decode(l.pval032,cn,vn,
 hr_pump_get.gl(l.pval032,'AU_HECS_SFSS',d(l.pval001),vn)) p32,
decode(l.pval033,cn,vn,l.pval033) p33,
decode(l.pval034,cn,vn,
 hr_pump_get.gl(l.pval034,'AU_MED_LEV_VAR',d(l.pval001),vn)) p34,
decode(l.pval035,cn,vn,
 hr_pump_get.gl(l.pval035,'AU_SPOUSE_MLS',d(l.pval001),vn)) p35,
decode(l.pval036,cn,vn,vn,vn,l.pval036) p36,
l.pval036 d36,
decode(l.pval037,cn,vn,l.pval037) p37,
decode(l.pval038,cn,nn,vn,nn,n(l.pval038)) p38,
l.pval038 d38,
decode(l.pval039,cn,vn,l.pval039) p39,
decode(l.pval040,cn,dn,d(l.pval040)) p40,
decode(l.pval041,cn,dn,d(l.pval041)) p41,
l.pval042 p42,
l.pval043 p43,
l.pval044 p44,
decode(l.pval045,cn,vn,vn,vn,l.pval045) p45,
l.pval045 d45,
decode(l.pval046,cn,vn,l.pval046) p46,
decode(l.pval047,cn,vn,vn,vn,l.pval047) p47,
l.pval047 d47,
decode(l.pval048,cn,vn,vn,vn,l.pval048) p48,
l.pval048 d48,
decode(l.pval049,cn,vn,vn,vn,l.pval049) p49,
l.pval049 d49,
decode(l.pval050,cn,vn,vn,vn,l.pval050) p50,
l.pval050 d50
from hr_pump_batch_lines l
where l.batch_line_id = p_batch_line_id;
--
c cr%rowtype;
l_validate boolean := false;
L_CREATE_WARNING boolean;
L_ORIGINAL_ENTRY_ID number;
L_ASSIGNMENT_ID number;
L_COST_ALLOCATION_KEYFLEX_ID number;
L_UPDATING_ACTION_ID number;
L_COMMENT_ID number;
L_TARGET_ENTRY_ID number;
--
begin
hr_data_pump.entry('call');
open cr;
fetch cr into c;
if cr%notfound then
hr_utility.set_message(800,'HR_50326_DP_NO_ROW');
hr_utility.set_message_token('TABLE','HR_PUMP_BATCH_LINES');
hr_utility.set_message_token('COLUMN','P_BATCH_LINE_ID');
hr_utility.set_message_token('VALUE',p_batch_line_id);
hr_utility.raise_error;
end if;
--
if c.p45 is null then
L_ORIGINAL_ENTRY_ID:=nn;
else
L_ORIGINAL_ENTRY_ID := 
hr_pump_get.get_original_entry_id
(P_ORIGINAL_ENTRY_USER_KEY => c.p45);
end if;
--
if c.p46 is null then
L_ASSIGNMENT_ID:=nn;
else
L_ASSIGNMENT_ID := 
hr_pump_get.get_assignment_id
(P_ASSIGNMENT_USER_KEY => c.p46);
end if;
--
if c.p47 is null then
L_COST_ALLOCATION_KEYFLEX_ID:=nn;
else
L_COST_ALLOCATION_KEYFLEX_ID := 
hr_pump_get.get_cost_allocation_keyflex_id
(P_COST_ALLOC_KEYFLEX_USER_KEY => c.p47);
end if;
--
if c.p48 is null then
L_UPDATING_ACTION_ID:=nn;
else
L_UPDATING_ACTION_ID := 
hr_pump_get.get_updating_action_id
(P_UPDATING_ACTION_USER_KEY => c.p48);
end if;
--
if c.p49 is null then
L_COMMENT_ID:=nn;
else
L_COMMENT_ID := 
hr_pump_get.get_comment_id
(P_COMMENT_USER_KEY => c.p49);
end if;
--
if c.p50 is null then
L_TARGET_ENTRY_ID:=nn;
else
L_TARGET_ENTRY_ID := 
hr_pump_get.get_target_entry_id
(P_TARGET_ENTRY_USER_KEY => c.p50);
end if;
--
hr_data_pump.api_trc_on;
HR_AU_TAX_API.CREATE_PAYE_TAX_INFO
(p_validate => l_validate
,P_EFFECTIVE_DATE => c.p1
,p_business_group_id => p_business_group_id
,P_ORIGINAL_ENTRY_ID => L_ORIGINAL_ENTRY_ID
,P_ASSIGNMENT_ID => L_ASSIGNMENT_ID
,P_ENTRY_TYPE => c.p2
,P_COST_ALLOCATION_KEYFLEX_ID => L_COST_ALLOCATION_KEYFLEX_ID
,P_UPDATING_ACTION_ID => L_UPDATING_ACTION_ID
,P_COMMENT_ID => L_COMMENT_ID
,P_REASON => c.p3
,P_TARGET_ENTRY_ID => L_TARGET_ENTRY_ID
,P_SUBPRIORITY => c.p4
,P_DATE_EARNED => c.p5
,P_ATTRIBUTE_CATEGORY => c.p6
,P_ATTRIBUTE1 => c.p7
,P_ATTRIBUTE2 => c.p8
,P_ATTRIBUTE3 => c.p9
,P_ATTRIBUTE4 => c.p10
,P_ATTRIBUTE5 => c.p11
,P_ATTRIBUTE6 => c.p12
,P_ATTRIBUTE7 => c.p13
,P_ATTRIBUTE8 => c.p14
,P_ATTRIBUTE9 => c.p15
,P_ATTRIBUTE10 => c.p16
,P_ATTRIBUTE11 => c.p17
,P_ATTRIBUTE12 => c.p18
,P_ATTRIBUTE13 => c.p19
,P_ATTRIBUTE14 => c.p20
,P_ATTRIBUTE15 => c.p21
,P_ATTRIBUTE16 => c.p22
,P_ATTRIBUTE17 => c.p23
,P_ATTRIBUTE18 => c.p24
,P_ATTRIBUTE19 => c.p25
,P_ATTRIBUTE20 => c.p26
,P_AUSTRALIAN_RESIDENT_FLAG => c.p27
,P_TAX_FREE_THRESHOLD_FLAG => c.p28
,P_REBATE_AMOUNT => c.p29
,P_FTA_CLAIM_FLAG => c.p30
,P_SAVINGS_REBATE_FLAG => c.p31
,P_HECS_SFSS_FLAG => c.p32
,P_DECLARATION_SIGNED_DATE => c.p33
,P_MEDICARE_LEVY_VARIATION_CODE => c.p34
,P_SPOUSE_MLS_FLAG => c.p35
,P_DEPENDENT_CHILDREN => c.p36
,P_TAX_VARIATION_TYPE => c.p37
,P_TAX_VARIATION_AMOUNT => c.p38
,P_TAX_FILE_NUMBER => c.p39
,P_EFFECTIVE_START_DATE => c.p40
,P_EFFECTIVE_END_DATE => c.p41
,P_ELEMENT_ENTRY_ID => c.p42
,P_OBJECT_VERSION_NUMBER => c.p43
,P_CREATE_WARNING => L_CREATE_WARNING);
hr_data_pump.api_trc_off;
--
if L_CREATE_WARNING then
c.p44 := 'TRUE';
else
c.p44 := 'FALSE';
end if;
--
update hr_pump_batch_lines l set
l.pval040 = decode(c.p40,null,cn,dc(c.p40)),
l.pval041 = decode(c.p41,null,cn,dc(c.p41)),
l.pval042 = decode(c.p42,null,cn,c.p42),
l.pval043 = decode(c.p43,null,cn,c.p43),
l.pval044 = decode(c.p44,null,cn,c.p44)
where l.rowid = c.myrowid;
--
close cr;
--
hr_data_pump.exit('call');
exception
 when hr_multi_message.error_message_exist then
   if cr%isopen then
    close cr;
   end if;
   hr_pump_utils.set_multi_msg_error_flag(true);
 when others then
 if cr%isopen then
  close cr;
 end if;
 raise;
end call;
end hrdpp_CREATE_PAYE_TAX_INFO;

/
