--------------------------------------------------------
--  DDL for Package Body PER_PERUSEOC_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PER_PERUSEOC_XMLP_PKG" AS
/* $Header: PERUSEOCB.pls 120.3 2008/03/25 06:36:14 vjaganat noship $ */
  --G_FILE_TYPE TEXT_IO.FILE_TYPE;

  G_IL_FEIN VARCHAR2(10);

  G_FILE_NAME VARCHAR2(30);

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    L_BUFFER VARCHAR2(400);
    G_DELIMITER VARCHAR2(1) := ',';
    G_EOL VARCHAR2(1) := FND_GLOBAL.LOCAL_CHR(10);
    temp boolean;
  BEGIN

    --HR_STANDARD.EVENT('BEFORE REPORT');
    CP_PREV_YEAR_FILED := TO_CHAR(TO_NUMBER(P_REPORT_YEAR - 1));
    /*SRW.MESSAGE('35'
               ,'previous year ' || CP_PREV_YEAR_FILED)*/NULL;
    P_PAYROLL_PERIOD_DATE_START_T := FND_DATE.CANONICAL_TO_DATE(P_PAYROLL_PERIOD_DATE_START);
    P_PAYROLL_PERIOD_DATE_END_T := FND_DATE.CANONICAL_TO_DATE(P_PAYROLL_PERIOD_DATE_END);
     temp := P_REPORT_YEARVALIDTRIGGER;
    C_PAYROLL_PERIOD_DATE_START := P_PAYROLL_PERIOD_DATE_START_T;
    C_PAYROLL_PERIOD_DATE_END := P_PAYROLL_PERIOD_DATE_END_T;
    C_BUSINESS_GROUP_NAME := GET_BUSINESS_GROUP(P_BUSINESS_GROUP_ID);
    C_REPORT_MODE := P_REPORT_MODE;
    SELECT
      PGH.NAME,
      PGV.VERSION_NUMBER,
      PGN.ENTITY_ID,
      PGN.HIERARCHY_NODE_ID
    INTO C_HIERARCHY_NAME,C_HIERARCHY_VERSION_NUM,C_PARENT_ORG_ID,C_PARENT_NODE_ID
    FROM
      PER_GEN_HIERARCHY PGH,
      PER_GEN_HIERARCHY_VERSIONS PGV,
      PER_GEN_HIERARCHY_NODES PGN
    WHERE PGH.HIERARCHY_ID = P_HIERARCHY_ID
      AND PGH.HIERARCHY_ID = PGV.HIERARCHY_ID
      AND PGV.HIERARCHY_VERSION_ID = P_HIERARCHY_VERSION_ID
      AND PGN.HIERARCHY_VERSION_ID = PGV.HIERARCHY_VERSION_ID
      AND PGN.NODE_TYPE = 'PAR';
    /*SRW.MESSAGE('36'
               ,'c_hierarchy_name ' || C_HIERARCHY_NAME)*/NULL;
    /*SRW.MESSAGE('37'
               ,'c_hierarchy_version_num ' || C_HIERARCHY_VERSION_NUM)*/NULL;
    /*SRW.MESSAGE('38'
               ,'c_parent_org_id ' || C_PARENT_ORG_ID)*/NULL;
    /*SRW.MESSAGE('39'
               ,'c_parent_node_id ' || C_PARENT_NODE_ID)*/NULL;
    SELECT
      COUNT(PGHN.HIERARCHY_NODE_ID)
    INTO C_NO_OF_ESTABLISHMENTS
    FROM
      PER_GEN_HIERARCHY_NODES PGHN
    WHERE PGHN.HIERARCHY_VERSION_ID = P_HIERARCHY_VERSION_ID
      AND PGHN.NODE_TYPE = 'EST';
    /*SRW.MESSAGE('40'
               ,'p_audit_report : ' || P_AUDIT_REPORT)*/NULL;
    IF P_AUDIT_REPORT = 'Y' THEN
    --OPEN;
      L_BUFFER := 'Person Id' || G_DELIMITER || 'Last Name' || G_DELIMITER || 'First Name'
      || G_DELIMITER || 'Employee Number' || G_DELIMITER || 'Gender' || G_DELIMITER ||
      'Ethnic Origin' || G_DELIMITER || 'Assignment Id' || G_DELIMITER || 'Job Id' ||
      G_DELIMITER || 'Job Name' || G_DELIMITER || 'Location Id' || G_DELIMITER || 'Location Code'
      || G_DELIMITER || G_EOL;
     -- PUT(L_BUFFER);
     FND_FILE.PUT_LINE(FND_FILE.LOG,L_BUFFER);
      NULL;
    END IF;
    RETURN TRUE;
  END BEFOREREPORT;

  FUNCTION P_REPORT_YEARVALIDTRIGGER RETURN BOOLEAN IS
  C_DATE_FORMAT varchar2(25):='DD-MON-YY';
  BEGIN
    IF P_PAYROLL_PERIOD_DATE_END_T IS NOT NULL THEN
      P_REPORT_YEAR := TO_CHAR(to_date(P_PAYROLL_PERIOD_DATE_END_T,C_DATE_FORMAT),'RRRR');
    ELSE
      P_REPORT_YEAR := TO_CHAR(SYSDATE
                              ,'RRRR');
    END IF;
    RETURN (TRUE);
  END P_REPORT_YEARVALIDTRIGGER;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    --HR_STANDARD.EVENT('AFTER REPORT');
    IF P_AUDIT_REPORT = 'Y' THEN
     -- CLOSE;
     NULL;
    END IF;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION CF_SET_DEFAULTSFORMULA RETURN NUMBER IS
  BEGIN
    C_DEF_SIC := '';
    C_DEF_NAICS := '';
    C_DEF_GRE := '';
    C_DEF_DUNS := '';
    C_DEF_GOV_CON := '';
    C_DEF_APPRENT := '';
    C_DEF_ACTIV_1 := '';
    C_DEF_ACTIV_2 := '';
    C_DEF_ACTIV_3 := '';
    C_DEF_ACTIV_4 := '';
    RETURN NULL;
  END CF_SET_DEFAULTSFORMULA;

  FUNCTION C_TOT_EMPSFORMULA RETURN NUMBER IS
  BEGIN
    C_100_EMPS := '';
    RETURN 0;
  END C_TOT_EMPSFORMULA;

  FUNCTION CF_SET_EST_ACTIVFORMULA RETURN NUMBER IS
  BEGIN
    C_EST_ACTIV_1 := '';
    C_EST_ACTIV_2 := '';
    C_EST_ACTIV_3 := '';
    C_EST_ACTIV_4 := '';
    RETURN NULL;
  END CF_SET_EST_ACTIVFORMULA;

  FUNCTION C_TOT_CATFORMULA(C_TOT_HLMALE IN NUMBER
                           ,C_TOT_HLFEMALE IN NUMBER
                           ,C_TOT_TMRACESMALE IN NUMBER
                           ,C_TOT_TMRACESFEMALE IN NUMBER
                           ,C_TOT_WMALE IN NUMBER
                           ,C_TOT_BMALE IN NUMBER
                           ,C_TOT_HMALE IN NUMBER
                           ,C_TOT_AMALE IN NUMBER
                           ,C_TOT_IMALE IN NUMBER
                           ,C_TOT_WFEMALE IN NUMBER
                           ,C_TOT_BFEMALE IN NUMBER
                           ,C_TOT_HFEMALE IN NUMBER
                           ,C_TOT_AFEMALE IN NUMBER
                           ,C_TOT_IFEMALE IN NUMBER) RETURN NUMBER IS
    L_TOT_CAT NUMBER(10);
  BEGIN
    L_TOT_CAT := C_TOT_HLMALE + C_TOT_HLFEMALE + C_TOT_TMRACESMALE + C_TOT_TMRACESFEMALE +
    C_TOT_WMALE + C_TOT_BMALE + C_TOT_HMALE + C_TOT_AMALE + C_TOT_IMALE + C_TOT_WFEMALE +
    C_TOT_BFEMALE + C_TOT_HFEMALE + C_TOT_AFEMALE + C_TOT_IFEMALE;
    RETURN (L_TOT_CAT);
  END C_TOT_CATFORMULA;

  FUNCTION CF_SET_REPFORMULA RETURN NUMBER IS
  BEGIN
    C_REPORT_TYPE := 'Consolidated Report - Type 2';
    C_REPORT_YEAR := P_REPORT_YEAR;
    RETURN NULL;
  END CF_SET_REPFORMULA;

  FUNCTION CF_CREATEUPD_ARCHEITFORMULA(C_TOT_CAT IN NUMBER
                                      ,C_TOT_WMALE IN NUMBER
                                      ,C_TOT_BMALE IN NUMBER
                                      ,C_TOT_HMALE IN NUMBER
                                      ,C_TOT_AMALE IN NUMBER
                                      ,C_TOT_IMALE IN NUMBER
                                      ,C_TOT_WFEMALE IN NUMBER
                                      ,C_TOT_BFEMALE IN NUMBER
                                      ,C_TOT_HFEMALE IN NUMBER
                                      ,C_TOT_AFEMALE IN NUMBER
                                      ,C_TOT_IFEMALE IN NUMBER
                                      ,C_TOT_HLMALE IN NUMBER
                                      ,C_TOT_HLFEMALE IN NUMBER
                                      ,C_TOT_TMRACESMALE IN NUMBER
                                      ,C_TOT_TMRACESFEMALE IN NUMBER) RETURN NUMBER IS
    P_UPDATE VARCHAR2(1) := 'C';
    L_EFFECTIVE_DATE DATE := SYSDATE;
    L_ORG_INFORMATION_ID NUMBER := NULL;
    L_OBJECT_VERSION_NUMBER NUMBER := NULL;
    L_ORGANIZATION_ID NUMBER(15,0);
    L_LOCATION_CODE VARCHAR2(20);
    L_LOCATION_EXTRA_INFO_ID NUMBER := NULL;
    L_EIT_COUNT NUMBER := 0;
    L_MIN_YEAR VARCHAR2(4) := NULL;
  BEGIN
    IF P_REPORT_MODE = 'F' THEN
      BEGIN
        SELECT
          'U',
          ORG_INFORMATION_ID
        INTO P_UPDATE,L_ORG_INFORMATION_ID
        FROM
          HR_ORGANIZATION_INFORMATION
        WHERE ORG_INFORMATION1 = P_REPORT_YEAR
          AND ORG_INFORMATION_CONTEXT = 'EEO_Archive';
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          P_UPDATE := 'C';
          /*SRW.MESSAGE('20'
                     ,'                      ')*/NULL;
          /*SRW.MESSAGE('20'
                     ,'need to create new eit')*/NULL;
          /*SRW.MESSAGE('20'
                     ,'                      ')*/NULL;
          /*SRW.MESSAGE('9999'
                     ,'IMPORTANT.  IF YOU FILED LAST YEAR BUT LAST YEARS DATES')*/NULL;
          /*SRW.MESSAGE('9999'
                     ,'ARE NOT BEING PRINTED, PLEASE EITHER MANUALLY ENTER DATA')*/NULL;
          /*SRW.MESSAGE('9999'
                     ,'IN THE ORGANIZATION EIT, OR RE-RUN THIS REPORT IN FINAL ')*/NULL;
          /*SRW.MESSAGE('9999'
                     ,'MODE FOR LAST YEARS DATES. ')*/NULL;
          /*SRW.MESSAGE('20'
                     ,'                      ')*/NULL;
        WHEN OTHERS THEN
          NULL;
      END;
      IF P_UPDATE = 'U' THEN
        /*SRW.MESSAGE('21'
                   ,'p_update ' || P_UPDATE || ' org_id to update is ' || C_PARENT_ORG_ID)*/NULL;
        /*SRW.MESSAGE('22'
                   ,' org_information_id to delete for update is ' || L_ORG_INFORMATION_ID)*/NULL;
        BEGIN
          SELECT
            OBJECT_VERSION_NUMBER
          INTO L_OBJECT_VERSION_NUMBER
          FROM
            HR_ORGANIZATION_INFORMATION
          WHERE ORG_INFORMATION_ID = L_ORG_INFORMATION_ID;
        END;
        /*SRW.MESSAGE('25'
                   ,'object version number to delete for update is ' || L_OBJECT_VERSION_NUMBER)*/NULL;
        BEGIN
          HR_ORGANIZATION_API.DELETE_ORG_MANAGER(P_VALIDATE => FALSE
                                                ,P_ORG_INFORMATION_ID => L_ORG_INFORMATION_ID
                                                ,P_OBJECT_VERSION_NUMBER => L_OBJECT_VERSION_NUMBER);
        END;
        COMMIT;
        P_UPDATE := 'C';
      END IF;
      IF P_UPDATE = 'C' THEN
        /*SRW.MESSAGE('30'
                   ,'                      ')*/NULL;
        /*SRW.MESSAGE('31'
                   ,'p_update ' || P_UPDATE || ' org id ' || C_PARENT_ORG_ID)*/NULL;
        /*SRW.MESSAGE('32'
                   ,'need to create new eit')*/NULL;
        BEGIN
          HR_ORGANIZATION_API.CREATE_ORG_INFORMATION(P_VALIDATE => FALSE
                                                    ,P_EFFECTIVE_DATE => L_EFFECTIVE_DATE
                                                    ,P_ORGANIZATION_ID => C_PARENT_ORG_ID
                                                    ,P_ORG_INFO_TYPE_CODE => 'EEO_Archive'
                                                    ,P_ORG_INFORMATION1 => P_REPORT_YEAR
                                                    ,P_ORG_INFORMATION2 => P_CONC_REQUEST_ID
                                                    ,P_ORG_INFORMATION3 => C_TOT_CAT
                                                    ,P_ORG_INFORMATION4 => C_TOT_WMALE
                                                    ,P_ORG_INFORMATION5 => C_TOT_BMALE
                                                    ,P_ORG_INFORMATION6 => C_TOT_HMALE
                                                    ,P_ORG_INFORMATION7 => C_TOT_AMALE
                                                    ,P_ORG_INFORMATION8 => C_TOT_IMALE
                                                    ,P_ORG_INFORMATION9 => C_TOT_WFEMALE
                                                    ,P_ORG_INFORMATION10 => C_TOT_BFEMALE
                                                    ,P_ORG_INFORMATION11 => C_TOT_HFEMALE
                                                    ,P_ORG_INFORMATION12 => C_TOT_AFEMALE
                                                    ,P_ORG_INFORMATION13 => C_TOT_IFEMALE
                                                    ,P_ORG_INFORMATION14 => C_TOT_HLMALE
                                                    ,P_ORG_INFORMATION15 => C_TOT_HLFEMALE
                                                    ,P_ORG_INFORMATION16 => C_TOT_TMRACESMALE
                                                    ,P_ORG_INFORMATION17 => C_TOT_TMRACESFEMALE
                                                    ,P_ORG_INFORMATION_ID => L_ORG_INFORMATION_ID
                                                    ,P_OBJECT_VERSION_NUMBER => L_OBJECT_VERSION_NUMBER);
        END;
        COMMIT;
        /*SRW.MESSAGE('23'
                   ,'                                                                          ')*/NULL;
        /*SRW.MESSAGE('23'
                   ,'eit created for org id ' || C_PARENT_ORG_ID || ' year ' || P_REPORT_YEAR)*/NULL;
        /*SRW.MESSAGE('24'
                   ,'out params: org_information_id  is ' || L_ORG_INFORMATION_ID)*/NULL;
        /*SRW.MESSAGE('25'
                   ,'object version number is ' || L_OBJECT_VERSION_NUMBER)*/NULL;
        /*SRW.MESSAGE('23'
                   ,'                                                                          ')*/NULL;
      END IF;
      BEGIN
        BEGIN
          SELECT
            count(*)
          INTO L_EIT_COUNT
          FROM
            HR_ORGANIZATION_INFORMATION
          WHERE ORGANIZATION_ID = C_PARENT_ORG_ID
            AND ORG_INFORMATION_CONTEXT = 'EEO_Archive';
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            NULL;
          WHEN OTHERS THEN
            NULL;
        END;
        IF L_EIT_COUNT > 4 THEN
          BEGIN
            SELECT
              MIN(ORG_INFORMATION1)
            INTO L_MIN_YEAR
            FROM
              HR_ORGANIZATION_INFORMATION
            WHERE ORGANIZATION_ID = C_PARENT_ORG_ID
              AND ORG_INFORMATION_CONTEXT = 'EEO_Archive';
          END;
          BEGIN
            SELECT
              ORG_INFORMATION_ID,
              OBJECT_VERSION_NUMBER
            INTO L_ORG_INFORMATION_ID,L_OBJECT_VERSION_NUMBER
            FROM
              HR_ORGANIZATION_INFORMATION
            WHERE ORG_INFORMATION1 = L_MIN_YEAR
              AND ORG_INFORMATION_CONTEXT = 'EEO_Archive'
              AND ORGANIZATION_ID = C_PARENT_ORG_ID;
          END;
          BEGIN
            HR_ORGANIZATION_API.DELETE_ORG_MANAGER(P_VALIDATE => FALSE
                                                  ,P_ORG_INFORMATION_ID => L_ORG_INFORMATION_ID
                                                  ,P_OBJECT_VERSION_NUMBER => L_OBJECT_VERSION_NUMBER);
          END;
          /*SRW.MESSAGE('999999'
                     ,' there are over 4 Archive EITs for organization id ' || C_PARENT_ORG_ID ||
		     ' so deleting for year ' || L_MIN_YEAR)*/NULL;
        END IF;
      END;
    END IF;
    RETURN (NULL);
  END CF_CREATEUPD_ARCHEITFORMULA;

  FUNCTION CF_AUDIT_REPORTFORMULA(CONS_JOB_CATEGORY_CODE IN VARCHAR2) RETURN NUMBER IS
    CURSOR C_PERSONS IS
      SELECT
        PEO.PERSON_ID,
        PEO.FIRST_NAME,
        PEO.LAST_NAME,
        PEO.SEX,
        PEO.PER_INFORMATION1 ETHNIC,
        PEO.EMPLOYEE_NUMBER,
        ASS.ASSIGNMENT_ID,
        ASS.LOCATION_ID,
        LOC.LOCATION_CODE,
        JOB.NAME JOB_NAME,
        ASS.JOB_ID
      FROM
        PER_ALL_PEOPLE_F PEO,
        PER_ASSIGNMENTS_F ASS,
        PER_JOBS_VL JOB,
        HR_LOCATIONS_ALL LOC
      WHERE PEO.PERSON_ID = ASS.PERSON_ID
        AND PEO.PER_INFORMATION1 is not null
        AND PEO.PER_INFORMATION_CATEGORY = 'US'
        AND JOB.JOB_INFORMATION_CATEGORY = 'US'
        AND P_PAYROLL_PERIOD_DATE_START_T <= NVL(JOB.DATE_TO
         ,P_PAYROLL_PERIOD_DATE_END_T)
        AND P_PAYROLL_PERIOD_DATE_END_T >= JOB.DATE_FROM
        AND JOB.JOB_INFORMATION1 = CONS_JOB_CATEGORY_CODE
        AND ASS.JOB_ID = JOB.JOB_ID
        AND PEO.EFFECTIVE_START_DATE = (
        SELECT
          MAX(PEO1.EFFECTIVE_START_DATE)
        FROM
          PER_PEOPLE_F PEO1
        WHERE P_PAYROLL_PERIOD_DATE_START_T <= PEO1.EFFECTIVE_END_DATE
          AND P_PAYROLL_PERIOD_DATE_END_T >= PEO1.EFFECTIVE_START_DATE
          AND PEO.PERSON_ID = PEO1.PERSON_ID
          AND PEO1.CURRENT_EMPLOYEE_FLAG = 'Y' )
        AND ASS.EFFECTIVE_START_DATE = (
        SELECT
          MAX(ASS1.EFFECTIVE_START_DATE)
        FROM
          PER_ASSIGNMENTS_F ASS1
        WHERE P_PAYROLL_PERIOD_DATE_START_T <= ASS1.EFFECTIVE_END_DATE
          AND P_PAYROLL_PERIOD_DATE_END_T >= ASS1.EFFECTIVE_START_DATE
          AND ASS.PERSON_ID = ASS1.PERSON_ID
          AND ASS1.ASSIGNMENT_TYPE = 'E'
          AND ASS1.PRIMARY_FLAG = 'Y' )
        AND ASS.ASSIGNMENT_TYPE = 'E'
        AND ASS.PRIMARY_FLAG = 'Y'
        AND ASS.BUSINESS_GROUP_ID = P_BUSINESS_GROUP_ID
        AND PEO.BUSINESS_GROUP_ID = P_BUSINESS_GROUP_ID
        AND JOB.BUSINESS_GROUP_ID = P_BUSINESS_GROUP_ID
        AND EXISTS (
        SELECT
          'X'
        FROM
          HR_ORGANIZATION_INFORMATION HOI1,
          HR_ORGANIZATION_INFORMATION HOI2
        WHERE TO_CHAR(ASS.ASSIGNMENT_STATUS_TYPE_ID) = HOI1.ORG_INFORMATION1
          AND HOI1.ORG_INFORMATION_CONTEXT = 'Reporting Statuses'
          AND HOI1.ORGANIZATION_ID = P_BUSINESS_GROUP_ID
          AND ASS.EMPLOYMENT_CATEGORY = HOI2.ORG_INFORMATION1
          AND HOI2.ORGANIZATION_ID = P_BUSINESS_GROUP_ID
          AND HOI2.ORG_INFORMATION_CONTEXT = 'Reporting Categories' )
        AND ASS.LOCATION_ID = LOC.LOCATION_ID
        AND ASS.LOCATION_ID in (
        SELECT
          ENTITY_ID
        FROM
          PER_GEN_HIERARCHY_NODES PGHN,
          HR_LOCATION_EXTRA_INFO HLEI1,
          HR_LOCATION_EXTRA_INFO HLEI2
        WHERE PGHN.NODE_TYPE <> 'PAR'
          AND HIERARCHY_VERSION_ID = P_HIERARCHY_VERSION_ID
          AND TO_CHAR(HLEI1.LOCATION_ID) = PGHN.ENTITY_ID
          AND TO_CHAR(HLEI2.LOCATION_ID) = PGHN.ENTITY_ID
          AND HLEI1.LOCATION_ID = HLEI2.LOCATION_ID
          AND HLEI1.INFORMATION_TYPE = 'EEO-1 Specific Information'
          AND HLEI1.LEI_INFORMATION_CATEGORY = 'EEO-1 Specific Information'
          AND HLEI2.INFORMATION_TYPE = 'Establishment Information'
          AND HLEI2.LEI_INFORMATION_CATEGORY = 'Establishment Information' );
    L_BUFFER VARCHAR2(2000);
    G_DELIMITER VARCHAR2(1) := ',';
    G_EOL VARCHAR2(1) := FND_GLOBAL.LOCAL_CHR(10);
  BEGIN
    IF P_AUDIT_REPORT = 'Y' THEN
      FOR per IN C_PERSONS LOOP
        L_BUFFER := PER.PERSON_ID || G_DELIMITER || PER.LAST_NAME || G_DELIMITER || NVL(PER.FIRST_NAME
                       ,' ') || G_DELIMITER || NVL(PER.EMPLOYEE_NUMBER
                       ,' ') || G_DELIMITER || NVL(PER.SEX
                       ,' ') || G_DELIMITER || NVL(PER.ETHNIC
                       ,' ') || G_DELIMITER || PER.ASSIGNMENT_ID || G_DELIMITER || NVL(PER.JOB_ID
                       ,' ') || G_DELIMITER || NVL(PER.JOB_NAME
                       ,' ') || G_DELIMITER || NVL(PER.LOCATION_ID
                       ,' ') || G_DELIMITER || NVL(PER.LOCATION_CODE
                       ,' ') || G_DELIMITER || G_EOL;
        --PUT(L_BUFFER);
        FND_FILE.PUT_LINE(FND_FILE.LOG,L_BUFFER);
        END LOOP;
    END IF;
    RETURN NULL;
  END CF_AUDIT_REPORTFORMULA;

  FUNCTION C_DEF_SIC_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_DEF_SIC;
  END C_DEF_SIC_P;

  FUNCTION C_DEF_NAICS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_DEF_NAICS;
  END C_DEF_NAICS_P;

  FUNCTION C_DEF_GRE_P RETURN NUMBER IS
  BEGIN
    RETURN C_DEF_GRE;
  END C_DEF_GRE_P;

  FUNCTION C_DEF_DUNS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_DEF_DUNS;
  END C_DEF_DUNS_P;

  FUNCTION C_DEF_GOV_CON_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_DEF_GOV_CON;
  END C_DEF_GOV_CON_P;

  FUNCTION C_DEF_APPRENT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_DEF_APPRENT;
  END C_DEF_APPRENT_P;

  FUNCTION C_DEF_ACTIV_1_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_DEF_ACTIV_1;
  END C_DEF_ACTIV_1_P;

  FUNCTION C_DEF_ACTIV_2_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_DEF_ACTIV_2;
  END C_DEF_ACTIV_2_P;

  FUNCTION C_DEF_ACTIV_3_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_DEF_ACTIV_3;
  END C_DEF_ACTIV_3_P;

  FUNCTION C_DEF_ACTIV_4_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_DEF_ACTIV_4;
  END C_DEF_ACTIV_4_P;

  FUNCTION C_100_EMPS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_100_EMPS;
  END C_100_EMPS_P;

  FUNCTION C_EST_ACTIV_1_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_EST_ACTIV_1;
  END C_EST_ACTIV_1_P;

  FUNCTION C_EST_ACTIV_2_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_EST_ACTIV_2;
  END C_EST_ACTIV_2_P;

  FUNCTION C_EST_ACTIV_3_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_EST_ACTIV_3;
  END C_EST_ACTIV_3_P;

  FUNCTION C_EST_ACTIV_4_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_EST_ACTIV_4;
  END C_EST_ACTIV_4_P;

  FUNCTION C_BUSINESS_GROUP_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BUSINESS_GROUP_NAME;
  END C_BUSINESS_GROUP_NAME_P;

  FUNCTION C_HIERARCHY_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_HIERARCHY_NAME;
  END C_HIERARCHY_NAME_P;

  FUNCTION C_HIERARCHY_VERSION_NUM_P RETURN NUMBER IS
  BEGIN
    RETURN C_HIERARCHY_VERSION_NUM;
  END C_HIERARCHY_VERSION_NUM_P;

  FUNCTION C_PARENT_ORG_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_PARENT_ORG_ID;
  END C_PARENT_ORG_ID_P;

  FUNCTION C_PARENT_NODE_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_PARENT_NODE_ID;
  END C_PARENT_NODE_ID_P;

  FUNCTION C_NO_OF_ESTABLISHMENTS_P RETURN NUMBER IS
  BEGIN
    RETURN C_NO_OF_ESTABLISHMENTS;
  END C_NO_OF_ESTABLISHMENTS_P;

  FUNCTION C_REPORT_TYPE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_REPORT_TYPE;
  END C_REPORT_TYPE_P;

  FUNCTION CP_PREV_YEAR_FILED_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_PREV_YEAR_FILED;
  END CP_PREV_YEAR_FILED_P;

  FUNCTION C_REPORT_YEAR_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_REPORT_YEAR;
  END C_REPORT_YEAR_P;

  FUNCTION C_PAYROLL_PERIOD_DATE_START_P RETURN DATE IS
  BEGIN
    RETURN C_PAYROLL_PERIOD_DATE_START;
  END C_PAYROLL_PERIOD_DATE_START_P;

  FUNCTION C_PAYROLL_PERIOD_DATE_END_P RETURN DATE IS
  BEGIN
    RETURN C_PAYROLL_PERIOD_DATE_END;
  END C_PAYROLL_PERIOD_DATE_END_P;

  FUNCTION C_REPORT_MODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_REPORT_MODE;
  END C_REPORT_MODE_P;

  PROCEDURE ASSERT_CONDITION(P_CONDITION IN BOOLEAN) IS
  BEGIN
    /*STPROC.INIT('declare P_CONDITION BOOLEAN;
    begin P_CONDITION := sys.diutil.int_to_bool(:P_CONDITION);
    HR_GENERAL.ASSERT_CONDITION(P_CONDITION); end;');
    STPROC.BIND_I(P_CONDITION);
    STPROC.EXECUTE;*/null;
  END ASSERT_CONDITION;

  FUNCTION GET_BUSINESS_GROUP_ID RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
  X0 := HR_GENERAL.GET_BUSINESS_GROUP_ID;
    /*STPROC.INIT('begin :X0 := HR_GENERAL.GET_BUSINESS_GROUP_ID; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_BUSINESS_GROUP_ID;

  FUNCTION CHK_APPLICATION_ID(P_APPLICATION_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_GENERAL.CHK_APPLICATION_ID(:P_APPLICATION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_APPLICATION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END CHK_APPLICATION_ID;

  FUNCTION CORE_HR_APP_ID(P_APPLICATION_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_GENERAL.CORE_HR_APP_ID(:P_APPLICATION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_APPLICATION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END CORE_HR_APP_ID;

  FUNCTION VERTICAL_APP_ID(P_APPLICATION_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_GENERAL.VERTICAL_APP_ID(:P_APPLICATION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_APPLICATION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END VERTICAL_APP_ID;

  FUNCTION HRMS_OBJECT(P_OBJECT_NAME IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
   /* STPROC.INIT('begin :X0 := HR_GENERAL.HRMS_OBJECT(:P_OBJECT_NAME); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_OBJECT_NAME);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END HRMS_OBJECT;

  FUNCTION GET_APPLICATION_SHORT_NAME(P_APPLICATION_ID IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_GENERAL.GET_APPLICATION_SHORT_NAME(:P_APPLICATION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_APPLICATION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_APPLICATION_SHORT_NAME;

  FUNCTION EFFECTIVE_DATE RETURN DATE IS
    X0 DATE;
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_GENERAL.EFFECTIVE_DATE; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END EFFECTIVE_DATE;

  FUNCTION START_OF_TIME RETURN DATE IS
    X0 DATE;
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_GENERAL.START_OF_TIME; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END START_OF_TIME;

  FUNCTION END_OF_TIME RETURN DATE IS
    X0 DATE;
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_GENERAL.END_OF_TIME; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END END_OF_TIME;

  FUNCTION PAY_VALUE RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_GENERAL.PAY_VALUE; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END PAY_VALUE;

  FUNCTION MONEY_UNIT RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_GENERAL.MONEY_UNIT; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END MONEY_UNIT;

  FUNCTION DEFAULT_CURRENCY_CODE(P_LEGISLATION_CODE IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_GENERAL.DEFAULT_CURRENCY_CODE(:P_LEGISLATION_CODE); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_LEGISLATION_CODE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END DEFAULT_CURRENCY_CODE;

  FUNCTION DEFAULT_CURRENCY_CODE(P_BUSINESS_GROUP_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_GENERAL.DEFAULT_CURRENCY_CODE(:P_BUSINESS_GROUP_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_BUSINESS_GROUP_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END DEFAULT_CURRENCY_CODE;

  FUNCTION LOCATION_VALID(P_LOCATION_ID IN NUMBER
                         ,P_DATE IN DATE
                         ,P_ERROR_IF_INVALID IN BOOLEAN) RETURN BOOLEAN IS
    X0 BOOLEAN;
  BEGIN
    /*STPROC.INIT('declare X0rv BOOLEAN; X0P_ERROR_IF_INVALID BOOLEAN;
    begin X0P_ERROR_IF_INVALID := sys.diutil.int_to_bool(:P_ERROR_IF_INVALID);
    X0rv := HR_GENERAL.LOCATION_VALID(:P_LOCATION_ID, :P_DATE, X0P_ERROR_IF_INVALID);
    :X0 := sys.diutil.bool_to_int(X0rv); end;');
    STPROC.BIND_I(P_ERROR_IF_INVALID);
    STPROC.BIND_I(P_LOCATION_ID);
    STPROC.BIND_I(P_DATE);
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(4
                   ,X0);*/null;
    RETURN X0;
  END LOCATION_VALID;

  FUNCTION DECODE_LOOKUP(P_LOOKUP_TYPE IN VARCHAR2
                        ,P_LOOKUP_CODE IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
   /* STPROC.INIT('begin :X0 := HR_GENERAL.DECODE_LOOKUP(:P_LOOKUP_TYPE, :P_LOOKUP_CODE); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_LOOKUP_TYPE);
    STPROC.BIND_I(P_LOOKUP_CODE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END DECODE_LOOKUP;

  FUNCTION DECODE_GRADE(P_GRADE_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_GENERAL.DECODE_GRADE(:P_GRADE_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_GRADE_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END DECODE_GRADE;

  FUNCTION DECODE_PAYROLL(P_PAYROLL_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_GENERAL.DECODE_PAYROLL(:P_PAYROLL_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_PAYROLL_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END DECODE_PAYROLL;

  FUNCTION GET_SALARY(P_PAY_BASIS_ID IN NUMBER
                     ,P_ASSIGNMENT_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_GENERAL.GET_SALARY(:P_PAY_BASIS_ID, :P_ASSIGNMENT_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_PAY_BASIS_ID);
    STPROC.BIND_I(P_ASSIGNMENT_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_SALARY;

  FUNCTION DECODE_JOB(P_JOB_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_GENERAL.DECODE_JOB(:P_JOB_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_JOB_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END DECODE_JOB;

  FUNCTION DECODE_POSITION(P_POSITION_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_GENERAL.DECODE_POSITION(:P_POSITION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_POSITION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END DECODE_POSITION;

  FUNCTION DECODE_LOCATION(P_LOCATION_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
   /* STPROC.INIT('begin :X0 := HR_GENERAL.DECODE_LOCATION(:P_LOCATION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_LOCATION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    RETURN X0;
  END DECODE_LOCATION;

  FUNCTION DECODE_PAY_BASIS(P_PAY_BASIS_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_GENERAL.DECODE_PAY_BASIS(:P_PAY_BASIS_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_PAY_BASIS_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END DECODE_PAY_BASIS;

  FUNCTION DECODE_ASS_STATUS_TYPE(P_ASSIGNMENT_STATUS_TYPE_ID IN NUMBER
                                 ,P_BUSINESS_GROUP_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_GENERAL.DECODE_ASS_STATUS_TYPE(:P_ASSIGNMENT_STATUS_TYPE_ID, :P_BUSINESS_GROUP_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_ASSIGNMENT_STATUS_TYPE_ID);
    STPROC.BIND_I(P_BUSINESS_GROUP_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END DECODE_ASS_STATUS_TYPE;

  FUNCTION GET_WORK_PHONE(P_PERSON_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_GENERAL.GET_WORK_PHONE(:P_PERSON_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_PERSON_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_WORK_PHONE;

  FUNCTION GET_HOME_PHONE(P_PERSON_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_GENERAL.GET_HOME_PHONE(:P_PERSON_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_PERSON_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_HOME_PHONE;

  PROCEDURE INIT_FORMS(P_BUSINESS_GROUP_ID IN NUMBER
                      ,P_SHORT_NAME OUT NOCOPY VARCHAR2
                      ,P_BG_NAME OUT NOCOPY VARCHAR2
                      ,P_BG_CURRENCY_CODE OUT NOCOPY VARCHAR2
                      ,P_LEGISLATION_CODE OUT NOCOPY VARCHAR2
                      ,P_SESSION_DATE IN OUT NOCOPY DATE
                      ,P_SES_YESTERDAY OUT NOCOPY DATE
                      ,P_START_OF_TIME OUT NOCOPY DATE
                      ,P_END_OF_TIME OUT NOCOPY DATE
                      ,P_SYS_DATE OUT NOCOPY DATE
                      ,P_ENABLE_HR_TRACE IN BOOLEAN) IS
  BEGIN
    /*STPROC.INIT('declare P_ENABLE_HR_TRACE BOOLEAN;
    begin P_ENABLE_HR_TRACE := sys.diutil.int_to_bool(:P_ENABLE_HR_TRACE);
    HR_GENERAL.INIT_FORMS(:P_BUSINESS_GROUP_ID, :P_SHORT_NAME, :P_BG_NAME,
    :P_BG_CURRENCY_CODE, :P_LEGISLATION_CODE, :P_SESSION_DATE, :P_SES_YESTERDAY,
    :P_START_OF_TIME, :P_END_OF_TIME, :P_SYS_DATE, P_ENABLE_HR_TRACE); end;');
    STPROC.BIND_I(P_ENABLE_HR_TRACE);
    STPROC.BIND_I(P_BUSINESS_GROUP_ID);
    STPROC.BIND_O(P_SHORT_NAME);
    STPROC.BIND_O(P_BG_NAME);
    STPROC.BIND_O(P_BG_CURRENCY_CODE);
    STPROC.BIND_O(P_LEGISLATION_CODE);
    STPROC.BIND_IO(P_SESSION_DATE);
    STPROC.BIND_O(P_SES_YESTERDAY);
    STPROC.BIND_O(P_START_OF_TIME);
    STPROC.BIND_O(P_END_OF_TIME);
    STPROC.BIND_O(P_SYS_DATE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,P_SHORT_NAME);
    STPROC.RETRIEVE(4
                   ,P_BG_NAME);
    STPROC.RETRIEVE(5
                   ,P_BG_CURRENCY_CODE);
    STPROC.RETRIEVE(6
                   ,P_LEGISLATION_CODE);
    STPROC.RETRIEVE(7
                   ,P_SESSION_DATE);
    STPROC.RETRIEVE(8
                   ,P_SES_YESTERDAY);
    STPROC.RETRIEVE(9
                   ,P_START_OF_TIME);
    STPROC.RETRIEVE(10
                   ,P_END_OF_TIME);
    STPROC.RETRIEVE(11
                   ,P_SYS_DATE);*/null;
  END INIT_FORMS;

  FUNCTION CHK_GEOCODES_INSTALLED RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_GENERAL.CHK_GEOCODES_INSTALLED; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END CHK_GEOCODES_INSTALLED;

  FUNCTION GET_BUDGET(P_BUDGET_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_REPORTS.GET_BUDGET(:P_BUDGET_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_BUDGET_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_BUDGET;

  FUNCTION GET_BUDGET_VERSION(P_BUDGET_ID IN NUMBER
                             ,P_BUDGET_VERSION_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_REPORTS.GET_BUDGET_VERSION(:P_BUDGET_ID, :P_BUDGET_VERSION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_BUDGET_ID);
    STPROC.BIND_I(P_BUDGET_VERSION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_BUDGET_VERSION;

  PROCEDURE GET_ORGANIZATION(P_ORGANIZATION_ID IN NUMBER
                            ,P_ORG_NAME OUT NOCOPY VARCHAR2
                            ,P_ORG_TYPE OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin HR_REPORTS.GET_ORGANIZATION(:P_ORGANIZATION_ID, :P_ORG_NAME, :P_ORG_TYPE); end;');
    STPROC.BIND_I(P_ORGANIZATION_ID);
    STPROC.BIND_O(P_ORG_NAME);
    STPROC.BIND_O(P_ORG_TYPE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,P_ORG_NAME);
    STPROC.RETRIEVE(3
                   ,P_ORG_TYPE);*/null;
  END GET_ORGANIZATION;

  FUNCTION GET_JOB(P_JOB_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_REPORTS.GET_JOB(:P_JOB_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_JOB_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_JOB;

  FUNCTION GET_POSITION(P_POSITION_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_REPORTS.GET_POSITION(:P_POSITION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_POSITION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_POSITION;

  FUNCTION GET_GRADE(P_GRADE_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_REPORTS.GET_GRADE(:P_GRADE_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_GRADE_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_GRADE;

  FUNCTION GET_STATUS(P_BUSINESS_GROUP_ID IN NUMBER
                     ,P_ASSIGNMENT_STATUS_TYPE_ID IN NUMBER
                     ,P_LEGISLATION_CODE IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_REPORTS.GET_STATUS(:P_BUSINESS_GROUP_ID, :P_ASSIGNMENT_STATUS_TYPE_ID, :P_LEGISLATION_CODE); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_BUSINESS_GROUP_ID);
    STPROC.BIND_I(P_ASSIGNMENT_STATUS_TYPE_ID);
    STPROC.BIND_I(P_LEGISLATION_CODE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_STATUS;

  FUNCTION GET_ABS_TYPE(P_ABS_ATT_TYPE_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_REPORTS.GET_ABS_TYPE(:P_ABS_ATT_TYPE_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_ABS_ATT_TYPE_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_ABS_TYPE;

  PROCEDURE GET_TIME_PERIOD(P_TIME_PERIOD_ID IN NUMBER
                           ,P_PERIOD_NAME OUT NOCOPY VARCHAR2
                           ,P_START_DATE OUT NOCOPY DATE
                           ,P_END_DATE OUT NOCOPY DATE) IS
  BEGIN
    /*STPROC.INIT('begin HR_REPORTS.GET_TIME_PERIOD(:P_TIME_PERIOD_ID, :P_PERIOD_NAME, :P_START_DATE, :P_END_DATE); end;');
    STPROC.BIND_I(P_TIME_PERIOD_ID);
    STPROC.BIND_O(P_PERIOD_NAME);
    STPROC.BIND_O(P_START_DATE);
    STPROC.BIND_O(P_END_DATE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,P_PERIOD_NAME);
    STPROC.RETRIEVE(3
                   ,P_START_DATE);
    STPROC.RETRIEVE(4
                   ,P_END_DATE);*/null;
  END GET_TIME_PERIOD;

  FUNCTION GET_BUSINESS_GROUP(P_BUSINESS_GROUP_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    X0:= HR_REPORTS.GET_BUSINESS_GROUP(P_BUSINESS_GROUP_ID);
    /*STPROC.INIT('begin :X0 := HR_REPORTS.GET_BUSINESS_GROUP(:P_BUSINESS_GROUP_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_BUSINESS_GROUP_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_BUSINESS_GROUP;

  FUNCTION COUNT_ORG_SUBORDINATES(P_ORG_STRUCTURE_VERSION_ID IN NUMBER
                                 ,P_PARENT_ORGANIZATION_ID IN NUMBER) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_REPORTS.COUNT_ORG_SUBORDINATES(:P_ORG_STRUCTURE_VERSION_ID, :P_PARENT_ORGANIZATION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_ORG_STRUCTURE_VERSION_ID);
    STPROC.BIND_I(P_PARENT_ORGANIZATION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END COUNT_ORG_SUBORDINATES;

  FUNCTION COUNT_POS_SUBORDINATES(P_POS_STRUCTURE_VERSION_ID IN NUMBER
                                 ,P_PARENT_POSITION_ID IN NUMBER) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_REPORTS.COUNT_POS_SUBORDINATES(:P_POS_STRUCTURE_VERSION_ID, :P_PARENT_POSITION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_POS_STRUCTURE_VERSION_ID);
    STPROC.BIND_I(P_PARENT_POSITION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END COUNT_POS_SUBORDINATES;

  PROCEDURE GET_ORGANIZATION_HIERARCHY(P_ORGANIZATION_STRUCTURE_ID IN NUMBER
                                      ,P_ORG_STRUCTURE_VERSION_ID IN NUMBER
                                      ,P_ORG_STRUCTURE_NAME OUT NOCOPY VARCHAR2
                                      ,P_ORG_VERSION OUT NOCOPY NUMBER
                                      ,P_VERSION_START_DATE OUT NOCOPY DATE
                                      ,P_VERSION_END_DATE OUT NOCOPY DATE) IS
  BEGIN
    /*STPROC.INIT('begin HR_REPORTS.GET_ORGANIZATION_HIERARCHY(:P_ORGANIZATION_STRUCTURE_ID,
    :P_ORG_STRUCTURE_VERSION_ID, :P_ORG_STRUCTURE_NAME, :P_ORG_VERSION, :P_VERSION_START_DATE,
    :P_VERSION_END_DATE); end;');
    STPROC.BIND_I(P_ORGANIZATION_STRUCTURE_ID);
    STPROC.BIND_I(P_ORG_STRUCTURE_VERSION_ID);
    STPROC.BIND_O(P_ORG_STRUCTURE_NAME);
    STPROC.BIND_O(P_ORG_VERSION);
    STPROC.BIND_O(P_VERSION_START_DATE);
    STPROC.BIND_O(P_VERSION_END_DATE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,P_ORG_STRUCTURE_NAME);
    STPROC.RETRIEVE(4
                   ,P_ORG_VERSION);
    STPROC.RETRIEVE(5
                   ,P_VERSION_START_DATE);
    STPROC.RETRIEVE(6
                   ,P_VERSION_END_DATE);*/null;
  END GET_ORGANIZATION_HIERARCHY;

  PROCEDURE GET_POSITION_HIERARCHY(P_POSITION_STRUCTURE_ID IN NUMBER
                                  ,P_POS_STRUCTURE_VERSION_ID IN NUMBER
                                  ,P_POS_STRUCTURE_NAME OUT NOCOPY VARCHAR2
                                  ,P_POS_VERSION OUT NOCOPY NUMBER
                                  ,P_VERSION_START_DATE OUT NOCOPY DATE
                                  ,P_VERSION_END_DATE OUT NOCOPY DATE) IS
  BEGIN
    /*STPROC.INIT('begin HR_REPORTS.GET_POSITION_HIERARCHY(:P_POSITION_STRUCTURE_ID, :P_POS_STRUCTURE_VERSION_ID, :P_POS_STRUCTURE_NAME,
    :P_POS_VERSION, :P_VERSION_START_DATE, :P_VERSION_END_DATE); end;');
    STPROC.BIND_I(P_POSITION_STRUCTURE_ID);
    STPROC.BIND_I(P_POS_STRUCTURE_VERSION_ID);
    STPROC.BIND_O(P_POS_STRUCTURE_NAME);
    STPROC.BIND_O(P_POS_VERSION);
    STPROC.BIND_O(P_VERSION_START_DATE);
    STPROC.BIND_O(P_VERSION_END_DATE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,P_POS_STRUCTURE_NAME);
    STPROC.RETRIEVE(4
                   ,P_POS_VERSION);
    STPROC.RETRIEVE(5
                   ,P_VERSION_START_DATE);
    STPROC.RETRIEVE(6
                   ,P_VERSION_END_DATE);*/null;
  END GET_POSITION_HIERARCHY;

  FUNCTION GET_LOOKUP_MEANING(P_LOOKUP_TYPE IN VARCHAR2
                             ,P_LOOKUP_CODE IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_REPORTS.GET_LOOKUP_MEANING(:P_LOOKUP_TYPE, :P_LOOKUP_CODE); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_LOOKUP_TYPE);
    STPROC.BIND_I(P_LOOKUP_CODE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_LOOKUP_MEANING;

  FUNCTION PERSON_MATCHING_SKILLS(P_PERSON_ID IN NUMBER
                                 ,P_JOB_POSITION_ID IN NUMBER
                                 ,P_JOB_POSITION_TYPE IN VARCHAR2
                                 ,P_MATCHING_LEVEL IN VARCHAR2
                                 ,P_NO_OF_ESSENTIAL IN NUMBER
                                 ,P_NO_OF_DESIRABLE IN NUMBER) RETURN BOOLEAN IS
    X0 BOOLEAN;
  BEGIN
    /*STPROC.INIT('declare X0rv BOOLEAN; begin X0rv := HR_REPORTS.PERSON_MATCHING_SKILLS(:P_PERSON_ID, :P_JOB_POSITION_ID,
    :P_JOB_POSITION_TYPE, :P_MATCHING_LEVEL, :P_NO_OF_ESSENTIAL, :P_NO_OF_DESIRABLE); :X0 := sys.diutil.bool_to_int(X0rv); end;');
    STPROC.BIND_I(P_PERSON_ID);
    STPROC.BIND_I(P_JOB_POSITION_ID);
    STPROC.BIND_I(P_JOB_POSITION_TYPE);
    STPROC.BIND_I(P_MATCHING_LEVEL);
    STPROC.BIND_I(P_NO_OF_ESSENTIAL);
    STPROC.BIND_I(P_NO_OF_DESIRABLE);
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(7
                   ,X0);*/null;
    RETURN X0;
  END PERSON_MATCHING_SKILLS;

  FUNCTION GET_PAYROLL_NAME(P_SESSION_DATE IN DATE
                           ,P_PAYROLL_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_REPORTS.GET_PAYROLL_NAME(:P_SESSION_DATE, :P_PAYROLL_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_SESSION_DATE);
    STPROC.BIND_I(P_PAYROLL_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_PAYROLL_NAME;

  FUNCTION GET_ELEMENT_NAME(P_SESSION_DATE IN DATE
                           ,P_ELEMENT_TYPE_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_REPORTS.GET_ELEMENT_NAME(:P_SESSION_DATE, :P_ELEMENT_TYPE_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_SESSION_DATE);
    STPROC.BIND_I(P_ELEMENT_TYPE_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_ELEMENT_NAME;

  PROCEDURE GEN_PARTIAL_MATCHING_LEXICAL(P_CONCATENATED_SEGMENTS IN VARCHAR2
                                        ,P_ID_FLEX_NUM IN NUMBER
                                        ,P_MATCHING_LEXICAL IN OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin HR_REPORTS.GEN_PARTIAL_MATCHING_LEXICAL(:P_CONCATENATED_SEGMENTS, :P_ID_FLEX_NUM, :P_MATCHING_LEXICAL); end;');
    STPROC.BIND_I(P_CONCATENATED_SEGMENTS);
    STPROC.BIND_I(P_ID_FLEX_NUM);
    STPROC.BIND_IO(P_MATCHING_LEXICAL);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,P_MATCHING_LEXICAL);*/null;
  END GEN_PARTIAL_MATCHING_LEXICAL;

  PROCEDURE GET_ATTRIBUTES(P_CONCATENATED_SEGMENTS IN VARCHAR2
                          ,P_NAME IN VARCHAR2
                          ,P_SEGMENTS_USED OUT NOCOPY NUMBER
                          ,P_VALUE1 OUT NOCOPY VARCHAR2
                          ,P_VALUE2 OUT NOCOPY VARCHAR2
                          ,P_VALUE3 OUT NOCOPY VARCHAR2
                          ,P_VALUE4 OUT NOCOPY VARCHAR2
                          ,P_VALUE5 OUT NOCOPY VARCHAR2
                          ,P_VALUE6 OUT NOCOPY VARCHAR2
                          ,P_VALUE7 OUT NOCOPY VARCHAR2
                          ,P_VALUE8 OUT NOCOPY VARCHAR2
                          ,P_VALUE9 OUT NOCOPY VARCHAR2
                          ,P_VALUE10 OUT NOCOPY VARCHAR2
                          ,P_VALUE11 OUT NOCOPY VARCHAR2
                          ,P_VALUE12 OUT NOCOPY VARCHAR2
                          ,P_VALUE13 OUT NOCOPY VARCHAR2
                          ,P_VALUE14 OUT NOCOPY VARCHAR2
                          ,P_VALUE15 OUT NOCOPY VARCHAR2
                          ,P_VALUE16 OUT NOCOPY VARCHAR2
                          ,P_VALUE17 OUT NOCOPY VARCHAR2
                          ,P_VALUE18 OUT NOCOPY VARCHAR2
                          ,P_VALUE19 OUT NOCOPY VARCHAR2
                          ,P_VALUE20 OUT NOCOPY VARCHAR2
                          ,P_VALUE21 OUT NOCOPY VARCHAR2
                          ,P_VALUE22 OUT NOCOPY VARCHAR2
                          ,P_VALUE23 OUT NOCOPY VARCHAR2
                          ,P_VALUE24 OUT NOCOPY VARCHAR2
                          ,P_VALUE25 OUT NOCOPY VARCHAR2
                          ,P_VALUE26 OUT NOCOPY VARCHAR2
                          ,P_VALUE27 OUT NOCOPY VARCHAR2
                          ,P_VALUE28 OUT NOCOPY VARCHAR2
                          ,P_VALUE29 OUT NOCOPY VARCHAR2
                          ,P_VALUE30 OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin HR_REPORTS.GET_ATTRIBUTES(:P_CONCATENATED_SEGMENTS, :P_NAME, :P_SEGMENTS_USED, :P_VALUE1, :P_VALUE2,
    :P_VALUE3, :P_VALUE4, :P_VALUE5, :P_VALUE6, :P_VALUE7, :P_VALUE8, :P_VALUE9, :P_VALUE10, :P_VALUE11, :P_VALUE12, :P_VALUE13,
    :P_VALUE14, :P_VALUE15, :P_VALUE16, :P_VALUE17, :P_VALUE18, :P_VALUE19, :P_VALUE20, :P_VALUE21, :P_VALUE22, :P_VALUE23, :P_VALUE24,
    :P_VALUE25, :P_VALUE26, :P_VALUE27, :P_VALUE28, :P_VALUE29, :P_VALUE30); end;');
    STPROC.BIND_I(P_CONCATENATED_SEGMENTS);
    STPROC.BIND_I(P_NAME);
    STPROC.BIND_O(P_SEGMENTS_USED);
    STPROC.BIND_O(P_VALUE1);
    STPROC.BIND_O(P_VALUE2);
    STPROC.BIND_O(P_VALUE3);
    STPROC.BIND_O(P_VALUE4);
    STPROC.BIND_O(P_VALUE5);
    STPROC.BIND_O(P_VALUE6);
    STPROC.BIND_O(P_VALUE7);
    STPROC.BIND_O(P_VALUE8);
    STPROC.BIND_O(P_VALUE9);
    STPROC.BIND_O(P_VALUE10);
    STPROC.BIND_O(P_VALUE11);
    STPROC.BIND_O(P_VALUE12);
    STPROC.BIND_O(P_VALUE13);
    STPROC.BIND_O(P_VALUE14);
    STPROC.BIND_O(P_VALUE15);
    STPROC.BIND_O(P_VALUE16);
    STPROC.BIND_O(P_VALUE17);
    STPROC.BIND_O(P_VALUE18);
    STPROC.BIND_O(P_VALUE19);
    STPROC.BIND_O(P_VALUE20);
    STPROC.BIND_O(P_VALUE21);
    STPROC.BIND_O(P_VALUE22);
    STPROC.BIND_O(P_VALUE23);
    STPROC.BIND_O(P_VALUE24);
    STPROC.BIND_O(P_VALUE25);
    STPROC.BIND_O(P_VALUE26);
    STPROC.BIND_O(P_VALUE27);
    STPROC.BIND_O(P_VALUE28);
    STPROC.BIND_O(P_VALUE29);
    STPROC.BIND_O(P_VALUE30);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,P_SEGMENTS_USED);
    STPROC.RETRIEVE(4
                   ,P_VALUE1);
    STPROC.RETRIEVE(5
                   ,P_VALUE2);
    STPROC.RETRIEVE(6
                   ,P_VALUE3);
    STPROC.RETRIEVE(7
                   ,P_VALUE4);
    STPROC.RETRIEVE(8
                   ,P_VALUE5);
    STPROC.RETRIEVE(9
                   ,P_VALUE6);
    STPROC.RETRIEVE(10
                   ,P_VALUE7);
    STPROC.RETRIEVE(11
                   ,P_VALUE8);
    STPROC.RETRIEVE(12
                   ,P_VALUE9);
    STPROC.RETRIEVE(13
                   ,P_VALUE10);
    STPROC.RETRIEVE(14
                   ,P_VALUE11);
    STPROC.RETRIEVE(15
                   ,P_VALUE12);
    STPROC.RETRIEVE(16
                   ,P_VALUE13);
    STPROC.RETRIEVE(17
                   ,P_VALUE14);
    STPROC.RETRIEVE(18
                   ,P_VALUE15);
    STPROC.RETRIEVE(19
                   ,P_VALUE16);
    STPROC.RETRIEVE(20
                   ,P_VALUE17);
    STPROC.RETRIEVE(21
                   ,P_VALUE18);
    STPROC.RETRIEVE(22
                   ,P_VALUE19);
    STPROC.RETRIEVE(23
                   ,P_VALUE20);
    STPROC.RETRIEVE(24
                   ,P_VALUE21);
    STPROC.RETRIEVE(25
                   ,P_VALUE22);
    STPROC.RETRIEVE(26
                   ,P_VALUE23);
    STPROC.RETRIEVE(27
                   ,P_VALUE24);
    STPROC.RETRIEVE(28
                   ,P_VALUE25);
    STPROC.RETRIEVE(29
                   ,P_VALUE26);
    STPROC.RETRIEVE(30
                   ,P_VALUE27);
    STPROC.RETRIEVE(31
                   ,P_VALUE28);
    STPROC.RETRIEVE(32
                   ,P_VALUE29);
    STPROC.RETRIEVE(33
                   ,P_VALUE30);*/null;
  END GET_ATTRIBUTES;

  PROCEDURE GET_SEGMENTS(P_CONCATENATED_SEGMENTS IN VARCHAR2
                        ,P_ID_FLEX_NUM IN NUMBER
                        ,P_SEGMENTS_USED OUT NOCOPY NUMBER
                        ,P_VALUE1 OUT NOCOPY VARCHAR2
                        ,P_VALUE2 OUT NOCOPY VARCHAR2
                        ,P_VALUE3 OUT NOCOPY VARCHAR2
                        ,P_VALUE4 OUT NOCOPY VARCHAR2
                        ,P_VALUE5 OUT NOCOPY VARCHAR2
                        ,P_VALUE6 OUT NOCOPY VARCHAR2
                        ,P_VALUE7 OUT NOCOPY VARCHAR2
                        ,P_VALUE8 OUT NOCOPY VARCHAR2
                        ,P_VALUE9 OUT NOCOPY VARCHAR2
                        ,P_VALUE10 OUT NOCOPY VARCHAR2
                        ,P_VALUE11 OUT NOCOPY VARCHAR2
                        ,P_VALUE12 OUT NOCOPY VARCHAR2
                        ,P_VALUE13 OUT NOCOPY VARCHAR2
                        ,P_VALUE14 OUT NOCOPY VARCHAR2
                        ,P_VALUE15 OUT NOCOPY VARCHAR2
                        ,P_VALUE16 OUT NOCOPY VARCHAR2
                        ,P_VALUE17 OUT NOCOPY VARCHAR2
                        ,P_VALUE18 OUT NOCOPY VARCHAR2
                        ,P_VALUE19 OUT NOCOPY VARCHAR2
                        ,P_VALUE20 OUT NOCOPY VARCHAR2
                        ,P_VALUE21 OUT NOCOPY VARCHAR2
                        ,P_VALUE22 OUT NOCOPY VARCHAR2
                        ,P_VALUE23 OUT NOCOPY VARCHAR2
                        ,P_VALUE24 OUT NOCOPY VARCHAR2
                        ,P_VALUE25 OUT NOCOPY VARCHAR2
                        ,P_VALUE26 OUT NOCOPY VARCHAR2
                        ,P_VALUE27 OUT NOCOPY VARCHAR2
                        ,P_VALUE28 OUT NOCOPY VARCHAR2
                        ,P_VALUE29 OUT NOCOPY VARCHAR2
                        ,P_VALUE30 OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin HR_REPORTS.GET_SEGMENTS(:P_CONCATENATED_SEGMENTS, :P_ID_FLEX_NUM, :P_SEGMENTS_USED, :P_VALUE1, :P_VALUE2,
    :P_VALUE3, :P_VALUE4, :P_VALUE5, :P_VALUE6, :P_VALUE7, :P_VALUE8, :P_VALUE9, :P_VALUE10, :P_VALUE11, :P_VALUE12, :P_VALUE13,
    :P_VALUE14, :P_VALUE15, :P_VALUE16, :P_VALUE17, :P_VALUE18, :P_VALUE19, :P_VALUE20, :P_VALUE21, :P_VALUE22, :P_VALUE23, :P_VALUE24,
    :P_VALUE25, :P_VALUE26, :P_VALUE27, :P_VALUE28, :P_VALUE29, :P_VALUE30); end;');
    STPROC.BIND_I(P_CONCATENATED_SEGMENTS);
    STPROC.BIND_I(P_ID_FLEX_NUM);
    STPROC.BIND_O(P_SEGMENTS_USED);
    STPROC.BIND_O(P_VALUE1);
    STPROC.BIND_O(P_VALUE2);
    STPROC.BIND_O(P_VALUE3);
    STPROC.BIND_O(P_VALUE4);
    STPROC.BIND_O(P_VALUE5);
    STPROC.BIND_O(P_VALUE6);
    STPROC.BIND_O(P_VALUE7);
    STPROC.BIND_O(P_VALUE8);
    STPROC.BIND_O(P_VALUE9);
    STPROC.BIND_O(P_VALUE10);
    STPROC.BIND_O(P_VALUE11);
    STPROC.BIND_O(P_VALUE12);
    STPROC.BIND_O(P_VALUE13);
    STPROC.BIND_O(P_VALUE14);
    STPROC.BIND_O(P_VALUE15);
    STPROC.BIND_O(P_VALUE16);
    STPROC.BIND_O(P_VALUE17);
    STPROC.BIND_O(P_VALUE18);
    STPROC.BIND_O(P_VALUE19);
    STPROC.BIND_O(P_VALUE20);
    STPROC.BIND_O(P_VALUE21);
    STPROC.BIND_O(P_VALUE22);
    STPROC.BIND_O(P_VALUE23);
    STPROC.BIND_O(P_VALUE24);
    STPROC.BIND_O(P_VALUE25);
    STPROC.BIND_O(P_VALUE26);
    STPROC.BIND_O(P_VALUE27);
    STPROC.BIND_O(P_VALUE28);
    STPROC.BIND_O(P_VALUE29);
    STPROC.BIND_O(P_VALUE30);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,P_SEGMENTS_USED);
    STPROC.RETRIEVE(4
                   ,P_VALUE1);
    STPROC.RETRIEVE(5
                   ,P_VALUE2);
    STPROC.RETRIEVE(6
                   ,P_VALUE3);
    STPROC.RETRIEVE(7
                   ,P_VALUE4);
    STPROC.RETRIEVE(8
                   ,P_VALUE5);
    STPROC.RETRIEVE(9
                   ,P_VALUE6);
    STPROC.RETRIEVE(10
                   ,P_VALUE7);
    STPROC.RETRIEVE(11
                   ,P_VALUE8);
    STPROC.RETRIEVE(12
                   ,P_VALUE9);
    STPROC.RETRIEVE(13
                   ,P_VALUE10);
    STPROC.RETRIEVE(14
                   ,P_VALUE11);
    STPROC.RETRIEVE(15
                   ,P_VALUE12);
    STPROC.RETRIEVE(16
                   ,P_VALUE13);
    STPROC.RETRIEVE(17
                   ,P_VALUE14);
    STPROC.RETRIEVE(18
                   ,P_VALUE15);
    STPROC.RETRIEVE(19
                   ,P_VALUE16);
    STPROC.RETRIEVE(20
                   ,P_VALUE17);
    STPROC.RETRIEVE(21
                   ,P_VALUE18);
    STPROC.RETRIEVE(22
                   ,P_VALUE19);
    STPROC.RETRIEVE(23
                   ,P_VALUE20);
    STPROC.RETRIEVE(24
                   ,P_VALUE21);
    STPROC.RETRIEVE(25
                   ,P_VALUE22);
    STPROC.RETRIEVE(26
                   ,P_VALUE23);
    STPROC.RETRIEVE(27
                   ,P_VALUE24);
    STPROC.RETRIEVE(28
                   ,P_VALUE25);
    STPROC.RETRIEVE(29
                   ,P_VALUE26);
    STPROC.RETRIEVE(30
                   ,P_VALUE27);
    STPROC.RETRIEVE(31
                   ,P_VALUE28);
    STPROC.RETRIEVE(32
                   ,P_VALUE29);
    STPROC.RETRIEVE(33
                   ,P_VALUE30);*/null;
  END GET_SEGMENTS;

  PROCEDURE GET_DESC_FLEX(P_APPL_SHORT_NAME IN VARCHAR2
                         ,P_DESC_FLEX_NAME IN VARCHAR2
                         ,P_TABLE_ALIAS IN VARCHAR2
                         ,P_TITLE OUT NOCOPY VARCHAR2
                         ,P_LABEL_EXPR OUT NOCOPY VARCHAR2
                         ,P_COLUMN_EXPR OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin HR_REPORTS.GET_DESC_FLEX(:P_APPL_SHORT_NAME, :P_DESC_FLEX_NAME, :P_TABLE_ALIAS, :P_TITLE, :P_LABEL_EXPR,
    :P_COLUMN_EXPR); end;');
    STPROC.BIND_I(P_APPL_SHORT_NAME);
    STPROC.BIND_I(P_DESC_FLEX_NAME);
    STPROC.BIND_I(P_TABLE_ALIAS);
    STPROC.BIND_O(P_TITLE);
    STPROC.BIND_O(P_LABEL_EXPR);
    STPROC.BIND_O(P_COLUMN_EXPR);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(4
                   ,P_TITLE);
    STPROC.RETRIEVE(5
                   ,P_LABEL_EXPR);
    STPROC.RETRIEVE(6
                   ,P_COLUMN_EXPR);*/null;
  END GET_DESC_FLEX;

  PROCEDURE GET_DESC_FLEX_CONTEXT(P_APPL_SHORT_NAME IN VARCHAR2
                                 ,P_DESC_FLEX_NAME IN VARCHAR2
                                 ,P_TABLE_ALIAS IN VARCHAR2
                                 ,P_TITLE OUT NOCOPY VARCHAR2
                                 ,P_LABEL_EXPR OUT NOCOPY VARCHAR2
                                 ,P_COLUMN_EXPR OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin HR_REPORTS.GET_DESC_FLEX_CONTEXT(:P_APPL_SHORT_NAME, :P_DESC_FLEX_NAME, :P_TABLE_ALIAS, :P_TITLE, :P_LABEL_EXPR,
    :P_COLUMN_EXPR); end;');
    STPROC.BIND_I(P_APPL_SHORT_NAME);
    STPROC.BIND_I(P_DESC_FLEX_NAME);
    STPROC.BIND_I(P_TABLE_ALIAS);
    STPROC.BIND_O(P_TITLE);
    STPROC.BIND_O(P_LABEL_EXPR);
    STPROC.BIND_O(P_COLUMN_EXPR);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(4
                   ,P_TITLE);
    STPROC.RETRIEVE(5
                   ,P_LABEL_EXPR);
    STPROC.RETRIEVE(6
                   ,P_COLUMN_EXPR);*/null;
  END GET_DESC_FLEX_CONTEXT;

  PROCEDURE GET_DVLPR_DESC_FLEX(P_APPL_SHORT_NAME IN VARCHAR2
                               ,P_DESC_FLEX_NAME IN VARCHAR2
                               ,P_DESC_FLEX_CONTEXT IN VARCHAR2
                               ,P_TABLE_ALIAS IN VARCHAR2
                               ,P_TITLE OUT NOCOPY VARCHAR2
                               ,P_LABEL_EXPR OUT NOCOPY VARCHAR2
                               ,P_COLUMN_EXPR OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin HR_REPORTS.GET_DVLPR_DESC_FLEX(:P_APPL_SHORT_NAME, :P_DESC_FLEX_NAME, :P_DESC_FLEX_CONTEXT, :P_TABLE_ALIAS,
    :P_TITLE, :P_LABEL_EXPR, :P_COLUMN_EXPR); end;');
    STPROC.BIND_I(P_APPL_SHORT_NAME);
    STPROC.BIND_I(P_DESC_FLEX_NAME);
    STPROC.BIND_I(P_DESC_FLEX_CONTEXT);
    STPROC.BIND_I(P_TABLE_ALIAS);
    STPROC.BIND_O(P_TITLE);
    STPROC.BIND_O(P_LABEL_EXPR);
    STPROC.BIND_O(P_COLUMN_EXPR);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(5
                   ,P_TITLE);
    STPROC.RETRIEVE(6
                   ,P_LABEL_EXPR);
    STPROC.RETRIEVE(7
                   ,P_COLUMN_EXPR);*/null;
  END GET_DVLPR_DESC_FLEX;

  FUNCTION GET_PERSON_NAME(P_SESSION_DATE IN DATE
                          ,P_PERSON_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_REPORTS.GET_PERSON_NAME(:P_SESSION_DATE, :P_PERSON_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_SESSION_DATE);
    STPROC.BIND_I(P_PERSON_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_PERSON_NAME;

  FUNCTION GET_SALARY(P_BUSINESS_GROUP_ID IN NUMBER
                     ,P_ASSIGNMENT_ID IN NUMBER
                     ,P_REPORT_DATE IN DATE) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_SALARY(:P_BUSINESS_GROUP_ID, :P_ASSIGNMENT_ID, :P_REPORT_DATE); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_BUSINESS_GROUP_ID);
    STPROC.BIND_I(P_ASSIGNMENT_ID);
    STPROC.BIND_I(P_REPORT_DATE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_SALARY;

  PROCEDURE GET_NEW_HIRE_CONTACT(P_PERSON_ID IN NUMBER
                                ,P_BUSINESS_GROUP_ID IN NUMBER
                                ,P_REPORT_DATE IN DATE
                                ,P_CONTACT_NAME OUT NOCOPY VARCHAR2
                                ,P_CONTACT_TITLE OUT NOCOPY VARCHAR2
                                ,P_CONTACT_PHONE OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin HR_US_REPORTS.GET_NEW_HIRE_CONTACT(:P_PERSON_ID, :P_BUSINESS_GROUP_ID, :P_REPORT_DATE, :P_CONTACT_NAME,
    :P_CONTACT_TITLE, :P_CONTACT_PHONE); end;');
    STPROC.BIND_I(P_PERSON_ID);
    STPROC.BIND_I(P_BUSINESS_GROUP_ID);
    STPROC.BIND_I(P_REPORT_DATE);
    STPROC.BIND_O(P_CONTACT_NAME);
    STPROC.BIND_O(P_CONTACT_TITLE);
    STPROC.BIND_O(P_CONTACT_PHONE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(4
                   ,P_CONTACT_NAME);
    STPROC.RETRIEVE(5
                   ,P_CONTACT_TITLE);
    STPROC.RETRIEVE(6
                   ,P_CONTACT_PHONE);*/null;
  END GET_NEW_HIRE_CONTACT;

  PROCEDURE GET_ADDRESS(P_LOCATION_ID IN NUMBER
                       ,P_ADDRESS OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin HR_US_REPORTS.GET_ADDRESS(:P_LOCATION_ID, :P_ADDRESS); end;');
    STPROC.BIND_I(P_LOCATION_ID);
    STPROC.BIND_O(P_ADDRESS);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,P_ADDRESS);*/null;
  END GET_ADDRESS;

  PROCEDURE GET_EMPLOYEE_ADDRESS(P_PERSON_ID IN NUMBER
                                ,P_ADDRESS OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin HR_US_REPORTS.GET_EMPLOYEE_ADDRESS(:P_PERSON_ID, :P_ADDRESS); end;');
    STPROC.BIND_I(P_PERSON_ID);
    STPROC.BIND_O(P_ADDRESS);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,P_ADDRESS);*/null;
  END GET_EMPLOYEE_ADDRESS;

  PROCEDURE GET_COUNTY_ADDRESS(P_LOCATION_ID IN NUMBER
                              ,P_ADDRESS OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin HR_US_REPORTS.GET_COUNTY_ADDRESS(:P_LOCATION_ID, :P_ADDRESS); end;');
    STPROC.BIND_I(P_LOCATION_ID);
    STPROC.BIND_O(P_ADDRESS);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,P_ADDRESS);*/null;
  END GET_COUNTY_ADDRESS;

  PROCEDURE GET_ACTIVITY(P_ESTABLISHMENT_ID IN NUMBER
                        ,P_ACTIVITY OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin HR_US_REPORTS.GET_ACTIVITY(:P_ESTABLISHMENT_ID, :P_ACTIVITY); end;');
    STPROC.BIND_I(P_ESTABLISHMENT_ID);
    STPROC.BIND_O(P_ACTIVITY);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,P_ACTIVITY);*/null;
  END GET_ACTIVITY;

  FUNCTION GET_CONSOLIDATION_SET(P_CONSOLIDATION_SET_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_CONSOLIDATION_SET(:P_CONSOLIDATION_SET_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_CONSOLIDATION_SET_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_CONSOLIDATION_SET;

  FUNCTION GET_PAYMENT_TYPE_NAME(P_PAYMENT_TYPE_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_PAYMENT_TYPE_NAME(:P_PAYMENT_TYPE_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_PAYMENT_TYPE_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_PAYMENT_TYPE_NAME;

  FUNCTION GET_ELEMENT_TYPE_NAME(P_ELEMENT_TYPE_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_ELEMENT_TYPE_NAME(:P_ELEMENT_TYPE_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_ELEMENT_TYPE_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_ELEMENT_TYPE_NAME;

  FUNCTION GET_TAX_UNIT(P_TAX_UNIT_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_TAX_UNIT(:P_TAX_UNIT_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_TAX_UNIT_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_TAX_UNIT;

  FUNCTION GET_PERSON_NAME(P_PERSON_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_PERSON_NAME(:P_PERSON_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_PERSON_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_PERSON_NAME;

  FUNCTION GET_PAYROLL_ACTION(P_PAYROLL_ACTION_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_PAYROLL_ACTION(:P_PAYROLL_ACTION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_PAYROLL_ACTION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_PAYROLL_ACTION;

  FUNCTION GET_LEGISLATION_CODE(P_BUSINESS_GROUP_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_LEGISLATION_CODE(:P_BUSINESS_GROUP_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_BUSINESS_GROUP_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_LEGISLATION_CODE;

  FUNCTION GET_DEFINED_BALANCE_ID(P_BALANCE_NAME IN VARCHAR2
                                 ,P_DIMENSION_SUFFIX IN VARCHAR2
                                 ,P_BUSINESS_GROUP_ID IN NUMBER) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_DEFINED_BALANCE_ID(:P_BALANCE_NAME, :P_DIMENSION_SUFFIX, :P_BUSINESS_GROUP_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_BALANCE_NAME);
    STPROC.BIND_I(P_DIMENSION_SUFFIX);
    STPROC.BIND_I(P_BUSINESS_GROUP_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_DEFINED_BALANCE_ID;

  FUNCTION GET_STARTUP_DEFINED_BALANCE(P_REPORTING_NAME IN VARCHAR2
                                      ,P_DIMENSION_SUFFIX IN VARCHAR2) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_STARTUP_DEFINED_BALANCE(:P_REPORTING_NAME, :P_DIMENSION_SUFFIX); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_REPORTING_NAME);
    STPROC.BIND_I(P_DIMENSION_SUFFIX);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_STARTUP_DEFINED_BALANCE;

  FUNCTION GET_DEFINED_BALANCE_BY_TYPE(P_BOX_NUM IN VARCHAR2
                                      ,P_DIMENSION_SUFFIX IN VARCHAR2) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_DEFINED_BALANCE_BY_TYPE(:P_BOX_NUM, :P_DIMENSION_SUFFIX); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_BOX_NUM);
    STPROC.BIND_I(P_DIMENSION_SUFFIX);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_DEFINED_BALANCE_BY_TYPE;

  FUNCTION GET_BEN_CLASS_NAME(P_SESSION_DATE IN DATE
                             ,P_BENEFIT_CLASSIFICATION_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_BEN_CLASS_NAME(:P_SESSION_DATE, :P_BENEFIT_CLASSIFICATION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_SESSION_DATE);
    STPROC.BIND_I(P_BENEFIT_CLASSIFICATION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_BEN_CLASS_NAME;

  FUNCTION GET_COBRA_QUALIFYING_EVENT(P_QUALIFYING_EVENT IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_COBRA_QUALIFYING_EVENT(:P_QUALIFYING_EVENT); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_QUALIFYING_EVENT);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_COBRA_QUALIFYING_EVENT;

  FUNCTION GET_COBRA_STATUS(P_COBRA_STATUS IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_COBRA_STATUS(:P_COBRA_STATUS); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_COBRA_STATUS);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_COBRA_STATUS;

  FUNCTION GET_EST_TAX_UNIT(P_STARTING_ORG_ID IN NUMBER
                           ,P_ORG_STRUCTURE_VERSION_ID IN NUMBER) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_EST_TAX_UNIT(:P_STARTING_ORG_ID, :P_ORG_STRUCTURE_VERSION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_STARTING_ORG_ID);
    STPROC.BIND_I(P_ORG_STRUCTURE_VERSION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_EST_TAX_UNIT;

  FUNCTION GET_ORG_HIERARCHY_NAME(P_ORG_STRUCTURE_VERSION_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_ORG_HIERARCHY_NAME(:P_ORG_STRUCTURE_VERSION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_ORG_STRUCTURE_VERSION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_ORG_HIERARCHY_NAME;

  FUNCTION GET_STATE_NAME(P_STATE_CODE IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_STATE_NAME(:P_STATE_CODE); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_STATE_CODE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_STATE_NAME;

  FUNCTION GET_ORG_NAME(P_ORGANIZATION_ID IN NUMBER
                       ,P_BUSINESS_GROUP_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_ORG_NAME(:P_ORGANIZATION_ID, :P_BUSINESS_GROUP_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_ORGANIZATION_ID);
    STPROC.BIND_I(P_BUSINESS_GROUP_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_ORG_NAME;

  FUNCTION GET_CAREER_PATH_NAME(P_CAREER_PATH_ID IN NUMBER
                               ,P_BUSINESS_GROUP_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_CAREER_PATH_NAME(:P_CAREER_PATH_ID, :P_BUSINESS_GROUP_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_CAREER_PATH_ID);
    STPROC.BIND_I(P_BUSINESS_GROUP_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_CAREER_PATH_NAME;

  FUNCTION GET_AAP_ORG_ID(P_AAP_NAME IN VARCHAR2
                         ,P_BUSINESS_GROUP_ID IN NUMBER) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_AAP_ORG_ID(:P_AAP_NAME, :P_BUSINESS_GROUP_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_AAP_NAME);
    STPROC.BIND_I(P_BUSINESS_GROUP_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_AAP_ORG_ID;

  PROCEDURE GET_ADDRESS_31(P_LOCATION_ID IN NUMBER
                          ,P_ADDRESS OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin HR_US_REPORTS.GET_ADDRESS_31(:P_LOCATION_ID, :P_ADDRESS); end;');
    STPROC.BIND_I(P_LOCATION_ID);
    STPROC.BIND_O(P_ADDRESS);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,P_ADDRESS);*/null;
  END GET_ADDRESS_31;

  FUNCTION GET_LOCATION_CODE(P_LOCATION_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := HR_US_REPORTS.GET_LOCATION_CODE(:P_LOCATION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_LOCATION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_LOCATION_CODE;

  PROCEDURE GET_ADDRESS_3LINES(P_PERSON_ID IN NUMBER
                              ,P_EFFECTIVE_DATE IN DATE
                              ,P_ADDR_LINE1 OUT NOCOPY VARCHAR2
                              ,P_ADDR_LINE2 OUT NOCOPY VARCHAR2
                              ,P_CITY_STATE_ZIP OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin HR_US_REPORTS.GET_ADDRESS_3LINES(:P_PERSON_ID, :P_EFFECTIVE_DATE, :P_ADDR_LINE1, :P_ADDR_LINE2,
    :P_CITY_STATE_ZIP); end;');
    STPROC.BIND_I(P_PERSON_ID);
    STPROC.BIND_I(P_EFFECTIVE_DATE);
    STPROC.BIND_O(P_ADDR_LINE1);
    STPROC.BIND_O(P_ADDR_LINE2);
    STPROC.BIND_O(P_CITY_STATE_ZIP);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,P_ADDR_LINE1);
    STPROC.RETRIEVE(4
                   ,P_ADDR_LINE2);
    STPROC.RETRIEVE(5
                   ,P_CITY_STATE_ZIP);*/null;
  END GET_ADDRESS_3LINES;


END PER_PERUSEOC_XMLP_PKG;

/
