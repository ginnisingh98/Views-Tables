--------------------------------------------------------
--  DDL for Package Body XTR_XTRJLDAT_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."XTR_XTRJLDAT_XMLP_PKG" AS
/* $Header: XTRJLDATB.pls 120.2 2008/01/11 11:43:36 vjaganat noship $ */
  FUNCTION CF_SET_PARAFORMULA RETURN VARCHAR2 IS
  BEGIN
    SELECT
      SUBSTR(USER
            ,1
            ,10)
    INTO
      CP_PARA
    FROM
      DUAL;
    RETURN (CP_PARA);
  END CF_SET_PARAFORMULA;

  --FUNCTION BEFOREREPORT(C_DATEFORMAT IN VARCHAR2) RETURN BOOLEAN IS
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    C_DATEFORMAT  VARCHAR2(30);
    L_DMMY_NUM NUMBER;
    L_MESSAGE FND_NEW_MESSAGES.MESSAGE_TEXT%TYPE;
    CURSOR GET_LANGUAGE_DESC IS
      SELECT
        ITEM_NAME,
        SUBSTR(TEXT
              ,1
              ,100) LANG_NAME
      FROM
        XTR_SYS_LANGUAGES_VL
      WHERE MODULE_NAME = 'XTRJLDAT';
  BEGIN
  C_DATEFORMAT :=fnd_global.nls_date_format;
   /* P_JOURNALS_FROM := TO_CHAR(JNLS_FROM_DATE2
                              ,C_DATEFORMAT);
    P_JOURNALS_TO := TO_CHAR(JNLS_TO_DATE2
                            ,C_DATEFORMAT);*/
    P_JOURNALS_FROM_T := TO_CHAR(JNLS_FROM_DATE2
                              ,C_DATEFORMAT);
    P_JOURNALS_TO_T := TO_CHAR(JNLS_TO_DATE2
                            ,C_DATEFORMAT);
    BEGIN
      COMPANY_NAME_HEADER := CEP_STANDARD.GET_WINDOW_SESSION_TITLE;
    EXCEPTION
      WHEN OTHERS THEN
        FND_MESSAGE.SET_NAME('XTR'
                            ,'XTR_LOOKUP_ERR');
        L_MESSAGE := FND_MESSAGE.GET;
        RAISE_APPLICATION_ERROR(-20101
                               ,NULL);
    END;
    IF (P_DISPLAY_DEBUG = 'Y') THEN
      NULL;
    END IF;
    IF P_GL_INTERFACED = 'Y' THEN
      GL_WHERE := ' transfer_to_external_gl is not null ';
    ELSIF P_GL_INTERFACED = 'N' THEN
      GL_WHERE := ' transfer_to_external_gl is null ';
    END IF;
    FOR c IN GET_LANGUAGE_DESC LOOP
      IF C.ITEM_NAME = 'Z1AMOUNT' THEN
        Z1AMOUNT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1AMOUNT_TYPE' THEN
        Z1AMOUNT_TYPE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1COMPANY' THEN
        Z1COMPANY := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2DEAL' THEN
        Z2DEAL := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1GL_CODE' THEN
        Z1GL_CODE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1JOURNALS_FROM' THEN
        Z1JOURNALS_FROM := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1PARAMETERS' THEN
        Z1PARAMETERS := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1TO' THEN
        Z1TO := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1TYPE' THEN
        Z1TYPE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2AND_NAME' THEN
        Z2AND_NAME := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2CR_AMOUNT' THEN
        Z2CR_AMOUNT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2DR_AMOUNT' THEN
        Z2DR_AMOUNT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2END_OF_REPORT' THEN
        Z2END_OF_REPORT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2DESCRIPTION' THEN
        Z2DESCRIPTION := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2JOURNAL_DATE' THEN
        Z2JOURNAL_DATE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2NOTE_ALL_AMOUNTS_ARE_IN' THEN
        Z2NOTE_ALL_AMOUNTS_ARE_IN := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2PORTFOLIO' THEN
        Z2PORTFOLIO := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2PRODUCT' THEN
        Z2PRODUCT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2SUBTYPE' THEN
        Z2SUBTYPE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2PAGE' THEN
        Z2PAGE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'REPORT_DATE' THEN
        REPORT_DATE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2TRANSACTION' THEN
        Z2TRANSACTION := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2NUMBER' THEN
        Z2NUMBER := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2CURRENCY' THEN
        Z2CURRENCY := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1GL_INTERFACED' THEN
        Z1GL_INTERFACED := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2SOB_DESC' THEN
        Z2SOB_DESC := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2TOTAL' THEN
        Z2TOTAL := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2TR_DESC' THEN
        Z2TR_DESC := C.LANG_NAME;
      END IF;
    END LOOP;
    Z2CURRENCY1 := Z2CURRENCY || ' ' || Z1TYPE;
    Z2DEALNO := Z2DEAL || ' ' || Z2NUMBER;
    Z2DEALTYPE := Z2DEAL || ' ' || Z1TYPE;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
        P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;

    JNLS_FROM_DATE2 := TO_CHAR(TO_DATE(P_JOURNALS_FROM
                                      ,'YYYY/MM/DD HH24:MI:SS')
                              ,'DD-MON-YYYY');
    JNLS_TO_DATE2 := TO_CHAR(TO_DATE(P_JOURNALS_TO
                                    ,'YYYY/MM/DD HH24:MI:SS')
                            ,'DD-MON-YYYY');
    COMPANY_CODE2 := P_COMPANY;
    DEAL_NUMBER2 := P_DEAL_NUMBER;
    DEAL_TYPE2 := P_DEAL_TYPE;
    AMOUNT_TYPE2 := P_AMOUNT_TYPE;
    AMOUNT2 := P_AMOUNT;
    GL_CODE2 := P_GL_ACCOUNT;
    P_STRUCT_NUM := nvl(P_NAME,101);
    BEGIN
      IF P_GL_INTERFACED IS NOT NULL THEN
        SELECT
          MEANING
        INTO
          TR_GL_MEANING
        FROM
          FND_LOOKUPS
        WHERE LOOKUP_TYPE = 'YES_NO'
          AND LOOKUP_CODE = P_GL_INTERFACED;
      END IF;
      IF P_AMOUNT_TYPE IS NOT NULL THEN
        SELECT
          USER_AMOUNT_TYPE
        INTO
          AMOUNT_TYPE_NAME
        FROM
          XTR_AMOUNT_TYPES_V
        WHERE DEAL_TYPE = P_DEAL_TYPE
          AND AMOUNT_TYPE = P_AMOUNT_TYPE;
      END IF;
      IF P_DEAL_TYPE IS NOT NULL THEN
        SELECT
          USER_DEAL_TYPE
        INTO
          DEAL_TYPE_NAME
        FROM
          XTR_DEAL_TYPES_V
        WHERE DEAL_TYPE = P_DEAL_TYPE;
      END IF;
      IF P_COMPANY IS NOT NULL THEN
        SELECT
          SHORT_NAME
        INTO
          P_SHORT_NAME
        FROM
          XTR_PARTY_INFO
        WHERE PARTY_CODE = P_COMPANY;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
    BEGIN
      SELECT
        CP.USER_CONCURRENT_PROGRAM_NAME
      INTO
        REPORT_SHORT_NAME2
      FROM
        FND_CONCURRENT_PROGRAMS_VL CP,
        FND_CONCURRENT_REQUESTS CR
      WHERE CR.REQUEST_ID = P_CONC_REQUEST_ID
        AND CP.APPLICATION_ID = CR.PROGRAM_APPLICATION_ID
        AND CP.CONCURRENT_PROGRAM_ID = CR.CONCURRENT_PROGRAM_ID;
        REPORT_SHORT_NAME2 := substr(REPORT_SHORT_NAME2,1,instr(REPORT_SHORT_NAME2,' (XML)'));

    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION C_DATEFORMATFORMULA(C_DATEFORMAT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    --RETURN (C_DATEFORMAT);
    return(fnd_global.nls_date_format);
  END C_DATEFORMATFORMULA;

  FUNCTION CP_PARA_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_PARA;
  END CP_PARA_P;

  FUNCTION CP_FLEXDATA_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_FLEXDATA;
  END CP_FLEXDATA_P;

  FUNCTION WHERE_FLEX_P RETURN VARCHAR2 IS
  BEGIN
    RETURN WHERE_FLEX;
  END WHERE_FLEX_P;

  FUNCTION GL_WHERE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN GL_WHERE;
  END GL_WHERE_P;

END XTR_XTRJLDAT_XMLP_PKG;



/
