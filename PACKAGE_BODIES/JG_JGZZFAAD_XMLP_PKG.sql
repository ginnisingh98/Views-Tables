--------------------------------------------------------
--  DDL for Package Body JG_JGZZFAAD_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JG_JGZZFAAD_XMLP_PKG" AS
/* $Header: JGZZFAADB.pls 120.0 2008/01/08 07:53:54 vjaganat noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS

GL_BALANCING_SEG            NUMBER;
GL_ACCOUNT_SEG              NUMBER;
FA_COST_CTR_SEG             NUMBER;

ACCT_FLEX_STRUCTURE		NUMBER;

APPCOL_NAME		    VARCHAR2(240);
SEG_NAME 		    VARCHAR2(240);
PROMPT			    VARCHAR2(240);
VALUE_SET_NAME		    VARCHAR2(240);

ERROR_MSG                   VARCHAR2(240);
STEP			    VARCHAR2(100);
ERRBUF			    VARCHAR2(200);
RETCODE			    NUMBER;

SUBMIT_ERROR		    EXCEPTION;
C_HEADER			    BOOLEAN;

BEGIN

P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
-- SRW.DO_SQL ('ALTER SESSION SET SQL_TRACE TRUE');

--SRW.USER_EXIT('FND SRWINIT');

/*--------------------------------------------------*/
/* SUBMIT RX REPORT                                 */
/*--------------------------------------------------*/

IF (P_REPORT_TYPE = 'COST')
THEN
  STEP := 'SUBMITTING ASSET COST BALANCES REPORT';

  FARX_BL.ASSET_COST_BALANCES_RPT(
    BOOK 		=> P_BOOK_TYPE_CODE,
    START_PERIOD_NAME 	=> P_FROM_PERIOD,
    END_PERIOD_NAME 	=> P_TO_PERIOD,
    REQUEST_ID 		=> P_CONC_REQUEST_ID,
    USER_ID 		=> 0,
    -- ERRBUF 		=> ERRBUF,		-- BUG 1003349: THE FOLLOWING 4 LINES.
    -- RETCODE 		=> RETCODE);
    RETCODE 		=> RETCODE,
    ERRBUF 		=> ERRBUF);
ELSE
  STEP := 'SUBMITTING ACCUMULATED DEPRN BALANCES REPORT';

  FARX_BL.ACCUM_DEPRN_BALANCES_RPT(
    BOOK 		=> P_BOOK_TYPE_CODE,
    START_PERIOD_NAME 	=> P_FROM_PERIOD,
    END_PERIOD_NAME 	=> P_TO_PERIOD,
    REQUEST_ID 		=> P_CONC_REQUEST_ID,
    USER_ID 		=> 0,
    -- ERRBUF 		=> ERRBUF,		-- BUG 1003349: THE FOLLOWING 4 LINES.
    -- RETCODE 		=> RETCODE);
    RETCODE 		=> RETCODE,
    ERRBUF 		=> ERRBUF);
END IF;

IF (RETCODE <> 0)
THEN
   RAISE SUBMIT_ERROR;
END IF;


/*--------------------------------------------------*/
/* GET SET OF BOOKS AND CURRENCY INFORMATION        */
/*--------------------------------------------------*/

STEP := 'GET SOB AND CURRENCY INFO';

SELECT
	SC.COMPANY_NAME,
	BC.SET_OF_BOOKS_ID,
	SOB.NAME SOB_NAME,
	SOB.CURRENCY_CODE,
	CUR.PRECISION
INTO
	RP_COMPANY_NAME,
	RP_SOB_ID,
	RP_SOB_NAME,
	RP_CURRENCY_CODE,
	RP_PRECISION
FROM
	FA_SYSTEM_CONTROLS	SC,
	FA_BOOK_CONTROLS 	BC,
	GL_LEDGERS_PUBLIC_V     SOB, --GL_SETS_OF_BOOKS 	SOB,
	FND_CURRENCIES		CUR
WHERE
	BC.BOOK_TYPE_CODE = NVL(P_BOOK_TYPE_CODE, BC.BOOK_TYPE_CODE)
AND	SOB.LEDGER_ID = BC.SET_OF_BOOKS_ID
AND	CUR.CURRENCY_CODE = SOB.CURRENCY_CODE
AND	ROWNUM = 1;

/*--------------------------------------------------*/
/* POPULATE RP_DYNAMIC_COL ACCORDING TO REPORT TYPE */
/*--------------------------------------------------*/

STEP := 'POPULATE RP_DYNAMIC_COL ACCORDING TO REPORT TYPE';

IF (P_REPORT_TYPE = 'COST')
THEN
   LP_DYNAMIC_COL := 'I.ADDITIONS';
ELSE
   LP_DYNAMIC_COL := 'I.DEPRECIATION';
END IF;

/*--------------------------------------------------*/
/* GET ACCOUNT SEGEMENT'S VALUESET                  */
/*--------------------------------------------------*/


STEP := 'GET ACCOUNT SEGMENT VALUESET';

-- GET ACCOUNTING FLEX STRUCTURE

SELECT
	BC.ACCOUNTING_FLEX_STRUCTURE
INTO
	ACCT_FLEX_STRUCTURE
FROM
	FA_BOOK_CONTROLS BC
WHERE
	BC.BOOK_TYPE_CODE       = P_BOOK_TYPE_CODE;

-- GET ACCOUNT SEGMENT NUMBERS

FA_RX_SHARED_PKG.GET_ACCT_SEGMENT_NUMBERS (
	BOOK => P_BOOK_TYPE_CODE,
	BALANCING_SEGNUM => GL_BALANCING_SEG,
	ACCOUNT_SEGNUM => GL_ACCOUNT_SEG,
	CC_SEGNUM => FA_COST_CTR_SEG,
	CALLING_FN => 'FA_BALANCES_REPORT');

-- GET VALUESETNAME

IF (FND_FLEX_APIS.GET_SEGMENT_INFO
			(101, 'GL#', ACCT_FLEX_STRUCTURE, GL_ACCOUNT_SEG,
			 APPCOL_NAME, SEG_NAME, PROMPT, VALUE_SET_NAME))
THEN
    RP_ACCT_VALUESET_NAME := VALUE_SET_NAME;
ELSE
    RETURN(FALSE);
END IF;

  --
  -- BUG 876171: GET THE DATE
  --
  --SRW.USER_EXIT('FND DATE4FORMAT RESULT = "CP_DATE_FORMAT"');

RETURN (TRUE);

RETURN NULL; EXCEPTION
   WHEN SUBMIT_ERROR THEN
--	SRW.MESSAGE(123, 'ERROR OCCURRED IN BEFORE REPORT TRIGGER, STEP: ' || STEP || '==> ' || SQLERRM);
	RETURN(FALSE);
   WHEN NO_DATA_FOUND THEN NULL;
   RETURN NULL; WHEN OTHERS THEN
--	SRW.MESSAGE(123, 'ERROR OCCURRED IN BEFORE REPORT TRIGGER, STEP: ' || STEP || '==> ' || SQLERRM);
	RETURN(FALSE);

END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION DISP_OBJECT RETURN BOOLEAN IS
  BEGIN
    IF (P_STATUTORY_REPORT = 'Y') THEN
      RETURN (FALSE);
    ELSE
      RETURN (TRUE);
    END IF;
    RETURN NULL;
  END DISP_OBJECT;

  FUNCTION CF_ADDITIONS_CFFORMULA(CS_ADDITIONS_RTOT IN NUMBER
                                 ,ADDITIONS IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CS_ADDITIONS_RTOT - ADDITIONS);
  END CF_ADDITIONS_CFFORMULA;

  FUNCTION CF_BEGIN_BALANCEFORMULA(CS_BEGIN_BALANCE_RTOT IN NUMBER
                                  ,BEGIN_BALANCE IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CS_BEGIN_BALANCE_RTOT - BEGIN_BALANCE);
  END CF_BEGIN_BALANCEFORMULA;

  FUNCTION CF_END_BALANCE_CFFORMULA(CS_END_BALANCE_RTOT IN NUMBER
                                   ,END_BALANCE IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CS_END_BALANCE_RTOT - END_BALANCE);
  END CF_END_BALANCE_CFFORMULA;

  FUNCTION CF_RETIREMENTS_CFFORMULA(CS_RETIREMENTS_RTOT IN NUMBER
                                   ,RETIREMENTS IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CS_RETIREMENTS_RTOT - RETIREMENTS);
  END CF_RETIREMENTS_CFFORMULA;

  FUNCTION CF_REVALUATIONS_CFFORMULA(CS_REVALUATIONS_RTOT IN NUMBER
                                    ,REVALUATIONS IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CS_REVALUATIONS_RTOT - REVALUATIONS);
  END CF_REVALUATIONS_CFFORMULA;

  FUNCTION CF_RECLASSES_CFFORMULA(CS_RECLASSES_RTOT IN NUMBER
                                 ,RECLASSES IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CS_RECLASSES_RTOT - RECLASSES);
  END CF_RECLASSES_CFFORMULA;

  FUNCTION CF_ADJUSTMENTS_CFFORMULA(CS_ADJUSTMENTS_RTOT IN NUMBER
                                   ,ADJUSTMENTS IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CS_ADJUSTMENTS_RTOT - ADJUSTMENTS);
  END CF_ADJUSTMENTS_CFFORMULA;

  FUNCTION CF_COST_BEGIN_BALANCE_CFFORMUL(CS_COST_BEGIN_BALANCE_RTOT IN NUMBER
                                         ,COST_BEGIN_BALANCE IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CS_COST_BEGIN_BALANCE_RTOT - COST_BEGIN_BALANCE);
  END CF_COST_BEGIN_BALANCE_CFFORMUL;

  FUNCTION CF_PAREANT_ACCT_DESCRFORMULA(PARENT_ACCOUNT IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(PARENT_ACCOUNT)*/NULL;
    RETURN (SUBSTR(FA_RX_SHARED_PKG.GET_FLEX_VAL_MEANING(NULL
                                                       ,RP_ACCT_VALUESET_NAME
                                                       ,PARENT_ACCOUNT)
                 ,1
                 ,80));
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      /*SRW.MESSAGE(123
                 ,'Error retrieving parent account description.')*/NULL;
      /*SRW.MESSAGE(123
                 ,'Valueset Name: ' || RP_ACCT_VALUESET_NAME || ' Parent Account: ' || PARENT_ACCOUNT)*/NULL;
      RETURN NULL;
  END CF_PAREANT_ACCT_DESCRFORMULA;

  FUNCTION CF_PAGE_PARENT_ACCT_DESCRFORMU(PARENT_ACCT IN VARCHAR2
                                         ,PARENT_ACCOUNT IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(PARENT_ACCT)*/NULL;
    RETURN (SUBSTR(FA_RX_SHARED_PKG.GET_FLEX_VAL_MEANING(NULL
                                                       ,RP_ACCT_VALUESET_NAME
                                                       ,PARENT_ACCT)
                 ,1
                 ,80));
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      /*SRW.MESSAGE(123
                 ,'Error retrieving parent account description.')*/NULL;
      /*SRW.MESSAGE(123
                 ,'Valueset Name: ' || RP_ACCT_VALUESET_NAME || ' Parent Account: ' || PARENT_ACCOUNT)*/NULL;
      RETURN NULL;
  END CF_PAGE_PARENT_ACCT_DESCRFORMU;

  FUNCTION CF_COST_BEGIN_BALANCE_REPTOTFO(CS_COST_BEGIN_BALANCE_REPTOT IN NUMBER
                                         ,COST_BEGIN_BALANCE IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CS_COST_BEGIN_BALANCE_REPTOT - COST_BEGIN_BALANCE);
  END CF_COST_BEGIN_BALANCE_REPTOTFO;

  FUNCTION CF_BEGIN_BALANCE_REPTOTFORMULA(CS_BEGIN_BAL_REPTOT IN NUMBER
                                         ,BEGIN_BALANCE IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CS_BEGIN_BAL_REPTOT - BEGIN_BALANCE);
  END CF_BEGIN_BALANCE_REPTOTFORMULA;

  FUNCTION CF_ADDITIONS_REPTOTFORMULA(CS_ADDITIONS_REPTOT IN NUMBER
                                     ,ADDITIONS IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CS_ADDITIONS_REPTOT - ADDITIONS);
  END CF_ADDITIONS_REPTOTFORMULA;

  FUNCTION CF_ADJUSTMENTS_REPTOTFORMULA(CS_ADJUSTMENTS_REPTOT IN NUMBER
                                       ,ADJUSTMENTS IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CS_ADJUSTMENTS_REPTOT - ADJUSTMENTS);
  END CF_ADJUSTMENTS_REPTOTFORMULA;

  FUNCTION CF_RECLASES_REPTOTFORMULA(CS_RECLASSES_REPTOT IN NUMBER
                                    ,RECLASSES IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CS_RECLASSES_REPTOT - RECLASSES);
  END CF_RECLASES_REPTOTFORMULA;

  FUNCTION CF_RETIREMENTS_REPTOTFORMULA(CS_RETIREMENTS_REPTOT IN NUMBER
                                       ,RETIREMENTS IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CS_RETIREMENTS_REPTOT - RETIREMENTS);
  END CF_RETIREMENTS_REPTOTFORMULA;

  FUNCTION CF_REVALUATIONS_REPTOTFORMULA(CS_REVALUATIONS_REPTOT IN NUMBER
                                        ,REVALUATIONS IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CS_REVALUATIONS_REPTOT - REVALUATIONS);
  END CF_REVALUATIONS_REPTOTFORMULA;

  FUNCTION CF_END_BALANCE_REPTOTFORMULA(CS_END_BALANCE_REPTOT IN NUMBER
                                       ,END_BALANCE IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CS_END_BALANCE_REPTOT - END_BALANCE);
  END CF_END_BALANCE_REPTOTFORMULA;

  FUNCTION RP_COMPANY_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_COMPANY_NAME;
  END RP_COMPANY_NAME_P;

  FUNCTION RP_REPORT_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_REPORT_NAME;
  END RP_REPORT_NAME_P;

  FUNCTION RP_SOB_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_SOB_NAME;
  END RP_SOB_NAME_P;

  FUNCTION RP_PRECISION_P RETURN NUMBER IS
  BEGIN
    RETURN RP_PRECISION;
  END RP_PRECISION_P;

  FUNCTION RP_SOB_ID_P RETURN NUMBER IS
  BEGIN
    RETURN RP_SOB_ID;
  END RP_SOB_ID_P;

  FUNCTION RP_CURRENCY_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_CURRENCY_CODE;
  END RP_CURRENCY_CODE_P;

  FUNCTION RP_ACCT_VALUESET_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_ACCT_VALUESET_NAME;
  END RP_ACCT_VALUESET_NAME_P;

  FUNCTION CP_DATE_FORMAT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_DATE_FORMAT;
  END CP_DATE_FORMAT_P;

FUNCTION M_CARRY_FORWARDFORMATTRIGGER RETURN NUMBER IS
BEGIN
  IF (JG_ZZ_REPORT_PKG.FIRST_PAGE)
  THEN
     RETURN(0);
  ELSIF (P_SUMMARY = 'Y')
  THEN
     RETURN(1);
  ELSE
     RETURN(0);
  END IF;
RETURN NULL;
END;
END JG_JGZZFAAD_XMLP_PKG;



/
