--------------------------------------------------------
--  DDL for Package Body AS_SALES_METHODOLOGY_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."AS_SALES_METHODOLOGY_PKG" as
/* $Header: asxsmohb.pls 120.1 2005/06/05 22:52:49 appldev  $ */
procedure INSERT_ROW (
  X_ROWID                   IN  OUT NOCOPY /* file.sql.39 change */ VARCHAR2,
  X_SALES_METHODOLOGY_ID    IN  NUMBER,
  X_SALES_METHODOLOGY_NAME  IN  VARCHAR2,
  X_START_DATE_ACTIVE       IN  DATE,
  X_END_DATE_ACTIVE         IN  DATE,
  X_AUTOCREATETASK_FLAG     IN  VARCHAR2,
  X_DESCRIPTION             IN  VARCHAR2,
  X_ATTRIBUTE1              IN  VARCHAR2,
  X_ATTRIBUTE2              IN  VARCHAR2,
  X_ATTRIBUTE3              IN  VARCHAR2,
  X_ATTRIBUTE4              IN  VARCHAR2,
  X_ATTRIBUTE5              IN  VARCHAR2,
  X_ATTRIBUTE6              IN  VARCHAR2,
  X_ATTRIBUTE7              IN  VARCHAR2,
  X_ATTRIBUTE8              IN  VARCHAR2,
  X_ATTRIBUTE9              IN  VARCHAR2,
  X_ATTRIBUTE10             IN  VARCHAR2,
  X_ATTRIBUTE11             IN  VARCHAR2,
  X_ATTRIBUTE12             IN  VARCHAR2,
  X_ATTRIBUTE13             IN  VARCHAR2,
  X_ATTRIBUTE14             IN  VARCHAR2,
  X_ATTRIBUTE15             IN  VARCHAR2,
  X_ATTRIBUTE_CATEGORY      IN  VARCHAR2,
  X_CREATION_DATE           IN  DATE,
  X_CREATED_BY              IN  NUMBER,
  X_LAST_UPDATE_DATE        IN  DATE,
  X_LAST_UPDATED_BY         IN  NUMBER,
  X_LAST_UPDATE_LOGIN       IN  NUMBER)
  IS
  CURSOR C IS SELECT ROWID FROM AS_SALES_METHODOLOGY_B
    WHERE SALES_METHODOLOGY_ID = X_SALES_METHODOLOGY_ID
    ;
BEGIN
  INSERT INTO AS_SALES_METHODOLOGY_B (
    SALES_METHODOLOGY_ID,
    START_DATE_ACTIVE,
    END_DATE_ACTIVE,
    AUTOCREATETASK_FLAG,
    ATTRIBUTE1,
    ATTRIBUTE2,
    ATTRIBUTE3,
    ATTRIBUTE4,
    ATTRIBUTE5,
    ATTRIBUTE6,
    ATTRIBUTE7,
    ATTRIBUTE8,
    ATTRIBUTE9,
    ATTRIBUTE10,
    ATTRIBUTE11,
    ATTRIBUTE12,
    ATTRIBUTE13,
    ATTRIBUTE14,
    ATTRIBUTE15,
    ATTRIBUTE_CATEGORY,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    OBJECT_VERSION_NUMBER
  ) VALUES (
    X_SALES_METHODOLOGY_ID,
    X_START_DATE_ACTIVE,
    X_END_DATE_ACTIVE,
    X_AUTOCREATETASK_FLAG,
    X_ATTRIBUTE1,
    X_ATTRIBUTE2,
    X_ATTRIBUTE3,
    X_ATTRIBUTE4,
    X_ATTRIBUTE5,
    X_ATTRIBUTE6,
    X_ATTRIBUTE7,
    X_ATTRIBUTE8,
    X_ATTRIBUTE9,
    X_ATTRIBUTE10,
    X_ATTRIBUTE11,
    X_ATTRIBUTE12,
    X_ATTRIBUTE13,
    X_ATTRIBUTE14,
    X_ATTRIBUTE15,
    X_ATTRIBUTE_CATEGORY,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN,
    1
  );

  INSERT INTO AS_SALES_METHODOLOGY_TL (
    SALES_METHODOLOGY_ID,
    SALES_METHODOLOGY_NAME,
    DESCRIPTION,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    LANGUAGE,
    SOURCE_LANG
  ) SELECT
    X_SALES_METHODOLOGY_ID,
    X_SALES_METHODOLOGY_NAME,
    X_DESCRIPTION,
    X_CREATED_BY,
    X_CREATION_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATE_LOGIN,
    L.LANGUAGE_CODE,
    userenv('LANG')
  FROM FND_LANGUAGES L
  WHERE L.INSTALLED_FLAG IN ('I', 'B')
  AND NOT EXISTS
    (SELECT NULL
    FROM AS_SALES_METHODOLOGY_TL T
    WHERE T.SALES_METHODOLOGY_ID = X_SALES_METHODOLOGY_ID
    AND T.LANGUAGE = L.LANGUAGE_CODE);

  OPEN c;
  FETCH c INTO X_ROWID;
  IF (c%NOTFOUND) THEN
    CLOSE c;
    RAISE no_data_found;
  END IF;
  CLOSE c;

END INSERT_ROW;

procedure LOCK_ROW (
  X_SALES_METHODOLOGY_ID in NUMBER,
  X_OBJECT_VERSION_NUMBER in NUMBER
) is
  cursor c is select
          OBJECT_VERSION_NUMBER
    from AS_SALES_METHODOLOGY_B
    where SALES_METHODOLOGY_ID = X_SALES_METHODOLOGY_ID
    and OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER
    for update of SALES_METHODOLOGY_ID nowait;
  recinfo c%rowtype;


begin
  open c;
  fetch c into recinfo;
  if (c%notfound) then
    close c;
    fnd_message.set_name('FND', 'FORM_RECORD_DELETED');
    app_exception.raise_exception;
  end if;

  close c;

  if recinfo.OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER then
    null;
  else
    fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
    app_exception.raise_exception;
  end if;

end LOCK_ROW;

PROCEDURE UPDATE_ROW (
  X_SALES_METHODOLOGY_ID    IN  NUMBER,
  X_OBJECT_VERSION_NUMBER   IN  NUMBER,
  X_SALES_METHODOLOGY_NAME  IN  VARCHAR2,
  X_START_DATE_ACTIVE       IN  DATE,
  X_END_DATE_ACTIVE         IN  DATE,
  X_AUTOCREATETASK_FLAG     IN  VARCHAR2,
  X_DESCRIPTION             IN  VARCHAR2,
  X_ATTRIBUTE1              IN  VARCHAR2,
  X_ATTRIBUTE2              IN  VARCHAR2,
  X_ATTRIBUTE3              IN  VARCHAR2,
  X_ATTRIBUTE4              IN  VARCHAR2,
  X_ATTRIBUTE5              IN  VARCHAR2,
  X_ATTRIBUTE6              IN  VARCHAR2,
  X_ATTRIBUTE7              IN  VARCHAR2,
  X_ATTRIBUTE8              IN  VARCHAR2,
  X_ATTRIBUTE9              IN  VARCHAR2,
  X_ATTRIBUTE10             IN  VARCHAR2,
  X_ATTRIBUTE11             IN  VARCHAR2,
  X_ATTRIBUTE12             IN  VARCHAR2,
  X_ATTRIBUTE13             IN  VARCHAR2,
  X_ATTRIBUTE14             IN  VARCHAR2,
  X_ATTRIBUTE15             IN  VARCHAR2,
  X_ATTRIBUTE_CATEGORY      IN  VARCHAR2,
  X_LAST_UPDATE_DATE        IN  DATE,
  X_LAST_UPDATED_BY         IN  NUMBER,
  X_LAST_UPDATE_LOGIN       IN  NUMBER
) IS
BEGIN
  UPDATE AS_SALES_METHODOLOGY_B SET
    OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER + 1,
    START_DATE_ACTIVE = X_START_DATE_ACTIVE,
    END_DATE_ACTIVE = X_END_DATE_ACTIVE,
    AUTOCREATETASK_FLAG = X_AUTOCREATETASK_FLAG,
    ATTRIBUTE1 = X_ATTRIBUTE1,
    ATTRIBUTE2 = X_ATTRIBUTE2,
    ATTRIBUTE3 = X_ATTRIBUTE3,
    ATTRIBUTE4 = X_ATTRIBUTE4,
    ATTRIBUTE5 = X_ATTRIBUTE5,
    ATTRIBUTE6 = X_ATTRIBUTE6,
    ATTRIBUTE7 = X_ATTRIBUTE7,
    ATTRIBUTE8 = X_ATTRIBUTE8,
    ATTRIBUTE9 = X_ATTRIBUTE9,
    ATTRIBUTE10 = X_ATTRIBUTE10,
    ATTRIBUTE11 = X_ATTRIBUTE11,
    ATTRIBUTE12 = X_ATTRIBUTE12,
    ATTRIBUTE13 = X_ATTRIBUTE13,
    ATTRIBUTE14 = X_ATTRIBUTE14,
    ATTRIBUTE15 = X_ATTRIBUTE15,
    ATTRIBUTE_CATEGORY = X_ATTRIBUTE_CATEGORY,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN
  WHERE SALES_METHODOLOGY_ID = X_SALES_METHODOLOGY_ID ;

  IF (SQL%NOTFOUND) THEN
    RAISE no_data_found;
  END IF;

  UPDATE AS_SALES_METHODOLOGY_TL SET
    SALES_METHODOLOGY_NAME = X_SALES_METHODOLOGY_NAME,
    DESCRIPTION = X_DESCRIPTION,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    SOURCE_LANG = userenv('LANG')
  WHERE SALES_METHODOLOGY_ID = X_SALES_METHODOLOGY_ID
  AND userenv('LANG') IN (LANGUAGE, SOURCE_LANG);

  IF (SQL%NOTFOUND) THEN
    RAISE no_data_found;
  END IF;
END UPDATE_ROW;

procedure DELETE_ROW (
  X_SALES_METHODOLOGY_ID in NUMBER
) IS
BEGIN
  DELETE FROM AS_SALES_METHODOLOGY_TL
  WHERE SALES_METHODOLOGY_ID = X_SALES_METHODOLOGY_ID;


  IF (SQL%NOTFOUND) THEN
    RAISE no_data_found;
  END IF;

  DELETE FROM AS_SALES_METHODOLOGY_B
  WHERE SALES_METHODOLOGY_ID = X_SALES_METHODOLOGY_ID ;

  IF (SQL%NOTFOUND) THEN
    RAISE no_data_found;
  END IF;
END DELETE_ROW;

procedure ADD_LANGUAGE
IS
BEGIN
  DELETE FROM AS_SALES_METHODOLOGY_TL T
  WHERE NOT EXISTS
    (SELECT NULL
    FROM AS_SALES_METHODOLOGY_B B
    WHERE B.SALES_METHODOLOGY_ID = T.SALES_METHODOLOGY_ID
    );

  update AS_SALES_METHODOLOGY_TL T set (
      SALES_METHODOLOGY_NAME,
      DESCRIPTION
    ) = (select
      B.SALES_METHODOLOGY_NAME,
      B.DESCRIPTION
    from AS_SALES_METHODOLOGY_TL B
    where B.SALES_METHODOLOGY_ID = T.SALES_METHODOLOGY_ID
    and B.LANGUAGE = T.SOURCE_LANG)
  where (
      T.SALES_METHODOLOGY_ID,
      T.LANGUAGE
  ) in (select
      SUBT.SALES_METHODOLOGY_ID,
      SUBT.LANGUAGE
    from AS_SALES_METHODOLOGY_TL SUBB, AS_SALES_METHODOLOGY_TL SUBT
    where SUBB.SALES_METHODOLOGY_ID = SUBT.SALES_METHODOLOGY_ID
    and SUBB.LANGUAGE = SUBT.SOURCE_LANG
    and (SUBB.SALES_METHODOLOGY_NAME <> SUBT.SALES_METHODOLOGY_NAME
      or SUBB.DESCRIPTION <> SUBT.DESCRIPTION
      or (SUBB.DESCRIPTION is null and SUBT.DESCRIPTION is not null)
      or (SUBB.DESCRIPTION is not null and SUBT.DESCRIPTION is null)
  ));

  insert into AS_SALES_METHODOLOGY_TL (
    SALES_METHODOLOGY_ID,
    SALES_METHODOLOGY_NAME,
    DESCRIPTION,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    LANGUAGE,
    SOURCE_LANG
  ) select
    B.SALES_METHODOLOGY_ID,
    B.SALES_METHODOLOGY_NAME,
    B.DESCRIPTION,
    B.CREATED_BY,
    B.CREATION_DATE,
    B.LAST_UPDATED_BY,
    B.LAST_UPDATE_DATE,
    B.LAST_UPDATE_LOGIN,
    L.LANGUAGE_CODE,
    B.SOURCE_LANG
  from AS_SALES_METHODOLOGY_TL B, FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and B.LANGUAGE = userenv('LANG')
  and not exists
    (select NULL
    from AS_SALES_METHODOLOGY_TL T
    where T.SALES_METHODOLOGY_ID = B.SALES_METHODOLOGY_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);
end ADD_LANGUAGE;

procedure TRANSLATE_ROW(
  X_SALES_METHODOLOGY_ID in number,
  X_SALES_METHODOLOGY_NAME in varchar2,
  X_DESCRIPTION in varchar2,
  X_OWNER in varchar2) is
begin
  update AS_SALES_METHODOLOGY_TL set
    SALES_METHODOLOGY_NAME= nvl(X_SALES_METHODOLOGY_NAME,SALES_METHODOLOGY_NAME),
    DESCRIPTION= nvl(X_DESCRIPTION,DESCRIPTION),
    LAST_UPDATE_DATE = sysdate,
    LAST_UPDATED_BY = decode(X_OWNER, 'SEED', 1, 0),
    LAST_UPDATE_LOGIN = 0,
    SOURCE_LANG = userenv('LANG')
  where SALES_METHODOLOGY_ID = X_SALES_METHODOLOGY_ID
  and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

  if (sql%notfound) then
    raise no_data_found;
  end if;
end TRANSLATE_ROW;

end AS_SALES_METHODOLOGY_PKG;

/
