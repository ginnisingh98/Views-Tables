--------------------------------------------------------
--  DDL for Package Body WSH_WSHRDPAK_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."WSH_WSHRDPAK_XMLP_PKG" AS
/* $Header: WSHRDPAKB.pls 120.3.12010000.3 2009/12/03 10:43:53 mvudugul ship $ */

FUNCTION AFTERPFORM RETURN BOOLEAN IS
BEGIN
      --STANDALONE CHANGES
      IF WMS_DEPLOY.WMS_DEPLOYMENT_MODE = 'D' THEN
         P_STANDALONE := 'Y';
      ELSE
         P_STANDALONE := 'N';
      END IF;

    RETURN (TRUE);

END AFTERPFORM;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
    L_RETURN_STATUS VARCHAR2(5);
    L_MSG_COUNT NUMBER;
    L_MSG_DATA VARCHAR2(3000);
  BEGIN
    BEGIN
      IF P_PRINT_MODE = 'FINAL' THEN
        WSH_DOCUMENT_PVT.SET_FINAL_PRINT_DATE(1.0
                                             ,NULL
                                             ,'T'
                                             ,NULL
                                             ,L_RETURN_STATUS
                                             ,L_MSG_COUNT
                                             ,L_MSG_DATA
                                             ,P_DELIVERY_ID
                                             ,'PACK_TYPE'
                                             ,CP_PRINT_DATE);
        IF L_RETURN_STATUS <> 'S' THEN
          /*SRW.MESSAGE(1
                     ,'Fatal error encountered when trying to set final print date.')*/NULL;
          /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
        END IF;
      END IF;
    END;
    BEGIN
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Failed in SRWEXIT')*/NULL;
        RAISE;
    END;
    RETURN (TRUE);
  END AFTERREPORT;
  FUNCTION CF_ITEM_NUMFORMULA(C_ITEM_FLEX IN VARCHAR2
                             ,C_INV_ITEM_ID IN NUMBER
                             ,C_DEL_ORG_ID IN NUMBER) RETURN VARCHAR2 IS
    L_ITEM_FLEX VARCHAR2(2000);
  BEGIN
    /*SRW.REFERENCE(C_ITEM_FLEX)*/NULL;
    -- LSP PROJECT : passing p_remove_client_code as 'Y'
    L_ITEM_FLEX := WSH_UTIL_CORE.GET_ITEM_NAME(p_item_id => C_INV_ITEM_ID
                                              ,p_organization_id => NVL(C_DEL_ORG_ID,P_ORGANIZATION_ID)
                                              ,p_remove_client_code => 'Y');
    RETURN (L_ITEM_FLEX);
  EXCEPTION
    WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
      RETURN ('User Exit Failure');
  END CF_ITEM_NUMFORMULA;
  FUNCTION CF_FREIGHT_CARRIERFORMULA(C_SHIP_METHOD IN VARCHAR2
                                    ,C_DEL_ORG_ID IN NUMBER
                                    ,C_Q2_DELIVERY_ID IN NUMBER) RETURN VARCHAR2 IS
    L_CARRIER VARCHAR2(35);
    L_COUNT NUMBER;
    L_SHIP_METHOD_CODE WSH_TRIPS.SHIP_METHOD_CODE%TYPE;
    L_TRIP_PRESENT BOOLEAN := FALSE;
  BEGIN
    /*SRW.REFERENCE(C_SHIP_METHOD)*/NULL;
    /*SRW.REFERENCE(C_DEL_ORG_ID)*/NULL;
    /*SRW.REFERENCE(P_ORGANIZATION_ID)*/NULL;
    /*SRW.REFERENCE(C_Q2_DELIVERY_ID)*/NULL;
    BEGIN
      L_SHIP_METHOD_CODE := NULL;
      SELECT
        WT.SHIP_METHOD_CODE
      INTO L_SHIP_METHOD_CODE
      FROM
        WSH_TRIPS WT,
        WSH_TRIP_STOPS WTS,
        WSH_DELIVERY_ASSIGNMENTS_V WDA,
        WSH_DELIVERY_LEGS WDL
      WHERE WTS.STOP_ID = WDL.PICK_UP_STOP_ID
        AND WDA.DELIVERY_ID = C_Q2_DELIVERY_ID
        AND WDA.DELIVERY_ID = WDL.DELIVERY_ID
        AND WTS.TRIP_ID = WT.TRIP_ID
        AND ROWNUM = 1;
      IF SQL%NOTFOUND THEN
        NULL;
      END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        L_SHIP_METHOD_CODE := NULL;
    END;
    IF L_SHIP_METHOD_CODE IS NULL THEN
      L_SHIP_METHOD_CODE := C_SHIP_METHOD;
    ELSE
      L_TRIP_PRESENT := TRUE;
    END IF;
    IF L_SHIP_METHOD_CODE IS NOT NULL THEN
      SELECT
        COUNT(NVL(SUBSTRB(A.SHIP_METHOD_MEANING
                         ,1
                         ,35)
                 ,L_SHIP_METHOD_CODE))
      INTO L_COUNT
      FROM
        WSH_CARRIER_SERVICES A,
        WSH_ORG_CARRIER_SERVICES B
      WHERE A.SHIP_METHOD_CODE = L_SHIP_METHOD_CODE
        AND A.CARRIER_SERVICE_ID = B.CARRIER_SERVICE_ID
        AND B.ORGANIZATION_ID = NVL(C_DEL_ORG_ID
         ,P_ORGANIZATION_ID);
      IF NVL(L_COUNT
         ,0) <> 1 THEN
        L_CARRIER := '';
      ELSE
        SELECT
          NVL(SUBSTRB(A.SHIP_METHOD_MEANING
                     ,1
                     ,35)
             ,L_SHIP_METHOD_CODE)
        INTO L_CARRIER
        FROM
          WSH_CARRIER_SERVICES A,
          WSH_ORG_CARRIER_SERVICES B
        WHERE A.SHIP_METHOD_CODE = L_SHIP_METHOD_CODE
          AND A.CARRIER_SERVICE_ID = B.CARRIER_SERVICE_ID
          AND B.ORGANIZATION_ID = NVL(C_DEL_ORG_ID
           ,P_ORGANIZATION_ID);
      END IF;
    ELSE
      L_CARRIER := '';
    END IF;
    IF (L_TRIP_PRESENT AND L_CARRIER IS NULL) THEN
      L_CARRIER := L_SHIP_METHOD_CODE;
    END IF;
    RETURN (L_CARRIER);
  END CF_FREIGHT_CARRIERFORMULA;
  FUNCTION CF_FREIGHT_TERMSFORMULA(C_FREIGHT_TERMS_CODE IN VARCHAR2) RETURN VARCHAR2 IS
    L_FREIGHT_TERMS VARCHAR2(80);
  BEGIN
    /*SRW.REFERENCE(C_FREIGHT_TERMS_CODE)*/NULL;
    IF CP_SOURCE_CODE = 'OE' THEN
      IF C_FREIGHT_TERMS_CODE IS NOT NULL THEN
        SELECT
          FV.FREIGHT_TERMS
        INTO L_FREIGHT_TERMS
        FROM
          OE_FRGHT_TERMS_ACTIVE_V FV
        WHERE FV.FREIGHT_TERMS_CODE = C_FREIGHT_TERMS_CODE;
      ELSE
        L_FREIGHT_TERMS := '';
      END IF;
    ELSIF CP_SOURCE_CODE = 'OKE' THEN
      L_FREIGHT_TERMS := '';
    END IF;
    RETURN (L_FREIGHT_TERMS);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      /*SRW.MESSAGE(1
                 ,'Freight terms lookups not found.')*/NULL;
      RETURN (NULL);
    WHEN OTHERS THEN
      RAISE;
  END CF_FREIGHT_TERMSFORMULA;
  FUNCTION CF_FOBFORMULA(C_FOB_CODE IN VARCHAR2) RETURN VARCHAR2 IS
    L_FOB VARCHAR2(80);
  BEGIN
    /*SRW.REFERENCE(C_FOB_CODE)*/NULL;
    IF CP_SOURCE_CODE = 'OE' THEN
      IF C_FOB_CODE IS NOT NULL THEN
        SELECT
          FOB
        INTO L_FOB
        FROM
          OE_FOBS_ACTIVE_V FV
        WHERE FV.FOB_CODE = C_FOB_CODE;
      ELSE
        L_FOB := '';
      END IF;
    ELSIF CP_SOURCE_CODE = 'OKE' THEN
      L_FOB := '';
    END IF;
    RETURN (L_FOB);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      /*SRW.MESSAGE(1
                 ,'FOB lookups not found.')*/NULL;
      RETURN (NULL);
    WHEN OTHERS THEN
      RAISE;
  END CF_FOBFORMULA;
  FUNCTION CF_CUST_ITEM_NUMFORMULA(C_CUSTOMER_ITEM_ID IN NUMBER) RETURN VARCHAR2 IS
    L_CUST_ITEM_NUMBER VARCHAR2(50);
  BEGIN
    /*SRW.REFERENCE(C_CUSTOMER_ITEM_ID)*/NULL;
    IF C_CUSTOMER_ITEM_ID IS NOT NULL THEN
      SELECT
        CUSTOMER_ITEM_NUMBER
      INTO L_CUST_ITEM_NUMBER
      FROM
        MTL_CUSTOMER_ITEMS MCI
      WHERE MCI.CUSTOMER_ITEM_ID = C_CUSTOMER_ITEM_ID;
    ELSE
      L_CUST_ITEM_NUMBER := '';
    END IF;
    RETURN (L_CUST_ITEM_NUMBER);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN ('');
  END CF_CUST_ITEM_NUMFORMULA;
  FUNCTION CF_FROM_CITY_STATE_ZIPFORMULA(C_FROM_CITY IN VARCHAR2
                                        ,C_FROM_POSTAL_CODE IN VARCHAR2
                                        ,C_FROM_REGION IN VARCHAR2) RETURN VARCHAR2 IS
    CITY_REGION_POSTAL VARCHAR2(190);
  BEGIN
    /*SRW.REFERENCE(C_FROM_CITY)*/NULL;
    /*SRW.REFERENCE(C_FROM_POSTAL_CODE)*/NULL;
    /*SRW.REFERENCE(C_FROM_REGION)*/NULL;
    CITY_REGION_POSTAL := WSH_UTIL_CORE.CITY_REGION_POSTAL(C_FROM_CITY
                                                          ,C_FROM_REGION
                                                          ,C_FROM_POSTAL_CODE);
    IF (CITY_REGION_POSTAL IS NULL) THEN
      CITY_REGION_POSTAL := C_FROM_CITY || ', ' || C_FROM_REGION || ' ' || C_FROM_POSTAL_CODE;
    END IF;
    RETURN (CITY_REGION_POSTAL);
  END CF_FROM_CITY_STATE_ZIPFORMULA;
  FUNCTION CF_TO_CITY_STATE_ZIPFORMULA(C_TO_CITY IN VARCHAR2
                                      ,C_TO_POSTAL_CODE IN VARCHAR2
                                      ,C_TO_REGION IN VARCHAR2) RETURN VARCHAR2 IS
    CITY_REGION_POSTAL VARCHAR2(190);
  BEGIN
    /*SRW.REFERENCE(C_TO_CITY)*/NULL;
    /*SRW.REFERENCE(C_TO_POSTAL_CODE)*/NULL;
    /*SRW.REFERENCE(C_TO_REGION)*/NULL;
    CITY_REGION_POSTAL := WSH_UTIL_CORE.CITY_REGION_POSTAL(C_TO_CITY
                                                          ,C_TO_REGION
                                                          ,C_TO_POSTAL_CODE);
    RETURN (CITY_REGION_POSTAL);
  END CF_TO_CITY_STATE_ZIPFORMULA;
  FUNCTION CF_BILL_CITY_STATE_ZIPFORMULA( CP_BILL_TOWN_OR_CITY in varchar2,CP_BILL_POSTAL_CODE in varchar2,
 CP_BILL_REGION in varchar2 ) RETURN VARCHAR2 IS
    CITY_REGION_POSTAL VARCHAR2(190);
  BEGIN
    /*SRW.REFERENCE(CP_BILL_TOWN_OR_CITY)*/NULL;
    /*SRW.REFERENCE(CP_BILL_POSTAL_CODE)*/NULL;
    /*SRW.REFERENCE(CP_BILL_REGION)*/NULL;
    CITY_REGION_POSTAL := WSH_UTIL_CORE.CITY_REGION_POSTAL(CP_BILL_TOWN_OR_CITY
                                                          ,CP_BILL_REGION
                                                          ,CP_BILL_POSTAL_CODE);
    IF (CITY_REGION_POSTAL IS NULL) THEN
      CITY_REGION_POSTAL := CP_BILL_TOWN_OR_CITY || ', ' || CP_BILL_REGION || ' ' || CP_BILL_POSTAL_CODE;
    END IF;
    RETURN (CITY_REGION_POSTAL);
  END CF_BILL_CITY_STATE_ZIPFORMULA;
  FUNCTION CF_CUM_QTYFORMULA(C_DEL_CUSTOMER_ID IN NUMBER
                            ,C_CUSTOMER_ID IN NUMBER
                            ,C_SRC_LINE_ID IN NUMBER) RETURN NUMBER IS
    L_RESULT NUMBER;
    L_RETURN_STATUS VARCHAR2(5);
    L_MSG_COUNT NUMBER;
    L_MSG_DATA VARCHAR2(3000);
    L_CUSTOMER_ID WSH_NEW_DELIVERIES.CUSTOMER_ID%TYPE;
  BEGIN
    /*SRW.REFERENCE(C_DEL_CUSTOMER_ID)*/NULL;
    /*SRW.REFERENCE(C_CUSTOMER_ID)*/NULL;
    /*SRW.REFERENCE(C_SRC_LINE_ID)*/NULL;
    L_CUSTOMER_ID := NVL(C_CUSTOMER_ID
                        ,C_DEL_CUSTOMER_ID);
    L_RESULT := WSH_DOCUMENT_PVT.GET_CUMQTY(1.0
                                           ,NULL
                                           ,NULL
                                           ,NULL
                                           ,L_RETURN_STATUS
                                           ,L_MSG_COUNT
                                           ,L_MSG_DATA
                                           ,L_CUSTOMER_ID
                                           ,C_SRC_LINE_ID);
    RETURN ROUND(NVL(L_RESULT
                    ,0)
                ,P_QUANTITY_PRECISION);
  END CF_CUM_QTYFORMULA;
  FUNCTION CF_UNSHIPPED_QTYFORMULA(C_SRC_LINE_ID IN NUMBER) RETURN NUMBER IS
    TOTAL_UNSHIPPED_QUANTITY NUMBER;
    L_LINE_SET_ID NUMBER;
    L_LINE_ID NUMBER;
  BEGIN
    IF CP_SOURCE_CODE = 'OE' THEN
      SELECT
        NVL(L.LINE_SET_ID
           ,-999),
        L.LINE_ID
      INTO L_LINE_SET_ID,L_LINE_ID
      FROM
        OE_ORDER_LINES_ALL L
      WHERE L.LINE_ID = C_SRC_LINE_ID;
      SELECT
        SUM(WDD.REQUESTED_QUANTITY) - NVL(SUM(WDD.SHIPPED_QUANTITY)
           ,0)
      INTO TOTAL_UNSHIPPED_QUANTITY
      FROM
        WSH_DELIVERY_DETAILS WDD,
        OE_ORDER_LINES_ALL L
      WHERE WDD.SOURCE_LINE_ID = L.LINE_ID
        AND WDD.SOURCE_CODE = 'OE'
        AND WDD.CONTAINER_FLAG = 'N'
        AND ( ( L.LINE_SET_ID is not null
        AND L.LINE_SET_ID = L_LINE_SET_ID )
      OR ( L.LINE_ID = L_LINE_ID ) );
    ELSIF CP_SOURCE_CODE = 'OKE' THEN
      SELECT
        SUM(WDD.REQUESTED_QUANTITY) - NVL(SUM(WDD.SHIPPED_QUANTITY)
           ,0)
      INTO TOTAL_UNSHIPPED_QUANTITY
      FROM
        WSH_DELIVERY_DETAILS WDD
      WHERE WDD.SOURCE_LINE_ID = C_SRC_LINE_ID
        AND WDD.SOURCE_CODE = 'OKE';
    END IF;
    RETURN TOTAL_UNSHIPPED_QUANTITY;
  END CF_UNSHIPPED_QTYFORMULA;
  FUNCTION CF_FROM_ADDR_2FORMULA(C_FROM_ADDRESS_2 IN VARCHAR2
                                ,C_FROM_ADDRESS_3 IN VARCHAR2
                                ,CF_FROM_CITY_STATE_ZIP IN VARCHAR2
                                ,C_FROM_COUNTRY IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_FROM_ADDRESS_2)*/NULL;
    /*SRW.REFERENCE(C_FROM_ADDRESS_3)*/NULL;
    /*SRW.REFERENCE(CF_FROM_CITY_STATE_ZIP)*/NULL;
    /*SRW.REFERENCE(C_FROM_COUNTRY)*/NULL;
    IF (C_FROM_ADDRESS_2 IS NOT NULL) THEN
      RETURN (C_FROM_ADDRESS_2);
    ELSIF (C_FROM_ADDRESS_2 IS NULL AND C_FROM_ADDRESS_3 IS NOT NULL) THEN
      RETURN (C_FROM_ADDRESS_3);
    ELSIF (C_FROM_ADDRESS_2 IS NULL AND C_FROM_ADDRESS_3 IS NULL) THEN
      RETURN (CF_FROM_CITY_STATE_ZIP || ', ' || C_FROM_COUNTRY);
    END IF;
  END CF_FROM_ADDR_2FORMULA;
  FUNCTION CF_FROM_ADDR3FORMULA(C_FROM_ADDRESS_2 IN VARCHAR2
                               ,C_FROM_ADDRESS_3 IN VARCHAR2
                               ,CF_FROM_CITY_STATE_ZIP IN VARCHAR2
                               ,C_FROM_COUNTRY IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_FROM_ADDRESS_2)*/NULL;
    /*SRW.REFERENCE(C_FROM_ADDRESS_3)*/NULL;
    /*SRW.REFERENCE(CF_FROM_CITY_STATE_ZIP)*/NULL;
    /*SRW.REFERENCE(C_FROM_COUNTRY)*/NULL;
    IF (C_FROM_ADDRESS_2 IS NOT NULL AND C_FROM_ADDRESS_3 IS NOT NULL) THEN
      RETURN (C_FROM_ADDRESS_3);
    ELSIF (C_FROM_ADDRESS_2 IS NOT NULL AND C_FROM_ADDRESS_3 IS NULL) THEN
      RETURN (CF_FROM_CITY_STATE_ZIP || ', ' || C_FROM_COUNTRY);
    ELSIF (C_FROM_ADDRESS_2 IS NULL AND C_FROM_ADDRESS_3 IS NOT NULL) THEN
      RETURN (CF_FROM_CITY_STATE_ZIP || ', ' || C_FROM_COUNTRY);
    ELSIF (C_FROM_ADDRESS_2 IS NULL AND C_FROM_ADDRESS_3 IS NULL) THEN
      RETURN ('                  ');
    END IF;
  END CF_FROM_ADDR3FORMULA;
  FUNCTION CF_FROM_CITYFORMULA(C_FROM_ADDRESS_2 IN VARCHAR2
                              ,C_FROM_ADDRESS_3 IN VARCHAR2
                              ,CF_FROM_CITY_STATE_ZIP IN VARCHAR2
                              ,C_FROM_COUNTRY IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(C_FROM_ADDRESS_2)*/NULL;
    /*SRW.REFERENCE(C_FROM_ADDRESS_3)*/NULL;
    /*SRW.REFERENCE(CF_FROM_CITY_STATE_ZIP)*/NULL;
    /*SRW.REFERENCE(C_FROM_COUNTRY)*/NULL;
    IF (C_FROM_ADDRESS_2 IS NOT NULL AND C_FROM_ADDRESS_3 IS NOT NULL) THEN
      RETURN (CF_FROM_CITY_STATE_ZIP || ', ' || C_FROM_COUNTRY);
    ELSIF (C_FROM_ADDRESS_2 IS NULL OR C_FROM_ADDRESS_3 IS NULL) THEN
      RETURN ('                     ');
    END IF;
  END CF_FROM_CITYFORMULA;
  FUNCTION CF_TO_ADDR_2FORMULA(C_TO_ADDRESS_2 IN VARCHAR2
                              ,C_TO_ADDRESS_3 IN VARCHAR2
                              ,C_TO_ADDRESS_4 IN VARCHAR2
                              ,CF_TO_CITY_STATE_ZIP IN VARCHAR2
                              ,C_TO_COUNTRY IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(C_TO_ADDRESS_2)*/NULL;
    /*SRW.REFERENCE(C_TO_ADDRESS_3)*/NULL;
    /*SRW.REFERENCE(C_TO_ADDRESS_4)*/NULL;
    /*SRW.REFERENCE(CF_TO_CITY_STATE_ZIP)*/NULL;
    /*SRW.REFERENCE(C_TO_COUNTRY)*/NULL;
    IF (C_TO_ADDRESS_2 IS NOT NULL) THEN
      RETURN (C_TO_ADDRESS_2);
    ELSIF (C_TO_ADDRESS_2 IS NULL AND C_TO_ADDRESS_3 IS NOT NULL) THEN
      RETURN (C_TO_ADDRESS_3);
    ELSIF (C_TO_ADDRESS_2 IS NULL AND C_TO_ADDRESS_3 IS NULL AND C_TO_ADDRESS_4 IS NOT NULL) THEN
      RETURN (C_TO_ADDRESS_4);
    ELSIF (C_TO_ADDRESS_2 IS NULL AND C_TO_ADDRESS_3 IS NULL AND C_TO_ADDRESS_4 IS NULL) THEN
      IF (CF_TO_CITY_STATE_ZIP IS NULL) THEN
        RETURN (C_TO_COUNTRY);
      ELSE
        RETURN (CF_TO_CITY_STATE_ZIP || ', ' || C_TO_COUNTRY);
      END IF;
    END IF;
  END CF_TO_ADDR_2FORMULA;
  FUNCTION CF_TO_ADDR_3FORMULA(C_TO_ADDRESS_2 IN VARCHAR2
                              ,C_TO_ADDRESS_3 IN VARCHAR2
                              ,C_TO_ADDRESS_4 IN VARCHAR2
                              ,CF_TO_CITY_STATE_ZIP IN VARCHAR2
                              ,C_TO_COUNTRY IN VARCHAR2) RETURN CHAR IS
    L_CF_TO_CITY_STATE_ZIP VARCHAR2(190);
  BEGIN
    /*SRW.REFERENCE(C_TO_ADDRESS_2)*/NULL;
    /*SRW.REFERENCE(C_TO_ADDRESS_3)*/NULL;
    /*SRW.REFERENCE(C_TO_ADDRESS_4)*/NULL;
    /*SRW.REFERENCE(CF_TO_CITY_STATE_ZIP)*/NULL;
    /*SRW.REFERENCE(C_TO_COUNTRY)*/NULL;
    IF (CF_TO_CITY_STATE_ZIP IS NULL) THEN
      L_CF_TO_CITY_STATE_ZIP := '';
    ELSE
      L_CF_TO_CITY_STATE_ZIP := CF_TO_CITY_STATE_ZIP || ', ';
    END IF;
    IF (C_TO_ADDRESS_2 IS NOT NULL AND C_TO_ADDRESS_3 IS NOT NULL AND C_TO_ADDRESS_4 IS NOT NULL) THEN
      RETURN (C_TO_ADDRESS_3);
    ELSIF (C_TO_ADDRESS_2 IS NOT NULL AND C_TO_ADDRESS_3 IS NULL AND C_TO_ADDRESS_4 IS NULL) THEN
      RETURN (L_CF_TO_CITY_STATE_ZIP || C_TO_COUNTRY);
    ELSIF (C_TO_ADDRESS_2 IS NOT NULL AND C_TO_ADDRESS_3 IS NULL AND C_TO_ADDRESS_4 IS NOT NULL) THEN
      RETURN (C_TO_ADDRESS_4);
    ELSIF (C_TO_ADDRESS_2 IS NULL AND C_TO_ADDRESS_3 IS NOT NULL AND C_TO_ADDRESS_4 IS NOT NULL) THEN
      RETURN (C_TO_ADDRESS_4);
    ELSIF (C_TO_ADDRESS_2 IS NOT NULL AND C_TO_ADDRESS_3 IS NOT NULL AND C_TO_ADDRESS_4 IS NULL) THEN
      RETURN (C_TO_ADDRESS_3);
    ELSIF (C_TO_ADDRESS_2 IS NULL AND C_TO_ADDRESS_3 IS NOT NULL AND C_TO_ADDRESS_4 IS NULL) THEN
      RETURN (L_CF_TO_CITY_STATE_ZIP || C_TO_COUNTRY);
    ELSIF (C_TO_ADDRESS_2 IS NULL AND C_TO_ADDRESS_3 IS NULL AND C_TO_ADDRESS_4 IS NOT NULL) THEN
      RETURN (L_CF_TO_CITY_STATE_ZIP || C_TO_COUNTRY);
    ELSIF (C_TO_ADDRESS_2 IS NULL AND C_TO_ADDRESS_3 IS NULL AND C_TO_ADDRESS_4 IS NULL) THEN
      RETURN ('                  ');
    END IF;
  END CF_TO_ADDR_3FORMULA;
  FUNCTION CF_TO_CITYFORMULA(C_TO_ADDRESS_2 IN VARCHAR2
                            ,C_TO_ADDRESS_3 IN VARCHAR2
                            ,CF_TO_CITY_STATE_ZIP IN VARCHAR2
                            ,C_TO_COUNTRY IN VARCHAR2
                            ,C_TO_ADDRESS_4 IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(C_TO_ADDRESS_2)*/NULL;
    /*SRW.REFERENCE(C_TO_ADDRESS_3)*/NULL;
    /*SRW.REFERENCE(CF_TO_CITY_STATE_ZIP)*/NULL;
    /*SRW.REFERENCE(C_TO_COUNTRY)*/NULL;
    /*SRW.REFERENCE(C_TO_ADDRESS_4)*/NULL;
    IF (C_TO_ADDRESS_2 IS NOT NULL AND C_TO_ADDRESS_3 IS NOT NULL AND C_TO_ADDRESS_4 IS NOT NULL) THEN
      RETURN (CF_TO_CITY_STATE_ZIP || ', ' || C_TO_COUNTRY);
    ELSE
      RETURN ('                     ');
    END IF;
  END CF_TO_CITYFORMULA;
  FUNCTION CF_BILL_ADDR_2FORMULA(CF_BILL_CITY_STATE_ZIP IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(CP_BILL_ADDRESS_LINE_2)*/NULL;
    /*SRW.REFERENCE(CP_BILL_ADDRESS_LINE_3)*/NULL;
    /*SRW.REFERENCE(CP_BILL_ADDRESS_LINE_4)*/NULL;
    /*SRW.REFERENCE(CF_BILL_CITY_STATE_ZIP)*/NULL;
    /*SRW.REFERENCE(CP_BILL_COUNTRY)*/NULL;
    IF (CP_BILL_ADDRESS_LINE_2 IS NOT NULL) THEN
      RETURN (CP_BILL_ADDRESS_LINE_2);
    ELSIF (CP_BILL_ADDRESS_LINE_2 IS NULL AND CP_BILL_ADDRESS_LINE_3 IS NOT NULL) THEN
      RETURN (CP_BILL_ADDRESS_LINE_3);
    ELSIF (CP_BILL_ADDRESS_LINE_2 IS NULL AND CP_BILL_ADDRESS_LINE_3 IS NULL AND CP_BILL_ADDRESS_LINE_4 IS NOT NULL) THEN
      RETURN (CP_BILL_ADDRESS_LINE_4);
    ELSIF (CP_BILL_ADDRESS_LINE_2 IS NULL AND CP_BILL_ADDRESS_LINE_3 IS NULL AND CP_BILL_ADDRESS_LINE_4 IS NULL) THEN
      RETURN (CF_BILL_CITY_STATE_ZIP || ', ' || CP_BILL_COUNTRY);
    END IF;
  END CF_BILL_ADDR_2FORMULA;
  FUNCTION CF_BILL_ADDR_3FORMULA(CF_BILL_CITY_STATE_ZIP IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(CP_BILL_ADDRESS_LINE_2)*/NULL;
    /*SRW.REFERENCE(CP_BILL_ADDRESS_LINE_3)*/NULL;
    /*SRW.REFERENCE(CP_BILL_ADDRESS_LINE_4)*/NULL;
    /*SRW.REFERENCE(CF_BILL_CITY_STATE_ZIP)*/NULL;
    /*SRW.REFERENCE(CP_BILL_COUNTRY)*/NULL;
    IF (CP_BILL_ADDRESS_LINE_2 IS NOT NULL AND CP_BILL_ADDRESS_LINE_3 IS NOT NULL) THEN
      RETURN (CP_BILL_ADDRESS_LINE_3);
    ELSIF (CP_BILL_ADDRESS_LINE_2 IS NOT NULL AND CP_BILL_ADDRESS_LINE_3 IS NULL AND CP_BILL_ADDRESS_LINE_4 IS NOT NULL) THEN
      RETURN (CP_BILL_ADDRESS_LINE_4);
    ELSIF (CP_BILL_ADDRESS_LINE_2 IS NOT NULL AND CP_BILL_ADDRESS_LINE_3 IS NULL AND CP_BILL_ADDRESS_LINE_4 IS NULL) THEN
      RETURN (CF_BILL_CITY_STATE_ZIP || ', ' || CP_BILL_COUNTRY);
    ELSIF (CP_BILL_ADDRESS_LINE_2 IS NULL AND CP_BILL_ADDRESS_LINE_3 IS NOT NULL AND CP_BILL_ADDRESS_LINE_4 IS NOT NULL) THEN
      RETURN (CP_BILL_ADDRESS_LINE_4);
    ELSIF (CP_BILL_ADDRESS_LINE_2 IS NULL AND CP_BILL_ADDRESS_LINE_3 IS NULL AND CP_BILL_ADDRESS_LINE_4 IS NOT NULL) THEN
      RETURN (CF_BILL_CITY_STATE_ZIP || ', ' || CP_BILL_COUNTRY);
    ELSIF (CP_BILL_ADDRESS_LINE_2 IS NULL AND CP_BILL_ADDRESS_LINE_3 IS NOT NULL AND CP_BILL_ADDRESS_LINE_4 IS NULL) THEN
      RETURN (CF_BILL_CITY_STATE_ZIP || ', ' || CP_BILL_COUNTRY);
    ELSIF (CP_BILL_ADDRESS_LINE_2 IS NULL AND CP_BILL_ADDRESS_LINE_3 IS NULL AND CP_BILL_ADDRESS_LINE_4 IS NULL) THEN
      RETURN ('');
    END IF;
  END CF_BILL_ADDR_3FORMULA;
  FUNCTION CF_BILL_CITYFORMULA(CF_BILL_CITY_STATE_ZIP IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(CP_BILL_ADDRESS_LINE_2)*/NULL;
    /*SRW.REFERENCE(CP_BILL_ADDRESS_LINE_3)*/NULL;
    /*SRW.REFERENCE(CP_BILL_ADDRESS_LINE_4)*/NULL;
    /*SRW.REFERENCE(CF_BILL_CITY_STATE_ZIP)*/NULL;
    /*SRW.REFERENCE(CP_BILL_COUNTRY)*/NULL;
    IF (CP_BILL_ADDRESS_LINE_2 IS NOT NULL AND CP_BILL_ADDRESS_LINE_3 IS NOT NULL AND CP_BILL_ADDRESS_LINE_4 IS NOT NULL) THEN
      RETURN (CF_BILL_CITY_STATE_ZIP || ', ' || CP_BILL_COUNTRY);
    ELSIF (CP_BILL_ADDRESS_LINE_2 IS NULL OR CP_BILL_ADDRESS_LINE_3 IS NULL OR CP_BILL_ADDRESS_LINE_4 IS NULL) THEN
      RETURN ('');
    END IF;
  END CF_BILL_CITYFORMULA;
  FUNCTION CF_UNSHIP_ITEM_NAMEFORMULA(BO_INVENTORY_ITEM_ID IN NUMBER
                                     ,BO_ORGANIZATION_ID IN NUMBER) RETURN CHAR IS
    L_BO_ITEM_FLEX VARCHAR2(2000);
  BEGIN
    /*SRW.REFERENCE(BO_INVENTORY_ITEM_ID)*/NULL;
    /*SRW.REFERENCE(BO_ORGANIZATION_ID)*/NULL;
    L_BO_ITEM_FLEX := WSH_UTIL_CORE.GET_ITEM_NAME(BO_INVENTORY_ITEM_ID
                                                 ,NVL(BO_ORGANIZATION_ID
                                                    ,P_ORGANIZATION_ID));
    RETURN (L_BO_ITEM_FLEX);
  EXCEPTION
    WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
      RETURN ('User Exit Failure');
  END CF_UNSHIP_ITEM_NAMEFORMULA;
  FUNCTION CF_NUM_OF_LPNSFORMULA(C_Q1_DELIVERY_ID IN NUMBER
                                ,NUM_LPN IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      CURSOR BOXES IS
        SELECT
          count(*)
        FROM
          WSH_DELIVERY_ASSIGNMENTS_V WDA,
          WSH_DELIVERY_DETAILS WDD
        WHERE WDD.DELIVERY_DETAIL_ID = WDA.DELIVERY_DETAIL_ID
          AND WDD.CONTAINER_FLAG = 'Y'
          AND WDA.PARENT_DELIVERY_DETAIL_ID IS NULL
          AND WDA.DELIVERY_ID is not null
          AND WDA.DELIVERY_ID = C_Q1_DELIVERY_ID;
      NUM_OF_BOXES NUMBER;
    BEGIN
      IF (NUM_LPN IS NULL) THEN
        OPEN BOXES;
        FETCH BOXES
         INTO NUM_OF_BOXES;
        CLOSE BOXES;
        RETURN (NUM_OF_BOXES);
      ELSE
        RETURN (NUM_LPN);
      END IF;
    END;
    RETURN NULL;
  END CF_NUM_OF_LPNSFORMULA;
  FUNCTION CF_BILL_TO_LOC1FORMULA(CF_OE_LINE_ID IN NUMBER
                                 ,F_OE_LINE_ID IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      BILL_TO_LOC_ID NUMBER;
    BEGIN
      /*SRW.REFERENCE(CF_OE_LINE_ID)*/NULL;
      IF CP_SOURCE_CODE = 'OE' THEN
        SELECT
          PS.LOCATION_ID
        INTO BILL_TO_LOC_ID
        FROM
          HZ_PARTY_SITES PS,
          HZ_CUST_ACCT_SITES_ALL CA,
          HZ_CUST_SITE_USES_ALL SU,
          OE_ORDER_LINES_ALL OLA
        WHERE OLA.LINE_ID = CF_OE_LINE_ID
          AND SU.SITE_USE_ID = OLA.INVOICE_TO_ORG_ID
          AND SU.CUST_ACCT_SITE_ID = CA.CUST_ACCT_SITE_ID
          AND CA.PARTY_SITE_ID = PS.PARTY_SITE_ID;
        IF SQL%NOTFOUND THEN
          RETURN (NULL);
        END IF;
      ELSIF CP_SOURCE_CODE = 'OKE' THEN
        BILL_TO_LOC_ID := OKE_DTS_WSH_PKG.BILL_TO_LOCATION(F_OE_LINE_ID);
      END IF;
      RETURN (BILL_TO_LOC_ID);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RETURN (NULL);
      WHEN OTHERS THEN
        RAISE;
    END;
  END CF_BILL_TO_LOC1FORMULA;
  FUNCTION CF_OE_LINE_ID1FORMULA RETURN NUMBER IS
  BEGIN
    DECLARE
      OE_LINE_ID NUMBER;
      SHP_TO_CONTACT_ID NUMBER;
      BILL_TO_CONTACT_ID NUMBER;
    BEGIN
      /*SRW.REFERENCE(P_DELIVERY_ID)*/NULL;
      IF CP_SOURCE_CODE = 'OE' THEN
        SELECT
          WDD.SOURCE_LINE_ID,
          OLA.SHIP_TO_CONTACT_ID,
          OLA.INVOICE_TO_CONTACT_ID
        INTO OE_LINE_ID,SHP_TO_CONTACT_ID,BILL_TO_CONTACT_ID
        FROM
          WSH_DELIVERY_DETAILS WDD,
          WSH_DELIVERY_ASSIGNMENTS_V WDA,
          OE_ORDER_LINES_ALL OLA
        WHERE WDD.DELIVERY_DETAIL_ID = WDA.DELIVERY_DETAIL_ID
          AND NVL(WDD.CONTAINER_FLAG
           ,'N') = 'N'
          AND WDA.DELIVERY_ID = P_DELIVERY_ID
          AND WDA.DELIVERY_ID is not null
          AND WDD.SOURCE_CODE = 'OE'
          AND WDD.SOURCE_LINE_ID = OLA.LINE_ID
          AND ROWNUM < 2;
        IF SQL%NOTFOUND THEN
          CP_SHIP_TO_CONTACT_ID := NULL;
          CP_BILL_TO_CONTACT_ID := NULL;
          RETURN (NULL);
        END IF;
        CP_SHIP_TO_CONTACT_ID := SHP_TO_CONTACT_ID;
        CP_BILL_TO_CONTACT_ID := BILL_TO_CONTACT_ID;
      ELSIF CP_SOURCE_CODE = 'OKE' THEN
        SELECT
          WDD.SOURCE_LINE_ID
        INTO OE_LINE_ID
        FROM
          WSH_DELIVERY_DETAILS WDD,
          WSH_DELIVERY_ASSIGNMENTS_V WDA,
          OE_ORDER_LINES_ALL OLA
        WHERE WDD.DELIVERY_DETAIL_ID = WDA.DELIVERY_DETAIL_ID
          AND WDD.CONTAINER_FLAG = 'N'
          AND WDA.DELIVERY_ID = P_DELIVERY_ID
          AND WDA.DELIVERY_ID is not null
          AND WDD.SOURCE_CODE = 'OKE'
          AND ROWNUM < 2;
        CP_SHIP_TO_CONTACT_ID := NULL;
        CP_BILL_TO_CONTACT_ID := NULL;
      END IF;
      RETURN (OE_LINE_ID);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        CP_SHIP_TO_CONTACT_ID := NULL;
        CP_BILL_TO_CONTACT_ID := NULL;
        RETURN (NULL);
      WHEN OTHERS THEN
        RAISE;
    END;
  END CF_OE_LINE_ID1FORMULA;
  FUNCTION CF_BILL_TO_CONTACT1FORMULA RETURN CHAR IS
    CONTACT_NAME HZ_PARTIES.PARTY_NAME%TYPE;
    L_PERSON_TITLE HZ_PARTIES.PERSON_TITLE%TYPE;
    L_PERSON_TITLE_UP HZ_PARTIES.PERSON_TITLE%TYPE;
    L_LOOKUP_TYPE VARCHAR2(20);
  BEGIN
    /*SRW.REFERENCE(CP_BILL_TO_CONTACT_ID)*/NULL;
    IF (CP_BILL_TO_CONTACT_ID IS NOT NULL) THEN
      SELECT
        PARTY.PARTY_NAME,
        NVL(PARTY.PERSON_PRE_NAME_ADJUNCT
           ,PARTY.PERSON_TITLE) TITLE
      INTO CONTACT_NAME,L_PERSON_TITLE
      FROM
        HZ_CUST_ACCOUNT_ROLES ACCT_ROLE,
        HZ_PARTIES PARTY,
        HZ_RELATIONSHIPS REL,
        HZ_ORG_CONTACTS ORG_CONT,
        HZ_PARTIES REL_PARTY
      WHERE ACCT_ROLE.CUST_ACCOUNT_ROLE_ID = CP_BILL_TO_CONTACT_ID
        AND ACCT_ROLE.PARTY_ID = REL.PARTY_ID
        AND ACCT_ROLE.ROLE_TYPE = 'CONTACT'
        AND REL.SUBJECT_TABLE_NAME = 'HZ_PARTIES'
        AND REL.OBJECT_TABLE_NAME = 'HZ_PARTIES'
        AND REL.DIRECTIONAL_FLAG = 'F'
        AND ORG_CONT.PARTY_RELATIONSHIP_ID = REL.RELATIONSHIP_ID
        AND REL.SUBJECT_ID = PARTY.PARTY_ID
        AND REL.PARTY_ID = REL_PARTY.PARTY_ID;
      IF L_PERSON_TITLE IS NOT NULL THEN
        BEGIN
          L_LOOKUP_TYPE := 'RESPONSIBILITY';
          L_PERSON_TITLE_UP := UPPER(L_PERSON_TITLE);
          SELECT
            MEANING || ' ' || CONTACT_NAME
          INTO CONTACT_NAME
          FROM
            AR_LOOKUPS
          WHERE LOOKUP_CODE = L_PERSON_TITLE_UP
            AND LOOKUP_TYPE = L_LOOKUP_TYPE;
        EXCEPTION
          WHEN OTHERS THEN
            CONTACT_NAME := L_PERSON_TITLE || ' ' || CONTACT_NAME;
        END;
      END IF;
    ELSE
      CONTACT_NAME := '   ';
    END IF;
    RETURN (CONTACT_NAME);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      CONTACT_NAME := '   ';
      RETURN (CONTACT_NAME);
    WHEN OTHERS THEN
      RAISE;
  END CF_BILL_TO_CONTACT1FORMULA;
  FUNCTION CF_SHIP_TO_CONTACT1FORMULA RETURN CHAR IS
    CONTACT_NAME HZ_PARTIES.PARTY_NAME%TYPE;
    L_PERSON_TITLE HZ_PARTIES.PERSON_TITLE%TYPE;
    L_PERSON_TITLE_UP HZ_PARTIES.PERSON_TITLE%TYPE;
    L_LOOKUP_TYPE VARCHAR2(20);
  BEGIN
    /*SRW.REFERENCE(CP_SHIP_TO_CONTACT_ID)*/NULL;
    IF (CP_SHIP_TO_CONTACT_ID IS NOT NULL) THEN
      SELECT
        PARTY.PARTY_NAME,
        NVL(PARTY.PERSON_PRE_NAME_ADJUNCT
           ,PARTY.PERSON_TITLE) TITLE
      INTO CONTACT_NAME,L_PERSON_TITLE
      FROM
        HZ_CUST_ACCOUNT_ROLES ACCT_ROLE,
        HZ_PARTIES PARTY,
        HZ_RELATIONSHIPS REL,
        HZ_ORG_CONTACTS ORG_CONT,
        HZ_PARTIES REL_PARTY
      WHERE ACCT_ROLE.CUST_ACCOUNT_ROLE_ID = CP_SHIP_TO_CONTACT_ID
        AND ACCT_ROLE.PARTY_ID = REL.PARTY_ID
        AND ACCT_ROLE.ROLE_TYPE = 'CONTACT'
        AND REL.SUBJECT_TABLE_NAME = 'HZ_PARTIES'
        AND REL.OBJECT_TABLE_NAME = 'HZ_PARTIES'
        AND REL.DIRECTIONAL_FLAG = 'F'
        AND ORG_CONT.PARTY_RELATIONSHIP_ID = REL.RELATIONSHIP_ID
        AND REL.SUBJECT_ID = PARTY.PARTY_ID
        AND REL.PARTY_ID = REL_PARTY.PARTY_ID;
      IF L_PERSON_TITLE IS NOT NULL THEN
        BEGIN
          L_LOOKUP_TYPE := 'RESPONSIBILITY';
          L_PERSON_TITLE_UP := UPPER(L_PERSON_TITLE);
          SELECT
            MEANING || ' ' || CONTACT_NAME
          INTO CONTACT_NAME
          FROM
            AR_LOOKUPS
          WHERE LOOKUP_CODE = L_PERSON_TITLE_UP
            AND LOOKUP_TYPE = L_LOOKUP_TYPE;
        EXCEPTION
          WHEN OTHERS THEN
            CONTACT_NAME := L_PERSON_TITLE || ' ' || CONTACT_NAME;
        END;
      END IF;
    ELSE
      CONTACT_NAME := '   ';
    END IF;
    RETURN (CONTACT_NAME);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      CONTACT_NAME := '   ';
      RETURN (CONTACT_NAME);
    WHEN OTHERS THEN
      RAISE;
  END CF_SHIP_TO_CONTACT1FORMULA;
  FUNCTION F_BILL_TO_CUST_NAME1FORMULA(F_OE_LINE_ID IN NUMBER) RETURN CHAR IS
  BEGIN
    DECLARE
      BILL_TO_CUST_NAME HZ_PARTIES.PARTY_NAME%TYPE;
      L_PERSON_TITLE HZ_PARTIES.PERSON_TITLE%TYPE;
      L_PERSON_TITLE_UP HZ_PARTIES.PERSON_TITLE%TYPE;
      L_LOOKUP_TYPE VARCHAR2(20);
    BEGIN
      /*SRW.REFERENCE(F_OE_LINE_ID)*/NULL;
      IF CP_SOURCE_CODE = 'OE' THEN
        SELECT
          HP.PARTY_NAME,
          NVL(HP.PERSON_PRE_NAME_ADJUNCT
             ,HP.PERSON_TITLE) TITLE
        INTO BILL_TO_CUST_NAME,L_PERSON_TITLE
        FROM
          HZ_PARTY_SITES PS,
          HZ_CUST_ACCT_SITES_ALL CA,
          HZ_CUST_SITE_USES_ALL SU,
          HZ_PARTIES HP,
          OE_ORDER_LINES_ALL OLA
        WHERE OLA.LINE_ID = F_OE_LINE_ID
          AND SU.SITE_USE_ID = OLA.INVOICE_TO_ORG_ID
          AND SU.CUST_ACCT_SITE_ID = CA.CUST_ACCT_SITE_ID
          AND CA.PARTY_SITE_ID = PS.PARTY_SITE_ID
          AND HP.PARTY_ID = PS.PARTY_ID;
        IF L_PERSON_TITLE IS NOT NULL THEN
          BEGIN
            L_LOOKUP_TYPE := 'RESPONSIBILITY';
            L_PERSON_TITLE_UP := UPPER(L_PERSON_TITLE);
            SELECT
              MEANING || ' ' || BILL_TO_CUST_NAME
            INTO BILL_TO_CUST_NAME
            FROM
              AR_LOOKUPS
            WHERE LOOKUP_CODE = L_PERSON_TITLE_UP
              AND LOOKUP_TYPE = L_LOOKUP_TYPE;
          EXCEPTION
            WHEN OTHERS THEN
              BILL_TO_CUST_NAME := L_PERSON_TITLE || ' ' || BILL_TO_CUST_NAME;
          END;
        END IF;
        IF SQL%NOTFOUND THEN
          RETURN (NULL);
        END IF;
      ELSIF CP_SOURCE_CODE = 'OKE' THEN
        BILL_TO_CUST_NAME := '';
      END IF;
      RETURN (BILL_TO_CUST_NAME);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RETURN (NULL);
      WHEN OTHERS THEN
        RAISE;
    END;
  END F_BILL_TO_CUST_NAME1FORMULA;
  FUNCTION CF_LINE_TAX_CODE1FORMULA(F_OE_LINE_ID IN NUMBER) RETURN CHAR IS
  BEGIN
    DECLARE
      L_LINE_TAX_CODE OE_ORDER_LINES_ALL.TAX_CODE%TYPE;
    BEGIN
      /*SRW.REFERENCE(F_OE_LINE_ID)*/NULL;
      IF CP_SOURCE_CODE = 'OKE' THEN
        L_LINE_TAX_CODE := '';
      ELSIF CP_SOURCE_CODE = 'OE' THEN
        SELECT
          TAX_CODE
        INTO L_LINE_TAX_CODE
        FROM
          OE_ORDER_LINES_ALL
        WHERE LINE_ID = F_OE_LINE_ID;
        IF SQL%NOTFOUND THEN
          RETURN (NULL);
        END IF;
      END IF;
      RETURN (L_LINE_TAX_CODE);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RETURN (NULL);
      WHEN OTHERS THEN
        RAISE;
    END;
  END CF_LINE_TAX_CODE1FORMULA;
  FUNCTION F_SHIP_TO_CUST_NAME1FORMULA(F_SHIP_TO_SITE_USE_ID IN NUMBER) RETURN CHAR IS
  BEGIN
    DECLARE
      SHIP_TO_CUST_NAME HZ_PARTIES.PARTY_NAME%TYPE;
      L_PERSON_TITLE HZ_PARTIES.PERSON_TITLE%TYPE;
      L_PERSON_TITLE_UP HZ_PARTIES.PERSON_TITLE%TYPE;
      L_LOOKUP_TYPE VARCHAR2(20);
    BEGIN
      /*SRW.REFERENCE(F_SHIP_TO_SITE_USE_ID)*/NULL;
      SELECT
        HP.PARTY_NAME,
        NVL(HP.PERSON_PRE_NAME_ADJUNCT
           ,HP.PERSON_TITLE) TITLE
      INTO SHIP_TO_CUST_NAME,L_PERSON_TITLE
      FROM
        HZ_PARTY_SITES PS,
        HZ_CUST_ACCT_SITES_ALL CA,
        HZ_CUST_SITE_USES_ALL SU,
        HZ_PARTIES HP
      WHERE SU.SITE_USE_ID = F_SHIP_TO_SITE_USE_ID
        AND SU.CUST_ACCT_SITE_ID = CA.CUST_ACCT_SITE_ID
        AND CA.PARTY_SITE_ID = PS.PARTY_SITE_ID
        AND HP.PARTY_ID = PS.PARTY_ID;
      IF L_PERSON_TITLE IS NOT NULL THEN
        BEGIN
          L_LOOKUP_TYPE := 'RESPONSIBILITY';
          L_PERSON_TITLE_UP := UPPER(L_PERSON_TITLE);
          SELECT
            MEANING || ' ' || SHIP_TO_CUST_NAME
          INTO SHIP_TO_CUST_NAME
          FROM
            AR_LOOKUPS
          WHERE LOOKUP_CODE = L_PERSON_TITLE_UP
            AND LOOKUP_TYPE = L_LOOKUP_TYPE;
        EXCEPTION
          WHEN OTHERS THEN
            SHIP_TO_CUST_NAME := L_PERSON_TITLE || ' ' || SHIP_TO_CUST_NAME;
        END;
      END IF;
      IF SQL%NOTFOUND THEN
        RETURN (NULL);
      END IF;
      RETURN (SHIP_TO_CUST_NAME);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RETURN (NULL);
      WHEN OTHERS THEN
        RAISE;
    END;
  END F_SHIP_TO_CUST_NAME1FORMULA;
  FUNCTION F_SHIP_TO_SITE_USE_ID1FORMULA(F_DEL_DETAIL_ID IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      SHP_TO_SITE_USE_ID NUMBER;
    BEGIN
      /*SRW.REFERENCE(F_DEL_DETAIL_ID)*/NULL;
      IF CP_SOURCE_CODE = 'OE' THEN
        SELECT
          SHIP_TO_SITE_USE_ID
        INTO SHP_TO_SITE_USE_ID
        FROM
          WSH_DELIVERY_DETAILS
        WHERE DELIVERY_DETAIL_ID = F_DEL_DETAIL_ID
          AND SOURCE_CODE = 'OE'
          AND ROWNUM < 2;
        IF SQL%NOTFOUND THEN
          RETURN (NULL);
        END IF;
      ELSIF CP_SOURCE_CODE = 'OKE' THEN
        SELECT
          SHIP_TO_SITE_USE_ID
        INTO SHP_TO_SITE_USE_ID
        FROM
          WSH_DELIVERY_DETAILS
        WHERE DELIVERY_DETAIL_ID = F_DEL_DETAIL_ID
          AND SOURCE_CODE = 'OKE'
          AND ROWNUM < 2;
      END IF;
      RETURN (SHP_TO_SITE_USE_ID);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RETURN (NULL);
      WHEN OTHERS THEN
        RAISE;
    END;
  END F_SHIP_TO_SITE_USE_ID1FORMULA;
  FUNCTION F_BILL_TO_LOC_ID1FORMULA(F_OE_LINE_ID IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      BILL_TO_LOC_ID NUMBER;
    BEGIN
      /*SRW.REFERENCE(F_OE_LINE_ID)*/NULL;
      IF CP_SOURCE_CODE = 'OE' THEN
        SELECT
          PS.LOCATION_ID
        INTO BILL_TO_LOC_ID
        FROM
          HZ_PARTY_SITES PS,
          HZ_CUST_ACCT_SITES_ALL CA,
          HZ_CUST_SITE_USES_ALL SU,
          OE_ORDER_LINES_ALL OLA
        WHERE OLA.LINE_ID = F_OE_LINE_ID
          AND SU.SITE_USE_ID = OLA.INVOICE_TO_ORG_ID
          AND SU.CUST_ACCT_SITE_ID = CA.CUST_ACCT_SITE_ID
          AND CA.PARTY_SITE_ID = PS.PARTY_SITE_ID;
        IF SQL%NOTFOUND THEN
          RETURN (NULL);
        END IF;
      ELSIF CP_SOURCE_CODE = 'OKE' THEN
        BILL_TO_LOC_ID := OKE_DTS_WSH_PKG.BILL_TO_LOCATION(F_OE_LINE_ID);
      END IF;
      RETURN (BILL_TO_LOC_ID);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RETURN (NULL);
      WHEN OTHERS THEN
        RAISE;
    END;
  END F_BILL_TO_LOC_ID1FORMULA;
  FUNCTION F_OE_LINE_ID1FORMULA RETURN NUMBER IS
  BEGIN
    DECLARE
      OE_LINE_ID NUMBER;
      SHP_TO_CONTACT_ID NUMBER;
      BILL_TO_CONTACT_ID NUMBER;
    BEGIN
      /*SRW.REFERENCE(P_DELIVERY_ID)*/NULL;
      IF CP_SOURCE_CODE = 'OE' THEN
        SELECT
          WDD.SOURCE_LINE_ID,
          OLA.SHIP_TO_CONTACT_ID,
          OLA.INVOICE_TO_CONTACT_ID
        INTO OE_LINE_ID,SHP_TO_CONTACT_ID,BILL_TO_CONTACT_ID
        FROM
          WSH_DELIVERY_DETAILS WDD,
          WSH_DELIVERY_ASSIGNMENTS_V WDA,
          OE_ORDER_LINES_ALL OLA
        WHERE WDD.DELIVERY_DETAIL_ID = WDA.DELIVERY_DETAIL_ID
          AND NVL(WDD.CONTAINER_FLAG
           ,'N') = 'N'
          AND WDA.DELIVERY_ID = P_DELIVERY_ID
          AND WDA.DELIVERY_ID is not null
          AND WDD.SOURCE_CODE = 'OE'
          AND WDD.SOURCE_LINE_ID = OLA.LINE_ID
          AND ROWNUM < 2;
        IF SQL%NOTFOUND THEN
          CP_SHIP_TO_CONTACT_ID := NULL;
          CP_BILL_TO_CONTACT_ID := NULL;
          RETURN (NULL);
        END IF;
        CP_SHIP_TO_CONTACT_ID := SHP_TO_CONTACT_ID;
        CP_BILL_TO_CONTACT_ID := BILL_TO_CONTACT_ID;
      ELSIF CP_SOURCE_CODE = 'OKE' THEN
        SELECT
          WDD.SOURCE_LINE_ID
        INTO OE_LINE_ID
        FROM
          WSH_DELIVERY_DETAILS WDD,
          WSH_DELIVERY_ASSIGNMENTS_V WDA
        WHERE WDD.DELIVERY_DETAIL_ID = WDA.DELIVERY_DETAIL_ID
          AND WDD.CONTAINER_FLAG = 'N'
          AND WDA.DELIVERY_ID = P_DELIVERY_ID
          AND WDA.DELIVERY_ID is not null
          AND WDD.SOURCE_CODE = 'OKE'
          AND ROWNUM < 2;
        CP_SHIP_TO_CONTACT_ID := NULL;
        CP_BILL_TO_CONTACT_ID := NULL;
      END IF;
      RETURN (OE_LINE_ID);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        CP_SHIP_TO_CONTACT_ID := NULL;
        CP_BILL_TO_CONTACT_ID := NULL;
        RETURN (NULL);
      WHEN OTHERS THEN
        RAISE;
    END;
  END F_OE_LINE_ID1FORMULA;
  FUNCTION F_DEL_DETAIL_ID1FORMULA RETURN NUMBER IS
  BEGIN
    DECLARE
      DEL_DTL_ID NUMBER;
      L_COUNT NUMBER := 0;
      L_SOURCE_CODE VARCHAR2(30);
    BEGIN
      /*SRW.REFERENCE(P_DELIVERY_ID)*/NULL;
      SELECT
        count(distinct WDD.SOURCE_CODE)
      INTO L_COUNT
      FROM
        WSH_DELIVERY_DETAILS WDD,
        WSH_DELIVERY_ASSIGNMENTS_V WDA
      WHERE WDA.DELIVERY_ID IS NOT NULL
        AND WDA.DELIVERY_DETAIL_ID = WDD.DELIVERY_DETAIL_ID
        AND WDA.DELIVERY_ID = P_DELIVERY_ID
        AND WDD.CONTAINER_FLAG = 'N'
      GROUP BY
        WDD.SOURCE_CODE;
      IF L_COUNT > 1 THEN
        NULL;
      ELSIF L_COUNT = 1 THEN
        SELECT
          WDD.SOURCE_CODE,
          WDD.DELIVERY_DETAIL_ID
        INTO L_SOURCE_CODE,DEL_DTL_ID
        FROM
          WSH_DELIVERY_DETAILS WDD,
          WSH_DELIVERY_ASSIGNMENTS_V WDA
        WHERE WDD.DELIVERY_DETAIL_ID = WDA.DELIVERY_DETAIL_ID
          AND WDD.CONTAINER_FLAG = 'N'
          AND WDA.DELIVERY_ID = P_DELIVERY_ID
          AND WDA.DELIVERY_ID is not null
          AND ROWNUM < 2;
        CP_SOURCE_CODE := L_SOURCE_CODE;
      END IF;
      IF SQL%NOTFOUND THEN
        RETURN (NULL);
      END IF;
      RETURN (DEL_DTL_ID);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RETURN (NULL);
      WHEN OTHERS THEN
        RAISE;
    END;
  END F_DEL_DETAIL_ID1FORMULA;
  FUNCTION CF_TO_ADDR_4FORMULA(CF_TO_CITY_STATE_ZIP IN VARCHAR2
                              ,C_TO_COUNTRY IN VARCHAR2
                              ,C_TO_ADDRESS_2 IN VARCHAR2
                              ,C_TO_ADDRESS_3 IN VARCHAR2
                              ,C_TO_ADDRESS_4 IN VARCHAR2) RETURN CHAR IS
    L_CF_TO_CITY_STATE_ZIP VARCHAR2(190);
  BEGIN
    /*SRW.REFERENCE(CF_TO_CITY_STATE_ZIP)*/NULL;
    /*SRW.REFERENCE(C_TO_COUNTRY)*/NULL;
    /*SRW.REFERENCE(C_TO_ADDRESS_2)*/NULL;
    /*SRW.REFERENCE(C_TO_ADDRESS_3)*/NULL;
    IF (CF_TO_CITY_STATE_ZIP IS NULL) THEN
      L_CF_TO_CITY_STATE_ZIP := '';
    ELSE
      L_CF_TO_CITY_STATE_ZIP := CF_TO_CITY_STATE_ZIP || ', ';
    END IF;
    IF (C_TO_ADDRESS_2 IS NOT NULL AND C_TO_ADDRESS_3 IS NOT NULL AND C_TO_ADDRESS_4 IS NOT NULL) THEN
      RETURN (C_TO_ADDRESS_4);
    ELSIF (C_TO_ADDRESS_2 IS NOT NULL AND C_TO_ADDRESS_3 IS NULL AND C_TO_ADDRESS_4 IS NULL) THEN
      RETURN ('       ');
    ELSIF (C_TO_ADDRESS_2 IS NOT NULL AND C_TO_ADDRESS_3 IS NULL AND C_TO_ADDRESS_4 IS NOT NULL) THEN
      RETURN (L_CF_TO_CITY_STATE_ZIP || C_TO_COUNTRY);
    ELSIF (C_TO_ADDRESS_2 IS NULL AND C_TO_ADDRESS_3 IS NOT NULL AND C_TO_ADDRESS_4 IS NOT NULL) THEN
      RETURN (L_CF_TO_CITY_STATE_ZIP || C_TO_COUNTRY);
    ELSIF (C_TO_ADDRESS_2 IS NOT NULL AND C_TO_ADDRESS_3 IS NOT NULL AND C_TO_ADDRESS_4 IS NULL) THEN
      RETURN (L_CF_TO_CITY_STATE_ZIP || C_TO_COUNTRY);
    ELSIF (C_TO_ADDRESS_2 IS NULL AND C_TO_ADDRESS_3 IS NOT NULL AND C_TO_ADDRESS_4 IS NULL) THEN
      RETURN ('         ');
    ELSIF (C_TO_ADDRESS_2 IS NULL AND C_TO_ADDRESS_3 IS NULL AND C_TO_ADDRESS_4 IS NOT NULL) THEN
      RETURN ('              ');
    ELSIF (C_TO_ADDRESS_2 IS NULL AND C_TO_ADDRESS_3 IS NULL AND C_TO_ADDRESS_4 IS NULL) THEN
      RETURN ('                  ');
    END IF;
  END CF_TO_ADDR_4FORMULA;
  FUNCTION CF_BILL_ADDR_4FORMULA(CF_BILL_CITY_STATE_ZIP IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(CP_BILL_ADDRESS_LINE_2)*/NULL;
    /*SRW.REFERENCE(CP_BILL_ADDRESS_LINE_3)*/NULL;
    /*SRW.REFERENCE(CP_BILL_ADDRESS_LINE_4)*/NULL;
    /*SRW.REFERENCE(CF_BILL_CITY_STATE_ZIP)*/NULL;
    /*SRW.REFERENCE(CP_BILL_COUNTRY)*/NULL;
    IF (CP_BILL_ADDRESS_LINE_2 IS NOT NULL AND CP_BILL_ADDRESS_LINE_3 IS NOT NULL AND CP_BILL_ADDRESS_LINE_4 IS NOT NULL) THEN
      RETURN (CP_BILL_ADDRESS_LINE_4);
    ELSIF (CP_BILL_ADDRESS_LINE_2 IS NOT NULL AND CP_BILL_ADDRESS_LINE_3 IS NULL AND CP_BILL_ADDRESS_LINE_4 IS NOT NULL) THEN
      RETURN (CF_BILL_CITY_STATE_ZIP || ', ' || CP_BILL_COUNTRY);
    ELSIF (CP_BILL_ADDRESS_LINE_2 IS NOT NULL AND CP_BILL_ADDRESS_LINE_3 IS NULL AND CP_BILL_ADDRESS_LINE_4 IS NULL) THEN
      RETURN ('');
    ELSIF (CP_BILL_ADDRESS_LINE_2 IS NOT NULL AND CP_BILL_ADDRESS_LINE_3 IS NOT NULL AND CP_BILL_ADDRESS_LINE_4 IS NULL) THEN
      RETURN (CF_BILL_CITY_STATE_ZIP || ', ' || CP_BILL_COUNTRY);
    ELSIF (CP_BILL_ADDRESS_LINE_2 IS NULL AND CP_BILL_ADDRESS_LINE_3 IS NOT NULL AND CP_BILL_ADDRESS_LINE_4 IS NOT NULL) THEN
      RETURN (CF_BILL_CITY_STATE_ZIP || ', ' || CP_BILL_COUNTRY);
    ELSIF (CP_BILL_ADDRESS_LINE_2 IS NULL AND CP_BILL_ADDRESS_LINE_3 IS NULL AND CP_BILL_ADDRESS_LINE_4 IS NOT NULL) THEN
      RETURN ('');
    ELSIF (CP_BILL_ADDRESS_LINE_2 IS NULL AND CP_BILL_ADDRESS_LINE_3 IS NOT NULL AND CP_BILL_ADDRESS_LINE_4 IS NULL) THEN
      RETURN ('');
    ELSIF (CP_BILL_ADDRESS_LINE_2 IS NULL AND CP_BILL_ADDRESS_LINE_3 IS NULL AND CP_BILL_ADDRESS_LINE_4 IS NULL) THEN
      RETURN ('');
    END IF;
  END CF_BILL_ADDR_4FORMULA;
  FUNCTION CF_REQUESTOR_NAMEFORMULA(ATTACH_ORDER_ID IN NUMBER) RETURN CHAR IS
    REQ_NAME VARCHAR2(240);
    ORDER_NUMBER VARCHAR2(40);
  BEGIN
    SELECT
      TO_CHAR(BH.ORDER_NUMBER),
      RE.FULL_NAME
    INTO ORDER_NUMBER,REQ_NAME
    FROM
      OE_ORDER_HEADERS_ALL BH,
      PO_REQUISITION_HEADERS_ALL RH,
      HR_EMPLOYEES RE
    WHERE RH.TYPE_LOOKUP_CODE = 'INTERNAL'
      AND RH.PREPARER_ID = RE.EMPLOYEE_ID
      AND BH.HEADER_ID = ATTACH_ORDER_ID
      AND BH.SOURCE_DOCUMENT_ID = RH.REQUISITION_HEADER_ID
      AND BH.ORDER_SOURCE_ID = 10;
    CP_INTERNAL_SALES_ORDER := ORDER_NUMBER;
    RETURN REQ_NAME;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END CF_REQUESTOR_NAMEFORMULA;
  FUNCTION CF_ITEM_DESCRIPTIONFORMULA(C_ITEM_DESCRIPTION IN VARCHAR2
                                     ,C_INV_ITEM_ID IN NUMBER
                                     ,C_ORGANIZATION_ID IN NUMBER) RETURN CHAR IS
    CURSOR INVENTORY_LABEL(ID IN NUMBER,ORG_ID IN NUMBER) IS
      SELECT
        DESCRIPTION
      FROM
        MTL_SYSTEM_ITEMS_VL
      WHERE INVENTORY_ITEM_ID = ID
        AND ORGANIZATION_ID = ORG_ID;
    L_ITEM_DESC VARCHAR2(250);
  BEGIN
    L_ITEM_DESC := C_ITEM_DESCRIPTION;
    IF (C_INV_ITEM_ID IS NOT NULL) THEN
      OPEN INVENTORY_LABEL(C_INV_ITEM_ID,C_ORGANIZATION_ID);
      FETCH INVENTORY_LABEL
       INTO L_ITEM_DESC;
      IF (INVENTORY_LABEL%NOTFOUND) THEN
        L_ITEM_DESC := C_ITEM_DESCRIPTION;
      END IF;
      CLOSE INVENTORY_LABEL;
    END IF;
    RETURN L_ITEM_DESC;
  END CF_ITEM_DESCRIPTIONFORMULA;
  FUNCTION CF_ITEM_DISPLAYFORMULA RETURN CHAR IS
  BEGIN
    RETURN (P_ITEM_DISPLAY);
  END CF_ITEM_DISPLAYFORMULA;

  FUNCTION CF_DISPLAY_UNSHIPPEDFORMULA RETURN CHAR IS
  BEGIN
      --STANDALONE CHANGES
      IF P_STANDALONE = 'Y' THEN
         RETURN ('N');
      ELSE
         RETURN(p_display_unshipped);
      END IF;
  END CF_DISPLAY_UNSHIPPEDFORMULA;

  FUNCTION CF_PRINT_CUST_ITEMFORMULA RETURN CHAR IS
  BEGIN
    RETURN (P_PRINT_CUST_ITEM);
  END CF_PRINT_CUST_ITEMFORMULA;
  FUNCTION CF_CARRIER_ADDRFORMULA(WND_CARRIER_ID IN NUMBER
                                 ,C_DEL_ORG_ID IN NUMBER
                                 ,C_Q2_DELIVERY_ID IN NUMBER) RETURN CHAR IS
    CURSOR C_CARRIER_ADDRESS(C_ORGANIZATION_ID IN NUMBER,C_CARRIER_ID IN NUMBER,C_DELIVERY_ID IN NUMBER) IS
      SELECT
        LOC.ADDRESS1 || ', ' || LOC.ADDRESS2 || ', ' || LOC.ADDRESS3 || ', ' || LOC.ADDRESS4 || ', ' || LOC.CITY || ', ' || LOC.STATE || ', ' || LOC.COUNTRY || ', ' || LOC.POSTAL_CODE CARRIER_ADDR
      FROM
        WSH_ORG_CARRIER_SITES ORG_SITES,
        WSH_NEW_DELIVERIES DEL,
        HZ_PARTY_SITES HZ_SITES,
        HZ_LOCATIONS LOC
      WHERE ORG_SITES.ORGANIZATION_ID = DEL.ORGANIZATION_ID
        AND HZ_SITES.PARTY_SITE_ID = ORG_SITES.CARRIER_SITE_ID
        AND HZ_SITES.PARTY_ID = C_CARRIER_ID
        AND ORG_SITES.ENABLED_FLAG = 'Y'
        AND LOC.LOCATION_ID = HZ_SITES.LOCATION_ID
        AND DEL.DELIVERY_ID = C_DELIVERY_ID;
    L_CARRIER_ADDR VARCHAR2(2000);
  BEGIN
    IF (WND_CARRIER_ID IS NOT NULL) THEN
      FOR c_rec IN C_CARRIER_ADDRESS(c_organization_id =>c_del_org_id,c_carrier_id =>wnd_carrier_id,c_delivery_id =>c_q2_delivery_id)
      LOOP
        L_CARRIER_ADDR := C_REC.CARRIER_ADDR;
      END LOOP;
    ELSE
      L_CARRIER_ADDR := ' ';
    END IF;
    RETURN L_CARRIER_ADDR;
  END CF_CARRIER_ADDRFORMULA;
  FUNCTION CF_CARRIER_ADDRESS1FORMULA(TRIP_CARRIER_ID IN NUMBER
                                     ,C_TRIP_DELIVERY_ID IN NUMBER) RETURN CHAR IS
    CURSOR C_CARRIER_ADDRESS(C_CARRIER_ID IN NUMBER,C_DELIVERY_ID IN NUMBER) IS
      SELECT
        LOC.ADDRESS1 || ', ' || LOC.ADDRESS2 || ', ' || LOC.ADDRESS3 || ', ' || LOC.ADDRESS4 || ', ' || LOC.CITY || ', ' || LOC.STATE || ', ' || LOC.COUNTRY || ', ' || LOC.POSTAL_CODE CARRIER_ADDR
      FROM
        WSH_ORG_CARRIER_SITES ORG_SITES,
        WSH_NEW_DELIVERIES DEL,
        HZ_PARTY_SITES HZ_SITES,
        HZ_LOCATIONS LOC
      WHERE ORG_SITES.ORGANIZATION_ID = DEL.ORGANIZATION_ID
        AND HZ_SITES.PARTY_SITE_ID = ORG_SITES.CARRIER_SITE_ID
        AND HZ_SITES.PARTY_ID = C_CARRIER_ID
        AND ORG_SITES.ENABLED_FLAG = 'Y'
        AND LOC.LOCATION_ID = HZ_SITES.LOCATION_ID
        AND DEL.DELIVERY_ID = C_DELIVERY_ID;
    L_CARRIER_ADDR VARCHAR2(2000);
    CURSOR C_DEL_CARRIER(C_DELIVERY_ID IN NUMBER) IS
      SELECT
        WND.CARRIER_ID DEL_CARRIER_ID
      FROM
        WSH_NEW_DELIVERIES WND
      WHERE WND.DELIVERY_ID = C_DELIVERY_ID;
  BEGIN
    IF (TRIP_CARRIER_ID IS NOT NULL) THEN
      FOR c_rec IN C_CARRIER_ADDRESS(c_carrier_id => trip_carrier_id,c_delivery_id => c_trip_delivery_id)
      LOOP
        L_CARRIER_ADDR := C_REC.CARRIER_ADDR;
        EXIT;
      END LOOP;
    ELSE
      FOR c_rec IN C_DEL_CARRIER(c_delivery_id =>c_trip_delivery_id) LOOP
        IF (C_REC.DEL_CARRIER_ID IS NOT NULL) THEN
          FOR c_rec1 IN C_CARRIER_ADDRESS(c_carrier_id => c_rec.del_carrier_id,c_delivery_id =>c_trip_delivery_id) LOOP
            L_CARRIER_ADDR := C_REC1.CARRIER_ADDR;
          END LOOP;
        END IF;
        EXIT;
      END LOOP;
      IF (L_CARRIER_ADDR IS NULL) THEN
        L_CARRIER_ADDR := ' ';
      END IF;
    END IF;
    RETURN L_CARRIER_ADDR;
  END CF_CARRIER_ADDRESS1FORMULA;
  FUNCTION CF_VAT_REG_NUMFORMULA(C_Q2_DELIVERY_ID IN NUMBER
                                ,C_DEL_ORG_ID IN NUMBER) RETURN VARCHAR2 IS
    L_VAT_REG_NUM VARCHAR2(60);
    L_TAX_REG_NUM VARCHAR2(60);
    L_RETURN_STATUS VARCHAR2(50);
    L_MSG_COUNT NUMBER;
    L_MSG_DATA VARCHAR2(50);
    L_INV_LE_INFO XLE_BUSINESSINFO_GRP.INV_ORG_REC_TYPE;
    L_LEGAL_ENTITY_ID NUMBER;
    L_REGISTRATION_NUMBER NUMBER;
    L_OPERATING_UNIT_ID NUMBER;
    CURSOR TAX_REG_NUM_CSR(P_ORG_ID IN NUMBER) IS
      SELECT
        RCODES.REPORTING_CODE_CHAR_VALUE
      FROM
        ZX_REPORTING_TYPES_B RTYPES,
        ZX_REPORT_CODES_ASSOC RCODES,
        ZX_PARTY_TAX_PROFILE PTP
      WHERE RCODES.ENTITY_CODE = 'ZX_PARTY_TAX_PROFILE'
        AND RCODES.ENTITY_ID = PTP.PARTY_TAX_PROFILE_ID
        AND RCODES.REPORTING_TYPE_ID = RTYPES.REPORTING_TYPE_ID
        AND RTYPES.REPORTING_TYPE_CODE = 'AR-SYSTEM-PARAM-REG-NUM'
        AND PTP.PARTY_TYPE_CODE = 'OU'
        AND PTP.PARTY_ID = P_ORG_ID;
  BEGIN
    L_OPERATING_UNIT_ID := WSH_UTIL_CORE.GET_OPERATINGUNIT_ID(C_Q2_DELIVERY_ID);
    OPEN TAX_REG_NUM_CSR(L_OPERATING_UNIT_ID);
    FETCH TAX_REG_NUM_CSR
     INTO L_TAX_REG_NUM;
    IF TAX_REG_NUM_CSR%NOTFOUND OR L_TAX_REG_NUM IS NULL THEN
      CLOSE TAX_REG_NUM_CSR;
      XLE_BUSINESSINFO_GRP.GET_INVORG_INFO(X_RETURN_STATUS => L_RETURN_STATUS
                                          ,X_MSG_DATA => L_MSG_DATA
                                          ,P_INVORG_ID => C_DEL_ORG_ID
                                          ,P_LE_ID => NULL
                                          ,P_PARTY_ID => NULL
                                          ,X_INV_LE_INFO => L_INV_LE_INFO);
      IF L_RETURN_STATUS <> 'S' OR L_INV_LE_INFO(1).LEGAL_ENTITY_ID IS NULL THEN
        L_VAT_REG_NUM := NULL;
      ELSE
        L_RETURN_STATUS := NULL;
        L_MSG_DATA := NULL;
        XLE_UTILITIES_GRP.GET_FP_VATREGISTRATION_LEID(P_API_VERSION => 1.0
                                                     ,P_INIT_MSG_LIST => 'TRUE'
                                                     ,P_COMMIT => NULL
                                                     ,P_EFFECTIVE_DATE => SYSDATE
                                                     ,X_RETURN_STATUS => L_RETURN_STATUS
                                                     ,X_MSG_COUNT => L_MSG_COUNT
                                                     ,X_MSG_DATA => L_MSG_DATA
                                                     ,P_LEGAL_ENTITY_ID => L_INV_LE_INFO(1).LEGAL_ENTITY_ID
                                                     ,X_REGISTRATION_NUMBER => L_REGISTRATION_NUMBER);
        L_VAT_REG_NUM := L_REGISTRATION_NUMBER;
        IF L_REGISTRATION_NUMBER IS NOT NULL THEN
          P_TAX_VAT_FLAG := 0;
        ELSE
          P_TAX_VAT_FLAG := 1;
        END IF;
      END IF;
    ELSE
      CLOSE TAX_REG_NUM_CSR;
      L_VAT_REG_NUM := L_TAX_REG_NUM;
      P_TAX_VAT_FLAG := 1;
    END IF;
    RETURN (L_VAT_REG_NUM);
  EXCEPTION
    WHEN OTHERS THEN
      IF TAX_REG_NUM_CSR%ISOPEN THEN
        CLOSE TAX_REG_NUM_CSR;
      END IF;
  END CF_VAT_REG_NUMFORMULA;
  FUNCTION CP_INTERNAL_SALES_ORDER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_INTERNAL_SALES_ORDER;
  END CP_INTERNAL_SALES_ORDER_P;
  FUNCTION CP_WAREHOUSE_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_WAREHOUSE_NAME;
  END CP_WAREHOUSE_NAME_P;
  FUNCTION CP_DRAFT_OR_FINAL_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_DRAFT_OR_FINAL;
  END CP_DRAFT_OR_FINAL_P;
  FUNCTION CP_PRINT_DATE_P RETURN DATE IS
  BEGIN
    RETURN CP_PRINT_DATE;
  END CP_PRINT_DATE_P;
  FUNCTION CP_RLM_PRINT_CUM_DATA_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_RLM_PRINT_CUM_DATA;
  END CP_RLM_PRINT_CUM_DATA_P;
  FUNCTION CP_SOURCE_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_SOURCE_CODE;
  END CP_SOURCE_CODE_P;
  FUNCTION CP_BILL_TO_CONTACT_ID_P RETURN NUMBER IS
  BEGIN
    RETURN CP_BILL_TO_CONTACT_ID;
  END CP_BILL_TO_CONTACT_ID_P;
  FUNCTION CP_SHIP_TO_CONTACT_ID_P RETURN NUMBER IS
  BEGIN
    RETURN CP_SHIP_TO_CONTACT_ID;
  END CP_SHIP_TO_CONTACT_ID_P;
  FUNCTION CP_BILL_ADDRESS_LINE_1_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_BILL_ADDRESS_LINE_1;
  END CP_BILL_ADDRESS_LINE_1_P;
  FUNCTION CP_BILL_ADDRESS_LINE_2_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_BILL_ADDRESS_LINE_2;
  END CP_BILL_ADDRESS_LINE_2_P;
  FUNCTION CP_BILL_ADDRESS_LINE_3_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_BILL_ADDRESS_LINE_3;
  END CP_BILL_ADDRESS_LINE_3_P;
  FUNCTION CP_BILL_TOWN_OR_CITY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_BILL_TOWN_OR_CITY;
  END CP_BILL_TOWN_OR_CITY_P;
  FUNCTION CP_BILL_REGION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_BILL_REGION;
  END CP_BILL_REGION_P;
  FUNCTION CP_BILL_POSTAL_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_BILL_POSTAL_CODE;
  END CP_BILL_POSTAL_CODE_P;
  FUNCTION CP_BILL_COUNTRY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_BILL_COUNTRY;
  END CP_BILL_COUNTRY_P;
  FUNCTION CP_BILL_ADDRESS_LINE_4_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_BILL_ADDRESS_LINE_4;
  END CP_BILL_ADDRESS_LINE_4_P;
--ADDED
function BeforeReport return boolean is
  l_result VARCHAR2(1);
  l_return_status VARCHAR2(5);
  l_msg_count NUMBER;
  l_msg_data VARCHAR2(3000);
  l_cum_profile VARCHAR2(5);
begin
BEGIN
  l_result:= WSH_Document_PVT.is_final(1.0,NULL,NULL,NULL,l_return_status,l_msg_count,l_msg_data,p_delivery_id,'PACK_TYPE');
  IF FND_API.to_boolean(l_result)
  THEN
    NULL;
  END IF;
END;
BEGIN
 l_cum_profile:=FND_PROFILE.value('RLM_PRINT_CUM_DATA');
  IF l_cum_profile='Y'
  THEN
    cp_rlm_print_cum_data:='Y';
  ELSE
   cp_rlm_print_cum_data:='N';
  END IF;
END;
BEGIN
  IF p_print_mode IS NOT NULL
  THEN
    cp_draft_or_final := WSH_UTIL_CORE.Get_Lookup_Meaning( p_lookup_type => 'PACK_MODE',
                                                          p_lookup_code =>p_print_mode);
  ELSE
   NULL;
  END IF;
  IF p_delivery_id IS NOT NULL THEN
    SELECT hr.name
    INTO cp_warehouse_name
    FROM hr_organization_units hr,
	 wsh_new_deliveries del
    WHERE del.organization_id = hr.organization_id
    AND del.delivery_id = p_delivery_id;
  ELSIF p_organization_id IS NOT NULL
  THEN
    SELECT name
    INTO cp_warehouse_name
    FROM hr_organization_units
    WHERE organization_id=p_organization_id;
    p_organizationid_1:='AND det.organization_id = :p_organization_id';
  ELSE
    NULL;
  END IF;
  cp_print_date:=SYSDATE;
EXCEPTION
  WHEN OTHERS THEN
    NULL;
END;
BEGIN
IF p_sort='CUST'
  THEN
    IF p_print_cust_item = 'Y'
   THEN
      p_customer_item_number:='mci.customer_item_number';
    ELSE
      IF p_item_display='D'
      THEN
        p_customer_item_number := '''''';
        p_item_flex := '''''';
      ELSE
       p_customer_item_number := '''''';
      END IF;
    END IF;
  ELSE
    IF p_item_display='D'
    THEN
        p_customer_item_number := '''''';
        p_item_flex :='''''';
    ELSE
       p_customer_item_number := '''''';
    END IF;
  END IF;
END;
IF (p_item_display = 'B' or p_item_display = 'F' ) THEN
BEGIN
  NULL;
END;
END IF;
return(true);
end;
FUNCTION Address_New(cf_bill_to_loc in number) RETURN VARCHAR2 IS
 l_location_id NUMBER;
 l_address_line_1 hz_locations.address1%TYPE;
 l_address_line_2 hz_locations.address2%TYPE;
 l_address_line_3 hz_locations.address3%TYPE;
 l_address_line_4 hz_locations.address4%TYPE;
 l_town_or_city   hz_locations.city%TYPE;
 l_region         hz_locations.county%TYPE;
 l_postal_code    hz_locations.postal_code%TYPE;
 l_country fnd_territories_tl.territory_short_name%TYPE;
BEGIN
    SELECT loc_bill.address1,
           loc_bill.address2,
           loc_bill.address3,
	   loc_bill.address4,
           loc_bill.city,
           nvl(nvl(loc_bill.province,loc_bill.state),loc_bill.county),
           loc_bill.postal_code,
           terr_bill.territory_short_name
      INTO l_address_line_1,
           l_address_line_2,
           l_address_line_3,
	   l_address_line_4,
           l_town_or_city,
           l_region,
           l_postal_code,
           l_country
      FROM hz_locations loc_bill,
           fnd_territories_tl terr_bill
     WHERE loc_bill.country = terr_bill.territory_code(+)
       AND decode(loc_bill.country,null,userenv('LANG'),terr_bill.language) = userenv('LANG')
       AND loc_bill.location_id =cf_bill_to_loc;
  cp_bill_address_line_1 := l_address_line_1;
  cp_bill_address_line_2 := l_address_line_2;
  cp_bill_address_line_3 := l_address_line_3;
  cp_bill_address_line_4 := l_address_line_4;
  cp_bill_town_or_city := l_town_or_city;
 cp_bill_region := l_region;
  cp_bill_postal_code := l_postal_code;
  cp_bill_country := l_country;
	return(' ');
  END Address_New;
END WSH_WSHRDPAK_XMLP_PKG;


/
