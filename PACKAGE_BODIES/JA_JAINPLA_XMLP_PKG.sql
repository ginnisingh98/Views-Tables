--------------------------------------------------------
--  DDL for Package Body JA_JAINPLA_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JA_JAINPLA_XMLP_PKG" AS
/* $Header: JAINPLAB.pls 120.1 2007/12/25 16:24:10 dwkrishn noship $ */
  FUNCTION CF_BED_CLOSE_BALFORMULA(CR_BASIC_ED IN NUMBER
                                  ,DR_BASIC_ED IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (P_FIRST_REC = 'T') THEN
      CP_BED_OPEN_BAL := NVL(P_BED_OPEN_BAL
                            ,0) + NVL(CR_BASIC_ED
                            ,0) - NVL(DR_BASIC_ED
                            ,0);
      P_FIRST_REC := 'F';
    ELSE
      CP_BED_OPEN_BAL := NVL(CP_BED_OPEN_BAL
                            ,0) + NVL(CR_BASIC_ED
                            ,0) - NVL(DR_BASIC_ED
                            ,0);
    END IF;
    CP_BED_OPEN_BAL := CP_BED_OPEN_BAL - CP_RND_BASIC_ED;
    RETURN (NVL(CP_BED_OPEN_BAL
              ,0));
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN (0);
  END CF_BED_CLOSE_BALFORMULA;

  FUNCTION CF_AED_CLOSE_BALFORMULA(CR_ADDITIONAL_ED IN NUMBER
                                  ,DR_ADDITIONAL_ED IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (P_FIRST_REC = 'T') THEN
      CP_AED_OPEN_BAL := NVL(P_AED_OPEN_BAL
                            ,0) + NVL(CR_ADDITIONAL_ED
                            ,0) - NVL(DR_ADDITIONAL_ED
                            ,0);
    ELSE
      CP_AED_OPEN_BAL := NVL(CP_AED_OPEN_BAL
                            ,0) + NVL(CR_ADDITIONAL_ED
                            ,0) - NVL(DR_ADDITIONAL_ED
                            ,0);
    END IF;
    CP_AED_OPEN_BAL := CP_AED_OPEN_BAL - CP_RND_ADDL_ED;
    RETURN (NVL(CP_AED_OPEN_BAL
              ,0));
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN (0);
  END CF_AED_CLOSE_BALFORMULA;

  FUNCTION CF_SED_CLOSE_BALFORMULA(CR_OTHER_ED IN NUMBER
                                  ,DR_OTHER_ED IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (P_FIRST_REC = 'T') THEN
      CP_SED_OPEN_BAL := NVL(P_SED_OPEN_BAL
                            ,0) + NVL(CR_OTHER_ED
                            ,0) - NVL(DR_OTHER_ED
                            ,0);
    ELSE
      CP_SED_OPEN_BAL := NVL(CP_SED_OPEN_BAL
                            ,0) + NVL(CR_OTHER_ED
                            ,0) - NVL(DR_OTHER_ED
                            ,0);
    END IF;
    CP_SED_OPEN_BAL := CP_SED_OPEN_BAL - CP_RND_OTHER_ED;
    RETURN (NVL(CP_SED_OPEN_BAL
              ,0));
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN (0);
  END CF_SED_CLOSE_BALFORMULA;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
    FOLIOMONTH DATE;
    MAXENDDATE DATE;
    LV_TAX_TYPE JAI_CMN_RG_OTHERS.TAX_TYPE%TYPE;
    CURSOR CUR_OPEN_CESS_BAL(P_ORG_ID IN JAI_CMN_RG_PLA_TRXS.ORGANIZATION_ID%TYPE,P_LOC_ID IN JAI_CMN_RG_PLA_TRXS.LOCATION_ID%TYPE,P_TRN_FROM_DATE IN DATE,
    P_TAX_TYPE IN JAI_CMN_RG_OTHERS.TAX_TYPE%TYPE,CP_SOURCE_REGISTER IN JAI_CMN_RG_OTHERS.SOURCE_REGISTER%TYPE) IS
      SELECT
        NVL(CLOSING_BALANCE
           ,0)
      FROM
        JAI_CMN_RG_OTHERS
      WHERE SOURCE_REGISTER = CP_SOURCE_REGISTER
        AND TAX_TYPE = P_TAX_TYPE
        AND SOURCE_REGISTER_ID = (
        SELECT
          MAX(A.REGISTER_ID)
        FROM
          JAI_CMN_RG_PLA_TRXS A,
          JAI_CMN_RG_OTHERS B
        WHERE A.REGISTER_ID = B.SOURCE_REGISTER_ID
          AND B.SOURCE_REGISTER = CP_SOURCE_REGISTER
          AND B.TAX_TYPE = P_TAX_TYPE
          AND A.TRANSACTION_DATE = (
          SELECT
            MAX(C.TRANSACTION_DATE)
          FROM
            JAI_CMN_RG_PLA_TRXS C,
            JAI_CMN_RG_OTHERS D
          WHERE C.REGISTER_ID = D.SOURCE_REGISTER_ID
            AND D.SOURCE_REGISTER = CP_SOURCE_REGISTER
            AND D.TAX_TYPE = P_TAX_TYPE
            AND TRUNC(C.TRANSACTION_DATE) < TRUNC(P_TRN_FROM_DATE)
            AND C.ORGANIZATION_ID = P_ORG_ID
            AND C.LOCATION_ID = P_LOC_ID ) );
  BEGIN
    IF (P_TRN_FROM_DATE IS NULL) THEN
      P_BED_OPEN_BAL := 0;
      P_AED_OPEN_BAL := 0;
      P_SED_OPEN_BAL := 0;
      P_EXCISE_CESS_OPEN_BAL := 0;
      P_CVD_CESS_OPEN_BAL := 0;
    ELSE
      BEGIN
        SELECT
          SUM(NVL(CR_BASIC_ED
                 ,0)) - SUM(NVL(DR_BASIC_ED
                 ,0)),
          SUM(NVL(CR_ADDITIONAL_ED
                 ,0)) - SUM(NVL(DR_ADDITIONAL_ED
                 ,0)),
          SUM(NVL(CR_OTHER_ED
                 ,0)) - SUM(NVL(DR_OTHER_ED
                 ,0))
        INTO P_BED_OPEN_BAL,P_AED_OPEN_BAL,P_SED_OPEN_BAL
        FROM
          JAI_CMN_RG_PLA_TRXS
        WHERE ORGANIZATION_ID = P_ORGANIZATION_ID
          AND LOCATION_ID = P_LOCATION_ID
          AND TRUNC(CREATION_DATE) <= TRUNC(P_TRN_FROM_DATE) - 1;
        LV_TAX_TYPE := 'EXCISE_EDUCATION_CESS';
        OPEN CUR_OPEN_CESS_BAL(P_ORGANIZATION_ID,P_LOCATION_ID,P_TRN_FROM_DATE,LV_TAX_TYPE,'PLA');
        FETCH CUR_OPEN_CESS_BAL
         INTO P_EXCISE_CESS_OPEN_BAL;
        CLOSE CUR_OPEN_CESS_BAL;
        LV_TAX_TYPE := 'CVD_EDUCATION_CESS';
        OPEN CUR_OPEN_CESS_BAL(P_ORGANIZATION_ID,P_LOCATION_ID,P_TRN_FROM_DATE,LV_TAX_TYPE,'PLA');
        FETCH CUR_OPEN_CESS_BAL
         INTO P_CVD_CESS_OPEN_BAL;
        CLOSE CUR_OPEN_CESS_BAL;
      EXCEPTION
        WHEN OTHERS THEN
          /*SRW.MESSAGE(150
                     ,SQLERRM)*/NULL;
          /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      END;
    END IF;
    IF P_FISCAL_YEAR IS NOT NULL AND P_MONTH IS NOT NULL THEN
      FOLIOMONTH := TO_DATE('01-' || UPPER(P_MONTH) || TO_CHAR(P_FISCAL_YEAR
                                   ,'-YYYY')
                           ,'DD-MON-YYYY');
      IF TRUNC(FOLIOMONTH) < TRUNC(P_FISCAL_YEAR) THEN
        FOLIOMONTH := ADD_MONTHS(FOLIOMONTH
                                ,12);
      END IF;
      IF TRUNC(LAST_DAY(FOLIOMONTH)) < TRUNC(SYSDATE) THEN
        P_TRN_FROM_DATE := TO_DATE('01-' || TO_CHAR(FOLIOMONTH
                                          ,'MON-YYYY')
                                  ,'DD-MON-YYYY');
        P_TRN_TO_DATE := LAST_DAY(P_TRN_FROM_DATE);
        VALIDATION_FLAG := 'Y';
        IF PREV_PAGE = -1 THEN
          VALIDATION_FLAG := 'N';
        END IF;
      END IF;
    ELSE
      VALIDATION_FLAG := 'N';
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION CF_2FORMULA(ROUNDING_ID IN NUMBER
                      ,INVENTORY_ITEM_ID IN NUMBER
                      ,DR_INVOICE_NO IN VARCHAR2
                      ,CR_BASIC_ED IN NUMBER
                      ,CR_ADDITIONAL_ED IN NUMBER
                      ,CR_OTHER_ED IN NUMBER
                      ,TR6_CHALLAN_NO IN VARCHAR2
                      ,DR_BASIC_ED IN NUMBER
                      ,DR_ADDITIONAL_ED IN NUMBER
                      ,DR_OTHER_ED IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    IF ROUNDING_ID = -1 AND INVENTORY_ITEM_ID = 0 THEN
      P_DOC_NO := DR_INVOICE_NO;
    ELSIF NVL(CR_BASIC_ED
       ,0) > 0 OR NVL(CR_ADDITIONAL_ED
       ,0) > 0 OR NVL(CR_OTHER_ED
       ,0) > 0 THEN
      P_DOC_NO := TR6_CHALLAN_NO;
    ELSIF NVL(DR_BASIC_ED
       ,0) > 0 OR NVL(DR_ADDITIONAL_ED
       ,0) > 0 OR NVL(DR_OTHER_ED
       ,0) > 0 THEN
      P_DOC_NO := DR_INVOICE_NO;
    ELSE
      P_DOC_NO := NULL;
    END IF;
    RETURN (P_DOC_NO);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_2FORMULA;

  FUNCTION CF_1FORMULA(ROUNDING_ID IN NUMBER
                      ,INVENTORY_ITEM_ID IN NUMBER
                      ,DR_INVOICE_DATE IN VARCHAR2
                      ,CR_BASIC_ED IN NUMBER
                      ,CR_ADDITIONAL_ED IN NUMBER
                      ,CR_OTHER_ED IN NUMBER
                      ,TR6_CHALLAN_DATE IN VARCHAR2
                      ,DR_BASIC_ED IN NUMBER
                      ,DR_ADDITIONAL_ED IN NUMBER
                      ,DR_OTHER_ED IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    IF ROUNDING_ID = -1 AND INVENTORY_ITEM_ID = 0 THEN
      P_DOC_DATE := DR_INVOICE_DATE;
    ELSIF NVL(CR_BASIC_ED
       ,0) > 0 OR NVL(CR_ADDITIONAL_ED
       ,0) > 0 OR NVL(CR_OTHER_ED
       ,0) > 0 THEN
      P_DOC_DATE := TR6_CHALLAN_DATE;
    ELSIF NVL(DR_BASIC_ED
       ,0) > 0 OR NVL(DR_ADDITIONAL_ED
       ,0) > 0 OR NVL(DR_OTHER_ED
       ,0) > 0 THEN
      P_DOC_DATE := DR_INVOICE_DATE;
    ELSE
      P_DOC_DATE := NULL;
    END IF;
    RETURN (P_DOC_DATE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_1FORMULA;

  FUNCTION CF_1FORMULA0031(TRANSACTION_ID IN NUMBER
                          ,ROUNDING_ID IN NUMBER
                          ,INVENTORY_ITEM_ID IN NUMBER
                          ,TR6_CHALLAN_DATE IN VARCHAR2
                          ,REMARKS IN VARCHAR2
                          ,DOC_DATE IN DATE
                          ,CR_BASIC_ED IN NUMBER
                          ,CR_ADDITIONAL_ED IN NUMBER
                          ,CR_OTHER_ED IN NUMBER
                          ,DR_BASIC_ED IN NUMBER
                          ,DR_ADDITIONAL_ED IN NUMBER
                          ,DR_OTHER_ED IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    IF TRANSACTION_ID = 19 AND ROUNDING_ID = -1 AND INVENTORY_ITEM_ID = 0 THEN
      P_TR6NO := 'ROUNDING';
    ELSIF TR6_CHALLAN_DATE IS NULL AND SUBSTR(REMARKS
          ,1
          ,23) = 'Duty Payment Adjustment' THEN
      /*SRW.MESSAGE(101
                 ,'Remarks ' || TO_CHAR(DOC_DATE))*/NULL;
      P_TR6NO := 'CONSOLIDATION';
    ELSIF CR_BASIC_ED > 0 OR CR_ADDITIONAL_ED > 0 AND CR_OTHER_ED > 0 THEN
      P_TR6NO := 'TR6';
    ELSIF DR_BASIC_ED > 0 OR DR_ADDITIONAL_ED > 0 AND DR_OTHER_ED > 0 THEN
      P_TR6NO := 'INVOICE';
    ELSE
      P_TR6NO := NULL;
    END IF;
    RETURN (P_TR6NO);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (0);
  END CF_1FORMULA0031;

  FUNCTION CF_CETFORMULA(INVENTORY_ITEM_ID IN NUMBER) RETURN VARCHAR2 IS
    CURSOR C_ITEM_TARIFF IS
      SELECT
        B.ITEM_TARIFF
      FROM
        JAI_INV_ITM_SETUPS B
      WHERE B.INVENTORY_ITEM_ID = CF_CETFORMULA.INVENTORY_ITEM_ID
        AND B.ORGANIZATION_ID = P_ORGANIZATION_ID;
    LV_ITEM_TARIFF JAI_INV_ITM_SETUPS.ITEM_TARIFF%TYPE;
  BEGIN
    OPEN C_ITEM_TARIFF;
    FETCH C_ITEM_TARIFF
     INTO LV_ITEM_TARIFF;
    CLOSE C_ITEM_TARIFF;
    IF LV_ITEM_TARIFF IS NOT NULL THEN
      RETURN (LV_ITEM_TARIFF);
    END IF;
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN (0);
      RETURN NULL;
  END CF_CETFORMULA;

  FUNCTION CF_1FORMULA0032(VENDOR_ID IN NUMBER
                          ,VENDOR_SITE_ID IN NUMBER
                          ,VFLAG IN VARCHAR2) RETURN VARCHAR2 IS
    CURSOR C_EC_CODE_CUSTOMER IS
      SELECT
        A.EC_CODE
      FROM
        JAI_CMN_CUS_ADDRESSES A,
        HZ_CUST_SITE_USES_ALL C
      WHERE ( A.ADDRESS_ID = C.CUST_ACCT_SITE_ID
      OR ( A.ADDRESS_ID is NULL
        AND C.CUST_ACCT_SITE_ID is NULL ) )
        AND A.CUSTOMER_ID = VENDOR_ID
        AND C.SITE_USE_ID = VENDOR_SITE_ID;
    CURSOR C_EC_CODE_VENDOR IS
      SELECT
        EC_CODE
      FROM
        JAI_CMN_VENDOR_SITES
      WHERE VENDOR_ID = CF_1FORMULA0032.VENDOR_ID
        AND ROWNUM = 1
        AND VENDOR_SITE_ID = CF_1FORMULA0032.VENDOR_SITE_ID;
    CURSOR C_EC_CODE_HR IS
      SELECT
        A.EC_CODE
      FROM
        JAI_CMN_INVENTORY_ORGS A
      WHERE A.ORGANIZATION_ID = P_ORGANIZATION_ID
        AND ROWNUM = 1
        AND A.LOCATION_ID = P_LOCATION_ID;
    X_EC_CODE JAI_CMN_INVENTORY_ORGS.EC_CODE%TYPE;
  BEGIN
    IF VFLAG = 'C' THEN
      OPEN C_EC_CODE_CUSTOMER;
      FETCH C_EC_CODE_CUSTOMER
       INTO X_EC_CODE;
      CLOSE C_EC_CODE_CUSTOMER;
      RETURN (X_EC_CODE);
    ELSIF VFLAG = 'V' THEN
      OPEN C_EC_CODE_VENDOR;
      FETCH C_EC_CODE_VENDOR
       INTO X_EC_CODE;
      CLOSE C_EC_CODE_VENDOR;
      RETURN (X_EC_CODE);
    ELSIF VFLAG = 'O' THEN
      OPEN C_EC_CODE_HR;
      FETCH C_EC_CODE_HR
       INTO X_EC_CODE;
      CLOSE C_EC_CODE_HR;
      RETURN (X_EC_CODE);
    ELSE
      RETURN (0);
    END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN (0);
  END CF_1FORMULA0032;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
    V_MONTH VARCHAR2(3);
    V_FINAL_FOLIO NUMBER;
  BEGIN
    V_MONTH := TO_CHAR(P_TRN_FROM_DATE
                      ,'MON');
    V_FINAL_FOLIO := PREV_PAGE + LAST_PAGE;
    IF VALIDATION_FLAG = 'Y' THEN
      NULL;
    END IF;
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION CF_FOLIOFORMULA(INVENTORY_ITEM_ID IN NUMBER
                          ,SLNO IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    RETURN (TO_CHAR(NVL(INVENTORY_ITEM_ID
                      ,0)) || '/' || TO_CHAR(SLNO));
  END CF_FOLIOFORMULA;

  FUNCTION CF_OPENING_BALFORMULA RETURN NUMBER IS
    CURSOR OPEN_BAL1(FRM_DT IN DATE) IS
      SELECT
        OPENING_BALANCE
      FROM
        JAI_CMN_RG_PLA_TRXS
      WHERE TRUNC(CREATION_DATE) >= TRUNC(FRM_DT)
        AND REGISTER_ID = (
        SELECT
          MIN(REGISTER_ID)
        FROM
          JAI_CMN_RG_PLA_TRXS
        WHERE TRUNC(CREATION_DATE) >= TRUNC(FRM_DT) );
    CURSOR OPEN_BAL2 IS
      SELECT
        OPENING_BALANCE
      FROM
        JAI_CMN_RG_PLA_TRXS
      WHERE REGISTER_ID = (
        SELECT
          MIN(REGISTER_ID)
        FROM
          JAI_CMN_RG_PLA_TRXS );
    OPEN_BAL NUMBER;
  BEGIN
    IF P_TRN_FROM_DATE IS NOT NULL THEN
      OPEN OPEN_BAL1(P_TRN_FROM_DATE);
      FETCH OPEN_BAL1
       INTO OPEN_BAL;
      CLOSE OPEN_BAL1;
    ELSE
      OPEN OPEN_BAL2;
      FETCH OPEN_BAL2
       INTO OPEN_BAL;
      CLOSE OPEN_BAL2;
    END IF;
    RETURN (OPEN_BAL);
  END CF_OPENING_BALFORMULA;

  FUNCTION CF_CR_OPEN_BALFORMULA RETURN NUMBER IS
    BASIC_BAL NUMBER;
  BEGIN
    IF P_TRN_FROM_DATE IS NOT NULL THEN
      BEGIN
        SELECT
          NVL(SUM(CR_BASIC_ED)
             ,0) - NVL(SUM(DR_BASIC_ED)
             ,0)
        INTO BASIC_BAL
        FROM
          JAI_CMN_RG_PLA_TRXS
        WHERE TRUNC(CREATION_DATE) < TRUNC(P_TRN_FROM_DATE)
          AND ORGANIZATION_ID = P_ORGANIZATION_ID
          AND LOCATION_ID = P_LOCATION_ID;
      EXCEPTION
        WHEN OTHERS THEN
          BASIC_BAL := 0;
      END;
    ELSE
      BASIC_BAL := 0;
    END IF;
    RETURN (ROUND(BASIC_BAL
                ,2));
  END CF_CR_OPEN_BALFORMULA;

  FUNCTION CF_ADDITIONAL_OPEN_BALFORMULA RETURN NUMBER IS
    ADDITIONAL_BAL NUMBER;
  BEGIN
    IF P_TRN_FROM_DATE IS NOT NULL THEN
      BEGIN
        SELECT
          NVL(SUM(CR_ADDITIONAL_ED)
             ,0) - NVL(SUM(DR_ADDITIONAL_ED)
             ,0)
        INTO ADDITIONAL_BAL
        FROM
          JAI_CMN_RG_PLA_TRXS
        WHERE TRUNC(CREATION_DATE) < TRUNC(P_TRN_FROM_DATE)
          AND ORGANIZATION_ID = P_ORGANIZATION_ID
          AND LOCATION_ID = P_LOCATION_ID;
      EXCEPTION
        WHEN OTHERS THEN
          ADDITIONAL_BAL := 0;
          RETURN (0);
      END;
    ELSE
      ADDITIONAL_BAL := 0;
    END IF;
    RETURN (ROUND(ADDITIONAL_BAL
                ,2));
  END CF_ADDITIONAL_OPEN_BALFORMULA;

  FUNCTION CF_OTHER_OPEN_BALFORMULA RETURN NUMBER IS
    OTHER_BAL NUMBER;
  BEGIN
    IF P_TRN_FROM_DATE IS NOT NULL THEN
      BEGIN
        SELECT
          NVL(SUM(CR_OTHER_ED)
             ,0) - NVL(SUM(DR_OTHER_ED)
             ,0)
        INTO OTHER_BAL
        FROM
          JAI_CMN_RG_PLA_TRXS
        WHERE TRUNC(CREATION_DATE) < TRUNC(P_TRN_FROM_DATE)
          AND ORGANIZATION_ID = P_ORGANIZATION_ID
          AND LOCATION_ID = P_LOCATION_ID;
      EXCEPTION
        WHEN OTHERS THEN
          OTHER_BAL := 0;
      END;
    ELSE
      OTHER_BAL := 0;
    END IF;
    RETURN (ROUND(OTHER_BAL
                ,2));
  END CF_OTHER_OPEN_BALFORMULA;

  FUNCTION CF_ACK_RECD_DATEFORMULA(TRANSACTION_ID IN NUMBER
                                  ,REGISTER_ID IN NUMBER
                                  ,SLNO IN NUMBER
                                  ,CREATION_DATE IN DATE) RETURN DATE IS
    V_ACK_DATE DATE;
  BEGIN
    IF TRANSACTION_ID = 91 THEN
      FOR C_FETCH_ACK_DATE IN (SELECT
                                 ACK_RECVD_DATE
                               FROM
                                 JAI_CMN_RG_PLA_HDRS A,
                                 JAI_CMN_RG_PLA_TRXS B
                               WHERE A.PLA_RG_SR_NO = B.SLNO
                                 AND A.ORGANIZATION_ID = B.ORGANIZATION_ID
                                 AND A.LOCATION_ID = B.LOCATION_ID
                                 AND B.REGISTER_ID = CF_ACK_RECD_DATEFORMULA.REGISTER_ID
                                 AND B.SLNO = CF_ACK_RECD_DATEFORMULA.SLNO) LOOP
        V_ACK_DATE := C_FETCH_ACK_DATE.ACK_RECVD_DATE;
      END LOOP;
    ELSE
      V_ACK_DATE := CREATION_DATE;
    END IF;
    IF V_ACK_DATE IS NOT NULL THEN
      RETURN (V_ACK_DATE);
    ELSE
      RETURN (CREATION_DATE);
    END IF;
  END CF_ACK_RECD_DATEFORMULA;

  FUNCTION CF_HDR_EC_CODEFORMULA RETURN CHAR IS
    V_ECC_CODE JAI_CMN_INVENTORY_ORGS.EC_CODE%TYPE;
    CURSOR C_EC_CODE IS
      SELECT
        EC_CODE
      FROM
        JAI_CMN_INVENTORY_ORGS
      WHERE ORGANIZATION_ID = P_ORGANIZATION_ID
        AND LOCATION_ID = P_LOCATION_ID;
    CURSOR C_EC_CODE_WO_LOCATION IS
      SELECT
        EC_CODE
      FROM
        JAI_CMN_INVENTORY_ORGS
      WHERE ORGANIZATION_ID = P_ORGANIZATION_ID
        AND LOCATION_ID = 0;
  BEGIN
    OPEN C_EC_CODE;
    FETCH C_EC_CODE
     INTO V_ECC_CODE;
    CLOSE C_EC_CODE;
    IF V_ECC_CODE IS NULL THEN
      OPEN C_EC_CODE_WO_LOCATION;
      FETCH C_EC_CODE_WO_LOCATION
       INTO V_ECC_CODE;
      CLOSE C_EC_CODE_WO_LOCATION;
    END IF;
    RETURN (V_ECC_CODE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_HDR_EC_CODEFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    CURSOR C_PROGRAM_ID(P_REQUEST_ID IN NUMBER) IS
      SELECT
        CONCURRENT_PROGRAM_ID,
        NVL(ENABLE_TRACE
           ,'N')
      FROM
        FND_CONCURRENT_REQUESTS
      WHERE REQUEST_ID = P_REQUEST_ID;
    CURSOR GET_AUDSID IS
      SELECT
        A.SID,
        A.SERIAL#,
        B.SPID
      FROM
        V$SESSION A,
        V$PROCESS B
      WHERE AUDSID = USERENV('SESSIONID')
        AND A.PADDR = B.ADDR;
    CURSOR GET_DBNAME IS
      SELECT
        NAME
      FROM
        V$DATABASE;
    V_ENABLE_TRACE FND_CONCURRENT_PROGRAMS.ENABLE_TRACE%TYPE;
    V_PROGRAM_ID FND_CONCURRENT_PROGRAMS.CONCURRENT_PROGRAM_ID%TYPE;
    V_SID V$SESSION.SID%TYPE;
    V_SERIAL V$SESSION.SERIAL#%TYPE;
    V_SPID V$PROCESS.SPID%TYPE;
    V_NAME V$DATABASE.NAME%TYPE;

  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    LP_TRN_FROM_DATE := to_char(P_TRN_FROM_DATE,'DD-MON-YYYY');
    LP_TRN_TO_DATE := to_char(P_TRN_TO_DATE,'DD-MON-YYYY') ;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    /*SRW.MESSAGE(1275
               ,'Report Version is 120.4 Last modified date is 15/02/2007')*/NULL;
    BEGIN
      OPEN C_PROGRAM_ID(P_CONC_REQUEST_ID);
      FETCH C_PROGRAM_ID
       INTO V_PROGRAM_ID,V_ENABLE_TRACE;
      CLOSE C_PROGRAM_ID;
      /*SRW.MESSAGE(1275
                 ,'v_program_id -> ' || V_PROGRAM_ID || ', v_enable_trace -> ' || V_ENABLE_TRACE || ', request_id -> ' || P_CONC_REQUEST_ID)*/NULL;
      IF V_ENABLE_TRACE = 'Y' THEN
        OPEN GET_AUDSID;
        FETCH GET_AUDSID
         INTO V_SID,V_SERIAL,V_SPID;
        CLOSE GET_AUDSID;
        OPEN GET_DBNAME;
        FETCH GET_DBNAME
         INTO V_NAME;
        CLOSE GET_DBNAME;
        /*SRW.MESSAGE(1275
                   ,'TraceFile Name = ' || LOWER(V_NAME) || '_ora_' || V_SPID || '.trc')*/NULL;
        EXECUTE IMMEDIATE
          'ALTER SESSION SET EVENTS ''10046 trace name context forever, level 4''';
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        /*SRW.MESSAGE(1275
                   ,'Error during enabling the trace. ErrCode -> ' || SQLCODE || ', ErrMesg -> ' || SQLERRM)*/NULL;
    END;
    RETURN (TRUE);
    OPENING_BALANCE;
  END BEFOREREPORT;

  FUNCTION CF_CESS_OPEN_BALFORMULA RETURN NUMBER IS
    CURSOR CUR_CESS_OPEN_BAL(P_ORG_ID IN JAI_CMN_RG_PLA_TRXS.ORGANIZATION_ID%TYPE,P_LOC_ID IN JAI_CMN_RG_PLA_TRXS.LOCATION_ID%TYPE,
    P_TRN_FRM_DATE IN DATE,CP_SOURCE_REGISTER IN JAI_CMN_RG_OTHERS.SOURCE_REGISTER%TYPE,CP_TAX_TYPE IN JAI_CMN_RG_OTHERS.TAX_TYPE%TYPE) IS
      SELECT
        CLOSING_BALANCE
      FROM
        JAI_CMN_RG_OTHERS
      WHERE SOURCE_REGISTER = CP_SOURCE_REGISTER
        AND TAX_TYPE = CP_TAX_TYPE
        AND SOURCE_REGISTER_ID = (
        SELECT
          MAX(A.REGISTER_ID)
        FROM
          JAI_CMN_RG_PLA_TRXS A,
          JAI_CMN_RG_OTHERS B
        WHERE A.REGISTER_ID = B.SOURCE_REGISTER_ID
          AND B.SOURCE_REGISTER = CP_SOURCE_REGISTER
          AND B.TAX_TYPE = CP_TAX_TYPE
          AND A.TRANSACTION_DATE = (
          SELECT
            MAX(C.TRANSACTION_DATE)
          FROM
            JAI_CMN_RG_PLA_TRXS C,
            JAI_CMN_RG_OTHERS D
          WHERE C.REGISTER_ID = D.SOURCE_REGISTER_ID
            AND D.SOURCE_REGISTER = CP_SOURCE_REGISTER
            AND D.TAX_TYPE = CP_TAX_TYPE
            AND TRUNC(C.TRANSACTION_DATE) < TRUNC(P_TRN_FRM_DATE)
            AND C.ORGANIZATION_ID = P_ORG_ID
            AND C.LOCATION_ID = P_LOC_ID ) );
    LN_CESS_OPEN_BAL NUMBER := 0;
  BEGIN
    IF P_TRN_FROM_DATE IS NOT NULL THEN
      OPEN CUR_CESS_OPEN_BAL(P_ORG_ID => P_ORGANIZATION_ID,P_LOC_ID => P_LOCATION_ID,P_TRN_FRM_DATE => P_TRN_FROM_DATE,
      CP_SOURCE_REGISTER => 'PLA',CP_TAX_TYPE => 'EXCISE_EDUCATION_CESS');
      FETCH CUR_CESS_OPEN_BAL
       INTO LN_CESS_OPEN_BAL;
      CLOSE CUR_CESS_OPEN_BAL;
    END IF;
    RETURN (ROUND(LN_CESS_OPEN_BAL
                ,2));
  END CF_CESS_OPEN_BALFORMULA;

  FUNCTION CF_CESS_CLOSE_BALFORMULA1(REGISTER_ID IN NUMBER) RETURN NUMBER IS
    CURSOR CUR_CESS_BAL(CP_SOURCE_REGISTER IN JAI_CMN_RG_OTHERS.SOURCE_REGISTER%TYPE,CP_TAX_TYPE IN JAI_CMN_RG_OTHERS.TAX_TYPE%TYPE) IS
      SELECT
        NVL(SUM(CREDIT)
           ,0) - NVL(SUM(DEBIT)
           ,0)
      FROM
        JAI_CMN_RG_OTHERS RG_OTH
      WHERE RG_OTH.SOURCE_REGISTER_ID = REGISTER_ID
        AND RG_OTH.SOURCE_REGISTER = CP_SOURCE_REGISTER
        AND RG_OTH.TAX_TYPE = CP_TAX_TYPE;

    LN_SHE_CESS_BAL NUMBER := 0;
    LN_CESS_BAL NUMBER := 0;
  BEGIN
    OPEN CUR_CESS_BAL('PLA','EXCISE_EDUCATION_CESS');
    FETCH CUR_CESS_BAL
     INTO LN_CESS_BAL;
    CLOSE CUR_CESS_BAL;

    /*IF (P_FIRST_REC1 = 'T') THEN
      CP_EXCISE_CESS_OPEN_BAL := NVL(P_EXCISE_CESS_OPEN_BAL
                                    ,0) + NVL(LN_CESS_BAL
                                    ,0) + NVL(LN_SHE_CESS_BAL
                                    ,0);
      P_FIRST_REC1 := 'F';


    ELSE
      CP_EXCISE_CESS_OPEN_BAL := NVL(CP_EXCISE_CESS_OPEN_BAL
                                    ,0) + NVL(LN_CESS_BAL
                                    ,0) + NVL(LN_SHE_CESS_BAL
                                    ,0);

    END IF;
    CP_EXCISE_CESS_OPEN_BAL := CP_EXCISE_CESS_OPEN_BAL - CP_RND_EDU_CESS;*/
    RETURN (NVL(LN_CESS_BAL
              ,0));
  END CF_CESS_CLOSE_BALFORMULA1;

FUNCTION CF_CESS_CLOSE_BALFORMULA2(REGISTER_ID IN NUMBER) RETURN NUMBER IS
    CURSOR CUR_SHE_CESS_BAL IS
      SELECT
        NVL(SUM(CREDIT)
           ,0) - NVL(SUM(DEBIT)
           ,0)
      FROM
        JAI_CMN_RG_OTHERS RG_OTH
      WHERE RG_OTH.SOURCE_REGISTER_ID = REGISTER_ID
        AND RG_OTH.SOURCE_REGISTER = 'PLA'
        AND SOURCE_TYPE = 2
        AND RG_OTH.TAX_TYPE IN ( 'EXCISE_SH_EDU_CESS' );
    LN_SHE_CESS_BAL NUMBER := 0;
    LN_CESS_BAL NUMBER := 0;
  BEGIN

    OPEN CUR_SHE_CESS_BAL;
    FETCH CUR_SHE_CESS_BAL
     INTO LN_SHE_CESS_BAL;
    CLOSE CUR_SHE_CESS_BAL;

    RETURN (NVL(LN_SHE_CESS_BAL
              ,0));
  END CF_CESS_CLOSE_BALFORMULA2;

  FUNCTION CF_CR_CESSFORMULA(REGISTER_ID IN NUMBER) RETURN NUMBER IS
    CURSOR CUR_CR_CESS(CP_SOURCE_REGISTER IN JAI_CMN_RG_OTHERS.SOURCE_REGISTER%TYPE,CP_TAX_TYPE IN JAI_CMN_RG_OTHERS.TAX_TYPE%TYPE) IS
      SELECT
        NVL(SUM(CREDIT)
           ,0)
      FROM
        JAI_CMN_RG_OTHERS RG_OTH
      WHERE RG_OTH.SOURCE_REGISTER_ID = REGISTER_ID
        AND RG_OTH.SOURCE_REGISTER = CP_SOURCE_REGISTER
        AND RG_OTH.TAX_TYPE = CP_TAX_TYPE;
    CURSOR CUR_SHE_CR_CESS IS
      SELECT
        NVL(SUM(CREDIT)
           ,0)
      FROM
        JAI_CMN_RG_OTHERS RG_OTH
      WHERE RG_OTH.SOURCE_REGISTER_ID = REGISTER_ID
        AND RG_OTH.SOURCE_REGISTER = 'PLA'
        AND RG_OTH.TAX_TYPE IN ( 'EXCISE_SH_EDU_CESS' );
    LN_SHE_CR_CESS_AMT NUMBER := 0;
    LV_CR_CESS_AMT NUMBER := 0;
  BEGIN
    OPEN CUR_CR_CESS('PLA','EXCISE_EDUCATION_CESS');
    FETCH CUR_CR_CESS
     INTO LV_CR_CESS_AMT;
    CLOSE CUR_CR_CESS;
    OPEN CUR_SHE_CR_CESS;
    FETCH CUR_SHE_CR_CESS
     INTO LN_SHE_CR_CESS_AMT;
    CLOSE CUR_SHE_CR_CESS;
    RETURN (ROUND(NVL(LV_CR_CESS_AMT
                    ,0) + NVL(LN_SHE_CR_CESS_AMT
                    ,0)
                ,2));
  END CF_CR_CESSFORMULA;

  FUNCTION CF_DB_CESSFORMULA(REGISTER_ID IN NUMBER) RETURN NUMBER IS
    CURSOR CUR_DB_CESS(CP_SOURCE_REGISTER IN JAI_CMN_RG_OTHERS.SOURCE_REGISTER%TYPE,CP_TAX_TYPE IN JAI_CMN_RG_OTHERS.TAX_TYPE%TYPE) IS
      SELECT
        NVL(SUM(DEBIT)
           ,0)
      FROM
        JAI_CMN_RG_OTHERS RG_OTH
      WHERE RG_OTH.SOURCE_REGISTER_ID = REGISTER_ID
        AND RG_OTH.SOURCE_REGISTER = CP_SOURCE_REGISTER
        AND RG_OTH.TAX_TYPE = CP_TAX_TYPE;
    CURSOR CUR_SHE_DB_CESS IS
      SELECT
        NVL(SUM(DEBIT)
           ,0)
      FROM
        JAI_CMN_RG_OTHERS RG_OTH
      WHERE RG_OTH.SOURCE_REGISTER_ID = REGISTER_ID
        AND RG_OTH.SOURCE_REGISTER = 'PLA'
        AND RG_OTH.TAX_TYPE IN ( 'EXCISE_SH_EDU_CESS' );
    LN_SHE_DB_CESS_AMT NUMBER := 0;
    LV_DB_CESS_AMT NUMBER := 0;
  BEGIN
    OPEN CUR_DB_CESS('PLA','EXCISE_EDUCATION_CESS');
    FETCH CUR_DB_CESS
     INTO LV_DB_CESS_AMT;
    CLOSE CUR_DB_CESS;
    OPEN CUR_SHE_DB_CESS;
    FETCH CUR_SHE_DB_CESS
     INTO LN_SHE_DB_CESS_AMT;
    CLOSE CUR_SHE_DB_CESS;
    RETURN (ROUND(NVL(LV_DB_CESS_AMT
                    ,0) + NVL(CP_RND_EDU_CESS
                    ,0) + NVL(LN_SHE_DB_CESS_AMT
                    ,0)
                ,2));
  END CF_DB_CESSFORMULA;

  FUNCTION CF_CR_CVD_CESSFORMULA(REGISTER_ID IN NUMBER) RETURN NUMBER IS
    CURSOR CUR_CR_CVD_CESS(CP_SOURCE_REGISTER IN JAI_CMN_RG_OTHERS.SOURCE_REGISTER%TYPE,CP_TAX_TYPE IN JAI_CMN_RG_OTHERS.TAX_TYPE%TYPE) IS
      SELECT
        NVL(SUM(CREDIT)
           ,0)
      FROM
        JAI_CMN_RG_OTHERS RG_OTH
      WHERE RG_OTH.SOURCE_REGISTER_ID = REGISTER_ID
        AND RG_OTH.SOURCE_REGISTER = CP_SOURCE_REGISTER
        AND RG_OTH.TAX_TYPE = CP_TAX_TYPE;
    CURSOR CUR_SHE_CR_CVD_CESS IS
      SELECT
        NVL(SUM(CREDIT)
           ,0)
      FROM
        JAI_CMN_RG_OTHERS RG_OTH
      WHERE RG_OTH.SOURCE_REGISTER_ID = REGISTER_ID
        AND RG_OTH.SOURCE_REGISTER = 'PLA'
        AND RG_OTH.TAX_TYPE IN ( 'CVD_SH_EDU_CESS' );
    LN_SHE_CR_CESS_CVD_AMT NUMBER := 0;
    LV_CR_CESS_CVD_AMT NUMBER := 0;
  BEGIN
    OPEN CUR_CR_CVD_CESS('PLA','CVD_EDUCATION_CESS');
    FETCH CUR_CR_CVD_CESS
     INTO LV_CR_CESS_CVD_AMT;
    CLOSE CUR_CR_CVD_CESS;
    OPEN CUR_SHE_CR_CVD_CESS;
    FETCH CUR_SHE_CR_CVD_CESS
     INTO LN_SHE_CR_CESS_CVD_AMT;
    CLOSE CUR_SHE_CR_CVD_CESS;
    RETURN (ROUND(NVL(LV_CR_CESS_CVD_AMT
                    ,0) + NVL(LN_SHE_CR_CESS_CVD_AMT
                    ,0)
                ,2));
  END CF_CR_CVD_CESSFORMULA;

  FUNCTION CF_DB_CVD_CESSFORMULA(REGISTER_ID IN NUMBER) RETURN NUMBER IS
    CURSOR CUR_DB_CVD_CESS(CP_SOURCE_REGISTER IN JAI_CMN_RG_OTHERS.SOURCE_REGISTER%TYPE,CP_TAX_TYPE IN JAI_CMN_RG_OTHERS.TAX_TYPE%TYPE) IS
      SELECT
        NVL(SUM(DEBIT)
           ,0)
      FROM
        JAI_CMN_RG_OTHERS RG_OTH
      WHERE RG_OTH.SOURCE_REGISTER_ID = REGISTER_ID
        AND RG_OTH.SOURCE_REGISTER = CP_SOURCE_REGISTER
        AND RG_OTH.TAX_TYPE = CP_TAX_TYPE;
    CURSOR CUR_SHE_DB_CVD_CESS IS
      SELECT
        NVL(SUM(DEBIT)
           ,0)
      FROM
        JAI_CMN_RG_OTHERS RG_OTH
      WHERE RG_OTH.SOURCE_REGISTER_ID = REGISTER_ID
        AND RG_OTH.SOURCE_REGISTER = 'PLA'
        AND RG_OTH.TAX_TYPE IN ( 'CVD_SH_EDU_CESS' );
    LN_SHE_DB_CVD_CESS_AMT NUMBER := 0;
    LV_DB_CVD_CESS_AMT NUMBER := 0;
  BEGIN
    OPEN CUR_DB_CVD_CESS('PLA','CVD_EDUCATION_CESS');
    FETCH CUR_DB_CVD_CESS
     INTO LV_DB_CVD_CESS_AMT;
    CLOSE CUR_DB_CVD_CESS;
    OPEN CUR_SHE_DB_CVD_CESS;
    FETCH CUR_SHE_DB_CVD_CESS
     INTO LN_SHE_DB_CVD_CESS_AMT;
    CLOSE CUR_SHE_DB_CVD_CESS;
    RETURN (ROUND(NVL(LV_DB_CVD_CESS_AMT
                    ,0) + NVL(CP_RND_CVD_CESS
                    ,0) + NVL(LN_SHE_DB_CVD_CESS_AMT
                    ,0)
                ,2));
  END CF_DB_CVD_CESSFORMULA;

  FUNCTION CF_CVD_CESS_CLOS_BALFORMULA(REGISTER_ID IN NUMBER) RETURN NUMBER IS
    CURSOR CUR_CESS_CVD_BAL(CP_SOURCE_REGISTER IN JAI_CMN_RG_OTHERS.SOURCE_REGISTER%TYPE,CP_TAX_TYPE IN JAI_CMN_RG_OTHERS.TAX_TYPE%TYPE) IS
      SELECT
        NVL(SUM(CREDIT)
           ,0) - NVL(SUM(DEBIT)
           ,0)
      FROM
        JAI_CMN_RG_OTHERS RG_OTH
      WHERE RG_OTH.SOURCE_REGISTER_ID = REGISTER_ID
        AND RG_OTH.SOURCE_REGISTER = CP_SOURCE_REGISTER
        AND RG_OTH.TAX_TYPE = CP_TAX_TYPE;
    CURSOR CUR_SHE_CESS_CVD_BAL IS
      SELECT
        NVL(SUM(CREDIT)
           ,0) - NVL(SUM(DEBIT)
           ,0)
      FROM
        JAI_CMN_RG_OTHERS RG_OTH
      WHERE RG_OTH.SOURCE_REGISTER_ID = REGISTER_ID
        AND RG_OTH.SOURCE_REGISTER = 'PLA'
        AND RG_OTH.TAX_TYPE IN ( 'CVD_SH_EDU_CESS' );
    LN_SHE_CESS_CVD_BAL NUMBER := 0;
    LN_CESS_CVD_BAL NUMBER := 0;
  BEGIN
    OPEN CUR_CESS_CVD_BAL('PLA','CVD_EDUCATION_CESS');
    FETCH CUR_CESS_CVD_BAL
     INTO LN_CESS_CVD_BAL;
    CLOSE CUR_CESS_CVD_BAL;
    OPEN CUR_SHE_CESS_CVD_BAL;
    FETCH CUR_SHE_CESS_CVD_BAL
     INTO LN_SHE_CESS_CVD_BAL;
    CLOSE CUR_SHE_CESS_CVD_BAL;
    IF (P_FIRST_REC2 = 'T') THEN
      CP_CVD_CESS_OPEN_BAL := NVL(P_CVD_CESS_OPEN_BAL
                                 ,0) + NVL(LN_CESS_CVD_BAL
                                 ,0) + NVL(LN_SHE_CESS_CVD_BAL
                                 ,0);
      P_FIRST_REC2 := 'F';
    ELSE
      CP_CVD_CESS_OPEN_BAL := NVL(CP_CVD_CESS_OPEN_BAL
                                 ,0) + NVL(LN_CESS_CVD_BAL
                                 ,0) + NVL(LN_SHE_CESS_CVD_BAL
                                 ,0);
    END IF;
    CP_CVD_CESS_OPEN_BAL := CP_CVD_CESS_OPEN_BAL - CP_RND_CVD_CESS;
    RETURN (NVL(CP_CVD_CESS_OPEN_BAL
              ,0));
  END CF_CVD_CESS_CLOS_BALFORMULA;

  FUNCTION CF_CVD_CESS_OPEN_BALFORMULA RETURN NUMBER IS
    CURSOR CUR_CVD_CESS_OPEN_BAL(P_ORG_ID IN JAI_CMN_RG_PLA_TRXS.ORGANIZATION_ID%TYPE,P_LOC_ID IN JAI_CMN_RG_PLA_TRXS.LOCATION_ID%TYPE,
    P_TRN_FRM_DATE IN DATE,CP_SOURCE_REGISTER IN JAI_CMN_RG_OTHERS.SOURCE_REGISTER%TYPE,CP_TAX_TYPE IN JAI_CMN_RG_OTHERS.TAX_TYPE%TYPE) IS
      SELECT
        CLOSING_BALANCE
      FROM
        JAI_CMN_RG_OTHERS
      WHERE SOURCE_REGISTER = CP_SOURCE_REGISTER
        AND TAX_TYPE = CP_TAX_TYPE
        AND SOURCE_REGISTER_ID = (
        SELECT
          MAX(A.REGISTER_ID)
        FROM
          JAI_CMN_RG_PLA_TRXS A,
          JAI_CMN_RG_OTHERS B
        WHERE A.REGISTER_ID = B.SOURCE_REGISTER_ID
          AND B.SOURCE_REGISTER = CP_SOURCE_REGISTER
          AND B.TAX_TYPE = CP_TAX_TYPE
          AND A.TRANSACTION_DATE = (
          SELECT
            MAX(C.TRANSACTION_DATE)
          FROM
            JAI_CMN_RG_PLA_TRXS C,
            JAI_CMN_RG_OTHERS D
          WHERE C.REGISTER_ID = D.SOURCE_REGISTER_ID
            AND D.SOURCE_REGISTER = CP_SOURCE_REGISTER
            AND D.TAX_TYPE = CP_TAX_TYPE
            AND TRUNC(C.TRANSACTION_DATE) < TRUNC(P_TRN_FRM_DATE)
            AND C.ORGANIZATION_ID = P_ORG_ID
            AND C.LOCATION_ID = P_LOC_ID ) );
    LN_CVD_CESS_OPEN_BAL NUMBER := 0;
  BEGIN
    IF P_TRN_FROM_DATE IS NOT NULL THEN
      OPEN CUR_CVD_CESS_OPEN_BAL(P_ORG_ID => P_ORGANIZATION_ID,P_LOC_ID => P_LOCATION_ID,P_TRN_FRM_DATE => P_TRN_FROM_DATE,
      CP_SOURCE_REGISTER => 'PLA',CP_TAX_TYPE => 'CVD_EDUCATION_CESS');
      FETCH CUR_CVD_CESS_OPEN_BAL
       INTO LN_CVD_CESS_OPEN_BAL;
      CLOSE CUR_CVD_CESS_OPEN_BAL;
    END IF;
    RETURN (ROUND(LN_CVD_CESS_OPEN_BAL
                ,2));
  END CF_CVD_CESS_OPEN_BALFORMULA;

  FUNCTION CF_ROUNDING_AMTSFORMULA(TRANSACTION_ID IN NUMBER
                                  ,ROUNDING_ID IN NUMBER
                                  ,DR_INVOICE_NO IN VARCHAR2) RETURN NUMBER IS
    CURSOR C_ROUNDING_DTL(CP_ROUNDING_ID IN NUMBER) IS
      SELECT
        REGISTER_ID
      FROM
        JAI_CMN_RG_ROUND_HDRS
      WHERE ROUNDING_ID = CP_ROUNDING_ID;
    CURSOR C_PLA_RND_AMTS(CP_REGISTER_ID IN NUMBER) IS
      SELECT
        - NVL(CR_BASIC_ED
           ,0) + NVL(DR_BASIC_ED
           ,0) BASIC_ED,
        - NVL(CR_ADDITIONAL_ED
           ,0) + NVL(DR_ADDITIONAL_ED
           ,0) ADDITIONAL_ED,
        - NVL(CR_OTHER_ED
           ,0) + NVL(DR_OTHER_ED
           ,0) OTHER_ED
      FROM
        JAI_CMN_RG_PLA_TRXS
      WHERE REGISTER_ID = CP_REGISTER_ID;
    CURSOR C_RND_CESS_AMT(CP_REGISTER_ID IN NUMBER,CP_SOURCE_TYPE IN NUMBER,P_TAX_TYPE IN VARCHAR2) IS
      SELECT
        SUM(NVL(DEBIT
               ,0) - NVL(CREDIT
               ,0))
      FROM
        JAI_CMN_RG_OTHERS
      WHERE SOURCE_REGISTER_ID = CP_REGISTER_ID
        AND SOURCE_TYPE = CP_SOURCE_TYPE
        AND TAX_TYPE = P_TAX_TYPE;
    V_RND_BASIC_ED NUMBER;
    V_RND_ADDITIONAL_ED NUMBER;
    V_RND_OTHER_ED NUMBER;
    V_RND_EDU_CESS NUMBER;
    V_RND_CVD_CESS NUMBER;
    V_REGISTER_ID NUMBER;
    V_RND_SHE_EDU_CESS NUMBER;
    V_RND_SHE_CVD_CESS NUMBER;
  BEGIN
    IF TRANSACTION_ID = 19 AND ROUNDING_ID > 0 THEN
      OPEN C_ROUNDING_DTL(ROUNDING_ID);
      FETCH C_ROUNDING_DTL
       INTO V_REGISTER_ID;
      CLOSE C_ROUNDING_DTL;
      OPEN C_PLA_RND_AMTS(V_REGISTER_ID);
      FETCH C_PLA_RND_AMTS
       INTO V_RND_BASIC_ED,V_RND_ADDITIONAL_ED,V_RND_OTHER_ED;
      CLOSE C_PLA_RND_AMTS;
      OPEN C_RND_CESS_AMT(V_REGISTER_ID,2,'EXCISE_EDUCATION_CESS');
      FETCH C_RND_CESS_AMT
       INTO V_RND_EDU_CESS;
      CLOSE C_RND_CESS_AMT;
      OPEN C_RND_CESS_AMT(V_REGISTER_ID,2,'CVD_EDUCATION_CESS');
      FETCH C_RND_CESS_AMT
       INTO V_RND_CVD_CESS;
      CLOSE C_RND_CESS_AMT;
      OPEN C_RND_CESS_AMT(V_REGISTER_ID,2,'EXCISE_SH_EDU_CESS');
      FETCH C_RND_CESS_AMT
       INTO V_RND_SHE_EDU_CESS;
      CLOSE C_RND_CESS_AMT;
      OPEN C_RND_CESS_AMT(V_REGISTER_ID,2,'CVD_SH_EDU_CESS');
      FETCH C_RND_CESS_AMT
       INTO V_RND_SHE_CVD_CESS;
      CLOSE C_RND_CESS_AMT;
    END IF;
    CP_RND_BASIC_ED := NVL(V_RND_BASIC_ED
                          ,0);
    CP_RND_OTHER_ED := NVL(V_RND_OTHER_ED
                          ,0);
    CP_RND_ADDL_ED := NVL(V_RND_ADDITIONAL_ED
                         ,0);
    CP_RND_EDU_CESS := NVL(V_RND_EDU_CESS
                          ,0);
    CP_RND_CVD_CESS := NVL(V_RND_CVD_CESS
                          ,0);
    CP_RND_SHE_EDU_CESS := NVL(V_RND_EDU_CESS
                              ,0);
    CP_RND_SHE_CVD_CESS := NVL(V_RND_CVD_CESS
                              ,0);
--raise_application_error(-20101, ' value of CP_RND_BASIC_ED=' ||CP_RND_BASIC_ED );
    /*SRW.MESSAGE(1001
               ,'ExInv:' || DR_INVOICE_NO || ',rndBasic:' || CP_RND_BASIC_ED || ',rndOth:' || CP_RND_OTHER_ED || ',rndAddl:' || CP_RND_ADDL_ED || ',
	       rndEdCess:' || CP_RND_EDU_CESS || ',rndCvd:' || CP_RND_CVD_CESS)*/NULL;
    RETURN (CP_RND_BASIC_ED + CP_RND_OTHER_ED + CP_RND_ADDL_ED + CP_RND_EDU_CESS + CP_RND_CVD_CESS + CP_RND_SHE_EDU_CESS + CP_RND_SHE_CVD_CESS);
  END CF_ROUNDING_AMTSFORMULA;

  FUNCTION CF_DR_BASIC_EDFORMULA(DR_BASIC_ED IN NUMBER) RETURN NUMBER IS
  BEGIN
  --raise_application_error(-20101, 'value of DR_BASIC_ED= '||DR_BASIC_ED||' value of CP_RND_BASIC_ED=' ||CP_RND_BASIC_ED );
    RETURN (NVL(DR_BASIC_ED ,0) + CP_RND_BASIC_ED);


  END CF_DR_BASIC_EDFORMULA;

  FUNCTION CF_DR_ADDL_EDFORMULA(DR_ADDITIONAL_ED IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (NVL(DR_ADDITIONAL_ED
              ,0) + CP_RND_ADDL_ED);
  END CF_DR_ADDL_EDFORMULA;

  FUNCTION CF_DR_OTHER_EDFORMULA(DR_OTHER_ED IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (NVL(DR_OTHER_ED
              ,0) + CP_RND_OTHER_ED);
  END CF_DR_OTHER_EDFORMULA;

  PROCEDURE OPENING_BALANCE IS
    BASIC_BAL NUMBER;
    ADDITIONAL_BAL NUMBER;
    OTHER_BAL NUMBER;
    CURSOR CUR_FIN_YEAR(CP_ORG_ID IN JAI_CMN_FIN_YEARS.ORGANIZATION_ID%TYPE,CP_FROM_DATE IN DATE) IS
      SELECT
        JCFY.FIN_YEAR
      FROM
        JAI_CMN_FIN_YEARS JCFY
      WHERE JCFY.ORGANIZATION_ID = CP_ORG_ID
        AND CP_FROM_DATE BETWEEN JCFY.FIN_YEAR_START_DATE
        AND JCFY.FIN_YEAR_END_DATE;
    CURSOR CUR_REG_ID(CP_TAX_TYPE IN VARCHAR2,CP_FIN_YEAR IN NUMBER) IS
      SELECT
        JCRPT.REGISTER_ID
      FROM
        JAI_CMN_RG_PLA_TRXS JCRPT
      WHERE JCRPT.LOCATION_ID = P_LOCATION_ID
        AND JCRPT.ORGANIZATION_ID = P_ORGANIZATION_ID
        AND JCRPT.SLNO = (
        SELECT
          MAX(JCRPT1.SLNO)
        FROM
          JAI_CMN_RG_PLA_TRXS JCRPT1
        WHERE JCRPT1.LOCATION_ID = P_LOCATION_ID
          AND JCRPT1.ORGANIZATION_ID = P_ORGANIZATION_ID
          AND JCRPT1.CREATION_DATE < P_TRN_FROM_DATE
          AND JCRPT1.FIN_YEAR = CP_FIN_YEAR
          AND EXISTS (
          SELECT
            1
          FROM
            JAI_CMN_RG_OTHERS JCRG
          WHERE JCRG.SOURCE_REGISTER_ID = JCRPT1.REGISTER_ID
            AND JCRG.SOURCE_TYPE = 2
            AND JCRG.SOURCE_REGISTER = 'PLA'
            AND JCRG.TAX_TYPE = CP_TAX_TYPE ) )
        AND JCRPT.FIN_YEAR = CP_FIN_YEAR;
    CURSOR CUR_OPEN_BAL(CP_REGISTER_ID IN NUMBER,CP_TAX_TYPE IN VARCHAR2) IS
      SELECT
        CLOSING_BALANCE
      FROM
        JAI_CMN_RG_OTHERS
      WHERE SOURCE_REGISTER_ID = CP_REGISTER_ID
        AND TAX_TYPE = CP_TAX_TYPE
        AND SOURCE_REGISTER = 'PLA';
    LN_EXC_CESS_OPEN_BAL NUMBER := 0;
    LN_CVD_CESS_OPEN_BAL NUMBER := 0;
    LV_MAST_ORG_FLAG JAI_CMN_INVENTORY_ORGS.MASTER_ORG_FLAG%TYPE;
    LN_MIN_REG_ID NUMBER;
    LN_MAX_REG_ID NUMBER;
    LN_FIN_YEAR NUMBER;
    LN_REG_ID JAI_CMN_RG_PLA_TRXS.REGISTER_ID%TYPE;
    LN_EXC_SHE_CESS_OPEN_BAL NUMBER := 0;
    LN_CVD_SHE_CESS_OPEN_BAL NUMBER := 0;
  BEGIN
    OPEN CUR_FIN_YEAR(P_ORGANIZATION_ID,P_TRN_FROM_DATE);
    FETCH CUR_FIN_YEAR
     INTO LN_FIN_YEAR;
    CLOSE CUR_FIN_YEAR;
    BEGIN
      IF P_TRN_FROM_DATE IS NOT NULL THEN
        SELECT
          NVL(SUM(CR_BASIC_ED)
             ,0) - NVL(SUM(DR_BASIC_ED)
             ,0)
        INTO BASIC_BAL
        FROM
          JAI_CMN_RG_PLA_TRXS
        WHERE TRUNC(CREATION_DATE) < TRUNC(P_TRN_FROM_DATE)
          AND ORGANIZATION_ID = P_ORGANIZATION_ID
          AND LOCATION_ID = P_LOCATION_ID;
      ELSE
        BASIC_BAL := 0;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        BASIC_BAL := 0;
    END;
    BEGIN
      IF P_TRN_FROM_DATE IS NOT NULL THEN
        SELECT
          NVL(SUM(CR_ADDITIONAL_ED)
             ,0) - NVL(SUM(DR_ADDITIONAL_ED)
             ,0)
        INTO ADDITIONAL_BAL
        FROM
          JAI_CMN_RG_PLA_TRXS
        WHERE TRUNC(CREATION_DATE) < TRUNC(P_TRN_FROM_DATE)
          AND ORGANIZATION_ID = P_ORGANIZATION_ID
          AND LOCATION_ID = P_LOCATION_ID;
      ELSE
        ADDITIONAL_BAL := 0;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        ADDITIONAL_BAL := 0;
    END;
    BEGIN
      IF P_TRN_FROM_DATE IS NOT NULL THEN
        SELECT
          NVL(SUM(CR_OTHER_ED)
             ,0) - NVL(SUM(DR_OTHER_ED)
             ,0)
        INTO OTHER_BAL
        FROM
          JAI_CMN_RG_PLA_TRXS
        WHERE TRUNC(CREATION_DATE) < TRUNC(P_TRN_FROM_DATE)
          AND ORGANIZATION_ID = P_ORGANIZATION_ID
          AND LOCATION_ID = P_LOCATION_ID;
      ELSE
        OTHER_BAL := 0;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        OTHER_BAL := 0;
    END;
    BEGIN
      IF P_TRN_FROM_DATE IS NOT NULL THEN
        LN_MIN_REG_ID := 0;
        LN_MAX_REG_ID := 0;
        LN_REG_ID := NULL;
        OPEN CUR_REG_ID('EXCISE_EDUCATION_CESS',LN_FIN_YEAR);
        FETCH CUR_REG_ID
         INTO LN_REG_ID;
        IF CUR_REG_ID%NOTFOUND THEN
          CLOSE CUR_REG_ID;
          OPEN CUR_REG_ID('EXCISE_EDUCATION_CESS',LN_FIN_YEAR - 1);
          FETCH CUR_REG_ID
           INTO LN_REG_ID;
          CLOSE CUR_REG_ID;
        ELSE
          CLOSE CUR_REG_ID;
        END IF;
        OPEN CUR_OPEN_BAL(LN_REG_ID,'EXCISE_EDUCATION_CESS');
        FETCH CUR_OPEN_BAL
         INTO LN_EXC_CESS_OPEN_BAL;
        CLOSE CUR_OPEN_BAL;
        LN_REG_ID := NULL;
        OPEN CUR_REG_ID('EXCISE_SH_EDU_CESS',LN_FIN_YEAR);
        FETCH CUR_REG_ID
         INTO LN_REG_ID;
        IF CUR_REG_ID%NOTFOUND THEN
          CLOSE CUR_REG_ID;
          OPEN CUR_REG_ID('EXCISE_SH_EDU_CESS',LN_FIN_YEAR - 1);
          FETCH CUR_REG_ID
           INTO LN_REG_ID;
          CLOSE CUR_REG_ID;
        ELSE
          CLOSE CUR_REG_ID;
        END IF;
        OPEN CUR_OPEN_BAL(LN_REG_ID,'EXCISE_SH_EDU_CESS');
        FETCH CUR_OPEN_BAL
         INTO LN_EXC_SHE_CESS_OPEN_BAL;
        CLOSE CUR_OPEN_BAL;
      END IF;
    END;
    BEGIN
      IF P_TRN_FROM_DATE IS NOT NULL THEN
        LN_REG_ID := NULL;
        OPEN CUR_REG_ID('CVD_EDUCATION_CESS',LN_FIN_YEAR);
        FETCH CUR_REG_ID
         INTO LN_REG_ID;
        IF CUR_REG_ID%NOTFOUND THEN
          CLOSE CUR_REG_ID;
          OPEN CUR_REG_ID('CVD_EDUCATION_CESS',LN_FIN_YEAR - 1);
          FETCH CUR_REG_ID
           INTO LN_REG_ID;
          CLOSE CUR_REG_ID;
        ELSE
          CLOSE CUR_REG_ID;
        END IF;
        OPEN CUR_OPEN_BAL(LN_REG_ID,'CVD_EDUCATION_CESS');
        FETCH CUR_OPEN_BAL
         INTO LN_CVD_CESS_OPEN_BAL;
        CLOSE CUR_OPEN_BAL;
        LN_REG_ID := 0;
        OPEN CUR_REG_ID('CVD_SH_EDU_CESS',LN_FIN_YEAR);
        FETCH CUR_REG_ID
         INTO LN_REG_ID;
        IF CUR_REG_ID%NOTFOUND THEN
          CLOSE CUR_REG_ID;
          OPEN CUR_REG_ID('CVD_SH_EDU_CESS',LN_FIN_YEAR - 1);
          FETCH CUR_REG_ID
           INTO LN_REG_ID;
          CLOSE CUR_REG_ID;
        ELSE
          CLOSE CUR_REG_ID;
        END IF;
        OPEN CUR_OPEN_BAL(LN_REG_ID,'CVD_SH_EDU_CESS');
        FETCH CUR_OPEN_BAL
         INTO LN_CVD_SHE_CESS_OPEN_BAL;
        CLOSE CUR_OPEN_BAL;
      END IF;
    END;
    CP_CR_OPEN_BAL := (ROUND(BASIC_BAL
                           ,2));
    CP_ADDITIONAL_OPEN_BAL := ROUND(ADDITIONAL_BAL
                                   ,2);
    CP_OTHER_OPEN_BAL := ROUND(OTHER_BAL
                              ,2);
    CP_CESS_OPEN_BAL_CVD := ROUND(LN_CVD_CESS_OPEN_BAL + LN_CVD_SHE_CESS_OPEN_BAL
                                 ,2);
    CP_CESS_OPEN_BAL := ROUND(LN_EXC_CESS_OPEN_BAL + LN_EXC_SHE_CESS_OPEN_BAL
                             ,2);
  END OPENING_BALANCE;

  FUNCTION CP_RND_BASIC_ED_P RETURN NUMBER IS
  BEGIN
    RETURN CP_RND_BASIC_ED;
  END CP_RND_BASIC_ED_P;

  FUNCTION CP_RND_ADDL_ED_P RETURN NUMBER IS
  BEGIN
    RETURN CP_RND_ADDL_ED;
  END CP_RND_ADDL_ED_P;

  FUNCTION CP_RND_OTHER_ED_P RETURN NUMBER IS
  BEGIN
    RETURN CP_RND_OTHER_ED;
  END CP_RND_OTHER_ED_P;

  FUNCTION CP_RND_EDU_CESS_P RETURN NUMBER IS
  BEGIN
    RETURN CP_RND_EDU_CESS;
  END CP_RND_EDU_CESS_P;

  FUNCTION CP_RND_CVD_CESS_P RETURN NUMBER IS
  BEGIN
    RETURN CP_RND_CVD_CESS;
  END CP_RND_CVD_CESS_P;

  FUNCTION CP_RND_SHE_EDU_CESS_P RETURN NUMBER IS
  BEGIN
    RETURN CP_RND_SHE_EDU_CESS;
  END CP_RND_SHE_EDU_CESS_P;

  FUNCTION CP_RND_SHE_CVD_CESS_P RETURN NUMBER IS
  BEGIN
    RETURN CP_RND_SHE_CVD_CESS;
  END CP_RND_SHE_CVD_CESS_P;

  FUNCTION CP_BED_OPEN_BAL_P RETURN NUMBER IS
  BEGIN
    RETURN CP_BED_OPEN_BAL;
  END CP_BED_OPEN_BAL_P;

  FUNCTION CP_AED_OPEN_BAL_P RETURN NUMBER IS
  BEGIN
    RETURN CP_AED_OPEN_BAL;
  END CP_AED_OPEN_BAL_P;

  FUNCTION CP_SED_OPEN_BAL_P RETURN NUMBER IS
  BEGIN
    RETURN CP_SED_OPEN_BAL;
  END CP_SED_OPEN_BAL_P;

  FUNCTION CP_PAGE_NO_P RETURN NUMBER IS
  BEGIN
    RETURN CP_PAGE_NO;
  END CP_PAGE_NO_P;

  FUNCTION CP_EXCISE_CESS_OPEN_BAL_P RETURN NUMBER IS
  BEGIN
    RETURN CP_EXCISE_CESS_OPEN_BAL;
  END CP_EXCISE_CESS_OPEN_BAL_P;

  FUNCTION CP_CVD_CESS_OPEN_BAL_P RETURN NUMBER IS
  BEGIN
    RETURN CP_CVD_CESS_OPEN_BAL;
  END CP_CVD_CESS_OPEN_BAL_P;

  FUNCTION CP_CR_OPEN_BAL_P RETURN NUMBER IS
  BEGIN
    RETURN CP_CR_OPEN_BAL;
  END CP_CR_OPEN_BAL_P;

  FUNCTION CP_ADDITIONAL_OPEN_BAL_P RETURN NUMBER IS
  BEGIN
    RETURN CP_ADDITIONAL_OPEN_BAL;
  END CP_ADDITIONAL_OPEN_BAL_P;

  FUNCTION CP_OTHER_OPEN_BAL_P RETURN NUMBER IS
  BEGIN
    RETURN CP_OTHER_OPEN_BAL;
  END CP_OTHER_OPEN_BAL_P;

  FUNCTION CP_CESS_OPEN_BAL_P RETURN NUMBER IS
  BEGIN
    RETURN CP_CESS_OPEN_BAL;
  END CP_CESS_OPEN_BAL_P;

  FUNCTION CP_CESS_OPEN_BAL_CVD_P RETURN NUMBER IS
  BEGIN
    RETURN CP_CESS_OPEN_BAL_CVD;
  END CP_CESS_OPEN_BAL_CVD_P;

END JA_JAINPLA_XMLP_PKG;




/
