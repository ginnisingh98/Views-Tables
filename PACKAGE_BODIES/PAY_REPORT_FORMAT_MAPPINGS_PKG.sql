--------------------------------------------------------
--  DDL for Package Body PAY_REPORT_FORMAT_MAPPINGS_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PAY_REPORT_FORMAT_MAPPINGS_PKG" as
/* $Header: pyrfm01t.pkb 115.0 2004/04/06 04:15:05 mkataria noship $ */
procedure INSERT_ROW (
X_ROWID in out nocopy VARCHAR2,
X_REPORT_FORMAT_MAPPING_ID in NUMBER,
X_TEMPORARY_ACTION_FLAG in VARCHAR2,
X_BUSINESS_GROUP_ID in NUMBER,
X_LEGISLATION_CODE in VARCHAR2,
X_REPORT_TYPE in VARCHAR2,
X_REPORT_QUALIFIER in VARCHAR2,
X_REPORT_FORMAT in VARCHAR2,
X_EFFECTIVE_START_DATE in DATE,
X_EFFECTIVE_END_DATE in DATE,
X_RANGE_CODE in VARCHAR2,
X_ASSIGNMENT_ACTION_CODE in VARCHAR2,
X_INITIALIZATION_CODE in VARCHAR2,
X_ARCHIVE_CODE in VARCHAR2,
X_MAGNETIC_CODE in VARCHAR2,
X_REPORT_CATEGORY in VARCHAR2,
X_REPORT_NAME in VARCHAR2,
X_SORT_CODE in VARCHAR2,
X_UPDATABLE_FLAG in VARCHAR2,
X_DEINITIALIZATION_CODE in VARCHAR2,
X_DISPLAY_NAME in VARCHAR2 ) is
cursor C is select ROWID from PAY_REPORT_FORMAT_MAPPINGS_F
where REPORT_FORMAT_MAPPING_ID = X_REPORT_FORMAT_MAPPING_ID
;
begin insert into PAY_REPORT_FORMAT_MAPPINGS_F (
TEMPORARY_ACTION_FLAG,
REPORT_FORMAT_MAPPING_ID,
BUSINESS_GROUP_ID,
LEGISLATION_CODE,
REPORT_TYPE,
REPORT_QUALIFIER,
REPORT_FORMAT,
EFFECTIVE_START_DATE,
EFFECTIVE_END_DATE,
RANGE_CODE,
ASSIGNMENT_ACTION_CODE,
INITIALIZATION_CODE,
ARCHIVE_CODE,
MAGNETIC_CODE,
REPORT_CATEGORY,
REPORT_NAME,
SORT_CODE,
UPDATABLE_FLAG,
DEINITIALIZATION_CODE
) values (
X_TEMPORARY_ACTION_FLAG,
X_REPORT_FORMAT_MAPPING_ID,
X_BUSINESS_GROUP_ID,
X_LEGISLATION_CODE,
X_REPORT_TYPE,
X_REPORT_QUALIFIER,
X_REPORT_FORMAT,
X_EFFECTIVE_START_DATE,
X_EFFECTIVE_END_DATE,
X_RANGE_CODE,
X_ASSIGNMENT_ACTION_CODE,
X_INITIALIZATION_CODE,
X_ARCHIVE_CODE,
X_MAGNETIC_CODE,
X_REPORT_CATEGORY,
X_REPORT_NAME,
X_SORT_CODE,
X_UPDATABLE_FLAG,
X_DEINITIALIZATION_CODE
);

insert into PAY_REPORT_FORMAT_MAPPINGS_TL (
REPORT_FORMAT_MAPPING_ID,
DISPLAY_NAME,
LANGUAGE,
SOURCE_LANG
) select
X_REPORT_FORMAT_MAPPING_ID,
X_DISPLAY_NAME,
L.LANGUAGE_CODE,
userenv('LANG')
from FND_LANGUAGES L
where L.INSTALLED_FLAG in ('I', 'B')
and not exists
(select NULL from PAY_REPORT_FORMAT_MAPPINGS_TL T
where T.REPORT_FORMAT_MAPPING_ID = X_REPORT_FORMAT_MAPPING_ID
and T.LANGUAGE = L.LANGUAGE_CODE);

open c;
fetch c into X_ROWID;
if (c%notfound) then
close c;
raise no_data_found;
end if;
close c;

end INSERT_ROW;

procedure LOCK_ROW (
X_REPORT_FORMAT_MAPPING_ID in NUMBER,
X_TEMPORARY_ACTION_FLAG in VARCHAR2,
X_BUSINESS_GROUP_ID in NUMBER,
X_LEGISLATION_CODE in VARCHAR2,
X_REPORT_TYPE in VARCHAR2,
X_REPORT_QUALIFIER in VARCHAR2,
X_REPORT_FORMAT in VARCHAR2,
X_EFFECTIVE_START_DATE in DATE,
X_EFFECTIVE_END_DATE in DATE,
X_RANGE_CODE in VARCHAR2,
X_ASSIGNMENT_ACTION_CODE in VARCHAR2,
X_INITIALIZATION_CODE in VARCHAR2,
X_ARCHIVE_CODE in VARCHAR2,
X_MAGNETIC_CODE in VARCHAR2,
X_REPORT_CATEGORY in VARCHAR2,
X_REPORT_NAME in VARCHAR2,
X_SORT_CODE in VARCHAR2,
X_UPDATABLE_FLAG in VARCHAR2,
X_DEINITIALIZATION_CODE in VARCHAR2,
X_DISPLAY_NAME in VARCHAR2
) is
cursor c is select
TEMPORARY_ACTION_FLAG,
BUSINESS_GROUP_ID,
LEGISLATION_CODE,
REPORT_TYPE,
REPORT_QUALIFIER,
REPORT_FORMAT,
EFFECTIVE_START_DATE,
EFFECTIVE_END_DATE,
RANGE_CODE,
ASSIGNMENT_ACTION_CODE,
INITIALIZATION_CODE,
ARCHIVE_CODE,
MAGNETIC_CODE,
REPORT_CATEGORY,
REPORT_NAME,
SORT_CODE,
UPDATABLE_FLAG,
DEINITIALIZATION_CODE
from PAY_REPORT_FORMAT_MAPPINGS_F
where REPORT_FORMAT_MAPPING_ID = X_REPORT_FORMAT_MAPPING_ID
for update of REPORT_FORMAT_MAPPING_ID nowait; recinfo c%rowtype;

cursor c1 is select DISPLAY_NAME, decode(LANGUAGE, userenv('LANG'), 'Y', 'N') BASELANG
from PAY_REPORT_FORMAT_MAPPINGS_TL
where REPORT_FORMAT_MAPPING_ID = X_REPORT_FORMAT_MAPPING_ID and userenv('LANG') in (LANGUAGE, SOURCE_LANG)
for update of REPORT_FORMAT_MAPPING_ID nowait;
begin
open c;
fetch c into recinfo;
if (c%notfound) then close c;
fnd_message.set_name('FND', 'FORM_RECORD_DELETED');
app_exception.raise_exception;
end if;
close c;
if ( ((recinfo.TEMPORARY_ACTION_FLAG = X_TEMPORARY_ACTION_FLAG)
   OR ((recinfo.TEMPORARY_ACTION_FLAG is null) AND (X_TEMPORARY_ACTION_FLAG is null)))
AND ((recinfo.BUSINESS_GROUP_ID = X_BUSINESS_GROUP_ID)
   OR ((recinfo.BUSINESS_GROUP_ID is null) AND (X_BUSINESS_GROUP_ID is null)))
AND ((recinfo.LEGISLATION_CODE = X_LEGISLATION_CODE)
   OR ((recinfo.LEGISLATION_CODE is null) AND (X_LEGISLATION_CODE is null)))
AND (recinfo.REPORT_TYPE = X_REPORT_TYPE)
AND (recinfo.REPORT_QUALIFIER = X_REPORT_QUALIFIER)
AND (recinfo.REPORT_FORMAT = X_REPORT_FORMAT)
AND (recinfo.EFFECTIVE_START_DATE = X_EFFECTIVE_START_DATE)
AND (recinfo.EFFECTIVE_END_DATE = X_EFFECTIVE_END_DATE)
AND ((recinfo.RANGE_CODE = X_RANGE_CODE)
   OR ((recinfo.RANGE_CODE is null) AND (X_RANGE_CODE is null)))
AND ((recinfo.ASSIGNMENT_ACTION_CODE = X_ASSIGNMENT_ACTION_CODE)
   OR ((recinfo.ASSIGNMENT_ACTION_CODE is null) AND (X_ASSIGNMENT_ACTION_CODE is null)))
AND ((recinfo.INITIALIZATION_CODE = X_INITIALIZATION_CODE)
   OR ((recinfo.INITIALIZATION_CODE is null) AND (X_INITIALIZATION_CODE is null)))
AND ((recinfo.ARCHIVE_CODE = X_ARCHIVE_CODE)
   OR ((recinfo.ARCHIVE_CODE is null) AND (X_ARCHIVE_CODE is null)))
AND ((recinfo.MAGNETIC_CODE = X_MAGNETIC_CODE)
   OR ((recinfo.MAGNETIC_CODE is null) AND (X_MAGNETIC_CODE is null)))
AND (recinfo.REPORT_CATEGORY = X_REPORT_CATEGORY)
AND ((recinfo.REPORT_NAME = X_REPORT_NAME)
   OR ((recinfo.REPORT_NAME is null) AND (X_REPORT_NAME is null)))
AND ((recinfo.SORT_CODE = X_SORT_CODE)
   OR ((recinfo.SORT_CODE is null) AND (X_SORT_CODE is null)))
AND ((recinfo.UPDATABLE_FLAG = X_UPDATABLE_FLAG)
   OR ((recinfo.UPDATABLE_FLAG is null) AND (X_UPDATABLE_FLAG is null)))
AND ((recinfo.DEINITIALIZATION_CODE = X_DEINITIALIZATION_CODE)
   OR ((recinfo.DEINITIALIZATION_CODE is null) AND (X_DEINITIALIZATION_CODE is null)))
) then
null;
else fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
app_exception.raise_exception;
end if;

for tlinfo in c1 loop
if (tlinfo.BASELANG = 'Y') then
    if ( (tlinfo.DISPLAY_NAME = X_DISPLAY_NAME))
    then
    null;
    else fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
    app_exception.raise_exception;
    end if;
end if;
end loop;
return;
end LOCK_ROW;

procedure UPDATE_ROW (
X_REPORT_FORMAT_MAPPING_ID in NUMBER,
X_TEMPORARY_ACTION_FLAG in VARCHAR2,
X_BUSINESS_GROUP_ID in NUMBER,
X_LEGISLATION_CODE in VARCHAR2,
X_REPORT_TYPE in VARCHAR2,
X_REPORT_QUALIFIER in VARCHAR2,
X_REPORT_FORMAT in VARCHAR2,
X_EFFECTIVE_START_DATE in DATE,
X_EFFECTIVE_END_DATE in DATE,
X_RANGE_CODE in VARCHAR2,
X_ASSIGNMENT_ACTION_CODE in VARCHAR2,
X_INITIALIZATION_CODE in VARCHAR2,
X_ARCHIVE_CODE in VARCHAR2,
X_MAGNETIC_CODE in VARCHAR2,
X_REPORT_CATEGORY in VARCHAR2,
X_REPORT_NAME in VARCHAR2,
X_SORT_CODE in VARCHAR2,
X_UPDATABLE_FLAG in VARCHAR2,
X_DEINITIALIZATION_CODE in VARCHAR2,
X_DISPLAY_NAME in VARCHAR2
) is
begin
update PAY_REPORT_FORMAT_MAPPINGS_F set
TEMPORARY_ACTION_FLAG = X_TEMPORARY_ACTION_FLAG,
BUSINESS_GROUP_ID = X_BUSINESS_GROUP_ID,
LEGISLATION_CODE = X_LEGISLATION_CODE,
REPORT_TYPE = X_REPORT_TYPE,
REPORT_QUALIFIER = X_REPORT_QUALIFIER,
REPORT_FORMAT = X_REPORT_FORMAT,
EFFECTIVE_START_DATE = X_EFFECTIVE_START_DATE,
EFFECTIVE_END_DATE = X_EFFECTIVE_END_DATE,
RANGE_CODE = X_RANGE_CODE,
ASSIGNMENT_ACTION_CODE = X_ASSIGNMENT_ACTION_CODE,
INITIALIZATION_CODE = X_INITIALIZATION_CODE,
ARCHIVE_CODE = X_ARCHIVE_CODE,
MAGNETIC_CODE = X_MAGNETIC_CODE,
REPORT_CATEGORY = X_REPORT_CATEGORY,
REPORT_NAME = X_REPORT_NAME,
SORT_CODE = X_SORT_CODE,
UPDATABLE_FLAG = X_UPDATABLE_FLAG,
DEINITIALIZATION_CODE = X_DEINITIALIZATION_CODE
where REPORT_FORMAT_MAPPING_ID = X_REPORT_FORMAT_MAPPING_ID;

if (sql%notfound) then
raise no_data_found;
end if;

update PAY_REPORT_FORMAT_MAPPINGS_TL set
DISPLAY_NAME = X_DISPLAY_NAME,
SOURCE_LANG = userenv('LANG')
where REPORT_FORMAT_MAPPING_ID = X_REPORT_FORMAT_MAPPING_ID
and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

if (sql%notfound) then
raise no_data_found;
end if;
end UPDATE_ROW;

procedure DELETE_ROW (
X_REPORT_FORMAT_MAPPING_ID in NUMBER
) is
begin
delete from PAY_REPORT_FORMAT_MAPPINGS_TL
where REPORT_FORMAT_MAPPING_ID = X_REPORT_FORMAT_MAPPING_ID;

if (sql%notfound) then
raise no_data_found;
end if;

delete from PAY_REPORT_FORMAT_MAPPINGS_F
where REPORT_FORMAT_MAPPING_ID = X_REPORT_FORMAT_MAPPING_ID;

if (sql%notfound) then
raise no_data_found;
end if;
end DELETE_ROW;

procedure ADD_LANGUAGE
is
begin
delete from PAY_REPORT_FORMAT_MAPPINGS_TL T
where not exists
   (select NULL from PAY_REPORT_FORMAT_MAPPINGS_F B
    where B.REPORT_FORMAT_MAPPING_ID = T.REPORT_FORMAT_MAPPING_ID );

update PAY_REPORT_FORMAT_MAPPINGS_TL T set (
DISPLAY_NAME
) = (select B.DISPLAY_NAME from PAY_REPORT_FORMAT_MAPPINGS_TL B
     where B.REPORT_FORMAT_MAPPING_ID = T.REPORT_FORMAT_MAPPING_ID
     and B.LANGUAGE = T.SOURCE_LANG)
where (
T.REPORT_FORMAT_MAPPING_ID,
T.LANGUAGE
) in (select
SUBT.REPORT_FORMAT_MAPPING_ID, SUBT.LANGUAGE
from PAY_REPORT_FORMAT_MAPPINGS_TL SUBB, PAY_REPORT_FORMAT_MAPPINGS_TL SUBT
where SUBB.REPORT_FORMAT_MAPPING_ID = SUBT.REPORT_FORMAT_MAPPING_ID
and SUBB.LANGUAGE = SUBT.SOURCE_LANG
and (SUBB.DISPLAY_NAME <> SUBT.DISPLAY_NAME ));

insert into PAY_REPORT_FORMAT_MAPPINGS_TL (
REPORT_FORMAT_MAPPING_ID,
DISPLAY_NAME,
LANGUAGE,
SOURCE_LANG
) select /*+ ORDERED */
B.REPORT_FORMAT_MAPPING_ID,
B.DISPLAY_NAME,
L.LANGUAGE_CODE, B.SOURCE_LANG from PAY_REPORT_FORMAT_MAPPINGS_TL B, FND_LANGUAGES L
where L.INSTALLED_FLAG in ('I', 'B')
and B.LANGUAGE = userenv('LANG')
and not exists
    (select NULL from PAY_REPORT_FORMAT_MAPPINGS_TL T
     where T.REPORT_FORMAT_MAPPING_ID = B.REPORT_FORMAT_MAPPING_ID
     and T.LANGUAGE = L.LANGUAGE_CODE);
end ADD_LANGUAGE;

end PAY_REPORT_FORMAT_MAPPINGS_PKG;

/
