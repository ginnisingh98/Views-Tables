--------------------------------------------------------
--  DDL for Package Body MSC_CL_BOM_ODS_LOAD
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."MSC_CL_BOM_ODS_LOAD" AS -- specification
/* $Header: MSCLBOMB.pls 120.3.12010000.4 2009/09/08 14:04:48 arusubra ship $ */


   v_sub_str                     VARCHAR2(4000):=NULL;
   c_count                       NUMBER:= 0;
  -- v_warning_flag                NUMBER:= MSC_UTIL.SYS_NO;  --2 be changed



--   PROCEDURE LOAD_RESOURCE_SETUP;
--   PROCEDURE LOAD_SETUP_TRANSITION;
--   PROCEDURE LOAD_RESOURCE_CHARGES;
--   PROCEDURE LOAD_RES_INST_CHANGE;
--   PROCEDURE LOAD_COMPONENT_SUBSTITUTE;
--   PROCEDURE LOAD_BOR;
--   PROCEDURE LOAD_PROCESS_EFFECTIVITY ;
--   PROCEDURE LOAD_BOM_COMPONENTS;
--   PROCEDURE LOAD_BOM;
--   PROCEDURE LOAD_RESOURCE;

PROCEDURE LOAD_RESOURCE_SETUP
IS
  CURSOR res_setups IS
  SELECT
     mrs.ORGANIZATION_ID,
     --mrs.DEPARTMENT_ID,
     mrs.RESOURCE_ID,
     mrs.SR_INSTANCE_ID,
     mrs.setup_id,
     mrs.setup_code,
     mrs.setup_Description,
     mrs.operation_desc,
     mrs.version
 FROM MSC_ST_RESOURCE_SETUPS mrs
 WHERE mrs.SR_INSTANCE_ID= MSC_CL_COLLECTION.v_instance_id
 ORDER BY mrs.DELETED_FLAG;
 lv_cnt          NUMBER;
 lv_pbs          NUMBER;

c_count NUMBER := 0;
total_count    NUMBER := 0;
BEGIN

IF ((MSC_CL_COLLECTION.v_is_complete_refresh) OR (MSC_CL_COLLECTION.v_is_partial_refresh) OR (MSC_CL_COLLECTION.v_is_legacy_refresh)) THEN
   IF MSC_CL_COLLECTION.v_coll_prec.org_group_flag = MSC_UTIL.G_ALL_ORGANIZATIONS THEN
       MSC_CL_COLLECTION.DELETE_MSC_TABLE( 'MSC_RESOURCE_SETUPS', MSC_CL_COLLECTION.v_instance_id, -1);
   ELSE
    v_sub_str :=' AND ORGANIZATION_ID '||MSC_UTIL.v_in_org_str;
    MSC_CL_COLLECTION.DELETE_MSC_TABLE('MSC_RESOURCE_SETUPS', MSC_CL_COLLECTION.v_instance_id, -1,v_sub_str);
  END IF;


  c_count := 0;

  FOR c_rec IN res_setups LOOP
    BEGIN
       INSERT INTO MSC_RESOURCE_SETUPS
	( PLAN_ID,
  	RESOURCE_ID,
 	ORGANIZATION_ID  ,
 	--DEPARTMENT_ID  ,
        SR_INSTANCE_ID,
 	SETUP_ID,
	SETUP_CODE,
	SETUP_DESCRIPTION,
	OPERATION_DESC,
	VERSION,
  	REFRESH_NUMBER,
  	LAST_UPDATE_DATE,
  	LAST_UPDATED_BY,
  	CREATION_DATE,
  	CREATED_BY)
      VALUES
	( -1,
  	c_rec.RESOURCE_ID,
  	c_rec.ORGANIZATION_ID  ,
  	--c_rec.DEPARTMENT_ID  ,
  	c_rec.SR_INSTANCE_ID  ,
  	c_rec. SETUP_ID,
  	c_rec.SETUP_CODE,
  	c_rec.SETUP_DESCRIPTION,
  	c_rec.OPERATION_DESC,
	  c_rec.VERSION,
  	MSC_CL_COLLECTION.v_last_collection_id,
  	MSC_CL_COLLECTION.v_current_date,
  	MSC_CL_COLLECTION.v_current_user,
  	MSC_CL_COLLECTION.v_current_date,
  	MSC_CL_COLLECTION.v_current_user );

       c_count:= c_count+1;
       total_count:= total_count+1;

    IF c_count> MSC_CL_COLLECTION.PBS THEN
       COMMIT;
       c_count:= 0;
    END IF;

  EXCEPTION

   WHEN OTHERS THEN

    IF SQLCODE IN (-01683,-01653,-01650,-01562) THEN

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '========================================');
      FND_MESSAGE.SET_NAME('MSC', 'MSC_OL_DATA_ERR_HEADER');
      FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_RESOURCE_SETUP');
      FND_MESSAGE.SET_TOKEN('TABLE', 'MSC_RESOURCE_SETUPS');
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, SQLERRM);
      RAISE;

    ELSE
      MSC_CL_COLLECTION.v_warning_flag := MSC_UTIL.SYS_YES;

       MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '========================================');
      FND_MESSAGE.SET_NAME('MSC', 'MSC_OL_DATA_ERR_HEADER');
      FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_RESOURCE_SETUP');
      FND_MESSAGE.SET_TOKEN('TABLE', 'MSC_RESOURCE_SETUPS');
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'ORGANIZATION_CODE');
      FND_MESSAGE.SET_TOKEN('VALUE',
                            MSC_GET_NAME.ORG_CODE( c_rec.ORGANIZATION_ID,
                                                   MSC_CL_COLLECTION.v_instance_id));
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'RESOURCE_ID');
      FND_MESSAGE.SET_TOKEN('VALUE', c_rec.RESOURCE_ID);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'SETUP_CODE');
      FND_MESSAGE.SET_TOKEN('VALUE', c_rec.SETUP_CODE);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, SQLERRM);
     END IF;

   END;

  END LOOP;
    MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, 'Total resource setups = '||  to_char(total_count));

  COMMIT;
 END IF;  /* MSC_CL_COLLECTION.v_is_complete_refresh OR v_is_partial_refresh */
END LOAD_RESOURCE_SETUP;

PROCEDURE LOAD_SETUP_TRANSITION
IS
  CURSOR res_transitions IS
  SELECT
     mrs.ORGANIZATION_ID,
     mrs.RESOURCE_ID,
     mrs.SR_INSTANCE_ID,
     mrs.from_setup_id,
     mrs.to_setup_id,
     mrs.standard_operation_id,
     mrs.transition_time,
     mrs.transition_uom,
     mrs.transition_penalty
 FROM MSC_ST_SETUP_TRANSITIONS mrs
 WHERE mrs.SR_INSTANCE_ID= MSC_CL_COLLECTION.v_instance_id;

 lv_cnt          NUMBER;
 lv_pbs          NUMBER;
 c_count 	 NUMBER := 0;
 total_count 	 NUMBER := 0;
BEGIN

IF ((MSC_CL_COLLECTION.v_is_complete_refresh) OR (MSC_CL_COLLECTION.v_is_partial_refresh)  OR (MSC_CL_COLLECTION.v_is_legacy_refresh)) THEN
   IF MSC_CL_COLLECTION.v_coll_prec.org_group_flag = MSC_UTIL.G_ALL_ORGANIZATIONS THEN
       MSC_CL_COLLECTION.DELETE_MSC_TABLE( 'MSC_SETUP_TRANSITIONS', MSC_CL_COLLECTION.v_instance_id, -1);
   ELSE
    v_sub_str :=' AND ORGANIZATION_ID '||MSC_UTIL.v_in_org_str;
    MSC_CL_COLLECTION.DELETE_MSC_TABLE('MSC_SETUP_TRANSITIONS', MSC_CL_COLLECTION.v_instance_id, -1,v_sub_str);
  END IF;


 c_count := 0;
 total_count := 0;
  FOR c_rec IN res_transitions LOOP
    BEGIN
       INSERT INTO MSC_SETUP_TRANSITIONS
        ( PLAN_ID,
        RESOURCE_ID,
        ORGANIZATION_ID  ,
	SR_INSTANCE_ID,
        FROM_SETUP_ID,
        TO_SETUP_ID,
        STANDARD_OPERATION_ID,
        TRANSITION_TIME,
	TRANSITION_UOM,
	TRANSITION_PENALTY,
        REFRESH_NUMBER,
        LAST_UPDATE_DATE,
        LAST_UPDATED_BY,
        CREATION_DATE,
        CREATED_BY)
      VALUES
        ( -1,
        c_rec.RESOURCE_ID,
        c_rec.ORGANIZATION_ID  ,
        c_rec.SR_INSTANCE_ID  ,
        c_rec.FROM_SETUP_ID,
        c_rec.TO_SETUP_ID,
        c_rec.STANDARD_OPERATION_ID,
        c_rec.TRANSITION_TIME,
        c_rec.TRANSITION_UOM,
        c_rec.TRANSITION_PENALTY,
        MSC_CL_COLLECTION.v_last_collection_id,
        MSC_CL_COLLECTION.v_current_date,
        MSC_CL_COLLECTION.v_current_user,
        MSC_CL_COLLECTION.v_current_date,
        MSC_CL_COLLECTION.v_current_user );

       c_count:= c_count+1;
       total_count:= total_count+1;

    IF c_count> MSC_CL_COLLECTION.PBS THEN
       COMMIT;
       c_count:= 0;
    END IF;

  EXCEPTION

   WHEN OTHERS THEN

    IF SQLCODE IN (-01683,-01653,-01650,-01562) THEN

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '========================================');
      FND_MESSAGE.SET_NAME('MSC', 'MSC_OL_DATA_ERR_HEADER');
      FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_SETUP_TRANSITION');
      FND_MESSAGE.SET_TOKEN('TABLE', 'MSC_SETUP_TRANSITIONS');
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, SQLERRM);
      RAISE;
    ELSE
      MSC_CL_COLLECTION.v_warning_flag := MSC_UTIL.SYS_YES;

       MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '========================================');
      FND_MESSAGE.SET_NAME('MSC', 'MSC_OL_DATA_ERR_HEADER');
      FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_SETUP_TRANSITION');
      FND_MESSAGE.SET_TOKEN('TABLE', 'MSC_SETUP_TRANSITIONS');
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'ORGANIZATION_CODE');
      FND_MESSAGE.SET_TOKEN('VALUE',
                            MSC_GET_NAME.ORG_CODE( c_rec.ORGANIZATION_ID,
                                                   MSC_CL_COLLECTION.v_instance_id));
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'RESOURCE_ID');
      FND_MESSAGE.SET_TOKEN('VALUE', c_rec.RESOURCE_ID);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'FROM_SETUP_ID');
      FND_MESSAGE.SET_TOKEN('VALUE', c_rec.FROM_SETUP_ID);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);


      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'TO_SETUP_ID');
      FND_MESSAGE.SET_TOKEN('VALUE', c_rec.TO_SETUP_ID);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, SQLERRM);
    END IF;

   END;

  END LOOP;
    MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, 'Total resource transition = '||  to_char(total_count));

  COMMIT;

 END IF; /* MSC_CL_COLLECTION.v_is_complete_refresh) OR (v_is_partial_refresh */

END LOAD_SETUP_TRANSITION;

PROCEDURE LOAD_RESOURCE_CHARGES
 IS
   TYPE CurTyp IS REF CURSOR; -- define weak REF CURSOR type
   c4              CurTyp;

   c_count         NUMBER:=0;
   total_count     NUMBER:=0;
   lv_tbl          VARCHAR2(30);
   lv_res_req_tbl  VARCHAR2(30);
   lv_sql_stmt     VARCHAR2(5000);
   lv_cursor_stmt  VARCHAR2(5000);

  lv_TRANSACTION_ID		NUMBER;
  lv_SR_INSTANCE_ID		NUMBER;
  lv_CHARGE_NUMBER		NUMBER;
  lv_CHARGE_QUANTITY		NUMBER;
  LV_DEPARTMENT_ID		NUMBER;
  lv_CHARGE_START_DATETIME	DATE;
  lv_CHARGE_END_DATETIME	DATE;


BEGIN
  IF MSC_CL_COLLECTION.v_exchange_mode=MSC_UTIL.SYS_YES THEN
     lv_res_req_tbl := 'RESOURCE_REQUIREMENTS_'||MSC_CL_COLLECTION.v_instance_code;
  ELSE
     lv_res_req_tbl := 'MSC_RESOURCE_REQUIREMENTS';
  END IF;

  lv_tbl := 'MSC_RESOURCE_CHARGES';

   lv_cursor_stmt:=
'SELECT'
||'    mrr.TRANSACTION_ID,'
||'    mrc.SR_INSTANCE_ID,'
||'    mrc.CHARGE_NUMBER,'
||'    mrc.CHARGE_QUANTITY,'
||'    mrc.CHARGE_START_DATETIME,'
||'    mrc.CHARGE_END_DATETIME,'
||'    mrc.DEPARTMENT_ID'
||' FROM '||lv_res_req_tbl||' mrr,'
||'      MSC_ST_RESOURCE_CHARGES mrc'
||' WHERE mrr.SR_INSTANCE_ID = '||MSC_CL_COLLECTION.v_instance_id
||'  AND mrr.PLAN_ID	     = -1'
||'  AND mrr.SR_INSTANCE_ID  = mrc.SR_INSTANCE_ID'
||'  AND mrr.WIP_ENTITY_ID   = mrc.WIP_ENTITY_ID'
||'  AND mrr.ORGANIZATION_ID = mrc.ORGANIZATION_ID'
||'  AND mrr.RESOURCE_ID     = mrc.RESOURCE_ID'
||'  AND mrr.OPERATION_SEQ_NUM = mrc.OPERATION_SEQ_NUM'
||'  AND mrr.RESOURCE_SEQ_NUM = mrc.RESOURCE_SEQ_NUM';
/*||'  AND mrr.ROUTING_SEQUENCE_ID = mrc.ROUTING_SEQUENCE_ID';*/

-- ========= Prepare SQL Statement for INSERT ==========
lv_sql_stmt:=
'insert into '||lv_tbl
||'  ( PLAN_ID,'
||'    RES_TRANSACTION_ID,'
||'    SR_INSTANCE_ID,'
||'    CHARGE_NUMBER,'
||'    CHARGE_QUANTITY,'
||'    CHARGE_START_DATETIME,'
||'    CHARGE_END_DATETIME,'
||'    LAST_UPDATE_DATE,'
||'    LAST_UPDATED_BY,'
||'    CREATION_DATE,'
||'    CREATED_BY)'
||'VALUES'
||'(   -1,'
||'    :TRANSACTION_ID,'
||'    :SR_INSTANCE_ID,'
||'    :CHARGE_NUMBER,'
||'    :CHARGE_QUANTITY,'
||'    :CHARGE_START_DATETIME,'
||'    :CHARGE_END_DATETIME,'
||'    :v_current_date,'
||'    :v_current_user,'
||'    :v_current_date,'
||'    :v_current_user)';

OPEN c4 FOR lv_cursor_stmt;

LOOP
  FETCH c4 INTO
  	lv_TRANSACTION_ID,
  	lv_SR_INSTANCE_ID,
  	lv_CHARGE_NUMBER ,
	lv_CHARGE_QUANTITY,
  	lv_CHARGE_START_DATETIME,
  	lv_CHARGE_END_DATETIME  ,
  	lv_DEPARTMENT_ID;

  EXIT WHEN c4%NOTFOUND;

 BEGIN
  IF (MSC_CL_COLLECTION.v_is_complete_refresh OR MSC_CL_COLLECTION.v_is_partial_refresh) Then
	EXECUTE IMMEDIATE lv_sql_stmt
	USING
	lv_TRANSACTION_ID,
	lv_SR_INSTANCE_ID,
	lv_CHARGE_NUMBER,
	lv_CHARGE_QUANTITY,
	lv_CHARGE_START_DATETIME,
	lv_CHARGE_END_DATETIME,
	MSC_CL_COLLECTION.v_current_date,
    	MSC_CL_COLLECTION.v_current_user,
    	MSC_CL_COLLECTION.v_current_date,
    	MSC_CL_COLLECTION.v_current_user;
  END IF;

  c_count:= c_count+1;
  total_count:= total_count+1;
  IF c_count> MSC_CL_COLLECTION.PBS THEN
     IF (MSC_CL_COLLECTION.v_is_complete_refresh OR MSC_CL_COLLECTION.v_is_partial_refresh) THEN
	COMMIT;
     END IF;
     c_count:= 0;
  END IF;

  EXCEPTION
   WHEN OTHERS THEN
   IF SQLCODE IN (-01683,-01653,-01650,-01562) THEN

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '========================================');
      FND_MESSAGE.SET_NAME('MSC', 'MSC_OL_DATA_ERR_HEADER');
      FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_RESOURCE_CHARGES');
      FND_MESSAGE.SET_TOKEN('TABLE', 'MSC_RESOURCE_CHARGES');
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, SQLERRM);
      RAISE;

    ELSE

      MSC_CL_COLLECTION.v_warning_flag := MSC_UTIL.SYS_YES;

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '========================================');
      FND_MESSAGE.SET_NAME('MSC', 'MSC_OL_DATA_ERR_HEADER');
      FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_RESOURCE_CHARGES');
      FND_MESSAGE.SET_TOKEN('TABLE', 'MSC_RESOURCE_CHARGES');
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'RES_TRANSACTION_ID');
      FND_MESSAGE.SET_TOKEN('VALUE', lv_TRANSACTION_ID);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'CHARGE_NUMBER');
      FND_MESSAGE.SET_TOKEN('VALUE', lv_CHARGE_NUMBER);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, SQLERRM);
    END IF;

  END;
 END LOOP;
MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, 'Total resource charges  = '||  total_count);
 IF (MSC_CL_COLLECTION.v_is_complete_refresh OR MSC_CL_COLLECTION.v_is_partial_refresh) THEN
    COMMIT;
 END IF;
EXCEPTION
   WHEN OTHERS THEN
      IF c4%ISOPEN THEN CLOSE c4; END IF;

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '<<LOAD_RES_REQ>>');
      IF lv_cursor_stmt IS NOT NULL THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '<<CURSOR>>'||lv_cursor_stmt);
      END IF;
      IF lv_sql_stmt IS NOT NULL THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '<<SQL>>'||lv_sql_stmt);
      END IF;
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS,  SQLERRM);
      RAISE;
END LOAD_RESOURCE_CHARGES;

PROCEDURE LOAD_RES_INST_CHANGE IS

 CURSOR res_inst_chngs IS
 SELECT
   msric.DEPARTMENT_ID,
   msric.RESOURCE_ID,
   msric.RES_INSTANCE_ID,
   --msric.EQUIPMENT_ITEM_ID,
   msric.SERIAL_NUMBER,
   msric.SHIFT_NUM,
   msric.FROM_DATE,
   msric.TO_DATE,
   msric.FROM_TIME,
   msric.TO_TIME,
   msric.CAPACITY_CHANGE,
   msric.SIMULATION_SET,
   msric.ACTION_TYPE,
   msric.DELETED_FLAG,
   msric.SR_INSTANCE_ID
 FROM MSC_ST_RES_INSTANCE_CHANGES msric
 WHERE msric.SR_INSTANCE_ID= MSC_CL_COLLECTION.v_instance_id
 ORDER BY
      msric.DELETED_FLAG;

   c_count NUMBER:= 0;
   total_count NUMBER:= 0;
   lv_sql_stmt  varchar2(500);
   lv_dblink  varchar2(50);
   lv_dest_a2m      varchar2(128);
   lv_instance_code  varchar2(10);

Begin

IF ((MSC_CL_COLLECTION.v_is_partial_refresh AND MSC_CL_COLLECTION.v_coll_prec.calendar_flag = MSC_UTIL.SYS_YES) OR
    MSC_CL_COLLECTION.v_is_complete_refresh OR MSC_CL_COLLECTION.v_is_incremental_refresh) then

    IF (MSC_CL_COLLECTION.v_is_complete_refresh OR MSC_CL_COLLECTION.v_is_partial_refresh) THEN

	MSC_CL_COLLECTION.DELETE_MSC_TABLE( 'MSC_RES_INSTANCE_CHANGES', MSC_CL_COLLECTION.v_instance_id, NULL);


    END IF;

    c_count:= 0;
    total_count:= 0;

    FOR c_rec IN res_inst_chngs LOOP

      BEGIN

       IF MSC_CL_COLLECTION.v_is_incremental_refresh AND c_rec.DELETED_FLAG= MSC_UTIL.SYS_YES THEN

            DELETE MSC_RES_INSTANCE_CHANGES
       	    WHERE DEPARTMENT_ID   = c_rec.DEPARTMENT_ID
         	AND RESOURCE_ID       = c_rec.RESOURCE_ID
         	AND RES_INSTANCE_ID   = c_rec.RES_INSTANCE_ID
         	AND SERIAL_NUMBER     = c_rec.SERIAL_NUMBER
         	--AND EQUIPMENT_ITEM_ID = c_rec.EQUIPMENT_ITEM_ID
       	        AND SHIFT_NUM= c_rec.SHIFT_NUM
         	AND FROM_DATE= c_rec.FROM_DATE
         	AND NVL(TO_DATE,MSC_UTIL.NULL_DATE)= NVL(c_rec.TO_DATE,MSC_UTIL.NULL_DATE)
       	        AND NVL(FROM_TIME,MSC_UTIL.NULL_VALUE)= NVL(c_rec.FROM_TIME,MSC_UTIL.NULL_VALUE)
         	AND NVL(TO_TIME,MSC_UTIL.NULL_VALUE)= NVL(c_rec.TO_TIME,MSC_UTIL.NULL_VALUE)
         	AND SIMULATION_SET= c_rec.SIMULATION_SET
         	AND ACTION_TYPE= c_rec.ACTION_TYPE
         	AND SR_INSTANCE_ID= c_rec.SR_INSTANCE_ID;

       ELSE
	  INSERT INTO MSC_RES_INSTANCE_CHANGES
	   ( DEPARTMENT_ID,
  	     RESOURCE_ID,
	     RES_INSTANCE_ID,
	     SERIAL_NUMBER,
	    -- EQUIPMENT_ITEM_ID,
  	     SHIFT_NUM,
  	     FROM_DATE,
  	     TO_DATE,
  	     FROM_TIME,
  	     TO_TIME,
  	     CAPACITY_CHANGE,
  	     SIMULATION_SET,
  	     ACTION_TYPE,
  	     SR_INSTANCE_ID,
  	     REFRESH_NUMBER,
    	     LAST_UPDATE_DATE,
  	     LAST_UPDATED_BY,
  	     CREATION_DATE,
  	     CREATED_BY)
	VALUES
	   ( c_rec.DEPARTMENT_ID,
            c_rec.RESOURCE_ID,
            c_rec.RES_INSTANCE_ID,
            c_rec.SERIAL_NUMBER,
            --c_rec.EQUIPMENT_ITEM_ID,
            c_rec.SHIFT_NUM,
            c_rec.FROM_DATE,
            c_rec.TO_DATE,
            c_rec.FROM_TIME,
            c_rec.TO_TIME,
            c_rec.CAPACITY_CHANGE,
            c_rec.SIMULATION_SET,
            c_rec.ACTION_TYPE,
            c_rec.SR_INSTANCE_ID,
            MSC_CL_COLLECTION.v_last_collection_id,
            MSC_CL_COLLECTION.v_current_date,
            MSC_CL_COLLECTION.v_current_user,
            MSC_CL_COLLECTION.v_current_date,
            MSC_CL_COLLECTION.v_current_user );
END IF;

  c_count:= c_count+1;
  total_count:= total_count+1;

  IF c_count> MSC_CL_COLLECTION.PBS THEN
     COMMIT;
     c_count:= 0;
  END IF;

EXCEPTION

   WHEN OTHERS THEN

    IF SQLCODE IN (-01683,-01653,-01650,-01562) THEN
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '========================================');
      FND_MESSAGE.SET_NAME('MSC', 'MSC_OL_DATA_ERR_HEADER');
      FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_RES_INST_CHANGE');
      FND_MESSAGE.SET_TOKEN('TABLE', 'MSC_RES_INSTANCE_CHANGES');
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, SQLERRM);
      RAISE;

    ELSE
      MSC_CL_COLLECTION.v_warning_flag := MSC_UTIL.SYS_YES;

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '========================================');
      FND_MESSAGE.SET_NAME('MSC', 'MSC_OL_DATA_ERR_HEADER');
      FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_RES_INST_CHANGE');
      FND_MESSAGE.SET_TOKEN('TABLE', 'MSC_RES_INSTANCE_CHANGES');
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'DEPARTMENT_ID');
      FND_MESSAGE.SET_TOKEN('VALUE', TO_CHAR(c_rec.DEPARTMENT_ID));
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'RESOURCE_ID');
      FND_MESSAGE.SET_TOKEN('VALUE', TO_CHAR(c_rec.RESOURCE_ID));
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);


      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'RES_INSTANCE_ID');
      FND_MESSAGE.SET_TOKEN('VALUE', TO_CHAR(c_rec.RES_INSTANCE_ID));
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'SERIAL_NUMBER');
      FND_MESSAGE.SET_TOKEN('VALUE', c_rec.SERIAL_NUMBER);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'SHIFT_NUM');
      FND_MESSAGE.SET_TOKEN('VALUE', TO_CHAR(c_rec.SHIFT_NUM));
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'ACTION_TYPE');
      FND_MESSAGE.SET_TOKEN('VALUE', TO_CHAR(c_rec.ACTION_TYPE));
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'SIMULATION_SET');
      FND_MESSAGE.SET_TOKEN('VALUE', c_rec.SIMULATION_SET);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, SQLERRM);
    END IF;

   END;

  END LOOP;
 MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, 'Total res instance changes = '||  total_count);

COMMIT;

END IF;


END; /* LOAD_RES_INST_CHANGE */

--=============================================

   PROCEDURE LOAD_COMPONENT_SUBSTITUTE IS


   CURSOR c3 IS
SELECT
  mscs.Bill_Sequence_ID,
  mscs.USAGE_QUANTITY,
  mscs.PRIORITY,
  mscs.ROUNDING_DIRECTION,
  mscs.ORGANIZATION_ID,
  t1.INVENTORY_ITEM_ID SUBSTITUTE_ITEM_ID,   -- mscs.SUBSTITUTE_ITEM_ID,
  mscs.COMPONENT_SEQUENCE_ID,
  mscs.SR_INSTANCE_ID
FROM MSC_ITEM_ID_LID t1,
     MSC_ST_COMPONENT_SUBSTITUTES  mscs
WHERE t1.SR_INVENTORY_ITEM_ID= mscs.substitute_item_id
  AND t1.sr_instance_id= mscs.sr_instance_id
  AND mscs.SR_INSTANCE_ID= MSC_CL_COLLECTION.v_instance_id
  AND mscs.DELETED_FLAG= MSC_UTIL.SYS_NO;

CURSOR c1_d IS
SELECT
  mscs.BILL_SEQUENCE_ID,
  mscs.COMPONENT_SEQUENCE_ID,
  t1.INVENTORY_ITEM_ID SUBSTITUTE_ITEM_ID,   -- mscs.SUBSTITUTE_ITEM_ID,
  mscs.SR_INSTANCE_ID
FROM MSC_ITEM_ID_LID t1,
     MSC_ST_COMPONENT_SUBSTITUTES mscs
WHERE ((t1.SR_INVENTORY_ITEM_ID= mscs.substitute_item_id) AND (mscs.substitute_item_id
is NOT NULL))
  AND t1.sr_instance_id= mscs.sr_instance_id
  AND mscs.SR_INSTANCE_ID= MSC_CL_COLLECTION.v_instance_id
  AND mscs.DELETED_FLAG= MSC_UTIL.SYS_YES
UNION ALL
SELECT
  mscs.BILL_SEQUENCE_ID,
  mscs.COMPONENT_SEQUENCE_ID,
  TO_NUMBER(NULL) SUBSTITUTE_ITEM_ID,
  mscs.SR_INSTANCE_ID
FROM MSC_ST_COMPONENT_SUBSTITUTES mscs
WHERE mscs.substitute_item_id IS NULL
AND mscs.SR_INSTANCE_ID= MSC_CL_COLLECTION.v_instance_id
  AND mscs.DELETED_FLAG= MSC_UTIL.SYS_YES;


c_count NUMBER:= 0;
   lv_tbl      VARCHAR2(30);
   lv_sql_stmt VARCHAR2(5000);

BEGIN

IF (MSC_CL_COLLECTION.v_is_complete_refresh OR MSC_CL_COLLECTION.v_is_partial_refresh) THEN
         -- We want to delete all BOM related data and get new stuff.

--MSC_CL_COLLECTION.DELETE_MSC_TABLE( 'MSC_COMPONENT_SUBSTITUTES', MSC_CL_COLLECTION.v_instance_id, -1);

  IF MSC_CL_COLLECTION.v_coll_prec.org_group_flag = MSC_UTIL.G_ALL_ORGANIZATIONS THEN
    MSC_CL_COLLECTION.DELETE_MSC_TABLE( 'MSC_COMPONENT_SUBSTITUTES', MSC_CL_COLLECTION.v_instance_id, -1);
  ELSE
    v_sub_str :=' AND ORGANIZATION_ID '||MSC_UTIL.v_in_org_str;
    MSC_CL_COLLECTION.DELETE_MSC_TABLE( 'MSC_COMPONENT_SUBSTITUTES', MSC_CL_COLLECTION.v_instance_id, -1,v_sub_str);
  END IF;

END IF;   -- MSC_CL_COLLECTION.v_is_complete_refresh

c_count:= 0;

IF MSC_CL_COLLECTION.v_is_incremental_refresh THEN

FOR c_rec IN c1_d LOOP

IF c_rec.BILL_SEQUENCE_ID IS NOT NULL AND c_rec.COMPONENT_SEQUENCE_ID IS NULL AND c_rec.SUBSTITUTE_ITEM_ID IS NULL THEN

UPDATE MSC_COMPONENT_SUBSTITUTES
   SET USAGE_QUANTITY= 0,
       REFRESH_NUMBER= MSC_CL_COLLECTION.v_last_collection_id,
       LAST_UPDATE_DATE= MSC_CL_COLLECTION.v_current_date,
       LAST_UPDATED_BY= MSC_CL_COLLECTION.v_current_user
 WHERE PLAN_ID= -1
   AND BILL_SEQUENCE_ID= c_rec.BILL_SEQUENCE_ID
   AND SR_INSTANCE_ID= c_rec.SR_INSTANCE_ID;

ELSIF c_rec.COMPONENT_SEQUENCE_ID IS NOT NULL AND c_rec.BILL_SEQUENCE_ID IS NULL AND c_rec.SUBSTITUTE_ITEM_ID IS NULL THEN

UPDATE MSC_COMPONENT_SUBSTITUTES
   SET USAGE_QUANTITY= 0,
       REFRESH_NUMBER= MSC_CL_COLLECTION.v_last_collection_id,
       LAST_UPDATE_DATE= MSC_CL_COLLECTION.v_current_date,
       LAST_UPDATED_BY= MSC_CL_COLLECTION.v_current_user
 WHERE PLAN_ID= -1
 AND COMPONENT_SEQUENCE_ID= c_rec.COMPONENT_SEQUENCE_ID
 AND SR_INSTANCE_ID= c_rec.SR_INSTANCE_ID;

ELSIF c_rec.COMPONENT_SEQUENCE_ID IS NOT NULL AND c_rec.SUBSTITUTE_ITEM_ID IS NOT NULL
AND c_rec.BILL_SEQUENCE_ID IS NULL THEN

UPDATE MSC_COMPONENT_SUBSTITUTES
   SET USAGE_QUANTITY= 0,
       REFRESH_NUMBER= MSC_CL_COLLECTION.v_last_collection_id,
       LAST_UPDATE_DATE= MSC_CL_COLLECTION.v_current_date,
       LAST_UPDATED_BY= MSC_CL_COLLECTION.v_current_user
 WHERE PLAN_ID= -1
 AND COMPONENT_SEQUENCE_ID= c_rec.COMPONENT_SEQUENCE_ID
 AND SUBSTITUTE_ITEM_ID= c_rec.SUBSTITUTE_ITEM_ID
 AND SR_INSTANCE_ID= c_rec.SR_INSTANCE_ID;

END IF; /* c_rec combinations */

END LOOP; /* c1_d */

END IF; /* MSC_CL_COLLECTION.v_is_incremental_refresh */

COMMIT;

c_count:= 0;

FOR c_rec IN c3 LOOP

BEGIN

IF MSC_CL_COLLECTION.v_is_incremental_refresh THEN

UPDATE MSC_COMPONENT_SUBSTITUTES
SET
 USAGE_QUANTITY= c_rec.USAGE_QUANTITY,
 PRIORITY= c_rec.PRIORITY,
 ROUNDING_DIRECTION= c_rec.ROUNDING_DIRECTION,
 REFRESH_NUMBER= MSC_CL_COLLECTION.v_last_collection_id,
 LAST_UPDATE_DATE= MSC_CL_COLLECTION.v_current_date,
 LAST_UPDATED_BY= MSC_CL_COLLECTION.v_current_user
WHERE PLAN_ID= -1
  AND BILL_SEQUENCE_ID= c_rec.Bill_Sequence_ID
  AND COMPONENT_SEQUENCE_ID= c_rec.COMPONENT_SEQUENCE_ID
  AND ORGANIZATION_ID= c_rec.ORGANIZATION_ID
  AND SUBSTITUTE_ITEM_ID= c_rec.SUBSTITUTE_ITEM_ID
  AND SR_INSTANCE_ID= c_rec.SR_INSTANCE_ID;

END IF;


IF (MSC_CL_COLLECTION.v_is_complete_refresh OR MSC_CL_COLLECTION.v_is_partial_refresh) OR SQL%NOTFOUND THEN

INSERT INTO MSC_COMPONENT_SUBSTITUTES
( PLAN_ID,
  BILL_SEQUENCE_ID,
  USAGE_QUANTITY,
  PRIORITY,
  ROUNDING_DIRECTION,
  ORGANIZATION_ID,
  SUBSTITUTE_ITEM_ID,
  COMPONENT_SEQUENCE_ID,
  SR_INSTANCE_ID,
  REFRESH_NUMBER,
  LAST_UPDATE_DATE,
  LAST_UPDATED_BY,
  CREATION_DATE,
  CREATED_BY)
VALUES
( -1,
  c_rec.Bill_Sequence_ID,
  c_rec.USAGE_QUANTITY,
  c_rec.PRIORITY,
  c_rec.ROUNDING_DIRECTION,
  c_rec.ORGANIZATION_ID,
  c_rec.SUBSTITUTE_ITEM_ID,
  c_rec.COMPONENT_SEQUENCE_ID,
  c_rec.SR_INSTANCE_ID,
  MSC_CL_COLLECTION.v_last_collection_id,
  MSC_CL_COLLECTION.v_current_date,
  MSC_CL_COLLECTION.v_current_user,
  MSC_CL_COLLECTION.v_current_date,
  MSC_CL_COLLECTION.v_current_user );

END IF;

  c_count:= c_count+1;

  IF c_count> MSC_CL_COLLECTION.PBS THEN
     COMMIT;
     c_count:= 0;
  END IF;

EXCEPTION

   WHEN OTHERS THEN

      MSC_CL_COLLECTION.v_warning_flag := MSC_UTIL.SYS_YES;

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '========================================');
      FND_MESSAGE.SET_NAME('MSC', 'MSC_OL_DATA_ERR_HEADER');
      FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_COMPONENT_SUBSTITUTE');
      FND_MESSAGE.SET_TOKEN('TABLE', 'MSC_COMPONENT_SUBSTITUTES');
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'BILL_SEQUENCE_ID');
      FND_MESSAGE.SET_TOKEN('VALUE', TO_CHAR( c_rec.BILL_SEQUENCE_ID));
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'COMPONENT_SEQUENCE_ID');
      FND_MESSAGE.SET_TOKEN('VALUE', TO_CHAR( c_rec.COMPONENT_SEQUENCE_ID));
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'SUBSTITUTE_ITEM_NAME');
      FND_MESSAGE.SET_TOKEN('VALUE', MSC_CL_ITEM_ODS_LOAD.ITEM_NAME( c_rec.SUBSTITUTE_ITEM_ID));
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'ORGANIZATION_CODE');
      FND_MESSAGE.SET_TOKEN('VALUE',
                            MSC_GET_NAME.ORG_CODE( c_rec.ORGANIZATION_ID,
                                                   MSC_CL_COLLECTION.v_instance_id));
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, SQLERRM);

END;

END LOOP;

COMMIT;

   END LOAD_COMPONENT_SUBSTITUTE;

   PROCEDURE LOAD_BOR IS

   CURSOR c1 IS
SELECT
  msb.BILL_OF_RESOURCES,
  msb.ORGANIZATION_ID,
  msb.DESCRIPTION,
  msb.DISABLE_DATE,
  msb.ROLLUP_START_DATE,
  msb.ROLLUP_COMPLETION_DATE,
  msb.SR_INSTANCE_ID
FROM MSC_ST_BILL_OF_RESOURCES msb
WHERE msb.SR_INSTANCE_ID= MSC_CL_COLLECTION.v_instance_id;

   CURSOR c2 IS
SELECT
  msbr.BILL_OF_RESOURCES,
  msbr.RESOURCE_DEPARTMENT_HOURS,
  msbr.OPERATION_SEQUENCE_ID,
  msbr.OPERATION_SEQ_NUM,
  msbr.RESOURCE_SEQ_NUM,
  msbr.SETBACK_DAYS,
  msbr.ASSEMBLY_USAGE,
  msbr.ORIGINATION_TYPE,
  msbr.RESOURCE_UNITS,
  msbr.BASIS,
  msbr.RESOURCE_ID,
  msbr.DEPARTMENT_ID,
  msbr.ORGANIZATION_ID,
  msbr.SR_TRANSACTION_ID,
  t1.INVENTORY_ITEM_ID ASSEMBLY_ITEM_ID,
  t2.INVENTORY_ITEM_ID SOURCE_ITEM_ID,
  msbr.SR_INSTANCE_ID
FROM MSC_ITEM_ID_LID t1,
     MSC_ITEM_ID_LID t2,
     MSC_ST_BOR_REQUIREMENTS msbr
WHERE t1.SR_INVENTORY_ITEM_ID=        msbr.assembly_item_id
  AND t1.sr_instance_id= msbr.sr_instance_id
  AND t2.SR_INVENTORY_ITEM_ID=        msbr.source_item_id
  AND t2.sr_instance_id= msbr.sr_instance_id
  AND msbr.SR_INSTANCE_ID= MSC_CL_COLLECTION.v_instance_id;

   c_count NUMBER:= 0;

   BEGIN

IF (MSC_CL_COLLECTION.v_is_complete_refresh OR MSC_CL_COLLECTION.v_is_partial_refresh) THEN

--MSC_CL_COLLECTION.DELETE_MSC_TABLE( 'MSC_BILL_OF_RESOURCES', MSC_CL_COLLECTION.v_instance_id, -1);
--MSC_CL_COLLECTION.DELETE_MSC_TABLE( 'MSC_BOR_REQUIREMENTS', MSC_CL_COLLECTION.v_instance_id, -1);

  IF MSC_CL_COLLECTION.v_coll_prec.org_group_flag = MSC_UTIL.G_ALL_ORGANIZATIONS THEN
    MSC_CL_COLLECTION.DELETE_MSC_TABLE( 'MSC_BILL_OF_RESOURCES', MSC_CL_COLLECTION.v_instance_id, -1);
    MSC_CL_COLLECTION.DELETE_MSC_TABLE( 'MSC_BOR_REQUIREMENTS', MSC_CL_COLLECTION.v_instance_id, -1);
  ELSE
    v_sub_str :=' AND ORGANIZATION_ID '||MSC_UTIL.v_in_org_str;
    MSC_CL_COLLECTION.DELETE_MSC_TABLE( 'MSC_BILL_OF_RESOURCES', MSC_CL_COLLECTION.v_instance_id, -1,v_sub_str);
    MSC_CL_COLLECTION.DELETE_MSC_TABLE( 'MSC_BOR_REQUIREMENTS', MSC_CL_COLLECTION.v_instance_id, -1,v_sub_str);
  END IF;

END IF; -- MSC_CL_COLLECTION.v_is_complete_refresh

c_count:= 0;

FOR c_rec IN c1 LOOP

BEGIN

IF MSC_CL_COLLECTION.v_is_incremental_refresh THEN

UPDATE MSC_BILL_OF_RESOURCES
SET
 DESCRIPTION= c_rec.DESCRIPTION,
 DISABLE_DATE= c_rec.DISABLE_DATE,
 ROLLUP_START_DATE= c_rec.ROLLUP_START_DATE,
 ROLLUP_COMPLETION_DATE= c_rec.ROLLUP_COMPLETION_DATE,
 REFRESH_NUMBER= MSC_CL_COLLECTION.v_last_collection_id,
 LAST_UPDATE_DATE= MSC_CL_COLLECTION.v_current_date,
 LAST_UPDATED_BY= MSC_CL_COLLECTION.v_current_user
WHERE PLAN_ID= -1
  AND BILL_OF_RESOURCES= c_rec.BILL_OF_RESOURCES
  AND ORGANIZATION_ID= c_rec.ORGANIZATION_ID
  AND SR_INSTANCE_ID= c_rec.SR_INSTANCE_ID;

END IF;


IF (MSC_CL_COLLECTION.v_is_complete_refresh OR MSC_CL_COLLECTION.v_is_partial_refresh) OR SQL%NOTFOUND THEN

INSERT INTO MSC_BILL_OF_RESOURCES
( PLAN_ID,
  BILL_OF_RESOURCES,
  ORGANIZATION_ID,
  DESCRIPTION,
  DISABLE_DATE,
  ROLLUP_START_DATE,
  ROLLUP_COMPLETION_DATE,
  SR_INSTANCE_ID,
  REFRESH_NUMBER,
  LAST_UPDATE_DATE,
  LAST_UPDATED_BY,
  CREATION_DATE,
  CREATED_BY)
VALUES
( -1,
  c_rec.BILL_OF_RESOURCES,
  c_rec.ORGANIZATION_ID,
  c_rec.DESCRIPTION,
  c_rec.DISABLE_DATE,
  c_rec.ROLLUP_START_DATE,
  c_rec.ROLLUP_COMPLETION_DATE,
  c_rec.SR_INSTANCE_ID,
  MSC_CL_COLLECTION.v_last_collection_id,
  MSC_CL_COLLECTION.v_current_date,
  MSC_CL_COLLECTION.v_current_user,
  MSC_CL_COLLECTION.v_current_date,
  MSC_CL_COLLECTION.v_current_user );

END IF;

  c_count:= c_count+1;

  IF c_count> MSC_CL_COLLECTION.PBS THEN
     COMMIT;
     c_count:= 0;
  END IF;

EXCEPTION
   WHEN OTHERS THEN

    IF SQLCODE IN (-01683,-01653,-01650,-01562) THEN

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '========================================');
      FND_MESSAGE.SET_NAME('MSC', 'MSC_OL_DATA_ERR_HEADER');
      FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_BOR');
      FND_MESSAGE.SET_TOKEN('TABLE', 'MSC_BILL_OF_RESOURCES');
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, SQLERRM);
      RAISE;

    ELSE
      MSC_CL_COLLECTION.v_warning_flag := MSC_UTIL.SYS_YES;

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '========================================');
      FND_MESSAGE.SET_NAME('MSC', 'MSC_OL_DATA_ERR_HEADER');
      FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_BOR');
      FND_MESSAGE.SET_TOKEN('TABLE', 'MSC_BILL_OF_RESOURCES');
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'ORGANIZATION_CODE');
      FND_MESSAGE.SET_TOKEN('VALUE',
                            MSC_GET_NAME.ORG_CODE( c_rec.ORGANIZATION_ID,
                                                   MSC_CL_COLLECTION.v_instance_id));
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'BILL_OF_RESOURCES');
      FND_MESSAGE.SET_TOKEN('VALUE', c_rec.BILL_OF_RESOURCES);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, SQLERRM);

    END IF;
END;

END LOOP;

COMMIT;

c_count:= 0;

FOR c_rec IN c2 LOOP

BEGIN

IF MSC_CL_COLLECTION.v_is_incremental_refresh THEN

UPDATE MSC_BOR_REQUIREMENTS
SET
 BILL_OF_RESOURCES= c_rec.BILL_OF_RESOURCES,
 RESOURCE_DEPARTMENT_HOURS= c_rec.RESOURCE_DEPARTMENT_HOURS,
 OPERATION_SEQUENCE_ID= c_rec.OPERATION_SEQUENCE_ID,
 OPERATION_SEQ_NUM= c_rec.OPERATION_SEQ_NUM,
 RESOURCE_SEQ_NUM= c_rec.RESOURCE_SEQ_NUM,
 SETBACK_DAYS= c_rec.SETBACK_DAYS,
 ASSEMBLY_USAGE= c_rec.ASSEMBLY_USAGE,
 ORIGINATION_TYPE= c_rec.ORIGINATION_TYPE,
 RESOURCE_UNITS= c_rec.RESOURCE_UNITS,
 BASIS= c_rec.BASIS,
 RESOURCE_ID= c_rec.RESOURCE_ID,
 DEPARTMENT_ID= c_rec.DEPARTMENT_ID,
 ORGANIZATION_ID= c_rec.ORGANIZATION_ID,
 ASSEMBLY_ITEM_ID= c_rec.ASSEMBLY_ITEM_ID,
 SOURCE_ITEM_ID= c_rec.SOURCE_ITEM_ID,
 REFRESH_NUMBER= MSC_CL_COLLECTION.v_last_collection_id,
 LAST_UPDATE_DATE= MSC_CL_COLLECTION.v_current_date,
 LAST_UPDATED_BY= MSC_CL_COLLECTION.v_current_user
WHERE PLAN_ID= -1
  AND SR_TRANSACTION_ID= c_rec.SR_TRANSACTION_ID
  AND SR_INSTANCE_ID= c_rec.SR_INSTANCE_ID;

END IF;


IF (MSC_CL_COLLECTION.v_is_complete_refresh OR MSC_CL_COLLECTION.v_is_partial_refresh) OR SQL%NOTFOUND THEN

INSERT INTO MSC_BOR_REQUIREMENTS
( PLAN_ID,
  TRANSACTION_ID,
  SR_TRANSACTION_ID,
  BILL_OF_RESOURCES,
  RESOURCE_DEPARTMENT_HOURS,
  OPERATION_SEQUENCE_ID,
  OPERATION_SEQ_NUM,
  RESOURCE_SEQ_NUM,
  SETBACK_DAYS,
  ASSEMBLY_USAGE,
  ORIGINATION_TYPE,
  RESOURCE_UNITS,
  BASIS,
  RESOURCE_ID,
  DEPARTMENT_ID,
  ORGANIZATION_ID,
  ASSEMBLY_ITEM_ID,
  SOURCE_ITEM_ID,
  SR_INSTANCE_ID,
  REFRESH_NUMBER,
  LAST_UPDATE_DATE,
  LAST_UPDATED_BY,
  CREATION_DATE,
  CREATED_BY)
VALUES
( -1,
  MSC_BOR_REQUIREMENTS_S.NEXTVAL,
  c_rec.SR_TRANSACTION_ID,
  c_rec.BILL_OF_RESOURCES,
  c_rec.RESOURCE_DEPARTMENT_HOURS,
  c_rec.OPERATION_SEQUENCE_ID,
  c_rec.OPERATION_SEQ_NUM,
  c_rec.RESOURCE_SEQ_NUM,
  c_rec.SETBACK_DAYS,
  c_rec.ASSEMBLY_USAGE,
  c_rec.ORIGINATION_TYPE,
  c_rec.RESOURCE_UNITS,
  c_rec.BASIS,
  c_rec.RESOURCE_ID,
  c_rec.DEPARTMENT_ID,
  c_rec.ORGANIZATION_ID,
  c_rec.ASSEMBLY_ITEM_ID,
  c_rec.SOURCE_ITEM_ID,
  c_rec.SR_INSTANCE_ID,
  MSC_CL_COLLECTION.v_last_collection_id,
  MSC_CL_COLLECTION.v_current_date,
  MSC_CL_COLLECTION.v_current_user,
  MSC_CL_COLLECTION.v_current_date,
  MSC_CL_COLLECTION.v_current_user );

END IF;

  c_count:= c_count+1;

  IF c_count> MSC_CL_COLLECTION.PBS THEN
     COMMIT;
     c_count:= 0;
  END IF;

EXCEPTION

   WHEN OTHERS THEN

    IF SQLCODE IN (-01683,-01653,-01650,-01562) THEN

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '========================================');
      FND_MESSAGE.SET_NAME('MSC', 'MSC_OL_DATA_ERR_HEADER');
      FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_BOR');
      FND_MESSAGE.SET_TOKEN('TABLE', 'MSC_BOR_REQUIREMENTS');
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, SQLERRM);
      RAISE;

    ELSE
      MSC_CL_COLLECTION.v_warning_flag := MSC_UTIL.SYS_YES;

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '========================================');
      FND_MESSAGE.SET_NAME('MSC', 'MSC_OL_DATA_ERR_HEADER');
      FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_BOR');
      FND_MESSAGE.SET_TOKEN('TABLE', 'MSC_BOR_REQUIREMENTS');
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'SR_TRANSACTION_ID');
      FND_MESSAGE.SET_TOKEN('VALUE', TO_CHAR( c_rec.SR_TRANSACTION_ID));
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'DEPARTMENT_ID');
      FND_MESSAGE.SET_TOKEN('VALUE', c_rec.DEPARTMENT_ID);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'RESOURCE_ID');
      FND_MESSAGE.SET_TOKEN('VALUE', c_rec.RESOURCE_ID);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, SQLERRM);

    END IF;
END;

END LOOP;

COMMIT;

   END LOAD_BOR;

   PROCEDURE LOAD_PROCESS_EFFECTIVITY IS

   CURSOR c8 IS
SELECT
  miil.INVENTORY_ITEM_ID,           -- msor.ITEM_ID,
  msor.ORGANIZATION_ID,
  msor.EFFECTIVITY_DATE,
  msor.DISABLE_DATE,
  msor.MINIMUM_QUANTITY,
  msor.MAXIMUM_QUANTITY,
  msor.PREFERENCE,
  msor.ROUTING_SEQUENCE_ID,
  msor.BILL_SEQUENCE_ID,
  msor.TOTAL_PRODUCT_CYCLE_TIME,
  msor.LINE_ID,
  msor.PRIMARY_LINE_FLAG,
  msor.PRODUCTION_LINE_RATE,
  msor.LOAD_DISTRIBUTION_PRIORITY,
  msor.ITEM_PROCESS_COST,
  msor.SR_INSTANCE_ID,
  msor.RECIPE
FROM MSC_ITEM_ID_LID miil,
     MSC_ST_PROCESS_EFFECTIVITY msor
WHERE miil.SR_INVENTORY_ITEM_ID= msor.ITEM_ID
  AND miil.SR_INSTANCE_ID= MSC_CL_COLLECTION.v_instance_id
  AND msor.SR_INSTANCE_ID= MSC_CL_COLLECTION.v_instance_id
  AND msor.DELETED_FLAG= MSC_UTIL.SYS_NO;

   CURSOR c8_d IS
SELECT
  miil.INVENTORY_ITEM_ID,           -- msor.ITEM_ID,
  msor.ORGANIZATION_ID,
  msor.ROUTING_SEQUENCE_ID,
  msor.BILL_SEQUENCE_ID,
  msor.LINE_ID,
  msor.SR_INSTANCE_ID
FROM MSC_ITEM_ID_LID miil,
     MSC_ST_PROCESS_EFFECTIVITY msor
WHERE miil.SR_INVENTORY_ITEM_ID(+)= msor.ITEM_ID
  AND miil.SR_INSTANCE_ID(+)= MSC_CL_COLLECTION.v_instance_id
  AND msor.SR_INSTANCE_ID= MSC_CL_COLLECTION.v_instance_id
  AND msor.DELETED_FLAG= MSC_UTIL.SYS_YES
UNION ALL
SELECT
  TO_NUMBER(NULL),
  TO_NUMBER(NULL),
  mpe.ROUTING_SEQUENCE_ID,
  mpe.BILL_SEQUENCE_ID,
  TO_NUMBER(NULL),
  mpe.SR_INSTANCE_ID
FROM MSC_PROCESS_EFFECTIVITY mpe,
     MSC_ST_PROCESS_EFFECTIVITY mspe
WHERE mspe.Bill_Sequence_ID= mpe.Bill_Sequence_ID
  AND mspe.Routing_Sequence_ID <> mpe.Routing_Sequence_ID
  AND mspe.SR_INSTANCE_ID= MSC_CL_COLLECTION.v_instance_id
  AND mpe.SR_INSTANCE_ID= MSC_CL_COLLECTION.v_instance_id
  AND mspe.DELETED_FLAG= MSC_UTIL.SYS_NO
  AND mpe.PLAN_ID= -1;

CURSOR c_del_leg IS
SELECT
  msr.ROUTING_SEQUENCE_ID,
  msr.BILL_SEQUENCE_ID,
  t1.INVENTORY_ITEM_ID item_id,
  msr.organization_id
FROM MSC_ST_ROUTINGS msr,
     msc_item_id_lid t1
WHERE msr.SR_INSTANCE_ID= MSC_CL_COLLECTION.v_instance_id
   AND   msr.assembly_item_id = t1.SR_INVENTORY_ITEM_ID(+)
   AND   msr.sr_instance_id = t1.sr_instance_id(+)
UNION ALL
SELECT
  TO_NUMBER(NULL),
  msb.BILL_SEQUENCE_ID,
  t1.INVENTORY_ITEM_ID item_id,
  msb.organization_id
FROM MSC_ST_BOMS msb,
     msc_item_id_lid t1
WHERE msb.SR_INSTANCE_ID= MSC_CL_COLLECTION.v_instance_id
  AND   msb.assembly_item_id  = t1.SR_INVENTORY_ITEM_ID(+)
  AND   msb.sr_instance_id = t1.sr_instance_id(+) ;

c_count NUMBER:= 0;
   lv_tbl      VARCHAR2(30);
   lv_sql_stmt VARCHAR2(5000);
   lv_sql_stmt1 VARCHAR2(5000);
   lv_val_1 NUMBER;
   lv_val_2 NUMBER;
   lv_val_3 NUMBER;

BEGIN
IF MSC_CL_COLLECTION.v_instance_type = MSC_UTIL.G_INS_OTHER THEN

  -- deleting if the record already existed.
  FOR c_rec IN c_del_leg LOOP

     DELETE MSC_PROCESS_EFFECTIVITY
       WHERE PLAN_ID= -1
        AND SR_INSTANCE_ID= MSC_CL_COLLECTION.v_instance_id
        AND (  ROUTING_SEQUENCE_ID = c_rec.ROUTING_SEQUENCE_ID
               OR BILL_SEQUENCE_ID= c_rec.BILL_SEQUENCE_ID )
               AND  ITEM_ID = c_rec.ITEM_ID
               AND  ORGANIZATION_ID = c_rec.ORGANIZATION_ID;

  END LOOP;

ELSE


IF MSC_CL_COLLECTION.v_is_incremental_refresh THEN

FOR c_rec IN c8_d LOOP
---5470477
lv_sql_stmt1 := '  DELETE MSC_PROCESS_EFFECTIVITY '
		||'     WHERE PLAN_ID= -1 '
		||'     AND SR_INSTANCE_ID= :SR_INSTANCE_ID ';

BEGIN  --- To use bind variables as far as possible

  lv_val_1 := -1;
  lv_val_2 := -1;
  lv_val_3 := -1;

  IF (c_rec.LINE_ID IS NOT NULL) THEN
    lv_sql_stmt1 := lv_sql_stmt1 || '  AND LINE_ID= :LINE_ID ';
    IF (c_rec.INVENTORY_ITEM_ID IS NOT NULL AND c_rec.ORGANIZATION_ID IS NOT NULL) THEN
      lv_val_1 := c_rec.LINE_ID;
    END IF;
  ELSIF (c_rec.ROUTING_SEQUENCE_ID IS NOT NULL) THEN
    lv_sql_stmt1 := lv_sql_stmt1 || '  AND ROUTING_SEQUENCE_ID= :ROUTING_SEQUENCE_ID';
    lv_val_1 := c_rec.ROUTING_SEQUENCE_ID;
    IF (c_rec.BILL_SEQUENCE_ID IS NOT NULL) THEN
    lv_sql_stmt1 := lv_sql_stmt1 || '  AND BILL_SEQUENCE_ID= ' || c_rec.BILL_SEQUENCE_ID;
    END IF;
  ELSIF (c_rec.BILL_SEQUENCE_ID IS NOT NULL) THEN
    lv_sql_stmt1 := lv_sql_stmt1 || '  AND BILL_SEQUENCE_ID= :BILL_SEQUENCE_ID';
    lv_val_1 := c_rec.BILL_SEQUENCE_ID;
  END IF; --c_rec.LINE_ID

  IF (c_rec.INVENTORY_ITEM_ID IS NOT NULL) THEN
    lv_sql_stmt1 := lv_sql_stmt1 || ' AND ITEM_ID= :INVENTORY_ITEM_ID ';
    lv_val_2 := c_rec.INVENTORY_ITEM_ID;
    IF (c_rec.ORGANIZATION_ID IS NOT NULL) THEN
      lv_sql_stmt1 := lv_sql_stmt1 || ' AND ORGANIZATION_ID= :ORGANIZATION_ID ';
      lv_val_3 := c_rec.ORGANIZATION_ID;
    END IF;
  ELSIF (c_rec.ORGANIZATION_ID IS NOT NULL) THEN
    lv_sql_stmt1 := lv_sql_stmt1 || ' AND ORGANIZATION_ID= :ORGANIZATION_ID ';
    lv_val_2 := c_rec.ORGANIZATION_ID;
  END IF;

  IF lv_val_1 <> -1 THEN -- one among line_id and routing_sequence_id and bil_sequence_id is not null
       IF lv_val_3 <> -1 THEN  --both inventory_item_id organization_id are not null
         EXECUTE IMMEDIATE lv_sql_stmt1 USING c_rec.SR_INSTANCE_ID, lv_val_1, lv_val_2, lv_val_3 ;
       ELSIF lv_val_2 <> -1 THEN  -- either of inventory_item_id organization_id is not null
         EXECUTE IMMEDIATE lv_sql_stmt1 USING c_rec.SR_INSTANCE_ID, lv_val_1, lv_val_2 ;
       ELSE  --both inventory_item_id organization_id are null
         EXECUTE IMMEDIATE lv_sql_stmt1 USING c_rec.SR_INSTANCE_ID, lv_val_1 ;
       END IF;
  END IF;



EXCEPTION
   WHEN OTHERS THEN
   	MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '-----------------------------');
	MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, 'SQL Executed: ' || lv_sql_stmt1 );
	MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, 'INVENTORY_ITEM_ID: ' || c_rec.INVENTORY_ITEM_ID);
	MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, 'ORGANIZATION_ID: ' || c_rec.ORGANIZATION_ID);
	MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, 'BILL_SEQUENCE_ID: ' || c_rec.BILL_SEQUENCE_ID );
	MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, 'ROUTING_SEQUENCE_ID: ' || c_rec.ROUTING_SEQUENCE_ID);
	MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, 'LINE_ID: ' || c_rec.LINE_ID);
	MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '-----------------------------');
END;
/*
    DELETE MSC_PROCESS_EFFECTIVITY
     WHERE PLAN_ID= -1
       AND SR_INSTANCE_ID= c_rec.SR_INSTANCE_ID
       AND (  ( ITEM_ID= c_rec.INVENTORY_ITEM_ID
                AND ORGANIZATION_ID= c_rec.ORGANIZATION_ID
                AND LINE_ID= c_rec.LINE_ID)
              OR ROUTING_SEQUENCE_ID= c_rec.ROUTING_SEQUENCE_ID
              OR BILL_SEQUENCE_ID= c_rec.BILL_SEQUENCE_ID );
*/
END LOOP;

END IF;

END IF; --  v_instance_type = MSC_CL_COLLECTION.G_INS_OTHER

c_count:= 0;

FOR c_rec IN c8 LOOP

BEGIN

/* bug 1244578 fix */

UPDATE MSC_PROCESS_EFFECTIVITY
SET
 MINIMUM_QUANTITY= c_rec.MINIMUM_QUANTITY,
 MAXIMUM_QUANTITY= c_rec.MAXIMUM_QUANTITY,
 PREFERENCE= c_rec.PREFERENCE,
 TOTAL_PRODUCT_CYCLE_TIME= c_rec.TOTAL_PRODUCT_CYCLE_TIME,
 PRIMARY_LINE_FLAG= c_rec.PRIMARY_LINE_FLAG,
 PRODUCTION_LINE_RATE= c_rec.PRODUCTION_LINE_RATE,
 LOAD_DISTRIBUTION_PRIORITY= c_rec.LOAD_DISTRIBUTION_PRIORITY,
 ITEM_PROCESS_COST= c_rec.ITEM_PROCESS_COST,
 EFFECTIVITY_DATE= c_rec.EFFECTIVITY_DATE,
 DISABLE_DATE= c_rec.DISABLE_DATE,
 REFRESH_NUMBER= MSC_CL_COLLECTION.v_last_collection_id,
 LAST_UPDATE_DATE= MSC_CL_COLLECTION.v_current_date,
 LAST_UPDATED_BY= MSC_CL_COLLECTION.v_current_user,
 RECIPE = c_rec.RECIPE
WHERE PLAN_ID= -1
  AND ITEM_ID= c_rec.INVENTORY_ITEM_ID
  AND ORGANIZATION_ID= c_rec.ORGANIZATION_ID
  AND SR_INSTANCE_ID= c_rec.SR_INSTANCE_ID
  AND ( ROUTING_SEQUENCE_ID = c_rec.ROUTING_SEQUENCE_ID
        OR ( ROUTING_SEQUENCE_ID IS NULL
             AND c_rec.ROUTING_SEQUENCE_ID IS NULL))
  AND ( BILL_SEQUENCE_ID = c_rec.BILL_SEQUENCE_ID
        OR ( BILL_SEQUENCE_ID IS NULL
             AND c_rec.BILL_SEQUENCE_ID IS NULL))
  AND ( LINE_ID = c_rec.LINE_ID
        OR ( LINE_ID IS NULL
             AND c_rec.LINE_ID IS NULL));

IF SQL%NOTFOUND THEN

INSERT INTO MSC_PROCESS_EFFECTIVITY
( PLAN_ID,
  PROCESS_SEQUENCE_ID,
  ITEM_ID,
  ORGANIZATION_ID,
  EFFECTIVITY_DATE,
  DISABLE_DATE,
  MINIMUM_QUANTITY,
  MAXIMUM_QUANTITY,
  PREFERENCE,
  ROUTING_SEQUENCE_ID,
  BILL_SEQUENCE_ID,
  TOTAL_PRODUCT_CYCLE_TIME,
  LINE_ID,
  PRIMARY_LINE_FLAG,
  PRODUCTION_LINE_RATE,
  LOAD_DISTRIBUTION_PRIORITY,
  ITEM_PROCESS_COST,
  RECIPE,
  SR_INSTANCE_ID,
  REFRESH_NUMBER,
  LAST_UPDATE_DATE,
  LAST_UPDATED_BY,
  CREATION_DATE,
  CREATED_BY)
VALUES
( -1,
  MSC_PROCESS_EFFECTIVITY_S.NEXTVAL,
  c_rec.INVENTORY_ITEM_ID,
  c_rec.ORGANIZATION_ID,
  c_rec.EFFECTIVITY_DATE,
  c_rec.DISABLE_DATE,
  c_rec.MINIMUM_QUANTITY,
  c_rec.MAXIMUM_QUANTITY,
  c_rec.PREFERENCE,
  c_rec.ROUTING_SEQUENCE_ID,
  c_rec.BILL_SEQUENCE_ID,
  c_rec.TOTAL_PRODUCT_CYCLE_TIME,
  c_rec.LINE_ID,
  c_rec.PRIMARY_LINE_FLAG,
  c_rec.PRODUCTION_LINE_RATE,
  c_rec.LOAD_DISTRIBUTION_PRIORITY,
  c_rec.ITEM_PROCESS_COST,
  c_rec.RECIPE,
  c_rec.SR_INSTANCE_ID,
  MSC_CL_COLLECTION.v_last_collection_id,
  MSC_CL_COLLECTION.v_current_date,
  MSC_CL_COLLECTION.v_current_user,
  MSC_CL_COLLECTION.v_current_date,
  MSC_CL_COLLECTION.v_current_user );

END IF;  -- SQL%NOTFOUND

  c_count:= c_count+1;

  IF c_count> MSC_CL_COLLECTION.PBS THEN
     COMMIT;
     c_count:= 0;
  END IF;

EXCEPTION
   WHEN OTHERS THEN

    IF SQLCODE IN (-01653,-01650,-01562,-01683) THEN

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '========================================');
      FND_MESSAGE.SET_NAME('MSC', 'MSC_OL_DATA_ERR_HEADER');
      FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_PROCESS_EFFECTIVITY');
      FND_MESSAGE.SET_TOKEN('TABLE', 'MSC_PROCESS_EFFECTIVITY');
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, SQLERRM);
      RAISE;

    ELSE
      MSC_CL_COLLECTION.v_warning_flag := MSC_UTIL.SYS_YES;

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '========================================');
      FND_MESSAGE.SET_NAME('MSC', 'MSC_OL_DATA_ERR_HEADER');
      FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_PROCESS_EFFECTIVITY');
      FND_MESSAGE.SET_TOKEN('TABLE', 'MSC_PROCESS_EFFECTIVITY');
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'ITEM_NAME');
      FND_MESSAGE.SET_TOKEN('VALUE', MSC_CL_ITEM_ODS_LOAD.ITEM_NAME( c_rec.INVENTORY_ITEM_ID));
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'ORGANIZATION_CODE');
      FND_MESSAGE.SET_TOKEN('VALUE',
                            MSC_GET_NAME.ORG_CODE( c_rec.ORGANIZATION_ID,
                                                   MSC_CL_COLLECTION.v_instance_id));
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'BILL_SEQUENCE_ID');
      FND_MESSAGE.SET_TOKEN('VALUE', TO_CHAR( c_rec.BILL_SEQUENCE_ID));
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'ROUTING_SEQUENCE_ID');
      FND_MESSAGE.SET_TOKEN('VALUE', TO_CHAR( c_rec.ROUTING_SEQUENCE_ID));
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, SQLERRM);
    END IF;
END;

END LOOP;

/* bug 1244578 fix */
/* if it's complete refresh, delete the old records after the insert/update */
IF (MSC_CL_COLLECTION.v_is_complete_refresh OR MSC_CL_COLLECTION.v_is_partial_refresh) THEN
         -- We want to delete all BOM related data and get new stuff.

    /*   DELETE MSC_PROCESS_EFFECTIVITY
       WHERE PLAN_ID= -1
       AND SR_INSTANCE_ID= MSC_CL_COLLECTION.v_instance_id
       AND REFRESH_NUMBER <> MSC_CL_COLLECTION.v_last_collection_id; */

     IF MSC_CL_COLLECTION.v_coll_prec.org_group_flag = MSC_UTIL.G_ALL_ORGANIZATIONS THEN
        v_sub_str :='AND REFRESH_NUMBER <>'||MSC_CL_COLLECTION.v_last_collection_id;
        MSC_CL_COLLECTION.DELETE_MSC_TABLE( 'MSC_PROCESS_EFFECTIVITY', MSC_CL_COLLECTION.v_instance_id, -1,v_sub_str);
     ELSE
       v_sub_str :=' AND ORGANIZATION_ID'||MSC_UTIL.v_in_org_str
                   ||' AND REFRESH_NUMBER <>'||MSC_CL_COLLECTION.v_last_collection_id;
       MSC_CL_COLLECTION.DELETE_MSC_TABLE( 'MSC_PROCESS_EFFECTIVITY', MSC_CL_COLLECTION.v_instance_id, -1,v_sub_str);
     END IF;




END IF;  -- complete refresh

COMMIT;

   END LOAD_PROCESS_EFFECTIVITY;

    PROCEDURE LOAD_BOM IS

   CURSOR c2 IS
SELECT
  msb.ASSEMBLY_TYPE,
  msb.ALTERNATE_BOM_DESIGNATOR,
  msb.SPECIFIC_ASSEMBLY_COMMENT,
  msb.PENDING_FROM_ECN,
  msb.SCALING_TYPE,
  msb.ASSEMBLY_QUANTITY,
  msb.UOM,
  msb.ORGANIZATION_ID,
  t1.INVENTORY_ITEM_ID ASSEMBLY_ITEM_ID,        -- msb.ASSEMBLY_ITEM_ID,
  msb.BILL_SEQUENCE_ID,
  msb.SR_INSTANCE_ID,
  msb.operation_seq_num  /* ds change for opm: yielding op seq num */
FROM MSC_ITEM_ID_LID t1,
     MSC_ST_BOMS msb
WHERE t1.SR_INVENTORY_ITEM_ID= msb.assembly_item_id
  AND t1.sr_instance_id= msb.sr_instance_id
  AND msb.SR_INSTANCE_ID= MSC_CL_COLLECTION.v_instance_id
  AND msb.DELETED_FLAG= MSC_UTIL.SYS_NO;

   CURSOR c2_d IS
SELECT
  msb.BILL_SEQUENCE_ID,
  msb.SR_INSTANCE_ID
FROM MSC_ST_BOMS msb
WHERE msb.SR_INSTANCE_ID= MSC_CL_COLLECTION.v_instance_id
  AND msb.DELETED_FLAG= MSC_UTIL.SYS_YES;


  lv_tbl      VARCHAR2(30);
  lv_sql_stmt VARCHAR2(5000);
  lv_sql_ins  VARCHAR2(6000);

  lb_FetchComplete  Boolean;
  lb_refresh_failed Boolean:= FALSE;
  ln_rows_to_fetch  Number := nvl(TO_NUMBER( FND_PROFILE.VALUE('MRP_PURGE_BATCH_SIZE')),75000);

  TYPE CharTblTyp IS TABLE OF VARCHAR2(30);
  TYPE CharTblTyp1 IS TABLE OF VARCHAR2(300);
  TYPE NumTblTyp  IS TABLE OF NUMBER;
  TYPE dateTblTyp IS TABLE OF DATE;
  c_count NUMBER:= 0;

  lb_ASSEMBLY_TYPE			NumTblTyp;
  lb_ALTERNATE_BOM_DESIGNATOR		CharTblTyp;
  lb_SPECIFIC_ASSEMBLY_COMMENT		CharTblTyp1;
  lb_PENDING_FROM_ECN			CharTblTyp;
  lb_SCALING_TYPE			NumTblTyp;
  lb_ASSEMBLY_QUANTITY			NumTblTyp;
  lb_UOM				CharTblTyp;
  lb_ORGANIZATION_ID			NumTblTyp;
  lb_ASSEMBLY_ITEM_ID			NumTblTyp;
  lb_BILL_SEQUENCE_ID			NumTblTyp;
  lb_SR_INSTANCE_ID			NumTblTyp;
  lb_operation_seq_num  		NumTblTyp;

  lv_errbuf			VARCHAR2(240);
  lv_retcode			NUMBER;

BEGIN

lv_sql_stmt:=
'INSERT INTO MSC_BOMS '
||'( PLAN_ID,'
||'  ASSEMBLY_TYPE,'
||'  ALTERNATE_BOM_DESIGNATOR,'
||'  SPECIFIC_ASSEMBLY_COMMENT,'
||'  PENDING_FROM_ECN,'
||'  SCALING_TYPE,'
||'  ASSEMBLY_QUANTITY,'
||'  UOM,'
||'  ORGANIZATION_ID,'
||'  ASSEMBLY_ITEM_ID,'
||'  BILL_SEQUENCE_ID,'
||'  SR_INSTANCE_ID,'
||'  yielding_op_seq_num,'
||'  REFRESH_NUMBER,'
||'  LAST_UPDATE_DATE,'
||'  LAST_UPDATED_BY,'
||'  CREATION_DATE,'
||'  CREATED_BY)'
||'VALUES'
||'( -1,'
||'  :ASSEMBLY_TYPE,'
||'  :ALTERNATE_BOM_DESIGNATOR,'
||'  :SPECIFIC_ASSEMBLY_COMMENT,'
||'  :PENDING_FROM_ECN,'
||'  :SCALING_TYPE,'
||'  :ASSEMBLY_QUANTITY,'
||'  :UOM,'
||'  :ORGANIZATION_ID,'
||'  :ASSEMBLY_ITEM_ID,'
||'  :BILL_SEQUENCE_ID,'
||'  :SR_INSTANCE_ID,'
||'  :operation_seq_num,'
||'  :v_last_collection_id,'
||'  :v_current_date,'
||'  :v_current_user,'
||'  :v_current_date,'
||'  :v_current_user )';

IF (MSC_CL_COLLECTION.v_is_complete_refresh OR MSC_CL_COLLECTION.v_is_partial_refresh) THEN

     IF MSC_CL_COLLECTION.v_coll_prec.org_group_flag = MSC_UTIL.G_ALL_ORGANIZATIONS THEN
          MSC_CL_COLLECTION.DELETE_MSC_TABLE( 'MSC_BOMS', MSC_CL_COLLECTION.v_instance_id, -1);
     ELSE
          v_sub_str :=' AND ORGANIZATION_ID '||MSC_UTIL.v_in_org_str;
          MSC_CL_COLLECTION.DELETE_MSC_TABLE( 'MSC_BOMS', MSC_CL_COLLECTION.v_instance_id, -1,v_sub_str);
     END IF;

BEGIN
lv_sql_ins :=
'INSERT INTO MSC_BOMS '
||'( PLAN_ID,'
||'  ASSEMBLY_TYPE,'
||'  ALTERNATE_BOM_DESIGNATOR,'
||'  SPECIFIC_ASSEMBLY_COMMENT,'
||'  PENDING_FROM_ECN,'
||'  SCALING_TYPE,'
||'  ASSEMBLY_QUANTITY,'
||'  UOM,'
||'  ORGANIZATION_ID,'
||'  ASSEMBLY_ITEM_ID,'
||'  BILL_SEQUENCE_ID,'
||'  SR_INSTANCE_ID,'
||'  yielding_op_seq_num,'
||'  REFRESH_NUMBER,'
||'  LAST_UPDATE_DATE,'
||'  LAST_UPDATED_BY,'
||'  CREATION_DATE,'
||'  CREATED_BY)'
||'  SELECT '
||'  -1,'
||'  msb.ASSEMBLY_TYPE,'
||'  msb.ALTERNATE_BOM_DESIGNATOR,'
||'  msb.SPECIFIC_ASSEMBLY_COMMENT,'
||'  msb.PENDING_FROM_ECN,'
||'  msb.SCALING_TYPE,'
||'  msb.ASSEMBLY_QUANTITY,'
||'  msb.UOM,'
||'  msb.ORGANIZATION_ID,'
||'  t1.INVENTORY_ITEM_ID,'
||'  msb.BILL_SEQUENCE_ID,'
||'  msb.SR_INSTANCE_ID,'
||'  msb.operation_seq_num,'
||'  :v_last_collection_id,'
||'  :v_current_date,'
||'  :v_current_user,'
||'  :v_current_date,'
||'  :v_current_user '
||' FROM MSC_ITEM_ID_LID t1,'
||'      MSC_ST_BOMS msb '
||'   WHERE t1.SR_INVENTORY_ITEM_ID= msb.assembly_item_id'
||'     AND t1.sr_instance_id= msb.sr_instance_id'
||'     AND msb.SR_INSTANCE_ID= '||MSC_CL_COLLECTION.v_instance_id
||'    AND msb.DELETED_FLAG= '||MSC_UTIL.SYS_NO;

     EXECUTE IMMEDIATE lv_sql_ins
     USING   MSC_CL_COLLECTION.v_last_collection_id,MSC_CL_COLLECTION.v_current_date,MSC_CL_COLLECTION.v_current_user,MSC_CL_COLLECTION.v_current_date,MSC_CL_COLLECTION.v_current_user;

     commit;
EXCEPTION
   WHEN OTHERS THEN
    IF SQLCODE IN (-01653,-01650,-01562,-01683) THEN

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '========================================');
      FND_MESSAGE.SET_NAME('MSC', 'MSC_OL_DATA_ERR_HEADER');
      FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_BOM');
      FND_MESSAGE.SET_TOKEN('TABLE', 'MSC_BOMS');
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, SQLERRM);
      RAISE;

    ELSE
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '========================================');
      FND_MESSAGE.SET_NAME('MSC', 'MSC_OL_DATA_ERR_HEADER');
      FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_BOM');
      FND_MESSAGE.SET_TOKEN('TABLE', 'MSC_BOMS');
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, SQLERRM);

      --If Direct path load results in warning then the processing has to be
      --switched back to row by row processing. This will help to identify the
      --erroneous record and will also help in processing the rest of the records.
      lb_refresh_failed := TRUE;
    END IF;
END;

END IF;   -- MSC_CL_COLLECTION.v_is_complete_refresh OR MSC_CL_COLLECTION.v_is_partial_refresh



--Incremental Refresh or the above complete refresh or partial refresh has
--failed.
IF MSC_CL_COLLECTION.v_is_incremental_refresh OR lb_refresh_failed THEN

IF MSC_CL_COLLECTION.v_is_incremental_refresh THEN
   FOR c_rec IN c2_d LOOP
      DELETE MSC_BOMS
        WHERE PLAN_ID= -1
           AND BILL_SEQUENCE_ID= c_rec.BILL_SEQUENCE_ID
           AND SR_INSTANCE_ID= c_rec.SR_INSTANCE_ID;
   END LOOP;
END IF;

c_count:= 0;

OPEN  c2;

IF (c2%ISOPEN) THEN
LOOP

--
-- Retrieve the next set of rows if we are currently not in the
-- middle of processing a fetched set or rows.
--
IF (lb_FetchComplete) THEN
  EXIT;
END IF;

FETCH c2 BULK COLLECT INTO    	lb_ASSEMBLY_TYPE,
  				lb_ALTERNATE_BOM_DESIGNATOR,
  				lb_SPECIFIC_ASSEMBLY_COMMENT,
  				lb_PENDING_FROM_ECN,
  				lb_SCALING_TYPE,
  				lb_ASSEMBLY_QUANTITY,
  				lb_UOM,
  				lb_ORGANIZATION_ID,
  				lb_ASSEMBLY_ITEM_ID,
  				lb_BILL_SEQUENCE_ID,
  				lb_SR_INSTANCE_ID,
  				lb_operation_seq_num
LIMIT ln_rows_to_fetch;

-- Since we are only fetching records if either (1) this is the first
-- fetch or (2) the previous fetch did not retrieve all of the
-- records, then at least one row should always be fetched.  But
-- checking just to make sure.
EXIT WHEN lb_ASSEMBLY_TYPE.count = 0;

-- Check if all of the rows have been fetched.  If so, indicate that
-- the fetch is complete so that another fetch is not made.
-- Additional check is introduced for the following reasons
-- In 9i, the table of records gets modified but in 8.1.6 the table of records is
-- unchanged after the fetch(bug#2995144)
IF (c2%NOTFOUND) THEN
  lb_FetchComplete := TRUE;
END IF;

FOR j IN 1..lb_ASSEMBLY_TYPE.COUNT LOOP

   BEGIN
     IF MSC_CL_COLLECTION.v_is_incremental_refresh THEN

       UPDATE MSC_BOMS
       SET
 	ASSEMBLY_TYPE= lb_ASSEMBLY_TYPE(j),
 	ALTERNATE_BOM_DESIGNATOR= lb_ALTERNATE_BOM_DESIGNATOR(j),
 	SPECIFIC_ASSEMBLY_COMMENT= lb_SPECIFIC_ASSEMBLY_COMMENT(j),
 	PENDING_FROM_ECN= lb_PENDING_FROM_ECN(j),
 	SCALING_TYPE= lb_SCALING_TYPE(j),
 	ASSEMBLY_QUANTITY= lb_ASSEMBLY_QUANTITY(j),
 	UOM= lb_UOM(j),
 	ORGANIZATION_ID= lb_ORGANIZATION_ID(j),
 	ASSEMBLY_ITEM_ID= lb_ASSEMBLY_ITEM_ID(j),
 	REFRESH_NUMBER= MSC_CL_COLLECTION.v_last_collection_id,
 	LAST_UPDATE_DATE= MSC_CL_COLLECTION.v_current_date,
 	LAST_UPDATED_BY= MSC_CL_COLLECTION.v_current_user
       WHERE PLAN_ID= -1
  	 AND BILL_SEQUENCE_ID= lb_BILL_SEQUENCE_ID(j)
  	 AND SR_INSTANCE_ID= lb_SR_INSTANCE_ID(j);

      END IF;

     IF (MSC_CL_COLLECTION.v_is_complete_refresh OR MSC_CL_COLLECTION.v_is_partial_refresh) OR SQL%NOTFOUND THEN

       EXECUTE IMMEDIATE lv_sql_stmt
       USING
    	lb_ASSEMBLY_TYPE(j),
  	lb_ALTERNATE_BOM_DESIGNATOR(j),
  	lb_SPECIFIC_ASSEMBLY_COMMENT(j),
  	lb_PENDING_FROM_ECN(j),
  	lb_SCALING_TYPE(j),
  	lb_ASSEMBLY_QUANTITY(j),
  	lb_UOM(j),
  	lb_ORGANIZATION_ID(j),
  	lb_ASSEMBLY_ITEM_ID(j),
  	lb_BILL_SEQUENCE_ID(j),
  	lb_SR_INSTANCE_ID(j),
  	lb_operation_seq_num(j),
  	MSC_CL_COLLECTION.v_last_collection_id,
  	MSC_CL_COLLECTION.v_current_date,
  	MSC_CL_COLLECTION.v_current_user,
  	MSC_CL_COLLECTION.v_current_date,
       	MSC_CL_COLLECTION.v_current_user;
     END IF;  -- SQL%NOTFOUND

     c_count:= c_count+1;

     IF c_count> MSC_CL_COLLECTION.PBS THEN
        COMMIT;
        c_count:= 0;
     END IF;

    EXCEPTION
     WHEN OTHERS THEN
      IF SQLCODE IN (-01653,-01650,-01562,-01683) THEN

      	MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '========================================');
      	FND_MESSAGE.SET_NAME('MSC', 'MSC_OL_DATA_ERR_HEADER');
      	FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_BOM');
      	FND_MESSAGE.SET_TOKEN('TABLE', 'MSC_BOMS');
      	MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      	MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, SQLERRM);
      	RAISE;

      ELSE

      	MSC_CL_COLLECTION.v_warning_flag := MSC_UTIL.SYS_YES;

      	MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '========================================');
      	FND_MESSAGE.SET_NAME('MSC', 'MSC_OL_DATA_ERR_HEADER');
      	FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_BOM');
      	FND_MESSAGE.SET_TOKEN('TABLE', 'MSC_BOMS');
      	MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      	FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      	FND_MESSAGE.SET_TOKEN('COLUMN', 'ASSEMBLY_ITEM_NAME');
      	FND_MESSAGE.SET_TOKEN('VALUE', MSC_CL_ITEM_ODS_LOAD.ITEM_NAME(lb_ASSEMBLY_ITEM_ID(j)));
      	MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      	FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      	FND_MESSAGE.SET_TOKEN('COLUMN', 'BILL_SEQUENCE_ID');
      	FND_MESSAGE.SET_TOKEN('VALUE', TO_CHAR( lb_BILL_SEQUENCE_ID(j)));
      	MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      	MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, SQLERRM);

       END IF;
    END;
END LOOP;
COMMIT;
END LOOP;
END IF;
CLOSE c2;
COMMIT;
END IF;

   END LOAD_BOM;

   PROCEDURE LOAD_BOM_COMPONENTS IS

   CURSOR c1 IS
SELECT
  msbc.COMPONENT_SEQUENCE_ID,
  msbc.ORGANIZATION_ID,
  msbc.BILL_SEQUENCE_ID,
  msbc.OPERATION_SEQ_NUM,
  t1.INVENTORY_ITEM_ID,              -- msbc.INVENTORY_ITEM_ID
  t2.INVENTORY_ITEM_ID USING_ASSEMBLY_ID, -- msbc.USING_ASSEMBLY_ID
  msbc.COMPONENT_TYPE,
  msbc.SCALING_TYPE,
  msbc.CHANGE_NOTICE,
  msbc.REVISION,
  msbc.UOM_CODE,
  msbc.USAGE_QUANTITY,
  msbc.COMPONENT_YIELD_FACTOR,
  msbc.EFFECTIVITY_DATE,
  msbc.DISABLE_DATE,
  msbc.FROM_UNIT_NUMBER,
  msbc.TO_UNIT_NUMBER,
  msbc.USE_UP_CODE,
  msbc.SUGGESTED_EFFECTIVITY_DATE,
  t3.INVENTORY_ITEM_ID DRIVING_ITEM_ID, -- msbc.DRIVING_ITEM_ID,
  msbc.OPERATION_OFFSET_PERCENT,
  msbc.OPTIONAL_COMPONENT,
  msbc.OLD_EFFECTIVITY_DATE,
  msbc.WIP_SUPPLY_TYPE,
  msbc.PLANNING_FACTOR,
  msbc.ATP_FLAG,
  msbc.SR_INSTANCE_ID,
  msbc.scale_multiple,
  msbc.SCALE_ROUNDING_VARIANCE,
  msbc.ROUNDING_DIRECTION,
  msbc.PRIMARY_FLAG,
  msbc.CONTRIBUTE_TO_STEP_QTY,  /* ds change */
  msbc.OLD_COMPONENT_SEQUENCE_ID
FROM MSC_ITEM_ID_LID t1,
     MSC_ITEM_ID_LID t2,
     MSC_ITEM_ID_LID t3,
     MSC_ST_BOM_COMPONENTS msbc
WHERE t1.SR_INVENTORY_ITEM_ID= msbc.inventory_item_id
  AND t1.sr_instance_id= msbc.sr_instance_id
  AND t2.SR_INVENTORY_ITEM_ID= msbc.using_assembly_id
  AND t2.sr_instance_id= msbc.sr_instance_id
  AND t3.SR_INVENTORY_ITEM_ID(+)= msbc.driving_item_id
  AND t3.sr_instance_id(+)= msbc.sr_instance_id
  AND msbc.SR_INSTANCE_ID= MSC_CL_COLLECTION.v_instance_id
  AND msbc.DELETED_FLAG= MSC_UTIL.SYS_NO;

   CURSOR c1_d IS
SELECT
  msbc.COMPONENT_SEQUENCE_ID,
  msbc.BILL_SEQUENCE_ID,
  msbc.SR_INSTANCE_ID
FROM MSC_ST_BOM_COMPONENTS msbc
WHERE msbc.SR_INSTANCE_ID= MSC_CL_COLLECTION.v_instance_id
  AND msbc.DELETED_FLAG= MSC_UTIL.SYS_YES;


   lv_tbl      VARCHAR2(30);
   lv_sql_stmt VARCHAR2(5000);
   lv_sql_stmt1 VARCHAR2(5000);
   lv_sql_ins        vARCHAR2(6000);

   lb_FetchComplete  Boolean;
   lb_refresh_failed Boolean:= FALSE;
   ln_rows_to_fetch  Number := nvl(TO_NUMBER( FND_PROFILE.VALUE('MRP_PURGE_BATCH_SIZE')),75000);


   TYPE CharTblTyp IS TABLE OF VARCHAR2(30);
  TYPE NumTblTyp  IS TABLE OF NUMBER;
  TYPE dateTblTyp IS TABLE OF DATE;

lb_COMPONENT_SEQUENCE_ID            NumTblTyp;
lb_ORGANIZATION_ID                  NumTblTyp;
lb_BILL_SEQUENCE_ID                 NumTblTyp;
lb_OPERATION_SEQ_NUM                NumTblTyp;
lb_INVENTORY_ITEM_ID                NumTblTyp;
lb_USING_ASSEMBLY_ID                NumTblTyp;
lb_COMPONENT_TYPE                   NumTblTyp;
lb_SCALING_TYPE                     NumTblTyp;
lb_CHANGE_NOTICE                    CharTblTyp;
lb_REVISION                         CharTblTyp;
lb_UOM_CODE                         CharTblTyp;
lb_USAGE_QUANTITY                   NumTblTyp;
lb_COMPONENT_YIELD_FACTOR           NumTblTyp;
lb_EFFECTIVITY_DATE                 dateTblTyp;
lb_DISABLE_DATE                     dateTblTyp;
lb_FROM_UNIT_NUMBER                 CharTblTyp;
lb_TO_UNIT_NUMBER                   CharTblTyp;
lb_USE_UP_CODE                      NumTblTyp;
lb_SUGGESTED_EFFECTIVITY_DATE       dateTblTyp;
lb_DRIVING_ITEM_ID                  NumTblTyp;
lb_OPERATION_OFFSET_PERCENT         NumTblTyp;
lb_OPTIONAL_COMPONENT               NumTblTyp;
lb_OLD_EFFECTIVITY_DATE             dateTblTyp;
lb_WIP_SUPPLY_TYPE                  NumTblTyp;
lb_PLANNING_FACTOR                  NumTblTyp;
lb_ATP_FLAG                         NumTblTyp;
lb_SR_INSTANCE_ID                   NumTblTyp;
lb_scale_multiple                   NumTblTyp;
lb_SCALE_ROUNDING_VARIANCE          NumTblTyp;
lb_ROUNDING_DIRECTION               NumTblTyp;
lb_PRIMARY_FLAG                     NumTblTyp;
lb_CONTRIBUTE_TO_STEP_QTY           NumTblTyp;  /* ds change */
lb_OLD_COMPONENT_SEQUENCE_ID        NumTblTyp;

  lv_errbuf			VARCHAR2(240);
  lv_retcode			NUMBER;

BEGIN


IF MSC_CL_COLLECTION.v_exchange_mode=MSC_UTIL.SYS_YES THEN
   lv_tbl:= 'BOM_COMPONENTS_'||MSC_CL_COLLECTION.v_instance_code;
ELSE
   lv_tbl:= 'MSC_BOM_COMPONENTS';
END IF;

lv_sql_stmt:=
' insert into '||lv_tbl
||'( PLAN_ID,'
||'  COMPONENT_SEQUENCE_ID,'
||'  ORGANIZATION_ID,'
||'  BILL_SEQUENCE_ID,'
||'  OPERATION_SEQ_NUM,'
||'  INVENTORY_ITEM_ID,'
||'  USING_ASSEMBLY_ID,'
||'  COMPONENT_TYPE,'
||'  SCALING_TYPE,'
||'  CHANGE_NOTICE,'
||'  REVISION,'
||'  UOM_CODE,'
||'  USAGE_QUANTITY,'
||'  COMPONENT_YIELD_FACTOR,'
||'  EFFECTIVITY_DATE,'
||'  DISABLE_DATE,'
||'  FROM_UNIT_NUMBER,'
||'  TO_UNIT_NUMBER,'
||'  USE_UP_CODE,'
||'  SUGGESTED_EFFECTIVITY_DATE,'
||'  DRIVING_ITEM_ID,'
||'  OPERATION_OFFSET_PERCENT,'
||'  OPTIONAL_COMPONENT,'
||'  OLD_EFFECTIVITY_DATE,'
||'  WIP_SUPPLY_TYPE,'
||'  PLANNING_FACTOR,'
||'  ATP_FLAG,'
||'  SR_INSTANCE_ID,'
||'  SCALE_MULTIPLE,'
||'  SCALE_ROUNDING_VARIANCE,'
||'  ROUNDING_DIRECTION,'
||'  PRIMARY_FLAG,'
||'  CONTRIBUTE_TO_STEP_QTY,'
||'  OLD_COMPONENT_SEQUENCE_ID,'
||'  REFRESH_NUMBER,'
||'  LAST_UPDATE_DATE,'
||'  LAST_UPDATED_BY,'
||'  CREATION_DATE,'
||'  CREATED_BY)'
||'VALUES'
||'( -1,'
||'  :COMPONENT_SEQUENCE_ID,'
||'  :ORGANIZATION_ID,'
||'  :BILL_SEQUENCE_ID,'
||'  :OPERATION_SEQ_NUM,'
||'  :INVENTORY_ITEM_ID,'
||'  :USING_ASSEMBLY_ID,'
||'  :COMPONENT_TYPE,'
||'  :SCALING_TYPE,'
||'  :CHANGE_NOTICE,'
||'  :REVISION,'
||'  :UOM_CODE,'
||'  :USAGE_QUANTITY,'
||'  :COMPONENT_YIELD_FACTOR,'
||'  :EFFECTIVITY_DATE,'
||'  :DISABLE_DATE,'
||'  :FROM_UNIT_NUMBER,'
||'  :TO_UNIT_NUMBER,'
||'  :USE_UP_CODE,'
||'  :SUGGESTED_EFFECTIVITY_DATE,'
||'  :DRIVING_ITEM_ID,'
||'  :OPERATION_OFFSET_PERCENT,'
||'  :OPTIONAL_COMPONENT,'
||'  :OLD_EFFECTIVITY_DATE,'
||'  :WIP_SUPPLY_TYPE,'
||'  :PLANNING_FACTOR,'
||'  :ATP_FLAG,'
||'  :SR_INSTANCE_ID,'
||'  :SCALE_MULTIPLE,'
||'  :SCALE_ROUNDING_VARIANCE,'
||'  :ROUNDING_DIRECTION,'
||'  :PRIMARY_FLAG,'
||'  :CONTRIBUTE_TO_STEP_QTY,'
||'  :OLD_COMPONENT_SEQUENCE_ID,'
||'  :v_last_collection_id,'
||'  :v_current_date,'
||'  :v_current_user,'
||'  :v_current_date,'
||'  :v_current_user)';

--fix for the bug#3283959
IF (MSC_CL_COLLECTION.v_is_complete_refresh OR MSC_CL_COLLECTION.v_is_partial_refresh) THEN

if (MSC_CL_COLLECTION.v_exchange_mode=MSC_UTIL.SYS_NO) then
--MSC_CL_COLLECTION.DELETE_MSC_TABLE( 'MSC_BOM_COMPONENTS', MSC_CL_COLLECTION.v_instance_id, -1);
IF MSC_CL_COLLECTION.v_coll_prec.org_group_flag = MSC_UTIL.G_ALL_ORGANIZATIONS THEN
    MSC_CL_COLLECTION.DELETE_MSC_TABLE( 'MSC_BOM_COMPONENTS', MSC_CL_COLLECTION.v_instance_id, -1);
  ELSE
    v_sub_str :=' AND ORGANIZATION_ID '||MSC_UTIL.v_in_org_str;
    MSC_CL_COLLECTION.DELETE_MSC_TABLE( 'MSC_BOM_COMPONENTS', MSC_CL_COLLECTION.v_instance_id, -1,v_sub_str);
  END IF;
end if;

BEGIN
lv_sql_ins :=
' INSERT /*+ append  */ '
|| ' INTO '||lv_tbl
||'( PLAN_ID,'
||'  COMPONENT_SEQUENCE_ID,'
||'  ORGANIZATION_ID,'
||'  BILL_SEQUENCE_ID,'
||'  OPERATION_SEQ_NUM,'
||'  INVENTORY_ITEM_ID,'
||'  USING_ASSEMBLY_ID,'
||'  COMPONENT_TYPE,'
||'  SCALING_TYPE,'
||'  CHANGE_NOTICE,'
||'  REVISION,'
||'  UOM_CODE,'
||'  USAGE_QUANTITY,'
||'  COMPONENT_YIELD_FACTOR,'
||'  EFFECTIVITY_DATE,'
||'  DISABLE_DATE,'
||'  FROM_UNIT_NUMBER,'
||'  TO_UNIT_NUMBER,'
||'  USE_UP_CODE,'
||'  SUGGESTED_EFFECTIVITY_DATE,'
||'  DRIVING_ITEM_ID,'
||'  OPERATION_OFFSET_PERCENT,'
||'  OPTIONAL_COMPONENT,'
||'  OLD_EFFECTIVITY_DATE,'
||'  WIP_SUPPLY_TYPE,'
||'  PLANNING_FACTOR,'
||'  ATP_FLAG,'
||'  SR_INSTANCE_ID,'
||'  SCALE_MULTIPLE,'
||'  SCALE_ROUNDING_VARIANCE,'
||'  ROUNDING_DIRECTION,'
||'  PRIMARY_FLAG,'
||'  CONTRIBUTE_TO_STEP_QTY,'
||'  OLD_COMPONENT_SEQUENCE_ID,'
||'  REFRESH_NUMBER,'
||'  LAST_UPDATE_DATE,'
||'  LAST_UPDATED_BY,'
||'  CREATION_DATE,'
||'  CREATED_BY)'
||'  SELECT '
||'  -1,'
||'  msbc.COMPONENT_SEQUENCE_ID,'
||'  msbc.ORGANIZATION_ID,'
||'  msbc.BILL_SEQUENCE_ID,'
||'  msbc.OPERATION_SEQ_NUM,'
||'  t1.INVENTORY_ITEM_ID, '
||'  t2.INVENTORY_ITEM_ID,'
||'  msbc.COMPONENT_TYPE,'
||'  msbc.SCALING_TYPE,'
||'  msbc.CHANGE_NOTICE,'
||'  msbc.REVISION,'
||'  msbc.UOM_CODE,'
||'  msbc.USAGE_QUANTITY,'
||'  msbc.COMPONENT_YIELD_FACTOR,'
||'  msbc.EFFECTIVITY_DATE,'
||'  msbc.DISABLE_DATE,'
||'  msbc.FROM_UNIT_NUMBER,'
||'  msbc.TO_UNIT_NUMBER,'
||'  msbc.USE_UP_CODE,'
||'  msbc.SUGGESTED_EFFECTIVITY_DATE,'
||'  t3.INVENTORY_ITEM_ID,'
||'  msbc.OPERATION_OFFSET_PERCENT,'
||'  msbc.OPTIONAL_COMPONENT,'
||'  msbc.OLD_EFFECTIVITY_DATE,'
||'  msbc.WIP_SUPPLY_TYPE,'
||'  msbc.PLANNING_FACTOR,'
||'  msbc.ATP_FLAG,'
||'  msbc.SR_INSTANCE_ID,'
||'  msbc.scale_multiple,'
||'  msbc.SCALE_ROUNDING_VARIANCE,'
||'  msbc.ROUNDING_DIRECTION,'
||'  msbc.PRIMARY_FLAG, '
||'  msbc.CONTRIBUTE_TO_STEP_QTY, '
||'  msbc.OLD_COMPONENT_SEQUENCE_ID,'
||'   :v_last_collection_id, '
||'   :v_current_date      , '
||'   :v_current_user      , '
||'   :v_current_date      , '
||'   :v_current_user        '
||' FROM MSC_ITEM_ID_LID t1,'
||'     MSC_ITEM_ID_LID t2,'
||'     MSC_ITEM_ID_LID t3,'
||'     MSC_ST_BOM_COMPONENTS msbc'
||' WHERE t1.SR_INVENTORY_ITEM_ID   = msbc.inventory_item_id'
||'  AND t1.sr_instance_id          = msbc.sr_instance_id'
||'  AND t2.SR_INVENTORY_ITEM_ID    = msbc.using_assembly_id'
||'  AND t2.sr_instance_id          = msbc.sr_instance_id'
||'  AND t3.SR_INVENTORY_ITEM_ID(+) = msbc.driving_item_id'
||'  AND t3.sr_instance_id(+)       = msbc.sr_instance_id'
||'  AND msbc.SR_INSTANCE_ID        = '||MSC_CL_COLLECTION.v_instance_id
||'  AND msbc.DELETED_FLAG          = '||MSC_UTIL.SYS_NO;

     EXECUTE IMMEDIATE lv_sql_ins
     USING   MSC_CL_COLLECTION.v_last_collection_id,MSC_CL_COLLECTION.v_current_date,MSC_CL_COLLECTION.v_current_user,MSC_CL_COLLECTION.v_current_date,MSC_CL_COLLECTION.v_current_user;

     commit;
EXCEPTION
   WHEN OTHERS THEN
    IF SQLCODE IN (-01653,-01650,-01562,-01683) THEN

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '========================================');
      FND_MESSAGE.SET_NAME('MSC', 'MSC_OL_DATA_ERR_HEADER');
      FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_BOM_COMPONENTS');
      FND_MESSAGE.SET_TOKEN('TABLE', 'MSC_BOM_COMPONENTS');
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, SQLERRM);
      RAISE;

    ELSE
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '========================================');
      FND_MESSAGE.SET_NAME('MSC', 'MSC_OL_DATA_ERR_HEADER');
      FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_BOM_COMPONENTS');
      FND_MESSAGE.SET_TOKEN('TABLE', 'MSC_BOM_COMPONENTS');
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, SQLERRM);

      --If Direct path load results in warning then the processing has to be
      --switched back to row by row processing. This will help to identify the
      --erroneous record and will also help in processing the rest of the records.
      lb_refresh_failed := TRUE;
    END IF;
END;

END IF; --MSC_CL_COLLECTION.v_is_complete_refresh OR MSC_CL_COLLECTION.v_is_partial_refresh

--Incremental Refresh or the above complete refresh or partial refresh has
--failed.
IF MSC_CL_COLLECTION.v_is_incremental_refresh OR lb_refresh_failed THEN

IF MSC_CL_COLLECTION.v_is_incremental_refresh THEN

  -- set SR_INSTANCE_ID to negative to indicate a SOFT delete

FOR c_rec IN c1_d LOOP
---5470477
	lv_sql_stmt1 := ' UPDATE MSC_BOM_COMPONENTS '
			||'   SET USAGE_QUANTITY= 0, '
			||'   REFRESH_NUMBER=   :v_last_collection_id , '
			||'   LAST_UPDATE_DATE= :v_current_date , '
			||'   LAST_UPDATED_BY=  :v_current_user '
			||' WHERE PLAN_ID= -1 '
			||'  AND SR_INSTANCE_ID= :SR_INSTANCE_ID ';

	IF (c_rec.BILL_SEQUENCE_ID IS NOT NULL) THEN
		lv_sql_stmt1 := lv_sql_stmt1 || '  AND BILL_SEQUENCE_ID=  :BILL_SEQUENCE_ID ';
	END IF;

	IF (c_rec.COMPONENT_SEQUENCE_ID IS NOT NULL) THEN
		lv_sql_stmt1 := lv_sql_stmt1 || '  AND COMPONENT_SEQUENCE_ID= :COMPONENT_SEQUENCE_ID ';
	END IF;
   BEGIN
	IF (c_rec.BILL_SEQUENCE_ID IS NOT NULL) THEN
		IF (c_rec.COMPONENT_SEQUENCE_ID IS NOT NULL) THEN
			EXECUTE IMMEDIATE lv_sql_stmt1  USING MSC_CL_COLLECTION.v_last_collection_id, MSC_CL_COLLECTION.v_current_date, MSC_CL_COLLECTION.v_current_user, c_rec.SR_INSTANCE_ID, c_rec.BILL_SEQUENCE_ID , c_rec.COMPONENT_SEQUENCE_ID ;
		ELSE
			EXECUTE IMMEDIATE lv_sql_stmt1  USING MSC_CL_COLLECTION.v_last_collection_id, MSC_CL_COLLECTION.v_current_date, MSC_CL_COLLECTION.v_current_user, c_rec.SR_INSTANCE_ID, c_rec.BILL_SEQUENCE_ID;
		END IF;
	ELSE
		IF (c_rec.COMPONENT_SEQUENCE_ID IS NOT NULL) THEN
			EXECUTE IMMEDIATE lv_sql_stmt1  USING MSC_CL_COLLECTION.v_last_collection_id, MSC_CL_COLLECTION.v_current_date, MSC_CL_COLLECTION.v_current_user, c_rec.SR_INSTANCE_ID,  c_rec.COMPONENT_SEQUENCE_ID ;
		/*ELSE --condition should not arise. even if it does, we should not delete
			EXECUTE IMMEDIATE lv_sql_stmt1  USING MSC_CL_COLLECTION.v_last_collection_id, MSC_CL_COLLECTION.v_current_date, MSC_CL_COLLECTION.v_current_user, c_rec.SR_INSTANCE_ID; */
		END IF;

	END IF;

   EXCEPTION
	   WHEN OTHERS THEN
	      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '------------------------------------------------');
	      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, 'SQL Executed: ' || lv_sql_stmt1 );
	      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, 'BILL SEQUENCE ID: ' || c_rec.BILL_SEQUENCE_ID );
	      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, 'COMPONENT SEQUENCE ID: ' || c_rec.COMPONENT_SEQUENCE_ID);
	      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '------------------------------------------------');
   END;

/*
UPDATE MSC_BOM_COMPONENTS
   SET USAGE_QUANTITY= 0,
       REFRESH_NUMBER= MSC_CL_COLLECTION.v_last_collection_id,
       LAST_UPDATE_DATE= v_current_date,
       LAST_UPDATED_BY= MSC_CL_COLLECTION.v_current_user
 WHERE PLAN_ID= -1
   AND BILL_SEQUENCE_ID= NVL(c_rec.BILL_SEQUENCE_ID, BILL_SEQUENCE_ID)
   AND COMPONENT_SEQUENCE_ID= NVL(c_rec.COMPONENT_SEQUENCE_ID, COMPONENT_SEQUENCE_ID)
   AND SR_INSTANCE_ID= c_rec.SR_INSTANCE_ID;
*/
END LOOP;

END IF;


OPEN  c1;

IF (c1%ISOPEN) THEN
LOOP

--
-- Retrieve the next set of rows if we are currently not in the
-- middle of processing a fetched set or rows.
--
IF (lb_FetchComplete) THEN
  EXIT;
END IF;

FETCH c1 BULK COLLECT INTO   lb_COMPONENT_SEQUENCE_ID,
                             lb_ORGANIZATION_ID,
                             lb_BILL_SEQUENCE_ID,
                             lb_OPERATION_SEQ_NUM,
                             lb_INVENTORY_ITEM_ID,
                             lb_USING_ASSEMBLY_ID,
                             lb_COMPONENT_TYPE,
                             lb_SCALING_TYPE,
                             lb_CHANGE_NOTICE,
                             lb_REVISION,
                             lb_UOM_CODE,
                             lb_USAGE_QUANTITY,
                             lb_COMPONENT_YIELD_FACTOR,
                             lb_EFFECTIVITY_DATE,
                             lb_DISABLE_DATE,
                             lb_FROM_UNIT_NUMBER,
                             lb_TO_UNIT_NUMBER,
                             lb_USE_UP_CODE,
                             lb_SUGGESTED_EFFECTIVITY_DATE,
                             lb_DRIVING_ITEM_ID,
                             lb_OPERATION_OFFSET_PERCENT,
                             lb_OPTIONAL_COMPONENT,
                             lb_OLD_EFFECTIVITY_DATE,
                             lb_WIP_SUPPLY_TYPE,
                             lb_PLANNING_FACTOR,
                             lb_ATP_FLAG,
                             lb_SR_INSTANCE_ID,
                             lb_scale_multiple,
                             lb_SCALE_ROUNDING_VARIANCE,
                             lb_ROUNDING_DIRECTION,
                             lb_PRIMARY_FLAG,
			     lb_CONTRIBUTE_TO_STEP_QTY,
			     lb_OLD_COMPONENT_SEQUENCE_ID
LIMIT ln_rows_to_fetch;

-- Since we are only fetching records if either (1) this is the first
-- fetch or (2) the previous fetch did not retrieve all of the
-- records, then at least one row should always be fetched.  But
-- checking just to make sure.
EXIT WHEN lb_COMPONENT_SEQUENCE_ID.count = 0;

-- Check if all of the rows have been fetched.  If so, indicate that
-- the fetch is complete so that another fetch is not made.
-- Additional check is introduced for the following reasons
-- In 9i, the table of records gets modified but in 8.1.6 the table of records is
-- unchanged after the fetch(bug#2995144)
IF (c1%NOTFOUND) THEN
  lb_FetchComplete := TRUE;
END IF;

FOR j IN 1..lb_COMPONENT_SEQUENCE_ID.COUNT LOOP

BEGIN

IF MSC_CL_COLLECTION.v_is_incremental_refresh THEN

UPDATE MSC_BOM_COMPONENTS
SET
 ORGANIZATION_ID= lb_ORGANIZATION_ID(j),
 INVENTORY_ITEM_ID= lb_INVENTORY_ITEM_ID(j),
 USING_ASSEMBLY_ID= lb_USING_ASSEMBLY_ID(j),
 OPERATION_SEQ_NUM = lb_OPERATION_SEQ_NUM(j),
 COMPONENT_TYPE= lb_COMPONENT_TYPE(j),
 SCALING_TYPE= lb_SCALING_TYPE(j),
 CHANGE_NOTICE= lb_CHANGE_NOTICE(j),
 REVISION= lb_REVISION(j),
 UOM_CODE= lb_UOM_CODE(j),
 USAGE_QUANTITY= lb_USAGE_QUANTITY(j),
 COMPONENT_YIELD_FACTOR= lb_COMPONENT_YIELD_FACTOR(j),
 EFFECTIVITY_DATE= lb_EFFECTIVITY_DATE(j),
 DISABLE_DATE= lb_DISABLE_DATE(j),
 FROM_UNIT_NUMBER= lb_FROM_UNIT_NUMBER(j),
 TO_UNIT_NUMBER= lb_TO_UNIT_NUMBER(j),
 USE_UP_CODE= lb_USE_UP_CODE(j),
 SUGGESTED_EFFECTIVITY_DATE= lb_SUGGESTED_EFFECTIVITY_DATE(j),
 DRIVING_ITEM_ID= lb_DRIVING_ITEM_ID(j),
 OPERATION_OFFSET_PERCENT= lb_OPERATION_OFFSET_PERCENT(j),
 OPTIONAL_COMPONENT= lb_OPTIONAL_COMPONENT(j),
 OLD_EFFECTIVITY_DATE= lb_OLD_EFFECTIVITY_DATE(j),
 WIP_SUPPLY_TYPE= lb_WIP_SUPPLY_TYPE(j),
 PLANNING_FACTOR= lb_PLANNING_FACTOR(j),
 ATP_FLAG= lb_ATP_FLAG(j),
 SCALE_MULTIPLE  = lb_scale_multiple(j),
 SCALE_ROUNDING_VARIANCE     = lb_SCALE_ROUNDING_VARIANCE(j),
 ROUNDING_DIRECTION   = lb_ROUNDING_DIRECTION(j),
 PRIMARY_FLAG   = lb_PRIMARY_FLAG(j),
 CONTRIBUTE_TO_STEP_QTY   = lb_CONTRIBUTE_TO_STEP_QTY(j),
 OLD_COMPONENT_SEQUENCE_ID = lb_OLD_COMPONENT_SEQUENCE_ID(j),
 REFRESH_NUMBER= MSC_CL_COLLECTION.v_last_collection_id,
 LAST_UPDATE_DATE= MSC_CL_COLLECTION.v_current_date,
 LAST_UPDATED_BY= MSC_CL_COLLECTION.v_current_user
WHERE PLAN_ID= -1
AND BILL_SEQUENCE_ID= lb_BILL_SEQUENCE_ID(j)
  AND COMPONENT_SEQUENCE_ID= lb_COMPONENT_SEQUENCE_ID(j)
  AND SR_INSTANCE_ID= lb_SR_INSTANCE_ID(j);

END IF;

IF (MSC_CL_COLLECTION.v_is_complete_refresh OR MSC_CL_COLLECTION.v_is_partial_refresh) OR SQL%NOTFOUND THEN

EXECUTE IMMEDIATE lv_sql_stmt
USING
  lb_COMPONENT_SEQUENCE_ID(j),
  lb_ORGANIZATION_ID(j),
  lb_BILL_SEQUENCE_ID(j),
  lb_OPERATION_SEQ_NUM(j),
  lb_INVENTORY_ITEM_ID(j),
  lb_USING_ASSEMBLY_ID(j),
  lb_COMPONENT_TYPE(j),
  lb_SCALING_TYPE(j),
  lb_CHANGE_NOTICE(j),
  lb_REVISION(j),
  lb_UOM_CODE(j),
  lb_USAGE_QUANTITY(j),
  lb_COMPONENT_YIELD_FACTOR(j),
  lb_EFFECTIVITY_DATE(j),
  lb_DISABLE_DATE(j),
  lb_FROM_UNIT_NUMBER(j),
  lb_TO_UNIT_NUMBER(j),
  lb_USE_UP_CODE(j),
  lb_SUGGESTED_EFFECTIVITY_DATE(j),
  lb_DRIVING_ITEM_ID(j),
  lb_OPERATION_OFFSET_PERCENT(j),
  lb_OPTIONAL_COMPONENT(j),
  lb_OLD_EFFECTIVITY_DATE(j),
  lb_WIP_SUPPLY_TYPE(j),
  lb_PLANNING_FACTOR(j),
  lb_ATP_FLAG(j),
  lb_SR_INSTANCE_ID(j),
  lb_scale_multiple(j),
  lb_SCALE_ROUNDING_VARIANCE(j),
  lb_ROUNDING_DIRECTION(j),
  lb_PRIMARY_FLAG(j),
  lb_CONTRIBUTE_TO_STEP_QTY(j),
  lb_OLD_COMPONENT_SEQUENCE_ID(j),
  MSC_CL_COLLECTION.v_last_collection_id,
  MSC_CL_COLLECTION.v_current_date,
  MSC_CL_COLLECTION.v_current_user,
  MSC_CL_COLLECTION.v_current_date,
  MSC_CL_COLLECTION.v_current_user;
END IF;  -- SQL%NOTFOUND



EXCEPTION
   WHEN OTHERS THEN
    IF SQLCODE IN (-01653,-01650,-01562,-01683) THEN

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '========================================');
      FND_MESSAGE.SET_NAME('MSC', 'MSC_OL_DATA_ERR_HEADER');
      FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_BOM_COMPONENTS');
      FND_MESSAGE.SET_TOKEN('TABLE', 'MSC_BOM_COMPONENTS');
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, SQLERRM);
      RAISE;

    ELSE

      MSC_CL_COLLECTION.v_warning_flag := MSC_UTIL.SYS_YES;

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '========================================');
      FND_MESSAGE.SET_NAME('MSC', 'MSC_OL_DATA_ERR_HEADER');
      FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_BOM_COMPONENTS');
      FND_MESSAGE.SET_TOKEN('TABLE', 'MSC_BOM_COMPONENTS');
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'BILL_SEQUENCE_ID');
      FND_MESSAGE.SET_TOKEN('VALUE', TO_CHAR( lb_BILL_SEQUENCE_ID(j)));
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'COMPONENT_SEQUENCE_ID');
      FND_MESSAGE.SET_TOKEN('VALUE', TO_CHAR( lb_COMPONENT_SEQUENCE_ID(j)));
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, SQLERRM);

    END IF;
END;

END LOOP;
COMMIT;
END LOOP;
END IF;
CLOSE c1;
COMMIT;
END IF;

BEGIN

IF ((MSC_CL_COLLECTION.v_coll_prec.org_group_flag <> MSC_UTIL.G_ALL_ORGANIZATIONS ) AND (MSC_CL_COLLECTION.v_exchange_mode=MSC_UTIL.SYS_YES)) THEN

lv_tbl:= 'BOM_COMPONENTS_'||MSC_CL_COLLECTION.v_instance_code;

lv_sql_stmt:=
         'INSERT INTO '||lv_tbl
          ||' SELECT * from MSC_BOM_COMPONENTS'
          ||' WHERE sr_instance_id = '||MSC_CL_COLLECTION.v_instance_id
          ||' AND plan_id = -1 '
          ||' AND organization_id not '||MSC_UTIL.v_in_org_str;

   MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, 'The sql statement is '||lv_sql_stmt);
   EXECUTE IMMEDIATE lv_sql_stmt;

   COMMIT;

END IF;

IF MSC_CL_COLLECTION.v_exchange_mode=MSC_UTIL.SYS_YES THEN
   MSC_CL_COLLECTION.alter_temp_table (lv_errbuf,
   	              lv_retcode,
                      'MSC_BOM_COMPONENTS',
                      MSC_CL_COLLECTION.v_instance_code,
                      MSC_UTIL.G_WARNING
                     );

   IF lv_retcode = MSC_UTIL.G_ERROR THEN
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, lv_errbuf);
      RAISE MSC_CL_COLLECTION.ALTER_TEMP_TABLE_ERROR;
   ELSIF lv_retcode = MSC_UTIL.G_WARNING THEN
      MSC_CL_COLLECTION.v_warning_flag := MSC_UTIL.SYS_YES;
   END IF;

END IF;

EXCEPTION
  WHEN OTHERS THEN

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, SQLERRM);
      RAISE;
END;

   END LOAD_BOM_COMPONENTS;

   PROCEDURE LOAD_RESOURCE IS

   CURSOR c1 IS
SELECT
  msdr.RESOURCE_CODE,
  msdr.DEPARTMENT_CODE,
  msdr.DEPARTMENT_DESCRIPTION,
  msdr.RESOURCE_DESCRIPTION,
  msdr.DEPARTMENT_CLASS,
  msdr.LINE_FLAG,
  msdr.CAPACITY_UNITS,
  msdr.MAX_RATE,
  msdr.MIN_RATE,
  msdr.AGGREGATED_RESOURCE_ID,
  msdr.AGGREGATED_RESOURCE_FLAG,
  msdr.RESOURCE_GROUP_NAME,
  msdr.RESOURCE_GROUP_CODE,
  msdr.RESOURCE_BALANCE_FLAG,
  msdr.BOTTLENECK_FLAG,
  msdr.DEPARTMENT_ID,
  msdr.OWNING_DEPARTMENT_ID,
  msdr.ORGANIZATION_ID,
  msdr.RESOURCE_ID,
  msdr.SR_INSTANCE_ID,
  msdr.OVER_UTILIZED_PERCENT,
  msdr.UNDER_UTILIZED_PERCENT,
  msdr.RESOURCE_SHORTAGE_TYPE,
  msdr.RESOURCE_EXCESS_TYPE,
  msdr.PLANNING_EXCEPTION_SET,
  msdr.USER_TIME_FENCE,
  msdr.UTILIZATION,
  msdr.EFFICIENCY,
  msdr.BATCHABLE_FLAG,
  msdr.BATCHING_WINDOW,
  msdr.MIN_CAPACITY,
  msdr.MAX_CAPACITY,
  msdr.UNIT_OF_MEASURE,
  msdr.RESOURCE_INCLUDE_FLAG,
  msdr.CRITICAL_RESOURCE_FLAG,
  msdr.RESOURCE_TYPE,
  msdr.DISABLE_DATE,
  msdr.AVAILABLE_24_HOURS_FLAG,
  msdr.CTP_FLAG,
  msdr.START_TIME,
  msdr.STOP_TIME,
  msdr.RESOURCE_COST,
  msdr.RESOURCE_OVER_UTIL_COST,
  msdr.DEPT_OVERHEAD_COST,
  msdr.ATP_RULE_ID,
  msdr.DELETED_FLAG,
  msdr.CAPACITY_TOLERANCE,   /* ds change change start */
  msdr.CHARGEABLE_FLAG,
  msdr.IDLE_TIME_TOLERANCE,
  msdr.BATCHING_PENALTY,
  msdr.SCHEDULE_TO_INSTANCE,
  msdr.LAST_KNOWN_SETUP,
  msdr.SETUP_TIME_PERCENT,
  msdr.UTILIZATION_CHANGE_PERCENT,
  msdr.SETUP_TIME_TYPE,
  msdr.UTILIZATION_CHANGE_TYPE ,
  msdr.SDS_SCHEDULING_WINDOW  /* ds change change end */
FROM MSC_ST_DEPARTMENT_RESOURCES msdr
WHERE msdr.SR_INSTANCE_ID= MSC_CL_COLLECTION.v_instance_id;

   CURSOR c3 IS
SELECT
  msss.ORGANIZATION_ID,
  msss.SIMULATION_SET,
  msss.DESCRIPTION,
  msss.USE_IN_WIP_FLAG,
  msss.SR_INSTANCE_ID
FROM MSC_ST_SIMULATION_SETS msss
WHERE msss.SR_INSTANCE_ID= MSC_CL_COLLECTION.v_instance_id;

   CURSOR c4 IS
SELECT
  msrg.GROUP_CODE,
  msrg.MEANING,
  msrg.DESCRIPTION,
  msrg.FROM_DATE,
  msrg.TO_DATE,
  msrg.ENABLED_FLAG
FROM MSC_ST_RESOURCE_GROUPS msrg
WHERE msrg.SR_INSTANCE_ID= MSC_CL_COLLECTION.v_instance_id;

/* ds:plan: change start */
  CURSOR dept_res_inst IS
SELECT
  msdri.RESOURCE_ID,
  msdri.DEPARTMENT_ID,
  msdri.ORGANIZATION_ID,
  msdri.SR_INSTANCE_ID,
  msdri.RES_INSTANCE_ID,
  t1.inventory_item_id EQUIPMENT_ITEM_ID,
  msdri.SERIAL_NUMBER,
  msdri.EFFECTIVE_START_DATE,
  msdri.EFFECTIVE_END_DATE,
  msdri.LAST_KNOWN_SETUP,
  msdri.DELETED_FLAG
FROM MSC_ST_DEPT_RES_INSTANCES msdri,
MSC_ITEM_ID_LID t1
WHERE msdri.SR_INSTANCE_ID= MSC_CL_COLLECTION.v_instance_id
AND t1.sr_instance_id (+) = msdri.sr_instance_id
AND t1.sr_inventory_item_id (+) = msdri.equipment_item_id;
 /* ds:plan: change end */

   c_count NUMBER:= 0;
 lv_uom_class_type number;

 lv_cnt          NUMBER;
    lv_pbs          NUMBER;
    lv_sql_stmt     VARCHAR2(2048);
    p_instance_id   NUMBER;
    p_table_name    VARCHAR2(30);
    lv_bom NUMBER;
    lv_wip NUMBER;
    lv_res_incr_refresh BOOLEAN;
    lv_res_partial_refresh  BOOLEAN;

   BEGIN

if (MSC_CL_COLLECTION.v_is_cont_refresh) then
   if MSC_CL_COLLECTION.v_bom_refresh_type =1 then                           --2 be changed
      lv_res_incr_refresh :=TRUE;
      lv_res_partial_refresh := FALSE;
   elsif MSC_CL_COLLECTION.v_bom_refresh_type =2 then                        --2 be changed
      lv_res_incr_refresh := FALSE;
      lv_res_partial_refresh := TRUE;
   else
      null;
   end if;
else
    if(MSC_CL_COLLECTION.v_is_partial_refresh) then
        lv_res_partial_refresh:=TRUE;
        lv_res_incr_refresh := FALSE;
    elsif(MSC_CL_COLLECTION.v_is_incremental_refresh) then
        lv_res_incr_refresh:= TRUE;
        lv_res_partial_refresh := FALSE;
    end if;
end if;
/* Bug 2878327 - We will always delete msc_department_resources and insert
                 into it as it uses no snapshots
*/

/* ds change change start */
select bom, wip
into lv_bom, lv_wip
from msc_coll_parameters
where instance_id = MSC_CL_COLLECTION.v_instance_id;

IF (((lv_bom = MSC_UTIL.SYS_YES) OR (lv_wip = MSC_UTIL.SYS_YES)) AND NOT MSC_CL_COLLECTION.v_is_legacy_refresh) THEN
   IF MSC_CL_COLLECTION.v_coll_prec.org_group_flag = MSC_UTIL.G_ALL_ORGANIZATIONS THEN
      MSC_CL_COLLECTION.DELETE_MSC_TABLE( 'MSC_DEPT_RES_INSTANCES', MSC_CL_COLLECTION.v_instance_id, -1);
   ELSE
      v_sub_str :=' AND ORGANIZATION_ID '||MSC_UTIL.v_in_org_str;
      MSC_CL_COLLECTION.DELETE_MSC_TABLE( 'MSC_DEPT_RES_INSTANCES', MSC_CL_COLLECTION.v_instance_id, -1,v_sub_str);  /* ds change change */
   END IF;
END IF;
/* ds change change end */


IF ((MSC_CL_COLLECTION.v_is_complete_refresh) OR (lv_res_partial_refresh)) THEN


  MSC_CL_COLLECTION.DELETE_MSC_TABLE( 'MSC_RESOURCE_GROUPS', MSC_CL_COLLECTION.v_instance_id, NULL); /*No Organization_id Column */

  IF MSC_CL_COLLECTION.v_coll_prec.org_group_flag = MSC_UTIL.G_ALL_ORGANIZATIONS THEN
    MSC_CL_COLLECTION.DELETE_MSC_TABLE( 'MSC_DEPARTMENT_RESOURCES', MSC_CL_COLLECTION.v_instance_id, -1);
    MSC_CL_COLLECTION.DELETE_MSC_TABLE( 'MSC_SIMULATION_SETS', MSC_CL_COLLECTION.v_instance_id,NULL);
  ELSE
    v_sub_str :=' AND ORGANIZATION_ID '||MSC_UTIL.v_in_org_str;
    MSC_CL_COLLECTION.DELETE_MSC_TABLE( 'MSC_DEPARTMENT_RESOURCES', MSC_CL_COLLECTION.v_instance_id, -1,v_sub_str);
    MSC_CL_COLLECTION.DELETE_MSC_TABLE( 'MSC_SIMULATION_SETS', MSC_CL_COLLECTION.v_instance_id,NULL,v_sub_str);
  END IF;

ELSE

IF (((lv_bom = MSC_UTIL.SYS_YES) OR (lv_wip = MSC_UTIL.SYS_YES)) AND NOT MSC_CL_COLLECTION.v_is_legacy_refresh) THEN

/* Bug 3041176 - Delete Only Department resources in NetChange */

 p_instance_id := MSC_CL_COLLECTION.v_instance_id;
 p_table_name := 'MSC_DEPARTMENT_RESOURCES';

 lv_pbs:= TO_NUMBER( FND_PROFILE.VALUE('MRP_PURGE_BATCH_SIZE'));

         lv_sql_stmt:= 'SELECT COUNT(*)'
                   ||' FROM '||p_table_name||' mdr, msc_trading_partners mtp'
                   ||' WHERE mdr.SR_INSTANCE_ID= :p_instance_id'
                   ||'   AND mdr.PLAN_ID= -1 '
                   ||'    AND mdr.LINE_FLAG = 2'
                   ||'    AND mdr.organization_id '|| MSC_UTIL.v_in_org_str
                   ||' AND mtp.sr_instance_id = :p_instance_id'
                   ||' AND mtp.sr_tp_id = mdr.organization_id'
                   ||' AND mtp.partner_type = 3'
                   ||' AND mtp.organization_type = 1';

          EXECUTE IMMEDIATE lv_sql_stmt
                       INTO lv_cnt
                      USING p_instance_id, p_instance_id;

          IF lv_pbs IS NULL OR
             lv_cnt < lv_pbs THEN  /* batch_size */

             lv_sql_stmt:=  'DELETE '||p_table_name||' mdr'
                         ||'  WHERE mdr.SR_INSTANCE_ID= :lv_instance_id'
                         ||'    AND mdr.PLAN_ID= -1 '
                         ||'    AND mdr.LINE_FLAG = 2'
                         ||'    AND mdr.organization_id '|| MSC_UTIL.v_in_org_str
                         ||'    AND mdr.organization_id = '
                         ||'        (SELECT mtp.sr_tp_id'
                         ||'         FROM msc_trading_partners mtp'
                         ||'         WHERE mtp.sr_instance_id = :lv_instance_id'
                         ||'         AND mtp.sr_tp_id = mdr.organization_id'
                         ||'         AND mtp.partner_type = 3'
                         ||'         AND mtp.organization_type = 1)';

             EXECUTE IMMEDIATE lv_sql_stmt
                         USING p_instance_id, p_instance_id;

             COMMIT;

          ELSE

             lv_sql_stmt:=   'DELETE '||p_table_name||' mdr'
                         ||'  WHERE mdr.SR_INSTANCE_ID= :p_instance_id '
                         ||'    AND mdr.PLAN_ID= -1 '
                         ||'    AND mdr.LINE_FLAG = 2'
                         ||'    AND mdr.organization_id '|| MSC_UTIL.v_in_org_str
                         ||'    AND ROWNUM < :lv_pbs'
                         ||'    AND mdr.organization_id = '
                         ||'        (SELECT mtp.sr_tp_id'
                         ||'         FROM msc_trading_partners mtp'
                         ||'         WHERE mtp.sr_instance_id = :p_instance_id'
                         ||'         AND mtp.sr_tp_id = mdr.organization_id'
                         ||'         AND mtp.partner_type = 3'
                         ||'         AND mtp.organization_type = 1)';

             LOOP

                EXECUTE IMMEDIATE lv_sql_stmt
                            USING p_instance_id, lv_pbs, p_instance_id;

                EXIT WHEN SQL%ROWCOUNT= 0;

                COMMIT;

             END LOOP;

          END IF;  /* batch_size */


   END IF; /* lv_bom */
END IF;

c_count:= 0;

FOR c_rec IN c1 LOOP

BEGIN
 lv_uom_class_type := 1;

 /* for the bug:2449749 removed the filter of sr_instance_id as the UOM code is global */

 SELECT DECODE(upper(uom_class),'WEIGHT',1 ,'VOLUME',2 , 1)
 INTO   lv_uom_class_type
 FROM   MSC_UNITS_OF_MEASURE
 WHERE  UOM_CODE = c_rec.unit_of_measure;
 -- AND    SR_INSTANCE_ID = c_rec.SR_INSTANCE_ID;

 EXCEPTION
  WHEN OTHERS THEN NULL;

END ;

BEGIN

IF (lv_res_incr_refresh) THEN
IF c_rec.DELETED_FLAG= MSC_UTIL.SYS_YES THEN

UPDATE MSC_DEPARTMENT_RESOURCES
   SET CAPACITY_UNITS= 0,
       MAX_RATE= 0,
       MIN_RATE= 0,
       REFRESH_NUMBER= MSC_CL_COLLECTION.v_last_collection_id,
       LAST_UPDATE_DATE= MSC_CL_COLLECTION.v_current_date,
       LAST_UPDATED_BY= MSC_CL_COLLECTION.v_current_user
WHERE PLAN_ID= -1
  AND DEPARTMENT_ID= c_rec.DEPARTMENT_ID
  AND ORGANIZATION_ID= c_rec.ORGANIZATION_ID
  AND RESOURCE_ID= c_rec.RESOURCE_ID
  AND SR_INSTANCE_ID= c_rec.SR_INSTANCE_ID;

ELSE
UPDATE MSC_DEPARTMENT_RESOURCES
SET
 RESOURCE_CODE= c_rec.RESOURCE_CODE,
 DEPARTMENT_CODE= c_rec.DEPARTMENT_CODE,
 DEPARTMENT_DESCRIPTION= c_rec.DEPARTMENT_DESCRIPTION,
 RESOURCE_DESCRIPTION= c_rec.RESOURCE_DESCRIPTION,
 DEPARTMENT_CLASS= c_rec.DEPARTMENT_CLASS,
 LINE_FLAG= c_rec.LINE_FLAG,
 CAPACITY_UNITS= c_rec.CAPACITY_UNITS,
 MAX_RATE= c_rec.MAX_RATE,
 MIN_RATE= c_rec.MIN_RATE,
 AGGREGATE_RESOURCE_ID= c_rec.AGGREGATED_RESOURCE_ID,
 AGGREGATE_RESOURCE_FLAG= c_rec.AGGREGATED_RESOURCE_FLAG,
 RESOURCE_GROUP_NAME= c_rec.RESOURCE_GROUP_NAME,
 RESOURCE_GROUP_CODE= c_rec.RESOURCE_GROUP_CODE,
 RESOURCE_BALANCE_FLAG= c_rec.RESOURCE_BALANCE_FLAG,
 BOTTLENECK_FLAG= c_rec.BOTTLENECK_FLAG,
 OWNING_DEPARTMENT_ID= c_rec.OWNING_DEPARTMENT_ID,
 OVERUTILIZED_PERCENT= c_rec.OVER_UTILIZED_PERCENT,
 UNDERUTILIZED_PERCENT= c_rec.UNDER_UTILIZED_PERCENT,
 RESOURCE_SHORTAGE_TYPE= c_rec.RESOURCE_SHORTAGE_TYPE,
 RESOURCE_EXCESS_TYPE= c_rec.RESOURCE_EXCESS_TYPE,
 RESOURCE_INCLUDE_FLAG= c_rec.RESOURCE_INCLUDE_FLAG,
 PLANNING_EXCEPTION_SET= c_rec.PLANNING_EXCEPTION_SET,
 USER_TIME_FENCE= c_rec.USER_TIME_FENCE,
 UTILIZATION= c_rec.UTILIZATION,
 EFFICIENCY= c_rec.EFFICIENCY,
 BATCHABLE_FLAG= c_rec.BATCHABLE_FLAG,
 BATCHING_WINDOW= c_rec.BATCHING_WINDOW,
 MIN_CAPACITY= c_rec.MIN_CAPACITY,
 MAX_CAPACITY= c_rec.MAX_CAPACITY,
 UNIT_OF_MEASURE= c_rec.UNIT_OF_MEASURE,
 UOM_CLASS_TYPE = lv_uom_class_type,
 CRITICAL_RESOURCE_FLAG= c_rec.CRITICAL_RESOURCE_FLAG,
 RESOURCE_TYPE= c_rec.RESOURCE_TYPE,
 DISABLE_DATE= c_rec.DISABLE_DATE,
 AVAILABLE_24_HOURS_FLAG= c_rec.AVAILABLE_24_HOURS_FLAG,
 CTP_FLAG= c_rec.CTP_FLAG,
 START_TIME= c_rec.START_TIME,
 STOP_TIME= c_rec.STOP_TIME,
 RESOURCE_COST= c_rec.RESOURCE_COST,
 RESOURCE_OVER_UTIL_COST= c_rec.RESOURCE_OVER_UTIL_COST,
 DEPT_OVERHEAD_COST= c_rec.DEPT_OVERHEAD_COST,
 ATP_RULE_ID=c_rec.ATP_RULE_ID,
 REFRESH_NUMBER= MSC_CL_COLLECTION.v_last_collection_id,
 LAST_UPDATE_DATE= MSC_CL_COLLECTION.v_current_date,
 LAST_UPDATED_BY= MSC_CL_COLLECTION.v_current_user,
 CAPACITY_TOLERANCE= c_rec.CAPACITY_TOLERANCE,   /* ds change change start*/
 CHARGEABLE_FLAG= c_rec.CHARGEABLE_FLAG,
 IDLE_TIME_TOLERANCE= c_rec.IDLE_TIME_TOLERANCE,
 BATCHING_PENALTY= c_rec.BATCHING_PENALTY,
 SCHEDULE_TO_INSTANCE= c_rec.SCHEDULE_TO_INSTANCE,
 LAST_KNOWN_SETUP= c_rec.LAST_KNOWN_SETUP	 ,
 SETUP_TIME_PERCENT= c_rec.SETUP_TIME_PERCENT,
 UTILIZATION_CHANGE_PERCENT= c_rec.UTILIZATION_CHANGE_PERCENT,
 SETUP_TIME_TYPE= c_rec.SETUP_TIME_TYPE,
 UTILIZATION_CHANGE_TYPE= c_rec.UTILIZATION_CHANGE_TYPE,
 SDS_SCHEDULING_WINDOW= c_rec.SDS_SCHEDULING_WINDOW /* ds change change end */
WHERE PLAN_ID= -1
  AND DEPARTMENT_ID= c_rec.DEPARTMENT_ID
  AND ORGANIZATION_ID= c_rec.ORGANIZATION_ID
  AND RESOURCE_ID= c_rec.RESOURCE_ID
  AND SR_INSTANCE_ID= c_rec.SR_INSTANCE_ID;

END IF;  -- DELETED_FLAG

END IF;  -- refresh mode

IF ((MSC_CL_COLLECTION.v_is_complete_refresh) OR (lv_res_partial_refresh)) OR
   (SQL%NOTFOUND) THEN
INSERT INTO MSC_DEPARTMENT_RESOURCES
( PLAN_ID,
  RESOURCE_CODE,
  DEPARTMENT_CODE,
  DEPARTMENT_DESCRIPTION,
  RESOURCE_DESCRIPTION,
  DEPARTMENT_CLASS,
  LINE_FLAG,
  CAPACITY_UNITS,
  MAX_RATE,
  MIN_RATE,
  AGGREGATE_RESOURCE_ID,
  AGGREGATE_RESOURCE_FLAG,
  RESOURCE_GROUP_NAME,
  RESOURCE_GROUP_CODE,
  RESOURCE_BALANCE_FLAG,
  BOTTLENECK_FLAG,
  DEPARTMENT_ID,
  OWNING_DEPARTMENT_ID,
  ORGANIZATION_ID,
  RESOURCE_ID,
  SR_INSTANCE_ID,
  OVERUTILIZED_PERCENT,
  UNDERUTILIZED_PERCENT,
  RESOURCE_SHORTAGE_TYPE,
  RESOURCE_EXCESS_TYPE,
  RESOURCE_INCLUDE_FLAG,
  PLANNING_EXCEPTION_SET,
  USER_TIME_FENCE,
  UTILIZATION,
  EFFICIENCY,
  BATCHABLE_FLAG,
  BATCHING_WINDOW,
  MIN_CAPACITY,
  MAX_CAPACITY,
  UNIT_OF_MEASURE,
  UOM_CLASS_TYPE ,
  CRITICAL_RESOURCE_FLAG,
  RESOURCE_TYPE,
  DISABLE_DATE,
  AVAILABLE_24_HOURS_FLAG,
  CTP_FLAG,
  START_TIME,
  STOP_TIME,
  RESOURCE_COST,
  RESOURCE_OVER_UTIL_COST,
  DEPT_OVERHEAD_COST,
  ATP_RULE_ID,
  CAPACITY_TOLERANCE,			  /* ds change change start*/
  CHARGEABLE_FLAG,
  IDLE_TIME_TOLERANCE,
  BATCHING_PENALTY,
  SCHEDULE_TO_INSTANCE,
  LAST_KNOWN_SETUP,
  SETUP_TIME_PERCENT,
  UTILIZATION_CHANGE_PERCENT,
  SETUP_TIME_TYPE,
  UTILIZATION_CHANGE_TYPE ,
  SDS_SCHEDULING_WINDOW,  /* ds change change end */
  REFRESH_NUMBER,
  LAST_UPDATE_DATE,
  LAST_UPDATED_BY,
  CREATION_DATE,
  CREATED_BY)
VALUES
( -1,
  c_rec.RESOURCE_CODE,
  c_rec.DEPARTMENT_CODE,
  c_rec.DEPARTMENT_DESCRIPTION,
  c_rec.RESOURCE_DESCRIPTION,
  c_rec.DEPARTMENT_CLASS,
  c_rec.LINE_FLAG,
  c_rec.CAPACITY_UNITS,
  c_rec.MAX_RATE,
  c_rec.MIN_RATE,
  c_rec.AGGREGATED_RESOURCE_ID,
  c_rec.AGGREGATED_RESOURCE_FLAG,
  c_rec.RESOURCE_GROUP_NAME,
  c_rec.RESOURCE_GROUP_CODE,
  c_rec.RESOURCE_BALANCE_FLAG,
  c_rec.BOTTLENECK_FLAG,
  c_rec.DEPARTMENT_ID,
  c_rec.OWNING_DEPARTMENT_ID,
  c_rec.ORGANIZATION_ID,
  c_rec.RESOURCE_ID,
  c_rec.SR_INSTANCE_ID,
  c_rec.OVER_UTILIZED_PERCENT,
  c_rec.UNDER_UTILIZED_PERCENT,
  c_rec.RESOURCE_SHORTAGE_TYPE,
  c_rec.RESOURCE_EXCESS_TYPE,
  c_rec.RESOURCE_INCLUDE_FLAG,
  c_rec.PLANNING_EXCEPTION_SET,
  c_rec.USER_TIME_FENCE,
  c_rec.UTILIZATION,
  c_rec.EFFICIENCY,
  c_rec.BATCHABLE_FLAG,
  c_rec.BATCHING_WINDOW,
  c_rec.MIN_CAPACITY,
  c_rec.MAX_CAPACITY,
  c_rec.UNIT_OF_MEASURE,
  lv_uom_class_type ,
  c_rec.CRITICAL_RESOURCE_FLAG,
  c_rec.RESOURCE_TYPE,
  c_rec.DISABLE_DATE,
  c_rec.AVAILABLE_24_HOURS_FLAG,
  c_rec.CTP_FLAG,
  c_rec.START_TIME,
  c_rec.STOP_TIME,
  c_rec.RESOURCE_COST,
  c_rec.RESOURCE_OVER_UTIL_COST,
  c_rec.DEPT_OVERHEAD_COST,
  c_rec.ATP_RULE_ID,
  c_rec.CAPACITY_TOLERANCE,	/* ds change change start*/
  c_rec.CHARGEABLE_FLAG,
  c_rec.IDLE_TIME_TOLERANCE,
  c_rec.BATCHING_PENALTY,
  c_rec.SCHEDULE_TO_INSTANCE,
  c_rec.LAST_KNOWN_SETUP,
  c_rec.SETUP_TIME_PERCENT,
  c_rec.UTILIZATION_CHANGE_PERCENT,
  c_rec.SETUP_TIME_TYPE,
  c_rec.UTILIZATION_CHANGE_TYPE,
  c_rec.SDS_SCHEDULING_WINDOW,
   /* ds change change end */
  MSC_CL_COLLECTION.v_last_collection_id,
  MSC_CL_COLLECTION.v_current_date,
  MSC_CL_COLLECTION.v_current_user,
  MSC_CL_COLLECTION.v_current_date,
  MSC_CL_COLLECTION.v_current_user );

END IF;

  c_count:= c_count+1;

  IF c_count> MSC_CL_COLLECTION.PBS THEN
     COMMIT;
     c_count:= 0;
  END IF;

EXCEPTION

   WHEN OTHERS THEN

    IF SQLCODE IN (-01683,-01653,-01650,-01562) THEN

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '========================================');
      FND_MESSAGE.SET_NAME('MSC', 'MSC_OL_DATA_ERR_HEADER');
      FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_RESOURCE');
      FND_MESSAGE.SET_TOKEN('TABLE', 'MSC_DEPARTMENT_RESOURCES');
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, SQLERRM);
      RAISE;

    ELSE
      MSC_CL_COLLECTION.v_warning_flag := MSC_UTIL.SYS_YES;

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '========================================');
      FND_MESSAGE.SET_NAME('MSC', 'MSC_OL_DATA_ERR_HEADER');
      FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_RESOURCE');
      FND_MESSAGE.SET_TOKEN('TABLE', 'MSC_DEPARTMENT_RESOURCES');
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'ORGANIZATION_CODE');
      FND_MESSAGE.SET_TOKEN('VALUE',
                            MSC_GET_NAME.ORG_CODE( c_rec.ORGANIZATION_ID,
                                                   MSC_CL_COLLECTION.v_instance_id));
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'DEPARTMENT_CODE');
      FND_MESSAGE.SET_TOKEN('VALUE', c_rec.DEPARTMENT_CODE);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'RESOURCE_CODE');
      FND_MESSAGE.SET_TOKEN('VALUE', c_rec.RESOURCE_CODE);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, SQLERRM);
    END IF;

END;

END LOOP;

COMMIT;

 /* ds change change start */
c_count := 0;

FOR c_rec IN dept_res_inst LOOP
  /* for dept resource instance we don't have snapshot
   so in increment its alwasy full refresh */
  BEGIN
    -- IF ((MSC_CL_COLLECTION.v_is_complete_refresh) OR (lv_res_partial_refresh)) THEN

	INSERT INTO MSC_DEPT_RES_INSTANCES
	( PLAN_ID,
	  DEPT_RESOURCE_INST_ID ,
  	  RESOURCE_ID,
	  RES_INSTANCE_ID,
	  DEPARTMENT_ID,
  	  ORGANIZATION_ID,
  	  SERIAL_NUMBER,
  	  EQUIPMENT_ITEM_ID,
  	  SR_INSTANCE_ID,
    	  LAST_KNOWN_SETUP,
	  EFFECTIVE_START_DATE,
	  EFFECTIVE_END_DATE,
  	  REFRESH_NUMBER,
  	  LAST_UPDATE_DATE,
  	  LAST_UPDATED_BY,
  	  CREATION_DATE,
  	  CREATED_BY)
	VALUES
	( -1,
        MSC_DEPT_RES_INSTANCES_S.NEXTVAL,
  	c_rec.RESOURCE_ID,
  	c_rec.RES_INSTANCE_ID,
  	c_rec.DEPARTMENT_ID,
  	c_rec.ORGANIZATION_ID,
  	c_rec.SERIAL_NUMBER,
  	c_rec.EQUIPMENT_ITEM_ID,
  	c_rec.SR_INSTANCE_ID,
  	c_rec.LAST_KNOWN_SETUP,
  	c_rec.EFFECTIVE_START_DATE,
  	c_rec.EFFECTIVE_END_DATE,
	MSC_CL_COLLECTION.v_last_collection_id,
  	MSC_CL_COLLECTION.v_current_date,
  	MSC_CL_COLLECTION.v_current_user,
  	MSC_CL_COLLECTION.v_current_date,
  	MSC_CL_COLLECTION.v_current_user );
  --END IF;

      c_count:= c_count+1;

  IF c_count> MSC_CL_COLLECTION.PBS THEN
     COMMIT;
     c_count:= 0;
  END IF;

EXCEPTION
  WHEN OTHERS THEN

    IF SQLCODE IN (-01683,-01653,-01650,-01562) THEN

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '========================================');
      FND_MESSAGE.SET_NAME('MSC', 'MSC_OL_DATA_ERR_HEADER');
      FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_RESOURCE');
      FND_MESSAGE.SET_TOKEN('TABLE', 'MSC_DEPT_RES_INSTANCES');
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, SQLERRM);
      RAISE;

    ELSE
      MSC_CL_COLLECTION.v_warning_flag := MSC_UTIL.SYS_YES;

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '========================================');
      FND_MESSAGE.SET_NAME('MSC', 'MSC_OL_DATA_ERR_HEADER');
      FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_RESOURCE');
      FND_MESSAGE.SET_TOKEN('TABLE', 'MSC_DEPT_RES_INSTANCES');
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'ORGANIZATION_ID');
      FND_MESSAGE.SET_TOKEN('VALUE',c_rec.ORGANIZATION_ID);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'DEPARTMENT_ID');
      FND_MESSAGE.SET_TOKEN('VALUE', c_rec.DEPARTMENT_ID);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'RESOURCE_ID');
      FND_MESSAGE.SET_TOKEN('VALUE', c_rec.RESOURCE_ID);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'RES_INSTANCE_ID');
      FND_MESSAGE.SET_TOKEN('VALUE', c_rec.RES_INSTANCE_ID);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, SQLERRM);
    END IF;

END;

END LOOP; /*c_rec IN dept_res_inst LOOP */

COMMIT;

/* ds change change end */


c_count:= 0;

FOR c_rec IN c3 LOOP

BEGIN

IF (lv_res_incr_refresh) THEN

UPDATE MSC_SIMULATION_SETS
SET
 DESCRIPTION= c_rec.DESCRIPTION,
 USE_IN_WIP_FLAG= c_rec.USE_IN_WIP_FLAG,
 REFRESH_NUMBER= MSC_CL_COLLECTION.v_last_collection_id,
 LAST_UPDATE_DATE= MSC_CL_COLLECTION.v_current_date,
 LAST_UPDATED_BY= MSC_CL_COLLECTION.v_current_user
WHERE ORGANIZATION_ID= c_rec.ORGANIZATION_ID
  AND SIMULATION_SET= c_rec.SIMULATION_SET
  AND SR_INSTANCE_ID= c_rec.SR_INSTANCE_ID;

END IF;

IF ((MSC_CL_COLLECTION.v_is_complete_refresh) OR (lv_res_partial_refresh)) OR SQL%NOTFOUND THEN

INSERT INTO MSC_SIMULATION_SETS
( ORGANIZATION_ID,
  SIMULATION_SET,
  DESCRIPTION,
  USE_IN_WIP_FLAG,
  SR_INSTANCE_ID,
  REFRESH_NUMBER,
  LAST_UPDATE_DATE,
  LAST_UPDATED_BY,
  CREATION_DATE,
  CREATED_BY)
VALUES
( c_rec.ORGANIZATION_ID,
  c_rec.SIMULATION_SET,
  c_rec.DESCRIPTION,
  c_rec.USE_IN_WIP_FLAG,
  c_rec.SR_INSTANCE_ID,
  MSC_CL_COLLECTION.v_last_collection_id,
  MSC_CL_COLLECTION.v_current_date,
  MSC_CL_COLLECTION.v_current_user,
  MSC_CL_COLLECTION.v_current_date,
  MSC_CL_COLLECTION.v_current_user );

END IF;

  c_count:= c_count+1;

  IF c_count> MSC_CL_COLLECTION.PBS THEN
     COMMIT;
     c_count:= 0;
  END IF;

EXCEPTION
   WHEN OTHERS THEN

    IF SQLCODE IN (-01683,-01653,-01650,-01562) THEN

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '========================================');
      FND_MESSAGE.SET_NAME('MSC', 'MSC_OL_DATA_ERR_HEADER');
      FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_RESOURCE');
      FND_MESSAGE.SET_TOKEN('TABLE', 'MSC_SIMULATION_SETS');
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, SQLERRM);
      RAISE;

    ELSE
      MSC_CL_COLLECTION.v_warning_flag := MSC_UTIL.SYS_YES;

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '========================================');
      FND_MESSAGE.SET_NAME('MSC', 'MSC_OL_DATA_ERR_HEADER');
      FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_RESOURCE');
      FND_MESSAGE.SET_TOKEN('TABLE', 'MSC_SIMULATION_SETS');
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'ORGANIZATION_CODE');
      FND_MESSAGE.SET_TOKEN('VALUE',
                            MSC_GET_NAME.ORG_CODE( c_rec.ORGANIZATION_ID,
                                                   MSC_CL_COLLECTION.v_instance_id));
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'SIMULATION_SET');
      FND_MESSAGE.SET_TOKEN('VALUE', c_rec.SIMULATION_SET);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, SQLERRM);
    END IF;

END;

END LOOP;

COMMIT;

IF ((MSC_CL_COLLECTION.v_is_complete_refresh) OR (lv_res_partial_refresh)) THEN

c_count:= 0;

FOR c_rec IN c4 LOOP

BEGIN

INSERT INTO MSC_RESOURCE_GROUPS
( GROUP_CODE,
  MEANING,
  DESCRIPTION,
  FROM_DATE,
  TO_DATE,
  ENABLED_FLAG,
  SR_INSTANCE_ID,
  LAST_UPDATE_DATE,
  LAST_UPDATED_BY,
  CREATION_DATE,
  CREATED_BY)
VALUES
( c_rec.GROUP_CODE,
  c_rec.MEANING,
  c_rec.DESCRIPTION,
  c_rec.FROM_DATE,
  c_rec.TO_DATE,
  c_rec.ENABLED_FLAG,
  MSC_CL_COLLECTION.v_instance_id,
  MSC_CL_COLLECTION.v_current_date,
  MSC_CL_COLLECTION.v_current_user,
  MSC_CL_COLLECTION.v_current_date,
  MSC_CL_COLLECTION.v_current_user );

  c_count:= c_count+1;

  IF c_count> MSC_CL_COLLECTION.PBS THEN
     COMMIT;
     c_count:= 0;
  END IF;

EXCEPTION

   WHEN OTHERS THEN

    IF SQLCODE IN (-01683,-01653,-01650,-01562) THEN

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '========================================');
      FND_MESSAGE.SET_NAME('MSC', 'MSC_OL_DATA_ERR_HEADER');
      FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_RESOURCE');
      FND_MESSAGE.SET_TOKEN('TABLE', 'MSC_RESOURCE_GROUPS');
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, SQLERRM);
      RAISE;

    ELSE
      MSC_CL_COLLECTION.v_warning_flag := MSC_UTIL.SYS_YES;

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, '========================================');
      FND_MESSAGE.SET_NAME('MSC', 'MSC_OL_DATA_ERR_HEADER');
      FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_RESOURCE');
      FND_MESSAGE.SET_TOKEN('TABLE', 'MSC_RESOURCE_GROUPS');
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      FND_MESSAGE.SET_NAME('MSC','MSC_OL_DATA_ERR_DETAIL');
      FND_MESSAGE.SET_TOKEN('COLUMN', 'GROUP_CODE');
      FND_MESSAGE.SET_TOKEN('VALUE', c_rec.GROUP_CODE);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, FND_MESSAGE.GET);

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_STATUS, SQLERRM);
    END IF;

END;

END LOOP;

COMMIT;

END IF;

   END LOAD_RESOURCE;



END MSC_CL_BOM_ODS_LOAD;

/
