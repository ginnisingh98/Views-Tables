--------------------------------------------------------
--  DDL for Package Body JE_JEPLPSSR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JE_JEPLPSSR_XMLP_PKG" AS
/* $Header: JEPLPSSRB.pls 120.2 2008/01/11 08:02:07 abraghun noship $ */
  FUNCTION GET_BASE_CURR_DATA RETURN BOOLEAN IS
    BASE_CURR AP_SYSTEM_PARAMETERS.BASE_CURRENCY_CODE%TYPE;
    PREC FND_CURRENCIES_VL.PRECISION%TYPE;
    MIN_AU FND_CURRENCIES_VL.MINIMUM_ACCOUNTABLE_UNIT%TYPE;
    DESCR FND_CURRENCIES_VL.DESCRIPTION%TYPE;
  BEGIN
    BASE_CURR := '';
    PREC := 0;
    MIN_AU := 0;
    DESCR := '';
    SELECT
      P.BASE_CURRENCY_CODE,
      C.PRECISION,
      C.MINIMUM_ACCOUNTABLE_UNIT,
      C.DESCRIPTION
    INTO BASE_CURR,PREC,MIN_AU,DESCR
    FROM
      AP_SYSTEM_PARAMETERS P,
      FND_CURRENCIES_VL C
    WHERE P.BASE_CURRENCY_CODE = C.CURRENCY_CODE;
    C_BASE_CURRENCY_CODE := BASE_CURR;
    C_BASE_PRECISION := PREC;
    C_BASE_MIN_ACCT_UNIT := MIN_AU;
    C_BASE_DESCRIPTION := DESCR;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_BASE_CURR_DATA;

  FUNCTION GET_COVER_PAGE_VALUES RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COVER_PAGE_VALUES;

  FUNCTION GET_NLS_STRINGS RETURN BOOLEAN IS
    NLS_VOID AP_LOOKUP_CODES.DISPLAYED_FIELD%TYPE;
    NLS_NA AP_LOOKUP_CODES.DISPLAYED_FIELD%TYPE;
    NLS_ALL AP_LOOKUP_CODES.DISPLAYED_FIELD%TYPE;
    NLS_YES FND_LOOKUPS.MEANING%TYPE;
    NLS_NO FND_LOOKUPS.MEANING%TYPE;
  BEGIN
    SELECT
      LY.MEANING,
      LN.MEANING,
      L1.DISPLAYED_FIELD,
      L2.DISPLAYED_FIELD,
      L3.DISPLAYED_FIELD
    INTO NLS_YES,NLS_NO,NLS_ALL,NLS_VOID,NLS_NA
    FROM
      FND_LOOKUPS LY,
      FND_LOOKUPS LN,
      AP_LOOKUP_CODES L1,
      AP_LOOKUP_CODES L2,
      AP_LOOKUP_CODES L3
    WHERE LY.LOOKUP_TYPE = 'YES_NO'
      AND LY.LOOKUP_CODE = 'Y'
      AND LN.LOOKUP_TYPE = 'YES_NO'
      AND LN.LOOKUP_CODE = 'N'
      AND L1.LOOKUP_TYPE = 'NLS REPORT PARAMETER'
      AND L1.LOOKUP_CODE = 'ALL'
      AND L2.LOOKUP_TYPE = 'NLS TRANSLATION'
      AND L2.LOOKUP_CODE = 'VOID'
      AND L3.LOOKUP_TYPE = 'NLS REPORT PARAMETER'
      AND L3.LOOKUP_CODE = 'NA';
    C_NLS_YES := NLS_YES;
    C_NLS_NO := NLS_NO;
    C_NLS_ALL := NLS_ALL;
    C_NLS_VOID := NLS_VOID;
    C_NLS_NA := NLS_NA;
    FND_MESSAGE.SET_NAME('JE'
                        ,'JE_ALL_DATA_NOT_FOUND');
    C_NLS_NO_DATA_EXISTS := SUBSTR(FND_MESSAGE.GET
                                  ,1
                                  ,40);
    C_NLS_NO_DATA_EXISTS := C_NLS_NO_DATA_EXISTS;
    FND_MESSAGE.SET_NAME('JE'
                        ,'JE_ALL_END_OF_REPORT');
    C_NLS_END_OF_REPORT := SUBSTR(FND_MESSAGE.GET
                                 ,1
                                 ,40);
    C_NLS_END_OF_REPORT := C_NLS_END_OF_REPORT;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_NLS_STRINGS;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      INIT_FAILURE EXCEPTION;
    BEGIN
      C_REPORT_START_DATE := SYSDATE;
      CP_REPORT_CURRENCY := P_REPORT_CURRENCY;
      CP_SUPPLIER_NAME_FROM := P_SUPPLIER_NAME_FROM;
      CP_SUPPLIER_NAME_TO := P_SUPPLIER_NAME_TO;
      CP_POSTED_FLAG := P_POSTED;
      CP_APPROVED_FLAG := P_APPROVED;
      CP_PARTIAL_LEDGER_MSG := P_PARTIAL_LEDGER_MSG;
      BEGIN
        SELECT
          USER_CONCURRENT_PROGRAM_NAME
        INTO CP_TITLE
        FROM
          FND_CONCURRENT_REQUESTS R,
          FND_CONCURRENT_PROGRAMS_VL P
        WHERE R.REQUEST_ID = P_CONC_REQUEST_ID
          AND R.CONCURRENT_PROGRAM_ID = P.CONCURRENT_PROGRAM_ID
          AND R.PROGRAM_APPLICATION_ID = P.APPLICATION_ID;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          CP_TITLE := 'Polish Supplier Statement';
      END;
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
      IF (P_DEBUG_SWITCH in ('y','Y')) THEN
        /*SRW.MESSAGE('1'
                   ,'After SRWINIT')*/NULL;
      END IF;
      IF (P_TRACE_SWITCH in ('y','Y')) THEN
        EXECUTE IMMEDIATE
          'alter session set sql_trace TRUE';
      END IF;
      SELECT
        MEANING
      INTO P_REPORT_CURRENCY_DISP
      FROM
        FND_LOOKUPS
      WHERE LOOKUP_TYPE = 'JGZZ_CURRENCY_TYPE'
        AND LOOKUP_CODE = P_REPORT_CURRENCY;
      CP_REPORT_CURR_DISP := P_REPORT_CURRENCY_DISP;
      IF (GET_NLS_STRINGS <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH in ('y','Y')) THEN
        /*SRW.MESSAGE('3'
                   ,'After Get_NLS_Strings')*/NULL;
      END IF;
      IF (GET_BASE_CURR_DATA <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH in ('y','Y')) THEN
        /*SRW.MESSAGE('4'
                   ,'After Get_Base_Curr_Data')*/NULL;
      END IF;
      IF (CUSTOM_INIT() <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH in ('y','Y')) THEN
        /*SRW.MESSAGE('7'
                   ,'After Custom_Init')*/NULL;
      END IF;
      IF (P_DEBUG_SWITCH in ('y','Y')) THEN
        /*SRW.BREAK*/NULL;
      END IF;
      IF P_DEBUG_SWITCH = 'Y' THEN
        /*SRW.MESSAGE(105
                   ,'PWHERE: ' || P_WHERE)*/NULL;
      END IF;
      P_WHERE := ' ';
      IF P_APPROVED = 'Y' THEN
        P_WHERE := ' AND aid.match_status_flag IN (' || '''' || 'A' || '''' || ',' || '''' || 'T' || '''' || ')';
      END IF;
      IF P_DEBUG_SWITCH = 'Y' THEN
        /*SRW.MESSAGE(105
                   ,'PWHERE: ' || P_WHERE)*/NULL;
      END IF;
      P_WHERE_CAT := ' ';
      IF P_DOCUMENT_CATEGORY IS NOT NULL THEN
        P_WHERE_CAT := ' AND ltrim(rtrim(ai.doc_category_code)) = ' || '''' || P_DOCUMENT_CATEGORY || '''';
        CP_DOCUMENT_CATEGORY := P_DOCUMENT_CATEGORY;
      END IF;
      BEGIN
        SELECT
          GLP.NAME
        INTO P_LEDGER_NAME
        FROM
          GL_LEDGERS_PUBLIC_V GLP
        WHERE GLP.LEDGER_ID = P_LEDGER_ID;
        CP_LEDGER_NAME := P_LEDGER_NAME;
      EXCEPTION
        WHEN OTHERS THEN
          /*SRW.MESSAGE(002
                     ,'Get Ledger Name has failed')*/NULL;
          /*SRW.MESSAGE(003
                     ,SQLERRM)*/NULL;
          /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      END;
	 LP_START_DATE:=P_START_DATE;
	 LP_END_DATE:=P_END_DATE;
      RETURN (TRUE);
    EXCEPTION
      WHEN OTHERS THEN
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;

    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        /*SRW.MESSAGE('20'
                   ,'After SRWEXIT')*/NULL;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION CF_REF_TRANS_DATEFORMULA(TRANS_TYPE IN VARCHAR2
                                   ,TRANS_ID IN NUMBER) RETURN DATE IS
    V_INVOICE_ID AP_INVOICES.INVOICE_ID%TYPE;
    V_INVOICE_DATE AP_INVOICES.INVOICE_NUM%TYPE;
    V_INVOICE_NUM AP_INVOICES.INVOICE_NUM%TYPE;
    V_CHECK_ID AP_CHECKS.CHECK_ID%TYPE;
    V_CHECK_DATE AP_CHECKS.CHECK_DATE%TYPE;
    V_CHECK_NUMBER AP_CHECKS.CHECK_NUMBER%TYPE;
    V_TRANS_TYPE VARCHAR2(25);
    CURSOR C_INV_REL_AWT IS
      SELECT
        INVOICE_DATE,
        INVOICE_NUM
      FROM
        AP_INVOICES
      WHERE INVOICE_ID = V_INVOICE_ID;
    CURSOR C_PMT_REL_AWT IS
      SELECT
        CHECK_DATE,
        CHECK_NUMBER
      FROM
        AP_CHECKS
      WHERE CHECK_ID = V_CHECK_ID;
  BEGIN
    IF TRANS_TYPE = 'AWT' THEN
      IF CP_CREATE_AWT_DISTS_TYPE = 'PAYMENT' THEN
        V_CHECK_ID := TRANS_ID;
        OPEN C_PMT_REL_AWT;
        FETCH C_PMT_REL_AWT
         INTO V_CHECK_DATE,V_CHECK_NUMBER;
        CLOSE C_PMT_REL_AWT;
        CP_REF_TRANS_NUM := V_CHECK_NUMBER;
        BEGIN
          SELECT
            L.MEANING
          INTO V_TRANS_TYPE
          FROM
            FND_LOOKUPS L
          WHERE L.LOOKUP_CODE = 'PMT'
            AND L.LOOKUP_TYPE = 'JLZZ_SUPPLIER_TRX_TYPE'
            AND NVL(L.START_DATE_ACTIVE
             ,SYSDATE) <= sysdate
            AND NVL(L.END_DATE_ACTIVE
             ,SYSDATE) >= sysdate
            AND L.ENABLED_FLAG = 'Y';
        EXCEPTION
          WHEN OTHERS THEN
            CP_REF_TRANS_TYPE := NULL;
        END;
        CP_REF_TRANS_TYPE := V_TRANS_TYPE;
        RETURN (V_CHECK_DATE);
      ELSIF CP_CREATE_AWT_DISTS_TYPE = 'APPROVAL' THEN
        V_INVOICE_ID := TRANS_ID;
        OPEN C_INV_REL_AWT;
        FETCH C_INV_REL_AWT
         INTO V_INVOICE_DATE,V_INVOICE_NUM;
        CLOSE C_INV_REL_AWT;
        CP_REF_TRANS_NUM := V_INVOICE_NUM;
        BEGIN
          SELECT
            L.MEANING
          INTO V_TRANS_TYPE
          FROM
            FND_LOOKUPS L
          WHERE L.LOOKUP_CODE = 'INV'
            AND L.LOOKUP_TYPE = 'JLZZ_SUPPLIER_TRX_TYPE'
            AND NVL(L.START_DATE_ACTIVE
             ,SYSDATE) <= sysdate
            AND NVL(L.END_DATE_ACTIVE
             ,SYSDATE) >= sysdate
            AND L.ENABLED_FLAG = 'Y';
        EXCEPTION
          WHEN OTHERS THEN
            CP_REF_TRANS_TYPE := NULL;
        END;
        CP_REF_TRANS_TYPE := V_TRANS_TYPE;
        RETURN (V_INVOICE_DATE);
      ELSE
        CP_REF_TRANS_NUM := NULL;
        CP_REF_TRANS_TYPE := NULL;
        RETURN (NULL);
      END IF;
    ELSE
      CP_REF_TRANS_NUM := NULL;
      CP_REF_TRANS_TYPE := NULL;
      RETURN (NULL);
    END IF;
    RETURN NULL;
  END CF_REF_TRANS_DATEFORMULA;

  FUNCTION CF_AMOUNT_CURRENCYFORMULA(TRANS_AMT IN NUMBER
                                    ,TRANS_BASE_AMT IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF P_REPORT_CURRENCY = 'T' THEN
      RETURN (TRANS_AMT);
    ELSE
      RETURN (ROUND(TRANS_BASE_AMT
                  ,C_BASE_PRECISION));
    END IF;
    RETURN NULL;
  END CF_AMOUNT_CURRENCYFORMULA;

  FUNCTION CF_AMOUNT_DUE_CURRENCYFORMULA(TRANS_TYPE IN VARCHAR2
                                        ,TRANS_ID IN NUMBER
                                        ,TRANS_AMT IN NUMBER
                                        ,TRANS_BASE_AMT IN NUMBER
                                        ,SECTION IN VARCHAR2
                                        ,CF_TRX_PRECISION IN NUMBER) RETURN NUMBER IS
    V_REMAINING_AMOUNT NUMBER;
    V_AMOUNT_PAID NUMBER;
    V_BASE_AMOUNT_PAID NUMBER;
    V_PMT_AMOUNT NUMBER;
    V_PMT_BASE_AMOUNT NUMBER;
    V_INVOICE_ID AP_INVOICES.INVOICE_ID%TYPE;
    V_RATE NUMBER;
    V_AMOUNT NUMBER;
    V_PAYMENT_STATUS_FLAG VARCHAR2(1);
    V_DISC_AMT NUMBER;
    V_EXCH_RATE NUMBER;
    CURSOR C_PRPMT IS
      SELECT
        SUM(NVL(AID.PREPAY_AMOUNT_REMAINING
               ,AID.AMOUNT)) * - 1
      FROM
        AP_INVOICE_DISTRIBUTIONS AID
      WHERE AID.INVOICE_ID = V_INVOICE_ID
        AND AID.LINE_TYPE_LOOKUP_CODE = 'ITEM'
        AND AID.POSTED_FLAG = 'Y';
    CURSOR C_INVOICE IS
      SELECT
        NVL(SUM(AID.AMOUNT)
           ,0) * - 1,
        NVL(SUM(NVL(AID.BASE_AMOUNT
                   ,AID.AMOUNT))
           ,0) * - 1
      FROM
        AP_INVOICE_DISTRIBUTIONS AID
      WHERE AID.INVOICE_ID = V_INVOICE_ID
        AND ( AID.LINE_TYPE_LOOKUP_CODE = 'AWT'
      OR AID.LINE_TYPE_LOOKUP_CODE = 'PREPAY' )
        AND AID.POSTED_FLAG = 'Y';
    CURSOR C_PMT IS
      SELECT
        NVL(SUM(IP.AMOUNT)
           ,0),
        NVL(SUM(NVL(IP.INVOICE_BASE_AMOUNT
                   ,IP.AMOUNT))
           ,0)
      FROM
        AP_INVOICE_PAYMENTS IP
      WHERE IP.INVOICE_ID = V_INVOICE_ID
        AND IP.POSTED_FLAG = 'Y';
    CURSOR C_DISC_AMT IS
      SELECT
        NVL(DISCOUNT_AMOUNT_TAKEN
           ,0),
        NVL(EXCHANGE_RATE
           ,1)
      FROM
        AP_INVOICES AI
      WHERE AI.INVOICE_ID = V_INVOICE_ID;
  BEGIN
    IF TRANS_TYPE = 'INV' THEN
      V_INVOICE_ID := TRANS_ID;
      OPEN C_INVOICE;
      FETCH C_INVOICE
       INTO V_AMOUNT_PAID,V_BASE_AMOUNT_PAID;
      IF C_INVOICE%NOTFOUND THEN
        V_AMOUNT_PAID := 0;
        V_BASE_AMOUNT_PAID := 0;
      END IF;
      CLOSE C_INVOICE;
      OPEN C_PMT;
      FETCH C_PMT
       INTO V_PMT_AMOUNT,V_PMT_BASE_AMOUNT;
      IF C_PMT%NOTFOUND THEN
        V_PMT_AMOUNT := 0;
        V_PMT_BASE_AMOUNT := 0;
      END IF;
      CLOSE C_PMT;
      OPEN C_DISC_AMT;
      FETCH C_DISC_AMT
       INTO V_DISC_AMT,V_EXCH_RATE;
      CLOSE C_DISC_AMT;
      IF P_REPORT_CURRENCY = 'T' THEN
        RETURN (TRANS_AMT - (V_AMOUNT_PAID + V_PMT_AMOUNT) - V_DISC_AMT);
      ELSE
        V_AMOUNT := TRANS_BASE_AMT - (V_BASE_AMOUNT_PAID + V_PMT_BASE_AMOUNT) - (V_DISC_AMT * V_EXCH_RATE);
        RETURN (V_AMOUNT);
      END IF;
    ELSIF TRANS_TYPE = 'PRPMT' THEN
      IF SECTION = 'APPLIED' THEN
        RETURN (NULL);
      ELSE
        V_INVOICE_ID := TRANS_ID;
        OPEN C_PRPMT;
        FETCH C_PRPMT
         INTO V_REMAINING_AMOUNT;
        IF C_PRPMT%NOTFOUND THEN
          V_REMAINING_AMOUNT := 0;
        END IF;
        CLOSE C_PRPMT;
        IF P_REPORT_CURRENCY = 'T' THEN
          RETURN (V_REMAINING_AMOUNT);
        ELSE
          V_RATE := NVL(TRANS_BASE_AMT
                       ,0) / NVL(TRANS_AMT
                       ,999999);
          V_AMOUNT := ROUND(V_REMAINING_AMOUNT * V_RATE
                           ,CF_TRX_PRECISION);
          RETURN (V_AMOUNT);
        END IF;
      END IF;
    ELSE
      RETURN (NULL);
    END IF;
    RETURN NULL;
  END CF_AMOUNT_DUE_CURRENCYFORMULA;

  FUNCTION CF_SUPP_BBFORMULA(VENDOR_ID IN NUMBER
                            ,GROUP_CURRENCY IN VARCHAR2
                            ,CF_GROUP_PRECISION IN NUMBER) RETURN NUMBER IS
    L_BALANCE NUMBER;
    L_SOB NUMBER;
  BEGIN
    SELECT
      SET_OF_BOOKS_ID
    INTO L_SOB
    FROM
      AP_SYSTEM_PARAMETERS;
    IF P_REPORT_CURRENCY = 'T' THEN
      SELECT
        NVL(SUM(AEL.ENTERED_CR)
           ,0) - NVL(SUM(AEL.ENTERED_DR)
           ,0)
      INTO L_BALANCE
      FROM
        AP_AE_LINES_ALL AEL,
        AP_AE_HEADERS_ALL AEH
      WHERE AEL.AE_LINE_TYPE_CODE = 'LIABILITY'
        AND AEH.SET_OF_BOOKS_ID = L_SOB
        AND AEL.AE_HEADER_ID = AEH.AE_HEADER_ID
        AND AEH.ACCOUNTING_DATE < P_START_DATE
        AND AEL.THIRD_PARTY_ID = VENDOR_ID
        AND AEL.CURRENCY_CODE = GROUP_CURRENCY;
    ELSE
      SELECT
        NVL(SUM(AEL.ACCOUNTED_CR)
           ,0) - NVL(SUM(AEL.ACCOUNTED_DR)
           ,0)
      INTO L_BALANCE
      FROM
        AP_AE_LINES_ALL AEL,
        AP_AE_HEADERS_ALL AEH
      WHERE AEL.AE_LINE_TYPE_CODE = 'LIABILITY'
        AND AEH.SET_OF_BOOKS_ID = L_SOB
        AND AEL.AE_HEADER_ID = AEH.AE_HEADER_ID
        AND AEH.ACCOUNTING_DATE < P_START_DATE
        AND AEL.THIRD_PARTY_ID = VENDOR_ID;
    END IF;
    RETURN (ROUND(L_BALANCE
                ,CF_GROUP_PRECISION));
  END CF_SUPP_BBFORMULA;

  FUNCTION CF_GROUP_PRECISIONFORMULA(GROUP_CURRENCY IN VARCHAR2) RETURN NUMBER IS
    PREC FND_CURRENCIES.PRECISION%TYPE;
  BEGIN
    IF GROUP_CURRENCY = C_BASE_CURRENCY_CODE THEN
      RETURN (C_BASE_PRECISION);
    ELSE
      PREC := 0;
      SELECT
        C.PRECISION
      INTO PREC
      FROM
        FND_CURRENCIES C
      WHERE C.CURRENCY_CODE = GROUP_CURRENCY;
      RETURN (PREC);
    END IF;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      /*SRW.MESSAGE(999
                 ,'Report did not find a definition for the currency ' || GROUP_CURRENCY)*/NULL;
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
  END CF_GROUP_PRECISIONFORMULA;

  FUNCTION CF_REMAIN_BALANCEFORMULA(CF_SUPP_BB IN NUMBER
                                   ,CS_AMOUNT_APPLIED IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (CF_SUPP_BB + CS_AMOUNT_APPLIED);
  END CF_REMAIN_BALANCEFORMULA;

  FUNCTION CF_TRX_PRECISIONFORMULA(TRANS_CURRENCY IN VARCHAR2) RETURN NUMBER IS
    PREC FND_CURRENCIES.PRECISION%TYPE;
  BEGIN
    IF TRANS_CURRENCY = C_BASE_CURRENCY_CODE THEN
      RETURN (C_BASE_PRECISION);
    ELSE
      PREC := 0;
      SELECT
        C.PRECISION
      INTO PREC
      FROM
        FND_CURRENCIES C
      WHERE C.CURRENCY_CODE = TRANS_CURRENCY;
      RETURN (PREC);
    END IF;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      /*SRW.MESSAGE(999
                 ,'Report did not find a definition for the currency ' || TRANS_CURRENCY)*/NULL;
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
  END CF_TRX_PRECISIONFORMULA;

  FUNCTION CF_ENDING_BALANCEFORMULA(CF_SUPP_BB IN NUMBER
                                   ,CS_ACCUM_BALANCE IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (NVL(CF_SUPP_BB
              ,0) + NVL(CS_ACCUM_BALANCE
              ,0));
  END CF_ENDING_BALANCEFORMULA;

  FUNCTION ACCEPT_PARAMETERS RETURN BOOLEAN IS
  BEGIN
    IF (P_SUPPLIER_NAME_FROM IS NOT NULL AND P_SUPPLIER_NAME_TO IS NULL) OR (P_SUPPLIER_NAME_FROM IS NULL AND P_SUPPLIER_NAME_TO IS NOT NULL) THEN
      FND_MESSAGE.SET_NAME('JL'
                          ,'JL_ZZ_AP_SRS_SUPPL_NAME_RANGE');
      CP_MESSAGE := FND_MESSAGE.GET;
      /*SRW.MESSAGE('999'
                 ,CP_MESSAGE)*/NULL;
      RETURN (FALSE);
    END IF;
    IF P_SUPPLIER_NAME_FROM IS NOT NULL THEN
      IF P_SUPPLIER_TAX_ID IS NOT NULL THEN
        FND_MESSAGE.SET_NAME('JL'
                            ,'JL_ZZ_AP_SRS_INV_SUPPL_PARAM');
        CP_MESSAGE := FND_MESSAGE.GET;
        /*SRW.MESSAGE('999'
                   ,CP_MESSAGE)*/NULL;
        RETURN (FALSE);
      END IF;
    END IF;
    IF P_SUPPLIER_NAME_FROM IS NOT NULL THEN
      LP_SUPPLIER := ' AND po1.vendor_name BETWEEN ''' || P_SUPPLIER_NAME_FROM || ''' AND ''' || P_SUPPLIER_NAME_TO || '''';
    ELSIF P_SUPPLIER_TAX_ID IS NOT NULL THEN
      LP_SUPPLIER := ' AND nvl(papf.national_identifier,nvl(po1.individual_1099,po1.num_1099)) = ''' || P_SUPPLIER_TAX_ID || '''';
    ELSE
      LP_SUPPLIER := ' ';
    END IF;
    CP_SUPPLIER_TAX_ID := P_SUPPLIER_TAX_ID;
    RETURN (TRUE);
  END ACCEPT_PARAMETERS;

  FUNCTION CF_AMOUNT_TO_APPLYFORMULA(SECTION IN VARCHAR2
                                    ,RELATE_TRANS_TYPE IN VARCHAR2
                                    ,CF_AMOUNT_CURRENCY IN NUMBER
                                    ,CF_AMOUNT_DUE_CURRENCY IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF SECTION = 'APPLIED' AND RELATE_TRANS_TYPE <> 'PRPMT' THEN
      RETURN (CF_AMOUNT_CURRENCY);
    ELSE
      RETURN (CF_AMOUNT_DUE_CURRENCY);
    END IF;
  END CF_AMOUNT_TO_APPLYFORMULA;

  FUNCTION CF_1FORMULA(TRANS_ID IN NUMBER) RETURN CHAR IS
    L_NAME VARCHAR2(50);
  BEGIN
    SELECT
      NAME
    INTO L_NAME
    FROM
      FND_DOC_SEQUENCE_CATEGORIES FDOC,
      AP_INVOICES_ALL AI
    WHERE AI.INVOICE_ID = TRANS_ID
      AND FDOC.CODE = AI.DOC_CATEGORY_CODE
      AND FDOC.APPLICATION_ID = 200;
    RETURN (L_NAME);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN (' ');
  END CF_1FORMULA;

  FUNCTION CF_TRANS_DATEFORMULA(TRANS_DATE IN DATE) RETURN CHAR IS
  BEGIN
    RETURN FND_DATE.DATE_TO_CHARDATE(TRANS_DATE);
  END CF_TRANS_DATEFORMULA;

  FUNCTION CF_REF_TRANS_DATE1FORMULA(REF_TRANS_DATE IN DATE) RETURN CHAR IS
  BEGIN
    RETURN FND_DATE.DATE_TO_CHARDATE(REF_TRANS_DATE);
  END CF_REF_TRANS_DATE1FORMULA;

  FUNCTION CF_START_DATEFORMULA RETURN CHAR IS
  BEGIN
    RETURN FND_DATE.DATE_TO_CHARDATE(P_START_DATE);
  END CF_START_DATEFORMULA;

  FUNCTION CF_END_DATEFORMULA RETURN CHAR IS
  BEGIN
    RETURN FND_DATE.DATE_TO_CHARDATE(P_END_DATE);
  END CF_END_DATEFORMULA;

  FUNCTION CF_COVER_START_DATEFORMULA RETURN CHAR IS
  BEGIN
    RETURN FND_DATE.DATE_TO_CHARDATE(P_START_DATE);
  END CF_COVER_START_DATEFORMULA;

  FUNCTION CF_COVER_END_DATEFORMULA RETURN CHAR IS
  BEGIN
    RETURN FND_DATE.DATE_TO_CHARDATE(P_END_DATE);
  END CF_COVER_END_DATEFORMULA;

  FUNCTION CF_TEXTFORMULA(DESCRIPTION1 IN VARCHAR2
                         ,GROUP_CURRENCY IN VARCHAR2
                         ,CF_AMT_DUE_DSP IN VARCHAR2) RETURN CHAR IS
    L_BUFFER VARCHAR2(2000);
  BEGIN
    L_BUFFER := DESCRIPTION1;
    L_BUFFER := REPLACE(L_BUFFER ,'&'
                       ,' ');
    L_BUFFER := REPLACE(L_BUFFER
                       ,' F_TOTAL_BALANCE'
                       ,'(' || GROUP_CURRENCY || ') ' || LTRIM(RTRIM(CF_AMT_DUE_DSP)));
    L_BUFFER := REPLACE(L_BUFFER
                       ,' F_AS_OF_DATE'
                       ,TO_CHAR(SYSDATE
                              ,'DD-MON-YYYY'));
    RETURN (L_BUFFER);
  END CF_TEXTFORMULA;

  FUNCTION CF_AMOUNT_DUEFORMULA(VENDOR_ID IN NUMBER
                               ,VENDOR_SITE_ID IN NUMBER
                               ,CF_ENDING_BALANCE IN NUMBER) RETURN NUMBER IS
    L_PREPAY_AMOUNT NUMBER;
    L_AMOUNT_DUE NUMBER;

  BEGIN
    SELECT
      SUM(NVL(AID.PREPAY_AMOUNT_REMAINING,AID.AMOUNT)) * - 1
    INTO L_PREPAY_AMOUNT
    FROM
      AP_INVOICES_ALL AI,
      AP_INVOICE_DISTRIBUTIONS_ALL AID,
      AP_LOOKUP_CODES ALC
    WHERE AID.ACCOUNTING_DATE <= P_END_DATE
      AND AI.INVOICE_TYPE_LOOKUP_CODE = 'PREPAYMENT'
      AND AID.LINE_TYPE_LOOKUP_CODE = 'ITEM'
      AND AI.INVOICE_ID = AID.INVOICE_ID
      AND ALC.LOOKUP_TYPE = 'INVOICE TYPE'
      AND AI.INVOICE_TYPE_LOOKUP_CODE = ALC.LOOKUP_CODE
      AND AID.POSTED_FLAG LIKE DECODE(P_POSTED
          ,'N'
          ,'%'
          ,'Y')
      AND AID.MATCH_STATUS_FLAG LIKE DECODE(P_APPROVED
          ,'Y'
          ,'A'
          ,'%')
      AND NVL(LTRIM(RTRIM(AI.DOC_CATEGORY_CODE))
       ,'X') LIKE DECODE(P_DOCUMENT_CATEGORY
          ,NULL
          ,'%'
          ,P_DOCUMENT_CATEGORY)
      AND AI.VENDOR_ID = CF_AMOUNT_DUEFORMULA.VENDOR_ID
      AND AI.VENDOR_SITE_ID = CF_AMOUNT_DUEFORMULA.VENDOR_SITE_ID;
    L_AMOUNT_DUE := NVL(CF_ENDING_BALANCE
                       ,0) + NVL(L_PREPAY_AMOUNT
                       ,0);

    RETURN (L_AMOUNT_DUE);
  END CF_AMOUNT_DUEFORMULA;

  FUNCTION CF_VENDOR_CHECKFORMULA(VENDOR_ID IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF NVL(P_VENDOR_ID
       ,0) <> VENDOR_ID THEN
      P_VENDOR_ID := VENDOR_ID;
      RETURN (1);
    ELSE
      RETURN (0);
    END IF;
  END CF_VENDOR_CHECKFORMULA;

  FUNCTION CF_POSTED_ONLYFORMULA RETURN CHAR IS
    A_FLAG FND_LOOKUPS.MEANING%TYPE;
  BEGIN
    SELECT
      DECODE(P_POSTED
            ,'Y'
            ,C_NLS_YES
            ,'N'
            ,C_NLS_NO)
    INTO A_FLAG
    FROM
      DUAL;
    RETURN (A_FLAG);
  END CF_POSTED_ONLYFORMULA;

  FUNCTION CF_APPROVED_ONLYFORMULA RETURN CHAR IS
    A_FLAG FND_LOOKUPS.MEANING%TYPE;
  BEGIN
    SELECT
      DECODE(P_APPROVED
            ,'Y'
            ,C_NLS_YES
            ,'N'
            ,C_NLS_NO)
    INTO A_FLAG
    FROM
      DUAL;
    RETURN (A_FLAG);
  END CF_APPROVED_ONLYFORMULA;

  FUNCTION CF_GROUP_CURRFORMULA(GROUP_CURRENCY IN VARCHAR2) RETURN CHAR IS
  BEGIN
    RETURN (GROUP_CURRENCY);
  END CF_GROUP_CURRFORMULA;

  FUNCTION CP_TEXTFORMULA(CF_TEXT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    RETURN (CF_TEXT);
  END CP_TEXTFORMULA;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    FND_MO_REPORTING_API.INITIALIZE(P_REPORTING_LEVEL
                                   ,P_REPORTING_ENTITY_ID
                                   ,'AUTO');
    P_ORG_WHERE_POSIT := FND_MO_REPORTING_API.GET_PREDICATE('posit'
                                                           ,NULL);
    P_ORG_WHERE_AI := FND_MO_REPORTING_API.GET_PREDICATE('ai'
                                                        ,NULL);
    P_ORG_WHERE_AI2 := FND_MO_REPORTING_API.GET_PREDICATE('ai2'
                                                         ,NULL);
    P_ORG_WHERE_AID := FND_MO_REPORTING_API.GET_PREDICATE('aid'
                                                         ,NULL);
    P_ORG_WHERE_AID2 := FND_MO_REPORTING_API.GET_PREDICATE('aid2'
                                                          ,NULL);
    P_ORG_WHERE_ALC := FND_MO_REPORTING_API.GET_PREDICATE('alc'
                                                         ,NULL);
    P_ORG_WHERE_AC := FND_MO_REPORTING_API.GET_PREDICATE('ac'
                                                        ,NULL);
    P_ORG_WHERE_AIP := FND_MO_REPORTING_API.GET_PREDICATE('aip'
                                                         ,NULL);
    P_REPORTING_ENTITY_NAME := SUBSTRB(FND_MO_REPORTING_API.GET_REPORTING_ENTITY_NAME
                                      ,1
                                      ,50);
    P_REPORTING_LEVEL_NAME := SUBSTRB(FND_MO_REPORTING_API.GET_REPORTING_LEVEL_NAME
                                     ,1
                                     ,50);
    IF P_REPORTING_LEVEL = '1000' THEN
      P_CHECK_LEDGER_IN_SP := MO_UTILS.CHECK_LEDGER_IN_SP(P_REPORTING_ENTITY_ID);
      IF P_CHECK_LEDGER_IN_SP = 'N' THEN
        FND_MESSAGE.SET_NAME('FND'
                            ,'FND_MO_RPT_PARTIAL_LEDGER');
        P_PARTIAL_LEDGER_MSG := FND_MESSAGE.GET;
      END IF;
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION CF_ORG_NAMEFORMULA(ORGANIZATION_ID IN NUMBER) RETURN CHAR IS
    L_ORG_NAME VARCHAR2(100);
  BEGIN
    SELECT
      ORG.NAME
    INTO L_ORG_NAME
    FROM
      HR_LOCATIONS LOC,
      HR_ALL_ORGANIZATION_UNITS ORG
    WHERE ORG.ORGANIZATION_ID = CF_ORG_NAMEFORMULA.ORGANIZATION_ID
      AND LOC.LOCATION_ID = ORG.LOCATION_ID;
    RETURN (L_ORG_NAME);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN (' ');
  END CF_ORG_NAMEFORMULA;

  FUNCTION P_CHECK_LEDGER_IN_SPVALIDTRIGG RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END P_CHECK_LEDGER_IN_SPVALIDTRIGG;

  FUNCTION P_PARTIAL_LEDGER_MSGVALIDTRIGG RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END P_PARTIAL_LEDGER_MSGVALIDTRIGG;

  FUNCTION CP_TEXT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TEXT;
  END CP_TEXT_P;

  FUNCTION CP_REF_TRANS_NUM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_REF_TRANS_NUM;
  END CP_REF_TRANS_NUM_P;

  FUNCTION CP_REF_TRANS_TYPE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_REF_TRANS_TYPE;
  END CP_REF_TRANS_TYPE_P;

  FUNCTION C_NLS_YES_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_YES;
  END C_NLS_YES_P;

  FUNCTION C_NLS_NO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_NO;
  END C_NLS_NO_P;

  FUNCTION C_NLS_ALL_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_ALL;
  END C_NLS_ALL_P;

  FUNCTION C_NLS_NO_DATA_EXISTS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_NO_DATA_EXISTS;
  END C_NLS_NO_DATA_EXISTS_P;

  FUNCTION C_NLS_VOID_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_VOID;
  END C_NLS_VOID_P;

  FUNCTION C_NLS_NA_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_NA;
  END C_NLS_NA_P;

  FUNCTION C_NLS_END_OF_REPORT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_END_OF_REPORT;
  END C_NLS_END_OF_REPORT_P;

  FUNCTION C_REPORT_START_DATE_P RETURN DATE IS
  BEGIN
    RETURN C_REPORT_START_DATE;
  END C_REPORT_START_DATE_P;

  FUNCTION C_COMPANY_NAME_HEADER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COMPANY_NAME_HEADER;
  END C_COMPANY_NAME_HEADER_P;

  FUNCTION C_BASE_CURRENCY_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BASE_CURRENCY_CODE;
  END C_BASE_CURRENCY_CODE_P;

  FUNCTION C_BASE_PRECISION_P RETURN NUMBER IS
  BEGIN
    RETURN C_BASE_PRECISION;
  END C_BASE_PRECISION_P;

  FUNCTION C_BASE_MIN_ACCT_UNIT_P RETURN NUMBER IS
  BEGIN
    RETURN C_BASE_MIN_ACCT_UNIT;
  END C_BASE_MIN_ACCT_UNIT_P;

  FUNCTION C_BASE_DESCRIPTION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BASE_DESCRIPTION;
  END C_BASE_DESCRIPTION_P;

  FUNCTION C_CHART_OF_ACCOUNTS_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_CHART_OF_ACCOUNTS_ID;
  END C_CHART_OF_ACCOUNTS_ID_P;

  FUNCTION APPLICATIONS_TEMPLATE_REPORT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN APPLICATIONS_TEMPLATE_REPORT;
  END APPLICATIONS_TEMPLATE_REPORT_P;

  FUNCTION CP_CREATE_AWT_DISTS_TYPE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_CREATE_AWT_DISTS_TYPE;
  END CP_CREATE_AWT_DISTS_TYPE_P;

  FUNCTION LP_SUPPLIER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN LP_SUPPLIER;
  END LP_SUPPLIER_P;

  FUNCTION CP_DATE4_FORMAT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_DATE4_FORMAT;
  END CP_DATE4_FORMAT_P;

  FUNCTION CP_MESSAGE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_MESSAGE;
  END CP_MESSAGE_P;

  FUNCTION CP_REPORT_CURRENCY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_REPORT_CURRENCY;
  END CP_REPORT_CURRENCY_P;

  FUNCTION CP_REPORT_CURR_DISP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_REPORT_CURR_DISP;
  END CP_REPORT_CURR_DISP_P;

  FUNCTION CP_SUPPLIER_NAME_FROM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_SUPPLIER_NAME_FROM;
  END CP_SUPPLIER_NAME_FROM_P;

  FUNCTION CP_SUPPLIER_NAME_TO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_SUPPLIER_NAME_TO;
  END CP_SUPPLIER_NAME_TO_P;

  FUNCTION CP_POSTED_FLAG_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_POSTED_FLAG;
  END CP_POSTED_FLAG_P;

  FUNCTION CP_APPROVED_FLAG_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_APPROVED_FLAG;
  END CP_APPROVED_FLAG_P;

  FUNCTION CP_LEDGER_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_LEDGER_NAME;
  END CP_LEDGER_NAME_P;

  FUNCTION CP_SUPPLIER_TAX_ID_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_SUPPLIER_TAX_ID;
  END CP_SUPPLIER_TAX_ID_P;

  FUNCTION CP_DOCUMENT_CATEGORY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_DOCUMENT_CATEGORY;
  END CP_DOCUMENT_CATEGORY_P;

  FUNCTION CP_TITLE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TITLE;
  END CP_TITLE_P;

  FUNCTION CP_PARTIAL_LEDGER_MSG_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_PARTIAL_LEDGER_MSG;
  END CP_PARTIAL_LEDGER_MSG_P;

  FUNCTION CONVERT(P_YES_NO IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    IF P_YES_NO IS NOT NULL THEN
      SELECT
        MEANING
      INTO P_PARAMETERS_DESC
      FROM
        FND_LOOKUPS
      WHERE LOOKUP_CODE = P_YES_NO
        AND LOOKUP_TYPE = 'YES_NO';
 CP_PARAMETERS_DESC:=P_PARAMETERS_DESC;
 RETURN CP_PARAMETERS_DESC;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      /*SRW.MESSAGE(022
                 ,'Convert function has failed with paramater value:' || P_PARAMETERS_DESC)*/NULL;
      /*SRW.MESSAGE(023
                 ,SQLERRM)*/NULL;
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
  END CONVERT;

 FUNCTION  CUSTOM_INIT         RETURN BOOLEAN IS

 init exception;

BEGIN

  IF (ACCEPT_PARAMETERS=FALSE) THEN
    raise init;
  END IF;

  --GET_AWT_TIME;

  -- Get the format mask for dates
  /*SRW.USER_EXIT('FND DATE4FORMAT
               RESULT=":cp_date4_format"');*/null;

  RETURN (TRUE);

  RETURN NULL; EXCEPTION

  WHEN   OTHERS  THEN
    RETURN (FALSE);

END;

END JE_JEPLPSSR_XMLP_PKG;




/
