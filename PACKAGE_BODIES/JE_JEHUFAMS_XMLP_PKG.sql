--------------------------------------------------------
--  DDL for Package Body JE_JEHUFAMS_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JE_JEHUFAMS_XMLP_PKG" AS
/* $Header: JEHUFAMSB.pls 120.1 2007/12/25 16:53:45 dwkrishn noship $ */
  FUNCTION REPORT_NAMEFORMULA(COMPANY_NAME IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      L_REPORT_NAME VARCHAR2(80);
      L_CONC_PROGRAM_ID NUMBER;
    BEGIN
      RP_COMPANY_NAME := COMPANY_NAME;
      SELECT
        CR.CONCURRENT_PROGRAM_ID
      INTO L_CONC_PROGRAM_ID
      FROM
        FND_CONCURRENT_REQUESTS CR
      WHERE CR.PROGRAM_APPLICATION_ID = 7002
        AND CR.REQUEST_ID = P_CONC_REQUEST_ID;
      SELECT
        CP.USER_CONCURRENT_PROGRAM_NAME
      INTO L_REPORT_NAME
      FROM
        FND_CONCURRENT_PROGRAMS_VL CP
      WHERE CP.CONCURRENT_PROGRAM_ID = L_CONC_PROGRAM_ID
        AND CP.APPLICATION_ID = 7002;
      RP_REPORT_NAME := SUBSTR(L_REPORT_NAME,1,INSTR(L_REPORT_NAME,' (XML)'));
      RETURN (L_REPORT_NAME);
    EXCEPTION
      WHEN OTHERS THEN
        IF (P_REPORT_TYPE = 'CIP COST') THEN
          RP_REPORT_NAME := ':CIP Summary Report:';
        ELSE
          RP_REPORT_NAME := ':Cost Summary Report:';
        END IF;
        RETURN (RP_REPORT_NAME);
    END;
    RETURN NULL;
  END REPORT_NAMEFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    SELECT
      PERIOD_CLOSE_DATE
    INTO CP_END_DATE
    FROM
      FA_DEPRN_PERIODS
    WHERE BOOK_TYPE_CODE = P_BOOK
      AND PERIOD_NAME = P_PERIOD2;
    IF CP_END_DATE IS NULL THEN
      CP_END_PERIOD_OPEN := 'YES';
    ELSE
      CP_END_PERIOD_OPEN := 'NO';
    END IF;
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    BEGIN
      ROLLBACK;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION PERIOD1_PCFORMULA RETURN NUMBER IS
  BEGIN
    DECLARE
      L_PERIOD_POD DATE;
      L_PERIOD_PCD DATE;
      L_PERIOD_PC NUMBER(15);
      L_PERIOD_FY NUMBER(15);
    BEGIN
      SELECT
        PERIOD_COUNTER,
        PERIOD_OPEN_DATE,
        NVL(PERIOD_CLOSE_DATE
           ,SYSDATE),
        FISCAL_YEAR
      INTO L_PERIOD_PC,L_PERIOD_POD,L_PERIOD_PCD,L_PERIOD_FY
      FROM
        FA_DEPRN_PERIODS
      WHERE BOOK_TYPE_CODE = P_BOOK
        AND PERIOD_NAME = P_PERIOD1;
      PERIOD1_POD := L_PERIOD_POD;
      PERIOD1_PCD := L_PERIOD_PCD;
      PERIOD1_FY := L_PERIOD_FY;
      RETURN (L_PERIOD_PC);
    END;
    RETURN NULL;
  END PERIOD1_PCFORMULA;

  FUNCTION PERIOD2_PCFORMULA RETURN NUMBER IS
  BEGIN
    DECLARE
      L_PERIOD_POD DATE;
      L_PERIOD_PCD DATE;
      L_PERIOD_PC NUMBER(15);
      L_PERIOD_FY NUMBER(15);
    BEGIN
      SELECT
        PERIOD_COUNTER,
        PERIOD_OPEN_DATE,
        NVL(PERIOD_CLOSE_DATE
           ,SYSDATE),
        FISCAL_YEAR
      INTO L_PERIOD_PC,L_PERIOD_POD,L_PERIOD_PCD,L_PERIOD_FY
      FROM
        FA_DEPRN_PERIODS
      WHERE BOOK_TYPE_CODE = P_BOOK
        AND PERIOD_NAME = P_PERIOD2;
      PERIOD2_POD := L_PERIOD_POD;
      PERIOD2_PCD := L_PERIOD_PCD;
      PERIOD2_FY := L_PERIOD_FY;
      RETURN (L_PERIOD_PC);
    END;
    RETURN NULL;
  END PERIOD2_PCFORMULA;

  FUNCTION DO_INSERTFORMULA RETURN NUMBER IS
   BEGIN
    BEGIN
      IF (P_REPORT_TYPE = 'COST' OR P_REPORT_TYPE = 'CIP COST') THEN
        INSERT_INFO;
        RETURN (1);
      ELSE
        RETURN (0);
      END IF;
    END;
    RETURN NULL;
  END DO_INSERTFORMULA;

  FUNCTION OUT_OF_BALANCEFORMULA(BEGIN1 IN NUMBER
                                ,ADDITION IN NUMBER
                                ,REVALUATION IN NUMBER
                                ,RECLASS IN NUMBER
                                ,RETIREMENT IN NUMBER
                                ,ADJUSTMENT IN NUMBER
                                ,TRANSFER IN NUMBER
                                ,CAPITALIZATION IN NUMBER
                                ,END1 IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      MOCK_TOTAL NUMBER;
    BEGIN
      MOCK_TOTAL := NVL(BEGIN1
                       ,0) + NVL(ADDITION
                       ,0) + NVL(REVALUATION
                       ,0) + NVL(RECLASS
                       ,0) - NVL(RETIREMENT
                       ,0) + NVL(ADJUSTMENT
                       ,0) + NVL(TRANSFER
                       ,0) - NVL(CAPITALIZATION
                       ,0);
      IF (MOCK_TOTAL = NVL(END1
         ,0)) THEN
        RETURN (' ');
      ELSE
        RETURN ('*');
      END IF;
    END;
    RETURN NULL;
  END OUT_OF_BALANCEFORMULA;

  FUNCTION ACCT_OUT_OF_BALANCEFORMULA(ACCT_BEGIN IN NUMBER
                                     ,ACCT_ADD IN NUMBER
                                     ,ACCT_REVAL IN NUMBER
                                     ,ACCT_RECLASS IN NUMBER
                                     ,ACCT_RETIRE IN NUMBER
                                     ,ACCT_ADJUST IN NUMBER
                                     ,ACCT_TRANS IN NUMBER
                                     ,ACCT_CAPITAL IN NUMBER
                                     ,ACCT_END IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      MOCK_TOTAL NUMBER;
    BEGIN
      MOCK_TOTAL := NVL(ACCT_BEGIN
                       ,0) + NVL(ACCT_ADD
                       ,0) + NVL(ACCT_REVAL
                       ,0) + NVL(ACCT_RECLASS
                       ,0) - NVL(ACCT_RETIRE
                       ,0) + NVL(ACCT_ADJUST
                       ,0) + NVL(ACCT_TRANS
                       ,0) - NVL(ACCT_CAPITAL
                       ,0);
      IF (MOCK_TOTAL = NVL(ACCT_END
         ,0)) THEN
        RETURN (' ');
      ELSE
        RETURN ('*');
      END IF;
    END;
    RETURN NULL;
  END ACCT_OUT_OF_BALANCEFORMULA;

  FUNCTION BAL_OUT_OF_BALANCEFORMULA(BAL_BEGIN IN NUMBER
                                    ,BAL_ADD IN NUMBER
                                    ,BAL_REVAL IN NUMBER
                                    ,BAL_RECLASS IN NUMBER
                                    ,BAL_RETIRE IN NUMBER
                                    ,BAL_ADJUST IN NUMBER
                                    ,BAL_TRANS IN NUMBER
                                    ,BAL_CAPITAL IN NUMBER
                                    ,BAL_END IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      MOCK_TOTAL NUMBER;
    BEGIN
      MOCK_TOTAL := NVL(BAL_BEGIN
                       ,0) + NVL(BAL_ADD
                       ,0) + NVL(BAL_REVAL
                       ,0) + NVL(BAL_RECLASS
                       ,0) - NVL(BAL_RETIRE
                       ,0) + NVL(BAL_ADJUST
                       ,0) + NVL(BAL_TRANS
                       ,0) - NVL(BAL_CAPITAL
                       ,0);
      IF (MOCK_TOTAL = NVL(BAL_END
         ,0)) THEN
        RETURN (' ');
      ELSE
        RETURN ('*');
      END IF;
    END;
    RETURN NULL;
  END BAL_OUT_OF_BALANCEFORMULA;

  FUNCTION CAPREVALFORMULA(REVALUATION IN NUMBER
                          ,CAPITALIZATION IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (P_REPORT_TYPE = 'COST') THEN
      RETURN (REVALUATION);
    ELSE
      RETURN (CAPITALIZATION);
    END IF;
    RETURN NULL;
  END CAPREVALFORMULA;

  FUNCTION CF_REPORT_DATEFORMULA RETURN CHAR IS
  BEGIN
    RETURN (FND_DATE.DATE_TO_CHARDT(SYSDATE));
  END CF_REPORT_DATEFORMULA;

  PROCEDURE GET_ADJUSTMENTS IS
  BEGIN
    INSERT INTO JE_HU_BALANCES_REPORT
      (CATEGORY_ID
      ,ASSET_ID
      ,DISTRIBUTION_CCID
      ,ADJUSTMENT_CCID
      ,CATEGORY_BOOKS_ACCOUNT
      ,SOURCE_TYPE_CODE
      ,AMOUNT)
      SELECT
        AH.CATEGORY_ID,
        AH.ASSET_ID,
        DH.CODE_COMBINATION_ID,
        XAL.CODE_COMBINATION_ID,
        null,
        AJ.SOURCE_TYPE_CODE,
        SUM(DECODE(AJ.DEBIT_CREDIT_FLAG
                  ,CP_BALANCE_TYPE
                  ,1
                  ,-1) * AJ.ADJUSTMENT_AMOUNT)
      FROM
        FA_LOOKUPS RT,
        FA_DISTRIBUTION_HISTORY DH,
        FA_TRANSACTION_HEADERS TH,
        FA_ASSET_HISTORY AH,
        FA_ADJUSTMENTS AJ,
        XLA_AE_LINES XAL,
        XLA_DISTRIBUTION_LINKS XDL
      WHERE RT.LOOKUP_TYPE = 'REPORT TYPE'
        AND RT.LOOKUP_CODE = P_REPORT_TYPE
        AND DH.BOOK_TYPE_CODE = CP_DISTRIBUTION_SOURCE_BOOK
        AND AJ.ASSET_ID = DH.ASSET_ID
        AND AJ.BOOK_TYPE_CODE = P_BOOK
        AND AJ.DISTRIBUTION_ID = DH.DISTRIBUTION_ID
        AND AJ.ADJUSTMENT_TYPE in ( P_REPORT_TYPE , DECODE(P_REPORT_TYPE
            ,'REVAL RESERVE'
            ,'REVAL AMORT') )
        AND AJ.PERIOD_COUNTER_CREATED BETWEEN CP_PERIOD1_PC
        AND CP_PERIOD2_PC
        AND TH.TRANSACTION_HEADER_ID = AJ.TRANSACTION_HEADER_ID
        AND AH.ASSET_ID = DH.ASSET_ID
        AND ( ( AH.ASSET_TYPE <> 'EXPENSED'
        AND P_REPORT_TYPE IN ( 'COST' , 'CIP COST' ) )
      OR ( AH.ASSET_TYPE = 'CAPITALIZED'
        AND P_REPORT_TYPE IN ( 'RESERVE' , 'REVAL RESERVE' ) ) )
        AND ( ( AJ.SOURCE_TYPE_CODE <> 'RECLASS'
        AND TH.TRANSACTION_HEADER_ID BETWEEN AH.TRANSACTION_HEADER_ID_IN
        AND NVL(AH.TRANSACTION_HEADER_ID_OUT - 1
         ,TH.TRANSACTION_HEADER_ID) )
      OR ( AJ.SOURCE_TYPE_CODE = 'RECLASS'
        AND DECODE(AJ.DEBIT_CREDIT_FLAG
            ,'CR'
            ,AH.TRANSACTION_HEADER_ID_OUT
            ,'DR'
            ,AH.TRANSACTION_HEADER_ID_IN) = TH.TRANSACTION_HEADER_ID ) )
        AND ( DECODE(RT.LOOKUP_CODE
            ,AJ.ADJUSTMENT_TYPE
            ,1
            ,0) * AJ.ADJUSTMENT_AMOUNT ) <> 0
        AND XDL.SOURCE_DISTRIBUTION_ID_NUM_1 = AJ.TRANSACTION_HEADER_ID
        AND XDL.SOURCE_DISTRIBUTION_ID_NUM_2 = AJ.ADJUSTMENT_LINE_ID
        AND XDL.APPLICATION_ID = 140
        AND XDL.EVENT_ID = TH.EVENT_ID
        AND XAL.AE_HEADER_ID = XDL.AE_HEADER_ID
        AND XAL.AE_LINE_NUM = XDL.AE_LINE_NUM
        AND XAL.APPLICATION_ID = 140
        AND XDL.SOURCE_DISTRIBUTION_TYPE = 'TRX'
      GROUP BY
        AH.CATEGORY_ID,
        AH.ASSET_ID,
        DH.CODE_COMBINATION_ID,
        XAL.CODE_COMBINATION_ID,
        AJ.SOURCE_TYPE_CODE;
    IF P_REPORT_TYPE = 'RESERVE' THEN
      INSERT INTO JE_HU_BALANCES_REPORT
        (CATEGORY_ID
        ,ASSET_ID
        ,DISTRIBUTION_CCID
        ,ADJUSTMENT_CCID
        ,CATEGORY_BOOKS_ACCOUNT
        ,SOURCE_TYPE_CODE
        ,AMOUNT)
        SELECT
          CB.CATEGORY_ID,
          DH.ASSET_ID,
          DH.CODE_COMBINATION_ID,
          null,
          CB.DEPRN_RESERVE_ACCT,
          'ADDITION',
          SUM(DD.DEPRN_RESERVE)
        FROM
          FA_DISTRIBUTION_HISTORY DH,
          FA_CATEGORY_BOOKS CB,
          FA_ADDITIONS AD,
          FA_DEPRN_DETAIL DD
        WHERE NOT EXISTS (
          SELECT
            BR.ASSET_ID
          FROM
            JE_HU_BALANCES_REPORT BR
          WHERE BR.ASSET_ID = DH.ASSET_ID
            AND BR.DISTRIBUTION_CCID = DH.CODE_COMBINATION_ID
            AND BR.SOURCE_TYPE_CODE = 'ADDITION' )
          AND DD.BOOK_TYPE_CODE = P_BOOK
          AND ( DD.PERIOD_COUNTER + 1 ) BETWEEN CP_PERIOD1_PC
          AND CP_PERIOD2_PC
          AND DD.DEPRN_SOURCE_CODE = 'B'
          AND DD.ASSET_ID = DH.ASSET_ID
          AND DD.DEPRN_RESERVE <> 0
          AND DD.DISTRIBUTION_ID = DH.DISTRIBUTION_ID
          AND DD.ASSET_ID = AD.ASSET_ID
          AND DD.BOOK_TYPE_CODE = CB.BOOK_TYPE_CODE
          AND AD.ASSET_CATEGORY_ID = CB.CATEGORY_ID
        GROUP BY
          CB.CATEGORY_ID,
          DH.ASSET_ID,
          DH.CODE_COMBINATION_ID,
          CB.DEPRN_RESERVE_ACCT;
    END IF;
  END GET_ADJUSTMENTS;

  PROCEDURE GET_DEPRN_EFFECTS IS
  BEGIN
    INSERT INTO JE_HU_BALANCES_REPORT
      (CATEGORY_ID
      ,ASSET_ID
      ,DISTRIBUTION_CCID
      ,ADJUSTMENT_CCID
      ,CATEGORY_BOOKS_ACCOUNT
      ,SOURCE_TYPE_CODE
      ,AMOUNT)
      SELECT
        AH.CATEGORY_ID,
        AH.ASSET_ID,
        DH.CODE_COMBINATION_ID,
        null,
        DECODE(RT.LOOKUP_CODE
              ,'RESERVE'
              ,CB.DEPRN_RESERVE_ACCT
              ,'REVAL RESERVE'
              ,CB.REVAL_RESERVE_ACCT),
        DECODE(DD.DEPRN_SOURCE_CODE
              ,'D'
              ,'DEPRECIATION'
              ,'ADDITION'),
        SUM(DECODE(RT.LOOKUP_CODE
                  ,'RESERVE'
                  ,DD.DEPRN_AMOUNT
                  ,'REVAL RESERVE'
                  ,-DD.REVAL_AMORTIZATION))
      FROM
        FA_LOOKUPS RT,
        FA_CATEGORY_BOOKS CB,
        FA_DISTRIBUTION_HISTORY DH,
        FA_ASSET_HISTORY AH,
        FA_DEPRN_DETAIL DD,
        FA_DEPRN_PERIODS DP
      WHERE DH.BOOK_TYPE_CODE = CP_DISTRIBUTION_SOURCE_BOOK
        AND AH.ASSET_ID = DH.ASSET_ID
        AND AH.ASSET_TYPE = 'CAPITALIZED'
        AND AH.DATE_EFFECTIVE < NVL(DH.DATE_INEFFECTIVE
         ,SYSDATE)
        AND NVL(DH.DATE_INEFFECTIVE
         ,SYSDATE) <= NVL(AH.DATE_INEFFECTIVE
         ,SYSDATE)
        AND CB.CATEGORY_ID = AH.CATEGORY_ID
        AND CB.BOOK_TYPE_CODE = P_BOOK
        AND ( ( DD.DEPRN_SOURCE_CODE = 'B'
        AND ( DD.PERIOD_COUNTER + 1 ) < CP_PERIOD2_PC )
      OR ( DD.DEPRN_SOURCE_CODE = 'D' ) )
        AND DD.BOOK_TYPE_CODE || '' = P_BOOK
        AND DD.ASSET_ID = DH.ASSET_ID
        AND DD.DISTRIBUTION_ID = DH.DISTRIBUTION_ID
        AND DD.PERIOD_COUNTER between CP_PERIOD1_PC
        AND CP_PERIOD2_PC
        AND DP.BOOK_TYPE_CODE = DD.BOOK_TYPE_CODE
        AND DP.PERIOD_COUNTER = DD.PERIOD_COUNTER
        AND DECODE(RT.LOOKUP_CODE
            ,'RESERVE'
            ,CB.DEPRN_RESERVE_ACCT
            ,'REVAL RESERVE'
            ,CB.REVAL_RESERVE_ACCT) is not null
        AND DECODE(RT.LOOKUP_CODE
            ,'RESERVE'
            ,DD.DEPRN_AMOUNT
            ,'REVAL RESERVE'
            ,NVL(DD.REVAL_AMORTIZATION
               ,0)) <> 0
      GROUP BY
        AH.CATEGORY_ID,
        AH.ASSET_ID,
        DH.CODE_COMBINATION_ID,
        DECODE(RT.LOOKUP_CODE
              ,'RESERVE'
              ,CB.DEPRN_RESERVE_ACCT
              ,'REVAL RESERVE'
              ,CB.REVAL_RESERVE_ACCT),
        DD.DEPRN_SOURCE_CODE;
  END GET_DEPRN_EFFECTS;

  PROCEDURE INSERT_INFO IS
  PRAGMA  AUTONOMOUS_TRANSACTION;
  BEGIN
    SELECT
      P1.PERIOD_COUNTER,
      P1.PERIOD_OPEN_DATE,
      NVL(P1.PERIOD_CLOSE_DATE
         ,BC.LAST_DEPRN_RUN_DATE),
      P2.PERIOD_COUNTER,
      NVL(P2.PERIOD_CLOSE_DATE
         ,BC.LAST_DEPRN_RUN_DATE),
      BC.DISTRIBUTION_SOURCE_BOOK
    INTO CP_PERIOD1_PC,CP_PERIOD1_POD,CP_PERIOD1_PCD,CP_PERIOD2_PC,CP_PERIOD2_PCD,CP_DISTRIBUTION_SOURCE_BOOK
    FROM
      FA_DEPRN_PERIODS P1,
      FA_DEPRN_PERIODS P2,
      FA_BOOK_CONTROLS BC
    WHERE BC.BOOK_TYPE_CODE = P_BOOK
      AND P1.BOOK_TYPE_CODE = P_BOOK
      AND P1.PERIOD_NAME = P_PERIOD1
      AND P2.BOOK_TYPE_CODE = P_BOOK
      AND P2.PERIOD_NAME = P_PERIOD2;
    IF (P_REPORT_TYPE = 'RESERVE' OR P_REPORT_TYPE = 'REVAL RESERVE') THEN
      CP_BALANCE_TYPE := 'CR';
    ELSE
      CP_BALANCE_TYPE := 'DR';
    END IF;
    DELETE FROM JE_HU_BALANCES_REPORT;
    DELETE FROM FA_LOOKUPS_B
     WHERE LOOKUP_TYPE = 'REPORT TYPE';
    DELETE FROM FA_LOOKUPS_TL
     WHERE LOOKUP_TYPE = 'REPORT TYPE';
    INSERT INTO FA_LOOKUPS_B
      (LOOKUP_TYPE
      ,LOOKUP_CODE
      ,LAST_UPDATED_BY
      ,LAST_UPDATE_DATE
      ,ENABLED_FLAG)
    VALUES   ('REPORT TYPE'
      ,P_REPORT_TYPE
      ,1
      ,SYSDATE
      ,'Y');
    INSERT INTO FA_LOOKUPS_TL
      (LOOKUP_TYPE
      ,LOOKUP_CODE
      ,LANGUAGE
      ,SOURCE_LANG
      ,MEANING
      ,LAST_UPDATED_BY
      ,LAST_UPDATE_DATE)
      SELECT
        'REPORT TYPE',
        P_REPORT_TYPE,
        L.LANGUAGE_CODE,
        USERENV('LANG'),
        P_REPORT_TYPE,
        1,
        SYSDATE
      FROM
        FND_LANGUAGES L
      WHERE L.INSTALLED_FLAG in ( 'I' , 'B' );
    /*SRW.MESSAGE('001'
               ,'Before First Balance')*/NULL;
    CP_PERIOD_PC := CP_PERIOD1_PC - 1;
    CP_PERIOD_PCD := CP_PERIOD1_PCD;
    CP_PERIOD_POD := CP_PERIOD1_POD;
    CP_BEGIN_OR_END := 'BEGIN';
    GET_BALANCE;
    /*SRW.MESSAGE('010'
               ,'After first Balance')*/NULL;
    /*SRW.MESSAGE('020'
               ,'Before Second Balance')*/NULL;
    CP_PERIOD_PC := CP_PERIOD2_PC;
    CP_PERIOD_PCD := CP_PERIOD2_PCD;
    CP_PERIOD_POD := CP_PERIOD2_PCD;
    CP_BEGIN_OR_END := 'END';
    /*SRW.MESSAGE('025'
               ,'After Second Assignments')*/NULL;
    GET_BALANCE;
    /*SRW.MESSAGE('030'
               ,'Before Get Adjustments')*/NULL;
    GET_ADJUSTMENTS;
    IF (P_REPORT_TYPE = 'RESERVE' OR P_REPORT_TYPE = 'REVAL RESERVE') THEN
      /*SRW.MESSAGE('040'
                 ,'Get Derpn Effects')*/NULL;
      GET_DEPRN_EFFECTS;
      /*SRW.MESSAGE('050'
                 ,'After Get Deprn Effects')*/NULL;
    END IF;
    COMMIT;
  END INSERT_INFO;

  PROCEDURE GET_BALANCE IS
  BEGIN
    INSERT INTO JE_HU_BALANCES_REPORT
      (CATEGORY_ID
      ,ASSET_ID
      ,DISTRIBUTION_CCID
      ,ADJUSTMENT_CCID
      ,CATEGORY_BOOKS_ACCOUNT
      ,SOURCE_TYPE_CODE
      ,AMOUNT)
      SELECT
        AH.CATEGORY_ID,
        AH.ASSET_ID,
        DH.CODE_COMBINATION_ID,
        null,
        DECODE(P_REPORT_TYPE
              ,'COST'
              ,CB.ASSET_COST_ACCT
              ,'CIP COST'
              ,CB.CIP_COST_ACCT
              ,'RESERVE'
              ,CB.DEPRN_RESERVE_ACCT
              ,'REVAL RESERVE'
              ,CB.REVAL_RESERVE_ACCT),
        DECODE(P_REPORT_TYPE
              ,'RESERVE'
              ,DECODE(DD.DEPRN_SOURCE_CODE
                    ,'D'
                    ,CP_BEGIN_OR_END
                    ,'ADDITION')
              ,'REVAL RESERVE'
              ,DECODE(DD.DEPRN_SOURCE_CODE
                    ,'D'
                    ,CP_BEGIN_OR_END
                    ,'ADDITION')
              ,CP_BEGIN_OR_END),
        DECODE(P_REPORT_TYPE
              ,'COST'
              ,DD.COST
              ,'CIP COST'
              ,DD.COST
              ,'RESERVE'
              ,DD.DEPRN_RESERVE
              ,'REVAL RESERVE'
              ,DD.REVAL_RESERVE)
      FROM
        FA_BOOKS BK,
        FA_CATEGORY_BOOKS CB,
        FA_ASSET_HISTORY AH,
        FA_DEPRN_DETAIL DD,
        FA_DISTRIBUTION_HISTORY DH
      WHERE DH.BOOK_TYPE_CODE || '' = CP_DISTRIBUTION_SOURCE_BOOK
        AND DECODE(DD.DEPRN_SOURCE_CODE
            ,'D'
            ,CP_PERIOD_POD
            ,CP_PERIOD_PCD) BETWEEN DH.DATE_EFFECTIVE
        AND NVL(DH.DATE_INEFFECTIVE
         ,SYSDATE)
        AND DD.ASSET_ID = DH.ASSET_ID + 0
        AND DD.BOOK_TYPE_CODE = P_BOOK
        AND DD.DISTRIBUTION_ID = DH.DISTRIBUTION_ID + 0
        AND DD.PERIOD_COUNTER <= CP_PERIOD_PC
        AND DECODE(CP_BEGIN_OR_END
            ,'BEGIN'
            ,DD.DEPRN_SOURCE_CODE
            ,'D') = DD.DEPRN_SOURCE_CODE
        AND DD.PERIOD_COUNTER = (
        SELECT
          MAX(SUB_DD.PERIOD_COUNTER)
        FROM
          FA_DEPRN_DETAIL SUB_DD
        WHERE SUB_DD.BOOK_TYPE_CODE = P_BOOK
          AND SUB_DD.DISTRIBUTION_ID = DH.DISTRIBUTION_ID + 0
          AND SUB_DD.PERIOD_COUNTER <= CP_PERIOD_PC )
        AND AH.ASSET_ID = DH.ASSET_ID + 0
        AND ( ( AH.ASSET_TYPE <> 'EXPENSED'
        AND P_REPORT_TYPE IN ( 'COST' , 'CIP COST' ) )
      OR ( AH.ASSET_TYPE = 'CAPITALIZED'
        AND P_REPORT_TYPE IN ( 'RESERVE' , 'REVAL RESERVE' ) ) )
        AND DECODE(DD.DEPRN_SOURCE_CODE
            ,'D'
            ,CP_PERIOD_POD
            ,CP_PERIOD_PCD) BETWEEN AH.DATE_EFFECTIVE
        AND NVL(AH.DATE_INEFFECTIVE
         ,SYSDATE)
        AND CB.CATEGORY_ID = AH.CATEGORY_ID
        AND CB.BOOK_TYPE_CODE = P_BOOK
        AND BK.BOOK_TYPE_CODE = P_BOOK
        AND BK.ASSET_ID = DD.ASSET_ID
        AND DECODE(DD.DEPRN_SOURCE_CODE
            ,'D'
            ,CP_PERIOD_POD
            ,CP_PERIOD_PCD) BETWEEN BK.DATE_EFFECTIVE
        AND NVL(BK.DATE_INEFFECTIVE
         ,SYSDATE)
        AND NVL(BK.PERIOD_COUNTER_FULLY_RETIRED
         ,CP_PERIOD_PC + 1) > CP_PERIOD1_PC - 1
        AND DECODE(P_REPORT_TYPE
            ,'COST'
            ,DECODE(AH.ASSET_TYPE
                  ,'CAPITALIZED'
                  ,CB.ASSET_COST_ACCT
                  ,NULL)
            ,'CIP COST'
            ,DECODE(AH.ASSET_TYPE
                  ,'CIP'
                  ,CB.CIP_COST_ACCT
                  ,NULL)
            ,'RESERVE'
            ,CB.DEPRN_RESERVE_ACCT
            ,'REVAL RESERVE'
            ,CB.REVAL_RESERVE_ACCT) is not null;
  END GET_BALANCE;

  PROCEDURE VERSION IS
  BEGIN
    CP_FDRCSID := '$Header: JEHUFAMSB.pls 120.1 2007/12/25 16:53:45 dwkrishn noship $';
  END VERSION;

  FUNCTION ACCT_BAL_APROMPT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ACCT_BAL_APROMPT;
  END ACCT_BAL_APROMPT_P;

  FUNCTION ACCT_CC_APROMPT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ACCT_CC_APROMPT;
  END ACCT_CC_APROMPT_P;

  FUNCTION CAT_MAJ_RPROMPT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CAT_MAJ_RPROMPT;
  END CAT_MAJ_RPROMPT_P;

  FUNCTION PERIOD1_POD_P RETURN DATE IS
  BEGIN
    RETURN PERIOD1_POD;
  END PERIOD1_POD_P;

  FUNCTION PERIOD1_PCD_P RETURN DATE IS
  BEGIN
    RETURN PERIOD1_PCD;
  END PERIOD1_PCD_P;

  FUNCTION PERIOD1_FY_P RETURN NUMBER IS
  BEGIN
    RETURN PERIOD1_FY;
  END PERIOD1_FY_P;

  FUNCTION PERIOD2_POD_P RETURN DATE IS
  BEGIN
    RETURN PERIOD2_POD;
  END PERIOD2_POD_P;

  FUNCTION PERIOD2_PCD_P RETURN DATE IS
  BEGIN
    RETURN PERIOD2_PCD;
  END PERIOD2_PCD_P;

  FUNCTION PERIOD2_FY_P RETURN NUMBER IS
  BEGIN
    RETURN PERIOD2_FY;
  END PERIOD2_FY_P;

  FUNCTION RP_COMPANY_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_COMPANY_NAME;
  END RP_COMPANY_NAME_P;

  FUNCTION RP_REPORT_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_REPORT_NAME;
  END RP_REPORT_NAME_P;

  FUNCTION RP_BAL_LPROMPT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_BAL_LPROMPT;
  END RP_BAL_LPROMPT_P;

  FUNCTION RP_CTR_APROMPT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_CTR_APROMPT;
  END RP_CTR_APROMPT_P;

  FUNCTION CP_DISTRIBUTION_SOURCE_BOOK_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_DISTRIBUTION_SOURCE_BOOK;
  END CP_DISTRIBUTION_SOURCE_BOOK_P;

  FUNCTION CP_PERIOD1_PC_P RETURN NUMBER IS
  BEGIN
    RETURN CP_PERIOD1_PC;
  END CP_PERIOD1_PC_P;

  FUNCTION CP_PERIOD1_POD_P RETURN DATE IS
  BEGIN
    RETURN CP_PERIOD1_POD;
  END CP_PERIOD1_POD_P;

  FUNCTION CP_PERIOD1_PCD_P RETURN DATE IS
  BEGIN
    RETURN CP_PERIOD1_PCD;
  END CP_PERIOD1_PCD_P;

  FUNCTION CP_PERIOD2_PC_P RETURN NUMBER IS
  BEGIN
    RETURN CP_PERIOD2_PC;
  END CP_PERIOD2_PC_P;

  FUNCTION CP_PERIOD2_PCD_P RETURN DATE IS
  BEGIN
    RETURN CP_PERIOD2_PCD;
  END CP_PERIOD2_PCD_P;

  FUNCTION CP_BALANCE_TYPE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_BALANCE_TYPE;
  END CP_BALANCE_TYPE_P;

  FUNCTION CP_BEGIN_OR_END_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_BEGIN_OR_END;
  END CP_BEGIN_OR_END_P;

  FUNCTION CP_PERIOD_PC_P RETURN NUMBER IS
  BEGIN
    RETURN CP_PERIOD_PC;
  END CP_PERIOD_PC_P;

  FUNCTION CP_PERIOD_POD_P RETURN DATE IS
  BEGIN
    RETURN CP_PERIOD_POD;
  END CP_PERIOD_POD_P;

  FUNCTION CP_PERIOD_PCD_P RETURN DATE IS
  BEGIN
    RETURN CP_PERIOD_PCD;
  END CP_PERIOD_PCD_P;

  FUNCTION CP_FDRCSID_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_FDRCSID;
  END CP_FDRCSID_P;

  FUNCTION CP_END_PERIOD_OPEN_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_END_PERIOD_OPEN;
  END CP_END_PERIOD_OPEN_P;

  FUNCTION CP_END_DATE_P RETURN DATE IS
  BEGIN
    RETURN CP_END_DATE;
  END CP_END_DATE_P;

END JE_JEHUFAMS_XMLP_PKG;




/
