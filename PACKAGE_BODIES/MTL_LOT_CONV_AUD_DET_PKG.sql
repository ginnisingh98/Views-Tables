--------------------------------------------------------
--  DDL for Package Body MTL_LOT_CONV_AUD_DET_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."MTL_LOT_CONV_AUD_DET_PKG" as
/* $Header: INVHLCDB.pls 120.0 2005/05/25 05:44:24 appldev noship $ */


PROCEDURE INSERT_ROW(
  X_CONV_AUDIT_DETAIL_ID   IN OUT NOCOPY NUMBER,
  X_CONV_AUDIT_ID          IN NUMBER,
  X_REVISION               IN VARCHAR2,
  X_ORGANIZATION_ID        IN NUMBER,
  X_SUBINVENTORY_CODE      IN VARCHAR2,
  X_LPN_ID                 IN NUMBER,
  X_LOCATOR_ID             IN NUMBER,
  X_OLD_PRIMARY_QTY        IN NUMBER,
  X_OLD_SECONDARY_QTY      IN NUMBER,
  X_NEW_PRIMARY_QTY        IN NUMBER,
  X_NEW_SECONDARY_QTY      IN NUMBER,
  X_TRANSACTION_PRIMARY_QTY   IN NUMBER,
  X_TRANSACTION_SECONDARY_QTY IN NUMBER,
  X_TRANSACTION_UPDATE_FLAG   IN VARCHAR2,
  X_CREATED_BY             IN NUMBER,
  X_CREATION_DATE          IN DATE,
  X_LAST_UPDATED_BY        IN NUMBER,
  X_LAST_UPDATE_DATE       IN DATE,
  X_LAST_UPDATE_LOGIN      IN NUMBER,
  x_return_status           OUT NOCOPY VARCHAR2,
  x_msg_count               OUT NOCOPY NUMBER,
  x_msg_data                OUT NOCOPY VARCHAR2)

IS


CURSOR GET_AUD_DET_SEQ
IS
SELECT MTL_CONV_AUDIT_DETAIL_ID_S.NEXTVAL
FROM FND_DUAL;

l_aud_det_seq              NUMBER;


BEGIN
  x_return_status := FND_API.G_RET_STS_SUCCESS;
  IF (X_CONV_AUDIT_DETAIL_ID IS NULL) THEN
     OPEN GET_AUD_DET_SEQ;
     FETCH GET_AUD_DET_SEQ INTO l_aud_det_seq;
     IF (SQL%NOTFOUND) then
        CLOSE GET_AUD_DET_SEQ;
        RAISE no_data_found;
     END IF;
     X_CONV_AUDIT_DETAIL_ID := l_aud_det_seq;
     CLOSE GET_AUD_DET_SEQ;
  END IF;

  INSERT INTO MTL_LOT_CONV_AUDIT_DETAILS (
    CONV_AUDIT_DETAIL_ID,
    CONV_AUDIT_ID,
    REVISION,
    ORGANIZATION_ID,
    SUBINVENTORY_CODE,
    LPN_ID,
    LOCATOR_ID,
    OLD_PRIMARY_QTY,
    OLD_SECONDARY_QTY,
    NEW_PRIMARY_QTY,
    NEW_SECONDARY_QTY,
    TRANSACTION_PRIMARY_QTY,
    TRANSACTION_SECONDARY_QTY,
    TRANSACTION_UPDATE_FLAG,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN
    )
    VALUES (
    X_CONV_AUDIT_DETAIL_ID,
    X_CONV_AUDIT_ID,
    X_REVISION,
    X_ORGANIZATION_ID,
    X_SUBINVENTORY_CODE,
    X_LPN_ID,
    X_LOCATOR_ID,
    X_OLD_PRIMARY_QTY,
    X_OLD_SECONDARY_QTY,
    X_NEW_PRIMARY_QTY,
    X_NEW_SECONDARY_QTY,
    X_TRANSACTION_PRIMARY_QTY,
    X_TRANSACTION_SECONDARY_QTY,
    X_TRANSACTION_UPDATE_FLAG,
    X_CREATED_BY,
    X_CREATION_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATE_LOGIN
  );



  FND_MSG_PUB.Count_AND_GET
      (p_count => x_msg_count, p_data  => x_msg_data);

EXCEPTION

  WHEN OTHERS THEN
    x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
    IF (SQLCODE IS NOT NULL) THEN
      FND_MESSAGE.SET_NAME('INV','INV_LOTC_SQL_ERROR');
      FND_MESSAGE.SET_TOKEN('ERRCODE',SQLCODE);
      FND_MESSAGE.SET_TOKEN('ERRM',SQLERRM(SQLCODE));
      FND_MSG_PUB.Add;
    END IF;
    FND_MSG_PUB.Count_AND_GET
      (p_count => x_msg_count, p_data  => x_msg_data);

END INSERT_ROW;


PROCEDURE UPDATE_ROW(
  X_CONV_AUDIT_DETAIL_ID   IN NUMBER,
  X_CONV_AUDIT_ID          IN NUMBER,
  X_REVISION               IN VARCHAR2,
  X_ORGANIZATION_ID        IN NUMBER,
  X_SUBINVENTORY_CODE      IN VARCHAR2,
  X_LPN_ID                 IN NUMBER,
  X_LOCATOR_ID             IN NUMBER,
  X_OLD_PRIMARY_QTY        IN NUMBER,
  X_OLD_SECONDARY_QTY      IN NUMBER,
  X_NEW_PRIMARY_QTY        IN NUMBER,
  X_NEW_SECONDARY_QTY      IN NUMBER,
  X_TRANSACTION_PRIMARY_QTY   IN NUMBER,
  X_TRANSACTION_SECONDARY_QTY IN NUMBER,
  X_TRANSACTION_UPDATE_FLAG   IN VARCHAR2,
  X_LAST_UPDATED_BY        IN NUMBER,
  X_LAST_UPDATE_DATE       IN DATE,
  X_LAST_UPDATE_LOGIN      IN NUMBER,
  x_return_status           OUT NOCOPY VARCHAR2,
  x_msg_count               OUT NOCOPY NUMBER,
  x_msg_data                OUT NOCOPY VARCHAR2)


IS

BEGIN


  x_return_status := FND_API.G_RET_STS_SUCCESS;
  UPDATE MTL_LOT_CONV_AUDIT_DETAILS SET
    CONV_AUDIT_ID = X_CONV_AUDIT_ID,
    REVISION = X_REVISION,
    ORGANIZATION_ID = X_ORGANIZATION_ID,
    SUBINVENTORY_CODE = X_SUBINVENTORY_CODE,
    LPN_ID = X_LPN_ID,
    LOCATOR_ID = X_LOCATOR_ID,
    OLD_PRIMARY_QTY = X_OLD_PRIMARY_QTY,
    OLD_SECONDARY_QTY = X_OLD_SECONDARY_QTY,
    NEW_PRIMARY_QTY = X_NEW_PRIMARY_QTY,
    NEW_SECONDARY_QTY = X_NEW_SECONDARY_QTY,
    TRANSACTION_PRIMARY_QTY = X_TRANSACTION_PRIMARY_QTY,
    TRANSACTION_SECONDARY_QTY = X_TRANSACTION_SECONDARY_QTY,
    TRANSACTION_UPDATE_FLAG = X_TRANSACTION_UPDATE_FLAG,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN
    WHERE CONV_AUDIT_DETAIL_ID = X_CONV_AUDIT_DETAIL_ID;


  FND_MSG_PUB.Count_AND_GET
      (p_count => x_msg_count, p_data  => x_msg_data);

EXCEPTION

  WHEN OTHERS THEN
    x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
    IF (SQLCODE IS NOT NULL) THEN
      FND_MESSAGE.SET_NAME('INV','INV_LOTC_SQL_ERROR');
      FND_MESSAGE.SET_TOKEN('ERRCODE',SQLCODE);
      FND_MESSAGE.SET_TOKEN('ERRM',SQLERRM(SQLCODE));
      FND_MSG_PUB.Add;
    END IF;
    FND_MSG_PUB.Count_AND_GET
      (p_count => x_msg_count, p_data  => x_msg_data);


END UPDATE_ROW;



END MTL_LOT_CONV_AUD_DET_PKG;

/
