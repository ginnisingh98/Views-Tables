--------------------------------------------------------
--  DDL for Package Body JA_JAINAPCR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JA_JAINAPCR_XMLP_PKG" AS
/* $Header: JAINAPCRB.pls 120.1 2007/12/25 16:11:04 dwkrishn noship $ */
  FUNCTION CF_PO_NOFORMULA(P_PO_DISTRIBUTION_ID IN NUMBER) RETURN VARCHAR2 IS
    V_PO_NUM VARCHAR2(30);
    V_PO_HEADER_ID NUMBER;
  BEGIN
    SELECT
      PO_HEADER_ID
    INTO V_PO_HEADER_ID
    FROM
      PO_DISTRIBUTIONS_ALL
    WHERE PO_DISTRIBUTION_ID = P_PO_DISTRIBUTION_ID;
    SELECT
      SEGMENT1
    INTO V_PO_NUM
    FROM
      PO_HEADERS_ALL
    WHERE PO_HEADER_ID = V_PO_HEADER_ID;
    RETURN (V_PO_NUM);
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN NULL;
  END CF_PO_NOFORMULA;
  FUNCTION CF_ORGNFORMULA(P_PO_DISTRIBUTION_ID IN NUMBER) RETURN VARCHAR2 IS
    V_ORGANIZATION_NAME VARCHAR2(60);
    V_SHIP_TO_LOCATION_ID NUMBER;
    V_LOCATION_ID NUMBER;
    V_ORGANIZATION_ID NUMBER;
    V_PO_HEADER_ID NUMBER;
  BEGIN
    SELECT
      PO_HEADER_ID
    INTO V_PO_HEADER_ID
    FROM
      PO_DISTRIBUTIONS_ALL
    WHERE PO_DISTRIBUTION_ID = P_PO_DISTRIBUTION_ID;
    SELECT
      SHIP_TO_LOCATION_ID
    INTO V_SHIP_TO_LOCATION_ID
    FROM
      PO_HEADERS_ALL
    WHERE PO_HEADER_ID = V_PO_HEADER_ID;
    SELECT
      INVENTORY_ORGANIZATION_ID
    INTO V_ORGANIZATION_ID
    FROM
      HR_LOCATIONS
    WHERE LOCATION_ID = V_SHIP_TO_LOCATION_ID;
    SELECT
      ORGANIZATION_NAME
    INTO V_ORGANIZATION_NAME
    FROM
      ORG_ORGANIZATION_DEFINITIONS
    WHERE ORGANIZATION_ID = V_ORGANIZATION_ID;
    RETURN (V_ORGANIZATION_NAME);
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN NULL;
  END CF_ORGNFORMULA;
  FUNCTION CF_LOCNFORMULA(P_PO_DISTRIBUTION_ID IN NUMBER) RETURN VARCHAR2 IS
    V_LOCATION_CODE HR_LOCATIONS.LOCATION_CODE%TYPE;
    V_SHIP_TO_LOCATION_ID NUMBER;
    V_LOCATION_ID NUMBER;
    V_PO_HEADER_ID NUMBER;
    CURSOR C_LOC_CODE IS
      SELECT
        LOCATION_CODE
      FROM
        HR_LOCATIONS HL,
        PO_HEADERS_ALL PH,
        PO_DISTRIBUTIONS_ALL POD
      WHERE PH.PO_HEADER_ID = POD.PO_HEADER_ID
        AND POD.PO_DISTRIBUTION_ID = P_PO_DISTRIBUTION_ID
        AND HL.LOCATION_ID = PH.SHIP_TO_LOCATION_ID;
  BEGIN
    OPEN C_LOC_CODE;
    FETCH C_LOC_CODE
     INTO V_LOCATION_CODE;
    CLOSE C_LOC_CODE;
    RETURN (V_LOCATION_CODE);
  END CF_LOCNFORMULA;
  FUNCTION CF_DR_REFORMULA(ORG_ID IN NUMBER
                          ,INVOICE_TYPE_LOOKUP_CODE IN VARCHAR2
                          ,ACCT_DR IN NUMBER
                          ,EXCHANGE_RATE_TYPE IN VARCHAR2
                          ,INVOICE_CURRENCY_CODE IN VARCHAR2
                          ,EXCHANGE_DATE IN DATE
                          ,EXCHANGE_RATE IN NUMBER
                          ,DR_VAL IN NUMBER) RETURN NUMBER IS
    V_DR_RE NUMBER;
    V_SET_OF_BOOKS_ID NUMBER;
    V_FUNCTIONAL_CURRENCY VARCHAR2(100);
  BEGIN
    SELECT
      SET_OF_BOOKS_ID
    INTO V_SET_OF_BOOKS_ID
    FROM
      HR_OPERATING_UNITS
    WHERE ORGANIZATION_ID = NVL(ORG_ID
       ,0);
    SELECT
      CURRENCY_CODE
    INTO V_FUNCTIONAL_CURRENCY
    FROM
      GL_SETS_OF_BOOKS
    WHERE SET_OF_BOOKS_ID = V_SET_OF_BOOKS_ID;
    IF (NVL(INVOICE_TYPE_LOOKUP_CODE
       ,'N') = ('GAIN/LOSS')) THEN
      /*SRW.MESSAGE('9'
                 ,'In gain loss')*/NULL;
      IF (ACCT_DR = 0) THEN
        RETURN (0);
      ELSE
        RETURN (ACCT_DR);
      END IF;
      /*SRW.MESSAGE(9
                 ,'Value of acctd dr ' || ACCT_DR)*/NULL;
    ELSE
      IF EXCHANGE_RATE_TYPE IS NOT NULL THEN
        V_DR_RE := JAI_CMN_UTILS_PKG.CURRENCY_CONVERSION(V_SET_OF_BOOKS_ID
                                                        ,INVOICE_CURRENCY_CODE
                                                        ,EXCHANGE_DATE
                                                        ,EXCHANGE_RATE_TYPE
                                                        ,EXCHANGE_RATE);
        V_DR_RE := V_DR_RE * DR_VAL;
        RETURN (V_DR_RE);
      ELSE
        RETURN (DR_VAL);
      END IF;
    END IF;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      /*SRW.MESSAGE(3
                 ,SQLERRM)*/NULL;
      RETURN (NULL);
  END CF_DR_REFORMULA;
  FUNCTION CF_CR_REFORMULA(ORG_ID IN NUMBER
                          ,INVOICE_TYPE_LOOKUP_CODE IN VARCHAR2
                          ,ACCT_CR IN NUMBER
                          ,EXCHANGE_RATE_TYPE IN VARCHAR2
                          ,INVOICE_CURRENCY_CODE IN VARCHAR2
                          ,EXCHANGE_DATE IN DATE
                          ,EXCHANGE_RATE IN NUMBER
                          ,CR_VAL IN NUMBER) RETURN NUMBER IS
    V_CR_RE NUMBER;
    V_SET_OF_BOOKS_ID NUMBER;
    V_FUNCTIONAL_CURRENCY VARCHAR2(100);
  BEGIN
    SELECT
      SET_OF_BOOKS_ID
    INTO V_SET_OF_BOOKS_ID
    FROM
      HR_OPERATING_UNITS
    WHERE ORGANIZATION_ID = NVL(ORG_ID
       ,0);
    SELECT
      CURRENCY_CODE
    INTO V_FUNCTIONAL_CURRENCY
    FROM
      GL_SETS_OF_BOOKS
    WHERE SET_OF_BOOKS_ID = V_SET_OF_BOOKS_ID;
    IF (NVL(INVOICE_TYPE_LOOKUP_CODE
       ,'N') = ('GAIN/LOSS')) THEN
      IF (ACCT_CR = 0) THEN
        RETURN (0);
      ELSE
        RETURN (ACCT_CR);
      END IF;
    ELSE
      IF EXCHANGE_RATE_TYPE IS NOT NULL THEN
        V_CR_RE := JAI_CMN_UTILS_PKG.CURRENCY_CONVERSION(V_SET_OF_BOOKS_ID
                                                        ,INVOICE_CURRENCY_CODE
                                                        ,EXCHANGE_DATE
                                                        ,EXCHANGE_RATE_TYPE
                                                        ,EXCHANGE_RATE);
        V_CR_RE := V_CR_RE * CR_VAL;
        RETURN (V_CR_RE);
      ELSE
        RETURN (CR_VAL);
      END IF;
    END IF;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      /*SRW.MESSAGE(4
                 ,SQLERRM)*/NULL;
      RETURN (NULL);
  END CF_CR_REFORMULA;
  FUNCTION CF_BATCHFORMULA(P_BATCH_ID IN NUMBER) RETURN VARCHAR2 IS
    V_BATCH_NAME VARCHAR2(50);
  BEGIN
    SELECT
      BATCH_NAME
    INTO V_BATCH_NAME
    FROM
      AP_BATCHES_ALL
    WHERE BATCH_ID = P_BATCH_ID;
    RETURN (V_BATCH_NAME);
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN (NULL);
  END CF_BATCHFORMULA;
  FUNCTION CF_ADDRFORMULA(P_INVOICE_NUM IN VARCHAR2) RETURN VARCHAR2 IS
    V_LEGAL_ENTITY NUMBER;
    V_NAME VARCHAR2(60);
    V_SET_OF_BOOKS_ID NUMBER;
  BEGIN
    SELECT
      DISTINCT
      SET_OF_BOOKS_ID
    INTO V_SET_OF_BOOKS_ID
    FROM
      AP_INVOICES_ALL
    WHERE INVOICE_NUM = P_INVOICE_NUM;
    SELECT
      NAME
    INTO V_NAME
    FROM
      GL_SETS_OF_BOOKS_V
    WHERE SET_OF_BOOKS_ID = V_SET_OF_BOOKS_ID;
    RETURN (V_NAME);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_ADDRFORMULA;
  FUNCTION CF_ACCOUNTFORMULA(CCID IN NUMBER) RETURN VARCHAR2 IS
    V_ACCOUNT VARCHAR2(1000);
  BEGIN
    JAI_CMN_GL_PKG.GET_ACCOUNT_NUMBER(P_CHART_OF_ACCTS_ID
                                     ,CCID
                                     ,V_ACCOUNT);
    RETURN (V_ACCOUNT);
  END CF_ACCOUNTFORMULA;
  FUNCTION DEBIT_BALANCE(CAL_DATE IN DATE) RETURN NUMBER IS
    V_VENDOR_ID NUMBER;
    V_SET_OF_BOOKS_ID NUMBER;
    V_FUNCTIONAL_CURRENCY VARCHAR2(100);
    V_VENDOR_SITE_CODE VARCHAR2(15) := P_VENDOR_SITE_CODE2;
    V_ORG_ID1 NUMBER := P_ORG_ID1;
    V_SEGMENT2 NUMBER := P_SEGMENT2;
    V_DEBIT_BALANCE NUMBER;
  BEGIN
    SELECT
      VENDOR_ID
    INTO V_VENDOR_ID
    FROM
      PO_VENDORS
    WHERE SEGMENT1 = V_SEGMENT2;
    SELECT
      SET_OF_BOOKS_ID
    INTO V_SET_OF_BOOKS_ID
    FROM
      HR_OPERATING_UNITS
    WHERE ORGANIZATION_ID = NVL(V_ORG_ID1
       ,0);
    SELECT
      CURRENCY_CODE
    INTO V_FUNCTIONAL_CURRENCY
    FROM
      GL_SETS_OF_BOOKS
    WHERE SET_OF_BOOKS_ID = V_SET_OF_BOOKS_ID;
    V_DEBIT_BALANCE := JAI_AP_RPT_APCR_PKG.COMPUTE_DEBIT_BALANCE(CAL_DATE
                                                                ,V_VENDOR_ID
                                                                ,V_SET_OF_BOOKS_ID
                                                                ,V_VENDOR_SITE_CODE
                                                                ,P_ORG_ID);
    /*SRW.MESSAGE(1000
               ,'return value : ' || TO_CHAR(V_DEBIT_BALANCE))*/NULL;
    RETURN (V_DEBIT_BALANCE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      /*SRW.MESSAGE(1
                 ,SQLERRM)*/NULL;
      RETURN (NULL);
  END DEBIT_BALANCE;
  FUNCTION CREDIT_BALANCE(CAL_DATE IN DATE) RETURN NUMBER IS
    V_VENDOR_ID NUMBER;
    V_SET_OF_BOOKS_ID NUMBER;
    V_FUNCTIONAL_CURRENCY VARCHAR2(100);
    V_VENDOR_SITE_CODE VARCHAR2(15) := P_VENDOR_SITE_CODE2;
    V_ORG_ID1 NUMBER := P_ORG_ID1;
    V_SEGMENT2 NUMBER := P_SEGMENT2;
    V_CREDIT_BALANCE NUMBER;
  BEGIN
    SELECT
      VENDOR_ID
    INTO V_VENDOR_ID
    FROM
      PO_VENDORS
    WHERE SEGMENT1 = V_SEGMENT2;
    SELECT
      SET_OF_BOOKS_ID
    INTO V_SET_OF_BOOKS_ID
    FROM
      HR_OPERATING_UNITS
    WHERE ORGANIZATION_ID = NVL(V_ORG_ID1
       ,0);
    /*SRW.MESSAGE(1000
               ,'input to credit balance : ' || CAL_DATE || '/' || V_VENDOR_ID || '/' || V_SET_OF_BOOKS_ID || '/' || V_VENDOR_SITE_CODE || '/' || P_ORG_ID)*/NULL;
    V_CREDIT_BALANCE := JAI_AP_RPT_APCR_PKG.COMPUTE_CREDIT_BALANCE(CAL_DATE
                                                                  ,V_VENDOR_ID
                                                                  ,V_SET_OF_BOOKS_ID
                                                                  ,V_VENDOR_SITE_CODE
                                                                  ,P_ORG_ID);
    /*SRW.MESSAGE(1000
               ,'return value : ' || TO_CHAR(V_CREDIT_BALANCE))*/NULL;
    RETURN (V_CREDIT_BALANCE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      /*SRW.MESSAGE(2
                 ,SQLERRM)*/NULL;
      RETURN (NULL);
  END CREDIT_BALANCE;
  FUNCTION CF_V_NAMEFORMULA RETURN VARCHAR2 IS
    CURSOR FOR_NAME(V_ID IN NUMBER,V_NO IN VARCHAR2) IS
      SELECT
        VENDOR_NAME
      FROM
        PO_VENDORS
      WHERE VENDOR_ID = V_ID
      OR SEGMENT1 = V_NO;
    V_VENDOR_NAME VARCHAR2(80);
  BEGIN
    OPEN FOR_NAME(P_VENDOR_ID,P_VENDOR_NO);
    FETCH FOR_NAME
     INTO V_VENDOR_NAME;
    CLOSE FOR_NAME;
    RETURN (V_VENDOR_NAME);
  END CF_V_NAMEFORMULA;
  FUNCTION CF_P_SOBFORMULA RETURN VARCHAR2 IS
    CURSOR FOR_SOB_ID(ORG_ID IN NUMBER) IS
      SELECT
        SET_OF_BOOKS_ID
      FROM
        HR_OPERATING_UNITS
      WHERE ORGANIZATION_ID = ORG_ID;
    CURSOR FOR_SOB_NAME(SOB_ID IN NUMBER) IS
      SELECT
        NAME
      FROM
        GL_SETS_OF_BOOKS
      WHERE SET_OF_BOOKS_ID = SOB_ID;
    V_SET_OF_BOOKS_ID NUMBER;
    V_SOB_NAME VARCHAR2(100);
  BEGIN
    OPEN FOR_SOB_ID(P_ORG_ID);
    FETCH FOR_SOB_ID
     INTO V_SET_OF_BOOKS_ID;
    CLOSE FOR_SOB_ID;
    OPEN FOR_SOB_NAME(V_SET_OF_BOOKS_ID);
    FETCH FOR_SOB_NAME
     INTO V_SOB_NAME;
    CLOSE FOR_SOB_NAME;
    RETURN (V_SOB_NAME);
  END CF_P_SOBFORMULA;
  FUNCTION CF_TOTAL_CRFORMULA(VENDOR_SITE_CODE2 IN VARCHAR2
                             ,SEGMENT2 IN VARCHAR2
                             ,ORG_ID1 IN NUMBER) RETURN NUMBER IS
    V_BAL NUMBER;
  BEGIN
    P_VENDOR_SITE_CODE2 := VENDOR_SITE_CODE2;
    P_ORG_ID1 := ORG_ID1;
    P_SEGMENT2 := SEGMENT2;
    V_BAL := credit_balance(p_from_date);
    RETURN (V_BAL);
  END CF_TOTAL_CRFORMULA;
  FUNCTION CF_TOTAL_DRFORMULA(VENDOR_SITE_CODE2 IN VARCHAR2
                             ,SEGMENT2 IN VARCHAR2
                             ,ORG_ID1 IN NUMBER) RETURN NUMBER IS
    V_BAL NUMBER;
  BEGIN
    P_VENDOR_SITE_CODE2 := VENDOR_SITE_CODE2;
    P_ORG_ID1 := ORG_ID1;
    P_SEGMENT2 := SEGMENT2;
    V_BAL := debit_balance(p_from_date);
    RETURN (V_BAL);
  END CF_TOTAL_DRFORMULA;
  FUNCTION CF_CLOSING_BAL_CRFORMULA0070(VENDOR_SITE_CODE2 IN VARCHAR2
                                       ,SEGMENT2 IN VARCHAR2
                                       ,ORG_ID1 IN NUMBER) RETURN NUMBER IS
    V_BAL NUMBER;
  BEGIN
    P_VENDOR_SITE_CODE2 := VENDOR_SITE_CODE2;
    P_ORG_ID1 := ORG_ID1;
    P_SEGMENT2 := SEGMENT2;
    V_BAL := credit_balance(p_to_date + 1);
    RETURN (V_BAL);
  END CF_CLOSING_BAL_CRFORMULA0070;
  FUNCTION CF_CLOSING_BAL_DRFORMULA0072(VENDOR_SITE_CODE2 IN VARCHAR2
                                       ,SEGMENT2 IN VARCHAR2
                                       ,ORG_ID1 IN NUMBER) RETURN NUMBER IS
    V_BAL NUMBER;
  BEGIN
    P_VENDOR_SITE_CODE2 := VENDOR_SITE_CODE2;
    P_ORG_ID1 := ORG_ID1;
    P_SEGMENT2 := SEGMENT2;
    V_BAL := debit_balance(p_to_date + 1);
    RETURN (V_BAL);
  END CF_CLOSING_BAL_DRFORMULA0072;
  FUNCTION CF_TOTAL_CR1FORMULA(CF_TOTAL_CR IN NUMBER
                              ,CF_TOTAL_DR IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF CF_TOTAL_CR - CF_TOTAL_DR > 0 THEN
      RETURN (CF_TOTAL_CR - CF_TOTAL_DR);
    ELSE
      RETURN (0);
    END IF;
    RETURN NULL;
  END CF_TOTAL_CR1FORMULA;
  FUNCTION CF_TOTAL_DR1FORMULA(CF_TOTAL_DR IN NUMBER
                              ,CF_TOTAL_CR IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF CF_TOTAL_DR - CF_TOTAL_CR > 0 THEN
      RETURN (CF_TOTAL_DR - CF_TOTAL_CR);
    ELSE
      RETURN (0);
    END IF;
    RETURN NULL;
  END CF_TOTAL_DR1FORMULA;
  FUNCTION CF_CLOSING_BAL_CR1FORMULA0076(CF_CLOSING_BAL_CR IN NUMBER
                                        ,CF_CLOSING_BAL_DR IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF CF_CLOSING_BAL_CR - CF_CLOSING_BAL_DR > 0 THEN
      RETURN (CF_CLOSING_BAL_CR - CF_CLOSING_BAL_DR);
    ELSE
      RETURN (0);
    END IF;
    RETURN NULL;
  END CF_CLOSING_BAL_CR1FORMULA0076;
  FUNCTION CF_CLOSING_BAL_DR1FORMULA0078(CF_CLOSING_BAL_DR IN NUMBER
                                        ,CF_CLOSING_BAL_CR IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF CF_CLOSING_BAL_DR - CF_CLOSING_BAL_CR > 0 THEN
      RETURN (CF_CLOSING_BAL_DR - CF_CLOSING_BAL_CR);
    ELSE
      RETURN (0);
    END IF;
    RETURN NULL;
  END CF_CLOSING_BAL_DR1FORMULA0078;
  FUNCTION CF_1FORMULA(CF_TOTAL_CR1 IN NUMBER
                      ,CS_2 IN NUMBER
                      ,CS_1 IN NUMBER
                      ,CF_TOTAL_DR1 IN NUMBER) RETURN NUMBER IS
    V_OPEN_BALANCE NUMBER := 0;
  BEGIN
    IF CF_TOTAL_CR1 > 0 THEN
      RETURN (NVL((NVL(CS_2
                    ,0) - NVL(CS_1
                    ,0))
                ,0) + CF_TOTAL_CR1);
    ELSIF (CF_TOTAL_DR1) > 0 THEN
      RETURN (NVL((NVL(CS_2
                    ,0) - NVL(CS_1
                    ,0))
                ,0) - CF_TOTAL_DR1);
    ELSE
      RETURN NVL((NVL(CS_2
                    ,0) - NVL(CS_1
                    ,0))
                ,0);
    END IF;
    RETURN NULL;
  END CF_1FORMULA;
  FUNCTION CF_2FORMULA(CS_3 IN NUMBER
                      ,CS_4 IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN NVL((NVL(CS_3
                  ,0) - NVL(CS_4
                  ,0))
              ,0);
  END CF_2FORMULA;
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    CURSOR C_PROGRAM_ID(P_REQUEST_ID IN NUMBER) IS
      SELECT
        CONCURRENT_PROGRAM_ID,
        NVL(ENABLE_TRACE
           ,'N')
      FROM
        FND_CONCURRENT_REQUESTS
      WHERE REQUEST_ID = P_REQUEST_ID;
    V_ENABLE_TRACE FND_CONCURRENT_PROGRAMS.ENABLE_TRACE%TYPE;
    V_PROGRAM_ID FND_CONCURRENT_PROGRAMS.CONCURRENT_PROGRAM_ID%TYPE;
    CURSOR GET_AUDSID IS
      SELECT
        A.SID,
        A.SERIAL#,
        B.SPID
      FROM
        V$SESSION A,
        V$PROCESS B
      WHERE AUDSID = USERENV('SESSIONID')
        AND A.PADDR = B.ADDR;
    CURSOR GET_DBNAME IS
      SELECT
        NAME
      FROM
        V$DATABASE;
    AUDSID NUMBER := USERENV('SESSIONID');
    SID NUMBER;
    SERIAL NUMBER;
    SPID VARCHAR2(9);
    NAME1 VARCHAR2(25);
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    P_FROM_DATE_V := TO_CHAR(P_FROM_DATE, 'DD-MON-YYYY');
    P_TO_DATE_V := TO_CHAR(P_TO_DATE, 'DD-MON-YYYY');
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    /*SRW.MESSAGE(1275
               ,'Report Version is 120.2 Last modified date is 25/07/2005')*/NULL;
    IF P_TO_DATE < P_FROM_DATE THEN
      /*SRW.MESSAGE(1275
                 ,'From Date can''t be greater than To Date')*/NULL;
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END IF;
    BEGIN
      OPEN C_PROGRAM_ID(P_CONC_REQUEST_ID);
      FETCH C_PROGRAM_ID
       INTO V_PROGRAM_ID,V_ENABLE_TRACE;
      CLOSE C_PROGRAM_ID;
      /*SRW.MESSAGE(1275
                 ,'v_program_id -> ' || V_PROGRAM_ID || ', v_enable_trace -> ' || V_ENABLE_TRACE || ', request_id -> ' || P_CONC_REQUEST_ID)*/NULL;
      IF V_ENABLE_TRACE = 'Y' THEN
        OPEN GET_AUDSID;
        FETCH GET_AUDSID
         INTO SID,SERIAL,SPID;
        CLOSE GET_AUDSID;
        OPEN GET_DBNAME;
        FETCH GET_DBNAME
         INTO NAME1;
        CLOSE GET_DBNAME;
        /*SRW.MESSAGE(599
                   ,'TraceFile Name = ' || LOWER(NAME1) || '_ora_' || SPID || '.trc')*/NULL;
        EXECUTE IMMEDIATE
          'ALTER SESSION SET EVENTS ''10046 trace name context forever, level 4''';
      END IF;
      RETURN (TRUE);
    EXCEPTION
      WHEN OTHERS THEN
        /*SRW.MESSAGE(1275
                   ,'Error during enabling the trace. ErrCode -> ' || SQLCODE || ', ErrMesg ->' || SQLERRM)*/NULL;
        RETURN (TRUE);
    END;
  END BEFOREREPORT;
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;
END JA_JAINAPCR_XMLP_PKG;



/
