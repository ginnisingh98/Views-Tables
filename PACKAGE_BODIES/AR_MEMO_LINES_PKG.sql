--------------------------------------------------------
--  DDL for Package Body AR_MEMO_LINES_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."AR_MEMO_LINES_PKG" as
/* $Header: ARPAMLSB.pls 120.3 2005/04/15 16:40:51 djancis ship $ */
procedure INSERT_ROW (
  X_ROWID in out NOCOPY VARCHAR2,
  X_org_id in number default null, --SSA changes anukumar
  X_MEMO_LINE_ID in NUMBER,
  X_SET_OF_BOOKS_ID in NUMBER,
  X_LINE_TYPE in VARCHAR2,
  X_START_DATE in DATE,
  X_GL_ID_REV in NUMBER,
  X_TAX_CODE in VARCHAR2,
  X_UOM_CODE in VARCHAR2,
  X_UNIT_STD_PRICE in NUMBER,
  X_INVOICING_RULE_ID in NUMBER,
  X_ACCOUNTING_RULE_ID in NUMBER,
  X_END_DATE in DATE,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_GLOBAL_ATTRIBUTE1 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE2 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE3 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE4 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE5 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE6 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE7 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE8 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE9 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE10 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE11 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE12 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE13 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE14 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE15 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE16 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE17 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE18 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE19 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE20 in VARCHAR2,
  X_NAME in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER,
  X_TAX_PRODUCT_CATEGORY in VARCHAR2
) is
-- SSA chnages anukumar  X_ORG_ID   NUMBER;
  cursor C is select ROWID from AR_MEMO_LINES_ALL_B
    where MEMO_LINE_ID = X_MEMO_LINE_ID
    ;
begin

  /*
     bug 1722260 : do not nvl(org_id) to -99, rather simply return to_number(null)
     Why do we need the decode for client_info = ' ' ?
     Apparently there are situations wherein client_info returns a space rather then null
     and the decode is necessary to avoid the bug logged in 1328940.
  */

/* SSA chnages anukumar  select TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),
                  ' ', NULL,
                       SUBSTRB(USERENV('CLIENT_INFO'),1,10)))
    into X_ORG_ID
    from dual;
 */

  insert into AR_MEMO_LINES_ALL_B (
    ORG_ID,
    MEMO_LINE_ID,
    SET_OF_BOOKS_ID,
    LINE_TYPE,
    START_DATE,
    GL_ID_REV,
    TAX_CODE,
    UOM_CODE,
    UNIT_STD_PRICE,
    INVOICING_RULE_ID,
    ACCOUNTING_RULE_ID,
    END_DATE,
    ATTRIBUTE_CATEGORY,
    ATTRIBUTE1,
    ATTRIBUTE2,
    ATTRIBUTE3,
    ATTRIBUTE4,
    ATTRIBUTE5,
    ATTRIBUTE6,
    ATTRIBUTE7,
    ATTRIBUTE8,
    ATTRIBUTE9,
    ATTRIBUTE10,
    ATTRIBUTE11,
    ATTRIBUTE12,
    ATTRIBUTE13,
    ATTRIBUTE14,
    ATTRIBUTE15,
    GLOBAL_ATTRIBUTE_CATEGORY,
    GLOBAL_ATTRIBUTE1,
    GLOBAL_ATTRIBUTE2,
    GLOBAL_ATTRIBUTE3,
    GLOBAL_ATTRIBUTE4,
    GLOBAL_ATTRIBUTE5,
    GLOBAL_ATTRIBUTE6,
    GLOBAL_ATTRIBUTE7,
    GLOBAL_ATTRIBUTE8,
    GLOBAL_ATTRIBUTE9,
    GLOBAL_ATTRIBUTE10,
    GLOBAL_ATTRIBUTE11,
    GLOBAL_ATTRIBUTE12,
    GLOBAL_ATTRIBUTE13,
    GLOBAL_ATTRIBUTE14,
    GLOBAL_ATTRIBUTE15,
    GLOBAL_ATTRIBUTE16,
    GLOBAL_ATTRIBUTE17,
    GLOBAL_ATTRIBUTE18,
    GLOBAL_ATTRIBUTE19,
    GLOBAL_ATTRIBUTE20,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    TAX_PRODUCT_CATEGORY
  ) values (
    X_ORG_ID,
    X_MEMO_LINE_ID,
    X_SET_OF_BOOKS_ID,
    X_LINE_TYPE,
    X_START_DATE,
    X_GL_ID_REV,
    X_TAX_CODE,
    X_UOM_CODE,
    X_UNIT_STD_PRICE,
    X_INVOICING_RULE_ID,
    X_ACCOUNTING_RULE_ID,
    X_END_DATE,
    X_ATTRIBUTE_CATEGORY,
    X_ATTRIBUTE1,
    X_ATTRIBUTE2,
    X_ATTRIBUTE3,
    X_ATTRIBUTE4,
    X_ATTRIBUTE5,
    X_ATTRIBUTE6,
    X_ATTRIBUTE7,
    X_ATTRIBUTE8,
    X_ATTRIBUTE9,
    X_ATTRIBUTE10,
    X_ATTRIBUTE11,
    X_ATTRIBUTE12,
    X_ATTRIBUTE13,
    X_ATTRIBUTE14,
    X_ATTRIBUTE15,
    X_GLOBAL_ATTRIBUTE_CATEGORY,
    X_GLOBAL_ATTRIBUTE1,
    X_GLOBAL_ATTRIBUTE2,
    X_GLOBAL_ATTRIBUTE3,
    X_GLOBAL_ATTRIBUTE4,
    X_GLOBAL_ATTRIBUTE5,
    X_GLOBAL_ATTRIBUTE6,
    X_GLOBAL_ATTRIBUTE7,
    X_GLOBAL_ATTRIBUTE8,
    X_GLOBAL_ATTRIBUTE9,
    X_GLOBAL_ATTRIBUTE10,
    X_GLOBAL_ATTRIBUTE11,
    X_GLOBAL_ATTRIBUTE12,
    X_GLOBAL_ATTRIBUTE13,
    X_GLOBAL_ATTRIBUTE14,
    X_GLOBAL_ATTRIBUTE15,
    X_GLOBAL_ATTRIBUTE16,
    X_GLOBAL_ATTRIBUTE17,
    X_GLOBAL_ATTRIBUTE18,
    X_GLOBAL_ATTRIBUTE19,
    X_GLOBAL_ATTRIBUTE20,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN,
    X_TAX_PRODUCT_CATEGORY
  );

  insert into AR_MEMO_LINES_ALL_TL (
    ORG_ID,
    MEMO_LINE_ID,
    NAME,
    DESCRIPTION,
    LAST_UPDATE_DATE,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    LANGUAGE,
    SOURCE_LANG
  ) select
    X_ORG_ID,
    X_MEMO_LINE_ID,
    X_NAME,
    X_DESCRIPTION,
    X_LAST_UPDATE_DATE,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN,
    L.LANGUAGE_CODE,
    userenv('LANG')
  from FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and not exists
    (select NULL
    from AR_MEMO_LINES_ALL_TL T
    where T.MEMO_LINE_ID = X_MEMO_LINE_ID
    and T.LANGUAGE = L.LANGUAGE_CODE
 /* SSA changes anukumar
     and NVL(T.ORG_ID, NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),
            ' ', NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99)) =
        NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),
            ' ', NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99) );
  */
    and NVL(T.ORG_ID,-99) = NVL(X_ORG_ID,-99) ); --SSA changes anukumar


  open c;
  fetch c into X_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

end INSERT_ROW;

procedure LOCK_ROW (
  X_org_id in number default null, --SSA changes anukumar
  X_MEMO_LINE_ID in NUMBER,
  X_SET_OF_BOOKS_ID in NUMBER,
  X_LINE_TYPE in VARCHAR2,
  X_START_DATE in DATE,
  X_GL_ID_REV in NUMBER,
  X_TAX_CODE in VARCHAR2,
  X_UOM_CODE in VARCHAR2,
  X_UNIT_STD_PRICE in NUMBER,
  X_INVOICING_RULE_ID in NUMBER,
  X_ACCOUNTING_RULE_ID in NUMBER,
  X_END_DATE in DATE,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_GLOBAL_ATTRIBUTE1 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE2 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE3 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE4 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE5 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE6 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE7 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE8 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE9 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE10 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE11 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE12 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE13 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE14 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE15 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE16 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE17 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE18 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE19 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE20 in VARCHAR2,
  X_NAME in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_TAX_PRODUCT_CATEGORY in VARCHAR2
) is
  cursor c is select
      SET_OF_BOOKS_ID,
      LINE_TYPE,
      START_DATE,
      GL_ID_REV,
      TAX_CODE,
      UOM_CODE,
      UNIT_STD_PRICE,
      INVOICING_RULE_ID,
      ACCOUNTING_RULE_ID,
      END_DATE,
      ATTRIBUTE_CATEGORY,
      ATTRIBUTE1,
      ATTRIBUTE2,
      ATTRIBUTE3,
      ATTRIBUTE4,
      ATTRIBUTE5,
      ATTRIBUTE6,
      ATTRIBUTE7,
      ATTRIBUTE8,
      ATTRIBUTE9,
      ATTRIBUTE10,
      ATTRIBUTE11,
      ATTRIBUTE12,
      ATTRIBUTE13,
      ATTRIBUTE14,
      ATTRIBUTE15,
      GLOBAL_ATTRIBUTE_CATEGORY,
      GLOBAL_ATTRIBUTE1,
      GLOBAL_ATTRIBUTE2,
      GLOBAL_ATTRIBUTE3,
      GLOBAL_ATTRIBUTE4,
      GLOBAL_ATTRIBUTE5,
      GLOBAL_ATTRIBUTE6,
      GLOBAL_ATTRIBUTE7,
      GLOBAL_ATTRIBUTE8,
      GLOBAL_ATTRIBUTE9,
      GLOBAL_ATTRIBUTE10,
      GLOBAL_ATTRIBUTE11,
      GLOBAL_ATTRIBUTE12,
      GLOBAL_ATTRIBUTE13,
      GLOBAL_ATTRIBUTE14,
      GLOBAL_ATTRIBUTE15,
      GLOBAL_ATTRIBUTE16,
      GLOBAL_ATTRIBUTE17,
      GLOBAL_ATTRIBUTE18,
      GLOBAL_ATTRIBUTE19,
      GLOBAL_ATTRIBUTE20,
      TAX_PRODUCT_CATEGORY    /* ETAX */
    from AR_MEMO_LINES_ALL_B
    where MEMO_LINE_ID = X_MEMO_LINE_ID
  /* SSA chnages anukumer
      and   NVL(ORG_ID,NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
          NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99)) =
          NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
          NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99)
  */
    and  NVL(ORG_ID,-99) = NVL(X_ORG_ID,-99) --SSA changes anukumar
    for update of MEMO_LINE_ID nowait;
  recinfo c%rowtype;

  cursor c1 is select
      NAME,
      DESCRIPTION,
      decode(LANGUAGE, userenv('LANG'), 'Y', 'N') BASELANG
    from AR_MEMO_LINES_ALL_TL
    where MEMO_LINE_ID = X_MEMO_LINE_ID
    and userenv('LANG') in (LANGUAGE, SOURCE_LANG)
    and  NVL(ORG_ID,-99) = NVL(X_ORG_ID,-99) --SSA changes anukumar
  /* SSA chnages anukumer
         and   NVL(ORG_ID,NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
          NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99)) =
          NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
          NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99)
   */
    for update of MEMO_LINE_ID nowait;
begin
  open c;
  fetch c into recinfo;
  if (c%notfound) then
    close c;
    fnd_message.set_name('FND', 'FORM_RECORD_DELETED');
    app_exception.raise_exception;
  end if;
  close c;
  if (    (recinfo.SET_OF_BOOKS_ID = X_SET_OF_BOOKS_ID)
      AND (recinfo.LINE_TYPE = X_LINE_TYPE)
      AND (recinfo.START_DATE = X_START_DATE)
      AND ((recinfo.GL_ID_REV = X_GL_ID_REV)
           OR ((recinfo.GL_ID_REV is null) AND (X_GL_ID_REV is null)))
      AND ((recinfo.TAX_CODE = X_TAX_CODE)
           OR ((recinfo.TAX_CODE is null) AND (X_TAX_CODE is null)))
      AND ((recinfo.UOM_CODE = X_UOM_CODE)
           OR ((recinfo.UOM_CODE is null) AND (X_UOM_CODE is null)))
      AND ((recinfo.UNIT_STD_PRICE = X_UNIT_STD_PRICE)
           OR ((recinfo.UNIT_STD_PRICE is null) AND (X_UNIT_STD_PRICE is null)))
      AND ((recinfo.INVOICING_RULE_ID = X_INVOICING_RULE_ID)
           OR ((recinfo.INVOICING_RULE_ID is null) AND (X_INVOICING_RULE_ID is null)))
      AND ((recinfo.ACCOUNTING_RULE_ID = X_ACCOUNTING_RULE_ID)
           OR ((recinfo.ACCOUNTING_RULE_ID is null) AND (X_ACCOUNTING_RULE_ID is null)))
      AND ((recinfo.END_DATE = X_END_DATE)
           OR ((recinfo.END_DATE is null) AND (X_END_DATE is null)))
      AND ((recinfo.ATTRIBUTE_CATEGORY = X_ATTRIBUTE_CATEGORY)
           OR ((recinfo.ATTRIBUTE_CATEGORY is null) AND (X_ATTRIBUTE_CATEGORY is null)))
      AND ((recinfo.ATTRIBUTE1 = X_ATTRIBUTE1)
           OR ((recinfo.ATTRIBUTE1 is null) AND (X_ATTRIBUTE1 is null)))
      AND ((recinfo.ATTRIBUTE2 = X_ATTRIBUTE2)
           OR ((recinfo.ATTRIBUTE2 is null) AND (X_ATTRIBUTE2 is null)))
      AND ((recinfo.ATTRIBUTE3 = X_ATTRIBUTE3)
           OR ((recinfo.ATTRIBUTE3 is null) AND (X_ATTRIBUTE3 is null)))
      AND ((recinfo.ATTRIBUTE4 = X_ATTRIBUTE4)
           OR ((recinfo.ATTRIBUTE4 is null) AND (X_ATTRIBUTE4 is null)))
      AND ((recinfo.ATTRIBUTE5 = X_ATTRIBUTE5)
           OR ((recinfo.ATTRIBUTE5 is null) AND (X_ATTRIBUTE5 is null)))
      AND ((recinfo.ATTRIBUTE6 = X_ATTRIBUTE6)
           OR ((recinfo.ATTRIBUTE6 is null) AND (X_ATTRIBUTE6 is null)))
      AND ((recinfo.ATTRIBUTE7 = X_ATTRIBUTE7)
           OR ((recinfo.ATTRIBUTE7 is null) AND (X_ATTRIBUTE7 is null)))
      AND ((recinfo.ATTRIBUTE8 = X_ATTRIBUTE8)
           OR ((recinfo.ATTRIBUTE8 is null) AND (X_ATTRIBUTE8 is null)))
      AND ((recinfo.ATTRIBUTE9 = X_ATTRIBUTE9)
           OR ((recinfo.ATTRIBUTE9 is null) AND (X_ATTRIBUTE9 is null)))
      AND ((recinfo.ATTRIBUTE10 = X_ATTRIBUTE10)
           OR ((recinfo.ATTRIBUTE10 is null) AND (X_ATTRIBUTE10 is null)))
      AND ((recinfo.ATTRIBUTE11 = X_ATTRIBUTE11)
           OR ((recinfo.ATTRIBUTE11 is null) AND (X_ATTRIBUTE11 is null)))
      AND ((recinfo.ATTRIBUTE12 = X_ATTRIBUTE12)
           OR ((recinfo.ATTRIBUTE12 is null) AND (X_ATTRIBUTE12 is null)))
      AND ((recinfo.ATTRIBUTE13 = X_ATTRIBUTE13)
           OR ((recinfo.ATTRIBUTE13 is null) AND (X_ATTRIBUTE13 is null)))
      AND ((recinfo.ATTRIBUTE14 = X_ATTRIBUTE14)
           OR ((recinfo.ATTRIBUTE14 is null) AND (X_ATTRIBUTE14 is null)))
      AND ((recinfo.ATTRIBUTE15 = X_ATTRIBUTE15)
           OR ((recinfo.ATTRIBUTE15 is null) AND (X_ATTRIBUTE15 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE_CATEGORY = X_GLOBAL_ATTRIBUTE_CATEGORY)
           OR ((recinfo.GLOBAL_ATTRIBUTE_CATEGORY is null) AND (X_GLOBAL_ATTRIBUTE_CATEGORY is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE1 = X_GLOBAL_ATTRIBUTE1)
           OR ((recinfo.GLOBAL_ATTRIBUTE1 is null) AND (X_GLOBAL_ATTRIBUTE1 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE2 = X_GLOBAL_ATTRIBUTE2)
           OR ((recinfo.GLOBAL_ATTRIBUTE2 is null) AND (X_GLOBAL_ATTRIBUTE2 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE3 = X_GLOBAL_ATTRIBUTE3)
           OR ((recinfo.GLOBAL_ATTRIBUTE3 is null) AND (X_GLOBAL_ATTRIBUTE3 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE4 = X_GLOBAL_ATTRIBUTE4)
           OR ((recinfo.GLOBAL_ATTRIBUTE4 is null) AND (X_GLOBAL_ATTRIBUTE4 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE5 = X_GLOBAL_ATTRIBUTE5)
           OR ((recinfo.GLOBAL_ATTRIBUTE5 is null) AND (X_GLOBAL_ATTRIBUTE5 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE6 = X_GLOBAL_ATTRIBUTE6)
           OR ((recinfo.GLOBAL_ATTRIBUTE6 is null) AND (X_GLOBAL_ATTRIBUTE6 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE7 = X_GLOBAL_ATTRIBUTE7)
           OR ((recinfo.GLOBAL_ATTRIBUTE7 is null) AND (X_GLOBAL_ATTRIBUTE7 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE8 = X_GLOBAL_ATTRIBUTE8)
           OR ((recinfo.GLOBAL_ATTRIBUTE8 is null) AND (X_GLOBAL_ATTRIBUTE8 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE9 = X_GLOBAL_ATTRIBUTE9)
           OR ((recinfo.GLOBAL_ATTRIBUTE9 is null) AND (X_GLOBAL_ATTRIBUTE9 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE10 = X_GLOBAL_ATTRIBUTE10)
           OR ((recinfo.GLOBAL_ATTRIBUTE10 is null) AND (X_GLOBAL_ATTRIBUTE10 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE11 = X_GLOBAL_ATTRIBUTE11)
           OR ((recinfo.GLOBAL_ATTRIBUTE11 is null) AND (X_GLOBAL_ATTRIBUTE11 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE12 = X_GLOBAL_ATTRIBUTE12)
           OR ((recinfo.GLOBAL_ATTRIBUTE12 is null) AND (X_GLOBAL_ATTRIBUTE12 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE13 = X_GLOBAL_ATTRIBUTE13)
           OR ((recinfo.GLOBAL_ATTRIBUTE13 is null) AND (X_GLOBAL_ATTRIBUTE13 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE14 = X_GLOBAL_ATTRIBUTE14)
           OR ((recinfo.GLOBAL_ATTRIBUTE14 is null) AND (X_GLOBAL_ATTRIBUTE14 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE15 = X_GLOBAL_ATTRIBUTE15)
           OR ((recinfo.GLOBAL_ATTRIBUTE15 is null) AND (X_GLOBAL_ATTRIBUTE15 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE16 = X_GLOBAL_ATTRIBUTE16)
           OR ((recinfo.GLOBAL_ATTRIBUTE16 is null) AND (X_GLOBAL_ATTRIBUTE16 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE17 = X_GLOBAL_ATTRIBUTE17)
           OR ((recinfo.GLOBAL_ATTRIBUTE17 is null) AND (X_GLOBAL_ATTRIBUTE17 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE18 = X_GLOBAL_ATTRIBUTE18)
           OR ((recinfo.GLOBAL_ATTRIBUTE18 is null) AND (X_GLOBAL_ATTRIBUTE18 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE19 = X_GLOBAL_ATTRIBUTE19)
           OR ((recinfo.GLOBAL_ATTRIBUTE19 is null) AND (X_GLOBAL_ATTRIBUTE19 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE20 = X_GLOBAL_ATTRIBUTE20)
           OR ((recinfo.GLOBAL_ATTRIBUTE20 is null) AND (X_GLOBAL_ATTRIBUTE20 is null)))
      AND ((recinfo.TAX_PRODUCT_CATEGORY = X_TAX_PRODUCT_CATEGORY)
           OR ((recinfo.TAX_PRODUCT_CATEGORY is null) AND (X_TAX_PRODUCT_CATEGORY is null)))
  ) then
    null;
  else
    fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
    app_exception.raise_exception;
  end if;

  for tlinfo in c1 loop
    if (tlinfo.BASELANG = 'Y') then
      if (    ((tlinfo.NAME = X_NAME)
               OR ((tlinfo.NAME is null) AND (X_NAME is null)))
          AND ((tlinfo.DESCRIPTION = X_DESCRIPTION)
               OR ((tlinfo.DESCRIPTION is null) AND (X_DESCRIPTION is null)))
      ) then
        null;
      else
        fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
        app_exception.raise_exception;
      end if;
    end if;
  end loop;
  return;
end LOCK_ROW;

procedure UPDATE_ROW (
  X_org_id in number default null, --SSA changes anukumar
  X_MEMO_LINE_ID in NUMBER,
  X_SET_OF_BOOKS_ID in NUMBER,
  X_LINE_TYPE in VARCHAR2,
  X_START_DATE in DATE,
  X_GL_ID_REV in NUMBER,
  X_TAX_CODE in VARCHAR2,
  X_UOM_CODE in VARCHAR2,
  X_UNIT_STD_PRICE in NUMBER,
  X_INVOICING_RULE_ID in NUMBER,
  X_ACCOUNTING_RULE_ID in NUMBER,
  X_END_DATE in DATE,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_GLOBAL_ATTRIBUTE1 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE2 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE3 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE4 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE5 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE6 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE7 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE8 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE9 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE10 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE11 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE12 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE13 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE14 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE15 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE16 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE17 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE18 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE19 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE20 in VARCHAR2,
  X_NAME in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER,
  X_TAX_PRODUCT_CATEGORY in VARCHAR2
) is
begin
  update AR_MEMO_LINES_ALL_B set
    SET_OF_BOOKS_ID = X_SET_OF_BOOKS_ID,
    LINE_TYPE = X_LINE_TYPE,
    START_DATE = X_START_DATE,
    GL_ID_REV = X_GL_ID_REV,
    TAX_CODE = X_TAX_CODE,
    UOM_CODE = X_UOM_CODE,
    UNIT_STD_PRICE = X_UNIT_STD_PRICE,
    INVOICING_RULE_ID = X_INVOICING_RULE_ID,
    ACCOUNTING_RULE_ID = X_ACCOUNTING_RULE_ID,
    END_DATE = X_END_DATE,
    ATTRIBUTE_CATEGORY = X_ATTRIBUTE_CATEGORY,
    ATTRIBUTE1 = X_ATTRIBUTE1,
    ATTRIBUTE2 = X_ATTRIBUTE2,
    ATTRIBUTE3 = X_ATTRIBUTE3,
    ATTRIBUTE4 = X_ATTRIBUTE4,
    ATTRIBUTE5 = X_ATTRIBUTE5,
    ATTRIBUTE6 = X_ATTRIBUTE6,
    ATTRIBUTE7 = X_ATTRIBUTE7,
    ATTRIBUTE8 = X_ATTRIBUTE8,
    ATTRIBUTE9 = X_ATTRIBUTE9,
    ATTRIBUTE10 = X_ATTRIBUTE10,
    ATTRIBUTE11 = X_ATTRIBUTE11,
    ATTRIBUTE12 = X_ATTRIBUTE12,
    ATTRIBUTE13 = X_ATTRIBUTE13,
    ATTRIBUTE14 = X_ATTRIBUTE14,
    ATTRIBUTE15 = X_ATTRIBUTE15,
    GLOBAL_ATTRIBUTE_CATEGORY = X_GLOBAL_ATTRIBUTE_CATEGORY,
    GLOBAL_ATTRIBUTE1 = X_GLOBAL_ATTRIBUTE1,
    GLOBAL_ATTRIBUTE2 = X_GLOBAL_ATTRIBUTE2,
    GLOBAL_ATTRIBUTE3 = X_GLOBAL_ATTRIBUTE3,
    GLOBAL_ATTRIBUTE4 = X_GLOBAL_ATTRIBUTE4,
    GLOBAL_ATTRIBUTE5 = X_GLOBAL_ATTRIBUTE5,
    GLOBAL_ATTRIBUTE6 = X_GLOBAL_ATTRIBUTE6,
    GLOBAL_ATTRIBUTE7 = X_GLOBAL_ATTRIBUTE7,
    GLOBAL_ATTRIBUTE8 = X_GLOBAL_ATTRIBUTE8,
    GLOBAL_ATTRIBUTE9 = X_GLOBAL_ATTRIBUTE9,
    GLOBAL_ATTRIBUTE10 = X_GLOBAL_ATTRIBUTE10,
    GLOBAL_ATTRIBUTE11 = X_GLOBAL_ATTRIBUTE11,
    GLOBAL_ATTRIBUTE12 = X_GLOBAL_ATTRIBUTE12,
    GLOBAL_ATTRIBUTE13 = X_GLOBAL_ATTRIBUTE13,
    GLOBAL_ATTRIBUTE14 = X_GLOBAL_ATTRIBUTE14,
    GLOBAL_ATTRIBUTE15 = X_GLOBAL_ATTRIBUTE15,
    GLOBAL_ATTRIBUTE16 = X_GLOBAL_ATTRIBUTE16,
    GLOBAL_ATTRIBUTE17 = X_GLOBAL_ATTRIBUTE17,
    GLOBAL_ATTRIBUTE18 = X_GLOBAL_ATTRIBUTE18,
    GLOBAL_ATTRIBUTE19 = X_GLOBAL_ATTRIBUTE19,
    GLOBAL_ATTRIBUTE20 = X_GLOBAL_ATTRIBUTE20,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    TAX_PRODUCT_CATEGORY = X_TAX_PRODUCT_CATEGORY
  where MEMO_LINE_ID = X_MEMO_LINE_ID
   /* SSA chnages anukumer
    and   NVL(ORG_ID,NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
          NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99)) =
          NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
          NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99);
   */
    and  NVL(ORG_ID,-99) = NVL(X_ORG_ID,-99); --SSA chnages anukumar

  if (sql%notfound) then
    raise no_data_found;
  end if;

  update AR_MEMO_LINES_ALL_TL set
    NAME = X_NAME,
    DESCRIPTION = X_DESCRIPTION,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    SOURCE_LANG = userenv('LANG')
  where MEMO_LINE_ID = X_MEMO_LINE_ID
  and userenv('LANG') in (LANGUAGE, SOURCE_LANG)
 /* SSA changes anukumer
     and NVL(ORG_ID,NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
      NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99)) =
      NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
      NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99);
 */
  and  NVL(ORG_ID,-99) = NVL(X_ORG_ID,-99); --SSA chnages anukumar

  if (sql%notfound) then
    raise no_data_found;
  end if;
end UPDATE_ROW;

procedure DELETE_ROW (
 X_org_id in number default null, --SSA changes anukumar
  X_MEMO_LINE_ID in NUMBER
) is
begin
  delete from AR_MEMO_LINES_ALL_TL
  where MEMO_LINE_ID = X_MEMO_LINE_ID
  /* SSA chnages anukumer
   and   NVL(ORG_ID,NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
        NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99)) =
        NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
        NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99);
  */
   and  NVL(ORG_ID,-99) = NVL(X_ORG_ID,-99); --SSA chnages anukumar

  if (sql%notfound) then
    raise no_data_found;
  end if;

  delete from AR_MEMO_LINES_ALL_B
  where MEMO_LINE_ID = X_MEMO_LINE_ID
  /* SSA chnages anukumar
      and   NVL(ORG_ID,NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
        NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99)) =
        NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
        NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99);
   */
    and  NVL(ORG_ID,-99) = NVL(X_ORG_ID,-99); --SSA chnages anukumar


  if (sql%notfound) then
    raise no_data_found;
  end if;
end DELETE_ROW;

procedure ADD_LANGUAGE
is
begin

  delete from AR_MEMO_LINES_ALL_TL T
  where not exists
    (select NULL
    from AR_MEMO_LINES_ALL_B B
    where B.MEMO_LINE_ID = T.MEMO_LINE_ID
    and   NVL(B.ORG_ID,NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
          NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99)) =
          NVL(T.ORG_ID, NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
          NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99))
    );

  update AR_MEMO_LINES_ALL_TL T set (
      NAME,
      DESCRIPTION
    ) = (select
      B.NAME,
      B.DESCRIPTION
    from AR_MEMO_LINES_ALL_TL B
    where B.MEMO_LINE_ID = T.MEMO_LINE_ID
    and B.LANGUAGE = T.SOURCE_LANG
    and   NVL(B.ORG_ID,NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
          NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99)) =
          NVL(T.ORG_ID, NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
          NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99)) )
  where (
      T.MEMO_LINE_ID,
      T.LANGUAGE
  ) in (select
      SUBT.MEMO_LINE_ID,
      SUBT.LANGUAGE
    from AR_MEMO_LINES_ALL_TL SUBB, AR_MEMO_LINES_ALL_TL SUBT
    where SUBB.MEMO_LINE_ID = SUBT.MEMO_LINE_ID
    and SUBB.LANGUAGE = SUBT.SOURCE_LANG
    and   NVL(SUBB.ORG_ID,NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
          NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99)) =
          NVL(SUBT.ORG_ID, NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
          NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99))
    and (SUBB.NAME <> SUBT.NAME
      or (SUBB.NAME is null and SUBT.NAME is not null)
      or (SUBB.NAME is not null and SUBT.NAME is null)
      or SUBB.DESCRIPTION <> SUBT.DESCRIPTION
      or (SUBB.DESCRIPTION is null and SUBT.DESCRIPTION is not null)
      or (SUBB.DESCRIPTION is not null and SUBT.DESCRIPTION is null)
  ));

  insert into AR_MEMO_LINES_ALL_TL (
    ORG_ID,
    MEMO_LINE_ID,
    NAME,
    DESCRIPTION,
    LAST_UPDATE_DATE,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    LANGUAGE,
    SOURCE_LANG
  ) select
    B.ORG_ID,
    B.MEMO_LINE_ID,
    B.NAME,
    B.DESCRIPTION,
    B.LAST_UPDATE_DATE,
    B.CREATION_DATE,
    B.CREATED_BY,
    B.LAST_UPDATED_BY,
    B.LAST_UPDATE_LOGIN,
    L.LANGUAGE_CODE,
    B.SOURCE_LANG
  from AR_MEMO_LINES_ALL_TL B, FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and B.LANGUAGE = userenv('LANG')
  and not exists
    (select NULL
    from AR_MEMO_LINES_ALL_TL T
    where T.MEMO_LINE_ID = B.MEMO_LINE_ID
    and T.LANGUAGE = L.LANGUAGE_CODE
    and   NVL(T.ORG_ID,NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
          NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99)) =
          NVL(B.ORG_ID, NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
          NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99)) );
end ADD_LANGUAGE;

procedure LOAD_ROW (
  X_org_id in number default null, --SSA changes anukumar
  X_MEMO_LINE_ID in NUMBER,
  X_SET_OF_BOOKS_ID in NUMBER,
  X_LINE_TYPE in VARCHAR2,
  X_START_DATE in DATE,
  X_GL_ID_REV in NUMBER,
  X_TAX_CODE in VARCHAR2,
  X_UOM_CODE in VARCHAR2,
  X_UNIT_STD_PRICE in NUMBER,
  X_INVOICING_RULE_ID in NUMBER,
  X_ACCOUNTING_RULE_ID in NUMBER,
  X_END_DATE in DATE,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_GLOBAL_ATTRIBUTE1 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE2 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE3 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE4 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE5 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE6 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE7 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE8 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE9 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE10 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE11 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE12 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE13 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE14 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE15 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE16 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE17 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE18 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE19 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE20 in VARCHAR2,
  X_NAME in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_OWNER in VARCHAR2,
  X_TAX_PRODUCT_CATEGORY in VARCHAR2
) IS
begin

  declare
     user_id            number := 0;
     row_id             varchar2(64);

  begin

     if (X_OWNER = 'SEED') then
        user_id := -1;
     end if;

     AR_MEMO_LINES_PKG.UPDATE_ROW (
          X_ORG_ID => X_ORG_ID, -- SSA changes anukumer
          X_MEMO_LINE_ID => X_MEMO_LINE_ID,
          X_SET_OF_BOOKS_ID => X_SET_OF_BOOKS_ID,
          X_LINE_TYPE => X_LINE_TYPE,
          X_START_DATE => X_START_DATE,
          X_GL_ID_REV => X_GL_ID_REV,
          X_TAX_CODE => X_TAX_CODE,
          X_UOM_CODE => X_UOM_CODE,
          X_UNIT_STD_PRICE => X_UNIT_STD_PRICE,
          X_INVOICING_RULE_ID => X_INVOICING_RULE_ID,
          X_ACCOUNTING_RULE_ID => X_ACCOUNTING_RULE_ID,
          X_END_DATE => X_END_DATE,
          X_ATTRIBUTE_CATEGORY => X_ATTRIBUTE_CATEGORY,
          X_ATTRIBUTE1 => X_ATTRIBUTE1,
          X_ATTRIBUTE2 => X_ATTRIBUTE2,
          X_ATTRIBUTE3 => X_ATTRIBUTE3,
          X_ATTRIBUTE4 => X_ATTRIBUTE4,
          X_ATTRIBUTE5 => X_ATTRIBUTE5,
          X_ATTRIBUTE6 => X_ATTRIBUTE6,
          X_ATTRIBUTE7 => X_ATTRIBUTE7,
          X_ATTRIBUTE8 => X_ATTRIBUTE8,
          X_ATTRIBUTE9 => X_ATTRIBUTE9,
          X_ATTRIBUTE10 => X_ATTRIBUTE10,
          X_ATTRIBUTE11 => X_ATTRIBUTE11,
          X_ATTRIBUTE12 => X_ATTRIBUTE12,
          X_ATTRIBUTE13 => X_ATTRIBUTE13,
          X_ATTRIBUTE14 => X_ATTRIBUTE14,
          X_ATTRIBUTE15 => X_ATTRIBUTE15,
          X_GLOBAL_ATTRIBUTE_CATEGORY => X_GLOBAL_ATTRIBUTE_CATEGORY,
          X_GLOBAL_ATTRIBUTE1 => X_GLOBAL_ATTRIBUTE1,
          X_GLOBAL_ATTRIBUTE2 => X_GLOBAL_ATTRIBUTE2,
          X_GLOBAL_ATTRIBUTE3 => X_GLOBAL_ATTRIBUTE3,
          X_GLOBAL_ATTRIBUTE4 => X_GLOBAL_ATTRIBUTE4,
          X_GLOBAL_ATTRIBUTE5 => X_GLOBAL_ATTRIBUTE5,
          X_GLOBAL_ATTRIBUTE6 => X_GLOBAL_ATTRIBUTE6,
          X_GLOBAL_ATTRIBUTE7 => X_GLOBAL_ATTRIBUTE7,
          X_GLOBAL_ATTRIBUTE8 => X_GLOBAL_ATTRIBUTE8,
          X_GLOBAL_ATTRIBUTE9 => X_GLOBAL_ATTRIBUTE9,
          X_GLOBAL_ATTRIBUTE10=> X_GLOBAL_ATTRIBUTE10,
          X_GLOBAL_ATTRIBUTE11 => X_GLOBAL_ATTRIBUTE11,
          X_GLOBAL_ATTRIBUTE12 => X_GLOBAL_ATTRIBUTE12,
          X_GLOBAL_ATTRIBUTE13 => X_GLOBAL_ATTRIBUTE13,
          X_GLOBAL_ATTRIBUTE14 => X_GLOBAL_ATTRIBUTE14,
          X_GLOBAL_ATTRIBUTE15 => X_GLOBAL_ATTRIBUTE15,
          X_GLOBAL_ATTRIBUTE16 => X_GLOBAL_ATTRIBUTE16,
          X_GLOBAL_ATTRIBUTE17 => X_GLOBAL_ATTRIBUTE17,
          X_GLOBAL_ATTRIBUTE18 => X_GLOBAL_ATTRIBUTE18,
          X_GLOBAL_ATTRIBUTE19 => X_GLOBAL_ATTRIBUTE19,
          X_GLOBAL_ATTRIBUTE20 => X_GLOBAL_ATTRIBUTE20,
          X_NAME => X_NAME,
          X_DESCRIPTION => X_DESCRIPTION,
          X_LAST_UPDATE_DATE => sysdate,
          X_LAST_UPDATED_BY => user_id,
          X_LAST_UPDATE_LOGIN => 0,
          X_TAX_PRODUCT_CATEGORY => X_TAX_PRODUCT_CATEGORY);

    exception
       when NO_DATA_FOUND then

           AR_MEMO_LINES_PKG.INSERT_ROW (
                 X_ROWID => row_id,
                 X_ORG_ID => X_ORG_ID, --SSA changes anukumer
                 X_MEMO_LINE_ID => X_MEMO_LINE_ID,
                 X_SET_OF_BOOKS_ID => X_SET_OF_BOOKS_ID,
                 X_LINE_TYPE => X_LINE_TYPE,
                 X_START_DATE => X_START_DATE,
                 X_GL_ID_REV => X_GL_ID_REV,
                 X_TAX_CODE => X_TAX_CODE,
                 X_UOM_CODE => X_UOM_CODE,
                 X_UNIT_STD_PRICE => X_UNIT_STD_PRICE,
                 X_INVOICING_RULE_ID => X_INVOICING_RULE_ID,
                 X_ACCOUNTING_RULE_ID => X_ACCOUNTING_RULE_ID,
                 X_END_DATE => X_END_DATE,
                 X_ATTRIBUTE_CATEGORY => X_ATTRIBUTE_CATEGORY,
                 X_ATTRIBUTE1 => X_ATTRIBUTE1,
                 X_ATTRIBUTE2 => X_ATTRIBUTE2,
                 X_ATTRIBUTE3 => X_ATTRIBUTE3,
                 X_ATTRIBUTE4 => X_ATTRIBUTE4,
                 X_ATTRIBUTE5 => X_ATTRIBUTE5,
                 X_ATTRIBUTE6 => X_ATTRIBUTE6,
                 X_ATTRIBUTE7 => X_ATTRIBUTE7,
                 X_ATTRIBUTE8 => X_ATTRIBUTE8,
                 X_ATTRIBUTE9 => X_ATTRIBUTE9,
                 X_ATTRIBUTE10 => X_ATTRIBUTE10,
                 X_ATTRIBUTE11 => X_ATTRIBUTE11,
                 X_ATTRIBUTE12 => X_ATTRIBUTE12,
                 X_ATTRIBUTE13 => X_ATTRIBUTE13,
                 X_ATTRIBUTE14 => X_ATTRIBUTE14,
                 X_ATTRIBUTE15 => X_ATTRIBUTE15,
                 X_GLOBAL_ATTRIBUTE_CATEGORY => X_GLOBAL_ATTRIBUTE_CATEGORY,
                 X_GLOBAL_ATTRIBUTE1 => X_GLOBAL_ATTRIBUTE1,
                 X_GLOBAL_ATTRIBUTE2 => X_GLOBAL_ATTRIBUTE2,
                 X_GLOBAL_ATTRIBUTE3 => X_GLOBAL_ATTRIBUTE3,
                 X_GLOBAL_ATTRIBUTE4 => X_GLOBAL_ATTRIBUTE4,
                 X_GLOBAL_ATTRIBUTE5 => X_GLOBAL_ATTRIBUTE5,
                 X_GLOBAL_ATTRIBUTE6 => X_GLOBAL_ATTRIBUTE6,
                 X_GLOBAL_ATTRIBUTE7 => X_GLOBAL_ATTRIBUTE7,
                 X_GLOBAL_ATTRIBUTE8 => X_GLOBAL_ATTRIBUTE8,
                 X_GLOBAL_ATTRIBUTE9 => X_GLOBAL_ATTRIBUTE9,
                 X_GLOBAL_ATTRIBUTE10 => X_GLOBAL_ATTRIBUTE10,
                 X_GLOBAL_ATTRIBUTE11 => X_GLOBAL_ATTRIBUTE11,
                 X_GLOBAL_ATTRIBUTE12 => X_GLOBAL_ATTRIBUTE12,
                 X_GLOBAL_ATTRIBUTE13 => X_GLOBAL_ATTRIBUTE13,
                 X_GLOBAL_ATTRIBUTE14 => X_GLOBAL_ATTRIBUTE14,
                 X_GLOBAL_ATTRIBUTE15 => X_GLOBAL_ATTRIBUTE15,
                 X_GLOBAL_ATTRIBUTE16 => X_GLOBAL_ATTRIBUTE16,
                 X_GLOBAL_ATTRIBUTE17 => X_GLOBAL_ATTRIBUTE17,
                 X_GLOBAL_ATTRIBUTE18 => X_GLOBAL_ATTRIBUTE18,
                 X_GLOBAL_ATTRIBUTE19 => X_GLOBAL_ATTRIBUTE19,
                 X_GLOBAL_ATTRIBUTE20 => X_GLOBAL_ATTRIBUTE20,
                 X_NAME => X_NAME,
                 X_DESCRIPTION => X_DESCRIPTION,
                 X_CREATION_DATE => sysdate,
                 X_CREATED_BY => user_id,
                 X_LAST_UPDATE_DATE => sysdate,
                 X_LAST_UPDATED_BY => user_id,
                 X_LAST_UPDATE_LOGIN => 0,
                 X_TAX_PRODUCT_CATEGORY => X_TAX_PRODUCT_CATEGORY);
      end;
end LOAD_ROW;

procedure TRANSLATE_ROW (
  X_MEMO_LINE_ID in NUMBER,
  X_NAME in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_OWNER in VARCHAR2) IS
begin

    -- note org_id is not used here because in NLS mode it is important
    -- update a line id across all orgs because data will be translated
    -- only once for a single org

    update AR_MEMO_LINES_ALL_TL
      set name = X_NAME,
          description = X_DESCRIPTION,
          source_lang = userenv('LANG'),
          last_update_date = sysdate,
          last_updated_by = decode(X_OWNER, 'SEED', -1, 0),
          last_update_login = 0
    where memo_line_id = X_MEMO_LINE_ID
    and   userenv('LANG') in (language, source_lang);

end TRANSLATE_ROW;

end AR_MEMO_LINES_PKG;

/
