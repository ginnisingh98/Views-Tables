--------------------------------------------------------
--  DDL for Package Body JA_JAINCTRB_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JA_JAINCTRB_XMLP_PKG" AS
/* $Header: JAINCTRBB.pls 120.1 2007/12/25 16:15:35 dwkrishn noship $ */
  FUNCTION CF_VENDOR_TYPEFORMULA(VENDOR_ID IN NUMBER) RETURN VARCHAR2 IS
    V_VENDOR_TYPE_LOOKUP_CODE PO_VENDORS.VENDOR_TYPE_LOOKUP_CODE%TYPE;
  BEGIN
    SELECT
      VENDOR_TYPE_LOOKUP_CODE
    INTO V_VENDOR_TYPE_LOOKUP_CODE
    FROM
      PO_VENDORS
    WHERE VENDOR_ID = cf_vendor_typeformula.VENDOR_ID;
    RETURN (V_VENDOR_TYPE_LOOKUP_CODE);
  END CF_VENDOR_TYPEFORMULA;

  FUNCTION CF_VENDOR_NAMEFORMULA(VENDOR_ID IN NUMBER) RETURN VARCHAR2 IS
    V_VENDOR_NAME VARCHAR2(80);
  BEGIN
    SELECT
      VENDOR_NAME
    INTO V_VENDOR_NAME
    FROM
      PO_VENDORS
    WHERE VENDOR_ID = cf_vendor_nameformula.VENDOR_ID;
    RETURN (V_VENDOR_NAME);
  END CF_VENDOR_NAMEFORMULA;

  FUNCTION CF_VENDOR_CODEFORMULA(VENDOR_ID IN NUMBER) RETURN VARCHAR2 IS
    V_VENDOR_CODE VARCHAR2(30);
  BEGIN
    SELECT
      SEGMENT1
    INTO V_VENDOR_CODE
    FROM
      PO_VENDORS
    WHERE VENDOR_ID = cf_vendor_codeformula.VENDOR_ID;
    RETURN (V_VENDOR_CODE);
  END CF_VENDOR_CODEFORMULA;

  FUNCTION CF_ADDRFORMULA(ORG_ID IN NUMBER) RETURN VARCHAR2 IS
    V_LEGAL_ENTITY NUMBER;
    V_NAME VARCHAR2(60);
  BEGIN
    SELECT
      NAME
    INTO V_NAME
    FROM
      HR_ORGANIZATION_UNITS
    WHERE NVL(ORGANIZATION_ID
       ,0) = NVL(ORG_ID
       ,0);
    RETURN (V_NAME);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      /*SRW.MESSAGE(2
                 ,SQLERRM)*/NULL;
      RETURN (NULL);
  END CF_ADDRFORMULA;

  FUNCTION CF_ENTERED_AMOUNTFORMULA(ACCTS IN NUMBER
                                   ,VENDOR_ID IN NUMBER
                                   ,ORG_ID IN NUMBER
                                   ,INVOICE_CURRENCY_CODE IN VARCHAR2) RETURN NUMBER IS
    V_ENTERED_AMOUNT NUMBER;
    V_AMOUNT_DR1 NUMBER := 0;
    V_AMOUNT_DR2 NUMBER := 0;
    V_AMOUNT_CR1 NUMBER := 0;
    V_AMOUNT_CR2 NUMBER := 0;
    V_AMOUNT NUMBER := 0;
  BEGIN
    SELECT
      SUM(B.AMOUNT)
    INTO V_AMOUNT_CR1
    FROM
      AP_INVOICES_ALL A,
      AP_INVOICE_DISTRIBUTIONS_ALL B,
      PO_VENDORS POV,
      PO_VENDOR_SITES_ALL POVS
    WHERE A.INVOICE_ID = B.INVOICE_ID
      AND POV.VENDOR_ID = A.VENDOR_ID
      AND POV.VENDOR_ID = POVS.VENDOR_ID
      AND A.VENDOR_ID = NVL(P_VENDOR_ID
       ,A.VENDOR_ID)
      AND A.VENDOR_SITE_ID = POVS.VENDOR_SITE_ID
      AND A.ACCTS_PAY_CODE_COMBINATION_ID = NVL(ACCTS
       ,A.ACCTS_PAY_CODE_COMBINATION_ID)
      AND A.VENDOR_ID = cf_entered_amountformula.VENDOR_ID
      AND ( A.ORG_ID = cf_entered_amountformula.ORG_ID
    OR A.ORG_ID IS NULL )
      AND A.INVOICE_CURRENCY_CODE = CF_ENTERED_AMOUNTFORMULA.INVOICE_CURRENCY_CODE
      AND B.MATCH_STATUS_FLAG = 'A'
      AND A.INVOICE_TYPE_LOOKUP_CODE NOT IN ( LV_PREPAYMENT_LOOKUP , LV_CREDIT_LOOKUP , LV_DEBIT_LOOKUP )
      AND B.LINE_TYPE_LOOKUP_CODE <> LV_PREPAY_LINE_TYPE
      AND TRUNC(B.ACCOUNTING_DATE) <= TRUNC(P_AS_OF_DATE);
    SELECT
      SUM(B.AMOUNT)
    INTO V_AMOUNT_CR2
    FROM
      AP_INVOICES_ALL A,
      AP_INVOICE_DISTRIBUTIONS_ALL B,
      PO_VENDORS POV,
      PO_VENDOR_SITES_ALL POVS
    WHERE A.INVOICE_ID = B.INVOICE_ID
      AND POV.VENDOR_ID = A.VENDOR_ID
      AND POV.VENDOR_ID = POVS.VENDOR_ID
      AND A.VENDOR_ID = NVL(P_VENDOR_ID
       ,A.VENDOR_ID)
      AND A.VENDOR_SITE_ID = POVS.VENDOR_SITE_ID
      AND A.ACCTS_PAY_CODE_COMBINATION_ID = NVL(ACCTS
       ,A.ACCTS_PAY_CODE_COMBINATION_ID)
      AND A.VENDOR_ID = cf_entered_amountformula.VENDOR_ID
      AND ( A.ORG_ID = cf_entered_amountformula.ORG_ID
    OR A.ORG_ID IS NULL )
      AND A.INVOICE_CURRENCY_CODE = CF_ENTERED_AMOUNTFORMULA.INVOICE_CURRENCY_CODE
      AND A.INVOICE_TYPE_LOOKUP_CODE IN ( LV_CREDIT_LOOKUP )
      AND B.MATCH_STATUS_FLAG = 'A'
      AND TRUNC(B.ACCOUNTING_DATE) <= TRUNC(P_AS_OF_DATE);
    SELECT
      SUM(NVL(B.AMOUNT
             ,0))
    INTO V_AMOUNT_DR1
    FROM
      AP_INVOICES_ALL A,
      AP_INVOICE_PAYMENTS_ALL B,
      AP_CHECKS_ALL C,
      PO_VENDORS POV,
      PO_VENDOR_SITES_ALL POVS
    WHERE A.INVOICE_ID = B.INVOICE_ID
      AND POV.VENDOR_ID = A.VENDOR_ID
      AND B.CHECK_ID = C.CHECK_ID
      AND POV.VENDOR_ID = POVS.VENDOR_ID
      AND A.VENDOR_ID = NVL(P_VENDOR_ID
       ,A.VENDOR_ID)
      AND A.VENDOR_SITE_ID = POVS.VENDOR_SITE_ID
      AND A.ACCTS_PAY_CODE_COMBINATION_ID = NVL(ACCTS
       ,A.ACCTS_PAY_CODE_COMBINATION_ID)
      AND A.VENDOR_ID = cf_entered_amountformula.VENDOR_ID
      AND ( A.ORG_ID = cf_entered_amountformula.ORG_ID
    OR A.ORG_ID IS NULL )
      AND A.PAYMENT_CURRENCY_CODE = CF_ENTERED_AMOUNTFORMULA.INVOICE_CURRENCY_CODE
      AND C.STATUS_LOOKUP_CODE IN ( LV_NEGOT_LOOKUP , LV_CLEAR_LOOKUP , LV_VOIDED_LOOKUP , LV_REC_UNACC_LOOKUP , LV_REC_LOOKUP , LV_CLEAR_UNACC_LOOKUP , LV_ISSUED_LOOKUP , LV_OVERFLOW_LOOKUP )
      AND TRUNC(B.ACCOUNTING_DATE) <= TRUNC(P_AS_OF_DATE);
    SELECT
      SUM(B.AMOUNT)
    INTO V_AMOUNT_DR2
    FROM
      AP_INVOICES_ALL A,
      AP_INVOICE_DISTRIBUTIONS_ALL B,
      PO_VENDORS POV,
      PO_VENDOR_SITES_ALL POVS
    WHERE A.INVOICE_ID = B.INVOICE_ID
      AND POV.VENDOR_ID = A.VENDOR_ID
      AND POV.VENDOR_ID = POVS.VENDOR_ID
      AND A.VENDOR_ID = NVL(P_VENDOR_ID
       ,A.VENDOR_ID)
      AND A.VENDOR_SITE_ID = POVS.VENDOR_SITE_ID
      AND A.ACCTS_PAY_CODE_COMBINATION_ID = NVL(ACCTS
       ,A.ACCTS_PAY_CODE_COMBINATION_ID)
      AND A.VENDOR_ID = cf_entered_amountformula.VENDOR_ID
      AND ( A.ORG_ID = cf_entered_amountformula.ORG_ID
    OR A.ORG_ID IS NULL )
      AND A.INVOICE_CURRENCY_CODE = CF_ENTERED_AMOUNTFORMULA.INVOICE_CURRENCY_CODE
      AND A.INVOICE_TYPE_LOOKUP_CODE IN ( LV_DEBIT_LOOKUP )
      AND B.LINE_TYPE_LOOKUP_CODE <> LV_PREPAY_LINE_TYPE
      AND B.MATCH_STATUS_FLAG = 'A'
      AND TRUNC(B.ACCOUNTING_DATE) <= TRUNC(P_AS_OF_DATE);
    V_AMOUNT := NVL(V_AMOUNT_CR1
                   ,0) + NVL(V_AMOUNT_CR2
                   ,0) - NVL(ABS(V_AMOUNT_DR2)
                   ,0) - NVL(V_AMOUNT_DR1
                   ,0);
    RETURN (V_AMOUNT);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      /*SRW.MESSAGE(1
                 ,SQLERRM)*/NULL;
      RETURN (NULL);
      RETURN (V_AMOUNT);
  END CF_ENTERED_AMOUNTFORMULA;

  FUNCTION CF_RE_AMTFORMULA(ACCTS IN NUMBER
                           ,ORG_ID IN NUMBER
                           ,VENDOR_ID IN NUMBER
                           ,INVOICE_CURRENCY_CODE IN VARCHAR2) RETURN NUMBER IS
    LV_GAIN_LINE_TYPE CONSTANT XLA_AE_LINES.ACCOUNTING_CLASS_CODE%TYPE DEFAULT 'GAIN';
    LV_LOSS_LINE_TYPE CONSTANT XLA_AE_LINES.ACCOUNTING_CLASS_CODE%TYPE DEFAULT 'LOSS';
    LV_ENTITY_CODE XLA_AE_LINES.ACCOUNTING_CLASS_CODE%TYPE := 'AP_INVOICES';
    CURSOR ALL_INVOICES(ORGN_ID IN NUMBER,VEND_ID IN NUMBER,CURR_CODE IN VARCHAR2) IS
      SELECT
        NVL(SUM(B.AMOUNT)
           ,0) AMOUNT,
        MIN(B.EXCHANGE_DATE) EXCHANGE_DATE,
        MIN(B.EXCHANGE_RATE_TYPE) EXCHANGE_RATE_TYPE,
        MIN(B.EXCHANGE_RATE) EXCHANGE_RATE
      FROM
        AP_INVOICES_ALL A,
        AP_INVOICE_DISTRIBUTIONS_ALL B,
        PO_VENDORS POV,
        PO_VENDOR_SITES_ALL POVS
      WHERE A.INVOICE_ID = B.INVOICE_ID
        AND POV.VENDOR_ID = A.VENDOR_ID
        AND POVS.VENDOR_ID = POV.VENDOR_ID
        AND A.VENDOR_ID = NVL(P_VENDOR_ID
         ,A.VENDOR_ID)
        AND A.VENDOR_SITE_ID = POVS.VENDOR_SITE_ID
        AND A.ACCTS_PAY_CODE_COMBINATION_ID = NVL(ACCTS
         ,A.ACCTS_PAY_CODE_COMBINATION_ID)
        AND ( A.ORG_ID = ORGN_ID
      OR A.ORG_ID IS NULL )
        AND A.VENDOR_ID = VEND_ID
        AND A.INVOICE_CURRENCY_CODE = CURR_CODE
        AND A.INVOICE_TYPE_LOOKUP_CODE NOT IN ( LV_PREPAYMENT_LOOKUP , LV_CREDIT_LOOKUP , LV_DEBIT_LOOKUP )
        AND B.LINE_TYPE_LOOKUP_CODE <> LV_PREPAY_LINE_TYPE
        AND B.MATCH_STATUS_FLAG = 'A'
        AND TRUNC(B.ACCOUNTING_DATE) <= TRUNC(P_AS_OF_DATE)
      GROUP BY
        A.INVOICE_ID;
    CURSOR ALL_PAYMENTS(ORGN_ID IN NUMBER,VEND_ID IN NUMBER,CURR_CODE IN VARCHAR2) IS
      SELECT
        B.AMOUNT,
        A.PAYMENT_CURRENCY_CODE,
        A.EXCHANGE_RATE,
        B.EXCHANGE_DATE,
        B.EXCHANGE_RATE_TYPE
      FROM
        AP_INVOICES_ALL A,
        AP_INVOICE_PAYMENTS_ALL B,
        AP_CHECKS_ALL C,
        PO_VENDORS POV,
        PO_VENDOR_SITES_ALL POVS
      WHERE A.INVOICE_ID = B.INVOICE_ID
        AND POV.VENDOR_ID = A.VENDOR_ID
        AND B.CHECK_ID = C.CHECK_ID
        AND POVS.VENDOR_ID = POV.VENDOR_ID
        AND A.VENDOR_ID = NVL(P_VENDOR_ID
         ,A.VENDOR_ID)
        AND A.VENDOR_SITE_ID = POVS.VENDOR_SITE_ID
        AND A.ACCTS_PAY_CODE_COMBINATION_ID = NVL(ACCTS
         ,A.ACCTS_PAY_CODE_COMBINATION_ID)
        AND ( A.ORG_ID = ORGN_ID
      OR A.ORG_ID IS NULL )
        AND A.VENDOR_ID = VEND_ID
        AND A.PAYMENT_CURRENCY_CODE = CURR_CODE
        AND C.STATUS_LOOKUP_CODE IN ( LV_NEGOT_LOOKUP , LV_CLEAR_LOOKUP , LV_VOIDED_LOOKUP , LV_REC_UNACC_LOOKUP , LV_REC_LOOKUP , LV_CLEAR_UNACC_LOOKUP , LV_ISSUED_LOOKUP , LV_OVERFLOW_LOOKUP )
        AND TRUNC(B.ACCOUNTING_DATE) <= TRUNC(P_AS_OF_DATE);
    CURSOR FOR_CM_AMT(ORGN_ID IN NUMBER,VEND_ID IN NUMBER,CURR_CODE IN VARCHAR2) IS
      SELECT
        B.AMOUNT,
        B.EXCHANGE_DATE,
        B.EXCHANGE_RATE_TYPE,
        B.EXCHANGE_RATE,
        A.INVOICE_CURRENCY_CODE
      FROM
        AP_INVOICES_ALL A,
        AP_INVOICE_DISTRIBUTIONS_ALL B,
        PO_VENDORS POV,
        PO_VENDOR_SITES_ALL POVS
      WHERE A.INVOICE_ID = B.INVOICE_ID
        AND POV.VENDOR_ID = A.VENDOR_ID
        AND POVS.VENDOR_ID = POV.VENDOR_ID
        AND A.VENDOR_ID = NVL(P_VENDOR_ID
         ,A.VENDOR_ID)
        AND A.VENDOR_SITE_ID = POVS.VENDOR_SITE_ID
        AND A.ACCTS_PAY_CODE_COMBINATION_ID = NVL(ACCTS
         ,A.ACCTS_PAY_CODE_COMBINATION_ID)
        AND A.VENDOR_ID = VEND_ID
        AND ( A.ORG_ID = ORGN_ID
      OR A.ORG_ID IS NULL )
        AND A.INVOICE_CURRENCY_CODE = CURR_CODE
        AND A.INVOICE_TYPE_LOOKUP_CODE IN ( LV_CREDIT_LOOKUP )
        AND B.MATCH_STATUS_FLAG = 'A'
        AND TRUNC(B.ACCOUNTING_DATE) <= TRUNC(P_AS_OF_DATE);
    CURSOR FOR_DM_AMT(ORGN_ID IN NUMBER,VEND_ID IN NUMBER,CURR_CODE IN VARCHAR2) IS
      SELECT
        NVL(SUM(A.AMOUNT)
           ,0) AMOUNT,
        MIN(A.EXCHANGE_RATE_TYPE) EXCHANGE_RATE_TYPE,
        MIN(A.EXCHANGE_RATE) EXCHANGE_RATE,
        MIN(A.EXCHANGE_DATE) EXCHANGE_DATE
      FROM
        AP_INVOICES_ALL B,
        AP_INVOICE_DISTRIBUTIONS_ALL A,
        PO_VENDORS POV,
        PO_VENDOR_SITES_ALL POVS
      WHERE A.INVOICE_ID = B.INVOICE_ID
        AND POV.VENDOR_ID = B.VENDOR_ID
        AND B.VENDOR_ID = NVL(P_VENDOR_ID
         ,B.VENDOR_ID)
        AND POVS.VENDOR_ID = POV.VENDOR_ID
        AND B.VENDOR_SITE_ID = POVS.VENDOR_SITE_ID
        AND B.ACCTS_PAY_CODE_COMBINATION_ID = NVL(ACCTS
         ,B.ACCTS_PAY_CODE_COMBINATION_ID)
        AND ( B.ORG_ID = ORGN_ID
      OR B.ORG_ID IS NULL )
        AND B.VENDOR_ID = VEND_ID
        AND A.MATCH_STATUS_FLAG = 'A'
        AND B.INVOICE_CURRENCY_CODE = CURR_CODE
        AND TRUNC(A.ACCOUNTING_DATE) <= TRUNC(P_AS_OF_DATE)
        AND B.INVOICE_TYPE_LOOKUP_CODE = LV_DEBIT_LOOKUP
        AND A.LINE_TYPE_LOOKUP_CODE <> LV_PREPAY_LINE_TYPE
      GROUP BY
        B.INVOICE_ID;
    V_PAYMENT_CURRENCY_CODE VARCHAR2(15);
    V_SET_OF_BOOKS_ID NUMBER;
    V_FUNCTIONAL_CURRENCY VARCHAR2(15);
    V_INT_AMT NUMBER;
    V_RE_AMT_CR NUMBER := 0;
    V_RE_AMT_DR NUMBER := 0;
    V_RE_AMT NUMBER := 0;
    V_CM_AMT NUMBER := 0;
    V_DM_AMT NUMBER := 0;
    V_SUM_EXCH_GAIN_AMT NUMBER := 0;
    V_SUM_EXCH_LOSS_AMT NUMBER := 0;
  BEGIN
    SELECT
      SET_OF_BOOKS_ID
    INTO V_SET_OF_BOOKS_ID
    FROM
      ORG_ORGANIZATION_DEFINITIONS
    WHERE NVL(OPERATING_UNIT
       ,0) = NVL(ORG_ID
       ,0)
      AND ROWNUM = 1;
    SELECT
      CURRENCY_CODE
    INTO V_FUNCTIONAL_CURRENCY
    FROM
      GL_SETS_OF_BOOKS
    WHERE SET_OF_BOOKS_ID = V_SET_OF_BOOKS_ID;
    FOR i IN ALL_INVOICES(NVL(org_id, 0), vendor_id, invoice_currency_code)LOOP
      V_INT_AMT := JAI_CMN_UTILS_PKG.CURRENCY_CONVERSION(V_SET_OF_BOOKS_ID
                                                        ,INVOICE_CURRENCY_CODE
                                                        ,I.EXCHANGE_DATE
                                                        ,I.EXCHANGE_RATE_TYPE
                                                        ,I.EXCHANGE_RATE);
      V_INT_AMT := V_INT_AMT * I.AMOUNT;
      V_RE_AMT_CR := V_RE_AMT_CR + V_INT_AMT;
    END LOOP;
    FOR i IN FOR_CM_AMT(NVL(org_id, 0), vendor_id, invoice_currency_code) LOOP
      V_INT_AMT := JAI_CMN_UTILS_PKG.CURRENCY_CONVERSION(V_SET_OF_BOOKS_ID
                                                        ,I.INVOICE_CURRENCY_CODE
                                                        ,I.EXCHANGE_DATE
                                                        ,I.EXCHANGE_RATE_TYPE
                                                        ,I.EXCHANGE_RATE);
      V_INT_AMT := V_INT_AMT * I.AMOUNT;
      V_RE_AMT_CR := V_RE_AMT_CR + V_INT_AMT;
    END LOOP;
    FOR i IN ALL_PAYMENTS(NVL(org_id, 0), vendor_id, invoice_currency_code) LOOP
      V_INT_AMT := JAI_CMN_UTILS_PKG.CURRENCY_CONVERSION(V_SET_OF_BOOKS_ID
                                                        ,I.PAYMENT_CURRENCY_CODE
                                                        ,I.EXCHANGE_DATE
                                                        ,I.EXCHANGE_RATE_TYPE
                                                        ,I.EXCHANGE_RATE);
      V_INT_AMT := V_INT_AMT * I.AMOUNT;
      V_RE_AMT_DR := V_RE_AMT_DR + V_INT_AMT;
    END LOOP;
    FOR i IN FOR_DM_AMT(NVL(org_id, 0), vendor_id, invoice_currency_code) LOOP
      V_INT_AMT := JAI_CMN_UTILS_PKG.CURRENCY_CONVERSION(V_SET_OF_BOOKS_ID
                                                        ,INVOICE_CURRENCY_CODE
                                                        ,I.EXCHANGE_DATE
                                                        ,I.EXCHANGE_RATE_TYPE
                                                        ,I.EXCHANGE_RATE);
      V_INT_AMT := V_INT_AMT * ABS(I.AMOUNT);
      V_RE_AMT_DR := V_RE_AMT_DR + V_INT_AMT;
    END LOOP;
    BEGIN
      SELECT
        SUM(NVL(XAL.ACCOUNTED_CR
               ,0)),
        SUM(NVL(XAL.ACCOUNTED_DR
               ,0))
      INTO V_SUM_EXCH_GAIN_AMT,V_SUM_EXCH_LOSS_AMT
      FROM
        AP_INVOICES_ALL A,
        AP_INVOICE_DISTRIBUTIONS_ALL B,
        PO_VENDORS POV,
        PO_VENDOR_SITES_ALL POVS,
        XLA_AE_LINES XAL,
        XLA_AE_HEADERS XAH,
        XLA_TRANSACTION_ENTITIES XTE
      WHERE A.INVOICE_ID = B.INVOICE_ID
        AND POV.VENDOR_ID = A.VENDOR_ID
        AND POVS.VENDOR_ID = POV.VENDOR_ID
        AND A.VENDOR_ID = NVL(P_VENDOR_ID
         ,A.VENDOR_ID)
        AND A.VENDOR_SITE_ID = POVS.VENDOR_SITE_ID
        AND B.ACCOUNTING_EVENT_ID = XAH.EVENT_ID
        AND XAH.APPLICATION_ID = 200
        AND XAH.ENTITY_ID = XTE.ENTITY_ID
        AND XTE.ENTITY_CODE = LV_ENTITY_CODE
        AND XTE.APPLICATION_ID = 200
        AND XTE.SOURCE_ID_INT_1 = A.INVOICE_ID
        AND XAL.APPLICATION_ID = 200
        AND XAL.AE_HEADER_ID = XAL.AE_HEADER_ID
        AND XAH.LEDGER_ID = B.SET_OF_BOOKS_ID
        AND A.ACCTS_PAY_CODE_COMBINATION_ID = NVL(ACCTS
         ,A.ACCTS_PAY_CODE_COMBINATION_ID)
        AND ( A.ORG_ID = CF_RE_AMTFORMULA.ORG_ID
      OR A.ORG_ID IS NULL )
        AND A.VENDOR_ID = CF_RE_AMTFORMULA.VENDOR_ID
        AND A.INVOICE_CURRENCY_CODE = CF_RE_AMTFORMULA.INVOICE_CURRENCY_CODE
        AND XAL.ACCOUNTING_CLASS_CODE IN ( LV_GAIN_LINE_TYPE , LV_LOSS_LINE_TYPE )
        AND B.ACCOUNTING_DATE <= P_AS_OF_DATE;
    EXCEPTION
      WHEN OTHERS THEN
        /*SRW.MESSAGE(1
                   ,SQLERRM)*/NULL;
        V_SUM_EXCH_GAIN_AMT := 0;
        V_SUM_EXCH_LOSS_AMT := 0;
    END;
    V_RE_AMT := V_RE_AMT_CR - V_RE_AMT_DR - NVL(V_SUM_EXCH_GAIN_AMT
                   ,0) + NVL(V_SUM_EXCH_LOSS_AMT
                   ,0);
    RETURN (V_RE_AMT);
    RETURN (V_RE_AMT);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      /*SRW.MESSAGE(3
                 ,SQLERRM)*/NULL;
      RETURN (0);
  END CF_RE_AMTFORMULA;

  FUNCTION CF_ACCTSFORMULA(ACCTS IN NUMBER) RETURN VARCHAR2 IS
    V_ACCOUNT VARCHAR(1000);
  BEGIN
    JAI_CMN_GL_PKG.GET_ACCOUNT_NUMBER(P_CHARTS_OF_ACCTS_ID
                                     ,ACCTS
                                     ,V_ACCOUNT);
    RETURN (V_ACCOUNT);
  END CF_ACCTSFORMULA;

  FUNCTION CF_ADDR1FORMULA(ORG_ID IN NUMBER) RETURN VARCHAR2 IS
    V_LOCATION_ID NUMBER;
    V_ADDRESS VARCHAR2(1000);
    CURSOR FOR_LOCATION IS
      SELECT
        LOCATION_ID
      FROM
        HR_ORGANIZATION_UNITS
      WHERE ORGANIZATION_ID = NVL(ORG_ID
         ,0);
    CURSOR FOR_ADDRESS IS
      SELECT
        ADDRESS_LINE_1 || ',' || ADDRESS_LINE_2 || ',' || ADDRESS_LINE_3 || ',' || TOWN_OR_CITY || ',' || COUNTRY || ',' || POSTAL_CODE || ',' || TELEPHONE_NUMBER_1 || ',' || TELEPHONE_NUMBER_2 || ',' || TELEPHONE_NUMBER_3
      FROM
        HR_LOCATIONS
      WHERE LOCATION_ID = V_LOCATION_ID;
  BEGIN
    OPEN FOR_LOCATION;
    FETCH FOR_LOCATION
     INTO V_LOCATION_ID;
    CLOSE FOR_LOCATION;
    OPEN FOR_ADDRESS;
    FETCH FOR_ADDRESS
     INTO V_ADDRESS;
    CLOSE FOR_ADDRESS;
    RETURN (V_ADDRESS);
  END CF_ADDR1FORMULA;

  FUNCTION CF_SOB_NAMEFORMULA RETURN VARCHAR2 IS
    CURSOR FOR_SOB_ID(ORG_ID IN NUMBER) IS
      SELECT
        SET_OF_BOOKS_ID
      FROM
        HR_OPERATING_UNITS
      WHERE ORGANIZATION_ID = ORG_ID;
    CURSOR FOR_SOB_NAME(SOB_ID IN NUMBER) IS
      SELECT
        NAME
      FROM
        GL_SETS_OF_BOOKS
      WHERE SET_OF_BOOKS_ID = SOB_ID;
    V_SET_OF_BOOKS_ID NUMBER;
    V_SOB_NAME VARCHAR2(100);
  BEGIN
    OPEN FOR_SOB_ID(P_ORG_ID);
    FETCH FOR_SOB_ID
     INTO V_SET_OF_BOOKS_ID;
    CLOSE FOR_SOB_ID;
    OPEN FOR_SOB_NAME(V_SET_OF_BOOKS_ID);
    FETCH FOR_SOB_NAME
     INTO V_SOB_NAME;
    CLOSE FOR_SOB_NAME;
    RETURN (V_SOB_NAME);
  END CF_SOB_NAMEFORMULA;

  FUNCTION CF_P_VENDOR_NAMEFORMULA RETURN VARCHAR2 IS
    CURSOR FOR_VENDOR_NAME(V_ID IN NUMBER) IS
      SELECT
        VENDOR_NAME
      FROM
        PO_VENDORS
      WHERE VENDOR_ID = V_ID;
    V_VENDOR_NAME VARCHAR(100);
  BEGIN
    OPEN FOR_VENDOR_NAME(P_VENDOR_ID);
    FETCH FOR_VENDOR_NAME
     INTO V_VENDOR_NAME;
    CLOSE FOR_VENDOR_NAME;
    RETURN (V_VENDOR_NAME);
  END CF_P_VENDOR_NAMEFORMULA;

  FUNCTION CF_P_ACCTSFORMULA RETURN VARCHAR2 IS
    V_ACCOUNT VARCHAR(1000);
  BEGIN
    JAI_CMN_GL_PKG.GET_ACCOUNT_NUMBER(P_CHARTS_OF_ACCTS_ID
                                     ,P_ACCTS_ID
                                     ,V_ACCOUNT);
    RETURN (V_ACCOUNT);
  END CF_P_ACCTSFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    CURSOR C_PROGRAM_ID(P_REQUEST_ID IN NUMBER) IS
      SELECT
        CONCURRENT_PROGRAM_ID,
        NVL(ENABLE_TRACE
           ,'N')
      FROM
        FND_CONCURRENT_REQUESTS
      WHERE REQUEST_ID = P_REQUEST_ID;
    V_ENABLE_TRACE FND_CONCURRENT_PROGRAMS.ENABLE_TRACE%TYPE;
    V_PROGRAM_ID FND_CONCURRENT_PROGRAMS.CONCURRENT_PROGRAM_ID%TYPE;
  BEGIN
    IF P_ORG_ID IS NOT NULL THEN
      MO_GLOBAL.SET_POLICY_CONTEXT('S'
                                  ,P_ORG_ID);
    ELSE
      MO_GLOBAL.SET_POLICY_CONTEXT('M'
                                  ,NULL);
    END IF;
    /*SRW.MESSAGE(1275
               ,'Report Version is 120.4 Last modified date is 19/07/2006')*/NULL;
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    CP_AS_OF_DATE := TO_CHAR(P_AS_OF_DATE,'DD-MON-YYYY');
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    BEGIN
      OPEN C_PROGRAM_ID(P_CONC_REQUEST_ID);
      FETCH C_PROGRAM_ID
       INTO V_PROGRAM_ID,V_ENABLE_TRACE;
      CLOSE C_PROGRAM_ID;
      /*SRW.MESSAGE(1275
                 ,'v_program_id -> ' || V_PROGRAM_ID || ', v_enable_trace -> ' || V_ENABLE_TRACE || ', request_id -> ' || P_CONC_REQUEST_ID)*/NULL;
      IF V_ENABLE_TRACE = 'Y' THEN
        EXECUTE IMMEDIATE
          'ALTER SESSION SET EVENTS ''10046 trace name context forever, level 4''';
      END IF;
      RETURN (TRUE);
    EXCEPTION
      WHEN OTHERS THEN
        /*SRW.MESSAGE(1275
                   ,'Error during enabling the trace. ErrCode -> ' || SQLCODE || ', ErrMesg ->' || SQLERRM)*/NULL;
        RETURN (TRUE);
    END;
  END BEFOREREPORT;

  FUNCTION F_SELECTED_VENDOR RETURN VARCHAR2 IS
    RET_TEXT VARCHAR2(1000) := NULL;

  BEGIN
    IF P_VENDOR_ID IS NOT NULL THEN
      RET_TEXT := ' AND    api.vendor_id = :p_vendor_id ';
    ELSE
      RET_TEXT := ' AND    api.vendor_id = api.vendor_id ';
    END IF;
    IF RET_TEXT IS NOT NULL THEN
      RET_TEXT := RET_TEXT ;
    END IF;
    RETURN RET_TEXT;
  END F_SELECTED_VENDOR;

  FUNCTION F_SELECTED_VENDOR_NO RETURN VARCHAR2 IS
    RET_TEXT VARCHAR2(1000) := NULL;

  BEGIN
    IF P_VENDOR_NO IS NOT NULL THEN
      RET_TEXT := 'AND      pov.segment1  = :P_vendor_no ';
    ELSE
      RET_TEXT := 'AND      pov.segment1  =  pov.segment1 ';
    END IF;
    IF RET_TEXT IS NOT NULL THEN
      RET_TEXT := RET_TEXT ;
    END IF;
    RETURN RET_TEXT;
  END F_SELECTED_VENDOR_NO;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    LP_SELECTED_VENDOR_ID := F_SELECTED_VENDOR;
    LP_SELECTED_VENDOR_NO := F_SELECTED_VENDOR_NO;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

END JA_JAINCTRB_XMLP_PKG;



/
