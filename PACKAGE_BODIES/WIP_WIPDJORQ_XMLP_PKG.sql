--------------------------------------------------------
--  DDL for Package Body WIP_WIPDJORQ_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."WIP_WIPDJORQ_XMLP_PKG" AS
/* $Header: WIPDJORQB.pls 120.1 2008/01/31 12:18:20 npannamp noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    /*SRW.USER_EXIT('FND FLEXSQL CODE="MSTK"
                  APPL_SHORT_NAME="INV" OUTPUT=":P_ASSY"
                  TABLEALIAS="MSI"
                  MODE="SELECT" DISPLAY="ALL"')*/NULL;
    IF (P_FROM_COMP IS NOT NULL) THEN
      IF (P_TO_COMP IS NOT NULL) THEN
        NULL;
      ELSE
        NULL;
      END IF;
    ELSE
      IF (P_TO_COMP IS NOT NULL) THEN
        NULL;
      END IF;
    END IF;
    RETURN (TRUE);
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION LIMIT_JOBS RETURN CHARACTER IS
    LIMIT_JOBS VARCHAR2(768);
  BEGIN
    IF (P_FROM_JOB IS NOT NULL) THEN
      IF (P_TO_JOB IS NOT NULL) THEN
        LIMIT_JOBS := ' AND WE.WIP_ENTITY_NAME BETWEEN ''' || REPLACE(P_FROM_JOB
                             ,''''
                             ,'''''') || ''' AND ''' || REPLACE(P_TO_JOB
                             ,''''
                             ,'''''') || '''';
      ELSE
        LIMIT_JOBS := ' AND WE.WIP_ENTITY_NAME  >= ''' || REPLACE(P_FROM_JOB
                             ,''''
                             ,'''''') || '''';
      END IF;
    ELSE
      IF (P_TO_JOB IS NOT NULL) THEN
        LIMIT_JOBS := ' AND WE.WIP_ENTITY_NAME <= ''' || REPLACE(P_TO_JOB
                             ,''''
                             ,'''''') || '''';
      ELSE
        LIMIT_JOBS := ' ';
      END IF;
    END IF;
    RETURN (LIMIT_JOBS);
  END LIMIT_JOBS;

  FUNCTION LIMIT_DATES RETURN CHARACTER IS
    LIMIT_DATES VARCHAR2(120);
  BEGIN
    IF (P_FROM_DATE IS NOT NULL) THEN
      IF (P_TO_DATE IS NOT NULL) THEN
        LIMIT_DATES := ' AND WRO.date_required >= TO_DATE(''' || TO_CHAR(P_FROM_DATE
                              ,'YYYYMMDD') || ''',''YYYYMMDD'')' || ' AND WRO.date_required < TO_DATE(''' || TO_CHAR(P_TO_DATE + 1
                              ,'YYYYMMDD') || ''',''YYYYMMDD'')';
      ELSE
        LIMIT_DATES := ' AND WRO.date_required >= TO_DATE(''' || TO_CHAR(P_FROM_DATE
                              ,'YYYYMMDD') || ''',''YYYYMMDD'')';
      END IF;
    ELSE
      IF (P_TO_DATE IS NOT NULL) THEN
        LIMIT_DATES := ' AND WRO.date_required < TO_DATE(''' || TO_CHAR(P_TO_DATE + 1
                              ,'YYYYMMDD') || ''',''YYYYMMDD'')';
      ELSE
        LIMIT_DATES := ' ';
      END IF;
    END IF;
    RETURN (LIMIT_DATES);
  END LIMIT_DATES;

  FUNCTION C_NETTABLE_CONSTRAINTFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF (P_NETTABLE = 1) THEN
      RETURN ('AND    MSS.AVAILABILITY_TYPE(+) = 1');
    ELSE
      RETURN (' ');
    END IF;
    RETURN NULL;
  END C_NETTABLE_CONSTRAINTFORMULA;

  FUNCTION C_TOTAL_QTY_FORMULAFORMULA(C_TOTAL_QTY IN NUMBER
                                     ,SUPPLY_FLAG IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN C_TOTAL_QTY * SUPPLY_FLAG;
  END C_TOTAL_QTY_FORMULAFORMULA;

  FUNCTION C_QTY_SHORT_QOHFORMULA(C_QTY_SHORT_FORMULA IN NUMBER
                                 ,C_OPEN_REQUIREMENTS IN VARCHAR2
                                 ,AVAIL_QTY IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF ((P_OPEN_SHORT = 1) AND (P_SORT_BY <> 9) AND (P_SORT_BY <> 13)) THEN
      RETURN -1 * (C_QTY_SHORT_FORMULA - C_OPEN_REQUIREMENTS);
    ELSE
      RETURN -1 * (AVAIL_QTY - C_OPEN_REQUIREMENTS);
    END IF;
    RETURN NULL;
  END C_QTY_SHORT_QOHFORMULA;

  FUNCTION DEPARTMENT_LIMITER RETURN CHARACTER IS
    LIMIT_DEPT VARCHAR2(80);
  BEGIN
    IF (P_FROM_DEPT IS NOT NULL) THEN
      IF (P_TO_DEPT IS NOT NULL) THEN
        LIMIT_DEPT := ' AND BOD.DEPARTMENT_CODE BETWEEN ''' || P_FROM_DEPT || ''' AND ''' || P_TO_DEPT || '''';
      ELSE
        LIMIT_DEPT := ' AND BOD.DEPARTMENT_CODE >= ''' || P_FROM_DEPT || '''';
      END IF;
    ELSE
      IF (P_TO_DEPT IS NOT NULL) THEN
        LIMIT_DEPT := ' AND BOD.DEPARTMENT_CODE <= ''' || P_TO_DEPT || '''';
      ELSE
        LIMIT_DEPT := ' ';
      END IF;
    END IF;
    RETURN (LIMIT_DEPT);
  END DEPARTMENT_LIMITER;

  FUNCTION C_BREAK_JOBFORMULA(JOB IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    IF (P_SORT_BY = 11) THEN
      RETURN (JOB);
    ELSE
      RETURN ('X');
    END IF;
    RETURN NULL;
  END C_BREAK_JOBFORMULA;

  FUNCTION C_BREAK_DATE_REQUIREDFORMULA(DATE_REQUIRED IN DATE) RETURN DATE IS
  BEGIN
    IF (P_SORT_BY = 5) THEN
      RETURN (DATE_REQUIRED);
    ELSE
      RETURN (NULL);
    END IF;
    RETURN NULL;
  END C_BREAK_DATE_REQUIREDFORMULA;

  FUNCTION C_BREAK_DEPARTMENTFORMULA(DEPARTMENT IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    IF (P_SORT_BY = 12) THEN
      RETURN (DEPARTMENT);
    ELSE
      RETURN (' ');
    END IF;
    RETURN NULL;
  END C_BREAK_DEPARTMENTFORMULA;

  FUNCTION C_LIMIT_COMPONENTSFORMULA RETURN VARCHAR2 IS
  BEGIN
    BEGIN
      IF (P_FLEXWHERE IS NOT NULL) THEN
        RETURN ('AND ');
      ELSE
        RETURN ('  ');
      END IF;
    END;
    RETURN NULL;
  END C_LIMIT_COMPONENTSFORMULA;

  FUNCTION C_BREAK_COMP_DISPFORMULA(COMPONENT IN VARCHAR2
                                   ,C_COMPONENT_DISP IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(COMPONENT)*/NULL;
    /*SRW.REFERENCE(C_COMPONENT_DISP)*/NULL;
    IF (P_SORT_BY = 9) OR (P_SORT_BY = 13) THEN
      RETURN (C_COMPONENT_DISP);
    ELSE
      RETURN (' ');
    END IF;
    RETURN NULL;
  END C_BREAK_COMP_DISPFORMULA;

  FUNCTION NET_QTY_DETAILFORMULA(AVAILABILITY_TYPE IN NUMBER
                                ,QUANTITY_ON_HAND IN NUMBER) RETURN NUMBER IS
  BEGIN
    /*SRW.REFERENCE(AVAILABILITY_TYPE)*/NULL;
    /*SRW.REFERENCE(QUANTITY_ON_HAND)*/NULL;
    RETURN (AVAILABILITY_TYPE * QUANTITY_ON_HAND);
  END NET_QTY_DETAILFORMULA;

  FUNCTION AVAIL_QTYFORMULA(NET_QTY_COMP IN NUMBER
                           ,C_ITEM_TOTAL_QTY IN NUMBER) RETURN NUMBER IS
  BEGIN
    /*SRW.REFERENCE(NET_QTY_COMP)*/NULL;
    /*SRW.REFERENCE(C_ITEM_TOTAL_QTY)*/NULL;
    /*SRW.REFERENCE(P_NETTABLE)*/NULL;
    IF (P_NETTABLE = 1) THEN
      RETURN (NET_QTY_COMP);
    ELSE
      RETURN (C_ITEM_TOTAL_QTY);
    END IF;
    RETURN NULL;
  END AVAIL_QTYFORMULA;

  FUNCTION C_COMPONENT_SORTFORMULA(COMPONENT IN VARCHAR2
                                  ,C_COMPONENT_DISP IN VARCHAR2
                                  ,C_COMPONENT_SORT IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(COMPONENT)*/NULL;
    /*SRW.REFERENCE(C_COMPONENT_DISP)*/NULL;
    RETURN (C_COMPONENT_SORT);
  END C_COMPONENT_SORTFORMULA;

  FUNCTION ZEROFORMULA RETURN NUMBER IS
  BEGIN
    RETURN (0);
  END ZEROFORMULA;

  FUNCTION LIMIT_PLANNERS RETURN CHARACTER IS
    LIMIT_PLANNERS VARCHAR2(240);
  BEGIN
    IF (P_FROM_PLANNER IS NOT NULL) THEN
      IF (P_TO_PLANNER IS NOT NULL) THEN
        LIMIT_PLANNERS := ' AND MSI2.PLANNER_CODE BETWEEN ''' || P_FROM_PLANNER || ''' AND ''' || P_TO_PLANNER || '''';
      ELSE
        LIMIT_PLANNERS := ' AND MSI2.PLANNER_CODE  >= ''' || P_FROM_PLANNER || '''';
      END IF;
    ELSE
      IF (P_TO_PLANNER IS NOT NULL) THEN
        LIMIT_PLANNERS := ' AND MSI2.PLANNER_CODE <= ''' || P_TO_PLANNER || '''';
      ELSE
        LIMIT_PLANNERS := ' ';
      END IF;
    END IF;
    RETURN (LIMIT_PLANNERS);
  END LIMIT_PLANNERS;

  FUNCTION LIMIT_BUYER RETURN CHARACTER IS
    LIMIT_BUYER VARCHAR2(240);
  BEGIN
    IF (P_FROM_BUYER IS NOT NULL) THEN
      IF (P_TO_BUYER IS NOT NULL) THEN
        LIMIT_BUYER := ' AND EMP.FULL_NAME BETWEEN ''' || REPLACE(P_FROM_BUYER
                              ,''''
                              ,'''''') || ''' AND ''' || REPLACE(P_TO_BUYER
                              ,''''
                              ,'''''') || '''';
      ELSE
        LIMIT_BUYER := ' AND EMP.FULL_NAME  >= ''' || REPLACE(P_FROM_BUYER
                              ,''''
                              ,'''''') || '''';
      END IF;
    ELSE
      IF (P_TO_BUYER IS NOT NULL) THEN
        LIMIT_BUYER := ' AND EMP.FULL_NAME <= ''' || REPLACE(P_TO_BUYER
                              ,''''
                              ,'''''') || '''';
      ELSE
        LIMIT_BUYER := ' ';
      END IF;
    END IF;
    RETURN (LIMIT_BUYER);
  END LIMIT_BUYER;

  FUNCTION C_BREAK_ASSY_DISPFORMULA(C_ASSY IN VARCHAR2
                                   ,C_ASSY_DISP IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_ASSY)*/NULL;
    /*SRW.REFERENCE(C_ASSY_DISP)*/NULL;
    IF (P_SORT_BY = 11) THEN
      RETURN (C_ASSY_DISP);
    ELSE
      RETURN ('X');
    END IF;
    RETURN NULL;
  END C_BREAK_ASSY_DISPFORMULA;

  FUNCTION MASTER_BREAK_FUNC(COMPONENT IN VARCHAR2
                            ,C_COMPONENT_DISP IN VARCHAR2
                            ,C_COMPONENT_SORT IN VARCHAR2
                            ,JOB IN VARCHAR2
                            ,DEPARTMENT IN VARCHAR2
                            ,MAKE_BUY IN VARCHAR2
                            ,BUYER_NAME IN VARCHAR2
                            ,PLANNER_CODE IN VARCHAR2
                            ,DATE_REQUIRED IN DATE) RETURN CHARACTER IS
    TEMP VARCHAR2(1250);
  BEGIN
    /*SRW.REFERENCE(COMPONENT)*/NULL;
    /*SRW.REFERENCE(C_COMPONENT_DISP)*/NULL;
    /*SRW.REFERENCE(C_COMPONENT_SORT)*/NULL;
    /*SRW.REFERENCE(JOB)*/NULL;
    /*SRW.REFERENCE(DEPARTMENT)*/NULL;
    /*SRW.REFERENCE(MAKE_BUY)*/NULL;
    /*SRW.REFERENCE(BUYER_NAME)*/NULL;
    /*SRW.REFERENCE(PLANNER_CODE)*/NULL;
    /*SRW.REFERENCE(DATE_REQUIRED)*/NULL;
    IF (P_SORT_BY = 9) THEN
      TEMP := C_COMPONENT_SORT;
    ELSE
      IF (P_SORT_BY = 5) THEN
        TEMP := LPAD(TO_CHAR(DATE_REQUIRED
                            ,'J')
                    ,10);
      ELSE
        IF (P_SORT_BY = 11) THEN
          TEMP := JOB;
        ELSE
          IF (P_SORT_BY = 12) THEN
            TEMP := DEPARTMENT;
          ELSE
            TEMP := RPAD(MAKE_BUY
                        ,10) || RPAD(BUYER_NAME
                        ,240) || RPAD(PLANNER_CODE
                        ,40) || C_COMPONENT_SORT;
          END IF;
        END IF;
      END IF;
    END IF;
    RETURN (TEMP);
  END MASTER_BREAK_FUNC;

  FUNCTION C_FIRST_SORTFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF (P_SORT_BY = 5) THEN
      RETURN ('WRO.Date_Required');
    ELSE
      IF (P_SORT_BY = 11) THEN
        RETURN ('WE.WIP_ENTITY_NAME');
      ELSE
        IF (P_SORT_BY = 12) THEN
          RETURN ('BOD.DEPARTMENT_CODE');
        ELSE
          RETURN ('''X''');
        END IF;
      END IF;
    END IF;
    RETURN NULL;
  END C_FIRST_SORTFORMULA;

  FUNCTION C_TOT_QTY_SHORTFORMULA(C_TOTAL_AVAIL_QTY IN VARCHAR2
                                 ,C_TOTAL_AVAIL_NET_QTY IN VARCHAR2
                                 ,C_TOT_QTY_OPEN IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    /*SRW.REFERENCE(C_TOTAL_AVAIL_QTY)*/NULL;
    /*SRW.REFERENCE(C_TOTAL_AVAIL_NET_QTY)*/NULL;
    /*SRW.REFERENCE(C_TOT_QTY_OPEN)*/NULL;
    IF (P_NETTABLE = 1) THEN
      RETURN (C_TOT_QTY_OPEN - C_TOTAL_AVAIL_NET_QTY);
    ELSE
      RETURN (C_TOT_QTY_OPEN - C_TOTAL_AVAIL_QTY);
    END IF;
    RETURN NULL;
  END C_TOT_QTY_SHORTFORMULA;

  FUNCTION C_BREAK_COMP_DESCFORMULA(COMP_DESC IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    IF ((P_SORT_BY = 9) OR (P_SORT_BY = 13)) THEN
      RETURN (COMP_DESC);
    ELSE
      RETURN ('X');
    END IF;
    RETURN NULL;
  END C_BREAK_COMP_DESCFORMULA;

  FUNCTION C_DISPLAY_FORMULAFORMULA(C_QTY_SHORT_QOH IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF ((P_OPEN_SHORT = 1) OR (P_OPEN_SHORT = 2)) AND (C_QTY_SHORT_QOH <= 0) THEN
      RETURN (0);
    ELSE
      RETURN (1);
    END IF;
    RETURN NULL;
  END C_DISPLAY_FORMULAFORMULA;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    IF P_FROM_COMP IS NOT NULL OR P_TO_COMP IS NOT NULL THEN
      P_ITEM_ORG := 'and MSI2.ORGANIZATION_ID = :P_ORGANIZATION_ID';
    END IF;
    IF P_SCHEDULE_GROUP IS NOT NULL THEN
      P_SG_OUTER := ' ';
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION LIMIT_BULK_SUPPLY_TYPE RETURN CHARACTER IS
    LIMIT_BULK_SUPPLY_TYPE VARCHAR2(100);
  BEGIN
    IF (P_INCLUDE_BULK = 1) THEN
      LIMIT_BULK_SUPPLY_TYPE := ' ';
    ELSE
      LIMIT_BULK_SUPPLY_TYPE := 'AND WRO.WIP_SUPPLY_TYPE <> 4 ';
    END IF;
    RETURN (LIMIT_BULK_SUPPLY_TYPE);
  END LIMIT_BULK_SUPPLY_TYPE;

  FUNCTION LIMIT_VENDOR_SUPPLY_TYPE RETURN CHARACTER IS
    LIMIT_VENDOR_SUPPLY_TYPE VARCHAR2(100);
  BEGIN
    IF (P_INCLUDE_VENDOR = 1) THEN
      LIMIT_VENDOR_SUPPLY_TYPE := ' ';
    ELSE
      LIMIT_VENDOR_SUPPLY_TYPE := 'AND WRO.WIP_SUPPLY_TYPE <> 5 ';
    END IF;
    RETURN (LIMIT_VENDOR_SUPPLY_TYPE);
  END LIMIT_VENDOR_SUPPLY_TYPE;

  FUNCTION C_LIMITER RETURN VARCHAR2 IS
    C_OUT VARCHAR2(200);
  BEGIN
    IF P_SCHEDULE_GROUP IS NOT NULL THEN
      C_OUT := ' AND SG.SCHEDULE_GROUP_NAME = ''' || P_SCHEDULE_GROUP || '''';
    ELSE
      C_OUT := ' ';
    END IF;
    RETURN (C_OUT);
  END C_LIMITER;

  FUNCTION C_LIMIT_DATE_REQFORMULA RETURN CHAR IS
    LIMIT_DATE_REQ VARCHAR2(120) := ' ';
  BEGIN
    IF (P_REQ_END_DATE IS NOT NULL) THEN
      LIMIT_DATE_REQ := ' AND WRO.DATE_REQUIRED < TO_DATE(''' || TO_CHAR(P_REQ_END_DATE
                               ,'YYYYMMDD') || ''',''YYYYMMDD'') + 1 ';
    END IF;
    RETURN (LIMIT_DATE_REQ);
  END C_LIMIT_DATE_REQFORMULA;

END WIP_WIPDJORQ_XMLP_PKG;


/
