--------------------------------------------------------
--  DDL for Package Body MRP_MRPRPLOR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."MRP_MRPRPLOR_XMLP_PKG" AS
/* $Header: MRPRPLORB.pls 120.2 2007/12/25 08:31:06 nchinnam noship $ */
  FUNCTION C_PLANNER_RANGEFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      PLANNER_RANGE VARCHAR2(80);
    BEGIN
      IF (P_PLANNER IS NOT NULL) THEN
        PLANNER_RANGE := 'AND req.planner_code = ''' || P_PLANNER || '''';
      ELSE
        PLANNER_RANGE := ' ';
      END IF;
      RETURN (PLANNER_RANGE);
    END;
    RETURN NULL;
  END C_PLANNER_RANGEFORMULA;
  FUNCTION C_BUYER_RANGEFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      BUYER_RANGE VARCHAR2(80);
    BEGIN
      IF (P_BUYER IS NOT NULL) THEN
        BUYER_RANGE := 'AND req.buyer_id = ' || P_BUYER;
      ELSE
        BUYER_RANGE := ' ';
      END IF;
      RETURN (BUYER_RANGE);
    END;
    RETURN NULL;
  END C_BUYER_RANGEFORMULA;
  FUNCTION C_CATEGORY_FROMFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      CATEGORY_FROM VARCHAR2(80);
    BEGIN
      IF ((P_LOW_CAT IS NOT NULL) OR (P_HIGH_CAT IS NOT NULL) OR (P_SORT = 2)) THEN
        CATEGORY_FROM := ',mtl_categories cat';
      ELSE
        CATEGORY_FROM := ' ';
      END IF;
      RETURN (CATEGORY_FROM);
    END;
    RETURN NULL;
  END C_CATEGORY_FROMFORMULA;
  FUNCTION C_SORT_COLUMNFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      SORT_COLUMN VARCHAR2(80);
    BEGIN
      IF (P_SORT = 3) THEN
        SORT_COLUMN := ',req.planner_code';
      ELSIF (P_SORT = 4) THEN
        SORT_COLUMN := ',req.buyer_name';
      ELSIF (P_SORT = 6) THEN
        SORT_COLUMN := ',abc.abc_class_id';
      ELSE
        SORT_COLUMN := ' ';
      END IF;
      RETURN (SORT_COLUMN);
    END;
    RETURN NULL;
  END C_SORT_COLUMNFORMULA;
  FUNCTION C_ORDER_BYFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      ORDER_BY VARCHAR2(80);
    BEGIN
      IF (P_SORT = 3) THEN
        ORDER_BY := 'req.planner_code,';
      ELSIF (P_SORT = 4) THEN
        ORDER_BY := 'req.buyer_name,';
      ELSIF (P_SORT = 6) THEN
        ORDER_BY := 'abc.abc_class_id,';
      ELSIF (P_SORT = 7) THEN
        ORDER_BY := 'par.organization_code,';
      ELSIF (P_SORT = 0) THEN
        ORDER_BY := ' ';
      ELSE
        ORDER_BY := ', ';
      END IF;
      RETURN (ORDER_BY);
    END;
    RETURN NULL;
  END C_ORDER_BYFORMULA;
  FUNCTION C_ABC_WHEREFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      ABC_WHERE VARCHAR2(200);
    BEGIN
      IF (P_ABC_ASSGN IS NOT NULL) THEN
        ABC_WHERE := 'AND abc.inventory_item_id(+) = req.inventory_item_id ' || 'AND abc.assignment_group_id = ' || P_ABC_ASSGN || ' AND abc.abc_class_id = abc_cls.abc_class_id';
      ELSIF ((P_ABC_CLASS IS NOT NULL) OR (P_SORT = 6)) THEN
        ABC_WHERE := 'AND abc.inventory_item_id(+) = req.inventory_item_id ' || 'AND abc_cls.abc_class_id(+) = abc.abc_class_id';
      ELSE
        ABC_WHERE := ' ';
      END IF;
      RETURN (ABC_WHERE);
    END;
    RETURN NULL;
  END C_ABC_WHEREFORMULA;
  FUNCTION C_ABC_FROMFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      ABC_FROM VARCHAR2(80);
    BEGIN
      IF (P_ABC_ASSGN IS NOT NULL) OR ((P_ABC_CLASS IS NOT NULL) OR (P_SORT = 6)) THEN
        ABC_FROM := ',mtl_abc_assignments abc' || ',mtl_abc_classes abc_cls';
      ELSE
        ABC_FROM := ' ';
      END IF;
      RETURN (ABC_FROM);
    END;
    RETURN NULL;
  END C_ABC_FROMFORMULA;
  FUNCTION C_ABC_RANGEFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      ABC_RANGE VARCHAR2(80);
    BEGIN
      IF (P_ABC_CLASS IS NOT NULL) THEN
        ABC_RANGE := 'AND abc.abc_class_id = ' || P_ABC_CLASS;
      ELSE
        ABC_RANGE := ' ';
      END IF;
      RETURN (ABC_RANGE);
    END;
    RETURN NULL;
  END C_ABC_RANGEFORMULA;
  FUNCTION C_CATEGORY_WHEREFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      CATEGORY_WHERE VARCHAR2(100);
    BEGIN
      IF ((P_LOW_CAT IS NOT NULL) OR (P_HIGH_CAT IS NOT NULL) OR (P_SORT = 2)) THEN
        CATEGORY_WHERE := 'AND ic.category_id = cat.category_id(+)' || ' AND cat.structure_id = ' || P_CAT_STRUCT;
      ELSE
        CATEGORY_WHERE := ' ';
      END IF;
      RETURN (CATEGORY_WHERE);
    END;
    RETURN NULL;
  END C_CATEGORY_WHEREFORMULA;
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      CAL_CODE VARCHAR2(10);
      CAL_EXCEPTION_SET_ID NUMBER;
      CAT_STRUCT_NUM NUMBER;
    BEGIN
   -- LP_ADVANCE_NOTICE_DATE:=P_ADVANCE_NOTICE_DATE;
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
      IF (P_DEBUG = 'Y') THEN
        EXECUTE IMMEDIATE
          'ALTER SESSION SET SQL_TRACE TRUE';
      END IF;
      P_CAT_STRUCT_NUM := P_CAT_STRUCT;
      IF (P_SORT = 1) THEN
        NULL;
      END IF;
      IF (P_SORT = 2) THEN
        NULL;
      END IF;
      IF ((P_LOW_ITEM IS NOT NULL) OR (P_HIGH_ITEM IS NOT NULL)) THEN
        NULL;
      END IF;
      IF ((P_LOW_CAT IS NOT NULL) OR (P_HIGH_CAT IS NOT NULL)) THEN
        NULL;
      END IF;
      SELECT
        CALENDAR_CODE,
        CALENDAR_EXCEPTION_SET_ID
      INTO CAL_CODE,CAL_EXCEPTION_SET_ID
      FROM
        MTL_PARAMETERS
      WHERE ORGANIZATION_ID = P_ORG_ID;
      P_CAL_CODE := CAL_CODE;
      P_CAL_EXCEPTION_SET_ID := CAL_EXCEPTION_SET_ID;
    END;
    LP_ADVANCE_NOTICE_DATE:=to_char(P_ADVANCE_NOTICE_DATE,'DD-MON-YYYY');
    RETURN (TRUE);
  END BEFOREREPORT;
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    END;
    RETURN (TRUE);
  END AFTERREPORT;
  FUNCTION C_SORT_PFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      SORT VARCHAR2(80);
    BEGIN
      SELECT
        MEANING
      INTO SORT
      FROM
        MFG_LOOKUPS
      WHERE LOOKUP_TYPE = 'MRP_DATA_SELECT'
        AND LOOKUP_CODE = P_SORT;
      RETURN (SORT);
    END;
    RETURN NULL;
  END C_SORT_PFORMULA;
  FUNCTION C_BUYER_PFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      BUYER VARCHAR2(50);
    BEGIN
      IF (P_BUYER IS NOT NULL) THEN
        SELECT
          FULL_NAME
        INTO BUYER
        FROM
          MTL_EMPLOYEES_VIEW
        WHERE EMPLOYEE_ID = P_BUYER
          AND ORGANIZATION_ID = P_ORG_ID;
      END IF;
      RETURN (BUYER);
    END;
    RETURN NULL;
  END C_BUYER_PFORMULA;
  FUNCTION C_CAT_SET_PFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      CAT_SET VARCHAR2(30);
    BEGIN
      SELECT
        CATEGORY_SET_NAME
      INTO CAT_SET
      FROM
        MTL_CATEGORY_SETS
      WHERE CATEGORY_SET_ID = P_CAT_SET;
      RETURN (CAT_SET);
    END;
    RETURN NULL;
  END C_CAT_SET_PFORMULA;
  FUNCTION C_ABC_ASSGN_PFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      ABC_ASSGN VARCHAR2(40);
    BEGIN
      SELECT
        ASSIGNMENT_GROUP_NAME
      INTO ABC_ASSGN
      FROM
        MTL_ABC_ASSIGNMENT_GROUPS
      WHERE ASSIGNMENT_GROUP_ID = P_ABC_ASSGN
        AND ORGANIZATION_ID = P_ORG_ID;
      RETURN (ABC_ASSGN);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
    END;
    RETURN NULL;
  END C_ABC_ASSGN_PFORMULA;
  FUNCTION C_ABC_CLASS_PFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      ABC_CLASS VARCHAR2(40);
    BEGIN
      IF (P_ABC_CLASS IS NOT NULL) THEN
        SELECT
          ABC_CLASS_NAME
        INTO ABC_CLASS
        FROM
          MTL_ABC_CLASSES
        WHERE ABC_CLASS_ID = P_ABC_CLASS
          AND ORGANIZATION_ID = P_ORG_ID;
      END IF;
      RETURN (ABC_CLASS);
    END;
    RETURN NULL;
  END C_ABC_CLASS_PFORMULA;
  FUNCTION C_P_MULTI_ORGFORMULA RETURN NUMBER IS
  BEGIN
    DECLARE
      ORG_SELECTION NUMBER;
      MULTI_ORG NUMBER;
    BEGIN
      SELECT
        DISTINCT
        ORGANIZATION_SELECTION
      INTO ORG_SELECTION
      FROM
        MRP_PLAN_ORGANIZATIONS_V
      WHERE DECODE(P_ORG_TYPE
            ,1
            ,PLANNED_ORGANIZATION
            ,ORGANIZATION_ID) = P_ORG_ID
        AND COMPILE_DESIGNATOR = P_PLAN_NAME;
      IF ((ORG_SELECTION = 2) OR (ORG_SELECTION = 3)) THEN
        MULTI_ORG := 1;
      ELSE
        MULTI_ORG := 2;
      END IF;
      RETURN (MULTI_ORG);
    END;
    RETURN NULL;
  END C_P_MULTI_ORGFORMULA;
  FUNCTION C_P_ORG_TYPEFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      ORG_TYPE VARCHAR2(80) := 'Current Organization';
    BEGIN
      IF P_ORG_TYPE = 2 THEN
        SELECT
          MEANING
        INTO ORG_TYPE
        FROM
          MFG_LOOKUPS
        WHERE LOOKUP_CODE = P_ORG_TYPE
          AND LOOKUP_TYPE = 'MRP_REPORT_MULTIORG';
      END IF;
      RETURN (ORG_TYPE);
    END;
    RETURN NULL;
  END C_P_ORG_TYPEFORMULA;
END MRP_MRPRPLOR_XMLP_PKG;


/
