--------------------------------------------------------
--  DDL for Package Body IEC_AGTLESS_CPN_PVT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."IEC_AGTLESS_CPN_PVT" AS
/* $Header: IECVACRB.pls 115.6 2003/10/22 15:02:25 minwang noship $ */

-- Sub-Program Unit Declarations

PROCEDURE CREATE_LOCK_RT_INFO
  (
  P_CAMPAIGN_ID     IN            NUMBER,
  P_SERVER_ID       IN            NUMBER,
  P_AUTO_EXEC       IN            VARCHAR2,
  X_EXECUTION	    OUT NOCOPY 	  VARCHAR2,
  X_RESULT          OUT NOCOPY 	  VARCHAR2
  )
AS
BEGIN
  -- TRY TO INSERT RT INFO AND LOCK CAMPAIGN
  BEGIN
    INSERT INTO IEC_G_AGTLESS_CPN_RT_INFO
    (
      AGTLESS_CPN_RT_INFO_ID,
      OBJECT_VERSION_NUMBER,
      CREATED_BY,
      CREATION_DATE,
      LAST_UPDATED_BY,
      LAST_UPDATE_DATE,
      SERVER_ID,
      CAMPAIGN_ID,
      EXECUTION,
      STATUS
    )
    VALUES
    (
      IEC_G_AGTLESS_CPN_RT_INFO_S.NEXTVAL,
      1,
      1,
      SYSDATE,
      1,
      SYSDATE,
      P_SERVER_ID,
      P_CAMPAIGN_ID,
      L_EXECUTION_START,
      L_STATUS_STARTING
    );

    -- IF INSERT success, we locked it
    X_RESULT := FND_API.G_RET_STS_SUCCESS;
    X_EXECUTION := L_EXECUTION_START;
    COMMIT;
    RETURN;

  EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
      X_RESULT := FND_API.G_RET_STS_ERROR;
      X_EXECUTION := L_EXECUTION_STOP;
      RETURN;

    WHEN OTHERS THEN
      X_RESULT := FND_API.G_RET_STS_UNEXP_ERROR;
      X_EXECUTION := L_EXECUTION_STOP;
      RETURN;

  END; -- END INSERT BLOCK

END CREATE_LOCK_RT_INFO;


PROCEDURE LOCK_AGENTLESS_CAMPAIGN
  (
  P_CAMPAIGN_ID     IN            NUMBER,
  P_SERVER_ID       IN            NUMBER,
  P_AUTO_EXEC       IN            VARCHAR2,
  X_EXECUTION	    OUT NOCOPY	  VARCHAR2,
  X_RESULT          OUT NOCOPY 	  VARCHAR2
  )
AS

  l_curr_server_id 	NUMBER;
  l_last_update_date 	DATE;
  l_execution 		VARCHAR2(100);

BEGIN

  X_RESULT := FND_API.G_RET_STS_ERROR;

  BEGIN
    SELECT SERVER_ID, LAST_UPDATE_DATE, EXECUTION
      INTO l_curr_server_id, l_last_update_date, l_execution
      FROM IEC_G_AGTLESS_CPN_RT_INFO
      WHERE CAMPAIGN_ID = P_CAMPAIGN_ID
      FOR UPDATE;

  EXCEPTION
      WHEN NO_DATA_FOUND THEN
      BEGIN

	-- IF ENTRY DOES NOT EXIST,  SEE IF AUTO START
        IF P_AUTO_EXEC = L_AUTO_EXEC THEN

	  CREATE_LOCK_RT_INFO(P_CAMPAIGN_ID, P_SERVER_ID, P_AUTO_EXEC, X_EXECUTION, X_RESULT);
	  RETURN;

        ELSE

	  -- NO AUTO START
          X_EXECUTION := L_EXECUTION_STOP;
	  RETURN;

	END IF;

      END;  -- END NO_DATA_FOUND BLOCK

  END; -- END SELECT BLOCK

  IF P_AUTO_EXEC = L_AUTO_EXEC THEN

    -- AUTO START
    l_execution := L_EXECUTION_START;
  END IF;

  X_EXECUTION := SUBSTR(l_execution, 1, 5);

  IF X_EXECUTION = L_EXECUTION_START THEN

    -- is executing, see if we locked it

    IF l_curr_server_id = P_SERVER_ID OR l_curr_server_id = NULL OR SYSDATE - l_last_update_date > 1/720 THEN

      UPDATE IEC_G_AGTLESS_CPN_RT_INFO
        SET SERVER_ID = P_SERVER_ID, LAST_UPDATE_DATE = SYSDATE, STATUS = L_STATUS_STARTED, EXECUTION = l_execution, LAST_UPDATED_BY = 1
        WHERE CAMPAIGN_ID = P_CAMPAIGN_ID;

      X_RESULT := FND_API.G_RET_STS_SUCCESS;

    END IF;

  ELSE

    -- NOT EXEC, UNLOCK IT IF WE LOCKED
    IF l_curr_server_id = P_SERVER_ID THEN

	UNLOCK_AGENTLESS_CAMPAIGN(P_CAMPAIGN_ID, P_SERVER_ID);
    END IF;

  END IF;


  COMMIT;

END LOCK_AGENTLESS_CAMPAIGN;

PROCEDURE UNLOCK_AGENTLESS_CAMPAIGN
  (
  P_CAMPAIGN_ID     IN            NUMBER,
  P_SERVER_ID       IN            NUMBER
  )
AS
BEGIN

  BEGIN

    UPDATE IEC_G_AGTLESS_CPN_RT_INFO
      SET SERVER_ID = '', LAST_UPDATE_DATE = SYSDATE, STATUS = L_STATUS_STOPPED, LAST_UPDATED_BY = 1
      WHERE CAMPAIGN_ID = P_CAMPAIGN_ID AND SERVER_ID = P_SERVER_ID;
  EXCEPTION

    WHEN OTHERS THEN
      RETURN;
  END;

END UNLOCK_AGENTLESS_CAMPAIGN;


END IEC_AGTLESS_CPN_PVT;

/
