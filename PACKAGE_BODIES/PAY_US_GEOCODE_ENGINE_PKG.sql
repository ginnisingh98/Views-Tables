--------------------------------------------------------
--  DDL for Package Body PAY_US_GEOCODE_ENGINE_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PAY_US_GEOCODE_ENGINE_PKG" as
/* $Header: pyusgeom.pkb 120.5.12010000.2 2008/09/19 07:20:22 pannapur ship $ */

procedure GEOCODE_UPGRADE(errbuf     OUT nocopy    VARCHAR2,
                          retcode    OUT nocopy    NUMBER,
                          p_mode     in            VARCHAR2 )
is
--
--
cursor c_max_geocode_patch_name is
        select patch_name,
               Substr( patch_name,
                       greatest(instr(patch_name,'_1'),instr(patch_name,'_2')) + 1, 4)
        from pay_patch_status
        where patch_name like '%GEO%'
          and Substr( patch_name,
                      greatest(instr(patch_name,'_1'),instr(patch_name,'_2')) + 1, 4) >= '2001'
        group by patch_name
        order by patch_name desc;


 cursor c_geocode_patch_name is
        select patch_name,
               Substr( patch_name,
                       greatest(instr(patch_name,'_1'),instr(patch_name,'_2')) + 1, 4)
        from pay_us_modified_geocodes
        where patch_name like '%GEO%'
          and Substr( patch_name,
                      greatest(instr(patch_name,'_1'),instr(patch_name,'_2')) + 1, 4) >= '2001'
        group by patch_name
        order by patch_name asc;

  cursor c_geocode_patch_status  (p_patch_name  in varchar)
      is
        select status
        from pay_patch_status
        where patch_name = p_patch_name
        order by patch_name asc;

  cursor c_geo_patch_comp_stat (p_patch_name  in varchar)
  is
      select status
      from pay_patch_status
      where patch_name = p_patch_name;

cursor c_geo_check_us_assignments (p_patch_name  in varchar)
  is
	select count (tr.assignment_id)
	from pay_us_modified_geocodes mg,
	     pay_us_emp_city_tax_rules_f tr,
             per_all_assignments_f paf,
             pay_us_states pus
	where mg.patch_name = p_patch_name
	  and mg.state_code = pus.state_code
	  and mg.state_code = tr.state_code
	  and mg.county_code = tr.county_code
	  and mg.old_city_code = tr.city_code
	  and tr.assignment_id = paf.assignment_id;


cursor c_geo_check_ca_assignments (p_patch_name  in varchar)
  is
	select count(pac.assignment_id)
	from   per_all_assignments_f paf,
	       pay_action_contexts pac,
               pay_us_modified_geocodes pmod
	where  pmod.state_code = '70'
          and  pmod.county_code = pac.context_value
	  and  pac.context_id  in (select context_id
                               from ff_contexts
                               where context_name = 'jurisdiction_code')
	  and  pmod.patch_name = p_patch_name
	  and  pac.assignment_id = paf.assignment_id;


  list_index     number:=1;
  start_index    number:=1;
  end_index      number:=1;
  l_req_id       number;
  copies_buffer  varchar2(80) := null;
  print_buffer   varchar2(80) := null;
  printer_buffer varchar2(80) := null;
  style_buffer   varchar2(80) := null;
  save_buffer    boolean      := null;
  save_result    varchar2(1)  := null;
  req_id         varchar2(80) := null;
  x              boolean;
  x1             boolean;

  l_patch_name               Pay_Patch_status.patch_name%type;
  l_patch_status             Pay_Patch_status.status%type;
  l_max_patch_name            Pay_Patch_status.patch_name%type;
  l_completion_patch_status  Pay_Patch_status.status%type;
  l_year                     varchar2(4);
  l_max_year                 varchar2(4);

  l_phase   varchar2(10);
  l_status  varchar2(10);
  l_dev_phase varchar2(10);
  l_dev_status varchar2(10);
  l_message    varchar2(240);
  l_return_val boolean;
  l_us_count varchar2(10);
  l_ca_count varchar2(10);
  concurrent_program_failure EXCEPTION;
--
--


begin

  open c_max_geocode_patch_name;
  fetch c_max_geocode_patch_name into
       l_max_patch_name,
       l_max_year;

  if c_max_geocode_patch_name%FOUND THEN

     open c_geocode_patch_name;

     loop

--hr_utility.trace_on(null,'ORACLE');

         fetch c_geocode_patch_name
         into  l_patch_name,
               l_year;

         exit when c_geocode_patch_name%NOTFOUND;

hr_utility.trace('l_patch_name = ' || l_patch_name);
hr_utility.trace('l_year = ' || l_year);

      --place the log info into the concurrent log file generated by application
         fnd_file.put_line(fnd_file.log, l_patch_name||' '|| l_year);

      --  check patch-status

         l_patch_status := 'N';

         open c_geocode_patch_status (l_patch_name);
         fetch c_geocode_patch_status
         into  l_patch_status;

hr_utility.trace('l_patch_status = ' || l_patch_status);


      --place the log info into the concurrent log file generated by application
      --fnd_file.put_line(fnd_file.log, 'status = '|| nvl(l_patch_status,'null'));

         if c_geocode_patch_status%NOTFOUND THEN
             if l_year <= l_max_year THEN
                l_patch_status := 'C';
             else
                l_patch_status := 'N';
             end if;
         end if;

         close c_geocode_patch_status;

         IF l_patch_status <> 'C' THEN


	open c_geo_check_us_assignments(l_patch_name);

	fetch c_geo_check_us_assignments
        into  l_us_count;

	close c_geo_check_us_assignments;

	open c_geo_check_ca_assignments(l_patch_name);

	fetch c_geo_check_ca_assignments
        into  l_ca_count;

	close c_geo_check_ca_assignments;

	IF l_ca_count >0 or l_us_count > 0 THEN   -- Bug 5599273

	hr_utility.trace('Inside ');
          -- initialise variable - 0 is SRS Success, 1 is SRS Warning, 2 is SRS Error
             retcode := 0;
          -- get printing info
             req_id:=fnd_profile.value('CONC_REQUEST_ID');
             print_buffer:=fnd_profile.value('CONC_PRINT_TOGETHER');
              if (print_buffer is NULL)
              then print_buffer:='N';
              end if;

             select number_of_copies,
                   printer,
                   print_style,
                   save_output_flag
             into  copies_buffer,
                   printer_buffer,
                   style_buffer,
                   save_result
             from  fnd_concurrent_requests
             where request_id = fnd_number.canonical_to_number(req_id);


             if (save_result='Y') then
               save_buffer:=true;
             elsif (save_result='N') then
               save_buffer:=false;
             else
               save_buffer:=NULL;
             end if;

hr_utility.trace(' call set print options');

             -- get start of list
             start_index:=1;
             -- get end of list
             end_index:=list_index-1;
             -- loop round from both ends working inwards
               -- set print options
               x:=FND_REQUEST.set_print_options(
                              printer        => printer_buffer,
                              style          => style_buffer,
                              copies         => copies_buffer,
                              save_output    => save_buffer,
                              print_together => print_buffer);

            -- Bug 3487186 Added by ssmukher
               x1 := fnd_Request.USE_CURRENT_NOTIFICATION;

              BEGIN

             -- submit requests for report
               l_req_id:=fnd_request.submit_request(
                               application    => 'PAY',
                               program        => 'PAYUSGEO',
                               argument1      => 'ARCHIVE',
                               argument2      => 'GEO_UPDATE',
                               argument3      => 'DEFAULT',
                               argument4      => to_date('01/01/'||l_year, 'dd/mm/yyyy'),
                               argument5      => sysdate,
                               argument6      => 'REPORT',
                               argument7      => fnd_profile.value('PER_BUSINESS_GROUP_ID'),
                               argument8      => 'DUMMY',
                               argument9      => p_mode,  -- l_mode
                               argument10     => l_patch_name,  -- patch_name
                               argument11     => 'PATCH_NAME=' || l_patch_name,
                               argument12     => 'MODE=' || p_mode );

               EXCEPTION

                WHEN OTHERS THEN

                     HR_UTILITY.TRACE('SQLERRM = ' || SQLERRM);

               END ;

         commit;

         l_return_val :=  fnd_concurrent.wait_for_request(request_id => l_req_id,
                                   --   max_wait   =>  300,
		                              phase      => l_phase,
		                              status     => l_status,
                                              dev_phase  => l_dev_phase,
		                              dev_status => l_dev_status,
		                              message    => l_message);



	ELSE
hr_utility.trace(' in ELSE');
	insert into pay_patch_status
                 (ID,
                  PATCH_NUMBER,
                  PATCH_NAME,
                  PHASE,
                  PROCESS_TYPE,
                  APPLIED_DATE,
                  STATUS,
                  DESCRIPTION,
                  UPDATE_DATE,
                  LEGISLATION_CODE,
                  APPLICATION_RELEASE,
                  PREREQ_PATCH_NAME)
                values
                  (PAY_PATCH_STATUS_S.nextval,
                   '1111111',
                   l_patch_name, --p_patch_name,
                   null,
                   null,
                   sysdate,
                   'C',
                   null, -- lv_patch_desc,
                   null,
                   'US',
                   '115',
                   'Q2' );
END IF; --l_us_count IF
hr_utility.trace(' status complete patch_name = ' || l_patch_name );
            open c_geo_patch_comp_stat(l_patch_name);

            fetch c_geo_patch_comp_stat
            into l_completion_patch_status;

hr_utility.trace('l_completion_patch_status = ' || l_completion_patch_status);


            --place the log info into the concurrent log file generated by application
            fnd_file.put_line(fnd_file.log, 'completion status = '|| l_completion_patch_status);

            if c_geo_patch_comp_stat%NOTFOUND THEN
                 l_completion_patch_status := NULL;
            end if;

            close  c_geo_patch_comp_stat;

            IF nvl(l_completion_patch_status, 'E') <> 'C' THEN
               RAISE concurrent_program_failure;
            END IF;

               if p_mode = 'DEBUG' then
                    update pay_patch_status
                    set patch_name = 'DEBUG_' || l_patch_name
                    where patch_name = l_patch_name;
               end if;

         END IF;
     end loop;


     close c_geocode_patch_name;

  else  -- max_geocode_patch_name%FOUND
        --  Skip processing as the PREREQUSITE JIT patch has not been applied
     hr_utility.trace('JIT patch has not been applied prior to running upgrade');

  end if;

  close c_max_geocode_patch_name;

  /*Modified for bug no 7421642
  if p_mode = 'DEBUG' then
        update pay_patch_status
        set patch_name = 'DEBUG_' || l_patch_name
        where patch_name = l_patch_name;
  end if; */

EXCEPTION
  --
    WHEN concurrent_program_failure THEN



         fnd_message.set_name('PAY', 'HR_75258_GEOCODE_PATCH_ERROR');
         fnd_message.set_token('PATCH_NAME', l_patch_name);
         fnd_message.set_token('REQ_ID', ('o' || l_req_id || '.out') );

         errbuf  := hr_utility.get_message;
         retcode := 2;
         RAISE;
    --


    WHEN others THEN
    --
       -- Set up error message and return code.
       --
       hr_utility.trace('sqlerrm = ' || sqlerrm);
       errbuf  := sqlerrm;
       retcode := 2;

end GEOCODE_UPGRADE;

end PAY_US_GEOCODE_ENGINE_PKG;


/
