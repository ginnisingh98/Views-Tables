--------------------------------------------------------
--  DDL for Package Body ALR_ALERTS_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."ALR_ALERTS_PKG" as
/* $Header: ALRALRTB.pls 120.4.12010000.1 2008/07/27 06:58:21 appldev ship $ */
procedure INSERT_ROW (
  X_ROWID in out nocopy VARCHAR2,
  X_APPLICATION_ID in NUMBER,
  X_ALERT_ID in NUMBER,
  X_ALERT_NAME in VARCHAR2,
  X_ALERT_CONDITION_TYPE in VARCHAR2,
  X_ENABLED_FLAG in VARCHAR2,
  X_START_DATE_ACTIVE in DATE,
  X_END_DATE_ACTIVE in DATE,
  X_TABLE_ID in NUMBER,
  X_TABLE_APPLICATION_ID in NUMBER,
  X_DESCRIPTION in VARCHAR2,
  X_FREQUENCY_TYPE in VARCHAR2,
  X_WEEKLY_CHECK_DAY in VARCHAR2,
  X_MONTHLY_CHECK_DAY_NUM in NUMBER,
  X_DAYS_BETWEEN_CHECKS in NUMBER,
  X_CHECK_BEGIN_DATE in DATE,
  X_DATE_LAST_CHECKED in DATE,
  X_INSERT_FLAG in VARCHAR2,
  X_UPDATE_FLAG in VARCHAR2,
  X_DELETE_FLAG in VARCHAR2,
  X_MAINTAIN_HISTORY_DAYS in NUMBER,
  X_CHECK_TIME in NUMBER,
  X_CHECK_START_TIME in NUMBER,
  X_CHECK_END_TIME in NUMBER,
  X_SECONDS_BETWEEN_CHECKS in NUMBER,
  X_CHECK_ONCE_DAILY_FLAG in VARCHAR2,
  X_SQL_STATEMENT_TEXT in LONG,
  X_ONE_TIME_ONLY_FLAG in NUMBER,
  X_TABLE_NAME in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
  cursor C is select ROWID from ALR_ALERTS
    where APPLICATION_ID = X_APPLICATION_ID
    and ALERT_ID = X_ALERT_ID
    ;
begin
  insert into ALR_ALERTS (
    APPLICATION_ID,
    ALERT_ID,
    ALERT_NAME,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_LOGIN,
    ALERT_CONDITION_TYPE,
    ENABLED_FLAG,
    START_DATE_ACTIVE,
    END_DATE_ACTIVE,
    TABLE_ID,
    TABLE_APPLICATION_ID,
    DESCRIPTION,
    FREQUENCY_TYPE,
    WEEKLY_CHECK_DAY,
    MONTHLY_CHECK_DAY_NUM,
    DAYS_BETWEEN_CHECKS,
    CHECK_BEGIN_DATE,
    DATE_LAST_CHECKED,
    INSERT_FLAG,
    UPDATE_FLAG,
    DELETE_FLAG,
    MAINTAIN_HISTORY_DAYS,
    CHECK_TIME,
    CHECK_START_TIME,
    CHECK_END_TIME,
    SECONDS_BETWEEN_CHECKS,
    CHECK_ONCE_DAILY_FLAG,
    SQL_STATEMENT_TEXT,
    ONE_TIME_ONLY_FLAG,
    TABLE_NAME
  ) values (
    X_APPLICATION_ID,
    X_ALERT_ID,
    X_ALERT_NAME,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_LOGIN,
    X_ALERT_CONDITION_TYPE,
    X_ENABLED_FLAG,
    X_START_DATE_ACTIVE,
    X_END_DATE_ACTIVE,
    X_TABLE_ID,
    X_TABLE_APPLICATION_ID,
    X_DESCRIPTION,
    X_FREQUENCY_TYPE,
    X_WEEKLY_CHECK_DAY,
    X_MONTHLY_CHECK_DAY_NUM,
    X_DAYS_BETWEEN_CHECKS,
    X_CHECK_BEGIN_DATE,
    X_DATE_LAST_CHECKED,
    X_INSERT_FLAG,
    X_UPDATE_FLAG,
    X_DELETE_FLAG,
    X_MAINTAIN_HISTORY_DAYS,
    X_CHECK_TIME,
    X_CHECK_START_TIME,
    X_CHECK_END_TIME,
    X_SECONDS_BETWEEN_CHECKS,
    X_CHECK_ONCE_DAILY_FLAG,
    X_SQL_STATEMENT_TEXT,
    X_ONE_TIME_ONLY_FLAG,
    X_TABLE_NAME
  );

  open c;
  fetch c into X_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

end INSERT_ROW;

procedure LOAD_ROW (
  X_APPLICATION_SHORT_NAME in VARCHAR2,
  X_ALERT_NAME in VARCHAR2,
  X_OWNER in VARCHAR2,
  X_ALERT_CONDITION_TYPE in VARCHAR2,
  X_ENABLED_FLAG in VARCHAR2,
  X_START_DATE_ACTIVE in VARCHAR2,
  X_END_DATE_ACTIVE in VARCHAR2,
  X_TABLE_APPLICATION_SHORT_NAME in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_FREQUENCY_TYPE in VARCHAR2,
  X_WEEKLY_CHECK_DAY in VARCHAR2,
  X_MONTHLY_CHECK_DAY_NUM in VARCHAR2,
  X_DAYS_BETWEEN_CHECKS in VARCHAR2,
  X_CHECK_BEGIN_DATE in VARCHAR2,
  X_DATE_LAST_CHECKED in VARCHAR2,
  X_INSERT_FLAG in VARCHAR2,
  X_UPDATE_FLAG in VARCHAR2,
  X_DELETE_FLAG in VARCHAR2,
  X_MAINTAIN_HISTORY_DAYS in VARCHAR2,
  X_CHECK_TIME in VARCHAR2,
  X_CHECK_START_TIME in VARCHAR2,
  X_CHECK_END_TIME in VARCHAR2,
  X_SECONDS_BETWEEN_CHECKS in VARCHAR2,
  X_CHECK_ONCE_DAILY_FLAG in VARCHAR2,
  X_SQL_STATEMENT_TEXT in VARCHAR2,
  X_ONE_TIME_ONLY_FLAG in VARCHAR2,
  X_TABLE_NAME in VARCHAR2,
  X_LAST_UPDATE_DATE in VARCHAR2,
  X_CUSTOM_MODE in VARCHAR2
) is
    l_user_id number := 0;
    l_app_id  number := 0;
    l_alert_id number := 0;
    l_table_id number := null;
    l_table_app_id number := null;
    l_row_id varchar2(64);
    f_luby    number;  -- entity owner in file
    f_ludate  date;    -- entity update date in file
    db_luby   number;  -- entity owner in db
    db_ludate date;    -- entity update date in db

begin

   -- Translate owner to file_last_updated_by
  f_luby := fnd_load_util.owner_id(X_OWNER);

 -- Translate char last_update_date to date
  f_ludate := nvl(to_date(x_last_update_date, 'YYYY/MM/DD'), sysdate);

  select APPLICATION_ID into l_app_id
  from FND_APPLICATION
  where APPLICATION_SHORT_NAME = X_APPLICATION_SHORT_NAME;

  if (X_TABLE_APPLICATION_SHORT_NAME is not null) then
    select APPLICATION_ID into l_table_app_id
    from FND_APPLICATION
    where APPLICATION_SHORT_NAME = X_TABLE_APPLICATION_SHORT_NAME;
  end if;

  if ((X_TABLE_APPLICATION_SHORT_NAME is not null)
    and (X_TABLE_NAME is not null)) then
    select TABLE_ID into l_table_id
    from FND_TABLES
    where APPLICATION_ID = l_table_app_id
    and TABLE_NAME = X_TABLE_NAME;
  end if;

  select ALERT_ID into l_alert_id
  from ALR_ALERTS
  where APPLICATION_ID = l_app_id
  and ALERT_NAME = X_ALERT_NAME;

  select last_updated_by, last_update_date
  into  db_luby, db_ludate
  from ALR_ALERTS
  where application_id = l_app_id
  and   alert_id = l_alert_id;

 if (fnd_load_util.upload_test(f_luby, f_ludate, db_luby,db_ludate,
                                x_custom_mode)) then

  ALR_ALERTS_PKG.UPDATE_ROW(
    X_APPLICATION_ID => l_app_id,
    X_ALERT_ID => l_alert_id,
    X_ALERT_NAME => X_ALERT_NAME,
    X_ALERT_CONDITION_TYPE => X_ALERT_CONDITION_TYPE,
    X_ENABLED_FLAG => X_ENABLED_FLAG,
    X_START_DATE_ACTIVE =>
      to_date(X_START_DATE_ACTIVE,'YYYY/MM/DD HH24:MI:SS'),
    X_END_DATE_ACTIVE => to_date(X_END_DATE_ACTIVE,'YYYY/MM/DD HH24:MI:SS'),
    X_TABLE_ID => l_table_id,
    X_TABLE_APPLICATION_ID => l_table_app_id,
    X_DESCRIPTION => X_DESCRIPTION,
    X_FREQUENCY_TYPE => X_FREQUENCY_TYPE,
    X_WEEKLY_CHECK_DAY => X_WEEKLY_CHECK_DAY,
    X_MONTHLY_CHECK_DAY_NUM => to_number(X_MONTHLY_CHECK_DAY_NUM),
    X_DAYS_BETWEEN_CHECKS => to_number(X_DAYS_BETWEEN_CHECKS),
    X_CHECK_BEGIN_DATE =>
      to_date(X_CHECK_BEGIN_DATE,'YYYY/MM/DD HH24:MI:SS'),
    X_DATE_LAST_CHECKED =>
      to_date(X_DATE_LAST_CHECKED,'YYYY/MM/DD HH24:MI:SS'),
    X_INSERT_FLAG => X_INSERT_FLAG,
    X_UPDATE_FLAG => X_UPDATE_FLAG,
    X_DELETE_FLAG => X_DELETE_FLAG,
    X_MAINTAIN_HISTORY_DAYS => to_number(X_MAINTAIN_HISTORY_DAYS),
    X_CHECK_TIME => to_number(X_CHECK_TIME),
    X_CHECK_START_TIME => to_number(X_CHECK_START_TIME),
    X_CHECK_END_TIME => to_number(X_CHECK_END_TIME),
    X_SECONDS_BETWEEN_CHECKS => to_number(X_SECONDS_BETWEEN_CHECKS),
    X_CHECK_ONCE_DAILY_FLAG => X_CHECK_ONCE_DAILY_FLAG,
    X_SQL_STATEMENT_TEXT => X_SQL_STATEMENT_TEXT,
    X_ONE_TIME_ONLY_FLAG => to_number(X_ONE_TIME_ONLY_FLAG),
    X_TABLE_NAME => X_TABLE_NAME,
    X_LAST_UPDATE_DATE => f_ludate,
    X_LAST_UPDATED_BY => f_luby,
    X_LAST_UPDATE_LOGIN => 0 );
end if;

exception
  when NO_DATA_FOUND then

  select ALR_ALERTS_S.nextval into l_alert_id from dual;

  ALR_ALERTS_PKG.INSERT_ROW(
    X_ROWID => l_row_id,
    X_APPLICATION_ID => l_app_id,
    X_ALERT_ID => l_alert_id,
    X_ALERT_NAME => X_ALERT_NAME,
    X_ALERT_CONDITION_TYPE => X_ALERT_CONDITION_TYPE,
    X_ENABLED_FLAG => X_ENABLED_FLAG,
    X_START_DATE_ACTIVE =>
      to_date(X_START_DATE_ACTIVE,'YYYY/MM/DD HH24:MI:SS'),
    X_END_DATE_ACTIVE =>
      to_date(X_END_DATE_ACTIVE,'YYYY/MM/DD HH24:MI:SS'),
    X_TABLE_ID => l_table_id,
    X_TABLE_APPLICATION_ID => l_table_app_id,
    X_DESCRIPTION => X_DESCRIPTION,
    X_FREQUENCY_TYPE => X_FREQUENCY_TYPE,
    X_WEEKLY_CHECK_DAY => X_WEEKLY_CHECK_DAY,
    X_MONTHLY_CHECK_DAY_NUM => to_number(X_MONTHLY_CHECK_DAY_NUM),
    X_DAYS_BETWEEN_CHECKS => to_number(X_DAYS_BETWEEN_CHECKS),
    X_CHECK_BEGIN_DATE =>
      to_date(X_CHECK_BEGIN_DATE,'YYYY/MM/DD HH24:MI:SS'),
    X_DATE_LAST_CHECKED =>
      to_date(X_DATE_LAST_CHECKED,'YYYY/MM/DD HH24:MI:SS'),
    X_INSERT_FLAG => X_INSERT_FLAG,
    X_UPDATE_FLAG => X_UPDATE_FLAG,
    X_DELETE_FLAG => X_DELETE_FLAG,
    X_MAINTAIN_HISTORY_DAYS => to_number(X_MAINTAIN_HISTORY_DAYS),
    X_CHECK_TIME => to_number(X_CHECK_TIME),
    X_CHECK_START_TIME => to_number(X_CHECK_START_TIME),
    X_CHECK_END_TIME => to_number(X_CHECK_END_TIME),
    X_SECONDS_BETWEEN_CHECKS => to_number(X_SECONDS_BETWEEN_CHECKS),
    X_CHECK_ONCE_DAILY_FLAG => X_CHECK_ONCE_DAILY_FLAG,
    X_SQL_STATEMENT_TEXT => X_SQL_STATEMENT_TEXT,
    X_ONE_TIME_ONLY_FLAG => to_number(X_ONE_TIME_ONLY_FLAG),
    X_TABLE_NAME => X_TABLE_NAME,
    X_CREATION_DATE => f_ludate,
    X_CREATED_BY => f_luby,
    X_LAST_UPDATE_DATE => f_ludate,
    X_LAST_UPDATED_BY => f_luby,
    X_LAST_UPDATE_LOGIN => 0 );

end LOAD_ROW;

procedure LOCK_ROW (
  X_APPLICATION_ID in NUMBER,
  X_ALERT_ID in NUMBER,
  X_ALERT_NAME in VARCHAR2,
  X_ALERT_CONDITION_TYPE in VARCHAR2,
  X_ENABLED_FLAG in VARCHAR2,
  X_START_DATE_ACTIVE in DATE,
  X_END_DATE_ACTIVE in DATE,
  X_TABLE_ID in NUMBER,
  X_TABLE_APPLICATION_ID in NUMBER,
  X_DESCRIPTION in VARCHAR2,
  X_FREQUENCY_TYPE in VARCHAR2,
  X_WEEKLY_CHECK_DAY in VARCHAR2,
  X_MONTHLY_CHECK_DAY_NUM in NUMBER,
  X_DAYS_BETWEEN_CHECKS in NUMBER,
  X_CHECK_BEGIN_DATE in DATE,
  X_DATE_LAST_CHECKED in DATE,
  X_INSERT_FLAG in VARCHAR2,
  X_UPDATE_FLAG in VARCHAR2,
  X_DELETE_FLAG in VARCHAR2,
  X_MAINTAIN_HISTORY_DAYS in NUMBER,
  X_CHECK_TIME in NUMBER,
  X_CHECK_START_TIME in NUMBER,
  X_CHECK_END_TIME in NUMBER,
  X_SECONDS_BETWEEN_CHECKS in NUMBER,
  X_CHECK_ONCE_DAILY_FLAG in VARCHAR2,
  X_SQL_STATEMENT_TEXT in LONG,
  X_ONE_TIME_ONLY_FLAG in NUMBER,
  X_TABLE_NAME in VARCHAR2
) is
  cursor c1 is select
      ALERT_NAME,
      ALERT_CONDITION_TYPE,
      ENABLED_FLAG,
      START_DATE_ACTIVE,
      END_DATE_ACTIVE,
      TABLE_ID,
      TABLE_APPLICATION_ID,
      DESCRIPTION,
      FREQUENCY_TYPE,
      WEEKLY_CHECK_DAY,
      MONTHLY_CHECK_DAY_NUM,
      DAYS_BETWEEN_CHECKS,
      CHECK_BEGIN_DATE,
      DATE_LAST_CHECKED,
      INSERT_FLAG,
      UPDATE_FLAG,
      DELETE_FLAG,
      MAINTAIN_HISTORY_DAYS,
      CHECK_TIME,
      CHECK_START_TIME,
      CHECK_END_TIME,
      SECONDS_BETWEEN_CHECKS,
      CHECK_ONCE_DAILY_FLAG,
      SQL_STATEMENT_TEXT,
      ONE_TIME_ONLY_FLAG,
      TABLE_NAME,
      APPLICATION_ID,
      ALERT_ID
    from ALR_ALERTS
    where APPLICATION_ID = X_APPLICATION_ID
    and ALERT_ID = X_ALERT_ID
    for update of APPLICATION_ID nowait;
begin
  for recinfo in c1 loop
      if (    (recinfo.APPLICATION_ID = X_APPLICATION_ID)
          AND (recinfo.ALERT_ID = X_ALERT_ID)
          AND (recinfo.ALERT_NAME = X_ALERT_NAME)
          AND (recinfo.ALERT_CONDITION_TYPE = X_ALERT_CONDITION_TYPE)
          AND (recinfo.ENABLED_FLAG = X_ENABLED_FLAG)
          AND (recinfo.START_DATE_ACTIVE = X_START_DATE_ACTIVE)
          AND ((recinfo.END_DATE_ACTIVE = X_END_DATE_ACTIVE)
               OR ((recinfo.END_DATE_ACTIVE is null) AND (X_END_DATE_ACTIVE is null)))
          AND ((recinfo.TABLE_ID = X_TABLE_ID)
               OR ((recinfo.TABLE_ID is null) AND (X_TABLE_ID is null)))
          AND ((recinfo.TABLE_APPLICATION_ID = X_TABLE_APPLICATION_ID)
               OR ((recinfo.TABLE_APPLICATION_ID is null) AND (X_TABLE_APPLICATION_ID is null)))
          AND ((recinfo.DESCRIPTION = X_DESCRIPTION)
               OR ((recinfo.DESCRIPTION is null) AND (X_DESCRIPTION is null)))
          AND ((recinfo.FREQUENCY_TYPE = X_FREQUENCY_TYPE)
               OR ((recinfo.FREQUENCY_TYPE is null) AND (X_FREQUENCY_TYPE is null)))
          AND ((recinfo.WEEKLY_CHECK_DAY = X_WEEKLY_CHECK_DAY)
               OR ((recinfo.WEEKLY_CHECK_DAY is null) AND (X_WEEKLY_CHECK_DAY is null)))
          AND ((recinfo.MONTHLY_CHECK_DAY_NUM = X_MONTHLY_CHECK_DAY_NUM)
               OR ((recinfo.MONTHLY_CHECK_DAY_NUM is null) AND (X_MONTHLY_CHECK_DAY_NUM is null)))
          AND ((recinfo.DAYS_BETWEEN_CHECKS = X_DAYS_BETWEEN_CHECKS)
               OR ((recinfo.DAYS_BETWEEN_CHECKS is null) AND (X_DAYS_BETWEEN_CHECKS is null)))
          AND ((recinfo.CHECK_BEGIN_DATE = X_CHECK_BEGIN_DATE)
               OR ((recinfo.CHECK_BEGIN_DATE is null) AND (X_CHECK_BEGIN_DATE is null)))
          AND ((recinfo.DATE_LAST_CHECKED = X_DATE_LAST_CHECKED)
               OR ((recinfo.DATE_LAST_CHECKED is null) AND (X_DATE_LAST_CHECKED is null)))
          AND ((recinfo.INSERT_FLAG = X_INSERT_FLAG)
               OR ((recinfo.INSERT_FLAG is null) AND (X_INSERT_FLAG is null)))
          AND ((recinfo.UPDATE_FLAG = X_UPDATE_FLAG)
               OR ((recinfo.UPDATE_FLAG is null) AND (X_UPDATE_FLAG is null)))
          AND ((recinfo.DELETE_FLAG = X_DELETE_FLAG)
               OR ((recinfo.DELETE_FLAG is null) AND (X_DELETE_FLAG is null)))
          AND ((recinfo.MAINTAIN_HISTORY_DAYS = X_MAINTAIN_HISTORY_DAYS)
               OR ((recinfo.MAINTAIN_HISTORY_DAYS is null) AND (X_MAINTAIN_HISTORY_DAYS is null)))
          AND ((recinfo.CHECK_TIME = X_CHECK_TIME)
               OR ((recinfo.CHECK_TIME is null) AND (X_CHECK_TIME is null)))
          AND ((recinfo.CHECK_START_TIME = X_CHECK_START_TIME)
               OR ((recinfo.CHECK_START_TIME is null) AND (X_CHECK_START_TIME is null)))
          AND ((recinfo.CHECK_END_TIME = X_CHECK_END_TIME)
               OR ((recinfo.CHECK_END_TIME is null) AND (X_CHECK_END_TIME is null)))
          AND ((recinfo.SECONDS_BETWEEN_CHECKS = X_SECONDS_BETWEEN_CHECKS)
               OR ((recinfo.SECONDS_BETWEEN_CHECKS is null) AND (X_SECONDS_BETWEEN_CHECKS is null)))
          AND ((recinfo.CHECK_ONCE_DAILY_FLAG = X_CHECK_ONCE_DAILY_FLAG)
               OR ((recinfo.CHECK_ONCE_DAILY_FLAG is null) AND (X_CHECK_ONCE_DAILY_FLAG is null)))
          AND ((recinfo.SQL_STATEMENT_TEXT = X_SQL_STATEMENT_TEXT)
               OR ((recinfo.SQL_STATEMENT_TEXT is null) AND (X_SQL_STATEMENT_TEXT is null)))
          AND ((recinfo.ONE_TIME_ONLY_FLAG = X_ONE_TIME_ONLY_FLAG)
               OR ((recinfo.ONE_TIME_ONLY_FLAG is null) AND (X_ONE_TIME_ONLY_FLAG is null)))
          AND ((recinfo.TABLE_NAME = X_TABLE_NAME)
               OR ((recinfo.TABLE_NAME is null) AND (X_TABLE_NAME is null)))
      ) then
        null;
      else
        fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
        app_exception.raise_exception;
      end if;
  end loop;
  return;
end LOCK_ROW;

procedure UPDATE_ROW (
  X_APPLICATION_ID in NUMBER,
  X_ALERT_ID in NUMBER,
  X_ALERT_NAME in VARCHAR2,
  X_ALERT_CONDITION_TYPE in VARCHAR2,
  X_ENABLED_FLAG in VARCHAR2,
  X_START_DATE_ACTIVE in DATE,
  X_END_DATE_ACTIVE in DATE,
  X_TABLE_ID in NUMBER,
  X_TABLE_APPLICATION_ID in NUMBER,
  X_DESCRIPTION in VARCHAR2,
  X_FREQUENCY_TYPE in VARCHAR2,
  X_WEEKLY_CHECK_DAY in VARCHAR2,
  X_MONTHLY_CHECK_DAY_NUM in NUMBER,
  X_DAYS_BETWEEN_CHECKS in NUMBER,
  X_CHECK_BEGIN_DATE in DATE,
  X_DATE_LAST_CHECKED in DATE,
  X_INSERT_FLAG in VARCHAR2,
  X_UPDATE_FLAG in VARCHAR2,
  X_DELETE_FLAG in VARCHAR2,
  X_MAINTAIN_HISTORY_DAYS in NUMBER,
  X_CHECK_TIME in NUMBER,
  X_CHECK_START_TIME in NUMBER,
  X_CHECK_END_TIME in NUMBER,
  X_SECONDS_BETWEEN_CHECKS in NUMBER,
  X_CHECK_ONCE_DAILY_FLAG in VARCHAR2,
  X_SQL_STATEMENT_TEXT in LONG,
  X_ONE_TIME_ONLY_FLAG in NUMBER,
  X_TABLE_NAME in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
begin
  update ALR_ALERTS set
    ALERT_NAME = X_ALERT_NAME,
    ALERT_CONDITION_TYPE = X_ALERT_CONDITION_TYPE,
    ENABLED_FLAG = X_ENABLED_FLAG,
    START_DATE_ACTIVE = X_START_DATE_ACTIVE,
    END_DATE_ACTIVE = X_END_DATE_ACTIVE,
    TABLE_ID = X_TABLE_ID,
    TABLE_APPLICATION_ID = X_TABLE_APPLICATION_ID,
    DESCRIPTION = X_DESCRIPTION,
    FREQUENCY_TYPE = X_FREQUENCY_TYPE,
    WEEKLY_CHECK_DAY = X_WEEKLY_CHECK_DAY,
    MONTHLY_CHECK_DAY_NUM = X_MONTHLY_CHECK_DAY_NUM,
    DAYS_BETWEEN_CHECKS = X_DAYS_BETWEEN_CHECKS,
    CHECK_BEGIN_DATE = X_CHECK_BEGIN_DATE,
    DATE_LAST_CHECKED = X_DATE_LAST_CHECKED,
    INSERT_FLAG = X_INSERT_FLAG,
    UPDATE_FLAG = X_UPDATE_FLAG,
    DELETE_FLAG = X_DELETE_FLAG,
    MAINTAIN_HISTORY_DAYS = X_MAINTAIN_HISTORY_DAYS,
    CHECK_TIME = X_CHECK_TIME,
    CHECK_START_TIME = X_CHECK_START_TIME,
    CHECK_END_TIME = X_CHECK_END_TIME,
    SECONDS_BETWEEN_CHECKS = X_SECONDS_BETWEEN_CHECKS,
    CHECK_ONCE_DAILY_FLAG = X_CHECK_ONCE_DAILY_FLAG,
    SQL_STATEMENT_TEXT = X_SQL_STATEMENT_TEXT,
    ONE_TIME_ONLY_FLAG = X_ONE_TIME_ONLY_FLAG,
    TABLE_NAME = X_TABLE_NAME,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN
  where APPLICATION_ID = X_APPLICATION_ID
  and ALERT_ID = X_ALERT_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;
end UPDATE_ROW;

procedure DELETE_ROW (
  X_APPLICATION_ID in NUMBER,
  X_ALERT_ID in NUMBER
) is
begin
  delete from ALR_ALERTS
  where APPLICATION_ID = X_APPLICATION_ID
  and ALERT_ID = X_ALERT_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

end DELETE_ROW;


end ALR_ALERTS_PKG;

/
