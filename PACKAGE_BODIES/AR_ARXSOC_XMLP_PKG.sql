--------------------------------------------------------
--  DDL for Package Body AR_ARXSOC_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."AR_ARXSOC_XMLP_PKG" AS
/* $Header: ARXSOCB.pls 120.0 2007/12/27 14:09:11 abraghun noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END BEFOREREPORT;
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;
  FUNCTION REPORT_NAMEFORMULA(COMPANY_NAME IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      L_REPORT_NAME VARCHAR2(80);
      L_DATE_LOW VARCHAR2(11);
      L_DATE_HIGH VARCHAR2(11);
    BEGIN
      IF P_DATE_LOW IS NULL THEN
        L_DATE_LOW := '   ';
      ELSE
        L_DATE_LOW := TO_CHAR(P_DATE_LOW
                             ,'DD-MON-YYYY');
      END IF;
      IF P_DATE_HIGH IS NULL THEN
        L_DATE_HIGH := '   ';
      ELSE
        L_DATE_HIGH := TO_CHAR(P_DATE_HIGH
                              ,'DD-MON-YYYY');
      END IF;
      RP_DATE_RANGE := ARP_STANDARD.FND_MESSAGE('ARXSOC_DEPOSIT_DATE_RANGE'
                                               ,'FROM_DATE'
                                               ,L_DATE_LOW
                                               ,'TO_DATE'
                                               ,L_DATE_HIGH);
      RP_COMPANY_NAME := COMPANY_NAME;
      SELECT
        SUBSTR(CP.USER_CONCURRENT_PROGRAM_NAME
              ,1
              ,80)
      INTO L_REPORT_NAME
      FROM
        FND_CONCURRENT_PROGRAMS_VL CP,
        FND_CONCURRENT_REQUESTS CR
      WHERE CR.REQUEST_ID = P_CONC_REQUEST_ID
        AND CP.APPLICATION_ID = CR.PROGRAM_APPLICATION_ID
        AND CP.CONCURRENT_PROGRAM_ID = CR.CONCURRENT_PROGRAM_ID;
      RP_REPORT_NAME := L_REPORT_NAME;
      RETURN (L_REPORT_NAME);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RP_REPORT_NAME := NULL;
        RETURN (NULL);
    END;
    RETURN NULL;
  END REPORT_NAMEFORMULA;
  FUNCTION C_DIFFERENCE_AMOUNTFORMULA(C_RCPT_CONTROL_AMOUNT IN NUMBER
                                     ,C_ACTUAL_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    /*SRW.REFERENCE(C_RCPT_CONTROL_AMOUNT)*/NULL;
    /*SRW.REFERENCE(C_ACTUAL_AMOUNT)*/NULL;
    RETURN (NVL(C_RCPT_CONTROL_AMOUNT
              ,0) - NVL(C_ACTUAL_AMOUNT
              ,0));
  END C_DIFFERENCE_AMOUNTFORMULA;
  FUNCTION C_SUMMARY_LABELFORMULA(CURRENCY_A IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    RETURN (RTRIM(RPAD(CURRENCY_A
                     ,3)));
  END C_SUMMARY_LABELFORMULA;
  FUNCTION CA_DIFFERENCE_AMOUNTFORMULA(C_RCPT_CONTROL_AMOUNT_B IN NUMBER
                                      ,CA_ACTUAL_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    /*SRW.REFERENCE(C_RCPT_CONTROL_AMOUNT_B)*/NULL;
    /*SRW.REFERENCE(CA_ACTUAL_AMOUNT)*/NULL;
    RETURN (NVL(C_RCPT_CONTROL_AMOUNT_B
              ,0) - NVL(CA_ACTUAL_AMOUNT
              ,0));
  END CA_DIFFERENCE_AMOUNTFORMULA;
  FUNCTION CA_SUMMARY_LABELFORMULA(CURRENCY_B IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    RETURN (RTRIM(RPAD(CURRENCY_B
                     ,3)));
  END CA_SUMMARY_LABELFORMULA;
  FUNCTION CF_DATA_NOT_FOUNDFORMULA(BANK_ACCOUNT_NAME_C IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    RP_DATA_FOUND3 := BANK_ACCOUNT_NAME_C;
    RETURN (0);
  END CF_DATA_NOT_FOUNDFORMULA;
  FUNCTION CR_DATA_FOUNDFORMULA(CURRENCY_B IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    RP_DATA_FOUND2 := CURRENCY_B;
    RETURN (0);
  END CR_DATA_FOUNDFORMULA;
  FUNCTION CM_DATA_NOT_FOUNDFORMULA(CURRENCY_A IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    RP_DATA_FOUND1 := CURRENCY_A;
    RETURN (0);
  END CM_DATA_NOT_FOUNDFORMULA;
  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    DECLARE
      L_BANK_COUNT NUMBER(10);
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      P_DATE_LOW1 := to_char(P_DATE_LOW,'dd-mon-yy');
            P_DATE_HIGH1 := to_char(P_DATE_HIGH,'dd-mon-yy');
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
      PH_ORDER_BY := P_ORDER_BY;
      IF UPPER(SUBSTR(P_ORDER_BY
                  ,1
                  ,1)) = 'B' THEN
        P_ORDER_BY_1 := 'Bank';
      ELSE
        P_ORDER_BY_1 := 'Currency';
      END IF;
      IF P_DATE_LOW IS NOT NULL THEN
        LP_DATE_LOW := ' and deposit_date >= :p_date_low ';
      END IF;
      IF P_DATE_HIGH IS NOT NULL THEN
        LP_DATE_HIGH := ' and deposit_date  <= :p_date_high ';
      END IF;
      IF P_BANK_ACCOUNT_NAME_LOW IS NOT NULL THEN
        LP_BANK_ACCOUNT_NAME_LOW := 'and cba.bank_account_name >= :p_bank_account_name_low';
      END IF;
      IF P_BANK_ACCOUNT_NAME_HIGH IS NOT NULL THEN
        LP_BANK_ACCOUNT_NAME_HIGH := 'and cba.bank_account_name <= :p_bank_account_name_high';
      END IF;
      SELECT
        count(*)
      INTO L_BANK_COUNT
      FROM
        CE_BANK_ACCT_USES BA,
        CE_BANK_ACCOUNTS CBA,
        CE_BANK_BRANCHES_V BB
      WHERE BA.BANK_ACCT_USE_ID in (
        SELECT
          DISTINCT
          REMIT_BANK_ACCT_USE_ID
        FROM
          AR_CASH_RECEIPTS )
        AND CBA.BANK_BRANCH_ID = BB.BRANCH_PARTY_ID
        AND CBA.BANK_ACCOUNT_ID = BA.BANK_ACCOUNT_ID
        AND CBA.BANK_ACCOUNT_NAME between DECODE(P_BANK_ACCOUNT_NAME_LOW
            ,NULL
            ,CBA.BANK_ACCOUNT_NAME
            ,P_BANK_ACCOUNT_NAME_LOW)
        AND DECODE(P_BANK_ACCOUNT_NAME_HIGH
            ,NULL
            ,CBA.BANK_ACCOUNT_NAME
            ,P_BANK_ACCOUNT_NAME_HIGH);
      P_BANK_COUNT := L_BANK_COUNT;
    END;
    RETURN (TRUE);
  END AFTERPFORM;
  FUNCTION F_AMOUNTSFORMULA(AMOUNT IN NUMBER
                           ,CR_STATUS IN VARCHAR2
                           ,CR_TYPE IN VARCHAR2
                           ,REVERSAL_CATEGORY IN VARCHAR2
                           ,CASH_RECEIPT_ID IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      L_ACTUAL_AMOUNT NUMBER := 0;
      L_UNIDENTIFIED_AMOUNT NUMBER := 0;
      L_MISC_AMOUNT NUMBER := 0;
      L_NSF_AMOUNT NUMBER := 0;
      L_ON_ACCOUNT_AMOUNT NUMBER := 0;
      L_APPLIED_COUNT NUMBER(10) := 1;
      L_UNAPPLIED_COUNT NUMBER(10) := 0;
      L_UNIDENTIFIED_COUNT NUMBER(10) := 0;
      L_MISC_COUNT NUMBER(10) := 0;
    BEGIN
      /*SRW.REFERENCE(AMOUNT)*/NULL;
      /*SRW.REFERENCE(CR_STATUS)*/NULL;
      /*SRW.REFERENCE(CR_TYPE)*/NULL;
      /*SRW.REFERENCE(REVERSAL_CATEGORY)*/NULL;
      SELECT
        DECODE(CR_STATUS
              ,'REV'
              ,0
              ,AMOUNT),
        DECODE(CR_STATUS
              ,'UNID'
              ,AMOUNT
              ,0),
        DECODE(CR_TYPE
              ,'MISC'
              ,DECODE(CR_STATUS
                    ,'APP'
                    ,AMOUNT
                    ,0)
              ,0),
        DECODE(CR_STATUS
              ,REVERSAL_CATEGORY
              ,DECODE(CR_STATUS
                    ,'NSF'
                    ,AMOUNT
                    ,'STOP'
                    ,AMOUNT
                    ,0)
              ,0),
        DECODE(CR_STATUS
              ,'APP'
              ,1
              ,''),
        DECODE(CR_STATUS
              ,'UNAPP'
              ,1
              ,0),
        DECODE(CR_STATUS
              ,'UNID'
              ,1
              ,0),
        DECODE(CR_TYPE
              ,'MISC'
              ,1
              ,0)
      INTO L_ACTUAL_AMOUNT,L_UNIDENTIFIED_AMOUNT,L_MISC_AMOUNT,L_NSF_AMOUNT,L_APPLIED_COUNT,L_UNAPPLIED_COUNT,L_UNIDENTIFIED_COUNT,L_MISC_COUNT
      FROM
        DUAL;
      IF CR_STATUS = 'APP' THEN
        SELECT
          SUM(AMOUNT_APPLIED)
        INTO L_ON_ACCOUNT_AMOUNT
        FROM
          AR_RECEIVABLE_APPLICATIONS
        WHERE CASH_RECEIPT_ID = F_AMOUNTSFORMULA.CASH_RECEIPT_ID
          AND STATUS = 'ACC';
        IF NVL(L_ON_ACCOUNT_AMOUNT
           ,0) <> 0 THEN
          L_APPLIED_COUNT := L_APPLIED_COUNT - 1;
        END IF;
      END IF;
      P_ACTUAL_AMOUNT := L_ACTUAL_AMOUNT;
      P_UNIDENTIFIED_AMOUNT := L_UNIDENTIFIED_AMOUNT;
      P_MISC_AMOUNT := L_MISC_AMOUNT;
      P_NSF_AMOUNT := L_NSF_AMOUNT;
      P_APPLIED_COUNT := L_APPLIED_COUNT;
      P_UNAPPLIED_COUNT := L_UNAPPLIED_COUNT;
      P_UNIDENTIFIED_COUNT := L_UNIDENTIFIED_COUNT;
      P_MISC_COUNT := L_MISC_COUNT;
      RETURN (1);
    END;
    RETURN NULL;
  END F_AMOUNTSFORMULA;
  FUNCTION F_ALL_AMOUNTSFORMULA(AMOUNT_B IN NUMBER
                               ,CR_STATUS_BB IN VARCHAR2
                               ,CR_TYPE_B IN VARCHAR2
                               ,REVERSAL_CATEGORY_B IN VARCHAR2
                               ,CASH_RECEIPT_ID_B IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      L_ACTUAL_AMOUNT NUMBER := 0;
      L_UNIDENTIFIED_AMOUNT NUMBER := 0;
      L_MISC_AMOUNT NUMBER := 0;
      L_NSF_AMOUNT NUMBER := 0;
      L_ON_ACCOUNT_AMOUNT NUMBER := 0;
      L_APPLIED_COUNT NUMBER(10) := 0;
      L_UNAPPLIED_COUNT NUMBER(10) := 0;
      L_UNIDENTIFIED_COUNT NUMBER(10) := 0;
      L_MISC_COUNT NUMBER(10) := 0;
    BEGIN
      /*SRW.REFERENCE(AMOUNT_B)*/NULL;
      /*SRW.REFERENCE(CR_STATUS_BB)*/NULL;
      /*SRW.REFERENCE(CR_TYPE_B)*/NULL;
      /*SRW.REFERENCE(REVERSAL_CATEGORY_B)*/NULL;
      SELECT
        DECODE(CR_STATUS_BB
              ,'REV'
              ,0
              ,AMOUNT_B),
        DECODE(CR_STATUS_BB
              ,'UNID'
              ,AMOUNT_B
              ,0),
        DECODE(CR_TYPE_B
              ,'MISC'
              ,DECODE(CR_STATUS_BB
                    ,'APP'
                    ,AMOUNT_B
                    ,0)
              ,0),
        DECODE(CR_STATUS_BB
              ,REVERSAL_CATEGORY_B
              ,DECODE(CR_STATUS_BB
                    ,'NSF'
                    ,AMOUNT_B
                    ,'STOP'
                    ,AMOUNT_B
                    ,0)
              ,0),
        DECODE(CR_STATUS_BB
              ,'APP'
              ,1
              ,''),
        DECODE(CR_STATUS_BB
              ,'UNAPP'
              ,1
              ,0),
        DECODE(CR_STATUS_BB
              ,'UNID'
              ,1
              ,0),
        DECODE(CR_TYPE_B
              ,'MISC'
              ,1
              ,0)
      INTO L_ACTUAL_AMOUNT,L_UNIDENTIFIED_AMOUNT,L_MISC_AMOUNT,L_NSF_AMOUNT,L_APPLIED_COUNT,L_UNAPPLIED_COUNT,L_UNIDENTIFIED_COUNT,L_MISC_COUNT
      FROM
        DUAL;
      IF CR_STATUS_BB = 'APP' THEN
        SELECT
          SUM(AMOUNT_APPLIED)
        INTO L_ON_ACCOUNT_AMOUNT
        FROM
          AR_RECEIVABLE_APPLICATIONS
        WHERE CASH_RECEIPT_ID = CASH_RECEIPT_ID_B
          AND STATUS = 'ACC';
        IF NVL(L_ON_ACCOUNT_AMOUNT
           ,0) <> 0 THEN
          L_APPLIED_COUNT := L_APPLIED_COUNT - 1;
        END IF;
      END IF;
      PA_ACTUAL_AMOUNT := L_ACTUAL_AMOUNT;
      PA_UNIDENTIFIED_AMOUNT := L_UNIDENTIFIED_AMOUNT;
      PA_MISC_AMOUNT := L_MISC_AMOUNT;
      PA_NSF_AMOUNT := L_NSF_AMOUNT;
      PA_APPLIED_COUNT := L_APPLIED_COUNT;
      PA_UNAPPLIED_COUNT := L_UNAPPLIED_COUNT;
      PA_UNIDENTIFIED_COUNT := L_UNIDENTIFIED_COUNT;
      PA_MISC_COUNT := L_MISC_COUNT;
      RETURN (1);
    END;
    RETURN NULL;
  END F_ALL_AMOUNTSFORMULA;
  FUNCTION C_APPLIED_AMOUNTFORMULA(C_APPLIED_AMOUNT_A IN NUMBER
                                  ,C_MISC_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    /*SRW.REFERENCE(C_APPLIED_AMOUNT_A)*/NULL;
    /*SRW.REFERENCE(C_MISC_AMOUNT)*/NULL;
    RETURN (NVL(C_APPLIED_AMOUNT_A
              ,0) + NVL(C_MISC_AMOUNT
              ,0));
  END C_APPLIED_AMOUNTFORMULA;
  FUNCTION CA_APPLIED_AMOUNTFORMULA(CA_APPLIED_AMOUNT_B IN NUMBER
                                   ,CA_MISC_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    /*SRW.REFERENCE(CA_APPLIED_AMOUNT_B)*/NULL;
    /*SRW.REFERENCE(CA_MISC_AMOUNT)*/NULL;
    RETURN (NVL(CA_APPLIED_AMOUNT_B
              ,0) + NVL(CA_MISC_AMOUNT
              ,0));
  END CA_APPLIED_AMOUNTFORMULA;
  FUNCTION ORDER_BY_MEANINGFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      L_ORDER_BY VARCHAR2(80);
    BEGIN
      SELECT
        MEANING
      INTO L_ORDER_BY
      FROM
        AR_LOOKUPS
      WHERE LOOKUP_TYPE = 'SORT_BY_ARXSOC'
        AND LOOKUP_CODE = PH_ORDER_BY;
      RP_ORDER_BY := L_ORDER_BY;
      RETURN (L_ORDER_BY);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RETURN (' ');
    END;
    RETURN NULL;
  END ORDER_BY_MEANINGFORMULA;
  FUNCTION P_ACTUAL_AMOUNT_P RETURN NUMBER IS
  BEGIN
    RETURN P_ACTUAL_AMOUNT;
  END P_ACTUAL_AMOUNT_P;
  FUNCTION P_UNIDENTIFIED_AMOUNT_P RETURN NUMBER IS
  BEGIN
    RETURN P_UNIDENTIFIED_AMOUNT;
  END P_UNIDENTIFIED_AMOUNT_P;
  FUNCTION P_MISC_AMOUNT_P RETURN NUMBER IS
  BEGIN
    RETURN P_MISC_AMOUNT;
  END P_MISC_AMOUNT_P;
  FUNCTION P_NSF_AMOUNT_P RETURN NUMBER IS
  BEGIN
    RETURN P_NSF_AMOUNT;
  END P_NSF_AMOUNT_P;
  FUNCTION P_APPLIED_COUNT_P RETURN NUMBER IS
  BEGIN
    RETURN P_APPLIED_COUNT;
  END P_APPLIED_COUNT_P;
  FUNCTION P_UNAPPLIED_COUNT_P RETURN NUMBER IS
  BEGIN
    RETURN P_UNAPPLIED_COUNT;
  END P_UNAPPLIED_COUNT_P;
  FUNCTION P_UNIDENTIFIED_COUNT_P RETURN NUMBER IS
  BEGIN
    RETURN P_UNIDENTIFIED_COUNT;
  END P_UNIDENTIFIED_COUNT_P;
  FUNCTION P_MISC_COUNT_P RETURN NUMBER IS
  BEGIN
    RETURN P_MISC_COUNT;
  END P_MISC_COUNT_P;
  FUNCTION PA_ACTUAL_AMOUNT_P RETURN NUMBER IS
  BEGIN
    RETURN PA_ACTUAL_AMOUNT;
  END PA_ACTUAL_AMOUNT_P;
  FUNCTION PA_UNIDENTIFIED_AMOUNT_P RETURN NUMBER IS
  BEGIN
    RETURN PA_UNIDENTIFIED_AMOUNT;
  END PA_UNIDENTIFIED_AMOUNT_P;
  FUNCTION PA_MISC_AMOUNT_P RETURN NUMBER IS
  BEGIN
    RETURN PA_MISC_AMOUNT;
  END PA_MISC_AMOUNT_P;
  FUNCTION PA_NSF_AMOUNT_P RETURN NUMBER IS
  BEGIN
    RETURN PA_NSF_AMOUNT;
  END PA_NSF_AMOUNT_P;
  FUNCTION PA_APPLIED_COUNT_P RETURN NUMBER IS
  BEGIN
    RETURN PA_APPLIED_COUNT;
  END PA_APPLIED_COUNT_P;
  FUNCTION PA_UNAPPLIED_COUNT_P RETURN NUMBER IS
  BEGIN
    RETURN PA_UNAPPLIED_COUNT;
  END PA_UNAPPLIED_COUNT_P;
  FUNCTION PA_UNIDENTIFIED_COUNT_P RETURN NUMBER IS
  BEGIN
    RETURN PA_UNIDENTIFIED_COUNT;
  END PA_UNIDENTIFIED_COUNT_P;
  FUNCTION PA_MISC_COUNT_P RETURN NUMBER IS
  BEGIN
    RETURN PA_MISC_COUNT;
  END PA_MISC_COUNT_P;
  FUNCTION RP_COMPANY_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_COMPANY_NAME;
  END RP_COMPANY_NAME_P;
  FUNCTION RP_REPORT_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_REPORT_NAME;
  END RP_REPORT_NAME_P;
  FUNCTION RP_DATA_FOUND3_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_DATA_FOUND3;
  END RP_DATA_FOUND3_P;
  FUNCTION RP_DATE_RANGE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_DATE_RANGE;
  END RP_DATE_RANGE_P;
  FUNCTION RP_DATA_FOUND1_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_DATA_FOUND1;
  END RP_DATA_FOUND1_P;
  FUNCTION RP_DATA_FOUND2_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_DATA_FOUND2;
  END RP_DATA_FOUND2_P;
  FUNCTION RP_ORDER_BY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_ORDER_BY;
  END RP_ORDER_BY_P;
END AR_ARXSOC_XMLP_PKG;


/
