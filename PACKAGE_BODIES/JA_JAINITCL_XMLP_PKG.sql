--------------------------------------------------------
--  DDL for Package Body JA_JAINITCL_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JA_JAINITCL_XMLP_PKG" AS
/* $Header: JAINITCLB.pls 120.1 2007/12/25 16:19:49 dwkrishn noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    CURSOR C_PROGRAM_ID(P_REQUEST_ID IN NUMBER) IS
      SELECT
        CONCURRENT_PROGRAM_ID,
        NVL(ENABLE_TRACE
           ,'N')
      FROM
        FND_CONCURRENT_REQUESTS
      WHERE REQUEST_ID = P_REQUEST_ID;
    V_ENABLE_TRACE FND_CONCURRENT_PROGRAMS.ENABLE_TRACE%TYPE;
    V_PROGRAM_ID FND_CONCURRENT_PROGRAMS.CONCURRENT_PROGRAM_ID%TYPE;
    LV_SUPP_TYPE_COMPANY CONSTANT VARCHAR2(15) DEFAULT 'COMPANY';
  BEGIN
    /*SRW.MESSAGE(1275
               ,'Report Version is 120.4 Last modified date is 15/12/2005')*/NULL;
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    BEGIN
      OPEN C_PROGRAM_ID(P_CONC_REQUEST_ID);
      FETCH C_PROGRAM_ID
       INTO V_PROGRAM_ID,V_ENABLE_TRACE;
      CLOSE C_PROGRAM_ID;
      /*SRW.MESSAGE(1275
                 ,'v_program_id -> ' || V_PROGRAM_ID || ', v_enable_trace -> ' || V_ENABLE_TRACE || ', request_id -> ' || P_CONC_REQUEST_ID)*/NULL;
      IF V_ENABLE_TRACE = 'Y' THEN
        EXECUTE IMMEDIATE
          'ALTER SESSION SET EVENTS ''10046 trace name context forever, level 4''';
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        /*SRW.MESSAGE(1275
                   ,'Error during enabling the trace. ErrCode -> ' || SQLCODE || ', ErrMesg -> ' || SQLERRM)*/NULL;
    END;
    IF P_FROM_DATE IS NULL THEN
      SELECT
        MIN(API2.INVOICE_DATE)
      INTO P_FROM_DATE
      FROM
        JAI_AP_TDS_F16_HDRS_ALL AFRM,
        JAI_AP_TDS_F16_DTLS_ALL FRMD,
        HR_ORGANIZATION_UNITS HOU,
        HR_LOCATIONS LOC,
        JAI_CMN_INVENTORY_ORGS JHOU,
        AP_INVOICES_ALL API1,
        AP_INVOICES_ALL API2,
        AP_INVOICE_PAYMENTS_ALL APIP,
        PO_VENDORS POV1,
        PO_VENDORS POV2,
        PO_VENDOR_SITES_ALL POVS,
        AP_INVOICE_LINES_ALL APLL
      WHERE DECODE(AFRM.ORG_ID
            ,NULL
            ,0
            ,AFRM.ORG_ID) = NVL(P_ORGANIZATION_ID
         ,DECODE(AFRM.ORG_ID
               ,NULL
               ,0
               ,AFRM.ORG_ID))
        AND AFRM.TDS_TAX_SECTION = P_TDS_PAYMENT_TYPE
        AND FRMD.CERTIFICATE_NUM = AFRM.CERTIFICATE_NUM
        AND AFRM.ORG_ID = hou.organization_id (+)
        AND apll.invoice_id (+) = FRMD.TDS_INVOICE_ID
        AND ( ( POV1.ORGANIZATION_TYPE_LOOKUP_CODE = P_SUPPLIER_ORG_TYPE
        AND UPPER(P_SUPPLIER_ORG_TYPE) = LV_SUPP_TYPE_COMPANY )
      OR ( POV1.ORGANIZATION_TYPE_LOOKUP_CODE <> P_SUPPLIER_ORG_TYPE
        AND UPPER(P_SUPPLIER_ORG_TYPE) <> LV_SUPP_TYPE_COMPANY ) )
        AND pov1.vendor_id (+) = AFRM.VENDOR_ID
        AND povs.vendor_site_id (+) = AFRM.VENDOR_SITE_ID
        AND povs.org_id (+) = AFRM.ORG_ID
        AND api2.invoice_id (+) = FRMD.TDS_INVOICE_ID
        AND api1.invoice_id (+) = FRMD.INVOICE_ID
        AND apip.invoice_payment_id (+) = FRMD.INVOICE_PAYMENT_ID
        AND jhou.organization_id (+) = HOU.ORGANIZATION_ID
        AND HOU.LOCATION_ID = loc.location_id (+)
        AND pov2.vendor_id (+) = AFRM.TAX_AUTHORITY_ID;
    END IF;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION CF_GROSS_INV_AMTFORMULA(INVOICE_ID1 IN NUMBER
                                  ,INVOICE_AMOUNT1 IN NUMBER) RETURN NUMBER IS
    TMP NUMBER := 0;
    CURSOR FETCH_PREPAYMENT_AMT_CUR(CP_LINE_TYPE IN AP_INVOICE_DISTRIBUTIONS_ALL.LINE_TYPE_LOOKUP_CODE%TYPE) IS
      SELECT
        SUM(AMOUNT)
      FROM
        AP_INVOICE_LINES_ALL
      WHERE INVOICE_ID = INVOICE_ID1
        AND LINE_TYPE_LOOKUP_CODE = CP_LINE_TYPE;
    V_PREPAYMENT_AMOUNT NUMBER;
  BEGIN
    OPEN FETCH_PREPAYMENT_AMT_CUR('PREPAY');
    FETCH FETCH_PREPAYMENT_AMT_CUR
     INTO V_PREPAYMENT_AMOUNT;
    CLOSE FETCH_PREPAYMENT_AMT_CUR;
    TMP := NVL(INVOICE_AMOUNT1
              ,0) + NVL(V_PREPAYMENT_AMOUNT
              ,0);
    RETURN (TMP);
  END CF_GROSS_INV_AMTFORMULA;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
    LV_REPORTING_LEVEL VARCHAR2(2000);
    LN_REPORTING_ENTITY_ID NUMBER;
    LV_PREDICATE_TYPE VARCHAR2(2000);
  BEGIN
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

END JA_JAINITCL_XMLP_PKG;



/
