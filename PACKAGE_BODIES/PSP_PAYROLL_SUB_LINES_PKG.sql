--------------------------------------------------------
--  DDL for Package Body PSP_PAYROLL_SUB_LINES_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PSP_PAYROLL_SUB_LINES_PKG" as
 /* $Header: PSPPITSB.pls 120.0 2005/06/02 16:01:30 appldev noship $ */
procedure INSERT_ROW (
  X_ROWID in out NOCOPY VARCHAR2,
  X_PAYROLL_SUB_LINE_ID in NUMBER,
  X_PAYROLL_LINE_ID in NUMBER,
  X_SUB_LINE_START_DATE in DATE,
  X_SUB_LINE_END_DATE in DATE,
  X_REASON_CODE in VARCHAR2,
  X_PAY_AMOUNT in NUMBER,
  X_DAILY_RATE in NUMBER,
  X_SALARY_USED in NUMBER,
  X_CURRENT_SALARY in NUMBER,
  X_FTE in NUMBER,
  X_ORGANIZATION_ID in NUMBER,
  X_JOB_ID in NUMBER,
  X_POSITION_ID in NUMBER,
  X_GRADE_ID    in NUMBER,
  X_PEOPLE_GRP_ID in NUMBER,
  X_EMPLOYMENT_BEGIN_DATE in DATE,
  X_EMPLOYMENT_END_DATE in DATE,
  X_EMPLOYEE_STATUS_INACTIVE_DAT in DATE,
  X_EMPLOYEE_STATUS_ACTIVE_DATE in DATE,
  X_ASSIGNMENT_BEGIN_DATE in DATE,
  X_ASSIGNMENT_END_DATE in DATE,
  X_ATTRIBUTE_CATEGORY IN VARCHAR2,	-- Introduced DFF columns for bug fix 2908859
  X_ATTRIBUTE1 IN VARCHAR2,
  X_ATTRIBUTE2 IN VARCHAR2,
  X_ATTRIBUTE3 IN VARCHAR2,
  X_ATTRIBUTE4 IN VARCHAR2,
  X_ATTRIBUTE5 IN VARCHAR2,
  X_ATTRIBUTE6 IN VARCHAR2,
  X_ATTRIBUTE7 IN VARCHAR2,
  X_ATTRIBUTE8 IN VARCHAR2,
  X_ATTRIBUTE9 IN VARCHAR2,
  X_ATTRIBUTE10 IN VARCHAR2,
  X_MODE in VARCHAR2 default 'R'
  ) is
    cursor C is select ROWID from PSP_PAYROLL_SUB_LINES
      where PAYROLL_SUB_LINE_ID = X_PAYROLL_SUB_LINE_ID;
    X_LAST_UPDATE_DATE DATE;
    X_LAST_UPDATED_BY NUMBER;
    X_LAST_UPDATE_LOGIN NUMBER;
begin
  X_LAST_UPDATE_DATE := SYSDATE;
  if(X_MODE = 'I') then
    X_LAST_UPDATED_BY := 1;
    X_LAST_UPDATE_LOGIN := 0;
  elsif (X_MODE = 'R') then
    X_LAST_UPDATED_BY := FND_GLOBAL.USER_ID;
    if X_LAST_UPDATED_BY is NULL then
      X_LAST_UPDATED_BY := -1;
    end if;
    X_LAST_UPDATE_LOGIN :=FND_GLOBAL.LOGIN_ID;
    if X_LAST_UPDATE_LOGIN is NULL then
      X_LAST_UPDATE_LOGIN := -1;
    end if;
  else
    FND_MESSAGE.SET_NAME( 'FND', 'SYSTEM-INVALID ARGS');
    app_exception.raise_exception;
  end if;
  insert into PSP_PAYROLL_SUB_LINES (
    PAYROLL_SUB_LINE_ID,
    PAYROLL_LINE_ID,
    SUB_LINE_START_DATE,
    SUB_LINE_END_DATE,
    REASON_CODE,
    PAY_AMOUNT,
    DAILY_RATE,
    SALARY_USED,
    CURRENT_SALARY,
    FTE,
    ORGANIZATION_ID,
    JOB_ID,
    POSITION_ID,
    GRADE_ID,
    PEOPLE_GROUP_ID,
    EMPLOYMENT_BEGIN_DATE,
    EMPLOYMENT_END_DATE,
    EMPLOYEE_STATUS_INACTIVE_DATE,
    EMPLOYEE_STATUS_ACTIVE_DATE,
    ASSIGNMENT_BEGIN_DATE,
    ASSIGNMENT_END_DATE,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    ATTRIBUTE_CATEGORY,		-- Introduced DFF columns for bug fix 2908859
    ATTRIBUTE1,
    ATTRIBUTE2,
    ATTRIBUTE3,
    ATTRIBUTE4,
    ATTRIBUTE5,
    ATTRIBUTE6,
    ATTRIBUTE7,
    ATTRIBUTE8,
    ATTRIBUTE9,
    ATTRIBUTE10
  ) values (
    X_PAYROLL_SUB_LINE_ID,
    X_PAYROLL_LINE_ID,
    X_SUB_LINE_START_DATE,
    X_SUB_LINE_END_DATE,
    X_REASON_CODE,
    X_PAY_AMOUNT,
    X_DAILY_RATE,
    X_SALARY_USED,
    X_CURRENT_SALARY,
    X_FTE,
    X_ORGANIZATION_ID,
    X_JOB_ID,
    X_POSITION_ID,
    X_GRADE_ID    ,
    X_PEOPLE_GRP_ID ,
    X_EMPLOYMENT_BEGIN_DATE,
    X_EMPLOYMENT_END_DATE,
    X_EMPLOYEE_STATUS_INACTIVE_DAT,
    X_EMPLOYEE_STATUS_ACTIVE_DATE,
    X_ASSIGNMENT_BEGIN_DATE,
    X_ASSIGNMENT_END_DATE,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN,
    X_ATTRIBUTE_CATEGORY,		-- Introduced DFF columns for bug fix 2908859
    X_ATTRIBUTE1,
    X_ATTRIBUTE2,
    X_ATTRIBUTE3,
    X_ATTRIBUTE4,
    X_ATTRIBUTE5,
    X_ATTRIBUTE6,
    X_ATTRIBUTE7,
    X_ATTRIBUTE8,
    X_ATTRIBUTE9,
    X_ATTRIBUTE10
  );

  open c;
  fetch c into X_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

end INSERT_ROW;

procedure LOCK_ROW (
  X_PAYROLL_SUB_LINE_ID in NUMBER,
  X_PAYROLL_LINE_ID in NUMBER,
  X_SUB_LINE_START_DATE in DATE,
  X_SUB_LINE_END_DATE in DATE,
  X_REASON_CODE in VARCHAR2,
  X_PAY_AMOUNT in NUMBER,
  X_DAILY_RATE in NUMBER,
  X_SALARY_USED in NUMBER,
  X_CURRENT_SALARY in NUMBER,
  X_FTE in NUMBER,
  X_ORGANIZATION_ID in NUMBER,
  X_JOB_ID in NUMBER,
  X_POSITION_ID in NUMBER,
  X_GRADE_ID    in NUMBER,
  X_PEOPLE_GRP_ID in NUMBER,
  X_EMPLOYMENT_BEGIN_DATE in DATE,
  X_EMPLOYMENT_END_DATE in DATE,
  X_EMPLOYEE_STATUS_INACTIVE_DAT in DATE,
  X_EMPLOYEE_STATUS_ACTIVE_DATE in DATE,
  X_ASSIGNMENT_BEGIN_DATE in DATE,
  X_ASSIGNMENT_END_DATE in DATE,
  X_ATTRIBUTE_CATEGORY IN VARCHAR2,	-- Introduced DFF columns for bug fix 2908859
  X_ATTRIBUTE1 IN VARCHAR2,
  X_ATTRIBUTE2 IN VARCHAR2,
  X_ATTRIBUTE3 IN VARCHAR2,
  X_ATTRIBUTE4 IN VARCHAR2,
  X_ATTRIBUTE5 IN VARCHAR2,
  X_ATTRIBUTE6 IN VARCHAR2,
  X_ATTRIBUTE7 IN VARCHAR2,
  X_ATTRIBUTE8 IN VARCHAR2,
  X_ATTRIBUTE9 IN VARCHAR2,
  X_ATTRIBUTE10 IN VARCHAR2
) is
  cursor c1 is select
      PAYROLL_LINE_ID,
      SUB_LINE_START_DATE,
      SUB_LINE_END_DATE,
      REASON_CODE,
      PAY_AMOUNT,
      DAILY_RATE,
      SALARY_USED,
      CURRENT_SALARY,
      FTE,
      ORGANIZATION_ID,
      JOB_ID,
      POSITION_ID,
      GRADE_ID,
      PEOPLE_GROUP_ID,
      EMPLOYMENT_BEGIN_DATE,
      EMPLOYMENT_END_DATE,
      EMPLOYEE_STATUS_INACTIVE_DATE,
      EMPLOYEE_STATUS_ACTIVE_DATE,
      ASSIGNMENT_BEGIN_DATE,
      ASSIGNMENT_END_DATE,
      ATTRIBUTE_CATEGORY,
      ATTRIBUTE1,
      ATTRIBUTE2,
      ATTRIBUTE3,
      ATTRIBUTE4,
      ATTRIBUTE5,
      ATTRIBUTE6,
      ATTRIBUTE7,
      ATTRIBUTE8,
      ATTRIBUTE9,
      ATTRIBUTE10
    from PSP_PAYROLL_SUB_LINES
    where PAYROLL_SUB_LINE_ID = X_PAYROLL_SUB_LINE_ID
    for update of PAYROLL_SUB_LINE_ID nowait;
  tlinfo c1%rowtype;

begin
  open c1;
  fetch c1 into tlinfo;
  if (c1%notfound) then
    fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
    app_exception.raise_exception;
    close c1;
    return;
  end if;
  close c1;

  if ( (tlinfo.PAYROLL_LINE_ID = X_PAYROLL_LINE_ID)
      AND (tlinfo.SUB_LINE_START_DATE = X_SUB_LINE_START_DATE)
      AND (tlinfo.SUB_LINE_END_DATE = X_SUB_LINE_END_DATE)
      AND ((tlinfo.REASON_CODE = X_REASON_CODE)
           OR ((tlinfo.REASON_CODE is null)
               AND (X_REASON_CODE is null)))
      AND (tlinfo.PAY_AMOUNT = X_PAY_AMOUNT)
      AND (tlinfo.DAILY_RATE = X_DAILY_RATE)
      AND (tlinfo.SALARY_USED = X_SALARY_USED)
      AND ((tlinfo.CURRENT_SALARY = X_CURRENT_SALARY)
           OR ((tlinfo.CURRENT_SALARY is null)
               AND (X_CURRENT_SALARY is null)))
      AND ((tlinfo.FTE = X_FTE)
           OR ((tlinfo.FTE is null)
               AND (X_FTE is null)))
      AND ((tlinfo.ORGANIZATION_ID = X_ORGANIZATION_ID)
           OR ((tlinfo.ORGANIZATION_ID is null)
               AND (X_ORGANIZATION_ID is null)))
      AND ((tlinfo.JOB_ID = X_JOB_ID)
           OR ((tlinfo.JOB_ID is null)
               AND (X_JOB_ID is null)))
      AND ((tlinfo.POSITION_ID = X_POSITION_ID)
           OR ((tlinfo.POSITION_ID is null)
               AND (X_POSITION_ID is null)))
      AND ((tlinfo.GRADE_ID = X_GRADE_ID)
           OR ((tlinfo.GRADE_ID is null)
               AND (X_GRADE_ID is null)))
      AND ((tlinfo.PEOPLE_GROUP_ID = X_PEOPLE_GRP_ID)
           OR ((tlinfo.PEOPLE_GROUP_ID is null)
               AND (X_PEOPLE_GRP_ID is null)))
      AND ((tlinfo.EMPLOYMENT_BEGIN_DATE = X_EMPLOYMENT_BEGIN_DATE)
           OR ((tlinfo.EMPLOYMENT_BEGIN_DATE is null)
               AND (X_EMPLOYMENT_BEGIN_DATE is null)))
      AND ((tlinfo.EMPLOYMENT_END_DATE = X_EMPLOYMENT_END_DATE)
           OR ((tlinfo.EMPLOYMENT_END_DATE is null)
               AND (X_EMPLOYMENT_END_DATE is null)))
      AND ((tlinfo.EMPLOYEE_STATUS_INACTIVE_DATE = X_EMPLOYEE_STATUS_INACTIVE_DAT)
           OR ((tlinfo.EMPLOYEE_STATUS_INACTIVE_DATE is null)
               AND (X_EMPLOYEE_STATUS_INACTIVE_DAT is null)))
      AND ((tlinfo.EMPLOYEE_STATUS_ACTIVE_DATE = X_EMPLOYEE_STATUS_ACTIVE_DATE)
           OR ((tlinfo.EMPLOYEE_STATUS_ACTIVE_DATE is null)
               AND (X_EMPLOYEE_STATUS_ACTIVE_DATE is null)))
      AND ((tlinfo.ASSIGNMENT_BEGIN_DATE = X_ASSIGNMENT_BEGIN_DATE)
           OR ((tlinfo.ASSIGNMENT_BEGIN_DATE is null)
               AND (X_ASSIGNMENT_BEGIN_DATE is null)))
      AND ((tlinfo.ASSIGNMENT_END_DATE = X_ASSIGNMENT_END_DATE)
           OR ((tlinfo.ASSIGNMENT_END_DATE is null)
               AND (X_ASSIGNMENT_END_DATE is null)))
      AND ((tlinfo.ATTRIBUTE_CATEGORY = X_ATTRIBUTE_CATEGORY)		-- Introduced DFF columns for bug fix 2908859
           OR ((tlinfo.ATTRIBUTE_CATEGORY is null)
               AND (X_ATTRIBUTE_CATEGORY is null)))
      AND ((tlinfo.ATTRIBUTE1 = X_ATTRIBUTE1)
           OR ((tlinfo.ATTRIBUTE1 is null)
               AND (X_ATTRIBUTE1 is null)))
      AND ((tlinfo.ATTRIBUTE2 = X_ATTRIBUTE2)
           OR ((tlinfo.ATTRIBUTE2 is null)
               AND (X_ATTRIBUTE2 is null)))
      AND ((tlinfo.ATTRIBUTE3 = X_ATTRIBUTE3)
           OR ((tlinfo.ATTRIBUTE3 is null)
               AND (X_ATTRIBUTE3 is null)))
      AND ((tlinfo.ATTRIBUTE4 = X_ATTRIBUTE4)
           OR ((tlinfo.ATTRIBUTE4 is null)
               AND (X_ATTRIBUTE4 is null)))
      AND ((tlinfo.ATTRIBUTE5 = X_ATTRIBUTE5)
           OR ((tlinfo.ATTRIBUTE5 is null)
               AND (X_ATTRIBUTE5 is null)))
      AND ((tlinfo.ATTRIBUTE6 = X_ATTRIBUTE6)
           OR ((tlinfo.ATTRIBUTE6 is null)
               AND (X_ATTRIBUTE6 is null)))
      AND ((tlinfo.ATTRIBUTE7 = X_ATTRIBUTE7)
           OR ((tlinfo.ATTRIBUTE7 is null)
               AND (X_ATTRIBUTE7 is null)))
      AND ((tlinfo.ATTRIBUTE8 = X_ATTRIBUTE8)
           OR ((tlinfo.ATTRIBUTE8 is null)
               AND (X_ATTRIBUTE8 is null)))
      AND ((tlinfo.ATTRIBUTE9 = X_ATTRIBUTE9)
           OR ((tlinfo.ATTRIBUTE9 is null)
               AND (X_ATTRIBUTE9 is null)))
      AND ((tlinfo.ATTRIBUTE10 = X_ATTRIBUTE10)
           OR ((tlinfo.ATTRIBUTE10 is null)
               AND (X_ATTRIBUTE10 is null)))
  ) then
    null;
  else
    fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
    app_exception.raise_exception;
  end if;
  return;
end LOCK_ROW;

procedure UPDATE_ROW (
  X_PAYROLL_SUB_LINE_ID in NUMBER,
  X_PAYROLL_LINE_ID in NUMBER,
  X_SUB_LINE_START_DATE in DATE,
  X_SUB_LINE_END_DATE in DATE,
  X_REASON_CODE in VARCHAR2,
  X_PAY_AMOUNT in NUMBER,
  X_DAILY_RATE in NUMBER,
  X_SALARY_USED in NUMBER,
  X_CURRENT_SALARY in NUMBER,
  X_FTE in NUMBER,
  X_ORGANIZATION_ID in NUMBER,
  X_JOB_ID in NUMBER,
  X_POSITION_ID in NUMBER,
  X_GRADE_ID    in NUMBER,
  X_PEOPLE_GRP_ID in NUMBER,
  X_EMPLOYMENT_BEGIN_DATE in DATE,
  X_EMPLOYMENT_END_DATE in DATE,
  X_EMPLOYEE_STATUS_INACTIVE_DAT in DATE,
  X_EMPLOYEE_STATUS_ACTIVE_DATE in DATE,
  X_ASSIGNMENT_BEGIN_DATE in DATE,
  X_ASSIGNMENT_END_DATE in DATE,
  X_ATTRIBUTE_CATEGORY IN VARCHAR2,	-- Introduced DFF columns for bug fix 2908859
  X_ATTRIBUTE1 IN VARCHAR2,
  X_ATTRIBUTE2 IN VARCHAR2,
  X_ATTRIBUTE3 IN VARCHAR2,
  X_ATTRIBUTE4 IN VARCHAR2,
  X_ATTRIBUTE5 IN VARCHAR2,
  X_ATTRIBUTE6 IN VARCHAR2,
  X_ATTRIBUTE7 IN VARCHAR2,
  X_ATTRIBUTE8 IN VARCHAR2,
  X_ATTRIBUTE9 IN VARCHAR2,
  X_ATTRIBUTE10 IN VARCHAR2,
  X_MODE in VARCHAR2 default 'R'
  ) is
    X_LAST_UPDATE_DATE DATE;
    X_LAST_UPDATED_BY NUMBER;
    X_LAST_UPDATE_LOGIN NUMBER;
begin
  X_LAST_UPDATE_DATE := SYSDATE;
  if(X_MODE = 'I') then
    X_LAST_UPDATED_BY := 1;
    X_LAST_UPDATE_LOGIN := 0;
  elsif (X_MODE = 'R') then
    X_LAST_UPDATED_BY := FND_GLOBAL.USER_ID;
    if X_LAST_UPDATED_BY is NULL then
      X_LAST_UPDATED_BY := -1;
    end if;
    X_LAST_UPDATE_LOGIN :=FND_GLOBAL.LOGIN_ID;
    if X_LAST_UPDATE_LOGIN is NULL then
      X_LAST_UPDATE_LOGIN := -1;
    end if;
  else
    FND_MESSAGE.SET_NAME('FND', 'SYSTEM-INVALID ARGS');
    app_exception.raise_exception;
  end if;
  update PSP_PAYROLL_SUB_LINES set
    PAYROLL_LINE_ID = X_PAYROLL_LINE_ID,
    SUB_LINE_START_DATE = X_SUB_LINE_START_DATE,
    SUB_LINE_END_DATE = X_SUB_LINE_END_DATE,
    REASON_CODE = X_REASON_CODE,
    PAY_AMOUNT = X_PAY_AMOUNT,
    DAILY_RATE = X_DAILY_RATE,
    SALARY_USED = X_SALARY_USED,
    CURRENT_SALARY = X_CURRENT_SALARY,
    FTE = X_FTE,
    ORGANIZATION_ID = X_ORGANIZATION_ID,
    JOB_ID = X_JOB_ID,
    POSITION_ID = X_POSITION_ID,
    GRADE_ID    = X_GRADE_ID,
    PEOPLE_GROUP_ID  = X_PEOPLE_GRP_ID,
    EMPLOYMENT_BEGIN_DATE = X_EMPLOYMENT_BEGIN_DATE,
    EMPLOYMENT_END_DATE = X_EMPLOYMENT_END_DATE,
    EMPLOYEE_STATUS_INACTIVE_DATE = X_EMPLOYEE_STATUS_INACTIVE_DAT,
    EMPLOYEE_STATUS_ACTIVE_DATE = X_EMPLOYEE_STATUS_ACTIVE_DATE,
    ASSIGNMENT_BEGIN_DATE = X_ASSIGNMENT_BEGIN_DATE,
    ASSIGNMENT_END_DATE = X_ASSIGNMENT_END_DATE,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    ATTRIBUTE_CATEGORY = X_ATTRIBUTE_CATEGORY,			-- Introduced DFF columns for bub fix 2908859
    ATTRIBUTE1 = X_ATTRIBUTE1,
    ATTRIBUTE2 = X_ATTRIBUTE2,
    ATTRIBUTE3 = X_ATTRIBUTE3,
    ATTRIBUTE4 = X_ATTRIBUTE4,
    ATTRIBUTE5 = X_ATTRIBUTE5,
    ATTRIBUTE6 = X_ATTRIBUTE6,
    ATTRIBUTE7 = X_ATTRIBUTE7,
    ATTRIBUTE8 = X_ATTRIBUTE8,
    ATTRIBUTE9 = X_ATTRIBUTE9,
    ATTRIBUTE10 = X_ATTRIBUTE10
  where PAYROLL_SUB_LINE_ID = X_PAYROLL_SUB_LINE_ID
  ;
  if (sql%notfound) then
    raise no_data_found;
  end if;
end UPDATE_ROW;

procedure ADD_ROW (
  X_ROWID in out NOCOPY VARCHAR2,
  X_PAYROLL_SUB_LINE_ID in NUMBER,
  X_PAYROLL_LINE_ID in NUMBER,
  X_SUB_LINE_START_DATE in DATE,
  X_SUB_LINE_END_DATE in DATE,
  X_REASON_CODE in VARCHAR2,
  X_PAY_AMOUNT in NUMBER,
  X_DAILY_RATE in NUMBER,
  X_SALARY_USED in NUMBER,
  X_CURRENT_SALARY in NUMBER,
  X_FTE in NUMBER,
  X_ORGANIZATION_ID in NUMBER,
  X_JOB_ID in NUMBER,
  X_POSITION_ID in NUMBER,
  X_GRADE_ID     in NUMBER,
  X_PEOPLE_GRP_ID in NUMBER,
  X_EMPLOYMENT_BEGIN_DATE in DATE,
  X_EMPLOYMENT_END_DATE in DATE,
  X_EMPLOYEE_STATUS_INACTIVE_DAT in DATE,
  X_EMPLOYEE_STATUS_ACTIVE_DATE in DATE,
  X_ASSIGNMENT_BEGIN_DATE in DATE,
  X_ASSIGNMENT_END_DATE in DATE,
  X_ATTRIBUTE_CATEGORY IN VARCHAR2,	-- Introduced DFF columns for bug fix 2908859
  X_ATTRIBUTE1 IN VARCHAR2,
  X_ATTRIBUTE2 IN VARCHAR2,
  X_ATTRIBUTE3 IN VARCHAR2,
  X_ATTRIBUTE4 IN VARCHAR2,
  X_ATTRIBUTE5 IN VARCHAR2,
  X_ATTRIBUTE6 IN VARCHAR2,
  X_ATTRIBUTE7 IN VARCHAR2,
  X_ATTRIBUTE8 IN VARCHAR2,
  X_ATTRIBUTE9 IN VARCHAR2,
  X_ATTRIBUTE10 IN VARCHAR2,
  X_MODE in VARCHAR2 default 'R'
  ) is
  cursor c1 is select rowid from PSP_PAYROLL_SUB_LINES
     where PAYROLL_SUB_LINE_ID = X_PAYROLL_SUB_LINE_ID
  ;
  dummy c1%rowtype;
begin
  open c1;
  fetch c1 into dummy;
  if (c1%notfound) then
    close c1;
    INSERT_ROW (
     X_ROWID,
     X_PAYROLL_SUB_LINE_ID,
     X_PAYROLL_LINE_ID,
     X_SUB_LINE_START_DATE,
     X_SUB_LINE_END_DATE,
     X_REASON_CODE,
     X_PAY_AMOUNT,
     X_DAILY_RATE,
     X_SALARY_USED,
     X_CURRENT_SALARY,
     X_FTE,
     X_ORGANIZATION_ID,
     X_JOB_ID,
     X_POSITION_ID,
     X_GRADE_ID,
     X_PEOPLE_GRP_ID,
     X_EMPLOYMENT_BEGIN_DATE,
     X_EMPLOYMENT_END_DATE,
     X_EMPLOYEE_STATUS_INACTIVE_DAT,
     X_EMPLOYEE_STATUS_ACTIVE_DATE,
     X_ASSIGNMENT_BEGIN_DATE,
     X_ASSIGNMENT_END_DATE,
     X_ATTRIBUTE_CATEGORY,		-- Introduced DFF columns for bug fix 2908859
     X_ATTRIBUTE1,
     X_ATTRIBUTE2,
     X_ATTRIBUTE3,
     X_ATTRIBUTE4,
     X_ATTRIBUTE5,
     X_ATTRIBUTE6,
     X_ATTRIBUTE7,
     X_ATTRIBUTE8,
     X_ATTRIBUTE9,
     X_ATTRIBUTE10,
     X_MODE);
    return;
  end if;
  close c1;
  UPDATE_ROW (
   X_PAYROLL_SUB_LINE_ID,
   X_PAYROLL_LINE_ID,
   X_SUB_LINE_START_DATE,
   X_SUB_LINE_END_DATE,
   X_REASON_CODE,
   X_PAY_AMOUNT,
   X_DAILY_RATE,
   X_SALARY_USED,
   X_CURRENT_SALARY,
   X_FTE,
   X_ORGANIZATION_ID,
   X_JOB_ID,
   X_POSITION_ID,
   X_GRADE_ID,
   X_PEOPLE_GRP_ID,
   X_EMPLOYMENT_BEGIN_DATE,
   X_EMPLOYMENT_END_DATE,
   X_EMPLOYEE_STATUS_INACTIVE_DAT,
   X_EMPLOYEE_STATUS_ACTIVE_DATE,
   X_ASSIGNMENT_BEGIN_DATE,
   X_ASSIGNMENT_END_DATE,
   X_ATTRIBUTE_CATEGORY,		-- Introduced DFF columns for bug fix 2908859
   X_ATTRIBUTE1,
   X_ATTRIBUTE2,
   X_ATTRIBUTE3,
   X_ATTRIBUTE4,
   X_ATTRIBUTE5,
   X_ATTRIBUTE6,
   X_ATTRIBUTE7,
   X_ATTRIBUTE8,
   X_ATTRIBUTE9,
   X_ATTRIBUTE10,
   X_MODE);
end ADD_ROW;

procedure DELETE_ROW (
  X_PAYROLL_SUB_LINE_ID in NUMBER
) is
begin
  delete from PSP_PAYROLL_SUB_LINES
  where PAYROLL_SUB_LINE_ID = X_PAYROLL_SUB_LINE_ID;
  if (sql%notfound) then
    raise no_data_found;
  end if;
end DELETE_ROW;

end PSP_PAYROLL_SUB_LINES_PKG;

/
