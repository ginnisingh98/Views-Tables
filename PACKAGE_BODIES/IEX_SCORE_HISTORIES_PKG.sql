--------------------------------------------------------
--  DDL for Package Body IEX_SCORE_HISTORIES_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."IEX_SCORE_HISTORIES_PKG" AS
/* $Header: iextschb.pls 120.0 2004/01/24 03:22:40 appldev noship $ */

/* Insert_Row procedure */
PG_DEBUG NUMBER(2) := TO_NUMBER(NVL(FND_PROFILE.value('IEX_DEBUG_LEVEL'), '20'));

PROCEDURE Insert_Row(x_rowid	IN OUT NOCOPY VARCHAR2
    ,p_SCORE_HISTORY_ID         NUMBER
    ,p_OBJECT_VERSION_NUMBER    NUMBER
    ,p_PROGRAM_ID               NUMBER  DEFAULT NULL
    ,p_LAST_UPDATE_DATE         DATE
    ,p_LAST_UPDATED_BY          NUMBER
    ,p_LAST_UPDATE_LOGIN        NUMBER  DEFAULT NULL
    ,p_CREATION_DATE            DATE
    ,p_CREATED_BY               NUMBER
    ,p_SCORE_VALUE              NUMBER  DEFAULT NULL
    ,p_SCORE_ID                 NUMBER  DEFAULT NULL
    ,p_PARTY_ID                 NUMBER  DEFAULT NULL
    ,p_ICO_ID                   NUMBER  DEFAULT NULL
    ,p_DEL_DELINQUENCY_ID       NUMBER  DEFAULT NULL
    ,p_SECURITY_GROUP_ID        NUMBER  DEFAULT NULL
    ,p_SCORE_OBJECT_ID          NUMBER  DEFAULT NULL
    ,p_SCORE_OBJECT_CODE        VARCHAR2    DEFAULT NULL
    ,p_REQUEST_ID               NUMBER  DEFAULT NULL
    ,p_PROGRAM_APPLICATION_ID   NUMBER  DEFAULT NULL
    ,p_PROGRAM_UPDATE_DATE      DATE    DEFAULT NULL
) IS
	CURSOR C IS SELECT ROWID FROM IEX_SCORE_HISTORIES
		WHERE SCORE_HISTORY_ID = p_SCORE_HISTORY_ID;

BEGIN
	INSERT INTO IEX_SCORE_HISTORIES
	(
		SCORE_HISTORY_ID
		,OBJECT_VERSION_NUMBER
		,PROGRAM_ID
		,LAST_UPDATE_DATE
		,LAST_UPDATED_BY
		,LAST_UPDATE_LOGIN
		,CREATION_DATE
		,CREATED_BY
		,SCORE_VALUE
		,SCORE_ID
		,PARTY_ID
		,ICO_ID
		,DEL_DELINQUENCY_ID
		,SECURITY_GROUP_ID
		,SCORE_OBJECT_ID
        ,SCORE_OBJECT_CODE
		,REQUEST_ID
		,PROGRAM_APPLICATION_ID
		,PROGRAM_UPDATE_DATE
	) VALUES (
		p_SCORE_HISTORY_ID
		,p_OBJECT_VERSION_NUMBER
		,p_PROGRAM_ID
		,p_LAST_UPDATE_DATE
		,p_LAST_UPDATED_BY
		,p_LAST_UPDATE_LOGIN
		,p_CREATION_DATE
		,p_CREATED_BY
		,p_SCORE_VALUE
		,p_SCORE_ID
		,p_PARTY_ID
		,p_ICO_ID
		,p_DEL_DELINQUENCY_ID
		,p_SECURITY_GROUP_ID
		,p_SCORE_OBJECT_ID
        ,p_SCORE_OBJECT_CODE
		,p_REQUEST_ID
		,p_PROGRAM_APPLICATION_ID
		,p_PROGRAM_UPDATE_DATE
	);

	OPEN C;
	FETCH C INTO x_rowid;
	IF (C%NOTFOUND) THEN
		CLOSE C;
		RAISE NO_DATA_FOUND;
	END IF;
	CLOSE C;
END Insert_Row;

/* Update_Row procedure */
PROCEDURE Update_Row(x_rowid	VARCHAR2
    ,p_SCORE_HISTORY_ID         NUMBER
    ,p_OBJECT_VERSION_NUMBER    NUMBER
    ,p_PROGRAM_ID               NUMBER  DEFAULT NULL
    ,p_LAST_UPDATE_DATE         DATE
    ,p_LAST_UPDATED_BY          NUMBER
    ,p_LAST_UPDATE_LOGIN        NUMBER  DEFAULT NULL
    ,p_CREATION_DATE            DATE
    ,p_CREATED_BY               NUMBER
    ,p_SCORE_VALUE              NUMBER  DEFAULT NULL
    ,p_SCORE_ID                 NUMBER  DEFAULT NULL
    ,p_PARTY_ID                 NUMBER  DEFAULT NULL
    ,p_ICO_ID                   NUMBER  DEFAULT NULL
    ,p_DEL_DELINQUENCY_ID       NUMBER  DEFAULT NULL
    ,p_SECURITY_GROUP_ID        NUMBER  DEFAULT NULL
    ,p_SCORE_OBJECT_ID          NUMBER  DEFAULT NULL
    ,p_SCORE_OBJECT_CODE        VARCHAR2    DEFAULT NULL
    ,p_REQUEST_ID               NUMBER  DEFAULT NULL
    ,p_PROGRAM_APPLICATION_ID   NUMBER  DEFAULT NULL
    ,p_PROGRAM_UPDATE_DATE      DATE    DEFAULT NULL
) IS
BEGIN
	UPDATE IEX_SCORE_HISTORIES SET
		SCORE_HISTORY_ID = p_SCORE_HISTORY_ID
		,OBJECT_VERSION_NUMBER = p_OBJECT_VERSION_NUMBER
		,PROGRAM_ID = p_PROGRAM_ID
		,LAST_UPDATE_DATE = p_LAST_UPDATE_DATE
		,LAST_UPDATED_BY = p_LAST_UPDATED_BY
		,LAST_UPDATE_LOGIN = p_LAST_UPDATE_LOGIN
		,CREATION_DATE = p_CREATION_DATE
		,CREATED_BY = p_CREATED_BY
		,SCORE_VALUE = p_SCORE_VALUE
		,SCORE_ID = p_SCORE_ID
		,PARTY_ID = p_PARTY_ID
		,ICO_ID = p_ICO_ID
		,DEL_DELINQUENCY_ID = p_DEL_DELINQUENCY_ID
		,SECURITY_GROUP_ID = p_SECURITY_GROUP_ID
		,SCORE_OBJECT_ID = p_SCORE_OBJECT_ID
        ,SCORE_OBJECT_CODE = p_SCORE_OBJECT_CODE
		,REQUEST_ID = p_REQUEST_ID
		,PROGRAM_APPLICATION_ID = p_PROGRAM_APPLICATION_ID
		,PROGRAM_UPDATE_DATE = p_PROGRAM_UPDATE_DATE
	 WHERE rowid = x_rowid;

	if (sql%notfound) then
		raise no_data_found;
	end if;
END Update_Row;

/* Delete_Row procedure */
PROCEDURE Delete_Row(x_rowid VARCHAR2) IS
BEGIN
	DELETE FROM IEX_SCORE_HISTORIES
		WHERE rowid = x_rowid;

	if (sql%notfound) then
		raise no_data_found;
	end if;
END Delete_Row;

/* Lock_Row procedure */
PROCEDURE Lock_Row(x_rowid	VARCHAR2
    ,p_SCORE_HISTORY_ID         NUMBER
    ,p_OBJECT_VERSION_NUMBER    NUMBER
    ,p_PROGRAM_ID               NUMBER  DEFAULT NULL
    ,p_LAST_UPDATE_DATE         DATE
    ,p_LAST_UPDATED_BY          NUMBER
    ,p_LAST_UPDATE_LOGIN        NUMBER  DEFAULT NULL
    ,p_CREATION_DATE            DATE
    ,p_CREATED_BY               NUMBER
    ,p_SCORE_VALUE              NUMBER  DEFAULT NULL
    ,p_SCORE_ID                 NUMBER  DEFAULT NULL
    ,p_PARTY_ID                 NUMBER  DEFAULT NULL
    ,p_ICO_ID                   NUMBER  DEFAULT NULL
    ,p_DEL_DELINQUENCY_ID       NUMBER  DEFAULT NULL
    ,p_SECURITY_GROUP_ID        NUMBER  DEFAULT NULL
    ,p_SCORE_OBJECT_ID          NUMBER  DEFAULT NULL
    ,p_SCORE_OBJECT_CODE        VARCHAR2    DEFAULT NULL
    ,p_REQUEST_ID               NUMBER  DEFAULT NULL
    ,p_PROGRAM_APPLICATION_ID   NUMBER  DEFAULT NULL
    ,p_PROGRAM_UPDATE_DATE      DATE    DEFAULT NULL
) IS
	CURSOR C IS SELECT * FROM IEX_SCORE_HISTORIES
		WHERE rowid = x_rowid
		FOR UPDATE of SCORE_HISTORY_ID NOWAIT;
	Recinfo C%ROWTYPE;
BEGIN
	OPEN C;
	FETCH C INTO Recinfo;
	IF (C%NOTFOUND) THEN
		CLOSE C;
		FND_MESSAGE.Set_Name('FND', 'FORM_RECORD_DELETED');
		APP_EXCEPTION.Raise_Exception;
	END IF;
	CLOSE C;

	IF (
		(Recinfo.SCORE_HISTORY_ID = p_SCORE_HISTORY_ID)
		AND ( (Recinfo.OBJECT_VERSION_NUMBER = p_OBJECT_VERSION_NUMBER)
			OR ( (Recinfo.OBJECT_VERSION_NUMBER IS NULL)
				AND (p_OBJECT_VERSION_NUMBER IS NULL)))
		AND ( (Recinfo.PROGRAM_ID = p_PROGRAM_ID)
			OR ( (Recinfo.PROGRAM_ID IS NULL)
				AND (p_PROGRAM_ID IS NULL)))
		AND ( (Recinfo.LAST_UPDATE_DATE = p_LAST_UPDATE_DATE)
			OR ( (Recinfo.LAST_UPDATE_DATE IS NULL)
				AND (p_LAST_UPDATE_DATE IS NULL)))
		AND ( (Recinfo.LAST_UPDATED_BY = p_LAST_UPDATED_BY)
			OR ( (Recinfo.LAST_UPDATED_BY IS NULL)
				AND (p_LAST_UPDATED_BY IS NULL)))
		AND ( (Recinfo.LAST_UPDATE_LOGIN = p_LAST_UPDATE_LOGIN)
			OR ( (Recinfo.LAST_UPDATE_LOGIN IS NULL)
				AND (p_LAST_UPDATE_LOGIN IS NULL)))
		AND ( (Recinfo.CREATION_DATE = p_CREATION_DATE)
			OR ( (Recinfo.CREATION_DATE IS NULL)
				AND (p_CREATION_DATE IS NULL)))
		AND ( (Recinfo.CREATED_BY = p_CREATED_BY)
			OR ( (Recinfo.CREATED_BY IS NULL)
				AND (p_CREATED_BY IS NULL)))
		AND ( (Recinfo.SCORE_VALUE = p_SCORE_VALUE)
			OR ( (Recinfo.SCORE_VALUE IS NULL)
				AND (p_SCORE_VALUE IS NULL)))
		AND ( (Recinfo.SCORE_ID = p_SCORE_ID)
			OR ( (Recinfo.SCORE_ID IS NULL)
				AND (p_SCORE_ID IS NULL)))
		AND ( (Recinfo.PARTY_ID = p_PARTY_ID)
			OR ( (Recinfo.PARTY_ID IS NULL)
				AND (p_PARTY_ID IS NULL)))
		AND ( (Recinfo.ICO_ID = p_ICO_ID)
			OR ( (Recinfo.ICO_ID IS NULL)
				AND (p_ICO_ID IS NULL)))
		AND ( (Recinfo.DEL_DELINQUENCY_ID = p_DEL_DELINQUENCY_ID)
			OR ( (Recinfo.DEL_DELINQUENCY_ID IS NULL)
				AND (p_DEL_DELINQUENCY_ID IS NULL)))
		AND ( (Recinfo.SECURITY_GROUP_ID = p_SECURITY_GROUP_ID)
			OR ( (Recinfo.SECURITY_GROUP_ID IS NULL)
				AND (p_SECURITY_GROUP_ID IS NULL)))
		AND ( (Recinfo.SCORE_OBJECT_ID = p_SCORE_OBJECT_ID)
			OR ( (Recinfo.SCORE_OBJECT_ID IS NULL)
				AND (p_SCORE_OBJECT_ID IS NULL)))
        AND ( (Recinfo.SCORE_OBJECT_CODE = p_SCORE_OBJECT_CODE)
            OR ( (Recinfo.SCORE_OBJECT_CODE IS NULL)
                AND (p_SCORE_OBJECT_CODE IS NULL)))
		AND ( (Recinfo.REQUEST_ID = p_REQUEST_ID)
			OR ( (Recinfo.REQUEST_ID IS NULL)
				AND (p_REQUEST_ID IS NULL)))
		AND ( (Recinfo.PROGRAM_APPLICATION_ID = p_PROGRAM_APPLICATION_ID)
			OR ( (Recinfo.PROGRAM_APPLICATION_ID IS NULL)
				AND (p_PROGRAM_APPLICATION_ID IS NULL)))
		AND ( (Recinfo.PROGRAM_UPDATE_DATE = p_PROGRAM_UPDATE_DATE)
			OR ( (Recinfo.PROGRAM_UPDATE_DATE IS NULL)
				AND (p_PROGRAM_UPDATE_DATE IS NULL)))
	   ) THEN
		return;
	ELSE
		FND_MESSAGE.Set_Name('FND', 'FORM_RECORD_CHANGED');
		APP_EXCEPTION.Raise_Exception;
	END IF;
END Lock_Row;
END;


/
