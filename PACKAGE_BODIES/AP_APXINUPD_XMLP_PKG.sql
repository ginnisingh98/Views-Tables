--------------------------------------------------------
--  DDL for Package Body AP_APXINUPD_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."AP_APXINUPD_XMLP_PKG" AS
/* $Header: APXINUPDB.pls 120.0 2007/12/27 08:03:28 vjaganat noship $ */
  FUNCTION GET_BASE_CURR_DATA RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_BASE_CURR_DATA;

  FUNCTION CUSTOM_INIT RETURN BOOLEAN IS
  BEGIN
    UPDATE
      AP_DUPLICATE_VENDORS
    SET
      PROCESS_FLAG = 'S'
    WHERE PROCESS_FLAG = 'N';
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (TRUE);
  END CUSTOM_INIT;

  FUNCTION GET_COVER_PAGE_VALUES RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COVER_PAGE_VALUES;

  FUNCTION GET_NLS_STRINGS RETURN BOOLEAN IS
    NLS_ALL AP_LOOKUP_CODES.DISPLAYED_FIELD%TYPE;
    NLS_YES FND_LOOKUPS.MEANING%TYPE;
    NLS_NO FND_LOOKUPS.MEANING%TYPE;
  BEGIN
    NLS_ALL := '';
    NLS_YES := '';
    NLS_NO := '';
    SELECT
      LY.MEANING,
      LN.MEANING,
      LA.DISPLAYED_FIELD
    INTO NLS_YES,NLS_NO,NLS_ALL
    FROM
      FND_LOOKUPS LY,
      FND_LOOKUPS LN,
      AP_LOOKUP_CODES LA
    WHERE LY.LOOKUP_TYPE = 'YES_NO'
      AND LY.LOOKUP_CODE = 'Y'
      AND LN.LOOKUP_TYPE = 'YES_NO'
      AND LN.LOOKUP_CODE = 'N'
      AND LA.LOOKUP_TYPE = 'NLS REPORT PARAMETER'
      AND LA.LOOKUP_CODE = 'ALL';
    C_NLS_YES := NLS_YES;
    C_NLS_NO := NLS_NO;
    C_NLS_ALL := NLS_ALL;
    FND_MESSAGE.SET_NAME('SQLAP'
                        ,'AP_APPRVL_NO_DATA');
    C_NLS_NO_DATA_EXISTS := '*** ' || C_NLS_NO_DATA_EXISTS || ' ***';
    FND_MESSAGE.SET_NAME('SQLAP'
                        ,'AP_ALL_END_OF_REPORT');
    C_NLS_END_OF_REPORT := '*** ' || C_NLS_END_OF_REPORT || ' ***';
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_NLS_STRINGS;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      INIT_FAILURE EXCEPTION;
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      SELECT
      SUBSTR(ARGUMENT1,INSTR(ARGUMENT1,'"',1,1)+1,(INSTR(ARGUMENT1,'"',1,2)-INSTR(ARGUMENT1,'"',1,1) -1)),
      SUBSTR(ARGUMENT2,INSTR(ARGUMENT2,'"',1,1)+1,INSTR(ARGUMENT2,'"',1,2)-INSTR(ARGUMENT2,'"',1,1) -1),
      SUBSTR(ARGUMENT3,INSTR(ARGUMENT3,'"',1,1)+1,INSTR(ARGUMENT3,'"',1,2)-INSTR(ARGUMENT3,'"',1,1) -1),
      SUBSTR(ARGUMENT4,INSTR(ARGUMENT4,'"',1,1)+1,INSTR(ARGUMENT4,'"',1,2)-INSTR(ARGUMENT4,'"',1,1) -1),
      SUBSTR(ARGUMENT5,INSTR(ARGUMENT5,'"',1,1)+1,INSTR(ARGUMENT5,'"',1,2)-INSTR(ARGUMENT5,'"',1,1) -1),
      SUBSTR(ARGUMENT6,INSTR(ARGUMENT6,'"',1,1)+1,INSTR(ARGUMENT6,'"',1,2)-INSTR(ARGUMENT6,'"',1,1) -1),
      SUBSTR(ARGUMENT7,INSTR(ARGUMENT7,'"',1,1)+1,INSTR(ARGUMENT7,'"',1,2)-INSTR(ARGUMENT7,'"',1,1) -1)
      into P_LAST_UPDATED_BY_T,P_SET_OF_BOOKS_ID_T,P_FA_INSTALLED_FLAG_T,P_PO_INSTALLED_FLAG_T,
      P_PA_INSTALLED_FLAG_T,P_INV_INSTALLED_FLAG_T,P_PN_INSTALLED_FLAG_T
      FROM FND_CONCURRENT_REQUESTS
      WHERE REQUEST_ID = P_CONC_REQUEST_ID;

      IF (P_DEBUG_SWITCH = 'Y') THEN
        NULL;
      END IF;
      IF (P_CHV_INSTALLED_FLAG = 'I') THEN
        P_CHV_INSTALLED_FLAG := 'Y';
      END IF;
      IF (P_MRP_INSTALLED_FLAG in ('I','S')) THEN
        P_MRP_INSTALLED_FLAG := 'Y';
      END IF;
      IF (GET_COMPANY_NAME <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (GET_NLS_STRINGS <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        NULL;
      END IF;
      IF (GET_BASE_CURR_DATA <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (CUSTOM_INIT <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        NULL;
      END IF;
      IF (DUPLICATE_TAX_SITES <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (DUPLICATE_SITES <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        NULL;
      END IF;
      RETURN (TRUE);
    EXCEPTION
      WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20101
                               ,NULL);
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      AP_VENDOR_PARTY_MERGE_PKG.OTHER_PRODUCTS_VENDORMERGE;
      MO_GLOBAL.SET_POLICY_CONTEXT('M'
                                  ,NULL);
      UPDATE
        AP_DUPLICATE_VENDORS
      SET
        PROCESS_FLAG = 'Y'
      WHERE PROCESS_FLAG = 'S';
      UPDATE
        AP_DUPLICATE_VENDORS
      SET
        PROCESS_FLAG = 'N'
      WHERE PROCESS_FLAG = 'D';
      IF (P_DEBUG_SWITCH = 'Y') THEN
        NULL;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20101
                               ,NULL);
    END;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION GET_COMPANY_NAME RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COMPANY_NAME;

  FUNCTION GET_FLEXDATA RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_FLEXDATA;

  FUNCTION CALCULATE_RUN_TIME RETURN BOOLEAN IS
    END_DATE DATE;
    START_DATE DATE;
  BEGIN
    END_DATE := SYSDATE;
    START_DATE := C_REPORT_START_DATE;
    C_REPORT_RUN_TIME := TO_CHAR(TO_DATE('01/01/0001'
                                        ,'DD/MM/YYYY') + ((END_DATE - START_DATE))
                                ,'HH24:MI:SS');
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR(-20101
                             ,NULL);
  END CALCULATE_RUN_TIME;

  FUNCTION C_VENDOR_SITE_IDFORMULA(C_ORG_ID IN NUMBER
                                  ,C_KEEP_SITE_FLAG IN VARCHAR2
                                  ,C_VENDOR_ID IN NUMBER
                                  ,C_VENDOR_SITE_CODE IN VARCHAR2
                                  ,C_OLD_VENDOR_SITE_ID IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      L_VENDOR_SITE_ID NUMBER;
    BEGIN
      MO_GLOBAL.SET_POLICY_CONTEXT('S'
                                  ,C_ORG_ID);
      IF C_KEEP_SITE_FLAG = 'Y' THEN
        SELECT
          VENDOR_SITE_ID
        INTO L_VENDOR_SITE_ID
        FROM
          AP_SUPPLIER_SITES_ALL
        WHERE VENDOR_ID = C_VENDOR_ID
          AND VENDOR_SITE_CODE = C_VENDOR_SITE_CODE
          AND ORG_ID = C_ORG_ID;
        RETURN (L_VENDOR_SITE_ID);
      ELSE
        RETURN (C_OLD_VENDOR_SITE_ID);
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        RETURN (C_OLD_VENDOR_SITE_ID);
    END;
    RETURN NULL;
  END C_VENDOR_SITE_IDFORMULA;

  FUNCTION C_DUPLICATE_YES_NOFORMULA(C_INVOICE_ID IN NUMBER
                                    ,C_INVOICE_NUM IN VARCHAR2
                                    ,C_VENDOR_ID IN NUMBER
                                    ,C_VENDOR_SITE_ID IN NUMBER
                                    ,C_PARTY_ID IN NUMBER
                                    ,C_PARTY_SITE_ID IN NUMBER
                                    ,C_PAID_INVOICES_FLAG IN VARCHAR2
                                    ,C_DUP_VENDOR_ID IN NUMBER
                                    ,C_DUP_VENDOR_SITE_ID IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      L_DUPLICATES VARCHAR2(1);
      STATUS VARCHAR2(1);
      INDUSTRY VARCHAR2(1);
      L_STAGE VARCHAR2(500);
      L_STATUS VARCHAR2(1);
      L_MSG_COUNT NUMBER;
      L_MSG_DATA VARCHAR2(500);
      L_RETURN_STATUS VARCHAR2(1);
      L_ERR_MSG VARCHAR2(500);
      API_ERROR EXCEPTION;
      CURSOR L_INVOICE_MERGED_CUR IS
        SELECT
          AI.INVOICE_ID INVOICE_ID
        FROM
          AP_INVOICES_ALL AI
        WHERE AI.INVOICE_ID = C_INVOICE_ID
          AND EXISTS (
          SELECT
            'Y'
          FROM
            AP_INVOICE_DISTRIBUTIONS_ALL AID
          WHERE AID.POSTED_FLAG = 'Y'
            AND AID.INVOICE_ID = AI.INVOICE_ID );
      CURSOR L_PAYMENT_MERGED_CUR IS
        SELECT
          AC.CHECK_ID CHECK_ID
        FROM
          AP_CHECKS_ALL AC
        WHERE EXISTS (
          SELECT
            'Y'
          FROM
            AP_INVOICE_PAYMENTS_ALL AIP
          WHERE AIP.CHECK_ID = AC.CHECK_ID
            AND AIP.POSTED_FLAG = 'Y'
            AND AIP.INVOICE_ID = C_INVOICE_ID );
    BEGIN
      SELECT
        'Y'
      INTO L_DUPLICATES
      FROM
        DUAL
      WHERE EXISTS (
        SELECT
          'Duplicates exist in ap_invoices'
        FROM
          AP_INVOICES_ALL
        WHERE INVOICE_NUM = C_INVOICE_NUM
          AND VENDOR_ID = C_VENDOR_ID
          AND INVOICE_ID <> C_INVOICE_ID )
      OR EXISTS (
        SELECT
          'Duplicates exist in ap_history_invoices'
        FROM
          AP_HISTORY_INVOICES_ALL
        WHERE INVOICE_NUM = C_INVOICE_NUM
          AND VENDOR_ID = C_VENDOR_ID
          AND INVOICE_ID <> C_INVOICE_ID );
      RETURN (C_NLS_YES);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        BEGIN
          UPDATE
            AP_INVOICES_ALL
          SET
            VENDOR_ID = C_VENDOR_ID
            ,VENDOR_SITE_ID = C_VENDOR_SITE_ID
            ,PARTY_ID = C_PARTY_ID
            ,PARTY_SITE_ID = C_PARTY_SITE_ID
            ,LAST_UPDATED_BY = P_LAST_UPDATED_BY_T
            ,LAST_UPDATE_DATE = SYSDATE
          WHERE INVOICE_ID = C_INVOICE_ID;
          AP_DBI_PKG.MAINTAIN_DBI_SUMMARY(P_TABLE_NAME => 'AP_INVOICES'
                                         ,P_OPERATION => 'U'
                                         ,P_KEY_VALUE1 => C_INVOICE_ID
                                         ,P_CALLING_SEQUENCE => 'Merge Vendors ');
          IF (C_PAID_INVOICES_FLAG = 'Y') THEN
            UPDATE
              AP_CHECKS_ALL
            SET
              VENDOR_ID = C_VENDOR_ID
              ,VENDOR_SITE_ID = C_VENDOR_SITE_ID
              ,PARTY_ID = C_PARTY_ID
              ,PARTY_SITE_ID = C_PARTY_SITE_ID
              ,LAST_UPDATED_BY = P_LAST_UPDATED_BY_T
              ,LAST_UPDATE_DATE = SYSDATE
            WHERE VENDOR_ID = C_DUP_VENDOR_ID
              AND CHECK_ID in (
              SELECT
                CHECK_ID
              FROM
                AP_INVOICE_PAYMENTS
              WHERE INVOICE_ID = C_INVOICE_ID );
          END IF;
          IF P_PA_INSTALLED_FLAG_T = 'Y' THEN
            PA_AP_INTEGRATION.UPD_PA_DETAILS_SUPPLIER_MERGE(P_OLD_VENDOR_ID => C_DUP_VENDOR_ID
                                                           ,P_NEW_VENDOR_ID => C_VENDOR_ID
                                                           ,P_PAID_INV_FLAG => C_PAID_INVOICES_FLAG
                                                           ,X_STAGE => L_STAGE
                                                           ,X_STATUS => L_STATUS);
            IF (P_DEBUG_SWITCH = 'Y') THEN
              NULL;
            END IF;
          END IF;
          IF P_INV_INSTALLED_FLAG_T = 'Y' THEN
            INV_VENDORMERGE_GRP.MERGE_VENDOR(P_API_VERSION => 1.0
                                            ,P_INIT_MSG_LIST => 'F'
                                            ,P_COMMIT => 'F'
                                            ,P_VALIDATION_LEVEL => 100
                                            ,P_RETURN_STATUS => L_RETURN_STATUS
                                            ,P_MSG_COUNT => L_MSG_COUNT
                                            ,P_MSG_DATA => L_MSG_DATA
                                            ,P_VENDOR_ID => C_VENDOR_ID
                                            ,P_DUP_VENDOR_ID => C_DUP_VENDOR_ID
                                            ,P_VENDOR_SITE_ID => C_VENDOR_SITE_ID
                                            ,P_DUP_VENDOR_SITE_ID => C_DUP_VENDOR_SITE_ID
                                            ,P_PARTY_ID => NULL
                                            ,P_DUP_PARTY_ID => NULL
                                            ,P_PARTY_SITE_ID => NULL
                                            ,P_DUP_PARTY_SITE_ID => NULL);
            IF L_RETURN_STATUS <> 'S' THEN
              IF L_MSG_COUNT > 0 THEN
                FOR i IN 1 .. L_MSG_COUNT LOOP
                  L_MSG_DATA := FND_MSG_PUB.GET(-2
                                               ,'T');
                  L_ERR_MSG := FND_MESSAGE.GET;
                  FND_FILE.PUT_LINE(1
                                   ,L_ERR_MSG);
                END LOOP;
              END IF;
              RAISE API_ERROR;
            END IF;
          END IF;
          IF (P_PN_INSTALLED_FLAG_T = 'Y') THEN
            PN_VENDORMERGE_GRP.MERGE_VENDOR(P_API_VERSION => 1.0
                                           ,P_INIT_MSG_LIST => 'F'
                                           ,P_COMMIT => 'F'
                                           ,P_VALIDATION_LEVEL => 100
                                           ,X_RETURN_STATUS => L_RETURN_STATUS
                                           ,X_MSG_COUNT => L_MSG_COUNT
                                           ,X_MSG_DATA => L_MSG_DATA
                                           ,P_VENDOR_ID => C_VENDOR_ID
                                           ,P_VENDOR_SITE_ID => C_VENDOR_SITE_ID
                                           ,P_DUP_VENDOR_ID => C_DUP_VENDOR_ID
                                           ,P_DUP_VENDOR_SITE_ID => C_DUP_VENDOR_SITE_ID
                                           ,P_LAST_UPDATED_BY => P_LAST_UPDATED_BY_T);
            IF L_RETURN_STATUS <> 'S' THEN
              IF L_MSG_COUNT > 0 THEN
                FOR i IN 1 .. L_MSG_COUNT LOOP
                  L_MSG_DATA := FND_MSG_PUB.GET(-2
                                               ,'T');
                  L_ERR_MSG := FND_MESSAGE.GET;
                  FND_FILE.PUT_LINE(1
                                   ,L_ERR_MSG);
                END LOOP;
              END IF;
              RAISE API_ERROR;
            END IF;
          END IF;
          RETURN (C_NLS_NO);
        END;
    END;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      APP_EXCEPTION.RAISE_EXCEPTION;
      RETURN NULL;
  END C_DUPLICATE_YES_NOFORMULA;

  FUNCTION C_DUP_INVOICEFORMULA(C_DUPLICATE_YES_NO IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    BEGIN
      IF C_DUPLICATE_YES_NO = C_NLS_YES THEN
        RETURN (1);
      ELSE
        RETURN (0);
      END IF;
    END;
    RETURN NULL;
  END C_DUP_INVOICEFORMULA;

  FUNCTION C_NON_DUP_INVOICEFORMULA(C_DUPLICATE_YES_NO IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    BEGIN
      IF C_DUPLICATE_YES_NO = C_NLS_NO THEN
        RETURN (1);
      ELSE
        RETURN (0);
      END IF;
    END;
    RETURN NULL;
  END C_NON_DUP_INVOICEFORMULA;

  FUNCTION C_PAID_AMOUNTFORMULA(C_DUPLICATE_YES_NO IN VARCHAR2
                               ,C_PAYMENT_STATUS_FLAG IN VARCHAR2
                               ,C_AMOUNT_PAID IN NUMBER
                               ,C_DISCOUNT_AMOUNT_TAKEN IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      L_PAID_AMOUNT NUMBER;
    BEGIN
      IF C_DUPLICATE_YES_NO = C_NLS_YES THEN
        RETURN (0);
      ELSE
        IF C_PAYMENT_STATUS_FLAG not in ('N','Y') THEN
          L_PAID_AMOUNT := C_AMOUNT_PAID + C_DISCOUNT_AMOUNT_TAKEN;
          RETURN (L_PAID_AMOUNT);
        ELSIF C_PAYMENT_STATUS_FLAG = 'Y' THEN
          RETURN (C_AMOUNT_PAID);
        ELSE
          RETURN (0);
        END IF;
      END IF;
    END;
    RETURN NULL;
  END C_PAID_AMOUNTFORMULA;

  FUNCTION C_CHANGED_AMOUNTFORMULA(C_DUPLICATE_YES_NO IN VARCHAR2
                                  ,C_INVOICE_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    BEGIN
      IF C_DUPLICATE_YES_NO = C_NLS_NO THEN
        RETURN (C_INVOICE_AMOUNT);
      ELSE
        RETURN (0);
      END IF;
    END;
    RETURN NULL;
  END C_CHANGED_AMOUNTFORMULA;

  FUNCTION C_PAID_INVOICEFORMULA(C_PAYMENT_STATUS_FLAG IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    BEGIN
      IF C_PAYMENT_STATUS_FLAG = 'Y' THEN
        RETURN (1);
      ELSE
        RETURN (0);
      END IF;
    END;
    RETURN NULL;
  END C_PAID_INVOICEFORMULA;

  FUNCTION C_UNPAID_INVOICEFORMULA(C_PAYMENT_STATUS_FLAG IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    BEGIN
      IF C_PAYMENT_STATUS_FLAG = 'N' THEN
        RETURN (1);
      ELSE
        RETURN (0);
      END IF;
    END;
    RETURN NULL;
  END C_UNPAID_INVOICEFORMULA;

  FUNCTION C_DUP_RECURRING_COUNTFORMULA(C_DUP_VENDOR_ID IN NUMBER
                                       ,C_DUP_VENDOR_SITE_ID IN NUMBER
                                       ,C_VENDOR_ID IN NUMBER
                                       ,C_VENDOR_SITE_ID IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      L_NUM_DUP_RECURRING NUMBER;
    BEGIN
      SELECT
        COUNT(*)
      INTO L_NUM_DUP_RECURRING
      FROM
        AP_RECURRING_PAYMENTS_ALL ARP1
      WHERE VENDOR_ID = C_DUP_VENDOR_ID
        AND VENDOR_SITE_ID = C_DUP_VENDOR_SITE_ID
        AND EXISTS (
        SELECT
          'this would be a duplicate'
        FROM
          AP_RECURRING_PAYMENTS_ALL ARP2
        WHERE ARP2.VENDOR_ID = C_VENDOR_ID
          AND ARP2.VENDOR_SITE_ID = C_VENDOR_SITE_ID
          AND ARP2.RECURRING_PAY_NUM = ARP1.RECURRING_PAY_NUM );
      RETURN (L_NUM_DUP_RECURRING);
    END;
    RETURN NULL;
  END C_DUP_RECURRING_COUNTFORMULA;

  FUNCTION C_RECURRING_COUNTFORMULA(C_VENDOR_ID IN NUMBER
                                   ,C_VENDOR_SITE_ID IN NUMBER
                                   ,C_DUP_VENDOR_ID IN NUMBER
                                   ,C_DUP_VENDOR_SITE_ID IN NUMBER) RETURN NUMBER IS
  pragma autonomous_transaction;
  BEGIN
    DECLARE
      L_NUM_RECURRING NUMBER;
    BEGIN
      UPDATE
        AP_RECURRING_PAYMENTS arp1
      SET
        VENDOR_ID = C_VENDOR_ID
        ,VENDOR_SITE_ID = C_VENDOR_SITE_ID
        ,LAST_UPDATED_BY = P_LAST_UPDATED_BY_T
        ,LAST_UPDATE_DATE = SYSDATE
      WHERE VENDOR_ID = C_DUP_VENDOR_ID
        AND VENDOR_SITE_ID = C_DUP_VENDOR_SITE_ID
        AND NOT EXISTS (
        SELECT
          'this would be a duplicate'
        FROM
          AP_RECURRING_PAYMENTS ARP2
        WHERE ARP2.VENDOR_ID = C_VENDOR_ID
          AND ARP2.VENDOR_SITE_ID = C_VENDOR_SITE_ID
          AND ARP2.RECURRING_PAY_NUM = ARP1.RECURRING_PAY_NUM );
      L_NUM_RECURRING := SQL%ROWCOUNT;
      commit;
      RETURN (L_NUM_RECURRING);
    END;
    RETURN NULL;
  END C_RECURRING_COUNTFORMULA;

  FUNCTION C_UPDATE_DUP_VENDORFORMULA(C_DUP_INVOICE_COUNT IN NUMBER
                                     ,C_DUP_RECURRING_COUNT IN NUMBER
                                     ,C_KEEP_SITE_FLAG IN VARCHAR2
                                     ,C_VENDOR_SITE_ID IN NUMBER
                                     ,C_ENTRY_ID IN NUMBER
                                     ,C_PAID_INVOICE_COUNT_RESET IN NUMBER
                                     ,C_UNPAID_INVOICE_COUNT_RESET IN NUMBER
                                     ,C_DUP_VENDOR_ID IN NUMBER
                                     ,C_DUP_VENDOR_SITE_ID IN NUMBER
                                     ,C_VENDOR_ID IN NUMBER
                                     ,C_PARTY_SITE_ID IN NUMBER
                                     ,C_DUP_PARTY_SITE_ID IN NUMBER) RETURN NUMBER IS
    L_MERGING_PPSITE VARCHAR2(1);
    L_PPSITES NUMBER;
    STATUS VARCHAR2(1);
    INDUSTRY VARCHAR2(1);
    L_PROCESS AP_DUPLICATE_VENDORS_ALL.PROCESS%TYPE;
    L_MSG_DATA VARCHAR2(2000);
    L_MSG_COUNT NUMBER;
    L_RETURN_STATUS VARCHAR2(1);
    V_NEW_VENDOR_ID NUMBER;
    V_OLD_VENDOR_ID NUMBER;
    V_NEW_VENDOR_NAME AP_SUPPLIERS.VENDOR_NAME%TYPE;
    V_OLD_VENDOR_NAME AP_SUPPLIERS.VENDOR_NAME%TYPE;
    V_DUP_HIST_INVOICE VARCHAR2(50);
    V_INV_NUM_LENGTH NUMBER;
    V_OLD_VENDOR_NUM_LENGTH NUMBER;
    V_NEW_VENDOR_NUM_LENGTH NUMBER;
    V_OLD_VENDOR_NUM VARCHAR2(30);
    V_NEW_VENDOR_NUM VARCHAR2(30);
    V_OLD_COMB_LENGTH NUMBER;
    V_NEW_COMB_LENGTH NUMBER;
    V_DIFF NUMBER;
       CURSOR C_DUP_HISTORY IS
      SELECT
        AHI1.INVOICE_NUM
      FROM
        AP_HISTORY_INVOICES_ALL AHI1
      WHERE VENDOR_ID = V_OLD_VENDOR_ID
        AND EXISTS (
        SELECT
          'The merge-to supplier already has this invoice num'
        FROM
          AP_HISTORY_INVOICES_ALL AHI2
        WHERE AHI2.VENDOR_ID = V_NEW_VENDOR_ID
          AND AHI2.INVOICE_NUM = AHI1.INVOICE_NUM );
            pragma autonomous_transaction;

  BEGIN
    P_PRIMARY_PAY := 'N';
    IF (C_DUP_INVOICE_COUNT + C_DUP_RECURRING_COUNT > 0) THEN
      IF C_KEEP_SITE_FLAG = 'Y' THEN
        UPDATE
          AP_DUPLICATE_VENDORS_ALL
        SET
          VENDOR_SITE_ID = C_VENDOR_SITE_ID
          ,KEEP_SITE_FLAG = 'N'
        WHERE ENTRY_ID = C_ENTRY_ID;
      END IF;
      UPDATE
        AP_DUPLICATE_VENDORS_ALL
      SET
        PROCESS_FLAG = 'D'
      WHERE ENTRY_ID = C_ENTRY_ID;
    ELSE
      UPDATE
        AP_DUPLICATE_VENDORS_ALL
      SET
        LAST_UPDATE_DATE = SYSDATE
        ,LAST_UPDATED_BY = P_LAST_UPDATED_BY_T
        ,NUMBER_PAID_INVOICES = NVL(NUMBER_PAID_INVOICES
           ,0) + C_PAID_INVOICE_COUNT_RESET
        ,NUMBER_UNPAID_INVOICES = NVL(NUMBER_UNPAID_INVOICES
           ,0) + C_UNPAID_INVOICE_COUNT_RESET
      WHERE ENTRY_ID = C_ENTRY_ID;
    END IF;
    IF P_PRIMARY_PAY = 'N' THEN
      SELECT
        NVL(PRIMARY_PAY_SITE_FLAG
           ,'N')
      INTO L_MERGING_PPSITE
      FROM
        AP_SUPPLIER_SITES_ALL
      WHERE VENDOR_ID = C_DUP_VENDOR_ID
        AND VENDOR_SITE_ID = C_DUP_VENDOR_SITE_ID;
      IF ((L_MERGING_PPSITE = 'Y') AND (C_VENDOR_ID = C_DUP_VENDOR_ID)) THEN
        UPDATE
          AP_SUPPLIER_SITES_ALL
        SET
          PRIMARY_PAY_SITE_FLAG = 'Y'
        WHERE VENDOR_ID = C_VENDOR_ID
          AND VENDOR_SITE_ID = C_VENDOR_SITE_ID;
        P_PRIMARY_PAY := 'Y';
      END IF;
    END IF;
    IF NVL(C_KEEP_SITE_FLAG
       ,'N') <> 'Y' THEN
      UPDATE
        AP_SUPPLIER_CONTACTS
      SET
        LAST_UPDATE_DATE = SYSDATE
        ,LAST_UPDATED_BY = P_LAST_UPDATED_BY_T
        ,ORG_PARTY_SITE_ID = C_PARTY_SITE_ID
      WHERE ORG_PARTY_SITE_ID = C_DUP_PARTY_SITE_ID;
    END IF;
    V_NEW_VENDOR_ID := C_VENDOR_ID;
    V_OLD_VENDOR_ID := C_DUP_VENDOR_ID;
    SELECT
      PV1.VENDOR_NAME,
      PV1.SEGMENT1,
      LENGTH(PV1.SEGMENT1),
      PV2.VENDOR_NAME,
      PV2.SEGMENT1,
      LENGTH(PV2.SEGMENT1)
    INTO V_OLD_VENDOR_NAME,V_OLD_VENDOR_NUM,V_OLD_VENDOR_NUM_LENGTH,
    V_NEW_VENDOR_NAME,V_NEW_VENDOR_NUM,V_NEW_VENDOR_NUM_LENGTH
    FROM
      AP_SUPPLIERS PV1,
      AP_SUPPLIERS PV2
    WHERE PV1.VENDOR_ID = V_OLD_VENDOR_ID
      AND PV2.VENDOR_ID = V_NEW_VENDOR_ID;
    OPEN C_DUP_HISTORY;
    LOOP
      FETCH C_DUP_HISTORY
       INTO V_DUP_HIST_INVOICE;
      EXIT WHEN C_DUP_HISTORY%NOTFOUND;
      V_INV_NUM_LENGTH := LENGTH(V_DUP_HIST_INVOICE);
      V_OLD_COMB_LENGTH := V_INV_NUM_LENGTH + V_OLD_VENDOR_NUM_LENGTH + 1;
      V_NEW_COMB_LENGTH := V_INV_NUM_LENGTH + V_NEW_VENDOR_NUM_LENGTH + 1;
      IF V_INV_NUM_LENGTH = 50 THEN
        NULL;
      ELSE
        IF V_OLD_COMB_LENGTH <= 50 THEN
          UPDATE
            AP_HISTORY_INVOICES_ALL
          SET
            INVOICE_NUM = V_DUP_HIST_INVOICE || '*' || V_OLD_VENDOR_NUM
          WHERE VENDOR_ID = V_OLD_VENDOR_ID
            AND INVOICE_NUM = V_DUP_HIST_INVOICE;
        ELSE
          V_DIFF := V_OLD_COMB_LENGTH - 50;
          V_OLD_VENDOR_NUM := SUBSTR(V_OLD_VENDOR_NUM
                                    ,1
                                    ,V_OLD_VENDOR_NUM_LENGTH - V_DIFF);
          UPDATE
            AP_HISTORY_INVOICES_ALL
          SET
            INVOICE_NUM = V_DUP_HIST_INVOICE || '*' || V_OLD_VENDOR_NUM
          WHERE VENDOR_ID = V_OLD_VENDOR_ID
            AND INVOICE_NUM = V_DUP_HIST_INVOICE;
        END IF;
        IF V_OLD_COMB_LENGTH <= 50 THEN
          UPDATE
            AP_HISTORY_INVOICES_ALL
          SET
            INVOICE_NUM = V_DUP_HIST_INVOICE || '-' || V_NEW_VENDOR_NUM
          WHERE VENDOR_ID = V_NEW_VENDOR_ID
            AND INVOICE_NUM = V_DUP_HIST_INVOICE;
        ELSE
          V_DIFF := V_NEW_COMB_LENGTH - 50;
          V_NEW_VENDOR_NUM := SUBSTR(V_NEW_VENDOR_NUM
                                    ,1
                                    ,V_NEW_VENDOR_NUM_LENGTH - V_DIFF);
          UPDATE
            AP_HISTORY_INVOICES_ALL
          SET
            INVOICE_NUM = V_DUP_HIST_INVOICE || '-' || V_NEW_VENDOR_NUM
          WHERE VENDOR_ID = V_NEW_VENDOR_ID
            AND INVOICE_NUM = V_DUP_HIST_INVOICE;
        END IF;
      END IF;
    END LOOP;
    UPDATE
      AP_HISTORY_INVOICES_ALL ahi
    SET
      VENDOR_ID = V_NEW_VENDOR_ID
    WHERE VENDOR_ID = V_OLD_VENDOR_ID
      AND NOT EXISTS (
      SELECT
        'Invoice Num exists as an invoice'
      FROM
        AP_INVOICES_ALL AI
      WHERE AI.INVOICE_NUM = AHI.INVOICE_NUM
        AND AI.VENDOR_ID = V_NEW_VENDOR_ID );
    IGI_VENDOR_MERGE_GRP.MERGE_VENDOR(P_API_VERSION => 1.0
                                     ,P_INIT_MSG_LIST => NULL
                                     ,P_COMMIT => NULL
                                     ,P_VALIDATION_LEVEL => NULL
                                     ,X_RETURN_STATUS => L_RETURN_STATUS
                                     ,X_MSG_COUNT => L_MSG_COUNT
                                     ,X_MSG_DATA => L_MSG_DATA
                                     ,P_NEW_VENDOR_ID => C_VENDOR_ID
                                     ,P_NEW_VENDOR_SITE_ID => C_VENDOR_SITE_ID
                                     ,P_OLD_VENDOR_ID => C_DUP_VENDOR_ID
                                     ,P_OLD_VENDOR_SITE_ID => C_DUP_VENDOR_SITE_ID);
   commit;
   RETURN NULL;
  END C_UPDATE_DUP_VENDORFORMULA;

  FUNCTION DUPLICATE_SITES RETURN BOOLEAN IS
    L_NUMBER_OF_OTHER_SITES NUMBER;
    NEW_VENDOR_SITE_ID NUMBER;
    L_DESTINATION_VENDOR_TAX_SITES NUMBER := 0;
    L_DUPLICATE_SITE_FLAG VARCHAR2(10);
    L_DUPLICATE_TAX_SITES VARCHAR2(10);
    L_TARGET_PRIMARY_PAY_SITES NUMBER := 0;
    L_DUP_PAY_SITE_FLAG VARCHAR2(1);
    L_DUP_PRIMARY_PAY_SITES VARCHAR2(1);
    L_ORG_ID NUMBER;
    L_VENDOR_SITE_REC AP_VENDOR_PUB_PKG.R_VENDOR_SITE_REC_TYPE;
    L_RETURN_STATUS VARCHAR2(1);
    L_MSG_COUNT NUMBER;
    L_MSG_DATA VARCHAR2(500);
    L_VENDOR_SITE_ID NUMBER;
    L_PARTY_SITE_ID NUMBER;
    L_LOCATION_ID NUMBER;
    L_ERR_MSG VARCHAR2(500);
    API_ERROR EXCEPTION;
  BEGIN
    FOR c1 IN (SELECT
                 DV.DUPLICATE_VENDOR_SITE_ID,
                 DV.KEEP_SITE_FLAG,
                 DV.VENDOR_ID,
                 DV.DUPLICATE_VENDOR_ID,
                 DV.ORG_ID,
                 VS.VENDOR_SITE_CODE,
                 VS.PARTY_SITE_ID
               FROM
                 AP_DUPLICATE_VENDORS_ALL DV,
                 AP_SUPPLIER_SITES_ALL VS
               WHERE PROCESS_FLAG = 'S'
                 AND VS.VENDOR_SITE_ID = DV.DUPLICATE_VENDOR_SITE_ID
                 AND VS.ORG_ID = DV.ORG_ID) LOOP
      SELECT
        COUNT(VENDOR_SITE_ID)
      INTO L_NUMBER_OF_OTHER_SITES
      FROM
        AP_SUPPLIER_SITES_ALL
      WHERE VENDOR_ID = C1.DUPLICATE_VENDOR_ID
        AND VENDOR_SITE_ID <> C1.DUPLICATE_VENDOR_SITE_ID
        AND NVL(INACTIVE_DATE
         ,SYSDATE + 1) > sysdate;
      IF L_NUMBER_OF_OTHER_SITES = 0 THEN
        UPDATE
          AP_SUPPLIERS
        SET
          END_DATE_ACTIVE = SYSDATE
          ,LAST_UPDATE_DATE = SYSDATE
          ,LAST_UPDATED_BY = P_LAST_UPDATED_BY_T
        WHERE VENDOR_ID = C1.DUPLICATE_VENDOR_ID;
      END IF;
      IF C1.KEEP_SITE_FLAG = 'Y' THEN
        SELECT
          PO_VENDOR_SITES_S.NEXTVAL
        INTO NEW_VENDOR_SITE_ID
        FROM
          SYS.DUAL;
        SELECT
          COUNT(*)
        INTO L_TARGET_PRIMARY_PAY_SITES
        FROM
          AP_SUPPLIER_SITES_ALL PVS
        WHERE PVS.VENDOR_ID = C1.VENDOR_ID
          AND PVS.ORG_ID = C1.ORG_ID
          AND NVL(PRIMARY_PAY_SITE_FLAG
           ,'N') = 'Y'
          AND NVL(INACTIVE_DATE
           ,SYSDATE + 1) > sysdate;
        SELECT
          PVS.PRIMARY_PAY_SITE_FLAG
        INTO L_DUP_PAY_SITE_FLAG
        FROM
          AP_SUPPLIER_SITES_ALL PVS
        WHERE PVS.VENDOR_SITE_ID = C1.DUPLICATE_VENDOR_SITE_ID;
        IF L_TARGET_PRIMARY_PAY_SITES > 0 AND L_DUP_PAY_SITE_FLAG = 'Y' THEN
          L_DUP_PRIMARY_PAY_SITES := 'Y';
        ELSE
          L_DUP_PRIMARY_PAY_SITES := 'N';
        END IF;
        SELECT
          COUNT(*)
        INTO L_DESTINATION_VENDOR_TAX_SITES
        FROM
          AP_SUPPLIER_SITES_ALL PVS
        WHERE PVS.VENDOR_ID = C1.VENDOR_ID
          AND PVS.ORG_ID = C1.ORG_ID
          AND NVL(TAX_REPORTING_SITE_FLAG
           ,'N') = 'Y'
          AND NVL(INACTIVE_DATE
           ,SYSDATE + 1) > sysdate;
        SELECT
          PVS.TAX_REPORTING_SITE_FLAG
        INTO L_DUPLICATE_SITE_FLAG
        FROM
          AP_SUPPLIER_SITES_ALL PVS
        WHERE PVS.VENDOR_SITE_ID = C1.DUPLICATE_VENDOR_SITE_ID;
        IF L_DESTINATION_VENDOR_TAX_SITES > 0 AND L_DUPLICATE_SITE_FLAG = 'Y' THEN
          L_DUPLICATE_TAX_SITES := 'Y';
        ELSE
          L_DUPLICATE_TAX_SITES := 'N';
        END IF;
        SELECT
          AREA_CODE,
          PHONE,
          CUSTOMER_NUM,
          SHIP_TO_LOCATION_ID,
          BILL_TO_LOCATION_ID,
          SHIP_VIA_LOOKUP_CODE,
          FREIGHT_TERMS_LOOKUP_CODE,
          FOB_LOOKUP_CODE,
          INACTIVE_DATE,
          FAX,
          FAX_AREA_CODE,
          TELEX,
          TERMS_DATE_BASIS,
          DISTRIBUTION_SET_ID,
          ACCTS_PAY_CODE_COMBINATION_ID,
          PREPAY_CODE_COMBINATION_ID,
          PAY_GROUP_LOOKUP_CODE,
          PAYMENT_PRIORITY,
          TERMS_ID,
          INVOICE_AMOUNT_LIMIT,
          PAY_DATE_BASIS_LOOKUP_CODE,
          ALWAYS_TAKE_DISC_FLAG,
          INVOICE_CURRENCY_CODE,
          PAYMENT_CURRENCY_CODE,
          VENDOR_SITE_ID,
          SYSDATE,
          P_LAST_UPDATED_BY_T,
          C1.VENDOR_ID,
          VENDOR_SITE_CODE,
          VENDOR_SITE_CODE_ALT,
          PURCHASING_SITE_FLAG,
          RFQ_ONLY_SITE_FLAG,
          PAY_SITE_FLAG,
          ATTENTION_AR_FLAG,
          HOLD_ALL_PAYMENTS_FLAG,
          HOLD_FUTURE_PAYMENTS_FLAG,
          HOLD_REASON,
          HOLD_UNMATCHED_INVOICES_FLAG,
          DECODE(L_DUPLICATE_TAX_SITES
                ,'Y'
                ,'N'
                ,TAX_REPORTING_SITE_FLAG),
          ATTRIBUTE_CATEGORY,
          ATTRIBUTE1,
          ATTRIBUTE2,
          ATTRIBUTE3,
          ATTRIBUTE4,
          ATTRIBUTE5,
          ATTRIBUTE6,
          ATTRIBUTE7,
          ATTRIBUTE8,
          ATTRIBUTE9,
          ATTRIBUTE10,
          ATTRIBUTE11,
          ATTRIBUTE12,
          ATTRIBUTE13,
          ATTRIBUTE14,
          ATTRIBUTE15,
          VALIDATION_NUMBER,
          EXCLUDE_FREIGHT_FROM_DISCOUNT,
          BANK_CHARGE_BEARER,
          ORG_ID,
          CHECK_DIGITS,
          ALLOW_AWT_FLAG,
          AWT_GROUP_ID,
          DEFAULT_PAY_SITE_ID,
          PAY_ON_CODE,
          PAY_ON_RECEIPT_SUMMARY_CODE,
          GLOBAL_ATTRIBUTE_CATEGORY,
          GLOBAL_ATTRIBUTE1,
          GLOBAL_ATTRIBUTE2,
          GLOBAL_ATTRIBUTE3,
          GLOBAL_ATTRIBUTE4,
          GLOBAL_ATTRIBUTE5,
          GLOBAL_ATTRIBUTE6,
          GLOBAL_ATTRIBUTE7,
          GLOBAL_ATTRIBUTE8,
          GLOBAL_ATTRIBUTE9,
          GLOBAL_ATTRIBUTE10,
          GLOBAL_ATTRIBUTE11,
          GLOBAL_ATTRIBUTE12,
          GLOBAL_ATTRIBUTE13,
          GLOBAL_ATTRIBUTE14,
          GLOBAL_ATTRIBUTE15,
          GLOBAL_ATTRIBUTE16,
          GLOBAL_ATTRIBUTE17,
          GLOBAL_ATTRIBUTE18,
          GLOBAL_ATTRIBUTE19,
          GLOBAL_ATTRIBUTE20,
          TP_HEADER_ID,
          ECE_TP_LOCATION_CODE,
          PCARD_SITE_FLAG,
          MATCH_OPTION,
          COUNTRY_OF_ORIGIN_CODE,
          FUTURE_DATED_PAYMENT_CCID,
          CREATE_DEBIT_MEMO_FLAG,
          SUPPLIER_NOTIF_METHOD,
          EMAIL_ADDRESS,
          DECODE(L_DUP_PRIMARY_PAY_SITES
                ,'Y'
                ,'N'
                ,PRIMARY_PAY_SITE_FLAG),
          SHIPPING_CONTROL,
          SELLING_COMPANY_IDENTIFIER,
          GAPLESS_INV_NUM_FLAG,
          LOCATION_ID,
          NULL,
          DUNS_NUMBER,
          ADDRESS_STYLE,
          LANGUAGE,
          PROVINCE,
          COUNTRY,
          ADDRESS_LINE1,
          ADDRESS_LINE2,
          ADDRESS_LINE3,
          ADDRESS_LINE4,
          ADDRESS_LINES_ALT,
          COUNTY,
          CITY,
          STATE,
          ZIP,
          TOLERANCE_ID
        INTO L_VENDOR_SITE_REC.AREA_CODE,L_VENDOR_SITE_REC.PHONE,L_VENDOR_SITE_REC.CUSTOMER_NUM,
        L_VENDOR_SITE_REC.SHIP_TO_LOCATION_ID,L_VENDOR_SITE_REC.BILL_TO_LOCATION_ID,
        L_VENDOR_SITE_REC.SHIP_VIA_LOOKUP_CODE,L_VENDOR_SITE_REC.FREIGHT_TERMS_LOOKUP_CODE,
        L_VENDOR_SITE_REC.FOB_LOOKUP_CODE,L_VENDOR_SITE_REC.INACTIVE_DATE,L_VENDOR_SITE_REC.FAX,
        L_VENDOR_SITE_REC.FAX_AREA_CODE,L_VENDOR_SITE_REC.TELEX,L_VENDOR_SITE_REC.TERMS_DATE_BASIS,
        L_VENDOR_SITE_REC.DISTRIBUTION_SET_ID,L_VENDOR_SITE_REC.ACCTS_PAY_CODE_COMBINATION_ID,
        L_VENDOR_SITE_REC.PREPAY_CODE_COMBINATION_ID,L_VENDOR_SITE_REC.PAY_GROUP_LOOKUP_CODE,
        L_VENDOR_SITE_REC.PAYMENT_PRIORITY,L_VENDOR_SITE_REC.TERMS_ID,L_VENDOR_SITE_REC.INVOICE_AMOUNT_LIMIT,
        L_VENDOR_SITE_REC.PAY_DATE_BASIS_LOOKUP_CODE,L_VENDOR_SITE_REC.ALWAYS_TAKE_DISC_FLAG,
        L_VENDOR_SITE_REC.INVOICE_CURRENCY_CODE,L_VENDOR_SITE_REC.PAYMENT_CURRENCY_CODE,L_VENDOR_SITE_REC.VENDOR_SITE_ID,
        L_VENDOR_SITE_REC.LAST_UPDATE_DATE,L_VENDOR_SITE_REC.LAST_UPDATED_BY,L_VENDOR_SITE_REC.VENDOR_ID,
        L_VENDOR_SITE_REC.VENDOR_SITE_CODE,L_VENDOR_SITE_REC.VENDOR_SITE_CODE_ALT,L_VENDOR_SITE_REC.PURCHASING_SITE_FLAG,
        L_VENDOR_SITE_REC.RFQ_ONLY_SITE_FLAG,L_VENDOR_SITE_REC.PAY_SITE_FLAG,L_VENDOR_SITE_REC.ATTENTION_AR_FLAG,
        L_VENDOR_SITE_REC.HOLD_ALL_PAYMENTS_FLAG,L_VENDOR_SITE_REC.HOLD_FUTURE_PAYMENTS_FLAG,L_VENDOR_SITE_REC.HOLD_REASON,
        L_VENDOR_SITE_REC.HOLD_UNMATCHED_INVOICES_FLAG,L_VENDOR_SITE_REC.TAX_REPORTING_SITE_FLAG,
        L_VENDOR_SITE_REC.ATTRIBUTE_CATEGORY,L_VENDOR_SITE_REC.ATTRIBUTE1,L_VENDOR_SITE_REC.ATTRIBUTE2,
        L_VENDOR_SITE_REC.ATTRIBUTE3,L_VENDOR_SITE_REC.ATTRIBUTE4,L_VENDOR_SITE_REC.ATTRIBUTE5,L_VENDOR_SITE_REC.ATTRIBUTE6,
        L_VENDOR_SITE_REC.ATTRIBUTE7,L_VENDOR_SITE_REC.ATTRIBUTE8,L_VENDOR_SITE_REC.ATTRIBUTE9,L_VENDOR_SITE_REC.ATTRIBUTE10,
        L_VENDOR_SITE_REC.ATTRIBUTE11,L_VENDOR_SITE_REC.ATTRIBUTE12,L_VENDOR_SITE_REC.ATTRIBUTE13,
        L_VENDOR_SITE_REC.ATTRIBUTE14,L_VENDOR_SITE_REC.ATTRIBUTE15,L_VENDOR_SITE_REC.VALIDATION_NUMBER,
        L_VENDOR_SITE_REC.EXCLUDE_FREIGHT_FROM_DISCOUNT,L_VENDOR_SITE_REC.BANK_CHARGE_BEARER,L_VENDOR_SITE_REC.ORG_ID,
        L_VENDOR_SITE_REC.CHECK_DIGITS,L_VENDOR_SITE_REC.ALLOW_AWT_FLAG,L_VENDOR_SITE_REC.AWT_GROUP_ID,
        L_VENDOR_SITE_REC.DEFAULT_PAY_SITE_ID,L_VENDOR_SITE_REC.PAY_ON_CODE,L_VENDOR_SITE_REC.PAY_ON_RECEIPT_SUMMARY_CODE,
        L_VENDOR_SITE_REC.GLOBAL_ATTRIBUTE_CATEGORY
        ,L_VENDOR_SITE_REC.GLOBAL_ATTRIBUTE1,L_VENDOR_SITE_REC.GLOBAL_ATTRIBUTE2,
        L_VENDOR_SITE_REC.GLOBAL_ATTRIBUTE3,L_VENDOR_SITE_REC.GLOBAL_ATTRIBUTE4,
        L_VENDOR_SITE_REC.GLOBAL_ATTRIBUTE5,L_VENDOR_SITE_REC.GLOBAL_ATTRIBUTE6,
        L_VENDOR_SITE_REC.GLOBAL_ATTRIBUTE7,L_VENDOR_SITE_REC.GLOBAL_ATTRIBUTE8,
        L_VENDOR_SITE_REC.GLOBAL_ATTRIBUTE9,L_VENDOR_SITE_REC.GLOBAL_ATTRIBUTE10,L_VENDOR_SITE_REC.GLOBAL_ATTRIBUTE11,
        L_VENDOR_SITE_REC.GLOBAL_ATTRIBUTE12,L_VENDOR_SITE_REC.GLOBAL_ATTRIBUTE13,L_VENDOR_SITE_REC.GLOBAL_ATTRIBUTE14,
        L_VENDOR_SITE_REC.GLOBAL_ATTRIBUTE15,L_VENDOR_SITE_REC.GLOBAL_ATTRIBUTE16,L_VENDOR_SITE_REC.GLOBAL_ATTRIBUTE17,
        L_VENDOR_SITE_REC.GLOBAL_ATTRIBUTE18,L_VENDOR_SITE_REC.GLOBAL_ATTRIBUTE19,L_VENDOR_SITE_REC.GLOBAL_ATTRIBUTE20,
        L_VENDOR_SITE_REC.TP_HEADER_ID,L_VENDOR_SITE_REC.ECE_TP_LOCATION_CODE,L_VENDOR_SITE_REC.PCARD_SITE_FLAG,
        L_VENDOR_SITE_REC.MATCH_OPTION,L_VENDOR_SITE_REC.COUNTRY_OF_ORIGIN_CODE,L_VENDOR_SITE_REC.FUTURE_DATED_PAYMENT_CCID,
        L_VENDOR_SITE_REC.CREATE_DEBIT_MEMO_FLAG,L_VENDOR_SITE_REC.SUPPLIER_NOTIF_METHOD,L_VENDOR_SITE_REC.EMAIL_ADDRESS,
        L_VENDOR_SITE_REC.PRIMARY_PAY_SITE_FLAG,L_VENDOR_SITE_REC.SHIPPING_CONTROL,L_VENDOR_SITE_REC.SELLING_COMPANY_IDENTIFIER,
        L_VENDOR_SITE_REC.GAPLESS_INV_NUM_FLAG,L_VENDOR_SITE_REC.LOCATION_ID,L_VENDOR_SITE_REC.PARTY_SITE_ID,
        L_VENDOR_SITE_REC.DUNS_NUMBER,L_VENDOR_SITE_REC.ADDRESS_STYLE,L_VENDOR_SITE_REC.LANGUAGE,L_VENDOR_SITE_REC.PROVINCE,
        L_VENDOR_SITE_REC.COUNTRY,L_VENDOR_SITE_REC.ADDRESS_LINE1,L_VENDOR_SITE_REC.ADDRESS_LINE2,
        L_VENDOR_SITE_REC.ADDRESS_LINE3,L_VENDOR_SITE_REC.ADDRESS_LINE4,L_VENDOR_SITE_REC.ADDRESS_LINES_ALT,
        L_VENDOR_SITE_REC.COUNTY,L_VENDOR_SITE_REC.CITY,L_VENDOR_SITE_REC.STATE,L_VENDOR_SITE_REC.ZIP,
        L_VENDOR_SITE_REC.TOLERANCE_ID
        FROM
          AP_SUPPLIER_SITES_ALL
        WHERE VENDOR_ID = C1.DUPLICATE_VENDOR_ID
          AND VENDOR_SITE_ID = C1.DUPLICATE_VENDOR_SITE_ID
          AND NOT EXISTS (
          SELECT
            null
          FROM
            AP_SUPPLIER_SITES_ALL
          WHERE VENDOR_ID = C1.VENDOR_ID
            AND VENDOR_SITE_ID = C1.DUPLICATE_VENDOR_SITE_ID );
        AP_VENDOR_PUB_PKG.CREATE_VENDOR_SITE(P_API_VERSION => 1.0
                                            ,P_INIT_MSG_LIST => 'F'
                                            ,P_COMMIT => 'F'
                                            ,P_VALIDATION_LEVEL => 100
                                            ,X_RETURN_STATUS => L_RETURN_STATUS
                                            ,X_MSG_COUNT => L_MSG_COUNT
                                            ,X_MSG_DATA => L_MSG_DATA
                                            ,P_VENDOR_SITE_REC => L_VENDOR_SITE_REC
                                            ,X_VENDOR_SITE_ID => L_VENDOR_SITE_ID
                                            ,X_PARTY_SITE_ID => L_PARTY_SITE_ID
                                            ,X_LOCATION_ID => L_LOCATION_ID);
        IF L_RETURN_STATUS <> 'S' THEN
          IF L_MSG_COUNT > 0 THEN
            FOR i IN 1 .. L_MSG_COUNT LOOP
              L_MSG_DATA := FND_MSG_PUB.GET(-2
                                           ,'T');
              L_ERR_MSG := FND_MESSAGE.GET;
              FND_FILE.PUT_LINE(1
                               ,L_ERR_MSG);
            END LOOP;
          END IF;
          RAISE API_ERROR;
        END IF;
      END IF;
      UPDATE
        AP_SUPPLIER_CONTACTS
      SET
        ORG_PARTY_SITE_ID = L_PARTY_SITE_ID
      WHERE ORG_PARTY_SITE_ID = C1.PARTY_SITE_ID;
      UPDATE
        AP_SUPPLIER_SITES_ALL
      SET
        INACTIVE_DATE = SYSDATE
        ,LAST_UPDATED_BY = P_LAST_UPDATED_BY_T
        ,LAST_UPDATE_DATE = SYSDATE
      WHERE VENDOR_SITE_ID = C1.DUPLICATE_VENDOR_SITE_ID;
    END LOOP;
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      APP_EXCEPTION.RAISE_EXCEPTION;
      RETURN (FALSE);
  END DUPLICATE_SITES;

  FUNCTION C_VENDOR_SITE_ID_POFORMULA(C_ORG_ID_PO IN NUMBER
                                     ,C_KEEP_SITE_FLAG_PO IN VARCHAR2
                                     ,C_VENDOR_ID_PO IN NUMBER
                                     ,C_VENDOR_SITE_CODE_PO IN VARCHAR2
                                     ,C_OLD_VENDOR_SITE_ID_PO IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      L_VENDOR_SITE_ID NUMBER;
    BEGIN
      MO_GLOBAL.SET_POLICY_CONTEXT('S'
                                  ,C_ORG_ID_PO);
      IF C_KEEP_SITE_FLAG_PO = 'Y' THEN
        SELECT
          VENDOR_SITE_ID
        INTO L_VENDOR_SITE_ID
        FROM
          AP_SUPPLIER_SITES_ALL
        WHERE VENDOR_ID = C_VENDOR_ID_PO
          AND VENDOR_SITE_CODE = C_VENDOR_SITE_CODE_PO
          AND ORG_ID = C_ORG_ID_PO;
        RETURN (L_VENDOR_SITE_ID);
      ELSE
        RETURN (C_OLD_VENDOR_SITE_ID_PO);
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        RETURN (C_OLD_VENDOR_SITE_ID_PO);
    END;
    RETURN NULL;
  END C_VENDOR_SITE_ID_POFORMULA;

  FUNCTION C_MODIFY_PO_TABLESFORMULA(C_DUP_VENDOR_ID_PO IN NUMBER
                                    ,C_KEEP_SITE_FLAG_PO IN VARCHAR2
                                    ,C_PARTY_SITE_ID_PO IN NUMBER
                                    ,C_DUP_PARTY_SITE_ID_PO IN NUMBER
                                    ,C_DUP_VENDOR_SITE_ID_PO IN NUMBER
                                    ,C_VENDOR_ID_PO IN NUMBER
                                    ,C_VENDOR_SITE_ID_PO IN NUMBER
                                    ,C_PO_COUNT IN NUMBER
                                    ,C_ENTRY_ID_PO IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      CURSOR MERGE_AUTOSRC_DOCS IS
        SELECT
          DISTINCT
          PAD.AUTOSOURCE_RULE_ID,
          PAD.SEQUENCE_NUM,
          PAD.DOCUMENT_LINE_ID
        FROM
          PO_AUTOSOURCE_DOCUMENTS PAD
        WHERE PAD.VENDOR_ID = C_DUP_VENDOR_ID_PO;
      L_MAX_SEQ_NUM NUMBER;
      L_NEW_SEQ_NUM NUMBER;
      L_SEQ_NUM NUMBER;
      L_RULE_ID NUMBER;
      L_DOC_LINE_ID NUMBER;
      STATUS VARCHAR2(1);
      INDUSTRY VARCHAR2(1);
      L_MERGING_PPSITE VARCHAR2(1);
      L_PPSITES NUMBER;
      L_RETURN_STATUS VARCHAR2(1);
      L_MSG_COUNT NUMBER;
      L_MSG_DATA VARCHAR2(500);
      API_ERROR EXCEPTION;
      L_ERR_MSG VARCHAR2(500);
    BEGIN
      P_PRIMARY_PAY := 'N';
      IF NVL(C_KEEP_SITE_FLAG_PO
         ,'N') <> 'Y' THEN
        UPDATE
          AP_SUPPLIER_CONTACTS
        SET
          LAST_UPDATE_DATE = SYSDATE
          ,LAST_UPDATED_BY = P_LAST_UPDATED_BY_T
          ,ORG_PARTY_SITE_ID = C_PARTY_SITE_ID_PO
        WHERE ORG_PARTY_SITE_ID = C_DUP_PARTY_SITE_ID_PO;
      END IF;
      EXECUTE IMMEDIATE
        'UPDATE ap_history_invoices_all ahi
             SET vendor_id = :C_VENDOR_ID_PO
             WHERE vendor_id = :C_DUP_VENDOR_ID_PO
             and not exists (select null
                          from ap_invoices ai
                          where ai.invoice_num = ahi.invoice_num
                          and ai.vendor_id = :C_VENDOR_ID)';
      IF P_PO_INSTALLED_FLAG_T = 'Y' THEN
        PO_AP_MERGE_GRP.UPDATE_ORG_ASSIGNMENTS(P_API_VERSION => 1.0
                                              ,X_RETURN_STATUS => L_RETURN_STATUS
                                              ,P_FROM_VENDOR_ID => C_DUP_VENDOR_ID_PO
                                              ,P_FROM_SITE_ID => C_DUP_VENDOR_SITE_ID_PO
                                              ,P_TO_VENDOR_ID => C_VENDOR_ID_PO
                                              ,P_TO_SITE_ID => C_VENDOR_SITE_ID_PO);
      END IF;
      IF P_CHV_INSTALLED_FLAG = 'Y' THEN
        CHV_VENDORMERGE_GRP.MERGE_VENDOR(P_API_VERSION => 1.0
                                        ,P_INIT_MSG_LIST => 'F'
                                        ,P_COMMIT => 'F'
                                        ,P_VALIDATION_LEVEL => 100
                                        ,X_RETURN_STATUS => L_RETURN_STATUS
                                        ,X_MSG_COUNT => L_MSG_COUNT
                                        ,X_MSG_DATA => L_MSG_DATA
                                        ,P_VENDOR_ID => C_VENDOR_ID_PO
                                        ,P_VENDOR_SITE_ID => C_VENDOR_SITE_ID_PO
                                        ,P_DUP_VENDOR_ID => C_DUP_VENDOR_ID_PO
                                        ,P_DUP_VENDOR_SITE_ID => C_DUP_VENDOR_SITE_ID_PO);
        IF L_RETURN_STATUS <> 'S' THEN
          IF L_MSG_COUNT > 0 THEN
            FOR i IN 1 .. L_MSG_COUNT LOOP
              L_MSG_DATA := FND_MSG_PUB.GET(-2
                                           ,'T');
              L_ERR_MSG := FND_MESSAGE.GET;
              FND_FILE.PUT_LINE(1
                               ,L_ERR_MSG);
            END LOOP;
          END IF;
          RAISE API_ERROR;
        END IF;
      END IF;
      IGI_VENDOR_MERGE_GRP.MERGE_VENDOR(P_API_VERSION => 1.0
                                       ,P_INIT_MSG_LIST => NULL
                                       ,P_COMMIT => NULL
                                       ,P_VALIDATION_LEVEL => NULL
                                       ,X_RETURN_STATUS => L_RETURN_STATUS
                                       ,X_MSG_COUNT => L_MSG_COUNT
                                       ,X_MSG_DATA => L_MSG_DATA
                                       ,P_NEW_VENDOR_ID => C_VENDOR_ID_PO
                                       ,P_NEW_VENDOR_SITE_ID => C_VENDOR_SITE_ID_PO
                                       ,P_OLD_VENDOR_ID => C_DUP_VENDOR_ID_PO
                                       ,P_OLD_VENDOR_SITE_ID => C_DUP_VENDOR_SITE_ID_PO);
      UPDATE
        AP_DUPLICATE_VENDORS_ALL
      SET
        LAST_UPDATE_DATE = SYSDATE
        ,LAST_UPDATED_BY = P_LAST_UPDATED_BY_T
        ,NUMBER_PO_HEADERS_CHANGED = NVL(NUMBER_PO_HEADERS_CHANGED
           ,0) + C_PO_COUNT
      WHERE ENTRY_ID = C_ENTRY_ID_PO;
      IF P_PRIMARY_PAY = 'N' THEN
        SELECT
          NVL(PRIMARY_PAY_SITE_FLAG
             ,'N')
        INTO L_MERGING_PPSITE
        FROM
          AP_SUPPLIER_SITES_ALL
        WHERE VENDOR_ID = C_DUP_VENDOR_ID_PO
          AND VENDOR_SITE_ID = C_DUP_VENDOR_SITE_ID_PO;
        IF ((L_MERGING_PPSITE = 'Y') AND (C_VENDOR_ID_PO = C_DUP_VENDOR_ID_PO)) THEN
          UPDATE
            AP_SUPPLIER_SITES_ALL
          SET
            PRIMARY_PAY_SITE_FLAG = 'Y'
          WHERE VENDOR_ID = C_VENDOR_ID_PO
            AND VENDOR_SITE_ID = C_VENDOR_SITE_ID_PO;
          P_PRIMARY_PAY := 'Y';
        END IF;
      END IF;
    END;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      APP_EXCEPTION.RAISE_EXCEPTION;
      RETURN (NULL);
  END C_MODIFY_PO_TABLESFORMULA;

  FUNCTION C_MODIFY_RFQ_VENDORSFORMULA(C_VENDOR_ID_PO IN NUMBER
                                      ,C_VENDOR_SITE_ID_PO IN NUMBER
                                      ,C_PO_HEADER_ID IN NUMBER) RETURN NUMBER IS
  BEGIN
    BEGIN
      UPDATE
        PO_HEADERS_ALL
      SET
        VENDOR_ID = C_VENDOR_ID_PO
        ,VENDOR_SITE_ID = C_VENDOR_SITE_ID_PO
        ,LAST_UPDATED_BY = P_LAST_UPDATED_BY_T
        ,LAST_UPDATE_DATE = SYSDATE
      WHERE PO_HEADER_ID = C_PO_HEADER_ID;
      IF P_PO_INSTALLED_FLAG_T = 'Y' THEN
        EXECUTE IMMEDIATE
          'UPDATE po_rfq_vendors
          		SET    vendor_id = :C_VENDOR_ID_PO,
                 	 	       vendor_site_id = :C_VENDOR_SITE_ID_PO
          		WHERE  vendor_id = :C_DUP_VENDOR_ID_PO
          		AND    po_header_id = :C_PO_HEADER_ID
          		AND    not exists
          			(select vendor_id
          			   from po_rfq_vendors
          			  where vendor_id = :C_VENDOR_ID_PO
          			    and vendor_site_id = :C_VENDOR_SITE_ID_PO
          			    and po_header_id = :C_PO_HEADER_ID)';
        EXECUTE IMMEDIATE
          'DELETE from po_rfq_vendors prv
          		WHERE  vendor_id = :C_DUP_VENDOR_ID_PO
          		AND    vendor_site_id = :C_DUP_VENDOR_SITE_ID_PO
          		AND    po_header_id = :C_PO_HEADER_ID';
      END IF;
    END;
    RETURN NULL;
  END C_MODIFY_RFQ_VENDORSFORMULA;

  FUNCTION G_DUPLICATE_VENDORS_POGROUPFIL RETURN BOOLEAN IS
  BEGIN
    BEGIN
      RETURN (TRUE);
    END;
    RETURN (TRUE);
  END G_DUPLICATE_VENDORS_POGROUPFIL;

  FUNCTION G_DUPLICATE_VENDORSGROUPFILTER RETURN BOOLEAN IS
  BEGIN
    BEGIN
      RETURN (TRUE);
    END;
    RETURN (TRUE);
  END G_DUPLICATE_VENDORSGROUPFILTER;

  FUNCTION C_CURRENCY_CODEFORMULA(C_INVOICE_CURRENCY_CODE IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    RETURN (C_INVOICE_CURRENCY_CODE);
  END C_CURRENCY_CODEFORMULA;

  FUNCTION C_INVOICE_COUNTFORMULA(C_DUP_INVOICE_COUNT IN NUMBER
                                 ,C_NON_DUP_INVOICE_COUNT IN NUMBER
                                 ,C_DUP_RECURRING_COUNT IN NUMBER
                                 ,C_RECURRING_COUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      L_INVOICE_COUNT NUMBER := 0;
    BEGIN
      L_INVOICE_COUNT := C_DUP_INVOICE_COUNT + C_NON_DUP_INVOICE_COUNT + C_DUP_RECURRING_COUNT + C_RECURRING_COUNT;
      RETURN (L_INVOICE_COUNT);
    END;
    RETURN NULL;
  END C_INVOICE_COUNTFORMULA;

  FUNCTION DUPLICATE_TAX_SITES RETURN BOOLEAN IS
    L_DUP_INACTIVE_DATE DATE;
    L_DUP_TAX_FLAG VARCHAR2(1);
    L_COUNT NUMBER;
  BEGIN
    FOR c1 IN (SELECT
                 VENDOR_ID,
                 DUPLICATE_VENDOR_ID,
                 DUPLICATE_VENDOR_SITE_ID,
                 ORG_ID
               FROM
                 AP_DUPLICATE_VENDORS
               WHERE PROCESS_FLAG = 'S') LOOP
      SELECT
        TAX_REPORTING_SITE_FLAG,
        INACTIVE_DATE
      INTO L_DUP_TAX_FLAG,L_DUP_INACTIVE_DATE
      FROM
        AP_SUPPLIER_SITES_ALL
      WHERE VENDOR_ID = C1.DUPLICATE_VENDOR_ID
        AND VENDOR_SITE_ID = C1.DUPLICATE_VENDOR_SITE_ID;
      IF L_DUP_TAX_FLAG = 'Y' AND L_DUP_INACTIVE_DATE IS NULL THEN
        SELECT
          count(*)
        INTO L_COUNT
        FROM
          AP_SUPPLIER_SITES_ALL
        WHERE TAX_REPORTING_SITE_FLAG = 'Y'
          AND VENDOR_ID = C1.VENDOR_ID
          AND ORG_ID = C1.ORG_ID
          AND INACTIVE_DATE is not null;
        IF L_COUNT > 0 THEN
          UPDATE
            AP_SUPPLIER_SITES_ALL
          SET
            TAX_REPORTING_SITE_FLAG = 'N'
          WHERE VENDOR_ID = C1.VENDOR_ID
            AND ORG_ID = C1.ORG_ID
            AND INACTIVE_DATE is not null;
        END IF;
      END IF;
    END LOOP;
    RETURN (TRUE);
  END DUPLICATE_TAX_SITES;

  FUNCTION C_OPERATING_UNITFORMULA(C_ORG_ID IN NUMBER) RETURN CHAR IS
  BEGIN
    DECLARE
      L_OPERATING_UNIT VARCHAR2(4000);
    BEGIN
      L_OPERATING_UNIT := MO_GLOBAL.GET_OU_NAME(C_ORG_ID);
      RETURN (L_OPERATING_UNIT);
    EXCEPTION
      WHEN OTHERS THEN
        RETURN NULL;
    END;
    RETURN NULL;
  END C_OPERATING_UNITFORMULA;

  FUNCTION C_OPERATING_UNITPOFORMULA(C_ORG_ID_PO IN NUMBER) RETURN CHAR IS
  BEGIN
    DECLARE
      L_OPERATING_UNIT VARCHAR2(4000);
    BEGIN
      L_OPERATING_UNIT := MO_GLOBAL.GET_OU_NAME(C_ORG_ID_PO);
      RETURN (L_OPERATING_UNIT);
    EXCEPTION
      WHEN OTHERS THEN
        RETURN NULL;
    END;
    RETURN NULL;
  END C_OPERATING_UNITPOFORMULA;

  FUNCTION C_BASE_CURRENCY_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BASE_CURRENCY_CODE;
  END C_BASE_CURRENCY_CODE_P;

  FUNCTION C_BASE_PRECISION_P RETURN NUMBER IS
  BEGIN
    RETURN C_BASE_PRECISION;
  END C_BASE_PRECISION_P;

  FUNCTION C_BASE_MIN_ACCT_UNIT_P RETURN NUMBER IS
  BEGIN
    RETURN C_BASE_MIN_ACCT_UNIT;
  END C_BASE_MIN_ACCT_UNIT_P;

  FUNCTION C_BASE_DESCRIPTION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BASE_DESCRIPTION;
  END C_BASE_DESCRIPTION_P;

  FUNCTION C_COMPANY_NAME_HEADER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COMPANY_NAME_HEADER;
  END C_COMPANY_NAME_HEADER_P;

  FUNCTION C_REPORT_START_DATE_P RETURN DATE IS
  BEGIN
    RETURN C_REPORT_START_DATE;
  END C_REPORT_START_DATE_P;

  FUNCTION C_NLS_YES_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_YES;
  END C_NLS_YES_P;

  FUNCTION C_NLS_NO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_NO;
  END C_NLS_NO_P;

  FUNCTION C_NLS_ALL_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_ALL;
  END C_NLS_ALL_P;

  FUNCTION C_NLS_NO_DATA_EXISTS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_NO_DATA_EXISTS;
  END C_NLS_NO_DATA_EXISTS_P;

  FUNCTION C_REPORT_RUN_TIME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_REPORT_RUN_TIME;
  END C_REPORT_RUN_TIME_P;

  FUNCTION C_CHART_OF_ACCOUNTS_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_CHART_OF_ACCOUNTS_ID;
  END C_CHART_OF_ACCOUNTS_ID_P;

  FUNCTION C_NLS_END_OF_REPORT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_END_OF_REPORT;
  END C_NLS_END_OF_REPORT_P;

END AP_APXINUPD_XMLP_PKG;



/
