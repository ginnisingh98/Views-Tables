--------------------------------------------------------
--  DDL for Package Body JL_JLBRRCAD_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JL_JLBRRCAD_XMLP_PKG" AS
/* $Header: JLBRRCADB.pls 120.1 2007/12/25 16:41:28 dwkrishn noship $ */
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    EXCEPTION
      WHEN OTHERS THEN
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    INIT_FAILURE EXCEPTION;
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    BEGIN
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    EXCEPTION
    /*  WHEN SRW.UNKNOWN_USER_EXIT OTHERS THEN
        SRW.MESSAGE(01
                   ,'FND SRWINIT user exit is unknown.') NULL;
        RAISE;*/
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(02
                   ,'FND SRWINIT user exit failed.')*/NULL;
        RAISE;
    END;
    BEGIN
      BEGIN
        H_CALENDAR := JL_ZZ_SYS_OPTIONS_PKG.GET_CALENDAR(MO_GLOBAL.GET_CURRENT_ORG_ID);
      EXCEPTION
        WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
          /*SRW.MESSAGE(20
                     ,'Failed in Profile Options Init.')*/NULL;
          RAISE;
      END;
      BEGIN
        H_NONWORKDAY := JL_ZZ_SYS_OPTIONS_PKG.GET_PAYMENT_ACTION_AR(MO_GLOBAL.GET_CURRENT_ORG_ID);
      EXCEPTION
        WHEN OTHERS THEN
          /*SRW.MESSAGE(20
                     ,'Failed in Profile Options Init.')*/NULL;
          RAISE;
      END;
      GET_BASE_CURR_DATA;
      GET_COMPANY_NAME;
      IF (SET_P_WHERE <> TRUE) THEN
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      END IF;
      RETURN (TRUE);
      RETURN NULL;
    EXCEPTION
      WHEN OTHERS THEN
        /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
        RETURN (FALSE);
    END;
  END BEFOREREPORT;

  PROCEDURE GET_BASE_CURR_DATA IS
    BASE_CURR FND_CURRENCIES_VL.CURRENCY_CODE%TYPE;
    PREC FND_CURRENCIES_VL.PRECISION%TYPE;
    MIN_AU FND_CURRENCIES_VL.MINIMUM_ACCOUNTABLE_UNIT%TYPE;
    DESCR FND_CURRENCIES_VL.DESCRIPTION%TYPE;
    ORG_NAME GL_SETS_OF_BOOKS.NAME%TYPE;
  BEGIN
    BASE_CURR := '';
    PREC := 0;
    MIN_AU := 0;
    DESCR := '';
    ORG_NAME := '';
    BEGIN
      SELECT
        FCURR.CURRENCY_CODE,
        FCURR.PRECISION,
        FCURR.MINIMUM_ACCOUNTABLE_UNIT,
        FCURR.DESCRIPTION,
        GSBKS.NAME
      INTO BASE_CURR,PREC,MIN_AU,DESCR,ORG_NAME
      FROM
        AR_SYSTEM_PARAMETERS ASP,
        FND_CURRENCIES_VL FCURR,
        GL_SETS_OF_BOOKS GSBKS
      WHERE ASP.SET_OF_BOOKS_ID = GSBKS.SET_OF_BOOKS_ID
        AND GSBKS.CURRENCY_CODE = FCURR.CURRENCY_CODE;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RAISE_ERR('200XX'
                 ,'JL_AR_FA_CURR_DET_NOT_DEFINED');
      WHEN OTHERS THEN
        RAISE_ORA_ERR('200XX');
    END;
    C_BASE_CURRENCY_CODE := BASE_CURR;
    C_BASE_PRECISION := PREC;
    C_BASE_MIN_ACCT_UNIT := MIN_AU;
    C_BASE_DESCRIPTION := DESCR;
    C_ORGANISATION_NAME := ORG_NAME;
  END GET_BASE_CURR_DATA;

  PROCEDURE RAISE_ERR(ERRNO IN VARCHAR2
                     ,MSGNAME IN VARCHAR2) IS
    ERRMSG VARCHAR2(1000);
  BEGIN
    SET_NAME('JL'
            ,MSGNAME);
    ERRMSG := GET;
    /*SRW.MESSAGE(ERRNO
               ,ERRMSG)*/NULL;
    /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
  END RAISE_ERR;

  PROCEDURE RAISE_ORA_ERR(ERRNO IN VARCHAR2) IS
    ERRMSG VARCHAR2(1000);
  BEGIN
    ERRMSG := SQLERRM;
    /*SRW.MESSAGE(ERRNO
               ,ERRMSG)*/NULL;
    /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
  END RAISE_ORA_ERR;

  PROCEDURE GET_COMPANY_NAME IS
    L_NAME VARCHAR2(80);
    L_RETURN_STATUS VARCHAR2(2000);
    L_MSG_DATA VARCHAR2(2000);
    L_LEDGER_ID AR_SYSTEM_PARAMETERS.SET_OF_BOOKS_ID%TYPE;
    L_ACCT_BALANCING_SEGMENT AR_SYSTEM_PARAMETERS.GLOBAL_ATTRIBUTE1%TYPE;
    L_LEDGER_INFO XLE_BUSINESSINFO_GRP.LE_LEDGER_REC_TYPE;
    L_LEGAL_ENTITY_ID XLE_ENTITY_PROFILES.LEGAL_ENTITY_ID%TYPE;
    L_LEGAL_ENTITY_NAME XLE_ENTITY_PROFILES.NAME%TYPE;
  BEGIN
    SELECT
      SET_OF_BOOKS_ID,
      GLOBAL_ATTRIBUTE1
    INTO L_LEDGER_ID,L_ACCT_BALANCING_SEGMENT
    FROM
      AR_SYSTEM_PARAMETERS;
    SELECT
      ETB.ESTABLISHMENT_NAME
    INTO L_LEGAL_ENTITY_NAME
    FROM
      XLE_ESTABLISHMENT_V ETB,
      XLE_BSV_ASSOCIATIONS BSV,
      GL_LEDGER_LE_V GL
    WHERE ETB.LEGAL_ENTITY_ID = GL.LEGAL_ENTITY_ID
      AND BSV.LEGAL_PARENT_ID = ETB.LEGAL_ENTITY_ID
      AND ETB.ESTABLISHMENT_ID = BSV.LEGAL_CONSTRUCT_ID
      AND BSV.ENTITY_NAME = L_ACCT_BALANCING_SEGMENT
      AND GL.LEDGER_ID = L_LEDGER_ID;
    C_NAME := L_LEGAL_ENTITY_NAME;
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END GET_COMPANY_NAME;

  FUNCTION SET_P_WHERE RETURN BOOLEAN IS
    L_NLS_YES VARCHAR2(4);
    L_TYPE_OF_REPORT VARCHAR2(40);
  BEGIN
    IF (P_CUSTOMER_NUMBER_LOW IS NOT NULL) THEN
      C_START_CUST_NUMBER_PREDICATE := 'and cust.account_number >=''' || P_CUSTOMER_NUMBER_LOW || '''';
      else
      C_START_CUST_NUMBER_PREDICATE :='  ';
    END IF;
    IF (P_CUSTOMER_NUMBER_HIGH IS NOT NULL) THEN
      C_END_CUST_NUMBER_PREDICATE := 'and cust.account_number <=''' || P_CUSTOMER_NUMBER_HIGH || '''';
      else
C_END_CUST_NUMBER_PREDICATE := '  ';
    END IF;
    IF (P_CUSTOMER_NAME_LOW IS NOT NULL) THEN
      C_START_CUST_NAME_PREDICATE := 'and pty.party_name >=''' || P_CUSTOMER_NAME_LOW || '''';
      else
      C_START_CUST_NAME_PREDICATE := '  ';
    END IF;
    IF (P_CUSTOMER_NAME_HIGH IS NOT NULL) THEN
      C_END_CUST_NAME_PREDICATE := 'and pty.party_name <=''' || P_CUSTOMER_NAME_HIGH || '''';
      else
      C_END_CUST_NAME_PREDICATE := '  ';
    END IF;
    IF (P_INVOICE_NUMBER_LOW IS NOT NULL) THEN
      C_START_INV_NUMBER_PREDICATE := 'and ps.trx_number >=''' || P_INVOICE_NUMBER_LOW || '''';
      else
      C_START_INV_NUMBER_PREDICATE := '  ';
    END IF;
    IF (P_INVOICE_NUMBER_HIGH IS NOT NULL) THEN
      C_END_INV_NUMBER_PREDICATE := 'and ps.trx_number <=''' || P_INVOICE_NUMBER_HIGH || '''';
      else
      C_END_INV_NUMBER_PREDICATE := '  ';
    END IF;
    RETURN (TRUE);
  END SET_P_WHERE;

  FUNCTION CF_INT_CALFORMULA(C_CUSTOMER_TRX_ID IN NUMBER
                            ,C_DUE_DATE IN DATE
                            ,C_BALANCE_DUE IN NUMBER
                            ,C_PAYMENT_SCHEDULE_ID IN NUMBER) RETURN NUMBER IS
    X_INTEREST_TYPE VARCHAR2(150);
    X_INTEREST_RATE_AMOUNT NUMBER;
    X_PERIOD_DAYS NUMBER;
    X_INTEREST_FORMULA VARCHAR2(150);
    X_GRACE_DAYS NUMBER;
    X_PENALTY_TYPE VARCHAR2(150);
    X_PENALTY_RATE_AMOUNT NUMBER;
    X_DUE_DATE DATE;
    X_PAYMENT_DATE DATE;
    X_INVOICE_AMOUNT NUMBER;
    X_JLBR_CALENDAR VARCHAR2(150);
    X_JLBR_ACTION_NON_WORKDAY VARCHAR2(150);
    X_JLBR_LOCAL_HOLIDAY VARCHAR2(60);
    X_INTEREST_CALCULATED NUMBER;
    X_DAYS_LATE NUMBER;
    X_EXIT_CODE NUMBER;
    X_DUE_DATE_NEW DATE;
    X_PAYMENT_DATE_NEW DATE;
    X_CITY VARCHAR2(60);
  BEGIN
    X_INTEREST_CALCULATED := 0;
    X_DAYS_LATE := 0;
    X_CITY := NULL;
    X_INTEREST_TYPE := NULL;
    X_INTEREST_RATE_AMOUNT := 0;
    X_PERIOD_DAYS := 0;
    X_INTEREST_FORMULA := NULL;
    X_GRACE_DAYS := 0;
    X_PENALTY_TYPE := NULL;
    X_PENALTY_RATE_AMOUNT := 0;
    X_DUE_DATE_NEW := NULL;
    X_DUE_DATE := NULL;
    X_PAYMENT_DATE_NEW := NULL;
    X_PAYMENT_DATE := NULL;
    X_INVOICE_AMOUNT := 0;
    BEGIN
      SELECT
        RTRIM(GLOBAL_ATTRIBUTE1),
        FND_NUMBER.CANONICAL_TO_NUMBER(NVL(GLOBAL_ATTRIBUTE2
                                          ,'0')),
        TO_NUMBER(NVL(GLOBAL_ATTRIBUTE3
                     ,'0')),
        RTRIM(GLOBAL_ATTRIBUTE4),
        TO_NUMBER(NVL(GLOBAL_ATTRIBUTE5
                     ,'0')),
        RTRIM(GLOBAL_ATTRIBUTE6),
        FND_NUMBER.CANONICAL_TO_NUMBER(NVL(GLOBAL_ATTRIBUTE7
                                          ,'0'))
      INTO X_INTEREST_TYPE,X_INTEREST_RATE_AMOUNT,X_PERIOD_DAYS,X_INTEREST_FORMULA,X_GRACE_DAYS,X_PENALTY_TYPE,X_PENALTY_RATE_AMOUNT
      FROM
        RA_CUSTOMER_TRX CUST
      WHERE CUST.CUSTOMER_TRX_ID = C_CUSTOMER_TRX_ID;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
      WHEN OTHERS THEN
        NULL;
    END;
    X_DUE_DATE := C_DUE_DATE;
    X_PAYMENT_DATE := SYSDATE;
    X_INVOICE_AMOUNT := C_BALANCE_DUE;
    X_JLBR_CALENDAR := H_CALENDAR;
    X_JLBR_ACTION_NON_WORKDAY := H_NONWORKDAY;
    BEGIN
      SELECT
        RTRIM(LOC.CITY)
      INTO X_CITY
      FROM
        HZ_CUST_ACCT_SITES AD,
        HZ_LOCATIONS LOC,
        HZ_PARTY_SITES PST,
        RA_CUSTOMER_TRX CUST,
        HZ_CUST_SITE_USES SUS,
        AR_PAYMENT_SCHEDULES SCH
      WHERE SCH.PAYMENT_SCHEDULE_ID = C_PAYMENT_SCHEDULE_ID
        AND CUST.CUSTOMER_TRX_ID = SCH.CUSTOMER_TRX_ID
        AND SUS.SITE_USE_ID = CUST.BILL_TO_SITE_USE_ID
        AND AD.CUST_ACCT_SITE_ID = SUS.CUST_ACCT_SITE_ID
        AND AD.PARTY_SITE_ID = PST.PARTY_SITE_ID
        AND LOC.LOCATION_ID = PST.LOCATION_ID;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
      WHEN OTHERS THEN
        NULL;
    END;
    IF X_INTEREST_TYPE IS NOT NULL THEN
      JL_BR_INTEREST(X_INTEREST_TYPE
                    ,X_INTEREST_RATE_AMOUNT
                    ,X_PERIOD_DAYS
                    ,X_INTEREST_FORMULA
                    ,X_GRACE_DAYS
                    ,X_PENALTY_TYPE
                    ,X_PENALTY_RATE_AMOUNT
                    ,X_DUE_DATE
                    ,X_PAYMENT_DATE
                    ,X_INVOICE_AMOUNT
                    ,X_JLBR_CALENDAR
                    ,X_CITY
                    ,X_JLBR_ACTION_NON_WORKDAY
                    ,X_INTEREST_CALCULATED
                    ,X_DAYS_LATE
                    ,X_EXIT_CODE);
    END IF;
    H_DAYS_LATE := X_DAYS_LATE;
    RETURN (X_INTEREST_CALCULATED);
  END CF_INT_CALFORMULA;

  FUNCTION C_BEARER_OF_TRADE_NOTEFORMULA(C_GLOBAL_ATTRIBUTE9 IN VARCHAR2) RETURN VARCHAR2 IS
    X_BEARER_OF_TRADE_NOTE VARCHAR2(80);
  BEGIN
    X_BEARER_OF_TRADE_NOTE := NULL;
    IF C_GLOBAL_ATTRIBUTE9 IS NOT NULL THEN
      BEGIN
        SELECT
          MEANING
        INTO X_BEARER_OF_TRADE_NOTE
        FROM
          FND_LOOKUPS
        WHERE LOOKUP_TYPE = 'JLBR_AR_BEARER_OF_TRADE_NOTE'
          AND LOOKUP_CODE = C_GLOBAL_ATTRIBUTE9;
      EXCEPTION
        WHEN OTHERS THEN
          NULL;
      END;
    END IF;
    RETURN (X_BEARER_OF_TRADE_NOTE);
  END C_BEARER_OF_TRADE_NOTEFORMULA;

  FUNCTION C_DOCUMENT_STATUSFORMULA(SELECTED_FOR_RECEIPT_BATCH_ID IN NUMBER
                                   ,C_PAYMENT_SCHEDULE_ID IN NUMBER) RETURN VARCHAR2 IS
    X_DOCUMENT_STATUS VARCHAR2(80);
  BEGIN
    X_DOCUMENT_STATUS := NULL;
    IF SELECTED_FOR_RECEIPT_BATCH_ID IS NOT NULL THEN
      BEGIN
        SELECT
          FLV.MEANING
        INTO X_DOCUMENT_STATUS
        FROM
          FND_LOOKUPS FLV,
          JL_BR_AR_COLLECTION_DOCS DOCS
        WHERE DOCS.PAYMENT_SCHEDULE_ID = C_PAYMENT_SCHEDULE_ID
          AND FLV.LOOKUP_CODE = DOCS.DOCUMENT_STATUS
          AND FLV.LOOKUP_TYPE = 'JLBR_AR_COLLECTION_DOCS_STATUS'
          AND NVL(DOCS.DOCUMENT_STATUS
           ,'-') not in ( 'CANCELED' , 'REFUSED' , 'PARTIALLY_RECEIVED' , 'WRITTEN_OFF' );
      EXCEPTION
        WHEN OTHERS THEN
          NULL;
      END;
    END IF;
    RETURN (X_DOCUMENT_STATUS);
  END C_DOCUMENT_STATUSFORMULA;

  FUNCTION C_BORDERO_NUMBERFORMULA(SELECTED_FOR_RECEIPT_BATCH_ID IN NUMBER
                                  ,C_PAYMENT_SCHEDULE_ID IN NUMBER) RETURN NUMBER IS
    X_BORDERO_NUMBER NUMBER;
  BEGIN
    X_BORDERO_NUMBER := NULL;
    IF SELECTED_FOR_RECEIPT_BATCH_ID IS NOT NULL THEN
      BEGIN
        SELECT
          DOCS.BORDERO_ID
        INTO X_BORDERO_NUMBER
        FROM
          JL_BR_AR_COLLECTION_DOCS DOCS
        WHERE DOCS.PAYMENT_SCHEDULE_ID = C_PAYMENT_SCHEDULE_ID
          AND NVL(DOCS.DOCUMENT_STATUS
           ,'-') not in ( 'CANCELED' , 'REFUSED' , 'PARTIALLY_RECEIVED' , 'WRITTEN_OFF' );
      EXCEPTION
        WHEN OTHERS THEN
          NULL;
      END;
    END IF;
    RETURN (X_BORDERO_NUMBER);
  END C_BORDERO_NUMBERFORMULA;

  FUNCTION C_SELECTION_NUMBERFORMULA(SELECTED_FOR_RECEIPT_BATCH_ID IN NUMBER
                                    ,C_PAYMENT_SCHEDULE_ID IN NUMBER) RETURN NUMBER IS
    X_SELECTION_NUMBER NUMBER;
  BEGIN
    X_SELECTION_NUMBER := NULL;
    IF SELECTED_FOR_RECEIPT_BATCH_ID IS NOT NULL THEN
      BEGIN
        SELECT
          BOR.SELECTION_CONTROL_ID
        INTO X_SELECTION_NUMBER
        FROM
          JL_BR_AR_COLLECTION_DOCS DOCS,
          JL_BR_AR_BORDEROS BOR
        WHERE DOCS.PAYMENT_SCHEDULE_ID = C_PAYMENT_SCHEDULE_ID
          AND BOR.BORDERO_ID = DOCS.BORDERO_ID
          AND NVL(DOCS.DOCUMENT_STATUS
           ,'-') not in ( 'CANCELED' , 'REFUSED' , 'PARTIALLY_RECEIVED' , 'WRITTEN_OFF' )
          AND BOR.BORDERO_STATUS not in ( 'CANCELED' , 'WRITE_OFF' , 'REFUSED' );
      EXCEPTION
        WHEN OTHERS THEN
          NULL;
      END;
    END IF;
    RETURN (X_SELECTION_NUMBER);
  END C_SELECTION_NUMBERFORMULA;

  FUNCTION CF_STATUS_MEANINGFORMULA(C_STATUS IN VARCHAR2) RETURN VARCHAR2 IS
    L_MEANING VARCHAR2(80);
  BEGIN
    L_MEANING := NULL;
    BEGIN
      SELECT
        MEANING
      INTO L_MEANING
      FROM
        AR_LOOKUPS
      WHERE LOOKUP_CODE = C_STATUS
        AND LOOKUP_TYPE = 'INVOICE_TRX_STATUS';
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
    RETURN (L_MEANING);
  END CF_STATUS_MEANINGFORMULA;

  FUNCTION CF_CLASS_MEANINGFORMULA(C_CLASS IN VARCHAR2) RETURN VARCHAR2 IS
    L_MEANING VARCHAR2(80);
  BEGIN
    L_MEANING := NULL;
    BEGIN
      SELECT
        MEANING
      INTO L_MEANING
      FROM
        AR_LOOKUPS
      WHERE LOOKUP_CODE = C_CLASS
        AND LOOKUP_TYPE = 'INV/CM/ADJ';
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
    RETURN (L_MEANING);
  END CF_CLASS_MEANINGFORMULA;

  FUNCTION H_DAYS_LATE_P RETURN NUMBER IS
  BEGIN
    RETURN H_DAYS_LATE;
  END H_DAYS_LATE_P;

  FUNCTION C_CHART_OF_ACCOUNTS_ID_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_CHART_OF_ACCOUNTS_ID;
  END C_CHART_OF_ACCOUNTS_ID_P;

  FUNCTION C_BASE_CURRENCY_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BASE_CURRENCY_CODE;
  END C_BASE_CURRENCY_CODE_P;

  FUNCTION C_BASE_PRECISION_P RETURN NUMBER IS
  BEGIN
    RETURN C_BASE_PRECISION;
  END C_BASE_PRECISION_P;

  FUNCTION C_BASE_MIN_ACCT_UNIT_P RETURN NUMBER IS
  BEGIN
    RETURN C_BASE_MIN_ACCT_UNIT;
  END C_BASE_MIN_ACCT_UNIT_P;

  FUNCTION C_BASE_DESCRIPTION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BASE_DESCRIPTION;
  END C_BASE_DESCRIPTION_P;

  FUNCTION C_ORGANISATION_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_ORGANISATION_NAME;
  END C_ORGANISATION_NAME_P;

  FUNCTION C_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NAME;
  END C_NAME_P;

  FUNCTION H_CALENDAR_P RETURN VARCHAR2 IS
  BEGIN
    RETURN H_CALENDAR;
  END H_CALENDAR_P;

  FUNCTION H_NONWORKDAY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN H_NONWORKDAY;
  END H_NONWORKDAY_P;

  FUNCTION C_START_INV_NUMBER_PREDICATE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_START_INV_NUMBER_PREDICATE;
  END C_START_INV_NUMBER_PREDICATE_P;

  FUNCTION C_END_INV_NUMBER_PREDICATE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_END_INV_NUMBER_PREDICATE;
  END C_END_INV_NUMBER_PREDICATE_P;

  FUNCTION C_START_CUST_NUMBER_PREDIC_p RETURN VARCHAR2 IS
  BEGIN
    RETURN C_START_CUST_NUMBER_PREDICATE;
  END C_START_CUST_NUMBER_PREDIC_p;

  FUNCTION C_END_CUST_NUMBER_PREDICATE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_END_CUST_NUMBER_PREDICATE;
  END C_END_CUST_NUMBER_PREDICATE_P;

  FUNCTION C_START_CUST_NAME_PREDICATE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_START_CUST_NAME_PREDICATE;
  END C_START_CUST_NAME_PREDICATE_P;

  FUNCTION C_END_CUST_NAME_PREDICATE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_END_CUST_NAME_PREDICATE;
  END C_END_CUST_NAME_PREDICATE_P;

  PROCEDURE SET_NAME(APPLICATION IN VARCHAR2
                    ,NAME IN VARCHAR2) IS
  BEGIN
   /* STPROC.INIT('begin FND_MESSAGE.SET_NAME(:APPLICATION, :NAME); end;');
    STPROC.BIND_I(APPLICATION);
    STPROC.BIND_I(NAME);
    STPROC.EXECUTE;*/
    FND_MESSAGE.SET_NAME(APPLICATION,NAME);
  END SET_NAME;

  PROCEDURE SET_TOKEN(TOKEN IN VARCHAR2
                     ,VALUE IN VARCHAR2
                     ,TRANSLATE IN BOOLEAN) IS
  BEGIN
  /*  STPROC.INIT('declare TRANSLATE BOOLEAN; begin TRANSLATE := sys.diutil.int_to_bool(:TRANSLATE); FND_MESSAGE.SET_TOKEN(:TOKEN, :VALUE, TRANSLATE); end;');
    STPROC.BIND_I(TRANSLATE);
    STPROC.BIND_I(TOKEN);
    STPROC.BIND_I(VALUE);
    STPROC.EXECUTE;*/null;
  END SET_TOKEN;

  PROCEDURE RETRIEVE(MSGOUT OUT NOCOPY VARCHAR2) IS
  BEGIN
   /* STPROC.INIT('begin FND_MESSAGE.RETRIEVE(:MSGOUT); end;');
    STPROC.BIND_O(MSGOUT);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,MSGOUT);*/null;
  END RETRIEVE;

  PROCEDURE CLEAR IS
  BEGIN
   /* STPROC.INIT('begin FND_MESSAGE.CLEAR; end;');
    STPROC.EXECUTE;*/null;
  END CLEAR;

  FUNCTION GET_STRING(APPIN IN VARCHAR2
                     ,NAMEIN IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := FND_MESSAGE.GET_STRING(:APPIN, :NAMEIN); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(APPIN);
    STPROC.BIND_I(NAMEIN);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_STRING;

  FUNCTION GET RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
   /* STPROC.INIT('begin :X0 := FND_MESSAGE.GET; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
		   X0 := FND_MESSAGE.GET;
    RETURN X0;
  END GET;

  FUNCTION GET_ENCODED RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
  /*  STPROC.INIT('begin :X0 := FND_MESSAGE.GET_ENCODED; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    RETURN X0;
  END GET_ENCODED;

  PROCEDURE PARSE_ENCODED(ENCODED_MESSAGE IN VARCHAR2
                         ,APP_SHORT_NAME OUT NOCOPY VARCHAR2
                         ,MESSAGE_NAME OUT NOCOPY VARCHAR2) IS
  BEGIN
   /* STPROC.INIT('begin FND_MESSAGE.PARSE_ENCODED(:ENCODED_MESSAGE, :APP_SHORT_NAME, :MESSAGE_NAME); end;');
    STPROC.BIND_I(ENCODED_MESSAGE);
    STPROC.BIND_O(APP_SHORT_NAME);
    STPROC.BIND_O(MESSAGE_NAME);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,APP_SHORT_NAME);
    STPROC.RETRIEVE(3
                   ,MESSAGE_NAME);*/null;
  END PARSE_ENCODED;

  PROCEDURE SET_ENCODED(ENCODED_MESSAGE IN VARCHAR2) IS
  BEGIN
/*    STPROC.INIT('begin FND_MESSAGE.SET_ENCODED(:ENCODED_MESSAGE); end;');
    STPROC.BIND_I(ENCODED_MESSAGE);
    STPROC.EXECUTE;*/null;
  END SET_ENCODED;

  PROCEDURE RAISE_ERROR IS
  BEGIN
   /* STPROC.INIT('begin FND_MESSAGE.RAISE_ERROR; end;');
    STPROC.EXECUTE;*/null;
  END RAISE_ERROR;

  PROCEDURE JL_BR_INTEREST(X_INTEREST_TYPE IN VARCHAR2
                          ,X_INTEREST_RATE_AMOUNT IN NUMBER
                          ,X_PERIOD_DAYS IN NUMBER
                          ,X_INTEREST_FORMULA IN VARCHAR2
                          ,X_GRACE_DAYS IN NUMBER
                          ,X_PENALTY_TYPE IN VARCHAR2
                          ,X_PENALTY_RATE_AMOUNT IN NUMBER
                          ,X_DUE_DATE IN DATE
                          ,X_PAYMENT_DATE IN DATE
                          ,X_INVOICE_AMOUNT IN NUMBER
                          ,X_JLBR_CALENDAR IN VARCHAR2
                          ,X_JLBR_LOCAL_HOLIDAY IN VARCHAR2
                          ,X_JLBR_ACTION_NON_WORKDAY IN VARCHAR2
                          ,X_INTEREST_CALCULATED IN OUT NOCOPY NUMBER
                          ,X_DAYS_LATE IN OUT NOCOPY NUMBER
                          ,X_EXIT_CODE OUT NOCOPY NUMBER) IS
  BEGIN
    /*STPROC.INIT('begin JL_BR_INTEREST_HANDLING.JL_BR_INTEREST(:X_INTEREST_TYPE, :X_INTEREST_RATE_AMOUNT,
    :X_PERIOD_DAYS, :X_INTEREST_FORMULA, :X_GRACE_DAYS, :X_PENALTY_TYPE, :X_PENALTY_RATE_AMOUNT, :X_DUE_DATE,
    :X_PAYMENT_DATE, :X_INVOICE_AMOUNT, :X_JLBR_CALENDAR, :X_JLBR_LOCAL_HOLIDAY, :X_JLBR_ACTION_NON_WORKDAY,
    :X_INTEREST_CALCULATED, :X_DAYS_LATE, :X_EXIT_CODE); end;');
    STPROC.BIND_I(X_INTEREST_TYPE);
    STPROC.BIND_I(X_INTEREST_RATE_AMOUNT);
    STPROC.BIND_I(X_PERIOD_DAYS);
    STPROC.BIND_I(X_INTEREST_FORMULA);
    STPROC.BIND_I(X_GRACE_DAYS);
    STPROC.BIND_I(X_PENALTY_TYPE);
    STPROC.BIND_I(X_PENALTY_RATE_AMOUNT);
    STPROC.BIND_I(X_DUE_DATE);
    STPROC.BIND_I(X_PAYMENT_DATE);
    STPROC.BIND_I(X_INVOICE_AMOUNT);
    STPROC.BIND_I(X_JLBR_CALENDAR);
    STPROC.BIND_I(X_JLBR_LOCAL_HOLIDAY);
    STPROC.BIND_I(X_JLBR_ACTION_NON_WORKDAY);
    STPROC.BIND_IO(X_INTEREST_CALCULATED);
    STPROC.BIND_IO(X_DAYS_LATE);
    STPROC.BIND_O(X_EXIT_CODE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(14
                   ,X_INTEREST_CALCULATED);
    STPROC.RETRIEVE(15
                   ,X_DAYS_LATE);
    STPROC.RETRIEVE(16
                   ,X_EXIT_CODE);*/
JL_BR_INTEREST_HANDLING.JL_BR_INTEREST(X_INTEREST_TYPE,X_INTEREST_RATE_AMOUNT,X_PERIOD_DAYS
,X_INTEREST_FORMULA,X_GRACE_DAYS,X_PENALTY_TYPE,X_PENALTY_RATE_AMOUNT,X_DUE_DATE,X_PAYMENT_DATE
,X_INVOICE_AMOUNT,X_JLBR_CALENDAR,X_JLBR_LOCAL_HOLIDAY,X_JLBR_ACTION_NON_WORKDAY,X_INTEREST_CALCULATED
,X_DAYS_LATE,X_EXIT_CODE);
  END JL_BR_INTEREST;

END JL_JLBRRCAD_XMLP_PKG;




/
