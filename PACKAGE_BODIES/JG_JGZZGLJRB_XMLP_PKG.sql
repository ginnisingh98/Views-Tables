--------------------------------------------------------
--  DDL for Package Body JG_JGZZGLJRB_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JG_JGZZGLJRB_XMLP_PKG" AS
/* $Header: JGZZGLJRBB.pls 120.2.12010000.3 2008/08/04 13:51:01 vgadde ship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    L_EXC_LE_ID NUMBER(15);
    L_ACCTG_CODE VARCHAR2(30);
    T_ERRORBUFFER VARCHAR2(132);
    CURSOR LEDGER_ACCTG_CODE IS
      SELECT
        C.ACCTG_ENVIRONMENT_CODE
      FROM
        GL_LEDGERS L,
        GL_LEDGER_CONFIGURATIONS C
      WHERE L.LEDGER_ID = P_LEDGER_ID
        AND C.CONFIGURATION_ID = L.CONFIGURATION_ID;
    CURSOR GET_EXC_LE_ID IS
      SELECT
        CD.OBJECT_ID
      FROM
        GL_LEDGERS L,
        GL_LEDGER_CONFIG_DETAILS CD
      WHERE L.LEDGER_ID = P_LEDGER_ID
        AND CD.CONFIGURATION_ID = L.CONFIGURATION_ID
        AND CD.OBJECT_TYPE_CODE = 'LEGAL_ENTITY';
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    CP_START_DATE :=P_START_DATE;
    CP_END_DATE :=P_END_DATE;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    SELECT
      TO_CHAR(SYSDATE
             ,'YYYY-MM-DD') || 'T' || TO_CHAR(SYSDATE
             ,'HH24:MI:SS')
    INTO REP_EXECUTION_DATE
    FROM
      DUAL;
    SELECT
      NAME
    INTO DATA_ACCESS_SET_NAME
    FROM
      GL_ACCESS_SETS
    WHERE ACCESS_SET_ID = P_ACCESS_SET_ID;
    SELECT
      NAME
    INTO LEDGER_NAME_PARAM
    FROM
      GL_LEDGERS
    WHERE LEDGER_ID = P_LEDGER_ID;
    OPEN LEDGER_ACCTG_CODE;
    FETCH LEDGER_ACCTG_CODE
     INTO L_ACCTG_CODE;
    CLOSE LEDGER_ACCTG_CODE;
    IF (L_ACCTG_CODE = 'EXCLUSIVE') THEN
      OPEN GET_EXC_LE_ID;
      FETCH GET_EXC_LE_ID
       INTO L_EXC_LE_ID;
      CLOSE GET_EXC_LE_ID;
      SELECT_LE := TO_CHAR(L_EXC_LE_ID);
      FROM_LNSV := ' ';
      LE_WHERE := ' ';
    ELSIF (L_ACCTG_CODE = 'SHARED') THEN
      SELECT_LE := 'LNSV.LEGAL_ENTITY_ID';
      FROM_LNSV := 'GL_LEDGER_NORM_SEG_VALS LNSV, ';
      LE_WHERE := ' AND LNSV.LEDGER_ID (+) = ' || TO_CHAR(P_LEDGER_ID) || ' AND LNSV.SEGMENT_TYPE_CODE (+) = ''B''' || ' AND LNSV.SEGMENT_VALUE (+) = ' || SELECT_BAL_SEG || ' AND LNSV.STATUS_CODE IS NULL';
    ELSE
      SELECT_LE := ' ';
      FROM_LNSV := ' ';
      LE_WHERE := ' ';
    END IF;
    SELECT
      GLP1.START_DATE,
      GLP1.EFFECTIVE_PERIOD_NUM,
      GLP2.END_DATE,
      GLP2.EFFECTIVE_PERIOD_NUM
    INTO FP_START_DATE,F_PERIOD_NUM,TP_END_DATE,T_PERIOD_NUM
    FROM
      GL_PERIOD_STATUSES GLP1,
      GL_PERIOD_STATUSES GLP2
    WHERE GLP1.APPLICATION_ID = 101
      AND GLP2.APPLICATION_ID = GLP1.APPLICATION_ID
      AND GLP1.LEDGER_ID = P_LEDGER_ID
      AND GLP2.LEDGER_ID = GLP1.LEDGER_ID
      AND GLP1.PERIOD_NAME = P_PERIOD_FROM
      AND GLP2.PERIOD_NAME = P_PERIOD_TO;
    IF (CP_START_DATE IS NULL OR CP_END_DATE IS NULL) THEN
     CP_START_DATE := TO_CHAR(FP_START_DATE);
     CP_END_DATE := TO_CHAR(TP_END_DATE);
    END IF;
    IF (P_PERIOD_FROM = P_PERIOD_TO) THEN
      PERIOD_WHERE := ' AND GLP.PERIOD_NAME = ''' || P_PERIOD_FROM || '''';
    ELSE
      PERIOD_WHERE := ' AND (GLP.EFFECTIVE_PERIOD_NUM BETWEEN ' || F_PERIOD_NUM || ' AND ' || T_PERIOD_NUM || ')';
    END IF;
    DAS_WHERE := GL_ACCESS_SET_SECURITY_PKG.GET_SECURITY_CLAUSE(P_ACCESS_SET_ID
                                                               ,'R'
                                                               ,'LEDGER_COLUMN'
                                                               ,'LEDGER_ID'
                                                               ,'GLP'
                                                               ,'SEG_COLUMN'
                                                               ,NULL
                                                               ,'CC'
                                                               ,NULL);
    IF (DAS_WHERE IS NOT NULL) THEN
      DAS_WHERE := ' AND ' || DAS_WHERE;
    ELSE
      DAS_WHERE := ' ';
    END IF;
    GL_SECURITY_PKG.INIT_SEGVAL;
    SEG_SECURITY_WHERE := 'AND GL_SECURITY_PKG.VALIDATE_ACCESS(' || P_LEDGER_ID || ', CC.CODE_COMBINATION_ID) = ''TRUE'' ';
    IF (P_BALANCE_TYPE = 'A') THEN
      BUDENC_WHERE_BAL := 'AND 1 = 1';
      BUDENC_WHERE_JRNL := 'AND 1 = 1';
    ELSIF (P_BALANCE_TYPE = 'B') THEN
      BUDENC_WHERE_BAL := 'AND GLBAL.BUDGET_VERSION_ID = ' || TO_CHAR(P_BUD_ENC_TYPE);
      BUDENC_WHERE_JRNL := 'AND  GLH.BUDGET_VERSION_ID = ' || TO_CHAR(P_BUD_ENC_TYPE);
    ELSE
      BUDENC_WHERE_BAL := 'AND GLBAL.ENCUMBRANCE_TYPE_ID = ' || TO_CHAR(P_BUD_ENC_TYPE);
      BUDENC_WHERE_JRNL := 'AND  GLH.ENCUMBRANCE_TYPE_ID = ' || TO_CHAR(P_BUD_ENC_TYPE);
    END IF;
    IF (P_CURRENCY_TYPE = 'T') THEN
      BAL_CURRENCY := P_LEDGER_CURRENCY;
    ELSE
      BAL_CURRENCY := P_ENTERED_CURRENCY;
    END IF;
    CURR_WHERE_BAL := 'AND GLBAL.TRANSLATED_FLAG IS NULL';
    SELECT_BEGIN_BAL := 'NVL(GLBAL.BEGIN_BALANCE_DR, 0) - NVL(GLBAL.BEGIN_BALANCE_CR, 0)';
    IF (P_CURRENCY_TYPE = 'E') THEN
      IF (P_BALANCE_TYPE = 'A') THEN
        SELECT_BEGIN_BAL := 'DECODE(GLBAL.TRANSLATED_FLAG, ''R'', NVL(GLBAL.BEGIN_BALANCE_DR, 0) - NVL(GLBAL.BEGIN_BALANCE_CR, 0),' || 'NVL(GLBAL.BEGIN_BALANCE_DR_BEQ, 0) - NVL(GLBAL.BEGIN_BALANCE_CR_BEQ, 0))';
      END IF;
      CURR_WHERE_BAL := 'AND (GLBAL.TRANSLATED_FLAG = ''R'' OR GLBAL.TRANSLATED_FLAG IS NULL)';
    END IF;
    IF (P_CURRENCY_TYPE = 'S') THEN
      CURR_WHERE_JRNL := 'AND (   GLH.CURRENCY_CODE = ''STAT''' || ' OR GLL.STAT_AMOUNT IS NOT NULL)';
      SELECT_DR := 'DECODE(GLH.CURRENCY_CODE, ''STAT'',' || 'DECODE(NVL(GLL.STAT_AMOUNT,0),' || '0, GLL.ACCOUNTED_DR,' || 'DECODE(SIGN(NVL(GLL.STAT_AMOUNT,0)),' || '-1, GLL.ACCOUNTED_DR,' || ' 1, (NVL(GLL.ACCOUNTED_DR,0) + '
      || 'GLL.STAT_AMOUNT),' || 'GLL.ACCOUNTED_DR)),' || 'DECODE(SIGN(NVL(GLL.STAT_AMOUNT,0)),' || '1, NVL(GLL.STAT_AMOUNT,0), ' || 'NULL))';
      SELECT_CR := 'DECODE(GLH.CURRENCY_CODE, ''STAT'',' || 'DECODE(NVL(GLL.STAT_AMOUNT,0),' || '0, GLL.ACCOUNTED_CR,' || 'DECODE(SIGN(NVL(GLL.STAT_AMOUNT,0)),' || '-1, (NVL(GLL.ACCOUNTED_CR,0) - ' || 'GLL.STAT_AMOUNT),'
      || ' 1, GLL.ACCOUNTED_CR,' || 'GLL.ACCOUNTED_CR)),' || 'DECODE(SIGN(NVL(GLL.STAT_AMOUNT,0)),' || '-1, (0 - NVL(GLL.STAT_AMOUNT,0)), ' || 'NULL))';
    ELSIF (P_CURRENCY_TYPE = 'T') THEN
      CURR_WHERE_JRNL := 'AND GLH.CURRENCY_CODE <> ''STAT''';
      SELECT_DR := 'NVL(GLL.ACCOUNTED_DR, 0)';
      SELECT_CR := 'NVL(GLL.ACCOUNTED_CR, 0)';
    ELSE
      CURR_WHERE_JRNL := 'AND GLH.CURRENCY_CODE = ''' || P_ENTERED_CURRENCY || '''';
      SELECT_DR := 'NVL(GLL.ENTERED_DR, 0)';
      SELECT_CR := 'NVL(GLL.ENTERED_CR, 0)';
    END IF;
    /*SRW.REFERENCE(P_COA_ID)*/NULL;
    IF (P_ACCT_LEVEL IS NOT NULL) THEN
      SELECT
        FLEX_VALUE_SET_ID
      INTO ACCT_SEG_VALUE_SET_ID
      FROM
        FND_ID_FLEX_SEGMENTS
      WHERE APPLICATION_ID = 101
        AND ID_FLEX_CODE = 'GL#'
        AND ID_FLEX_NUM = P_COA_ID
        AND ENABLED_FLAG = 'Y'
        AND APPLICATION_COLUMN_NAME = SUBSTR(SELECT_ACCT_SEG
            ,4);
      JG_GL_ACCT_HIER_PKG.POPULATE_ACCT_HIER_TABLE(ACCT_SEG_VALUE_SET_ID
                                                  ,P_TOP_LEVEL_PARENT_ACCT);
    END IF;
    IF P_ACCT_FROM IS NOT NULL AND P_ACCT_TO IS NOT NULL THEN
      IF TEMP_ACCT_WHERE IS NOT NULL THEN
        ACCT_WHERE := 'AND ' || TEMP_ACCT_WHERE;
      ELSE
        ACCT_WHERE := ' ';
      END IF;
    END IF;
    CHART_OF_ACCOUNTS_ID := P_COA_ID;
    CURRENCY_PARAM := P_ENTERED_CURRENCY;
    LEDGER_CURRENCY := P_LEDGER_CURRENCY;
    PERIOD_FROM_PARAM := P_PERIOD_FROM;
    PERIOD_TO_PARAM := P_PERIOD_TO;
    ACCT_FROM_PARAM := P_ACCT_FROM;
    ACCT_TO_PARAM := P_ACCT_TO;
    ACCT_LEVEL_PARAM := P_ACCT_LEVEL;
    PAGE_NUM_FORMAT_PARAM := P_PAGE_NUM_FORMAT;
    PAGE_NUM_START_PARAM := P_FIRST_PAGE_NUM;
    IF (CP_START_DATE IS NULL OR CP_END_DATE IS NULL) THEN
      START_DATE_PARAM := TO_CHAR(FP_START_DATE
                                 ,'YYYY-MM-DD') || 'T' || TO_CHAR(FP_START_DATE
                                 ,'HH24:MI:SS');
      END_DATE_PARAM := TO_CHAR(TP_END_DATE
                               ,'YYYY-MM-DD') || 'T' || TO_CHAR(TP_END_DATE
                               ,'HH24:MI:SS');
    ELSE
      START_DATE_PARAM := TO_CHAR(CP_START_DATE
                                 ,'YYYY-MM-DD') || 'T' || TO_CHAR(CP_START_DATE
                                 ,'HH24:MI:SS');
      END_DATE_PARAM := TO_CHAR(CP_END_DATE
                               ,'YYYY-MM-DD') || 'T' || TO_CHAR(CP_END_DATE
                               ,'HH24:MI:SS');
    END IF;
    USER_PARAM_1 := P_USER_PARAM_1;
    USER_PARAM_2 := P_USER_PARAM_2;
    USER_PARAM_3 := P_USER_PARAM_3;
    USER_PARAM_4 := P_USER_PARAM_4;
    USER_PARAM_5 := P_USER_PARAM_5;
    BUDGETNAME_ENCUMBRANCETYPE := P_BUD_ENC_TYPE;
    SELECT
      MEANING
    INTO CURRENCY_TYPE_PARAM
    FROM
      GL_LOOKUPS
    WHERE LOOKUP_TYPE = 'GL_CURRENCY_TYPE'
      AND LOOKUP_CODE = P_CURRENCY_TYPE;
    SELECT
      MEANING
    INTO BALANCE_TYPE_PARAM
    FROM
      GL_LOOKUPS
    WHERE LOOKUP_TYPE = 'BATCH_TYPE'
      AND LOOKUP_CODE = P_BALANCE_TYPE;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION LEGAL_ENTITY_NAMEFORMULA(LEGAL_ENTITY_ID IN VARCHAR2
                                   ,LEGAL_ENTITY_NAME IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(LEGAL_ENTITY_ID)*/NULL;
    IF (TEMP_LE_ID = LEGAL_ENTITY_ID) THEN
      RETURN (TEMP_LE_NAME);
    ELSIF LEGAL_ENTITY_ID IS NOT NULL THEN
      GET_LE_INFO(LEGAL_ENTITY_ID);
      RETURN (TEMP_LE_NAME);
    END IF;
    RETURN (LEGAL_ENTITY_NAME);
  END LEGAL_ENTITY_NAMEFORMULA;

  PROCEDURE GET_LE_INFO(V_LE_ID IN NUMBER) IS
    T_ERRORBUFFER VARCHAR2(132);
  BEGIN
    TEMP_LE_ID := V_LE_ID;
    SELECT
      NAME,
      LTRIM(ADDRESS_LINE_1),
      LTRIM(ADDRESS_LINE_2),
      LTRIM(ADDRESS_LINE_3),
      LTRIM(TOWN_OR_CITY),
      LTRIM(POSTAL_CODE),
      ACTIVITY_CODE,
      REGISTRATION_NUMBER
    INTO TEMP_LE_NAME,TEMP_ADDR1,TEMP_ADDR2,TEMP_ADDR3,TEMP_TOWN_CITY,TEMP_POSTAL_CODE,TEMP_SERVICE_TYPE,TEMP_TAX_PAYER_ID
    FROM
      XLE_FIRSTPARTY_INFORMATION_V
    WHERE LEGAL_ENTITY_ID = V_LE_ID;
  EXCEPTION
    WHEN OTHERS THEN
      T_ERRORBUFFER := SQLERRM;
      /*SRW.MESSAGE('00'
                 ,T_ERRORBUFFER)*/NULL;
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
  END GET_LE_INFO;

  FUNCTION LE_ADDRESS_LINE_1FORMULA(LEGAL_ENTITY_ID IN VARCHAR2
                                   ,LE_ADDRESS_LINE_1 IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(LEGAL_ENTITY_ID)*/NULL;
    IF (TEMP_LE_ID = LEGAL_ENTITY_ID) THEN
      RETURN (TEMP_ADDR1);
    ELSIF LEGAL_ENTITY_ID IS NOT NULL THEN
      GET_LE_INFO(LEGAL_ENTITY_ID);
      RETURN (TEMP_ADDR1);
    END IF;
    RETURN (LE_ADDRESS_LINE_1);
  END LE_ADDRESS_LINE_1FORMULA;

  FUNCTION LE_ADDRESS_LINE_2FORMULA(LEGAL_ENTITY_ID IN VARCHAR2
                                   ,LE_ADDRESS_LINE_2 IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(LEGAL_ENTITY_ID)*/NULL;
    IF (TEMP_LE_ID = LEGAL_ENTITY_ID) THEN
      RETURN (TEMP_ADDR2);
    ELSIF LEGAL_ENTITY_ID IS NOT NULL THEN
      GET_LE_INFO(LEGAL_ENTITY_ID);
      RETURN (TEMP_ADDR2);
    END IF;
    RETURN (LE_ADDRESS_LINE_2);
  END LE_ADDRESS_LINE_2FORMULA;

  FUNCTION LE_ADDRESS_LINE_3FORMULA(LEGAL_ENTITY_ID IN VARCHAR2
                                   ,LE_ADDRESS_LINE_3 IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(LEGAL_ENTITY_ID)*/NULL;
    IF (TEMP_LE_ID = LEGAL_ENTITY_ID) THEN
      RETURN (TEMP_ADDR3);
    ELSIF LEGAL_ENTITY_ID IS NOT NULL THEN
      GET_LE_INFO(LEGAL_ENTITY_ID);
      RETURN (TEMP_ADDR3);
    END IF;
    RETURN (LE_ADDRESS_LINE_3);
  END LE_ADDRESS_LINE_3FORMULA;

  FUNCTION LE_CITYFORMULA(LEGAL_ENTITY_ID IN VARCHAR2
                         ,LE_CITY IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(LEGAL_ENTITY_ID)*/NULL;
    IF (TEMP_LE_ID = LEGAL_ENTITY_ID) THEN
      RETURN (TEMP_TOWN_CITY);
    ELSIF LEGAL_ENTITY_ID IS NOT NULL THEN
      GET_LE_INFO(LEGAL_ENTITY_ID);
      RETURN (TEMP_TOWN_CITY);
    END IF;
    RETURN (LE_CITY);
  END LE_CITYFORMULA;

  FUNCTION LE_POSTAL_CODEFORMULA(LEGAL_ENTITY_ID IN VARCHAR2
                                ,LE_POSTAL_CODE IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(LEGAL_ENTITY_ID)*/NULL;
    IF (TEMP_LE_ID = LEGAL_ENTITY_ID) THEN
      RETURN (TEMP_POSTAL_CODE);
    ELSIF LEGAL_ENTITY_ID IS NOT NULL THEN
      GET_LE_INFO(LEGAL_ENTITY_ID);
      RETURN (TEMP_POSTAL_CODE);
    END IF;
    RETURN (LE_POSTAL_CODE);
  END LE_POSTAL_CODEFORMULA;

  FUNCTION LE_REGISTRATION_NUMBERFORMULA(LEGAL_ENTITY_ID IN VARCHAR2
                                        ,LE_REGISTRATION_NUMBER IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(LEGAL_ENTITY_ID)*/NULL;
    IF (TEMP_LE_ID = LEGAL_ENTITY_ID) THEN
      RETURN (TEMP_TAX_PAYER_ID);
    ELSIF LEGAL_ENTITY_ID IS NOT NULL THEN
      GET_LE_INFO(LEGAL_ENTITY_ID);
      RETURN (TEMP_TAX_PAYER_ID);
    END IF;
    RETURN (LE_REGISTRATION_NUMBER);
  END LE_REGISTRATION_NUMBERFORMULA;

  FUNCTION LE_ACTIVITY_CODEFORMULA(LEGAL_ENTITY_ID IN VARCHAR2
                                  ,LE_ACTIVITY_CODE IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(LEGAL_ENTITY_ID)*/NULL;
    IF (TEMP_LE_ID = LEGAL_ENTITY_ID) THEN
      RETURN (TEMP_SERVICE_TYPE);
    ELSIF LEGAL_ENTITY_ID IS NOT NULL THEN
      GET_LE_INFO(LEGAL_ENTITY_ID);
      RETURN (TEMP_SERVICE_TYPE);
    END IF;
    RETURN (LE_ACTIVITY_CODE);
  END LE_ACTIVITY_CODEFORMULA;

  FUNCTION ACCT_LEVEL1_VALUEFORMULA(ACCT_VALUE IN VARCHAR2
                                   ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(ACCT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    RETURN (JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_VALUE(ACCT_SEG_VALUE_SET_ID
                                                   ,P_ACCT_LEVEL
                                                   ,ACCT_VALUE
                                                   ,ACCT_VALUE_DESC
                                                   ,P_ACCT_DELIMITER
                                                   ,1));
  END ACCT_LEVEL1_VALUEFORMULA;

  FUNCTION ACCT_LEVEL1_VALUE_DESCFORMULA(ACCT_VALUE IN VARCHAR2
                                        ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(ACCT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    RETURN (JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_DESC(ACCT_SEG_VALUE_SET_ID
                                                  ,P_ACCT_LEVEL
                                                  ,ACCT_VALUE
                                                  ,ACCT_VALUE_DESC
                                                  ,P_ACCT_DELIMITER
                                                  ,1));
  END ACCT_LEVEL1_VALUE_DESCFORMULA;

  FUNCTION ACCT_LEVEL2_VALUEFORMULA(ACCT_VALUE IN VARCHAR2
                                   ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(ACCT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    RETURN (JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_VALUE(ACCT_SEG_VALUE_SET_ID
                                                   ,P_ACCT_LEVEL
                                                   ,ACCT_VALUE
                                                   ,ACCT_VALUE_DESC
                                                   ,P_ACCT_DELIMITER
                                                   ,2));
  END ACCT_LEVEL2_VALUEFORMULA;

  FUNCTION ACCT_LEVEL2_VALUE_DESCFORMULA(ACCT_VALUE IN VARCHAR2
                                        ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(ACCT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    RETURN (JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_DESC(ACCT_SEG_VALUE_SET_ID
                                                  ,P_ACCT_LEVEL
                                                  ,ACCT_VALUE
                                                  ,ACCT_VALUE_DESC
                                                  ,P_ACCT_DELIMITER
                                                  ,2));
  END ACCT_LEVEL2_VALUE_DESCFORMULA;

  FUNCTION ACCT_LEVEL3_VALUEFORMULA(ACCT_VALUE IN VARCHAR2
                                   ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(ACCT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    RETURN (JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_VALUE(ACCT_SEG_VALUE_SET_ID
                                                   ,P_ACCT_LEVEL
                                                   ,ACCT_VALUE
                                                   ,ACCT_VALUE_DESC
                                                   ,P_ACCT_DELIMITER
                                                   ,3));
  END ACCT_LEVEL3_VALUEFORMULA;

  FUNCTION ACCT_LEVEL3_VALUE_DESCFORMULA(ACCT_VALUE IN VARCHAR2
                                        ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(ACCT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    RETURN (JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_DESC(ACCT_SEG_VALUE_SET_ID
                                                  ,P_ACCT_LEVEL
                                                  ,ACCT_VALUE
                                                  ,ACCT_VALUE_DESC
                                                  ,P_ACCT_DELIMITER
                                                  ,3));
  END ACCT_LEVEL3_VALUE_DESCFORMULA;

  FUNCTION ACCT_LEVEL4_VALUEFORMULA(ACCT_VALUE IN VARCHAR2
                                   ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(ACCT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    RETURN (JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_VALUE(ACCT_SEG_VALUE_SET_ID
                                                   ,P_ACCT_LEVEL
                                                   ,ACCT_VALUE
                                                   ,ACCT_VALUE_DESC
                                                   ,P_ACCT_DELIMITER
                                                   ,4));
  END ACCT_LEVEL4_VALUEFORMULA;

  FUNCTION ACCT_LEVEL4_VALUE_DESCFORMULA(ACCT_VALUE IN VARCHAR2
                                        ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(ACCT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    RETURN (JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_DESC(ACCT_SEG_VALUE_SET_ID
                                                  ,P_ACCT_LEVEL
                                                  ,ACCT_VALUE
                                                  ,ACCT_VALUE_DESC
                                                  ,P_ACCT_DELIMITER
                                                  ,4));
  END ACCT_LEVEL4_VALUE_DESCFORMULA;

  FUNCTION ACCT_LEVEL5_VALUEFORMULA(ACCT_VALUE IN VARCHAR2
                                   ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(ACCT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    RETURN (JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_VALUE(ACCT_SEG_VALUE_SET_ID
                                                   ,P_ACCT_LEVEL
                                                   ,ACCT_VALUE
                                                   ,ACCT_VALUE_DESC
                                                   ,P_ACCT_DELIMITER
                                                   ,5));
  END ACCT_LEVEL5_VALUEFORMULA;

  FUNCTION ACCT_LEVEL5_VALUE_DESCFORMULA(ACCT_VALUE IN VARCHAR2
                                        ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(ACCT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    RETURN (JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_DESC(ACCT_SEG_VALUE_SET_ID
                                                  ,P_ACCT_LEVEL
                                                  ,ACCT_VALUE
                                                  ,ACCT_VALUE_DESC
                                                  ,P_ACCT_DELIMITER
                                                  ,5));
  END ACCT_LEVEL5_VALUE_DESCFORMULA;

  FUNCTION ACCT_LEVEL6_VALUEFORMULA(ACCT_VALUE IN VARCHAR2
                                   ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(ACCT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    RETURN (JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_VALUE(ACCT_SEG_VALUE_SET_ID
                                                   ,P_ACCT_LEVEL
                                                   ,ACCT_VALUE
                                                   ,ACCT_VALUE_DESC
                                                   ,P_ACCT_DELIMITER
                                                   ,6));
  END ACCT_LEVEL6_VALUEFORMULA;

  FUNCTION ACCT_LEVEL6_VALUE_DESCFORMULA(ACCT_VALUE IN VARCHAR2
                                        ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(ACCT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    RETURN (JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_DESC(ACCT_SEG_VALUE_SET_ID
                                                  ,P_ACCT_LEVEL
                                                  ,ACCT_VALUE
                                                  ,ACCT_VALUE_DESC
                                                  ,P_ACCT_DELIMITER
                                                  ,6));
  END ACCT_LEVEL6_VALUE_DESCFORMULA;

  FUNCTION ACCT_LEVEL7_VALUEFORMULA(ACCT_VALUE IN VARCHAR2
                                   ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(ACCT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    RETURN (JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_VALUE(ACCT_SEG_VALUE_SET_ID
                                                   ,P_ACCT_LEVEL
                                                   ,ACCT_VALUE
                                                   ,ACCT_VALUE_DESC
                                                   ,P_ACCT_DELIMITER
                                                   ,7));
  END ACCT_LEVEL7_VALUEFORMULA;

  FUNCTION ACCT_LEVEL7_VALUE_DESCFORMULA(ACCT_VALUE IN VARCHAR2
                                        ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(ACCT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    RETURN (JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_DESC(ACCT_SEG_VALUE_SET_ID
                                                  ,P_ACCT_LEVEL
                                                  ,ACCT_VALUE
                                                  ,ACCT_VALUE_DESC
                                                  ,P_ACCT_DELIMITER
                                                  ,7));
  END ACCT_LEVEL7_VALUE_DESCFORMULA;

  FUNCTION ACCT_LEVEL8_VALUEFORMULA(ACCT_VALUE IN VARCHAR2
                                   ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(ACCT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    RETURN (JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_VALUE(ACCT_SEG_VALUE_SET_ID
                                                   ,P_ACCT_LEVEL
                                                   ,ACCT_VALUE
                                                   ,ACCT_VALUE_DESC
                                                   ,P_ACCT_DELIMITER
                                                   ,8));
  END ACCT_LEVEL8_VALUEFORMULA;

  FUNCTION ACCT_LEVEL8_VALUE_DESCFORMULA(ACCT_VALUE IN VARCHAR2
                                        ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(ACCT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    RETURN (JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_DESC(ACCT_SEG_VALUE_SET_ID
                                                  ,P_ACCT_LEVEL
                                                  ,ACCT_VALUE
                                                  ,ACCT_VALUE_DESC
                                                  ,P_ACCT_DELIMITER
                                                  ,8));
  END ACCT_LEVEL8_VALUE_DESCFORMULA;

  FUNCTION ACCT_LEVEL9_VALUEFORMULA(ACCT_VALUE IN VARCHAR2
                                   ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(ACCT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    RETURN (JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_VALUE(ACCT_SEG_VALUE_SET_ID
                                                   ,P_ACCT_LEVEL
                                                   ,ACCT_VALUE
                                                   ,ACCT_VALUE_DESC
                                                   ,P_ACCT_DELIMITER
                                                   ,9));
  END ACCT_LEVEL9_VALUEFORMULA;

  FUNCTION ACCT_LEVEL9_VALUE_DESCFORMULA(ACCT_VALUE IN VARCHAR2
                                        ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(ACCT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    RETURN (JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_DESC(ACCT_SEG_VALUE_SET_ID
                                                  ,P_ACCT_LEVEL
                                                  ,ACCT_VALUE
                                                  ,ACCT_VALUE_DESC
                                                  ,P_ACCT_DELIMITER
                                                  ,9));
  END ACCT_LEVEL9_VALUE_DESCFORMULA;

  FUNCTION ACCT_LEVEL10_VALUEFORMULA(ACCT_VALUE IN VARCHAR2
                                    ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(ACCT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    RETURN (JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_VALUE(ACCT_SEG_VALUE_SET_ID
                                                   ,P_ACCT_LEVEL
                                                   ,ACCT_VALUE
                                                   ,ACCT_VALUE_DESC
                                                   ,P_ACCT_DELIMITER
                                                   ,10));
  END ACCT_LEVEL10_VALUEFORMULA;

  FUNCTION ACCT_LEVEL10_VALUE_DESCFORMULA(ACCT_VALUE IN VARCHAR2
                                         ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(ACCT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    RETURN (JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_DESC(ACCT_SEG_VALUE_SET_ID
                                                  ,P_ACCT_LEVEL
                                                  ,ACCT_VALUE
                                                  ,ACCT_VALUE_DESC
                                                  ,P_ACCT_DELIMITER
                                                  ,10));
  END ACCT_LEVEL10_VALUE_DESCFORMULA;

  FUNCTION DATA_ACCESS_SET_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN DATA_ACCESS_SET_NAME;
  END DATA_ACCESS_SET_NAME_P;

  FUNCTION CHART_OF_ACCOUNTS_ID_P RETURN NUMBER IS
  BEGIN
    RETURN CHART_OF_ACCOUNTS_ID;
  END CHART_OF_ACCOUNTS_ID_P;

  FUNCTION DAS_WHERE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN DAS_WHERE;
  END DAS_WHERE_P;

  FUNCTION CURR_WHERE_JRNL_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CURR_WHERE_JRNL;
  END CURR_WHERE_JRNL_P;

  FUNCTION PERIOD_WHERE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PERIOD_WHERE;
  END PERIOD_WHERE_P;

  FUNCTION ACCT_WHERE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ACCT_WHERE;
  END ACCT_WHERE_P;

  FUNCTION SELECT_ACCOUNT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SELECT_ACCOUNT;
  END SELECT_ACCOUNT_P;

  FUNCTION SELECT_ACCT_SEG_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SELECT_ACCT_SEG;
  END SELECT_ACCT_SEG_P;

  FUNCTION SELECT_BAL_SEG_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SELECT_BAL_SEG;
  END SELECT_BAL_SEG_P;

  FUNCTION TEMP_ACCT_WHERE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TEMP_ACCT_WHERE;
  END TEMP_ACCT_WHERE_P;

  FUNCTION TEMP_LE_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TEMP_LE_NAME;
  END TEMP_LE_NAME_P;

  FUNCTION TEMP_TAX_PAYER_ID_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TEMP_TAX_PAYER_ID;
  END TEMP_TAX_PAYER_ID_P;

  FUNCTION TEMP_SERVICE_TYPE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TEMP_SERVICE_TYPE;
  END TEMP_SERVICE_TYPE_P;

  FUNCTION TEMP_ADDR1_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TEMP_ADDR1;
  END TEMP_ADDR1_P;

  FUNCTION TEMP_ADDR2_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TEMP_ADDR2;
  END TEMP_ADDR2_P;

  FUNCTION FP_START_DATE_P RETURN DATE IS
  BEGIN
    RETURN FP_START_DATE;
  END FP_START_DATE_P;

  FUNCTION TP_END_DATE_P RETURN DATE IS
  BEGIN
    RETURN TP_END_DATE;
  END TP_END_DATE_P;

  FUNCTION LE_WHERE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN LE_WHERE;
  END LE_WHERE_P;

  FUNCTION SELECT_IC_SEG_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SELECT_IC_SEG;
  END SELECT_IC_SEG_P;

  FUNCTION SELECT_MGT_SEG_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SELECT_MGT_SEG;
  END SELECT_MGT_SEG_P;

  FUNCTION SELECT_ST_SEG_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SELECT_ST_SEG;
  END SELECT_ST_SEG_P;

  FUNCTION SELECT_LE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SELECT_LE;
  END SELECT_LE_P;

  FUNCTION FROM_LNSV_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FROM_LNSV;
  END FROM_LNSV_P;

  FUNCTION REP_EXECUTION_DATE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN REP_EXECUTION_DATE;
  END REP_EXECUTION_DATE_P;

  FUNCTION TEMP_ADDR3_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TEMP_ADDR3;
  END TEMP_ADDR3_P;

  FUNCTION TEMP_TOWN_CITY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TEMP_TOWN_CITY;
  END TEMP_TOWN_CITY_P;

  FUNCTION TEMP_POSTAL_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TEMP_POSTAL_CODE;
  END TEMP_POSTAL_CODE_P;

  FUNCTION TEMP_LE_ID_P RETURN NUMBER IS
  BEGIN
    RETURN TEMP_LE_ID;
  END TEMP_LE_ID_P;

  FUNCTION START_DATE_PARAM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN START_DATE_PARAM;
  END START_DATE_PARAM_P;

  FUNCTION END_DATE_PARAM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN END_DATE_PARAM;
  END END_DATE_PARAM_P;

  FUNCTION SELECT_CC_SEG_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SELECT_CC_SEG;
  END SELECT_CC_SEG_P;

  FUNCTION PAGE_NUM_FORMAT_PARAM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PAGE_NUM_FORMAT_PARAM;
  END PAGE_NUM_FORMAT_PARAM_P;

  FUNCTION CURRENCY_TYPE_PARAM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CURRENCY_TYPE_PARAM;
  END CURRENCY_TYPE_PARAM_P;

  FUNCTION CURRENCY_PARAM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CURRENCY_PARAM;
  END CURRENCY_PARAM_P;

  FUNCTION ACCT_LEVEL_PARAM_P RETURN NUMBER IS
  BEGIN
    RETURN ACCT_LEVEL_PARAM;
  END ACCT_LEVEL_PARAM_P;

  FUNCTION PERIOD_TO_PARAM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PERIOD_TO_PARAM;
  END PERIOD_TO_PARAM_P;

  FUNCTION PERIOD_FROM_PARAM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PERIOD_FROM_PARAM;
  END PERIOD_FROM_PARAM_P;

  FUNCTION ACCT_TO_PARAM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ACCT_TO_PARAM;
  END ACCT_TO_PARAM_P;

  FUNCTION ACCT_FROM_PARAM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ACCT_FROM_PARAM;
  END ACCT_FROM_PARAM_P;

  FUNCTION LEDGER_CURRENCY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN LEDGER_CURRENCY;
  END LEDGER_CURRENCY_P;

  FUNCTION LEDGER_NAME_PARAM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN LEDGER_NAME_PARAM;
  END LEDGER_NAME_PARAM_P;

  FUNCTION F_PERIOD_NUM_P RETURN NUMBER IS
  BEGIN
    RETURN F_PERIOD_NUM;
  END F_PERIOD_NUM_P;

  FUNCTION T_PERIOD_NUM_P RETURN NUMBER IS
  BEGIN
    RETURN T_PERIOD_NUM;
  END T_PERIOD_NUM_P;

  FUNCTION BALANCE_TYPE_PARAM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN BALANCE_TYPE_PARAM;
  END BALANCE_TYPE_PARAM_P;

  FUNCTION BUDGETNAME_ENCUMBRANCETYPE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN BUDGETNAME_ENCUMBRANCETYPE;
  END BUDGETNAME_ENCUMBRANCETYPE_P;

  FUNCTION PAGE_NUM_START_PARAM_P RETURN NUMBER IS
  BEGIN
    RETURN PAGE_NUM_START_PARAM;
  END PAGE_NUM_START_PARAM_P;

  FUNCTION USER_PARAM_1_P RETURN VARCHAR2 IS
  BEGIN
    RETURN USER_PARAM_1;
  END USER_PARAM_1_P;

  FUNCTION USER_PARAM_2_P RETURN VARCHAR2 IS
  BEGIN
    RETURN USER_PARAM_2;
  END USER_PARAM_2_P;

  FUNCTION USER_PARAM_3_P RETURN VARCHAR2 IS
  BEGIN
    RETURN USER_PARAM_3;
  END USER_PARAM_3_P;

  FUNCTION USER_PARAM_4_P RETURN VARCHAR2 IS
  BEGIN
    RETURN USER_PARAM_4;
  END USER_PARAM_4_P;

  FUNCTION USER_PARAM_5_P RETURN VARCHAR2 IS
  BEGIN
    RETURN USER_PARAM_5;
  END USER_PARAM_5_P;

  FUNCTION CURR_WHERE_BAL_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CURR_WHERE_BAL;
  END CURR_WHERE_BAL_P;

  FUNCTION BUDENC_WHERE_JRNL_P RETURN VARCHAR2 IS
  BEGIN
    RETURN BUDENC_WHERE_JRNL;
  END BUDENC_WHERE_JRNL_P;

  FUNCTION BUDENC_WHERE_BAL_P RETURN VARCHAR2 IS
  BEGIN
    RETURN BUDENC_WHERE_BAL;
  END BUDENC_WHERE_BAL_P;

  FUNCTION BAL_CURRENCY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN BAL_CURRENCY;
  END BAL_CURRENCY_P;

  FUNCTION SELECT_DR_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SELECT_DR;
  END SELECT_DR_P;

  FUNCTION SELECT_CR_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SELECT_CR;
  END SELECT_CR_P;

  FUNCTION SELECT_BEGIN_BAL_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SELECT_BEGIN_BAL;
  END SELECT_BEGIN_BAL_P;

  FUNCTION ACCT_SEG_VALUE_SET_ID_P RETURN NUMBER IS
  BEGIN
    RETURN ACCT_SEG_VALUE_SET_ID;
  END ACCT_SEG_VALUE_SET_ID_P;

  FUNCTION SEG_SECURITY_WHERE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SEG_SECURITY_WHERE;
  END SEG_SECURITY_WHERE_P;

END JG_JGZZGLJRB_XMLP_PKG;




/
