--------------------------------------------------------
--  DDL for Package Body AK_PAGE_REGION_RELATIONS_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."AK_PAGE_REGION_RELATIONS_PKG" as
/* $Header: AKDPRGRB.pls 115.4 2002/01/18 11:35:36 pkm ship      $ */
procedure INSERT_ROW (
  X_FLOW_APPLICATION_ID in NUMBER,
  X_FLOW_CODE in VARCHAR2,
  X_FOREIGN_KEY_NAME in VARCHAR2,
  X_FROM_PAGE_APPL_ID in NUMBER,
  X_FROM_PAGE_CODE in VARCHAR2,
  X_FROM_REGION_APPL_ID in NUMBER,
  X_FROM_REGION_CODE in VARCHAR2,
  X_TO_PAGE_APPL_ID in NUMBER,
  X_TO_PAGE_CODE in VARCHAR2,
  X_TO_REGION_APPL_ID in NUMBER,
  X_TO_REGION_CODE in VARCHAR2,
  X_APPLICATION_ID in NUMBER,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
begin
    insert into AK_FLOW_REGION_RELATIONS (
      FLOW_APPLICATION_ID,
      FLOW_CODE,
      FOREIGN_KEY_NAME,
      FROM_PAGE_APPL_ID,
      FROM_PAGE_CODE,
      FROM_REGION_APPL_ID,
      FROM_REGION_CODE,
      TO_PAGE_APPL_ID,
      TO_PAGE_CODE,
      TO_REGION_APPL_ID,
      TO_REGION_CODE,
      APPLICATION_ID,
      CREATED_BY,
      CREATION_DATE,
      LAST_UPDATED_BY,
      LAST_UPDATE_DATE,
      LAST_UPDATE_LOGIN
    ) values (
      X_FLOW_APPLICATION_ID,
      X_FLOW_CODE,
      X_FOREIGN_KEY_NAME,
      X_FROM_PAGE_APPL_ID,
      X_FROM_PAGE_CODE,
      X_FROM_REGION_APPL_ID,
      X_FROM_REGION_CODE,
      X_TO_PAGE_APPL_ID,
      X_TO_PAGE_CODE,
      X_TO_REGION_APPL_ID,
      X_TO_REGION_CODE,
      X_APPLICATION_ID,
      X_CREATED_BY,
      X_CREATION_DATE,
      X_LAST_UPDATED_BY,
      X_LAST_UPDATE_DATE,
      X_LAST_UPDATE_LOGIN
    );
end INSERT_ROW;

procedure LOCK_ROW (
  X_FLOW_APPLICATION_ID in NUMBER,
  X_FLOW_CODE in VARCHAR2,
  X_OLD_FOREIGN_KEY_NAME in VARCHAR2,
  X_FROM_PAGE_APPL_ID in NUMBER,
  X_FROM_PAGE_CODE in VARCHAR2,
  X_OLD_FROM_REGION_APPL_ID in NUMBER,
  X_OLD_FROM_REGION_CODE in VARCHAR2,
  X_TO_PAGE_APPL_ID in NUMBER,
  X_TO_PAGE_CODE in VARCHAR2,
  X_OLD_TO_REGION_APPL_ID in NUMBER,
  X_OLD_TO_REGION_CODE in VARCHAR2
) is
  cursor c is select
      FLOW_APPLICATION_ID
    from AK_FLOW_REGION_RELATIONS
    where FLOW_APPLICATION_ID = X_FLOW_APPLICATION_ID
    and FLOW_CODE = X_FLOW_CODE
    and FOREIGN_KEY_NAME = X_OLD_FOREIGN_KEY_NAME
    and FROM_PAGE_APPL_ID = X_FROM_PAGE_APPL_ID
    and FROM_PAGE_CODE = X_FROM_PAGE_CODE
    and FROM_REGION_APPL_ID = X_OLD_FROM_REGION_APPL_ID
    and FROM_REGION_CODE = X_OLD_FROM_REGION_CODE
    and TO_PAGE_APPL_ID = X_TO_PAGE_APPL_ID
    and TO_PAGE_CODE = X_TO_PAGE_CODE
    and TO_REGION_APPL_ID = X_OLD_TO_REGION_APPL_ID
    and TO_REGION_CODE = X_OLD_TO_REGION_CODE
    for update of FLOW_APPLICATION_ID nowait;
  recinfo c%rowtype;

begin
  open c;
  fetch c into recinfo;
  if (c%notfound) then
      close c;
      fnd_message.set_name('FND', 'FORM_RECORD_DELETED');
      app_exception.raise_exception;
  end if;
  close c;
  if (NOT( (recinfo.FLOW_APPLICATION_ID = X_FLOW_APPLICATION_ID))) then
      fnd_message.set_name('FND', 'FND_RECORD_CHANGED');
      app_exception.raise_exception;
  end if;
  return;
end LOCK_ROW;

procedure UPDATE_ROW (
  X_FLOW_APPLICATION_ID in NUMBER,
  X_FLOW_CODE in VARCHAR2,
  X_FOREIGN_KEY_NAME in VARCHAR2,
  X_OLD_FOREIGN_KEY_NAME in VARCHAR2,
  X_FROM_PAGE_APPL_ID in NUMBER,
  X_FROM_PAGE_CODE in VARCHAR2,
  X_FROM_REGION_APPL_ID in NUMBER,
  X_FROM_REGION_CODE in VARCHAR2,
  X_OLD_FROM_REGION_APPL_ID in NUMBER,
  X_OLD_FROM_REGION_CODE in VARCHAR2,
  X_TO_PAGE_APPL_ID in NUMBER,
  X_TO_PAGE_CODE in VARCHAR2,
  X_TO_REGION_APPL_ID in NUMBER,
  X_TO_REGION_CODE in VARCHAR2,
  X_OLD_TO_REGION_APPL_ID in NUMBER,
  X_OLD_TO_REGION_CODE in VARCHAR2,
  X_APPLICATION_ID in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
begin
    update AK_FLOW_REGION_RELATIONS set
      FLOW_APPLICATION_ID = X_FLOW_APPLICATION_ID,
      FLOW_CODE = X_FLOW_CODE,
      FOREIGN_KEY_NAME = X_FOREIGN_KEY_NAME,
      FROM_PAGE_APPL_ID = X_FROM_PAGE_APPL_ID,
      FROM_PAGE_CODE = X_FROM_PAGE_CODE,
      FROM_REGION_APPL_ID = X_FROM_REGION_APPL_ID,
      FROM_REGION_CODE = X_FROM_REGION_CODE,
      TO_PAGE_APPL_ID = X_TO_PAGE_APPL_ID,
      TO_PAGE_CODE = X_TO_PAGE_CODE,
      TO_REGION_APPL_ID = X_TO_REGION_APPL_ID,
      TO_REGION_CODE = X_TO_REGION_CODE,
      APPLICATION_ID = X_APPLICATION_ID,
      LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
      LAST_UPDATED_BY = X_LAST_UPDATED_BY,
      LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN
    where FLOW_APPLICATION_ID = X_FLOW_APPLICATION_ID
    and FLOW_CODE = X_FLOW_CODE
    and FOREIGN_KEY_NAME = X_OLD_FOREIGN_KEY_NAME
    and FROM_PAGE_APPL_ID = X_FROM_PAGE_APPL_ID
    and FROM_PAGE_CODE = X_FROM_PAGE_CODE
    and FROM_REGION_APPL_ID = X_OLD_FROM_REGION_APPL_ID
    and FROM_REGION_CODE = X_OLD_FROM_REGION_CODE
    and TO_PAGE_APPL_ID = X_TO_PAGE_APPL_ID
    and TO_PAGE_CODE = X_TO_PAGE_CODE
    and TO_REGION_APPL_ID = X_OLD_TO_REGION_APPL_ID
    and TO_REGION_CODE = X_OLD_TO_REGION_CODE;

    if (sql%notfound) then
      raise no_data_found;
    end if;
end UPDATE_ROW;

procedure DELETE_ROW (
  X_FLOW_APPLICATION_ID in NUMBER,
  X_FLOW_CODE in VARCHAR2,
  X_FOREIGN_KEY_NAME in VARCHAR2,
  X_FROM_PAGE_APPL_ID in NUMBER,
  X_FROM_PAGE_CODE in VARCHAR2,
  X_FROM_REGION_APPL_ID in NUMBER,
  X_FROM_REGION_CODE in VARCHAR2,
  X_TO_PAGE_APPL_ID in NUMBER,
  X_TO_PAGE_CODE in VARCHAR2,
  X_TO_REGION_APPL_ID in NUMBER,
  X_TO_REGION_CODE in VARCHAR2
) is
begin
    delete from AK_FLOW_REGION_RELATIONS
    where FLOW_APPLICATION_ID = X_FLOW_APPLICATION_ID
    and FLOW_CODE = X_FLOW_CODE
    and FOREIGN_KEY_NAME = X_FOREIGN_KEY_NAME
    and FROM_PAGE_APPL_ID = X_FROM_PAGE_APPL_ID
    and FROM_PAGE_CODE = X_FROM_PAGE_CODE
    and FROM_REGION_APPL_ID = X_FROM_REGION_APPL_ID
    and FROM_REGION_CODE = X_FROM_REGION_CODE
    and TO_PAGE_APPL_ID = X_TO_PAGE_APPL_ID
    and TO_PAGE_CODE = X_TO_PAGE_CODE
    and TO_REGION_APPL_ID = X_TO_REGION_APPL_ID
    and TO_REGION_CODE = X_TO_REGION_CODE;

    if (sql%notfound) then
      raise no_data_found;
    end if;
end DELETE_ROW;
end AK_PAGE_REGION_RELATIONS_PKG;

/
