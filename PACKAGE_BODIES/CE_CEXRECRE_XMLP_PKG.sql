--------------------------------------------------------
--  DDL for Package Body CE_CEXRECRE_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."CE_CEXRECRE_XMLP_PKG" AS
/* $Header: CEXRECREB.pls 120.0 2007/12/28 07:56:22 abraghun noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      L_MESSAGE FND_NEW_MESSAGES.MESSAGE_TEXT%TYPE;
    BEGIN
      IF (P_TEST_LAYOUT = 'Y') THEN
        RAISE NO_DATA_FOUND;
      END IF;
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      INIT_SECURITY;
      BEGIN
        IF (P_BANK_ACCOUNT_ID IS NOT NULL) THEN
          BEGIN
            SELECT
              CB.SET_OF_BOOKS_ID,
              CB.CASHBOOK_BEGIN_DATE
            INTO
              C_SET_OF_BOOKS_ID
              ,C_CASHBOOK_BEGIN_DATE
            FROM
              CE_SYSTEM_PARAMETERS CB,
              CE_BANK_ACCTS_GT_V BA
            WHERE CB.LEGAL_ENTITY_ID = BA.ACCOUNT_OWNER_ORG_ID
              AND BA.BANK_ACCOUNT_ID = P_BANK_ACCOUNT_ID;
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              SET_NAME('CE'
                      ,'CE_PURGE_NO_SOB');
              L_MESSAGE := GET;
              RAISE_APPLICATION_ERROR(-20101
                                     ,NULL);
          END;
          IF (C_SET_OF_BOOKS_ID IS NOT NULL) THEN
            SELECT
              GL.SET_OF_BOOKS_ID,
              GL.CURRENCY_CODE,
              GL.CHART_OF_ACCOUNTS_ID,
              L.MEANING,
              P.END_DATE
            INTO
              C_SET_OF_BOOKS_ID
              ,C_GL_CURRENCY_CODE
              ,C_CHART_OF_ACCOUNTS_ID
              ,C_ALL_TRANSLATION
              ,C_AS_OF_DATE
            FROM
              GL_SETS_OF_BOOKS GL,
              CE_LOOKUPS L,
              GL_PERIOD_STATUSES P
            WHERE P.PERIOD_NAME = P_PERIOD_NAME
              AND P.APPLICATION_ID = 101
              AND P.SET_OF_BOOKS_ID = C_SET_OF_BOOKS_ID
              AND GL.SET_OF_BOOKS_ID = C_SET_OF_BOOKS_ID
              AND L.LOOKUP_TYPE = 'LITERAL'
              AND L.LOOKUP_CODE = 'ALL';
          END IF;
        END IF;
        SELECT
          ( G.SHORT_NAME || ': ' || SUBSTR(G.CURRENCY_CODE
                ,1
                ,5) )
        INTO
          C_NAME
        FROM
          GL_SETS_OF_BOOKS G
        WHERE G.SET_OF_BOOKS_ID = C_SET_OF_BOOKS_ID;
      EXCEPTION
        WHEN OTHERS THEN
          SET_NAME('CE'
                  ,'CE_PURGE_NO_SOB');
          L_MESSAGE := GET;
          RAISE_APPLICATION_ERROR(-20101
                                 ,NULL);
      END;
      IF (P_BANK_ACCOUNT_ID IS NOT NULL) THEN
        BEGIN
          SELECT
            ABB.BANK_BRANCH_NAME,
            ABB.BANK_NAME,
            ABA.BANK_ACCOUNT_NAME,
            ABA.BANK_ACCOUNT_NUM,
            ABA.CURRENCY_CODE,
            ABA.ASSET_CODE_COMBINATION_ID,
            ABA.CASH_CLEARING_CCID
          INTO
            C_BANK_BRANCH_DSP
            ,C_BANK_NAME_DSP
            ,C_ACCOUNT_NAME_DSP
            ,C_ACCOUNT_NUMBER_DSP
            ,C_BANK_CURR_DSP
            ,C_ASSET_CC_ID
            ,P_CLEARING_CCID
          FROM
            CE_BANK_BRANCHES_V ABB,
            CE_BANK_ACCTS_GT_V ABA
          WHERE ABB.BRANCH_PARTY_ID = ABA.BANK_BRANCH_ID
            AND ABA.BANK_ACCOUNT_ID = P_BANK_ACCOUNT_ID;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            SET_NAME('CE'
                    ,'CE_INVALID_BANK');
            L_MESSAGE := GET;
            RAISE_APPLICATION_ERROR(-20101
                                   ,NULL);
        END;
      ELSE
        C_ACCOUNT_NAME_DSP := C_ALL_TRANSLATION;
        C_ACCOUNT_NUMBER_DSP := C_ALL_TRANSLATION;
        C_BANK_CURR_DSP := C_ALL_TRANSLATION;
        C_BANK_NAME_DSP := C_ALL_TRANSLATION;
        C_BANK_BRANCH_DSP := C_ALL_TRANSLATION;
      END IF;
      IF (C_ASSET_CC_ID IS NOT NULL) THEN
        NULL;
      ELSE
        BEGIN
          SELECT
            DISTINCT
            GAC.ASSET_CODE_COMBINATION_ID
          INTO
            C_ASSET_CC_ID
          FROM
            CE_BANK_ACCT_USES_OU_V BAU,
            CE_GL_ACCOUNTS_CCID GAC
          WHERE GAC.BANK_ACCT_USE_ID = BAU.BANK_ACCT_USE_ID
            AND BAU.BANK_ACCOUNT_ID = P_BANK_ACCOUNT_ID;
          IF (C_ASSET_CC_ID IS NOT NULL) THEN
            NULL;
          END IF;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            SET_NAME('CE'
                    ,'CE_NO_ASSET_CC');
            L_MESSAGE := GET;
            RAISE_APPLICATION_ERROR(-20101
                                   ,NULL);
          WHEN TOO_MANY_ROWS THEN
            NULL;
        END;
      END IF;
      IF (P_RECON_ACCOUNTING_FLAG = 'Y') THEN
        IF (NVL(P_CLEARING_CCID
           ,C_ASSET_CC_ID) <> C_ASSET_CC_ID) THEN
          P_RECON_USED_FLAG := 'Y';
        ELSE
          P_RECON_USED_FLAG := 'N';
        END IF;
      ELSE
        P_RECON_USED_FLAG := 'N';
      END IF;
      IF (P_DEBUG_MODE = 'Y') THEN
        NULL;
      END IF;
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION C_REP_FLEXDATA_DSPFORMULA(C_FLEXDATA_DSP IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    RETURN (C_FLEXDATA_DSP);
  END C_REP_FLEXDATA_DSPFORMULA;

  FUNCTION C_DATEFORMATFORMULA(C_DATEFORMAT IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    RETURN (C_DATEFORMAT);
  END C_DATEFORMATFORMULA;

  FUNCTION CF_CLOSING_BALANCEFORMULA RETURN NUMBER IS
  BEGIN
    RETURN FND_NUMBER.CANONICAL_TO_NUMBER(P_CLOSING_BALANCE);
  END CF_CLOSING_BALANCEFORMULA;

  FUNCTION C_BANK_NAME_DSP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BANK_NAME_DSP;
  END C_BANK_NAME_DSP_P;

  FUNCTION C_ACCOUNT_NAME_DSP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_ACCOUNT_NAME_DSP;
  END C_ACCOUNT_NAME_DSP_P;

  FUNCTION C_BANK_BRANCH_DSP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BANK_BRANCH_DSP;
  END C_BANK_BRANCH_DSP_P;

  FUNCTION C_ALL_TRANSLATION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_ALL_TRANSLATION;
  END C_ALL_TRANSLATION_P;

  FUNCTION C_THE_END_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_THE_END;
  END C_THE_END_P;

  FUNCTION C_GL_CURRENCY_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_GL_CURRENCY_CODE;
  END C_GL_CURRENCY_CODE_P;

  FUNCTION C_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NAME;
  END C_NAME_P;

  FUNCTION C_SET_OF_BOOKS_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_SET_OF_BOOKS_ID;
  END C_SET_OF_BOOKS_ID_P;

  FUNCTION C_BANK_CURR_DSP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BANK_CURR_DSP;
  END C_BANK_CURR_DSP_P;

  FUNCTION C_ACCOUNT_NUMBER_DSP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_ACCOUNT_NUMBER_DSP;
  END C_ACCOUNT_NUMBER_DSP_P;

  FUNCTION C_ASSET_CC_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_ASSET_CC_ID;
  END C_ASSET_CC_ID_P;

  FUNCTION C_AS_OF_DATE_P RETURN DATE IS
  BEGIN
    RETURN C_AS_OF_DATE;
  END C_AS_OF_DATE_P;

  FUNCTION C_CHART_OF_ACCOUNTS_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_CHART_OF_ACCOUNTS_ID;
  END C_CHART_OF_ACCOUNTS_ID_P;

  FUNCTION C_FLEXDATA_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_FLEXDATA;
  END C_FLEXDATA_P;

  FUNCTION C_ADJUSTED_BANK_BALANCE_P RETURN NUMBER IS
  BEGIN
    RETURN C_ADJUSTED_BANK_BALANCE;
  END C_ADJUSTED_BANK_BALANCE_P;

  FUNCTION C_DIFFERENCE_P RETURN NUMBER IS
  BEGIN
    RETURN C_DIFFERENCE;
  END C_DIFFERENCE_P;




 /* PROCEDURE DEBUG(LINE IN VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin CEP_STANDARD.DEBUG(:LINE); end;');
    STPROC.BIND_I(LINE);
    STPROC.EXECUTE;
  END DEBUG;

  PROCEDURE ENABLE_DEBUG IS
  BEGIN
    STPROC.INIT('begin CEP_STANDARD.ENABLE_DEBUG; end;');
    STPROC.EXECUTE;
  END ENABLE_DEBUG;

  PROCEDURE DISABLE_DEBUG IS
  BEGIN
    STPROC.INIT('begin CEP_STANDARD.DISABLE_DEBUG; end;');
    STPROC.EXECUTE;
  END DISABLE_DEBUG;*/

  PROCEDURE INIT_SECURITY IS
  BEGIN
begin CEP_STANDARD.init_security; end;
   -- STPROC.EXECUTE;
  END INIT_SECURITY;

 /* FUNCTION GET_WINDOW_SESSION_TITLE RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := CEP_STANDARD.GET_WINDOW_SESSION_TITLE; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_WINDOW_SESSION_TITLE;

  FUNCTION GET_EFFECTIVE_DATE(P_BANK_ACCOUNT_ID IN NUMBER
                             ,P_TRX_CODE IN VARCHAR2
                             ,P_RECEIPT_DATE IN DATE) RETURN DATE IS
    X0 DATE;
  BEGIN
    STPROC.INIT('begin :X0 := CEP_STANDARD.GET_EFFECTIVE_DATE(:P_BANK_ACCOUNT_ID, :P_TRX_CODE, :P_RECEIPT_DATE); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_BANK_ACCOUNT_ID);
    STPROC.BIND_I(P_TRX_CODE);
    STPROC.BIND_I(P_RECEIPT_DATE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_EFFECTIVE_DATE;*/

  PROCEDURE SET_NAME(APPLICATION IN VARCHAR2
                    ,NAME IN VARCHAR2) IS
  BEGIN
    begin FND_MESSAGE.SET_NAME(APPLICATION, NAME); end; /*
    STPROC.BIND_I(APPLICATION);
    STPROC.BIND_I(NAME);
    STPROC.EXECUTE;*/
  END SET_NAME;

/*  PROCEDURE SET_TOKEN(TOKEN IN VARCHAR2
                     ,VALUE IN VARCHAR2
                     ,TRANSLATE IN BOOLEAN) IS
  BEGIN
    STPROC.INIT('declare TRANSLATE BOOLEAN; begin TRANSLATE := sys.diutil.int_to_bool(:TRANSLATE); FND_MESSAGE.SET_TOKEN(:TOKEN, :VALUE, TRANSLATE); end;');
    STPROC.BIND_I(TRANSLATE);
    STPROC.BIND_I(TOKEN);
    STPROC.BIND_I(VALUE);
    STPROC.EXECUTE;
  END SET_TOKEN;

  PROCEDURE RETRIEVE(MSGOUT OUT NOCOPY VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin FND_MESSAGE.RETRIEVE(:MSGOUT); end;');
    STPROC.BIND_O(MSGOUT);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,MSGOUT);
  END RETRIEVE;

  PROCEDURE CLEAR IS
  BEGIN
    STPROC.INIT('begin FND_MESSAGE.CLEAR; end;');
    STPROC.EXECUTE;
  END CLEAR;

  FUNCTION GET_STRING(APPIN IN VARCHAR2
                     ,NAMEIN IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := FND_MESSAGE.GET_STRING(:APPIN, :NAMEIN); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(APPIN);
    STPROC.BIND_I(NAMEIN);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_STRING;

  FUNCTION GET_NUMBER(APPIN IN VARCHAR2
                     ,NAMEIN IN VARCHAR2) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    STPROC.INIT('begin :X0 := FND_MESSAGE.GET_NUMBER(:APPIN, :NAMEIN); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(APPIN);
    STPROC.BIND_I(NAMEIN);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_NUMBER;*/

  FUNCTION GET RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
begin X0 := FND_MESSAGE.GET; end;/*
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    RETURN X0;
  END GET;

 /* FUNCTION GET_ENCODED RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := FND_MESSAGE.GET_ENCODED; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_ENCODED;

  PROCEDURE PARSE_ENCODED(ENCODED_MESSAGE IN VARCHAR2
                         ,APP_SHORT_NAME OUT NOCOPY VARCHAR2
                         ,MESSAGE_NAME OUT NOCOPY VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin FND_MESSAGE.PARSE_ENCODED(:ENCODED_MESSAGE, :APP_SHORT_NAME, :MESSAGE_NAME); end;');
    STPROC.BIND_I(ENCODED_MESSAGE);
    STPROC.BIND_O(APP_SHORT_NAME);
    STPROC.BIND_O(MESSAGE_NAME);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,APP_SHORT_NAME);
    STPROC.RETRIEVE(3
                   ,MESSAGE_NAME);
  END PARSE_ENCODED;

  PROCEDURE SET_ENCODED(ENCODED_MESSAGE IN VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin FND_MESSAGE.SET_ENCODED(:ENCODED_MESSAGE); end;');
    STPROC.BIND_I(ENCODED_MESSAGE);
    STPROC.EXECUTE;
  END SET_ENCODED;

  PROCEDURE RAISE_ERROR IS
  BEGIN
    STPROC.INIT('begin FND_MESSAGE.RAISE_ERROR; end;');
    STPROC.EXECUTE;
  END RAISE_ERROR;*/

END CE_CEXRECRE_XMLP_PKG;


/
