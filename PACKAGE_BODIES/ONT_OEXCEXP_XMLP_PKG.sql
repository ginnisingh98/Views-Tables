--------------------------------------------------------
--  DDL for Package Body ONT_OEXCEXP_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."ONT_OEXCEXP_XMLP_PKG" AS
/* $Header: OEXCEXPB.pls 120.1 2007/12/25 07:09:16 npannamp noship $ */
  FUNCTION CF_GET_RULE_NAMEFORMULA RETURN NUMBER IS
  BEGIN
    IF P_CR_CHECK_RULE_ID IS NOT NULL THEN
      SELECT
        NAME
      INTO CP_CHECK_RULE
      FROM
        OE_CREDIT_CHECK_RULES
      WHERE CREDIT_CHECK_RULE_ID = P_CR_CHECK_RULE_ID;
    END IF;
    RETURN (0);
  END CF_GET_RULE_NAMEFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'FAILED IN BEFORE REPORT TRIGGER')*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
        RETURN (FALSE);
    END;
    P_ORG_ID := MO_GLOBAL.GET_CURRENT_ORG_ID;
    /*SRW.MESSAGE(100
               ,' p_org_id:' || TO_CHAR(P_ORG_ID))*/NULL;
    /*SRW.MESSAGE(200
               ,' Calling OE_CREDIT_CHECK_RPT.Credit_exposure_report_utils')*/NULL;
    DECLARE
      L_SOB_NAME VARCHAR2(240);
    BEGIN
      SELECT
        SOB.NAME
      INTO L_SOB_NAME
      FROM
        GL_SETS_OF_BOOKS SOB
      WHERE SOB.SET_OF_BOOKS_ID = OE_SYS_PARAMETERS.VALUE('SET_OF_BOOKS_ID'
                             ,MO_GLOBAL.GET_CURRENT_ORG_ID);
      RP_COMPANY_NAME := L_SOB_NAME;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RP_COMPANY_NAME := NULL;
    END;
    BEGIN
      OE_CREDIT_CHECK_RPT.CREDIT_EXPOSURE_REPORT_UTILS(P_REPORT_BY_OPTION => P_REPORT_BY_OPTION
                                                      ,P_SPECIFIC_PARTY_ID => P_SPECIFIC_PARTY_ID
                                                      ,P_SPEC_PARTY_NUM_ID => P_SPEC_PARTY_NUM_ID
                                                      ,P_PARTY_NAME_LOW => P_PARTY_NAME_LOW
                                                      ,P_PARTY_NAME_HIGH => P_PARTY_NAME_HIGH
                                                      ,P_PARTY_NUMBER_LOW => P_PARTY_NUMBER_LOW
                                                      ,P_PARTY_NUMBER_HIGH => P_PARTY_NUMBER_HIGH
                                                      ,P_PROF_CLASS_LOW => P_PROF_CLASS_LOW
                                                      ,P_PROF_CLASS_HIGH => P_PROF_CLASS_HIGH
                                                      ,P_CUSTOMER_NAME_LOW => P_CUSTOMER_NAME_LOW
                                                      ,P_CUSTOMER_NAME_HIGH => P_CUSTOMER_NAME_HIGH
                                                      ,P_CUST_NUMBER_LOW => P_CUST_NUMBER_LOW
                                                      ,P_CUST_NUMBER_HIGH => P_CUST_NUMBER_HIGH
                                                      ,P_CR_CHECK_RULE_ID => P_CR_CHECK_RULE_ID
                                                      ,P_ORG_ID => P_ORG_ID
                                                      ,X_RETURN_STATUS => P_RETURN_STATUS);
      GET_HIERARCHY;
      /*SRW.MESSAGE(200
                 ,' OUT OE_CREDIT_CHECK_RPT.Credit_exposure_report_utils')*/NULL;
    EXCEPTION
      WHEN OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Credit_Check_Processor_API Unexpected Failure. Failed in BEFORE REPORT TRIGGER')*/NULL;
        RETURN (FALSE);
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION CF_GET_TOTAL_EXPOSUREFORMULA(CS_BASE_EXPOSURE_SUM IN NUMBER
                                       ,UNCHECKED_EXPOSURE IN NUMBER) RETURN NUMBER IS
  BEGIN
    CP_TOTAL_EXPOSURE := NVL(CS_BASE_EXPOSURE_SUM
                            ,0) + NVL(UNCHECKED_EXPOSURE
                            ,0);
    RETURN (0);
  END CF_GET_TOTAL_EXPOSUREFORMULA;

  FUNCTION CF_GET_OPER_UNITFORMULA RETURN NUMBER IS
  BEGIN
    SELECT
      NAME
    INTO CP_OPERATING_UNIT
    FROM
      HR_OPERATING_UNITS
    WHERE ORGANIZATION_ID = P_ORG_ID;
    RETURN (0);
  END CF_GET_OPER_UNITFORMULA;

  FUNCTION CF_GET_BASE_CURRFORMULA(BASE_CURRENCY2 IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    CP_BASE_CURRENCY := '(' || BASE_CURRENCY2 || ')';
    RETURN (0);
  END CF_GET_BASE_CURRFORMULA;

  FUNCTION CF_GET_SITE_TOTAL_EXPFORMULA(CS_SITE_EXPOSURE_SUM IN NUMBER
                                       ,D_UNCHECKED_EXPOSURE IN NUMBER) RETURN NUMBER IS
  BEGIN
    CP_SITE_TOTAL_EXPOSURE := NVL(CS_SITE_EXPOSURE_SUM
                                 ,0) + NVL(D_UNCHECKED_EXPOSURE
                                 ,0);
    RETURN (0);
  END CF_GET_SITE_TOTAL_EXPFORMULA;

  FUNCTION CF_GET_BASE_CURRENCY1FORMULA(D_BASE_CURRENCY IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    CP_BASE_CURRENCY1 := '(' || D_BASE_CURRENCY || ')';
    RETURN (0);
  END CF_GET_BASE_CURRENCY1FORMULA;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Failed in AFTER REPORT TRIGGER')*/NULL;
        RETURN (FALSE);
    END;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION CF_GET_LIMIT_G_TOTALFORMULA(D_CUSTOMER_ID IN NUMBER) RETURN NUMBER IS
  BEGIN
    SELECT
      SUM(BASE_CUR_OVERALL_LIMIT)
    INTO CP_CUST_LIMIT_GRAND_TOTAL
    FROM
      OE_CREDIT_EXPOSURE_TEMP
    WHERE CUSTOMER_ID = D_CUSTOMER_ID
      AND BILL_TO_SITE_ID IS NOT NULL;
    RETURN (0);
  END CF_GET_LIMIT_G_TOTALFORMULA;

  FUNCTION CF_GET_EXP_G_TOTALFORMULA(D_CUSTOMER_ID IN NUMBER) RETURN NUMBER IS
    L_EXPOSURE NUMBER;
    L_UNCHECKED_EXPOSURE NUMBER;
  BEGIN
    SELECT
      SUM(BASE_CUR_EXPOSURE)
    INTO L_EXPOSURE
    FROM
      OE_CREDIT_EXPOSURE_TEMP
    WHERE CUSTOMER_ID = D_CUSTOMER_ID
      AND BILL_TO_SITE_ID IS NOT NULL;
    SELECT
      SUM(UNCHECKED_EXPOSURE)
    INTO L_UNCHECKED_EXPOSURE
    FROM
      OE_CREDIT_EXPOSURE_TEMP
    WHERE CUSTOMER_ID = D_CUSTOMER_ID
      AND BILL_TO_SITE_ID IS NOT NULL;
    CP_CUST_EXPOSURE_GRAND_TOTAL := L_EXPOSURE + L_UNCHECKED_EXPOSURE;
    RETURN (0);
  END CF_GET_EXP_G_TOTALFORMULA;

  FUNCTION CF_GET_AVAIL_G_TOTALFO(D_CUSTOMER_ID IN NUMBER) RETURN NUMBER IS
  BEGIN
    SELECT
      SUM(BASE_CUR_AVAILABLE)
    INTO CP_CUST_AVAILABLE_GRAND_TOTAL
    FROM
      OE_CREDIT_EXPOSURE_TEMP
    WHERE CUSTOMER_ID = D_CUSTOMER_ID
      AND BILL_TO_SITE_ID IS NOT NULL;
    RETURN (0);
  END CF_GET_AVAIL_G_TOTALFO;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    IF P_REPORT_BY_OPTION = 'PARTY_SUMMARY' THEN
      IF P_PARTY_NAME_LOW IS NOT NULL OR P_PARTY_NAME_HIGH IS NOT NULL THEN
        P_ORDER_BY := 'order by party_name';
      ELSIF (P_PARTY_NUMBER_LOW IS NOT NULL OR P_PARTY_NUMBER_HIGH IS NOT NULL) AND (P_PARTY_NAME_LOW IS NULL AND P_PARTY_NAME_HIGH IS NULL) THEN
        P_ORDER_BY := 'order by party_number';
      END IF;
    ELSIF P_REPORT_BY_OPTION = 'CUST_SUMMARY' OR P_REPORT_BY_OPTION = 'CUST_DETAILS' THEN
      IF P_CUSTOMER_NAME_LOW IS NOT NULL OR P_CUSTOMER_NAME_HIGH IS NOT NULL THEN
        P_ORDER_BY := 'order by customer_name';
      ELSIF (P_CUST_NUMBER_LOW IS NOT NULL AND P_CUST_NUMBER_HIGH IS NOT NULL) AND (P_CUSTOMER_NAME_LOW IS NULL AND P_CUSTOMER_NAME_HIGH IS NULL) THEN
        P_ORDER_BY := 'order by customer_number';
      ELSIF (P_CUST_NUMBER_LOW IS NULL AND P_CUST_NUMBER_HIGH IS NULL) AND (P_CUSTOMER_NAME_LOW IS NULL AND P_CUSTOMER_NAME_HIGH IS NULL) THEN
        P_ORDER_BY := 'order by customer_name';
      END IF;
    ELSE
        P_ORDER_BY := ' ';
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION CF_PARTY_GET_TOTALSFORMULA(CS_PARTY_BASE_CUR_EXPOSURE_SUM IN NUMBER
                                     ,UNCHECKED_EXPOSURE_P IN NUMBER) RETURN NUMBER IS
  BEGIN
    CP_PARTY_EXP_GRAND_TOTAL := NVL(CS_PARTY_BASE_CUR_EXPOSURE_SUM
                                   ,0) + NVL(UNCHECKED_EXPOSURE_P
                                   ,0);
    RETURN (0);
  END CF_PARTY_GET_TOTALSFORMULA;

  FUNCTION CF_GET_PARTY_BASE_CURRENCYFORM(BASE_CURRENCY_P IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    CP_PARTY_BASE_CURRENCY := '(' || BASE_CURRENCY_P || ')';
    RETURN (0);
  END CF_GET_PARTY_BASE_CURRENCYFORM;

  FUNCTION CF_GET_REPORT_OPTIONFORMULA RETURN NUMBER IS
  BEGIN
    SELECT
      MEANING
    INTO CP_REPORT_OPTION
    FROM
      OE_LOOKUPS
    WHERE LOOKUP_TYPE = 'ONT_CC_EXC_REPORTBY_OPTION'
      AND ENABLED_FLAG = 'Y'
      AND LOOKUP_CODE = P_REPORT_BY_OPTION;
    RETURN (0);
  END CF_GET_REPORT_OPTIONFORMULA;

  FUNCTION CF_GET_BASE_CUR_DFORMULA(BASE_CURRENCY_D IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    CP_BASE_CURRENCY_D := '(' || BASE_CURRENCY_D || ')';
    RETURN (0);
  END CF_GET_BASE_CUR_DFORMULA;

  FUNCTION CF_GET_EXPOSURE_TOTAL_DFORMULA(CS_EXPOSURE_SUM_D IN NUMBER
                                         ,UNCHECKED_EXPOSURE_D IN NUMBER) RETURN NUMBER IS
  BEGIN
    CP_EXPOSURE_TOTAL_D := NVL(CS_EXPOSURE_SUM_D
                              ,0) + NVL(UNCHECKED_EXPOSURE_D
                              ,0);
    RETURN (0);
  END CF_GET_EXPOSURE_TOTAL_DFORMULA;

  FUNCTION CF_GET_HIERARCHY_NAMEFORMULA RETURN NUMBER IS
  BEGIN
    CP_HIERARCHY_NAME := FND_PROFILE.VALUE('AR_CMGT_HIERARCHY_TYPE');
    RETURN (0);
  END CF_GET_HIERARCHY_NAMEFORMULA;

  FUNCTION CF_GET_B_CURRENCY_CUSTFORMULA(BASE_CURRENCY_CUST IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    CP_BASE_CURRENCY_CUST := '(' || NVL(BASE_CURRENCY_CUST
                                ,' ') || ')';
    RETURN (0);
  END CF_GET_B_CURRENCY_CUSTFORMULA;

  FUNCTION CF_GET_EXP_AND_UNCHFORMULA(BASE_EXPOSURE_CUST IN NUMBER) RETURN NUMBER IS
  BEGIN
    CP_EXP_AND_UNCHECKED := NVL(BASE_EXPOSURE_CUST
                               ,0);
    RETURN (0);
  END CF_GET_EXP_AND_UNCHFORMULA;

  FUNCTION CF_GET_PARTY_NAME_TOTALFORMULA(PARTY_NAME IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    CP_PARTY_NAME_TOTAL_EXP := PARTY_NAME || ' Total:';
    RETURN (0);
  END CF_GET_PARTY_NAME_TOTALFORMULA;

  FUNCTION CF_GET_PARTY_NAME_UNFORMULA(PARTY_NAME IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    CP_PARTY_NAME_UNCHECK := 'Exposure not checked at ' || PARTY_NAME || ':';
    RETURN (0);
  END CF_GET_PARTY_NAME_UNFORMULA;

  FUNCTION CF_GET_PARTY_NAMEFORMULA RETURN NUMBER IS
  BEGIN
    IF P_SPECIFIC_PARTY_ID IS NOT NULL THEN
      SELECT
        DISTINCT
        PARTY_NAME
      INTO CP_PARTY_NAME
      FROM
        HZ_PARTIES
      WHERE PARTY_ID = P_SPECIFIC_PARTY_ID;
    ELSIF P_SPEC_PARTY_NUM_ID IS NOT NULL THEN
      SELECT
        DISTINCT
        PARTY_NUMBER
      INTO CP_PARTY_NUMBER
      FROM
        HZ_PARTIES
      WHERE PARTY_ID = P_SPEC_PARTY_NUM_ID;
    END IF;
    RETURN (0);
  END CF_GET_PARTY_NAMEFORMULA;

  PROCEDURE GET_HIERARCHY IS
    L_REL_TYPE VARCHAR2(100);
    L_TOP_PARENT NUMBER;
    L_MSG VARCHAR2(200);
    L_PARTY_NAME VARCHAR2(360);
    L_PARTY_NUMBER VARCHAR2(30);
    CURSOR HIER_CSR IS
      SELECT
        PARTY_ID
      FROM
        OE_CREDIT_HIERARCHY_TEMP;
  BEGIN
    FND_PROFILE.GET(NAME => 'AR_CMGT_HIERARCHY_TYPE'
                   ,VAL => L_REL_TYPE);
    SELECT
      A.PARENT_ID
    INTO L_TOP_PARENT
    FROM
      HZ_HIERARCHY_NODES A
    WHERE A.TOP_PARENT_FLAG = 'Y'
      AND A.HIERARCHY_TYPE = L_REL_TYPE
      AND A.CHILD_ID IN (
      SELECT
        B.PARENT_ID
      FROM
        HZ_HIERARCHY_NODES B
      WHERE B.HIERARCHY_TYPE = L_REL_TYPE
        AND B.CHILD_ID = NVL(P_SPECIFIC_PARTY_ID
         ,P_SPEC_PARTY_NUM_ID) );
    INSERT INTO OE_CREDIT_HIERARCHY_TEMP
      (PARTY_ID
      ,PARTY_PARENT_ID
      ,PARTY_NAME
      ,PARTY_NUMBER
      ,PARTY_LEVEL)
      SELECT
        PARTY_ID,
        NULL,
        P.PARTY_NAME,
        P.PARTY_NUMBER,
        0
      FROM
        HZ_PARTIES P
      WHERE P.PARTY_ID = L_TOP_PARENT;
    INSERT INTO OE_CREDIT_HIERARCHY_TEMP
      (PARTY_ID
      ,PARTY_PARENT_ID
      ,PARTY_LEVEL)
      SELECT
        OBJECT_ID,
        SUBJECT_ID,
        LEVEL
      FROM
        HZ_RELATIONSHIPS
      WHERE RELATIONSHIP_TYPE = L_REL_TYPE
      START WITH SUBJECT_ID = L_TOP_PARENT
      CONNECT BY PRIOR OBJECT_ID = SUBJECT_ID
        AND DIRECTION_CODE = 'P';
    FOR hier_csr_rec IN HIER_CSR LOOP
      SELECT
        PARTY_NAME,
        PARTY_NUMBER
      INTO L_PARTY_NAME,L_PARTY_NUMBER
      FROM
        HZ_PARTIES
      WHERE PARTY_ID = HIER_CSR_REC.PARTY_ID;
      UPDATE
        OE_CREDIT_HIERARCHY_TEMP
      SET
        PARTY_NAME = L_PARTY_NAME
        ,PARTY_NUMBER = L_PARTY_NUMBER
      WHERE PARTY_ID = HIER_CSR_REC.PARTY_ID;
    END LOOP;
  EXCEPTION
    WHEN OTHERS THEN
      L_MSG := SQLERRM;
      /*SRW.MESSAGE(400
                 ,'Error in Get_Hierarchy:' || L_MSG)*/NULL;
  END GET_HIERARCHY;

  FUNCTION CF_TOTAL_UNCHECKED_EXP_CUSTFOR(CS_TOTAL_EXP_AND_UNCH IN NUMBER
                                         ,UNCHECKED_EXPOSURE_CUST IN NUMBER) RETURN NUMBER IS
  BEGIN
    CP_TOTAL_UNCHECKED_EXP_CUST := 0;
    CP_TOTAL_UNCHECKED_EXP_CUST := NVL(CS_TOTAL_EXP_AND_UNCH
                                      ,0) + NVL(UNCHECKED_EXPOSURE_CUST
                                      ,0);
    RETURN (0);
  END CF_TOTAL_UNCHECKED_EXP_CUSTFOR;

  FUNCTION CF_TOTAL_AVAIL_PARTY_CUSTFORMU(CS_TOTAL_OVERALL_CUST IN NUMBER) RETURN NUMBER IS
  BEGIN
    CP_TOTAL_AVAIL_PARTY_CUST := 0;
    CP_TOTAL_AVAIL_PARTY_CUST := CS_TOTAL_OVERALL_CUST - NVL(CP_TOTAL_UNCHECKED_EXP_CUST
                                    ,0);
    RETURN (0);
  END CF_TOTAL_AVAIL_PARTY_CUSTFORMU;

  FUNCTION CF_PARTY_SUM_GRAND_AVAILFORMUL(CS_PARTY_BASE_CUR_OVERALL_SUM IN NUMBER) RETURN NUMBER IS
  BEGIN
    CP_PARTY_SUM_GRAND_AVAIL := 0;
    CP_PARTY_SUM_GRAND_AVAIL := NVL(CS_PARTY_BASE_CUR_OVERALL_SUM
                                   ,0) - NVL(CP_PARTY_EXP_GRAND_TOTAL
                                   ,0);
    RETURN (0);
  END CF_PARTY_SUM_GRAND_AVAILFORMUL;

  FUNCTION CF_PARTY_DTL_GRAND_TOTAL_AVAIL(CS_OVERALL_LIMIT_SUM_D IN NUMBER) RETURN NUMBER IS
  BEGIN
    CP_PARTY_DTL_GRAND_TOTAL_AVAIL := 0;
    CP_PARTY_DTL_GRAND_TOTAL_AVAIL := NVL(CS_OVERALL_LIMIT_SUM_D
                                         ,0) - NVL(CP_EXPOSURE_TOTAL_D
                                         ,0);
    RETURN (0);
  END CF_PARTY_DTL_GRAND_TOTAL_AVAIL;

  FUNCTION CP_PARTY_NAMEFORMULA RETURN CHAR IS
  BEGIN
    NULL;
  END CP_PARTY_NAMEFORMULA;

  FUNCTION CP_TOTAL_EXPOSURE_P RETURN NUMBER IS
  BEGIN
    RETURN CP_TOTAL_EXPOSURE;
  END CP_TOTAL_EXPOSURE_P;

  FUNCTION CP_BASE_CURRENCY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_BASE_CURRENCY;
  END CP_BASE_CURRENCY_P;

  FUNCTION CP_CUST_LIMIT_GRAND_TOTAL_P RETURN NUMBER IS
  BEGIN
    RETURN CP_CUST_LIMIT_GRAND_TOTAL;
  END CP_CUST_LIMIT_GRAND_TOTAL_P;

  FUNCTION CP_CUST_EXPOSURE_GRAND_TOTAL_P RETURN NUMBER IS
  BEGIN
    RETURN CP_CUST_EXPOSURE_GRAND_TOTAL;
  END CP_CUST_EXPOSURE_GRAND_TOTAL_P;

  FUNCTION CP_CUST_AVAILABLE_GRAND_TOT_P RETURN NUMBER IS
  BEGIN
    RETURN CP_CUST_AVAILABLE_GRAND_TOTAL;
  END CP_CUST_AVAILABLE_GRAND_TOT_P;

  FUNCTION CP_SITE_TOTAL_EXPOSURE_P RETURN NUMBER IS
  BEGIN
    RETURN CP_SITE_TOTAL_EXPOSURE;
  END CP_SITE_TOTAL_EXPOSURE_P;

  FUNCTION CP_BASE_CURRENCY1_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_BASE_CURRENCY1;
  END CP_BASE_CURRENCY1_P;

  FUNCTION CP_UNCHECKED_EXPOSURE_P RETURN NUMBER IS
  BEGIN
    RETURN CP_UNCHECKED_EXPOSURE;
  END CP_UNCHECKED_EXPOSURE_P;

  FUNCTION CP_PARTY_EXP_GRAND_TOTAL_P RETURN NUMBER IS
  BEGIN
    RETURN CP_PARTY_EXP_GRAND_TOTAL;
  END CP_PARTY_EXP_GRAND_TOTAL_P;

  FUNCTION CP_PARTY_BASE_CURRENCY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_PARTY_BASE_CURRENCY;
  END CP_PARTY_BASE_CURRENCY_P;

  FUNCTION CP_PARTY_NAME_TOTAL_EXP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_PARTY_NAME_TOTAL_EXP;
  END CP_PARTY_NAME_TOTAL_EXP_P;

  FUNCTION CP_PARTY_NAME_UNCHECK_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_PARTY_NAME_UNCHECK;
  END CP_PARTY_NAME_UNCHECK_P;

  FUNCTION CP_PARTY_SUM_GRAND_AVAIL_P RETURN NUMBER IS
  BEGIN
    RETURN CP_PARTY_SUM_GRAND_AVAIL;
  END CP_PARTY_SUM_GRAND_AVAIL_P;

  FUNCTION CP_BASE_CURRENCY_D_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_BASE_CURRENCY_D;
  END CP_BASE_CURRENCY_D_P;

  FUNCTION CP_EXPOSURE_TOTAL_D_P RETURN NUMBER IS
  BEGIN
    RETURN CP_EXPOSURE_TOTAL_D;
  END CP_EXPOSURE_TOTAL_D_P;

  FUNCTION CP_PARTY_DTL_GRAND_TOTAL_AVAI RETURN NUMBER IS
  BEGIN
    RETURN CP_PARTY_DTL_GRAND_TOTAL_AVAIL;
  END CP_PARTY_DTL_GRAND_TOTAL_AVAI;

  FUNCTION CP_BASE_CURRENCY_CUST_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_BASE_CURRENCY_CUST;
  END CP_BASE_CURRENCY_CUST_P;

  FUNCTION CP_TOTAL_UNCHECKED_EXP_CUST_P RETURN NUMBER IS
  BEGIN
    RETURN CP_TOTAL_UNCHECKED_EXP_CUST;
  END CP_TOTAL_UNCHECKED_EXP_CUST_P;

  FUNCTION CP_TOTAL_AVAIL_PARTY_CUST_P RETURN NUMBER IS
  BEGIN
    RETURN CP_TOTAL_AVAIL_PARTY_CUST;
  END CP_TOTAL_AVAIL_PARTY_CUST_P;

  FUNCTION CP_EXP_AND_UNCHECKED_P RETURN NUMBER IS
  BEGIN
    RETURN CP_EXP_AND_UNCHECKED;
  END CP_EXP_AND_UNCHECKED_P;

  FUNCTION CP_CUSTOMER_LOW_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_CUSTOMER_LOW;
  END CP_CUSTOMER_LOW_P;

  FUNCTION CP_CUSTOMER_HIGH_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_CUSTOMER_HIGH;
  END CP_CUSTOMER_HIGH_P;

  FUNCTION CP_PROF_CLASS_LOW_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_PROF_CLASS_LOW;
  END CP_PROF_CLASS_LOW_P;

  FUNCTION CP_PROF_CLASS_HIGH_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_PROF_CLASS_HIGH;
  END CP_PROF_CLASS_HIGH_P;

  FUNCTION CP_CUST_NUM_LOW_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_CUST_NUM_LOW;
  END CP_CUST_NUM_LOW_P;

  FUNCTION CP_CUST_NUM_HIGH_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_CUST_NUM_HIGH;
  END CP_CUST_NUM_HIGH_P;

  FUNCTION CP_OPERATING_UNIT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_OPERATING_UNIT;
  END CP_OPERATING_UNIT_P;

  FUNCTION CP_REPORT_OPTION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_REPORT_OPTION;
  END CP_REPORT_OPTION_P;

  FUNCTION CP_HIERARCHY_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_HIERARCHY_NAME;
  END CP_HIERARCHY_NAME_P;

  FUNCTION CP_PARTY_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_PARTY_NAME;
  END CP_PARTY_NAME_P;

  FUNCTION CP_PARTY_NUMBER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_PARTY_NUMBER;
  END CP_PARTY_NUMBER_P;

  FUNCTION CP_CHECK_RULE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_CHECK_RULE;
  END CP_CHECK_RULE_P;

  FUNCTION RP_COMPANY_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_COMPANY_NAME;
  END RP_COMPANY_NAME_P;

 FUNCTION M_HIERARCHYFORMATTRIGGER RETURN VARCHAR2 IS
 L_COUNT NUMBER;
 L_PROFILE VARCHAR2(100);

 BEGIN
 FND_PROFILE.GET( NAME => 'AR_CMGT_HIERARCHY_TYPE'
                , VAL  => L_PROFILE);

  IF P_SPECIFIC_PARTY_ID IS NOT NULL
  THEN
    SELECT COUNT(1)
    INTO L_COUNT
    FROM HZ_RELATIONSHIPS
    WHERE RELATIONSHIP_TYPE=L_PROFILE
      AND (SUBJECT_ID=P_SPECIFIC_PARTY_ID
          OR OBJECT_ID=P_SPECIFIC_PARTY_ID);

  ELSIF P_SPEC_PARTY_NUM_ID IS NOT NULL
  THEN
    SELECT COUNT(1)
    INTO L_COUNT
    FROM HZ_RELATIONSHIPS
    WHERE RELATIONSHIP_TYPE=L_PROFILE
      AND (SUBJECT_ID=P_SPEC_PARTY_NUM_ID
        OR OBJECT_ID=P_SPEC_PARTY_NUM_ID);

  END IF;

  IF P_REPORT_BY_OPTION='PARTY_DETAILS'
    AND L_COUNT<>0
  THEN
  RETURN ('TRUE');
  ELSE
  RETURN('FALSE');
  END IF;
END M_HIERARCHYFORMATTRIGGER;

FUNCTION M_9FORMATTRIGGER RETURN NUMBER IS

 L_COUNT NUMBER;

BEGIN
  SELECT COUNT(1)
  INTO L_COUNT
  FROM OE_CREDIT_HIERARCHY_TEMP;

 /* IF L_COUNT=0
  THEN
  RETURN(L_COUNT);
  ELSE
  RETURN (L_COUNT);
  END IF;*/
  RETURN(L_COUNT);

END M_9FORMATTRIGGER;

FUNCTION M_6FORMATTRIGGER RETURN VARCHAR2 IS

L_COUNT NUMBER;

BEGIN
  SELECT COUNT(1)
  INTO L_COUNT
  FROM OE_CREDIT_EXPOSURE_TEMP
  WHERE PARTY_ID IS NOT NULL
  AND CUSTOMER_ID IS NOT NULL
  AND REPORT_BY_OPTION='PARTY_DETAILS';

  IF P_REPORT_BY_OPTION='PARTY_DETAILS'
  AND L_COUNT>0
  THEN
  RETURN ('TRUE');
  ELSE
  RETURN('FALSE');
  END IF;
END M_6FORMATTRIGGER;

END ONT_OEXCEXP_XMLP_PKG;


/
