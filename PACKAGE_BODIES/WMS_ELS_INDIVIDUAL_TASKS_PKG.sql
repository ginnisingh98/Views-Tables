--------------------------------------------------------
--  DDL for Package Body WMS_ELS_INDIVIDUAL_TASKS_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."WMS_ELS_INDIVIDUAL_TASKS_PKG" as
/* $Header: WMSLMITB.pls 120.0 2005/10/27 03:41:25 rvedulla noship $ */

procedure INSERT_ROW (
  X_ROWID in out nocopy VARCHAR2,
  X_ELS_DATA_ID in NUMBER,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_ORGANIZATION_ID in NUMBER,
  X_SEQUENCE_NUMBER in NUMBER,
  X_ANALYSIS_ID in NUMBER,
  X_ACTIVITY_ID in NUMBER,
  X_ACTIVITY_DETAIL_ID in NUMBER,
  X_OPERATION_ID in NUMBER,
  X_EQUIPMENT_ID in NUMBER,
  X_SOURCE_ZONE_ID in NUMBER,
  X_SOURCE_SUBINVENTORY in VARCHAR2,
  X_DESTINATION_ZONE_ID in NUMBER,
  X_DESTINATION_SUBINVENTORY in VARCHAR2,
  X_LABOR_TXN_SOURCE_ID in NUMBER,
  X_TRANSACTION_UOM in VARCHAR2,
  X_FROM_QUANTITY in NUMBER,
  X_TO_QUANTITY in NUMBER,
  X_ITEM_CATEGORY_ID in NUMBER,
  X_OPERATION_PLAN_ID in NUMBER,
  X_GROUP_ID in NUMBER,
  X_TASK_TYPE_ID in NUMBER,
  X_TASK_METHOD_ID in NUMBER,
  X_EXPECTED_TRAVEL_TIME in NUMBER,
  X_EXPECTED_TXN_TIME in NUMBER,
  X_EXPECTED_IDLE_TIME in NUMBER,
  X_ACTUAL_TRAVEL_TIME in NUMBER,
  X_ACTUAL_TXN_TIME in NUMBER,
  X_ACTUAL_IDLE_TIME in NUMBER,
  X_TRAVEL_TIME_THRESHOLD in NUMBER,
  X_HISTORY_FLAG in NUMBER,
  X_ARCHIVE_DATE in DATE,
  X_NUM_TRX_MATCHED in NUMBER,
  X_DESCRIPTION in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
  cursor C is select ROWID from WMS_ELS_INDIVIDUAL_TASKS_B
    where ELS_DATA_ID = X_ELS_DATA_ID
    ;
begin
  insert into WMS_ELS_INDIVIDUAL_TASKS_B (
    ATTRIBUTE_CATEGORY,
    ATTRIBUTE1,
    ATTRIBUTE2,
    ATTRIBUTE3,
    ATTRIBUTE4,
    ATTRIBUTE5,
    ATTRIBUTE6,
    ATTRIBUTE7,
    ATTRIBUTE8,
    ATTRIBUTE9,
    ATTRIBUTE10,
    ATTRIBUTE11,
    ATTRIBUTE12,
    ATTRIBUTE13,
    ATTRIBUTE14,
    ATTRIBUTE15,
    ELS_DATA_ID,
    ORGANIZATION_ID,
    SEQUENCE_NUMBER,
    ANALYSIS_ID,
    ACTIVITY_ID,
    ACTIVITY_DETAIL_ID,
    OPERATION_ID,
    EQUIPMENT_ID,
    SOURCE_ZONE_ID,
    SOURCE_SUBINVENTORY,
    DESTINATION_ZONE_ID,
    DESTINATION_SUBINVENTORY,
    LABOR_TXN_SOURCE_ID,
    TRANSACTION_UOM,
    FROM_QUANTITY,
    TO_QUANTITY,
    ITEM_CATEGORY_ID,
    OPERATION_PLAN_ID,
    GROUP_ID,
    TASK_TYPE_ID,
    TASK_METHOD_ID,
    EXPECTED_TRAVEL_TIME,
    EXPECTED_TXN_TIME,
    EXPECTED_IDLE_TIME,
    ACTUAL_TRAVEL_TIME,
    ACTUAL_TXN_TIME,
    ACTUAL_IDLE_TIME,
    TRAVEL_TIME_THRESHOLD,
    HISTORY_FLAG,
    ARCHIVE_DATE,
    NUM_TRX_MATCHED,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN
  ) values (
    X_ATTRIBUTE_CATEGORY,
    X_ATTRIBUTE1,
    X_ATTRIBUTE2,
    X_ATTRIBUTE3,
    X_ATTRIBUTE4,
    X_ATTRIBUTE5,
    X_ATTRIBUTE6,
    X_ATTRIBUTE7,
    X_ATTRIBUTE8,
    X_ATTRIBUTE9,
    X_ATTRIBUTE10,
    X_ATTRIBUTE11,
    X_ATTRIBUTE12,
    X_ATTRIBUTE13,
    X_ATTRIBUTE14,
    X_ATTRIBUTE15,
    X_ELS_DATA_ID,
    X_ORGANIZATION_ID,
    X_SEQUENCE_NUMBER,
    X_ANALYSIS_ID,
    X_ACTIVITY_ID,
    X_ACTIVITY_DETAIL_ID,
    X_OPERATION_ID,
    X_EQUIPMENT_ID,
    X_SOURCE_ZONE_ID,
    X_SOURCE_SUBINVENTORY,
    X_DESTINATION_ZONE_ID,
    X_DESTINATION_SUBINVENTORY,
    X_LABOR_TXN_SOURCE_ID,
    X_TRANSACTION_UOM,
    X_FROM_QUANTITY,
    X_TO_QUANTITY,
    X_ITEM_CATEGORY_ID,
    X_OPERATION_PLAN_ID,
    X_GROUP_ID,
    X_TASK_TYPE_ID,
    X_TASK_METHOD_ID,
    X_EXPECTED_TRAVEL_TIME,
    X_EXPECTED_TXN_TIME,
    X_EXPECTED_IDLE_TIME,
    X_ACTUAL_TRAVEL_TIME,
    X_ACTUAL_TXN_TIME,
    X_ACTUAL_IDLE_TIME,
    X_TRAVEL_TIME_THRESHOLD,
    X_HISTORY_FLAG,
    X_ARCHIVE_DATE,
    X_NUM_TRX_MATCHED,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN
  );

  insert into WMS_ELS_INDIVIDUAL_TASKS_TL (
    ELS_DATA_ID,
    DESCRIPTION,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATE_DATE,
    LANGUAGE,
    SOURCE_LANG
  ) select
    X_ELS_DATA_ID,
    X_DESCRIPTION,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN,
    X_CREATED_BY,
    X_CREATION_DATE,
    X_LAST_UPDATE_DATE,
    L.LANGUAGE_CODE,
    userenv('LANG')
  from FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and not exists
    (select NULL
    from WMS_ELS_INDIVIDUAL_TASKS_TL T
    where T.ELS_DATA_ID = X_ELS_DATA_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);

  open c;
  fetch c into X_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

end INSERT_ROW;




procedure LOCK_ROW (
  X_ELS_DATA_ID in NUMBER,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_ORGANIZATION_ID in NUMBER,
  X_SEQUENCE_NUMBER in NUMBER,
  X_ANALYSIS_ID in NUMBER,
  X_ACTIVITY_ID in NUMBER,
  X_ACTIVITY_DETAIL_ID in NUMBER,
  X_OPERATION_ID in NUMBER,
  X_EQUIPMENT_ID in NUMBER,
  X_SOURCE_ZONE_ID in NUMBER,
  X_SOURCE_SUBINVENTORY in VARCHAR2,
  X_DESTINATION_ZONE_ID in NUMBER,
  X_DESTINATION_SUBINVENTORY in VARCHAR2,
  X_LABOR_TXN_SOURCE_ID in NUMBER,
  X_TRANSACTION_UOM in VARCHAR2,
  X_FROM_QUANTITY in NUMBER,
  X_TO_QUANTITY in NUMBER,
  X_ITEM_CATEGORY_ID in NUMBER,
  X_OPERATION_PLAN_ID in NUMBER,
  X_GROUP_ID in NUMBER,
  X_TASK_TYPE_ID in NUMBER,
  X_TASK_METHOD_ID in NUMBER,
  X_EXPECTED_TRAVEL_TIME in NUMBER,
  X_EXPECTED_TXN_TIME in NUMBER,
  X_EXPECTED_IDLE_TIME in NUMBER,
  X_ACTUAL_TRAVEL_TIME in NUMBER,
  X_ACTUAL_TXN_TIME in NUMBER,
  X_ACTUAL_IDLE_TIME in NUMBER,
  X_TRAVEL_TIME_THRESHOLD in NUMBER,
  X_HISTORY_FLAG in NUMBER,
  X_ARCHIVE_DATE in DATE,
  X_NUM_TRX_MATCHED in NUMBER,
  X_DESCRIPTION in VARCHAR2
) is
  cursor c is select
      ATTRIBUTE_CATEGORY,
      ATTRIBUTE1,
      ATTRIBUTE2,
      ATTRIBUTE3,
      ATTRIBUTE4,
      ATTRIBUTE5,
      ATTRIBUTE6,
      ATTRIBUTE7,
      ATTRIBUTE8,
      ATTRIBUTE9,
      ATTRIBUTE10,
      ATTRIBUTE11,
      ATTRIBUTE12,
      ATTRIBUTE13,
      ATTRIBUTE14,
      ATTRIBUTE15,
      ORGANIZATION_ID,
      SEQUENCE_NUMBER,
      ANALYSIS_ID,
      ACTIVITY_ID,
      ACTIVITY_DETAIL_ID,
      OPERATION_ID,
      EQUIPMENT_ID,
      SOURCE_ZONE_ID,
      SOURCE_SUBINVENTORY,
      DESTINATION_ZONE_ID,
      DESTINATION_SUBINVENTORY,
      LABOR_TXN_SOURCE_ID,
      TRANSACTION_UOM,
      FROM_QUANTITY,
      TO_QUANTITY,
      ITEM_CATEGORY_ID,
      OPERATION_PLAN_ID,
      GROUP_ID,
      TASK_TYPE_ID,
      TASK_METHOD_ID,
      EXPECTED_TRAVEL_TIME,
      EXPECTED_TXN_TIME,
      EXPECTED_IDLE_TIME,
      ACTUAL_TRAVEL_TIME,
      ACTUAL_TXN_TIME,
      ACTUAL_IDLE_TIME,
      TRAVEL_TIME_THRESHOLD,
      HISTORY_FLAG,
      ARCHIVE_DATE,
      NUM_TRX_MATCHED
    from WMS_ELS_INDIVIDUAL_TASKS_B
    where ELS_DATA_ID = X_ELS_DATA_ID
    for update of ELS_DATA_ID nowait;
  recinfo c%rowtype;

  cursor c1 is select
      DESCRIPTION,
      decode(LANGUAGE, userenv('LANG'), 'Y', 'N') BASELANG
    from WMS_ELS_INDIVIDUAL_TASKS_TL
    where ELS_DATA_ID = X_ELS_DATA_ID
    and userenv('LANG') in (LANGUAGE, SOURCE_LANG)
    for update of ELS_DATA_ID nowait;
begin
  open c;
  fetch c into recinfo;
  if (c%notfound) then
    close c;
    fnd_message.set_name('FND', 'FORM_RECORD_DELETED');
    app_exception.raise_exception;
  end if;
  close c;
  if (    ((recinfo.ATTRIBUTE_CATEGORY = X_ATTRIBUTE_CATEGORY)
           OR ((recinfo.ATTRIBUTE_CATEGORY is null) AND (X_ATTRIBUTE_CATEGORY is null)))
      AND ((recinfo.ATTRIBUTE1 = X_ATTRIBUTE1)
           OR ((recinfo.ATTRIBUTE1 is null) AND (X_ATTRIBUTE1 is null)))
      AND ((recinfo.ATTRIBUTE2 = X_ATTRIBUTE2)
           OR ((recinfo.ATTRIBUTE2 is null) AND (X_ATTRIBUTE2 is null)))
      AND ((recinfo.ATTRIBUTE3 = X_ATTRIBUTE3)
           OR ((recinfo.ATTRIBUTE3 is null) AND (X_ATTRIBUTE3 is null)))
      AND ((recinfo.ATTRIBUTE4 = X_ATTRIBUTE4)
           OR ((recinfo.ATTRIBUTE4 is null) AND (X_ATTRIBUTE4 is null)))
      AND ((recinfo.ATTRIBUTE5 = X_ATTRIBUTE5)
           OR ((recinfo.ATTRIBUTE5 is null) AND (X_ATTRIBUTE5 is null)))
      AND ((recinfo.ATTRIBUTE6 = X_ATTRIBUTE6)
           OR ((recinfo.ATTRIBUTE6 is null) AND (X_ATTRIBUTE6 is null)))
      AND ((recinfo.ATTRIBUTE7 = X_ATTRIBUTE7)
           OR ((recinfo.ATTRIBUTE7 is null) AND (X_ATTRIBUTE7 is null)))
      AND ((recinfo.ATTRIBUTE8 = X_ATTRIBUTE8)
           OR ((recinfo.ATTRIBUTE8 is null) AND (X_ATTRIBUTE8 is null)))
      AND ((recinfo.ATTRIBUTE9 = X_ATTRIBUTE9)
           OR ((recinfo.ATTRIBUTE9 is null) AND (X_ATTRIBUTE9 is null)))
      AND ((recinfo.ATTRIBUTE10 = X_ATTRIBUTE10)
           OR ((recinfo.ATTRIBUTE10 is null) AND (X_ATTRIBUTE10 is null)))
      AND ((recinfo.ATTRIBUTE11 = X_ATTRIBUTE11)
           OR ((recinfo.ATTRIBUTE11 is null) AND (X_ATTRIBUTE11 is null)))
      AND ((recinfo.ATTRIBUTE12 = X_ATTRIBUTE12)
           OR ((recinfo.ATTRIBUTE12 is null) AND (X_ATTRIBUTE12 is null)))
      AND ((recinfo.ATTRIBUTE13 = X_ATTRIBUTE13)
           OR ((recinfo.ATTRIBUTE13 is null) AND (X_ATTRIBUTE13 is null)))
      AND ((recinfo.ATTRIBUTE14 = X_ATTRIBUTE14)
           OR ((recinfo.ATTRIBUTE14 is null) AND (X_ATTRIBUTE14 is null)))
      AND ((recinfo.ATTRIBUTE15 = X_ATTRIBUTE15)
           OR ((recinfo.ATTRIBUTE15 is null) AND (X_ATTRIBUTE15 is null)))
      AND (recinfo.ORGANIZATION_ID = X_ORGANIZATION_ID)
      AND (recinfo.SEQUENCE_NUMBER = X_SEQUENCE_NUMBER)
      AND ((recinfo.ANALYSIS_ID = X_ANALYSIS_ID)
           OR ((recinfo.ANALYSIS_ID is null) AND (X_ANALYSIS_ID is null)))
      AND ((recinfo.ACTIVITY_ID = X_ACTIVITY_ID)
           OR ((recinfo.ACTIVITY_ID is null) AND (X_ACTIVITY_ID is null)))
      AND ((recinfo.ACTIVITY_DETAIL_ID = X_ACTIVITY_DETAIL_ID)
           OR ((recinfo.ACTIVITY_DETAIL_ID is null) AND (X_ACTIVITY_DETAIL_ID is null)))
      AND ((recinfo.OPERATION_ID = X_OPERATION_ID)
           OR ((recinfo.OPERATION_ID is null) AND (X_OPERATION_ID is null)))
      AND ((recinfo.EQUIPMENT_ID = X_EQUIPMENT_ID)
           OR ((recinfo.EQUIPMENT_ID is null) AND (X_EQUIPMENT_ID is null)))
      AND ((recinfo.SOURCE_ZONE_ID = X_SOURCE_ZONE_ID)
           OR ((recinfo.SOURCE_ZONE_ID is null) AND (X_SOURCE_ZONE_ID is null)))
      AND ((recinfo.SOURCE_SUBINVENTORY = X_SOURCE_SUBINVENTORY)
           OR ((recinfo.SOURCE_SUBINVENTORY is null) AND (X_SOURCE_SUBINVENTORY is null)))
      AND ((recinfo.DESTINATION_ZONE_ID = X_DESTINATION_ZONE_ID)
           OR ((recinfo.DESTINATION_ZONE_ID is null) AND (X_DESTINATION_ZONE_ID is null)))
      AND ((recinfo.DESTINATION_SUBINVENTORY = X_DESTINATION_SUBINVENTORY)
           OR ((recinfo.DESTINATION_SUBINVENTORY is null) AND (X_DESTINATION_SUBINVENTORY is null)))
      AND ((recinfo.LABOR_TXN_SOURCE_ID = X_LABOR_TXN_SOURCE_ID)
           OR ((recinfo.LABOR_TXN_SOURCE_ID is null) AND (X_LABOR_TXN_SOURCE_ID is null)))
      AND ((recinfo.TRANSACTION_UOM = X_TRANSACTION_UOM)
           OR ((recinfo.TRANSACTION_UOM is null) AND (X_TRANSACTION_UOM is null)))
      AND ((recinfo.FROM_QUANTITY = X_FROM_QUANTITY)
           OR ((recinfo.FROM_QUANTITY is null) AND (X_FROM_QUANTITY is null)))
      AND ((recinfo.TO_QUANTITY = X_TO_QUANTITY)
           OR ((recinfo.TO_QUANTITY is null) AND (X_TO_QUANTITY is null)))
      AND ((recinfo.ITEM_CATEGORY_ID = X_ITEM_CATEGORY_ID)
           OR ((recinfo.ITEM_CATEGORY_ID is null) AND (X_ITEM_CATEGORY_ID is null)))
      AND ((recinfo.OPERATION_PLAN_ID = X_OPERATION_PLAN_ID)
           OR ((recinfo.OPERATION_PLAN_ID is null) AND (X_OPERATION_PLAN_ID is null)))
      AND ((recinfo.GROUP_ID = X_GROUP_ID)
           OR ((recinfo.GROUP_ID is null) AND (X_GROUP_ID is null)))
      AND ((recinfo.TASK_TYPE_ID = X_TASK_TYPE_ID)
           OR ((recinfo.TASK_TYPE_ID is null) AND (X_TASK_TYPE_ID is null)))
      AND ((recinfo.TASK_METHOD_ID = X_TASK_METHOD_ID)
           OR ((recinfo.TASK_METHOD_ID is null) AND (X_TASK_METHOD_ID is null)))
      AND (recinfo.EXPECTED_TRAVEL_TIME = X_EXPECTED_TRAVEL_TIME)
      AND (recinfo.EXPECTED_TXN_TIME = X_EXPECTED_TXN_TIME)
      AND ((recinfo.EXPECTED_IDLE_TIME = X_EXPECTED_IDLE_TIME)
           OR ((recinfo.EXPECTED_IDLE_TIME is null) AND (X_EXPECTED_IDLE_TIME is null)))
      AND ((recinfo.ACTUAL_TRAVEL_TIME = X_ACTUAL_TRAVEL_TIME)
           OR ((recinfo.ACTUAL_TRAVEL_TIME is null) AND (X_ACTUAL_TRAVEL_TIME is null)))
      AND ((recinfo.ACTUAL_TXN_TIME = X_ACTUAL_TXN_TIME)
           OR ((recinfo.ACTUAL_TXN_TIME is null) AND (X_ACTUAL_TXN_TIME is null)))
      AND ((recinfo.ACTUAL_IDLE_TIME = X_ACTUAL_IDLE_TIME)
           OR ((recinfo.ACTUAL_IDLE_TIME is null) AND (X_ACTUAL_IDLE_TIME is null)))
      AND ((recinfo.TRAVEL_TIME_THRESHOLD = X_TRAVEL_TIME_THRESHOLD)
           OR ((recinfo.TRAVEL_TIME_THRESHOLD is null) AND (X_TRAVEL_TIME_THRESHOLD is null)))
      AND ((recinfo.HISTORY_FLAG = X_HISTORY_FLAG)
           OR ((recinfo.HISTORY_FLAG is null) AND (X_HISTORY_FLAG is null)))
      AND ((recinfo.ARCHIVE_DATE = X_ARCHIVE_DATE)
           OR ((recinfo.ARCHIVE_DATE is null) AND (X_ARCHIVE_DATE is null)))
      AND ((recinfo.NUM_TRX_MATCHED = X_NUM_TRX_MATCHED)
           OR ((recinfo.NUM_TRX_MATCHED is null) AND (X_NUM_TRX_MATCHED is null)))
  ) then
    null;
  else
    fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
    app_exception.raise_exception;
  end if;

  for tlinfo in c1 loop
    if (tlinfo.BASELANG = 'Y') then
      if (    ((tlinfo.DESCRIPTION = X_DESCRIPTION)
               OR ((tlinfo.DESCRIPTION is null) AND (X_DESCRIPTION is null)))
      ) then
        null;
      else
        fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
        app_exception.raise_exception;
      end if;
    end if;
  end loop;
  return;
end LOCK_ROW;




procedure UPDATE_ROW (
  X_ELS_DATA_ID in NUMBER,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_ORGANIZATION_ID in NUMBER,
  X_SEQUENCE_NUMBER in NUMBER,
  X_ANALYSIS_ID in NUMBER,
  X_ACTIVITY_ID in NUMBER,
  X_ACTIVITY_DETAIL_ID in NUMBER,
  X_OPERATION_ID in NUMBER,
  X_EQUIPMENT_ID in NUMBER,
  X_SOURCE_ZONE_ID in NUMBER,
  X_SOURCE_SUBINVENTORY in VARCHAR2,
  X_DESTINATION_ZONE_ID in NUMBER,
  X_DESTINATION_SUBINVENTORY in VARCHAR2,
  X_LABOR_TXN_SOURCE_ID in NUMBER,
  X_TRANSACTION_UOM in VARCHAR2,
  X_FROM_QUANTITY in NUMBER,
  X_TO_QUANTITY in NUMBER,
  X_ITEM_CATEGORY_ID in NUMBER,
  X_OPERATION_PLAN_ID in NUMBER,
  X_GROUP_ID in NUMBER,
  X_TASK_TYPE_ID in NUMBER,
  X_TASK_METHOD_ID in NUMBER,
  X_EXPECTED_TRAVEL_TIME in NUMBER,
  X_EXPECTED_TXN_TIME in NUMBER,
  X_EXPECTED_IDLE_TIME in NUMBER,
  X_ACTUAL_TRAVEL_TIME in NUMBER,
  X_ACTUAL_TXN_TIME in NUMBER,
  X_ACTUAL_IDLE_TIME in NUMBER,
  X_TRAVEL_TIME_THRESHOLD in NUMBER,
  X_HISTORY_FLAG in NUMBER,
  X_ARCHIVE_DATE in DATE,
  X_NUM_TRX_MATCHED in NUMBER,
  X_DESCRIPTION in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
begin
  update WMS_ELS_INDIVIDUAL_TASKS_B set
    ATTRIBUTE_CATEGORY = X_ATTRIBUTE_CATEGORY,
    ATTRIBUTE1 = X_ATTRIBUTE1,
    ATTRIBUTE2 = X_ATTRIBUTE2,
    ATTRIBUTE3 = X_ATTRIBUTE3,
    ATTRIBUTE4 = X_ATTRIBUTE4,
    ATTRIBUTE5 = X_ATTRIBUTE5,
    ATTRIBUTE6 = X_ATTRIBUTE6,
    ATTRIBUTE7 = X_ATTRIBUTE7,
    ATTRIBUTE8 = X_ATTRIBUTE8,
    ATTRIBUTE9 = X_ATTRIBUTE9,
    ATTRIBUTE10 = X_ATTRIBUTE10,
    ATTRIBUTE11 = X_ATTRIBUTE11,
    ATTRIBUTE12 = X_ATTRIBUTE12,
    ATTRIBUTE13 = X_ATTRIBUTE13,
    ATTRIBUTE14 = X_ATTRIBUTE14,
    ATTRIBUTE15 = X_ATTRIBUTE15,
    ORGANIZATION_ID = X_ORGANIZATION_ID,
    SEQUENCE_NUMBER = X_SEQUENCE_NUMBER,
    ANALYSIS_ID = X_ANALYSIS_ID,
    ACTIVITY_ID = X_ACTIVITY_ID,
    ACTIVITY_DETAIL_ID = X_ACTIVITY_DETAIL_ID,
    OPERATION_ID = X_OPERATION_ID,
    EQUIPMENT_ID = X_EQUIPMENT_ID,
    SOURCE_ZONE_ID = X_SOURCE_ZONE_ID,
    SOURCE_SUBINVENTORY = X_SOURCE_SUBINVENTORY,
    DESTINATION_ZONE_ID = X_DESTINATION_ZONE_ID,
    DESTINATION_SUBINVENTORY = X_DESTINATION_SUBINVENTORY,
    LABOR_TXN_SOURCE_ID = X_LABOR_TXN_SOURCE_ID,
    TRANSACTION_UOM = X_TRANSACTION_UOM,
    FROM_QUANTITY = X_FROM_QUANTITY,
    TO_QUANTITY = X_TO_QUANTITY,
    ITEM_CATEGORY_ID = X_ITEM_CATEGORY_ID,
    OPERATION_PLAN_ID = X_OPERATION_PLAN_ID,
    GROUP_ID = X_GROUP_ID,
    TASK_TYPE_ID = X_TASK_TYPE_ID,
    TASK_METHOD_ID = X_TASK_METHOD_ID,
    EXPECTED_TRAVEL_TIME = X_EXPECTED_TRAVEL_TIME,
    EXPECTED_TXN_TIME = X_EXPECTED_TXN_TIME,
    EXPECTED_IDLE_TIME = X_EXPECTED_IDLE_TIME,
    ACTUAL_TRAVEL_TIME = X_ACTUAL_TRAVEL_TIME,
    ACTUAL_TXN_TIME = X_ACTUAL_TXN_TIME,
    ACTUAL_IDLE_TIME = X_ACTUAL_IDLE_TIME,
    TRAVEL_TIME_THRESHOLD = X_TRAVEL_TIME_THRESHOLD,
    HISTORY_FLAG = X_HISTORY_FLAG,
    ARCHIVE_DATE = X_ARCHIVE_DATE,
    NUM_TRX_MATCHED = X_NUM_TRX_MATCHED,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN
  where ELS_DATA_ID = X_ELS_DATA_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  update WMS_ELS_INDIVIDUAL_TASKS_TL set
    DESCRIPTION = X_DESCRIPTION,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    SOURCE_LANG = userenv('LANG')
  where ELS_DATA_ID = X_ELS_DATA_ID
  and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

  if (sql%notfound) then
    raise no_data_found;
  end if;
end UPDATE_ROW;




procedure DELETE_ROW (
  X_ELS_DATA_ID in NUMBER
) is
begin
  delete from WMS_ELS_INDIVIDUAL_TASKS_TL
  where ELS_DATA_ID = X_ELS_DATA_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  delete from WMS_ELS_INDIVIDUAL_TASKS_B
  where ELS_DATA_ID = X_ELS_DATA_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;
end DELETE_ROW;




procedure ADD_LANGUAGE
is
begin
  delete from WMS_ELS_INDIVIDUAL_TASKS_TL T
  where not exists
    (select NULL
    from WMS_ELS_INDIVIDUAL_TASKS_B B
    where B.ELS_DATA_ID = T.ELS_DATA_ID
    );

  update WMS_ELS_INDIVIDUAL_TASKS_TL T set (
      DESCRIPTION
    ) = (select
      B.DESCRIPTION
    from WMS_ELS_INDIVIDUAL_TASKS_TL B
    where B.ELS_DATA_ID = T.ELS_DATA_ID
    and B.LANGUAGE = T.SOURCE_LANG)
  where (
      T.ELS_DATA_ID,
      T.LANGUAGE
  ) in (select
      SUBT.ELS_DATA_ID,
      SUBT.LANGUAGE
    from WMS_ELS_INDIVIDUAL_TASKS_TL SUBB, WMS_ELS_INDIVIDUAL_TASKS_TL SUBT
    where SUBB.ELS_DATA_ID = SUBT.ELS_DATA_ID
    and SUBB.LANGUAGE = SUBT.SOURCE_LANG
    and (SUBB.DESCRIPTION <> SUBT.DESCRIPTION
      or (SUBB.DESCRIPTION is null and SUBT.DESCRIPTION is not null)
      or (SUBB.DESCRIPTION is not null and SUBT.DESCRIPTION is null)
  ));

  insert into WMS_ELS_INDIVIDUAL_TASKS_TL (
    ELS_DATA_ID,
    DESCRIPTION,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATE_DATE,
    LANGUAGE,
    SOURCE_LANG
  ) select /*+ ORDERED */
    B.ELS_DATA_ID,
    B.DESCRIPTION,
    B.LAST_UPDATED_BY,
    B.LAST_UPDATE_LOGIN,
    B.CREATED_BY,
    B.CREATION_DATE,
    B.LAST_UPDATE_DATE,
    L.LANGUAGE_CODE,
    B.SOURCE_LANG
  from WMS_ELS_INDIVIDUAL_TASKS_TL B, FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and B.LANGUAGE = userenv('LANG')
  and not exists
    (select NULL
    from WMS_ELS_INDIVIDUAL_TASKS_TL T
    where T.ELS_DATA_ID = B.ELS_DATA_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);
end ADD_LANGUAGE;

end WMS_ELS_INDIVIDUAL_TASKS_PKG;

/
