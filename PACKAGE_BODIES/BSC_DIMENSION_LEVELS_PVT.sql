--------------------------------------------------------
--  DDL for Package Body BSC_DIMENSION_LEVELS_PVT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."BSC_DIMENSION_LEVELS_PVT" as
/* $Header: BSCVDMLB.pls 120.6 2006/02/10 01:16:27 adrao noship $ */
/*
 +======================================================================================+
 |    Copyright (c) 2001 Oracle Corporation, Redwood Shores, CA, USA                    |
 |                         All rights reserved.                                         |
 +======================================================================================+
 | FILENAME                                                                             |
 |                      BSCVDMLB.pls                                                    |
 |                                                                                      |
 | Creation Date:                                                                       |
 |                      October 9, 2001                                                 |
 |                                                                                      |
 | Creator:                                                                             |
 |                      Mario-Jair Campos                                               |
 |                                                                                      |
 | Description:                                                                         |
 |          Private Version.                                                            |
 |          This package creates a dimension level in BSC.                              |
 |                                                                                      |
 | History:                                                                             |
 | 04-MAR-2003 PAJOHRI  MLS Bug #2721899                                                |
 |                        Modified Update Query for  BSC_SYS_DIM_LEVELS_TL and Insert   |
 |                        Query for BSC_SYS_DIM_LEVELS_TL to handle MLS.                |
 | 22-APR-2003 ADRAO    Modified Evaluate_Circular_Relationship() to allow, PMF         |
 |                      to insert Parent Dim Level being its own child  Enh#2901823     |
 | 07-MAY-2003  Retrieve_Relationship() Added by ADRAO for change Enh#2901823           |
 | 13-MAY-2003 PWALI  Bug #2942895, SQL BIND COMPLIANCE                                 |
 | 07-JUN-2003 MAHRAO   Modified Create_Dim_Level for ALL enhancement                   |
 | 14-JUN-03  mahrao   Added Translate_dimesnsion_level procedure for enh# 2842894      |
 | 16-JUN-03   ADRAO   Modified Get_Next_Value to use sequences for Granular Locking    |
 |                     Enh #2828689                                                     |
 | 17-JUL-03  mahrao   Modified Retr_Updated_Bsc_Dim_Levels procedure                   |
 |                     as part of forward porting of ALL enhancement to BSC 5.1         |
 |                     Modified Translate_Dimension_Level procedure                     |
 |                     as part of forward porting of ALL enhancement to BSC 5.1         |
 | 16-SEP-03  Adeulgao fixed bug#3108877                                                |
 | 04-NOV-2003 PAJOHRI  Bug #3232366                                                    |
 | 25-MAR-2004 KAYAMAK  Bug #3528143 (removed source language condition)                |
 | 30-Jul-04   rpenneru  Modified for enhancemen#3748519                                |
 | 10-Aug-04 arhegde bug# 3814375 Appsperf: reduce sql executions                       |
 | 01-NOV-04 Krishna removed the cursor leaks                                           |
 | 21-DEC-04   vtulasi   Modified for bug#4045278 - Addtion of LUD                      |
 | 15-FEB-05   ppandey   Enh #4016669, support ID, Value for Autogenerated Dimension Obj|
 | 27-JUN-05 arhegde bug# 4456833 relation_type in retrieve_relationship()              |
 | 25-OCT-2005 kyadamak  Removed literals for Enhancement#4618419                       |
 | 08-FEB-2006 adrao Bug#5011937 Changed all the calls from Do_Ddl() to Do_Ddl_AT()     |
 |                               [Autonomous Transaction]                               |
 +======================================================================================+
*/
G_PKG_NAME              CONSTANT        varchar2(30) := 'BSC_DIMENSION_LEVELS_PVT';
g_db_object                             varchar2(30) := null;

/**********************************************************************************/

FUNCTION Validate_Dim_Level_Id (
 p_dim_level_id IN NUMBER
) RETURN NUMBER
IS
  l_Count NUMBER := 0;
BEGIN

  SELECT COUNT(Dim_Level_Id)
    INTO l_Count
    FROM BSC_SYS_DIM_LEVELS_B
   WHERE Dim_Level_Id = p_Dim_Level_Id;

  RETURN l_count;
EXCEPTION
  WHEN OTHERS THEN
  RETURN l_Count;
END Validate_Dim_Level_Id;

--:     The following procedure is used to create the BSC Dimension entity.
--:     It is the entry point to populate all necessary meta data.
--:     This procedure is part of the Dimension API.


-- WARNING: This API has been stubbed, this should never be used to create Dimension Object views
-- Please use BSC_BIS_DIM_OBJ_PUB.Refresh_BSC_PMF_Dim_View instead.

-- Stubbed for Bug#3739872

procedure Create_Dim_Level(
  p_commit              IN      varchar2 := FND_API.G_FALSE
 ,p_Dim_Level_Rec       IN      BSC_DIMENSION_LEVELS_PUB.Bsc_Dim_Level_Rec_Type
 ,x_return_status       OUT NOCOPY     varchar2
 ,x_msg_count           OUT NOCOPY     number
 ,x_msg_data            OUT NOCOPY     varchar2
) is

BEGIN
   x_return_status := FND_API.G_RET_STS_SUCCESS;

   -- do nothing
   -- Please use BSC_BIS_DIM_OBJ_PUB.Refresh_BSC_PMF_Dim_View to create views instead
   NULL;

EXCEPTION
    WHEN OTHERS THEN
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        IF (x_msg_data IS NOT NULL) THEN
            x_msg_data      :=  x_msg_data||' -> BSC_DIMENSION_LEVELS_PVT.Create_Dim_Level ';
        ELSE
            x_msg_data      :=  SQLERRM||' at BSC_DIMENSION_LEVELS_PVT.Create_Dim_Level ';
        END IF;
end Create_Dim_Level;

/************************************************************************************
************************************************************************************/

procedure Retrieve_Dim_Level(
  p_commit              IN      varchar2 := FND_API.G_FALSE
 ,p_Dim_Level_Rec       IN      BSC_DIMENSION_LEVELS_PUB.Bsc_Dim_Level_Rec_Type
 ,x_Dim_Level_Rec   IN OUT NOCOPY   BSC_DIMENSION_LEVELS_PUB.Bsc_Dim_Level_Rec_Type
 ,x_return_status       OUT NOCOPY     varchar2
 ,x_msg_count           OUT NOCOPY     number
 ,x_msg_data            OUT NOCOPY     varchar2
) is

l_count             number;

begin
  x_return_status := FND_API.G_RET_STS_SUCCESS;
  -- This procedure itself does not retrieve anything.  The two calls below are usually
  -- never executed, because the public version calls these procedures.

    Retrieve_Bsc_Dim_Levels_Md( p_commit
                               ,p_Dim_Level_Rec
                               ,x_Dim_Level_Rec
                               ,x_return_status
                               ,x_msg_count
                               ,x_msg_data);

  if (p_commit = FND_API.G_TRUE) then
    commit;
  end if;

EXCEPTION
    WHEN FND_API.G_EXC_ERROR THEN
        FND_MSG_PUB.Count_And_Get
        (      p_encoded   =>  FND_API.G_FALSE
           ,   p_count     =>  x_msg_count
           ,   p_data      =>  x_msg_data
        );
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION FND_API.G_EXC_ERROR '||x_msg_data);
        x_return_status :=  FND_API.G_RET_STS_ERROR;
        RAISE;
    WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
        FND_MSG_PUB.Count_And_Get
        (      p_encoded   =>  FND_API.G_FALSE
           ,   p_count     =>  x_msg_count
           ,   p_data      =>  x_msg_data
        );
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION FND_API.G_EXC_UNEXPECTED_ERROR '||x_msg_data);
        RAISE;
    WHEN NO_DATA_FOUND THEN
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        IF (x_msg_data IS NOT NULL) THEN
            x_msg_data      :=  x_msg_data||' -> BSC_DIMENSION_LEVELS_PVT.Retrieve_Dim_Level ';
        ELSE
            x_msg_data      :=  SQLERRM||' at BSC_DIMENSION_LEVELS_PVT.Retrieve_Dim_Level ';
        END IF;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION NO_DATA_FOUND '||x_msg_data);
        RAISE;
    WHEN OTHERS THEN
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        IF (x_msg_data IS NOT NULL) THEN
            x_msg_data      :=  x_msg_data||' -> BSC_DIMENSION_LEVELS_PVT.Retrieve_Dim_Level ';
        ELSE
            x_msg_data      :=  SQLERRM||' at BSC_DIMENSION_LEVELS_PVT.Retrieve_Dim_Level ';
        END IF;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION OTHERS '||x_msg_data);
        RAISE;
end Retrieve_Dim_Level;

/************************************************************************************
************************************************************************************/

procedure Update_Dim_Level(
  p_commit              IN      varchar2 := FND_API.G_FALSE
 ,p_Dim_Level_Rec       IN      BSC_DIMENSION_LEVELS_PUB.Bsc_Dim_Level_Rec_Type
 ,x_return_status       OUT NOCOPY     varchar2
 ,x_msg_count           OUT NOCOPY     number
 ,x_msg_data            OUT NOCOPY     varchar2
) is

l_dummy             varchar2(10);

begin
  x_return_status := FND_API.G_RET_STS_SUCCESS;
  SAVEPOINT UpdateBSCDimLevPVT;
  l_dummy := 'dummy';

  -- This procedure itself does not update anything.  The two calls below are usually
  -- never executed, because the public version calls these procedures.

  if (p_commit = FND_API.G_TRUE) then
    commit;
  end if;

EXCEPTION
    WHEN FND_API.G_EXC_ERROR THEN
        ROLLBACK TO UpdateBSCDimLevPVT;
        FND_MSG_PUB.Count_And_Get
        (      p_encoded   =>  FND_API.G_FALSE
           ,   p_count     =>  x_msg_count
           ,   p_data      =>  x_msg_data
        );
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION FND_API.G_EXC_ERROR '||x_msg_data);
        x_return_status :=  FND_API.G_RET_STS_ERROR;
        RAISE;
    WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
        ROLLBACK TO UpdateBSCDimLevPVT;
        FND_MSG_PUB.Count_And_Get
        (      p_encoded   =>  FND_API.G_FALSE
           ,   p_count     =>  x_msg_count
           ,   p_data      =>  x_msg_data
        );
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION FND_API.G_EXC_UNEXPECTED_ERROR '||x_msg_data);
        RAISE;
    WHEN NO_DATA_FOUND THEN
        ROLLBACK TO UpdateBSCDimLevPVT;
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        IF (x_msg_data IS NOT NULL) THEN
            x_msg_data      :=  x_msg_data||' -> BSC_DIMENSION_LEVELS_PVT.Update_Dim_Level ';
        ELSE
            x_msg_data      :=  SQLERRM||' at BSC_DIMENSION_LEVELS_PVT.Update_Dim_Level ';
        END IF;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION NO_DATA_FOUND '||x_msg_data);
        RAISE;
    WHEN OTHERS THEN
        ROLLBACK TO UpdateBSCDimLevPVT;
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        IF (x_msg_data IS NOT NULL) THEN
            x_msg_data      :=  x_msg_data||' -> BSC_DIMENSION_LEVELS_PVT.Update_Dim_Level ';
        ELSE
            x_msg_data      :=  SQLERRM||' at BSC_DIMENSION_LEVELS_PVT.Update_Dim_Level ';
        END IF;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION OTHERS '||x_msg_data);
        RAISE;
end Update_Dim_Level;

/************************************************************************************
************************************************************************************/

procedure Delete_Dim_Level(
  p_commit              IN      varchar2 := FND_API.G_FALSE
 ,p_Dim_Level_Rec       IN      BSC_DIMENSION_LEVELS_PUB.Bsc_Dim_Level_Rec_Type
 ,x_return_status       OUT NOCOPY     varchar2
 ,x_msg_count           OUT NOCOPY     number
 ,x_msg_data            OUT NOCOPY     varchar2
) is

    l_sql            varchar2(1000);

    l_count          number;
    l_view_name      varchar2(100);
    l_Dim_Level_Rec  BSC_DIMENSION_LEVELS_PUB.Bsc_Dim_Level_Rec_Type;
    CURSOR c_drop_tabs IS
    SELECT LEVEL_TABLE_NAME,
           LEVEL_VIEW_NAME,
           NVL(SOURCE, 'BSC') SOURCE
    FROM   BSC_SYS_DIM_LEVELS_B
    WHERE  DIM_LEVEL_ID = p_Dim_Level_Rec.Bsc_Level_Id;
begin
  x_return_status := FND_API.G_RET_STS_SUCCESS;
  FND_MSG_PUB.Initialize;
  SAVEPOINT DeleteBSCDimLevPVT;
  BSC_APPS.Init_Bsc_Apps;

  l_Dim_Level_Rec   :=  p_Dim_Level_Rec;
  -- Validate level id exists.
  if p_Dim_Level_Rec.Bsc_Level_Id  is not null then
    l_count := BSC_DIMENSION_LEVELS_PVT.validate_dim_level_id(p_Dim_Level_Rec.Bsc_Level_Id);
    if l_count = 0 then
      FND_MESSAGE.SET_NAME('BSC','BSC_INVALID_LEVEL_ID');
      FND_MESSAGE.SET_TOKEN('BSC_LEVEL_ID', p_Dim_Level_Rec.Bsc_Level_Id);
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    end if;
  else
    FND_MESSAGE.SET_NAME('BSC','BSC_NO_LEVEL_ID_ENTERED');
    FND_MESSAGE.SET_TOKEN('BSC_LEVEL_ID', p_Dim_Level_Rec.Bsc_Level_Id);
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_ERROR;
  end if;
  IF ((l_Dim_Level_Rec.Bsc_Level_Name IS NOT NULL) OR
        (l_Dim_Level_Rec.Bsc_Level_View_Name IS NOT NULL) OR
          (l_Dim_Level_Rec.Bsc_Source IS NOT NULL)) THEN
          IF (c_drop_tabs%ISOPEN) THEN
            CLOSE c_drop_tabs;
          END IF;
          OPEN c_drop_tabs;
            FETCH c_drop_tabs
            INTO    l_Dim_Level_Rec.Bsc_Level_Name
                  , l_Dim_Level_Rec.Bsc_Level_View_Name
                  , l_Dim_Level_Rec.Bsc_Source;
          CLOSE c_drop_tabs;
  END IF;

  -- Changed all the calls from Do_Ddl() to Do_Ddl_AT() [Autonomous Transaction]
  -- For Bug#5011937
  IF(l_Dim_Level_Rec.Bsc_Source = 'PMF') THEN
      -- Check view exists.
      IF (BSC_UTILITY.is_Table_View_Exists(l_Dim_Level_Rec.Bsc_Level_Name)) THEN

        -- SQL to drop dimension level view.
        l_sql := 'DROP VIEW ' || l_Dim_Level_Rec.Bsc_Level_Name;
        --EXECUTE IMMEDIATE l_sql;
        BSC_APPS.Do_Ddl_AT(l_sql, ad_ddl.drop_view, l_Dim_Level_Rec.Bsc_Level_Name, BSC_APPS.fnd_apps_schema, BSC_APPS.bsc_apps_short_name);
      end if;
  ELSIF(l_Dim_Level_Rec.Bsc_Source = 'BSC') THEN
      --delete the enteries from BSC_DB_TABLES and BSC_DB_TABLES_RELS
      DELETE FROM BSC_DB_TABLES
      WHERE  Table_Name = 'BSC_DI_'||p_Dim_Level_Rec.Bsc_Level_Id;

      DELETE FROM BSC_DB_TABLES_RELS
      WHERE  Source_Table_Name = 'BSC_DI_'||p_Dim_Level_Rec.Bsc_Level_Id;

      --DROP VIEW
      l_view_name := 'BSC_D_'||l_Dim_Level_Rec.Bsc_Level_Id||'_VL';
      l_sql  :=  ' SELECT COUNT(1) FROM   USER_OBJECTS '||
                 ' WHERE  OBJECT_NAME =   :1';
      EXECUTE IMMEDIATE l_sql  INTO l_count USING l_view_name;

      IF (l_count <> 0) THEN
        l_sql    := 'DROP VIEW BSC_D_'||l_Dim_Level_Rec.Bsc_Level_Id||'_VL';
        --EXECUTE IMMEDIATE l_sql;
        BSC_APPS.Do_Ddl_AT(l_sql, ad_ddl.drop_view, 'BSC_D_'||l_Dim_Level_Rec.Bsc_Level_Id||'_VL', BSC_APPS.fnd_apps_schema, BSC_APPS.bsc_apps_short_name);
      END IF;

      --DROP MASTER TABLE
      l_sql  :=  ' SELECT COUNT(1) FROM   USER_OBJECTS '||
                 ' WHERE  OBJECT_NAME =   :1';
      EXECUTE IMMEDIATE l_sql INTO l_count USING l_Dim_Level_Rec.Bsc_Level_Name ;

      IF (l_count <> 0) THEN
        l_sql    := 'DROP TABLE '||l_Dim_Level_Rec.Bsc_Level_Name;
        BSC_APPS.Do_Ddl_AT(l_sql, ad_ddl.drop_table, l_Dim_Level_Rec.Bsc_Level_Name, BSC_APPS.fnd_apps_schema, BSC_APPS.bsc_apps_short_name);
      END IF;

      --DROP INPUT TABLE
      l_view_name := 'BSC_DI_'||l_Dim_Level_Rec.Bsc_Level_Id;
      l_sql  :=  ' SELECT COUNT(1) FROM   USER_OBJECTS '||
                 ' WHERE  OBJECT_NAME =   :1';
      EXECUTE IMMEDIATE l_sql  INTO l_count USING l_view_name;
      IF (l_count <> 0) THEN
          l_sql    := 'DROP TABLE BSC_DI_'||l_Dim_Level_Rec.Bsc_Level_Id;
          BSC_APPS.Do_Ddl_AT(l_sql, ad_ddl.drop_table, 'BSC_DI_'||l_Dim_Level_Rec.Bsc_Level_Id, BSC_APPS.fnd_apps_schema, BSC_APPS.bsc_apps_short_name);
      END IF;

        --remove/drop filter views if any
        BSC_DIM_FILTERS_PUB.Drop_Filter_By_Dim_Obj
        (   p_Dim_Level_Id    =>  p_Dim_Level_Rec.Bsc_Level_Id
          , x_return_status   =>  x_return_status
          , x_msg_Count       =>  x_msg_Count
          , x_msg_data        =>  x_msg_data
        );
        IF (x_return_status  <> FND_API.G_RET_STS_SUCCESS) THEN
          RAISE  FND_API.G_EXC_UNEXPECTED_ERROR;
        END IF;
    END IF;
  if (p_commit = FND_API.G_TRUE) then
    commit;
  end if;

EXCEPTION
    WHEN FND_API.G_EXC_ERROR THEN
        IF (c_drop_tabs%ISOPEN) THEN
            CLOSE c_drop_tabs;
        END IF;
        ROLLBACK TO DeleteBSCDimLevPVT;
        FND_MSG_PUB.Count_And_Get
        (      p_encoded   =>  FND_API.G_FALSE
           ,   p_count     =>  x_msg_count
           ,   p_data      =>  x_msg_data
        );
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION FND_API.G_EXC_ERROR '||x_msg_data);
        x_return_status :=  FND_API.G_RET_STS_ERROR;
        RAISE;
    WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
        IF (c_drop_tabs%ISOPEN) THEN
            CLOSE c_drop_tabs;
        END IF;
        ROLLBACK TO DeleteBSCDimLevPVT;
        FND_MSG_PUB.Count_And_Get
        (      p_encoded   =>  FND_API.G_FALSE
           ,   p_count     =>  x_msg_count
           ,   p_data      =>  x_msg_data
        );
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION FND_API.G_EXC_UNEXPECTED_ERROR '||x_msg_data);
        RAISE;
    WHEN NO_DATA_FOUND THEN
        IF (c_drop_tabs%ISOPEN) THEN
            CLOSE c_drop_tabs;
        END IF;
        ROLLBACK TO DeleteBSCDimLevPVT;
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        IF (x_msg_data IS NOT NULL) THEN
            x_msg_data      :=  x_msg_data||' -> BSC_DIMENSION_LEVELS_PVT.Delete_Dim_Level ';
        ELSE
            x_msg_data      :=  SQLERRM||' at BSC_DIMENSION_LEVELS_PVT.Delete_Dim_Level ';
        END IF;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION NO_DATA_FOUND '||x_msg_data);
        RAISE;
    WHEN OTHERS THEN
        IF (c_drop_tabs%ISOPEN) THEN
            CLOSE c_drop_tabs;
        END IF;
        ROLLBACK TO DeleteBSCDimLevPVT;
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        IF (x_msg_data IS NOT NULL) THEN
            x_msg_data      :=  x_msg_data||' -> BSC_DIMENSION_LEVELS_PVT.Delete_Dim_Level ';
        ELSE
            x_msg_data      :=  SQLERRM||' at BSC_DIMENSION_LEVELS_PVT.Delete_Dim_Level ';
        END IF;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION OTHERS '||x_msg_data);
        RAISE;
end Delete_Dim_Level;

/************************************************************************************
       05-JUN-2003 - Aditya modified to add WHO Cols for Granular Locking.
************************************************************************************/

--:     This procedure populates the meta data for BSC dimensions, such as
--:     dimension id, dimension names, dimension view/table columns.
--:     This procedure is part of the Dimension API.

procedure Create_Bsc_Dim_Levels_Md(
  p_commit              IN      varchar2 := FND_API.G_FALSE
 ,p_Dim_Level_Rec       IN      BSC_DIMENSION_LEVELS_PUB.Bsc_Dim_Level_Rec_Type
 ,x_return_status       OUT NOCOPY     varchar2
 ,x_msg_count           OUT NOCOPY     number
 ,x_msg_data            OUT NOCOPY     varchar2
) is

l_Dim_Level_Rec BSC_DIMENSION_LEVELS_PUB.Bsc_Dim_Level_Rec_Type;
l_count             number;
l_level_view_name     VARCHAR2(30);
begin
  x_return_status := FND_API.G_RET_STS_SUCCESS;
  l_Dim_Level_Rec := p_Dim_Level_Rec;

  SAVEPOINT CreateBSCDimLevMdPVT;
  FND_MSG_PUB.Initialize;
  -- Validate Level Id not exists.
  if p_Dim_Level_Rec.Bsc_Level_Id is not null then
    l_count := BSC_DIMENSION_LEVELS_PVT.validate_dim_level_id(p_Dim_Level_Rec.Bsc_Level_Id);
    if l_count <> 0 then
      FND_MESSAGE.SET_NAME('BSC','BSC_LEVEL_ID_EXISTS');
      FND_MESSAGE.SET_TOKEN('BSC_LEVEL_ID', p_Dim_Level_Rec.Bsc_Level_Id);
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    end if;
  else
    FND_MESSAGE.SET_NAME('BSC','BSC_NO_LEVEL_ID_ENTERED');
    FND_MESSAGE.SET_TOKEN('BSC_LEVEL_ID', p_Dim_Level_Rec.Bsc_Level_Id);
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_ERROR;
  end if;

  g_db_object := 'BSC_SYS_DIM_LEVELS_B';

  -- insert the pertaining values into table bsc_sys_dim_levels_b.
  -- Reminder:  Some values are hard coded, need to get them from somewhere.
  --if source= 'PMF' same values will be inserted for level_table_name, level_view_name
  --if source= 'BSC' level_table_name will contain the name of master table and
  --                 level_view_name will contain the name of view name.
  IF (p_Dim_Level_Rec.Bsc_Source = 'PMF') THEN
    l_level_view_name :=  p_Dim_Level_Rec.Bsc_Level_Name;
  ELSE
    l_level_view_name :=  p_Dim_Level_Rec.Bsc_Level_View_Name;
  END IF;
  l_Dim_Level_Rec.Bsc_Last_Update_Date := NVL(p_Dim_Level_Rec.Bsc_Last_Update_Date, SYSDATE);

  insert into BSC_SYS_DIM_LEVELS_B( dim_level_id
                                   ,level_table_name
                                   ,table_type
                                   ,level_pk_col
                                   ,abbreviation
                                   ,value_order_by
                                   ,comp_order_by
                                   ,custom_group
                                   ,user_key_size
                                   ,disp_key_size
                                   ,level_view_name
                                   ,short_name
                                   ,source
                                   ,created_by --PMD
                                   ,creation_date --PMD
                                   ,last_updated_by --PMD
                                   ,last_update_date --PMD
                                   ,last_update_login) --PMD
                            values( p_Dim_Level_Rec.Bsc_Level_Id
                   ,p_Dim_Level_Rec.Bsc_Level_Name
                                   ,p_Dim_Level_Rec.Bsc_Level_Table_Type
                                   ,p_Dim_Level_Rec.Bsc_Pk_Col
                                   ,p_Dim_Level_Rec.Bsc_Level_Abbreviation
                                   ,p_Dim_Level_Rec.Bsc_Level_Value_Order_By
                                   ,p_Dim_Level_Rec.Bsc_Level_Comp_Order_By
                                   ,p_Dim_Level_Rec.Bsc_Level_Custom_Group
                                   ,p_Dim_Level_Rec.Bsc_Level_User_Key_Size
                                   ,p_Dim_Level_Rec.Bsc_Level_Disp_Key_Size
                                   ,l_level_view_name
                                   ,p_Dim_Level_Rec.Bsc_Level_Short_Name
                                   ,p_Dim_Level_Rec.Bsc_Source
                                   ,p_Dim_Level_Rec.Bsc_Created_By --PMD
                                   ,l_Dim_Level_Rec.Bsc_Last_Update_Date --PMD
                                   ,p_Dim_Level_Rec.Bsc_Last_Updated_By --PMD
                                   ,l_Dim_Level_Rec.Bsc_Last_Update_Date --PMD
                                   ,p_Dim_Level_Rec.Bsc_Last_Update_Login); --PMD
  g_db_object := 'BSC_SYS_DIM_LEVELS_TL';
  -- Insert values into table bsc_sys_dim_levels_tl.
  -- Reminder:  The last two values are hard coded, need to get them from somewhere,
  --            talk to Henry.
  insert into BSC_SYS_DIM_LEVELS_TL( dim_level_id
                                    ,language
                                    ,source_lang
                                    ,name
                                    ,help
                                    ,total_disp_name
                                    ,comp_disp_name
                                   )
                             SELECT     p_Dim_Level_Rec.Bsc_Level_Id
                                    ,   L.LANGUAGE_CODE
                                    ,   USERENV('LANG')
                                    ,   p_Dim_Level_Rec.Bsc_Dim_Level_Long_Name
                                    ,   p_Dim_Level_Rec.Bsc_Dim_Level_Help
                                    ,   p_Dim_Level_Rec.Bsc_Dim_Tot_Disp_Name
                                    ,   p_Dim_Level_Rec.Bsc_Dim_Comp_Disp_Name
                                  FROM  FND_LANGUAGES L
                                  WHERE L.INSTALLED_FLAG IN ('I', 'B')
                                  AND   NOT EXISTS
                                  ( SELECT NULL
                                    FROM   BSC_SYS_DIM_LEVELS_TL T
                                    WHERE  T.DIM_LEVEL_ID = p_Dim_Level_Rec.Bsc_Level_Id
                                    AND    T.LANGUAGE     = L.LANGUAGE_CODE);

  if (p_commit = FND_API.G_TRUE) then
    commit;
  end if;

EXCEPTION
    WHEN FND_API.G_EXC_ERROR THEN
        ROLLBACK TO CreateBSCDimLevMdPVT;
        FND_MSG_PUB.Count_And_Get
        (      p_encoded   =>  FND_API.G_FALSE
           ,   p_count     =>  x_msg_count
           ,   p_data      =>  x_msg_data
        );
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION FND_API.G_EXC_ERROR '||x_msg_data);
        x_return_status :=  FND_API.G_RET_STS_ERROR;
        RAISE;
    WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
        ROLLBACK TO CreateBSCDimLevMdPVT;
        FND_MSG_PUB.Count_And_Get
        (      p_encoded   =>  FND_API.G_FALSE
           ,   p_count     =>  x_msg_count
           ,   p_data      =>  x_msg_data
        );
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION FND_API.G_EXC_UNEXPECTED_ERROR '||x_msg_data);
        RAISE;
    WHEN NO_DATA_FOUND THEN
        ROLLBACK TO CreateBSCDimLevMdPVT;
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        IF (x_msg_data IS NOT NULL) THEN
            x_msg_data      :=  x_msg_data||' -> BSC_DIMENSION_LEVELS_PVT.Create_Bsc_Dim_Levels_Md ';
        ELSE
            x_msg_data      :=  SQLERRM||' at BSC_DIMENSION_LEVELS_PVT.Create_Bsc_Dim_Levels_Md ';
        END IF;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION NO_DATA_FOUND '||x_msg_data);
        RAISE;
    WHEN OTHERS THEN
        ROLLBACK TO CreateBSCDimLevMdPVT;
        if (SQLCODE = -01400) then
          FND_MESSAGE.SET_NAME('BSC','BSC_TABLE_NULL_VALUE');
          FND_MESSAGE.SET_TOKEN('BSC_OBJECT', g_db_object);
          FND_MSG_PUB.ADD;
          RAISE FND_API.G_EXC_ERROR;
        end if;
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        IF (x_msg_data IS NOT NULL) THEN
            x_msg_data      :=  x_msg_data||' -> BSC_DIMENSION_LEVELS_PVT.Create_Bsc_Dim_Levels_Md ';
        ELSE
            x_msg_data      :=  SQLERRM||' at BSC_DIMENSION_LEVELS_PVT.Create_Bsc_Dim_Levels_Md ';
        END IF;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION OTHERS '||x_msg_data);
        RAISE;
end Create_Bsc_Dim_Levels_Md;

/************************************************************************************
************************************************************************************/

procedure Retrieve_Bsc_Dim_Levels_Md(
  p_commit              IN      varchar2 := FND_API.G_FALSE
 ,p_Dim_Level_Rec       IN      BSC_DIMENSION_LEVELS_PUB.Bsc_Dim_Level_Rec_Type
 ,x_Dim_Level_Rec   IN OUT NOCOPY   BSC_DIMENSION_LEVELS_PUB.Bsc_Dim_Level_Rec_Type
 ,x_return_status       OUT NOCOPY     varchar2
 ,x_msg_count           OUT NOCOPY     number
 ,x_msg_data            OUT NOCOPY     varchar2
) is

begin

  x_return_status:= FND_API.G_RET_STS_SUCCESS;
  FND_MSG_PUB.Initialize;
  g_db_object := 'Retrieve_Bsc_Dim_Levels_Md';

  select          a.level_view_name
                 ,a.level_table_name
                 ,a.table_type
                 ,a.level_pk_col
                 ,a.abbreviation
                 ,a.value_order_by
                 ,a.comp_order_by
                 ,a.custom_group
                 ,a.user_key_size
                 ,a.disp_key_size
                 ,a.short_name
                 ,a.source
                 ,b.name
                 ,b.help
                 ,b.total_disp_name
                 ,b.comp_disp_name
                 ,a.created_by        -- PMD
                 ,a.creation_date     -- PMD
                 ,a.last_updated_by   -- PMD
                 ,a.last_update_date  -- PMD
                 ,a.last_update_login -- PMD
             into x_Dim_Level_Rec.Bsc_Level_View_Name
                 ,x_Dim_Level_Rec.Bsc_Level_Name
                 ,x_Dim_Level_Rec.Bsc_Level_Table_Type
                 ,x_Dim_Level_Rec.Bsc_Pk_Col
                 ,x_Dim_Level_Rec.Bsc_Level_Abbreviation
                 ,x_Dim_Level_Rec.Bsc_Level_Value_Order_By
                 ,x_Dim_Level_Rec.Bsc_Level_Comp_Order_By
                 ,x_Dim_Level_Rec.Bsc_Level_Custom_Group
                 ,x_Dim_Level_Rec.Bsc_Level_User_Key_Size
                 ,x_Dim_Level_Rec.Bsc_Level_Disp_Key_Size
                 ,x_Dim_Level_Rec.Bsc_Level_Short_Name
                 ,x_Dim_Level_Rec.Bsc_Source
                 ,x_Dim_Level_Rec.Bsc_Dim_Level_Long_Name
                 ,x_Dim_Level_Rec.Bsc_Dim_Level_Help
                 ,x_Dim_Level_Rec.Bsc_Dim_Tot_Disp_Name
                 ,x_Dim_Level_Rec.Bsc_Dim_Comp_Disp_Name
                 ,x_Dim_Level_Rec.Bsc_Created_By        -- PMD
                 ,x_Dim_Level_Rec.Bsc_Creation_Date     -- PMD
                 ,x_Dim_Level_Rec.Bsc_Last_Updated_By   -- PMD
                 ,x_Dim_Level_Rec.Bsc_Last_Update_Date  -- PMD
                 ,x_Dim_Level_Rec.Bsc_Last_Update_Login -- PMD
             from BSC_SYS_DIM_LEVELS_B a
                 ,BSC_SYS_DIM_LEVELS_TL b
            where a.dim_level_id = b.dim_level_id
              and a.dim_level_id = p_Dim_Level_Rec.Bsc_Level_Id
              and b.language     = NVL(p_Dim_Level_Rec.Bsc_Language,USERENV('LANG')); --Bug #3528143


  if (p_commit = FND_API.G_TRUE) then
    commit;
  end if;

EXCEPTION
    WHEN FND_API.G_EXC_ERROR THEN
        FND_MSG_PUB.Count_And_Get
        (      p_encoded   =>  FND_API.G_FALSE
           ,   p_count     =>  x_msg_count
           ,   p_data      =>  x_msg_data
        );
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION FND_API.G_EXC_ERROR '||x_msg_data);
        x_return_status :=  FND_API.G_RET_STS_ERROR;
        RAISE;
    WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
        FND_MSG_PUB.Count_And_Get
        (      p_encoded   =>  FND_API.G_FALSE
           ,   p_count     =>  x_msg_count
           ,   p_data      =>  x_msg_data
        );
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION FND_API.G_EXC_UNEXPECTED_ERROR '||x_msg_data);
        RAISE;
    WHEN NO_DATA_FOUND THEN
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        IF (x_msg_data IS NOT NULL) THEN
            x_msg_data      :=  x_msg_data||' -> BSC_DIMENSION_LEVELS_PVT.Retrieve_Bsc_Dim_Levels_Md ';
        ELSE
            x_msg_data      :=  SQLERRM||' at BSC_DIMENSION_LEVELS_PVT.Retrieve_Bsc_Dim_Levels_Md ';
        END IF;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION NO_DATA_FOUND '||x_msg_data);
        RAISE;
    WHEN OTHERS THEN
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        IF (x_msg_data IS NOT NULL) THEN
            x_msg_data      :=  x_msg_data||' -> BSC_DIMENSION_LEVELS_PVT.Retrieve_Bsc_Dim_Levels_Md ';
        ELSE
            x_msg_data      :=  SQLERRM||' at BSC_DIMENSION_LEVELS_PVT.Retrieve_Bsc_Dim_Levels_Md ';
        END IF;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION OTHERS '||x_msg_data);
        RAISE;
end Retrieve_Bsc_Dim_Levels_Md;

/************************************************************************************
************************************************************************************/

procedure Update_Bsc_Dim_Levels_Md(
  p_commit              IN      varchar2 := FND_API.G_FALSE
 ,p_Dim_Level_Rec       IN      BSC_DIMENSION_LEVELS_PUB.Bsc_Dim_Level_Rec_Type
 ,x_return_status       OUT NOCOPY     varchar2
 ,x_msg_count           OUT NOCOPY     number
 ,x_msg_data            OUT NOCOPY     varchar2
) is

l_Dim_Level_Rec         BSC_DIMENSION_LEVELS_PUB.Bsc_Dim_Level_Rec_Type;
l_level_view_name       VARCHAR2(30);
l_count             number;

begin
  x_return_status := FND_API.G_RET_STS_SUCCESS;
  FND_MSG_PUB.Initialize;
  SAVEPOINT UpdateBSCDimLevMdPVT;
  -- Check that valid level id was entered.
  if p_Dim_Level_Rec.Bsc_Level_Id is not null then
    l_count := validate_dim_level_id(p_Dim_Level_Rec.Bsc_Level_Id);
    if l_count = 0 then
      FND_MESSAGE.SET_NAME('BSC','BSC_INVALID_LEVEL_ID');
      FND_MESSAGE.SET_TOKEN('BSC_LEVEL_ID', p_Dim_Level_Rec.Bsc_Level_Id);
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    end if;
  else
    FND_MESSAGE.SET_NAME('BSC','BSC_NO_LEVEL_ID_ENTERED');
    FND_MESSAGE.SET_TOKEN('BSC_LEVEL_ID', p_Dim_Level_Rec.Bsc_Level_Id);
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_ERROR;
  end if;

  -- Not all values will be passed.  We need to make sure values not passed are not
  -- changed by procedure, therefore we get what is there before we do any updates.
  Retrieve_Bsc_Dim_Levels_Md( p_commit
                             ,p_Dim_Level_Rec
                             ,l_Dim_Level_Rec
                             ,x_return_status
                             ,x_msg_count
                             ,x_msg_data);

  -- update LOCAL language ,source language  and level Id values with PASSED values.
  l_Dim_Level_Rec.Bsc_Language := p_Dim_Level_Rec.Bsc_Language;
  l_Dim_Level_Rec.Bsc_Source_Language := p_Dim_Level_Rec.Bsc_Source_Language;
  l_Dim_Level_Rec.Bsc_Level_Id := p_Dim_Level_Rec.Bsc_Level_Id;

  -- Copy PASSED Record values into LOCAL Record values for the PASSED Record values
  -- which are NOT NULL.
  if p_Dim_Level_Rec.Bsc_Level_Name is not null then
    l_Dim_Level_Rec.Bsc_Level_Name := p_Dim_Level_Rec.Bsc_Level_Name;
  end if;
  if p_Dim_Level_Rec.Bsc_Level_Table_Type is not null then
    l_Dim_Level_Rec.Bsc_Level_Table_Type := p_Dim_Level_Rec.Bsc_Level_Table_Type;
  end if;
  if p_Dim_Level_Rec.Bsc_Pk_Col is not null then
    l_Dim_Level_Rec.Bsc_Pk_Col := p_Dim_Level_Rec.Bsc_Pk_Col;
  end if;
  if p_Dim_Level_Rec.Bsc_Level_Abbreviation is not null then
    l_Dim_Level_Rec.Bsc_Level_Abbreviation := p_Dim_Level_Rec.Bsc_Level_Abbreviation;
  end if;
  if p_Dim_Level_Rec.Bsc_Level_Value_Order_By is not null then
    l_Dim_Level_Rec.Bsc_Level_Value_Order_By := p_Dim_Level_Rec.Bsc_Level_Value_Order_By;
  end if;
  if p_Dim_Level_Rec.Bsc_Level_Comp_Order_By is not null then
    l_Dim_Level_Rec.Bsc_Level_Comp_Order_By := p_Dim_Level_Rec.Bsc_Level_Comp_Order_By;
  end if;
  if p_Dim_Level_Rec.Bsc_Level_Custom_Group is not null then
    l_Dim_Level_Rec.Bsc_Level_Custom_Group := p_Dim_Level_Rec.Bsc_Level_Custom_Group;
  end if;
  if p_Dim_Level_Rec.Bsc_Level_User_Key_Size is not null then
    l_Dim_Level_Rec.Bsc_Level_User_Key_Size := p_Dim_Level_Rec.Bsc_Level_User_Key_Size;
  end if;
  if p_Dim_Level_Rec.Bsc_Level_Disp_Key_Size is not null then
    l_Dim_Level_Rec.Bsc_Level_Disp_Key_Size := p_Dim_Level_Rec.Bsc_Level_Disp_Key_Size;
  end if;
  if p_Dim_Level_Rec.Bsc_Level_View_Name is not null then
    l_Dim_Level_Rec.Bsc_Level_View_Name := p_Dim_Level_Rec.Bsc_Level_View_Name;
  end if;
  if p_Dim_Level_Rec.Bsc_Dim_Level_Long_Name is not null then
    l_Dim_Level_Rec.Bsc_Dim_Level_Long_Name := p_Dim_Level_Rec.Bsc_Dim_Level_Long_Name;
  end if;
  if p_Dim_Level_Rec.Bsc_Dim_Level_Help is not null then
    l_Dim_Level_Rec.Bsc_Dim_Level_Help := p_Dim_Level_Rec.Bsc_Dim_Level_Help;
  end if;
  if p_Dim_Level_Rec.Bsc_Dim_Tot_Disp_Name is not null then
    l_Dim_Level_Rec.Bsc_Dim_Tot_Disp_Name := p_Dim_Level_Rec.Bsc_Dim_Tot_Disp_Name;
  end if;
  if p_Dim_Level_Rec.Bsc_Dim_Comp_Disp_Name is not null then
    l_Dim_Level_Rec.Bsc_Dim_Comp_Disp_Name := p_Dim_Level_Rec.Bsc_Dim_Comp_Disp_Name;
  end if;
  if p_Dim_Level_Rec.Bsc_Source is not null then
    l_Dim_Level_Rec.Bsc_Source := p_Dim_Level_Rec.Bsc_Source;
  end if;
  -- PMD
  if p_Dim_Level_Rec.Bsc_Last_Updated_By is not null then
    l_Dim_Level_Rec.Bsc_Last_Updated_By := p_Dim_Level_Rec.Bsc_Last_Updated_By;
  else
    l_Dim_Level_Rec.Bsc_Last_Updated_By := FND_GLOBAL.USER_ID; -- not null column
  end if;

  if p_Dim_Level_Rec.Bsc_Last_Update_Login is not null then
    l_Dim_Level_Rec.Bsc_Last_Update_Login := p_Dim_Level_Rec.Bsc_Last_Update_Login;
  else
    l_Dim_Level_Rec.Bsc_Last_Update_Login := FND_GLOBAL.LOGIN_ID;
  end if;
  -- PMD

  --if source= 'PMF' same values will be inserted for level_table_name, level_view_name
  --if source= 'BSC' level_table_name will contain the name of master table and
  --                 level_view_name will contain the name of view name.
  IF (p_Dim_Level_Rec.Bsc_Source = 'PMF') THEN
    l_level_view_name :=  l_Dim_Level_Rec.Bsc_Level_Name;
  ELSE
    l_level_view_name :=  l_Dim_Level_Rec.Bsc_Level_View_Name;
  END IF;


 l_Dim_Level_Rec.Bsc_Last_Update_Date := NVL(p_Dim_Level_Rec.Bsc_Last_Update_Date, SYSDATE);

  update BSC_SYS_DIM_LEVELS_B
     set level_table_name   = l_Dim_Level_Rec.Bsc_Level_Name
        ,table_type         = l_Dim_Level_Rec.Bsc_Level_Table_Type
        ,level_pk_col       = l_Dim_Level_Rec.Bsc_Pk_Col
        ,abbreviation       = l_Dim_Level_Rec.Bsc_Level_Abbreviation
        ,value_order_by     = l_Dim_Level_Rec.Bsc_Level_Value_Order_By
        ,comp_order_by      = l_Dim_Level_Rec.Bsc_Level_Comp_Order_By
        ,custom_group       = l_Dim_Level_Rec.Bsc_Level_Custom_Group
        ,user_key_size      = l_Dim_Level_Rec.Bsc_Level_User_Key_Size
        ,disp_key_size      = l_Dim_Level_Rec.Bsc_Level_Disp_Key_Size
        ,level_view_name    = l_level_view_name
        ,source             = l_Dim_Level_Rec.Bsc_Source
        ,last_updated_by = l_Dim_Level_Rec.Bsc_Last_Updated_By   -- PMD
        ,last_update_date = l_Dim_Level_Rec.Bsc_Last_Update_Date -- PMD
        ,last_update_login = l_Dim_Level_Rec.Bsc_Last_Update_Login -- PMD
   where dim_level_id       = l_Dim_Level_Rec.Bsc_Level_Id;

  update BSC_SYS_DIM_LEVELS_TL
     set name               = l_Dim_Level_Rec.Bsc_Dim_Level_Long_Name
        ,help               = l_Dim_Level_Rec.Bsc_Dim_Level_Help
        ,total_disp_name    = l_Dim_Level_Rec.Bsc_Dim_Tot_Disp_Name
        ,comp_disp_name     = l_Dim_Level_Rec.Bsc_Dim_Comp_Disp_Name
        ,SOURCE_LANG        = userenv('LANG')
   where dim_level_id       = l_Dim_Level_Rec.Bsc_Level_Id
     and userenv('LANG') IN (LANGUAGE, SOURCE_LANG);

  if (p_commit = FND_API.G_TRUE) then
    commit;
  end if;

EXCEPTION
    WHEN FND_API.G_EXC_ERROR THEN
        ROLLBACK TO UpdateBSCDimLevMdPVT;
        FND_MSG_PUB.Count_And_Get
        (      p_encoded   =>  FND_API.G_FALSE
           ,   p_count     =>  x_msg_count
           ,   p_data      =>  x_msg_data
        );
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION FND_API.G_EXC_ERROR '||x_msg_data);
        x_return_status :=  FND_API.G_RET_STS_ERROR;
        RAISE;
    WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
        ROLLBACK TO UpdateBSCDimLevMdPVT;
        FND_MSG_PUB.Count_And_Get
        (      p_encoded   =>  FND_API.G_FALSE
           ,   p_count     =>  x_msg_count
           ,   p_data      =>  x_msg_data
        );
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION FND_API.G_EXC_UNEXPECTED_ERROR '||x_msg_data);
        RAISE;
    WHEN NO_DATA_FOUND THEN
        ROLLBACK TO UpdateBSCDimLevMdPVT;
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        IF (x_msg_data IS NOT NULL) THEN
            x_msg_data      :=  x_msg_data||' -> BSC_DIMENSION_LEVELS_PVT.Update_Bsc_Dim_Levels_Md ';
        ELSE
            x_msg_data      :=  SQLERRM||' at BSC_DIMENSION_LEVELS_PVT.Update_Bsc_Dim_Levels_Md ';
        END IF;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION NO_DATA_FOUND '||x_msg_data);
        RAISE;
    WHEN OTHERS THEN
        ROLLBACK TO UpdateBSCDimLevMdPVT;
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        IF (x_msg_data IS NOT NULL) THEN
            x_msg_data      :=  x_msg_data||' -> BSC_DIMENSION_LEVELS_PVT.Update_Bsc_Dim_Levels_Md ';
        ELSE
            x_msg_data      :=  SQLERRM||' at BSC_DIMENSION_LEVELS_PVT.Update_Bsc_Dim_Levels_Md ';
        END IF;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION OTHERS '||x_msg_data);
        RAISE;
end Update_Bsc_Dim_Levels_Md;

/************************************************************************************
************************************************************************************/

procedure Delete_Bsc_Dim_Levels_Md(
  p_commit              IN      varchar2 := FND_API.G_FALSE
 ,p_Dim_Level_Rec       IN      BSC_DIMENSION_LEVELS_PUB.Bsc_Dim_Level_Rec_Type
 ,x_return_status       OUT NOCOPY     varchar2
 ,x_msg_count           OUT NOCOPY     number
 ,x_msg_data            OUT NOCOPY     varchar2
) is

l_id                number;

l_sql               varchar2(1000);

begin
  x_return_status := FND_API.G_RET_STS_SUCCESS;
  SAVEPOINT DeleteBSCDimLevMdPVT;
  delete from BSC_SYS_DIM_LEVELS_B
   where dim_level_id = p_Dim_Level_Rec.Bsc_Level_Id;

  delete from BSC_SYS_DIM_LEVELS_TL
   where dim_level_id = p_Dim_Level_Rec.Bsc_Level_Id;

  --PAJOHRI Added 01-JUN-2003
  -- delete dimensin from groups
  DELETE  FROM BSC_SYS_DIM_LEVELS_BY_GROUP
  WHERE   dim_level_id    = p_Dim_Level_Rec.Bsc_Level_Id;

  --delete dimension from relationships
  DELETE  FROM    BSC_SYS_DIM_LEVEL_RELS
  WHERE   dim_level_id         = p_Dim_Level_Rec.Bsc_Level_Id
  OR      parent_dim_level_id  = p_Dim_Level_Rec.Bsc_Level_Id;
  if (p_commit = FND_API.G_TRUE) then
    commit;
  end if;

EXCEPTION
    WHEN FND_API.G_EXC_ERROR THEN
        ROLLBACK TO DeleteBSCDimLevMdPVT;
        FND_MSG_PUB.Count_And_Get
        (      p_encoded   =>  FND_API.G_FALSE
           ,   p_count     =>  x_msg_count
           ,   p_data      =>  x_msg_data
        );
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION FND_API.G_EXC_ERROR '||x_msg_data);
        x_return_status :=  FND_API.G_RET_STS_ERROR;
        RAISE;
    WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
        ROLLBACK TO DeleteBSCDimLevMdPVT;
        FND_MSG_PUB.Count_And_Get
        (      p_encoded   =>  FND_API.G_FALSE
           ,   p_count     =>  x_msg_count
           ,   p_data      =>  x_msg_data
        );
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION FND_API.G_EXC_UNEXPECTED_ERROR '||x_msg_data);
        RAISE;
    WHEN NO_DATA_FOUND THEN
        ROLLBACK TO DeleteBSCDimLevMdPVT;
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        IF (x_msg_data IS NOT NULL) THEN
            x_msg_data      :=  x_msg_data||' -> BSC_DIMENSION_LEVELS_PVT.Delete_Bsc_Dim_Levels_Md ';
        ELSE
            x_msg_data      :=  SQLERRM||' at BSC_DIMENSION_LEVELS_PVT.Delete_Bsc_Dim_Levels_Md ';
        END IF;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION NO_DATA_FOUND '||x_msg_data);
        RAISE;
    WHEN OTHERS THEN
        ROLLBACK TO DeleteBSCDimLevMdPVT;
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        IF (x_msg_data IS NOT NULL) THEN
            x_msg_data      :=  x_msg_data||' -> BSC_DIMENSION_LEVELS_PVT.Delete_Bsc_Dim_Levels_Md ';
        ELSE
            x_msg_data      :=  SQLERRM||' at BSC_DIMENSION_LEVELS_PVT.Delete_Bsc_Dim_Levels_Md ';
        END IF;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION OTHERS '||x_msg_data);
        RAISE;
end Delete_Bsc_Dim_Levels_Md;

/************************************************************************************
************************************************************************************/

--:     This procedure populates column information for the Dimension view/table.
--:     This procedure is part of the Dimension API.

procedure Create_Bsc_Sys_Dim_Lvl_Cols(
  p_commit              IN      varchar2 := FND_API.G_FALSE
 ,p_Dim_Level_Rec       IN      BSC_DIMENSION_LEVELS_PUB.Bsc_Dim_Level_Rec_Type
 ,x_return_status       OUT NOCOPY     varchar2
 ,x_msg_count           OUT NOCOPY     number
 ,x_msg_data            OUT NOCOPY     varchar2
) is

l_count             number;

begin
  x_return_status := FND_API.G_RET_STS_SUCCESS;
  FND_MSG_PUB.Initialize;
  SAVEPOINT CreateBSCSysDimLevColsPVT;
  -- Validate Level Id exists.
  if p_Dim_Level_Rec.Bsc_Level_Id is not null then
    l_count := BSC_DIMENSION_LEVELS_PVT.validate_dim_level_id(p_Dim_Level_Rec.Bsc_Level_Id);
    if l_count <> 1 then
      FND_MESSAGE.SET_NAME('BSC','BSC_INVALID_LEVEL_ID');
      FND_MESSAGE.SET_TOKEN('BSC_LEVEL_ID', p_Dim_Level_Rec.Bsc_Level_Id);
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    end if;
  else
    FND_MESSAGE.SET_NAME('BSC','BSC_NO_LEVEL_ID_ENTERED');
    FND_MESSAGE.SET_TOKEN('BSC_LEVEL_ID', p_Dim_Level_Rec.Bsc_Level_Id);
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_ERROR;
  end if;

  g_db_object := 'BSC_SYS_DIM_LEVEL_COLS';

  -- Insert pertaining values into table bsc_sys_dim_level_cols.
  insert into BSC_SYS_DIM_LEVEL_COLS( dim_level_id
                                     ,column_name
                                     ,column_type)
                              values( p_Dim_Level_Rec.Bsc_Level_Id
                                     ,p_Dim_Level_Rec.Bsc_Level_Column_Name
                                     ,p_Dim_Level_Rec.Bsc_Level_Column_Type);

  if (p_commit = FND_API.G_TRUE) then
    commit;
  end if;

EXCEPTION
    WHEN FND_API.G_EXC_ERROR THEN
        ROLLBACK TO CreateBSCSysDimLevColsPVT;
        FND_MSG_PUB.Count_And_Get
        (      p_encoded   =>  FND_API.G_FALSE
           ,   p_count     =>  x_msg_count
           ,   p_data      =>  x_msg_data
        );
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION FND_API.G_EXC_ERROR '||x_msg_data);
        x_return_status :=  FND_API.G_RET_STS_ERROR;
        RAISE;
    WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
        ROLLBACK TO CreateBSCSysDimLevColsPVT;
        FND_MSG_PUB.Count_And_Get
        (      p_encoded   =>  FND_API.G_FALSE
           ,   p_count     =>  x_msg_count
           ,   p_data      =>  x_msg_data
        );
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION FND_API.G_EXC_UNEXPECTED_ERROR '||x_msg_data);
        RAISE;
    WHEN NO_DATA_FOUND THEN
        ROLLBACK TO CreateBSCSysDimLevColsPVT;
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        IF (x_msg_data IS NOT NULL) THEN
            x_msg_data      :=  x_msg_data||' -> BSC_DIMENSION_LEVELS_PVT.Create_Bsc_Sys_Dim_Lvl_Cols ';
        ELSE
            x_msg_data      :=  SQLERRM||' at BSC_DIMENSION_LEVELS_PVT.Create_Bsc_Sys_Dim_Lvl_Cols ';
        END IF;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION NO_DATA_FOUND '||x_msg_data);
        RAISE;
    WHEN OTHERS THEN
        ROLLBACK TO CreateBSCSysDimLevColsPVT;
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        if (SQLCODE = -01400) then
          FND_MESSAGE.SET_NAME('BSC','BSC_TABLE_NULL_VALUE');
          FND_MESSAGE.SET_TOKEN('BSC_OBJECT', g_db_object);
          FND_MSG_PUB.ADD;
          RAISE FND_API.G_EXC_ERROR;
        end if;
        IF (x_msg_data IS NOT NULL) THEN
            x_msg_data      :=  x_msg_data||' -> BSC_DIMENSION_LEVELS_PVT.Create_Bsc_Sys_Dim_Lvl_Cols ';
        ELSE
            x_msg_data      :=  SQLERRM||' at BSC_DIMENSION_LEVELS_PVT.Create_Bsc_Sys_Dim_Lvl_Cols ';
        END IF;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION OTHERS '||x_msg_data);
        RAISE;
end Create_Bsc_Sys_Dim_Lvl_Cols;

/************************************************************************************
************************************************************************************/

procedure Retrieve_Bsc_Sys_Dim_Lvl_Cols(
  p_commit              IN      varchar2 := FND_API.G_FALSE
 ,p_Dim_Level_Rec       IN      BSC_DIMENSION_LEVELS_PUB.Bsc_Dim_Level_Rec_Type
 ,x_Dim_Level_Rec       IN OUT NOCOPY   BSC_DIMENSION_LEVELS_PUB.Bsc_Dim_Level_Rec_Type
 ,x_return_status       OUT NOCOPY     varchar2
 ,x_msg_count           OUT NOCOPY     number
 ,x_msg_data            OUT NOCOPY     varchar2
) is

begin
  x_return_status := FND_API.G_RET_STS_SUCCESS;
  g_db_object := 'Retrieve_Bsc_Sys_Dim_Lvl_Cols';

  select distinct column_name
    into x_Dim_Level_Rec.Bsc_Level_Column_Name
    from BSC_SYS_DIM_LEVEL_COLS
   where dim_level_id = p_Dim_Level_Rec.Bsc_Level_Id
     and column_type = p_Dim_Level_Rec.Bsc_Level_Column_Type;

  if (p_commit = FND_API.G_TRUE) then
    commit;
  end if;

EXCEPTION
    WHEN FND_API.G_EXC_ERROR THEN
        FND_MSG_PUB.Count_And_Get
        (      p_encoded   =>  FND_API.G_FALSE
           ,   p_count     =>  x_msg_count
           ,   p_data      =>  x_msg_data
        );
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION FND_API.G_EXC_ERROR '||x_msg_data);
        x_return_status :=  FND_API.G_RET_STS_ERROR;
        RAISE;
    WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
        FND_MSG_PUB.Count_And_Get
        (      p_encoded   =>  FND_API.G_FALSE
           ,   p_count     =>  x_msg_count
           ,   p_data      =>  x_msg_data
        );
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION FND_API.G_EXC_UNEXPECTED_ERROR '||x_msg_data);
        RAISE;
    WHEN NO_DATA_FOUND THEN
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        IF (x_msg_data IS NOT NULL) THEN
            x_msg_data      :=  x_msg_data||' -> BSC_DIMENSION_LEVELS_PVT.Retrieve_Bsc_Sys_Dim_Lvl_Cols ';
        ELSE
            x_msg_data      :=  SQLERRM||' at BSC_DIMENSION_LEVELS_PVT.Retrieve_Bsc_Sys_Dim_Lvl_Cols ';
        END IF;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION NO_DATA_FOUND '||x_msg_data);
        RAISE;
    WHEN OTHERS THEN
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        IF (x_msg_data IS NOT NULL) THEN
            x_msg_data      :=  x_msg_data||' -> BSC_DIMENSION_LEVELS_PVT.Retrieve_Bsc_Sys_Dim_Lvl_Cols ';
        ELSE
            x_msg_data      :=  SQLERRM||' at BSC_DIMENSION_LEVELS_PVT.Retrieve_Bsc_Sys_Dim_Lvl_Cols ';
        END IF;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION OTHERS '||x_msg_data);
        RAISE;
end Retrieve_Bsc_Sys_Dim_Lvl_Cols;

/************************************************************************************
************************************************************************************/

procedure Update_Bsc_Sys_Dim_Lvl_Cols(
  p_commit              IN      varchar2 := FND_API.G_FALSE
 ,p_Dim_Level_Rec       IN      BSC_DIMENSION_LEVELS_PUB.Bsc_Dim_Level_Rec_Type
 ,x_return_status       OUT NOCOPY     varchar2
 ,x_msg_count           OUT NOCOPY     number
 ,x_msg_data            OUT NOCOPY     varchar2
) is

l_Dim_Level_Rec         BSC_DIMENSION_LEVELS_PUB.Bsc_Dim_Level_Rec_Type;

l_count                         number;

begin
  x_return_status := FND_API.G_RET_STS_SUCCESS;
  FND_MSG_PUB.Initialize;
  SAVEPOINT UpdateBSCSysDimLevColsPVT;
  -- Check that valid level id was entered.
  if p_Dim_Level_Rec.Bsc_Level_Id is not null then
    l_count := validate_dim_level_id(p_Dim_Level_Rec.Bsc_Level_Id);
    if l_count <> 1 then
      FND_MESSAGE.SET_NAME('BSC','BSC_INVALID_LEVEL_ID');
      FND_MESSAGE.SET_TOKEN('BSC_LEVEL_ID', p_Dim_Level_Rec.Bsc_Level_Id);
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    end if;
  else
    FND_MESSAGE.SET_NAME('BSC','BSC_NO_LEVEL_ID_ENTERED');
    FND_MESSAGE.SET_TOKEN('BSC_LEVEL_ID', p_Dim_Level_Rec.Bsc_Level_Id);
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_ERROR;
  end if;

  -- Level Column Type must be entered, if not raise error.
  if l_Dim_Level_Rec.Bsc_Level_Column_Type not in ('A', 'D', 'F', 'P', 'U') then
    FND_MESSAGE.SET_NAME('BSC','BSC_INVALID_LEVEL_COL_TYPE');
    FND_MESSAGE.SET_TOKEN('BSC_COL_TYPE', l_Dim_Level_Rec.Bsc_Level_Column_Type);
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_ERROR;
  end if;

  -- In this case there is only one column that may be updated, therefore there is no
  -- retrieval of previous values.

  update BSC_SYS_DIM_LEVEL_COLS
     set column_name = l_Dim_Level_Rec.Bsc_Level_Column_Name
   where dim_level_id = l_Dim_Level_Rec.Bsc_Level_Id
     and column_type = l_Dim_Level_Rec.Bsc_Level_Column_Type;

  if (p_commit = FND_API.G_TRUE) then
    commit;
  end if;

EXCEPTION
    WHEN FND_API.G_EXC_ERROR THEN
        ROLLBACK TO UpdateBSCSysDimLevColsPVT;
        FND_MSG_PUB.Count_And_Get
        (      p_encoded   =>  FND_API.G_FALSE
           ,   p_count     =>  x_msg_count
           ,   p_data      =>  x_msg_data
        );
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION FND_API.G_EXC_ERROR '||x_msg_data);
        x_return_status :=  FND_API.G_RET_STS_ERROR;
        RAISE;
    WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
        ROLLBACK TO UpdateBSCSysDimLevColsPVT;
        FND_MSG_PUB.Count_And_Get
        (      p_encoded   =>  FND_API.G_FALSE
           ,   p_count     =>  x_msg_count
           ,   p_data      =>  x_msg_data
        );
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION FND_API.G_EXC_UNEXPECTED_ERROR '||x_msg_data);
        RAISE;
    WHEN NO_DATA_FOUND THEN
        ROLLBACK TO UpdateBSCSysDimLevColsPVT;
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        IF (x_msg_data IS NOT NULL) THEN
            x_msg_data      :=  x_msg_data||' -> BSC_DIMENSION_LEVELS_PVT.Update_Bsc_Sys_Dim_Lvl_Cols ';
        ELSE
            x_msg_data      :=  SQLERRM||' at BSC_DIMENSION_LEVELS_PVT.Update_Bsc_Sys_Dim_Lvl_Cols ';
        END IF;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION NO_DATA_FOUND '||x_msg_data);
        RAISE;
    WHEN OTHERS THEN
        ROLLBACK TO UpdateBSCSysDimLevColsPVT;
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        IF (x_msg_data IS NOT NULL) THEN
            x_msg_data      :=  x_msg_data||' -> BSC_DIMENSION_LEVELS_PVT.Update_Bsc_Sys_Dim_Lvl_Cols ';
        ELSE
            x_msg_data      :=  SQLERRM||' at BSC_DIMENSION_LEVELS_PVT.Update_Bsc_Sys_Dim_Lvl_Cols ';
        END IF;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION OTHERS '||x_msg_data);
        RAISE;
end Update_Bsc_Sys_Dim_Lvl_Cols;

/************************************************************************************
************************************************************************************/

procedure Delete_Bsc_Sys_Dim_Lvl_Cols(
  p_commit              IN      varchar2 := FND_API.G_FALSE
 ,p_Dim_Level_Rec       IN      BSC_DIMENSION_LEVELS_PUB.Bsc_Dim_Level_Rec_Type
 ,x_return_status       OUT NOCOPY     varchar2
 ,x_msg_count           OUT NOCOPY     number
 ,x_msg_data            OUT NOCOPY     varchar2
) is

l_id                            number;

l_sql                           varchar2(1000);

begin
  x_return_status := FND_API.G_RET_STS_SUCCESS;
  SAVEPOINT DeleteBSCSysDimLevColsPVT;
  delete from BSC_SYS_DIM_LEVEL_COLS
   where dim_level_id = p_Dim_Level_Rec.Bsc_Level_Id;

  if (p_commit = FND_API.G_TRUE) then
    commit;
  end if;

EXCEPTION
    WHEN FND_API.G_EXC_ERROR THEN
        ROLLBACK TO DeleteBSCSysDimLevColsPVT;
        FND_MSG_PUB.Count_And_Get
        (      p_encoded   =>  FND_API.G_FALSE
           ,   p_count     =>  x_msg_count
           ,   p_data      =>  x_msg_data
        );
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION FND_API.G_EXC_ERROR '||x_msg_data);
        x_return_status :=  FND_API.G_RET_STS_ERROR;
        RAISE;
    WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
        ROLLBACK TO DeleteBSCSysDimLevColsPVT;
        FND_MSG_PUB.Count_And_Get
        (      p_encoded   =>  FND_API.G_FALSE
           ,   p_count     =>  x_msg_count
           ,   p_data      =>  x_msg_data
        );
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION FND_API.G_EXC_UNEXPECTED_ERROR '||x_msg_data);
        RAISE;
    WHEN NO_DATA_FOUND THEN
        ROLLBACK TO DeleteBSCSysDimLevColsPVT;
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        IF (x_msg_data IS NOT NULL) THEN
            x_msg_data      :=  x_msg_data||' -> BSC_DIMENSION_LEVELS_PVT.Delete_Bsc_Sys_Dim_Lvl_Cols ';
        ELSE
            x_msg_data      :=  SQLERRM||' at BSC_DIMENSION_LEVELS_PVT.Delete_Bsc_Sys_Dim_Lvl_Cols ';
        END IF;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION NO_DATA_FOUND '||x_msg_data);
        RAISE;
    WHEN OTHERS THEN
        ROLLBACK TO DeleteBSCSysDimLevColsPVT;
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        IF (x_msg_data IS NOT NULL) THEN
            x_msg_data      :=  x_msg_data||' -> BSC_DIMENSION_LEVELS_PVT.Delete_Bsc_Sys_Dim_Lvl_Cols ';
        ELSE
            x_msg_data      :=  SQLERRM||' at BSC_DIMENSION_LEVELS_PVT.Delete_Bsc_Sys_Dim_Lvl_Cols ';
        END IF;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION OTHERS '||x_msg_data);
        RAISE;
end Delete_Bsc_Sys_Dim_Lvl_Cols;

/************************************************************************************
06-JUN-03 = ADRAO Added sequences to generate IDs for Granular Locking
************************************************************************************/

--: This function returns the next ID for a given column and a given table.
--: This is used much like a sequence.

function Get_Next_Value(
  p_table_name          IN      varchar2
 ,p_column_name         IN      varchar2
)return number is

TYPE Recdc_value                IS REF CURSOR;
dc_value                        Recdc_value;

l_next                          number;

l_sql                           varchar2(500);

l_return_status                 varchar2(100);
l_msg_data                      varchar2(10);
l_msg_count                     number;

begin

-- Check if it is a Dimension Level, Group, Dataset or a Measure.

  IF (UPPER(p_table_name) = 'BSC_SYS_DIM_LEVELS_B') THEN
     SELECT BSC_SYS_DIM_LEVEL_ID_S.NEXTVAL
     INTO l_next
     FROM DUAL;
  ELSIF (UPPER(p_table_name) = 'BSC_SYS_DIM_GROUPS_TL') THEN
     SELECT BSC_SYS_DIM_GROUP_ID_S.NEXTVAL
     INTO l_next
     FROM DUAL;
  ELSIF (UPPER(p_table_name) = 'BSC_SYS_MEASURES') THEN
     SELECT BSC_SYS_MEASURE_ID_S.NEXTVAL
     INTO l_next
     FROM DUAL;
  ELSIF (UPPER(p_table_name) = 'BSC_SYS_DATASETS_TL') THEN
     SELECT BSC_SYS_DATASET_ID_S.NEXTVAL
     INTO l_next
     FROM DUAL;
  ELSIF (UPPER(p_table_name) = 'BSC_KPIS_B') THEN
      SELECT BSC_INDICATOR_ID_S.NEXTVAL
      INTO l_next
      FROM DUAL;
  ELSE
    l_sql := 'select NVL(max(' || p_column_name || '), 0) + 1 ' ||
                ' from ' || p_table_name;

       OPEN dc_value FOR l_sql;
         FETCH dc_value INTO l_next;
       CLOSE dc_value;
  END IF;

  RETURN l_next;

EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    l_return_status := FND_API.G_RET_STS_ERROR;
    FND_MSG_PUB.Count_And_Get( p_count  =>      l_msg_count
                              ,p_data   =>      l_msg_data);
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
    FND_MSG_PUB.Count_And_Get( p_count    =>      l_msg_count
                              ,p_data     =>      l_msg_data);
    raise;
  WHEN NO_DATA_FOUND THEN
    l_return_status := FND_API.G_RET_STS_ERROR;
    FND_MSG_PUB.Count_And_Get( p_count    =>      l_msg_count
                              ,p_data     =>      l_msg_data);
    raise;
  WHEN OTHERS THEN
    l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
    FND_MSG_PUB.Count_And_Get( p_count    =>      l_msg_count
                              ,p_data     =>      l_msg_data);
    raise;

end Get_Next_Value;

/************************************************************************************
************************************************************************************/

--: This function is used to get an objects ID (dimension, dimensin group, etc.)
--: based on a table, name for the name or description column, name of the object,
--: and name for the column id.

function Get_Id(
  p_table_name          IN      varchar2
 ,p_column_name         IN      varchar2
 ,p_column_value        IN      varchar2
 ,p_column_ID_name      IN      varchar2
) return number is

TYPE Recdc_value                IS REF CURSOR;
dc_value                        Recdc_value;

l_ID                            number;

l_sql                           varchar2(500);

l_return_status                 varchar2(100);
l_msg_data                      varchar2(10);
l_msg_count                     number;

begin

  l_sql := 'select distinct ' || p_column_ID_name ||
           ' from ' || p_table_name ||
           ' where upper(' || p_column_name || ') = upper(:1)';

  open dc_value for l_sql using p_column_value;
    fetch dc_value into l_ID;
  close dc_value;

  return l_ID;

EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    l_return_status := FND_API.G_RET_STS_ERROR;
    FND_MSG_PUB.Count_And_Get( p_count  =>      l_msg_count
                              ,p_data   =>      l_msg_data);
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
    FND_MSG_PUB.Count_And_Get( p_count    =>      l_msg_count
                              ,p_data     =>      l_msg_data);
    raise;
  WHEN NO_DATA_FOUND THEN
    l_return_status := FND_API.G_RET_STS_ERROR;
    FND_MSG_PUB.Count_And_Get( p_count    =>      l_msg_count
                              ,p_data     =>      l_msg_data);
    raise;
  WHEN OTHERS THEN
    l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
    FND_MSG_PUB.Count_And_Get( p_count    =>      l_msg_count
                              ,p_data     =>      l_msg_data);
    raise;

end Get_Id;

/************************************************************************************
************************************************************************************/

--: This function gets the count of rows for the dimension with a given name.
--: It is used like a validation method.

function Validate_Dim_Level(
  p_level_name          IN      varchar2
) return varchar2 is

l_count                         number;


l_return_status                 varchar2(100);
l_msg_data                      varchar2(10);
l_msg_count                     number;

begin
    SELECT COUNT(*) INTO l_Count
    FROM   BSC_SYS_DIM_LEVELS_B
    WHERE  Level_Table_Name = p_level_name;

    RETURN l_Count;
EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    l_return_status := FND_API.G_RET_STS_ERROR;
    FND_MSG_PUB.Count_And_Get( p_count  =>      l_msg_count
                              ,p_data   =>      l_msg_data);
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
    FND_MSG_PUB.Count_And_Get( p_count    =>      l_msg_count
                              ,p_data     =>      l_msg_data);
    raise;
  WHEN NO_DATA_FOUND THEN
    l_return_status := FND_API.G_RET_STS_ERROR;
    FND_MSG_PUB.Count_And_Get( p_count    =>      l_msg_count
                              ,p_data     =>      l_msg_data);
    raise;
  WHEN OTHERS THEN
    l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
    FND_MSG_PUB.Count_And_Get( p_count    =>      l_msg_count
                              ,p_data     =>      l_msg_data);
    raise;

end Validate_Dim_Level;

/************************************************************************************
************************************************************************************/

--: This function gets the count of rows for dimension groups with a given name.
--: It is used like a validation method.

function Validate_Dim_Group(
  p_group_name                  varchar2
) return number is

l_count                         number;

l_return_status                 varchar2(100);
l_msg_data                      varchar2(10);
l_msg_count                     number;

begin
  SELECT COUNT(*) INTO l_Count
  FROM   BSC_SYS_DIM_GROUPS_VL
  WHERE  UPPER(NAME) = UPPER(p_group_name);

  RETURN l_Count;
EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    l_return_status := FND_API.G_RET_STS_ERROR;
    FND_MSG_PUB.Count_And_Get( p_count  =>      l_msg_count
                              ,p_data   =>      l_msg_data);
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
    FND_MSG_PUB.Count_And_Get( p_count    =>      l_msg_count
                              ,p_data     =>      l_msg_data);
    raise;
  WHEN NO_DATA_FOUND THEN
    l_return_status := FND_API.G_RET_STS_ERROR;
    FND_MSG_PUB.Count_And_Get( p_count    =>      l_msg_count
                              ,p_data     =>      l_msg_data);
    raise;
  WHEN OTHERS THEN
    l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
    FND_MSG_PUB.Count_And_Get( p_count    =>      l_msg_count
                              ,p_data     =>      l_msg_data);
    raise;

end Validate_Dim_Group;

/************************************************************************************
************************************************************************************/

function get_dim_levels(
  p_meas_short_name     varchar2
 ,p_dim_short_name      varchar2
) return Dim_Level_Tbl_Type is

l_Dim_Level_Tbl         Dim_Level_Tbl_Type;

TYPE Recdc_value                IS REF CURSOR;
dc_value                        Recdc_value;

l_sql               varchar2(5000);

l_cnt               number;

l_return_status                 varchar2(100);
l_msg_data                      varchar2(10);
l_msg_count                     number;

begin

  l_sql := 'select distinct d.short_name, substr(e.name, 1, 45) ' ||
           '  from bis_indicators a ' ||
           '      ,bis_indicator_dimensions b ' ||
           '      ,bis_dimensions_tl c ' ||
           '      ,bis_levels d ' ||
           '      ,bis_levels_tl e ' ||
           '      ,bis_indicators_tl f ' ||
           '      ,bis_dimensions h ' ||
           '      ,( select distinct dimension1_level_id as tgt_level_id from bis_target_levels b, bis_indicators a ' ||
           '      where b.indicator_id = a.indicator_id and upper(a.short_name) = upper(:1)' ||
           ' UNION select distinct dimension2_level_id from bis_target_levels b, bis_indicators a ' ||
           '        where b.indicator_id = a.indicator_id and upper(a.short_name) = upper(:2)' ||
           ' UNION select distinct dimension3_level_id from bis_target_levels b, bis_indicators a ' ||
           '        where b.indicator_id = a.indicator_id and upper(a.short_name) = upper(:3)' ||
           ' UNION select distinct dimension4_level_id from bis_target_levels b, bis_indicators a ' ||
           '        where b.indicator_id = a.indicator_id and upper(a.short_name) = upper(:4)' ||
           ' UNION select distinct dimension5_level_id from bis_target_levels b, bis_indicators a ' ||
           '        where b.indicator_id = a.indicator_id and upper(a.short_name) = upper(:5)' ||
           ' UNION select distinct dimension6_level_id from bis_target_levels b, bis_indicators a ' ||
           '        where b.indicator_id = a.indicator_id and upper(a.short_name) = upper(:6)' ||
           ' UNION select distinct dimension7_level_id from bis_target_levels b, bis_indicators a ' ||
           '        where b.indicator_id = a.indicator_id and upper(a.short_name) = upper(:7) ) g' ||
           ' where ' ||
           '       upper(a.short_name) like upper(:8) and ' ||
           '       a.indicator_id = b.indicator_id and ' ||
           '       b.dimension_id = c.dimension_id and ' ||
           '       c.dimension_id = d.dimension_id and ' ||
           '       d.level_id = e.level_id and ' ||
           '       a.indicator_id = f.indicator_id and ' ||
           '       d.level_id = g.tgt_level_id and ' ||
           '       b.dimension_id = h.dimension_id and ' ||
           '       h.short_name = :9';

  l_cnt := 0;
  open dc_value for l_sql using p_meas_short_name, p_meas_short_name,
  p_meas_short_name, p_meas_short_name, p_meas_short_name, p_meas_short_name,
  p_meas_short_name, p_meas_short_name, p_dim_short_name;
    loop
      fetch dc_value into l_Dim_Level_Tbl(l_cnt + 1).Level_Short_Name,
                          l_Dim_Level_Tbl(l_cnt + 1).Level_Long_Name;
      exit when dc_value%NOTFOUND;
      l_cnt := l_cnt + 1;
    end loop;
  close dc_value;

  return l_Dim_Level_Tbl;

EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    l_return_status := FND_API.G_RET_STS_ERROR;
    FND_MSG_PUB.Count_And_Get( p_count  =>      l_msg_count
                              ,p_data   =>      l_msg_data);
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
    FND_MSG_PUB.Count_And_Get( p_count    =>      l_msg_count
                              ,p_data     =>      l_msg_data);
    raise;
  WHEN NO_DATA_FOUND THEN
    l_return_status := FND_API.G_RET_STS_ERROR;
    FND_MSG_PUB.Count_And_Get( p_count    =>      l_msg_count
                              ,p_data     =>      l_msg_data);
    raise;
  WHEN OTHERS THEN
    l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
    FND_MSG_PUB.Count_And_Get( p_count    =>      l_msg_count
                              ,p_data     =>      l_msg_data);
    raise;

end get_dim_levels;

/************************************************************************************
************************************************************************************/

function Validate_Value(
  p_Table_Name          varchar2
 ,p_Table_Column_Name       varchar2
 ,p_Column_Value        number
) return number is

TYPE Recdc_value                IS REF CURSOR;
dc_value                        Recdc_value;

l_count                         number;

l_sql                           varchar2(1000);

l_return_status         varchar2(100);
l_msg_data          varchar2(10);
l_msg_count         number;

begin

  l_sql := 'select count(distinct ' || p_Table_Column_Name || ')' ||
           '  from ' || p_Table_Name ||
           ' where ' || p_Table_Column_Name || ' = :1'; --|| p_Column_Value;

  open dc_value for l_sql using p_Column_Value; -- bug 3111300
    fetch dc_value into l_count;
  close dc_value;

  return l_count;

EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    l_return_status := FND_API.G_RET_STS_ERROR;
    FND_MSG_PUB.Count_And_Get( p_count  =>      l_msg_count
                              ,p_data   =>      l_msg_data);
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
    FND_MSG_PUB.Count_And_Get( p_count    =>      l_msg_count
                              ,p_data     =>      l_msg_data);
    raise;
  WHEN NO_DATA_FOUND THEN
    l_return_status := FND_API.G_RET_STS_ERROR;
    FND_MSG_PUB.Count_And_Get( p_count    =>      l_msg_count
                              ,p_data     =>      l_msg_data);
    raise;
  WHEN OTHERS THEN
    l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
    FND_MSG_PUB.Count_And_Get( p_count    =>      l_msg_count
                              ,p_data     =>      l_msg_data);
    raise;

end Validate_Value;

/************************************************************************************
************************************************************************************/

function Get_Object_Name(
  p_Table_Name                  varchar2
 ,p_Table_Name_Column       varchar2
 ,p_Table_Id_Column     varchar2
 ,p_Id_Value            number
) return varchar2 is

TYPE Recdc_value                IS REF CURSOR;
dc_value                        Recdc_value;

l_count                         number;

l_sql                           varchar2(1000);
l_name              varchar2(255);

l_return_status                 varchar2(100);
l_msg_data                      varchar2(10);
l_msg_count                     number;

begin

  l_sql := 'select distinct ' || p_Table_Name_Column || ')' ||
           '  from ' || p_Table_Name ||
           ' where ' || p_Table_Id_Column || ' = :1' ;

  open dc_value for l_sql using p_Id_Value;
    fetch dc_value into l_count;
  close dc_value;

  return l_count;

EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    l_return_status := FND_API.G_RET_STS_ERROR;
    FND_MSG_PUB.Count_And_Get( p_count  =>      l_msg_count
                              ,p_data   =>      l_msg_data);
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
    FND_MSG_PUB.Count_And_Get( p_count    =>      l_msg_count
                              ,p_data     =>      l_msg_data);
    raise;
  WHEN NO_DATA_FOUND THEN
    l_return_status := FND_API.G_RET_STS_ERROR;
    FND_MSG_PUB.Count_And_Get( p_count    =>      l_msg_count
                              ,p_data     =>      l_msg_data);
    raise;
  WHEN OTHERS THEN
    l_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
    FND_MSG_PUB.Count_And_Get( p_count    =>      l_msg_count
                              ,p_data     =>      l_msg_data);
    raise;

end Get_Object_Name;


/*********************************************************************************

-- Procedures to Handle Relationships between Dimension Levels

**********************************************************************************/

/*---------------------------------------------------------------------------------------
   Create_Dim_Level_Relation
---------------------------------------------------------------------------------------*/
PROCEDURE Create_Dim_Level_Relation(
  p_commit              IN             varchar2 := FND_API.G_FALSE
 ,p_Dim_Level_Rec       IN             BSC_DIMENSION_LEVELS_PUB.Bsc_Dim_Level_Rec_Type
 ,x_return_status       OUT NOCOPY     varchar2
 ,x_msg_count           OUT NOCOPY     number
 ,x_msg_data            OUT NOCOPY     varchar2
) IS

l_count NUMBER;
l_temp_col VARCHAR2(50);

BEGIN
  x_return_status := FND_API.G_RET_STS_SUCCESS;
  FND_MSG_PUB.Initialize;
  SAVEPOINT CreateBSCDimLevRelsPVT;
  g_db_object     := 'Create_Dim_Level_Relation';
  x_return_status :=  FND_API.G_RET_STS_SUCCESS;
   -- Validate level id exists.

  IF ((p_Dim_Level_Rec.Bsc_Level_Id  IS NOT NULL) AND (p_Dim_Level_Rec.Bsc_Parent_Level_Id IS NOT NULL)) THEN

      l_count := BSC_DIMENSION_LEVELS_PVT.Validate_Value( 'BSC_SYS_DIM_LEVELS_B', 'DIM_LEVEL_ID', p_Dim_Level_Rec.Bsc_Level_Id);
      IF (l_count = 0) THEN
          FND_MESSAGE.SET_NAME('BSC','BSC_INVALID_LEVEL_ID');
          FND_MESSAGE.SET_TOKEN('BSC_LEVEL_ID', p_Dim_Level_Rec.Bsc_Level_Id);
          FND_MSG_PUB.ADD;
          RAISE FND_API.G_EXC_ERROR;
      END IF;

      l_count := BSC_DIMENSION_LEVELS_PVT.Validate_Value( 'BSC_SYS_DIM_LEVELS_B', 'DIM_LEVEL_ID', p_Dim_Level_Rec.Bsc_Parent_Level_Id);
      IF (l_count = 0) THEN
          FND_MESSAGE.SET_NAME('BSC','BSC_INVALID_LEVEL_ID');
          FND_MESSAGE.SET_TOKEN('BSC_LEVEL_ID', p_Dim_Level_Rec.Bsc_Parent_Level_Id);
          FND_MSG_PUB.ADD;
          RAISE FND_API.G_EXC_ERROR;
      END IF;

      ---- DBMS_OUTPUT.PUT_LINE('After Validation');

      l_temp_col := p_Dim_Level_Rec.Bsc_Relation_Column;

      IF (p_Dim_Level_Rec.Bsc_Relation_Column IS NULL) THEN

          -- p_Dim_Level_Rec.Bsc_Relation_Column

          /*
           If this is a PMF Relationship type, then the following validation has to be
           carried out to validation the Dat Source type for the current PMF Relationship

           SELECT MEANING FROM BSC_LOOKUPS
           WHERE LOOKUP_TYPE = 'BSC_COMMON_UI'
           AND LOOKUP_CODE IN ('TABLE', 'FUNCTION')

          */

                            l_temp_col :=
                           get_Relation_Column (
                                p_Dim_Level_Rec.Bsc_Level_Id
                              , p_Dim_Level_Rec.Bsc_Parent_Level_Id
                              , p_Dim_Level_Rec.Bsc_Relation_Type
                              , x_return_status
                              , x_msg_count
                              , x_msg_data
                            );
      END IF;

      ---- DBMS_OUTPUT.PUT_LINE('After 1 If');

      IF (p_Dim_Level_Rec.Bsc_Relation_Type = 1) THEN

      -- DBMS_OUTPUT.PUT_LINE('p_Dim_Level_Rec.Bsc_Level_Id         ' || p_Dim_Level_Rec.Bsc_Level_Id);
      -- DBMS_OUTPUT.PUT_LINE('p_Dim_Level_Rec.Bsc_Parent_Level_Id  ' || p_Dim_Level_Rec.Bsc_Parent_Level_Id);
      -- DBMS_OUTPUT.PUT_LINE('p_Dim_Level_Rec.Bsc_Relation_Type    ' || p_Dim_Level_Rec.Bsc_Relation_Type);
      -- DBMS_OUTPUT.PUT_LINE('l_temp_col                           ' || l_temp_col);

          INSERT INTO BSC_SYS_DIM_LEVEL_RELS (DIM_LEVEL_ID,
                         RELATION_COL,
                         PARENT_DIM_LEVEL_ID,
                         RELATION_TYPE,
                         DIRECT_RELATION,
                         DATA_SOURCE_TYPE,
                         DATA_SOURCE)
                      VALUES (p_Dim_Level_Rec.Bsc_Level_Id,
                         l_temp_col,
                         p_Dim_Level_Rec.Bsc_Parent_Level_Id,
                         p_Dim_Level_Rec.Bsc_Relation_Type,
                         null,
                         p_Dim_Level_Rec.Bsc_Data_Source_Type,
                         p_Dim_Level_Rec.Bsc_Data_Source);

      ELSIF  (p_Dim_Level_Rec.Bsc_Relation_Type = 2) THEN


                 --DBMS_OUTPUT.PUT_LINE('Insert 2');
          /*
            For MxN relationship types, we need to insert two columns,

            With the Parent and the Child interchanged.

          */

          INSERT INTO BSC_SYS_DIM_LEVEL_RELS (DIM_LEVEL_ID,
                         RELATION_COL,
                         PARENT_DIM_LEVEL_ID,
                         RELATION_TYPE,
                         DIRECT_RELATION,
                         DATA_SOURCE_TYPE,
                         DATA_SOURCE)
                      VALUES (p_Dim_Level_Rec.Bsc_Level_Id,
                         l_temp_col,
                         p_Dim_Level_Rec.Bsc_Parent_Level_Id,
                         p_Dim_Level_Rec.Bsc_Relation_Type,
                         null,
                         null,
                         null); -- There will be no Data Source/Data Type for BSC Dim Object


          /* Allow the  MxN Relationship only for BSC Type of Dimension Objects */

          IF (p_Dim_Level_Rec.Bsc_Source = 'BSC') THEN
               INSERT INTO BSC_SYS_DIM_LEVEL_RELS (DIM_LEVEL_ID,
                              RELATION_COL,
                              PARENT_DIM_LEVEL_ID,
                              RELATION_TYPE,
                              DIRECT_RELATION,
                              DATA_SOURCE_TYPE,
                              DATA_SOURCE)
                           VALUES (p_Dim_Level_Rec.Bsc_Parent_Level_Id,
                              l_temp_col,
                              p_Dim_Level_Rec.Bsc_Level_Id,
                              p_Dim_Level_Rec.Bsc_Relation_Type,
                              null,
                              null,
                              null); -- There will be no Data Source/Data Type for BSC Dim Object

          END IF;

      END IF;

   ELSE
          FND_MESSAGE.SET_NAME('BSC','BSC_NO_LEVEL_ID_ENTERED');
          FND_MESSAGE.SET_TOKEN('BSC_LEVEL_ID', P_DIM_LEVEL_REC.BSC_LEVEL_ID);
          FND_MSG_PUB.ADD;
          RAISE FND_API.G_EXC_ERROR;
   END IF;

      ---- DBMS_OUTPUT.PUT_LINE('END ....');

   IF (p_commit = FND_API.G_TRUE) THEN
        COMMIT;
   END IF;

 EXCEPTION
    WHEN FND_API.G_EXC_ERROR THEN
        ROLLBACK TO CreateBSCDimLevRelsPVT;
        FND_MSG_PUB.Count_And_Get
        (      p_encoded   =>  FND_API.G_FALSE
           ,   p_count     =>  x_msg_count
           ,   p_data      =>  x_msg_data
        );
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION FND_API.G_EXC_ERROR '||x_msg_data);
        x_return_status :=  FND_API.G_RET_STS_ERROR;
        RAISE;
    WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
        ROLLBACK TO CreateBSCDimLevRelsPVT;
        FND_MSG_PUB.Count_And_Get
        (      p_encoded   =>  FND_API.G_FALSE
           ,   p_count     =>  x_msg_count
           ,   p_data      =>  x_msg_data
        );
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION FND_API.G_EXC_UNEXPECTED_ERROR '||x_msg_data);
        RAISE;
    WHEN NO_DATA_FOUND THEN
        ROLLBACK TO CreateBSCDimLevRelsPVT;
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        IF (x_msg_data IS NOT NULL) THEN
            x_msg_data      :=  x_msg_data||' -> BSC_DIMENSION_LEVELS_PVT.Create_Dim_Level_Relation ';
        ELSE
            x_msg_data      :=  SQLERRM||' at BSC_DIMENSION_LEVELS_PVT.Create_Dim_Level_Relation ';
        END IF;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION NO_DATA_FOUND '||x_msg_data);
        RAISE;
    WHEN OTHERS THEN
        ROLLBACK TO CreateBSCDimLevRelsPVT;
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        IF (x_msg_data IS NOT NULL) THEN
            x_msg_data      :=  x_msg_data||' -> BSC_DIMENSION_LEVELS_PVT.Create_Dim_Level_Relation ';
        ELSE
            x_msg_data      :=  SQLERRM||' at BSC_DIMENSION_LEVELS_PVT.Create_Dim_Level_Relation ';
        END IF;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION OTHERS '||x_msg_data);
        RAISE;
END Create_Dim_Level_Relation;

/*---------------------------------------------------------------------------------------
 Delete_Dim_Level_Relation:
    Parameters:  p_Dim_Level_Rec.Bsc_Level_Id
                     p_Dim_Level_Rec.Bsc_Parent_Level_Id
---------------------------------------------------------------------------------------*/
PROCEDURE Delete_Dim_Level_Relation(
  p_commit              IN      varchar2 := FND_API.G_FALSE
 ,p_Dim_Level_Rec       IN      BSC_DIMENSION_LEVELS_PUB.Bsc_Dim_Level_Rec_Type
 ,x_return_status       OUT NOCOPY     varchar2
 ,x_msg_count       OUT NOCOPY  number
 ,x_msg_data        OUT NOCOPY  varchar2
 ) IS

BEGIN
  x_return_status := FND_API.G_RET_STS_SUCCESS;
 SAVEPOINT DeleteBSCDimLevRelsPVT;

 DELETE FROM BSC_SYS_DIM_LEVEL_RELS
 WHERE DIM_LEVEL_ID = p_Dim_Level_Rec.Bsc_Level_Id
   AND PARENT_DIM_LEVEL_ID = p_Dim_Level_Rec.Bsc_Parent_Level_Id;

EXCEPTION
    WHEN FND_API.G_EXC_ERROR THEN
        ROLLBACK TO DeleteBSCDimLevRelsPVT;
        FND_MSG_PUB.Count_And_Get
        (      p_encoded   =>  FND_API.G_FALSE
           ,   p_count     =>  x_msg_count
           ,   p_data      =>  x_msg_data
        );
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION FND_API.G_EXC_ERROR '||x_msg_data);
        x_return_status :=  FND_API.G_RET_STS_ERROR;
        RAISE;
    WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
        ROLLBACK TO DeleteBSCDimLevRelsPVT;
        FND_MSG_PUB.Count_And_Get
        (      p_encoded   =>  FND_API.G_FALSE
           ,   p_count     =>  x_msg_count
           ,   p_data      =>  x_msg_data
        );
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION FND_API.G_EXC_UNEXPECTED_ERROR '||x_msg_data);
        RAISE;
    WHEN NO_DATA_FOUND THEN
        ROLLBACK TO DeleteBSCDimLevRelsPVT;
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        IF (x_msg_data IS NOT NULL) THEN
            x_msg_data      :=  x_msg_data||' -> BSC_DIMENSION_LEVELS_PVT.Delete_Dim_Level_Relation ';
        ELSE
            x_msg_data      :=  SQLERRM||' at BSC_DIMENSION_LEVELS_PVT.Delete_Dim_Level_Relation ';
        END IF;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION NO_DATA_FOUND '||x_msg_data);
        RAISE;
    WHEN OTHERS THEN
        ROLLBACK TO DeleteBSCDimLevRelsPVT;
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        IF (x_msg_data IS NOT NULL) THEN
            x_msg_data      :=  x_msg_data||' -> BSC_DIMENSION_LEVELS_PVT.Delete_Dim_Level_Relation ';
        ELSE
            x_msg_data      :=  SQLERRM||' at BSC_DIMENSION_LEVELS_PVT.Delete_Dim_Level_Relation ';
        END IF;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION OTHERS '||x_msg_data);
        RAISE;
END Delete_Dim_Level_Relation;

/*-------------------------------------------------------------------------------------
  Evaluate_Circular_Relationship

        This function Return False if the Relationship is not valid
    and Return in x_Parents the Relationship that already exist
---------------------------------------------------------------------------------------*/
FUNCTION Evaluate_Circular_Relationship
(
        p_Child_level_Id        IN              NUMBER
    ,   p_Parent_Dim_Level_Id   IN              NUMBER
    ,   p_Relation_Type         IN              NUMBER := 1
    ,   p_Output_Flag           IN              BOOLEAN := TRUE
    ,   x_Parents               OUT     NOCOPY  VARCHAR2
    ,   x_return_status         OUT     NOCOPY  VARCHAR2
    ,   x_msg_count             OUT     NOCOPY  NUMBER
    ,   x_msg_data              OUT     NOCOPY  VARCHAR2
) RETURN BOOLEAN IS

  CURSOR c_grand_parents IS
    SELECT PARENT_DIM_LEVEL_ID
     FROM BSC_SYS_DIM_LEVEL_RELS
      WHERE DIM_LEVEL_ID = p_Parent_Dim_Level_Id
       AND   RELATION_TYPE = 1;

  v_parent      NUMBER;
  v_temp        BOOLEAN := TRUE;
  v_parents     VARCHAR2(3000) := '';
  l_count       NUMBER;
  l_num         NUMBER := 0;
BEGIN
  x_return_status := FND_API.G_RET_STS_SUCCESS;

 IF (p_Relation_Type <> 1) THEN
    RETURN TRUE;
 END IF;
 IF p_Child_level_Id <> p_Parent_Dim_Level_Id THEN

    FOR cd IN c_grand_parents LOOP
        v_parent   :=  cd.Parent_Dim_Level_Id;

        IF v_parent = p_Child_level_Id THEN
            v_temp := FALSE;
        ELSIF v_parent = p_Parent_Dim_Level_Id THEN

            SELECT    COUNT(dim_level_id)
            INTO      l_count
            FROM      BSC_SYS_DIM_LEVELS_B
            WHERE     dim_level_id =   p_Parent_Dim_Level_Id
            AND       source       =  'PMF';

            IF (l_count <> 0) THEN
                v_temp := TRUE;
            ELSE
                v_temp := FALSE;
                x_return_status := 'SAME';
            END IF;
        ELSE
            l_num   :=  l_num + 1;
            v_temp := Evaluate_Circular_Relationship
            (
                    p_Child_level_Id        =>  p_Child_level_Id
                ,   p_Parent_Dim_Level_Id   =>  v_parent
                ,   p_Relation_Type         =>  p_Relation_Type
                ,   p_Output_Flag           =>  FALSE
                ,   x_Parents               =>  v_parents
                ,   x_return_status         =>  x_return_status
                ,   x_msg_count             =>  x_msg_count
                ,   x_msg_data              =>  x_msg_data
            );
            x_Parents := v_parents;
        END IF;
        IF v_temp = FALSE THEN
            x_Parents := ' -> ' || get_Dim_Level_Name(v_parent) || x_Parents    ;
            IF p_Output_Flag THEN
                x_Parents := get_Dim_Level_Name(p_Parent_Dim_Level_Id) || x_Parents  ;
            END IF;
            EXIT;
        END IF;
    END LOOP;
 ELSE
    SELECT  COUNT(dim_level_id)
    INTO    l_count
    FROM    BSC_SYS_DIM_LEVELS_B
    WHERE   dim_level_id =   p_Parent_Dim_Level_Id
    AND     source       =  'PMF';

    IF (l_count <> 0) THEN
        v_temp := TRUE;
    ELSE
        v_temp          := FALSE;
        x_return_status := 'SAME';
    END IF;
 END IF;
 RETURN v_temp;
EXCEPTION
    WHEN FND_API.G_EXC_ERROR THEN
        FND_MSG_PUB.Count_And_Get
        (      p_encoded   =>  FND_API.G_FALSE
           ,   p_count     =>  x_msg_count
           ,   p_data      =>  x_msg_data
        );
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION FND_API.G_EXC_ERROR '||x_msg_data);
        x_return_status :=  FND_API.G_RET_STS_ERROR;
        RAISE;
    WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
        FND_MSG_PUB.Count_And_Get
        (      p_encoded   =>  FND_API.G_FALSE
           ,   p_count     =>  x_msg_count
           ,   p_data      =>  x_msg_data
        );
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION FND_API.G_EXC_UNEXPECTED_ERROR '||x_msg_data);
        RAISE;
    WHEN NO_DATA_FOUND THEN
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        IF (x_msg_data IS NOT NULL) THEN
            x_msg_data      :=  x_msg_data||' -> BSC_DIMENSION_LEVELS_PVT.Evaluate_Circular_Relationship ';
        ELSE
            x_msg_data      :=  SQLERRM||' at BSC_DIMENSION_LEVELS_PVT.Evaluate_Circular_Relationship ';
        END IF;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION NO_DATA_FOUND '||x_msg_data);
        RAISE;
    WHEN OTHERS THEN
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        IF (x_msg_data IS NOT NULL) THEN
            x_msg_data      :=  x_msg_data||' -> BSC_DIMENSION_LEVELS_PVT.Evaluate_Circular_Relationship ';
        ELSE
            x_msg_data      :=  SQLERRM||' at BSC_DIMENSION_LEVELS_PVT.Evaluate_Circular_Relationship ';
        END IF;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION OTHERS '||x_msg_data);
        RAISE;
END Evaluate_Circular_Relationship;

/*-------------------------------------------------------------------------------------
  Create_BSC_Dim_Level_View
---------------------------------------------------------------------------------------*/
PROCEDURE Create_BSC_Dim_Level_View (
  p_commit              IN      varchar2 := FND_API.G_FALSE
 ,p_Dim_Level_Rec       IN      BSC_DIMENSION_LEVELS_PUB.Bsc_Dim_Level_Rec_Type
 ,x_return_status       OUT NOCOPY     varchar2
 ,x_msg_count       OUT NOCOPY  number
 ,x_msg_data        OUT NOCOPY  varchar2
 )IS
 v_Temp  Number;
BEGIN
  x_return_status := FND_API.G_RET_STS_SUCCESS;

        --DBMS_OUTPUT.PUT_LINE('Begin Create_BSC_Dim_Level_View  - PENDING ');

  v_Temp:=0;
                        -- *****       PENDING           *****

        --DBMS_OUTPUT.PUT_LINE('End Create_BSC_Dim_Level_View ');

    x_return_status :=  FND_API.G_RET_STS_SUCCESS;
END Create_BSC_Dim_Level_View;

/*-------------------------------------------------------------------------------------
  get_Dim_Level_Name
---------------------------------------------------------------------------------------*/
FUNCTION get_Dim_Level_Name(
   p_Child_level_Id IN NUMBER
) RETURN VARCHAR2 IS

  v_Dim_Level_Name VARCHAR2(1000) := '' ;

BEGIN

  SELECT NAME INTO v_Dim_Level_Name FROM BSC_SYS_DIM_LEVELS_VL
  WHERE DIM_LEVEL_ID = p_Child_level_Id;

  RETURN v_Dim_Level_Name;

 EXCEPTION
  WHEN OTHERS THEN
    RETURN '' || p_Child_level_Id ;

END get_Dim_Level_Name;

--
/*-------------------------------------------------------------------------------------
  get_Dim_Level_Id:
                   Return the Dimension Level ID,  null is the Short Name Not exist
---------------------------------------------------------------------------------------*/
FUNCTION get_Dim_Level_Id(
   p_Short_Name IN VARCHAR2
) RETURN number IS
 v_Id number;

 BEGIN

  Select DIM_LEVEL_ID
    into v_Id
    from BSC_SYS_DIM_LEVELS_B
    where SHORT_NAME = p_Short_Name;

 RETURN  v_Id;

 EXCEPTION
  WHEN OTHERS THEN
    RETURN null;
END get_Dim_Level_Id;

/*********************************************************************************
**********************************************************************************/


procedure Retrieve_Relationship
(
        p_Dim_Level_Rec         IN          BSC_DIMENSION_LEVELS_PUB.Bsc_Dim_Level_Rec_Type
    ,   x_Dim_Level_Rec         OUT NOCOPY  BSC_DIMENSION_LEVELS_PUB.Bsc_Dim_Level_Rec_Type
    ,   x_return_status         OUT NOCOPY  VARCHAR2
    ,   x_msg_count             OUT NOCOPY  NUMBER
    ,   x_msg_data              OUT NOCOPY  VARCHAR2
) IS
    l_count NUMBER;

    CURSOR  cr_getId_rels IS
    SELECT    LR.DIM_LEVEL_ID
            , LR.PARENT_DIM_LEVEL_ID
            , DL.SHORT_NAME
            , PL.SHORT_NAME
            , DL.SOURCE
            , PL.NAME
            , PL.SOURCE
            , LR.RELATION_COL
            , LR.DATA_SOURCE_TYPE
            , LR.DATA_SOURCE
            , LR.RELATION_TYPE
    FROM BSC_SYS_DIM_LEVEL_RELS LR, BSC_SYS_DIM_LEVELS_VL DL, BSC_SYS_DIM_LEVELS_VL PL
    WHERE DL.dim_level_id = LR.dim_level_id
      AND PL.dim_level_id = LR.parent_dim_level_id
      AND LR.DIM_LEVEL_ID = p_Dim_Level_Rec.Bsc_Level_Id
      AND LR.PARENT_DIM_LEVEL_ID = p_Dim_Level_Rec.Bsc_Parent_Level_Id;

    CURSOR  cr_getName_rels IS
    SELECT    LR.DIM_LEVEL_ID
            , LR.PARENT_DIM_LEVEL_ID
            , DL.SHORT_NAME
            , PL.SHORT_NAME
            , DL.SOURCE
            , PL.NAME
            , PL.SOURCE
            , LR.RELATION_COL
            , LR.DATA_SOURCE_TYPE
            , LR.DATA_SOURCE
            , LR.RELATION_TYPE
    FROM BSC_SYS_DIM_LEVEL_RELS LR, BSC_SYS_DIM_LEVELS_VL DL, BSC_SYS_DIM_LEVELS_VL PL
    WHERE DL.dim_level_id = LR.dim_level_id
    AND PL.dim_level_id = LR.parent_dim_level_id
    AND DL.SHORT_NAME = p_Dim_Level_Rec.Bsc_Level_Short_Name
    AND PL.SHORT_NAME = p_Dim_Level_Rec.Bsc_Parent_Level_Short_Name;
 BEGIN
    x_return_status := FND_API.G_RET_STS_SUCCESS;
    FND_MSG_PUB.Initialize;
    g_db_object     := 'Retrieve_Relationship';
  -- Validate level id exists.
    IF ((p_Dim_Level_Rec.Bsc_Level_Id  IS NOT NULL) AND (p_Dim_Level_Rec.Bsc_Parent_Level_Id IS NOT NULL)) THEN
        l_count := BSC_DIMENSION_LEVELS_PVT.validate_dim_level_id(p_Dim_Level_Rec.Bsc_Level_Id);
        IF (l_count = 0) THEN
            FND_MESSAGE.SET_NAME('BSC','BSC_INVALID_LEVEL_ID');
            FND_MESSAGE.SET_TOKEN('BSC_LEVEL_ID', p_Dim_Level_Rec.Bsc_Level_Id);
            FND_MSG_PUB.ADD;
            RAISE FND_API.G_EXC_ERROR;
        END IF;
        l_count := BSC_DIMENSION_LEVELS_PVT.validate_dim_level_id(p_Dim_Level_Rec.Bsc_Parent_Level_Id);
        IF (l_count = 0) THEN
            FND_MESSAGE.SET_NAME('BSC','BSC_INVALID_LEVEL_ID');
            FND_MESSAGE.SET_TOKEN('BSC_LEVEL_ID', p_Dim_Level_Rec.Bsc_Parent_Level_Id);
            FND_MSG_PUB.ADD;
            RAISE FND_API.G_EXC_ERROR;
        END IF;
        IF (cr_getId_rels%ISOPEN) THEN
            CLOSE cr_getId_rels;
        END IF;
        OPEN     cr_getId_rels;
            FETCH    cr_getId_rels
            INTO     x_Dim_Level_Rec.Bsc_Level_Id
                   , x_Dim_Level_Rec.Bsc_Parent_Level_Id
                   , x_Dim_Level_Rec.Bsc_Level_Short_Name
                   , x_Dim_Level_Rec.Bsc_Parent_Level_Short_Name
                   , x_Dim_Level_Rec.Bsc_Source
                   , x_Dim_Level_Rec.Bsc_Parent_Level_Name
                   , x_Dim_Level_Rec.Bsc_Parent_Level_Source
                   , x_Dim_Level_Rec.Bsc_Relation_Column
                   , x_Dim_Level_Rec.Bsc_Data_Source_Type
                   , x_Dim_Level_Rec.Bsc_Data_Source
                   , x_Dim_Level_Rec.Bsc_Relation_Type;
        CLOSE cr_getId_rels;
    ELSIF ((p_Dim_Level_Rec.Bsc_Level_Short_Name  IS NOT NULL) AND (p_Dim_Level_Rec.Bsc_Parent_Level_Short_Name IS NOT NULL)) THEN
        SELECT COUNT(dim_level_id) INTO l_count
        FROM   BSC_SYS_DIM_LEVELS_B
        WHERE  short_name = p_Dim_Level_Rec.Bsc_Level_Short_Name;

        IF (l_count = 0) THEN
            FND_MESSAGE.SET_NAME('BSC','BSC_INVALID_LEVEL_NAME');
            FND_MESSAGE.SET_TOKEN('BSC_LEVEL_NAME', p_Dim_Level_Rec.Bsc_Level_Short_Name);
            FND_MSG_PUB.ADD;
            RAISE FND_API.G_EXC_ERROR;
        END IF;

        -- bug# 3814375: Most often short name and parent are the same - hence, need not fire this SQL if the above is validated.
        IF (p_Dim_Level_Rec.Bsc_Parent_Level_Short_Name <> p_Dim_Level_Rec.Bsc_Level_Short_Name) THEN
          SELECT COUNT(dim_level_id) INTO l_count
            FROM   BSC_SYS_DIM_LEVELS_B
            WHERE  short_name = p_Dim_Level_Rec.Bsc_Parent_Level_Short_Name;

          IF (l_count = 0) THEN
            FND_MESSAGE.SET_NAME('BSC','BSC_INVALID_LEVEL_NAME');
            FND_MESSAGE.SET_TOKEN('BSC_LEVEL_NAME', p_Dim_Level_Rec.Bsc_Parent_Level_Short_Name);
            FND_MSG_PUB.ADD;
            RAISE FND_API.G_EXC_ERROR;
          END IF;
    END IF;

        IF (cr_getName_rels%ISOPEN) THEN
            CLOSE cr_getName_rels;
        END IF;
        OPEN     cr_getName_rels;
            FETCH    cr_getName_rels
            INTO     x_Dim_Level_Rec.Bsc_Level_Id
                   , x_Dim_Level_Rec.Bsc_Parent_Level_Id
                   , x_Dim_Level_Rec.Bsc_Level_Short_Name
                   , x_Dim_Level_Rec.Bsc_Parent_Level_Short_Name
                   , x_Dim_Level_Rec.Bsc_Source
                   , x_Dim_Level_Rec.Bsc_Parent_Level_Name
                   , x_Dim_Level_Rec.Bsc_Parent_Level_Source
                   , x_Dim_Level_Rec.Bsc_Relation_Column
                   , x_Dim_Level_Rec.Bsc_Data_Source_Type
                   , x_Dim_Level_Rec.Bsc_Data_Source
                   , x_Dim_Level_Rec.Bsc_Relation_Type;
        CLOSE cr_getName_rels;
    ELSE
        FND_MESSAGE.SET_NAME('BSC','BSC_NO_LEVEL_ID_ENTERED');
        FND_MESSAGE.SET_TOKEN('BSC_LEVEL_ID', P_DIM_LEVEL_REC.BSC_LEVEL_ID);
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
    END IF;
 EXCEPTION
    WHEN FND_API.G_EXC_ERROR THEN
        IF (cr_getId_rels%ISOPEN) THEN
            CLOSE cr_getId_rels;
        END IF;
        FND_MSG_PUB.Count_And_Get
        (      p_encoded   =>  FND_API.G_FALSE
           ,   p_count     =>  x_msg_count
           ,   p_data      =>  x_msg_data
        );
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION FND_API.G_EXC_ERROR '||x_msg_data);
        x_return_status :=  FND_API.G_RET_STS_ERROR;
        RAISE;
    WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
        IF (cr_getId_rels%ISOPEN) THEN
            CLOSE cr_getId_rels;
        END IF;
        FND_MSG_PUB.Count_And_Get
        (      p_encoded   =>  FND_API.G_FALSE
           ,   p_count     =>  x_msg_count
           ,   p_data      =>  x_msg_data
        );
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION FND_API.G_EXC_UNEXPECTED_ERROR '||x_msg_data);
        RAISE;
    WHEN NO_DATA_FOUND THEN
        IF (cr_getId_rels%ISOPEN) THEN
            CLOSE cr_getId_rels;
        END IF;
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        IF (x_msg_data IS NOT NULL) THEN
            x_msg_data      :=  x_msg_data||' -> BSC_DIMENSION_LEVELS_PVT.Retrieve_Relationship ';
        ELSE
            x_msg_data      :=  SQLERRM||' at BSC_DIMENSION_LEVELS_PVT.Retrieve_Relationship ';
        END IF;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION NO_DATA_FOUND '||x_msg_data);
        RAISE;
    WHEN OTHERS THEN
        IF (cr_getId_rels%ISOPEN) THEN
            CLOSE cr_getId_rels;
        END IF;
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        IF (x_msg_data IS NOT NULL) THEN
            x_msg_data      :=  x_msg_data||' -> BSC_DIMENSION_LEVELS_PVT.Retrieve_Relationship ';
        ELSE
            x_msg_data      :=  SQLERRM||' at BSC_DIMENSION_LEVELS_PVT.Retrieve_Relationship ';
        END IF;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION OTHERS '||x_msg_data);
        RAISE;
END Retrieve_Relationship;
/*===========================================================================+
|    PROCEDURE
|      get_Relation_Column
|
|    PURPOSE
|      Helps in generating the RELATION_COL for the BSC_SYS_DIM_LEVLES_B
|      when the relationship is either 1xN => 1 or MxN => 2
|    PSEUDO CODE
|         - Check for Valid DIM_LEVEL_IDs
|         - If p_Relation_Type is 1, then, just return the LEVEL_PK_COL of the
|           Dimension Object
|         - If p_Relation_Type is 2, then, create a table name of the type
|           BSC_D_Abbr(Child)_Abbr(Parent)
|         - Return the value to back to function
|         - Caller should check the x_return_status.
|    PARAMETERS
|        p_Child_level_Id  IN NUMBER
|        p_Parent_level_Id IN NUMBER
|        p_Relation_Type   IN NUMBER
|        x_return_status   OUT NOCOPY VARCHAR2
|        x_msg_count       OUT NOCOPY NUMBER
|        x_msg_data        OUT NOCOPY VARCHAR2
|    HISTORY
|     24-MAY-2003   Aditya Rao Created for PMD
+---------------------------------------------------------------------------*/

FUNCTION get_Relation_Column(
     p_Child_level_Id  IN NUMBER
   , p_Parent_level_Id IN NUMBER
   , p_Relation_Type   IN NUMBER
   , x_return_status   OUT NOCOPY VARCHAR2
   , x_msg_count       OUT NOCOPY NUMBER
   , x_msg_data        OUT NOCOPY VARCHAR2
)
RETURN VARCHAR2 IS

    l_count         NUMBER;
    x_rel_col       VARCHAR2(50);
    str_c_abbr      VARCHAR2(30);
    str_p_abbr      VARCHAR2(30);

    CURSOR c_abbr IS
        SELECT  ABBREVIATION
        FROM    BSC_SYS_DIM_LEVELS_B
        WHERE   DIM_LEVEL_ID = p_Child_level_Id;

    CURSOR p_abbr IS
        SELECT  ABBREVIATION
        FROM    BSC_SYS_DIM_LEVELS_B
        WHERE   DIM_LEVEL_ID = p_Parent_level_Id;

    CURSOR r_col IS
        SELECT  LEVEL_PK_COL
        FROM    BSC_SYS_DIM_LEVELS_B
        WHERE   DIM_LEVEL_ID = p_Parent_level_Id;

BEGIN
    x_return_status := FND_API.G_RET_STS_SUCCESS;
    g_db_object     := 'get_Relation_Column';
    FND_MSG_PUB.Initialize;

    IF ((p_Child_level_Id IS NOT NULL) AND (p_Parent_level_Id IS NOT NULL)) THEN

           l_count := BSC_DIMENSION_LEVELS_PVT.Validate_Value( 'BSC_SYS_DIM_LEVELS_B', 'DIM_LEVEL_ID', p_Child_level_Id);
           IF (l_count = 0) THEN
               FND_MESSAGE.SET_NAME('BSC','BSC_INVALID_LEVEL_ID');
               FND_MESSAGE.SET_TOKEN('BSC_LEVEL_ID', p_Child_level_Id);
               FND_MSG_PUB.ADD;
               RAISE FND_API.G_EXC_ERROR;
           END IF;

           l_count := BSC_DIMENSION_LEVELS_PVT.Validate_Value( 'BSC_SYS_DIM_LEVELS_B', 'DIM_LEVEL_ID', p_Parent_level_Id);
           IF (l_count = 0) THEN
               FND_MESSAGE.SET_NAME('BSC','BSC_INVALID_LEVEL_ID');
               FND_MESSAGE.SET_TOKEN('BSC_LEVEL_ID', p_Parent_level_Id);
               FND_MSG_PUB.ADD;
               RAISE FND_API.G_EXC_ERROR;
           END IF;


           IF (p_Relation_Type = 1) THEN

               IF (r_col%ISOPEN) THEN
                    CLOSE r_col;
               END IF;

               -- If the Relationship is 1xN, then return the parent
               -- PK_LEVEL_COL....

               ---- DBMS_OUTPUT.PUT_LINE(' Got to the cursor' );

               OPEN  r_col;
                   FETCH    r_col
                   INTO     x_rel_col;
               CLOSE r_col;
               ---- DBMS_OUTPUT.PUT_LINE(' After the cursor' );

           ELSIF (p_Relation_Type = 2) THEN
                IF (c_abbr%ISOPEN) THEN
                    CLOSE c_abbr;
                END IF;

                OPEN   c_abbr;
                    FETCH    c_abbr
                    INTO     str_c_abbr;
                CLOSE c_abbr;

                      -- Open the Cursors
                IF (p_abbr%ISOPEN) THEN
                    CLOSE p_abbr;
                END IF;

                OPEN     p_abbr;
                    FETCH    p_abbr
                    INTO     str_p_abbr;
                CLOSE p_abbr;

                x_rel_col := 'BSC_D_';

                -- Return the RELATION_COL as a table name of the format
                -- BSC_D_X_Y, where X and Y are arranged alphabetically.

                IF str_c_abbr > str_p_abbr THEN
                    x_rel_col := x_rel_col || str_p_abbr || '_' || str_c_abbr;
                ELSE
                    x_rel_col := x_rel_col || str_c_abbr || '_' || str_p_abbr;
                END IF;
           END IF;

    ELSE
            FND_MESSAGE.SET_NAME('BSC','BSC_NO_LEVEL_ID_ENTERED');
            FND_MESSAGE.SET_TOKEN('BSC_LEVEL_ID', p_Child_level_Id);
            FND_MSG_PUB.ADD;
            RAISE FND_API.G_EXC_ERROR;
    END IF;

    RETURN x_rel_col;

EXCEPTION
    WHEN FND_API.G_EXC_ERROR THEN
        IF (c_abbr%ISOPEN) THEN
            CLOSE c_abbr;
        END IF;
        IF (p_abbr%ISOPEN) THEN
            CLOSE p_abbr;
        END IF;
        IF (r_col%ISOPEN) THEN
            CLOSE r_col;
        END IF;
        FND_MSG_PUB.Count_And_Get
        (      p_encoded   =>  FND_API.G_FALSE
           ,   p_count     =>  x_msg_count
           ,   p_data      =>  x_msg_data
        );
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION FND_API.G_EXC_ERROR '||x_msg_data);
        x_return_status :=  FND_API.G_RET_STS_ERROR;
        RAISE;
    WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
        IF (c_abbr%ISOPEN) THEN
            CLOSE c_abbr;
        END IF;
        IF (p_abbr%ISOPEN) THEN
            CLOSE p_abbr;
        END IF;
        IF (r_col%ISOPEN) THEN
            CLOSE r_col;
        END IF;
        FND_MSG_PUB.Count_And_Get
        (      p_encoded   =>  FND_API.G_FALSE
           ,   p_count     =>  x_msg_count
           ,   p_data      =>  x_msg_data
        );
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION FND_API.G_EXC_UNEXPECTED_ERROR '||x_msg_data);
        RAISE;
    WHEN NO_DATA_FOUND THEN
        IF (c_abbr%ISOPEN) THEN
            CLOSE c_abbr;
        END IF;
        IF (p_abbr%ISOPEN) THEN
            CLOSE p_abbr;
        END IF;
        IF (r_col%ISOPEN) THEN
            CLOSE r_col;
        END IF;
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        IF (x_msg_data IS NOT NULL) THEN
            x_msg_data      :=  x_msg_data||' -> BSC_DIMENSION_LEVELS_PVT.get_Relation_Column ';
        ELSE
            x_msg_data      :=  SQLERRM||' at BSC_DIMENSION_LEVELS_PVT.get_Relation_Column ';
        END IF;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION NO_DATA_FOUND '||x_msg_data);
        RAISE;
    WHEN OTHERS THEN
        IF (c_abbr%ISOPEN) THEN
            CLOSE c_abbr;
        END IF;
        IF (p_abbr%ISOPEN) THEN
            CLOSE p_abbr;
        END IF;
        IF (r_col%ISOPEN) THEN
            CLOSE r_col;
        END IF;
        x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
        IF (x_msg_data IS NOT NULL) THEN
            x_msg_data      :=  x_msg_data||' -> BSC_DIMENSION_LEVELS_PVT.get_Relation_Column ';
        ELSE
            x_msg_data      :=  SQLERRM||' at BSC_DIMENSION_LEVELS_PVT.get_Relation_Column ';
        END IF;
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION OTHERS '||x_msg_data);
        RAISE;
END get_Relation_Column;

--================================================================================================
--
PROCEDURE Retr_Updated_Bsc_Dim_Levels(
  p_Dim_Level_Rec IN BSC_DIMENSION_LEVELS_PUB.Bsc_Dim_Level_Rec_Type
 ,x_Dim_Level_Rec OUT NOCOPY BSC_DIMENSION_LEVELS_PUB.Bsc_Dim_Level_Rec_Type
 ,x_return_status OUT NOCOPY VARCHAR2
 ,x_msg_count OUT NOCOPY NUMBER
 ,x_msg_data OUT NOCOPY VARCHAR2
) IS

BEGIN

  x_return_status:= FND_API.G_RET_STS_SUCCESS;

  SELECT
         dim_level_id
        ,short_name
        ,name
        ,help
        ,total_disp_name
        ,comp_disp_name
  INTO
        x_Dim_Level_Rec.Bsc_Level_Id
       ,x_Dim_Level_Rec.Bsc_Level_Short_Name
       ,x_Dim_Level_Rec.Bsc_Dim_Level_Long_Name
       ,x_Dim_Level_Rec.Bsc_Dim_Level_Help
       ,x_Dim_Level_Rec.Bsc_Dim_Tot_Disp_Name
       ,x_Dim_Level_Rec.Bsc_Dim_Comp_Disp_Name
  FROM BSC_SYS_DIM_LEVELS_VL
  WHERE short_name = p_Dim_Level_Rec.Bsc_Level_Short_Name;


  IF (p_Dim_Level_Rec.Bsc_Dim_Level_Long_Name IS NOT NULL) THEN
    x_Dim_Level_Rec.Bsc_Dim_Level_Long_Name := p_Dim_Level_Rec.Bsc_Dim_Level_Long_Name;
  END IF;

  IF (p_Dim_Level_Rec.Bsc_Dim_Comp_Disp_Name IS NOT NULL) THEN
    x_Dim_Level_Rec.Bsc_Dim_Comp_Disp_Name := p_Dim_Level_Rec.Bsc_Dim_Comp_Disp_Name;
  END IF;

  IF (p_Dim_Level_Rec.Bsc_Dim_Tot_Disp_Name IS NOT NULL) THEN
    x_Dim_Level_Rec.Bsc_Dim_Tot_Disp_Name := p_Dim_Level_Rec.Bsc_Dim_Tot_Disp_Name;
  END IF;

  IF (p_Dim_Level_Rec.Bsc_Dim_Level_Help IS NOT NULL) THEN
    x_Dim_Level_Rec.Bsc_Dim_Level_Help := p_Dim_Level_Rec.Bsc_Dim_Level_Help;
  END IF;

EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    x_return_status := FND_API.G_RET_STS_ERROR;
    FND_MSG_PUB.Count_And_Get(
       p_encoded   => 'F'
      ,p_count     =>  x_msg_count
      ,p_data      =>  x_msg_data
    );
    RAISE;
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
    FND_MSG_PUB.Count_And_Get(
       p_encoded   => 'F'
      ,p_count     =>  x_msg_count
      ,p_data      =>  x_msg_data
    );
    RAISE;
  WHEN NO_DATA_FOUND THEN
    x_return_status := FND_API.G_RET_STS_ERROR;
    IF (x_msg_data IS NOT NULL) THEN
      x_msg_data      :=  x_msg_data||' -> BSC_DIMENSION_LEVELS_PVT.Retr_Updated_Bsc_Dim_Levels ';
    ELSE
      x_msg_data      :=  SQLERRM||' at BSC_DIMENSION_LEVELS_PVT.Retr_Updated_Bsc_Dim_Levels ';
    END IF;
    RAISE FND_API.G_EXC_ERROR;
  WHEN OTHERS THEN
    x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
    IF (x_msg_data IS NOT NULL) THEN
      x_msg_data      :=  x_msg_data||' -> BSC_DIMENSION_LEVELS_PVT.Retr_Updated_Bsc_Dim_Levels ';
    ELSE
      x_msg_data      := 'BSC_DIMENSION_LEVELS_PVT.Retr_Updated_Bsc_Dim_Levels '||SQLERRM;
    END IF;
    RAISE;

END Retr_Updated_Bsc_Dim_Levels;
--================================================================================================
--
--================================================================================================
--
PROCEDURE Translate_Dimension_Level (
  p_Commit IN VARCHAR2 := FND_API.G_FALSE
 ,p_Bsc_Pmf_Dim_Rec IN BSC_PMF_UI_API_PUB.Bsc_Pmf_Dim_Rec_Type
 ,p_Bsc_Dim_Level_Rec IN BSC_DIMENSION_LEVELS_PUB.Bsc_Dim_Level_Rec_Type
 ,x_return_status OUT NOCOPY VARCHAR2
 ,x_msg_count OUT NOCOPY NUMBER
 ,x_msg_data OUT NOCOPY VARCHAR2
)
IS
  l_Dim_Level_Rec_In BSC_DIMENSION_LEVELS_PUB.Bsc_Dim_Level_Rec_Type;
  l_Dim_Level_Rec_Out BSC_DIMENSION_LEVELS_PUB.Bsc_Dim_Level_Rec_Type;

BEGIN

  SAVEPOINT TranslateBSCDimLevPVT;
  x_return_status:= FND_API.G_RET_STS_SUCCESS;
  l_Dim_Level_Rec_In := p_Bsc_Dim_Level_Rec;

  l_Dim_Level_Rec_In.Bsc_Dim_Level_Long_Name := p_Bsc_Pmf_Dim_Rec.dimension_Level_long_name;
  l_Dim_Level_Rec_In.Bsc_Level_Short_Name := p_Bsc_Pmf_Dim_Rec.dimension_level_short_name;

  BSC_DIMENSION_LEVELS_PVT.Retr_Updated_Bsc_Dim_Levels
    (p_Dim_Level_Rec => l_Dim_Level_Rec_In
    ,x_Dim_Level_Rec => l_Dim_Level_Rec_out
    ,x_return_status => x_return_status
    ,x_msg_count => x_msg_count
    ,x_msg_data => x_msg_data
    );


  IF x_return_status <> FND_API.G_RET_STS_SUCCESS THEN
    RAISE FND_API.G_EXC_ERROR;
  END IF;

  UPDATE bsc_sys_dim_levels_tl
  SET    name               = l_Dim_Level_Rec_Out.Bsc_Dim_Level_Long_Name
        ,total_disp_name    = l_Dim_Level_Rec_Out.Bsc_Dim_Tot_Disp_Name
        ,comp_disp_name     = l_Dim_Level_Rec_Out.Bsc_Dim_Comp_Disp_Name
    ,help               = l_Dim_Level_Rec_Out.Bsc_Dim_Level_Help
        ,SOURCE_LANG        = userenv('LANG')
   WHERE dim_level_id       = l_Dim_Level_Rec_Out.Bsc_Level_Id
   AND   userenv('LANG') IN (LANGUAGE, SOURCE_LANG);

  IF (p_commit = FND_API.G_TRUE) THEN
    COMMIT;
  END IF;
EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    x_return_status := FND_API.G_RET_STS_ERROR ;
    ROLLBACK TO TranslateBSCDimLevPVT;
    FND_MSG_PUB.Count_And_Get(
       p_encoded   => 'F'
      ,p_count     =>  x_msg_count
      ,p_data      =>  x_msg_data
    );
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
    ROLLBACK TO TranslateBSCDimLevPVT;
    FND_MSG_PUB.Count_And_Get(
       p_encoded   => 'F'
      ,p_count     =>  x_msg_count
      ,p_data      =>  x_msg_data
    );
  WHEN OTHERS THEN
    x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
    ROLLBACK TO TranslateBSCDimLevPVT;
    IF (x_msg_data IS NOT NULL) THEN
      x_msg_data      :=  x_msg_data||' -> BSC_DIMENSION_LEVELS_PVT.Translate_Dimension_Level ';
    ELSE
      x_msg_data      := 'BSC_DIMENSION_LEVELS_PVT.Translate_Dimension_Level '||SQLERRM;
    END IF;
END Translate_Dimension_Level;



/*************************************************************************************

    API TO SYNC UP THE DIMENSION LEVEL DATA FROM PMF TO BSC

*************************************************************************************/

procedure Trans_DimObj_By_Given_Lang
( p_commit          IN  VARCHAR2 := FND_API.G_FALSE
, p_dim_level_rec   IN  BSC_DIMENSION_LEVELS_PUB.Bsc_Dim_Level_Rec_Type
, x_return_status   OUT NOCOPY VARCHAR2
, x_msg_count       OUT NOCOPY NUMBER
, x_msg_data        OUT NOCOPY VARCHAR2
)
IS
     l_Dim_Level_Id    NUMBER;
BEGIN
    SAVEPOINT  TransDimObjByLangBsc;
    x_return_status := FND_API.G_RET_STS_SUCCESS;
    FND_MSG_PUB.Initialize;

    SELECT Dim_Level_Id
    INTO l_Dim_Level_Id
    FROM BSC_SYS_DIM_LEVELS_B
    WHERE Short_Name = p_Dim_Level_Rec.Bsc_Level_Short_Name;


    UPDATE BSC_SYS_DIM_LEVELS_TL
    SET  NAME           = p_dim_level_rec.Bsc_Dim_Level_Long_Name
        ,HELP           = p_dim_level_rec.Bsc_Dim_Level_Help
        ,SOURCE_LANG    = p_dim_level_rec.Bsc_Source_Language
    WHERE DIM_LEVEL_ID  = l_Dim_Level_Id
    AND LANGUAGE = p_dim_level_rec.Bsc_Language;


    IF (p_commit = FND_API.G_TRUE) THEN
        COMMIT;
    END IF;


EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    ROLLBACK TO TransDimObjByLangBsc;
    x_return_status := FND_API.G_RET_STS_ERROR;
    FND_MSG_PUB.Count_And_Get( p_count => x_msg_count
                              ,p_data  => x_msg_data);

  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    ROLLBACK TO TransDimObjByLangBsc;
    x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
    FND_MSG_PUB.Count_And_Get( p_count => x_msg_count
                              ,p_data  => x_msg_data);
  WHEN NO_DATA_FOUND THEN
    ROLLBACK TO TransDimObjByLangBsc;
    x_return_status := FND_API.G_RET_STS_ERROR;
    FND_MSG_PUB.Count_And_Get( p_count => x_msg_count
                              ,p_data  => x_msg_data);

  WHEN OTHERS THEN
    ROLLBACK TO TransDimObjByLangBsc;
    x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
    FND_MSG_PUB.Count_And_Get( p_count => x_msg_count
                              ,p_data  => x_msg_data);

END Trans_DimObj_By_Given_Lang;


end BSC_DIMENSION_LEVELS_PVT;

/
