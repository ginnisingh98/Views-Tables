--------------------------------------------------------
--  DDL for Package Body PER_QUALIFICATION_TYPES_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PER_QUALIFICATION_TYPES_PKG" as
/* $Header: pequatyp.pkb 120.2 2006/06/27 12:24:26 bshukla noship $*/

procedure OWNER_TO_WHO (
  X_OWNER in VARCHAR2,
  X_CREATION_DATE out nocopy DATE,
  X_CREATED_BY out nocopy NUMBER,
  X_LAST_UPDATE_DATE out nocopy DATE,
  X_LAST_UPDATED_BY out nocopy NUMBER,
  X_LAST_UPDATE_LOGIN out nocopy NUMBER
) is
begin
  if X_OWNER = 'SEED' then
    X_CREATED_BY := 1;
    X_LAST_UPDATED_BY := 1;
  else
    X_CREATED_BY := 0;
    X_LAST_UPDATED_BY := 0;
  end if;
  X_CREATION_DATE := sysdate;
  X_LAST_UPDATE_DATE := sysdate;
  X_LAST_UPDATE_LOGIN := 0;
end OWNER_TO_WHO;

procedure KEY_TO_ID (
		X_NAME	IN VARCHAR2,
		X_QUALIFICATION_TYPE_ID OUT NOCOPY NUMBER
		) IS
   Cursor csr_qualification_type is
   	select QUALIFICATION_TYPE_ID
   	from per_qualification_types
   	where name = X_NAME;
   Cursor csr_sequence is
   	select per_qualification_types_s.nextval
   	from dual;
begin
   open csr_qualification_type;
   fetch csr_qualification_type into X_QUALIFICATION_TYPE_ID;
   if csr_qualification_type%notfound then
      open csr_sequence;
      fetch csr_sequence into X_QUALIFICATION_TYPE_ID;
      close csr_sequence;
   end if;
   close csr_qualification_type;
end KEY_TO_ID;

procedure insert_row(
	X_ROWID in out nocopy VARCHAR2,
	X_QUALIFICATION_TYPE_ID IN NUMBER,
	X_NAME	IN VARCHAR2,
	X_CATEGORY IN VARCHAR2,
	X_RANK in number,
	X_ATTRIBUTE_CATEGORY IN VARCHAR2,
	X_ATTRIBUTE1  IN VARCHAR2,
	X_ATTRIBUTE2  IN VARCHAR2,
	X_ATTRIBUTE3  IN VARCHAR2,
	X_ATTRIBUTE4  IN VARCHAR2,
	X_ATTRIBUTE5  IN VARCHAR2,
	X_ATTRIBUTE6  IN VARCHAR2,
	X_ATTRIBUTE7  IN VARCHAR2,
	X_ATTRIBUTE8  IN VARCHAR2,
	X_ATTRIBUTE9  IN VARCHAR2,
	X_ATTRIBUTE10  IN VARCHAR2,
	X_ATTRIBUTE11  IN VARCHAR2,
	X_ATTRIBUTE12  IN VARCHAR2,
	X_ATTRIBUTE13  IN VARCHAR2,
	X_ATTRIBUTE14  IN VARCHAR2,
	X_ATTRIBUTE15  IN VARCHAR2,
	X_ATTRIBUTE16  IN VARCHAR2,
	X_ATTRIBUTE17  IN VARCHAR2,
	X_ATTRIBUTE18  IN VARCHAR2,
	X_ATTRIBUTE19  IN VARCHAR2,
	X_ATTRIBUTE20  IN VARCHAR2,
	X_INFORMATION1  IN VARCHAR2,
	X_INFORMATION2  IN VARCHAR2,
	X_INFORMATION3  IN VARCHAR2,
	X_INFORMATION4  IN VARCHAR2,
	X_INFORMATION5  IN VARCHAR2,
	X_INFORMATION6  IN VARCHAR2,
	X_INFORMATION7  IN VARCHAR2,
	X_INFORMATION8  IN VARCHAR2,
	X_INFORMATION9  IN VARCHAR2,
	X_INFORMATION10  IN VARCHAR2,
	X_INFORMATION11  IN VARCHAR2,
	X_INFORMATION12  IN VARCHAR2,
	X_INFORMATION13  IN VARCHAR2,
	X_INFORMATION14  IN VARCHAR2,
	X_INFORMATION15  IN VARCHAR2,
	X_INFORMATION16  IN VARCHAR2,
	X_INFORMATION17  IN VARCHAR2,
	X_INFORMATION18  IN VARCHAR2,
	X_INFORMATION19  IN VARCHAR2,
	X_INFORMATION20  IN VARCHAR2,
	X_INFORMATION21  IN VARCHAR2,
	X_INFORMATION22  IN VARCHAR2,
	X_INFORMATION23  IN VARCHAR2,
	X_INFORMATION24  IN VARCHAR2,
	X_INFORMATION25  IN VARCHAR2,
	X_INFORMATION26  IN VARCHAR2,
	X_INFORMATION27  IN VARCHAR2,
	X_INFORMATION28  IN VARCHAR2,
	X_INFORMATION29  IN VARCHAR2,
	X_INFORMATION30  IN VARCHAR2,
	X_INFORMATION_CATEGORY  IN VARCHAR2,
	X_QUAL_FRAMEWORK_ID in number,
	X_QUALIFICATION_TYPE in varchar2,
	X_CREDIT_TYPE in varchar2,
	X_CREDITS in number,
	X_LEVEL_TYPE in varchar2,
	X_LEVEL_NUMBER in varchar2,
	X_FIELD   IN VARCHAR2,
	X_SUB_FIELD  IN VARCHAR2,
	X_PROVIDER  IN VARCHAR2,
        X_QA_ORGANIZATION IN VARCHAR2,
        X_OBJECT_VERSION_NUMBER IN VARCHAR2,
	X_USER_NAME IN VARCHAR2,
	X_CREATION_DATE in DATE,
	X_CREATED_BY in NUMBER,
	X_LAST_UPDATE_DATE in DATE,
	X_LAST_UPDATED_BY in NUMBER,
        X_LAST_UPDATE_LOGIN in NUMBER
	) is

Cursor C is
	select rowid
	from PER_QUALIFICATION_TYPES
	where QUALIFICATION_TYPE_ID = X_QUALIFICATION_TYPE_ID;


begin

insert into PER_QUALIFICATION_TYPES
(
 QUALIFICATION_TYPE_ID,
 NAME,
 CATEGORY,
 RANK,
 ATTRIBUTE_CATEGORY,
 ATTRIBUTE1,
 ATTRIBUTE2,
 ATTRIBUTE3,
 ATTRIBUTE4,
 ATTRIBUTE5,
 ATTRIBUTE6,
 ATTRIBUTE7,
 ATTRIBUTE8,
 ATTRIBUTE9,
 ATTRIBUTE10,
 ATTRIBUTE11,
 ATTRIBUTE12,
 ATTRIBUTE13,
 ATTRIBUTE14,
 ATTRIBUTE15,
 ATTRIBUTE16,
 ATTRIBUTE17,
 ATTRIBUTE18,
 ATTRIBUTE19,
 ATTRIBUTE20,
 INFORMATION1,
 INFORMATION2,
 INFORMATION3,
 INFORMATION4,
 INFORMATION5,
 INFORMATION6,
 INFORMATION7,
 INFORMATION8,
 INFORMATION9,
 INFORMATION10,
 INFORMATION11,
 INFORMATION12,
 INFORMATION13,
 INFORMATION14,
 INFORMATION15,
 INFORMATION16,
 INFORMATION17,
 INFORMATION18,
 INFORMATION19,
 INFORMATION20,
 INFORMATION21,
 INFORMATION22,
 INFORMATION23,
 INFORMATION24,
 INFORMATION25,
 INFORMATION26,
 INFORMATION27,
 INFORMATION28,
 INFORMATION29,
 INFORMATION30,
 INFORMATION_CATEGORY,
 QUAL_FRAMEWORK_ID,
 QUALIFICATION_TYPE,
 CREDIT_TYPE,
 CREDITS,
 LEVEL_TYPE,
 LEVEL_NUMBER,
 FIELD,
 SUB_FIELD,
 PROVIDER,
 QA_ORGANIZATION,
 OBJECT_VERSION_NUMBER,
 CREATION_DATE,
 CREATED_BY,
 LAST_UPDATE_DATE,
 LAST_UPDATED_BY,
 LAST_UPDATE_LOGIN
 )
 values
 (
 X_QUALIFICATION_TYPE_ID,
 X_NAME,
 X_CATEGORY,
 X_RANK,
 X_ATTRIBUTE_CATEGORY,
 X_ATTRIBUTE1,
 X_ATTRIBUTE2,
 X_ATTRIBUTE3,
 X_ATTRIBUTE4,
 X_ATTRIBUTE5,
 X_ATTRIBUTE6,
 X_ATTRIBUTE7,
 X_ATTRIBUTE8,
 X_ATTRIBUTE9,
 X_ATTRIBUTE10,
 X_ATTRIBUTE11,
 X_ATTRIBUTE12,
 X_ATTRIBUTE13,
 X_ATTRIBUTE14,
 X_ATTRIBUTE15,
 X_ATTRIBUTE16,
 X_ATTRIBUTE17,
 X_ATTRIBUTE18,
 X_ATTRIBUTE19,
 X_ATTRIBUTE20,
 X_INFORMATION1,
 X_INFORMATION2,
 X_INFORMATION3,
 X_INFORMATION4,
 X_INFORMATION5,
 X_INFORMATION6,
 X_INFORMATION7,
 X_INFORMATION8,
 X_INFORMATION9,
 X_INFORMATION10,
 X_INFORMATION11,
 X_INFORMATION12,
 X_INFORMATION13,
 X_INFORMATION14,
 X_INFORMATION15,
 X_INFORMATION16,
 X_INFORMATION17,
 X_INFORMATION18,
 X_INFORMATION19,
 X_INFORMATION20,
 X_INFORMATION21,
 X_INFORMATION22,
 X_INFORMATION23,
 X_INFORMATION24,
 X_INFORMATION25,
 X_INFORMATION26,
 X_INFORMATION27,
 X_INFORMATION28,
 X_INFORMATION29,
 X_INFORMATION30,
 X_INFORMATION_CATEGORY,
 X_QUAL_FRAMEWORK_ID,
 X_QUALIFICATION_TYPE,
 X_CREDIT_TYPE,
 X_CREDITS,
 X_LEVEL_TYPE,
 X_LEVEL_NUMBER,
 X_FIELD,
 X_SUB_FIELD,
 X_PROVIDER,
 X_QA_ORGANIZATION,
 X_OBJECT_VERSION_NUMBER,
 X_CREATION_DATE,
 X_CREATED_BY,
 X_LAST_UPDATE_DATE,
 X_LAST_UPDATED_BY,
 X_LAST_UPDATE_LOGIN
 );

 insert into PER_QUALIFICATION_TYPES_TL
 (
  QUALIFICATION_TYPE_ID,
  NAME,
  LAST_UPDATE_DATE,
  LAST_UPDATED_BY,
  LAST_UPDATE_LOGIN,
  CREATED_BY,
  CREATION_DATE,
  LANGUAGE,
  SOURCE_LANG
  ) select
    X_QUALIFICATION_TYPE_ID,
    X_USER_NAME,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN,
    X_CREATED_BY,
    X_CREATION_DATE,
    L.LANGUAGE_CODE,
    userenv('LANG')
    from FND_LANGUAGES L
    where L.INSTALLED_FLAG in ('I', 'B')
    and not exists
        (select NULL
         from PER_QUALIFICATION_TYPES_TL T
         where T.QUALIFICATION_TYPE_ID = X_QUALIFICATION_TYPE_ID
         AND T.LANGUAGE = L.LANGUAGE_CODE);

 open c;
   fetch c into X_ROWID;
   if (c%notfound) then
     close c;
     raise no_data_found;
   end if;
 close c;

end INSERT_ROW;


procedure update_row(
	X_QUALIFICATION_TYPE_ID IN NUMBER,
	X_NAME	IN VARCHAR2,
	X_CATEGORY IN VARCHAR2,
	X_RANK in number,
	X_ATTRIBUTE_CATEGORY IN VARCHAR2,
	X_ATTRIBUTE1  IN VARCHAR2,
	X_ATTRIBUTE2  IN VARCHAR2,
	X_ATTRIBUTE3  IN VARCHAR2,
	X_ATTRIBUTE4  IN VARCHAR2,
	X_ATTRIBUTE5  IN VARCHAR2,
	X_ATTRIBUTE6  IN VARCHAR2,
	X_ATTRIBUTE7  IN VARCHAR2,
	X_ATTRIBUTE8  IN VARCHAR2,
	X_ATTRIBUTE9  IN VARCHAR2,
	X_ATTRIBUTE10  IN VARCHAR2,
	X_ATTRIBUTE11  IN VARCHAR2,
	X_ATTRIBUTE12  IN VARCHAR2,
	X_ATTRIBUTE13  IN VARCHAR2,
	X_ATTRIBUTE14  IN VARCHAR2,
	X_ATTRIBUTE15  IN VARCHAR2,
	X_ATTRIBUTE16  IN VARCHAR2,
	X_ATTRIBUTE17  IN VARCHAR2,
	X_ATTRIBUTE18  IN VARCHAR2,
	X_ATTRIBUTE19  IN VARCHAR2,
	X_ATTRIBUTE20  IN VARCHAR2,
	X_INFORMATION1  IN VARCHAR2,
	X_INFORMATION2  IN VARCHAR2,
	X_INFORMATION3  IN VARCHAR2,
	X_INFORMATION4  IN VARCHAR2,
	X_INFORMATION5  IN VARCHAR2,
	X_INFORMATION6  IN VARCHAR2,
	X_INFORMATION7  IN VARCHAR2,
	X_INFORMATION8  IN VARCHAR2,
	X_INFORMATION9  IN VARCHAR2,
	X_INFORMATION10  IN VARCHAR2,
	X_INFORMATION11  IN VARCHAR2,
	X_INFORMATION12  IN VARCHAR2,
	X_INFORMATION13  IN VARCHAR2,
	X_INFORMATION14  IN VARCHAR2,
	X_INFORMATION15  IN VARCHAR2,
	X_INFORMATION16  IN VARCHAR2,
	X_INFORMATION17  IN VARCHAR2,
	X_INFORMATION18  IN VARCHAR2,
	X_INFORMATION19  IN VARCHAR2,
	X_INFORMATION20  IN VARCHAR2,
	X_INFORMATION21  IN VARCHAR2,
	X_INFORMATION22  IN VARCHAR2,
	X_INFORMATION23  IN VARCHAR2,
	X_INFORMATION24  IN VARCHAR2,
	X_INFORMATION25  IN VARCHAR2,
	X_INFORMATION26  IN VARCHAR2,
	X_INFORMATION27  IN VARCHAR2,
	X_INFORMATION28  IN VARCHAR2,
	X_INFORMATION29  IN VARCHAR2,
	X_INFORMATION30  IN VARCHAR2,
	X_INFORMATION_CATEGORY  IN VARCHAR2,
	X_QUAL_FRAMEWORK_ID in number,
	X_QUALIFICATION_TYPE in varchar2,
	X_CREDIT_TYPE in varchar2,
	X_CREDITS in number,
	X_LEVEL_TYPE in varchar2,
	X_LEVEL_NUMBER in varchar2,
	X_FIELD   IN VARCHAR2,
	X_SUB_FIELD  IN VARCHAR2,
	X_PROVIDER  IN VARCHAR2,
    X_QA_ORGANIZATION IN VARCHAR2,
    X_OBJECT_VERSION_NUMBER IN VARCHAR2,
	X_USER_NAME IN VARCHAR2,
	X_CREATION_DATE in DATE,
	X_CREATED_BY in NUMBER,
	X_LAST_UPDATE_DATE in DATE,
	X_LAST_UPDATED_BY in NUMBER,
        X_LAST_UPDATE_LOGIN in NUMBER
	) is


begin

	update per_qualification_types
	set NAME                  =   X_NAME,
	    CATEGORY              =   X_CATEGORY,
	    RANK                  =   X_RANK,
	    ATTRIBUTE_CATEGORY    =   X_ATTRIBUTE_CATEGORY,
	    ATTRIBUTE1            =   X_ATTRIBUTE1,
	    ATTRIBUTE2            =   X_ATTRIBUTE2,
	    ATTRIBUTE3            =   X_ATTRIBUTE3,
	    ATTRIBUTE4            =   X_ATTRIBUTE4,
	    ATTRIBUTE5            =   X_ATTRIBUTE5,
	    ATTRIBUTE6            =   X_ATTRIBUTE6,
	    ATTRIBUTE7            =   X_ATTRIBUTE7,
	    ATTRIBUTE8            =   X_ATTRIBUTE8,
	    ATTRIBUTE9            =   X_ATTRIBUTE9,
	    ATTRIBUTE10           =   X_ATTRIBUTE10,
	    ATTRIBUTE11           =   X_ATTRIBUTE11,
	    ATTRIBUTE12           =   X_ATTRIBUTE12,
	    ATTRIBUTE13           =   X_ATTRIBUTE13,
	    ATTRIBUTE14           =   X_ATTRIBUTE14,
	    ATTRIBUTE15           =   X_ATTRIBUTE15,
	    ATTRIBUTE16           =   X_ATTRIBUTE16,
	    ATTRIBUTE17           =   X_ATTRIBUTE17,
	    ATTRIBUTE18           =   X_ATTRIBUTE18,
	    ATTRIBUTE19           =   X_ATTRIBUTE19,
	    ATTRIBUTE20           =   X_ATTRIBUTE20,
	    INFORMATION1          =   X_INFORMATION1,
	    INFORMATION2          =   X_INFORMATION2,
	    INFORMATION3          =   X_INFORMATION3,
	    INFORMATION4          =   X_INFORMATION4,
	    INFORMATION5          =   X_INFORMATION5,
	    INFORMATION6          =   X_INFORMATION6,
	    INFORMATION7          =   X_INFORMATION7,
	    INFORMATION8          =   X_INFORMATION8,
	    INFORMATION9          =   X_INFORMATION9,
	    INFORMATION10         =   X_INFORMATION10,
	    INFORMATION11         =   X_INFORMATION11,
	    INFORMATION12         =   X_INFORMATION12,
	    INFORMATION13         =   X_INFORMATION13,
	    INFORMATION14         =   X_INFORMATION14,
	    INFORMATION15         =   X_INFORMATION15,
	    INFORMATION16         =   X_INFORMATION16,
	    INFORMATION17         =   X_INFORMATION17,
	    INFORMATION18         =   X_INFORMATION18,
	    INFORMATION19         =   X_INFORMATION19,
	    INFORMATION20         =   X_INFORMATION20,
	    INFORMATION21         =   X_INFORMATION21,
	    INFORMATION22         =   X_INFORMATION22,
	    INFORMATION23         =   X_INFORMATION23,
	    INFORMATION24         =   X_INFORMATION24,
	    INFORMATION25         =   X_INFORMATION25,
	    INFORMATION26         =   X_INFORMATION26,
	    INFORMATION27         =   X_INFORMATION27,
	    INFORMATION28         =   X_INFORMATION28,
	    INFORMATION29         =   X_INFORMATION29,
	    INFORMATION30         =   X_INFORMATION30,
	    INFORMATION_CATEGORY  =   X_INFORMATION_CATEGORY,
	    QUAL_FRAMEWORK_ID     =   X_QUAL_FRAMEWORK_ID,
	    QUALIFICATION_TYPE    =   X_QUALIFICATION_TYPE,
	    CREDIT_TYPE           =   X_CREDIT_TYPE,
	    CREDITS               =   X_CREDITS,
	    LEVEL_TYPE		  =   X_LEVEL_TYPE,
	    LEVEL_NUMBER	  =   X_LEVEL_NUMBER,
	    FIELD		  =   X_FIELD,
	    SUB_FIELD		  =   X_SUB_FIELD,
	    PROVIDER          	  =   X_PROVIDER,
	    QA_ORGANIZATION	  =   X_QA_ORGANIZATION,
        OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER,
	    CREATION_DATE	  =   X_CREATION_DATE,
	    CREATED_BY		  =   X_CREATED_BY,
	    LAST_UPDATE_DATE	  =   X_LAST_UPDATE_DATE,
	    LAST_UPDATED_BY	  =   X_LAST_UPDATED_BY,
	    LAST_UPDATE_LOGIN	  =   X_LAST_UPDATE_LOGIN
	where  	QUALIFICATION_TYPE_ID =   X_QUALIFICATION_TYPE_ID;

	if (sql%notfound) then
	    raise no_data_found;
        end if;

        update per_qualification_types_tl
        set NAME                  =   X_USER_NAME,
            LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
	    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
	    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    	    SOURCE_LANG = userenv('LANG')
    	where QUALIFICATION_TYPE_ID =   X_QUALIFICATION_TYPE_ID
    	AND   userenv('LANG') in (LANGUAGE, SOURCE_LANG);

    	if (sql%notfound) then
	    raise no_data_found;
	end if;

end update_row;

procedure load_row(X_NAME	IN VARCHAR2,
	X_CATEGORY IN VARCHAR2,
	X_RANK in number,
	X_ATTRIBUTE_CATEGORY IN VARCHAR2,
	X_ATTRIBUTE1  IN VARCHAR2,
	X_ATTRIBUTE2  IN VARCHAR2,
	X_ATTRIBUTE3  IN VARCHAR2,
	X_ATTRIBUTE4  IN VARCHAR2,
	X_ATTRIBUTE5  IN VARCHAR2,
	X_ATTRIBUTE6  IN VARCHAR2,
	X_ATTRIBUTE7  IN VARCHAR2,
	X_ATTRIBUTE8  IN VARCHAR2,
	X_ATTRIBUTE9  IN VARCHAR2,
	X_ATTRIBUTE10  IN VARCHAR2,
	X_ATTRIBUTE11  IN VARCHAR2,
	X_ATTRIBUTE12  IN VARCHAR2,
	X_ATTRIBUTE13  IN VARCHAR2,
	X_ATTRIBUTE14  IN VARCHAR2,
	X_ATTRIBUTE15  IN VARCHAR2,
	X_ATTRIBUTE16  IN VARCHAR2,
	X_ATTRIBUTE17  IN VARCHAR2,
	X_ATTRIBUTE18  IN VARCHAR2,
	X_ATTRIBUTE19  IN VARCHAR2,
	X_ATTRIBUTE20  IN VARCHAR2,
	X_INFORMATION1  IN VARCHAR2,
	X_INFORMATION2  IN VARCHAR2,
	X_INFORMATION3  IN VARCHAR2,
	X_INFORMATION4  IN VARCHAR2,
	X_INFORMATION5  IN VARCHAR2,
	X_INFORMATION6  IN VARCHAR2,
	X_INFORMATION7  IN VARCHAR2,
	X_INFORMATION8  IN VARCHAR2,
	X_INFORMATION9  IN VARCHAR2,
	X_INFORMATION10  IN VARCHAR2,
	X_INFORMATION11  IN VARCHAR2,
	X_INFORMATION12  IN VARCHAR2,
	X_INFORMATION13  IN VARCHAR2,
	X_INFORMATION14  IN VARCHAR2,
	X_INFORMATION15  IN VARCHAR2,
	X_INFORMATION16  IN VARCHAR2,
	X_INFORMATION17  IN VARCHAR2,
	X_INFORMATION18  IN VARCHAR2,
	X_INFORMATION19  IN VARCHAR2,
	X_INFORMATION20  IN VARCHAR2,
	X_INFORMATION21  IN VARCHAR2,
	X_INFORMATION22  IN VARCHAR2,
	X_INFORMATION23  IN VARCHAR2,
	X_INFORMATION24  IN VARCHAR2,
	X_INFORMATION25  IN VARCHAR2,
	X_INFORMATION26  IN VARCHAR2,
	X_INFORMATION27  IN VARCHAR2,
	X_INFORMATION28  IN VARCHAR2,
	X_INFORMATION29  IN VARCHAR2,
	X_INFORMATION30  IN VARCHAR2,
	X_INFORMATION_CATEGORY  IN VARCHAR2,
	X_QUAL_FRAMEWORK_ID in number,
	X_QUALIFICATION_TYPE in varchar2,
	X_CREDIT_TYPE in varchar2,
	X_CREDITS in number,
	X_LEVEL_TYPE in varchar2,
	X_LEVEL_NUMBER in varchar2,
	X_FIELD   IN VARCHAR2,
	X_SUB_FIELD  IN VARCHAR2,
	X_PROVIDER  IN VARCHAR2,
        X_QA_ORGANIZATION IN VARCHAR2,
        X_OBJECT_VERSION_NUMBER IN VARCHAR2,
	X_USER_NAME IN VARCHAR2,
	X_OWNER in VARCHAR2,
	X_LAST_UPDATE_DATE IN VARCHAR2 default sysdate,
        X_CUSTOM_MODE IN VARCHAR2 default null) IS

  X_ROWID ROWID;
  X_QUALIFICATION_TYPE_ID NUMBER;
  X_CREATION_DATE DATE :=sysdate;
  X_CREATED_BY NUMBER;
--  X_LAST_UPDATE_DATE DATE;
  X_LAST_UPDATED_BY NUMBER;
  X_LAST_UPDATE_LOGIN NUMBER;
  f_luby    number;  -- entity owner in file
  f_ludate  date;    -- entity update date in file
  db_luby   number;  -- entity owner in db
  db_ludate date;    -- entity update date in db

begin

  if X_OWNER = 'SEED' then
    X_CREATED_BY := 1;
  else
    X_CREATED_BY := 0;
  end if;

  key_to_id( X_NAME,X_QUALIFICATION_TYPE_ID);

-- Commenting this as X_LAST_UPDATE_DATE is now an Input parameter.
/*  OWNER_TO_WHO (
      X_OWNER,
      X_CREATION_DATE,
      X_CREATED_BY,
      X_LAST_UPDATE_DATE,
      X_LAST_UPDATED_BY,
      X_LAST_UPDATE_LOGIN
  ); */

  begin
   f_luby := fnd_load_util.owner_id(X_OWNER);
   -- Translate char last_update_date to date
   f_ludate := nvl(to_date(X_LAST_UPDATE_DATE, 'YYYY/MM/DD'), sysdate);
     select LAST_UPDATED_BY, LAST_UPDATE_DATE
     into db_luby, db_ludate
     from PER_QUALIFICATION_TYPES
     where QUALIFICATION_TYPE_ID = X_QUALIFICATION_TYPE_ID;

   -- Test for customization and version
   if (fnd_load_util.upload_test(f_luby, f_ludate, db_luby,
                                 db_ludate, X_CUSTOM_MODE)) then


    UPDATE_ROW (
    		X_QUALIFICATION_TYPE_ID,
    		X_NAME,
    		X_CATEGORY,
		X_RANK,
		X_ATTRIBUTE_CATEGORY,
		X_ATTRIBUTE1,
		X_ATTRIBUTE2,
		X_ATTRIBUTE3,
		X_ATTRIBUTE4,
		X_ATTRIBUTE5,
		X_ATTRIBUTE6,
		X_ATTRIBUTE7,
		X_ATTRIBUTE8,
		X_ATTRIBUTE9,
		X_ATTRIBUTE10,
		X_ATTRIBUTE11,
		X_ATTRIBUTE12,
		X_ATTRIBUTE13,
		X_ATTRIBUTE14,
		X_ATTRIBUTE15,
		X_ATTRIBUTE16,
		X_ATTRIBUTE17,
		X_ATTRIBUTE18,
		X_ATTRIBUTE19,
		X_ATTRIBUTE20,
		X_INFORMATION1,
		X_INFORMATION2,
		X_INFORMATION3,
		X_INFORMATION4,
		X_INFORMATION5,
		X_INFORMATION6,
		X_INFORMATION7,
		X_INFORMATION8,
		X_INFORMATION9,
		X_INFORMATION10,
		X_INFORMATION11,
		X_INFORMATION12,
		X_INFORMATION13,
		X_INFORMATION14,
		X_INFORMATION15,
		X_INFORMATION16,
		X_INFORMATION17,
		X_INFORMATION18,
		X_INFORMATION19,
		X_INFORMATION20,
		X_INFORMATION21,
		X_INFORMATION22,
		X_INFORMATION23,
		X_INFORMATION24,
		X_INFORMATION25,
		X_INFORMATION26,
		X_INFORMATION27,
		X_INFORMATION28,
		X_INFORMATION29,
		X_INFORMATION30,
		X_INFORMATION_CATEGORY,
		X_QUAL_FRAMEWORK_ID,
		X_QUALIFICATION_TYPE,
		X_CREDIT_TYPE,
		X_CREDITS,
		X_LEVEL_TYPE,
		X_LEVEL_NUMBER,
		X_FIELD,
		X_SUB_FIELD,
		X_PROVIDER,
		X_QA_ORGANIZATION,
                X_OBJECT_VERSION_NUMBER,
		X_USER_NAME,
		X_CREATION_DATE,
		X_CREATED_BY,
		f_ludate,
		f_luby,
		0 );
	end if;
   exception
      when no_data_found then
      	 INSERT_ROW( X_ROWID,
      	             X_QUALIFICATION_TYPE_ID,
		     X_NAME,
		     X_CATEGORY,
		     X_RANK,
		     X_ATTRIBUTE_CATEGORY,
		     X_ATTRIBUTE1,
		     X_ATTRIBUTE2,
		     X_ATTRIBUTE3,
		     X_ATTRIBUTE4,
		     X_ATTRIBUTE5,
		     X_ATTRIBUTE6,
		     X_ATTRIBUTE7,
		     X_ATTRIBUTE8,
		     X_ATTRIBUTE9,
		     X_ATTRIBUTE10,
		     X_ATTRIBUTE11,
		     X_ATTRIBUTE12,
		     X_ATTRIBUTE13,
		     X_ATTRIBUTE14,
		     X_ATTRIBUTE15,
		     X_ATTRIBUTE16,
		     X_ATTRIBUTE17,
		     X_ATTRIBUTE18,
		     X_ATTRIBUTE19,
		     X_ATTRIBUTE20,
		     X_INFORMATION1,
		     X_INFORMATION2,
		     X_INFORMATION3,
		     X_INFORMATION4,
		     X_INFORMATION5,
		     X_INFORMATION6,
		     X_INFORMATION7,
		     X_INFORMATION8,
		     X_INFORMATION9,
		     X_INFORMATION10,
		     X_INFORMATION11,
		     X_INFORMATION12,
		     X_INFORMATION13,
		     X_INFORMATION14,
		     X_INFORMATION15,
		     X_INFORMATION16,
		     X_INFORMATION17,
		     X_INFORMATION18,
		     X_INFORMATION19,
		     X_INFORMATION20,
		     X_INFORMATION21,
		     X_INFORMATION22,
		     X_INFORMATION23,
		     X_INFORMATION24,
		     X_INFORMATION25,
		     X_INFORMATION26,
		     X_INFORMATION27,
		     X_INFORMATION28,
		     X_INFORMATION29,
		     X_INFORMATION30,
		     X_INFORMATION_CATEGORY,
		     X_QUAL_FRAMEWORK_ID,
		     X_QUALIFICATION_TYPE,
		     X_CREDIT_TYPE,
		     X_CREDITS,
		     X_LEVEL_TYPE,
		     X_LEVEL_NUMBER,
		     X_FIELD,
		     X_SUB_FIELD,
		     X_PROVIDER,
		     X_QA_ORGANIZATION,
                     X_OBJECT_VERSION_NUMBER,
		     X_USER_NAME,
		     X_CREATION_DATE,
		     X_CREATED_BY,
		     f_ludate,
		     f_luby,
		     0 );
   end;
end LOAD_ROW;

procedure TRANSLATE_ROW (
                  X_NAME IN VARCHAR2,
		  X_USER_NAME in varchar2,
		  X_OWNER in VARCHAR2,
              	  X_LAST_UPDATE_DATE IN VARCHAR2 default sysdate,
                  X_CUSTOM_MODE IN VARCHAR2 default null
		  ) IS

  X_QUALIFICATION_TYPE_ID NUMBER;
  X_CREATION_DATE DATE;
  X_CREATED_BY NUMBER;
--  X_LAST_UPDATE_DATE DATE;
  X_LAST_UPDATED_BY NUMBER;
  X_LAST_UPDATE_LOGIN NUMBER;
  f_luby    number;  -- entity owner in file
  f_ludate  date;    -- entity update date in file
  db_luby   number;  -- entity owner in db
  db_ludate date;    -- entity update date in db

begin

  key_to_id( X_USER_NAME,X_QUALIFICATION_TYPE_ID);
 -- Commenting this as X_LAST_UPDATE_DATE is now an Input parameter.
/*
  OWNER_TO_WHO (
      X_OWNER,
      X_CREATION_DATE,
      X_CREATED_BY,
      X_LAST_UPDATE_DATE,
      X_LAST_UPDATED_BY,
      X_LAST_UPDATE_LOGIN
  );*/

  -- Translate owner to file_last_updated_by
  f_luby := fnd_load_util.owner_id(x_owner);

  -- Translate char last_update_date to date
  f_ludate := nvl(to_date(x_last_update_date, 'YYYY/MM/DD'), sysdate);
      select LAST_UPDATED_BY, LAST_UPDATE_DATE
      into db_luby, db_ludate
      from PER_QUALIFICATION_TYPES_TL
      where QUALIFICATION_TYPE_ID = TO_NUMBER(X_QUALIFICATION_TYPE_ID)
      and LANGUAGE=userenv('LANG');

if (fnd_load_util.upload_test(f_luby, f_ludate, db_luby,
                                        db_ludate,X_CUSTOM_MODE)) then

  update per_qualification_types_tl
  set NAME                  =   X_USER_NAME,
      LAST_UPDATE_DATE = db_ludate,
      LAST_UPDATED_BY = db_luby,
      LAST_UPDATE_LOGIN = 0,
      SOURCE_LANG = userenv('LANG')
  where QUALIFICATION_TYPE_ID =   X_QUALIFICATION_TYPE_ID
  AND   userenv('LANG') in (LANGUAGE, SOURCE_LANG);
 end if;
end TRANSLATE_ROW;

procedure delete_row(
		X_QUALIFICATION_TYPE_ID IN NUMBER
		) is
begin

    delete from PER_QUALIFICATION_TYPES_TL
    where qualification_type_id =X_QUALIFICATION_TYPE_ID;

end delete_row;

procedure ADD_LANGUAGE
is
begin
  -- process PER_QUALIFICATION_TYPES_TL table
  delete from PER_QUALIFICATION_TYPES_TL T
  where not exists
    (select NULL
    from PER_QUALIFICATION_TYPES B
    where B.QUALIFICATION_TYPE_ID = T.QUALIFICATION_TYPE_ID
    );

  update PER_QUALIFICATION_TYPES_TL T set (
      NAME
    ) = (select
      B.NAME
    from PER_QUALIFICATION_TYPES_TL B
    where B.QUALIFICATION_TYPE_ID = T.QUALIFICATION_TYPE_ID
    and B.LANGUAGE = T.SOURCE_LANG)
  where (
      T.QUALIFICATION_TYPE_ID,
      T.LANGUAGE
  ) in (select
      SUBT.QUALIFICATION_TYPE_ID,
      SUBT.LANGUAGE
    from PER_QUALIFICATION_TYPES_TL SUBB, PER_QUALIFICATION_TYPES_TL SUBT
    where SUBB.QUALIFICATION_TYPE_ID = SUBT.QUALIFICATION_TYPE_ID
    and SUBB.LANGUAGE = SUBT.SOURCE_LANG
    and (SUBB.NAME <> SUBT.NAME
  ));

  insert into PER_QUALIFICATION_TYPES_TL (
    QUALIFICATION_TYPE_ID,
    NAME,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    CREATED_BY,
    CREATION_DATE,
    LANGUAGE,
    SOURCE_LANG
  ) select
    B.QUALIFICATION_TYPE_ID,
    B.NAME,
    B.LAST_UPDATE_DATE,
    B.LAST_UPDATED_BY,
    B.LAST_UPDATE_LOGIN,
    B.CREATED_BY,
    B.CREATION_DATE,
    L.LANGUAGE_CODE,
    B.SOURCE_LANG
  from PER_QUALIFICATION_TYPES_TL B, FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and B.LANGUAGE = userenv('LANG')
  and not exists
    (select NULL
    from PER_QUALIFICATION_TYPES_TL T
    where T.QUALIFICATION_TYPE_ID = B.QUALIFICATION_TYPE_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);

end ADD_LANGUAGE;

End per_qualification_types_pkg;

/
