--------------------------------------------------------
--  DDL for Package Body GMF_GLR20USR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."GMF_GLR20USR_XMLP_PKG" AS
/* $Header: GLR20USRB.pls 120.0 2007/12/24 13:29:48 nchinnam noship $ */
  FUNCTION SOURCECFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF LP_FROM_SOURCE IS NOT NULL AND LP_TO_SOURCE IS NOT NULL THEN
      SOURCECP := ' and e.trans_source_code >= ''' || LP_FROM_SOURCE || '''
                                     and e.trans_source_code <= ''' || LP_TO_SOURCE || '''';
    ELSIF LP_FROM_SOURCE IS NULL AND LP_TO_SOURCE IS NULL THEN
      SOURCECP :='AND 1=1';
      LP_FROM_SOURCE := FND_PROFILE.VALUE('SY$ALL');
      LP_TO_SOURCE := FND_PROFILE.VALUE('SY$ALL');
    ELSIF LP_FROM_SOURCE IS NOT NULL AND LP_TO_SOURCE IS NULL THEN
      SOURCECP := ' and e.trans_source_code >= ''' || LP_FROM_SOURCE || '''';
      LP_TO_SOURCE := FND_PROFILE.VALUE('SY$ALL');
    ELSIF LP_FROM_SOURCE IS NOT NULL AND LP_TO_SOURCE IS NOT NULL THEN
      SOURCECP := ' and e.trans_source_code <= ''' || LP_TO_SOURCE || '''';
      LP_FROM_SOURCE := FND_PROFILE.VALUE('SY$ALL');
    END IF;
    RETURN NULL;
  END SOURCECFFORMULA;
  FUNCTION EVENTCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF LP_FROM_EVENT IS NOT NULL AND LP_TO_EVENT IS NOT NULL THEN
      EVENTCP := ' and b.event_code >= ''' || LP_FROM_EVENT || '''
                                    and b.event_code <= ''' || LP_TO_EVENT || '''';
    ELSIF LP_FROM_EVENT IS NULL AND LP_TO_EVENT IS NULL THEN
      EVENTCP := 'AND 1=1';
      LP_FROM_EVENT := FND_PROFILE.VALUE('SY$ALL');
      LP_TO_EVENT := FND_PROFILE.VALUE('SY$ALL');
    ELSIF LP_FROM_EVENT IS NOT NULL AND LP_TO_EVENT IS NULL THEN
      EVENTCP := ' and b.event_code >= ''' || LP_FROM_EVENT || '''';
      LP_TO_EVENT := FND_PROFILE.VALUE('SY$ALL');
    ELSIF LP_FROM_EVENT IS NOT NULL AND LP_TO_EVENT IS NOT NULL THEN
      EVENTCP := ' and b.event_code <= ''' || LP_TO_EVENT || '''';
      LP_FROM_EVENT := FND_PROFILE.VALUE('SY$ALL');
    END IF;
    RETURN NULL;
  END EVENTCFFORMULA;
  FUNCTION SUBEVENTCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF LP_FROM_SUB_EVENT IS NOT NULL AND LP_TO_SUB_EVENT IS NOT NULL THEN
      SUBEVENTCP := ' and c.sub_event_code >= ''' || LP_FROM_SUB_EVENT || '''
                                         and c.sub_event_code <= ''' || LP_TO_SUB_EVENT || '''';
    ELSIF LP_FROM_SUB_EVENT IS NULL AND LP_TO_SUB_EVENT IS NULL THEN
      SUBEVENTCP := 'AND 1=1';
      LP_FROM_SUB_EVENT := FND_PROFILE.VALUE('SY$ALL');
      LP_TO_SUB_EVENT := FND_PROFILE.VALUE('SY$ALL');
    ELSIF LP_FROM_SUB_EVENT IS NOT NULL AND LP_TO_SUB_EVENT IS NULL THEN
      SUBEVENTCP := ' and c.sub_event_code >= ''' || LP_FROM_SUB_EVENT || '''';
      LP_TO_SUB_EVENT := FND_PROFILE.VALUE('SY$ALL');
    ELSIF LP_FROM_SUB_EVENT IS NOT NULL AND LP_TO_SUB_EVENT IS NOT NULL THEN
      SUBEVENTCP := ' and c.sub_event_code <= ''' || LP_TO_SUB_EVENT || '''';
      LP_FROM_SUB_EVENT := FND_PROFILE.VALUE('SY$ALL');
    END IF;
    RETURN NULL;
  END SUBEVENTCFFORMULA;
  FUNCTION ACCTTTLCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF LP_FROM_ACCT_TTL IS NOT NULL AND LP_TO_ACCT_TTL IS NOT NULL THEN
      ACCTTTLCP := ' and d.acct_ttl_code >= ''' || LP_FROM_ACCT_TTL || '''
                                        and d.acct_ttl_code <= ''' || LP_TO_ACCT_TTL || '''';
    ELSIF LP_FROM_ACCT_TTL IS NULL AND LP_TO_ACCT_TTL IS NULL THEN
      ACCTTTLCP := 'AND 1=1';
      LP_FROM_ACCT_TTL := FND_PROFILE.VALUE('SY$ALL');
      LP_TO_ACCT_TTL := FND_PROFILE.VALUE('SY$ALL');
    ELSIF LP_FROM_ACCT_TTL IS NOT NULL AND LP_TO_ACCT_TTL IS NULL THEN
      ACCTTTLCP := ' and d.acct_ttl_code >= ''' || LP_FROM_ACCT_TTL || '''';
      LP_TO_ACCT_TTL := FND_PROFILE.VALUE('SY$ALL');
    ELSIF LP_FROM_ACCT_TTL IS NOT NULL AND LP_TO_ACCT_TTL IS NOT NULL THEN
      ACCTTTLCP := ' and d.acct_ttl_code <= ''' || LP_TO_ACCT_TTL || '''';
      LP_FROM_ACCT_TTL := FND_PROFILE.VALUE('SY$ALL');
    END IF;
    RETURN NULL;
  END ACCTTTLCFFORMULA;
  PROCEDURE GMF_GLR20USR_XMLP_PKG_HDR IS
  BEGIN
    NULL;
  END GMF_GLR20USR_XMLP_PKG_HDR;
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    LP_FROM_SOURCE:=P_FROM_SOURCE;
    LP_TO_SOURCE:=P_TO_SOURCE;
    LP_FROM_EVENT:=P_FROM_EVENT;
    LP_TO_EVENT:=P_TO_EVENT;
    LP_FROM_SUB_EVENT:=P_FROM_SUB_EVENT;
    LP_TO_SUB_EVENT:=P_TO_SUB_EVENT;
    LP_FROM_ACCT_TTL:=P_FROM_ACCT_TTL;
    LP_TO_ACCT_TTL:=P_TO_ACCT_TTL;
    RETURN (TRUE);
  END BEFOREREPORT;
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;
  FUNCTION SOURCECP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SOURCECP;
  END SOURCECP_P;
  FUNCTION EVENTCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN EVENTCP;
  END EVENTCP_P;
  FUNCTION SUBEVENTCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SUBEVENTCP;
  END SUBEVENTCP_P;
  FUNCTION ACCTTTLCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ACCTTTLCP;
  END ACCTTTLCP_P;
END GMF_GLR20USR_XMLP_PKG;


/
