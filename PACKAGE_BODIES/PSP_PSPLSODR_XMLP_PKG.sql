--------------------------------------------------------
--  DDL for Package Body PSP_PSPLSODR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PSP_PSPLSODR_XMLP_PKG" AS
/* $Header: PSPLSODRB.pls 120.5 2008/01/30 07:44:59 amakrish noship $ */
  FUNCTION CF_GL_DESCFORMULA(GL_CODE_COMBINATION_ID IN NUMBER) RETURN CHAR IS
    L_GL_CODE VARCHAR2(1000);
    L_SOB NUMBER(30) := PSP_GENERAL.GET_SPECIFIC_PROFILE('GL_SET_OF_BKS_ID');
  BEGIN
    IF GL_CODE_COMBINATION_ID IS NOT NULL THEN
      L_GL_CODE := PSP_GENERAL.GET_GL_VALUES(L_SOB
                                            ,GL_CODE_COMBINATION_ID);
      RETURN L_GL_CODE;
    END IF;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 'Invalid GL Code Combination';
  END CF_GL_DESCFORMULA;

  FUNCTION CF_TASK_NAMEFORMULA(PROJECT_ID_1 IN NUMBER
                              ,TASK_ID_1 IN NUMBER) RETURN CHAR IS
    CURSOR TASK_ID_CUR IS
      SELECT
        TASK_NUMBER
      FROM
        PA_TASKS
      WHERE PROJECT_ID = PROJECT_ID_1
        AND TASK_ID = TASK_ID_1;
    L_TASK_NUMBER VARCHAR2(30);
  BEGIN
    IF TASK_ID_1 IS NOT NULL THEN
      OPEN TASK_ID_CUR;
      FETCH TASK_ID_CUR
       INTO L_TASK_NUMBER;
      RETURN L_TASK_NUMBER;
      CLOSE TASK_ID_CUR;
    END IF;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 'Invalid Task Number';
  END CF_TASK_NAMEFORMULA;

  FUNCTION CF_AWARD_NUMBERFORMULA(AWARD_ID_1 IN NUMBER) RETURN CHAR IS
    CURSOR AWARD_NUMBER_CUR IS
      SELECT
        AWARD_NUMBER
      FROM
        GMS_AWARDS_ALL
      WHERE AWARD_ID = AWARD_ID_1;
    L_AWARD_NUMBER VARCHAR2(20);
  BEGIN
    IF AWARD_ID_1 IS NOT NULL THEN
      OPEN AWARD_NUMBER_CUR;
      FETCH AWARD_NUMBER_CUR
       INTO L_AWARD_NUMBER;
      IF L_AWARD_NUMBER IS NULL THEN
        BEGIN
          SELECT
            DEFAULT_DIST_AWARD_NUMBER
          INTO L_AWARD_NUMBER
          FROM
            GMS_IMPLEMENTATIONS
          WHERE DEFAULT_DIST_AWARD_ID = AWARD_ID_1
            AND AWARD_DISTRIBUTION_OPTION = 'Y';
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            NULL;
        END;
      END IF;
      RETURN L_AWARD_NUMBER;
    END IF;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 'Invalid Award Number';
  END CF_AWARD_NUMBERFORMULA;

  FUNCTION CF_PROJECT_NUMBERFORMULA(PROJECT_ID_1 IN NUMBER) RETURN CHAR IS
    CURSOR PROJECT_NUMBER_CUR IS
      SELECT
        SEGMENT1
      FROM
        PA_PROJECTS_ALL
      WHERE PROJECT_ID = PROJECT_ID_1;
    L_PROJECT_NUMBER VARCHAR2(30);
  BEGIN
    IF PROJECT_ID_1 IS NOT NULL THEN
      OPEN PROJECT_NUMBER_CUR;
      FETCH PROJECT_NUMBER_CUR
       INTO L_PROJECT_NUMBER;
      RETURN L_PROJECT_NUMBER;
    END IF;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 'Invalid Project Number';
  END CF_PROJECT_NUMBERFORMULA;

  FUNCTION CF_ORG_NAMEFORMULA(EXPENDITURE_ORGANIZATION_ID IN NUMBER) RETURN CHAR IS
    CURSOR ORG_NAME_CUR IS
      SELECT
        NAME
      FROM
        HR_ORGANIZATION_UNITS
      WHERE ORGANIZATION_ID = EXPENDITURE_ORGANIZATION_ID;
    L_ORG_NAME HR_ALL_ORGANIZATION_UNITS_TL.NAME%TYPE;
  BEGIN
    IF EXPENDITURE_ORGANIZATION_ID IS NOT NULL THEN
      OPEN ORG_NAME_CUR;
      FETCH ORG_NAME_CUR
       INTO L_ORG_NAME;
      RETURN L_ORG_NAME;
    END IF;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 'Invalid Expenditure Organization';
  END CF_ORG_NAMEFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    P_RETURN_STATUS NUMBER;
    P_LOG_MESSAGE VARCHAR2(100);
    L_ORGANIZATION_ID VARCHAR2(2000);
    L_BEGIN_POSITION NUMBER;
    L_END_POSITION NUMBER;
    CURSOR C_ORG_COUNT IS
      SELECT
        COUNT(1)
      FROM
        PSP_REPORT_TEMPLATE_DETAILS
      WHERE TEMPLATE_ID = P_ORG_TEMPLATE_ID
        AND CRITERIA_LOOKUP_TYPE = 'PSP_SELECTION_CRITERIA'
        AND CRITERIA_LOOKUP_CODE = 'ORG';
    CURSOR C_ORG_CURSOR IS
      SELECT
        CRITERIA_VALUE1
      FROM
        PSP_REPORT_TEMPLATE_DETAILS
      WHERE TEMPLATE_ID = P_ORG_TEMPLATE_ID
        AND CRITERIA_LOOKUP_TYPE = 'PSP_SELECTION_CRITERIA'
        AND CRITERIA_LOOKUP_CODE = 'ORG';
    L_NUM NUMBER;
  BEGIN
    IF P_ORG_TEMPLATE_ID IS NULL THEN
      L_ORGANIZATION_ID := NULL;
    ELSE
      OPEN C_ORG_COUNT;
      FETCH C_ORG_COUNT
       INTO L_NUM;
      CLOSE C_ORG_COUNT;
      IF L_NUM <> 0 THEN
        FOR l_org_rec IN C_ORG_CURSOR LOOP
          IF ((L_NUM - C_ORG_CURSOR%ROWCOUNT) = 0) THEN
            L_ORGANIZATION_ID := L_ORGANIZATION_ID || L_ORG_REC.CRITERIA_VALUE1;
          ELSE
            L_ORGANIZATION_ID := L_ORGANIZATION_ID || L_ORG_REC.CRITERIA_VALUE1 || ',';
          END IF;
        END LOOP;
      ELSE
        L_ORGANIZATION_ID := NULL;
      END IF;
    END IF;
    PSP_MATRIX_DRIVER_PKG.LOAD_ORG_SCHEDULE(P_RETURN_STATUS => P_RETURN_STATUS
                                           ,P_LOG_MESSAGE => P_LOG_MESSAGE
                                           ,P_LIST_ORGANIZATION_ID => L_ORGANIZATION_ID
                                           ,P_PERIOD_FROM => P_BEGIN_DATE
                                           ,P_PERIOD_TO => P_END_DATE
                                           ,P_REPORT_TYPE => P_REPORT_TYPE
                                           ,P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
                                           ,P_SET_OF_BOOKS_ID => P_SET_OF_BOOKS_ID);
    P_RUN_ID := PSP_MATRIX_DRIVER_PKG.GET_RUN_ID;
    IF P_RETURN_STATUS = 0 THEN
     -- HR_STANDARD.EVENT('BEFORE REPORT');
     null;
      RETURN (TRUE);
    ELSE
      RETURN (FALSE);
    END IF;
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    P_RUN_ID := PSP_MATRIX_DRIVER_PKG.GET_RUN_ID;
    DELETE FROM PSP_MATRIX_DRIVER
     WHERE RUN_ID = P_RUN_ID;
    --HR_STANDARD.EVENT('AFTER REPORT');
    null;
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END AFTERREPORT;

  FUNCTION CF_ORG_SCHEDULE_IDFORMULA(ORG_SCHEDULE_ID IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (ORG_SCHEDULE_ID);
  END CF_ORG_SCHEDULE_IDFORMULA;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
    CURSOR C1(P_LOOKUP_CODE IN VARCHAR2,L_TEMPLATE_ID IN NUMBER) IS
      SELECT
        COUNT(1)
      FROM
        PSP_REPORT_TEMPLATE_DETAILS
      WHERE TEMPLATE_ID = L_TEMPLATE_ID
        AND CRITERIA_LOOKUP_TYPE = 'PSP_SELECTION_CRITERIA'
        AND CRITERIA_LOOKUP_CODE = P_LOOKUP_CODE;
    L_NUM NUMBER;
    L_NUM1 NUMBER;
  BEGIN
    IF P_ORG_TEMPLATE_ID IS NULL THEN
      P_ORGANIZATION_ID := '  1 = 1 ';
    ELSE
      OPEN C1('ORG',P_ORG_TEMPLATE_ID);
      FETCH C1
       INTO L_NUM;
      CLOSE C1;
      IF L_NUM <> 0 THEN
        P_ORGANIZATION_ID := '  hou.organization_id  IN (select criteria_value1 from psp_report_template_details
                                    where template_id = ' || P_ORG_TEMPLATE_ID || '
                                    and   criteria_lookup_type = ''PSP_SELECTION_CRITERIA''
                                    and   criteria_lookup_code = ''ORG'' ' || ' ) ';
      ELSE
        P_ORGANIZATION_ID := '  1 = 1 ';
      END IF;
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION CF_DATE_FORMATFORMULA RETURN CHAR IS
  BEGIN
    RETURN (FND_PROFILE.VALUE('ICX_DATE_FORMAT_MASK'));
  END CF_DATE_FORMATFORMULA;

  FUNCTION CF_SCH_BEGIN_DATE_DISPFORMULA(SCHEDULE_BEGIN_DATE IN DATE
                                        ,CF_DATE_FORMAT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(SCHEDULE_BEGIN_DATE)*/NULL;
    /*SRW.REFERENCE(CF_DATE_FORMAT)*/NULL;
    RETURN (TO_CHAR(SCHEDULE_BEGIN_DATE
                  ,CF_DATE_FORMAT));
  END CF_SCH_BEGIN_DATE_DISPFORMULA;

  FUNCTION CF_SCH_END_DATE_DISPFORMULA(SCHEDULE_END_DATE IN DATE
                                      ,CF_DATE_FORMAT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(SCHEDULE_END_DATE)*/NULL;
    /*SRW.REFERENCE(CF_DATE_FORMAT)*/NULL;
    RETURN (TO_CHAR(SCHEDULE_END_DATE
                  ,CF_DATE_FORMAT));
  END CF_SCH_END_DATE_DISPFORMULA;

  FUNCTION CF_REPORT_RUN_DATEFORMULA(CF_DATE_FORMAT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(SYSDATE)*/NULL;
    /*SRW.REFERENCE(CF_DATE_FORMAT)*/NULL;
    RETURN (TO_CHAR(SYSDATE
                  ,CF_DATE_FORMAT));
  END CF_REPORT_RUN_DATEFORMULA;

  FUNCTION CF_PERIOD_START_DATEFORMULA(PERIOD_START_DATE IN DATE
                                      ,CF_DATE_FORMAT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(PERIOD_START_DATE)*/NULL;
    /*SRW.REFERENCE(CF_DATE_FORMAT)*/NULL;
    RETURN (TO_CHAR(PERIOD_START_DATE
                  ,CF_DATE_FORMAT));
  END CF_PERIOD_START_DATEFORMULA;

  FUNCTION CF_PERIOD_END_DATE_DISPFORMULA(PERIOD_END_DATE IN DATE
                                         ,CF_DATE_FORMAT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(PERIOD_END_DATE)*/NULL;
    /*SRW.REFERENCE(CF_DATE_FORMAT)*/NULL;
    RETURN (TO_CHAR(PERIOD_END_DATE
                  ,CF_DATE_FORMAT));
  END CF_PERIOD_END_DATE_DISPFORMULA;

  FUNCTION CF_BEGIN_DATE_DISPFORMULA(CF_DATE_FORMAT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(P_BEGIN_DATE)*/NULL;
    /*SRW.REFERENCE(CF_DATE_FORMAT)*/NULL;
    RETURN (TO_CHAR(P_BEGIN_DATE
                  ,CF_DATE_FORMAT));
  END CF_BEGIN_DATE_DISPFORMULA;

  FUNCTION CF_END_DATE_DISPFORMULA(CF_DATE_FORMAT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(P_END_DATE)*/NULL;
    /*SRW.REFERENCE(CF_DATE_FORMAT)*/NULL;
    RETURN (TO_CHAR(P_END_DATE
                  ,CF_DATE_FORMAT));
  END CF_END_DATE_DISPFORMULA;

END PSP_PSPLSODR_XMLP_PKG;

/
