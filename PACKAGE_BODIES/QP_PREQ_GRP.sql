--------------------------------------------------------
--  DDL for Package Body QP_PREQ_GRP
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."QP_PREQ_GRP" AS
/* $Header: QPXGPREB.pls 120.70.12010000.40 2010/03/29 08:39:18 hmohamme ship $ */

G_VERSION VARCHAR2(240):= '/* $Header: QPXGPREB.pls 120.70.12010000.40 2010/03/29 08:39:18 hmohamme ship $ */';
--Indexes similar to temporary sequence number
/*TYPE PLS_INTEGER_TYPE   IS TABLE OF PLS_INTEGER INDEX BY BINARY_INTEGER;
TYPE NUMBER_TYPE        IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE VARCHAR_TYPE       IS TABLE OF VARCHAR2(240) INDEX BY BINARY_INTEGER;
TYPE FLAG_TYPE          IS TABLE OF VARCHAR2(1)   INDEX BY BINARY_INTEGER;
TYPE ROWID_TYPE         IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
TYPE DATE_TYPE          IS TABLE OF DATE INDEX BY BINARY_INTEGER;*/


--G_RELATED_LINE_DETAIL_INDEX   PLS_INTEGER :=1;
G_PRICE_LIST_PHASE_ID         PLS_INTEGER ;  --will be replaced by initialization routine
G_PRICE_LIST_SEQUENCE         PLS_INTEGER ;  --will be replaced by initialization routine
G_INV_DECIMAL_PRECISION       NUMBER; -- bug 3572594
--G_DISCOUNT_MODE               CONSTANT VARCHAR2(3):='DIS';
--G_PRICELIST_MODE              CONSTANT VARCHAR2(3):='PLL';
--G_PRIMARY_SEARCH_IND          CONSTANT NUMBER := 1;
--G_SECONDARY_SEARCH_IND        CONSTANT NUMBER := 2;
--G_NULL_GROUPING_NUMBER        CONSTANT NUMBER := -1;
--G_NULL_LIST_LINE_ID           CONSTANT NUMBER := -1;
G_PRICE_PHASE_FLAG            BOOLEAN;
--G_NUMBER_FORMAT_TYPE	      CONSTANT VARCHAR2(1) := 'N';

 G_LINE_INDEX_tbl                pls_integer_type;
 G_USAGE_PRICING_TYPE_tbl	 varchar_type;
 G_LINE_CATEGORY_tbl	         varchar_type;
 G_LINE_DETAIL_INDEX_tbl         pls_integer_type;
 G_ATTRIBUTE_LEVEL_tbl           varchar_type;
 G_ATTRIBUTE_TYPE_tbl            varchar_type;
 G_LIST_HEADER_ID_tbl            number_type;
 G_LIST_LINE_ID_tbl              number_type;
 G_CONTEXT_tbl                   varchar_type;
 G_ATTRIBUTE_tbl                 varchar_type;
 G_VALUE_FROM_tbl                varchar_type;
 G_SETUP_VALUE_FROM_tbl          varchar_type;
 G_VALUE_TO_tbl                  varchar_type;
 G_SETUP_VALUE_TO_tbl            varchar_type;
 G_GROUPING_NUMBER_tbl           pls_integer_type;
 G_NO_QUALIFIERS_IN_GRP_tbl      pls_integer_type;
 G_COMPARISON_OPERATOR_TYPE_tbl  varchar_type;
 G_VALIDATED_FLAG_tbl            varchar_type;
 G_APPLIED_FLAG_tbl              varchar_type;
 G_PRICING_STATUS_CODE_tbl       varchar_type;
 G_PRICING_STATUS_TEXT_tbl       varchar_type;
 G_QUALIFIER_PRECEDENCE_tbl      pls_integer_type;
 G_DATATYPE_tbl                  varchar_type;
 G_PRICING_ATTR_FLAG_tbl         varchar_type;
 G_QUALIFIER_TYPE_tbl            varchar_type;
 G_product_uom_code_tbl          varchar_type;
 G_EXCLUDER_FLAG_TBL             varchar_type;
 G_PRICE_REQUEST_CODE_TBL        varchar_type;
 --G_DISTINCT_QUAL_FLAG_TBL        varchar_type;
 G_RELATIONSHIP_TYPE_TBL         VARCHAR_TYPE; -- 3215497
 G_RLTD_LINE_INDEX_TBL        PLS_INTEGER_TYPE; -- 3215497
 G_RLTD_LINE_DETAIL_INDEX_TBL PLS_INTEGER_TYPE; -- 3215497

 G_LINE_INDEX_l_TBL            PLS_INTEGER_TYPE;
 G_LINE_DETAIL_INDEX_l_TBL     PLS_INTEGER_TYPE;
 G_PRICING_STATUS_CODE_L_TBL   VARCHAR_TYPE;
 G_PRICING_STATUS_TEXT_L_TBL   VARCHAR_TYPE;

 G_LINE_TYPE_CODE_TBL          VARCHAR_TYPE;
 G_PRICING_EFFECTIVE_DATE_TBL  DATE_TYPE   ;
 G_ACTIVE_DATE_FIRST_TBL       DATE_TYPE   ;
 G_ACTIVE_DATE_FIRST_TYPE_TBL  VARCHAR_TYPE;
 G_ACTIVE_DATE_SECOND_TBL      DATE_TYPE   ;
 G_ACTIVE_DATE_SECOND_TYPE_TBL VARCHAR_TYPE ;
 G_LINE_QUANTITY_TBL           NUMBER_TYPE ;
 G_LINE_UOM_CODE_TBL           VARCHAR_TYPE;
 G_REQUEST_TYPE_CODE_TBL       VARCHAR_TYPE;
 G_PRICED_QUANTITY_TBL         NUMBER_TYPE;
 G_UOM_QUANTITY_TBL            NUMBER_TYPE;
 G_PRICED_UOM_CODE_TBL         VARCHAR_TYPE;
 G_CURRENCY_CODE_TBL           VARCHAR_TYPE;
 G_UNIT_PRICE_TBL              NUMBER_TYPE;
 G_PERCENT_PRICE_TBL           NUMBER_TYPE;
 G_ADJUSTED_UNIT_PRICE_TBL     NUMBER_TYPE;
 G_UPD_ADJUSTED_UNIT_PRICE_TBL     NUMBER_TYPE;
 G_PROCESSED_FLAG_TBL          VARCHAR_TYPE;
 G_PRICE_FLAG_TBL              VARCHAR_TYPE;
 G_LINE_ID_TBL                 NUMBER_TYPE;
 G_PROCESSING_ORDER_TBL        PLS_INTEGER_TYPE;
 G_CONTRACT_START_DATE_TBL	DATE_TYPE; /* shulin */
 G_CONTRACT_END_DATE_TBL	DATE_TYPE; /* shulin */
 G_LINE_UNIT_PRICE_TBL	NUMBER_TYPE; /* shu_latest */
 G_LIST_PRICE_OVERRIDE_FLAG_TBL  VARCHAR_TYPE; -- po integration
 G_CHARGE_PERIODICITY_CODE_TBL VARCHAR_3_TYPE;
 G_UPDATED_FLAG_TBL            VARCHAR_TYPE; -- 3215497
 G_CALCULATION_CODE_TBL        VARCHAR_TYPE; -- 3215497
 G_CHANGE_REASON_CODE_TBL      VARCHAR_TYPE; -- 3215497
 G_CHANGE_REASON_TEXT_TBL      VARCHAR_TYPE; -- 3215497
 G_PROCESS_CODE_TBL            VARCHAR_TYPE; -- 3215497
  G_LINE_INDEX_LD_TBL            PLS_INTEGER_TYPE;
  G_LINE_DETAIL_INDEX_LD_TBL     PLS_INTEGER_TYPE;
  G_LIST_HEADER_ID_LD_TBL        NUMBER_TYPE;
  G_LIST_LINE_ID_LD_TBL          NUMBER_TYPE;
  G_PRICING_STATUS_CODE_LD_TBL   VARCHAR_TYPE;
  G_PRICING_STATUS_TEXT_LD_TBL   VARCHAR_TYPE;
  G_APPLIED_FLAG_LD_TBL          VARCHAR_TYPE;
  G_PROCESSED_FLAG_LD_TBL        VARCHAR_TYPE;

  G_ROUNDING_FACTOR_TBL              PLS_INTEGER_TYPE;
  G_ROUNDING_FLAG_TBL                FLAG_TYPE;
  G_LINE_DETAIL_TYPE_CODE_TBL        VARCHAR_TYPE;
  G_PRICE_BREAK_TYPE_CODE_TBL        VARCHAR_TYPE;
  G_LIST_PRICE_TBL                   NUMBER_TYPE;
  G_LIST_LINE_TYPE_TBL               VARCHAR_TYPE;
  G_LIST_TYPE_CODE_TBL               VARCHAR_TYPE;
  G_CREATED_FROM_SQL_TBL             VARCHAR_TYPE;
  G_PRICING_GROUP_SEQUENCE_TBL       PLS_INTEGER_TYPE;
  G_PRICING_PHASE_ID_TBL             PLS_INTEGER_TYPE;
  G_OPERAND_CALCULATION_CODE_TBL     VARCHAR_TYPE;
  G_OPERAND_VALUE_TBL                VARCHAR_TYPE;
  G_NET_AMOUNT_FLAG_TBL              VARCHAR_TYPE; -- IT net_amount 2720717
  G_SUBSTITUTION_TYPE_CODE_TBL       VARCHAR_TYPE;
  G_SUBSTITUTION_VALUE_FROM_TBL      VARCHAR_TYPE;
  G_SUBSTITUTION_VALUE_TO_TBL        VARCHAR_TYPE;
  G_ASK_FOR_FLAG_TBL                 VARCHAR_TYPE;
  G_PRICE_FORMULA_ID_TBL             NUMBER_TYPE;
  G_PRODUCT_PRECEDENCE_TBL           PLS_INTEGER_TYPE;
  G_INCOMP_GRP_CODE_TBL              VARCHAR_TYPE;
  G_AUTOMATIC_FLAG_TBL               VARCHAR_TYPE;
  G_OVERRIDE_FLAG_TBL                VARCHAR_TYPE;
  G_PRIMARY_UOM_FLAG_TBL             VARCHAR_TYPE;
  G_PRINT_ON_INVOICE_FLAG_TBL        VARCHAR_TYPE;
  G_MODIFIER_LEVEL_CODE_TBL          VARCHAR_TYPE;
  G_BENEFIT_QTY_TBL                  NUMBER_TYPE;
  G_BENEFIT_UOM_CODE_TBL             VARCHAR_TYPE;
  G_LIST_LINE_NO_TBL                 VARCHAR_TYPE;
  G_ACCRUAL_FLAG_TBL                 VARCHAR_TYPE;
  G_ACCRUAL_CONVERSION_RATE_TBL      NUMBER_TYPE;
  G_ESTIM_ACCRUAL_RATE_TBL           NUMBER_TYPE;
  G_RECURRING_FLAG_TBL               VARCHAR_TYPE;
  G_SELECTED_VOLUME_ATTR_TBL         VARCHAR_TYPE;
  G_QUALIFIERS_EXIST_FLAG_TBL        VARCHAR_TYPE;
  G_PRICING_ATTRS_EXIST_FLAG_TBL     VARCHAR_TYPE;
  G_PRICE_LIST_ID_TBL                NUMBER_TYPE;
  G_PL_VALIDATED_FLAG_TBL            VARCHAR_TYPE;
  G_HEADER_LIMIT_EXISTS_TBL          VARCHAR_TYPE;
  G_LINE_LIMIT_EXISTS_TBL            VARCHAR_TYPE;
  G_CHARGE_TYPE_CODE_TBL             VARCHAR_TYPE;
  G_CHARGE_SUBTYPE_CODE_TBL          VARCHAR_TYPE;
  G_CURRENCY_HEADER_ID_TBL           NUMBER_TYPE; /* vivek */
  G_SELLING_ROUNDING_TBL           NUMBER_TYPE; /* vivek */
  G_ORDER_CURRENCY_TBL               VARCHAR_TYPE; /* vivek */
  G_BASE_CURRENCY_CODE_TBL           VARCHAR_TYPE; /* vivek */
  G_CURRENCY_DETAIL_ID_TBL           NUMBER_TYPE; /* sunilpandey */
--  G_LDET_LINE_QUANTITY_TBL		     NUMBER_TYPE; -- defined in SPEC
  G_ACCUM_CONTEXT_TBL                VARCHAR_TYPE; -- for accum range break
  G_ACCUM_ATTRIBUTE_TBL              VARCHAR_TYPE; -- for accum range break
  G_ACCUM_FLAG_TBL                   VARCHAR_TYPE; -- for accum range break
  G_BREAK_UOM_TBL               VARCHAR_TYPE; /* Proration */
  G_BREAK_CONTEXT_TBL           VARCHAR_TYPE; /* Proration */
  G_BREAK_ATTRIBUTE_TBL         VARCHAR_TYPE; /* Proration */
  G_SECONDARY_PRICELIST_IND_TBL VARCHAR_30_TYPE;

  G_LIST_HEADER_ID_TBL_Q             NUMBER_TYPE;
  G_LIST_LINE_ID_TBL_Q               NUMBER_TYPE;
  G_LINE_INDEX_TBL_Q                 NUMBER_TYPE;
  G_LIST_LINE_TYPE_TBL_Q             VARCHAR_TYPE;
  G_VALIDATED_FLAG_TBL_Q             VARCHAR_TYPE;
  G_APPLIED_FLAG_TBL_Q               VARCHAR_TYPE;
  G_AUTOMATIC_FLAG_TBL_Q             VARCHAR_TYPE;
  G_START_DATE_ACTIVE_TBL_Q          DATE_TYPE;
  G_END_DATE_ACTIVE_TBL_Q            DATE_TYPE;
  G_PRICING_EFFECTIVE_DATE_TBL_Q     DATE_TYPE;
  G_LINE_TYPE_CODE_TBL_Q             VARCHAR_TYPE;
  G_PRICING_PHASE_ID_TBL_Q           PLS_INTEGER_TYPE;
  G_UNIQUE_KEY_TBL_Q                 VARCHAR_TYPE;
  G_ATTRIBUTE_LEVEL_TBL_Q            VARCHAR_TYPE;
  G_ATTRIBUTE_TYPE_TBL_Q             VARCHAR_TYPE;
  G_CONTEXT_TBL_Q                    VARCHAR_TYPE;
  G_ATTRIBUTE_TBL_Q                  VARCHAR_TYPE;
  G_VALUE_FROM_TBL_Q                 VARCHAR_TYPE;
  G_GROUPING_NO_TBL_Q                PLS_INTEGER_TYPE;
  G_QUALIFIER_PRECEDENCE_TBL_Q       PLS_INTEGER_TYPE;
  G_DATATYPE_TBL_Q                   VARCHAR_TYPE;
  G_SETUP_VALUE_FROM_TBL_Q           VARCHAR_TYPE;
  G_SETUP_VALUE_TO_TBL_Q             VARCHAR_TYPE;
  G_PRICING_ATTR_FLAG_TBL_Q          VARCHAR_TYPE;
  G_OPERATOR_TYPE_TBL_Q              VARCHAR_TYPE;
  G_CURRENCY_CODE_TBL_Q              VARCHAR_TYPE;
  G_ASK_FOR_FLAG_TBL_Q               VARCHAR_TYPE;
  G_LIST_TYPE_CODE_TBL_Q             VARCHAR_TYPE;
  G_QUALIFIER_TYPE_TBL_Q             VARCHAR_TYPE;
  G_QUALIFIER_GROUP_CNT_TBL_Q        NUMBER_TYPE;
  G_OTHERS_GROUP_CNT_TBL_Q        	 NUMBER_TYPE;
  G_HEADER_QUALS_EXIST_FLG_TBL_Q     VARCHAR_TYPE;
  G_SEARCH_IND_TBL_Q                 NUMBER_TYPE;
  G_PRICING_STATUS_CODE_TBL_Q        VARCHAR_TYPE;
  G_START_DATE_ACTIVE_TBL_H_Q        DATE_TYPE;
  G_END_DATE_ACTIVE_TBL_H_Q          DATE_TYPE;
  G_START_DATE_ACTIVE_SEC_TBL_Q      DATE_TYPE;
  G_END_DATE_ACTIVE_SEC_TBL_Q        DATE_TYPE;
  G_ACTIVE_DATE_FIR_TYPE_TBL_Q       VARCHAR_TYPE;
  G_ACTIVE_DATE_SEC_TYPE_TBL_Q       VARCHAR_TYPE;
  G_START_DATE_ACTIVE_FIR_TBL_Q      DATE_TYPE;
  G_END_DATE_ACTIVE_FIR_TBL_Q        DATE_TYPE;
  G_HEADER_LIMIT_EXISTS_TBL_Q        VARCHAR_TYPE;
  G_ACTIVE_DATE_FIRST_TBL_Q          DATE_TYPE;
  G_ACTIVE_DATE_SECOND_TBL_Q         DATE_TYPE;
  G_INCOMP_GRP_CODE_TBL_Q            VARCHAR_TYPE;
  G_ACCR_CONVERSION_RATE_TBL_Q       NUMBER_TYPE;
  G_ACCRUAL_FLAG_TBL_Q               VARCHAR_TYPE;
  G_MODIFIER_LEVEL_CODE_TBL_Q        VARCHAR_TYPE;
  G_LIST_PRICE_TBL_Q                 NUMBER_TYPE;
  G_LIST_LINE_NO_TBL_Q               VARCHAR_TYPE;
  G_PRIMARY_UOM_FLAG_TBL_Q           VARCHAR_TYPE;
  G_OPER_CALCULATION_CODE_TBL_Q      VARCHAR_TYPE;
  G_OPERAND_TBL_Q                    NUMBER_TYPE;
  G_NET_AMOUNT_FLAG_TBL_Q            VARCHAR_TYPE; -- IT net_amount 2720717
  G_PRICING_GROUP_SEQUENCE_TBL_Q     NUMBER_TYPE;
  G_PRICE_BREAK_TYPE_CODE_TBL_Q      VARCHAR_TYPE;
  G_PRICE_FORMULA_ID_TBL_Q           NUMBER_TYPE;
  G_PRODUCT_PRECEDENCE_TBL_Q         NUMBER_TYPE;
  G_ESTIM_ACCRUAL_RATE_TBL_Q         NUMBER_TYPE;
  G_DERIVED_QUALIFIER_FLAG_TBL_Q     VARCHAR_TYPE;   -- Added for TCA

  G_LINE_INDEX_TBL_P              NUMBER_TYPE;
  G_LINE_DETAIL_INDEX_TBL_P       NUMBER_TYPE;
  G_LIST_HEADER_ID_TBL_P          NUMBER_TYPE;
  G_LIST_LINE_ID_TBL_P            NUMBER_TYPE;
  G_PRICE_BREAK_TYPE_CODE_TBL_P   VARCHAR_TYPE;
  G_LIST_PRICE_TBL_P              NUMBER_TYPE;
  G_LIST_LINE_TYPE_TBL_P          VARCHAR_TYPE;
  G_LIST_TYPE_CODE_TBL_P          VARCHAR_TYPE;
  G_PRICING_GROUP_SEQUENCE_TBL_P  NUMBER_TYPE;
  G_PRICING_PHASE_ID_TBL_P        PLS_INTEGER_TYPE;
  G_OPER_CALCULATION_CODE_TBL_P   VARCHAR_TYPE;
  G_OPERAND_VALUE_TBL_P           NUMBER_TYPE;
  G_NET_AMOUNT_FLAG_TBL_P         VARCHAR_TYPE;  -- IT net_amount 2720717
  G_ASK_FOR_FLAG_TBL_P            VARCHAR_TYPE;
  G_PRICE_FORMULA_ID_TBL_P        NUMBER_TYPE;
  G_PRODUCT_PRECEDENCE_TBL_P      NUMBER_TYPE;
  G_INCOMP_GRP_CODE_TBL_P         VARCHAR_TYPE;
  G_AUTOMATIC_FLAG_TBL_P          VARCHAR_TYPE;
  G_OVERRIDE_FLAG_TBL_P           VARCHAR_TYPE;
  G_PRIMARY_UOM_FLAG_TBL_P        VARCHAR_TYPE;
  G_PRINT_ON_INVOICE_FLAG_TBL_P   VARCHAR_TYPE;
  G_MODIFIER_LEVEL_CODE_TBL_P     VARCHAR_TYPE;
  G_BENEFIT_QTY_TBL_P             NUMBER_TYPE;
  G_BENEFIT_UOM_CODE_TBL_P        VARCHAR_TYPE;
  G_LIST_LINE_NO_TBL_P            VARCHAR_TYPE;
  G_ACCRUAL_FLAG_TBL_P            VARCHAR_TYPE;
  G_ACCR_CONVERSION_RATE_TBL_P    NUMBER_TYPE;
  G_ESTIM_ACCRUAL_RATE_TBL_P      NUMBER_TYPE;
  G_ATTRIBUTE_LEVEL_TBL_P         VARCHAR_TYPE;
  G_ATTRIBUTE_TYPE_TBL_P          VARCHAR_TYPE;
  G_CONTEXT_TBL_P                 VARCHAR_TYPE;
  G_ATTRIBUTE_TBL_P               VARCHAR_TYPE;
  G_VALUE_FROM_TBL_P              VARCHAR_TYPE;
  G_SETUP_VALUE_FROM_TBL_P        VARCHAR_TYPE;
  G_VALIDATED_FLAG_TBL_P          VARCHAR_TYPE;
  G_APPLIED_FLAG_TBL_P            VARCHAR_TYPE;
  G_PRICING_ATTR_FLAG_TBL_P       VARCHAR_TYPE;
  G_GROUPING_NUMBER_TBL_P         NUMBER_TYPE;
  G_QUALIFIER_PRECEDENCE_TBL_P    NUMBER_TYPE;
  G_EXCLUDER_FLAG_TBL_P           VARCHAR_TYPE;
  G_PRODUCT_UOM_CODE_TBL_P        VARCHAR_TYPE;
  G_QUALIFIER_TYPE_TBL_P          VARCHAR_TYPE;
  G_ROUNDING_FACTOR_TBL_P         NUMBER_TYPE;
  G_HEADER_LIMIT_EXISTS_TBL_P     VARCHAR_TYPE;
  G_LINE_LIMIT_EXISTS_TBL_P       VARCHAR_TYPE;
  G_CHARGE_TYPE_CODE_TBL_P       VARCHAR_TYPE;
  G_CHARGE_SUBTYPE_CODE_TBL_P       VARCHAR_TYPE;
  G_CURRENCY_HEADER_ID_TBL_P      NUMBER_TYPE; /* vivek */
  G_SELLING_ROUNDING_TBL_P      NUMBER_TYPE; /* vivek */
  G_ORDER_CURRENCY_TBL_P          VARCHAR_TYPE; /* vivek */
  G_PRICING_EFFECTIVE_DATE_TBL_P  DATE_TYPE; /* vivek */
  G_BASE_CURRENCY_CODE_TBL_P      VARCHAR_TYPE; /* vivek */
  G_CURRENCY_DETAIL_ID_TBL_P      NUMBER_TYPE; /* sunilpandey */
  G_ACCUM_CONTEXT_TBL_P           VARCHAR_TYPE; -- for accum range break
  G_ACCUM_ATTRIBUTE_TBL_P         VARCHAR_TYPE; -- for accum range break
  G_ACCUM_FLAG_TBL_P              VARCHAR_TYPE; -- for accum range break

  G_ATTRIBUTE_LEVEL_TBL_PR        VARCHAR_TYPE;
  G_ATTRIBUTE_TYPE_TBL_PR         VARCHAR_TYPE;
  G_CONTEXT_TBL_PR                VARCHAR_TYPE;
  G_ATTRIBUTE_TBL_PR              VARCHAR_TYPE;
  G_VALUE_FROM_TBL_PR             VARCHAR_TYPE;
  G_OPERATOR_TYPE_TBL_PR          VARCHAR_TYPE;
  G_SETUP_VALUE_FROM_TBL_PR       VARCHAR_TYPE;
  G_SETUP_VALUE_TO_TBL_PR         VARCHAR_TYPE;
  G_DATATYPE_TBL_PR               VARCHAR_TYPE;
  G_BREAK_UOM_TBL_P               VARCHAR_TYPE; /* Proration */
  G_BREAK_CONTEXT_TBL_P           VARCHAR_TYPE; /* Proration */
  G_BREAK_ATTRIBUTE_TBL_P         VARCHAR_TYPE; /* Proration */

  G_LINE_INDEX_TBL_B              PLS_INTEGER_TYPE;
  G_LIST_HEADER_ID_TBL_B          NUMBER_TYPE;
  G_LIST_LINE_ID_TBL_B            NUMBER_TYPE;
  G_PRICE_BREAK_TYPE_CODE_TBL_B   VARCHAR_TYPE;
  G_LIST_PRICE_TBL_B              NUMBER_TYPE;
  G_LIST_LINE_TYPE_TBL_B          VARCHAR_TYPE;
  G_LIST_TYPE_CODE_TBL_B          VARCHAR_TYPE;
  G_PRICING_GROUP_SEQUENCE_TBL_B  NUMBER_TYPE;
  G_PRICING_PHASE_ID_TBL_B        PLS_INTEGER_TYPE;
  G_OPER_CALCULATION_CODE_TBL_B    VARCHAR_TYPE;
  G_OPERAND_VALUE_TBL_B            VARCHAR_TYPE;
  G_NET_AMOUNT_FLAG_TBL_B          VARCHAR_TYPE; -- IT net_amount 2720717
  G_ASK_FOR_FLAG_TBL_B             VARCHAR_TYPE;
  G_PRICE_FORMULA_ID_TBL_B         NUMBER_TYPE;
  G_PRODUCT_PRECEDENCE_TBL_B       NUMBER_TYPE;
  G_INCOMP_GRP_CODE_TBL_B          VARCHAR_TYPE;
  G_AUTOMATIC_FLAG_TBL_B           VARCHAR_TYPE;
  G_OVERRIDE_FLAG_TBL_B            VARCHAR_TYPE;
  G_PRIMARY_UOM_FLAG_TBL_B         VARCHAR_TYPE;
  G_PRINT_ON_INVOICE_FLAG_TBL_B    VARCHAR_TYPE;
  G_MODIFIER_LEVEL_CODE_TBL_B      VARCHAR_TYPE;
  G_BENEFIT_QTY_TBL_B              NUMBER_TYPE;
  G_BENEFIT_UOM_CODE_TBL_B         VARCHAR_TYPE;
  G_LIST_LINE_NO_TBL_B             VARCHAR_TYPE;
  G_ACCRUAL_FLAG_TBL_B             VARCHAR_TYPE;
  G_ACCR_CONVERSION_RATE_TBL_B     NUMBER_TYPE;
  G_ESTIM_ACCRUAL_RATE_TBL_B       NUMBER_TYPE;

  G_LINE_INDEX_TBL_G              NUMBER_TYPE;
  G_LIST_HEADER_ID_TBL_G          NUMBER_TYPE;
  G_LIST_LINE_ID_TBL_G            NUMBER_TYPE;
  G_NO_OF_PATTS_IN_GRP_TBL_G      NUMBER_TYPE;

  G_PRICING_PHASE_ID_TBL_A        PLS_INTEGER_TYPE;
  G_INCOMP_GRP_CODE_TBL_A         VARCHAR_TYPE;
  G_LINE_DETAIL_TYPE_CODE_TBL_A   VARCHAR_TYPE;
  G_MODIFIER_LEVEL_CODE_TBL_A     VARCHAR_TYPE;
  G_PRIMARY_UOM_FLAG_TBL_A        VARCHAR_TYPE;
  G_LINE_INDEX_TBL_A              PLS_INTEGER_TYPE;
  G_LINE_DETAIL_INDEX_TBL_A       PLS_INTEGER_TYPE;
  G_LIST_LINE_ID_TBL_A              NUMBER_TYPE;
  G_LIST_HEADER_ID_TBL_A              NUMBER_TYPE;

  --G_QUALIFIER_TEMP_EMPTY CONSTANT VARCHAR2(10) := 'E';
  --G_QUALIFIER_TEMP_UPDATED CONSTANT VARCHAR2(10) := 'U';
  --G_QUALIFIER_TEMP_NEED_UPDATE CONSTANT VARCHAR2(10) := 'N';
  G_QUALIFIER_TEMP VARCHAR2(10);
  G_LINE_QUALIFIER_TEMP VARCHAR2(10);

  G_INSERT_INTO_FORMULA_TMP      BOOLEAN ; -- Change
  --G_INSERT_INTO_FORMULA_TMP      VARCHAR2(10) := 'N'; -- Change

  -- security
  G_SECURITY_CONTROL              VARCHAR2(10) := 'OFF'; -- security
  --G_CURRENT_USER_OP_UNIT   NUMBER := NULL; -- security (moved to spec)

  -- Bug 3143535 - ORDER AMOUNT CALCULATION ISSUE
  G_BEFORE_PRICING_ORD_AMT  NUMBER := 0;

  G_NULL_PROFILE_VALUE      VARCHAR2(30) := 'NULL';

  -- julin [3805113]: storing for call_calculation_engine()
  G_CHILD_VALUE_FROM_TBL            VARCHAR_TYPE;
  G_CHILD_VALUE_TO_TBL              VARCHAR_TYPE;
  G_PARENT_LINE_DETAIL_INDEX_TBL    NUMBER_TYPE;

  -- julin [3805113]: default bulk fetch size
  G_BATCH_SIZE  NUMBER := 1000;
  G_BATCH_SIZE_1  NUMBER := 50000; -- bug 6364923

  --Pattern changes
  G_PTE_CODE VARCHAR2(30) := NULL;
  G_CHUNK_SIZE NUMBER := 5000;
  G_MIN_LINE_INDEX NUMBER;
  G_MAX_LINE_INDEX NUMBER;

-- Debug procedure
PROCEDURE Set_QP_Debug AS

 l_output_file			 VARCHAR2(240);
 l_routine                       VARCHAR2(30) := 'Set_QP_Debug';
 v_debug_switch    CONSTANT VARCHAR2(30) := 'QP_DEBUG';

BEGIN
G_QP_DEBUG_PROFILE_VALUE := FND_PROFILE.VALUE(v_debug_switch);

-- If Time Log is on then only Time Log messages should be printed.
-- Time Log will be on if Profiles QP:Debug is set to Time Log
-- and OM:Debug Level is set to 1.
-- Internal Bug# 8459818

IF G_QP_DEBUG_PROFILE_VALUE = G_TIME_LOG_DBG_LEVEL
      AND FND_PROFILE.VALUE('ONT_DEBUG_LEVEL') = 1 THEN
    oe_debug_pub.SetDebugLevel(1);
    oe_debug_pub.Initialize;
    oe_debug_pub.debug_on;

    l_output_file := oe_debug_pub.Set_Debug_Mode('FILE');
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug ('The output file is : ' || l_output_file );
    END IF;
ELSIF FND_PROFILE.VALUE('ONT_DEBUG_LEVEL') = 5 THEN
      l_output_file := oe_debug_pub.Set_Debug_Mode('FILE');
      IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
       engine_debug ('The output file is : ' || l_output_file );
      END IF;
END IF;

 -- Introduced for facilitating debugging for non OM Applications
--IF (NOT OE_DEBUG_PUB.ISDebugOn) THEN --If om debug is not on , then only look at qp_debug
if oe_debug_pub.g_debug_level > 0 then
 G_DEBUG_ENGINE:= FND_API.G_TRUE;
else
 IF (G_QP_DEBUG_PROFILE_VALUE = G_YES) OR
    (G_QP_DEBUG_PROFILE_VALUE = G_DONT_WRITE_TO_DEBUG) THEN  -- If qp debug is on
  oe_debug_pub.SetDebugLevel(10);
  oe_debug_pub.Initialize;
  oe_debug_pub.debug_on;
  l_output_file := oe_debug_pub.Set_Debug_Mode('FILE');
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug ('The output file is : ' || l_output_file );
  END IF;
  G_DEBUG_ENGINE:= FND_API.G_TRUE;
 ELSE
  G_DEBUG_ENGINE:= FND_API.G_FALSE;
 END IF;
END IF;

EXCEPTION
 WHEN OTHERS THEN
  --x_status_code := FND_API.G_RET_STS_ERROR;
  --x_status_text :=l_routine||' '||SQLERRM;
 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug(l_routine||' '||SQLERRM);
 END IF;

END Set_QP_Debug;

-- shu new rounding implementation
/*+--------------------------------------------------------------------
  | UPDATE_ROUNDING_FACTOR
  | to update rounding_factor in the qp_npreq_lines_tmp table
  +--------------------------------------------------------------------
*/
PROCEDURE UPDATE_ROUNDING_FACTOR(
	p_mcurr_installed_used_flag	IN  VARCHAR2,
	x_status_code                   OUT NOCOPY VARCHAR2,
	x_status_text                   OUT NOCOPY VARCHAR2) AS

	l_routine VARCHAR2(240):= 'Routine:QP_PREQ_GRP.UPDATE_ROUNDING_FACTOR';

CURSOR get_price_lists_cur IS
SELECT distinct price_list_header_id , currency_code , trunc(pricing_effective_date) pricing_effective_date
FROM   qp_npreq_lines_tmp
where  price_flag in ('Y','P')
and    line_type_code = 'LINE'
and    rounding_factor is null
and    price_list_header_id > 0; --[julin/5395256]


p_price_list_id_tbl    NUMBER_TYPE;
p_currency_code_tbl    VARCHAR_TYPE;
p_pricing_eff_date_tbl DATE_TYPE;
p_rounding_factor_tbl  NUMBER_TYPE;
nROWS                  NUMBER :=1000;
v_count                NUMBER := 0;

BEGIN

 OPEN get_price_lists_cur;

 LOOP

  p_price_list_id_tbl.delete;
  p_currency_code_tbl.delete;
  p_pricing_eff_date_tbl.delete;

 FETCH get_price_lists_cur BULK COLLECT INTO
  p_price_list_id_tbl,
  p_currency_code_tbl,
  p_pricing_eff_date_tbl LIMIT nROWS;

 EXIT WHEN p_price_list_id_tbl.COUNT = 0;

  IF (p_price_list_id_tbl.COUNT > 0) THEN

   v_count := p_price_list_id_tbl.count;

   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('Calling Round Factor function for : '||v_count|| ' price list,currency,pricing date combinations');
   END IF;

   FOR i in p_price_list_id_tbl.FIRST .. p_price_list_id_tbl.LAST
   LOOP

    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('Price List Id : ' || p_price_list_id_tbl(i));
     engine_debug('Currency Code : ' || p_currency_code_tbl(i));
     engine_debug('Pricing Date  : ' || p_pricing_eff_date_tbl(i));
    END IF;
    p_rounding_factor_tbl(i) :=
    qp_util_pub.get_rounding_factor(
                p_mcurr_installed_used_flag,
                p_price_list_id_tbl(i),
                p_currency_code_tbl(i),
                p_pricing_eff_date_tbl(i));

    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('Rounding factor in QP_PREQ_GRP after the function call : ' || p_rounding_factor_tbl(i));
    END IF;

   END LOOP;

   FORALL i in p_price_list_id_tbl.FIRST .. p_price_list_id_tbl.LAST
   UPDATE qp_npreq_lines_tmp
   SET   ROUNDING_FACTOR = p_rounding_factor_tbl(i)
   WHERE PRICE_FLAG in (QP_PREQ_GRP.G_YES, QP_PREQ_GRP.G_PHASE)
   AND   PRICE_LIST_HEADER_ID = p_price_list_id_tbl(i)
   AND   CURRENCY_CODE = p_currency_code_tbl(i)
   AND   trunc(PRICING_EFFECTIVE_DATE) = p_pricing_eff_date_tbl(i); -- bug 3364978

    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('Number of lines updated with rounding factor : ' || SQL%ROWCOUNT);
    END IF;

  END IF;
 END LOOP;

 CLOSE get_price_lists_cur;

EXCEPTION
 	WHEN OTHERS THEN
  		x_status_code := FND_API.G_RET_STS_ERROR;
  		x_status_text :=l_routine||' '||SQLERRM;
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  		engine_debug(l_routine||' '||SQLERRM);
    END IF;
END;

/*+--------------------------------------------------------------------
  |ENGINE_DEBUG
  |For performance concern, we can avoid calling debug
  |if the debug features is turned off
  +--------------------------------------------------------------------
*/
PROCEDURE ENGINE_DEBUG(p_text IN VARCHAR2) AS
 l_return_status VARCHAR2(240);
 l_status_text   VARCHAR2(240);
BEGIN
 --IF (G_DEBUG_ENGINE  = FND_API.G_TRUE) THEN
   oe_debug_pub.add(p_text,3);

-- Debug Screen related change
-- Irrespective of om debug if qp debug is on debug information is captured into qp debug tables
 IF (G_QP_DEBUG_PROFILE_VALUE = G_YES) THEN
   QP_COPY_DEBUG_PVT.INSERT_DEBUG_LINE(p_text);
 END IF;

 --END IF;
EXCEPTION
 WHEN OTHERS THEN
  NULL;
END;

/*+---------------------------------------------------------------------
  |GET_VERSION
  +---------------------------------------------------------------------
*/
FUNCTION GET_VERSION RETURN VARCHAR2 IS
BEGIN
 --engine_debug(G_VERSION);
 RETURN G_VERSION;
END;

/*+----------------------------------------------------------------------
  |Procedure INSERT_QUAL
  +----------------------------------------------------------------------
*/
PROCEDURE INSERT_QUAL(
  p_LIST_HEADER_ID         IN NUMBER_TYPE,
  p_LIST_LINE_ID           IN NUMBER_TYPE,
  p_VALIDATED_FLAG         IN VARCHAR_TYPE,
  p_APPLIED_FLAG           IN VARCHAR_TYPE,
  p_ATTRIBUTE_LEVEL        IN VARCHAR_TYPE,
  p_ATTRIBUTE_TYPE         IN VARCHAR_TYPE,
  p_CONTEXT                IN VARCHAR_TYPE,
  p_ATTRIBUTE              IN VARCHAR_TYPE,
  p_VALUE_FROM             IN VARCHAR_TYPE,
  p_GROUPING_NO            IN PLS_INTEGER_TYPE,
  p_QUALIFIER_PRECEDENCE   IN PLS_INTEGER_TYPE,
  p_DATATYPE               IN VARCHAR_TYPE,
  p_SETUP_VALUE_FROM       IN VARCHAR_TYPE,
  p_SETUP_VALUE_TO         IN VARCHAR_TYPE,
  p_PRICING_ATTR_FLAG      IN VARCHAR_TYPE,
  p_OPERATOR_TYPE          IN VARCHAR_TYPE,
  p_LIST_TYPE_CODE         IN VARCHAR_TYPE,
  p_ASK_FOR_FLAG           IN VARCHAR_TYPE,
  p_QUALIFIER_TYPE         IN VARCHAR_TYPE,
  p_QUALIFIER_GROUP_CNT    IN NUMBER_TYPE,
  p_OTHERS_GROUP_CNT    IN NUMBER_TYPE,
  p_HEADER_QUALS_EXIST_FLAG IN VARCHAR_TYPE,
  p_SEARCH_IND             IN NUMBER_TYPE,
  p_PRICING_STATUS_CODE    IN VARCHAR_TYPE,
  p_START_DATE_ACTIVE      IN DATE_TYPE,
  p_END_DATE_ACTIVE        IN DATE_TYPE,
  p_LINE_INDEX             IN NUMBER_TYPE,
  p_PRICING_EFFECTIVE_DATE IN DATE_TYPE,
  p_START_DATE_ACTIVE_FIR  IN DATE_TYPE,
  p_END_DATE_ACTIVE_FIR    IN DATE_TYPE,
  p_LINE_TYPE_CODE         IN VARCHAR_TYPE,
  p_PRICING_PHASE_ID       IN PLS_INTEGER_TYPE,
  p_UNIQUE_KEY             IN VARCHAR_TYPE,
  p_START_DATE_ACTIVE_H    IN DATE_TYPE,
  p_END_DATE_ACTIVE_H      IN DATE_TYPE,
  p_START_DATE_ACTIVE_SEC  IN DATE_TYPE,
  p_END_DATE_ACTIVE_SEC    IN DATE_TYPE,
  p_ACTIVE_DATE_FIR_TYPE   IN VARCHAR_TYPE,
  p_ACTIVE_DATE_SEC_TYPE   IN VARCHAR_TYPE,
  p_HEADER_LIMIT_EXISTS    IN VARCHAR_TYPE,
  p_DERIVED_QUALIFIER_FLAG IN VARCHAR_TYPE,  -- Added for TCA
  x_status_code            OUT NOCOPY VARCHAR2,
  x_status_text            OUT NOCOPY VARCHAR2)      AS

  l_routine VARCHAR2(240):= 'Routine:QP_PREQ_GRP.INSERT_QUAL';

BEGIN
FORALL i in p_list_header_id.FIRST..p_list_header_id.LAST
      Insert into QP_PREQ_QUAL_TMP
      (  LIST_HEADER_ID
      ,  LIST_LINE_ID
      ,  LINE_INDEX
      ,  QUALIFIER_ATTRIBUTE_LEVEL
      ,  QUALIFIER_ATTRIBUTE_TYPE
      ,  QUALIFIER_ATTRIBUTE_CONTEXT
      ,  QUALIFIER_ATTRIBUTE
      ,  QUALIFIER_ATTRIBUTE_VALUE
      ,  QUALIFIER_GROUPING_NO
      ,  QUALIFIER_PRECEDENCE
      ,  QUALIFIER_DATATYPE
      ,  SETUP_VALUE_FROM
      ,  SETUP_VALUE_TO
      ,  QUALIFIER_PRICING_ATTR_FLAG
      ,  QUALIFIER_OPERATOR_TYPE
      ,  ASK_FOR_FLAG
      ,  CREATED_FROM_LIST_TYPE
      ,  VALIDATED_FLAG
      ,  APPLIED_FLAG
      ,  QUALIFIER_TYPE
      ,  QUALIFIER_GROUP_CNT
      ,  OTHERS_GROUP_CNT
      ,  HEADER_QUALS_EXIST_FLAG
      ,  SEARCH_IND
      ,  PRICING_STATUS_CODE
      ,  START_DATE_ACTIVE
      ,  END_DATE_ACTIVE
      ,  PRICING_EFFECTIVE_DATE
      ,  START_DATE_ACTIVE_FIRST
      ,  END_DATE_ACTIVE_FIRST
      ,  LINE_TYPE_CODE
      ,  UNIQUE_KEY
      ,  PRICING_PHASE_ID
      ,  START_DATE_ACTIVE_H
      ,  END_DATE_ACTIVE_H
      ,  START_DATE_ACTIVE_SECOND
      ,  END_DATE_ACTIVE_SECOND
      ,  ACTIVE_DATE_FIRST_TYPE
      ,  ACTIVE_DATE_SECOND_TYPE
      ,  HEADER_LIMIT_EXISTS
      ,  DERIVED_QUALIFIER_FLAG  -- Added for TCA
      )
      VALUES
      (  p_LIST_HEADER_ID(i)
      ,  p_LIST_LINE_ID(i)
      ,  p_LINE_INDEX(i)
      ,  p_ATTRIBUTE_LEVEL(i)
      ,  p_ATTRIBUTE_TYPE(i)
      ,  p_CONTEXT(i)
      ,  p_ATTRIBUTE(i)
      ,  p_VALUE_FROM(i)
      ,  p_GROUPING_NO(i)
      ,  p_QUALIFIER_PRECEDENCE(i)
      ,  p_DATATYPE(i)
      ,  p_SETUP_VALUE_FROM(i)
      ,  p_SETUP_VALUE_TO(i)
      ,  p_PRICING_ATTR_FLAG(i)
      ,  p_OPERATOR_TYPE(i)
      ,  p_ASK_FOR_FLAG(i)
      ,  p_LIST_TYPE_CODE(i)
      ,  p_VALIDATED_FLAG(i)
      ,  p_APPLIED_FLAG(i)
      ,  p_QUALIFIER_TYPE(i)
      ,  p_QUALIFIER_GROUP_CNT(i)
      ,  p_OTHERS_GROUP_CNT(i)
      ,  p_HEADER_QUALS_EXIST_FLAG(i)
      ,  p_SEARCH_IND(i)
      ,  p_PRICING_STATUS_CODE(i)
      ,  p_START_DATE_ACTIVE(i)
      ,  p_END_DATE_ACTIVE(i)
      ,  p_PRICING_EFFECTIVE_DATE(i)
      ,  p_START_DATE_ACTIVE_FIR(i)
      ,  p_END_DATE_ACTIVE_FIR(i)
      ,  p_LINE_TYPE_CODE(i)
      ,  p_UNIQUE_KEY(i)
      ,  p_PRICING_PHASE_ID(i)
      ,  p_START_DATE_ACTIVE_H(i)
      ,  p_END_DATE_ACTIVE_H(i)
      ,  p_START_DATE_ACTIVE_SEC(i)
      ,  p_END_DATE_ACTIVE_SEC(i)
      ,  p_ACTIVE_DATE_FIR_TYPE(i)
      ,  p_ACTIVE_DATE_SEC_TYPE(i)
      ,  p_HEADER_LIMIT_EXISTS(i)
      ,  p_DERIVED_QUALIFIER_FLAG(i));  -- Added for TCA
EXCEPTION
  WHEN OTHERS THEN
  x_status_code := FND_API.G_RET_STS_ERROR;
  x_status_text :=l_routine||' '||SQLERRM;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug(l_routine||' '||SQLERRM);
  END IF;
END;

/*+--------------------------------------------------------------------
  |Mini_Cache_Qualifiers
  |To get qualifiers for matched headers with search_ind=2
  +--------------------------------------------------------------------
*/

PROCEDURE Mini_Cache_Qualifiers(  p_list_header_id IN NUMBER
                                , p_list_line_id IN NUMBER
                                , p_grouping_no  IN NUMBER
                                , p_pricing_phase_id IN NUMBER
                                , x_status_code  OUT NOCOPY VARCHAR2
                                , x_status_text  OUT NOCOPY VARCHAR2)      AS

l_routine VARCHAR2(240):= 'Routine:QP_PREQ_GRP.Mini_Cache_Qualifiers';

/*
INDX,QP_PREQ_GRP.mini_cache_qualifiers.l_mini_outer_qual_cur,QP_QUALIFIERS_N1,LIST_HEADER_ID,1
INDX,QP_PREQ_GRP.mini_cache_qualifiers.l_mini_outer_qual_cur,QP_QUALIFIERS_N1,LIST_LINE_ID,2
INDX,QP_PREQ_GRP.mini_cache_qualifiers.l_mini_outer_qual_cur,QP_QUALIFIERS_N1,QUALIFIER_GROUPING_NO,3
INDX,QP_PREQ_GRP.mini_cache_qualifiers.l_mini_outer_qual_cur,QP_QUALIFIERS_N1,COMPARISON_OPERATOR_CODE,4
INDX,QP_PREQ_GRP.mini_cache_qualifiers.l_mini_outer_qual_cur,QP_QUALIFIERS_N1,SEARCH_IND,5
INDX,QP_PREQ_GRP.mini_cache_qualifiers.l_mini_outer_qual_cur,QP_QUALIFIERS_N1,ACTIVE_FLAG,6
INDX,QP_PREQ_GRP.mini_cache_qualifiers.l_mini_outer_qual_cur,QP_QUALIFIERS_N1,QUALIFIER_GROUP_CNT,7

INDX,QP_PREQ_GRP.mini_cache_qualifiers.l_mini_outer_qual_cur,qp_npreq_line_attrs_tmp_N2,PRICING_STATUS_CODE,1
INDX,QP_PREQ_GRP.mini_cache_qualifiers.l_mini_outer_qual_cur,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.mini_cache_qualifiers.l_mini_outer_qual_cur,qp_npreq_line_attrs_tmp_N2,CONTEXT,3
INDX,QP_PREQ_GRP.mini_cache_qualifiers.l_mini_outer_qual_cur,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE,4
INDX,QP_PREQ_GRP.mini_cache_qualifiers.l_mini_outer_qual_cur,qp_npreq_line_attrs_tmp_N2,LINE_INDEX,5
INDX,QP_PREQ_GRP.mini_cache_qualifiers.l_mini_outer_qual_cur,qp_npreq_line_attrs_tmp_N2,VALUE_FROM,6
INDX,QP_PREQ_GRP.mini_cache_qualifiers.l_mini_outer_qual_cur,qp_npreq_line_attrs_tmp_N2,DISTINCT_QUALIFIER_FLAG,7

INDX,QP_PREQ_GRP.mini_cache_qualifiers.l_mini_outer_qual_cur,QP_LIST_HEADERS_B_N2,LIST_HEADER_ID,1
*/
-- Changed the cursor l_outer_qual_cur for bug#3002632
--Added index hints for bug#7480862
CURSOR l_MINI_OUTER_QUAL_CUR IS
-- Qualifier Only
select /*+ ORDERED NO_EXPAND USE_NL(qpq qplatq qph)  index (qplatq,QP_PREQ_LINE_ATTRS_TMP_N6)
       index(qpq qp_qualifiers_n1) index(qph qp_list_headers_b_n7) l_mini_outer_qual_cur_mod */
       qpq.list_header_id,
       qpq.list_line_id list_line_id,
       qpq.qualifier_group_cnt,
       qpq.others_group_cnt,
       qpq.header_quals_exist_flag,
       qpq.search_ind,
       G_NO validated_flag,
       G_NO applied_flag,
       G_LINE_LEVEL attribute_level,
       G_QUALIFIER_TYPE attribute_type,
       qplatq.context          ,
       qplatq.attribute        ,
       qplatq.value_from       ,
       qpq.qualifier_grouping_no qualifier_grouping_no ,
       qpq.qualifier_precedence  ,
       qpq.qualifier_datatype,
       qpq.qualifier_attr_value    ,
       qpq.qualifier_attr_value_to ,
       qpq.start_date_active,
       qpq.end_date_active,
       G_NO pricing_attr_flag,
       qpq.comparison_operator_code ,
       qph.list_type_code,
       qph.ask_for_flag,
       qplatq.pricing_status_code,
       'OHQ1' ,
        NULL line_index,
        NULL pricing_effective_date,
        qph.start_date_active_first start_date_active_first,
        qph.end_date_active_first   end_date_active_first,
        NULL line_type_code,
        p_pricing_phase_id pricing_phase_id,
        qpq.LIST_HEADER_ID || '-' || qpq.LIST_LINE_ID || '-' || qpq.QUALIFIER_GROUPING_NO UNIQUE_KEY,
        qph.start_date_active start_date_active_h,
        qph.end_date_active end_date_active_h,
        qph.start_date_active_second start_date_active_second,
        qph.end_date_active_second end_date_active_second,
        qph.active_date_first_type,
        qph.active_date_second_type,
        qph.limit_exists_flag,
        qplatq.derived_qualifier_flag   -- Added for TCA
from
        (select distinct list_header_id,list_line_id,qualifier_grouping_no
         from qp_preq_qual_tmp
         where pricing_status_code = G_STATUS_UNCHANGED
         and   pricing_phase_id = p_pricing_phase_id) qptq,
        qp_qualifiers qpq ,
        qp_npreq_line_attrs_tmp qplatq,
        qp_list_headers_b qph,
	qp_price_req_sources_v qprs
where
        qpq.list_header_id = qptq.list_header_id
and     qpq.list_line_id = qptq.list_line_id
and     qpq.qualifier_grouping_no = qptq.qualifier_grouping_no
and     qpq.qualifier_grouping_no <> -1
and     qpq.qualifier_context      = qplatq.context
and     qpq.qualifier_attribute    = qplatq.attribute
and     qpq.qualifier_attr_value = qplatq.value_from
and     qpq.comparison_operator_code = '='
and     qpq.search_ind =  2
and     qpq.qualifier_group_cnt > 1
and     ((qph.currency_code IS NOT NULL AND qph.currency_code = G_CURRENCY_CODE)
         OR
         qph.currency_code IS NULL) -- optional currency
-- bug 2799120
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
--Begin Bug# 7833575
/*and    ((G_MIN_PRICING_DATE between nvl(qph.start_date_active , G_MIN_PRICING_DATE)
                                         and nvl(qph.end_date_active,G_MIN_PRICING_DATE)
or      G_MAX_PRICING_DATE between nvl(qph.start_date_active , G_MAX_PRICING_DATE)
                                         and nvl(qph.end_date_active,G_MAX_PRICING_DATE)))
and    ((G_MIN_PRICING_DATE between nvl(qpq.start_date_active , G_MIN_PRICING_DATE)
                                         and nvl(qpq.end_date_active,G_MIN_PRICING_DATE)
or      G_MAX_PRICING_DATE between nvl(qpq.start_date_active , G_MAX_PRICING_DATE)
                                         and nvl(qpq.end_date_active,G_MAX_PRICING_DATE)))*/
AND (NVL(qph.end_date_active,G_MIN_PRICING_DATE) >= g_min_pricing_date
	AND NVL(qph.start_date_active, G_MAX_PRICING_DATE) <= g_max_pricing_date)
AND (NVL(qpq.end_date_active,G_MIN_PRICING_DATE) >= g_min_pricing_date
	AND NVL(qpq.start_date_active, G_MAX_PRICING_DATE) <= g_max_pricing_date)
--End Bug# 7833575
and    qph.list_type_code not in ('PRL','AGR')
and    qph.active_flag = G_YES
and    qpq.active_flag = G_YES
and    qpq.list_header_id = qph.list_header_id
and    qplatq.line_index > 0
and    qplatq.distinct_qualifier_flag = G_YES
and    qplatq.pricing_status_code = G_STATUS_UNCHANGED
and    qplatq.attribute_type = G_QUALIFIER_TYPE
and    qprs.request_type_code = G_REQUEST_TYPE_CODE
and    qph.source_system_code = qprs.source_system_code
and    ((nvl(qplatq.DERIVED_QUALIFIER_FLAG,'N') = 'N')
         OR (qplatq.DERIVED_QUALIFIER_FLAG = 'Y' AND qpq.QUALIFY_HIER_DESCENDENTS_FLAG = 'Y'))  -- Added for TCA
--and    qptq.pricing_status_code = G_STATUS_UNCHANGED
--and    qptq.pricing_phase_id = p_pricing_phase_id
union all
select /*+ ORDERED USE_NL(qpq qplatq qph)  index (qplatq,QP_PREQ_LINE_ATTRS_TMP_N6) index(qpq qp_qualifiers_n1) index(qph qp_list_headers_b_n7) l_mini_o
uter_qual_cur_mod */
       qpq.list_header_id,
       qpq.list_line_id list_line_id,
       qpq.qualifier_group_cnt,
       qpq.others_group_cnt,
       qpq.header_quals_exist_flag,
       qpq.search_ind,
       G_NO validated_flag,
       G_NO applied_flag,
       G_LINE_LEVEL attribute_level,
       G_QUALIFIER_TYPE attribute_type,
       qplatq.context          ,
       qplatq.attribute        ,
       qplatq.value_from       ,
       qpq.qualifier_grouping_no qualifier_grouping_no ,
       qpq.qualifier_precedence  ,
       qpq.qualifier_datatype,
       qpq.qualifier_attr_value    ,
       qpq.qualifier_attr_value_to ,
       qpq.start_date_active,
       qpq.end_date_active,
       G_NO pricing_attr_flag,
       qpq.comparison_operator_code ,
       qph.list_type_code,
       qph.ask_for_flag,
       qplatq.pricing_status_code,
       'OHQ1' ,
        NULL line_index,
        NULL pricing_effective_date,
        qph.start_date_active_first start_date_active_first,
        qph.end_date_active_first   end_date_active_first,
        NULL line_type_code,
        p_pricing_phase_id pricing_phase_id,
        qpq.LIST_HEADER_ID || '-' || qpq.LIST_LINE_ID || '-' || qpq.QUALIFIER_GROUPING_NO UNIQUE_KEY,
        qph.start_date_active start_date_active_h,
        qph.end_date_active end_date_active_h,
        qph.start_date_active_second start_date_active_second,
        qph.end_date_active_second end_date_active_second,
        qph.active_date_first_type,
        qph.active_date_second_type,
        qph.limit_exists_flag,
        qplatq.derived_qualifier_flag   -- Added for TCA
from
        (select distinct list_header_id,list_line_id
         from qp_preq_qual_tmp
         where pricing_status_code = G_STATUS_UNCHANGED
         and   pricing_phase_id = p_pricing_phase_id) qptq,
        qp_qualifiers qpq ,
        qp_npreq_line_attrs_tmp qplatq,
        qp_list_headers_b qph,
	qp_price_req_sources_v qprs
where
        qpq.list_header_id = qptq.list_header_id
and     qpq.list_line_id = qptq.list_line_id
and     qpq.qualifier_grouping_no = -1
and     qpq.qualifier_context      = qplatq.context
and     qpq.qualifier_attribute    = qplatq.attribute
and     qpq.qualifier_attr_value = qplatq.value_from
and     qpq.comparison_operator_code = '='
and     qpq.search_ind =  2
and     ((qph.currency_code IS NOT NULL AND qph.currency_code = G_CURRENCY_CODE)
         OR
         qph.currency_code IS NULL) -- optional currency
-- bug 2799120
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
--Begin Bug# 7833575
/*and    ((G_MIN_PRICING_DATE between nvl(qph.start_date_active , G_MIN_PRICING_DATE)
                                         and nvl(qph.end_date_active,G_MIN_PRICING_DATE)
or      G_MAX_PRICING_DATE between nvl(qph.start_date_active , G_MAX_PRICING_DATE)
                                         and nvl(qph.end_date_active,G_MAX_PRICING_DATE)))
and    ((G_MIN_PRICING_DATE between nvl(qpq.start_date_active , G_MIN_PRICING_DATE)
                                         and nvl(qpq.end_date_active,G_MIN_PRICING_DATE)
or      G_MAX_PRICING_DATE between nvl(qpq.start_date_active , G_MAX_PRICING_DATE)
                                         and nvl(qpq.end_date_active,G_MAX_PRICING_DATE)))*/
AND (NVL(qph.end_date_active,G_MIN_PRICING_DATE) >= g_min_pricing_date
	AND NVL(qph.start_date_active, G_MAX_PRICING_DATE) <= g_max_pricing_date)
AND (NVL(qpq.end_date_active,G_MIN_PRICING_DATE) >= g_min_pricing_date
	AND NVL(qpq.start_date_active, G_MAX_PRICING_DATE) <= g_max_pricing_date)
--End Bug# 7833575

and    qph.list_type_code not in ('PRL','AGR')
and    qph.active_flag = G_YES
and    qpq.active_flag = G_YES
and    qpq.list_header_id = qph.list_header_id
and    qplatq.line_index > 0
and    qplatq.distinct_qualifier_flag = G_YES
and    qplatq.pricing_status_code = G_STATUS_UNCHANGED
and    qplatq.attribute_type = G_QUALIFIER_TYPE
and    qprs.request_type_code = G_REQUEST_TYPE_CODE
and    qph.source_system_code = qprs.source_system_code
and    ((nvl(qplatq.DERIVED_QUALIFIER_FLAG,'N') = 'N')
         OR (qplatq.DERIVED_QUALIFIER_FLAG = 'Y' AND qpq.QUALIFY_HIER_DESCENDENTS_FLAG = 'Y'))  -- Added for TCA
--and    qptq.pricing_status_code = G_STATUS_UNCHANGED
--and    qptq.pricing_phase_id = p_pricing_phase_id
union  all
select /*+ ORDERED USE_NL(qpq qplatq qph) index (qplatq,QP_PREQ_LINE_ATTRS_TMP_N6) index(qpq qp_qualifiers_n1) index(qph qp_list_headers_b_n7) l_mini_outer_qual_cur_mod */
       qpq.list_header_id,
       qpq.list_line_id list_line_id,
       qpq.qualifier_group_cnt,
       qpq.others_group_cnt,
       qpq.header_quals_exist_flag,
       qpq.search_ind,
       G_NO validated_flag,
       G_NO applied_flag,
       G_LINE_LEVEL attribute_level,
       G_QUALIFIER_TYPE attribute_type,
       qplatq.context          ,
       qplatq.attribute        ,
       qplatq.value_from       ,
       qpq.qualifier_grouping_no qualifier_grouping_no ,
       qpq.qualifier_precedence  ,
       qpq.qualifier_datatype,
       qpq.qualifier_attr_value    ,
       qpq.qualifier_attr_value_to ,
       qpq.start_date_active,
       qpq.end_date_active,
       G_NO pricing_attr_flag,
       qpq.comparison_operator_code ,
       qph.list_type_code,
       qph.ask_for_flag,
       qplatq.pricing_status_code,
       'OHQ1' ,
        NULL line_index,
        NULL pricing_effective_date,
        qph.start_date_active_first start_date_active_first,
        qph.end_date_active_first   end_date_active_first,
        NULL line_type_code,
        p_pricing_phase_id pricing_phase_id,
        qpq.LIST_HEADER_ID || '-' || qpq.LIST_LINE_ID || '-' || qpq.QUALIFIER_GROUPING_NO UNIQUE_KEY,
        qph.start_date_active start_date_active_h,
        qph.end_date_active end_date_active_h,
        qph.start_date_active_second start_date_active_second,
        qph.end_date_active_second end_date_active_second,
        qph.active_date_first_type,
        qph.active_date_second_type,
        qph.limit_exists_flag,
        qplatq.derived_qualifier_flag   -- Added for TCA
from
        (select distinct list_header_id,list_line_id,qualifier_grouping_no
         from qp_preq_qual_tmp
         where pricing_status_code = G_STATUS_UNCHANGED
         and   pricing_phase_id = p_pricing_phase_id) qptq,
        qp_qualifiers qpq ,
        qp_npreq_line_attrs_tmp qplatq,
        qp_list_headers_b qph,
	qp_price_req_sources_v qprs
where
        qpq.list_header_id = qptq.list_header_id
and     qpq.list_line_id = qptq.list_line_id
and     qpq.qualifier_grouping_no = qptq.qualifier_grouping_no
and     qpq.qualifier_grouping_no <> -1
and     qpq.qualifier_context      = qplatq.context
and     qpq.qualifier_attribute    = qplatq.attribute
and     qpq.comparison_operator_code =  G_OPERATOR_BETWEEN
and     qpq.qualifier_datatype =  G_NUMERIC
and     qpq.search_ind =  2
and     qpq.qualifier_group_cnt > 1
and     qp_number.canonical_to_number(decode(qpq.qualifier_datatype,G_NUMERIC,qplatq.value_from,null))
between qpq.qual_attr_value_from_number and qpq.qual_attr_value_to_number
and     ((qph.currency_code IS NOT NULL AND qph.currency_code = G_CURRENCY_CODE)
         OR
         qph.currency_code IS NULL) -- optional currency
-- bug 2799120
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
--Begin Bug# 7833575
/*and    ((G_MIN_PRICING_DATE between nvl(qph.start_date_active , G_MIN_PRICING_DATE)
                                         and nvl(qph.end_date_active,G_MIN_PRICING_DATE)
or      G_MAX_PRICING_DATE between nvl(qph.start_date_active , G_MAX_PRICING_DATE)
                                         and nvl(qph.end_date_active,G_MAX_PRICING_DATE)))
and    ((G_MIN_PRICING_DATE between nvl(qpq.start_date_active , G_MIN_PRICING_DATE)
                                         and nvl(qpq.end_date_active,G_MIN_PRICING_DATE)
or      G_MAX_PRICING_DATE between nvl(qpq.start_date_active , G_MAX_PRICING_DATE)
                                         and nvl(qpq.end_date_active,G_MAX_PRICING_DATE)))*/
AND (NVL(qph.end_date_active,G_MIN_PRICING_DATE) >= g_min_pricing_date
	AND NVL(qph.start_date_active, G_MAX_PRICING_DATE) <= g_max_pricing_date)
AND (NVL(qpq.end_date_active,G_MIN_PRICING_DATE) >= g_min_pricing_date
	AND NVL(qpq.start_date_active, G_MAX_PRICING_DATE) <= g_max_pricing_date)
--End Bug# 7833575
and    qph.list_type_code not in ('PRL','AGR')
and     qph.active_flag = G_YES
and     qpq.active_flag = G_YES
and     qpq.list_header_id = qph.list_header_id
and     qplatq.line_index > 0
and     qplatq.distinct_qualifier_flag = G_YES
and     qplatq.pricing_status_code = G_STATUS_UNCHANGED
and     qplatq.attribute_type = G_QUALIFIER_TYPE
and    qprs.request_type_code = G_REQUEST_TYPE_CODE
and    qph.source_system_code = qprs.source_system_code
and    ((nvl(qplatq.DERIVED_QUALIFIER_FLAG,'N') = 'N')
         OR (qplatq.DERIVED_QUALIFIER_FLAG = 'Y' AND qpq.QUALIFY_HIER_DESCENDENTS_FLAG = 'Y'))  -- Added for TCA
--and    qptq.pricing_status_code = G_STATUS_UNCHANGED
--and    qptq.pricing_phase_id = p_pricing_phase_id
union all
select /*+ ORDERED USE_NL(qpq qplatq qph) index (qplatq,QP_PREQ_LINE_ATTRS_TMP_N6) index(qpq qp_qualifiers_n1) index(qph qp_list_headers_b_n7) l_mini_ou
ter_qual_cur_mod */
       qpq.list_header_id,
       qpq.list_line_id list_line_id,
       qpq.qualifier_group_cnt,
       qpq.others_group_cnt,
       qpq.header_quals_exist_flag,
       qpq.search_ind,
       G_NO validated_flag,
       G_NO applied_flag,
       G_LINE_LEVEL attribute_level,
       G_QUALIFIER_TYPE attribute_type,
       qplatq.context          ,
       qplatq.attribute        ,
       qplatq.value_from       ,
       qpq.qualifier_grouping_no qualifier_grouping_no ,
       qpq.qualifier_precedence  ,
       qpq.qualifier_datatype,
       qpq.qualifier_attr_value    ,
       qpq.qualifier_attr_value_to ,
       qpq.start_date_active,
       qpq.end_date_active,
       G_NO pricing_attr_flag,
       qpq.comparison_operator_code ,
       qph.list_type_code,
       qph.ask_for_flag,
       qplatq.pricing_status_code,
       'OHQ1' ,
        NULL line_index,
        NULL pricing_effective_date,
        qph.start_date_active_first start_date_active_first,
        qph.end_date_active_first   end_date_active_first,
        NULL line_type_code,
        p_pricing_phase_id pricing_phase_id,
        qpq.LIST_HEADER_ID || '-' || qpq.LIST_LINE_ID || '-' || qpq.QUALIFIER_GROUPING_NO UNIQUE_KEY,
        qph.start_date_active start_date_active_h,
        qph.end_date_active end_date_active_h,
        qph.start_date_active_second start_date_active_second,
        qph.end_date_active_second end_date_active_second,
        qph.active_date_first_type,
        qph.active_date_second_type,
        qph.limit_exists_flag,
        qplatq.derived_qualifier_flag  -- Added for TCA
from
        (select distinct list_header_id,list_line_id
         from qp_preq_qual_tmp
         where pricing_status_code = G_STATUS_UNCHANGED
         and   pricing_phase_id = p_pricing_phase_id) qptq,
        qp_qualifiers qpq ,
        qp_npreq_line_attrs_tmp qplatq,
        qp_list_headers_b qph,
	qp_price_req_sources_v qprs
where
        qpq.list_header_id = qptq.list_header_id
and     qpq.list_line_id = qptq.list_line_id
and     qpq.qualifier_grouping_no = -1
and     qpq.qualifier_context      = qplatq.context
and     qpq.qualifier_attribute    = qplatq.attribute
and     qpq.comparison_operator_code =  G_OPERATOR_BETWEEN
and     qpq.qualifier_datatype =  G_NUMERIC
and     qpq.search_ind =  2
and     qp_number.canonical_to_number(decode(qpq.qualifier_datatype,G_NUMERIC,qplatq.value_from,null))
between qpq.qual_attr_value_from_number and qpq.qual_attr_value_to_number
and     ((qph.currency_code IS NOT NULL AND qph.currency_code = G_CURRENCY_CODE)
         OR
         qph.currency_code IS NULL) -- optional currency
-- bug 2799120
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
--Begin Bug# 7833575
/*and    ((G_MIN_PRICING_DATE between nvl(qph.start_date_active , G_MIN_PRICING_DATE)
                                         and nvl(qph.end_date_active,G_MIN_PRICING_DATE)
or      G_MAX_PRICING_DATE between nvl(qph.start_date_active , G_MAX_PRICING_DATE)
                                         and nvl(qph.end_date_active,G_MAX_PRICING_DATE)))
and    ((G_MIN_PRICING_DATE between nvl(qpq.start_date_active , G_MIN_PRICING_DATE)
                                         and nvl(qpq.end_date_active,G_MIN_PRICING_DATE)
or      G_MAX_PRICING_DATE between nvl(qpq.start_date_active , G_MAX_PRICING_DATE)
                                         and nvl(qpq.end_date_active,G_MAX_PRICING_DATE)))*/
AND (NVL(qph.end_date_active,G_MIN_PRICING_DATE) >= g_min_pricing_date
	AND NVL(qph.start_date_active, G_MAX_PRICING_DATE) <= g_max_pricing_date)
AND (NVL(qpq.end_date_active,G_MIN_PRICING_DATE) >= g_min_pricing_date
	AND NVL(qpq.start_date_active, G_MAX_PRICING_DATE) <= g_max_pricing_date)
--End Bug# 7833575
and    qph.list_type_code not in ('PRL','AGR')
and     qph.active_flag = G_YES
and     qpq.active_flag = G_YES
and     qpq.list_header_id = qph.list_header_id
and     qplatq.line_index > 0
and     qplatq.distinct_qualifier_flag = G_YES
and     qplatq.pricing_status_code = G_STATUS_UNCHANGED
and     qplatq.attribute_type = G_QUALIFIER_TYPE
and    qprs.request_type_code = G_REQUEST_TYPE_CODE
and    qph.source_system_code = qprs.source_system_code
and    ((nvl(qplatq.DERIVED_QUALIFIER_FLAG,'N') = 'N')
         OR (qplatq.DERIVED_QUALIFIER_FLAG = 'Y' AND qpq.QUALIFY_HIER_DESCENDENTS_FLAG = 'Y'))  -- Added for TCA
--and    qptq.pricing_status_code = G_STATUS_UNCHANGED
--and    qptq.pricing_phase_id = p_pricing_phase_id
union all
select /*+ ORDERED USE_NL(qpq qplatq qph) index (qplatq,QP_PREQ_LINE_ATTRS_TMP_N6) index(qpq qp_qualifiers_n1) index(qph qp_list_headers_b_n7) l_mini_outer_qual_cur_mod */
       qpq.list_header_id,
       qpq.list_line_id list_line_id,
       qpq.qualifier_group_cnt,
       qpq.others_group_cnt,
       qpq.header_quals_exist_flag,
       qpq.search_ind,
       G_NO validated_flag,
       G_NO applied_flag,
       G_LINE_LEVEL attribute_level,
       G_QUALIFIER_TYPE attribute_type,
       qplatq.context          ,
       qplatq.attribute        ,
       qplatq.value_from       ,
       qpq.qualifier_grouping_no qualifier_grouping_no ,
       qpq.qualifier_precedence  ,
       qpq.qualifier_datatype,
       qpq.qualifier_attr_value    ,
       qpq.qualifier_attr_value_to ,
       qpq.start_date_active,
       qpq.end_date_active,
       G_NO pricing_attr_flag,
       qpq.comparison_operator_code ,
       qph.list_type_code,
       qph.ask_for_flag,
       qplatq.pricing_status_code,
       'OHQ1' ,
        NULL line_index,
        NULL pricing_effective_date,
        qph.start_date_active_first start_date_active_first,
        qph.end_date_active_first   end_date_active_first,
        NULL line_type_code,
        p_pricing_phase_id pricing_phase_id,
        qpq.LIST_HEADER_ID || '-' || qpq.LIST_LINE_ID || '-' || qpq.QUALIFIER_GROUPING_NO UNIQUE_KEY,
        qph.start_date_active start_date_active_h,
        qph.end_date_active end_date_active_h,
        qph.start_date_active_second start_date_active_second,
        qph.end_date_active_second end_date_active_second,
        qph.active_date_first_type,
        qph.active_date_second_type,
        qph.limit_exists_flag,
        qplatq.derived_qualifier_flag  -- Added for TCA
from
        (select distinct list_header_id,list_line_id,qualifier_grouping_no
         from qp_preq_qual_tmp
         where pricing_status_code = G_STATUS_UNCHANGED
         and   pricing_phase_id = p_pricing_phase_id) qptq,
        qp_qualifiers qpq ,
        qp_npreq_line_attrs_tmp qplatq,
        qp_list_headers_b qph,
	qp_price_req_sources_v qprs
where
        qpq.list_header_id = qptq.list_header_id
and     qpq.list_line_id = qptq.list_line_id
and     qpq.qualifier_grouping_no = qptq.qualifier_grouping_no
and     qpq.qualifier_grouping_no <> -1
and     qpq.qualifier_context      = qplatq.context
and     qpq.qualifier_attribute    = qplatq.attribute
and     qpq.comparison_operator_code = G_OPERATOR_BETWEEN
and     qpq.search_ind =  2
and     qpq.qualifier_group_cnt > 1
and     qpq.qualifier_datatype IN (G_VARCHAR,G_DATE_X,G_DATE_Y)
--and     decode(qpq.qualifier_datatype,G_VARCHAR,qplatq.value_from,G_DATE_X,qplatq.value_from,
-- G_DATE_Y,qplatq.value_from,null)
and qplatq.value_from between qpq.qualifier_attr_value and qpq.qualifier_attr_value_to
and     ((qph.currency_code IS NOT NULL AND qph.currency_code = G_CURRENCY_CODE)
         OR
         qph.currency_code IS NULL) -- optional currency
-- bug 2799120
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
and     qph.active_flag = G_YES
--Begin Bug# 7833575
/*and    ((G_MIN_PRICING_DATE between nvl(qph.start_date_active , G_MIN_PRICING_DATE)
                                         and nvl(qph.end_date_active,G_MIN_PRICING_DATE)
or      G_MAX_PRICING_DATE between nvl(qph.start_date_active , G_MAX_PRICING_DATE)
                                         and nvl(qph.end_date_active,G_MAX_PRICING_DATE)))
and    ((G_MIN_PRICING_DATE between nvl(qpq.start_date_active , G_MIN_PRICING_DATE)
                                         and nvl(qpq.end_date_active,G_MIN_PRICING_DATE)
or      G_MAX_PRICING_DATE between nvl(qpq.start_date_active , G_MAX_PRICING_DATE)
                                         and nvl(qpq.end_date_active,G_MAX_PRICING_DATE)))*/
AND (NVL(qph.end_date_active,G_MIN_PRICING_DATE) >= g_min_pricing_date
	AND NVL(qph.start_date_active, G_MAX_PRICING_DATE) <= g_max_pricing_date)
AND (NVL(qpq.end_date_active,G_MIN_PRICING_DATE) >= g_min_pricing_date
	AND NVL(qpq.start_date_active, G_MAX_PRICING_DATE) <= g_max_pricing_date)
--End Bug# 7833575
and    qph.list_type_code not in ('PRL','AGR')
and      qpq.active_flag = G_YES
and    qplatq.line_index > 0
and      qplatq.distinct_qualifier_flag = G_YES
and    qpq.list_header_id = qph.list_header_id
and      qplatq.pricing_status_code = G_STATUS_UNCHANGED
and      qplatq.attribute_type = G_QUALIFIER_TYPE
and    qprs.request_type_code = G_REQUEST_TYPE_CODE
and    qph.source_system_code = qprs.source_system_code
and    ((nvl(qplatq.DERIVED_QUALIFIER_FLAG,'N') = 'N')
         OR (qplatq.DERIVED_QUALIFIER_FLAG = 'Y' AND qpq.QUALIFY_HIER_DESCENDENTS_FLAG = 'Y'))  -- Added for TCA
--and    qptq.pricing_status_code = G_STATUS_UNCHANGED
--and    qptq.pricing_phase_id = p_pricing_phase_id
union all
select /*+ ORDERED USE_NL(qpq qplh qph)  index (qplatq,QP_PREQ_LINE_ATTRS_TMP_N6) index(qpq qp_qualifiers_n1) index(qph qp_list_headers_b_n7) l_mini_out
er_qual_cur_mod */
       qpq.list_header_id,
       qpq.list_line_id list_line_id,
       qpq.qualifier_group_cnt,
       qpq.others_group_cnt,
       qpq.header_quals_exist_flag,
       qpq.search_ind,
       G_NO validated_flag,
       G_NO applied_flag,
       G_LINE_LEVEL attribute_level,
       G_QUALIFIER_TYPE attribute_type,
       qplatq.context          ,
       qplatq.attribute        ,
       qplatq.value_from       ,
       qpq.qualifier_grouping_no qualifier_grouping_no ,
       qpq.qualifier_precedence  ,
       qpq.qualifier_datatype,
       qpq.qualifier_attr_value    ,
       qpq.qualifier_attr_value_to ,
       qpq.start_date_active,
       qpq.end_date_active,
       G_NO pricing_attr_flag,
       qpq.comparison_operator_code ,
       qph.list_type_code,
       qph.ask_for_flag,
       qplatq.pricing_status_code,
       'OHQ1' ,
        NULL line_index,
        NULL pricing_effective_date,
        qph.start_date_active_first start_date_active_first,
        qph.end_date_active_first   end_date_active_first,
        NULL line_type_code,
        p_pricing_phase_id pricing_phase_id,
        qpq.LIST_HEADER_ID || '-' || qpq.LIST_LINE_ID || '-' || qpq.QUALIFIER_GROUPING_NO UNIQUE_KEY,
        qph.start_date_active start_date_active_h,
        qph.end_date_active end_date_active_h,
        qph.start_date_active_second start_date_active_second,
        qph.end_date_active_second end_date_active_second,
        qph.active_date_first_type,
        qph.active_date_second_type,
        qph.limit_exists_flag,
        qplatq.derived_qualifier_flag    -- Added for TCA
from
        (select distinct list_header_id,list_line_id
         from qp_preq_qual_tmp
         where pricing_status_code = G_STATUS_UNCHANGED
         and   pricing_phase_id = p_pricing_phase_id) qptq,
        qp_qualifiers qpq ,
        qp_npreq_line_attrs_tmp qplatq,
        qp_list_headers_b qph,
	qp_price_req_sources_v qprs
where
        qpq.list_header_id = qptq.list_header_id
and     qpq.list_line_id = qptq.list_line_id
and     qpq.qualifier_grouping_no = -1
and     qpq.qualifier_context      = qplatq.context
and     qpq.qualifier_attribute    = qplatq.attribute
and     qpq.comparison_operator_code = G_OPERATOR_BETWEEN
and     qpq.search_ind =  2
and     qpq.qualifier_datatype IN (G_VARCHAR,G_DATE_X,G_DATE_Y)
--and     decode(qpq.qualifier_datatype,G_VARCHAR,qplatq.value_from,G_DATE_X,qplatq.value_from,
-- G_DATE_Y,qplatq.value_from,null)
and qplatq.value_from between qpq.qualifier_attr_value and qpq.qualifier_attr_value_to
and     ((qph.currency_code IS NOT NULL AND qph.currency_code = G_CURRENCY_CODE)
         OR
         qph.currency_code IS NULL) -- optional currency
-- bug 2799120
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
and     qph.active_flag = G_YES
--Begin Bug# 7833575
/*and    ((G_MIN_PRICING_DATE between nvl(qph.start_date_active , G_MIN_PRICING_DATE)
                                         and nvl(qph.end_date_active,G_MIN_PRICING_DATE)
or      G_MAX_PRICING_DATE between nvl(qph.start_date_active , G_MAX_PRICING_DATE)
                                         and nvl(qph.end_date_active,G_MAX_PRICING_DATE)))
and    ((G_MIN_PRICING_DATE between nvl(qpq.start_date_active , G_MIN_PRICING_DATE)
                                         and nvl(qpq.end_date_active,G_MIN_PRICING_DATE)
or      G_MAX_PRICING_DATE between nvl(qpq.start_date_active , G_MAX_PRICING_DATE)
                                         and nvl(qpq.end_date_active,G_MAX_PRICING_DATE)))*/
AND (NVL(qph.end_date_active,G_MIN_PRICING_DATE) >= g_min_pricing_date
	AND NVL(qph.start_date_active, G_MAX_PRICING_DATE) <= g_max_pricing_date)
AND (NVL(qpq.end_date_active,G_MIN_PRICING_DATE) >= g_min_pricing_date
	AND NVL(qpq.start_date_active, G_MAX_PRICING_DATE) <= g_max_pricing_date)
--End Bug# 7833575
and    qph.list_type_code not in ('PRL','AGR')
and      qpq.active_flag = G_YES
and    qplatq.line_index > 0
and      qplatq.distinct_qualifier_flag = G_YES
and    qpq.list_header_id = qph.list_header_id
and      qplatq.pricing_status_code = G_STATUS_UNCHANGED
and      qplatq.attribute_type = G_QUALIFIER_TYPE
and    qprs.request_type_code = G_REQUEST_TYPE_CODE
and    qph.source_system_code = qprs.source_system_code
and    ((nvl(qplatq.DERIVED_QUALIFIER_FLAG,'N') = 'N')
         OR (qplatq.DERIVED_QUALIFIER_FLAG = 'Y' AND qpq.QUALIFY_HIER_DESCENDENTS_FLAG = 'Y'))  -- Added for TCA
--and    qptq.pricing_status_code = G_STATUS_UNCHANGED
--and    qptq.pricing_phase_id = p_pricing_phase_id
union all
select /*+ ORDERED USE_NL(qpq qplh qph)  index (qplatq,QP_PREQ_LINE_ATTRS_TMP_N7)
       index(qpq qp_qualifiers_n1) index(qph qp_list_headers_b_n7) l_mini_outer_qual_cur_mod */
       qpq.list_header_id,
       qpq.list_line_id list_line_id,
       qpq.qualifier_group_cnt,
       qpq.others_group_cnt,
       qpq.header_quals_exist_flag,
       qpq.search_ind,
       G_NO validated_flag,
       G_NO applied_flag,
       G_LINE_LEVEL attribute_level,
       G_QUALIFIER_TYPE attribute_type,
       qplatq.context          ,
       qplatq.attribute        ,
       qplatq.value_from       ,
       qpq.qualifier_grouping_no qualifier_grouping_no ,
       qpq.qualifier_precedence  ,
       qpq.qualifier_datatype,
       qpq.qualifier_attr_value    ,
       qpq.qualifier_attr_value_to ,
       qpq.start_date_active,
       qpq.end_date_active,
       G_NO pricing_attr_flag,
       qpq.comparison_operator_code ,
       qph.list_type_code,
       qph.ask_for_flag,
       qplatq.pricing_status_code,
       'OHQ1' ,
        NULL line_index,
        NULL pricing_effective_date,
        qph.start_date_active_first start_date_active_first,
        qph.end_date_active_first   end_date_active_first,
        NULL line_type_code,
        p_pricing_phase_id pricing_phase_id,
        qpq.LIST_HEADER_ID || '-' || qpq.LIST_LINE_ID || '-' || qpq.QUALIFIER_GROUPING_NO UNIQUE_KEY,
        qph.start_date_active start_date_active_h,
        qph.end_date_active end_date_active_h,
        qph.start_date_active_second start_date_active_second,
        qph.end_date_active_second end_date_active_second,
        qph.active_date_first_type,
        qph.active_date_second_type,
        qph.limit_exists_flag,
        qplatq.derived_qualifier_flag    -- Added for TCA
from
        (select distinct list_header_id,list_line_id,qualifier_grouping_no
         from qp_preq_qual_tmp
         where pricing_status_code = G_STATUS_UNCHANGED
         and   pricing_phase_id = p_pricing_phase_id) qptq,
        qp_qualifiers qpq ,
        qp_npreq_line_attrs_tmp qplatq,
        qp_list_headers_b qph,
	qp_price_req_sources_v qprs
where
        qpq.list_header_id = qptq.list_header_id
and     qpq.list_line_id = qptq.list_line_id
and     qpq.qualifier_grouping_no = qptq.qualifier_grouping_no
and     qpq.qualifier_grouping_no <> -1
and     qpq.qualifier_context      = qplatq.context
and     qpq.qualifier_attribute    = qplatq.attribute
and     qpq.comparison_operator_code = 'NOT ='
and     qpq.qualifier_attr_value <> qplatq.value_from
and     qpq.search_ind =  2
and     qpq.qualifier_group_cnt > 1
and     ((qph.currency_code IS NOT NULL AND qph.currency_code = G_CURRENCY_CODE)
         OR
         qph.currency_code IS NULL) -- optional currency
-- bug 2799120
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
--Begin Bug# 7833575
/*and    ((G_MIN_PRICING_DATE between nvl(qph.start_date_active , G_MIN_PRICING_DATE)
                                         and nvl(qph.end_date_active,G_MIN_PRICING_DATE)
or      G_MAX_PRICING_DATE between nvl(qph.start_date_active , G_MAX_PRICING_DATE)
                                         and nvl(qph.end_date_active,G_MAX_PRICING_DATE)))
and    ((G_MIN_PRICING_DATE between nvl(qpq.start_date_active , G_MIN_PRICING_DATE)
                                         and nvl(qpq.end_date_active,G_MIN_PRICING_DATE)
or      G_MAX_PRICING_DATE between nvl(qpq.start_date_active , G_MAX_PRICING_DATE)
                                         and nvl(qpq.end_date_active,G_MAX_PRICING_DATE)))*/
AND (NVL(qph.end_date_active,G_MIN_PRICING_DATE) >= g_min_pricing_date
	AND NVL(qph.start_date_active, G_MAX_PRICING_DATE) <= g_max_pricing_date)
AND (NVL(qpq.end_date_active,G_MIN_PRICING_DATE) >= g_min_pricing_date
	AND NVL(qpq.start_date_active, G_MAX_PRICING_DATE) <= g_max_pricing_date)
--End Bug# 7833575
and    qph.list_type_code not in ('PRL','AGR')
and     qph.active_flag = G_YES
and     qpq.active_flag = G_YES
and     qpq.list_header_id = qph.list_header_id
and    qplatq.line_index > 0
and     qplatq.distinct_qualifier_flag = G_YES
and     qplatq.pricing_status_code = G_STATUS_UNCHANGED
and     qplatq.attribute_type = G_QUALIFIER_TYPE
and    qprs.request_type_code = G_REQUEST_TYPE_CODE
and    qph.source_system_code = qprs.source_system_code
and    ((nvl(qplatq.DERIVED_QUALIFIER_FLAG,'N') = 'N')
         OR (qplatq.DERIVED_QUALIFIER_FLAG = 'Y' AND qpq.QUALIFY_HIER_DESCENDENTS_FLAG = 'Y'))  -- Added for TCA
--and    qptq.pricing_status_code = G_STATUS_UNCHANGED
--and    qptq.pricing_phase_id = p_pricing_phase_id
union all
select /*+ ORDERED USE_NL(qpq qplh qph)  index (qplatq,QP_PREQ_LINE_ATTRS_TMP_N7)
       index(qpq qp_qualifiers_n1) index(qph qp_list_headers_b_n7) l_mini_outer_qual_cur_mod */
       qpq.list_header_id,
       qpq.list_line_id list_line_id,
       qpq.qualifier_group_cnt,
       qpq.others_group_cnt,
       qpq.header_quals_exist_flag,
       qpq.search_ind,
       G_NO validated_flag,
       G_NO applied_flag,
       G_LINE_LEVEL attribute_level,
       G_QUALIFIER_TYPE attribute_type,
       qplatq.context          ,
       qplatq.attribute        ,
       qplatq.value_from       ,
       qpq.qualifier_grouping_no qualifier_grouping_no ,
       qpq.qualifier_precedence  ,
       qpq.qualifier_datatype,
       qpq.qualifier_attr_value    ,
       qpq.qualifier_attr_value_to ,
       qpq.start_date_active,
       qpq.end_date_active,
       G_NO pricing_attr_flag,
       qpq.comparison_operator_code ,
       qph.list_type_code,
       qph.ask_for_flag,
       qplatq.pricing_status_code,
       'OHQ1' ,
        NULL line_index,
        NULL pricing_effective_date,
        qph.start_date_active_first start_date_active_first,
        qph.end_date_active_first   end_date_active_first,
        NULL line_type_code,
        p_pricing_phase_id pricing_phase_id,
        qpq.LIST_HEADER_ID || '-' || qpq.LIST_LINE_ID || '-' || qpq.QUALIFIER_GROUPING_NO UNIQUE_KEY,
        qph.start_date_active start_date_active_h,
        qph.end_date_active end_date_active_h,
        qph.start_date_active_second start_date_active_second,
        qph.end_date_active_second end_date_active_second,
        qph.active_date_first_type,
        qph.active_date_second_type,
        qph.limit_exists_flag,
        qplatq.derived_qualifier_flag   -- Added for TCA
from
        (select distinct list_header_id,list_line_id
         from qp_preq_qual_tmp
         where pricing_status_code = G_STATUS_UNCHANGED
         and   pricing_phase_id = p_pricing_phase_id) qptq,
        qp_qualifiers qpq ,
        qp_npreq_line_attrs_tmp qplatq,
        qp_list_headers_b qph,
	qp_price_req_sources_v qprs
where
        qpq.list_header_id = qptq.list_header_id
and     qpq.list_line_id = qptq.list_line_id
and     qpq.qualifier_grouping_no = -1
and     qpq.qualifier_context      = qplatq.context
and     qpq.qualifier_attribute    = qplatq.attribute
and     qpq.comparison_operator_code = 'NOT ='
and     qpq.qualifier_attr_value <> qplatq.value_from
and     qpq.search_ind =  2
and     ((qph.currency_code IS NOT NULL AND qph.currency_code = G_CURRENCY_CODE)
         OR
         qph.currency_code IS NULL) -- optional currency
-- bug 2799120
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
--Begin Bug# 7833575
/*and    ((G_MIN_PRICING_DATE between nvl(qph.start_date_active , G_MIN_PRICING_DATE)
                                         and nvl(qph.end_date_active,G_MIN_PRICING_DATE)
or      G_MAX_PRICING_DATE between nvl(qph.start_date_active , G_MAX_PRICING_DATE)
                                         and nvl(qph.end_date_active,G_MAX_PRICING_DATE)))
and    ((G_MIN_PRICING_DATE between nvl(qpq.start_date_active , G_MIN_PRICING_DATE)
                                         and nvl(qpq.end_date_active,G_MIN_PRICING_DATE)
or      G_MAX_PRICING_DATE between nvl(qpq.start_date_active , G_MAX_PRICING_DATE)
                                         and nvl(qpq.end_date_active,G_MAX_PRICING_DATE)))*/
AND (NVL(qph.end_date_active,G_MIN_PRICING_DATE) >= g_min_pricing_date
	AND NVL(qph.start_date_active, G_MAX_PRICING_DATE) <= g_max_pricing_date)
AND (NVL(qpq.end_date_active,G_MIN_PRICING_DATE) >= g_min_pricing_date
	AND NVL(qpq.start_date_active, G_MAX_PRICING_DATE) <= g_max_pricing_date)
--End Bug# 7833575
and    qph.list_type_code not in ('PRL','AGR')
and     qph.active_flag = G_YES
and     qpq.active_flag = G_YES
and     qpq.list_header_id = qph.list_header_id
and    qplatq.line_index > 0
and     qplatq.distinct_qualifier_flag = G_YES
and     qplatq.pricing_status_code = G_STATUS_UNCHANGED
and     qplatq.attribute_type = G_QUALIFIER_TYPE
and    qprs.request_type_code = G_REQUEST_TYPE_CODE
and    qph.source_system_code = qprs.source_system_code
and    ((nvl(qplatq.DERIVED_QUALIFIER_FLAG,'N') = 'N')
         OR (qplatq.DERIVED_QUALIFIER_FLAG = 'Y' AND qpq.QUALIFY_HIER_DESCENDENTS_FLAG = 'Y'));  -- Added for TCA

--and    qptq.pricing_status_code = G_STATUS_UNCHANGED
--and    qptq.pricing_phase_id = p_pricing_phase_id;

nROWS CONSTANT NUMBER := 1000;

l_status_code VARCHAR2(30);
l_status_text VARCHAR2(240);
E_ROUTINE_ERRORS EXCEPTION;

BEGIN

 --Delete from QP_PREQ_QUAL_TMP;

 --G_QUALIFIER_TEMP := G_QUALIFIER_TEMP_EMPTY;

 OPEN l_mini_outer_qual_cur;

 LOOP
  G_LIST_HEADER_ID_TBL_Q.delete;
  G_LIST_LINE_ID_TBL_Q.delete;
  G_VALIDATED_FLAG_TBL_Q.delete;
  G_APPLIED_FLAG_TBL_Q.delete;
  G_ATTRIBUTE_LEVEL_TBL_Q.delete;
  G_ATTRIBUTE_TYPE_TBL_Q.delete;
  G_CONTEXT_TBL_Q.delete;
  G_ATTRIBUTE_TBL_Q.delete;
  G_VALUE_FROM_TBL_Q.delete;
  G_GROUPING_NO_TBL_Q.delete;
  G_QUALIFIER_PRECEDENCE_TBL_Q.delete;
  G_DATATYPE_TBL_Q.delete;
  G_SETUP_VALUE_FROM_TBL_Q.delete;
  G_SETUP_VALUE_TO_TBL_Q.delete;
  G_PRICING_ATTR_FLAG_TBL_Q.delete;
  G_OPERATOR_TYPE_TBL_Q.delete;
  G_QUALIFIER_TYPE_TBL_Q.delete;
  G_LIST_TYPE_CODE_TBL_Q.delete;
  G_ASK_FOR_FLAG_TBL_Q.delete;
  G_QUALIFIER_GROUP_CNT_TBL_Q.delete;
  G_OTHERS_GROUP_CNT_TBL_Q.delete;
  G_HEADER_QUALS_EXIST_FLG_TBL_Q.delete;
  G_SEARCH_IND_TBL_Q.delete;
  G_PRICING_STATUS_CODE_TBL_Q.delete;
  G_START_DATE_ACTIVE_TBL_Q.delete;
  G_END_DATE_ACTIVE_TBL_Q.delete;
  G_LINE_INDEX_TBL_Q.delete;
  G_PRICING_EFFECTIVE_DATE_TBL_Q.delete;
  G_START_DATE_ACTIVE_FIR_TBL_Q.delete;
  G_END_DATE_ACTIVE_FIR_TBL_Q.delete;
  G_LINE_TYPE_CODE_TBL_Q.delete;
  G_PRICING_PHASE_ID_TBL_Q.delete;
  G_UNIQUE_KEY_TBL_Q.delete;
  G_START_DATE_ACTIVE_TBL_H_Q.delete;
  G_END_DATE_ACTIVE_TBL_H_Q.delete;
  G_START_DATE_ACTIVE_SEC_TBL_Q.delete;
  G_END_DATE_ACTIVE_SEC_TBL_Q.delete;
  G_ACTIVE_DATE_FIR_TYPE_TBL_Q.delete;
  G_ACTIVE_DATE_SEC_TYPE_TBL_Q.delete;
  G_HEADER_LIMIT_EXISTS_TBL_Q.delete;
  G_DERIVED_QUALIFIER_FLAG_TBL_Q.delete;   -- Added for TCA

  FETCH l_mini_outer_qual_cur
  BULK COLLECT INTO
     G_LIST_HEADER_ID_TBL_Q
   , G_LIST_LINE_ID_TBL_Q
   , G_QUALIFIER_GROUP_CNT_TBL_Q
   , G_OTHERS_GROUP_CNT_TBL_Q
   , G_HEADER_QUALS_EXIST_FLG_TBL_Q
   , G_SEARCH_IND_TBL_Q
   , G_VALIDATED_FLAG_TBL_Q
   , G_APPLIED_FLAG_TBL_Q
   , G_ATTRIBUTE_LEVEL_TBL_Q
   , G_ATTRIBUTE_TYPE_TBL_Q
   , G_CONTEXT_TBL_Q
   , G_ATTRIBUTE_TBL_Q
   , G_VALUE_FROM_TBL_Q
   , G_GROUPING_NO_TBL_Q
   , G_QUALIFIER_PRECEDENCE_TBL_Q
   , G_DATATYPE_TBL_Q
   , G_SETUP_VALUE_FROM_TBL_Q
   , G_SETUP_VALUE_TO_TBL_Q
   , G_START_DATE_ACTIVE_TBL_Q
   , G_END_DATE_ACTIVE_TBL_Q
   , G_PRICING_ATTR_FLAG_TBL_Q
   , G_OPERATOR_TYPE_TBL_Q
   , G_LIST_TYPE_CODE_TBL_Q
   , G_ASK_FOR_FLAG_TBL_Q
   , G_PRICING_STATUS_CODE_TBL_Q
   , G_QUALIFIER_TYPE_TBL_Q
   , G_LINE_INDEX_TBL_Q
   , G_PRICING_EFFECTIVE_DATE_TBL_Q
   , G_START_DATE_ACTIVE_FIR_TBL_Q
   , G_END_DATE_ACTIVE_FIR_TBL_Q
   , G_LINE_TYPE_CODE_TBL_Q
   , G_PRICING_PHASE_ID_TBL_Q
   , G_UNIQUE_KEY_TBL_Q
   , G_START_DATE_ACTIVE_TBL_H_Q
   , G_END_DATE_ACTIVE_TBL_H_Q
   , G_START_DATE_ACTIVE_SEC_TBL_Q
   , G_END_DATE_ACTIVE_SEC_TBL_Q
   , G_ACTIVE_DATE_FIR_TYPE_TBL_Q
   , G_ACTIVE_DATE_SEC_TYPE_TBL_Q
   , G_HEADER_LIMIT_EXISTS_TBL_Q
   , G_DERIVED_QUALIFIER_FLAG_TBL_Q LIMIT nROWS;   -- Added for TCA
   EXIT WHEN G_LIST_HEADER_ID_TBL_Q.COUNT = 0;

 IF (G_LIST_HEADER_ID_TBL_Q.COUNT > 0) THEN
     --G_QUALIFIER_TEMP := G_QUALIFIER_TEMP_UPDATED;
      INSERT_QUAL(
       G_LIST_HEADER_ID_TBL_Q
     , G_LIST_LINE_ID_TBL_Q
     , G_VALIDATED_FLAG_TBL_Q
     , G_APPLIED_FLAG_TBL_Q
     , G_ATTRIBUTE_LEVEL_TBL_Q
     , G_ATTRIBUTE_TYPE_TBL_Q
     , G_CONTEXT_TBL_Q
     , G_ATTRIBUTE_TBL_Q
     , G_VALUE_FROM_TBL_Q
     , G_GROUPING_NO_TBL_Q
     , G_QUALIFIER_PRECEDENCE_TBL_Q
     , G_DATATYPE_TBL_Q
     , G_SETUP_VALUE_FROM_TBL_Q
     , G_SETUP_VALUE_TO_TBL_Q
     , G_PRICING_ATTR_FLAG_TBL_Q
     , G_OPERATOR_TYPE_TBL_Q
     , G_LIST_TYPE_CODE_TBL_Q
     , G_ASK_FOR_FLAG_TBL_Q
     , G_QUALIFIER_TYPE_TBL_Q
     , G_QUALIFIER_GROUP_CNT_TBL_Q
     , G_OTHERS_GROUP_CNT_TBL_Q
     , G_HEADER_QUALS_EXIST_FLG_TBL_Q
     , G_SEARCH_IND_TBL_Q
     , G_PRICING_STATUS_CODE_TBL_Q
     , G_START_DATE_ACTIVE_TBL_Q
     , G_END_DATE_ACTIVE_TBL_Q
     , G_LINE_INDEX_TBL_Q
     , G_PRICING_EFFECTIVE_DATE_TBL_Q
     , G_START_DATE_ACTIVE_FIR_TBL_Q
     , G_END_DATE_ACTIVE_FIR_TBL_Q
     , G_LINE_TYPE_CODE_TBL_Q
     , G_PRICING_PHASE_ID_TBL_Q
     , G_UNIQUE_KEY_TBL_Q
     , G_START_DATE_ACTIVE_TBL_H_Q
     , G_END_DATE_ACTIVE_TBL_H_Q
     , G_START_DATE_ACTIVE_SEC_TBL_Q
     , G_END_DATE_ACTIVE_SEC_TBL_Q
     , G_ACTIVE_DATE_FIR_TYPE_TBL_Q
     , G_ACTIVE_DATE_SEC_TYPE_TBL_Q
     , G_HEADER_LIMIT_EXISTS_TBL_Q
     , G_DERIVED_QUALIFIER_FLAG_TBL_Q     -- Added for TCA
     , l_status_code
     , l_status_text);

     IF l_status_code = FND_API.G_RET_STS_ERROR THEN
        RAISE E_ROUTINE_ERRORS;
     END IF;

 END IF;

END LOOP;
CLOSE l_mini_outer_qual_cur;

EXCEPTION
  WHEN OTHERS THEN
  x_status_code := FND_API.G_RET_STS_ERROR;
  x_status_text :=l_routine||' '||SQLERRM;
  IF (G_DEBUG_ENGINE = FND_API.G_TRUE) THEN
   engine_debug(l_routine||' '||SQLERRM);
  END IF;

END Mini_Cache_Qualifiers;

/*+--------------------------------------------------------------------
  |Cache_Line_Qualifiers
  |To get the pure line level quals  and
  |To get the line level quals for satisfied headers
  |
  +--------------------------------------------------------------------
*/
PROCEDURE Cache_Line_Qualifiers(p_pricing_phase_id IN NUMBER,
					  x_status_code OUT NOCOPY VARCHAR2,
					  x_status_text OUT NOCOPY VARCHAR2) As
/*
INDX,QP_PREQ_GRP.cache_line_qualifiers.l_outer_qual_cur,qp_npreq_line_attrs_tmp_N4,DISTINCT_QUALIFIER_FLAG,1
INDX,QP_PREQ_GRP.cache_line_qualifiers.l_outer_qual_cur,qp_npreq_line_attrs_tmp_N4,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.cache_line_qualifiers.l_outer_qual_cur,qp_npreq_line_attrs_tmp_N4,PRICING_STATUS_CODE,3

INDX,QP_PREQ_GRP.cache_line_qualifiers.l_outer_qual_cur,QP_QUALIFIERS_N4,QUALIFIER_CONTEXT,1
INDX,QP_PREQ_GRP.cache_line_qualifiers.l_outer_qual_cur,QP_QUALIFIERS_N4,QUALIFIER_ATTRIBUTE,2
INDX,QP_PREQ_GRP.cache_line_qualifiers.l_outer_qual_cur,QP_QUALIFIERS_N4,QUALIFIER_ATTR_VALUE,3
INDX,QP_PREQ_GRP.cache_line_qualifiers.l_outer_qual_cur,QP_QUALIFIERS_N4,COMPARISON_OPERATOR_CODE,4
INDX,QP_PREQ_GRP.cache_line_qualifiers.l_outer_qual_cur,QP_QUALIFIERS_N4,ACTIVE_FLAG,5
INDX,QP_PREQ_GRP.cache_line_qualifiers.l_outer_qual_cur,QP_QUALIFIERS_N4,SEARCH_IND,6

INDX,QP_PREQ_GRP.cache_line_qualifiers.l_outer_qual_cur,QP_LIST_HEADER_PHASES_U1,PRICING_PHASE_ID,1
INDX,QP_PREQ_GRP.cache_line_qualifiers.l_outer_qual_cur,QP_LIST_HEADER_PHASES_U1,LIST_HEADER_ID,2

INDX,QP_PREQ_GRP.cache_line_qualifiers.l_outer_qual_cur,QP_LIST_HEADERS_B_N2,LIST_HEADER_ID,1
*/
-- Changed the cursor l_outer_qual_cur for bug#3002632
-- [julin/4396043/4471795] perform header filter before prod check, go to qp_pricing_attributes
-- before qp_npreq_line_attrs_tmp during prod check.
CURSOR l_OUTER_QUAL_CUR IS
-- Qualifier Only
select /*+ ORDERED USE_NL(qpq qplh qph)  index(qpq qp_qualifiers_n4) index(qph qp_list_headers_b_n7) index(qplatq qp_preq_line_attrs_tmp_n2) l_outer_qual_cur_mod */
       qpq.list_header_id,
       qpq.list_line_id list_line_id,
       qpq.qualifier_group_cnt,
       qpq.others_group_cnt,
       qpq.header_quals_exist_flag,
       qpq.search_ind,
       G_NO validated_flag,
       G_NO applied_flag,
       G_LINE_LEVEL attribute_level,
       G_QUALIFIER_TYPE attribute_type,
       qplatq.context          ,
       qplatq.attribute        ,
       qplatq.value_from       ,
       qpq.qualifier_grouping_no qualifier_grouping_no ,
       qpq.qualifier_precedence  ,
       qpq.qualifier_datatype,
       qpq.qualifier_attr_value    ,
       qpq.qualifier_attr_value_to ,
       qpq.start_date_active,
       qpq.end_date_active,
       G_NO pricing_attr_flag,
       qpq.comparison_operator_code ,
       qph.list_type_code,
       qph.ask_for_flag,
       qplatq.pricing_status_code,
       'OHQ' ,
        NULL line_index,
        NULL pricing_effective_date,
        qph.start_date_active_first start_date_active_first,
        qph.end_date_active_first   end_date_active_first,
        NULL line_type_code,
	p_pricing_phase_id pricing_phase_id,
        qpq.LIST_HEADER_ID || '-' || qpq.LIST_LINE_ID || '-' || qpq.QUALIFIER_GROUPING_NO UNIQUE_KEY,
        qph.start_date_active start_date_active_h,
        qph.end_date_active end_date_active_h,
        qph.start_date_active_second start_date_active_second,
        qph.end_date_active_second end_date_active_second,
        qph.active_date_first_type,
        qph.active_date_second_type,
        qph.limit_exists_flag,
        qplatq.derived_qualifier_flag    -- Added for TCA
from
	   qp_npreq_line_attrs_tmp qplatq,
	   qp_qualifiers qpq ,
	   qp_list_header_phases qplh,
	   qp_list_headers_b qph,
           qp_price_req_sources_v qprs
where
      qpq.list_header_id = qplh.list_header_id
and   qplh.list_header_id = qph.list_header_id
-- bug 2799120
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
and   qplh.pricing_phase_id = p_pricing_phase_id
AND qplh.PRIC_PROD_ATTR_ONLY_FLAG = 'N' -- Pattern changes
and 	 qpq.qualifier_context      = qplatq.context
and 	 qpq.qualifier_attribute    = qplatq.attribute
and   qpq.qualifier_attr_value = qplatq.value_from
and   qpq.comparison_operator_code = '='
and   qpq.search_ind = 1
and   qpq.list_line_id <> -1
and   ( qpq.list_header_id in (SELECT distinct list_header_id -- for qualified headers from Cache_Header_Qualifiers
                             FROM qp_preq_qual_tmp
                             WHERE pricing_phase_id = p_pricing_phase_id
                             AND   pricing_status_code = G_STATUS_UNCHANGED)
         or
        qpq.header_quals_exist_flag = G_NO) -- Pure line level qualifiers
and   (not exists (select /*+ INDEX (qp_pa,QP_PRICING_ATTRIBUTES_N2) */'x'    --added hint 8579312    --3520634 start
                     from qp_pricing_attributes qp_pa           -- if no product defined,select the header
                    where qp_pa.list_line_id = qpq.list_line_id
                      and rownum = 1)
       OR  -- If product defined on line level,select headers for which product matches.
       exists (select  /*+ ORDERED USE_NL(qpprod) INDEX (c,QP_PRICING_ATTRIBUTES_N2) */ 'x' --added hint 8579312
                   FROM   qp_pricing_attributes c, qp_npreq_line_attrs_tmp qpprod
                   WHERE c.list_header_id = qpq.list_header_id
                   AND   c.list_line_id = qpq.list_line_id
                   AND   c.pricing_phase_id = p_pricing_phase_id
                   AND   qpprod.context = c.product_attribute_context
                   AND   qpprod.attribute = c.product_attribute
                   AND   qpprod.value_from = c.product_attr_value
                   AND   qpprod.pricing_status_code = G_STATUS_UNCHANGED
                   AND   c.qualification_ind in (G_YES_PROD_LINE_QUAL_IND, G_YES_PROD_PRIC_LINE_QUAL_IND,
                                                 G_YES_PROD_HDR_LINE_QUAL_IND, G_YES_PRIC_HDR_LINE_QUAL_IND)
                   AND   qpprod.attribute_type = G_PRODUCT_TYPE
                   AND   c.excluder_flag = G_NO
      --3683298             AND   qpprod.line_index = qplatq.line_index
                   AND   rownum = 1)
      )                                                         --3520634 end
and   ((qph.currency_code IS NOT NULL AND qph.currency_code = G_CURRENCY_CODE)
       OR
       qph.currency_code IS NULL) -- optional currency
--Begin Bug# 7833575
/*and    ((G_MIN_PRICING_DATE between nvl(qph.start_date_active , G_MIN_PRICING_DATE)
                                         and nvl(qph.end_date_active,G_MIN_PRICING_DATE)
or      G_MAX_PRICING_DATE between nvl(qph.start_date_active , G_MAX_PRICING_DATE)
                                         and nvl(qph.end_date_active,G_MAX_PRICING_DATE)))
and    ((G_MIN_PRICING_DATE between nvl(qpq.start_date_active , G_MIN_PRICING_DATE)
                                         and nvl(qpq.end_date_active,G_MIN_PRICING_DATE)
or      G_MAX_PRICING_DATE between nvl(qpq.start_date_active , G_MAX_PRICING_DATE)
                                         and nvl(qpq.end_date_active,G_MAX_PRICING_DATE)))*/
AND (NVL(qph.end_date_active,G_MIN_PRICING_DATE) >= g_min_pricing_date
	AND NVL(qph.start_date_active, G_MAX_PRICING_DATE) <= g_max_pricing_date)
AND (NVL(qpq.end_date_active,G_MIN_PRICING_DATE) >= g_min_pricing_date
	AND NVL(qpq.start_date_active, G_MAX_PRICING_DATE) <= g_max_pricing_date)
--End Bug# 7833575
and   qph.list_type_code not in ('PRL','AGR')
and   qpq.list_type_code not in ('PRL','AGR')
and   qph.active_flag = G_YES
and   qpq.active_flag = G_YES
and   qplatq.distinct_qualifier_flag = G_YES
and   qpq.list_header_id = qph.list_header_id
and   qplatq.pricing_status_code = G_STATUS_UNCHANGED
and   qplatq.attribute_type = G_QUALIFIER_TYPE
and   qprs.request_type_code = G_REQUEST_TYPE_CODE
and   qph.source_system_code = qprs.source_system_code
and    ((nvl(qplatq.DERIVED_QUALIFIER_FLAG,'N') = 'N')
         OR (qplatq.DERIVED_QUALIFIER_FLAG = 'Y' AND qpq.QUALIFY_HIER_DESCENDENTS_FLAG = 'Y'))  -- Added for TCA
union all
select /*+ ORDERED USE_NL(qpq qplh qph) index(qpq qp_qualifiers_n6) index(qph qp_list_headers_b_n7) index(qplatq qp_preq_line_attrs_tmp_n2) l_outer_qual_cur_mod */
       qpq.list_header_id,
       qpq.list_line_id list_line_id,
       qpq.qualifier_group_cnt,
       qpq.others_group_cnt,
       qpq.header_quals_exist_flag,
       qpq.search_ind,
       G_NO validated_flag,
       G_NO applied_flag,
       G_LINE_LEVEL attribute_level,
       G_QUALIFIER_TYPE attribute_type,
       qplatq.context          ,
       qplatq.attribute        ,
       qplatq.value_from       ,
       qpq.qualifier_grouping_no qualifier_grouping_no ,
       qpq.qualifier_precedence  ,
       qpq.qualifier_datatype,
       qpq.qualifier_attr_value    ,
       qpq.qualifier_attr_value_to ,
       qpq.start_date_active,
       qpq.end_date_active,
       G_NO pricing_attr_flag,
       qpq.comparison_operator_code ,
       qph.list_type_code,
       qph.ask_for_flag,
       qplatq.pricing_status_code,
       'OHQ' ,
        NULL line_index,
        NULL pricing_effective_date,
        qph.start_date_active_first start_date_active_first,
        qph.end_date_active_first   end_date_active_first,
        NULL line_type_code,
        p_pricing_phase_id pricing_phase_id,
        qpq.LIST_HEADER_ID || '-' || qpq.LIST_LINE_ID || '-' || qpq.QUALIFIER_GROUPING_NO UNIQUE_KEY,
        qph.start_date_active start_date_active_h,
        qph.end_date_active end_date_active_h,
        qph.start_date_active_second start_date_active_second,
        qph.end_date_active_second end_date_active_second,
        qph.active_date_first_type,
        qph.active_date_second_type,
        qph.limit_exists_flag,
        qplatq.derived_qualifier_flag    -- Added for TCA
from
	   qp_npreq_line_attrs_tmp qplatq,
	   qp_qualifiers qpq ,
	   qp_list_header_phases qplh,
	   qp_list_headers_b qph,
	   qp_price_req_sources_v qprs
where
      qpq.list_header_id = qplh.list_header_id
and   qplh.list_header_id = qph.list_header_id
-- bug 2799120
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
and   qplh.pricing_phase_id = p_pricing_phase_id
AND qplh.PRIC_PROD_ATTR_ONLY_FLAG = 'N' -- Pattern changes
and 	 qpq.qualifier_context      = qplatq.context
and 	 qpq.qualifier_attribute    = qplatq.attribute
and   qpq.comparison_operator_code =  G_OPERATOR_BETWEEN
and   qpq.qualifier_datatype =  G_NUMERIC
and   qpq.search_ind = 1
and   qpq.list_line_id <> -1
and   ( qpq.list_header_id in (SELECT distinct list_header_id
                             FROM qp_preq_qual_tmp
                             WHERE pricing_phase_id = p_pricing_phase_id
                             AND   pricing_status_code = G_STATUS_UNCHANGED)
         or
        qpq.header_quals_exist_flag = G_NO)
and   (not exists (select /*+ INDEX (qp_pa,QP_PRICING_ATTRIBUTES_N2) */'x'      --added hint 8579312 --3520634 start
                     from qp_pricing_attributes qp_pa  -- if no product defined,select the header
                    where qp_pa.list_line_id = qpq.list_line_id
                      and rownum = 1)
       OR -- If product defined on line level,select headers for which product matches.
       exists (select  /*+ ORDERED USE_NL(qpprod) INDEX (c,QP_PRICING_ATTRIBUTES_N2) */ 'x' --added hint 8579312
                   FROM   qp_pricing_attributes c, qp_npreq_line_attrs_tmp qpprod
                   WHERE c.list_header_id = qpq.list_header_id
                   AND   c.list_line_id = qpq.list_line_id
                   AND   c.pricing_phase_id = p_pricing_phase_id
                   AND   qpprod.context = c.product_attribute_context
                   AND   qpprod.attribute = c.product_attribute
                   AND   qpprod.value_from = c.product_attr_value
                   AND   qpprod.pricing_status_code = G_STATUS_UNCHANGED
                   AND   c.qualification_ind in (G_YES_PROD_LINE_QUAL_IND, G_YES_PROD_PRIC_LINE_QUAL_IND,
                                                 G_YES_PROD_HDR_LINE_QUAL_IND, G_YES_PRIC_HDR_LINE_QUAL_IND)
                   AND   qpprod.attribute_type = G_PRODUCT_TYPE
                   AND   c.excluder_flag = G_NO
--3683298                   AND   qpprod.line_index = qplatq.line_index
                   AND   rownum = 1)
      )                          --3520634 end
and   qp_number.canonical_to_number(decode(qpq.qualifier_datatype,G_NUMERIC,qplatq.value_from,null))
between qpq.qual_attr_value_from_number and qpq.qual_attr_value_to_number
and   ((qph.currency_code IS NOT NULL AND qph.currency_code = G_CURRENCY_CODE)
       OR
       qph.currency_code IS NULL) -- optional currency
--Begin Bug# 7833575
/*and    ((G_MIN_PRICING_DATE between nvl(qph.start_date_active , G_MIN_PRICING_DATE)
                                         and nvl(qph.end_date_active,G_MIN_PRICING_DATE)
or      G_MAX_PRICING_DATE between nvl(qph.start_date_active , G_MAX_PRICING_DATE)
                                         and nvl(qph.end_date_active,G_MAX_PRICING_DATE)))
and    ((G_MIN_PRICING_DATE between nvl(qpq.start_date_active , G_MIN_PRICING_DATE)
                                         and nvl(qpq.end_date_active,G_MIN_PRICING_DATE)
or      G_MAX_PRICING_DATE between nvl(qpq.start_date_active , G_MAX_PRICING_DATE)
                                         and nvl(qpq.end_date_active,G_MAX_PRICING_DATE)))*/
AND (NVL(qph.end_date_active,G_MIN_PRICING_DATE) >= g_min_pricing_date
	AND NVL(qph.start_date_active, G_MAX_PRICING_DATE) <= g_max_pricing_date)
AND (NVL(qpq.end_date_active,G_MIN_PRICING_DATE) >= g_min_pricing_date
	AND NVL(qpq.start_date_active, G_MAX_PRICING_DATE) <= g_max_pricing_date)
--End Bug# 7833575
and   qph.list_type_code not in ('PRL','AGR')
and   qpq.list_type_code not in ('PRL','AGR')
and   qph.active_flag = G_YES
and   qpq.active_flag = G_YES
and   qplatq.distinct_qualifier_flag = G_YES
and   qpq.list_header_id = qph.list_header_id
and   qplatq.pricing_status_code = G_STATUS_UNCHANGED
and   qplatq.attribute_type = G_QUALIFIER_TYPE
and   qprs.request_type_code = G_REQUEST_TYPE_CODE
and   qph.source_system_code = qprs.source_system_code
and    ((nvl(qplatq.DERIVED_QUALIFIER_FLAG,'N') = 'N')
         OR (qplatq.DERIVED_QUALIFIER_FLAG = 'Y' AND qpq.QUALIFY_HIER_DESCENDENTS_FLAG = 'Y'))  -- Added for TCA
union all
select /*+ ORDERED USE_NL(qpq qplh qph) index(qpq qp_qualifiers_n5) index(qph qp_list_headers_b_n7) index(qplatq qp_preq_line_attrs_tmp_n2) l_outer_qual_cur_mod */
       qpq.list_header_id,
       qpq.list_line_id list_line_id,
       qpq.qualifier_group_cnt,
       qpq.others_group_cnt,
       qpq.header_quals_exist_flag,
       qpq.search_ind,
       G_NO validated_flag,
       G_NO applied_flag,
       G_LINE_LEVEL attribute_level,
       G_QUALIFIER_TYPE attribute_type,
       qplatq.context          ,
       qplatq.attribute        ,
       qplatq.value_from       ,
       qpq.qualifier_grouping_no qualifier_grouping_no ,
       qpq.qualifier_precedence  ,
       qpq.qualifier_datatype,
       qpq.qualifier_attr_value    ,
       qpq.qualifier_attr_value_to ,
       qpq.start_date_active,
       qpq.end_date_active,
       G_NO pricing_attr_flag,
       qpq.comparison_operator_code ,
       qph.list_type_code,
       qph.ask_for_flag,
       qplatq.pricing_status_code,
       'OHQ' ,
        NULL line_index,
        NULL pricing_effective_date,
        qph.start_date_active_first start_date_active_first,
        qph.end_date_active_first   end_date_active_first,
        NULL line_type_code,
        p_pricing_phase_id pricing_phase_id,
        qpq.LIST_HEADER_ID || '-' || qpq.LIST_LINE_ID || '-' || qpq.QUALIFIER_GROUPING_NO UNIQUE_KEY,
        qph.start_date_active start_date_active_h,
        qph.end_date_active end_date_active_h,
        qph.start_date_active_second start_date_active_second,
        qph.end_date_active_second end_date_active_second,
        qph.active_date_first_type,
        qph.active_date_second_type,
        qph.limit_exists_flag,
        qplatq.derived_qualifier_flag   -- Added for TCA
from
	   qp_npreq_line_attrs_tmp qplatq,
	   qp_qualifiers qpq ,
	   qp_list_header_phases qplh,
	   qp_list_headers_b qph,
	   qp_price_req_sources_v qprs
where
      qpq.list_header_id = qplh.list_header_id
and   qplh.list_header_id = qph.list_header_id
-- bug 2799120
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
and   qplh.pricing_phase_id = p_pricing_phase_id
AND qplh.PRIC_PROD_ATTR_ONLY_FLAG = 'N' -- Pattern changes
and 	 qpq.qualifier_context      = qplatq.context
and 	 qpq.qualifier_attribute    = qplatq.attribute
and   qpq.comparison_operator_code = G_OPERATOR_BETWEEN
and   qpq.search_ind = 1
and   qpq.list_line_id <> -1
and   ( qpq.list_header_id in (SELECT distinct list_header_id
                             FROM qp_preq_qual_tmp
                             WHERE pricing_phase_id = p_pricing_phase_id
                             AND   pricing_status_code = G_STATUS_UNCHANGED)
         or
        qpq.header_quals_exist_flag = G_NO)
and   (not exists (select /*+ INDEX (qp_pa,QP_PRICING_ATTRIBUTES_N2) */ 'x'    --added hint 8579312 --3520634 start
                     from qp_pricing_attributes qp_pa    -- if no product defined,select the header
                    where qp_pa.list_line_id = qpq.list_line_id
                      and rownum = 1)
       OR  -- If product defined on line level,select headers for which product matches.
       exists (select  /*+ ORDERED USE_NL(qpprod) INDEX (c,QP_PRICING_ATTRIBUTES_N2) */ 'x' --added hint 8579312
                   FROM   qp_pricing_attributes c, qp_npreq_line_attrs_tmp qpprod
                   WHERE c.list_header_id = qpq.list_header_id
                   AND   c.list_line_id = qpq.list_line_id
                   AND   c.pricing_phase_id = p_pricing_phase_id
                   AND   qpprod.context = c.product_attribute_context
                   AND   qpprod.attribute = c.product_attribute
                   AND   qpprod.value_from = c.product_attr_value
                   AND   qpprod.pricing_status_code = G_STATUS_UNCHANGED
                   AND   c.qualification_ind in (G_YES_PROD_LINE_QUAL_IND, G_YES_PROD_PRIC_LINE_QUAL_IND,
                                                 G_YES_PROD_HDR_LINE_QUAL_IND, G_YES_PRIC_HDR_LINE_QUAL_IND)
                   AND   qpprod.attribute_type = G_PRODUCT_TYPE
                   AND   c.excluder_flag = G_NO
--3683298                   AND   qpprod.line_index = qplatq.line_index
                   AND   rownum = 1)
      )                            --3520634 end
and   qpq.qualifier_datatype IN (G_VARCHAR,G_DATE_X,G_DATE_Y)
--and   decode(qpq.qualifier_datatype,G_VARCHAR,qplatq.value_from,G_DATE_X,qplatq.value_from,
-- G_DATE_Y,qplatq.value_from,null)
and qplatq.value_from between qpq.qualifier_attr_value and qpq.qualifier_attr_value_to
and   ((qph.currency_code IS NOT NULL AND qph.currency_code = G_CURRENCY_CODE)
       OR
       qph.currency_code IS NULL) -- optional currency
--Begin Bug# 7833575
/*and    ((G_MIN_PRICING_DATE between nvl(qph.start_date_active , G_MIN_PRICING_DATE)
                                         and nvl(qph.end_date_active,G_MIN_PRICING_DATE)
or      G_MAX_PRICING_DATE between nvl(qph.start_date_active , G_MAX_PRICING_DATE)
                                         and nvl(qph.end_date_active,G_MAX_PRICING_DATE)))
and    ((G_MIN_PRICING_DATE between nvl(qpq.start_date_active , G_MIN_PRICING_DATE)
                                         and nvl(qpq.end_date_active,G_MIN_PRICING_DATE)
or      G_MAX_PRICING_DATE between nvl(qpq.start_date_active , G_MAX_PRICING_DATE)
                                         and nvl(qpq.end_date_active,G_MAX_PRICING_DATE)))*/
AND (NVL(qph.end_date_active,G_MIN_PRICING_DATE) >= g_min_pricing_date
	AND NVL(qph.start_date_active, G_MAX_PRICING_DATE) <= g_max_pricing_date)
AND (NVL(qpq.end_date_active,G_MIN_PRICING_DATE) >= g_min_pricing_date
	AND NVL(qpq.start_date_active, G_MAX_PRICING_DATE) <= g_max_pricing_date)
--End Bug# 7833575
and   qph.list_type_code not in ('PRL','AGR')
and   qpq.list_type_code not in ('PRL','AGR')
and   qph.active_flag = G_YES
and   qpq.active_flag = G_YES
and   qplatq.distinct_qualifier_flag = G_YES
and   qpq.list_header_id = qph.list_header_id
and   qplatq.pricing_status_code = G_STATUS_UNCHANGED
and   qplatq.attribute_type = G_QUALIFIER_TYPE
and   qprs.request_type_code = G_REQUEST_TYPE_CODE
and   qph.source_system_code = qprs.source_system_code
and    ((nvl(qplatq.DERIVED_QUALIFIER_FLAG,'N') = 'N')
         OR (qplatq.DERIVED_QUALIFIER_FLAG = 'Y' AND qpq.QUALIFY_HIER_DESCENDENTS_FLAG = 'Y'))  -- Added for TCA
union all
select /*+ ORDERED USE_NL(qpq qplh qph)  index(qpq qp_qualifiers_n5) index(qph qp_list_headers_b_n7) index(qplatq qp_preq_line_attrs_tmp_n2) l_outer_qual_cur_mod */
       qpq.list_header_id,
       qpq.list_line_id list_line_id,
       qpq.qualifier_group_cnt,
       qpq.others_group_cnt,
       qpq.header_quals_exist_flag,
       qpq.search_ind,
       G_NO validated_flag,
       G_NO applied_flag,
       G_LINE_LEVEL attribute_level,
       G_QUALIFIER_TYPE attribute_type,
       qplatq.context          ,
       qplatq.attribute        ,
       qplatq.value_from       ,
       qpq.qualifier_grouping_no qualifier_grouping_no ,
       qpq.qualifier_precedence  ,
       qpq.qualifier_datatype,
       qpq.qualifier_attr_value    ,
       qpq.qualifier_attr_value_to ,
       qpq.start_date_active,
       qpq.end_date_active,
       G_NO pricing_attr_flag,
       qpq.comparison_operator_code ,
       qph.list_type_code,
       qph.ask_for_flag,
       qplatq.pricing_status_code,
       'OHQ' ,
        NULL line_index,
        NULL pricing_effective_date,
        qph.start_date_active_first start_date_active_first,
        qph.end_date_active_first   end_date_active_first,
        NULL line_type_code,
        p_pricing_phase_id pricing_phase_id,
        qpq.LIST_HEADER_ID || '-' || qpq.LIST_LINE_ID || '-' || qpq.QUALIFIER_GROUPING_NO UNIQUE_KEY,
        qph.start_date_active start_date_active_h,
        qph.end_date_active end_date_active_h,
        qph.start_date_active_second start_date_active_second,
        qph.end_date_active_second end_date_active_second,
        qph.active_date_first_type,
        qph.active_date_second_type,
        qph.limit_exists_flag,
        qplatq.derived_qualifier_flag     -- Added for TCA
from
	   qp_npreq_line_attrs_tmp qplatq,
	   qp_qualifiers qpq ,
	   qp_list_header_phases qplh,
	   qp_list_headers_b qph,
	   qp_price_req_sources_v qprs
where
      qpq.list_header_id = qplh.list_header_id
and   qplh.list_header_id = qph.list_header_id
-- bug 2799120
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
and   qplh.pricing_phase_id = p_pricing_phase_id
AND qplh.PRIC_PROD_ATTR_ONLY_FLAG = 'N' -- Pattern changes
and 	 qpq.qualifier_context      = qplatq.context
and 	 qpq.qualifier_attribute    = qplatq.attribute
and   qpq.comparison_operator_code = 'NOT ='
and   qpq.qualifier_attr_value <> qplatq.value_from
and   qpq.search_ind = 1
and   qpq.list_line_id <> -1
and   ( qpq.list_header_id in (SELECT distinct list_header_id
                             FROM qp_preq_qual_tmp
                             WHERE pricing_phase_id = p_pricing_phase_id
                             AND   pricing_status_code = G_STATUS_UNCHANGED)
         or
        qpq.header_quals_exist_flag = G_NO)
and   (not exists (select /*+ INDEX (qp_pa,QP_PRICING_ATTRIBUTES_N2) */ 'x'    --added hint 8579312 --3520634 start
                     from qp_pricing_attributes qp_pa            -- if no product defined,select the header
                    where qp_pa.list_line_id = qpq.list_line_id
                      and rownum = 1)
       OR  -- If product defined on line level,select headers for which product matches.
       exists (select  /*+ ORDERED USE_NL(qpprod) INDEX (c,QP_PRICING_ATTRIBUTES_N2) */ 'x' --added hint 8579312
                   FROM   qp_pricing_attributes c, qp_npreq_line_attrs_tmp qpprod
                   WHERE c.list_header_id = qpq.list_header_id
                   AND   c.list_line_id = qpq.list_line_id
                   AND   c.pricing_phase_id = p_pricing_phase_id
                   AND   qpprod.context = c.product_attribute_context
                   AND   qpprod.attribute = c.product_attribute
                   AND   qpprod.value_from = c.product_attr_value
                   AND   qpprod.pricing_status_code = G_STATUS_UNCHANGED
                   AND   c.qualification_ind in (G_YES_PROD_LINE_QUAL_IND, G_YES_PROD_PRIC_LINE_QUAL_IND,
                                                 G_YES_PROD_HDR_LINE_QUAL_IND, G_YES_PRIC_HDR_LINE_QUAL_IND)
                   AND   qpprod.attribute_type = G_PRODUCT_TYPE
                   AND   c.excluder_flag = G_NO
--3683298                   AND   qpprod.line_index = qplatq.line_index
                   AND   rownum = 1)
      )                        --3520634 end
and   ((qph.currency_code IS NOT NULL AND qph.currency_code = G_CURRENCY_CODE)
       OR
       qph.currency_code IS NULL) -- optional currency
--Begin Bug# 7833575
/*and    ((G_MIN_PRICING_DATE between nvl(qph.start_date_active , G_MIN_PRICING_DATE)
                                         and nvl(qph.end_date_active,G_MIN_PRICING_DATE)
or      G_MAX_PRICING_DATE between nvl(qph.start_date_active , G_MAX_PRICING_DATE)
                                         and nvl(qph.end_date_active,G_MAX_PRICING_DATE)))
and    ((G_MIN_PRICING_DATE between nvl(qpq.start_date_active , G_MIN_PRICING_DATE)
                                         and nvl(qpq.end_date_active,G_MIN_PRICING_DATE)
or      G_MAX_PRICING_DATE between nvl(qpq.start_date_active , G_MAX_PRICING_DATE)
                                         and nvl(qpq.end_date_active,G_MAX_PRICING_DATE)))*/
AND (NVL(qph.end_date_active,G_MIN_PRICING_DATE) >= g_min_pricing_date
	AND NVL(qph.start_date_active, G_MAX_PRICING_DATE) <= g_max_pricing_date)
AND (NVL(qpq.end_date_active,G_MIN_PRICING_DATE) >= g_min_pricing_date
	AND NVL(qpq.start_date_active, G_MAX_PRICING_DATE) <= g_max_pricing_date)
--End Bug# 7833575
and   qph.list_type_code not in ('PRL','AGR')
and   qpq.list_type_code not in ('PRL','AGR')
and   qph.active_flag = G_YES
and   qpq.active_flag = G_YES
and   qplatq.distinct_qualifier_flag = G_YES
and   qpq.list_header_id = qph.list_header_id
and   qplatq.pricing_status_code = G_STATUS_UNCHANGED
and   qplatq.attribute_type = G_QUALIFIER_TYPE
and   qprs.request_type_code = G_REQUEST_TYPE_CODE
and   qph.source_system_code = qprs.source_system_code
and    ((nvl(qplatq.DERIVED_QUALIFIER_FLAG,'N') = 'N')
         OR (qplatq.DERIVED_QUALIFIER_FLAG = 'Y' AND qpq.QUALIFY_HIER_DESCENDENTS_FLAG = 'Y'));  -- Added for TCA


nROWS CONSTANT NUMBER := 1000;

l_status_code VARCHAR2(30);
l_status_text VARCHAR2(240);

l_routine VARCHAR2(240):= 'Routine:QP_PREQ_GRP.Cache_Line_Qualifiers';

BEGIN

 --Delete from QP_PREQ_QUAL_TMP;

 G_LINE_QUALIFIER_TEMP := 'E';

 OPEN l_outer_qual_cur;

 LOOP
  G_LIST_HEADER_ID_TBL_Q.delete;
  G_LIST_LINE_ID_TBL_Q.delete;
  G_VALIDATED_FLAG_TBL_Q.delete;
  G_APPLIED_FLAG_TBL_Q.delete;
  G_ATTRIBUTE_LEVEL_TBL_Q.delete;
  G_ATTRIBUTE_TYPE_TBL_Q.delete;
  G_CONTEXT_TBL_Q.delete;
  G_ATTRIBUTE_TBL_Q.delete;
  G_VALUE_FROM_TBL_Q.delete;
  G_GROUPING_NO_TBL_Q.delete;
  G_QUALIFIER_PRECEDENCE_TBL_Q.delete;
  G_DATATYPE_TBL_Q.delete;
  G_SETUP_VALUE_FROM_TBL_Q.delete;
  G_SETUP_VALUE_TO_TBL_Q.delete;
  G_PRICING_ATTR_FLAG_TBL_Q.delete;
  G_OPERATOR_TYPE_TBL_Q.delete;
  G_QUALIFIER_TYPE_TBL_Q.delete;
  G_LIST_TYPE_CODE_TBL_Q.delete;
  G_ASK_FOR_FLAG_TBL_Q.delete;
  G_QUALIFIER_GROUP_CNT_TBL_Q.delete;
  G_OTHERS_GROUP_CNT_TBL_Q.delete;
  G_HEADER_QUALS_EXIST_FLG_TBL_Q.delete;
  G_SEARCH_IND_TBL_Q.delete;
  G_PRICING_STATUS_CODE_TBL_Q.delete;
  G_START_DATE_ACTIVE_TBL_Q.delete;
  G_END_DATE_ACTIVE_TBL_Q.delete;
  G_LINE_INDEX_TBL_Q.delete;
  G_PRICING_EFFECTIVE_DATE_TBL_Q.delete;
  G_START_DATE_ACTIVE_FIR_TBL_Q.delete;
  G_END_DATE_ACTIVE_FIR_TBL_Q.delete;
  G_LINE_TYPE_CODE_TBL_Q.delete;
  G_PRICING_PHASE_ID_TBL_Q.delete;
  G_UNIQUE_KEY_TBL_Q.delete;
  G_START_DATE_ACTIVE_TBL_H_Q.delete;
  G_END_DATE_ACTIVE_TBL_H_Q.delete;
  G_START_DATE_ACTIVE_SEC_TBL_Q.delete;
  G_END_DATE_ACTIVE_SEC_TBL_Q.delete;
  G_ACTIVE_DATE_FIR_TYPE_TBL_Q.delete;
  G_ACTIVE_DATE_SEC_TYPE_TBL_Q.delete;
  G_HEADER_LIMIT_EXISTS_TBL_Q.delete;
  G_DERIVED_QUALIFIER_FLAG_TBL_Q.delete;    -- Added for TCA

  FETCH l_outer_qual_cur
  BULK COLLECT INTO
     G_LIST_HEADER_ID_TBL_Q
   , G_LIST_LINE_ID_TBL_Q
   , G_QUALIFIER_GROUP_CNT_TBL_Q
   , G_OTHERS_GROUP_CNT_TBL_Q
   , G_HEADER_QUALS_EXIST_FLG_TBL_Q
   , G_SEARCH_IND_TBL_Q
   , G_VALIDATED_FLAG_TBL_Q
   , G_APPLIED_FLAG_TBL_Q
   , G_ATTRIBUTE_LEVEL_TBL_Q
   , G_ATTRIBUTE_TYPE_TBL_Q
   , G_CONTEXT_TBL_Q
   , G_ATTRIBUTE_TBL_Q
   , G_VALUE_FROM_TBL_Q
   , G_GROUPING_NO_TBL_Q
   , G_QUALIFIER_PRECEDENCE_TBL_Q
   , G_DATATYPE_TBL_Q
   , G_SETUP_VALUE_FROM_TBL_Q
   , G_SETUP_VALUE_TO_TBL_Q
   , G_START_DATE_ACTIVE_TBL_Q
   , G_END_DATE_ACTIVE_TBL_Q
   , G_PRICING_ATTR_FLAG_TBL_Q
   , G_OPERATOR_TYPE_TBL_Q
   , G_LIST_TYPE_CODE_TBL_Q
   , G_ASK_FOR_FLAG_TBL_Q
   , G_PRICING_STATUS_CODE_TBL_Q
   , G_QUALIFIER_TYPE_TBL_Q
   , G_LINE_INDEX_TBL_Q
   , G_PRICING_EFFECTIVE_DATE_TBL_Q
   , G_START_DATE_ACTIVE_FIR_TBL_Q
   , G_END_DATE_ACTIVE_FIR_TBL_Q
   , G_LINE_TYPE_CODE_TBL_Q
   , G_PRICING_PHASE_ID_TBL_Q
   , G_UNIQUE_KEY_TBL_Q
   , G_START_DATE_ACTIVE_TBL_H_Q
   , G_END_DATE_ACTIVE_TBL_H_Q
   , G_START_DATE_ACTIVE_SEC_TBL_Q
   , G_END_DATE_ACTIVE_SEC_TBL_Q
   , G_ACTIVE_DATE_FIR_TYPE_TBL_Q
   , G_ACTIVE_DATE_SEC_TYPE_TBL_Q
   , G_HEADER_LIMIT_EXISTS_TBL_Q
   , G_DERIVED_QUALIFIER_FLAG_TBL_Q LIMIT nROWS;     -- Added for TCA
   EXIT WHEN G_LIST_HEADER_ID_TBL_Q.COUNT = 0;

 IF (G_LIST_HEADER_ID_TBL_Q.COUNT > 0) THEN

     G_LINE_QUALIFIER_TEMP := 'U';

      INSERT_QUAL(
       G_LIST_HEADER_ID_TBL_Q
     , G_LIST_LINE_ID_TBL_Q
     , G_VALIDATED_FLAG_TBL_Q
     , G_APPLIED_FLAG_TBL_Q
     , G_ATTRIBUTE_LEVEL_TBL_Q
     , G_ATTRIBUTE_TYPE_TBL_Q
     , G_CONTEXT_TBL_Q
     , G_ATTRIBUTE_TBL_Q
     , G_VALUE_FROM_TBL_Q
     , G_GROUPING_NO_TBL_Q
     , G_QUALIFIER_PRECEDENCE_TBL_Q
     , G_DATATYPE_TBL_Q
     , G_SETUP_VALUE_FROM_TBL_Q
     , G_SETUP_VALUE_TO_TBL_Q
     , G_PRICING_ATTR_FLAG_TBL_Q
     , G_OPERATOR_TYPE_TBL_Q
     , G_LIST_TYPE_CODE_TBL_Q
     , G_ASK_FOR_FLAG_TBL_Q
     , G_QUALIFIER_TYPE_TBL_Q
     , G_QUALIFIER_GROUP_CNT_TBL_Q
     , G_OTHERS_GROUP_CNT_TBL_Q
     , G_HEADER_QUALS_EXIST_FLG_TBL_Q
     , G_SEARCH_IND_TBL_Q
     , G_PRICING_STATUS_CODE_TBL_Q
     , G_START_DATE_ACTIVE_TBL_Q
     , G_END_DATE_ACTIVE_TBL_Q
     , G_LINE_INDEX_TBL_Q
     , G_PRICING_EFFECTIVE_DATE_TBL_Q
     , G_START_DATE_ACTIVE_FIR_TBL_Q
     , G_END_DATE_ACTIVE_FIR_TBL_Q
     , G_LINE_TYPE_CODE_TBL_Q
     , G_PRICING_PHASE_ID_TBL_Q
     , G_UNIQUE_KEY_TBL_Q
     , G_START_DATE_ACTIVE_TBL_H_Q
     , G_END_DATE_ACTIVE_TBL_H_Q
     , G_START_DATE_ACTIVE_SEC_TBL_Q
     , G_END_DATE_ACTIVE_SEC_TBL_Q
     , G_ACTIVE_DATE_FIR_TYPE_TBL_Q
     , G_ACTIVE_DATE_SEC_TYPE_TBL_Q
     , G_HEADER_LIMIT_EXISTS_TBL_Q
     , G_DERIVED_QUALIFIER_FLAG_TBL_Q     -- Added for TCA
     , l_status_code
     , l_status_text);
     IF l_status_code = FND_API.G_RET_STS_ERROR THEN
        RAISE FND_API.G_EXC_ERROR;
     END IF;
 END IF;

END LOOP;
CLOSE l_outer_qual_cur;

-- Nitin
-- addeded check to delete header level qualifiers if no line qualifier is selected
-- and the header has no lines without line level qualifier in that phase.

	UPDATE QP_PREQ_QUAL_TMP a
     	SET   a.PRICING_STATUS_CODE = G_DELETED_GRP
    	WHERE
		a.list_line_id = '-1'
    	AND   a.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
    	AND   a.PRICING_PHASE_ID = p_pricing_phase_id
	and 	a.line_index is null
	and 	not exists
		(select 'x' from qp_preq_qual_tmp b where
			b.list_header_id = a.list_header_id
			and b.list_line_id <> '-1'
			and b.pricing_phase_id = p_pricing_phase_id
			and b.pricing_status_code = G_STATUS_UNCHANGED
			and b.line_index is null)
	and 	a.list_header_id in
		(select list_header_id from
			qp_list_header_phases
			where
			pricing_phase_id = p_pricing_phase_id
			and qualifier_flag = 'Y');

 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
	engine_debug('Nitin - Delete headers - rows deleted '||sql%rowcount);

 END IF;
EXCEPTION
  WHEN OTHERS THEN
  x_status_code := FND_API.G_RET_STS_ERROR;
  x_status_text :=l_routine||' '||SQLERRM;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug(l_routine||' '||SQLERRM);
  END IF;
END Cache_Line_Qualifiers;

/*+--------------------------------------------------------------------
  |Cache_Header_Qualifiers
  |To match only the header level qualifiers and get qualified headers (list_line_id = -1)
  |
  +--------------------------------------------------------------------
*/
PROCEDURE Cache_Header_Qualifiers(p_pricing_phase_id IN NUMBER,
					  x_status_code OUT NOCOPY VARCHAR2,
					  x_status_text OUT NOCOPY VARCHAR2) As
/*
INDX,QP_PREQ_GRP.cache_header_qualifiers.l_outer_qual_cur,qp_npreq_line_attrs_tmp_N4,DISTINCT_QUALIFIER_FLAG,1
INDX,QP_PREQ_GRP.cache_header_qualifiers.l_outer_qual_cur,qp_npreq_line_attrs_tmp_N4,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.cache_header_qualifiers.l_outer_qual_cur,qp_npreq_line_attrs_tmp_N4,PRICING_STATUS_CODE,3

INDX,QP_PREQ_GRP.cache_header_qualifiers.l_outer_qual_cur,QP_QUALIFIERS_N4,QUALIFIER_CONTEXT,1
INDX,QP_PREQ_GRP.cache_header_qualifiers.l_outer_qual_cur,QP_QUALIFIERS_N4,QUALIFIER_ATTRIBUTE,2
INDX,QP_PREQ_GRP.cache_header_qualifiers.l_outer_qual_cur,QP_QUALIFIERS_N4,QUALIFIER_ATTR_VALUE,3
INDX,QP_PREQ_GRP.cache_header_qualifiers.l_outer_qual_cur,QP_QUALIFIERS_N4,COMPARISON_OPERATOR_CODE,4
INDX,QP_PREQ_GRP.cache_header_qualifiers.l_outer_qual_cur,QP_QUALIFIERS_N4,ACTIVE_FLAG,5
INDX,QP_PREQ_GRP.cache_header_qualifiers.l_outer_qual_cur,QP_QUALIFIERS_N4,SEARCH_IND,6

INDX,QP_PREQ_GRP.cache_header_qualifiers.l_outer_qual_cur,QP_LIST_HEADER_PHASES_U1,PRICING_PHASE_ID,1
INDX,QP_PREQ_GRP.cache_header_qualifiers.l_outer_qual_cur,QP_LIST_HEADER_PHASES_U1,LIST_HEADER_ID,2

INDX,QP_PREQ_GRP.cache_header_qualifiers.l_outer_qual_cur,QP_LIST_HEADERS_B_N2,LIST_HEADER_ID,1
*/
-- Changed the cursor l_outer_qual_cur for bug#3002632
CURSOR l_OUTER_QUAL_CUR IS
-- Qualifier Only
select /*+ ORDERED USE_NL(qpq qplh qph)  index(qpq qp_qualifiers_n4) index(qph qp_list_headers_b_n7) index(qplatq qp_preq_line_attrs_tmp_n2) dynamic_sampling(1) l_header_outer_qual_cur_mod */
       qpq.list_header_id,
       qpq.list_line_id list_line_id,
       qpq.qualifier_group_cnt,
       qpq.others_group_cnt,
       qpq.header_quals_exist_flag,
       qpq.search_ind,
       G_NO validated_flag,
       G_NO applied_flag,
       G_LINE_LEVEL attribute_level,
       G_QUALIFIER_TYPE attribute_type,
       qplatq.context          ,
       qplatq.attribute        ,
       qplatq.value_from       ,
       qpq.qualifier_grouping_no qualifier_grouping_no ,
       qpq.qualifier_precedence  ,
       qpq.qualifier_datatype,
       qpq.qualifier_attr_value    ,
       qpq.qualifier_attr_value_to ,
       qpq.start_date_active,
       qpq.end_date_active,
       G_NO pricing_attr_flag,
       qpq.comparison_operator_code ,
       qph.list_type_code,
       qph.ask_for_flag,
       qplatq.pricing_status_code,
       'OHQ' ,
        NULL line_index,
        NULL pricing_effective_date,
        qph.start_date_active_first start_date_active_first,
        qph.end_date_active_first   end_date_active_first,
        NULL line_type_code,
	p_pricing_phase_id pricing_phase_id,
        qpq.LIST_HEADER_ID || '-' || qpq.LIST_LINE_ID || '-' || qpq.QUALIFIER_GROUPING_NO UNIQUE_KEY,
        qph.start_date_active start_date_active_h,
        qph.end_date_active end_date_active_h,
        qph.start_date_active_second start_date_active_second,
        qph.end_date_active_second end_date_active_second,
        qph.active_date_first_type,
        qph.active_date_second_type,
        qph.limit_exists_flag,
        qplatq.derived_qualifier_flag    -- Added for TCA
from
	   qp_npreq_line_attrs_tmp qplatq,
	   qp_qualifiers qpq ,
	   qp_list_header_phases qplh,
	   qp_list_headers_b qph,
	   qp_price_req_sources_v qprs
where
      qpq.list_header_id = qplh.list_header_id
and   qplh.list_header_id = qph.list_header_id
-- bug 2799120
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
and   qplh.pricing_phase_id = p_pricing_phase_id
AND   qplh.PRIC_PROD_ATTR_ONLY_FLAG = 'N' -- Pattern changes
and 	 qpq.qualifier_context      = qplatq.context
and 	 qpq.qualifier_attribute    = qplatq.attribute
and   qpq.qualifier_attr_value = qplatq.value_from
and   qpq.comparison_operator_code = '='
and   qpq.list_line_id = -1 -- only Header level quals
and   qpq.search_ind = 1
and   ((qph.currency_code IS NOT NULL AND qph.currency_code = G_CURRENCY_CODE)
       OR
       qph.currency_code IS NULL) -- optional currency
and   ((qph.ask_for_flag = G_YES and
        qph.list_header_id in (SELECT list_header_id
                               FROM qp_npreq_line_attrs_tmp
                               WHERE attribute_type = 'QUALIFIER'
                               AND pricing_status_code = G_STATUS_UNCHANGED
                               AND validated_flag = G_NO
                               AND list_header_id IS NOT NULL))
        OR qph.ask_for_flag = G_NO)
--Begin Bug# 7833575
/*and    ((G_MIN_PRICING_DATE between nvl(qph.start_date_active , G_MIN_PRICING_DATE)
                                         and nvl(qph.end_date_active,G_MIN_PRICING_DATE)
or      G_MAX_PRICING_DATE between nvl(qph.start_date_active , G_MAX_PRICING_DATE)
                                         and nvl(qph.end_date_active,G_MAX_PRICING_DATE)))
and    ((G_MIN_PRICING_DATE between nvl(qpq.start_date_active , G_MIN_PRICING_DATE)
                                         and nvl(qpq.end_date_active,G_MIN_PRICING_DATE)
or      G_MAX_PRICING_DATE between nvl(qpq.start_date_active , G_MAX_PRICING_DATE)
                                         and nvl(qpq.end_date_active,G_MAX_PRICING_DATE)))*/
AND (NVL(qph.end_date_active,G_MIN_PRICING_DATE) >= g_min_pricing_date
	AND NVL(qph.start_date_active, G_MAX_PRICING_DATE) <= g_max_pricing_date)
AND (NVL(qpq.end_date_active,G_MIN_PRICING_DATE) >= g_min_pricing_date
	AND NVL(qpq.start_date_active, G_MAX_PRICING_DATE) <= g_max_pricing_date)
--End Bug# 7833575
and   qph.list_type_code not in ('PRL','AGR')
and   qpq.list_type_code not in ('PRL','AGR')
and   qph.active_flag = G_YES
and   qpq.active_flag = G_YES
and   qplatq.distinct_qualifier_flag = G_YES
and   qpq.list_header_id = qph.list_header_id
and   qplatq.pricing_status_code = G_STATUS_UNCHANGED
and   qplatq.attribute_type = G_QUALIFIER_TYPE
and   qprs.request_type_code = G_REQUEST_TYPE_CODE
and   qph.source_system_code = qprs.source_system_code
and    ((nvl(qplatq.DERIVED_QUALIFIER_FLAG,'N') = 'N')
         OR (qplatq.DERIVED_QUALIFIER_FLAG = 'Y' AND qpq.QUALIFY_HIER_DESCENDENTS_FLAG = 'Y'))  -- Added for TCA
union all
select /*+ ORDERED USE_NL(qpq qplh qph) index(qpq qp_qualifiers_n6) index(qph qp_list_headers_b_n7) index(qplatq qp_preq_line_attrs_tmp_n2) dynamic_sampling(1) l_header_outer_qual_cur_mod */
       qpq.list_header_id,
       qpq.list_line_id list_line_id,
       qpq.qualifier_group_cnt,
       qpq.others_group_cnt,
       qpq.header_quals_exist_flag,
       qpq.search_ind,
       G_NO validated_flag,
       G_NO applied_flag,
       G_LINE_LEVEL attribute_level,
       G_QUALIFIER_TYPE attribute_type,
       qplatq.context          ,
       qplatq.attribute        ,
       qplatq.value_from       ,
       qpq.qualifier_grouping_no qualifier_grouping_no ,
       qpq.qualifier_precedence  ,
       qpq.qualifier_datatype,
       qpq.qualifier_attr_value    ,
       qpq.qualifier_attr_value_to ,
       qpq.start_date_active,
       qpq.end_date_active,
       G_NO pricing_attr_flag,
       qpq.comparison_operator_code ,
       qph.list_type_code,
       qph.ask_for_flag,
       qplatq.pricing_status_code,
       'OHQ' ,
        NULL line_index,
        NULL pricing_effective_date,
        qph.start_date_active_first start_date_active_first,
        qph.end_date_active_first   end_date_active_first,
        NULL line_type_code,
        p_pricing_phase_id pricing_phase_id,
        qpq.LIST_HEADER_ID || '-' || qpq.LIST_LINE_ID || '-' || qpq.QUALIFIER_GROUPING_NO UNIQUE_KEY,
        qph.start_date_active start_date_active_h,
        qph.end_date_active end_date_active_h,
        qph.start_date_active_second start_date_active_second,
        qph.end_date_active_second end_date_active_second,
        qph.active_date_first_type,
        qph.active_date_second_type,
        qph.limit_exists_flag,
        qplatq.derived_qualifier_flag     -- Added for TCA
from
	   qp_npreq_line_attrs_tmp qplatq,
	   qp_qualifiers qpq ,
	   qp_list_header_phases qplh,
	   qp_list_headers_b qph,
	   qp_price_req_sources_v qprs
where
      qpq.list_header_id = qplh.list_header_id
and   qplh.list_header_id = qph.list_header_id
-- bug 2799120
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
and   qplh.pricing_phase_id = p_pricing_phase_id
AND   qplh.PRIC_PROD_ATTR_ONLY_FLAG = 'N' -- Pattern changes
and 	 qpq.qualifier_context      = qplatq.context
and 	 qpq.qualifier_attribute    = qplatq.attribute
and   qpq.comparison_operator_code =  G_OPERATOR_BETWEEN
and   qpq.qualifier_datatype =  G_NUMERIC
and   qpq.search_ind = 1
and   qpq.list_line_id = -1 -- Header level quals
and   qp_number.canonical_to_number(decode(qpq.qualifier_datatype,G_NUMERIC,qplatq.value_from,null))
between qpq.qual_attr_value_from_number and qpq.qual_attr_value_to_number
and   ((qph.currency_code IS NOT NULL AND qph.currency_code = G_CURRENCY_CODE)
       OR
       qph.currency_code IS NULL) -- optional currency
and   ((qph.ask_for_flag = G_YES and
        qph.list_header_id in (SELECT list_header_id
                               FROM qp_npreq_line_attrs_tmp
                               WHERE attribute_type = 'QUALIFIER'
                               AND pricing_status_code = G_STATUS_UNCHANGED
                               AND validated_flag = G_NO
                               AND list_header_id IS NOT NULL))
        OR qph.ask_for_flag = G_NO)
--Begin Bug# 7833575
/*and    ((G_MIN_PRICING_DATE between nvl(qph.start_date_active , G_MIN_PRICING_DATE)
                                         and nvl(qph.end_date_active,G_MIN_PRICING_DATE)
or      G_MAX_PRICING_DATE between nvl(qph.start_date_active , G_MAX_PRICING_DATE)
                                         and nvl(qph.end_date_active,G_MAX_PRICING_DATE)))
and    ((G_MIN_PRICING_DATE between nvl(qpq.start_date_active , G_MIN_PRICING_DATE)
                                         and nvl(qpq.end_date_active,G_MIN_PRICING_DATE)
or      G_MAX_PRICING_DATE between nvl(qpq.start_date_active , G_MAX_PRICING_DATE)
                                         and nvl(qpq.end_date_active,G_MAX_PRICING_DATE)))*/
AND (NVL(qph.end_date_active,G_MIN_PRICING_DATE) >= g_min_pricing_date
	AND NVL(qph.start_date_active, G_MAX_PRICING_DATE) <= g_max_pricing_date)
AND (NVL(qpq.end_date_active,G_MIN_PRICING_DATE) >= g_min_pricing_date
	AND NVL(qpq.start_date_active, G_MAX_PRICING_DATE) <= g_max_pricing_date)
--End Bug# 7833575
and   qph.list_type_code not in ('PRL','AGR')
and   qpq.list_type_code not in ('PRL','AGR')
and   qph.active_flag = G_YES
and   qpq.active_flag = G_YES
and   qplatq.distinct_qualifier_flag = G_YES
and   qpq.list_header_id = qph.list_header_id
and   qplatq.pricing_status_code = G_STATUS_UNCHANGED
and   qplatq.attribute_type = G_QUALIFIER_TYPE
and   qprs.request_type_code = G_REQUEST_TYPE_CODE
and   qph.source_system_code = qprs.source_system_code
and    ((nvl(qplatq.DERIVED_QUALIFIER_FLAG,'N') = 'N')
         OR (qplatq.DERIVED_QUALIFIER_FLAG = 'Y' AND qpq.QUALIFY_HIER_DESCENDENTS_FLAG = 'Y'))  -- Added for TCA
union all
select /*+ ORDERED USE_NL(qpq qplh qph) index(qpq qp_qualifiers_n5) index(qph qp_list_headers_b_n7) index(qplatq qp_preq_line_attrs_tmp_n2) dynamic_sampling(1) l_header_outer_qual_cur_mod */
       qpq.list_header_id,
       qpq.list_line_id list_line_id,
       qpq.qualifier_group_cnt,
       qpq.others_group_cnt,
       qpq.header_quals_exist_flag,
       qpq.search_ind,
       G_NO validated_flag,
       G_NO applied_flag,
       G_LINE_LEVEL attribute_level,
       G_QUALIFIER_TYPE attribute_type,
       qplatq.context          ,
       qplatq.attribute        ,
       qplatq.value_from       ,
       qpq.qualifier_grouping_no qualifier_grouping_no ,
       qpq.qualifier_precedence  ,
       qpq.qualifier_datatype,
       qpq.qualifier_attr_value    ,
       qpq.qualifier_attr_value_to ,
       qpq.start_date_active,
       qpq.end_date_active,
       G_NO pricing_attr_flag,
       qpq.comparison_operator_code ,
       qph.list_type_code,
       qph.ask_for_flag,
       qplatq.pricing_status_code,
       'OHQ' ,
        NULL line_index,
        NULL pricing_effective_date,
        qph.start_date_active_first start_date_active_first,
        qph.end_date_active_first   end_date_active_first,
        NULL line_type_code,
        p_pricing_phase_id pricing_phase_id,
        qpq.LIST_HEADER_ID || '-' || qpq.LIST_LINE_ID || '-' || qpq.QUALIFIER_GROUPING_NO UNIQUE_KEY,
        qph.start_date_active start_date_active_h,
        qph.end_date_active end_date_active_h,
        qph.start_date_active_second start_date_active_second,
        qph.end_date_active_second end_date_active_second,
        qph.active_date_first_type,
        qph.active_date_second_type,
        qph.limit_exists_flag,
        qplatq.derived_qualifier_flag      -- Added for TCA

from
	   qp_npreq_line_attrs_tmp qplatq,
	   qp_qualifiers qpq ,
	   qp_list_header_phases qplh,
	   qp_list_headers_b qph,
	   qp_price_req_sources_v qprs
where
      qpq.list_header_id = qplh.list_header_id
and   qplh.list_header_id = qph.list_header_id
-- bug 2799120
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
and   qplh.pricing_phase_id = p_pricing_phase_id
AND   qplh.PRIC_PROD_ATTR_ONLY_FLAG = 'N' -- Pattern changes
and 	 qpq.qualifier_context      = qplatq.context
and 	 qpq.qualifier_attribute    = qplatq.attribute
and   qpq.comparison_operator_code = G_OPERATOR_BETWEEN
and   qpq.search_ind = 1
and   qpq.list_line_id = -1 -- Header level quals
and   qpq.qualifier_datatype IN (G_VARCHAR,G_DATE_X,G_DATE_Y)
--and   decode(qpq.qualifier_datatype,G_VARCHAR,qplatq.value_from,G_DATE_X,qplatq.value_from,
-- G_DATE_Y,qplatq.value_from,null)
and qplatq.value_from between qpq.qualifier_attr_value and qpq.qualifier_attr_value_to
and   ((qph.currency_code IS NOT NULL AND qph.currency_code = G_CURRENCY_CODE)
       OR
       qph.currency_code IS NULL) -- optional currency
and   ((qph.ask_for_flag = G_YES and
        qph.list_header_id in (SELECT list_header_id
                               FROM qp_npreq_line_attrs_tmp
                               WHERE attribute_type = 'QUALIFIER'
                               AND pricing_status_code = G_STATUS_UNCHANGED
                               AND validated_flag = G_NO
                               AND list_header_id IS NOT NULL))
        OR qph.ask_for_flag = G_NO)
--Begin Bug# 7833575
/*and    ((G_MIN_PRICING_DATE between nvl(qph.start_date_active , G_MIN_PRICING_DATE)
                                         and nvl(qph.end_date_active,G_MIN_PRICING_DATE)
or      G_MAX_PRICING_DATE between nvl(qph.start_date_active , G_MAX_PRICING_DATE)
                                         and nvl(qph.end_date_active,G_MAX_PRICING_DATE)))
and    ((G_MIN_PRICING_DATE between nvl(qpq.start_date_active , G_MIN_PRICING_DATE)
                                         and nvl(qpq.end_date_active,G_MIN_PRICING_DATE)
or      G_MAX_PRICING_DATE between nvl(qpq.start_date_active , G_MAX_PRICING_DATE)
                                         and nvl(qpq.end_date_active,G_MAX_PRICING_DATE)))*/
AND (NVL(qph.end_date_active,G_MIN_PRICING_DATE) >= g_min_pricing_date
	AND NVL(qph.start_date_active, G_MAX_PRICING_DATE) <= g_max_pricing_date)
AND (NVL(qpq.end_date_active,G_MIN_PRICING_DATE) >= g_min_pricing_date
	AND NVL(qpq.start_date_active, G_MAX_PRICING_DATE) <= g_max_pricing_date)
--End Bug# 7833575
and   qph.list_type_code not in ('PRL','AGR')
and   qpq.list_type_code not in ('PRL','AGR')
and   qph.active_flag = G_YES
and   qpq.active_flag = G_YES
and   qplatq.distinct_qualifier_flag = G_YES
and   qpq.list_header_id = qph.list_header_id
and   qplatq.pricing_status_code = G_STATUS_UNCHANGED
and   qplatq.attribute_type = G_QUALIFIER_TYPE
and   qprs.request_type_code = G_REQUEST_TYPE_CODE
and   qph.source_system_code = qprs.source_system_code
and    ((nvl(qplatq.DERIVED_QUALIFIER_FLAG,'N') = 'N')
         OR (qplatq.DERIVED_QUALIFIER_FLAG = 'Y' AND qpq.QUALIFY_HIER_DESCENDENTS_FLAG = 'Y'))  -- Added for TCA
union all
select /*+ ORDERED USE_NL(qpq qplh qph)  index(qpq qp_qualifiers_n5) index(qph qp_list_headers_b_n7) index(qplatq qp_preq_line_attrs_tmp_n2) dynamic_sampling(1) l_header_outer_qual_cur_mod */
       qpq.list_header_id,
       qpq.list_line_id list_line_id,
       qpq.qualifier_group_cnt,
       qpq.others_group_cnt,
       qpq.header_quals_exist_flag,
       qpq.search_ind,
       G_NO validated_flag,
       G_NO applied_flag,
       G_LINE_LEVEL attribute_level,
       G_QUALIFIER_TYPE attribute_type,
       qplatq.context          ,
       qplatq.attribute        ,
       qplatq.value_from       ,
       qpq.qualifier_grouping_no qualifier_grouping_no ,
       qpq.qualifier_precedence  ,
       qpq.qualifier_datatype,
       qpq.qualifier_attr_value    ,
       qpq.qualifier_attr_value_to ,
       qpq.start_date_active,
       qpq.end_date_active,
       G_NO pricing_attr_flag,
       qpq.comparison_operator_code ,
       qph.list_type_code,
       qph.ask_for_flag,
       qplatq.pricing_status_code,
       'OHQ' ,
        NULL line_index,
        NULL pricing_effective_date,
        qph.start_date_active_first start_date_active_first,
        qph.end_date_active_first   end_date_active_first,
        NULL line_type_code,
        p_pricing_phase_id pricing_phase_id,
        qpq.LIST_HEADER_ID || '-' || qpq.LIST_LINE_ID || '-' || qpq.QUALIFIER_GROUPING_NO UNIQUE_KEY,
        qph.start_date_active start_date_active_h,
        qph.end_date_active end_date_active_h,
        qph.start_date_active_second start_date_active_second,
        qph.end_date_active_second end_date_active_second,
        qph.active_date_first_type,
        qph.active_date_second_type,
        qph.limit_exists_flag,
        qplatq.derived_qualifier_flag    -- Added for TCA

from
	   qp_npreq_line_attrs_tmp qplatq,
	   qp_qualifiers qpq ,
	   qp_list_header_phases qplh,
	   qp_list_headers_b qph,
	   qp_price_req_sources_v qprs
where
      qpq.list_header_id = qplh.list_header_id
and   qplh.list_header_id = qph.list_header_id
-- bug 2799120
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
and   qplh.pricing_phase_id = p_pricing_phase_id
AND   qplh.PRIC_PROD_ATTR_ONLY_FLAG = 'N' -- Pattern changes
and 	 qpq.qualifier_context      = qplatq.context
and 	 qpq.qualifier_attribute    = qplatq.attribute
and   qpq.comparison_operator_code = 'NOT ='
and   qpq.qualifier_attr_value <> qplatq.value_from
and   qpq.search_ind = 1
and   qpq.list_line_id = -1 -- Header Level Quals
and   ((qph.currency_code IS NOT NULL AND qph.currency_code = G_CURRENCY_CODE)
       OR
       qph.currency_code IS NULL) -- optional currency
and   ((qph.ask_for_flag = G_YES and
        qph.list_header_id in (SELECT list_header_id
                               FROM qp_npreq_line_attrs_tmp
                               WHERE attribute_type = 'QUALIFIER'
                               AND pricing_status_code = G_STATUS_UNCHANGED
                               AND validated_flag = G_NO
                               AND list_header_id IS NOT NULL))
        OR qph.ask_for_flag = G_NO)
--Begin Bug# 7833575
/*and    ((G_MIN_PRICING_DATE between nvl(qph.start_date_active , G_MIN_PRICING_DATE)
                                         and nvl(qph.end_date_active,G_MIN_PRICING_DATE)
or      G_MAX_PRICING_DATE between nvl(qph.start_date_active , G_MAX_PRICING_DATE)
                                         and nvl(qph.end_date_active,G_MAX_PRICING_DATE)))
and    ((G_MIN_PRICING_DATE between nvl(qpq.start_date_active , G_MIN_PRICING_DATE)
                                         and nvl(qpq.end_date_active,G_MIN_PRICING_DATE)
or      G_MAX_PRICING_DATE between nvl(qpq.start_date_active , G_MAX_PRICING_DATE)
                                         and nvl(qpq.end_date_active,G_MAX_PRICING_DATE)))*/
AND (NVL(qph.end_date_active,G_MIN_PRICING_DATE) >= g_min_pricing_date
	AND NVL(qph.start_date_active, G_MAX_PRICING_DATE) <= g_max_pricing_date)
AND (NVL(qpq.end_date_active,G_MIN_PRICING_DATE) >= g_min_pricing_date
	AND NVL(qpq.start_date_active, G_MAX_PRICING_DATE) <= g_max_pricing_date)
--End Bug# 7833575
and   qph.list_type_code not in ('PRL','AGR')
and   qpq.list_type_code not in ('PRL','AGR')
and   qph.active_flag = G_YES
and   qpq.active_flag = G_YES
and   qplatq.distinct_qualifier_flag = G_YES
and   qpq.list_header_id = qph.list_header_id
and   qplatq.pricing_status_code = G_STATUS_UNCHANGED
and   qplatq.attribute_type = G_QUALIFIER_TYPE
and   qprs.request_type_code = G_REQUEST_TYPE_CODE
and   qph.source_system_code = qprs.source_system_code
and    ((nvl(qplatq.DERIVED_QUALIFIER_FLAG,'N') = 'N')
         OR (qplatq.DERIVED_QUALIFIER_FLAG = 'Y' AND qpq.QUALIFY_HIER_DESCENDENTS_FLAG = 'Y'));  -- Added for TCA


nROWS CONSTANT NUMBER := 1000;

l_status_code VARCHAR2(30);
l_status_text VARCHAR2(240);

l_routine VARCHAR2(240):= 'Routine:QP_PREQ_GRP.Cache_Header_Qualifiers';

BEGIN

 --Delete from QP_PREQ_QUAL_TMP;

 G_QUALIFIER_TEMP := 'E';

 OPEN l_outer_qual_cur;

 LOOP
  G_LIST_HEADER_ID_TBL_Q.delete;
  G_LIST_LINE_ID_TBL_Q.delete;
  G_VALIDATED_FLAG_TBL_Q.delete;
  G_APPLIED_FLAG_TBL_Q.delete;
  G_ATTRIBUTE_LEVEL_TBL_Q.delete;
  G_ATTRIBUTE_TYPE_TBL_Q.delete;
  G_CONTEXT_TBL_Q.delete;
  G_ATTRIBUTE_TBL_Q.delete;
  G_VALUE_FROM_TBL_Q.delete;
  G_GROUPING_NO_TBL_Q.delete;
  G_QUALIFIER_PRECEDENCE_TBL_Q.delete;
  G_DATATYPE_TBL_Q.delete;
  G_SETUP_VALUE_FROM_TBL_Q.delete;
  G_SETUP_VALUE_TO_TBL_Q.delete;
  G_PRICING_ATTR_FLAG_TBL_Q.delete;
  G_OPERATOR_TYPE_TBL_Q.delete;
  G_QUALIFIER_TYPE_TBL_Q.delete;
  G_LIST_TYPE_CODE_TBL_Q.delete;
  G_ASK_FOR_FLAG_TBL_Q.delete;
  G_QUALIFIER_GROUP_CNT_TBL_Q.delete;
  G_OTHERS_GROUP_CNT_TBL_Q.delete;
  G_HEADER_QUALS_EXIST_FLG_TBL_Q.delete;
  G_SEARCH_IND_TBL_Q.delete;
  G_PRICING_STATUS_CODE_TBL_Q.delete;
  G_START_DATE_ACTIVE_TBL_Q.delete;
  G_END_DATE_ACTIVE_TBL_Q.delete;
  G_LINE_INDEX_TBL_Q.delete;
  G_PRICING_EFFECTIVE_DATE_TBL_Q.delete;
  G_START_DATE_ACTIVE_FIR_TBL_Q.delete;
  G_END_DATE_ACTIVE_FIR_TBL_Q.delete;
  G_LINE_TYPE_CODE_TBL_Q.delete;
  G_PRICING_PHASE_ID_TBL_Q.delete;
  G_UNIQUE_KEY_TBL_Q.delete;
  G_START_DATE_ACTIVE_TBL_H_Q.delete;
  G_END_DATE_ACTIVE_TBL_H_Q.delete;
  G_START_DATE_ACTIVE_SEC_TBL_Q.delete;
  G_END_DATE_ACTIVE_SEC_TBL_Q.delete;
  G_ACTIVE_DATE_FIR_TYPE_TBL_Q.delete;
  G_ACTIVE_DATE_SEC_TYPE_TBL_Q.delete;
  G_HEADER_LIMIT_EXISTS_TBL_Q.delete;
  G_DERIVED_QUALIFIER_FLAG_TBL_Q.delete;   -- Added for TCA

  FETCH l_outer_qual_cur
  BULK COLLECT INTO
     G_LIST_HEADER_ID_TBL_Q
   , G_LIST_LINE_ID_TBL_Q
   , G_QUALIFIER_GROUP_CNT_TBL_Q
   , G_OTHERS_GROUP_CNT_TBL_Q
   , G_HEADER_QUALS_EXIST_FLG_TBL_Q
   , G_SEARCH_IND_TBL_Q
   , G_VALIDATED_FLAG_TBL_Q
   , G_APPLIED_FLAG_TBL_Q
   , G_ATTRIBUTE_LEVEL_TBL_Q
   , G_ATTRIBUTE_TYPE_TBL_Q
   , G_CONTEXT_TBL_Q
   , G_ATTRIBUTE_TBL_Q
   , G_VALUE_FROM_TBL_Q
   , G_GROUPING_NO_TBL_Q
   , G_QUALIFIER_PRECEDENCE_TBL_Q
   , G_DATATYPE_TBL_Q
   , G_SETUP_VALUE_FROM_TBL_Q
   , G_SETUP_VALUE_TO_TBL_Q
   , G_START_DATE_ACTIVE_TBL_Q
   , G_END_DATE_ACTIVE_TBL_Q
   , G_PRICING_ATTR_FLAG_TBL_Q
   , G_OPERATOR_TYPE_TBL_Q
   , G_LIST_TYPE_CODE_TBL_Q
   , G_ASK_FOR_FLAG_TBL_Q
   , G_PRICING_STATUS_CODE_TBL_Q
   , G_QUALIFIER_TYPE_TBL_Q
   , G_LINE_INDEX_TBL_Q
   , G_PRICING_EFFECTIVE_DATE_TBL_Q
   , G_START_DATE_ACTIVE_FIR_TBL_Q
   , G_END_DATE_ACTIVE_FIR_TBL_Q
   , G_LINE_TYPE_CODE_TBL_Q
   , G_PRICING_PHASE_ID_TBL_Q
   , G_UNIQUE_KEY_TBL_Q
   , G_START_DATE_ACTIVE_TBL_H_Q
   , G_END_DATE_ACTIVE_TBL_H_Q
   , G_START_DATE_ACTIVE_SEC_TBL_Q
   , G_END_DATE_ACTIVE_SEC_TBL_Q
   , G_ACTIVE_DATE_FIR_TYPE_TBL_Q
   , G_ACTIVE_DATE_SEC_TYPE_TBL_Q
   , G_HEADER_LIMIT_EXISTS_TBL_Q
   , G_DERIVED_QUALIFIER_FLAG_TBL_Q  LIMIT nROWS;     -- Added for TCA
   EXIT WHEN G_LIST_HEADER_ID_TBL_Q.COUNT = 0;

 IF (G_LIST_HEADER_ID_TBL_Q.COUNT > 0) THEN

     G_QUALIFIER_TEMP := 'U';

      INSERT_QUAL(
       G_LIST_HEADER_ID_TBL_Q
     , G_LIST_LINE_ID_TBL_Q
     , G_VALIDATED_FLAG_TBL_Q
     , G_APPLIED_FLAG_TBL_Q
     , G_ATTRIBUTE_LEVEL_TBL_Q
     , G_ATTRIBUTE_TYPE_TBL_Q
     , G_CONTEXT_TBL_Q
     , G_ATTRIBUTE_TBL_Q
     , G_VALUE_FROM_TBL_Q
     , G_GROUPING_NO_TBL_Q
     , G_QUALIFIER_PRECEDENCE_TBL_Q
     , G_DATATYPE_TBL_Q
     , G_SETUP_VALUE_FROM_TBL_Q
     , G_SETUP_VALUE_TO_TBL_Q
     , G_PRICING_ATTR_FLAG_TBL_Q
     , G_OPERATOR_TYPE_TBL_Q
     , G_LIST_TYPE_CODE_TBL_Q
     , G_ASK_FOR_FLAG_TBL_Q
     , G_QUALIFIER_TYPE_TBL_Q
     , G_QUALIFIER_GROUP_CNT_TBL_Q
     , G_OTHERS_GROUP_CNT_TBL_Q
     , G_HEADER_QUALS_EXIST_FLG_TBL_Q
     , G_SEARCH_IND_TBL_Q
     , G_PRICING_STATUS_CODE_TBL_Q
     , G_START_DATE_ACTIVE_TBL_Q
     , G_END_DATE_ACTIVE_TBL_Q
     , G_LINE_INDEX_TBL_Q
     , G_PRICING_EFFECTIVE_DATE_TBL_Q
     , G_START_DATE_ACTIVE_FIR_TBL_Q
     , G_END_DATE_ACTIVE_FIR_TBL_Q
     , G_LINE_TYPE_CODE_TBL_Q
     , G_PRICING_PHASE_ID_TBL_Q
     , G_UNIQUE_KEY_TBL_Q
     , G_START_DATE_ACTIVE_TBL_H_Q
     , G_END_DATE_ACTIVE_TBL_H_Q
     , G_START_DATE_ACTIVE_SEC_TBL_Q
     , G_END_DATE_ACTIVE_SEC_TBL_Q
     , G_ACTIVE_DATE_FIR_TYPE_TBL_Q
     , G_ACTIVE_DATE_SEC_TYPE_TBL_Q
     , G_HEADER_LIMIT_EXISTS_TBL_Q
     , G_DERIVED_QUALIFIER_FLAG_TBL_Q     -- Added for TCA
     , l_status_code
     , l_status_text);
 END IF;

END LOOP;
CLOSE l_outer_qual_cur;
EXCEPTION
  WHEN OTHERS THEN
  x_status_code := FND_API.G_RET_STS_ERROR;
  x_status_text :=l_routine||' '||SQLERRM;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug(l_routine||' '||SQLERRM);

  END IF;
END Cache_Header_Qualifiers;

/*+--------------------------------------------------------------------
  |Reset_All_Tbls
  |To Reset all pl/sql tables.
  +--------------------------------------------------------------------
*/
PROCEDURE Reset_All_Tbls(x_status_code OUT NOCOPY VARCHAR2,
                         x_status_text OUT NOCOPY VARCHAR2)
AS
l_routine VARCHAR2(240):='QP_PREQ_GRP.Reset_All_Tbls';
BEGIN
 G_LINE_INDEX_tbl.delete;
 G_USAGE_PRICING_TYPE_TBL.delete;
 G_LINE_CATEGORY_TBL.delete;
 G_LINE_CATEGORY_DEF_TBL.delete;
 G_CONTRACT_START_DATE_TBL.delete;	/* shulin */
 G_CONTRACT_END_DATE_TBL.delete;	/* shulin */
 G_LINE_UNIT_PRICE_TBL.delete;	/* shu_latest */
 G_CONTRACT_START_DATE_DEF_TBL.delete;	/* shulin */
 G_CONTRACT_END_DATE_DEF_TBL.delete;	/* shulin */
 G_LINE_UNIT_PRICE_DEF_TBL.delete;	/* shu_latest */
 G_CHARGE_PERIODICITY_CODE_TBL.delete;
 G_CURRENCY_HEADER_ID_DEF_TBL.delete;    /* vivek */
 G_SELLING_ROUNDING_DEF_TBL.delete;    /* vivek */
 G_ORDER_CURRENCY_DEF_TBL.delete;        /* vivek */
 G_PRICING_EFF_DATE_DEF_TBL.delete;      /* vivek */
 G_BASE_CURRENCY_DEF_TBL.delete;         /* vivek */
 G_CURRENCY_DETAIL_ID_DEF_TBL.delete;    /* sunilpandey */

 G_LINE_DETAIL_INDEX_tbl.delete;
 G_ATTRIBUTE_LEVEL_tbl.delete;
 G_ATTRIBUTE_TYPE_tbl.delete;
 G_LIST_HEADER_ID_tbl.delete;
 G_LIST_LINE_ID_tbl.delete;
 G_CONTEXT_tbl.delete;
 G_ATTRIBUTE_tbl.delete;
 G_VALUE_FROM_tbl.delete;
 G_SETUP_VALUE_FROM_tbl.delete;
 G_VALUE_TO_tbl.delete;
 G_SETUP_VALUE_TO_tbl.delete;
 G_GROUPING_NUMBER_tbl.delete;
 G_NO_QUALIFIERS_IN_GRP_tbl.delete;
 G_COMPARISON_OPERATOR_TYPE_tbl.delete;
 G_VALIDATED_FLAG_tbl.delete;
 G_APPLIED_FLAG_tbl.delete;
 G_PRICING_STATUS_CODE_tbl.delete;
 G_PRICING_STATUS_TEXT_tbl.delete;
 G_QUALIFIER_PRECEDENCE_tbl.delete;
 G_DATATYPE_tbl.delete;
 G_PRICING_ATTR_FLAG_tbl.delete;
 G_QUALIFIER_TYPE_tbl.delete;
 G_product_uom_code_tbl.delete;

 G_ROUNDING_FLAG_TBL.delete;
 G_LINE_TYPE_CODE_TBL.delete          ;
 G_PRICING_EFFECTIVE_DATE_TBL.delete  ;
 G_ACTIVE_DATE_FIRST_TBL.delete       ;
 G_ACTIVE_DATE_FIRST_TYPE_TBL.delete  ;
 G_ACTIVE_DATE_SECOND_TBL.delete      ;
 G_ACTIVE_DATE_SECOND_TYPE_TBL.delete ;
 G_LINE_QUANTITY_TBL.delete           ;
 G_LINE_UOM_CODE_TBL.delete           ;
 G_REQUEST_TYPE_CODE_TBL.delete       ;
 G_PRICED_QUANTITY_TBL.delete         ;
 G_UOM_QUANTITY_TBL.delete         ;
 G_PRICED_UOM_CODE_TBL.delete         ;
 G_CURRENCY_CODE_TBL.delete           ;
 G_UNIT_PRICE_TBL.delete              ;
 G_PERCENT_PRICE_TBL.delete           ;
 G_ADJUSTED_UNIT_PRICE_TBL.delete     ;
 G_UPD_ADJUSTED_UNIT_PRICE_TBL.delete;
 G_PROCESSED_FLAG_TBL.delete          ;
 G_PRICE_FLAG_TBL.delete              ;
 G_LINE_ID_TBL.delete                 ;
 G_PROCESSING_ORDER_TBL.delete        ;
 G_EXCLUDER_FLAG_TBL.delete               ;
 G_PRICE_REQUEST_CODE_TBL.delete;
 G_HEADER_LIMIT_EXISTS_TBL.delete;
 G_LINE_LIMIT_EXISTS_TBL.delete;
 G_CHARGE_TYPE_CODE_TBL.delete;
 G_CHARGE_SUBTYPE_CODE_TBL.delete;
 G_CURRENCY_HEADER_ID_TBL.delete;           /* vivek */
 G_SELLING_ROUNDING_TBL.delete;           /* vivek */
 G_ORDER_CURRENCY_TBL.delete;               /* vivek */
 G_BASE_CURRENCY_CODE_TBL.delete;           /* vivek */
 G_CURRENCY_DETAIL_ID_TBL.delete;           /* sunilpandey */
 G_ACCUM_CONTEXT_TBL.delete;   -- accum range break
 G_ACCUM_ATTRIBUTE_TBL.delete; -- accum range break
 G_ACCUM_FLAG_TBL.delete;      -- accum range break
 G_UPDATED_FLAG_TBL.delete;       -- 3215497
 G_CALCULATION_CODE_TBL.delete;   -- 3215497
 G_CHANGE_REASON_CODE_TBL.delete; -- 3215497
 G_CHANGE_REASON_TEXT_TBL.delete; -- 3215497
 G_PROCESS_CODE_TBL.delete;       -- 3215497
  G_LINE_DETAIL_TYPE_CODE_TBL.delete        ;
  G_PRICE_BREAK_TYPE_CODE_TBL.delete        ;
  G_LIST_PRICE_TBL.delete                   ;
  G_LIST_LINE_TYPE_TBL.delete               ;
  G_LIST_TYPE_CODE_TBL.delete               ;
  G_CREATED_FROM_SQL_TBL.delete             ;
  G_PRICING_GROUP_SEQUENCE_TBL.delete       ;
  G_PRICING_PHASE_ID_TBL.delete             ;
  G_OPERAND_CALCULATION_CODE_TBL.delete     ;
  G_OPERAND_VALUE_TBL.delete                ;
  G_SUBSTITUTION_TYPE_CODE_TBL.delete       ;
  G_SUBSTITUTION_VALUE_FROM_TBL.delete      ;
  G_SUBSTITUTION_VALUE_TO_TBL.delete        ;
  G_ASK_FOR_FLAG_TBL.delete                 ;
  G_PRICE_FORMULA_ID_TBL.delete             ;
  G_PRODUCT_PRECEDENCE_TBL.delete           ;
  G_INCOMP_GRP_CODE_TBL.delete              ;
  G_AUTOMATIC_FLAG_TBL.delete               ;
  G_OVERRIDE_FLAG_TBL.delete                ;
  G_PRIMARY_UOM_FLAG_TBL.delete             ;
  G_PRINT_ON_INVOICE_FLAG_TBL.delete        ;
  G_MODIFIER_LEVEL_CODE_TBL.delete          ;
  G_BENEFIT_QTY_TBL.delete                  ;
  G_BENEFIT_UOM_CODE_TBL.delete             ;
  G_LIST_LINE_NO_TBL.delete                 ;
  G_ACCRUAL_FLAG_TBL.delete                 ;
  G_ACCRUAL_CONVERSION_RATE_TBL.delete      ;
  G_ESTIM_ACCRUAL_RATE_TBL.delete           ;
  G_RECURRING_FLAG_TBL.delete               ;
  G_QUALIFIERS_EXIST_FLAG_TBL.delete;
  G_PRICING_ATTRS_EXIST_FLAG_TBL.delete;
  G_SELECTED_VOLUME_ATTR_TBL.delete         ;
  G_ROUNDING_FACTOR_TBL.delete              ;
  G_LINE_INDEX_LD_TBL.delete                ;
  G_LINE_DETAIL_INDEX_LD_TBL.delete         ;
  G_LIST_HEADER_ID_LD_TBL.delete            ;
  G_LIST_LINE_ID_LD_TBL.delete              ;
  G_PRICING_STATUS_CODE_LD_TBL.delete       ;
  G_PRICING_STATUS_TEXT_LD_TBL.delete       ;
  G_APPLIED_FLAG_LD_TBL.delete;
  G_PROCESSED_FLAG_LD_TBL.delete;
  G_LINE_INDEX_l_TBL.delete;
  G_LINE_DETAIL_INDEX_l_TBL.delete;
  G_PRICING_STATUS_CODE_L_TBL.delete;
  G_PRICING_STATUS_TEXT_L_TBL.delete;

  G_LIST_HEADER_ID_TBL_Q.delete;
  G_LIST_LINE_ID_TBL_Q.delete;
  G_LINE_INDEX_TBL_Q.delete;
  G_VALIDATED_FLAG_TBL_Q.delete;
  G_APPLIED_FLAG_TBL_Q.delete;
  G_START_DATE_ACTIVE_TBL_Q.delete;
  G_END_DATE_ACTIVE_TBL_Q.delete;
  G_PRICING_EFFECTIVE_DATE_TBL_Q.delete;
  G_LINE_TYPE_CODE_TBL_Q.delete;
  G_ATTRIBUTE_LEVEL_TBL_Q.delete;
  G_ATTRIBUTE_TYPE_TBL_Q.delete;
  G_CONTEXT_TBL_Q.delete;
  G_ATTRIBUTE_TBL_Q.delete;
  G_VALUE_FROM_TBL_Q.delete;
  G_GROUPING_NO_TBL_Q.delete;
  G_QUALIFIER_PRECEDENCE_TBL_Q.delete;
  G_DATATYPE_TBL_Q.delete;
  G_SETUP_VALUE_FROM_TBL_Q.delete;
  G_SETUP_VALUE_TO_TBL_Q.delete;
  G_PRICING_ATTR_FLAG_TBL_Q.delete;
  G_OPERATOR_TYPE_TBL_Q.delete;
  G_CURRENCY_CODE_TBL_Q.delete;
  G_ASK_FOR_FLAG_TBL_Q.delete;
  G_LIST_TYPE_CODE_TBL_Q.delete;
  G_QUALIFIER_TYPE_TBL_Q.delete;
  G_QUALIFIER_GROUP_CNT_TBL_Q.delete;
  G_OTHERS_GROUP_CNT_TBL_Q.delete;
  G_HEADER_QUALS_EXIST_FLG_TBL_Q.delete;
  G_SEARCH_IND_TBL_Q.delete;
  G_HEADER_LIMIT_EXISTS_TBL_Q.delete;
  G_LIST_LINE_NO_TBL_Q.delete;

  G_LINE_INDEX_TBL_P.delete;
  G_LINE_DETAIL_INDEX_TBL_P.delete;
  G_LIST_HEADER_ID_TBL_P.delete;
  G_LIST_LINE_ID_TBL_P.delete;
  G_PRICE_BREAK_TYPE_CODE_TBL_P.delete;
  G_LIST_PRICE_TBL_P.delete;
  G_LIST_LINE_TYPE_TBL_P.delete;
  G_LIST_TYPE_CODE_TBL_P.delete;
  G_PRICING_GROUP_SEQUENCE_TBL_P.delete;
  G_PRICING_PHASE_ID_TBL_P.delete;
  G_OPER_CALCULATION_CODE_TBL_P.delete;
  G_OPERAND_VALUE_TBL_P.delete;
  G_ASK_FOR_FLAG_TBL_P.delete;
  G_PRICE_FORMULA_ID_TBL_P.delete;
  G_PRODUCT_PRECEDENCE_TBL_P.delete;
  G_INCOMP_GRP_CODE_TBL_P.delete;
  G_AUTOMATIC_FLAG_TBL_P.delete;
  G_OVERRIDE_FLAG_TBL_P.delete;
  G_PRIMARY_UOM_FLAG_TBL_P.delete;
  G_PRINT_ON_INVOICE_FLAG_TBL_P.delete;
  G_MODIFIER_LEVEL_CODE_TBL_P.delete;
  G_BENEFIT_QTY_TBL_P.delete;
  G_BENEFIT_UOM_CODE_TBL_P.delete;
  G_LIST_LINE_NO_TBL_P.delete;
  G_ACCRUAL_FLAG_TBL_P.delete;
  G_ACCR_CONVERSION_RATE_TBL_P.delete;
  G_ESTIM_ACCRUAL_RATE_TBL_P.delete;
  G_ATTRIBUTE_LEVEL_TBL_P.delete;
  G_ATTRIBUTE_TYPE_TBL_P.delete;
  G_CONTEXT_TBL_P.delete;
  G_ATTRIBUTE_TBL_P.delete;
  G_VALUE_FROM_TBL_P.delete;
  G_SETUP_VALUE_FROM_TBL_P.delete;
  G_VALIDATED_FLAG_TBL_P.delete;
  G_APPLIED_FLAG_TBL_P.delete;
  G_PRICING_ATTR_FLAG_TBL_P.delete;
  G_GROUPING_NUMBER_TBL_P.delete;
  G_QUALIFIER_PRECEDENCE_TBL_P.delete;
  G_EXCLUDER_FLAG_TBL_P.delete;
  G_PRODUCT_UOM_CODE_TBL_P.delete;
  G_QUALIFIER_TYPE_TBL_P.delete;
  G_ROUNDING_FACTOR_TBL_P.delete;
  G_HEADER_LIMIT_EXISTS_TBL_P.delete;
  G_LINE_LIMIT_EXISTS_TBL_P.delete;
  G_CHARGE_TYPE_CODE_TBL_P.delete;
  G_CHARGE_SUBTYPE_CODE_TBL_P.delete;
  G_CURRENCY_HEADER_ID_TBL_P.delete;      /* vivek */
  G_SELLING_ROUNDING_TBL_P.delete;      /* vivek */
  G_ORDER_CURRENCY_TBL_P.delete;          /* vivek */
  G_PRICING_EFFECTIVE_DATE_TBL_P.delete;  /* vivek */
  G_BASE_CURRENCY_CODE_TBL_P.delete;      /* vivek */
  G_CURRENCY_DETAIL_ID_TBL_P.delete;      /* sunilpandey */
  G_ACCUM_CONTEXT_TBL_P.delete;   -- accum range break
  G_ACCUM_ATTRIBUTE_TBL_P.delete; -- accum range break
  G_ACCUM_FLAG_TBL_P.delete;      -- accum range break

  G_ATTRIBUTE_LEVEL_TBL_PR.delete;
  G_ATTRIBUTE_TYPE_TBL_PR.delete;
  G_CONTEXT_TBL_PR.delete;
  G_ATTRIBUTE_TBL_PR.delete;
  G_VALUE_FROM_TBL_PR.delete;
  G_OPERATOR_TYPE_TBL_PR.delete;
  G_SETUP_VALUE_FROM_TBL_PR.delete;
  G_SETUP_VALUE_TO_TBL_PR.delete;
  G_DATATYPE_TBL_PR.delete;

  G_LINE_INDEX_TBL_B.delete;
  G_LIST_HEADER_ID_TBL_B.delete;
  G_LIST_LINE_ID_TBL_B.delete;
  G_PRICE_BREAK_TYPE_CODE_TBL_B.delete;
  G_LIST_PRICE_TBL_B.delete;
  G_LIST_LINE_TYPE_TBL_B.delete;
  G_LIST_TYPE_CODE_TBL_B.delete;
  G_PRICING_GROUP_SEQUENCE_TBL_B.delete;
  G_PRICING_PHASE_ID_TBL_B.delete;
  G_OPER_CALCULATION_CODE_TBL_B.delete;
  G_OPERAND_VALUE_TBL_B.delete;
  G_ASK_FOR_FLAG_TBL_B.delete;
  G_PRICE_FORMULA_ID_TBL_B.delete;
  G_PRODUCT_PRECEDENCE_TBL_B.delete;
  G_INCOMP_GRP_CODE_TBL_B.delete;
  G_AUTOMATIC_FLAG_TBL_B.delete;
  G_OVERRIDE_FLAG_TBL_B.delete;
  G_PRIMARY_UOM_FLAG_TBL_B.delete;
  G_PRINT_ON_INVOICE_FLAG_TBL_B.delete;
  G_MODIFIER_LEVEL_CODE_TBL_B.delete;
  G_BENEFIT_QTY_TBL_B.delete;
  G_BENEFIT_UOM_CODE_TBL_B.delete;
  G_LIST_LINE_NO_TBL_B.delete;
  G_ACCRUAL_FLAG_TBL_B.delete;
  G_ACCR_CONVERSION_RATE_TBL_B.delete;
  G_ESTIM_ACCRUAL_RATE_TBL_B.delete;
  G_LINE_INDEX_TBL_G.delete;
  G_LIST_HEADER_ID_TBL_G.delete;
  G_LIST_LINE_ID_TBL_G.delete;
  G_NO_OF_PATTS_IN_GRP_TBL_G.delete;

  G_PRICING_PHASE_ID_TBL_A.delete;
  G_INCOMP_GRP_CODE_TBL_A.delete;
  G_LINE_DETAIL_TYPE_CODE_TBL_A.delete;
  G_MODIFIER_LEVEL_CODE_TBL_A.delete;
  G_PRIMARY_UOM_FLAG_TBL_A.delete;

EXCEPTION
WHEN OTHERS THEN
 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug(l_routine||': '||SQLERRM);
 END IF;
 x_status_code := FND_API.G_RET_STS_ERROR;
 x_status_text := l_routine || ': '  || SQLERRM;
END Reset_All_Tbls;

/*+---------------------------------------------------------------------
  |Update Processing_Order
  |For service lines, two request lines might be related to each other and one
  |might be the parent and the other might be child.
  |This relationship are passed by the calling application
  |thru rltd_tbl structure. From this structure, we can find
  |the which is the parent and child.  Parent lines
  |need to be process before the child lines.  This information
  |is store in processing_order column in temp by this procedure
  +---------------------------------------------------------------------
*/
PROCEDURE Update_Processing_Order (x_status_code OUT NOCOPY VARCHAR2,
                                   x_status_text OUT NOCOPY VARCHAR2)
AS

/*
INDX,QP_PREQ_GRP.Update_Processing_Order.l_Service_Cur,-No Index Used-,NA,NA
*/
CURSOR l_Service_Cur IS
  SELECT LINE_INDEX,
         RELATED_LINE_INDEX
  FROM qp_npreq_rltd_lines_tmp
  WHERE LINE_INDEX IS NOT NULL
  AND   RELATED_LINE_INDEX IS NOT NULL
  AND   RELATIONSHIP_TYPE_CODE = G_SERVICE_LINE;

l_routine VARCHAR2(240):= 'Routine:QP_PREQ_GRP.Update_Processing_Order';
l_line_index_tbl NUMBER_TYPE;
l_related_line_index_tbl NUMBER_TYPE;

BEGIN
x_status_code := FND_API.G_RET_STS_SUCCESS;
/*
INDX,QP_PREQ_GRP.Update_Processing_Order.Update_Processing_Order_upd1,qp_npreq_lines_tmp_U1,LINE_INDEX,1
*/

  -- julin [3805113]: using bulk collect and update
  OPEN l_Service_Cur;
  LOOP
    FETCH l_Service_Cur BULK COLLECT INTO
       l_line_index_tbl,
       l_related_line_index_tbl
       LIMIT G_BATCH_SIZE;
    EXIT WHEN l_line_index_tbl.count = 0;

     -- julin [3805113]: bulk update
     FORALL I IN l_line_index_tbl.first..l_line_index_tbl.last
       UPDATE qp_npreq_lines_tmp --upd1
       SET PROCESSING_ORDER = 1
       WHERE LINE_INDEX = l_line_index_tbl(I);

--Assuming that parent line has it index on related_line_index column
/*
INDX,QP_PREQ_GRP.Update_Processing_Order.Update_Processing_Order_upd2,qp_npreq_lines_tmp_U1,LINE_INDEX,1
*/
     -- julin [3805113]: bulk update
     FORALL I IN l_related_line_index_tbl.first..l_related_line_index_tbl.last
       UPDATE qp_npreq_lines_tmp --upd2
       SET PROCESSING_ORDER = 2
       WHERE LINE_INDEX = l_related_line_index_tbl(I);

  END LOOP;
  CLOSE l_Service_Cur;

--added for 4900095
--marking the service lines with uom_quantity as null
--this will be used in lumpsum calculation
for cl in (select line_index from qp_npreq_lines_tmp line
           where processing_order = 2
           and (contract_start_date is not null or contract_end_date is not null)
           and uom_quantity is null)
loop
  G_service_line_ind_tbl(cl.line_index) := cl.line_index;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    IF G_service_line_ind_tbl.exists(cl.line_index) THEN
      engine_debug('service line with uom_qty as null line_index: '||G_service_line_ind_tbl(cl.line_index));
    END IF;--G_service_line_ind_tbl.exists
  END IF;--G_DEBUG_ENGINE
end loop;

EXCEPTION
  WHEN OTHERS THEN
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug(l_routine||' '||SQLERRM);
   END IF;
   x_status_code := FND_API.G_RET_STS_ERROR;
   x_status_text := 'Error in '||l_routine||SQLERRM;
END;

/*+----------------------------------------------------------------------
  | Function GET_LINE_DETAIL_INDEX
  | Output: Unique number
  | This function behave like a sequence, to return uniq
  +----------------------------------------------------------------------
*/
FUNCTION GET_LINE_DETAIL_INDEX RETURN PLS_INTEGER IS
BEGIN
 G_LINE_DETAIL_INDEX :=G_LINE_DETAIL_INDEX + 1;
 RETURN G_LINE_DETAIL_INDEX;
END;

/*+----------------------------------------------------------------------
  |PROCEDURE SET_STATUS_CODE
  +----------------------------------------------------------------------
*/
PROCEDURE SET_STATUS_CODE (p_status_code IN VARCHAR2,
                           p_status_text IN VARCHAR2:=NULL,
                           p_line_index    IN NUMBER,
                           p_line_detail_index IN PLS_INTEGER:=NULL,
                           p_temp_table  IN VARCHAR2,
                           x_status_code OUT NOCOPY VARCHAR2,
                           x_status_text OUT NOCOPY VARCHAR2)
AS
l_routine VARCHAR2(240):='QP_PREQ_GRP.SET_STATUS_CODE';
BEGIN
   IF(p_temp_table = 'LINES') THEN
/*
INDX,QP_PREQ_GRP.set_status_code.set_status_code_upd1,qp_npreq_lines_tmp_N1,LINE_INDEX,1
*/
	-- shulin fix bug1745788, widen substr to 2000
   UPDATE qp_npreq_lines_tmp --upd1
      SET PRICING_STATUS_CODE = p_status_code,
          PRICING_STATUS_TEXT = substr(p_status_text,1,2000)
      WHERE LINE_INDEX = p_line_index;
   ELSIF (p_temp_table = 'LDETS' AND p_line_index IS NOT NULL) THEN
/*
INDX,QP_PREQ_GRP.set_status_code.set_status_code_upd2,qp_npreq_ldets_tmp_N1,LINE_INDEX,1
*/
	-- shulin fix bug1745788, widen substr to 2000
      UPDATE qp_npreq_ldets_tmp     --upd2
        SET PRICING_STATUS_CODE = p_status_code,
            PRICING_STATUS_TEXT =
                  substr(pricing_status_code||'+'||p_status_code||'+'||p_status_text,1,2000)
        WHERE LINE_INDEX = p_line_index
	   AND   PRICING_STATUS_CODE <> G_STATUS_UNCHANGED;
   ELSIF (p_temp_table = 'ATTRS' AND p_line_index IS NOT NULL
          AND p_line_detail_index IS NULL) THEN
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug('----Updating status code for LDETS---------');
        END IF;
/*
INDX,QP_PREQ_GRP.set_status_code.set_status_code_upd3,qp_npreq_line_attrs_tmp_N1,LINE_INDEX,1
INDX,QP_PREQ_GRP.set_status_code.set_status_code_upd3,qp_npreq_line_attrs_tmp_N1,PRICING_STATUS_CODE,3
*/
        UPDATE /*+ dynamic_sampling(1) */ qp_npreq_line_attrs_tmp     --upd3
        SET PRICING_STATUS_CODE = p_status_code,
            PRICING_STATUS_TEXT = substr(p_status_text,1,240)
        WHERE LINE_INDEX = p_line_index
        AND   PRICING_STATUS_CODE <> G_STATUS_UNCHANGED;
   END IF;
EXCEPTION
  WHEN OTHERS THEN
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug(l_routine||' '||SQLERRM);
   END IF;
   x_status_code := FND_API.G_RET_STS_ERROR;
   x_status_text := l_routine||': '||SQLERRM;

END SET_STATUS_CODE;


/*+----------------------------------------------------------------------
  |PROCEDURE SET_PROCESSED_CODE
  +----------------------------------------------------------------------
*/
PROCEDURE SET_PROCESSED_CODE (p_processed_code IN VARCHAR2,
                              p_line_index    IN NUMBER,
                              p_line_detail_index IN PLS_INTEGER:=NULL,
                              p_temp_table  IN VARCHAR2,
                              x_status_code OUT NOCOPY VARCHAR2,
                              x_status_text OUT NOCOPY VARCHAR2)
AS
l_routine VARCHAR2(240):='QP_PREQ_GRP.SET_PROCESSED_CODE';
BEGIN
   IF(p_temp_table = 'LINES') THEN
/*
INDX,QP_PREQ_GRP.set_processed_code.set_processed_code_upd1,qp_npreq_lines_tmp_N1,LINE_INDEX,1
*/
   UPDATE qp_npreq_lines_tmp --upd1
      SET PROCESSED_CODE = p_processed_code
      WHERE LINE_INDEX = p_line_index;
    ELSIF (p_temp_table = 'ATTRS' AND p_line_index IS NOT NULL
          AND p_line_detail_index IS NULL) THEN
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug('----Updating status code for LDETS---------');
        END IF;
/*
INDX,QP_PREQ_GRP.set_processed_code.set_processed_code_upd2,qp_npreq_line_attrs_tmp_N1,LINE_INDEX,1
*/
        UPDATE qp_npreq_line_attrs_tmp      --upd2
        SET PROCESSED_CODE = p_processed_code
        WHERE LINE_INDEX = p_line_index;
   END IF;
EXCEPTION
  WHEN OTHERS THEN
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug(l_routine||' '||SQLERRM);
   END IF;
   x_status_code := FND_API.G_RET_STS_ERROR;
   x_status_text := l_routine||': '||SQLERRM;

END SET_PROCESSED_CODE;

/*+----------------------------------------------------
  |PROCEDURE DELETE_ALL_LINES
  |This procedure mark qp_npreq_line_attrs_tmp and qp_npreq_ldets_tmp
  |for delete. And mark qp_preq_lines status code as
  |whatever calling procedure wanted. Which is usually
  |not a 'Delete' because record in qp_npreq_lines_tmp
  |is the only one which communicates with outside
  |world (order managment for example).
  +----------------------------------------------------
*/

PROCEDURE DELETE_LINES(p_line_index       IN NUMBER,
                       p_line_status_code IN VARCHAR2,
                       p_status_text      IN VARCHAR2,
                       x_status_code OUT NOCOPY VARCHAR2,
                       x_status_text OUT NOCOPY VARCHAR2) AS

l_routine VARCHAR2(240):='QP_PREQ_GRP.DELETE_LINES';

l_error_status_code VARCHAR2(30);
l_error_status_text VARCHAR2(240);

E_ROUTINE_ERRORS EXCEPTION;

BEGIN
       SET_STATUS_CODE(p_line_status_code,
                       p_status_text,
                       P_LINE_INDEX,
                       NULL,
                      'LINES',
                       l_error_status_code,
                       l_error_status_text);

       IF (l_error_status_code = FND_API.G_RET_STS_ERROR) THEN
        RAISE E_ROUTINE_ERRORS;
       END IF;

       SET_STATUS_CODE(G_STATUS_DELETED,
                       p_status_text,
                       P_LINE_INDEX,
                       NULL,
                      'ATTRS',
                       l_error_status_code,
                       l_error_status_text);

       IF (l_error_status_code = FND_API.G_RET_STS_ERROR) THEN
        RAISE E_ROUTINE_ERRORS;
       END IF;

       SET_STATUS_CODE(G_STATUS_DELETED,
                       p_status_text,
                       P_LINE_INDEX,
                       NULL,
                      'LDETS',
                       l_error_status_code,
                       l_error_status_text);

       IF (l_error_status_code = FND_API.G_RET_STS_ERROR) THEN
        RAISE E_ROUTINE_ERRORS;
       END IF;

EXCEPTION
  WHEN E_ROUTINE_ERRORS THEN
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug(l_routine||': '||l_error_status_text);
     END IF;
     x_status_code := FND_API.G_RET_STS_ERROR;
     x_status_text := l_routine||': '||l_error_status_text;
  WHEN OTHERS THEN
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug(l_routine||' '||SQLERRM);
   END IF;
   x_status_code := FND_API.G_RET_STS_ERROR;
   x_status_text := 'Error in '||l_routine||SQLERRM;
END DELETE_LINES;

/*+----------------------------------------------------------------------
  |Procedure Group INSERT_LINE_ATTRS2_AT
  +----------------------------------------------------------------------
*/

PROCEDURE INSERT_LINE_ATTRS2_AT
   (    p_LINE_INDEX_tbl                number_type,
        p_LINE_DETAIL_INDEX_tbl         pls_integer_type ,
        p_ATTRIBUTE_TYPE_tbl            varchar_type,
        p_CONTEXT_tbl                   varchar_type,
        p_ATTRIBUTE_tbl                 varchar_type,
        p_VALUE_FROM_tbl                varchar_type,
        p_VALUE_TO_tbl                  varchar_type,
        p_VALIDATED_FLAG_tbl            varchar_type,
        x_status_code                   OUT NOCOPY VARCHAR2,
        x_status_text                   OUT NOCOPY VARCHAR2)
AS
 PRAGMA AUTONOMOUS_TRANSACTION;
 l_routine VARCHAR2(240):= 'Routine:QP_PREQ_GRP.INSERT_LINE_ATTRS2_AT';
 l_request_id number;

BEGIN
 x_status_code := FND_API.G_RET_STS_SUCCESS;
 l_request_id := nvl(SYS_CONTEXT('QP_CONTEXT','request_id'),-9999);

FORALL i in p_line_index_tbl.FIRST..p_line_index_tbl.LAST
 INSERT INTO QP_INT_LINE_ATTRS_T
                (LINE_INDEX,
                 LINE_DETAIL_INDEX,
                 ATTRIBUTE_TYPE,
                 CONTEXT,
                 ATTRIBUTE,
                 VALUE_FROM,
                 VALUE_TO,
                 VALIDATED_FLAG,
                 request_id)
VALUES          (p_LINE_INDEX_tbl(i),
                 p_LINE_DETAIL_INDEX_tbl(i),
                 p_ATTRIBUTE_TYPE_tbl(i),
                 p_CONTEXT_tbl(i),
                 p_ATTRIBUTE_tbl(i),
                 p_VALUE_FROM_tbl(i),
                 p_VALUE_TO_tbl(i),
                 p_VALIDATED_FLAG_tbl(i),
                 l_request_id);
 /*INSERT INTO QP_INT_LINE_ATTRS
                (LINE_INDEX,
                 LINE_DETAIL_INDEX,
                 ATTRIBUTE_TYPE,
                 CONTEXT,
                 ATTRIBUTE,
                 VALUE_FROM,
                 VALUE_TO,
                 VALIDATED_FLAG)
VALUES          (p_LINE_INDEX_tbl(i),
                 p_LINE_DETAIL_INDEX_tbl(i),
                 p_ATTRIBUTE_TYPE_tbl(i),
                 p_CONTEXT_tbl(i),
                 p_ATTRIBUTE_tbl(i),
                 p_VALUE_FROM_tbl(i),
                 p_VALUE_TO_tbl(i),
                 p_VALIDATED_FLAG_tbl(i));
*/
 QP_PREQ_GRP.G_INT_ATTRS_NO := QP_PREQ_GRP.G_INT_ATTRS_NO + p_LINE_INDEX_tbl.count;
 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   QP_PREQ_GRP.engine_debug('QP_PREQ_GRP.G_INT_ATTRS_NO='||QP_PREQ_GRP.G_INT_ATTRS_NO);
 END IF;
COMMIT;
EXCEPTION
  WHEN OTHERS THEN
  x_status_code := FND_API.G_RET_STS_ERROR;
  x_status_text :=l_routine||' '||SQLERRM;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   QP_PREQ_GRP.engine_debug(l_routine||' '||SQLERRM);
  END IF;
END;

/*+----------------------------------------------------------------------
  |Procedure Group INSERT_LINE_ATTRS2
  +----------------------------------------------------------------------
*/

PROCEDURE INSERT_LINE_ATTRS2
   (    p_LINE_INDEX_tbl                number_type,
        p_LINE_DETAIL_INDEX_tbl         pls_integer_type ,
        p_ATTRIBUTE_TYPE_tbl            varchar_type,
        p_CONTEXT_tbl                   varchar_type,
        p_ATTRIBUTE_tbl                 varchar_type,
        p_VALUE_FROM_tbl                varchar_type,
        p_VALUE_TO_tbl                  varchar_type,
        p_VALIDATED_FLAG_tbl            varchar_type,
        x_status_code                   OUT NOCOPY VARCHAR2,
        x_status_text                   OUT NOCOPY VARCHAR2)
AS
 l_routine VARCHAR2(240):= 'Routine:QP_PREQ_GRP.INSERT_LINE_ATTRS2';
--added by yangli for Java Engine 3086881
 l_debug varchar2(3);
--added by yangli for Java Engine 3086881
BEGIN

--added by yangli for Java Engine 3086881
-- Set the global variable G_DEBUG_ENGINE
  QP_PREQ_GRP.Set_QP_Debug;

  l_debug := QP_PREQ_GRP.G_DEBUG_ENGINE;

--added by yangli for Java Engine project
IF QP_JAVA_ENGINE_UTIL_PUB.Java_Engine_Running = 'N' THEN
 IF l_debug = FND_API.G_TRUE THEN
        ENGINE_DEBUG('Java Engine not Installed ----------');
 END IF;
--added by yangli for Java Engine 3086881
 x_status_code := FND_API.G_RET_STS_SUCCESS;

FORALL i in p_line_index_tbl.FIRST..p_line_index_tbl.LAST
 INSERT INTO qp_npreq_line_attrs_tmp
                (LINE_INDEX,
                 LINE_DETAIL_INDEX,
                 ATTRIBUTE_TYPE,
                 CONTEXT,
                 ATTRIBUTE,
                 VALUE_FROM,
                 VALUE_TO,
                 VALIDATED_FLAG)
VALUES          (p_LINE_INDEX_tbl(i),
                 p_LINE_DETAIL_INDEX_tbl(i),
                 p_ATTRIBUTE_TYPE_tbl(i),
                 p_CONTEXT_tbl(i),
                 p_ATTRIBUTE_tbl(i),
                 p_VALUE_FROM_tbl(i),
                 p_VALUE_TO_tbl(i),
                 p_VALIDATED_FLAG_tbl(i));
--added by yangli for Java Engine 3086881
ELSE
  IF l_debug = FND_API.G_TRUE THEN
        ENGINE_DEBUG('Java Engine Installed ----------');
  END IF;
  QP_PREQ_GRP.INSERT_LINE_ATTRS2_AT(
        p_LINE_INDEX_tbl               ,
        p_LINE_DETAIL_INDEX_tbl        ,
        p_ATTRIBUTE_TYPE_tbl           ,
        p_CONTEXT_tbl                  ,
        p_ATTRIBUTE_tbl                ,
        p_VALUE_FROM_tbl               ,
        p_VALUE_TO_tbl                 ,
        p_VALIDATED_FLAG_tbl           ,
        x_status_code                  ,
        x_status_text
);

END IF;
--added by yangli for Java Engine 3086881

EXCEPTION
  WHEN OTHERS THEN
  x_status_code := FND_API.G_RET_STS_ERROR;
  x_status_text :=l_routine||' '||SQLERRM;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug(l_routine||' '||SQLERRM);
  END IF;
END;


/*+-----------------------------------------------------------------------
  | PROCEDURE INSERT_LINE_ATTRS
  +-----------------------------------------------------------------------
*/
PROCEDURE INSERT_LINE_ATTRS
   (    p_LINE_INDEX                      IN PLS_INTEGER,
        p_LINE_DETAIL_INDEX               IN PLS_INTEGER   :=NULL,
        p_ATTRIBUTE_LEVEL                 IN VARCHAR2,
        p_ATTRIBUTE_TYPE                  IN VARCHAR2,
        p_LIST_HEADER_ID                  IN NUMBER   :=NULL,
        p_LIST_LINE_ID                    IN NUMBER   :=NULL,
        p_CONTEXT                         IN VARCHAR2,
        p_ATTRIBUTE                       IN VARCHAR2,
        p_VALUE_FROM                      IN VARCHAR2,
        p_SETUP_VALUE_FROM                IN VARCHAR2 :=NULL,
        p_VALUE_TO                        IN VARCHAR2 :=NULL,
        p_SETUP_VALUE_TO                  IN VARCHAR2 :=NULL,
        p_GROUPING_NUMBER                 IN PLS_INTEGER   :=NULL,
        p_NO_QUALIFIERS_IN_GRP            IN PLS_INTEGER   :=NULL,
        p_COMPARISON_OPERATOR_TYPE        IN VARCHAR2 :=NULL,
        p_VALIDATED_FLAG                  IN VARCHAR2 :=NULL,
        p_APPLIED_FLAG                    IN VARCHAR2 :=NULL,
        p_PRICING_STATUS_CODE             IN VARCHAR2,
        p_PRICING_STATUS_TEXT             IN VARCHAR2 :=NULL,
        p_QUALIFIER_PRECEDENCE            IN PLS_INTEGER   :=NULL,
        p_DATATYPE                        IN VARCHAR2 :=NULL,
        p_PRICING_ATTR_FLAG               IN VARCHAR2 :=NULL,
        p_QUALIFIER_TYPE                  IN VARCHAR2 :=NULL,
        p_product_uom_code                IN VARCHAR2 :=NULL,
        p_excluder_flag                   IN VARCHAR2 :=NULL,
        x_status_code                     OUT NOCOPY VARCHAR2,
        x_status_text                     OUT NOCOPY VARCHAR2)
AS
l_routine VARCHAR2(240):= 'Routine:QP_PREQ_GRP.INSERT_LINE_ATTRS';
BEGIN
 x_status_code := FND_API.G_RET_STS_SUCCESS;
 INSERT INTO qp_npreq_line_attrs_tmp
                (LINE_INDEX,
                 LINE_DETAIL_INDEX,
                 ATTRIBUTE_LEVEL,
                 ATTRIBUTE_TYPE,
                 LIST_HEADER_ID,
                 LIST_LINE_ID,
                 CONTEXT,
                 ATTRIBUTE,
                 VALUE_FROM,
                 SETUP_VALUE_FROM,
                 VALUE_TO,
                 SETUP_VALUE_TO,
                 GROUPING_NUMBER,
                 COMPARISON_OPERATOR_TYPE_CODE,
                 VALIDATED_FLAG,
                 APPLIED_FLAG,
                 PRICING_STATUS_CODE,
                 PRICING_STATUS_TEXT,
                 QUALIFIER_PRECEDENCE,
                 DATATYPE,
                 PRICING_ATTR_FLAG,
                 QUALIFIER_TYPE,
                 PRODUCT_UOM_CODE,
                 EXCLUDER_FLAG
                )
VALUES          (p_LINE_INDEX,
                 p_LINE_DETAIL_INDEX,
                 p_ATTRIBUTE_LEVEL,
                 p_ATTRIBUTE_TYPE,
                 p_LIST_HEADER_ID,
                 p_LIST_LINE_ID,
                 p_CONTEXT,
                 p_ATTRIBUTE,
                 p_VALUE_FROM,
                 p_SETUP_VALUE_FROM,
                 p_VALUE_TO,
                 p_SETUP_VALUE_TO,
                 p_GROUPING_NUMBER,
                 p_COMPARISON_OPERATOR_TYPE,
                 p_VALIDATED_FLAG,
                 p_APPLIED_FLAG,
                 p_PRICING_STATUS_CODE,
                 p_PRICING_STATUS_TEXT,
                 p_QUALIFIER_PRECEDENCE,
                 p_DATATYPE,
                 p_PRICING_ATTR_FLAG,
                 p_QUALIFIER_TYPE,
                 p_PRODUCT_UOM_CODE,
                 p_EXCLUDER_FLAG
                );
EXCEPTION
  WHEN OTHERS THEN
  x_status_code := FND_API.G_RET_STS_ERROR;
  x_status_text :=l_routine||' '||SQLERRM;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug(l_routine||' '||SQLERRM);
  END IF;
END;

/*+-----------------------------------------------------------------------
  | PROCEDURE INSERT_PRICE_LIST_ATTRS
  +-----------------------------------------------------------------------
*/
PROCEDURE INSERT_PRICE_LIST_ATTRS
   (    p_LINE_INDEX_tbl         pls_integer_type,
        p_LINE_DETAIL_INDEX_tbl  pls_integer_type ,
        p_ATTRIBUTE_LEVEL_tbl    varchar_type,
        p_ATTRIBUTE_TYPE_tbl     varchar_type,
        p_LIST_HEADER_ID_tbl     number_type,
        p_LIST_LINE_ID_tbl       number_type,
        p_CONTEXT_tbl            varchar_type,
        p_ATTRIBUTE_tbl          varchar_type,
        p_VALUE_FROM_tbl         varchar_type,
        p_SETUP_VALUE_FROM_tbl   varchar_type,
        p_SETUP_VALUE_TO_tbl     varchar_type,
        p_GROUPING_NUMBER_tbl    pls_integer_type,
        p_COMPARISON_OPERATOR_TYPE_tbl  varchar_type,
        p_VALIDATED_FLAG_tbl            varchar_type,
        p_APPLIED_FLAG_tbl              varchar_type,
        p_PRICING_STATUS_CODE_tbl       varchar_type,
        p_PRICING_STATUS_TEXT_tbl       varchar_type,
        p_QUALIFIER_PRECEDENCE_tbl      pls_integer_type,
        p_DATATYPE_tbl                  varchar_type,
        p_PRICING_ATTR_FLAG_tbl         varchar_type,
        p_QUALIFIER_TYPE_tbl            varchar_type,
        p_PRODUCT_UOM_CODE_TBL          varchar_type,
        p_EXCLUDER_FLAG_TBL             varchar_type ,
        p_PRICING_PHASE_ID_TBL          pls_integer_type ,
        p_INCOMPATABILITY_GRP_CODE_TBL  varchar_type ,
        p_LINE_DETAIL_TYPE_CODE_TBL     varchar_type ,
        p_MODIFIER_LEVEL_CODE_TBL       varchar_type ,
        p_PRIMARY_UOM_FLAG_TBL          varchar_type ,
        x_status_code                   OUT NOCOPY VARCHAR2,
        x_status_text                   OUT NOCOPY VARCHAR2)
AS


l_routine VARCHAR2(240):= 'Routine:QP_PREQ_GRP.INSERT_PRICE_LIST_ATTRS';
BEGIN
 x_status_code := FND_API.G_RET_STS_SUCCESS;

FORALL i in p_line_index_tbl.FIRST..p_line_index_tbl.LAST
 INSERT INTO qp_npreq_line_attrs_tmp
                (LINE_INDEX,
                 LINE_DETAIL_INDEX,
                 ATTRIBUTE_LEVEL,
                 ATTRIBUTE_TYPE,
                 LIST_HEADER_ID,
                 LIST_LINE_ID,
                 CONTEXT,
                 ATTRIBUTE,
                 VALUE_FROM,
                 SETUP_VALUE_FROM,
                 SETUP_VALUE_TO,
                 GROUPING_NUMBER,
                 COMPARISON_OPERATOR_TYPE_CODE,
                 VALIDATED_FLAG,
                 APPLIED_FLAG,
                 PRICING_STATUS_CODE,
                 PRICING_STATUS_TEXT,
                 QUALIFIER_PRECEDENCE,
                 DATATYPE,
                 PRICING_ATTR_FLAG,
                 QUALIFIER_TYPE,
                 PRODUCT_UOM_CODE,
                 EXCLUDER_FLAG,
                 PRICING_PHASE_ID,
                 INCOMPATABILITY_GRP_CODE,
                 LINE_DETAIL_TYPE_CODE,
                 MODIFIER_LEVEL_CODE,
                 PRIMARY_UOM_FLAG
                )
VALUES          (p_LINE_INDEX_tbl(i),
                 p_LINE_DETAIL_INDEX_tbl(i),
                 p_ATTRIBUTE_LEVEL_tbl(i),
                 p_ATTRIBUTE_TYPE_tbl(i),
                 p_LIST_HEADER_ID_tbl(i),
                 p_LIST_LINE_ID_tbl(i),
                 p_CONTEXT_tbl(i),
                 p_ATTRIBUTE_tbl(i),
                 p_VALUE_FROM_tbl(i),
                 p_SETUP_VALUE_FROM_tbl(i),
                 p_SETUP_VALUE_TO_tbl(i),
                 p_GROUPING_NUMBER_tbl(i),
                 p_COMPARISON_OPERATOR_TYPE_tbl(i),
                 p_VALIDATED_FLAG_tbl(i),
                 p_APPLIED_FLAG_tbl(i),
                 p_PRICING_STATUS_CODE_tbl(i),
                 p_PRICING_STATUS_TEXT_tbl(i),
                 p_QUALIFIER_PRECEDENCE_tbl(i),
                 p_DATATYPE_tbl(i),
                 p_PRICING_ATTR_FLAG_tbl(i),
                 p_QUALIFIER_TYPE_tbl(i),
                 p_PRODUCT_UOM_CODE_tbl(i),
                 p_EXCLUDER_FLAG_TBL(i),
                 p_PRICING_PHASE_ID_TBL(i),
                 p_INCOMPATABILITY_GRP_CODE_TBL(i),
                 p_LINE_DETAIL_TYPE_CODE_TBL(i),
                 p_MODIFIER_LEVEL_CODE_TBL(i),
                 p_PRIMARY_UOM_FLAG_TBL(i)
                );
EXCEPTION
  WHEN OTHERS THEN
  x_status_code := FND_API.G_RET_STS_ERROR;
  x_status_text :=l_routine||' '||SQLERRM;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug(l_routine||' '||SQLERRM);
  END IF;
END;

/*+-----------------------------------------------------------------------
  | PROCEDURE INSERT_LINE_ATTRS2_AT
  +-----------------------------------------------------------------------
*/
PROCEDURE INSERT_LINE_ATTRS2_AT
   (    p_LINE_INDEX_tbl         pls_integer_type,
        p_LINE_DETAIL_INDEX_tbl  pls_integer_type ,
        p_ATTRIBUTE_LEVEL_tbl    varchar_type,
        p_ATTRIBUTE_TYPE_tbl     varchar_type,
        p_LIST_HEADER_ID_tbl     number_type,
        p_LIST_LINE_ID_tbl       number_type,
        p_CONTEXT_tbl            varchar_type,
        p_ATTRIBUTE_tbl          varchar_type,
        p_VALUE_FROM_tbl         varchar_type,
        p_SETUP_VALUE_FROM_tbl   varchar_type,
        p_VALUE_TO_tbl           varchar_type,
        p_SETUP_VALUE_TO_tbl     varchar_type,
        p_GROUPING_NUMBER_tbl    pls_integer_type,
        p_NO_QUALIFIERS_IN_GRP_tbl      pls_integer_type,
        p_COMPARISON_OPERATOR_TYPE_tbl  varchar_type,
        p_VALIDATED_FLAG_tbl            varchar_type,
        p_APPLIED_FLAG_tbl              varchar_type,
        p_PRICING_STATUS_CODE_tbl       varchar_type,
        p_PRICING_STATUS_TEXT_tbl       varchar_type,
        p_QUALIFIER_PRECEDENCE_tbl      pls_integer_type,
        p_DATATYPE_tbl                  varchar_type,
        p_PRICING_ATTR_FLAG_tbl         varchar_type,
        p_QUALIFIER_TYPE_tbl            varchar_type,
        p_PRODUCT_UOM_CODE_TBL          varchar_type,
        p_EXCLUDER_FLAG_TBL             varchar_type ,
        p_PRICING_PHASE_ID_TBL          pls_integer_type ,
        p_INCOMPATABILITY_GRP_CODE_TBL  varchar_type ,
        p_LINE_DETAIL_TYPE_CODE_TBL     varchar_type ,
        p_MODIFIER_LEVEL_CODE_TBL       varchar_type ,
        p_PRIMARY_UOM_FLAG_TBL          varchar_type ,
        x_status_code                   OUT NOCOPY VARCHAR2,
        x_status_text                   OUT NOCOPY VARCHAR2)
AS
PRAGMA AUTONOMOUS_TRANSACTION;
l_routine VARCHAR2(240):= 'Routine:QP_PREQ_GRP.INSERT_LINE_ATTRS2_AT';
l_request_id number;
BEGIN
 x_status_code := FND_API.G_RET_STS_SUCCESS;
 l_request_id := nvl(SYS_CONTEXT('QP_CONTEXT','request_id'),-9999);

 FORALL i in p_line_index_tbl.FIRST..p_line_index_tbl.LAST
 /*INSERT INTO QP_INT_LINE_ATTRS
                ( LINE_INDEX,
                 LINE_DETAIL_INDEX,
                 ATTRIBUTE_LEVEL,
                 ATTRIBUTE_TYPE,
                 LIST_HEADER_ID,
                 LIST_LINE_ID,
                 CONTEXT,
                 ATTRIBUTE,
                 VALUE_FROM,
                 SETUP_VALUE_FROM,
                 VALUE_TO,
                 SETUP_VALUE_TO,
                 GROUPING_NUMBER,
                 COMPARISON_OPERATOR_TYPE_CODE,
                 VALIDATED_FLAG,
                 APPLIED_FLAG,
                 PRICING_STATUS_CODE,
                 PRICING_STATUS_TEXT,
                 QUALIFIER_PRECEDENCE,
                 DATATYPE,
                 PRICING_ATTR_FLAG,
                 QUALIFIER_TYPE,
                 PRODUCT_UOM_CODE,
                 EXCLUDER_FLAG,
                 PRICING_PHASE_ID,
                 INCOMPATABILITY_GRP_CODE,
                 LINE_DETAIL_TYPE_CODE,
                 MODIFIER_LEVEL_CODE,
                 PRIMARY_UOM_FLAG
                )
VALUES          ( p_LINE_INDEX_tbl(i),
                 p_LINE_DETAIL_INDEX_tbl(i),
                 p_ATTRIBUTE_LEVEL_tbl(i),
                 p_ATTRIBUTE_TYPE_tbl(i),
                 --made changes to fix bug 2374591 ask for promotions not
                 --getting applied in performance code path
                 decode(p_CONTEXT_tbl(i)||p_ATTRIBUTE_tbl(i),G_LIST_HEADER_CONTEXT||G_PROMOTION_ATTRIBUTE,p_VALUE_FROM_tbl(i),p_LIST_HEADER_ID_tbl(i)),
                 decode(p_CONTEXT_tbl(i)||p_ATTRIBUTE_tbl(i),G_LIST_HEADER_CONTEXT||G_QUAL_ATTRIBUTE2,p_VALUE_FROM_tbl(i),p_LIST_LINE_ID_tbl(i)),
                 p_CONTEXT_tbl(i),
                 p_ATTRIBUTE_tbl(i),
                 p_VALUE_FROM_tbl(i),
                 p_SETUP_VALUE_FROM_tbl(i),
                 p_VALUE_TO_tbl(i),
                 p_SETUP_VALUE_TO_tbl(i),
                 p_GROUPING_NUMBER_tbl(i),
                 p_COMPARISON_OPERATOR_TYPE_tbl(i),
                 p_VALIDATED_FLAG_tbl(i),
                 p_APPLIED_FLAG_tbl(i),
                 p_PRICING_STATUS_CODE_tbl(i),
                 p_PRICING_STATUS_TEXT_tbl(i),
                 p_QUALIFIER_PRECEDENCE_tbl(i),
                 p_DATATYPE_tbl(i),
                 p_PRICING_ATTR_FLAG_tbl(i),
                 p_QUALIFIER_TYPE_tbl(i),
                 p_PRODUCT_UOM_CODE_tbl(i),
                 p_EXCLUDER_FLAG_TBL(i),
                 p_PRICING_PHASE_ID_TBL(i),
                 p_INCOMPATABILITY_GRP_CODE_TBL(i),
                 p_LINE_DETAIL_TYPE_CODE_TBL(i),
                 p_MODIFIER_LEVEL_CODE_TBL(i),
                 p_PRIMARY_UOM_FLAG_TBL(i)
                );*/
 INSERT INTO QP_INT_LINE_ATTRS_T
                ( LINE_INDEX,
                 LINE_DETAIL_INDEX,
                 ATTRIBUTE_LEVEL,
                 ATTRIBUTE_TYPE,
                 LIST_HEADER_ID,
                 LIST_LINE_ID,
                 CONTEXT,
                 ATTRIBUTE,
                 VALUE_FROM,
                 SETUP_VALUE_FROM,
                 VALUE_TO,
                 SETUP_VALUE_TO,
                 GROUPING_NUMBER,
                 COMPARISON_OPERATOR_TYPE_CODE,
                 VALIDATED_FLAG,
                 APPLIED_FLAG,
                 PRICING_STATUS_CODE,
                 PRICING_STATUS_TEXT,
                 QUALIFIER_PRECEDENCE,
                 DATATYPE,
                 PRICING_ATTR_FLAG,
                 QUALIFIER_TYPE,
                 PRODUCT_UOM_CODE,
                 EXCLUDER_FLAG,
                 PRICING_PHASE_ID,
                 INCOMPATABILITY_GRP_CODE,
                 LINE_DETAIL_TYPE_CODE,
                 MODIFIER_LEVEL_CODE,
                 PRIMARY_UOM_FLAG,
                 request_id
                )
VALUES          ( p_LINE_INDEX_tbl(i),
                 p_LINE_DETAIL_INDEX_tbl(i),
                 p_ATTRIBUTE_LEVEL_tbl(i),
                 p_ATTRIBUTE_TYPE_tbl(i),
                 --made changes to fix bug 2374591 ask for promotions not
                 --getting applied in performance code path
                 decode(p_CONTEXT_tbl(i)||p_ATTRIBUTE_tbl(i),G_LIST_HEADER_CONTEXT||G_PROMOTION_ATTRIBUTE,p_VALUE_FROM_tbl(i),p_LIST_HEADER_ID_tbl(i)),
                 decode(p_CONTEXT_tbl(i)||p_ATTRIBUTE_tbl(i),G_LIST_HEADER_CONTEXT||G_QUAL_ATTRIBUTE2,p_VALUE_FROM_tbl(i),p_LIST_LINE_ID_tbl(i)),
                 p_CONTEXT_tbl(i),
                 p_ATTRIBUTE_tbl(i),
                 p_VALUE_FROM_tbl(i),
                 p_SETUP_VALUE_FROM_tbl(i),
                 p_VALUE_TO_tbl(i),
                 p_SETUP_VALUE_TO_tbl(i),
                 p_GROUPING_NUMBER_tbl(i),
                 p_COMPARISON_OPERATOR_TYPE_tbl(i),
                 p_VALIDATED_FLAG_tbl(i),
                 p_APPLIED_FLAG_tbl(i),
                 p_PRICING_STATUS_CODE_tbl(i),
                 p_PRICING_STATUS_TEXT_tbl(i),
                 p_QUALIFIER_PRECEDENCE_tbl(i),
                 p_DATATYPE_tbl(i),
                 p_PRICING_ATTR_FLAG_tbl(i),
                 p_QUALIFIER_TYPE_tbl(i),
                 p_PRODUCT_UOM_CODE_tbl(i),
                 p_EXCLUDER_FLAG_TBL(i),
                 p_PRICING_PHASE_ID_TBL(i),
                 p_INCOMPATABILITY_GRP_CODE_TBL(i),
                 p_LINE_DETAIL_TYPE_CODE_TBL(i),
                 p_MODIFIER_LEVEL_CODE_TBL(i),
                 p_PRIMARY_UOM_FLAG_TBL(i),
                 l_request_id
                );
 QP_PREQ_GRP.G_INT_ATTRS_NO := QP_PREQ_GRP.G_INT_ATTRS_NO + p_LINE_INDEX_tbl.count;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    QP_PREQ_GRP.engine_debug('QP_PREQ_GRP.G_INT_ATTRS_NO='||QP_PREQ_GRP.G_INT_ATTRS_NO);
  END IF;

 COMMIT;
EXCEPTION
  WHEN OTHERS THEN
  x_status_code := FND_API.G_RET_STS_ERROR;
  x_status_text :=l_routine||' '||SQLERRM;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    QP_PREQ_GRP.engine_debug(l_routine||' '||SQLERRM);
  END IF;
END;

/*+-----------------------------------------------------------------------
  | PROCEDURE INSERT_LINE_ATTRS2
  +-----------------------------------------------------------------------
*/
PROCEDURE INSERT_LINE_ATTRS2
   (    p_LINE_INDEX_tbl         pls_integer_type,
        p_LINE_DETAIL_INDEX_tbl  pls_integer_type ,
        p_ATTRIBUTE_LEVEL_tbl    varchar_type,
        p_ATTRIBUTE_TYPE_tbl     varchar_type,
        p_LIST_HEADER_ID_tbl     number_type,
        p_LIST_LINE_ID_tbl       number_type,
        p_CONTEXT_tbl            varchar_type,
        p_ATTRIBUTE_tbl          varchar_type,
        p_VALUE_FROM_tbl         varchar_type,
        p_SETUP_VALUE_FROM_tbl   varchar_type,
        p_VALUE_TO_tbl           varchar_type,
        p_SETUP_VALUE_TO_tbl     varchar_type,
        p_GROUPING_NUMBER_tbl    pls_integer_type,
        p_NO_QUALIFIERS_IN_GRP_tbl      pls_integer_type,
        p_COMPARISON_OPERATOR_TYPE_tbl  varchar_type,
        p_VALIDATED_FLAG_tbl            varchar_type,
        p_APPLIED_FLAG_tbl              varchar_type,
        p_PRICING_STATUS_CODE_tbl       varchar_type,
        p_PRICING_STATUS_TEXT_tbl       varchar_type,
        p_QUALIFIER_PRECEDENCE_tbl      pls_integer_type,
        p_DATATYPE_tbl                  varchar_type,
        p_PRICING_ATTR_FLAG_tbl         varchar_type,
        p_QUALIFIER_TYPE_tbl            varchar_type,
        p_PRODUCT_UOM_CODE_TBL          varchar_type,
        p_EXCLUDER_FLAG_TBL             varchar_type ,
        p_PRICING_PHASE_ID_TBL          pls_integer_type ,
        p_INCOMPATABILITY_GRP_CODE_TBL  varchar_type ,
        p_LINE_DETAIL_TYPE_CODE_TBL     varchar_type ,
        p_MODIFIER_LEVEL_CODE_TBL       varchar_type ,
        p_PRIMARY_UOM_FLAG_TBL          varchar_type ,
        x_status_code                   OUT NOCOPY VARCHAR2,
        x_status_text                   OUT NOCOPY VARCHAR2)
AS


l_routine VARCHAR2(240):= 'Routine:QP_PREQ_GRP.INSERT_LINE_ATTRS2';
--added by yangli for Java Engine 3086881
l_debug varchar2(3);
BEGIN
--added by yangli for Java Engine 3086881
-- Set the global variable G_DEBUG_ENGINE
  QP_PREQ_GRP.Set_QP_Debug;

  l_debug := QP_PREQ_GRP.G_DEBUG_ENGINE;

IF QP_JAVA_ENGINE_UTIL_PUB.Java_Engine_Running = 'N' THEN
 IF l_debug = FND_API.G_TRUE THEN
        ENGINE_DEBUG('Java Engine not Installed ----------');
 END IF;
--added by yangli for Java Engine 3086881

 x_status_code := FND_API.G_RET_STS_SUCCESS;

FORALL i in p_line_index_tbl.FIRST..p_line_index_tbl.LAST
 INSERT INTO qp_npreq_line_attrs_tmp
                (LINE_INDEX,
                 LINE_DETAIL_INDEX,
                 ATTRIBUTE_LEVEL,
                 ATTRIBUTE_TYPE,
                 LIST_HEADER_ID,
                 LIST_LINE_ID,
                 CONTEXT,
                 ATTRIBUTE,
                 VALUE_FROM,
                 SETUP_VALUE_FROM,
                 VALUE_TO,
                 SETUP_VALUE_TO,
                 GROUPING_NUMBER,
                 COMPARISON_OPERATOR_TYPE_CODE,
                 VALIDATED_FLAG,
                 APPLIED_FLAG,
                 PRICING_STATUS_CODE,
                 PRICING_STATUS_TEXT,
                 QUALIFIER_PRECEDENCE,
                 DATATYPE,
                 PRICING_ATTR_FLAG,
                 QUALIFIER_TYPE,
                 PRODUCT_UOM_CODE,
                 EXCLUDER_FLAG,
                 PRICING_PHASE_ID,
                 INCOMPATABILITY_GRP_CODE,
                 LINE_DETAIL_TYPE_CODE,
                 MODIFIER_LEVEL_CODE,
                 PRIMARY_UOM_FLAG
                )
VALUES          (p_LINE_INDEX_tbl(i),
                 p_LINE_DETAIL_INDEX_tbl(i),
                 p_ATTRIBUTE_LEVEL_tbl(i),
                 p_ATTRIBUTE_TYPE_tbl(i),
		 --made changes to fix bug 2374591 ask for promotions not
		 --getting applied in performance code path
                 decode(p_CONTEXT_tbl(i)||p_ATTRIBUTE_tbl(i),G_LIST_HEADER_CONTEXT||G_PROMOTION_ATTRIBUTE,p_VALUE_FROM_tbl(i),p_LIST_HEADER_ID_tbl(i)),
                 decode(p_CONTEXT_tbl(i)||p_ATTRIBUTE_tbl(i),G_LIST_HEADER_CONTEXT||G_QUAL_ATTRIBUTE2,p_VALUE_FROM_tbl(i),p_LIST_LINE_ID_tbl(i)),
                 p_CONTEXT_tbl(i),
                 p_ATTRIBUTE_tbl(i),
                 p_VALUE_FROM_tbl(i),
                 p_SETUP_VALUE_FROM_tbl(i),
                 p_VALUE_TO_tbl(i),
                 p_SETUP_VALUE_TO_tbl(i),
                 p_GROUPING_NUMBER_tbl(i),
                 p_COMPARISON_OPERATOR_TYPE_tbl(i),
                 p_VALIDATED_FLAG_tbl(i),
                 p_APPLIED_FLAG_tbl(i),
                 p_PRICING_STATUS_CODE_tbl(i),
                 p_PRICING_STATUS_TEXT_tbl(i),
                 p_QUALIFIER_PRECEDENCE_tbl(i),
                 p_DATATYPE_tbl(i),
                 p_PRICING_ATTR_FLAG_tbl(i),
                 p_QUALIFIER_TYPE_tbl(i),
                 p_PRODUCT_UOM_CODE_tbl(i),
                 p_EXCLUDER_FLAG_TBL(i),
                 p_PRICING_PHASE_ID_TBL(i),
                 p_INCOMPATABILITY_GRP_CODE_TBL(i),
                 p_LINE_DETAIL_TYPE_CODE_TBL(i),
                 p_MODIFIER_LEVEL_CODE_TBL(i),
                 p_PRIMARY_UOM_FLAG_TBL(i)
                );
--added by yangli for Java Engine 3086881
ELSE
 IF l_debug = FND_API.G_TRUE THEN
        ENGINE_DEBUG('Java Engine Installed ----------');
 END IF;
QP_PREQ_GRP.INSERT_LINE_ATTRS2_AT
(   p_LINE_INDEX_tbl         ,
        p_LINE_DETAIL_INDEX_tbl  ,
        p_ATTRIBUTE_LEVEL_tbl    ,
        p_ATTRIBUTE_TYPE_tbl     ,
        p_LIST_HEADER_ID_tbl     ,
        p_LIST_LINE_ID_tbl       ,
        p_CONTEXT_tbl            ,
        p_ATTRIBUTE_tbl          ,
        p_VALUE_FROM_tbl         ,
        p_SETUP_VALUE_FROM_tbl   ,
        p_VALUE_TO_tbl           ,
        p_SETUP_VALUE_TO_tbl     ,
        p_GROUPING_NUMBER_tbl    ,
        p_NO_QUALIFIERS_IN_GRP_tbl      ,
        p_COMPARISON_OPERATOR_TYPE_tbl  ,
        p_VALIDATED_FLAG_tbl            ,
        p_APPLIED_FLAG_tbl              ,
        p_PRICING_STATUS_CODE_tbl       ,
        p_PRICING_STATUS_TEXT_tbl       ,
        p_QUALIFIER_PRECEDENCE_tbl      ,
        p_DATATYPE_tbl                  ,
        p_PRICING_ATTR_FLAG_tbl         ,
        p_QUALIFIER_TYPE_tbl            ,
        p_PRODUCT_UOM_CODE_TBL          ,
        p_EXCLUDER_FLAG_TBL             ,
        p_PRICING_PHASE_ID_TBL          ,
        p_INCOMPATABILITY_GRP_CODE_TBL  ,
        p_LINE_DETAIL_TYPE_CODE_TBL     ,
        p_MODIFIER_LEVEL_CODE_TBL       ,
        p_PRIMARY_UOM_FLAG_TBL          ,
        x_status_code                   ,
        x_status_text                   );

END IF;
--added by yangli for Java Engine 3086881

EXCEPTION
  WHEN OTHERS THEN
  x_status_code := FND_API.G_RET_STS_ERROR;
  x_status_text :=l_routine||' '||SQLERRM;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug(l_routine||' '||SQLERRM);
  END IF;
END;

/*+-----------------------------------------------------------------------
  |PROCEDURE INSERT_LINES
  +-----------------------------------------------------------------------
*/
PROCEDURE INSERT_LINES
                (p_LINE_INDEX              IN PLS_INTEGER,
                 p_LINE_TYPE_CODE          IN VARCHAR2,
                 p_PRICING_EFFECTIVE_DATE  IN DATE   :=NULL,
                 p_ACTIVE_DATE_FIRST       IN DATE   :=NULL,
                 p_ACTIVE_DATE_FIRST_TYPE  IN VARCHAR2 :=NULL,
                 p_ACTIVE_DATE_SECOND      IN DATE   :=NULL,
                 p_ACTIVE_DATE_SECOND_TYPE IN VARCHAR2 :=NULL,
                 p_LINE_QUANTITY           IN NUMBER :=NULL,
                 p_LINE_UOM_CODE          IN VARCHAR2:=NULL,
                 p_REQUEST_TYPE_CODE      IN VARCHAR2:=NULL,
                 p_PRICED_QUANTITY        IN NUMBER :=NULL,
                 p_PRICED_UOM_CODE        IN VARCHAR2:=NULL,
                 p_CURRENCY_CODE          IN VARCHAR2:=NULL,
                 p_UNIT_PRICE             IN NUMBER:=NULL,
                 p_PERCENT_PRICE          IN NUMBER:=NULL,
                 p_UOM_QUANTITY           IN NUMBER :=NULL,
                 p_ADJUSTED_UNIT_PRICE    IN NUMBER:=NULL,
                 p_PROCESSED_FLAG         IN VARCHAR2:=NULL,
                 p_PRICE_FLAG             IN VARCHAR2,
                 p_LINE_ID                IN NUMBER:=NULL,
                 p_PROCESSING_ORDER       IN PLS_INTEGER:=NULL,
                 p_PRICING_STATUS_CODE    IN VARCHAR2,
                 p_PRICING_STATUS_TEXT    IN VARCHAR2:=NULL,
                 p_ROUNDING_FLAG          IN VARCHAR2:=NULL,
                 p_LINE_CATEGORY          IN VARCHAR2:=NULL,
                 p_charge_periodicity_code IN VARCHAR2:=NULL,
                 x_status_code            OUT NOCOPY VARCHAR2,
                 x_status_text            OUT NOCOPY VARCHAR2 )
AS
l_routine VARCHAR2(240):='Routine:QP_PREQ_GRP.INSERT_LINES';
BEGIN
x_status_code := FND_API.G_RET_STS_SUCCESS;
INSERT INTO qp_npreq_lines_tmp
                (LINE_INDEX,
                 LINE_TYPE_CODE,
                 PRICING_EFFECTIVE_DATE,
                 START_DATE_ACTIVE_FIRST,
                 ACTIVE_DATE_FIRST_TYPE,
                 START_DATE_ACTIVE_SECOND,
                 ACTIVE_DATE_SECOND_TYPE,
                 LINE_QUANTITY,
                 LINE_UOM_CODE,
                 REQUEST_TYPE_CODE,
                 PRICED_QUANTITY,
                 PRICED_UOM_CODE,
                 CURRENCY_CODE,
                 UNIT_PRICE,
                 PERCENT_PRICE,
                 UOM_QUANTITY,
                 ADJUSTED_UNIT_PRICE,
                 PROCESSED_FLAG,
                 PRICE_FLAG,
                 LINE_ID,
                 PROCESSING_ORDER,
                 ROUNDING_FLAG,
                 PRICING_STATUS_CODE,
                 PRICING_STATUS_TEXT,
                 LINE_CATEGORY,
                 CHARGE_PERIODICITY_CODE)
VALUES (         p_LINE_INDEX,
                 p_LINE_TYPE_CODE,
                 p_PRICING_EFFECTIVE_DATE,
                 p_ACTIVE_DATE_FIRST,
                 p_ACTIVE_DATE_FIRST_TYPE,
                 p_ACTIVE_DATE_SECOND,
                 p_ACTIVE_DATE_SECOND_TYPE,
                 p_LINE_QUANTITY,
                 p_LINE_UOM_CODE,
                 p_REQUEST_TYPE_CODE,
                 p_PRICED_QUANTITY,
                 p_PRICED_UOM_CODE ,
                 p_CURRENCY_CODE,
                 p_UNIT_PRICE ,
                 p_PERCENT_PRICE,
                 p_UOM_QUANTITY,
                 p_ADJUSTED_UNIT_PRICE,
                 p_PROCESSED_FLAG,
                 p_PRICE_FLAG,
                 p_LINE_ID,
                 P_PROCESSING_ORDER,
                 P_ROUNDING_FLAG,
                 p_PRICING_STATUS_CODE,
                 p_PRICING_STATUS_TEXT,
                 p_LINE_CATEGORY,
                 p_CHARGE_PERIODICITY_CODE
                 );
EXCEPTION
  WHEN OTHERS THEN
  x_status_code := FND_API.G_RET_STS_ERROR;
  x_status_text :=l_routine||' '||SQLERRM;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug(l_routine||' '||SQLERRM);
  engine_debug(SQLERRM);
  END IF;
END;

/*+----------------------------------------------------------------------
  |Procedure Group INSERT_LINES2_AT
  +----------------------------------------------------------------------
*/

PROCEDURE INSERT_LINES2_AT
                (p_LINE_INDEX              IN NUMBER_TYPE,
                 p_LINE_TYPE_CODE          IN VARCHAR_TYPE,
                 p_PRICING_EFFECTIVE_DATE  IN DATE_TYPE   ,
                 p_ACTIVE_DATE_FIRST       IN DATE_TYPE   ,
                 p_ACTIVE_DATE_FIRST_TYPE  IN VARCHAR_TYPE,
                 p_ACTIVE_DATE_SECOND      IN DATE_TYPE   ,
                 p_ACTIVE_DATE_SECOND_TYPE IN VARCHAR_TYPE ,
                 p_LINE_QUANTITY           IN NUMBER_TYPE ,
                 p_LINE_UOM_CODE           IN VARCHAR_TYPE,
                 p_REQUEST_TYPE_CODE       IN VARCHAR_TYPE,
                 p_PRICED_QUANTITY         IN NUMBER_TYPE,
                 p_PRICED_UOM_CODE         IN VARCHAR_TYPE,
                 p_CURRENCY_CODE           IN VARCHAR_TYPE,
                 p_UNIT_PRICE              IN NUMBER_TYPE,
                 p_ADJUSTED_UNIT_PRICE     IN NUMBER_TYPE,
                 p_UPD_ADJUSTED_UNIT_PRICE IN NUMBER_TYPE,
                 p_UOM_QUANTITY            IN NUMBER_TYPE,
                 p_PRICE_FLAG             IN VARCHAR_TYPE,
                 p_LINE_ID                IN NUMBER_TYPE,
                 p_ROUNDING_FACTOR        IN PLS_INTEGER_TYPE,
                 p_PRICE_LIST_ID          IN NUMBER_TYPE,
                 p_PRICE_REQUEST_CODE     IN VARCHAR_TYPE,
		 p_USAGE_PRICING_TYPE     IN VARCHAR_TYPE,
                 p_LINE_CATEGORY          IN VARCHAR_TYPE,
                 p_CONTRACT_START_DATE	  IN DATE_TYPE,
                 p_CONTRACT_END_DATE	  IN DATE_TYPE,
		 p_CATCHWEIGHT_QTY	  IN NUMBER_TYPE,
		 p_ACTUAL_ORDER_QTY	  IN NUMBER_TYPE,
		 p_LIST_PRICE_OVERRIDE_FLAG IN VARCHAR_TYPE,
                 p_charge_periodicity_code IN  VARCHAR_3_TYPE,
                 x_status_code            OUT NOCOPY VARCHAR2,
                 x_status_text            OUT NOCOPY VARCHAR2 )
AS
PRAGMA AUTONOMOUS_TRANSACTION;
 l_routine VARCHAR2(240):='Routine:QP_PREQ_GRP.INSERT_LINES2_AT';
 l_request_id number;
BEGIN
 x_status_code := FND_API.G_RET_STS_SUCCESS;
 l_request_id := nvl(SYS_CONTEXT('QP_CONTEXT','request_id'),-9999);

FORALL i in p_line_index.FIRST..p_line_index.LAST
/*INSERT INTO QP_INT_LINES
                (LINE_INDEX,
                 LINE_TYPE_CODE,
                 PRICING_EFFECTIVE_DATE,
                 START_DATE_ACTIVE_FIRST,
                 ACTIVE_DATE_FIRST_TYPE,
                 START_DATE_ACTIVE_SECOND,
                 ACTIVE_DATE_SECOND_TYPE,
                 LINE_QUANTITY,
                 LINE_UOM_CODE,
                 REQUEST_TYPE_CODE,
                 PRICED_QUANTITY,
                 PRICED_UOM_CODE,
                 CURRENCY_CODE,
                 UNIT_PRICE,
                 ADJUSTED_UNIT_PRICE,
                 PRICE_FLAG,
                 UOM_QUANTITY,
                 LINE_ID,
                 ROUNDING_FACTOR,
                 UPDATED_ADJUSTED_UNIT_PRICE,
                 PRICE_LIST_HEADER_ID,
                 PRICE_REQUEST_CODE,
                 USAGE_PRICING_TYPE,
                 LINE_CATEGORY,
                 CONTRACT_START_DATE,
                 CONTRACT_END_DATE,
                 CATCHWEIGHT_QTY,
                 ACTUAL_ORDER_QUANTITY,
		 LIST_PRICE_OVERRIDE_FLAG, --po integration
                 CHARGE_PERIODICITY_CODE,
		 ORDER_UOM_SELLING_PRICE
	        )
VALUES (         p_LINE_INDEX(i),
                 p_LINE_TYPE_CODE(i),
                 p_PRICING_EFFECTIVE_DATE(i),
                 p_ACTIVE_DATE_FIRST(i),
                 p_ACTIVE_DATE_FIRST_TYPE(i),
                 p_ACTIVE_DATE_SECOND(i),
                 p_ACTIVE_DATE_SECOND_TYPE(i),
                 p_LINE_QUANTITY(i),
                 p_LINE_UOM_CODE(i),
                 p_REQUEST_TYPE_CODE(i),
                 p_PRICED_QUANTITY(i),
                 p_PRICED_UOM_CODE (i),
                 p_CURRENCY_CODE(i),
                 p_UNIT_PRICE (i),
                 p_ADJUSTED_UNIT_PRICE(i),
                 p_PRICE_FLAG(i),
                 p_UOM_QUANTITY(i),
                 p_LINE_ID(i),
                 P_ROUNDING_FACTOR(i),
                 p_UPD_ADJUSTED_UNIT_PRICE(i),
                 nvl(p_PRICE_LIST_ID(i),-9999),
                 p_PRICE_REQUEST_CODE(i),
                 nvl(p_USAGE_PRICING_TYPE(i),'REGULAR'),
                 p_LINE_CATEGORY(i),
                 p_CONTRACT_START_DATE(i),
                 p_CONTRACT_END_DATE(i),
                 p_CATCHWEIGHT_QTY(i),
                 p_ACTUAL_ORDER_QTY(i),
		 nvl (p_LIST_PRICE_OVERRIDE_FLAG(i), 'N'),
                 p_CHARGE_PERIODICITY_CODE,
		 p_UNIT_PRICE(i)-- po integration
     );*/
INSERT INTO QP_INT_LINES_t
                (LINE_INDEX,
                 LINE_TYPE_CODE,
                 PRICING_EFFECTIVE_DATE,
                 START_DATE_ACTIVE_FIRST,
                 ACTIVE_DATE_FIRST_TYPE,
                 START_DATE_ACTIVE_SECOND,
                 ACTIVE_DATE_SECOND_TYPE,
                 LINE_QUANTITY,
                 LINE_UOM_CODE,
                 REQUEST_TYPE_CODE,
                 PRICED_QUANTITY,
                 PRICED_UOM_CODE,
                 CURRENCY_CODE,
                 UNIT_PRICE,
                 ADJUSTED_UNIT_PRICE,
                 PRICE_FLAG,
                 UOM_QUANTITY,
                 LINE_ID,
                 ROUNDING_FACTOR,
                 UPDATED_ADJUSTED_UNIT_PRICE,
                 PRICE_LIST_HEADER_ID,
                 PRICE_REQUEST_CODE,
                 USAGE_PRICING_TYPE,
                 LINE_CATEGORY,
                 CONTRACT_START_DATE,
                 CONTRACT_END_DATE,
                 CATCHWEIGHT_QTY,
                 ACTUAL_ORDER_QUANTITY,
		 LIST_PRICE_OVERRIDE_FLAG, --po integration
		 ORDER_UOM_SELLING_PRICE ,
                 CHARGE_PERIODICITY_CODE,
                 request_id
	        )
VALUES (         p_LINE_INDEX(i),
                 p_LINE_TYPE_CODE(i),
                 p_PRICING_EFFECTIVE_DATE(i),
                 p_ACTIVE_DATE_FIRST(i),
                 p_ACTIVE_DATE_FIRST_TYPE(i),
                 p_ACTIVE_DATE_SECOND(i),
                 p_ACTIVE_DATE_SECOND_TYPE(i),
                 p_LINE_QUANTITY(i),
                 p_LINE_UOM_CODE(i),
                 p_REQUEST_TYPE_CODE(i),
                 p_PRICED_QUANTITY(i),
                 p_PRICED_UOM_CODE (i),
                 p_CURRENCY_CODE(i),
                 p_UNIT_PRICE (i),
                 p_ADJUSTED_UNIT_PRICE(i),
                 p_PRICE_FLAG(i),
                 p_UOM_QUANTITY(i),
                 p_LINE_ID(i),
                 P_ROUNDING_FACTOR(i),
                 p_UPD_ADJUSTED_UNIT_PRICE(i),
                 nvl(p_PRICE_LIST_ID(i),-9999),
                 p_PRICE_REQUEST_CODE(i),
                 nvl(p_USAGE_PRICING_TYPE(i),'REGULAR'),
                 p_LINE_CATEGORY(i),
                 p_CONTRACT_START_DATE(i),
                 p_CONTRACT_END_DATE(i),
                 p_CATCHWEIGHT_QTY(i),
                 p_ACTUAL_ORDER_QTY(i),
		 nvl (p_LIST_PRICE_OVERRIDE_FLAG(i), 'N'),
		 p_UNIT_PRICE(i), -- po integration
                 p_CHARGE_PERIODICITY_CODE(i),
                 l_request_id
     );
QP_PREQ_GRP.G_INT_LINES_NO := QP_PREQ_GRP.G_INT_LINES_NO + p_LINE_INDEX.count;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  QP_PREQ_GRP.engine_debug('QP_PREQ_GRP.G_INT_LINES_NO='||QP_PREQ_GRP.G_INT_LINES_NO);
  END IF;
COMMIT;
EXCEPTION
  WHEN OTHERS THEN
  x_status_code := FND_API.G_RET_STS_ERROR;
  x_status_text :=l_routine||' '||SQLERRM;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  QP_PREQ_GRP.engine_debug(l_routine||' '||SQLERRM);
  END IF;
END ;

/*+----------------------------------------------------------------------
  |Procedure Group INSERT_LINES2
  +----------------------------------------------------------------------
*/

PROCEDURE INSERT_LINES2
                (p_LINE_INDEX              IN NUMBER_TYPE,
                 p_LINE_TYPE_CODE          IN VARCHAR_TYPE,
                 p_PRICING_EFFECTIVE_DATE  IN DATE_TYPE   ,
                 p_ACTIVE_DATE_FIRST       IN DATE_TYPE   ,
                 p_ACTIVE_DATE_FIRST_TYPE  IN VARCHAR_TYPE,
                 p_ACTIVE_DATE_SECOND      IN DATE_TYPE   ,
                 p_ACTIVE_DATE_SECOND_TYPE IN VARCHAR_TYPE ,
                 p_LINE_QUANTITY           IN NUMBER_TYPE ,
                 p_LINE_UOM_CODE           IN VARCHAR_TYPE,
                 p_REQUEST_TYPE_CODE       IN VARCHAR_TYPE,
                 p_PRICED_QUANTITY         IN NUMBER_TYPE,
                 p_PRICED_UOM_CODE         IN VARCHAR_TYPE,
                 p_CURRENCY_CODE           IN VARCHAR_TYPE,
                 p_UNIT_PRICE              IN NUMBER_TYPE,
                 p_ADJUSTED_UNIT_PRICE     IN NUMBER_TYPE,
                 p_UPD_ADJUSTED_UNIT_PRICE IN NUMBER_TYPE,
                 p_UOM_QUANTITY            IN NUMBER_TYPE,
                 p_PRICE_FLAG             IN VARCHAR_TYPE,
                 p_LINE_ID                IN NUMBER_TYPE,
                 p_ROUNDING_FACTOR        IN PLS_INTEGER_TYPE,
                 p_PRICE_LIST_ID          IN NUMBER_TYPE,
                 p_PRICE_REQUEST_CODE     IN VARCHAR_TYPE,
		 p_USAGE_PRICING_TYPE     IN VARCHAR_TYPE,
                 p_LINE_CATEGORY          IN VARCHAR_TYPE,
                 p_CONTRACT_START_DATE	  IN DATE_TYPE,
                 p_CONTRACT_END_DATE	  IN DATE_TYPE,
		 p_CATCHWEIGHT_QTY	  IN NUMBER_TYPE,
		 p_ACTUAL_ORDER_QTY	  IN NUMBER_TYPE,
		 p_LIST_PRICE_OVERRIDE_FLAG IN VARCHAR_TYPE,
                 p_charge_periodicity_code  IN VARCHAR_3_TYPE,
                 x_status_code            OUT NOCOPY VARCHAR2,
                 x_status_text            OUT NOCOPY VARCHAR2 )
AS
 l_routine VARCHAR2(240):='Routine:QP_PREQ_GRP.INSERT_LINES2';
 --added by yangli for Java Engine project 3086881
 l_debug varchar2(3);
BEGIN
  --added by yangli for Java Engine project 3086881
  -- Set the global variable G_DEBUG_ENGINE
  QP_PREQ_GRP.Set_QP_Debug;

  l_debug := QP_PREQ_GRP.G_DEBUG_ENGINE;

IF QP_JAVA_ENGINE_UTIL_PUB.Java_Engine_Running = 'N' THEN
 IF l_debug = FND_API.G_TRUE THEN
        ENGINE_DEBUG('Java Engine not Installed ----------');
 END IF;
 --added by yangli for Java Engine project 3086881

 x_status_code := FND_API.G_RET_STS_SUCCESS;

FORALL i in p_line_index.FIRST..p_line_index.LAST
INSERT INTO qp_npreq_lines_tmp
                (LINE_INDEX,
                 LINE_TYPE_CODE,
                 PRICING_EFFECTIVE_DATE,
                 START_DATE_ACTIVE_FIRST,
                 ACTIVE_DATE_FIRST_TYPE,
                 START_DATE_ACTIVE_SECOND,
                 ACTIVE_DATE_SECOND_TYPE,
                 LINE_QUANTITY,
                 LINE_UOM_CODE,
                 REQUEST_TYPE_CODE,
                 PRICED_QUANTITY,
                 PRICED_UOM_CODE,
                 CURRENCY_CODE,
                 UNIT_PRICE,
                 ADJUSTED_UNIT_PRICE,
                 PRICE_FLAG,
                 UOM_QUANTITY,
                 LINE_ID,
                 ROUNDING_FACTOR,
                 UPDATED_ADJUSTED_UNIT_PRICE,
                 PRICE_LIST_HEADER_ID,
                 PRICE_REQUEST_CODE,
                 USAGE_PRICING_TYPE,
                 LINE_CATEGORY,
                 CONTRACT_START_DATE,
                 CONTRACT_END_DATE,
		 CATCHWEIGHT_QTY,
                 ACTUAL_ORDER_QUANTITY,
		 LIST_PRICE_OVERRIDE_FLAG, --po integration
                 CHARGE_PERIODICITY_CODE,
		 ORDER_UOM_SELLING_PRICE
		 )
VALUES (         p_LINE_INDEX(i),
                 p_LINE_TYPE_CODE(i),
                 p_PRICING_EFFECTIVE_DATE(i),
                 p_ACTIVE_DATE_FIRST(i),
                 p_ACTIVE_DATE_FIRST_TYPE(i),
                 p_ACTIVE_DATE_SECOND(i),
                 p_ACTIVE_DATE_SECOND_TYPE(i),
                 p_LINE_QUANTITY(i),
                 p_LINE_UOM_CODE(i),
                 p_REQUEST_TYPE_CODE(i),
                 p_PRICED_QUANTITY(i),
                 p_PRICED_UOM_CODE (i),
                 p_CURRENCY_CODE(i),
                 p_UNIT_PRICE (i),
                 p_ADJUSTED_UNIT_PRICE(i),
                 p_PRICE_FLAG(i),
                 p_UOM_QUANTITY(i),
                 p_LINE_ID(i),
                 P_ROUNDING_FACTOR(i),
                 p_UPD_ADJUSTED_UNIT_PRICE(i),
                 nvl(p_PRICE_LIST_ID(i),-9999),
                 p_PRICE_REQUEST_CODE(i),
                 nvl(p_USAGE_PRICING_TYPE(i),'REGULAR'),
                 p_LINE_CATEGORY(i),
                 p_CONTRACT_START_DATE(i),
                 p_CONTRACT_END_DATE(i),
		 p_CATCHWEIGHT_QTY(i),
		 p_ACTUAL_ORDER_QTY(i),
		 nvl (p_LIST_PRICE_OVERRIDE_FLAG(i), 'N'),
                 p_CHARGE_PERIODICITY_CODE(i),
--		 p_UNIT_PRICE(i)
                DECODE(p_LINE_QUANTITY(i),
                           0,p_ADJUSTED_UNIT_PRICE(i),
                           p_ADJUSTED_UNIT_PRICE(i)*nvl(p_PRICED_QUANTITY(i),p_LINE_QUANTITY(i))/p_LINE_QUANTITY(i)) --8370238
		 ); --po integration
 --added by yangli for Java Engine project 3086881
ELSE
 IF l_debug = FND_API.G_TRUE THEN
        ENGINE_DEBUG('Java Engine Installed ----------');
 END IF;
QP_PREQ_GRP.INSERT_LINES2_AT
                (p_LINE_INDEX             ,
                 p_LINE_TYPE_CODE         ,
                 p_PRICING_EFFECTIVE_DATE ,
                 p_ACTIVE_DATE_FIRST      ,
                 p_ACTIVE_DATE_FIRST_TYPE ,
                 p_ACTIVE_DATE_SECOND     ,
                 p_ACTIVE_DATE_SECOND_TYPE,
                 p_LINE_QUANTITY          ,
                 p_LINE_UOM_CODE          ,
                 p_REQUEST_TYPE_CODE      ,
                 p_PRICED_QUANTITY        ,
                 p_PRICED_UOM_CODE        ,
                 p_CURRENCY_CODE          ,
                 p_UNIT_PRICE             ,
                 p_ADJUSTED_UNIT_PRICE    ,
                 p_UPD_ADJUSTED_UNIT_PRICE,
                 p_UOM_QUANTITY           ,
                 p_PRICE_FLAG             ,
                 p_LINE_ID                ,
                 p_ROUNDING_FACTOR        ,
                 p_PRICE_LIST_ID          ,
                 p_PRICE_REQUEST_CODE     ,
                 p_USAGE_PRICING_TYPE     ,
                 p_LINE_CATEGORY          ,
                 p_CONTRACT_START_DATE    ,
                 p_CONTRACT_END_DATE      ,
                 p_CATCHWEIGHT_QTY        ,
                 p_ACTUAL_ORDER_QTY       ,
		 p_LIST_PRICE_OVERRIDE_FLAG, --po integration
                 p_charge_periodicity_code,
                 x_status_code            ,
                 x_status_text            );

END IF;
 --added by yangli for Java Engine project 3086881

EXCEPTION
  WHEN OTHERS THEN
  x_status_code := FND_API.G_RET_STS_ERROR;
  x_status_text :=l_routine||' '||SQLERRM;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug(l_routine||' '||SQLERRM);
  END IF;
END ;

/*+-----------------------------------------------------------------------
  |PROCEDURE INSERT_LINES2_AT for bulk binding
  +-----------------------------------------------------------------------
*/
PROCEDURE INSERT_LINES2_AT
                (p_LINE_INDEX              IN PLS_INTEGER_TYPE,
                 p_LINE_TYPE_CODE          IN VARCHAR_TYPE,
                 p_PRICING_EFFECTIVE_DATE  IN DATE_TYPE   ,
                 p_ACTIVE_DATE_FIRST       IN DATE_TYPE   ,
                 p_ACTIVE_DATE_FIRST_TYPE  IN VARCHAR_TYPE,
                 p_ACTIVE_DATE_SECOND      IN DATE_TYPE   ,
                 p_ACTIVE_DATE_SECOND_TYPE IN VARCHAR_TYPE ,
                 p_LINE_QUANTITY           IN NUMBER_TYPE ,
                 p_LINE_UOM_CODE           IN VARCHAR_TYPE,
                 p_REQUEST_TYPE_CODE      IN VARCHAR_TYPE,
                 p_PRICED_QUANTITY        IN NUMBER_TYPE,
                 p_PRICED_UOM_CODE        IN VARCHAR_TYPE,
                 p_CURRENCY_CODE          IN VARCHAR_TYPE,
                 p_UNIT_PRICE             IN NUMBER_TYPE,
                 p_PERCENT_PRICE          IN NUMBER_TYPE,
                 p_UOM_QUANTITY           IN NUMBER_TYPE,
                 p_ADJUSTED_UNIT_PRICE    IN NUMBER_TYPE,
                 p_UPD_ADJUSTED_UNIT_PRICE    IN NUMBER_TYPE,
                 p_PROCESSED_FLAG         IN VARCHAR_TYPE,
                 p_PRICE_FLAG             IN VARCHAR_TYPE,
                 p_LINE_ID                IN NUMBER_TYPE,
                 p_PROCESSING_ORDER       IN PLS_INTEGER_TYPE,
                 p_PRICING_STATUS_CODE    IN VARCHAR_TYPE,
                 p_PRICING_STATUS_TEXT    IN VARCHAR_TYPE,
                 p_ROUNDING_FLAG          IN FLAG_TYPE,
                 p_ROUNDING_FACTOR        IN PLS_INTEGER_TYPE,
                 p_QUALIFIERS_EXIST_FLAG  IN VARCHAR_TYPE,
                 p_PRICING_ATTRS_EXIST_FLAG IN VARCHAR_TYPE,
                 p_PRICE_LIST_ID          IN NUMBER_TYPE,
                 p_VALIDATED_FLAG         IN VARCHAR_TYPE,
                 p_PRICE_REQUEST_CODE     IN VARCHAR_TYPE,
		 p_USAGE_PRICING_TYPE     IN VARCHAR_TYPE,
                 p_LINE_CATEGORY          IN VARCHAR_TYPE,
                 p_CONTRACT_START_DATE    IN DATE_TYPE,
                 p_CONTRACT_END_DATE    IN DATE_TYPE,
                 p_LINE_UNIT_PRICE    IN NUMBER_TYPE,
                 p_CATCHWEIGHT_QTY    IN NUMBER_TYPE,
                 p_ACTUAL_ORDER_QTY    IN NUMBER_TYPE,
		 p_LIST_PRICE_OVERRIDE_FLAG IN VARCHAR_TYPE,--po integration
                 p_charge_periodicity_code IN VARCHAR_3_TYPE,
                 x_status_code            OUT NOCOPY VARCHAR2,
                 x_status_text            OUT NOCOPY VARCHAR2 )
AS
PRAGMA AUTONOMOUS_TRANSACTION;
l_routine VARCHAR2(240):='Routine:QP_PREQ_GRP.INSERT_LINES2_AT';
l_request_id number;
BEGIN
  x_status_code := FND_API.G_RET_STS_SUCCESS;
  l_request_id := nvl(SYS_CONTEXT('QP_CONTEXT','request_id'),-9999);
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    QP_PREQ_GRP.engine_debug('Before bulk inserting lines...');
    QP_PREQ_GRP.engine_debug('line index size:'||p_line_index.count());
  END IF;

  FORALL i in p_line_index.FIRST..p_line_index.LAST
    /*INSERT INTO QP_INT_LINES
                ( LINE_INDEX,
                 LINE_TYPE_CODE,
                 PRICING_EFFECTIVE_DATE,
                 START_DATE_ACTIVE_FIRST,
                 ACTIVE_DATE_FIRST_TYPE,
                 START_DATE_ACTIVE_SECOND,
                 ACTIVE_DATE_SECOND_TYPE,
                 LINE_QUANTITY,
                 LINE_UOM_CODE,
                 REQUEST_TYPE_CODE,
                 PRICED_QUANTITY,
                 PRICED_UOM_CODE,
                 CURRENCY_CODE,
                 UNIT_PRICE,
                 PERCENT_PRICE,
                 UOM_QUANTITY,
                 ADJUSTED_UNIT_PRICE,
                 PROCESSED_FLAG,
                 PRICE_FLAG,
                 LINE_ID,
                 PROCESSING_ORDER,
                 ROUNDING_FLAG,
                 ROUNDING_FACTOR,
                 PRICING_STATUS_CODE,
                 PRICING_STATUS_TEXT,
                 UPDATED_ADJUSTED_UNIT_PRICE,
                 QUALIFIERS_EXIST_FLAG,
                 PRICING_ATTRS_EXIST_FLAG,
                 PRICE_LIST_HEADER_ID,
                 VALIDATED_FLAG,
                 PRICE_REQUEST_CODE,
                 USAGE_PRICING_TYPE,
                 LINE_CATEGORY,
                 CONTRACT_START_DATE,  -- shulin
                 CONTRACT_END_DATE,    -- shulin
                 LINE_UNIT_PRICE,      -- shu_latest
                 CATCHWEIGHT_QTY,
                 ACTUAL_ORDER_QUANTITY,
		 LIST_PRICE_OVERRIDE_FLAG, -- po integration
                 CHARGE_PERIODICITY_CODE,
		 ORDER_UOM_SELLING_PRICE)
      VALUES (   p_LINE_INDEX(i),
                 p_LINE_TYPE_CODE(i),
                 p_PRICING_EFFECTIVE_DATE(i),
                 p_ACTIVE_DATE_FIRST(i),
                 p_ACTIVE_DATE_FIRST_TYPE(i),
                 p_ACTIVE_DATE_SECOND(i),
                 p_ACTIVE_DATE_SECOND_TYPE(i),
                 p_LINE_QUANTITY(i),
                 p_LINE_UOM_CODE(i),
                 p_REQUEST_TYPE_CODE(i),
                 p_PRICED_QUANTITY(i),
                 p_PRICED_UOM_CODE (i),
                 p_CURRENCY_CODE(i),
                 p_UNIT_PRICE (i),
                 p_PERCENT_PRICE(i),
                 p_UOM_QUANTITY(i),
                 p_ADJUSTED_UNIT_PRICE(i),
                 p_PROCESSED_FLAG(i),
                 p_PRICE_FLAG(i),
                 p_LINE_ID(i),
                 P_PROCESSING_ORDER(i),
                 P_ROUNDING_FLAG(i),
                 P_ROUNDING_FACTOR(i),
                 p_PRICING_STATUS_CODE(i),
                 p_PRICING_STATUS_TEXT(i),
                 p_UPD_ADJUSTED_UNIT_PRICE(i),
                 nvl(p_QUALIFIERS_EXIST_FLAG(i),'N'),
                 nvl(p_PRICING_ATTRS_EXIST_FLAG(i),'N'),
                 nvl(p_PRICE_LIST_ID(i),-9999),
                 nvl(p_VALIDATED_FLAG(i),'N'),
                 p_PRICE_REQUEST_CODE(i),
                 nvl(p_USAGE_PRICING_TYPE(i),'REGULAR'),
                 G_LINE_CATEGORY_DEF_TBL(i),
                 G_CONTRACT_START_DATE_DEF_TBL(i),
                 G_CONTRACT_END_DATE_DEF_TBL(i),
                 G_LINE_UNIT_PRICE_DEF_TBL(i),
                 G_CATCHWEIGHT_QTY_DEF_TBL(i),
                 G_ACTUAL_ORDER_QTY_DEF_TBL(i),
		 NVL(p_LIST_PRICE_OVERRIDE_FLAG(i), 'N'), --po integration
                 p_CHARGE_PERIODICITY_CODE(i),
		 p_UNIT_PRICE(i)
                 );*/
    INSERT INTO QP_INT_LINES_T
                ( LINE_INDEX,
                 LINE_TYPE_CODE,
                 PRICING_EFFECTIVE_DATE,
                 START_DATE_ACTIVE_FIRST,
                 ACTIVE_DATE_FIRST_TYPE,
                 START_DATE_ACTIVE_SECOND,
                 ACTIVE_DATE_SECOND_TYPE,
                 LINE_QUANTITY,
                 LINE_UOM_CODE,
                 REQUEST_TYPE_CODE,
                 PRICED_QUANTITY,
                 PRICED_UOM_CODE,
                 CURRENCY_CODE,
                 UNIT_PRICE,
                 PERCENT_PRICE,
                 UOM_QUANTITY,
                 ADJUSTED_UNIT_PRICE,
                 PROCESSED_FLAG,
                 PRICE_FLAG,
                 LINE_ID,
                 PROCESSING_ORDER,
                 ROUNDING_FLAG,
                 ROUNDING_FACTOR,
                 PRICING_STATUS_CODE,
                 PRICING_STATUS_TEXT,
                 UPDATED_ADJUSTED_UNIT_PRICE,
                 QUALIFIERS_EXIST_FLAG,
                 PRICING_ATTRS_EXIST_FLAG,
                 PRICE_LIST_HEADER_ID,
                 VALIDATED_FLAG,
                 PRICE_REQUEST_CODE,
                 USAGE_PRICING_TYPE,
                 LINE_CATEGORY,
                 CONTRACT_START_DATE,  -- shulin
                 CONTRACT_END_DATE,    -- shulin
                 LINE_UNIT_PRICE,      -- shu_latest
                 CATCHWEIGHT_QTY,
                 ACTUAL_ORDER_QUANTITY,
		 LIST_PRICE_OVERRIDE_FLAG, -- po integration
                 CHARGE_PERIODICITY_CODE,
		 ORDER_UOM_SELLING_PRICE,
                 request_id)
      VALUES (   p_LINE_INDEX(i),
                 p_LINE_TYPE_CODE(i),
                 p_PRICING_EFFECTIVE_DATE(i),
                 p_ACTIVE_DATE_FIRST(i),
                 p_ACTIVE_DATE_FIRST_TYPE(i),
                 p_ACTIVE_DATE_SECOND(i),
                 p_ACTIVE_DATE_SECOND_TYPE(i),
                 p_LINE_QUANTITY(i),
                 p_LINE_UOM_CODE(i),
                 p_REQUEST_TYPE_CODE(i),
                 p_PRICED_QUANTITY(i),
                 p_PRICED_UOM_CODE (i),
                 p_CURRENCY_CODE(i),
                 p_UNIT_PRICE (i),
                 p_PERCENT_PRICE(i),
                 p_UOM_QUANTITY(i),
                 p_ADJUSTED_UNIT_PRICE(i),
                 p_PROCESSED_FLAG(i),
                 p_PRICE_FLAG(i),
                 p_LINE_ID(i),
                 P_PROCESSING_ORDER(i),
                 P_ROUNDING_FLAG(i),
                 P_ROUNDING_FACTOR(i),
                 p_PRICING_STATUS_CODE(i),
                 p_PRICING_STATUS_TEXT(i),
                 p_UPD_ADJUSTED_UNIT_PRICE(i),
                 nvl(p_QUALIFIERS_EXIST_FLAG(i),'N'),
                 nvl(p_PRICING_ATTRS_EXIST_FLAG(i),'N'),
                 nvl(p_PRICE_LIST_ID(i),-9999),
                 nvl(p_VALIDATED_FLAG(i),'N'),
                 p_PRICE_REQUEST_CODE(i),
                 nvl(p_USAGE_PRICING_TYPE(i),'REGULAR'),
                 G_LINE_CATEGORY_DEF_TBL(i),
                 G_CONTRACT_START_DATE_DEF_TBL(i), /* shulin */
                 G_CONTRACT_END_DATE_DEF_TBL(i), /* shulin */
                 G_LINE_UNIT_PRICE_DEF_TBL(i), /* shu_latest */
                 G_CATCHWEIGHT_QTY_DEF_TBL(i),
                 G_ACTUAL_ORDER_QTY_DEF_TBL(i),
		 NVL(p_LIST_PRICE_OVERRIDE_FLAG(i), 'N'), --po integration
                 p_CHARGE_PERIODICITY_CODE(i),
		 p_UNIT_PRICE(i),
                 l_request_id
                 );
  QP_PREQ_GRP.G_INT_LINES_NO := QP_PREQ_GRP.G_INT_LINES_NO + p_LINE_INDEX.count;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    QP_PREQ_GRP.engine_debug('QP_PREQ_GRP.G_INT_LINES_NO='||QP_PREQ_GRP.G_INT_LINES_NO);
  END IF;

  COMMIT;

EXCEPTION
  WHEN OTHERS THEN
  x_status_code := FND_API.G_RET_STS_ERROR;
  x_status_text :=l_routine||' '||SQLERRM;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    QP_PREQ_GRP.engine_debug(l_routine||' '||SQLERRM);
    QP_PREQ_GRP.engine_debug(SQLERRM);
  END IF;
END;

/*+-----------------------------------------------------------------------
  |PROCEDURE INSERT_LINES2 for bulk binding
  +-----------------------------------------------------------------------
*/
PROCEDURE INSERT_LINES2
                (p_LINE_INDEX              IN PLS_INTEGER_TYPE,
                 p_LINE_TYPE_CODE          IN VARCHAR_TYPE,
                 p_PRICING_EFFECTIVE_DATE  IN DATE_TYPE   ,
                 p_ACTIVE_DATE_FIRST       IN DATE_TYPE   ,
                 p_ACTIVE_DATE_FIRST_TYPE  IN VARCHAR_TYPE,
                 p_ACTIVE_DATE_SECOND      IN DATE_TYPE   ,
                 p_ACTIVE_DATE_SECOND_TYPE IN VARCHAR_TYPE ,
                 p_LINE_QUANTITY           IN NUMBER_TYPE ,
                 p_LINE_UOM_CODE           IN VARCHAR_TYPE,
                 p_REQUEST_TYPE_CODE      IN VARCHAR_TYPE,
                 p_PRICED_QUANTITY        IN NUMBER_TYPE,
                 p_PRICED_UOM_CODE        IN VARCHAR_TYPE,
                 p_CURRENCY_CODE          IN VARCHAR_TYPE,
                 p_UNIT_PRICE             IN NUMBER_TYPE,
                 p_PERCENT_PRICE          IN NUMBER_TYPE,
                 p_UOM_QUANTITY           IN NUMBER_TYPE,
                 p_ADJUSTED_UNIT_PRICE    IN NUMBER_TYPE,
                 p_UPD_ADJUSTED_UNIT_PRICE    IN NUMBER_TYPE,
                 p_PROCESSED_FLAG         IN VARCHAR_TYPE,
                 p_PRICE_FLAG             IN VARCHAR_TYPE,
                 p_LINE_ID                IN NUMBER_TYPE,
                 p_PROCESSING_ORDER       IN PLS_INTEGER_TYPE,
                 p_PRICING_STATUS_CODE    IN VARCHAR_TYPE,
                 p_PRICING_STATUS_TEXT    IN VARCHAR_TYPE,
                 p_ROUNDING_FLAG          IN FLAG_TYPE,
                 p_ROUNDING_FACTOR        IN PLS_INTEGER_TYPE,
                 p_QUALIFIERS_EXIST_FLAG  IN VARCHAR_TYPE,
                 p_PRICING_ATTRS_EXIST_FLAG IN VARCHAR_TYPE,
                 p_PRICE_LIST_ID          IN NUMBER_TYPE,
                 p_VALIDATED_FLAG         IN VARCHAR_TYPE,
                 p_PRICE_REQUEST_CODE     IN VARCHAR_TYPE,
		 p_USAGE_PRICING_TYPE     IN VARCHAR_TYPE,
                 p_LINE_CATEGORY          IN VARCHAR_TYPE,
                 p_CONTRACT_START_DATE    IN DATE_TYPE,
                 p_CONTRACT_END_DATE    IN DATE_TYPE,
                 p_LINE_UNIT_PRICE    IN NUMBER_TYPE,
                 p_CATCHWEIGHT_QTY    IN NUMBER_TYPE,
                 p_ACTUAL_ORDER_QTY    IN NUMBER_TYPE,
		 p_LIST_PRICE_OVERRIDE_FLAG IN VARCHAR_TYPE, --po integration
                 p_charge_periodicity_code IN VARCHAR_3_TYPE,
                 x_status_code            OUT NOCOPY VARCHAR2,
                 x_status_text            OUT NOCOPY VARCHAR2 )
AS
l_routine VARCHAR2(240):='Routine:QP_PREQ_GRP.INSERT_LINES2';
--added by yangli for Java Engine project
l_debug varchar2(3);
--added by yangli for Java Engine project
BEGIN
--added by yangli for Java Engine project
-- Set the global variable G_DEBUG_ENGINE
  QP_PREQ_GRP.Set_QP_Debug;

  l_debug := QP_PREQ_GRP.G_DEBUG_ENGINE;
--added by yangli for Java Engine project

x_status_code := FND_API.G_RET_STS_SUCCESS;

-- Defaulting
IF (p_line_category.count = 0) THEN -- p_line_category not passed at all
 FOR i in p_line_index.FIRST .. p_line_index.LAST
 LOOP
  G_LINE_CATEGORY_DEF_TBL(i) := NULL;
 END LOOP;
ELSE
 FOR i in p_line_index.FIRST .. p_line_index.LAST
 LOOP
  G_LINE_CATEGORY_DEF_TBL(i) := p_LINE_CATEGORY(i);
 END LOOP;
END IF;

-- shulin
-- Defaulting
IF (p_contract_start_date.count = 0) THEN -- p_contract_start_date not passed at all
 FOR i in p_line_index.FIRST .. p_line_index.LAST
 LOOP
  G_CONTRACT_START_DATE_DEF_TBL(i) := NULL;
 END LOOP;
ELSE
 FOR i in p_line_index.FIRST .. p_line_index.LAST
 LOOP
  G_CONTRACT_START_DATE_DEF_TBL(i) := p_CONTRACT_START_DATE(i); /* shulin */
 END LOOP;
END IF;

IF (p_contract_end_date.count = 0) THEN -- p_contract_end_date not passed at all
 FOR i in p_line_index.FIRST .. p_line_index.LAST
 LOOP
  G_CONTRACT_END_DATE_DEF_TBL(i) := NULL;
 END LOOP;
ELSE
 FOR i in p_line_index.FIRST .. p_line_index.LAST
 LOOP
  G_CONTRACT_END_DATE_DEF_TBL(i) := p_CONTRACT_END_DATE(i); /* shulin */
 END LOOP;
END IF;

IF (p_line_unit_price.count = 0) THEN -- p_line_unit_price not passed at all
 FOR i in p_line_index.FIRST .. p_line_index.LAST
 LOOP
  G_LINE_UNIT_PRICE_DEF_TBL(i) := NULL;
 END LOOP;
ELSE
 FOR i in p_line_index.FIRST .. p_line_index.LAST
 LOOP
  G_LINE_UNIT_PRICE_DEF_TBL(i) := p_LINE_UNIT_PRICE(i); /* shu_latest */
 END LOOP;
END IF;

IF (p_catchweight_qty.count = 0) THEN -- p_catchweight_qty not passed at all
 FOR i in p_line_index.FIRST .. p_line_index.LAST
 LOOP
  G_CATCHWEIGHT_QTY_DEF_TBL(i) := NULL;
 END LOOP;
ELSE
 FOR i in p_line_index.FIRST .. p_line_index.LAST
 LOOP
  G_CATCHWEIGHT_QTY_DEF_TBL(i) := p_catchweight_qty(i); /* shu_latest */
 END LOOP;
END IF;

IF (p_actual_order_qty.count = 0) THEN
 FOR i in p_line_index.FIRST .. p_line_index.LAST
 LOOP
  G_ACTUAL_ORDER_QTY_DEF_TBL(i) := NULL;
 END LOOP;
ELSE
 FOR i in p_line_index.FIRST .. p_line_index.LAST
 LOOP
  G_ACTUAL_ORDER_QTY_DEF_TBL(i) := p_actual_order_qty(i);
 END LOOP;
END IF;

-- start po integration
IF (p_list_price_override_flag.count= 0)
THEN
 FOR i in p_line_index.FIRST .. p_line_index.LAST
 LOOP
  G_LIST_PRICE_OVERRIDE_FLAG_TBL(i) := 'N';
 END LOOP;
ELSE
 FOR i in p_line_index.FIRST .. p_line_index.LAST
 LOOP
  G_LIST_PRICE_OVERRIDE_FLAG_TBL(i) := nvl (p_list_price_override_flag(i), 'N');
 END LOOP;
End IF;
-- end po integration

IF (p_charge_periodicity_code.count = 0) THEN
  FOR i in p_line_index.FIRST .. p_line_index.LAST LOOP
    G_CHARGE_PERIODICITY_CODE_TBL(i) := NULL;
  END LOOP;
ELSE
  FOR i in p_line_index.FIRST .. p_line_index.LAST LOOP
    G_CHARGE_PERIODICITY_CODE_TBL(i) := p_charge_periodicity_code(i);
  END LOOP;
END IF;

--added by yangli for Java Engine project
IF QP_JAVA_ENGINE_UTIL_PUB.Java_Engine_Running = 'N' THEN
 IF l_debug = FND_API.G_TRUE THEN
        ENGINE_DEBUG('Java Engine not Installed ----------');
 END IF;
--added by yangli for Java Engine project

FORALL i in p_line_index.FIRST..p_line_index.LAST

INSERT INTO qp_npreq_lines_tmp
                (LINE_INDEX,
                 LINE_TYPE_CODE,
                 PRICING_EFFECTIVE_DATE,
                 START_DATE_ACTIVE_FIRST,
                 ACTIVE_DATE_FIRST_TYPE,
                 START_DATE_ACTIVE_SECOND,
                 ACTIVE_DATE_SECOND_TYPE,
                 LINE_QUANTITY,
                 LINE_UOM_CODE,
                 REQUEST_TYPE_CODE,
                 PRICED_QUANTITY,
                 PRICED_UOM_CODE,
                 CURRENCY_CODE,
                 UNIT_PRICE,
                 PERCENT_PRICE,
                 UOM_QUANTITY,
                 ADJUSTED_UNIT_PRICE,
                 PROCESSED_FLAG,
                 PRICE_FLAG,
                 LINE_ID,
                 PROCESSING_ORDER,
                 ROUNDING_FLAG,
                 ROUNDING_FACTOR,
                 PRICING_STATUS_CODE,
                 PRICING_STATUS_TEXT,
                 UPDATED_ADJUSTED_UNIT_PRICE,
                 QUALIFIERS_EXIST_FLAG,
                 PRICING_ATTRS_EXIST_FLAG,
                 PRICE_LIST_HEADER_ID,
                 VALIDATED_FLAG,
                 PRICE_REQUEST_CODE,
                 USAGE_PRICING_TYPE,
                 LINE_CATEGORY,
                 CONTRACT_START_DATE,  -- shulin
                 CONTRACT_END_DATE,    -- shulin
                 LINE_UNIT_PRICE,      -- shu_latest
		 CATCHWEIGHT_QTY,
                 ACTUAL_ORDER_QUANTITY,
		 LIST_PRICE_OVERRIDE_FLAG, -- po integration
                 CHARGE_PERIODICITY_CODE,
		 ORDER_UOM_SELLING_PRICE
		 )
VALUES (         p_LINE_INDEX(i),
                 p_LINE_TYPE_CODE(i),
                 p_PRICING_EFFECTIVE_DATE(i),
                 p_ACTIVE_DATE_FIRST(i),
                 p_ACTIVE_DATE_FIRST_TYPE(i),
                 p_ACTIVE_DATE_SECOND(i),
                 p_ACTIVE_DATE_SECOND_TYPE(i),
                 p_LINE_QUANTITY(i),
                 p_LINE_UOM_CODE(i),
                 p_REQUEST_TYPE_CODE(i),
                 p_PRICED_QUANTITY(i),
                 p_PRICED_UOM_CODE (i),
                 p_CURRENCY_CODE(i),
                 p_UNIT_PRICE (i),
                 p_PERCENT_PRICE(i),
                 p_UOM_QUANTITY(i),
                 p_ADJUSTED_UNIT_PRICE(i),
                 p_PROCESSED_FLAG(i),
                 p_PRICE_FLAG(i),
                 p_LINE_ID(i),
                 P_PROCESSING_ORDER(i),
                 P_ROUNDING_FLAG(i),
                 P_ROUNDING_FACTOR(i),
                 p_PRICING_STATUS_CODE(i),
                 p_PRICING_STATUS_TEXT(i),
                 p_UPD_ADJUSTED_UNIT_PRICE(i),
                 nvl(p_QUALIFIERS_EXIST_FLAG(i),'N'),
                 nvl(p_PRICING_ATTRS_EXIST_FLAG(i),'N'),
                 nvl(p_PRICE_LIST_ID(i),-9999),
                 nvl(p_VALIDATED_FLAG(i),'N'),
                 p_PRICE_REQUEST_CODE(i),
                 nvl(p_USAGE_PRICING_TYPE(i),'REGULAR'),
                 G_LINE_CATEGORY_DEF_TBL(i),
                 G_CONTRACT_START_DATE_DEF_TBL(i), /* shulin */
                 G_CONTRACT_END_DATE_DEF_TBL(i), /* shulin */
                 G_LINE_UNIT_PRICE_DEF_TBL(i), /* shu_latest */
		 G_CATCHWEIGHT_QTY_DEF_TBL(i),
		 G_ACTUAL_ORDER_QTY_DEF_TBL(i),
		 nvl (G_LIST_PRICE_OVERRIDE_FLAG_TBL(i), 'N'), -- po integration
                 G_CHARGE_PERIODICITY_CODE_TBL(i),
--		 p_UNIT_PRICE(i)
                DECODE(p_LINE_QUANTITY(i),
                           0,p_ADJUSTED_UNIT_PRICE(i),
                           p_ADJUSTED_UNIT_PRICE(i)*nvl(p_PRICED_QUANTITY(i),p_LINE_QUANTITY(i))/p_LINE_QUANTITY(i)) --8370238
                 );
--added by yangli for Java Engine project
ELSE
 IF l_debug = FND_API.G_TRUE THEN
        ENGINE_DEBUG('Java Engine Installed ----------');
 END IF;
QP_PREQ_GRP.INSERT_LINES2_AT(
     p_LINE_INDEX,
     p_LINE_TYPE_CODE         ,
     p_PRICING_EFFECTIVE_DATE ,
     p_ACTIVE_DATE_FIRST      ,
     p_ACTIVE_DATE_FIRST_TYPE ,
     p_ACTIVE_DATE_SECOND     ,
     p_ACTIVE_DATE_SECOND_TYPE,
     p_LINE_QUANTITY          ,
     p_LINE_UOM_CODE          ,
     p_REQUEST_TYPE_CODE      ,
     p_PRICED_QUANTITY        ,
     p_PRICED_UOM_CODE        ,
     p_CURRENCY_CODE          ,
     p_UNIT_PRICE             ,
     p_PERCENT_PRICE          ,
     p_UOM_QUANTITY           ,
     p_ADJUSTED_UNIT_PRICE    ,
     p_UPD_ADJUSTED_UNIT_PRICE,
     p_PROCESSED_FLAG         ,
     p_PRICE_FLAG             ,
     p_LINE_ID                ,
     p_PROCESSING_ORDER       ,
     p_PRICING_STATUS_CODE    ,
     p_PRICING_STATUS_TEXT    ,
     p_ROUNDING_FLAG          ,
     p_ROUNDING_FACTOR        ,
     p_QUALIFIERS_EXIST_FLAG  ,
     p_PRICING_ATTRS_EXIST_FLAG ,
     p_PRICE_LIST_ID          ,
     p_VALIDATED_FLAG         ,
     p_PRICE_REQUEST_CODE    ,
     p_USAGE_PRICING_TYPE    ,
     G_LINE_CATEGORY_DEF_TBL,
     G_CONTRACT_START_DATE_DEF_TBL,
     G_CONTRACT_END_DATE_DEF_TBL,
     G_LINE_UNIT_PRICE_DEF_TBL,
     G_CATCHWEIGHT_QTY_DEF_TBL,
     G_ACTUAL_ORDER_QTY_DEF_TBL,
     G_LIST_PRICE_OVERRIDE_FLAG_TBL, --po integration
     G_CHARGE_PERIODICITY_CODE_TBL,
     x_status_code       ,
     x_status_text
);
END IF;
--added by yangli for Java Engine project

G_LINE_CATEGORY_DEF_TBL.delete;
G_CONTRACT_START_DATE_DEF_TBL.delete;
G_CONTRACT_END_DATE_DEF_TBL.delete;
G_LINE_UNIT_PRICE_DEF_TBL.delete;
G_CATCHWEIGHT_QTY_DEF_TBL.delete;
G_ACTUAL_ORDER_QTY_DEF_TBL.delete;
G_LIST_PRICE_OVERRIDE_FLAG_TBL.delete;
G_CHARGE_PERIODICITY_CODE_TBL.delete;

EXCEPTION
  WHEN OTHERS THEN
  x_status_code := FND_API.G_RET_STS_ERROR;
  x_status_text :=l_routine||' '||SQLERRM;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug(l_routine||' '||SQLERRM);
  engine_debug(SQLERRM);
  END IF;
END;

/*+----------------------------------------------------------------------
  |Procedure INSERT_LDETS
  +----------------------------------------------------------------------
*/
PROCEDURE INSERT_LDETS
                (p_LINE_DETAIL_index IN PLS_INTEGER,
                 p_LINE_DETAIL_TYPE_CODE   IN VARCHAR2,
                 p_PRICE_BREAK_TYPE_CODE   IN VARCHAR2:=NULL,
                 p_LIST_PRICE              IN NUMBER:=NULL,
                 p_LINE_INDEX                  IN PLS_INTEGER,
                 p_CREATED_FROM_LIST_HEADER_ID IN NUMBER,
                 p_CREATED_FROM_LIST_LINE_ID   IN NUMBER,
                 p_CREATED_FROM_LIST_LINE_TYPE IN VARCHAR2,
                 p_CREATED_FROM_LIST_TYPE_CODE IN VARCHAR2:=NULL,
                 p_CREATED_FROM_SQL            IN VARCHAR2:=NULL,
                 p_PRICING_GROUP_SEQUENCE      IN PLS_INTEGER:=NULL,
                 P_PRICING_PHASE_ID            IN PLS_INTEGER:=NULL,
                 p_OPERAND_CALCULATION_CODE    IN VARCHAR2:=NULL,
                 p_OPERAND_VALUE               IN VARCHAR2:=NULL,
                 p_SUBSTITUTION_TYPE_CODE      IN VARCHAR2:=NULL,
                 p_SUBSTITUTION_VALUE_FROM     IN VARCHAR2:=NULL,
                 p_SUBSTITUTION_VALUE_TO       IN VARCHAR2:=NULL,
                 p_ASK_FOR_FLAG                IN VARCHAR2:=NULL,
                 p_PRICE_FORMULA_ID            IN NUMBER:=NULL,
                 p_PRICING_STATUS_CODE         IN VARCHAR2,
                 p_PRICING_STATUS_TEXT         IN VARCHAR2:=NULL,
                 p_PRODUCT_PRECEDENCE          IN PLS_INTEGER:=NULL,
                 p_INCOMPATABLILITY_GRP_CODE   IN VARCHAR2:=NULL,
                 p_PROCESSED_FLAG              IN VARCHAR2:=NULL,
                 p_APPLIED_FLAG                IN VARCHAR2:=NULL,
                 p_AUTOMATIC_FLAG              IN VARCHAR2:=NULL,
                 p_OVERRIDE_FLAG               IN VARCHAR2:=NULL,
                 p_PRIMARY_UOM_FLAG            IN VARCHAR2:=NULL,
                 p_PRINT_ON_INVOICE_FLAG       IN VARCHAR2:=NULL,
                 p_MODIFIER_LEVEL_CODE         IN VARCHAR2:=NULL,
                 p_BENEFIT_QTY                 IN NUMBER:=NULL,
                 p_BENEFIT_UOM_CODE            IN VARCHAR2:=NULL,
                 p_LIST_LINE_NO                IN VARCHAR2:=NULL,
                 p_ACCRUAL_FLAG                IN VARCHAR2:=NULL,
                 p_ACCRUAL_CONVERSION_RATE     IN NUMBER:=NULL,
                 p_ESTIM_ACCRUAL_RATE          IN NUMBER:=NULL,
                 p_RECURRING_FLAG              IN VARCHAR2:=NULL,
                 p_RECURRING_VALUE             IN NUMBER:=NULL, -- block pricing
                 p_SELECTED_VOLUME_ATTR        IN VARCHAR2:=NULL,
                 p_ROUNDING_FACTOR             IN NUMBER:=NULL,
                 p_SECONDARY_PRICELIST_IND     IN VARCHAR2:=NULL,
                 p_UPDATED_FLAG                IN VARCHAR := NULL,
                 p_PROCESS_CODE                IN VARCHAR := NULL,
                 p_CHARGE_TYPE_CODE            IN VARCHAR := NULL,
                 p_CHARGE_SUBTYPE_CODE         IN VARCHAR := NULL,
                 p_GROUP_QUANTITY              IN NUMBER :=NULL,
                 p_GROUP_AMOUNT                IN NUMBER :=NULL,
		 p_CALCULATION_CODE	       IN VARCHAR2 := NULL,
                 p_CURRENCY_DETAIL_ID          IN NUMBER :=NULL, /*vivek */
                 p_CURRENCY_HEADER_ID          IN NUMBER :=NULL, /*vivek */
                 p_SELLING_ROUNDING_FACTOR          IN NUMBER :=NULL, /*vivek */
                 p_ORDER_CURRENCY              IN VARCHAR := NULL, /*vivek */
                 p_PRICING_EFFECTIVE_DATE      IN DATE := NULL,/*vivek */
                 p_BASE_CURRENCY_CODE          IN VARCHAR := NULL,/*vivek */
		 p_CHANGE_REASON_CODE		IN VARCHAR2 := NULL,
		 p_CHANGE_REASON_TEXT		IN VARCHAR2 := NULL,
		 p_LINE_QUANTITY		IN NUMBER := NULL,
                 p_BREAK_UOM_CODE              IN VARCHAR2 := NULL, /* Proration */
                 p_BREAK_UOM_CONTEXT           IN VARCHAR2 := NULL, /* Proration */
                 p_BREAK_UOM_ATTRIBUTE         IN VARCHAR2 := NULL, /* Proration */
                 x_status_code                 OUT NOCOPY VARCHAR2,
                 x_status_text                 OUT NOCOPY VARCHAR2)
AS
l_routine VARCHAR2(240):= 'Routine:QP_PREQ_GRP.INSERT_LDETS';
BEGIN
 INSERT INTO qp_npreq_ldets_tmp
                (LINE_DETAIL_INDEX,
                 LINE_DETAIL_TYPE_CODE,
                 PRICE_BREAK_TYPE_CODE,
                 LINE_INDEX,
                 CREATED_FROM_LIST_HEADER_ID,
                 CREATED_FROM_LIST_LINE_ID,
                 CREATED_FROM_LIST_LINE_TYPE,
                 CREATED_FROM_LIST_TYPE_CODE,
                 CREATED_FROM_SQL,
                 PRICING_GROUP_SEQUENCE,
                 PRICING_PHASE_ID,
                 OPERAND_CALCULATION_CODE,
                 OPERAND_VALUE,
                 SUBSTITUTION_TYPE_CODE,
                 SUBSTITUTION_VALUE_FROM,
                 SUBSTITUTION_VALUE_TO,
                 ASK_FOR_FLAG,
                 PRICE_FORMULA_ID,
                 PRICING_STATUS_CODE,
                 PRICING_STATUS_TEXT,
                 PRODUCT_PRECEDENCE,
                 INCOMPATABILITY_GRP_CODE,
                 PROCESSED_FLAG,
                 APPLIED_FLAG,
                 AUTOMATIC_FLAG,
                 OVERRIDE_FLAG,
                 PRINT_ON_INVOICE_FLAG,
                 PRIMARY_UOM_FLAG,
                 MODIFIER_LEVEL_CODE,
                 BENEFIT_QTY,
                 BENEFIT_UOM_CODE,
                 LIST_LINE_NO,
                 ACCRUAL_FLAG,
                 ACCRUAL_CONVERSION_RATE,
                 ESTIM_ACCRUAL_RATE,
                 RECURRING_FLAG,
                 RECURRING_VALUE, -- block pricing
                 SELECTED_VOLUME_ATTR,
                 ROUNDING_FACTOR,
                 UPDATED_FLAG,
                 PROCESS_CODE,
                 CHARGE_TYPE_CODE,
                 CHARGE_SUBTYPE_CODE,
                 GROUP_QUANTITY,
                 GROUP_AMOUNT,
		 CALCULATION_CODE,
                 CURRENCY_DETAIL_ID, /*vivek */
                 CURRENCY_HEADER_ID, /*vivek */
                 SELLING_ROUNDING_FACTOR, /*vivek */
                 ORDER_CURRENCY, /*vivek */
                 PRICING_EFFECTIVE_DATE,/*vivek */
                 BASE_CURRENCY_CODE,/*vivek */
		 CHANGE_REASON_CODE,
		 CHANGE_REASON_TEXT,
		 LINE_QUANTITY
                ,BREAK_UOM_CODE /* Proration */
                ,BREAK_UOM_CONTEXT /* Proration */
                ,BREAK_UOM_ATTRIBUTE /* Proration */
          )
  VALUES (       p_LINE_DETAIL_INDEX,
                 p_LINE_DETAIL_TYPE_CODE,
                 p_PRICE_BREAK_TYPE_CODE,
                 p_LINE_INDEX,
                 p_CREATED_FROM_LIST_HEADER_ID,
                 p_CREATED_FROM_LIST_LINE_ID,
                 p_CREATED_FROM_LIST_LINE_TYPE,
                 p_CREATED_FROM_LIST_TYPE_CODE,
                 p_CREATED_FROM_SQL,
                 p_PRICING_GROUP_SEQUENCE,
                 p_PRICING_PHASE_ID,
                 p_OPERAND_CALCULATION_CODE,
                 p_OPERAND_VALUE,
                 p_SUBSTITUTION_TYPE_CODE,
                 p_SUBSTITUTION_VALUE_FROM,
                 p_SUBSTITUTION_VALUE_TO,
                 p_ASK_FOR_FLAG,
                 p_PRICE_FORMULA_ID,
                 p_PRICING_STATUS_CODE,
                 p_PRICING_STATUS_TEXT,
                 p_PRODUCT_PRECEDENCE,
                 p_INCOMPATABLILITY_GRP_CODE,
                 p_PROCESSED_FLAG,
                 p_APPLIED_FLAG,
                 p_AUTOMATIC_FLAG,
                 p_OVERRIDE_FLAG,
                 p_PRINT_ON_INVOICE_FLAG,
                 p_PRIMARY_UOM_FLAG,
                 p_MODIFIER_LEVEL_CODE,
                 p_BENEFIT_QTY,
                 p_BENEFIT_UOM_CODE,
                 p_LIST_LINE_NO,
                 p_ACCRUAL_FLAG,
                 p_ACCRUAL_CONVERSION_RATE,
                 p_ESTIM_ACCRUAL_RATE,
                 p_RECURRING_FLAG,
                 p_RECURRING_VALUE, -- block pricing
                 p_SELECTED_VOLUME_ATTR,
                 p_ROUNDING_FACTOR,
                 p_UPDATED_FLAG,
                 nvl(p_PROCESS_CODE,G_STATUS_NEW),
                 p_CHARGE_TYPE_CODE,
                 p_CHARGE_SUBTYPE_CODE,
                 p_GROUP_QUANTITY,
                 p_GROUP_AMOUNT,
		 p_CALCULATION_CODE,
                 P_CURRENCY_DETAIL_ID, /*vivek */
                 P_CURRENCY_HEADER_ID, /*vivek */
                 P_SELLING_ROUNDING_FACTOR, /*vivek */
                 P_ORDER_CURRENCY, /*vivek */
                 P_PRICING_EFFECTIVE_DATE,/*vivek */
                 P_BASE_CURRENCY_CODE,/*vivek */
		 p_CHANGE_REASON_CODE,
		 p_CHANGE_REASON_TEXT,
		 p_LINE_QUANTITY
                ,p_BREAK_UOM_CODE /* Proration */
                ,p_BREAK_UOM_CONTEXT /* Proration */
                ,p_BREAK_UOM_ATTRIBUTE /* Proration */
           );
EXCEPTION
  WHEN OTHERS THEN
  x_status_code := FND_API.G_RET_STS_ERROR;
  x_status_text :=l_routine||' '||SQLERRM;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug(l_routine||' '||SQLERRM);
  engine_debug(SQLERRM);
  END IF;
END;

/*+----------------------------------------------------------------------
  |Procedure INSERT_LDETS_PRICE_LIST_PVT
  +----------------------------------------------------------------------
*/
PROCEDURE INSERT_LDETS_PRICE_LIST_PVT
                (p_LINE_DETAIL_index           IN PLS_INTEGER_TYPE,
                 p_LINE_DETAIL_TYPE_CODE       IN VARCHAR_TYPE,
                 p_PRICE_BREAK_TYPE_CODE       IN VARCHAR_TYPE,
                 p_LINE_INDEX                  IN PLS_INTEGER_TYPE,
                 p_CREATED_FROM_LIST_HEADER_ID IN NUMBER_TYPE,
                 p_CREATED_FROM_LIST_LINE_ID   IN NUMBER_TYPE,
                 p_CREATED_FROM_LIST_LINE_TYPE IN VARCHAR_TYPE,
                 p_CREATED_FROM_LIST_TYPE_CODE IN VARCHAR_TYPE,
                 p_CREATED_FROM_SQL            IN VARCHAR_TYPE,
                 p_PRICING_GROUP_SEQUENCE      IN PLS_INTEGER_TYPE,
                 P_PRICING_PHASE_ID            IN PLS_INTEGER_TYPE,
                 p_OPERAND_CALCULATION_CODE    IN VARCHAR_TYPE,
                 p_OPERAND_VALUE               IN VARCHAR_TYPE,
                 p_PRICE_FORMULA_ID            IN NUMBER_TYPE,
                 p_PRICING_STATUS_CODE         IN VARCHAR_TYPE,
                 p_PRICING_STATUS_TEXT         IN VARCHAR_TYPE,
                 p_PRODUCT_PRECEDENCE          IN PLS_INTEGER_TYPE,
                 p_INCOMPATABLILITY_GRP_CODE   IN VARCHAR_TYPE,
                 p_PROCESSED_FLAG              IN VARCHAR_TYPE,
                 p_APPLIED_FLAG                IN VARCHAR_TYPE,
                 p_AUTOMATIC_FLAG              IN VARCHAR_TYPE,
                 p_PRIMARY_UOM_FLAG            IN VARCHAR_TYPE,
                 p_MODIFIER_LEVEL_CODE         IN VARCHAR_TYPE,
                 p_LIST_LINE_NO                IN VARCHAR_TYPE,
                 p_ROUNDING_FACTOR             IN PLS_INTEGER_TYPE,
                 p_BREAK_UOM_CODE              IN VARCHAR_TYPE, /* Proration */
                 p_BREAK_UOM_CONTEXT           IN VARCHAR_TYPE, /* Proration */
                 p_BREAK_UOM_ATTRIBUTE         IN VARCHAR_TYPE, /* Proration */
                 x_status_code                 OUT NOCOPY VARCHAR2,
                 x_status_text                 OUT NOCOPY VARCHAR2)
AS
l_routine VARCHAR2(240):= 'Routine:QP_PREQ_GRP.INSERT_LDETS_PRICE_LIST_PVT';

BEGIN

   FORALL i in p_line_index.FIRST..p_line_index.LAST
   INSERT INTO qp_npreq_ldets_tmp
                (LINE_DETAIL_INDEX,
                 LINE_DETAIL_TYPE_CODE,
                 PRICE_BREAK_TYPE_CODE,
                 LINE_INDEX,
                 CREATED_FROM_LIST_HEADER_ID,
                 CREATED_FROM_LIST_LINE_ID,
                 CREATED_FROM_LIST_LINE_TYPE,
                 CREATED_FROM_LIST_TYPE_CODE,
                 CREATED_FROM_SQL,
                 PRICING_GROUP_SEQUENCE,
                 PRICING_PHASE_ID,
                 OPERAND_CALCULATION_CODE,
                 OPERAND_VALUE,
                 PRICE_FORMULA_ID,
                 PRICING_STATUS_CODE,
                 PRICING_STATUS_TEXT,
                 PRODUCT_PRECEDENCE,
                 INCOMPATABILITY_GRP_CODE,
                 PROCESSED_FLAG,
                 APPLIED_FLAG,
                 AUTOMATIC_FLAG,
                 PRIMARY_UOM_FLAG,
                 MODIFIER_LEVEL_CODE,
                 LIST_LINE_NO,
		 PROCESS_CODE,
                 ROUNDING_FACTOR
                ,BREAK_UOM_CODE /* Proration */
                ,BREAK_UOM_CONTEXT /* Proration */
                ,BREAK_UOM_ATTRIBUTE /* Proration */
           )
   VALUES (      p_LINE_DETAIL_INDEX(i),
                 p_LINE_DETAIL_TYPE_CODE(i),
                 p_PRICE_BREAK_TYPE_CODE(i),
                 p_LINE_INDEX(i),
                 p_CREATED_FROM_LIST_HEADER_ID(i),
                 p_CREATED_FROM_LIST_LINE_ID(i),
                 p_CREATED_FROM_LIST_LINE_TYPE(i),
                 p_CREATED_FROM_LIST_TYPE_CODE(i),
                 p_CREATED_FROM_SQL(i),
                 p_PRICING_GROUP_SEQUENCE(i),
                 p_PRICING_PHASE_ID(i),
                 p_OPERAND_CALCULATION_CODE(i),
                 p_OPERAND_VALUE(i),
                 p_PRICE_FORMULA_ID(i),
                 p_PRICING_STATUS_CODE(i),
                 p_PRICING_STATUS_TEXT(i),
                 p_PRODUCT_PRECEDENCE(i),
                 p_INCOMPATABLILITY_GRP_CODE(i),
                 p_PROCESSED_FLAG(i),
                 p_APPLIED_FLAG(i),
                 p_AUTOMATIC_FLAG(i),
                 p_PRIMARY_UOM_FLAG(i),
                 p_MODIFIER_LEVEL_CODE(i),
                 p_LIST_LINE_NO(i),
		 G_STATUS_NEW,
                 p_ROUNDING_FACTOR(i)
                ,p_BREAK_UOM_CODE(i) /* Proration */
                ,p_BREAK_UOM_CONTEXT(i) /* Proration */
                ,p_BREAK_UOM_ATTRIBUTE(i) /* Proration */
          );
EXCEPTION
  WHEN OTHERS THEN
  x_status_code := FND_API.G_RET_STS_ERROR;
  x_status_text :=l_routine||' '||SQLERRM;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug(l_routine||' '||SQLERRM);
  engine_debug(SQLERRM);
  END IF;
END;

/*+----------------------------------------------------------------------
  |Procedure INSERT_LDETS_PRICE_LIST_MULT
  +----------------------------------------------------------------------
*/
PROCEDURE INSERT_LDETS_PRICE_LIST_MULT
                (p_LINE_DETAIL_index           IN PLS_INTEGER_TYPE,
                 p_LINE_DETAIL_TYPE_CODE       IN VARCHAR_TYPE,
                 p_PRICE_BREAK_TYPE_CODE       IN VARCHAR_TYPE,
                 p_LINE_INDEX                  IN PLS_INTEGER_TYPE,
                 p_CREATED_FROM_LIST_HEADER_ID IN NUMBER_TYPE,
                 p_CREATED_FROM_LIST_LINE_ID   IN NUMBER_TYPE,
                 p_CREATED_FROM_LIST_LINE_TYPE IN VARCHAR_TYPE,
                 p_CREATED_FROM_LIST_TYPE_CODE IN VARCHAR_TYPE,
                 p_CREATED_FROM_SQL            IN VARCHAR_TYPE,
                 p_PRICING_GROUP_SEQUENCE      IN PLS_INTEGER_TYPE,
                 P_PRICING_PHASE_ID            IN PLS_INTEGER_TYPE,
                 p_OPERAND_CALCULATION_CODE    IN VARCHAR_TYPE,
                 p_OPERAND_VALUE               IN VARCHAR_TYPE,
                 p_PRICE_FORMULA_ID            IN NUMBER_TYPE,
                 p_PRICING_STATUS_CODE         IN VARCHAR_TYPE,
                 p_PRICING_STATUS_TEXT         IN VARCHAR_TYPE,
                 p_PRODUCT_PRECEDENCE          IN PLS_INTEGER_TYPE,
                 p_INCOMPATABLILITY_GRP_CODE   IN VARCHAR_TYPE,
                 p_PROCESSED_FLAG              IN VARCHAR_TYPE,
                 p_APPLIED_FLAG                IN VARCHAR_TYPE,
                 p_AUTOMATIC_FLAG              IN VARCHAR_TYPE,
                 p_PRIMARY_UOM_FLAG            IN VARCHAR_TYPE,
                 p_MODIFIER_LEVEL_CODE         IN VARCHAR_TYPE,
                 p_LIST_LINE_NO                IN VARCHAR_TYPE,
                 p_ROUNDING_FACTOR             IN PLS_INTEGER_TYPE,
                 p_CURRENCY_DETAIL_ID          IN NUMBER_TYPE,
                 p_CURRENCY_HEADER_ID          IN NUMBER_TYPE,
                 p_SELLING_ROUNDING_FACTOR     IN NUMBER_TYPE,
                 p_ORDER_CURRENCY              IN VARCHAR_TYPE,
                 p_PRICING_EFFECTIVE_DATE      IN DATE_TYPE,
                 p_BASE_CURRENCY_CODE          IN VARCHAR_TYPE,
                 p_BREAK_UOM_CODE              IN VARCHAR_TYPE, /* Proration */
                 p_BREAK_UOM_CONTEXT           IN VARCHAR_TYPE, /* Proration */
                 p_BREAK_UOM_ATTRIBUTE         IN VARCHAR_TYPE, /* Proration */
                 x_status_code                 OUT NOCOPY VARCHAR2,
                 x_status_text                 OUT NOCOPY VARCHAR2)
AS
l_routine VARCHAR2(240):= 'Routine:QP_PREQ_GRP.INSERT_LDETS_PRICE_LIST_MULT';

BEGIN

 FORALL i in p_line_index.FIRST..p_line_index.LAST
 INSERT INTO qp_npreq_ldets_tmp
                (LINE_DETAIL_INDEX,
                 LINE_DETAIL_TYPE_CODE,
                 PRICE_BREAK_TYPE_CODE,
                 LINE_INDEX,
                 CREATED_FROM_LIST_HEADER_ID,
                 CREATED_FROM_LIST_LINE_ID,
                 CREATED_FROM_LIST_LINE_TYPE,
                 CREATED_FROM_LIST_TYPE_CODE,
                 CREATED_FROM_SQL,
                 PRICING_GROUP_SEQUENCE,
                 PRICING_PHASE_ID,
                 OPERAND_CALCULATION_CODE,
                 OPERAND_VALUE,
                 PRICE_FORMULA_ID,
                 PRICING_STATUS_CODE,
                 PRICING_STATUS_TEXT,
                 PRODUCT_PRECEDENCE,
                 INCOMPATABILITY_GRP_CODE,
                 PROCESSED_FLAG,
                 APPLIED_FLAG,
                 AUTOMATIC_FLAG,
                 PRIMARY_UOM_FLAG,
                 MODIFIER_LEVEL_CODE,
                 LIST_LINE_NO,
                 ROUNDING_FACTOR,
                 CURRENCY_DETAIL_ID,
                 CURRENCY_HEADER_ID,
                 SELLING_ROUNDING_FACTOR,
                 ORDER_CURRENCY,
                 PRICING_EFFECTIVE_DATE,
		 PROCESS_CODE,
                 BASE_CURRENCY_CODE
                ,BREAK_UOM_CODE /* Proration */
                ,BREAK_UOM_CONTEXT /* Proration */
                ,BREAK_UOM_ATTRIBUTE /* Proration */
          )
  VALUES (       p_LINE_DETAIL_INDEX(i),
                 p_LINE_DETAIL_TYPE_CODE(i),
                 p_PRICE_BREAK_TYPE_CODE(i),
                 p_LINE_INDEX(i),
                 p_CREATED_FROM_LIST_HEADER_ID(i),
                 p_CREATED_FROM_LIST_LINE_ID(i),
                 p_CREATED_FROM_LIST_LINE_TYPE(i),
                 p_CREATED_FROM_LIST_TYPE_CODE(i),
                 p_CREATED_FROM_SQL(i),
                 p_PRICING_GROUP_SEQUENCE(i),
                 p_PRICING_PHASE_ID(i),
                 p_OPERAND_CALCULATION_CODE(i),
                 p_OPERAND_VALUE(i),
                 p_PRICE_FORMULA_ID(i),
                 p_PRICING_STATUS_CODE(i),
                 p_PRICING_STATUS_TEXT(i),
                 p_PRODUCT_PRECEDENCE(i),
                 p_INCOMPATABLILITY_GRP_CODE(i),
                 p_PROCESSED_FLAG(i),
                 p_APPLIED_FLAG(i),
                 p_AUTOMATIC_FLAG(i),
                 p_PRIMARY_UOM_FLAG(i),
                 p_MODIFIER_LEVEL_CODE(i),
                 p_LIST_LINE_NO(i),
                 p_ROUNDING_FACTOR(i),
                 p_CURRENCY_DETAIL_ID(i),
                 p_CURRENCY_HEADER_ID(i),
                 p_SELLING_ROUNDING_FACTOR(i),
                 p_ORDER_CURRENCY(i),
                 p_PRICING_EFFECTIVE_DATE(i),
		 G_STATUS_NEW,
                 p_BASE_CURRENCY_CODE(i)
                ,p_BREAK_UOM_CODE(i) /* Proration */
                ,p_BREAK_UOM_CONTEXT(i) /* Proration */
                ,p_BREAK_UOM_ATTRIBUTE(i) /* Proration */
         );

EXCEPTION
  WHEN OTHERS THEN
  x_status_code := FND_API.G_RET_STS_ERROR;
  x_status_text :=l_routine||' '||SQLERRM;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug(l_routine||' '||SQLERRM);
  engine_debug(SQLERRM);
  END IF;
END;

/*+----------------------------------------------------------------------
  |Procedure Group INSERT_LDETS2_AT
  +----------------------------------------------------------------------
*/

PROCEDURE INSERT_LDETS2_AT
                (p_LINE_DETAIL_INDEX           IN PLS_INTEGER_TYPE,
                 p_LINE_DETAIL_TYPE_CODE       IN VARCHAR_TYPE,
                 p_PRICE_BREAK_TYPE_CODE       IN VARCHAR_TYPE,
                 p_LINE_INDEX                  IN NUMBER_TYPE,
                 p_LIST_HEADER_ID              IN NUMBER_TYPE,
                 p_LIST_LINE_ID                IN NUMBER_TYPE,
                 p_LIST_LINE_TYPE_CODE         IN VARCHAR_TYPE,
                 p_LIST_TYPE_CODE              IN VARCHAR_TYPE,
                 p_PRICING_GROUP_SEQUENCE      IN PLS_INTEGER_TYPE,
                 p_PRICING_PHASE_ID            IN PLS_INTEGER_TYPE,
                 p_OPERAND_CALCULATION_CODE    IN VARCHAR_TYPE,
                 p_OPERAND_VALUE               IN VARCHAR_TYPE,
                 p_SUBSTITUTION_TYPE_CODE      IN VARCHAR_TYPE,
                 p_SUBSTITUTION_VALUE_FROM     IN VARCHAR_TYPE,
                 p_SUBSTITUTION_VALUE_TO       IN VARCHAR_TYPE,
                 p_PRICE_FORMULA_ID            IN NUMBER_TYPE,
                 p_PRODUCT_PRECEDENCE          IN PLS_INTEGER_TYPE,
                 p_INCOMPATABLILITY_GRP_CODE   IN VARCHAR_TYPE,
                 p_APPLIED_FLAG                IN VARCHAR_TYPE,
                 p_AUTOMATIC_FLAG              IN VARCHAR_TYPE,
                 p_OVERRIDE_FLAG               IN VARCHAR_TYPE,
                 p_MODIFIER_LEVEL_CODE         IN VARCHAR_TYPE,
                 p_BENEFIT_QTY                 IN NUMBER_TYPE,
                 p_BENEFIT_UOM_CODE            IN VARCHAR_TYPE,
                 p_LIST_LINE_NO                IN VARCHAR_TYPE,
                 p_ACCRUAL_FLAG                IN VARCHAR_TYPE,
                 p_ACCRUAL_CONVERSION_RATE     IN NUMBER_TYPE,
		 p_ESTIM_ACCRUAL_RATE          IN NUMBER_TYPE,
                 p_CHARGE_TYPE_CODE            IN VARCHAR_TYPE,
                 p_CHARGE_SUBTYPE_CODE         IN VARCHAR_TYPE,
		 p_LINE_QUANTITY               IN NUMBER_TYPE,
		 p_UPDATED_FLAG                IN VARCHAR_TYPE,
		 p_CALCULATION_CODE            IN VARCHAR_TYPE,
		 p_CHANGE_REASON_CODE          IN VARCHAR_TYPE,
		 p_CHANGE_REASON_TEXT          IN VARCHAR_TYPE,
                 p_ACCUM_CONTEXT               IN VARCHAR_TYPE, -- accum range break
                 p_ACCUM_ATTRIBUTE             IN VARCHAR_TYPE, -- accum range break
                 p_ACCUM_FLAG                  IN VARCHAR_TYPE, -- accum range break
		 p_BREAK_UOM_CODE              IN VARCHAR_TYPE, /* Proration*/
		 p_BREAK_UOM_CONTEXT           IN VARCHAR_TYPE, /* Proration*/
		 p_BREAK_UOM_ATTRIBUTE         IN VARCHAR_TYPE, /* Proration*/
                 x_status_code                 OUT NOCOPY VARCHAR2,
                 x_status_text                 OUT NOCOPY VARCHAR2) AS
PRAGMA AUTONOMOUS_TRANSACTION;
l_routine VARCHAR2(240):= 'Routine:QP_PREQ_GRP.INSERT_LDETS2_AT';
l_request_id number;
BEGIN
 l_request_id := nvl(SYS_CONTEXT('QP_CONTEXT','request_id'),-9999);
 FORALL i in p_line_index.FIRST..p_line_index.LAST
 /*INSERT INTO QP_INT_LDETS
                (LINE_DETAIL_INDEX,
                 LINE_DETAIL_TYPE_CODE,
                 PRICE_BREAK_TYPE_CODE,
                 LINE_INDEX,
                 CREATED_FROM_LIST_HEADER_ID,
                 CREATED_FROM_LIST_LINE_ID,
                 CREATED_FROM_LIST_LINE_TYPE,
                 CREATED_FROM_LIST_TYPE_CODE,
                 PRICING_GROUP_SEQUENCE,
                 PRICING_PHASE_ID,
                 OPERAND_CALCULATION_CODE,
                 OPERAND_VALUE,
                 SUBSTITUTION_TYPE_CODE,
                 SUBSTITUTION_VALUE_FROM,
                 SUBSTITUTION_VALUE_TO,
                 PRICE_FORMULA_ID,
                 PRICING_STATUS_CODE,
                 PRODUCT_PRECEDENCE,
                 INCOMPATABILITY_GRP_CODE,
                 APPLIED_FLAG,
                 AUTOMATIC_FLAG,
                 OVERRIDE_FLAG,
                 MODIFIER_LEVEL_CODE,
                 BENEFIT_QTY,
                 BENEFIT_UOM_CODE,
                 LIST_LINE_NO,
                 ACCRUAL_FLAG,
                 ACCRUAL_CONVERSION_RATE,
                 ESTIM_ACCRUAL_RATE,
                 CHARGE_TYPE_CODE,
                 CHARGE_SUBTYPE_CODE,
                 PROCESS_CODE,
                 LINE_QUANTITY,
                 UPDATED_FLAG, -- begin shu, fix Bug 2599822
                 CALCULATION_CODE,
                 CHANGE_REASON_CODE,
                 CHANGE_REASON_TEXT,
                 ACCUM_CONTEXT, -- accum range break
                 ACCUM_ATTRIBUTE, -- accum range break
                 ACCUM_ATTR_RUN_SRC_FLAG,
                 BREAK_UOM_CODE,
                 BREAK_UOM_CONTEXT,
                 BREAK_UOM_ATTRIBUTE)
  VALUES (
                 p_LINE_DETAIL_INDEX(i),
                 'NULL',
                 p_PRICE_BREAK_TYPE_CODE(i),
                 p_LINE_INDEX(i),
                 p_LIST_HEADER_ID(i),
                 p_LIST_LINE_ID(i),
                 p_LIST_LINE_TYPE_CODE(i),
                 p_LIST_TYPE_CODE(i),
                 p_PRICING_GROUP_SEQUENCE(i),
                 p_PRICING_PHASE_ID(i),
                 p_OPERAND_CALCULATION_CODE(i),
                 p_OPERAND_VALUE(i),
                 p_SUBSTITUTION_TYPE_CODE(i),
                 p_SUBSTITUTION_VALUE_FROM(i),
                 p_SUBSTITUTION_VALUE_TO(i),
                 p_PRICE_FORMULA_ID(i),
                 G_STATUS_NEW,
                 p_PRODUCT_PRECEDENCE(i),
                 p_INCOMPATABLILITY_GRP_CODE(i),
                 p_APPLIED_FLAG(i),
                 p_AUTOMATIC_FLAG(i),
                 p_OVERRIDE_FLAG(i),
                 p_MODIFIER_LEVEL_CODE(i),
                 p_BENEFIT_QTY(i),
                 p_BENEFIT_UOM_CODE(i),
                 p_LIST_LINE_NO(i),
                 p_ACCRUAL_FLAG(i),
                 p_ACCRUAL_CONVERSION_RATE(i),
                 p_ESTIM_ACCRUAL_RATE(i),
                 p_CHARGE_TYPE_CODE(i),
                 p_CHARGE_SUBTYPE_CODE(i),
                 G_STATUS_NEW,
                 p_LINE_QUANTITY(i),
                 p_UPDATED_FLAG(i),
                 p_CALCULATION_CODE(i),
                 p_CHANGE_REASON_CODE(i),
                 p_CHANGE_REASON_TEXT(i),
                 p_ACCUM_CONTEXT(i), -- accum range break
                 p_ACCUM_ATTRIBUTE(i), -- accum range break
                 p_ACCUM_FLAG(i)
                ,p_BREAK_UOM_CODE(i)
                ,p_BREAK_UOM_CONTEXT(i)
                ,p_BREAK_UOM_ATTRIBUTE(i)
          );*/
 INSERT INTO QP_INT_LDETS_T
                (LINE_DETAIL_INDEX,
                 LINE_DETAIL_TYPE_CODE,
                 PRICE_BREAK_TYPE_CODE,
                 LINE_INDEX,
                 CREATED_FROM_LIST_HEADER_ID,
                 CREATED_FROM_LIST_LINE_ID,
                 CREATED_FROM_LIST_LINE_TYPE,
                 CREATED_FROM_LIST_TYPE_CODE,
                 PRICING_GROUP_SEQUENCE,
                 PRICING_PHASE_ID,
                 OPERAND_CALCULATION_CODE,
                 OPERAND_VALUE,
                 SUBSTITUTION_TYPE_CODE,
                 SUBSTITUTION_VALUE_FROM,
                 SUBSTITUTION_VALUE_TO,
                 PRICE_FORMULA_ID,
                 PRICING_STATUS_CODE,
                 PRODUCT_PRECEDENCE,
                 INCOMPATABILITY_GRP_CODE,
                 APPLIED_FLAG,
                 AUTOMATIC_FLAG,
                 OVERRIDE_FLAG,
                 MODIFIER_LEVEL_CODE,
                 BENEFIT_QTY,
                 BENEFIT_UOM_CODE,
                 LIST_LINE_NO,
                 ACCRUAL_FLAG,
                 ACCRUAL_CONVERSION_RATE,
                 ESTIM_ACCRUAL_RATE,
                 CHARGE_TYPE_CODE,
                 CHARGE_SUBTYPE_CODE,
                 PROCESS_CODE,
                 LINE_QUANTITY,
                 UPDATED_FLAG, -- begin shu, fix Bug 2599822
                 CALCULATION_CODE,
                 CHANGE_REASON_CODE,
                 CHANGE_REASON_TEXT,
                 ACCUM_CONTEXT, -- accum range break
                 ACCUM_ATTRIBUTE, -- accum range break
                 ACCUM_ATTR_RUN_SRC_FLAG,
                 BREAK_UOM_CODE, /* Proration */
                 BREAK_UOM_CONTEXT, /* Proration */
                 BREAK_UOM_ATTRIBUTE, /* Proration */
                 request_id)
  VALUES (
                 p_LINE_DETAIL_INDEX(i),
                 'NULL',
                 p_PRICE_BREAK_TYPE_CODE(i),
                 p_LINE_INDEX(i),
                 p_LIST_HEADER_ID(i),
                 p_LIST_LINE_ID(i),
                 p_LIST_LINE_TYPE_CODE(i),
                 p_LIST_TYPE_CODE(i),
                 p_PRICING_GROUP_SEQUENCE(i),
                 p_PRICING_PHASE_ID(i),
                 p_OPERAND_CALCULATION_CODE(i),
                 p_OPERAND_VALUE(i),
                 p_SUBSTITUTION_TYPE_CODE(i),
                 p_SUBSTITUTION_VALUE_FROM(i),
                 p_SUBSTITUTION_VALUE_TO(i),
                 p_PRICE_FORMULA_ID(i),
                 G_STATUS_NEW,
                 p_PRODUCT_PRECEDENCE(i),
                 p_INCOMPATABLILITY_GRP_CODE(i),
                 p_APPLIED_FLAG(i),
                 p_AUTOMATIC_FLAG(i),
                 p_OVERRIDE_FLAG(i),
                 p_MODIFIER_LEVEL_CODE(i),
                 p_BENEFIT_QTY(i),
                 p_BENEFIT_UOM_CODE(i),
                 p_LIST_LINE_NO(i),
                 p_ACCRUAL_FLAG(i),
                 p_ACCRUAL_CONVERSION_RATE(i),
                 p_ESTIM_ACCRUAL_RATE(i),
                 p_CHARGE_TYPE_CODE(i),
                 p_CHARGE_SUBTYPE_CODE(i),
                 G_STATUS_NEW,
                 p_LINE_QUANTITY(i),
                 p_UPDATED_FLAG(i),
                 p_CALCULATION_CODE(i),
                 p_CHANGE_REASON_CODE(i),
                 p_CHANGE_REASON_TEXT(i),
                 p_ACCUM_CONTEXT(i), -- accum range break
                 p_ACCUM_ATTRIBUTE(i), -- accum range break
                 p_ACCUM_FLAG(i)
                ,p_BREAK_UOM_CODE(i) /* Proration */
                ,p_BREAK_UOM_CONTEXT(i) /* Proration */
                ,p_BREAK_UOM_ATTRIBUTE(i), /* Proration */
                 l_request_id
          );
  QP_PREQ_GRP.G_INT_LDETS_NO := QP_PREQ_GRP.G_INT_LDETS_NO + p_LINE_DETAIL_INDEX.count;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    QP_PREQ_GRP.engine_debug('QP_PREQ_GRP.G_INT_LDETS_NO='||QP_PREQ_GRP.G_INT_LDETS_NO);
  END IF;

COMMIT;
EXCEPTION
  WHEN OTHERS THEN
  x_status_code := FND_API.G_RET_STS_ERROR;
  x_status_text :=l_routine||' '||SQLERRM;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  QP_PREQ_GRP.engine_debug(l_routine||' '||SQLERRM);
  QP_PREQ_GRP.engine_debug(SQLERRM);
  END IF;
END;

/*+----------------------------------------------------------------------
  |Procedure Group INSERT_LDETS2
  +----------------------------------------------------------------------
*/

PROCEDURE INSERT_LDETS2
                (p_LINE_DETAIL_INDEX           IN PLS_INTEGER_TYPE,
                 p_LINE_DETAIL_TYPE_CODE       IN VARCHAR_TYPE,
                 p_PRICE_BREAK_TYPE_CODE       IN VARCHAR_TYPE,
                 p_LINE_INDEX                  IN NUMBER_TYPE,
                 p_LIST_HEADER_ID              IN NUMBER_TYPE,
                 p_LIST_LINE_ID                IN NUMBER_TYPE,
                 p_LIST_LINE_TYPE_CODE         IN VARCHAR_TYPE,
                 p_LIST_TYPE_CODE              IN VARCHAR_TYPE,
                 p_PRICING_GROUP_SEQUENCE      IN PLS_INTEGER_TYPE,
                 p_PRICING_PHASE_ID            IN PLS_INTEGER_TYPE,
                 p_OPERAND_CALCULATION_CODE    IN VARCHAR_TYPE,
                 p_OPERAND_VALUE               IN VARCHAR_TYPE,
                 p_SUBSTITUTION_TYPE_CODE      IN VARCHAR_TYPE,
                 p_SUBSTITUTION_VALUE_FROM     IN VARCHAR_TYPE,
                 p_SUBSTITUTION_VALUE_TO       IN VARCHAR_TYPE,
                 p_PRICE_FORMULA_ID            IN NUMBER_TYPE,
                 p_PRODUCT_PRECEDENCE          IN PLS_INTEGER_TYPE,
                 p_INCOMPATABLILITY_GRP_CODE   IN VARCHAR_TYPE,
                 p_APPLIED_FLAG                IN VARCHAR_TYPE,
                 p_AUTOMATIC_FLAG              IN VARCHAR_TYPE,
                 p_OVERRIDE_FLAG               IN VARCHAR_TYPE,
                 p_MODIFIER_LEVEL_CODE         IN VARCHAR_TYPE,
                 p_BENEFIT_QTY                 IN NUMBER_TYPE,
                 p_BENEFIT_UOM_CODE            IN VARCHAR_TYPE,
                 p_LIST_LINE_NO                IN VARCHAR_TYPE,
                 p_ACCRUAL_FLAG                IN VARCHAR_TYPE,
                 p_ACCRUAL_CONVERSION_RATE     IN NUMBER_TYPE,
		 p_ESTIM_ACCRUAL_RATE          IN NUMBER_TYPE,
                 p_CHARGE_TYPE_CODE            IN VARCHAR_TYPE,
                 p_CHARGE_SUBTYPE_CODE         IN VARCHAR_TYPE,
		 p_LINE_QUANTITY               IN NUMBER_TYPE,
		 p_UPDATED_FLAG                IN VARCHAR_TYPE,
		 p_CALCULATION_CODE            IN VARCHAR_TYPE,
		 p_CHANGE_REASON_CODE          IN VARCHAR_TYPE,
		 p_CHANGE_REASON_TEXT          IN VARCHAR_TYPE,
                 p_ACCUM_CONTEXT               IN VARCHAR_TYPE, -- accum range break
                 p_ACCUM_ATTRIBUTE             IN VARCHAR_TYPE, -- accum range break
                 p_ACCUM_FLAG                  IN VARCHAR_TYPE, -- accum range break
		 p_BREAK_UOM_CODE              IN VARCHAR_TYPE, /* Proration*/
		 p_BREAK_UOM_CONTEXT           IN VARCHAR_TYPE, /* Proration*/
		 p_BREAK_UOM_ATTRIBUTE         IN VARCHAR_TYPE, /* Proration*/
                 x_status_code                 OUT NOCOPY VARCHAR2,
                 x_status_text                 OUT NOCOPY VARCHAR2) AS

l_routine VARCHAR2(240):= 'Routine:QP_PREQ_GRP.INSERT_LDETS2';
--added by yangli for Java Engine project
l_debug varchar2(3);
--added by yangli for Java Engine project
BEGIN
--added by yangli for Java Engine project
-- Set the global variable G_DEBUG_ENGINE
  QP_PREQ_GRP.Set_QP_Debug;

  l_debug := QP_PREQ_GRP.G_DEBUG_ENGINE;

IF QP_JAVA_ENGINE_UTIL_PUB.Java_Engine_Running = 'N' THEN
 IF l_debug = FND_API.G_TRUE THEN
        ENGINE_DEBUG('Java Engine not Installed ----------');
 END IF;
--added by yangli for Java Engine project

 FORALL i in p_line_index.FIRST..p_line_index.LAST
 INSERT INTO qp_npreq_ldets_tmp
                (LINE_DETAIL_INDEX,
                 LINE_DETAIL_TYPE_CODE,
                 PRICE_BREAK_TYPE_CODE,
                 LINE_INDEX,
                 CREATED_FROM_LIST_HEADER_ID,
                 CREATED_FROM_LIST_LINE_ID,
                 CREATED_FROM_LIST_LINE_TYPE,
                 CREATED_FROM_LIST_TYPE_CODE,
                 PRICING_GROUP_SEQUENCE,
                 PRICING_PHASE_ID,
                 OPERAND_CALCULATION_CODE,
                 OPERAND_VALUE,
                 SUBSTITUTION_TYPE_CODE,
                 SUBSTITUTION_VALUE_FROM,
                 SUBSTITUTION_VALUE_TO,
                 PRICE_FORMULA_ID,
                 PRICING_STATUS_CODE,
                 PRODUCT_PRECEDENCE,
                 INCOMPATABILITY_GRP_CODE,
                 APPLIED_FLAG,
                 AUTOMATIC_FLAG,
                 OVERRIDE_FLAG,
                 MODIFIER_LEVEL_CODE,
                 BENEFIT_QTY,
                 BENEFIT_UOM_CODE,
                 LIST_LINE_NO,
                 ACCRUAL_FLAG,
                 ACCRUAL_CONVERSION_RATE,
                 ESTIM_ACCRUAL_RATE,
                 CHARGE_TYPE_CODE,
                 CHARGE_SUBTYPE_CODE,
		 PROCESS_CODE,
		 LINE_QUANTITY,
		 UPDATED_FLAG, -- begin shu, fix Bug 2599822
		 CALCULATION_CODE,
		 CHANGE_REASON_CODE,
		 CHANGE_REASON_TEXT,
                 ACCUM_CONTEXT, -- accum range break
                 ACCUM_ATTRIBUTE, -- accum range break
                 ACCUM_ATTR_RUN_SRC_FLAG
                ,BREAK_UOM_CODE /* Proration */
                ,BREAK_UOM_CONTEXT /* Proration */
                ,BREAK_UOM_ATTRIBUTE /* Proration */
         )
  VALUES (
                 p_LINE_DETAIL_INDEX(i),
                 'NULL',
                 p_PRICE_BREAK_TYPE_CODE(i),
                 p_LINE_INDEX(i),
                 p_LIST_HEADER_ID(i),
                 p_LIST_LINE_ID(i),
                 p_LIST_LINE_TYPE_CODE(i),
                 p_LIST_TYPE_CODE(i),
                 p_PRICING_GROUP_SEQUENCE(i),
                 p_PRICING_PHASE_ID(i),
                 p_OPERAND_CALCULATION_CODE(i),
                 p_OPERAND_VALUE(i),
                 p_SUBSTITUTION_TYPE_CODE(i),
                 p_SUBSTITUTION_VALUE_FROM(i),
                 p_SUBSTITUTION_VALUE_TO(i),
                 p_PRICE_FORMULA_ID(i),
                 G_STATUS_NEW,
                 p_PRODUCT_PRECEDENCE(i),
                 p_INCOMPATABLILITY_GRP_CODE(i),
                 p_APPLIED_FLAG(i),
                 p_AUTOMATIC_FLAG(i),
                 p_OVERRIDE_FLAG(i),
                 p_MODIFIER_LEVEL_CODE(i),
                 p_BENEFIT_QTY(i),
                 p_BENEFIT_UOM_CODE(i),
                 p_LIST_LINE_NO(i),
                 p_ACCRUAL_FLAG(i),
                 p_ACCRUAL_CONVERSION_RATE(i),
                 p_ESTIM_ACCRUAL_RATE(i),
                 p_CHARGE_TYPE_CODE(i),
                 p_CHARGE_SUBTYPE_CODE(i),
		 G_STATUS_NEW,
		 p_LINE_QUANTITY(i),
		 p_UPDATED_FLAG(i),
		 p_CALCULATION_CODE(i),
		 p_CHANGE_REASON_CODE(i),
		 p_CHANGE_REASON_TEXT(i),
                 p_ACCUM_CONTEXT(i), -- accum range break
                 p_ACCUM_ATTRIBUTE(i), -- accum range break
                 p_ACCUM_FLAG(i)
                ,p_BREAK_UOM_CODE(i) /* Proration */
                ,p_BREAK_UOM_CONTEXT(i) /* Proration */
                ,p_BREAK_UOM_ATTRIBUTE(i) /* Proration */
          );
--added by yangli for Java Engine project
ELSE
 IF l_debug = FND_API.G_TRUE THEN
        ENGINE_DEBUG('Java Engine Installed ----------');
 END IF;
QP_PREQ_GRP.INSERT_LDETS2_AT
                (p_LINE_DETAIL_INDEX           ,
                 p_LINE_DETAIL_TYPE_CODE       ,
                 p_PRICE_BREAK_TYPE_CODE       ,
                 p_LINE_INDEX                  ,
                 p_LIST_HEADER_ID              ,
                 p_LIST_LINE_ID                ,
                 p_LIST_LINE_TYPE_CODE         ,
                 p_LIST_TYPE_CODE              ,
                 p_PRICING_GROUP_SEQUENCE      ,
                 p_PRICING_PHASE_ID            ,
                 p_OPERAND_CALCULATION_CODE    ,
                 p_OPERAND_VALUE               ,
                 p_SUBSTITUTION_TYPE_CODE      ,
                 p_SUBSTITUTION_VALUE_FROM     ,
                 p_SUBSTITUTION_VALUE_TO       ,
                 p_PRICE_FORMULA_ID            ,
                 p_PRODUCT_PRECEDENCE          ,
                 p_INCOMPATABLILITY_GRP_CODE   ,
                 p_APPLIED_FLAG                ,
                 p_AUTOMATIC_FLAG              ,
                 p_OVERRIDE_FLAG               ,
                 p_MODIFIER_LEVEL_CODE         ,
                 p_BENEFIT_QTY                 ,
                 p_BENEFIT_UOM_CODE            ,
                 p_LIST_LINE_NO                ,

                 p_ACCRUAL_FLAG                ,

                 p_ACCRUAL_CONVERSION_RATE     ,
                 p_ESTIM_ACCRUAL_RATE          ,

                 p_CHARGE_TYPE_CODE            ,
                 p_CHARGE_SUBTYPE_CODE         ,
                 p_LINE_QUANTITY               ,
                 p_UPDATED_FLAG                ,
                 p_CALCULATION_CODE            ,
                 p_CHANGE_REASON_CODE          ,
                 p_CHANGE_REASON_TEXT          ,
                 p_ACCUM_CONTEXT, -- accum range break
                 p_ACCUM_ATTRIBUTE, -- accum range break
                 p_ACCUM_FLAG,
                 p_BREAK_UOM_CODE, /* Proration */
                 p_BREAK_UOM_CONTEXT, /* Proration */
                 p_BREAK_UOM_ATTRIBUTE, /* Proration */
                 x_status_code                 ,
                 x_status_text                 );
END IF;
--added by yangli for Java Engine project

EXCEPTION
  WHEN OTHERS THEN
  x_status_code := FND_API.G_RET_STS_ERROR;
  x_status_text :=l_routine||' '||SQLERRM;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug(l_routine||' '||SQLERRM);
  engine_debug(SQLERRM);
  END IF;
END;

/*+----------------------------------------------------------------------
  |Procedure INSERT_LDETS_PVT
  +----------------------------------------------------------------------
*/
PROCEDURE INSERT_LDETS_PVT
                (p_LINE_DETAIL_INDEX           IN PLS_INTEGER_TYPE,
                 p_LINE_DETAIL_TYPE_CODE       IN VARCHAR_TYPE,
                 p_PRICE_BREAK_TYPE_CODE       IN VARCHAR_TYPE,
                 p_LINE_INDEX                  IN PLS_INTEGER_TYPE,
                 p_CREATED_FROM_LIST_HEADER_ID IN NUMBER_TYPE,
                 p_CREATED_FROM_LIST_LINE_ID   IN NUMBER_TYPE,
                 p_CREATED_FROM_LIST_LINE_TYPE IN VARCHAR_TYPE,
                 p_CREATED_FROM_LIST_TYPE_CODE IN VARCHAR_TYPE,
                 p_CREATED_FROM_SQL            IN VARCHAR_TYPE,
                 p_PRICING_GROUP_SEQUENCE      IN PLS_INTEGER_TYPE,
                 P_PRICING_PHASE_ID            IN PLS_INTEGER_TYPE,
                 p_OPERAND_CALCULATION_CODE    IN VARCHAR_TYPE,
                 p_OPERAND_VALUE               IN VARCHAR_TYPE,
                 p_NET_AMOUNT_FLAG             IN VARCHAR_TYPE, --2720717, net_amount
                 p_ASK_FOR_FLAG                IN VARCHAR_TYPE,
                 p_PRICE_FORMULA_ID            IN NUMBER_TYPE,
                 p_PRICING_STATUS_CODE         IN VARCHAR_TYPE,
                 p_PRICING_STATUS_TEXT         IN VARCHAR_TYPE,
                 p_PRODUCT_PRECEDENCE          IN PLS_INTEGER_TYPE,
                 p_INCOMPATABLILITY_GRP_CODE   IN VARCHAR_TYPE,
                 p_PROCESSED_FLAG              IN VARCHAR_TYPE,
                 p_APPLIED_FLAG                IN VARCHAR_TYPE,
                 p_AUTOMATIC_FLAG              IN VARCHAR_TYPE,
                 p_OVERRIDE_FLAG               IN VARCHAR_TYPE,
                 p_PRIMARY_UOM_FLAG            IN VARCHAR_TYPE,
                 p_MODIFIER_LEVEL_CODE         IN VARCHAR_TYPE,
                 p_BENEFIT_QTY                 IN NUMBER_TYPE,
                 p_BENEFIT_UOM_CODE            IN VARCHAR_TYPE,
                 p_LIST_LINE_NO                IN VARCHAR_TYPE,
                 p_ACCRUAL_FLAG                IN VARCHAR_TYPE,
                 p_ACCRUAL_CONVERSION_RATE     IN NUMBER_TYPE,
                 p_ESTIM_ACCRUAL_RATE          IN NUMBER_TYPE,
                 p_HEADER_LIMIT_EXISTS         IN VARCHAR_TYPE,
                 p_LINE_LIMIT_EXISTS           IN VARCHAR_TYPE,
                 p_CHARGE_TYPE_CODE            IN VARCHAR_TYPE,
                 p_CHARGE_SUBTYPE_CODE         IN VARCHAR_TYPE,
                 p_ACCUM_CONTEXT               IN VARCHAR_TYPE, -- accum range break
                 p_ACCUM_ATTRIBUTE             IN VARCHAR_TYPE, -- accum range break
                 p_ACCUM_FLAG                  IN VARCHAR_TYPE, -- accum range break
                 x_status_code                 OUT NOCOPY VARCHAR2,
                 x_status_text                 OUT NOCOPY VARCHAR2)
AS
l_routine VARCHAR2(240):= 'Routine:QP_PREQ_GRP.INSERT_LDETS_PVT';

BEGIN

   FORALL i in p_line_index.FIRST..p_line_index.LAST
   INSERT INTO qp_npreq_ldets_tmp
                (LINE_DETAIL_INDEX,
                 LINE_DETAIL_TYPE_CODE,
                 PRICE_BREAK_TYPE_CODE,
                 LINE_INDEX,
                 CREATED_FROM_LIST_HEADER_ID,
                 CREATED_FROM_LIST_LINE_ID,
                 CREATED_FROM_LIST_LINE_TYPE,
                 CREATED_FROM_LIST_TYPE_CODE,
                 CREATED_FROM_SQL,
                 PRICING_GROUP_SEQUENCE,
                 PRICING_PHASE_ID,
                 OPERAND_CALCULATION_CODE,
                 OPERAND_VALUE,
                 NET_AMOUNT_FLAG,     --2720717, net_amount
                 ASK_FOR_FLAG,
                 PRICE_FORMULA_ID,
                 PRICING_STATUS_CODE,
                 PRICING_STATUS_TEXT,
                 PRODUCT_PRECEDENCE,
                 INCOMPATABILITY_GRP_CODE,
                 PROCESSED_FLAG,
                 APPLIED_FLAG,
                 AUTOMATIC_FLAG,
                 OVERRIDE_FLAG,
                 PRIMARY_UOM_FLAG,
                 MODIFIER_LEVEL_CODE,
                 BENEFIT_QTY,
                 BENEFIT_UOM_CODE,
                 LIST_LINE_NO,
                 ACCRUAL_FLAG,
                 ACCRUAL_CONVERSION_RATE,
                 ESTIM_ACCRUAL_RATE,
                 HEADER_LIMIT_EXISTS,
                 LINE_LIMIT_EXISTS,
		 PROCESS_CODE,
                 CHARGE_TYPE_CODE,
                 CHARGE_SUBTYPE_CODE,
                 ACCUM_CONTEXT,
                 ACCUM_ATTRIBUTE,
                 ACCUM_ATTR_RUN_SRC_FLAG)
   VALUES (      p_LINE_DETAIL_INDEX(i),
                 p_LINE_DETAIL_TYPE_CODE(i),
                 p_PRICE_BREAK_TYPE_CODE(i),
                 p_LINE_INDEX(i),
                 p_CREATED_FROM_LIST_HEADER_ID(i),
                 p_CREATED_FROM_LIST_LINE_ID(i),
                 p_CREATED_FROM_LIST_LINE_TYPE(i),
                 p_CREATED_FROM_LIST_TYPE_CODE(i),
                 p_CREATED_FROM_SQL(i),
                 p_PRICING_GROUP_SEQUENCE(i),
                 p_PRICING_PHASE_ID(i),
                 p_OPERAND_CALCULATION_CODE(i),
                 p_OPERAND_VALUE(i),
                 p_NET_AMOUNT_FLAG(i),      --2720717, net_amount
                 p_ASK_FOR_FLAG(i),
                 p_PRICE_FORMULA_ID(i),
                 p_PRICING_STATUS_CODE(i),
                 p_PRICING_STATUS_TEXT(i),
                 p_PRODUCT_PRECEDENCE(i),
                 p_INCOMPATABLILITY_GRP_CODE(i),
                 p_PROCESSED_FLAG(i),
                 p_APPLIED_FLAG(i),
                 p_AUTOMATIC_FLAG(i),
                 p_OVERRIDE_FLAG(i),
                 p_PRIMARY_UOM_FLAG(i),
                 p_MODIFIER_LEVEL_CODE(i),
                 p_BENEFIT_QTY(i),
                 p_BENEFIT_UOM_CODE(i),
                 p_LIST_LINE_NO(i),
                 p_ACCRUAL_FLAG(i),
                 p_ACCRUAL_CONVERSION_RATE(i),
                 p_ESTIM_ACCRUAL_RATE(i),
                 decode(p_HEADER_LIMIT_EXISTS(i),'Y','Y',decode(p_LINE_LIMIT_EXISTS(i),'Y','Y','N')),
                 p_LINE_LIMIT_EXISTS(i),
		 G_STATUS_NEW,
                 p_CHARGE_TYPE_CODE(i),
                 p_CHARGE_SUBTYPE_CODE(i),
                 p_ACCUM_CONTEXT(i),
                 p_ACCUM_ATTRIBUTE(i),
                 p_ACCUM_FLAG(i));
EXCEPTION
  WHEN OTHERS THEN
  x_status_code := FND_API.G_RET_STS_ERROR;
  x_status_text :=l_routine||' '||SQLERRM;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug(l_routine||' '||SQLERRM);
  engine_debug(SQLERRM);
  END IF;
END;

/*+----------------------------------------------------------------------
  |Procedure Public INSERT_LDETS2_AT
  +----------------------------------------------------------------------
*/
PROCEDURE INSERT_LDETS2_AT
                (p_LINE_DETAIL_index           IN PLS_INTEGER_TYPE,
                 p_LINE_DETAIL_TYPE_CODE       IN VARCHAR_TYPE,
                 p_PRICE_BREAK_TYPE_CODE       IN VARCHAR_TYPE,
                 p_LIST_PRICE                  IN NUMBER_TYPE,
                 p_LINE_INDEX                  IN PLS_INTEGER_TYPE,
                 p_CREATED_FROM_LIST_HEADER_ID IN NUMBER_TYPE,
                 p_CREATED_FROM_LIST_LINE_ID   IN NUMBER_TYPE,
                 p_CREATED_FROM_LIST_LINE_TYPE IN VARCHAR_TYPE,
                 p_CREATED_FROM_LIST_TYPE_CODE IN VARCHAR_TYPE,
                 p_CREATED_FROM_SQL            IN VARCHAR_TYPE,
                 p_PRICING_GROUP_SEQUENCE      IN PLS_INTEGER_TYPE,
                 P_PRICING_PHASE_ID            IN PLS_INTEGER_TYPE,
                 p_OPERAND_CALCULATION_CODE    IN VARCHAR_TYPE,
                 p_OPERAND_VALUE               IN VARCHAR_TYPE,
                 p_SUBSTITUTION_TYPE_CODE      IN VARCHAR_TYPE,
                 p_SUBSTITUTION_VALUE_FROM     IN VARCHAR_TYPE,
                 p_SUBSTITUTION_VALUE_TO       IN VARCHAR_TYPE,
                 p_ASK_FOR_FLAG                IN VARCHAR_TYPE,
                 p_PRICE_FORMULA_ID            IN NUMBER_TYPE,
                 p_PRICING_STATUS_CODE         IN VARCHAR_TYPE,
                 p_PRICING_STATUS_TEXT         IN VARCHAR_TYPE,
                 p_PRODUCT_PRECEDENCE          IN PLS_INTEGER_TYPE,
                 p_INCOMPATABLILITY_GRP_CODE   IN VARCHAR_TYPE,
                 p_PROCESSED_FLAG              IN VARCHAR_TYPE,
                 p_APPLIED_FLAG                IN VARCHAR_TYPE,
                 p_AUTOMATIC_FLAG              IN VARCHAR_TYPE,
                 p_OVERRIDE_FLAG               IN VARCHAR_TYPE,
                 p_PRIMARY_UOM_FLAG            IN VARCHAR_TYPE,
                 p_PRINT_ON_INVOICE_FLAG       IN VARCHAR_TYPE,
                 p_MODIFIER_LEVEL_CODE         IN VARCHAR_TYPE,
                 p_BENEFIT_QTY                 IN NUMBER_TYPE,
                 p_BENEFIT_UOM_CODE            IN VARCHAR_TYPE,
                 p_LIST_LINE_NO                IN VARCHAR_TYPE,
                 p_ACCRUAL_FLAG                IN VARCHAR_TYPE,
                 p_ACCRUAL_CONVERSION_RATE     IN NUMBER_TYPE,
                 p_ESTIM_ACCRUAL_RATE          IN NUMBER_TYPE,
                 p_RECURRING_FLAG              IN VARCHAR_TYPE,
                 p_SELECTED_VOLUME_ATTR        IN VARCHAR_TYPE,
                 p_ROUNDING_FACTOR             IN PLS_INTEGER_TYPE,
                 p_HEADER_LIMIT_EXISTS         IN VARCHAR_TYPE,
                 p_LINE_LIMIT_EXISTS           IN VARCHAR_TYPE,
                 p_CHARGE_TYPE_CODE            IN VARCHAR_TYPE,
                 p_CHARGE_SUBTYPE_CODE         IN VARCHAR_TYPE,
                 p_CURRENCY_DETAIL_ID          IN NUMBER_TYPE,
                 p_CURRENCY_HEADER_ID          IN NUMBER_TYPE,
                 p_SELLING_ROUNDING_FACTOR     IN NUMBER_TYPE,
                 p_ORDER_CURRENCY              IN VARCHAR_TYPE,
                 p_PRICING_EFFECTIVE_DATE      IN DATE_TYPE,
                 p_BASE_CURRENCY_CODE          IN VARCHAR_TYPE,
		 p_LINE_QUANTITY	       IN NUMBER_TYPE,
                 p_UPDATED_FLAG                IN VARCHAR_TYPE,
		 p_CALCULATION_CODE            IN VARCHAR_TYPE,
		 p_CHANGE_REASON_CODE          IN VARCHAR_TYPE,
		 p_CHANGE_REASON_TEXT          IN VARCHAR_TYPE,
                 p_PRICE_ADJUSTMENT_ID         IN NUMBER_TYPE, -- bug 3099847
                 p_ACCUM_CONTEXT               IN VARCHAR_TYPE, -- accum range break
                 p_ACCUM_ATTRIBUTE             IN VARCHAR_TYPE, -- accum range break
                 p_ACCUM_FLAG                  IN VARCHAR_TYPE, -- accum range break
		 p_BREAK_UOM_CODE              IN VARCHAR_TYPE, /* Proration*/
		 p_BREAK_UOM_CONTEXT           IN VARCHAR_TYPE, /* Proration*/
		 p_BREAK_UOM_ATTRIBUTE         IN VARCHAR_TYPE, /* Proration*/
                 p_PROCESS_CODE                IN VARCHAR_TYPE, -- 3215497
                 x_status_code                 OUT NOCOPY VARCHAR2,
                 x_status_text                 OUT NOCOPY VARCHAR2)
AS
PRAGMA AUTONOMOUS_TRANSACTION;
l_request_id number;
l_routine VARCHAR2(240):= 'Routine:QP_PREQ_GRP.INSERT_LDETS2';
BEGIN
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    QP_PREQ_GRP.engine_debug('G_LINE_DETAIL_INDEX b4 insert_ldets2 '||G_LINE_DETAIL_INDEX);
    QP_PREQ_GRP.engine_debug('current request_id: '||sys_context('qp_context','request_id'));
  END IF;
  l_request_id := nvl(SYS_CONTEXT('QP_CONTEXT','request_id'),-9999);

  FORALL i in p_line_index.FIRST..p_line_index.LAST
  INSERT INTO QP_INT_LDETS_T
                ( LINE_DETAIL_INDEX,
                 LINE_DETAIL_TYPE_CODE,
                 PRICE_BREAK_TYPE_CODE,
                 LINE_INDEX,
                 CREATED_FROM_LIST_HEADER_ID,
                 CREATED_FROM_LIST_LINE_ID,
                 CREATED_FROM_LIST_LINE_TYPE,
                 CREATED_FROM_LIST_TYPE_CODE,
                 CREATED_FROM_SQL,
                 PRICING_GROUP_SEQUENCE,
                 PRICING_PHASE_ID,
                 OPERAND_CALCULATION_CODE,
                 OPERAND_VALUE,
                 SUBSTITUTION_TYPE_CODE,
                 SUBSTITUTION_VALUE_FROM,
                 SUBSTITUTION_VALUE_TO,
                 ASK_FOR_FLAG,
                 PRICE_FORMULA_ID,
                 PRICING_STATUS_CODE,
                 PRICING_STATUS_TEXT,
                 PRODUCT_PRECEDENCE,
                 INCOMPATABILITY_GRP_CODE,
                 PROCESSED_FLAG,
                 APPLIED_FLAG,
                 AUTOMATIC_FLAG,
                 OVERRIDE_FLAG,
                 PRINT_ON_INVOICE_FLAG,
                 PRIMARY_UOM_FLAG,
                 MODIFIER_LEVEL_CODE,
                 BENEFIT_QTY,
                 BENEFIT_UOM_CODE,
                 LIST_LINE_NO,
                 ACCRUAL_FLAG,
                 ACCRUAL_CONVERSION_RATE,
                 ESTIM_ACCRUAL_RATE,
                 RECURRING_FLAG,
                 SELECTED_VOLUME_ATTR,
                 ROUNDING_FACTOR,
                 HEADER_LIMIT_EXISTS,
                 LINE_LIMIT_EXISTS,
                 CHARGE_TYPE_CODE,
                 CHARGE_SUBTYPE_CODE,
                 CURRENCY_DETAIL_ID, /*sunilpandey */
                 CURRENCY_HEADER_ID, /*vivek */
                 SELLING_ROUNDING_FACTOR, /*vivek */
                 ORDER_CURRENCY, /*vivek */
                 PRICING_EFFECTIVE_DATE,/*vivek */
                 BASE_CURRENCY_CODE,/*vivek */
                 PROCESS_CODE,
                 LINE_QUANTITY,
                 UPDATED_FLAG, -- begin shu fix bug 2599822
                 CALCULATION_CODE,
                 CHANGE_REASON_CODE,
                 CHANGE_REASON_TEXT, -- end shu fix bug 2599822
                 PRICE_ADJUSTMENT_ID, -- bug 3099847
                 ACCUM_CONTEXT,          -- accum range break
                 ACCUM_ATTRIBUTE,        -- accum range break
                 ACCUM_ATTR_RUN_SRC_FLAG, -- accum range break
                 BREAK_UOM_CODE, /* Proration */
                 BREAK_UOM_CONTEXT, /* Proration */
                 BREAK_UOM_ATTRIBUTE, /* Proration */
                 request_id
                 )
    VALUES (     p_LINE_DETAIL_INDEX(i),
                 p_LINE_DETAIL_TYPE_CODE(i),
                 p_PRICE_BREAK_TYPE_CODE(i),
                 p_LINE_INDEX(i),
                 p_CREATED_FROM_LIST_HEADER_ID(i),
                 p_CREATED_FROM_LIST_LINE_ID(i),
                 p_CREATED_FROM_LIST_LINE_TYPE(i),
                 p_CREATED_FROM_LIST_TYPE_CODE(i),
                 p_CREATED_FROM_SQL(i),
                 p_PRICING_GROUP_SEQUENCE(i),
                 p_PRICING_PHASE_ID(i),
                 p_OPERAND_CALCULATION_CODE(i),
                 p_OPERAND_VALUE(i),
                 p_SUBSTITUTION_TYPE_CODE(i),
                 p_SUBSTITUTION_VALUE_FROM(i),
                 p_SUBSTITUTION_VALUE_TO(i),
                 p_ASK_FOR_FLAG(i),
                 p_PRICE_FORMULA_ID(i),
                 p_PRICING_STATUS_CODE(i),
                 p_PRICING_STATUS_TEXT(i),
                 p_PRODUCT_PRECEDENCE(i),
                 p_INCOMPATABLILITY_GRP_CODE(i),
                 p_PROCESSED_FLAG(i),
                 p_APPLIED_FLAG(i),
                 p_AUTOMATIC_FLAG(i),
                 p_OVERRIDE_FLAG(i),
                 p_PRINT_ON_INVOICE_FLAG(i),
                 p_PRIMARY_UOM_FLAG(i),
                 p_MODIFIER_LEVEL_CODE(i),
                 p_BENEFIT_QTY(i),
                 p_BENEFIT_UOM_CODE(i),
                 p_LIST_LINE_NO(i),
                 p_ACCRUAL_FLAG(i),
                 p_ACCRUAL_CONVERSION_RATE(i),
                 p_ESTIM_ACCRUAL_RATE(i),
                 p_RECURRING_FLAG(i),
                 p_SELECTED_VOLUME_ATTR(i),
                 p_ROUNDING_FACTOR(i),
                 decode(p_HEADER_LIMIT_EXISTS(i),'Y','Y',decode(p_LINE_LIMIT_EXISTS(i),'Y','Y','N')),
                 p_LINE_LIMIT_EXISTS(i),
                 p_CHARGE_TYPE_CODE(i),
                 p_CHARGE_SUBTYPE_CODE(i),
                 p_CURRENCY_DETAIL_ID(i),    /* sunilpandey */
                 p_CURRENCY_HEADER_ID(i),    /* vivek */
                 p_SELLING_ROUNDING_FACTOR(i),    /* vivek */
                 p_ORDER_CURRENCY(i),        /* vivek */
                 p_PRICING_EFFECTIVE_DATE(i),      /* vivek */
                 p_BASE_CURRENCY_CODE(i),         /* vivek */
                 p_PROCESS_CODE(i), -- 3215497, changed from G_STATUS_NEW
                 p_LINE_QUANTITY(i),
                 p_UPDATED_FLAG(i),  -- begin shu fix bug 2599822
                 p_CALCULATION_CODE(i),
                 p_CHANGE_REASON_CODE(i),
                 p_CHANGE_REASON_TEXT(i),     -- end shu fix bug 2599822
                 p_PRICE_ADJUSTMENT_ID(i), -- bug 3099847
                 p_ACCUM_CONTEXT(i),   -- accum range break
                 p_ACCUM_ATTRIBUTE(i), -- accum range break
                 p_ACCUM_FLAG(i),       -- accum range break
                 p_BREAK_UOM_CODE(i), /* Proration */
                 p_BREAK_UOM_CONTEXT(i), /* Proration */
                 p_BREAK_UOM_ATTRIBUTE(i), /* Proration */
                 l_request_id
             );
  QP_PREQ_GRP.G_INT_LDETS_NO := QP_PREQ_GRP.G_INT_LDETS_NO + p_LINE_DETAIL_INDEX.count;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    QP_PREQ_GRP.engine_debug('QP_PREQ_GRP.G_INT_LDETS_NO='||QP_PREQ_GRP.G_INT_LDETS_NO);
  END IF;
  COMMIT;

EXCEPTION
  WHEN OTHERS THEN
  x_status_code := FND_API.G_RET_STS_ERROR;
  x_status_text :=l_routine||' '||SQLERRM;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    QP_PREQ_GRP.engine_debug(l_routine||' '||SQLERRM);
    QP_PREQ_GRP.engine_debug(SQLERRM);
  END IF;
END;

/*+----------------------------------------------------------------------
  |Procedure Public INSERT_LDETS2
  +----------------------------------------------------------------------
*/
PROCEDURE INSERT_LDETS2
                (p_LINE_DETAIL_index           IN PLS_INTEGER_TYPE,
                 p_LINE_DETAIL_TYPE_CODE       IN VARCHAR_TYPE,
                 p_PRICE_BREAK_TYPE_CODE       IN VARCHAR_TYPE,
                 p_LIST_PRICE                  IN NUMBER_TYPE,
                 p_LINE_INDEX                  IN PLS_INTEGER_TYPE,
                 p_CREATED_FROM_LIST_HEADER_ID IN NUMBER_TYPE,
                 p_CREATED_FROM_LIST_LINE_ID   IN NUMBER_TYPE,
                 p_CREATED_FROM_LIST_LINE_TYPE IN VARCHAR_TYPE,
                 p_CREATED_FROM_LIST_TYPE_CODE IN VARCHAR_TYPE,
                 p_CREATED_FROM_SQL            IN VARCHAR_TYPE,
                 p_PRICING_GROUP_SEQUENCE      IN PLS_INTEGER_TYPE,
                 P_PRICING_PHASE_ID            IN PLS_INTEGER_TYPE,
                 p_OPERAND_CALCULATION_CODE    IN VARCHAR_TYPE,
                 p_OPERAND_VALUE               IN VARCHAR_TYPE,
                 p_SUBSTITUTION_TYPE_CODE      IN VARCHAR_TYPE,
                 p_SUBSTITUTION_VALUE_FROM     IN VARCHAR_TYPE,
                 p_SUBSTITUTION_VALUE_TO       IN VARCHAR_TYPE,
                 p_ASK_FOR_FLAG                IN VARCHAR_TYPE,
                 p_PRICE_FORMULA_ID            IN NUMBER_TYPE,
                 p_PRICING_STATUS_CODE         IN VARCHAR_TYPE,
                 p_PRICING_STATUS_TEXT         IN VARCHAR_TYPE,
                 p_PRODUCT_PRECEDENCE          IN PLS_INTEGER_TYPE,
                 p_INCOMPATABLILITY_GRP_CODE   IN VARCHAR_TYPE,
                 p_PROCESSED_FLAG              IN VARCHAR_TYPE,
                 p_APPLIED_FLAG                IN VARCHAR_TYPE,
                 p_AUTOMATIC_FLAG              IN VARCHAR_TYPE,
                 p_OVERRIDE_FLAG               IN VARCHAR_TYPE,
                 p_PRIMARY_UOM_FLAG            IN VARCHAR_TYPE,
                 p_PRINT_ON_INVOICE_FLAG       IN VARCHAR_TYPE,
                 p_MODIFIER_LEVEL_CODE         IN VARCHAR_TYPE,
                 p_BENEFIT_QTY                 IN NUMBER_TYPE,
                 p_BENEFIT_UOM_CODE            IN VARCHAR_TYPE,
                 p_LIST_LINE_NO                IN VARCHAR_TYPE,
                 p_ACCRUAL_FLAG                IN VARCHAR_TYPE,
                 p_ACCRUAL_CONVERSION_RATE     IN NUMBER_TYPE,
                 p_ESTIM_ACCRUAL_RATE          IN NUMBER_TYPE,
                 p_RECURRING_FLAG              IN VARCHAR_TYPE,
                 p_SELECTED_VOLUME_ATTR        IN VARCHAR_TYPE,
                 p_ROUNDING_FACTOR             IN PLS_INTEGER_TYPE,
                 p_HEADER_LIMIT_EXISTS         IN VARCHAR_TYPE,
                 p_LINE_LIMIT_EXISTS           IN VARCHAR_TYPE,
                 p_CHARGE_TYPE_CODE            IN VARCHAR_TYPE,
                 p_CHARGE_SUBTYPE_CODE         IN VARCHAR_TYPE,
                 p_CURRENCY_DETAIL_ID          IN NUMBER_TYPE,
                 p_CURRENCY_HEADER_ID          IN NUMBER_TYPE,
                 p_SELLING_ROUNDING_FACTOR     IN NUMBER_TYPE,
                 p_ORDER_CURRENCY              IN VARCHAR_TYPE,
                 p_PRICING_EFFECTIVE_DATE      IN DATE_TYPE,
                 p_BASE_CURRENCY_CODE          IN VARCHAR_TYPE,
		 p_LINE_QUANTITY	       IN NUMBER_TYPE,
                 p_UPDATED_FLAG                IN VARCHAR_TYPE,
		 p_CALCULATION_CODE            IN VARCHAR_TYPE,
		 p_CHANGE_REASON_CODE          IN VARCHAR_TYPE,
		 p_CHANGE_REASON_TEXT          IN VARCHAR_TYPE,
		 p_PRICE_ADJUSTMENT_ID         IN NUMBER_TYPE, -- bug 3099847
                 p_ACCUM_CONTEXT               IN VARCHAR_TYPE, -- accum range break
                 p_ACCUM_ATTRIBUTE             IN VARCHAR_TYPE, -- accum range break
                 p_ACCUM_FLAG                  IN VARCHAR_TYPE, -- accum range break
		 p_BREAK_UOM_CODE              IN VARCHAR_TYPE, /* Proration*/
		 p_BREAK_UOM_CONTEXT           IN VARCHAR_TYPE, /* Proration*/
		 p_BREAK_UOM_ATTRIBUTE         IN VARCHAR_TYPE, /* Proration*/
                 p_PROCESS_CODE                IN VARCHAR_TYPE, -- 3215497
                 x_status_code                 OUT NOCOPY VARCHAR2,
                 x_status_text                 OUT NOCOPY VARCHAR2)
AS
l_routine VARCHAR2(240):= 'Routine:QP_PREQ_GRP.INSERT_LDETS2';
--added by yangli for Java Engine project
l_debug varchar2(3);
--added by yangli for Java Engine project
BEGIN
--added by yangli for Java Engine project
-- Set the global variable G_DEBUG_ENGINE
  QP_PREQ_GRP.Set_QP_Debug;

  l_debug := QP_PREQ_GRP.G_DEBUG_ENGINE;
--added by yangli for Java Engine project

IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
engine_debug('G_LINE_DETAIL_INDEX b4 insert_ldets2 '||G_LINE_DETAIL_INDEX);

engine_debug('current request_id: '||sys_context('qp_context','request_id'));

END IF;
-- sunilpandey, begin defaulting for multi-currency
IF (p_currency_detail_id.count = 0) THEN -- p_currency_detail_id not passed at all
 FOR i in p_line_index.FIRST .. p_line_index.LAST
 LOOP
  G_CURRENCY_DETAIL_ID_DEF_TBL(i) := NULL;
 END LOOP;
ELSE
 FOR i in p_line_index.FIRST .. p_line_index.LAST
 LOOP
  G_CURRENCY_DETAIL_ID_DEF_TBL(i) := p_currency_detail_id(i);
 END LOOP;
END IF;
-- sunilpandey, begin defaulting for multi-currency

-- vivek, begin defaulting for multi-currency
IF (p_currency_header_id.count = 0) THEN -- p_currency_header_id not passed at all
 FOR i in p_line_index.FIRST .. p_line_index.LAST
 LOOP
  G_CURRENCY_HEADER_ID_DEF_TBL(i) := NULL;
 END LOOP;
ELSE
 FOR i in p_line_index.FIRST .. p_line_index.LAST
 LOOP
  G_CURRENCY_HEADER_ID_DEF_TBL(i) := p_currency_header_id(i);
 END LOOP;
END IF;

-- vivek, begin defaulting for multi-currency - selling_rounding_factor
IF (p_selling_rounding_factor.count = 0) THEN -- p_selling_rounding_factor not passed at all
 FOR i in p_line_index.FIRST .. p_line_index.LAST
 LOOP
  G_SELLING_ROUNDING_DEF_TBL(i) := NULL;
 END LOOP;
ELSE
 FOR i in p_line_index.FIRST .. p_line_index.LAST
 LOOP
  G_SELLING_ROUNDING_DEF_TBL(i) := p_selling_rounding_factor(i);
 END LOOP;
END IF;

IF (p_order_currency.count = 0) THEN -- p_order_currency not passed at all
 FOR i in p_line_index.FIRST .. p_line_index.LAST
 LOOP
  G_ORDER_CURRENCY_DEF_TBL(i) := NULL;
 END LOOP;
ELSE
 FOR i in p_line_index.FIRST .. p_line_index.LAST
 LOOP
  G_ORDER_CURRENCY_DEF_TBL(i) := p_order_currency(i);
 END LOOP;
END IF;

IF (p_pricing_effective_date.count = 0) THEN -- p_pricing_effective_date not passed at all
 FOR i in p_line_index.FIRST .. p_line_index.LAST
 LOOP
  G_PRICING_EFF_DATE_DEF_TBL(i) := NULL;
 END LOOP;
ELSE
 FOR i in p_line_index.FIRST .. p_line_index.LAST
 LOOP
  G_PRICING_EFF_DATE_DEF_TBL(i) := p_pricing_effective_date(i);
 END LOOP;
END IF;

IF (p_base_currency_code.count = 0) THEN -- p_base_currency_code not passed at all
 FOR i in p_line_index.FIRST .. p_line_index.LAST
 LOOP
  G_BASE_CURRENCY_DEF_TBL(i) := NULL;
 END LOOP;
ELSE
 FOR i in p_line_index.FIRST .. p_line_index.LAST
 LOOP
  G_BASE_CURRENCY_DEF_TBL(i) := p_base_currency_code(i);
 END LOOP;
END IF;

-- vivek, end defaulting for multi-currency

--added by spgopal for user-passed line_quantity
IF p_LINE_QUANTITY.count = 0
THEN
FOR i IN p_LINE_DETAIL_INDEX.FIRST..p_LINE_DETAIL_INDEX.LAST
LOOP
	G_LDET_LINE_QUANTITY_TBL(i) := NULL;
END LOOP;
ELSE
FOR i IN p_LINE_DETAIL_INDEX.FIRST..p_LINE_DETAIL_INDEX.LAST
LOOP
	G_LDET_LINE_QUANTITY_TBL(i) := p_LINE_QUANTITY(i);
END LOOP;
END IF;--p_LINE_QUANTITY.count

-- begin shu fix bug 2599822
IF p_UPDATED_FLAG.count = 0 THEN
  FOR i IN p_LINE_DETAIL_INDEX.FIRST .. p_LINE_DETAIL_INDEX.LAST LOOP
    G_UPDATED_FLAG_DEF_TBL(i) := NULL;
  END LOOP;
ELSE
  FOR i IN p_LINE_DETAIL_INDEX.FIRST .. p_LINE_DETAIL_INDEX.LAST LOOP
    G_UPDATED_FLAG_DEF_TBL(i) := p_UPDATED_FLAG(i);
  END LOOP;
END IF;

IF p_CALCULATION_CODE.count = 0 THEN
  FOR i IN p_LINE_DETAIL_INDEX.FIRST .. p_LINE_DETAIL_INDEX.LAST LOOP
    G_CALCULATION_CODE_DEF_TBL(i) := NULL;
  END LOOP;
ELSE
  FOR i IN p_LINE_DETAIL_INDEX.FIRST .. p_LINE_DETAIL_INDEX.LAST LOOP
    G_CALCULATION_CODE_DEF_TBL(i) := p_CALCULATION_CODE(i);
  END LOOP;
END IF;


IF p_CHANGE_REASON_CODE.count = 0 THEN
  FOR i IN p_LINE_DETAIL_INDEX.FIRST .. p_LINE_DETAIL_INDEX.LAST LOOP
    G_CHANGE_REASON_CODE_DEF_TBL(i) := NULL;
  END LOOP;
ELSE
  FOR i IN p_LINE_DETAIL_INDEX.FIRST .. p_LINE_DETAIL_INDEX.LAST LOOP
    G_CHANGE_REASON_CODE_DEF_TBL(i) := p_CHANGE_REASON_CODE(i);
  END LOOP;
END IF;

IF p_CHANGE_REASON_TEXT.count = 0 THEN
  FOR i IN p_LINE_DETAIL_INDEX.FIRST .. p_LINE_DETAIL_INDEX.LAST LOOP
    G_CHANGE_REASON_TEXT_DEF_TBL(i) := NULL;
  END LOOP;
ELSE
  FOR i IN p_LINE_DETAIL_INDEX.FIRST .. p_LINE_DETAIL_INDEX.LAST LOOP
    G_CHANGE_REASON_TEXT_DEF_TBL(i) := p_CHANGE_REASON_TEXT(i);
  END LOOP;
END IF; -- end shu fix bug 2599822

-- bug 3099847
IF p_PRICE_ADJUSTMENT_ID.count = 0 THEN
  FOR i IN p_LINE_DETAIL_INDEX.FIRST .. p_LINE_DETAIL_INDEX.LAST LOOP
    G_PRICE_ADJUSTMENT_ID_DEF_TBL(i) := null;
  END LOOP;
ELSE
  FOR i IN p_LINE_DETAIL_INDEX.FIRST .. p_LINE_DETAIL_INDEX.LAST LOOP
    G_PRICE_ADJUSTMENT_ID_DEF_TBL(i) := p_PRICE_ADJUSTMENT_ID(i);
  END LOOP;
END IF;

-- begin accum range break
IF p_ACCUM_CONTEXT.count = 0 THEN
  FOR i IN p_LINE_DETAIL_INDEX.FIRST .. p_LINE_DETAIL_INDEX.LAST LOOP
    G_ACCUM_CONTEXT_DEF_TBL(i) := null;
  END LOOP;
ELSE
  FOR i IN p_LINE_DETAIL_INDEX.FIRST .. p_LINE_DETAIL_INDEX.LAST LOOP
    G_ACCUM_CONTEXT_DEF_TBL(i) := p_ACCUM_CONTEXT(i);
  END LOOP;
END IF;

IF p_ACCUM_ATTRIBUTE.count = 0 THEN
  FOR i IN p_LINE_DETAIL_INDEX.FIRST .. p_LINE_DETAIL_INDEX.LAST LOOP
    G_ACCUM_ATTRIBUTE_DEF_TBL(i) := null;
  END LOOP;
ELSE
  FOR i IN p_LINE_DETAIL_INDEX.FIRST .. p_LINE_DETAIL_INDEX.LAST LOOP
    G_ACCUM_ATTRIBUTE_DEF_TBL(i) := p_ACCUM_ATTRIBUTE(i);
  END LOOP;
END IF;

IF p_ACCUM_FLAG.count = 0 THEN
  FOR i IN p_LINE_DETAIL_INDEX.FIRST .. p_LINE_DETAIL_INDEX.LAST LOOP
    G_ACCUM_FLAG_DEF_TBL(i) := null;
  END LOOP;
ELSE
  FOR i IN p_LINE_DETAIL_INDEX.FIRST .. p_LINE_DETAIL_INDEX.LAST LOOP
    G_ACCUM_FLAG_DEF_TBL(i) := p_ACCUM_FLAG(i);
  END LOOP;
END IF;
-- end accum range break
/* Proration defaulting START*/
IF p_BREAK_UOM_CODE.count = 0 THEN
  FOR i IN p_LINE_DETAIL_INDEX.FIRST .. p_LINE_DETAIL_INDEX.LAST LOOP
    G_BREAK_UOM_CODE_DEF_TBL(i) := NULL;
  END LOOP;
ELSE
  FOR i IN p_LINE_DETAIL_INDEX.FIRST .. p_LINE_DETAIL_INDEX.LAST LOOP
    G_BREAK_UOM_CODE_DEF_TBL(i) := p_BREAK_UOM_CODE(i);
  END LOOP;
END IF;

IF p_BREAK_UOM_CONTEXT.count = 0 THEN
  FOR i IN p_LINE_DETAIL_INDEX.FIRST .. p_LINE_DETAIL_INDEX.LAST LOOP
    G_BREAK_UOM_CONTEXT_DEF_TBL(i) := NULL;
  END LOOP;
ELSE
  FOR i IN p_LINE_DETAIL_INDEX.FIRST .. p_LINE_DETAIL_INDEX.LAST LOOP
    G_BREAK_UOM_CONTEXT_DEF_TBL(i) := p_BREAK_UOM_CONTEXT(i);
  END LOOP;
END IF;

IF p_BREAK_UOM_ATTRIBUTE.count = 0 THEN
  FOR i IN p_LINE_DETAIL_INDEX.FIRST .. p_LINE_DETAIL_INDEX.LAST LOOP
    G_BREAK_UOM_ATTRIBUTE_DEF_TBL(i) := NULL;
  END LOOP;
ELSE
  FOR i IN p_LINE_DETAIL_INDEX.FIRST .. p_LINE_DETAIL_INDEX.LAST LOOP
    G_BREAK_UOM_ATTRIBUTE_DEF_TBL(i) := p_BREAK_UOM_ATTRIBUTE(i);
  END LOOP;
END IF;
/* Proration defaulting END*/

-- 3215497, defaulting process_code
IF p_PROCESS_CODE.count = 0 THEN
  FOR i IN p_LINE_DETAIL_INDEX.FIRST .. p_LINE_DETAIL_INDEX.LAST LOOP
    G_PROCESS_CODE_DEF_TBL(i) := G_STATUS_NEW;
  END LOOP;
ELSE
  FOR i IN p_LINE_DETAIL_INDEX.FIRST .. p_LINE_DETAIL_INDEX.LAST LOOP
    G_PROCESS_CODE_DEF_TBL(i) := p_PROCESS_CODE(i);
  END LOOP;
END IF;

--added by yangli for Java Engine project
IF QP_JAVA_ENGINE_UTIL_PUB.Java_Engine_Running = 'N' THEN
 IF l_debug = FND_API.G_TRUE THEN
        ENGINE_DEBUG('Java Engine not Installed ----------');
 END IF;

--added by yangli for Java Engine project
FORALL i in p_line_index.FIRST..p_line_index.LAST
 INSERT INTO qp_npreq_ldets_tmp
                (LINE_DETAIL_INDEX,
                 LINE_DETAIL_TYPE_CODE,
                 PRICE_BREAK_TYPE_CODE,
                 LINE_INDEX,
                 CREATED_FROM_LIST_HEADER_ID,
                 CREATED_FROM_LIST_LINE_ID,
                 CREATED_FROM_LIST_LINE_TYPE,
                 CREATED_FROM_LIST_TYPE_CODE,
                 CREATED_FROM_SQL,
                 PRICING_GROUP_SEQUENCE,
                 PRICING_PHASE_ID,
                 OPERAND_CALCULATION_CODE,
                 OPERAND_VALUE,
                 SUBSTITUTION_TYPE_CODE,
                 SUBSTITUTION_VALUE_FROM,
                 SUBSTITUTION_VALUE_TO,
                 ASK_FOR_FLAG,
                 PRICE_FORMULA_ID,
                 PRICING_STATUS_CODE,
                 PRICING_STATUS_TEXT,
                 PRODUCT_PRECEDENCE,
                 INCOMPATABILITY_GRP_CODE,
                 PROCESSED_FLAG,
                 APPLIED_FLAG,
                 AUTOMATIC_FLAG,
                 OVERRIDE_FLAG,
                 PRINT_ON_INVOICE_FLAG,
                 PRIMARY_UOM_FLAG,
                 MODIFIER_LEVEL_CODE,
                 BENEFIT_QTY,
                 BENEFIT_UOM_CODE,
                 LIST_LINE_NO,
                 ACCRUAL_FLAG,
                 ACCRUAL_CONVERSION_RATE,
                 ESTIM_ACCRUAL_RATE,
                 RECURRING_FLAG,
                 SELECTED_VOLUME_ATTR,
                 ROUNDING_FACTOR,
                 HEADER_LIMIT_EXISTS,
                 LINE_LIMIT_EXISTS,
                 CHARGE_TYPE_CODE,
                 CHARGE_SUBTYPE_CODE,
                 CURRENCY_DETAIL_ID, /*sunilpandey */
                 CURRENCY_HEADER_ID, /*vivek */
                 SELLING_ROUNDING_FACTOR, /*vivek */
                 ORDER_CURRENCY, /*vivek */
                 PRICING_EFFECTIVE_DATE,/*vivek */
                 BASE_CURRENCY_CODE,/*vivek */
		 PROCESS_CODE,
		 LINE_QUANTITY,
		 UPDATED_FLAG, -- begin shu fix bug 2599822
		 CALCULATION_CODE,
		 CHANGE_REASON_CODE,
		 CHANGE_REASON_TEXT, -- end shu fix bug 2599822
		 PRICE_ADJUSTMENT_ID, -- bug 3099847
                 ACCUM_CONTEXT,          -- accum range break
                 ACCUM_ATTRIBUTE,        -- accum range break
                 ACCUM_ATTR_RUN_SRC_FLAG, -- accum range break
                 BREAK_UOM_CODE, /* Proration */
                 BREAK_UOM_CONTEXT, /* Proration */
                 BREAK_UOM_ATTRIBUTE /* Proration */
                 )
  VALUES (       p_LINE_DETAIL_INDEX(i),
                 p_LINE_DETAIL_TYPE_CODE(i),
                 p_PRICE_BREAK_TYPE_CODE(i),
                 p_LINE_INDEX(i),
                 p_CREATED_FROM_LIST_HEADER_ID(i),
                 p_CREATED_FROM_LIST_LINE_ID(i),
                 p_CREATED_FROM_LIST_LINE_TYPE(i),
                 p_CREATED_FROM_LIST_TYPE_CODE(i),
                 p_CREATED_FROM_SQL(i),
                 p_PRICING_GROUP_SEQUENCE(i),
                 p_PRICING_PHASE_ID(i),
                 p_OPERAND_CALCULATION_CODE(i),
                 p_OPERAND_VALUE(i),
                 p_SUBSTITUTION_TYPE_CODE(i),
                 p_SUBSTITUTION_VALUE_FROM(i),
                 p_SUBSTITUTION_VALUE_TO(i),
                 p_ASK_FOR_FLAG(i),
                 p_PRICE_FORMULA_ID(i),
                 p_PRICING_STATUS_CODE(i),
                 p_PRICING_STATUS_TEXT(i),
                 p_PRODUCT_PRECEDENCE(i),
                 p_INCOMPATABLILITY_GRP_CODE(i),
                 p_PROCESSED_FLAG(i),
                 p_APPLIED_FLAG(i),
                 p_AUTOMATIC_FLAG(i),
                 p_OVERRIDE_FLAG(i),
                 p_PRINT_ON_INVOICE_FLAG(i),
                 p_PRIMARY_UOM_FLAG(i),
                 p_MODIFIER_LEVEL_CODE(i),
                 p_BENEFIT_QTY(i),
                 p_BENEFIT_UOM_CODE(i),
                 p_LIST_LINE_NO(i),
                 p_ACCRUAL_FLAG(i),
                 p_ACCRUAL_CONVERSION_RATE(i),
                 p_ESTIM_ACCRUAL_RATE(i),
                 p_RECURRING_FLAG(i),
                 p_SELECTED_VOLUME_ATTR(i),
                 p_ROUNDING_FACTOR(i),
                 decode(p_HEADER_LIMIT_EXISTS(i),'Y','Y',decode(p_LINE_LIMIT_EXISTS(i),'Y','Y','N')),
                 p_LINE_LIMIT_EXISTS(i),
                 p_CHARGE_TYPE_CODE(i),
                 p_CHARGE_SUBTYPE_CODE(i),
                 G_CURRENCY_DETAIL_ID_DEF_TBL(i),    /* sunilpandey */
                 G_CURRENCY_HEADER_ID_DEF_TBL(i),    /* vivek */
                 G_SELLING_ROUNDING_DEF_TBL(i),    /* vivek */
                 G_ORDER_CURRENCY_DEF_TBL(i),        /* vivek */
                 G_PRICING_EFF_DATE_DEF_TBL(i),      /* vivek */
                 G_BASE_CURRENCY_DEF_TBL(i),         /* vivek */
		 G_PROCESS_CODE_DEF_TBL(i), -- 3215497, changed from G_STATUS_NEW,
		 G_LDET_LINE_QUANTITY_TBL(i),
		 G_UPDATED_FLAG_DEF_TBL(i),  -- begin shu fix bug 2599822
		 G_CALCULATION_CODE_DEF_TBL(i),
		 G_CHANGE_REASON_CODE_DEF_TBL(i),
		 G_CHANGE_REASON_TEXT_DEF_TBL(i),    -- end shu fix bug 2599822
		 G_PRICE_ADJUSTMENT_ID_DEF_TBL(i), -- bug 3099847
                 G_ACCUM_CONTEXT_DEF_TBL(i),   -- accum range break
                 G_ACCUM_ATTRIBUTE_DEF_TBL(i), -- accum range break
                 G_ACCUM_FLAG_DEF_TBL(i),       -- accum range break
		 G_BREAK_UOM_CODE_DEF_TBL(i), /* Proration */
		 G_BREAK_UOM_CONTEXT_DEF_TBL(i), /* Proration */
		 G_BREAK_UOM_ATTRIBUTE_DEF_TBL(i) /* Proration */
             );
--added by yangli for Java Engine project
ELSE
 IF l_debug = FND_API.G_TRUE THEN
        ENGINE_DEBUG('Java Engine Installed ----------');
 END IF;
  QP_PREQ_GRP.INSERT_LDETS2_AT
                (p_LINE_DETAIL_index           ,
                 p_LINE_DETAIL_TYPE_CODE       ,
                 p_PRICE_BREAK_TYPE_CODE       ,
                 p_LIST_PRICE                  ,
                 p_LINE_INDEX                  ,
                 p_CREATED_FROM_LIST_HEADER_ID ,
                 p_CREATED_FROM_LIST_LINE_ID   ,
                 p_CREATED_FROM_LIST_LINE_TYPE ,
                 p_CREATED_FROM_LIST_TYPE_CODE ,
                 p_CREATED_FROM_SQL            ,
                 p_PRICING_GROUP_SEQUENCE      ,
                 P_PRICING_PHASE_ID            ,
                 p_OPERAND_CALCULATION_CODE    ,
                 p_OPERAND_VALUE               ,
                 p_SUBSTITUTION_TYPE_CODE      ,
                 p_SUBSTITUTION_VALUE_FROM     ,
                 p_SUBSTITUTION_VALUE_TO       ,
                 p_ASK_FOR_FLAG                ,
                 p_PRICE_FORMULA_ID            ,
                 p_PRICING_STATUS_CODE         ,
                 p_PRICING_STATUS_TEXT         ,
                 p_PRODUCT_PRECEDENCE          ,
                 p_INCOMPATABLILITY_GRP_CODE   ,
                 p_PROCESSED_FLAG              ,
                 p_APPLIED_FLAG                ,
                 p_AUTOMATIC_FLAG              ,
                 p_OVERRIDE_FLAG               ,
                 p_PRIMARY_UOM_FLAG            ,
                 p_PRINT_ON_INVOICE_FLAG       ,
                 p_MODIFIER_LEVEL_CODE         ,
                 p_BENEFIT_QTY                 ,
                 p_BENEFIT_UOM_CODE            ,
                 p_LIST_LINE_NO                ,
                 p_ACCRUAL_FLAG                ,
                 p_ACCRUAL_CONVERSION_RATE     ,
                 p_ESTIM_ACCRUAL_RATE          ,
                 p_RECURRING_FLAG              ,
                 p_SELECTED_VOLUME_ATTR        ,
                 p_ROUNDING_FACTOR             ,
                 p_HEADER_LIMIT_EXISTS         ,
                 p_LINE_LIMIT_EXISTS           ,
                 p_CHARGE_TYPE_CODE            ,
                 p_CHARGE_SUBTYPE_CODE         ,
                 G_CURRENCY_DETAIL_ID_DEF_TBL,    /* sunilpandey */
                 G_CURRENCY_HEADER_ID_DEF_TBL,    /* vivek */
                 G_SELLING_ROUNDING_DEF_TBL,    /* vivek */
                 G_ORDER_CURRENCY_DEF_TBL,        /* vivek */
                 G_PRICING_EFF_DATE_DEF_TBL,      /* vivek */
                 G_BASE_CURRENCY_DEF_TBL,         /* vivek */
                 G_LDET_LINE_QUANTITY_TBL,
                 G_UPDATED_FLAG_DEF_TBL,  -- begin shu fix bug 2599822
                 G_CALCULATION_CODE_DEF_TBL,
                 G_CHANGE_REASON_CODE_DEF_TBL,
                 G_CHANGE_REASON_TEXT_DEF_TBL,     -- end shu fix bug 2599822
		 G_PRICE_ADJUSTMENT_ID_DEF_TBL, -- bug 3099847
                 G_ACCUM_CONTEXT_DEF_TBL,   -- accum range break
                 G_ACCUM_ATTRIBUTE_DEF_TBL, -- accum range break
                 G_ACCUM_FLAG_DEF_TBL,       -- accum range break
		 G_BREAK_UOM_CODE_DEF_TBL, /* Proration */
		 G_BREAK_UOM_CONTEXT_DEF_TBL, /* Proration */
		 G_BREAK_UOM_ATTRIBUTE_DEF_TBL, /* Proration */
                 G_PROCESS_CODE_DEF_TBL, -- 3215497
                 x_status_code                 ,
                 x_status_text                 );
END IF;
--added by yangli for Java Engine project

G_CURRENCY_DETAIL_ID_DEF_TBL.delete;
G_CURRENCY_HEADER_ID_DEF_TBL.delete;
G_SELLING_ROUNDING_DEF_TBL.delete;
G_ORDER_CURRENCY_DEF_TBL.delete;
G_PRICING_EFF_DATE_DEF_TBL.delete;
G_BASE_CURRENCY_DEF_TBL.delete;
G_LDET_LINE_QUANTITY_TBL.delete;
G_UPDATED_FLAG_DEF_TBL.delete;  -- begin shu fix bug 2599822
G_CALCULATION_CODE_DEF_TBL.delete;
G_CHANGE_REASON_CODE_DEF_TBL.delete;
G_CHANGE_REASON_TEXT_DEF_TBL.delete; -- end shu fix bug 2599822
G_PRICE_ADJUSTMENT_ID_DEF_TBL.delete; -- bug 3099847
G_ACCUM_CONTEXT_DEF_TBL.delete;   -- accum range break
G_ACCUM_ATTRIBUTE_DEF_TBL.delete; -- accum range break
G_ACCUM_FLAG_DEF_TBL.delete;      -- accum range break
G_BREAK_UOM_CODE_DEF_TBL.delete;  /* Proration */
G_BREAK_UOM_CONTEXT_DEF_TBL.delete;  /* Proration */
G_BREAK_UOM_ATTRIBUTE_DEF_TBL.delete;  /* Proration */
G_PROCESS_CODE_DEF_TBL.delete; -- 3215497

EXCEPTION
  WHEN OTHERS THEN
  x_status_code := FND_API.G_RET_STS_ERROR;
  x_status_text :=l_routine||' '||SQLERRM;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug(l_routine||' '||SQLERRM);
  engine_debug(SQLERRM);
  END IF;
END;

/*+----------------------------------------------------------------------
  |Procedure INSERT_RLTD_LINES2_AT, API to insert relationship data
  +----------------------------------------------------------------------
*/
PROCEDURE INSERT_RLTD_LINES2_AT(
              p_LINE_INDEX                  IN PLS_INTEGER_TYPE,
              p_LINE_DETAIL_INDEX           IN PLS_INTEGER_TYPE,
              p_RELATIONSHIP_TYPE_CODE      IN VARCHAR_TYPE,
              p_RELATED_LINE_INDEX          IN PLS_INTEGER_TYPE,
              p_RELATED_LINE_DETAIL_INDEX   IN PLS_INTEGER_TYPE,
              x_status_code                 OUT NOCOPY VARCHAR2,
              x_status_text                 OUT NOCOPY VARCHAR2,
              p_LIST_LINE_ID                IN NUMBER_TYPE, /* bug 3020816 */
              p_RELATED_LIST_LINE_ID        IN NUMBER_TYPE, /* bug 3020816 */
              p_pricing_status_text         IN VARCHAR_TYPE)
IS
PRAGMA AUTONOMOUS_TRANSACTION;
l_routine VARCHAR2(240):= 'Routine:QP_PREQ_GRP.INSERT_RLTD_LINES2_AT';
l_request_id number;
BEGIN
  l_request_id := nvl(SYS_CONTEXT('QP_CONTEXT','request_id'),-9999);
  FORALL i in p_line_index.FIRST..p_line_index.LAST
  INSERT INTO QP_INT_RLTD_LINES_T (
              LINE_INDEX,
              LINE_DETAIL_INDEX,
              RELATIONSHIP_TYPE_CODE,
              RELATED_LINE_INDEX,
              RELATED_LINE_DETAIL_INDEX,
              REQUEST_TYPE_CODE,
              PRICING_STATUS_CODE,
              LIST_LINE_ID,
              RELATED_LIST_LINE_ID,
              PRICING_STATUS_TEXT,
              request_id)

 VALUES     ( p_LINE_INDEX (i),
              p_LINE_DETAIL_INDEX(i),
              p_RELATIONSHIP_TYPE_CODE(i),
              p_RELATED_LINE_INDEX(i),
              p_RELATED_LINE_DETAIL_INDEX(i),
              'NULL',          -- ASK PRIYA
              G_STATUS_NEW,     -- SHOULD THIS BE UNCHANGED??, SHU, WHAT HAPPENED TO SERVICE LINE
              p_list_line_id(i),
              p_related_list_line_id(i),
              p_pricing_status_text(i),
              l_request_id
            );
  QP_PREQ_GRP.G_INT_RELS_NO := QP_PREQ_GRP.G_INT_RELS_NO + p_LINE_INDEX.count;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    QP_PREQ_GRP.engine_debug('QP_PREQ_GRP.G_INT_RELS_NO='||QP_PREQ_GRP.G_INT_RELS_NO);
  END IF;
 COMMIT;
EXCEPTION
  WHEN OTHERS THEN
  x_status_code := FND_API.G_RET_STS_ERROR;
  x_status_text :=l_routine||' '||SQLERRM;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    QP_PREQ_GRP.engine_debug(l_routine||' '||SQLERRM);
    QP_PREQ_GRP.engine_debug(SQLERRM);
  END IF;
END;


/*+----------------------------------------------------------------------
  |Procedure INSERT_RLTD_LINES2, API to insert relationship data
  +----------------------------------------------------------------------
*/
PROCEDURE INSERT_RLTD_LINES2(
              p_LINE_INDEX                  IN PLS_INTEGER_TYPE,
              p_LINE_DETAIL_INDEX           IN PLS_INTEGER_TYPE,
              p_RELATIONSHIP_TYPE_CODE      IN VARCHAR_TYPE,
              p_RELATED_LINE_INDEX          IN PLS_INTEGER_TYPE,
              p_RELATED_LINE_DETAIL_INDEX   IN PLS_INTEGER_TYPE,
              x_status_code                 OUT NOCOPY VARCHAR2,
              x_status_text                 OUT NOCOPY VARCHAR2,
              p_LIST_LINE_ID                IN NUMBER_TYPE, /* bug 3020816 */
              p_RELATED_LIST_LINE_ID        IN NUMBER_TYPE, /* bug 3020816 */
              p_PRICING_STATUS_TEXT         IN VARCHAR_TYPE) --added for Java Engine
IS
  l_routine VARCHAR2(240):= 'Routine:QP_PREQ_GRP.INSERT_RLTD_LINES2';
--added by yangli for Java Engine project
 l_debug varchar2(3);
--added by yangli for Java Engine project
BEGIN
--added by yangli for Java Engine project
-- Set the global variable G_DEBUG_ENGINE
  QP_PREQ_GRP.Set_QP_Debug;

  l_debug := QP_PREQ_GRP.G_DEBUG_ENGINE;
--added by yangli for Java Engine project

  -- bug 3020816 - need to allow insert into list_line_id and related_list_line_id columns
  IF (p_list_line_id.count = 0) THEN -- p_list_line_id not passed at all
   FOR i in p_line_index.FIRST .. p_line_index.LAST
   LOOP
    G_LIST_LINE_ID_DEF_TBL(i) := NULL;
   END LOOP;
  ELSE
   FOR i in p_line_index.FIRST .. p_line_index.LAST
   LOOP
    G_LIST_LINE_ID_DEF_TBL(i) := p_list_line_id(i);
   END LOOP;
  END IF;

  IF (p_related_list_line_id.count = 0) THEN -- p_related_list_line_id not passed at all
   FOR i in p_line_index.FIRST .. p_line_index.LAST
   LOOP
    G_RLTD_LIST_LINE_ID_DEF_TBL(i) := NULL;
   END LOOP;
  ELSE
   FOR i in p_line_index.FIRST .. p_line_index.LAST
   LOOP
    G_RLTD_LIST_LINE_ID_DEF_TBL(i) := p_related_list_line_id(i);
   END LOOP;
  END IF;

--added by yangli for Java Engine project
  IF (p_pricing_status_text.count = 0) THEN -- p_pricing_status_text not passed at all
   FOR i in p_line_index.FIRST .. p_line_index.LAST
   LOOP
    G_PRICING_STATUS_TEXT_DEF_TBL(i) := NULL;
   END LOOP;
  ELSE
   FOR i in p_line_index.FIRST .. p_line_index.LAST
   LOOP
    G_PRICING_STATUS_TEXT_DEF_TBL(i) := p_pricing_status_text(i);
   END LOOP;
  END IF;

IF QP_JAVA_ENGINE_UTIL_PUB.Java_Engine_Running = 'N' THEN
 IF l_debug = FND_API.G_TRUE THEN
        ENGINE_DEBUG('Java Engine not Installed ----------');
 END IF;
--added by yangli for Java Engine project

  FORALL i in p_line_index.FIRST..p_line_index.LAST
  INSERT INTO qp_npreq_rltd_lines_tmp (
              LINE_INDEX,
              LINE_DETAIL_INDEX,
              RELATIONSHIP_TYPE_CODE,
              RELATED_LINE_INDEX,
              RELATED_LINE_DETAIL_INDEX,
              REQUEST_TYPE_CODE,
              PRICING_STATUS_CODE,
              LIST_LINE_ID,
              RELATED_LIST_LINE_ID)

 VALUES     (
              p_LINE_INDEX (i),
              p_LINE_DETAIL_INDEX(i),
              p_RELATIONSHIP_TYPE_CODE(i),
              p_RELATED_LINE_INDEX(i),
              p_RELATED_LINE_DETAIL_INDEX(i),
              'NULL',          -- ASK PRIYA
              G_STATUS_NEW,     -- SHOULD THIS BE UNCHANGED??, SHU, WHAT HAPPENED TO SERVICE LINE
              G_LIST_LINE_ID_DEF_TBL(i),
              G_RLTD_LIST_LINE_ID_DEF_TBL(i)
            );
--added by yangli for Java Engine project
ELSE
 IF l_debug = FND_API.G_TRUE THEN
        ENGINE_DEBUG('Java Engine Installed ----------');
 END IF;
QP_PREQ_GRP.INSERT_RLTD_LINES2_AT
              (p_LINE_INDEX  ,
              p_LINE_DETAIL_INDEX           ,
              p_RELATIONSHIP_TYPE_CODE      ,
              p_RELATED_LINE_INDEX          ,
              p_RELATED_LINE_DETAIL_INDEX   ,
              x_status_code                 ,
              x_status_text,
              G_LIST_LINE_ID_DEF_TBL,
              G_RLTD_LIST_LINE_ID_DEF_TBL,
              G_PRICING_STATUS_TEXT_DEF_TBL);
END IF;
--added by yangli for Java Engine project

   G_LIST_LINE_ID_DEF_TBL.delete;
   G_RLTD_LIST_LINE_ID_DEF_TBL.delete;
--added by yangli for Java Engine project
   G_PRICING_STATUS_TEXT_DEF_TBL.delete;
EXCEPTION
  WHEN OTHERS THEN
  x_status_code := FND_API.G_RET_STS_ERROR;
  x_status_text :=l_routine||' '||SQLERRM;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug(l_routine||' '||SQLERRM);
  engine_debug(SQLERRM);
  END IF;
END INSERT_RLTD_LINES2; -- public version

/*+----------------------------------------------------------------------
  |Procedure INSERT_RLTD_LINES2, overloaded version, bug 3215497
  +----------------------------------------------------------------------*/
PROCEDURE INSERT_RLTD_LINES2(
              p_LINE_INDEX                  IN NUMBER_TYPE,
              p_LINE_DETAIL_INDEX           IN NUMBER_TYPE,
              p_RELATIONSHIP_TYPE_CODE      IN VARCHAR_TYPE,
              p_RELATED_LINE_INDEX          IN NUMBER_TYPE,
              p_RELATED_LINE_DETAIL_INDEX   IN NUMBER_TYPE,
              x_status_code                 OUT NOCOPY VARCHAR2,
              x_status_text                 OUT NOCOPY VARCHAR2,
              p_LIST_LINE_ID                IN NUMBER_TYPE, /* bug 3020816 */
              p_RELATED_LIST_LINE_ID        IN NUMBER_TYPE, /* bug 3020816 */
              p_PRICING_STATUS_TEXT         IN VARCHAR_TYPE) --added for Java Engine
IS
  i NUMBER;
  l_line_index PLS_INTEGER_TYPE;
  l_ldet_index PLS_INTEGER_TYPE;
  l_rltd_line_index PLS_INTEGER_TYPE;
  l_rltd_ldet_index PLS_INTEGER_TYPE;
BEGIN
  FOR i IN p_LINE_INDEX.FIRST .. p_LINE_INDEX.LAST LOOP
    l_line_index(i) := p_LINE_INDEX(i);
  END LOOP;
  FOR i IN p_LINE_DETAIL_INDEX.FIRST .. p_LINE_DETAIL_INDEX.LAST LOOP
    l_ldet_index(i) := p_LINE_DETAIL_INDEX(i);
  END LOOP;
  FOR i IN p_RELATED_LINE_INDEX.FIRST .. p_RELATED_LINE_INDEX.LAST LOOP
    l_rltd_line_index(i) := p_RELATED_LINE_INDEX(i);
  END LOOP;
  FOR i IN p_RELATED_LINE_DETAIL_INDEX.FIRST .. p_RELATED_LINE_DETAIL_INDEX.LAST LOOP
    l_rltd_ldet_index(i) := p_RELATED_LINE_DETAIL_INDEX(i);
  END LOOP;

  -- call new version
  INSERT_RLTD_LINES2(
    p_LINE_INDEX => l_line_index,
    p_LINE_DETAIL_INDEX => l_ldet_index,
    p_RELATIONSHIP_TYPE_CODE => p_RELATIONSHIP_TYPE_CODE,
    p_RELATED_LINE_INDEX => l_rltd_line_index,
    p_RELATED_LINE_DETAIL_INDEX => l_rltd_ldet_index,
    x_status_code => x_status_code,
    x_status_text => x_status_text,
    p_LIST_LINE_ID => p_LIST_LINE_ID,
    p_RELATED_LIST_LINE_ID => p_RELATED_LIST_LINE_ID,
    p_PRICING_STATUS_TEXT => p_PRICING_STATUS_TEXT
  );
END INSERT_RLTD_LINES2; -- overloaded version

/*
  +------------------------------------------------------------------------
  |PROCEDURE Source_Vol_Contexts_Attributes
  +-------------------------------------------------------------------------
*/

PROCEDURE Source_Vol_Contexts_Attributes(p_pricing_phase_seq    PLS_INTEGER,
                                         p_freeze_override_flag VARCHAR2,
                                         p_ordr_amt_flag        VARCHAR2,
                                         x_status_code OUT NOCOPY     VARCHAR2,
                                         x_status_text OUT NOCOPY     VARCHAR2) AS
/*
INDX,QP_PREQ_GRP.source_vol_contexts_attributes.get_request_lines_cur,- No Index Used-,NA,NA
*/
CURSOR get_request_lines_cur IS
SELECT LINE_INDEX,
       LINE_QUANTITY,
       PRICED_QUANTITY,
       UNIT_PRICE,
       LINE_TYPE_CODE,
	  LINE_UOM_CODE,
	  PRICED_UOM_CODE,
	  PRICE_FLAG
FROM   qp_npreq_lines_tmp;
--WHERE  LINE_UOM_CODE <> PRICED_UOM_CODE;
/*WHERE  (PRICE_FLAG = G_YES
       OR
       (PRICE_FLAG = G_PHASE
        AND
        p_freeze_override_flag = G_YES)
       );*/

/*
INDX,QP_PREQ_GRP.source_vol_contexts_attributes.get_inventory_item_id_cur,qp_npreq_line_attrs_tmp_N2,PRICING_STATUS_CODE,1
INDX,QP_PREQ_GRP.source_vol_contexts_attributes.get_inventory_item_id_cur,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.source_vol_contexts_attributes.get_inventory_item_id_cur,qp_npreq_line_attrs_tmp_N2,CONTEXT,3
INDX,QP_PREQ_GRP.source_vol_contexts_attributes.get_inventory_item_id_cur,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE,4
INDX,QP_PREQ_GRP.source_vol_contexts_attributes.get_inventory_item_id_cur,qp_npreq_line_attrs_tmp_N2,LINE_INDEX,5
*/
CURSOR get_inventory_item_id_cur(p_line_index PLS_INTEGER) IS
SELECT /*+ dynamic_sampling(1) */ to_number(VALUE_FROM)
FROM   qp_npreq_line_attrs_tmp
WHERE  CONTEXT = G_PRIC_ITEM_CONTEXT
AND    ATTRIBUTE = G_PRIC_ATTRIBUTE1
AND    ATTRIBUTE_TYPE = G_PRODUCT_TYPE
AND    LINE_INDEX = p_line_index
AND    PRICING_STATUS_CODE = G_STATUS_UNCHANGED;

/*
INDX,QP_PREQ_GRP.source_vol_contexts_attributes.order_amount_cur,- No Index Used -,NA,NA
*/
CURSOR order_amount_cur IS
--SELECT nvl(SUM(UNIT_PRICE * PRICED_QUANTITY),0)
select nvl(sum(nvl(line_unit_price * line_quantity, UNIT_PRICE * PRICED_QUANTITY)),0) /* 3143535 */
FROM   qp_npreq_lines_tmp
WHERE charge_periodicity_code is NULL;   -- added for recurring charges Bug # 4465168



v_order_amt         NUMBER;
v_count             PLS_INTEGER;
v_inventory_item_id	NUMBER;
v_uom_rate		NUMBER;
l_status_code       VARCHAR2(30);
l_status_text       VARCHAR2(240);
l_routine      	CONSTANT VARCHAR2(240) := 'QP_PREQ_GRP.Source_Vol_Contexts_Attributes';

l_l_line_index_tbl      NUMBER_TYPE;
l_l_line_quantity_tbl   NUMBER_TYPE;
l_l_priced_quantity_tbl NUMBER_TYPE;
l_l_unit_price_tbl      NUMBER_TYPE;
l_l_line_type_code_tbl  VARCHAR_30_TYPE;
l_l_line_uom_code_tbl   VARCHAR_30_TYPE;
l_l_priced_uom_code_tbl VARCHAR_30_TYPE;
l_l_price_flag_tbl      VARCHAR_30_TYPE;

l_co_line_index_tbl  NUMBER_TYPE;
l_co_bulk_count      NUMBER := 0;

l_ia_value_from_tbl  VARCHAR_TYPE;
l_ia_line_index_tbl  NUMBER_TYPE;
l_ia_attribute_tbl   VARCHAR_TYPE;
l_ia_bulk_count      NUMBER := 0;
l_lin_qty_exists	number:=0;
BEGIN
qp_debug_util.tstart('SOURCE_VOL_CONTEXTS_ATTRIBUTES','Procedure SOURCE_VOL_CONTEXTS_ATTRIBUTES');
  -- julin [3805113]: bulk fetch request lines
  OPEN get_request_lines_cur;
  LOOP
    FETCH get_request_lines_cur BULK COLLECT INTO
      l_l_line_index_tbl,
      l_l_line_quantity_tbl,
      l_l_priced_quantity_tbl,
      l_l_unit_price_tbl,
      l_l_line_type_code_tbl,
      l_l_line_uom_code_tbl,
      l_l_priced_uom_code_tbl,
      l_l_price_flag_tbl
      LIMIT G_BATCH_SIZE;
    EXIT WHEN l_l_line_index_tbl.count = 0;

    l_co_line_index_tbl.delete;
    l_ia_value_from_tbl.delete;
    l_ia_line_index_tbl.delete;
    l_ia_attribute_tbl.delete;

  FOR I in l_l_line_index_tbl.first .. l_l_line_index_tbl.last
  LOOP

  -- ITEM QUANTITY(Price List Sequence)
  /* IF (p_pricing_phase_seq = G_PRICE_LIST_SEQUENCE AND i.LINE_TYPE_CODE = G_LINE_LEVEL) THEN

     UPDATE qp_npreq_line_attrs_tmp
     SET VALUE_FROM = qp_number.number_to_canonical(nvl(I.LINE_QUANTITY,0))
     WHERE  LINE_INDEX = I.LINE_INDEX
     AND    CONTEXT = G_PRIC_VOLUME_CONTEXT
     AND    ATTRIBUTE = G_QUANTITY_ATTRIBUTE
     AND    ATTRIBUTE_TYPE = G_PRICING_TYPE
     AND    PRICING_STATUS_CODE = G_STATUS_UNCHANGED;

     IF SQL%ROWCOUNT = 0 THEN
       IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
       engine_debug('No volume context in temp table, inserting one');
       END IF;
        INSERT_LINE_ATTRS
       (p_LINE_INDEX               =>I.LINE_INDEX,
        p_ATTRIBUTE_LEVEL          =>G_LINE_LEVEL,
        p_ATTRIBUTE_TYPE           =>G_PRICING_TYPE,
        p_CONTEXT                  =>G_PRIC_VOLUME_CONTEXT,
        p_ATTRIBUTE                =>G_QUANTITY_ATTRIBUTE,
        p_VALUE_FROM               =>qp_number.number_to_canonical(NVL(I.LINE_QUANTITY,0)),
        p_VALIDATED_FLAG           =>G_NO,
        p_APPLIED_FLAG             =>G_LIST_NOT_APPLIED,
        p_PRICING_STATUS_CODE      =>G_STATUS_UNCHANGED,
        P_PRICING_ATTR_FLAG        =>G_PRICING_YES,
        x_status_code              =>l_status_code,
        x_status_text              =>l_status_text);

        IF l_status_code = FND_API.G_RET_STS_ERROR THEN
		RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
        END IF;
     END IF;
	-- Reset the unit price if price event occurs
  IF (i.PRICE_FLAG = G_YES OR (i.PRICE_FLAG = G_PHASE AND p_freeze_override_flag = G_YES)) THEN
	 UPDATE qp_npreq_lines_tmp
	 SET UNIT_PRICE = NULL
	 WHERE LINE_INDEX = I.LINE_INDEX;
  END IF;

 END IF;  */

  -- PRICED QUANTITY(Discounts Sequence)
  -- bug 3572594 - update the cross order volume period qty even if there is no price phase in the current engine call
  IF (p_pricing_phase_seq <> G_PRICE_LIST_SEQUENCE AND l_l_line_type_code_tbl(I) = G_LINE_LEVEL ) THEN
       IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
       engine_debug('Trying to update cross order volume period qty in temp table');

       END IF;
	 -- Cross Order Quantities
      OPEN get_inventory_item_id_cur(l_l_line_index_tbl(I));
      FETCH get_inventory_item_id_cur INTO v_inventory_item_id;
      CLOSE get_inventory_item_id_cur;

       -- Get the pricing uom qty with the uom conversion routine
      Inv_convert.inv_um_conversion(l_l_line_uom_code_tbl(I),
				               l_l_priced_uom_code_tbl(I),
				               v_inventory_item_id,
				               v_uom_rate);

      -- Update Period1 Item Qty, Period2 Item Qty , Period3 Item Qty with conversion from order uom to pricing uom
      IF (v_uom_rate = -99999) THEN
     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
	    engine_debug('Uom Rate cannot be -99999');
     END IF;
      ELSE
         IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
         engine_debug('Uom Rate Is: ' || v_uom_rate );
         END IF;

         -- bug 3572594 - round the multiplied value to profile QP_INV_DECIMAL_PRECISION
         if G_INV_DECIMAL_PRECISION is null then
           G_INV_DECIMAL_PRECISION := nvl(FND_PROFILE.Value('QP_INV_DECIMAL_PRECISION'),10);
         end if;
/*
INDX,QP_PREQ_GRP.source_vol_contexts_attributes.source_vol_contexts_attributes_upd4,qp_npreq_line_attrs_tmp_N2,PRICING_STATUS_CODE,1
INDX,QP_PREQ_GRP.source_vol_contexts_attributes.source_vol_contexts_attributes_upd4,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.source_vol_contexts_attributes.source_vol_contexts_attributes_upd4,qp_npreq_line_attrs_tmp_N2,CONTEXT,3
INDX,QP_PREQ_GRP.source_vol_contexts_attributes.source_vol_contexts_attributes_upd4,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE,4
INDX,QP_PREQ_GRP.source_vol_contexts_attributes.source_vol_contexts_attributes_upd4,qp_npreq_line_attrs_tmp_N2,LINE_INDEX,5
*/

         -- julin [3805113]: bulk update
         l_co_line_index_tbl(l_co_bulk_count) := l_l_line_index_tbl(I);
         l_co_bulk_count := l_co_bulk_count + 1;
      END IF;
  END IF;

  -- ITEM AMOUNT(Discounts Sequence)
   IF (p_pricing_phase_seq <> G_PRICE_LIST_SEQUENCE AND l_l_line_type_code_tbl(I) = G_LINE_LEVEL AND G_PRICE_PHASE_FLAG = TRUE) THEN
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
	 engine_debug ('Trying to update line quantity and line amount in temp table');

  END IF;
/*
INDX,QP_PREQ_GRP.source_vol_contexts_attributes.source_vol_contexts_attributes_upd3,qp_npreq_line_attrs_tmp_N2,PRICING_STATUS_CODE,1
INDX,QP_PREQ_GRP.source_vol_contexts_attributes.source_vol_contexts_attributes_upd3,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.source_vol_contexts_attributes.source_vol_contexts_attributes_upd3,qp_npreq_line_attrs_tmp_N2,CONTEXT,3
INDX,QP_PREQ_GRP.source_vol_contexts_attributes.source_vol_contexts_attributes_upd3,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE,4
INDX,QP_PREQ_GRP.source_vol_contexts_attributes.source_vol_contexts_attributes_upd3,qp_npreq_line_attrs_tmp_N2,LINE_INDEX,5
*/
     -- julin [3805113]: bulk update
     l_ia_value_from_tbl(l_ia_bulk_count) := qp_number.number_to_canonical(nvl(nvl(l_l_priced_quantity_tbl(I),l_l_line_quantity_tbl(I)),0));
     l_ia_line_index_tbl(l_ia_bulk_count) := l_l_line_index_tbl(I);
     l_ia_attribute_tbl(l_ia_bulk_count) := G_QUANTITY_ATTRIBUTE;
     l_ia_bulk_count := l_ia_bulk_count + 1;

    IF G_LIN_QTY_ATTR_SRCD <> G_YES THEN
	    BEGIN
		    engine_debug ('Before select statment DKC');
		    SELECT 1
		    INTO l_lin_qty_exists
		    FROM dual
		    WHERE EXISTS (SELECT 1
				    FROM qp_npreq_line_attrs_tmp
				     WHERE  CONTEXT = G_PRIC_VOLUME_CONTEXT
				     AND    ATTRIBUTE = G_QUANTITY_ATTRIBUTE
				     AND    ATTRIBUTE_TYPE = G_PRICING_TYPE
				     AND    PRICING_STATUS_CODE = G_STATUS_UNCHANGED);
		     engine_debug ('After select statment DKC');
	    EXCEPTION
	    WHEN NO_DATA_FOUND THEN
		FORALL j in l_l_line_index_tbl.FIRST..l_l_line_index_tbl.LAST
		 INSERT INTO qp_npreq_line_attrs_tmp
				(LINE_INDEX,
				 ATTRIBUTE_LEVEL,
				 ATTRIBUTE_TYPE,
				 CONTEXT,
				 ATTRIBUTE,
				 VALUE_FROM,
				 VALIDATED_FLAG,
				 APPLIED_FLAG       ,
				 PRICING_STATUS_CODE,
				 PRICING_STATUS_TEXT,
				 PRICING_ATTR_FLAG
				 )
		VALUES          (l_l_line_index_tbl(j),
				 G_LINE_LEVEL,
				 G_PRICING_TYPE,
				 G_PRIC_VOLUME_CONTEXT,
				 G_QUANTITY_ATTRIBUTE,
				 qp_number.number_to_canonical(nvl(nvl(l_l_priced_quantity_tbl(j),l_l_line_quantity_tbl(j)),0)),
				 G_NO,
				 G_LIST_NOT_APPLIED,
				 G_STATUS_UNCHANGED,
				 'chaitu',
				 G_PRICING_YES
				 );
		G_LIN_QTY_ATTR_SRCD := G_YES;
	    WHEN OTHERS THEN
	    NULL;
	    END;
	END IF;

     /* IF SQL%ROWCOUNT = 0 THEN
      IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
      engine_debug('No volume context in temp table, inserting one');
      END IF;
      INSERT_LINE_ATTRS
       (p_LINE_INDEX               =>I.LINE_INDEX,
        p_ATTRIBUTE_LEVEL          =>G_LINE_LEVEL,
        p_ATTRIBUTE_TYPE           =>G_PRICING_TYPE,
        p_CONTEXT                  =>G_PRIC_VOLUME_CONTEXT,
        p_ATTRIBUTE                =>G_QUANTITY_ATTRIBUTE,
        p_VALUE_FROM               =>qp_number.number_to_canonical(nvl(NVL(I.PRICED_QUANTITY,I.LINE_QUANTITY),0)),
        p_VALIDATED_FLAG           =>G_NO,
        p_APPLIED_FLAG             =>G_LIST_NOT_APPLIED,
        p_PRICING_STATUS_CODE      =>G_STATUS_UNCHANGED,
        P_PRICING_ATTR_FLAG        =>G_PRICING_YES,
        x_status_code              =>l_status_code,
        x_status_text              =>l_status_text);
     END IF; */ -- Attribute Mapping is sourcing Volume Attributes 01/14/02, AC Nielsen Performance

/*
INDX,QP_PREQ_GRP.source_vol_contexts_attributes.source_vol_contexts_attributes_upd5,qp_npreq_line_attrs_tmp_N2,PRICING_STATUS_CODE,1
INDX,QP_PREQ_GRP.source_vol_contexts_attributes.source_vol_contexts_attributes_upd5,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.source_vol_contexts_attributes.source_vol_contexts_attributes_upd5,qp_npreq_line_attrs_tmp_N2,CONTEXT,3
INDX,QP_PREQ_GRP.source_vol_contexts_attributes.source_vol_contexts_attributes_upd5,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE,4
INDX,QP_PREQ_GRP.source_vol_contexts_attributes.source_vol_contexts_attributes_upd5,qp_npreq_line_attrs_tmp_N2,LINE_INDEX,5
*/
     -- julin [3805113]: bulk update
     l_ia_value_from_tbl(l_ia_bulk_count) := qp_number.number_to_canonical(nvl(nvl(l_l_priced_quantity_tbl(I),l_l_line_quantity_tbl(I))  * l_l_unit_price_tbl(I),0));
     l_ia_line_index_tbl(l_ia_bulk_count) := l_l_line_index_tbl(I);
     l_ia_attribute_tbl(l_ia_bulk_count) := G_LINE_AMT_ATTRIBUTE;
     l_ia_bulk_count := l_ia_bulk_count + 1;

      /* IF SQL%ROWCOUNT = 0 THEN
         IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
         engine_debug('No volume context and line amt in temp table, inserting one');
         END IF;
        INSERT_LINE_ATTRS
         (p_LINE_INDEX              =>I.LINE_INDEX,
          p_ATTRIBUTE_LEVEL         =>G_LINE_LEVEL,
          p_ATTRIBUTE_TYPE          =>G_PRICING_TYPE,
          p_CONTEXT                 =>G_PRIC_VOLUME_CONTEXT,
          p_ATTRIBUTE               =>G_LINE_AMT_ATTRIBUTE,
          p_VALUE_FROM              =>qp_number.number_to_canonical(nvl(nvl(I.PRICED_QUANTITY,I.LINE_QUANTITY) * I.UNIT_PRICE ,0)),
          p_VALIDATED_FLAG          =>G_NO,
          p_APPLIED_FLAG            =>G_LIST_NOT_APPLIED,
          p_PRICING_STATUS_CODE     =>G_STATUS_UNCHANGED,
          P_PRICING_ATTR_FLAG       =>G_PRICING_YES,
          x_status_code             =>l_status_code,
          x_status_text             =>l_status_text);
      END IF;  */ -- Attribute Mapping is sourcing Volume Attributes 01/14/02, AC Nielsen Performance


    /*UPDATE qp_npreq_lines_tmp
    SET    LINE_AMOUNT = nvl(nvl(I.PRICED_QUANTITY,I.LINE_QUANTITY) * I.UNIT_PRICE,0)
    WHERE  LINE_INDEX = I.LINE_INDEX; */

    G_QUALIFIER_TEMP := 'N';

  END IF;

 END LOOP;

  -- julin [3805113]: bulk update for CROSS ORDER VOLUME
  IF (l_co_line_index_tbl.count > 0) THEN
    FORALL I IN l_co_line_index_tbl.first..l_co_line_index_tbl.last
      UPDATE /*+ index(qp_npreq_line_attrs_tmp qp_preq_line_attrs_tmp_n2) */ qp_npreq_line_attrs_tmp --upd4
        SET VALUE_FROM = qp_number.number_to_canonical(round(qp_number.canonical_to_number(nvl(VALUE_FROM,0)) * v_uom_rate, G_INV_DECIMAL_PRECISION))
	WHERE  LINE_INDEX = l_co_line_index_tbl(I)
	AND    CONTEXT = G_PRIC_VOLUME_CONTEXT
	AND    ATTRIBUTE IN ('PRICING_ATTRIBUTE3','PRICING_ATTRIBUTE1','PRICING_ATTRIBUTE11')
	AND    ATTRIBUTE_TYPE = G_PRICING_TYPE
	AND    PRICING_STATUS_CODE = G_STATUS_UNCHANGED;
  END IF;

  -- julin [3805113]: bulk update for ITEM AMOUNT
  IF (l_ia_line_index_tbl.count > 0) THEN
    FORALL I IN l_ia_line_index_tbl.first..l_ia_line_index_tbl.last
      UPDATE /*+ index(qp_npreq_line_attrs_tmp qp_preq_line_attrs_tmp_n2) */ qp_npreq_line_attrs_tmp --upd3, upd5
        SET VALUE_FROM = l_ia_value_from_tbl(I)
        WHERE  LINE_INDEX = l_ia_line_index_tbl(I)
        AND    CONTEXT = G_PRIC_VOLUME_CONTEXT
        AND    ATTRIBUTE = l_ia_attribute_tbl(I)
        AND    ATTRIBUTE_TYPE = G_PRICING_TYPE
        AND    PRICING_STATUS_CODE = G_STATUS_UNCHANGED;
  END IF;

  -- ORDER AMOUNT(Discounts Sequence) only for BATCH event
  IF (p_pricing_phase_seq <> G_PRICE_LIST_SEQUENCE and p_ordr_amt_flag = G_YES) THEN
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
	 engine_debug ('Trying to update order amount in temp table');

  END IF;
     OPEN order_amount_cur;
     FETCH order_amount_cur INTO v_order_amt;
     CLOSE order_amount_cur;

  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug ('v_order_amt = ' || v_order_amt);
     engine_debug ('G_BEFORE_PRICING_ORD_AMT = ' || G_BEFORE_PRICING_ORD_AMT);
  END IF;

/*
INDX,QP_PREQ_GRP.source_vol_contexts_attributes.source_vol_contexts_attributes_upd6,qp_npreq_line_attrs_tmp_N2,PRICING_STATUS_CODE,1
INDX,QP_PREQ_GRP.source_vol_contexts_attributes.source_vol_contexts_attributes_upd6,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.source_vol_contexts_attributes.source_vol_contexts_attributes_upd6,qp_npreq_line_attrs_tmp_N2,CONTEXT,3
INDX,QP_PREQ_GRP.source_vol_contexts_attributes.source_vol_contexts_attributes_upd6,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE,4
*/
     -- Bug 3143535 - ORDER AMOUNT CALCULATION ISSUE
     UPDATE qp_npreq_line_attrs_tmp --upd6
     --SET VALUE_FROM = qp_number.number_to_canonical(v_order_amt)
     SET VALUE_FROM = qp_number.number_to_canonical(qp_number.canonical_to_number(value_from)
                                                     - G_BEFORE_PRICING_ORD_AMT
                                                     + v_order_amt)
     WHERE
            CONTEXT = G_PRIC_VOLUME_CONTEXT
     AND    ATTRIBUTE = G_ORDER_AMOUNT_ATTRIBUTE
     AND    ATTRIBUTE_TYPE = G_QUALIFIER_TYPE
     AND    PRICING_STATUS_CODE = G_STATUS_UNCHANGED;

      IF SQL%ROWCOUNT = 0 THEN
         IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
         engine_debug('No volume context and order amt in temp table, inserting one');

         END IF;
        INSERT INTO qp_npreq_line_attrs_tmp
	   (LINE_INDEX,ATTRIBUTE_LEVEL,ATTRIBUTE_TYPE,CONTEXT,ATTRIBUTE,VALUE_FROM,
	    VALIDATED_FLAG,APPLIED_FLAG,PRICING_STATUS_CODE,PRICING_ATTR_FLAG)
        SELECT
         LINE_INDEX,
         LINE_TYPE_CODE,
         G_QUALIFIER_TYPE,
         G_PRIC_VOLUME_CONTEXT,
         G_ORDER_AMOUNT_ATTRIBUTE,
         qp_number.number_to_canonical(v_order_amt),
         G_NO,
         G_NO,
         G_STATUS_UNCHANGED,
         G_NO
        FROM qp_npreq_lines_tmp;

      END IF;

      IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
         declare
            l_value_from   varchar2(240);
         begin
           select value_from
           into l_value_from
          from qp_npreq_line_attrs_tmp
         where CONTEXT = G_PRIC_VOLUME_CONTEXT
           AND ATTRIBUTE = G_ORDER_AMOUNT_ATTRIBUTE
           AND ATTRIBUTE_TYPE = G_QUALIFIER_TYPE
           AND PRICING_STATUS_CODE = G_STATUS_UNCHANGED
           and rownum = 1;

            engine_debug ('final order amount attribute = ' || l_value_from);
         exception
           when no_data_found then
             null;
           when others then
             null;
         end;
      END IF;

  END IF;

  END LOOP;
  CLOSE get_request_lines_cur;
qp_debug_util.tstop('SOURCE_VOL_CONTEXTS_ATTRIBUTES');
EXCEPTION
   WHEN OTHERS THEN
   x_status_code := FND_API.G_RET_STS_ERROR;
   x_status_text := l_routine ||': '||SQLERRM;
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug(x_status_text);
   END IF;
   qp_debug_util.tstop('SOURCE_VOL_CONTEXTS_ATTRIBUTES');
END Source_Vol_Contexts_Attributes;

PROCEDURE Update_Distinct_Qualifier_Flag( x_status_code OUT NOCOPY VARCHAR2,
                                          x_status_text OUT NOCOPY VARCHAR2) AS

 l_routine VARCHAR2(40) := 'Update_Distinct_Qualifier_Flag';
BEGIN
qp_debug_util.tstart('UPDATE_DISTINCT_QUALIFIER_FLAG','Procedure UPDATE_DISTINCT_QUALIFIER_FLAG');
/*
INDX,QP_PREQ_GRP.update_distinct_qualifier_flag.sel1,qp_npreq_line_attrs_tmp_N2,PRICING_STATUS_CODE,1
INDX,QP_PREQ_GRP.update_distinct_qualifier_flag.sel1,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.update_distinct_qualifier_flag.sel1,qp_npreq_line_attrs_tmp_N2,CONTEXT,3
INDX,QP_PREQ_GRP.update_distinct_qualifier_flag.sel1,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE,4
INDX,QP_PREQ_GRP.update_distinct_qualifier_flag.sel1,qp_npreq_line_attrs_tmp_N2,LINE_INDEX,5
INDX,QP_PREQ_GRP.update_distinct_qualifier_flag.sel1,qp_npreq_line_attrs_tmp_N2,VALUE_FROM,6
*/
 UPDATE /*+ dynamic_sampling(1) */ qp_npreq_line_attrs_tmp a
 SET    distinct_qualifier_flag = 'Y'
 WHERE  pricing_status_code = G_STATUS_UNCHANGED
 AND    attribute_type = G_QUALIFIER_TYPE
 AND    rowid = (SELECT /*+ dynamic_sampling(1) */ min(rowid)
                 FROM qp_npreq_line_attrs_tmp b
                 WHERE a.context = b.context
                 AND   a.attribute = b.attribute
                 AND   a.value_from = b.value_from
                 AND   b.attribute_type = G_QUALIFIER_TYPE
                 AND   b.pricing_status_code = G_STATUS_UNCHANGED);

 -- This is much performant than the previous sql
  /* UPDATE qp_npreq_line_attrs_tmp a
  SET    distinct_qualifier_flag = 'Y'
  WHERE  pricing_status_code = G_STATUS_UNCHANGED
  AND    attribute_type = G_QUALIFIER_TYPE
  AND    rowid = (SELECT min(rowid)
                  FROM qp_npreq_line_attrs_tmp b
                  WHERE b.attribute_type = G_QUALIFIER_TYPE
                  AND   b.pricing_status_code = G_STATUS_UNCHANGED
                  GROUP BY b.context , b.attribute , b.value_from); */
qp_debug_util.tstop('UPDATE_DISTINCT_QUALIFIER_FLAG');
EXCEPTION
  WHEN OTHERS THEN
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug(l_routine||' '||SQLERRM);
   END IF;
   x_status_code := FND_API.G_RET_STS_ERROR;
   x_status_text := 'Error in '||l_routine||SQLERRM;
	qp_debug_util.tstop('UPDATE_DISTINCT_QUALIFIER_FLAG');
END Update_Distinct_Qualifier_Flag;


/*+-----------------------------------------------------------------------
  |PROCEDURE  Delete_Duplicate_List_Lines
  +------------------------------------------------------------------------
*/

-- shu fix bug 1915355

PROCEDURE Delete_Duplicate_List_Lines(p_pricing_phase_id NUMBER,
                           x_status_code OUT NOCOPY VARCHAR2,
                           x_status_text OUT NOCOPY VARCHAR2) AS

l_routine VARCHAR2(40) := 'Delete_Duplicate_List_Lines';

CURSOR get_duplicate_list_lines_count IS
SELECT count(*)
FROM qp_npreq_ldets_tmp
WHERE pricing_status_code = G_STATUS_NEW
AND   pricing_phase_id = p_pricing_phase_id
GROUP BY line_index,created_from_list_line_id
HAVING count(*) > 1;

l_count NUMBER := 0;

BEGIN

IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
engine_debug('In Delete Duplicate List Lines procedure');

END IF;
OPEN get_duplicate_list_lines_count;
FETCH get_duplicate_list_lines_count INTO l_count;
CLOSE get_duplicate_list_lines_count;

IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
engine_debug('Duplicate List Lines Count : ' || l_count);
END IF;

IF (l_count > 0) THEN
 UPDATE qp_npreq_ldets_tmp a
 SET pricing_status_code = 'DUPLICATE_LIST_LINE'
 WHERE pricing_status_code = G_STATUS_NEW
 AND   pricing_phase_id = p_pricing_phase_id
 AND rowid not in (SELECT min(rowid)
 		FROM qp_npreq_ldets_tmp
 		WHERE pricing_status_code = G_STATUS_NEW
   		AND   pricing_phase_id = p_pricing_phase_id
                GROUP BY line_index,created_from_list_line_id);
END IF;
EXCEPTION
  WHEN OTHERS THEN
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug(l_routine||' '||SQLERRM);
   END IF;
   x_status_code := FND_API.G_RET_STS_ERROR;
   x_status_text := 'Error in '||l_routine||SQLERRM;

END Delete_Duplicate_List_Lines;
--Added new procedure Delete_Hdrs_With_No_ProdAttr for 3520634
/*+-----------------------------------------------------------------------
  |PROCEDURE Delete_Hdrs_With_No_ProdAttr
  +------------------------------------------------------------------------
*/
--Added index hints for bug#7480862
PROCEDURE Delete_Hdrs_With_No_ProdAttr(p_pricing_phase_id NUMBER,
                                       x_status_code OUT NOCOPY VARCHAR2,
                                       x_status_text OUT NOCOPY VARCHAR2) AS

 l_routine VARCHAR2(40) := 'Delete_Hdrs_With_No_ProdAttr';

BEGIN

   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug('Entering '||l_routine);
   END IF;
 UPDATE /*+ index(a qpprod QP_PREQ_QUAL_TMP_N1) dynamic_sampling(1) */ qp_preq_qual_tmp a   --5658579
 --UPDATE qp_preq_qual_tmp a
 SET    pricing_status_code = G_STATUS_DELETED
 WHERE pricing_status_code = G_STATUS_UNCHANGED
   AND pricing_phase_id = p_pricing_phase_id
   AND list_line_id = -1
   AND NOT EXISTS (select /*+ NO_UNNEST
                              leading (c)
                              use_nl (c qpprod)
                              index (qpprod, QP_PREQ_LINE_ATTRS_TMP_N6)
                              index(c qp_pricing_attributes_n13) */
		'x'
                   FROM  qp_npreq_line_attrs_tmp qpprod, qp_pricing_attributes c
                   WHERE c.list_header_id = a.list_header_id        -- delete header for which product does
                   AND   c.pricing_phase_id = p_pricing_phase_id    -- not match
                   AND   qpprod.context = c.product_attribute_context
                   AND   qpprod.attribute = c.product_attribute
                   AND   qpprod.value_from = c.product_attr_value
                   AND   qpprod.pricing_status_code = G_STATUS_UNCHANGED
                   AND   c.qualification_ind in (G_YES_PROD_HDR_LINE_QUAL_IND, G_YES_PROD_HDR_QUAL_IND,
                                                 G_YES_PROD_PRIC_HDR_QUAL_IND, G_YES_PRIC_HDR_LINE_QUAL_IND)
                   AND   qpprod.attribute_type = G_PRODUCT_TYPE
                   AND   c.excluder_flag = G_NO
                   AND   rownum = 1
                   --UNION
                   --SELECT /*+ ORDERED USE_NL(d qppric) index(d qp_pricing_attributes_n5) */ 'x'
                   /*FROM  qp_npreq_line_attrs_tmp qpprod,
                         qp_pricing_attributes d,
                         qp_preq_line_attrs_tmp qppric
                   WHERE d.list_header_id = a.list_header_id      -- delete header for which product and
                   AND   d.pricing_phase_id = p_pricing_phase_id  -- pricing attrbutes do not match
                   AND   d.QUALIFICATION_IND in (G_YES_PROD_PRIC_HDR_QUAL_IND, G_YES_PRIC_HDR_LINE_QUAL_IND)
                   AND   d.product_attribute_context = qpprod.context
                   AND   d.product_attribute = qpprod.attribute
                   AND   d.product_attr_value = qpprod.value_from
                   AND   d.excluder_flag = G_NO
                   AND   d.pricing_attribute_context = qppric.context
                   AND   d.pricing_attribute = qppric.attribute
                   AND   (d.pricing_attr_value_from = qppric.value_from
                          or d.comparison_operator_code IN ('NOT =',G_OPERATOR_BETWEEN))
                   AND   qpprod.attribute_type='PRODUCT'
                   AND   qpprod.pricing_status_code=G_STATUS_UNCHANGED
                   AND   qppric.attribute_type = 'PRICING'
                   AND   qppric.pricing_status_code = G_STATUS_UNCHANGED
                   AND   qpprod.line_index = qppric.line_index
                   AND   rownum = 1*/
                  )
 AND  NOT EXISTS (SELECT 'x'              --do not delete header for which product is not defined
                  FROM  qp_list_lines d
                  WHERE d.list_header_id = a.list_header_id
                  AND   d.qualification_ind in (G_YES_HDR_LINE_QUAL_IND,G_YES_HDR_QUAL_IND)
                  AND   d.pricing_phase_id = p_pricing_phase_id
                  AND   rownum=1);

 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('No of headers deleted from qual tmp due to non-matching of product : ' || l_routine || ' ' || SQL%ROWCOUNT);
 END IF;

EXCEPTION
  WHEN OTHERS THEN
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug(l_routine||' '||SQLERRM);
   END IF;
   x_status_code := FND_API.G_RET_STS_ERROR;
   x_status_text := 'Error in '||l_routine||SQLERRM;

END Delete_Hdrs_With_No_ProdAttr;



PROCEDURE Delete_Un_Asked_For_Promotions (p_line_index            IN NUMBER,
                                          p_pricing_phase_id      IN NUMBER,
                                          p_incompat_resolve_code IN VARCHAR2,
                                          x_return_status       OUT NOCOPY
VARCHAR2,
                                          x_return_status_txt   OUT NOCOPY
VARCHAR2) AS
l_debug varchar2(3);
l_pricing_status_code varchar2(30);
BEGIN
     l_debug := QP_PREQ_GRP.G_DEBUG_ENGINE;

     -- [julin/4116856]: moved from QP_Resolve_Incompatability_PVT.Best_Price_-
     -- For_Phase; required to delete un-asked-for promotions before they are
     -- processed.
     -- Delete lines which are actually ask_for in setup , but are not asked for in the Order
     -- Because Engine selects these lines irrespective of their ask_for_flag
     -- Index Certificate
     /*
            INDX,QP_Resolve_Incompatability_PVTRUN.best_price_for_phase.upd1,qp_npreq_ldets_tmp_N3,LINE_INDEX,1
            INDX,QP_Resolve_Incompatability_PVTRUN.best_price_for_phase.upd1,qp_npreq_ldets_tmp_N3,PRICING_PHASE_ID,2
            INDX,QP_Resolve_Incompatability_PVTRUN.best_price_for_phase.upd1,qp_npreq_ldets_tmp_N3,ASK_FOR_FLAG,3
            INDX,QP_Resolve_Incompatability_PVTRUN.best_price_for_phase.upd1,qp_npreq_line_attrs_tmp_N2,PRICING_STATUS_CODE,1
            INDX,QP_Resolve_Incompatability_PVTRUN.best_price_for_phase.upd1,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE_TYPE,2
            INDX,QP_Resolve_Incompatability_PVTRUN.best_price_for_phase.upd1,qp_npreq_line_attrs_tmp_N2,CONTEXT,3
            INDX,QP_Resolve_Incompatability_PVTRUN.best_price_for_phase.upd1,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE,4
            INDX,QP_Resolve_Incompatability_PVTRUN.best_price_for_phase.upd1,qp_npreq_line_attrs_tmp_N2,LINE_INDEX,5
            INDX,QP_Resolve_Incompatability_PVTRUN.best_price_for_phase.upd1,qp_npreq_line_attrs_tmp_N2,VALUE_FROM,6
       */
     IF (p_incompat_resolve_code = G_INCOMP_BEST_PRICE) THEN
 l_pricing_status_code := QP_PREQ_GRP.G_STATUS_BEST_PRICE_EVAL;
     ELSE
       l_pricing_status_code := QP_PREQ_GRP.G_STATUS_INCOMP_LOGIC;
     END IF;


     UPDATE qp_npreq_ldets_tmp a  --upd1
     SET PRICING_STATUS_CODE = l_pricing_status_code
     WHERE a.ASK_FOR_FLAG = QP_PREQ_GRP.G_YES
     AND a.PRICING_PHASE_ID = p_pricing_phase_id
     AND a.LINE_INDEX = p_line_index
     AND NOT EXISTS (
       SELECT /*+ index(b QP_PREQ_LINE_ATTRS_TMP_N2) */ 'X' -- This can use N2 instead of N7
       FROM  qp_npreq_line_attrs_tmp b
       WHERE  b.LINE_INDEX = p_line_index
       AND b.PRICING_STATUS_CODE = QP_PREQ_GRP.G_STATUS_UNCHANGED
       AND b.ATTRIBUTE_TYPE = QP_PREQ_GRP.G_QUALIFIER_TYPE
       AND b.CONTEXT = QP_PREQ_GRP.G_LIST_HEADER_CONTEXT
       AND b.ATTRIBUTE IN (QP_PREQ_GRP.G_QUAL_ATTRIBUTE1,
                      QP_PREQ_GRP.G_QUAL_ATTRIBUTE2,
                      QP_PREQ_GRP.G_QUAL_ATTRIBUTE6)
       AND b.VALUE_FROM = decode(b.ATTRIBUTE,
                     QP_PREQ_GRP.G_QUAL_ATTRIBUTE1,to_char(a.CREATED_FROM_LIST_HEADER_ID),
                     QP_PREQ_GRP.G_QUAL_ATTRIBUTE2,to_char(a.CREATED_FROM_LIST_LINE_ID),
                     QP_PREQ_GRP.G_QUAL_ATTRIBUTE6,to_char(a.CREATED_FROM_LIST_HEADER_ID)));

     IF l_debug = FND_API.G_TRUE THEN
       QP_PREQ_GRP.engine_debug ('Deleted Un Asked for promotions:'||l_pricing_status_code);
     END IF;

EXCEPTION
  WHEN OTHERS THEN
    x_return_status := FND_API.G_RET_STS_ERROR;
    x_return_status_txt := 'Unexpected error in QP_PREQ_GRP.Delete_Un_Asked_For_Promotions: ' || SQLERRM;
END Delete_Un_Asked_For_Promotions;



/*+-----------------------------------------------------------------------
  |PROCEDURE  Populate_Temp_Tables
  +------------------------------------------------------------------------
*/
PROCEDURE Populate_Temp_Tables
(p_line_tbl               IN   LINE_TBL_TYPE,
 p_qual_tbl               IN   QUAL_TBL_TYPE,
 p_line_attr_tbl          IN   LINE_ATTR_TBL_TYPE,
 p_LINE_DETAIL_tbl        IN   LINE_DETAIL_TBL_TYPE,
 p_LINE_DETAIL_qual_tbl   IN   LINE_DETAIL_QUAL_TBL_TYPE,
 p_LINE_DETAIL_attr_tbl   IN   LINE_DETAIL_ATTR_TBL_TYPE,
 p_rltd_lines_tbl         IN   RELATED_LINES_TBL_TYPE,
 p_rounding_flag          IN   VARCHAR2,
 p_pricing_status_code    IN   VARCHAR2,
 p_price_phase_flag       IN   BOOLEAN,
 p_freeze_override_flag   IN   VARCHAR2,
 p_pricing_event          IN   VARCHAR2,
 p_calculate_flag         IN   VARCHAR2,
 x_status_code            OUT NOCOPY VARCHAR2,
 x_status_text            OUT NOCOPY VARCHAR2
)

AS

I PLS_INTEGER;
v_error_code NUMBER;
v_error_message VARCHAR2(255);
l_message VARCHAR2(255);
l_status_code VARCHAR2(240);
l_status_text VARCHAR2(240);
l_pricing_status_code VARCHAR2(30);
v_pricing_status_code VARCHAR2(30);
J PLS_INTEGER:=1;
K PLS_INTEGER:=1;
TYPE line_index_type IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
l_line_index_tbl line_index_type;
E_DATE_IS_NULL EXCEPTION;
E_CURRENCY_CODE_IS_NULL EXCEPTION;
l_routine VARCHAR2(240):='QP_PREQ_GRP.Populate_Temp_Tables';
l_count   PLS_INTEGER;
l_attribute_type VARCHAR2(30);
l_line_quantity  NUMBER;
l_line_amount    NUMBER;
l_unit_price     NUMBER;
l_order_header_id  VARCHAR2(200) := 'MISSING HEADER';
l_order_line_id NUMBER;
l_not_insert_order_line_flag BOOLEAN := FALSE;
l_summary_line_index PLS_INTEGER;
l_price_flag    VARCHAR2(1);
l_source_qty_flag VARCHAR2(1);
l_source_amt_flag VARCHAR2(1);

E_ROUTINE_ERRORS EXCEPTION;

/*
INDX,QP_PREQ_GRP.populate_temp_tables.l_get_count_cur,qp_npreq_line_attrs_tmp_N2,PRICING_STATUS_CODE,1
*/
CURSOR l_get_count_cur IS
 SELECT COUNT(*)
 FROM   qp_npreq_line_attrs_tmp
 WHERE  PRICING_STATUS_CODE = 'X';

--added by yangli for Java Engine project
/*
INDX,QP_PREQ_GRP.populate_temp_tables.l_int_count_cur,qp_int_line_attrs_N2,PRICING_STATUS_CODE,1
*/
CURSOR l_int_count_cur IS
 SELECT COUNT(*)
 FROM   qp_int_line_attrs
 WHERE  PRICING_STATUS_CODE = 'X';
--added by yangli for Java Engine project

   -- begin declare shu fix bug 1728757
  l_list_header_id qp_qualifiers.list_header_id%type := NULL;
  --l_cascade_ask_for_profile VARCHAR2(2):= nvl(FND_PROFILE.value ('QP_CASCADE_ASK_FOR_PROMOTION'), G_NO);
  l_cascade_ask_for_profile VARCHAR2(2):= G_NO;
  l_ask_for_flag qp_list_headers_b.ask_for_flag%type := NULL;

  CURSOR get_ask_for_flag_cur (l_list_header_id IN NUMBER) IS
	SELECT a.ask_for_flag
	FROM qp_list_headers_b a
 	WHERE a.list_header_id = l_list_header_id;

  CURSOR l_ask_for_child_ids (l_list_header_id IN NUMBER) IS
 	SELECT
    		qp_lhdr_b.list_header_id
 	FROM
   		qp_list_headers_b qp_lhdr_b
 	WHERE
    		qp_lhdr_b.parent_list_header_id = l_list_header_id AND qp_lhdr_b.ask_for_flag = G_YES;

  -- end shu fix bug 1728757

BEGIN
 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
 engine_debug('Rounding Flag: '||p_rounding_flag);
 engine_debug ('Passed in Attribute Count : ' || p_line_attr_tbl.count);
 engine_debug ('Passed in Qualifier Count : ' || p_qual_tbl.count);
 engine_debug ('Passed in Lines Count : ' || p_line_tbl.count);
 engine_debug ('Passed in Line dtls Count : ' || p_LINE_DETAIL_tbl.count);
 engine_debug ('-----Line information passed-----');
 END IF;
 I:=  p_line_tbl.FIRST;

 --if the control record says it is calculate_only
 --then it will bypass search so, pricing_status_code should
 --be G_STATUS_NEW as is it is selected by search engine.

 l_pricing_status_code := p_pricing_status_code;


--Reset_all_tbls;
Reset_All_Tbls(l_status_code ,l_status_text );
IF (l_status_code = FND_API.G_RET_STS_ERROR) THEN
 RAISE E_ROUTINE_ERRORS;
END IF;

K:=1;
WHILE I IS NOT NULL LOOP


   IF ( p_line_tbl(I).CURRENCY_CODE IS NULL or
     p_line_tbl(I).CURRENCY_CODE = FND_API.G_MISS_CHAR ) THEN
     RAISE E_CURRENCY_CODE_IS_NULL;
   ELSE
    --IF (G_CURRENCY_CODE IS NULL) THEN
     G_CURRENCY_CODE := p_line_tbl(I).CURRENCY_CODE;
    --END IF;
   END IF;


   IF ( p_line_tbl(I).PRICING_EFFECTIVE_DATE IS NULL ) THEN
     RAISE E_DATE_IS_NULL;
   END IF;
--Begin Bug# 7833575
  --uncommented the commenting done for FP 7321922
   IF (G_MIN_PRICING_DATE IS NULL) THEN
    G_MIN_PRICING_DATE             := TRUNC(p_line_tbl(I).PRICING_EFFECTIVE_DATE);
    G_MAX_PRICING_DATE             := TRUNC(p_line_tbl(I).PRICING_EFFECTIVE_DATE);
 --/*  --FP 7321922
   ELSE
    IF (TRUNC(p_line_tbl(I).PRICING_EFFECTIVE_DATE) < TRUNC(G_MIN_PRICING_DATE) AND
              p_line_tbl(I).LINE_TYPE_CODE <> 'ORDER') THEN
     G_MIN_PRICING_DATE             := TRUNC(p_line_tbl(I).PRICING_EFFECTIVE_DATE);
    END IF;
    IF (TRUNC(p_line_tbl(I).PRICING_EFFECTIVE_DATE) > TRUNC(G_MAX_PRICING_DATE) AND
              p_line_tbl(I).LINE_TYPE_CODE <> 'ORDER') THEN
     G_MAX_PRICING_DATE             := TRUNC(p_line_tbl(I).PRICING_EFFECTIVE_DATE);
    END IF;
   END IF;
--*/
--End Bug# 7833575
   IF (instr(p_pricing_event || ',' ,'PRICE,',1,1) > 0 OR instr(p_pricing_event || ',' ,'LINE,',1,1) > 0) THEN
   --IF (p_pricing_event in ('PRICE','LINE')) THEN
    l_not_insert_order_line_flag := TRUE;
   ELSE
    l_not_insert_order_line_flag := FALSE;
   END IF;

   l_summary_line_index := -99999; -- Reset
   l_price_flag := p_line_tbl(I).price_flag ; -- Default/Reset

   IF (p_line_tbl(I).LINE_TYPE_CODE = G_ORDER_LEVEL) THEN
    l_summary_line_index := p_line_tbl(I).LINE_INDEX;
    l_order_header_id := to_char(p_line_tbl(I).LINE_ID);
    G_ORDER_ID := p_line_tbl(I).LINE_ID; -- accum range break
    --Global variable for limits
    G_ORDER_PRICE_REQUEST_CODE := p_line_tbl(I).REQUEST_TYPE_CODE || '-' || l_order_header_id;
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug( ' Order Price Request Code : ' || G_ORDER_PRICE_REQUEST_CODE);
    END IF;
   END IF;

   IF (p_line_tbl(I).LINE_TYPE_CODE = G_ORDER_LEVEL AND l_not_insert_order_line_flag = TRUE) THEN
    l_price_flag := 'N'; -- for summary line
   END IF;

   --dbms_output.put_line ('Min Sysdate : ' || G_MIN_PRICING_DATE);
   --dbms_output.put_line ('Max Sysdate : ' || G_MAX_PRICING_DATE);

   -- do not overwrite the list price if it is a calculate call
   IF ((p_line_tbl(I).PRICE_FLAG = G_YES OR (p_line_tbl(I).PRICE_FLAG = G_PHASE AND p_freeze_override_flag = G_YES))
       AND p_price_phase_flag = TRUE AND G_MANUAL_ADJUSTMENTS_CALL_FLAG = G_NO
       AND p_calculate_flag IN (G_SEARCH_ONLY,G_SEARCH_N_CALCULATE))
       AND NVL (p_line_tbl(I).LIST_PRICE_OVERRIDE_FLAG, 'N') = 'N'  --po integration
  THEN
    l_unit_price := NULL;
   ELSE
    l_unit_price := p_line_tbl(I).UNIT_PRICE;
   END IF;

  --IF (l_not_insert_order_line_flag = TRUE and p_line_tbl(I).LINE_TYPE_CODE <> G_ORDER_LEVEL or
  --    l_not_insert_order_line_flag = FALSE) THEN
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug (' Loading the line info into plsql tables');

   END IF;
   G_LINE_INDEX_TBL(K)            :=  p_line_tbl(I).LINE_INDEX;
   G_LINE_TYPE_CODE_TBL(K)        :=  p_line_tbl(I).LINE_TYPE_CODE;
   G_PRICING_EFFECTIVE_DATE_TBL(K):=  TRUNC(p_line_tbl(I).PRICING_EFFECTIVE_DATE);
   G_ACTIVE_DATE_FIRST_TBL(K)     :=  TRUNC(p_line_tbl(I).ACTIVE_DATE_FIRST);
   G_ACTIVE_DATE_FIRST_TYPE_TBL(K):=  p_line_tbl(I).ACTIVE_DATE_FIRST_TYPE;
   G_ACTIVE_DATE_SECOND_TBL(K)    :=  TRUNC(p_line_tbl(I).ACTIVE_DATE_SECOND);
   G_ACTIVE_DATE_SECOND_TYPE_TBL(K):= p_line_tbl(I).ACTIVE_DATE_SECOND_TYPE;
   G_LINE_QUANTITY_TBL(K)          := p_line_tbl(I).LINE_QUANTITY;
   G_LINE_UOM_CODE_TBL(K)          := p_line_tbl(I).LINE_UOM_CODE;
   G_REQUEST_TYPE_CODE_TBL(K)      := p_line_tbl(I).REQUEST_TYPE_CODE;
   G_UOM_QUANTITY_TBL(K)           := p_line_tbl(I).UOM_QUANTITY;

   If p_price_phase_flag = TRUE AND p_line_tbl(I).LIST_PRICE_OVERRIDE_FLAG IN (
'Y', 'O')
   Then  --po integration
   	G_PRICED_QUANTITY_TBL(K)        := p_line_tbl(I).LINE_QUANTITY;
   	G_PRICED_UOM_CODE_TBL(K)        := p_line_tbl(I).LINE_UOM_CODE;
        G_ADJUSTED_UNIT_PRICE_TBL(K)    := l_unit_price;
   	G_LINE_UNIT_PRICE_TBL(K) 	:= l_unit_price; /* shu_latest */
   Else
   	G_PRICED_QUANTITY_TBL(K)        := p_line_tbl(I).PRICED_QUANTITY;
   	G_PRICED_UOM_CODE_TBL(K)        := p_line_tbl(I).PRICED_UOM_CODE;
   	G_ADJUSTED_UNIT_PRICE_TBL(K)    := p_line_tbl(I).ADJUSTED_UNIT_PRICE;
   	G_LINE_UNIT_PRICE_TBL(K) 	:= p_line_tbl(I).LINE_UNIT_PRICE; /* shu_latest */
   End If;  --po integration

   G_CURRENCY_CODE_TBL(K)          := p_line_tbl(I).CURRENCY_CODE;
   G_UNIT_PRICE_TBL(K)             := l_unit_price;
   G_PERCENT_PRICE_TBL(K)          := p_line_tbl(I).PERCENT_PRICE;
   G_UPD_ADJUSTED_UNIT_PRICE_TBL(K):= p_line_tbl(I).UPDATED_ADJUSTED_UNIT_PRICE;
   G_PROCESSED_FLAG_TBL(K)         := G_NOT_PROCESSED;
   G_PRICE_FLAG_TBL(K)             := l_price_flag;
   G_LINE_ID_TBL(K)                := p_line_tbl(I).LINE_ID;
   G_ROUNDING_FLAG_TBL(K)          := p_rounding_flag;
   G_ROUNDING_FACTOR_TBL(K)        := p_line_tbl(I).ROUNDING_FACTOR;
   G_PROCESSING_ORDER_TBL(K)       := NULL;
   G_PRICING_STATUS_CODE_tbl(K)    := G_STATUS_UNCHANGED; -- always when inserted
   G_PRICING_STATUS_TEXT_tbl(K)    := NULL;
   G_QUALIFIERS_EXIST_FLAG_TBL(K)  := 'N';
   G_PRICING_ATTRS_EXIST_FLAG_TBL(K) := 'N';
   G_PRICE_LIST_ID_TBL(K) := -9999;
   G_PL_VALIDATED_FLAG_TBL(K) := 'N';
   G_USAGE_PRICING_TYPE_TBL(K)     := nvl(p_line_tbl(I).USAGE_PRICING_TYPE,G_REGULAR_USAGE_TYPE);
   G_LINE_CATEGORY_TBL(K) := p_line_tbl(I).LINE_CATEGORY;
   G_CONTRACT_START_DATE_TBL(K) := p_line_tbl(I).CONTRACT_START_DATE; /* shulin */
   G_CONTRACT_END_DATE_TBL(K) := p_line_tbl(I).CONTRACT_END_DATE; /* shulin */
   G_LIST_PRICE_OVERRIDE_FLAG_TBL(K)   := nvl (p_line_tbl(I).LIST_PRICE_OVERRIDE_FLAG, 'N'); --po integration
   G_CHARGE_PERIODICITY_CODE_TBL(K) := p_line_tbl(I).CHARGE_PERIODICITY_CODE;

   /* IF (p_line_tbl(I).HEADER_ID IS NULL) THEN
    l_order_header_id := 'MISSING HEADER';
   ELSE
    l_order_header_id := to_char(p_line_tbl(I).HEADER_ID);
   END IF; */

   IF (p_line_tbl(I).LINE_ID IS NULL) THEN
    SELECT qp_limit_price_request_code_s.nextval
    INTO l_order_line_id
    FROM dual;
   ELSE
    l_order_line_id := p_line_tbl(I).LINE_ID;
   END IF;

   IF (p_line_tbl(I).LINE_TYPE_CODE = G_LINE_LEVEL) THEN
    IF (p_line_tbl(I).PRICE_REQUEST_CODE IS NULL) THEN
     G_PRICE_REQUEST_CODE_TBL(K):=p_line_tbl(I).REQUEST_TYPE_CODE || '-' || l_order_header_id || '-' || l_order_line_id;
    ELSE
     G_PRICE_REQUEST_CODE_TBL(K):=p_line_tbl(I).PRICE_REQUEST_CODE;
    END IF;
   ELSE
    IF (p_line_tbl(I).PRICE_REQUEST_CODE IS NULL) THEN
     G_PRICE_REQUEST_CODE_TBL(K):=p_line_tbl(I).REQUEST_TYPE_CODE || '-' || l_order_header_id;
    ELSE
     G_PRICE_REQUEST_CODE_TBL(K):=p_line_tbl(I).PRICE_REQUEST_CODE;
    END IF;
   END IF;

  --END IF;

 I:=  p_line_tbl.NEXT(I);
 K:=K+1;
END LOOP;

  IF K > 1 THEN
            IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
            engine_debug ('Bulk Inserting the actual lines : ' || G_PRICE_LIST_ID_TBL(1));
            END IF;
            INSERT_LINES2
                (p_LINE_INDEX =>   G_LINE_INDEX_TBL,
                 p_LINE_TYPE_CODE =>  G_LINE_TYPE_CODE_TBL,
                 p_PRICING_EFFECTIVE_DATE =>G_PRICING_EFFECTIVE_DATE_TBL,
                 p_ACTIVE_DATE_FIRST       =>G_ACTIVE_DATE_FIRST_TBL,
                 p_ACTIVE_DATE_FIRST_TYPE  =>G_ACTIVE_DATE_FIRST_TYPE_TBL,
                 p_ACTIVE_DATE_SECOND      =>G_ACTIVE_DATE_SECOND_TBL,
                 p_ACTIVE_DATE_SECOND_TYPE =>G_ACTIVE_DATE_SECOND_TYPE_TBL,
                 p_LINE_QUANTITY =>     G_LINE_QUANTITY_TBL,
                 p_LINE_UOM_CODE =>     G_LINE_UOM_CODE_TBL,
                 p_REQUEST_TYPE_CODE => G_REQUEST_TYPE_CODE_TBL,
                 p_PRICED_QUANTITY =>   G_PRICED_QUANTITY_TBL,
                 p_PRICED_UOM_CODE =>   G_PRICED_UOM_CODE_TBL,
                 p_CURRENCY_CODE   =>   G_CURRENCY_CODE_TBL,
                 p_UNIT_PRICE      =>   G_UNIT_PRICE_TBL,
                 p_PERCENT_PRICE   =>   G_PERCENT_PRICE_TBL,
                 p_UOM_QUANTITY =>      G_UOM_QUANTITY_TBL,
                 p_ADJUSTED_UNIT_PRICE =>G_ADJUSTED_UNIT_PRICE_TBL,
                 p_UPD_ADJUSTED_UNIT_PRICE =>G_UPD_ADJUSTED_UNIT_PRICE_TBL,
                 p_PROCESSED_FLAG      =>G_PROCESSED_FLAG_TBL,
                 p_PRICE_FLAG          =>G_PRICE_FLAG_TBL,
                 p_LINE_ID             =>G_LINE_ID_TBL,
                 p_PROCESSING_ORDER    =>G_PROCESSING_ORDER_TBL,
                 p_PRICING_STATUS_CODE =>G_PRICING_STATUS_CODE_tbl,
                 p_PRICING_STATUS_TEXT =>G_PRICING_STATUS_TEXT_tbl,
                 p_ROUNDING_FLAG       =>G_ROUNDING_FLAG_TBL,
                 p_ROUNDING_FACTOR     =>G_ROUNDING_FACTOR_TBL,
                 p_QUALIFIERS_EXIST_FLAG => G_QUALIFIERS_EXIST_FLAG_TBL,
                 p_PRICING_ATTRS_EXIST_FLAG =>G_PRICING_ATTRS_EXIST_FLAG_TBL,
                 p_PRICE_LIST_ID          => G_PRICE_LIST_ID_TBL,
                 p_VALIDATED_FLAG         => G_PL_VALIDATED_FLAG_TBL,
                 p_PRICE_REQUEST_CODE     => G_PRICE_REQUEST_CODE_TBL,
		 p_USAGE_PRICING_TYPE  =>G_USAGE_PRICING_TYPE_tbl,
                 p_LINE_CATEGORY       =>G_LINE_CATEGORY_TBL,
                 p_CONTRACT_START_DATE =>G_CONTRACT_START_DATE_TBL, /* shulin */
                 p_CONTRACT_END_DATE =>G_CONTRACT_END_DATE_TBL, /* shulin */
                 p_LINE_UNIT_PRICE =>G_LINE_UNIT_PRICE_TBL, /* shu_latest */
		 p_LIST_PRICE_OVERRIDE_FLAG => G_LIST_PRICE_OVERRIDE_FLAG_TBL, -- po integration
                 p_CHARGE_PERIODICITY_CODE => G_CHARGE_PERIODICITY_CODE_TBL,
                 x_status_code         =>l_status_code,
                 x_status_text         =>l_status_text);

        IF l_status_code = FND_API.G_RET_STS_ERROR THEN
            RAISE E_ROUTINE_ERRORS;
        END IF;
 END IF;

/*************************populating line attributes *****************************/

--Reset_all_tbls;
Reset_All_Tbls(l_status_code ,l_status_text );
IF (l_status_code = FND_API.G_RET_STS_ERROR) THEN
 RAISE E_ROUTINE_ERRORS;
END IF;

I:= p_qual_tbl.FIRST;
K:=1;

WHILE (I IS NOT NULL AND
      (l_not_insert_order_line_flag = TRUE
       and p_qual_tbl(I).LINE_INDEX <> l_summary_line_index or
       l_not_insert_order_line_flag = FALSE)) LOOP
 G_LINE_INDEX_tbl(K)          := p_qual_tbl(I).LINE_INDEX;
 G_ATTRIBUTE_LEVEL_tbl(K)     := G_LINE_LEVEL;
 G_ATTRIBUTE_TYPE_tbl(K)      := G_QUALIFIER_TYPE;
 G_CONTEXT_tbl(K)             := p_qual_tbl(I).QUALIFIER_CONTEXT;
 G_ATTRIBUTE_tbl(K)           := p_qual_tbl(I).QUALIFIER_ATTRIBUTE;
 G_VALUE_FROM_tbl(K)          := p_qual_tbl(I).QUALIFIER_ATTR_VALUE_FROM;
 G_VALUE_TO_tbl(K)            := p_qual_tbl(I).QUALIFIER_ATTR_VALUE_TO;
 G_COMPARISON_OPERATOR_TYPE_tbl(K):=p_qual_tbl(I).COMPARISON_OPERATOR_CODE;
 G_VALIDATED_FLAG_tbl(K)  := p_qual_tbl(I).VALIDATED_FLAG;
 G_APPLIED_FLAG_tbl(K)    := G_LIST_NOT_APPLIED;
 G_PRICING_STATUS_CODE_tbl(K)    :=  l_pricing_status_code;
 G_PRICING_ATTR_FLAG_tbl(K)      := G_YES;
 G_LINE_DETAIL_INDEX_tbl(K)      := NULL;
 G_LIST_HEADER_ID_tbl(K)         :=NULL;
 G_LIST_LINE_ID_tbl(K)           :=NULL;
 G_SETUP_VALUE_FROM_tbl(K)       :=NULL;
 G_SETUP_VALUE_TO_tbl(K)         :=NULL;
 G_GROUPING_NUMBER_tbl(K)        :=NULL;
 G_NO_QUALIFIERS_IN_GRP_tbl(K)   :=NULL;
 G_PRICING_STATUS_TEXT_tbl(K)    :=NULL;
 G_QUALIFIER_PRECEDENCE_tbl(K)   :=NULL;
 G_DATATYPE_tbl(K)               :=NULL;
 G_PRODUCT_UOM_CODE_TBL(K)       :=NULL;
 G_QUALIFIER_TYPE_TBL(K)         :=NULL;
 G_EXCLUDER_FLAG_TBL(K)          :=NULL;
 G_PRICING_PHASE_ID_TBL_A(K)       :=NULL;
 G_INCOMP_GRP_CODE_TBL_A(K) := NULL;
 G_LINE_DETAIL_TYPE_CODE_TBL_A(K) := NULL;
 G_MODIFIER_LEVEL_CODE_TBL_A(K) := NULL;
 G_PRIMARY_UOM_FLAG_TBL_A(K) := NULL;

 -- begin shu_promo, fix bug 1728757

 	IF p_qual_tbl(I).QUALIFIER_CONTEXT = 'MODLIST' AND
 	   p_qual_tbl(I).QUALIFIER_ATTRIBUTE IN ('QUALIFIER_ATTRIBUTE1','QUALIFIER_ATTRIBUTE6')-- promotion no.
 	THEN
 	   G_LIST_HEADER_ID_TBL(K) := p_qual_tbl(I).QUALIFIER_ATTR_VALUE_FROM; -- promotion hdr id
        END IF;

 	IF p_qual_tbl(I).QUALIFIER_CONTEXT = 'MODLIST' AND
 	   p_qual_tbl(I).QUALIFIER_ATTRIBUTE IN ('QUALIFIER_ATTRIBUTE2')-- list line id
 	THEN
 	   --G_LIST_LINE_ID_TBL(K) := p_qual_tbl(I).QUALIFIER_ATTR_VALUE_FROM; -- promotion list line id
           -- Get the list header id for the list line
          BEGIN
           SELECT list_header_id
           INTO G_LIST_HEADER_ID_TBL(K)
           FROM qp_list_lines
           WHERE list_line_id = to_number(p_qual_tbl(I).QUALIFIER_ATTR_VALUE_FROM);
          EXCEPTION
           WHEN NO_DATA_FOUND THEN
             IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
             engine_debug('Error in Finding List Header Id for List Line : '||
                          p_qual_tbl(I).QUALIFIER_ATTR_VALUE_FROM);
             END IF;
			 l_status_code := FND_API.G_RET_STS_ERROR;
			 l_status_text := 'Error in Finding List Header Id for List Line : '||
                          p_qual_tbl(I).QUALIFIER_ATTR_VALUE_FROM;
             RAISE E_ROUTINE_ERRORS;
          END ;
        END IF;

        -- if it is a promotion
 	IF p_qual_tbl(I).QUALIFIER_CONTEXT = 'MODLIST' AND
 	   p_qual_tbl(I).QUALIFIER_ATTRIBUTE = 'QUALIFIER_ATTRIBUTE1' -- promotion no.
 	THEN
 	   l_list_header_id := p_qual_tbl(I).QUALIFIER_ATTR_VALUE_FROM; -- promotion hdr id
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
	   engine_debug ('promotion hdr id: '|| l_list_header_id);
    END IF;

	   -- get ask_for_flag of this promotion
	   OPEN get_ask_for_flag_cur(l_list_header_id);
      		FETCH get_ask_for_flag_cur INTO l_ask_for_flag;
     		CLOSE get_ask_for_flag_cur;

	   IF ( l_cascade_ask_for_profile = G_YES AND l_ask_for_flag = G_YES) THEN
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
	   engine_debug ('perform cascading ask for pormotion to ask for deals...');
    END IF;
     	   -- cascade ask_for_promotion to ask_for_deals

 	 	--cursor gets ask for deals' list_header_ids
 	   	for l_ask_for_child_ids_data in l_ask_for_child_ids (l_list_header_id) loop
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
			engine_debug ('cascaded ask for deals: ' || l_ask_for_child_ids_data.list_header_id);
   END IF;
			K:= K+1;
			G_LINE_INDEX_tbl(K)          := p_qual_tbl(I).LINE_INDEX;
 			G_ATTRIBUTE_LEVEL_tbl(K)     := G_LINE_LEVEL;
 			G_ATTRIBUTE_TYPE_tbl(K)      := G_QUALIFIER_TYPE;
 			G_CONTEXT_tbl(K)             := p_qual_tbl(I).QUALIFIER_CONTEXT;
 			G_ATTRIBUTE_tbl(K)           := p_qual_tbl(I).QUALIFIER_ATTRIBUTE;
 			G_VALUE_FROM_tbl(K)          := l_ask_for_child_ids_data.list_header_id;
 			G_VALUE_TO_tbl(K)            := p_qual_tbl(I).QUALIFIER_ATTR_VALUE_TO;
 			G_COMPARISON_OPERATOR_TYPE_tbl(K):=p_qual_tbl(I).COMPARISON_OPERATOR_CODE;
 			G_VALIDATED_FLAG_tbl(K)  := p_qual_tbl(I).VALIDATED_FLAG;
 			G_APPLIED_FLAG_tbl(K)    := G_LIST_NOT_APPLIED;
 			G_PRICING_STATUS_CODE_tbl(K)    :=  l_pricing_status_code;
 			G_PRICING_ATTR_FLAG_tbl(K)      := G_YES;
 			G_LINE_DETAIL_INDEX_tbl(K)      := NULL;
 			G_LIST_HEADER_ID_tbl(K)         :=NULL;
 			G_LIST_LINE_ID_tbl(K)           :=NULL;
 			G_SETUP_VALUE_FROM_tbl(K)       :=NULL;
 			G_SETUP_VALUE_TO_tbl(K)         :=NULL;
 			G_GROUPING_NUMBER_tbl(K)        :=NULL;
 			G_NO_QUALIFIERS_IN_GRP_tbl(K)   :=NULL;
 			G_PRICING_STATUS_TEXT_tbl(K)    :=NULL;
 			G_QUALIFIER_PRECEDENCE_tbl(K)   :=NULL;
 			G_DATATYPE_tbl(K)               :=NULL;
 			G_PRODUCT_UOM_CODE_TBL(K)       :=NULL;
 			G_QUALIFIER_TYPE_TBL(K)         :=NULL;
 			G_EXCLUDER_FLAG_TBL(K)          :=NULL;
 			G_PRICING_PHASE_ID_TBL_A(K)       :=NULL;
 			G_INCOMP_GRP_CODE_TBL_A(K) := NULL;
 			G_LINE_DETAIL_TYPE_CODE_TBL_A(K) := NULL;
 			G_MODIFIER_LEVEL_CODE_TBL_A(K) := NULL;
 			G_PRIMARY_UOM_FLAG_TBL_A(K) := NULL;
 		end loop; --end cursor l_ask_for_child_ids loop
 	   END IF; -- end if cascade ask_for_promotion
 	END IF; -- end if if is a promotion

        -- end shu_promo
 K:= K+1;
 I:= p_qual_tbl.NEXT(I);
END LOOP;

I := p_line_attr_tbl.FIRST;

WHILE I IS NOT NULL LOOP
 IF (p_line_attr_tbl(I).PRICING_CONTEXT = G_ITEM_CONTEXT) THEN
  l_attribute_type := G_PRODUCT_TYPE;
 ELSE
  l_attribute_type := G_PRICING_TYPE;
 END IF;

 G_LINE_INDEX_tbl(K)          := p_line_attr_tbl(I).LINE_INDEX;
 G_ATTRIBUTE_LEVEL_tbl(K)     := G_LINE_LEVEL;
 G_ATTRIBUTE_TYPE_tbl(K)      := l_attribute_type;
 G_CONTEXT_tbl(K)             := p_line_attr_tbl(I).PRICING_CONTEXT;
 G_ATTRIBUTE_tbl(K)           := p_line_attr_tbl(I).PRICING_ATTRIBUTE;
 G_VALUE_FROM_tbl(K)          := p_line_attr_tbl(I).PRICING_ATTR_VALUE_FROM;
 G_VALUE_TO_tbl(K)            := p_line_attr_tbl(I).PRICING_ATTR_VALUE_TO;
 G_COMPARISON_OPERATOR_TYPE_tbl(K):=NULL;
 G_VALIDATED_FLAG_tbl(K)      := p_line_attr_tbl(I).VALIDATED_FLAG;
 G_APPLIED_FLAG_tbl(K)        := G_LIST_NOT_APPLIED;
 G_PRICING_STATUS_CODE_tbl(K) := l_pricing_status_code;
 G_PRICING_ATTR_FLAG_tbl(K)   := G_YES;
 G_LINE_DETAIL_INDEX_tbl(K)   := NULL;
 G_LIST_HEADER_ID_tbl(K)      :=NULL;
 G_LIST_LINE_ID_tbl(K)        :=NULL;
 G_SETUP_VALUE_FROM_tbl(K)    :=NULL;
 G_SETUP_VALUE_TO_tbl(K)      :=NULL;
 G_GROUPING_NUMBER_tbl(K)     :=NULL;
 G_NO_QUALIFIERS_IN_GRP_tbl(K):=NULL;
 G_PRICING_STATUS_TEXT_tbl(K) :=NULL;
 G_QUALIFIER_PRECEDENCE_tbl(K):=NULL;
 G_DATATYPE_tbl(K)            :=NULL;
 G_PRODUCT_UOM_CODE_TBL(K)    :=NULL;
 G_QUALIFIER_TYPE_TBL(K)      :=NULL;
 G_EXCLUDER_FLAG_TBL(K)       :=NULL;
 G_PRICING_PHASE_ID_TBL_A(K)    :=NULL;
 G_INCOMP_GRP_CODE_TBL_A(K) := NULL;
 G_LINE_DETAIL_TYPE_CODE_TBL_A(K) := NULL;
 G_MODIFIER_LEVEL_CODE_TBL_A(K) := NULL;
 G_PRIMARY_UOM_FLAG_TBL_A(K) := NULL;
 K:= K+1;
 I:= p_line_attr_tbl.NEXT(I);
END LOOP;


IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
engine_debug('Before Sourcing Volume Attributes');

END IF;
l_source_qty_flag := QP_BUILD_SOURCING_PVT.Is_Attribute_Used('VOLUME','PRICING_ATTRIBUTE10');
l_source_amt_flag := QP_BUILD_SOURCING_PVT.Is_Attribute_Used('VOLUME','PRICING_ATTRIBUTE12');

IF (l_source_qty_flag = G_YES) THEN

 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
 engine_debug('Sourcing Quantity Attribute');

 END IF;
 FOR G IN p_line_tbl.first .. p_line_tbl.last
 LOOP

  IF (p_price_phase_flag = TRUE) THEN
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('Pricing Phase Exists.. Sourcing Line Quantity');
   END IF;
   l_line_quantity := nvl(p_line_tbl(G).LINE_QUANTITY,0);
  ELSE
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('Pricing Phase Does not Exist.. Sourcing Priced Quantity');
   END IF;
   l_line_quantity := nvl(nvl(p_line_tbl(G).PRICED_QUANTITY,p_line_tbl(G).LINE_QUANTITY),0);
  END IF;

  --dbms_output.put_line ('Sourcing Item Qty for Line : ' ||p_line_tbl(G).LINE_INDEX );

  -- Source Item Quantity
  G_LINE_INDEX_tbl(K)          := p_line_tbl(G).LINE_INDEX;
  G_ATTRIBUTE_LEVEL_tbl(K)     := G_LINE_LEVEL;
  G_ATTRIBUTE_TYPE_tbl(K)      := G_PRICING_TYPE;
  G_CONTEXT_tbl(K)             := G_PRIC_VOLUME_CONTEXT;
  G_ATTRIBUTE_tbl(K)           := G_QUANTITY_ATTRIBUTE;
  G_VALUE_FROM_tbl(K)          := qp_number.number_to_canonical(l_line_quantity);
  G_VALUE_TO_tbl(K)            := NULL;
  G_COMPARISON_OPERATOR_TYPE_tbl(K):=NULL;
  G_VALIDATED_FLAG_tbl(K)      := G_NO;
  G_APPLIED_FLAG_tbl(K)        := G_LIST_NOT_APPLIED;
  G_PRICING_STATUS_CODE_tbl(K) := G_STATUS_UNCHANGED;
  G_PRICING_ATTR_FLAG_tbl(K)   := G_YES;
  G_LINE_DETAIL_INDEX_tbl(K)   := NULL;
  G_LIST_HEADER_ID_tbl(K)      :=NULL;
  G_LIST_LINE_ID_tbl(K)        :=NULL;
  G_SETUP_VALUE_FROM_tbl(K)    :=NULL;
  G_SETUP_VALUE_TO_tbl(K)      :=NULL;
  G_GROUPING_NUMBER_tbl(K)     :=NULL;
  G_NO_QUALIFIERS_IN_GRP_tbl(K):=NULL;
  G_PRICING_STATUS_TEXT_tbl(K) :=NULL;
  G_QUALIFIER_PRECEDENCE_tbl(K):=NULL;
  G_DATATYPE_tbl(K)            :=NULL;
  G_PRODUCT_UOM_CODE_TBL(K)    :=NULL;
  G_QUALIFIER_TYPE_TBL(K)      :=NULL;
  G_EXCLUDER_FLAG_TBL(K)       :=NULL;
  G_PRICING_PHASE_ID_TBL_A(K)    :=NULL;
  G_INCOMP_GRP_CODE_TBL_A(K) := NULL;
  G_LINE_DETAIL_TYPE_CODE_TBL_A(K) := NULL;
  G_MODIFIER_LEVEL_CODE_TBL_A(K) := NULL;
  G_PRIMARY_UOM_FLAG_TBL_A(K) := NULL;

  K:= K+1;

 END LOOP;    -- Attribute Mapping is sourcing Volume Attributes 01/14/02, AC Nielsen Performance
END IF;

IF (l_source_amt_flag = G_YES) THEN

 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
 engine_debug('Sourcing Amount Attribute');

 END IF;
 FOR G IN p_line_tbl.first .. p_line_tbl.last
 LOOP

 IF (p_price_phase_flag = TRUE) THEN
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('Pricing Phase Exists.. Sourcing Line Quantity');
  END IF;
  l_line_amount := nvl(p_line_tbl(G).LINE_QUANTITY * p_line_tbl(G).UNIT_PRICE,0);
 ELSE
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('Pricing Phase Does not Exist.. ,l_status_textSourcing Priced Quantity');
  END IF;
  l_line_amount := nvl(nvl(p_line_tbl(G).PRICED_QUANTITY,p_line_tbl(G).LINE_QUANTITY) * p_line_tbl(G).UNIT_PRICE,0);
 END IF;

  --dbms_output.put_line ('Sourcing Item Qty for Line : ' ||p_line_tbl(G).LINE_INDEX );

  -- Source Item Amount
  G_LINE_INDEX_tbl(K)          := p_line_tbl(G).LINE_INDEX;
  G_ATTRIBUTE_LEVEL_tbl(K)     := G_LINE_LEVEL;
  G_ATTRIBUTE_TYPE_tbl(K)      := G_PRICING_TYPE;
  G_CONTEXT_tbl(K)             := G_PRIC_VOLUME_CONTEXT;
  G_ATTRIBUTE_tbl(K)           := G_LINE_AMT_ATTRIBUTE;
  G_VALUE_FROM_tbl(K)          := qp_number.number_to_canonical(l_line_amount);
  G_VALUE_TO_tbl(K)            := NULL;
  G_COMPARISON_OPERATOR_TYPE_tbl(K):=NULL;
  G_VALIDATED_FLAG_tbl(K)      := G_NO;
  G_APPLIED_FLAG_tbl(K)        := G_LIST_NOT_APPLIED;
  G_PRICING_STATUS_CODE_tbl(K) := G_STATUS_UNCHANGED;
  G_PRICING_ATTR_FLAG_tbl(K)   := G_YES;
  G_LINE_DETAIL_INDEX_tbl(K)   := NULL;
  G_LIST_HEADER_ID_tbl(K)      :=NULL;
  G_LIST_LINE_ID_tbl(K)        :=NULL;
  G_SETUP_VALUE_FROM_tbl(K)    :=NULL;
  G_SETUP_VALUE_TO_tbl(K)      :=NULL;
  G_GROUPING_NUMBER_tbl(K)     :=NULL;
  G_NO_QUALIFIERS_IN_GRP_tbl(K):=NULL;
  G_PRICING_STATUS_TEXT_tbl(K) :=NULL;
  G_QUALIFIER_PRECEDENCE_tbl(K):=NULL;
  G_DATATYPE_tbl(K)            :=NULL;
  G_PRODUCT_UOM_CODE_TBL(K)    :=NULL;
  G_QUALIFIER_TYPE_TBL(K)      :=NULL;
  G_EXCLUDER_FLAG_TBL(K)       :=NULL;
  G_PRICING_PHASE_ID_TBL_A(K)    :=NULL;
  G_INCOMP_GRP_CODE_TBL_A(K) := NULL;
  G_LINE_DETAIL_TYPE_CODE_TBL_A(K) := NULL;
  G_MODIFIER_LEVEL_CODE_TBL_A(K) := NULL;
  G_PRIMARY_UOM_FLAG_TBL_A(K) := NULL;

  K:= K+1;

 END LOOP;    -- Attribute Mapping is sourcing Volume Attributes 01/14/02, AC Nielsen Performance
END IF;

--Insert record only if there is record
IF K > 1 THEN
INSERT_LINE_ATTRS2
   (    G_LINE_INDEX_tbl,
        G_LINE_DETAIL_INDEX_tbl  ,
        G_ATTRIBUTE_LEVEL_tbl    ,
        G_ATTRIBUTE_TYPE_tbl     ,
        G_LIST_HEADER_ID_tbl     ,
        G_LIST_LINE_ID_tbl       ,
        G_CONTEXT_tbl            ,
        G_ATTRIBUTE_tbl          ,
        G_VALUE_FROM_tbl         ,
        G_SETUP_VALUE_FROM_tbl   ,
        G_VALUE_TO_tbl           ,
        G_SETUP_VALUE_TO_tbl     ,
        G_GROUPING_NUMBER_tbl         ,
        G_NO_QUALIFIERS_IN_GRP_tbl      ,
        G_COMPARISON_OPERATOR_TYPE_tbl  ,
        G_VALIDATED_FLAG_tbl            ,
        G_APPLIED_FLAG_tbl              ,
        G_PRICING_STATUS_CODE_tbl       ,
        G_PRICING_STATUS_TEXT_tbl       ,
        G_QUALIFIER_PRECEDENCE_tbl      ,
        G_DATATYPE_tbl                  ,
        G_PRICING_ATTR_FLAG_tbl         ,
        G_QUALIFIER_TYPE_tbl            ,
        G_PRODUCT_UOM_CODE_TBL          ,
        G_EXCLUDER_FLAG_TBL             ,
        G_PRICING_PHASE_ID_TBL_A        ,
        G_INCOMP_GRP_CODE_TBL_A         ,
        G_LINE_DETAIL_TYPE_CODE_TBL_A   ,
        G_MODIFIER_LEVEL_CODE_TBL_A     ,
        G_PRIMARY_UOM_FLAG_TBL_A        ,
        l_status_code                   ,
        l_status_text                   );

       IF l_status_code = FND_API.G_RET_STS_ERROR THEN
            RAISE E_ROUTINE_ERRORS;
       END IF;

END IF;

/* begin bulk insert ldets -- 3215497 */
-- first reset global tables
Reset_All_Tbls(l_status_code, l_status_text);
IF (l_status_code = FND_API.G_RET_STS_ERROR) THEN
 RAISE E_ROUTINE_ERRORS;
END IF;

I := p_LINE_DETAIL_tbl.FIRST;
K := 1;

IF (G_PUBLIC_API_CALL_FLAG = G_YES) THEN
  v_pricing_status_code := G_STATUS_UNCHANGED; -- insert passed adjustments with X
ELSE
  v_pricing_status_code := G_STATUS_NEW; -- passed adjustments with N if called from qp_preq_grp
END IF;

WHILE (I IS NOT NULL AND
       (l_not_insert_order_line_flag = TRUE and
        p_line_detail_tbl(I).LINE_INDEX <> l_summary_line_index or
        l_not_insert_order_line_flag = FALSE)
      )
LOOP
  -- populate relevant tables
  G_LINE_DETAIL_INDEX_tbl(K) := p_LINE_DETAIL_tbl(I).LINE_DETAIL_INDEX;
  G_LINE_DETAIL_TYPE_CODE_TBL(K) := p_LINE_DETAIL_tbl(I).LINE_DETAIL_TYPE_CODE;
  G_PRICE_BREAK_TYPE_CODE_TBL(K) := p_LINE_DETAIL_tbl(I).PRICE_BREAK_TYPE_CODE;
  G_LINE_INDEX_tbl(K) := p_LINE_DETAIL_tbl(I).LINE_INDEX;
  G_LIST_HEADER_ID_tbl(K) := p_LINE_DETAIL_tbl(I).LIST_HEADER_ID;
  G_LIST_LINE_ID_tbl(K) := p_LINE_DETAIL_tbl(I).LIST_LINE_ID;
  G_LIST_LINE_TYPE_TBL(K) := p_LINE_DETAIL_tbl(I).LIST_LINE_TYPE_CODE;
  G_LIST_TYPE_CODE_TBL(K) := p_LINE_DETAIL_tbl(I).CREATED_FROM_LIST_TYPE_CODE;
  G_PRICING_GROUP_SEQUENCE_TBL(K) := p_LINE_DETAIL_tbl(I).PRICING_GROUP_SEQUENCE;
  G_PRICING_PHASE_ID_TBL(K) := p_LINE_DETAIL_tbl(I).PRICING_PHASE_ID; --added for usage_pricing
  G_OPERAND_CALCULATION_CODE_TBL(K) := p_LINE_DETAIL_tbl(I).OPERAND_CALCULATION_CODE;
  G_OPERAND_VALUE_TBL(K) := p_LINE_DETAIL_tbl(I).OPERAND_VALUE;
  G_SUBSTITUTION_TYPE_CODE_TBL(K) := p_LINE_DETAIL_tbl(I).SUBSTITUTION_TYPE_CODE;
  G_SUBSTITUTION_VALUE_FROM_TBL(K) := p_LINE_DETAIL_tbl(I).SUBSTITUTION_FROM;
  G_SUBSTITUTION_VALUE_TO_TBL(K) := p_LINE_DETAIL_tbl(I).SUBSTITUTION_TO;
  G_PRICING_STATUS_CODE_tbl(K) := v_pricing_status_code;
  G_APPLIED_FLAG_tbl(K) := p_LINE_DETAIL_tbl(I).APPLIED_FLAG;
  G_AUTOMATIC_FLAG_TBL(K) := p_LINE_DETAIL_tbl(I).AUTOMATIC_FLAG;
  G_OVERRIDE_FLAG_TBL(K) := p_LINE_DETAIL_tbl(I).OVERRIDE_FLAG;
  G_PRINT_ON_INVOICE_FLAG_TBL(K) := p_LINE_DETAIL_tbl(I).PRINT_ON_INVOICE_FLAG;
  G_MODIFIER_LEVEL_CODE_TBL(K) := p_LINE_DETAIL_tbl(I).MODIFIER_LEVEL_CODE;
  G_LIST_LINE_NO_TBL(K) := p_LINE_DETAIL_tbl(I).LIST_LINE_NO; --shu, fix bug 2226344
  G_CHARGE_TYPE_CODE_TBL(K) := nvl(p_LINE_DETAIL_tbl(I).CHARGE_TYPE_CODE,'');
  G_CHARGE_SUBTYPE_CODE_TBL(K) := nvl(p_LINE_DETAIL_tbl(I).CHARGE_SUBTYPE_CODE,'');
  G_LINE_QUANTITY_TBL(K) := p_LINE_DETAIL_tbl(I).LINE_QUANTITY;
  G_UPDATED_FLAG_TBL(K) := p_LINE_DETAIL_tbl(I).UPDATED_FLAG;
  G_CALCULATION_CODE_TBL(K) := p_LINE_DETAIL_tbl(I).CALCULATION_CODE;
  G_CHANGE_REASON_CODE_TBL(K) := p_LINE_DETAIL_tbl(I).CHANGE_REASON_CODE;
  G_CHANGE_REASON_TEXT_TBL(K) := p_LINE_DETAIL_tbl(I).CHANGE_REASON_TEXT;
  G_PROCESS_CODE_TBL(K) := p_LINE_DETAIL_tbl(I).PROCESS_CODE;
  -- remaining tables defaulted to null
  G_LIST_PRICE_TBL(K) := null;
  G_CREATED_FROM_SQL_TBL(K) := null;
  G_ASK_FOR_FLAG_TBL(K) := null;
  G_PRICE_FORMULA_ID_TBL(K) := null;
  G_PRICING_STATUS_TEXT_tbl(K) := null;
  G_PRODUCT_PRECEDENCE_TBL(K) := null;
  G_INCOMP_GRP_CODE_TBL(K) := null;
  G_PROCESSED_FLAG_TBL(K) := null;
  G_PRIMARY_UOM_FLAG_TBL(K) := null;
  G_BENEFIT_QTY_TBL(K) := null;
  G_BENEFIT_UOM_CODE_TBL(K) := null;
  G_ACCRUAL_FLAG_TBL(K) := null;
  G_ACCRUAL_CONVERSION_RATE_TBL(K) := null;
  G_ESTIM_ACCRUAL_RATE_TBL(K) := null;
  G_RECURRING_FLAG_TBL(K) := null;
  G_SELECTED_VOLUME_ATTR_TBL(K) := null;
  G_ROUNDING_FACTOR_TBL(K) := null;
  G_HEADER_LIMIT_EXISTS_TBL(K) := null;
  G_LINE_LIMIT_EXISTS_TBL(K) := null;

  I := p_LINE_DETAIL_tbl.NEXT(I);
  K := K+1;
END LOOP;

-- perform bulk insert (using public API) if any records present
IF (K > 1) THEN
  INSERT_LDETS2(
    p_LINE_DETAIL_index => G_LINE_DETAIL_INDEX_tbl,
    p_LINE_DETAIL_TYPE_CODE => G_LINE_DETAIL_TYPE_CODE_TBL,
    p_PRICE_BREAK_TYPE_CODE => G_PRICE_BREAK_TYPE_CODE_TBL,
    p_LIST_PRICE => G_LIST_PRICE_TBL,
    p_LINE_INDEX => G_LINE_INDEX_tbl,
    p_CREATED_FROM_LIST_HEADER_ID => G_LIST_HEADER_ID_tbl,
    p_CREATED_FROM_LIST_LINE_ID => G_LIST_LINE_ID_tbl,
    p_CREATED_FROM_LIST_LINE_TYPE => G_LIST_LINE_TYPE_TBL,
    p_CREATED_FROM_LIST_TYPE_CODE => G_LIST_TYPE_CODE_TBL,
    p_CREATED_FROM_SQL => G_CREATED_FROM_SQL_TBL,
    p_PRICING_GROUP_SEQUENCE => G_PRICING_GROUP_SEQUENCE_TBL,
    p_PRICING_PHASE_ID => G_PRICING_PHASE_ID_TBL,
    p_OPERAND_CALCULATION_CODE => G_OPERAND_CALCULATION_CODE_TBL,
    p_OPERAND_VALUE => G_OPERAND_VALUE_TBL,
    p_SUBSTITUTION_TYPE_CODE => G_SUBSTITUTION_TYPE_CODE_TBL,
    p_SUBSTITUTION_VALUE_FROM => G_SUBSTITUTION_VALUE_FROM_TBL,
    p_SUBSTITUTION_VALUE_TO => G_SUBSTITUTION_VALUE_TO_TBL,
    p_ASK_FOR_FLAG => G_ASK_FOR_FLAG_TBL,
    p_PRICE_FORMULA_ID => G_PRICE_FORMULA_ID_TBL,
    p_PRICING_STATUS_CODE => G_PRICING_STATUS_CODE_tbl,
    p_PRICING_STATUS_TEXT => G_PRICING_STATUS_TEXT_tbl,
    p_PRODUCT_PRECEDENCE => G_PRODUCT_PRECEDENCE_TBL,
    p_INCOMPATABLILITY_GRP_CODE => G_INCOMP_GRP_CODE_TBL,
    p_PROCESSED_FLAG => G_PROCESSED_FLAG_TBL,
    p_APPLIED_FLAG => G_APPLIED_FLAG_tbl,
    p_AUTOMATIC_FLAG => G_AUTOMATIC_FLAG_TBL,
    p_OVERRIDE_FLAG => G_OVERRIDE_FLAG_TBL,
    p_PRIMARY_UOM_FLAG => G_PRIMARY_UOM_FLAG_TBL,
    p_PRINT_ON_INVOICE_FLAG => G_PRINT_ON_INVOICE_FLAG_TBL,
    p_MODIFIER_LEVEL_CODE => G_MODIFIER_LEVEL_CODE_TBL,
    p_BENEFIT_QTY => G_BENEFIT_QTY_TBL,
    p_BENEFIT_UOM_CODE => G_BENEFIT_UOM_CODE_TBL,
    p_LIST_LINE_NO => G_LIST_LINE_NO_TBL,
    p_ACCRUAL_FLAG => G_ACCRUAL_FLAG_TBL,
    p_ACCRUAL_CONVERSION_RATE => G_ACCRUAL_CONVERSION_RATE_TBL,
    p_ESTIM_ACCRUAL_RATE => G_ESTIM_ACCRUAL_RATE_TBL,
    p_RECURRING_FLAG => G_RECURRING_FLAG_TBL,
    p_SELECTED_VOLUME_ATTR => G_SELECTED_VOLUME_ATTR_TBL,
    p_ROUNDING_FACTOR => G_ROUNDING_FACTOR_TBL,
    p_HEADER_LIMIT_EXISTS => G_HEADER_LIMIT_EXISTS_TBL,
    p_LINE_LIMIT_EXISTS => G_LINE_LIMIT_EXISTS_TBL,
    p_CHARGE_TYPE_CODE => G_CHARGE_TYPE_CODE_TBL,
    p_CHARGE_SUBTYPE_CODE => G_CHARGE_SUBTYPE_CODE_TBL,
    p_LINE_QUANTITY => G_LINE_QUANTITY_TBL,
    p_UPDATED_FLAG => G_UPDATED_FLAG_TBL,
    p_CALCULATION_CODE => G_CALCULATION_CODE_TBL,
    p_CHANGE_REASON_CODE =>G_CHANGE_REASON_CODE_TBL,
    p_CHANGE_REASON_TEXT => G_CHANGE_REASON_TEXT_TBL,
    p_PROCESS_CODE => G_PROCESS_CODE_TBL,
    x_status_code => l_status_code,
    x_status_text => l_status_text
  );
  IF l_status_code = FND_API.G_RET_STS_ERROR THEN
    RAISE E_ROUTINE_ERRORS;
  END IF;
END IF;
/* end bulk insert ldets */


/* begin bulk insert ldet qualifiers -- 3215497 */
-- first reset global tables
Reset_All_Tbls(l_status_code, l_status_text);
IF (l_status_code = FND_API.G_RET_STS_ERROR) THEN
 RAISE E_ROUTINE_ERRORS;
END IF;

I := p_LINE_DETAIL_qual_tbl.FIRST;
K := 1;
WHILE I IS NOT NULL LOOP
  -- populate relevant tables
  G_LINE_DETAIL_INDEX_tbl(K) := p_LINE_DETAIL_qual_tbl(I).LINE_DETAIL_INDEX;
  G_ATTRIBUTE_LEVEL_tbl(K) := G_DETAIL_LEVEL;
  G_ATTRIBUTE_TYPE_tbl(K) := G_QUALIFIER_TYPE;
  G_CONTEXT_tbl(K) := p_LINE_DETAIL_qual_tbl(I).QUALIFIER_CONTEXT;
  G_ATTRIBUTE_tbl(K) := p_LINE_DETAIL_qual_tbl(I).QUALIFIER_ATTRIBUTE;
  G_VALUE_FROM_tbl(K) := p_LINE_DETAIL_qual_tbl(I).QUALIFIER_ATTR_VALUE_FROM;
  G_VALUE_TO_tbl(K) := p_LINE_DETAIL_qual_tbl(I).QUALIFIER_ATTR_VALUE_TO;
  G_COMPARISON_OPERATOR_TYPE_tbl(K) := p_LINE_DETAIL_qual_tbl(I).COMPARISON_OPERATOR_CODE;
  G_VALIDATED_FLAG_tbl(K) := p_LINE_DETAIL_qual_tbl(I).VALIDATED_FLAG;
  -- remaining tables defaulted to null
  G_LINE_INDEX_tbl(K) := null;
  G_LIST_HEADER_ID_tbl(K) := null;
  G_LIST_LINE_ID_tbl(K) := null;
  G_SETUP_VALUE_FROM_tbl(K) := null;
  G_SETUP_VALUE_TO_tbl(K) := null;
  G_GROUPING_NUMBER_tbl(K) := null;
  G_NO_QUALIFIERS_IN_GRP_tbl(K) := null;
  G_APPLIED_FLAG_tbl(K) := null;
  G_PRICING_STATUS_CODE_tbl(K) := null;
  G_PRICING_STATUS_TEXT_tbl(K) := null;
  G_QUALIFIER_PRECEDENCE_tbl(K) := null;
  G_DATATYPE_tbl(K) := null;
  G_PRICING_ATTR_FLAG_tbl(K) := null;
  G_QUALIFIER_TYPE_tbl(K) := null;
  G_PRODUCT_UOM_CODE_tbl(K) := null;
  G_EXCLUDER_FLAG_tbl(K) := null;
  G_PRICING_PHASE_ID_tbl(K) := null;
  G_INCOMP_GRP_CODE_tbl(K) := null;
  G_LINE_DETAIL_TYPE_CODE_tbl(K) := null;
  G_MODIFIER_LEVEL_CODE_tbl(K) := null;
  G_PRIMARY_UOM_FLAG_tbl(K) := null;

  I := p_LINE_DETAIL_qual_tbl.NEXT(I);
  K := K+1;
END LOOP;

-- the next piece of code, which handles ldet line attributes, also calls
-- INSERT_LINE_ATTRS2, so don't reset the global tables, and wait until the
-- tables are completely populated before making one call to the insert API
/* end bulk insert ldet qualifiers */

/* begin bulk insert ldet line attributes -- 3215497 */
-- continue using global tables where last left off
I := p_LINE_DETAIL_attr_tbl.FIRST;
WHILE I IS NOT NULL LOOP
  -- populate relevant tables
  G_LINE_INDEX_tbl(K) := p_LINE_DETAIL_attr_tbl(I).LINE_INDEX;
  G_LINE_DETAIL_INDEX_tbl(K) := p_LINE_DETAIL_attr_tbl(I).LINE_DETAIL_INDEX;
  G_PRICING_STATUS_CODE_tbl(K) := G_STATUS_NEW;
  G_ATTRIBUTE_LEVEL_tbl(K) := G_LINE_LEVEL;
  G_CONTEXT_tbl(K) := p_LINE_DETAIL_attr_tbl(I).PRICING_CONTEXT;
  G_ATTRIBUTE_tbl(K) := p_LINE_DETAIL_attr_tbl(I).PRICING_ATTRIBUTE;
  G_VALUE_FROM_tbl(K) := p_LINE_DETAIL_attr_tbl(I).PRICING_ATTR_VALUE_FROM;
  G_VALIDATED_FLAG_tbl(K) := p_LINE_DETAIL_attr_tbl(I).VALIDATED_FLAG;
  IF (p_LINE_DETAIL_attr_tbl(I).PRICING_CONTEXT = G_ITEM_CONTEXT) THEN
    G_ATTRIBUTE_TYPE_tbl(K) := G_PRODUCT_TYPE;
    G_VALUE_TO_tbl(K) := null;
  ELSIF (p_LINE_DETAIL_attr_tbl(I).PRICING_CONTEXT IS NOT NULL) THEN
    G_ATTRIBUTE_TYPE_tbl(K) := G_PRICING_TYPE;
    G_VALUE_TO_tbl(K) := p_LINE_DETAIL_attr_tbl(I).PRICING_ATTR_VALUE_TO;
  ELSE
    G_ATTRIBUTE_TYPE_tbl(K) := null;
    G_VALUE_TO_tbl(K) := null;
  END IF;
  -- remaining tables defaulted to null
  G_LIST_HEADER_ID_tbl(K) := null;
  G_LIST_LINE_ID_tbl(K) := null;
  G_SETUP_VALUE_FROM_tbl(K) := null;
  G_SETUP_VALUE_TO_tbl(K) := null;
  G_GROUPING_NUMBER_tbl(K) := null;
  G_NO_QUALIFIERS_IN_GRP_tbl(K) := null;
  G_COMPARISON_OPERATOR_TYPE_tbl(K) := null;
  G_APPLIED_FLAG_tbl(K) := null;
  G_PRICING_STATUS_TEXT_tbl(K) := null;
  G_QUALIFIER_PRECEDENCE_tbl(K) := null;
  G_DATATYPE_tbl(K) := null;
  G_PRICING_ATTR_FLAG_tbl(K) := null;
  G_QUALIFIER_TYPE_tbl(K) := null;
  G_PRODUCT_UOM_CODE_tbl(K) := null;
  G_EXCLUDER_FLAG_tbl(K) := null;
  G_PRICING_PHASE_ID_tbl(K) := null;
  G_INCOMP_GRP_CODE_tbl(K) := null;
  G_LINE_DETAIL_TYPE_CODE_tbl(K) := null;
  G_MODIFIER_LEVEL_CODE_tbl(K) := null;
  G_PRIMARY_UOM_FLAG_tbl(K) := null;

  I := p_LINE_DETAIL_attr_tbl.NEXT(I);
  K := K+1;
END LOOP;

-- perform bulk insert (using public API) if any records present
IF (K > 1) THEN
  INSERT_LINE_ATTRS2(
    p_LINE_INDEX_tbl => G_LINE_INDEX_tbl,
    p_LINE_DETAIL_INDEX_tbl => G_LINE_DETAIL_INDEX_tbl,
    p_ATTRIBUTE_LEVEL_tbl => G_ATTRIBUTE_LEVEL_tbl,
    p_ATTRIBUTE_TYPE_tbl => G_ATTRIBUTE_TYPE_tbl,
    p_LIST_HEADER_ID_tbl => G_LIST_HEADER_ID_tbl,
    p_LIST_LINE_ID_tbl => G_LIST_LINE_ID_tbl,
    p_CONTEXT_tbl => G_CONTEXT_tbl,
    p_ATTRIBUTE_tbl => G_ATTRIBUTE_tbl,
    p_VALUE_FROM_tbl => G_VALUE_FROM_tbl,
    p_SETUP_VALUE_FROM_tbl => G_SETUP_VALUE_FROM_tbl,
    p_VALUE_TO_tbl => G_VALUE_TO_tbl,
    p_SETUP_VALUE_TO_tbl => G_SETUP_VALUE_TO_tbl,
    p_GROUPING_NUMBER_tbl => G_GROUPING_NUMBER_tbl,
    p_NO_QUALIFIERS_IN_GRP_tbl => G_NO_QUALIFIERS_IN_GRP_tbl,
    p_COMPARISON_OPERATOR_TYPE_tbl => G_COMPARISON_OPERATOR_TYPE_tbl,
    p_VALIDATED_FLAG_tbl => G_VALIDATED_FLAG_tbl,
    p_APPLIED_FLAG_tbl => G_APPLIED_FLAG_tbl,
    p_PRICING_STATUS_CODE_tbl => G_PRICING_STATUS_CODE_tbl,
    p_PRICING_STATUS_TEXT_tbl => G_PRICING_STATUS_TEXT_tbl,
    p_QUALIFIER_PRECEDENCE_tbl => G_QUALIFIER_PRECEDENCE_tbl,
    p_DATATYPE_tbl => G_DATATYPE_tbl,
    p_PRICING_ATTR_FLAG_tbl => G_PRICING_ATTR_FLAG_tbl,
    p_QUALIFIER_TYPE_tbl => G_QUALIFIER_TYPE_tbl,
    p_PRODUCT_UOM_CODE_TBL => G_PRODUCT_UOM_CODE_tbl,
    p_EXCLUDER_FLAG_TBL => G_EXCLUDER_FLAG_tbl,
    p_PRICING_PHASE_ID_TBL => G_PRICING_PHASE_ID_tbl,
    p_INCOMPATABILITY_GRP_CODE_TBL => G_INCOMP_GRP_CODE_tbl,
    p_LINE_DETAIL_TYPE_CODE_TBL => G_LINE_DETAIL_TYPE_CODE_tbl,
    p_MODIFIER_LEVEL_CODE_TBL => G_MODIFIER_LEVEL_CODE_tbl,
    p_PRIMARY_UOM_FLAG_TBL => G_PRIMARY_UOM_FLAG_tbl,
    x_status_code => l_status_code,
    x_status_text => l_status_text
  );
  IF l_status_code = FND_API.G_RET_STS_ERROR THEN
    RAISE E_ROUTINE_ERRORS;
  END IF;
END IF;
/* end bulk insert ldet line attributes */


/* begin bulk insert rltd lines -- 3215497 */
-- first reset global tables
Reset_All_Tbls(l_status_code, l_status_text);
IF (l_status_code = FND_API.G_RET_STS_ERROR) THEN
 RAISE E_ROUTINE_ERRORS;
END IF;

I := p_rltd_lines_tbl.FIRST;
K := 1;
IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('RLTD first in populate_temp_table: '||I);
END IF;
WHILE I IS NOT NULL LOOP
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('Collecting in rltd table');
  END IF;
  -- populate relevant tables
  G_LINE_INDEX_tbl(K) := p_rltd_lines_tbl(I).LINE_INDEX;
  G_LINE_DETAIL_INDEX_tbl(K) := p_rltd_lines_tbl(I).LINE_DETAIL_INDEX;
  G_RELATIONSHIP_TYPE_TBL(K) := p_rltd_lines_tbl(I).RELATIONSHIP_TYPE_CODE;
  G_RLTD_LINE_INDEX_TBL(K) := p_rltd_lines_tbl(I).RELATED_LINE_INDEX;
  G_RLTD_LINE_DETAIL_INDEX_TBL(K) := p_rltd_lines_tbl(I).RELATED_LINE_DETAIL_INDEX;

  I := p_rltd_lines_tbl.NEXT(I);
  K := K+1;
END LOOP;

-- perform bulk insert (using public API) if any records present
IF (K > 1) THEN
  INSERT_RLTD_LINES2(
    p_LINE_INDEX => G_LINE_INDEX_tbl,
    p_LINE_DETAIL_INDEX => G_LINE_DETAIL_INDEX_tbl,
    p_RELATIONSHIP_TYPE_CODE => G_RELATIONSHIP_TYPE_TBL,
    p_RELATED_LINE_INDEX => G_RLTD_LINE_INDEX_TBL,
    p_RELATED_LINE_DETAIL_INDEX => G_RLTD_LINE_DETAIL_INDEX_TBL,
    x_status_code => l_status_code,
    x_status_text => l_status_text
  );
  IF l_status_code = FND_API.G_RET_STS_ERROR THEN
    RAISE E_ROUTINE_ERRORS;
  END IF;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('after bulk insert rltd lines');
  END IF;
END IF;
/* end bulk insert rltd lines */



IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  OPEN l_get_count_cur;
  FETCH l_get_count_cur INTO l_count;
  CLOSE l_get_count_cur;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug ('Culprit Attribute Count :' || l_count);
  END IF;
END IF;

--x_status_code := FND_API.G_RET_STS_SUCCESS;


--Reset_all_tbls;
Reset_All_Tbls(l_status_code ,l_status_text );
IF (l_status_code = FND_API.G_RET_STS_ERROR) THEN
 RAISE E_ROUTINE_ERRORS;
END IF;

EXCEPTION
WHEN E_ROUTINE_ERRORS THEN
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug(l_routine||': '||l_status_text);
  END IF;
  x_status_text := l_status_text;
  x_status_code := FND_API.G_RET_STS_ERROR;
WHEN E_DATE_IS_NULL THEN
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('Date or date type is null');
  engine_debug('Date or date type is null');
  END IF;
  x_status_code :=  FND_API.G_RET_STS_ERROR;
  x_status_text := 'Error in QP_PREQ_GRP.populate_temp_tables: One of the three dates is null';
WHEN E_CURRENCY_CODE_IS_NULL THEN
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('Currency code can not be null');
  engine_debug('Currency code can not be null');
  END IF;
  x_status_code :=  FND_API.G_RET_STS_ERROR;
  x_status_text := 'Error in QP_PREQ_GRP.populate_temp_tables: Currency can not be null';
WHEN OTHERS THEN
  v_error_code :=SQLCODE;
  v_error_message:=SQLERRM;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('Error in QP_PREQ_GRP.populate_temp_tables: '||SQLERRM);
  END IF;
  x_status_code := FND_API.G_RET_STS_ERROR;
  x_status_text :='Error in QP_PREQ_GRP.populate_temp_tables:'||SQLERRM;

END Populate_Temp_Tables;

/*+------------------------------------------------------------
  |PROCEDURE SET_EXPIRATION_DATES
  +------------------------------------------------------------
*/

PROCEDURE SET_EXPIRATION_DATES (p_number_expiration_period   IN  NUMBER,
                                p_expiration_period_uom_code IN  VARCHAR2,
                                p_line_index                 IN  NUMBER,
                                x_expiration_period_end_date OUT NOCOPY DATE,
                                x_status_code                OUT NOCOPY VARCHAR2,
                                x_status_text                OUT NOCOPY VARCHAR2) AS
E_Coupon_Error EXCEPTION;
l_expiration_period_end_date Date;
l_dummy                      Date;
l_status_code                VARCHAR2(240);
l_status_text                VARCHAR2(240);
l_routine VARCHAR2(240):='QP_PRQ_GRP.SET_EXPIRATION_DATES';
l_pricing_effective_date Date;
l_debug varchar2(3);

/*
INDX,QP_PREQ_GRP.set_expiration_dates.l_get_pricing_effective_date,qp_npreq_lines_tmp_N1,LINE_INDEX,1
*/
CURSOR l_get_pricing_effective_date (p_line_index IN PLS_INTEGER) IS
SELECT pricing_effective_date
FROM   qp_npreq_lines_tmp
WHERE  line_index = p_line_index;

--added by yangli for Java Engine interface tables
/*
INDX,QP_PREQ_GRP.set_expiration_dates.l_int_pricing_effective_date,qp_int_lines_N1,LINE_INDEX,1
*/
CURSOR l_int_pricing_effective_date (p_line_index IN PLS_INTEGER) IS
SELECT pricing_effective_date
FROM   qp_int_lines
WHERE  line_index = p_line_index;

BEGIN
  x_status_code := FND_API.G_RET_STS_SUCCESS;

  l_debug := QP_PREQ_GRP.G_DEBUG_ENGINE;
  --ADDED BY YANGLI FOR JAVA ENGINE PUB 3086881
  IF QP_JAVA_ENGINE_UTIL_PUB.Java_Engine_Running = 'N' THEN
    IF l_debug = FND_API.G_TRUE THEN
     QP_PREQ_GRP.ENGINE_DEBUG('Populate_Price_Adj_ID: Java Engine not Installed ----------');
    END IF;
  --ADDED BY YANGLI FOR JAVA ENGINE PUB 3086881
    OPEN  l_get_pricing_effective_date (p_line_index);
    FETCH l_get_pricing_effective_date into l_pricing_effective_date;
    CLOSE l_get_pricing_effective_date;
  ELSE
    IF l_debug = FND_API.G_TRUE THEN
     QP_PREQ_GRP.ENGINE_DEBUG('Set_Expiration_Dates: Java Engine is Installed ----------');
    END IF;
    OPEN  l_int_pricing_effective_date (p_line_index);
    FETCH l_int_pricing_effective_date into l_pricing_effective_date;
    CLOSE l_int_pricing_effective_date;
  END IF;

  QP_COUPON_PVT.Set_Expiration_Dates
          (l_dummy,
           l_expiration_period_end_date,
           p_number_expiration_period,
           p_expiration_period_uom_code,
           l_pricing_effective_date,
           l_status_code,
           l_status_text);

IF (l_status_code <> FND_API.G_RET_STS_SUCCESS) Then
  Raise E_Coupon_Error;
END IF;

   x_expiration_period_end_date := l_expiration_period_end_date;

EXCEPTION

WHEN  E_Coupon_Error THEN
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('Error returned by QP_COUPON_PVT.Set_Expiration_Dates');
  END IF;
  x_status_code := FND_API.G_RET_STS_ERROR;
  x_status_text :=l_routine||':'||l_status_text;
WHEN OTHERS THEN
  x_status_code := FND_API.G_RET_STS_ERROR;
  x_status_code := l_routine||':'||SQLERRM;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug(l_routine||':'||SQLERRM);
  END IF;
END;


/*+-----------------------------------------------------------
  |PROCEDURE Populate_OutPut
  +-----------------------------------------------------------
*/
PROCEDURE Populate_Output
(x_line_tbl             OUT NOCOPY LINE_TBL_TYPE,
 x_line_qual_tbl        OUT NOCOPY QUAL_TBL_TYPE,
 x_line_attr_tbl        OUT NOCOPY LINE_ATTR_TBL_TYPE,
 x_line_detail_tbl      OUT NOCOPY LINE_DETAIL_TBL_TYPE,
 x_line_detail_qual_tbl OUT NOCOPY LINE_DETAIL_QUAL_TBL_TYPE,
 x_line_detail_attr_tbl OUT NOCOPY LINE_DETAIL_ATTR_TBL_TYPE,
 x_related_lines_tbl    OUT NOCOPY RELATED_LINES_TBL_TYPE)
AS
/*
INDX,QP_PREQ_GRP.populate_output.l_lines_cur,- No Index Used -,NA,NA
*/
  CURSOR l_lines_cur IS
    SELECT LINE_INDEX,
           LINE_ID,
           PRICE_LIST_HEADER_ID, -- shu, print out this
           LINE_TYPE_CODE,
           LINE_QUANTITY,
           LINE_UOM_CODE,
           LINE_UNIT_PRICE, -- shu
           ROUNDING_FACTOR, -- shu
           PRICED_QUANTITY,
           UOM_QUANTITY,
           PRICED_UOM_CODE,
           CURRENCY_CODE,
           UNIT_PRICE,
           PERCENT_PRICE,
           PARENT_PRICE,
           PARENT_QUANTITY,
           PARENT_UOM_CODE,
           PRICE_FLAG,
           ADJUSTED_UNIT_PRICE,
           UPDATED_ADJUSTED_UNIT_PRICE,
           PROCESSING_ORDER,
           PROCESSED_CODE,
           PRICING_STATUS_CODE,
           PRICING_STATUS_TEXT,
           HOLD_CODE,
           HOLD_TEXT,
           PRICE_REQUEST_CODE,
           PRICING_EFFECTIVE_DATE,
           EXTENDED_PRICE 		/* block pricing */
           --EXTENDED_SELLING_PRICE_UR,    --[prarasto:Post Round]New fields for unrounded values, [julin/postround] redesign
           --ORDER_UOM_SELLING_PRICE_UR,   --[prarasto:Post Round]
           --ADJUSTED_UNIT_PRICE_UR        --[prarasto:Post Round]
    FROM   qp_npreq_lines_tmp;

/*
INDX,QP_PREQ_GRP.populate_output.l_qual_cur,qp_npreq_ldets_tmp_N4,PRICING_STATUS_CODE,1

INDX,QP_PREQ_GRP.populate_output.l_qual_cur,qp_npreq_line_attrs_tmp_N3,LINE_DETAIL_INDEX,1
INDX,QP_PREQ_GRP.populate_output.l_qual_cur,qp_npreq_line_attrs_tmp_N3,ATTRIBUTE_TYPE,2
*/
  CURSOR l_qual_cur (L_ATTRIBUTE_LEVEL VARCHAR2)IS
    SELECT /*+ dynamic_sampling(1) */ QPLAT.LINE_INDEX,
           QPLAT.LINE_DETAIL_INDEX,
           QPLAT.CONTEXT,
           QPLAT.ATTRIBUTE,
           QPLAT.SETUP_VALUE_FROM,
           QPLAT.SETUP_VALUE_TO,
           QPLAT.COMPARISON_OPERATOR_TYPE_CODE,
           QPLAT.VALIDATED_FLAG,
           QPLAT.PRICING_STATUS_CODE,
           QPLAT.PRICING_STATUS_TEXT
     FROM  qp_npreq_ldets_tmp QPLD ,
           qp_npreq_line_attrs_tmp QPLAT
     WHERE QPLD.LINE_DETAIL_INDEX = QPLAT.LINE_DETAIL_INDEX
     AND   QPLD.PRICING_STATUS_CODE = G_STATUS_NEW
     AND   QPLAT.ATTRIBUTE_TYPE = 'QUALIFIER';
           --AND QPLAT.PRICING_STATUS_CODE = G_STATUS_NEW;

/*
INDX,QP_PREQ_GRP.populate_output.l_pricing_attr_cur,qp_npreq_ldets_tmp_N4,PRICING_STATUS_CODE,1

INDX,QP_PREQ_GRP.populate_output.l_pricing_attr_cur,qp_npreq_line_attrs_tmp_N3,LINE_DETAIL_INDEX,1
INDX,QP_PREQ_GRP.populate_output.l_pricing_attr_cur,qp_npreq_line_attrs_tmp_N3,ATTRIBUTE_TYPE,2
*/
  CURSOR l_pricing_attr_cur IS
    SELECT /*+ dynamic_sampling(1) index(QPLAT_PRICING QP_PREQ_LINE_ATTRS_TMP_N3) */ --bug8359591
           QPLAT_PRICING.CONTEXT        PRICING_CONTEXT,
           QPLAT_PRICING.ATTRIBUTE      PRICING_ATTRIBUTE,
           nvl(QPLAT_PRICING.SETUP_VALUE_FROM,QPLAT_PRICING.VALUE_FROM)     PRICING_ATTR_VALUE_FROM,
           QPLAT_PRICING.SETUP_VALUE_TO       PRICING_ATTR_VALUE_TO,
           QPLAT_PRICING.COMPARISON_OPERATOR_TYPE_CODE,
           QPLAT_PRICING.LINE_DETAIL_INDEX,
           QPLAT_PRICING.LINE_INDEX,
           QPLAT_PRICING.VALIDATED_FLAG
     FROM  qp_npreq_ldets_tmp QPLD ,
           qp_npreq_line_attrs_tmp QPLAT_PRICING
     WHERE QPLD.LINE_DETAIL_INDEX = QPLAT_PRICING.LINE_DETAIL_INDEX
     AND   QPLD.PRICING_STATUS_CODE = G_STATUS_NEW
     AND   QPLAT_PRICING.ATTRIBUTE_TYPE IN ('PRICING','PRODUCT');
           --AND QPLAT_PRICING.PRICING_STATUS_CODE = G_STATUS_NEW;

/*
INDX,QP_PREQ_GRP.populate_output.l_ldets_cur,QP_LIST_LINES_PK,LIST_LINE_ID,1

INDX,QP_PREQ_GRP.populate_output.l_ldets_cur,qp_npreq_ldets_tmp_N4,PRICING_STATUS_CODE,1

INDX,QP_PREQ_GRP.populate_output.l_ldets_cur,QP_LIST_HEADERS_B_PK,LIST_HEADER_ID,1
*/
  CURSOR l_ldets_cur IS

    SELECT /*+ ORDERED USE_NL(A B C) l_ldets_cur */

           a.LINE_DETAIL_INDEX,
           a.LINE_DETAIL_TYPE_CODE,
           a.LINE_INDEX,
           a.CREATED_FROM_LIST_HEADER_ID LIST_HEADER_ID,
           a.CREATED_FROM_LIST_LINE_ID   LIST_LINE_ID,
           a.CREATED_FROM_LIST_LINE_TYPE LIST_LINE_TYPE_CODE,
           a.PRICE_BREAK_TYPE_CODE,
           a.LINE_QUANTITY,
           a.ADJUSTMENT_AMOUNT,
           a.AUTOMATIC_FLAG,
           a.PRICING_PHASE_ID,
           a.OPERAND_CALCULATION_CODE,
           a.OPERAND_VALUE,
           a.PRICING_GROUP_SEQUENCE,
           a.CREATED_FROM_LIST_TYPE_CODE,
           a.APPLIED_FLAG,
           a.PRICING_STATUS_CODE,
           a.PRICING_STATUS_TEXT,
           a.LIMIT_CODE,
           a.LIMIT_TEXT,
           a.LIST_LINE_NO,
           a.GROUP_QUANTITY,
           a.GROUP_AMOUNT, -- 2388011_new
           a.UPDATED_FLAG,
	   a.PROCESS_CODE,
	   a.CALCULATION_CODE,
	   a.CHANGE_REASON_CODE,
	   a.CHANGE_REASON_TEXT,
           b.SUBSTITUTION_VALUE SUBSTITUTION_VALUE_TO,
           b.SUBSTITUTION_ATTRIBUTE,
           b.ACCRUAL_FLAG,
           b.modifier_level_code,
           b.ESTIM_GL_VALUE,
           b.ACCRUAL_CONVERSION_RATE,
           --Pass throuh components
           b.OVERRIDE_FLAG,
           b.PRINT_ON_INVOICE_FLAG,
           b.INVENTORY_ITEM_ID,
           b.ORGANIZATION_ID,
           b.RELATED_ITEM_ID,
           b.RELATIONSHIP_TYPE_ID,
           b.ESTIM_ACCRUAL_RATE,
           b.EXPIRATION_DATE,
           b.BENEFIT_PRICE_LIST_LINE_ID,
           b.RECURRING_FLAG,
           b.RECURRING_VALUE,  --for block pricing bug 3657116
           b.BENEFIT_LIMIT,
           b.CHARGE_TYPE_CODE,
           b.CHARGE_SUBTYPE_CODE,
           b.BENEFIT_QTY,
           b.BENEFIT_UOM_CODE,
           b.PRORATION_TYPE_CODE,
           b.INCLUDE_ON_RETURNS_FLAG,
           b.REBATE_TRANSACTION_TYPE_CODE,
           b.NUMBER_EXPIRATION_PERIODS,
           b.EXPIRATION_PERIOD_UOM,
           b.COMMENTS,
           b.break_uom_code, /* proration */
           b.break_uom_context, /* proration */
           b.break_uom_attribute /* proration */
    FROM  qp_npreq_ldets_tmp a,
          QP_LIST_LINES     b
    WHERE a.CREATED_FROM_LIST_LINE_ID = b.LIST_LINE_ID
    AND   a.PRICING_STATUS_CODE = G_STATUS_NEW;

/*
INDX,QP_PREQ_GRP.populate_output.l_rltd_lines_cur,- No Index Used -,NA,NA
*/
  CURSOR l_rltd_lines_cur IS
    SELECT  LINE_INDEX,
            LINE_DETAIL_INDEX,
            RELATIONSHIP_TYPE_CODE,
            RELATED_LINE_INDEX,
            RELATED_LINE_DETAIL_INDEX,
            PRICING_STATUS_CODE,
            PRICING_STATUS_TEXT
    FROM qp_npreq_rltd_lines_tmp
    WHERE PRICING_STATUS_CODE = G_STATUS_NEW
    ORDER BY SETUP_VALUE_FROM;

--for Java Engine interface tables
/*
INDX,QP_PREQ_GRP.populate_output.l_int_lines_cur,- No Index Used -,NA,NA
*/
  CURSOR l_int_lines_cur IS
    SELECT LINE_INDEX,
           LINE_ID,
           PRICE_LIST_HEADER_ID, -- shu, print out this
           LINE_TYPE_CODE,
           LINE_QUANTITY,
           LINE_UOM_CODE,
           LINE_UNIT_PRICE, -- shu
           ROUNDING_FACTOR, -- shu
           PRICED_QUANTITY,
           UOM_QUANTITY,
           PRICED_UOM_CODE,
           CURRENCY_CODE,
           UNIT_PRICE,
           PERCENT_PRICE,
           PARENT_PRICE,
           PARENT_QUANTITY,
           PARENT_UOM_CODE,
           PRICE_FLAG,
           ADJUSTED_UNIT_PRICE,
           UPDATED_ADJUSTED_UNIT_PRICE,
           PROCESSING_ORDER,
           PROCESSED_CODE,
           PRICING_STATUS_CODE,
           PRICING_STATUS_TEXT,
           HOLD_CODE,
           HOLD_TEXT,
           PRICE_REQUEST_CODE,
           PRICING_EFFECTIVE_DATE,
           EXTENDED_PRICE 		/* block pricing */
    FROM   qp_int_lines;

/*
INDX,QP_PREQ_GRP.populate_output.l_int_qual_cur,qp_int_ldets_N4,PRICING_STATUS_CODE,1

INDX,QP_PREQ_GRP.populate_output.l_int_qual_cur,qp_int_line_attrs_N3,LINE_DETAIL_INDEX,1
INDX,QP_PREQ_GRP.populate_output.l_int_qual_cur,qp_int_line_attrs_N3,ATTRIBUTE_TYPE,2
*/
  CURSOR l_int_qual_cur (L_ATTRIBUTE_LEVEL VARCHAR2)IS
    SELECT /*+ dynamic_sampling(1) */ QPLAT.LINE_INDEX,
           QPLAT.LINE_DETAIL_INDEX,
           QPLAT.CONTEXT,
           QPLAT.ATTRIBUTE,
           QPLAT.SETUP_VALUE_FROM,
           QPLAT.SETUP_VALUE_TO,
           QPLAT.COMPARISON_OPERATOR_TYPE_CODE,
           QPLAT.VALIDATED_FLAG,
           QPLAT.PRICING_STATUS_CODE,
           QPLAT.PRICING_STATUS_TEXT
     FROM  qp_int_ldets QPLD ,
           qp_int_line_attrs QPLAT
     WHERE QPLD.LINE_DETAIL_INDEX = QPLAT.LINE_DETAIL_INDEX
     AND   QPLD.PRICING_STATUS_CODE = G_STATUS_NEW
     AND   QPLAT.ATTRIBUTE_TYPE = 'QUALIFIER';
           --AND QPLAT.PRICING_STATUS_CODE = G_STATUS_NEW;

/*
INDX,QP_PREQ_GRP.populate_output.l_int_pricing_attr_cur,qp_int_ldets_N4,PRICING_STATUS_CODE,1

INDX,QP_PREQ_GRP.populate_output.l_int_pricing_attr_cur,qp_int_line_attrs_N3,LINE_DETAIL_INDEX,1
INDX,QP_PREQ_GRP.populate_output.l_int_pricing_attr_cur,qp_int_line_attrs_N3,ATTRIBUTE_TYPE,2
*/
  CURSOR l_int_pricing_attr_cur IS
    SELECT QPLAT_PRICING.CONTEXT        PRICING_CONTEXT,
           QPLAT_PRICING.ATTRIBUTE      PRICING_ATTRIBUTE,
           nvl(QPLAT_PRICING.SETUP_VALUE_FROM,QPLAT_PRICING.VALUE_FROM)     PRICING_ATTR_VALUE_FROM,
           QPLAT_PRICING.SETUP_VALUE_TO       PRICING_ATTR_VALUE_TO,
           QPLAT_PRICING.COMPARISON_OPERATOR_TYPE_CODE,
           QPLAT_PRICING.LINE_DETAIL_INDEX,
           QPLAT_PRICING.LINE_INDEX,
           QPLAT_PRICING.VALIDATED_FLAG
     FROM  qp_int_ldets QPLD ,
           qp_int_line_attrs QPLAT_PRICING
     WHERE QPLD.LINE_DETAIL_INDEX = QPLAT_PRICING.LINE_DETAIL_INDEX
     AND   QPLD.PRICING_STATUS_CODE = G_STATUS_NEW
     AND   QPLAT_PRICING.ATTRIBUTE_TYPE IN ('PRICING','PRODUCT');
           --AND QPLAT_PRICING.PRICING_STATUS_CODE = G_STATUS_NEW;

/*
INDX,QP_PREQ_GRP.populate_output.l_int_ldets_cur,QP_LIST_LINES_PK,LIST_LINE_ID,1

INDX,QP_PREQ_GRP.populate_output.l_int_ldets_cur,qp_int_ldets_N4,PRICING_STATUS_CODE,1

INDX,QP_PREQ_GRP.populate_output.l_int_ldets_cur,QP_LIST_HEADERS_B_PK,LIST_HEADER_ID,1
*/
  CURSOR l_int_ldets_cur IS

    SELECT /*+ ORDERED USE_NL(A B C) l_int_ldets_cur */

           a.LINE_DETAIL_INDEX,
           a.LINE_DETAIL_TYPE_CODE,
           a.LINE_INDEX,
           a.CREATED_FROM_LIST_HEADER_ID LIST_HEADER_ID,
           a.CREATED_FROM_LIST_LINE_ID   LIST_LINE_ID,
           a.CREATED_FROM_LIST_LINE_TYPE LIST_LINE_TYPE_CODE,
           a.PRICE_BREAK_TYPE_CODE,
           a.LINE_QUANTITY,
           a.ADJUSTMENT_AMOUNT,
           a.AUTOMATIC_FLAG,
           a.PRICING_PHASE_ID,
           a.OPERAND_CALCULATION_CODE,
           a.OPERAND_VALUE,
           a.PRICING_GROUP_SEQUENCE,
           a.CREATED_FROM_LIST_TYPE_CODE,
           a.APPLIED_FLAG,
           a.PRICING_STATUS_CODE,
           a.PRICING_STATUS_TEXT,
           a.LIMIT_CODE,
           a.LIMIT_TEXT,
           a.LIST_LINE_NO,
           a.GROUP_QUANTITY,
           a.GROUP_AMOUNT, -- 2388011_new
           a.UPDATED_FLAG,
	   a.PROCESS_CODE,
	   a.CALCULATION_CODE,
	   a.CHANGE_REASON_CODE,
	   a.CHANGE_REASON_TEXT,
           b.SUBSTITUTION_VALUE SUBSTITUTION_VALUE_TO,
           b.SUBSTITUTION_ATTRIBUTE,
           b.ACCRUAL_FLAG,
           b.modifier_level_code,
           b.ESTIM_GL_VALUE,
           b.ACCRUAL_CONVERSION_RATE,
           --Pass throuh components
           b.OVERRIDE_FLAG,
           b.PRINT_ON_INVOICE_FLAG,
           b.INVENTORY_ITEM_ID,
           b.ORGANIZATION_ID,
           b.RELATED_ITEM_ID,
           b.RELATIONSHIP_TYPE_ID,
           b.ESTIM_ACCRUAL_RATE,
           b.EXPIRATION_DATE,
           b.BENEFIT_PRICE_LIST_LINE_ID,
           b.RECURRING_FLAG,
           b.BENEFIT_LIMIT,
           b.CHARGE_TYPE_CODE,
           b.CHARGE_SUBTYPE_CODE,
           b.BENEFIT_QTY,
           b.BENEFIT_UOM_CODE,
           b.PRORATION_TYPE_CODE,
           b.INCLUDE_ON_RETURNS_FLAG,
           b.REBATE_TRANSACTION_TYPE_CODE,
           b.NUMBER_EXPIRATION_PERIODS,
           b.EXPIRATION_PERIOD_UOM,
           b.COMMENTS,
           b.break_uom_code, /* proration */
           b.break_uom_context, /* proration */
           b.break_uom_attribute /* proration */
    FROM  qp_int_ldets a,
          QP_LIST_LINES     b
    WHERE a.CREATED_FROM_LIST_LINE_ID = b.LIST_LINE_ID
    AND   a.PRICING_STATUS_CODE = G_STATUS_NEW;

/*
INDX,QP_PREQ_GRP.populate_output.l_int_rltd_lines_cur,- No Index Used -,NA,NA
*/
  CURSOR l_int_rltd_lines_cur IS
    SELECT  LINE_INDEX,
            LINE_DETAIL_INDEX,
            RELATIONSHIP_TYPE_CODE,
            RELATED_LINE_INDEX,
            RELATED_LINE_DETAIL_INDEX,
            PRICING_STATUS_CODE,
            PRICING_STATUS_TEXT
    FROM qp_int_rltd_lines
    WHERE PRICING_STATUS_CODE = G_STATUS_NEW
    ORDER BY SETUP_VALUE_FROM;

I PLS_INTEGER :=1;
J PLS_INTEGER :=1;
l_expiration_period_end_date Date;
l_status_code VARCHAR2(30);
l_status_text VARCHAR2(30);
E_ROUTINE_ERROR EXCEPTION;
l_routine VARCHAR2(240):='QP_PREQ_GRP.POPULATE_OUTPUT';
l_debug varchar2(3);

BEGIN
  l_debug := QP_PREQ_GRP.G_DEBUG_ENGINE;

  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('----Before populate l_line_tbl-----');
  engine_debug('----Line information return back to caller----');
  END IF;

  --ADDED BY YANGLI FOR JAVA ENGINE PUB 3086881
  IF QP_JAVA_ENGINE_UTIL_PUB.Java_Engine_Running = 'N' THEN
    IF l_debug = FND_API.G_TRUE THEN
      QP_PREQ_GRP.ENGINE_DEBUG('Populate_output: Java Engine not Installed ----------');
    END IF;
  --ADDED BY YANGLI FOR JAVA ENGINE PUB 3086881

  FOR l_line IN l_lines_cur LOOP
    --requirement from Jay, will cause holes in pl/sql table.
    I :=  l_line.LINE_INDEX;
    x_line_tbl(I).LINE_INDEX := l_line.LINE_INDEX;
    x_line_tbl(I).LINE_ID    := l_line.LINE_ID;
    x_line_tbl(I).HEADER_ID    := l_line.PRICE_LIST_HEADER_ID;
    x_line_tbl(I).LINE_TYPE_CODE := l_line.LINE_TYPE_CODE;
    x_line_tbl(I).PRICED_QUANTITY := l_line.PRICED_QUANTITY;
    x_line_tbl(I).CURRENCY_CODE := l_line.CURRENCY_CODE;
    x_line_tbl(I).ROUNDING_FACTOR := l_line.ROUNDING_FACTOR;
    x_line_tbl(I).PRICED_UOM_CODE := l_line.PRICED_UOM_CODE;
    x_line_tbl(I).UNIT_PRICE := l_line.UNIT_PRICE; --shu_latest
    x_line_tbl(I).LINE_QUANTITY:=l_line.LINE_QUANTITY;
    x_line_tbl(I).LINE_UOM_CODE:=l_line.LINE_UOM_CODE;
    x_line_tbl(I).LINE_UNIT_PRICE := l_line.LINE_UNIT_PRICE; --shu_latest
    x_line_tbl(I).UOM_QUANTITY := l_line.UOM_QUANTITY; --shu_latest
    x_line_tbl(I).PERCENT_PRICE := l_line.PERCENT_PRICE;
    x_line_tbl(I).ADJUSTED_UNIT_PRICE := l_line.ADJUSTED_UNIT_PRICE;
    x_line_tbl(I).UPDATED_ADJUSTED_UNIT_PRICE := l_line.UPDATED_ADJUSTED_UNIT_PRICE;
    x_line_tbl(I).PARENT_PRICE := l_line.PARENT_PRICE;
    x_line_tbl(I).PARENT_QUANTITY := l_line.PARENT_QUANTITY;
    x_line_tbl(I).PARENT_UOM_CODE := l_line.PARENT_UOM_CODE;
    x_line_tbl(I).PROCESSED_CODE := l_line.PROCESSED_CODE;
    x_line_tbl(I).PRICE_FLAG := l_line.PRICE_FLAG;
    x_line_tbl(I).STATUS_CODE := l_line.PRICING_STATUS_CODE;
    x_line_tbl(I).STATUS_TEXT := substr(l_line.PRICING_STATUS_TEXT,1,2000); -- shulin, fix bug 1745788
    x_line_tbl(I).HOLD_CODE := l_line.HOLD_CODE;
    x_line_tbl(I).HOLD_TEXT := substr(l_line.HOLD_TEXT,1,240);
    x_line_tbl(I).PRICE_REQUEST_CODE := l_line.PRICE_REQUEST_CODE;
    x_line_tbl(I).PRICING_EFFECTIVE_DATE := l_line.PRICING_EFFECTIVE_DATE;
    x_line_tbl(I).EXTENDED_PRICE := l_line.EXTENDED_PRICE; -- block pricing
    --x_line_tbl(I).EXTENDED_SELLING_PRICE_UR := l_line.EXTENDED_SELLING_PRICE_UR;   --[prarasto:Post Round], [julin/postround] redesign
    --x_line_tbl(I).ORDER_UOM_SELLING_PRICE_UR := l_line.ORDER_UOM_SELLING_PRICE_UR; --[prarasto:Post Round]
    --x_line_tbl(I).ADJUSTED_UNIT_PRICE_UR := l_line.ADJUSTED_UNIT_PRICE_UR;         --[prarasto:Post Round]

    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('LINE_INDEX :='||l_line.LINE_INDEX);
    engine_debug('LINE_ID    :='||l_line.LINE_ID);
    engine_debug('PRICE_LIST_HEADER_ID   :='||l_line.PRICE_LIST_HEADER_ID); -- shu, print out this
    engine_debug('LINE_TYPE_CODE :='||l_line.LINE_TYPE_CODE);
    engine_debug('UOM_QUANTITY :='||l_line.UOM_QUANTITY);
    engine_debug('CURRENCY_CODE :='||l_line.CURRENCY_CODE);
    engine_debug('ROUNDING_FACTOR :='||l_line.ROUNDING_FACTOR);
    engine_debug('PRICED_QUANTITY :='||l_line.PRICED_QUANTITY);
    engine_debug('PRICED_UOM_CODE :='||l_line.PRICED_UOM_CODE);
    engine_debug('UNIT_PRICE :='||l_line.UNIT_PRICE);
    engine_debug('LINE_QUANTITY:='||l_line.LINE_QUANTITY);
    engine_debug('LINE_UOM_CODE:='||l_line.LINE_UOM_CODE);
    engine_debug('LINE_UNIT_PRICE:='||l_line.LINE_UNIT_PRICE); -- shu_latest
    engine_debug('PERCENT_PRICE :='||l_line.PERCENT_PRICE);
    engine_debug('ADJUSTED_UNIT_PRICE :='||l_line.ADJUSTED_UNIT_PRICE);
    engine_debug('PARENT_PRICE :='||l_line.PARENT_PRICE);
    engine_debug('PARENT_QUANTITY :='||l_line.PARENT_QUANTITY);
    engine_debug('PARENT_UOM_CODE :='||l_line.PARENT_UOM_CODE);
    engine_debug('processed_code :='||l_line.processed_code);
    engine_debug('Price Flag :='||l_line.price_flag);
    engine_debug('STATUS_CODE :='||l_line.PRICING_STATUS_CODE);
    engine_debug('STATUS_TEXT :='|| substr(l_line.PRICING_STATUS_TEXT,1,2000));
    engine_debug('HOLD_CODE := '||l_line.HOLD_CODE);
    engine_debug('HOLD_TEXT := '||substr(l_line.HOLD_TEXT,1,240));
    engine_debug('PRICE_REQUEST_CODE := '||l_line.PRICE_REQUEST_CODE);
    engine_debug('PRICING_DATE := '||l_line.PRICING_EFFECTIVE_DATE);
    engine_debug('EXTENDED_PRICE := '||l_line.EXTENDED_PRICE);
    --engine_debug('EXTENDED_SELLING_PRICE_UR := '|| l_line.EXTENDED_SELLING_PRICE_UR);   --[prarasto:Post Round], [julin/postround] redesign
    --engine_debug('ORDER_UOM_SELLING_PRICE_UR := '|| l_line.ORDER_UOM_SELLING_PRICE_UR); --[prarasto:Post Round]
    --engine_debug('ADJUSTED_UNIT_PRICE_UR := '|| l_line.ADJUSTED_UNIT_PRICE_UR);         --[prarasto:Post Round]
    END IF;

  END LOOP;
  I:=1;


--Populate Line detail
     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('----Line detail information return back to caller----');
     END IF;
  FOR l_dets IN l_ldets_cur LOOP
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('----populating line detail output------');
    END IF;

    --requirement by Jay, will cause holes in pl/sql tbl
    I := l_dets.line_detail_index;
    x_line_detail_tbl(I).LINE_DETAIL_INDEX := l_dets.LINE_DETAIL_INDEX;
    x_line_detail_tbl(I).LINE_DETAIL_TYPE_CODE:=l_dets.LINE_DETAIL_TYPE_CODE;
    x_line_detail_tbl(I).LINE_INDEX:=l_dets.LINE_INDEX;
    x_line_detail_tbl(I).LIST_HEADER_ID:=l_dets.LIST_HEADER_ID;
    x_line_detail_tbl(I).LIST_LINE_ID:=l_dets.LIST_LINE_ID;
    x_line_detail_tbl(I).LIST_LINE_TYPE_CODE:=l_dets.LIST_LINE_TYPE_CODE;
    x_line_detail_tbl(I).SUBSTITUTION_TO:=l_dets.SUBSTITUTION_VALUE_TO;
    x_line_detail_tbl(I).LINE_QUANTITY :=l_dets.LINE_QUANTITY;
    x_line_detail_tbl(I).ADJUSTMENT_AMOUNT := l_dets.ADJUSTMENT_AMOUNT;
    x_line_detail_tbl(I).AUTOMATIC_FLAG    := l_dets.AUTOMATIC_FLAG;
    x_line_detail_tbl(I).APPLIED_FLAG      := l_dets.APPLIED_FLAG;
    x_line_detail_tbl(I).PRICING_GROUP_SEQUENCE := l_dets.PRICING_GROUP_SEQUENCE;
    x_line_detail_tbl(I).CREATED_FROM_LIST_TYPE_CODE:=l_dets.CREATED_FROM_LIST_TYPE_CODE;
    x_line_detail_tbl(I).PRICE_BREAK_TYPE_CODE := l_dets.PRICE_BREAK_TYPE_CODE;
    x_line_detail_tbl(I).OVERRIDE_FLAG   := l_dets.override_flag;
    x_line_detail_tbl(I).PRINT_ON_INVOICE_FLAG :=l_dets.print_on_invoice_flag;
    x_line_detail_tbl(I).PRICING_PHASE_ID := l_dets.PRICING_PHASE_ID;
    x_line_detail_tbl(I).APPLIED_FLAG := l_dets.APPLIED_FLAG;
    x_line_detail_tbl(I).OPERAND_CALCULATION_CODE := l_dets.OPERAND_CALCULATION_CODE;
    x_line_detail_tbl(I).OPERAND_VALUE := l_dets.OPERAND_VALUE;
    x_line_detail_tbl(I).STATUS_CODE:=l_dets.PRICING_STATUS_CODE;
    x_line_detail_tbl(I).STATUS_TEXT:=substr(l_dets.PRICING_STATUS_TEXT,1,240);
    x_line_detail_tbl(I).SUBSTITUTION_ATTRIBUTE:=l_dets.SUBSTITUTION_ATTRIBUTE;
    x_line_detail_tbl(I).ACCRUAL_FLAG:=l_dets.ACCRUAL_FLAG;
    x_line_detail_tbl(I).LIST_LINE_NO:=l_dets.LIST_LINE_NO;
    x_line_detail_tbl(I).ESTIM_GL_VALUE:=l_dets.ESTIM_GL_VALUE;
    x_line_detail_tbl(I).ACCRUAL_CONVERSION_RATE:=l_dets.ACCRUAL_CONVERSION_RATE;
           --Pass throuh components
    x_line_detail_tbl(I).OVERRIDE_FLAG:= l_dets.OVERRIDE_FLAG;
    x_line_detail_tbl(I).PRINT_ON_INVOICE_FLAG:=l_dets.PRINT_ON_INVOICE_FLAG;
    x_line_detail_tbl(I).INVENTORY_ITEM_ID:=l_dets.INVENTORY_ITEM_ID;
    x_line_detail_tbl(I).ORGANIZATION_ID:=l_dets.ORGANIZATION_ID;
    x_line_detail_tbl(I).RELATED_ITEM_ID:= l_dets.RELATED_ITEM_ID;
    x_line_detail_tbl(I).RELATIONSHIP_TYPE_ID:=l_dets.RELATIONSHIP_TYPE_ID;
    x_line_detail_tbl(I).ESTIM_ACCRUAL_RATE:=l_dets.ESTIM_ACCRUAL_RATE;

    x_line_detail_tbl(I).BENEFIT_PRICE_LIST_LINE_ID:=l_dets.BENEFIT_PRICE_LIST_LINE_ID;
    x_line_detail_tbl(I).RECURRING_FLAG:= l_dets.RECURRING_FLAG;
    x_line_detail_tbl(I).RECURRING_VALUE:= l_dets.RECURRING_VALUE; --for block pricing bug 3657116
    x_line_detail_tbl(I).BENEFIT_LIMIT:= l_dets.BENEFIT_LIMIT;
    x_line_detail_tbl(I).CHARGE_TYPE_CODE:=  l_dets.CHARGE_TYPE_CODE;
    x_line_detail_tbl(I).CHARGE_SUBTYPE_CODE:=l_dets.CHARGE_SUBTYPE_CODE;
    x_line_detail_tbl(I).BENEFIT_QTY:=l_dets.BENEFIT_QTY;
    x_line_detail_tbl(I).BENEFIT_UOM_CODE:=l_dets.BENEFIT_UOM_CODE;
    x_line_detail_tbl(I).PRORATION_TYPE_CODE:=l_dets.PRORATION_TYPE_CODE;
    x_line_detail_tbl(I).INCLUDE_ON_RETURNS_FLAG := l_dets.INCLUDE_ON_RETURNS_FLAG;
    x_line_detail_tbl(I).LIST_LINE_NO := l_dets.LIST_LINE_NO;
    x_line_detail_tbl(I).MODIFIER_LEVEL_CODE := l_dets.MODIFIER_LEVEL_CODE;
    x_line_detail_tbl(I).GROUP_VALUE := nvl(l_dets.GROUP_QUANTITY,l_dets.GROUP_AMOUNT); -- 2388011_new
    x_line_detail_tbl(I).COMMENTS := l_dets.COMMENTS;
    x_line_detail_tbl(I).UPDATED_FLAG := l_dets.UPDATED_FLAG;
    x_line_detail_tbl(I).PROCESS_CODE := l_dets.PROCESS_CODE;
    x_line_detail_tbl(I).LIMIT_CODE := l_dets.LIMIT_CODE;
    x_line_detail_tbl(I).LIMIT_TEXT := substr(l_dets.LIMIT_TEXT,1,240);
    x_line_detail_tbl(I).CALCULATION_CODE := l_dets.CALCULATION_CODE;
    x_line_detail_tbl(I).CHANGE_REASON_CODE := l_dets.CHANGE_REASON_CODE;
    x_line_detail_tbl(I).CHANGE_REASON_CODE := substr(l_dets.CHANGE_REASON_CODE,1,240);
    x_line_detail_tbl(I).BREAK_UOM_CODE := l_dets.BREAK_UOM_CODE; /* proration */
    x_line_detail_tbl(I).BREAK_UOM_CONTEXT := l_dets.BREAK_UOM_CONTEXT; /* proration */
    x_line_detail_tbl(I).BREAK_UOM_ATTRIBUTE := l_dets.BREAK_UOM_ATTRIBUTE; /* proration */

    IF (l_dets.LINE_DETAIL_TYPE_CODE = G_COUPON_ISSUE) THEN
     SET_EXPIRATION_DATES (l_dets.number_expiration_periods,
                          l_dets.EXPIRATION_PERIOD_UOM,
                          l_dets.line_index,
                          l_expiration_period_end_date,
                          l_status_code,
                          l_status_text);
    END IF;

    IF l_status_code = FND_API.G_RET_STS_ERROR THEN
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug(l_routine||':'||substr(l_status_text,1,240));
        END IF;
    END IF;

    x_line_detail_tbl(I).EXPIRATION_DATE :=l_expiration_period_end_date;
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('LINE_DETAIL_INDEX :='|| l_dets.LINE_DETAIL_INDEX);
    engine_debug('LINE_DETAIL_TYPE_CODE:='||l_dets.LINE_DETAIL_TYPE_CODE);
    engine_debug('LINE_INDEX:='||l_dets.LINE_INDEX);
    engine_debug('LIST_HEADER_ID:='||l_dets.LIST_HEADER_ID);
    engine_debug('LIST_LINE_ID:='||l_dets.LIST_LINE_ID);
    engine_debug('LIST_LINE_TYPE_CODE:='||l_dets.LIST_LINE_TYPE_CODE);
    engine_debug('SUBSTITUTION_TO:='||l_dets.SUBSTITUTION_VALUE_TO);
    engine_debug('LINE_QUANTITY :='||l_dets.LINE_QUANTITY);
    engine_debug('ADJUSTMENT_AMOUNT :='|| l_dets.ADJUSTMENT_AMOUNT);
    engine_debug('AUTOMATIC_FLAG    :='|| l_dets.AUTOMATIC_FLAG);
    engine_debug('APPLIED_FLAG      :='|| l_dets.APPLIED_FLAG);
    engine_debug('PRICING_GROUP_SEQUENCE :='|| l_dets.PRICING_GROUP_SEQUENCE);
    engine_debug('CREATED_FROM_LIST_TYPE_CODE:='||l_dets.CREATED_FROM_LIST_TYPE_CODE);
    engine_debug('PRICE_BREAK_TYPE_CODE :='|| l_dets.PRICE_BREAK_TYPE_CODE);
    engine_debug('OVERRIDE_FLAG   :='|| l_dets.override_flag);
    engine_debug('PRINT_ON_INVOICE_FLAG :='||l_dets.print_on_invoice_flag);
    engine_debug('PRICING_PHASE_ID :='|| l_dets.PRICING_PHASE_ID);
    engine_debug('OPERAND_CALCULATION_CODE :='|| l_dets.OPERAND_CALCULATION_CODE);
    engine_debug('OPERAND_VALUE :='|| l_dets.OPERAND_VALUE);
    engine_debug('STATUS_CODE:='||l_dets.PRICING_STATUS_CODE);
    engine_debug('STATUS_TEXT:='||substr(l_dets.PRICING_STATUS_TEXT,1,240));
    engine_debug('SUBSTITUTION_ATTRIBUTE:='||l_dets.SUBSTITUTION_ATTRIBUTE);
    engine_debug('ACCRUAL_FLAG:='||l_dets.ACCRUAL_FLAG);
    engine_debug('LIST_LINE_NO:='||l_dets.LIST_LINE_NO);
    engine_debug('ESTIM_GL_VALUE:='||l_dets.ESTIM_GL_VALUE);
    engine_debug('ACCRUAL_CONVERSION_RATE:='||l_dets.ACCRUAL_CONVERSION_RATE);
    END IF;
           --Pass throuh components
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('OVERRIDE_FLAG:='|| l_dets.OVERRIDE_FLAG);
    engine_debug('INVENTORY_ITEM_ID:='||l_dets.INVENTORY_ITEM_ID);
    engine_debug('ORGANIZATION_ID:='||l_dets.ORGANIZATION_ID);
    engine_debug('RELATED_ITEM_ID:='|| l_dets.RELATED_ITEM_ID);
    engine_debug('RELATIONSHIP_TYPE_ID:='||l_dets.RELATIONSHIP_TYPE_ID);
    engine_debug('ESTIM_ACCRUAL_RATE:='||l_dets.ESTIM_ACCRUAL_RATE);
    engine_debug('EXPIRATION_DATE:='||l_dets.EXPIRATION_DATE);
    engine_debug('BENEFIT_PRICE_LIST_LINE_ID:='||l_dets.BENEFIT_PRICE_LIST_LINE_ID);
    engine_debug('RECURRING_FLAG:='|| l_dets.RECURRING_FLAG);
    engine_debug('BENEFIT_LIMIT:='|| l_dets.BENEFIT_LIMIT);
    engine_debug('CHARGE_TYPE_CODE:='||  l_dets.CHARGE_TYPE_CODE);
    engine_debug('CHARGE_SUBTYPE_CODE:='||l_dets.CHARGE_SUBTYPE_CODE);
    engine_debug('BENEFIT_QTY:='||l_dets.BENEFIT_QTY);
    engine_debug('BENEFIT_UOM_CODE:='||l_dets.BENEFIT_UOM_CODE);
    engine_debug('PRORATION_TYPE_CODE:='||l_dets.PRORATION_TYPE_CODE);
    engine_debug('INCLUDE_ON_RETURNS_FLAG :='|| l_dets.INCLUDE_ON_RETURNS_FLAG);
    engine_debug('MODIFIER_LEVEL_CODE :='|| l_dets.MODIFIER_LEVEL_CODE);
    engine_debug('GROUP VALUE :='|| l_dets.GROUP_QUANTITY);
    engine_debug('LIMIT_CODE :='|| l_dets.LIMIT_CODE);
    engine_debug('LIMIT_TEXT :='|| substr(l_dets.LIMIT_TEXT,1,240));
    engine_debug('CHANGE_REASON_CODE :='|| l_dets.CHANGE_REASON_CODE);
    engine_debug('CHANGE_REASON_TEXT :='|| substr(l_dets.CHANGE_REASON_TEXT,1,240));
    engine_debug('BREAK_UOM_CODE :='|| l_dets.BREAK_UOM_CODE); /* proration */
    engine_debug('BREAK_UOM_CONTEXT :='|| l_dets.BREAK_UOM_CONTEXT); /* proration */
    engine_debug('BREAK_UOM_ATTRIBUTE :='|| l_dets.BREAK_UOM_ATTRIBUTE); /* proration */

    END IF;
  --I:=I+1;
  END LOOP;
I:=1;

--Populate Qualifier detail
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('----Before populate x_qual_tbl-----');
  END IF;
  FOR l_qual IN l_qual_cur(G_DETAIL_LEVEL) LOOP
    x_line_detail_qual_tbl(I).LINE_DETAIL_INDEX := l_qual.LINE_DETAIL_INDEX;
    x_line_detail_qual_tbl(I).QUALIFIER_CONTEXT := l_qual.CONTEXT;
    x_line_detail_qual_tbl(I).QUALIFIER_ATTRIBUTE := l_qual.ATTRIBUTE;
    x_line_detail_qual_tbl(I).QUALIFIER_ATTR_VALUE_FROM := l_qual.SETUP_VALUE_FROM;
    x_line_detail_qual_tbl(I).QUALIFIER_ATTR_VALUE_TO := l_qual.SETUP_VALUE_TO;
    x_line_detail_qual_tbl(I).COMPARISON_OPERATOR_CODE := l_qual.COMPARISON_OPERATOR_TYPE_CODE;
    x_line_detail_qual_tbl(I).status_code := l_qual.PRICING_STATUS_CODE;
    x_line_detail_qual_tbl(I).VALIDATED_FLAG :=l_qual.VALIDATED_FLAG;

  I:=I+1;
  END LOOP;
  I:=1;

--LINE ATTRIBUTE DETAIL NEEDED
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('----Before populate attr_tbl-----');
  END IF;
 FOR l_prc IN l_pricing_attr_cur LOOP
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('--------populating x_line_detail_attr----------');
    engine_debug('Line Detail Index: '||l_prc.LINE_DETAIL_INDEX);
    END IF;
    x_line_detail_attr_tbl(I).LINE_DETAIL_INDEX := l_prc.LINE_DETAIL_INDEX;
    x_line_detail_attr_tbl(I).PRICING_CONTEXT := l_prc.PRICING_CONTEXT;
    x_line_detail_attr_tbl(I).PRICING_ATTRIBUTE := l_prc.PRICING_ATTRIBUTE;
    x_line_detail_attr_tbl(I).PRICING_ATTR_VALUE_FROM :=l_prc.PRICING_ATTR_VALUE_FROM;
    x_line_detail_attr_tbl(I).PRICING_ATTR_VALUE_TO :=l_prc.PRICING_ATTR_VALUE_TO;
    x_line_detail_attr_tbl(I).VALIDATED_FLAG :=l_prc.VALIDATED_FLAG;
    --x_line_attr_tbl(I).PRICING_STATUS_CODE := l_prc.PRICING_STATUS_CODE;
    --x_line_attr_tbl(I).PRICING_STATUS_TEXT := l_prc.PRICING_STATUS_TEXT;
  I:=I+1;
  END LOOP;

  I:=1;

  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('----Before populate l_rltd_lines_tbl-----');
  END IF;
  FOR l_rltd IN l_rltd_lines_cur LOOP
     x_related_lines_tbl(I).LINE_INDEX := l_rltd.Line_index;
     x_related_lines_tbl(I).LINE_DETAIL_INDEX :=  l_rltd.LINE_DETAIL_INDEX;
     x_related_lines_tbl(I).RELATIONSHIP_TYPE_CODE :=l_rltd.RELATIONSHIP_TYPE_CODE;
     x_related_lines_tbl(I).RELATED_LINE_INDEX     :=l_rltd.RELATED_LINE_INDEX;
     x_related_lines_tbl(I).RELATED_LINE_DETAIL_INDEX :=l_rltd.RELATED_LINE_DETAIL_INDEX;
     x_related_lines_tbl(I).STATUS_CODE :=l_rltd.PRICING_STATUS_CODE;
     x_related_lines_tbl(I).STATUS_TEXT :=l_rltd.PRICING_STATUS_TEXT;
  I:=I+1;
  END LOOP;
ELSE
    IF l_debug = FND_API.G_TRUE THEN
      QP_PREQ_GRP.ENGINE_DEBUG('Populate_output: Java Engine is Installed ----------');
    END IF;
  --ADDED BY YANGLI FOR JAVA ENGINE PUB 3086881

  FOR l_line IN l_int_lines_cur LOOP
    --requirement from Jay, will cause holes in pl/sql table.
    I :=  l_line.LINE_INDEX;
    x_line_tbl(I).LINE_INDEX := l_line.LINE_INDEX;
    x_line_tbl(I).LINE_ID    := l_line.LINE_ID;
    x_line_tbl(I).HEADER_ID    := l_line.PRICE_LIST_HEADER_ID;
    x_line_tbl(I).LINE_TYPE_CODE := l_line.LINE_TYPE_CODE;
    x_line_tbl(I).PRICED_QUANTITY := l_line.PRICED_QUANTITY;
    x_line_tbl(I).CURRENCY_CODE := l_line.CURRENCY_CODE;
    x_line_tbl(I).ROUNDING_FACTOR := l_line.ROUNDING_FACTOR;
    x_line_tbl(I).PRICED_UOM_CODE := l_line.PRICED_UOM_CODE;
    x_line_tbl(I).UNIT_PRICE := l_line.UNIT_PRICE; --shu_latest
    x_line_tbl(I).LINE_QUANTITY:=l_line.LINE_QUANTITY;
    x_line_tbl(I).LINE_UOM_CODE:=l_line.LINE_UOM_CODE;
    x_line_tbl(I).LINE_UNIT_PRICE := l_line.LINE_UNIT_PRICE; --shu_latest
    x_line_tbl(I).UOM_QUANTITY := l_line.UOM_QUANTITY; --shu_latest
    x_line_tbl(I).PERCENT_PRICE := l_line.PERCENT_PRICE;
    x_line_tbl(I).ADJUSTED_UNIT_PRICE := l_line.ADJUSTED_UNIT_PRICE;
    x_line_tbl(I).UPDATED_ADJUSTED_UNIT_PRICE := l_line.UPDATED_ADJUSTED_UNIT_PRICE;
    x_line_tbl(I).PARENT_PRICE := l_line.PARENT_PRICE;
    x_line_tbl(I).PARENT_QUANTITY := l_line.PARENT_QUANTITY;
    x_line_tbl(I).PARENT_UOM_CODE := l_line.PARENT_UOM_CODE;
    x_line_tbl(I).PROCESSED_CODE := l_line.PROCESSED_CODE;
    x_line_tbl(I).PRICE_FLAG := l_line.PRICE_FLAG;
    x_line_tbl(I).STATUS_CODE := l_line.PRICING_STATUS_CODE;
    x_line_tbl(I).STATUS_TEXT := substr(l_line.PRICING_STATUS_TEXT,1,2000); -- shulin, fix bug 1745788
    x_line_tbl(I).HOLD_CODE := l_line.HOLD_CODE;
    x_line_tbl(I).HOLD_TEXT := substr(l_line.HOLD_TEXT,1,240);
    x_line_tbl(I).PRICE_REQUEST_CODE := l_line.PRICE_REQUEST_CODE;
    x_line_tbl(I).PRICING_EFFECTIVE_DATE := l_line.PRICING_EFFECTIVE_DATE;
    x_line_tbl(I).EXTENDED_PRICE := l_line.EXTENDED_PRICE; -- block pricing

    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('LINE_INDEX :='||l_line.LINE_INDEX);
    engine_debug('LINE_ID    :='||l_line.LINE_ID);
    engine_debug('PRICE_LIST_HEADER_ID   :='||l_line.PRICE_LIST_HEADER_ID); -- shu, print out this
    engine_debug('LINE_TYPE_CODE :='||l_line.LINE_TYPE_CODE);
    engine_debug('UOM_QUANTITY :='||l_line.UOM_QUANTITY);
    engine_debug('CURRENCY_CODE :='||l_line.CURRENCY_CODE);
    engine_debug('ROUNDING_FACTOR :='||l_line.ROUNDING_FACTOR);
    engine_debug('PRICED_QUANTITY :='||l_line.PRICED_QUANTITY);
    engine_debug('PRICED_UOM_CODE :='||l_line.PRICED_UOM_CODE);
    engine_debug('UNIT_PRICE :='||l_line.UNIT_PRICE);
    engine_debug('LINE_QUANTITY:='||l_line.LINE_QUANTITY);
    engine_debug('LINE_UOM_CODE:='||l_line.LINE_UOM_CODE);
    engine_debug('LINE_UNIT_PRICE:='||l_line.LINE_UNIT_PRICE); -- shu_latest
    engine_debug('PERCENT_PRICE :='||l_line.PERCENT_PRICE);
    engine_debug('ADJUSTED_UNIT_PRICE :='||l_line.ADJUSTED_UNIT_PRICE);
    engine_debug('PARENT_PRICE :='||l_line.PARENT_PRICE);
    engine_debug('PARENT_QUANTITY :='||l_line.PARENT_QUANTITY);
    engine_debug('PARENT_UOM_CODE :='||l_line.PARENT_UOM_CODE);
    engine_debug('processed_code :='||l_line.processed_code);
    engine_debug('Price Flag :='||l_line.price_flag);
    engine_debug('STATUS_CODE :='||l_line.PRICING_STATUS_CODE);
    engine_debug('STATUS_TEXT :='|| substr(l_line.PRICING_STATUS_TEXT,1,2000));
    engine_debug('HOLD_CODE := '||l_line.HOLD_CODE);
    engine_debug('HOLD_TEXT := '||substr(l_line.HOLD_TEXT,1,240));
    engine_debug('PRICE_REQUEST_CODE := '||l_line.PRICE_REQUEST_CODE);
    engine_debug('PRICING_DATE := '||l_line.PRICING_EFFECTIVE_DATE);
    engine_debug('EXTENDED_PRICE := '||l_line.EXTENDED_PRICE);
    END IF;

  END LOOP;
  I:=1;


--Populate Line detail
     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('----Line detail information return back to caller----');
     END IF;
  FOR l_dets IN l_int_ldets_cur LOOP
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('----populating line detail output------');
    END IF;

    --requirement by Jay, will cause holes in pl/sql tbl
    I := l_dets.line_detail_index;
    x_line_detail_tbl(I).LINE_DETAIL_INDEX := l_dets.LINE_DETAIL_INDEX;
    x_line_detail_tbl(I).LINE_DETAIL_TYPE_CODE:=l_dets.LINE_DETAIL_TYPE_CODE;
    x_line_detail_tbl(I).LINE_INDEX:=l_dets.LINE_INDEX;
    x_line_detail_tbl(I).LIST_HEADER_ID:=l_dets.LIST_HEADER_ID;
    x_line_detail_tbl(I).LIST_LINE_ID:=l_dets.LIST_LINE_ID;
    x_line_detail_tbl(I).LIST_LINE_TYPE_CODE:=l_dets.LIST_LINE_TYPE_CODE;
    x_line_detail_tbl(I).SUBSTITUTION_TO:=l_dets.SUBSTITUTION_VALUE_TO;
    x_line_detail_tbl(I).LINE_QUANTITY :=l_dets.LINE_QUANTITY;
    x_line_detail_tbl(I).ADJUSTMENT_AMOUNT := l_dets.ADJUSTMENT_AMOUNT;
    x_line_detail_tbl(I).AUTOMATIC_FLAG    := l_dets.AUTOMATIC_FLAG;
    x_line_detail_tbl(I).APPLIED_FLAG      := l_dets.APPLIED_FLAG;
    x_line_detail_tbl(I).PRICING_GROUP_SEQUENCE := l_dets.PRICING_GROUP_SEQUENCE;
    x_line_detail_tbl(I).CREATED_FROM_LIST_TYPE_CODE:=l_dets.CREATED_FROM_LIST_TYPE_CODE;
    x_line_detail_tbl(I).PRICE_BREAK_TYPE_CODE := l_dets.PRICE_BREAK_TYPE_CODE;
    x_line_detail_tbl(I).OVERRIDE_FLAG   := l_dets.override_flag;
    x_line_detail_tbl(I).PRINT_ON_INVOICE_FLAG :=l_dets.print_on_invoice_flag;
    x_line_detail_tbl(I).PRICING_PHASE_ID := l_dets.PRICING_PHASE_ID;
    x_line_detail_tbl(I).APPLIED_FLAG := l_dets.APPLIED_FLAG;
    x_line_detail_tbl(I).OPERAND_CALCULATION_CODE := l_dets.OPERAND_CALCULATION_CODE;
    x_line_detail_tbl(I).OPERAND_VALUE := l_dets.OPERAND_VALUE;
    x_line_detail_tbl(I).STATUS_CODE:=l_dets.PRICING_STATUS_CODE;
    x_line_detail_tbl(I).STATUS_TEXT:=substr(l_dets.PRICING_STATUS_TEXT,1,240);
    x_line_detail_tbl(I).SUBSTITUTION_ATTRIBUTE:=l_dets.SUBSTITUTION_ATTRIBUTE;
    x_line_detail_tbl(I).ACCRUAL_FLAG:=l_dets.ACCRUAL_FLAG;
    x_line_detail_tbl(I).LIST_LINE_NO:=l_dets.LIST_LINE_NO;
    x_line_detail_tbl(I).ESTIM_GL_VALUE:=l_dets.ESTIM_GL_VALUE;
    x_line_detail_tbl(I).ACCRUAL_CONVERSION_RATE:=l_dets.ACCRUAL_CONVERSION_RATE;
           --Pass throuh components
    x_line_detail_tbl(I).OVERRIDE_FLAG:= l_dets.OVERRIDE_FLAG;
    x_line_detail_tbl(I).PRINT_ON_INVOICE_FLAG:=l_dets.PRINT_ON_INVOICE_FLAG;
    x_line_detail_tbl(I).INVENTORY_ITEM_ID:=l_dets.INVENTORY_ITEM_ID;
    x_line_detail_tbl(I).ORGANIZATION_ID:=l_dets.ORGANIZATION_ID;
    x_line_detail_tbl(I).RELATED_ITEM_ID:= l_dets.RELATED_ITEM_ID;
    x_line_detail_tbl(I).RELATIONSHIP_TYPE_ID:=l_dets.RELATIONSHIP_TYPE_ID;
    x_line_detail_tbl(I).ESTIM_ACCRUAL_RATE:=l_dets.ESTIM_ACCRUAL_RATE;

    x_line_detail_tbl(I).BENEFIT_PRICE_LIST_LINE_ID:=l_dets.BENEFIT_PRICE_LIST_LINE_ID;
    x_line_detail_tbl(I).RECURRING_FLAG:= l_dets.RECURRING_FLAG;
    x_line_detail_tbl(I).BENEFIT_LIMIT:= l_dets.BENEFIT_LIMIT;
    x_line_detail_tbl(I).CHARGE_TYPE_CODE:=  l_dets.CHARGE_TYPE_CODE;
    x_line_detail_tbl(I).CHARGE_SUBTYPE_CODE:=l_dets.CHARGE_SUBTYPE_CODE;
    x_line_detail_tbl(I).BENEFIT_QTY:=l_dets.BENEFIT_QTY;
    x_line_detail_tbl(I).BENEFIT_UOM_CODE:=l_dets.BENEFIT_UOM_CODE;
    x_line_detail_tbl(I).PRORATION_TYPE_CODE:=l_dets.PRORATION_TYPE_CODE;
    x_line_detail_tbl(I).INCLUDE_ON_RETURNS_FLAG := l_dets.INCLUDE_ON_RETURNS_FLAG;
    x_line_detail_tbl(I).LIST_LINE_NO := l_dets.LIST_LINE_NO;
    x_line_detail_tbl(I).MODIFIER_LEVEL_CODE := l_dets.MODIFIER_LEVEL_CODE;
    x_line_detail_tbl(I).GROUP_VALUE := nvl(l_dets.GROUP_QUANTITY,l_dets.GROUP_AMOUNT); -- 2388011_new
    x_line_detail_tbl(I).COMMENTS := l_dets.COMMENTS;
    x_line_detail_tbl(I).UPDATED_FLAG := l_dets.UPDATED_FLAG;
    x_line_detail_tbl(I).PROCESS_CODE := l_dets.PROCESS_CODE;
    x_line_detail_tbl(I).LIMIT_CODE := l_dets.LIMIT_CODE;
    x_line_detail_tbl(I).LIMIT_TEXT := substr(l_dets.LIMIT_TEXT,1,240);
    x_line_detail_tbl(I).CALCULATION_CODE := l_dets.CALCULATION_CODE;
    x_line_detail_tbl(I).CHANGE_REASON_CODE := l_dets.CHANGE_REASON_CODE;
    x_line_detail_tbl(I).CHANGE_REASON_CODE := substr(l_dets.CHANGE_REASON_CODE,1,240);
    x_line_detail_tbl(I).BREAK_UOM_CODE := l_dets.BREAK_UOM_CODE; /* proration */
    x_line_detail_tbl(I).BREAK_UOM_CONTEXT := l_dets.BREAK_UOM_CONTEXT; /* proration */
    x_line_detail_tbl(I).BREAK_UOM_ATTRIBUTE := l_dets.BREAK_UOM_ATTRIBUTE; /* proration */

    IF (l_dets.LINE_DETAIL_TYPE_CODE = G_COUPON_ISSUE) THEN
     SET_EXPIRATION_DATES (l_dets.number_expiration_periods,
                          l_dets.EXPIRATION_PERIOD_UOM,
                          l_dets.line_index,
                          l_expiration_period_end_date,
                          l_status_code,
                          l_status_text);
    END IF;

    IF l_status_code = FND_API.G_RET_STS_ERROR THEN
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug(l_routine||':'||substr(l_status_text,1,240));
        END IF;
    END IF;

    x_line_detail_tbl(I).EXPIRATION_DATE :=l_expiration_period_end_date;
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('LINE_DETAIL_INDEX :='|| l_dets.LINE_DETAIL_INDEX);
    engine_debug('LINE_DETAIL_TYPE_CODE:='||l_dets.LINE_DETAIL_TYPE_CODE);
    engine_debug('LINE_INDEX:='||l_dets.LINE_INDEX);
    engine_debug('LIST_HEADER_ID:='||l_dets.LIST_HEADER_ID);
    engine_debug('LIST_LINE_ID:='||l_dets.LIST_LINE_ID);
    engine_debug('LIST_LINE_TYPE_CODE:='||l_dets.LIST_LINE_TYPE_CODE);
    engine_debug('SUBSTITUTION_TO:='||l_dets.SUBSTITUTION_VALUE_TO);
    engine_debug('LINE_QUANTITY :='||l_dets.LINE_QUANTITY);
    engine_debug('ADJUSTMENT_AMOUNT :='|| l_dets.ADJUSTMENT_AMOUNT);
    engine_debug('AUTOMATIC_FLAG    :='|| l_dets.AUTOMATIC_FLAG);
    engine_debug('APPLIED_FLAG      :='|| l_dets.APPLIED_FLAG);
    engine_debug('PRICING_GROUP_SEQUENCE :='|| l_dets.PRICING_GROUP_SEQUENCE);
    engine_debug('CREATED_FROM_LIST_TYPE_CODE:='||l_dets.CREATED_FROM_LIST_TYPE_CODE);
    engine_debug('PRICE_BREAK_TYPE_CODE :='|| l_dets.PRICE_BREAK_TYPE_CODE);
    engine_debug('OVERRIDE_FLAG   :='|| l_dets.override_flag);
    engine_debug('PRINT_ON_INVOICE_FLAG :='||l_dets.print_on_invoice_flag);
    engine_debug('PRICING_PHASE_ID :='|| l_dets.PRICING_PHASE_ID);
    engine_debug('OPERAND_CALCULATION_CODE :='|| l_dets.OPERAND_CALCULATION_CODE);
    engine_debug('OPERAND_VALUE :='|| l_dets.OPERAND_VALUE);
    engine_debug('STATUS_CODE:='||l_dets.PRICING_STATUS_CODE);
    engine_debug('STATUS_TEXT:='||substr(l_dets.PRICING_STATUS_TEXT,1,240));
    engine_debug('SUBSTITUTION_ATTRIBUTE:='||l_dets.SUBSTITUTION_ATTRIBUTE);
    engine_debug('ACCRUAL_FLAG:='||l_dets.ACCRUAL_FLAG);
    engine_debug('LIST_LINE_NO:='||l_dets.LIST_LINE_NO);
    engine_debug('ESTIM_GL_VALUE:='||l_dets.ESTIM_GL_VALUE);
    engine_debug('ACCRUAL_CONVERSION_RATE:='||l_dets.ACCRUAL_CONVERSION_RATE);
    END IF;
           --Pass throuh components
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('OVERRIDE_FLAG:='|| l_dets.OVERRIDE_FLAG);
    engine_debug('INVENTORY_ITEM_ID:='||l_dets.INVENTORY_ITEM_ID);
    engine_debug('ORGANIZATION_ID:='||l_dets.ORGANIZATION_ID);
    engine_debug('RELATED_ITEM_ID:='|| l_dets.RELATED_ITEM_ID);
    engine_debug('RELATIONSHIP_TYPE_ID:='||l_dets.RELATIONSHIP_TYPE_ID);
    engine_debug('ESTIM_ACCRUAL_RATE:='||l_dets.ESTIM_ACCRUAL_RATE);
    engine_debug('EXPIRATION_DATE:='||l_dets.EXPIRATION_DATE);
    engine_debug('BENEFIT_PRICE_LIST_LINE_ID:='||l_dets.BENEFIT_PRICE_LIST_LINE_ID);
    engine_debug('RECURRING_FLAG:='|| l_dets.RECURRING_FLAG);
    engine_debug('BENEFIT_LIMIT:='|| l_dets.BENEFIT_LIMIT);
    engine_debug('CHARGE_TYPE_CODE:='||  l_dets.CHARGE_TYPE_CODE);
    engine_debug('CHARGE_SUBTYPE_CODE:='||l_dets.CHARGE_SUBTYPE_CODE);
    engine_debug('BENEFIT_QTY:='||l_dets.BENEFIT_QTY);
    engine_debug('BENEFIT_UOM_CODE:='||l_dets.BENEFIT_UOM_CODE);
    engine_debug('PRORATION_TYPE_CODE:='||l_dets.PRORATION_TYPE_CODE);
    engine_debug('INCLUDE_ON_RETURNS_FLAG :='|| l_dets.INCLUDE_ON_RETURNS_FLAG);
    engine_debug('MODIFIER_LEVEL_CODE :='|| l_dets.MODIFIER_LEVEL_CODE);
    engine_debug('GROUP VALUE :='|| l_dets.GROUP_QUANTITY);
    engine_debug('LIMIT_CODE :='|| l_dets.LIMIT_CODE);
    engine_debug('LIMIT_TEXT :='|| substr(l_dets.LIMIT_TEXT,1,240));
    engine_debug('CHANGE_REASON_CODE :='|| l_dets.CHANGE_REASON_CODE);
    engine_debug('CHANGE_REASON_TEXT :='|| substr(l_dets.CHANGE_REASON_TEXT,1,240));
    engine_debug('BREAK_UOM_CODE :='|| l_dets.BREAK_UOM_CODE); /* proration */
    engine_debug('BREAK_UOM_CONTEXT :='|| l_dets.BREAK_UOM_CONTEXT); /* proration */
    engine_debug('BREAK_UOM_ATTRIBUTE :='|| l_dets.BREAK_UOM_ATTRIBUTE); /* proration */

    END IF;
  --I:=I+1;
  END LOOP;
I:=1;

--Populate Qualifier detail
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('----Before populate x_qual_tbl-----');
  END IF;
  FOR l_qual IN l_int_qual_cur(G_DETAIL_LEVEL) LOOP
    x_line_detail_qual_tbl(I).LINE_DETAIL_INDEX := l_qual.LINE_DETAIL_INDEX;
    x_line_detail_qual_tbl(I).QUALIFIER_CONTEXT := l_qual.CONTEXT;
    x_line_detail_qual_tbl(I).QUALIFIER_ATTRIBUTE := l_qual.ATTRIBUTE;
    x_line_detail_qual_tbl(I).QUALIFIER_ATTR_VALUE_FROM := l_qual.SETUP_VALUE_FROM;
    x_line_detail_qual_tbl(I).QUALIFIER_ATTR_VALUE_TO := l_qual.SETUP_VALUE_TO;
    x_line_detail_qual_tbl(I).COMPARISON_OPERATOR_CODE := l_qual.COMPARISON_OPERATOR_TYPE_CODE;
    x_line_detail_qual_tbl(I).status_code := l_qual.PRICING_STATUS_CODE;
    x_line_detail_qual_tbl(I).VALIDATED_FLAG :=l_qual.VALIDATED_FLAG;

  I:=I+1;
  END LOOP;
  I:=1;

--LINE ATTRIBUTE DETAIL NEEDED
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('----Before populate attr_tbl-----');
  END IF;
 FOR l_prc IN l_int_pricing_attr_cur LOOP
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('--------populating x_line_detail_attr----------');
    engine_debug('Line Detail Index: '||l_prc.LINE_DETAIL_INDEX);
    END IF;
    x_line_detail_attr_tbl(I).LINE_DETAIL_INDEX := l_prc.LINE_DETAIL_INDEX;
    x_line_detail_attr_tbl(I).PRICING_CONTEXT := l_prc.PRICING_CONTEXT;
    x_line_detail_attr_tbl(I).PRICING_ATTRIBUTE := l_prc.PRICING_ATTRIBUTE;
    x_line_detail_attr_tbl(I).PRICING_ATTR_VALUE_FROM :=l_prc.PRICING_ATTR_VALUE_FROM;
    x_line_detail_attr_tbl(I).PRICING_ATTR_VALUE_TO :=l_prc.PRICING_ATTR_VALUE_TO;
    x_line_detail_attr_tbl(I).VALIDATED_FLAG :=l_prc.VALIDATED_FLAG;
    --x_line_attr_tbl(I).PRICING_STATUS_CODE := l_prc.PRICING_STATUS_CODE;
    --x_line_attr_tbl(I).PRICING_STATUS_TEXT := l_prc.PRICING_STATUS_TEXT;
  I:=I+1;
  END LOOP;

  I:=1;

  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('----Before populate l_rltd_lines_tbl-----');
  END IF;
  FOR l_rltd IN l_int_rltd_lines_cur LOOP
     x_related_lines_tbl(I).LINE_INDEX := l_rltd.Line_index;
     x_related_lines_tbl(I).LINE_DETAIL_INDEX :=  l_rltd.LINE_DETAIL_INDEX;
     x_related_lines_tbl(I).RELATIONSHIP_TYPE_CODE :=l_rltd.RELATIONSHIP_TYPE_CODE;
     x_related_lines_tbl(I).RELATED_LINE_INDEX     :=l_rltd.RELATED_LINE_INDEX;
     x_related_lines_tbl(I).RELATED_LINE_DETAIL_INDEX :=l_rltd.RELATED_LINE_DETAIL_INDEX;
     x_related_lines_tbl(I).STATUS_CODE :=l_rltd.PRICING_STATUS_CODE;
     x_related_lines_tbl(I).STATUS_TEXT :=l_rltd.PRICING_STATUS_TEXT;
  I:=I+1;
  END LOOP;
END IF;

EXCEPTION
WHEN E_ROUTINE_ERROR THEN
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug(l_routine||':'||substr(l_status_text,1,240));
   END IF;

END;

PROCEDURE Eliminate_Multiple_Hierarchies(p_pricing_phase_id NUMBER,
                                         x_status_code OUT NOCOPY VARCHAR2,
                                         x_status_text OUT NOCOPY VARCHAR2) AS

/*
INDX,QP_PREQ_GRP.eliminate_multiple_hierarchies.l_get_multiple_exclude_cur,qp_npreq_line_attrs_tmp_N5,PRICING_PHASE_ID,1
INDX,QP_PREQ_GRP.eliminate_multiple_hierarchies.l_get_multiple_exclude_cur,qp_npreq_line_attrs_tmp_N5,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.eliminate_multiple_hierarchies.l_get_multiple_exclude_cur,qp_npreq_line_attrs_tmp_N5,PRICING_STATUS_CODE,3
INDX,QP_PREQ_GRP.eliminate_multiple_hierarchies.l_get_multiple_exclude_cur,qp_npreq_line_attrs_tmp_N5,LINE_INDEX,4
INDX,QP_PREQ_GRP.eliminate_multiple_hierarchies.l_get_multiple_exclude_cur,qp_npreq_line_attrs_tmp_N5,COMPARISON_OPERATOR_CODE,5

INDX,QP_PREQ_GRP.eliminate_multiple_hierarchies.l_get_multiple_exclude_cur,qp_npreq_ldets_tmp_U1,LINE_DETAIL_INDEX,1

*/

--Pricing Phase Change
CURSOR l_get_multiple_exclude_cur IS
SELECT /*+ ORDERED USE_NL(b) index(a qp_preq_line_attrs_tmp_N5) l_get_multiple_exclude_cur */
       distinct a.line_index , a.list_header_id , a.list_line_id , a.grouping_number grouping_no,
       a.context , a.attribute , a.setup_value_from
FROM   qp_npreq_line_attrs_tmp a , qp_npreq_ldets_tmp b
WHERE
       a.comparison_operator_type_code = 'NOT ='
AND    a.attribute_type IN (G_PRICING_TYPE,G_QUALIFIER_TYPE)
AND    a.pricing_status_code = G_STATUS_NEW
AND    a.pricing_phase_id = p_pricing_phase_id
AND    a.line_index > 0
AND    a.line_detail_index = b.line_detail_index
AND    b.pricing_status_code = G_STATUS_NEW
order  by a.line_index,a.list_header_id,a.list_line_id, a.grouping_number;

/*
INDX,QP_PREQ_GRP.eliminate_multiple_hierarchies.l_get_passed_hierarchy_cur,qp_npreq_line_attrs_tmp_N2,line_index,1
INDX,QP_PREQ_GRP.eliminate_multiple_hierarchies.l_get_passed_hierarchy_cur,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.eliminate_multiple_hierarchies.l_get_passed_hierarchy_cur,qp_npreq_line_attrs_tmp_N2,context,3
INDX,QP_PREQ_GRP.eliminate_multiple_hierarchies.l_get_passed_hierarchy_cur,qp_npreq_line_attrs_tmp_N2,attribute,4
INDX,QP_PREQ_GRP.eliminate_multiple_hierarchies.l_get_passed_hierarchy_cur,qp_npreq_line_attrs_tmp_N2,LINE_INDEX,5
INDX,QP_PREQ_GRP.eliminate_multiple_hierarchies.l_get_passed_hierarchy_cur,qp_npreq_line_attrs_tmp_N2,value_from,6
*/
CURSOR l_get_passed_hierarchy_cur(p_line_index NUMBER,
                                  p_context   VARCHAR2,
                                  p_attribute VARCHAR2,
                                  p_value     VARCHAR2) IS
SELECT value_from
FROM   qp_npreq_line_attrs_tmp
WHERE  context = p_context
AND    attribute = p_attribute
AND    value_from = p_value
AND    line_index = p_line_index
AND    attribute_type IN (G_PRICING_TYPE,G_QUALIFIER_TYPE )
AND    pricing_status_code = G_STATUS_UNCHANGED;

l_del_list_line_tbl    NUMBER_TYPE;
l_del_list_header_tbl  NUMBER_TYPE;
l_del_line_index_tbl   NUMBER_TYPE;
l_del_ind              PLS_INTEGER := 0;
l_list_line_index      NUMBER := -9999;
l_list_line_id         NUMBER := -9999;
l_list_header_id       NUMBER := -9999;
l_list_attr_type       VARCHAR2(30) := 'NULL';
l_grouping_no          NUMBER := -9999999999999;
l_setup_context        VARCHAR2(240);
l_setup_attribute      VARCHAR2(240);
l_setup_value_from     VARCHAR2(240);
l_passed_value_from    VARCHAR2(240);
l_deleted_flag         BOOLEAN := FALSE;
l_status_code          VARCHAR2(30);
l_status_text          VARCHAR2(240);
l_routine              CONSTANT VARCHAR2(240) := 'QP_PREQ_GRP.Eliminate_Multiple_Hierarchies';

E_ROUTINE_ERRORS        EXCEPTION;

BEGIN
 qp_debug_util.tstart('Eliminate_Multiple_Hierarchies','Procedure Eliminate_Multiple_Hierarchies');
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
 engine_debug('In procedure Eliminate_Multiple_Hierarchies');

 END IF;
 FOR i IN l_get_multiple_exclude_cur
 LOOP

  IF (l_list_line_index <> i.line_index or l_list_line_id <> i.list_line_id or l_grouping_no <> i.grouping_no or
	    l_deleted_flag = FALSE) THEN

   l_passed_value_from := NULL; -- Init
   l_deleted_flag := FALSE;

   --l_setup_context := i.context;
   --l_setup_attribute := i.attribute;
   --l_setup_value_from := i.setup_value_from;

   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('EMH Context:' || i.context || ' EMH Attribute:' || i.attribute || ' EMH Passed Value : '||i.setup_value_from);
   engine_debug('EMH Excluded Passed Value From Setup: ' || i.setup_value_from);

   END IF;
   OPEN  l_get_passed_hierarchy_cur(i.line_index,i.context,i.attribute,i.setup_value_from);
   FETCH l_get_passed_hierarchy_cur INTO l_passed_value_from;
   CLOSE l_get_passed_hierarchy_cur;

   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('EMH Excluded Passed Value From Sourcing: ' || l_passed_value_from);

   END IF;
   IF (l_passed_value_from IS NOT NULL) THEN
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('EMH Deleted Flag is True');
    END IF;
    l_del_ind := l_del_ind + 1;
    l_del_list_line_tbl(l_del_ind) := i.list_line_id;
    l_del_list_header_tbl(l_del_ind) := i.list_header_id;
    l_del_line_index_tbl(l_del_ind) := i.line_index;
    l_deleted_flag := TRUE;
   END IF;

  END IF;

  l_list_line_index := i.line_index;
  l_list_line_id := i.list_line_id;
  l_list_header_id := i.list_header_id;
  l_grouping_no := i.grouping_no;

 END LOOP;

 -- Delete the multiple hierarchies
 IF (l_del_list_line_tbl.COUNT > 0) THEN
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('Actually Deleting');
  END IF;
  FORALL j IN l_del_list_line_tbl.FIRST .. l_del_list_line_tbl.LAST
/*
INDX,QP_PREQ_GRP.eliminate_multiple_hierarchies.upd1,qp_npreq_line_attrs_tmp_N1,LINE_INDEX,1
INDX,QP_PREQ_GRP.eliminate_multiple_hierarchies.upd1,qp_npreq_line_attrs_tmp_N1,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.eliminate_multiple_hierarchies.upd1,qp_npreq_line_attrs_tmp_N1,PRICING_STATUS_CODE,3
INDX,QP_PREQ_GRP.eliminate_multiple_hierarchies.upd1,qp_npreq_line_attrs_tmp_N1,LIST_HEADER_ID,4
INDX,QP_PREQ_GRP.eliminate_multiple_hierarchies.upd1,qp_npreq_line_attrs_tmp_N1,LIST_LINE_ID,5
*/
  UPDATE qp_npreq_line_attrs_tmp --upd1
  SET    pricing_status_code = G_DELETED_EXCLUDER
  WHERE  list_header_id = l_del_list_header_tbl(j)
  AND    list_line_id = l_del_list_line_tbl(j)
  AND    line_index = l_del_line_index_tbl(j)
  AND    comparison_operator_type_code = 'NOT ='
  AND    pricing_status_code = G_STATUS_NEW -- Expect an issue because of this join condition
  AND    attribute_type IN (G_PRICING_TYPE,G_QUALIFIER_TYPE);

  /* FORALL j IN l_del_list_line_tbl.FIRST .. l_del_list_line_tbl.LAST
  UPDATE qp_npreq_ldets_tmp
  SET    pricing_status_code = G_DELETED_EXCLUDER
  WHERE  created_from_list_header_id = l_del_list_header_tbl(j)
  AND    created_from_list_line_id = l_del_list_line_tbl(j)
  AND    line_index = l_del_line_index_tbl(j)
  AND    pricing_phase_id = p_pricing_phase_id; */
 END IF;

 -- shu fix bug 1915355
 -- To delete duplicate list lines selected by ask for and regular cursors
 IF (p_pricing_phase_id <> G_PRICE_LIST_PHASE_ID) THEN
  Delete_Duplicate_List_Lines(p_pricing_phase_id,l_status_code,l_status_text);
  IF (l_status_code = FND_API.G_RET_STS_ERROR) THEN
   RAISE E_ROUTINE_ERRORS;
  END IF;
 END IF;
qp_debug_util.tstop('Eliminate_Multiple_Hierarchies');
EXCEPTION
  WHEN E_ROUTINE_ERRORS THEN
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug(l_routine||': '||l_status_text);
   END IF;
   x_status_code := FND_API.G_RET_STS_ERROR;
   x_status_text := l_routine||': '||l_status_text;
   qp_debug_util.tstop('Eliminate_Multiple_Hierarchies');
  WHEN OTHERS THEN
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug(l_routine||' '||SQLERRM);
   END IF;
   x_status_code := FND_API.G_RET_STS_ERROR;
   x_status_text := 'Error in '||l_routine||SQLERRM;
   qp_debug_util.tstop('Eliminate_Multiple_Hierarchies');
END Eliminate_Multiple_Hierarchies;

/*+--------------------------------------------------------
  |PROCEDURE PROCESS_LINE_GROUP
  |This procedure sum OUT quantity/amt
  |across all lines that have same product context,attribute,value
  |, pricing context,attribute and have list_line which is
  |line group.  The output on the sum will be populated
  |either on GROUP_QUANTITY or qualifier_amt column
  |of qp_npreq_lines_tmp.
  +--------------------------------------------------------
*/

PROCEDURE PROCESS_LINE_GROUP(p_pricing_phase_id NUMBER,
                           x_status_code OUT NOCOPY VARCHAR2,
                           x_status_text OUT NOCOPY VARCHAR2) AS
/*
-- Might need a new index with pricing_phase_id
*/

l_routine VARCHAR2(30) := 'Process_Line_Group';

CURSOR line_grp_cur  IS
select  /*+ ORDERED USE_NL(c a ) index(a qp_pricing_attributes_n2) line_grp_cur */
b.created_from_list_line_id list_line_id , c.context , c.attribute ,
 sum(qp_number.canonical_to_number(c.value_from)) group_value
from
 qp_npreq_ldets_tmp b , qp_npreq_line_attrs_tmp c , qp_pricing_attributes a
where
    b.modifier_level_code  = G_LINE_GROUP
and b.pricing_phase_id = p_pricing_phase_id
and c.pricing_status_code = G_STATUS_UNCHANGED
and c.context = G_PRIC_VOLUME_CONTEXT
and c.attribute_type = G_PRICING_TYPE
and b.line_index = c.line_index
and b.pricing_status_code = G_STATUS_NEW
and a.list_line_id = b.created_from_list_line_id
and a.pricing_attribute_context = G_PRIC_VOLUME_CONTEXT
and a.pricing_attribute = c.attribute
group by b.created_from_list_line_id , c.context , c.attribute;

/*select  c.list_line_id list_line_id , c.context , c.attribute ,
 sum(qp_number.canonical_to_number(c.value_from)) group_value
from
 qp_npreq_line_attrs_tmp c
where
    c.modifier_level_code  = G_LINE_GROUP
and c.pricing_phase_id = p_pricing_phase_id
and c.pricing_status_code = G_STATUS_NEW
and c.context = G_PRIC_VOLUME_CONTEXT
and c.attribute_type = G_PRICING_TYPE
and c.pricing_status_code = G_STATUS_NEW
group by c.list_line_id , c.context , c.attribute ; */

--begin 2388011, grp_pbh_amt
CURSOR l_get_list_price_cur(p_list_line_id NUMBER) IS
   SELECT a.LINE_INDEX ,a.UNIT_PRICE
   FROM   qp_npreq_lines_tmp a,qp_npreq_ldets_tmp b
   WHERE  a.LINE_INDEX  = b.LINE_INDEX
   AND    b.CREATED_FROM_LIST_LINE_ID = p_list_line_id;
--end 2388011, grp_pbh_amt

l_GROUP_QUANTITY NUMBER;
l_GROUP_AMOUNT   NUMBER;
l_dummy          VARCHAR2(1);

-- begin shu,  2388011, grp_pbh_amt
l_list_price     NUMBER;
l_group_amount_per_unit NUMBER;
G_LINE_INDEX_TBL_G             PLS_INTEGER_TYPE;
G_UNIT_PRICE_TBL_G             NUMBER_TYPE;
G_GROUP_AMOUNT_PER_UNIT_TBL_G  NUMBER_TYPE;
nROWS CONSTANT NUMBER := 1000;
-- end shu,  2388011, grp_pbh_amt


BEGIN

--If no data has LINE_GROUP Modifier
--don't bother to proceed

IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
engine_debug('Starting process linegroup');

END IF;
FOR J IN line_grp_cur LOOP

  IF J.attribute = G_QUANTITY_ATTRIBUTE THEN
      l_group_quantity := J.group_value;
      l_group_amount   := NULL;
  ELSE
      l_group_amount   := J.group_value;
      l_group_quantity := NULL;
  END IF;

  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('J.context : '||J.context);
  engine_debug('J.product_attribute : '||J.attribute);
  engine_debug('J.value_from : '||J.group_value);
  engine_debug('l_GROUP_QUANTITY: '||l_group_quantity);
  engine_debug('l_GROUP_AMOUNT: '  ||l_group_amount);
  engine_debug('List Line Id: '  ||j.list_line_id);

  END IF;
 IF (j.attribute = G_QUANTITY_ATTRIBUTE) THEN

  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('Updating Quantity Attribute');

  END IF;

/*
INDX,QP_PREQ_GRP.process_line_group.upd1,-No Index Used-,NA,NA
*/
  /*UPDATE qp_npreq_line_attrs_tmp --upd1
  SET GROUP_QUANTITY = l_group_quantity
  WHERE LIST_LINE_ID = j.list_line_id;*/

/*
INDX,QP_PREQ_GRP.process_line_group.upd2,-No Index Used-,NA,NA
*/
  UPDATE qp_npreq_ldets_tmp --upd2
  SET LINE_QUANTITY = l_group_quantity,  -- 2388011_latest, shu fix pbh_grp_amt
  GROUP_QUANTITY = l_group_quantity,  -- 2388011_latest, shu fix pbh_grp_amt
  SELECTED_VOLUME_ATTR = G_QUANTITY -- 2388011_latest
  WHERE CREATED_FROM_LIST_LINE_ID = j.list_line_id;

 ELSE
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('Updating Amount Attribute');
  END IF;

   -- begin shu, fix group of lines lumpsum based on ITEM_AMOUNT, 2388011

  OPEN l_get_list_price_cur(j.list_line_id);

  LOOP
    G_LINE_INDEX_TBL_G.delete;
    G_UNIT_PRICE_TBL_G.delete;

  FETCH l_get_list_price_cur BULK COLLECT INTO
     G_LINE_INDEX_TBL_G
   , G_UNIT_PRICE_TBL_G LIMIT nROWS;
  EXIT WHEN G_LINE_INDEX_TBL_G.COUNT = 0;

   IF (G_LINE_INDEX_TBL_G.COUNT > 0) THEN
    FOR I in G_LINE_INDEX_TBL_G.FIRST .. G_LINE_INDEX_TBL_G.LAST
    LOOP
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('Line Index : '  ||g_line_index_tbl_g(I));
     engine_debug('Unit Price : '  ||g_unit_price_tbl_g(I));
   END IF; -- 4033618
     IF (G_UNIT_PRICE_TBL_G(I) IS NOT NULL and G_UNIT_PRICE_TBL_G(I) <> 0) THEN -- avoid division by zero
        G_GROUP_AMOUNT_PER_UNIT_TBL_G(I) := l_group_amount/G_UNIT_PRICE_TBL_G(I);
     ELSE
        IF (G_UNIT_PRICE_TBL_G(I) = 0 ) THEN
         G_GROUP_AMOUNT_PER_UNIT_TBL_G(I):= 0;
        ELSE -- unit price is NULL
         G_GROUP_AMOUNT_PER_UNIT_TBL_G(I) :=l_group_amount; -- ASK RAVI? why not 0
        END IF;
     END IF;
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('Group Amount Per Unit: '  ||g_group_amount_per_unit_tbl_g(I));
   END IF; -- 4033618
    END LOOP;
   END IF;

/*
INDX,QP_PREQ_GRP11.process_line_group.upd4,-No Index Used-,NA,NA
*/
   IF (G_LINE_INDEX_TBL_G.COUNT > 0) THEN
    FORALL I IN G_LINE_INDEX_TBL_G.FIRST .. G_LINE_INDEX_TBL_G.LAST
     UPDATE qp_npreq_ldets_tmp --upd4
     SET GROUP_AMOUNT = G_GROUP_AMOUNT_PER_UNIT_TBL_G(I),
        LINE_QUANTITY = l_group_amount, -- 2388011_latest
        SELECTED_VOLUME_ATTR = G_AMOUNT -- 2388011_latest
     WHERE CREATED_FROM_LIST_LINE_ID = j.list_line_id
     AND   LINE_INDEX = G_LINE_INDEX_TBL_G(I);
   END IF;

  END LOOP;
  CLOSE l_get_list_price_cur;
 END IF;

END LOOP;

IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
engine_debug('End process line group');

END IF;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('No line group data');
  engine_debug('End process line group');
  END IF;
  RETURN;
 WHEN OTHERS THEN
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug(l_routine||' '||SQLERRM);
   END IF;
   x_status_code := FND_API.G_RET_STS_ERROR;
   x_status_text := l_routine||': '||SQLERRM;
END PROCESS_LINE_GROUP;

/*+----------------------------------------------------------
  |Is_Line_Group
  +---------------------------------------------------------
*/
FUNCTION Is_Line_Group (p_line_detail_index IN PLS_INTEGER:=NULL,
                        p_line_index        IN NUMBER:=NULL) RETURN BOOLEAN
AS
l_dummy VARCHAR2(30);
l_routine VARCHAR2(240):='QP_PREQ_GRP.Is_Line_Group';
BEGIN

  IF (p_line_detail_index IS NOT NULL) THEN
/*
INDX,QP_PREQ_GRP.is_line_group.is_line_group_sel1,qp_npreq_ldets_tmp_U1,LINE_DETAIL_INDEX,1
*/
     SELECT 'X'
     INTO   l_dummy
     FROM   qp_npreq_ldets_tmp
     WHERE  line_detail_index = p_line_detail_index
     AND    modifier_level_code = G_LINE_GROUP;
  ELSE
/*
INDX,QP_PREQ_GRP.is_line_group.is_line_group_sel2,qp_npreq_ldets_tmp_N1,LINE_INDEX,1
*/
      SELECT 'X'
      INTO   l_dummy
      FROM   qp_npreq_ldets_tmp
      WHERE  line_index = p_line_index
      AND    modifier_level_code = G_LINE_GROUP;
  END IF;

RETURN TRUE;

EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN FALSE;
END Is_Line_Group;

/*+------------------------------------------------------
  |Is_Uom_Match
  |
  +-----------------------------------------------------
*/

Function Is_Uom_Match(p_line_index       IN PLS_INTEGER,
                      p_product_uom_code IN VARCHAR2
                      ) RETURN BOOLEAN
AS

l_dummy VARCHAR2(1);

BEGIN
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('p_line_index : '||p_line_index);
  engine_debug('p_product_uom_code: '||nvl(p_product_uom_code,'Null'));
  END IF;
/*
INDX,QP_PREQ_GRP.is_uom_match.is_uom_match_sel1,qp_npreq_lines_tmp_N1,LINE_INDEX,1
*/
  SELECT 'X'
  INTO l_dummy
  FROM qp_npreq_lines_tmp qplines
  WHERE qplines.LINE_INDEX = p_line_index
  AND   nvl(qplines.PRICED_UOM_CODE,qplines.LINE_UOM_CODE)  =
	   nvl(p_product_uom_code,nvl(qplines.PRICED_UOM_CODE,qplines.LINE_UOM_CODE));

RETURN TRUE;

EXCEPTION
 WHEN NO_DATA_FOUND THEN
 RETURN FALSE;

END;

/*+-----------------------------------------------------------
  |Covert_Uom
  |This procedure will try to convert ordered uom to
  |primary uom.
  +-----------------------------------------------------------
*/

PROCEDURE Convert_Uom(p_order_uom_code      IN  VARCHAR2,
                      p_primary_uom_code IN  VARCHAR2,
                      p_value            IN  NUMBER,
                      x_converted_value  OUT NOCOPY NUMBER,
                      x_status_code      OUT NOCOPY VARCHAR2,
                      x_status_text      OUT NOCOPY VARCHAR2) AS

--l_primary_uom VARCHAR2(3):=NULL;
--l_line_uom_code VARCHAR2(3):=NULL;
E_INVALID_UOM EXCEPTION;
l_item_id     NUMBER := 0;
l_uom_rate    NUMBER;
l_routine VARCHAR2(240):= 'QP_PREQ_GRP.Convert_Uom';
BEGIN

x_status_code := FND_API.G_RET_STS_SUCCESS;

            INV_CONVERT.INV_UM_CONVERSION(p_order_uom_code,
                                          p_primary_uom_code,
                                          l_item_id,
                                          l_uom_rate);

             IF (l_uom_rate >= 0) THEN
              IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
             	engine_debug ('conversion rate: '||l_uom_rate);
              END IF;
               x_converted_value := p_value * l_uom_rate;
             ELSE
               Raise E_INVALID_UOM;
             END IF;


EXCEPTION

  WHEN E_INVALID_UOM THEN
     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('Invalid UOM');
     END IF;
     x_status_code := FND_API.G_RET_STS_ERROR;
     x_status_text := 'Invalid UOM';
  WHEN OTHERS THEN
     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug(l_routine||': '||SQLERRM);
     END IF;
     x_status_code := FND_API.G_RET_STS_ERROR;
     x_status_text := l_routine||': '||SQLERRM;
END Convert_Uom;

/*+----------------------------------------------------------
  |Update_Request_Line_Status(For request lines that have price list passed)
  +----------------------------------------------------------
*/
PROCEDURE Update_Request_Line_Status(p_control_rec  CONTROL_RECORD_TYPE,
                                     p_status_code  VARCHAR2,
                                     p_freeze_override_flag IN VARCHAR2, --[julin/4708044]
                                     x_status_code OUT NOCOPY VARCHAR2,
                                     x_status_text OUT NOCOPY VARCHAR2) AS

l_routine VARCHAR2(240):='Routine:QP_PREQ_GRP.Update_Request_Line_Status';
l_rounding_factor NUMBER:= NULL;

BEGIN
qp_debug_util.tstart('UPDATE_REQUEST_LINE_STATUS','Procedure UPDATE_REQUEST_LINE_STATUS');
 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
 engine_debug('In Update Request Line Status : ' || p_status_code);
 END IF;

/*  --po integration start
  UPDATE qp_npreq_lines_tmp a
  SET    pricing_status_code = G_STATUS_UPDATED
  Where    list_price_override_flag in ('Y', 'O')  --po integration
  AND   line_type_code <> G_ORDER_LEVEL;
  --po integration end
*/


 IF (p_status_code = 'SUCCESS') THEN
/*
INDX,QP_PREQ_GRP.update_request_line_status.update_request_line_status_upd1,-No Index Used-,NA,NA
*/
/*
INDX,QP_PREQ_GRP.update_request_line_status.sel1,qp_npreq_ldets_tmp_N1,LINE_INDEX,1
INDX,QP_PREQ_GRP.update_request_line_status.sel1,qp_npreq_ldets_tmp_N1,PRICING_STATUS_CODE,2
INDX,QP_PREQ_GRP.update_request_line_status.sel1,qp_npreq_ldets_tmp_N1,PRICING_PHASE_ID,3
*/

  UPDATE qp_npreq_lines_tmp a
  SET    pricing_status_code = G_STATUS_UPDATED
        ,processed_code = NULL -- bug 3501150
  WHERE  EXISTS (SELECT 'x'
  		from qp_npreq_ldets_tmp b
                WHERE a.line_index = b.line_index
                AND   b.pricing_status_code = G_STATUS_NEW
  		AND   b.pricing_phase_id = G_PRICE_LIST_PHASE_ID)
  AND   line_type_code <> G_ORDER_LEVEL;

  -- To make sure lines which did not get the price and do not have a record in qp_npreq_ldets_tmp get picked up
  UPDATE qp_npreq_lines_tmp a
  SET    processed_code = G_STS_LHS_NOT_FOUND
  WHERE  NOT EXISTS (SELECT 'x'
                FROM   qp_npreq_ldets_tmp b
                WHERE a.line_index = b.line_index
                AND   b.pricing_status_code = G_STATUS_NEW
                AND   b.pricing_phase_id = G_PRICE_LIST_PHASE_ID)
  AND   line_type_code <> G_ORDER_LEVEL
  AND   list_price_override_flag = 'N' --po integration
  AND   pricing_status_code NOT IN (G_STATUS_DUP_PRICE_LIST,G_STATUS_INVALID_UOM_CONV)
  AND  (price_flag = G_YES OR --[julin/4708044]
        (price_flag = G_PHASE AND p_freeze_override_flag = G_YES));


  /* --IF (nvl(p_control_rec.rounding_flag,G_YES) = G_YES) THEN
  -- need rounding_factor when 'Y', 'Q', 'U'
  IF (nvl(p_control_rec.rounding_flag,G_YES) <> 'N') THEN -- shu new rounding

        DECLARE

        	CURSOR tmp_data IS
		SELECT rounding_factor FROM qp_npreq_lines_tmp;
        BEGIN

  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
		engine_debug ('G_MCURR_PROFILE: '||G_MULTI_CURRENCY_PROFILE);
		engine_debug ('p_control_rec.use_multi_currency: '||p_control_rec.use_multi_currency);
  END IF;
		-- cannot use IF G_MCURR_INSTALLED_USED here, it is null
		IF G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN

                        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                        engine_debug ('get rounding_factor from qp_currency_details table...');
                        END IF;

                        UPDATE qp_npreq_lines_tmp a
   			SET    ROUNDING_FACTOR = (SELECT qcdt.selling_rounding_factor
					FROM qp_currency_details qcdt, qp_list_headers_b qhdr
					WHERE qhdr.list_header_id = a.price_list_header_id
					AND qhdr.currency_header_id = qcdt.currency_header_id
					AND qcdt.to_currency_code = a.currency_code
					AND a.pricing_effective_date BETWEEN
                           		NVL(TRUNC(qcdt.start_date_active),a.pricing_effective_date)
                           		AND NVL(TRUNC(qcdt.end_date_active),a.pricing_effective_date)
                           		AND ROWNUM <2) -- there maybe more than one rows rtrns here
               				WHERE ROUNDING_FACTOR IS NULL;

		ELSE -- multi curr not installed not used, obtain rounding_factor from qp_list_headers_b

   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
			engine_debug('get rounding factor from qp_list_headers_b...');
   END IF;
			UPDATE qp_npreq_lines_tmp a
   			SET    ROUNDING_FACTOR = (SELECT qhdr.rounding_factor
                        	FROM  qp_list_headers_b qhdr
                        	WHERE qhdr.list_header_id = a.price_list_header_id)
                	WHERE ROUNDING_FACTOR IS NULL;

                END IF; -- END IF G_MCURR_INSTALLED_USED = G_YES


                FOR i IN tmp_data LOOP
                 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                	engine_debug ('final rounding_factor ' ||i.rounding_factor);
                 END IF;
		end LOOP;


	EXCEPTION
		WHEN no_data_found THEN
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
			engine_debug ('no_data_found occurred while obtaining rounding_factor');
   END IF;
		WHEN others THEN
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
			engine_debug ('error obtaining_rounding_factor: ' || SQLERRM);
   END IF;
	END; -- end declare
  END IF; -- end p_rounding_flag = 'Y' */

 ELSE

  /*
  INDX,QP_PREQ_GRP.update_request_line_status.sel3,qp_npreq_ldets_tmp_N1,LINE_INDEX,1
  INDX,QP_PREQ_GRP.update_request_line_status.sel3,qp_npreq_ldets_tmp_N1,PRICING_STATUS_CODE,2
  INDX,QP_PREQ_GRP.update_request_line_status.sel3,qp_npreq_ldets_tmp_N1,PRICING_PHASE_ID,3
  */

  UPDATE qp_npreq_lines_tmp a
  SET    processed_code = G_STS_LHS_NOT_FOUND
  WHERE  NOT EXISTS (SELECT 'x'
                FROM   qp_npreq_ldets_tmp b
                WHERE a.line_index = b.line_index
                AND   b.pricing_status_code = G_STATUS_NEW
                AND   b.pricing_phase_id = G_PRICE_LIST_PHASE_ID)
  AND   line_type_code <> G_ORDER_LEVEL
  AND   list_price_override_flag in ( 'N', 'O') --po integration
  AND  (price_flag = G_YES OR --[julin/4708044]
        (price_flag = G_PHASE AND p_freeze_override_flag = G_YES));

 END IF;
qp_debug_util.tstop('UPDATE_REQUEST_LINE_STATUS');
EXCEPTION
 WHEN OTHERS THEN
     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug(l_routine || ' ' || SQLERRM);
     END IF;
     x_status_code := FND_API.G_RET_STS_ERROR;
     x_status_text := l_routine||' '||SQLERRM;
	qp_debug_util.tstop('UPDATE_REQUEST_LINE_STATUS');
END Update_Request_Line_Status;

/*+----------------------------------------------------------
  |Evaluate_Between
  +----------------------------------------------------------
*/
-- Pricing Phase Change
PROCEDURE Evaluate_Between (p_pricing_phase_id IN PLS_INTEGER,
                            p_line_group_flag IN VARCHAR2 :=NULL,
                            p_line_index IN NUMBER := NULL,
                            x_status_code OUT NOCOPY VARCHAR2,
                            x_status_text OUT NOCOPY VARCHAR2) AS


/*
INDX,QP_PREQ_GRP.Evaluate_Between.l_pric_between_cur,qp_npreq_line_attrs_tmp_N5,PRICING_PHASE_ID,1
INDX,QP_PREQ_GRP.Evaluate_Between.l_pric_between_cur,qp_npreq_line_attrs_tmp_N5,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.Evaluate_Between.l_pric_between_cur,qp_npreq_line_attrs_tmp_N5,PRICING_STATUS_CODE,3
INDX,QP_PREQ_GRP.Evaluate_Between.l_pric_between_cur,qp_npreq_line_attrs_tmp_N5,LINE_INDEX,4
INDX,QP_PREQ_GRP.Evaluate_Between.l_pric_between_cur,qp_npreq_line_attrs_tmp_N5,COMPARISON_OPERATOR_CODE,5
INDX,QP_PREQ_GRP.Evaluate_Between.l_pric_between_cur,qp_npreq_line_attrs_tmp_N5,DATATYPE,6

INDX,QP_PREQ_GRP.Evaluate_Between.l_pric_between_cur,qp_npreq_ldets_tmp_U1,LINE_DETAIL_INDEX,1

*/

CURSOR l_pric_between_cur(p_datatype VARCHAR2) IS
SELECT /*+ ORDERED USE_NL(ldets) index(pricing qp_preq_line_attrs_tmp_N5) l_pric_between_cur */
          pricing.line_detail_index,
	  pricing.line_index,
	  pricing.value_from,
          -- line group not applicable for price lists.ignore any code around line group for price lists
	  pricing.group_quantity,
	  pricing.group_amount,
	  pricing.setup_value_from,
	  pricing.setup_value_to,
	  pricing.product_uom_code,
	  pricing.attribute,
	  pricing.context,
          pricing.attribute_type
FROM  qp_npreq_line_attrs_tmp pricing,qp_npreq_ldets_tmp ldets
WHERE pricing.comparison_operator_type_code = G_OPERATOR_BETWEEN
AND   pricing.datatype = p_datatype
AND   pricing.pricing_phase_id = G_PRICE_LIST_PHASE_ID
AND   pricing.attribute_type IN (G_PRICING_TYPE,G_QUALIFIER_TYPE)
AND   pricing.pricing_status_code IN (G_STATUS_UNCHANGED,  G_STATUS_NEW)
AND   pricing.line_index > 0
AND   pricing.line_detail_index = ldets.line_detail_index
AND   ldets.pricing_status_code = G_STATUS_NEW
FOR UPDATE of pricing.pricing_status_code;

/*
INDX,QP_PREQ_GRP.Evaluate_Between.l_mod_between_cur,qp_npreq_line_attrs_tmp_N5,PRICING_PHASE_ID,1
INDX,QP_PREQ_GRP.Evaluate_Between.l_mod_between_cur,qp_npreq_line_attrs_tmp_N5,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.Evaluate_Between.l_mod_between_cur,qp_npreq_line_attrs_tmp_N5,PRICING_STATUS_CODE,3
INDX,QP_PREQ_GRP.Evaluate_Between.l_mod_between_cur,qp_npreq_line_attrs_tmp_N5,LINE_INDEX,4
INDX,QP_PREQ_GRP.Evaluate_Between.l_mod_between_cur,qp_npreq_line_attrs_tmp_N5,COMPARISON_OPERATOR_CODE,5
INDX,QP_PREQ_GRP.Evaluate_Between.l_mod_between_cur,qp_npreq_line_attrs_tmp_N5,DATATYPE,6

INDX,QP_PREQ_GRP.Evaluate_Between.l_pric_between_cur,qp_npreq_ldets_tmp_U1,LINE_DETAIL_INDEX,1

*/

CURSOR l_mod_between_cur(p_datatype VARCHAR2) IS
SELECT /*+ ORDERED USE_NL(ldets) index(pricing qp_preq_line_attrs_tmp_N5) l_mod_between_cur */
          pricing.line_detail_index,
	  pricing.line_index,
	  pricing.value_from,
	  ldets.group_quantity,
	  ldets.line_quantity group_amount,
	  pricing.setup_value_from,
	  pricing.setup_value_to,
	  pricing.product_uom_code,
	  pricing.attribute,
	  pricing.context,
          pricing.attribute_type
FROM  qp_npreq_line_attrs_tmp pricing,qp_npreq_ldets_tmp ldets
WHERE pricing.comparison_operator_type_code = G_OPERATOR_BETWEEN
AND   pricing.datatype = p_datatype
AND   pricing.pricing_phase_id = p_pricing_phase_id
AND   pricing.attribute_type = G_PRICING_TYPE
AND   pricing.pricing_status_code IN (G_STATUS_UNCHANGED,  G_STATUS_NEW)
AND   pricing.line_index > 0
AND   pricing.line_detail_index = ldets.line_detail_index
AND   ldets.pricing_status_code = G_STATUS_NEW
FOR UPDATE of pricing.pricing_status_code;

/*
INDX,QP_PREQ_GRP.Evaluate_Between.l_pric_character_between_cur,qp_npreq_line_attrs_tmp_N5,PRICING_PHASE_ID,1
INDX,QP_PREQ_GRP.Evaluate_Between.l_pric_character_between_cur,qp_npreq_line_attrs_tmp_N5,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.Evaluate_Between.l_pric_character_between_cur,qp_npreq_line_attrs_tmp_N5,PRICING_STATUS_CODE,3
INDX,QP_PREQ_GRP.Evaluate_Between.l_pric_character_between_cur,qp_npreq_line_attrs_tmp_N5,LINE_INDEX,4
INDX,QP_PREQ_GRP.Evaluate_Between.l_pric_character_between_cur,qp_npreq_line_attrs_tmp_N5,COMPARISON_OPERATOR_CODE,5
INDX,QP_PREQ_GRP.Evaluate_Between.l_pric_character_between_cur,qp_npreq_line_attrs_tmp_N5,DATATYPE,6

INDX,QP_PREQ_GRP.Evaluate_Between.l_pric_character_between_cur,qp_npreq_ldets_tmp_U1,LINE_DETAIL_INDEX,1

*/

CURSOR l_pric_character_between_cur IS
SELECT /*+ ORDERED USE_NL(c) index(b qp_preq_line_attrs_tmp_N5) l_pric_character_between_cur */
       b.line_detail_index,
       b.line_index,
       b.value_from,
       b.setup_value_from,
       b.setup_value_to,
       b.product_uom_code,
       b.attribute,
       b.context,
       b.attribute_type
FROM  qp_npreq_line_attrs_tmp b,qp_npreq_ldets_tmp c
WHERE comparison_operator_type_code = G_OPERATOR_BETWEEN
AND   b.pricing_phase_id = G_PRICE_LIST_PHASE_ID
AND   datatype in (G_DATE_X,G_DATE_Y,G_VARCHAR)
AND   attribute_type IN (G_PRICING_TYPE,G_QUALIFIER_TYPE)
AND   b.pricing_status_code IN (G_STATUS_UNCHANGED,G_STATUS_NEW)
AND   b.pricing_phase_id = p_pricing_phase_id
AND   b.line_index > 0
AND   b.line_detail_index = c.line_detail_index
AND   c.pricing_status_code = G_STATUS_NEW
FOR update of b.pricing_status_code;

/*
INDX,QP_PREQ_GRP.Evaluate_Between.l_mod_character_between_cur,qp_npreq_line_attrs_tmp_N5,PRICING_PHASE_ID,1
INDX,QP_PREQ_GRP.Evaluate_Between.l_mod_character_between_cur,qp_npreq_line_attrs_tmp_N5,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.Evaluate_Between.l_mod_character_between_cur,qp_npreq_line_attrs_tmp_N5,PRICING_STATUS_CODE,3
INDX,QP_PREQ_GRP.Evaluate_Between.l_mod_character_between_cur,qp_npreq_line_attrs_tmp_N5,LINE_INDEX,4
INDX,QP_PREQ_GRP.Evaluate_Between.l_mod_character_between_cur,qp_npreq_line_attrs_tmp_N5,COMPARISON_OPERATOR_CODE,5
INDX,QP_PREQ_GRP.Evaluate_Between.l_mod_character_between_cur,qp_npreq_line_attrs_tmp_N5,DATATYPE,6

INDX,QP_PREQ_GRP.Evaluate_Between.l_pric_character_between_cur,qp_npreq_ldets_tmp_U1,LINE_DETAIL_INDEX,1

*/

CURSOR l_mod_character_between_cur IS
SELECT /*+ ORDERED USE_NL(c) index(b qp_preq_line_attrs_tmp_N5) l_mod_character_between_cur */
       b.line_detail_index,
       b.line_index,
       b.value_from,
       b.setup_value_from,
       b.setup_value_to,
       b.product_uom_code,
       b.attribute,
       b.context,
       b.attribute_type
FROM  qp_npreq_line_attrs_tmp b,qp_npreq_ldets_tmp c
WHERE comparison_operator_type_code = G_OPERATOR_BETWEEN
AND   b.pricing_phase_id = p_pricing_phase_id
AND   datatype in (G_DATE_X,G_DATE_Y,G_VARCHAR)
AND   attribute_type = G_PRICING_TYPE
AND   b.pricing_status_code IN (G_STATUS_UNCHANGED,G_STATUS_NEW)
AND   b.pricing_phase_id = p_pricing_phase_id
AND   b.line_index > 0
AND   b.line_detail_index = c.line_detail_index
AND   c.pricing_status_code = G_STATUS_NEW
FOR update of b.pricing_status_code;

--[julin/5085310]
CURSOR l_line_amount_cur(p_line_index NUMBER,
                       p_line_detail_index NUMBER,
                       p_context VARCHAR2,
                       p_attribute VARCHAR2,
                       p_attribute_type VARCHAR2)
IS
SELECT  /*+ ORDERED USE_NL(a) l_line_amount_cur */
       fnd_number.canonical_to_number(c.value_from) group_value,
       a.priced_quantity
FROM   qp_npreq_line_attrs_tmp c, qp_npreq_lines_tmp a
WHERE  a.line_index = p_line_index
AND    a.LINE_INDEX  = c.LINE_INDEX
AND    c.line_detail_index = p_line_detail_index
AND    c.context = p_context
AND    c.attribute_type = p_attribute_type
AND    c.attribute = p_attribute;

l_group_amount		NUMBER;	--shu
l_list_price 		NUMBER;	--shu

l_line_amount           NUMBER;
l_priced_quantity       NUMBER;

l_value_from_date       DATE;
l_setup_value_from_date DATE;
l_setup_value_to_date   DATE;
l_value_from_num        NUMBER;
l_setup_value_from_num  NUMBER;
l_setup_value_to_num    NUMBER;
l_dummy                 VARCHAR2(3);
l_qualifier_qty         NUMBER;
l_qualifier_amt         NUMBER;
l_primary_uom           VARCHAR2(3);
l_item_id               NUMBER;
l_uom_rate              NUMBER;
l_line_uom_code         VARCHAR2(3);
l_status_code           VARCHAR2(30);
l_status_text           VARCHAR2(240);
l_deleted_between       VARCHAR2(1);
l_is_line_group_flag    VARCHAR2(1);
l_line_detail_tbl       NUMBER_TYPE;
l_count                 PLS_INTEGER := 0;
l_selected_volume_attr  VARCHAR2(1); -- 2388011_new

l_routine VARCHAR2(30) := 'Evaluate_Between';
BEGIN
qp_debug_util.tstart('Evaluate_Between','Procedure Evaluate_Between');
                 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
QP_PREQ_GRP.engine_debug('In Evaluate Between' );

                 END IF;
--Evaluate Between operator
IF (p_line_group_flag IS NULL) THEN

  --Character and date between
 IF (p_pricing_phase_id = G_PRICE_LIST_PHASE_ID) THEN
                    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   QP_PREQ_GRP.engine_debug('Before Opening Price List Character Date Between Cur');
                    END IF;
  FOR I IN l_pric_character_between_cur LOOP
                    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   QP_PREQ_GRP.engine_debug('In Price List Character Date Between Cur');
                    END IF;
   IF (I.value_from NOT BETWEEN nvl(I.setup_value_from,I.value_from) and nvl(I.setup_value_to,I.value_from)) THEN

    -- If it is a pricing attribute and it fails on between we can delete it right away
    IF (I.attribute_type = 'PRICING') THEN
     l_count := l_count + 1;
     l_line_detail_tbl(l_count) := I.line_detail_index;
    ELSE
     UPDATE qp_npreq_line_attrs_tmp
     SET    PRICING_STATUS_CODE = G_DELETED_BETWEEN
     WHERE CURRENT OF l_pric_character_between_cur;
    END IF;
   END IF;
  END LOOP;
 ELSE
                   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  QP_PREQ_GRP.engine_debug('Before Opening Modifiers Character Date Between Cur');
                   END IF;
  FOR I IN l_mod_character_between_cur LOOP
                    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   QP_PREQ_GRP.engine_debug('In Modifiers Character Date Between Cur');
                    END IF;
   IF (I.value_from NOT BETWEEN nvl(I.setup_value_from,I.value_from) and nvl(I.setup_value_to,I.value_from)) THEN

    -- If it is a pricing attribute and it fails on between we can delete it right away
    IF (I.attribute_type = 'PRICING') THEN
     l_count := l_count + 1;
     l_line_detail_tbl(l_count) := I.line_detail_index;
    ELSE
     UPDATE qp_npreq_line_attrs_tmp
     SET    PRICING_STATUS_CODE = G_DELETED_BETWEEN
     WHERE CURRENT OF l_mod_character_between_cur;
    END IF;
   END IF;
  END LOOP;
 END IF; -- IF (p_pricing_phase_id = G_PRICE_LIST_PHASE_ID)

END IF; -- p_line_group_flag is null

 --Handle between with numeric data type

IF (p_pricing_phase_id = G_PRICE_LIST_PHASE_ID) THEN
                  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
 QP_PREQ_GRP.engine_debug('Before Opening Price List Numeric Between Cur');

                  END IF;
 FOR I IN l_pric_between_cur(p_datatype => G_NUMERIC) LOOP

                   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  QP_PREQ_GRP.engine_debug('In Price List Numeric Between Cur');

                   END IF;
  l_deleted_between := 'F';

  IF I.context = G_PRIC_VOLUME_CONTEXT THEN
   IF(Is_Line_Group(p_line_detail_index => I.line_detail_index) = TRUE) THEN
                     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    QP_PREQ_GRP.engine_debug('Is Line Group #100');

                     END IF;
    l_is_line_group_flag := 'T';

    IF (p_line_group_flag IS NOT NULL) THEN
     IF I.attribute = G_QUANTITY_ATTRIBUTE THEN
          l_value_from_num := I.group_quantity;
          l_selected_volume_attr := G_QUANTITY; -- 2388011_new
     ELSIF (I.attribute = G_LINE_AMT_ATTRIBUTE) THEN
      IF (p_pricing_phase_id <> G_PRICE_LIST_PHASE_ID) THEN
           l_value_from_num := I.group_amount;
      END IF;
      l_selected_volume_attr := G_AMOUNT; -- 2388011_new
     ELSE -- For Order Amount,Period1 Amount  kind of attributes
      l_value_from_num :=  qp_number.canonical_to_number(I.value_from);
     END IF;
    ELSE -- Make it a success,because line group between is done again,so do not delete
      l_value_from_num :=  NULL;
    END IF;

     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('Is line group');
     engine_debug('Group Quantity : ' || l_value_from_num);
     engine_debug('Line detail index: '||I.line_detail_index);
     END IF;
   ELSE  -- is not a line group
     l_is_line_group_flag := 'F';
     l_value_from_num := qp_number.canonical_to_number(I.value_from);
     -- begin 2388011_new
     IF (I.attribute = G_QUANTITY_ATTRIBUTE) THEN
      l_selected_volume_attr := G_QUANTITY;
     ELSIF (I.attribute = G_LINE_AMT_ATTRIBUTE) THEN
      l_selected_volume_attr := G_AMOUNT;
     ELSE -- 2388011_latest
       l_selected_volume_attr := 'O'; -- 2388011_latest, for weight volume attribute
     END IF;
     -- end 2388011_new
   END IF;-- END is a line group
 ELSE    --else Not a Volume Context
  l_is_line_group_flag := 'F';
  l_value_from_num :=  qp_number.canonical_to_number(I.value_from);
 END IF;


  IF (I.setup_value_from IS NULL) THEN
    l_setup_value_from_num := l_value_from_num;
  ELSE
    l_setup_value_from_num :=  qp_number.canonical_to_number(I.setup_value_from);
  END IF;

  IF (I.setup_value_to IS NULL) THEN
    l_setup_value_to_num := l_value_from_num;
  ELSE
    l_setup_value_to_num :=  qp_number.canonical_to_number(I.setup_value_to);
  END IF;

  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('1VALUE: '||l_value_from_num);
  engine_debug('2VALUE_FROM: '||l_setup_value_from_num);
  engine_debug('3VALUE_TO: '||l_setup_value_to_num);

  END IF;
  IF (l_value_from_num NOT BETWEEN l_setup_value_from_num and l_setup_value_to_num) and l_value_from_num IS NOT NULL THEN

    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('4NOT BETWEEN');

    END IF;
   -- If it is a pricing attribute and it fails on between we can delete it right away
   IF (I.attribute_type = 'PRICING') THEN
    l_count := l_count + 1;
    l_line_detail_tbl(l_count) := I.line_detail_index;
   ELSE
    UPDATE qp_npreq_line_attrs_tmp
    SET    PRICING_STATUS_CODE = G_DELETED_BETWEEN
    WHERE CURRENT OF l_pric_between_cur;
    l_deleted_between := 'T';
   END IF;
  END IF;

  IF (l_deleted_between = 'F') THEN

   IF (I.group_quantity IS NOT NULL and I.group_quantity <> l_value_from_num and l_value_from_num IS NOT NULL
	  and p_line_group_flag IS NOT NULL) THEN
   /*
   INDX,QP_PREQ_GRP.evaluate_between.evaluate_between_upd1,qp_npreq_ldets_tmp_U1,LINE_DETAIL_INDEX,1
   */
    UPDATE qp_npreq_ldets_tmp
    SET GROUP_QUANTITY = l_value_from_num
    WHERE LINE_INDEX = i.line_index
    AND   LINE_DETAIL_INDEX = i.line_detail_index;
   END IF;

   -- shu debug msg
                     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    QP_PREQ_GRP.engine_debug('check condition...');
    QP_PREQ_GRP.engine_debug('i.group_amount: : '||i.group_amount);
    QP_PREQ_GRP.engine_debug('l_value_from_num: '||l_value_from_num);
    QP_PREQ_GRP.engine_debug('p_line_group_flag: '||p_line_group_flag);
                     END IF;


   IF (I.group_amount IS NOT NULL and l_value_from_num IS NOT NULL -- shu
	  and p_line_group_flag IS NOT NULL) THEN
   /*
   INDX,QP_PREQ_GRP.evaluate_between.evaluate_between_upd2,qp_npreq_ldets_tmp_U1,LINE_DETAIL_INDEX,1
   */


   -- begin shu, fix group of lines lumpsum based on ITEM_AMOUNT

   SELECT UNIT_PRICE INTO l_list_price
   FROM   qp_npreq_lines_tmp
   WHERE  LINE_INDEX = i.line_index;

   /* Handled l_list_price = 0 bug2385874 */
   IF (l_list_price IS NOT NULL and l_list_price <>0) THEN -- avoid division by zero

        l_group_amount := I.group_amount /l_list_price;
   ELSE
        if l_list_price = 0 then
        l_group_amount := 0;
        else
        l_group_amount :=I.group_amount;
        end if;
   END IF;

                     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    QP_PREQ_GRP.engine_debug('line_index: '||i.line_index);
    QP_PREQ_GRP.engine_debug('list price: '||l_list_price);
    QP_PREQ_GRP.engine_debug('i.group_amount: '||i.group_amount);
    QP_PREQ_GRP.engine_debug('group_value: '||l_group_amount);
                     END IF;
    -- end shu fix

    UPDATE qp_npreq_ldets_tmp
    SET   GROUP_AMOUNT = l_group_amount -- shu
    WHERE LINE_INDEX = i.line_index
    AND   LINE_DETAIL_INDEX = i.line_detail_index;

   END IF;

   --Need the LINE_QUANTITY column to be updated for regular lines with volume attributes, for Calculation purposes
   IF (p_line_group_flag IS NULL and l_is_line_group_flag = 'F'
       and i.context = G_PRIC_VOLUME_CONTEXT) -- added for [5005328/4911264]
   THEN
                     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    QP_PREQ_GRP.engine_debug('Line Index: ' || i.line_index || ' LD Index : ' || i.line_detail_index ||
						' '||l_value_from_num);
                     END IF;
   /*
   INDX,QP_PREQ_GRP.evaluate_between.evaluate_between_upd3,qp_npreq_ldets_tmp_U1,LINE_DETAIL_INDEX,1
   */
    UPDATE qp_npreq_ldets_tmp
    SET   LINE_QUANTITY = l_value_from_num
    WHERE LINE_INDEX = i.line_index
    AND   LINE_DETAIL_INDEX = i.line_detail_index;
   END IF;

  END IF;
 END LOOP;
ELSE
                  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
 QP_PREQ_GRP.engine_debug('Before Opening Modifiers Numeric Between Cur');
                  END IF;
 FOR I IN l_mod_between_cur(p_datatype => G_NUMERIC) LOOP

                   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  QP_PREQ_GRP.engine_debug('In Modifiers Numeric Between Cur');

                   END IF;
  l_deleted_between := 'F';

  IF I.context = G_PRIC_VOLUME_CONTEXT THEN
   IF(Is_Line_Group(p_line_detail_index => I.line_detail_index) = TRUE) THEN
                     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    QP_PREQ_GRP.engine_debug('Is Line Group #100');

                     END IF;
    l_is_line_group_flag := 'T';

    IF (p_line_group_flag IS NOT NULL) THEN
      IF I.attribute = G_QUANTITY_ATTRIBUTE THEN
          l_value_from_num := I.group_quantity;
      ELSIF (I.attribute = G_LINE_AMT_ATTRIBUTE) THEN
       IF (p_pricing_phase_id <> G_PRICE_LIST_PHASE_ID) THEN
           l_value_from_num := I.group_amount;
       END IF;
      ELSE -- For Order Amount,Period1 Amount  kind of attributes
       l_value_from_num :=  qp_number.canonical_to_number(I.value_from);
      END IF;
    ELSE -- Make it a success,because line group between is done again,so do not delete
      l_value_from_num :=  NULL;
    END IF;

     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('Is line group');
     engine_debug('Group Quantity : ' || l_value_from_num);
     engine_debug('Line detail index: '||I.line_detail_index);
     END IF;
   ELSE  -- is not a line group
     l_is_line_group_flag := 'F';
     l_value_from_num := qp_number.canonical_to_number(I.value_from);
   END IF;
 ELSE    --else Not a Volume Context
  l_is_line_group_flag := 'F';
  l_value_from_num :=  qp_number.canonical_to_number(I.value_from);
 END IF;


  IF (I.setup_value_from IS NULL) THEN
    l_setup_value_from_num := l_value_from_num;
  ELSE
    l_setup_value_from_num :=  qp_number.canonical_to_number(I.setup_value_from);
  END IF;

  IF (I.setup_value_to IS NULL) THEN
    l_setup_value_to_num := l_value_from_num;
  ELSE
    l_setup_value_to_num :=  qp_number.canonical_to_number(I.setup_value_to);
  END IF;

  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('1VALUE: '||l_value_from_num);
  engine_debug('2VALUE_FROM: '||l_setup_value_from_num);
  engine_debug('3VALUE_TO: '||l_setup_value_to_num);

  END IF;
  IF (l_value_from_num NOT BETWEEN l_setup_value_from_num and l_setup_value_to_num) and l_value_from_num IS NOT NULL THEN

    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('4NOT BETWEEN');

    END IF;
   -- If it is a pricing attribute and it fails on between we can delete it right away
   IF (I.attribute_type = 'PRICING') THEN
    l_count := l_count + 1;
    l_line_detail_tbl(l_count) := I.line_detail_index;
   ELSE
    UPDATE qp_npreq_line_attrs_tmp
    SET    PRICING_STATUS_CODE = G_DELETED_BETWEEN
    WHERE CURRENT OF l_mod_between_cur;
    l_deleted_between := 'T';
   END IF;
  END IF;

  IF (l_deleted_between = 'F') THEN

   IF (I.group_quantity IS NOT NULL and I.group_quantity <> l_value_from_num and l_value_from_num IS NOT NULL
	  and p_line_group_flag IS NOT NULL) THEN
   /*
   INDX,QP_PREQ_GRP.evaluate_between.evaluate_between_upd1,qp_npreq_ldets_tmp_U1,LINE_DETAIL_INDEX,1
   */
    UPDATE qp_npreq_ldets_tmp
    SET GROUP_QUANTITY = l_value_from_num, --2388011_new
        SELECTED_VOLUME_ATTR = l_selected_volume_attr -- 2388011_new
    WHERE LINE_INDEX = i.line_index
    AND   LINE_DETAIL_INDEX = i.line_detail_index;
   END IF;

    -- shu debug msg
                     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    QP_PREQ_GRP.engine_debug('for modifiers...');
    QP_PREQ_GRP.engine_debug('check condition...');
    QP_PREQ_GRP.engine_debug('i.group_amount: : '||i.group_amount);
    QP_PREQ_GRP.engine_debug('l_value_from_num: '||l_value_from_num);
    QP_PREQ_GRP.engine_debug('p_line_group_flag: '||p_line_group_flag);

                     END IF;
   IF (I.group_amount IS NOT NULL and l_value_from_num IS NOT NULL
	  and p_line_group_flag IS NOT NULL) THEN
   /*
   INDX,QP_PREQ_GRP.evaluate_between.evaluate_between_upd2,qp_npreq_ldets_tmp_U1,LINE_DETAIL_INDEX,1
   */


   -- [julin/5085310]
   IF (i.attribute = G_LINE_AMT_ATTRIBUTE) THEN

     SELECT UNIT_PRICE INTO l_list_price
     FROM   qp_npreq_lines_tmp
     WHERE  LINE_INDEX = i.line_index;

    /* Handled l_list_price = 0 bug2385874 */
     IF (l_list_price IS NOT NULL and l_list_price <>0) THEN -- avoid division by zero

        l_group_amount := I.group_amount /l_list_price;
     ELSE
        if l_list_price = 0 then
        l_group_amount := 0;
        else
        l_group_amount :=I.group_amount;
        end if;
     END IF;
   ELSE
     OPEN l_line_amount_cur(i.line_index, i.line_detail_index, i.context, i.attribute, i.attribute_type);
     FETCH l_line_amount_cur into l_line_amount, l_priced_quantity;
     CLOSE l_line_amount_cur;

     IF (l_line_amount IS NOT NULL and l_line_amount <>0) THEN -- avoid division by zero
       l_group_amount := (I.group_amount /l_line_amount) * l_priced_quantity;
     ELSE
       if l_line_amount = 0 then
         l_group_amount := 0;
       else
         l_group_amount :=I.group_amount;
       end if;
     END IF;
   END IF;

    -- shu, for modifiers
                     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    QP_PREQ_GRP.engine_debug('for modifiers...');
    QP_PREQ_GRP.engine_debug('line_index: '||i.line_index);
    QP_PREQ_GRP.engine_debug('list price: '||l_list_price);
    QP_PREQ_GRP.engine_debug('i.group_amount: '||i.group_amount);
    QP_PREQ_GRP.engine_debug('group_value: '||l_group_amount);
                     END IF;

    UPDATE qp_npreq_ldets_tmp
    SET   GROUP_AMOUNT = l_group_amount, -- 2388011_new, fix group of lines lumpsum based on ITEM_AMOUNT
          SELECTED_VOLUME_ATTR = l_selected_volume_attr -- 2388011_new
    WHERE LINE_INDEX = i.line_index
    AND   LINE_DETAIL_INDEX = i.line_detail_index;
   END IF;

   --Need the LINE_QUANTITY column to be updated for regular lines with volume attributes, for Calculation purposes
   IF (p_line_group_flag IS NULL and l_is_line_group_flag = 'F'
       and i.context = G_PRIC_VOLUME_CONTEXT) -- added for [5005328/4911264]
   THEN
                     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    QP_PREQ_GRP.engine_debug('Line Index: ' || i.line_index || ' LD Index : ' || i.line_detail_index ||
						' '||l_value_from_num);
                     END IF;
   /*
   INDX,QP_PREQ_GRP.evaluate_between.evaluate_between_upd3,qp_npreq_ldets_tmp_U1,LINE_DETAIL_INDEX,1
   */
    UPDATE qp_npreq_ldets_tmp
    SET   LINE_QUANTITY = l_value_from_num, --2388011_new
          SELECTED_VOLUME_ATTR = l_selected_volume_attr --2388011_new
    WHERE LINE_INDEX = i.line_index
    AND   LINE_DETAIL_INDEX = i.line_detail_index;
   END IF;

  END IF;

 END LOOP;

END IF; -- IF (p_pricing_phase_id = G_PRICE_LIST_PHASE_ID)

 -- If it is a pricing attribute and it fails on between we can delete it right away..Delete all line details where pricing
 -- attribute BETWEEN fails
 FORALL I IN 1 .. l_line_detail_tbl.COUNT

    /*
    INDX,QP_PREQ_GRP.evaluate_between.upd4,qp_npreq_ldets_tmp_U1,LINE_DETAIL_INDEX,1
    */
    UPDATE qp_npreq_ldets_tmp --upd4
    SET    PRICING_STATUS_CODE = G_DELETED_BETWEEN
    WHERE  LINE_DETAIL_INDEX  = l_line_detail_tbl(i);
qp_debug_util.tstop('Evaluate_Between');
EXCEPTION
  WHEN OTHERS THEN
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug(l_routine||' '||SQLERRM);
   END IF;
   x_status_code := FND_API.G_RET_STS_ERROR;
   x_status_text := l_routine||': '||SQLERRM;
   qp_debug_util.tstop('Evaluate_Between');
END Evaluate_Between;

/*+---------------------------------------------------------
  |PROCEDURE handle_break called by get_eligible_break_lines
  +----------------------------------------------------------
*/

PROCEDURE Handle_Break(p_list_header_id    IN  NUMBER,
                       p_list_line_id      IN  NUMBER,
                       p_pricing_phase_id  IN  PLS_INTEGER,
                       p_line_detail_index IN  PLS_INTEGER,
                       p_line_index        IN  PLS_INTEGER,
                       p_group_quantity    IN  NUMBER,
                       p_group_amount      IN  NUMBER,
                       p_list_type_code    IN  VARCHAR2, /* Vivek */
                       x_is_break_satisfy  OUT NOCOPY BOOLEAN,
                       x_status_code OUT NOCOPY VARCHAR2,
                       x_status_text OUT NOCOPY VARCHAR2) AS

/*
INDX,QP_PREQ_GRP.handle_break.l_price_break_detail_cur,QP_RLTD_MODIFIERS_N1,FROM_RLTD_MODIFIER_ID,1

INDX,QP_PREQ_GRP.handle_break.l_price_break_detail_cur,qp_npreq_line_attrs_tmp_N2,PRICING_STATUS_CODE,1
INDX,QP_PREQ_GRP.handle_break.l_price_break_detail_cur,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.handle_break.l_price_break_detail_cur,qp_npreq_line_attrs_tmp_N2,CONTEXT,3
INDX,QP_PREQ_GRP.handle_break.l_price_break_detail_cur,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE,4
INDX,QP_PREQ_GRP.handle_break.l_price_break_detail_cur,qp_npreq_line_attrs_tmp_N2,LINE_INDEX,5

INDX,QP_PREQ_GRP.handle_break.l_price_break_detail_cur,qp_npreq_lines_tmp_N1,LINE_INDEX,1

INDX,QP_PREQ_GRP.handle_break.l_price_break_detail_cur,QP_PRICING_ATTRIBUTES_N4,PRICING_ATTRIBUTE_CONTEXT,1
INDX,QP_PREQ_GRP.handle_break.l_price_break_detail_cur,QP_PRICING_ATTRIBUTES_N4,PRICING_ATTRIBUTE,2

INDX,QP_PREQ_GRP.handle_break.l_price_break_detail_cur,QP_LIST_LINES_PK,LIST_LINE_ID,1
*/

cursor l_price_break_detail_multi_cur(p_reduced_pbh_processing VARCHAR2) is
   SELECT /*+ ordered use_nl(qplines, qprm, qppa, qpll, qph, qcdt) */
       qpll.pricing_group_sequence,
       qpll.list_header_id,
       qppa.list_line_id,
       qppa.product_attribute_context,  --setup values
       qppa.product_attribute,
       qppa.product_attr_value,
       qppa.pricing_attribute_context,
       qppa.pricing_attribute,
       qppa.pricing_attr_value_from,
       qppa.pricing_attr_value_to,
       qppa.product_uom_code,
       qplat_pricing.value_from,
       qplat_pricing.attribute,
       nvl(qplines.priced_uom_code,qplines.line_uom_code) line_uom_code,
       qplines.line_uom_code order_uom_code, -- shulin, for total_item_quantity uom conversion
       qplines.line_index,
       nvl(qplines.priced_quantity,qplines.line_quantity) line_quantity,
       qpll.list_line_type_code,
       qpll.modifier_level_code,
       qpll.benefit_qty,
       qpll.benefit_uom_code,
       qpll.list_line_no,
       qpll.accrual_flag,
       qpll.accrual_conversion_rate,
       qpll.estim_accrual_rate,
       qpll.recurring_value, -- block pricing
       qpll.arithmetic_operator,
       qpll.operand,
       qpll.list_price,
       qpll.pricing_phase_id,
       qpll.automatic_flag,
       qpll.price_break_type_code,
       qpll.incompatibility_GRP_CODE,
       qpll.override_flag,
       qpll.print_on_invoice_flag,
       qpll.price_by_formula_id,
       qpll.product_precedence,
       nvl(qplines.usage_pricing_type,G_REGULAR_USAGE_TYPE) usage_pricing_type,
       QCDT.ROUNDING_FACTOR, /* vivek */
       QCDT.CURRENCY_DETAIL_ID,  /* sunilpandey */
       QCDT.CURRENCY_HEADER_ID,  /* vivek */
       QCDT.SELLING_ROUNDING_FACTOR,  /* vivek */
       QPLINES.CURRENCY_CODE   ORDER_CURRENCY,  /* vivek */
       QPLINES.PRICING_EFFECTIVE_DATE,  /* vivek */
       QPH.CURRENCY_CODE   BASE_CURRENCY_CODE,  /* vivek */
       qplines.contract_start_date, -- R12 partial period pricing
       qplines.contract_end_date    -- R12 partial period pricing
   FROM
       qp_npreq_line_attrs_tmp qplat_pricing,
       qp_npreq_lines_tmp      qplines,
       qp_rltd_modifiers qprm,
       qp_pricing_attributes  qppa,
       qp_list_lines          qpll
      ,qp_list_headers_b qph   /* Vivek */
      ,qp_currency_details qcdt /* Vivek */
   WHERE qprm.from_rltd_modifier_id = p_list_line_id
   AND   qprm.to_rltd_modifier_id = qppa.list_line_id
   AND   qppa.list_line_id = qpll.list_line_id
   AND   qplat_pricing.context = G_PRIC_VOLUME_CONTEXT
   AND   qppa.pricing_attribute_context = G_PRIC_VOLUME_CONTEXT
   AND   qplat_pricing.attribute = qppa.pricing_attribute
   AND   qplat_pricing.attribute_type = G_PRICING_TYPE
   AND   qplat_pricing.line_index = qplines.line_index
   AND   qplat_pricing.pricing_status_code = G_STATUS_UNCHANGED
   AND   qplat_pricing.line_index = p_line_index
-- and   qp_number.canonical_to_number(qplat_pricing.value_from) <> 0 -- 5158413
-- commented above for bug#6896139 as fix for bug#5158413 did not consider for G_LINE_GROUP,lines with line qty as 0
--(i.e qplat_pricing.value_from=0) even when the qualifier group count for G_LINE_GROUP was greater than zero
   and   qpll.list_header_id = qph.list_header_id /* Vivek */
   and   QPH.CURRENCY_HEADER_ID = QCDT.CURRENCY_HEADER_ID /* Vivek */
            AND QPLINES.CURRENCY_CODE = QCDT.TO_CURRENCY_CODE  /* Vivek */
            AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                NVL(TRUNC(QCDT.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                AND NVL(TRUNC(QCDT.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
   AND (   /* Vivek */
        (qcdt.curr_attribute_context is null   /* Vivek */
         and not exists   /* Vivek */
             (select /*+ ORDERED use_nl(qcdt1) index(pa_tmp QP_PREQ_LINE_ATTRS_TMP_N1) */ 'x'   --[julin/5139512/4744915]
               from qp_npreq_line_attrs_tmp pa_tmp,   qp_currency_details qcdt1 /* Vivek */
               where qcdt1.curr_attribute_context IS NOT NULL  /* Vivek */
                 and qcdt1.curr_attribute_context = pa_tmp.context   /* Vivek */
                 and qcdt1.curr_attribute = pa_tmp.attribute   /* Vivek */
                 and qcdt1.curr_attribute_value = pa_tmp.value_from   /* Vivek */
                 and qcdt1.curr_attribute_type = pa_tmp.ATTRIBUTE_TYPE   /* Vivek */
                 and qcdt1.to_currency_code = qcdt.to_currency_code   /* Vivek */
                 and qcdt1.currency_header_id = qcdt.currency_header_id   /* Vivek */
                 and pa_tmp.pricing_status_code = G_STATUS_UNCHANGED   /* Vivek */
                 and pa_tmp.line_index = qplines.line_index   /* Vivek */
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                     NVL(TRUNC(QCDT1.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                     AND NVL(TRUNC(QCDT1.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
             )   /* Vivek */
        )   /* Vivek */
        OR   /* Vivek */
        (qcdt.curr_attribute_context is not null   /* Vivek */
         and qcdt.precedence =
             (select /*+ ORDERED use_nl(qcdt2) index(pa_tmp1 QP_PREQ_LINE_ATTRS_TMP_N1) */ min(qcdt2.precedence) --[julin/5139512/4744915]
               from qp_npreq_line_attrs_tmp pa_tmp1, qp_currency_details qcdt2  /* Vivek */
               where qcdt2.curr_attribute_context IS NOT NULL   /* Vivek */
                 and qcdt2.curr_attribute_context = pa_tmp1.context   /* Vivek */
                 and qcdt2.curr_attribute = pa_tmp1.attribute   /* Vivek */
                 and qcdt2.curr_attribute_value = pa_tmp1.value_from   /* Vivek */
                 and qcdt2.curr_attribute_type = pa_tmp1.ATTRIBUTE_TYPE   /* Vivek */
                 and qcdt2.to_currency_code = qcdt.to_currency_code   /* Vivek */
                 and qcdt2.currency_header_id = qcdt.currency_header_id   /* Vivek */
                 and pa_tmp1.pricing_status_code = G_STATUS_UNCHANGED   /* Vivek */
                 and pa_tmp1.line_index = qplines.line_index   /* Vivek */
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                     NVL(TRUNC(QCDT2.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                     AND NVL(TRUNC(QCDT2.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
             )   /* Vivek */
        )   /* Vivek */
       )   /* Vivek */
   and (( (p_reduced_pbh_processing = G_YES) --[julin/3783009/4712794]
         and (nvl(qplines.usage_pricing_type,G_REGULAR_USAGE_TYPE) <> G_AUTHORING_TYPE)
         and ( (qpll.price_break_type_code = G_POINT_BREAK and qp_number.canonical_to_number(qplat_pricing.value_from)
                                                       between qp_number.canonical_to_number(qppa.pricing_attr_value_from)
                                                           and qp_number.canonical_to_number(qppa.pricing_attr_value_to)
               ) OR
               (qpll.price_break_type_code = G_RANGE_BREAK and qp_number.canonical_to_number(qppa.pricing_attr_value_from)
                                                          <= qp_number.canonical_to_number(qplat_pricing.value_from)
               )
             )
        )
       or
        (p_reduced_pbh_processing = G_NO)
       )
   ORDER BY qp_number.canonical_to_number(qppa.pricing_attr_value_from);  --bug#1819397

cursor l_price_break_detail_cur(p_reduced_pbh_processing VARCHAR2) is
   SELECT /*+ ordered use_nl(qplines, qprm, qppa, qpll) */
       qpll.pricing_group_sequence,
       qpll.list_header_id,
       qppa.list_line_id,
       qppa.product_attribute_context,  --setup values
       qppa.product_attribute,
       qppa.product_attr_value,
       qppa.pricing_attribute_context,
       qppa.pricing_attribute,
       qppa.pricing_attr_value_from,
       qppa.pricing_attr_value_to,
       qppa.product_uom_code,
       qplat_pricing.value_from,
       qplat_pricing.attribute,
       nvl(qplines.priced_uom_code,qplines.line_uom_code) line_uom_code,
       qplines.line_uom_code order_uom_code, -- shulin, for total_item_quantity uom conversion
       qplines.line_index,
       nvl(qplines.priced_quantity,qplines.line_quantity) line_quantity,
       qpll.list_line_type_code,
       qpll.modifier_level_code,
       qpll.benefit_qty,
       qpll.benefit_uom_code,
       qpll.list_line_no,
       qpll.accrual_flag,
       qpll.accrual_conversion_rate,
       qpll.estim_accrual_rate,
       qpll.recurring_value, -- block pricing
       qpll.arithmetic_operator,
       qpll.operand,
       qpll.list_price,
       qpll.pricing_phase_id,
       qpll.automatic_flag,
       qpll.price_break_type_code,
       qpll.incompatibility_GRP_CODE,
       qpll.override_flag,
       qpll.print_on_invoice_flag,
       qpll.price_by_formula_id,
       qpll.product_precedence,
       nvl(qplines.usage_pricing_type,G_REGULAR_USAGE_TYPE) usage_pricing_type,
       NULL ROUNDING_FACTOR, /* vivek */
       NULL CURRENCY_DETAIL_ID,  /* sunilpandey */
       NULL CURRENCY_HEADER_ID,  /* vivek */
       NULL SELLING_ROUNDING_FACTOR,  /* vivek */
       NULL ORDER_CURRENCY,  /* vivek */
       NULL PRICING_EFFECTIVE_DATE,  /* vivek */
       NULL BASE_CURRENCY_CODE,  /* vivek */
       qplines.contract_start_date, -- R12 partial period pricing
       qplines.contract_end_date    -- R12 partial period pricing
   FROM
       qp_npreq_line_attrs_tmp qplat_pricing,
       qp_npreq_lines_tmp      qplines,
       qp_rltd_modifiers qprm,
       qp_pricing_attributes  qppa,
       qp_list_lines          qpll
   WHERE qprm.from_rltd_modifier_id = p_list_line_id
   AND   qprm.to_rltd_modifier_id = qppa.list_line_id
   AND   qppa.list_line_id = qpll.list_line_id
   AND   qplat_pricing.context = G_PRIC_VOLUME_CONTEXT
   AND   qppa.pricing_attribute_context = G_PRIC_VOLUME_CONTEXT
   AND   qplat_pricing.attribute = qppa.pricing_attribute
   AND   qplat_pricing.attribute_type = G_PRICING_TYPE
   AND   qplat_pricing.line_index = qplines.line_index
   AND   qplat_pricing.pricing_status_code = G_STATUS_UNCHANGED
   AND   qplat_pricing.line_index = p_line_index
-- and   qp_number.canonical_to_number(qplat_pricing.value_from) <> 0 -- 5158413
-- commented above for bug#6896139 as fix for bug#5158413 did not consider for G_LINE_GROUP,lines with line qty as 0
--(i.e qplat_pricing.value_from=0) even when the qualifier group count for G_LINE_GROUP was greater than zero
   and (( (p_reduced_pbh_processing = G_YES) --[julin/3783009/4712794]
          and (nvl(qplines.usage_pricing_type,G_REGULAR_USAGE_TYPE) <> G_AUTHORING_TYPE)
          and ( (qpll.price_break_type_code = G_POINT_BREAK and qp_number.canonical_to_number(qplat_pricing.value_from)
                                                        between qp_number.canonical_to_number(qppa.pricing_attr_value_from)
                                                            and qp_number.canonical_to_number(qppa.pricing_attr_value_to)
                ) OR
                (qpll.price_break_type_code = G_RANGE_BREAK and qp_number.canonical_to_number(qppa.pricing_attr_value_from)
                                                           <= qp_number.canonical_to_number(qplat_pricing.value_from)
                )
              )
        )
       or
        (p_reduced_pbh_processing = G_NO)
       )
   ORDER BY qp_number.canonical_to_number(qppa.pricing_attr_value_from);  --bug#1819397

CURSOR l_pbh_cur IS
SELECT net_amount_flag
FROM   qp_list_lines
WHERE  list_line_id = p_list_line_id;

J PLS_INTEGER:=1;
N PLS_INTEGER:=1;
--l_line_detail_index PLS_INTEGER;
--l_line_detail_tbl LINE_DETAIL_TBL_TYPE;
--l_line_attrs_tbl  LINE_ATTR_TBL_TYPE;
l_VALID_PBH_FLAG VARCHAR2(1):='N';
l_VALUE_TO NUMBER:=0;
l_VALUE_FROM NUMBER;
l_order_uom_code VARCHAR2(3);
l_primary_uom    VARCHAR2(3);
l_product_uom    VARCHAR2(3);
l_quantity NUMBER;
l_item_id NUMBER;
l_uom_rate NUMBER;
l_status_code VARCHAR2(30);
l_status_text VARCHAR2(240);
E_INVALID_PRICE_BREAK_TYPE EXCEPTION;
E_INVALID_UOM_CONVERSION EXCEPTION;
e_proration_fac_oks_error exception; /* Proration */
l_routine VARCHAR2(240):='Routine:QP_PREQ_GRP.HANDLE_BREAK';
rowid_tbl ROWID_TYPE;
index_tbl PLS_INTEGER_TYPE;
l_count PLS_INTEGER:=0;
l_grp_quantity NUMBER:=0;
l_selected_volume_attr VARCHAR2(1);
l_setup_value_from NUMBER;
l_continuous_flag BOOLEAN := FALSE; -- 4061138, maintained only if proration involved

-- julin [3805113]: local tables populated via cursor
l_h_pricing_group_sequence_tbl    NUMBER_TYPE;
l_h_list_header_id_tbl            NUMBER_TYPE;
l_h_list_line_id_tbl              NUMBER_TYPE;
l_h_product_attr_context_tbl VARCHAR_TYPE;
l_h_product_attribute_tbl         VARCHAR_TYPE;
l_h_product_attr_value_tbl        VARCHAR_TYPE;
l_h_pricing_attr_context_tbl VARCHAR_TYPE;
l_h_pricing_attribute_tbl         VARCHAR_TYPE;
l_h_pricing_attr_val_from_tbl   VARCHAR_TYPE;
l_h_pricing_attr_val_to_tbl     VARCHAR_TYPE;
l_h_product_uom_code_tbl          VARCHAR_30_TYPE;
l_h_value_from_tbl                VARCHAR_TYPE;
l_h_attribute_tbl                 VARCHAR_TYPE;
l_h_line_uom_code_tbl             VARCHAR_30_TYPE;
l_h_order_uom_code_tbl            VARCHAR_30_TYPE; -- shu, for total_item_qty
l_h_line_index_tbl                NUMBER_TYPE;
l_h_line_quantity_tbl             NUMBER_TYPE;
l_h_list_line_type_code_tbl       VARCHAR_30_TYPE;
l_h_modifier_level_code_tbl       VARCHAR_30_TYPE;
l_h_benefit_qty_tbl               NUMBER_TYPE;
l_h_benefit_uom_code_tbl          VARCHAR_30_TYPE;
l_h_list_line_no_tbl              VARCHAR_TYPE;  -- 9387258 changed from number to varchar
l_h_accrual_flag_tbl              VARCHAR_30_TYPE;
l_h_accrual_conv_rate_tbl   NUMBER_TYPE;
l_h_estim_accrual_rate_tbl        NUMBER_TYPE;
l_h_recurring_value_tbl           NUMBER_TYPE; -- block pricing
l_h_arithmetic_operator_tbl       VARCHAR_30_TYPE;
l_h_operand_tbl                   NUMBER_TYPE;
l_h_list_price_tbl                NUMBER_TYPE;
l_h_pricing_phase_id_tbl          NUMBER_TYPE;
l_h_automatic_flag_tbl            VARCHAR_30_TYPE;
l_h_price_break_type_code_tbl     VARCHAR_30_TYPE;
l_h_incompat_grp_code_tbl  VARCHAR_30_TYPE;
l_h_override_flag_tbl             VARCHAR_30_TYPE;
l_h_print_on_invoice_flag_tbl     VARCHAR_30_TYPE;
l_h_price_by_formula_id_tbl       NUMBER_TYPE;
l_h_product_precedence_tbl        NUMBER_TYPE;
l_h_usage_pricing_type_tbl        VARCHAR_30_TYPE;
l_h_rounding_factor_tbl           NUMBER_TYPE; /* Vivek */
l_h_currency_detail_id_tbl        NUMBER_TYPE; /* Vivek */
l_h_currency_header_id_tbl        NUMBER_TYPE; /* Vivek */
l_h_selling_round_factor_tbl   NUMBER_TYPE; /* Vivek */
l_h_order_currency_tbl            VARCHAR_30_TYPE; /* Vivek */
l_h_pricing_effective_date_tbl    DATE_TYPE; /* Vivek */
l_h_base_currency_code_tbl        VARCHAR_30_TYPE; /* Vivek */
l_h_contract_start_date_tbl       DATE_TYPE; -- R12 partial period pricing
l_h_contract_end_date_tbl         DATE_TYPE; -- R12 partial period pricing

-- julin [3805113]: local tables not populated via cursor
l_l_line_detail_index_tbl         NUMBER_TYPE;
l_l_selected_volume_attr_tbl      FLAG_TYPE; -- only need VARCHAR(1)
l_l_G_CHILD_DETAIL_TYPE_tbl       VARCHAR_30_TYPE;
l_l_p_line_index_tbl                PLS_INTEGER_TYPE;
l_l_G_STATUS_NEW_tbl              VARCHAR_30_TYPE;
l_l_G_NOT_PROCESSED_tbl           VARCHAR_30_TYPE;
l_l_group_quantity_tbl            NUMBER_TYPE;
l_l_group_amount_tbl              NUMBER_TYPE;
l_l_list_type_code_tbl            VARCHAR_TYPE;
l_l_G_DETAIL_LEVEL_tbl            VARCHAR_30_TYPE;
l_l_G_PRICING_TYPE_tbl            VARCHAR_30_TYPE;
l_l_G_BY_PBH_tbl                  VARCHAR_30_TYPE;
l_l_G_OPERATOR_BETWEEN_tbl        VARCHAR_30_TYPE;
l_l_p_list_line_id_tbl            NUMBER_TYPE;
l_l_G_PBH_LINE_tbl                VARCHAR_30_TYPE;
l_l_G_PROCESSED_tbl               VARCHAR_30_TYPE;
l_l_quantity_tbl                  NUMBER_TYPE;
l_l_p_line_detail_index_tbl       NUMBER_TYPE;

--type refcur is ref cursor;

--l_price_break_detail_cur    refcur;
l_total_item_quantity NUMBER;	-- shu
l_max_decimal_digits PLS_INTEGER := nvl(FND_PROFILE.Value ('QP_INV_DECIMAL_PRECISION'),10); --shu

l_break_uom_code      VARCHAR2(3); /* Proration */
l_break_uom_context   VARCHAR2(30); /* Proration */
l_break_uom_attribute VARCHAR2(30); /* Proration */
l_passed_break_uom    VARCHAR2(3); /* Proration */
l_proration_factor    NUMBER; /* Proration */
l_contract_start_date date; /* Proration */
l_contract_end_date   date; /* Proration */
l_proration_processed VARCHAR2(1) := 'N'; /* Proration */
l_value_temp          NUMBER; /* Proration */
l_first_time_flag     VARCHAR2(1) := 'Y'; /* Proration */
l_prev_setup_to_value  number; /* ER 3637202 */
l_prev_prorated_to_value  number; /* ER 3637202 */
l_gap  number; /* ER 3637202 */
l_reduced_pbh_processing varchar2(1); --[julin/3783009/4712794]
l_net_amount_flag varchar2(1); --[julin/4671446]

BEGIN

--product uom code is different than order uom code
--and attribute is quantity than we need to do uom conversion
if G_BREAK_UOM_PRORATION is null then
  G_BREAK_UOM_PRORATION := nvl(fnd_profile.value('QP_BREAK_UOM_PRORATION'), G_NULL_PROFILE_VALUE);
end if;

N := 1;

 --[julin/3783009/4712794] ER - reduced pbh process should be done when following conditions are met
 if G_BREAK_UOM_PRORATION <> 'Y' and p_list_type_code = G_PRICE_LIST_HEADER and QP_PARAM_UTIL.GET_PARAMETER_VALUE('REQ', G_REQUEST_TYPE_CODE, 'QP_PL_BRK_RET_SATISFIED_ONLY') = G_YES then
   l_reduced_pbh_processing := G_YES;
 else
   l_reduced_pbh_processing := G_NO;
 end if;

  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('G_BREAK_UOM_PRORATION ' || G_BREAK_UOM_PRORATION);
    engine_debug('p_list_type_code ' || p_list_type_code);
    engine_debug('G_REQUEST_TYPE_CODE ' || G_REQUEST_TYPE_CODE);
    engine_debug('l_reduced_pbh_processing ' || l_reduced_pbh_processing);

  END IF;

--[julin/4671446]
OPEN l_pbh_cur;
FETCH l_pbh_cur into l_net_amount_flag;
CLOSE l_pbh_cur;

-- julin [3805113]: bulk fetch
IF (p_pricing_phase_id = 1 and G_MULTI_CURRENCY_PROFILE = G_YES
    and G_USE_MULTI_CURRENCY = G_YES) THEN
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug ('Multi-Currency Pricing Phase Price Break');
  END IF;
  OPEN l_price_break_detail_multi_cur(l_reduced_pbh_processing);
  FETCH l_price_break_detail_multi_cur BULK COLLECT INTO
       l_h_pricing_group_sequence_tbl,
       l_h_list_header_id_tbl,
       l_h_list_line_id_tbl,
       l_h_product_attr_context_tbl,
       l_h_product_attribute_tbl,
       l_h_product_attr_value_tbl,
       l_h_pricing_attr_context_tbl,
       l_h_pricing_attribute_tbl,
       l_h_pricing_attr_val_from_tbl,
       l_h_pricing_attr_val_to_tbl,
       l_h_product_uom_code_tbl,
       l_h_value_from_tbl,
       l_h_attribute_tbl,
       l_h_line_uom_code_tbl,
       l_h_order_uom_code_tbl, -- shulin_tbl, for total_item_quantity uom conversion
       l_h_line_index_tbl,
       l_h_line_quantity_tbl,
       l_h_list_line_type_code_tbl,
       l_h_modifier_level_code_tbl,
       l_h_benefit_qty_tbl,
       l_h_benefit_uom_code_tbl,
       l_h_list_line_no_tbl,
       l_h_accrual_flag_tbl,
       l_h_accrual_conv_rate_tbl,
       l_h_estim_accrual_rate_tbl,
       l_h_recurring_value_tbl, -- block pricing
       l_h_arithmetic_operator_tbl,
       l_h_operand_tbl,
       l_h_list_price_tbl,
       l_h_pricing_phase_id_tbl,
       l_h_automatic_flag_tbl,
       l_h_price_break_type_code_tbl,
       l_h_incompat_grp_code_tbl,
       l_h_override_flag_tbl,
       l_h_print_on_invoice_flag_tbl,
       l_h_price_by_formula_id_tbl,
       l_h_product_precedence_tbl,
       l_h_usage_pricing_type_tbl,
       l_h_rounding_factor_tbl, /* Vivek */
       l_h_currency_detail_id_tbl, /* Vivek */
       l_h_currency_header_id_tbl, /* Vivek */
       l_h_selling_round_factor_tbl,  /* Vivek */
       l_h_order_currency_tbl,     /* Vivek */
       l_h_pricing_effective_date_tbl, /* Vivek */
       l_h_base_currency_code_tbl,     /* Vivek */
       l_h_contract_start_date_tbl, -- R12 partial period pricing
       l_h_contract_end_date_tbl;    -- R12 partial period pricing
  CLOSE l_price_break_detail_multi_cur;
ELSE
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug ('Discounts Based Price Break');
  END IF;
  OPEN l_price_break_detail_cur(l_reduced_pbh_processing);
  FETCH l_price_break_detail_cur BULK COLLECT INTO
       l_h_pricing_group_sequence_tbl,
       l_h_list_header_id_tbl,
       l_h_list_line_id_tbl,
       l_h_product_attr_context_tbl,
       l_h_product_attribute_tbl,
       l_h_product_attr_value_tbl,
       l_h_pricing_attr_context_tbl,
       l_h_pricing_attribute_tbl,
       l_h_pricing_attr_val_from_tbl,
       l_h_pricing_attr_val_to_tbl,
       l_h_product_uom_code_tbl,
       l_h_value_from_tbl,
       l_h_attribute_tbl,
       l_h_line_uom_code_tbl,
       l_h_order_uom_code_tbl, -- shulin_tbl, for total_item_quantity uom conversion
       l_h_line_index_tbl,
       l_h_line_quantity_tbl,
       l_h_list_line_type_code_tbl,
       l_h_modifier_level_code_tbl,
       l_h_benefit_qty_tbl,
       l_h_benefit_uom_code_tbl,
       l_h_list_line_no_tbl,
       l_h_accrual_flag_tbl,
       l_h_accrual_conv_rate_tbl,
       l_h_estim_accrual_rate_tbl,
       l_h_recurring_value_tbl, -- block pricing
       l_h_arithmetic_operator_tbl,
       l_h_operand_tbl,
       l_h_list_price_tbl,
       l_h_pricing_phase_id_tbl,
       l_h_automatic_flag_tbl,
       l_h_price_break_type_code_tbl,
       l_h_incompat_grp_code_tbl,
       l_h_override_flag_tbl,
       l_h_print_on_invoice_flag_tbl,
       l_h_price_by_formula_id_tbl,
       l_h_product_precedence_tbl,
       l_h_usage_pricing_type_tbl,
       l_h_rounding_factor_tbl, /* Vivek */
       l_h_currency_detail_id_tbl, /* Vivek */
       l_h_currency_header_id_tbl, /* Vivek */
       l_h_selling_round_factor_tbl,  /* Vivek */
       l_h_order_currency_tbl,     /* Vivek */
       l_h_pricing_effective_date_tbl, /* Vivek */
       l_h_base_currency_code_tbl,     /* Vivek */
       l_h_contract_start_date_tbl, -- R12 partial period pricing
       l_h_contract_end_date_tbl;    -- R12 partial period pricing
  CLOSE l_price_break_detail_cur;
END IF;

IF (l_h_list_line_id_tbl.COUNT > 0) THEN
  FOR I in l_h_list_line_id_tbl.FIRST .. l_h_list_line_id_tbl.LAST
  LOOP

   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('Modifier_level_code: '||l_h_modifier_level_code_tbl(i));
   engine_debug('Attribute: '||l_h_ATTRIBUTE_tbl(i));

   END IF;
IF qp_number.canonical_to_number(l_h_value_from_tbl(i)) <> 0 OR (qp_number.canonical_to_number(l_h_value_from_tbl(i)) = 0 AND--bug#6896139.If Condition to consider 0 value only for G_LINE_GROUP
l_h_modifier_level_code_tbl(i) = G_LINE_GROUP) THEN --since 0 value is now being considered in the cursor l_price_break_detail_cur --9475080 added
   IF l_h_modifier_level_code_tbl(i) = G_LINE_GROUP THEN
      IF l_h_attribute_tbl(i) = G_QUANTITY_ATTRIBUTE THEN
        l_quantity := p_group_quantity;
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug('l_quantity :'||l_quantity);
        END IF;
        l_selected_volume_attr := G_QUANTITY;
      ELSE
        l_quantity := p_group_amount;
        l_selected_volume_attr := G_AMOUNT;
      END IF;

      IF (p_group_quantity <> l_quantity) THEN

       IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
       engine_debug('UOM l_quantity : '||l_quantity);
       engine_debug('UOM p_group_quantity :'||p_group_quantity);

       END IF;
      /*
      INDX,QP_PREQ_GRP.handle_break.upd1,qp_npreq_ldets_tmp_N1,LINE_INDEX,1
      INDX,QP_PREQ_GRP.handle_break.upd1,qp_npreq_ldets_tmp_N1,PRICING_PHASE_ID,2
      INDX,QP_PREQ_GRP.handle_break.upd1,qp_npreq_ldets_tmp_N1,PRICING_STATUS_CODE,3
      INDX,QP_PREQ_GRP.handle_break.upd1,qp_npreq_ldets_tmp_N1,CREATED_FROM_LIST_HEADER_ID,4
      INDX,QP_PREQ_GRP.handle_break.upd1,qp_npreq_ldets_tmp_N1,CREATED_FROM_LIST_LINE_ID,5
      */

       UPDATE qp_npreq_ldets_tmp --upd1
       SET GROUP_QUANTITY = l_quantity, --2388011_new
           SELECTED_VOLUME_ATTR = l_selected_volume_attr -- 2388011_new, ASK RAVI, commented out??
       WHERE CREATED_FROM_LIST_HEADER_ID = p_list_header_id
       AND   PRICING_PHASE_ID = p_pricing_phase_id
       AND   PRICING_STATUS_CODE = QP_PREQ_GRP.G_STATUS_NEW
       AND   CREATED_FROM_LIST_LINE_ID = p_list_line_id
       AND   LINE_INDEX = p_line_index;

      END IF;

   ELSE  --not a line group

      IF l_h_ATTRIBUTE_tbl(i) = G_QUANTITY_ATTRIBUTE THEN
        IF l_h_product_uom_code_tbl(i) IS NULL THEN
          l_product_uom := l_h_line_uom_code_tbl(i);
        ELSE
          l_product_uom := l_h_product_uom_code_tbl(i);
        END IF;
        l_quantity :=  l_h_line_quantity_tbl(i);
        l_selected_volume_attr := G_QUANTITY;

      -- begin, shu fix
      ELSIF l_h_ATTRIBUTE_tbl(i) = 'PRICING_ATTRIBUTE20' THEN -- shulin, for fte total_item_quantity uom conversion
       IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
      	engine_debug ('TOTAL_ITEM_QUANTITY...');
       END IF;
      	IF (l_h_line_uom_code_tbl(i) = l_h_order_uom_code_tbl(i) ) THEN -- no uom conversion if pricing_uom_code is same as order_uom_code
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
      		engine_debug ('no uom conversion, pricing_uom_code is same as order_uom_code: '||l_h_line_uom_code_tbl(i));
        END IF;
      		l_quantity :=  qp_number.canonical_to_number(l_h_value_from_tbl(i));
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
      		engine_debug ('l_quantity: '||l_quantity);
        END IF;
      	ELSE	-- uom conversion
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
      		engine_debug ('uom conversion...');
      		engine_debug ('order_uom_code: '||l_h_order_uom_code_tbl(i));
      		engine_debug ('primary_uom_code: '||l_h_product_uom_code_tbl(i));
        END IF;
      		l_total_item_quantity :=  qp_number.canonical_to_number(l_h_value_from_tbl(i));
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
      		engine_debug ('l_quantity before uom convertion: '||l_total_item_quantity );
        END IF;

      		convert_uom (	l_h_order_uom_code_tbl(i),
                      		l_h_product_uom_code_tbl(i),
                      		l_total_item_quantity,  --total_item_qty
                      		l_quantity,		-- qty_after_uom_conversion
                      		l_status_code,
                      		l_status_text);
                 IF l_status_code = FND_API.G_RET_STS_ERROR THEN
                 	raise E_INVALID_UOM_CONVERSION;
                 END IF;

                 -- shu, fix bug2368445
                 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                 engine_debug ('l_quantity before rounded by inv_decimal_precision: '||l_quantity);
                 engine_debug ('inv_decimal_precision: '||l_max_decimal_digits);
                 END IF;
                 IF (l_quantity IS NOT NULL AND l_max_decimal_digits IS NOT NULL) THEN -- it will have sql err if null
                 	l_quantity := round (l_quantity, l_max_decimal_digits);
                  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                 	engine_debug ('l_quantity after rounded by inv_decimal_precision: '||l_quantity);
                  END IF;
   		 END IF;
      	END IF;
      	l_selected_volume_attr := 'O'; --2388011_latest
      -- end, shu fix
      ELSE
        l_quantity :=  qp_number.canonical_to_number(l_h_value_from_tbl(i));
        l_selected_volume_attr := G_AMOUNT;
      END IF;

	 -- This LINE_QUANTITY is column is needed for knowing the right value for
	 -- PBH based on modifier level code 'LINE' for calculation purposes

       /*
       INDX,QP_PREQ_GRP.handle_break.upd2,qp_npreq_ldets_tmp_N1,LINE_INDEX,1
       INDX,QP_PREQ_GRP.handle_break.upd2,qp_npreq_ldets_tmp_N1,PRICING_PHASE_ID,2
       INDX,QP_PREQ_GRP.handle_break.upd2,qp_npreq_ldets_tmp_N1,PRICING_STATUS_CODE,3
       INDX,QP_PREQ_GRP.handle_break.upd2,qp_npreq_ldets_tmp_N1,CREATED_FROM_LIST_HEADER_ID,4
       INDX,QP_PREQ_GRP.handle_break.upd2,qp_npreq_ldets_tmp_N1,CREATED_FROM_LIST_LINE_ID,5
       */

       UPDATE qp_npreq_ldets_tmp --upd2
       SET LINE_QUANTITY = l_quantity, --2388011_new
           SELECTED_VOLUME_ATTR = l_selected_volume_attr -- 2388011_new
       WHERE CREATED_FROM_LIST_HEADER_ID = p_list_header_id
       AND   PRICING_PHASE_ID = p_pricing_phase_id
       AND   PRICING_STATUS_CODE = QP_PREQ_GRP.G_STATUS_NEW
       AND   CREATED_FROM_LIST_LINE_ID = p_list_line_id
       AND   LINE_INDEX = p_line_index;

   END IF;


     l_setup_value_from := qp_number.canonical_to_number(l_h_pricing_attr_val_from_tbl(i));

     --handle the case when value_to is null
     IF (l_h_pricing_attr_val_to_tbl(i) IS NULL) THEN
         IF l_quantity >= l_setup_value_from THEN
           l_value_to := l_quantity;
         ELSIF l_quantity < l_setup_value_from THEN
           l_value_to := l_setup_value_from;
         END IF;
     ELSE
         l_value_to := qp_number.canonical_to_number(l_h_pricing_attr_val_to_tbl(i));
     END IF;

     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug(l_routine||' Line quantity: '||l_quantity);
     engine_debug(l_routine||' value from: '||l_setup_value_from);
     engine_debug(l_routine||' value to : '||l_value_to);
     engine_debug(l_routine||' usage pricing type: '||l_h_usage_pricing_type_tbl(i));

     END IF;

     /* Proration Changes START  */
     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
       engine_debug(l_routine||'  QP_CODE_CONTROL.CODE_RELEASE_LEVEL : '|| QP_CODE_CONTROL.CODE_RELEASE_LEVEL);
       engine_debug(l_routine||'  profile QP_BREAK_UOM_PRORATION : '|| G_BREAK_UOM_PRORATION);
       engine_debug(l_routine||'  G_REGULAR_USAGE_TYPE : '|| G_REGULAR_USAGE_TYPE);
     END IF;

-- feb 22 toi comment start
-- proration makes sense for regular usage call and not for authoring call
-- proration is not supported for the authoring call from Calling application
-- feb 22 toi comment end

     if QP_CODE_CONTROL.CODE_RELEASE_LEVEL >= '110510'
       and G_BREAK_UOM_PRORATION = 'Y'
       and l_h_usage_pricing_type_tbl(i) = G_REGULAR_USAGE_TYPE
     then

        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
          engine_debug(l_routine||' Proration allowed profile is set ');
        END IF;

	-- feb 22 toi comment start
        -- Using l_first_time_flag ensures that the follwoing logic is executed once
        -- only since break related information is same across all the break lines
	-- feb 22 toi comment end
        -- get the proration set up data only once

        if l_first_time_flag = 'Y' then
          select break_uom_code, break_uom_context, break_uom_attribute
            into l_break_uom_code, l_break_uom_context, l_break_uom_attribute
            from qp_npreq_ldets_tmp
           where line_detail_index = p_line_detail_index;

           IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
             engine_debug(l_routine||' l_break_uom_code = ' || l_break_uom_code);
             engine_debug(l_routine||' l_break_uom_context = ' || l_break_uom_context);
             engine_debug(l_routine||' l_break_uom_attribute = ' || l_break_uom_attribute);
           END IF;
        end if; --l_first_time_flag = 'Y'

	IF l_break_uom_code IS NOT null THEN
        -- feb 22 toi comment start
          -- if break uom was set up, then get the passed break uom
          -- if break_uom is not set up, then no proration and proceed with normal price break evaluation
        -- feb 22 toi comment end
	  -- price book
          IF nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) = G_YES THEN
            IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
              engine_debug('call from price book with proration ==> skip this break entirely');
            END IF;
            EXIT; -- exit big loop to stop processing remaining child lines
          END IF;
        begin
            if l_first_time_flag = 'Y' then
              -- get the passed break uom only once
              select value_from
                into l_passed_break_uom
                from qp_npreq_line_attrs_tmp
               where line_index = p_line_index
                 and context = l_break_uom_context
                 and attribute = l_break_uom_attribute
                 and pricing_status_code = G_STATUS_UNCHANGED
                 and attribute_type = G_PRICING_TYPE;
            end if; --l_first_time_flag = 'Y'

            IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
              engine_debug(l_routine||' l_passed_break_uom = '|| l_passed_break_uom);
            END IF;

            -- break uom has been passed, do the proration
            l_proration_processed := 'Y';

            --if G_TIME_UOM_CONVERSION = 'ORACLE_CONTRACTS' then
            -- changed for R12 partial period pricing
            if (l_h_contract_start_date_tbl(i) is not null and
                l_h_contract_end_date_tbl(i) is not null)
            then
              IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                engine_debug(l_routine||' OKS UOM conversion ');
              END IF;

               -- get the conversion factor by calling oks api
               -- call the oks api only once
               if l_first_time_flag = 'Y' then
                 select contract_start_date, contract_end_date
                   into l_contract_start_date, l_contract_end_date
                   from qp_npreq_lines_tmp
                  where line_index = p_line_index;

                 -- OKS_QP_INT.get_conversion_factor was replaced by
                 -- OKS_OMINT_PUB.get_quantity in R12 for partial period pricing
                 l_proration_factor := OKS_OMINT_PUB.get_quantity(
                               p_start_date => l_contract_start_date,
                               p_end_date   => l_contract_end_date,
                               p_source_uom => l_break_uom_code,
                               p_org_id     => QP_PREQ_GRP.G_CURRENT_USER_OP_UNIT);

                 IF l_proration_factor = 0 THEN
                    raise e_proration_fac_oks_error;
                 END IF;
               end if;

               IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                 engine_debug(l_routine||' l_proration_factor = '|| l_proration_factor);
               END IF;

               if l_proration_factor is not null then
                  /* ER 3637202
                     bug fix 3715261 - after multiplying with proration factor, truncate the values
                     For 1st break line prorate as below
                     -----------------------------------
                        trunc(From * Proration Factor)          trunc(To * Proration Factor) ** changed behavior

                     For remaining break lines follow the below steps -
                     --------------------------------------------------
                     Gap = BreakLine (n) "From" - BreakLine (n-1) "To"

                     If Gap = 1
                       Prorated BreakLine (n-1) To + 1                  trunc(To * Proration Factor) ** changed behaviour
                     Else
                       trunc(BreakLine (n) From * Proration Factor) 		trunc(To * Proration Factor) ** changed behavior
                     End If

                     -- feb 22 toi comment start
                     Setup with fraction may cause issue as previous to value and current from value may become same and
                     currently pricing engine does not support overlapping price break ranges.
                     e.g   Value from     Value to
                              2             5
                              5.1           10

                     If this needs to be prorated by proration factor 2 the new price_break ranges will be
                            Value from     Value to
		                1            2
                                2            5
                      Thus, first break's value_to becomes equal to the second break's value_from.
                      This needs to be added to the Implementation Manual.
                     -- feb 22 toi comment end

                     ER 4061138 (Continuous Price Breaks)
                     For prorated break lines that are CONTINUOUS, the unrounded Value From is copied into
                     the previous break's Value To.   This deals with the problem inherent to mixed price
                     breaks with proration.
                     e.g.  Value From    Value To
                              1             100      <-- non-continuous break
                              100           200      <-- continuous

                           Apply a proration factor of 1/3
                           New From      New To
                              0             33       <-- 33 is trunc(33 1/3), old proration rule
                              33 1/3        66 2/3   <-- continuous = no trunc

                           Problem here is that the proration has introduced a gap between the first and
                           second break lines, and result can be that total satisfied qty <> ordered qty.
                           To fix this, we "borrow" the Value From to eliminate the unwanted gap.
                           New From      Newer To
                              0             33 1/3   <-- magic!
                              33 1/3        66 2/3

                     Refer to the enhancement document on Continuous Price Breaks for more details.
                  */
                 if l_first_time_flag = 'Y' then --means first price break
                   l_setup_value_from := trunc(l_setup_value_from * l_proration_factor);
                   l_prev_setup_to_value := l_value_to; -- store the un-prorated to value to determine setup gap
                   l_value_to := trunc(l_value_to * l_proration_factor);
                   l_prev_prorated_to_value := l_value_to; -- store the prorated to value to determine prorated value from for next break if setup gap is 1
                 else -- second break onwards
                   l_gap := l_setup_value_from - l_prev_setup_to_value;
                   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                     engine_debug(l_routine||' l_gap = '|| l_gap);
                   END IF;
                   if l_gap = 0 then
                     -- 4061138, only for continuous breaks
                     l_continuous_flag := TRUE;
                     l_setup_value_from := l_setup_value_from * l_proration_factor;
                     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                       engine_debug(l_routine||' * continuous price break');
                     END IF;
                   elsif l_gap = 1 then
                     -- non-continuous breaks with gap 1
                     -- 4687551, gap becomes precision of previous prorated to value
                     l_gap := abs(l_prev_prorated_to_value);
                     l_gap := power(10, -(length(to_char(l_gap-trunc(l_gap))) - 1));
                     l_setup_value_from := l_prev_prorated_to_value + l_gap;
                   else
                      l_setup_value_from := trunc(l_setup_value_from * l_proration_factor);
                   end if; -- if l_gap = 0
                   l_prev_setup_to_value := l_value_to;
                   l_value_to := l_value_to * l_proration_factor;
                   IF l_continuous_flag <> TRUE THEN
                     l_value_to := trunc(l_value_to);
                   END IF;
                   l_prev_prorated_to_value := l_value_to;
                 end if; -- if l_first_time_flag
               end if; --  if l_proration_factor is not null
               IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                engine_debug(l_routine||' l_setup_value_from = '|| l_setup_value_from);
                engine_debug(l_routine||' l_value_to = '|| l_value_to);
               END IF;

            else
              IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                engine_debug(l_routine||' Standard UOM conversion ');
              END IF;

              -- OKS profile is not set, do standard uom conversion
              if l_first_time_flag = 'Y' then --means first price break
      	        convert_uom(l_passed_break_uom,
                          l_break_uom_code,
                      	  l_setup_value_from,  -- before conversion
                      	  l_value_temp,  -- after conversion
                      	  l_status_code,
                      	  l_status_text);
                IF l_status_code = FND_API.G_RET_STS_ERROR THEN
                  raise E_INVALID_UOM_CONVERSION;
                END IF;

                -- 4061138 continuous break
                -- remain non-continuous when value_from = 0, for OKS proration requirement
                IF l_setup_value_from = 0 THEN
                  l_continuous_flag := FALSE;
                END IF;

                l_setup_value_from := trunc(l_value_temp);

                IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                  engine_debug(l_routine||' l_setup_value_from = '|| l_setup_value_from);
                END IF;

                l_prev_setup_to_value := l_value_to; -- store the un-prorated to value to determine setup gap

      	        convert_uom(l_passed_break_uom,
                          l_break_uom_code,
                      	  l_value_to,  -- before conversion
                      	  l_value_temp,  -- after conversion
                      	  l_status_code,
                      	  l_status_text);
                IF l_status_code = FND_API.G_RET_STS_ERROR THEN
                  raise E_INVALID_UOM_CONVERSION;
                END IF;

                -- 4061138, rewritten for continuous break logic
                IF l_continuous_flag = TRUE THEN
                   -- first continuous break: do not trunc Value To
                   -- also, unset l_continuous flag even though this is continuous, because
                   -- later on when updating ldets, we don't want the flag to trigger an update
                   -- of the non-existent previous break's Value To
                  l_value_to := l_value_temp;
                  l_continuous_flag := FALSE;
                ELSE
                  l_value_to := trunc(l_value_temp);
                END IF;

                l_prev_prorated_to_value := l_value_to; -- store the prorated to value to determine prorated value from for next break if setup gap is 1
                IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                  engine_debug(l_routine||' l_value_to = '|| l_value_to);
                END IF;
              else -- second breaks onwards
                l_gap := l_setup_value_from - l_prev_setup_to_value;
                IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                  engine_debug(l_routine||' l_gap = '|| l_gap);
                END IF;

                if l_gap = 1 then
                  -- 4687551, gap becomes precision of previous prorated to value
                  l_gap := abs(l_prev_prorated_to_value);
                  l_gap := power(10, -(length(to_char(l_gap-trunc(l_gap))) - 1));
                  l_setup_value_from := l_prev_prorated_to_value + l_gap;
                else
      	          convert_uom(l_passed_break_uom,
                          l_break_uom_code,
                      	  l_setup_value_from,  -- before conversion
                      	  l_value_temp,  -- after conversion
                      	  l_status_code,
                      	  l_status_text);
                  IF l_status_code = FND_API.G_RET_STS_ERROR THEN
                    raise E_INVALID_UOM_CONVERSION;
                  END IF;

                  -- 4061138 continuous breaks
                  IF l_gap = 0 THEN
                    l_continuous_flag := TRUE;
                    l_setup_value_from := l_value_temp;
                    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                      engine_debug(l_routine||' * continuous price break');
                    END IF;
                  ELSE
                    l_setup_value_from := trunc(l_value_temp);
                  END IF;

                end if; -- if l_gap = 1

                IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                  engine_debug(l_routine||' l_setup_value_from = '|| l_setup_value_from);
                END IF;

                l_prev_setup_to_value := l_value_to;

      	        convert_uom(l_passed_break_uom,
                          l_break_uom_code,
                      	  l_value_to,  -- before conversion
                      	  l_value_temp,  -- after conversion
                      	  l_status_code,
                      	  l_status_text);
                IF l_status_code = FND_API.G_RET_STS_ERROR THEN
                  raise E_INVALID_UOM_CONVERSION;
                END IF;

                l_value_to := l_value_temp;
                IF l_continuous_flag <> TRUE THEN -- 4061138
                  l_value_to := trunc(l_value_to);
                END IF;

                l_prev_prorated_to_value := l_value_to; -- store the prorated to value to determine prorated value from for next break if setup gap is 1
                IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                  engine_debug(l_routine||' l_value_to = '|| l_value_to);
                END IF;
              end if; -- if l_first_time_flag

            end if; -- OKS profile

          exception
            when no_data_found then
              -- if proration attribute is not passed, then no proration
              IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                engine_debug(l_routine||' no proration attribute passed ');
              END IF;
              null;

            when others then
              -- if proration attribute is not passed, then no proration
              IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                engine_debug(l_routine||' others exception, trying to find whether proration attr passed');
              END IF;
              null;
          end;

        end if; --l_break_uom_code is not null
     end if;
     /* Proration Changes END  */

     --pricing engine shd insert child lines for auth call even if no qty passed
     --if atleast one range is satisfied for RANGE break then only insert the chld lines
     -- for RANGE break bug# 2723612
     -- note for 4061138 continuous breaks: at this point, l_value_to has not
     -- been remapped with the next break's l_setup_value_from, so the between
     -- check may erroneously fail.  Further down the code during remapping
     -- the check if performed again.
     IF ((l_quantity BETWEEN l_setup_value_from AND l_value_to) OR  -- for POINT
         (l_h_price_break_type_code_tbl(i) = G_RANGE_BREAK AND l_quantity >= l_setup_value_from) OR  -- for RANGE
         (l_h_usage_pricing_type_tbl(i) = G_AUTHORING_TYPE) OR -- for AUTHORING call
         (nvl(l_net_amount_flag, 'N') <> 'N')) --[julin/4671446] all net amount breaks pass here, to be qualified during calculation
     THEN
         l_VALID_PBH_FLAG := G_YES;
         IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
         engine_debug('In price break detail');
         END IF;
     END IF;

     -- Invariably insert the line details as we need all the line details even for POINT BREAK
     --IF (l_VALID_PBH_FLAG = G_YES) THEN
         -- julin [3805113]: table of records replaced by record of tables for bulk operations
         /*
         l_line_detail_tbl(N).list_header_id      := l_h_list_header_id_tbl(i);
         l_line_detail_tbl(N).list_line_id        := l_h_list_line_id_tbl(i);
         l_line_detail_tbl(N).list_line_type_code := l_h_list_line_type_code_tbl(i);
         l_line_detail_tbl(N).operand_calculation_code := l_h_arithmetic_operator_tbl(i);
         l_line_detail_tbl(N).operand_value       := l_h_operand_tbl(i);
         l_line_detail_tbl(N).list_price          := l_h_list_price_tbl(i);
         l_line_detail_tbl(N).pricing_group_sequence := l_h_pricing_group_sequence_tbl(i);
         l_line_detail_tbl(N).price_break_type_code  := l_h_price_break_type_code_tbl(i);
         l_line_detail_tbl(N).pricing_phase_id       := l_h_pricing_phase_id_tbl(i);
         l_line_detail_tbl(N).modifier_level_code    := l_h_modifier_level_code_tbl(i);
         l_line_detail_tbl(N).benefit_qty            := l_h_benefit_qty_tbl(i);
         l_line_detail_tbl(N).benefit_uom_code       := l_h_benefit_uom_code_tbl(i);
         l_line_detail_tbl(N).list_line_no           := l_h_list_line_no_tbl(i);
         l_line_detail_tbl(N).accrual_flag           := l_h_accrual_flag_tbl(i);
         l_line_detail_tbl(N).accrual_conversion_rate:= l_h_accrual_conv_rate_tbl(i);
         l_line_detail_tbl(N).estim_accrual_rate     := l_h_estim_accrual_rate_tbl(i);
         l_line_detail_tbl(N).recurring_value        := l_h_recurring_value_tbl(i); -- block pricing
         l_line_attrs_tbl(N).pricing_context         := l_h_pricing_attr_context_tbl(i);
         l_line_attrs_tbl(N).pricing_attribute       := l_h_pricing_attribute_tbl(i);

         l_line_detail_tbl(N).automatic_flag         := l_h_automatic_flag_tbl(i);
         l_line_detail_tbl(N).override_flag          := l_h_override_flag_tbl(i);
         l_line_detail_tbl(N).print_on_invoice_flag  := l_h_print_on_invoice_flag_tbl(i);
         l_line_detail_tbl(N).formula_id             := l_h_price_by_formula_id_tbl(i);
         l_line_detail_tbl(N).rounding_factor        := l_h_rounding_factor_tbl(i); /* Vivek /
         l_line_detail_tbl(N).currency_detail_id     := l_h_currency_detail_id_tbl(i); /* Vivek /
         l_line_detail_tbl(N).currency_header_id     := l_h_currency_header_id_tbl(i); /* Vivek /
         l_line_detail_tbl(N).selling_rounding_factor := l_h_selling_round_factor_tbl(i); /* Vivek /
         l_line_detail_tbl(N).order_currency         := l_h_order_currency_tbl(i); /* Vivek /
         l_line_detail_tbl(N).pricing_effective_date := l_h_pricing_effective_date_tbl(i); /* Vivek /
         l_line_detail_tbl(N).base_currency_code     := l_h_base_currency_code_tbl(i); /* Vivek /
         */
         /* Proration START */
         if l_proration_processed = 'Y' then
           l_h_pricing_attr_val_from_tbl(i) := qp_number.number_to_canonical(l_setup_value_from);
           l_h_pricing_attr_val_to_tbl(i) := qp_number.number_to_canonical(l_value_to);
           if l_continuous_flag = TRUE then
             -- 4061138
             l_h_pricing_attr_val_to_tbl(i-1) := l_h_pricing_attr_val_from_tbl(i);
             -- here, we do the aforementioned BETWEEN check again to catch the
             -- corner case where it failed because l_value_to was not remapped
             IF l_VALID_PBH_FLAG = G_NO and i>1 THEN
               -- only need to recheck the POINT break condition
               IF (l_quantity BETWEEN l_h_pricing_attr_val_from_tbl(i-1)
                   AND l_h_pricing_attr_val_to_tbl(i-1))
               THEN
                 l_VALID_PBH_FLAG := G_YES;
                 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                   engine_debug(l_routine||' * passed between check after continuous break remapping');
                 END IF;
               END IF;
             END IF;
           end if;
         else
           l_h_pricing_attr_val_to_tbl(i) := nvl(l_h_pricing_attr_val_to_tbl(i),l_value_to);
         end if;
         --l_line_attrs_tbl(N).pricing_attr_value_from := l_h_pricing_attr_val_from_tbl(i);
         --l_line_attrs_tbl(N).pricing_attr_value_to   := nvl(l_h_pricing_attr_val_to_tbl(i),l_value_to);
         /* Proration END */

         N:=N+1;
     --END IF;
         l_first_time_flag := 'N';

         l_l_line_detail_index_tbl(i) := GET_LINE_DETAIL_INDEX;

         --VALIDATE price_break_type_code
         IF  (l_h_price_break_type_code_tbl(i) IS NULL) OR
             (l_h_price_break_type_code_tbl(i) NOT IN(G_RANGE_BREAK,G_POINT_BREAK))
         THEN
           --Data error, ignore this goto the end of loop
           RAISE E_INVALID_PRICE_BREAK_TYPE;
         END IF;

         l_l_selected_volume_attr_tbl(i)   := l_selected_volume_attr;
         l_l_G_CHILD_DETAIL_TYPE_tbl(i)    := G_CHILD_DETAIL_TYPE;
         l_l_p_line_index_tbl(i)           := p_line_index;
         l_l_G_STATUS_NEW_tbl(i)           := G_STATUS_NEW;
         l_l_G_NOT_PROCESSED_tbl(i)        := G_NOT_PROCESSED;
         l_l_group_quantity_tbl(i)         := p_group_quantity;
         l_l_group_amount_tbl(i)           := p_group_amount;
         l_l_list_type_code_tbl(i)         := p_list_type_code;
         l_l_G_DETAIL_LEVEL_tbl(i)         := G_DETAIL_LEVEL;
         l_l_G_PRICING_TYPE_tbl(i)         := G_PRICING_TYPE;
         l_l_G_BY_PBH_tbl(i)               := G_BY_PBH;
         l_l_G_OPERATOR_BETWEEN_tbl(i)     := G_OPERATOR_BETWEEN;
         l_l_p_list_line_id_tbl(i)         := p_list_line_id;
         l_l_G_PBH_LINE_tbl(i)             := G_PBH_LINE;
         l_l_G_PROCESSED_tbl(i)            := G_PROCESSED;
         l_l_quantity_tbl(i)               := l_quantity;
         l_l_p_line_detail_index_tbl(i)    := p_line_detail_index;

         -- julin [3805113]: storing to be used in call_calculation_engine()
         G_CHILD_VALUE_FROM_TBL(l_l_line_detail_index_tbl(i)) := l_h_pricing_attr_val_from_tbl(i);
         G_CHILD_VALUE_TO_TBL(l_l_line_detail_index_tbl(i)) := l_h_pricing_attr_val_to_tbl(i);
         G_PARENT_LINE_DETAIL_INDEX_TBL(l_l_line_detail_index_tbl(i)) := l_l_p_line_detail_index_tbl(i);
         -- 4061138
         if l_continuous_flag = TRUE then
           G_CHILD_VALUE_TO_TBL(l_l_line_detail_index_tbl(i-1)) := l_h_pricing_attr_val_from_tbl(i);
         end if;

         l_continuous_flag := FALSE; -- reset every break
END IF;--bug#6896139
END LOOP;
END IF; -- l_h_list_line_id_tbl.COUNT > 0

  --after checking each break line, if any one of the break lines satified, insert all
  --the break lines to qp_npreq_ldets_tmp table and qp_npreq_rltd_lines_tmp table
  --and do not delete the parent line
  -- This flag tells that either it was a range break or atleast one of the break lines was satisfied in case of point break
  IF (l_VALID_PBH_FLAG = G_YES) THEN
    --FOR J IN 1..N-1 LOOP


                IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                engine_debug('Inserting line_detail');
                END IF;

    -- julin [3805113]: bulk insert into qp_npreq_ldets_tmp
    IF (l_l_p_line_index_tbl.COUNT > 0) THEN
      FORALL i in l_l_p_line_index_tbl.FIRST..l_l_p_line_index_tbl.LAST
        INSERT INTO qp_npreq_ldets_tmp
                (LINE_DETAIL_INDEX,
                 LINE_DETAIL_TYPE_CODE,
                 PRICE_BREAK_TYPE_CODE,
                 LINE_INDEX,
                 CREATED_FROM_LIST_HEADER_ID,
                 CREATED_FROM_LIST_LINE_ID,
                 CREATED_FROM_LIST_LINE_TYPE,
                 CREATED_FROM_LIST_TYPE_CODE,
                 PRICING_GROUP_SEQUENCE,
                 PRICING_PHASE_ID,
                 OPERAND_CALCULATION_CODE,
                 OPERAND_VALUE,
                 PRICE_FORMULA_ID,
                 PRICING_STATUS_CODE,
                 PROCESSED_FLAG,
                 AUTOMATIC_FLAG,
                 OVERRIDE_FLAG,
                 PRINT_ON_INVOICE_FLAG,
                 MODIFIER_LEVEL_CODE,
                 BENEFIT_QTY,
                 BENEFIT_UOM_CODE,
                 LIST_LINE_NO,
                 ACCRUAL_FLAG,
                 ACCRUAL_CONVERSION_RATE,
                 ESTIM_ACCRUAL_RATE,
                 RECURRING_VALUE,
                 SELECTED_VOLUME_ATTR,
                 GROUP_QUANTITY,
                 GROUP_AMOUNT,
                 ROUNDING_FACTOR,
                 CURRENCY_DETAIL_ID,
                 CURRENCY_HEADER_ID,
                 SELLING_ROUNDING_FACTOR,
                 ORDER_CURRENCY,
                 PRICING_EFFECTIVE_DATE,
                 BASE_CURRENCY_CODE
                 )
        VALUES (l_l_line_detail_index_tbl(i),
              l_l_G_CHILD_DETAIL_TYPE_tbl(i),
              l_h_price_break_type_code_tbl(i),
              l_l_p_line_index_tbl(i),
              l_h_list_header_id_tbl(i),
              l_h_list_line_id_tbl(i),
              l_h_list_line_type_code_tbl(i),
              l_l_list_type_code_tbl(i),
              l_h_pricing_group_sequence_tbl(i),
              l_h_pricing_phase_id_tbl(i),
              l_h_arithmetic_operator_tbl(i),
              l_h_operand_tbl(i),
              l_h_price_by_formula_id_tbl(i),
              l_l_G_STATUS_NEW_tbl(i),
              l_l_G_NOT_PROCESSED_tbl(i),
              l_h_automatic_flag_tbl(i),
              l_h_override_flag_tbl(i),
              l_h_print_on_invoice_flag_tbl(i),
              l_h_modifier_level_code_tbl(i),
              l_h_BENEFIT_QTY_tbl(i),
              l_h_BENEFIT_UOM_CODE_tbl(i),
              l_h_LIST_LINE_NO_tbl(i),
              l_h_ACCRUAL_FLAG_tbl(i),
              l_h_accrual_conv_rate_tbl(i),
              l_h_ESTIM_ACCRUAL_RATE_tbl(i),
              l_h_RECURRING_VALUE_tbl(i), -- block pricing
              l_l_selected_volume_attr_tbl(i),
              l_l_group_quantity_tbl(i),
              l_l_group_amount_tbl(i),
              l_h_ROUNDING_FACTOR_tbl(i),
              l_h_CURRENCY_DETAIL_ID_tbl(i),
              l_h_CURRENCY_HEADER_ID_tbl(i),
              l_h_selling_round_factor_tbl(i),
              l_h_ORDER_CURRENCY_tbl(i),
              l_h_PRICING_EFFECTIVE_DATE_tbl(i),
              l_h_BASE_CURRENCY_CODE_tbl(i)
             );
    END IF;

     --set the parents PBH type. PBH can be either discount break or price list break
     --also set the processed_flag to indicate that this parent have been processed.

/*
INDX,QP_PREQ_GRP.handle_break.upd3,qp_npreq_ldets_tmp_U1,LINE_DETAIL_INDEX,1
*/
    UPDATE qp_npreq_ldets_tmp  --upd3
    SET processed_flag = G_PROCESSED -- indicates that this PBH is processed
    WHERE line_detail_index = p_line_detail_index;

    IF (G_DEBUG_ENGINE = FND_API.G_TRUE) THEN
     engine_debug('#L1');
    END IF;

    -- julin [3805113]: bulk insert into qp_npreq_line_attrs_tmp
    IF (l_l_p_line_index_tbl.COUNT > 0) THEN
      FORALL J IN l_l_p_line_index_tbl.first..l_l_p_line_index_tbl.last
        INSERT INTO qp_npreq_line_attrs_tmp
         (LINE_INDEX,
          LINE_DETAIL_INDEX,
          ATTRIBUTE_LEVEL,
          ATTRIBUTE_TYPE,
          CONTEXT,
          ATTRIBUTE,
          VALUE_FROM,
          VALUE_TO,
          SETUP_VALUE_FROM,
          SETUP_VALUE_TO,
          PROCESSED_CODE,
          COMPARISON_OPERATOR_TYPE_CODE,
          PRICING_STATUS_CODE
         )
        VALUES (l_l_p_line_index_tbl(J),
              l_l_line_detail_index_tbl(J),
              l_l_G_DETAIL_LEVEL_tbl(J),
              l_l_G_PRICING_TYPE_tbl(J),
              l_h_pricing_attr_context_tbl(J),
              l_h_pricing_attribute_tbl(J),
              l_h_pricing_attr_val_from_tbl(J),
              l_h_pricing_attr_val_to_tbl(J),
              l_h_pricing_attr_val_from_tbl(J),
              l_h_pricing_attr_val_to_tbl(J),
              l_l_G_BY_PBH_tbl(J),
              l_l_G_OPERATOR_BETWEEN_tbl(J),
              l_l_G_STATUS_NEW_tbl(J)
            );
    END IF;

    IF (G_DEBUG_ENGINE = FND_API.G_TRUE) THEN
     engine_debug('#L2');
    END IF;

    -- julin [3805113]: bulk insert into qp_npreq_rltd_lines_tmp
    IF (l_l_p_line_index_tbl.COUNT > 0) THEN
      FORALL J IN l_l_p_line_index_tbl.first..l_l_p_line_index_tbl.last
        INSERT INTO qp_npreq_rltd_lines_tmp
          (LINE_INDEX,
           LINE_DETAIL_INDEX,
           RELATIONSHIP_TYPE_CODE,
           RELATED_LINE_INDEX,
           RELATED_LINE_DETAIL_INDEX,
           PRICING_STATUS_CODE,
           PRICING_STATUS_TEXT,
           LIST_LINE_ID,
           RELATED_LIST_LINE_ID,
           RELATED_LIST_LINE_TYPE,
           OPERAND_CALCULATION_CODE,
           OPERAND,
           PRICING_GROUP_SEQUENCE,
           RELATIONSHIP_TYPE_DETAIL,
           SETUP_VALUE_FROM,
           SETUP_VALUE_TO,
           QUALIFIER_VALUE
          )
        VALUES (l_l_p_line_index_tbl(J),
                l_l_p_line_detail_index_tbl(J),
                l_l_G_PBH_LINE_tbl(J),
                l_l_p_line_index_tbl(J),
                l_l_line_detail_index_tbl(J),
                l_l_G_STATUS_NEW_tbl(J),
                l_l_G_PROCESSED_tbl(J),
                l_l_p_list_line_id_tbl(J),
                l_h_list_line_id_tbl(J),
                l_h_list_line_type_code_tbl(J),
                l_h_arithmetic_operator_tbl(J),
                l_h_operand_tbl(J),
                l_h_pricing_group_sequence_tbl(J),
                l_h_price_break_type_code_tbl(J),
                qp_number.canonical_to_number(l_h_pricing_attr_val_from_tbl(J)),
                qp_number.canonical_to_number(l_h_pricing_attr_val_to_tbl(J)),
                l_l_quantity_tbl(J));
    END IF;

     IF (G_DEBUG_ENGINE = FND_API.G_TRUE) THEN
      engine_debug('#L3');
     END IF;
    --END LOOP;  --END J LOOP

    IF (G_DEBUG_ENGINE = FND_API.G_TRUE) THEN
     engine_debug('#L4');
    END IF;
  ELSE
    --None of the child price break statifies, hence parent is disqualified
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug(l_routine||' CHILD LINES ARE NOT SATISFIED');

   END IF;
   x_is_break_satisfy := FALSE;

  END IF;

    IF (G_DEBUG_ENGINE = FND_API.G_TRUE) THEN
     engine_debug('#L5');
    END IF;

  l_VALID_PBH_FLAG := 'N';
  l_total_item_quantity := NULL; -- shu, reset
  l_quantity := NULL; --shu, reset

EXCEPTION
  WHEN E_INVALID_PRICE_BREAK_TYPE THEN
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('PRICE BREAK TYPE CODE IS NULL OR INVALID');
    END IF;
      SET_STATUS_CODE(G_STATUS_OTHER_ERRORS,
                      'PRICE BREAK TYPE CODE IS EITHER NULL OR INVALID: '||l_h_price_break_type_code_tbl(J)||'list_line_id: '|| l_h_list_line_id_tbl(J),
                       P_LINE_INDEX,
                       NULL,
                      'LINES',
                       l_status_code,
                       l_status_text);
  WHEN E_INVALID_UOM_CONVERSION THEN-- shulin
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  	engine_debug('INVALID UOM CONVERSION FOR TOTAL_ITEM_QUANTITY');
   END IF;
      	SET_STATUS_CODE(G_STATUS_OTHER_ERRORS,
                      'INVALID UOM CONVERSION FOR TOTAL_ITEM_QUANTITY : '||l_status_text,
                       P_LINE_INDEX,
                       NULL,
                      'LINES',
                       l_status_code,
                       l_status_text);
  -- Proration Start
  WHEN e_proration_fac_oks_error then
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  	engine_debug('Error while calling oks api to get proration factor');
   END IF;
      	SET_STATUS_CODE(G_STATUS_OTHER_ERRORS,
                      'Error while calling oks api to get proration factor',
                       P_LINE_INDEX,
                       NULL,
                      'LINES',
                       l_status_code,
                       l_status_text);

  -- Proration End

  WHEN OTHERS THEN
     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
      engine_debug('#Exception L6');
      engine_debug(l_routine || ' ' || SQLERRM);
     END IF;
     x_status_code := FND_API.G_RET_STS_ERROR;
     x_status_text := l_routine||': '||SQLERRM;

END Handle_Break; --end procedure

/*+------------------------------------------------------------
  |delete children pbh lines if the parent fails
  +-----------------------------------------------------------
*/

PROCEDURE Delete_Invalid_PBH_Children(p_line_index IN PLS_INTEGER,
                                      p_pricing_phase_id NUMBER,
                                      x_status_code OUT NOCOPY VARCHAR2,
                                      x_status_text OUT NOCOPY VARCHAR2) AS
/*
INDX,QP_PREQ_GRP.delete_invalid_pbh_children.l_check_deleted_pbh_cur,qp_npreq_ldets_tmp_N3,LINE_INDEX,1
INDX,QP_PREQ_GRP.delete_invalid_pbh_children.l_check_deleted_pbh_cur,qp_npreq_ldets_tmp_N3,PRICING_PHASE_ID,2
INDX,QP_PREQ_GRP.delete_invalid_pbh_children.l_check_deleted_pbh_cur,qp_npreq_ldets_tmp_N3,ASK_FOR_FLAG,3
INDX,QP_PREQ_GRP.delete_invalid_pbh_children.l_check_deleted_pbh_cur,qp_npreq_ldets_tmp_N3,CREATED_FROM_LIST_LINE_TYPE,4
*/
CURSOR l_check_deleted_pbh_cur(p_line_index IN PLS_INTEGER) IS
SELECT line_detail_index
FROM   qp_npreq_ldets_tmp
WHERE  created_from_list_line_type = G_PRICE_BREAK_TYPE
AND   line_index = p_line_index
AND   pricing_phase_id = p_pricing_phase_id
AND   pricing_status_code <> G_STATUS_NEW
AND   nvl(updated_flag,'N') = 'N'; -- to not delete passed adj by the calling app since updated_flag='Y'

l_routine VARCHAR2(240):='QP_PREQ_GRP.Delete_invalid_PBH_Children';
BEGIN
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('in Delete_Invalid_PBH_Children');
  END IF;
  FOR I IN l_check_deleted_pbh_cur(p_line_index) LOOP
/*
INDX,QP_PREQ_GRP.delete_invalid_pbh_children.delete_invalid_pbh_children_upd1,qp_npreq_ldets_tmp_U1,LINE_DETAIL_INDEX,1
*/
/*
INDX,QP_PREQ_GRP.delete_invalid_pbh_children.delete_invalid_pbh_children_sel1,-No Index Used-,NA,NA
*/
    UPDATE qp_npreq_ldets_tmp a
    SET PRICING_STATUS_CODE = G_DELETED_PARENT_FAILS
    WHERE line_detail_index IN
    (SELECT related_line_detail_index
     FROM qp_npreq_rltd_lines_tmp
     WHERE line_detail_index = I.line_detail_index);
/*
INDX,QP_PREQ_GRP.delete_invalid_pbh_children.upd2,-No Index Used-,NA,NA
*/
    UPDATE qp_npreq_rltd_lines_tmp --upd2
    SET PRICING_STATUS_CODE = G_DELETED_PARENT_FAILS
    WHERE line_detail_index = I.line_detail_index;

  END LOOP;

EXCEPTION
  WHEN OTHERS THEN
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug(l_routine||' '||SQLERRM);
   END IF;
   x_status_code := FND_API.G_RET_STS_ERROR;
   x_status_text := l_routine||': '||SQLERRM;
END Delete_Invalid_PBH_Children;

/*+------------------------------------------------------------
 |GET_ELIGIBLE_PRICE_BREAK
 +--------------------------------------------------------------
*/

PROCEDURE GET_ELIGIBLE_PRICE_BREAK(p_pricing_phase_id NUMBER,
                                   p_line_index NUMBER := NULL,
                                   x_status_code OUT NOCOPY VARCHAR2,
                                   x_status_text OUT NOCOPY VARCHAR2)
AS
--Index Certificate
/*
Can use N2 instead of N4
INDX,QP_PREQ_GRP.get_eligible_price_break.l_price_break_parent_cur,qp_npreq_ldets_tmp_N2,PRICING_PHASE_ID,1
INDX,QP_PREQ_GRP.get_eligible_price_break.l_price_break_parent_cur,qp_npreq_ldets_tmp_N2,PRICING_STATUS_CODE,2
INDX,QP_PREQ_GRP.get_eligible_price_break.l_price_break_parent_cur,qp_npreq_ldets_tmp_N2,LINE_INDEX,3
INDX,QP_PREQ_GRP.get_eligible_price_break.l_price_break_parent_cur,qp_npreq_ldets_tmp_N2,CREATED_FROM_LIST_LINE_TYPE,4
*/
-- Do price break processing only for unprocessed lines(line_index) in a phase bug 2386934
-- without the not exists clause price break processing was hapenning 2 times if there is an
-- order line where in price list is not passed and there is an order line where price list was passed and
-- price break processing was done for the passed price list line. Price break processing is hapenning again
-- when big search is done for the line where price list not passed.
-- process only the price break lines that are not processed -- Bug #2717117
CURSOR l_price_break_parent_cur IS
     SELECT /*+ index(a qp_npreq_ldets_tmp_N2) */ --bug 9362867
	    created_from_list_header_id list_header_id , created_from_list_line_id list_line_id,
            group_quantity ,group_amount, line_detail_index, line_index, line_quantity -- 2388011, pbh_grp_lines
            , created_from_list_type_code
     FROM   qp_npreq_ldets_tmp  a
     WHERE  created_from_list_line_type = G_PRICE_BREAK_TYPE
     AND    pricing_status_code = G_STATUS_NEW
     AND    pricing_phase_id = p_pricing_phase_id
     AND    nvl(processed_flag,G_NOT_PROCESSED) = G_NOT_PROCESSED;
     --AND    line_index > 0
     --AND    not exists (select 'X'
     --                   from qp_npreq_rltd_lines_tmp b
     --                   where a.line_index = b.line_index
     --                   and  a.created_from_list_line_id = b.list_line_id
     --                   and  b.relationship_type_code = G_PBH_LINE
     --                   and  nvl(b.pricing_status_text,G_NOT_PROCESSED) <> G_PROCESSED);

     --AND    line_index = nvl(p_line_index,line_index);

l_routine VARCHAR2(240):='Routine: QP_PREQ_GRP.GET_ELIGIBLE_PRICE_BREAK';
l_is_break_satisfy Boolean:=TRUE;
G_LIST_HEADER_ID_TBL_G    NUMBER_TYPE;
G_LIST_LINE_ID_TBL_G      NUMBER_TYPE;
G_GROUP_QUANTITY_TBL_G    NUMBER_TYPE;
G_GROUP_AMOUNT_TBL_G      NUMBER_TYPE;
G_LINE_DETAIL_INDEX_TBL_G NUMBER_TYPE;
G_LINE_INDEX_TBL_G        NUMBER_TYPE;
G_LINE_QUANTITY_TBL_G     NUMBER_TYPE;
G_LIST_TYPE_CODE_TBL_G    VARCHAR_TYPE;
g_failed_ld_tbl_g         NUMBER_TYPE;
v_count                   PLS_INTEGER := 1;
l_status_code             VARCHAR2(30);
l_status_text             VARCHAR2(240);

nROWS CONSTANT NUMBER := 1000;
E_ROUTINE_ERRORS EXCEPTION;

BEGIN
qp_debug_util.tstart('GET_ELIGIBLE_PRICE_BREAK','Procedure GET_ELIGIBLE_PRICE_BREAK');
 OPEN l_price_break_parent_cur;

 LOOP

  G_LIST_HEADER_ID_TBL_G.delete;
  G_LIST_LINE_ID_TBL_G.delete;
  G_GROUP_QUANTITY_TBL_G.delete;
  G_GROUP_AMOUNT_TBL_G.delete;
  G_LINE_DETAIL_INDEX_TBL_G.delete;
  G_LINE_INDEX_TBL_G.delete;
  G_LINE_QUANTITY_TBL_G.delete;
  G_LIST_TYPE_CODE_TBL_G.delete;

 FETCH l_price_break_parent_cur BULK COLLECT INTO
    G_LIST_HEADER_ID_TBL_G
  , G_LIST_LINE_ID_TBL_G
  , G_GROUP_QUANTITY_TBL_G
  , G_GROUP_AMOUNT_TBL_G
  , G_LINE_DETAIL_INDEX_TBL_G
  , G_LINE_INDEX_TBL_G
  , G_LINE_QUANTITY_TBL_G
  , G_LIST_TYPE_CODE_TBL_G LIMIT nROWS;
 EXIT WHEN G_LINE_INDEX_TBL_G.COUNT = 0;

 IF (G_LINE_INDEX_TBL_G.COUNT > 0) THEN
  FOR I in G_LINE_INDEX_TBL_G.FIRST .. G_LINE_INDEX_TBL_G.LAST
  LOOP

     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
      engine_debug('Checking break for: '||g_list_line_id_tbl_g(i) || ' Line Index : ' || g_line_index_tbl_g(i));
     END IF;

     l_is_break_satisfy := TRUE;

     HANDLE_BREAK(p_list_header_id    => g_list_header_id_tbl_g(i),
                  p_list_line_id      => g_list_line_id_tbl_g(i),
                  p_pricing_phase_id  => p_pricing_phase_id,
                  p_line_detail_index => g_line_detail_index_tbl_g(i),
                  p_line_index        => g_line_index_tbl_g(i),
                  p_group_quantity    => g_group_quantity_tbl_g(i),
                  --p_group_amount      => I.group_amount,
                  p_group_amount      => g_line_quantity_tbl_g(i), -- 2388011
                  p_list_type_code      => g_list_type_code_tbl_g(i),
                  x_is_break_satisfy  => l_is_break_satisfy,
                  x_status_code       => l_status_code,
                  x_status_text       => l_status_text);
	 IF l_status_code=FND_API.G_RET_STS_ERROR THEN
	   RAISE E_ROUTINE_ERRORS;
	 END IF;

     IF(l_is_break_satisfy = FALSE) THEN
       v_count := v_count + 1;
       g_failed_ld_tbl_g(v_count) := g_line_detail_index_tbl_g(i);
     END IF;

  END LOOP;
 END IF;
   --END LOOP;
 END LOOP;
 CLOSE l_price_break_parent_cur;

 IF (g_failed_ld_tbl_g.count > 0) THEN
  FORALL i in g_failed_ld_tbl_g.first .. g_failed_ld_tbl_g.last
   UPDATE qp_npreq_ldets_tmp
   SET PRICING_STATUS_CODE = G_DELETED_PBH
   WHERE LINE_DETAIL_INDEX = g_failed_ld_tbl_g(i);
 END IF;

 -- if price break price lists are deleted at this point , then mark the status on the line for
 -- secondary or big search. Do this only for pricing phase
 IF (g_failed_ld_tbl_g.count > 0 and p_pricing_phase_id = G_PRICE_LIST_PHASE_ID) THEN
  -- To make sure lines which did not get the price and do not have a record in qp_npreq_ldets_tmp get picked up
  UPDATE qp_npreq_lines_tmp a
  SET    processed_code = G_STS_LHS_NOT_FOUND
  WHERE  NOT EXISTS (SELECT 'x'
                FROM   qp_npreq_ldets_tmp b
                WHERE a.line_index = b.line_index
                AND   b.pricing_status_code = G_STATUS_NEW
                AND   b.pricing_phase_id = G_PRICE_LIST_PHASE_ID)
  AND   line_type_code <> G_ORDER_LEVEL;

 END IF;
qp_debug_util.tstop('GET_ELIGIBLE_PRICE_BREAK');
EXCEPTION
  WHEN E_ROUTINE_ERRORS THEN
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
      engine_debug(l_routine || ': ' ||l_status_text);
     END IF;
     x_status_code := FND_API.G_RET_STS_ERROR;
     x_status_text := l_routine || ': ' ||l_status_text;
     qp_debug_util.tstop('GET_ELIGIBLE_PRICE_BREAK');
  WHEN OTHERS THEN
     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
      engine_debug(l_routine || ' ' || SQLERRM);
     END IF;
     x_status_code := FND_API.G_RET_STS_ERROR;
     x_status_text := l_routine||' '||SQLERRM;
	qp_debug_util.tstop('GET_ELIGIBLE_PRICE_BREAK');
END Get_Eligible_Price_Break;

/*+--------------------------------------------------------
  | PROCEDURE PERFORM_GROUPING
  +--------------------------------------------------------
*/
PROCEDURE PERFORM_GROUPING(p_pricing_phase_id NUMBER,
                           p_line_index NUMBER := NULL,
                           x_status_code OUT NOCOPY VARCHAR2,
                           x_status_text OUT NOCOPY VARCHAR2) AS

-- Header Level Quals Passed
-- We need to include the records deleted in NOT= and Between Processing here , otherwise the cursor
-- would not fetch any records and grouping would be successful .
-- Even when deleted in NOT= and Between processing they need to go thru grouping and get deleted

/*
INDX,QP_PREQ_GRP.Perform_Grouping.header_level_qual_attrs_cur,qp_npreq_line_attrs_tmp_N5,PRICING_PHASE_ID,1
INDX,QP_PREQ_GRP.Perform_Grouping.header_level_qual_attrs_cur,qp_npreq_line_attrs_tmp_N5,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.Perform_Grouping.header_level_qual_attrs_cur,qp_npreq_line_attrs_tmp_N5,PRICING_STATUS_CODE,3

INDX,QP_PREQ_GRP.Perform_Grouping.header_level_qual_attrs_cur,qp_npreq_ldets_tmp_U1,LINE_DETAIL_INDEX,1

*/

--Pricing Phase Change
CURSOR header_level_qual_attrs_cur IS
SELECT /*+ ORDERED USE_NL(b) index(a qp_preq_line_attrs_tmp_N5) header_level_qual_attrs_cur */
       a.LIST_HEADER_ID,
       a.LIST_LINE_ID,
       a.LINE_INDEX,
       a.GROUPING_NUMBER,
       a.LINE_DETAIL_INDEX,
       COUNT(distinct CONTEXT || ATTRIBUTE || SETUP_VALUE_FROM ) NO_OF_QUALIFIERS_IN_GRP --#bug1761272
FROM   qp_npreq_line_attrs_tmp a,qp_npreq_ldets_tmp b
WHERE  a.PRICING_PHASE_ID = p_pricing_phase_id
AND    a.ATTRIBUTE_TYPE = G_QUALIFIER_TYPE
AND    a.QUALIFIER_TYPE = G_HEADER_QUALIFIER
AND    a.LINE_DETAIL_INDEX = b.LINE_DETAIL_INDEX
AND    b.PRICING_STATUS_CODE = G_STATUS_NEW
AND    a.PRICING_STATUS_CODE IN (G_STATUS_NEW,G_DELETED_EXCLUDER,G_DELETED_BETWEEN)
GROUP  BY a.LIST_HEADER_ID, a.LINE_INDEX,a.LINE_DETAIL_INDEX,a.LIST_LINE_ID,a.GROUPING_NUMBER
ORDER  BY a.LIST_HEADER_ID, a.LINE_INDEX,a.LINE_DETAIL_INDEX,a.LIST_LINE_ID,a.GROUPING_NUMBER ;

-- Index Certificate
--Pricing Phase Change
/*
INDX,QP_PREQ_GRP.Perform_Grouping.line_level_qual_attrs_cur2,qp_npreq_line_attrs_tmp_N5,PRICING_PHASE_ID,1
INDX,QP_PREQ_GRP.Perform_Grouping.line_level_qual_attrs_cur2,qp_npreq_line_attrs_tmp_N5,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.Perform_Grouping.line_level_qual_attrs_cur2,qp_npreq_line_attrs_tmp_N5,PRICING_STATUS_CODE,3

INDX,QP_PREQ_GRP.Perform_Grouping.line_level_qual_attrs_cur2,qp_npreq_ldets_tmp_U1,LINE_DETAIL_INDEX,1

*/

CURSOR line_level_qual_attrs_cur2 IS
SELECT /*+ ORDERED USE_NL(b) index(a qp_preq_line_attrs_tmp_N5) line_level_qual_attrs_cur2 */
       a.LIST_HEADER_ID,
       a.LIST_LINE_ID,
       a.LINE_INDEX,
       a.GROUPING_NUMBER,
       a.LINE_DETAIL_INDEX,
       COUNT(distinct CONTEXT || ATTRIBUTE || SETUP_VALUE_FROM ) NO_OF_QUALIFIERS_IN_GRP --#bug1761272
FROM   qp_npreq_line_attrs_tmp a,qp_npreq_ldets_tmp b
WHERE  a.PRICING_PHASE_ID = p_pricing_phase_id
AND    a.ATTRIBUTE_TYPE = G_QUALIFIER_TYPE
AND    a.QUALIFIER_TYPE = G_LINE_QUALIFIER
AND    a.PRICING_STATUS_CODE IN (G_STATUS_NEW,G_DELETED_EXCLUDER,G_DELETED_BETWEEN)
AND    a.LINE_DETAIL_INDEX = b.LINE_DETAIL_INDEX
AND    b.PRICING_STATUS_CODE = G_STATUS_NEW
GROUP  BY a.LIST_HEADER_ID, a.LINE_INDEX,a.LINE_DETAIL_INDEX,a.LIST_LINE_ID,a.GROUPING_NUMBER
ORDER  BY a.LIST_HEADER_ID, a.LINE_INDEX,a.LINE_DETAIL_INDEX,a.LIST_LINE_ID,a.GROUPING_NUMBER ;

-- Get the count of records where Price list is a qualifier(for secondary price lists only)
/*
INDX,QP_PREQ_GRP.perform_grouping.hdr_lvl_setup_pl_quals_cur,QP_QUALIFIERS_N1,LIST_HEADER_ID,1
INDX,QP_PREQ_GRP.perform_grouping.hdr_lvl_setup_pl_quals_cur,QP_QUALIFIERS_N1,LIST_LINE_ID,2

INDX,QP_PREQ_GRP.perform_grouping.hdr_lvl_setup_pl_quals_cur,QP_LIST_HEADERS_B_PK,LIST_HEADER_ID,1
*/
CURSOR hdr_lvl_setup_pl_quals_cur(p_list_header_id  NUMBER) IS
SELECT COUNT(*) NO_OF_QUALIFIERS_IN_GRP
FROM   QP_QUALIFIERS a , QP_LIST_HEADERS_B b
WHERE  a.LIST_HEADER_ID = p_list_header_id
AND    a.list_line_id = -1
AND    a.QUALIFIER_CONTEXT = 'MODLIST'
AND    a.QUALIFIER_ATTRIBUTE = 'QUALIFIER_ATTRIBUTE4'
AND    a.LIST_HEADER_ID = b.LIST_HEADER_ID
AND    b.LIST_TYPE_CODE IN ('AGR', 'PRL') ;

-- Get the count of records where Price list is a qualifier(for secondary price lists only)
/*
INDX,QP_PREQ_GRP.perform_grouping.line_level_setup_pl_quals_cur,QP_QUALIFIERS_N1,LIST_HEADER_ID,1
INDX,QP_PREQ_GRP.perform_grouping.line_level_setup_pl_quals_cur,QP_QUALIFIERS_N1,LIST_LINE_ID,2

INDX,QP_PREQ_GRP.perform_grouping.line_level_setup_pl_quals_cur,QP_LIST_HEADERS_B_PK,LIST_HEADER_ID,1
*/

CURSOR line_level_setup_pl_quals_cur(p_list_header_id  NUMBER,
							  p_list_line_id    NUMBER) IS
SELECT COUNT(*) NO_OF_QUALIFIERS_IN_GRP
FROM   QP_QUALIFIERS a , QP_LIST_HEADERS_B b
WHERE  a.LIST_HEADER_ID = p_list_header_id
AND    a.list_line_id = p_list_line_id
AND    a.QUALIFIER_CONTEXT = 'MODLIST'
AND    a.QUALIFIER_ATTRIBUTE = 'QUALIFIER_ATTRIBUTE4'
AND    a.LIST_HEADER_ID = b.LIST_HEADER_ID
AND    b.LIST_TYPE_CODE IN ('AGR', 'PRL') ;


/*
INDX,QP_PREQ_GRP.perform_grouping.header_level_setup_quals_cur,QP_QUALIFIERS_N1,LIST_HEADER_ID,1
INDX,QP_PREQ_GRP.perform_grouping.header_level_setup_quals_cur,QP_QUALIFIERS_N1,LIST_LINE_ID,2
INDX,QP_PREQ_GRP.perform_grouping.header_level_setup_quals_cur,QP_QUALIFIERS_N1,QUALIFIER_GROUPING_NO,3
*/
CURSOR header_level_setup_quals_cur(p_list_header_id  NUMBER,
                                    p_grouping_number NUMBER) IS
SELECT COUNT(*) NO_OF_QUALIFIERS_IN_GRP
FROM   QP_QUALIFIERS a
WHERE  a.LIST_HEADER_ID = p_list_header_id
AND    a.list_line_id = -1
AND    a.qualifier_grouping_no = p_grouping_number ;
--AND    COMPARISON_OPERATOR_CODE <> 'NOT =';

--Null grouping number under same list_header_id is also an 'AND' condition
--for all groups that share the same list_header_id.
--That is, it need to present for a modifier/price list to get selected. Hence
--it need to be condisered when counting number of  qualifier in group

/*
INDX,QP_PREQ_GRP.perform_grouping.header_setup_null_group_cur,QP_QUALIFIERS_N1,LIST_HEADER_ID,1
*/
CURSOR header_setup_null_group_cur(p_list_header_id NUMBER) IS
SELECT count(*)
FROM   qp_qualifiers
WHERE  list_header_id = p_list_header_id
AND    qualifier_grouping_no = -1
AND    list_line_id = -1;
--AND    comparison_operator_code <> 'NOT =';

--count including null and not null group
/*
INDX,QP_PREQ_GRP.perform_grouping.header_setup_null_group_cur2,QP_QUALIFIERS_N1,LIST_HEADER_ID,1
INDX,QP_PREQ_GRP.perform_grouping.header_setup_null_group_cur2,QP_QUALIFIERS_N1,LIST_LINE_ID,2
INDX,QP_PREQ_GRP.perform_grouping.header_setup_null_group_cur2,QP_QUALIFIERS_N1,COMPARISON_OPERATOR_CODE,4
*/
CURSOR header_setup_null_group_cur2(p_list_header_id NUMBER) IS
SELECT count(*)
FROM   qp_qualifiers
WHERE  list_header_id = p_list_header_id
AND    list_line_id = -1
AND    comparison_operator_code <> 'NOT =';


/*
INDX,QP_PREQ_GRP.perform_grouping.line_setup_null_group_cur,QP_QUALIFIERS_N1,LIST_HEADER_ID,1
INDX,QP_PREQ_GRP.perform_grouping.line_setup_null_group_cur,QP_QUALIFIERS_N1,LIST_LINE_ID,2
INDX,QP_PREQ_GRP.perform_grouping.line_setup_null_group_cur,QP_QUALIFIERS_N1,QUALIFIER_GROUPING_NO,3
*/
CURSOR line_setup_null_group_cur(p_list_header_id NUMBER,
                                 p_list_line_id   NUMBER) IS
SELECT count(*)
FROM   qp_qualifiers
WHERE  list_header_id = p_list_header_id
AND    list_line_id   = p_list_line_id
AND    qualifier_grouping_no = -1;
--AND    comparison_operator_code <> 'NOT =';

--count including null and not null group for line level qualifier
/*
INDX,QP_PREQ_GRP.perform_grouping.line_setup_null_group_cur2,QP_QUALIFIERS_N1,LIST_HEADER_ID,1
INDX,QP_PREQ_GRP.perform_grouping.line_setup_null_group_cur2,QP_QUALIFIERS_N1,LIST_LINE_ID,2
*/
CURSOR line_setup_null_group_cur2(p_list_header_id NUMBER,p_list_line_id NUMBER) IS
SELECT count(*)
FROM   qp_qualifiers
WHERE  list_header_id = p_list_header_id
AND    list_line_id = p_list_line_id;
--AND    comparison_operator_code <> 'NOT =';

/*
-- Can use N2 instead of N6 , but a better index is needed for this query
*/
CURSOR line_level_qual_attrs_cur(p_list_header_id NUMBER,
                                 p_list_line_id   NUMBER) IS
SELECT LIST_HEADER_ID,
       LIST_LINE_ID ,
       LINE_INDEX,
       GROUPING_NUMBER,
       LINE_DETAIL_INDEX,
       COUNT(distinct CONTEXT || ATTRIBUTE || SETUP_VALUE_FROM ) NO_OF_QUALIFIERS_IN_GRP --#bug1761272
FROM   qp_npreq_line_attrs_tmp
WHERE  ATTRIBUTE_TYPE = G_QUALIFIER_TYPE
AND    QUALIFIER_TYPE = G_LINE_QUALIFIER
AND    PRICING_STATUS_CODE IN (G_STATUS_NEW,G_DELETED_EXCLUDER,G_DELETED_BETWEEN)
AND    LIST_HEADER_ID = p_list_header_id
AND    LIST_LINE_ID = p_list_line_id
--AND    LINE_INDEX = nvl(p_line_index,LINE_INDEX)
GROUP  BY LIST_HEADER_ID,LIST_LINE_ID,LINE_INDEX,LINE_DETAIL_INDEX,GROUPING_NUMBER
ORDER  BY LIST_HEADER_ID,LIST_LINE_ID,LINE_INDEX,LINE_DETAIL_INDEX,GROUPING_NUMBER ;

/*
INDX,QP_PREQ_GRP.perform_grouping.line_level_setup_quals_cur,QP_QUALIFIERS_N1,LIST_HEADER_ID,1
INDX,QP_PREQ_GRP.perform_grouping.line_level_setup_quals_cur,QP_QUALIFIERS_N1,LIST_LINE_ID,2
INDX,QP_PREQ_GRP.perform_grouping.line_level_setup_quals_cur,QP_QUALIFIERS_N1,QUALIFIER_GROUPING_NO,3
*/
CURSOR line_level_setup_quals_cur(p_list_header_id NUMBER,
                                  p_list_line_id   NUMBER,
                                  p_grouping_no    NUMBER) IS
SELECT COUNT(*) NO_OF_QUALIFIERS_IN_GRP
FROM   QP_QUALIFIERS a
WHERE  a.LIST_HEADER_ID = p_list_header_id
AND    a.list_line_id   = p_list_line_id
AND    a.qualifier_grouping_no = p_grouping_no;
--AND    COMPARISON_OPERATOR_CODE <> 'NOT =';

--check if there is header_level_qual passed in at all
/*
INDX,QP_PREQ_GRP.perform_grouping.header_level_quals_exist_cur,qp_npreq_line_attrs_tmp_N1,LINE_INDEX,1
INDX,QP_PREQ_GRP.perform_grouping.header_level_quals_exist_cur,qp_npreq_line_attrs_tmp_N1,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.perform_grouping.header_level_quals_exist_cur,qp_npreq_line_attrs_tmp_N1,PRICING_STATUS_CODE,3
INDX,QP_PREQ_GRP.perform_grouping.header_level_quals_exist_cur,qp_npreq_line_attrs_tmp_N1,LIST_HEADER_ID,4
-- Change
*/
CURSOR header_level_quals_exist_cur(p_list_header_id NUMBER,p_line_index PLS_INTEGER) IS
SELECT 'X'
FROM   qp_npreq_line_attrs_tmp
WHERE  list_header_id = p_list_header_id
AND    line_index     = p_line_index
AND    ATTRIBUTE_TYPE = G_QUALIFIER_TYPE
AND    QUALIFIER_TYPE = G_HEADER_QUALIFIER
AND    PRICING_STATUS_CODE = G_STATUS_NEW;

/*
INDX,QP_PREQ_GRP.perform_grouping.line_lvl_setup_exist_cur,QP_QUALIFIERS_N1,LIST_HEADER_ID,1
INDX,QP_PREQ_GRP.perform_grouping.line_lvl_setup_exist_cur,QP_QUALIFIERS_N1,LIST_LINE_ID,2
*/
CURSOR line_lvl_setup_exist_cur(p_list_header_id NUMBER,
                                p_list_line_id   NUMBER) IS
SELECT 'X'
FROM   qp_qualifiers
WHERE  list_header_id = p_list_header_id
AND    list_line_id = p_list_line_id;

/*
INDX,QP_PREQ_GRP.perform_grouping.hdr_lvl_setup_quals_exist_cur,QP_QUALIFIERS_N1,LIST_HEADER_ID,1
INDX,QP_PREQ_GRP.perform_grouping.hdr_lvl_setup_quals_exist_cur,QP_QUALIFIERS_N1,LIST_LINE_ID,2
*/
CURSOR hdr_lvl_setup_quals_exist_cur(p_list_header_id NUMBER) IS
SELECT 'X'
FROM qp_qualifiers
WHERE LIST_HEADER_ID = p_list_header_id
AND   list_line_id = -1;

-- volume attributes that are sourced in engine , we do not want to look at these attrs when doing product grouping
-- Quantity Attribute and Line Amount Attribute
-- Need not actually look at Pricing attribute , because there is always a product associated with it
-- When looking at pricing attributes , we need to get distinct pricing attributes as , a same pricing attribute for the
-- same list line id and line index can be there in the temp table more than once. Combination of Context and Attribute's
-- distinctness is what is looked for

/*
INDX,QP_PREQ_GRP.perform_grouping.product_level_attrs_cur,QP_RLTD_MODIFIERS_N2,TO_RLTD_MODIFIER_ID,1
*/

/*
INDX,QP_PREQ_GRP.Perform_Grouping.product_level_attrs_cur,qp_npreq_line_attrs_tmp_N5,PRICING_PHASE_ID,1
INDX,QP_PREQ_GRP.Perform_Grouping.product_level_attrs_cur,qp_npreq_line_attrs_tmp_N5,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.Perform_Grouping.product_level_attrs_cur,qp_npreq_line_attrs_tmp_N5,PRICING_STATUS_CODE,3

INDX,QP_PREQ_GRP.Perform_Grouping.product_level_attrs_cur,qp_npreq_ldets_tmp_U1,LINE_DETAIL_INDEX,1

*/
--Pricing Phase Change
CURSOR product_level_attrs_cur IS
SELECT /*+ ORDERED USE_NL(b) index(a qp_preq_line_attrs_tmp_N5) index(b QP_PREQ_LDETS_TMP_U1) product_level_attrs_cur */   --5658579
       a.LIST_HEADER_ID , a.LIST_LINE_ID , a.LINE_INDEX,
       SUM(distinct(decode(a.attribute_type,G_PRODUCT_TYPE,1,0))) +
       COUNT(distinct(decode(a.attribute_type,G_PRICING_TYPE, a.context || ' ' || a.attribute || ' ' || setup_value_from ,NULL)))
										NO_OF_PATTS_IN_GRP -- Bug No: 7129919
FROM   qp_npreq_line_attrs_tmp a  , qp_npreq_ldets_tmp b
WHERE  a.PRICING_PHASE_ID = p_pricing_phase_id
AND    a.CONTEXT <> G_PRIC_VOLUME_CONTEXT
AND    a.ATTRIBUTE_TYPE in ( G_PRICING_TYPE,G_PRODUCT_TYPE)
AND    a.PRICING_STATUS_CODE = G_STATUS_NEW
AND    a.LINE_DETAIL_INDEX = b.LINE_DETAIL_INDEX
AND    b.PRICING_STATUS_CODE = G_STATUS_NEW
AND    NOT EXISTS (SELECT 'X'
	           FROM QP_RLTD_MODIFIERS b
	           WHERE a.LIST_LINE_ID = b.TO_RLTD_MODIFIER_ID
                   and b.rltd_modifier_grp_type <> 'COUPON') -- 5439022
GROUP  BY a.LIST_HEADER_ID , a.LIST_LINE_ID,a.LINE_INDEX;

/*
INDX,QP_PREQ_GRP.perform_grouping.product_level_setup_attrs_cur,QP_PRICING_ATTRIBUTES_N2,LIST_LINE_ID,1
INDX,QP_PREQ_GRP.perform_grouping.product_level_setup_attrs_cur,QP_PRICING_ATTRIBUTES_N2,EXCLUDER_FLAG,2
*/
CURSOR product_level_setup_attrs_cur(p_list_line_id NUMBER) IS
SELECT COUNT(*) NO_OF_PATTS_IN_GRP
FROM   QP_PRICING_ATTRIBUTES a
WHERE  a.LIST_LINE_ID = p_list_line_id
AND    a.EXCLUDER_FLAG <> G_YES;
--AND    a.PRICING_ATTRIBUTE_CONTEXT IS NOT NULL
--GROUP  BY LIST_LINE_ID,ATTRIBUTE_GROUPING_NO;

/*
INDX,QP_PREQ_GRP.perform_grouping.is_not_null_grp_exists,QP_QUALIFIERS_N1,LIST_HEADER_ID,1
INDX,QP_PREQ_GRP.perform_grouping.is_not_null_grp_exists,QP_QUALIFIERS_N1,LIST_LINE_ID,2
INDX,QP_PREQ_GRP.perform_grouping.is_not_null_grp_exists,QP_QUALIFIERS_N1,QUALIFIER_GROUPING_NO,3
*/
CURSOR is_not_null_grp_exists (p_list_header_id NUMBER ,p_list_line_id NUMBER) IS
SELECT 'X'
FROM   qp_qualifiers
WHERE  list_header_id = p_list_header_id
AND    list_line_id   = p_list_line_id
AND    qualifier_grouping_no <> -1;

/*
INDX,QP_PREQ_GRP.perform_grouping.is_not_null_grp_passed,qp_npreq_line_attrs_tmp_N1,LINE_INDEX,1
INDX,QP_PREQ_GRP.perform_grouping.is_not_null_grp_passed,qp_npreq_line_attrs_tmp_N1,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.perform_grouping.is_not_null_grp_passed,qp_npreq_line_attrs_tmp_N1,PRICING_STATUS_CODE,3
INDX,QP_PREQ_GRP.perform_grouping.is_not_null_grp_passed,qp_npreq_line_attrs_tmp_N1,LIST_HEADER_ID,4
INDX,QP_PREQ_GRP.perform_grouping.is_not_null_grp_passed,qp_npreq_line_attrs_tmp_N1,LIST_LINE_ID,5
-- This query is tuned for performance , expect some issues here with functionality
*/
CURSOR is_not_null_grp_passed (p_line_index PLS_INTEGER ,p_list_line_id NUMBER,p_list_header_id NUMBER) IS
SELECT 'X'
FROM   qp_npreq_line_attrs_tmp
WHERE  line_index = p_line_index
AND    list_line_id   = p_list_line_id
AND    list_header_id = p_list_header_id
AND    attribute_type = G_QUALIFIER_TYPE
AND    qualifier_type = G_LINE_QUALIFIER
AND    pricing_status_code = G_STATUS_NEW -- Expect a bug with this join condition
AND    grouping_number <> -1;

/*
INDX,QP_PREQ_GRP.perform_grouping.is_not_null_grp_exists2,QP_QUALIFIERS_N1,LIST_HEADER_ID,1
INDX,QP_PREQ_GRP.perform_grouping.is_not_null_grp_exists2,QP_QUALIFIERS_N1,LIST_LINE_ID,2
INDX,QP_PREQ_GRP.perform_grouping.is_not_null_grp_exists2,QP_QUALIFIERS_N1,QUALIFIER_GROUPING_NO,3
*/
CURSOR is_not_null_grp_exists2 (p_list_header_id NUMBER) IS
SELECT 'X'
FROM   qp_qualifiers
WHERE  list_header_id = p_list_header_id
AND    list_line_id = -1
AND    qualifier_grouping_no <> -1;

/*
INDX,QP_PREQ_GRP.perform_grouping.is_not_null_grp_passed2,qp_npreq_line_attrs_tmp_N1,LINE_INDEX,1
INDX,QP_PREQ_GRP.perform_grouping.is_not_null_grp_passed,qp_npreq_line_attrs_tmp_N1,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.perform_grouping.is_not_null_grp_passed,qp_npreq_line_attrs_tmp_N1,PRICING_STATUS_CODE,3
INDX,QP_PREQ_GRP.perform_grouping.is_not_null_grp_passed2,qp_npreq_line_attrs_tmp_N1,LIST_HEADER_ID,4
-- Change
*/
CURSOR is_not_null_grp_passed2 (p_line_index PLS_INTEGER ,p_list_header_id NUMBER) IS
SELECT 'X'
FROM   qp_npreq_line_attrs_tmp
WHERE  line_index = p_line_index
AND    list_header_id   = p_list_header_id
AND    attribute_type = G_QUALIFIER_TYPE
AND    qualifier_type   = G_HEADER_QUALIFIER
AND    pricing_status_code = G_STATUS_NEW -- Expect a bug with this join condition
AND    grouping_number <> -1;

-- This cursor would get the count of records that got deleted as part of NOT= and Between for
-- header level qualifiers. This count is deleted from the actual passed in qualifier count
-- Then the resulting count of qualifiers is compared with the count in the setup

/*
INDX,QP_PREQ_GRP.perform_grouping.get_excluded_hdr_quals,qp_npreq_line_attrs_tmp_N1,LINE_INDEX,1
INDX,QP_PREQ_GRP.perform_grouping.get_excluded_hdr_quals,qp_npreq_line_attrs_tmp_N1,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.perform_grouping.get_excluded_hdr_quals,qp_npreq_line_attrs_tmp_N1,PRICING_STATUS_CODE,3
INDX,QP_PREQ_GRP.perform_grouping.get_excluded_hdr_quals,qp_npreq_line_attrs_tmp_N1,LIST_HEADER_ID,4
*/
CURSOR get_excluded_hdr_quals(p_line_index PLS_INTEGER,
						p_list_header_id PLS_INTEGER ,
						p_grouping_no PLS_INTEGER) IS
SELECT COUNT(*)
FROM   qp_npreq_line_attrs_tmp
WHERE  LINE_INDEX = p_line_index
AND    LIST_HEADER_ID = p_list_header_id
AND    nvl(GROUPING_NUMBER,0) = nvl(p_grouping_no,0)
AND    PRICING_STATUS_CODE IN (G_DELETED_EXCLUDER , G_DELETED_BETWEEN)
AND    ATTRIBUTE_TYPE = G_QUALIFIER_TYPE
AND    QUALIFIER_TYPE = G_HEADER_QUALIFIER;

-- This cursor would get the count of records that got deleted as part of NOT= and Between for
-- line level qualifiers

/*
INDX,QP_PREQ_GRP.perform_grouping.get_excluded_line_quals,qp_npreq_line_attrs_tmp_N1,LINE_INDEX,1
INDX,QP_PREQ_GRP.perform_grouping.get_excluded_line_quals,qp_npreq_line_attrs_tmp_N1,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.perform_grouping.get_excluded_line_quals,qp_npreq_line_attrs_tmp_N1,PRICING_STATUS_CODE,3
INDX,QP_PREQ_GRP.perform_grouping.get_excluded_line_quals,qp_npreq_line_attrs_tmp_N1,LIST_HEADER_ID,4
INDX,QP_PREQ_GRP.perform_grouping.get_excluded_line_quals,qp_npreq_line_attrs_tmp_N1,LIST_LINE_ID,5
*/
CURSOR get_excluded_line_quals(p_line_index PLS_INTEGER,
						 p_list_header_id PLS_INTEGER ,
						 p_list_line_id PLS_INTEGER,
                               p_grouping_no PLS_INTEGER) IS
SELECT COUNT(*)
FROM   qp_npreq_line_attrs_tmp
WHERE  LINE_INDEX = p_line_index
AND    LIST_HEADER_ID = p_list_header_id
AND    LIST_LINE_ID = p_list_line_id
AND    nvl(GROUPING_NUMBER,0) = nvl(p_grouping_no,0)
AND    PRICING_STATUS_CODE IN (G_DELETED_EXCLUDER , G_DELETED_BETWEEN)
AND    ATTRIBUTE_TYPE = G_QUALIFIER_TYPE
AND    QUALIFIER_TYPE = G_LINE_QUALIFIER;

-- This cursor would get the count of records that got deleted as part of Between for product (Volume based
-- discounts like ITEM_QUANTITY and ITEM_AMOUNT)

/*
INDX,QP_PREQ_GRP.perform_grouping.get_excluded_prods_between,qp_npreq_line_attrs_tmp_N1,LINE_INDEX,1
INDX,QP_PREQ_GRP.perform_grouping.get_excluded_prods_between,qp_npreq_line_attrs_tmp_N1,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.perform_grouping.get_excluded_prods_between,qp_npreq_line_attrs_tmp_N1,PRICING_STATUS_CODE,3
INDX,QP_PREQ_GRP.perform_grouping.get_excluded_prods_between,qp_npreq_line_attrs_tmp_N1,LIST_HEADER_ID,4
INDX,QP_PREQ_GRP.perform_grouping.get_excluded_prods_between,qp_npreq_line_attrs_tmp_N1,LIST_LINE_ID,5
*/
--[julin/4744915/5139512] modified sql
CURSOR get_excluded_prods_between(p_line_index PLS_INTEGER,
					 p_list_header_id PLS_INTEGER,
					 p_list_line_id PLS_INTEGER) IS
SELECT 1
FROM DUAL
WHERE EXISTS
(SELECT 'x'
FROM   QP_PREQ_LINE_ATTRS_TMP
WHERE  LINE_INDEX = p_line_index
AND    LIST_HEADER_ID = p_list_header_id
AND    LIST_LINE_ID = p_list_line_id
AND    PRICING_STATUS_CODE = G_DELETED_BETWEEN
AND    ATTRIBUTE_TYPE = G_PRICING_TYPE);

/*
SELECT COUNT(*)
FROM   qp_npreq_line_attrs_tmp
WHERE  LINE_INDEX = p_line_index
AND    LIST_HEADER_ID = p_list_header_id
AND    LIST_LINE_ID = p_list_line_id
AND    PRICING_STATUS_CODE = G_DELETED_BETWEEN
AND    ATTRIBUTE_TYPE = G_PRICING_TYPE;
*/

v_list_header_id 	 		NUMBER;
v_list_hdr_id				NUMBER;
v_list_line_id		          NUMBER;
v_line_index				NUMBER;
v_grouping_number			NUMBER;
v_line_detail_index			NUMBER;
v_no_of_qualifiers_in_grp	NUMBER;
v_setup_list_header_id   	NUMBER;
v_passed_line_level_quals_flag	VARCHAR2(30):= 'FALSE';
v_price_list_count              NUMBER;
l_dummy                         VARCHAR2(1);
l_setup_null_grp_cnt         PLS_INTEGER:=0;
l_null_grp_cnt               PLS_INTEGER:=0;
l_diff_list_header_id        NUMBER;
l_diff_line_index            PLS_INTEGER;
l_diff_line_detail_index     PLS_INTEGER;
l_setup_grp_count            PLS_INTEGER;
l_excluded_count             PLS_INTEGER;
l_null_excl_count            PLS_INTEGER;
l_null_excl_count1           PLS_INTEGER;
l_null_excl_count2           PLS_INTEGER;
l_excl_prod_count            PLS_INTEGER;
l_excl_prod_count1           PLS_INTEGER;

l_setup_null_grp_cnt2        PLS_INTEGER:=0;
l_null_grp_cnt2              PLS_INTEGER:=0;
l_diff_list_header_id2       NUMBER;
l_diff_list_line_id2         NUMBER;
l_diff_line_index2           PLS_INTEGER;
l_diff_line_detail_index2    PLS_INTEGER;
l_setup_grp_count2           PLS_INTEGER;
l_has_setup_line_lvl         BOOLEAN:= FALSE;
l_has_passed_in_line_lvl     BOOLEAN:= FALSE;
l_deleted_flag               BOOLEAN:= FALSE;
l_passed_in_cnt              PLS_INTEGER;
l_passed_in_cnt2             PLS_INTEGER;
l_passed_in_cnt3             PLS_INTEGER;
l_del_tbl                    PLS_INTEGER_TYPE;
l_success_tbl                PLS_INTEGER_TYPE;
l_ind                        BINARY_INTEGER:=0;
l_success_ind                BINARY_INTEGER:=0;
l_success_ind_flag           VARCHAR2(1);
l_index                      BINARY_INTEGER:=0;
l_status_text                VARCHAR2(240);
nROWS                        CONSTANT NUMBER := 1000;
E_ROUTINE_ERRORS EXCEPTION;

BEGIN

  qp_debug_util.tstart('PERFORM_GROUPING','Perform Grouping');
  x_status_code := FND_API.G_RET_STS_SUCCESS;

  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('Grouping begin');
  engine_debug('Pricing phase id: ' || p_pricing_phase_id);

  END IF;
  -- Header Level Qualifiers Grouping
  --grouping for the records with header level qualifies
  -- +/- line level qualifiers.

  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('In grouping');
    END IF;
    FOR i IN header_level_qual_attrs_cur LOOP
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('-----------------------');
    engine_debug('list_header_id:'||i.list_header_id);
    engine_debug('list_line_id:'||i.list_line_id);
    engine_debug('line_index:'||i.line_index);
    engine_debug('grouping no:'||i.grouping_number);
    engine_debug('line detail index:'||i.line_detail_index);
    engine_debug('Qualifiers in Grp:'||i.NO_OF_QUALIFIERS_IN_GRP);
    END IF;
    END LOOP;
  END IF;

l_status_text := '#1';

IF (p_pricing_phase_id = G_PRICE_LIST_PHASE_ID) THEN

  FOR i IN header_level_qual_attrs_cur LOOP
	v_line_index := i.LINE_INDEX;
     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('Header Level Qualifier Attributes Passed');

     END IF;
        --this group is an AND condition for all qualifiers under the same header
        IF i.GROUPING_NUMBER = -1 THEN
          l_null_excl_count := 0;
          l_null_grp_cnt := i.NO_OF_QUALIFIERS_IN_GRP;
          l_passed_in_cnt := i.NO_OF_QUALIFIERS_IN_GRP;
          l_diff_list_header_id := i.list_header_id;
          l_diff_line_index     := i.line_index;
          l_diff_line_detail_index := i.line_detail_index;
        ELSIF (i.list_header_id = l_diff_list_header_id)
          AND (i.line_index = l_diff_line_index)
          AND (i.line_detail_index = l_diff_line_detail_index) THEN
          l_passed_in_cnt := l_null_grp_cnt + i.NO_OF_QUALIFIERS_IN_GRP;
          NULL;
          --If no change then
          --do nothing, l_null_grp_cnt from prveious loop is still good
        ELSE   --list header has changed, reset the count and previous list_header_id etc
          l_null_grp_cnt := 0;
          l_null_excl_count := 0;
          l_diff_list_header_id    := -1975;
          l_diff_line_index        := -1975;
          l_diff_line_detail_index := -1975;
          l_passed_in_cnt :=  i.NO_OF_QUALIFIERS_IN_GRP;
        END IF;

     --Now working on setup grp count
     IF i.grouping_number = -1 THEN
       OPEN header_setup_null_group_cur(i.LIST_HEADER_ID);
       FETCH  header_setup_null_group_cur INTO l_setup_null_grp_cnt;
       CLOSE  header_setup_null_group_cur;
       l_setup_grp_count:=l_setup_null_grp_cnt;
     ELSE
       OPEN header_level_setup_quals_cur(i.LIST_HEADER_ID,i.grouping_number);
       FETCH  header_level_setup_quals_cur INTO l_setup_grp_count;
       CLOSE header_level_setup_quals_cur;

       OPEN header_setup_null_group_cur(i.LIST_HEADER_ID);
       FETCH header_setup_null_group_cur INTO l_setup_null_grp_cnt;
       CLOSE header_setup_null_group_cur;

       l_setup_grp_count:= l_setup_grp_count + l_setup_null_grp_cnt;

     END IF;

	   -- Delete the no of quals where pl is a qualifier(for price lists only)
	   OPEN  hdr_lvl_setup_pl_quals_cur(i.list_header_id);
	   FETCH hdr_lvl_setup_pl_quals_cur INTO v_price_list_count;
	   CLOSE hdr_lvl_setup_pl_quals_cur;

     l_setup_grp_count:= l_setup_grp_count -  v_price_list_count ;

     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('Checking header lvl qualifier count');
     engine_debug('Header Level Qualifiers in setup: '||l_setup_grp_count);

     END IF;
	-- Init
	l_excluded_count :=0;
	--l_null_excl_count := 0;

	-- Determine actual passed in count
	OPEN get_excluded_hdr_quals(i.line_index,i.list_header_id,i.grouping_number);
	FETCH get_excluded_hdr_quals into l_excluded_count;
	CLOSE get_excluded_hdr_quals;

     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('Excluded quals : '||l_excluded_count || '  Grouping Number:' || i.grouping_number);

     END IF;
	-- l_null_excl_count is applicable when NOT= , or BETWEEN is there on the NULL grouping number
	-- and that gets D_EXCL or D_BETWEEN.
	-- Then the actual passed in count will be other grp count(ex:grp no 1 ) + null_grp_count -
	-- l_null_excl_count
	-- l_excluded_count is for getting the excluded records for that particular grp no

	IF (i.grouping_number = -1) THEN
	 l_null_excl_count := l_excluded_count;
	 l_passed_in_cnt := l_passed_in_cnt - nvl(l_excluded_count,0);
     ELSE
	 l_passed_in_cnt := l_passed_in_cnt - nvl(l_excluded_count,0) - nvl(l_null_excl_count,0);
	END IF;

     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('Null Excluded quals : '||l_null_excl_count);
     engine_debug('Header Level Qualifiers passsed in: '||l_passed_in_cnt);

     END IF;
     IF (l_passed_in_cnt >= l_setup_grp_count) THEN
       --l_success_ind := l_success_ind+1;
       --l_success_tbl(l_success_ind):= i.LINE_DETAIL_INDEX;

       l_deleted_flag := FALSE;
	  l_success_ind_flag := G_NO;
       IF i.grouping_number = -1 THEN
          --check if this is a pure null grp
               OPEN is_not_null_grp_exists2(i.list_header_id);
               FETCH is_not_null_grp_exists2 into l_dummy;
               IF is_not_null_grp_exists2%FOUND THEN
                   --is not a pure null grp, then check if any other grp passed in
                   OPEN is_not_null_grp_passed2(i.line_index,i.list_header_id);
                   FETCH is_not_null_grp_passed2 into l_dummy;
                   IF is_not_null_grp_passed2%NOTFOUND THEN
                     -- other required grp is not passed
                       IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                       engine_debug('Update #7');
                       END IF;
                      l_deleted_flag := TRUE;
                      l_ind := l_ind+1;
                      l_del_tbl(l_ind):= i.LINE_DETAIL_INDEX;
                   END IF;
                   CLOSE is_not_null_grp_passed2;
               ELSE
                IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                engine_debug ('Successful on Header Level Quals Success Flag');
                END IF;
			 l_success_ind_flag := G_YES; -- Mark it as success , for line level quals evaluation
       		  --l_success_ind := l_success_ind+1;
       		  --l_success_tbl(l_success_ind):= i.LINE_DETAIL_INDEX;
               END IF; --is a pure null grp
               CLOSE is_not_null_grp_exists2;
       ELSE
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug ('Successful on Header Level Quals Success Flag Not null Group');
        END IF;
	   l_success_ind_flag := G_YES;
        --l_success_ind := l_success_ind+1;
        --l_success_tbl(l_success_ind):= i.LINE_DETAIL_INDEX;
       END IF;

   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
	  engine_debug('Line Level Quals LH Id :' || i.list_header_id);
	  engine_debug('Line Level Quals LL Id :' || i.list_line_id);

   END IF;
       OPEN line_lvl_setup_exist_cur(i.LIST_HEADER_ID,i.list_line_id);
       FETCH line_lvl_setup_exist_cur INTO l_dummy;
       l_has_setup_line_lvl := FALSE;
       l_has_passed_in_line_lvl := FALSE;

       IF line_lvl_setup_exist_cur%FOUND AND l_deleted_flag = FALSE THEN      --has line level qualifiers
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
		engine_debug('Has Line Level Qualifiers');
  END IF;
          l_has_setup_line_lvl := TRUE;
          FOR k IN line_level_qual_attrs_cur(i.LIST_HEADER_ID,i.list_line_id) LOOP
            l_has_passed_in_line_lvl := TRUE;
            IF k.GROUPING_NUMBER = -1 THEN
              l_null_grp_cnt2 := k.NO_OF_QUALIFIERS_IN_GRP;
              l_null_excl_count1 := 0;
              l_passed_in_cnt2 := k.NO_OF_QUALIFIERS_IN_GRP;
              l_diff_list_header_id2 := k.list_header_id;
              l_diff_list_line_id2   := k.list_line_id;
              l_diff_line_index2     := k.line_index;
              l_diff_line_detail_index2 := k.line_detail_index;
            ELSIF (k.list_header_id = l_diff_list_header_id2)
                  AND (k.list_line_id = l_diff_list_line_id2)
                  AND (k.line_index = l_diff_line_index2)
                  AND (k.line_detail_index = l_diff_line_detail_index2) THEN
                  NULL;
                  l_passed_in_cnt2 :=  k.NO_OF_QUALIFIERS_IN_GRP + l_null_grp_cnt2;
            ELSE
              l_passed_in_cnt2 := k.NO_OF_QUALIFIERS_IN_GRP;
              l_null_grp_cnt2:= 0;
              l_null_excl_count1 := 0;
              l_diff_list_header_id2 := -1975;
              l_diff_list_line_id2   := -1975;
              l_diff_line_index2     := -1975;
              l_diff_line_detail_index2 := -1975;
            END IF;

        IF k.grouping_number = -1 THEN
          OPEN line_setup_null_group_cur(K.list_header_id,K.list_line_id);
          FETCH line_setup_null_group_cur INTO l_setup_grp_count2;
          CLOSE line_setup_null_group_cur;
          IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
          engine_debug('Setup grp null cnt: '||l_setup_grp_count2);
          END IF;
        ELSE
          OPEN line_setup_null_group_cur(K.list_header_id,K.list_line_id);
          FETCH line_setup_null_group_cur INTO l_setup_null_grp_cnt2;
          CLOSE line_setup_null_group_cur;

          OPEN line_level_setup_quals_cur(K.list_header_id,K.list_line_id,K.grouping_number);
          FETCH line_level_setup_quals_cur INTO l_setup_grp_count2;
          CLOSE line_level_setup_quals_cur;

          IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
          engine_debug('setup grp cnt: '||l_setup_grp_count2);
          END IF;
          l_setup_grp_count2 := l_setup_grp_count2 + l_setup_null_grp_cnt2;
        END IF;

	      -- Delete the no of quals where pl is a qualifier(for price lists only)
	      OPEN  line_level_setup_pl_quals_cur(K.list_header_id,K.list_line_id);
	      FETCH line_level_setup_pl_quals_cur INTO v_price_list_count;
	      CLOSE line_level_setup_pl_quals_cur;

        l_setup_grp_count2 := l_setup_grp_count2 - v_price_list_count;

         IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
         engine_debug('Null Line Level Quals count in Setup: '||l_setup_null_grp_cnt2);
         engine_debug('Passed in null line level quals count: '|| l_null_grp_cnt2);

         END IF;
	    -- Init
	    l_excluded_count :=0;
	    --l_null_excl_count1 := 0;

	    -- Determine actual passed in count
	    OPEN  get_excluded_line_quals(k.line_index,k.list_header_id,k.list_line_id,k.grouping_number);
	    FETCH get_excluded_line_quals into l_excluded_count;
	    CLOSE get_excluded_line_quals;

         IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
         engine_debug('Excluded Line quals : '||l_excluded_count);

         END IF;
	    IF (i.grouping_number = -1) THEN
	     l_null_excl_count1 := l_excluded_count;
	     l_passed_in_cnt2 := l_passed_in_cnt2 - nvl(l_excluded_count,0);
            ELSE
	     l_passed_in_cnt2 := l_passed_in_cnt2 - nvl(l_excluded_count,0) - nvl(l_null_excl_count1,0);
	    END IF;

         IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
         engine_debug('Passed in line lvl count: '||l_passed_in_cnt2);
         engine_debug('Line Level Quals count in Setup: '||l_setup_grp_count2);

         END IF;
         IF(l_passed_in_cnt2 >= l_setup_grp_count2) THEN
             IF k.grouping_number = -1 THEN
               IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
               engine_debug('Line Level Quals #123');
               END IF;
                --check if this is a pure null grp, if no, and other
               OPEN is_not_null_grp_exists(k.list_header_id,k.list_line_id);
               FETCH is_not_null_grp_exists into l_dummy;
               IF is_not_null_grp_exists%FOUND THEN
                   --is not a pure null grp, then check if any other grp passed in
                   OPEN is_not_null_grp_passed(k.line_index,k.list_line_id,k.list_header_id);
                   FETCH is_not_null_grp_passed into l_dummy;
                   IF is_not_null_grp_passed%NOTFOUND THEN
                     --no other required grp passed
                       IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                       engine_debug('Update #7');
                       END IF;
                      l_ind := l_ind+1;
                      l_del_tbl(l_ind):= k.LINE_DETAIL_INDEX;
                   END IF;
                   CLOSE is_not_null_grp_passed;
               ELSE
                 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                 engine_debug('Pure Null Line Level Quals #124');
                 END IF;
   	            l_success_ind := l_success_ind+1;
                 l_success_tbl(l_success_ind):= i.line_detail_index;
               END IF; --is a pure null grp
               CLOSE is_not_null_grp_exists;
             ELSE  -- not a null group approve the line
       		l_success_ind := l_success_ind+1;
       	     l_success_tbl(l_success_ind):= k.LINE_DETAIL_INDEX;
             END IF;
         ELSE -- Count did not match
             IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
             engine_debug ('Not successful on the Line Level Qualifiers Count Mismatch: ' || k.LIST_LINE_ID);
             engine_debug('The whole List Line is getting deleted');
             engine_debug('Update #1');
             END IF;
             l_ind := l_ind+1;
             l_del_tbl(l_ind):= k.LINE_DETAIL_INDEX;
         END IF;
      END LOOP; --end K loop
       --we need to delete lists that has line lvl qualifier but not passed in.
       IF (l_has_passed_in_line_lvl = FALSE) THEN
            IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
            engine_debug ('Fails in line lvl bcause exists in Setup but Not Passed');
            engine_debug('List header id that has line level qualifier:'|| i.list_header_id);
            engine_debug('The whole List Line is getting deleted#1');
            engine_debug('Update #2');
            END IF;
            l_ind := l_ind+1;
            l_del_tbl(l_ind):= i.LINE_DETAIL_INDEX;
       END IF;
    ELSE
     -- No line level qualifiers exist , but header level quals satisfied
     IF(l_success_ind_flag = G_YES) THEN
       IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
       engine_debug('Header Level Quals satisfied and no line level quals exist');
       END IF;
   	  l_success_ind := l_success_ind+1;
       l_success_tbl(l_success_ind):= i.line_detail_index;
     END IF;
    END IF;  -- end if for line_lvl_setup_exist_cur%FOUND
    CLOSE line_lvl_setup_exist_cur;
  ELSE  --else for if (i.NO_OF_QUALIFIER_IN_GRP + l_null_grp_cnt >= l_setup_grp_count)
     --grouping count did not match for header level qualifier
     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('Header lvl qualifier doesn''t match');
     engine_debug('Update #3');
     END IF;
     l_ind := l_ind+1;
     l_del_tbl(l_ind):= i.LINE_DETAIL_INDEX;
  END IF; --end if for if (i.NO_OF_QUALIFIER_IN_GRP + l_null_grp_cnt >= l_setup_grp_count)
 END LOOP; --end i loop
 l_status_text := '#2';

 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
 engine_debug('Deleted Line Details in Table');
 END IF;
 FOR i in 1..l_del_tbl.count
 LOOP
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('Line Detail Index: ' || l_del_tbl(i));
   END IF;
 END LOOP;

 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
 engine_debug('Successful Line Details in Table');
 END IF;
 FOR i in 1..l_success_tbl.count
 LOOP
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('Line Detail Index: ' || l_success_tbl(i));
   END IF;
 END LOOP;

 IF l_del_tbl.FIRST IS NOT NULL THEN
   FORALL i in l_del_tbl.FIRST..l_del_tbl.LAST
/*
INDX,QP_PREQ_GRP.perform_grouping.upd1,qp_npreq_ldets_tmp_U1,LINE_DETAIL_INDEX,1
*/
   UPDATE qp_npreq_ldets_tmp --upd1
   SET PRICING_STATUS_CODE = G_DELETED_GRP,
       PRICING_STATUS_TEXT = 'Deleted in header+/-line grouping'
   WHERE line_detail_index = l_del_tbl(i);

   /* FORALL i in l_del_tbl.FIRST..l_del_tbl.LAST
   UPDATE qp_npreq_line_attrs_tmp
   SET    PRICING_STATUS_CODE = G_DELETED_GRP,
          PRICING_STATUS_TEXT = 'Deleted in header +/- line grouping'
   WHERE line_detail_index = l_del_tbl(i)
   AND   ATTRIBUTE_TYPE = G_QUALIFIER_TYPE; */

 END IF;

 IF l_success_tbl.FIRST IS NOT NULL THEN
   FORALL i in l_success_tbl.FIRST..l_success_tbl.LAST
/*
INDX,QP_PREQ_GRP.perform_grouping.upd2,qp_npreq_ldets_tmp_U1,LINE_DETAIL_INDEX,1
*/
   UPDATE qp_npreq_ldets_tmp --upd2
   SET PRICING_STATUS_CODE = G_STATUS_NEW
   WHERE line_detail_index = l_success_tbl(i);

   /* FORALL i in l_success_tbl.FIRST..l_success_tbl.LAST
   UPDATE qp_npreq_line_attrs_tmp
   SET    PRICING_STATUS_CODE = G_STATUS_NEW
   WHERE line_detail_index = l_success_tbl(i)
   AND   ATTRIBUTE_TYPE = G_QUALIFIER_TYPE; */

 END IF;

 l_del_tbl.delete;
 l_success_tbl.delete;
 l_ind:=0;
 l_success_ind:=0;
 l_status_text :='#3';

  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('In Pure Line Level grouping');
    END IF;
    FOR k IN line_level_qual_attrs_cur2 LOOP
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('-----------------------');
    engine_debug('list_header_id:'||k.list_header_id);
    engine_debug('list_line_id:'||k.list_line_id);
    engine_debug('line_index:'||k.line_index);
    engine_debug('grouping no:'||k.grouping_number);
    engine_debug('line detail index:'||k.line_detail_index);
    engine_debug('Qualifiers in Grp:'||k.NO_OF_QUALIFIERS_IN_GRP);
    END IF;
    END LOOP;
  END IF;

  --grouping for the records with ONLY line level qualifies
  FOR k in line_level_qual_attrs_cur2 LOOP
      IF k.GROUPING_NUMBER = -1 THEN
              l_null_grp_cnt2 := k.NO_OF_QUALIFIERS_IN_GRP;
              l_null_excl_count2 := 0;
              l_passed_in_cnt3 :=  k.NO_OF_QUALIFIERS_IN_GRP;
              l_diff_list_header_id2 := k.list_header_id;
              l_diff_list_line_id2   := k.list_line_id;
              l_diff_line_index2     := k.line_index;
              l_diff_line_detail_index2 := k.line_detail_index;
            ELSIF (k.list_header_id = l_diff_list_header_id2)
                  AND (k.list_line_id = l_diff_list_line_id2)
                  AND (k.line_index = l_diff_line_index2)
                  AND (k.line_detail_index = l_diff_line_detail_index2) THEN
                  NULL;
                  --if l_null_grp_cnt2 set by previous loop then add that
                  l_passed_in_cnt3 := k.NO_OF_QUALIFIERS_IN_GRP + l_null_grp_cnt2;
            ELSE
              l_null_grp_cnt2:= 0;
              l_null_excl_count2 := 0;
              l_diff_list_header_id2 := -1976;
              l_diff_list_line_id2   := -1976;
              l_diff_line_index2     := -1976;
              l_diff_line_detail_index2 := -1976;
              l_passed_in_cnt3 := k.NO_OF_QUALIFIERS_IN_GRP;
            END IF;

        --now working on setup grouping
         IF k.grouping_number = -1 THEN
          OPEN line_setup_null_group_cur(K.list_header_id,K.list_line_id);
          FETCH line_setup_null_group_cur INTO l_setup_grp_count2;
          CLOSE line_setup_null_group_cur;
        ELSE
          OPEN line_setup_null_group_cur(K.list_header_id,K.list_line_id);
          FETCH line_setup_null_group_cur INTO l_setup_null_grp_cnt2;
          CLOSE line_setup_null_group_cur;

          OPEN line_level_setup_quals_cur(K.list_header_id,K.list_line_id,K.grouping_number);
          FETCH line_level_setup_quals_cur INTO l_setup_grp_count2;
          CLOSE line_level_setup_quals_cur;

          l_setup_grp_count2 := l_setup_grp_count2 + l_setup_null_grp_cnt2;
        END IF;

	      -- Delete the no of quals where pl is a qualifier(for price lists only)
	      OPEN  line_level_setup_pl_quals_cur(K.list_header_id,K.list_line_id);
	      FETCH line_level_setup_pl_quals_cur INTO v_price_list_count;
	      CLOSE line_level_setup_pl_quals_cur;

        l_setup_grp_count2 := l_setup_grp_count2 - v_price_list_count;

	   -- Init
	   l_excluded_count :=0;
	   --l_null_excl_count2 := 0;

	   -- Determine actual passed in count
	   OPEN get_excluded_line_quals(k.line_index,k.list_header_id,k.list_line_id,k.grouping_number);
	   FETCH get_excluded_line_quals into l_excluded_count;
	   CLOSE get_excluded_line_quals;

        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug('Excluded Pure Line Level quals : '||l_excluded_count);

        END IF;
	   -- l_null_excl_count is applicable when NOT= is there on the NULL grouping number and that gets D_EXCL
	   -- Then the actual passed in count will be other grp count(ex:grp no 1 ) +
	   -- null_grp_count - l_null_excl_count

	   IF (k.grouping_number = -1 ) THEN
	    l_null_excl_count2 := l_excluded_count;
	    l_passed_in_cnt3 := l_passed_in_cnt3 - nvl(l_excluded_count,0);
        ELSE
	    l_passed_in_cnt3 := l_passed_in_cnt3 - nvl(l_excluded_count,0) - nvl(l_null_excl_count2,0);
	   END IF;

         IF(l_passed_in_cnt3 >= l_setup_grp_count2) THEN

             --check if this is a pure null grp, if no, and other
             --not null grps are not passed then delete them.
             --if yes, then approve this line (do nothing).

             IF k.grouping_number = -1 THEN
               OPEN is_not_null_grp_exists(k.list_header_id,k.list_line_id);
               FETCH is_not_null_grp_exists into l_dummy;
               IF is_not_null_grp_exists%FOUND THEN
                   --is not a pure null grp, then check if any other grp passed in
                   OPEN is_not_null_grp_passed(k.line_index,k.list_line_id,k.list_header_id);
                   FETCH is_not_null_grp_passed into l_dummy;
                   IF is_not_null_grp_passed%NOTFOUND THEN
                     --no other required grp passed
                       IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                       engine_debug('Update #6');
                       END IF;
                       l_ind := l_ind+1;
                       l_del_tbl(l_ind):= k.LINE_DETAIL_INDEX;
                   END IF;
                   CLOSE is_not_null_grp_passed;
               ELSE
       		    l_success_ind := l_success_ind+1;
       	         l_success_tbl(l_success_ind):= k.LINE_DETAIL_INDEX;
               END IF;
               CLOSE is_not_null_grp_exists;
             ELSE
                   OPEN hdr_lvl_setup_quals_exist_cur(k.list_header_id);
                   FETCH hdr_lvl_setup_quals_exist_cur into l_dummy;
                   IF hdr_lvl_setup_quals_exist_cur%FOUND THEN
                     OPEN header_level_quals_exist_cur(K.list_header_id,K.line_index);
                     FETCH  header_level_quals_exist_cur INTO l_dummy;
                     --If in setup it has header level qualifier, it must fullfill the header grouping first
                     --if this is the case, the pricing_status_code should have been updated by
                     --previous header_level +/- line level check operation. It didn't get updated
                     --that means no header level qualifier has passed in, hence we need to eliminate this
                     --list line
                     IF header_level_quals_exist_cur%NOTFOUND THEN
                       IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                       engine_debug('--------------------------------------');
                       engine_debug('Deleting list line id:'||K.list_line_id);
                       engine_debug('Update #4');
                       END IF;
                       l_ind := l_ind+1;
                       l_del_tbl(l_ind):= k.LINE_DETAIL_INDEX;
                     ELSE
       		        l_success_ind := l_success_ind+1;
       	             l_success_tbl(l_success_ind):= k.LINE_DETAIL_INDEX;
                     END IF;
                     CLOSE  header_level_quals_exist_cur;
                   ELSE
       		      l_success_ind := l_success_ind+1;
       	           l_success_tbl(l_success_ind):= k.LINE_DETAIL_INDEX;
                   END IF;
                 CLOSE hdr_lvl_setup_quals_exist_cur;
             END IF;

         ELSE -- Count did not match
             IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
             engine_debug ('Not successful on the Line Level Qualifiers Count Mismatch: ' || k.LIST_LINE_ID);
             engine_debug('The whole List Line is getting deleted');
               engine_debug('Update #5');

             END IF;
              l_ind := l_ind+1;
              l_del_tbl(l_ind):= k.LINE_DETAIL_INDEX;

         END IF;
      END LOOP; --end K loop
 l_status_text := '#4';

 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
 engine_debug('Deleted Line Details in Pure Line Grouping Table');
 END IF;
 FOR i in 1..l_del_tbl.count
 LOOP
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('Line Detail Index: ' || l_del_tbl(i));
   END IF;
 END LOOP;

 IF l_del_tbl.FIRST IS NOT NULL THEN
   FORALL i in l_del_tbl.FIRST..l_del_tbl.LAST
/*
INDX,QP_PREQ_GRP.perform_grouping.upd3,qp_npreq_ldets_tmp_U1,LINE_DETAIL_INDEX,1
*/
   UPDATE qp_npreq_ldets_tmp --upd3
   SET PRICING_STATUS_CODE = G_DELETED_GRP,
       PRICING_STATUS_TEXT = 'Deleted in pure line grouping'
   WHERE line_detail_index = l_del_tbl(i);

   /* FORALL i in l_del_tbl.FIRST..l_del_tbl.LAST
   UPDATE qp_npreq_line_attrs_tmp
   SET    PRICING_STATUS_CODE = G_DELETED_GRP,
          PRICING_STATUS_TEXT = 'Deleted in pure line grouping'
   WHERE line_detail_index = l_del_tbl(i)
   AND   ATTRIBUTE_TYPE = G_QUALIFIER_TYPE; */

 END IF;

 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
 engine_debug('Successful Line Details in Pure Line Grouping Table');
 END IF;
 FOR i in 1..l_success_tbl.count
 LOOP
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('Line Detail Index: ' || l_success_tbl(i));
   END IF;
 END LOOP;

 IF l_success_tbl.FIRST IS NOT NULL THEN
   FORALL i in l_success_tbl.FIRST..l_success_tbl.LAST
/*
INDX,QP_PREQ_GRP.perform_grouping.upd4,qp_npreq_ldets_tmp_U1,LINE_DETAIL_INDEX,1
*/
   UPDATE qp_npreq_ldets_tmp --upd4
   SET PRICING_STATUS_CODE = G_STATUS_NEW
   WHERE line_detail_index = l_success_tbl(i);

   /* FORALL i in l_success_tbl.FIRST..l_success_tbl.LAST
   UPDATE qp_npreq_line_attrs_tmp
   SET    PRICING_STATUS_CODE = G_STATUS_NEW
   WHERE line_detail_index = l_success_tbl(i)
   AND   ATTRIBUTE_TYPE = G_QUALIFIER_TYPE; */

 END IF;

 l_del_tbl.delete;
 l_success_tbl.delete;
 l_ind:=0;
 l_success_ind:=0;

END IF;

 l_status_text := '#5';
  -- product grouping

OPEN product_level_attrs_cur;

LOOP
  G_LIST_HEADER_ID_TBL_G.delete;
  G_LIST_LINE_ID_TBL_G.delete;
  G_LINE_INDEX_TBL_G.delete;
  G_NO_OF_PATTS_IN_GRP_TBL_G.delete;

FETCH product_level_attrs_cur BULK COLLECT INTO
    G_LIST_HEADER_ID_TBL_G
  , G_LIST_LINE_ID_TBL_G
  , G_LINE_INDEX_TBL_G
  , G_NO_OF_PATTS_IN_GRP_TBL_G LIMIT nROWS;
EXIT WHEN G_LINE_INDEX_TBL_G.COUNT = 0;

 IF (G_LINE_INDEX_TBL_G.COUNT > 0) THEN
  FOR I in G_LINE_INDEX_TBL_G.FIRST .. G_LINE_INDEX_TBL_G.LAST
  LOOP
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('Went into product grouping');

   END IF;
   OPEN  get_excluded_prods_between(G_LINE_INDEX_TBL_G(I),G_LIST_HEADER_ID_TBL_G(I),G_LIST_LINE_ID_TBL_G(I));
   FETCH get_excluded_prods_between INTO l_excl_prod_count;
   CLOSE get_excluded_prods_between;

   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('Product list line id:'||G_LIST_LINE_ID_TBL_G(I));
   engine_debug('Product Between Exclude Count:'||l_excl_prod_count);

   END IF;
   -- If this line already got deleted as part of between , then delete this line
   IF (l_excl_prod_count > 0 ) THEN
       IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
       engine_debug('Getting Deleted in Product Grouping');

       END IF;
/*
INDX,QP_PREQ_GRP.perform_grouping.upd5,qp_npreq_ldets_tmp_N1,LINE_INDEX,1
INDX,QP_PREQ_GRP.perform_grouping.upd5,qp_npreq_ldets_tmp_N1,PRICING_PHASE_ID,2
INDX,QP_PREQ_GRP.perform_grouping.upd5,qp_npreq_ldets_tmp_N1,PRICING_STATUS_CODE,3
INDX,QP_PREQ_GRP.perform_grouping.upd5,qp_npreq_ldets_tmp_N1,CREATED_FROM_LIST_HEADER_ID,4
INDX,QP_PREQ_GRP.perform_grouping.upd5,qp_npreq_ldets_tmp_N1,CREATED_FROM_LIST_LINE_ID,5
*/
       UPDATE qp_npreq_ldets_tmp --upd5
       SET PRICING_STATUS_CODE = G_DELETED_GRP
       WHERE PRICING_PHASE_ID = p_pricing_phase_id
       AND   PRICING_STATUS_CODE = G_STATUS_NEW
       AND   CREATED_FROM_LIST_HEADER_ID = G_LIST_HEADER_ID_TBL_G(I)
       AND   CREATED_FROM_LIST_LINE_ID = G_LIST_LINE_ID_TBL_G(I)
       AND   LINE_INDEX = G_LINE_INDEX_TBL_G(I);

       /* UPDATE qp_npreq_ldets_tmp
       SET PRICING_STATUS_CODE = G_DELETED_GRP
       WHERE CREATED_FROM_LIST_LINE_ID = G_LIST_LINE_ID_TBL_G(I)
       AND   LINE_INDEX = G_LINE_INDEX_TBL_G(I); */

       /* UPDATE qp_npreq_line_attrs_tmp
       SET PRICING_STATUS_CODE = G_DELETED_GRP
       WHERE LIST_LINE_ID = G_LIST_LINE_ID_TBL_G(I)
       AND LINE_INDEX = G_LINE_INDEX_TBL_G(I); */

   ELSE
    FOR j IN product_level_setup_attrs_cur(G_LIST_LINE_ID_TBL_G(I))
    LOOP

     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('product level attrs no '||g_no_of_patts_in_grp_tbl_g(I));
     engine_debug('product level set up attrs no '||j.no_of_patts_in_grp);

     END IF;
     IF (G_NO_OF_PATTS_IN_GRP_TBL_G(I) = j.NO_OF_PATTS_IN_GRP) THEN
       IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
       engine_debug ('Successful on the product grouping: ' || G_LIST_LINE_ID_TBL_G(I));
       END IF;
     ELSE
       IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
       engine_debug('Getting Deleted in Product Grouping');
       END IF;
/*
INDX,QP_PREQ_GRP.perform_grouping.upd6,qp_npreq_ldets_tmp_N1,LINE_INDEX,1
INDX,QP_PREQ_GRP.perform_grouping.upd6,qp_npreq_ldets_tmp_N1,PRICING_PHASE_ID,2
INDX,QP_PREQ_GRP.perform_grouping.upd6,qp_npreq_ldets_tmp_N1,PRICING_STATUS_CODE,3
INDX,QP_PREQ_GRP.perform_grouping.upd6,qp_npreq_ldets_tmp_N1,CREATED_FROM_LIST_HEADER_ID,4
INDX,QP_PREQ_GRP.perform_grouping.upd6,qp_npreq_ldets_tmp_N1,CREATED_FROM_LIST_LINE_ID,5
*/
       UPDATE qp_npreq_ldets_tmp --upd6
       SET PRICING_STATUS_CODE = G_DELETED_GRP
       WHERE PRICING_PHASE_ID = p_pricing_phase_id
       AND   PRICING_STATUS_CODE = G_STATUS_NEW
       AND   CREATED_FROM_LIST_HEADER_ID = G_LIST_HEADER_ID_TBL_G(I)
       AND   CREATED_FROM_LIST_LINE_ID = G_LIST_LINE_ID_TBL_G(I)
       AND   LINE_INDEX = G_LINE_INDEX_TBL_G(I);

       /* UPDATE qp_npreq_ldets_tmp
       SET PRICING_STATUS_CODE = G_DELETED_GRP
       WHERE CREATED_FROM_LIST_LINE_ID = G_LIST_LINE_ID_TBL_G(I)
       AND   LINE_INDEX = G_LINE_INDEX_TBL_G(I); */

       /* UPDATE qp_npreq_line_attrs_tmp
       SET PRICING_STATUS_CODE = G_DELETED_GRP
       WHERE LIST_LINE_ID = G_LIST_LINE_ID_TBL_G(I)
       AND LINE_INDEX = G_LINE_INDEX_TBL_G(I); */

     END IF;
    END LOOP;
   END IF;
  END LOOP;
 END IF;

END LOOP;
CLOSE product_level_attrs_cur;

  -- Update all the records with pricing_status_code= 'T' to 'N'
  /* UPDATE qp_npreq_line_attrs_tmp
  SET PRICING_STATUS_CODE = G_STATUS_NEW
  WHERE PRICING_STATUS_CODE = G_STATUS_NEW
  AND   LINE_INDEX = nvl(p_line_index,LINE_INDEX);

  --Update all the line details records with pricing_status_code = 'T' to 'N'
  UPDATE qp_npreq_ldets_tmp a
  SET PRICING_STATUS_CODE = G_STATUS_NEW
  WHERE   PRICING_PHASE_ID = p_pricing_phase_id
  AND PRICING_STATUS_CODE = G_STATUS_NEW
  AND   LINE_INDEX = nvl(p_line_index,LINE_INDEX); */
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('grouping ends');
  END IF;
  qp_debug_util.tstop('PERFORM_GROUPING');
EXCEPTION
WHEN OTHERS THEN
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug(SQLERRM);
  END IF;
  x_status_code:= FND_API.G_RET_STS_ERROR;
  x_status_text:= 'In perform grouping '||SQLERRM||' '||l_status_text;
END PERFORM_GROUPING;

/*+--------------------------------------------------------
  | PROCEDURE Update_Price_List_Information
  +--------------------------------------------------------
*/

PROCEDURE Update_Price_List_Information(
  p_freeze_override_flag IN VARCHAR2,
  x_status_code OUT NOCOPY VARCHAR2,
  x_status_text OUT NOCOPY VARCHAR2) AS

  l_routine VARCHAR2(240):='QP_PREQ_GRP.Update_Price_List_Information';

BEGIN

--Update The Request Lines That Have
--No List Header Passed , so that big search can look at it
IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug ('In Procedure Update_Price_List_Information...');
END IF;
/*
INDX,QP_PREQ_GRP.update_price_list_information.update_price_list_information_sel1,qp_npreq_line_attrs_tmp_N1,LINE_INDEX,1
INDX,QP_PREQ_GRP.update_price_list_information.update_price_list_information_sel1,qp_npreq_line_attrs_tmp_N1,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.update_price_list_information.update_price_list_information_sel1,qp_npreq_line_attrs_tmp_N1,PRICING_STATUS_CODE,3
*/
IF (G_PRICE_PHASE_FLAG = TRUE ) THEN -- Ravi
UPDATE /*+ dynamic_sampling(1) */ qp_npreq_lines_tmp a
SET    processed_code = G_NO_LIST_PASSED,
       validated_flag = G_NO
WHERE  not exists (SELECT 'x'
                   FROM qp_npreq_line_attrs_tmp b
                   WHERE a.line_index = b.line_index
		   AND   b.context in (G_LIST_HEADER_CONTEXT,G_LIST_LINE_CONTEXT)
		   AND   b.attribute_type = G_QUALIFIER_TYPE
		   AND   b.pricing_status_code  = G_STATUS_UNCHANGED)
AND   nvl(PROCESSED_CODE,'X') <> G_BY_ENGINE
AND  (price_flag = G_YES OR --[julin/4708044]
      (price_flag = G_PHASE AND p_freeze_override_flag = G_YES));
END IF;

IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug ('after update1...');
END IF;

/*
INDX,QP_PREQ_GRP.update_price_list_information.update_price_list_information_upd3,qp_npreq_lines_tmp_N3,VALIDATED_FLAG,1
*/
/*
INDX,QP_PREQ_GRP.update_price_list_information.update_price_list_information_sel2,qp_npreq_line_attrs_tmp_N2,PRICING_STATUS_CODE,1
INDX,QP_PREQ_GRP.update_price_list_information.update_price_list_information_sel2,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.update_price_list_information.update_price_list_information_sel2,qp_npreq_line_attrs_tmp_N2,CONTEXT,3
INDX,QP_PREQ_GRP.update_price_list_information.update_price_list_information_sel2,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE,4
INDX,QP_PREQ_GRP.update_price_list_information.update_price_list_information_sel2,qp_npreq_line_attrs_tmp_N2,LINE_INDEX,5
*/

IF (G_PRICE_PHASE_FLAG = TRUE ) THEN -- Ravi

--[julin/pricebook] added hint
--[julin/5223502] price_list_header_id directly passed in via lines_tmp has precedence over sourced value
UPDATE /*+ dynamic_sampling(1) */ qp_npreq_lines_tmp  a
SET  (price_list_header_id,validated_flag)  =
(SELECT /*+ index(b QP_PREQ_LINE_ATTRS_TMP_N2) */ distinct
        CASE WHEN (a.PRICE_LIST_HEADER_ID < 0) THEN qp_number.canonical_to_number(value_from)
             ELSE a.PRICE_LIST_HEADER_ID
        END price_list_header_id,
        validated_flag
 FROM qp_npreq_line_attrs_tmp b
 WHERE a.line_index = b.line_index
 AND context = G_LIST_HEADER_CONTEXT
 AND attribute = G_PRICELIST_ATTRIBUTE
 AND attribute_type = G_QUALIFIER_TYPE
 AND pricing_status_code = G_STATUS_UNCHANGED); -- bug 3668963 - commented following 2 lines
 --AND a.PRICE_LIST_HEADER_ID < 0 )
--WHERE a.PRICE_LIST_HEADER_ID < 0;
END IF;

IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
engine_debug ('after update2');
END IF;

-- To clear the unit_price if the call is from public API
IF (G_PUBLIC_API_CALL_FLAG = G_YES) THEN
 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
 engine_debug('Call from Public API , Update_Price_List_Information');
 END IF;
 IF (G_PRICE_PHASE_FLAG = TRUE AND G_MANUAL_ADJUSTMENTS_CALL_FLAG = G_NO) THEN
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('Trying to Update Unit Price To Null');
  END IF;
  UPDATE qp_npreq_lines_tmp a
  SET    unit_price = NULL
  WHERE (price_flag = G_YES
            OR
       (price_flag = G_PHASE
       AND p_freeze_override_flag = G_YES))
  AND   line_type_code <> G_ORDER_LEVEL
  AND   list_price_override_flag = 'N';
 END IF;
END IF;

IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug ('after update3');
END IF;

/*
INDX,QP_PREQ_GRP.update_price_list_information.update_price_list_information_upd4,qp_npreq_lines_tmp_N3,VALIDATED_FLAG,1
*/
/*
INDX,QP_PREQ_GRP.update_price_list_information.update_price_list_information_sel3,QP_QUALIFIERS_N7,QUALIFIER_CONTEXT,1
INDX,QP_PREQ_GRP.update_price_list_information.update_price_list_information_sel3,QP_QUALIFIERS_N7,QUALIFIER_ATTRIBUTE,2
INDX,QP_PREQ_GRP.update_price_list_information.update_price_list_information_sel3,QP_QUALIFIERS_N7,LIST_HEADER_ID,3
*/
IF (G_PRICE_PHASE_FLAG = TRUE) THEN -- Ravi,
UPDATE qp_npreq_lines_tmp a
SET   qualifiers_exist_flag = G_YES
WHERE price_list_header_id IS NOT NULL
AND   validated_flag = G_NO
AND   EXISTS (SELECT 'x'
              FROM QP_QUALIFIERS
              WHERE LIST_HEADER_ID = a.PRICE_LIST_HEADER_ID
              AND   QUALIFIER_CONTEXT <> 'MODLIST'
              AND   QUALIFIER_ATTRIBUTE <> 'QUALIFIER_ATTRIBUTE4'
              AND   ROWNUM = 1);
/*
INDX,QP_PREQ_GRP.update_price_list_information.update_price_list_information_sel4,QP_PRICING_ATTRIBUTES_N6,LIST_HEADER_ID,1
INDX,QP_PREQ_GRP.update_price_list_information.update_price_list_information_sel4,QP_PRICING_ATTRIBUTES_N6,QUALIFICATION_IND,2
*/

UPDATE qp_npreq_lines_tmp a
SET   pricing_attrs_exist_flag = G_YES
WHERE price_list_header_id IS NOT NULL
AND   EXISTS
(SELECT 'x'
 FROM QP_PRICING_ATTRIBUTES
 WHERE LIST_HEADER_ID = a.PRICE_LIST_HEADER_ID
 AND   QUALIFICATION_IND IN (QP_PREQ_GRP.G_YES_PROD_PRIC_HDR_QUAL_IND,QP_PREQ_GRP.G_YES_PROD_PRIC_IND)
 AND   ROWNUM = 1) ;
END IF;
IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug ('after update4');
END IF;

EXCEPTION

 WHEN OTHERS THEN
  x_status_code:= FND_API.G_RET_STS_ERROR;
  x_status_text:= 'QP_PREQ_GRP.Update_Price_List_Information: '||SQLERRM;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug(l_routine||' '||SQLERRM);
  END IF;

END Update_Price_List_Information;

/*+--------------------------------------------------------
  | PROCEDURE Update_Sec_Price_List_Info
  +--------------------------------------------------------
*/
PROCEDURE Update_Sec_Price_List_Info( x_status_code OUT NOCOPY VARCHAR2,
                                      x_status_text OUT NOCOPY VARCHAR2) AS

  l_routine VARCHAR2(240):='QP_PREQ_GRP.Update_Sec_Price_List_Info';
BEGIN

/*
INDX,QP_PREQ_GRP.update_sec_price_list_info.update_sec_price_list_info_upd1,-No Index Used-,NA,NA
*/
/*
INDX,QP_PREQ_GRP.update_sec_price_list_info.update_sec_price_list_info_sel1,QP_QUALIFIERS_N1,LIST_HEADER_ID,1

INDX,QP_PREQ_GRP.update_sec_price_list_info.update_sec_price_list_info_sel1,qp_npreq_line_attrs_tmp_N2,PRICING_STATUS_CODE,1
INDX,QP_PREQ_GRP.update_sec_price_list_info.update_sec_price_list_info_sel1,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.update_sec_price_list_info.update_sec_price_list_info_sel1,qp_npreq_line_attrs_tmp_N2,CONTEXT,3
INDX,QP_PREQ_GRP.update_sec_price_list_info.update_sec_price_list_info_sel1,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE,4
INDX,QP_PREQ_GRP.update_sec_price_list_info.update_sec_price_list_info_sel1,qp_npreq_line_attrs_tmp_N2,LINE_INDEX,5
INDX,QP_PREQ_GRP.update_sec_price_list_info.update_sec_price_list_info_sel1,qp_npreq_line_attrs_tmp_N2,VALUE_FROM,6
*/
UPDATE qp_npreq_lines_tmp c
SET primary_qualifiers_match_flag = 'Y'
WHERE EXISTS(
SELECT 'x'
FROM  QP_QUALIFIERS a,
      qp_npreq_line_attrs_tmp b
WHERE b.CONTEXT = a.QUALIFIER_CONTEXT
AND   b.ATTRIBUTE = a.QUALIFIER_ATTRIBUTE
AND   b.VALUE_FROM = a.QUALIFIER_ATTR_VALUE
AND   b.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
AND   a.COMPARISON_OPERATOR_CODE = '='
AND   b.ATTRIBUTE_TYPE = G_QUALIFIER_TYPE
AND   trunc(c.pricing_effective_date) BETWEEN trunc(NVL(a.START_DATE_ACTIVE, c.pricing_effective_date))
                                      AND     trunc(NVL(a.END_DATE_ACTIVE,c.pricing_effective_date))
AND   a.LIST_HEADER_ID = c.PRICE_LIST_HEADER_ID
AND   a.ACTIVE_FLAG = G_YES
AND   b.LINE_INDEX = c.LINE_INDEX
AND   c.VALIDATED_FLAG = G_NO)
AND   c.VALIDATED_FLAG = G_NO;

/*
INDX,QP_PREQ_GRP.update_sec_price_list_info.update_sec_price_list_info_upd2,-No Index Used-,NA,NA
*/
/*
INDX,QP_PREQ_GRP.update_sec_price_list_info.update_sec_price_list_info_sel2,QP_QUALIFIERS_N1,LIST_HEADER_ID,1
INDX,QP_PREQ_GRP.update_sec_price_list_info.update_sec_price_list_info_sel2,QP_QUALIFIERS_N1,COMPARISON_OPERATOR_CODE,4

INDX,QP_PREQ_GRP.update_sec_price_list_info.update_sec_price_list_info_sel2,qp_npreq_line_attrs_tmp_N2,PRICING_STATUS_CODE,1
INDX,QP_PREQ_GRP.update_sec_price_list_info.update_sec_price_list_info_sel2,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.update_sec_price_list_info.update_sec_price_list_info_sel2,qp_npreq_line_attrs_tmp_N2,CONTEXT,3
INDX,QP_PREQ_GRP.update_sec_price_list_info.update_sec_price_list_info_sel2,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE,4
INDX,QP_PREQ_GRP.update_sec_price_list_info.update_sec_price_list_info_sel2,qp_npreq_line_attrs_tmp_N2,LINE_INDEX,5
*/
UPDATE qp_npreq_lines_tmp c
SET primary_qualifiers_match_flag = 'Y'
WHERE EXISTS(
SELECT 'x'
FROM   qp_npreq_line_attrs_tmp b ,QP_QUALIFIERS a
WHERE b.CONTEXT = a.QUALIFIER_CONTEXT
AND   b.ATTRIBUTE = a.QUALIFIER_ATTRIBUTE
AND   a.COMPARISON_OPERATOR_CODE = 'BETWEEN'
AND   b.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
AND   b.ATTRIBUTE_TYPE = G_QUALIFIER_TYPE
AND   trunc(c.pricing_effective_date) BETWEEN NVL(a.START_DATE_ACTIVE, trunc(c.pricing_effective_date))
                                      AND     NVL(a.END_DATE_ACTIVE,trunc(c.pricing_effective_date))
AND   a.LIST_HEADER_ID = c.PRICE_LIST_HEADER_ID
AND   a.ACTIVE_FLAG = G_YES
AND   b.LINE_INDEX = c.LINE_INDEX
AND   c.VALIDATED_FLAG = G_NO)
AND   c.VALIDATED_FLAG = G_NO ;

UPDATE qp_npreq_lines_tmp c
SET primary_qualifiers_match_flag = 'Y'
WHERE EXISTS(
SELECT 'x'
FROM   qp_npreq_line_attrs_tmp b ,QP_QUALIFIERS a
WHERE b.CONTEXT = a.QUALIFIER_CONTEXT
AND   b.ATTRIBUTE = a.QUALIFIER_ATTRIBUTE
AND   b.VALUE_FROM <> a.QUALIFIER_ATTR_VALUE
AND   a.COMPARISON_OPERATOR_CODE = 'NOT ='
AND   b.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
AND   b.ATTRIBUTE_TYPE = G_QUALIFIER_TYPE
AND   trunc(c.pricing_effective_date) BETWEEN NVL(a.START_DATE_ACTIVE, trunc(c.pricing_effective_date))
                                      AND     NVL(a.END_DATE_ACTIVE,trunc(c.pricing_effective_date))
AND   a.LIST_HEADER_ID = c.PRICE_LIST_HEADER_ID
AND   a.ACTIVE_FLAG = G_YES
AND   b.LINE_INDEX = c.LINE_INDEX
AND   c.VALIDATED_FLAG = G_NO)
AND   c.VALIDATED_FLAG = G_NO ;

EXCEPTION
 WHEN OTHERS THEN
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug(l_routine||' '||SQLERRM);
  END IF;
  x_status_code := FND_API.G_RET_STS_ERROR;
  x_status_text := 'Error in '||l_routine||SQLERRM;
END Update_Sec_Price_List_Info;

/*+--------------------------------------------------------
  | PROCEDURE Perform_Secondary_Search
  +--------------------------------------------------------
*/

PROCEDURE Perform_Secondary_Search(P_FREEZE_OVERRIDE_FLAG        VARCHAR2,
                                   p_control_rec                 CONTROL_RECORD_TYPE,
		                   x_status_code            OUT NOCOPY   VARCHAR2,
		                   x_status_text            OUT NOCOPY   VARCHAR2)
AS

/*
INDX,QP_PREQ_GRP.perform_secondary_search.l_sec_list_cur,QP_QUALIFIERS_N4,QUALIFIER_CONTEXT,1
INDX,QP_PREQ_GRP.perform_secondary_search.l_sec_list_cur,QP_QUALIFIERS_N4,QUALIFIER_ATTRIBUTE,2
INDX,QP_PREQ_GRP.perform_secondary_search.l_sec_list_cur,QP_QUALIFIERS_N4,QUALIFIER_ATTR_VALUE,3

INDX,QP_PREQ_GRP.perform_secondary_search.l_sec_list_cur,qp_npreq_line_attrs_tmp_N2,PRICING_STATUS_CODE,1
INDX,QP_PREQ_GRP.perform_secondary_search.l_sec_list_cur,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.perform_secondary_search.l_sec_list_cur,qp_npreq_line_attrs_tmp_N2,CONTEXT,3
INDX,QP_PREQ_GRP.perform_secondary_search.l_sec_list_cur,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE,4
INDX,QP_PREQ_GRP.perform_secondary_search.l_sec_list_cur,qp_npreq_line_attrs_tmp_N2,LINE_INDEX,5
INDX,QP_PREQ_GRP.perform_secondary_search.l_sec_list_cur,qp_npreq_line_attrs_tmp_N2,VALUE_FROM,6

INDX,QP_PREQ_GRP.perform_secondary_search.l_sec_list_cur,QP_PRICING_ATTRIBUTES_N5,PRICING_PHASE_ID,1
INDX,QP_PREQ_GRP.perform_secondary_search.l_sec_list_cur,QP_PRICING_ATTRIBUTES_N5,QUALIFICATION_IND,2
INDX,QP_PREQ_GRP.perform_secondary_search.l_sec_list_cur,QP_PRICING_ATTRIBUTES_N5,PRODUCT_ATTRIBUTE_CONTEXT,3
INDX,QP_PREQ_GRP.perform_secondary_search.l_sec_list_cur,QP_PRICING_ATTRIBUTES_N5,PRODUCT_ATTRIBUTE,4
INDX,QP_PREQ_GRP.perform_secondary_search.l_sec_list_cur,QP_PRICING_ATTRIBUTES_N5,PRODUCT_ATTR_VALUE,5
INDX,QP_PREQ_GRP.perform_secondary_search.l_sec_list_cur,QP_PRICING_ATTRIBUTES_N5,EXCLUDER_FLAG,6
INDX,QP_PREQ_GRP.perform_secondary_search.l_sec_list_cur,QP_PRICING_ATTRIBUTES_N5,LIST_HEADER_ID,7
INDX,QP_PREQ_GRP.perform_secondary_search.l_sec_list_cur,QP_PRICING_ATTRIBUTES_N5,LIST_LINE_ID,8

INDX,QP_PREQ_GRP.perform_secondary_search.l_sec_list_cur,QP_LIST_LINES_PK,LIST_LINE_ID,1

INDX,QP_PREQ_GRP.perform_secondary_search.l_sec_list_cur,QP_LIST_HEADERS_B_PK,LIST_HEADER_ID,1

INDX,QP_PREQ_GRP.perform_secondary_search.l_sec_list_cur,qp_npreq_lines_tmp_N1,LINE_INDEX,1

INDX,QP_PREQ_GRP.perform_secondary_search.l_sec_list_cur,QP_LIST_HEADERS_B_PK,LINE_TYPE_CODE,2

INDX,QP_PREQ_GRP.perform_secondary_search.l_sec_list_cur,QP_PRICE_REQ_SOURCES_PK,REQUEST_TYPE_CODE,1
INDX,QP_PREQ_GRP.perform_secondary_search.l_sec_list_cur,QP_PRICE_REQ_SOURCES_PK,SOURCE_SYSTEM_CODE,2

INDX,QP_PREQ_GRP.perform_secondary_search.l_sec_list_cur,qp_npreq_line_attrs_tmp_N1,LINE_INDEX,1
INDX,QP_PREQ_GRP.perform_secondary_search.l_sec_list_cur,qp_npreq_line_attrs_tmp_N1,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.perform_secondary_search.l_sec_list_cur,qp_npreq_line_attrs_tmp_N1,PRICING_STATUS_CODE,3
*/
CURSOR L_SEC_LIST_CUR IS
SELECT /*+ ORDERED USE_NL(QPQ QPLAT_PROD QPA QPL QPH) INDEX(QPA QP_PRICING_ATTRIBUTES_N5) index(qph qp_list_headers_b_n2) l_sec_list_cur */
                   QPLAT_PROD.LINE_INDEX,
                   QPL.LIST_LINE_ID,
                   QPL.ARITHMETIC_OPERATOR,
                   QPL.OPERAND,
                   QPL.PRICING_GROUP_SEQUENCE,
                   QPL.LIST_LINE_TYPE_CODE,
                   QPL.PRICING_PHASE_ID,
                   QPL.AUTOMATIC_FLAG,
                   QPL.INCOMPATIBILITY_GRP_CODE,
                   QPL.PRICE_BY_FORMULA_ID,
                   QPL.PRODUCT_PRECEDENCE,
                   QPL.PRIMARY_UOM_FLAG,
                   QPL.MODIFIER_LEVEL_CODE,
                   QPL.LIST_LINE_NO,
                   QPA.PRODUCT_UOM_CODE,
                   QPA.EXCLUDER_FLAG,
                   QPH.LIST_TYPE_CODE,
                   QPH.ROUNDING_FACTOR,
                   QPLAT_PROD.LINE_DETAIL_INDEX,
                   QPH.LIST_HEADER_ID           LIST_HEADER_ID,
                   QPLAT_PROD.CONTEXT         PRODUCT_ATTRIBUTE_CONTEXT,
                   QPLAT_PROD.ATTRIBUTE       PRODUCT_ATTRIBUTE,
                   QPLAT_PROD.VALUE_FROM      PRODUCT_ATTR_VALUE_FROM,
                   QPLAT_PROD.ATTRIBUTE_LEVEL PRODUCT_ATTRIBUTE_LEVEL,
                   QPLAT_PROD.ATTRIBUTE_TYPE  PRODUCT_ATTRIBUTE_TYPE,
                   QPLAT_PROD.APPLIED_FLAG,
                   NULL                      PRODUCT_OPERATOR_TYPE,
                   NULL                      PRICING_ATTRIBUTE_CONTEXT,
                   NULL                      PRICING_ATTRIBUTE,
                   NULL                      PRICING_ATTR_VALUE_FROM,
                   NULL                      PRICING_SETUP_VALUE_FROM,
                   NULL                      PRICING_SETUP_VALUE_TO,
                   NULL                      PRICING_ATTRIBUTE_LEVEL,
                   NULL                      PRICING_ATTRIBUTE_TYPE,
                   NULL                      PRICING_OPERATOR_TYPE,
                   NULL                      PRICING_ATTRIBUTE_DATATYPE,
                   NULL                      QUALIFIER_ATTRIBUTE_CONTEXT,
                   NULL                      QUALIFIER_ATTRIBUTE,
                   NULL                      QUALIFIER_ATTR_VALUE_FROM,
                   NULL                      QUALIFIER_PRICING_ATTR_FLAG,
                   to_number(NULL)           QUALIFIER_GROUPING_NO,
                   NULL                      QUALIFIER_DATATYPE,
                   NULL                      SETUP_VALUE_FROM,
                   NULL                      SETUP_VALUE_TO,
                   NULL                      QUALIFIER_OPERATOR_TYPE,
                   QPQ.QUALIFIER_PRECEDENCE  QUALIFIER_PRECEDENCE
                  ,QPL.BREAK_UOM_CODE /* Proration */
                  ,QPL.BREAK_UOM_CONTEXT /* Proration */
                  ,QPL.BREAK_UOM_ATTRIBUTE /* Proration */
                  ,NULL QUALIFIER_TYPE -- 3863226
                  ,QPLAT_PROD.DERIVED_QUALIFIER_FLAG  -- Added for TCA
   FROM
         qp_npreq_lines_tmp QPLINES,
         QP_QUALIFIERS QPQ,
	 qp_npreq_line_attrs_tmp QPLAT_PROD,
         QP_PRICING_ATTRIBUTES QPA,
         QP_LIST_LINES QPL,
         QP_LIST_HEADERS_B QPH,
         --QP_PRICE_REQ_SOURCES QPRS
         QP_PRICE_REQ_SOURCES_V QPRS /*yangli*/
   WHERE QPQ.QUALIFIER_CONTEXT = G_LIST_HEADER_CONTEXT
   AND   QPQ.QUALIFIER_ATTRIBUTE = G_PRICELIST_ATTRIBUTE
   AND   QPQ.QUALIFIER_ATTR_VALUE = to_char(QPLINES.PRICE_LIST_HEADER_ID)
   AND   QPQ.COMPARISON_OPERATOR_CODE = '='
   AND   QPQ.LIST_TYPE_CODE = 'PRL'             --3965947
   AND   QPQ.LIST_HEADER_ID = QPA.LIST_HEADER_ID
   AND   QPA.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   QPA.QUALIFICATION_IND IN ( QP_PREQ_GRP.G_YES_PROD_HDR_QUAL_IND,QP_PREQ_GRP.G_YES_PROD_IND)
   AND   QPLAT_PROD.CONTEXT = QPA.PRODUCT_ATTRIBUTE_CONTEXT
   AND   (QPLINES.PRICE_FLAG = G_YES
          OR
         (QPLINES.PRICE_FLAG = G_PHASE
          AND
          P_FREEZE_OVERRIDE_FLAG = G_YES))
   AND   QPLINES.LIST_PRICE_OVERRIDE_FLAG IN ('N', 'O') --po integration
   AND   QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL
   AND   ((QPLINES.VALIDATED_FLAG = G_YES                 --9443496
             OR
         (QPLINES.VALIDATED_FLAG = G_NO AND             --9443496
         QPLINES.PRIMARY_QUALIFIERS_MATCH_FLAG = G_YES)
             OR
         QPLINES.QUALIFIERS_EXIST_FLAG = G_NO) AND
         (G_QUALIFY_SECONDARY = G_NO
          OR
          QPA.QUALIFICATION_IND = QP_PREQ_GRP.G_YES_PROD_IND
         ))
   AND   QPLAT_PROD.ATTRIBUTE = QPA.PRODUCT_ATTRIBUTE
   AND   QPLAT_PROD.VALUE_FROM = QPA.PRODUCT_ATTR_VALUE
   AND   QPA.EXCLUDER_FLAG = G_NO
   AND   QPA.LIST_LINE_ID = QPL.LIST_LINE_ID
   AND   QPL.LIST_HEADER_ID = QPH.LIST_HEADER_ID
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--   AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
   AND    QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPH.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPH.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPL.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPL.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPH.CURRENCY_CODE = QPLINES.CURRENCY_CODE
   --AND   (QPL.MODIFIER_LEVEL_CODE = QPLINES.LINE_TYPE_CODE
   --       OR
   --       QPL.MODIFIER_LEVEL_CODE = G_LINE_GROUP AND QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL)
   AND   QPH.SOURCE_SYSTEM_CODE = QPRS.SOURCE_SYSTEM_CODE
   AND   QPLINES.REQUEST_TYPE_CODE   = QPRS.REQUEST_TYPE_CODE
   AND   QPH.ACTIVE_FLAG = G_YES
   AND   QPLAT_PROD.ATTRIBUTE_TYPE = G_PRODUCT_TYPE
   AND   QPQ.ACTIVE_FLAG = G_YES
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
         NVL(QPQ.START_DATE_ACTIVE, QPLINES.PRICING_EFFECTIVE_DATE)
         AND NVL(QPQ.END_DATE_ACTIVE,QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPLAT_PROD.LINE_INDEX = QPLINES.LINE_INDEX
   --AND   QPL.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   QPLAT_PROD.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND   QPLINES.PROCESSED_CODE = G_STS_LHS_NOT_FOUND
   AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
UNION ALL
SELECT /*+ ORDERED USE_NL(QPQ QPLAT_PROD QPA QPLAT_PRIC QPL QPH) index(QPA QP_PRICING_ATTRIBUTES_N5) index(qph qp_list_headers_b_n2) index(qplat_pric qp_preq_line_attrs_tmp_n2) l_sec_list_cur */
                   QPLAT_PROD.LINE_INDEX,
                   QPL.LIST_LINE_ID,
                   QPL.ARITHMETIC_OPERATOR,
                   QPL.OPERAND,
                   QPL.PRICING_GROUP_SEQUENCE,
                   QPL.LIST_LINE_TYPE_CODE,
                   QPL.PRICING_PHASE_ID,
                   QPL.AUTOMATIC_FLAG,
                   QPL.INCOMPATIBILITY_GRP_CODE,
                   QPL.PRICE_BY_FORMULA_ID,
                   QPL.PRODUCT_PRECEDENCE,
                   QPL.PRIMARY_UOM_FLAG,
                   QPL.MODIFIER_LEVEL_CODE,
                   QPL.LIST_LINE_NO,
                   QPA.PRODUCT_UOM_CODE,
                   QPA.EXCLUDER_FLAG,
                   QPH.LIST_TYPE_CODE,
                   QPH.ROUNDING_FACTOR,
                   QPLAT_PROD.LINE_DETAIL_INDEX,
                   QPH.LIST_HEADER_ID           LIST_HEADER_ID,
                   QPLAT_PROD.CONTEXT         PRODUCT_ATTRIBUTE_CONTEXT,
                   QPLAT_PROD.ATTRIBUTE       PRODUCT_ATTRIBUTE,
                   QPLAT_PROD.VALUE_FROM      PRODUCT_ATTR_VALUE_FROM,
                   QPLAT_PROD.ATTRIBUTE_LEVEL PRODUCT_ATTRIBUTE_LEVEL,
                   QPLAT_PROD.ATTRIBUTE_TYPE  PRODUCT_ATTRIBUTE_TYPE,
                   QPLAT_PROD.APPLIED_FLAG,
                   NULL                            PRODUCT_OPERATOR_TYPE,
                   QPLAT_PRIC.CONTEXT              PRICING_ATTRIBUTE_CONTEXT,
                   QPLAT_PRIC.ATTRIBUTE            PRICING_ATTRIBUTE,
                   QPLAT_PRIC.VALUE_FROM           PRICING_ATTR_VALUE_FROM,
                   QPA.PRICING_ATTR_VALUE_FROM     PRICING_SETUP_VALUE_FROM,
                   QPA.PRICING_ATTR_VALUE_TO       PRICING_SETUP_VALUE_TO,
                   QPLAT_PRIC.ATTRIBUTE_LEVEL      PRICING_ATTRIBUTE_LEVEL,
                   QPLAT_PRIC.ATTRIBUTE_TYPE       PRICING_ATTRIBUTE_TYPE,
                   QPA.COMPARISON_OPERATOR_CODE    PRICING_OPERATOR_TYPE,
                   QPA.PRICING_ATTRIBUTE_DATATYPE   PRICING_ATTRIBUTE_DATATYPE,
                   NULL                      QUALIFIER_ATTRIBUTE_CONTEXT,
                   NULL                      QUALIFIER_ATTRIBUTE,
                   NULL                      QUALIFIER_ATTR_VALUE_FROM,
                   NULL                      QUALIFIER_PRICING_ATTR_FLAG,
                   to_number(NULL)           QUALIFIER_GROUPING_NO,
                   NULL                      QUALIFIER_DATATYPE,
                   NULL                      SETUP_VALUE_FROM,
                   NULL                      SETUP_VALUE_TO,
                   NULL                      QUALIFIER_OPERATOR_TYPE,
                   QPQ.QUALIFIER_PRECEDENCE  QUALIFIER_PRECEDENCE
                  ,QPL.BREAK_UOM_CODE /* Proration */
                  ,QPL.BREAK_UOM_CONTEXT /* Proration */
                  ,QPL.BREAK_UOM_ATTRIBUTE /* Proration */
                  ,NULL QUALIFIER_TYPE -- 3863226
                  ,QPLAT_PRIC.DERIVED_QUALIFIER_FLAG  -- Added for TCA
   FROM
         qp_npreq_lines_tmp qplines,
         QP_QUALIFIERS qpq,
         qp_npreq_line_attrs_tmp qplat_prod,
         QP_PRICING_ATTRIBUTES qpa,
         qp_npreq_line_attrs_tmp qplat_pric,
         QP_LIST_LINES qpl,
         QP_LIST_HEADERS_B qph,
         --QP_PRICE_REQ_SOURCES qprs
         QP_PRICE_REQ_SOURCES_V qprs /* yangli */
   WHERE QPQ.QUALIFIER_CONTEXT = G_LIST_HEADER_CONTEXT
   AND   QPQ.QUALIFIER_ATTRIBUTE = G_PRICELIST_ATTRIBUTE
   AND   QPQ.QUALIFIER_ATTR_VALUE = to_char(QPLINES.PRICE_LIST_HEADER_ID)
   AND   QPQ.COMPARISON_OPERATOR_CODE = '='
   AND   QPQ.LIST_TYPE_CODE = 'PRL'             --3965947
   AND   QPA.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   QPA.QUALIFICATION_IND IN (QP_PREQ_GRP.G_YES_PROD_PRIC_HDR_QUAL_IND,QP_PREQ_GRP.G_YES_PROD_PRIC_IND)
   AND   QPLAT_PROD.CONTEXT = QPA.PRODUCT_ATTRIBUTE_CONTEXT
   AND   (QPLINES.PRICE_FLAG = G_YES
          OR
         (QPLINES.PRICE_FLAG = G_PHASE
          AND
          P_FREEZE_OVERRIDE_FLAG = G_YES))
   AND   QPLINES.LIST_PRICE_OVERRIDE_FLAG IN ('N', 'O') --po integration
   AND   QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL
   AND   ((QPLINES.VALIDATED_FLAG = G_YES
             OR
         (QPLINES.VALIDATED_FLAG = G_NO AND
         QPLINES.PRIMARY_QUALIFIERS_MATCH_FLAG = G_YES)
             OR
         QPLINES.QUALIFIERS_EXIST_FLAG = G_NO) AND
         (G_QUALIFY_SECONDARY = G_NO
          OR
          QPA.QUALIFICATION_IND = QP_PREQ_GRP.G_YES_PROD_PRIC_IND
         ))
   AND   QPLAT_PROD.ATTRIBUTE = QPA.PRODUCT_ATTRIBUTE
   AND   QPLAT_PROD.VALUE_FROM = QPA.PRODUCT_ATTR_VALUE
   AND   QPA.EXCLUDER_FLAG = G_NO
   AND   QPLAT_PROD.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND   QPLAT_PRIC.CONTEXT = QPA.PRICING_ATTRIBUTE_CONTEXT
   AND   QPLAT_PRIC.ATTRIBUTE = QPA.PRICING_ATTRIBUTE
   AND   (QPLAT_PRIC.VALUE_FROM = QPA.PRICING_ATTR_VALUE_FROM
          OR
          QPA.COMPARISON_OPERATOR_CODE IN ('NOT =', G_OPERATOR_BETWEEN))
   AND   QPLAT_PRIC.ATTRIBUTE_TYPE = G_PRICING_TYPE
   AND   QPLAT_PRIC. PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND   QPLAT_PRIC.LINE_INDEX = QPLAT_PROD.LINE_INDEX
   AND   QPA.LIST_HEADER_ID = QPQ.LIST_HEADER_ID
   AND   QPA.LIST_LINE_ID = QPL.LIST_LINE_ID
   AND   QPH.LIST_HEADER_ID = QPL.LIST_HEADER_ID
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--   AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
   AND    QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPH.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPH.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPL.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPL.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPH.CURRENCY_CODE = QPLINES.CURRENCY_CODE
   --AND   (QPL.MODIFIER_LEVEL_CODE = QPLINES.LINE_TYPE_CODE
   --       OR
   --       QPL.MODIFIER_LEVEL_CODE = G_LINE_GROUP AND QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL)
   AND   QPH.SOURCE_SYSTEM_CODE = QPRS.SOURCE_SYSTEM_CODE
   AND   QPLINES.REQUEST_TYPE_CODE   = QPRS.REQUEST_TYPE_CODE
   AND   QPH.ACTIVE_FLAG = G_YES
   AND   QPQ.ACTIVE_FLAG = G_YES
   AND   QPLAT_PROD.ATTRIBUTE_TYPE = G_PRODUCT_TYPE
   AND   QPLAT_PROD.LINE_INDEX = QPLINES.LINE_INDEX
   --AND   QPL.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   QPLINES.PROCESSED_CODE = G_STS_LHS_NOT_FOUND
   AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
UNION ALL
SELECT /*+ ORDERED USE_NL(QPQ QPLAT_PROD QPA QPL QPH) INDEX(QPA QP_PRICING_ATTRIBUTES_N5) index(qph qp_list_headers_b_n2) l_sec_list_cur */
                   QPLAT_PROD.LINE_INDEX,
                   QPL.LIST_LINE_ID,
                   QPL.ARITHMETIC_OPERATOR,
                   QPL.OPERAND,
                   QPL.PRICING_GROUP_SEQUENCE,
                   QPL.LIST_LINE_TYPE_CODE,
                   QPL.PRICING_PHASE_ID,
                   QPL.AUTOMATIC_FLAG,
                   QPL.INCOMPATIBILITY_GRP_CODE,
                   QPL.PRICE_BY_FORMULA_ID,
                   QPL.PRODUCT_PRECEDENCE,
                   QPL.PRIMARY_UOM_FLAG,
                   QPL.MODIFIER_LEVEL_CODE,
                   QPL.LIST_LINE_NO,
                   QPA.PRODUCT_UOM_CODE,
                   QPA.EXCLUDER_FLAG,
                   QPH.LIST_TYPE_CODE,
                   QPH.ROUNDING_FACTOR,
                   QPLAT_PROD.LINE_DETAIL_INDEX,
                   QPH.LIST_HEADER_ID           LIST_HEADER_ID,
                   QPLAT_PROD.CONTEXT         PRODUCT_ATTRIBUTE_CONTEXT,
                   QPLAT_PROD.ATTRIBUTE       PRODUCT_ATTRIBUTE,
                   QPLAT_PROD.VALUE_FROM      PRODUCT_ATTR_VALUE_FROM,
                   QPLAT_PROD.ATTRIBUTE_LEVEL PRODUCT_ATTRIBUTE_LEVEL,
                   QPLAT_PROD.ATTRIBUTE_TYPE  PRODUCT_ATTRIBUTE_TYPE,
                   QPLAT_PROD.APPLIED_FLAG,
                   NULL                      PRODUCT_OPERATOR_TYPE,
                   NULL                      PRICING_ATTRIBUTE_CONTEXT,
                   NULL                      PRICING_ATTRIBUTE,
                   NULL                      PRICING_ATTR_VALUE_FROM,
                   NULL                      PRICING_SETUP_VALUE_FROM,
                   NULL                      PRICING_SETUP_VALUE_TO,
                   NULL                      PRICING_ATTRIBUTE_LEVEL,
                   NULL                      PRICING_ATTRIBUTE_TYPE,
                   NULL                      PRICING_OPERATOR_TYPE,
                   NULL                      PRICING_ATTRIBUTE_DATATYPE,
                   QPLAT_Q.CONTEXT           QUALIFIER_ATTRIBUTE_CONTEXT,
                   QPLAT_Q.ATTRIBUTE         QUALIFIER_ATTRIBUTE,
                   QPLAT_Q.VALUE_FROM        QUALIFIER_ATTR_VALUE_FROM,
                   QPLAT_Q.PRICING_ATTR_FLAG QUALIFIER_PRICING_ATTR_FLAG,
                   QPSQ.QUALIFIER_GROUPING_NO QUALIFIER_GROUPING_NO,
                   QPSQ.QUALIFIER_DATATYPE    QUALIFIER_DATATYPE,
                   QPSQ.QUALIFIER_ATTR_VALUE     SETUP_VALUE_FROM,
                   QPSQ.QUALIFIER_ATTR_VALUE_TO  SETUP_VALUE_TO,
                   QPSQ.COMPARISON_OPERATOR_CODE QUALIFIER_OPERATOR_TYPE,
                   QPQ.QUALIFIER_PRECEDENCE  QUALIFIER_PRECEDENCE
                  ,QPL.BREAK_UOM_CODE /* Proration */
                  ,QPL.BREAK_UOM_CONTEXT /* Proration */
                  ,QPL.BREAK_UOM_ATTRIBUTE /* Proration */
                  ,DECODE(QPQ.list_line_id, -1, 'HQ', 'LQ') QUALIFIER_TYPE  -- 3863226
                  ,QPLAT_Q.DERIVED_QUALIFIER_FLAG  -- Added for TCA
   FROM
         qp_npreq_lines_tmp QPLINES,
         QP_QUALIFIERS QPQ,
         QP_QUALIFIERS QPSQ,
	 qp_npreq_line_attrs_tmp QPLAT_PROD,
         qp_npreq_line_attrs_tmp QPLAT_Q,
         QP_PRICING_ATTRIBUTES QPA,
         QP_LIST_LINES QPL,
         QP_LIST_HEADERS_B QPH,
         --QP_PRICE_REQ_SOURCES QPRS
         QP_PRICE_REQ_SOURCES_V QPRS /*yangli*/
   WHERE QPQ.QUALIFIER_CONTEXT = G_LIST_HEADER_CONTEXT
   AND   QPQ.QUALIFIER_ATTRIBUTE = G_PRICELIST_ATTRIBUTE
   AND   QPQ.QUALIFIER_ATTR_VALUE = to_char(QPLINES.PRICE_LIST_HEADER_ID)
   AND   QPQ.COMPARISON_OPERATOR_CODE = '='
   AND   QPQ.LIST_TYPE_CODE = 'PRL'             --3965947
   AND   QPQ.LIST_HEADER_ID = QPA.LIST_HEADER_ID
   AND   QPA.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   QPA.QUALIFICATION_IND = QP_PREQ_GRP.G_YES_PROD_HDR_QUAL_IND
   AND   QPLAT_PROD.CONTEXT = QPA.PRODUCT_ATTRIBUTE_CONTEXT
   AND   (QPLINES.PRICE_FLAG = G_YES
          OR
         (QPLINES.PRICE_FLAG = G_PHASE
          AND
          P_FREEZE_OVERRIDE_FLAG = G_YES))
   AND   QPLINES.LIST_PRICE_OVERRIDE_FLAG IN ('N', 'O') --po integration
   AND   QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL
   AND   QPLINES.VALIDATED_FLAG = G_NO
   AND   (QPLINES.PRIMARY_QUALIFIERS_MATCH_FLAG = G_YES
          OR
          QPLINES.QUALIFIERS_EXIST_FLAG = G_NO
         )
   AND   QPLAT_PROD.ATTRIBUTE = QPA.PRODUCT_ATTRIBUTE
   AND   QPLAT_PROD.VALUE_FROM = QPA.PRODUCT_ATTR_VALUE
   AND   QPA.EXCLUDER_FLAG = G_NO
   AND   QPA.LIST_LINE_ID = QPL.LIST_LINE_ID
   AND   QPL.LIST_HEADER_ID = QPH.LIST_HEADER_ID
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--   AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
   AND    QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPH.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPH.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPL.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPL.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPH.CURRENCY_CODE = QPLINES.CURRENCY_CODE
   --AND   (QPL.MODIFIER_LEVEL_CODE = QPLINES.LINE_TYPE_CODE
   --       OR
   --       QPL.MODIFIER_LEVEL_CODE = G_LINE_GROUP AND QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL)
   AND   QPH.SOURCE_SYSTEM_CODE = QPRS.SOURCE_SYSTEM_CODE
   AND   QPLINES.REQUEST_TYPE_CODE   = QPRS.REQUEST_TYPE_CODE
   AND   QPH.ACTIVE_FLAG = G_YES
   AND   QPLAT_PROD.ATTRIBUTE_TYPE = G_PRODUCT_TYPE
   AND   QPQ.ACTIVE_FLAG = G_YES
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
         NVL(QPQ.START_DATE_ACTIVE, QPLINES.PRICING_EFFECTIVE_DATE)
         AND NVL(QPQ.END_DATE_ACTIVE,QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPLAT_PROD.LINE_INDEX = QPLINES.LINE_INDEX
   --AND   QPL.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   QPLAT_PROD.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND   QPLINES.PROCESSED_CODE = G_STS_LHS_NOT_FOUND
   AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
-- 3594459, context and attribute OR'd together
   AND   (QPSQ.QUALIFIER_CONTEXT <> G_LIST_HEADER_CONTEXT
          OR QPSQ.QUALIFIER_ATTRIBUTE <> G_PRICELIST_ATTRIBUTE)
   AND   QPLAT_Q.ATTRIBUTE_TYPE = G_QUALIFIER_TYPE
   AND   QPLAT_Q.CONTEXT       = QPSQ.QUALIFIER_CONTEXT
   AND   QPLAT_Q.ATTRIBUTE     = QPSQ.QUALIFIER_ATTRIBUTE
   AND   QPSQ.LIST_HEADER_ID    = QPQ.LIST_HEADER_ID
   AND   QPSQ.ACTIVE_FLAG = G_YES
   AND   ((QPLAT_Q.VALUE_FROM   = QPSQ.QUALIFIER_ATTR_VALUE --bug#1761272 Multiple NOT =
                AND QPSQ.COMPARISON_OPERATOR_CODE = '=')
           OR (QPLAT_Q.VALUE_FROM  <> QPSQ.QUALIFIER_ATTR_VALUE
                AND QPSQ.COMPARISON_OPERATOR_CODE = 'NOT =')
           OR
          QPSQ.COMPARISON_OPERATOR_CODE = G_OPERATOR_BETWEEN)
   AND   QPLAT_Q.LINE_INDEX  =   QPLINES.LINE_INDEX
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
         NVL(QPSQ.START_DATE_ACTIVE, QPLINES.PRICING_EFFECTIVE_DATE)
         AND NVL(QPSQ.END_DATE_ACTIVE,QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPLAT_PROD.LINE_INDEX = QPLAT_Q.LINE_INDEX
   AND   QPLAT_Q. PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND   G_QUALIFY_SECONDARY = G_YES
   AND ((nvl(QPLAT_Q.DERIVED_QUALIFIER_FLAG,'N')='N')
         OR (QPLAT_Q.DERIVED_QUALIFIER_FLAG = 'Y' AND QPSQ.QUALIFY_HIER_DESCENDENTS_FLAG = 'Y')) -- Added for TCA
UNION ALL
SELECT /*+ ORDERED USE_NL(QPQ QPLAT_PROD QPA QPLAT_PRIC QPL QPH) index(QPA QP_PRICING_ATTRIBUTES_N5) index(qph qp_list_headers_b_n2) index(qplat_pric qp_preq_line_attrs_tmp_n2) l_sec_list_cur */
                   QPLAT_PROD.LINE_INDEX,
                   QPL.LIST_LINE_ID,
                   QPL.ARITHMETIC_OPERATOR,
                   QPL.OPERAND,
                   QPL.PRICING_GROUP_SEQUENCE,
                   QPL.LIST_LINE_TYPE_CODE,
                   QPL.PRICING_PHASE_ID,
                   QPL.AUTOMATIC_FLAG,
                   QPL.INCOMPATIBILITY_GRP_CODE,
                   QPL.PRICE_BY_FORMULA_ID,
                   QPL.PRODUCT_PRECEDENCE,
                   QPL.PRIMARY_UOM_FLAG,
                   QPL.MODIFIER_LEVEL_CODE,
                   QPL.LIST_LINE_NO,
                   QPA.PRODUCT_UOM_CODE,
                   QPA.EXCLUDER_FLAG,
                   QPH.LIST_TYPE_CODE,
                   QPH.ROUNDING_FACTOR,
                   QPLAT_PROD.LINE_DETAIL_INDEX,
                   QPH.LIST_HEADER_ID           LIST_HEADER_ID,
                   QPLAT_PROD.CONTEXT         PRODUCT_ATTRIBUTE_CONTEXT,
                   QPLAT_PROD.ATTRIBUTE       PRODUCT_ATTRIBUTE,
                   QPLAT_PROD.VALUE_FROM      PRODUCT_ATTR_VALUE_FROM,
                   QPLAT_PROD.ATTRIBUTE_LEVEL PRODUCT_ATTRIBUTE_LEVEL,
                   QPLAT_PROD.ATTRIBUTE_TYPE  PRODUCT_ATTRIBUTE_TYPE,
                   QPLAT_PROD.APPLIED_FLAG,
                   NULL                            PRODUCT_OPERATOR_TYPE,
                   QPLAT_PRIC.CONTEXT              PRICING_ATTRIBUTE_CONTEXT,
                   QPLAT_PRIC.ATTRIBUTE            PRICING_ATTRIBUTE,
                   QPLAT_PRIC.VALUE_FROM           PRICING_ATTR_VALUE_FROM,
                   QPA.PRICING_ATTR_VALUE_FROM     PRICING_SETUP_VALUE_FROM,
                   QPA.PRICING_ATTR_VALUE_TO       PRICING_SETUP_VALUE_TO,
                   QPLAT_PRIC.ATTRIBUTE_LEVEL      PRICING_ATTRIBUTE_LEVEL,
                   QPLAT_PRIC.ATTRIBUTE_TYPE       PRICING_ATTRIBUTE_TYPE,
                   QPA.COMPARISON_OPERATOR_CODE    PRICING_OPERATOR_TYPE,
                   QPA.PRICING_ATTRIBUTE_DATATYPE  PRICING_ATTRIBUTE_DATATYPE,
                   QPLAT_Q.CONTEXT              QUALIFIER_ATTRIBUTE_CONTEXT,
                   QPLAT_Q.ATTRIBUTE            QUALIFIER_ATTRIBUTE,
                   QPLAT_Q.VALUE_FROM           QUALIFIER_ATTR_VALUE_FROM,
                   QPLAT_Q.PRICING_ATTR_FLAG    QUALIFIER_PRICING_ATTR_FLAG,
                   QPSQ.QUALIFIER_GROUPING_NO   QUALIFIER_GROUPING_NO,
                   QPSQ.QUALIFIER_DATATYPE      QUALIFIER_DATATYPE,
                   QPSQ.QUALIFIER_ATTR_VALUE     SETUP_VALUE_FROM,
                   QPSQ.QUALIFIER_ATTR_VALUE_TO  SETUP_VALUE_TO,
                   QPSQ.COMPARISON_OPERATOR_CODE QUALIFIER_OPERATOR_TYPE,
                   QPQ.QUALIFIER_PRECEDENCE      QUALIFIER_PRECEDENCE
                  ,QPL.BREAK_UOM_CODE /* Proration */
                  ,QPL.BREAK_UOM_CONTEXT /* Proration */
                  ,QPL.BREAK_UOM_ATTRIBUTE /* Proration */
                  ,DECODE(QPQ.list_line_id, -1, 'HQ', 'LQ') QUALIFIER_TYPE  -- 3863226
                  ,QPLAT_Q.DERIVED_QUALIFIER_FLAG   -- Added for TCA
   FROM
         qp_npreq_lines_tmp qplines,
         QP_QUALIFIERS qpq,
         QP_QUALIFIERS qpsq,
         qp_npreq_line_attrs_tmp qplat_prod,
         QP_PRICING_ATTRIBUTES qpa,
         qp_npreq_line_attrs_tmp qplat_pric,
         qp_npreq_line_attrs_tmp qplat_q,
         QP_LIST_LINES qpl,
         QP_LIST_HEADERS_B qph,
         --QP_PRICE_REQ_SOURCES qprs
         QP_PRICE_REQ_SOURCES_V qprs /* yangli */
   WHERE QPQ.QUALIFIER_CONTEXT = G_LIST_HEADER_CONTEXT
   AND   QPQ.QUALIFIER_ATTRIBUTE = G_PRICELIST_ATTRIBUTE
   AND   QPQ.QUALIFIER_ATTR_VALUE = to_char(QPLINES.PRICE_LIST_HEADER_ID)
   AND   QPQ.COMPARISON_OPERATOR_CODE = '='
   AND   QPQ.LIST_TYPE_CODE = 'PRL'             --3965947
   AND   QPA.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   QPA.QUALIFICATION_IND = QP_PREQ_GRP.G_YES_PROD_PRIC_HDR_QUAL_IND
   AND   QPLAT_PROD.CONTEXT = QPA.PRODUCT_ATTRIBUTE_CONTEXT
   AND   (QPLINES.PRICE_FLAG = G_YES
          OR
         (QPLINES.PRICE_FLAG = G_PHASE
          AND
          P_FREEZE_OVERRIDE_FLAG = G_YES))
   AND   QPLINES.LIST_PRICE_OVERRIDE_FLAG IN ('N', 'O') --po integration
   AND   QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL
   AND   QPLINES.VALIDATED_FLAG = G_NO
   AND   (QPLINES.PRIMARY_QUALIFIERS_MATCH_FLAG = G_YES
          OR
          QPLINES.QUALIFIERS_EXIST_FLAG = G_NO
          )
   AND   QPLAT_PROD.ATTRIBUTE = QPA.PRODUCT_ATTRIBUTE
   AND   QPLAT_PROD.VALUE_FROM = QPA.PRODUCT_ATTR_VALUE
   AND   QPA.EXCLUDER_FLAG = G_NO
   AND   QPLAT_PROD.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND   QPLAT_PRIC.CONTEXT = QPA.PRICING_ATTRIBUTE_CONTEXT
   AND   QPLAT_PRIC.ATTRIBUTE = QPA.PRICING_ATTRIBUTE
   AND   (QPLAT_PRIC.VALUE_FROM = QPA.PRICING_ATTR_VALUE_FROM
          OR
          QPA.COMPARISON_OPERATOR_CODE IN ('NOT =', G_OPERATOR_BETWEEN))
   AND   QPLAT_PRIC.ATTRIBUTE_TYPE = G_PRICING_TYPE
   AND   QPLAT_PRIC. PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND   QPLAT_PRIC.LINE_INDEX = QPLAT_PROD.LINE_INDEX
   AND   QPA.LIST_HEADER_ID = QPQ.LIST_HEADER_ID
   AND   QPA.LIST_LINE_ID = QPL.LIST_LINE_ID
   AND   QPH.LIST_HEADER_ID = QPL.LIST_HEADER_ID
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--   AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
   AND    QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPH.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPH.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPL.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPL.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPH.CURRENCY_CODE = QPLINES.CURRENCY_CODE
   --AND   (QPL.MODIFIER_LEVEL_CODE = QPLINES.LINE_TYPE_CODE
   --       OR
   --       QPL.MODIFIER_LEVEL_CODE = G_LINE_GROUP AND QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL)
   AND   QPH.SOURCE_SYSTEM_CODE = QPRS.SOURCE_SYSTEM_CODE
   AND   QPLINES.REQUEST_TYPE_CODE   = QPRS.REQUEST_TYPE_CODE
   AND   QPH.ACTIVE_FLAG = G_YES
   AND   QPQ.ACTIVE_FLAG = G_YES
   AND   QPLAT_PROD.ATTRIBUTE_TYPE = G_PRODUCT_TYPE
   AND   QPLAT_Q.ATTRIBUTE_TYPE = G_QUALIFIER_TYPE
   AND   QPLAT_PROD.LINE_INDEX = QPLINES.LINE_INDEX
   --AND   QPL.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   QPLINES.PROCESSED_CODE = G_STS_LHS_NOT_FOUND
   AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
-- 3594459, context and attribute OR'd together
   AND   (QPSQ.QUALIFIER_CONTEXT <> G_LIST_HEADER_CONTEXT
          OR QPSQ.QUALIFIER_ATTRIBUTE <> G_PRICELIST_ATTRIBUTE)
   AND   QPLAT_Q.CONTEXT       = QPSQ.QUALIFIER_CONTEXT
   AND   QPLAT_Q.ATTRIBUTE     = QPSQ.QUALIFIER_ATTRIBUTE
   AND   QPSQ.LIST_HEADER_ID    = QPQ.LIST_HEADER_ID
   AND   QPSQ.ACTIVE_FLAG = G_YES
   AND   ((QPLAT_Q.VALUE_FROM   = QPSQ.QUALIFIER_ATTR_VALUE --bug#1761272 Multiple NOT =
                AND QPSQ.COMPARISON_OPERATOR_CODE = '=')
           OR (QPLAT_Q.VALUE_FROM  <> QPSQ.QUALIFIER_ATTR_VALUE
                AND QPSQ.COMPARISON_OPERATOR_CODE = 'NOT =')
           OR
          QPSQ.COMPARISON_OPERATOR_CODE = G_OPERATOR_BETWEEN)
   AND   QPLAT_Q.LINE_INDEX  =   QPLINES.LINE_INDEX
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
         NVL(QPSQ.START_DATE_ACTIVE, QPLINES.PRICING_EFFECTIVE_DATE)
         AND NVL(QPSQ.END_DATE_ACTIVE,QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPLAT_PROD.LINE_INDEX = QPLAT_Q.LINE_INDEX
   AND   QPLAT_Q. PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND   G_QUALIFY_SECONDARY = G_YES
    AND ((nvl(QPLAT_Q.DERIVED_QUALIFIER_FLAG,'N')='N')
          OR (QPLAT_Q.DERIVED_QUALIFIER_FLAG = 'Y' AND QPSQ.QUALIFY_HIER_DESCENDENTS_FLAG = 'Y')) -- Added for TCA
   ORDER BY 1,2;

-- vivek
--[julin/4865213] using qp_list_headers_b_n7 instead of qp_list_headers_b_n2
CURSOR L_SEC_LIST_CUR_CURRENCY IS
SELECT /*+ ORDERED USE_NL(QPQ QPLAT_PROD QPA QPL QPH) INDEX(QPA QP_PRICING_ATTRIBUTES_N5) index(qph qp_list_headers_b_n7) l_sec_list_cur */
                   QPLAT_PROD.LINE_INDEX,
                   QPL.LIST_LINE_ID,
                   QPL.ARITHMETIC_OPERATOR,
                   QPL.OPERAND,
                   QPL.PRICING_GROUP_SEQUENCE,
                   QPL.LIST_LINE_TYPE_CODE,
                   QPL.PRICING_PHASE_ID,
                   QPL.AUTOMATIC_FLAG,
                   QPL.INCOMPATIBILITY_GRP_CODE,
                   QPL.PRICE_BY_FORMULA_ID,
                   QPL.PRODUCT_PRECEDENCE,
                   QPL.PRIMARY_UOM_FLAG,
                   QPL.MODIFIER_LEVEL_CODE,
                   QPL.LIST_LINE_NO,
                   QPA.PRODUCT_UOM_CODE,
                   QPA.EXCLUDER_FLAG,
                   QPH.LIST_TYPE_CODE,
   /* vivek        QPH.ROUNDING_FACTOR,  */
                   QCDT.ROUNDING_FACTOR, /* vivek */
                   QPLAT_PROD.LINE_DETAIL_INDEX,
                   QPH.LIST_HEADER_ID           LIST_HEADER_ID,
                   QPLAT_PROD.CONTEXT         PRODUCT_ATTRIBUTE_CONTEXT,
                   QPLAT_PROD.ATTRIBUTE       PRODUCT_ATTRIBUTE,
                   QPLAT_PROD.VALUE_FROM      PRODUCT_ATTR_VALUE_FROM,
                   QPLAT_PROD.ATTRIBUTE_LEVEL PRODUCT_ATTRIBUTE_LEVEL,
                   QPLAT_PROD.ATTRIBUTE_TYPE  PRODUCT_ATTRIBUTE_TYPE,
                   QPLAT_PROD.APPLIED_FLAG,
                   NULL                      PRODUCT_OPERATOR_TYPE,
                   NULL                      PRICING_ATTRIBUTE_CONTEXT,
                   NULL                      PRICING_ATTRIBUTE,
                   NULL                      PRICING_ATTR_VALUE_FROM,
                   NULL                      PRICING_SETUP_VALUE_FROM,
                   NULL                      PRICING_SETUP_VALUE_TO,
                   NULL                      PRICING_ATTRIBUTE_LEVEL,
                   NULL                      PRICING_ATTRIBUTE_TYPE,
                   NULL                      PRICING_OPERATOR_TYPE,
                   NULL                      PRICING_ATTRIBUTE_DATATYPE,
                   NULL                      QUALIFIER_ATTRIBUTE_CONTEXT,
                   NULL                      QUALIFIER_ATTRIBUTE,
                   NULL                      QUALIFIER_ATTR_VALUE_FROM,
                   NULL                      QUALIFIER_PRICING_ATTR_FLAG,
                   to_number(NULL)           QUALIFIER_GROUPING_NO,
                   NULL                      QUALIFIER_DATATYPE,
                   NULL                      SETUP_VALUE_FROM,
                   NULL                      SETUP_VALUE_TO,
                   NULL                      QUALIFIER_OPERATOR_TYPE,
                   QPQ.QUALIFIER_PRECEDENCE  QUALIFIER_PRECEDENCE,
                   QCDT.CURRENCY_DETAIL_ID,  /* sunilpandey */
                   QCDT.CURRENCY_HEADER_ID,  /* vivek */
                   QCDT.SELLING_ROUNDING_FACTOR,  /* vivek */
                   QPLINES.CURRENCY_CODE   ORDER_CURRENCY,  /* vivek */
                   QPLINES.PRICING_EFFECTIVE_DATE,  /* vivek */
                   QPH.CURRENCY_CODE   BASE_CURRENCY_CODE  /* vivek */
                  ,QPL.BREAK_UOM_CODE /* Proration */
                  ,QPL.BREAK_UOM_CONTEXT /* Proration */
                  ,QPL.BREAK_UOM_ATTRIBUTE /* Proration */
                  ,NULL QUALIFIER_TYPE -- 3863226
                  ,QPLAT_PROD.DERIVED_QUALIFIER_FLAG   -- Added for TCA
   FROM
         qp_npreq_lines_tmp QPLINES,
         QP_QUALIFIERS QPQ,
	 qp_npreq_line_attrs_tmp QPLAT_PROD,
         QP_PRICING_ATTRIBUTES QPA,
         QP_LIST_LINES QPL,
         QP_LIST_HEADERS_B QPH,
         --QP_PRICE_REQ_SOURCES QPRS,
         QP_PRICE_REQ_SOURCES_V QPRS, /* yangli */
         QP_CURRENCY_DETAILS QCDT   /* Vivek */
   WHERE QPQ.QUALIFIER_CONTEXT = G_LIST_HEADER_CONTEXT
   AND   QPQ.QUALIFIER_ATTRIBUTE = G_PRICELIST_ATTRIBUTE
   AND   QPQ.QUALIFIER_ATTR_VALUE = to_char(QPLINES.PRICE_LIST_HEADER_ID)
   AND   QPQ.COMPARISON_OPERATOR_CODE = '='
   AND   QPQ.LIST_TYPE_CODE = 'PRL'             --3965947
   AND   QPQ.LIST_HEADER_ID = QPA.LIST_HEADER_ID
   AND   QPA.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   QPA.QUALIFICATION_IND IN ( QP_PREQ_GRP.G_YES_PROD_HDR_QUAL_IND,QP_PREQ_GRP.G_YES_PROD_IND)
   AND   QPA.EXCLUDER_FLAG = G_NO
   AND   QPLAT_PROD.CONTEXT = QPA.PRODUCT_ATTRIBUTE_CONTEXT
   AND   (QPLINES.PRICE_FLAG = G_YES
          OR
         (QPLINES.PRICE_FLAG = G_PHASE
          AND
          P_FREEZE_OVERRIDE_FLAG = G_YES))
   AND   QPLINES.LIST_PRICE_OVERRIDE_FLAG IN ('N', 'O') --po integration
   AND   QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL
   AND   ((QPLINES.VALIDATED_FLAG = G_YES
             OR
         (QPLINES.VALIDATED_FLAG = G_NO AND
         QPLINES.PRIMARY_QUALIFIERS_MATCH_FLAG = G_YES)
             OR
         QPLINES.QUALIFIERS_EXIST_FLAG = G_NO) AND
         (G_QUALIFY_SECONDARY = G_NO
          OR
          QPA.QUALIFICATION_IND = QP_PREQ_GRP.G_YES_PROD_IND
         ))
   AND   QPLAT_PROD.ATTRIBUTE = QPA.PRODUCT_ATTRIBUTE
   AND   QPLAT_PROD.VALUE_FROM = QPA.PRODUCT_ATTR_VALUE
   AND   QPA.LIST_LINE_ID = QPL.LIST_LINE_ID
   AND   QPL.LIST_HEADER_ID = QPH.LIST_HEADER_ID
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--   AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
   AND    QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPH.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPH.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPL.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPL.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
/* Vivek    AND   QPH.CURRENCY_CODE = QPLINES.CURRENCY_CODE  */
            AND QPH.CURRENCY_HEADER_ID = QCDT.CURRENCY_HEADER_ID /* Vivek */
            AND QPLINES.CURRENCY_CODE = QCDT.TO_CURRENCY_CODE  /* Vivek */
            AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                NVL(TRUNC(QCDT.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                AND NVL(TRUNC(QCDT.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
   AND (   /* Vivek */
        (qcdt.curr_attribute_context is null   /* Vivek */
         and not exists   /* Vivek */
             (select /*+ ORDERED use_nl(qcdt1) index(pa_tmp QP_PREQ_LINE_ATTRS_TMP_N1) */ 'x'   --[julin/5139512/4744915]
	       from qp_npreq_line_attrs_tmp pa_tmp,   qp_currency_details qcdt1 /* Vivek */
               where qcdt1.curr_attribute_context IS NOT NULL  /* Vivek */
		 and qcdt1.curr_attribute_context = pa_tmp.context   /* Vivek */
                 and qcdt1.curr_attribute = pa_tmp.attribute   /* Vivek */
                 and qcdt1.curr_attribute_value = pa_tmp.value_from   /* Vivek */
                 and qcdt1.curr_attribute_type = pa_tmp.ATTRIBUTE_TYPE   /* Vivek */
                 and qcdt1.to_currency_code = qcdt.to_currency_code   /* Vivek */
                 and qcdt1.currency_header_id = qcdt.currency_header_id   /* Vivek */
                 and pa_tmp.pricing_status_code = G_STATUS_UNCHANGED   /* Vivek */
                 and pa_tmp.line_index = qplines.line_index   /* Vivek */
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                     NVL(TRUNC(QCDT1.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                     AND NVL(TRUNC(QCDT1.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
             )   /* Vivek */
        )   /* Vivek */
        OR   /* Vivek */
        (qcdt.curr_attribute_context is not null   /* Vivek */
         and qcdt.currency_detail_id =   /* Vivek */
             (select qcdt3.currency_detail_id
	       from qp_currency_details qcdt3  /* Vivek */
                 where qcdt3.to_currency_code = qcdt.to_currency_code   /* Vivek */
                 and qcdt3.currency_header_id = qcdt.currency_header_id   /* Vivek */
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                     NVL(TRUNC(QCDT3.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                     AND NVL(TRUNC(QCDT3.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                 and  qcdt3.precedence =
             (select /*+ ORDERED use_nl(qcdt2) index(pa_tmp1 QP_PREQ_LINE_ATTRS_TMP_N1) */ min(qcdt2.precedence) --[julin/5139512/4744915]
	       from qp_npreq_line_attrs_tmp pa_tmp1, qp_currency_details qcdt2  /* Vivek */
               where qcdt2.curr_attribute_context IS NOT NULL   /* Vivek */
		 and qcdt2.curr_attribute_context = pa_tmp1.context   /* Vivek */
                 and qcdt2.curr_attribute = pa_tmp1.attribute   /* Vivek */
                 and qcdt2.curr_attribute_value = pa_tmp1.value_from   /* Vivek */
                 and qcdt2.curr_attribute_type = pa_tmp1.ATTRIBUTE_TYPE   /* Vivek */
                 and qcdt2.to_currency_code = qcdt.to_currency_code   /* Vivek */
                 and qcdt2.currency_header_id = qcdt.currency_header_id   /* Vivek */
                 and pa_tmp1.pricing_status_code = G_STATUS_UNCHANGED   /* Vivek */
                 and pa_tmp1.line_index = qplines.line_index   /* Vivek */
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                     NVL(TRUNC(QCDT2.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                     AND NVL(TRUNC(QCDT2.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
             ))   /* Vivek */
        )   /* Vivek */
       )   /* Vivek */
   --AND   (QPL.MODIFIER_LEVEL_CODE = QPLINES.LINE_TYPE_CODE
   --       OR
   --       QPL.MODIFIER_LEVEL_CODE = G_LINE_GROUP AND QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL)
   AND   QPH.SOURCE_SYSTEM_CODE = QPRS.SOURCE_SYSTEM_CODE
   AND   QPLINES.REQUEST_TYPE_CODE   = QPRS.REQUEST_TYPE_CODE
   AND   QPH.ACTIVE_FLAG = G_YES
   AND   QPLAT_PROD.ATTRIBUTE_TYPE = G_PRODUCT_TYPE
   AND   QPQ.ACTIVE_FLAG = G_YES
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
         NVL(QPQ.START_DATE_ACTIVE, QPLINES.PRICING_EFFECTIVE_DATE)
         AND NVL(QPQ.END_DATE_ACTIVE,QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPLAT_PROD.LINE_INDEX = QPLINES.LINE_INDEX
   --AND   QPL.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   QPLAT_PROD.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND   QPLINES.PROCESSED_CODE = G_STS_LHS_NOT_FOUND
   AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
UNION ALL
SELECT /*+ ORDERED USE_NL(QPQ QPLAT_PROD QPA QPLAT_PRIC QPL QPH) index(QPA QP_PRICING_ATTRIBUTES_N5) index(qph qp_list_headers_b_n7) index(qplat_pric qp_preq_line_attrs_tmp_n2) l_sec_list_cur */
                   QPLAT_PROD.LINE_INDEX,
                   QPL.LIST_LINE_ID,
                   QPL.ARITHMETIC_OPERATOR,
                   QPL.OPERAND,
                   QPL.PRICING_GROUP_SEQUENCE,
                   QPL.LIST_LINE_TYPE_CODE,
                   QPL.PRICING_PHASE_ID,
                   QPL.AUTOMATIC_FLAG,
                   QPL.INCOMPATIBILITY_GRP_CODE,
                   QPL.PRICE_BY_FORMULA_ID,
                   QPL.PRODUCT_PRECEDENCE,
                   QPL.PRIMARY_UOM_FLAG,
                   QPL.MODIFIER_LEVEL_CODE,
                   QPL.LIST_LINE_NO,
                   QPA.PRODUCT_UOM_CODE,
                   QPA.EXCLUDER_FLAG,
                   QPH.LIST_TYPE_CODE,
   /* vivek        QPH.ROUNDING_FACTOR,  */
                   QCDT.ROUNDING_FACTOR, /* vivek */
                   QPLAT_PROD.LINE_DETAIL_INDEX,
                   QPH.LIST_HEADER_ID           LIST_HEADER_ID,
                   QPLAT_PROD.CONTEXT         PRODUCT_ATTRIBUTE_CONTEXT,
                   QPLAT_PROD.ATTRIBUTE       PRODUCT_ATTRIBUTE,
                   QPLAT_PROD.VALUE_FROM      PRODUCT_ATTR_VALUE_FROM,
                   QPLAT_PROD.ATTRIBUTE_LEVEL PRODUCT_ATTRIBUTE_LEVEL,
                   QPLAT_PROD.ATTRIBUTE_TYPE  PRODUCT_ATTRIBUTE_TYPE,
                   QPLAT_PROD.APPLIED_FLAG,
                   NULL                            PRODUCT_OPERATOR_TYPE,
                   QPLAT_PRIC.CONTEXT              PRICING_ATTRIBUTE_CONTEXT,
                   QPLAT_PRIC.ATTRIBUTE            PRICING_ATTRIBUTE,
                   QPLAT_PRIC.VALUE_FROM           PRICING_ATTR_VALUE_FROM,
                   QPA.PRICING_ATTR_VALUE_FROM     PRICING_SETUP_VALUE_FROM,
                   QPA.PRICING_ATTR_VALUE_TO       PRICING_SETUP_VALUE_TO,
                   QPLAT_PRIC.ATTRIBUTE_LEVEL      PRICING_ATTRIBUTE_LEVEL,
                   QPLAT_PRIC.ATTRIBUTE_TYPE       PRICING_ATTRIBUTE_TYPE,
                   QPA.COMPARISON_OPERATOR_CODE    PRICING_OPERATOR_TYPE,
                   QPA.PRICING_ATTRIBUTE_DATATYPE   PRICING_ATTRIBUTE_DATATYPE,
                   NULL                      QUALIFIER_ATTRIBUTE_CONTEXT,
                   NULL                      QUALIFIER_ATTRIBUTE,
                   NULL                      QUALIFIER_ATTR_VALUE_FROM,
                   NULL                      QUALIFIER_PRICING_ATTR_FLAG,
                   to_number(NULL)           QUALIFIER_GROUPING_NO,
                   NULL                      QUALIFIER_DATATYPE,
                   NULL                      SETUP_VALUE_FROM,
                   NULL                      SETUP_VALUE_TO,
                   NULL                      QUALIFIER_OPERATOR_TYPE,
                   QPQ.QUALIFIER_PRECEDENCE  QUALIFIER_PRECEDENCE,
                   QCDT.CURRENCY_DETAIL_ID,  /* sunilpandey */
                   QCDT.CURRENCY_HEADER_ID,  /* vivek */
                   QCDT.SELLING_ROUNDING_FACTOR,  /* vivek */
                   QPLINES.CURRENCY_CODE   ORDER_CURRENCY,  /* vivek */
                   QPLINES.PRICING_EFFECTIVE_DATE,  /* vivek */
                   QPH.CURRENCY_CODE   BASE_CURRENCY_CODE  /* vivek */
                  ,QPL.BREAK_UOM_CODE /* Proration */
                  ,QPL.BREAK_UOM_CONTEXT /* Proration */
                  ,QPL.BREAK_UOM_ATTRIBUTE /* Proration */
                  ,NULL QUALIFIER_TYPE -- 3863226
                  ,QPLAT_PRIC.DERIVED_QUALIFIER_FLAG   -- Added for TCA
   FROM
         qp_npreq_lines_tmp qplines,
         QP_QUALIFIERS qpq,
         qp_npreq_line_attrs_tmp qplat_prod,
         QP_PRICING_ATTRIBUTES qpa,
         qp_npreq_line_attrs_tmp qplat_pric,
         QP_LIST_LINES qpl,
         QP_LIST_HEADERS_B qph,
         --QP_PRICE_REQ_SOURCES qprs,
         QP_PRICE_REQ_SOURCES_V qprs, /* yangli */
         QP_CURRENCY_DETAILS QCDT   /* Vivek */
   WHERE QPQ.QUALIFIER_CONTEXT = G_LIST_HEADER_CONTEXT
   AND   QPQ.QUALIFIER_ATTRIBUTE = G_PRICELIST_ATTRIBUTE
   AND   QPQ.QUALIFIER_ATTR_VALUE = to_char(QPLINES.PRICE_LIST_HEADER_ID)
   AND   QPQ.COMPARISON_OPERATOR_CODE = '='
   AND   QPQ.LIST_TYPE_CODE = 'PRL'             --3965947
   AND   QPA.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   QPA.QUALIFICATION_IND IN (QP_PREQ_GRP.G_YES_PROD_PRIC_HDR_QUAL_IND,QP_PREQ_GRP.G_YES_PROD_PRIC_IND)
   AND   QPLAT_PROD.CONTEXT = QPA.PRODUCT_ATTRIBUTE_CONTEXT
   AND   (QPLINES.PRICE_FLAG = G_YES
          OR
         (QPLINES.PRICE_FLAG = G_PHASE
          AND
          P_FREEZE_OVERRIDE_FLAG = G_YES))
   AND   QPLINES.LIST_PRICE_OVERRIDE_FLAG IN ('N', 'O') --po integration
   AND   QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL
   AND   ((QPLINES.VALIDATED_FLAG = G_YES
             OR
         (QPLINES.VALIDATED_FLAG = G_NO AND
         QPLINES.PRIMARY_QUALIFIERS_MATCH_FLAG = G_YES)
             OR
         QPLINES.QUALIFIERS_EXIST_FLAG = G_NO) AND
         (G_QUALIFY_SECONDARY = G_NO
          OR
          QPA.QUALIFICATION_IND = QP_PREQ_GRP.G_YES_PROD_PRIC_IND
         ))
   AND   QPLAT_PROD.ATTRIBUTE = QPA.PRODUCT_ATTRIBUTE
   AND   QPLAT_PROD.VALUE_FROM = QPA.PRODUCT_ATTR_VALUE
   AND   QPA.EXCLUDER_FLAG = G_NO
   AND   QPLAT_PROD.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND   QPLAT_PRIC.CONTEXT = QPA.PRICING_ATTRIBUTE_CONTEXT
   AND   QPLAT_PRIC.ATTRIBUTE = QPA.PRICING_ATTRIBUTE
   AND   (QPLAT_PRIC.VALUE_FROM = QPA.PRICING_ATTR_VALUE_FROM
          OR
          QPA.COMPARISON_OPERATOR_CODE IN ('NOT =', G_OPERATOR_BETWEEN))
   AND   QPLAT_PRIC.ATTRIBUTE_TYPE = G_PRICING_TYPE
   AND   QPLAT_PRIC. PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND   QPLAT_PRIC.LINE_INDEX = QPLAT_PROD.LINE_INDEX
   AND   QPA.LIST_HEADER_ID = QPQ.LIST_HEADER_ID
   AND   QPA.LIST_LINE_ID = QPL.LIST_LINE_ID
   AND   QPH.LIST_HEADER_ID = QPL.LIST_HEADER_ID
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--   AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
   AND    QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPH.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPH.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPL.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPL.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
/* Vivek    AND   QPH.CURRENCY_CODE = QPLINES.CURRENCY_CODE  */
            AND QPH.CURRENCY_HEADER_ID = QCDT.CURRENCY_HEADER_ID /* Vivek */
            AND QPLINES.CURRENCY_CODE = QCDT.TO_CURRENCY_CODE  /* Vivek */
            AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                NVL(TRUNC(QCDT.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                AND NVL(TRUNC(QCDT.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
   AND (   /* Vivek */
        (qcdt.curr_attribute_context is null   /* Vivek */
         and not exists   /* Vivek */
             (select /*+ ORDERED use_nl(qcdt1) index(pa_tmp QP_PREQ_LINE_ATTRS_TMP_N1) */ 'x'   --[julin/5139512/4744915]
	       from qp_npreq_line_attrs_tmp pa_tmp,   qp_currency_details qcdt1 /* Vivek */
               where qcdt1.curr_attribute_context IS NOT NULL  /* Vivek */
		 and qcdt1.curr_attribute_context = pa_tmp.context   /* Vivek */
                 and qcdt1.curr_attribute = pa_tmp.attribute   /* Vivek */
                 and qcdt1.curr_attribute_value = pa_tmp.value_from   /* Vivek */
                 and qcdt1.curr_attribute_type = pa_tmp.ATTRIBUTE_TYPE   /* Vivek */
                 and qcdt1.to_currency_code = qcdt.to_currency_code   /* Vivek */
                 and qcdt1.currency_header_id = qcdt.currency_header_id   /* Vivek */
                 and pa_tmp.pricing_status_code = G_STATUS_UNCHANGED   /* Vivek */
                 and pa_tmp.line_index = qplines.line_index   /* Vivek */
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                     NVL(TRUNC(QCDT1.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                     AND NVL(TRUNC(QCDT1.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
             )   /* Vivek */
        )   /* Vivek */
        OR   /* Vivek */
        (qcdt.curr_attribute_context is not null   /* Vivek */
         and qcdt.currency_detail_id =   /* Vivek */
             (select qcdt3.currency_detail_id
	       from qp_currency_details qcdt3  /* Vivek */
                 where qcdt3.to_currency_code = qcdt.to_currency_code   /* Vivek */
                 and qcdt3.currency_header_id = qcdt.currency_header_id   /* Vivek */
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                     NVL(TRUNC(QCDT3.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                     AND NVL(TRUNC(QCDT3.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                 and  qcdt3.precedence =
             (select /*+ ORDERED use_nl(qcdt2) index(pa_tmp1 QP_PREQ_LINE_ATTRS_TMP_N1) */ min(qcdt2.precedence) --[julin/5139512/4744915]
	       from qp_npreq_line_attrs_tmp pa_tmp1, qp_currency_details qcdt2  /* Vivek */
               where qcdt2.curr_attribute_context IS NOT NULL   /* Vivek */
		 and qcdt2.curr_attribute_context = pa_tmp1.context   /* Vivek */
                 and qcdt2.curr_attribute = pa_tmp1.attribute   /* Vivek */
                 and qcdt2.curr_attribute_value = pa_tmp1.value_from   /* Vivek */
                 and qcdt2.curr_attribute_type = pa_tmp1.ATTRIBUTE_TYPE   /* Vivek */
                 and qcdt2.to_currency_code = qcdt.to_currency_code   /* Vivek */
                 and qcdt2.currency_header_id = qcdt.currency_header_id   /* Vivek */
                 and pa_tmp1.pricing_status_code = G_STATUS_UNCHANGED   /* Vivek */
                 and pa_tmp1.line_index = qplines.line_index   /* Vivek */
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                     NVL(TRUNC(QCDT2.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                     AND NVL(TRUNC(QCDT2.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
             ))   /* Vivek */
        )   /* Vivek */
       )   /* Vivek */
   --AND   (QPL.MODIFIER_LEVEL_CODE = QPLINES.LINE_TYPE_CODE
   --       OR
   --       QPL.MODIFIER_LEVEL_CODE = G_LINE_GROUP AND QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL)
   AND   QPH.SOURCE_SYSTEM_CODE = QPRS.SOURCE_SYSTEM_CODE
   AND   QPLINES.REQUEST_TYPE_CODE   = QPRS.REQUEST_TYPE_CODE
   AND   QPH.ACTIVE_FLAG = G_YES
   AND   QPQ.ACTIVE_FLAG = G_YES
   AND   QPLAT_PROD.ATTRIBUTE_TYPE = G_PRODUCT_TYPE
   AND   QPLAT_PROD.LINE_INDEX = QPLINES.LINE_INDEX
   --AND   QPL.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   QPLINES.PROCESSED_CODE = G_STS_LHS_NOT_FOUND
   AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
UNION ALL
SELECT /*+ ORDERED USE_NL(QPQ QPLAT_PROD QPA QPL QPH) INDEX(QPA QP_PRICING_ATTRIBUTES_N5) index(qph qp_list_headers_b_n7) l_sec_list_cur */
                   QPLAT_PROD.LINE_INDEX,
                   QPL.LIST_LINE_ID,
                   QPL.ARITHMETIC_OPERATOR,
                   QPL.OPERAND,
                   QPL.PRICING_GROUP_SEQUENCE,
                   QPL.LIST_LINE_TYPE_CODE,
                   QPL.PRICING_PHASE_ID,
                   QPL.AUTOMATIC_FLAG,
                   QPL.INCOMPATIBILITY_GRP_CODE,
                   QPL.PRICE_BY_FORMULA_ID,
                   QPL.PRODUCT_PRECEDENCE,
                   QPL.PRIMARY_UOM_FLAG,
                   QPL.MODIFIER_LEVEL_CODE,
                   QPL.LIST_LINE_NO,
                   QPA.PRODUCT_UOM_CODE,
                   QPA.EXCLUDER_FLAG,
                   QPH.LIST_TYPE_CODE,
   /* vivek        QPH.ROUNDING_FACTOR,  */
                   QCDT.ROUNDING_FACTOR, /* vivek */
                   QPLAT_PROD.LINE_DETAIL_INDEX,
                   QPH.LIST_HEADER_ID           LIST_HEADER_ID,
                   QPLAT_PROD.CONTEXT         PRODUCT_ATTRIBUTE_CONTEXT,
                   QPLAT_PROD.ATTRIBUTE       PRODUCT_ATTRIBUTE,
                   QPLAT_PROD.VALUE_FROM      PRODUCT_ATTR_VALUE_FROM,
                   QPLAT_PROD.ATTRIBUTE_LEVEL PRODUCT_ATTRIBUTE_LEVEL,
                   QPLAT_PROD.ATTRIBUTE_TYPE  PRODUCT_ATTRIBUTE_TYPE,
                   QPLAT_PROD.APPLIED_FLAG,
                   NULL                      PRODUCT_OPERATOR_TYPE,
                   NULL                      PRICING_ATTRIBUTE_CONTEXT,
                   NULL                      PRICING_ATTRIBUTE,
                   NULL                      PRICING_ATTR_VALUE_FROM,
                   NULL                      PRICING_SETUP_VALUE_FROM,
                   NULL                      PRICING_SETUP_VALUE_TO,
                   NULL                      PRICING_ATTRIBUTE_LEVEL,
                   NULL                      PRICING_ATTRIBUTE_TYPE,
                   NULL                      PRICING_OPERATOR_TYPE,
                   NULL                      PRICING_ATTRIBUTE_DATATYPE,
                   QPLAT_Q.CONTEXT              QUALIFIER_ATTRIBUTE_CONTEXT,
                   QPLAT_Q.ATTRIBUTE            QUALIFIER_ATTRIBUTE,
                   QPLAT_Q.VALUE_FROM           QUALIFIER_ATTR_VALUE_FROM,
                   QPLAT_Q.PRICING_ATTR_FLAG    QUALIFIER_PRICING_ATTR_FLAG,
                   QPSQ.QUALIFIER_GROUPING_NO   QUALIFIER_GROUPING_NO,
                   QPSQ.QUALIFIER_DATATYPE      QUALIFIER_DATATYPE,
                   QPSQ.QUALIFIER_ATTR_VALUE     SETUP_VALUE_FROM,
                   QPSQ.QUALIFIER_ATTR_VALUE_TO  SETUP_VALUE_TO,
                   QPSQ.COMPARISON_OPERATOR_CODE QUALIFIER_OPERATOR_TYPE,
                   QPQ.QUALIFIER_PRECEDENCE  QUALIFIER_PRECEDENCE,
                   QCDT.CURRENCY_DETAIL_ID,  /* sunilpandey */
                   QCDT.CURRENCY_HEADER_ID,  /* vivek */
                   QCDT.SELLING_ROUNDING_FACTOR,  /* vivek */
                   QPLINES.CURRENCY_CODE   ORDER_CURRENCY,  /* vivek */
                   QPLINES.PRICING_EFFECTIVE_DATE,  /* vivek */
                   QPH.CURRENCY_CODE   BASE_CURRENCY_CODE  /* vivek */
                  ,QPL.BREAK_UOM_CODE /* Proration */
                  ,QPL.BREAK_UOM_CONTEXT /* Proration */
                  ,QPL.BREAK_UOM_ATTRIBUTE /* Proration */
                  ,DECODE(QPQ.list_line_id, -1, 'HQ', 'LQ') QUALIFIER_TYPE  --3863226
                  ,QPLAT_Q.DERIVED_QUALIFIER_FLAG   -- Added for TCA
   FROM
         qp_npreq_lines_tmp QPLINES,
         QP_QUALIFIERS QPQ,
         QP_QUALIFIERS QPSQ,
	 qp_npreq_line_attrs_tmp QPLAT_PROD,
         qp_npreq_line_attrs_tmp  QPLAT_Q,
         QP_PRICING_ATTRIBUTES QPA,
         QP_LIST_LINES QPL,
         QP_LIST_HEADERS_B QPH,
         --QP_PRICE_REQ_SOURCES QPRS,
         QP_PRICE_REQ_SOURCES_V QPRS, /* yangli */
         QP_CURRENCY_DETAILS QCDT   /* Vivek */
   WHERE QPQ.QUALIFIER_CONTEXT = G_LIST_HEADER_CONTEXT
   AND   QPQ.QUALIFIER_ATTRIBUTE = G_PRICELIST_ATTRIBUTE
   AND   QPQ.QUALIFIER_ATTR_VALUE = to_char(QPLINES.PRICE_LIST_HEADER_ID)
   AND   QPQ.COMPARISON_OPERATOR_CODE = '='
   AND   QPQ.LIST_TYPE_CODE = 'PRL'             --3965947
   AND   QPQ.LIST_HEADER_ID = QPA.LIST_HEADER_ID
   AND   QPA.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   QPA.QUALIFICATION_IND = QP_PREQ_GRP.G_YES_PROD_HDR_QUAL_IND
   AND   QPA.EXCLUDER_FLAG = G_NO
   AND   QPLAT_PROD.CONTEXT = QPA.PRODUCT_ATTRIBUTE_CONTEXT
   AND   (QPLINES.PRICE_FLAG = G_YES
          OR
         (QPLINES.PRICE_FLAG = G_PHASE
          AND
          P_FREEZE_OVERRIDE_FLAG = G_YES))
   AND   QPLINES.LIST_PRICE_OVERRIDE_FLAG IN ('N', 'O') --po integration
   AND   QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL
   AND   QPLINES.VALIDATED_FLAG = G_NO
   AND   (QPLINES.PRIMARY_QUALIFIERS_MATCH_FLAG = G_YES
          OR
          QPLINES.QUALIFIERS_EXIST_FLAG = G_NO
          )
   AND   QPLAT_PROD.ATTRIBUTE = QPA.PRODUCT_ATTRIBUTE
   AND   QPLAT_PROD.VALUE_FROM = QPA.PRODUCT_ATTR_VALUE
   AND   QPA.LIST_LINE_ID = QPL.LIST_LINE_ID
   AND   QPL.LIST_HEADER_ID = QPH.LIST_HEADER_ID
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--   AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
   AND    QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPH.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPH.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPL.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPL.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
/* Vivek    AND   QPH.CURRENCY_CODE = QPLINES.CURRENCY_CODE  */
            AND QPH.CURRENCY_HEADER_ID = QCDT.CURRENCY_HEADER_ID /* Vivek */
            AND QPLINES.CURRENCY_CODE = QCDT.TO_CURRENCY_CODE  /* Vivek */
            AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                NVL(TRUNC(QCDT.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                AND NVL(TRUNC(QCDT.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
   AND (   /* Vivek */
        (qcdt.curr_attribute_context is null   /* Vivek */
         and not exists   /* Vivek */
             (select /*+ ORDERED use_nl(qcdt1) index(pa_tmp QP_PREQ_LINE_ATTRS_TMP_N1) */ 'x'   --[julin/5139512/4744915]
	       from qp_npreq_line_attrs_tmp pa_tmp,   qp_currency_details qcdt1 /* Vivek */
               where qcdt1.curr_attribute_context IS NOT NULL  /* Vivek */
		 and qcdt1.curr_attribute_context = pa_tmp.context   /* Vivek */
                 and qcdt1.curr_attribute = pa_tmp.attribute   /* Vivek */
                 and qcdt1.curr_attribute_value = pa_tmp.value_from   /* Vivek */
                 and qcdt1.curr_attribute_type = pa_tmp.ATTRIBUTE_TYPE   /* Vivek */
                 and qcdt1.to_currency_code = qcdt.to_currency_code   /* Vivek */
                 and qcdt1.currency_header_id = qcdt.currency_header_id   /* Vivek */
                 and pa_tmp.pricing_status_code = G_STATUS_UNCHANGED   /* Vivek */
                 and pa_tmp.line_index = qplines.line_index   /* Vivek */
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                     NVL(TRUNC(QCDT1.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                     AND NVL(TRUNC(QCDT1.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
             )   /* Vivek */
        )   /* Vivek */
        OR   /* Vivek */
        (qcdt.curr_attribute_context is not null   /* Vivek */
         and qcdt.currency_detail_id =   /* Vivek */
             (select qcdt3.currency_detail_id
	       from qp_currency_details qcdt3  /* Vivek */
                 where qcdt3.to_currency_code = qcdt.to_currency_code   /* Vivek */
                 and qcdt3.currency_header_id = qcdt.currency_header_id   /* Vivek */
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                     NVL(TRUNC(QCDT3.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                     AND NVL(TRUNC(QCDT3.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                 and  qcdt3.precedence =
             (select /*+ ORDERED use_nl(qcdt2) index(pa_tmp1 QP_PREQ_LINE_ATTRS_TMP_N1) */ min(qcdt2.precedence) --[julin/5139512/4744915]
	       from qp_npreq_line_attrs_tmp pa_tmp1, qp_currency_details qcdt2  /* Vivek */
               where qcdt2.curr_attribute_context IS NOT NULL   /* Vivek */
		 and qcdt2.curr_attribute_context = pa_tmp1.context   /* Vivek */
                 and qcdt2.curr_attribute = pa_tmp1.attribute   /* Vivek */
                 and qcdt2.curr_attribute_value = pa_tmp1.value_from   /* Vivek */
                 and qcdt2.curr_attribute_type = pa_tmp1.ATTRIBUTE_TYPE   /* Vivek */
                 and qcdt2.to_currency_code = qcdt.to_currency_code   /* Vivek */
                 and qcdt2.currency_header_id = qcdt.currency_header_id   /* Vivek */
                 and pa_tmp1.pricing_status_code = G_STATUS_UNCHANGED   /* Vivek */
                 and pa_tmp1.line_index = qplines.line_index   /* Vivek */
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                     NVL(TRUNC(QCDT2.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                     AND NVL(TRUNC(QCDT2.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
             ))   /* Vivek */
        )   /* Vivek */
       )   /* Vivek */
   --AND   (QPL.MODIFIER_LEVEL_CODE = QPLINES.LINE_TYPE_CODE
   --       OR
   --       QPL.MODIFIER_LEVEL_CODE = G_LINE_GROUP AND QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL)
   AND   QPH.SOURCE_SYSTEM_CODE = QPRS.SOURCE_SYSTEM_CODE
   AND   QPLINES.REQUEST_TYPE_CODE   = QPRS.REQUEST_TYPE_CODE
   AND   QPH.ACTIVE_FLAG = G_YES
   AND   QPLAT_PROD.ATTRIBUTE_TYPE = G_PRODUCT_TYPE
   AND   QPQ.ACTIVE_FLAG = G_YES
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
         NVL(QPQ.START_DATE_ACTIVE, QPLINES.PRICING_EFFECTIVE_DATE)
         AND NVL(QPQ.END_DATE_ACTIVE,QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPLAT_PROD.LINE_INDEX = QPLINES.LINE_INDEX
   --AND   QPL.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   QPLAT_PROD.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND   QPLINES.PROCESSED_CODE = G_STS_LHS_NOT_FOUND
   AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
   AND   QPLAT_Q.ATTRIBUTE_TYPE = G_QUALIFIER_TYPE
-- 3594459, context and attribute OR'd together
   AND   (QPSQ.QUALIFIER_CONTEXT <> G_LIST_HEADER_CONTEXT
          OR QPSQ.QUALIFIER_ATTRIBUTE <> G_PRICELIST_ATTRIBUTE)
   AND   QPLAT_Q.CONTEXT       = QPSQ.QUALIFIER_CONTEXT
   AND   QPLAT_Q.ATTRIBUTE     = QPSQ.QUALIFIER_ATTRIBUTE
   AND   QPSQ.LIST_HEADER_ID    = QPQ.LIST_HEADER_ID
   AND   QPSQ.ACTIVE_FLAG = G_YES
   AND   ((QPLAT_Q.VALUE_FROM   = QPSQ.QUALIFIER_ATTR_VALUE --bug#1761272 Multiple NOT =
                AND QPSQ.COMPARISON_OPERATOR_CODE = '=')
           OR (QPLAT_Q.VALUE_FROM  <> QPSQ.QUALIFIER_ATTR_VALUE
                AND QPSQ.COMPARISON_OPERATOR_CODE = 'NOT =')
           OR
          QPSQ.COMPARISON_OPERATOR_CODE = G_OPERATOR_BETWEEN)
   AND   QPLAT_Q.LINE_INDEX  =   QPLINES.LINE_INDEX
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
         NVL(QPSQ.START_DATE_ACTIVE, QPLINES.PRICING_EFFECTIVE_DATE)
         AND NVL(QPSQ.END_DATE_ACTIVE,QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPLAT_PROD.LINE_INDEX = QPLAT_Q.LINE_INDEX
   AND   QPLAT_Q.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND   G_QUALIFY_SECONDARY = G_YES
   AND ((nvl(QPLAT_Q.DERIVED_QUALIFIER_FLAG,'N')='N')
          OR (QPLAT_Q.DERIVED_QUALIFIER_FLAG = 'Y' AND QPSQ.QUALIFY_HIER_DESCENDENTS_FLAG = 'Y')) -- Added for TCA
UNION ALL
SELECT /*+ ORDERED USE_NL(QPQ QPLAT_PROD QPA QPLAT_PRIC QPL QPH) index(QPA QP_PRICING_ATTRIBUTES_N5) index(qph qp_list_headers_b_n7) index(qplat_pric qp_preq_line_attrs_tmp_n2) l_sec_list_cur */
                   QPLAT_PROD.LINE_INDEX,
                   QPL.LIST_LINE_ID,
                   QPL.ARITHMETIC_OPERATOR,
                   QPL.OPERAND,
                   QPL.PRICING_GROUP_SEQUENCE,
                   QPL.LIST_LINE_TYPE_CODE,
                   QPL.PRICING_PHASE_ID,
                   QPL.AUTOMATIC_FLAG,
                   QPL.INCOMPATIBILITY_GRP_CODE,
                   QPL.PRICE_BY_FORMULA_ID,
                   QPL.PRODUCT_PRECEDENCE,
                   QPL.PRIMARY_UOM_FLAG,
                   QPL.MODIFIER_LEVEL_CODE,
                   QPL.LIST_LINE_NO,
                   QPA.PRODUCT_UOM_CODE,
                   QPA.EXCLUDER_FLAG,
                   QPH.LIST_TYPE_CODE,
   /* vivek        QPH.ROUNDING_FACTOR,  */
                   QCDT.ROUNDING_FACTOR, /* vivek */
                   QPLAT_PROD.LINE_DETAIL_INDEX,
                   QPH.LIST_HEADER_ID           LIST_HEADER_ID,
                   QPLAT_PROD.CONTEXT         PRODUCT_ATTRIBUTE_CONTEXT,
                   QPLAT_PROD.ATTRIBUTE       PRODUCT_ATTRIBUTE,
                   QPLAT_PROD.VALUE_FROM      PRODUCT_ATTR_VALUE_FROM,
                   QPLAT_PROD.ATTRIBUTE_LEVEL PRODUCT_ATTRIBUTE_LEVEL,
                   QPLAT_PROD.ATTRIBUTE_TYPE  PRODUCT_ATTRIBUTE_TYPE,
                   QPLAT_PROD.APPLIED_FLAG,
                   NULL                            PRODUCT_OPERATOR_TYPE,
                   QPLAT_PRIC.CONTEXT              PRICING_ATTRIBUTE_CONTEXT,
                   QPLAT_PRIC.ATTRIBUTE            PRICING_ATTRIBUTE,
                   QPLAT_PRIC.VALUE_FROM           PRICING_ATTR_VALUE_FROM,
                   QPA.PRICING_ATTR_VALUE_FROM     PRICING_SETUP_VALUE_FROM,
                   QPA.PRICING_ATTR_VALUE_TO       PRICING_SETUP_VALUE_TO,
                   QPLAT_PRIC.ATTRIBUTE_LEVEL      PRICING_ATTRIBUTE_LEVEL,
                   QPLAT_PRIC.ATTRIBUTE_TYPE       PRICING_ATTRIBUTE_TYPE,
                   QPA.COMPARISON_OPERATOR_CODE    PRICING_OPERATOR_TYPE,
                   QPA.PRICING_ATTRIBUTE_DATATYPE   PRICING_ATTRIBUTE_DATATYPE,
                   QPLAT_Q.CONTEXT              QUALIFIER_ATTRIBUTE_CONTEXT,
                   QPLAT_Q.ATTRIBUTE            QUALIFIER_ATTRIBUTE,
                   QPLAT_Q.VALUE_FROM           QUALIFIER_ATTR_VALUE_FROM,
                   QPLAT_Q.PRICING_ATTR_FLAG    QUALIFIER_PRICING_ATTR_FLAG,
                   QPSQ.QUALIFIER_GROUPING_NO   QUALIFIER_GROUPING_NO,
                   QPSQ.QUALIFIER_DATATYPE      QUALIFIER_DATATYPE,
                   QPSQ.QUALIFIER_ATTR_VALUE     SETUP_VALUE_FROM,
                   QPSQ.QUALIFIER_ATTR_VALUE_TO  SETUP_VALUE_TO,
                   QPSQ.COMPARISON_OPERATOR_CODE QUALIFIER_OPERATOR_TYPE,
                   QPQ.QUALIFIER_PRECEDENCE  QUALIFIER_PRECEDENCE,
                   QCDT.CURRENCY_DETAIL_ID,  /* sunilpandey */
                   QCDT.CURRENCY_HEADER_ID,  /* vivek */
                   QCDT.SELLING_ROUNDING_FACTOR,  /* vivek */
                   QPLINES.CURRENCY_CODE   ORDER_CURRENCY,  /* vivek */
                   QPLINES.PRICING_EFFECTIVE_DATE,  /* vivek */
                   QPH.CURRENCY_CODE   BASE_CURRENCY_CODE  /* vivek */
                  ,QPL.BREAK_UOM_CODE /* Proration */
                  ,QPL.BREAK_UOM_CONTEXT /* Proration */
                  ,QPL.BREAK_UOM_ATTRIBUTE /* Proration */
                  ,DECODE(QPQ.list_line_id, -1, 'HQ', 'LQ') QUALIFIER_TYPE  --3863226
                  ,QPLAT_Q.DERIVED_QUALIFIER_FLAG   -- Added for TCA
   FROM
         qp_npreq_lines_tmp qplines,
         QP_QUALIFIERS qpq,
         QP_QUALIFIERS qpsq,
         qp_npreq_line_attrs_tmp qplat_prod,
         QP_PRICING_ATTRIBUTES qpa,
         qp_npreq_line_attrs_tmp qplat_pric,
         qp_npreq_line_attrs_tmp qplat_q,
         QP_LIST_LINES qpl,
         QP_LIST_HEADERS_B qph,
         --QP_PRICE_REQ_SOURCES qprs,
         QP_PRICE_REQ_SOURCES_V qprs, /* yangli */
         QP_CURRENCY_DETAILS QCDT   /* Vivek */
   WHERE QPQ.QUALIFIER_CONTEXT = G_LIST_HEADER_CONTEXT
   AND   QPQ.QUALIFIER_ATTRIBUTE = G_PRICELIST_ATTRIBUTE
   AND   QPQ.QUALIFIER_ATTR_VALUE = to_char(QPLINES.PRICE_LIST_HEADER_ID)
   AND   QPQ.COMPARISON_OPERATOR_CODE = '='
   AND   QPQ.LIST_TYPE_CODE = 'PRL'             --3965947
   AND   QPA.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   QPA.QUALIFICATION_IND = QP_PREQ_GRP.G_YES_PROD_PRIC_HDR_QUAL_IND
   AND   QPLAT_PROD.CONTEXT = QPA.PRODUCT_ATTRIBUTE_CONTEXT
   AND   (QPLINES.PRICE_FLAG = G_YES
          OR
         (QPLINES.PRICE_FLAG = G_PHASE
          AND
          P_FREEZE_OVERRIDE_FLAG = G_YES))
   AND   QPLINES.LIST_PRICE_OVERRIDE_FLAG IN ('N', 'O') --po integration
   AND   QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL
   AND   QPLINES.VALIDATED_FLAG = G_NO
   AND   (QPLINES.PRIMARY_QUALIFIERS_MATCH_FLAG = G_YES
          OR
          QPLINES.QUALIFIERS_EXIST_FLAG = G_NO
          )
   AND   QPLAT_PROD.ATTRIBUTE = QPA.PRODUCT_ATTRIBUTE
   AND   QPLAT_PROD.VALUE_FROM = QPA.PRODUCT_ATTR_VALUE
   AND   QPA.EXCLUDER_FLAG = G_NO
   AND   QPLAT_PROD.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND   QPLAT_PRIC.CONTEXT = QPA.PRICING_ATTRIBUTE_CONTEXT
   AND   QPLAT_PRIC.ATTRIBUTE = QPA.PRICING_ATTRIBUTE
   AND   (QPLAT_PRIC.VALUE_FROM = QPA.PRICING_ATTR_VALUE_FROM
          OR
          QPA.COMPARISON_OPERATOR_CODE IN ('NOT =', G_OPERATOR_BETWEEN))
   AND   QPLAT_PRIC.ATTRIBUTE_TYPE = G_PRICING_TYPE
   AND   QPLAT_PRIC. PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND   QPLAT_PRIC.LINE_INDEX = QPLAT_PROD.LINE_INDEX
   AND   QPA.LIST_HEADER_ID = QPQ.LIST_HEADER_ID
   AND   QPA.LIST_LINE_ID = QPL.LIST_LINE_ID
   AND   QPH.LIST_HEADER_ID = QPL.LIST_HEADER_ID
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--   AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
   AND    QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPH.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPH.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPL.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPL.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
/* Vivek    AND   QPH.CURRENCY_CODE = QPLINES.CURRENCY_CODE  */
            AND QPH.CURRENCY_HEADER_ID = QCDT.CURRENCY_HEADER_ID /* Vivek */
            AND QPLINES.CURRENCY_CODE = QCDT.TO_CURRENCY_CODE  /* Vivek */
            AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                NVL(TRUNC(QCDT.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                AND NVL(TRUNC(QCDT.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
   AND (   /* Vivek */
        (qcdt.curr_attribute_context is null   /* Vivek */
         and not exists   /* Vivek */
             (select /*+ ORDERED use_nl(qcdt1) index(pa_tmp QP_PREQ_LINE_ATTRS_TMP_N1) */ 'x'   --[julin/5139512/4744915]
	       from qp_npreq_line_attrs_tmp pa_tmp,   qp_currency_details qcdt1 /* Vivek */
               where qcdt1.curr_attribute_context IS NOT NULL  /* Vivek */
		 and qcdt1.curr_attribute_context = pa_tmp.context   /* Vivek */
                 and qcdt1.curr_attribute = pa_tmp.attribute   /* Vivek */
                 and qcdt1.curr_attribute_value = pa_tmp.value_from   /* Vivek */
                 and qcdt1.curr_attribute_type = pa_tmp.ATTRIBUTE_TYPE   /* Vivek */
                 and qcdt1.to_currency_code = qcdt.to_currency_code   /* Vivek */
                 and qcdt1.currency_header_id = qcdt.currency_header_id   /* Vivek */
                 and pa_tmp.pricing_status_code = G_STATUS_UNCHANGED   /* Vivek */
                 and pa_tmp.line_index = qplines.line_index   /* Vivek */
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                     NVL(TRUNC(QCDT1.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                     AND NVL(TRUNC(QCDT1.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
             )   /* Vivek */
        )   /* Vivek */
        OR   /* Vivek */
        (qcdt.curr_attribute_context is not null   /* Vivek */
         and qcdt.currency_detail_id =   /* Vivek */
             (select qcdt3.currency_detail_id
	       from qp_currency_details qcdt3  /* Vivek */
                 where qcdt3.to_currency_code = qcdt.to_currency_code   /* Vivek */
                 and qcdt3.currency_header_id = qcdt.currency_header_id   /* Vivek */
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                     NVL(TRUNC(QCDT3.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                     AND NVL(TRUNC(QCDT3.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                 and  qcdt3.precedence =
             (select /*+ ORDERED use_nl(qcdt2) index(pa_tmp1 QP_PREQ_LINE_ATTRS_TMP_N1) */ min(qcdt2.precedence) --[julin/5139512/4744915]
	       from qp_npreq_line_attrs_tmp pa_tmp1, qp_currency_details qcdt2  /* Vivek */
               where qcdt2.curr_attribute_context IS NOT NULL   /* Vivek */
		 and qcdt2.curr_attribute_context = pa_tmp1.context   /* Vivek */
                 and qcdt2.curr_attribute = pa_tmp1.attribute   /* Vivek */
                 and qcdt2.curr_attribute_value = pa_tmp1.value_from   /* Vivek */
                 and qcdt2.curr_attribute_type = pa_tmp1.ATTRIBUTE_TYPE   /* Vivek */
                 and qcdt2.to_currency_code = qcdt.to_currency_code   /* Vivek */
                 and qcdt2.currency_header_id = qcdt.currency_header_id   /* Vivek */
                 and pa_tmp1.pricing_status_code = G_STATUS_UNCHANGED   /* Vivek */
                 and pa_tmp1.line_index = qplines.line_index   /* Vivek */
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                     NVL(TRUNC(QCDT2.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                     AND NVL(TRUNC(QCDT2.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
             ))   /* Vivek */
        )   /* Vivek */
       )   /* Vivek */
   --AND   (QPL.MODIFIER_LEVEL_CODE = QPLINES.LINE_TYPE_CODE
   --       OR
   --       QPL.MODIFIER_LEVEL_CODE = G_LINE_GROUP AND QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL)
   AND   QPH.SOURCE_SYSTEM_CODE = QPRS.SOURCE_SYSTEM_CODE
   AND   QPLINES.REQUEST_TYPE_CODE   = QPRS.REQUEST_TYPE_CODE
   AND   QPH.ACTIVE_FLAG = G_YES
   AND   QPQ.ACTIVE_FLAG = G_YES
   AND   QPLAT_PROD.ATTRIBUTE_TYPE = G_PRODUCT_TYPE
   AND   QPLAT_PROD.LINE_INDEX = QPLINES.LINE_INDEX
   AND   QPLAT_PROD.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND   QPLINES.PROCESSED_CODE = G_STS_LHS_NOT_FOUND
   AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
   AND   QPLAT_Q.ATTRIBUTE_TYPE = G_QUALIFIER_TYPE
-- 3594459, context and attribute OR'd together
   AND   (QPSQ.QUALIFIER_CONTEXT <> G_LIST_HEADER_CONTEXT
          OR QPSQ.QUALIFIER_ATTRIBUTE <> G_PRICELIST_ATTRIBUTE)
   AND   QPLAT_Q.CONTEXT       = QPSQ.QUALIFIER_CONTEXT
   AND   QPLAT_Q.ATTRIBUTE     = QPSQ.QUALIFIER_ATTRIBUTE
   AND   QPSQ.LIST_HEADER_ID    = QPQ.LIST_HEADER_ID
   AND   QPSQ.ACTIVE_FLAG = G_YES
   AND   ((QPLAT_Q.VALUE_FROM   = QPSQ.QUALIFIER_ATTR_VALUE --bug#1761272 Multiple NOT =
                AND QPSQ.COMPARISON_OPERATOR_CODE = '=')
           OR (QPLAT_Q.VALUE_FROM  <> QPSQ.QUALIFIER_ATTR_VALUE
                AND QPSQ.COMPARISON_OPERATOR_CODE = 'NOT =')
           OR
          QPSQ.COMPARISON_OPERATOR_CODE = G_OPERATOR_BETWEEN)
   AND   QPLAT_Q.LINE_INDEX  =   QPLINES.LINE_INDEX
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
         NVL(QPSQ.START_DATE_ACTIVE, QPLINES.PRICING_EFFECTIVE_DATE)
         AND NVL(QPSQ.END_DATE_ACTIVE,QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPLAT_PROD.LINE_INDEX = QPLAT_Q.LINE_INDEX
   AND   QPLAT_Q.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND   G_QUALIFY_SECONDARY = G_YES
   AND ((nvl(QPLAT_Q.DERIVED_QUALIFIER_FLAG,'N')='N')
          OR (QPLAT_Q.DERIVED_QUALIFIER_FLAG = 'Y' AND QPSQ.QUALIFY_HIER_DESCENDENTS_FLAG = 'Y')) -- Added for TCA
   ORDER BY 1,2;

/*
INDX,QP_PREQ_GRP.delete_invalid_pbh_children.l_check_deleted_pbh_cur,qp_npreq_ldets_tmp_N3,LINE_INDEX,1
INDX,QP_PREQ_GRP.delete_invalid_pbh_children.l_check_deleted_pbh_cur,qp_npreq_ldets_tmp_N3,PRICING_PHASE_ID,2
INDX,QP_PREQ_GRP.delete_invalid_pbh_children.l_check_deleted_pbh_cur,qp_npreq_ldets_tmp_N3,ASK_FOR_FLAG,3
INDX,QP_PREQ_GRP.delete_invalid_pbh_children.l_check_deleted_pbh_cur,qp_npreq_ldets_tmp_N3,CREATED_FROM_LIST_LINE_TYPE,4
*/
CURSOR l_chk_deleted_pbh_cur(p_line_index IN PLS_INTEGER,
					    p_pricing_phase_id NUMBER) IS
SELECT 'X'
FROM qp_npreq_ldets_tmp
WHERE created_from_list_line_type = G_PRICE_BREAK_TYPE
AND   line_index = p_line_index
AND   pricing_phase_id = p_pricing_phase_id
AND   pricing_status_code <> G_STATUS_NEW;

l_h_line_index_tbl NUMBER_TYPE;
l_h_list_line_id_tbl NUMBER_TYPE;
l_h_arithmetic_operator_tbl VARCHAR_30_TYPE;
l_h_operand_tbl NUMBER_TYPE;
l_h_pric_group_sequence_tbl NUMBER_TYPE;
l_h_list_line_type_code_tbl VARCHAR_30_TYPE;
l_h_pric_phase_id_tbl NUMBER_TYPE;
l_h_automatic_flag_tbl FLAG_TYPE;
l_h_incompat_grp_code_tbl VARCHAR_30_TYPE;
l_h_price_by_formula_id_tbl NUMBER_TYPE;
l_h_prod_precedence_tbl NUMBER_TYPE;
l_h_primary_uom_flag_tbl FLAG_TYPE;
l_h_modifier_level_code_tbl VARCHAR_30_TYPE;
l_h_list_line_no_tbl VARCHAR_30_TYPE;
l_h_prod_uom_code_tbl VARCHAR_30_TYPE;
l_h_excluder_flag_tbl FLAG_TYPE;
l_h_list_type_code_tbl VARCHAR_30_TYPE;
l_h_rounding_factor_tbl NUMBER_TYPE;
l_h_line_detail_index_tbl NUMBER_TYPE;
l_h_list_header_id_tbl NUMBER_TYPE;
l_h_prod_attr_context_tbl VARCHAR_30_TYPE;
l_h_prod_attr_tbl VARCHAR_30_TYPE;
l_h_prod_attr_val_from_tbl VARCHAR_TYPE;
l_h_prod_attr_level_tbl VARCHAR_30_TYPE;
l_h_prod_attr_type_tbl VARCHAR_30_TYPE;
l_h_applied_flag_tbl FLAG_TYPE;
l_h_prod_operator_type_tbl VARCHAR_30_TYPE;
l_h_pric_attr_context_tbl VARCHAR_30_TYPE;
l_h_pric_attr_tbl VARCHAR_30_TYPE;
l_h_pric_attr_value_from_tbl VARCHAR_TYPE;
l_h_pric_setup_value_from_tbl VARCHAR_TYPE;
l_h_pric_setup_value_to_tbl VARCHAR_TYPE;
l_h_pric_attr_level_tbl VARCHAR_30_TYPE;
l_h_pric_attr_type_tbl VARCHAR_30_TYPE;
l_h_pric_operator_type_tbl VARCHAR_30_TYPE;
l_h_pric_attr_datatype_tbl VARCHAR_30_TYPE;
l_h_qual_attr_context_tbl VARCHAR_30_TYPE;
l_h_qual_attr_tbl VARCHAR_30_TYPE;
l_h_qual_attr_value_from_tbl VARCHAR_TYPE;
l_h_qual_pric_attr_flag_tbl FLAG_TYPE;
l_h_qual_grouping_no_tbl NUMBER_TYPE;
l_h_qual_datatype_tbl VARCHAR_30_TYPE;
l_h_setup_value_from_tbl VARCHAR_TYPE;
l_h_setup_value_to_tbl VARCHAR_TYPE;
l_h_qual_operator_type_tbl VARCHAR_30_TYPE;
l_h_qual_precedence_tbl NUMBER_TYPE;
l_h_break_uom_code_tbl VARCHAR_30_TYPE; /* proration */
l_h_break_uom_context_tbl VARCHAR_30_TYPE; /* proration */
l_h_break_uom_attr_tbl VARCHAR_30_TYPE; /* proration */
l_h_qual_type_tbl VARCHAR_30_TYPE; -- 3863226
l_h_derived_qualifier_flag_tbl   FLAG_TYPE; -- Added for TCA

l_h_currency_detail_id_tbl NUMBER_TYPE;
l_h_currency_header_id_tbl NUMBER_TYPE;
l_h_sell_rounding_factor_tbl NUMBER_TYPE;
l_h_order_currency_tbl VARCHAR_30_TYPE;
l_h_pric_effective_date_tbl DATE_TYPE;
l_h_base_currency_code_tbl VARCHAR_30_TYPE;

l_loop_count          NUMBER := 0;
l_list_price          NUMBER;
l_percent_price       NUMBER;
l_list_line_type_code VARCHAR2(30);
v_list_header_id      NUMBER;
l_line_detail_index   NUMBER;
l_status_code         VARCHAR2(30);
l_status_text         VARCHAR2(240);
l_list_line_id        NUMBER;
l_dummy               VARCHAR2(1);
l_routine VARCHAR2(240):='QP_PREQ_GRP.SECONDARY_LIST_HEADER_SEARCH';
M PLS_INTEGER:=1;
D PLS_INTEGER:=1;
ls_line_index         NUMBER := -9999;
ls_list_line_id       NUMBER := -9999;

l_use_multi_currency VARCHAR2(1);

E_ROUTINE_ERRORS       EXCEPTION;
BEGIN
qp_debug_util.tstart('PERFORM_SECONDARY_SEARCH','Performing Secondary Price List Search');
-- G_QUALIFY_SECONDARY := NVL(FND_PROFILE.VALUE('QP_QUALIFY_SECONDARY_PRICE_LISTS'),'N');--profile option
 -- Update the price list id , validated flag , and primary_qualifiers_match flag for sec search
 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN  --4033618
    engine_debug ('QP_QUALIFY_SECONDARY_PRICE_LISTS:' || G_QUALIFY_SECONDARY);
 END IF;


 Update_Sec_Price_List_Info(l_status_code,l_status_text);
 IF (l_status_code = FND_API.G_RET_STS_ERROR) THEN
  RAISE E_ROUTINE_ERRORS;
 END IF;

  -- julin [3805113]: prepare global tables for INSERT_LDETS2
  G_LINE_DETAIL_INDEX_TBL.delete;
  G_LINE_DETAIL_TYPE_CODE_TBL.delete;
  G_LINE_INDEX_TBL.delete;
  G_LIST_HEADER_ID_TBL.delete;
  G_LIST_LINE_ID_TBL.delete;
  G_LIST_LINE_TYPE_TBL.delete;
  G_CREATED_FROM_SQL_TBL.delete;
  G_PRICING_GROUP_SEQUENCE_TBL.delete;
  G_OPERAND_CALCULATION_CODE_TBL.delete;
  G_OPERAND_VALUE_TBL.delete;
  G_PRICING_PHASE_ID_TBL.delete;
  G_LIST_TYPE_CODE_TBL.delete;
  G_PRICING_STATUS_CODE_TBL.delete;
  G_PROCESSED_FLAG_TBL.delete;
  G_AUTOMATIC_FLAG_TBL.delete;
  G_MODIFIER_LEVEL_CODE_TBL.delete;
  G_LIST_LINE_NO_TBL.delete;
  G_INCOMP_GRP_CODE_TBL.delete;
  G_PRICE_FORMULA_ID_TBL.delete;
  G_PRODUCT_PRECEDENCE_TBL.delete;
  G_PRIMARY_UOM_FLAG_TBL.delete;
  G_ROUNDING_FACTOR_TBL.delete;
  G_SECONDARY_PRICELIST_IND_TBL.delete;
  G_CURRENCY_DETAIL_ID_TBL.delete;
  G_CURRENCY_HEADER_ID_TBL.delete;
  G_SELLING_ROUNDING_TBL.delete;
  G_ORDER_CURRENCY_TBL.delete;
  G_PRICING_EFFECTIVE_DATE_TBL.delete;
  G_BASE_CURRENCY_CODE_TBL.delete;
  G_BREAK_UOM_TBL.delete;
  G_BREAK_CONTEXT_TBL.delete;
  G_BREAK_ATTRIBUTE_TBL.delete;

  -- julin [3805113]: prepare global tables for INSERT_PRICE_LIST_ATTRS
  G_LINE_INDEX_TBL_A.delete;
  G_LINE_DETAIL_INDEX_TBL_A.delete;
  G_ATTRIBUTE_LEVEL_tbl.delete;
  G_ATTRIBUTE_TYPE_tbl.delete;
  G_LIST_HEADER_ID_TBL_A.delete;
  G_LIST_LINE_ID_TBL_A.delete;
  G_CONTEXT_tbl.delete;
  G_ATTRIBUTE_tbl.delete;
  G_VALUE_FROM_tbl.delete;
  G_SETUP_VALUE_FROM_tbl.delete;
  G_SETUP_VALUE_TO_tbl.delete;
  G_GROUPING_NUMBER_tbl.delete;
  G_COMPARISON_OPERATOR_TYPE_tbl.delete;
  G_VALIDATED_FLAG_tbl.delete;
  G_APPLIED_FLAG_tbl.delete;
  G_PRICING_STATUS_CODE_TBL_Q.delete;
  G_PRICING_STATUS_TEXT_tbl.delete;
  G_QUALIFIER_PRECEDENCE_TBL.delete;
  G_DATATYPE_tbl.delete;
  G_PRICING_ATTR_FLAG_tbl.delete;
  G_QUALIFIER_TYPE_TBL.delete;
  G_PRODUCT_UOM_CODE_TBL.delete;
  G_EXCLUDER_FLAG_TBL.delete;
  G_PRICING_PHASE_ID_TBL_A.delete;
  G_INCOMP_GRP_CODE_TBL_A.delete;
  G_LINE_DETAIL_TYPE_CODE_TBL_A.delete;
  G_MODIFIER_LEVEL_CODE_TBL_A.delete;
  G_PRIMARY_UOM_FLAG_TBL_A.delete;

  -- julin [3805113]: bulk fetch
  IF G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN  /*vivek*/
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('cursor l_sec_list_cur_currency-multi-currency TRUE');
    END IF;
    l_use_multi_currency := 'Y';
    qp_debug_util.tstart('L_SEC_LIST_CUR_CURRENCY','CURSOR LOOP L_SEC_LIST_CUR_CURRENCY');
    OPEN l_sec_list_cur_currency;
  ELSE
    qp_debug_util.tstart('L_USE_MULTI_CURRENCY','CURSOR LOOP L_USE_MULTI_CURRENCY');
    l_use_multi_currency := 'N';
    OPEN l_sec_list_cur;
  END IF;
  qp_debug_util.tstart('L_SEC_LIST_CUR/CURRENCY_FETCH','CURSOR LOOP L_SEC_LIST_CUR/CURRENCY_FETCH');
  LOOP
    IF l_use_multi_currency = 'Y' THEN
      FETCH l_sec_list_cur_currency BULK COLLECT INTO
         l_h_line_index_tbl,
         l_h_list_line_id_tbl,
         l_h_arithmetic_operator_tbl,
         l_h_operand_tbl,
         l_h_pric_group_sequence_tbl,
         l_h_list_line_type_code_tbl,
         l_h_pric_phase_id_tbl,
         l_h_automatic_flag_tbl,
         l_h_incompat_grp_code_tbl,
         l_h_price_by_formula_id_tbl,
         l_h_prod_precedence_tbl,
         l_h_primary_uom_flag_tbl,
         l_h_modifier_level_code_tbl,
         l_h_list_line_no_tbl,
         l_h_prod_uom_code_tbl,
         l_h_excluder_flag_tbl,
         l_h_list_type_code_tbl,
         l_h_rounding_factor_tbl,
         l_h_line_detail_index_tbl,
         l_h_list_header_id_tbl,
         l_h_prod_attr_context_tbl,
         l_h_prod_attr_tbl,
         l_h_prod_attr_val_from_tbl,
         l_h_prod_attr_level_tbl,
         l_h_prod_attr_type_tbl,
         l_h_applied_flag_tbl,
         l_h_prod_operator_type_tbl,
         l_h_pric_attr_context_tbl,
         l_h_pric_attr_tbl,
         l_h_pric_attr_value_from_tbl,
         l_h_pric_setup_value_from_tbl,
         l_h_pric_setup_value_to_tbl,
         l_h_pric_attr_level_tbl,
         l_h_pric_attr_type_tbl,
         l_h_pric_operator_type_tbl,
         l_h_pric_attr_datatype_tbl,
         l_h_qual_attr_context_tbl,
         l_h_qual_attr_tbl,
         l_h_qual_attr_value_from_tbl,
         l_h_qual_pric_attr_flag_tbl,
         l_h_qual_grouping_no_tbl,
         l_h_qual_datatype_tbl,
         l_h_setup_value_from_tbl,
         l_h_setup_value_to_tbl,
         l_h_qual_operator_type_tbl,
         l_h_qual_precedence_tbl,
         l_h_currency_detail_id_tbl,
         l_h_currency_header_id_tbl,
         l_h_sell_rounding_factor_tbl,
         l_h_order_currency_tbl,
         l_h_pric_effective_date_tbl,
         l_h_base_currency_code_tbl,
         l_h_break_uom_code_tbl,
         l_h_break_uom_context_tbl,
         l_h_break_uom_attr_tbl,
         l_h_qual_type_tbl,
         l_h_derived_qualifier_flag_tbl    -- Added for TCA
         LIMIT G_BATCH_SIZE_1;
      EXIT WHEN l_h_line_index_tbl.COUNT = 0;

      FOR I in l_h_line_index_tbl.first .. l_h_line_index_tbl.last
      LOOP
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
          engine_debug('item found in secondary list');
        END IF;
        IF (ls_line_index <> l_h_line_index_tbl(I) OR ls_list_line_id <> l_h_list_line_id_tbl(I)) THEN
          l_line_detail_index := GET_LINE_DETAIL_INDEX;
          IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
            engine_debug('Inserting Secondary Price List Detail');
          END IF;
          G_LINE_DETAIL_INDEX_TBL(D)           := l_line_detail_index;
          G_LINE_DETAIL_TYPE_CODE_TBL(D)       := 'NULL';
          G_LINE_INDEX_TBL(D)                  := l_h_LINE_INDEX_tbl(I);
          G_LIST_HEADER_ID_TBL(D)              := l_h_LIST_HEADER_ID_tbl(I);
          G_LIST_LINE_ID_TBL(D)                := l_h_LIST_LINE_ID_tbl(I);
          G_LIST_LINE_TYPE_TBL(D)              := l_h_LIST_LINE_TYPE_CODE_tbl(I);
          G_CREATED_FROM_SQL_TBL(D)            := 'LHS_SECONDARY_PRICE_LIST'  ; -- nth sec price list
          G_PRICING_GROUP_SEQUENCE_TBL(D)      := l_h_pric_GROUP_SEQUENCE_tbl(I);
          G_OPERAND_CALCULATION_CODE_TBL(D)    := l_h_ARITHMETIC_OPERATOR_tbl(I);
          G_OPERAND_VALUE_TBL(D)               := l_h_OPERAND_tbl(I);
          G_PRICING_PHASE_ID_TBL(D)            := l_h_pric_PHASE_ID_tbl(I);
          G_LIST_TYPE_CODE_TBL(D)              := l_h_LIST_TYPE_CODE_tbl(I);
          G_PRICING_STATUS_CODE_TBL(D)         := G_STATUS_NEW;
          G_PROCESSED_FLAG_TBL(D)              := G_NOT_PROCESSED;
          G_AUTOMATIC_FLAG_TBL(D)              := l_h_AUTOMATIC_FLAG_tbl(I);
          G_MODIFIER_LEVEL_CODE_TBL(D)         := l_h_MODIFIER_LEVEL_CODE_tbl(I);
          G_LIST_LINE_NO_TBL(D)                := l_h_LIST_LINE_NO_tbl(I);
          G_INCOMP_GRP_CODE_TBL(D)             := l_h_INCOMPAT_GRP_CODE_tbl(I);
          G_PRICE_FORMULA_ID_TBL(D)            := l_h_PRICE_BY_FORMULA_ID_tbl(I);
          G_PRODUCT_PRECEDENCE_TBL(D)          := l_h_prod_PRECEDENCE_tbl(I);
          G_PRIMARY_UOM_FLAG_TBL(D)            := l_h_PRIMARY_UOM_FLAG_tbl(I);
          G_ROUNDING_FACTOR_TBL(D)             := l_h_ROUNDING_FACTOR_tbl(I);
          G_SECONDARY_PRICELIST_IND_TBL(D)     := G_YES;
          G_CURRENCY_DETAIL_ID_TBL(D)          := l_h_CURRENCY_DETAIL_ID_tbl(I); /*vivek */
          G_CURRENCY_HEADER_ID_TBL(D)          := l_h_CURRENCY_HEADER_ID_tbl(I); /*vivek */
          G_SELLING_ROUNDING_TBL(D)            := l_h_SELL_ROUNDING_FACTOR_tbl(I); /*vivek */
          G_ORDER_CURRENCY_TBL(D)              := l_h_ORDER_CURRENCY_tbl(I); /*vivek */
          G_PRICING_EFFECTIVE_DATE_TBL(D)      := l_h_pric_EFFECTIVE_DATE_tbl(I);/*vivek */
          G_BASE_CURRENCY_CODE_TBL(D)          := l_h_BASE_CURRENCY_CODE_tbl(I);/*vivek */
          G_BREAK_UOM_TBL(D)                   := l_h_BREAK_UOM_CODE_tbl(I); /* Proration */
          G_BREAK_CONTEXT_TBL(D)               := l_h_BREAK_UOM_CONTEXT_tbl(I); /* Proration */
          G_BREAK_ATTRIBUTE_TBL(D)             := l_h_BREAK_UOM_ATTR_tbl(I); /* Proration */
          D := D + 1;

          ls_line_index := l_h_line_index_tbl(I);
          ls_list_line_id := l_h_list_line_id_tbl(I);
        END IF;

        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
          engine_debug('----BEFORE INSERTING SECONDARY PRODUCT ATTRS -------');
          engine_debug('Qualifier Precedence : ' || l_h_qual_precedence_tbl(I));
        END IF;

        --INSERT PRODUCT ATTRIBUTES
        G_LINE_INDEX_TBL_A(M)              := l_h_LINE_INDEX_tbl(I);
        G_LINE_DETAIL_INDEX_TBL_A(M)       := L_LINE_DETAIL_INDEX;
        G_ATTRIBUTE_LEVEL_tbl(M)           := l_h_prod_ATTR_LEVEL_tbl(I);
        G_ATTRIBUTE_TYPE_tbl(M)            := l_h_prod_ATTR_TYPE_tbl(I);
        G_LIST_HEADER_ID_TBL_A(M)            := l_h_LIST_HEADER_ID_tbl(I);
        G_LIST_LINE_ID_TBL_A(M)              := l_h_LIST_LINE_ID_tbl(I);
        G_CONTEXT_tbl(M)                   := l_h_prod_ATTR_CONTEXT_tbl(I);
        G_ATTRIBUTE_tbl(M)                 := l_h_prod_ATTR_tbl(I);
        G_VALUE_FROM_tbl(M)                := l_h_prod_attr_val_from_tbl(I);
        G_SETUP_VALUE_FROM_tbl(M)          := NULL;
        G_SETUP_VALUE_TO_tbl(M)            := NULL;
        G_GROUPING_NUMBER_tbl(M)           := NULL;
        G_COMPARISON_OPERATOR_TYPE_tbl(M)  := l_h_prod_OPERATOR_TYPE_tbl(I);
        G_VALIDATED_FLAG_tbl(M)            := NULL;
        G_APPLIED_FLAG_tbl(M)              := l_h_APPLIED_FLAG_tbl(I);
        G_PRICING_STATUS_CODE_TBL_Q(M)     := G_STATUS_NEW;
        G_PRICING_STATUS_TEXT_tbl(M)       := 'INSERTED IN SECONDARY LIST HEADER SEARCH';
        G_QUALIFIER_PRECEDENCE_TBL(M)      := l_h_qual_PRECEDENCE_tbl(I);
        G_DATATYPE_tbl(M)                  := NULL;
        G_PRICING_ATTR_FLAG_tbl(M)         := NULL;
        G_QUALIFIER_TYPE_TBL(M)            := NULL;
        G_PRODUCT_UOM_CODE_TBL(M)          := l_h_prod_UOM_CODE_tbl(I);
        G_EXCLUDER_FLAG_TBL(M)             := l_h_EXCLUDER_FLAG_tbl(I);
        G_PRICING_PHASE_ID_TBL_A(M)        := l_h_pric_PHASE_ID_tbl(I);
        G_INCOMP_GRP_CODE_TBL_A(M)         := l_h_INCOMPAT_GRP_CODE_tbl(I);
        G_LINE_DETAIL_TYPE_CODE_TBL_A(M)   := 'NULL';
        G_MODIFIER_LEVEL_CODE_TBL_A(M)     := l_h_MODIFIER_LEVEL_CODE_tbl(I);
        G_PRIMARY_UOM_FLAG_TBL_A(M)        := l_h_PRIMARY_UOM_FLAG_tbl(I);
        M:= M+1;

        --INSERT PRICING ATTRIBUTES
        IF (l_h_pric_ATTR_CONTEXT_tbl(I) IS NOT NULL) THEN
          IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
            engine_debug('----BEFORE INSERTING SECONDARY PRICING ATTRS -------');
          END IF;
          G_LINE_INDEX_TBL_A(M)            := l_h_LINE_INDEX_tbl(I);
          G_LINE_DETAIL_INDEX_TBL_A(M)     := L_LINE_DETAIL_INDEX;
          G_ATTRIBUTE_LEVEL_tbl(M)         := l_h_pric_ATTR_LEVEL_tbl(I);
          G_ATTRIBUTE_TYPE_tbl(M)          := l_h_pric_ATTR_TYPE_tbl(I);
          G_LIST_HEADER_ID_TBL_A(M)          := l_h_LIST_HEADER_ID_tbl(I);
          G_LIST_LINE_ID_TBL_A(M)            := l_h_LIST_LINE_ID_tbl(I);
          G_CONTEXT_tbl(M)                 := l_h_pric_ATTR_CONTEXT_tbl(I);
          G_ATTRIBUTE_tbl(M)               := l_h_pric_ATTR_tbl(I);
          G_VALUE_FROM_tbl(M)              := l_h_pric_ATTR_VALUE_FROM_tbl(I);
          G_SETUP_VALUE_FROM_tbl(M)        := l_h_pric_SETUP_VALUE_FROM_tbl(I);
          G_SETUP_VALUE_TO_tbl(M)          := l_h_pric_SETUP_VALUE_TO_tbl(I);
          G_GROUPING_NUMBER_tbl(M)         := NULL;
          G_COMPARISON_OPERATOR_TYPE_tbl(M):= l_h_pric_OPERATOR_TYPE_tbl(I);
          G_VALIDATED_FLAG_tbl(M)          := NULL;
          G_APPLIED_FLAG_tbl(M)            := l_h_APPLIED_FLAG_tbl(I);
          G_PRICING_STATUS_CODE_TBL_Q(M)   := G_STATUS_NEW;
          G_PRICING_STATUS_TEXT_tbl(M)     := 'INSERTED IN SECONDARY LIST HEADER SEARCH';
          G_QUALIFIER_PRECEDENCE_tbl(M)    := NULL;
          G_DATATYPE_tbl(M)                := l_h_pric_ATTR_DATATYPE_tbl(I);
          G_PRICING_ATTR_FLAG_tbl(M)       := NULL;
          G_QUALIFIER_TYPE_TBL(M)          := NULL;
          G_PRODUCT_UOM_CODE_TBL(M)        := l_h_prod_UOM_CODE_tbl(I);
          G_EXCLUDER_FLAG_TBL(M)           := l_h_EXCLUDER_FLAG_tbl(I);
          G_PRICING_PHASE_ID_TBL_A(M)      := l_h_pric_PHASE_ID_tbl(I);
          G_INCOMP_GRP_CODE_TBL_A(M)       := l_h_INCOMPAT_GRP_CODE_tbl(I);
          G_LINE_DETAIL_TYPE_CODE_TBL_A(M) := 'NULL';
          G_MODIFIER_LEVEL_CODE_TBL_A(M)   := l_h_MODIFIER_LEVEL_CODE_tbl(I);
          G_PRIMARY_UOM_FLAG_TBL_A(M)      := l_h_PRIMARY_UOM_FLAG_tbl(I);
          M:= M+1;
        END IF;

        --INSERT QUALIFIER ATTRIBUTES
        IF (l_h_qual_ATTR_CONTEXT_tbl(I) IS NOT NULL) AND (G_QUALIFY_SECONDARY = G_YES) THEN
          G_LINE_INDEX_TBL_A(M)            := l_h_LINE_INDEX_tbl(I);
          G_LINE_DETAIL_INDEX_TBL_A(M)     := L_LINE_DETAIL_INDEX;
          G_ATTRIBUTE_LEVEL_tbl(M)         := NVL(l_h_prod_ATTR_LEVEL_tbl(I),'X');
          G_ATTRIBUTE_TYPE_tbl(M)          := G_QUALIFIER_TYPE;
          G_CONTEXT_tbl(M)                 := l_h_qual_ATTR_CONTEXT_tbl(I);
          G_ATTRIBUTE_tbl(M)               := l_h_qual_ATTR_tbl(I);
          G_VALUE_FROM_tbl(M)              := l_h_qual_ATTR_VALUE_FROM_tbl(I);
          G_COMPARISON_OPERATOR_TYPE_tbl(M):= l_h_qual_operator_type_tbl(I);
          G_APPLIED_FLAG_tbl(M)            := l_h_APPLIED_FLAG_tbl(I);
          G_PRICING_STATUS_CODE_TBL_Q(M)   := G_STATUS_NEW;
          G_LIST_HEADER_ID_tbl_A(M)          := l_h_LIST_HEADER_ID_tbl(I);
          G_LIST_LINE_ID_tbl_A(M)            := l_h_LIST_LINE_ID_tbl(I);
          G_SETUP_VALUE_FROM_tbl(M)        := l_h_SETUP_VALUE_FROM_tbl(I);
          G_SETUP_VALUE_TO_tbl(M)          := l_h_SETUP_VALUE_TO_tbl(I);
          G_GROUPING_NUMBER_tbl(M)         := l_h_qual_GROUPING_NO_tbl(I);
          G_PRICING_STATUS_TEXT_tbl(M)     := 'INSERTED IN L_SEC_LIST_CUR_CURRENCY';
          G_QUALIFIER_PRECEDENCE_tbl(M)    := l_h_qual_PRECEDENCE_tbl(I);
          G_DATATYPE_tbl(M)                := l_h_qual_DATATYPE_tbl(I);
          G_EXCLUDER_FLAG_TBL(M)           := l_h_EXCLUDER_FLAG_tbl(I);
          G_PRODUCT_UOM_CODE_TBL(M)        := l_h_prod_UOM_CODE_tbl(I);
          G_QUALIFIER_TYPE_TBL(M)          := l_h_qual_TYPE_tbl(I);
          G_VALIDATED_FLAG_tbl(M)          := G_NO;
          G_PRICING_ATTR_FLAG_tbl(M)       := G_NO;
          G_NO_QUALIFIERS_IN_GRP_tbl(M)    := NULL;
          G_VALUE_TO_tbl(M)                := NULL;
          G_PRICING_PHASE_ID_TBL_A(M)      := l_h_pric_PHASE_ID_tbl(I);
          G_INCOMP_GRP_CODE_TBL_A(M)       := l_h_INCOMPAT_GRP_CODE_tbl(I);
          G_LINE_DETAIL_TYPE_CODE_TBL_A(M) := 'NULL';
          G_MODIFIER_LEVEL_CODE_TBL_A(M)   := l_h_MODIFIER_LEVEL_CODE_tbl(I);
          G_PRIMARY_UOM_FLAG_TBL_A(M)      := l_h_PRIMARY_UOM_FLAG_tbl(I);
          M:= M+1;
        END IF;

        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
          engine_debug('AFTER END IF SECONDARY PRICE_LIST');
        END IF;
        l_loop_count := l_loop_count +1;
      END LOOP; -- K

    else -- vivek, multi currency not installed, not used

      -- julin [3805113]: bulk fetch
      FETCH l_sec_list_cur BULK COLLECT INTO
         l_h_line_index_tbl,
         l_h_list_line_id_tbl,
         l_h_arithmetic_operator_tbl,
         l_h_operand_tbl,
         l_h_pric_group_sequence_tbl,
         l_h_list_line_type_code_tbl,
         l_h_pric_phase_id_tbl,
         l_h_automatic_flag_tbl,
         l_h_incompat_grp_code_tbl,
         l_h_price_by_formula_id_tbl,
         l_h_prod_precedence_tbl,
         l_h_primary_uom_flag_tbl,
         l_h_modifier_level_code_tbl,
         l_h_list_line_no_tbl,
         l_h_prod_uom_code_tbl,
         l_h_excluder_flag_tbl,
         l_h_list_type_code_tbl,
         l_h_rounding_factor_tbl,
         l_h_line_detail_index_tbl,
         l_h_list_header_id_tbl,
         l_h_prod_attr_context_tbl,
         l_h_prod_attr_tbl,
         l_h_prod_attr_val_from_tbl,
         l_h_prod_attr_level_tbl,
         l_h_prod_attr_type_tbl,
         l_h_applied_flag_tbl,
         l_h_prod_operator_type_tbl,
         l_h_pric_attr_context_tbl,
         l_h_pric_attr_tbl,
         l_h_pric_attr_value_from_tbl,
         l_h_pric_setup_value_from_tbl,
         l_h_pric_setup_value_to_tbl,
         l_h_pric_attr_level_tbl,
         l_h_pric_attr_type_tbl,
         l_h_pric_operator_type_tbl,
         l_h_pric_attr_datatype_tbl,
         l_h_qual_attr_context_tbl,
         l_h_qual_attr_tbl,
         l_h_qual_attr_value_from_tbl,
         l_h_qual_pric_attr_flag_tbl,
         l_h_qual_grouping_no_tbl,
         l_h_qual_datatype_tbl,
         l_h_setup_value_from_tbl,
         l_h_setup_value_to_tbl,
         l_h_qual_operator_type_tbl,
         l_h_qual_precedence_tbl,
         l_h_break_uom_code_tbl,
         l_h_break_uom_context_tbl,
         l_h_break_uom_attr_tbl,
         l_h_qual_type_tbl,
         l_h_derived_qualifier_flag_tbl    -- Added for TCA
         LIMIT G_BATCH_SIZE_1;
      EXIT WHEN l_h_line_index_tbl.COUNT = 0;

      FOR I in l_h_line_index_tbl.first .. l_h_line_index_tbl.last
      LOOP
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
          engine_debug('item found in secondary list');
        END IF;

        IF (ls_line_index <> l_h_line_index_tbl(I) OR ls_list_line_id <> l_h_list_line_id_tbl(I)) THEN
          l_line_detail_index := GET_LINE_DETAIL_INDEX;
          IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
            engine_debug('Inserting Secondary Price List Detail');
          END IF;
          G_LINE_DETAIL_INDEX_TBL(D)           := l_line_detail_index;
          G_LINE_DETAIL_TYPE_CODE_TBL(D)       := 'NULL';
          G_LINE_INDEX_TBL(D)                  := l_h_LINE_INDEX_tbl(I);
          G_LIST_HEADER_ID_TBL(D)              := l_h_LIST_HEADER_ID_tbl(I);
          G_LIST_LINE_ID_TBL(D)                := l_h_LIST_LINE_ID_tbl(I);
          G_LIST_LINE_TYPE_TBL(D)              := l_h_LIST_LINE_TYPE_CODE_tbl(I);
          G_CREATED_FROM_SQL_TBL(D)            := 'LHS_SECONDARY_PRICE_LIST'  ; -- nth sec price list
          G_PRICING_GROUP_SEQUENCE_TBL(D)      := l_h_pric_GROUP_SEQUENCE_tbl(I);
          G_OPERAND_CALCULATION_CODE_TBL(D)    := l_h_ARITHMETIC_OPERATOR_tbl(I);
          G_OPERAND_VALUE_TBL(D)               := l_h_OPERAND_tbl(I);
          G_PRICING_PHASE_ID_TBL(D)            := l_h_pric_PHASE_ID_tbl(I);
          G_LIST_TYPE_CODE_TBL(D)              := l_h_LIST_TYPE_CODE_tbl(I);
          G_PRICING_STATUS_CODE_TBL(D)         := G_STATUS_NEW;
          G_PROCESSED_FLAG_TBL(D)              := G_NOT_PROCESSED;
          G_AUTOMATIC_FLAG_TBL(D)              := l_h_AUTOMATIC_FLAG_tbl(I);
          G_MODIFIER_LEVEL_CODE_TBL(D)         := l_h_MODIFIER_LEVEL_CODE_tbl(I);
          G_LIST_LINE_NO_TBL(D)                := l_h_LIST_LINE_NO_tbl(I);
          G_INCOMP_GRP_CODE_TBL(D)             := l_h_INCOMPAT_GRP_CODE_tbl(I);
          G_PRICE_FORMULA_ID_TBL(D)            := l_h_PRICE_BY_FORMULA_ID_tbl(I);
          G_PRODUCT_PRECEDENCE_TBL(D)          := l_h_prod_PRECEDENCE_tbl(I);
          G_PRIMARY_UOM_FLAG_TBL(D)            := l_h_PRIMARY_UOM_FLAG_tbl(I);
          G_ROUNDING_FACTOR_TBL(D)             := l_h_ROUNDING_FACTOR_tbl(I);
          G_SECONDARY_PRICELIST_IND_TBL(D)     := G_YES;
          G_CURRENCY_DETAIL_ID_TBL(D)          := null;
          G_CURRENCY_HEADER_ID_TBL(D)          := null;
          G_SELLING_ROUNDING_TBL(D)            := null;
          G_ORDER_CURRENCY_TBL(D)              := null;
          G_PRICING_EFFECTIVE_DATE_TBL(D)      := null;
          G_BASE_CURRENCY_CODE_TBL(D)          := null;
          G_BREAK_UOM_TBL(D)                   := l_h_BREAK_UOM_CODE_tbl(I); /* Proration */
          G_BREAK_CONTEXT_TBL(D)               := l_h_BREAK_UOM_CONTEXT_tbl(I); /* Proration */
          G_BREAK_ATTRIBUTE_TBL(D)             := l_h_BREAK_UOM_ATTR_tbl(I); /* Proration */
          D := D + 1;

          ls_line_index := l_h_line_index_tbl(I);
          ls_list_line_id := l_h_list_line_id_tbl(I);
        END IF;


        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
          engine_debug('----BEFORE INSERTING SECONDARY PRODUCT ATTRS -------');
          engine_debug('Qualifier Precedence : ' || l_h_qual_precedence_tbl(I));
        END IF;

        --INSERT PRODUCT ATTRIBUTES
        G_LINE_INDEX_TBL_A(M)              := l_h_LINE_INDEX_tbl(I);
        G_LINE_DETAIL_INDEX_TBL_A(M)       := L_LINE_DETAIL_INDEX;
        G_ATTRIBUTE_LEVEL_tbl(M)           := l_h_prod_ATTR_LEVEL_tbl(I);
        G_ATTRIBUTE_TYPE_tbl(M)            := l_h_prod_ATTR_TYPE_tbl(I);
        G_LIST_HEADER_ID_TBL_A(M)            := l_h_LIST_HEADER_ID_tbl(I);
        G_LIST_LINE_ID_TBL_A(M)              := l_h_LIST_LINE_ID_tbl(I);
        G_CONTEXT_tbl(M)                   := l_h_prod_ATTR_CONTEXT_tbl(I);
        G_ATTRIBUTE_tbl(M)                 := l_h_prod_ATTR_tbl(I);
        G_VALUE_FROM_tbl(M)                := l_h_prod_attr_val_from_tbl(I);
        G_SETUP_VALUE_FROM_tbl(M)          := NULL;
        G_SETUP_VALUE_TO_tbl(M)            := NULL;
        G_GROUPING_NUMBER_tbl(M)           := NULL;
        G_COMPARISON_OPERATOR_TYPE_tbl(M)  := l_h_prod_OPERATOR_TYPE_tbl(I);
        G_VALIDATED_FLAG_tbl(M)            := NULL;
        G_APPLIED_FLAG_tbl(M)              := l_h_APPLIED_FLAG_tbl(I);
        G_PRICING_STATUS_CODE_TBL_Q(M)     := G_STATUS_NEW;
        G_PRICING_STATUS_TEXT_tbl(M)       := 'INSERTED IN SECONDARY LIST HEADER SEARCH';
        G_QUALIFIER_PRECEDENCE_TBL(M)      := l_h_qual_PRECEDENCE_tbl(I);
        G_DATATYPE_tbl(M)                  := NULL;
        G_PRICING_ATTR_FLAG_tbl(M)         := NULL;
        G_QUALIFIER_TYPE_TBL(M)            := NULL;
        G_PRODUCT_UOM_CODE_TBL(M)          := l_h_prod_UOM_CODE_tbl(I);
        G_EXCLUDER_FLAG_TBL(M)             := l_h_EXCLUDER_FLAG_tbl(I);
        G_PRICING_PHASE_ID_TBL_A(M)        := l_h_pric_PHASE_ID_tbl(I);
        G_INCOMP_GRP_CODE_TBL_A(M)         := l_h_INCOMPAT_GRP_CODE_tbl(I);
        G_LINE_DETAIL_TYPE_CODE_TBL_A(M)   := 'NULL';
        G_MODIFIER_LEVEL_CODE_TBL_A(M)     := l_h_MODIFIER_LEVEL_CODE_tbl(I);
        G_PRIMARY_UOM_FLAG_TBL_A(M)        := l_h_PRIMARY_UOM_FLAG_tbl(I);
        M:= M+1;

        --INSERT PRICING ATTRIBUTES
        IF (l_h_pric_ATTR_CONTEXT_tbl(I) IS NOT NULL) THEN
          IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
            engine_debug('----BEFORE INSERTING SECONDARY PRICING ATTRS -------');
          END IF;
          G_LINE_INDEX_TBL_A(M)              := l_h_LINE_INDEX_tbl(I);
          G_LINE_DETAIL_INDEX_TBL_A(M)       := L_LINE_DETAIL_INDEX;
          G_ATTRIBUTE_LEVEL_tbl(M)           := l_h_pric_ATTR_LEVEL_tbl(I);
          G_ATTRIBUTE_TYPE_tbl(M)            := l_h_pric_ATTR_TYPE_tbl(I);
          G_LIST_HEADER_ID_TBL_A(M)            := l_h_LIST_HEADER_ID_tbl(I);
          G_LIST_LINE_ID_TBL_A(M)              := l_h_LIST_LINE_ID_tbl(I);
          G_CONTEXT_tbl(M)                   := l_h_pric_ATTR_CONTEXT_tbl(I);
          G_ATTRIBUTE_tbl(M)                 := l_h_pric_ATTR_tbl(I);
          G_VALUE_FROM_tbl(M)                := l_h_pric_ATTR_VALUE_FROM_tbl(I);
          G_SETUP_VALUE_FROM_tbl(M)          := l_h_pric_SETUP_VALUE_FROM_tbl(I);
          G_SETUP_VALUE_TO_tbl(M)            := l_h_pric_SETUP_VALUE_TO_tbl(I);
          G_COMPARISON_OPERATOR_TYPE_tbl(M)  := l_h_pric_OPERATOR_TYPE_tbl(I);
          G_VALIDATED_FLAG_tbl(M)            := NULL;
          G_APPLIED_FLAG_tbl(M)              := l_h_APPLIED_FLAG_tbl(I);
          G_PRICING_STATUS_CODE_TBL_Q(M)     := G_STATUS_NEW;
          G_PRICING_STATUS_TEXT_tbl(M)       := 'INSERTED IN SECONDARY LIST HEADER SEARCH';
          G_QUALIFIER_PRECEDENCE_tbl(M)      := NULL;
          G_DATATYPE_tbl(M)                  := l_h_pric_ATTR_DATATYPE_tbl(I);
          G_PRICING_ATTR_FLAG_tbl(M)         := NULL;
          G_QUALIFIER_TYPE_TBL(M)            := NULL;
          G_PRODUCT_UOM_CODE_TBL(M)          := l_h_prod_UOM_CODE_tbl(I);
          G_EXCLUDER_FLAG_TBL(M)             := l_h_EXCLUDER_FLAG_tbl(I);
          G_GROUPING_NUMBER_tbl(M)           := NULL;
          G_PRICING_PHASE_ID_TBL_A(M)        := l_h_pric_PHASE_ID_tbl(I);
          G_INCOMP_GRP_CODE_TBL_A(M)         := l_h_INCOMPAT_GRP_CODE_tbl(I);
          G_LINE_DETAIL_TYPE_CODE_TBL_A(M)   := 'NULL';
          G_MODIFIER_LEVEL_CODE_TBL_A(M)     := l_h_MODIFIER_LEVEL_CODE_tbl(I);
          G_PRIMARY_UOM_FLAG_TBL_A(M)        := l_h_PRIMARY_UOM_FLAG_tbl(I);
          M:= M+1;
        END IF;

        --INSERT QUALIFIER ATTRIBUTES
        IF (l_h_qual_ATTR_CONTEXT_tbl(I) IS NOT NULL) AND (G_QUALIFY_SECONDARY = G_YES) THEN
          G_LINE_INDEX_TBL_A(M)            := l_h_LINE_INDEX_tbl(I);
          G_LINE_DETAIL_INDEX_TBL_A(M)     := L_LINE_DETAIL_INDEX;
          G_ATTRIBUTE_LEVEL_tbl(M)         := NVL(l_h_prod_ATTR_LEVEL_tbl(I),'X');
          G_ATTRIBUTE_TYPE_tbl(M)          := G_QUALIFIER_TYPE;
          G_CONTEXT_tbl(M)                 := l_h_qual_ATTR_CONTEXT_tbl(I);
          G_ATTRIBUTE_tbl(M)               := l_h_qual_ATTR_tbl(I);
          G_VALUE_FROM_tbl(M)              := l_h_qual_ATTR_VALUE_FROM_tbl(I);
          G_COMPARISON_OPERATOR_TYPE_tbl(M):= l_h_qual_operator_type_tbl(I);
          G_APPLIED_FLAG_tbl(M)            := l_h_APPLIED_FLAG_tbl(I);
          G_PRICING_STATUS_CODE_TBL_Q(M)   := G_STATUS_NEW;
          G_LIST_HEADER_ID_tbl_A(M)          := l_h_LIST_HEADER_ID_tbl(I);
          G_LIST_LINE_ID_tbl_A(M)            := l_h_LIST_LINE_ID_tbl(I);
          G_SETUP_VALUE_FROM_tbl(M)        := l_h_SETUP_VALUE_FROM_tbl(I);
          G_SETUP_VALUE_TO_tbl(M)          := l_h_SETUP_VALUE_TO_tbl(I);
          G_GROUPING_NUMBER_tbl(M)         := l_h_qual_GROUPING_NO_tbl(I);
          G_PRICING_STATUS_TEXT_tbl(M)     := 'INSERTED IN L_SEC_LIST_CUR';
          G_QUALIFIER_PRECEDENCE_tbl(M)    := l_h_qual_PRECEDENCE_tbl(I);
          G_DATATYPE_tbl(M)                := l_h_qual_DATATYPE_tbl(I);
          G_EXCLUDER_FLAG_TBL(M)           := l_h_EXCLUDER_FLAG_tbl(I);
          G_PRODUCT_UOM_CODE_TBL(M)        := l_h_prod_UOM_CODE_tbl(I);
          G_QUALIFIER_TYPE_TBL(M)          := l_h_qual_TYPE_tbl(I);
          G_VALIDATED_FLAG_tbl(M)          := G_NO;
          G_PRICING_ATTR_FLAG_tbl(M)       := G_NO;
          G_NO_QUALIFIERS_IN_GRP_tbl(M)    := NULL;
          G_VALUE_TO_tbl(M)                := NULL;
          G_PRICING_PHASE_ID_TBL_A(M)      := l_h_pric_PHASE_ID_tbl(I);
          G_INCOMP_GRP_CODE_TBL_A(M)       := l_h_INCOMPAT_GRP_CODE_tbl(I);
          G_LINE_DETAIL_TYPE_CODE_TBL_A(M) := 'NULL';
          G_MODIFIER_LEVEL_CODE_TBL_A(M)   := l_h_MODIFIER_LEVEL_CODE_tbl(I);
          G_PRIMARY_UOM_FLAG_TBL_A(M)      := l_h_PRIMARY_UOM_FLAG_tbl(I);
          M:= M+1;
        END IF;

        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
          engine_debug('AFTER END IF SECONDARY PRICE_LIST');
        END IF;
        l_loop_count := l_loop_count +1;
      END LOOP; -- K

    end if; -- vivek, multi currency installed

    -- julin [3805113]: bulk insert into qp_npreq_ldets_tmp
    IF (D>1) THEN
    qp_debug_util.tstart('QP_NPREQ_LDETS_TMP','Inserting into ldets QP_NPREQ_LDETS_TMP');
      FORALL i in G_line_index_tbl.FIRST..G_line_index_tbl.LAST
        INSERT INTO qp_npreq_ldets_tmp
                (LINE_DETAIL_INDEX,
                 LINE_DETAIL_TYPE_CODE,
                 LINE_INDEX,
                 CREATED_FROM_LIST_HEADER_ID,
                 CREATED_FROM_LIST_LINE_ID,
                 CREATED_FROM_LIST_LINE_TYPE,
                 CREATED_FROM_SQL,
                 PRICING_GROUP_SEQUENCE,
                 OPERAND_CALCULATION_CODE,
                 OPERAND_VALUE,
                 PRICING_PHASE_ID,
                 CREATED_FROM_LIST_TYPE_CODE,
                 PRICING_STATUS_CODE,
                 PROCESSED_FLAG,
                 AUTOMATIC_FLAG,
                 MODIFIER_LEVEL_CODE,
                 LIST_LINE_NO,
                 INCOMPATABILITY_GRP_CODE,
                 PRICE_FORMULA_ID,
                 PRODUCT_PRECEDENCE,
                 PRIMARY_UOM_FLAG,
                 ROUNDING_FACTOR,
                 SECONDARY_PRICELIST_IND,
                 CURRENCY_DETAIL_ID,
                 CURRENCY_HEADER_ID,
                 SELLING_ROUNDING_FACTOR,
                 ORDER_CURRENCY,
                 PRICING_EFFECTIVE_DATE,
                 BASE_CURRENCY_CODE,
                 BREAK_UOM_CODE,
                 BREAK_UOM_CONTEXT,
                 BREAK_UOM_ATTRIBUTE
                 )
        VALUES (   G_line_detail_index_tbl(i),
                 G_LINE_DETAIL_TYPE_CODE_TBL(I),
                 G_LINE_INDEX_tbl(i),
                 G_LIST_HEADER_ID_tbl(i),
                 G_LIST_LINE_ID_tbl(i),
                 G_LIST_LINE_TYPE_tbl(i),
                 G_CREATED_FROM_SQL_TBL(I), -- nth sec price list
                 G_PRICING_GROUP_SEQUENCE_tbl(i),
                 G_OPERAND_CALCULATION_CODE_tbl(i),
                 G_OPERAND_VALUE_tbl(i),
                 G_PRICING_PHASE_ID_tbl(i),
                 G_LIST_TYPE_CODE_tbl(i),
                 G_PRICING_STATUS_CODE_TBL(I),
                 G_NOT_PROCESSED,
                 G_AUTOMATIC_FLAG_tbl(i),
                 G_MODIFIER_LEVEL_CODE_tbl(i),
                 G_LIST_LINE_NO_tbl(i),
                 G_INCOMP_GRP_CODE_tbl(i),
                 G_PRICE_FORMULA_ID_tbl(i),
                 G_PRODUCT_PRECEDENCE_tbl(i),
                 G_PRIMARY_UOM_FLAG_tbl(i),
                 G_ROUNDING_FACTOR_tbl(i),
                 G_SECONDARY_PRICELIST_IND_TBL(I),
                 G_CURRENCY_DETAIL_ID_tbl(i),
                 G_CURRENCY_HEADER_ID_tbl(i),
                 G_SELLING_ROUNDING_tbl(i),
                 G_ORDER_CURRENCY_tbl(i),
                 G_PRICING_EFFECTIVE_DATE_tbl(i),
                 G_BASE_CURRENCY_CODE_tbl(i),
                 G_BREAK_UOM_tbl(i), /* Proration */
                 G_BREAK_CONTEXT_tbl(i), /* Proration */
                 G_BREAK_ATTRIBUTE_tbl(i) /* Proration */
        );
qp_debug_util.tstop('QP_NPREQ_LDETS_TMP');
    END IF;

    IF (M>1) THEN
    qp_debug_util.tstart('INSERT_PRICE_LIST_ATTRS','Inserting into lin attrs INSERT_PRICE_LIST_ATTRS');
      INSERT_PRICE_LIST_ATTRS
   (    p_LINE_INDEX_tbl                =>G_LINE_INDEX_TBL_A,
        p_LINE_DETAIL_INDEX_tbl         =>G_LINE_DETAIL_INDEX_TBL_A,
        p_ATTRIBUTE_LEVEL_tbl           =>G_ATTRIBUTE_LEVEL_tbl,
        p_ATTRIBUTE_TYPE_tbl            =>G_ATTRIBUTE_TYPE_tbl,
        p_LIST_HEADER_ID_tbl            =>G_LIST_HEADER_ID_tbl_A,
        p_LIST_LINE_ID_tbl              =>G_LIST_LINE_ID_tbl_A,
        p_CONTEXT_tbl                   =>G_CONTEXT_tbl,
        p_ATTRIBUTE_tbl                 =>G_ATTRIBUTE_tbl,
        p_VALUE_FROM_tbl                =>G_VALUE_FROM_tbl,
        p_SETUP_VALUE_FROM_tbl          =>G_SETUP_VALUE_FROM_tbl,
        p_SETUP_VALUE_TO_tbl            =>G_SETUP_VALUE_TO_tbl,
        p_GROUPING_NUMBER_tbl           =>G_GROUPING_NUMBER_tbl,
        p_COMPARISON_OPERATOR_TYPE_tbl  =>G_COMPARISON_OPERATOR_TYPE_tbl,
        p_VALIDATED_FLAG_tbl            =>G_VALIDATED_FLAG_tbl,
        p_APPLIED_FLAG_tbl              =>G_APPLIED_FLAG_tbl,
        p_PRICING_STATUS_CODE_tbl       =>G_PRICING_STATUS_CODE_TBL_Q,
        p_PRICING_STATUS_TEXT_tbl       =>G_PRICING_STATUS_TEXT_tbl,
        p_QUALIFIER_PRECEDENCE_tbl      =>G_QUALIFIER_PRECEDENCE_tbl,
        p_DATATYPE_tbl                  =>G_DATATYPE_tbl,
        p_PRICING_ATTR_FLAG_tbl         =>G_PRICING_ATTR_FLAG_tbl,
        p_QUALIFIER_TYPE_tbl            =>G_QUALIFIER_TYPE_TBL,
        p_PRODUCT_UOM_CODE_TBL          =>G_PRODUCT_UOM_CODE_TBL,
        p_EXCLUDER_FLAG_TBL             =>G_EXCLUDER_FLAG_TBL,
        p_PRICING_PHASE_ID_TBL          =>G_PRICING_PHASE_ID_TBL_A,
        p_INCOMPATABILITY_GRP_CODE_TBL  =>G_INCOMP_GRP_CODE_TBL_A,
        p_LINE_DETAIL_TYPE_CODE_TBL     =>G_LINE_DETAIL_TYPE_CODE_TBL_A,
        p_MODIFIER_LEVEL_CODE_TBL       =>G_MODIFIER_LEVEL_CODE_TBL_A,
        p_PRIMARY_UOM_FLAG_TBL          =>G_PRIMARY_UOM_FLAG_TBL_A,
        x_status_code                   =>l_status_code,
        x_status_text                   =>l_status_text);
qp_debug_util.tstop('INSERT_PRICE_LIST_ATTRS');
    END IF;

  END LOOP;
   qp_debug_util.tstop('L_SEC_LIST_CUR/CURRENCY_FETCH');
  IF l_use_multi_currency = 'Y' THEN
  qp_debug_util.tstop('L_SEC_LIST_CUR_CURRENCY');
    CLOSE l_sec_list_cur_currency;
  ELSE
qp_debug_util.tstop('L_USE_MULTI_CURRENCY');
    CLOSE l_sec_list_cur;
  END IF;

IF (l_loop_count <> 0) THEN

      --Evaluating between operator for both qualifiers and pricing attributes
      Evaluate_Between(G_PRICE_LIST_PHASE_ID,NULL,NULL,l_status_code,l_status_text);

      IF(l_status_code = FND_API.G_RET_STS_ERROR) THEN
       RAISE E_ROUTINE_ERRORS;
      END IF;

      -- Check for multiple item categories and customer classes
      Eliminate_Multiple_Hierarchies(G_PRICE_LIST_PHASE_ID,l_status_code,l_status_text);

      IF(l_status_code = FND_API.G_RET_STS_ERROR) THEN
       RAISE E_ROUTINE_ERRORS;
      END IF;

      --Handle_Excluder(G_PRICE_LIST_PHASE_ID,NULL,l_status_code,l_status_text);

      Perform_Grouping(G_PRICE_LIST_PHASE_ID, NULL, l_status_code, l_status_text);

      IF(l_status_code = FND_API.G_RET_STS_ERROR) THEN
       RAISE E_ROUTINE_ERRORS;
      END IF;

     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('Secondary Price List Grouping Return Status : ' || l_status_code);


     END IF;
     QP_Resolve_Incompatability_PVT.Determine_Pricing_UOM_And_Qty
				(p_line_index        => NULL,
 				 p_order_uom_code    => NULL,
				 p_order_qty         => NULL,
				 p_pricing_phase_id  => G_PRICE_LIST_PHASE_ID, -- pricing_phase_id,
                                 p_call_big_search   => FALSE,
				 x_list_line_id	     => l_list_line_id,
				 x_return_status     => l_status_code,
				 x_return_status_txt => l_status_text);

      IF(l_status_code = FND_API.G_RET_STS_ERROR) THEN
       RAISE E_ROUTINE_ERRORS;
      END IF;

     -- 3773652
     -- re-run Evaluate_Between after UOM conversion to check PLL really qualifies
     begin
       select 'x' into l_dummy
       from qp_npreq_lines_tmp
       where LINE_UOM_CODE <> nvl(PRICED_UOM_CODE, LINE_UOM_CODE)
       and (PRICE_FLAG = G_YES
            or
       PRICE_FLAG = G_PHASE and p_freeze_override_flag = G_YES)
       and rownum = 1;

       Evaluate_Between(G_PRICE_LIST_PHASE_ID,NULL,NULL,l_status_code,l_status_text);
     exception
       when no_data_found then
         null;
     end;

     -- Update the request line status for lines which got valid price list
     Update_Request_Line_Status(p_control_rec,'SUCCESS',p_freeze_override_flag,l_status_code,l_status_text);  --[julin/4708044]

     IF(l_status_code = FND_API.G_RET_STS_ERROR) THEN
      RAISE E_ROUTINE_ERRORS;
     END IF;

     --bug# 2091386 not reflecting the right price on change on UOM on the order line . Since
     --QP_Resolve_Incompatability_PVT.Determine_Pricing_UOM_And_Qty determines the pricing_qty
     --which is needed later in Get_Eligible_Price_Break we need to call Get_Eligible_Price_Break
     --after QP_Resolve_Incompatability_PVT.Determine_Pricing_UOM_And_Qty.
     --By doing this we will get the right price in the PRICE event on change of UOM on the order line
     --for price based on price break
     Get_Eligible_Price_Break(G_PRICE_LIST_PHASE_ID,NULL,l_status_code,l_status_text);

     IF(l_status_code = FND_API.G_RET_STS_ERROR) THEN
      RAISE E_ROUTINE_ERRORS;
     END IF;


      --delete children lines of PBH if the parent PBH line get eliminated in
      --QP_Resolve_Incompatability_PVT

      /* OPEN l_chk_deleted_pbh_cur(l_line_index,G_PRICE_LIST_PHASE_ID);
      FETCH l_chk_deleted_pbh_cur INTO l_dummy;
      IF l_chk_deleted_pbh_cur%FOUND THEN
       Delete_Invalid_PBH_Children(l_line_index,G_PRICE_LIST_PHASE_ID);
      END IF;
      CLOSE l_chk_deleted_pbh_cur; */
ELSE
   -- Update the request line status for lines which got valid price list
   Update_Request_Line_Status(p_control_rec,'FAILURE',p_freeze_override_flag,l_status_code,l_status_text);  --[juiln/4708044]
   IF(l_status_code = FND_API.G_RET_STS_ERROR) THEN
    RAISE E_ROUTINE_ERRORS;
   END IF;
END IF; --l_loop_count <> 0

qp_debug_util.tstop('PERFORM_SECONDARY_SEARCH');

EXCEPTION
 WHEN E_ROUTINE_ERRORS THEN
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug(l_routine||': '||l_status_text);
     END IF;
     x_status_code := FND_API.G_RET_STS_ERROR;
     x_status_text := l_routine||': '||l_status_text;
 WHEN OTHERS THEN
     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug(SQLERRM);
     END IF;
     x_status_code := FND_API.G_RET_STS_ERROR;
     x_status_text := l_routine||' '||SQLERRM;

END Perform_Secondary_Search;

/*+-----------------------------------------------------------
  | PROCEDURE LIST_HEADER_SEARCH
  | SEARCH lines for the phase that has search_flag='N'
  | The list headers were passed in as qualifiers. Only for the lines that have
  | MODLIST and list_lines as their context only will be included
  | These lines were not selected by the big union
  | select statement at all. Instead, they were populated by populate_temp_table
  | This routine has not hadled the case where a price break
  | list is passed in as qualifier...
  +-------------------------------------------------------------
*/

PROCEDURE LIST_HEADER_SEARCH (
		       p_pricing_phase_id     IN NUMBER,
                       p_is_price_list        IN BOOLEAN,
                       p_freeze_override_flag IN VARCHAR2,
                       p_control_rec          IN CONTROL_RECORD_TYPE,
                       p_list_mode            IN VARCHAR2,   --Modifier or Price list Mode
                       x_further_search       OUT NOCOPY VARCHAR2,
                       x_status_code          OUT NOCOPY VARCHAR2,
                       x_status_text          OUT NOCOPY VARCHAR2)
AS
/*
INDX,QP_PREQ_GRP.list_header_search.l_list_cur,qp_npreq_lines_tmp_N3,VALIDATED_FLAG,1
INDX,QP_PREQ_GRP.list_header_search.l_list_cur,qp_npreq_lines_tmp_N3,QUALIFIERS_EXIST_FLAG,2
INDX,QP_PREQ_GRP.list_header_search.l_list_cur,qp_npreq_lines_tmp_N3,PRICING_ATTRS_EXIST_FLAG,3

INDX,QP_PREQ_GRP.list_header_search.l_list_cur,qp_npreq_line_attrs_tmp_N1,LINE_INDEX,1
INDX,QP_PREQ_GRP.list_header_search.l_list_cur,qp_npreq_line_attrs_tmp_N1,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.list_header_search.l_list_cur,qp_npreq_line_attrs_tmp_N1,PRICING_STATUS_CODE,3

INDX,QP_PREQ_GRP.list_header_search.l_list_cur,QP_PRICING_ATTRIBUTES_N5,PRICING_PHASE_ID,1
INDX,QP_PREQ_GRP.list_header_search.l_list_cur,QP_PRICING_ATTRIBUTES_N5,QUALIFICATION_IND,2
INDX,QP_PREQ_GRP.list_header_search.l_list_cur,QP_PRICING_ATTRIBUTES_N5,PRODUCT_ATTRIBUTE_CONTEXT,3
INDX,QP_PREQ_GRP.list_header_search.l_list_cur,QP_PRICING_ATTRIBUTES_N5,PRODUCT_ATTRIBUTE,4
INDX,QP_PREQ_GRP.list_header_search.l_list_cur,QP_PRICING_ATTRIBUTES_N5,PRODUCT_ATTR_VALUE,5
INDX,QP_PREQ_GRP.list_header_search.l_list_cur,QP_PRICING_ATTRIBUTES_N5,EXCLUDER_FLAG,6
INDX,QP_PREQ_GRP.list_header_search.l_list_cur,QP_PRICING_ATTRIBUTES_N5,LIST_HEADER_ID,7
INDX,QP_PREQ_GRP.list_header_search.l_list_cur,QP_PRICING_ATTRIBUTES_N5,LIST_LINE_ID,8

INDX,QP_PREQ_GRP.list_header_search.l_list_cur,QP_LIST_LINES_PK,LIST_LINE_ID,1

INDX,QP_PREQ_GRP.list_header_search.l_list_cur,QP_LIST_HEADERS_B_PK,LIST_HEADER_ID,1

INDX,QP_PREQ_GRP.list_header_search.l_list_cur,QP_PRICE_REQ_SOURCES_PK,REQUEST_TYPE_CODE,1
INDX,QP_PREQ_GRP.list_header_search.l_list_cur,QP_PRICE_REQ_SOURCES_PK,SOURCE_SYSTEM_CODE,2
*/
CURSOR L_LIST_CUR  IS
SELECT /*+ ORDERED USE_NL(QPLAT_PROD QPA QPL QPH) index(QPA QP_PRICING_ATTRIBUTES_N5) dynamic_sampling(1) l_list_cur */
                   QPLAT_PROD.LINE_INDEX,
                   QPL.LIST_LINE_ID,
                   QPL.ARITHMETIC_OPERATOR,
                   QPL.OPERAND,
                   QPL.PRICING_GROUP_SEQUENCE,
                   QPL.LIST_LINE_TYPE_CODE,
                   QPL.PRICING_PHASE_ID,
                   QPL.AUTOMATIC_FLAG,
                   QPL.INCOMPATIBILITY_GRP_CODE,
                   QPL.PRICE_BY_FORMULA_ID,
                   QPL.PRODUCT_PRECEDENCE,
                   QPL.PRIMARY_UOM_FLAG,
                   QPL.MODIFIER_LEVEL_CODE,
                   QPL.LIST_LINE_NO,
                   QPA.PRODUCT_UOM_CODE,
                   QPA.EXCLUDER_FLAG,
                   QPH.LIST_TYPE_CODE,
                   QPH.ROUNDING_FACTOR,
                   QPH.LIST_HEADER_ID           LIST_HEADER_ID,
                   QPLAT_PROD.CONTEXT         PRODUCT_ATTRIBUTE_CONTEXT,
                   QPLAT_PROD.ATTRIBUTE       PRODUCT_ATTRIBUTE,
                   QPLAT_PROD.VALUE_FROM      PRODUCT_ATTR_VALUE_FROM,
                   QPLAT_PROD.ATTRIBUTE_LEVEL PRODUCT_ATTRIBUTE_LEVEL,
                   QPLAT_PROD.ATTRIBUTE_TYPE  PRODUCT_ATTRIBUTE_TYPE,
                   QPLAT_PROD.APPLIED_FLAG,
                   NULL                      PRICING_ATTRIBUTE_CONTEXT,
                   NULL                      PRICING_ATTRIBUTE,
                   NULL                      PRICING_ATTR_VALUE_FROM,
                   NULL                      PRICING_SETUP_VALUE_FROM,
                   NULL                      PRICING_SETUP_VALUE_TO,
                   NULL                      PRICING_ATTRIBUTE_LEVEL,
                   NULL                      PRICING_ATTRIBUTE_TYPE,
                   NULL                      PRICING_OPERATOR_TYPE,
                   NULL                      PRICING_ATTRIBUTE_DATATYPE
                  ,QPL.BREAK_UOM_CODE /* Proration */
                  ,QPL.BREAK_UOM_CONTEXT /* Proration */
                  ,QPL.BREAK_UOM_ATTRIBUTE /* Proration */
                  ,QPL.PRICE_BREAK_TYPE_CODE --[julin] for price book
   FROM
         qp_npreq_lines_tmp QPLINES,
         qp_npreq_line_attrs_tmp qplat_prod,
         QP_PRICING_ATTRIBUTES QPA,
         QP_LIST_LINES QPL,
         QP_LIST_HEADERS_B QPH,
         --QP_PRICE_REQ_SOURCES qprs
         QP_PRICE_REQ_SOURCES_V qprs /* yangli */
   WHERE QPA.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   QPA.QUALIFICATION_IND IN (QP_PREQ_GRP.G_YES_PROD_HDR_QUAL_IND, QP_PREQ_GRP.G_YES_PROD_IND)
   AND   QPLAT_PROD.CONTEXT = QPA.PRODUCT_ATTRIBUTE_CONTEXT
   AND   QPLINES.LIST_PRICE_OVERRIDE_FLAG IN ('N', 'O') --po integration
   AND   (QPLINES.PRICE_FLAG = G_YES
          OR
         (QPLINES.PRICE_FLAG = G_PHASE
          AND
          P_FREEZE_OVERRIDE_FLAG = G_YES))
   AND   QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL
   AND   QPLINES.VALIDATED_FLAG = G_YES
   AND   QPLINES.QUALIFIERS_EXIST_FLAG IN (G_YES,G_NO)
   --AND   QPLINES.PRICING_ATTRS_EXIST_FLAG = G_NO
   AND   QPLAT_PROD.ATTRIBUTE = QPA.PRODUCT_ATTRIBUTE
   AND   QPLAT_PROD.VALUE_FROM = QPA.PRODUCT_ATTR_VALUE
   AND   QPA.EXCLUDER_FLAG = G_NO
   AND   QPLAT_PROD.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND   QPH.LIST_HEADER_ID = QPL.LIST_HEADER_ID
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--   AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR --begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
   AND   QPA.LIST_HEADER_ID = QPLINES.PRICE_LIST_HEADER_ID
   AND   QPA.LIST_LINE_ID = QPL.LIST_LINE_ID
   AND   QPL.QUALIFICATION_IND IN (QP_PREQ_GRP.G_YES_PROD_HDR_QUAL_IND, QP_PREQ_GRP.G_YES_PROD_IND)
   AND    QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPH.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPH.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   NVL(QPLINES.START_DATE_ACTIVE_FIRST,TRUNC(SYSDATE)) BETWEEN
           NVL(QPH.START_DATE_ACTIVE_FIRST, NVL(QPLINES.START_DATE_ACTIVE_FIRST,
               TRUNC(SYSDATE) )) AND
           NVL(QPH.END_DATE_ACTIVE_FIRST, NVL(QPLINES.START_DATE_ACTIVE_FIRST,
               TRUNC(SYSDATE) ))
   AND  NVL(QPLINES.START_DATE_ACTIVE_SECOND,TRUNC(SYSDATE)) BETWEEN
           NVL(QPH.START_DATE_ACTIVE_SECOND, NVL(QPLINES.START_DATE_ACTIVE_SECOND,
               TRUNC(SYSDATE) )) AND
           NVL(QPH.END_DATE_ACTIVE_SECOND, NVL(QPLINES.START_DATE_ACTIVE_SECOND,
               TRUNC(SYSDATE) ))
   AND   NVL(QPLINES.ACTIVE_DATE_FIRST_TYPE,'X') =
                NVL(QPH.ACTIVE_DATE_FIRST_TYPE,NVL(QPLINES.ACTIVE_DATE_FIRST_TYPE,'X'))
   AND   NVL(QPLINES.ACTIVE_DATE_SECOND_TYPE,'X') =
                NVL(QPH.ACTIVE_DATE_SECOND_TYPE,NVL(QPLINES.ACTIVE_DATE_SECOND_TYPE,'X'))
   AND    QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPL.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPL.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPH.CURRENCY_CODE = QPLINES.CURRENCY_CODE
   --AND   (QPL.MODIFIER_LEVEL_CODE = QPLINES.LINE_TYPE_CODE
   --       OR
   --       QPL.MODIFIER_LEVEL_CODE = G_LINE_GROUP AND QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL)
   AND   QPH.SOURCE_SYSTEM_CODE = QPRS.SOURCE_SYSTEM_CODE
   AND   QPLINES.REQUEST_TYPE_CODE   = QPRS.REQUEST_TYPE_CODE
   AND   QPH.ACTIVE_FLAG = G_YES
   AND   QPLAT_PROD.ATTRIBUTE_TYPE = G_PRODUCT_TYPE
   AND   QPLAT_PROD.LINE_INDEX = QPLINES.LINE_INDEX
   AND   QPL.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
UNION ALL
SELECT /*+ ORDERED USE_NL(QPLAT_PROD QPA QPLAT_PRIC QPL QPH) index(QPA QP_PRICING_ATTRIBUTES_N5)  index(qplat_pric qp_preq_line_attrs_tmp_N2) dynamic_sampling(1) l_list_cur */
                   QPLAT_PROD.LINE_INDEX,
                   QPL.LIST_LINE_ID,
                   QPL.ARITHMETIC_OPERATOR,
                   QPL.OPERAND,
                   QPL.PRICING_GROUP_SEQUENCE,
                   QPL.LIST_LINE_TYPE_CODE,
                   QPL.PRICING_PHASE_ID,
                   QPL.AUTOMATIC_FLAG,
                   QPL.INCOMPATIBILITY_GRP_CODE,
                   QPL.PRICE_BY_FORMULA_ID,
                   QPL.PRODUCT_PRECEDENCE,
                   QPL.PRIMARY_UOM_FLAG,
                   QPL.MODIFIER_LEVEL_CODE,
                   QPL.LIST_LINE_NO,
                   QPA.PRODUCT_UOM_CODE,
                   QPA.EXCLUDER_FLAG,
                   QPH.LIST_TYPE_CODE,
                   QPH.ROUNDING_FACTOR,
                   QPH.LIST_HEADER_ID         LIST_HEADER_ID,
                   QPLAT_PROD.CONTEXT         PRODUCT_ATTRIBUTE_CONTEXT,
                   QPLAT_PROD.ATTRIBUTE       PRODUCT_ATTRIBUTE,
                   QPLAT_PROD.VALUE_FROM      PRODUCT_ATTR_VALUE_FROM,
                   QPLAT_PROD.ATTRIBUTE_LEVEL PRODUCT_ATTRIBUTE_LEVEL,
                   QPLAT_PROD.ATTRIBUTE_TYPE  PRODUCT_ATTRIBUTE_TYPE,
                   QPLAT_PROD.APPLIED_FLAG,
                   QPLAT_PRIC.CONTEXT              PRICING_ATTRIBUTE_CONTEXT,
                   QPLAT_PRIC.ATTRIBUTE            PRICING_ATTRIBUTE,
                   QPLAT_PRIC.VALUE_FROM           PRICING_ATTR_VALUE_FROM,
                   QPA.PRICING_ATTR_VALUE_FROM     PRICING_SETUP_VALUE_FROM,
                   QPA.PRICING_ATTR_VALUE_TO       PRICING_SETUP_VALUE_TO,
                   QPLAT_PRIC.ATTRIBUTE_LEVEL      PRICING_ATTRIBUTE_LEVEL,
                   QPLAT_PRIC.ATTRIBUTE_TYPE       PRICING_ATTRIBUTE_TYPE,
                   QPA.COMPARISON_OPERATOR_CODE    PRICING_OPERATOR_TYPE,
                   QPA.PRICING_ATTRIBUTE_DATATYPE   PRICING_ATTRIBUTE_DATATYPE
                  ,QPL.BREAK_UOM_CODE /* Proration */
                  ,QPL.BREAK_UOM_CONTEXT /* Proration */
                  ,QPL.BREAK_UOM_ATTRIBUTE /* Proration */
                  ,QPL.PRICE_BREAK_TYPE_CODE --[julin] for price book
   FROM
         qp_npreq_lines_tmp qplines,
         qp_npreq_line_attrs_tmp qplat_prod,
         QP_PRICING_ATTRIBUTES qpa,
         qp_npreq_line_attrs_tmp qplat_pric,
         QP_LIST_LINES qpl,
         QP_LIST_HEADERS_B qph,
         --QP_PRICE_REQ_SOURCES qprs
         QP_PRICE_REQ_SOURCES_V qprs /* yangli */
   WHERE QPA.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   QPA.QUALIFICATION_IND IN (QP_PREQ_GRP.G_YES_PROD_PRIC_HDR_QUAL_IND,QP_PREQ_GRP.G_YES_PROD_PRIC_IND)
   AND   QPLAT_PROD.CONTEXT = QPA.PRODUCT_ATTRIBUTE_CONTEXT
   AND   QPLINES.LIST_PRICE_OVERRIDE_FLAG IN ('N', 'O') --po integration
   AND   (QPLINES.PRICE_FLAG = G_YES
          OR
         (QPLINES.PRICE_FLAG = G_PHASE
          AND
          P_FREEZE_OVERRIDE_FLAG = G_YES))
   AND   QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL
   AND   QPLINES.VALIDATED_FLAG = G_YES
   AND   QPLINES.QUALIFIERS_EXIST_FLAG IN (G_YES,G_NO)
   AND   QPLINES.PRICING_ATTRS_EXIST_FLAG = G_YES
   AND   QPLAT_PROD.ATTRIBUTE = QPA.PRODUCT_ATTRIBUTE
   AND   QPLAT_PROD.VALUE_FROM = QPA.PRODUCT_ATTR_VALUE
   AND   QPA.EXCLUDER_FLAG = G_NO
   AND   QPLAT_PROD.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND   QPA.PRICING_ATTRIBUTE_CONTEXT IS NOT NULL
   AND   QPLAT_PRIC.CONTEXT = QPA.PRICING_ATTRIBUTE_CONTEXT
   AND   QPLAT_PRIC.ATTRIBUTE = QPA.PRICING_ATTRIBUTE
   AND   (QPLAT_PRIC.VALUE_FROM = QPA.PRICING_ATTR_VALUE_FROM
          OR
          QPA.COMPARISON_OPERATOR_CODE IN ('NOT =', G_OPERATOR_BETWEEN))
   AND   QPLAT_PRIC.ATTRIBUTE_TYPE = G_PRICING_TYPE
   AND   QPLAT_PRIC. PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND   QPLAT_PRIC.LINE_INDEX = QPLAT_PROD.LINE_INDEX
   AND   QPH.LIST_HEADER_ID = QPL.LIST_HEADER_ID
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--   AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
   AND   QPA.LIST_HEADER_ID = QPLINES.PRICE_LIST_HEADER_ID
   AND   QPA.LIST_LINE_ID = QPL.LIST_LINE_ID
   AND   QPL.QUALIFICATION_IND IN (QP_PREQ_GRP.G_YES_PROD_PRIC_HDR_QUAL_IND,QP_PREQ_GRP.G_YES_PROD_PRIC_IND)
   AND    QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPH.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPH.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   NVL(QPLINES.START_DATE_ACTIVE_FIRST,TRUNC(SYSDATE)) BETWEEN
           NVL(QPH.START_DATE_ACTIVE_FIRST, NVL(QPLINES.START_DATE_ACTIVE_FIRST,
               TRUNC(SYSDATE) )) AND
           NVL(QPH.END_DATE_ACTIVE_FIRST, NVL(QPLINES.START_DATE_ACTIVE_FIRST,
               TRUNC(SYSDATE) ))
   AND  NVL(QPLINES.START_DATE_ACTIVE_SECOND,TRUNC(SYSDATE)) BETWEEN
           NVL(QPH.START_DATE_ACTIVE_SECOND, NVL(QPLINES.START_DATE_ACTIVE_SECOND,
               TRUNC(SYSDATE) )) AND
           NVL(QPH.END_DATE_ACTIVE_SECOND, NVL(QPLINES.START_DATE_ACTIVE_SECOND,
               TRUNC(SYSDATE) ))
   AND   NVL(QPLINES.ACTIVE_DATE_FIRST_TYPE,'X') =
                NVL(QPH.ACTIVE_DATE_FIRST_TYPE,NVL(QPLINES.ACTIVE_DATE_FIRST_TYPE,'X'))
   AND   NVL(QPLINES.ACTIVE_DATE_SECOND_TYPE,'X') =
                NVL(QPH.ACTIVE_DATE_SECOND_TYPE,NVL(QPLINES.ACTIVE_DATE_SECOND_TYPE,'X'))
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPL.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPL.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPH.CURRENCY_CODE = QPLINES.CURRENCY_CODE
   --AND   (QPL.MODIFIER_LEVEL_CODE = QPLINES.LINE_TYPE_CODE
   --       OR
   --       QPL.MODIFIER_LEVEL_CODE = G_LINE_GROUP AND QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL)
   AND   QPH.SOURCE_SYSTEM_CODE = QPRS.SOURCE_SYSTEM_CODE
   AND   QPLINES.REQUEST_TYPE_CODE   = QPRS.REQUEST_TYPE_CODE
   AND   QPH.ACTIVE_FLAG = G_YES
   AND   QPLAT_PROD.ATTRIBUTE_TYPE = G_PRODUCT_TYPE
   AND   QPLAT_PROD.LINE_INDEX = QPLINES.LINE_INDEX
   AND   QPL.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
   ORDER BY 1,2; --ORDER BY LINE_INDEX AND LIST LINE ID

-- vivek
CURSOR L_LIST_CUR_CURRENCY  IS
SELECT /*+ ORDERED USE_NL(QPLAT_PROD QPA QPL QPH) index(QPA QP_PRICING_ATTRIBUTES_N5)
	index(qplat_prod qp_preq_line_attrs_tmp_n1) index(QPLINES QP_PREQ_LINES_TMP_N2) l_list_cur */ -- 9362867
                   QPLAT_PROD.LINE_INDEX,
                   QPL.LIST_LINE_ID,
                   QPL.ARITHMETIC_OPERATOR,
                   QPL.OPERAND,
                   QPL.PRICING_GROUP_SEQUENCE,
                   QPL.LIST_LINE_TYPE_CODE,
                   QPL.PRICING_PHASE_ID,
                   QPL.AUTOMATIC_FLAG,
                   QPL.INCOMPATIBILITY_GRP_CODE,
                   QPL.PRICE_BY_FORMULA_ID,
                   QPL.PRODUCT_PRECEDENCE,
                   QPL.PRIMARY_UOM_FLAG,
                   QPL.MODIFIER_LEVEL_CODE,
                   QPL.LIST_LINE_NO,
                   QPA.PRODUCT_UOM_CODE,
                   QPA.EXCLUDER_FLAG,
                   QPH.LIST_TYPE_CODE,
   /* vivek        QPH.ROUNDING_FACTOR,  */
                   QCDT.ROUNDING_FACTOR, /* vivek */
                   QPH.LIST_HEADER_ID           LIST_HEADER_ID,
                   QPLAT_PROD.CONTEXT         PRODUCT_ATTRIBUTE_CONTEXT,
                   QPLAT_PROD.ATTRIBUTE       PRODUCT_ATTRIBUTE,
                   QPLAT_PROD.VALUE_FROM      PRODUCT_ATTR_VALUE_FROM,
                   QPLAT_PROD.ATTRIBUTE_LEVEL PRODUCT_ATTRIBUTE_LEVEL,
                   QPLAT_PROD.ATTRIBUTE_TYPE  PRODUCT_ATTRIBUTE_TYPE,
                   QPLAT_PROD.APPLIED_FLAG,
                   NULL                      PRICING_ATTRIBUTE_CONTEXT,
                   NULL                      PRICING_ATTRIBUTE,
                   NULL                      PRICING_ATTR_VALUE_FROM,
                   NULL                      PRICING_SETUP_VALUE_FROM,
                   NULL                      PRICING_SETUP_VALUE_TO,
                   NULL                      PRICING_ATTRIBUTE_LEVEL,
                   NULL                      PRICING_ATTRIBUTE_TYPE,
                   NULL                      PRICING_OPERATOR_TYPE,
                   NULL                      PRICING_ATTRIBUTE_DATATYPE,
                   QCDT.CURRENCY_DETAIL_ID,  /* sunilpandey */
                   QCDT.CURRENCY_HEADER_ID,  /* vivek */
                   QCDT.SELLING_ROUNDING_FACTOR,  /* vivek */
                   QPLINES.CURRENCY_CODE   ORDER_CURRENCY,  /* vivek */
                   QPLINES.PRICING_EFFECTIVE_DATE,  /* vivek */
                   QPH.CURRENCY_CODE   BASE_CURRENCY_CODE  /* vivek */
                  ,QPL.BREAK_UOM_CODE /* Proration */
                  ,QPL.BREAK_UOM_CONTEXT /* Proration */
                  ,QPL.BREAK_UOM_ATTRIBUTE /* Proration */
                  ,QPL.PRICE_BREAK_TYPE_CODE --[julin] for price book
   FROM
         qp_npreq_lines_tmp QPLINES,
         qp_npreq_line_attrs_tmp qplat_prod,
         QP_PRICING_ATTRIBUTES QPA,
         QP_LIST_LINES QPL,
         QP_LIST_HEADERS_B QPH,
         --QP_PRICE_REQ_SOURCES qprs,
         QP_PRICE_REQ_SOURCES_V qprs, /* yangli */
         QP_CURRENCY_DETAILS QCDT   /* Vivek */
   WHERE QPA.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   QPA.QUALIFICATION_IND IN (QP_PREQ_GRP.G_YES_PROD_HDR_QUAL_IND, QP_PREQ_GRP.G_YES_PROD_IND)
   AND   QPLAT_PROD.CONTEXT = QPA.PRODUCT_ATTRIBUTE_CONTEXT
   AND   (QPLINES.PRICE_FLAG = G_YES
          OR
         (QPLINES.PRICE_FLAG = G_PHASE
          AND
          P_FREEZE_OVERRIDE_FLAG = G_YES))
   AND   QPLINES.LIST_PRICE_OVERRIDE_FLAG IN ('N', 'O') --po integration
   AND   QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL
   AND   QPLINES.VALIDATED_FLAG = G_YES
   AND   QPLINES.QUALIFIERS_EXIST_FLAG IN (G_YES,G_NO)
   --AND   QPLINES.PRICING_ATTRS_EXIST_FLAG = G_NO
   AND   QPLAT_PROD.ATTRIBUTE = QPA.PRODUCT_ATTRIBUTE
   AND   QPLAT_PROD.VALUE_FROM = QPA.PRODUCT_ATTR_VALUE
   AND   QPA.EXCLUDER_FLAG = G_NO
   AND   QPLAT_PROD.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND   QPH.LIST_HEADER_ID = QPL.LIST_HEADER_ID
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--   AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
   AND   QPA.LIST_HEADER_ID = QPLINES.PRICE_LIST_HEADER_ID
   AND   QPA.LIST_LINE_ID = QPL.LIST_LINE_ID
   AND   QPL.QUALIFICATION_IND IN (QP_PREQ_GRP.G_YES_PROD_HDR_QUAL_IND, QP_PREQ_GRP.G_YES_PROD_IND)
   AND    QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPH.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPH.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   NVL(QPLINES.START_DATE_ACTIVE_FIRST,TRUNC(SYSDATE)) BETWEEN
           NVL(QPH.START_DATE_ACTIVE_FIRST, NVL(QPLINES.START_DATE_ACTIVE_FIRST,
               TRUNC(SYSDATE) )) AND
           NVL(QPH.END_DATE_ACTIVE_FIRST, NVL(QPLINES.START_DATE_ACTIVE_FIRST,
               TRUNC(SYSDATE) ))
   AND  NVL(QPLINES.START_DATE_ACTIVE_SECOND,TRUNC(SYSDATE)) BETWEEN
           NVL(QPH.START_DATE_ACTIVE_SECOND, NVL(QPLINES.START_DATE_ACTIVE_SECOND,
               TRUNC(SYSDATE) )) AND
           NVL(QPH.END_DATE_ACTIVE_SECOND, NVL(QPLINES.START_DATE_ACTIVE_SECOND,
               TRUNC(SYSDATE) ))
   AND   NVL(QPLINES.ACTIVE_DATE_FIRST_TYPE,'X') =
                NVL(QPH.ACTIVE_DATE_FIRST_TYPE,NVL(QPLINES.ACTIVE_DATE_FIRST_TYPE,'X'))
   AND   NVL(QPLINES.ACTIVE_DATE_SECOND_TYPE,'X') =
                NVL(QPH.ACTIVE_DATE_SECOND_TYPE,NVL(QPLINES.ACTIVE_DATE_SECOND_TYPE,'X'))
   AND    QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPL.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPL.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
/* Vivek    AND   QPH.CURRENCY_CODE = QPLINES.CURRENCY_CODE  */
            AND QPH.CURRENCY_HEADER_ID = QCDT.CURRENCY_HEADER_ID /* Vivek */
            AND QPLINES.CURRENCY_CODE = QCDT.TO_CURRENCY_CODE  /* Vivek */
            AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                NVL(TRUNC(QCDT.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                AND NVL(TRUNC(QCDT.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
   AND (   /* Vivek */
        (qcdt.curr_attribute_context is null   /* Vivek */
         and not exists   /* Vivek */
             (select /*+ ORDERED use_nl(qcdt1) index(pa_tmp QP_PREQ_LINE_ATTRS_TMP_N1) */ 'x'   --[julin/5139512/4744915]
	       from qp_npreq_line_attrs_tmp pa_tmp,   qp_currency_details qcdt1 /* Vivek */
               where qcdt1.curr_attribute_context IS NOT NULL  /* Vivek */
		 and qcdt1.curr_attribute_context = pa_tmp.context   /* Vivek */
                 and qcdt1.curr_attribute = pa_tmp.attribute   /* Vivek */
                 and qcdt1.curr_attribute_value = pa_tmp.value_from   /* Vivek */
                 and qcdt1.curr_attribute_type = pa_tmp.ATTRIBUTE_TYPE   /* Vivek */
                 and qcdt1.to_currency_code = qcdt.to_currency_code   /* Vivek */
                 and qcdt1.currency_header_id = qcdt.currency_header_id   /* Vivek */
                 and pa_tmp.pricing_status_code = G_STATUS_UNCHANGED   /* Vivek */
                 and pa_tmp.line_index = qplines.line_index   /* Vivek */
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                     NVL(TRUNC(QCDT1.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                     AND NVL(TRUNC(QCDT1.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
             )   /* Vivek */
        )   /* Vivek */
        OR   /* Vivek */
        (qcdt.curr_attribute_context is not null   /* Vivek */
         and qcdt.precedence =
             (select /*+ ORDERED use_nl(qcdt2) index(pa_tmp1 QP_PREQ_LINE_ATTRS_TMP_N1) */ min(qcdt2.precedence) --[julin/5139512/4744915]
	       from qp_npreq_line_attrs_tmp pa_tmp1, qp_currency_details qcdt2  /* Vivek */
               where qcdt2.curr_attribute_context IS NOT NULL   /* Vivek */
		 and qcdt2.curr_attribute_context = pa_tmp1.context   /* Vivek */
                 and qcdt2.curr_attribute = pa_tmp1.attribute   /* Vivek */
                 and qcdt2.curr_attribute_value = pa_tmp1.value_from   /* Vivek */
                 and qcdt2.curr_attribute_type = pa_tmp1.ATTRIBUTE_TYPE   /* Vivek */
                 and qcdt2.to_currency_code = qcdt.to_currency_code   /* Vivek */
                 and qcdt2.currency_header_id = qcdt.currency_header_id   /* Vivek */
                 and pa_tmp1.pricing_status_code = G_STATUS_UNCHANGED   /* Vivek */
                 and pa_tmp1.line_index = qplines.line_index   /* Vivek */
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                     NVL(TRUNC(QCDT2.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                     AND NVL(TRUNC(QCDT2.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
             )   /* Vivek */
        )   /* Vivek */
       )   /* Vivek */
   --AND   (QPL.MODIFIER_LEVEL_CODE = QPLINES.LINE_TYPE_CODE
   --       OR
   --       QPL.MODIFIER_LEVEL_CODE = G_LINE_GROUP AND QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL)
   AND   QPH.SOURCE_SYSTEM_CODE = QPRS.SOURCE_SYSTEM_CODE
   AND   QPLINES.REQUEST_TYPE_CODE   = QPRS.REQUEST_TYPE_CODE
   AND   QPH.ACTIVE_FLAG = G_YES
   AND   QPLAT_PROD.ATTRIBUTE_TYPE = G_PRODUCT_TYPE
   AND   QPLAT_PROD.LINE_INDEX = QPLINES.LINE_INDEX
   AND   QPL.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
UNION ALL
SELECT /*+ ORDERED USE_NL(QPLAT_PROD QPA QPLAT_PRIC QPL QPH) index(QPA QP_PRICING_ATTRIBUTES_N5)  index(qplat_pric qp_preq_line_attrs_tmp_N2) l_list_cur */
                   QPLAT_PROD.LINE_INDEX,
                   QPL.LIST_LINE_ID,
                   QPL.ARITHMETIC_OPERATOR,
                   QPL.OPERAND,
                   QPL.PRICING_GROUP_SEQUENCE,
                   QPL.LIST_LINE_TYPE_CODE,
                   QPL.PRICING_PHASE_ID,
                   QPL.AUTOMATIC_FLAG,
                   QPL.INCOMPATIBILITY_GRP_CODE,
                   QPL.PRICE_BY_FORMULA_ID,
                   QPL.PRODUCT_PRECEDENCE,
                   QPL.PRIMARY_UOM_FLAG,
                   QPL.MODIFIER_LEVEL_CODE,
                   QPL.LIST_LINE_NO,
                   QPA.PRODUCT_UOM_CODE,
                   QPA.EXCLUDER_FLAG,
                   QPH.LIST_TYPE_CODE,
   /* vivek        QPH.ROUNDING_FACTOR,  */
                   QCDT.ROUNDING_FACTOR, /* vivek */
                   QPH.LIST_HEADER_ID         LIST_HEADER_ID,
                   QPLAT_PROD.CONTEXT         PRODUCT_ATTRIBUTE_CONTEXT,
                   QPLAT_PROD.ATTRIBUTE       PRODUCT_ATTRIBUTE,
                   QPLAT_PROD.VALUE_FROM      PRODUCT_ATTR_VALUE_FROM,
                   QPLAT_PROD.ATTRIBUTE_LEVEL PRODUCT_ATTRIBUTE_LEVEL,
                   QPLAT_PROD.ATTRIBUTE_TYPE  PRODUCT_ATTRIBUTE_TYPE,
                   QPLAT_PROD.APPLIED_FLAG,
                   QPLAT_PRIC.CONTEXT              PRICING_ATTRIBUTE_CONTEXT,
                   QPLAT_PRIC.ATTRIBUTE            PRICING_ATTRIBUTE,
                   QPLAT_PRIC.VALUE_FROM           PRICING_ATTR_VALUE_FROM,
                   QPA.PRICING_ATTR_VALUE_FROM     PRICING_SETUP_VALUE_FROM,
                   QPA.PRICING_ATTR_VALUE_TO       PRICING_SETUP_VALUE_TO,
                   QPLAT_PRIC.ATTRIBUTE_LEVEL      PRICING_ATTRIBUTE_LEVEL,
                   QPLAT_PRIC.ATTRIBUTE_TYPE       PRICING_ATTRIBUTE_TYPE,
                   QPA.COMPARISON_OPERATOR_CODE    PRICING_OPERATOR_TYPE,
                   QPA.PRICING_ATTRIBUTE_DATATYPE   PRICING_ATTRIBUTE_DATATYPE,
                   QCDT.CURRENCY_DETAIL_ID,  /* sunilpandey */
                   QCDT.CURRENCY_HEADER_ID,  /* vivek */
                   QCDT.SELLING_ROUNDING_FACTOR,  /* vivek */
                   QPLINES.CURRENCY_CODE   ORDER_CURRENCY,  /* vivek */
                   QPLINES.PRICING_EFFECTIVE_DATE,  /* vivek */
                   QPH.CURRENCY_CODE   BASE_CURRENCY_CODE  /* vivek */
                  ,QPL.BREAK_UOM_CODE /* Proration */
                  ,QPL.BREAK_UOM_CONTEXT /* Proration */
                  ,QPL.BREAK_UOM_ATTRIBUTE /* Proration */
                  ,QPL.PRICE_BREAK_TYPE_CODE --[julin] for price book
   FROM
         qp_npreq_lines_tmp qplines,
         qp_npreq_line_attrs_tmp qplat_prod,
         QP_PRICING_ATTRIBUTES qpa,
         qp_npreq_line_attrs_tmp qplat_pric,
         QP_LIST_LINES qpl,
         QP_LIST_HEADERS_B qph,
         --QP_PRICE_REQ_SOURCES qprs,
         QP_PRICE_REQ_SOURCES_V qprs, /* yangli */
         QP_CURRENCY_DETAILS QCDT   /* Vivek */
   WHERE QPA.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   QPA.QUALIFICATION_IND IN (QP_PREQ_GRP.G_YES_PROD_PRIC_HDR_QUAL_IND,QP_PREQ_GRP.G_YES_PROD_PRIC_IND)
   AND   QPLAT_PROD.CONTEXT = QPA.PRODUCT_ATTRIBUTE_CONTEXT
   AND   (QPLINES.PRICE_FLAG = G_YES
          OR
         (QPLINES.PRICE_FLAG = G_PHASE
          AND
          P_FREEZE_OVERRIDE_FLAG = G_YES))
   AND   QPLINES.LIST_PRICE_OVERRIDE_FLAG IN ('N', 'O') --po integration
   AND   QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL
   AND   QPLINES.VALIDATED_FLAG = G_YES
   AND   QPLINES.QUALIFIERS_EXIST_FLAG IN (G_YES,G_NO)
   AND   QPLINES.PRICING_ATTRS_EXIST_FLAG = G_YES
   AND   QPLAT_PROD.ATTRIBUTE = QPA.PRODUCT_ATTRIBUTE
   AND   QPLAT_PROD.VALUE_FROM = QPA.PRODUCT_ATTR_VALUE
   AND   QPA.EXCLUDER_FLAG = G_NO
   AND   QPLAT_PROD.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND   QPA.PRICING_ATTRIBUTE_CONTEXT IS NOT NULL
   AND   QPLAT_PRIC.CONTEXT = QPA.PRICING_ATTRIBUTE_CONTEXT
   AND   QPLAT_PRIC.ATTRIBUTE = QPA.PRICING_ATTRIBUTE
   AND   (QPLAT_PRIC.VALUE_FROM = QPA.PRICING_ATTR_VALUE_FROM
          OR
          QPA.COMPARISON_OPERATOR_CODE IN ('NOT =', G_OPERATOR_BETWEEN))
   AND   QPLAT_PRIC.ATTRIBUTE_TYPE = G_PRICING_TYPE
   AND   QPLAT_PRIC. PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND   QPLAT_PRIC.LINE_INDEX = QPLAT_PROD.LINE_INDEX
   AND   QPH.LIST_HEADER_ID = QPL.LIST_HEADER_ID
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--   AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
   AND   QPA.LIST_HEADER_ID = QPLINES.PRICE_LIST_HEADER_ID
   AND   QPA.LIST_LINE_ID = QPL.LIST_LINE_ID
   AND   QPL.QUALIFICATION_IND IN (QP_PREQ_GRP.G_YES_PROD_PRIC_HDR_QUAL_IND,QP_PREQ_GRP.G_YES_PROD_PRIC_IND)
   AND    QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPH.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPH.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   NVL(QPLINES.START_DATE_ACTIVE_FIRST,TRUNC(SYSDATE)) BETWEEN
           NVL(QPH.START_DATE_ACTIVE_FIRST, NVL(QPLINES.START_DATE_ACTIVE_FIRST,
               TRUNC(SYSDATE) )) AND
           NVL(QPH.END_DATE_ACTIVE_FIRST, NVL(QPLINES.START_DATE_ACTIVE_FIRST,
               TRUNC(SYSDATE) ))
   AND  NVL(QPLINES.START_DATE_ACTIVE_SECOND,TRUNC(SYSDATE)) BETWEEN
           NVL(QPH.START_DATE_ACTIVE_SECOND, NVL(QPLINES.START_DATE_ACTIVE_SECOND,
               TRUNC(SYSDATE) )) AND
           NVL(QPH.END_DATE_ACTIVE_SECOND, NVL(QPLINES.START_DATE_ACTIVE_SECOND,
               TRUNC(SYSDATE) ))
   AND   NVL(QPLINES.ACTIVE_DATE_FIRST_TYPE,'X') =
                NVL(QPH.ACTIVE_DATE_FIRST_TYPE,NVL(QPLINES.ACTIVE_DATE_FIRST_TYPE,'X'))
   AND   NVL(QPLINES.ACTIVE_DATE_SECOND_TYPE,'X') =
                NVL(QPH.ACTIVE_DATE_SECOND_TYPE,NVL(QPLINES.ACTIVE_DATE_SECOND_TYPE,'X'))
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPL.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPL.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
/* Vivek    AND   QPH.CURRENCY_CODE = QPLINES.CURRENCY_CODE  */
            AND QPH.CURRENCY_HEADER_ID = QCDT.CURRENCY_HEADER_ID /* Vivek */
            AND QPLINES.CURRENCY_CODE = QCDT.TO_CURRENCY_CODE  /* Vivek */
            AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                NVL(TRUNC(QCDT.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                AND NVL(TRUNC(QCDT.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
   AND (   /* Vivek */
        (qcdt.curr_attribute_context is null   /* Vivek */
         and not exists   /* Vivek */
             (select /*+ ORDERED use_nl(qcdt1) index(pa_tmp QP_PREQ_LINE_ATTRS_TMP_N1) */ 'x'   --[julin/5139512/4744915]
	       from qp_npreq_line_attrs_tmp pa_tmp,   qp_currency_details qcdt1 /* Vivek */
               where qcdt1.curr_attribute_context IS NOT NULL  /* Vivek */
		 and qcdt1.curr_attribute_context = pa_tmp.context   /* Vivek */
                 and qcdt1.curr_attribute = pa_tmp.attribute   /* Vivek */
                 and qcdt1.curr_attribute_value = pa_tmp.value_from   /* Vivek */
                 and qcdt1.curr_attribute_type = pa_tmp.ATTRIBUTE_TYPE   /* Vivek */
                 and qcdt1.to_currency_code = qcdt.to_currency_code   /* Vivek */
                 and qcdt1.currency_header_id = qcdt.currency_header_id   /* Vivek */
                 and pa_tmp.pricing_status_code = G_STATUS_UNCHANGED   /* Vivek */
                 and pa_tmp.line_index = qplines.line_index   /* Vivek */
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                     NVL(TRUNC(QCDT1.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                     AND NVL(TRUNC(QCDT1.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
             )   /* Vivek */
        )   /* Vivek */
        OR   /* Vivek */
        (qcdt.curr_attribute_context is not null   /* Vivek */
         and qcdt.precedence =
             (select /*+ ORDERED use_nl(qcdt2) index(pa_tmp1 QP_PREQ_LINE_ATTRS_TMP_N1) */ min(qcdt2.precedence) --[julin/5139512/4744915]
	       from qp_npreq_line_attrs_tmp pa_tmp1, qp_currency_details qcdt2  /* Vivek */
               where qcdt2.curr_attribute_context IS NOT NULL   /* Vivek */
		 and qcdt2.curr_attribute_context = pa_tmp1.context   /* Vivek */
                 and qcdt2.curr_attribute = pa_tmp1.attribute   /* Vivek */
                 and qcdt2.curr_attribute_value = pa_tmp1.value_from   /* Vivek */
                 and qcdt2.curr_attribute_type = pa_tmp1.ATTRIBUTE_TYPE   /* Vivek */
                 and qcdt2.to_currency_code = qcdt.to_currency_code   /* Vivek */
                 and qcdt2.currency_header_id = qcdt.currency_header_id   /* Vivek */
                 and pa_tmp1.pricing_status_code = G_STATUS_UNCHANGED   /* Vivek */
                 and pa_tmp1.line_index = qplines.line_index   /* Vivek */
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                     NVL(TRUNC(QCDT2.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                     AND NVL(TRUNC(QCDT2.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
             )   /* Vivek */
        )   /* Vivek */
       )   /* Vivek */
   --AND   (QPL.MODIFIER_LEVEL_CODE = QPLINES.LINE_TYPE_CODE
   --       OR
   --       QPL.MODIFIER_LEVEL_CODE = G_LINE_GROUP AND QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL)
   AND   QPH.SOURCE_SYSTEM_CODE = QPRS.SOURCE_SYSTEM_CODE
   AND   QPLINES.REQUEST_TYPE_CODE   = QPRS.REQUEST_TYPE_CODE
   AND   QPH.ACTIVE_FLAG = G_YES
   AND   QPLAT_PROD.ATTRIBUTE_TYPE = G_PRODUCT_TYPE
   AND   QPLAT_PROD.LINE_INDEX = QPLINES.LINE_INDEX
   AND   QPL.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
   ORDER BY 1,2; --ORDER BY LINE_INDEX AND LIST LINE ID


/*
INDX,QP_PREQ_GRP.list_header_search.l_list_qual_cur,qp_npreq_lines_tmp_N3,VALIDATED_FLAG,1
INDX,QP_PREQ_GRP.list_header_search.l_list_qual_cur,qp_npreq_lines_tmp_N3,QUALIFIERS_EXIST_FLAG,2
INDX,QP_PREQ_GRP.list_header_search.l_list_qual_cur,qp_npreq_lines_tmp_N3,PRICING_ATTRS_EXIST_FLAG,3

INDX,QP_PREQ_GRP.list_header_search.l_list_qual_cur,QP_QUALIFIERS_N1,LIST_HEADER_ID,1
INDX,QP_PREQ_GRP.list_header_search.l_list_qual_cur,QP_QUALIFIERS_N1,COMPARISON_OPERATOR_CODE,4
INDX,QP_PREQ_GRP.list_header_search.l_list_qual_cur,QP_QUALIFIERS_N1,ACTIVE_FLAG,6

INDX,QP_PREQ_GRP.list_header_search.l_list_qual_cur,qp_npreq_line_attrs_tmp_N2,PRICING_STATUS_CODE,1
INDX,QP_PREQ_GRP.list_header_search.l_list_qual_cur,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.list_header_search.l_list_qual_cur,qp_npreq_line_attrs_tmp_N2,CONTEXT,3
INDX,QP_PREQ_GRP.list_header_search.l_list_qual_cur,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE,4
INDX,QP_PREQ_GRP.list_header_search.l_list_qual_cur,qp_npreq_line_attrs_tmp_N2,LINE_INDEX,5
INDX,QP_PREQ_GRP.list_header_search.l_list_qual_cur,qp_npreq_line_attrs_tmp_N2,VALUE_FROM,6

INDX,QP_PREQ_GRP.list_header_search.l_list_qual_cur,QP_PRICING_ATTRIBUTES_N6,LIST_HEADER_ID,1
INDX,QP_PREQ_GRP.list_header_search.l_list_qual_cur,QP_PRICING_ATTRIBUTES_N6,QUALIFICATION_IND,2
INDX,QP_PREQ_GRP.list_header_search.l_list_qual_cur,QP_PRICING_ATTRIBUTES_N6,PRICING_PHASE_ID,3
INDX,QP_PREQ_GRP.list_header_search.l_list_qual_cur,QP_PRICING_ATTRIBUTES_N6,LIST_LINE_ID,4

INDX,QP_PREQ_GRP.list_header_search.l_list_qual_cur,qp_npreq_line_attrs_tmp_N1,LINE_INDEX,1
INDX,QP_PREQ_GRP.list_header_search.l_list_qual_cur,qp_npreq_line_attrs_tmp_N1,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.list_header_search.l_list_qual_cur,qp_npreq_line_attrs_tmp_N1,PRICING_STATUS_CODE,3

INDX,QP_PREQ_GRP.list_header_search.l_list_qual_cur,QP_LIST_LINES_PK,LIST_LINE_ID,1

INDX,QP_PREQ_GRP.list_header_search.l_list_qual_cur,QP_LIST_HEADERS_B_PK,LIST_HEADER_ID,1

INDX,QP_PREQ_GRP.list_header_search.l_list_qual_cur,QP_PRICE_REQ_SOURCES_PK,REQUEST_TYPE_CODE,1
INDX,QP_PREQ_GRP.list_header_search.l_list_qual_cur,QP_PRICE_REQ_SOURCES_PK,SOURCE_SYSTEM_CODE,2

INDX,QP_PREQ_GRP.list_header_search.l_list_qual_cur,QP_PRICING_ATTRIBUTES_N5,PRICING_PHASE_ID,1
INDX,QP_PREQ_GRP.list_header_search.l_list_qual_cur,QP_PRICING_ATTRIBUTES_N5,QUALIFICATION_IND,2
INDX,QP_PREQ_GRP.list_header_search.l_list_qual_cur,QP_PRICING_ATTRIBUTES_N5,PRODUCT_ATTRIBUTE_CONTEXT,3
INDX,QP_PREQ_GRP.list_header_search.l_list_qual_cur,QP_PRICING_ATTRIBUTES_N5,PRODUCT_ATTRIBUTE,4
INDX,QP_PREQ_GRP.list_header_search.l_list_qual_cur,QP_PRICING_ATTRIBUTES_N5,PRODUCT_ATTR_VALUE,5
INDX,QP_PREQ_GRP.list_header_search.l_list_qual_cur,QP_PRICING_ATTRIBUTES_N5,EXCLUDER_FLAG,6
INDX,QP_PREQ_GRP.list_header_search.l_list_qual_cur,QP_PRICING_ATTRIBUTES_N5,LIST_HEADER_ID,7
INDX,QP_PREQ_GRP.list_header_search.l_list_qual_cur,QP_PRICING_ATTRIBUTES_N5,LIST_LINE_ID,8
*/
CURSOR L_LIST_QUAL_CUR  IS
SELECT /*+ ORDERED USE_NL(QPQ QPLAT_Q QPLAT_PROD QPA QPL QPH) INDEX(QPQ QP_QUALIFIERS_N1) INDEX(QPLAT_Q qp_preq_line_attrs_tmp_N2) INDEX(QPA QP_PRICING_ATTRIBUTES_N5) dynamic_sampling(1) l_list_qual_cur */
                   QPLAT_PROD.LINE_INDEX,
                   QPL.LIST_LINE_ID,
                   QPL.ARITHMETIC_OPERATOR,
                   QPL.OPERAND,
                   QPL.PRICING_GROUP_SEQUENCE,
                   QPL.LIST_LINE_TYPE_CODE,
                   QPL.PRICING_PHASE_ID,
                   QPL.AUTOMATIC_FLAG,
                   QPL.INCOMPATIBILITY_GRP_CODE,
                   QPL.PRICE_BY_FORMULA_ID,
                   QPL.PRODUCT_PRECEDENCE,
                   QPL.PRIMARY_UOM_FLAG,
                   QPL.MODIFIER_LEVEL_CODE,
                   QPL.LIST_LINE_NO,
                   QPA.PRODUCT_UOM_CODE,
                   QPA.EXCLUDER_FLAG,
                   QPH.LIST_TYPE_CODE,
                   QPH.ROUNDING_FACTOR,
                   QPH.LIST_HEADER_ID           LIST_HEADER_ID,
                   QPLAT_PROD.CONTEXT         PRODUCT_ATTRIBUTE_CONTEXT,
                   QPLAT_PROD.ATTRIBUTE       PRODUCT_ATTRIBUTE,
                   QPLAT_PROD.VALUE_FROM      PRODUCT_ATTR_VALUE_FROM,
                   QPLAT_PROD.ATTRIBUTE_LEVEL PRODUCT_ATTRIBUTE_LEVEL,
                   QPLAT_PROD.ATTRIBUTE_TYPE  PRODUCT_ATTRIBUTE_TYPE,
                   QPLAT_PROD.APPLIED_FLAG,
                   NULL                      PRICING_ATTRIBUTE_CONTEXT,
                   NULL                      PRICING_ATTRIBUTE,
                   NULL                      PRICING_ATTR_VALUE_FROM,
                   NULL                      PRICING_SETUP_VALUE_FROM,
                   NULL                      PRICING_SETUP_VALUE_TO,
                   NULL                      PRICING_ATTRIBUTE_LEVEL,
                   NULL                      PRICING_ATTRIBUTE_TYPE,
                   NULL                      PRICING_OPERATOR_TYPE,
                   QPLAT_Q.CONTEXT           QUALIFIER_ATTRIBUTE_CONTEXT,
                   QPLAT_Q.ATTRIBUTE         QUALIFIER_ATTRIBUTE,
                   QPLAT_Q.VALUE_FROM        QUALIFIER_ATTR_VALUE_FROM,
                   QPLAT_Q.PRICING_ATTR_FLAG QUALIFIER_PRICING_ATTR_FLAG,
                   QPQ.QUALIFIER_GROUPING_NO QUALIFIER_GROUPING_NO,
                   QPQ.QUALIFIER_PRECEDENCE  QUALIFIER_PRECEDENCE,
                   QPQ.QUALIFIER_DATATYPE    QUALIFIER_DATATYPE,
                   QPQ.QUALIFIER_ATTR_VALUE     SETUP_VALUE_FROM,
                   QPQ.QUALIFIER_ATTR_VALUE_TO  SETUP_VALUE_TO,
                   QPQ.COMPARISON_OPERATOR_CODE QUALIFIER_OPERATOR_TYPE,
                   NULL                         PRICING_ATTRIBUTE_DATATYPE,
                   decode(QPQ.list_line_id, -1, 'HQ', 'LQ') QUALIFIER_TYPE
                  ,QPL.BREAK_UOM_CODE /* Proration */
                  ,QPL.BREAK_UOM_CONTEXT /* Proration */
                  ,QPL.BREAK_UOM_ATTRIBUTE /* Proration */
                  ,QPLAT_Q.DERIVED_QUALIFIER_FLAG  -- Added for TCA
                  ,QPL.PRICE_BREAK_TYPE_CODE --[julin] for price book
   FROM
         qp_npreq_lines_tmp QPLINES,
         QP_QUALIFIERS QPQ,
         qp_npreq_line_attrs_tmp QPLAT_Q,
	 qp_npreq_line_attrs_tmp QPLAT_PROD,
         QP_PRICING_ATTRIBUTES QPA,
         QP_LIST_LINES QPL,
         QP_LIST_HEADERS_B QPH,
         --QP_PRICE_REQ_SOURCES QPRS
         QP_PRICE_REQ_SOURCES_V QPRS /* yangli */
   WHERE QPA.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   QPA.QUALIFICATION_IND = QP_PREQ_GRP.G_YES_PROD_HDR_QUAL_IND
   AND   QPLAT_PROD.CONTEXT = QPA.PRODUCT_ATTRIBUTE_CONTEXT
   AND   (QPLINES.PRICE_FLAG = G_YES
          OR
         (QPLINES.PRICE_FLAG = G_PHASE
          AND
          P_FREEZE_OVERRIDE_FLAG = G_YES))
   AND   QPLINES.LIST_PRICE_OVERRIDE_FLAG IN ('N', 'O') --po integration
   AND   QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL
   AND   QPLINES.VALIDATED_FLAG = G_NO
   AND   QPLINES.QUALIFIERS_EXIST_FLAG = G_YES
   --AND   QPLINES.PRICING_ATTRS_EXIST_FLAG = G_NO
   AND   QPLAT_PROD.ATTRIBUTE = QPA.PRODUCT_ATTRIBUTE
   AND   QPLAT_PROD.VALUE_FROM = QPA.PRODUCT_ATTR_VALUE
   AND   QPA.EXCLUDER_FLAG = G_NO
   AND   QPL.LIST_HEADER_ID = QPH.LIST_HEADER_ID
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--   AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
   --AND   QPL.QUALIFICATION_IND = QP_PREQ_GRP.G_YES_PROD_HDR_QUAL_IND
   AND   QPA.LIST_LINE_ID = QPL.LIST_LINE_ID
   AND   QPA.LIST_HEADER_ID = QPLINES.PRICE_LIST_HEADER_ID
   AND    QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPH.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPH.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPL.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPL.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPH.CURRENCY_CODE = QPLINES.CURRENCY_CODE
   --AND   (QPL.MODIFIER_LEVEL_CODE = QPLINES.LINE_TYPE_CODE
   --       OR
   --       QPL.MODIFIER_LEVEL_CODE = G_LINE_GROUP AND QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL)
   AND   QPH.SOURCE_SYSTEM_CODE = QPRS.SOURCE_SYSTEM_CODE
   AND   QPLINES.REQUEST_TYPE_CODE   = QPRS.REQUEST_TYPE_CODE
   AND   QPH.ACTIVE_FLAG = G_YES
   AND   QPLAT_PROD.ATTRIBUTE_TYPE = G_PRODUCT_TYPE
   AND   QPLAT_Q.ATTRIBUTE_TYPE    = G_QUALIFIER_TYPE
-- 3594459, context and attribute OR'd together
   AND   (QPQ.QUALIFIER_CONTEXT <> G_LIST_HEADER_CONTEXT
          OR QPQ.QUALIFIER_ATTRIBUTE <> G_PRICELIST_ATTRIBUTE)
   AND   QPLAT_Q.CONTEXT       = QPQ.QUALIFIER_CONTEXT
   AND   QPLAT_Q.ATTRIBUTE     = QPQ.QUALIFIER_ATTRIBUTE
   AND   QPQ.LIST_HEADER_ID    = QPLINES.PRICE_LIST_HEADER_ID
   AND   QPQ.ACTIVE_FLAG = G_YES
   AND   ((QPLAT_Q.VALUE_FROM   = QPQ.QUALIFIER_ATTR_VALUE --bug#1761272 Multiple NOT =
                AND QPQ.COMPARISON_OPERATOR_CODE = '=')
           OR (QPLAT_Q.VALUE_FROM  <> QPQ.QUALIFIER_ATTR_VALUE
                AND QPQ.COMPARISON_OPERATOR_CODE = 'NOT =')
           OR
          QPQ.COMPARISON_OPERATOR_CODE = G_OPERATOR_BETWEEN)
   AND   QPLAT_Q.LINE_INDEX  =   QPLINES.LINE_INDEX
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
         NVL(QPQ.START_DATE_ACTIVE, QPLINES.PRICING_EFFECTIVE_DATE)
         AND NVL(QPQ.END_DATE_ACTIVE,QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPLAT_PROD.LINE_INDEX = QPLAT_Q.LINE_INDEX
   --AND   QPL.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   QPLAT_PROD.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND   QPLAT_Q. PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
   AND ((nvl(QPLAT_Q.DERIVED_QUALIFIER_FLAG,'N')='N')
          OR (QPLAT_Q.DERIVED_QUALIFIER_FLAG = 'Y' AND QPQ.QUALIFY_HIER_DESCENDENTS_FLAG = 'Y')) -- Added for TCA
UNION ALL
 SELECT /*+ ORDERED USE_NL(QPLINES QPQ QPLAT_Q QPLAT_PROD QPA QPLAT_PRIC QPL QPH) INDEX(QPQ QP_QUALIFIERS_N1) INDEX(QPLAT_Q qp_preq_line_attrs_tmp_N2)
 INDEX(QPA QP_PRICING_ATTRIBUTES_N5) INDEX(QPLAT_PRIC qp_preq_line_attrs_tmp_N2) dynamic_sampling(1) l_list_qual_cur */
                   QPLAT_PROD.LINE_INDEX,
                   QPL.LIST_LINE_ID,
                   QPL.ARITHMETIC_OPERATOR,
                   QPL.OPERAND,
                   QPL.PRICING_GROUP_SEQUENCE,
                   QPL.LIST_LINE_TYPE_CODE,
                   QPL.PRICING_PHASE_ID,
                   QPL.AUTOMATIC_FLAG,
                   QPL.INCOMPATIBILITY_GRP_CODE,
                   QPL.PRICE_BY_FORMULA_ID,
                   QPL.PRODUCT_PRECEDENCE,
                   QPL.PRIMARY_UOM_FLAG,
                   QPL.MODIFIER_LEVEL_CODE,
                   QPL.LIST_LINE_NO,
                   QPA.PRODUCT_UOM_CODE,
                   QPA.EXCLUDER_FLAG,
                   QPH.LIST_TYPE_CODE,
                   QPH.ROUNDING_FACTOR,
                   QPH.LIST_HEADER_ID         LIST_HEADER_ID,
                   QPLAT_PROD.CONTEXT         PRODUCT_ATTRIBUTE_CONTEXT,
                   QPLAT_PROD.ATTRIBUTE       PRODUCT_ATTRIBUTE,
                   QPLAT_PROD.VALUE_FROM      PRODUCT_ATTR_VALUE_FROM,
                   QPLAT_PROD.ATTRIBUTE_LEVEL PRODUCT_ATTRIBUTE_LEVEL,
                   QPLAT_PROD.ATTRIBUTE_TYPE  PRODUCT_ATTRIBUTE_TYPE,
                   QPLAT_PROD.APPLIED_FLAG,
                   QPLAT_PRIC.CONTEXT              PRICING_ATTRIBUTE_CONTEXT,
                   QPLAT_PRIC.ATTRIBUTE            PRICING_ATTRIBUTE,
                   QPLAT_PRIC.VALUE_FROM           PRICING_ATTR_VALUE_FROM,
                   QPA.PRICING_ATTR_VALUE_FROM     PRICING_SETUP_VALUE_FROM,
                   QPA.PRICING_ATTR_VALUE_TO       PRICING_SETUP_VALUE_TO,
                   QPLAT_PRIC.ATTRIBUTE_LEVEL      PRICING_ATTRIBUTE_LEVEL,
                   QPLAT_PRIC.ATTRIBUTE_TYPE       PRICING_ATTRIBUTE_TYPE,
                   QPA.COMPARISON_OPERATOR_CODE    PRICING_OPERATOR_TYPE,
                   QPLAT_Q.CONTEXT           QUALIFIER_ATTRIBUTE_CONTEXT,
                   QPLAT_Q.ATTRIBUTE         QUALIFIER_ATTRIBUTE,
                   QPLAT_Q.VALUE_FROM        QUALIFIER_ATTR_VALUE_FROM,
                   QPLAT_Q.PRICING_ATTR_FLAG QUALIFIER_PRICING_ATTR_FLAG,
                   QPQ.QUALIFIER_GROUPING_NO QUALIFIER_GROUPING_NO,
                   QPQ.QUALIFIER_PRECEDENCE  QUALIFIER_PRECEDENCE,
                   QPQ.QUALIFIER_DATATYPE    QUALIFIER_DATATYPE,
                   QPQ.QUALIFIER_ATTR_VALUE     SETUP_VALUE_FROM,
                   QPQ.QUALIFIER_ATTR_VALUE_TO  SETUP_VALUE_TO,
                   QPQ.COMPARISON_OPERATOR_CODE QUALIFIER_OPERATOR_TYPE,
                   QPA.PRICING_ATTRIBUTE_DATATYPE   PRICING_ATTRIBUTE_DATATYPE,
                   decode(QPQ.list_line_id, -1, 'HQ', 'LQ') QUALIFIER_TYPE
                  ,QPL.BREAK_UOM_CODE /* Proration */
                  ,QPL.BREAK_UOM_CONTEXT /* Proration */
                  ,QPL.BREAK_UOM_ATTRIBUTE /* Proration */
                  ,QPLAT_Q.DERIVED_QUALIFIER_FLAG  -- Added for TCA
                  ,QPL.PRICE_BREAK_TYPE_CODE --[julin] for price book
   FROM
         qp_npreq_lines_tmp QPLINES,
         QP_QUALIFIERS QPQ,
         qp_npreq_line_attrs_tmp QPLAT_Q,
	 qp_npreq_line_attrs_tmp QPLAT_PROD,
         QP_PRICING_ATTRIBUTES QPA,
         qp_npreq_line_attrs_tmp QPLAT_PRIC,
         QP_LIST_LINES QPL,
         QP_LIST_HEADERS_B QPH,
         --QP_PRICE_REQ_SOURCES QPRS
         QP_PRICE_REQ_SOURCES_V QPRS /* yangli */
   WHERE QPA.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   QPA.QUALIFICATION_IND = QP_PREQ_GRP.G_YES_PROD_PRIC_HDR_QUAL_IND
   AND   QPLAT_PROD.CONTEXT = QPA.PRODUCT_ATTRIBUTE_CONTEXT
   AND   (QPLINES.PRICE_FLAG = G_YES
          OR
         (QPLINES.PRICE_FLAG = G_PHASE
          AND
          P_FREEZE_OVERRIDE_FLAG = G_YES))
   AND   QPLINES.LIST_PRICE_OVERRIDE_FLAG IN ('N', 'O') --po integration
   AND   QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL
   AND   QPLINES.VALIDATED_FLAG = G_NO
   AND   QPLINES.QUALIFIERS_EXIST_FLAG = G_YES
   AND   QPLINES.PRICING_ATTRS_EXIST_FLAG = G_YES
   AND   QPLAT_PROD.ATTRIBUTE = QPA.PRODUCT_ATTRIBUTE
   AND   QPLAT_PROD.VALUE_FROM = QPA.PRODUCT_ATTR_VALUE
   AND   QPA.EXCLUDER_FLAG = G_NO
   --AND   QPA.PRICING_ATTRIBUTE_CONTEXT IS NOT NULL
   AND    QPLAT_PRIC.CONTEXT = QPA.PRICING_ATTRIBUTE_CONTEXT
          AND QPLAT_PRIC.ATTRIBUTE = QPA.PRICING_ATTRIBUTE
          AND (QPLAT_PRIC.VALUE_FROM = QPA.PRICING_ATTR_VALUE_FROM
               OR
               QPA.COMPARISON_OPERATOR_CODE IN ('NOT =', G_OPERATOR_BETWEEN))
          AND QPLAT_PRIC.ATTRIBUTE_TYPE = G_PRICING_TYPE
          AND QPLAT_PRIC. PRICING_STATUS_CODE = G_STATUS_UNCHANGED
          AND QPLAT_PRIC.LINE_INDEX = QPLAT_PROD.LINE_INDEX
   AND   QPH.LIST_HEADER_ID = QPL.LIST_HEADER_ID
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--   AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
   --AND   QPL.QUALIFICATION_IND = QP_PREQ_GRP.G_YES_PROD_PRIC_HDR_QUAL_IND
   AND   QPA.LIST_LINE_ID = QPL.LIST_LINE_ID
   AND   QPA.LIST_HEADER_ID = QPLINES.PRICE_LIST_HEADER_ID
   AND    QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPH.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPH.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPL.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPL.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPH.CURRENCY_CODE = QPLINES.CURRENCY_CODE
   --AND   (QPL.MODIFIER_LEVEL_CODE = QPLINES.LINE_TYPE_CODE
   --       OR
   --       QPL.MODIFIER_LEVEL_CODE = G_LINE_GROUP AND QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL)
   AND   QPH.SOURCE_SYSTEM_CODE = QPRS.SOURCE_SYSTEM_CODE
   AND   QPLINES.REQUEST_TYPE_CODE   = QPRS.REQUEST_TYPE_CODE
   AND   QPH.ACTIVE_FLAG = G_YES
   AND   QPLAT_PROD.ATTRIBUTE_TYPE = G_PRODUCT_TYPE
   AND   QPLAT_Q.ATTRIBUTE_TYPE    = G_QUALIFIER_TYPE
-- 3594459, context and attribute OR'd together
   AND   (QPQ.QUALIFIER_CONTEXT <> G_LIST_HEADER_CONTEXT
          OR QPQ.QUALIFIER_ATTRIBUTE <> G_PRICELIST_ATTRIBUTE)
   AND   QPLAT_Q.CONTEXT       = QPQ.QUALIFIER_CONTEXT
   AND   QPLAT_Q.ATTRIBUTE     = QPQ.QUALIFIER_ATTRIBUTE
   AND   QPQ.LIST_HEADER_ID    = QPLINES.PRICE_LIST_HEADER_ID
   AND   QPQ.ACTIVE_FLAG = G_YES
   AND   ((QPLAT_Q.VALUE_FROM   = QPQ.QUALIFIER_ATTR_VALUE --bug#1761272 Multiple NOT =
                AND QPQ.COMPARISON_OPERATOR_CODE = '=')
           OR (QPLAT_Q.VALUE_FROM  <> QPQ.QUALIFIER_ATTR_VALUE
                AND QPQ.COMPARISON_OPERATOR_CODE = 'NOT =')
           OR
          QPQ.COMPARISON_OPERATOR_CODE = G_OPERATOR_BETWEEN)
   AND   QPLAT_Q.LINE_INDEX  =   QPLINES.LINE_INDEX
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
            NVL(QPQ.START_DATE_ACTIVE, QPLINES.PRICING_EFFECTIVE_DATE)
   AND     NVL(QPQ.END_DATE_ACTIVE,QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPLAT_PROD.LINE_INDEX = QPLINES.LINE_INDEX
   --AND   QPL.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   QPLAT_PROD.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND   QPLAT_Q.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
   AND ((nvl(QPLAT_Q.DERIVED_QUALIFIER_FLAG,'N')='N')
          OR (QPLAT_Q.DERIVED_QUALIFIER_FLAG = 'Y' AND QPQ.QUALIFY_HIER_DESCENDENTS_FLAG = 'Y')) -- Added for TCA
   UNION ALL
   SELECT /*+ ORDERED USE_NL(QPLINES QPLAT_PROD QPA QPL QPH) index(QPA QP_PRICING_ATTRIBUTES_N5) dynamic_sampling(1) l_list_cur */
                   QPLAT_PROD.LINE_INDEX,
                   QPL.LIST_LINE_ID,
                   QPL.ARITHMETIC_OPERATOR,
                   QPL.OPERAND,
                   QPL.PRICING_GROUP_SEQUENCE,
                   QPL.LIST_LINE_TYPE_CODE,
                   QPL.PRICING_PHASE_ID,
                   QPL.AUTOMATIC_FLAG,
                   QPL.INCOMPATIBILITY_GRP_CODE,
                   QPL.PRICE_BY_FORMULA_ID,
                   QPL.PRODUCT_PRECEDENCE,
                   QPL.PRIMARY_UOM_FLAG,
                   QPL.MODIFIER_LEVEL_CODE,
                   QPL.LIST_LINE_NO,
                   QPA.PRODUCT_UOM_CODE,
                   QPA.EXCLUDER_FLAG,
                   QPH.LIST_TYPE_CODE,
                   QPH.ROUNDING_FACTOR,
                   QPH.LIST_HEADER_ID           LIST_HEADER_ID,
                   QPLAT_PROD.CONTEXT         PRODUCT_ATTRIBUTE_CONTEXT,
                   QPLAT_PROD.ATTRIBUTE       PRODUCT_ATTRIBUTE,
                   QPLAT_PROD.VALUE_FROM      PRODUCT_ATTR_VALUE_FROM,
                   QPLAT_PROD.ATTRIBUTE_LEVEL PRODUCT_ATTRIBUTE_LEVEL,
                   QPLAT_PROD.ATTRIBUTE_TYPE  PRODUCT_ATTRIBUTE_TYPE,
                   QPLAT_PROD.APPLIED_FLAG,
                   NULL                      PRICING_ATTRIBUTE_CONTEXT,
                   NULL                      PRICING_ATTRIBUTE,
                   NULL                      PRICING_ATTR_VALUE_FROM,
                   NULL                      PRICING_SETUP_VALUE_FROM,
                   NULL                      PRICING_SETUP_VALUE_TO,
                   NULL                      PRICING_ATTRIBUTE_LEVEL,
                   NULL                      PRICING_ATTRIBUTE_TYPE,
                   NULL                      PRICING_OPERATOR_TYPE,
                   NULL                      QUALIFIER_ATTRIBUTE_CONTEXT,
                   NULL                      QUALIFIER_ATTRIBUTE,
                   NULL                      QUALIFIER_ATTR_VALUE_FROM,
                   NULL                      QUALIFIER_PRICING_ATTR_FLAG,
                   -9999                     QUALIFIER_GROUPING_NO,
                   5000                      QUALIFIER_PRECEDENCE,
                   NULL                      QUALIFIER_DATATYPE,
                   NULL                      SETUP_VALUE_FROM,
                   NULL                      SETUP_VALUE_TO,
                   NULL                      QUALIFIER_OPERATOR_TYPE,
                   NULL                      PRICING_ATTRIBUTE_DATATYPE,
                   NULL                      QUALIFIER_TYPE
                  ,QPL.BREAK_UOM_CODE /* Proration */
                  ,QPL.BREAK_UOM_CONTEXT /* Proration */
                  ,QPL.BREAK_UOM_ATTRIBUTE /* Proration */
                  ,qplat_prod.DERIVED_QUALIFIER_FLAG  -- Added for TCA
                  ,QPL.PRICE_BREAK_TYPE_CODE --[julin] for price book
   FROM
         qp_npreq_lines_tmp QPLINES,
         qp_npreq_line_attrs_tmp qplat_prod,
         QP_PRICING_ATTRIBUTES QPA,
         QP_LIST_LINES QPL,
         QP_LIST_HEADERS_B QPH,
         --QP_PRICE_REQ_SOURCES qprs
         QP_PRICE_REQ_SOURCES_V qprs /* yangli */
   WHERE QPA.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   QPA.QUALIFICATION_IND = QP_PREQ_GRP.G_YES_PROD_IND
   AND   QPLAT_PROD.CONTEXT = QPA.PRODUCT_ATTRIBUTE_CONTEXT
   AND   (QPLINES.PRICE_FLAG = G_YES
          OR
         (QPLINES.PRICE_FLAG = G_PHASE
          AND
          P_FREEZE_OVERRIDE_FLAG = G_YES))
   AND   QPLINES.LIST_PRICE_OVERRIDE_FLAG IN ('N', 'O') --po integration
   AND   QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL
   AND   QPLINES.VALIDATED_FLAG = G_NO
   AND   QPLINES.QUALIFIERS_EXIST_FLAG = G_NO
   --AND   QPLINES.PRICING_ATTRS_EXIST_FLAG = G_NO
   AND   QPLAT_PROD.ATTRIBUTE = QPA.PRODUCT_ATTRIBUTE
   AND   QPLAT_PROD.VALUE_FROM = QPA.PRODUCT_ATTR_VALUE
   AND   QPA.EXCLUDER_FLAG = G_NO
   AND   QPLAT_PROD.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND   QPH.LIST_HEADER_ID = QPL.LIST_HEADER_ID
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--   AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
   AND   QPA.LIST_LINE_ID = QPL.LIST_LINE_ID
   AND   QPA.LIST_HEADER_ID = QPLINES.PRICE_LIST_HEADER_ID
   AND    QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPH.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPH.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND    QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPL.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPL.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPH.CURRENCY_CODE = QPLINES.CURRENCY_CODE
   --AND   (QPL.MODIFIER_LEVEL_CODE = QPLINES.LINE_TYPE_CODE
   --       OR
   --       QPL.MODIFIER_LEVEL_CODE = G_LINE_GROUP AND QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL)
   AND   QPH.SOURCE_SYSTEM_CODE = QPRS.SOURCE_SYSTEM_CODE
   AND   QPLINES.REQUEST_TYPE_CODE   = QPRS.REQUEST_TYPE_CODE
   AND   QPH.ACTIVE_FLAG = G_YES
   AND   QPLAT_PROD.ATTRIBUTE_TYPE = G_PRODUCT_TYPE
   AND   QPLAT_PROD.LINE_INDEX = QPLINES.LINE_INDEX
   --AND   QPL.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
UNION ALL
SELECT /*+ ORDERED USE_NL(QPLINES QPLAT_PROD QPA QPLAT_PRIC QPL QPH) index(QPA QP_PRICING_ATTRIBUTES_N5) INDEX(QPLAT_PRIC qp_preq_line_attrs_tmp_N2) dynamic_sampling(1) l_list_cur */
                   QPLAT_PROD.LINE_INDEX,
                   QPL.LIST_LINE_ID,
                   QPL.ARITHMETIC_OPERATOR,
                   QPL.OPERAND,
                   QPL.PRICING_GROUP_SEQUENCE,
                   QPL.LIST_LINE_TYPE_CODE,
                   QPL.PRICING_PHASE_ID,
                   QPL.AUTOMATIC_FLAG,
                   QPL.INCOMPATIBILITY_GRP_CODE,
                   QPL.PRICE_BY_FORMULA_ID,
                   QPL.PRODUCT_PRECEDENCE,
                   QPL.PRIMARY_UOM_FLAG,
                   QPL.MODIFIER_LEVEL_CODE,
                   QPL.LIST_LINE_NO,
                   QPA.PRODUCT_UOM_CODE,
                   QPA.EXCLUDER_FLAG,
                   QPH.LIST_TYPE_CODE,
                   QPH.ROUNDING_FACTOR,
                   QPH.LIST_HEADER_ID           LIST_HEADER_ID,
                   QPLAT_PROD.CONTEXT         PRODUCT_ATTRIBUTE_CONTEXT,
                   QPLAT_PROD.ATTRIBUTE       PRODUCT_ATTRIBUTE,
                   QPLAT_PROD.VALUE_FROM      PRODUCT_ATTR_VALUE_FROM,
                   QPLAT_PROD.ATTRIBUTE_LEVEL PRODUCT_ATTRIBUTE_LEVEL,
                   QPLAT_PROD.ATTRIBUTE_TYPE  PRODUCT_ATTRIBUTE_TYPE,
                   QPLAT_PROD.APPLIED_FLAG,
                   QPLAT_PRIC.CONTEXT              PRICING_ATTRIBUTE_CONTEXT,
                   QPLAT_PRIC.ATTRIBUTE            PRICING_ATTRIBUTE,
                   QPLAT_PRIC.VALUE_FROM           PRICING_ATTR_VALUE_FROM,
                   QPA.PRICING_ATTR_VALUE_FROM     PRICING_SETUP_VALUE_FROM,
                   QPA.PRICING_ATTR_VALUE_TO       PRICING_SETUP_VALUE_TO,
                   QPLAT_PRIC.ATTRIBUTE_LEVEL      PRICING_ATTRIBUTE_LEVEL,
                   QPLAT_PRIC.ATTRIBUTE_TYPE       PRICING_ATTRIBUTE_TYPE,
                   QPA.COMPARISON_OPERATOR_CODE    PRICING_OPERATOR_TYPE,
                   NULL                      QUALIFIER_ATTRIBUTE_CONTEXT,
                   NULL                      QUALIFIER_ATTRIBUTE,
                   NULL                      QUALIFIER_ATTR_VALUE_FROM,
                   NULL                      QUALIFIER_PRICING_ATTR_FLAG,
                   -9999                     QUALIFIER_GROUPING_NO,
                   5000                      QUALIFIER_PRECEDENCE,
                   NULL                      QUALIFIER_DATATYPE,
                   NULL                      SETUP_VALUE_FROM,
                   NULL                      SETUP_VALUE_TO,
                   NULL                      QUALIFIER_OPERATOR_TYPE,
                   QPA.PRICING_ATTRIBUTE_DATATYPE   PRICING_ATTRIBUTE_DATATYPE,
                   NULL                      QUALIFIER_TYPE
                  ,QPL.BREAK_UOM_CODE /* Proration */
                  ,QPL.BREAK_UOM_CONTEXT /* Proration */
                  ,QPL.BREAK_UOM_ATTRIBUTE /* Proration */
                  ,qplat_pric.DERIVED_QUALIFIER_FLAG  -- Added for TCA
                  ,QPL.PRICE_BREAK_TYPE_CODE --[julin] for price book
   FROM
         qp_npreq_lines_tmp qplines,
         qp_npreq_line_attrs_tmp qplat_prod,
         QP_PRICING_ATTRIBUTES qpa,
         qp_npreq_line_attrs_tmp qplat_pric,
         QP_LIST_LINES qpl,
         QP_LIST_HEADERS_B qph,
         --QP_PRICE_REQ_SOURCES qprs
         QP_PRICE_REQ_SOURCES_V qprs /* yangli */
   WHERE QPA.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   QPA.QUALIFICATION_IND = QP_PREQ_GRP.G_YES_PROD_PRIC_IND
   AND   QPLAT_PROD.CONTEXT = QPA.PRODUCT_ATTRIBUTE_CONTEXT
   AND   (QPLINES.PRICE_FLAG = G_YES
          OR
         (QPLINES.PRICE_FLAG = G_PHASE
          AND
          P_FREEZE_OVERRIDE_FLAG = G_YES))
   AND   QPLINES.LIST_PRICE_OVERRIDE_FLAG IN ('N', 'O') --po integration
   AND   QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL
   AND   QPLINES.VALIDATED_FLAG = G_NO
   AND   QPLINES.QUALIFIERS_EXIST_FLAG = G_NO
   AND   QPLINES.PRICING_ATTRS_EXIST_FLAG = G_YES
   AND   QPLAT_PROD.ATTRIBUTE = QPA.PRODUCT_ATTRIBUTE
   AND   QPLAT_PROD.VALUE_FROM = QPA.PRODUCT_ATTR_VALUE
   AND   QPA.EXCLUDER_FLAG = G_NO
   AND   QPLAT_PROD.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND   QPLAT_PRIC.CONTEXT = QPA.PRICING_ATTRIBUTE_CONTEXT
   AND   QPLAT_PRIC.ATTRIBUTE = QPA.PRICING_ATTRIBUTE
   AND   (QPLAT_PRIC.VALUE_FROM = QPA.PRICING_ATTR_VALUE_FROM
          OR
          QPA.COMPARISON_OPERATOR_CODE IN ('NOT =', G_OPERATOR_BETWEEN))
   AND   QPLAT_PRIC.ATTRIBUTE_TYPE = G_PRICING_TYPE
   AND   QPLAT_PRIC. PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND   QPLAT_PRIC.LINE_INDEX = QPLAT_PROD.LINE_INDEX
   AND   QPH.LIST_HEADER_ID = QPLINES.PRICE_LIST_HEADER_ID
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--   AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
   AND   QPA.LIST_LINE_ID = QPL.LIST_LINE_ID
   AND   QPA.LIST_HEADER_ID = QPLINES.PRICE_LIST_HEADER_ID
   AND    QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPH.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPH.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPL.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPL.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPH.CURRENCY_CODE = QPLINES.CURRENCY_CODE
   --AND   (QPL.MODIFIER_LEVEL_CODE = QPLINES.LINE_TYPE_CODE
   --       OR
   --       QPL.MODIFIER_LEVEL_CODE = G_LINE_GROUP AND QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL)
   AND   QPH.SOURCE_SYSTEM_CODE = QPRS.SOURCE_SYSTEM_CODE
   AND   QPLINES.REQUEST_TYPE_CODE   = QPRS.REQUEST_TYPE_CODE
   AND   QPH.ACTIVE_FLAG = G_YES
   AND   QPLAT_PROD.ATTRIBUTE_TYPE = G_PRODUCT_TYPE
   AND   QPLAT_PROD.LINE_INDEX = QPLINES.LINE_INDEX
   --AND   QPL.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
   ORDER BY 1,2;

-- vivek
CURSOR L_LIST_QUAL_CUR_CURRENCY  IS
SELECT /*+ ORDERED USE_NL(QPQ QPLAT_Q QPLAT_PROD QPA QPL QPH) INDEX(QPQ QP_QUALIFIERS_N1) INDEX(QPLAT_Q qp_preq_line_attrs_tmp_N2) l_list_qual_cur */
                   QPLAT_PROD.LINE_INDEX,
                   QPL.LIST_LINE_ID,
                   QPL.ARITHMETIC_OPERATOR,
                   QPL.OPERAND,
                   QPL.PRICING_GROUP_SEQUENCE,
                   QPL.LIST_LINE_TYPE_CODE,
                   QPL.PRICING_PHASE_ID,
                   QPL.AUTOMATIC_FLAG,
                   QPL.INCOMPATIBILITY_GRP_CODE,
                   QPL.PRICE_BY_FORMULA_ID,
                   QPL.PRODUCT_PRECEDENCE,
                   QPL.PRIMARY_UOM_FLAG,
                   QPL.MODIFIER_LEVEL_CODE,
                   QPL.LIST_LINE_NO,
                   QPA.PRODUCT_UOM_CODE,
                   QPA.EXCLUDER_FLAG,
                   QPH.LIST_TYPE_CODE,
   /* vivek        QPH.ROUNDING_FACTOR,  */
                   QCDT.ROUNDING_FACTOR, /* vivek */
                   QPH.LIST_HEADER_ID           LIST_HEADER_ID,
                   QPLAT_PROD.CONTEXT         PRODUCT_ATTRIBUTE_CONTEXT,
                   QPLAT_PROD.ATTRIBUTE       PRODUCT_ATTRIBUTE,
                   QPLAT_PROD.VALUE_FROM      PRODUCT_ATTR_VALUE_FROM,
                   QPLAT_PROD.ATTRIBUTE_LEVEL PRODUCT_ATTRIBUTE_LEVEL,
                   QPLAT_PROD.ATTRIBUTE_TYPE  PRODUCT_ATTRIBUTE_TYPE,
                   QPLAT_PROD.APPLIED_FLAG,
                   NULL                      PRICING_ATTRIBUTE_CONTEXT,
                   NULL                      PRICING_ATTRIBUTE,
                   NULL                      PRICING_ATTR_VALUE_FROM,
                   NULL                      PRICING_SETUP_VALUE_FROM,
                   NULL                      PRICING_SETUP_VALUE_TO,
                   NULL                      PRICING_ATTRIBUTE_LEVEL,
                   NULL                      PRICING_ATTRIBUTE_TYPE,
                   NULL                      PRICING_OPERATOR_TYPE,
                   QPLAT_Q.CONTEXT           QUALIFIER_ATTRIBUTE_CONTEXT,
                   QPLAT_Q.ATTRIBUTE         QUALIFIER_ATTRIBUTE,
                   QPLAT_Q.VALUE_FROM        QUALIFIER_ATTR_VALUE_FROM,
                   QPLAT_Q.PRICING_ATTR_FLAG QUALIFIER_PRICING_ATTR_FLAG,
                   QPQ.QUALIFIER_GROUPING_NO QUALIFIER_GROUPING_NO,
                   QPQ.QUALIFIER_PRECEDENCE  QUALIFIER_PRECEDENCE,
                   QPQ.QUALIFIER_DATATYPE    QUALIFIER_DATATYPE,
                   QPQ.QUALIFIER_ATTR_VALUE     SETUP_VALUE_FROM,
                   QPQ.QUALIFIER_ATTR_VALUE_TO  SETUP_VALUE_TO,
                   QPQ.COMPARISON_OPERATOR_CODE QUALIFIER_OPERATOR_TYPE,
                   NULL                         PRICING_ATTRIBUTE_DATATYPE,
                   decode(QPQ.list_line_id, -1, 'HQ', 'LQ') QUALIFIER_TYPE,
                   QCDT.CURRENCY_DETAIL_ID,  /* sunilpandey */
                   QCDT.CURRENCY_HEADER_ID,  /* vivek */
                   QCDT.SELLING_ROUNDING_FACTOR,  /* vivek */
                   QPLINES.CURRENCY_CODE   ORDER_CURRENCY,  /* vivek */
                   QPLINES.PRICING_EFFECTIVE_DATE,  /* vivek */
                   QPH.CURRENCY_CODE   BASE_CURRENCY_CODE  /* vivek */
                  ,QPL.BREAK_UOM_CODE /* Proration */
                  ,QPL.BREAK_UOM_CONTEXT /* Proration */
                  ,QPL.BREAK_UOM_ATTRIBUTE /* Proration */
                  ,QPLAT_Q.DERIVED_QUALIFIER_FLAG  -- Added for TCA
                  ,QPL.PRICE_BREAK_TYPE_CODE --[julin] for price book
   FROM
         qp_npreq_lines_tmp QPLINES,
         QP_QUALIFIERS QPQ,
         qp_npreq_line_attrs_tmp QPLAT_Q,
	 qp_npreq_line_attrs_tmp QPLAT_PROD,
         QP_PRICING_ATTRIBUTES QPA,
         QP_LIST_LINES QPL,
         QP_LIST_HEADERS_B QPH,
         --QP_PRICE_REQ_SOURCES QPRS,
         QP_PRICE_REQ_SOURCES_V QPRS, /* yangli */
         QP_CURRENCY_DETAILS QCDT   /* Vivek */
   WHERE QPA.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   QPA.QUALIFICATION_IND = QP_PREQ_GRP.G_YES_PROD_HDR_QUAL_IND
   AND   QPLAT_PROD.CONTEXT = QPA.PRODUCT_ATTRIBUTE_CONTEXT
   AND   (QPLINES.PRICE_FLAG = G_YES
          OR
         (QPLINES.PRICE_FLAG = G_PHASE
          AND
          P_FREEZE_OVERRIDE_FLAG = G_YES))
   AND   QPLINES.LIST_PRICE_OVERRIDE_FLAG IN ('N', 'O') --po integration
   AND   QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL
   AND   QPLINES.VALIDATED_FLAG = G_NO
   AND   QPLINES.QUALIFIERS_EXIST_FLAG = G_YES
   --AND   QPLINES.PRICING_ATTRS_EXIST_FLAG = G_NO
   AND   QPLAT_PROD.ATTRIBUTE = QPA.PRODUCT_ATTRIBUTE
   AND   QPLAT_PROD.VALUE_FROM = QPA.PRODUCT_ATTR_VALUE
   AND   QPA.EXCLUDER_FLAG = G_NO
   AND   QPL.LIST_HEADER_ID = QPH.LIST_HEADER_ID
   AND   QPA.LIST_LINE_ID = QPL.LIST_LINE_ID
   AND   QPA.LIST_HEADER_ID = QPLINES.PRICE_LIST_HEADER_ID
   AND    QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPH.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPH.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPL.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPL.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
/* Vivek    AND   QPH.CURRENCY_CODE = QPLINES.CURRENCY_CODE  */
            AND QPH.CURRENCY_HEADER_ID = QCDT.CURRENCY_HEADER_ID /* Vivek */
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--            AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
            AND QPLINES.CURRENCY_CODE = QCDT.TO_CURRENCY_CODE  /* Vivek */
            AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                NVL(TRUNC(QCDT.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                AND NVL(TRUNC(QCDT.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
   AND (   /* Vivek */
        (qcdt.curr_attribute_context is null   /* Vivek */
         and not exists   /* Vivek */
             (select /*+ ORDERED use_nl(qcdt1) index(pa_tmp QP_PREQ_LINE_ATTRS_TMP_N1) */ 'x'   --[julin/5139512/4744915]
	       from qp_npreq_line_attrs_tmp pa_tmp,   qp_currency_details qcdt1 /* Vivek */
               where qcdt1.curr_attribute_context IS NOT NULL  /* Vivek */
		 and qcdt1.curr_attribute_context = pa_tmp.context   /* Vivek */
                 and qcdt1.curr_attribute = pa_tmp.attribute   /* Vivek */
                 and qcdt1.curr_attribute_value = pa_tmp.value_from   /* Vivek */
                 and qcdt1.curr_attribute_type = pa_tmp.ATTRIBUTE_TYPE   /* Vivek */
                 and qcdt1.to_currency_code = qcdt.to_currency_code   /* Vivek */
                 and qcdt1.currency_header_id = qcdt.currency_header_id   /* Vivek */
                 and pa_tmp.pricing_status_code = G_STATUS_UNCHANGED   /* Vivek */
                 and pa_tmp.line_index = qplines.line_index   /* Vivek */
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                     NVL(TRUNC(QCDT1.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                     AND NVL(TRUNC(QCDT1.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
             )   /* Vivek */
        )   /* Vivek */
        OR   /* Vivek */
        (qcdt.curr_attribute_context is not null   /* Vivek */
         and qcdt.currency_detail_id =   /* Vivek */
             (select qcdt3.currency_detail_id
	       from qp_currency_details qcdt3  /* Vivek */
                 where qcdt3.to_currency_code = qcdt.to_currency_code   /* Vivek */
                 and qcdt3.currency_header_id = qcdt.currency_header_id   /* Vivek */
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                     NVL(TRUNC(QCDT3.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                     AND NVL(TRUNC(QCDT3.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                 and  qcdt3.precedence =
             (select /*+ ORDERED use_nl(qcdt2) index(pa_tmp1 QP_PREQ_LINE_ATTRS_TMP_N1) */ min(qcdt2.precedence) --[julin/5139512/4744915]
	       from qp_npreq_line_attrs_tmp pa_tmp1, qp_currency_details qcdt2  /* Vivek */
               where qcdt2.curr_attribute_context IS NOT NULL   /* Vivek */
		 and qcdt2.curr_attribute_context = pa_tmp1.context   /* Vivek */
                 and qcdt2.curr_attribute = pa_tmp1.attribute   /* Vivek */
                 and qcdt2.curr_attribute_value = pa_tmp1.value_from   /* Vivek */
                 and qcdt2.curr_attribute_type = pa_tmp1.ATTRIBUTE_TYPE   /* Vivek */
                 and qcdt2.to_currency_code = qcdt.to_currency_code   /* Vivek */
                 and qcdt2.currency_header_id = qcdt.currency_header_id   /* Vivek */
                 and pa_tmp1.pricing_status_code = G_STATUS_UNCHANGED   /* Vivek */
                 and pa_tmp1.line_index = qplines.line_index   /* Vivek */
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                     NVL(TRUNC(QCDT2.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                     AND NVL(TRUNC(QCDT2.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
             ))   /* Vivek */
        )   /* Vivek */
       )   /* Vivek */
   --AND   (QPL.MODIFIER_LEVEL_CODE = QPLINES.LINE_TYPE_CODE
   --       OR
   --       QPL.MODIFIER_LEVEL_CODE = G_LINE_GROUP AND QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL)
   AND   QPH.SOURCE_SYSTEM_CODE = QPRS.SOURCE_SYSTEM_CODE
   AND   QPLINES.REQUEST_TYPE_CODE   = QPRS.REQUEST_TYPE_CODE
   AND   QPH.ACTIVE_FLAG = G_YES
   AND   QPLAT_PROD.ATTRIBUTE_TYPE = G_PRODUCT_TYPE
   AND   QPLAT_Q.ATTRIBUTE_TYPE    = G_QUALIFIER_TYPE
-- 3594459, context and attribute OR'd together
   AND   (QPQ.QUALIFIER_CONTEXT <> G_LIST_HEADER_CONTEXT
          OR QPQ.QUALIFIER_ATTRIBUTE <> G_PRICELIST_ATTRIBUTE)
   AND   QPLAT_Q.CONTEXT       = QPQ.QUALIFIER_CONTEXT
   AND   QPLAT_Q.ATTRIBUTE     = QPQ.QUALIFIER_ATTRIBUTE
   AND   QPQ.LIST_HEADER_ID    = QPLINES.PRICE_LIST_HEADER_ID
   AND   QPQ.ACTIVE_FLAG = G_YES
   AND   ((QPLAT_Q.VALUE_FROM   = QPQ.QUALIFIER_ATTR_VALUE --bug#1761272 Multiple NOT =
                AND QPQ.COMPARISON_OPERATOR_CODE = '=')
           OR (QPLAT_Q.VALUE_FROM  <> QPQ.QUALIFIER_ATTR_VALUE
                AND QPQ.COMPARISON_OPERATOR_CODE = 'NOT =')
           OR
          QPQ.COMPARISON_OPERATOR_CODE = G_OPERATOR_BETWEEN)
   AND   QPLAT_Q.LINE_INDEX  =   QPLINES.LINE_INDEX
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
         NVL(QPQ.START_DATE_ACTIVE, QPLINES.PRICING_EFFECTIVE_DATE)
         AND NVL(QPQ.END_DATE_ACTIVE,QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPLAT_PROD.LINE_INDEX = QPLAT_Q.LINE_INDEX
   --AND   QPL.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   QPLAT_PROD.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND   QPLAT_Q. PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
    AND ((nvl(QPLAT_Q.DERIVED_QUALIFIER_FLAG,'N')='N')
          OR (QPLAT_Q.DERIVED_QUALIFIER_FLAG = 'Y' AND QPQ.QUALIFY_HIER_DESCENDENTS_FLAG = 'Y')) -- Added for TCA
UNION ALL
 SELECT /*+ ORDERED USE_NL(QPLINES QPQ QPLAT_Q QPLAT_PROD QPA QPLAT_PRIC QPL QPH) INDEX(QPQ QP_QUALIFIERS_N1) INDEX(QPLAT_Q qp_preq_line_attrs_tmp_N2) INDEX(QPA QP_PRICING_ATTRIBUTES_N5) INDEX(QPLAT_PRIC qp_preq_line_attrs_tmp_N2) l_list_qual_cur */
                   QPLAT_PROD.LINE_INDEX,
                   QPL.LIST_LINE_ID,
                   QPL.ARITHMETIC_OPERATOR,
                   QPL.OPERAND,
                   QPL.PRICING_GROUP_SEQUENCE,
                   QPL.LIST_LINE_TYPE_CODE,
                   QPL.PRICING_PHASE_ID,
                   QPL.AUTOMATIC_FLAG,
                   QPL.INCOMPATIBILITY_GRP_CODE,
                   QPL.PRICE_BY_FORMULA_ID,
                   QPL.PRODUCT_PRECEDENCE,
                   QPL.PRIMARY_UOM_FLAG,
                   QPL.MODIFIER_LEVEL_CODE,
                   QPL.LIST_LINE_NO,
                   QPA.PRODUCT_UOM_CODE,
                   QPA.EXCLUDER_FLAG,
                   QPH.LIST_TYPE_CODE,
   /* vivek        QPH.ROUNDING_FACTOR,  */
                   QCDT.ROUNDING_FACTOR, /* vivek */
                   QPH.LIST_HEADER_ID         LIST_HEADER_ID,
                   QPLAT_PROD.CONTEXT         PRODUCT_ATTRIBUTE_CONTEXT,
                   QPLAT_PROD.ATTRIBUTE       PRODUCT_ATTRIBUTE,
                   QPLAT_PROD.VALUE_FROM      PRODUCT_ATTR_VALUE_FROM,
                   QPLAT_PROD.ATTRIBUTE_LEVEL PRODUCT_ATTRIBUTE_LEVEL,
                   QPLAT_PROD.ATTRIBUTE_TYPE  PRODUCT_ATTRIBUTE_TYPE,
                   QPLAT_PROD.APPLIED_FLAG,
                   QPLAT_PRIC.CONTEXT              PRICING_ATTRIBUTE_CONTEXT,
                   QPLAT_PRIC.ATTRIBUTE            PRICING_ATTRIBUTE,
                   QPLAT_PRIC.VALUE_FROM           PRICING_ATTR_VALUE_FROM,
                   QPA.PRICING_ATTR_VALUE_FROM     PRICING_SETUP_VALUE_FROM,
                   QPA.PRICING_ATTR_VALUE_TO       PRICING_SETUP_VALUE_TO,
                   QPLAT_PRIC.ATTRIBUTE_LEVEL      PRICING_ATTRIBUTE_LEVEL,
                   QPLAT_PRIC.ATTRIBUTE_TYPE       PRICING_ATTRIBUTE_TYPE,
                   QPA.COMPARISON_OPERATOR_CODE    PRICING_OPERATOR_TYPE,
                   QPLAT_Q.CONTEXT           QUALIFIER_ATTRIBUTE_CONTEXT,
                   QPLAT_Q.ATTRIBUTE         QUALIFIER_ATTRIBUTE,
                   QPLAT_Q.VALUE_FROM        QUALIFIER_ATTR_VALUE_FROM,
                   QPLAT_Q.PRICING_ATTR_FLAG QUALIFIER_PRICING_ATTR_FLAG,
                   QPQ.QUALIFIER_GROUPING_NO QUALIFIER_GROUPING_NO,
                   QPQ.QUALIFIER_PRECEDENCE  QUALIFIER_PRECEDENCE,
                   QPQ.QUALIFIER_DATATYPE    QUALIFIER_DATATYPE,
                   QPQ.QUALIFIER_ATTR_VALUE     SETUP_VALUE_FROM,
                   QPQ.QUALIFIER_ATTR_VALUE_TO  SETUP_VALUE_TO,
                   QPQ.COMPARISON_OPERATOR_CODE QUALIFIER_OPERATOR_TYPE,
                   QPA.PRICING_ATTRIBUTE_DATATYPE   PRICING_ATTRIBUTE_DATATYPE,
                   decode(QPQ.list_line_id, -1, 'HQ', 'LQ') QUALIFIER_TYPE,
                   QCDT.CURRENCY_DETAIL_ID,  /* sunilpandey */
                   QCDT.CURRENCY_HEADER_ID,  /* vivek */
                   QCDT.SELLING_ROUNDING_FACTOR,  /* vivek */
                   QPLINES.CURRENCY_CODE   ORDER_CURRENCY,  /* vivek */
                   QPLINES.PRICING_EFFECTIVE_DATE,  /* vivek */
                   QPH.CURRENCY_CODE   BASE_CURRENCY_CODE  /* vivek */
                  ,QPL.BREAK_UOM_CODE /* Proration */
                  ,QPL.BREAK_UOM_CONTEXT /* Proration */
                  ,QPL.BREAK_UOM_ATTRIBUTE /* Proration */
                  ,QPLAT_Q.DERIVED_QUALIFIER_FLAG  -- Added for TCA
                  ,QPL.PRICE_BREAK_TYPE_CODE --[julin] for price book
   FROM
         qp_npreq_lines_tmp QPLINES,
         QP_QUALIFIERS QPQ,
         qp_npreq_line_attrs_tmp QPLAT_Q,
	 qp_npreq_line_attrs_tmp QPLAT_PROD,
         QP_PRICING_ATTRIBUTES QPA,
         qp_npreq_line_attrs_tmp QPLAT_PRIC,
         QP_LIST_LINES QPL,
         QP_LIST_HEADERS_B QPH,
         --QP_PRICE_REQ_SOURCES QPRS,
         QP_PRICE_REQ_SOURCES_V QPRS, /* yangli */
         QP_CURRENCY_DETAILS QCDT   /* Vivek */
   WHERE QPA.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   QPA.QUALIFICATION_IND = QP_PREQ_GRP.G_YES_PROD_PRIC_HDR_QUAL_IND
   AND   QPLAT_PROD.CONTEXT = QPA.PRODUCT_ATTRIBUTE_CONTEXT
   AND   (QPLINES.PRICE_FLAG = G_YES
          OR
         (QPLINES.PRICE_FLAG = G_PHASE
          AND
          P_FREEZE_OVERRIDE_FLAG = G_YES))
   AND   QPLINES.LIST_PRICE_OVERRIDE_FLAG IN ('N', 'O') --po integration
   AND   QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL
   AND   QPLINES.VALIDATED_FLAG = G_NO
   AND   QPLINES.QUALIFIERS_EXIST_FLAG = G_YES
   AND   QPLINES.PRICING_ATTRS_EXIST_FLAG = G_YES
   AND   QPLAT_PROD.ATTRIBUTE = QPA.PRODUCT_ATTRIBUTE
   AND   QPLAT_PROD.VALUE_FROM = QPA.PRODUCT_ATTR_VALUE
   AND   QPA.EXCLUDER_FLAG = G_NO
   AND    QPLAT_PRIC.CONTEXT = QPA.PRICING_ATTRIBUTE_CONTEXT
          AND QPLAT_PRIC.ATTRIBUTE = QPA.PRICING_ATTRIBUTE
          AND (QPLAT_PRIC.VALUE_FROM = QPA.PRICING_ATTR_VALUE_FROM
               OR
               QPA.COMPARISON_OPERATOR_CODE IN ('NOT =', G_OPERATOR_BETWEEN))
          AND QPLAT_PRIC.ATTRIBUTE_TYPE = G_PRICING_TYPE
          AND QPLAT_PRIC. PRICING_STATUS_CODE = G_STATUS_UNCHANGED
          AND QPLAT_PRIC.LINE_INDEX = QPLAT_PROD.LINE_INDEX
   AND   QPH.LIST_HEADER_ID = QPL.LIST_HEADER_ID
   AND   QPA.LIST_LINE_ID = QPL.LIST_LINE_ID
   AND   QPA.LIST_HEADER_ID = QPLINES.PRICE_LIST_HEADER_ID
   AND    QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPH.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPH.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPL.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPL.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
/* Vivek    AND   QPH.CURRENCY_CODE = QPLINES.CURRENCY_CODE  */
            AND QPH.CURRENCY_HEADER_ID = QCDT.CURRENCY_HEADER_ID /* Vivek */
            AND QPLINES.CURRENCY_CODE = QCDT.TO_CURRENCY_CODE  /* Vivek */
            AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                NVL(TRUNC(QCDT.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                AND NVL(TRUNC(QCDT.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
   AND (   /* Vivek */
        (qcdt.curr_attribute_context is null   /* Vivek */
         and not exists   /* Vivek */
             (select /*+ ORDERED use_nl(qcdt1) index(pa_tmp QP_PREQ_LINE_ATTRS_TMP_N1) */ 'x'   --[julin/5139512/4744915]
	       from qp_npreq_line_attrs_tmp pa_tmp,   qp_currency_details qcdt1 /* Vivek */
               where qcdt1.curr_attribute_context IS NOT NULL  /* Vivek */
		 and qcdt1.curr_attribute_context = pa_tmp.context   /* Vivek */
                 and qcdt1.curr_attribute = pa_tmp.attribute   /* Vivek */
                 and qcdt1.curr_attribute_value = pa_tmp.value_from   /* Vivek */
                 and qcdt1.curr_attribute_type = pa_tmp.ATTRIBUTE_TYPE   /* Vivek */
                 and qcdt1.to_currency_code = qcdt.to_currency_code   /* Vivek */
                 and qcdt1.currency_header_id = qcdt.currency_header_id   /* Vivek */
                 and pa_tmp.pricing_status_code = G_STATUS_UNCHANGED   /* Vivek */
                 and pa_tmp.line_index = qplines.line_index   /* Vivek */
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                     NVL(TRUNC(QCDT1.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                     AND NVL(TRUNC(QCDT1.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
             )   /* Vivek */
        )   /* Vivek */
        OR   /* Vivek */
        (qcdt.curr_attribute_context is not null   /* Vivek */
         and qcdt.currency_detail_id =   /* Vivek */
             (select qcdt3.currency_detail_id
	       from qp_currency_details qcdt3  /* Vivek */
                 where qcdt3.to_currency_code = qcdt.to_currency_code   /* Vivek */
                 and qcdt3.currency_header_id = qcdt.currency_header_id   /* Vivek */
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                     NVL(TRUNC(QCDT3.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                     AND NVL(TRUNC(QCDT3.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                 and  qcdt3.precedence =
             (select /*+ ORDERED use_nl(qcdt2) index(pa_tmp1 QP_PREQ_LINE_ATTRS_TMP_N1) */ min(qcdt2.precedence) --[julin/5139512/4744915]
	       from qp_npreq_line_attrs_tmp pa_tmp1, qp_currency_details qcdt2  /* Vivek */
               where qcdt2.curr_attribute_context IS NOT NULL   /* Vivek */
		 and qcdt2.curr_attribute_context = pa_tmp1.context   /* Vivek */
                 and qcdt2.curr_attribute = pa_tmp1.attribute   /* Vivek */
                 and qcdt2.curr_attribute_value = pa_tmp1.value_from   /* Vivek */
                 and qcdt2.curr_attribute_type = pa_tmp1.ATTRIBUTE_TYPE   /* Vivek */
                 and qcdt2.to_currency_code = qcdt.to_currency_code   /* Vivek */
                 and qcdt2.currency_header_id = qcdt.currency_header_id   /* Vivek */
                 and pa_tmp1.pricing_status_code = G_STATUS_UNCHANGED   /* Vivek */
                 and pa_tmp1.line_index = qplines.line_index   /* Vivek */
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                     NVL(TRUNC(QCDT2.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                     AND NVL(TRUNC(QCDT2.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
             ))   /* Vivek */
        )   /* Vivek */
       )   /* Vivek */
   --AND   (QPL.MODIFIER_LEVEL_CODE = QPLINES.LINE_TYPE_CODE
   --       OR
   --       QPL.MODIFIER_LEVEL_CODE = G_LINE_GROUP AND QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL)
   AND   QPH.SOURCE_SYSTEM_CODE = QPRS.SOURCE_SYSTEM_CODE
   AND   QPLINES.REQUEST_TYPE_CODE   = QPRS.REQUEST_TYPE_CODE
   AND   QPH.ACTIVE_FLAG = G_YES
   AND   QPLAT_PROD.ATTRIBUTE_TYPE = G_PRODUCT_TYPE
   AND   QPLAT_Q.ATTRIBUTE_TYPE    = G_QUALIFIER_TYPE
-- 3594459, context and attribute OR'd together
   AND   (QPQ.QUALIFIER_CONTEXT <> G_LIST_HEADER_CONTEXT
          OR QPQ.QUALIFIER_ATTRIBUTE <> G_PRICELIST_ATTRIBUTE)
   AND   QPLAT_Q.CONTEXT       = QPQ.QUALIFIER_CONTEXT
   AND   QPLAT_Q.ATTRIBUTE     = QPQ.QUALIFIER_ATTRIBUTE
   AND   QPQ.LIST_HEADER_ID    = QPLINES.PRICE_LIST_HEADER_ID
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--   AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
   AND   QPQ.ACTIVE_FLAG = G_YES
   AND   ((QPLAT_Q.VALUE_FROM   = QPQ.QUALIFIER_ATTR_VALUE --bug#1761272 Multiple NOT =
                AND QPQ.COMPARISON_OPERATOR_CODE = '=')
           OR (QPLAT_Q.VALUE_FROM  <> QPQ.QUALIFIER_ATTR_VALUE
                AND QPQ.COMPARISON_OPERATOR_CODE = 'NOT =')
           OR
          QPQ.COMPARISON_OPERATOR_CODE = G_OPERATOR_BETWEEN)
   AND   QPLAT_Q.LINE_INDEX  =   QPLINES.LINE_INDEX
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
            NVL(QPQ.START_DATE_ACTIVE, QPLINES.PRICING_EFFECTIVE_DATE)
   AND     NVL(QPQ.END_DATE_ACTIVE,QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPLAT_PROD.LINE_INDEX = QPLINES.LINE_INDEX
   --AND   QPL.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   QPLAT_PROD.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND   QPLAT_Q. PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
   AND ((nvl(QPLAT_Q.DERIVED_QUALIFIER_FLAG,'N')='N')
          OR (QPLAT_Q.DERIVED_QUALIFIER_FLAG = 'Y' AND QPQ.QUALIFY_HIER_DESCENDENTS_FLAG = 'Y')) -- Added for TCA
   UNION ALL
   SELECT /*+ ORDERED USE_NL(QPLINES QPLAT_PROD QPA QPL QPH) index(QPA QP_PRICING_ATTRIBUTES_N5) l_list_cur */
                   QPLAT_PROD.LINE_INDEX,
                   QPL.LIST_LINE_ID,
                   QPL.ARITHMETIC_OPERATOR,
                   QPL.OPERAND,
                   QPL.PRICING_GROUP_SEQUENCE,
                   QPL.LIST_LINE_TYPE_CODE,
                   QPL.PRICING_PHASE_ID,
                   QPL.AUTOMATIC_FLAG,
                   QPL.INCOMPATIBILITY_GRP_CODE,
                   QPL.PRICE_BY_FORMULA_ID,
                   QPL.PRODUCT_PRECEDENCE,
                   QPL.PRIMARY_UOM_FLAG,
                   QPL.MODIFIER_LEVEL_CODE,
                   QPL.LIST_LINE_NO,
                   QPA.PRODUCT_UOM_CODE,
                   QPA.EXCLUDER_FLAG,
                   QPH.LIST_TYPE_CODE,
   /* vivek        QPH.ROUNDING_FACTOR,  */
                   QCDT.ROUNDING_FACTOR, /* vivek */
                   QPH.LIST_HEADER_ID           LIST_HEADER_ID,
                   QPLAT_PROD.CONTEXT         PRODUCT_ATTRIBUTE_CONTEXT,
                   QPLAT_PROD.ATTRIBUTE       PRODUCT_ATTRIBUTE,
                   QPLAT_PROD.VALUE_FROM      PRODUCT_ATTR_VALUE_FROM,
                   QPLAT_PROD.ATTRIBUTE_LEVEL PRODUCT_ATTRIBUTE_LEVEL,
                   QPLAT_PROD.ATTRIBUTE_TYPE  PRODUCT_ATTRIBUTE_TYPE,
                   QPLAT_PROD.APPLIED_FLAG,
                   NULL                      PRICING_ATTRIBUTE_CONTEXT,
                   NULL                      PRICING_ATTRIBUTE,
                   NULL                      PRICING_ATTR_VALUE_FROM,
                   NULL                      PRICING_SETUP_VALUE_FROM,
                   NULL                      PRICING_SETUP_VALUE_TO,
                   NULL                      PRICING_ATTRIBUTE_LEVEL,
                   NULL                      PRICING_ATTRIBUTE_TYPE,
                   NULL                      PRICING_OPERATOR_TYPE,
                   NULL                      QUALIFIER_ATTRIBUTE_CONTEXT,
                   NULL                      QUALIFIER_ATTRIBUTE,
                   NULL                      QUALIFIER_ATTR_VALUE_FROM,
                   NULL                      QUALIFIER_PRICING_ATTR_FLAG,
                   -9999                     QUALIFIER_GROUPING_NO,
                   5000                      QUALIFIER_PRECEDENCE,
                   NULL                      QUALIFIER_DATATYPE,
                   NULL                      SETUP_VALUE_FROM,
                   NULL                      SETUP_VALUE_TO,
                   NULL                      QUALIFIER_OPERATOR_TYPE,
                   NULL                      PRICING_ATTRIBUTE_DATATYPE,
                   NULL                      QUALIFIER_TYPE,
                   QCDT.CURRENCY_DETAIL_ID,  /* sunilpandey */
                   QCDT.CURRENCY_HEADER_ID,  /* vivek */
                   QCDT.SELLING_ROUNDING_FACTOR,  /* vivek */
                   QPLINES.CURRENCY_CODE   ORDER_CURRENCY,  /* vivek */
                   QPLINES.PRICING_EFFECTIVE_DATE,  /* vivek */
                   QPH.CURRENCY_CODE   BASE_CURRENCY_CODE  /* vivek */
                  ,QPL.BREAK_UOM_CODE /* Proration */
                  ,QPL.BREAK_UOM_CONTEXT /* Proration */
                  ,QPL.BREAK_UOM_ATTRIBUTE /* Proration */
                  ,qplat_prod.DERIVED_QUALIFIER_FLAG  -- Added for TCA
                  ,QPL.PRICE_BREAK_TYPE_CODE --[julin] for price book
   FROM
         qp_npreq_lines_tmp QPLINES,
         qp_npreq_line_attrs_tmp qplat_prod,
         QP_PRICING_ATTRIBUTES QPA,
         QP_LIST_LINES QPL,
         QP_LIST_HEADERS_B QPH,
         --QP_PRICE_REQ_SOURCES qprs,
         QP_PRICE_REQ_SOURCES_V qprs, /* yangli */
         QP_CURRENCY_DETAILS QCDT   /* Vivek */
   WHERE QPA.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   --AND   QPA.QUALIFICATION_IND IN (QP_PREQ_GRP.G_YES_PROD_HDR_QUAL_IND, QP_PREQ_GRP.G_YES_PROD_IND)
   AND   QPA.QUALIFICATION_IND = QP_PREQ_GRP.G_YES_PROD_IND
   AND   QPLAT_PROD.CONTEXT = QPA.PRODUCT_ATTRIBUTE_CONTEXT
   AND   (QPLINES.PRICE_FLAG = G_YES
          OR
         (QPLINES.PRICE_FLAG = G_PHASE
          AND
          P_FREEZE_OVERRIDE_FLAG = G_YES))
   AND   QPLINES.LIST_PRICE_OVERRIDE_FLAG IN ('N', 'O') --po integration
   AND   QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL
   AND   QPLINES.VALIDATED_FLAG = G_NO
   AND   QPLINES.QUALIFIERS_EXIST_FLAG = G_NO
   --AND   QPLINES.PRICING_ATTRS_EXIST_FLAG = G_NO
   AND   QPLAT_PROD.ATTRIBUTE = QPA.PRODUCT_ATTRIBUTE
   AND   QPLAT_PROD.VALUE_FROM = QPA.PRODUCT_ATTR_VALUE
   AND   QPA.EXCLUDER_FLAG = G_NO
   AND   QPLAT_PROD.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND   QPH.LIST_HEADER_ID = QPL.LIST_HEADER_ID
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--   AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
   AND   QPA.LIST_LINE_ID = QPL.LIST_LINE_ID
   AND   QPA.LIST_HEADER_ID = QPLINES.PRICE_LIST_HEADER_ID
   AND    QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPH.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPH.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND    QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPL.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPL.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
/* Vivek    AND   QPH.CURRENCY_CODE = QPLINES.CURRENCY_CODE  */
            AND QPH.CURRENCY_HEADER_ID = QCDT.CURRENCY_HEADER_ID /* Vivek */
            AND QPLINES.CURRENCY_CODE = QCDT.TO_CURRENCY_CODE  /* Vivek */
            AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                NVL(TRUNC(QCDT.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                AND NVL(TRUNC(QCDT.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
   AND (   /* Vivek */
        (qcdt.curr_attribute_context is null   /* Vivek */
         and not exists   /* Vivek */
             (select /*+ ORDERED use_nl(qcdt1) index(pa_tmp QP_PREQ_LINE_ATTRS_TMP_N1) */ 'x'   --[julin/5139512/4744915]
	       from qp_npreq_line_attrs_tmp pa_tmp,   qp_currency_details qcdt1 /* Vivek */
               where qcdt1.curr_attribute_context IS NOT NULL  /* Vivek */
		 and qcdt1.curr_attribute_context = pa_tmp.context   /* Vivek */
                 and qcdt1.curr_attribute = pa_tmp.attribute   /* Vivek */
                 and qcdt1.curr_attribute_value = pa_tmp.value_from   /* Vivek */
                 and qcdt1.curr_attribute_type = pa_tmp.ATTRIBUTE_TYPE   /* Vivek */
                 and qcdt1.to_currency_code = qcdt.to_currency_code   /* Vivek */
                 and qcdt1.currency_header_id = qcdt.currency_header_id   /* Vivek */
                 and pa_tmp.pricing_status_code = G_STATUS_UNCHANGED   /* Vivek */
                 and pa_tmp.line_index = qplines.line_index   /* Vivek */
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                     NVL(TRUNC(QCDT1.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                     AND NVL(TRUNC(QCDT1.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
             )   /* Vivek */
        )   /* Vivek */
        OR   /* Vivek */
        (qcdt.curr_attribute_context is not null   /* Vivek */
         and qcdt.currency_detail_id =   /* Vivek */
             (select qcdt3.currency_detail_id
	       from qp_currency_details qcdt3  /* Vivek */
                 where qcdt3.to_currency_code = qcdt.to_currency_code   /* Vivek */
                 and qcdt3.currency_header_id = qcdt.currency_header_id   /* Vivek */
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                     NVL(TRUNC(QCDT3.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                     AND NVL(TRUNC(QCDT3.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                 and  qcdt3.precedence =
             (select /*+ ORDERED use_nl(qcdt2) index(pa_tmp1 QP_PREQ_LINE_ATTRS_TMP_N1) */ min(qcdt2.precedence) --[julin/5139512/4744915]
	       from qp_npreq_line_attrs_tmp pa_tmp1, qp_currency_details qcdt2  /* Vivek */
               where qcdt2.curr_attribute_context IS NOT NULL   /* Vivek */
		 and qcdt2.curr_attribute_context = pa_tmp1.context   /* Vivek */
                 and qcdt2.curr_attribute = pa_tmp1.attribute   /* Vivek */
                 and qcdt2.curr_attribute_value = pa_tmp1.value_from   /* Vivek */
                 and qcdt2.curr_attribute_type = pa_tmp1.ATTRIBUTE_TYPE   /* Vivek */
                 and qcdt2.to_currency_code = qcdt.to_currency_code   /* Vivek */
                 and qcdt2.currency_header_id = qcdt.currency_header_id   /* Vivek */
                 and pa_tmp1.pricing_status_code = G_STATUS_UNCHANGED   /* Vivek */
                 and pa_tmp1.line_index = qplines.line_index   /* Vivek */
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                     NVL(TRUNC(QCDT2.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                     AND NVL(TRUNC(QCDT2.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
             ))   /* Vivek */
        )   /* Vivek */
       )   /* Vivek */
   --AND   (QPL.MODIFIER_LEVEL_CODE = QPLINES.LINE_TYPE_CODE
   --       OR
   --       QPL.MODIFIER_LEVEL_CODE = G_LINE_GROUP AND QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL)
   AND   QPH.SOURCE_SYSTEM_CODE = QPRS.SOURCE_SYSTEM_CODE
   AND   QPLINES.REQUEST_TYPE_CODE   = QPRS.REQUEST_TYPE_CODE
   AND   QPH.ACTIVE_FLAG = G_YES
   AND   QPLAT_PROD.ATTRIBUTE_TYPE = G_PRODUCT_TYPE
   AND   QPLAT_PROD.LINE_INDEX = QPLINES.LINE_INDEX
   --AND   QPL.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
UNION ALL
SELECT /*+ ORDERED USE_NL(QPLINES QPLAT_PROD QPA QPLAT_PRIC QPL QPH) index(QPA QP_PRICING_ATTRIBUTES_N5) INDEX(QPLAT_PRIC qp_preq_line_attrs_tmp_N2) l_list_cur */
                   QPLAT_PROD.LINE_INDEX,
                   QPL.LIST_LINE_ID,
                   QPL.ARITHMETIC_OPERATOR,
                   QPL.OPERAND,
                   QPL.PRICING_GROUP_SEQUENCE,
                   QPL.LIST_LINE_TYPE_CODE,
                   QPL.PRICING_PHASE_ID,
                   QPL.AUTOMATIC_FLAG,
                   QPL.INCOMPATIBILITY_GRP_CODE,
                   QPL.PRICE_BY_FORMULA_ID,
                   QPL.PRODUCT_PRECEDENCE,
                   QPL.PRIMARY_UOM_FLAG,
                   QPL.MODIFIER_LEVEL_CODE,
                   QPL.LIST_LINE_NO,
                   QPA.PRODUCT_UOM_CODE,
                   QPA.EXCLUDER_FLAG,
                   QPH.LIST_TYPE_CODE,
   /* vivek        QPH.ROUNDING_FACTOR,  */
                   QCDT.ROUNDING_FACTOR, /* vivek */
                   QPH.LIST_HEADER_ID           LIST_HEADER_ID,
                   QPLAT_PROD.CONTEXT         PRODUCT_ATTRIBUTE_CONTEXT,
                   QPLAT_PROD.ATTRIBUTE       PRODUCT_ATTRIBUTE,
                   QPLAT_PROD.VALUE_FROM      PRODUCT_ATTR_VALUE_FROM,
                   QPLAT_PROD.ATTRIBUTE_LEVEL PRODUCT_ATTRIBUTE_LEVEL,
                   QPLAT_PROD.ATTRIBUTE_TYPE  PRODUCT_ATTRIBUTE_TYPE,
                   QPLAT_PROD.APPLIED_FLAG,
                   QPLAT_PRIC.CONTEXT              PRICING_ATTRIBUTE_CONTEXT,
                   QPLAT_PRIC.ATTRIBUTE            PRICING_ATTRIBUTE,
                   QPLAT_PRIC.VALUE_FROM           PRICING_ATTR_VALUE_FROM,
                   QPA.PRICING_ATTR_VALUE_FROM     PRICING_SETUP_VALUE_FROM,
                   QPA.PRICING_ATTR_VALUE_TO       PRICING_SETUP_VALUE_TO,
                   QPLAT_PRIC.ATTRIBUTE_LEVEL      PRICING_ATTRIBUTE_LEVEL,
                   QPLAT_PRIC.ATTRIBUTE_TYPE       PRICING_ATTRIBUTE_TYPE,
                   QPA.COMPARISON_OPERATOR_CODE    PRICING_OPERATOR_TYPE,
                   NULL                      QUALIFIER_ATTRIBUTE_CONTEXT,
                   NULL                      QUALIFIER_ATTRIBUTE,
                   NULL                      QUALIFIER_ATTR_VALUE_FROM,
                   NULL                      QUALIFIER_PRICING_ATTR_FLAG,
                   -9999                     QUALIFIER_GROUPING_NO,
                   5000                      QUALIFIER_PRECEDENCE,
                   NULL                      QUALIFIER_DATATYPE,
                   NULL                      SETUP_VALUE_FROM,
                   NULL                      SETUP_VALUE_TO,
                   NULL                      QUALIFIER_OPERATOR_TYPE,
                   QPA.PRICING_ATTRIBUTE_DATATYPE   PRICING_ATTRIBUTE_DATATYPE,
                   NULL                      QUALIFIER_TYPE,
                   QCDT.CURRENCY_DETAIL_ID,  /* sunilpandey */
                   QCDT.CURRENCY_HEADER_ID,  /* vivek */
                   QCDT.SELLING_ROUNDING_FACTOR,  /* vivek */
                   QPLINES.CURRENCY_CODE   ORDER_CURRENCY,  /* vivek */
                   QPLINES.PRICING_EFFECTIVE_DATE,  /* vivek */
                   QPH.CURRENCY_CODE   BASE_CURRENCY_CODE  /* vivek */
                  ,QPL.BREAK_UOM_CODE /* Proration */
                  ,QPL.BREAK_UOM_CONTEXT /* Proration */
                  ,QPL.BREAK_UOM_ATTRIBUTE /* Proration */
                  ,qplat_pric.DERIVED_QUALIFIER_FLAG  -- Added for TCA
                  ,QPL.PRICE_BREAK_TYPE_CODE --[julin] for price book
   FROM
         qp_npreq_lines_tmp qplines,
         qp_npreq_line_attrs_tmp qplat_prod,
         QP_PRICING_ATTRIBUTES qpa,
         qp_npreq_line_attrs_tmp qplat_pric,
         QP_LIST_LINES qpl,
         QP_LIST_HEADERS_B qph,
         --QP_PRICE_REQ_SOURCES qprs,
         QP_PRICE_REQ_SOURCES_V qprs, /* yangli */
         QP_CURRENCY_DETAILS QCDT   /* Vivek */
   WHERE QPA.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   QPA.QUALIFICATION_IND = QP_PREQ_GRP.G_YES_PROD_PRIC_IND
   AND   QPLAT_PROD.CONTEXT = QPA.PRODUCT_ATTRIBUTE_CONTEXT
   AND   (QPLINES.PRICE_FLAG = G_YES
          OR
         (QPLINES.PRICE_FLAG = G_PHASE
          AND
          P_FREEZE_OVERRIDE_FLAG = G_YES))
   AND   QPLINES.LIST_PRICE_OVERRIDE_FLAG IN ('N', 'O') --po integration
   AND   QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL
   AND   QPLINES.VALIDATED_FLAG = G_NO
   AND   QPLINES.QUALIFIERS_EXIST_FLAG = G_NO
   AND   QPLINES.PRICING_ATTRS_EXIST_FLAG = G_YES
   AND   QPLAT_PROD.ATTRIBUTE = QPA.PRODUCT_ATTRIBUTE
   AND   QPLAT_PROD.VALUE_FROM = QPA.PRODUCT_ATTR_VALUE
   AND   QPA.EXCLUDER_FLAG = G_NO
   AND   QPLAT_PROD.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND   QPLAT_PRIC.CONTEXT = QPA.PRICING_ATTRIBUTE_CONTEXT
   AND   QPLAT_PRIC.ATTRIBUTE = QPA.PRICING_ATTRIBUTE
   AND   (QPLAT_PRIC.VALUE_FROM = QPA.PRICING_ATTR_VALUE_FROM
          OR
          QPA.COMPARISON_OPERATOR_CODE IN ('NOT =', G_OPERATOR_BETWEEN))
   AND   QPLAT_PRIC.ATTRIBUTE_TYPE = G_PRICING_TYPE
   AND   QPLAT_PRIC. PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND   QPLAT_PRIC.LINE_INDEX = QPLAT_PROD.LINE_INDEX
   AND   QPH.LIST_HEADER_ID = QPLINES.PRICE_LIST_HEADER_ID
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--   AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
   AND   QPA.LIST_LINE_ID = QPL.LIST_LINE_ID
   AND   QPA.LIST_HEADER_ID = QPLINES.PRICE_LIST_HEADER_ID
   AND    QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPH.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPH.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPL.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPL.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
/* Vivek    AND   QPH.CURRENCY_CODE = QPLINES.CURRENCY_CODE  */
            AND QPH.CURRENCY_HEADER_ID = QCDT.CURRENCY_HEADER_ID /* Vivek */
            AND QPLINES.CURRENCY_CODE = QCDT.TO_CURRENCY_CODE  /* Vivek */
            AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                NVL(TRUNC(QCDT.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                AND NVL(TRUNC(QCDT.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
   AND (   /* Vivek */
        (qcdt.curr_attribute_context is null   /* Vivek */
         and not exists   /* Vivek */
             (select /*+ ORDERED use_nl(qcdt1) index(pa_tmp QP_PREQ_LINE_ATTRS_TMP_N1) */ 'x'   --[julin/5139512/4744915]
	       from qp_npreq_line_attrs_tmp pa_tmp,   qp_currency_details qcdt1 /* Vivek */
               where qcdt1.curr_attribute_context IS NOT NULL  /* Vivek */
		 and qcdt1.curr_attribute_context = pa_tmp.context   /* Vivek */
                 and qcdt1.curr_attribute = pa_tmp.attribute   /* Vivek */
                 and qcdt1.curr_attribute_value = pa_tmp.value_from   /* Vivek */
                 and qcdt1.curr_attribute_type = pa_tmp.ATTRIBUTE_TYPE   /* Vivek */
                 and qcdt1.to_currency_code = qcdt.to_currency_code   /* Vivek */
                 and qcdt1.currency_header_id = qcdt.currency_header_id   /* Vivek */
                 and pa_tmp.pricing_status_code = G_STATUS_UNCHANGED   /* Vivek */
                 and pa_tmp.line_index = qplines.line_index   /* Vivek */
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                     NVL(TRUNC(QCDT1.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                     AND NVL(TRUNC(QCDT1.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
             )   /* Vivek */
        )   /* Vivek */
        OR   /* Vivek */
        (qcdt.curr_attribute_context is not null   /* Vivek */
         and qcdt.currency_detail_id =   /* Vivek */
             (select qcdt3.currency_detail_id
	       from qp_currency_details qcdt3  /* Vivek */
                 where qcdt3.to_currency_code = qcdt.to_currency_code   /* Vivek */
                 and qcdt3.currency_header_id = qcdt.currency_header_id   /* Vivek */
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                     NVL(TRUNC(QCDT3.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                     AND NVL(TRUNC(QCDT3.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                 and  qcdt3.precedence =
             (select /*+ ORDERED use_nl(qcdt2) index(pa_tmp1 QP_PREQ_LINE_ATTRS_TMP_N1) */ min(qcdt2.precedence) --[julin/5139512/4744915]
	       from qp_npreq_line_attrs_tmp pa_tmp1, qp_currency_details qcdt2  /* Vivek */
               where qcdt2.curr_attribute_context IS NOT NULL   /* Vivek */
		 and qcdt2.curr_attribute_context = pa_tmp1.context   /* Vivek */
                 and qcdt2.curr_attribute = pa_tmp1.attribute   /* Vivek */
                 and qcdt2.curr_attribute_value = pa_tmp1.value_from   /* Vivek */
                 and qcdt2.curr_attribute_type = pa_tmp1.ATTRIBUTE_TYPE   /* Vivek */
                 and qcdt2.to_currency_code = qcdt.to_currency_code   /* Vivek */
                 and qcdt2.currency_header_id = qcdt.currency_header_id   /* Vivek */
                 and pa_tmp1.pricing_status_code = G_STATUS_UNCHANGED   /* Vivek */
                 and pa_tmp1.line_index = qplines.line_index   /* Vivek */
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN   /* Vivek */
                     NVL(TRUNC(QCDT2.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
                     AND NVL(TRUNC(QCDT2.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)/* Vivek */
             ))   /* Vivek */
        )   /* Vivek */
       )   /* Vivek */
   --AND   (QPL.MODIFIER_LEVEL_CODE = QPLINES.LINE_TYPE_CODE
   --       OR
   --       QPL.MODIFIER_LEVEL_CODE = G_LINE_GROUP AND QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL)
   AND   QPH.SOURCE_SYSTEM_CODE = QPRS.SOURCE_SYSTEM_CODE
   AND   QPLINES.REQUEST_TYPE_CODE   = QPRS.REQUEST_TYPE_CODE
   AND   QPH.ACTIVE_FLAG = G_YES
   AND   QPLAT_PROD.ATTRIBUTE_TYPE = G_PRODUCT_TYPE
   AND   QPLAT_PROD.LINE_INDEX = QPLINES.LINE_INDEX
   --AND   QPL.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
   ORDER BY 1,2;

/*
INDX,QP_PREQ_GRP.list_header_search.l_validated_cur,qp_npreq_line_attrs_tmp_N2,PRICING_STATUS_CODE,1
INDX,QP_PREQ_GRP.list_header_search.l_validated_cur,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.list_header_search.l_validated_cur,qp_npreq_line_attrs_tmp_N2,CONTEXT,3
INDX,QP_PREQ_GRP.list_header_search.l_validated_cur,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE,4

INDX,QP_PREQ_GRP.list_header_search.l_validated_cur,qp_npreq_lines_tmp_U1,LINE_INDEX,1
INDX,QP_PREQ_GRP.list_header_search.l_validated_cur,qp_npreq_lines_tmp_U1,LINE_TYPE_CODE,2
*/

CURSOR l_validated_cur IS
  SELECT  /*+ dynamic_sampling(1) */ LINE_INDEX,
          LINE_DETAIL_INDEX,
          ATTRIBUTE_LEVEL,
          ATTRIBUTE_TYPE,
          CONTEXT,
          ATTRIBUTE,
          VALUE_FROM,
          VALUE_TO,
          PRODUCT_UOM_CODE,
          COMPARISON_OPERATOR_TYPE_CODE COMPARISON_OPERATOR_TYPE
  FROM  qp_npreq_line_attrs_tmp a
  WHERE PRICING_STATUS_CODE = G_STATUS_UNCHANGED
  AND   VALIDATED_FLAG = G_VALIDATED
  AND   CONTEXT = G_LIST_HEADER_CONTEXT
  AND   ATTRIBUTE IN (G_PROMOTION_ATTRIBUTE,G_QUAL_ATTRIBUTE2)
  AND   ATTRIBUTE_TYPE = G_QUALIFIER_TYPE
  AND   EXISTS
  (Select /*+ dynamic_sampling(1) */ 'X'
   FROM  qp_npreq_lines_tmp b
   WHERE b.line_index = a.line_index
   AND   (b.price_flag = G_YES
          OR
          (b.price_flag = G_PHASE
           AND
           p_freeze_override_flag = G_YES)
          )
   AND  b.line_type_code <> G_ORDER_LEVEL
  );

--THE DIFFERENT BETWEEN THIS SEARCH AND PRICE LIST SEARCH
--IS THIS SEARCH CHECKS FOR LINE LEVEL QUALIFIER ALSO
/*
INDX,QP_PREQ_GRP.list_header_search.l_other_list_cur,QP_LIST_HEADERS_B_PK,LIST_HEADER_ID,1

INDX,QP_PREQ_GRP.list_header_search.l_other_list_cur,qp_npreq_line_attrs_tmp_N1,LINE_INDEX,1
INDX,QP_PREQ_GRP.list_header_search.l_other_list_cur,qp_npreq_line_attrs_tmp_N1,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.list_header_search.l_other_list_cur,qp_npreq_line_attrs_tmp_N1,PRICING_STATUS_CODE,3

INDX,QP_PREQ_GRP.list_header_search.l_other_list_cur,qp_npreq_lines_tmp_N1,LINE_INDEX,1
INDX,QP_PREQ_GRP.list_header_search.l_other_list_cur,qp_npreq_lines_tmp_N1,LINE_TYPE_CODE,2

INDX,QP_PREQ_GRP.list_header_search.l_other_list_cur,QP_PRICING_ATTRIBUTES_N5,PRICING_PHASE_ID,1
INDX,QP_PREQ_GRP.list_header_search.l_other_list_cur,QP_PRICING_ATTRIBUTES_N5,QUALIFICATION_IND,2
INDX,QP_PREQ_GRP.list_header_search.l_other_list_cur,QP_PRICING_ATTRIBUTES_N5,PRODUCT_ATTRIBUTE_CONTEXT,3
INDX,QP_PREQ_GRP.list_header_search.l_other_list_cur,QP_PRICING_ATTRIBUTES_N5,PRODUCT_ATTRIBUTE,4
INDX,QP_PREQ_GRP.list_header_search.l_other_list_cur,QP_PRICING_ATTRIBUTES_N5,PRODUCT_ATTR_VALUE,5
INDX,QP_PREQ_GRP.list_header_search.l_other_list_cur,QP_PRICING_ATTRIBUTES_N5,LIST_HEADER_ID,7
INDX,QP_PREQ_GRP.list_header_search.l_other_list_cur,QP_PRICING_ATTRIBUTES_N5,LIST_LINE_ID,8

INDX,QP_PREQ_GRP.list_header_search.l_other_list_cur,QP_PRICE_REQ_SOURCES_PK,REQUEST_TYPE_CODE,1
INDX,QP_PREQ_GRP.list_header_search.l_other_list_cur,QP_PRICE_REQ_SOURCES_PK,SOURCE_SYSTEM_CODE,2

INDX,QP_PREQ_GRP.list_header_search.l_other_list_cur,QP_LIST_LINES_PK,LIST_LINE_ID,1

INDX,QP_PREQ_GRP.list_header_search.l_other_list_cur,QP_PRICING_ATTRIBUTES_N4,PRICING_ATTRIBUTE_CONTEXT,1
INDX,QP_PREQ_GRP.list_header_search.l_other_list_cur,QP_PRICING_ATTRIBUTES_N4,PRICING_ATTRIBUTE,2
*/

CURSOR L_OTHER_LIST_CUR (L_LINE_INDEX PLS_INTEGER,
                        L_LIST_HEADER_ID NUMBER,
                        P_FREEZE_OVERRIDE_FLAG VARCHAR2)IS
SELECT /*+ ORDERED USE_NL(QPLAT_PROD QPA QPH QPL QPRS) index(QPA QP_PRICING_ATTRIBUTES_N5) index(qph qp_list_headers_b_n7) l_other_list_cur */
                   QPLINES.LINE_INDEX,
                   QPL.LIST_LINE_ID,
                   QPL.ARITHMETIC_OPERATOR,
                   QPL.OPERAND,
                   QPL.PRICING_GROUP_SEQUENCE,
                   QPL.LIST_LINE_TYPE_CODE,
                   QPL.LIST_PRICE,
                   QPL.LIST_PRICE_UOM_CODE,
                   QPL.PERCENT_PRICE,
                   QPL.PRICING_PHASE_ID,
                   QPL.AUTOMATIC_FLAG,
                   QPL.OVERRIDE_FLAG,
                   QPL.PRINT_ON_INVOICE_FLAG,
                   QPL.MODIFIER_LEVEL_CODE,
                   QPL.BENEFIT_QTY,
                   QPL.BENEFIT_UOM_CODE,
                   QPL.LIST_LINE_NO,
                   QPL.ACCRUAL_FLAG,
                   QPL.ACCRUAL_CONVERSION_RATE,
                   QPL.ESTIM_ACCRUAL_RATE,
                   QPL.RECURRING_FLAG,
                   QPL.INCOMPATIBILITY_GRP_CODE,
                   QPL.PRICE_BY_FORMULA_ID,
                   QPL.PRODUCT_PRECEDENCE,
                   QPL.PRIMARY_UOM_FLAG,
                   QPA.PRODUCT_UOM_CODE,
                   QPA.EXCLUDER_FLAG,
                   QPH.ASK_FOR_FLAG,
                   QPH.LIST_TYPE_CODE,
                   QPH.ROUNDING_FACTOR,
                   QPLAT_PROD.LINE_DETAIL_INDEX,
                   L_LIST_HEADER_ID           LIST_HEADER_ID,
                   QPLAT_PROD.CONTEXT         PRODUCT_ATTRIBUTE_CONTEXT,
                   QPLAT_PROD.ATTRIBUTE       PRODUCT_ATTRIBUTE,
                   QPLAT_PROD.VALUE_FROM      PRODUCT_ATTR_VALUE_FROM,
                   QPLAT_PROD.VALUE_TO        PRODUCT_ATTR_VALUE_TO,
                   QPLAT_PROD.ATTRIBUTE_LEVEL PRODUCT_ATTRIBUTE_LEVEL,
                   QPLAT_PROD.ATTRIBUTE_TYPE  PRODUCT_ATTRIBUTE_TYPE,
                   QPL.AUTOMATIC_FLAG APPLIED_FLAG,  	-- shu fix bug 1915355
                   QPLAT_PROD.COMPARISON_OPERATOR_TYPE_CODE PRODUCT_OPERATOR_TYPE,
                   NULL                            PRICING_ATTRIBUTE_CONTEXT,
                   NULL                            PRICING_ATTRIBUTE,
                   NULL                            PRICING_ATTR_VALUE_FROM,
                   NULL                            PRICING_SETUP_VALUE_FROM,
                   NULL                            PRICING_SETUP_VALUE_TO,
                   NULL                            PRICING_ATTRIBUTE_LEVEL,
                   NULL                            PRICING_ATTRIBUTE_TYPE,
                   NULL                            PRICING_OPERATOR_TYPE,
                   NULL                            PRICING_ATTRIBUTE_DATATYPE
   FROM
         qp_npreq_lines_tmp QPLINES,
         qp_npreq_line_attrs_tmp QPLAT_PROD,
         QP_PRICING_ATTRIBUTES QPA,
         QP_LIST_HEADERS_B QPH,
	 QP_LIST_LINES QPL,
         QP_PRICE_REQ_SOURCES_V QPRS
   WHERE QPA.PRICING_PHASE_ID = P_PRICING_PHASE_ID
   AND   QPA.QUALIFICATION_IND IN (QP_PREQ_GRP.G_YES_PROD_IND, QP_PREQ_GRP.G_YES_PROD_HDR_QUAL_IND,
                                   QP_PREQ_GRP.G_YES_PROD_LINE_QUAL_IND,QP_PREQ_GRP.G_YES_PROD_HDR_LINE_QUAL_IND)
   AND   QPLAT_PROD.CONTEXT = QPA.PRODUCT_ATTRIBUTE_CONTEXT
   AND   QPLAT_PROD.ATTRIBUTE = QPA.PRODUCT_ATTRIBUTE
   AND   QPLAT_PROD.VALUE_FROM = QPA.PRODUCT_ATTR_VALUE
   AND   QPLINES.PRICED_UOM_CODE = NVL(QPA.PRODUCT_UOM_CODE,QPLINES.PRICED_UOM_CODE)
   AND   (QPLINES.PRICE_FLAG = G_YES
             OR
             (QPLINES.PRICE_FLAG = G_PHASE
              AND
              P_FREEZE_OVERRIDE_FLAG = G_YES))
   AND QPH.LIST_HEADER_ID = L_LIST_HEADER_ID
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--   AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
   AND   QPH.ASK_FOR_FLAG = G_YES
   AND   QPA.LIST_HEADER_ID = L_LIST_HEADER_ID
   AND   QPA.LIST_LINE_ID = QPL.LIST_LINE_ID
   AND   QPLAT_PROD.ATTRIBUTE_TYPE = G_PRODUCT_TYPE
   --AND   QPL.PRICING_PHASE_ID = p_pricing_phase_id
   --AND   QPL.QUALIFICATION_IND IN (QP_PREQ_GRP.G_YES_PROD_IND, QP_PREQ_GRP.G_YES_PROD_HDR_QUAL_IND,
   --                                QP_PREQ_GRP.G_YES_PROD_LINE_QUAL_IND,QP_PREQ_GRP.G_YES_PROD_HDR_LINE_QUAL_IND)
   AND   QPLAT_PROD.LINE_INDEX = L_LINE_INDEX
   AND   QPLINES.LINE_INDEX = L_LINE_INDEX
   AND    QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPH.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPH.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
    AND   NVL(QPLINES.START_DATE_ACTIVE_FIRST,TRUNC(SYSDATE)) BETWEEN
           NVL(QPH.START_DATE_ACTIVE_FIRST, NVL(QPLINES.START_DATE_ACTIVE_FIRST,
               TRUNC(SYSDATE) )) AND
           NVL(QPH.END_DATE_ACTIVE_FIRST, NVL(QPLINES.START_DATE_ACTIVE_FIRST,
               TRUNC(SYSDATE) ))
   AND  NVL(QPLINES.START_DATE_ACTIVE_SECOND,TRUNC(SYSDATE)) BETWEEN
           NVL(QPH.START_DATE_ACTIVE_SECOND, NVL(QPLINES.START_DATE_ACTIVE_SECOND,
               TRUNC(SYSDATE) )) AND
           NVL(QPH.END_DATE_ACTIVE_SECOND, NVL(QPLINES.START_DATE_ACTIVE_SECOND,
               TRUNC(SYSDATE) ))
   AND   NVL(QPLINES.ACTIVE_DATE_FIRST_TYPE,'X') =
                NVL(QPH.ACTIVE_DATE_FIRST_TYPE,NVL(QPLINES.ACTIVE_DATE_FIRST_TYPE,'X'))
   AND   NVL(QPLINES.ACTIVE_DATE_SECOND_TYPE,'X') =
                NVL(QPH.ACTIVE_DATE_SECOND_TYPE,NVL(QPLINES.ACTIVE_DATE_SECOND_TYPE,'X'))
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPL.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPL.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   ((QPH.CURRENCY_CODE IS NOT NULL AND QPH.CURRENCY_CODE = QPLINES.CURRENCY_CODE)
          OR
          QPH.CURRENCY_CODE IS NULL) -- optional currency
   AND   (QPL.MODIFIER_LEVEL_CODE = QPLINES.LINE_TYPE_CODE
          OR
          QPL.MODIFIER_LEVEL_CODE = G_LINE_GROUP AND QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL)
   AND   QPH.SOURCE_SYSTEM_CODE = QPRS.SOURCE_SYSTEM_CODE
   AND   QPLINES.REQUEST_TYPE_CODE   = QPRS.REQUEST_TYPE_CODE
   AND   QPH.ACTIVE_FLAG = G_YES
   AND   QPLAT_PROD.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
  UNION ALL
SELECT /*+ ORDERED USE_NL(QPLAT_PROD QPA QPLAT_PRIC QPH QPL QPRS) index(QPA QP_PRICING_ATTRIBUTES_N5) index(qplat_pric qp_preq_line_attrs_tmp_N2) index(qph qp_list_headers_b_n7) l_other_list_cur */
                   QPLINES.LINE_INDEX,
                   QPL.LIST_LINE_ID,
                   QPL.ARITHMETIC_OPERATOR,
                   QPL.OPERAND,
                   QPL.PRICING_GROUP_SEQUENCE,
                   QPL.LIST_LINE_TYPE_CODE,
                   QPL.LIST_PRICE,
                   QPL.LIST_PRICE_UOM_CODE,
                   QPL.PERCENT_PRICE,
                   QPL.PRICING_PHASE_ID,
                   QPL.AUTOMATIC_FLAG,
                   QPL.OVERRIDE_FLAG,
                   QPL.PRINT_ON_INVOICE_FLAG,
                   QPL.MODIFIER_LEVEL_CODE,
                   QPL.BENEFIT_QTY,
                   QPL.BENEFIT_UOM_CODE,
                   QPL.LIST_LINE_NO,
                   QPL.ACCRUAL_FLAG,
                   QPL.ACCRUAL_CONVERSION_RATE,
                   QPL.ESTIM_ACCRUAL_RATE,
                   QPL.RECURRING_FLAG,
                   QPL.INCOMPATIBILITY_GRP_CODE,
                   QPL.PRICE_BY_FORMULA_ID,
                   QPL.PRODUCT_PRECEDENCE,
                   QPL.PRIMARY_UOM_FLAG,
                   QPA.PRODUCT_UOM_CODE,
                   QPA.EXCLUDER_FLAG,
                   QPH.ASK_FOR_FLAG,
                   QPH.LIST_TYPE_CODE,
                   QPH.ROUNDING_FACTOR,
                   QPLAT_PROD.LINE_DETAIL_INDEX,
                   L_LIST_HEADER_ID           LIST_HEADER_ID,
                   QPLAT_PROD.CONTEXT         PRODUCT_ATTRIBUTE_CONTEXT,
                   QPLAT_PROD.ATTRIBUTE       PRODUCT_ATTRIBUTE,
                   QPLAT_PROD.VALUE_FROM      PRODUCT_ATTR_VALUE_FROM,
                   QPLAT_PROD.VALUE_TO        PRODUCT_ATTR_VALUE_TO,
                   QPLAT_PROD.ATTRIBUTE_LEVEL PRODUCT_ATTRIBUTE_LEVEL,
                   QPLAT_PROD.ATTRIBUTE_TYPE  PRODUCT_ATTRIBUTE_TYPE,
                   QPL.AUTOMATIC_FLAG APPLIED_FLAG, -- shu fix bug 1915355
                   QPLAT_PROD.COMPARISON_OPERATOR_TYPE_CODE PRODUCT_OPERATOR_TYPE,
                   QPLAT_PRIC.CONTEXT              PRICING_ATTRIBUTE_CONTEXT,
                   QPLAT_PRIC.ATTRIBUTE            PRICING_ATTRIBUTE,
                   QPLAT_PRIC.VALUE_FROM           PRICING_ATTR_VALUE_FROM,
                   QPA.PRICING_ATTR_VALUE_FROM     PRICING_SETUP_VALUE_FROM,
                   QPA.PRICING_ATTR_VALUE_TO       PRICING_SETUP_VALUE_TO,
                   QPLAT_PRIC.ATTRIBUTE_LEVEL      PRICING_ATTRIBUTE_LEVEL,
                   QPLAT_PRIC.ATTRIBUTE_TYPE       PRICING_ATTRIBUTE_TYPE,
                   QPA.COMPARISON_OPERATOR_CODE    PRICING_OPERATOR_TYPE,
                   QPA.PRICING_ATTRIBUTE_DATATYPE   PRICING_ATTRIBUTE_DATATYPE
   FROM
         qp_npreq_lines_tmp QPLINES,
         qp_npreq_line_attrs_tmp QPLAT_PROD,
         QP_PRICING_ATTRIBUTES QPA,
         qp_npreq_line_attrs_tmp QPLAT_PRIC,
         QP_LIST_HEADERS_B QPH,
	 QP_LIST_LINES QPL,
         QP_PRICE_REQ_SOURCES QPRS
   WHERE QPA.PRICING_PHASE_ID = p_pricing_phase_id
   AND   QPA.QUALIFICATION_IND IN (QP_PREQ_GRP.G_YES_PROD_PRIC_IND, QP_PREQ_GRP.G_YES_PROD_PRIC_HDR_QUAL_IND,
                              QP_PREQ_GRP.G_YES_PROD_PRIC_LINE_QUAL_IND,QP_PREQ_GRP.G_YES_PRIC_HDR_LINE_QUAL_IND)
   AND   QPLAT_PROD.CONTEXT = QPA.PRODUCT_ATTRIBUTE_CONTEXT
   AND   QPLAT_PROD.ATTRIBUTE = QPA.PRODUCT_ATTRIBUTE
   AND   QPLAT_PROD.VALUE_FROM = QPA.PRODUCT_ATTR_VALUE
   AND   QPLINES.PRICED_UOM_CODE = NVL(QPA.PRODUCT_UOM_CODE,QPLINES.PRICED_UOM_CODE)
   AND   (QPLINES.PRICE_FLAG = G_YES
             OR
             (QPLINES.PRICE_FLAG = G_PHASE
              AND
              P_FREEZE_OVERRIDE_FLAG = G_YES))
   AND   QPLAT_PRIC.CONTEXT = QPA.PRICING_ATTRIBUTE_CONTEXT
         AND QPLAT_PRIC.ATTRIBUTE = QPA.PRICING_ATTRIBUTE
         AND (QPLAT_PRIC.VALUE_FROM = QPA.PRICING_ATTR_VALUE_FROM
               OR
               QPA.COMPARISON_OPERATOR_CODE = G_OPERATOR_BETWEEN)
   AND QPLAT_PRIC.ATTRIBUTE_TYPE = G_PRICING_TYPE
   AND QPLAT_PRIC. PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND QPLAT_PROD.LINE_INDEX = QPLAT_PRIC.LINE_INDEX
   AND QPH.LIST_HEADER_ID = L_LIST_HEADER_ID
   AND   QPH.ASK_FOR_FLAG = G_YES
   AND   QPA.LIST_HEADER_ID = L_LIST_HEADER_ID
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--   AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
   AND   QPA.LIST_LINE_ID = QPL.LIST_LINE_ID
   AND   QPLAT_PROD.ATTRIBUTE_TYPE = G_PRODUCT_TYPE
   --AND   QPL.PRICING_PHASE_ID = p_pricing_phase_id
   --AND   QPL.QUALIFICATION_IND IN (QP_PREQ_GRP.G_YES_PROD_PRIC_IND, QP_PREQ_GRP.G_YES_PROD_PRIC_HDR_QUAL_IND,
   --                                QP_PREQ_GRP.G_YES_PROD_PRIC_LINE_QUAL_IND,QP_PREQ_GRP.G_YES_PRIC_HDR_LINE_QUAL_IND)
   AND   QPLAT_PROD.LINE_INDEX = L_LINE_INDEX
   AND   QPLINES.LINE_INDEX = L_LINE_INDEX
   AND    QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPH.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPH.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   NVL(QPLINES.START_DATE_ACTIVE_FIRST,TRUNC(SYSDATE)) BETWEEN
           NVL(QPH.START_DATE_ACTIVE_FIRST, NVL(QPLINES.START_DATE_ACTIVE_FIRST,
               TRUNC(SYSDATE) )) AND
           NVL(QPH.END_DATE_ACTIVE_FIRST, NVL(QPLINES.START_DATE_ACTIVE_FIRST,
               TRUNC(SYSDATE) ))
   AND  NVL(QPLINES.START_DATE_ACTIVE_SECOND,TRUNC(SYSDATE)) BETWEEN
           NVL(QPH.START_DATE_ACTIVE_SECOND, NVL(QPLINES.START_DATE_ACTIVE_SECOND,
               TRUNC(SYSDATE) )) AND
           NVL(QPH.END_DATE_ACTIVE_SECOND, NVL(QPLINES.START_DATE_ACTIVE_SECOND,
               TRUNC(SYSDATE) ))
   AND   NVL(QPLINES.ACTIVE_DATE_FIRST_TYPE,'X') =
                NVL(QPH.ACTIVE_DATE_FIRST_TYPE,NVL(QPLINES.ACTIVE_DATE_FIRST_TYPE,'X'))
   AND   NVL(QPLINES.ACTIVE_DATE_SECOND_TYPE,'X') =
                NVL(QPH.ACTIVE_DATE_SECOND_TYPE,NVL(QPLINES.ACTIVE_DATE_SECOND_TYPE,'X'))
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPL.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPL.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   ((QPH.CURRENCY_CODE IS NOT NULL AND QPH.CURRENCY_CODE = QPLINES.CURRENCY_CODE)
          OR
          QPH.CURRENCY_CODE IS NULL) -- optional currency
   AND   (QPL.MODIFIER_LEVEL_CODE = QPLINES.LINE_TYPE_CODE
          OR
          QPL.MODIFIER_LEVEL_CODE = G_LINE_GROUP AND QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL)
   AND   QPH.SOURCE_SYSTEM_CODE = QPRS.SOURCE_SYSTEM_CODE
   AND   QPLINES.REQUEST_TYPE_CODE   = QPRS.REQUEST_TYPE_CODE
   AND   QPH.ACTIVE_FLAG = G_YES
   AND   QPLAT_PROD.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   ORDER BY 1,2;


CURSOR L_OTHER_LIST_LINE_CUR (L_LINE_INDEX PLS_INTEGER,
                              L_LIST_LINE_ID NUMBER,
                              P_FREEZE_OVERRIDE_FLAG VARCHAR2)IS
SELECT /*+ ORDERED USE_NL(QPLAT_PROD QPA QPL QPH ) index(QPA QP_PRICING_ATTRIBUTES_N5) index(qph qp_list_headers_b_n7) l_other_list_line_cur */
                   QPLINES.LINE_INDEX,
                   QPL.LIST_LINE_ID,
                   QPL.ARITHMETIC_OPERATOR,
                   QPL.OPERAND,
                   QPL.PRICING_GROUP_SEQUENCE,
                   QPL.LIST_LINE_TYPE_CODE,
                   QPL.LIST_PRICE,
                   QPL.LIST_PRICE_UOM_CODE,
                   QPL.PERCENT_PRICE,
                   QPL.PRICING_PHASE_ID,
                   QPL.AUTOMATIC_FLAG,
                   QPL.OVERRIDE_FLAG,
                   QPL.PRINT_ON_INVOICE_FLAG,
                   QPL.MODIFIER_LEVEL_CODE,
                   QPL.BENEFIT_QTY,
                   QPL.BENEFIT_UOM_CODE,
                   QPL.LIST_LINE_NO,
                   QPL.ACCRUAL_FLAG,
                   QPL.ACCRUAL_CONVERSION_RATE,
                   QPL.ESTIM_ACCRUAL_RATE,
                   QPL.RECURRING_FLAG,
                   QPL.INCOMPATIBILITY_GRP_CODE,
                   QPL.PRICE_BY_FORMULA_ID,
                   QPL.PRODUCT_PRECEDENCE,
                   QPL.PRIMARY_UOM_FLAG,
                   QPA.PRODUCT_UOM_CODE,
                   QPA.EXCLUDER_FLAG,
                   QPH.ASK_FOR_FLAG,
                   QPH.LIST_TYPE_CODE,
                   QPH.ROUNDING_FACTOR,
                   QPLAT_PROD.LINE_DETAIL_INDEX,
                   QPL.LIST_HEADER_ID         LIST_HEADER_ID,
                   QPLAT_PROD.CONTEXT         PRODUCT_ATTRIBUTE_CONTEXT,
                   QPLAT_PROD.ATTRIBUTE       PRODUCT_ATTRIBUTE,
                   QPLAT_PROD.VALUE_FROM      PRODUCT_ATTR_VALUE_FROM,
                   QPLAT_PROD.VALUE_TO        PRODUCT_ATTR_VALUE_TO,
                   QPLAT_PROD.ATTRIBUTE_LEVEL PRODUCT_ATTRIBUTE_LEVEL,
                   QPLAT_PROD.ATTRIBUTE_TYPE  PRODUCT_ATTRIBUTE_TYPE,
                   QPL.AUTOMATIC_FLAG APPLIED_FLAG, -- fix bug 1915355
                   QPLAT_PROD.COMPARISON_OPERATOR_TYPE_CODE PRODUCT_OPERATOR_TYPE,
                   NULL                            PRICING_ATTRIBUTE_CONTEXT,
                   NULL                            PRICING_ATTRIBUTE,
                   NULL                            PRICING_ATTR_VALUE_FROM,
                   NULL                            PRICING_SETUP_VALUE_FROM,
                   NULL                            PRICING_SETUP_VALUE_TO,
                   NULL                            PRICING_ATTRIBUTE_LEVEL,
                   NULL                            PRICING_ATTRIBUTE_TYPE,
                   NULL                            PRICING_OPERATOR_TYPE,
                   NULL                            PRICING_ATTRIBUTE_DATATYPE
   FROM
         qp_npreq_lines_tmp QPLINES,
         qp_npreq_line_attrs_tmp QPLAT_PROD,
         QP_PRICING_ATTRIBUTES QPA,
         QP_LIST_HEADERS_B QPH,
         QP_LIST_LINES QPL,
         QP_PRICE_REQ_SOURCES QPRS
   WHERE QPA.PRICING_PHASE_ID = P_PRICING_PHASE_ID
   AND   QPA.QUALIFICATION_IND IN (QP_PREQ_GRP.G_YES_PROD_IND, QP_PREQ_GRP.G_YES_PROD_HDR_QUAL_IND,
                                   QP_PREQ_GRP.G_YES_PROD_LINE_QUAL_IND,QP_PREQ_GRP.G_YES_PROD_HDR_LINE_QUAL_IND)
   AND   QPLAT_PROD.CONTEXT = QPA.PRODUCT_ATTRIBUTE_CONTEXT
   AND   QPLAT_PROD.ATTRIBUTE = QPA.PRODUCT_ATTRIBUTE
   AND   QPLAT_PROD.VALUE_FROM = QPA.PRODUCT_ATTR_VALUE
   AND   QPLINES.PRICED_UOM_CODE = NVL(QPA.PRODUCT_UOM_CODE,QPLINES.PRICED_UOM_CODE)
   AND   (QPLINES.PRICE_FLAG = G_YES
             OR
             (QPLINES.PRICE_FLAG = G_PHASE
              AND
              P_FREEZE_OVERRIDE_FLAG = G_YES))
   AND   QPH.LIST_HEADER_ID = QPA.LIST_HEADER_ID
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--   AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
   AND   QPH.ASK_FOR_FLAG = G_YES
   AND   QPA.LIST_LINE_ID = L_LIST_LINE_ID
   AND   QPA.LIST_LINE_ID = QPL.LIST_LINE_ID
   AND   QPLAT_PROD.ATTRIBUTE_TYPE = G_PRODUCT_TYPE
   --AND   QPL.PRICING_PHASE_ID = p_pricing_phase_id
   --AND   QPL.QUALIFICATION_IND IN (QP_PREQ_GRP.G_YES_PROD_IND, QP_PREQ_GRP.G_YES_PROD_HDR_QUAL_IND,
   --                                QP_PREQ_GRP.G_YES_PROD_LINE_QUAL_IND,QP_PREQ_GRP.G_YES_PROD_HDR_LINE_QUAL_IND)
   AND   QPLAT_PROD.LINE_INDEX = L_LINE_INDEX
   AND   QPLINES.LINE_INDEX = L_LINE_INDEX
   AND    QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPH.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPH.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
    AND   NVL(QPLINES.START_DATE_ACTIVE_FIRST,TRUNC(SYSDATE)) BETWEEN
           NVL(QPH.START_DATE_ACTIVE_FIRST, NVL(QPLINES.START_DATE_ACTIVE_FIRST,
               TRUNC(SYSDATE) )) AND
           NVL(QPH.END_DATE_ACTIVE_FIRST, NVL(QPLINES.START_DATE_ACTIVE_FIRST,
               TRUNC(SYSDATE) ))
   AND  NVL(QPLINES.START_DATE_ACTIVE_SECOND,TRUNC(SYSDATE)) BETWEEN
           NVL(QPH.START_DATE_ACTIVE_SECOND, NVL(QPLINES.START_DATE_ACTIVE_SECOND,
               TRUNC(SYSDATE) )) AND
           NVL(QPH.END_DATE_ACTIVE_SECOND, NVL(QPLINES.START_DATE_ACTIVE_SECOND,
               TRUNC(SYSDATE) ))
   AND   NVL(QPLINES.ACTIVE_DATE_FIRST_TYPE,'X') =
                NVL(QPH.ACTIVE_DATE_FIRST_TYPE,NVL(QPLINES.ACTIVE_DATE_FIRST_TYPE,'X'))
   AND   NVL(QPLINES.ACTIVE_DATE_SECOND_TYPE,'X') =
                NVL(QPH.ACTIVE_DATE_SECOND_TYPE,NVL(QPLINES.ACTIVE_DATE_SECOND_TYPE,'X'))
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPL.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPL.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   ((QPH.CURRENCY_CODE IS NOT NULL AND QPH.CURRENCY_CODE = QPLINES.CURRENCY_CODE)
          OR
          QPH.CURRENCY_CODE IS NULL) -- optional currency
   AND   (QPL.MODIFIER_LEVEL_CODE = QPLINES.LINE_TYPE_CODE
          OR
          QPL.MODIFIER_LEVEL_CODE = G_LINE_GROUP AND QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL)
   AND   QPH.SOURCE_SYSTEM_CODE = QPRS.SOURCE_SYSTEM_CODE
   AND   QPLINES.REQUEST_TYPE_CODE   = QPRS.REQUEST_TYPE_CODE
   AND   QPH.ACTIVE_FLAG = G_YES
   AND   QPLAT_PROD.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
  UNION ALL
  SELECT /*+ ORDERED USE_NL(QPLATP_PROD QPA QPLAT_PRIC QPH QPL QPRS) index(QPA QP_PRICING_ATTRIBUTES_N5) index(qplat_pric qp_preq_line_attrs_tmp_N2) index(qph qp_list_headers_b_n7) l_other_list_line_cur */
                   QPLINES.LINE_INDEX,
                   QPL.LIST_LINE_ID,
                   QPL.ARITHMETIC_OPERATOR,
                   QPL.OPERAND,
                   QPL.PRICING_GROUP_SEQUENCE,
                   QPL.LIST_LINE_TYPE_CODE,
                   QPL.LIST_PRICE,
                   QPL.LIST_PRICE_UOM_CODE,
                   QPL.PERCENT_PRICE,
                   QPL.PRICING_PHASE_ID,
                   QPL.AUTOMATIC_FLAG,
                   QPL.OVERRIDE_FLAG,
                   QPL.PRINT_ON_INVOICE_FLAG,
                   QPL.MODIFIER_LEVEL_CODE,
                   QPL.BENEFIT_QTY,
                   QPL.BENEFIT_UOM_CODE,
                   QPL.LIST_LINE_NO,
                   QPL.ACCRUAL_FLAG,
                   QPL.ACCRUAL_CONVERSION_RATE,
                   QPL.ESTIM_ACCRUAL_RATE,
                   QPL.RECURRING_FLAG,
                   QPL.INCOMPATIBILITY_GRP_CODE,
                   QPL.PRICE_BY_FORMULA_ID,
                   QPL.PRODUCT_PRECEDENCE,
                   QPL.PRIMARY_UOM_FLAG,
                   QPA.PRODUCT_UOM_CODE,
                   QPA.EXCLUDER_FLAG,
                   QPH.ASK_FOR_FLAG,
                   QPH.LIST_TYPE_CODE,
                   QPH.ROUNDING_FACTOR,
                   QPLAT_PROD.LINE_DETAIL_INDEX,
                   QPL.LIST_HEADER_ID         LIST_HEADER_ID,
                   QPLAT_PROD.CONTEXT         PRODUCT_ATTRIBUTE_CONTEXT,
                   QPLAT_PROD.ATTRIBUTE       PRODUCT_ATTRIBUTE,
                   QPLAT_PROD.VALUE_FROM      PRODUCT_ATTR_VALUE_FROM,
                   QPLAT_PROD.VALUE_TO        PRODUCT_ATTR_VALUE_TO,
                   QPLAT_PROD.ATTRIBUTE_LEVEL PRODUCT_ATTRIBUTE_LEVEL,
                   QPLAT_PROD.ATTRIBUTE_TYPE  PRODUCT_ATTRIBUTE_TYPE,
                   QPL.AUTOMATIC_FLAG APPLIED_FLAG, -- shu fix bug 1915355
                   QPLAT_PROD.COMPARISON_OPERATOR_TYPE_CODE PRODUCT_OPERATOR_TYPE,
                   QPLAT_PRIC.CONTEXT              PRICING_ATTRIBUTE_CONTEXT,
                   QPLAT_PRIC.ATTRIBUTE            PRICING_ATTRIBUTE,
                   QPLAT_PRIC.VALUE_FROM           PRICING_ATTR_VALUE_FROM,
                   QPA.PRICING_ATTR_VALUE_FROM     PRICING_SETUP_VALUE_FROM,
                   QPA.PRICING_ATTR_VALUE_TO       PRICING_SETUP_VALUE_TO,
                   QPLAT_PRIC.ATTRIBUTE_LEVEL      PRICING_ATTRIBUTE_LEVEL,
                   QPLAT_PRIC.ATTRIBUTE_TYPE       PRICING_ATTRIBUTE_TYPE,
                   QPA.COMPARISON_OPERATOR_CODE    PRICING_OPERATOR_TYPE,
                   QPA.PRICING_ATTRIBUTE_DATATYPE   PRICING_ATTRIBUTE_DATATYPE
   FROM
         qp_npreq_lines_tmp QPLINES,
         qp_npreq_line_attrs_tmp QPLAT_PROD,
         QP_PRICING_ATTRIBUTES QPA,
         qp_npreq_line_attrs_tmp QPLAT_PRIC,
         QP_LIST_HEADERS_B QPH,
         QP_LIST_LINES QPL,
         QP_PRICE_REQ_SOURCES QPRS
   WHERE QPA.PRICING_PHASE_ID = p_pricing_phase_id
   AND   QPA.QUALIFICATION_IND IN (QP_PREQ_GRP.G_YES_PROD_PRIC_IND, QP_PREQ_GRP.G_YES_PROD_PRIC_HDR_QUAL_IND,
                            QP_PREQ_GRP.G_YES_PROD_PRIC_LINE_QUAL_IND,QP_PREQ_GRP.G_YES_PRIC_HDR_LINE_QUAL_IND)
   AND   QPLAT_PROD.CONTEXT = QPA.PRODUCT_ATTRIBUTE_CONTEXT
   AND   QPLAT_PROD.ATTRIBUTE = QPA.PRODUCT_ATTRIBUTE
   AND   QPLAT_PROD.VALUE_FROM = QPA.PRODUCT_ATTR_VALUE
   AND   QPLINES.PRICED_UOM_CODE = NVL(QPA.PRODUCT_UOM_CODE,QPLINES.PRICED_UOM_CODE)
   AND   (QPLINES.PRICE_FLAG = G_YES
             OR
             (QPLINES.PRICE_FLAG = G_PHASE
              AND
              P_FREEZE_OVERRIDE_FLAG = G_YES))
   AND   QPLAT_PRIC.CONTEXT = QPA.PRICING_ATTRIBUTE_CONTEXT
         AND QPLAT_PRIC.ATTRIBUTE = QPA.PRICING_ATTRIBUTE
         AND (QPLAT_PRIC.VALUE_FROM = QPA.PRICING_ATTR_VALUE_FROM
               OR
               QPA.COMPARISON_OPERATOR_CODE = G_OPERATOR_BETWEEN)
   AND QPLAT_PRIC.ATTRIBUTE_TYPE = G_PRICING_TYPE
   AND QPLAT_PRIC. PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   AND QPLAT_PROD.LINE_INDEX = QPLAT_PRIC.LINE_INDEX
   AND QPH.LIST_HEADER_ID = QPA.LIST_HEADER_ID
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--   AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
   AND   QPH.ASK_FOR_FLAG = G_YES
   AND   QPA.LIST_LINE_ID = L_LIST_LINE_ID
   AND   QPA.LIST_LINE_ID = QPL.LIST_LINE_ID
   AND   QPLAT_PROD.ATTRIBUTE_TYPE = G_PRODUCT_TYPE
   --AND   QPL.PRICING_PHASE_ID = p_pricing_phase_id
   --AND   QPL.QUALIFICATION_IND IN (QP_PREQ_GRP.G_YES_PROD_PRIC_IND, QP_PREQ_GRP.G_YES_PROD_PRIC_HDR_QUAL_IND,
   --                                QP_PREQ_GRP.G_YES_PROD_PRIC_LINE_QUAL_IND,QP_PREQ_GRP.G_YES_PRIC_HDR_LINE_QUAL_IND)
   AND   QPLAT_PROD.LINE_INDEX = L_LINE_INDEX
   AND   QPLINES.LINE_INDEX = L_LINE_INDEX
   AND    QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPH.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPH.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   NVL(QPLINES.START_DATE_ACTIVE_FIRST,TRUNC(SYSDATE)) BETWEEN
           NVL(QPH.START_DATE_ACTIVE_FIRST, NVL(QPLINES.START_DATE_ACTIVE_FIRST,
               TRUNC(SYSDATE) )) AND
           NVL(QPH.END_DATE_ACTIVE_FIRST, NVL(QPLINES.START_DATE_ACTIVE_FIRST,
               TRUNC(SYSDATE) ))
   AND  NVL(QPLINES.START_DATE_ACTIVE_SECOND,TRUNC(SYSDATE)) BETWEEN
           NVL(QPH.START_DATE_ACTIVE_SECOND, NVL(QPLINES.START_DATE_ACTIVE_SECOND,
               TRUNC(SYSDATE) )) AND
           NVL(QPH.END_DATE_ACTIVE_SECOND, NVL(QPLINES.START_DATE_ACTIVE_SECOND,
               TRUNC(SYSDATE) ))
   AND   NVL(QPLINES.ACTIVE_DATE_FIRST_TYPE,'X') =
                NVL(QPH.ACTIVE_DATE_FIRST_TYPE,NVL(QPLINES.ACTIVE_DATE_FIRST_TYPE,'X'))
   AND   NVL(QPLINES.ACTIVE_DATE_SECOND_TYPE,'X') =
                NVL(QPH.ACTIVE_DATE_SECOND_TYPE,NVL(QPLINES.ACTIVE_DATE_SECOND_TYPE,'X'))
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
           NVL(TRUNC(QPL.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
           AND NVL(TRUNC(QPL.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   ((QPH.CURRENCY_CODE IS NOT NULL AND QPH.CURRENCY_CODE = QPLINES.CURRENCY_CODE)
          OR
          QPH.CURRENCY_CODE IS NULL) -- optional currency
   AND   (QPL.MODIFIER_LEVEL_CODE = QPLINES.LINE_TYPE_CODE
          OR
          QPL.MODIFIER_LEVEL_CODE = G_LINE_GROUP AND QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL)
   AND   QPH.SOURCE_SYSTEM_CODE = QPRS.SOURCE_SYSTEM_CODE
   AND   QPLINES.REQUEST_TYPE_CODE   = QPRS.REQUEST_TYPE_CODE
   AND   QPH.ACTIVE_FLAG = G_YES
   AND   QPLAT_PROD.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
   ORDER BY 1,2;

/*
INDX,QP_PREQ_GRP.list_header_search.l_check_no_list_passed,- No Index Used-,NA,NA
*/
CURSOR L_CHECK_NO_LIST_PASSED IS
SELECT 'X'
FROM   qp_npreq_lines_tmp A
WHERE  PROCESSED_CODE IN (G_NO_LIST_PASSED,G_STS_LHS_NOT_FOUND)
AND    LINE_TYPE_CODE <> G_ORDER_LEVEL
AND (instr(PROCESS_STATUS,'FREEGOOD')=0); -- bug 2693700

/*
INDX,QP_PREQ_GRP.list_header_search.l_check_secondary_search,- No Index Used-,NA,NA
*/
CURSOR l_check_secondary_search IS
SELECT 'X'
FROM   qp_npreq_lines_tmp
WHERE  PROCESSED_CODE = G_STS_LHS_NOT_FOUND
AND    LINE_TYPE_CODE <> G_ORDER_LEVEL
AND (instr(PROCESS_STATUS,'FREEGOOD')=0); -- bug 2693700

/*
INDX,QP_PREQ_GRP.delete_invalid_pbh_children.l_check_deleted_pbh_cur,qp_npreq_ldets_tmp_N3,LINE_INDEX,1
INDX,QP_PREQ_GRP.delete_invalid_pbh_children.l_check_deleted_pbh_cur,qp_npreq_ldets_tmp_N3,PRICING_PHASE_ID,2
INDX,QP_PREQ_GRP.delete_invalid_pbh_children.l_check_deleted_pbh_cur,qp_npreq_ldets_tmp_N3,ASK_FOR_FLAG,3
INDX,QP_PREQ_GRP.delete_invalid_pbh_children.l_check_deleted_pbh_cur,qp_npreq_ldets_tmp_N3,CREATED_FROM_LIST_LINE_TYPE,4
*/
CURSOR l_chk_deleted_pbh_cur(p_line_index IN PLS_INTEGER,
                             p_pricing_phase_id NUMBER) IS
SELECT 'X'
FROM qp_npreq_ldets_tmp
WHERE created_from_list_line_type = G_PRICE_BREAK_TYPE
AND   line_index = p_line_index
AND   pricing_phase_id = p_pricing_phase_id
AND   pricing_status_code <> G_STATUS_NEW;

L_LINE_DETAIL_INDEX PLS_INTEGER;
L_OPERAND_CALCULATION_CODE VARCHAR2(30);
L_OPERAND_VALUE VARCHAR2(30);
L_PRICING_GROUP_SEQUENCE PLS_INTEGER;
L_STATUS_CODE VARCHAR2(30);
L_STATUS_TEXT VARCHAR2(240);
L_LIST_HEADER_ID NUMBER;
L_LIST_LINE_ID NUMBER;
l_incomp_list_line_id NUMBER;
l_incomp_return_status VARCHAR2(30);
l_price_list_line_id  NUMBER;
l_sec_price_list_line_id   NUMBER;
l_sec_incomp_list_line_id      NUMBER;
l_sec_incomp_return_status VARCHAR2(30);
L_LIST_LINE_TYPE_CODE VARCHAR2(30);
L_LIST_PRICE NUMBER;
L_LIST_PRICE_UOM_CODE VARCHAR2(30);
L_PERCENT_PRICE NUMBER;
L_RESULT_FLAG VARCHAR(1):='N';
L_LOOP_COUNT PLS_INTEGER := 0;
x_loop_count PLS_INTEGER := 0;
L_ROUTINE VARCHAR2(240):='ROUTINE:QP_PREQ_GRP.LIST_HEADER_SEARCH';
L_SECONDARY_LIST VARCHAR2(30);
E_NO_LIST_FOUND      EXCEPTION;
E_SEARCH_FLAG_ERROR  EXCEPTION;
L_DUMMY VARCHAR2(1);
L_ERROR_LINE_INDEX PLS_INTEGER;
L_HAVE_NOT_VALIDATED VARCHAR2(30):= G_NO;
L_EX_LINE_INDEX PLS_INTEGER:=-1;
L_EX_PRECEDENCE PLS_INTEGER:=99999999;
L_EX_LIST_LINE_ID PLS_INTEGER:=-1;
L_BAD_LIST_LINE_ID NUMBER:=-1;
L_FURTHER_SEARCH_SWITCH VARCHAR2(3):='OFF';
PERFORM_SEC_PL_SEARCH BOOLEAN := FALSE;
QUALIFIER_EXISTS_FLAG BOOLEAN := FALSE;
v_list_header_id	       NUMBER;
v_sec_list_header_id	  NUMBER;
v_sec_list_line_id	       NUMBER;
l_pricing_effective_date DATE;
q BINARY_INTEGER:=NULL;
l_line_quantity            NUMBER;
l_line_uom_code            VARCHAR2(30);
x_list_line_id             NUMBER;
l_return_status            VARCHAR2(240);
x_return_status            VARCHAR2(240);
x_return_status_txt        VARCHAR2(240);
l_error_status_code        VARCHAR2(30);
l_error_status_txt         VARCHAR2(240);
K PLS_INTEGER:=1;
M PLS_INTEGER:=1;
nROWS                      CONSTANT NUMBER := 5000;

lq_line_index              NUMBER := -9999;
lq_list_line_id            NUMBER := -9999;

E_ROUTINE_ERRORS       EXCEPTION;
BEGIN

IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
engine_debug('IN '|| L_ROUTINE);

END IF;

x_status_code := FND_API.G_RET_STS_SUCCESS;

IF (p_pricing_phase_id <> G_PRICE_LIST_PHASE_ID) THEN -- Only for modifiers ask for list headers/lines

IF (nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) <> G_YES) THEN -- price book
-- Validated List Headers / List Lines

qp_debug_util.tstart('L_VALIDATED_CUR_EXT','Cursor Loop L_VALIDATED_CUR exterior');

FOR J IN L_VALIDATED_CUR LOOP


     IF (J.ATTRIBUTE = G_PROMOTION_ATTRIBUTE) THEN

      lq_line_index              := -9999;
      lq_list_line_id            := -9999;

      L_LIST_HEADER_ID := TO_NUMBER(J.VALUE_FROM);
      IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
      ENGINE_DEBUG('Asked For List Header ID:'||L_LIST_HEADER_ID || 'Line : ' || J.LINE_INDEX);
      END IF;

           qp_debug_util.tstart('L_OTHER_LIST_CUR','Cursor Loop L_OTHER_LIST_CUR');


           FOR K IN L_OTHER_LIST_CUR (J.LINE_INDEX,
                                      L_LIST_HEADER_ID,
                                      P_FREEZE_OVERRIDE_FLAG)
           LOOP
            IF (lq_line_index <> j.line_index OR lq_list_line_id <> k.list_line_id) THEN

              IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
              engine_debug('List line id selected from asked for prom l_other_list_cur : '||K.list_line_id );
              END IF;
              L_LINE_DETAIL_INDEX := GET_LINE_DETAIL_INDEX;
		qp_debug_util.tstart('INSERT_LDETS','Inserting the ldets INSERT_LDETS');
              INSERT_LDETS(P_LINE_DETAIL_INDEX   => L_LINE_DETAIL_INDEX,
                   P_LINE_DETAIL_TYPE_CODE       => 'NULL',
                   P_LINE_INDEX                  => J.LINE_INDEX,
                   P_CREATED_FROM_LIST_HEADER_ID => L_LIST_HEADER_ID,
                   P_CREATED_FROM_LIST_LINE_ID   => K.LIST_LINE_ID,
                   P_CREATED_FROM_LIST_TYPE_CODE => K.LIST_TYPE_CODE,
                   P_CREATED_FROM_SQL            => 'LHS_MODIFIER ',
                   P_PRICING_PHASE_ID            => K.PRICING_PHASE_ID,
                   P_CREATED_FROM_LIST_LINE_TYPE => K.LIST_LINE_TYPE_CODE,
                   P_PRICING_GROUP_SEQUENCE      => K.PRICING_GROUP_SEQUENCE,
                   P_OPERAND_CALCULATION_CODE    => K.ARITHMETIC_OPERATOR,
                   P_OPERAND_VALUE               => K.OPERAND,
                   P_PRICING_STATUS_CODE         => G_STATUS_NEW,
                   P_PROCESSED_FLAG              => G_NOT_PROCESSED,
                   P_AUTOMATIC_FLAG              => K.AUTOMATIC_FLAG,
                   P_APPLIED_FLAG                => K.APPLIED_FLAG, -- fix bug 1915355
                   P_OVERRIDE_FLAG               => K.OVERRIDE_FLAG,
                   P_PRINT_ON_INVOICE_FLAG       => K.PRINT_ON_INVOICE_FLAG,
                   P_MODIFIER_LEVEL_CODE         => K.MODIFIER_LEVEL_CODE,
                   P_BENEFIT_QTY                 => K.BENEFIT_QTY,
                   P_BENEFIT_UOM_CODE            => K.BENEFIT_UOM_CODE,
                   P_LIST_LINE_NO                => K.LIST_LINE_NO,
                   P_ACCRUAL_FLAG                => K.ACCRUAL_FLAG,
                   P_ACCRUAL_CONVERSION_RATE     => K.ACCRUAL_CONVERSION_RATE,
                   P_ESTIM_ACCRUAL_RATE          => K.ESTIM_ACCRUAL_RATE,
                   P_RECURRING_FLAG              => K.RECURRING_FLAG,
                   P_INCOMPATABLILITY_GRP_CODE   => K.INCOMPATIBILITY_GRP_CODE,
                   P_PRICE_FORMULA_ID            => K.PRICE_BY_FORMULA_ID,
                   P_PRODUCT_PRECEDENCE          => K.PRODUCT_PRECEDENCE,
                   P_PRIMARY_UOM_FLAG            => K.PRIMARY_UOM_FLAG,
                   P_ASK_FOR_FLAG                => K.ASK_FOR_FLAG,
                   P_ROUNDING_FACTOR             => K.ROUNDING_FACTOR,
                   X_STATUS_CODE                 => L_STATUS_CODE,
                   X_STATUS_TEXT                 => L_STATUS_TEXT);
		qp_debug_util.tstop('INSERT_LDETS');
                   lq_line_index := j.line_index;
                   lq_list_line_id := k.list_line_id;

               END IF;

               --INSERT PRODUCT ATTRIBUTES
               G_LINE_INDEX_tbl(M)              := K.LINE_INDEX;
               G_LINE_DETAIL_INDEX_tbl(M)       := L_LINE_DETAIL_INDEX;
               G_ATTRIBUTE_LEVEL_tbl(M)         := K.PRODUCT_ATTRIBUTE_LEVEL;
               G_ATTRIBUTE_TYPE_tbl(M)          := K.PRODUCT_ATTRIBUTE_TYPE;
               G_LIST_HEADER_ID_TBL(M)          := K.LIST_HEADER_ID;
               G_LIST_LINE_ID_TBL(M)            := K.LIST_LINE_ID;
               G_CONTEXT_tbl(M)                 := K.PRODUCT_ATTRIBUTE_CONTEXT;
               G_ATTRIBUTE_tbl(M)               := K.PRODUCT_ATTRIBUTE;
               G_VALUE_FROM_tbl(M)              := K.PRODUCT_ATTR_VALUE_FROM;
               G_COMPARISON_OPERATOR_TYPE_tbl(M):= K.PRODUCT_OPERATOR_TYPE;
               G_APPLIED_FLAG_tbl(M)            := K.APPLIED_FLAG;
               G_PRICING_STATUS_CODE_tbl(M)     := G_STATUS_NEW;
               G_PRICING_STATUS_TEXT_tbl(M)     :='INSERTED IN VALIDATED ASKED FOR PROMOTION SEARCH';
               G_EXCLUDER_FLAG_TBL(M)           :=K.EXCLUDER_FLAG;
               G_PRODUCT_UOM_CODE_TBL(M)        :=K.PRODUCT_UOM_CODE;
               G_VALIDATED_FLAG_tbl(M)          := NULL;
               G_PRICING_ATTR_FLAG_tbl(M)       := NULL;
               G_SETUP_VALUE_FROM_tbl(M)        := NULL;
               G_SETUP_VALUE_TO_tbl(M)          := NULL;
               G_GROUPING_NUMBER_tbl(M)         := NULL;
               G_QUALIFIER_PRECEDENCE_tbl(M)    := NULL;
               G_DATATYPE_tbl(M)                := NULL;
               G_QUALIFIER_TYPE_TBL(M)          := NULL;
               G_PRICING_PHASE_ID_TBL_A(M)        := K.PRICING_PHASE_ID;
               G_INCOMP_GRP_CODE_TBL_A(M)         := K.INCOMPATIBILITY_GRP_CODE;
               G_LINE_DETAIL_TYPE_CODE_TBL_A(M)   := 'NULL';
               G_MODIFIER_LEVEL_CODE_TBL_A(M)     := K.MODIFIER_LEVEL_CODE;
               G_PRIMARY_UOM_FLAG_TBL_A(M)        := K.PRIMARY_UOM_FLAG;
               M:= M+1;


               IF (K.PRICING_ATTRIBUTE_CONTEXT IS NOT NULL) THEN
                --INSERT PRICING ATTRIBUTES
                G_LINE_INDEX_tbl(M)              := K.LINE_INDEX;
                G_LINE_DETAIL_INDEX_tbl(M)       := L_LINE_DETAIL_INDEX;
                G_ATTRIBUTE_LEVEL_tbl(M)         := K.PRICING_ATTRIBUTE_LEVEL;
                G_ATTRIBUTE_TYPE_tbl(M)          := K.PRICING_ATTRIBUTE_TYPE;
                G_LIST_HEADER_ID_TBL(M)          := K.LIST_HEADER_ID;
                G_LIST_LINE_ID_TBL(M)            := K.LIST_LINE_ID;
                G_CONTEXT_tbl(M)                 := K.PRICING_ATTRIBUTE_CONTEXT;
                G_ATTRIBUTE_tbl(M)               := K.PRICING_ATTRIBUTE;
                G_VALUE_FROM_tbl(M)              := K.PRICING_ATTR_VALUE_FROM;
                G_SETUP_VALUE_FROM_tbl(M)        := K.PRICING_SETUP_VALUE_FROM;
                G_SETUP_VALUE_TO_tbl(M)          := K.PRICING_SETUP_VALUE_TO;
                G_COMPARISON_OPERATOR_TYPE_tbl(M):= K.PRICING_OPERATOR_TYPE;
                G_APPLIED_FLAG_tbl(M)            := K.APPLIED_FLAG;
                G_PRICING_STATUS_CODE_tbl(M)     := G_STATUS_NEW;
                G_PRICING_STATUS_TEXT_tbl(M)     :='INSERTED IN VALIDATED ASKED FOR PROMOTION SEARCH';
                G_EXCLUDER_FLAG_TBL(M)           :=K.EXCLUDER_FLAG;
                G_PRODUCT_UOM_CODE_TBL(M)        :=K.PRODUCT_UOM_CODE;
                G_VALIDATED_FLAG_tbl(M)          := NULL;
                G_PRICING_ATTR_FLAG_tbl(M)       := NULL;
                G_GROUPING_NUMBER_tbl(M)         := NULL;
                G_QUALIFIER_PRECEDENCE_tbl(M)    := NULL;
                G_DATATYPE_tbl(M)                := K.PRICING_ATTRIBUTE_DATATYPE;
                G_QUALIFIER_TYPE_TBL(M)          := NULL;
                G_PRICING_PHASE_ID_TBL_A(M)        := K.PRICING_PHASE_ID;
                G_INCOMP_GRP_CODE_TBL_A(M)         := K.INCOMPATIBILITY_GRP_CODE;
                G_LINE_DETAIL_TYPE_CODE_TBL_A(M)   := 'NULL';
                G_MODIFIER_LEVEL_CODE_TBL_A(M)     := K.MODIFIER_LEVEL_CODE;
                G_PRIMARY_UOM_FLAG_TBL_A(M)        := K.PRIMARY_UOM_FLAG;
                M:= M+1;
               END IF;
               l_loop_count := l_loop_count +1;
           END LOOP;

	   qp_debug_util.tstop('L_OTHER_LIST_CUR');

      ELSE -- Asked for list line

        lq_line_index              := -9999;
        lq_list_line_id            := -9999;

        L_LIST_LINE_ID := to_number(J.VALUE_FROM);
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        ENGINE_DEBUG('Asked For List Line ID:'||L_LIST_LINE_ID || 'Line : ' || J.LINE_INDEX);
        ENGINE_DEBUG('Pricing Phase Id:'||p_pricing_phase_id );

        END IF;

	   qp_debug_util.tstart('L_OTHER_LIST_LINE_CUR','Cursor Loop L_OTHER_LIST_LINE_CUR');

           FOR K IN L_OTHER_LIST_LINE_CUR (J.LINE_INDEX,
                                           L_LIST_LINE_ID,
                                           P_FREEZE_OVERRIDE_FLAG)
           LOOP
            IF (lq_line_index <> j.line_index OR lq_list_line_id <> k.list_line_id) THEN
             IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
             engine_debug('List line id selected from asked for prom l_other_list_cur : '||K.list_line_id );
             END IF;
              L_LINE_DETAIL_INDEX := GET_LINE_DETAIL_INDEX;
		qp_debug_util.tstart('INSERT_LDETS','Inserting the ldets INSERT_LDETS');
              INSERT_LDETS(P_LINE_DETAIL_INDEX   => L_LINE_DETAIL_INDEX,
                   P_LINE_DETAIL_TYPE_CODE       => 'NULL',
                   P_LINE_INDEX                  => J.LINE_INDEX,
                   P_CREATED_FROM_LIST_HEADER_ID => K.LIST_HEADER_ID,
                   P_CREATED_FROM_LIST_LINE_ID   => K.LIST_LINE_ID,
                   P_CREATED_FROM_LIST_TYPE_CODE => K.LIST_TYPE_CODE,
                   P_CREATED_FROM_SQL            => 'LHS_MODIFIER ',
                   P_PRICING_PHASE_ID            => K.PRICING_PHASE_ID,
                   P_CREATED_FROM_LIST_LINE_TYPE => K.LIST_LINE_TYPE_CODE,
                   P_PRICING_GROUP_SEQUENCE      => K.PRICING_GROUP_SEQUENCE,
                   P_OPERAND_CALCULATION_CODE    => K.ARITHMETIC_OPERATOR,
                   P_OPERAND_VALUE               => K.OPERAND,
                   P_PRICING_STATUS_CODE         => G_STATUS_NEW,
                   P_PROCESSED_FLAG              => G_NOT_PROCESSED,
                   P_AUTOMATIC_FLAG              => K.AUTOMATIC_FLAG,
                   P_APPLIED_FLAG                => K.APPLIED_FLAG,
                   P_OVERRIDE_FLAG               => K.OVERRIDE_FLAG,
                   P_PRINT_ON_INVOICE_FLAG       => K.PRINT_ON_INVOICE_FLAG,
                   P_MODIFIER_LEVEL_CODE         => K.MODIFIER_LEVEL_CODE,
                   P_BENEFIT_QTY                 => K.BENEFIT_QTY,
                   P_BENEFIT_UOM_CODE            => K.BENEFIT_UOM_CODE,
                   P_LIST_LINE_NO                => K.LIST_LINE_NO,
                   P_ACCRUAL_FLAG                => K.ACCRUAL_FLAG,
                   P_ACCRUAL_CONVERSION_RATE     => K.ACCRUAL_CONVERSION_RATE,
                   P_ESTIM_ACCRUAL_RATE          => K.ESTIM_ACCRUAL_RATE,
                   P_RECURRING_FLAG              => K.RECURRING_FLAG,
                   P_INCOMPATABLILITY_GRP_CODE   => K.INCOMPATIBILITY_GRP_CODE,
                   P_PRICE_FORMULA_ID            => K.PRICE_BY_FORMULA_ID,
                   P_PRODUCT_PRECEDENCE          => K.PRODUCT_PRECEDENCE,
                   P_PRIMARY_UOM_FLAG            => K.PRIMARY_UOM_FLAG,
                   P_ASK_FOR_FLAG                => K.ASK_FOR_FLAG,
                   P_ROUNDING_FACTOR             => K.ROUNDING_FACTOR,
                   X_STATUS_CODE                 => L_STATUS_CODE,
                   X_STATUS_TEXT                 => L_STATUS_TEXT);
		qp_debug_util.tstop('INSERT_LDETS');
                   lq_line_index := j.line_index;
                   lq_list_line_id := k.list_line_id;

               END IF;

               --INSERT PRODUCT ATTRIBUTES
               G_LINE_INDEX_tbl(M)              := K.LINE_INDEX;
               G_LINE_DETAIL_INDEX_tbl(M)       := L_LINE_DETAIL_INDEX;
               G_ATTRIBUTE_LEVEL_tbl(M)         := K.PRODUCT_ATTRIBUTE_LEVEL;
               G_ATTRIBUTE_TYPE_tbl(M)          := K.PRODUCT_ATTRIBUTE_TYPE;
               G_LIST_HEADER_ID_TBL(M)          := K.LIST_HEADER_ID;
               G_LIST_LINE_ID_TBL(M)            := K.LIST_LINE_ID;
               G_CONTEXT_tbl(M)                 := K.PRODUCT_ATTRIBUTE_CONTEXT;
               G_ATTRIBUTE_tbl(M)               := K.PRODUCT_ATTRIBUTE;
               G_VALUE_FROM_tbl(M)              := K.PRODUCT_ATTR_VALUE_FROM;
               G_VALUE_TO_tbl(M)                := K.PRODUCT_ATTR_VALUE_TO;
               G_COMPARISON_OPERATOR_TYPE_tbl(M):= K.PRODUCT_OPERATOR_TYPE;
               G_APPLIED_FLAG_tbl(M)            := K.APPLIED_FLAG;
               G_PRICING_STATUS_CODE_tbl(M)     := G_STATUS_NEW;
               G_PRICING_STATUS_TEXT_tbl(M)     :='INSERTED IN VALIDATED ASKED FOR PROMOTION SEARCH';
               G_EXCLUDER_FLAG_TBL(M)           :=K.EXCLUDER_FLAG;
               G_PRODUCT_UOM_CODE_TBL(M)        :=K.PRODUCT_UOM_CODE;
               G_VALIDATED_FLAG_tbl(M)          := NULL;
               G_PRICING_ATTR_FLAG_tbl(M)       := NULL;
               G_SETUP_VALUE_FROM_tbl(M)        := NULL;
               G_SETUP_VALUE_TO_tbl(M)          := NULL;
               G_GROUPING_NUMBER_tbl(M)         := NULL;
               G_NO_QUALIFIERS_IN_GRP_tbl(M)    := NULL;
               G_QUALIFIER_PRECEDENCE_tbl(M)    := NULL;
               G_DATATYPE_tbl(M)                := NULL;
               G_QUALIFIER_TYPE_TBL(M)          := NULL;
               G_PRICING_PHASE_ID_TBL_A(M)        := K.PRICING_PHASE_ID;
               G_INCOMP_GRP_CODE_TBL_A(M)         := K.INCOMPATIBILITY_GRP_CODE;
               G_LINE_DETAIL_TYPE_CODE_TBL_A(M)   := 'NULL';
               G_MODIFIER_LEVEL_CODE_TBL_A(M)     := K.MODIFIER_LEVEL_CODE;
               G_PRIMARY_UOM_FLAG_TBL_A(M)        := K.PRIMARY_UOM_FLAG;
               M:= M+1;


               IF (K.PRICING_ATTRIBUTE_CONTEXT IS NOT NULL) THEN
                --INSERT PRICING ATTRIBUTES
                G_LINE_INDEX_tbl(M)              := K.LINE_INDEX;
                G_LINE_DETAIL_INDEX_tbl(M)       := L_LINE_DETAIL_INDEX;
                G_ATTRIBUTE_LEVEL_tbl(M)         := K.PRICING_ATTRIBUTE_LEVEL;
                G_ATTRIBUTE_TYPE_tbl(M)          := K.PRICING_ATTRIBUTE_TYPE;
                G_LIST_HEADER_ID_TBL(M)          := K.LIST_HEADER_ID;
                G_LIST_LINE_ID_TBL(M)            := K.LIST_LINE_ID;
                G_CONTEXT_tbl(M)                 := K.PRICING_ATTRIBUTE_CONTEXT;
                G_ATTRIBUTE_tbl(M)               := K.PRICING_ATTRIBUTE;
                G_VALUE_FROM_tbl(M)              := K.PRICING_ATTR_VALUE_FROM;
                G_SETUP_VALUE_FROM_tbl(M)        := K.PRICING_SETUP_VALUE_FROM;
                G_SETUP_VALUE_TO_tbl(M)          := K.PRICING_SETUP_VALUE_TO;
                G_COMPARISON_OPERATOR_TYPE_tbl(M):= K.PRICING_OPERATOR_TYPE;
                G_APPLIED_FLAG_tbl(M)            := K.APPLIED_FLAG;
                G_PRICING_STATUS_CODE_tbl(M)     := G_STATUS_NEW;
                G_PRICING_STATUS_TEXT_tbl(M)     :='INSERTED IN VALIDATED ASKED FOR PROMOTION SEARCH';
                G_EXCLUDER_FLAG_TBL(M)           :=K.EXCLUDER_FLAG;
                G_PRODUCT_UOM_CODE_TBL(M)        :=K.PRODUCT_UOM_CODE;
                G_VALIDATED_FLAG_tbl(M)          := NULL;
                G_PRICING_ATTR_FLAG_tbl(M)       := NULL;
                G_GROUPING_NUMBER_tbl(M)         := NULL;
                G_NO_QUALIFIERS_IN_GRP_tbl(M)    := NULL;
                G_QUALIFIER_PRECEDENCE_tbl(M)    := NULL;
                G_DATATYPE_tbl(M)                := K.PRICING_ATTRIBUTE_DATATYPE;
                G_QUALIFIER_TYPE_TBL(M)          := NULL;
                G_VALUE_TO_tbl(M)                := NULL;
                G_PRICING_PHASE_ID_TBL_A(M)        := K.PRICING_PHASE_ID;
                G_INCOMP_GRP_CODE_TBL_A(M)         := K.INCOMPATIBILITY_GRP_CODE;
                G_LINE_DETAIL_TYPE_CODE_TBL_A(M)   := 'NULL';
                G_MODIFIER_LEVEL_CODE_TBL_A(M)     := K.MODIFIER_LEVEL_CODE;
                G_PRIMARY_UOM_FLAG_TBL_A(M)        := K.PRIMARY_UOM_FLAG;
                M:= M+1;
               END IF;
               l_loop_count := l_loop_count +1;
           END LOOP;

           qp_debug_util.tstop('L_OTHER_LIST_LINE_CUR');


      END IF; -- IF j.attribute = G_PROMOTION_ATTRIBUTE

           IF (M>1) THEN
		qp_debug_util.tstart('INSERT_LINE_ATTRS2','Inserting the line attrs INSERT_LINE_ATTRS2');
            INSERT_LINE_ATTRS2
            (p_LINE_INDEX_tbl                =>G_LINE_INDEX_tbl,
             p_LINE_DETAIL_INDEX_tbl         =>G_LINE_DETAIL_INDEX_tbl,
             p_ATTRIBUTE_LEVEL_tbl           =>G_ATTRIBUTE_LEVEL_tbl,
             p_ATTRIBUTE_TYPE_tbl            =>G_ATTRIBUTE_TYPE_tbl,
             p_LIST_HEADER_ID_tbl            =>G_LIST_HEADER_ID_tbl,
             p_LIST_LINE_ID_tbl              =>G_LIST_LINE_ID_tbl,
             p_CONTEXT_tbl                   =>G_CONTEXT_tbl,
             p_ATTRIBUTE_tbl                 =>G_ATTRIBUTE_tbl,
             p_VALUE_FROM_tbl                =>G_VALUE_FROM_tbl,
             p_SETUP_VALUE_FROM_tbl          =>G_SETUP_VALUE_FROM_tbl,
             p_VALUE_TO_tbl                  =>G_VALUE_TO_tbl,
             p_SETUP_VALUE_TO_tbl            =>G_SETUP_VALUE_TO_tbl,
             p_GROUPING_NUMBER_tbl           => G_GROUPING_NUMBER_tbl,
             p_NO_QUALIFIERS_IN_GRP_tbl      =>G_NO_QUALIFIERS_IN_GRP_tbl,
             p_COMPARISON_OPERATOR_TYPE_tbl  =>G_COMPARISON_OPERATOR_TYPE_tbl,
             p_VALIDATED_FLAG_tbl            =>G_VALIDATED_FLAG_tbl,
             p_APPLIED_FLAG_tbl              =>G_APPLIED_FLAG_tbl,
             p_PRICING_STATUS_CODE_tbl       =>G_PRICING_STATUS_CODE_tbl,
             p_PRICING_STATUS_TEXT_tbl       =>G_PRICING_STATUS_TEXT_tbl,
             p_QUALIFIER_PRECEDENCE_tbl      =>G_QUALIFIER_PRECEDENCE_tbl,
             p_DATATYPE_tbl                  =>G_DATATYPE_tbl,
             p_PRICING_ATTR_FLAG_tbl         =>G_PRICING_ATTR_FLAG_tbl,
             p_QUALIFIER_TYPE_tbl            =>G_QUALIFIER_TYPE_TBL,
             p_product_uom_code_tbl          =>G_PRODUCT_UOM_CODE_TBL,
             p_excluder_flag_tbl             =>G_EXCLUDER_FLAG_TBL,
             p_PRICING_PHASE_ID_TBL          =>G_PRICING_PHASE_ID_TBL_A,
             p_INCOMPATABILITY_GRP_CODE_TBL  =>G_INCOMP_GRP_CODE_TBL_A,
             p_LINE_DETAIL_TYPE_CODE_TBL     =>G_LINE_DETAIL_TYPE_CODE_TBL_A,
             p_MODIFIER_LEVEL_CODE_TBL       =>G_MODIFIER_LEVEL_CODE_TBL_A,
             p_PRIMARY_UOM_FLAG_TBL          =>G_PRIMARY_UOM_FLAG_TBL_A,
             x_status_code                   =>l_status_code,
             x_status_text                   =>l_status_text);
		qp_debug_util.tstop('INSERT_LINE_ATTRS2');
           IF l_status_code = FND_API.G_RET_STS_ERROR THEN
                RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
           END IF;

           END IF;
	   M:=1;

END LOOP;
qp_debug_util.tstop('L_VALIDATED_CUR_EXT');
-- End Validated List Headers / List Lines
END IF; -- if not price book

ELSE -- is a price list phase
lq_line_index              := -9999;
lq_list_line_id            := -9999;

if G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN  /*vivek*/
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('cursor open l_list_cur_currency-multi-currency TRUE');

  END IF;
OPEN l_list_cur_currency;
qp_debug_util.tstart('L_LIST_CUR_CURRENCY','Cursor Loop l_list_cur_currency');
else -- vivek, multi currency not installed, not used
OPEN l_list_cur;
qp_debug_util.tstart('L_LIST_CUR','Cursor Loop l_list_cur');
end if; -- vivek, multi currency installed
qp_debug_util.tstart('L_LIST_CUR/CURRENCY_FETCH','Cursor Loop L_LIST_CUR/CURRENCY_FETCH');
LOOP
  G_LINE_INDEX_TBL_P.delete;
  G_LIST_LINE_ID_TBL_P.delete;
  G_LIST_HEADER_ID_TBL_P.delete;
  G_OPER_CALCULATION_CODE_TBL_P.delete;
  G_OPERAND_VALUE_TBL_P.delete;
  G_PRICING_GROUP_SEQUENCE_TBL_P.delete;
  G_LIST_LINE_TYPE_TBL_P.delete;
  G_PRICING_PHASE_ID_TBL_P.delete;
  G_AUTOMATIC_FLAG_TBL_P.delete;
  G_INCOMP_GRP_CODE_TBL_P.delete;
  G_PRICE_FORMULA_ID_TBL_P.delete;
  G_PRODUCT_PRECEDENCE_TBL_P.delete;
  G_PRIMARY_UOM_FLAG_TBL_P.delete;
  G_MODIFIER_LEVEL_CODE_TBL_P.delete;
  G_LIST_LINE_NO_TBL_P.delete;
  G_PRODUCT_UOM_CODE_TBL_P.delete;
  G_EXCLUDER_FLAG_TBL_P.delete;
  G_LIST_TYPE_CODE_TBL_P.delete;
  G_ROUNDING_FACTOR_TBL_P.delete;
  G_CONTEXT_TBL_P.delete;
  G_ATTRIBUTE_TBL_P.delete;
  G_VALUE_FROM_TBL_P.delete;
  G_ATTRIBUTE_LEVEL_TBL_P.delete;
  G_ATTRIBUTE_TYPE_TBL_P.delete;
  G_APPLIED_FLAG_TBL_P.delete;
  G_CONTEXT_TBL_PR.delete;
  G_ATTRIBUTE_TBL_PR.delete;
  G_VALUE_FROM_TBL_PR.delete;
  G_SETUP_VALUE_FROM_TBL_PR.delete;
  G_SETUP_VALUE_TO_TBL_PR.delete;
  G_ATTRIBUTE_LEVEL_TBL_PR.delete;
  G_ATTRIBUTE_TYPE_TBL_PR.delete;
  G_OPERATOR_TYPE_TBL_PR.delete;
  G_DATATYPE_TBL_PR.delete;
  G_BREAK_UOM_TBL_P.delete; /* Proration */
  G_BREAK_CONTEXT_TBL_P.delete; /* Proration */
  G_BREAK_ATTRIBUTE_TBL_P.delete; /* Proration */
  G_DERIVED_QUALIFIER_FLAG_TBL_Q.delete;    -- Added for TCA
  G_PRICE_BREAK_TYPE_CODE_TBL_P.delete;

if G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN  /*vivek*/
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('cursor l_list_cur_currency-multi-currency TRUE - delete tables');
  END IF;
  G_CURRENCY_DETAIL_ID_TBL_P.delete; /* sunilpandey */
  G_CURRENCY_HEADER_ID_TBL_P.delete; /* vivek */
  G_SELLING_ROUNDING_TBL_P.delete; /* vivek */
  G_ORDER_CURRENCY_TBL_P.delete; /* vivek */
  G_PRICING_EFFECTIVE_DATE_TBL_P.delete; /* vivek */
  G_BASE_CURRENCY_CODE_TBL_P.delete; /* vivek */
end if; /* vivek */

if G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN  /*vivek*/
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('cursor l_list_cur_currency-multi-currency TRUE - bulk fetch');

  END IF;

FETCH l_list_cur_currency BULK COLLECT INTO
    G_LINE_INDEX_TBL_P
  , G_LIST_LINE_ID_TBL_P
  , G_OPER_CALCULATION_CODE_TBL_P
  , G_OPERAND_VALUE_TBL_P
  , G_PRICING_GROUP_SEQUENCE_TBL_P
  , G_LIST_LINE_TYPE_TBL_P
  , G_PRICING_PHASE_ID_TBL_P
  , G_AUTOMATIC_FLAG_TBL_P
  , G_INCOMP_GRP_CODE_TBL_P
  , G_PRICE_FORMULA_ID_TBL_P
  , G_PRODUCT_PRECEDENCE_TBL_P
  , G_PRIMARY_UOM_FLAG_TBL_P
  , G_MODIFIER_LEVEL_CODE_TBL_P
  , G_LIST_LINE_NO_TBL_P
  , G_PRODUCT_UOM_CODE_TBL_P
  , G_EXCLUDER_FLAG_TBL_P
  , G_LIST_TYPE_CODE_TBL_P
  , G_ROUNDING_FACTOR_TBL_P
  , G_LIST_HEADER_ID_TBL_P
  , G_CONTEXT_TBL_P
  , G_ATTRIBUTE_TBL_P
  , G_VALUE_FROM_TBL_P
  , G_ATTRIBUTE_LEVEL_TBL_P
  , G_ATTRIBUTE_TYPE_TBL_P
  , G_APPLIED_FLAG_TBL_P
  , G_CONTEXT_TBL_PR
  , G_ATTRIBUTE_TBL_PR
  , G_VALUE_FROM_TBL_PR
  , G_SETUP_VALUE_FROM_TBL_PR
  , G_SETUP_VALUE_TO_TBL_PR
  , G_ATTRIBUTE_LEVEL_TBL_PR
  , G_ATTRIBUTE_TYPE_TBL_PR
  , G_OPERATOR_TYPE_TBL_PR
  , G_DATATYPE_TBL_PR
  , G_CURRENCY_DETAIL_ID_TBL_P /* sunilpandey */
  , G_CURRENCY_HEADER_ID_TBL_P /* vivek */
  , G_SELLING_ROUNDING_TBL_P /* vivek */
  , G_ORDER_CURRENCY_TBL_P /* vivek */
  , G_PRICING_EFFECTIVE_DATE_TBL_P /* vivek */
  , G_BASE_CURRENCY_CODE_TBL_P
  , G_BREAK_UOM_TBL_P /* Proration */
  , G_BREAK_CONTEXT_TBL_P /* Proration */
  , G_BREAK_ATTRIBUTE_TBL_P /* Proration */
  , G_PRICE_BREAK_TYPE_CODE_TBL_P --[julin] for price book
     LIMIT nROWS;/* vivek */
   EXIT WHEN G_LINE_INDEX_TBL_P.COUNT = 0;
else -- vivek, multi currency not installed, not used
FETCH l_list_cur BULK COLLECT INTO
    G_LINE_INDEX_TBL_P
  , G_LIST_LINE_ID_TBL_P
  , G_OPER_CALCULATION_CODE_TBL_P
  , G_OPERAND_VALUE_TBL_P
  , G_PRICING_GROUP_SEQUENCE_TBL_P
  , G_LIST_LINE_TYPE_TBL_P
  , G_PRICING_PHASE_ID_TBL_P
  , G_AUTOMATIC_FLAG_TBL_P
  , G_INCOMP_GRP_CODE_TBL_P
  , G_PRICE_FORMULA_ID_TBL_P
  , G_PRODUCT_PRECEDENCE_TBL_P
  , G_PRIMARY_UOM_FLAG_TBL_P
  , G_MODIFIER_LEVEL_CODE_TBL_P
  , G_LIST_LINE_NO_TBL_P
  , G_PRODUCT_UOM_CODE_TBL_P
  , G_EXCLUDER_FLAG_TBL_P
  , G_LIST_TYPE_CODE_TBL_P
  , G_ROUNDING_FACTOR_TBL_P
  , G_LIST_HEADER_ID_TBL_P
  , G_CONTEXT_TBL_P
  , G_ATTRIBUTE_TBL_P
  , G_VALUE_FROM_TBL_P
  , G_ATTRIBUTE_LEVEL_TBL_P
  , G_ATTRIBUTE_TYPE_TBL_P
  , G_APPLIED_FLAG_TBL_P
  , G_CONTEXT_TBL_PR
  , G_ATTRIBUTE_TBL_PR
  , G_VALUE_FROM_TBL_PR
  , G_SETUP_VALUE_FROM_TBL_PR
  , G_SETUP_VALUE_TO_TBL_PR
  , G_ATTRIBUTE_LEVEL_TBL_PR
  , G_ATTRIBUTE_TYPE_TBL_PR
  , G_OPERATOR_TYPE_TBL_PR
  , G_DATATYPE_TBL_PR
  , G_BREAK_UOM_TBL_P /* Proration */
  , G_BREAK_CONTEXT_TBL_P /* Proration */
  , G_BREAK_ATTRIBUTE_TBL_P /* Proration */
  , G_PRICE_BREAK_TYPE_CODE_TBL_P --[julin] for price book
    LIMIT nROWS;
   EXIT WHEN G_LINE_INDEX_TBL_P.COUNT = 0;
end if; -- vivek, multi currency installed

 IF (G_LINE_INDEX_TBL_P.COUNT > 0 ) THEN

  FOR I in G_LINE_INDEX_TBL_P.FIRST .. G_LINE_INDEX_TBL_P.LAST LOOP

            IF (lq_line_index <> g_line_index_tbl_p(I) OR lq_list_line_id <> g_list_line_id_tbl_p(I)) THEN

              L_LINE_DETAIL_INDEX := GET_LINE_DETAIL_INDEX;

                    G_LINE_INDEX_LD_TBL(M)                :=G_LINE_INDEX_TBL_P(I);
                    G_LINE_DETAIL_INDEX_LD_TBL(M)         :=L_LINE_DETAIL_INDEX;
                    G_LIST_HEADER_ID_LD_TBL(M)            :=G_LIST_HEADER_ID_TBL_P(I);
                    G_LIST_LINE_ID_LD_TBL(M)              :=G_LIST_LINE_ID_TBL_P(I);
                    G_PRICING_STATUS_CODE_LD_TBL(M)       :=G_STATUS_NEW;
                    G_PRICING_STATUS_TEXT_LD_TBL(M)       :='INSERTED IN L_LIST_CUR';
                    G_APPLIED_FLAG_LD_TBL(M)              :=G_AUTOMATIC_FLAG_TBL_P(I);
                    G_PROCESSED_FLAG_LD_TBL(M)            :=G_NOT_PROCESSED;
                    G_LINE_DETAIL_TYPE_CODE_TBL(M)        :='NULL';
                    G_PRICE_BREAK_TYPE_CODE_TBL(M)        :=G_PRICE_BREAK_TYPE_CODE_TBL_P(I); --[julin] for price book
                    G_LIST_LINE_TYPE_TBL(M)               :=G_LIST_LINE_TYPE_TBL_P(I);
                    G_LIST_TYPE_CODE_TBL(M)               :=G_LIST_TYPE_CODE_TBL_P(I);
                    G_CREATED_FROM_SQL_TBL(M)             :='INSERTED IN L_LIST_CUR';
                    G_PRICING_GROUP_SEQUENCE_TBL(M)       :=G_PRICING_GROUP_SEQUENCE_TBL_P(I);
                    G_PRICING_PHASE_ID_TBL(M)             :=G_PRICING_PHASE_ID_TBL_P(I);
                    G_OPERAND_CALCULATION_CODE_TBL(M)     :=G_OPER_CALCULATION_CODE_TBL_P(I);
                    G_OPERAND_VALUE_TBL(M)                :=G_OPERAND_VALUE_TBL_P(I);
                    G_PRICE_FORMULA_ID_TBL(M)             :=G_PRICE_FORMULA_ID_TBL_P(I);
                    G_PRODUCT_PRECEDENCE_TBL(M)           :=G_PRODUCT_PRECEDENCE_TBL_P(I);
                    G_INCOMP_GRP_CODE_TBL(M)              :=G_INCOMP_GRP_CODE_TBL_P(I);
                    G_AUTOMATIC_FLAG_TBL(M)               :=G_AUTOMATIC_FLAG_TBL_P(I);
                    G_PRIMARY_UOM_FLAG_TBL(M)             :=G_PRIMARY_UOM_FLAG_TBL_P(I);
                    G_MODIFIER_LEVEL_CODE_TBL(M)          :=G_MODIFIER_LEVEL_CODE_TBL_P(I);
                    G_LIST_LINE_NO_TBL(M)                 :=G_LIST_LINE_NO_TBL_P(I);
                    G_ROUNDING_FACTOR_TBL(M)              :=G_ROUNDING_FACTOR_TBL_P(I);
                    G_BREAK_UOM_TBL(M)                    :=G_BREAK_UOM_TBL_P(I); /* Proration */
                    G_BREAK_CONTEXT_TBL(M)                :=G_BREAK_CONTEXT_TBL_P(I); /* Proration */
                    G_BREAK_ATTRIBUTE_TBL(M)              :=G_BREAK_ATTRIBUTE_TBL_P(I); /* Proration */
               if G_MULTI_CURRENCY_PROFILE = 'Y' and
                  G_USE_MULTI_CURRENCY = 'Y' THEN  /*vivek*/
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('cursor l_list_cur_currency-multi-currency TRUE - populate tables');
  END IF;
                    G_CURRENCY_DETAIL_ID_TBL(M)          := G_CURRENCY_DETAIL_ID_TBL_P(I); /* sunilpandey */
                    G_CURRENCY_HEADER_ID_TBL(M)          := G_CURRENCY_HEADER_ID_TBL_P(I); /* vivek */
                    G_SELLING_ROUNDING_TBL(M)     := G_SELLING_ROUNDING_TBL_P(I); /* vivek */
                    G_ORDER_CURRENCY_TBL(M)              := G_ORDER_CURRENCY_TBL_P(I); /* vivek */
                    G_PRICING_EFFECTIVE_DATE_TBL(M)      := G_PRICING_EFFECTIVE_DATE_TBL_P(I); /* vivek */
                    G_BASE_CURRENCY_CODE_TBL(M)          := G_BASE_CURRENCY_CODE_TBL_P(I); /* vivek */
               end if;  /* vivek */
                    M := M + 1;
                    lq_line_index := g_line_index_tbl_p(I);
                    lq_list_line_id := g_list_line_id_tbl_p(I);
                    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                    engine_debug('Rounding Factor: ' || g_rounding_factor_tbl_p(i));
                    END IF;
            END IF;

                  --INSERT PRODUCT ATTRIBUTES
                   G_LINE_INDEX_tbl(K)              :=G_LINE_INDEX_TBL_P(I);
                   G_ATTRIBUTE_LEVEL_tbl(K)         :=G_ATTRIBUTE_LEVEL_TBL_P(I);
                   G_ATTRIBUTE_TYPE_tbl(K)          :=G_ATTRIBUTE_TYPE_TBL_P(I);
                   G_CONTEXT_tbl(K)                 :=G_CONTEXT_TBL_P(I);
                   G_ATTRIBUTE_tbl(K)               :=G_ATTRIBUTE_TBL_P(I);
                   G_VALUE_FROM_tbl(K)              :=G_VALUE_FROM_TBL_P(I);
                   G_COMPARISON_OPERATOR_TYPE_tbl(K):=NULL;
                   G_VALIDATED_FLAG_tbl(K)          :=G_NO;
                   G_APPLIED_FLAG_tbl(K)            :=G_APPLIED_FLAG_TBL_P(I);
                   G_PRICING_STATUS_CODE_tbl(K)     :=G_STATUS_NEW;
                   G_PRICING_ATTR_FLAG_tbl(K)       :=G_NO;
                   G_LINE_DETAIL_INDEX_tbl(K)       :=L_LINE_DETAIL_INDEX;
                   G_LIST_HEADER_ID_tbl(K)          :=G_LIST_HEADER_ID_TBL_P(I);
                   G_LIST_LINE_ID_tbl(K)            :=G_LIST_LINE_ID_TBL_P(I);
                   G_SETUP_VALUE_FROM_tbl(K)        :=NULL;
                   G_SETUP_VALUE_TO_tbl(K)          :=NULL;
                   G_GROUPING_NUMBER_tbl(K)         :=NULL;
                   G_PRICING_STATUS_TEXT_tbl(K)     :='INSERTED IN L_LIST_CUR';
                   G_QUALIFIER_PRECEDENCE_tbl(K)    :=NULL;
                   G_DATATYPE_tbl(K)                :=NULL;
                   G_EXCLUDER_FLAG_TBL(K)           :=G_EXCLUDER_FLAG_TBL_P(I);
                   G_PRODUCT_UOM_CODE_TBL(K)        :=G_PRODUCT_UOM_CODE_TBL_P(I);
                   G_QUALIFIER_TYPE_TBL(K)          :=NULL;
                   G_PRICING_PHASE_ID_TBL_A(K)      :=G_PRICING_PHASE_ID_TBL_P(I);
                   G_INCOMP_GRP_CODE_TBL_A(K)       :=G_INCOMP_GRP_CODE_TBL_P(I);
                   G_LINE_DETAIL_TYPE_CODE_TBL_A(K) :='NULL';
                   G_MODIFIER_LEVEL_CODE_TBL_A(K)   :=G_MODIFIER_LEVEL_CODE_TBL_P(I);
                   G_PRIMARY_UOM_FLAG_TBL_A(K)      :=G_PRIMARY_UOM_FLAG_TBL_P(I);
                   K:= K+1;

                   --INSERT PRICING ATTRIBUTES
                   IF (G_CONTEXT_TBL_PR(I) IS NOT NULL) THEN
                    G_LINE_INDEX_tbl(K)              :=G_LINE_INDEX_TBL_P(I);
                    G_ATTRIBUTE_LEVEL_tbl(K)         :=G_ATTRIBUTE_LEVEL_TBL_PR(I);
                    G_ATTRIBUTE_TYPE_tbl(K)          :=G_ATTRIBUTE_TYPE_TBL_PR(I);
                    G_CONTEXT_tbl(K)                 :=G_CONTEXT_TBL_PR(I);
                    G_ATTRIBUTE_tbl(K)               :=G_ATTRIBUTE_TBL_PR(I);
                    G_VALUE_FROM_tbl(K)              :=G_VALUE_FROM_TBL_PR(I);
                    G_COMPARISON_OPERATOR_TYPE_tbl(K):=G_OPERATOR_TYPE_TBL_PR(I);
                    G_VALIDATED_FLAG_tbl(K)          :=G_NO;
                    G_APPLIED_FLAG_tbl(K)            :=G_APPLIED_FLAG_TBL_P(I);
                    G_PRICING_STATUS_CODE_tbl(K)     :=G_STATUS_NEW;
                    G_PRICING_ATTR_FLAG_tbl(K)       :=NULL;
                    G_LINE_DETAIL_INDEX_tbl(K)       :=L_LINE_DETAIL_INDEX;
                    G_LIST_HEADER_ID_tbl(K)          :=G_LIST_HEADER_ID_TBL_P(I);
                    G_LIST_LINE_ID_tbl(K)            :=G_LIST_LINE_ID_TBL_P(I);
                    G_SETUP_VALUE_FROM_tbl(K)        :=G_SETUP_VALUE_FROM_TBL_PR(I);
                    G_SETUP_VALUE_TO_tbl(K)          :=G_SETUP_VALUE_TO_TBL_PR(I);
                    G_GROUPING_NUMBER_tbl(K)         :=NULL;
                    G_PRICING_STATUS_TEXT_tbl(K)     :='INSERTED IN L_LIST_CUR';
                    G_QUALIFIER_PRECEDENCE_tbl(K)    :=NULL;
                    G_DATATYPE_tbl(K)                :=G_DATATYPE_TBL_PR(I);
                    G_EXCLUDER_FLAG_TBL(K)           :=G_EXCLUDER_FLAG_TBL_P(I);
                    G_PRODUCT_UOM_CODE_TBL(K)        :=G_PRODUCT_UOM_CODE_TBL_P(I);
                    G_QUALIFIER_TYPE_TBL(K)          :=NULL;
                    G_PRICING_PHASE_ID_TBL_A(K)      :=G_PRICING_PHASE_ID_TBL_P(I);
                    G_INCOMP_GRP_CODE_TBL_A(K)       :=G_INCOMP_GRP_CODE_TBL_P(I);
                    G_LINE_DETAIL_TYPE_CODE_TBL_A(K) :='NULL';
                    G_MODIFIER_LEVEL_CODE_TBL_A(K)   :=G_MODIFIER_LEVEL_CODE_TBL_P(I);
                    G_PRIMARY_UOM_FLAG_TBL_A(K)      :=G_PRIMARY_UOM_FLAG_TBL_P(I);
                    K:= K+1;
                  END IF;

                l_loop_count := l_loop_count +1;
                IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                engine_debug('Primary List Validated Search Count : ' || l_loop_count);
                END IF;
   END LOOP;
 END IF ;

END LOOP;
qp_debug_util.tstop('L_LIST_CUR/CURRENCY_FETCH');
if G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN  /*vivek*/
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('cursor close l_list_cur_currency-multi-currency TRUE');
  END IF;
CLOSE l_list_cur_currency;

qp_debug_util.tstop('L_LIST_CUR_CURRENCY');
else -- vivek, multi currency not installed, not used
CLOSE l_list_cur;
qp_debug_util.tstop('L_LIST_CUR');
end if; -- vivek, multi currency installed

END IF; -- p_pricing_phase_id <> G_PRICE_LIST_PHASE_ID

IF M > 1 THEN
qp_debug_util.tstart('INSERT_LDETS_PRICE_LIST_MULT/NON_MULTI','Inserting INSERT_LDETS_PRICE_LIST_MULT/NON_MULTI');
 if G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN  /*vivek*/
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('cursor l_list_cur_currency-multi-currency TRUE - insert_ldets2');
  END IF;
  INSERT_LDETS_PRICE_LIST_MULT( p_LINE_DETAIL_index      => G_LINE_DETAIL_INDEX_LD_TBL,
                 p_LINE_DETAIL_TYPE_CODE  => G_LINE_DETAIL_TYPE_CODE_TBL,
                 p_PRICE_BREAK_TYPE_CODE  => G_PRICE_BREAK_TYPE_CODE_TBL,
                 p_LINE_INDEX             => G_LINE_INDEX_LD_TBL,
                 p_CREATED_FROM_LIST_HEADER_ID  =>G_LIST_HEADER_ID_LD_TBL,
                 p_CREATED_FROM_LIST_LINE_ID    =>G_LIST_LINE_ID_LD_TBL,
                 p_CREATED_FROM_LIST_LINE_TYPE  =>G_LIST_LINE_TYPE_TBL,
                 p_CREATED_FROM_LIST_TYPE_CODE  =>G_LIST_TYPE_CODE_TBL,
                 p_CREATED_FROM_SQL             =>G_CREATED_FROM_SQL_TBL,
                 p_PRICING_GROUP_SEQUENCE       =>G_PRICING_GROUP_SEQUENCE_TBL,
                 P_PRICING_PHASE_ID             =>G_PRICING_PHASE_ID_TBL,
                 p_OPERAND_CALCULATION_CODE     =>G_OPERAND_CALCULATION_CODE_TBL,
                 p_OPERAND_VALUE                =>G_OPERAND_VALUE_TBL,
                 p_PRICE_FORMULA_ID             =>G_PRICE_FORMULA_ID_TBL,
                 p_PRICING_STATUS_CODE          =>G_PRICING_STATUS_CODE_LD_TBL,
                 p_PRICING_STATUS_TEXT          =>G_PRICING_STATUS_TEXT_LD_TBL,
                 p_PRODUCT_PRECEDENCE           =>G_PRODUCT_PRECEDENCE_TBL ,
                 p_INCOMPATABLILITY_GRP_CODE    =>G_INCOMP_GRP_CODE_TBL,
                 p_PROCESSED_FLAG               =>G_PROCESSED_FLAG_LD_TBL,
                 p_APPLIED_FLAG                 =>G_APPLIED_FLAG_LD_TBL,
                 p_AUTOMATIC_FLAG               =>G_AUTOMATIC_FLAG_TBL,
                 p_PRIMARY_UOM_FLAG             =>G_PRIMARY_UOM_FLAG_TBL,
                 p_MODIFIER_LEVEL_CODE          =>G_MODIFIER_LEVEL_CODE_TBL,
                 p_LIST_LINE_NO                 =>G_LIST_LINE_NO_TBL,
                 p_ROUNDING_FACTOR              =>G_ROUNDING_FACTOR_TBL,
                 P_CURRENCY_DETAIL_ID          =>G_CURRENCY_DETAIL_ID_TBL, /* sunilpandey */
                 P_CURRENCY_HEADER_ID          =>G_CURRENCY_HEADER_ID_TBL, /* vivek */
                 P_SELLING_ROUNDING_FACTOR          =>G_SELLING_ROUNDING_TBL, /* vivek */
                 P_ORDER_CURRENCY              =>G_ORDER_CURRENCY_TBL, /* vivek */
                 P_PRICING_EFFECTIVE_DATE      =>G_PRICING_EFFECTIVE_DATE_TBL, /* vivek */
                 P_BASE_CURRENCY_CODE          =>G_BASE_CURRENCY_CODE_TBL, /* vivek */
                 P_BREAK_UOM_CODE              =>G_BREAK_UOM_TBL, /* Proration */
                 P_BREAK_UOM_CONTEXT           =>G_BREAK_CONTEXT_TBL, /* Proration */
                 P_BREAK_UOM_ATTRIBUTE         =>G_BREAK_ATTRIBUTE_TBL, /* Proration */
                 x_status_code                  =>l_status_code,
                 x_status_text                  =>l_status_text
                 );
 else -- vivek, multi currency not installed, not used
  INSERT_LDETS_PRICE_LIST_PVT(
                 p_LINE_DETAIL_index      => G_LINE_DETAIL_INDEX_LD_TBL,
                 p_LINE_DETAIL_TYPE_CODE  => G_LINE_DETAIL_TYPE_CODE_TBL,
                 p_PRICE_BREAK_TYPE_CODE  => G_PRICE_BREAK_TYPE_CODE_TBL,
                 p_LINE_INDEX             => G_LINE_INDEX_LD_TBL,
                 p_CREATED_FROM_LIST_HEADER_ID  =>G_LIST_HEADER_ID_LD_TBL,
                 p_CREATED_FROM_LIST_LINE_ID    =>G_LIST_LINE_ID_LD_TBL,
                 p_CREATED_FROM_LIST_LINE_TYPE  =>G_LIST_LINE_TYPE_TBL,
                 p_CREATED_FROM_LIST_TYPE_CODE  =>G_LIST_TYPE_CODE_TBL,
                 p_CREATED_FROM_SQL             =>G_CREATED_FROM_SQL_TBL,
                 p_PRICING_GROUP_SEQUENCE       =>G_PRICING_GROUP_SEQUENCE_TBL,
                 P_PRICING_PHASE_ID             =>G_PRICING_PHASE_ID_TBL,
                 p_OPERAND_CALCULATION_CODE     =>G_OPERAND_CALCULATION_CODE_TBL,
                 p_OPERAND_VALUE                =>G_OPERAND_VALUE_TBL,
                 p_PRICE_FORMULA_ID             =>G_PRICE_FORMULA_ID_TBL,
                 p_PRICING_STATUS_CODE          =>G_PRICING_STATUS_CODE_LD_TBL,
                 p_PRICING_STATUS_TEXT          =>G_PRICING_STATUS_TEXT_LD_TBL,
                 p_PRODUCT_PRECEDENCE           =>G_PRODUCT_PRECEDENCE_TBL ,
                 p_INCOMPATABLILITY_GRP_CODE    =>G_INCOMP_GRP_CODE_TBL,
                 p_PROCESSED_FLAG               =>G_PROCESSED_FLAG_LD_TBL,
                 p_APPLIED_FLAG                 =>G_APPLIED_FLAG_LD_TBL,
                 p_AUTOMATIC_FLAG               =>G_AUTOMATIC_FLAG_TBL,
                 p_PRIMARY_UOM_FLAG             =>G_PRIMARY_UOM_FLAG_TBL,
                 p_MODIFIER_LEVEL_CODE          =>G_MODIFIER_LEVEL_CODE_TBL,
                 p_LIST_LINE_NO                 =>G_LIST_LINE_NO_TBL,
                 p_ROUNDING_FACTOR              =>G_ROUNDING_FACTOR_TBL,
                 P_BREAK_UOM_CODE              =>G_BREAK_UOM_TBL, /* Proration */
                 P_BREAK_UOM_CONTEXT           =>G_BREAK_CONTEXT_TBL, /* Proration */
                 P_BREAK_UOM_ATTRIBUTE         =>G_BREAK_ATTRIBUTE_TBL, /* Proration */
                 x_status_code                  =>l_status_code,
                 x_status_text                  =>l_status_text
                 );
 end if; -- vivek, multi currency installed
 qp_debug_util.tstop('INSERT_LDETS_PRICE_LIST_MULT/NON_MULTI');
END IF;
M := 1;



  IF (K>1) THEN
  qp_debug_util.tstart('INSERT_PRICE_LIST_ATTRS','Inserting INSERT_PRICE_LIST_ATTRS');
   INSERT_PRICE_LIST_ATTRS
   (    p_LINE_INDEX_tbl                =>G_LINE_INDEX_tbl,
        p_LINE_DETAIL_INDEX_tbl         =>G_LINE_DETAIL_INDEX_tbl,
        p_ATTRIBUTE_LEVEL_tbl           =>G_ATTRIBUTE_LEVEL_tbl,
        p_ATTRIBUTE_TYPE_tbl            =>G_ATTRIBUTE_TYPE_tbl,
        p_LIST_HEADER_ID_tbl            =>G_LIST_HEADER_ID_tbl,
        p_LIST_LINE_ID_tbl              =>G_LIST_LINE_ID_tbl,
        p_CONTEXT_tbl                   =>G_CONTEXT_tbl,
        p_ATTRIBUTE_tbl                 =>G_ATTRIBUTE_tbl,
        p_VALUE_FROM_tbl                =>G_VALUE_FROM_tbl,
        p_SETUP_VALUE_FROM_tbl          =>G_SETUP_VALUE_FROM_tbl,
        p_SETUP_VALUE_TO_tbl            =>G_SETUP_VALUE_TO_tbl,
        p_GROUPING_NUMBER_tbl           => G_GROUPING_NUMBER_tbl,
        p_COMPARISON_OPERATOR_TYPE_tbl  =>G_COMPARISON_OPERATOR_TYPE_tbl,
        p_VALIDATED_FLAG_tbl            =>G_VALIDATED_FLAG_tbl,
        p_APPLIED_FLAG_tbl              =>G_APPLIED_FLAG_tbl,
        p_PRICING_STATUS_CODE_tbl       =>G_PRICING_STATUS_CODE_tbl,
        p_PRICING_STATUS_TEXT_tbl       =>G_PRICING_STATUS_TEXT_tbl,
        p_QUALIFIER_PRECEDENCE_tbl      =>G_QUALIFIER_PRECEDENCE_tbl,
        p_DATATYPE_tbl                  =>G_DATATYPE_tbl,
        p_PRICING_ATTR_FLAG_tbl         =>G_PRICING_ATTR_FLAG_tbl,
        p_QUALIFIER_TYPE_tbl            =>G_QUALIFIER_TYPE_TBL,
        p_PRODUCT_UOM_CODE_TBL          =>G_PRODUCT_UOM_CODE_TBL,
        p_EXCLUDER_FLAG_TBL             =>G_EXCLUDER_FLAG_TBL,
        p_PRICING_PHASE_ID_TBL          =>G_PRICING_PHASE_ID_TBL_A,
        p_INCOMPATABILITY_GRP_CODE_TBL  =>G_INCOMP_GRP_CODE_TBL_A,
        p_LINE_DETAIL_TYPE_CODE_TBL     =>G_LINE_DETAIL_TYPE_CODE_TBL_A,
        p_MODIFIER_LEVEL_CODE_TBL       =>G_MODIFIER_LEVEL_CODE_TBL_A,
        p_PRIMARY_UOM_FLAG_TBL          =>G_PRIMARY_UOM_FLAG_TBL_A,
        x_status_code                   =>l_status_code,
        x_status_text                   =>l_status_text);
	qp_debug_util.tstop('INSERT_PRICE_LIST_ATTRS');
  END IF;
  K:=1;


IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
engine_debug('#100');

END IF;
IF (p_pricing_phase_id = G_PRICE_LIST_PHASE_ID) THEN

lq_line_index := -9999;
lq_list_line_id := -9999;

if G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN  /*vivek*/
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('cursor open l_list_qual_cur_currency-multi-currency TRUE');
  END IF;
OPEN l_list_qual_cur_currency;
qp_debug_util.tstart('L_LIST_QUAL_CUR_CURRENCY','Cursor Loop  l_list_qual_cur_currency');
else -- vivek, multi currency not installed, not used
OPEN l_list_qual_cur;
qp_debug_util.tstart('L_LIST_QUAL_CUR','Cursor Loop l_list_qual_cur');
end if; -- vivek, multi currency installed
qp_debug_util.tstart('L_LIST_QUAL_CUR_CURRENCY_FETCH','Cursor Loop L_LIST_QUAL_CUR_CURRENCY_FETCH');
LOOP
  G_LINE_INDEX_TBL_P.delete;
  G_LIST_LINE_ID_TBL_P.delete;
  G_OPER_CALCULATION_CODE_TBL_P.delete;
  G_OPERAND_VALUE_TBL_P.delete;
  G_PRICING_GROUP_SEQUENCE_TBL_P.delete;
  G_LIST_LINE_TYPE_TBL_P.delete;
  G_PRICING_PHASE_ID_TBL_P.delete;
  G_AUTOMATIC_FLAG_TBL_P.delete;
  G_OVERRIDE_FLAG_TBL_P.delete;
  G_PRINT_ON_INVOICE_FLAG_TBL_P.delete;
  G_INCOMP_GRP_CODE_TBL_P.delete;
  G_PRICE_FORMULA_ID_TBL_P.delete;
  G_PRODUCT_PRECEDENCE_TBL_P.delete;
  G_PRIMARY_UOM_FLAG_TBL_P.delete;
  G_MODIFIER_LEVEL_CODE_TBL_P.delete;
  G_LIST_LINE_NO_TBL_P.delete;
  G_PRODUCT_UOM_CODE_TBL_P.delete;
  G_EXCLUDER_FLAG_TBL_P.delete;
  G_LIST_TYPE_CODE_TBL_P.delete;
  G_ROUNDING_FACTOR_TBL_P.delete;
  G_LIST_HEADER_ID_TBL_P.delete;
  G_CONTEXT_TBL_P.delete;
  G_ATTRIBUTE_TBL_P.delete;
  G_VALUE_FROM_TBL_P.delete;
  G_ATTRIBUTE_LEVEL_TBL_P.delete;
  G_ATTRIBUTE_TYPE_TBL_P.delete;
  G_APPLIED_FLAG_TBL_P.delete;
  G_CONTEXT_TBL_PR.delete;
  G_ATTRIBUTE_TBL_PR.delete;
  G_VALUE_FROM_TBL_PR.delete;
  G_SETUP_VALUE_FROM_TBL_PR.delete;
  G_SETUP_VALUE_TO_TBL_PR.delete;
  G_ATTRIBUTE_LEVEL_TBL_PR.delete;
  G_ATTRIBUTE_TYPE_TBL_PR.delete;
  G_OPERATOR_TYPE_TBL_PR.delete;
  G_CONTEXT_TBL_Q.delete;
  G_ATTRIBUTE_TBL_Q.delete;
  G_VALUE_FROM_TBL_Q.delete;
  G_PRICING_ATTR_FLAG_TBL_Q.delete;
  G_GROUPING_NO_TBL_Q.delete;
  G_QUALIFIER_PRECEDENCE_TBL_Q.delete;
  G_DATATYPE_TBL_Q.delete;
  G_SETUP_VALUE_FROM_TBL_Q.delete;
  G_SETUP_VALUE_TO_TBL_Q.delete;
  G_OPERATOR_TYPE_TBL_Q .delete;
  G_DATATYPE_TBL_PR.delete;
  G_QUALIFIER_TYPE_TBL_Q.delete;
  G_BREAK_UOM_TBL_P.delete; /* Proration */
  G_BREAK_CONTEXT_TBL_P.delete; /* Proration */
  G_BREAK_ATTRIBUTE_TBL_P.delete; /* Proration */
  G_PRICE_BREAK_TYPE_CODE_TBL_P.delete; --[julin] for price book

 if G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN  /*vivek*/
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('cursor l_list_qual_cur_currency-multi-currency TRUE - delete tables');
  END IF;
  G_CURRENCY_DETAIL_ID_TBL_P.delete; /* sunilpandey */
  G_CURRENCY_HEADER_ID_TBL_P.delete; /* vivek */
  G_SELLING_ROUNDING_TBL_P.delete; /* vivek */
  G_ORDER_CURRENCY_TBL_P.delete; /* vivek */
  G_PRICING_EFFECTIVE_DATE_TBL_P.delete; /* vivek */
  G_BASE_CURRENCY_CODE_TBL_P.delete; /* vivek */
 end if; /* vivek */

if G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN  /*vivek*/
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('cursor l_list_qual_cur_currency-multi-currency TRUE - bulk collect');

  END IF;
FETCH l_list_qual_cur_currency BULK COLLECT INTO
    G_LINE_INDEX_TBL_P
  , G_LIST_LINE_ID_TBL_P
  , G_OPER_CALCULATION_CODE_TBL_P
  , G_OPERAND_VALUE_TBL_P
  , G_PRICING_GROUP_SEQUENCE_TBL_P
  , G_LIST_LINE_TYPE_TBL_P
  , G_PRICING_PHASE_ID_TBL_P
  , G_AUTOMATIC_FLAG_TBL_P
  , G_INCOMP_GRP_CODE_TBL_P
  , G_PRICE_FORMULA_ID_TBL_P
  , G_PRODUCT_PRECEDENCE_TBL_P
  , G_PRIMARY_UOM_FLAG_TBL_P
  , G_MODIFIER_LEVEL_CODE_TBL_P
  , G_LIST_LINE_NO_TBL_P
  , G_PRODUCT_UOM_CODE_TBL_P
  , G_EXCLUDER_FLAG_TBL_P
  , G_LIST_TYPE_CODE_TBL_P
  , G_ROUNDING_FACTOR_TBL_P
  , G_LIST_HEADER_ID_TBL_P
  , G_CONTEXT_TBL_P
  , G_ATTRIBUTE_TBL_P
  , G_VALUE_FROM_TBL_P
  , G_ATTRIBUTE_LEVEL_TBL_P
  , G_ATTRIBUTE_TYPE_TBL_P
  , G_APPLIED_FLAG_TBL_P
  , G_CONTEXT_TBL_PR
  , G_ATTRIBUTE_TBL_PR
  , G_VALUE_FROM_TBL_PR
  , G_SETUP_VALUE_FROM_TBL_PR
  , G_SETUP_VALUE_TO_TBL_PR
  , G_ATTRIBUTE_LEVEL_TBL_PR
  , G_ATTRIBUTE_TYPE_TBL_PR
  , G_OPERATOR_TYPE_TBL_PR
  , G_CONTEXT_TBL_Q
  , G_ATTRIBUTE_TBL_Q
  , G_VALUE_FROM_TBL_Q
  , G_PRICING_ATTR_FLAG_TBL_Q
  , G_GROUPING_NO_TBL_Q
  , G_QUALIFIER_PRECEDENCE_TBL_Q
  , G_DATATYPE_TBL_Q
  , G_SETUP_VALUE_FROM_TBL_Q
  , G_SETUP_VALUE_TO_TBL_Q
  , G_OPERATOR_TYPE_TBL_Q
  , G_DATATYPE_TBL_PR
  , G_QUALIFIER_TYPE_TBL_Q
  , G_CURRENCY_DETAIL_ID_TBL_P /* sunilpandey */
  , G_CURRENCY_HEADER_ID_TBL_P /* vivek */
  , G_SELLING_ROUNDING_TBL_P /* vivek */
  , G_ORDER_CURRENCY_TBL_P /* vivek */
  , G_PRICING_EFFECTIVE_DATE_TBL_P /* vivek */
  , G_BASE_CURRENCY_CODE_TBL_P
  , G_BREAK_UOM_TBL_P /* Proration */
  , G_BREAK_CONTEXT_TBL_P /* Proration */
  , G_BREAK_ATTRIBUTE_TBL_P /* Proration */
  , G_DERIVED_QUALIFIER_FLAG_TBL_Q    --- Added for TCA
  , G_PRICE_BREAK_TYPE_CODE_TBL_P --[julin] for price book
    LIMIT nROWS;/* vivek */
   EXIT WHEN G_LINE_INDEX_TBL_P.COUNT = 0;
else -- vivek, multi currency not installed, not used
FETCH l_list_qual_cur BULK COLLECT INTO
    G_LINE_INDEX_TBL_P
  , G_LIST_LINE_ID_TBL_P
  , G_OPER_CALCULATION_CODE_TBL_P
  , G_OPERAND_VALUE_TBL_P
  , G_PRICING_GROUP_SEQUENCE_TBL_P
  , G_LIST_LINE_TYPE_TBL_P
  , G_PRICING_PHASE_ID_TBL_P
  , G_AUTOMATIC_FLAG_TBL_P
  , G_INCOMP_GRP_CODE_TBL_P
  , G_PRICE_FORMULA_ID_TBL_P
  , G_PRODUCT_PRECEDENCE_TBL_P
  , G_PRIMARY_UOM_FLAG_TBL_P
  , G_MODIFIER_LEVEL_CODE_TBL_P
  , G_LIST_LINE_NO_TBL_P
  , G_PRODUCT_UOM_CODE_TBL_P
  , G_EXCLUDER_FLAG_TBL_P
  , G_LIST_TYPE_CODE_TBL_P
  , G_ROUNDING_FACTOR_TBL_P
  , G_LIST_HEADER_ID_TBL_P
  , G_CONTEXT_TBL_P
  , G_ATTRIBUTE_TBL_P
  , G_VALUE_FROM_TBL_P
  , G_ATTRIBUTE_LEVEL_TBL_P
  , G_ATTRIBUTE_TYPE_TBL_P
  , G_APPLIED_FLAG_TBL_P
  , G_CONTEXT_TBL_PR
  , G_ATTRIBUTE_TBL_PR
  , G_VALUE_FROM_TBL_PR
  , G_SETUP_VALUE_FROM_TBL_PR
  , G_SETUP_VALUE_TO_TBL_PR
  , G_ATTRIBUTE_LEVEL_TBL_PR
  , G_ATTRIBUTE_TYPE_TBL_PR
  , G_OPERATOR_TYPE_TBL_PR
  , G_CONTEXT_TBL_Q
  , G_ATTRIBUTE_TBL_Q
  , G_VALUE_FROM_TBL_Q
  , G_PRICING_ATTR_FLAG_TBL_Q
  , G_GROUPING_NO_TBL_Q
  , G_QUALIFIER_PRECEDENCE_TBL_Q
  , G_DATATYPE_TBL_Q
  , G_SETUP_VALUE_FROM_TBL_Q
  , G_SETUP_VALUE_TO_TBL_Q
  , G_OPERATOR_TYPE_TBL_Q
  , G_DATATYPE_TBL_PR
  , G_QUALIFIER_TYPE_TBL_Q
  , G_BREAK_UOM_TBL_P /* Proration */
  , G_BREAK_CONTEXT_TBL_P /* Proration */
  , G_BREAK_ATTRIBUTE_TBL_P /* Proration */
  , G_DERIVED_QUALIFIER_FLAG_TBL_Q
  , G_PRICE_BREAK_TYPE_CODE_TBL_P --[julin] for price book
    LIMIT nROWS;
   EXIT WHEN G_LINE_INDEX_TBL_P.COUNT = 0;
end if; -- vivek, multi currency installed

IF (G_LINE_INDEX_TBL_P.COUNT > 0 ) THEN

  FOR I in G_LINE_INDEX_TBL_P.FIRST .. G_LINE_INDEX_TBL_P.LAST LOOP

                  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                  engine_debug('#101');

                  engine_debug('List Line Id : ' || g_list_line_id_tbl_p(I));
                  engine_debug('Line Index : ' || g_line_index_tbl_P(I));

                  END IF;
                  IF (lq_line_index <> g_line_index_tbl_p(I) OR lq_list_line_id <> g_list_line_id_tbl_p(I)) THEN

                    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                    engine_debug('Inserting List Line #102');

                    END IF;
                    L_LINE_DETAIL_INDEX := GET_LINE_DETAIL_INDEX;
                    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                    engine_debug('Line Detail Index : ' || l_line_detail_index);

                    END IF;
                    G_LINE_INDEX_LD_TBL(M)                :=G_LINE_INDEX_TBL_P(I);
                    G_LINE_DETAIL_INDEX_LD_TBL(M)         :=L_LINE_DETAIL_INDEX;
                    G_LIST_HEADER_ID_LD_TBL(M)            :=G_LIST_HEADER_ID_TBL_P(I);
                    G_LIST_LINE_ID_LD_TBL(M)              :=G_LIST_LINE_ID_TBL_P(I);
                    G_PRICING_STATUS_CODE_LD_TBL(M)       :=G_STATUS_NEW;
                    G_PRICING_STATUS_TEXT_LD_TBL(M)       :='INSERTED IN L_LIST_QUAL_CUR';
                    G_APPLIED_FLAG_LD_TBL(M)              :=G_AUTOMATIC_FLAG_TBL_P(I);
                    G_PROCESSED_FLAG_LD_TBL(M)            :=G_NOT_PROCESSED;
                    G_LINE_DETAIL_TYPE_CODE_TBL(M)        :='NULL';
                    G_PRICE_BREAK_TYPE_CODE_TBL(M)        :=G_PRICE_BREAK_TYPE_CODE_TBL_P(I); --[julin] for price book
                    G_LIST_LINE_TYPE_TBL(M)               :=G_LIST_LINE_TYPE_TBL_P(I);
                    G_LIST_TYPE_CODE_TBL(M)               :=G_LIST_TYPE_CODE_TBL_P(I);
                    G_CREATED_FROM_SQL_TBL(M)             :='INSERTED_IN_L_LIST_QUAL_CUR';
                    G_PRICING_GROUP_SEQUENCE_TBL(M)       :=G_PRICING_GROUP_SEQUENCE_TBL_P(I);
                    G_PRICING_PHASE_ID_TBL(M)             :=G_PRICING_PHASE_ID_TBL_P(I);
                    G_OPERAND_CALCULATION_CODE_TBL(M)     :=G_OPER_CALCULATION_CODE_TBL_P(I);
                    G_OPERAND_VALUE_TBL(M)                :=G_OPERAND_VALUE_TBL_P(I);
                    G_PRICE_FORMULA_ID_TBL(M)             :=G_PRICE_FORMULA_ID_TBL_P(I);
                    G_PRODUCT_PRECEDENCE_TBL(M)           :=G_PRODUCT_PRECEDENCE_TBL_P(I);
                    G_INCOMP_GRP_CODE_TBL(M)              :=G_INCOMP_GRP_CODE_TBL_P(I);
                    G_AUTOMATIC_FLAG_TBL(M)               :=G_AUTOMATIC_FLAG_TBL_P(I);
                    G_PRIMARY_UOM_FLAG_TBL(M)             :=G_PRIMARY_UOM_FLAG_TBL_P(I);
                    G_MODIFIER_LEVEL_CODE_TBL(M)          :=G_MODIFIER_LEVEL_CODE_TBL_P(I);
                    G_LIST_LINE_NO_TBL(M)                 :=G_LIST_LINE_NO_TBL_P(I);
                    G_ROUNDING_FACTOR_TBL(M)              :=G_ROUNDING_FACTOR_TBL_P(I);
                    G_BREAK_UOM_TBL(M)                    :=G_BREAK_UOM_TBL_P(I); /* Proration */
                    G_BREAK_CONTEXT_TBL(M)                :=G_BREAK_CONTEXT_TBL_P(I); /* Proration */
                    G_BREAK_ATTRIBUTE_TBL(M)              :=G_BREAK_ATTRIBUTE_TBL_P(I); /* Proration */
               if G_MULTI_CURRENCY_PROFILE = 'Y' and
                  G_USE_MULTI_CURRENCY = 'Y' THEN  /*vivek*/
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('cursor l_list_qual_cur_currency-multi-currency TRUE - populate tables');
  END IF;
                    G_CURRENCY_DETAIL_ID_TBL(M)          := G_CURRENCY_DETAIL_ID_TBL_P(I); /* sunilpandey */
                    G_CURRENCY_HEADER_ID_TBL(M)          := G_CURRENCY_HEADER_ID_TBL_P(I); /* vivek */
                    G_SELLING_ROUNDING_TBL(M)     := G_SELLING_ROUNDING_TBL_P(I); /* vivek */
                    G_ORDER_CURRENCY_TBL(M)              := G_ORDER_CURRENCY_TBL_P(I); /* vivek */
                    G_PRICING_EFFECTIVE_DATE_TBL(M)      := G_PRICING_EFFECTIVE_DATE_TBL_P(I); /* vivek */
                    G_BASE_CURRENCY_CODE_TBL(M)          := G_BASE_CURRENCY_CODE_TBL_P(I); /* vivek */
               end if;  /* vivek */
                    M := M+1;
                    lq_line_index := g_line_index_tbl_p(I);
                    lq_list_line_id := g_list_line_id_tbl_p(I);
                  END IF;

                  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                  engine_debug('#103');
                  END IF;
                 IF (G_CONTEXT_TBL_Q(I) IS NOT NULL) THEN
                  --Qualifiers attributes
                  G_LINE_INDEX_tbl(K)              := G_LINE_INDEX_TBL_P(I);
                  G_LINE_DETAIL_INDEX_tbl(K)       := L_LINE_DETAIL_INDEX;
                  G_ATTRIBUTE_LEVEL_tbl(K)         := nvl(G_ATTRIBUTE_LEVEL_TBL_P(I),'X');
                  G_ATTRIBUTE_TYPE_tbl(K)          := G_QUALIFIER_TYPE;
                  G_CONTEXT_tbl(K)                 := G_CONTEXT_TBL_Q(I);
                  G_ATTRIBUTE_tbl(K)               := G_ATTRIBUTE_TBL_Q(I);
                  G_VALUE_FROM_tbl(K)              := G_VALUE_FROM_TBL_Q(I);
                  G_COMPARISON_OPERATOR_TYPE_tbl(K):= G_OPERATOR_TYPE_TBL_Q(I);
                  G_APPLIED_FLAG_tbl(K)            := G_APPLIED_FLAG_TBL_P(I);
                  G_PRICING_STATUS_CODE_tbl(K)     := G_STATUS_NEW;
                  G_LIST_HEADER_ID_tbl(K)          := G_LIST_HEADER_ID_TBL_P(I);
                  G_LIST_LINE_ID_tbl(K)            := G_LIST_LINE_ID_TBL_P(I);
                  G_SETUP_VALUE_FROM_tbl(K)        := G_SETUP_VALUE_FROM_TBL_Q(I);
                  G_SETUP_VALUE_TO_tbl(K)          := G_SETUP_VALUE_TO_TBL_Q(I);
                  G_GROUPING_NUMBER_tbl(K)         := G_GROUPING_NO_TBL_Q(I);
                  G_PRICING_STATUS_TEXT_tbl(K)     := 'INSERTED IN L_LIST_QUAL_CUR';
                  G_QUALIFIER_PRECEDENCE_tbl(K)    := G_QUALIFIER_PRECEDENCE_TBL_Q(I);
                  G_DATATYPE_tbl(K)                := G_DATATYPE_TBL_Q(I);
                  G_EXCLUDER_FLAG_TBL(K)           := G_EXCLUDER_FLAG_TBL_P(I);
                  G_PRODUCT_UOM_CODE_TBL(K)        := G_PRODUCT_UOM_CODE_TBL_P(I);
                  G_QUALIFIER_TYPE_TBL(K)          := G_QUALIFIER_TYPE_TBL_Q(I);
                  G_VALIDATED_FLAG_tbl(K)          := G_NO;
                  G_PRICING_ATTR_FLAG_tbl(K)       := G_NO;
                  G_PRICING_PHASE_ID_TBL_A(K)        := G_PRICING_PHASE_ID_TBL_P(I);
                  G_INCOMP_GRP_CODE_TBL_A(K)         := G_INCOMP_GRP_CODE_TBL_P(I);
                  G_LINE_DETAIL_TYPE_CODE_TBL_A(K)   := 'NULL';
                  G_MODIFIER_LEVEL_CODE_TBL_A(K)     := G_MODIFIER_LEVEL_CODE_TBL_P(I);
                  G_PRIMARY_UOM_FLAG_TBL_A(K)        := G_PRIMARY_UOM_FLAG_TBL_P(I);
                  K:= K+1;
                END IF;

                  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                  engine_debug('#1031');

                  END IF;
                  --INSERT PRODUCT ATTRIBUTES
                   G_LINE_INDEX_tbl(K)              :=G_LINE_INDEX_TBL_P(I);
                   G_ATTRIBUTE_LEVEL_tbl(K)         :=G_ATTRIBUTE_LEVEL_TBL_P(I);
                   G_ATTRIBUTE_TYPE_tbl(K)          :=G_ATTRIBUTE_TYPE_TBL_P(I);
                   G_CONTEXT_tbl(K)                 :=G_CONTEXT_TBL_P(I);
                   G_ATTRIBUTE_tbl(K)               :=G_ATTRIBUTE_TBL_P(I);
                   G_VALUE_FROM_tbl(K)              :=G_VALUE_FROM_TBL_P(I);
                   G_COMPARISON_OPERATOR_TYPE_tbl(K):=NULL;
                   G_VALIDATED_FLAG_tbl(K)          :=G_NO;
                   G_APPLIED_FLAG_tbl(K)            :=G_APPLIED_FLAG_TBL_P(I);
                   G_PRICING_STATUS_CODE_tbl(K)     :=G_STATUS_NEW;
                   G_PRICING_ATTR_FLAG_tbl(K)       :=G_NO;
                   G_LINE_DETAIL_INDEX_tbl(K)       :=L_LINE_DETAIL_INDEX;
                   G_LIST_HEADER_ID_tbl(K)          :=G_LIST_HEADER_ID_TBL_P(I);
                   G_LIST_LINE_ID_tbl(K)            :=G_LIST_LINE_ID_TBL_P(I);
                   G_SETUP_VALUE_FROM_tbl(K)        :=NULL;
                   G_SETUP_VALUE_TO_tbl(K)          :=NULL;
                   G_GROUPING_NUMBER_tbl(K)         :=NULL;
                   G_PRICING_STATUS_TEXT_tbl(K)     :='INSERTED IN L_LIST_QUAL_CUR';
                   G_QUALIFIER_PRECEDENCE_tbl(K)    :=NULL;
                   G_DATATYPE_tbl(K)                :=NULL;
                   G_EXCLUDER_FLAG_TBL(K)           :=G_EXCLUDER_FLAG_TBL_P(I);
                   G_PRODUCT_UOM_CODE_TBL(K)        :=G_PRODUCT_UOM_CODE_TBL_P(I);
                   G_QUALIFIER_TYPE_TBL(K)          :=NULL;
                   G_PRICING_PHASE_ID_TBL_A(K)        :=G_PRICING_PHASE_ID_TBL_P(I);
                   G_INCOMP_GRP_CODE_TBL_A(K)         :=G_INCOMP_GRP_CODE_TBL_P(I);
                   G_LINE_DETAIL_TYPE_CODE_TBL_A(K)   :='NULL';
                   G_MODIFIER_LEVEL_CODE_TBL_A(K)     :=G_MODIFIER_LEVEL_CODE_TBL_P(I);
                   G_PRIMARY_UOM_FLAG_TBL_A(K)        :=G_PRIMARY_UOM_FLAG_TBL_P(I);
                   K:= K+1;

                  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                  engine_debug('#105');
                  END IF;

                   --INSERT PRICING ATTRIBUTES
                   IF (G_CONTEXT_TBL_PR(I) IS NOT NULL) THEN
                    G_LINE_INDEX_tbl(K)              :=G_LINE_INDEX_TBL_P(I);
                    G_ATTRIBUTE_LEVEL_tbl(K)         :=G_ATTRIBUTE_LEVEL_TBL_PR(I);
                    G_ATTRIBUTE_TYPE_tbl(K)          :=G_ATTRIBUTE_TYPE_TBL_PR(I);
                    G_CONTEXT_tbl(K)                 :=G_CONTEXT_TBL_PR(I);
                    G_ATTRIBUTE_tbl(K)               :=G_ATTRIBUTE_TBL_PR(I);
                    G_VALUE_FROM_tbl(K)              :=G_VALUE_FROM_TBL_PR(I);
                    G_COMPARISON_OPERATOR_TYPE_tbl(K):=G_OPERATOR_TYPE_TBL_PR(I);
                    G_VALIDATED_FLAG_tbl(K)          :=G_NO;
                    G_APPLIED_FLAG_tbl(K)            :=G_APPLIED_FLAG_TBL_P(I);
                    G_PRICING_STATUS_CODE_tbl(K)     :=G_STATUS_NEW;
                    G_PRICING_ATTR_FLAG_tbl(K)       :=NULL;
                    G_LINE_DETAIL_INDEX_tbl(K)       :=L_LINE_DETAIL_INDEX;
                    G_LIST_HEADER_ID_tbl(K)          :=G_LIST_HEADER_ID_TBL_P(I);
                    G_LIST_LINE_ID_tbl(K)            :=G_LIST_LINE_ID_TBL_P(I);
                    G_SETUP_VALUE_FROM_tbl(K)        :=G_SETUP_VALUE_FROM_TBL_PR(I);
                    G_SETUP_VALUE_TO_tbl(K)          :=G_SETUP_VALUE_TO_TBL_PR(I);
                    G_GROUPING_NUMBER_tbl(K)         :=NULL;
                    G_PRICING_STATUS_TEXT_tbl(K)     :='INSERTED IN L_LIST_QUAL_CUR';
                    G_QUALIFIER_PRECEDENCE_tbl(K)    :=NULL;
                    G_DATATYPE_tbl(K)                :=G_DATATYPE_TBL_PR(I);
                    G_EXCLUDER_FLAG_TBL(K)           :=G_EXCLUDER_FLAG_TBL_P(I);
                    G_PRODUCT_UOM_CODE_TBL(K)        :=G_PRODUCT_UOM_CODE_TBL_P(I);
                    G_QUALIFIER_TYPE_TBL(K)          :=NULL;
                    G_PRICING_PHASE_ID_TBL_A(K)        :=G_PRICING_PHASE_ID_TBL_P(I);
                    G_INCOMP_GRP_CODE_TBL_A(K)         :=G_INCOMP_GRP_CODE_TBL_P(I);
                    G_LINE_DETAIL_TYPE_CODE_TBL_A(K)   :='NULL';
                    G_MODIFIER_LEVEL_CODE_TBL_A(K)     :=G_MODIFIER_LEVEL_CODE_TBL_P(I);
                    G_PRIMARY_UOM_FLAG_TBL_A(K)        :=G_PRIMARY_UOM_FLAG_TBL_P(I);
                    K:= K+1;
                   END IF;

                  l_loop_count := l_loop_count +1;
                  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                  engine_debug('Primary List Non Validated Search Count : ' || l_loop_count);
                  END IF;
  END LOOP;
 END IF;

END LOOP;
qp_debug_util.tstop('L_LIST_QUAL_CUR_CURRENCY_FETCH');
if G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN  /*vivek*/
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('cursor close l_list_qual_cur_currency-multi-currency TRUE');
  END IF;
CLOSE l_list_qual_cur_currency;
qp_debug_util.tstop('L_LIST_QUAL_CUR_CURRENCY');
else -- vivek, multi currency not installed, not used
CLOSE l_list_qual_cur;

qp_debug_util.tstop('L_LIST_QUAL_CUR');

end if; -- vivek, multi currency installed

END IF; -- p_pricing_phase_id = G_PRICE_LIST_PHASE_ID

IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
engine_debug('#106');

END IF;
IF M > 1 THEN
qp_debug_util.tstart('INSERT_LDETS_PRICE_LIST_MULT_NON_MULTI','Inserting ldets INSERT_LDETS_PRICE_LIST_MULT_NON_MULTI');
 if G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN  /*vivek*/
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('cursor l_list_qual_cur_currency-multi-currency TRUE - insert_ldets2');

  END IF;
  INSERT_LDETS_PRICE_LIST_MULT( p_LINE_DETAIL_index      => G_LINE_DETAIL_INDEX_LD_TBL,
                 p_LINE_DETAIL_TYPE_CODE  => G_LINE_DETAIL_TYPE_CODE_TBL,
                 p_PRICE_BREAK_TYPE_CODE  => G_PRICE_BREAK_TYPE_CODE_TBL,
                 p_LINE_INDEX             => G_LINE_INDEX_LD_TBL,
                 p_CREATED_FROM_LIST_HEADER_ID  =>G_LIST_HEADER_ID_LD_TBL,
                 p_CREATED_FROM_LIST_LINE_ID    =>G_LIST_LINE_ID_LD_TBL,
                 p_CREATED_FROM_LIST_LINE_TYPE  =>G_LIST_LINE_TYPE_TBL,
                 p_CREATED_FROM_LIST_TYPE_CODE  =>G_LIST_TYPE_CODE_TBL,
                 p_CREATED_FROM_SQL             =>G_CREATED_FROM_SQL_TBL,
                 p_PRICING_GROUP_SEQUENCE       =>G_PRICING_GROUP_SEQUENCE_TBL,
                 P_PRICING_PHASE_ID             =>G_PRICING_PHASE_ID_TBL,
                 p_OPERAND_CALCULATION_CODE     =>G_OPERAND_CALCULATION_CODE_TBL,
                 p_OPERAND_VALUE                =>G_OPERAND_VALUE_TBL,
                 p_PRICE_FORMULA_ID             =>G_PRICE_FORMULA_ID_TBL,
                 p_PRICING_STATUS_CODE          =>G_PRICING_STATUS_CODE_LD_TBL,
                 p_PRICING_STATUS_TEXT          =>G_PRICING_STATUS_TEXT_LD_TBL,
                 p_PRODUCT_PRECEDENCE           =>G_PRODUCT_PRECEDENCE_TBL ,
                 p_INCOMPATABLILITY_GRP_CODE    =>G_INCOMP_GRP_CODE_TBL,
                 p_PROCESSED_FLAG               =>G_PROCESSED_FLAG_LD_TBL,
                 p_APPLIED_FLAG                 =>G_APPLIED_FLAG_LD_TBL,
                 p_AUTOMATIC_FLAG               =>G_AUTOMATIC_FLAG_TBL,
                 p_PRIMARY_UOM_FLAG             =>G_PRIMARY_UOM_FLAG_TBL,
                 p_MODIFIER_LEVEL_CODE          =>G_MODIFIER_LEVEL_CODE_TBL,
                 p_LIST_LINE_NO                 =>G_LIST_LINE_NO_TBL,
                 p_ROUNDING_FACTOR              =>G_ROUNDING_FACTOR_TBL,
                 P_CURRENCY_DETAIL_ID          =>G_CURRENCY_DETAIL_ID_TBL, /* sunilpandey */
                 P_CURRENCY_HEADER_ID          =>G_CURRENCY_HEADER_ID_TBL, /* vivek */
                 P_SELLING_ROUNDING_FACTOR     =>G_SELLING_ROUNDING_TBL, /* vivek */
                 P_ORDER_CURRENCY              =>G_ORDER_CURRENCY_TBL, /* vivek */
                 P_PRICING_EFFECTIVE_DATE      =>G_PRICING_EFFECTIVE_DATE_TBL, /* vivek */
                 P_BASE_CURRENCY_CODE          =>G_BASE_CURRENCY_CODE_TBL, /* vivek */
                 P_BREAK_UOM_CODE              =>G_BREAK_UOM_TBL, /* Proration */
                 P_BREAK_UOM_CONTEXT           =>G_BREAK_CONTEXT_TBL, /* Proration */
                 P_BREAK_UOM_ATTRIBUTE         =>G_BREAK_ATTRIBUTE_TBL, /* Proration */
                 x_status_code                  =>l_status_code,
                 x_status_text                  =>l_status_text
                 );
else -- vivek, multi currency not installed, not used
  INSERT_LDETS_PRICE_LIST_PVT( p_LINE_DETAIL_index      => G_LINE_DETAIL_INDEX_LD_TBL,
                 p_LINE_DETAIL_TYPE_CODE  => G_LINE_DETAIL_TYPE_CODE_TBL,
                 p_PRICE_BREAK_TYPE_CODE  => G_PRICE_BREAK_TYPE_CODE_TBL,
                 p_LINE_INDEX             => G_LINE_INDEX_LD_TBL,
                 p_CREATED_FROM_LIST_HEADER_ID  =>G_LIST_HEADER_ID_LD_TBL,
                 p_CREATED_FROM_LIST_LINE_ID    =>G_LIST_LINE_ID_LD_TBL,
                 p_CREATED_FROM_LIST_LINE_TYPE  =>G_LIST_LINE_TYPE_TBL,
                 p_CREATED_FROM_LIST_TYPE_CODE  =>G_LIST_TYPE_CODE_TBL,
                 p_CREATED_FROM_SQL             =>G_CREATED_FROM_SQL_TBL,
                 p_PRICING_GROUP_SEQUENCE       =>G_PRICING_GROUP_SEQUENCE_TBL,
                 P_PRICING_PHASE_ID             =>G_PRICING_PHASE_ID_TBL,
                 p_OPERAND_CALCULATION_CODE     =>G_OPERAND_CALCULATION_CODE_TBL,
                 p_OPERAND_VALUE                =>G_OPERAND_VALUE_TBL,
                 p_PRICE_FORMULA_ID             =>G_PRICE_FORMULA_ID_TBL,
                 p_PRICING_STATUS_CODE          =>G_PRICING_STATUS_CODE_LD_TBL,
                 p_PRICING_STATUS_TEXT          =>G_PRICING_STATUS_TEXT_LD_TBL,
                 p_PRODUCT_PRECEDENCE           =>G_PRODUCT_PRECEDENCE_TBL ,
                 p_INCOMPATABLILITY_GRP_CODE    =>G_INCOMP_GRP_CODE_TBL,
                 p_PROCESSED_FLAG               =>G_PROCESSED_FLAG_LD_TBL,
                 p_APPLIED_FLAG                 =>G_APPLIED_FLAG_LD_TBL,
                 p_AUTOMATIC_FLAG               =>G_AUTOMATIC_FLAG_TBL,
                 p_PRIMARY_UOM_FLAG             =>G_PRIMARY_UOM_FLAG_TBL,
                 p_MODIFIER_LEVEL_CODE          =>G_MODIFIER_LEVEL_CODE_TBL,
                 p_LIST_LINE_NO                 =>G_LIST_LINE_NO_TBL,
                 p_ROUNDING_FACTOR              =>G_ROUNDING_FACTOR_TBL,
                 P_BREAK_UOM_CODE              =>G_BREAK_UOM_TBL, /* Proration */
                 P_BREAK_UOM_CONTEXT           =>G_BREAK_CONTEXT_TBL, /* Proration */
                 P_BREAK_UOM_ATTRIBUTE         =>G_BREAK_ATTRIBUTE_TBL, /* Proration */
                 x_status_code                  =>l_status_code,
                 x_status_text                  =>l_status_text
                 );
 end if; -- vivek, multi currency installed
 qp_debug_util.tstop('INSERT_LDETS_PRICE_LIST_MULT_NON_MULTI');
END IF;
M :=1;


IF (K>1) THEN
qp_debug_util.tstart('INSERT_PRICE_LIST_ATTRS','Inserting line attrs INSERT_PRICE_LIST_ATTRS');
              INSERT_PRICE_LIST_ATTRS
              ( p_LINE_INDEX_tbl                =>G_LINE_INDEX_tbl,
                p_LINE_DETAIL_INDEX_tbl         =>G_LINE_DETAIL_INDEX_tbl,
                p_ATTRIBUTE_LEVEL_tbl           =>G_ATTRIBUTE_LEVEL_tbl,
                p_ATTRIBUTE_TYPE_tbl            =>G_ATTRIBUTE_TYPE_tbl,
                p_LIST_HEADER_ID_tbl            =>G_LIST_HEADER_ID_tbl,
                p_LIST_LINE_ID_tbl              =>G_LIST_LINE_ID_tbl,
                p_CONTEXT_tbl                   =>G_CONTEXT_tbl,
                p_ATTRIBUTE_tbl                 =>G_ATTRIBUTE_tbl,
                p_VALUE_FROM_tbl                =>G_VALUE_FROM_tbl,
                p_SETUP_VALUE_FROM_tbl          =>G_SETUP_VALUE_FROM_tbl,
                p_SETUP_VALUE_TO_tbl            =>G_SETUP_VALUE_TO_tbl,
                p_GROUPING_NUMBER_tbl           => G_GROUPING_NUMBER_tbl,
                p_COMPARISON_OPERATOR_TYPE_tbl  =>G_COMPARISON_OPERATOR_TYPE_tbl,
                p_VALIDATED_FLAG_tbl            =>G_VALIDATED_FLAG_tbl,
                p_APPLIED_FLAG_tbl              =>G_APPLIED_FLAG_tbl,
                p_PRICING_STATUS_CODE_tbl       =>G_PRICING_STATUS_CODE_tbl,
                p_PRICING_STATUS_TEXT_tbl       =>G_PRICING_STATUS_TEXT_tbl,
                p_QUALIFIER_PRECEDENCE_tbl      =>G_QUALIFIER_PRECEDENCE_tbl,
                p_DATATYPE_tbl                  =>G_DATATYPE_tbl,
                p_PRICING_ATTR_FLAG_tbl         =>G_PRICING_ATTR_FLAG_tbl,
                p_QUALIFIER_TYPE_tbl            =>G_QUALIFIER_TYPE_TBL,
                p_product_uom_code_tbl          =>G_PRODUCT_UOM_CODE_TBL,
                p_excluder_flag_tbl             =>G_EXCLUDER_FLAG_TBL,
                p_PRICING_PHASE_ID_TBL          =>G_PRICING_PHASE_ID_TBL_A,
                p_INCOMPATABILITY_GRP_CODE_TBL  =>G_INCOMP_GRP_CODE_TBL_A,
                p_LINE_DETAIL_TYPE_CODE_TBL     =>G_LINE_DETAIL_TYPE_CODE_TBL_A,
                p_MODIFIER_LEVEL_CODE_TBL       =>G_MODIFIER_LEVEL_CODE_TBL_A,
                p_PRIMARY_UOM_FLAG_TBL          =>G_PRIMARY_UOM_FLAG_TBL_A,
                x_status_code                   =>l_status_code,
                x_status_text                   =>l_status_text);
qp_debug_util.tstop('INSERT_PRICE_LIST_ATTRS');
END IF;
K:=1;


-- Determine Pricing UOM and Qty
IF (p_pricing_phase_id = G_PRICE_LIST_PHASE_ID) THEN
 IF (l_loop_count <> 0 ) THEN

           Evaluate_Between(p_pricing_phase_id,NULL,NULL,l_return_status , l_status_text);

           IF(l_return_status = FND_API.G_RET_STS_ERROR) THEN
            RAISE E_ROUTINE_ERRORS;
           END IF;

            -- Check for multiple item categories and customer classes
            Eliminate_Multiple_Hierarchies(p_pricing_phase_id,l_return_status,l_status_text);

            IF(l_return_status = FND_API.G_RET_STS_ERROR) THEN
             RAISE E_ROUTINE_ERRORS;
            END IF;

            --Handle_Excluder(p_pricing_phase_id,NULL,l_return_status,l_status_text);

            Perform_Grouping(p_pricing_phase_id, NULL, l_return_status, l_status_text);
            IF(l_return_status = FND_API.G_RET_STS_ERROR) THEN
             RAISE E_ROUTINE_ERRORS;
            END IF;

            IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
            engine_debug('Non Validated Price List Grouping Return Status : ' || l_return_status);


            engine_debug('Calling Incomp Routine in Non Validated Price List');

            END IF;
 	    QP_Resolve_Incompatability_PVT.Determine_Pricing_UOM_And_Qty
				(p_line_index        => NULL,
 				 p_order_uom_code    => NULL,
				 p_order_qty         => NULL,
				 p_pricing_phase_id  => G_PRICE_LIST_PHASE_ID,
                                 p_call_big_search   => FALSE,
				 x_list_line_id	 =>     l_list_line_id,
				 x_return_status     => l_return_status,
				 x_return_status_txt => l_status_text);

           IF(l_return_status = FND_API.G_RET_STS_ERROR) THEN
            RAISE E_ROUTINE_ERRORS;
           END IF;

            IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
            engine_debug('Incomp Return Status Non Validated QP_PREQ_GRP: ' || l_return_status);

            END IF;

            -- 3773652
            -- re-run Evaluate_Between after UOM conversion to check PLL really qualifies
            begin
              select 'x' into l_dummy
              from qp_npreq_lines_tmp
              where LINE_UOM_CODE <> nvl(PRICED_UOM_CODE, LINE_UOM_CODE)
              and (PRICE_FLAG = G_YES
                   or
                   PRICE_FLAG = G_PHASE and p_freeze_override_flag = G_YES)
              and rownum = 1;

              Evaluate_Between(p_pricing_phase_id,NULL,NULL,l_return_status,l_status_text);
            exception
              when no_data_found then
                null;
            end;

        -- Update the request line status for lines which got valid price list
            Update_Request_Line_Status(p_control_rec,'SUCCESS',p_freeze_override_flag,l_return_status,l_status_text);  --[julin/4708044]

            IF(l_return_status = FND_API.G_RET_STS_ERROR) THEN
             RAISE E_ROUTINE_ERRORS;
            END IF;

         --bug# 2091386 not reflecting the right price on change on UOM on the order line . Since
         --QP_Resolve_Incompatability_PVT.Determine_Pricing_UOM_And_Qty determines the pricing_qty
         --which is needed later in Get_Eligible_Price_Break we need to call Get_Eligible_Price_Break
         --after QP_Resolve_Incompatability_PVT.Determine_Pricing_UOM_And_Qty.
         --By doing this we will get the right price in the PRICE event on change of UOM on the order line
         --for price based on price break
         Get_Eligible_Price_Break(p_pricing_phase_id,NULL,l_return_status,l_status_text);
         IF(l_return_status = FND_API.G_RET_STS_ERROR) THEN
          RAISE E_ROUTINE_ERRORS;
         END IF;


            OPEN l_check_secondary_search;
            FETCH l_check_secondary_search INTO l_dummy;

            IF l_check_secondary_search%FOUND  THEN
             IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
             engine_debug('Trying to Perform Secondary Search ');
             END IF;
             Perform_Secondary_Search(p_freeze_override_flag,p_control_rec,l_return_status,l_status_text);
            END IF;
            CLOSE l_check_secondary_search;

            --delete children lines of PBH if the parent PBH line get eliminated in QP_Resolve_Incompatability_PVT

      	       /*OPEN l_chk_deleted_pbh_cur(J.line_index,G_PRICE_LIST_PHASE_ID);
      	       FETCH l_chk_deleted_pbh_cur INTO l_dummy;
      	       IF l_chk_deleted_pbh_cur%FOUND THEN
       	        Delete_Invalid_PBH_Children(J.line_index,G_PRICE_LIST_PHASE_ID);
               END IF;
               CLOSE l_chk_deleted_pbh_cur;*/
 ELSE
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('LOOOOOOOOOOOP Count : ' || l_loop_count);
    END IF;
    -- Update the request line status for lines which got valid price list
    Update_Request_Line_Status(p_control_rec,'FAILURE',p_freeze_override_flag,l_return_status,l_status_text);  --[julin/4708044]
    IF(l_return_status = FND_API.G_RET_STS_ERROR) THEN
     RAISE E_ROUTINE_ERRORS;
    END IF;

    OPEN l_check_secondary_search;
    FETCH l_check_secondary_search INTO l_dummy;

    IF l_check_secondary_search%FOUND  THEN
      IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
      engine_debug('Trying to Perform Secondary Search ');
      END IF;
      Perform_Secondary_Search(p_freeze_override_flag,p_control_rec,l_return_status,l_status_text);
      IF(l_return_status = FND_API.G_RET_STS_ERROR) THEN
       RAISE E_ROUTINE_ERRORS;
      END IF;
    END IF;
    CLOSE l_check_secondary_search;
 END IF; --l_loop_count <> 0
END IF;

--If there are request lines that don't have price list passed
--or not validated, the return further_search_flag=Yes to caller

IF (p_pricing_phase_id = G_PRICE_LIST_PHASE_ID) THEN
 OPEN l_check_no_list_passed;
 FETCH l_check_no_list_passed INTO l_dummy;

 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
 engine_debug('DUMMMMMMMMMMMMMMY: ' || l_dummy);

 END IF;
 IF l_check_no_list_passed%FOUND  THEN
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('DUMMMMMMMMMMMMMMY1000: ' || l_dummy);
  END IF;
  x_further_search := G_YES;
 ELSE
  x_further_search := G_NO;
 END IF;

 CLOSE l_check_no_list_passed;
END IF; --p_pricing_phase_id = G_PRICE_LIST_PHASE_ID

--Reset_all_tbls;
Reset_All_Tbls(l_return_status ,l_status_text );
IF (l_return_status = FND_API.G_RET_STS_ERROR) THEN
 RAISE E_ROUTINE_ERRORS;
END IF;

EXCEPTION
  WHEN E_ROUTINE_ERRORS THEN
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug(l_routine||': '||l_status_text);
    END IF;
    x_status_code := FND_API.G_RET_STS_ERROR;
    x_status_text := l_routine||': '||l_status_text;
  WHEN E_NO_LIST_FOUND THEN
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('No list found for a given item even after secondary fetch');
    END IF;
  WHEN TOO_MANY_ROWS THEN
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('In LIST_HEADER_SEARCH procedure');
    engine_debug('Conflict in price list detected');
    engine_debug(SQLERRM);
    END IF;
    null;
  WHEN NO_DATA_FOUND THEN
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('In LIST_HEADER_SEARCH  procedure');
    engine_debug('Item is not in the price list');
    END IF;
    null;
  WHEN OTHERS THEN
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug(l_routine||' '||SQLERRM);
    END IF;
    x_status_code := FND_API.G_RET_STS_ERROR;
    x_status_text := l_routine||' '||SQLERRM;
END LIST_HEADER_SEARCH;


--skattama
PROCEDURE PERFORM_SECONDARY_PATRN_SEARCH(P_FREEZE_OVERRIDE_FLAG        VARCHAR2,
				   p_search_path		NUMBER,
				   p_control_rec                 CONTROL_RECORD_TYPE,
		                   x_status_code            OUT NOCOPY   VARCHAR2,
		                   x_status_text            OUT NOCOPY   VARCHAR2)
AS

CURSOR L_SEC_LST_HDR_P1_QLFY_SEC_Y IS
	SELECT
		 /*+ ORDERED index(atrgrps QP_ATTRIBUTE_GROUPS_N3)
		 index(qplines QP_PREQ_LINES_TMP_U1)
		 index(qprs qp_pte_source_systems_u2)
		 L_SEC_LST_HDR_P1_QLFY_SEC_Y */
		  atrgrps.list_header_id,
		  atrgrps.list_line_id list_line_id,
		  qplines.line_index line_index,
		  atrgrps.pattern_id matched_pattrn_id,
		  G_PRICE_LIST_PHASE_ID,
		  atrgrps.hash_key matched_hash_key,
		  G_STAGE_CACHE_SEC_PL_HDR_SRCH stage,
		  G_STATUS_UNCHANGED,
		  atrgrps.source_system_code,
		  atrgrps.header_quals_exist_flag,
		  atrgrps.grouping_no grouping_no,
		  atrgrps.eq_flag,
		  QPLINES.VALIDATED_FLAG,  -- VALIDATED_FLAG
		   G_LINE_LEVEL,--MODIFIER_LEVEL_CODE,
		  atrgrps.other_oprt_count,
		  atrgrps.null_other_oprt_count,
                  atrgrps.LIST_TYPE_CODE,
                  atrgrps.ASK_FOR_FLAG,
                  atrgrps.HEADER_LIMIT_EXISTS,
                  atrgrps.LINE_LIMIT_EXISTS,
		  NULL, --QCDT.CURRENCY_DETAIL_ID,
       		  NULL, --QCDT.CURRENCY_HEADER_ID,
       		  NULL, --QCDT.SELLING_ROUNDING_FACTOR,
       		  atrgrps.CURRENCY_CODE   BASE_CURRENCY_CODE,
       		  qplines.pricing_effective_date,
		  qpq.qualifier_precedence,
                  atrgrps.descendents_quals_exist
   FROM
         qp_npreq_lines_tmp qplines,
	 qp_npreq_line_patrns_tmp qppattmp,
         QP_QUALIFIERS qpq,
	 qp_secu_attr_groups_v atrgrps,
         --qp_attribute_groups atrgrps,
	 --QP_PRICE_REQ_SOURCES_V qprs /* yangli */
	 qp_pte_source_systems qprs
   WHERE QPQ.QUALIFIER_CONTEXT = G_LIST_HEADER_CONTEXT
   AND   QPQ.QUALIFIER_ATTRIBUTE = G_PRICELIST_ATTRIBUTE
   AND   QPQ.QUALIFIER_ATTR_VALUE = to_char(QPLINES.PRICE_LIST_HEADER_ID)
   AND   QPQ.COMPARISON_OPERATOR_CODE = '='
   AND   QPQ.LIST_TYPE_CODE = 'PRL'             --3917802
   AND   atrgrps.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   QPQ.LIST_HEADER_ID = atrgrps.LIST_HEADER_ID
   AND   atrgrps.list_line_id = -1 -- Filter
   AND   atrgrps.pte_code = G_PTE_CODE
   AND   qppattmp.pattern_id = atrgrps.pattern_id -- Match
   AND   qppattmp.hash_key = atrgrps.hash_key -- Match
   AND   qppattmp.line_index = qplines.line_index --Join
   AND   (QPLINES.PRICE_FLAG = G_YES
          OR
         (QPLINES.PRICE_FLAG = G_PHASE
          AND
          P_FREEZE_OVERRIDE_FLAG = G_YES))
   AND   QPLINES.LIST_PRICE_OVERRIDE_FLAG IN ('N', 'O') --po integration
   AND   atrgrps.ACTIVE_FLAG = G_YES
   --AND   atrgrps.source_system_code = qprs.source_system_code --join
   --AND   qprs.request_type_code = g_request_type_code
   AND   qprs.APPLICATION_SHORT_NAME = atrgrps.source_system_code
   AND   qprs.pte_code = G_PTE_CODE
   AND   QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL
   AND   atrgrps.CURRENCY_CODE = QPLINES.CURRENCY_CODE
   AND   QPLINES.VALIDATED_FLAG = G_NO
   AND   (QPLINES.PRIMARY_QUALIFIERS_MATCH_FLAG = G_YES
          OR
          QPLINES.QUALIFIERS_EXIST_FLAG = G_NO
         )
   AND   QPLINES.PROCESSED_CODE = G_STS_LHS_NOT_FOUND
   AND  (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
		   NVL(TRUNC(atrgrps.START_DATE_ACTIVE_H),QPLINES.PRICING_EFFECTIVE_DATE)
			   AND NVL(TRUNC(atrgrps.END_DATE_ACTIVE_H),QPLINES.PRICING_EFFECTIVE_DATE)
   AND    QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
		   NVL(TRUNC(atrgrps.START_DATE_ACTIVE_Q),QPLINES.PRICING_EFFECTIVE_DATE)
			   AND NVL(TRUNC(atrgrps.END_DATE_ACTIVE_Q),QPLINES.PRICING_EFFECTIVE_DATE)
  ORDER BY 1,2;

CURSOR L_SEC_LST_LIN_P1_QLFY_SEC_Y IS
	SELECT
		 /*+ ORDERED index(qpl QP_LIST_LINES_N16)
		      index(qplines QP_PREQ_LINES_TMP_U1)
		      index(qppattmp QP_NPREQ_LINE_PATRNS_T_N2)
                      index(qppqual QP_PREQ_PATRN_QUAL_T_N2)
		      L_SEC_LST_LIN_P1_QLFY_SEC_Y */
		 DISTINCT qpl.list_header_id,
		  qpl.list_line_id list_line_id,
		  qplines.line_index line_index,
		  qpl.pattern_id matched_pattrn_id,
		  G_PRICE_LIST_PHASE_ID,
		  qpl.hash_key matched_hash_key,
		  G_STAGE_CACHE_SEC_PL_LIN_SRCH stage,
		  G_STATUS_UNCHANGED,
		  qppqual.source_system_code,
		  decode(qpl.QUALIFICATION_IND,6,'Y',22,'Y',2,'Y','N'),--qpq.header_quals_exist_flag,
		  -1 grouping_no,
		  qpl.eq_flag, ---to be discusseed
		  QPLINES.VALIDATED_FLAG,  -- VALIDATED_FLAG
		  G_LINE_LEVEL,--MODIFIER_LEVEL_CODE,
		  0 other_oprt_count,
		  qpl.null_other_oprt_count,
		  qppqual.list_type_code,
		  qppqual.ask_for_flag,
		  decode(qppqual.HEADER_LIMIT_EXISTS,'Y','Y',decode(qpl.limit_exists_flag,'Y','Y','N')), -- HEADER_LIMIT_EXISTS
		  qpl.limit_exists_flag,
		  qpl.BREAK_UOM_CODE,
		  qpl.BREAK_UOM_CONTEXT,
		  qpl.BREAK_UOM_ATTRIBUTE,
		  QPLINES.CURRENCY_CODE ORDER_CURRENCY,
		  qplines.pricing_effective_date,
		  qppqual.qualifier_precedence,
                  'N' descendents_quals_exist,
		  qpl.PRICE_BREAK_TYPE_CODE
   FROM   qp_npreq_lines_tmp qplines,
	  qp_npreq_line_patrns_tmp qppattmp,
	  qp_preq_patrn_qual_tmp qppqual,
	  qp_list_lines qpl
   WHERE  qppattmp.LINE_INDEX = qplines.LINE_INDEX
   AND   qppqual.LINE_INDEX = qplines.LINE_INDEX
   AND   QPL.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   qpl.pattern_id = qppattmp.pattern_id
   AND   qpl.hash_key = qppattmp.hash_key
   AND    QPL.LIST_HEADER_ID = qppqual.LIST_HEADER_ID
   AND    qppqual.stage = G_STAGE_CACHE_SEC_PL_HDR_SRCH
   AND   (QPLINES.PRICE_FLAG = G_YES
          OR
         (QPLINES.PRICE_FLAG = G_PHASE
          AND
          P_FREEZE_OVERRIDE_FLAG = G_YES))
   AND   QPLINES.LIST_PRICE_OVERRIDE_FLAG IN ('N', 'O') --po integration
   AND   QPLINES.LINE_TYPE_CODE = QPLINES.LINE_TYPE_CODE
   AND    QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
		   NVL(TRUNC(qpl.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
			   AND NVL(TRUNC(qpl.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPLINES.PROCESSED_CODE = G_STS_LHS_NOT_FOUND
   AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
   ORDER BY 1,2;

CURSOR L_SEC_LST_HDR_P1_QLFY_Y_CURR IS
	SELECT
		 /*+ ORDERED index(qcdt QP_CURRENCY_DETAILS_N2)
		 index(atrgrps QP_ATTRIBUTE_GROUPS_N3)
		 index(qplines QP_PREQ_LINES_TMP_U1)
		 index(qprs qp_pte_source_systems_u2)
		 L_SEC_LST_HDR_P1_QLFY_Y_CURR */
		 DISTINCT atrgrps.list_header_id,
		  atrgrps.list_line_id list_line_id,
		  qplines.line_index line_index,
		  atrgrps.pattern_id matched_pattrn_id,
		  G_PRICE_LIST_PHASE_ID,
		  atrgrps.hash_key matched_hash_key,
		  G_STAGE_CACHE_SEC_PL_HDR_SRCH stage,
		  G_STATUS_UNCHANGED,
		  atrgrps.source_system_code,
		  atrgrps.header_quals_exist_flag,
		  atrgrps.grouping_no grouping_no,
		  atrgrps.eq_flag,
		  QPLINES.VALIDATED_FLAG,  -- VALIDATED_FLAG
		   G_LINE_LEVEL,--MODIFIER_LEVEL_CODE,
		  atrgrps.other_oprt_count,
		  atrgrps.null_other_oprt_count,
                  atrgrps.LIST_TYPE_CODE,
                  atrgrps.ASK_FOR_FLAG,
                  atrgrps.HEADER_LIMIT_EXISTS,
                  atrgrps.LINE_LIMIT_EXISTS,
		  QCDT.CURRENCY_DETAIL_ID,
	       	  QCDT.CURRENCY_HEADER_ID,
	       	  QCDT.SELLING_ROUNDING_FACTOR,
	       	  atrgrps.CURRENCY_CODE   BASE_CURRENCY_CODE,
	          qplines.pricing_effective_date,
		  qpq.qualifier_precedence,
                  atrgrps.descendents_quals_exist
   FROM
         qp_npreq_lines_tmp qplines,
	 qp_npreq_line_patrns_tmp qppattmp,
         QP_QUALIFIERS qpq,
	 qp_secu_attr_groups_v atrgrps,
         --qp_attribute_groups atrgrps,
	 --QP_PRICE_REQ_SOURCES_V qprs, /* yangli */
         qp_pte_source_systems qprs,
	 qp_currency_details qcdt
   WHERE QPQ.QUALIFIER_CONTEXT = G_LIST_HEADER_CONTEXT
   AND   QPQ.QUALIFIER_ATTRIBUTE = G_PRICELIST_ATTRIBUTE
   AND   QPQ.QUALIFIER_ATTR_VALUE = to_char(QPLINES.PRICE_LIST_HEADER_ID)
   AND   QPQ.COMPARISON_OPERATOR_CODE = '='
   AND   QPQ.LIST_TYPE_CODE = 'PRL'             --3917802
   AND   atrgrps.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   QPQ.LIST_HEADER_ID = atrgrps.LIST_HEADER_ID
   AND   atrgrps.list_line_id = -1 -- Filter
   AND   atrgrps.pte_code = G_PTE_CODE
   AND   qppattmp.pattern_id = atrgrps.pattern_id -- Match
   AND   qppattmp.hash_key = atrgrps.hash_key -- Match
   AND   qppattmp.line_index = qplines.line_index --Join
   AND   (QPLINES.PRICE_FLAG = G_YES
          OR
         (QPLINES.PRICE_FLAG = G_PHASE
          AND
          P_FREEZE_OVERRIDE_FLAG = G_YES))
   AND   QPLINES.LIST_PRICE_OVERRIDE_FLAG IN ('N', 'O') --po integration
   AND   atrgrps.ACTIVE_FLAG = G_YES
   --AND   atrgrps.source_system_code = qprs.source_system_code --join
   --AND   qprs.request_type_code = g_request_type_code
   AND   qprs.APPLICATION_SHORT_NAME = atrgrps.source_system_code
   AND   qprs.pte_code = G_PTE_CODE
   AND   QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL
   AND   atrgrps.CURRENCY_HEADER_ID = QCDT.CURRENCY_HEADER_ID
   AND   QPLINES.CURRENCY_CODE = QCDT.TO_CURRENCY_CODE
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
                NVL(TRUNC(QCDT.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
                AND NVL(TRUNC(QCDT.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND (
        (qcdt.curr_attribute_context is null
         and not exists
             (select /*+ use_nl(qcdt1) LEADING(qcdt1) index(qcdt1 QP_CURRENCY_DETAILS_N2) */ 'x'
	       from qp_npreq_line_attrs_tmp pa_tmp,   qp_currency_details qcdt1
               where qcdt1.curr_attribute_context IS NOT NULL
		 and qcdt1.curr_attribute_context = pa_tmp.context
                 and qcdt1.curr_attribute = pa_tmp.attribute
                 and qcdt1.curr_attribute_value = pa_tmp.value_from
                 and qcdt1.curr_attribute_type = pa_tmp.ATTRIBUTE_TYPE
                 and qcdt1.to_currency_code = qcdt.to_currency_code
                 and qcdt1.currency_header_id = qcdt.currency_header_id
                 and pa_tmp.pricing_status_code = G_STATUS_UNCHANGED
                 and pa_tmp.line_index = qplines.line_index
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
                     NVL(TRUNC(QCDT1.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
                     AND NVL(TRUNC(QCDT1.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
             )
        )
        OR
        (qcdt.curr_attribute_context is not null
         and qcdt.currency_detail_id =
             (select qcdt3.currency_detail_id
	       from qp_currency_details qcdt3
                 where qcdt3.to_currency_code = qcdt.to_currency_code
                 and qcdt3.currency_header_id = qcdt.currency_header_id
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
                     NVL(TRUNC(QCDT3.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
                     AND NVL(TRUNC(QCDT3.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
                 and  qcdt3.precedence =
             (select /*+ use_nl(qcdt2) LEADING(qcdt2) index(qcdt2 QP_CURRENCY_DETAILS_N2) */ min(qcdt2.precedence)
	       from qp_npreq_line_attrs_tmp pa_tmp1, qp_currency_details qcdt2
               where qcdt2.curr_attribute_context IS NOT NULL
		 and qcdt2.curr_attribute_context = pa_tmp1.context
                 and qcdt2.curr_attribute = pa_tmp1.attribute
                 and qcdt2.curr_attribute_value = pa_tmp1.value_from
                 and qcdt2.curr_attribute_type = pa_tmp1.ATTRIBUTE_TYPE
                 and qcdt2.to_currency_code = qcdt.to_currency_code
                 and qcdt2.currency_header_id = qcdt.currency_header_id
                 and pa_tmp1.pricing_status_code = G_STATUS_UNCHANGED
                 and pa_tmp1.line_index = qplines.line_index
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
                     NVL(TRUNC(QCDT2.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
                     AND NVL(TRUNC(QCDT2.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
             ))
        )
       )
   AND   QPLINES.VALIDATED_FLAG = G_NO
   AND   (QPLINES.PRIMARY_QUALIFIERS_MATCH_FLAG = G_YES
          OR
          QPLINES.QUALIFIERS_EXIST_FLAG = G_NO
         )
   AND   QPLINES.PROCESSED_CODE = G_STS_LHS_NOT_FOUND
   AND  (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
		   NVL(TRUNC(atrgrps.START_DATE_ACTIVE_H),QPLINES.PRICING_EFFECTIVE_DATE)
			   AND NVL(TRUNC(atrgrps.END_DATE_ACTIVE_H),QPLINES.PRICING_EFFECTIVE_DATE)
   AND    QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
		   NVL(TRUNC(atrgrps.START_DATE_ACTIVE_Q),QPLINES.PRICING_EFFECTIVE_DATE)
			   AND NVL(TRUNC(atrgrps.END_DATE_ACTIVE_Q),QPLINES.PRICING_EFFECTIVE_DATE)
   ORDER BY 1,2;

CURSOR L_SEC_LST_LIN_P1_QLFY_Y_CURR IS
	SELECT
                 /*+ ORDERED index(qpl QP_LIST_LINES_N16)
		  index(qplines QP_PREQ_LINES_TMP_U1)
		  index(qppattmp QP_NPREQ_LINE_PATRNS_T_N2)
                  index(qppqual QP_PREQ_PATRN_QUAL_T_N2)
		 L_SEC_LST_LIN_P1_QLFY_Y_CURR */
		 DISTINCT qpl.list_header_id,
		  qpl.list_line_id list_line_id,
		  qplines.line_index line_index,
		  qpl.pattern_id matched_pattrn_id,
		  G_PRICE_LIST_PHASE_ID,
		  qpl.hash_key matched_hash_key,
		  G_STAGE_CACHE_SEC_PL_LIN_SRCH stage,
		  G_STATUS_UNCHANGED,
		  qppqual.source_system_code,
		  decode(qpl.QUALIFICATION_IND,6,'Y',22,'Y',2,'Y','N'),--qpq.header_quals_exist_flag,
		  -1 grouping_no,
		  qpl.eq_flag, ---to be discusseed
		  QPLINES.VALIDATED_FLAG,  -- VALIDATED_FLAG
		  G_LINE_LEVEL,--MODIFIER_LEVEL_CODE,
		  0 other_oprt_count,
		  qpl.null_other_oprt_count,
		  qppqual.list_type_code,
		  qppqual.ask_for_flag,
		  decode(qppqual.HEADER_LIMIT_EXISTS,'Y','Y',decode(qpl.limit_exists_flag,'Y','Y','N')), -- HEADER_LIMIT_EXISTS
		  qpl.limit_exists_flag,
		  qpl.BREAK_UOM_CODE,
		  qpl.BREAK_UOM_CONTEXT,
		  qpl.BREAK_UOM_ATTRIBUTE,
		  QPLINES.CURRENCY_CODE ORDER_CURRENCY,
		  qplines.pricing_effective_date,
		  qppqual.CURRENCY_DETAIL_ID,
		  qppqual.CURRENCY_HEADER_ID,
		  qppqual.SELLING_ROUNDING_FACTOR,
		  qppqual.BASE_CURRENCY_CODE,
		  qppqual.qualifier_precedence,
                  'N' descendents_quals_exist,
		  qpl.PRICE_BREAK_TYPE_CODE
   FROM   qp_npreq_lines_tmp qplines,
	  qp_npreq_line_patrns_tmp qppattmp,
	  qp_preq_patrn_qual_tmp qppqual,
	  qp_list_lines qpl
   WHERE qppattmp.LINE_INDEX = qplines.LINE_INDEX
   AND   qppqual.LINE_INDEX = qplines.LINE_INDEX
   AND   QPL.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   qpl.pattern_id = qppattmp.pattern_id
   AND   qpl.hash_key = qppattmp.hash_key
   AND   QPL.LIST_HEADER_ID = qppqual.LIST_HEADER_ID
   AND    qppqual.stage = G_STAGE_CACHE_SEC_PL_HDR_SRCH
   AND   (QPLINES.PRICE_FLAG = G_YES
          OR
         (QPLINES.PRICE_FLAG = G_PHASE
          AND
          P_FREEZE_OVERRIDE_FLAG = G_YES))
   AND   QPLINES.LIST_PRICE_OVERRIDE_FLAG IN ('N', 'O') --po integration
   AND   QPLINES.LINE_TYPE_CODE = QPLINES.LINE_TYPE_CODE
   AND    QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
		   NVL(TRUNC(qpl.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
			   AND NVL(TRUNC(qpl.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPLINES.PROCESSED_CODE = G_STS_LHS_NOT_FOUND
   AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
   ORDER BY 1,2;

CURSOR L_SEC_LST_HDR_P1_QLFY_N_CURR IS
	SELECT
		 /*+ ORDERED index(qplines QP_PREQ_LINES_TMP_U1)
		     index(qcdt QP_CURRENCY_DETAILS_N2)
                     index(qprs qp_pte_source_systems_u2)
		 L_SEC_LST_HDR_P1_QLFY_N_CURR */
		 DISTINCT qph.list_header_id,
		  -1 list_line_id,
		  qplines.line_index line_index,
		  -2 matched_pattrn_id,
		  G_PRICE_LIST_PHASE_ID,
		  NULL matched_hash_key,
		  G_STAGE_CACHE_SEC_PL_HDR_SRCH stage,
		  G_STATUS_UNCHANGED,
		  qph.source_system_code,
		  'N',--qpq.header_quals_exist_flag,
		  -1 grouping_no,
		  'Y' eq_flag,
		  QPLINES.VALIDATED_FLAG,  -- VALIDATED_FLAG
		   G_LINE_LEVEL,--MODIFIER_LEVEL_CODE,
		  0 other_oprt_count,
		  0 null_other_oprt_count,
                  qph.LIST_TYPE_CODE,
                  qph.ASK_FOR_FLAG,
                  qph.LIMIT_EXISTS_FLAG,
                  NULL LINE_LIMIT_EXISTS,
		  QCDT.CURRENCY_DETAIL_ID,
       		  QCDT.CURRENCY_HEADER_ID,
	       	  QCDT.SELLING_ROUNDING_FACTOR,
	          qph.CURRENCY_CODE   BASE_CURRENCY_CODE,
       		  qplines.pricing_effective_date,
		  qpq.qualifier_precedence,
                  'N' descendents_quals_exist
   FROM
         qp_npreq_lines_tmp qplines,
         QP_QUALIFIERS qpq,
	 qp_list_headers_b qph,
         qp_pte_source_systems qprs,
         --QP_PRICE_REQ_SOURCES_V qprs, /* yangli */
	 qp_currency_details qcdt
   WHERE QPQ.QUALIFIER_CONTEXT = G_LIST_HEADER_CONTEXT
   AND   QPQ.QUALIFIER_ATTRIBUTE = G_PRICELIST_ATTRIBUTE
   AND   QPQ.QUALIFIER_ATTR_VALUE = to_char(QPLINES.PRICE_LIST_HEADER_ID)
   AND   QPQ.COMPARISON_OPERATOR_CODE = '='
   AND   QPQ.LIST_TYPE_CODE = 'PRL'             --3917802
   AND   QPQ.LIST_HEADER_ID = qph.LIST_HEADER_ID
   AND   (QPLINES.PRICE_FLAG = G_YES
          OR
         (QPLINES.PRICE_FLAG = G_PHASE
          AND
          P_FREEZE_OVERRIDE_FLAG = G_YES))
   AND   QPLINES.LIST_PRICE_OVERRIDE_FLAG IN ('N', 'O') --po integration
   AND   qph.ACTIVE_FLAG = G_YES
   AND   qph.pte_code = G_PTE_CODE
   --AND   qph.source_system_code = qprs.source_system_code --join
   --AND   qprs.request_type_code = g_request_type_code
   AND   qprs.APPLICATION_SHORT_NAME = qph.source_system_code
   AND   qprs.pte_code = G_PTE_CODE
   AND   QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL
   AND QPH.CURRENCY_HEADER_ID = QCDT.CURRENCY_HEADER_ID
   AND QPLINES.CURRENCY_CODE = QCDT.TO_CURRENCY_CODE
   AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
                NVL(TRUNC(QCDT.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
                AND NVL(TRUNC(QCDT.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND (
        (qcdt.curr_attribute_context is null
         and not exists
             (select /*+ use_nl(qcdt1) LEADING(qcdt1) index(qcdt1 QP_CURRENCY_DETAILS_N2) */ 'x'
	       from qp_npreq_line_attrs_tmp pa_tmp,   qp_currency_details qcdt1
               where qcdt1.curr_attribute_context IS NOT NULL
		 and qcdt1.curr_attribute_context = pa_tmp.context
                 and qcdt1.curr_attribute = pa_tmp.attribute
                 and qcdt1.curr_attribute_value = pa_tmp.value_from
                 and qcdt1.curr_attribute_type = pa_tmp.ATTRIBUTE_TYPE
                 and qcdt1.to_currency_code = qcdt.to_currency_code
                 and qcdt1.currency_header_id = qcdt.currency_header_id
                 and pa_tmp.pricing_status_code = G_STATUS_UNCHANGED
                 and pa_tmp.line_index = qplines.line_index
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
                     NVL(TRUNC(QCDT1.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
                     AND NVL(TRUNC(QCDT1.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
             )
        )
        OR
        (qcdt.curr_attribute_context is not null
         and qcdt.currency_detail_id =
             (select qcdt3.currency_detail_id
	       from qp_currency_details qcdt3
                 where qcdt3.to_currency_code = qcdt.to_currency_code
                 and qcdt3.currency_header_id = qcdt.currency_header_id
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
                     NVL(TRUNC(QCDT3.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
                     AND NVL(TRUNC(QCDT3.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
                 and  qcdt3.precedence =
             (select /*+ use_nl(qcdt2) LEADING(qcdt2) index(qcdt2 QP_CURRENCY_DETAILS_N2) */ min(qcdt2.precedence)
	       from qp_npreq_line_attrs_tmp pa_tmp1, qp_currency_details qcdt2
               where qcdt2.curr_attribute_context IS NOT NULL
		 and qcdt2.curr_attribute_context = pa_tmp1.context
                 and qcdt2.curr_attribute = pa_tmp1.attribute
                 and qcdt2.curr_attribute_value = pa_tmp1.value_from
                 and qcdt2.curr_attribute_type = pa_tmp1.ATTRIBUTE_TYPE
                 and qcdt2.to_currency_code = qcdt.to_currency_code
                 and qcdt2.currency_header_id = qcdt.currency_header_id
                 and pa_tmp1.pricing_status_code = G_STATUS_UNCHANGED
                 and pa_tmp1.line_index = qplines.line_index
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
                     NVL(TRUNC(QCDT2.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
                     AND NVL(TRUNC(QCDT2.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
             ))
        )
       )
   AND   (QPLINES.PRIMARY_QUALIFIERS_MATCH_FLAG = G_YES
		OR
		QPLINES.QUALIFIERS_EXIST_FLAG = 'N')
   AND   QPLINES.PROCESSED_CODE = G_STS_LHS_NOT_FOUND
   AND  (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
		   NVL(TRUNC(qph.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
			   AND NVL(TRUNC(qph.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   ORDER BY 1,2;

CURSOR L_SEC_LST_LIN_P1_QLFY_N_CURR IS
	SELECT
		 /*+ ORDERED index(qpl QP_LIST_LINES_N16)
		     index(qplines QP_PREQ_LINES_TMP_U1)
                     index(qppattmp QP_NPREQ_LINE_PATRNS_T_N2)
                     index(qppqual QP_PREQ_PATRN_QUAL_T_N2)
		      L_SEC_LST_LIN_P1_QLFY_N_CURR */
		 DISTINCT qpl.list_header_id,
		  qpl.list_line_id list_line_id,
		  qplines.line_index line_index,
		  qpl.pattern_id matched_pattrn_id,
		  G_PRICE_LIST_PHASE_ID,
		  qpl.hash_key matched_hash_key,
		  G_STAGE_CACHE_SEC_PL_LIN_SRCH stage,
		  G_STATUS_UNCHANGED,
		  qppqual.source_system_code,
		  decode(qpl.QUALIFICATION_IND,6,'Y',22,'Y',2,'Y','N'),--qpq.header_quals_exist_flag,
		  -1 grouping_no,
		  qpl.eq_flag, ---to be discusseed
		  QPLINES.VALIDATED_FLAG,  -- VALIDATED_FLAG
		  G_LINE_LEVEL,--MODIFIER_LEVEL_CODE,
		  0 other_oprt_count,
		  qpl.null_other_oprt_count,
		  qppqual.list_type_code,
		  qppqual.ask_for_flag,
		  decode(qppqual.HEADER_LIMIT_EXISTS,'Y','Y',decode(qpl.limit_exists_flag,'Y','Y','N')), -- HEADER_LIMIT_EXISTS
		  qpl.limit_exists_flag,
		  qpl.BREAK_UOM_CODE,
		  qpl.BREAK_UOM_CONTEXT,
		  qpl.BREAK_UOM_ATTRIBUTE,
		  QPLINES.CURRENCY_CODE ORDER_CURRENCY,
		  qplines.pricing_effective_date,
		  qppqual.CURRENCY_DETAIL_ID,
		  qppqual.CURRENCY_HEADER_ID,
		  qppqual.SELLING_ROUNDING_FACTOR,
		  qppqual.BASE_CURRENCY_CODE,
		  qppqual.qualifier_precedence,
                  'N' descendents_quals_exist,
  		  qpl.PRICE_BREAK_TYPE_CODE
   FROM   qp_npreq_lines_tmp qplines,
	  qp_npreq_line_patrns_tmp qppattmp,
          qp_preq_patrn_qual_tmp qppqual,
	  qp_list_lines qpl
   WHERE qppattmp.LINE_INDEX = qplines.LINE_INDEX
   AND   qppqual.LINE_INDEX = qplines.LINE_INDEX
   AND   QPL.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   qpl.pattern_id = qppattmp.pattern_id
   AND   qpl.hash_key = qppattmp.hash_key
   AND   QPL.LIST_HEADER_ID = qppqual.LIST_HEADER_ID
   AND   qppqual.stage = G_STAGE_CACHE_SEC_PL_HDR_SRCH
   AND   (QPLINES.PRICE_FLAG = G_YES
          OR
         (QPLINES.PRICE_FLAG = G_PHASE
          AND
          P_FREEZE_OVERRIDE_FLAG = G_YES))
   AND   QPLINES.LIST_PRICE_OVERRIDE_FLAG IN ('N', 'O') --po integration
   AND   QPLINES.LINE_TYPE_CODE = QPLINES.LINE_TYPE_CODE
   AND    QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
		   NVL(TRUNC(qpl.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
			   AND NVL(TRUNC(qpl.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPLINES.PROCESSED_CODE = G_STS_LHS_NOT_FOUND
   AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
   ORDER BY 1,2;

CURSOR L_SEC_LST_HDR_P1_QLFY_SEC_N IS
	SELECT
		 /*+ ORDERED index(qplines QP_PREQ_LINES_TMP_U1)
		     index(qprs qp_pte_source_systems_u2)
   		     L_SEC_LST_HDR_P1_QLFY_SEC_N */
		 DISTINCT qph.list_header_id,
		  -1 list_line_id,
		  qplines.line_index line_index,
		  NULL matched_pattrn_id,
		  G_PRICE_LIST_PHASE_ID,
		  NULL matched_hash_key,
		  G_STAGE_CACHE_SEC_PL_HDR_SRCH stage,
		  G_STATUS_UNCHANGED,
		  qph.source_system_code,
		  NULL,--qpq.header_quals_exist_flag,
		  -1 grouping_no,
		  'Y' eq_flag,
		  QPLINES.VALIDATED_FLAG,  -- VALIDATED_FLAG
		   G_LINE_LEVEL,--MODIFIER_LEVEL_CODE,
		  0 other_oprt_count,
		  0 null_other_oprt_count,
                  qph.LIST_TYPE_CODE,
                  qph.ASK_FOR_FLAG,
                  qph.LIMIT_EXISTS_FLAG,
                  NULL LINE_LIMIT_EXISTS,
		  NULL, --QCDT.CURRENCY_DETAIL_ID,
       		  NULL, --QCDT.CURRENCY_HEADER_ID,
       		  NULL, --QCDT.SELLING_ROUNDING_FACTOR,
       		  qph.CURRENCY_CODE   BASE_CURRENCY_CODE,
	       	  qplines.pricing_effective_date,
		  qpq.qualifier_precedence,
                  'N' descendents_quals_exist
   FROM
         qp_npreq_lines_tmp qplines,
	 QP_QUALIFIERS qpq,
         qp_list_headers_b qph,
	 qp_pte_source_systems qprs
         --QP_PRICE_REQ_SOURCES_V qprs /* yangli */
   WHERE QPQ.QUALIFIER_CONTEXT = G_LIST_HEADER_CONTEXT
   AND   QPQ.QUALIFIER_ATTRIBUTE = G_PRICELIST_ATTRIBUTE
   AND   QPQ.QUALIFIER_ATTR_VALUE = to_char(QPLINES.PRICE_LIST_HEADER_ID)
   AND   QPQ.COMPARISON_OPERATOR_CODE = '='
   AND   QPQ.LIST_TYPE_CODE = 'PRL'             --3917802
   AND   QPQ.LIST_HEADER_ID = qph.LIST_HEADER_ID
   AND   (QPLINES.PRICE_FLAG = G_YES
          OR
         (QPLINES.PRICE_FLAG = G_PHASE
          AND
          P_FREEZE_OVERRIDE_FLAG = G_YES))
   AND   QPLINES.LIST_PRICE_OVERRIDE_FLAG IN ('N', 'O') --po integration
   AND   qph.ACTIVE_FLAG = G_YES
   AND   qph.pte_code = G_PTE_CODE
   --AND   qph.source_system_code = qprs.source_system_code --join
   --AND   qprs.request_type_code = g_request_type_code
   AND   qprs.APPLICATION_SHORT_NAME = qph.source_system_code
   AND   qprs.pte_code = G_PTE_CODE
   AND   QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL
   AND   qph.CURRENCY_CODE = QPLINES.CURRENCY_CODE
   AND   (QPLINES.PRIMARY_QUALIFIERS_MATCH_FLAG = G_YES
		OR QPLINES.QUALIFIERS_EXIST_FLAG = 'N')
   AND   QPLINES.PROCESSED_CODE = G_STS_LHS_NOT_FOUND
   AND  (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
   AND   QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
		   NVL(TRUNC(qph.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
			   AND NVL(TRUNC(qph.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   ORDER BY 1,2;

CURSOR L_SEC_LST_LIN_P1_QLFY_SEC_N IS
	SELECT
		/*+ ORDERED index(qpl QP_LIST_LINES_N16)
		     index(qplines QP_PREQ_LINES_TMP_U1)
                     index(qppattmp QP_NPREQ_LINE_PATRNS_T_N2)
                     index(qppqual QP_PREQ_PATRN_QUAL_T_N2)
		      L_SEC_LST_LIN_P1_QLFY_SEC_N */
		 DISTINCT qpl.list_header_id,
		  qpl.list_line_id list_line_id,
		  qplines.line_index line_index,
		  qpl.pattern_id matched_pattrn_id,
		  G_PRICE_LIST_PHASE_ID,
		  qpl.hash_key matched_hash_key,
		  G_STAGE_CACHE_SEC_PL_LIN_SRCH stage,
		  G_STATUS_UNCHANGED,
		  qppqual.source_system_code,
		  decode(qpl.QUALIFICATION_IND,6,'Y',22,'Y',2,'Y','N'),--qpq.header_quals_exist_flag,
		  -1 grouping_no,
		  qpl.eq_flag, ---to be discusseed
		  QPLINES.VALIDATED_FLAG,  -- VALIDATED_FLAG
		  G_LINE_LEVEL,--MODIFIER_LEVEL_CODE,
		  0 other_oprt_count,
		  qpl.null_other_oprt_count,
		  qppqual.list_type_code,
		  qppqual.ask_for_flag,
		  decode(qppqual.HEADER_LIMIT_EXISTS,'Y','Y',decode(qpl.limit_exists_flag,'Y','Y','N')), -- HEADER_LIMIT_EXISTS
		  qpl.limit_exists_flag,
		  qpl.BREAK_UOM_CODE,
		  qpl.BREAK_UOM_CONTEXT,
		  qpl.BREAK_UOM_ATTRIBUTE,
		  QPLINES.CURRENCY_CODE ORDER_CURRENCY,
		  qplines.pricing_effective_date,
		  qppqual.qualifier_precedence,
		  'N' descendents_quals_exist,
  		  qpl.PRICE_BREAK_TYPE_CODE
   FROM   qp_npreq_lines_tmp qplines,
	  qp_npreq_line_patrns_tmp qppattmp,
          qp_preq_patrn_qual_tmp qppqual,
	  qp_list_lines qpl
   WHERE qppattmp.LINE_INDEX = qplines.LINE_INDEX
   AND   qppqual.LINE_INDEX = qplines.LINE_INDEX
   AND   QPL.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   qpl.pattern_id = qppattmp.pattern_id
   AND   qpl.hash_key = qppattmp.hash_key
   AND   QPL.LIST_HEADER_ID = qppqual.LIST_HEADER_ID
   AND   qppqual.stage = G_STAGE_CACHE_SEC_PL_HDR_SRCH
   AND   (QPLINES.PRICE_FLAG = G_YES
          OR
         (QPLINES.PRICE_FLAG = G_PHASE
          AND
          P_FREEZE_OVERRIDE_FLAG = G_YES))
   AND   QPLINES.LIST_PRICE_OVERRIDE_FLAG IN ('N', 'O') --po integration
   AND   QPLINES.LINE_TYPE_CODE = QPLINES.LINE_TYPE_CODE
   AND    QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
		   NVL(TRUNC(qpl.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
			   AND NVL(TRUNC(qpl.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND   QPLINES.PROCESSED_CODE = G_STS_LHS_NOT_FOUND
   AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
   ORDER BY 1,2;

/****************************/
CURSOR L_SEC_SRCH_BOTH_P2_QLFY_N IS

   SELECT /*+ ORDERED index(qplines QP_PREQ_LINES_TMP_U1)
	index(QPQ QP_QUALIFIERS_N4)
       index(qpl QP_LIST_LINES_N17)
       index(qppattmp1 QP_NPREQ_LINE_PATRNS_T_N2)
       index(qpatrgrp QP_ATTRIBUTE_GROUPS_N1)
       index(qprs qp_pte_source_systems_u2)
       L_SEC_SRCH_BOTH_P2_QLFY_N */
      DISTINCT
         qpl.LIST_HEADER_ID,
         qpl.LIST_LINE_ID,
         qplines.LINE_INDEX,
         qpl.pattern_id  QPL_MATCHED_PATTRN_ID,
	 NULL  AG_MATCHED_PATTRN_ID,
         G_PRICE_LIST_PHASE_ID,
         qpl.HASH_KEY  QPL_MATCHED_HASH_KEY,
         NULL  AG_MATCHED_HASH_KEY,
	 G_STAGE_CACHE_SEC_PL_LIN_SRCH2 STAGE,
	 G_STATUS_UNCHANGED PRICING_STATUS_CODE,
         qpatrgrp.source_system_code,
         --decode(bitand(qpl.qualification_ind,2),2,'Y','N') HEADER_QUALS_EXIST_FLAG,
	 --DECODE(qpatrgrp.EQ_FLAG,'N','Y','N') HEADER_QUALS_EXIST_FLAG,
	 DECODE(qpatrgrp.EQ_FLAG,'N','Y',DECODE(qpatrgrp.descendents_quals_exist,'Y','Y','N')) HEADER_QUALS_EXIST_FLAG,
         -1 qpl_grpng_num,
         qpatrgrp.GROUPING_NO ag_grpng_num,
         qpl.EQ_FLAG QPL_EQFLAG,
	 qpatrgrp.EQ_FLAG ATRGRP_EQFLAG,
         qplines.VALIDATED_FLAG,
         qpl.MODIFIER_LEVEL_CODE,
         qpl.null_other_oprt_count qpl_other_oprt_cnt,
         qpatrgrp.other_oprt_count ag_other_oprt_cnt,
         qpatrgrp.null_other_oprt_count ag_null_othr_oprt_cnt,
	 qpatrgrp.LIST_TYPE_CODE,
         qpatrgrp.ASK_FOR_FLAG,
         qpatrgrp.HEADER_LIMIT_EXISTS,
         qpatrgrp.LINE_LIMIT_EXISTS,
	 NULL CURRENCY_DETAIL_ID,
         NULL CURRENCY_HEADER_ID,
         NULL SELLING_ROUNDING_FACTOR,
         qpatrgrp.CURRENCY_CODE   BASE_CURRENCY_CODE,
         qplines.pricing_effective_date,
         qpl.BREAK_UOM_CODE,
         qpl.BREAK_UOM_CONTEXT,
         qpl.BREAK_UOM_ATTRIBUTE,
         QPLINES.CURRENCY_CODE ORDER_CURRENCY,
	 qpq.qualifier_precedence,
	 'N' descendents_quals_exist,
	 qpl.PRICE_BREAK_TYPE_CODE
   FROM qp_npreq_lines_tmp qplines,
	QP_QUALIFIERS QPQ,
        qp_npreq_line_patrns_tmp qppattmp1,
	qp_list_lines qpl,
	qp_secu_attr_groups_v qpatrgrp,
	--qp_attribute_groups qpatrgrp,
        qp_pte_source_systems qprs
        --qp_price_req_sources_v qprs
   WHERE qppattmp1.line_index = qplines.line_index
   AND   QPQ.QUALIFIER_CONTEXT = G_LIST_HEADER_CONTEXT
   AND   QPQ.QUALIFIER_ATTRIBUTE = G_PRICELIST_ATTRIBUTE
   AND   QPQ.QUALIFIER_ATTR_VALUE = to_char(QPLINES.PRICE_LIST_HEADER_ID)
   AND   QPQ.COMPARISON_OPERATOR_CODE = '='
   AND   QPQ.LIST_TYPE_CODE = 'PRL'             --3917802
   AND   QPQ.LIST_HEADER_ID = QPL.LIST_HEADER_ID
   AND   QPL.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   (QPLINES.PRICE_FLAG = G_YES
          OR
         (QPLINES.PRICE_FLAG = G_PHASE
          AND
          P_FREEZE_OVERRIDE_FLAG = G_YES))
   AND   QPLINES.LIST_PRICE_OVERRIDE_FLAG IN ('N', 'O') --po integration
   AND   QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL
   AND   (QPLINES.PRIMARY_QUALIFIERS_MATCH_FLAG = G_YES
             OR
         QPLINES.QUALIFIERS_EXIST_FLAG = G_NO
	  )
   AND   qppattmp1.pattern_id = qpl.pattern_id
   AND   qppattmp1.hash_key = qpl.hash_key
   AND   qpl.pte_code = G_PTE_CODE
   AND   QPQ.ACTIVE_FLAG = G_YES
   AND   QPLINES.PROCESSED_CODE = G_STS_LHS_NOT_FOUND
   AND qpl.pricing_phase_id = G_PRICE_LIST_PHASE_ID
     AND nvl(qplines.pricing_effective_date,   TRUNC(sysdate))
          BETWEEN nvl(qpl.start_date_active,   nvl(qplines.pricing_effective_date,   TRUNC(sysdate)))
	   AND nvl(qpl.end_date_active,   nvl(qplines.pricing_effective_date,   TRUNC(sysdate)))
     AND qpatrgrp.list_header_id = qpl.list_header_id
     AND qpatrgrp.pricing_phase_id = G_PRICE_LIST_PHASE_ID
     AND qpatrgrp.active_flag = G_YES
     AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = qpatrgrp.orig_org_id) OR -- begin security
         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(qpatrgrp.global_flag,'Y') = 'Y') OR
         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
     AND nvl(qplines.pricing_effective_date,   TRUNC(sysdate))
          BETWEEN nvl(qpatrgrp.START_DATE_ACTIVE_H,   nvl(qplines.pricing_effective_date,   TRUNC(sysdate)))
          AND nvl(qpatrgrp.END_DATE_ACTIVE_H,   nvl(qplines.pricing_effective_date,   TRUNC(sysdate)))
     AND nvl(qplines.pricing_effective_date,   TRUNC(sysdate))
         BETWEEN NVL(TRUNC(qpatrgrp.START_DATE_ACTIVE_Q),nvl(qplines.pricing_effective_date,   TRUNC(sysdate)))
         AND NVL(TRUNC(qpatrgrp.END_DATE_ACTIVE_Q),nvl(qplines.pricing_effective_date,   TRUNC(sysdate)))
     --AND qprs.source_system_code = qpatrgrp.source_system_code
     --AND qprs.request_type_code = qplines.request_type_code -- check it
     AND qprs.APPLICATION_SHORT_NAME = qpatrgrp.source_system_code
     AND qprs.pte_code = G_PTE_CODE
     AND qpatrgrp.currency_code = qplines.currency_code
     AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0);

CURSOR L_SEC_SRCH_BOTH_P2_QLFY_N_CURR IS

   SELECT /*+ ORDERED index(qplines QP_PREQ_LINES_TMP_U1)
	index(QPQ QP_QUALIFIERS_N4)
       index(qpl QP_LIST_LINES_N16)
       index(qppattmp1 QP_NPREQ_LINE_PATRNS_T_N2)
       index(qpatrgrp QP_ATTRIBUTE_GROUPS_N1)
       index(qcdt QP_CURRENCY_DETAILS_N2)
       index(qprs qp_pte_source_systems_u2)
       L_SEC_SRCH_BOTH_P2_QLFY_N_CURR */
      DISTINCT
         qpl.LIST_HEADER_ID,
         qpl.LIST_LINE_ID,
         qplines.LINE_INDEX,
         qpl.pattern_id  QPL_MATCHED_PATTRN_ID,
	 NULL  AG_MATCHED_PATTRN_ID,
         G_PRICE_LIST_PHASE_ID,
         qpl.HASH_KEY  QPL_MATCHED_HASH_KEY,
         NULL  AG_MATCHED_HASH_KEY,
	 G_STAGE_CACHE_SEC_PL_LIN_SRCH2 STAGE,
	 G_STATUS_UNCHANGED PRICING_STATUS_CODE,
         qpatrgrp.source_system_code,
         --decode(bitand(qpl.qualification_ind,2),2,'Y','N') HEADER_QUALS_EXIST_FLAG,
	 --DECODE(qpatrgrp.EQ_FLAG,'N','Y','N') HEADER_QUALS_EXIST_FLAG,
	 DECODE(qpatrgrp.EQ_FLAG,'N','Y',DECODE(qpatrgrp.descendents_quals_exist,'Y','Y','N')) HEADER_QUALS_EXIST_FLAG,
         -1 qpl_grpng_num,
         qpatrgrp.GROUPING_NO ag_grpng_num,
         qpl.EQ_FLAG QPL_EQFLAG,
	 qpatrgrp.EQ_FLAG ATRGRP_EQFLAG,
         qplines.VALIDATED_FLAG,
         qpl.MODIFIER_LEVEL_CODE,
         qpl.null_other_oprt_count qpl_other_oprt_cnt,
         qpatrgrp.other_oprt_count ag_other_oprt_cnt,
         qpatrgrp.null_other_oprt_count ag_null_othr_oprt_cnt,
	 qpatrgrp.LIST_TYPE_CODE,
         qpatrgrp.ASK_FOR_FLAG,
         qpatrgrp.HEADER_LIMIT_EXISTS,
         qpatrgrp.LINE_LIMIT_EXISTS,
	 NULL CURRENCY_DETAIL_ID,
         NULL CURRENCY_HEADER_ID,
         NULL SELLING_ROUNDING_FACTOR,
         qpatrgrp.CURRENCY_CODE   BASE_CURRENCY_CODE,
         qplines.pricing_effective_date,
         qpl.BREAK_UOM_CODE,
         qpl.BREAK_UOM_CONTEXT,
         qpl.BREAK_UOM_ATTRIBUTE,
         QPLINES.CURRENCY_CODE ORDER_CURRENCY,
	 qpq.qualifier_precedence,
	 'N' descendents_quals_exist,
  	 qpl.PRICE_BREAK_TYPE_CODE
   FROM qp_npreq_lines_tmp qplines,
	QP_QUALIFIERS QPQ,
        qp_npreq_line_patrns_tmp qppattmp1,
	qp_list_lines qpl,
	qp_secu_attr_groups_v qpatrgrp,
	--qp_attribute_groups qpatrgrp,
        qp_pte_source_systems qprs,
        --qp_price_req_sources_v qprs,
	QP_CURRENCY_DETAILS QCDT
   WHERE qppattmp1.line_index = qplines.line_index
   AND   QPQ.QUALIFIER_CONTEXT = G_LIST_HEADER_CONTEXT
   AND   QPQ.QUALIFIER_ATTRIBUTE = G_PRICELIST_ATTRIBUTE
   AND   QPQ.QUALIFIER_ATTR_VALUE = to_char(QPLINES.PRICE_LIST_HEADER_ID)
   AND   QPQ.COMPARISON_OPERATOR_CODE = '='
   AND   QPQ.LIST_TYPE_CODE = 'PRL'             --3917802
   AND   QPQ.LIST_HEADER_ID = QPL.LIST_HEADER_ID
   AND   QPL.PRICING_PHASE_ID = G_PRICE_LIST_PHASE_ID
   AND   (QPLINES.PRICE_FLAG = G_YES
          OR
         (QPLINES.PRICE_FLAG = G_PHASE
          AND
          P_FREEZE_OVERRIDE_FLAG = G_YES))
   AND   QPLINES.LIST_PRICE_OVERRIDE_FLAG IN ('N', 'O') --po integration
   AND   QPLINES.LINE_TYPE_CODE <> G_ORDER_LEVEL
   AND   (QPLINES.PRIMARY_QUALIFIERS_MATCH_FLAG = G_YES
             OR
         QPLINES.QUALIFIERS_EXIST_FLAG = G_NO
	  )
   AND   qppattmp1.pattern_id = qpl.pattern_id
   AND   qppattmp1.hash_key = qpl.hash_key
   AND   qpl.pte_code = G_PTE_CODE
   AND   QPQ.ACTIVE_FLAG = G_YES
   AND   QPLINES.PROCESSED_CODE = G_STS_LHS_NOT_FOUND
   AND qpl.pricing_phase_id = G_PRICE_LIST_PHASE_ID
     AND nvl(qplines.pricing_effective_date,   TRUNC(sysdate))
          BETWEEN nvl(qpl.start_date_active,   nvl(qplines.pricing_effective_date,   TRUNC(sysdate)))
	   AND nvl(qpl.end_date_active,   nvl(qplines.pricing_effective_date,   TRUNC(sysdate)))
     AND qpatrgrp.list_header_id = qpl.list_header_id
     AND qpatrgrp.pricing_phase_id = G_PRICE_LIST_PHASE_ID
     AND qpatrgrp.active_flag = G_YES
     AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = qpatrgrp.orig_org_id) OR -- begin security
         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(qpatrgrp.global_flag,'Y') = 'Y') OR
         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
     AND nvl(qplines.pricing_effective_date,   TRUNC(sysdate))
          BETWEEN nvl(qpatrgrp.START_DATE_ACTIVE_H,   nvl(qplines.pricing_effective_date,   TRUNC(sysdate)))
          AND nvl(qpatrgrp.END_DATE_ACTIVE_H,   nvl(qplines.pricing_effective_date,   TRUNC(sysdate)))
     AND nvl(qplines.pricing_effective_date,   TRUNC(sysdate))
         BETWEEN NVL(TRUNC(qpatrgrp.START_DATE_ACTIVE_Q),nvl(qplines.pricing_effective_date,   TRUNC(sysdate)))
         AND NVL(TRUNC(qpatrgrp.END_DATE_ACTIVE_Q),nvl(qplines.pricing_effective_date,   TRUNC(sysdate)))
     --AND qprs.source_system_code = qpatrgrp.source_system_code
     --AND qprs.request_type_code = qplines.request_type_code -- check it
     AND qprs.APPLICATION_SHORT_NAME = qpatrgrp.source_system_code
     AND qprs.pte_code = G_PTE_CODE
--     AND atrgrps.currency_code = qplines.currency_code
     AND qpatrgrp.CURRENCY_HEADER_ID = QCDT.CURRENCY_HEADER_ID
     AND QPLINES.CURRENCY_CODE = QCDT.TO_CURRENCY_CODE
     AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
                NVL(TRUNC(QCDT.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
                AND NVL(TRUNC(QCDT.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
   AND (
        (qcdt.curr_attribute_context is null
         and not exists
             (select /*+ use_nl(qcdt1) LEADING(qcdt1) index(qcdt1 QP_CURRENCY_DETAILS_N2) */ 'x'
	       from qp_npreq_line_attrs_tmp pa_tmp,   qp_currency_details qcdt1
               where qcdt1.curr_attribute_context IS NOT NULL
		 and qcdt1.curr_attribute_context = pa_tmp.context
                 and qcdt1.curr_attribute = pa_tmp.attribute
                 and qcdt1.curr_attribute_value = pa_tmp.value_from
                 and qcdt1.curr_attribute_type = pa_tmp.ATTRIBUTE_TYPE
                 and qcdt1.to_currency_code = qcdt.to_currency_code
                 and qcdt1.currency_header_id = qcdt.currency_header_id
                 and pa_tmp.pricing_status_code = G_STATUS_UNCHANGED
                 and pa_tmp.line_index = qplines.line_index
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
                     NVL(TRUNC(QCDT1.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
                     AND NVL(TRUNC(QCDT1.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
             )
        )
        OR
        (qcdt.curr_attribute_context is not null
         and qcdt.currency_detail_id =
             (select qcdt3.currency_detail_id
	       from qp_currency_details qcdt3
                 where qcdt3.to_currency_code = qcdt.to_currency_code
                 and qcdt3.currency_header_id = qcdt.currency_header_id
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
                     NVL(TRUNC(QCDT3.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
                     AND NVL(TRUNC(QCDT3.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
                 and  qcdt3.precedence =
             (select /*+ use_nl(qcdt2) LEADING(qcdt2) index(qcdt2 QP_CURRENCY_DETAILS_N2) */ min(qcdt2.precedence)
	       from qp_npreq_line_attrs_tmp pa_tmp1, qp_currency_details qcdt2
               where qcdt2.curr_attribute_context IS NOT NULL
		 and qcdt2.curr_attribute_context = pa_tmp1.context
                 and qcdt2.curr_attribute = pa_tmp1.attribute
                 and qcdt2.curr_attribute_value = pa_tmp1.value_from
                 and qcdt2.curr_attribute_type = pa_tmp1.ATTRIBUTE_TYPE
                 and qcdt2.to_currency_code = qcdt.to_currency_code
                 and qcdt2.currency_header_id = qcdt.currency_header_id
                 and pa_tmp1.pricing_status_code = G_STATUS_UNCHANGED
                 and pa_tmp1.line_index = qplines.line_index
                 AND QPLINES.PRICING_EFFECTIVE_DATE BETWEEN
                     NVL(TRUNC(QCDT2.START_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
                     AND NVL(TRUNC(QCDT2.END_DATE_ACTIVE),QPLINES.PRICING_EFFECTIVE_DATE)
             ))
        )
       )
     AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0);

/****************************/

l_limit NUMBER := 5000;
l_stage varchar2(300);

  TYPE l_number IS TABLE OF NUMBER INDEX BY pls_integer;
  l_list_header_id_tbl l_number;
  l_list_line_id_tbl l_number;
  l_matched_pattrn_id_tbl l_number;
  l_ag_matched_pat_id_tbl l_number;
  l_line_index_tbl l_number;
  l_pricing_phase_id_tbl l_number;
  l_grouping_no l_number;
  l_ag_grpng_no l_number;
  l_other_oprt_count l_number;
  l_ag_othr_oprt_cnt l_number;
  l_null_other_oprt_count l_number;
  l_curr_det_id l_number;
  l_curr_hdr_id l_number;
  L_SELLNG_ROUND_FTR l_number;
  L_qualifier_precedence l_number;

  TYPE l_string IS TABLE OF VARCHAR2(2000) INDEX BY pls_integer;
  l_matched_hash_key_tbl l_string;
  l_ag_mtchd_hash_key_tbl l_string;
  l_stage_tbl l_string;
  l_pricing_status_code_tbl l_string;
  l_ssc l_string;
  l_header_quals_exist_flag l_string;
  l_eq_flag l_string;
  l_ag_eq_flag l_string;
  l_validated_flag l_string;
  l_modf_lvl_code l_string;
  l_list_type_code l_string;
  l_ask_for_flag l_string;
  l_hdr_lmt_exists l_string;
  l_line_lmt_exists l_string;
  l_order_curr l_string;
  l_base_curr_code l_string;
  l_brk_uom_code l_string;
  l_brk_uom_ctxt l_string;
  l_brk_uom_attr l_string;
  l_curr_code l_string;
  l_descnt_quals_exist l_string;
  l_PRICE_BREAK_TYPE_CODE l_string;

  TYPE l_date IS TABLE OF DATE INDEX BY pls_integer;

  l_prcng_effctve_dt l_date;

l_routine VARCHAR2(40) := 'PERFORM_SECONDARY_PATRN_SEARCH';
E_ROUTINE_ERRORS EXCEPTION;
l_list_line_id        NUMBER;

l_loop_count          NUMBER := 0;
l_dummy varchar2(200);


BEGIN

--G_CURRENT_USER_OP_UNIT   := NVL(p_control_rec.PRICING_ORG_ID, FND_PROFILE.VALUE('ORG_ID')); -- security
   x_status_code := fnd_api.g_ret_sts_success;

 qp_debug_util.tstart('PERFORM_SECONDARY_PAT_SEARCH','Performing Secondary Price List Pattern Search', false, true);

Update_Sec_Price_List_Info(x_status_code,x_status_text);

  IF g_debug_engine = fnd_api.g_true THEN
	engine_debug('Entering into pattern PERFORM_SECONDARY_SEARCH');
  END IF;

 -- Update the price list id , validated flag , and primary_qualifiers_match flag for sec search
 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN   --bug 4103259
    engine_debug ('QP_QUALIFY_SECONDARY_PRICE_LISTS:' || G_QUALIFY_SECONDARY);
 END IF;



 IF (x_status_code = FND_API.G_RET_STS_ERROR) THEN
  RAISE E_ROUTINE_ERRORS;
 END IF;


IF G_QUALIFY_SECONDARY = G_YES THEN
	if G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN
	  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
	  engine_debug('cursor l_sec_list_cur_currency-multi-currency TRUE');
	  END IF;

		OPEN L_SEC_LST_HDR_P1_QLFY_Y_CURR;
		qp_debug_util.tstart('L_SEC_LST_HDR_P1_QLFY_Y_CURR',   'L_SEC_LST_HDR_P1_QLFY_Y_CURR');
	ELSE
	 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
	  engine_debug('cursor l_sec_list_cur   multi-currency FALSE');
	  END IF;

		OPEN L_SEC_LST_HDR_P1_QLFY_SEC_Y;
		qp_debug_util.tstart('L_SEC_LST_HDR_P1_QLFY_SEC_Y',   'L_SEC_LST_HDR_P1_QLFY_SEC_Y');

	END IF;

	    LOOP
	      l_list_header_id_tbl.DELETE;
	      l_list_line_id_tbl.DELETE;
	      l_line_index_tbl.DELETE;
	      l_matched_pattrn_id_tbl.DELETE;
              l_ag_matched_pat_id_tbl.DELETE;
	      l_pricing_phase_id_tbl.DELETE;
	      l_matched_hash_key_tbl.DELETE;
	      l_ag_mtchd_hash_key_tbl.DELETE;
	      l_stage_tbl.DELETE;
	      l_pricing_status_code_tbl.DELETE;
	      l_ssc.DELETE;
	      l_header_quals_exist_flag.DELETE;
	      l_grouping_no.DELETE;
	      l_ag_grpng_no.DELETE;
	      l_eq_flag.DELETE;
	      l_ag_eq_flag.DELETE;
	      l_validated_flag.DELETE;
	      l_modf_lvl_code.DELETE;
              l_other_oprt_count.DELETE;
	      l_ag_othr_oprt_cnt.DELETE;
	      l_null_other_oprt_count.DELETE;
              l_list_type_code.DELETE;
	      l_ask_for_flag.DELETE;
	      l_hdr_lmt_exists.DELETE;
	      l_line_lmt_exists.DELETE;
	      l_curr_det_id.DELETE;
	      l_curr_hdr_id.DELETE;
	      L_SELLNG_ROUND_FTR.DELETE;
              l_base_curr_code.DELETE;
	      l_prcng_effctve_dt.DELETE;
              l_brk_uom_code.DELETE;
              l_brk_uom_ctxt.DELETE;
              l_brk_uom_attr.DELETE;
              l_order_curr.DELETE;
	      L_qualifier_precedence.DELETE;
	      l_curr_det_id.DELETE;
	      l_curr_hdr_id.DELETE;
	      L_SELLNG_ROUND_FTR.DELETE;
              l_base_curr_code.DELETE;
              l_descnt_quals_exist.DELETE;
              l_PRICE_BREAK_TYPE_CODE.DELETE;

		if G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN

				FETCH L_SEC_LST_HDR_P1_QLFY_Y_CURR BULK COLLECT
				INTO l_list_header_id_tbl,
				l_list_line_id_tbl,
				l_line_index_tbl,
				l_matched_pattrn_id_tbl,
				l_pricing_phase_id_tbl,
				l_matched_hash_key_tbl,
				l_stage_tbl,
				l_pricing_status_code_tbl,
				l_ssc,
				l_header_quals_exist_flag,
				l_grouping_no,
				l_eq_flag,
				l_validated_flag,l_modf_lvl_code,l_other_oprt_count,l_null_other_oprt_count,
				l_list_type_code,
				l_ask_for_flag,
				l_hdr_lmt_exists,
				l_line_lmt_exists,
				l_curr_det_id,
				l_curr_hdr_id,
				L_SELLNG_ROUND_FTR,
				l_curr_code,
				l_prcng_effctve_dt,
				L_qualifier_precedence,
                                l_descnt_quals_exist
				limit l_limit;

		ELSE
				FETCH L_SEC_LST_HDR_P1_QLFY_SEC_Y BULK COLLECT
				INTO l_list_header_id_tbl,
				l_list_line_id_tbl,
				l_line_index_tbl,
				l_matched_pattrn_id_tbl,
				l_pricing_phase_id_tbl,
				l_matched_hash_key_tbl,
				l_stage_tbl,
				l_pricing_status_code_tbl,
				l_ssc,
				l_header_quals_exist_flag,
				l_grouping_no,
				l_eq_flag,
				l_validated_flag,l_modf_lvl_code,l_other_oprt_count,l_null_other_oprt_count,
				l_list_type_code,
				l_ask_for_flag,
				l_hdr_lmt_exists,
				l_line_lmt_exists,
				l_curr_det_id,
				l_curr_hdr_id,
				L_SELLNG_ROUND_FTR,
				l_curr_code,
				l_prcng_effctve_dt,
				L_qualifier_precedence,
                                l_descnt_quals_exist
				limit l_limit;

		END IF;

	      EXIT WHEN l_list_header_id_tbl.COUNT = 0;

	    forall i IN 1 .. l_list_header_id_tbl.COUNT
	    INSERT INTO qp_preq_patrn_qual_tmp(list_header_id,
					list_line_id,
					line_index,
					matched_pattrn_id,
					pricing_phase_id,
					matched_hash_key,
					stage,
					pricing_status_code,
					source_system_code,
					header_quals_exist_flag,
					grouping_no,
					eq_flag,
					validated_flag,
					MODIFIER_LEVEL_CODE,
					other_oprt_count,
					null_other_oprt_count,
   					LIST_TYPE_CODE,
					ASK_FOR_FLAG,
					HEADER_LIMIT_EXISTS,
					LINE_LIMIT_EXISTS,
					CURRENCY_DETAIL_ID,
					CURRENCY_HEADER_ID,
					SELLING_ROUNDING_FACTOR,
					BASE_CURRENCY_CODE,
					PRICING_EFFECTIVE_DATE,
					qualifier_precedence,
					descendents_quals_exist
					)
			    VALUES(l_list_header_id_tbl(i),
					l_list_line_id_tbl(i),
					l_line_index_tbl(i),
					l_matched_pattrn_id_tbl(i),
					l_pricing_phase_id_tbl(i),
					l_matched_hash_key_tbl(i),
					l_stage_tbl(i),
					l_pricing_status_code_tbl(i),
					l_ssc(i),
					l_header_quals_exist_flag(i),
					l_grouping_no(i),
					l_eq_flag(i),
					l_validated_flag(i),
					l_modf_lvl_code(i),
					l_other_oprt_count(i),
					l_null_other_oprt_count(i),
					l_list_type_code(i),
					l_ask_for_flag(i),
					l_hdr_lmt_exists(i),
					l_line_lmt_exists(i),
					l_curr_det_id(i),
					l_curr_hdr_id(i),
					L_SELLNG_ROUND_FTR(i),
					l_curr_code(i),
					l_prcng_effctve_dt(i),
					L_qualifier_precedence(i),
					l_descnt_quals_exist(i)
					);

		l_loop_count:=l_loop_count+1;
	    --exit when l_header_cache_cur%rowcount < l_limit;
	  END LOOP;
	   if G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN  /*vivek*/
		IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
			engine_debug('cursor close l_list_cur_currency-multi-currency TRUE');
		END IF;

			CLOSE L_SEC_LST_HDR_P1_QLFY_Y_CURR;
			qp_debug_util.tstop('L_SEC_LST_HDR_P1_QLFY_Y_CURR');
	else
			CLOSE L_SEC_LST_HDR_P1_QLFY_SEC_Y;
			qp_debug_util.tstop('L_SEC_LST_HDR_P1_QLFY_SEC_Y');
	end if;

ELSE ----profile no
	if G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN  /*vivek*/
	  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
	  engine_debug('cursor l_sec_list_cur_currency-multi-currency TRUE');
	  END IF;
		IF p_search_path = 1 THEN
	  		OPEN L_SEC_LST_HDR_P1_QLFY_N_CURR;
			qp_debug_util.tstart('L_SEC_LST_HDR_P1_QLFY_N_CURR',   'L_SEC_LST_HDR_P1_QLFY_N_CURR');
		ELSE
			OPEN L_SEC_SRCH_BOTH_P2_QLFY_N_CURR;
			qp_debug_util.tstart('L_SEC_SRCH_BOTH_P2_QLFY_N_CURR',   'L_SEC_SRCH_BOTH_P2_QLFY_N_CURR');
		END IF;
	ELSE
	 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
	  engine_debug('cursor l_sec_list_cur   multi-currency FALSE');
	  END IF;
		IF p_search_path = 1 THEN
			OPEN L_SEC_LST_HDR_P1_QLFY_SEC_N;
			qp_debug_util.tstart('L_SEC_LST_HDR_P1_QLFY_SEC_N',   'L_SEC_LST_HDR_P1_QLFY_SEC_N');
		ELSE
			OPEN L_SEC_SRCH_BOTH_P2_QLFY_N;
			qp_debug_util.tstart('L_SEC_SRCH_BOTH_P2_QLFY_N',   'L_SEC_SRCH_BOTH_P2_QLFY_N');
		END IF;
	END IF;

	    LOOP
	      l_list_header_id_tbl.DELETE;
	      l_list_line_id_tbl.DELETE;
	      l_line_index_tbl.DELETE;
	      l_matched_pattrn_id_tbl.DELETE;
              l_ag_matched_pat_id_tbl.DELETE;
	      l_pricing_phase_id_tbl.DELETE;
	      l_matched_hash_key_tbl.DELETE;
	      l_ag_mtchd_hash_key_tbl.DELETE;
	      l_stage_tbl.DELETE;
	      l_pricing_status_code_tbl.DELETE;
	      l_ssc.DELETE;
	      l_header_quals_exist_flag.DELETE;
	      l_grouping_no.DELETE;
	      l_ag_grpng_no.DELETE;
	      l_eq_flag.DELETE;
	      l_ag_eq_flag.DELETE;
	      l_validated_flag.DELETE;
	      l_modf_lvl_code.DELETE;
              l_other_oprt_count.DELETE;
	      l_ag_othr_oprt_cnt.DELETE;
	      l_null_other_oprt_count.DELETE;
              l_list_type_code.DELETE;
	      l_ask_for_flag.DELETE;
	      l_hdr_lmt_exists.DELETE;
	      l_line_lmt_exists.DELETE;
	      l_curr_det_id.DELETE;
	      l_curr_hdr_id.DELETE;
	      L_SELLNG_ROUND_FTR.DELETE;
              l_base_curr_code.DELETE;
	      l_prcng_effctve_dt.DELETE;
              l_brk_uom_code.DELETE;
              l_brk_uom_ctxt.DELETE;
              l_brk_uom_attr.DELETE;
              l_order_curr.DELETE;
	      L_qualifier_precedence.DELETE;
              l_descnt_quals_exist.DELETE;
              l_PRICE_BREAK_TYPE_CODE.DELETE;

		if G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN
			IF p_search_path = 1 THEN
				FETCH L_SEC_LST_HDR_P1_QLFY_N_CURR BULK COLLECT
				INTO l_list_header_id_tbl,
				l_list_line_id_tbl,
				l_line_index_tbl,
				l_matched_pattrn_id_tbl,
				l_pricing_phase_id_tbl,
				l_matched_hash_key_tbl,
				l_stage_tbl,
				l_pricing_status_code_tbl,
				l_ssc,
				l_header_quals_exist_flag,
				l_grouping_no,
				l_eq_flag,
				l_validated_flag,l_modf_lvl_code,l_other_oprt_count,l_null_other_oprt_count,
				l_list_type_code,
				l_ask_for_flag,
				l_hdr_lmt_exists,
				l_line_lmt_exists,
				l_curr_det_id,
				l_curr_hdr_id,
				L_SELLNG_ROUND_FTR,
				l_curr_code,
				l_prcng_effctve_dt,
				L_qualifier_precedence,
				l_descnt_quals_exist
				limit l_limit;
			ELSE
				FETCH L_SEC_SRCH_BOTH_P2_QLFY_N_CURR BULK COLLECT
				INTO l_list_header_id_tbl,
				      l_list_line_id_tbl,
				      l_line_index_tbl,
				      l_matched_pattrn_id_tbl,
				      l_ag_matched_pat_id_tbl,
				      l_pricing_phase_id_tbl,
				      l_matched_hash_key_tbl,
				      l_ag_mtchd_hash_key_tbl,
				      l_stage_tbl,
				      l_pricing_status_code_tbl,
				      l_ssc,
				      l_header_quals_exist_flag,
				      l_grouping_no,
				      l_ag_grpng_no,
				      l_eq_flag,
				      l_ag_eq_flag,
				      l_validated_flag,
				      l_modf_lvl_code,
				      l_other_oprt_count,
				      l_ag_othr_oprt_cnt,
				      l_null_other_oprt_count,
				      l_list_type_code,
				      l_ask_for_flag,
				      l_hdr_lmt_exists,
				      l_line_lmt_exists,
				      l_curr_det_id,
				      l_curr_hdr_id,
				      L_SELLNG_ROUND_FTR,
				      l_base_curr_code,
				      l_prcng_effctve_dt,
				      l_brk_uom_code,
				      l_brk_uom_ctxt,
				      l_brk_uom_attr,
				      l_order_curr,
				      L_qualifier_precedence,
  				      l_descnt_quals_exist,
				      l_PRICE_BREAK_TYPE_CODE
				limit l_limit;
			END IF;
		ELSE
			IF p_search_path = 1 THEN
				FETCH L_SEC_LST_HDR_P1_QLFY_SEC_N BULK COLLECT
				INTO l_list_header_id_tbl,
				l_list_line_id_tbl,
				l_line_index_tbl,
				l_matched_pattrn_id_tbl,
				l_pricing_phase_id_tbl,
				l_matched_hash_key_tbl,
				l_stage_tbl,
				l_pricing_status_code_tbl,
				l_ssc,
				l_header_quals_exist_flag,
				l_grouping_no,
				l_eq_flag,
				l_validated_flag,l_modf_lvl_code,l_other_oprt_count,l_null_other_oprt_count,
				l_list_type_code,
				l_ask_for_flag,
				l_hdr_lmt_exists,
				l_line_lmt_exists,
				l_curr_det_id,
				l_curr_hdr_id,
				L_SELLNG_ROUND_FTR,
				l_curr_code,
				l_prcng_effctve_dt,
				L_qualifier_precedence,
				l_descnt_quals_exist
				limit l_limit;
			ELSE
				FETCH L_SEC_SRCH_BOTH_P2_QLFY_N BULK COLLECT
				INTO  l_list_header_id_tbl,
				      l_list_line_id_tbl,
				      l_line_index_tbl,
				      l_matched_pattrn_id_tbl,
				      l_ag_matched_pat_id_tbl,
				      l_pricing_phase_id_tbl,
				      l_matched_hash_key_tbl,
				      l_ag_mtchd_hash_key_tbl,
				      l_stage_tbl,
				      l_pricing_status_code_tbl,
				      l_ssc,
				      l_header_quals_exist_flag,
				      l_grouping_no,
				      l_ag_grpng_no,
				      l_eq_flag,
				      l_ag_eq_flag,
				      l_validated_flag,
				      l_modf_lvl_code,
				      l_other_oprt_count,
				      l_ag_othr_oprt_cnt,
				      l_null_other_oprt_count,
				      l_list_type_code,
				      l_ask_for_flag,
				      l_hdr_lmt_exists,
				      l_line_lmt_exists,
				      l_curr_det_id,
				      l_curr_hdr_id,
				      L_SELLNG_ROUND_FTR,
				      l_base_curr_code,
				      l_prcng_effctve_dt,
				      l_brk_uom_code,
				      l_brk_uom_ctxt,
				      l_brk_uom_attr,
				      l_order_curr,
				      L_qualifier_precedence,
  				      l_descnt_quals_exist,
				      l_PRICE_BREAK_TYPE_CODE
				limit l_limit;
			END IF;
		END IF;
	      EXIT WHEN l_list_header_id_tbl.COUNT = 0;
	IF p_search_path = 1 THEN
	    forall i IN 1 .. l_list_header_id_tbl.COUNT
	    INSERT INTO qp_preq_patrn_qual_tmp(list_header_id,
					list_line_id,
					line_index,
					matched_pattrn_id,
					pricing_phase_id,
					matched_hash_key,
					stage,
					pricing_status_code,
					source_system_code,
					header_quals_exist_flag,
					grouping_no,
					eq_flag,
					validated_flag,
					MODIFIER_LEVEL_CODE,
					other_oprt_count,
					null_other_oprt_count,
   					LIST_TYPE_CODE,
					ASK_FOR_FLAG,
					HEADER_LIMIT_EXISTS,
					LINE_LIMIT_EXISTS,
					CURRENCY_DETAIL_ID,
					CURRENCY_HEADER_ID,
					SELLING_ROUNDING_FACTOR,
					BASE_CURRENCY_CODE,
					PRICING_EFFECTIVE_DATE,
					qualifier_precedence,
					descendents_quals_exist
					)
			    VALUES(l_list_header_id_tbl(i),
					l_list_line_id_tbl(i),
					l_line_index_tbl(i),
					l_matched_pattrn_id_tbl(i),
					l_pricing_phase_id_tbl(i),
					l_matched_hash_key_tbl(i),
					l_stage_tbl(i),
					l_pricing_status_code_tbl(i),
					l_ssc(i),
					l_header_quals_exist_flag(i),
					l_grouping_no(i),
					l_eq_flag(i),
					l_validated_flag(i),
					l_modf_lvl_code(i),
					l_other_oprt_count(i),
					l_null_other_oprt_count(i),
					l_list_type_code(i),
					l_ask_for_flag(i),
					l_hdr_lmt_exists(i),
					l_line_lmt_exists(i),
					l_curr_det_id(i),
					l_curr_hdr_id(i),
					L_SELLNG_ROUND_FTR(i),
					l_curr_code(i),
					l_prcng_effctve_dt(i),
					L_qualifier_precedence(i),
					l_descnt_quals_exist(i)
					);
		ELSE

		     forall i IN 1 .. l_list_header_id_tbl.COUNT
			 INSERT
			    INTO qp_preq_patrn_qual_tmp(list_header_id,
							list_line_id,
							line_index,
							matched_pattrn_id,
							pricing_phase_id,
							matched_hash_key,
							stage,
							pricing_status_code,
							source_system_code,
							header_quals_exist_flag,
							grouping_no,
							eq_flag,
							validated_flag,
							MODIFIER_LEVEL_CODE,
							other_oprt_count,
							null_other_oprt_count,
							LIST_TYPE_CODE,
							ASK_FOR_FLAG,
							HEADER_LIMIT_EXISTS,
							LINE_LIMIT_EXISTS,
							BREAK_UOM_CODE,
							BREAK_UOM_CONTEXT,
							BREAK_UOM_ATTRIBUTE,
							ORDER_CURRENCY,
							CURRENCY_DETAIL_ID,
							CURRENCY_HEADER_ID,
							SELLING_ROUNDING_FACTOR,
							BASE_CURRENCY_CODE,
							pricing_effective_date,
							qualifier_precedence,
							PRICE_BREAK_TYPE_CODE
							)
					    SELECT DISTINCT l_list_header_id_tbl(i),
							l_list_line_id_tbl(i),
							l_line_index_tbl(i),
							l_matched_pattrn_id_tbl(i),
							l_pricing_phase_id_tbl(i),
							l_matched_hash_key_tbl(i),
							l_stage_tbl(i),
							l_pricing_status_code_tbl(i),
							l_ssc(i),
							l_header_quals_exist_flag(i),
							l_grouping_no(i),
							l_eq_flag(i),
							l_validated_flag(i),
							l_modf_lvl_code(i),
							l_other_oprt_count(i),
							l_other_oprt_count(i),
							l_list_type_code(i),
							l_ask_for_flag(i),
							l_hdr_lmt_exists(i),
							l_line_lmt_exists(i),
							l_brk_uom_code(i),
							l_brk_uom_ctxt(i),
							l_brk_uom_attr(i),
							l_order_curr(i),
							l_curr_det_id(i),
							l_curr_hdr_id(i),
							L_SELLNG_ROUND_FTR(i),
							l_base_curr_code(i),
							l_prcng_effctve_dt(i),
							L_qualifier_precedence(i),
							l_PRICE_BREAK_TYPE_CODE(i)
						FROM dual;


			     forall i IN 1 .. l_list_header_id_tbl.COUNT
			     INSERT INTO qp_preq_patrn_qual_tmp(list_header_id,
							list_line_id,
							line_index,
							pricing_phase_id,
							stage,
							pricing_status_code,
							source_system_code,
							header_quals_exist_flag,
							grouping_no,
							eq_flag,
							validated_flag,
							MODIFIER_LEVEL_CODE,
							other_oprt_count,
							null_other_oprt_count,
							descendents_quals_exist
							)
					    SELECT DISTINCT l_list_header_id_tbl(i),
							-1, -- List line id,
							l_line_index_tbl(i),
							l_pricing_phase_id_tbl(i),
							l_stage_tbl(i),
							l_pricing_status_code_tbl(i),
							l_ssc(i),
							l_header_quals_exist_flag(i), -- Header Quals Exist,
							l_ag_grpng_no(i),
							l_ag_eq_flag(i),
							l_validated_flag(i),
							l_modf_lvl_code(i),
							l_ag_othr_oprt_cnt(i),
							l_null_other_oprt_count(i),
							l_descnt_quals_exist(i)
						FROM dual
						WHERE l_ag_eq_flag(i) = 'N'
						OR l_descnt_quals_exist(i) = 'Y';

		END IF;
		l_loop_count:=l_loop_count+1;
	    --exit when l_header_cache_cur%rowcount < l_limit;
	  END LOOP;
	    if G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN  /*vivek*/
			IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
				engine_debug('cursor close l_list_cur_currency-multi-currency TRUE');
			END IF;
			IF p_search_path = 1 THEN
				CLOSE L_SEC_LST_HDR_P1_QLFY_N_CURR;
				qp_debug_util.tstop('L_SEC_LST_HDR_P1_QLFY_N_CURR');
			ELSE
				CLOSE L_SEC_SRCH_BOTH_P2_QLFY_N_CURR;
				qp_debug_util.tstop('L_SEC_SRCH_BOTH_P2_QLFY_N_CURR');
			END IF;
		else
			IF p_search_path = 1 THEN
				CLOSE L_SEC_LST_HDR_P1_QLFY_SEC_N;
				qp_debug_util.tstop('L_SEC_LST_HDR_P1_QLFY_SEC_N');
			ELSE
				CLOSE L_SEC_SRCH_BOTH_P2_QLFY_N;
				qp_debug_util.tstop('L_SEC_SRCH_BOTH_P2_QLFY_N');
			END IF;
		end if;
END IF;
	IF G_QUALIFY_SECONDARY = G_YES THEN
		l_stage :=G_STAGE_CACHE_SEC_PL_HDR_SRCH;
	ELSE
		  IF p_search_path=1 THEN
			l_stage :=G_STAGE_CACHE_SEC_PL_HDR_SRCH;
		  ELSE
			/*l_stage :=G_STAGE_CACHE_SEC_PL_LIN_SRCH;*/
			l_stage := G_STAGE_CACHE_SEC_PL_LIN_SRCH2;
		  END IF;
	END IF;

   qp_debug_util.tstart('Populate_Temp_Tables_NEQ_BTW_SEC_LIST_CUR',   'Populate_Temp_Tables_NEQ_BTW_SEC_LIST_CUR');
   Populate_Temp_Tables_NEQ_BTW(
			    G_PRICE_LIST_PHASE_ID ,
			    l_stage ,
			    x_status_code ,
			    x_status_text );
    IF x_status_code <> FND_API.G_RET_STS_SUCCESS THEN
	RAISE E_ROUTINE_ERRORS;
    END IF;

    qp_debug_util.tstop('Populate_Temp_Tables_NEQ_BTW_SEC_LIST_CUR');
    qp_debug_util.tstart('QP_EVALUATE_OTHER_OPERATORS_SEC_LIST_CUR',   'QP_EVALUATE_OTHER_OPERATORS_SEC_LIST_CUR');

	QP_EVALUATE_OTHER_OPERATORS(
			 G_PRICE_LIST_PHASE_ID ,
			  l_stage,
			    x_status_code ,
			    x_status_text );

	IF x_status_code <> FND_API.G_RET_STS_SUCCESS THEN
		RAISE E_ROUTINE_ERRORS;
        END IF;

	qp_debug_util.tstop('QP_EVALUATE_OTHER_OPERATORS_SEC_LIST_CUR');

       qp_debug_util.tstart('SEC_SRCH_PATRN_LIST_CUR_DEL_HDR_TCA',   'Header deletion for TCA');

	UPDATE qp_preq_patrn_qual_tmp a
	SET pricing_status_code = G_DELETED_TCA
	WHERE pricing_status_code = g_status_unchanged
	 AND a.descendents_quals_exist = 'Y'
         and a.pricing_phase_id = G_PRICE_LIST_PHASE_ID
         and a.stage = l_stage
	 AND EXISTS (
	    SELECT 1
	    FROM qp_qualifiers b, qp_npreq_line_attrs_tmp c
	    WHERE b.list_header_id = a.list_header_id
	      AND b.list_line_id = a.list_line_id
	      AND (b.qualifier_grouping_no = a.grouping_no
                   or
                   b.qualifier_grouping_no = -1
                  )
	      AND b.qualify_hier_descendents_flag = 'N'
	      AND c.segment_id = b.segment_id
	      AND c.line_index = a.line_index
	      AND c.derived_qualifier_flag = 'Y');

        qp_debug_util.tstop('SEC_SRCH_PATRN_LIST_CUR_DEL_HDR_TCA');

     IF l_stage = G_STAGE_CACHE_SEC_PL_LIN_SRCH2 THEN
        -- Deleting line if headers is not qualified in not=/Between evaluation
       -- header_quals_exist_flag will be Y only if Not=/Bet header level
       -- qualifiers are present for that line.
       qp_debug_util.tstart('SEC_SRCH_PATRN_LIST_CUR_DEL_HDR',   'Line deletion');

       UPDATE qp_preq_patrn_qual_tmp a
       SET pricing_status_code = G_DELETED_LINE
        WHERE pricing_phase_id = G_PRICE_LIST_PHASE_ID
         AND pricing_status_code = g_status_unchanged
         AND list_line_id <> -1
         AND nvl(header_quals_exist_flag,   'N') = 'Y'
	 AND a.stage = l_stage
         AND NOT EXISTS
         (SELECT /*+ index(b QP_PREQ_PATRN_QUAL_T_N2) */ 'x'
        FROM qp_preq_patrn_qual_tmp b
        WHERE b.list_header_id = a.list_header_id
	AND b.line_index = a.line_index
        AND b.list_line_id = -1
        AND b.pricing_phase_id = a.pricing_phase_id
        AND pricing_status_code = g_status_unchanged
	AND b.stage = l_stage );


        qp_debug_util.tstop('SEC_SRCH_PATRN_LIST_CUR_DEL_HDR');

    END IF;

/************/
IF (p_search_path = 1) OR (p_search_path = 2 AND G_QUALIFY_SECONDARY = G_YES) THEN
IF G_QUALIFY_SECONDARY = G_YES THEN
	if G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN
	  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
	  engine_debug('cursor l_sec_list_cur_currency-multi-currency TRUE');
	  END IF;

	  	OPEN L_SEC_LST_LIN_P1_QLFY_Y_CURR;
		qp_debug_util.tstart('L_SEC_LST_LIN_P1_QLFY_Y_CURR',   'L_SEC_LST_LIN_P1_QLFY_Y_CURR');

	ELSE
	 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
	  engine_debug('cursor l_sec_list_cur   multi-currency FALSE');
	  END IF;

		OPEN L_SEC_LST_LIN_P1_QLFY_SEC_Y;
		qp_debug_util.tstart('L_SEC_LST_LIN_P1_QLFY_SEC_Y',   'L_SEC_LST_LIN_P1_QLFY_SEC_Y');
	END IF;

	    LOOP
	      l_list_header_id_tbl.DELETE;
	      l_list_line_id_tbl.DELETE;
	      l_line_index_tbl.DELETE;
	      l_matched_pattrn_id_tbl.DELETE;
	      l_pricing_phase_id_tbl.DELETE;
	      l_stage_tbl.DELETE;
	      l_matched_hash_key_tbl.DELETE;
	      l_pricing_status_code_tbl.DELETE;
	      l_ssc.DELETE;
	      l_header_quals_exist_flag.DELETE;
	      l_grouping_no.DELETE;
	      l_eq_flag.DELETE;
	      l_validated_flag.DELETE;
	      l_modf_lvl_code.DELETE;
	      l_other_oprt_count.DELETE;
	      l_null_other_oprt_count.DELETE;
	      l_list_type_code.DELETE;
	      l_ask_for_flag.DELETE;
	      l_hdr_lmt_exists.DELETE;
	      l_line_lmt_exists.DELETE;
	      l_curr_code.DELETE;
		l_brk_uom_code.DELETE;
		l_brk_uom_ctxt.DELETE;
		l_brk_uom_attr.DELETE;
		l_prcng_effctve_dt.DELETE;
		l_curr_det_id.DELETE;
	      l_curr_hdr_id.DELETE;
	      L_SELLNG_ROUND_FTR.DELETE;
              l_base_curr_code.DELETE;
	      L_qualifier_precedence.DELETE;
              l_descnt_quals_exist.DELETE;
              l_PRICE_BREAK_TYPE_CODE.DELETE;

		if G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN

				FETCH L_SEC_LST_LIN_P1_QLFY_Y_CURR BULK COLLECT
				INTO l_list_header_id_tbl,
				l_list_line_id_tbl,
				l_line_index_tbl,
				l_matched_pattrn_id_tbl,
				l_pricing_phase_id_tbl,
				l_matched_hash_key_tbl,
				l_stage_tbl,
				l_pricing_status_code_tbl,
				l_ssc,
				l_header_quals_exist_flag,
				l_grouping_no,
				l_eq_flag,
				l_validated_flag,l_modf_lvl_code,l_other_oprt_count,l_null_other_oprt_count,
				l_list_type_code,
				l_ask_for_flag,
				l_hdr_lmt_exists,
				l_line_lmt_exists,
				l_brk_uom_code,
				l_brk_uom_ctxt,
				l_brk_uom_attr,
				l_curr_code,
				l_prcng_effctve_dt,
				l_curr_det_id,
				l_curr_hdr_id,
				L_SELLNG_ROUND_FTR,
				l_base_curr_code,
				L_qualifier_precedence,
  		                l_descnt_quals_exist,
                                l_PRICE_BREAK_TYPE_CODE
				limit l_limit;

		ELSE
				FETCH L_SEC_LST_LIN_P1_QLFY_SEC_Y BULK COLLECT
				INTO l_list_header_id_tbl,
				l_list_line_id_tbl,
				l_line_index_tbl,
				l_matched_pattrn_id_tbl,
				l_pricing_phase_id_tbl,
				l_matched_hash_key_tbl,
				l_stage_tbl,
				l_pricing_status_code_tbl,
				l_ssc,
				l_header_quals_exist_flag,
				l_grouping_no,
				l_eq_flag,
				l_validated_flag,l_modf_lvl_code,l_other_oprt_count,l_null_other_oprt_count,
				l_list_type_code,
				l_ask_for_flag,
				l_hdr_lmt_exists,
				l_line_lmt_exists,
				l_brk_uom_code,
				l_brk_uom_ctxt,
				l_brk_uom_attr,
				l_curr_code,
				l_prcng_effctve_dt,
				L_qualifier_precedence,
  		                l_descnt_quals_exist,
                                l_PRICE_BREAK_TYPE_CODE
				limit l_limit;
		END IF;

	      EXIT WHEN l_list_header_id_tbl.COUNT = 0;



if G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN
	    forall i IN 1 .. l_list_header_id_tbl.COUNT
	    INSERT INTO qp_preq_patrn_qual_tmp(list_header_id,
					list_line_id,
					line_index,
					matched_pattrn_id,
					pricing_phase_id,
					matched_hash_key,
					stage,
					pricing_status_code,
					source_system_code,
					header_quals_exist_flag,
					grouping_no,
					eq_flag,
					validated_flag,
					MODIFIER_LEVEL_CODE,
					other_oprt_count,
					null_other_oprt_count,
   					LIST_TYPE_CODE,
					ASK_FOR_FLAG,
					HEADER_LIMIT_EXISTS,
					LINE_LIMIT_EXISTS,
					BREAK_UOM_CODE,
					BREAK_UOM_CONTEXT,
					BREAK_UOM_ATTRIBUTE,
					ORDER_CURRENCY,
					PRICING_EFFECTIVE_DATE,
					CURRENCY_DETAIL_ID,
					CURRENCY_HEADER_ID,
					SELLING_ROUNDING_FACTOR,
					BASE_CURRENCY_CODE,
					qualifier_precedence,
					descendents_quals_exist,
                                        PRICE_BREAK_TYPE_CODE
					)
			    VALUES(l_list_header_id_tbl(i),
					l_list_line_id_tbl(i),
					l_line_index_tbl(i),
					l_matched_pattrn_id_tbl(i),
					l_pricing_phase_id_tbl(i),
					l_matched_hash_key_tbl(i),
					l_stage_tbl(i),
					l_pricing_status_code_tbl(i),
					l_ssc(i),
					l_header_quals_exist_flag(i),
					l_grouping_no(i),
					l_eq_flag(i),
					l_validated_flag(i),
					l_modf_lvl_code(i),
					l_other_oprt_count(i),
					l_null_other_oprt_count(i),
					l_list_type_code(i),
					l_ask_for_flag(i),
					l_hdr_lmt_exists(i),
					l_line_lmt_exists(i),
					l_brk_uom_code(i),
					l_brk_uom_ctxt(i),
					l_brk_uom_attr(i),
					l_curr_code(i),
					l_prcng_effctve_dt(i),
					l_curr_det_id(i),
					l_curr_hdr_id(i),
					L_SELLNG_ROUND_FTR(i),
					l_base_curr_code(i),
					L_qualifier_precedence(i),
	 		                l_descnt_quals_exist(i),
		                        l_PRICE_BREAK_TYPE_CODE(i)
					);

ELSE
	    forall i IN 1 .. l_list_header_id_tbl.COUNT
	    INSERT INTO qp_preq_patrn_qual_tmp(list_header_id,
					list_line_id,
					line_index,
					matched_pattrn_id,
					pricing_phase_id,
					matched_hash_key,
					stage,
					pricing_status_code,
					source_system_code,
					header_quals_exist_flag,
					grouping_no,
					eq_flag,
					validated_flag,
					MODIFIER_LEVEL_CODE,
					other_oprt_count,
					null_other_oprt_count,
   					LIST_TYPE_CODE,
					ASK_FOR_FLAG,
					HEADER_LIMIT_EXISTS,
					LINE_LIMIT_EXISTS,
					BREAK_UOM_CODE,
					BREAK_UOM_CONTEXT,
					BREAK_UOM_ATTRIBUTE,
					ORDER_CURRENCY,
					PRICING_EFFECTIVE_DATE,
					qualifier_precedence,
					descendents_quals_exist,
                                        PRICE_BREAK_TYPE_CODE
					)
			    VALUES(l_list_header_id_tbl(i),
					l_list_line_id_tbl(i),
					l_line_index_tbl(i),
					l_matched_pattrn_id_tbl(i),
					l_pricing_phase_id_tbl(i),
					l_matched_hash_key_tbl(i),
					l_stage_tbl(i),
					l_pricing_status_code_tbl(i),
					l_ssc(i),
					l_header_quals_exist_flag(i),
					l_grouping_no(i),
					l_eq_flag(i),
					l_validated_flag(i),
					l_modf_lvl_code(i),
					l_other_oprt_count(i),
					l_null_other_oprt_count(i),
					l_list_type_code(i),
					l_ask_for_flag(i),
					l_hdr_lmt_exists(i),
					l_line_lmt_exists(i),
					l_brk_uom_code(i),
					l_brk_uom_ctxt(i),
					l_brk_uom_attr(i),
					l_curr_code(i),
					l_prcng_effctve_dt(i),
					L_qualifier_precedence(i),
	 		                l_descnt_quals_exist(i),
		                        l_PRICE_BREAK_TYPE_CODE(i)
					);

END IF;


		l_loop_count:=l_loop_count+1;
	    --exit when l_header_cache_cur%rowcount < l_limit;
	  END LOOP;
	   if G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN  /*vivek*/
		IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
			engine_debug('cursor close l_list_cur_currency-multi-currency TRUE');
		END IF;

			CLOSE L_SEC_LST_LIN_P1_QLFY_Y_CURR;
			qp_debug_util.tstop('L_SEC_LST_LIN_P1_QLFY_Y_CURR');
	else
			CLOSE L_SEC_LST_LIN_P1_QLFY_SEC_Y;
			qp_debug_util.tstop('L_SEC_LST_LIN_P1_QLFY_SEC_Y');
	end if;

ELSE ----profile no
	if G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN  /*vivek*/
	  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
	  engine_debug('cursor l_sec_list_cur_currency-multi-currency TRUE');
	  END IF;

			OPEN L_SEC_LST_LIN_P1_QLFY_N_CURR;
			qp_debug_util.tstart('L_SEC_LST_LIN_P1_QLFY_N_CURR',   'L_SEC_LST_LIN_P1_QLFY_N_CURR');
	ELSE
	 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
	  engine_debug('cursor l_sec_list_cur   multi-currency FALSE');
	  END IF;

			OPEN L_SEC_LST_LIN_P1_QLFY_SEC_N;
			qp_debug_util.tstart('L_SEC_LST_LIN_P1_QLFY_SEC_N',   'L_SEC_LST_LIN_P1_QLFY_SEC_N');
	END IF;

	    LOOP
	      l_list_header_id_tbl.DELETE;
	      l_list_line_id_tbl.DELETE;
	      l_line_index_tbl.DELETE;
	      l_matched_pattrn_id_tbl.DELETE;
	      l_pricing_phase_id_tbl.DELETE;
	      l_stage_tbl.DELETE;
	      l_matched_hash_key_tbl.DELETE;
	      l_pricing_status_code_tbl.DELETE;
	      l_ssc.DELETE;
	      l_header_quals_exist_flag.DELETE;
	      l_grouping_no.DELETE;
	      l_eq_flag.DELETE;
	      l_validated_flag.DELETE;
	      l_modf_lvl_code.DELETE;
	      l_other_oprt_count.DELETE;
	      l_null_other_oprt_count.DELETE;
	      l_list_type_code.DELETE;
	      l_ask_for_flag.DELETE;
	      l_hdr_lmt_exists.DELETE;
	      l_line_lmt_exists.DELETE;
	      l_curr_code.DELETE;
		l_brk_uom_code.DELETE;
		l_brk_uom_ctxt.DELETE;
		l_brk_uom_attr.DELETE;
		l_prcng_effctve_dt.DELETE;
		l_curr_det_id.DELETE;
	      l_curr_hdr_id.DELETE;
	      L_SELLNG_ROUND_FTR.DELETE;
              l_base_curr_code.DELETE;
	      L_qualifier_precedence.DELETE;
              l_descnt_quals_exist.DELETE;
              l_PRICE_BREAK_TYPE_CODE.DELETE;

		if G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN

				FETCH L_SEC_LST_LIN_P1_QLFY_N_CURR BULK COLLECT
				INTO l_list_header_id_tbl,
				l_list_line_id_tbl,
				l_line_index_tbl,
				l_matched_pattrn_id_tbl,
				l_pricing_phase_id_tbl,
				l_matched_hash_key_tbl,
				l_stage_tbl,
				l_pricing_status_code_tbl,
				l_ssc,
				l_header_quals_exist_flag,
				l_grouping_no,
				l_eq_flag,
				l_validated_flag,l_modf_lvl_code,l_other_oprt_count,l_null_other_oprt_count,
				l_list_type_code,
				l_ask_for_flag,
				l_hdr_lmt_exists,
				l_line_lmt_exists,
				l_brk_uom_code,
				l_brk_uom_ctxt,
				l_brk_uom_attr,
				l_curr_code,
				l_prcng_effctve_dt,
				l_curr_det_id,
				l_curr_hdr_id,
				L_SELLNG_ROUND_FTR,
				l_base_curr_code,
				L_qualifier_precedence,
        	                l_descnt_quals_exist,
                                l_PRICE_BREAK_TYPE_CODE
				limit l_limit;
		ELSE
				FETCH L_SEC_LST_LIN_P1_QLFY_SEC_N BULK COLLECT
				INTO l_list_header_id_tbl,
				l_list_line_id_tbl,
				l_line_index_tbl,
				l_matched_pattrn_id_tbl,
				l_pricing_phase_id_tbl,
				l_matched_hash_key_tbl,
				l_stage_tbl,
				l_pricing_status_code_tbl,
				l_ssc,
				l_header_quals_exist_flag,
				l_grouping_no,
				l_eq_flag,
				l_validated_flag,l_modf_lvl_code,l_other_oprt_count,l_null_other_oprt_count,
				l_list_type_code,
				l_ask_for_flag,
				l_hdr_lmt_exists,
				l_line_lmt_exists,
				l_brk_uom_code,
				l_brk_uom_ctxt,
				l_brk_uom_attr,
				l_curr_code,
				l_prcng_effctve_dt,
				L_qualifier_precedence,
        	                l_descnt_quals_exist,
                                l_PRICE_BREAK_TYPE_CODE
				limit l_limit;
		END IF;
	      EXIT WHEN l_list_header_id_tbl.COUNT = 0;

IF G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN
	    forall i IN 1 .. l_list_header_id_tbl.COUNT
	    INSERT INTO qp_preq_patrn_qual_tmp(list_header_id,
					list_line_id,
					line_index,
					matched_pattrn_id,
					pricing_phase_id,
					matched_hash_key,
					stage,
					pricing_status_code,
					source_system_code,
					header_quals_exist_flag,
					grouping_no,
					eq_flag,
					validated_flag,
					MODIFIER_LEVEL_CODE,
					other_oprt_count,
					null_other_oprt_count,
   					LIST_TYPE_CODE,
					ASK_FOR_FLAG,
					HEADER_LIMIT_EXISTS,
					LINE_LIMIT_EXISTS,
					BREAK_UOM_CODE,
					BREAK_UOM_CONTEXT,
					BREAK_UOM_ATTRIBUTE,
					ORDER_CURRENCY,
					PRICING_EFFECTIVE_DATE,
					CURRENCY_DETAIL_ID,
					CURRENCY_HEADER_ID,
					SELLING_ROUNDING_FACTOR,
					BASE_CURRENCY_CODE,
					qualifier_precedence,
					descendents_quals_exist,
                                        PRICE_BREAK_TYPE_CODE
					)
			    VALUES(l_list_header_id_tbl(i),
					l_list_line_id_tbl(i),
					l_line_index_tbl(i),
					l_matched_pattrn_id_tbl(i),
					l_pricing_phase_id_tbl(i),
					l_matched_hash_key_tbl(i),
					l_stage_tbl(i),
					l_pricing_status_code_tbl(i),
					l_ssc(i),
					l_header_quals_exist_flag(i),
					l_grouping_no(i),
					l_eq_flag(i),
					l_validated_flag(i),
					l_modf_lvl_code(i),
					l_other_oprt_count(i),
					l_null_other_oprt_count(i),
					l_list_type_code(i),
					l_ask_for_flag(i),
					l_hdr_lmt_exists(i),
					l_line_lmt_exists(i),
					l_brk_uom_code(i),
					l_brk_uom_ctxt(i),
					l_brk_uom_attr(i),
					l_curr_code(i),
					l_prcng_effctve_dt(i),
					l_curr_det_id(i),
				        l_curr_hdr_id(i),
				        L_SELLNG_ROUND_FTR(i),
				        l_base_curr_code(i),
					L_qualifier_precedence(i),
	        	                l_descnt_quals_exist(i),
                                        l_PRICE_BREAK_TYPE_CODE(i));
ELSE
	    forall i IN 1 .. l_list_header_id_tbl.COUNT
	    INSERT INTO qp_preq_patrn_qual_tmp(list_header_id,
					list_line_id,
					line_index,
					matched_pattrn_id,
					pricing_phase_id,
					matched_hash_key,
					stage,
					pricing_status_code,
					source_system_code,
					header_quals_exist_flag,
					grouping_no,
					eq_flag,
					validated_flag,
					MODIFIER_LEVEL_CODE,
					other_oprt_count,
					null_other_oprt_count,
   					LIST_TYPE_CODE,
					ASK_FOR_FLAG,
					HEADER_LIMIT_EXISTS,
					LINE_LIMIT_EXISTS,
					BREAK_UOM_CODE,
					BREAK_UOM_CONTEXT,
					BREAK_UOM_ATTRIBUTE,
					ORDER_CURRENCY,
					PRICING_EFFECTIVE_DATE,
					qualifier_precedence,
					descendents_quals_exist,
                                        PRICE_BREAK_TYPE_CODE
					)
			    VALUES(l_list_header_id_tbl(i),
					l_list_line_id_tbl(i),
					l_line_index_tbl(i),
					l_matched_pattrn_id_tbl(i),
					l_pricing_phase_id_tbl(i),
					l_matched_hash_key_tbl(i),
					l_stage_tbl(i),
					l_pricing_status_code_tbl(i),
					l_ssc(i),
					l_header_quals_exist_flag(i),
					l_grouping_no(i),
					l_eq_flag(i),
					l_validated_flag(i),
					l_modf_lvl_code(i),
					l_other_oprt_count(i),
					l_null_other_oprt_count(i),
					l_list_type_code(i),
					l_ask_for_flag(i),
					l_hdr_lmt_exists(i),
					l_line_lmt_exists(i),
					l_brk_uom_code(i),
					l_brk_uom_ctxt(i),
					l_brk_uom_attr(i),
					l_curr_code(i),
					l_prcng_effctve_dt(i),
					L_qualifier_precedence(i),
					l_descnt_quals_exist(i),
                                        l_PRICE_BREAK_TYPE_CODE(i));
END IF;



		l_loop_count:=l_loop_count+1;
	    --exit when l_header_cache_cur%rowcount < l_limit;
	  END LOOP;
	    if G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN  /*vivek*/
			IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
				engine_debug('cursor close l_list_cur_currency-multi-currency TRUE');
			END IF;

				CLOSE L_SEC_LST_LIN_P1_QLFY_N_CURR;
				qp_debug_util.tstop('L_SEC_LST_LIN_P1_QLFY_N_CURR');
		else
				CLOSE L_SEC_LST_LIN_P1_QLFY_SEC_N;
				qp_debug_util.tstop('L_SEC_LST_LIN_P1_QLFY_SEC_N');
		end if;
END IF;

	l_stage :=G_STAGE_CACHE_SEC_PL_LIN_SRCH;

   qp_debug_util.tstart('Populate_Temp_Tables_NEQ_BTW_SEC_LIST_CUR',   'Populate_Temp_Tables_NEQ_BTW_SEC_LIST_CUR');
   Populate_Temp_Tables_NEQ_BTW(
			    G_PRICE_LIST_PHASE_ID ,
			    l_stage ,
			    x_status_code ,
			    x_status_text );
    IF x_status_code <> FND_API.G_RET_STS_SUCCESS THEN
	RAISE E_ROUTINE_ERRORS;
    END IF;

    qp_debug_util.tstop('Populate_Temp_Tables_NEQ_BTW_SEC_LIST_CUR');
    qp_debug_util.tstart('QP_EVALUATE_OTHER_OPERATORS_SEC_LIST_CUR',   'QP_EVALUATE_OTHER_OPERATORS_SEC_LIST_CUR');

	QP_EVALUATE_OTHER_OPERATORS(
			 G_PRICE_LIST_PHASE_ID ,
			  l_stage,
			    x_status_code ,
			    x_status_text );

	IF x_status_code <> FND_API.G_RET_STS_SUCCESS THEN
		RAISE E_ROUTINE_ERRORS;
        END IF;

	qp_debug_util.tstop('QP_EVALUATE_OTHER_OPERATORS_SEC_LIST_CUR');

       qp_debug_util.tstart('SEC_SRCH_PATRN_LIST_CUR_DEL_LIN_TCA',   'Line deletion for TCA');

       UPDATE qp_preq_patrn_qual_tmp a
	SET pricing_status_code = G_DELETED_TCA
	WHERE pricing_status_code = g_status_unchanged
	 AND a.descendents_quals_exist = 'Y'
         and a.pricing_phase_id = G_PRICE_LIST_PHASE_ID
         and a.stage = l_stage
	 AND EXISTS (
	    SELECT 1
	    FROM qp_qualifiers b, qp_npreq_line_attrs_tmp c
	    WHERE b.list_header_id = a.list_header_id
	      AND b.list_line_id = a.list_line_id
	      AND (b.qualifier_grouping_no = a.grouping_no
                   or
                   b.qualifier_grouping_no = -1
                  )
	      AND b.qualify_hier_descendents_flag = 'N'
	      AND c.segment_id = b.segment_id
	      AND c.line_index = a.line_index
	      AND c.derived_qualifier_flag = 'Y');

        qp_debug_util.tstop('SEC_SRCH_PATRN_LIST_CUR_DEL_LIN_TCA');

	qp_debug_util.tstart('PATRN_SEC_LIST_CUR_POPULATE_PAT_TEMP_TABLES',   'Populate_Pat_Temp_Tables');

	Populate_Pat_Temp_Tables(G_PRICE_LIST_PHASE_ID,
				G_STAGE_CACHE_SEC_PL_LIN_SRCH,
				x_status_code,
				x_status_text);

	IF x_status_code <> FND_API.G_RET_STS_SUCCESS THEN
		RAISE E_ROUTINE_ERRORS;
        END IF;

	qp_debug_util.tstop('PATRN_SEC_LIST_CUR_POPULATE_PAT_TEMP_TABLES');

	IF g_debug_engine = fnd_api.g_true THEN
		engine_debug('x_status_code-' || x_status_code);
		engine_debug('x_status_text-' || x_status_text);
	END IF;
ELSE
	qp_debug_util.tstart('PATRN_SEC_LIST_CUR_POPULATE_PAT_TEMP_TABLES',   'Populate_Pat_Temp_Tables');
	/*IF G_QUALIFY_SECONDARY = G_YES THEN
		l_stage :=G_STAGE_CACHE_SEC_PL_HDR_SRCH;
	ELSE
		l_stage := G_STAGE_CACHE_SEC_PL_LIN_SRCH2;
	END IF;*/
	Populate_Pat_Temp_Tables(G_PRICE_LIST_PHASE_ID,
				G_STAGE_CACHE_SEC_PL_LIN_SRCH2,
				x_status_code,
				x_status_text);

	IF x_status_code <> FND_API.G_RET_STS_SUCCESS THEN
		RAISE E_ROUTINE_ERRORS;
        END IF;

	qp_debug_util.tstop('PATRN_SEC_LIST_CUR_POPULATE_PAT_TEMP_TABLES');

END IF;	---path = 1
IF l_loop_count <> 0 THEN
     QP_Resolve_Incompatability_PVT.Determine_Pricing_UOM_And_Qty
				(p_line_index        => NULL,
 				 p_order_uom_code    => NULL,
				 p_order_qty         => NULL,
				 p_pricing_phase_id  => G_PRICE_LIST_PHASE_ID, -- pricing_phase_id,
                                 p_call_big_search   => FALSE,
				 x_list_line_id	     => l_list_line_id,
				 x_return_status     => x_status_code,
				 x_return_status_txt => x_status_text);

      IF(x_status_code = FND_API.G_RET_STS_ERROR) THEN
       RAISE E_ROUTINE_ERRORS;
      END IF;

     -- 3773652
     -- re-run Evaluate_Between after UOM conversion to check PLL really qualifies
     begin
       select 'x' into l_dummy
       from qp_npreq_lines_tmp
       where LINE_UOM_CODE <> nvl(PRICED_UOM_CODE, LINE_UOM_CODE)
       and (PRICE_FLAG = G_YES
            or
       PRICE_FLAG = G_PHASE and p_freeze_override_flag = G_YES)
       and rownum = 1;

       Evaluate_Between(G_PRICE_LIST_PHASE_ID,NULL,NULL,x_status_code,x_status_text);

	IF(x_status_code = FND_API.G_RET_STS_ERROR) THEN
		RAISE E_ROUTINE_ERRORS;
	END IF;

     exception
       when no_data_found then
         null;
     end;

     -- Update the request line status for lines which got valid price list
     Update_Request_Line_Status(p_control_rec,'SUCCESS',p_freeze_override_flag,x_status_code,x_status_text);  --[julin/4708044]

     IF(x_status_code = FND_API.G_RET_STS_ERROR) THEN
      RAISE E_ROUTINE_ERRORS;
     END IF;

     --bug# 2091386 not reflecting the right price on change on UOM on the order line . Since
     --QP_Resolve_Incompatability_PVT.Determine_Pricing_UOM_And_Qty determines the pricing_qty
     --which is needed later in Get_Eligible_Price_Break we need to call Get_Eligible_Price_Break
     --after QP_Resolve_Incompatability_PVT.Determine_Pricing_UOM_And_Qty.
     --By doing this we will get the right price in the PRICE event on change of UOM on the order line
     --for price based on price break
       Get_Eligible_Price_Break(G_PRICE_LIST_PHASE_ID,NULL,x_status_code,x_status_text);

     IF(x_status_code = FND_API.G_RET_STS_ERROR) THEN
      RAISE E_ROUTINE_ERRORS;
     END IF;
ELSE
	   -- Update the request line status for lines which got valid price list
	   Update_Request_Line_Status(p_control_rec,'FAILURE',p_freeze_override_flag,x_status_code,x_status_text);  --[juiln/4708044]
	   IF(x_status_code = FND_API.G_RET_STS_ERROR) THEN
	    RAISE E_ROUTINE_ERRORS;
	   END IF;
END IF;

qp_debug_util.tstop('PERFORM_SECONDARY_PAT_SEARCH');

EXCEPTION
 WHEN E_ROUTINE_ERRORS THEN
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug(l_routine||': '||x_status_text);
     END IF;
     x_status_code := FND_API.G_RET_STS_ERROR;
     x_status_text := l_routine||': '||x_status_text;

	     IF G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN
		     IF L_SEC_LST_HDR_P1_QLFY_Y_CURR%ISOPEN THEN
			CLOSE L_SEC_LST_HDR_P1_QLFY_Y_CURR;
		     END if;

		     IF L_SEC_LST_HDR_P1_QLFY_N_CURR%ISOPEN THEN
			CLOSE L_SEC_LST_HDR_P1_QLFY_N_CURR;
		     END if;

		     IF L_SEC_LST_LIN_P1_QLFY_N_CURR%ISOPEN THEN
			CLOSE L_SEC_LST_LIN_P1_QLFY_N_CURR;
		     END if;

		     IF L_SEC_LST_LIN_P1_QLFY_Y_CURR%ISOPEN THEN
			CLOSE L_SEC_LST_LIN_P1_QLFY_Y_CURR;
		     END if;

		     IF L_SEC_SRCH_BOTH_P2_QLFY_N_CURR%ISOPEN THEN
			CLOSE L_SEC_SRCH_BOTH_P2_QLFY_N_CURR;
		     END if;
	     ELSE
		      IF L_SEC_LST_HDR_P1_QLFY_SEC_Y%ISOPEN THEN
			CLOSE L_SEC_LST_HDR_P1_QLFY_SEC_Y;
		     END if;

		     IF L_SEC_LST_LIN_P1_QLFY_SEC_Y%ISOPEN THEN
			CLOSE L_SEC_LST_LIN_P1_QLFY_SEC_Y;
		     END if;

		      IF L_SEC_LST_HDR_P1_QLFY_SEC_N%ISOPEN THEN
			CLOSE L_SEC_LST_HDR_P1_QLFY_SEC_N;
		     END if;

		     IF L_SEC_LST_LIN_P1_QLFY_SEC_N%ISOPEN THEN
			CLOSE L_SEC_LST_LIN_P1_QLFY_SEC_N;
		     END if;

		     IF L_SEC_SRCH_BOTH_P2_QLFY_N%ISOPEN THEN
			CLOSE L_SEC_SRCH_BOTH_P2_QLFY_N;
		     END if;

	     END IF;


 WHEN OTHERS THEN
     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug(SQLERRM);
     END IF;
     x_status_code := FND_API.G_RET_STS_ERROR;
     x_status_text := l_routine||' '||SQLERRM;

     IF G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN
		     IF L_SEC_LST_HDR_P1_QLFY_Y_CURR%ISOPEN THEN
			CLOSE L_SEC_LST_HDR_P1_QLFY_Y_CURR;
		     END if;

		     IF L_SEC_LST_HDR_P1_QLFY_N_CURR%ISOPEN THEN
			CLOSE L_SEC_LST_HDR_P1_QLFY_N_CURR;
		     END if;

		     IF L_SEC_LST_LIN_P1_QLFY_N_CURR%ISOPEN THEN
			CLOSE L_SEC_LST_LIN_P1_QLFY_N_CURR;
		     END if;

		     IF L_SEC_LST_LIN_P1_QLFY_Y_CURR%ISOPEN THEN
			CLOSE L_SEC_LST_LIN_P1_QLFY_Y_CURR;
		     END if;

		     IF L_SEC_SRCH_BOTH_P2_QLFY_N_CURR%ISOPEN THEN
			CLOSE L_SEC_SRCH_BOTH_P2_QLFY_N_CURR;
		     END if;

	     ELSE
		      IF L_SEC_LST_HDR_P1_QLFY_SEC_Y%ISOPEN THEN
			CLOSE L_SEC_LST_HDR_P1_QLFY_SEC_Y;
		     END if;

		     IF L_SEC_LST_LIN_P1_QLFY_SEC_Y%ISOPEN THEN
			CLOSE L_SEC_LST_LIN_P1_QLFY_SEC_Y;
		     END if;

		      IF L_SEC_LST_HDR_P1_QLFY_SEC_N%ISOPEN THEN
			CLOSE L_SEC_LST_HDR_P1_QLFY_SEC_N;
		     END if;

		     IF L_SEC_LST_LIN_P1_QLFY_SEC_N%ISOPEN THEN
			CLOSE L_SEC_LST_LIN_P1_QLFY_SEC_N;
		     END if;

		     IF L_SEC_SRCH_BOTH_P2_QLFY_N%ISOPEN THEN
			CLOSE L_SEC_SRCH_BOTH_P2_QLFY_N;
		     END if;

	     END IF;

END PERFORM_SECONDARY_PATRN_SEARCH;


PROCEDURE LIST_HEADER_PATTERN_SEARCH (
		       p_pricing_phase_id     IN NUMBER,
		       p_freeze_override_flag IN VARCHAR2,
		       p_control_rec          IN CONTROL_RECORD_TYPE,
                       x_status_code          OUT NOCOPY VARCHAR2,
                       x_status_text          OUT NOCOPY VARCHAR2) AS


   CURSOR l_pat_cache_both IS

   SELECT /*+ ORDERED index(qplines QP_PREQ_LINES_TMP_N3)
       index(qpl QP_LIST_LINES_N16)
       index(qppattmp1 QP_NPREQ_LINE_PATRNS_T_N2)
       index(qpatrgrp QP_ATTRIBUTE_GROUPS_N1)
       index(qppattmp2 QP_NPREQ_LINE_PATRNS_T_N1)
       index(qprs qp_pte_source_systems_u2)
       l_pat_cache_both */
      DISTINCT
         qpl.LIST_HEADER_ID,
         qpl.LIST_LINE_ID,
         qplines.LINE_INDEX,
         qpl.pattern_id  QPL_MATCHED_PATTRN_ID,
	 qpatrgrp.pattern_id  AG_MATCHED_PATTRN_ID,
         p_pricing_phase_id,
         qpl.HASH_KEY  QPL_MATCHED_HASH_KEY,
         qpatrgrp.HASH_KEY  AG_MATCHED_HASH_KEY,
	 G_STAGE_CACHE_LST_HDR_LIN_SRCH STAGE,
	 G_STATUS_UNCHANGED PRICING_STATUS_CODE,
         qpatrgrp.source_system_code,
         --decode(bitand(qpl.qualification_ind,2),2,'Y','N') HEADER_QUALS_EXIST_FLAG,
	 DECODE(qpatrgrp.EQ_FLAG,'N','Y','N') HEADER_QUALS_EXIST_FLAG,
         -1 qpl_grpng_num,
         qpatrgrp.GROUPING_NO ag_grpng_num,
         qpl.EQ_FLAG QPL_EQFLAG,
	 qpatrgrp.EQ_FLAG ATRGRP_EQFLAG,
         qplines.VALIDATED_FLAG,
         qpl.MODIFIER_LEVEL_CODE,
         qpl.null_other_oprt_count qpl_other_oprt_cnt,
         qpatrgrp.other_oprt_count ag_other_oprt_cnt,
         qpatrgrp.null_other_oprt_count ag_null_othr_oprt_cnt,
	 --qpl.other_oprt_count,
         --qpl.null_other_oprt_count,
         qpatrgrp.LIST_TYPE_CODE,
         qpatrgrp.ASK_FOR_FLAG,
         qpatrgrp.HEADER_LIMIT_EXISTS,
         qpatrgrp.LINE_LIMIT_EXISTS,
	 NULL CURRENCY_DETAIL_ID,
         qpatrgrp.CURRENCY_HEADER_ID,
         NULL SELLING_ROUNDING_FACTOR,
         qpatrgrp.CURRENCY_CODE   BASE_CURRENCY_CODE,
         qplines.pricing_effective_date,
         qpl.BREAK_UOM_CODE,
         qpl.BREAK_UOM_CONTEXT,
         qpl.BREAK_UOM_ATTRIBUTE,
         QPLINES.CURRENCY_CODE ORDER_CURRENCY,
	 qpatrgrp.descendents_quals_exist,
	 QPL.PRICE_BREAK_TYPE_CODE --[julin] for price book
   FROM qp_npreq_lines_tmp qplines,
        qp_npreq_line_patrns_tmp qppattmp1,
	qp_list_lines qpl,
        qp_secu_attr_groups_v qpatrgrp,
	--qp_attribute_groups qpatrgrp,
        qp_pte_source_systems qprs,
        --qp_price_req_sources_v qprs,
        qp_npreq_line_patrns_tmp qppattmp2
   WHERE QPLINES.VALIDATED_FLAG = G_NO
     AND (qplines.price_flag = G_YES OR
          (qplines.price_flag = G_PHASE AND p_freeze_override_flag = G_YES))
     AND qplines.list_price_override_flag in ('N', 'O') -- po integration
     AND qppattmp1.line_index = qplines.line_index
     AND qpl.pricing_phase_id = p_pricing_phase_id
     AND qpl.list_header_id = QPLINES.PRICE_LIST_HEADER_ID
     AND qpl.pattern_id = qppattmp1.pattern_id
     AND qpl.hash_key = qppattmp1.hash_key
     AND qpl.pte_code = G_PTE_CODE
     AND TRUNC(nvl(qplines.pricing_effective_date,   sysdate))
          BETWEEN TRUNC(nvl(qpl.start_date_active,   nvl(qplines.pricing_effective_date,   sysdate)))
	   AND TRUNC(nvl(qpl.end_date_active,   nvl(qplines.pricing_effective_date,   sysdate)))
     AND qpatrgrp.list_header_id = qpl.list_header_id
     AND qpatrgrp.pricing_phase_id = p_pricing_phase_id
     AND qpatrgrp.active_flag = G_YES
     AND TRUNC(nvl(qplines.pricing_effective_date,sysdate))
          BETWEEN TRUNC(nvl(qpatrgrp.START_DATE_ACTIVE_H,nvl(qplines.pricing_effective_date,sysdate)))
          AND TRUNC(nvl(qpatrgrp.END_DATE_ACTIVE_H,nvl(qplines.pricing_effective_date,   sysdate)))
     AND TRUNC(nvl(qplines.pricing_effective_date,   sysdate))
         BETWEEN TRUNC(NVL(qpatrgrp.START_DATE_ACTIVE_Q,nvl(qplines.pricing_effective_date,sysdate)))
         AND TRUNC(NVL(qpatrgrp.END_DATE_ACTIVE_Q,nvl(qplines.pricing_effective_date,   sysdate)))
     --AND qprs.source_system_code = qpatrgrp.source_system_code
     --AND qprs.request_type_code = qplines.request_type_code -- check it
     AND   qprs.APPLICATION_SHORT_NAME = qpatrgrp.source_system_code
     AND   qprs.pte_code = G_PTE_CODE
     AND qppattmp2.line_index = qplines.line_index
     AND qppattmp2.pattern_id = qpatrgrp.pattern_id
     AND qppattmp2.hash_key = qpatrgrp.hash_key
     AND qpatrgrp.CURRENCY_CODE = QPLINES.CURRENCY_CODE
     AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0)
       UNION ALL
      SELECT /*+ ORDERED index(qplines QP_PREQ_LINES_TMP_N3)
       index(qpl QP_LIST_LINES_N16)
       index(qppattmp1 QP_NPREQ_LINE_PATRNS_T_N2)
       index(qprs qp_pte_source_systems_u2)
       l_pat_cache_both */
      DISTINCT
         qpl.LIST_HEADER_ID,
         qpl.LIST_LINE_ID,
         qplines.LINE_INDEX,
         qpl.pattern_id  QPL_MATCHED_PATTRN_ID,
	 null, --qpatrgrp.pattern_id  AG_MATCHED_PATTRN_ID,
         p_pricing_phase_id,
         qpl.HASH_KEY  QPL_MATCHED_HASH_KEY,
         null, --qpatrgrp.HASH_KEY  AG_MATCHED_HASH_KEY,
	 G_STAGE_CACHE_LST_HDR_LIN_SRCH STAGE,
	 G_STATUS_UNCHANGED PRICING_STATUS_CODE,
         qph.source_system_code,
	 'N' ,-- DECODE(qpatrgrp.EQ_FLAG,'N','Y','N') HEADER_QUALS_EXIST_FLAG,
         -1 qpl_grpng_num,
         null, --qpatrgrp.GROUPING_NO ag_grpng_num,
         qpl.EQ_FLAG QPL_EQFLAG,
	 null, --qpatrgrp.EQ_FLAG ATRGRP_EQFLAG,
         qplines.VALIDATED_FLAG,
         qpl.MODIFIER_LEVEL_CODE,
         qpl.null_other_oprt_count qpl_other_oprt_cnt,
         0, --qpatrgrp.other_oprt_count ag_other_oprt_cnt,
         0, --qpatrgrp.null_other_oprt_count ag_null_othr_oprt_cnt,
         qph.LIST_TYPE_CODE,
         qph.ASK_FOR_FLAG,
         qph.LIMIT_EXISTS_FLAG,
         qpl.LIMIT_EXISTS_FLAG,
	 NULL CURRENCY_DETAIL_ID,
         qph.CURRENCY_HEADER_ID,
         NULL SELLING_ROUNDING_FACTOR,
         qph.CURRENCY_CODE   BASE_CURRENCY_CODE,
         qplines.pricing_effective_date,
         qpl.BREAK_UOM_CODE,
         qpl.BREAK_UOM_CONTEXT,
         qpl.BREAK_UOM_ATTRIBUTE,
         QPLINES.CURRENCY_CODE ORDER_CURRENCY,
 	 'N' descendents_quals_exist,
	 QPL.PRICE_BREAK_TYPE_CODE --[julin] for price book
   FROM qp_npreq_lines_tmp qplines,
        qp_npreq_line_patrns_tmp qppattmp1,
	qp_list_lines qpl,
	qp_list_headers_b qph,
	qp_pte_source_systems qprs
        --qp_price_req_sources_v qprs
   WHERE QPLINES.VALIDATED_FLAG = G_YES
     AND (qplines.price_flag = G_YES OR
          (qplines.price_flag = G_PHASE AND p_freeze_override_flag = G_YES))
     AND qplines.list_price_override_flag in ('N', 'O') -- po integration
     AND qppattmp1.line_index = qplines.line_index
     AND qpl.pricing_phase_id = p_pricing_phase_id
     AND qpl.list_header_id = QPLINES.PRICE_LIST_HEADER_ID
     AND qpl.pattern_id = qppattmp1.pattern_id
     AND qpl.hash_key = qppattmp1.hash_key
     AND qpl.pte_code = G_PTE_CODE
     AND TRUNC(nvl(qplines.pricing_effective_date,   sysdate))
          BETWEEN TRUNC(nvl(qpl.start_date_active,   nvl(qplines.pricing_effective_date,   sysdate)))
	   AND TRUNC(nvl(qpl.end_date_active,   nvl(qplines.pricing_effective_date,   sysdate)))
     AND qph.list_header_id = qpl.list_header_id
     AND qph.active_flag = G_YES
     AND TRUNC(nvl(qplines.pricing_effective_date,sysdate))
          BETWEEN TRUNC(nvl(qph.START_DATE_ACTIVE,nvl(qplines.pricing_effective_date,sysdate)))
          AND TRUNC(nvl(qph.END_DATE_ACTIVE,nvl(qplines.pricing_effective_date,   sysdate)))
     --AND qprs.source_system_code = qph.source_system_code
     --AND qprs.request_type_code = qplines.request_type_code -- check it
     AND   qprs.APPLICATION_SHORT_NAME = qph.source_system_code
     AND   qprs.pte_code = G_PTE_CODE
     AND qph.CURRENCY_CODE = QPLINES.CURRENCY_CODE
     AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0);

 CURSOR l_pat_cache_both_curr IS

   SELECT /*+ ORDERED index(QCDT QP_CURRENCY_DETAILS_N2)
       index(qplines QP_PREQ_LINES_TMP_N3)
       index(qpl QP_LIST_LINES_N16)
       index(qppattmp1 QP_NPREQ_LINE_PATRNS_T_N2)
       index(qpatrgrp QP_ATTRIBUTE_GROUPS_N1)
       index(qppattmp2 QP_NPREQ_LINE_PATRNS_T_N1)
       index(qprs qp_pte_source_systems_u2)
       l_pat_cache_both_curr */
      DISTINCT
         qpl.LIST_HEADER_ID,
         qpl.LIST_LINE_ID,
         qplines.LINE_INDEX,
         qpl.pattern_id  QPL_MATCHED_PATTRN_ID,
	 qpatrgrp.pattern_id  AG_MATCHED_PATTRN_ID,
         p_pricing_phase_id,
         qpl.HASH_KEY  QPL_MATCHED_HASH_KEY,
         qpatrgrp.HASH_KEY  AG_MATCHED_HASH_KEY,
	 G_STAGE_CACHE_LST_HDR_LIN_SRCH STAGE,
	 G_STATUS_UNCHANGED PRICING_STATUS_CODE,
         qpatrgrp.source_system_code,
         --decode(bitand(qpl.qualification_ind,2),2,'Y','N') HEADER_QUALS_EXIST_FLAG,
	 DECODE(qpatrgrp.EQ_FLAG,'N','Y',DECODE(qpatrgrp.descendents_quals_exist,'Y','Y','N')) HEADER_QUALS_EXIST_FLAG,
         -1 qpl_grpng_num,
         qpatrgrp.GROUPING_NO ag_grpng_num,
         qpl.EQ_FLAG QPL_EQFLAG,
	 qpatrgrp.EQ_FLAG ATRGRP_EQFLAG,
         qplines.VALIDATED_FLAG,
         qpl.MODIFIER_LEVEL_CODE,
         qpl.null_other_oprt_count qpl_other_oprt_cnt,
         qpatrgrp.other_oprt_count ag_other_oprt_cnt,
         qpatrgrp.null_other_oprt_count ag_null_othr_oprt_cnt,
         qpatrgrp.LIST_TYPE_CODE,
         qpatrgrp.ASK_FOR_FLAG,
         qpatrgrp.HEADER_LIMIT_EXISTS,
         qpatrgrp.LINE_LIMIT_EXISTS,
	 QCDT.CURRENCY_DETAIL_ID,
         QCDT.CURRENCY_HEADER_ID,
         QCDT.SELLING_ROUNDING_FACTOR,
         qpatrgrp.CURRENCY_CODE   BASE_CURRENCY_CODE,
         qplines.pricing_effective_date,
         qpl.BREAK_UOM_CODE,
         qpl.BREAK_UOM_CONTEXT,
         qpl.BREAK_UOM_ATTRIBUTE,
         QPLINES.CURRENCY_CODE ORDER_CURRENCY,
 	 qpatrgrp.descendents_quals_exist,
	 QPL.PRICE_BREAK_TYPE_CODE --[julin] for price book
   FROM qp_npreq_lines_tmp qplines,
        qp_npreq_line_patrns_tmp qppattmp1,
	qp_list_lines qpl,
	qp_secu_attr_groups_v qpatrgrp,
	--qp_attribute_groups qpatrgrp,
        qp_pte_source_systems qprs,
        --qp_price_req_sources_v qprs,
        qp_npreq_line_patrns_tmp qppattmp2,
	QP_CURRENCY_DETAILS QCDT
   WHERE QPLINES.VALIDATED_FLAG = G_NO
     AND (qplines.price_flag = G_YES OR
          (qplines.price_flag = G_PHASE AND p_freeze_override_flag = G_YES))
     AND qplines.list_price_override_flag in ('N', 'O') -- po integration
     AND qppattmp1.line_index = qplines.line_index
     AND qpl.pricing_phase_id = p_pricing_phase_id
     AND qpl.list_header_id = QPLINES.PRICE_LIST_HEADER_ID
     AND qpl.pattern_id = qppattmp1.pattern_id
     AND qpl.hash_key = qppattmp1.hash_key
     AND qpl.pte_code = G_PTE_CODE
     AND TRUNC(nvl(qplines.pricing_effective_date,   sysdate))
          BETWEEN TRUNC(nvl(qpl.start_date_active,   nvl(qplines.pricing_effective_date,   sysdate)))
	   AND TRUNC(nvl(qpl.end_date_active,   nvl(qplines.pricing_effective_date,   sysdate)))
     AND qpatrgrp.list_header_id = qpl.list_header_id
     AND qpatrgrp.pricing_phase_id = p_pricing_phase_id
     AND qpatrgrp.active_flag = G_YES
     AND TRUNC(nvl(qplines.pricing_effective_date,sysdate))
          BETWEEN TRUNC(nvl(qpatrgrp.START_DATE_ACTIVE_H,nvl(qplines.pricing_effective_date,sysdate)))
          AND TRUNC(nvl(qpatrgrp.END_DATE_ACTIVE_H,nvl(qplines.pricing_effective_date,   sysdate)))
     AND TRUNC(nvl(qplines.pricing_effective_date,   sysdate))
         BETWEEN TRUNC(NVL(qpatrgrp.START_DATE_ACTIVE_Q,nvl(qplines.pricing_effective_date,sysdate)))
         AND TRUNC(NVL(qpatrgrp.END_DATE_ACTIVE_Q,nvl(qplines.pricing_effective_date,   sysdate)))
     --AND qprs.source_system_code = qpatrgrp.source_system_code
     --AND qprs.request_type_code = qplines.request_type_code -- check it
     AND qprs.APPLICATION_SHORT_NAME = qpatrgrp.source_system_code
     AND qprs.pte_code = G_PTE_CODE
     AND qppattmp2.line_index = qplines.line_index
     AND qppattmp2.pattern_id = qpatrgrp.pattern_id
     AND qppattmp2.hash_key = qpatrgrp.hash_key
     AND qpatrgrp.CURRENCY_HEADER_ID = QCDT.CURRENCY_HEADER_ID
     AND QPLINES.CURRENCY_CODE = QCDT.TO_CURRENCY_CODE
     AND TRUNC(nvl(qplines.pricing_effective_date,sysdate)) BETWEEN
		TRUNC(NVL(QCDT.START_DATE_ACTIVE,nvl(qplines.pricing_effective_date,sysdate)))
			AND TRUNC(NVL(QCDT.END_DATE_ACTIVE,nvl(qplines.pricing_effective_date,sysdate)))
     AND (
        (qcdt.curr_attribute_context is null
         and not exists
             (select /*+ use_nl(qcdt1) LEADING(qcdt1) index(qcdt1 QP_CURRENCY_DETAILS_N2) */ 'x'
	       from qp_npreq_line_attrs_tmp pa_tmp,   qp_currency_details qcdt1
               where qcdt1.curr_attribute_context IS NOT NULL
		 and qcdt1.curr_attribute_context = pa_tmp.context
                 and qcdt1.curr_attribute = pa_tmp.attribute
                 and qcdt1.curr_attribute_value = pa_tmp.value_from
                 and qcdt1.curr_attribute_type = pa_tmp.ATTRIBUTE_TYPE
                 and qcdt1.to_currency_code = qcdt.to_currency_code
                 and qcdt1.currency_header_id = qcdt.currency_header_id
                 and pa_tmp.pricing_status_code = G_STATUS_UNCHANGED
                 and pa_tmp.line_index = qplines.line_index
                 AND TRUNC(nvl(qplines.pricing_effective_date,sysdate)) BETWEEN
		         TRUNC(NVL(QCDT1.START_DATE_ACTIVE,nvl(qplines.pricing_effective_date,sysdate)))
			AND TRUNC(NVL(QCDT1.END_DATE_ACTIVE,nvl(qplines.pricing_effective_date,sysdate)))
             )
        )
        OR
        (qcdt.curr_attribute_context is not null
         and qcdt.currency_detail_id =
             (select qcdt3.currency_detail_id
	       from qp_currency_details qcdt3
                 where qcdt3.to_currency_code = qcdt.to_currency_code
                 and qcdt3.currency_header_id = qcdt.currency_header_id
                 AND TRUNC(nvl(qplines.pricing_effective_date,sysdate)) BETWEEN
   		        TRUNC(NVL(QCDT3.START_DATE_ACTIVE,nvl(qplines.pricing_effective_date,sysdate)))
			AND TRUNC(NVL(QCDT3.END_DATE_ACTIVE,nvl(qplines.pricing_effective_date,sysdate)))
                 and  qcdt3.precedence =
             (select /*+ use_nl(qcdt2) LEADING(qcdt2) index(qcdt2 QP_CURRENCY_DETAILS_N2) */
	       min(qcdt2.precedence)
	       from qp_npreq_line_attrs_tmp pa_tmp1, qp_currency_details qcdt2
               where qcdt2.curr_attribute_context IS NOT NULL
		 and qcdt2.curr_attribute_context = pa_tmp1.context
                 and qcdt2.curr_attribute = pa_tmp1.attribute
                 and qcdt2.curr_attribute_value = pa_tmp1.value_from
                 and qcdt2.curr_attribute_type = pa_tmp1.ATTRIBUTE_TYPE
                 and qcdt2.to_currency_code = qcdt.to_currency_code
                 and qcdt2.currency_header_id = qcdt.currency_header_id
                 and pa_tmp1.pricing_status_code = G_STATUS_UNCHANGED
                 and pa_tmp1.line_index = qplines.line_index
                 AND TRUNC(nvl(qplines.pricing_effective_date,sysdate)) BETWEEN
   		        TRUNC(NVL(QCDT2.START_DATE_ACTIVE,nvl(qplines.pricing_effective_date,sysdate)))
			AND TRUNC(NVL(QCDT2.END_DATE_ACTIVE,nvl(qplines.pricing_effective_date,sysdate)))
             ))
        )
       )
       AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0)
       UNION
      SELECT /*+ ORDERED index(QCDT QP_CURRENCY_DETAILS_N2)
       index(qplines QP_PREQ_LINES_TMP_N3)
       index(qpl QP_LIST_LINES_N16)
       index(qppattmp1 QP_NPREQ_LINE_PATRNS_T_N2)
       index(qprs qp_pte_source_systems_u2)
       l_pat_cache_both_curr */
      DISTINCT
         qpl.LIST_HEADER_ID,
         qpl.LIST_LINE_ID,
         qplines.LINE_INDEX,
         qpl.pattern_id  QPL_MATCHED_PATTRN_ID,
	 null, --qpatrgrp.pattern_id  AG_MATCHED_PATTRN_ID,
         p_pricing_phase_id,
         qpl.HASH_KEY  QPL_MATCHED_HASH_KEY,
         null, --qpatrgrp.HASH_KEY  AG_MATCHED_HASH_KEY,
	 G_STAGE_CACHE_LST_HDR_LIN_SRCH STAGE,
	 G_STATUS_UNCHANGED PRICING_STATUS_CODE,
         qph.source_system_code,
         --decode(bitand(qpl.qualification_ind,2),2,'Y','N') HEADER_QUALS_EXIST_FLAG,
	 'N' ,-- DECODE(qpatrgrp.EQ_FLAG,'N','Y','N') HEADER_QUALS_EXIST_FLAG,
         -1 qpl_grpng_num,
         null, --qpatrgrp.GROUPING_NO ag_grpng_num,
         qpl.EQ_FLAG QPL_EQFLAG,
	 null, --qpatrgrp.EQ_FLAG ATRGRP_EQFLAG,
         qplines.VALIDATED_FLAG,
         qpl.MODIFIER_LEVEL_CODE,
         qpl.null_other_oprt_count qpl_other_oprt_cnt,
         0, --qpatrgrp.other_oprt_count ag_other_oprt_cnt,
         0, --qpatrgrp.null_other_oprt_count ag_null_othr_oprt_cnt,
         qph.LIST_TYPE_CODE,
         qph.ASK_FOR_FLAG,
         qph.LIMIT_EXISTS_FLAG,
         qpl.LIMIT_EXISTS_FLAG,
	 QCDT.CURRENCY_DETAIL_ID,
         QCDT.CURRENCY_HEADER_ID,
         QCDT.SELLING_ROUNDING_FACTOR,
         qph.CURRENCY_CODE   BASE_CURRENCY_CODE,
         qplines.pricing_effective_date,
         qpl.BREAK_UOM_CODE,
         qpl.BREAK_UOM_CONTEXT,
         qpl.BREAK_UOM_ATTRIBUTE,
         QPLINES.CURRENCY_CODE ORDER_CURRENCY,
 	 'N' descendents_quals_exist,
	 QPL.PRICE_BREAK_TYPE_CODE --[julin] for price book
   FROM qp_npreq_lines_tmp qplines,
        qp_npreq_line_patrns_tmp qppattmp1,
	qp_list_lines qpl,
	qp_list_headers_b qph,
        --qp_price_req_sources_v qprs,
	qp_pte_source_systems qprs,
	QP_CURRENCY_DETAILS QCDT
   WHERE QPLINES.VALIDATED_FLAG = G_YES
     AND (qplines.price_flag = G_YES OR
          (qplines.price_flag = G_PHASE AND p_freeze_override_flag = G_YES))
     AND qplines.list_price_override_flag in ('N', 'O') -- po integration
     AND qppattmp1.line_index = qplines.line_index
     AND qpl.pricing_phase_id = p_pricing_phase_id
     AND qpl.list_header_id = QPLINES.PRICE_LIST_HEADER_ID
     AND qpl.pattern_id = qppattmp1.pattern_id
     AND qpl.hash_key = qppattmp1.hash_key
     AND qpl.pte_code = G_PTE_CODE
     AND TRUNC(nvl(qplines.pricing_effective_date,   sysdate))
          BETWEEN TRUNC(nvl(qpl.start_date_active,   nvl(qplines.pricing_effective_date,   sysdate)))
	   AND TRUNC(nvl(qpl.end_date_active,   nvl(qplines.pricing_effective_date,   sysdate)))
     AND qph.list_header_id = qpl.list_header_id
     AND qph.active_flag = G_YES
     AND TRUNC(nvl(qplines.pricing_effective_date,sysdate))
          BETWEEN TRUNC(nvl(qph.START_DATE_ACTIVE,nvl(qplines.pricing_effective_date,sysdate)))
          AND TRUNC(nvl(qph.END_DATE_ACTIVE,nvl(qplines.pricing_effective_date,   sysdate)))
     --AND qprs.source_system_code = qph.source_system_code
     --AND qprs.request_type_code = qplines.request_type_code -- check it
     AND qprs.APPLICATION_SHORT_NAME = qph.source_system_code
     AND qprs.pte_code = G_PTE_CODE
     AND qph.CURRENCY_HEADER_ID = QCDT.CURRENCY_HEADER_ID
     AND QPLINES.CURRENCY_CODE = QCDT.TO_CURRENCY_CODE
     AND TRUNC(nvl(qplines.pricing_effective_date,sysdate)) BETWEEN
		TRUNC(NVL(QCDT.START_DATE_ACTIVE,nvl(qplines.pricing_effective_date,sysdate)))
			AND TRUNC(NVL(QCDT.END_DATE_ACTIVE,nvl(qplines.pricing_effective_date,sysdate)))
     AND (
        (qcdt.curr_attribute_context is null
         and not exists
             (select /*+ use_nl(qcdt1) LEADING(qcdt1) index(qcdt1 QP_CURRENCY_DETAILS_N2) */ 'x'
	       from qp_npreq_line_attrs_tmp pa_tmp,   qp_currency_details qcdt1
               where qcdt1.curr_attribute_context IS NOT NULL
		 and qcdt1.curr_attribute_context = pa_tmp.context
                 and qcdt1.curr_attribute = pa_tmp.attribute
                 and qcdt1.curr_attribute_value = pa_tmp.value_from
                 and qcdt1.curr_attribute_type = pa_tmp.ATTRIBUTE_TYPE
                 and qcdt1.to_currency_code = qcdt.to_currency_code
                 and qcdt1.currency_header_id = qcdt.currency_header_id
                 and pa_tmp.pricing_status_code = G_STATUS_UNCHANGED
                 and pa_tmp.line_index = qplines.line_index
                 AND TRUNC(nvl(qplines.pricing_effective_date,sysdate)) BETWEEN
		         TRUNC(NVL(QCDT1.START_DATE_ACTIVE,nvl(qplines.pricing_effective_date,sysdate)))
			AND TRUNC(NVL(QCDT1.END_DATE_ACTIVE,nvl(qplines.pricing_effective_date,sysdate)))
             )
        )
        OR
        (qcdt.curr_attribute_context is not null
         and qcdt.currency_detail_id =
             (select qcdt3.currency_detail_id
	       from qp_currency_details qcdt3
                 where qcdt3.to_currency_code = qcdt.to_currency_code
                 and qcdt3.currency_header_id = qcdt.currency_header_id
                 AND TRUNC(nvl(qplines.pricing_effective_date,sysdate)) BETWEEN
   		        TRUNC(NVL(QCDT3.START_DATE_ACTIVE,nvl(qplines.pricing_effective_date,sysdate)))
			AND TRUNC(NVL(QCDT3.END_DATE_ACTIVE,nvl(qplines.pricing_effective_date,sysdate)))
                 and  qcdt3.precedence =
             (select /*+ use_nl(qcdt2) LEADING(qcdt2) index(qcdt2 QP_CURRENCY_DETAILS_N2) */
	       min(qcdt2.precedence)
	       from qp_npreq_line_attrs_tmp pa_tmp1, qp_currency_details qcdt2
               where qcdt2.curr_attribute_context IS NOT NULL
		 and qcdt2.curr_attribute_context = pa_tmp1.context
                 and qcdt2.curr_attribute = pa_tmp1.attribute
                 and qcdt2.curr_attribute_value = pa_tmp1.value_from
                 and qcdt2.curr_attribute_type = pa_tmp1.ATTRIBUTE_TYPE
                 and qcdt2.to_currency_code = qcdt.to_currency_code
                 and qcdt2.currency_header_id = qcdt.currency_header_id
                 and pa_tmp1.pricing_status_code = G_STATUS_UNCHANGED
                 and pa_tmp1.line_index = qplines.line_index
                 AND TRUNC(nvl(qplines.pricing_effective_date,sysdate)) BETWEEN
   		        TRUNC(NVL(QCDT2.START_DATE_ACTIVE,nvl(qplines.pricing_effective_date,sysdate)))
			AND TRUNC(NVL(QCDT2.END_DATE_ACTIVE,nvl(qplines.pricing_effective_date,sysdate)))
             ))
        )
       )
       AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0);

l_limit NUMBER := 5000;
p_stage varchar2(300);

TYPE l_number IS TABLE OF NUMBER INDEX BY pls_integer;
  l_list_header_id_tbl l_number;
  l_list_line_id_tbl l_number;
  l_matched_pattrn_id_tbl l_number;
  l_ag_matched_pat_id_tbl l_number;
  l_line_index_tbl l_number;
  l_pricing_phase_id_tbl l_number;
  l_grouping_no l_number;
  l_ag_grpng_no l_number;
  l_other_oprt_count l_number;
  l_ag_othr_oprt_cnt l_number;
  l_null_other_oprt_count l_number;
  l_curr_det_id l_number;
  l_curr_hdr_id l_number;
  L_SELLNG_ROUND_FTR l_number;

  TYPE l_string IS TABLE OF VARCHAR2(2000) INDEX BY pls_integer;
  l_matched_hash_key_tbl l_string;
  l_ag_mtchd_hash_key_tbl l_string;
  l_stage_tbl l_string;
  l_pricing_status_code_tbl l_string;
  l_ssc l_string;
  l_header_quals_exist_flag l_string;
  l_eq_flag l_string;
  l_ag_eq_flag l_string;
  l_validated_flag l_string;
  l_modf_lvl_code l_string;
  l_list_type_code l_string;
  l_ask_for_flag l_string;
  l_hdr_lmt_exists l_string;
  l_line_lmt_exists l_string;
  l_order_curr l_string;
  l_base_curr_code l_string;
  l_brk_uom_code l_string;
  l_brk_uom_ctxt l_string;
  l_brk_uom_attr l_string;
  l_PRICE_BREAK_TYPE_CODE l_string;
  l_descnt_quals_exist l_string;


TYPE l_date IS TABLE OF DATE INDEX BY pls_integer;

l_prcng_effctve_dt l_date;


l_return_status            VARCHAR2(240);
L_STATUS_CODE VARCHAR2(30);
L_STATUS_TEXT VARCHAR2(240);
L_LIST_LINE_ID NUMBER;

l_routine VARCHAR2(40) := 'LIST_HEADER_PATTERN_SEARCH';
E_ROUTINE_ERRORS EXCEPTION;
l_search_path NUMBER(1);

l_loop_count          NUMBER := 0;
L_DUMMY VARCHAR2(1);

BEGIN

  x_status_code := fnd_api.g_ret_sts_success;

  qp_debug_util.tstart('LIST_HEADER_PATTERN_SEARCH',   'List Header Search Pattern', false, true);

  IF g_debug_engine = fnd_api.g_true THEN
	engine_debug('L_LIST_CUR');
  END IF;
-- Line Cache Start

if G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN  /*vivek*/
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('cursor L_LIST_CUR_CURRENCY TRUE');
  END IF;

   qp_debug_util.tstart('PAT_LST_LIN_SRCH_1',   'List Header Search - Cursor L_LIN_CACHE_CURR');

   OPEN l_pat_cache_both_curr;
ELSE
 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('cursor l_sec_list_cur   multi-currency FALSE');
  END IF;

   qp_debug_util.tstart('PAT_LST_LIN_SRCH_1',   'List Header Search - Cursor L_LIN_CACHE');

   OPEN l_pat_cache_both;
END IF;

     LOOP
              l_list_header_id_tbl.DELETE;
	      l_list_line_id_tbl.DELETE;
	      l_line_index_tbl.DELETE;
	      l_matched_pattrn_id_tbl.DELETE;
              l_ag_matched_pat_id_tbl.DELETE;
	      l_pricing_phase_id_tbl.DELETE;
	      l_matched_hash_key_tbl.DELETE;
	      l_ag_mtchd_hash_key_tbl.DELETE;
	      l_stage_tbl.DELETE;
	      l_pricing_status_code_tbl.DELETE;
	      l_ssc.DELETE;
	      l_header_quals_exist_flag.DELETE;
	      l_grouping_no.DELETE;
	      l_ag_grpng_no.DELETE;
	      l_eq_flag.DELETE;
	      l_ag_eq_flag.DELETE;
	      l_validated_flag.DELETE;
	      l_modf_lvl_code.DELETE;
              l_other_oprt_count.DELETE;
	      l_ag_othr_oprt_cnt.DELETE;
	      l_null_other_oprt_count.DELETE;
              l_list_type_code.DELETE;
	      l_ask_for_flag.DELETE;
	      l_hdr_lmt_exists.DELETE;
	      l_line_lmt_exists.DELETE;
	      l_curr_det_id.DELETE;
	      l_curr_hdr_id.DELETE;
	      L_SELLNG_ROUND_FTR.DELETE;
              l_base_curr_code.DELETE;
	      l_prcng_effctve_dt.DELETE;
              l_brk_uom_code.DELETE;
              l_brk_uom_ctxt.DELETE;
              l_brk_uom_attr.DELETE;
              l_order_curr.DELETE;
	      l_descnt_quals_exist.DELETE;
	      l_PRICE_BREAK_TYPE_CODE.DELETE;


if G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN  /*vivek*/

        FETCH l_pat_cache_both_curr bulk collect
        INTO
	      l_list_header_id_tbl,
	      l_list_line_id_tbl,
	      l_line_index_tbl,
	      l_matched_pattrn_id_tbl,
              l_ag_matched_pat_id_tbl,
	      l_pricing_phase_id_tbl,
	      l_matched_hash_key_tbl,
	      l_ag_mtchd_hash_key_tbl,
	      l_stage_tbl,
	      l_pricing_status_code_tbl,
	      l_ssc,
	      l_header_quals_exist_flag,
	      l_grouping_no,
	      l_ag_grpng_no,
	      l_eq_flag,
	      l_ag_eq_flag,
	      l_validated_flag,
	      l_modf_lvl_code,
              l_other_oprt_count,
	      l_ag_othr_oprt_cnt,
	      l_null_other_oprt_count,
              l_list_type_code,
	      l_ask_for_flag,
	      l_hdr_lmt_exists,
	      l_line_lmt_exists,
	      l_curr_det_id,
	      l_curr_hdr_id,
	      L_SELLNG_ROUND_FTR,
              l_base_curr_code,
	      l_prcng_effctve_dt,
              l_brk_uom_code,
              l_brk_uom_ctxt,
              l_brk_uom_attr,
              l_order_curr,
	      l_descnt_quals_exist,
	      l_PRICE_BREAK_TYPE_CODE
	      limit l_limit;
      EXIT
    WHEN l_list_header_id_tbl.COUNT = 0;
  ELSE
        FETCH l_pat_cache_both bulk collect
        INTO
	      l_list_header_id_tbl,
	      l_list_line_id_tbl,
	      l_line_index_tbl,
	      l_matched_pattrn_id_tbl,
              l_ag_matched_pat_id_tbl,
	      l_pricing_phase_id_tbl,
	      l_matched_hash_key_tbl,
	      l_ag_mtchd_hash_key_tbl,
	      l_stage_tbl,
	      l_pricing_status_code_tbl,
	      l_ssc,
	      l_header_quals_exist_flag,
	      l_grouping_no,
	      l_ag_grpng_no,
	      l_eq_flag,
	      l_ag_eq_flag,
	      l_validated_flag,
	      l_modf_lvl_code,
              l_other_oprt_count,
	      l_ag_othr_oprt_cnt,
	      l_null_other_oprt_count,
              l_list_type_code,
	      l_ask_for_flag,
	      l_hdr_lmt_exists,
	      l_line_lmt_exists,
	      l_curr_det_id,
	      l_curr_hdr_id,
	      L_SELLNG_ROUND_FTR,
              l_base_curr_code,
	      l_prcng_effctve_dt,
              l_brk_uom_code,
              l_brk_uom_ctxt,
              l_brk_uom_attr,
              l_order_curr,
	      l_descnt_quals_exist,
	      l_PRICE_BREAK_TYPE_CODE
	      limit l_limit;

      EXIT
    WHEN l_list_header_id_tbl.COUNT = 0;
END IF;



    engine_debug('L_LINE_CACHE-l_list_header_id_tbl.COUNT-'||l_list_header_id_tbl.COUNT);

       forall i IN 1 .. l_list_header_id_tbl.COUNT
         INSERT
	    INTO qp_preq_patrn_qual_tmp(list_header_id,
					list_line_id,
					line_index,
					matched_pattrn_id,
					pricing_phase_id,
					matched_hash_key,
					stage,
					pricing_status_code,
					source_system_code,
					header_quals_exist_flag,
					grouping_no,
					eq_flag,
					validated_flag,
					MODIFIER_LEVEL_CODE,
					other_oprt_count,
					null_other_oprt_count,
					LIST_TYPE_CODE,
					ASK_FOR_FLAG,
					HEADER_LIMIT_EXISTS,
					LINE_LIMIT_EXISTS,
					BREAK_UOM_CODE,
				        BREAK_UOM_CONTEXT,
				        BREAK_UOM_ATTRIBUTE,
				        ORDER_CURRENCY,
				        CURRENCY_DETAIL_ID,
				        CURRENCY_HEADER_ID,
				        SELLING_ROUNDING_FACTOR,
				        BASE_CURRENCY_CODE,
					pricing_effective_date,
					price_break_type_code
					)
			    SELECT DISTINCT l_list_header_id_tbl(i),
					l_list_line_id_tbl(i),
					l_line_index_tbl(i),
					l_matched_pattrn_id_tbl(i),
					l_pricing_phase_id_tbl(i),
					l_matched_hash_key_tbl(i),
					l_stage_tbl(i),
					l_pricing_status_code_tbl(i),
					l_ssc(i),
					l_header_quals_exist_flag(i),
					l_grouping_no(i),
					l_eq_flag(i),
					l_validated_flag(i),
					l_modf_lvl_code(i),
					l_other_oprt_count(i),
					l_other_oprt_count(i),
					l_list_type_code(i),
					l_ask_for_flag(i),
					l_hdr_lmt_exists(i),
					l_line_lmt_exists(i),
			                l_brk_uom_code(i),
			                l_brk_uom_ctxt(i),
			                l_brk_uom_attr(i),
			                l_order_curr(i),
				        l_curr_det_id(i),
			                l_curr_hdr_id(i),
			                L_SELLNG_ROUND_FTR(i),
			                l_base_curr_code(i),
			                l_prcng_effctve_dt(i),
					l_PRICE_BREAK_TYPE_CODE(i)
				FROM dual;


             forall i IN 1 .. l_list_header_id_tbl.COUNT
             INSERT INTO qp_preq_patrn_qual_tmp(list_header_id,
					list_line_id,
					line_index,
					pricing_phase_id,
					stage,
					pricing_status_code,
					source_system_code,
					header_quals_exist_flag,
					grouping_no,
					eq_flag,
					validated_flag,
					MODIFIER_LEVEL_CODE,
					other_oprt_count,
					null_other_oprt_count,
					descendents_quals_exist
					)
			    SELECT DISTINCT l_list_header_id_tbl(i),
					-1, -- List line id,
					l_line_index_tbl(i),
					l_pricing_phase_id_tbl(i),
					l_stage_tbl(i),
					l_pricing_status_code_tbl(i),
					l_ssc(i),
					l_header_quals_exist_flag(i), -- Header Quals Exist,
					l_ag_grpng_no(i),
					l_ag_eq_flag(i),
					l_validated_flag(i),
					l_modf_lvl_code(i),
					l_ag_othr_oprt_cnt(i),
					l_null_other_oprt_count(i),
					l_descnt_quals_exist(i)
				FROM dual
				WHERE l_ag_eq_flag(i) = 'N'
				  OR l_descnt_quals_exist(i) = 'Y';

	l_loop_count := l_loop_count + 1;
    --exit when l_header_cache_cur%rowcount < l_limit;
  END LOOP;


  if G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN  /*vivek*/
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('cursor l_sec_list_cur_currency-multi-currency TRUE');
  END IF;

   CLOSE l_pat_cache_both_curr;

   qp_debug_util.tstop('PAT_LST_LIN_SRCH_1');
ELSE
 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('cursor l_sec_list_cur   multi-currency FALSE');
  END IF;

   CLOSE l_pat_cache_both;

   qp_debug_util.tstop('PAT_LST_LIN_SRCH_1');
END IF;

   qp_debug_util.tstart('Populate_Temp_Tables_NEQ_BTW_AFT_LIN',   'Populate_Temp_Tables_NEQ_BTW After Line Cache');
   Populate_Temp_Tables_NEQ_BTW(
			    p_pricing_phase_id ,
			    G_STAGE_CACHE_LST_HDR_LIN_SRCH,
			    x_status_code ,
			    x_status_text );
    IF x_status_code <> FND_API.G_RET_STS_SUCCESS THEN
	RAISE E_ROUTINE_ERRORS;
    END IF;


    qp_debug_util.tstop('Populate_Temp_Tables_NEQ_BTW_AFT_LIN');
    qp_debug_util.tstart('QP_EVALUATE_OTHER_OPERATORS_AFT_LIN',   'QP_EVALUATE_OTHER_OPERATORS After Line Cache');

	QP_EVALUATE_OTHER_OPERATORS(
			 p_pricing_phase_id ,
			  G_STAGE_CACHE_LST_HDR_LIN_SRCH,
			    x_status_code ,
			    x_status_text );

	IF x_status_code <> FND_API.G_RET_STS_SUCCESS THEN
		RAISE E_ROUTINE_ERRORS;
        END IF;

	qp_debug_util.tstop('QP_EVALUATE_OTHER_OPERATORS_AFT_LIN');



        -- Deleting modifiers line picked up because of TCA

       qp_debug_util.tstart('PATRN_LIST_CUR_DEL_LIN_TCA',   'Line deletion for TCA');

	UPDATE qp_preq_patrn_qual_tmp a
	SET pricing_status_code = G_DELETED_TCA
	WHERE pricing_status_code = g_status_unchanged
	 AND a.descendents_quals_exist = 'Y'
         and a.pricing_phase_id = p_pricing_phase_id
         and a.stage =  G_STAGE_CACHE_LST_HDR_LIN_SRCH
	 AND EXISTS (
	    SELECT 1
	    FROM qp_qualifiers b, qp_npreq_line_attrs_tmp c
	    WHERE b.list_header_id = a.list_header_id
	      AND b.list_line_id = a.list_line_id
              AND (b.qualifier_grouping_no = a.grouping_no
                   or
                   b.qualifier_grouping_no = -1
                  )
	      AND b.qualify_hier_descendents_flag = 'N'
	      AND c.segment_id = b.segment_id
	      AND c.line_index = a.line_index
	      AND c.derived_qualifier_flag = 'Y');

        qp_debug_util.tstop('PATRN_LIST_CUR_DEL_LIN_TCA');


       -- Deleting line if headers is not qualified in not=/Between evaluation
       -- header_quals_exist_flag will be Y only if Not=/Bet header level
       -- qualifiers are present for that line.
      qp_debug_util.tstart('PATRN_LIST_CUR_DEL_HDR',   'Line deletion');

    UPDATE qp_preq_patrn_qual_tmp a
    SET pricing_status_code = G_DELETED_LINE
      WHERE pricing_phase_id = p_pricing_phase_id
       AND pricing_status_code = g_status_unchanged
       AND list_line_id <> -1
       AND nvl(header_quals_exist_flag,   'N') = 'Y'
       AND a.stage =  G_STAGE_CACHE_LST_HDR_LIN_SRCH
       AND NOT EXISTS
       (SELECT /*+ index(b QP_PREQ_PATRN_QUAL_T_N2) */ 'x'
        FROM qp_preq_patrn_qual_tmp b
        WHERE b.list_header_id = a.list_header_id
	AND b.line_index = a.line_index
        AND b.list_line_id = -1
        AND b.pricing_phase_id = a.pricing_phase_id
        AND pricing_status_code = g_status_unchanged
	AND b.stage =  G_STAGE_CACHE_LST_HDR_LIN_SRCH);


        qp_debug_util.tstop('PATRN_LIST_CUR_DEL_HDR');

	qp_debug_util.tstart('PATRN_LIST_CUR_POPULATE_PAT_TEMP_TABLES',   'Populate_Pat_Temp_Tables');

	Populate_Pat_Temp_Tables(p_pricing_phase_id,
				G_STAGE_CACHE_LST_HDR_LIN_SRCH,
				x_status_code,
				x_status_text);


	IF x_status_code <> FND_API.G_RET_STS_SUCCESS THEN
		RAISE E_ROUTINE_ERRORS;
        END IF;

	qp_debug_util.tstop('PATRN_LIST_CUR_POPULATE_PAT_TEMP_TABLES');

	IF g_debug_engine = fnd_api.g_true THEN
		engine_debug('x_status_code-' || x_status_code);
		engine_debug('x_status_text-' || x_status_text);
	END IF;

IF l_loop_count <> 0 THEN

	QP_Resolve_Incompatability_PVT.Determine_Pricing_UOM_And_Qty
				(p_line_index        => NULL,
 				 p_order_uom_code    => NULL,
				 p_order_qty         => NULL,
				 p_pricing_phase_id  => G_PRICE_LIST_PHASE_ID,
                                 p_call_big_search   => FALSE,
				 x_list_line_id	 =>     l_list_line_id,
				 x_return_status     => l_return_status,
				 x_return_status_txt => l_status_text);

           IF(l_return_status = FND_API.G_RET_STS_ERROR) THEN
            RAISE E_ROUTINE_ERRORS;
           END IF;

            IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
            engine_debug('Incomp Return Status Non Validated QP_PREQ_GRP: ' || l_return_status);

            END IF;

            -- 3773652
            -- re-run Evaluate_Between after UOM conversion to check PLL really qualifies
            begin
              select 'x' into l_dummy
              from qp_npreq_lines_tmp
              where LINE_UOM_CODE <> nvl(PRICED_UOM_CODE, LINE_UOM_CODE)
              and (PRICE_FLAG = G_YES
                   or
                   PRICE_FLAG = G_PHASE and p_freeze_override_flag = G_YES)
              and rownum = 1;

              Evaluate_Between(p_pricing_phase_id,NULL,NULL,l_return_status,l_status_text);
            exception
              when no_data_found then
                null;
            end;


           Update_Request_Line_Status(p_control_rec,'SUCCESS',p_freeze_override_flag,l_return_status,l_status_text);  --[julin/4708044]

            IF(l_return_status = FND_API.G_RET_STS_ERROR) THEN
             RAISE E_ROUTINE_ERRORS;
            END IF;

         --bug# 2091386 not reflecting the right price on change on UOM on the order line . Since
         --QP_Resolve_Incompatability_PVT.Determine_Pricing_UOM_And_Qty determines the pricing_qty
         --which is needed later in Get_Eligible_Price_Break we need to call Get_Eligible_Price_Break
         --after QP_Resolve_Incompatability_PVT.Determine_Pricing_UOM_And_Qty.
         --By doing this we will get the right price in the PRICE event on change of UOM on the order line
         --for price based on price break

         Get_Eligible_Price_Break(p_pricing_phase_id,NULL,l_return_status,l_status_text);
         IF(l_return_status = FND_API.G_RET_STS_ERROR) THEN
          RAISE E_ROUTINE_ERRORS;
         END IF;
ELSE

  -- Update the request line status for lines which got valid price list
	   Update_Request_Line_Status(p_control_rec,'FAILURE',p_freeze_override_flag,x_status_code,x_status_text);  --[juiln/4708044]
	   IF(x_status_code = FND_API.G_RET_STS_ERROR) THEN
	    RAISE E_ROUTINE_ERRORS;
	   END IF;
END IF;

qp_debug_util.tstop('LIST_HEADER_PATTERN_SEARCH');

EXCEPTION
 WHEN E_ROUTINE_ERRORS THEN

    qp_debug_util.tstop('LIST_HEADER_PATTERN_SEARCH');

     x_status_code := FND_API.G_RET_STS_ERROR;
     x_status_text := 'Expected Error in ' || l_routine || sqlerrm;

     IF g_debug_engine = fnd_api.g_true THEN
	engine_debug(x_status_text);
     END IF;

     IF G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN

        IF l_pat_cache_both_curr%ISOPEN THEN
           CLOSE l_pat_cache_both_curr;
        END if;

     ELSE

        IF l_pat_cache_both%ISOPEN THEN
           CLOSE l_pat_cache_both_curr;
        END if;

     END IF;

WHEN OTHERS THEN
    qp_debug_util.tstop('LIST_HEADER_PATTERN_SEARCH');

     IF G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN

        IF l_pat_cache_both_curr%ISOPEN THEN
           CLOSE l_pat_cache_both_curr;
        END if;

     ELSE

        IF l_pat_cache_both%ISOPEN THEN
           CLOSE l_pat_cache_both_curr;
        END if;

     END IF;

    IF g_debug_engine = fnd_api.g_true THEN
	engine_debug(l_routine || ' ' || sqlerrm);
    END IF;

x_status_code := fnd_api.g_ret_sts_error;
x_status_text := 'Error in ' || l_routine || sqlerrm;

END LIST_HEADER_PATTERN_SEARCH;

--skattama

/*+--------------------------------------------------------
  | PROCEDURE QUALIFIER_GROUPING
  +--------------------------------------------------------
*/
PROCEDURE Perform_Qualifier_Grouping(p_line_index_based_flag VARCHAR2,
                                     p_pricing_phase_id NUMBER,
                                     x_status_code OUT NOCOPY VARCHAR2,
                                     x_status_text OUT NOCOPY VARCHAR2) AS

/*
INDX,QP_PREQ_GRP.perform_qualifier_grouping.header_level_qual_attrs_cur,QP_PREQ_QUAL_TMP_N1,LIST_LINE_ID,1
INDX,QP_PREQ_GRP.perform_qualifier_grouping.header_level_qual_attrs_cur,QP_PREQ_QUAL_TMP_N1,PRICING_STATUS_CODE,2
*/
CURSOR header_level_qual_attrs_cur IS
SELECT a.LIST_HEADER_ID,
       a.QUALIFIER_GROUPING_NO,
       a.QUALIFIER_GROUP_CNT,
       a.UNIQUE_KEY,
       COUNT(distinct qualifier_attribute_context || qualifier_attribute || setup_value_from ) NO_OF_QUALIFIERS_IN_GRP, --bug 8359587
       --COUNT(qualifier_attribute_context || qualifier_attribute || setup_value_from ) NO_OF_QUALIFIERS_IN_GRP, --[julin/3527596,4274099]
       1  --7038849
FROM   QP_PREQ_QUAL_TMP a
WHERE  a.LIST_LINE_ID = -1
AND    a.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
AND    a.PRICING_PHASE_ID = p_pricing_phase_id
AND    a.QUALIFIER_GROUPING_NO = -1  --7038849
GROUP  BY a.LIST_HEADER_ID, a.QUALIFIER_GROUPING_NO,a.QUALIFIER_GROUP_CNT,a.UNIQUE_KEY
UNION ALL -- 7038849
SELECT a.LIST_HEADER_ID,
       a.QUALIFIER_GROUPING_NO,
       a.QUALIFIER_GROUP_CNT,
       a.UNIQUE_KEY,
       COUNT(distinct qualifier_attribute_context || qualifier_attribute || setup_value_from ) NO_OF_QUALIFIERS_IN_GRP, --bug 8359587
       -- COUNT(qualifier_attribute_context || qualifier_attribute || setup_value_from ) NO_OF_QUALIFIERS_IN_GRP, --[julin/3527596,4274099]
       2  --7038849
FROM   QP_PREQ_QUAL_TMP a
WHERE  a.LIST_LINE_ID = -1
AND    a.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
AND    a.PRICING_PHASE_ID = p_pricing_phase_id
AND    a.QUALIFIER_GROUPING_NO <> -1  --7038849
GROUP  BY a.LIST_HEADER_ID, a.QUALIFIER_GROUPING_NO,a.QUALIFIER_GROUP_CNT,a.UNIQUE_KEY
ORDER  BY 1,6; --7038849

/*
INDX,QP_PREQ_GRP.perform_qualifier_grouping.hdr_lvl_qual_attrs_req_line,QP_PREQ_QUAL_TMP_N1,LIST_LINE_ID,1
INDX,QP_PREQ_GRP.perform_qualifier_grouping.hdr_lvl_qual_attrs_req_line,QP_PREQ_QUAL_TMP_N1,PRICING_STATUS_CODE,2
INDX,QP_PREQ_GRP.perform_qualifier_grouping.hdr_lvl_qual_attrs_req_line,QP_PREQ_QUAL_TMP_N1,LINE_INDEX,3
*/
CURSOR hdr_lvl_qual_attrs_req_line IS
SELECT a.LINE_INDEX,
       a.LIST_HEADER_ID,
       a.QUALIFIER_GROUPING_NO,
       a.QUALIFIER_GROUP_CNT,
       a.UNIQUE_KEY,
        COUNT(distinct qualifier_attribute_context || qualifier_attribute || setup_value_from ) NO_OF_QUALIFIERS_IN_GRP, --bug 8359587
       --COUNT(qualifier_attribute_context || qualifier_attribute || setup_value_from ) NO_OF_QUALIFIERS_IN_GRP, --[julin/3527596,4274099]
       1 -- 7038849
FROM   QP_PREQ_QUAL_TMP a
WHERE  a.LIST_LINE_ID = -1
AND    a.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
AND    a.PRICING_PHASE_ID = p_pricing_phase_id
--AND    a.LINE_INDEX > 0
AND    a.QUALIFIER_GROUPING_NO = -1 --7038849
GROUP  BY a.LINE_INDEX , a.LIST_HEADER_ID, a.QUALIFIER_GROUPING_NO,a.QUALIFIER_GROUP_CNT,a.UNIQUE_KEY
UNION ALL   --7038849
SELECT a.LINE_INDEX,
       a.LIST_HEADER_ID,
       a.QUALIFIER_GROUPING_NO,
       a.QUALIFIER_GROUP_CNT,
       a.UNIQUE_KEY,
       COUNT(distinct qualifier_attribute_context || qualifier_attribute || setup_value_from ) NO_OF_QUALIFIERS_IN_GRP, --bug 8359587
       --COUNT(qualifier_attribute_context || qualifier_attribute || setup_value_from ) NO_OF_QUALIFIERS_IN_GRP, --[julin/3527596,4274099]
       2 -- 7038849
FROM   QP_PREQ_QUAL_TMP a
WHERE  a.LIST_LINE_ID = -1
AND    a.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
AND    a.PRICING_PHASE_ID = p_pricing_phase_id
--AND    a.LINE_INDEX > 0
AND    a.QUALIFIER_GROUPING_NO <> -1 --7038849
GROUP  BY a.LINE_INDEX , a.LIST_HEADER_ID, a.QUALIFIER_GROUPING_NO,a.QUALIFIER_GROUP_CNT,a.UNIQUE_KEY
ORDER  BY 1,2,7;  --7038849

/*
INDX,QP_PREQ_GRP.perform_qualifier_grouping.line_level_qual_attrs_cur,QP_PREQ_QUAL_TMP_N5,PRICING_STATUS_CODE,1
INDX,QP_PREQ_GRP.perform_qualifier_grouping.line_level_qual_attrs_cur,QP_PREQ_QUAL_TMP_N5,LIST_LINE_ID,4
*/
CURSOR line_level_qual_attrs_cur IS
SELECT a.LIST_HEADER_ID,
       a.LIST_LINE_ID,
       a.QUALIFIER_GROUPING_NO,
       a.QUALIFIER_GROUP_CNT,
       a.HEADER_QUALS_EXIST_FLAG,
       a.UNIQUE_KEY,
       COUNT(distinct qualifier_attribute_context || qualifier_attribute || setup_value_from ) NO_OF_QUALIFIERS_IN_GRP, --bug 8359587
       --COUNT(qualifier_attribute_context || qualifier_attribute || setup_value_from ) NO_OF_QUALIFIERS_IN_GRP, --[julin/3527596,4274099]
       1  --7038849
FROM   QP_PREQ_QUAL_TMP a
WHERE  a.LIST_LINE_ID  > 0
AND    a.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
AND    a.PRICING_PHASE_ID = p_pricing_phase_id
AND    a.QUALIFIER_GROUPING_NO = -1  --7038849
GROUP  BY a.LIST_HEADER_ID , a.LIST_LINE_ID,a.QUALIFIER_GROUPING_NO,a.QUALIFIER_GROUP_CNT,a.HEADER_QUALS_EXIST_FLAG,
		a.UNIQUE_KEY
UNION ALL   -- 7038849
SELECT a.LIST_HEADER_ID,
       a.LIST_LINE_ID,
       a.QUALIFIER_GROUPING_NO,
       a.QUALIFIER_GROUP_CNT,
       a.HEADER_QUALS_EXIST_FLAG,
       a.UNIQUE_KEY,
        COUNT(distinct qualifier_attribute_context || qualifier_attribute || setup_value_from ) NO_OF_QUALIFIERS_IN_GRP, --bug 8359587
       --COUNT(qualifier_attribute_context || qualifier_attribute || setup_value_from ) NO_OF_QUALIFIERS_IN_GRP, --[julin/3527596,4274099]
       2  --7038849
FROM   QP_PREQ_QUAL_TMP a
WHERE  a.LIST_LINE_ID  > 0
AND    a.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
AND    a.PRICING_PHASE_ID = p_pricing_phase_id
AND    a.QUALIFIER_GROUPING_NO <> -1  --7038849
GROUP  BY a.LIST_HEADER_ID , a.LIST_LINE_ID,a.QUALIFIER_GROUPING_NO,a.QUALIFIER_GROUP_CNT,a.HEADER_QUALS_EXIST_FLAG,
		a.UNIQUE_KEY
ORDER  BY 1,2,8;  --7038849

/*
INDX,QP_PREQ_GRP.perform_qualifier_grouping.line_lvl_qual_attrs_req_line,QP_PREQ_QUAL_TMP_N1,LIST_LINE_ID,1
INDX,QP_PREQ_GRP.perform_qualifier_grouping.line_lvl_qual_attrs_req_line,QP_PREQ_QUAL_TMP_N1,PRICING_STATUS_CODE,2
INDX,QP_PREQ_GRP.perform_qualifier_grouping.line_lvl_qual_attrs_req_line,QP_PREQ_QUAL_TMP_N1,LINE_INDEX,3
*/
CURSOR line_lvl_qual_attrs_req_line IS
SELECT /*+ INDEX (a QP_PREQ_QUAL_TMP_N1) */ a.LINE_INDEX,
       a.LIST_HEADER_ID,
       a.LIST_LINE_ID,
       a.QUALIFIER_GROUPING_NO,
       a.QUALIFIER_GROUP_CNT,
       a.HEADER_QUALS_EXIST_FLAG,
       a.UNIQUE_KEY,
       COUNT(distinct qualifier_attribute_context || qualifier_attribute || setup_value_from ) NO_OF_QUALIFIERS_IN_GRP, --bug 8359587
       --COUNT(qualifier_attribute_context || qualifier_attribute || setup_value_from ) NO_OF_QUALIFIERS_IN_GRP, --[julin/3527596,4274099]
       1
FROM   QP_PREQ_QUAL_TMP a
WHERE  LIST_LINE_ID  > 0
AND    a.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
--AND    a.LINE_INDEX > 0
AND    a.PRICING_PHASE_ID = p_pricing_phase_id
AND    a.QUALIFIER_GROUPING_NO = -1  --7038849
GROUP  BY a.LINE_INDEX, a.LIST_HEADER_ID , a.LIST_LINE_ID,a.QUALIFIER_GROUPING_NO,
		a.QUALIFIER_GROUP_CNT,a.HEADER_QUALS_EXIST_FLAG,a.UNIQUE_KEY
UNION ALL  --7038849
SELECT /*+ INDEX (a QP_PREQ_QUAL_TMP_N1) */ a.LINE_INDEX,
       a.LIST_HEADER_ID,
       a.LIST_LINE_ID,
       a.QUALIFIER_GROUPING_NO,
       a.QUALIFIER_GROUP_CNT,
       a.HEADER_QUALS_EXIST_FLAG,
       a.UNIQUE_KEY,
       COUNT(distinct qualifier_attribute_context || qualifier_attribute || setup_value_from ) NO_OF_QUALIFIERS_IN_GRP, --bug 8359587
       --COUNT(qualifier_attribute_context || qualifier_attribute || setup_value_from ) NO_OF_QUALIFIERS_IN_GRP, --[julin/3527596,4274099]
       2
FROM   QP_PREQ_QUAL_TMP a
WHERE  LIST_LINE_ID  > 0
AND    a.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
--AND    a.LINE_INDEX > 0
AND    a.PRICING_PHASE_ID = p_pricing_phase_id
AND    a.QUALIFIER_GROUPING_NO <> -1  --7038849
GROUP  BY a.LINE_INDEX, a.LIST_HEADER_ID , a.LIST_LINE_ID,a.QUALIFIER_GROUPING_NO,
		a.QUALIFIER_GROUP_CNT,a.HEADER_QUALS_EXIST_FLAG,a.UNIQUE_KEY
ORDER  BY 1,2,3,9;  --7038849

/*
INDX,QP_PREQ_GRP.perform_qualifier_grouping.check_hdr_quals_cur,QP_PREQ_QUAL_TMP_N1,LIST_LINE_ID,1
INDX,QP_PREQ_GRP.perform_qualifier_grouping.check_hdr_quals_cur,QP_PREQ_QUAL_TMP_N1,PRICING_STATUS_CODE,2
*/
CURSOR check_hdr_quals_cur(p_list_header_id NUMBER)  IS
SELECT LIST_HEADER_ID
FROM   QP_PREQ_QUAL_TMP
WHERE  LIST_HEADER_ID = p_list_header_id
AND    LIST_LINE_ID = -1
AND    PRICING_STATUS_CODE = G_STATUS_UNCHANGED
AND    PRICING_PHASE_ID = p_pricing_phase_id
AND    ROWNUM = 1;

/*
INDX,QP_PREQ_GRP.perform_qualifier_grouping.check_hdr_quals_cur_req_line,QP_PREQ_QUAL_TMP_N1,LIST_LINE_ID,1
INDX,QP_PREQ_GRP.perform_qualifier_grouping.check_hdr_quals_cur_req_line,QP_PREQ_QUAL_TMP_N1,PRICING_STATUS_CODE,2
INDX,QP_PREQ_GRP.perform_qualifier_grouping.check_hdr_quals_cur_req_line,QP_PREQ_QUAL_TMP_N1,LINE_INDEX,3
*/
CURSOR check_hdr_quals_cur_req_line(p_list_header_id NUMBER,
                                    p_line_index NUMBER)  IS
SELECT LIST_HEADER_ID
FROM   QP_PREQ_QUAL_TMP
WHERE  LIST_HEADER_ID = p_list_header_id
AND    LINE_INDEX = p_line_index
AND    LIST_LINE_ID = -1
AND    PRICING_STATUS_CODE = G_STATUS_UNCHANGED
AND    PRICING_PHASE_ID = p_pricing_phase_id
AND    ROWNUM = 1;


/*
INDX,QP_PREQ_GRP.perform_qualifier_grouping.chk_other_hdr_quals_exist_cur,QP_QUALIFIERS_N1,LIST_HEADER_ID,1
INDX,QP_PREQ_GRP.perform_qualifier_grouping.chk_other_hdr_quals_exist_cur,QP_QUALIFIERS_N1,LIST_LINE_ID,2
INDX,QP_PREQ_GRP.perform_qualifier_grouping.chk_other_hdr_quals_exist_cur,QP_QUALIFIERS_N1,QUALIFIER_GROUPING_NO,3
*/
CURSOR chk_other_hdr_quals_exist_cur(p_list_header_id NUMBER) IS
SELECT LIST_HEADER_ID
FROM   QP_QUALIFIERS
WHERE  LIST_HEADER_ID = p_list_header_id
AND    LIST_LINE_ID = -1
AND    QUALIFIER_GROUPING_NO <> -1;

/*
INDX,QP_PREQ_GRP.perform_qualifier_grouping.chk_other_line_quals_exist_cur,QP_QUALIFIERS_N1,LIST_LINE_ID,2
INDX,QP_PREQ_GRP.perform_qualifier_grouping.chk_other_line_quals_exist_cur,QP_QUALIFIERS_N1,QUALIFIER_GROUPING_NO,3
*/
CURSOR chk_other_line_quals_exist_cur(p_list_line_id NUMBER) IS
SELECT LIST_LINE_ID
FROM   QP_QUALIFIERS
WHERE  LIST_LINE_ID = p_list_line_id
AND    QUALIFIER_GROUPING_NO <> -1;


l_hdr_del_tbl                VARCHAR_TYPE;
l_hdr_success_tbl            NUMBER_TYPE;
l_line_del_tbl               VARCHAR_TYPE;
l_line_success_tbl           NUMBER_TYPE;
l_hdr_del_ind                BINARY_INTEGER:=0;
l_hdr_success_ind            BINARY_INTEGER:=0;
l_line_del_ind               BINARY_INTEGER:=0;
l_line_success_ind           BINARY_INTEGER:=0;
v_list_header_id             NUMBER;
v_header_null_grp_count      NUMBER := 0;
v_line_null_grp_count        NUMBER := 0;
l_line_level_quals_satisfied BOOLEAN := FALSE;
l_other_list_header_id       NUMBER;
l_other_list_line_id       NUMBER;
l_list_header_id             NUMBER := -9999;
l_list_line_id               NUMBER := -9999;
l_line_index                 NUMBER := -9999;
l_other_grp_exists_flag      BOOLEAN := FALSE;
l_other_grp_satisfied_flag   BOOLEAN := FALSE;
l_null_unique_key            VARCHAR2(2000);

BEGIN

x_status_code := FND_API.G_RET_STS_SUCCESS;

IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
engine_debug('Qualifier Grouping begin');

END IF;
IF (p_line_index_based_flag = G_NO) THEN

  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('#QG1 Phase');

  END IF;
  FOR i IN header_level_qual_attrs_cur LOOP

   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('Header Qualifier Grouping No: ' || i.QUALIFIER_GROUPING_NO);
   engine_debug('Passed Hdr Quals : '||i.no_of_qualifiers_in_grp||'Hdr id : '||i.list_header_id);
   engine_debug('Header Null Group Count : ' || v_header_null_grp_count);

   END IF;
   IF (i.LIST_HEADER_ID <> l_list_header_id ) THEN

    v_header_null_grp_count := 0;
    -- This code is to delete the -1 group if none of the other groups are satisfied on change of list header
    IF (l_other_grp_exists_flag = TRUE) THEN
     IF (l_other_grp_satisfied_flag = FALSE) THEN
      IF (l_null_unique_key IS NOT NULL) THEN
       l_hdr_del_ind := l_hdr_del_ind + 1;
       l_hdr_del_tbl(l_hdr_del_ind) := l_null_unique_key;
      END IF;
     END IF;
    END IF;
    l_other_grp_exists_flag := FALSE;
    l_other_grp_satisfied_flag := FALSE;
   END IF;

   IF (i.QUALIFIER_GROUPING_NO = -1) THEN
    l_null_unique_key := i.unique_key;
    IF (i.NO_OF_QUALIFIERS_IN_GRP  < i.QUALIFIER_GROUP_CNT) THEN -- 4043768/4261138
     l_other_list_header_id:=NULL;
     OPEN chk_other_hdr_quals_exist_cur(i.list_header_id);
     FETCH chk_other_hdr_quals_exist_cur INTO l_other_list_header_id;
     CLOSE chk_other_hdr_quals_exist_cur;

     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('Other Groups Exist in this Hdr id : '||l_other_list_header_id);

     END IF;
     -- If there are no other groups , then it is a failure on pure null group,else it is not
     IF (l_other_list_header_id IS NULL)  THEN
      l_other_grp_exists_flag := FALSE;
      l_null_unique_key := NULL;
      l_hdr_del_ind := l_hdr_del_ind + 1;
      l_hdr_del_tbl(l_hdr_del_ind) := i.unique_key;
      IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
      engine_debug('Deleted Hdr id : '||i.list_header_id||' Unique Key : ' || i.unique_key);
      END IF;
     ELSE
      --l_null_unique_key := i.unique_key;
      l_other_grp_exists_flag := TRUE;
     END IF;
        /* Added for 3259922 */
    ELSE
     l_other_list_header_id:=NULL;
     OPEN chk_other_hdr_quals_exist_cur(i.list_header_id);
     FETCH chk_other_hdr_quals_exist_cur INTO l_other_list_header_id;
     CLOSE chk_other_hdr_quals_exist_cur;

     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                engine_debug('Other Groups Exist in this Hdr id : '||l_other_list_header_id);
     END IF;

     IF (l_other_list_header_id IS NOT NULL)  THEN
     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                engine_debug('Other groups exist');
     END IF; -- 4033618
                l_other_grp_exists_flag := TRUE;
     END IF; -- end 3259922
    END IF;

    v_header_null_grp_count := i.NO_OF_QUALIFIERS_IN_GRP;

    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('Header Null Group Count : ' || v_header_null_grp_count);

    END IF;
   ELSE

    -- 4043768/4261138, changed <> to < condition
    IF (i.NO_OF_QUALIFIERS_IN_GRP + v_header_null_grp_count < i.QUALIFIER_GROUP_CNT) THEN
     --l_other_grp_satisfied_flag := FALSE; do not make it false if it is already TRUE because some grp is satisfied
     l_hdr_del_ind := l_hdr_del_ind + 1;
     l_hdr_del_tbl(l_hdr_del_ind) := i.unique_key;
     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('Deleted Hdr id : '||i.list_header_id|| ' Unique Key : ' || i.unique_key);
     END IF;
    ELSE
     l_other_grp_satisfied_flag := TRUE;
    END IF;

   END IF;

   l_list_header_id := i.LIST_HEADER_ID;

  END LOOP;

  -- This code is to delete the -1 group if none of the other groups are satisfied for the last list header
  IF (l_other_grp_exists_flag = TRUE) THEN
       IF (l_other_grp_satisfied_flag = FALSE) THEN
         IF (l_null_unique_key IS NOT NULL) THEN
          l_hdr_del_ind := l_hdr_del_ind + 1;
          l_hdr_del_tbl(l_hdr_del_ind) := l_null_unique_key;
         END IF;
       END IF;
   END IF;

  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('#QG2');

  END IF;
  IF (l_hdr_del_tbl.count > 0) THEN
   FOR m in 1 .. l_hdr_del_tbl.count LOOP
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('Deleted Headers : ' || l_hdr_del_tbl(m));
    END IF;
   END LOOP;
  END IF;

  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('#QG3');

  END IF;
  IF (l_hdr_del_tbl.count > 0) THEN
   FORALL i in l_hdr_del_tbl.FIRST..l_hdr_del_tbl.LAST
/*
INDX,QP_PREQ_GRP.perform_qualifier_grouping.upd1,QP_PREQ_QUAL_TMP_N3,PRICING_STATUS_CODE,1
INDX,QP_PREQ_GRP.perform_qualifier_grouping.upd1,QP_PREQ_QUAL_TMP_N3,UNIQUE_KEY,2
*/
    UPDATE QP_PREQ_QUAL_TMP --upd1
    SET   PRICING_STATUS_CODE = G_DELETED_GRP
    WHERE UNIQUE_KEY = l_hdr_del_tbl(i)
    AND   PRICING_STATUS_CODE = G_STATUS_UNCHANGED
    AND   PRICING_PHASE_ID = p_pricing_phase_id;
  END IF;

  l_hdr_del_tbl.delete;
  l_hdr_del_ind:=0;

  l_other_grp_exists_flag := FALSE;
  l_other_grp_satisfied_flag := FALSE;

  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('#QG4');

  END IF;
  FOR j IN line_level_qual_attrs_cur LOOP

   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('Line Qualifier Grouping No: ' || j.QUALIFIER_GROUPING_NO || ' List Header Id : ' || j.list_header_id);
   engine_debug('Passed Line Quals : ' || j.no_of_qualifiers_in_grp || 'List Line id : ' || j.list_line_id);
   engine_debug('Line Null Group Count : ' || v_line_null_grp_count);

   END IF;
   IF (j.LIST_HEADER_ID <> l_list_header_id or j.LIST_LINE_ID <> l_list_line_id) THEN

    v_line_null_grp_count := 0;

    -- This code is to delete the -1 group if none of the other groups are satisfied on change of list header or list line
    IF (l_other_grp_exists_flag = TRUE) THEN
     IF (l_other_grp_satisfied_flag = FALSE) THEN
      IF (l_null_unique_key IS NOT NULL) THEN
       l_line_del_ind := l_line_del_ind + 1;
       l_line_del_tbl(l_line_del_ind) := l_null_unique_key;
      END IF;
     END IF;
    END IF;
    l_other_grp_exists_flag := FALSE;
    l_other_grp_satisfied_flag := FALSE;
   END IF;

   IF (j.QUALIFIER_GROUPING_NO = -1) THEN
    l_null_unique_key := j.unique_key;
    IF (j.NO_OF_QUALIFIERS_IN_GRP < j.QUALIFIER_GROUP_CNT) THEN -- 4043768/4261138

     OPEN chk_other_line_quals_exist_cur(j.list_line_id);
     FETCH chk_other_line_quals_exist_cur INTO l_other_list_line_id;
     CLOSE chk_other_line_quals_exist_cur;

     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('Other Groups Exist in this Line id : '||l_other_list_line_id);

     END IF;
     -- If there are no other groups , then it is a failure on pure null group,else it is not
     IF (l_other_list_line_id IS NULL) THEN
      l_other_grp_exists_flag := FALSE;
      l_null_unique_key := NULL;
      l_line_del_ind := l_line_del_ind + 1;
      l_line_del_tbl(l_line_del_ind) := j.unique_key;
      IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
      engine_debug('Deleted Line id : '||j.list_line_id|| ' Unique Key : ' || j.unique_key);
      END IF;
     ELSE
      l_other_grp_exists_flag := TRUE;
     END IF;
    ELSE
     l_line_level_quals_satisfied := TRUE;
     --l_null_unique_key := j.unique_key;
    END IF;

     v_line_null_grp_count := j.NO_OF_QUALIFIERS_IN_GRP;
     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('Line Null Group Count : ' || v_line_null_grp_count);

     END IF;
   ELSE

    -- 4043768/4261138, changed <> to < condition
    IF (j.NO_OF_QUALIFIERS_IN_GRP + v_line_null_grp_count < j.QUALIFIER_GROUP_CNT) THEN
     --l_other_grp_satisfied_flag := FALSE;
     l_line_del_ind := l_line_del_ind + 1;
     l_line_del_tbl(l_line_del_ind) := j.unique_key;
     --l_line_del_tbl(l_line_del_ind) := j.list_line_id;
     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('Deleted Line id : '||j.list_line_id|| ' Unique Key : ' || j.unique_key);
     END IF;
    ELSE
     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('Line Quals for : ' || j.list_header_id || ' ' || j.list_line_id );
     END IF;
     l_line_level_quals_satisfied := TRUE;
     l_other_grp_satisfied_flag := TRUE;
    END IF;

   END IF;

  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('#QG5');

  END IF;
   -- Check if header level quals are satisfied.If there is a hdr lvl qualifier in setup and it is not selected
   IF (l_line_level_quals_satisfied = TRUE) THEN

    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('Line Level Quals Satisfied , but checking whether header level qual satisfied');

    END IF;
    IF (j.HEADER_QUALS_EXIST_FLAG = G_YES) THEN
      IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
      engine_debug('Header level quals exist' );
      END IF;
      v_list_header_id := NULL;

      OPEN check_hdr_quals_cur(j.LIST_HEADER_ID);
      FETCH check_hdr_quals_cur INTO v_list_header_id;
      CLOSE check_hdr_quals_cur;

      IF (v_list_header_id IS NULL) THEN
       IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
       engine_debug('Line Level Quals Not Satisfied , as Header Id is : ' || nvl(v_list_header_id,-99999));
       END IF;
       l_line_del_ind := l_line_del_ind + 1;
       l_line_del_tbl(l_line_del_ind) := j.unique_key;
       IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
       engine_debug('Deleted Line id : '||j.list_line_id|| ' Unique Key : ' || j.unique_key);
       END IF;
      ELSE
       IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
       engine_debug('Line Level Quals Satisfied , Header Id : ' || nvl(v_list_header_id,-99999));
       END IF;
      END IF;
    ELSE
      IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
      engine_debug('Header level quals do not exist' );
      END IF;
    END IF;

   END IF;

   l_line_level_quals_satisfied := FALSE;
   l_list_header_id := j.LIST_HEADER_ID;
   l_list_line_id := j.LIST_LINE_ID;

  END LOOP;

  -- This code is to delete the -1 group if none of the other groups are satisfied on last list header or list line
  IF (l_other_grp_exists_flag = TRUE) THEN
     IF (l_other_grp_satisfied_flag = FALSE) THEN
      IF (l_null_unique_key IS NOT NULL) THEN
       l_line_del_ind := l_line_del_ind + 1;
       l_line_del_tbl(l_line_del_ind) := l_null_unique_key;
      END IF;
     END IF;
  END IF;

  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('#QG6');

  END IF;
  IF (l_line_del_tbl.count > 0 ) THEN
   FOR m in 1 .. l_line_del_tbl.count LOOP
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('Deleted Lines : ' || l_line_del_tbl(m));
   END IF;
   END LOOP;
  END IF;

  IF (l_line_del_tbl.count > 0 ) THEN
   FORALL i in l_line_del_tbl.FIRST..l_line_del_tbl.LAST
/*
INDX,QP_PREQ_GRP.perform_qualifier_grouping.perform_qualifier_grouping_upd2,QP_PREQ_QUAL_TMP_N3,PRICING_STATUS_CODE,1
INDX,QP_PREQ_GRP.perform_qualifier_grouping.perform_qualifier_grouping_upd2,QP_PREQ_QUAL_TMP_N3,UNIQUE_KEY,2
*/
    UPDATE QP_PREQ_QUAL_TMP --upd2
    SET   PRICING_STATUS_CODE = G_DELETED_GRP
    WHERE UNIQUE_KEY  = l_line_del_tbl(i)
    AND   PRICING_STATUS_CODE = G_STATUS_UNCHANGED
    AND   PRICING_PHASE_ID = p_pricing_phase_id;
  END IF;

  l_line_del_tbl.delete;
  l_line_del_ind:=0;

ELSIF (p_line_index_based_flag = G_YES) THEN

  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('#QG1');

  END IF;
  FOR i IN hdr_lvl_qual_attrs_req_line LOOP

   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('Header Qualifier Grouping No: ' || i.QUALIFIER_GROUPING_NO);
   engine_debug('Passed Hdr Quals : '||i.no_of_qualifiers_in_grp||'Hdr id : '||i.list_header_id||' Line Indx: '||i.line_index);
   engine_debug('Header Null Group Count : ' || v_header_null_grp_count);

   END IF;

   --[julin/4227338,4261116] IF (i.LIST_HEADER_ID <> l_list_header_id or i.LINE_INDEX <> l_line_index) THEN
   IF (i.LIST_HEADER_ID <> l_list_header_id or nvl(i.LINE_INDEX, -88888) <> nvl(l_line_index,-88888)) THEN

    v_header_null_grp_count := 0;

    -- This code is to delete the -1 group if none of the other groups are satisfied on change of list header or line index
    IF (l_other_grp_exists_flag = TRUE) THEN
     IF (l_other_grp_satisfied_flag = FALSE) THEN
      IF (l_null_unique_key IS NOT NULL) THEN
       l_hdr_del_ind := l_hdr_del_ind + 1;
       l_hdr_del_tbl(l_hdr_del_ind) := l_null_unique_key;
      END IF;
     END IF;
    END IF;
    l_other_grp_exists_flag := FALSE;
    l_other_grp_satisfied_flag := FALSE;
   END IF;

   IF (i.QUALIFIER_GROUPING_NO = -1) THEN
    l_null_unique_key := i.unique_key;    --added for bug number 3273669
    IF (i.NO_OF_QUALIFIERS_IN_GRP < i.QUALIFIER_GROUP_CNT) THEN -- 4043768/4261138
     l_other_list_header_id:=NULL;
     OPEN chk_other_hdr_quals_exist_cur(i.list_header_id);
     FETCH chk_other_hdr_quals_exist_cur INTO l_other_list_header_id;
     CLOSE chk_other_hdr_quals_exist_cur;

     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('Other Groups Exist in this Hdr id : '||l_other_list_header_id);

     END IF;
     -- If there are no other groups , then it is a failure on pure null group,else it is not
     IF (l_other_list_header_id IS NULL)  THEN
      l_other_grp_exists_flag := FALSE;
      l_null_unique_key := NULL;
      l_hdr_del_ind := l_hdr_del_ind + 1;
      l_hdr_del_tbl(l_hdr_del_ind) := i.unique_key;
      IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
      engine_debug('Deleted Hdr id : '||i.list_header_id||' Line Indx: '||i.line_index || ' Unique Key : ' || i.unique_key);
      END IF;
     ELSE
      l_null_unique_key := i.unique_key;
      l_other_grp_exists_flag := TRUE;
     END IF;
       /* Added for 3273669 */
    ELSE
     l_other_list_header_id:=NULL;
     OPEN chk_other_hdr_quals_exist_cur(i.list_header_id);
     FETCH chk_other_hdr_quals_exist_cur INTO l_other_list_header_id;
     CLOSE chk_other_hdr_quals_exist_cur;

     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                engine_debug('Other Groups Exist in this Hdr id : '||l_other_list_header_id);
     END IF;

     IF (l_other_list_header_id IS NOT NULL)  THEN
     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                engine_debug('Other groups exist');
     END IF; -- 4033618
                l_other_grp_exists_flag := TRUE;
     END IF; -- end 3273669

    END IF;

    v_header_null_grp_count := i.NO_OF_QUALIFIERS_IN_GRP;

    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('Header Null Group Count : ' || v_header_null_grp_count);

    END IF;
   ELSE
    -- 4043768/4261138, changed <> to < condition
    IF (i.NO_OF_QUALIFIERS_IN_GRP + v_header_null_grp_count < i.QUALIFIER_GROUP_CNT) THEN
     --l_other_grp_satisfied_flag := FALSE;
     l_hdr_del_ind := l_hdr_del_ind + 1;
     l_hdr_del_tbl(l_hdr_del_ind) := i.unique_key;
     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('Deleted Hdr id : '||i.list_header_id||' Line Indx: '||i.line_index || ' Unique Key : ' || i.unique_key);
     END IF;
    ELSE
     l_other_grp_satisfied_flag := TRUE;
    END IF;

   END IF;

   l_list_header_id := i.LIST_HEADER_ID;
   l_line_index := i.LINE_INDEX;

  END LOOP;

  -- This code is to delete the -1 group if none of the other groups are satisfied on last list header or line index
  IF (l_other_grp_exists_flag = TRUE) THEN
   IF (l_other_grp_satisfied_flag = FALSE) THEN
      IF (l_null_unique_key IS NOT NULL) THEN
       l_hdr_del_ind := l_hdr_del_ind + 1;
       l_hdr_del_tbl(l_hdr_del_ind) := l_null_unique_key;
      END IF;
   END IF;
  END IF;

  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('#QG2');

  END IF;
  IF (l_hdr_del_tbl.count > 0) THEN
   FOR m in 1 .. l_hdr_del_tbl.count LOOP
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('Deleted Headers : ' || l_hdr_del_tbl(m));
    END IF;
   END LOOP;
  END IF;

  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('#QG3');

  END IF;
  IF (l_hdr_del_tbl.count > 0) THEN
   FORALL i in l_hdr_del_tbl.FIRST..l_hdr_del_tbl.LAST
/*
INDX,QP_PREQ_GRP.perform_qualifier_grouping.perform_qualifier_grouping_upd3,QP_PREQ_QUAL_TMP_N3,PRICING_STATUS_CODE,1
INDX,QP_PREQ_GRP.perform_qualifier_grouping.perform_qualifier_grouping_upd3,QP_PREQ_QUAL_TMP_N3,UNIQUE_KEY,2
*/
    UPDATE QP_PREQ_QUAL_TMP --upd3
    SET   PRICING_STATUS_CODE = G_DELETED_GRP
    WHERE UNIQUE_KEY = l_hdr_del_tbl(i)
    AND   PRICING_STATUS_CODE = G_STATUS_UNCHANGED
    AND   PRICING_PHASE_ID = p_pricing_phase_id;
  END IF;

  l_hdr_del_tbl.delete;
  l_hdr_del_ind:=0;

  l_other_grp_exists_flag := FALSE;
  l_other_grp_satisfied_flag := FALSE;

  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('#QG4');

  END IF;
  FOR j IN line_lvl_qual_attrs_req_line LOOP

   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('Line Qualifier Grouping No: ' || j.QUALIFIER_GROUPING_NO || ' List Header Id : ' || j.list_header_id);
   engine_debug('Passed Line Quals : ' || j.no_of_qualifiers_in_grp || 'List Line id : ' || j.list_line_id);
   engine_debug('Line Null Group Count : ' || v_line_null_grp_count);

   END IF;
   IF (j.LIST_HEADER_ID <> l_list_header_id or j.LINE_INDEX <> l_line_index or j.LIST_LINE_ID <> l_list_line_id) THEN

    v_line_null_grp_count := 0;

    -- This code is to delete the -1 group if none of the other groups are satisfied on change of list header or list line or line index
    IF (l_other_grp_exists_flag = TRUE) THEN
     IF (l_other_grp_satisfied_flag = FALSE) THEN
      IF (l_null_unique_key IS NOT NULL) THEN
       l_line_del_ind := l_line_del_ind + 1;
       l_line_del_tbl(l_line_del_ind) := l_null_unique_key;
      END IF;
     END IF;
    END IF;
    l_other_grp_exists_flag := FALSE;
    l_other_grp_satisfied_flag := FALSE;
   END IF;

   IF (j.QUALIFIER_GROUPING_NO = -1) THEN
    l_null_unique_key := j.unique_key;    --	6913520
    IF (j.NO_OF_QUALIFIERS_IN_GRP < j.QUALIFIER_GROUP_CNT) THEN -- 4043768/4261138
     l_other_list_line_id:=null;  --	6913520

     OPEN chk_other_line_quals_exist_cur(j.list_line_id);
     FETCH chk_other_line_quals_exist_cur INTO l_other_list_line_id;
     CLOSE chk_other_line_quals_exist_cur;

     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('Other Groups Exist in this Line id : '||l_other_list_line_id);

     END IF;
     -- If there are no other groups , then it is a failure on pure null group,else it is not
     IF (l_other_list_line_id IS NULL) THEN
      l_other_grp_exists_flag := FALSE;
      l_null_unique_key := NULL;
      l_line_del_ind := l_line_del_ind + 1;
      l_line_del_tbl(l_line_del_ind) := j.unique_key;
      IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
      engine_debug('Deleted Line id : '||j.list_line_id||' Line Indx: '||j.line_index || ' Unique Key : ' || j.unique_key);
      END IF;
     ELSE
      l_other_grp_exists_flag := TRUE;
     END IF;
    ELSE
     l_line_level_quals_satisfied := TRUE;
     l_null_unique_key := j.unique_key;
    END IF;

     v_line_null_grp_count := j.NO_OF_QUALIFIERS_IN_GRP;
     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('Line Null Group Count : ' || v_line_null_grp_count);

     END IF;
   ELSE
    -- 4043768/4261138, changed <> to < condition
    IF (j.NO_OF_QUALIFIERS_IN_GRP + v_line_null_grp_count < j.QUALIFIER_GROUP_CNT) THEN
     --l_other_grp_satisfied_flag := FALSE;
     l_line_del_ind := l_line_del_ind + 1;
     l_line_del_tbl(l_line_del_ind) := j.unique_key;
     --l_line_del_tbl(l_line_del_ind) := j.list_line_id;
     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('Deleted Line id : '||j.list_line_id||' Line Indx: '||j.line_index || ' Unique Key : ' || j.unique_key);
     END IF;
    ELSE
     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('Line Quals for : ' || j.list_header_id || ' ' || j.list_line_id );
     END IF;
     l_line_level_quals_satisfied := TRUE;
     l_other_grp_satisfied_flag := TRUE;
    END IF;

   END IF;

  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('#QG5');

  END IF;
   -- Check if header level quals are satisfied.If there is a hdr lvl qualifier in setup and it is not selected
   IF (l_line_level_quals_satisfied = TRUE) THEN

    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('Line Level Quals Satisfied , but checking whether header level qual satisfied');

    END IF;
    IF (j.HEADER_QUALS_EXIST_FLAG = G_YES) THEN
      IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
      engine_debug('Header level quals exist' );
      END IF;
      v_list_header_id := NULL;

      OPEN check_hdr_quals_cur_req_line(j.LIST_HEADER_ID,j.LINE_INDEX);
      FETCH check_hdr_quals_cur_req_line INTO v_list_header_id;
      CLOSE check_hdr_quals_cur_req_line;

      IF (v_list_header_id IS NULL) THEN
       IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
       engine_debug('Line Level Quals Not Satisfied , as Header Id is : ' || nvl(v_list_header_id,-99999));
       END IF;
       l_line_del_ind := l_line_del_ind + 1;
       l_line_del_tbl(l_line_del_ind) := j.unique_key;
       IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
       engine_debug('Deleted Line id : '||j.list_line_id||' Line Indx: '||j.line_index || ' Unique Key : ' || j.unique_key);
       END IF;
      ELSE
       IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
       engine_debug('Line Level Quals Satisfied , Header Id : ' || nvl(v_list_header_id,-99999));
       END IF;
      END IF;

    ELSE
      IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
      engine_debug('Header level quals do not exist' );
      END IF;
    END IF;

   END IF;

   l_line_level_quals_satisfied := FALSE;
   l_list_header_id := j.LIST_HEADER_ID;
   l_line_index := j.LINE_INDEX;
   l_list_line_id := j.LIST_LINE_ID;

  END LOOP;

    -- This code is to delete the -1 group if none of the other groups are satisfied on last list header or list line or line index

    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug ('#1000');
    END IF;
    IF (l_other_grp_exists_flag = TRUE) THEN
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug ('#1001');
        END IF;
        IF (l_other_grp_satisfied_flag = FALSE) THEN
         IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
         engine_debug ('#1002');
         END IF;
         IF (l_null_unique_key IS NOT NULL) THEN
          IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
          engine_debug ('#1003');
          engine_debug ('Null Unique Key : ' || l_null_unique_key);
          END IF;
          l_line_del_ind := l_line_del_ind + 1;
          l_line_del_tbl(l_line_del_ind) := l_null_unique_key;
         END IF;
        END IF;
    END IF;


  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('#QG6');

  END IF;
  IF (l_line_del_tbl.count > 0 ) THEN
   FOR m in 1 .. l_line_del_tbl.count LOOP
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('Deleted Lines : ' || l_line_del_tbl(m));
   END IF;
   END LOOP;
  END IF;

  IF (l_line_del_tbl.count > 0 ) THEN
   FORALL i in l_line_del_tbl.FIRST..l_line_del_tbl.LAST
/*
INDX,QP_PREQ_GRP.perform_qualifier_grouping.perform_qualifier_grouping_upd4,QP_PREQ_QUAL_TMP_N3,PRICING_STATUS_CODE,1
INDX,QP_PREQ_GRP.perform_qualifier_grouping.perform_qualifier_grouping_upd4,QP_PREQ_QUAL_TMP_N3,UNIQUE_KEY,2
*/
    UPDATE QP_PREQ_QUAL_TMP --upd4
    SET   PRICING_STATUS_CODE = G_DELETED_GRP
    WHERE UNIQUE_KEY  = l_line_del_tbl(i)
    AND   PRICING_STATUS_CODE = G_STATUS_UNCHANGED
    AND   PRICING_PHASE_ID = p_pricing_phase_id;
  END IF;

  l_line_del_tbl.delete;
  l_line_del_ind:=0;

END IF;

EXCEPTION
 WHEN OTHERS THEN
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug(SQLERRM);
  END IF;
  x_status_code:= FND_API.G_RET_STS_ERROR;
  x_status_text:= 'In perform qualifier grouping '||SQLERRM;
END Perform_Qualifier_Grouping;

/*+----------------------------------------------------------
  |PROCEDURE SELECT_MODIFIERS
  +----------------------------------------------------------
*/
PROCEDURE SELECT_MODIFIERS(p_pricing_phase_id     IN  NUMBER,
                           p_freeze_override_flag IN  VARCHAR2,
                           x_status_code          OUT NOCOPY VARCHAR2,
                           x_status_text          OUT NOCOPY VARCHAR2)
AS
/*
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_cur,QP_PREQ_QUAL_TMP_N5,PRICING_STATUS_CODE,1
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_cur,QP_PREQ_QUAL_TMP_N5,SEARCH_IND,2

INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_cur,QP_PRICING_ATTRIBUTES_N7,LIST_HEADER_ID,1
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_cur,QP_PRICING_ATTRIBUTES_N7,QUALIFICATION_IND,2
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_cur,QP_PRICING_ATTRIBUTES_N7,PRICING_PHASE_ID,3
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_cur,QP_PRICING_ATTRIBUTES_N7,LIST_LINE_ID,4

INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_cur,qp_npreq_line_attrs_tmp_N2,PRICING_STATUS_CODE,1
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_cur,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_cur,qp_npreq_line_attrs_tmp_N2,CONTEXT,3
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_cur,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE,4
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_cur,qp_npreq_line_attrs_tmp_N2,LINE_INDEX,5
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_cur,qp_npreq_line_attrs_tmp_N2,VALUE_FROM,6

INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_cur,QP_LIST_LINES_PK,LIST_LINE_ID,1

INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_cur,qp_npreq_lines_tmp_N1,LINE_INDEX,1
*/

CURSOR l_prod_qual_cur (p_pricing_phase_id NUMBER, p_list_header_id NUMBER, p_list_line_id NUMBER, p_line_index NUMBER) IS
-- Product and Qualifier Only. No pricing
select /*+ ORDERED USE_NL(QPPROD QPLATPR QPL ) index(QPPROD QP_PRICING_ATTRIBUTES_N7) index(qplatpr qp_preq_line_attrs_tmp_n2) l_prod_qual_cur_mod */
       qpl.list_header_id,
       qpl.list_line_id,
       qpl.list_line_type_code,
       qplatpr.line_index,
       qplatpr.validated_flag,
       qplatpr.applied_flag,
       qplatpr.attribute_level               PRODUCT_ATTRIBUTE_LEVEL,
       qplatpr.attribute_type                PRODUCT_ATTRIBUTE_TYPE,
       qplatpr.context                       PRODUCT_ATTRIBUTE_CONTEXT,
       qplatpr.attribute                     PRODUCT_ATTRIBUTE,
       qplatpr.value_from                    PRODUCT_ATTR_VALUE,
       qpprod.product_attr_value             PRODUCT_SETUP_VALUE,
       qplatpr.pricing_attr_flag             PRODUCT_PRICING_ATTR_FLAG,
       qpprod.product_uom_code               PRODUCT_UOM_CODE,
       qpprod.excluder_flag,
       qpl.automatic_flag,
       qpl.modifier_level_code,
       qpl.primary_uom_flag,
       qpl.arithmetic_operator operand_calculation_code,
       qpl.operand             operand_value,
       qpl.net_amount_flag,  --IT net_amount 2720717
       qpl.pricing_group_sequence,
       qpl.pricing_phase_id,
       qpl.price_break_type_code,
       qpl.incompatibility_grp_code,
       qpl.price_by_formula_id,
       qpl.product_precedence,
       qpl.override_flag,
       qpl.benefit_qty,
       qpl.benefit_uom_code,
       qpl.list_line_no,
       qpl.accrual_flag,
       qpl.accrual_conversion_rate,
       qpl.estim_accrual_rate,
       qpq.ask_for_flag,
       qpq.created_from_list_type,
       qpq.header_limit_exists,
       qpl.limit_exists_flag line_limit_exists,
       decode(p_list_line_id, -1, 'HQ', 'LQ') QUALIFIER_TYPE,   --HQ is header level qualifier
       qpl.charge_type_code,
       qpl.charge_subtype_code,
       qpl.accum_context,           -- accum range break
       qpl.accum_attribute,         -- accum range break
       qpl.accum_attr_run_src_flag  -- accum range break
from
       (select /*+ index (qpqq QP_PREQ_QUAL_TMP_N5) */
        distinct line_index, list_header_id, list_line_id, ask_for_flag,created_from_list_type,header_limit_exists
        from qp_preq_qual_tmp qpqq
        where pricing_status_code = G_STATUS_UNCHANGED
        and pricing_phase_id = p_pricing_phase_id
        and search_ind = 1
        and list_line_id > 0 ) qpq,
       qp_pricing_attributes qpprod,
       qp_npreq_line_attrs_tmp qplatpr,
       qp_list_lines qpl,
       qp_npreq_lines_tmp qplines
where
      qpprod.list_header_id = qpq.list_header_id
and   qpprod.list_line_id = qpq.list_line_id
and   qpl.list_line_id   = qpprod.list_line_id
and   (qpl.modifier_level_code = qplines.line_type_code
       OR
       (qpl.modifier_level_code = G_LINE_GROUP and
        nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) <> G_YES)) -- price book
and   qplines.pricing_effective_date BETWEEN
         nvl(TRUNC(qpl.start_date_active), qplines.pricing_effective_date)
           and nvl(TRUNC(qpl.end_date_active),qplines.pricing_effective_date)
and   qplines.priced_uom_code = nvl(qpprod.product_uom_code,qplines.priced_uom_code)
and   qpprod.pricing_phase_id = p_pricing_phase_id
and   qpprod.QUALIFICATION_IND in (QP_PREQ_GRP.G_YES_PROD_LINE_QUAL_IND,
						  QP_PREQ_GRP.G_YES_PROD_HDR_LINE_QUAL_IND)
and   qpprod.product_attribute_context = qplatpr.context
and   qpprod.product_attribute = qplatpr.attribute
and   qpprod.product_attr_value = qplatpr.value_from
and   qpprod.excluder_flag = G_NO
and   qplines.line_index = qplatpr.line_index
and   qplatpr.line_index = qpq.line_index
--and   qpq.pricing_status_code = G_STATUS_UNCHANGED
--and   qpq.search_ind = 1
and   qplatpr.attribute_type='PRODUCT'
and   qplatpr.pricing_status_code=G_STATUS_UNCHANGED
-- price book
and   (nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) = G_YES and
       qpl.list_line_type_code not in (G_PROMO_GOODS_DISCOUNT,G_OTHER_ITEM_DISCOUNT,
                                       G_COUPON_ISSUE,G_TERMS_SUBSTITUTION,G_ITEM_UPGRADE)
       or
       nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) <> G_YES)
union all
select /*+ ORDERED USE_NL(QPLATPR QPPROD QPL) index(QPPROD QP_PRICING_ATTRIBUTES_N5) index(qplatpr qp_preq_line_attrs_tmp_n1) l_prod_qual_cur_mod */
       qpl.list_header_id,
       qpl.list_line_id,
       qpl.list_line_type_code,
       qplatpr.line_index,
       qplatpr.validated_flag,
       qplatpr.applied_flag,
       qplatpr.attribute_level               PRODUCT_ATTRIBUTE_LEVEL,
       qplatpr.attribute_type                PRODUCT_ATTRIBUTE_TYPE,
       qplatpr.context                       PRODUCT_ATTRIBUTE_CONTEXT,
       qplatpr.attribute                     PRODUCT_ATTRIBUTE,
       qplatpr.value_from                    PRODUCT_ATTR_VALUE,
       qpprod.product_attr_value             PRODUCT_SETUP_VALUE,
       qplatpr.pricing_attr_flag             PRODUCT_PRICING_ATTR_FLAG,
       qpprod.product_uom_code               PRODUCT_UOM_CODE,
       qpprod.excluder_flag,
       qpl.automatic_flag,
       qpl.modifier_level_code,
       qpl.primary_uom_flag,
       qpl.arithmetic_operator operand_calculation_code,
       qpl.operand             operand_value,
       qpl.net_amount_flag,  --IT net_amount 2720717
       qpl.pricing_group_sequence,
       qpl.pricing_phase_id,
       qpl.price_break_type_code,
       qpl.incompatibility_grp_code,
       qpl.price_by_formula_id,
       qpl.product_precedence,
       qpl.override_flag,
       qpl.benefit_qty,
       qpl.benefit_uom_code,
       qpl.list_line_no,
       qpl.accrual_flag,
       qpl.accrual_conversion_rate,
       qpl.estim_accrual_rate,
       qpq.ask_for_flag,
       qpq.created_from_list_type,
       qpq.header_limit_exists,
       qpl.limit_exists_flag line_limit_exists,
       decode(p_list_line_id, -1, 'HQ', 'LQ') QUALIFIER_TYPE,   --HQ is header level qualifier
       qpl.charge_type_code,
       qpl.charge_subtype_code,
       qpl.accum_context,           -- accum range break
       qpl.accum_attribute,         -- accum range break
       qpl.accum_attr_run_src_flag  -- accum range break
from
       (select /*+ index (qpqq QP_PREQ_QUAL_TMP_N5) */
        distinct line_index, list_header_id, list_line_id, ask_for_flag,created_from_list_type,header_limit_exists
        from qp_preq_qual_tmp qpqq
        where pricing_status_code = G_STATUS_UNCHANGED
        and pricing_phase_id = p_pricing_phase_id
        and search_ind = 1
        and list_line_id < 0 ) qpq,
       qp_npreq_line_attrs_tmp qplatpr,
       qp_pricing_attributes qpprod,
       qp_list_lines qpl,
       qp_npreq_lines_tmp qplines
where
      qpprod.list_header_id = qpq.list_header_id
and   qpl.list_line_id   = qpprod.list_line_id
and   (qpl.modifier_level_code = qplines.line_type_code
       OR
       (qpl.modifier_level_code = G_LINE_GROUP and
        nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) <> G_YES)) -- price book
and   qplines.pricing_effective_date BETWEEN
         nvl(TRUNC(qpl.start_date_active), qplines.pricing_effective_date)
           and nvl(TRUNC(qpl.end_date_active),qplines.pricing_effective_date)
and   qplines.priced_uom_code = nvl(qpprod.product_uom_code,qplines.priced_uom_code)
and   qpprod.pricing_phase_id = p_pricing_phase_id
and   qpprod.QUALIFICATION_IND =  QP_PREQ_GRP.G_YES_PROD_HDR_QUAL_IND
and   qpprod.product_attribute_context = qplatpr.context
and   qpprod.product_attribute = qplatpr.attribute
and   qpprod.product_attr_value = qplatpr.value_from
and   qpprod.excluder_flag = G_NO
and   qplines.line_index = qplatpr.line_index
and   qplatpr.line_index = qpq.line_index
and   qplatpr.attribute_type='PRODUCT'
and   qplatpr.pricing_status_code=G_STATUS_UNCHANGED
--and   qpq.pricing_status_code=G_STATUS_UNCHANGED
--and   qpq.search_ind = 1
-- price book
and   (nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) = G_YES and
       qpl.list_line_type_code not in (G_PROMO_GOODS_DISCOUNT,G_OTHER_ITEM_DISCOUNT,
                                       G_COUPON_ISSUE,G_TERMS_SUBSTITUTION,G_ITEM_UPGRADE)
       or
       nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) <> G_YES)
order by 4,2;

/*
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel1,QP_PRICING_ATTRIBUTES_N5,PRICING_PHASE_ID,1
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel1,QP_PRICING_ATTRIBUTES_N5,QUALIFICATION_IND,2
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel1,QP_PRICING_ATTRIBUTES_N5,PRODUCT_ATTRIBUTE_CONTEXT,3
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel1,QP_PRICING_ATTRIBUTES_N5,PRODUCT_ATTRIBUTE,4
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel1,QP_PRICING_ATTRIBUTES_N5,PRODUCT_ATTR_VALUE,5
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel1,QP_PRICING_ATTRIBUTES_N5,EXCLUDER_FLAG,6
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel1,QP_PRICING_ATTRIBUTES_N5,LIST_HEADER_ID,7
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel1,QP_PRICING_ATTRIBUTES_N5,LIST_LINE_ID,8

INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel1,QP_PREQ_QUAL_TMP_N5,PRICING_STATUS_CODE,1
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel1,QP_PREQ_QUAL_TMP_N5,SEARCH_IND,2
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel1,QP_PREQ_QUAL_TMP_N5,LIST_HEADER_ID,3
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel1,QP_PREQ_QUAL_TMP_N5,LIST_LINE_ID,4
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel1,QP_PREQ_QUAL_TMP_N5,LINE_INDEX,5

-- Used for qplatpr and qplatpc
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel1,qp_npreq_line_attrs_tmp_N2,PRICING_STATUS_CODE,1
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel1,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel1,qp_npreq_line_attrs_tmp_N2,CONTEXT,3
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel1,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE,4
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel1,qp_npreq_line_attrs_tmp_N2,LINE_INDEX,5
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel1,qp_npreq_line_attrs_tmp_N2,VALUE_FROM,6

INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel1,QP_LIST_LINES_PK,LIST_LINE_ID,1

INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel1,qp_npreq_lines_tmp_U1,LINE_INDEX,1
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel1,qp_npreq_lines_tmp_U1,LINE_TYPE_CODE,2

INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel2,QP_PREQ_QUAL_TMP_N5,PRICING_STATUS_CODE,1
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel2,QP_PREQ_QUAL_TMP_N5,SEARCH_IND,2
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel2,QP_PREQ_QUAL_TMP_N5,LINE_INDEX,5

INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel2,QP_PRICING_ATTRIBUTES_N7,LIST_HEADER_ID,1
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel2,QP_PRICING_ATTRIBUTES_N7,QUALIFICATION_IND,2
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel2,QP_PRICING_ATTRIBUTES_N7,PRICING_PHASE_ID,3
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel2,QP_PRICING_ATTRIBUTES_N7,LIST_LINE_ID,4

-- Used for qplatpr and qplatpc
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel1,qp_npreq_line_attrs_tmp_N2,PRICING_STATUS_CODE,1
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel1,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel1,qp_npreq_line_attrs_tmp_N2,CONTEXT,3
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel1,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE,4
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel1,qp_npreq_line_attrs_tmp_N2,LINE_INDEX,5
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel1,qp_npreq_line_attrs_tmp_N2,VALUE_FROM,6

INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel2,QP_LIST_LINES_PK,LIST_LINE_ID,1

INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel2,qp_npreq_lines_tmp_U1,LINE_INDEX,1
INDX,QP_PREQ_GRP.select_modifiers.l_prod_qual_pric_cur_sel2,qp_npreq_lines_tmp_U1,LINE_TYPE_CODE,2
*/
CURSOR l_prod_qual_pric_cur(p_pricing_phase_id NUMBER, p_list_header_id NUMBER, p_list_line_id NUMBER,
					   p_line_index NUMBER) IS
--Product+Qualifiers+Pricing
select /*+ ORDERED USE_NL(QPPROD QPLATPR QPLATPC QPL ) index(QPPROD QP_PRICING_ATTRIBUTES_N7) index(qplatpr qp_preq_line_attrs_tmp_N2) index(qplatpc qp_preq_line_attrs_tmp_N2) l_prod_qual_pric_cur_mod */
       qpl.list_header_id,
       qpl.list_line_id,
       qpl.list_line_type_code,
       qplatpr.line_index,
       qplatpr.validated_flag,
       qplatpr.applied_flag,
--for product attrs
       qplatpr.attribute_level               PRODUCT_ATTRIBUTE_LEVEL,
       qplatpr.attribute_type                PRODUCT_ATTRIBUTE_TYPE,
       qplatpr.context                       PRODUCT_ATTRIBUTE_CONTEXT,
       qplatpr.attribute                     PRODUCT_ATTRIBUTE,
       qplatpr.value_from                    PRODUCT_ATTR_VALUE,
       qpprod.product_attr_value             PRODUCT_SETUP_VALUE,
       qplatpr.pricing_attr_flag             PRODUCT_PRICING_ATTR_FLAG,
       qpprod.product_uom_code               PRODUCT_UOM_CODE,
       qpprod.excluder_flag,
--for pricing attrs
       qplatpc.attribute_level               PRICING_ATTRIBUTE_LEVEL,
       qplatpc.attribute_type                PRICING_ATTRIBUTE_TYPE,
       qplatpc.context                       PRICING_ATTRIBUTE_CONTEXT,
       qplatpc.attribute                     PRICING_ATTRIBUTE,
       qplatpc.value_from                    PRICING_ATTR_VALUE,
       qpprod.pricing_attr_value_from        PRICING_SETUP_VALUE_FROM,
       qpprod.pricing_attr_value_to          PRICING_SETUP_VALUE_TO,
       qpprod.comparison_operator_code       PRICING_COMPARISON_OPERATOR,
       qpprod.pricing_attribute_datatype     PRICING_DATATYPE,
       qpl.automatic_flag,
       qpl.modifier_level_code,
       qpl.primary_uom_flag,
       qpl.arithmetic_operator operand_calculation_code,
       qpl.operand             operand_value,
       qpl.net_amount_flag,  --IT net_amount 2720717
       qpl.pricing_group_sequence,
       qpl.pricing_phase_id,
       qpl.price_break_type_code,
       qpl.incompatibility_grp_code,
       qpl.price_by_formula_id,
       qpl.product_precedence,
       qpl.override_flag,
       qpl.benefit_qty,
       qpl.benefit_uom_code,
       qpl.list_line_no,
       qpl.accrual_flag,
       qpl.accrual_conversion_rate,
       qpl.estim_accrual_rate,
       qpq.ask_for_flag,
       qpq.created_from_list_type,
       qpq.header_limit_exists,
       qpl.limit_exists_flag line_limit_exists,
       decode(p_list_line_id, -1, 'HQ', 'LQ') QUALIFIER_TYPE,
       qpl.charge_type_code,
       qpl.charge_subtype_code,
       qpl.accum_context,           -- accum range break
       qpl.accum_attribute,         -- accum range break
       qpl.accum_attr_run_src_flag  -- accum range break
from
       (select /*+ index (qpqq QP_PREQ_QUAL_TMP_N5) */
        distinct line_index, list_header_id, list_line_id, ask_for_flag,created_from_list_type,header_limit_exists
        from qp_preq_qual_tmp qpqq
        where pricing_status_code = G_STATUS_UNCHANGED
        and pricing_phase_id = p_pricing_phase_id
        and search_ind = 1
        and list_line_id > 0 ) qpq,
       QP_PRICING_ATTRIBUTES qpprod ,
       qp_npreq_line_attrs_tmp qplatpr,
       qp_npreq_line_attrs_tmp qplatpc,
       qp_list_lines qpl ,
       qp_npreq_lines_tmp qplines
where
      qpprod.list_header_id = qpq.list_header_id
and   qpprod.list_line_id = qpq.list_line_id
and   qpl.list_line_id   = qpprod.list_line_id
and   (qpl.modifier_level_code = qplines.line_type_code
       OR
       (qpl.modifier_level_code = G_LINE_GROUP and
        nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) <> G_YES)) -- price book
and   qplines.pricing_effective_date BETWEEN
         nvl(TRUNC(qpl.start_date_active), qplines.pricing_effective_date)
      AND nvl(TRUNC(qpl.end_date_active),qplines.pricing_effective_date)
and   qplines.priced_uom_code = nvl(qpprod.product_uom_code,qplines.priced_uom_code)
and   qpl.QUALIFICATION_IND in (QP_PREQ_GRP.G_YES_PROD_PRIC_LINE_QUAL_IND,
						  QP_PREQ_GRP.G_YES_PRIC_HDR_LINE_QUAL_IND)
and qpl.list_line_type_code <> 'PLL'
and   qpprod.pricing_phase_id = p_pricing_phase_id
and   qpprod.QUALIFICATION_IND in (QP_PREQ_GRP.G_YES_PROD_PRIC_LINE_QUAL_IND,
						  QP_PREQ_GRP.G_YES_PRIC_HDR_LINE_QUAL_IND)
and    qpprod.product_attribute_context = qplatpr.context
and    qpprod.product_attribute = qplatpr.attribute
and    qpprod.product_attr_value = qplatpr.value_from
and 	qpprod.excluder_flag = G_NO
and    qpprod.pricing_attribute_context = qplatpc.context
and    qpprod.pricing_attribute = qplatpc.attribute
and    (qpprod.pricing_attr_value_from = qplatpc.value_from
        or qpprod.comparison_operator_code IN ('NOT =',G_OPERATOR_BETWEEN))
        --or qpl.price_break_type_code = G_RECURRING_BREAK)
and   qpl.pricing_phase_id = p_pricing_phase_id
and qplines.line_index = qpq.line_index
and   qplatpr.line_index = qpq.line_index
and   qplatpc.line_index = qplatpr.line_index
and qplatpr.attribute_type='PRODUCT'
and qplatpr.pricing_status_code=G_STATUS_UNCHANGED
and qplatpc.attribute_type = 'PRICING'
and qplatpc.pricing_status_code = G_STATUS_UNCHANGED
--and qpq.pricing_status_code = G_STATUS_UNCHANGED
--and   qpq.search_ind = 1
-- price book
and   (nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) = G_YES and
       qpl.list_line_type_code not in (G_PROMO_GOODS_DISCOUNT,G_OTHER_ITEM_DISCOUNT,
                                       G_COUPON_ISSUE,G_TERMS_SUBSTITUTION,G_ITEM_UPGRADE)
       or
       nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) <> G_YES)
union all
select /*+ ORDERED USE_NL(QPLATPR QPPROD QPLATPC QPL ) index(QPPROD QP_PRICING_ATTRIBUTES_N5) index(qplatpr qp_preq_line_attrs_tmp_N1) index(qplatpc qp_preq_line_attrs_tmp_N2) l_prod_qual_pric_cur_mod */
       qpl.list_header_id,
       qpl.list_line_id,
       qpl.list_line_type_code,
       qplatpr.line_index,
       qplatpr.validated_flag,
       qplatpr.applied_flag,
--for product attrs
       qplatpr.attribute_level               PRODUCT_ATTRIBUTE_LEVEL,
       qplatpr.attribute_type                PRODUCT_ATTRIBUTE_TYPE,
       qplatpr.context                       PRODUCT_ATTRIBUTE_CONTEXT,
       qplatpr.attribute                     PRODUCT_ATTRIBUTE,
       qplatpr.value_from                    PRODUCT_ATTR_VALUE,
       qpprod.product_attr_value             PRODUCT_SETUP_VALUE,
       qplatpr.pricing_attr_flag             PRODUCT_PRICING_ATTR_FLAG,
       qpprod.product_uom_code               PRODUCT_UOM_CODE,
       qpprod.excluder_flag,
--for pricing attrs
       qplatpc.attribute_level               PRICING_ATTRIBUTE_LEVEL,
       qplatpc.attribute_type                PRICING_ATTRIBUTE_TYPE,
       qplatpc.context                       PRICING_ATTRIBUTE_CONTEXT,
       qplatpc.attribute                     PRICING_ATTRIBUTE,
       qplatpc.value_from                    PRICING_ATTR_VALUE,
       qpprod.pricing_attr_value_from        PRICING_SETUP_VALUE_FROM,
       qpprod.pricing_attr_value_to          PRICING_SETUP_VALUE_TO,
       qpprod.comparison_operator_code       PRICING_COMPARISON_OPERATOR,
       qpprod.pricing_attribute_datatype     PRICING_DATATYPE,
       qpl.automatic_flag,
       qpl.modifier_level_code,
       qpl.primary_uom_flag,
       qpl.arithmetic_operator operand_calculation_code,
       qpl.operand             operand_value,
       qpl.net_amount_flag,  --IT net_amount 2720717
       qpl.pricing_group_sequence,
       qpl.pricing_phase_id,
       qpl.price_break_type_code,
       qpl.incompatibility_grp_code,
       qpl.price_by_formula_id,
       qpl.product_precedence,
       qpl.override_flag,
       qpl.benefit_qty,
       qpl.benefit_uom_code,
       qpl.list_line_no,
       qpl.accrual_flag,
       qpl.accrual_conversion_rate,
       qpl.estim_accrual_rate,
       qpq.ask_for_flag,
       qpq.created_from_list_type,
       qpq.header_limit_exists,
       qpl.limit_exists_flag line_limit_exists,
       decode(p_list_line_id, -1, 'HQ', 'LQ') QUALIFIER_TYPE,
       qpl.charge_type_code,
       qpl.charge_subtype_code,
       qpl.accum_context,           -- accum range break
       qpl.accum_attribute,         -- accum range break
       qpl.accum_attr_run_src_flag  -- accum range break
from
       (select /*+ index (qpqq QP_PREQ_QUAL_TMP_N5) */
        distinct line_index, list_header_id, list_line_id, ask_for_flag,created_from_list_type,header_limit_exists
        from qp_preq_qual_tmp qpqq
        where pricing_status_code = G_STATUS_UNCHANGED
        and pricing_phase_id = p_pricing_phase_id
        and search_ind = 1
        and list_line_id < 0 ) qpq,
       qp_npreq_line_attrs_tmp qplatpr,
       QP_PRICING_ATTRIBUTES qpprod ,
       qp_npreq_line_attrs_tmp qplatpc,
       qp_list_lines qpl ,
       qp_npreq_lines_tmp qplines
where
       qpprod.list_header_id = qpq.list_header_id
and    qpl.list_line_id   = qpprod.list_line_id
and   (qpl.modifier_level_code = qplines.line_type_code
       OR
       (qpl.modifier_level_code = G_LINE_GROUP and
        nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) <> G_YES)) -- price book
and   qplines.pricing_effective_date BETWEEN
         nvl(TRUNC(qpl.start_date_active), qplines.pricing_effective_date)
      AND nvl(TRUNC(qpl.end_date_active),qplines.pricing_effective_date)
and   qplines.priced_uom_code = nvl(qpprod.product_uom_code,qplines.priced_uom_code)
and   qpl.QUALIFICATION_IND =  QP_PREQ_GRP.G_YES_PROD_PRIC_HDR_QUAL_IND
and   qpl.list_line_type_code <> 'PLL'
and   qpprod.pricing_phase_id = p_pricing_phase_id
and   qpprod.QUALIFICATION_IND = QP_PREQ_GRP.G_YES_PROD_PRIC_HDR_QUAL_IND
and   qpprod.product_attribute_context = qplatpr.context
and   qpprod.product_attribute = qplatpr.attribute
and   qpprod.product_attr_value = qplatpr.value_from
and   qpprod.excluder_flag = G_NO
and   qpprod.pricing_attribute_context = qplatpc.context
and   qpprod.pricing_attribute = qplatpc.attribute
and    (qpprod.pricing_attr_value_from = qplatpc.value_from
        or qpprod.comparison_operator_code IN ('NOT =',G_OPERATOR_BETWEEN))
and   qpl.pricing_phase_id = p_pricing_phase_id
and   qplines.line_index = qpq.line_index
and   qplatpr.line_index = qpq.line_index
and   qplatpc.line_index = qplatpr.line_index
and   qplatpr.attribute_type='PRODUCT'
and   qplatpr.pricing_status_code=G_STATUS_UNCHANGED
and   qplatpc.attribute_type = 'PRICING'
and   qplatpc.pricing_status_code = G_STATUS_UNCHANGED
--and   qpq.pricing_status_code = G_STATUS_UNCHANGED
--and   qpq.search_ind = 1
-- price book
and   (nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) = G_YES and
       qpl.list_line_type_code not in (G_PROMO_GOODS_DISCOUNT,G_OTHER_ITEM_DISCOUNT,
                                       G_COUPON_ISSUE,G_TERMS_SUBSTITUTION,G_ITEM_UPGRADE)
       or
       nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) <> G_YES)
order by 4,2;

/*
INDX,QP_PREQ_GRP.select_modifiers.l_inner_qual_cur,QP_PREQ_QUAL_TMP_N5,PRICING_STATUS_CODE,1
INDX,QP_PREQ_GRP.select_modifiers.l_inner_qual_cur,QP_PREQ_QUAL_TMP_N5,SEARCH_IND,2
INDX,QP_PREQ_GRP.select_modifiers.l_inner_qual_cur,QP_PREQ_QUAL_TMP_N5,list_header_id,3
INDX,QP_PREQ_GRP.select_modifiers.l_inner_qual_cur,QP_PREQ_QUAL_TMP_N5,list_line_id,4

INDX,QP_PREQ_GRP.select_modifiers.l_inner_qual_cur,QP_LIST_LINES_N5,PRICING_PHASE_ID,1
INDX,QP_PREQ_GRP.select_modifiers.l_inner_qual_cur,QP_LIST_LINES_N5,QUALIFICATION_IND,2
*/
CURSOR l_INNER_QUAL_CUR(p_pricing_phase_id NUMBER,
				    p_list_header_id NUMBER,
				    p_list_line_id NUMBER,
				    p_line_index NUMBER,
				    p_pricing_effective_date DATE,
				    p_start_date_active_first DATE,
				    p_start_date_active_second DATE,
				    p_line_type_code VARCHAR2) IS
-- Qualifier Only
-- 5092968, qp_list_lines_n6 replaced with qp_list_lines_pk
select /*+ ORDERED INDEX(qpl,QP_LIST_LINES_PK) l_inner_qual_cur */
       qpl.list_header_id,
       qpl.list_line_id,
       qpl.list_line_type_code,
       qpq.line_index,
       qpl.automatic_flag,
       qpl.modifier_level_code,
       qpl.primary_uom_flag,
       qpl.arithmetic_operator operand_calculation_code,
       qpl.operand             operand_value,
       qpl.net_amount_flag,  --IT net_amount 2720717
       qpl.pricing_group_sequence,
       qpl.pricing_phase_id,
       qpl.price_break_type_code,
       qpl.incompatibility_grp_code,
       qpl.price_by_formula_id,
       qpl.product_precedence,
       qpl.override_flag,
       qpl.benefit_qty,
       qpl.benefit_uom_code,
       qpl.list_line_no,
       qpl.accrual_flag,
       qpl.accrual_conversion_rate,
       qpl.estim_accrual_rate,
       qpq.ask_for_flag,
       qpq.created_from_list_type,
       qpq.header_limit_exists,
       qpl.limit_exists_flag line_limit_exists,
       decode(p_list_line_id, -1, 'HQ', 'LQ') QUALIFIER_TYPE,
       qpl.charge_type_code,
       qpl.charge_subtype_code,
       qpl.accum_context,           -- accum range break
       qpl.accum_attribute,         -- accum range break
       qpl.accum_attr_run_src_flag  -- accum range break
from
       (select /*+ index (qpqq QP_PREQ_QUAL_TMP_N5) */
        distinct line_index, line_type_code,pricing_effective_date,list_header_id, list_line_id,
                 ask_for_flag, created_from_list_type,header_limit_exists
        from qp_preq_qual_tmp qpqq
        where pricing_status_code = G_STATUS_UNCHANGED
        and pricing_phase_id = p_pricing_phase_id
        and search_ind = 1
        and list_line_id > 0 ) qpq,
       qp_list_lines qpl
where
      qpl.list_header_id = qpq.list_header_id
and   qpl.list_line_id = qpq.list_line_id
and   (qpl.modifier_level_code = qpq.line_type_code
       OR
       (qpl.modifier_level_code = G_LINE_GROUP and
        nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) <> G_YES)) -- price book
and   qpq.pricing_effective_date BETWEEN
         nvl(TRUNC(qpl.start_date_active), qpq.pricing_effective_date)
      AND nvl(TRUNC(qpl.end_date_active),qpq.pricing_effective_date)
and   qpl.QUALIFICATION_IND in (QP_PREQ_GRP.G_YES_LINE_QUAL_IND,QP_PREQ_GRP.G_YES_HDR_LINE_QUAL_IND)
and   qpl.list_line_type_code <>'PLL'
and   qpl.pricing_phase_id       = p_pricing_phase_id
--and   qpq.pricing_status_code = G_STATUS_UNCHANGED
--and   qpq.search_ind = 1
-- price book
and   (nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) = G_YES and
       qpl.list_line_type_code not in (G_PROMO_GOODS_DISCOUNT,G_OTHER_ITEM_DISCOUNT,
                                       G_COUPON_ISSUE,G_TERMS_SUBSTITUTION,G_ITEM_UPGRADE)
       or
       nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) <> G_YES)
union all
select /*+ ORDERED INDEX(qpl,QP_LIST_LINES_N5) l_inner_qual_cur */
       qpl.list_header_id,
       qpl.list_line_id,
       qpl.list_line_type_code,
       qpq.line_index,
       qpl.automatic_flag,
       qpl.modifier_level_code,
       qpl.primary_uom_flag,
       qpl.arithmetic_operator operand_calculation_code,
       qpl.operand             operand_value,
       qpl.net_amount_flag,  --IT net_amount 2720717
       qpl.pricing_group_sequence,
       qpl.pricing_phase_id,
       qpl.price_break_type_code,
       qpl.incompatibility_grp_code,
       qpl.price_by_formula_id,
       qpl.product_precedence,
       qpl.override_flag,
       qpl.benefit_qty,
       qpl.benefit_uom_code,
       qpl.list_line_no,
       qpl.accrual_flag,
       qpl.accrual_conversion_rate,
       qpl.estim_accrual_rate,
       qpq.ask_for_flag,
       qpq.created_from_list_type,
       qpq.header_limit_exists,
       qpl.limit_exists_flag line_limit_exists,
       decode(p_list_line_id, -1, 'HQ', 'LQ') QUALIFIER_TYPE,
       qpl.charge_type_code,
       qpl.charge_subtype_code,
       qpl.accum_context,           -- accum range break
       qpl.accum_attribute,         -- accum range break
       qpl.accum_attr_run_src_flag  -- accum range break
from
       (select /*+ index (qpqq QP_PREQ_QUAL_TMP_N5) */
        distinct line_index, line_type_code,pricing_effective_date,list_header_id, list_line_id,
                 ask_for_flag, created_from_list_type,header_limit_exists
        from qp_preq_qual_tmp qpqq
        where pricing_status_code = G_STATUS_UNCHANGED
        and pricing_phase_id = p_pricing_phase_id
        and search_ind = 1
        and list_line_id < 0 ) qpq,
        qp_list_lines qpl
where
      qpl.list_header_id = qpq.list_header_id
and   (qpl.modifier_level_code = qpq.line_type_code
       OR
       (qpl.modifier_level_code = G_LINE_GROUP and
        nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) <> G_YES)) -- price book
and   qpq.pricing_effective_date BETWEEN
         nvl(TRUNC(qpl.start_date_active), qpq.pricing_effective_date)
      AND nvl(TRUNC(qpl.end_date_active),qpq.pricing_effective_date)
and   qpl.QUALIFICATION_IND = QP_PREQ_GRP.G_YES_HDR_QUAL_IND
and   qpl.list_line_type_code <>'PLL'
and   qpl.pricing_phase_id       = p_pricing_phase_id
--and   qpq.pricing_status_code = G_STATUS_UNCHANGED
--and   qpq.search_ind = 1
-- price book
and   (nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) = G_YES and
       qpl.list_line_type_code not in (G_PROMO_GOODS_DISCOUNT,G_OTHER_ITEM_DISCOUNT,
                                       G_COUPON_ISSUE,G_TERMS_SUBSTITUTION,G_ITEM_UPGRADE)
       or
       nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) <> G_YES)
order by 4,2;


/*
INDX,QP_PREQ_GRP.select_modifiers.l_prod_cur,qp_npreq_line_attrs_tmp_N2,PRICING_STATUS_CODE,1
INDX,QP_PREQ_GRP.select_modifiers.l_prod_cur,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.select_modifiers.l_prod_cur,qp_npreq_line_attrs_tmp_N2,CONTEXT,3
INDX,QP_PREQ_GRP.select_modifiers.l_prod_cur,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE,4
INDX,QP_PREQ_GRP.select_modifiers.l_prod_cur,qp_npreq_line_attrs_tmp_N2,LINE_INDEX,5
INDX,QP_PREQ_GRP.select_modifiers.l_prod_cur,qp_npreq_line_attrs_tmp_N2,VALUE_FROM,6

INDX,QP_PREQ_GRP.select_modifiers.l_prod_cur,QP_PRICING_ATTRIBUTES_N5,PRICING_PHASE_ID,1
INDX,QP_PREQ_GRP.select_modifiers.l_prod_cur,QP_PRICING_ATTRIBUTES_N5,QUALIFICATION_IND,2
INDX,QP_PREQ_GRP.select_modifiers.l_prod_cur,QP_PRICING_ATTRIBUTES_N5,PRODUCT_ATTRIBUTE_CONTEXT,3
INDX,QP_PREQ_GRP.select_modifiers.l_prod_cur,QP_PRICING_ATTRIBUTES_N5,PRODUCT_ATTRIBUTE,4
INDX,QP_PREQ_GRP.select_modifiers.l_prod_cur,QP_PRICING_ATTRIBUTES_N5,PRODUCT_ATTR_VALUE,5
INDX,QP_PREQ_GRP.select_modifiers.l_prod_cur,QP_PRICING_ATTRIBUTES_N5,EXCLUDER_FLAG,6

INDX,QP_PREQ_GRP.select_modifiers.l_prod_cur,QP_LIST_HEADERS_B_PK,LIST_HEADER_ID,1

INDX,QP_PREQ_GRP.select_modifiers.l_prod_cur,qp_npreq_lines_tmp_N1,LINE_INDEX,1
INDX,QP_PREQ_GRP.select_modifiers.l_prod_cur,qp_npreq_lines_tmp_N1,LINE_TYPE_CODE,2

INDX,QP_PREQ_GRP.select_modifiers.l_prod_cur,QP_PRICE_REQ_SOURCES_PK,REQUEST_TYPE_CODE,1
INDX,QP_PREQ_GRP.select_modifiers.l_prod_cur,QP_PRICE_REQ_SOURCES_PK,SOURCE_SYSTEM_CODE,2
*/
CURSOR l_PROD_CUR (p_pricing_phase_id NUMBER) IS
-- Only Product attributes
select /*+ NO_EXPAND ORDERED USE_NL(QPLATPR QPPROD QPH QPL QPRS) INDEX(QPLINES)  INDEX(QPLATPR) index(QPPROD QP_PRICING_ATTRIBUTES_N5 ) index(qph QP_LIST_HEADERS_B_N7)  */  --5658579
/* ORDERED USE_NL(QPLATPR QPPROD QPH QPL QPRS) index(qplatpr QP_PREQ_LINE_ATTRS_TMP_N1) index(QPPROD QP_PRICING_ATTRIBUTES_N5)  index(qph qp_list_headers_b_n7) l_prod_cur_mod */
       qpl.list_header_id,
       qpl.list_line_id,
       qpl.list_line_type_code,
       qplatpr.line_index,
       qplatpr.validated_flag,
       qplatpr.applied_flag,
--for product
       qplatpr.attribute_level PRODUCT_ATTRIBUTE_LEVEL,
       qplatpr.attribute_type  PRODUCT_ATTRIBUTE_TYPE,
       qplatpr.context         PRODUCT_ATTRIBUTE_CONTEXT,
       qplatpr.attribute       PRODUCT_ATTRIBUTE,
       qplatpr.value_from      PRODUCT_ATTR_VALUE,
       qpprod.product_attr_value PRODUCT_SETUP_VALUE,
       qplatpr.pricing_attr_flag PRODUCT_PRICING_ATTR_FLAG,
       qpprod.product_uom_code  PRODUCT_UOM_CODE,
       qpprod.excluder_flag,
       NULL              QUALIFIER_GROUPING_NO,
       NULL              QUALIFIER_PRECEDENCE,
       qpl.automatic_flag,
       qpl.modifier_level_code,
       qpl.primary_uom_flag,
       qpl.arithmetic_operator OPERAND_CALCULATION_CODE,
       qpl.operand             OPERAND_VALUE,
       qpl.net_amount_flag,  --IT net_amount 2720717
       qpl.pricing_group_sequence,
       qph.ask_for_flag,
       qph.list_type_code CREATED_FROM_LIST_TYPE,
       qpl.pricing_phase_id,
       qpl.price_break_type_code,
       qpl.incompatibility_grp_code,
       qpl.price_by_formula_id,
       qpl.product_precedence,
       qpl.override_flag,
       qpl.benefit_qty,
       qpl.benefit_uom_code,
       qpl.list_line_no,
       qpl.accrual_flag,
       qpl.accrual_conversion_rate,
       qpl.estim_accrual_rate,
       qph.limit_exists_flag header_limit_exists,
       qpl.limit_exists_flag line_limit_exists,
       'NQ' QUALIFIER_TYPE,  --NQ IS NO QUALIFIER
       qpl.charge_type_code,
       qpl.charge_subtype_code,
       qpl.accum_context,           -- accum range break
       qpl.accum_attribute,         -- accum range break
       qpl.accum_attr_run_src_flag  -- accum range break
FROM
	qp_npreq_lines_tmp QPLINES,
	qp_npreq_line_attrs_tmp qplatpr,
	QP_PRICING_ATTRIBUTES QPPROD ,
	QP_LIST_HEADERS_B  QPH ,
	QP_LIST_LINES QPL ,
	--QP_PRICE_REQ_SOURCES QPRS
	QP_PRICE_REQ_SOURCES_V QPRS /* yangli */
WHERE
   (qplines.price_flag = G_YES
       OR
       (qplines.price_flag = G_PHASE
        AND
        p_freeze_override_flag = G_YES))
AND 	QPH.LIST_HEADER_ID = QPPROD.LIST_HEADER_ID
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
and   ((qph.currency_code is not null and qph.currency_code = qplines.currency_code)
       or
       qph.currency_code is null) -- optional currency
--AND   qph.currency_code IN (qplines.currency_code , G_ANY_CURRENCY_CODE) --shu, allow currency_code being ANY for modifiers
and   (qplines.unit_price is not null
        or
       qplines.usage_pricing_type = G_AUTHORING_TYPE
	or
       qplines.line_type_code = G_ORDER_LEVEL)
and   (qpl.modifier_level_code = qplines.line_type_code
       OR
       (qpl.modifier_level_code = G_LINE_GROUP and
        nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) <> G_YES)) -- price book
and   qph.active_flag = G_YES
AND   ((qph.ASK_FOR_FLAG = G_YES and exists (SELECT /*+ index(la QP_PREQ_LINE_ATTRS_TMP_N1) */ 'x' --[julin/pricebook]
                                             FROM qp_npreq_line_attrs_tmp la
                                             WHERE attribute_type = 'QUALIFIER'
                                             AND pricing_status_code = G_STATUS_UNCHANGED
                                             AND validated_flag = G_NO
                                             AND list_header_id = qph.list_header_id
                                             AND line_index = qplines.line_index))
        OR qph.ask_for_flag = G_NO)
AND 	QPL.LIST_LINE_ID = QPPROD.LIST_LINE_ID
and  nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) BETWEEN
       nvl(qph.start_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE))) AND
       nvl(qph.end_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)))
and   nvl(qplines.start_date_active_first,TRUNC(SYSDATE)) BETWEEN
       nvl(qph.start_date_active_first,nvl(qplines.start_date_active_first,TRUNC(SYSDATE)))
      AND
       nvl(qph.end_date_active_first,nvl(qplines.start_date_active_first,TRUNC(SYSDATE)))
and   nvl(qplines.start_date_active_second,TRUNC(SYSDATE)) BETWEEN
       nvl(qph.start_date_active_second, nvl(qplines.start_date_active_second,TRUNC(SYSDATE)))
      AND
       nvl(qph.end_date_active_second, nvl(qplines.start_date_active_second,TRUNC(SYSDATE)))
and   nvl(qplines.active_date_first_type,'X') =
                nvl(qph.active_date_first_type,nvl(qplines.active_date_first_type,'X'))
and   nvl(qplines.active_date_second_type,'X') =
                nvl(qph.active_date_second_type,nvl(qplines.active_date_second_type,'X'))
and  nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) BETWEEN                           --bug7307625
       nvl(qpl.start_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE))) AND
       nvl(qpl.end_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)))
/*and   qplines.pricing_effective_date BETWEEN
         nvl(TRUNC(qpl.start_date_active), qplines.pricing_effective_date)
      AND nvl(TRUNC(qpl.end_date_active),qplines.pricing_effective_date)*/
and  qplines.priced_uom_code = nvl(qpprod.product_uom_code,qplines.priced_uom_code)
and  qpprod.pricing_phase_id = p_pricing_phase_id
and  qpprod.QUALIFICATION_IND = QP_PREQ_GRP.G_YES_PROD_IND
and 	qpprod.product_attribute_context = qplatpr.context
and 	qpprod.product_attribute = qplatpr.attribute
and   qpprod.product_attr_value = qplatpr.value_from
and 	qpprod.excluder_flag = G_NO
and   qph.source_system_code = qprs.source_system_code
and   qplines.request_type_code   = qprs.request_type_code
AND   QPLATPR.LINE_INDEX = QPLINES.LINE_INDEX
and   qplatpr.attribute_type='PRODUCT'
and   qplatpr.pricing_status_code=G_STATUS_UNCHANGED
-- price book
and   (nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) = G_YES and
       qpl.list_line_type_code not in (G_PROMO_GOODS_DISCOUNT,G_OTHER_ITEM_DISCOUNT,
                                       G_COUPON_ISSUE,G_TERMS_SUBSTITUTION,G_ITEM_UPGRADE)
       or
       nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) <> G_YES)
order by 4,2;

/*
INDX,QP_PREQ_GRP.select_modifiers.l_prod_pric_cur,qp_npreq_line_attrs_tmp_N2,PRICING_STATUS_CODE,1
INDX,QP_PREQ_GRP.select_modifiers.l_prod_pric_cur,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.select_modifiers.l_prod_pric_cur,qp_npreq_line_attrs_tmp_N2,CONTEXT,3
INDX,QP_PREQ_GRP.select_modifiers.l_prod_pric_cur,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE,4
INDX,QP_PREQ_GRP.select_modifiers.l_prod_pric_cur,qp_npreq_line_attrs_tmp_N2,LINE_INDEX,5
INDX,QP_PREQ_GRP.select_modifiers.l_prod_pric_cur,qp_npreq_line_attrs_tmp_N2,VALUE_FROM,6

INDX,QP_PREQ_GRP.select_modifiers.l_prod_pric_cur,QP_PRICING_ATTRIBUTES_N5,PRICING_PHASE_ID,1
INDX,QP_PREQ_GRP.select_modifiers.l_prod_pric_cur,QP_PRICING_ATTRIBUTES_N5,QUALIFICATION_IND,2
INDX,QP_PREQ_GRP.select_modifiers.l_prod_pric_cur,QP_PRICING_ATTRIBUTES_N5,PRODUCT_ATTRIBUTE_CONTEXT,3
INDX,QP_PREQ_GRP.select_modifiers.l_prod_pric_cur,QP_PRICING_ATTRIBUTES_N5,PRODUCT_ATTRIBUTE,4
INDX,QP_PREQ_GRP.select_modifiers.l_prod_pric_cur,QP_PRICING_ATTRIBUTES_N5,PRODUCT_ATTR_VALUE,5
INDX,QP_PREQ_GRP.select_modifiers.l_prod_pric_cur,QP_PRICING_ATTRIBUTES_N5,EXCLUDER_FLAG,6

INDX,QP_PREQ_GRP.select_modifiers.l_prod_pric_cur,qp_npreq_line_attrs_tmp_N2,PRICING_STATUS_CODE,1
INDX,QP_PREQ_GRP.select_modifiers.l_prod_pric_cur,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.select_modifiers.l_prod_pric_cur,qp_npreq_line_attrs_tmp_N2,LINE_INDEX,5

INDX,QP_PREQ_GRP.select_modifiers.l_prod_pric_cur,QP_LIST_HEADERS_B_PK,LIST_HEADER_ID,1

INDX,QP_PREQ_GRP.select_modifiers.l_prod_pric_cur,qp_npreq_lines_tmp_N1,LINE_INDEX,1
INDX,QP_PREQ_GRP.select_modifiers.l_prod_pric_cur,qp_npreq_lines_tmp_N1,LINE_TYPE_CODE,2

INDX,QP_PREQ_GRP.select_modifiers.l_prod_pric_cur,QP_PRICE_REQ_SOURCES_PK,REQUEST_TYPE_CODE,1
INDX,QP_PREQ_GRP.select_modifiers.l_prod_pric_cur,QP_PRICE_REQ_SOURCES_PK,SOURCE_SYSTEM_CODE,2
*/

CURSOR l_PROD_PRIC_CUR (p_pricing_phase_id NUMBER) IS
--PRODUCT and PRICING attributes
SELECT /*+ ORDERED USE_NL(QPLATPR QPPROD QPLATPC QPH QPL QPRS) index(qplatpr QP_PREQ_LINE_ATTRS_TMP_N1) index(QPPROD QP_PRICING_ATTRIBUTES_N5) index(qplatpc qp_preq_line_attrs_tmp_N2) index(qph qp_list_headers_b_n7) l_prod_pric_cur_mod */
       qpl.list_header_id,
       qpl.list_line_id,
       qpl.list_line_type_code,
       qplatpr.line_index,
       qplatpr.validated_flag,
       qplatpr.applied_flag,
--FOR PRODUCT
       qplatpr.attribute_level               PRODUCT_ATTRIBUTE_LEVEL,
       qplatpr.attribute_type                PRODUCT_ATTRIBUTE_TYPE,
       qplatpr.context                       PRODUCT_ATTRIBUTE_CONTEXT,
       qplatpr.attribute                     PRODUCT_ATTRIBUTE,
       qplatpr.value_from                    PRODUCT_ATTR_VALUE,
       qpprod.product_attr_value             PRODUCT_SETUP_VALUE,
       qplatpr.pricing_attr_flag             PRODUCT_PRICING_ATTR_FLAG,
       qpprod.product_uom_code               PRODUCT_UOM_CODE,
       qpprod.excluder_flag,
--FOR PRICING
       qplatpc.attribute_level               PRICING_ATTRIBUTE_LEVEL,
       qplatpc.attribute_type                PRICING_ATTRIBUTE_TYPE,
       qplatpc.context                       PRICING_ATTRIBUTE_CONTEXT,
       qplatpc.attribute                     PRICING_ATTRIBUTE,
       qplatpc.value_from                    PRICING_ATTR_VALUE,
       qpprod.pricing_attr_value_from        PRICING_SETUP_VALUE_FROM,
       qpprod.pricing_attr_value_to          PRICING_SETUP_VALUE_TO,
       qpprod.comparison_operator_code       PRICING_COMPARISON_OPERATOR,
       qpprod.pricing_attribute_datatype     PRICING_DATATYPE,
       NULL              qualifier_grouping_no,
       NULL              qualifier_precedence,
       qpl.automatic_flag,
       qpl.modifier_level_code,
       qpl.primary_uom_flag,
       qpl.arithmetic_operator OPERAND_CALCULATION_CODE,
       qpl.operand             OPERAND_VALUE,
       qpl.net_amount_flag,  --IT net_amount 2720717
       qpl.pricing_group_sequence,
       qph.ask_for_flag,
       qph.list_type_code      CREATED_FROM_LIST_TYPE,
       qpl.pricing_phase_id,
       qpl.price_break_type_code,
       qpl.incompatibility_grp_code,
       qpl.price_by_formula_id,
       qpl.product_precedence,
       qpl.override_flag,
       qpl.benefit_qty,
       qpl.benefit_uom_code,
       qpl.list_line_no,
       qpl.accrual_flag,
       qpl.accrual_conversion_rate,
       qpl.estim_accrual_rate,
       qph.limit_exists_flag header_limit_exists,
       qpl.limit_exists_flag line_limit_exists,
       'NQ'                     QUALIFIER_TYPE,
       qpl.charge_type_code,
       qpl.charge_subtype_code,
       qpl.accum_context,           -- accum range break
       qpl.accum_attribute,         -- accum range break
       qpl.accum_attr_run_src_flag  -- accum range break
FROM
       qp_npreq_lines_tmp QPLINES,
       qp_npreq_line_attrs_tmp qplatpr,
       QP_PRICING_ATTRIBUTES QPPROD ,
       qp_npreq_line_attrs_tmp qplatpc,
       QP_LIST_HEADERS_B  QPH  ,
       QP_LIST_LINES QPL ,
       --QP_PRICE_REQ_SOURCES qprs
       QP_PRICE_REQ_SOURCES_V qprs /* yangli */
WHERE
   (qplines.price_flag = G_YES
       OR
      (qplines.price_flag = G_PHASE
       AND
        p_freeze_override_flag = G_YES))
and   ((qph.currency_code is not null and qph.currency_code = qplines.currency_code)
       OR
       qph.currency_code is null) -- optional currency
--AND   qph.currency_code IN (qplines.currency_code , G_ANY_CURRENCY_CODE) --shu, allow currency_code being ANY for modifiers
and   (qplines.unit_price is not null
        or
       qplines.usage_pricing_type = G_AUTHORING_TYPE
	or
       qplines.line_type_code = G_ORDER_LEVEL)
and   (qpl.modifier_level_code = qplines.line_type_code
       OR
       (qpl.modifier_level_code = G_LINE_GROUP and
        nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) <> G_YES)) -- price book
and  qph.active_flag = G_YES
AND   ((qph.ASK_FOR_FLAG = G_YES and exists (SELECT /*+ index(la QP_PREQ_LINE_ATTRS_TMP_N1) */ 'x' --[julin/pricebook]
                                             FROM qp_npreq_line_attrs_tmp la
                                             WHERE attribute_type = 'QUALIFIER'
                                             AND pricing_status_code = G_STATUS_UNCHANGED
                                             AND validated_flag = G_NO
                                             AND list_header_id = qph.list_header_id
                                             AND line_index = qplines.line_index))
        OR qph.ask_for_flag = G_NO)
AND 	QPH.LIST_HEADER_ID = QPPROD.LIST_HEADER_ID
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
AND 	QPL.LIST_LINE_ID = QPPROD.LIST_LINE_ID
AND  QPPROD.PRICING_PHASE_ID = P_PRICING_PHASE_ID
and  nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) BETWEEN
       nvl(qph.start_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE))) AND
       nvl(qph.end_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)))
and   nvl(qplines.start_date_active_first,TRUNC(SYSDATE)) BETWEEN
       nvl(qph.start_date_active_first,nvl(qplines.start_date_active_first,TRUNC(SYSDATE)))
      AND
       nvl(qph.end_date_active_first,nvl(qplines.start_date_active_first,TRUNC(SYSDATE)))
and   nvl(qplines.start_date_active_second,TRUNC(SYSDATE)) BETWEEN
       nvl(qph.start_date_active_second, nvl(qplines.start_date_active_second,TRUNC(SYSDATE)))
      AND
       nvl(qph.end_date_active_second, nvl(qplines.start_date_active_second,TRUNC(SYSDATE)))
and   nvl(qplines.active_date_first_type,'X') =
                nvl(qph.active_date_first_type,nvl(qplines.active_date_first_type,'X'))
and   nvl(qplines.active_date_second_type,'X') =
                nvl(qph.active_date_second_type,nvl(qplines.active_date_second_type,'X'))
and   qplines.pricing_effective_date BETWEEN
         nvl(TRUNC(qpl.start_date_active), qplines.pricing_effective_date)
      AND nvl(TRUNC(qpl.end_date_active),qplines.pricing_effective_date)
and  qplines.priced_uom_code = nvl(qpprod.product_uom_code,qplines.priced_uom_code)
and  qpprod.pricing_phase_id = p_pricing_phase_id
and  qpprod.QUALIFICATION_IND = QP_PREQ_GRP.G_YES_PROD_PRIC_IND
and 	qpprod.product_attribute_context = qplatpr.context
and 	qpprod.product_attribute = qplatpr.attribute
and 	qpprod.product_attr_value = qplatpr.value_from
and 	qpprod.pricing_attribute_context = qplatpc.context
and 	qpprod.pricing_attribute = qplatpc.attribute
and 	(qpprod.pricing_attr_value_from = qplatpc.value_from
         or qpprod.comparison_operator_code IN ('NOT =',G_OPERATOR_BETWEEN))
         --or qpl.price_break_type_code = G_RECURRING_BREAK)
and  qpprod.excluder_flag = G_NO
and  qplatpc.line_index = qplatpr.line_index
and  qplatpr.line_index = qplines.line_index
and  qph.source_system_code = qprs.source_system_code
and  qplines.request_type_code   = qprs.request_type_code
and 	qplatpc.pricing_attr_flag = G_YES
and  qplatpr.attribute_type='PRODUCT'
and  qplatpr.pricing_status_code=G_STATUS_UNCHANGED
and  qplatpc.attribute_type = 'PRICING'
and  qplatpc.pricing_status_code = G_STATUS_UNCHANGED
-- price book
and   (nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) = G_YES and
       qpl.list_line_type_code not in (G_PROMO_GOODS_DISCOUNT,G_OTHER_ITEM_DISCOUNT,
                                       G_COUPON_ISSUE,G_TERMS_SUBSTITUTION,G_ITEM_UPGRADE)
       or
       nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) <> G_YES)
order by 4,2;

/*
INDX,QP_PREQ_GRP.select_modifiers.l_cur,QP_LIST_LINES_N5,PRICING_PHASE_ID,1
INDX,QP_PREQ_GRP.select_modifiers.l_cur,QP_LIST_LINES_N5,QUALIFICATION_IND,2

INDX,QP_PREQ_GRP.select_modifiers.l_cur,QP_LIST_HEADERS_B_N2,LIST_HEADER_ID,1
INDX,QP_PREQ_GRP.select_modifiers.l_cur,QP_LIST_HEADERS_B_N2,ACTIVE_FLAG,2
INDX,QP_PREQ_GRP.select_modifiers.l_cur,QP_LIST_HEADERS_B_N2,CURRENCY_CODE,3

INDX,QP_PREQ_GRP.select_modifiers.l_cur,QP_PRICE_REQ_SOURCES_PK,REQUEST_TYPE_CODE,1
INDX,QP_PREQ_GRP.select_modifiers.l_cur,QP_PRICE_REQ_SOURCES_PK,SOURCE_SYSTEM_CODE,2
*/
cursor l_CUR (p_pricing_phase_id NUMBER) IS
-- NO PRODUCTS AND NO QUALIFIERS
SELECT /*+ NO_EXPAND ORDERED USE_NL(QPL QPH QPRS) index(QPL QP_LIST_LINES_N5) index(qph qp_list_headers_b_n7) l_cur_mod */
       qpl.list_header_id,
       qpl.list_line_id,
       qpl.list_line_type_code,
       qplines.line_index,
       qpl.automatic_flag,
       qpl.modifier_level_code,
       qpl.primary_uom_flag,
       qpl.arithmetic_operator operand_calculation_code,
       qpl.operand             operand_value,
       qpl.net_amount_flag,  --IT net_amount 2720717
       qpl.pricing_group_sequence,
       qph.ask_for_flag,
       qph.list_type_code created_from_list_type,
       qpl.pricing_phase_id,
       qpl.price_break_type_code,
       qpl.incompatibility_grp_code,
       qpl.price_by_formula_id,
       qpl.product_precedence,
       qpl.override_flag,
       qpl.benefit_qty,
       qpl.benefit_uom_code,
       qpl.list_line_no,
       qpl.accrual_flag,
       qpl.accrual_conversion_rate,
       qpl.estim_accrual_rate,
       qph.limit_exists_flag header_limit_exists,
       qpl.limit_exists_flag line_limit_exists,
       qpl.charge_type_code,
       qpl.charge_subtype_code,
       qpl.accum_context,           -- accum range break
       qpl.accum_attribute,         -- accum range break
       qpl.accum_attr_run_src_flag  -- accum range break
from
       qp_npreq_lines_tmp qplines,
       qp_list_lines qpl,
       qp_list_headers_b qph,
       --qp_price_req_sources qprs
       qp_price_req_sources_v qprs /* yangli */
where qph.list_header_id = qpl.list_header_id
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
and   qph.active_flag=G_YES
AND   ((qph.ASK_FOR_FLAG = G_YES and exists (SELECT /*+ index(la QP_PREQ_LINE_ATTRS_TMP_N1) */ 'x' --[julin/pricebook]
                                             FROM qp_npreq_line_attrs_tmp la
                                             WHERE attribute_type = 'QUALIFIER'
                                             AND pricing_status_code = G_STATUS_UNCHANGED
                                             AND validated_flag = G_NO
                                             AND list_header_id = qph.list_header_id
                                             AND line_index = qplines.line_index))
        OR qph.ask_for_flag = G_NO)
and   qpl.pricing_phase_id=p_pricing_phase_id
and   qpl.QUALIFICATION_IND = QP_PREQ_GRP.G_BLIND_DISCOUNT_IND
and   (qplines.price_flag = G_YES
       OR
       (qplines.price_flag = G_PHASE
        AND
        p_freeze_override_flag = G_YES))
and   ((qph.currency_code is not null and qph.currency_code = qplines.currency_code)
       OR
       qph.currency_code is null) -- optional currency
--  AND   qph.currency_code IN (qplines.currency_code , G_ANY_CURRENCY_CODE) --shu, allow currency_code being ANY for modifiers
and   (qplines.unit_price is not null
        or
       qplines.usage_pricing_type = G_AUTHORING_TYPE
	or
       qplines.line_type_code = G_ORDER_LEVEL)
and   (qpl.modifier_level_code = qplines.line_type_code
       OR
       (qpl.modifier_level_code = G_LINE_GROUP and
        nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) <> G_YES)) -- price book
and  nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) BETWEEN
       nvl(qph.start_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE))) AND
       nvl(qph.end_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)))
and   nvl(qplines.start_date_active_first,TRUNC(SYSDATE)) BETWEEN
       nvl(qph.start_date_active_first,nvl(qplines.start_date_active_first,TRUNC(SYSDATE)))
      AND
       nvl(qph.end_date_active_first,nvl(qplines.start_date_active_first,TRUNC(SYSDATE)))
and   nvl(qplines.start_date_active_second,TRUNC(SYSDATE)) BETWEEN
       nvl(qph.start_date_active_second, nvl(qplines.start_date_active_second,TRUNC(SYSDATE)))
      AND
       nvl(qph.end_date_active_second, nvl(qplines.start_date_active_second,TRUNC(SYSDATE)))
and   nvl(qplines.active_date_first_type,'X') =
                nvl(qph.active_date_first_type,nvl(qplines.active_date_first_type,'X'))
and   nvl(qplines.active_date_second_type,'X') =
                nvl(qph.active_date_second_type,nvl(qplines.active_date_second_type,'X'))
and   qplines.pricing_effective_date BETWEEN
         nvl(TRUNC(qpl.start_date_active), qplines.pricing_effective_date)
      AND nvl(TRUNC(qpl.end_date_active),qplines.pricing_effective_date)
and   qph.source_system_code = qprs.source_system_code
and   qplines.request_type_code   = qprs.request_type_code
-- price book
and   (nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) = G_YES and
       qpl.list_line_type_code not in (G_PROMO_GOODS_DISCOUNT,G_OTHER_ITEM_DISCOUNT,
                                       G_COUPON_ISSUE,G_TERMS_SUBSTITUTION,G_ITEM_UPGRADE)
       or
       nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) <> G_YES)
order by 4,2;

/*
INDX,QP_PREQ_GRP.select_modifiers.l_get_excluded_prods_cur,QP_PRICING_ATTRIBUTES_N5,PRICING_PHASE_ID,1
INDX,QP_PREQ_GRP.select_modifiers.l_get_excluded_prods_cur,QP_PRICING_ATTRIBUTES_N5,QUALIFICATION_IND,2
INDX,QP_PREQ_GRP.select_modifiers.l_get_excluded_prods_cur,QP_PRICING_ATTRIBUTES_N5,PRODUCT_ATTRIBUTE_CONTEXT,3
INDX,QP_PREQ_GRP.select_modifiers.l_get_excluded_prods_cur,QP_PRICING_ATTRIBUTES_N5,PRODUCT_ATTRIBUTE,4
INDX,QP_PREQ_GRP.select_modifiers.l_get_excluded_prods_cur,QP_PRICING_ATTRIBUTES_N5,PRODUCT_ATTR_VALUE,5
INDX,QP_PREQ_GRP.select_modifiers.l_get_excluded_prods_cur,QP_PRICING_ATTRIBUTES_N5,EXCLUDER_FLAG,6

INDX,QP_PREQ_GRP.select_modifiers.l_get_excluded_prods_cur,qp_npreq_line_attrs_tmp_N2,PRICING_STATUS_CODE,1
INDX,QP_PREQ_GRP.select_modifiers.l_get_excluded_prods_cur,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE_TYPE,2

INDX,QP_PREQ_GRP.select_modifiers.l_get_excluded_prods_cur,qp_npreq_line_attrs_tmp_N1,LINE_INDEX,1
INDX,QP_PREQ_GRP.select_modifiers.l_get_excluded_prods_cur,qp_npreq_line_attrs_tmp_N1,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.select_modifiers.l_get_excluded_prods_cur,qp_npreq_line_attrs_tmp_N1,PRICING_STATUS_CODE,3
INDX,QP_PREQ_GRP.select_modifiers.l_get_excluded_prods_cur,qp_npreq_line_attrs_tmp_N1,LIST_HEADER_ID,4
INDX,QP_PREQ_GRP.select_modifiers.l_get_excluded_prods_cur,qp_npreq_line_attrs_tmp_N1,LIST_LINE_ID,5



-- Pricing Phase Change
CURSOR l_get_excluded_prods_cur(p_pricing_phase_id NUMBER) IS
SELECT /+ ORDERED USE_NL(b a) INDEX(c qp_preq_line_attrs_tmp_N2) index(b qp_pricing_attributes_n5) l_get_excluded_prods_cur /
        b.list_header_id,
        b.list_line_id,
        c.line_index,
        c.validated_flag,
        c.applied_flag,
        c.attribute_level,
        G_PRICING_TYPE attribute_type,
        c.context,
        c.attribute,
        c.value_from,
        b.product_attr_value setup_value_from,
        G_NO pricing_attr_flag,
        b.product_uom_code,
        b.excluder_flag,
        -1   qualifier_precedence,
        a.line_detail_index
 FROM
        qp_npreq_line_attrs_tmp c,
        qp_pricing_attributes b,
        qp_npreq_line_attrs_tmp a
 WHERE  b.pricing_phase_id = p_pricing_phase_id
 AND    b.qualification_ind in (G_YES_PROD_IND,G_YES_PROD_HDR_QUAL_IND,G_YES_PROD_LINE_QUAL_IND,G_YES_PROD_HDR_LINE_QUAL_IND)
 AND    b.product_attribute_context = c.context
 AND    b.product_attribute = c.attribute
 AND    b.product_attr_value = c.value_from
 AND    b.excluder_flag = G_YES
 AND    c.attribute_type = G_PRODUCT_TYPE
 AND    c.pricing_status_code = G_STATUS_UNCHANGED
 AND    a.list_header_id = b.list_header_id
 AND    a.list_line_id = b.list_line_id
 AND    a.line_index = c.line_index
 AND    a.attribute_type = G_PRODUCT_TYPE
 AND    a.pricing_status_code = G_STATUS_NEW;

*/


/*
INDX,QP_PREQ_GRP.select_modifiers.l_get_line_index_details,QP_PREQ_QUAL_TMP_N5,PRICING_STATUS_CODE,1
INDX,QP_PREQ_GRP.select_modifiers.l_get_line_index_details,QP_PREQ_QUAL_TMP_N5,LINE_INDEX,5
*/
CURSOR l_get_line_index_details IS
SELECT distinct
       c.LIST_HEADER_ID,
       c.LIST_LINE_ID,
       c.CREATED_FROM_LIST_TYPE,
       c.ASK_FOR_FLAG,
       c.LINE_INDEX,
       c.PRICING_EFFECTIVE_DATE,
       c.START_DATE_ACTIVE_FIRST,
       c.START_DATE_ACTIVE_SECOND,
       c.LINE_TYPE_CODE
FROM   QP_PREQ_QUAL_TMP c
WHERE  c.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
AND    c.LINE_INDEX > 0
ORDER  BY c.LINE_INDEX;

/*
INDX,QP_PREQ_GRP.select_modifiers.l_get_line_index_for_quals,qp_npreq_line_attrs_tmp_N2,PRICING_STATUS_CODE,1
INDX,QP_PREQ_GRP.select_modifiers.l_get_line_index_for_quals,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.select_modifiers.l_get_line_index_for_quals,qp_npreq_line_attrs_tmp_N2,CONTEXT,3
INDX,QP_PREQ_GRP.select_modifiers.l_get_line_index_for_quals,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE,4
INDX,QP_PREQ_GRP.select_modifiers.l_get_line_index_for_quals,qp_npreq_line_attrs_tmp_N2,LINE_INDEX,5
INDX,QP_PREQ_GRP.select_modifiers.l_get_line_index_for_quals,qp_npreq_line_attrs_tmp_N2,VALUE_FROM,6

INDX,QP_PREQ_GRP.select_modifiers.l_get_line_index_for_quals,QP_PREQ_QUAL_TMP_N3,PRICING_STATUS_CODE,1

-- Full table scan on qp_npreq_lines_tmp
*/

--hw

CURSOR l_get_line_index_for_quals IS
SELECT /*+ ORDERED USE_NL(c a) index(a qp_preq_line_attrs_tmp_n2) l_get_line_index_for_quals */distinct
       c.LIST_HEADER_ID,
       c.LIST_LINE_ID,
       c.QUALIFIER_ATTRIBUTE_CONTEXT,
       c.QUALIFIER_ATTRIBUTE,
       c.QUALIFIER_ATTRIBUTE_VALUE,
       c.CREATED_FROM_LIST_TYPE,
       c.ASK_FOR_FLAG,
       c.QUALIFIER_GROUPING_NO,
       c.QUALIFIER_GROUP_CNT,
       c.OTHERS_GROUP_CNT,
       c.HEADER_QUALS_EXIST_FLAG,
       c.SEARCH_IND,
       c.VALIDATED_FLAG,
       c.APPLIED_FLAG,
       c.QUALIFIER_ATTRIBUTE_LEVEL,
       c.QUALIFIER_ATTRIBUTE_TYPE,
       c.QUALIFIER_PRECEDENCE,
       c.QUALIFIER_DATATYPE,
       c.QUALIFIER_TYPE,
       c.SETUP_VALUE_FROM,
       c.SETUP_VALUE_TO,
       c.QUALIFIER_PRICING_ATTR_FLAG,
       c.QUALIFIER_OPERATOR_TYPE ,
       c.START_DATE_ACTIVE,
       c.END_DATE_ACTIVE,
       b.LINE_INDEX,
       b.PRICING_EFFECTIVE_DATE,
       b.START_DATE_ACTIVE_FIRST,
       b.START_DATE_ACTIVE_SECOND,
       b.LINE_TYPE_CODE,
       c.PRICING_STATUS_CODE,
       p_pricing_phase_id PRICING_PHASE_ID,
       b.LINE_INDEX || '-' || c.LIST_HEADER_ID || '-' || c.LIST_LINE_ID || '-' || c.QUALIFIER_GROUPING_NO UNIQUE_KEY,
       NULL START_DATE_ACTIVE_H,
       NULL END_DATE_ACTIVE_H,
       NULL START_DATE_ACTIVE_SECOND_S,
       NULL END_DATE_ACTIVE_SECOND_S,
       NULL ACTIVE_DATE_FIRST_TYPE,
       NULL ACTIVE_DATE_SECOND_TYPE,
       c.HEADER_LIMIT_EXISTS,
       a.DERIVED_QUALIFIER_FLAG   -- Added for TCA
FROM   qp_npreq_lines_tmp b,
       QP_PREQ_QUAL_TMP c  ,
       qp_npreq_line_attrs_tmp a
WHERE  a.CONTEXT = c.QUALIFIER_ATTRIBUTE_CONTEXT
AND    a.ATTRIBUTE = c.QUALIFIER_ATTRIBUTE
AND    a.VALUE_FROM = c.QUALIFIER_ATTRIBUTE_VALUE
AND    a.ATTRIBUTE_TYPE = G_QUALIFIER_TYPE
AND    a.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
AND    c.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
AND    c.PRICING_PHASE_ID = p_pricing_phase_id
AND    a.LINE_INDEX = b.LINE_INDEX
AND   ((c.ASK_FOR_FLAG = G_YES and exists (SELECT /*+ index(la QP_PREQ_LINE_ATTRS_TMP_N1) */ 'x' --[julin/pricebook]
                                             FROM qp_npreq_line_attrs_tmp la
                                             WHERE attribute_type = 'QUALIFIER'
                                             AND pricing_status_code = G_STATUS_UNCHANGED
                                             AND validated_flag = G_NO
                                             AND list_header_id = c.list_header_id
                                             AND line_index = b.line_index))
        OR c.ASK_FOR_FLAG = G_NO)
AND    (b.UNIT_PRICE is not null
          or
        b.usage_pricing_type = G_AUTHORING_TYPE
	or
        b.LINE_TYPE_CODE = G_ORDER_LEVEL)
AND    (b.PRICE_FLAG = G_YES
        OR
       (b.PRICE_FLAG = G_PHASE
        AND
        p_freeze_override_flag = G_YES))
AND   TRUNC(nvl(b.PRICING_EFFECTIVE_DATE,SYSDATE))   BETWEEN                      --pricing date
      TRUNC(nvl(c.START_DATE_ACTIVE,nvl(b.PRICING_EFFECTIVE_DATE,SYSDATE))) AND   --qualifier start date
      TRUNC(nvl(c.END_DATE_ACTIVE,nvl(b.PRICING_EFFECTIVE_DATE,SYSDATE))) AND     --qualifier end date
      TRUNC(nvl(b.PRICING_EFFECTIVE_DATE,SYSDATE))   BETWEEN                      --pricing date
      TRUNC(nvl(c.START_DATE_ACTIVE_H,nvl(b.PRICING_EFFECTIVE_DATE,SYSDATE))) AND --list header start date
      TRUNC(nvl(c.END_DATE_ACTIVE_H,nvl(b.PRICING_EFFECTIVE_DATE,SYSDATE))) AND   --list header end date
      TRUNC(nvl(b.START_DATE_ACTIVE_FIRST,nvl(b.PRICING_EFFECTIVE_DATE,SYSDATE)))
      BETWEEN
      TRUNC(nvl(c.START_DATE_ACTIVE_FIRST,nvl(b.START_DATE_ACTIVE_FIRST,nvl(b.PRICING_EFFECTIVE_DATE,SYSDATE)))) AND -- Order Date
      TRUNC(nvl(c.END_DATE_ACTIVE_FIRST,nvl(b.START_DATE_ACTIVE_FIRST,nvl(b.PRICING_EFFECTIVE_DATE,SYSDATE)))) AND
      TRUNC(nvl(b.START_DATE_ACTIVE_SECOND,nvl(b.PRICING_EFFECTIVE_DATE,SYSDATE)))
      BETWEEN
      TRUNC(nvl(c.START_DATE_ACTIVE_SECOND,nvl(b.START_DATE_ACTIVE_SECOND,nvl(b.PRICING_EFFECTIVE_DATE,SYSDATE)))) AND --Ship Date
      TRUNC(nvl(c.END_DATE_ACTIVE_SECOND,nvl(b.START_DATE_ACTIVE_SECOND,nvl(b.PRICING_EFFECTIVE_DATE,SYSDATE))))
AND   nvl(b.ACTIVE_DATE_FIRST_TYPE,'X')  = nvl(c.ACTIVE_DATE_FIRST_TYPE,nvl(b.ACTIVE_DATE_FIRST_TYPE,'X'))    -- ORD
AND   nvl(b.ACTIVE_DATE_SECOND_TYPE,'X') = nvl(c.ACTIVE_DATE_SECOND_TYPE,nvl(b.ACTIVE_DATE_SECOND_TYPE,'X')) -- SHIP
ORDER BY 1,2,3 ;

/*join cursor for l_get_line_index_for_quals and perform_qualifier_grouping
CURSOR l_get_line_index_for_quals_n IS
SELECT /* ORDERED USE_NL(c a) index(a qp_npreq_line_attrs_tmp_n2) l_get_line_index_for_quals /
distinct
       c.LIST_HEADER_ID,
       c.LIST_LINE_ID,
       c.QUALIFIER_ATTRIBUTE_CONTEXT,
       c.QUALIFIER_ATTRIBUTE,
       c.QUALIFIER_ATTRIBUTE_VALUE,
       c.CREATED_FROM_LIST_TYPE,
       c.ASK_FOR_FLAG,
       c.QUALIFIER_GROUPING_NO,
       c.QUALIFIER_GROUP_CNT,
       c.OTHERS_GROUP_CNT,
       c.HEADER_QUALS_EXIST_FLAG,
       c.SEARCH_IND,
       c.VALIDATED_FLAG,
       c.APPLIED_FLAG,
       c.QUALIFIER_ATTRIBUTE_LEVEL,
       c.QUALIFIER_ATTRIBUTE_TYPE,
       c.QUALIFIER_PRECEDENCE,
       c.QUALIFIER_DATATYPE,
       c.QUALIFIER_TYPE,
       c.SETUP_VALUE_FROM,
       c.SETUP_VALUE_TO,
       c.QUALIFIER_PRICING_ATTR_FLAG,
       c.QUALIFIER_OPERATOR_TYPE ,
       c.START_DATE_ACTIVE,
       c.END_DATE_ACTIVE,
       b.LINE_INDEX,
       b.PRICING_EFFECTIVE_DATE,
       b.START_DATE_ACTIVE_FIRST,
       b.START_DATE_ACTIVE_SECOND,
       b.LINE_TYPE_CODE,
       c.PRICING_STATUS_CODE,
       p_pricing_phase_id PRICING_PHASE_ID,
       b.LINE_INDEX || '-' || c.LIST_HEADER_ID || '-' || c.LIST_LINE_ID || '-' || c.QUALIFIER_GROUPING_NO UNIQUE_KEY,
       NULL START_DATE_ACTIVE_H,
       NULL END_DATE_ACTIVE_H,
       NULL START_DATE_ACTIVE_SECOND_S,
       NULL END_DATE_ACTIVE_SECOND_S,
       NULL ACTIVE_DATE_FIRST_TYPE,
       NULL ACTIVE_DATE_SECOND_TYPE,
       c.HEADER_LIMIT_EXISTS
FROM   qp_npreq_lines_tmp b,
       QP_PREQ_QUAL_TMP c  ,
       qp_npreq_line_attrs_tmp a
WHERE  a.CONTEXT = c.QUALIFIER_ATTRIBUTE_CONTEXT
AND    a.ATTRIBUTE = c.QUALIFIER_ATTRIBUTE
AND    a.VALUE_FROM = c.QUALIFIER_ATTRIBUTE_VALUE
AND    a.ATTRIBUTE_TYPE = G_QUALIFIER_TYPE
AND    a.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
AND    c.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
AND    c.PRICING_PHASE_ID = p_pricing_phase_id
and    c.qualifier_grouping_no <> -1
and    c.other_group_cnt + c.null_group_cnt = c.qualifier_group_cnt
AND    a.LINE_INDEX = b.LINE_INDEX
AND   ((c.ASK_FOR_FLAG = G_YES and
        (c.LIST_HEADER_ID,b.LINE_INDEX) IN  (SELECT list_header_id,line_index
                                             FROM qp_npreq_line_attrs_tmp
                                             WHERE attribute_type = 'QUALIFIER'
                                             AND pricing_status_code = G_STATUS_UNCHANGED
                                             AND validated_flag = G_NO
                                             AND list_header_id IS NOT NULL))
        OR c.ASK_FOR_FLAG = G_NO)
AND    (b.UNIT_PRICE is not null
          or
        b.usage_pricing_type = G_AUTHORING_TYPE
	or
        b.LINE_TYPE_CODE = G_ORDER_LEVEL)
AND    (b.PRICE_FLAG = G_YES
        OR
       (b.PRICE_FLAG = G_PHASE
        AND
        p_freeze_override_flag = G_YES))
AND   TRUNC(nvl(b.PRICING_EFFECTIVE_DATE,SYSDATE))   BETWEEN                      --pricing date
      TRUNC(nvl(c.START_DATE_ACTIVE,nvl(b.PRICING_EFFECTIVE_DATE,SYSDATE))) AND   --qualifier start date
      TRUNC(nvl(c.END_DATE_ACTIVE,nvl(b.PRICING_EFFECTIVE_DATE,SYSDATE))) AND     --qualifier end date
      TRUNC(nvl(b.PRICING_EFFECTIVE_DATE,SYSDATE))   BETWEEN                      --pricing date
      TRUNC(nvl(c.START_DATE_ACTIVE_H,nvl(b.PRICING_EFFECTIVE_DATE,SYSDATE))) AND --list header start date
      TRUNC(nvl(c.END_DATE_ACTIVE_H,nvl(b.PRICING_EFFECTIVE_DATE,SYSDATE))) AND   --list header end date
      TRUNC(nvl(b.START_DATE_ACTIVE_FIRST,nvl(b.PRICING_EFFECTIVE_DATE,SYSDATE)))
      BETWEEN
      TRUNC(nvl(c.START_DATE_ACTIVE_FIRST,nvl(b.START_DATE_ACTIVE_FIRST,nvl(b.PRICING_EFFECTIVE_DATE,SYSDATE)))) AND -- Order Date
      TRUNC(nvl(c.END_DATE_ACTIVE_FIRST,nvl(b.START_DATE_ACTIVE_FIRST,nvl(b.PRICING_EFFECTIVE_DATE,SYSDATE)))) AND
      TRUNC(nvl(b.START_DATE_ACTIVE_SECOND,nvl(b.PRICING_EFFECTIVE_DATE,SYSDATE)))
      BETWEEN
      TRUNC(nvl(c.START_DATE_ACTIVE_SECOND,nvl(b.START_DATE_ACTIVE_SECOND,nvl(b.PRICING_EFFECTIVE_DATE,SYSDATE)))) AND --Ship Date
      TRUNC(nvl(c.END_DATE_ACTIVE_SECOND,nvl(b.START_DATE_ACTIVE_SECOND,nvl(b.PRICING_EFFECTIVE_DATE,SYSDATE))))
AND   nvl(b.ACTIVE_DATE_FIRST_TYPE,'X')  = nvl(c.ACTIVE_DATE_FIRST_TYPE,nvl(b.ACTIVE_DATE_FIRST_TYPE,'X'))    -- ORD
AND   nvl(b.ACTIVE_DATE_SECOND_TYPE,'X') = nvl(c.ACTIVE_DATE_SECOND_TYPE,nvl(b.ACTIVE_DATE_SECOND_TYPE,'X')) -- SHIP
union all
SELECT /* ORDERED USE_NL(c a) index(a qp_npreq_line_attrs_tmp_n2) l_get_line_index_for_quals /
distinct
       c.LIST_HEADER_ID,
       c.LIST_LINE_ID,
       c.QUALIFIER_ATTRIBUTE_CONTEXT,
       c.QUALIFIER_ATTRIBUTE,
       c.QUALIFIER_ATTRIBUTE_VALUE,
       c.CREATED_FROM_LIST_TYPE,
       c.ASK_FOR_FLAG,
       c.QUALIFIER_GROUPING_NO,
       c.QUALIFIER_GROUP_CNT,
       c.OTHERS_GROUP_CNT,
       c.HEADER_QUALS_EXIST_FLAG,
       c.SEARCH_IND,
       c.VALIDATED_FLAG,
       c.APPLIED_FLAG,
       c.QUALIFIER_ATTRIBUTE_LEVEL,
       c.QUALIFIER_ATTRIBUTE_TYPE,
       c.QUALIFIER_PRECEDENCE,
       c.QUALIFIER_DATATYPE,
       c.QUALIFIER_TYPE,
       c.SETUP_VALUE_FROM,
       c.SETUP_VALUE_TO,
       c.QUALIFIER_PRICING_ATTR_FLAG,
       c.QUALIFIER_OPERATOR_TYPE ,
       c.START_DATE_ACTIVE,
       c.END_DATE_ACTIVE,
       b.LINE_INDEX,
       b.PRICING_EFFECTIVE_DATE,
       b.START_DATE_ACTIVE_FIRST,
       b.START_DATE_ACTIVE_SECOND,
       b.LINE_TYPE_CODE,
       c.PRICING_STATUS_CODE,
       p_pricing_phase_id PRICING_PHASE_ID,
       b.LINE_INDEX || '-' || c.LIST_HEADER_ID || '-' || c.LIST_LINE_ID || '-' || c.QUALIFIER_GROUPING_NO UNIQUE_KEY,
       NULL START_DATE_ACTIVE_H,
       NULL END_DATE_ACTIVE_H,
       NULL START_DATE_ACTIVE_SECOND_S,
       NULL END_DATE_ACTIVE_SECOND_S,
       NULL ACTIVE_DATE_FIRST_TYPE,
       NULL ACTIVE_DATE_SECOND_TYPE,
       c.HEADER_LIMIT_EXISTS
FROM   qp_npreq_lines_tmp b,
       QP_PREQ_QUAL_TMP c  ,
       qp_npreq_line_attrs_tmp a
WHERE  a.CONTEXT = c.QUALIFIER_ATTRIBUTE_CONTEXT
AND    a.ATTRIBUTE = c.QUALIFIER_ATTRIBUTE
AND    a.VALUE_FROM = c.QUALIFIER_ATTRIBUTE_VALUE
AND    a.ATTRIBUTE_TYPE = G_QUALIFIER_TYPE
AND    a.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
AND    c.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
AND    c.PRICING_PHASE_ID = p_pricing_phase_id
and    c.qualifier_grouping_no = -1
and    c.null_group_cnt = c.qualifier_group_cnt
and    nvl(c.others_group_cnt,0) = 0  -- to indicate that there are no other groups(coming from qp_qualifiers table)
AND    a.LINE_INDEX = b.LINE_INDEX
AND   ((c.ASK_FOR_FLAG = G_YES and
        (c.LIST_HEADER_ID,b.LINE_INDEX) IN  (SELECT list_header_id,line_index
                                             FROM qp_npreq_line_attrs_tmp
                                             WHERE attribute_type = 'QUALIFIER'
                                             AND pricing_status_code = G_STATUS_UNCHANGED
                                             AND validated_flag = G_NO
                                             AND list_header_id IS NOT NULL))
        OR c.ASK_FOR_FLAG = G_NO)
AND    (b.UNIT_PRICE is not null
          or
        b.usage_pricing_type = G_AUTHORING_TYPE
	or
        b.LINE_TYPE_CODE = G_ORDER_LEVEL)
AND    (b.PRICE_FLAG = G_YES
        OR
       (b.PRICE_FLAG = G_PHASE
        AND
        p_freeze_override_flag = G_YES))
AND   TRUNC(nvl(b.PRICING_EFFECTIVE_DATE,SYSDATE))   BETWEEN                      --pricing date
      TRUNC(nvl(c.START_DATE_ACTIVE,nvl(b.PRICING_EFFECTIVE_DATE,SYSDATE))) AND   --qualifier start date
      TRUNC(nvl(c.END_DATE_ACTIVE,nvl(b.PRICING_EFFECTIVE_DATE,SYSDATE))) AND     --qualifier end date
      TRUNC(nvl(b.PRICING_EFFECTIVE_DATE,SYSDATE))   BETWEEN                      --pricing date
      TRUNC(nvl(c.START_DATE_ACTIVE_H,nvl(b.PRICING_EFFECTIVE_DATE,SYSDATE))) AND --list header start date
      TRUNC(nvl(c.END_DATE_ACTIVE_H,nvl(b.PRICING_EFFECTIVE_DATE,SYSDATE))) AND   --list header end date
      TRUNC(nvl(b.START_DATE_ACTIVE_FIRST,nvl(b.PRICING_EFFECTIVE_DATE,SYSDATE)))
      BETWEEN
      TRUNC(nvl(c.START_DATE_ACTIVE_FIRST,nvl(b.START_DATE_ACTIVE_FIRST,nvl(b.PRICING_EFFECTIVE_DATE,SYSDATE)))) AND -- Order Date
      TRUNC(nvl(c.END_DATE_ACTIVE_FIRST,nvl(b.START_DATE_ACTIVE_FIRST,nvl(b.PRICING_EFFECTIVE_DATE,SYSDATE)))) AND
      TRUNC(nvl(b.START_DATE_ACTIVE_SECOND,nvl(b.PRICING_EFFECTIVE_DATE,SYSDATE)))
      BETWEEN
      TRUNC(nvl(c.START_DATE_ACTIVE_SECOND,nvl(b.START_DATE_ACTIVE_SECOND,nvl(b.PRICING_EFFECTIVE_DATE,SYSDATE)))) AND --Ship Date
      TRUNC(nvl(c.END_DATE_ACTIVE_SECOND,nvl(b.START_DATE_ACTIVE_SECOND,nvl(b.PRICING_EFFECTIVE_DATE,SYSDATE))))
AND   nvl(b.ACTIVE_DATE_FIRST_TYPE,'X')  = nvl(c.ACTIVE_DATE_FIRST_TYPE,nvl(b.ACTIVE_DATE_FIRST_TYPE,'X'))    -- ORD
AND   nvl(b.ACTIVE_DATE_SECOND_TYPE,'X') = nvl(c.ACTIVE_DATE_SECOND_TYPE,nvl(b.ACTIVE_DATE_SECOND_TYPE,'X')); -- SHIP
*/

/*
INDX,QP_PREQ_GRP.select_modifiers.l_get_satisfied_quals,QP_PREQ_QUAL_TMP_N2,LINE_INDEX,1
INDX,QP_PREQ_GRP.select_modifiers.l_get_satisfied_quals,QP_PREQ_QUAL_TMP_N2,PRICING_PHASE_ID,2
INDX,QP_PREQ_GRP.select_modifiers.l_get_satisfied_quals,QP_PREQ_QUAL_TMP_N2,PRICING_STATUS_CODE,3
INDX,QP_PREQ_GRP.select_modifiers.l_get_satisfied_quals,QP_PREQ_QUAL_TMP_N2,LIST_HEADER_ID,4
INDX,QP_PREQ_GRP.select_modifiers.l_get_satisfied_quals,QP_PREQ_QUAL_TMP_N2,LIST_LINE_ID,5
*/
CURSOR l_get_satisfied_quals(p_list_header_id NUMBER , p_list_line_id NUMBER, p_line_index NUMBER)  IS
SELECT /*+ INDEX(c QP_PREQ_QUAL_TMP_N1) l_get_satisfied_quals */
       c.LIST_HEADER_ID,
       c.LIST_LINE_ID,
       c.QUALIFIER_GROUP_CNT,
       c.HEADER_QUALS_EXIST_FLAG,
       c.SEARCH_IND,
       c.VALIDATED_FLAG,
       c.APPLIED_FLAG,
       c.QUALIFIER_ATTRIBUTE_LEVEL,
       c.QUALIFIER_ATTRIBUTE_TYPE,
       c.QUALIFIER_ATTRIBUTE_CONTEXT,
       c.QUALIFIER_ATTRIBUTE,
       c.QUALIFIER_ATTRIBUTE_VALUE,
       c.QUALIFIER_GROUPING_NO ,
       c.QUALIFIER_PRECEDENCE,
       c.QUALIFIER_DATATYPE,
       c.SETUP_VALUE_FROM,
       c.SETUP_VALUE_TO,
       c.QUALIFIER_PRICING_ATTR_FLAG,
       c.QUALIFIER_OPERATOR_TYPE ,
       c.CREATED_FROM_LIST_TYPE,
       decode(c.LIST_LINE_ID,-1,'HQ','LQ') QUALIFIER_TYPE
FROM   QP_PREQ_QUAL_TMP c
WHERE  c.LIST_HEADER_ID = p_list_header_id
AND    c.LIST_LINE_ID IN (p_list_line_id,-1)
AND    c.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
AND    c.LINE_INDEX = p_line_index
AND    c.PRICING_PHASE_ID = p_pricing_phase_id
UNION
-- To get the -1 group qualifiers for non -1 groups only
-- non -1 groups = OTHERS_GROUP_CNT <> 0
SELECT /*+ INDEX(c QP_PREQ_QUAL_TMP_N1) l_get_satisfied_quals */
       c.LIST_HEADER_ID,
       c.LIST_LINE_ID,
       c.QUALIFIER_GROUP_CNT,
       c.HEADER_QUALS_EXIST_FLAG,
       c.SEARCH_IND,
       c.VALIDATED_FLAG,
       c.APPLIED_FLAG,
       c.QUALIFIER_ATTRIBUTE_LEVEL,
       c.QUALIFIER_ATTRIBUTE_TYPE,
       c.QUALIFIER_ATTRIBUTE_CONTEXT,
       c.QUALIFIER_ATTRIBUTE,
       c.QUALIFIER_ATTRIBUTE_VALUE,
       c.QUALIFIER_GROUPING_NO ,
       c.QUALIFIER_PRECEDENCE,
       c.QUALIFIER_DATATYPE,
       c.SETUP_VALUE_FROM,
       c.SETUP_VALUE_TO,
       c.QUALIFIER_PRICING_ATTR_FLAG,
       c.QUALIFIER_OPERATOR_TYPE ,
       c.CREATED_FROM_LIST_TYPE,
       decode(c.LIST_LINE_ID,-1,'HQ','LQ') QUALIFIER_TYPE
FROM   QP_PREQ_QUAL_TMP c
WHERE  c.LIST_HEADER_ID = p_list_header_id
AND    c.LIST_LINE_ID IN (p_list_line_id,-1)
AND    c.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
AND    c.PRICING_PHASE_ID = p_pricing_phase_id
AND    c.NULL_GROUP_CNT <> 0
AND    c.OTHERS_GROUP_CNT <> 0 -- meaning there are other groups for which this cursor selects the -1 group qualifiers in perf path
AND    c.QUALIFIER_GROUPING_NO = -1;

-- 3520634 start
-- get rows with search ind 2
CURSOR get_list_headers_with_ind2 IS
SELECT/*+ ORDERED */ 'x'
FROM  qp_qualifiers b
WHERE b.search_ind = 2
and b.list_header_id in (select distinct a.list_header_id from qp_preq_qual_tmp a
                         where a.PRICING_STATUS_CODE = G_STATUS_UNCHANGED
                         and a.search_ind = 1
                         and a.pricing_phase_id = p_pricing_phase_id)
AND   rownum = 1;
-- 3520634 end

J PLS_INTEGER:=1;
N PLS_INTEGER:=1;
M PLS_INTEGER:=1;
K PLS_INTEGER:=1;

l_status VARCHAR2(30);
l_status_code VARCHAR2(30);
l_status_text VARCHAR2(240);
l_list_line_id NUMBER := 0 ;
l_line_index PLS_INTEGER := 0 ;
l_routine VARCHAR2(240):='Routine:QP_PREQ_GRP.SELECT_MODIFIERS';
l_blind_discount VARCHAR2(30);

l_line_detail_index PLS_INTEGER;
l_prod_qual_count PLS_INTEGER := 0;
l_prod_cur_count PLS_INTEGER := 0;
v_qualifiers_satisfied BOOLEAN;

l_list_header_id NUMBER := -9999;
l_lst_line_id    NUMBER := -9999;
l_line_indx      NUMBER := -9999;
l_line_detail_indx NUMBER := -9999;
l_qualifier_type VARCHAR2(20);
l_satisfied_qualifier_type VARCHAR2(20);
l_satisfied_list_header_id NUMBER := -9999;
l_satisfied_lst_line_id    NUMBER := -9999;
l_satisfied_line_indx      NUMBER := -9999;
l_satisfied_line_detail_indx NUMBER := -9999;
l_satisfied_incomp_code VARCHAR2(30);
l_satisfied_modifier_lvl_code VARCHAR2(30);
l_satisfied_primary_uom_flag VARCHAR2(30);
l_exe_count NUMBER := 0;
lq_line_index              NUMBER := -9999;
lq_list_line_id            NUMBER := -9999;
l_dummy VARCHAR2(1); -- 3520634

l_satis_quals_opt	VARCHAR2(1);
--l_perf_pvt_enabled      VARCHAR2(1) := nvl(QP_PERF_PVT.enabled,G_NO);

E_ROUTINE_ERRORS         EXCEPTION;

nROWS CONSTANT NUMBER := 1000;

BEGIN

   x_status_code := FND_API.G_RET_STS_SUCCESS;
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('Before Big Select');

   END IF;
   --hw
   l_satis_quals_opt := nvl(fnd_profile.value('QP_SATIS_QUALS_OPT'), 'Y');
   --[julin/pricebook]
   IF nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) = G_YES THEN
     l_satis_quals_opt := 'N';
   END IF;

   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('QP_SATIS_QUALS_OPT: ' || l_satis_quals_opt);

   END IF;
   --l_prod_qual_count := 0;
   l_prod_cur_count := 0;

   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('Caching Header Qualifiers for phase : ' || p_pricing_phase_id);
   END IF;
   qp_debug_util.tstart('CACHE_HEADER_QUALIFIERS','Caching the header qualifiers');
   Cache_Header_Qualifiers(p_pricing_phase_id,l_status_code,l_status_text);
   qp_debug_util.tstop('CACHE_HEADER_QUALIFIERS');
   IF l_status_code <> FND_API.G_RET_STS_SUCCESS THEN
     RAISE E_ROUTINE_ERRORS;
   END IF;

   --Added call for 3520634
   qp_debug_util.tstart('DELETE_HDRS_WITH_NO_PRODATTR','Deleting the headers with no product attribute');
   Delete_Hdrs_With_No_ProdAttr(p_pricing_phase_id,l_status_code,l_status_text);
   qp_debug_util.tstop('DELETE_HDRS_WITH_NO_PRODATTR');
   IF l_status_code <> FND_API.G_RET_STS_SUCCESS THEN
     RAISE E_ROUTINE_ERRORS;
   END IF;


   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('Caching Line Qualifiers for satisfied headers and pure line quals for phase : ' || p_pricing_phase_id);
   END IF;
   qp_debug_util.tstart('CACHE_LINE_QUALIFIERS','Caching the Line qualifiers');
   Cache_Line_Qualifiers(p_pricing_phase_id,l_status_code,l_status_text);
   qp_debug_util.tstop('CACHE_LINE_QUALIFIERS');
   IF l_status_code <> FND_API.G_RET_STS_SUCCESS THEN
     RAISE E_ROUTINE_ERRORS;
   END IF;

 IF (G_QUALIFIER_TEMP <> 'E' OR G_LINE_QUALIFIER_TEMP <> 'E') THEN
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('Caching Qualifiers for phase : ' || p_pricing_phase_id || ' Successful');
   END IF;
  -- For each primary search list header , list line and qualifier grouping no
/*
INDX,QP_PREQ_GRP.select_modifiers.select_modifiers_sel1,QP_PREQ_QUAL_TMP_N5,PRICING_STATUS_CODE,1
*/
  /*  FOR c1 in (select list_header_id , list_line_id , qualifier_grouping_no
		   from  qp_preq_qual_tmp
		   where pricing_status_code = G_STATUS_UNCHANGED
		   and   pricing_phase_id = p_pricing_phase_id
		   order by list_header_id,list_line_id,qualifier_grouping_no) LOOP
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('Executing Mini Caching Qualifiers for phase : ' || p_pricing_phase_id ||
			 'List Header id : ' || c1.list_header_id || ' List Line Id : ' || c1.list_line_id ||
			 'Grouping No: ' || c1.qualifier_grouping_no);
   END IF;
   Mini_Cache_Qualifiers(c1.list_header_id , c1.list_line_id , c1.qualifier_grouping_no,
					p_pricing_phase_id,l_status_code,l_status_text);
   IF l_status_code <> FND_API.G_RET_STS_SUCCESS THEN
     RAISE E_ROUTINE_ERRORS;
   END IF;
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('Executing Mini Caching Qualifiers for phase : ' || p_pricing_phase_id || ' Successful');
   END IF;
  END LOOP;  */

  -- Added for 3520634. Mini_Cache_Qualifiers is meant to search qualifiers with search_ind=2.
  --Call to Mini_Cache_Qualifiers can be saved if there is no header level qualifier with
  -- search_ind=2 for list_headers_ids selected by engine so far.

  OPEN  get_list_headers_with_ind2;
  FETCH get_list_headers_with_ind2 INTO l_dummy;
  CLOSE get_list_headers_with_ind2;

  IF (l_dummy = 'x') THEN  --Added if clause for 3520634
  	qp_debug_util.tstart('MINI_CACHE_QUALIFIERS','Caching the qualifiers with search_ind=2');
  	Mini_Cache_Qualifiers(-999 , -999 , -999, p_pricing_phase_id,l_status_code,l_status_text);
	qp_debug_util.tstop('MINI_CACHE_QUALIFIERS');
  	IF l_status_code <> FND_API.G_RET_STS_SUCCESS THEN
     		RAISE E_ROUTINE_ERRORS;
  	END IF;
  	IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  		engine_debug('Executing Mini Caching Qualifiers for phase : ' || p_pricing_phase_id || ' Successful');

  	END IF;
  END IF;
  -- Qualifier Grouping
  qp_debug_util.tstart('MINI_CACHE_QUALIFIERS', 'Performing the Qualifier Grouping');
  Perform_Qualifier_Grouping(G_NO,p_pricing_phase_id,l_status_code,l_status_text);
  qp_debug_util.tstop('MINI_CACHE_QUALIFIERS');

  IF l_status_code <> FND_API.G_RET_STS_SUCCESS THEN
     RAISE E_ROUTINE_ERRORS;
  END IF;

	--hw
	--if QP_PERF_PVT.enabled = 'Y' then
	--if l_perf_pvt_enabled = 'Y' then
/*

 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
	engine_debug('hw: l_get_line_index_for_quals_n path');

 END IF;
	-- update null group count
	--update qp_preq_qual_tmp qpqt1
        --set qpqt1.null_group_cnt = (select count(*)
                                    from qp_preq_qual_tmp qpqt2
                                    where qpqt2.list_header_id = qpqt1.list_header_id
                                    and qpqt2.list_line_id = qpqt1.list_line_id
                                    and qpqt2.qualifier_grouping_no = -1
                                    and qpqt2.pricing_status_code <> G_DELETED_GRP
                                    and qpqt2.pricing_phase_id = p_pricing_phase_id
                                    and qpqt2.pricing_status_code = G_STATUS_UNCHANGED)
        where qpqt1.pricing_phase_id = p_pricing_phase_id
        and   qpqt1.pricing_status_code = G_STATUS_UNCHANGED;

	--and qpqt1.qualifier_grouping_no = -1; -- should update all groups and not just -1 groups
        -- as it is used as null_group_count + other_group_cnt = qualifier_group_cnt

	-- update other group count
	--update qp_preq_qual_tmp qpqt1
        --set qpqt1.other_group_cnt = (select count(*)
                                     from qp_preq_qual_tmp qpqt2
                                     where qpqt2.list_header_id = qpqt1.list_header_id
                                     and qpqt2.list_line_id = qpqt1.list_line_id
                                     and qpqt2.qualifier_grouping_no <> -1
                                     and qpqt2.pricing_status_code <> G_DELETED_GRP
                                     and qpqt2.pricing_phase_id = p_pricing_phase_id
                                     and qpqt1.qualifier_grouping_no = qpqt2.qualifier_grouping_no
                                     and qpqt2.pricing_status_code = G_STATUS_UNCHANGED)
        where qpqt1.pricing_phase_id = p_pricing_phase_id
        and   qpqt1.pricing_status_code = G_STATUS_UNCHANGED
        and   qpqt1.qualifier_grouping_no <> -1;

 IF (G_DEBUG_ENGINE = FND_API.G_TRUE) THEN
  for i in (select list_header_id,list_line_id,qualifier_grouping_no,null_group_cnt,other_group_cnt,search_ind,
            qualifier_group_cnt,others_group_cnt,qualifier_attribute_context,qualifier_attribute,qualifier_attribute_value
            from qp_preq_qual_tmp
            where pricing_phase_id = p_pricing_phase_id
            and pricing_status_code = 'X'
            order by 1,2,3)
  loop
   QP_PREQ_GRP.engine_debug('List Header Id: ' || i.list_header_id);
   QP_PREQ_GRP.engine_debug('List Line Id: ' || i.list_line_id);
   QP_PREQ_GRP.engine_debug('Grouping No: ' || i.qualifier_grouping_no);
   QP_PREQ_GRP.engine_debug('Null Group Cnt: ' || i.null_group_cnt);
   QP_PREQ_GRP.engine_debug('Other Group Cnt: ' || i.other_group_cnt);
   QP_PREQ_GRP.engine_debug('Satisfied Group Cnt: ' || i.qualifier_group_cnt);
   QP_PREQ_GRP.engine_debug('Search Ind: ' || i.search_ind);
   QP_PREQ_GRP.engine_debug('Others group cnt: ' || i.others_group_cnt);
   QP_PREQ_GRP.engine_debug('Qualifier Context: ' || i.qualifier_attribute_context);
   QP_PREQ_GRP.engine_debug('Qualifier Attribute: ' || i.qualifier_attribute);
   QP_PREQ_GRP.engine_debug('Qualifier Value: ' || i.qualifier_attribute_value);
  end loop;
 END IF;

  OPEN l_get_line_index_for_quals_n;

  LOOP
   G_LIST_HEADER_ID_TBL_Q.delete;
   G_LIST_LINE_ID_TBL_Q.delete;
   G_CONTEXT_TBL_Q.delete;
   G_ATTRIBUTE_TBL_Q.delete;
   G_VALUE_FROM_TBL_Q.delete;
   G_LIST_TYPE_CODE_TBL_Q.delete;
   G_ASK_FOR_FLAG_TBL_Q.delete;
   G_GROUPING_NO_TBL_Q.delete;
   G_QUALIFIER_GROUP_CNT_TBL_Q.delete;
   G_OTHERS_GROUP_CNT_TBL_Q.delete;
   G_HEADER_QUALS_EXIST_FLG_TBL_Q.delete;
   G_SEARCH_IND_TBL_Q.delete;
   G_VALIDATED_FLAG_TBL_Q.delete;
   G_APPLIED_FLAG_TBL_Q.delete;
   G_ATTRIBUTE_LEVEL_TBL_Q.delete;
   G_ATTRIBUTE_TYPE_TBL_Q.delete;
   G_QUALIFIER_PRECEDENCE_TBL_Q.delete;
   G_DATATYPE_TBL_Q.delete;
   G_QUALIFIER_TYPE_TBL_Q.delete;
   G_SETUP_VALUE_FROM_TBL_Q.delete;
   G_SETUP_VALUE_TO_TBL_Q.delete;
   G_PRICING_ATTR_FLAG_TBL_Q.delete;
   G_OPERATOR_TYPE_TBL_Q.delete;
   G_LINE_INDEX_TBL_Q.delete;
   G_PRICING_EFFECTIVE_DATE_TBL_Q.delete;
   G_START_DATE_ACTIVE_FIR_TBL_Q.delete;
   G_END_DATE_ACTIVE_FIR_TBL_Q.delete;
   G_LINE_TYPE_CODE_TBL_Q.delete;
   G_PRICING_STATUS_CODE_TBL_Q.delete;
   G_PRICING_PHASE_ID_TBL_Q.delete;
   G_UNIQUE_KEY_TBL_Q.delete;
   G_START_DATE_ACTIVE_TBL_H_Q.delete;
   G_END_DATE_ACTIVE_TBL_H_Q.delete;
   G_START_DATE_ACTIVE_SEC_TBL_Q.delete;
   G_END_DATE_ACTIVE_SEC_TBL_Q.delete;
   G_ACTIVE_DATE_FIR_TYPE_TBL_Q.delete;
   G_ACTIVE_DATE_SEC_TYPE_TBL_Q.delete;
   G_HEADER_LIMIT_EXISTS_TBL_Q.delete;

  FETCH l_get_line_index_for_quals_n
  BULK COLLECT INTO
     G_LIST_HEADER_ID_TBL_Q
   , G_LIST_LINE_ID_TBL_Q
   , G_CONTEXT_TBL_Q
   , G_ATTRIBUTE_TBL_Q
   , G_VALUE_FROM_TBL_Q
   , G_LIST_TYPE_CODE_TBL_Q
   , G_ASK_FOR_FLAG_TBL_Q
   , G_GROUPING_NO_TBL_Q
   , G_QUALIFIER_GROUP_CNT_TBL_Q
   , G_OTHERS_GROUP_CNT_TBL_Q
   , G_HEADER_QUALS_EXIST_FLG_TBL_Q
   , G_SEARCH_IND_TBL_Q
   , G_VALIDATED_FLAG_TBL_Q
   , G_APPLIED_FLAG_TBL_Q
   , G_ATTRIBUTE_LEVEL_TBL_Q
   , G_ATTRIBUTE_TYPE_TBL_Q
   , G_QUALIFIER_PRECEDENCE_TBL_Q
   , G_DATATYPE_TBL_Q
   , G_QUALIFIER_TYPE_TBL_Q
   , G_SETUP_VALUE_FROM_TBL_Q
   , G_SETUP_VALUE_TO_TBL_Q
   , G_PRICING_ATTR_FLAG_TBL_Q
   , G_OPERATOR_TYPE_TBL_Q
   , G_START_DATE_ACTIVE_TBL_Q
   , G_END_DATE_ACTIVE_TBL_Q
   , G_LINE_INDEX_TBL_Q
   , G_PRICING_EFFECTIVE_DATE_TBL_Q
   , G_START_DATE_ACTIVE_FIR_TBL_Q
   , G_END_DATE_ACTIVE_FIR_TBL_Q
   , G_LINE_TYPE_CODE_TBL_Q
   , G_PRICING_STATUS_CODE_TBL_Q
   , G_PRICING_PHASE_ID_TBL_Q
   , G_UNIQUE_KEY_TBL_Q
   , G_START_DATE_ACTIVE_TBL_H_Q
   , G_END_DATE_ACTIVE_TBL_H_Q
   , G_START_DATE_ACTIVE_SEC_TBL_Q
   , G_END_DATE_ACTIVE_SEC_TBL_Q
   , G_ACTIVE_DATE_FIR_TYPE_TBL_Q
   , G_ACTIVE_DATE_SEC_TYPE_TBL_Q
   , G_HEADER_LIMIT_EXISTS_TBL_Q LIMIT nROWS;
   EXIT WHEN G_LIST_HEADER_ID_TBL_Q.COUNT = 0;

   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('Inserting no rows into qp_preq_qual_tmp for each line index');
   END IF;
   IF (G_LIST_HEADER_ID_TBL_Q.COUNT > 0) THEN

     --G_QUALIFIER_TEMP := G_QUALIFIER_TEMP_UPDATED;
     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('Inserting rows into qp_preq_qual_tmp for each line index: ' || G_LIST_HEADER_ID_TBL_Q.COUNT);

     END IF;
      INSERT_QUAL(
       G_LIST_HEADER_ID_TBL_Q
     , G_LIST_LINE_ID_TBL_Q
     , G_VALIDATED_FLAG_TBL_Q
     , G_APPLIED_FLAG_TBL_Q
     , G_ATTRIBUTE_LEVEL_TBL_Q
     , G_ATTRIBUTE_TYPE_TBL_Q
     , G_CONTEXT_TBL_Q
     , G_ATTRIBUTE_TBL_Q
     , G_VALUE_FROM_TBL_Q
     , G_GROUPING_NO_TBL_Q
     , G_QUALIFIER_PRECEDENCE_TBL_Q
     , G_DATATYPE_TBL_Q
     , G_SETUP_VALUE_FROM_TBL_Q
     , G_SETUP_VALUE_TO_TBL_Q
     , G_PRICING_ATTR_FLAG_TBL_Q
     , G_OPERATOR_TYPE_TBL_Q
     , G_LIST_TYPE_CODE_TBL_Q
     , G_ASK_FOR_FLAG_TBL_Q
     , G_QUALIFIER_TYPE_TBL_Q
     , G_QUALIFIER_GROUP_CNT_TBL_Q
     , G_OTHERS_GROUP_CNT_TBL_Q
     , G_HEADER_QUALS_EXIST_FLG_TBL_Q
     , G_SEARCH_IND_TBL_Q
     , G_PRICING_STATUS_CODE_TBL_Q
     , G_START_DATE_ACTIVE_TBL_Q
     , G_END_DATE_ACTIVE_TBL_Q
     , G_LINE_INDEX_TBL_Q
     , G_PRICING_EFFECTIVE_DATE_TBL_Q
     , G_START_DATE_ACTIVE_FIR_TBL_Q
     , G_END_DATE_ACTIVE_FIR_TBL_Q
     , G_LINE_TYPE_CODE_TBL_Q
     , G_PRICING_PHASE_ID_TBL_Q
     , G_UNIQUE_KEY_TBL_Q
     , G_START_DATE_ACTIVE_TBL_H_Q
     , G_END_DATE_ACTIVE_TBL_H_Q
     , G_START_DATE_ACTIVE_SEC_TBL_Q
     , G_END_DATE_ACTIVE_SEC_TBL_Q
     , G_ACTIVE_DATE_FIR_TYPE_TBL_Q
     , G_ACTIVE_DATE_SEC_TYPE_TBL_Q
     , G_HEADER_LIMIT_EXISTS_TBL_Q
     , l_status_code
     , l_status_text);
   END IF;
  END LOOP;
  CLOSE l_get_line_index_for_quals_n;

*/

  /* else  */

 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
	engine_debug('hw: l_get_line_index_for_quals path');
 END IF;
  qp_debug_util.tstart('L_GET_LINE_INDEX_FOR_QUALS','Cursor L_GET_LINE_INDEX_FOR_QUALS');
  OPEN l_get_line_index_for_quals;

  LOOP
   G_LIST_HEADER_ID_TBL_Q.delete;
   G_LIST_LINE_ID_TBL_Q.delete;
   G_CONTEXT_TBL_Q.delete;
   G_ATTRIBUTE_TBL_Q.delete;
   G_VALUE_FROM_TBL_Q.delete;
   G_LIST_TYPE_CODE_TBL_Q.delete;
   G_ASK_FOR_FLAG_TBL_Q.delete;
   G_GROUPING_NO_TBL_Q.delete;
   G_QUALIFIER_GROUP_CNT_TBL_Q.delete;
   G_OTHERS_GROUP_CNT_TBL_Q.delete;
   G_HEADER_QUALS_EXIST_FLG_TBL_Q.delete;
   G_SEARCH_IND_TBL_Q.delete;
   G_VALIDATED_FLAG_TBL_Q.delete;
   G_APPLIED_FLAG_TBL_Q.delete;
   G_ATTRIBUTE_LEVEL_TBL_Q.delete;
   G_ATTRIBUTE_TYPE_TBL_Q.delete;
   G_QUALIFIER_PRECEDENCE_TBL_Q.delete;
   G_DATATYPE_TBL_Q.delete;
   G_QUALIFIER_TYPE_TBL_Q.delete;
   G_SETUP_VALUE_FROM_TBL_Q.delete;
   G_SETUP_VALUE_TO_TBL_Q.delete;
   G_PRICING_ATTR_FLAG_TBL_Q.delete;
   G_OPERATOR_TYPE_TBL_Q.delete;
   G_LINE_INDEX_TBL_Q.delete;
   G_PRICING_EFFECTIVE_DATE_TBL_Q.delete;
   G_START_DATE_ACTIVE_FIR_TBL_Q.delete;
   G_END_DATE_ACTIVE_FIR_TBL_Q.delete;
   G_LINE_TYPE_CODE_TBL_Q.delete;
   G_PRICING_STATUS_CODE_TBL_Q.delete;
   G_PRICING_PHASE_ID_TBL_Q.delete;
   G_UNIQUE_KEY_TBL_Q.delete;
   G_START_DATE_ACTIVE_TBL_H_Q.delete;
   G_END_DATE_ACTIVE_TBL_H_Q.delete;
   G_START_DATE_ACTIVE_SEC_TBL_Q.delete;
   G_END_DATE_ACTIVE_SEC_TBL_Q.delete;
   G_ACTIVE_DATE_FIR_TYPE_TBL_Q.delete;
   G_ACTIVE_DATE_SEC_TYPE_TBL_Q.delete;
   G_HEADER_LIMIT_EXISTS_TBL_Q.delete;
   G_DERIVED_QUALIFIER_FLAG_TBL_Q.delete;    -- Added for TCA

  FETCH l_get_line_index_for_quals
  BULK COLLECT INTO
     G_LIST_HEADER_ID_TBL_Q
   , G_LIST_LINE_ID_TBL_Q
   , G_CONTEXT_TBL_Q
   , G_ATTRIBUTE_TBL_Q
   , G_VALUE_FROM_TBL_Q
   , G_LIST_TYPE_CODE_TBL_Q
   , G_ASK_FOR_FLAG_TBL_Q
   , G_GROUPING_NO_TBL_Q
   , G_QUALIFIER_GROUP_CNT_TBL_Q
   , G_OTHERS_GROUP_CNT_TBL_Q
   , G_HEADER_QUALS_EXIST_FLG_TBL_Q
   , G_SEARCH_IND_TBL_Q
   , G_VALIDATED_FLAG_TBL_Q
   , G_APPLIED_FLAG_TBL_Q
   , G_ATTRIBUTE_LEVEL_TBL_Q
   , G_ATTRIBUTE_TYPE_TBL_Q
   , G_QUALIFIER_PRECEDENCE_TBL_Q
   , G_DATATYPE_TBL_Q
   , G_QUALIFIER_TYPE_TBL_Q
   , G_SETUP_VALUE_FROM_TBL_Q
   , G_SETUP_VALUE_TO_TBL_Q
   , G_PRICING_ATTR_FLAG_TBL_Q
   , G_OPERATOR_TYPE_TBL_Q
   , G_START_DATE_ACTIVE_TBL_Q
   , G_END_DATE_ACTIVE_TBL_Q
   , G_LINE_INDEX_TBL_Q
   , G_PRICING_EFFECTIVE_DATE_TBL_Q
   , G_START_DATE_ACTIVE_FIR_TBL_Q
   , G_END_DATE_ACTIVE_FIR_TBL_Q
   , G_LINE_TYPE_CODE_TBL_Q
   , G_PRICING_STATUS_CODE_TBL_Q
   , G_PRICING_PHASE_ID_TBL_Q
   , G_UNIQUE_KEY_TBL_Q
   , G_START_DATE_ACTIVE_TBL_H_Q
   , G_END_DATE_ACTIVE_TBL_H_Q
   , G_START_DATE_ACTIVE_SEC_TBL_Q
   , G_END_DATE_ACTIVE_SEC_TBL_Q
   , G_ACTIVE_DATE_FIR_TYPE_TBL_Q
   , G_ACTIVE_DATE_SEC_TYPE_TBL_Q
   , G_HEADER_LIMIT_EXISTS_TBL_Q
   , G_DERIVED_QUALIFIER_FLAG_TBL_Q    LIMIT nROWS;     -- Added for TCA
   EXIT WHEN G_LIST_HEADER_ID_TBL_Q.COUNT = 0;

   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('Inserting no rows into qp_preq_qual_tmp for each line index');
   END IF;
   IF (G_LIST_HEADER_ID_TBL_Q.COUNT > 0) THEN

     --G_QUALIFIER_TEMP := G_QUALIFIER_TEMP_UPDATED;
     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('Inserting rows into qp_preq_qual_tmp for each line index: ' || G_LIST_HEADER_ID_TBL_Q.COUNT);
     END IF;
     qp_debug_util.tstart('INSERT_QUAL','Cursor INSERT_QUAL');
      INSERT_QUAL(
       G_LIST_HEADER_ID_TBL_Q
     , G_LIST_LINE_ID_TBL_Q
     , G_VALIDATED_FLAG_TBL_Q
     , G_APPLIED_FLAG_TBL_Q
     , G_ATTRIBUTE_LEVEL_TBL_Q
     , G_ATTRIBUTE_TYPE_TBL_Q
     , G_CONTEXT_TBL_Q
     , G_ATTRIBUTE_TBL_Q
     , G_VALUE_FROM_TBL_Q
     , G_GROUPING_NO_TBL_Q
     , G_QUALIFIER_PRECEDENCE_TBL_Q
     , G_DATATYPE_TBL_Q
     , G_SETUP_VALUE_FROM_TBL_Q
     , G_SETUP_VALUE_TO_TBL_Q
     , G_PRICING_ATTR_FLAG_TBL_Q
     , G_OPERATOR_TYPE_TBL_Q
     , G_LIST_TYPE_CODE_TBL_Q
     , G_ASK_FOR_FLAG_TBL_Q
     , G_QUALIFIER_TYPE_TBL_Q
     , G_QUALIFIER_GROUP_CNT_TBL_Q
     , G_OTHERS_GROUP_CNT_TBL_Q
     , G_HEADER_QUALS_EXIST_FLG_TBL_Q
     , G_SEARCH_IND_TBL_Q
     , G_PRICING_STATUS_CODE_TBL_Q
     , G_START_DATE_ACTIVE_TBL_Q
     , G_END_DATE_ACTIVE_TBL_Q
     , G_LINE_INDEX_TBL_Q
     , G_PRICING_EFFECTIVE_DATE_TBL_Q
     , G_START_DATE_ACTIVE_FIR_TBL_Q
     , G_END_DATE_ACTIVE_FIR_TBL_Q
     , G_LINE_TYPE_CODE_TBL_Q
     , G_PRICING_PHASE_ID_TBL_Q
     , G_UNIQUE_KEY_TBL_Q
     , G_START_DATE_ACTIVE_TBL_H_Q
     , G_END_DATE_ACTIVE_TBL_H_Q
     , G_START_DATE_ACTIVE_SEC_TBL_Q
     , G_END_DATE_ACTIVE_SEC_TBL_Q
     , G_ACTIVE_DATE_FIR_TYPE_TBL_Q
     , G_ACTIVE_DATE_SEC_TYPE_TBL_Q
     , G_HEADER_LIMIT_EXISTS_TBL_Q
     , G_DERIVED_QUALIFIER_FLAG_TBL_Q
     , l_status_code
     , l_status_text);
     qp_debug_util.tstop('INSERT_QUAL');
   END IF;
  END LOOP;
  qp_debug_util.tstop('L_GET_LINE_INDEX_FOR_QUALS');
  CLOSE l_get_line_index_for_quals;

   -- Qualifier Grouping For Each Line Index
   Perform_Qualifier_Grouping(G_YES,p_pricing_phase_id,l_status_code,l_status_text);

  /* end if; */

   IF l_status_code <> FND_API.G_RET_STS_SUCCESS THEN
    RAISE E_ROUTINE_ERRORS;
   END IF;

 END IF; --IF (G_QUALIFIER_TEMP <> 'E' OR G_LINE_QUALIFIER_TEMP <> 'E') THEN
qp_debug_util.tstart('L_PROD_QUAL_CUR','Cursor Loop l_prod_qual_cur');
OPEN l_prod_qual_cur (p_pricing_phase_id, -99,-99,-99);


LOOP
 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
 engine_debug('In l_prod_qual_cur loop fetch');
 END IF;
 G_LIST_HEADER_ID_TBL_P.delete;
 G_LIST_LINE_ID_TBL_P.delete;
 G_LIST_LINE_TYPE_TBL_P.delete;
 G_LINE_INDEX_TBL_P.delete;
 G_VALIDATED_FLAG_TBL_P.delete;
 G_APPLIED_FLAG_TBL_P.delete;
 G_ATTRIBUTE_LEVEL_TBL_P.delete;
 G_ATTRIBUTE_TYPE_TBL_P.delete;
 G_CONTEXT_TBL_P.delete;
 G_ATTRIBUTE_TBL_P.delete;
 G_VALUE_FROM_TBL_P.delete;
 G_SETUP_VALUE_FROM_TBL_P.delete;
 G_PRICING_ATTR_FLAG_TBL_P.delete;
 G_PRODUCT_UOM_CODE_TBL_P.delete;
 G_EXCLUDER_FLAG_TBL_P.delete;
 G_AUTOMATIC_FLAG_TBL_P.delete;
 G_MODIFIER_LEVEL_CODE_TBL_P.delete;
 G_NET_AMOUNT_FLAG_TBL_P.delete; --IT net_amount 2720717
 G_PRIMARY_UOM_FLAG_TBL_P.delete;
 G_OPER_CALCULATION_CODE_TBL_P.delete;
 G_OPERAND_VALUE_TBL_P.delete;
 G_PRICING_GROUP_SEQUENCE_TBL_P.delete;
 G_PRICING_PHASE_ID_TBL_P.delete;
 G_PRICE_BREAK_TYPE_CODE_TBL_P.delete;
 G_INCOMP_GRP_CODE_TBL_P.delete;
 G_PRICE_FORMULA_ID_TBL_P.delete;
 G_PRODUCT_PRECEDENCE_TBL_P.delete;
 G_OVERRIDE_FLAG_TBL_P.delete;
 G_BENEFIT_QTY_TBL_P.delete;
 G_BENEFIT_UOM_CODE_TBL_P.delete;
 G_LIST_LINE_NO_TBL_P.delete;
 G_ACCRUAL_FLAG_TBL_P.delete;
 G_ACCR_CONVERSION_RATE_TBL_P.delete;
 G_ESTIM_ACCRUAL_RATE_TBL_P.delete;
 G_ASK_FOR_FLAG_TBL_P.delete;
 G_LIST_TYPE_CODE_TBL_P.delete;
 G_HEADER_LIMIT_EXISTS_TBL_P.delete;
 G_LINE_LIMIT_EXISTS_TBL_P.delete;
 G_QUALIFIER_TYPE_TBL_P.delete;
 G_CHARGE_TYPE_CODE_TBL_P.delete;
 G_CHARGE_SUBTYPE_CODE_TBL_P.delete;
 G_ACCUM_CONTEXT_TBL_P.delete; -- for accum range break
 G_ACCUM_ATTRIBUTE_TBL_P.delete; -- for accum range break
 G_ACCUM_FLAG_TBL_P.delete; -- for accum range break

 FETCH l_prod_qual_cur BULK COLLECT INTO
  G_LIST_HEADER_ID_TBL_P,
  G_LIST_LINE_ID_TBL_P,
  G_LIST_LINE_TYPE_TBL_P,
  G_LINE_INDEX_TBL_P,
  G_VALIDATED_FLAG_TBL_P,
  G_APPLIED_FLAG_TBL_P,
  G_ATTRIBUTE_LEVEL_TBL_P,
  G_ATTRIBUTE_TYPE_TBL_P,
  G_CONTEXT_TBL_P,
  G_ATTRIBUTE_TBL_P,
  G_VALUE_FROM_TBL_P,
  G_SETUP_VALUE_FROM_TBL_P,
  G_PRICING_ATTR_FLAG_TBL_P,
  G_PRODUCT_UOM_CODE_TBL_P,
  G_EXCLUDER_FLAG_TBL_P,
  G_AUTOMATIC_FLAG_TBL_P,
  G_MODIFIER_LEVEL_CODE_TBL_P,
  G_PRIMARY_UOM_FLAG_TBL_P,
  G_OPER_CALCULATION_CODE_TBL_P,
  G_OPERAND_VALUE_TBL_P,
  G_NET_AMOUNT_FLAG_TBL_P, --IT net_amount 2720717
  G_PRICING_GROUP_SEQUENCE_TBL_P,
  G_PRICING_PHASE_ID_TBL_P,
  G_PRICE_BREAK_TYPE_CODE_TBL_P,
  G_INCOMP_GRP_CODE_TBL_P,
  G_PRICE_FORMULA_ID_TBL_P,
  G_PRODUCT_PRECEDENCE_TBL_P,
  G_OVERRIDE_FLAG_TBL_P,
  G_BENEFIT_QTY_TBL_P,
  G_BENEFIT_UOM_CODE_TBL_P,
  G_LIST_LINE_NO_TBL_P,
  G_ACCRUAL_FLAG_TBL_P,
  G_ACCR_CONVERSION_RATE_TBL_P,
  G_ESTIM_ACCRUAL_RATE_TBL_P,
  G_ASK_FOR_FLAG_TBL_P,
  G_LIST_TYPE_CODE_TBL_P,
  G_HEADER_LIMIT_EXISTS_TBL_P,
  G_LINE_LIMIT_EXISTS_TBL_P,
  G_QUALIFIER_TYPE_TBL_P ,
  G_CHARGE_TYPE_CODE_TBL_P ,
  G_CHARGE_SUBTYPE_CODE_TBL_P,
  G_ACCUM_CONTEXT_TBL_P, -- accum range break
  G_ACCUM_ATTRIBUTE_TBL_P, -- accum range break
  G_ACCUM_FLAG_TBL_P LIMIT nROWS;

  EXIT WHEN G_LINE_INDEX_TBL_P.COUNT = 0;


   IF (G_LINE_INDEX_TBL_P.COUNT > 0) THEN
     FOR I in G_LINE_INDEX_TBL_P.FIRST .. G_LINE_INDEX_TBL_P.LAST LOOP

      IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
      engine_debug(' Prod Qual List line id selected from big select: '||G_LIST_LINE_ID_TBL_P(I));

      END IF;
     IF (lq_line_index <> G_LINE_INDEX_TBL_P(I) OR lq_list_line_id <> G_LIST_LINE_ID_TBL_P(I)) THEN
       L_LINE_DETAIL_INDEX :=GET_LINE_DETAIL_INDEX;

       G_LINE_INDEX_LD_TBL(M)                :=G_LINE_INDEX_TBL_P(I);
       G_LINE_DETAIL_INDEX_LD_TBL(M)         :=L_LINE_DETAIL_INDEX;
       G_LIST_HEADER_ID_LD_TBL(M)            :=G_LIST_HEADER_ID_TBL_P(I);
       G_LIST_LINE_ID_LD_TBL(M)              :=G_LIST_LINE_ID_TBL_P(I);
       G_PRICING_STATUS_CODE_LD_TBL(M)       :=G_STATUS_NEW;
       G_PRICING_STATUS_TEXT_LD_TBL(M)       :='PRODUCT_QUALIFIER_ONLY';
       G_APPLIED_FLAG_LD_TBL(M)              :=G_AUTOMATIC_FLAG_TBL_P(I);
       G_PROCESSED_FLAG_LD_TBL(M)            :=G_NOT_PROCESSED;
       G_LINE_DETAIL_TYPE_CODE_TBL(M)        :='NULL';
       G_PRICE_BREAK_TYPE_CODE_TBL(M)        :=G_PRICE_BREAK_TYPE_CODE_TBL_P(I);
       G_LIST_LINE_TYPE_TBL(M)               :=G_LIST_LINE_TYPE_TBL_P(I);
       G_LIST_TYPE_CODE_TBL(M)               :=G_LIST_TYPE_CODE_TBL_P(I);
       G_CREATED_FROM_SQL_TBL(M)             :='PRODUCT_QUALIFIER_ONLY';
       G_PRICING_GROUP_SEQUENCE_TBL(M)       :=G_PRICING_GROUP_SEQUENCE_TBL_P(I);
       G_PRICING_PHASE_ID_TBL(M)             :=G_PRICING_PHASE_ID_TBL_P(I);
       G_OPERAND_CALCULATION_CODE_TBL(M)     :=G_OPER_CALCULATION_CODE_TBL_P(I);
       G_OPERAND_VALUE_TBL(M)                :=G_OPERAND_VALUE_TBL_P(I);
       G_NET_AMOUNT_FLAG_TBL(M)              :=G_NET_AMOUNT_FLAG_TBL_P(I); --IT net_amount 2720717
       G_ASK_FOR_FLAG_TBL(M)                 :=G_ASK_FOR_FLAG_TBL_P(I);
       G_PRICE_FORMULA_ID_TBL(M)             :=G_PRICE_FORMULA_ID_TBL_P(I);
       G_PRODUCT_PRECEDENCE_TBL(M)           :=G_PRODUCT_PRECEDENCE_TBL_P(I);
       G_INCOMP_GRP_CODE_TBL(M)              :=G_INCOMP_GRP_CODE_TBL_P(I);
       G_AUTOMATIC_FLAG_TBL(M)               :=G_AUTOMATIC_FLAG_TBL_P(I);
       G_OVERRIDE_FLAG_TBL(M)                :=G_OVERRIDE_FLAG_TBL_P(I);
       G_BENEFIT_QTY_TBL(M)                  :=G_BENEFIT_QTY_TBL_P(I);
       G_BENEFIT_UOM_CODE_TBL(M)             :=G_BENEFIT_UOM_CODE_TBL_P(I);
       G_PRIMARY_UOM_FLAG_TBL(M)             :=G_PRIMARY_UOM_FLAG_TBL_P(I);
       G_MODIFIER_LEVEL_CODE_TBL(M)          :=G_MODIFIER_LEVEL_CODE_TBL_P(I);
       G_LIST_LINE_NO_TBL(M)                 :=G_LIST_LINE_NO_TBL_P(I);
       G_ACCRUAL_FLAG_TBL(M)                 :=G_ACCRUAL_FLAG_TBL_P(I);
       G_ACCRUAL_CONVERSION_RATE_TBL(M)      :=G_ACCR_CONVERSION_RATE_TBL_P(I);
       G_ESTIM_ACCRUAL_RATE_TBL(M)           :=G_ESTIM_ACCRUAL_RATE_TBL_P(I);
       G_HEADER_LIMIT_EXISTS_TBL(M)          :=G_HEADER_LIMIT_EXISTS_TBL_P(I);
       G_LINE_LIMIT_EXISTS_TBL(M)            :=G_LINE_LIMIT_EXISTS_TBL_P(I);
       G_CHARGE_TYPE_CODE_TBL(M)            :=nvl(G_CHARGE_TYPE_CODE_TBL_P(I),'');
       G_CHARGE_SUBTYPE_CODE_TBL(M)          :=nvl(G_CHARGE_SUBTYPE_CODE_TBL_P(I),'');
       G_ACCUM_CONTEXT_TBL(M)                :=G_ACCUM_CONTEXT_TBL_P(I);   -- accum range break
       G_ACCUM_ATTRIBUTE_TBL(M)              :=G_ACCUM_ATTRIBUTE_TBL_P(I); -- accum range break
       G_ACCUM_FLAG_TBL(M)                   :=G_ACCUM_FLAG_TBL_P(I);      -- accum range break
       M:=M+1;
       l_satisfied_list_header_id := G_LIST_HEADER_ID_TBL_P(I);
       l_satisfied_lst_line_id    := G_LIST_LINE_ID_TBL_P(I);
       l_satisfied_line_indx      := G_LINE_INDEX_TBL_P(I);
       l_satisfied_line_detail_indx := L_LINE_DETAIL_INDEX;
       l_satisfied_incomp_code := G_INCOMP_GRP_CODE_TBL_P(I);
       l_satisfied_modifier_lvl_code := G_MODIFIER_LEVEL_CODE_TBL_P(I);
       l_satisfied_primary_uom_flag :=  G_PRIMARY_UOM_FLAG_TBL_P(I);
       lq_line_index := G_LINE_INDEX_TBL_P(I);
       lq_list_line_id := G_LIST_LINE_ID_TBL_P(I);
      END IF;

	   	--hw
		--if l_satis_quals_opt <> 'N' then
       --4029027 commented out by 4455344/4489224
       --bug 4029027
       --IF  (l_satis_quals_opt <> 'N' or (l_satis_quals_opt = 'N' and g_context_tbl_p(i) <> G_QUALIFIER_TYPE)) THEN

      IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
      engine_debug(' #2 ' );
      END IF;
        --PRODUCT ATTRIBUTES
        G_LINE_INDEX_tbl(K)              :=G_LINE_INDEX_TBL_P(I);
        G_ATTRIBUTE_LEVEL_tbl(K)         :=G_ATTRIBUTE_LEVEL_TBL_P(I);
        G_ATTRIBUTE_TYPE_tbl(K)          :=G_ATTRIBUTE_TYPE_TBL_P(I);
        G_CONTEXT_tbl(K)                 :=G_CONTEXT_TBL_P(I);
        G_ATTRIBUTE_tbl(K)               :=G_ATTRIBUTE_TBL_P(I);
        G_VALUE_FROM_tbl(K)              :=G_VALUE_FROM_TBL_P(I);
        G_VALUE_TO_tbl(K)                :=NULL;
        G_COMPARISON_OPERATOR_TYPE_tbl(K):=NULL;
        G_VALIDATED_FLAG_tbl(K)          :=G_VALIDATED_FLAG_TBL_P(I);
        G_APPLIED_FLAG_tbl(K)            :=G_APPLIED_FLAG_TBL_P(I);
        G_PRICING_STATUS_CODE_tbl(K)     :=G_STATUS_NEW;
        G_PRICING_ATTR_FLAG_tbl(K)       :=G_PRICING_ATTR_FLAG_TBL_P(I);
        G_LINE_DETAIL_INDEX_tbl(K)       :=L_LINE_DETAIL_INDEX;
        G_LIST_HEADER_ID_tbl(K)          :=G_LIST_HEADER_ID_TBL_P(I);
        G_LIST_LINE_ID_tbl(K)            :=G_LIST_LINE_ID_TBL_P(I);
        G_SETUP_VALUE_FROM_tbl(K)        :=G_SETUP_VALUE_FROM_TBL_P(I);
        G_SETUP_VALUE_TO_tbl(K)          :=NULL;
        G_GROUPING_NUMBER_tbl(K)         :=NULL;
        G_NO_QUALIFIERS_IN_GRP_tbl(K)    :=NULL;
        G_PRICING_STATUS_TEXT_tbl(K)     :='PRODUCT_QUALIFIER_ONLY';
        G_QUALIFIER_PRECEDENCE_tbl(K)    :=NULL;
        G_DATATYPE_tbl(K)                :=NULL;
        G_EXCLUDER_FLAG_TBL(K)           :=G_EXCLUDER_FLAG_TBL_P(I);
        G_PRODUCT_UOM_CODE_TBL(K)        :=G_PRODUCT_UOM_CODE_TBL_P(I);
        G_QUALIFIER_TYPE_TBL(K)          :=G_QUALIFIER_TYPE_TBL_P(I);
        G_PRICING_PHASE_ID_TBL_A(K)        :=G_PRICING_PHASE_ID_TBL_P(I);
        G_INCOMP_GRP_CODE_TBL_A(K)         :=G_INCOMP_GRP_CODE_TBL_P(I);
        G_LINE_DETAIL_TYPE_CODE_TBL_A(K)   :='NULL';
        G_MODIFIER_LEVEL_CODE_TBL_A(K)     :=G_MODIFIER_LEVEL_CODE_TBL_P(I);
        G_PRIMARY_UOM_FLAG_TBL_A(K)        :=G_PRIMARY_UOM_FLAG_TBL_P(I);
        K:= K+1;
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug('The value of K : ' || K);
        END IF;

    IF  l_satis_quals_opt = 'Y' THEN  -- [4455344/4489224] {
     IF (l_satisfied_list_header_id <> -9999) THEN

       IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
       engine_debug('Qualifiers for List Header Id : ' || l_satisfied_list_header_id );
       engine_debug('Qualifiers for List Line Id : '   || l_satisfied_lst_line_id );

       END IF;

      qp_debug_util.tstart('L_GET_SATISFIED_QUALS','Cursor Loop L_GET_SATISFIED_QUALS');

      FOR V IN  l_get_satisfied_quals(l_satisfied_list_header_id,l_satisfied_lst_line_id, l_satisfied_line_indx)
      LOOP
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug(' Qual #3 ' );
        END IF;
        --Qualifier attributes
        G_LINE_INDEX_tbl(K)              :=l_satisfied_line_indx;
        G_ATTRIBUTE_LEVEL_tbl(K)         :=V.QUALIFIER_ATTRIBUTE_LEVEL;
        G_ATTRIBUTE_TYPE_tbl(K)          :=V.QUALIFIER_ATTRIBUTE_TYPE;
        G_CONTEXT_tbl(K)                 :=V.QUALIFIER_ATTRIBUTE_CONTEXT;
        G_ATTRIBUTE_tbl(K)               :=V.QUALIFIER_ATTRIBUTE;
        G_VALUE_FROM_tbl(K)              :=V.QUALIFIER_ATTRIBUTE_VALUE;
        G_VALUE_TO_tbl(K)                :=NULL;
        G_COMPARISON_OPERATOR_TYPE_tbl(K):=V.QUALIFIER_OPERATOR_TYPE;
        G_VALIDATED_FLAG_tbl(K)          :=V.VALIDATED_FLAG;
        G_APPLIED_FLAG_tbl(K)            :=V.APPLIED_FLAG;
        G_PRICING_STATUS_CODE_tbl(K)     :=G_STATUS_NEW;
        G_PRICING_ATTR_FLAG_tbl(K)       :=V.QUALIFIER_PRICING_ATTR_FLAG;
        G_LINE_DETAIL_INDEX_tbl(K)       :=l_satisfied_line_detail_indx;
        G_LIST_HEADER_ID_tbl(K)          :=l_satisfied_list_header_id;
        G_LIST_LINE_ID_tbl(K)            :=l_satisfied_lst_line_id;
        G_SETUP_VALUE_FROM_tbl(K)        :=V.SETUP_VALUE_FROM;
        G_SETUP_VALUE_TO_tbl(K)          :=V.SETUP_VALUE_TO;
        G_GROUPING_NUMBER_tbl(K)         :=V.QUALIFIER_GROUPING_NO;
        G_NO_QUALIFIERS_IN_GRP_tbl(K)    :=NULL;
        G_PRICING_STATUS_TEXT_tbl(K)     :='PRODUCT_QUALIFIER_ONLY';
        G_QUALIFIER_PRECEDENCE_tbl(K)    :=V.QUALIFIER_PRECEDENCE;
        G_DATATYPE_tbl(K)                :=V.QUALIFIER_DATATYPE;
        G_EXCLUDER_FLAG_TBL(K)           :=NULL;
        G_PRODUCT_UOM_CODE_TBL(K)        :=NULL;
        G_QUALIFIER_TYPE_TBL(K)          :=V.QUALIFIER_TYPE;
        G_PRICING_PHASE_ID_TBL_A(K)        :=p_pricing_phase_id;
        G_INCOMP_GRP_CODE_TBL_A(K)         :=l_satisfied_incomp_code;
        G_LINE_DETAIL_TYPE_CODE_TBL_A(K)   :='NULL';
        G_MODIFIER_LEVEL_CODE_TBL_A(K)     :=l_satisfied_modifier_lvl_code;
        G_PRIMARY_UOM_FLAG_TBL_A(K)        :=l_satisfied_primary_uom_flag;
        K:= K+1;

        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug('The value of K : ' || K);
        engine_debug('Qualifier Context : ' || v.qualifier_attribute_context);
        engine_debug('Qualifier Attribute : ' || v.qualifier_attribute);
        engine_debug('Qualifier Value : ' || v.qualifier_attribute_value);
        engine_debug('Qualifier List Header Id : ' || v.list_header_id);
        engine_debug('Qualifier List line Id : ' || v.list_line_id);
        engine_debug('Qualifier Type : ' || v.qualifier_type);

        END IF;
      END LOOP;

     qp_debug_util.tstop('L_GET_SATISFIED_QUALS');

      --Reset the satisfied list header and list line info
      l_satisfied_list_header_id := -9999;
      l_satisfied_lst_line_id    := -9999;
      l_satisfied_line_indx      := -9999;
      l_satisfied_line_detail_indx := -9999;

     END IF;

     end if; -- } [4455344/4489224]

    END LOOP;
   END IF;
  END LOOP;

  qp_debug_util.tstop('L_PROD_QUAL_CUR');

  CLOSE l_prod_qual_cur;

  lq_line_index              := -9999;
  lq_list_line_id            := -9999;
 qp_debug_util.tstart('L_PROD_QUAL_PRIC_CUR','Cursor Loop l_prod_qual_pric_cur');
 OPEN l_prod_qual_pric_cur(p_pricing_phase_id, -99,-99,-99) ;


 LOOP
 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
 engine_debug('In l_prod_qual_pric_cur loop fetch');
 END IF;
  G_LIST_HEADER_ID_TBL_P.delete;
  G_LIST_LINE_ID_TBL_P.delete;
  G_LIST_LINE_TYPE_TBL_P.delete;
  G_LINE_INDEX_TBL_P.delete;
  G_VALIDATED_FLAG_TBL_P.delete;
  G_APPLIED_FLAG_TBL_P.delete;
  G_ATTRIBUTE_LEVEL_TBL_P.delete;
  G_ATTRIBUTE_TYPE_TBL_P.delete;
  G_CONTEXT_TBL_P.delete;
  G_ATTRIBUTE_TBL_P.delete;
  G_VALUE_FROM_TBL_P.delete;
  G_SETUP_VALUE_FROM_TBL_P.delete;
  G_PRICING_ATTR_FLAG_TBL_P.delete;
  G_PRODUCT_UOM_CODE_TBL_P.delete;
  G_EXCLUDER_FLAG_TBL_P.delete;
  G_ATTRIBUTE_LEVEL_TBL_PR.delete;
  G_ATTRIBUTE_TYPE_TBL_PR.delete;
  G_CONTEXT_TBL_PR.delete;
  G_ATTRIBUTE_TBL_PR.delete;
  G_VALUE_FROM_TBL_PR.delete;
  G_OPERATOR_TYPE_TBL_PR.delete;
  G_SETUP_VALUE_FROM_TBL_PR.delete;
  G_SETUP_VALUE_TO_TBL_PR.delete;
  G_DATATYPE_TBL_PR.delete;
  G_AUTOMATIC_FLAG_TBL_P.delete;
  G_MODIFIER_LEVEL_CODE_TBL_P.delete;
  G_PRIMARY_UOM_FLAG_TBL_P.delete;
  G_OPER_CALCULATION_CODE_TBL_P.delete;
  G_OPERAND_VALUE_TBL_P.delete;
  G_NET_AMOUNT_FLAG_TBL_P.delete; -- IT net_amount 2720717
  G_PRICING_GROUP_SEQUENCE_TBL_P.delete;
  G_PRICING_PHASE_ID_TBL_P.delete;
  G_PRICE_BREAK_TYPE_CODE_TBL_P.delete;
  G_INCOMP_GRP_CODE_TBL_P.delete;
  G_PRICE_FORMULA_ID_TBL_P.delete;
  G_PRODUCT_PRECEDENCE_TBL_P.delete;
  G_OVERRIDE_FLAG_TBL_P.delete;
  G_BENEFIT_QTY_TBL_P.delete;
  G_BENEFIT_UOM_CODE_TBL_P.delete;
  G_LIST_LINE_NO_TBL_P.delete;
  G_ACCRUAL_FLAG_TBL_P.delete;
  G_ACCR_CONVERSION_RATE_TBL_P.delete;
  G_ESTIM_ACCRUAL_RATE_TBL_P.delete;
  G_ASK_FOR_FLAG_TBL_P.delete;
  G_LIST_TYPE_CODE_TBL_P.delete;
  G_HEADER_LIMIT_EXISTS_TBL_P.delete;
  G_LINE_LIMIT_EXISTS_TBL_P.delete;
  G_QUALIFIER_TYPE_TBL_P.delete;
  G_CHARGE_TYPE_CODE_TBL_P.delete;
  G_CHARGE_SUBTYPE_CODE_TBL_P.delete;
  G_ACCUM_CONTEXT_TBL_P.delete;   -- accum range break
  G_ACCUM_ATTRIBUTE_TBL_P.delete; -- accum range break
  G_ACCUM_FLAG_TBL_P.delete;      -- accum range break

  FETCH l_prod_qual_pric_cur BULK COLLECT INTO
  G_LIST_HEADER_ID_TBL_P,
  G_LIST_LINE_ID_TBL_P,
  G_LIST_LINE_TYPE_TBL_P,
  G_LINE_INDEX_TBL_P,
  G_VALIDATED_FLAG_TBL_P,
  G_APPLIED_FLAG_TBL_P,
  G_ATTRIBUTE_LEVEL_TBL_P,
  G_ATTRIBUTE_TYPE_TBL_P,
  G_CONTEXT_TBL_P,
  G_ATTRIBUTE_TBL_P,
  G_VALUE_FROM_TBL_P,
  G_SETUP_VALUE_FROM_TBL_P,
  G_PRICING_ATTR_FLAG_TBL_P,
  G_PRODUCT_UOM_CODE_TBL_P,
  G_EXCLUDER_FLAG_TBL_P,
  G_ATTRIBUTE_LEVEL_TBL_PR,
  G_ATTRIBUTE_TYPE_TBL_PR,
  G_CONTEXT_TBL_PR,
  G_ATTRIBUTE_TBL_PR,
  G_VALUE_FROM_TBL_PR,
  G_SETUP_VALUE_FROM_TBL_PR,
  G_SETUP_VALUE_TO_TBL_PR,
  G_OPERATOR_TYPE_TBL_PR,
  G_DATATYPE_TBL_PR,
  G_AUTOMATIC_FLAG_TBL_P,
  G_MODIFIER_LEVEL_CODE_TBL_P,
  G_PRIMARY_UOM_FLAG_TBL_P,
  G_OPER_CALCULATION_CODE_TBL_P,
  G_OPERAND_VALUE_TBL_P,
  G_NET_AMOUNT_FLAG_TBL_P, -- IT net_amount 2720717
  G_PRICING_GROUP_SEQUENCE_TBL_P,
  G_PRICING_PHASE_ID_TBL_P,
  G_PRICE_BREAK_TYPE_CODE_TBL_P,
  G_INCOMP_GRP_CODE_TBL_P,
  G_PRICE_FORMULA_ID_TBL_P,
  G_PRODUCT_PRECEDENCE_TBL_P,
  G_OVERRIDE_FLAG_TBL_P,
  G_BENEFIT_QTY_TBL_P,
  G_BENEFIT_UOM_CODE_TBL_P,
  G_LIST_LINE_NO_TBL_P,
  G_ACCRUAL_FLAG_TBL_P,
  G_ACCR_CONVERSION_RATE_TBL_P,
  G_ESTIM_ACCRUAL_RATE_TBL_P,
  G_ASK_FOR_FLAG_TBL_P,
  G_LIST_TYPE_CODE_TBL_P,
  G_HEADER_LIMIT_EXISTS_TBL_P,
  G_LINE_LIMIT_EXISTS_TBL_P,
  G_QUALIFIER_TYPE_TBL_P ,
  G_CHARGE_TYPE_CODE_TBL_P ,
  G_CHARGE_SUBTYPE_CODE_TBL_P,
  G_ACCUM_CONTEXT_TBL_P,   -- for accum range break
  G_ACCUM_ATTRIBUTE_TBL_P, -- for accum range break
  G_ACCUM_FLAG_TBL_P LIMIT nROWS;

  EXIT WHEN G_LINE_INDEX_TBL_P.COUNT = 0;

   IF (G_LINE_INDEX_TBL_P.COUNT > 0) THEN
    FOR I in G_LINE_INDEX_TBL_P.FIRST .. G_LINE_INDEX_TBL_P.LAST LOOP

        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug(' Prod Qual Pric List line id selected from big select: '||G_LIST_LINE_ID_TBL_P(I) );
        engine_debug(' #1');
        END IF;


      IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
      engine_debug(' #2');

      END IF;
     IF (lq_line_index <> G_LINE_INDEX_TBL_P(I) OR lq_list_line_id <> G_LIST_LINE_ID_TBL_P(I)) THEN
        l_line_detail_index :=GET_LINE_DETAIL_INDEX;

        G_LINE_INDEX_LD_TBL(M )               :=G_LINE_INDEX_TBL_P(I);
        G_LINE_DETAIL_INDEX_LD_TBL(M)         :=L_LINE_DETAIL_INDEX;
        G_LIST_HEADER_ID_LD_TBL(M)            :=G_LIST_HEADER_ID_TBL_P(I);
        G_LIST_LINE_ID_LD_TBL(M)              :=G_LIST_LINE_ID_TBL_P(I);
        G_PRICING_STATUS_CODE_LD_TBL(M)       :=G_STATUS_NEW;
        G_PRICING_STATUS_TEXT_LD_TBL(M)       :='PRODUCT_QUALIFIER_PRICING';
        G_APPLIED_FLAG_LD_TBL(M)              :=G_AUTOMATIC_FLAG_TBL_P(I);
        G_PROCESSED_FLAG_LD_TBL(M)            :=G_NOT_PROCESSED;
        G_LINE_DETAIL_TYPE_CODE_TBL(M)        :='NULL';
        G_PRICE_BREAK_TYPE_CODE_TBL(M)        :=G_PRICE_BREAK_TYPE_CODE_TBL_P(I);
        G_LIST_LINE_TYPE_TBL(M)               :=G_LIST_LINE_TYPE_TBL_P(I);
        G_LIST_TYPE_CODE_TBL(M)               :=G_LIST_TYPE_CODE_TBL_P(I);
        G_CREATED_FROM_SQL_TBL(M)             :='PRODUCT_QUALIFIER_PRICING';
        G_PRICING_GROUP_SEQUENCE_TBL(M)       :=G_PRICING_GROUP_SEQUENCE_TBL_P(I);
        G_PRICING_PHASE_ID_TBL(M)             :=G_PRICING_PHASE_ID_TBL_P(I);
        G_OPERAND_CALCULATION_CODE_TBL(M)     :=G_OPER_CALCULATION_CODE_TBL_P(I);
        G_OPERAND_VALUE_TBL(M)                :=G_OPERAND_VALUE_TBL_P(I);
        G_NET_AMOUNT_FLAG_TBL(M)              :=G_NET_AMOUNT_FLAG_TBL_P(I); -- IT net_amount 2720717
        G_ASK_FOR_FLAG_TBL(M)                 :=G_ASK_FOR_FLAG_TBL_P(I);
        G_PRICE_FORMULA_ID_TBL(M)             :=G_PRICE_FORMULA_ID_TBL_P(I);
        G_PRODUCT_PRECEDENCE_TBL(M)           :=G_PRODUCT_PRECEDENCE_TBL_P(I);
        G_OVERRIDE_FLAG_TBL(M)                :=G_OVERRIDE_FLAG_TBL_P(I);
        G_BENEFIT_QTY_TBL(M)                  :=G_BENEFIT_QTY_TBL_P(I);
        G_BENEFIT_UOM_CODE_TBL(M)             :=G_BENEFIT_UOM_CODE_TBL_P(I);
        G_INCOMP_GRP_CODE_TBL(M)              :=G_INCOMP_GRP_CODE_TBL_P(I);
        G_AUTOMATIC_FLAG_TBL(M)               :=G_AUTOMATIC_FLAG_TBL_P(I);
        G_PRIMARY_UOM_FLAG_TBL(M)             :=G_PRIMARY_UOM_FLAG_TBL_P(I);
        G_MODIFIER_LEVEL_CODE_TBL(M)          :=G_MODIFIER_LEVEL_CODE_TBL_P(I);
        G_LIST_LINE_NO_TBL(M)                 :=G_LIST_LINE_NO_TBL_P(I);
        G_ACCRUAL_FLAG_TBL(M)                 :=G_ACCRUAL_FLAG_TBL_P(I);
        G_ACCRUAL_CONVERSION_RATE_TBL(M)      :=G_ACCR_CONVERSION_RATE_TBL_P(I);
        G_ESTIM_ACCRUAL_RATE_TBL(M)           :=G_ESTIM_ACCRUAL_RATE_TBL_P(I);
        G_HEADER_LIMIT_EXISTS_TBL(M)          :=G_HEADER_LIMIT_EXISTS_TBL_P(I);
        G_LINE_LIMIT_EXISTS_TBL(M)            :=G_LINE_LIMIT_EXISTS_TBL_P(I);
        G_CHARGE_TYPE_CODE_TBL(M)            :=nvl(G_CHARGE_TYPE_CODE_TBL_P(I),'');
        G_CHARGE_SUBTYPE_CODE_TBL(M)          :=nvl(G_CHARGE_SUBTYPE_CODE_TBL_P(I),'');
        G_ACCUM_CONTEXT_TBL(M)                :=G_ACCUM_CONTEXT_TBL_P(I);   -- accum range break
        G_ACCUM_ATTRIBUTE_TBL(M)              :=G_ACCUM_ATTRIBUTE_TBL_P(I); -- accum range break
        G_ACCUM_FLAG_TBL(M)                   :=G_ACCUM_FLAG_TBL_P(I);      -- accum range break
        M:=M+1;
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug(' #4');
        END IF;
        l_satisfied_list_header_id := G_LIST_HEADER_ID_TBL_P(I);
        l_satisfied_lst_line_id    := G_LIST_LINE_ID_TBL_P(I);
        l_satisfied_line_indx      := G_LINE_INDEX_TBL_P(I);
        l_satisfied_line_detail_indx := L_LINE_DETAIL_INDEX;
        l_satisfied_incomp_code := G_INCOMP_GRP_CODE_TBL_P(I);
        l_satisfied_modifier_lvl_code := G_MODIFIER_LEVEL_CODE_TBL_P(I);
        l_satisfied_primary_uom_flag :=  G_PRIMARY_UOM_FLAG_TBL_P(I);
        lq_line_index := G_LINE_INDEX_TBL_P(I);
        lq_list_line_id := G_LIST_LINE_ID_TBL_P(I);
       END IF;  --end if for if list_line_no_exists

		--if l_satis_quals_opt <> 'N' then
       --bug 4029027
       IF  (l_satis_quals_opt <> 'N' or (l_satis_quals_opt = 'N' and g_context_tbl_p(i) <> G_QUALIFIER_TYPE)) THEN

        --INSERT PRODUCT ATTRIBUTES
        G_LINE_INDEX_TBL(K)              :=G_LINE_INDEX_TBL_P(I);
        G_ATTRIBUTE_LEVEL_TBL(K)         :=G_ATTRIBUTE_LEVEL_TBL_P(I);
        G_ATTRIBUTE_TYPE_TBL(K)          :=G_ATTRIBUTE_TYPE_TBL_P(I);
        G_CONTEXT_TBL(K)                 :=G_CONTEXT_TBL_P(I);
        G_ATTRIBUTE_TBL(K)               :=G_ATTRIBUTE_TBL_P(I);
        G_VALUE_FROM_TBL(K)              :=G_VALUE_FROM_TBL_P(I);
        G_VALUE_TO_TBL(K)                :=NULL;
        G_COMPARISON_OPERATOR_TYPE_TBL(K):=NULL;
        G_VALIDATED_FLAG_TBL(K)          :=G_VALIDATED_FLAG_TBL_P(I);
        G_APPLIED_FLAG_TBL(K)            :=G_APPLIED_FLAG_TBL_P(I);
        G_PRICING_STATUS_CODE_TBL(K)     :=G_STATUS_NEW;
        G_PRICING_ATTR_FLAG_TBL(K)       :=G_PRICING_ATTR_FLAG_TBL_P(I);
        G_LINE_DETAIL_INDEX_TBL(K)       :=L_LINE_DETAIL_INDEX;
        G_LIST_HEADER_ID_TBL(K)          :=G_LIST_HEADER_ID_TBL_P(I);
        G_LIST_LINE_ID_TBL(K)            :=G_LIST_LINE_ID_TBL_P(I);
        G_SETUP_VALUE_FROM_TBL(K)        :=G_SETUP_VALUE_FROM_TBL_P(I);
        G_SETUP_VALUE_TO_TBL(K)          :=NULL;
        G_GROUPING_NUMBER_TBL(K)         :=NULL;
        G_NO_QUALIFIERS_IN_GRP_TBL(K)    :=NULL;
        G_PRICING_STATUS_TEXT_TBL(K)     :='PRODUCT_QUALIFIER_PRICING';
        G_QUALIFIER_PRECEDENCE_TBL(K)    :=NULL;
        G_DATATYPE_TBL(K)                :=NULL;
        G_EXCLUDER_FLAG_TBL(K)           :=G_EXCLUDER_FLAG_TBL_P(I);
        G_PRODUCT_UOM_CODE_TBL(K)        :=G_PRODUCT_UOM_CODE_TBL_P(I);
        G_QUALIFIER_TYPE_TBL(K)          :=G_QUALIFIER_TYPE_TBL_P(I);
        G_PRICING_PHASE_ID_TBL_A(K)        :=p_pricing_phase_id;
        G_INCOMP_GRP_CODE_TBL_A(K)         :=G_INCOMP_GRP_CODE_TBL_P(I);
        G_LINE_DETAIL_TYPE_CODE_TBL_A(K)   :='NULL';
        G_MODIFIER_LEVEL_CODE_TBL_A(K)     :=G_MODIFIER_LEVEL_CODE_TBL_P(I);
        G_PRIMARY_UOM_FLAG_TBL_A(K)        :=G_PRIMARY_UOM_FLAG_TBL_P(I);
        K:= K+1;

        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug('The value of K : ' || K);
        END IF;

        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug(' #5');

        END IF;
        --INSERT PRICING ATTRIBUTES
        IF (G_CONTEXT_TBL_PR(I) IS NOT NULL) THEN
        G_LINE_INDEX_tbl(K)              :=G_LINE_INDEX_TBL_P(I);
        G_ATTRIBUTE_LEVEL_tbl(K)         :=G_ATTRIBUTE_LEVEL_TBL_PR(I);
        G_ATTRIBUTE_TYPE_tbl(K)          :=G_ATTRIBUTE_TYPE_TBL_PR(I);
        G_CONTEXT_tbl(K)                 :=G_CONTEXT_TBL_PR(I);
        G_ATTRIBUTE_tbl(K)               :=G_ATTRIBUTE_TBL_PR(I);
        G_VALUE_FROM_tbl(K)              :=G_VALUE_FROM_TBL_PR(I);
        G_VALUE_TO_tbl(K)                :=NULL;
        G_COMPARISON_OPERATOR_TYPE_tbl(K):=G_OPERATOR_TYPE_TBL_PR(I);
        G_VALIDATED_FLAG_tbl(K)          :=G_VALIDATED_FLAG_TBL_P(I);
        G_APPLIED_FLAG_tbl(K)            :=G_APPLIED_FLAG_TBL_P(I);
        G_PRICING_STATUS_CODE_tbl(K)     :=G_STATUS_NEW;
        G_PRICING_ATTR_FLAG_tbl(K)       :=G_PRICING_ATTR_FLAG_TBL_P(I);
        G_LINE_DETAIL_INDEX_tbl(K)       :=L_LINE_DETAIL_INDEX;
        G_LIST_HEADER_ID_tbl(K)          :=G_LIST_HEADER_ID_TBL_P(I);
        G_LIST_LINE_ID_tbl(K)            :=G_LIST_LINE_ID_TBL_P(I);
        G_SETUP_VALUE_FROM_tbl(K)        :=G_SETUP_VALUE_FROM_TBL_PR(I);
        G_SETUP_VALUE_TO_tbl(K)          :=G_SETUP_VALUE_TO_TBL_PR(I);
        G_GROUPING_NUMBER_tbl(K)         :=NULL;
        G_NO_QUALIFIERS_IN_GRP_tbl(K)    :=NULL;
        G_PRICING_STATUS_TEXT_tbl(K)     :='PRODUCT_QUALIFIER_PRICING';
        G_QUALIFIER_PRECEDENCE_tbl(K)    :=NULL;
        G_DATATYPE_tbl(K)                :=G_DATATYPE_TBL_PR(I);
        G_EXCLUDER_FLAG_TBL(K)           :=G_EXCLUDER_FLAG_TBL_P(I);
        G_PRODUCT_UOM_CODE_TBL(K)        :=G_PRODUCT_UOM_CODE_TBL_P(I);
        G_QUALIFIER_TYPE_TBL(K)          :=G_QUALIFIER_TYPE_TBL_P(I);
        G_PRICING_PHASE_ID_TBL_A(K)        :=p_pricing_phase_id;
        G_INCOMP_GRP_CODE_TBL_A(K)         :=G_INCOMP_GRP_CODE_TBL_P(I);
        G_LINE_DETAIL_TYPE_CODE_TBL_A(K)   :='NULL';
        G_MODIFIER_LEVEL_CODE_TBL_A(K)     :=G_MODIFIER_LEVEL_CODE_TBL_P(I);
        G_PRIMARY_UOM_FLAG_TBL_A(K)        :=G_PRIMARY_UOM_FLAG_TBL_P(I);
        K:= K+1;
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug('The value of K : ' || K);
        END IF;
        END IF;

     IF (l_satisfied_list_header_id <> -9999) THEN

       IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
       engine_debug('Qualifiers for List Header Id : ' || l_satisfied_list_header_id );
       engine_debug('Qualifiers for List Line Id : '   || l_satisfied_lst_line_id );

       END IF;
      FOR V IN  l_get_satisfied_quals(l_satisfied_list_header_id,l_satisfied_lst_line_id, l_satisfied_line_indx)
      LOOP
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug(' Qual #3 ' );
        END IF;
        --Qualifier attributes
        G_LINE_INDEX_tbl(K)              :=l_satisfied_line_indx;
        G_ATTRIBUTE_LEVEL_tbl(K)         :=V.QUALIFIER_ATTRIBUTE_LEVEL;
        G_ATTRIBUTE_TYPE_tbl(K)          :=V.QUALIFIER_ATTRIBUTE_TYPE;
        G_CONTEXT_tbl(K)                 :=V.QUALIFIER_ATTRIBUTE_CONTEXT;
        G_ATTRIBUTE_tbl(K)               :=V.QUALIFIER_ATTRIBUTE;
        G_VALUE_FROM_tbl(K)              :=V.QUALIFIER_ATTRIBUTE_VALUE;
        G_VALUE_TO_tbl(K)                :=NULL;
        G_COMPARISON_OPERATOR_TYPE_tbl(K):=V.QUALIFIER_OPERATOR_TYPE;
        G_VALIDATED_FLAG_tbl(K)          :=V.VALIDATED_FLAG;
        G_APPLIED_FLAG_tbl(K)            :=V.APPLIED_FLAG;
        G_PRICING_STATUS_CODE_tbl(K)     :=G_STATUS_NEW;
        G_PRICING_ATTR_FLAG_tbl(K)       :=V.QUALIFIER_PRICING_ATTR_FLAG;
        G_LINE_DETAIL_INDEX_tbl(K)       :=l_satisfied_line_detail_indx;
        G_LIST_HEADER_ID_tbl(K)          :=l_satisfied_list_header_id;
        G_LIST_LINE_ID_tbl(K)            :=l_satisfied_lst_line_id;
        G_SETUP_VALUE_FROM_tbl(K)        :=V.SETUP_VALUE_FROM;
        G_SETUP_VALUE_TO_tbl(K)          :=V.SETUP_VALUE_TO;
        G_GROUPING_NUMBER_tbl(K)         :=V.QUALIFIER_GROUPING_NO;
        G_NO_QUALIFIERS_IN_GRP_tbl(K)    :=NULL;
        G_PRICING_STATUS_TEXT_tbl(K)     :='PRODUCT_QUALIFIER_PRICING_ONLY';
        G_QUALIFIER_PRECEDENCE_tbl(K)    :=V.QUALIFIER_PRECEDENCE;
        G_DATATYPE_tbl(K)                :=V.QUALIFIER_DATATYPE;
        G_EXCLUDER_FLAG_TBL(K)           :=NULL;
        G_PRODUCT_UOM_CODE_TBL(K)        :=NULL;
        G_QUALIFIER_TYPE_TBL(K)          :=V.QUALIFIER_TYPE;
        G_PRICING_PHASE_ID_TBL_A(K)        :=p_pricing_phase_id;
        G_INCOMP_GRP_CODE_TBL_A(K)         :=l_satisfied_incomp_code;
        G_LINE_DETAIL_TYPE_CODE_TBL_A(K)   :='NULL';
        G_MODIFIER_LEVEL_CODE_TBL_A(K)     :=l_satisfied_modifier_lvl_code;
        G_PRIMARY_UOM_FLAG_TBL_A(K)        :=l_satisfied_primary_uom_flag;
        K:= K+1;

        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug('The value of K : ' || K);
        engine_debug('Qualifier Context : ' || v.qualifier_attribute_context);
        engine_debug('Qualifier Attribute : ' || v.qualifier_attribute);
        engine_debug('Qualifier Value : ' || v.qualifier_attribute_value);
        engine_debug('Qualifier List Header Id : ' || v.list_header_id);
        engine_debug('Qualifier List line Id : ' || v.list_line_id);
        engine_debug('Qualifier Type : ' || v.qualifier_type);

        END IF;
      END LOOP;

      --Reset the satisfied list header and list line info
      l_satisfied_list_header_id := -9999;
      l_satisfied_lst_line_id    := -9999;
      l_satisfied_line_indx      := -9999;
      l_satisfied_line_detail_indx := -9999;

     END IF;

	  end if;

    END LOOP;
   END IF;
 END LOOP;

 qp_debug_util.tstop('L_PROD_QUAL_PRIC_CUR');

 CLOSE l_prod_qual_pric_cur;
qp_debug_util.tstart('L_INNER_QUAL_CUR','Cursor Loop L_INNER_QUAL_CUR');
OPEN l_inner_qual_cur (p_pricing_phase_id, -99,-99,-99,NULL,NULL,NULL,NULL);

LOOP
 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
 engine_debug('In l_inner_qual_cur loop fetch');

 END IF;
 G_LIST_HEADER_ID_TBL_Q.delete;
 G_LIST_LINE_ID_TBL_Q.delete;
 G_LIST_LINE_TYPE_TBL_Q.delete;
 G_LINE_INDEX_TBL_Q.delete;
 G_AUTOMATIC_FLAG_TBL_Q.delete;
 G_MODIFIER_LEVEL_CODE_TBL_Q.delete;
 G_PRIMARY_UOM_FLAG_TBL_Q.delete;
 G_OPER_CALCULATION_CODE_TBL_Q.delete;
 G_OPERAND_TBL_Q.delete;
 G_NET_AMOUNT_FLAG_TBL_Q.delete; -- IT net_amount 2720717
 G_PRICING_GROUP_SEQUENCE_TBL_Q.delete;
 G_PRICING_PHASE_ID_TBL_Q.delete;
 G_PRICE_BREAK_TYPE_CODE_TBL_Q.delete;
 G_INCOMP_GRP_CODE_TBL_Q.delete;
 G_PRICE_FORMULA_ID_TBL_Q.delete;
 G_PRODUCT_PRECEDENCE_TBL_Q.delete;
 G_OVERRIDE_FLAG_TBL_P.delete;
 G_BENEFIT_QTY_TBL_P.delete;
 G_BENEFIT_UOM_CODE_TBL_P.delete;
 G_LIST_LINE_NO_TBL_Q.delete;
 G_ACCRUAL_FLAG_TBL_Q.delete;
 G_ACCR_CONVERSION_RATE_TBL_Q.delete;
 G_ESTIM_ACCRUAL_RATE_TBL_Q.delete;
 G_ASK_FOR_FLAG_TBL_Q.delete;
 G_LIST_TYPE_CODE_TBL_Q.delete;
 G_QUALIFIER_TYPE_TBL_Q.delete;
 G_HEADER_LIMIT_EXISTS_TBL_P.delete;
 G_LINE_LIMIT_EXISTS_TBL_P.delete;
 G_CHARGE_TYPE_CODE_TBL_P.delete;
 G_CHARGE_SUBTYPE_CODE_TBL_P.delete;
 G_ACCUM_CONTEXT_TBL_P.delete; -- for accum range break
 G_ACCUM_ATTRIBUTE_TBL_P.delete; -- for accum range break
 G_ACCUM_FLAG_TBL_P.delete; -- for accum range break

 FETCH l_inner_qual_cur BULK COLLECT INTO
 G_LIST_HEADER_ID_TBL_Q,
 G_LIST_LINE_ID_TBL_Q,
 G_LIST_LINE_TYPE_TBL_Q,
 G_LINE_INDEX_TBL_Q,
 G_AUTOMATIC_FLAG_TBL_Q,
 G_MODIFIER_LEVEL_CODE_TBL_Q,
 G_PRIMARY_UOM_FLAG_TBL_Q,
 G_OPER_CALCULATION_CODE_TBL_Q,
 G_OPERAND_TBL_Q,
 G_NET_AMOUNT_FLAG_TBL_Q, -- IT net_amount 2720717
 G_PRICING_GROUP_SEQUENCE_TBL_Q,
 G_PRICING_PHASE_ID_TBL_Q,
 G_PRICE_BREAK_TYPE_CODE_TBL_Q,
 G_INCOMP_GRP_CODE_TBL_Q,
 G_PRICE_FORMULA_ID_TBL_Q,
 G_PRODUCT_PRECEDENCE_TBL_Q,
 G_OVERRIDE_FLAG_TBL_P,
 G_BENEFIT_QTY_TBL_P,
 G_BENEFIT_UOM_CODE_TBL_P,
 G_LIST_LINE_NO_TBL_Q,
 G_ACCRUAL_FLAG_TBL_Q,
 G_ACCR_CONVERSION_RATE_TBL_Q,
 G_ESTIM_ACCRUAL_RATE_TBL_Q,
 G_ASK_FOR_FLAG_TBL_Q,
 G_LIST_TYPE_CODE_TBL_Q,
 G_HEADER_LIMIT_EXISTS_TBL_P,
 G_LINE_LIMIT_EXISTS_TBL_P,
 G_QUALIFIER_TYPE_TBL_Q ,
 G_CHARGE_TYPE_CODE_TBL_P ,
 G_CHARGE_SUBTYPE_CODE_TBL_P,
 G_ACCUM_CONTEXT_TBL_P, -- accum range break
 G_ACCUM_ATTRIBUTE_TBL_P, -- accum range break
 G_ACCUM_FLAG_TBL_P LIMIT nROWS;

 EXIT WHEN G_LINE_INDEX_TBL_Q.COUNT = 0;

   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug(' In l_inner_qual_cur Count : '||G_LIST_LINE_ID_TBL_Q.count );

   END IF;
   IF (G_LINE_INDEX_TBL_Q.COUNT > 0) THEN
    FOR I in G_LINE_INDEX_TBL_Q.FIRST .. G_LINE_INDEX_TBL_Q.LAST LOOP
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug(' In l_inner_qual_cur : '||G_LIST_LINE_ID_TBL_Q(I) );

        END IF;
     IF (lq_line_index <> G_LINE_INDEX_TBL_Q(I) OR lq_list_line_id <> G_LIST_LINE_ID_TBL_Q(I)) THEN
        l_line_detail_index :=GET_LINE_DETAIL_INDEX;

        G_LINE_INDEX_LD_TBL(M)                :=G_LINE_INDEX_TBL_Q(I);
        G_LINE_DETAIL_INDEX_LD_TBL(M)         :=L_LINE_DETAIL_INDEX;
        G_LIST_HEADER_ID_LD_TBL(M)            :=G_LIST_HEADER_ID_TBL_Q(I);
        G_LIST_LINE_ID_LD_TBL(M)              :=G_LIST_LINE_ID_TBL_Q(I);
        G_PRICING_STATUS_CODE_LD_TBL(M)       :=G_STATUS_NEW;
        G_PRICING_STATUS_TEXT_LD_TBL(M)       :='QUALIFIER_ONLY';
        G_APPLIED_FLAG_LD_TBL(M)              :=G_AUTOMATIC_FLAG_TBL_Q(I);
        G_PROCESSED_FLAG_LD_TBL(M)            :=G_NOT_PROCESSED;
        G_LINE_DETAIL_TYPE_CODE_TBL(M)        :='NULL';
        G_PRICE_BREAK_TYPE_CODE_TBL(M)        :=G_PRICE_BREAK_TYPE_CODE_TBL_Q(I);
        G_LIST_LINE_TYPE_TBL(M)               :=G_LIST_LINE_TYPE_TBL_Q(I);
        G_LIST_TYPE_CODE_TBL(M)               :=G_LIST_TYPE_CODE_TBL_Q(I);
        G_CREATED_FROM_SQL_TBL(M)             :='QUALIFIER_ONLY';
        G_PRICING_GROUP_SEQUENCE_TBL(M)       :=G_PRICING_GROUP_SEQUENCE_TBL_Q(I);
        G_PRICING_PHASE_ID_TBL(M)             :=G_PRICING_PHASE_ID_TBL_Q(I);
        G_OPERAND_CALCULATION_CODE_TBL(M)     :=G_OPER_CALCULATION_CODE_TBL_Q(I);
        G_OPERAND_VALUE_TBL(M)                :=G_OPERAND_TBL_Q(I);
        G_NET_AMOUNT_FLAG_TBL(M)              :=G_NET_AMOUNT_FLAG_TBL_Q(I); -- IT net_amount 2720717
        G_ASK_FOR_FLAG_TBL(M)                 :=G_ASK_FOR_FLAG_TBL_Q(I);
        G_PRICE_FORMULA_ID_TBL(M)             :=G_PRICE_FORMULA_ID_TBL_Q(I);
        G_PRODUCT_PRECEDENCE_TBL(M)           :=G_PRODUCT_PRECEDENCE_TBL_Q(I);
        G_OVERRIDE_FLAG_TBL(M)                :=G_OVERRIDE_FLAG_TBL_P(I);
        G_BENEFIT_QTY_TBL(M)                  :=G_BENEFIT_QTY_TBL_P(I);
        G_BENEFIT_UOM_CODE_TBL(M)             :=G_BENEFIT_UOM_CODE_TBL_P(I);
        G_INCOMP_GRP_CODE_TBL(M)              :=G_INCOMP_GRP_CODE_TBL_Q(I);
        G_AUTOMATIC_FLAG_TBL(M)               :=G_AUTOMATIC_FLAG_TBL_Q(I);
        G_PRIMARY_UOM_FLAG_TBL(M)             :=G_PRIMARY_UOM_FLAG_TBL_Q(I);
        G_MODIFIER_LEVEL_CODE_TBL(M)          :=G_MODIFIER_LEVEL_CODE_TBL_Q(I);
        G_LIST_LINE_NO_TBL(M)                 :=G_LIST_LINE_NO_TBL_Q(I);
        G_ACCRUAL_FLAG_TBL(M)                 :=G_ACCRUAL_FLAG_TBL_Q(I);
        G_ACCRUAL_CONVERSION_RATE_TBL(M)      :=G_ACCR_CONVERSION_RATE_TBL_Q(I);
        G_ESTIM_ACCRUAL_RATE_TBL(M)           :=G_ESTIM_ACCRUAL_RATE_TBL_Q(I);
        G_HEADER_LIMIT_EXISTS_TBL(M)          :=G_HEADER_LIMIT_EXISTS_TBL_P(I);
        G_LINE_LIMIT_EXISTS_TBL(M)            :=G_LINE_LIMIT_EXISTS_TBL_P(I);
        G_CHARGE_TYPE_CODE_TBL(M)            :=nvl(G_CHARGE_TYPE_CODE_TBL_P(I),'');
        G_CHARGE_SUBTYPE_CODE_TBL(M)          :=nvl(G_CHARGE_SUBTYPE_CODE_TBL_P(I),'');
        G_ACCUM_CONTEXT_TBL(M)                :=G_ACCUM_CONTEXT_TBL_P(I);   -- accum range break
        G_ACCUM_ATTRIBUTE_TBL(M)              :=G_ACCUM_ATTRIBUTE_TBL_P(I); -- accum range break
        G_ACCUM_FLAG_TBL(M)                   :=G_ACCUM_FLAG_TBL_P(I);      -- accum range break
        M:=M+1;
        l_satisfied_list_header_id := G_LIST_HEADER_ID_TBL_Q(I);
        l_satisfied_lst_line_id    := G_LIST_LINE_ID_TBL_Q(I);
        l_satisfied_line_indx      := G_LINE_INDEX_TBL_Q(I);
        l_satisfied_line_detail_indx := L_LINE_DETAIL_INDEX;
        l_satisfied_incomp_code := G_INCOMP_GRP_CODE_TBL_Q(I);
        l_satisfied_modifier_lvl_code := G_MODIFIER_LEVEL_CODE_TBL_Q(I);
        l_satisfied_primary_uom_flag :=  G_PRIMARY_UOM_FLAG_TBL_Q(I);
        lq_line_index := G_LINE_INDEX_TBL_Q(I);
        lq_list_line_id := G_LIST_LINE_ID_TBL_Q(I);
      END IF;

		if l_satis_quals_opt <> 'N' then

     IF (l_satisfied_list_header_id <> -9999) THEN

       IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
       engine_debug('Qualifiers for List Header Id : ' || l_satisfied_list_header_id );
       engine_debug('Qualifiers for List Line Id : '   || l_satisfied_lst_line_id );

       END IF;
      FOR V IN  l_get_satisfied_quals(l_satisfied_list_header_id,l_satisfied_lst_line_id, l_satisfied_line_indx)
      LOOP
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug(' Qual #3 ' );
        END IF;
        --Qualifier attributes
        G_LINE_INDEX_tbl(K)              :=l_satisfied_line_indx;
        G_ATTRIBUTE_LEVEL_tbl(K)         :=V.QUALIFIER_ATTRIBUTE_LEVEL;
        G_ATTRIBUTE_TYPE_tbl(K)          :=V.QUALIFIER_ATTRIBUTE_TYPE;
        G_CONTEXT_tbl(K)                 :=V.QUALIFIER_ATTRIBUTE_CONTEXT;
        G_ATTRIBUTE_tbl(K)               :=V.QUALIFIER_ATTRIBUTE;
        G_VALUE_FROM_tbl(K)              :=V.QUALIFIER_ATTRIBUTE_VALUE;
        G_VALUE_TO_tbl(K)                :=NULL;
        G_COMPARISON_OPERATOR_TYPE_tbl(K):=V.QUALIFIER_OPERATOR_TYPE;
        G_VALIDATED_FLAG_tbl(K)          :=V.VALIDATED_FLAG;
        G_APPLIED_FLAG_tbl(K)            :=V.APPLIED_FLAG;
        G_PRICING_STATUS_CODE_tbl(K)     :=G_STATUS_NEW;
        G_PRICING_ATTR_FLAG_tbl(K)       :=V.QUALIFIER_PRICING_ATTR_FLAG;
        G_LINE_DETAIL_INDEX_tbl(K)       :=l_satisfied_line_detail_indx;
        G_LIST_HEADER_ID_tbl(K)          :=l_satisfied_list_header_id;
        G_LIST_LINE_ID_tbl(K)            :=l_satisfied_lst_line_id;
        G_SETUP_VALUE_FROM_tbl(K)        :=V.SETUP_VALUE_FROM;
        G_SETUP_VALUE_TO_tbl(K)          :=V.SETUP_VALUE_TO;
        G_GROUPING_NUMBER_tbl(K)         :=V.QUALIFIER_GROUPING_NO;
        G_NO_QUALIFIERS_IN_GRP_tbl(K)    :=NULL;
        G_PRICING_STATUS_TEXT_tbl(K)     :='QUALIFIERS_ONLY';
        G_QUALIFIER_PRECEDENCE_tbl(K)    :=V.QUALIFIER_PRECEDENCE;
        G_DATATYPE_tbl(K)                :=V.QUALIFIER_DATATYPE;
        G_EXCLUDER_FLAG_TBL(K)           :=NULL;
        G_PRODUCT_UOM_CODE_TBL(K)        :=NULL;
        G_QUALIFIER_TYPE_TBL(K)          :=V.QUALIFIER_TYPE;
        G_PRICING_PHASE_ID_TBL_A(K)        :=p_pricing_phase_id;
        G_INCOMP_GRP_CODE_TBL_A(K)         :=l_satisfied_incomp_code;
        G_LINE_DETAIL_TYPE_CODE_TBL_A(K)   :='NULL';
        G_MODIFIER_LEVEL_CODE_TBL_A(K)     :=l_satisfied_modifier_lvl_code;
        G_PRIMARY_UOM_FLAG_TBL_A(K)        :=l_satisfied_primary_uom_flag;
        K:= K+1;

        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug('The value of K : ' || K);
        engine_debug('Qualifier Context : ' || v.qualifier_attribute_context);
        engine_debug('Qualifier Attribute : ' || v.qualifier_attribute);
        engine_debug('Qualifier Value : ' || v.qualifier_attribute_value);
        engine_debug('Qualifier List Header Id : ' || v.list_header_id);
        engine_debug('Qualifier List line Id : ' || v.list_line_id);
        engine_debug('Qualifier Type : ' || v.qualifier_type);

        END IF;
      END LOOP;

      --Reset the satisfied list header and list line info
      l_satisfied_list_header_id := -9999;
      l_satisfied_lst_line_id    := -9999;
      l_satisfied_line_indx      := -9999;
      l_satisfied_line_detail_indx := -9999;

     END IF;

	  end if;

    END LOOP;
   END IF;
END LOOP;

qp_debug_util.tstop('L_INNER_QUAL_CUR');
CLOSE l_inner_qual_cur;

lq_line_index              := -9999;
lq_list_line_id            := -9999;

--selecting lists that match product qttributes only
IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
engine_debug('Before l_prod_cur_mod');
END IF;
qp_debug_util.tstart('L_PROD_CUR','Cursor Loop L_PROD_CUR');
OPEN l_prod_cur(p_pricing_phase_id);


LOOP
  G_LIST_HEADER_ID_TBL_P.delete;
  G_LIST_LINE_ID_TBL_P.delete;
  G_LIST_LINE_TYPE_TBL_P.delete;
  G_LINE_INDEX_TBL_P.delete;
  G_VALIDATED_FLAG_TBL_P.delete;
  G_APPLIED_FLAG_TBL_P.delete;
  G_ATTRIBUTE_LEVEL_TBL_P.delete;
  G_ATTRIBUTE_TYPE_TBL_P.delete;
  G_CONTEXT_TBL_P.delete;
  G_ATTRIBUTE_TBL_P.delete;
  G_VALUE_FROM_TBL_P.delete;
  G_SETUP_VALUE_FROM_TBL_P.delete;
  G_PRICING_ATTR_FLAG_TBL_P.delete;
  G_PRODUCT_UOM_CODE_TBL_P.delete;
  G_EXCLUDER_FLAG_TBL_P.delete;
  G_GROUPING_NUMBER_TBL_P.delete;
  G_QUALIFIER_PRECEDENCE_TBL_P.delete;
  G_AUTOMATIC_FLAG_TBL_P.delete;
  G_MODIFIER_LEVEL_CODE_TBL_P.delete;
  G_PRIMARY_UOM_FLAG_TBL_P.delete;
  G_OPER_CALCULATION_CODE_TBL_P.delete;
  G_OPERAND_VALUE_TBL_P.delete;
  G_NET_AMOUNT_FLAG_TBL_P.delete;  -- IT net_amount 2720717
  G_PRICING_GROUP_SEQUENCE_TBL_P.delete;
  G_ASK_FOR_FLAG_TBL_P.delete;
  G_LIST_TYPE_CODE_TBL_P.delete;
  G_PRICING_PHASE_ID_TBL_P.delete;
  G_PRICE_BREAK_TYPE_CODE_TBL_P.delete;
  G_INCOMP_GRP_CODE_TBL_P.delete;
  G_PRICE_FORMULA_ID_TBL_P.delete;
  G_PRODUCT_PRECEDENCE_TBL_P.delete;
  G_OVERRIDE_FLAG_TBL_P.delete;
  G_BENEFIT_QTY_TBL_P.delete;
  G_BENEFIT_UOM_CODE_TBL_P.delete;
  G_LIST_LINE_NO_TBL_P.delete;
  G_ACCRUAL_FLAG_TBL_P.delete;
  G_ACCR_CONVERSION_RATE_TBL_P.delete;
  G_ESTIM_ACCRUAL_RATE_TBL_P.delete;
  G_HEADER_LIMIT_EXISTS_TBL_P.delete;
  G_LINE_LIMIT_EXISTS_TBL_P.delete;
  G_QUALIFIER_TYPE_TBL_P.delete;
  G_CHARGE_TYPE_CODE_TBL_P.delete;
  G_CHARGE_SUBTYPE_CODE_TBL_P.delete;
  G_ACCUM_CONTEXT_TBL_P.delete; -- for accum range break
  G_ACCUM_ATTRIBUTE_TBL_P.delete; -- for accum range break
  G_ACCUM_FLAG_TBL_P.delete; -- for accum range break

  FETCH l_prod_cur BULK COLLECT INTO
    G_LIST_HEADER_ID_TBL_P
  , G_LIST_LINE_ID_TBL_P
  , G_LIST_LINE_TYPE_TBL_P
  , G_LINE_INDEX_TBL_P
  , G_VALIDATED_FLAG_TBL_P
  , G_APPLIED_FLAG_TBL_P
  , G_ATTRIBUTE_LEVEL_TBL_P
  , G_ATTRIBUTE_TYPE_TBL_P
  , G_CONTEXT_TBL_P
  , G_ATTRIBUTE_TBL_P
  , G_VALUE_FROM_TBL_P
  , G_SETUP_VALUE_FROM_TBL_P
  , G_PRICING_ATTR_FLAG_TBL_P
  , G_PRODUCT_UOM_CODE_TBL_P
  , G_EXCLUDER_FLAG_TBL_P
  , G_GROUPING_NUMBER_TBL_P
  , G_QUALIFIER_PRECEDENCE_TBL_P
  , G_AUTOMATIC_FLAG_TBL_P
  , G_MODIFIER_LEVEL_CODE_TBL_P
  , G_PRIMARY_UOM_FLAG_TBL_P
  , G_OPER_CALCULATION_CODE_TBL_P
  , G_OPERAND_VALUE_TBL_P
  , G_NET_AMOUNT_FLAG_TBL_P  -- IT net_amount 2720717
  , G_PRICING_GROUP_SEQUENCE_TBL_P
  , G_ASK_FOR_FLAG_TBL_P
  , G_LIST_TYPE_CODE_TBL_P
  , G_PRICING_PHASE_ID_TBL_P
  , G_PRICE_BREAK_TYPE_CODE_TBL_P
  , G_INCOMP_GRP_CODE_TBL_P
  , G_PRICE_FORMULA_ID_TBL_P
  , G_PRODUCT_PRECEDENCE_TBL_P
  , G_OVERRIDE_FLAG_TBL_P
  , G_BENEFIT_QTY_TBL_P
  , G_BENEFIT_UOM_CODE_TBL_P
  , G_LIST_LINE_NO_TBL_P
  , G_ACCRUAL_FLAG_TBL_P
  , G_ACCR_CONVERSION_RATE_TBL_P
  , G_ESTIM_ACCRUAL_RATE_TBL_P
  , G_HEADER_LIMIT_EXISTS_TBL_P
  , G_LINE_LIMIT_EXISTS_TBL_P
  , G_QUALIFIER_TYPE_TBL_P
  , G_CHARGE_TYPE_CODE_TBL_P
  , G_CHARGE_SUBTYPE_CODE_TBL_P
  , G_ACCUM_CONTEXT_TBL_P -- accum range break
  , G_ACCUM_ATTRIBUTE_TBL_P -- accum range break
  , G_ACCUM_FLAG_TBL_P LIMIT nROWS;

   EXIT WHEN G_LINE_INDEX_TBL_P.COUNT = 0;

 IF (G_LINE_INDEX_TBL_P.COUNT > 0) THEN
  FOR I in G_LINE_INDEX_TBL_P.FIRST .. G_LINE_INDEX_TBL_P.LAST LOOP
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('Before dup tbl loop');
    END IF;

     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('List line id selected from l_prod_cur_mod: '||g_list_line_id_TBL_P(I));
     engine_debug('Excluder Flag selected from big select1: '||g_excluder_flag_TBL_P(I));

     END IF;
     IF (lq_line_index <> g_line_index_tbl_p(I) OR lq_list_line_id <> g_list_line_id_tbl_p(I)) THEN
        l_prod_cur_count := l_prod_cur_count + 1;
        l_line_detail_index := get_line_detail_index;

        G_LINE_INDEX_LD_TBL(M)                :=G_LINE_INDEX_TBL_P(I);
        G_LINE_DETAIL_INDEX_LD_TBL(M)         :=L_LINE_DETAIL_INDEX;
        G_LIST_HEADER_ID_LD_TBL(M)            :=G_LIST_HEADER_ID_TBL_P(I);
        G_LIST_LINE_ID_LD_TBL(M)              :=G_LIST_LINE_ID_TBL_P(I);
        G_PRICING_STATUS_CODE_LD_TBL(M)       :=G_STATUS_NEW;
        G_PRICING_STATUS_TEXT_LD_TBL(M)       := 'PRODUCT_ONLY';
        G_APPLIED_FLAG_LD_TBL(M)              :=G_AUTOMATIC_FLAG_TBL_P(I);
        G_PROCESSED_FLAG_LD_TBL(M)            :=G_NOT_PROCESSED;
        G_LINE_DETAIL_TYPE_CODE_TBL(M)        :='NULL';
        G_PRICE_BREAK_TYPE_CODE_TBL(M)        :=G_PRICE_BREAK_TYPE_CODE_TBL_P(I);
        G_LIST_LINE_TYPE_TBL(M)               :=G_LIST_LINE_TYPE_TBL_P(I);
        G_LIST_TYPE_CODE_TBL(M)               :=G_LIST_TYPE_CODE_TBL_P(I);
        G_CREATED_FROM_SQL_TBL(M)             :='PRODUCT_ONLY';
        G_PRICING_GROUP_SEQUENCE_TBL(M)       :=G_PRICING_GROUP_SEQUENCE_TBL_P(I);
        G_PRICING_PHASE_ID_TBL(M)             :=G_PRICING_PHASE_ID_TBL_P(I);
        G_OPERAND_CALCULATION_CODE_TBL(M)     :=G_OPER_CALCULATION_CODE_TBL_P(I);
        G_OPERAND_VALUE_TBL(M)                :=G_OPERAND_VALUE_TBL_P(I);
        G_NET_AMOUNT_FLAG_TBL(M)              :=G_NET_AMOUNT_FLAG_TBL_P(I);  -- IT net_amount 2720717
        G_ASK_FOR_FLAG_TBL(M)                 :=G_ASK_FOR_FLAG_TBL_P(I);
        G_PRICE_FORMULA_ID_TBL(M)             :=G_PRICE_FORMULA_ID_TBL_P(I);
        G_PRODUCT_PRECEDENCE_TBL(M)           :=G_PRODUCT_PRECEDENCE_TBL_P(I);
        G_INCOMP_GRP_CODE_TBL(M)              :=G_INCOMP_GRP_CODE_TBL_P(I);
        G_AUTOMATIC_FLAG_TBL(M)               :=G_AUTOMATIC_FLAG_TBL_P(I);
        G_OVERRIDE_FLAG_TBL(M)                :=G_OVERRIDE_FLAG_TBL_P(I);
        G_BENEFIT_QTY_TBL(M)                  :=G_BENEFIT_QTY_TBL_P(I);
        G_BENEFIT_UOM_CODE_TBL(M)             :=G_BENEFIT_UOM_CODE_TBL_P(I);
        G_PRIMARY_UOM_FLAG_TBL(M)             :=G_PRIMARY_UOM_FLAG_TBL_P(I);
        G_MODIFIER_LEVEL_CODE_TBL(M)          :=G_MODIFIER_LEVEL_CODE_TBL_P(I);
        G_LIST_LINE_NO_TBL(M)                 :=G_LIST_LINE_NO_TBL_P(I);
        G_ACCRUAL_FLAG_TBL(M)                 :=G_ACCRUAL_FLAG_TBL_P(I);
        G_ACCRUAL_CONVERSION_RATE_TBL(M)      :=G_ACCR_CONVERSION_RATE_TBL_P(I);
        G_ESTIM_ACCRUAL_RATE_TBL(M)           :=G_ESTIM_ACCRUAL_RATE_TBL_P(I);
        G_HEADER_LIMIT_EXISTS_TBL(M)          :=G_HEADER_LIMIT_EXISTS_TBL_P(I);
        G_LINE_LIMIT_EXISTS_TBL(M)            :=G_LINE_LIMIT_EXISTS_TBL_P(I);
        G_CHARGE_TYPE_CODE_TBL(M)            :=nvl(G_CHARGE_TYPE_CODE_TBL_P(I),'');
        G_CHARGE_SUBTYPE_CODE_TBL(M)          :=nvl(G_CHARGE_SUBTYPE_CODE_TBL_P(I),'');
        G_ACCUM_CONTEXT_TBL(M)                :=G_ACCUM_CONTEXT_TBL_P(I);   -- accum range break
        G_ACCUM_ATTRIBUTE_TBL(M)              :=G_ACCUM_ATTRIBUTE_TBL_P(I); -- accum range break
        G_ACCUM_FLAG_TBL(M)                   :=G_ACCUM_FLAG_TBL_P(I);      -- accum range break
        M:=M+1;
        lq_line_index := g_line_index_tbl_p(I);
        lq_list_line_id := g_list_line_id_tbl_p(I);
     END IF;  --end if for if list_line_no_exists

		--if l_satis_quals_opt <> 'N' then
       -- 4029027 commented by [4455344/4489224]
       --bug 4029027
       --IF  (l_satis_quals_opt <> 'N' or (l_satis_quals_opt = 'N' and g_context_tbl_p(i) <> G_QUALIFIER_TYPE)) THEN

        --INSERT PRODUCT ATTRIBUTES
        G_LINE_INDEX_tbl(K)              := G_LINE_INDEX_TBL_P(I);
        G_ATTRIBUTE_LEVEL_tbl(K)         := G_ATTRIBUTE_LEVEL_TBL_P(I);
        G_ATTRIBUTE_TYPE_tbl(K)          := G_ATTRIBUTE_TYPE_TBL_P(I);
        G_CONTEXT_tbl(K)                 := G_CONTEXT_TBL_P(I);
        G_ATTRIBUTE_tbl(K)               := G_ATTRIBUTE_TBL_P(I);
        G_VALUE_FROM_tbl(K)              := G_VALUE_FROM_TBL_P(I);
        G_VALUE_TO_tbl(K)                := NULL;
        G_COMPARISON_OPERATOR_TYPE_tbl(K):= NULL;
        G_VALIDATED_FLAG_tbl(K)          := G_VALIDATED_FLAG_TBL_P(I);
        G_APPLIED_FLAG_tbl(K)            := G_APPLIED_FLAG_TBL_P(I);
        G_PRICING_STATUS_CODE_tbl(K)     := G_STATUS_NEW;
        G_PRICING_ATTR_FLAG_tbl(K)       :=G_PRICING_ATTR_FLAG_TBL_P(I);
        G_LINE_DETAIL_INDEX_tbl(K)       :=L_LINE_DETAIL_INDEX;
        G_LIST_HEADER_ID_tbl(K)          :=G_LIST_HEADER_ID_TBL_P(I);
        G_LIST_LINE_ID_tbl(K)            :=G_LIST_LINE_ID_TBL_P(I);
        G_SETUP_VALUE_FROM_tbl(K)        :=G_SETUP_VALUE_FROM_TBL_P(I);
        G_SETUP_VALUE_TO_tbl(K)          :=NULL;
        G_GROUPING_NUMBER_tbl(K)         :=G_GROUPING_NUMBER_TBL_P(I);
        G_NO_QUALIFIERS_IN_GRP_tbl(K)    :=NULL;
        G_PRICING_STATUS_TEXT_tbl(K)     :='PRODUCT_ONLY';
        G_QUALIFIER_PRECEDENCE_tbl(K)    :=G_QUALIFIER_PRECEDENCE_TBL_P(I);
        G_DATATYPE_tbl(K)                :=NULL;
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug('Before Insert Excluder Flag selected from big select1: '||g_excluder_flag_TBL_P(I));
        END IF;
        G_EXCLUDER_FLAG_TBL(K)           :=G_EXCLUDER_FLAG_TBL_P(I);
        G_PRODUCT_UOM_CODE_TBL(K)        :=G_PRODUCT_UOM_CODE_TBL_P(I);
        G_QUALIFIER_TYPE_TBL(K)          :=G_QUALIFIER_TYPE_TBL_P(I);
        G_PRICING_PHASE_ID_TBL_A(K)        :=p_pricing_phase_id;
        G_INCOMP_GRP_CODE_TBL_A(K)         :=G_INCOMP_GRP_CODE_TBL_P(I);
        G_LINE_DETAIL_TYPE_CODE_TBL_A(K)   :='NULL';
        G_MODIFIER_LEVEL_CODE_TBL_A(K)     :=G_MODIFIER_LEVEL_CODE_TBL_P(I);
        G_PRIMARY_UOM_FLAG_TBL_A(K)        :=G_PRIMARY_UOM_FLAG_TBL_P(I);
        K:= K+1;
 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
	engine_debug('The value of K : ' || K);
 END IF;

	-- end if; [4455344/4489224]

  END LOOP;
 END IF;
END LOOP;

qp_debug_util.tstop('L_PROD_CUR');

CLOSE l_prod_cur;
IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
engine_debug('After l_prod_cur_mod');

END IF;
lq_line_index              := -9999;
lq_list_line_id            := -9999;

IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
engine_debug('Before l_prod_pric_cur_mod');
END IF;
qp_debug_util.tstart('L_PROD_PRIC_CUR','Cursor Loop L_PROD_PRIC_CUR');
OPEN l_prod_pric_cur(p_pricing_phase_id);



LOOP
  G_LIST_HEADER_ID_TBL_P.delete;
  G_LIST_LINE_ID_TBL_P.delete;
  G_LIST_LINE_TYPE_TBL_P.delete;
  G_LINE_INDEX_TBL_P.delete;
  G_VALIDATED_FLAG_TBL_P.delete;
  G_APPLIED_FLAG_TBL_P.delete;
  G_ATTRIBUTE_LEVEL_TBL_P.delete;
  G_ATTRIBUTE_TYPE_TBL_P.delete;
  G_CONTEXT_TBL_P.delete;
  G_ATTRIBUTE_TBL_P.delete;
  G_VALUE_FROM_TBL_P.delete;
  G_SETUP_VALUE_FROM_TBL_P.delete;
  G_PRICING_ATTR_FLAG_TBL_P.delete;
  G_PRODUCT_UOM_CODE_TBL_P.delete;
  G_EXCLUDER_FLAG_TBL_P.delete;
  G_GROUPING_NUMBER_TBL_P.delete;
  G_QUALIFIER_PRECEDENCE_TBL_P.delete;
  G_AUTOMATIC_FLAG_TBL_P.delete;
  G_MODIFIER_LEVEL_CODE_TBL_P.delete;
  G_PRIMARY_UOM_FLAG_TBL_P.delete;
  G_OPER_CALCULATION_CODE_TBL_P.delete;
  G_OPERAND_VALUE_TBL_P.delete;
  G_NET_AMOUNT_FLAG_TBL_P.delete;  -- IT net_amount 2720717
  G_PRICING_GROUP_SEQUENCE_TBL_P.delete;
  G_ASK_FOR_FLAG_TBL_P.delete;
  G_LIST_TYPE_CODE_TBL_P.delete;
  G_PRICING_PHASE_ID_TBL_P.delete;
  G_PRICE_BREAK_TYPE_CODE_TBL_P.delete;
  G_INCOMP_GRP_CODE_TBL_P.delete;
  G_PRICE_FORMULA_ID_TBL_P.delete;
  G_PRODUCT_PRECEDENCE_TBL_P.delete;
  G_OVERRIDE_FLAG_TBL_P.delete;
  G_PRINT_ON_INVOICE_FLAG_TBL_P.delete;
  G_BENEFIT_QTY_TBL_P.delete;
  G_BENEFIT_UOM_CODE_TBL_P.delete;
  G_LIST_LINE_NO_TBL_P.delete;
  G_ACCRUAL_FLAG_TBL_P.delete;
  G_ACCR_CONVERSION_RATE_TBL_P.delete;
  G_ESTIM_ACCRUAL_RATE_TBL_P.delete;
  G_QUALIFIER_TYPE_TBL_P.delete;
  G_ATTRIBUTE_LEVEL_TBL_PR.delete;
  G_ATTRIBUTE_TYPE_TBL_PR.delete;
  G_CONTEXT_TBL_PR.delete;
  G_ATTRIBUTE_TBL_PR.delete;
  G_VALUE_FROM_TBL_PR.delete;
  G_OPERATOR_TYPE_TBL_PR.delete;
  G_SETUP_VALUE_FROM_TBL_PR.delete;
  G_SETUP_VALUE_TO_TBL_PR.delete;
  G_DATATYPE_TBL_PR.delete;
  G_HEADER_LIMIT_EXISTS_TBL_P.delete;
  G_LINE_LIMIT_EXISTS_TBL_P.delete;
  G_CHARGE_TYPE_CODE_TBL_P.delete;
  G_CHARGE_SUBTYPE_CODE_TBL_P.delete;
  G_ACCUM_CONTEXT_TBL_P.delete; -- for accum range break
  G_ACCUM_ATTRIBUTE_TBL_P.delete; -- for accum range break
  G_ACCUM_FLAG_TBL_P.delete; -- for accum range break

FETCH l_prod_pric_cur BULK COLLECT INTO
    G_LIST_HEADER_ID_TBL_P
  , G_LIST_LINE_ID_TBL_P
  , G_LIST_LINE_TYPE_TBL_P
  , G_LINE_INDEX_TBL_P
  , G_VALIDATED_FLAG_TBL_P
  , G_APPLIED_FLAG_TBL_P
  , G_ATTRIBUTE_LEVEL_TBL_P
  , G_ATTRIBUTE_TYPE_TBL_P
  , G_CONTEXT_TBL_P
  , G_ATTRIBUTE_TBL_P
  , G_VALUE_FROM_TBL_P
  , G_SETUP_VALUE_FROM_TBL_P
  , G_PRICING_ATTR_FLAG_TBL_P
  , G_PRODUCT_UOM_CODE_TBL_P
  , G_EXCLUDER_FLAG_TBL_P
  , G_ATTRIBUTE_LEVEL_TBL_PR
  , G_ATTRIBUTE_TYPE_TBL_PR
  , G_CONTEXT_TBL_PR
  , G_ATTRIBUTE_TBL_PR
  , G_VALUE_FROM_TBL_PR
  , G_SETUP_VALUE_FROM_TBL_PR
  , G_SETUP_VALUE_TO_TBL_PR
  , G_OPERATOR_TYPE_TBL_PR
  , G_DATATYPE_TBL_PR
  , G_GROUPING_NUMBER_TBL_P
  , G_QUALIFIER_PRECEDENCE_TBL_P
  , G_AUTOMATIC_FLAG_TBL_P
  , G_MODIFIER_LEVEL_CODE_TBL_P
  , G_PRIMARY_UOM_FLAG_TBL_P
  , G_OPER_CALCULATION_CODE_TBL_P
  , G_OPERAND_VALUE_TBL_P
  , G_NET_AMOUNT_FLAG_TBL_P  -- IT net_amount 2720717
  , G_PRICING_GROUP_SEQUENCE_TBL_P
  , G_ASK_FOR_FLAG_TBL_P
  , G_LIST_TYPE_CODE_TBL_P
  , G_PRICING_PHASE_ID_TBL_P
  , G_PRICE_BREAK_TYPE_CODE_TBL_P
  , G_INCOMP_GRP_CODE_TBL_P
  , G_PRICE_FORMULA_ID_TBL_P
  , G_PRODUCT_PRECEDENCE_TBL_P
  , G_OVERRIDE_FLAG_TBL_P
  , G_BENEFIT_QTY_TBL_P
  , G_BENEFIT_UOM_CODE_TBL_P
  , G_LIST_LINE_NO_TBL_P
  , G_ACCRUAL_FLAG_TBL_P
  , G_ACCR_CONVERSION_RATE_TBL_P
  , G_ESTIM_ACCRUAL_RATE_TBL_P
  , G_HEADER_LIMIT_EXISTS_TBL_P
  , G_LINE_LIMIT_EXISTS_TBL_P
  , G_QUALIFIER_TYPE_TBL_P
  , G_CHARGE_TYPE_CODE_TBL_P
  , G_CHARGE_SUBTYPE_CODE_TBL_P
  , G_ACCUM_CONTEXT_TBL_P -- accum range break
  , G_ACCUM_ATTRIBUTE_TBL_P -- accum range break
  , G_ACCUM_FLAG_TBL_P LIMIT nROWS;

   EXIT WHEN G_LINE_INDEX_TBL_P.COUNT = 0;

  --selecting lists that match product and pricing attributes only
 IF (G_LINE_INDEX_TBL_P.COUNT > 0) THEN
  FOR I in G_LINE_INDEX_TBL_P.FIRST .. G_LINE_INDEX_TBL_P.LAST LOOP
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('List line id selected from l_prod_pric_cur_mod: '||G_LIST_LINE_ID_TBL_P(I) );
    END IF;
    IF (lq_line_index <> g_line_index_tbl_p(I) OR lq_list_line_id <> g_list_line_id_tbl_p(I)) THEN
        L_LINE_DETAIL_INDEX := GET_LINE_DETAIL_INDEX;

        G_LINE_INDEX_LD_TBL(M)                :=G_LINE_INDEX_TBL_P(I);
        G_LINE_DETAIL_INDEX_LD_TBL(M)         :=L_LINE_DETAIL_INDEX;
        G_LIST_HEADER_ID_LD_TBL(M)            :=G_LIST_HEADER_ID_TBL_P(I);
        G_LIST_LINE_ID_LD_TBL(M)              :=G_LIST_LINE_ID_TBL_P(I);
        G_PRICING_STATUS_CODE_LD_TBL(M)       :=G_STATUS_NEW;
        G_PRICING_STATUS_TEXT_LD_TBL(M)       := 'PRODUCT_PRICING_ONLY';
        G_APPLIED_FLAG_LD_TBL(M)              :=G_AUTOMATIC_FLAG_TBL_P(I);
        G_PROCESSED_FLAG_LD_TBL(M)            :=G_NOT_PROCESSED;
        G_LINE_DETAIL_TYPE_CODE_TBL(M)        :='NULL';
        G_PRICE_BREAK_TYPE_CODE_TBL(M)        :=G_PRICE_BREAK_TYPE_CODE_TBL_P(I);
        G_LIST_LINE_TYPE_TBL(M)               :=G_LIST_LINE_TYPE_TBL_P(I);
        G_LIST_TYPE_CODE_TBL(M)               :=G_LIST_TYPE_CODE_TBL_P(I);
        G_CREATED_FROM_SQL_TBL(M)             :='PRODUCT_PRICING_ONLY';
        G_PRICING_GROUP_SEQUENCE_TBL(M)       :=G_PRICING_GROUP_SEQUENCE_TBL_P(I);
        G_PRICING_PHASE_ID_TBL(M)             :=G_PRICING_PHASE_ID_TBL_P(I);
        G_OPERAND_CALCULATION_CODE_TBL(M)     :=G_OPER_CALCULATION_CODE_TBL_P(I);
        G_OPERAND_VALUE_TBL(M)                :=G_OPERAND_VALUE_TBL_P(I);
        G_NET_AMOUNT_FLAG_TBL(M)              :=G_NET_AMOUNT_FLAG_TBL_P(I);  --?? IT net_amount 2720717
        G_ASK_FOR_FLAG_TBL(M)                 :=G_ASK_FOR_FLAG_TBL_P(I);
        G_PRICE_FORMULA_ID_TBL(M)             :=G_PRICE_FORMULA_ID_TBL_P(I);
        G_PRODUCT_PRECEDENCE_TBL(M)           :=G_PRODUCT_PRECEDENCE_TBL_P(I);
        G_INCOMP_GRP_CODE_TBL(M)              :=G_INCOMP_GRP_CODE_TBL_P(I);
        G_AUTOMATIC_FLAG_TBL(M)               :=G_AUTOMATIC_FLAG_TBL_P(I);
        G_OVERRIDE_FLAG_TBL(M)                :=G_OVERRIDE_FLAG_TBL_P(I);
        G_PRIMARY_UOM_FLAG_TBL(M)             :=G_PRIMARY_UOM_FLAG_TBL_P(I);
        G_MODIFIER_LEVEL_CODE_TBL(M)          :=G_MODIFIER_LEVEL_CODE_TBL_P(I);
        G_BENEFIT_QTY_TBL(M)                  :=G_BENEFIT_QTY_TBL_P(I);
        G_BENEFIT_UOM_CODE_TBL(M)             :=G_BENEFIT_UOM_CODE_TBL_P(I);
        G_LIST_LINE_NO_TBL(M)                 :=G_LIST_LINE_NO_TBL_P(I);
        G_ACCRUAL_FLAG_TBL(M)                 :=G_ACCRUAL_FLAG_TBL_P(I);
        G_ACCRUAL_CONVERSION_RATE_TBL(M)      :=G_ACCR_CONVERSION_RATE_TBL_P(I);
        G_ESTIM_ACCRUAL_RATE_TBL(M)           :=G_ESTIM_ACCRUAL_RATE_TBL_P(I);
        G_HEADER_LIMIT_EXISTS_TBL(M)          :=G_HEADER_LIMIT_EXISTS_TBL_P(I);
        G_LINE_LIMIT_EXISTS_TBL(M)            :=G_LINE_LIMIT_EXISTS_TBL_P(I);
        G_CHARGE_TYPE_CODE_TBL(M)            :=nvl(G_CHARGE_TYPE_CODE_TBL_P(I),'');
        G_CHARGE_SUBTYPE_CODE_TBL(M)          :=nvl(G_CHARGE_SUBTYPE_CODE_TBL_P(I),'');
        G_ACCUM_CONTEXT_TBL(M)                :=G_ACCUM_CONTEXT_TBL_P(I);   -- accum range break
        G_ACCUM_ATTRIBUTE_TBL(M)              :=G_ACCUM_ATTRIBUTE_TBL_P(I); -- accum range break
        G_ACCUM_FLAG_TBL(M)                   :=G_ACCUM_FLAG_TBL_P(I);      -- accum range break
        M:=M+1;
        lq_line_index := g_line_index_tbl_p(I);
        lq_list_line_id := g_list_line_id_tbl_p(I);

    END IF;  --end if for is list_line_no_exists


		--if l_satis_quals_opt <> 'N' then
       -- 4029027 commented out by [4455344/4489224]
       --bug 4029027
       --IF  (l_satis_quals_opt <> 'N' or (l_satis_quals_opt = 'N' and g_context_tbl_p(i) <> G_QUALIFIER_TYPE)) THEN

        --INSERT PRODUCT ATTRIBUTES
        G_LINE_INDEX_tbl(K)              := G_LINE_INDEX_TBL_P(I);
        G_ATTRIBUTE_LEVEL_tbl(K)         := G_ATTRIBUTE_LEVEL_TBL_P(I);
        G_ATTRIBUTE_TYPE_tbl(K)          := G_ATTRIBUTE_TYPE_TBL_P(I);
        G_CONTEXT_tbl(K)                 := G_CONTEXT_TBL_P(I);
        G_ATTRIBUTE_tbl(K)               := G_ATTRIBUTE_TBL_P(I);
        G_VALUE_FROM_tbl(K)              := G_VALUE_FROM_TBL_P(I);
        G_VALUE_TO_tbl(K)                := NULL;
        G_COMPARISON_OPERATOR_TYPE_tbl(K):= NULL;
        G_VALIDATED_FLAG_tbl(K)          := G_VALIDATED_FLAG_TBL_P(I);
        G_APPLIED_FLAG_tbl(K)            := G_APPLIED_FLAG_TBL_P(I);
        G_PRICING_STATUS_CODE_tbl(K)     := G_STATUS_NEW;
        G_PRICING_ATTR_FLAG_tbl(K)       :=G_PRICING_ATTR_FLAG_TBL_P(I);
        G_LINE_DETAIL_INDEX_tbl(K)       :=L_LINE_DETAIL_INDEX;
        G_LIST_HEADER_ID_tbl(K)          :=G_LIST_HEADER_ID_TBL_P(I);
        G_LIST_LINE_ID_tbl(K)            :=G_LIST_LINE_ID_TBL_P(I);
        G_SETUP_VALUE_FROM_tbl(K)        :=G_SETUP_VALUE_FROM_TBL_P(I);
        G_SETUP_VALUE_TO_tbl(K)          :=NULL;
        G_GROUPING_NUMBER_tbl(K)         :=G_GROUPING_NUMBER_TBL_P(I);
        G_NO_QUALIFIERS_IN_GRP_tbl(K)    :=NULL;
        G_PRICING_STATUS_TEXT_tbl(K)     :='PRODUCT_PRICING_ONLY';
        G_QUALIFIER_PRECEDENCE_tbl(K)    :=G_QUALIFIER_PRECEDENCE_TBL_P(I);
        G_DATATYPE_tbl(K)                :=NULL;
        G_EXCLUDER_FLAG_TBL(K)           :=G_EXCLUDER_FLAG_TBL_P(I);
        G_PRODUCT_UOM_CODE_TBL(K)        :=G_PRODUCT_UOM_CODE_TBL_P(I);
        G_QUALIFIER_TYPE_TBL(K)          :=G_QUALIFIER_TYPE_TBL_P(I);
        G_PRICING_PHASE_ID_TBL_A(K)        :=p_pricing_phase_id;
        G_INCOMP_GRP_CODE_TBL_A(K)         :=G_INCOMP_GRP_CODE_TBL_P(I);
        G_LINE_DETAIL_TYPE_CODE_TBL_A(K)   :='NULL';
        G_MODIFIER_LEVEL_CODE_TBL_A(K)     :=G_MODIFIER_LEVEL_CODE_TBL_P(I);
        G_PRIMARY_UOM_FLAG_TBL_A(K)        :=G_PRIMARY_UOM_FLAG_TBL_P(I);
        K:= K+1;
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug('The value of K : ' || K);

        END IF;
        --INSERT PRICING ATTRIBUTES
        IF (G_CONTEXT_TBL_PR(I) IS NOT NULL) THEN
        G_LINE_INDEX_tbl(K)              := G_LINE_INDEX_TBL_P(I);
        G_ATTRIBUTE_LEVEL_tbl(K)         := G_ATTRIBUTE_LEVEL_TBL_PR(I);
        G_ATTRIBUTE_TYPE_tbl(K)          := G_ATTRIBUTE_TYPE_TBL_PR(I);
        G_CONTEXT_tbl(K)                 := G_CONTEXT_TBL_PR(I);
        G_ATTRIBUTE_tbl(K)               := G_ATTRIBUTE_TBL_PR(I);
        G_VALUE_FROM_tbl(K)              := G_VALUE_FROM_TBL_PR(I);
        G_VALUE_TO_tbl(K)                := NULL;
        G_COMPARISON_OPERATOR_TYPE_tbl(K):= G_OPERATOR_TYPE_TBL_PR(I);
        G_VALIDATED_FLAG_tbl(K)          := G_VALIDATED_FLAG_TBL_P(I);
        G_APPLIED_FLAG_tbl(K)            := G_APPLIED_FLAG_TBL_P(I);
        G_PRICING_STATUS_CODE_tbl(K)     := G_STATUS_NEW;
        G_PRICING_ATTR_FLAG_tbl(K)       :=G_PRICING_ATTR_FLAG_TBL_P(I);
        G_LINE_DETAIL_INDEX_tbl(K)       :=L_LINE_DETAIL_INDEX;
        G_LIST_HEADER_ID_tbl(K)          :=G_LIST_HEADER_ID_TBL_P(I);
        G_LIST_LINE_ID_tbl(K)            :=G_LIST_LINE_ID_TBL_P(I);
        G_SETUP_VALUE_FROM_tbl(K)        :=G_SETUP_VALUE_FROM_TBL_PR(I);
        G_SETUP_VALUE_TO_tbl(K)          :=G_SETUP_VALUE_TO_TBL_PR(I);
        G_GROUPING_NUMBER_tbl(K)         :=G_GROUPING_NUMBER_TBL_P(I);
        G_NO_QUALIFIERS_IN_GRP_tbl(K)    :=NULL;
        G_PRICING_STATUS_TEXT_tbl(K)     :='PRODUCT_PRICING_ONLY';
        G_QUALIFIER_PRECEDENCE_tbl(K)    :=G_QUALIFIER_PRECEDENCE_TBL_P(I);
        G_DATATYPE_tbl(K)                :=G_DATATYPE_TBL_PR(I);
        G_EXCLUDER_FLAG_TBL(K)           :=G_EXCLUDER_FLAG_TBL_P(I);
        G_PRODUCT_UOM_CODE_TBL(K)        :=G_PRODUCT_UOM_CODE_TBL_P(I);
        G_QUALIFIER_TYPE_TBL(K)          :=G_QUALIFIER_TYPE_TBL_P(I);
        G_PRICING_PHASE_ID_TBL_A(K)        :=p_pricing_phase_id;
        G_INCOMP_GRP_CODE_TBL_A(K)         :=G_INCOMP_GRP_CODE_TBL_P(I);
        G_LINE_DETAIL_TYPE_CODE_TBL_A(K)   :='NULL';
        G_MODIFIER_LEVEL_CODE_TBL_A(K)     :=G_MODIFIER_LEVEL_CODE_TBL_P(I);
        G_PRIMARY_UOM_FLAG_TBL_A(K)        :=G_PRIMARY_UOM_FLAG_TBL_P(I);
        K:= K+1;
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug('The value of K : ' || K);
        END IF;
        END IF;

        -- end if; [4455344/4489224]

  END LOOP;
 END IF;
END LOOP;

qp_debug_util.tstop('L_PROD_PRIC_CUR');

CLOSE l_prod_pric_cur;
IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
engine_debug('After l_prod_pric_cur_mod');

END IF;
IF(G_BLIND_DISCOUNT_PROFILE = G_YES) THEN
 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
 engine_debug('In blind discount mode');

 END IF;
  lq_line_index              := -9999;
  lq_list_line_id            := -9999;

 --Select the lists that are good for anything
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('Before blind cursor');
  END IF;
  qp_debug_util.tstart('L_CUR','Cursor Loop L_CUR');
  OPEN l_cur(p_pricing_phase_id);



  LOOP
   G_LINE_INDEX_TBL_B.delete;
   G_LIST_HEADER_ID_TBL_B.delete;
   G_LIST_LINE_ID_TBL_B.delete;
   G_PRICE_BREAK_TYPE_CODE_TBL_B.delete ;
   G_LIST_LINE_TYPE_TBL_B.delete;
   G_LIST_TYPE_CODE_TBL_B.delete;
   G_PRICING_GROUP_SEQUENCE_TBL_B.delete;
   G_PRICING_PHASE_ID_TBL_B.delete;
   G_OPER_CALCULATION_CODE_TBL_B.delete;
   G_OPERAND_VALUE_TBL_B.delete;
   G_NET_AMOUNT_FLAG_TBL_B.delete;  -- IT net_amount 2720717
   G_ASK_FOR_FLAG_TBL_B.delete;
   G_PRICE_FORMULA_ID_TBL_B.delete;
   G_PRODUCT_PRECEDENCE_TBL_B.delete;
   G_INCOMP_GRP_CODE_TBL_B.delete;
   G_AUTOMATIC_FLAG_TBL_B.delete;
   G_OVERRIDE_FLAG_TBL_B.delete;
   G_PRIMARY_UOM_FLAG_TBL_B.delete;
   G_PRINT_ON_INVOICE_FLAG_TBL_B.delete;
   G_MODIFIER_LEVEL_CODE_TBL_B.delete;
   G_BENEFIT_QTY_TBL_B.delete;
   G_BENEFIT_UOM_CODE_TBL_B.delete;
   G_LIST_LINE_NO_TBL_B.delete;
   G_ACCRUAL_FLAG_TBL_B.delete;
   G_ACCR_CONVERSION_RATE_TBL_B.delete;
   G_ESTIM_ACCRUAL_RATE_TBL_B.delete;
   G_HEADER_LIMIT_EXISTS_TBL_P.delete;
   G_LINE_LIMIT_EXISTS_TBL_P.delete;
   G_CHARGE_TYPE_CODE_TBL_P.delete;
   G_CHARGE_SUBTYPE_CODE_TBL_P.delete;
   G_ACCUM_CONTEXT_TBL_P.delete; -- for accum range break
   G_ACCUM_ATTRIBUTE_TBL_P.delete; -- for accum range break
   G_ACCUM_FLAG_TBL_P.delete; -- for accum range break

  FETCH l_cur BULK COLLECT INTO
          G_LIST_HEADER_ID_TBL_B
        , G_LIST_LINE_ID_TBL_B
        , G_LIST_LINE_TYPE_TBL_B
        , G_LINE_INDEX_TBL_B
        , G_AUTOMATIC_FLAG_TBL_B
        , G_MODIFIER_LEVEL_CODE_TBL_B
        , G_PRIMARY_UOM_FLAG_TBL_B
        , G_OPER_CALCULATION_CODE_TBL_B
        , G_OPERAND_VALUE_TBL_B
        , G_NET_AMOUNT_FLAG_TBL_B  -- IT net_amount 2720717
        , G_PRICING_GROUP_SEQUENCE_TBL_B
        , G_ASK_FOR_FLAG_TBL_B
        , G_LIST_TYPE_CODE_TBL_B
        , G_PRICING_PHASE_ID_TBL_B
        , G_PRICE_BREAK_TYPE_CODE_TBL_B
        , G_INCOMP_GRP_CODE_TBL_B
        , G_PRICE_FORMULA_ID_TBL_B
        , G_PRODUCT_PRECEDENCE_TBL_B
        , G_OVERRIDE_FLAG_TBL_B
        , G_BENEFIT_QTY_TBL_B
        , G_BENEFIT_UOM_CODE_TBL_B
        , G_LIST_LINE_NO_TBL_B
        , G_ACCRUAL_FLAG_TBL_B
        , G_ACCR_CONVERSION_RATE_TBL_B
        , G_ESTIM_ACCRUAL_RATE_TBL_B
        , G_HEADER_LIMIT_EXISTS_TBL_P
        , G_LINE_LIMIT_EXISTS_TBL_P
        , G_CHARGE_TYPE_CODE_TBL_P
        , G_CHARGE_SUBTYPE_CODE_TBL_P
        , G_ACCUM_CONTEXT_TBL_P -- accum range break
        , G_ACCUM_ATTRIBUTE_TBL_P -- accum range break
        , G_ACCUM_FLAG_TBL_P LIMIT nROWS;

	   EXIT WHEN G_LINE_INDEX_TBL_B.COUNT = 0;


   IF (G_LINE_INDEX_TBL_B.COUNT > 0) THEN
    FOR I in G_LINE_INDEX_TBL_B.FIRST .. G_LINE_INDEX_TBL_B.LAST  LOOP

     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('List line id selected from blind cur: '||G_LIST_LINE_ID_TBL_B(I) );
     END IF;
     IF (lq_line_index <> g_line_index_tbl_b(I) OR lq_list_line_id <> g_list_line_id_tbl_b(I)) THEN
        l_line_detail_index :=GET_LINE_DETAIL_INDEX;
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug('Getting new line detail index2 '||l_line_detail_index);
        END IF;

        G_LINE_INDEX_LD_TBL(M)                :=G_LINE_INDEX_TBL_B(I);
        G_LINE_DETAIL_INDEX_LD_TBL(M)         :=L_LINE_DETAIL_INDEX;
        G_LIST_HEADER_ID_LD_TBL(M)            :=G_LIST_HEADER_ID_TBL_B(I);
        G_LIST_LINE_ID_LD_TBL(M)              :=G_LIST_LINE_ID_TBL_B(I);
        G_PRICING_STATUS_CODE_LD_TBL(M)       :=G_STATUS_NEW;
        G_PRICING_STATUS_TEXT_LD_TBL(M)       :='GOOD_FOR_ALL';
        G_APPLIED_FLAG_LD_TBL(M)              :=G_AUTOMATIC_FLAG_TBL_B(I);
        G_PROCESSED_FLAG_LD_TBL(M)            :=G_NOT_PROCESSED;
        G_LINE_DETAIL_TYPE_CODE_TBL(M)        :='NULL';
        G_PRICE_BREAK_TYPE_CODE_TBL(M)        :=G_PRICE_BREAK_TYPE_CODE_TBL_B(I);
        G_LIST_LINE_TYPE_TBL(M)               :=G_LIST_LINE_TYPE_TBL_B(I);
        G_LIST_TYPE_CODE_TBL(M)               :=G_LIST_TYPE_CODE_TBL_B(I);
        G_CREATED_FROM_SQL_TBL(M)             :='GOOD_FOR_ALL';
        G_PRICING_GROUP_SEQUENCE_TBL(M)       :=G_PRICING_GROUP_SEQUENCE_TBL_B(I);
        G_PRICING_PHASE_ID_TBL(M)             :=G_PRICING_PHASE_ID_TBL_B(I);
        G_OPERAND_CALCULATION_CODE_TBL(M)     :=G_OPER_CALCULATION_CODE_TBL_B(I);
        G_OPERAND_VALUE_TBL(M)                :=G_OPERAND_VALUE_TBL_B(I);
        G_NET_AMOUNT_FLAG_TBL(M)              :=G_NET_AMOUNT_FLAG_TBL_B(I);  -- IT net_amount 2720717
        G_ASK_FOR_FLAG_TBL(M)                 :=G_ASK_FOR_FLAG_TBL_B(I);
        G_PRICE_FORMULA_ID_TBL(M)             :=G_PRICE_FORMULA_ID_TBL_B(I);
        G_PRODUCT_PRECEDENCE_TBL(M)           :=G_PRODUCT_PRECEDENCE_TBL_B(I);
        G_INCOMP_GRP_CODE_TBL(M)              :=G_INCOMP_GRP_CODE_TBL_B(I);
        G_AUTOMATIC_FLAG_TBL(M)               :=G_AUTOMATIC_FLAG_TBL_B(I);
        G_OVERRIDE_FLAG_TBL(M)                :=G_OVERRIDE_FLAG_TBL_B(I);
        G_PRIMARY_UOM_FLAG_TBL(M)             :=G_PRIMARY_UOM_FLAG_TBL_B(I);
        G_MODIFIER_LEVEL_CODE_TBL(M)          :=G_MODIFIER_LEVEL_CODE_TBL_B(I);
        G_BENEFIT_QTY_TBL(M)                  :=G_BENEFIT_QTY_TBL_B(I);
        G_BENEFIT_UOM_CODE_TBL(M)             :=G_BENEFIT_UOM_CODE_TBL_B(I);
        G_LIST_LINE_NO_TBL(M)                 :=G_LIST_LINE_NO_TBL_B(I);
        G_ACCRUAL_FLAG_TBL(M)                 :=G_ACCRUAL_FLAG_TBL_B(I);
        G_ACCRUAL_CONVERSION_RATE_TBL(M)      :=G_ACCR_CONVERSION_RATE_TBL_B(I);
        G_ESTIM_ACCRUAL_RATE_TBL(M)           :=G_ESTIM_ACCRUAL_RATE_TBL_B(I);
        G_HEADER_LIMIT_EXISTS_TBL(M)          :=G_HEADER_LIMIT_EXISTS_TBL_P(I);
        G_LINE_LIMIT_EXISTS_TBL(M)            :=G_LINE_LIMIT_EXISTS_TBL_P(I);
        G_CHARGE_TYPE_CODE_TBL(M)            :=nvl(G_CHARGE_TYPE_CODE_TBL_P(I),'');
        G_CHARGE_SUBTYPE_CODE_TBL(M)          :=nvl(G_CHARGE_SUBTYPE_CODE_TBL_P(I),'');
        G_ACCUM_CONTEXT_TBL(M)                :=G_ACCUM_CONTEXT_TBL_P(I);   -- accum range break
        G_ACCUM_ATTRIBUTE_TBL(M)              :=G_ACCUM_ATTRIBUTE_TBL_P(I); -- accum range break
        G_ACCUM_FLAG_TBL(M)                   :=G_ACCUM_FLAG_TBL_P(I);      -- accum range break
        M:=M+1;
        lq_line_index := g_line_index_tbl_b(I);
        lq_list_line_id := g_list_line_id_tbl_b(I);

     END IF;

    END LOOP;
   END IF; --IF
  END LOOP;

  qp_debug_util.tstop('L_CUR');

  CLOSE l_cur;
END IF;  --for blind discount
IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
engine_debug('After blind cursor');


END IF;
IF l_status_code = FND_API.G_RET_STS_ERROR THEN
  --RAISE OTHERS;
  NULL;
END IF;

-- Keep it for debugging purposes
/* FOR Z In 1 .. g_line_detail_index_ld_tbl.count
Loop
IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
engine_debug(  '1: ' || G_LINE_DETAIL_INDEX_LD_TBL(Z));
engine_debug(  '2: ' || G_LINE_DETAIL_TYPE_CODE_TBL(Z));
engine_debug(  '3: ' || G_PRICE_BREAK_TYPE_CODE_TBL(Z));
engine_debug(  '5: ' || G_LINE_INDEX_LD_TBL(Z)  );
engine_debug(  '6: ' || G_LIST_HEADER_ID_LD_TBL(Z));
engine_debug(  '7: ' || G_LIST_LINE_ID_LD_TBL(Z) );
engine_debug(  '8: ' || G_LIST_LINE_TYPE_TBL(Z) );
engine_debug(  '9: ' || G_LIST_TYPE_CODE_TBL(Z));
engine_debug(  '10: ' || G_CREATED_FROM_SQL_TBL(Z));
engine_debug(  '11: ' || G_PRICING_GROUP_SEQUENCE_TBL(Z));
engine_debug(  '12: ' || G_PRICING_PHASE_ID_TBL(Z));
engine_debug(  '13: ' || G_OPERAND_CALCULATION_CODE_TBL(Z));
engine_debug(  '14: ' || G_OPERAND_VALUE_TBL(Z));
engine_debug(  '15: ' || G_SUBSTITUTION_TYPE_CODE_TBL(Z));
engine_debug(  '16: ' || G_SUBSTITUTION_VALUE_FROM_TBL(Z));
engine_debug(  '17: ' || G_SUBSTITUTION_VALUE_TO_TBL(Z));
engine_debug(  '18: ' || G_ASK_FOR_FLAG_TBL(Z));
engine_debug(  '19: ' || G_PRICE_FORMULA_ID_TBL(Z));
engine_debug(  '20: ' || G_PRICING_STATUS_CODE_LD_TBL(Z));
engine_debug(  '21: ' || G_PRICING_STATUS_TEXT_LD_TBL(Z));
engine_debug(  '22: ' || G_PRODUCT_PRECEDENCE_TBL(Z) );
engine_debug(  '23: ' || G_INCOMP_GRP_CODE_TBL(Z));
engine_debug(  '24: ' || G_PROCESSED_FLAG_LD_TBL(Z));
engine_debug(  '25: ' || G_APPLIED_FLAG_LD_TBL(Z));
engine_debug(  '26: ' || G_AUTOMATIC_FLAG_TBL(Z));
engine_debug(  '27: ' || G_OVERRIDE_FLAG_TBL(Z));
engine_debug(  '28: ' || G_PRIMARY_UOM_FLAG_TBL(Z));
engine_debug(  '29: ' || G_PRINT_ON_INVOICE_FLAG_TBL(Z));
engine_debug(  '30: ' || G_MODIFIER_LEVEL_CODE_TBL(Z));
engine_debug(  '31: ' || G_BENEFIT_QTY_TBL(Z));
engine_debug(  '32: ' || G_BENEFIT_UOM_CODE_TBL(Z));
engine_debug(  '33: ' || G_LIST_LINE_NO_TBL(Z));
engine_debug(  '34: ' || G_ACCRUAL_FLAG_TBL(Z));
engine_debug(  '35: ' || G_ACCRUAL_CONVERSION_RATE_TBL(Z));
engine_debug(  '36: ' || G_ESTIM_ACCRUAL_RATE_TBL(Z));
engine_debug(  '37: ' || G_RECURRING_FLAG_TBL(Z));
engine_debug(  '38: ' || G_SELECTED_VOLUME_ATTR_TBL(Z));
engine_debug(  '40: ' || G_HEADER_LIMIT_EXISTS_TBL(Z));
engine_debug(  '41: ' || G_LINE_LIMIT_EXISTS_TBL(Z));
engine_debug(  '42: ' || G_CHARGE_TYPE_CODE_TBL(Z));
engine_debug(  '43: ' || G_CHARGE_SUBTYPE_CODE_TBL(Z));
engine_debug(  '44 net_amount_flag: ' || G_NET_AMOUNT_FLAG_TBL(Z));  -- IT net_amount 2720717
END IF;
End Loop; */

IF M > 1 THEN
qp_debug_util.tstart('INSERT_LDETS_PVT','Inserting into ldets INSERT_LDETS_PVT');
  INSERT_LDETS_PVT( p_LINE_DETAIL_index      => G_LINE_DETAIL_INDEX_LD_TBL,
                 p_LINE_DETAIL_TYPE_CODE  => G_LINE_DETAIL_TYPE_CODE_TBL,
                 p_PRICE_BREAK_TYPE_CODE  => G_PRICE_BREAK_TYPE_CODE_TBL,
                 p_LINE_INDEX             => G_LINE_INDEX_LD_TBL,
                 p_CREATED_FROM_LIST_HEADER_ID  =>G_LIST_HEADER_ID_LD_TBL,
                 p_CREATED_FROM_LIST_LINE_ID    =>G_LIST_LINE_ID_LD_TBL,
                 p_CREATED_FROM_LIST_LINE_TYPE  =>G_LIST_LINE_TYPE_TBL,
                 p_CREATED_FROM_LIST_TYPE_CODE  =>G_LIST_TYPE_CODE_TBL,
                 p_CREATED_FROM_SQL             =>G_CREATED_FROM_SQL_TBL,
                 p_PRICING_GROUP_SEQUENCE       =>G_PRICING_GROUP_SEQUENCE_TBL,
                 P_PRICING_PHASE_ID             =>G_PRICING_PHASE_ID_TBL,
                 p_OPERAND_CALCULATION_CODE     =>G_OPERAND_CALCULATION_CODE_TBL,
                 p_OPERAND_VALUE                =>G_OPERAND_VALUE_TBL,
                 p_NET_AMOUNT_FLAG              =>G_NET_AMOUNT_FLAG_TBL,  -- IT net_amount 2720717
                 p_ASK_FOR_FLAG                 =>G_ASK_FOR_FLAG_TBL,
                 p_PRICE_FORMULA_ID             =>G_PRICE_FORMULA_ID_TBL,
                 p_PRICING_STATUS_CODE          =>G_PRICING_STATUS_CODE_LD_TBL,
                 p_PRICING_STATUS_TEXT          =>G_PRICING_STATUS_TEXT_LD_TBL,
                 p_PRODUCT_PRECEDENCE           =>G_PRODUCT_PRECEDENCE_TBL ,
                 p_INCOMPATABLILITY_GRP_CODE    =>G_INCOMP_GRP_CODE_TBL,
                 p_PROCESSED_FLAG               =>G_PROCESSED_FLAG_LD_TBL,
                 p_APPLIED_FLAG                 =>G_APPLIED_FLAG_LD_TBL,
                 p_AUTOMATIC_FLAG               =>G_AUTOMATIC_FLAG_TBL,
                 p_OVERRIDE_FLAG                =>G_OVERRIDE_FLAG_TBL,
                 p_PRIMARY_UOM_FLAG             =>G_PRIMARY_UOM_FLAG_TBL,
                 p_MODIFIER_LEVEL_CODE          =>G_MODIFIER_LEVEL_CODE_TBL,
                 p_BENEFIT_QTY                  =>G_BENEFIT_QTY_TBL,
                 p_BENEFIT_UOM_CODE             =>G_BENEFIT_UOM_CODE_TBL,
                 p_LIST_LINE_NO                 =>G_LIST_LINE_NO_TBL,
                 p_ACCRUAL_FLAG                 =>G_ACCRUAL_FLAG_TBL,
                 p_ACCRUAL_CONVERSION_RATE      =>G_ACCRUAL_CONVERSION_RATE_TBL,
                 p_ESTIM_ACCRUAL_RATE           =>G_ESTIM_ACCRUAL_RATE_TBL,
                 p_HEADER_LIMIT_EXISTS          =>G_HEADER_LIMIT_EXISTS_TBL,
                 p_LINE_LIMIT_EXISTS            =>G_LINE_LIMIT_EXISTS_TBL,
                 p_CHARGE_TYPE_CODE            =>G_CHARGE_TYPE_CODE_TBL,
                 p_CHARGE_SUBTYPE_CODE         =>G_CHARGE_SUBTYPE_CODE_TBL,
                 p_ACCUM_CONTEXT                =>G_ACCUM_CONTEXT_TBL,   -- accum range break
                 p_ACCUM_ATTRIBUTE              =>G_ACCUM_ATTRIBUTE_TBL, -- accum range break
                 p_ACCUM_FLAG                   =>G_ACCUM_FLAG_TBL,      -- accum range break
                 x_status_code                  =>l_status_code,
                 x_status_text                  =>l_status_text
                 );
qp_debug_util.tstop('INSERT_LDETS_PVT');
END IF;

IF K > 1 THEN
 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
	engine_debug('hw: k = ' || k);
 END IF;
 qp_debug_util.tstart('INSERT_LINE_ATTRS2','Inserting into line attrs INSERT_LINE_ATTRS2');
   INSERT_LINE_ATTRS2
   (    p_LINE_INDEX_tbl         =>G_LINE_INDEX_tbl,
        p_LINE_DETAIL_INDEX_tbl  =>G_LINE_DETAIL_INDEX_tbl,
        p_ATTRIBUTE_LEVEL_tbl    =>G_ATTRIBUTE_LEVEL_tbl,
        p_ATTRIBUTE_TYPE_tbl     =>G_ATTRIBUTE_TYPE_tbl,
        p_LIST_HEADER_ID_tbl     =>G_LIST_HEADER_ID_tbl,
        p_LIST_LINE_ID_tbl       =>G_LIST_LINE_ID_tbl,
        p_CONTEXT_tbl            =>G_CONTEXT_tbl,
        p_ATTRIBUTE_tbl          =>G_ATTRIBUTE_tbl,
        p_VALUE_FROM_tbl         =>G_VALUE_FROM_tbl,
        p_SETUP_VALUE_FROM_tbl   =>G_SETUP_VALUE_FROM_tbl,
        p_VALUE_TO_tbl           =>G_VALUE_TO_tbl,
        p_SETUP_VALUE_TO_tbl     =>G_SETUP_VALUE_TO_tbl,
        p_GROUPING_NUMBER_tbl    => G_GROUPING_NUMBER_tbl,
        p_NO_QUALIFIERS_IN_GRP_tbl      =>G_NO_QUALIFIERS_IN_GRP_tbl,
        p_COMPARISON_OPERATOR_TYPE_tbl  =>G_COMPARISON_OPERATOR_TYPE_tbl,
        p_VALIDATED_FLAG_tbl            =>G_VALIDATED_FLAG_tbl,
        p_APPLIED_FLAG_tbl              =>G_APPLIED_FLAG_tbl,
        p_PRICING_STATUS_CODE_tbl       =>G_PRICING_STATUS_CODE_tbl,
        p_PRICING_STATUS_TEXT_tbl       =>G_PRICING_STATUS_TEXT_tbl,
        p_QUALIFIER_PRECEDENCE_tbl      =>G_QUALIFIER_PRECEDENCE_tbl,
        p_DATATYPE_tbl                  =>G_DATATYPE_tbl,
        p_PRICING_ATTR_FLAG_tbl         =>G_PRICING_ATTR_FLAG_tbl,
        p_QUALIFIER_TYPE_tbl            =>G_QUALIFIER_TYPE_TBL,
        p_product_uom_code_tbl          =>G_PRODUCT_UOM_CODE_TBL,
        p_excluder_flag_tbl             =>G_EXCLUDER_FLAG_TBL,
        p_PRICING_PHASE_ID_TBL          =>G_PRICING_PHASE_ID_TBL_A,
        p_INCOMPATABILITY_GRP_CODE_TBL  =>G_INCOMP_GRP_CODE_TBL_A,
        p_LINE_DETAIL_TYPE_CODE_TBL     =>G_LINE_DETAIL_TYPE_CODE_TBL_A,
        p_MODIFIER_LEVEL_CODE_TBL       =>G_MODIFIER_LEVEL_CODE_TBL_A,
        p_PRIMARY_UOM_FLAG_TBL          =>G_PRIMARY_UOM_FLAG_TBL_A,
        x_status_code                   =>l_status_code,
        x_status_text                   =>l_status_text);

        IF l_status_code = FND_API.G_RET_STS_ERROR THEN
                RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
        END IF;
 qp_debug_util.tstop('INSERT_LINE_ATTRS2');
END IF;

IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
engine_debug('Before Inserting attributes in excluded cursor');

END IF;
K := 1;

/*
INDX,QP_PREQ_GRP.select_modifiers.l_excl_cur,qp_npreq_line_attrs_tmp_N2,PRICING_STATUS_CODE,1
INDX,QP_PREQ_GRP.select_modifiers.l_excl_cur,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.select_modifiers.l_excl_cur,qp_npreq_line_attrs_tmp_N2,CONTEXT,3
INDX,QP_PREQ_GRP.select_modifiers.l_excl_cur,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE,4
INDX,QP_PREQ_GRP.select_modifiers.l_excl_cur,qp_npreq_line_attrs_tmp_N2,LINE_INDEX,5
INDX,QP_PREQ_GRP.select_modifiers.l_excl_cur,qp_npreq_line_attrs_tmp_N2,VALUE_FROM,6

INDX,QP_PREQ_GRP.select_modifiers.l_excl_cur,QP_PRICING_ATTRIBUTES_N2,LIST_LINE_ID,1
INDX,QP_PREQ_GRP.select_modifiers.l_excl_cur,QP_PRICING_ATTRIBUTES_N2,EXCLUDER_FLAG,2

INDX,QP_PREQ_GRP.select_modifiers.l_excl_cur,qp_npreq_ldets_tmp_N2,PRICING_PHASE_ID,1
INDX,QP_PREQ_GRP.select_modifiers.l_excl_cur,qp_npreq_ldets_tmp_N2,PRICING_STATUS_CODE,2

*/

-- Delete Excluded Line Details Directly if the inner select returns an excluded row

qp_debug_util.tstart('D_EXCLUDER','Update statement D_EXCLUDER');
 UPDATE qp_npreq_ldets_tmp a
 SET    pricing_status_code = 'D_EXCLUDER'
 WHERE  pricing_phase_id = p_pricing_phase_id
 AND    pricing_status_code = G_STATUS_NEW
 AND    EXISTS ( SELECT/*+ ORDERED USE_NL(c) index(c qp_preq_line_attrs_tmp_N2) index(b QP_PRICING_ATTRIBUTES_N2) l_excl_cur */
                 'x'
                 FROM  qp_pricing_attributes b,
                       qp_npreq_line_attrs_tmp c
                 WHERE b.list_line_id = a.created_from_list_line_id
                 AND   b.excluder_flag = G_YES
                 AND   b.product_attribute_context = c.context
                 AND   b.product_attribute = c.attribute
                 AND   b.product_attr_value = c.value_from
                 AND   c.attribute_type = G_PRODUCT_TYPE
                 AND   c.pricing_status_code = G_STATUS_UNCHANGED
                 AND   c.line_index = a.line_index);
qp_debug_util.tstop('D_EXCLUDER');
--selecting list line attributes that match excluder flag
/* OPEN l_get_excluded_prods_cur(p_pricing_phase_id);

LOOP
  G_LIST_HEADER_ID_TBL_P.delete;
  G_LIST_LINE_ID_TBL_P.delete;
  G_LINE_INDEX_TBL_P.delete;
  G_VALIDATED_FLAG_TBL_P.delete;
  G_APPLIED_FLAG_TBL_P.delete;
  G_ATTRIBUTE_LEVEL_TBL_P.delete;
  G_ATTRIBUTE_TYPE_TBL_P.delete;
  G_CONTEXT_TBL_P.delete;
  G_ATTRIBUTE_TBL_P.delete;
  G_VALUE_FROM_TBL_P.delete;
  G_SETUP_VALUE_FROM_TBL_P.delete;
  G_PRICING_ATTR_FLAG_TBL_P.delete;
  G_PRODUCT_UOM_CODE_TBL_P.delete;
  G_EXCLUDER_FLAG_TBL_P.delete;
  G_QUALIFIER_PRECEDENCE_TBL_P.delete;
  G_LINE_DETAIL_INDEX_TBL_P.delete;

  FETCH l_get_excluded_prods_cur BULK COLLECT INTO
    G_LIST_HEADER_ID_TBL_P
  , G_LIST_LINE_ID_TBL_P
  , G_LINE_INDEX_TBL_P
  , G_VALIDATED_FLAG_TBL_P
  , G_APPLIED_FLAG_TBL_P
  , G_ATTRIBUTE_LEVEL_TBL_P
  , G_ATTRIBUTE_TYPE_TBL_P
  , G_CONTEXT_TBL_P
  , G_ATTRIBUTE_TBL_P
  , G_VALUE_FROM_TBL_P
  , G_SETUP_VALUE_FROM_TBL_P
  , G_PRICING_ATTR_FLAG_TBL_P
  , G_PRODUCT_UOM_CODE_TBL_P
  , G_EXCLUDER_FLAG_TBL_P
  , G_QUALIFIER_PRECEDENCE_TBL_P
  , G_LINE_DETAIL_INDEX_TBL_P LIMIT nROWS;

   EXIT WHEN G_LINE_INDEX_TBL_P.COUNT = 0;

 IF (G_LINE_INDEX_TBL_P.COUNT > 0) THEN
  FOR I in G_LINE_INDEX_TBL_P.FIRST .. G_LINE_INDEX_TBL_P.LAST LOOP
        --INSERT PRODUCT ATTRIBUTES
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
	   engine_debug('Inserting attributes in excluded cursor : ' || G_LINE_INDEX_TBL_P(I));
    END IF;
        G_LINE_INDEX_tbl(K)              := G_LINE_INDEX_TBL_P(I);
        G_ATTRIBUTE_LEVEL_tbl(K)         := G_ATTRIBUTE_LEVEL_TBL_P(I);
        G_ATTRIBUTE_TYPE_tbl(K)          := G_ATTRIBUTE_TYPE_TBL_P(I);
        G_CONTEXT_tbl(K)                 := G_CONTEXT_TBL_P(I);
        G_ATTRIBUTE_tbl(K)               := G_ATTRIBUTE_TBL_P(I);
        G_VALUE_FROM_tbl(K)              := G_VALUE_FROM_TBL_P(I);
        G_VALUE_TO_tbl(K)                := NULL;
        G_COMPARISON_OPERATOR_TYPE_tbl(K):= NULL;
        G_VALIDATED_FLAG_tbl(K)          := G_VALIDATED_FLAG_TBL_P(I);
        G_APPLIED_FLAG_tbl(K)            := G_APPLIED_FLAG_TBL_P(I);
        G_PRICING_STATUS_CODE_tbl(K)     := G_STATUS_NEW;
        G_PRICING_ATTR_FLAG_tbl(K)       := G_PRICING_ATTR_FLAG_TBL_P(I);
        G_LINE_DETAIL_INDEX_tbl(K)       := G_LINE_DETAIL_INDEX_TBL_P(I);
        G_LIST_HEADER_ID_tbl(K)          := G_LIST_HEADER_ID_TBL_P(I);
        G_LIST_LINE_ID_tbl(K)            := G_LIST_LINE_ID_TBL_P(I);
        G_SETUP_VALUE_FROM_tbl(K)        := G_SETUP_VALUE_FROM_TBL_P(I);
        G_SETUP_VALUE_TO_tbl(K)          := NULL;
        G_GROUPING_NUMBER_tbl(K)         := NULL;
        G_NO_QUALIFIERS_IN_GRP_tbl(K)    := NULL;
        G_PRICING_STATUS_TEXT_tbl(K)     := 'EXCLUDED_PRODUCT_ONLY';
        G_QUALIFIER_PRECEDENCE_tbl(K)    := G_QUALIFIER_PRECEDENCE_TBL_P(I);
        G_DATATYPE_tbl(K)                := NULL;
        G_EXCLUDER_FLAG_TBL(K)           := G_EXCLUDER_FLAG_TBL_P(I);
        G_PRODUCT_UOM_CODE_TBL(K)        := G_PRODUCT_UOM_CODE_TBL_P(I);
        G_QUALIFIER_TYPE_TBL(K)          := NULL;
        G_PRICING_PHASE_ID_TBL_A(K)        := p_pricing_phase_id;
        G_INCOMP_GRP_CODE_TBL_A(K)         :=NULL;
        G_LINE_DETAIL_TYPE_CODE_TBL_A(K)   :='NULL';
        G_MODIFIER_LEVEL_CODE_TBL_A(K)     :=NULL;
        G_PRIMARY_UOM_FLAG_TBL_A(K)        :=NULL;
        K:= K+1;
  END LOOP;
 END IF;
END LOOP;
CLOSE l_get_excluded_prods_cur; */


IF K > 1 THEN
qp_debug_util.tstart('INSERT_LINE_ATTRS2','Inserting into line attrs INSERT_LINE_ATTRS2');
   INSERT_LINE_ATTRS2
   (    p_LINE_INDEX_tbl         =>G_LINE_INDEX_tbl,
        p_LINE_DETAIL_INDEX_tbl  =>G_LINE_DETAIL_INDEX_tbl,
        p_ATTRIBUTE_LEVEL_tbl    =>G_ATTRIBUTE_LEVEL_tbl,
        p_ATTRIBUTE_TYPE_tbl     =>G_ATTRIBUTE_TYPE_tbl,
        p_LIST_HEADER_ID_tbl     =>G_LIST_HEADER_ID_tbl,
        p_LIST_LINE_ID_tbl       =>G_LIST_LINE_ID_tbl,
        p_CONTEXT_tbl            =>G_CONTEXT_tbl,
        p_ATTRIBUTE_tbl          =>G_ATTRIBUTE_tbl,
        p_VALUE_FROM_tbl         =>G_VALUE_FROM_tbl,
        p_SETUP_VALUE_FROM_tbl   =>G_SETUP_VALUE_FROM_tbl,
        p_VALUE_TO_tbl           =>G_VALUE_TO_tbl,
        p_SETUP_VALUE_TO_tbl     =>G_SETUP_VALUE_TO_tbl,
        p_GROUPING_NUMBER_tbl    => G_GROUPING_NUMBER_tbl,
        p_NO_QUALIFIERS_IN_GRP_tbl      =>G_NO_QUALIFIERS_IN_GRP_tbl,
        p_COMPARISON_OPERATOR_TYPE_tbl  =>G_COMPARISON_OPERATOR_TYPE_tbl,
        p_VALIDATED_FLAG_tbl            =>G_VALIDATED_FLAG_tbl,
        p_APPLIED_FLAG_tbl              =>G_APPLIED_FLAG_tbl,
        p_PRICING_STATUS_CODE_tbl       =>G_PRICING_STATUS_CODE_tbl,
        p_PRICING_STATUS_TEXT_tbl       =>G_PRICING_STATUS_TEXT_tbl,
        p_QUALIFIER_PRECEDENCE_tbl      =>G_QUALIFIER_PRECEDENCE_tbl,
        p_DATATYPE_tbl                  =>G_DATATYPE_tbl,
        p_PRICING_ATTR_FLAG_tbl         =>G_PRICING_ATTR_FLAG_tbl,
        p_QUALIFIER_TYPE_tbl            =>G_QUALIFIER_TYPE_TBL,
        p_product_uom_code_tbl          =>G_PRODUCT_UOM_CODE_TBL,
        p_excluder_flag_tbl             =>G_EXCLUDER_FLAG_TBL,
        p_PRICING_PHASE_ID_TBL          =>G_PRICING_PHASE_ID_TBL_A,
        p_INCOMPATABILITY_GRP_CODE_TBL  =>G_INCOMP_GRP_CODE_TBL_A,
        p_LINE_DETAIL_TYPE_CODE_TBL     =>G_LINE_DETAIL_TYPE_CODE_TBL_A,
        p_MODIFIER_LEVEL_CODE_TBL       =>G_MODIFIER_LEVEL_CODE_TBL_A,
        p_PRIMARY_UOM_FLAG_TBL          =>G_PRIMARY_UOM_FLAG_TBL_A,
        x_status_code                   =>l_status_code,
        x_status_text                   =>l_status_text);
IF l_status_code = FND_API.G_RET_STS_ERROR THEN
                RAISE E_ROUTINE_ERRORS;
END IF;
qp_debug_util.tstop('INSERT_LINE_ATTRS2');
END IF;

--Reset_all_tbls;
Reset_All_Tbls(l_status_code ,l_status_text );
IF (l_status_code = FND_API.G_RET_STS_ERROR) THEN
 RAISE E_ROUTINE_ERRORS;
END IF;


EXCEPTION
  WHEN E_ROUTINE_ERRORS THEN
     x_status_code := FND_API.G_RET_STS_ERROR;
     x_status_text := l_status_text;
     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug(l_status_text);
     END IF;
  WHEN OTHERS THEN
      IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
      engine_debug('< In Select_modifiers>: '||SQLERRM);
      END IF;
      x_status_code := FND_API.G_RET_STS_ERROR;
      x_status_text := l_routine||' '||SQLERRM;
END SELECT_MODIFIERS;

procedure SELECT_PRICE_LIST_LINES_PAT(
     p_pricing_phase_id   IN  NUMBER,
     p_freeze_override_flag IN VARCHAR2,
     p_search_path IN NUMBER,
     p_control_rec IN CONTROL_RECORD_TYPE,
     x_status_code OUT NOCOPY       VARCHAR2,
     x_status_text OUT NOCOPY       VARCHAR2
)
AS

     l_trunct_sysdate DATE := TRUNC(sysdate);

    -- Path -> Header First - Line Next

    CURSOR l_pat_header_cache_p1 IS
    SELECT /*+ ORDERED index(atrgrps QP_ATTRIBUTE_GROUPS_N3)
               index(qppat QP_NPREQ_LINE_PATRNS_T_N2)
	       index(qprs qp_pte_source_systems_u2)
	       l_pat_header_cache_p1 */
       DISTINCT atrgrps.LIST_HEADER_ID,
         atrgrps.LIST_LINE_ID,
         qplines.LINE_INDEX,
         atrgrps.pattern_id  MATCHED_PATTRN_ID,
         p_pricing_phase_id,
         atrgrps.HASH_KEY  MATCHED_HASH_KEY,
	 G_STAGE_CACHE_PL_HDR STAGE,
 	 G_STATUS_UNCHANGED PRICING_STATUS_CODE,
         atrgrps.source_system_code,
         atrgrps.HEADER_QUALS_EXIST_FLAG,
         atrgrps.GROUPING_NO,
         atrgrps.EQ_FLAG,
         qplines.VALIDATED_FLAG,
         atrgrps.MODIFIER_LEVEL_CODE,
         atrgrps.other_oprt_count,
         atrgrps.null_other_oprt_count,
         atrgrps.LIST_TYPE_CODE,
         atrgrps.ASK_FOR_FLAG,
         atrgrps.HEADER_LIMIT_EXISTS,
         atrgrps.LINE_LIMIT_EXISTS,
         NULL CURRENCY_DETAIL_ID,
         atrgrps.CURRENCY_HEADER_ID,
         NULL SELLING_ROUNDING_FACTOR,
         atrgrps.CURRENCY_CODE   BASE_CURRENCY_CODE,
         qplines.pricing_effective_date,
	 atrgrps.descendents_quals_exist
    FROM (SELECT /*+ dynamic_sampling(1) */ *
          FROM qp_npreq_lines_tmp
          WHERE processed_code IN (G_STS_LHS_NOT_FOUND, G_NO_LIST_PASSED) --check this condition
          AND nvl(validated_flag,G_NO) = G_NO) qplines,
        qp_npreq_line_patrns_tmp qppattmp,
	qp_secu_attr_groups_v atrgrps,
        --qp_attribute_groups atrgrps,
	qp_pte_source_systems qprs
        --qp_price_req_sources_v qprs
    WHERE qppattmp.line_index = qplines.line_index
      AND atrgrps.pricing_phase_id = p_pricing_phase_id
      AND atrgrps.list_line_id = -1
      AND atrgrps.active_flag = G_YES
      AND atrgrps.pattern_id = qppattmp.pattern_id
      AND atrgrps.hash_key = qppattmp.hash_key
      AND atrgrps.pte_code = G_PTE_CODE
      AND atrgrps.currency_code = qplines.currency_code
      AND   (qplines.price_flag = G_YES OR
           (qplines.price_flag = G_PHASE AND p_freeze_override_flag = G_YES))
      AND   qplines.list_price_override_flag in ('N', 'O') -- po integration
      --AND   qprs.source_system_code = atrgrps.source_system_code
      --AND   qprs.request_type_code = qplines.request_type_code -- check it
      AND   qprs.APPLICATION_SHORT_NAME = atrgrps.source_system_code
      AND   qprs.pte_code = G_PTE_CODE
      AND TRUNC(nvl(qplines.pricing_effective_date,sysdate))
          BETWEEN TRUNC(nvl(atrgrps.START_DATE_ACTIVE_H,nvl(qplines.pricing_effective_date,sysdate)))
          AND TRUNC(nvl(atrgrps.END_DATE_ACTIVE_H,nvl(qplines.pricing_effective_date,   sysdate)))
     AND TRUNC(nvl(qplines.pricing_effective_date,   sysdate))
         BETWEEN TRUNC(NVL(atrgrps.START_DATE_ACTIVE_Q,nvl(qplines.pricing_effective_date,sysdate)))
         AND TRUNC(NVL(atrgrps.END_DATE_ACTIVE_Q,nvl(qplines.pricing_effective_date,   sysdate)))
      AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0);

     -- Path -> Header First -> Line Next
     -- select all list lines matching for product/pricing attributes for the selected headers in the first step

    CURSOR l_pat_line_cache_p1 IS
    -- check for all list lines for which header is already selected.
    SELECT /*+ ORDERED index(qpl QP_LIST_LINES_N16)
               index(qppat QP_NPREQ_LINE_PATRNS_T_N2)
               index(qppqual QP_PREQ_PATRN_QUAL_T_N2)
               l_pat_line_cache_p1 */
      DISTINCT qpl.LIST_HEADER_ID,
         qpl.LIST_LINE_ID,
         qplines.LINE_INDEX,
         qpl.PATTERN_ID  MATCHED_PATTRN_ID,
         p_pricing_phase_id,
         qpl.HASH_KEY  MATCHED_HASH_KEY,
	 G_STAGE_CACHE_PL_LIN STAGE,
	 G_STATUS_UNCHANGED PRICING_STATUS_CODE,
         qppqual.source_system_code,
         decode(bitand(qpl.qualification_ind,2),2,'Y','N') HEADER_QUALS_EXIST_FLAG,
         -1 GROUPING_NO,
         qpl.EQ_FLAG,
         qplines.VALIDATED_FLAG,
         qpl.MODIFIER_LEVEL_CODE,
         qpl.null_other_oprt_count,
         qppqual.list_type_code,
	 qppqual.ask_for_flag,
	 qppqual.HEADER_LIMIT_EXISTS, -- HEADER_LIMIT_EXISTS
	 qppqual.LINE_LIMIT_EXISTS, -- LINE_LIMIT_EXISTS,
         qpl.BREAK_UOM_CODE,
         qpl.BREAK_UOM_CONTEXT,
         qpl.BREAK_UOM_ATTRIBUTE,
         QPLINES.CURRENCY_CODE ORDER_CURRENCY,
         qppqual.CURRENCY_DETAIL_ID,
         qppqual.CURRENCY_HEADER_ID,
         qppqual.SELLING_ROUNDING_FACTOR,
         qppqual.BASE_CURRENCY_CODE,
	 qplines.pricing_effective_date,
	 QPL.PRICE_BREAK_TYPE_CODE,
	 'N' descendents_quals_exist
    FROM qp_npreq_lines_tmp qplines,
         qp_npreq_line_patrns_tmp qppat,
	 qp_preq_patrn_qual_tmp qppqual,
	 qp_list_lines qpl
    WHERE qplines.processed_code IN (G_STS_LHS_NOT_FOUND, G_NO_LIST_PASSED)
      AND nvl(qplines.validated_flag,G_NO) = G_NO
      AND qppat.line_index = qplines.line_index
      AND qppqual.line_index = qppat.line_index
      AND qppqual.pricing_phase_id = p_pricing_phase_id
      AND qppqual.pricing_status_code = 'X'
      AND qppqual.stage = G_STAGE_CACHE_PL_HDR	    --check it
      AND qpl.pricing_phase_id = p_pricing_phase_id
      AND qpl.PATTERN_ID  = qppat.PATTERN_ID
      AND qpl.hash_key = qppat.HASH_KEY
      AND qpl.list_header_id = qppqual.list_header_id
      AND (qplines.price_flag = G_YES OR
          (qplines.price_flag = G_PHASE AND p_freeze_override_flag = G_YES))
      AND qplines.list_price_override_flag in ('N', 'O')
      AND qpl.modifier_level_code = qplines.line_type_code -- check it
      AND TRUNC(nvl(qplines.pricing_effective_date,   sysdate))
           BETWEEN TRUNC(nvl(qpl.start_date_active,   nvl(qplines.pricing_effective_date,   sysdate)))
	    AND TRUNC(nvl(qpl.end_date_active,   nvl(qplines.pricing_effective_date,   sysdate)))
      AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0);


     CURSOR l_pat_line_p2 IS

   SELECT /*+ ORDERED index(qplines QP_PREQ_LINES_TMP_U1)
       index(qpl QP_LIST_LINES_N17)
       index(qppattmp1 QP_NPREQ_LINE_PATRNS_T_N2)
       index(qpatrgrp QP_ATTRIBUTE_GROUPS_N1)
       index(qppattmp2 QP_NPREQ_LINE_PATRNS_T_N1)
       index(qprs qp_pte_source_systems_u2)
       l_pat_line_p2 */
      DISTINCT
         qpl.LIST_HEADER_ID,
         qpl.LIST_LINE_ID,
         qplines.LINE_INDEX,
         qpl.pattern_id  QPL_MATCHED_PATTRN_ID,
	 qpatrgrp.pattern_id  AG_MATCHED_PATTRN_ID,
         p_pricing_phase_id,
         qpl.HASH_KEY  QPL_MATCHED_HASH_KEY,
         qpatrgrp.HASH_KEY  AG_MATCHED_HASH_KEY,
	 G_STAGE_CACHE_PL_LIN2 STAGE,
	 G_STATUS_UNCHANGED PRICING_STATUS_CODE,
         qpatrgrp.source_system_code,
	 --DECODE(qpatrgrp.EQ_FLAG,'N','Y','N') HEADER_QUALS_EXIST_FLAG,
	 DECODE(qpatrgrp.EQ_FLAG,'N','Y',DECODE(qpatrgrp.descendents_quals_exist,'Y','Y','N')) HEADER_QUALS_EXIST_FLAG,
         -1 qpl_grpng_num,
         qpatrgrp.GROUPING_NO ag_grpng_num,
         qpl.EQ_FLAG QPL_EQFLAG,
	 qpatrgrp.EQ_FLAG ATRGRP_EQFLAG,
         qplines.VALIDATED_FLAG,
         qpl.MODIFIER_LEVEL_CODE,
         qpl.null_other_oprt_count qpl_other_oprt_cnt,
         qpatrgrp.other_oprt_count ag_other_oprt_cnt,
         qpatrgrp.null_other_oprt_count ag_null_othr_oprt_cnt,
         qpatrgrp.LIST_TYPE_CODE,
         qpatrgrp.ASK_FOR_FLAG,
         qpatrgrp.HEADER_LIMIT_EXISTS,
         qpatrgrp.LINE_LIMIT_EXISTS,
	 NULL CURRENCY_DETAIL_ID,
         NULL CURRENCY_HEADER_ID,
         NULL SELLING_ROUNDING_FACTOR,
         qpatrgrp.CURRENCY_CODE   BASE_CURRENCY_CODE,
         qplines.pricing_effective_date,
         qpl.BREAK_UOM_CODE,
         qpl.BREAK_UOM_CONTEXT,
         qpl.BREAK_UOM_ATTRIBUTE,
         QPLINES.CURRENCY_CODE ORDER_CURRENCY,
	 qpl.PRICE_BREAK_TYPE_CODE,
         qpatrgrp.descendents_quals_exist
   FROM qp_npreq_lines_tmp qplines,
        qp_npreq_line_patrns_tmp qppattmp1,
	qp_list_lines qpl,
	qp_secu_attr_groups_v qpatrgrp,
	--qp_attribute_groups qpatrgrp,
	qp_pte_source_systems qprs,
        --qp_price_req_sources_v qprs,
        qp_npreq_line_patrns_tmp qppattmp2
   WHERE qplines.processed_code IN (G_STS_LHS_NOT_FOUND, G_NO_LIST_PASSED) --check this condition
     AND nvl(qplines.validated_flag,G_NO) = G_NO
     AND   (qplines.price_flag = G_YES OR
          (qplines.price_flag = G_PHASE AND p_freeze_override_flag = G_YES))
     AND   qplines.list_price_override_flag in ('N', 'O') -- po integration
     AND qppattmp1.line_index = qplines.line_index
     AND qpl.pricing_phase_id = p_pricing_phase_id
     AND qpl.pattern_id = qppattmp1.pattern_id
     AND qpl.hash_key = qppattmp1.hash_key
     AND qpl.pte_code = G_PTE_CODE
     AND TRUNC(nvl(qplines.pricing_effective_date,sysdate))
          BETWEEN TRUNC(nvl(qpl.start_date_active,nvl(qplines.pricing_effective_date,sysdate)))
	   AND TRUNC(nvl(qpl.end_date_active,nvl(qplines.pricing_effective_date,sysdate)))
     AND qpatrgrp.list_header_id = qpl.list_header_id
     AND qpatrgrp.pricing_phase_id = p_pricing_phase_id
     AND qpatrgrp.currency_code = qplines.currency_code
     AND qpatrgrp.active_flag = G_YES
     AND TRUNC(nvl(qplines.pricing_effective_date,sysdate))
           BETWEEN TRUNC(nvl(qpatrgrp.START_DATE_ACTIVE_H,nvl(qplines.pricing_effective_date,sysdate)))
           AND TRUNC(nvl(qpatrgrp.END_DATE_ACTIVE_H,nvl(qplines.pricing_effective_date,   sysdate)))
     AND TRUNC(nvl(qplines.pricing_effective_date,   sysdate))
         BETWEEN TRUNC(NVL(qpatrgrp.START_DATE_ACTIVE_Q,nvl(qplines.pricing_effective_date,sysdate)))
         AND TRUNC(NVL(qpatrgrp.END_DATE_ACTIVE_Q,nvl(qplines.pricing_effective_date,   sysdate)))
     --AND qprs.source_system_code = qpatrgrp.source_system_code
     --AND qprs.request_type_code = qplines.request_type_code -- check it
     AND qprs.APPLICATION_SHORT_NAME = qpatrgrp.source_system_code
     AND qprs.pte_code = G_PTE_CODE
     AND qppattmp2.line_index = qplines.line_index
     AND qppattmp2.pattern_id = qpatrgrp.pattern_id
     AND qppattmp2.hash_key = qpatrgrp.hash_key
     AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0);


  -- Multi Currency Cursors

   -- Path - Line First Header Next
  -- Selecting all the price list lines which are matching in pattern

     CURSOR l_pat_line_curr_p2 IS

   SELECT /*+ ORDERED index(QCDT QP_CURRENCY_DETAILS_N2)
       index(qplines QP_PREQ_LINES_TMP_U1)
       index(qpl QP_LIST_LINES_N17)
       index(qppattmp1 QP_NPREQ_LINE_PATRNS_T_N2)
       index(qpatrgrp QP_ATTRIBUTE_GROUPS_N1)
       index(qppattmp2 QP_NPREQ_LINE_PATRNS_T_N1)
       index(qprs qp_pte_source_systems_u2)
       l_pat_line_curr_p2 */
      DISTINCT
         qpl.LIST_HEADER_ID,
         qpl.LIST_LINE_ID,
         qplines.LINE_INDEX,
         qpl.pattern_id  QPL_MATCHED_PATTRN_ID,
	 qpatrgrp.pattern_id  AG_MATCHED_PATTRN_ID,
         p_pricing_phase_id,
         qpl.HASH_KEY  QPL_MATCHED_HASH_KEY,
         qpatrgrp.HASH_KEY  AG_MATCHED_HASH_KEY,
	 G_STAGE_CACHE_PL_LIN2 STAGE,
	 G_STATUS_UNCHANGED PRICING_STATUS_CODE,
         qpatrgrp.source_system_code,
         --decode(bitand(qpl.qualification_ind,2),2,'Y','N') HEADER_QUALS_EXIST_FLAG,
	 --DECODE(qpatrgrp.EQ_FLAG,'N','Y','N') HEADER_QUALS_EXIST_FLAG,
         DECODE(qpatrgrp.EQ_FLAG,'N','Y',DECODE(qpatrgrp.descendents_quals_exist,'Y','Y','N')) HEADER_QUALS_EXIST_FLAG,
         -1 qpl_grpng_num,
         qpatrgrp.GROUPING_NO ag_grpng_num,
         qpl.EQ_FLAG QPL_EQFLAG,
	 qpatrgrp.EQ_FLAG ATRGRP_EQFLAG,
         qplines.VALIDATED_FLAG,
         qpl.MODIFIER_LEVEL_CODE,
         qpl.null_other_oprt_count qpl_other_oprt_cnt,
         qpatrgrp.other_oprt_count ag_other_oprt_cnt,
         qpatrgrp.null_other_oprt_count ag_null_othr_oprt_cnt,
	 --qpl.other_oprt_count,
         --qpl.null_other_oprt_count,
         qpatrgrp.LIST_TYPE_CODE,
         qpatrgrp.ASK_FOR_FLAG,
         qpatrgrp.HEADER_LIMIT_EXISTS,
         qpatrgrp.LINE_LIMIT_EXISTS,
	 QCDT.CURRENCY_DETAIL_ID,
         QCDT.CURRENCY_HEADER_ID,
         QCDT.SELLING_ROUNDING_FACTOR,
         qpatrgrp.CURRENCY_CODE   BASE_CURRENCY_CODE,
         qplines.pricing_effective_date,
         qpl.BREAK_UOM_CODE,
         qpl.BREAK_UOM_CONTEXT,
         qpl.BREAK_UOM_ATTRIBUTE,
         QPLINES.CURRENCY_CODE ORDER_CURRENCY,
	 qpl.PRICE_BREAK_TYPE_CODE,
         qpatrgrp.descendents_quals_exist
   FROM qp_npreq_lines_tmp qplines,
        qp_npreq_line_patrns_tmp qppattmp1,
	qp_list_lines qpl,
	qp_secu_attr_groups_v qpatrgrp,
	--qp_attribute_groups qpatrgrp,
        qp_pte_source_systems qprs,
        --qp_price_req_sources_v qprs,
        qp_npreq_line_patrns_tmp qppattmp2,
	QP_CURRENCY_DETAILS QCDT
   WHERE qplines.processed_code IN (G_STS_LHS_NOT_FOUND, G_NO_LIST_PASSED) --check this condition
     AND nvl(qplines.validated_flag,G_NO) = G_NO
     AND   (qplines.price_flag = G_YES OR
          (qplines.price_flag = G_PHASE AND p_freeze_override_flag = G_YES))
     AND   qplines.list_price_override_flag in ('N', 'O') -- po integration
     AND qppattmp1.line_index = qplines.line_index
     AND qpl.pricing_phase_id = p_pricing_phase_id
     AND qpl.pattern_id = qppattmp1.pattern_id
     AND qpl.hash_key = qppattmp1.hash_key
     AND qpl.pte_code = G_PTE_CODE
     AND TRUNC(nvl(qplines.pricing_effective_date,   sysdate))
          BETWEEN TRUNC(nvl(qpl.start_date_active,   nvl(qplines.pricing_effective_date,   sysdate)))
	   AND TRUNC(nvl(qpl.end_date_active,   nvl(qplines.pricing_effective_date,   sysdate)))
     AND qpatrgrp.list_header_id = qpl.list_header_id
     AND qpatrgrp.pricing_phase_id = p_pricing_phase_id
     AND qpatrgrp.active_flag = G_YES
     AND TRUNC(nvl(qplines.pricing_effective_date,sysdate))
          BETWEEN TRUNC(nvl(qpatrgrp.START_DATE_ACTIVE_H,nvl(qplines.pricing_effective_date,sysdate)))
          AND TRUNC(nvl(qpatrgrp.END_DATE_ACTIVE_H,nvl(qplines.pricing_effective_date,   sysdate)))
     AND TRUNC(nvl(qplines.pricing_effective_date,   sysdate))
         BETWEEN TRUNC(NVL(qpatrgrp.START_DATE_ACTIVE_Q,nvl(qplines.pricing_effective_date,sysdate)))
         AND TRUNC(NVL(qpatrgrp.END_DATE_ACTIVE_Q,nvl(qplines.pricing_effective_date,   sysdate)))
     --AND qprs.source_system_code = qpatrgrp.source_system_code
     --AND qprs.request_type_code = qplines.request_type_code -- check it
     AND qprs.APPLICATION_SHORT_NAME = qpatrgrp.source_system_code
     AND qprs.pte_code = G_PTE_CODE
     AND qppattmp2.line_index = qplines.line_index
     AND qppattmp2.pattern_id = qpatrgrp.pattern_id
     AND qppattmp2.hash_key = qpatrgrp.hash_key
     AND qpatrgrp.CURRENCY_HEADER_ID = QCDT.CURRENCY_HEADER_ID
     AND QPLINES.CURRENCY_CODE = QCDT.TO_CURRENCY_CODE
     AND TRUNC(nvl(qplines.pricing_effective_date,sysdate)) BETWEEN
		TRUNC(NVL(QCDT.START_DATE_ACTIVE,nvl(qplines.pricing_effective_date,sysdate)))
			AND TRUNC(NVL(QCDT.END_DATE_ACTIVE,nvl(qplines.pricing_effective_date,sysdate)))
     AND (
        (qcdt.curr_attribute_context is null
         and not exists
             (select /*+ use_nl(qcdt1) LEADING(qcdt1) index(qcdt1 QP_CURRENCY_DETAILS_N2) */ 'x'
	       from qp_npreq_line_attrs_tmp pa_tmp,   qp_currency_details qcdt1
               where qcdt1.curr_attribute_context IS NOT NULL
		 and qcdt1.curr_attribute_context = pa_tmp.context
                 and qcdt1.curr_attribute = pa_tmp.attribute
                 and qcdt1.curr_attribute_value = pa_tmp.value_from
                 and qcdt1.curr_attribute_type = pa_tmp.ATTRIBUTE_TYPE
                 and qcdt1.to_currency_code = qcdt.to_currency_code
                 and qcdt1.currency_header_id = qcdt.currency_header_id
                 and pa_tmp.pricing_status_code = G_STATUS_UNCHANGED
                 and pa_tmp.line_index = qplines.line_index
                 AND TRUNC(nvl(qplines.pricing_effective_date,sysdate)) BETWEEN
		         TRUNC(NVL(QCDT1.START_DATE_ACTIVE,nvl(qplines.pricing_effective_date,sysdate)))
			AND TRUNC(NVL(QCDT1.END_DATE_ACTIVE,nvl(qplines.pricing_effective_date,sysdate)))
             )
        )
        OR
        (qcdt.curr_attribute_context is not null
         and qcdt.currency_detail_id =
             (select qcdt3.currency_detail_id
	       from qp_currency_details qcdt3
                 where qcdt3.to_currency_code = qcdt.to_currency_code
                 and qcdt3.currency_header_id = qcdt.currency_header_id
                 AND TRUNC(nvl(qplines.pricing_effective_date,sysdate)) BETWEEN
   		        TRUNC(NVL(QCDT3.START_DATE_ACTIVE,nvl(qplines.pricing_effective_date,sysdate)))
			AND TRUNC(NVL(QCDT3.END_DATE_ACTIVE,nvl(qplines.pricing_effective_date,sysdate)))
                 and  qcdt3.precedence =
             (select /*+ use_nl(qcdt2) LEADING(qcdt2) index(qcdt2 QP_CURRENCY_DETAILS_N2) */
	       min(qcdt2.precedence)
	       from qp_npreq_line_attrs_tmp pa_tmp1, qp_currency_details qcdt2
               where qcdt2.curr_attribute_context IS NOT NULL
		 and qcdt2.curr_attribute_context = pa_tmp1.context
                 and qcdt2.curr_attribute = pa_tmp1.attribute
                 and qcdt2.curr_attribute_value = pa_tmp1.value_from
                 and qcdt2.curr_attribute_type = pa_tmp1.ATTRIBUTE_TYPE
                 and qcdt2.to_currency_code = qcdt.to_currency_code
                 and qcdt2.currency_header_id = qcdt.currency_header_id
                 and pa_tmp1.pricing_status_code = G_STATUS_UNCHANGED
                 and pa_tmp1.line_index = qplines.line_index
                 AND TRUNC(nvl(qplines.pricing_effective_date,sysdate)) BETWEEN
   		        TRUNC(NVL(QCDT2.START_DATE_ACTIVE,nvl(qplines.pricing_effective_date,sysdate)))
			AND TRUNC(NVL(QCDT2.END_DATE_ACTIVE,nvl(qplines.pricing_effective_date,sysdate)))
             ))
        )
       )
       AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0);

     -- Path -> Header First - Line Next

    CURSOR l_pat_header_cache_curr_p1 IS
    SELECT /*+ ORDERED index(atrgrps QP_ATTRIBUTE_GROUPS_N3) index(qppat QP_NPREQ_LINE_PATRNS_T_N2)
         index(QCDT QP_CURRENCY_DETAILS_N2)
	 index(qprs qp_pte_source_systems_u2)
	 l_pat_header_cache_curr_p1 */
       DISTINCT atrgrps.LIST_HEADER_ID,
         atrgrps.LIST_LINE_ID,
         qplines.LINE_INDEX,
         atrgrps.pattern_id  MATCHED_PATTRN_ID,
         p_pricing_phase_id,
         atrgrps.HASH_KEY  MATCHED_HASH_KEY,
	 G_STAGE_CACHE_PL_HDR STAGE,
 	 G_STATUS_UNCHANGED PRICING_STATUS_CODE,
         atrgrps.source_system_code,
         atrgrps.HEADER_QUALS_EXIST_FLAG,
         atrgrps.GROUPING_NO,
         atrgrps.EQ_FLAG,
         qplines.VALIDATED_FLAG,
         atrgrps.MODIFIER_LEVEL_CODE,
         atrgrps.other_oprt_count,
         atrgrps.null_other_oprt_count,
         atrgrps.LIST_TYPE_CODE,
         atrgrps.ASK_FOR_FLAG,
         atrgrps.HEADER_LIMIT_EXISTS,
         atrgrps.LINE_LIMIT_EXISTS,
         QCDT.CURRENCY_DETAIL_ID,
         QCDT.CURRENCY_HEADER_ID,
         QCDT.SELLING_ROUNDING_FACTOR,
         atrgrps.CURRENCY_CODE   BASE_CURRENCY_CODE,
         qplines.pricing_effective_date,
         atrgrps.descendents_quals_exist
    FROM (SELECT /*+ dynamic_sampling(1) */ *
          FROM qp_npreq_lines_tmp
          WHERE processed_code IN (G_STS_LHS_NOT_FOUND, G_NO_LIST_PASSED) --check this condition
          AND nvl(validated_flag,G_NO) = G_NO) qplines,
        qp_npreq_line_patrns_tmp qppattmp,
	qp_secu_attr_groups_v atrgrps,
        --qp_attribute_groups atrgrps,
	qp_pte_source_systems qprs,
        --qp_price_req_sources_v qprs,
	QP_CURRENCY_DETAILS QCDT
    WHERE qppattmp.line_index = qplines.line_index
      AND atrgrps.pricing_phase_id = p_pricing_phase_id
      AND atrgrps.list_line_id = -1
      AND atrgrps.active_flag = G_YES
      AND atrgrps.pattern_id = qppattmp.pattern_id
      AND atrgrps.hash_key = qppattmp.hash_key
     AND  atrgrps.pte_code = G_PTE_CODE
     AND   (qplines.price_flag = G_YES OR
       (qplines.price_flag = G_PHASE AND p_freeze_override_flag = G_YES))
     AND   qplines.list_price_override_flag in ('N', 'O') -- po integration
    AND atrgrps.CURRENCY_HEADER_ID = QCDT.CURRENCY_HEADER_ID
    AND QPLINES.CURRENCY_CODE = QCDT.TO_CURRENCY_CODE
    AND TRUNC(nvl(qplines.pricing_effective_date,sysdate)) BETWEEN
   		        TRUNC(NVL(QCDT.START_DATE_ACTIVE,nvl(qplines.pricing_effective_date,sysdate)))
			AND TRUNC(NVL(QCDT.END_DATE_ACTIVE,nvl(qplines.pricing_effective_date,sysdate)))
    AND (
        (qcdt.curr_attribute_context is null
         and not exists
             (select /*+ use_nl(qcdt1) LEADING(qcdt1) index(qcdt1 QP_CURRENCY_DETAILS_N2) */ 'x'
	       from qp_npreq_line_attrs_tmp pa_tmp,   qp_currency_details qcdt1
               where qcdt1.curr_attribute_context IS NOT NULL
		 and qcdt1.curr_attribute_context = pa_tmp.context
                 and qcdt1.curr_attribute = pa_tmp.attribute
                 and qcdt1.curr_attribute_value = pa_tmp.value_from
                 and qcdt1.curr_attribute_type = pa_tmp.ATTRIBUTE_TYPE
                 and qcdt1.to_currency_code = qcdt.to_currency_code
                 and qcdt1.currency_header_id = qcdt.currency_header_id
                 and pa_tmp.pricing_status_code = G_STATUS_UNCHANGED
                 and pa_tmp.line_index = qplines.line_index
                 AND TRUNC(nvl(qplines.pricing_effective_date,sysdate)) BETWEEN
   		        TRUNC(NVL(QCDT1.START_DATE_ACTIVE,nvl(qplines.pricing_effective_date,sysdate)))
			AND TRUNC(NVL(QCDT1.END_DATE_ACTIVE,nvl(qplines.pricing_effective_date,sysdate)))
             )
        )
        OR
        (qcdt.curr_attribute_context is not null
         and qcdt.currency_detail_id =
             (select qcdt3.currency_detail_id
	       from qp_currency_details qcdt3
                 where qcdt3.to_currency_code = qcdt.to_currency_code
                 and qcdt3.currency_header_id = qcdt.currency_header_id
                 AND TRUNC(nvl(qplines.pricing_effective_date,sysdate)) BETWEEN
   		        TRUNC(NVL(QCDT3.START_DATE_ACTIVE,nvl(qplines.pricing_effective_date,sysdate)))
			AND TRUNC(NVL(QCDT3.END_DATE_ACTIVE,nvl(qplines.pricing_effective_date,sysdate)))
                 and  qcdt3.precedence =
             (select /*+ use_nl(qcdt2) LEADING(qcdt2) index(qcdt2 QP_CURRENCY_DETAILS_N2) */ min(qcdt2.precedence)
	       from qp_npreq_line_attrs_tmp pa_tmp1, qp_currency_details qcdt2
               where qcdt2.curr_attribute_context IS NOT NULL
		 and qcdt2.curr_attribute_context = pa_tmp1.context
                 and qcdt2.curr_attribute = pa_tmp1.attribute
                 and qcdt2.curr_attribute_value = pa_tmp1.value_from
                 and qcdt2.curr_attribute_type = pa_tmp1.ATTRIBUTE_TYPE
                 and qcdt2.to_currency_code = qcdt.to_currency_code
                 and qcdt2.currency_header_id = qcdt.currency_header_id
                 and pa_tmp1.pricing_status_code = G_STATUS_UNCHANGED
                 and pa_tmp1.line_index = qplines.line_index
                 AND TRUNC(nvl(qplines.pricing_effective_date,sysdate)) BETWEEN
   		        TRUNC(NVL(QCDT2.START_DATE_ACTIVE,nvl(qplines.pricing_effective_date,sysdate)))
			AND TRUNC(NVL(QCDT2.END_DATE_ACTIVE,nvl(qplines.pricing_effective_date,sysdate)))
             ))
        )
       )
     --AND   qprs.source_system_code = atrgrps.source_system_code
     --AND   qprs.request_type_code = qplines.request_type_code -- check it
     AND qprs.APPLICATION_SHORT_NAME = atrgrps.source_system_code
     AND qprs.pte_code = G_PTE_CODE
     AND TRUNC(nvl(qplines.pricing_effective_date,sysdate))
          BETWEEN TRUNC(nvl(atrgrps.START_DATE_ACTIVE_H,nvl(qplines.pricing_effective_date,sysdate)))
          AND TRUNC(nvl(atrgrps.END_DATE_ACTIVE_H,nvl(qplines.pricing_effective_date,   sysdate)))
     AND TRUNC(nvl(qplines.pricing_effective_date,   sysdate))
         BETWEEN TRUNC(NVL(atrgrps.START_DATE_ACTIVE_Q,nvl(qplines.pricing_effective_date,sysdate)))
         AND TRUNC(NVL(atrgrps.END_DATE_ACTIVE_Q,nvl(qplines.pricing_effective_date,   sysdate)))
     AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0);

     -- Path -> Header First -> Line Next
     -- select all list lines matching for product/pricing attributes for the selected headers in the first step

    CURSOR l_pat_line_cache_curr_p1 IS
    -- check for all list lines for which header is already selected.
    SELECT /*+ ORDERED index(qpl QP_LIST_LINES_N16)
               index(qppat QP_NPREQ_LINE_PATRNS_T_N2)
               index(qppqual QP_PREQ_PATRN_QUAL_T_N2)
               l_pat_line_cache_curr_p1 */
      DISTINCT qpl.LIST_HEADER_ID,
         qpl.LIST_LINE_ID,
         qplines.LINE_INDEX,
         qpl.PATTERN_ID  MATCHED_PATTRN_ID,
         p_pricing_phase_id,
         qpl.HASH_KEY  MATCHED_HASH_KEY,
	 G_STAGE_CACHE_PL_LIN STAGE,
	 G_STATUS_UNCHANGED PRICING_STATUS_CODE,
         qppqual.source_system_code,
         decode(bitand(qpl.qualification_ind,2),2,'Y','N') HEADER_QUALS_EXIST_FLAG,
         -1 GROUPING_NO,
         qpl.EQ_FLAG,
         qplines.VALIDATED_FLAG,
         qpl.MODIFIER_LEVEL_CODE,
         qpl.null_other_oprt_count,
         qppqual.list_type_code,
	 qppqual.ask_for_flag,
	 qppqual.HEADER_LIMIT_EXISTS, -- HEADER_LIMIT_EXISTS
	 qppqual.LINE_LIMIT_EXISTS, -- LINE_LIMIT_EXISTS,
         qpl.BREAK_UOM_CODE,
         qpl.BREAK_UOM_CONTEXT,
         qpl.BREAK_UOM_ATTRIBUTE,
         QPLINES.CURRENCY_CODE ORDER_CURRENCY,
         qppqual.CURRENCY_DETAIL_ID,
         qppqual.CURRENCY_HEADER_ID,
         qppqual.SELLING_ROUNDING_FACTOR,
         qppqual.BASE_CURRENCY_CODE,
	 qplines.pricing_effective_date,
	 qpl.PRICE_BREAK_TYPE_CODE,
	 'N' descendents_quals_exist
    FROM qp_npreq_lines_tmp qplines,
         qp_npreq_line_patrns_tmp qppat,
	 qp_preq_patrn_qual_tmp qppqual,
	 qp_list_lines qpl
    WHERE qplines.processed_code IN (G_STS_LHS_NOT_FOUND, G_NO_LIST_PASSED)
      AND nvl(qplines.validated_flag,G_NO) = G_NO
      AND qppat.line_index = qplines.line_index
      AND qppqual.line_index = qppat.line_index
      AND qppqual.pricing_phase_id = p_pricing_phase_id
      AND qppqual.pricing_status_code = 'X'
      AND qppqual.stage = G_STAGE_CACHE_PL_HDR	    --check it
      AND qpl.pricing_phase_id = p_pricing_phase_id
      AND qpl.PATTERN_ID  = qppat.PATTERN_ID
      AND qpl.hash_key = qppat.HASH_KEY
      AND qpl.list_header_id  = qppqual.list_header_id
      AND (qplines.price_flag = G_YES OR
          (qplines.price_flag = G_PHASE AND p_freeze_override_flag = G_YES))
      AND qplines.list_price_override_flag in ('N', 'O')
      AND qpl.modifier_level_code = qplines.line_type_code -- check it
      AND TRUNC(nvl(qplines.pricing_effective_date,   sysdate))
            BETWEEN TRUNC(nvl(qpl.start_date_active,   nvl(qplines.pricing_effective_date,   sysdate)))
	     AND TRUNC(nvl(qpl.end_date_active,   nvl(qplines.pricing_effective_date,   sysdate)))

      AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0);


  l_limit NUMBER := 5000;

  TYPE l_number IS TABLE OF NUMBER INDEX BY pls_integer;
  l_list_header_id_tbl l_number;
  l_list_line_id_tbl l_number;
  l_matched_pattrn_id_tbl l_number;
  l_ag_matched_pat_id_tbl l_number;
  l_line_index_tbl l_number;
  l_pricing_phase_id_tbl l_number;
  l_grouping_no l_number;
  l_ag_grpng_no l_number;
  l_other_oprt_count l_number;
  l_ag_othr_oprt_cnt l_number;
  l_null_other_oprt_count l_number;
  l_curr_det_id l_number;
  l_curr_hdr_id l_number;
  L_SELLNG_ROUND_FTR l_number;

  TYPE l_string IS TABLE OF VARCHAR2(2000) INDEX BY pls_integer;
  l_matched_hash_key_tbl l_string;
  l_ag_mtchd_hash_key_tbl l_string;
  l_stage_tbl l_string;
  l_pricing_status_code_tbl l_string;
  l_ssc l_string;
  l_header_quals_exist_flag l_string;
  l_eq_flag l_string;
  l_ag_eq_flag l_string;
  l_validated_flag l_string;
  l_modf_lvl_code l_string;
  l_list_type_code l_string;
  l_ask_for_flag l_string;
  l_hdr_lmt_exists l_string;
  l_line_lmt_exists l_string;
  l_order_curr l_string;
  l_base_curr_code l_string;
  l_brk_uom_code l_string;
  l_brk_uom_ctxt l_string;
  l_brk_uom_attr l_string;
  l_descnt_quals_exist l_string;
  l_PRICE_BREAK_TYPE_CODE l_string;


  TYPE l_date IS TABLE OF DATE INDEX BY pls_integer;

  l_prcng_effctve_dt l_date;

  E_ROUTINE_ERRORS EXCEPTION;

  l_return_status            VARCHAR2(240);
  L_STATUS_CODE VARCHAR2(30);
  L_STATUS_TEXT VARCHAR2(240);

  l_list_line_id             NUMBER;
  l_dummy                    VARCHAR2(30);

  l_use_multi_curr BOOLEAN := FALSE;
  l_loop_count NUMBER := 0;

  l_routine VARCHAR2(40) := 'QP_PREQ_GRP.SELECT_PRICE_LIST_LINES_PAT';

BEGIN

  qp_debug_util.tstart('SEL_PRICE_LIST_LINES_PAT','Big Search Call Pattern - SELECT_PRICE_LIST_LINES_PAT API', false, true);

  x_status_code := fnd_api.g_ret_sts_success;

  IF G_MULTI_CURRENCY_PROFILE = 'Y' AND G_USE_MULTI_CURRENCY = 'Y' THEN
     l_use_multi_curr := TRUE;
  END IF;

  IF g_debug_engine = fnd_api.g_true THEN
     engine_debug('Path selected - '||p_search_path);

     IF l_use_multi_curr THEN
       engine_debug('Multi Currency Enabled ');
     ELSE
       engine_debug('Multi Currency Disabled ');
      END IF;

  END IF;

  IF g_debug_engine = fnd_api.g_true THEN
     engine_debug('Entering into procedure select_price_list_lines_pat');
  END IF;

  -- Take path value from the profile.



  IF p_search_path = 2 THEN

  -- Line First Header Next Path

    -- Line check

     IF l_use_multi_curr THEN
          qp_debug_util.tstart('BIG_SRCH_LIN_CACH_P2','Line Cache Path 2 - l_pat_line_curr_p2');
          OPEN l_pat_line_curr_p2;
     ELSE
          qp_debug_util.tstart('BIG_SRCH_LIN_CACH_P2','Line Cache Path 2 - l_pat_line_p2');
          OPEN l_pat_line_p2;
         -- write logic for non multi curr case
     END IF;

     LOOP
              l_list_header_id_tbl.DELETE;
	      l_list_line_id_tbl.DELETE;
	      l_line_index_tbl.DELETE;
	      l_matched_pattrn_id_tbl.DELETE;
              l_ag_matched_pat_id_tbl.DELETE;
	      l_pricing_phase_id_tbl.DELETE;
	      l_matched_hash_key_tbl.DELETE;
	      l_ag_mtchd_hash_key_tbl.DELETE;
	      l_stage_tbl.DELETE;
	      l_pricing_status_code_tbl.DELETE;
	      l_ssc.DELETE;
	      l_header_quals_exist_flag.DELETE;
	      l_grouping_no.DELETE;
	      l_ag_grpng_no.DELETE;
	      l_eq_flag.DELETE;
	      l_ag_eq_flag.DELETE;
	      l_validated_flag.DELETE;
	      l_modf_lvl_code.DELETE;
              l_other_oprt_count.DELETE;
	      l_ag_othr_oprt_cnt.DELETE;
	      l_null_other_oprt_count.DELETE;
              l_list_type_code.DELETE;
	      l_ask_for_flag.DELETE;
	      l_hdr_lmt_exists.DELETE;
	      l_line_lmt_exists.DELETE;
	      l_curr_det_id.DELETE;
	      l_curr_hdr_id.DELETE;
	      L_SELLNG_ROUND_FTR.DELETE;
              l_base_curr_code.DELETE;
	      l_prcng_effctve_dt.DELETE;
              l_brk_uom_code.DELETE;
              l_brk_uom_ctxt.DELETE;
              l_brk_uom_attr.DELETE;
              l_order_curr.DELETE;
	      l_PRICE_BREAK_TYPE_CODE.DELETE;
              l_descnt_quals_exist.DELETE;


     IF l_use_multi_curr THEN
        FETCH l_pat_line_curr_p2 bulk collect
        INTO
	      l_list_header_id_tbl,
	      l_list_line_id_tbl,
	      l_line_index_tbl,
	      l_matched_pattrn_id_tbl,
              l_ag_matched_pat_id_tbl,
	      l_pricing_phase_id_tbl,
	      l_matched_hash_key_tbl,
	      l_ag_mtchd_hash_key_tbl,
	      l_stage_tbl,
	      l_pricing_status_code_tbl,
	      l_ssc,
	      l_header_quals_exist_flag,
	      l_grouping_no,
	      l_ag_grpng_no,
	      l_eq_flag,
	      l_ag_eq_flag,
	      l_validated_flag,
	      l_modf_lvl_code,
              l_other_oprt_count,
	      l_ag_othr_oprt_cnt,
	      l_null_other_oprt_count,
              l_list_type_code,
	      l_ask_for_flag,
	      l_hdr_lmt_exists,
	      l_line_lmt_exists,
	      l_curr_det_id,
	      l_curr_hdr_id,
	      L_SELLNG_ROUND_FTR,
              l_base_curr_code,
	      l_prcng_effctve_dt,
              l_brk_uom_code,
              l_brk_uom_ctxt,
              l_brk_uom_attr,
              l_order_curr,
              l_PRICE_BREAK_TYPE_CODE,
              l_descnt_quals_exist
	      limit l_limit;
     ELSE
        FETCH l_pat_line_p2 bulk collect
        INTO
	      l_list_header_id_tbl,
	      l_list_line_id_tbl,
	      l_line_index_tbl,
	      l_matched_pattrn_id_tbl,
              l_ag_matched_pat_id_tbl,
	      l_pricing_phase_id_tbl,
	      l_matched_hash_key_tbl,
	      l_ag_mtchd_hash_key_tbl,
	      l_stage_tbl,
	      l_pricing_status_code_tbl,
	      l_ssc,
	      l_header_quals_exist_flag,
	      l_grouping_no,
	      l_ag_grpng_no,
	      l_eq_flag,
	      l_ag_eq_flag,
	      l_validated_flag,
	      l_modf_lvl_code,
              l_other_oprt_count,
	      l_ag_othr_oprt_cnt,
	      l_null_other_oprt_count,
              l_list_type_code,
	      l_ask_for_flag,
	      l_hdr_lmt_exists,
	      l_line_lmt_exists,
	      l_curr_det_id,
	      l_curr_hdr_id,
	      L_SELLNG_ROUND_FTR,
              l_base_curr_code,
	      l_prcng_effctve_dt,
              l_brk_uom_code,
              l_brk_uom_ctxt,
              l_brk_uom_attr,
              l_order_curr,
              l_PRICE_BREAK_TYPE_CODE,
              l_descnt_quals_exist
	      limit l_limit;
     END IF;

     EXIT WHEN l_list_header_id_tbl.COUNT = 0;

     forall i IN 1 .. l_list_header_id_tbl.COUNT
         INSERT
	    INTO qp_preq_patrn_qual_tmp(list_header_id,
					list_line_id,
					line_index,
					matched_pattrn_id,
					pricing_phase_id,
					matched_hash_key,
					stage,
					pricing_status_code,
					source_system_code,
					header_quals_exist_flag,
					grouping_no,
					eq_flag,
					validated_flag,
					MODIFIER_LEVEL_CODE,
					other_oprt_count,
					null_other_oprt_count,
					LIST_TYPE_CODE,
					ASK_FOR_FLAG,
					HEADER_LIMIT_EXISTS,
					LINE_LIMIT_EXISTS,
					BREAK_UOM_CODE,
				        BREAK_UOM_CONTEXT,
				        BREAK_UOM_ATTRIBUTE,
				        ORDER_CURRENCY,
				        CURRENCY_DETAIL_ID,
				        CURRENCY_HEADER_ID,
				        SELLING_ROUNDING_FACTOR,
				        BASE_CURRENCY_CODE,
					pricing_effective_date,
                                        PRICE_BREAK_TYPE_CODE
					)
			    SELECT DISTINCT l_list_header_id_tbl(i),
					l_list_line_id_tbl(i),
					l_line_index_tbl(i),
					l_matched_pattrn_id_tbl(i),
					l_pricing_phase_id_tbl(i),
					l_matched_hash_key_tbl(i),
					l_stage_tbl(i),
					l_pricing_status_code_tbl(i),
					l_ssc(i),
					l_header_quals_exist_flag(i),
					l_grouping_no(i),
					l_eq_flag(i),
					l_validated_flag(i),
					l_modf_lvl_code(i),
					l_other_oprt_count(i),
					l_other_oprt_count(i),
					l_list_type_code(i),
					l_ask_for_flag(i),
					l_hdr_lmt_exists(i),
					l_line_lmt_exists(i),
			                l_brk_uom_code(i),
			                l_brk_uom_ctxt(i),
			                l_brk_uom_attr(i),
			                l_order_curr(i),
				        l_curr_det_id(i),
			                l_curr_hdr_id(i),
			                L_SELLNG_ROUND_FTR(i),
			                l_base_curr_code(i),
			                l_prcng_effctve_dt(i),
					l_PRICE_BREAK_TYPE_CODE(i)
				FROM dual;


             forall i IN 1 .. l_list_header_id_tbl.COUNT
             INSERT INTO qp_preq_patrn_qual_tmp(list_header_id,
					list_line_id,
					line_index,
					pricing_phase_id,
					stage,
					pricing_status_code,
					source_system_code,
					header_quals_exist_flag,
					grouping_no,
					eq_flag,
					validated_flag,
					MODIFIER_LEVEL_CODE,
					other_oprt_count,
					null_other_oprt_count,
					descendents_quals_exist
					)
			    SELECT DISTINCT l_list_header_id_tbl(i),
					-1, -- List line id,
					l_line_index_tbl(i),
					l_pricing_phase_id_tbl(i),
					l_stage_tbl(i),
					l_pricing_status_code_tbl(i),
					l_ssc(i),
					l_header_quals_exist_flag(i), -- Header Quals Exist,
					l_ag_grpng_no(i),
					l_ag_eq_flag(i),
					l_validated_flag(i),
					l_modf_lvl_code(i),
					l_ag_othr_oprt_cnt(i),
					l_null_other_oprt_count(i),
					l_descnt_quals_exist(i)
				FROM dual
				WHERE l_ag_eq_flag(i) = 'N'
				  OR l_descnt_quals_exist(i) = 'Y';

    l_loop_count := l_loop_count + 1;
    END LOOP;

    qp_debug_util.tstop('BIG_SRCH_LIN_CACH_P2');

     IF l_use_multi_curr THEN
          close l_pat_line_curr_p2;
     ELSE
          close l_pat_line_p2;
     END IF;

    qp_debug_util.tstart('Populate_Temp_Tables_NEQ_BTW_LIN','Populating BNQ Operators after line cache');

    Populate_Temp_Tables_NEQ_BTW(
	    p_pricing_phase_id ,
	    G_STAGE_CACHE_PL_LIN2 ,
	    x_status_code ,
	    x_status_text );

    qp_debug_util.tstop('Populate_Temp_Tables_NEQ_BTW_LIN');


   IF x_status_code <> FND_API.G_RET_STS_SUCCESS THEN
	RAISE E_ROUTINE_ERRORS;
    END IF;

    qp_debug_util.tstart('QP_EVALUATE_OTHER_OPERATORS_LIN','Evaluating other operators after line cache');

    QP_EVALUATE_OTHER_OPERATORS(
	 p_pricing_phase_id ,
         G_STAGE_CACHE_PL_LIN2,
	 x_status_code ,
	 x_status_text );

    qp_debug_util.tstop('QP_EVALUATE_OTHER_OPERATORS_LIN');

    IF x_status_code <> FND_API.G_RET_STS_SUCCESS THEN
	RAISE E_ROUTINE_ERRORS;
    END IF;

    qp_debug_util.tstart('PATRN_LIST_CUR_DEL_LIN_TCA_P2',   'Header/Line deletion for TCA');

	UPDATE qp_preq_patrn_qual_tmp a
	SET pricing_status_code = G_DELETED_TCA
	WHERE pricing_status_code = g_status_unchanged
	 AND a.descendents_quals_exist = 'Y'
         and a.pricing_phase_id = p_pricing_phase_id
         and a.stage =  G_STAGE_CACHE_PL_LIN2
	 AND EXISTS (
	    SELECT 1
	    FROM qp_qualifiers b, qp_npreq_line_attrs_tmp c
	    WHERE b.list_header_id = a.list_header_id
	      AND b.list_line_id = a.list_line_id
              AND (b.qualifier_grouping_no = a.grouping_no
                   or
                   b.qualifier_grouping_no = -1
                  )
	      AND b.qualify_hier_descendents_flag = 'N'
	      AND c.segment_id = b.segment_id
	      AND c.line_index = a.line_index
	      AND c.derived_qualifier_flag = 'Y');

    qp_debug_util.tstop('PATRN_LIST_CUR_DEL_LIN_TCA_P2');


   qp_debug_util.tstart('DEL_LIN_HDR_QUAL_FAILED','Deleting lines failed in header qualiifiers');

    -- Deleting lines if header is not satisfied.

    UPDATE qp_preq_patrn_qual_tmp a
    SET pricing_status_code = G_DELETED_LINE
      WHERE pricing_phase_id = p_pricing_phase_id
       AND pricing_status_code = g_status_unchanged
       AND list_line_id <> -1
       AND nvl(header_quals_exist_flag,   'N') = 'Y'
       and a.stage =  G_STAGE_CACHE_PL_LIN2
       AND NOT EXISTS
       (SELECT /*+ index(b QP_PREQ_PATRN_QUAL_T_N2) */ 'x'
        FROM qp_preq_patrn_qual_tmp b
        WHERE b.list_header_id = a.list_header_id
	AND b.line_index = a.line_index
        AND b.list_line_id = -1
        AND b.pricing_phase_id = a.pricing_phase_id
        AND pricing_status_code = g_status_unchanged
	and b.stage =  G_STAGE_CACHE_PL_LIN2);

       qp_debug_util.tstop('DEL_LIN_HDR_QUAL_FAILED');

       qp_debug_util.tstart('BIG_SRCH_POPULATE_TMP_TBLS','Populating Temp Tables - Populate_Pat_Temp_Tables API');

 Populate_Pat_Temp_Tables(p_pricing_phase_id,
                                G_STAGE_CACHE_PL_LIN2,
				x_status_code,
				x_status_text);

  qp_debug_util.tstop('BIG_SRCH_POPULATE_TMP_TBLS');


 ELSIF p_search_path = 1 THEN -- Header First - Line Next

      IF l_use_multi_curr THEN
        qp_debug_util.tstart('BIG_SRCH_HDR_CACH_P1','Header Cache Path 1 - l_pat_header_cache_curr_p1');
        OPEN l_pat_header_cache_curr_p1;
      ELSE
        qp_debug_util.tstart('BIG_SRCH_HDR_CACH_P1','Header Cache Path 1 - l_pat_header_cache_p1');
        OPEN l_pat_header_cache_p1;
      END IF;

      LOOP
	      l_list_header_id_tbl.DELETE;
	      l_list_line_id_tbl.DELETE;
	      l_line_index_tbl.DELETE;
	      l_matched_pattrn_id_tbl.DELETE;
	      l_pricing_phase_id_tbl.DELETE;
	      l_stage_tbl.DELETE;
	      l_matched_hash_key_tbl.DELETE;
	      l_pricing_status_code_tbl.DELETE;
	      l_ssc.DELETE;
	      l_header_quals_exist_flag.DELETE;
	      l_grouping_no.DELETE;
	      l_eq_flag.DELETE;
	      l_validated_flag.DELETE;
	      l_modf_lvl_code.DELETE;
	      l_other_oprt_count.DELETE;
	      l_null_other_oprt_count.DELETE;
	      l_list_type_code.DELETE;
	      l_ask_for_flag.DELETE;
	      l_hdr_lmt_exists.DELETE;
	      l_line_lmt_exists.DELETE;
	      l_curr_det_id.DELETE;
	      l_curr_hdr_id.DELETE;
	      L_SELLNG_ROUND_FTR.DELETE;
              l_base_curr_code.DELETE;
              l_prcng_effctve_dt.DELETE;
              l_PRICE_BREAK_TYPE_CODE.DELETE;
	      l_descnt_quals_exist.DELETE;


      IF l_use_multi_curr THEN
          FETCH l_pat_header_cache_curr_p1 bulk collect
	      INTO l_list_header_id_tbl,
		l_list_line_id_tbl,
		l_line_index_tbl,
		l_matched_pattrn_id_tbl,
		l_pricing_phase_id_tbl,
		l_matched_hash_key_tbl,
		l_stage_tbl,
		l_pricing_status_code_tbl,
		l_ssc,
		l_header_quals_exist_flag,
		l_grouping_no,
		l_eq_flag,
		l_validated_flag,
                l_modf_lvl_code,
	        l_other_oprt_count,
	        l_null_other_oprt_count,
	        l_list_type_code,
	        l_ask_for_flag,
	        l_hdr_lmt_exists,
	        l_line_lmt_exists,
   	        l_curr_det_id,
	        l_curr_hdr_id,
	        L_SELLNG_ROUND_FTR,
                l_base_curr_code,
                l_prcng_effctve_dt,
  	        l_descnt_quals_exist
 		limit l_limit;
      ELSE
          FETCH l_pat_header_cache_p1 bulk collect
	      INTO l_list_header_id_tbl,
		l_list_line_id_tbl,
		l_line_index_tbl,
		l_matched_pattrn_id_tbl,
		l_pricing_phase_id_tbl,
		l_matched_hash_key_tbl,
		l_stage_tbl,
		l_pricing_status_code_tbl,
		l_ssc,
		l_header_quals_exist_flag,
		l_grouping_no,
		l_eq_flag,
		l_validated_flag,
                l_modf_lvl_code,
	        l_other_oprt_count,
	        l_null_other_oprt_count,
	        l_list_type_code,
	        l_ask_for_flag,
	        l_hdr_lmt_exists,
	        l_line_lmt_exists,
   	        l_curr_det_id,
	        l_curr_hdr_id,
	        L_SELLNG_ROUND_FTR,
                l_base_curr_code,
                l_prcng_effctve_dt,
  	        l_descnt_quals_exist
 		limit l_limit;
     END IF;

	      EXIT
	    WHEN l_list_header_id_tbl.COUNT = 0;

	    forall i IN 1 .. l_list_header_id_tbl.COUNT INSERT
	    INTO qp_preq_patrn_qual_tmp(list_header_id,
					list_line_id,
					line_index,
					matched_pattrn_id,
					pricing_phase_id,
					matched_hash_key,
					stage,
					pricing_status_code,
					source_system_code,
					header_quals_exist_flag,
					grouping_no,
					eq_flag,
					validated_flag,
					MODIFIER_LEVEL_CODE,
					other_oprt_count,
					null_other_oprt_count,
					LIST_TYPE_CODE,
					ASK_FOR_FLAG,
					HEADER_LIMIT_EXISTS,
					LINE_LIMIT_EXISTS,
					CURRENCY_DETAIL_ID,
				        CURRENCY_HEADER_ID,
				        SELLING_ROUNDING_FACTOR,
				        BASE_CURRENCY_CODE,
				        pricing_effective_date--,
					--PRICE_BREAK_TYPE_CODE
					)
			    VALUES(l_list_header_id_tbl(i),
					l_list_line_id_tbl(i),
					l_line_index_tbl(i),
					l_matched_pattrn_id_tbl(i),
					l_pricing_phase_id_tbl(i),
					l_matched_hash_key_tbl(i),
					l_stage_tbl(i),
					l_pricing_status_code_tbl(i),
					l_ssc(i),
					l_header_quals_exist_flag(i),
					l_grouping_no(i),
					l_eq_flag(i),
					l_validated_flag(i),
					l_modf_lvl_code(i),
					l_other_oprt_count(i),
					l_null_other_oprt_count(i),
					l_list_type_code(i),
					l_ask_for_flag(i),
					l_hdr_lmt_exists(i),
					l_line_lmt_exists(i),
			   	        l_curr_det_id(i),
				        l_curr_hdr_id(i),
				        L_SELLNG_ROUND_FTR(i),
			                l_base_curr_code(i),
			                l_prcng_effctve_dt(i)--,
					--l_PRICE_BREAK_TYPE_CODE(i)
					);
      END LOOP;

    IF l_use_multi_curr THEN
      CLOSE l_pat_header_cache_curr_p1;
    ELSE
      CLOSE l_pat_header_cache_p1;
     END IF;

    qp_debug_util.tstop('BIG_SRCH_HDR_CACH_P1');

    --doing between/ not = operator check

    qp_debug_util.tstart('Populate_Temp_Tables_NEQ_BTW_HDR','Populating BNQ Operators after header cache');

    Populate_Temp_Tables_NEQ_BTW(
	    p_pricing_phase_id ,
	    G_STAGE_CACHE_PL_HDR,
	    x_status_code ,
	    x_status_text );

   qp_debug_util.tstop('Populate_Temp_Tables_NEQ_BTW_HDR');

   IF x_status_code <> FND_API.G_RET_STS_SUCCESS THEN
	RAISE E_ROUTINE_ERRORS;
    END IF;

    qp_debug_util.tstart('QP_EVALUATE_OTHER_OPERATORS_HDR','Evaluating other operators after header cache');

    QP_EVALUATE_OTHER_OPERATORS(
	 p_pricing_phase_id ,
         G_STAGE_CACHE_PL_HDR,
	 x_status_code ,
	 x_status_text );

    qp_debug_util.tstop('QP_EVALUATE_OTHER_OPERATORS_HDR');


       qp_debug_util.tstart('PATRN_LIST_CUR_DEL_HDR_TCA_P1',   'Header deletion for TCA');

	UPDATE qp_preq_patrn_qual_tmp a
	SET pricing_status_code = G_DELETED_TCA
	WHERE pricing_status_code = g_status_unchanged
	 AND a.descendents_quals_exist = 'Y'
         and a.pricing_phase_id = p_pricing_phase_id
         and a.stage =  G_STAGE_CACHE_PL_HDR
	 AND EXISTS (
	    SELECT 1
	    FROM qp_qualifiers b, qp_npreq_line_attrs_tmp c
	    WHERE b.list_header_id = a.list_header_id
	      AND b.list_line_id = a.list_line_id
              AND (b.qualifier_grouping_no = a.grouping_no
                   or
                   b.qualifier_grouping_no = -1
                  )
	      AND b.qualify_hier_descendents_flag = 'N'
	      AND c.segment_id = b.segment_id
	      AND c.line_index = a.line_index
	      AND c.derived_qualifier_flag = 'Y');

        qp_debug_util.tstop('PATRN_LIST_CUR_DEL_HDR_TCA_P1');


   -- Line check

    IF l_use_multi_curr THEN
      qp_debug_util.tstart('BIG_SRCH_LIN_CACH_P1','Line Cache Path 1 - l_pat_line_cache_curr_p1');
      OPEN l_pat_line_cache_curr_p1;
    ELSE
      qp_debug_util.tstart('BIG_SRCH_LIN_CACH_P1','Line Cache Path 1 - l_pat_line_cache_p1');
      OPEN l_pat_line_cache_p1;
    END if;

      LOOP
	      l_list_header_id_tbl.DELETE;
	      l_list_line_id_tbl.DELETE;
	      l_line_index_tbl.DELETE;
	      l_matched_pattrn_id_tbl.DELETE;
	      l_pricing_phase_id_tbl.DELETE;
	      l_stage_tbl.DELETE;
	      l_matched_hash_key_tbl.DELETE;
	      l_pricing_status_code_tbl.DELETE;
	      l_ssc.DELETE;
	      l_header_quals_exist_flag.DELETE;
	      l_grouping_no.DELETE;
	      l_eq_flag.DELETE;
	      l_validated_flag.DELETE;
	      l_modf_lvl_code.DELETE;
	      l_other_oprt_count.DELETE;
	      l_null_other_oprt_count.DELETE;
	      l_list_type_code.DELETE;
	      l_ask_for_flag.DELETE;
	      l_hdr_lmt_exists.DELETE;
	      l_line_lmt_exists.DELETE;
              l_brk_uom_code.DELETE;
              l_brk_uom_ctxt.DELETE;
              l_brk_uom_attr.DELETE;
              l_order_curr.DELETE;
	      l_curr_det_id.DELETE;
              l_curr_hdr_id.DELETE;
              L_SELLNG_ROUND_FTR.DELETE;
              l_base_curr_code.DELETE;
              l_prcng_effctve_dt.DELETE;
              l_PRICE_BREAK_TYPE_CODE.DELETE;
	      l_descnt_quals_exist.DELETE;


   IF l_use_multi_curr THEN
       FETCH l_pat_line_cache_curr_p1 bulk collect
	      INTO l_list_header_id_tbl,
		l_list_line_id_tbl,
		l_line_index_tbl,
		l_matched_pattrn_id_tbl,
		l_pricing_phase_id_tbl,
		l_matched_hash_key_tbl,
		l_stage_tbl,
		l_pricing_status_code_tbl,
		l_ssc,
		l_header_quals_exist_flag,
		l_grouping_no,
		l_eq_flag,
		l_validated_flag,
                l_modf_lvl_code,
	        l_null_other_oprt_count,
	        l_list_type_code,
	        l_ask_for_flag,
	        l_hdr_lmt_exists,
	        l_line_lmt_exists,
                l_brk_uom_code,
                l_brk_uom_ctxt,
                l_brk_uom_attr,
                l_order_curr,
	        l_curr_det_id,
                l_curr_hdr_id,
                L_SELLNG_ROUND_FTR,
                l_base_curr_code,
                l_prcng_effctve_dt,
                l_PRICE_BREAK_TYPE_CODE,
  	        l_descnt_quals_exist
   		limit l_limit;
   ELSE
       FETCH l_pat_line_cache_p1 bulk collect
	      INTO l_list_header_id_tbl,
		l_list_line_id_tbl,
		l_line_index_tbl,
		l_matched_pattrn_id_tbl,
		l_pricing_phase_id_tbl,
		l_matched_hash_key_tbl,
		l_stage_tbl,
		l_pricing_status_code_tbl,
		l_ssc,
		l_header_quals_exist_flag,
		l_grouping_no,
		l_eq_flag,
		l_validated_flag,
                l_modf_lvl_code,
	        l_null_other_oprt_count,
	        l_list_type_code,
	        l_ask_for_flag,
	        l_hdr_lmt_exists,
	        l_line_lmt_exists,
                l_brk_uom_code,
                l_brk_uom_ctxt,
                l_brk_uom_attr,
                l_order_curr,
	        l_curr_det_id,
                l_curr_hdr_id,
                L_SELLNG_ROUND_FTR,
                l_base_curr_code,
                l_prcng_effctve_dt,
                l_PRICE_BREAK_TYPE_CODE,
  	        l_descnt_quals_exist
   		limit l_limit;
   END IF;
	      EXIT
	    WHEN l_list_header_id_tbl.COUNT = 0;

	    forall i IN 1 .. l_list_header_id_tbl.COUNT INSERT
	    INTO qp_preq_patrn_qual_tmp(list_header_id,
					list_line_id,
					line_index,
					matched_pattrn_id,
					pricing_phase_id,
					matched_hash_key,
					stage,
					pricing_status_code,
					source_system_code,
					header_quals_exist_flag,
					grouping_no,
					eq_flag,
					validated_flag,
					MODIFIER_LEVEL_CODE,
					other_oprt_count,
					null_other_oprt_count,
					LIST_TYPE_CODE,
					ASK_FOR_FLAG,
					HEADER_LIMIT_EXISTS,
					LINE_LIMIT_EXISTS,
					BREAK_UOM_CODE,
				        BREAK_UOM_CONTEXT,
				        BREAK_UOM_ATTRIBUTE,
				        ORDER_CURRENCY,
				        CURRENCY_DETAIL_ID,
				        CURRENCY_HEADER_ID,
				        SELLING_ROUNDING_FACTOR,
				        BASE_CURRENCY_CODE,
					pricing_effective_date,
                                        PRICE_BREAK_TYPE_CODE,
                                        descendents_quals_exist
					)
			    VALUES(l_list_header_id_tbl(i),
					l_list_line_id_tbl(i),
					l_line_index_tbl(i),
					l_matched_pattrn_id_tbl(i),
					l_pricing_phase_id_tbl(i),
					l_matched_hash_key_tbl(i),
					l_stage_tbl(i),
					l_pricing_status_code_tbl(i),
					l_ssc(i),
					l_header_quals_exist_flag(i),
					l_grouping_no(i),
					l_eq_flag(i),
					l_validated_flag(i),
					l_modf_lvl_code(i),
					l_null_other_oprt_count(i),
					l_null_other_oprt_count(i),
					l_list_type_code(i),
					l_ask_for_flag(i),
					l_hdr_lmt_exists(i),
					l_line_lmt_exists(i),
			                l_brk_uom_code(i),
			                l_brk_uom_ctxt(i),
			                l_brk_uom_attr(i),
			                l_order_curr(i),
				        l_curr_det_id(i),
			                l_curr_hdr_id(i),
			                L_SELLNG_ROUND_FTR(i),
			                l_base_curr_code(i),
			                l_prcng_effctve_dt(i),
                                        l_PRICE_BREAK_TYPE_CODE(i),
                       	                l_descnt_quals_exist(i)
					);

            l_loop_count := l_loop_count + 1;

      END LOOP;

    IF l_use_multi_curr THEN
      CLOSE l_pat_line_cache_curr_p1;
    ELSE
      CLOSE l_pat_line_cache_p1;
    END IF;

    qp_debug_util.tstop('BIG_SRCH_LIN_CACH_P1');

    --doing between/ not = operator check

    qp_debug_util.tstart('Populate_Temp_Tables_NEQ_BTW_LIN','Populating BNQ Operators after line cache');

    Populate_Temp_Tables_NEQ_BTW(
	    p_pricing_phase_id ,
	    G_STAGE_CACHE_PL_LIN,
	    x_status_code ,
	    x_status_text );

    qp_debug_util.tstop('Populate_Temp_Tables_NEQ_BTW_LIN');

   IF x_status_code <> FND_API.G_RET_STS_SUCCESS THEN
	RAISE E_ROUTINE_ERRORS;
    END IF;

    qp_debug_util.tstart('QP_EVALUATE_OTHER_OPERATORS_LIN','Evaluating other operators after line cache');

    QP_EVALUATE_OTHER_OPERATORS(
	 p_pricing_phase_id ,
         G_STAGE_CACHE_PL_LIN,
	 x_status_code ,
	 x_status_text );

    qp_debug_util.tstop('QP_EVALUATE_OTHER_OPERATORS_LIN');

    IF x_status_code <> FND_API.G_RET_STS_SUCCESS THEN
	RAISE E_ROUTINE_ERRORS;
    END IF;

           qp_debug_util.tstart('PATRN_LIST_CUR_DEL_LIN_TCA_P1',   'Line deletion for TCA');

	UPDATE qp_preq_patrn_qual_tmp a
	SET pricing_status_code = G_DELETED_TCA
	WHERE pricing_status_code = g_status_unchanged
	 AND a.descendents_quals_exist = 'Y'
         and a.pricing_phase_id = p_pricing_phase_id
         and a.stage =  G_STAGE_CACHE_PL_LIN
	 AND EXISTS (
	    SELECT 1
	    FROM qp_qualifiers b, qp_npreq_line_attrs_tmp c
	    WHERE b.list_header_id = a.list_header_id
	      AND b.list_line_id = a.list_line_id
              AND (b.qualifier_grouping_no = a.grouping_no
                   or
                   b.qualifier_grouping_no = -1
                  )
	      AND b.qualify_hier_descendents_flag = 'N'
	      AND c.segment_id = b.segment_id
	      AND c.line_index = a.line_index
	      AND c.derived_qualifier_flag = 'Y');

        qp_debug_util.tstop('PATRN_LIST_CUR_DEL_LIN_TCA_P1');

  qp_debug_util.tstart('BIG_SRCH_POPULATE_TMP_TBLS','Populating Temp Tables - Populate_Pat_Temp_Tables API');

  Populate_Pat_Temp_Tables(p_pricing_phase_id,
                                G_STAGE_CACHE_PL_LIN,
				x_status_code,
				x_status_text);

  qp_debug_util.tstop('BIG_SRCH_POPULATE_TMP_TBLS');

  END IF;

  --- Existing logic

  IF l_loop_count > 0 THEN

   qp_debug_util.tstart('BIG_SRCH_RESLV_INCMPTBLTY','Resolve Incompatability - Determine_Pricing_UOM_And_Qty API');

  	QP_Resolve_Incompatability_PVT.Determine_Pricing_UOM_And_Qty
				(p_line_index        => NULL,
 				 p_order_uom_code    => NULL,
				 p_order_qty         => NULL,
				 p_pricing_phase_id  => G_PRICE_LIST_PHASE_ID,
                                 p_call_big_search   => FALSE,
				 x_list_line_id	 =>     l_list_line_id,
				 x_return_status     => l_return_status,
				 x_return_status_txt => l_status_text);

     qp_debug_util.tstop('BIG_SRCH_RESLV_INCMPTBLTY');

           IF(l_return_status = FND_API.G_RET_STS_ERROR) THEN
            RAISE E_ROUTINE_ERRORS;
           END IF;

            IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
            engine_debug('Incomp Return Status Non Validated QP_PREQ_GRP: ' || l_return_status);

            END IF;

            -- 3773652
            -- re-run Evaluate_Between after UOM conversion to check PLL really qualifies
            begin
              select 'x' into l_dummy
              from qp_npreq_lines_tmp
              where LINE_UOM_CODE <> nvl(PRICED_UOM_CODE, LINE_UOM_CODE)
              and (PRICE_FLAG = G_YES
                   or
                   PRICE_FLAG = G_PHASE and p_freeze_override_flag = G_YES)
              and rownum = 1;
--       //Shankar  need to put this

              qp_debug_util.tstart('BIG_SRCH_EVAL_BET','Evaluate Between');

              Evaluate_Between(p_pricing_phase_id,NULL,NULL,l_return_status,l_status_text);

	      qp_debug_util.tstop('BIG_SRCH_EVAL_BET');

            exception
              when no_data_found then
                null;
            end;

        -- Update the request line status for lines which got valid price list

	   qp_debug_util.tstart('BIG_SRCH_UPD_REQ_LIN_STATUS','Updating Request Lines Status - Update_Request_Line_Status API');

           Update_Request_Line_Status(p_control_rec,'SUCCESS',p_freeze_override_flag,l_return_status,l_status_text);  --[julin/4708044]

	   qp_debug_util.tstop('BIG_SRCH_UPD_REQ_LIN_STATUS');

            IF(l_return_status = FND_API.G_RET_STS_ERROR) THEN
             RAISE E_ROUTINE_ERRORS;
            END IF;

         --bug# 2091386 not reflecting the right price on change on UOM on the order line . Since
         --QP_Resolve_Incompatability_PVT.Determine_Pricing_UOM_And_Qty determines the pricing_qty
         --which is needed later in Get_Eligible_Price_Break we need to call Get_Eligible_Price_Break
         --after QP_Resolve_Incompatability_PVT.Determine_Pricing_UOM_And_Qty.
         --By doing this we will get the right price in the PRICE event on change of UOM on the order line
         --for price based on price break
--       //Shankar  need to put this

	 qp_debug_util.tstart('BIG_SRCH_GET_ELGBLE_PRICE_BRK','Getting eligible Price Breaks - Get_Eligible_Price_Break API');

         Get_Eligible_Price_Break(p_pricing_phase_id,NULL,l_return_status,l_status_text);

         qp_debug_util.tstop('BIG_SRCH_GET_ELGBLE_PRICE_BRK');

         IF(l_return_status = FND_API.G_RET_STS_ERROR) THEN
          RAISE E_ROUTINE_ERRORS;
         END IF;

   ELSE
           -- Update the request line status for lines which got valid price list
	   Update_Request_Line_Status(p_control_rec,'FAILURE',p_freeze_override_flag,x_status_code,x_status_text);  --[juiln/4708044]
	   IF(x_status_code = FND_API.G_RET_STS_ERROR) THEN
	    RAISE E_ROUTINE_ERRORS;
	   END IF;

   END IF;

 qp_debug_util.tstop('SEL_PRICE_LIST_LINES_PAT');

 EXCEPTION
   WHEN E_ROUTINE_ERRORS THEN

   qp_debug_util.tstop('SEL_PRICE_LIST_LINES_PAT');

   IF l_use_multi_curr THEN
     IF l_pat_line_cache_curr_p1%ISOPEN THEN
        CLOSE l_pat_line_cache_curr_p1;
     END if;

     IF l_pat_header_cache_curr_p1%ISOPEN THEN
        CLOSE l_pat_header_cache_curr_p1;
     END if;

     IF l_pat_line_curr_p2%ISOPEN THEN
        CLOSE l_pat_line_curr_p2;
     END if;

   ELSE
     IF l_pat_line_cache_p1%ISOPEN THEN
        CLOSE l_pat_line_cache_p1;
     END if;

     IF l_pat_header_cache_p1%ISOPEN THEN
        CLOSE l_pat_header_cache_p1;
     END if;

     IF l_pat_line_p2%ISOPEN THEN
        CLOSE l_pat_line_p2;
     END if;

   END IF;

     x_status_code := FND_API.G_RET_STS_ERROR;
     x_status_text := 'Expected Error in ' || l_routine || sqlerrm;

     IF g_debug_engine = fnd_api.g_true THEN
	engine_debug(x_status_text);
     END IF;

   WHEN OTHERS THEN

    qp_debug_util.tstop('SEL_PRICE_LIST_LINES_PAT');

    IF l_use_multi_curr THEN
     IF l_pat_line_cache_curr_p1%ISOPEN THEN
        CLOSE l_pat_line_cache_curr_p1;
     END if;

     IF l_pat_header_cache_curr_p1%ISOPEN THEN
        CLOSE l_pat_header_cache_curr_p1;
     END if;

     IF l_pat_line_curr_p2%ISOPEN THEN
        CLOSE l_pat_line_curr_p2;
     END if;

    ELSE
     IF l_pat_line_cache_p1%ISOPEN THEN
        CLOSE l_pat_line_cache_p1;
     END if;

     IF l_pat_header_cache_p1%ISOPEN THEN
        CLOSE l_pat_header_cache_p1;
     END if;

     IF l_pat_line_p2%ISOPEN THEN
        CLOSE l_pat_line_p2;
     END if;

    END IF;
     IF g_debug_engine = fnd_api.g_true THEN
	engine_debug(l_routine || ' ' || sqlerrm);
     END IF;

    x_status_code := fnd_api.g_ret_sts_error;
    x_status_text := 'Error in ' || l_routine || sqlerrm;


END select_price_list_lines_pat;

/*+----------------------------------------------------------
  |PROCEDURE SELECT_PRICE_LIST_LINES
  +----------------------------------------------------------
*/
PROCEDURE SELECT_PRICE_LIST_LINES(p_pricing_phase_id   IN  NUMBER,
                                  p_freeze_override_flag IN VARCHAR2,
                                  x_status_code OUT NOCOPY       VARCHAR2,
                                  x_status_text OUT NOCOPY       VARCHAR2,
                                  p_control_rec       IN CONTROL_RECORD_TYPE) -- vivek
AS

-- [julin/4742368/4766135] Added QP_QUALIFIERS_N1 hint to prevent db from using N2
--[julin/5007789] Tuned query as follows:
-- 1. Performing line filter first.
-- 2. Performing qualifier filter before product filter
-- 3. Split into unions ('=', 'BETWEEN', 'NOT =') for better use of indexes
-- bug 9210308 added index hint for index QP_LIST_LINES_PK
CURSOR l_prod_qual_cur (p_pricing_phase_id NUMBER) IS
-- Product and Qualifier Only. No pricing
SELECT /*+ ORDERED USE_NL(QPLATQ QPQ QPH QPRS QPLATPR QPPROD QPL)
           INDEX(QPLATQ QP_PREQ_LINE_ATTRS_TMP_N1)
           INDEX(QPLAPR QP_PREQ_LINE_ATTRS_TMP_N1)
	   INDEX(QPPROD QP_PRICING_ATTRIBUTES_N5)
           INDEX(QPQ QP_QUALIFIERS_N4)
	   INDEX(QPL QP_LIST_LINES_PK)
           l_prod_qual_cur_pl */
       qpl.list_header_id,
       qpl.list_line_id,
       qpl.list_line_type_code,
       qplatpr.line_index,
       qplatpr.applied_flag,
       qplatpr.attribute_level               product_attribute_level,
       qplatpr.attribute_type                product_attribute_type,
       qplatpr.context                       product_attribute_context,
       qplatpr.attribute                     product_attribute,
       qplatpr.value_from                    product_attr_value,
       qpprod.product_uom_code               product_uom_code,
       qpprod.excluder_flag,
       qplatq.context                        qualifier_attribute_context,
       qplatq.attribute                      qualifier_attribute,
       qplatq.value_from                     qualifier_attribute_value,
       qpq.qualifier_grouping_no             qualifier_grouping_no,
       qpq.qualifier_precedence              qualifier_precedence,
       qpq.qualifier_datatype,
       qpq.qualifier_attr_value              setup_value_from,
       qpq.qualifier_attr_value_to           setup_value_to,
       qpl.automatic_flag,
       qpl.modifier_level_code,
       qpl.primary_uom_flag,
       qpl.arithmetic_operator               operand_calculation_code,
       qpl.operand                           operand_value,
       qpl.pricing_group_sequence,
       qph.list_type_code                    created_from_list_type,
       qph.rounding_factor,
       qpl.pricing_phase_id,
       qpl.price_break_type_code,
       qpl.incompatibility_grp_code,
       qpl.price_by_formula_id,
       qpl.product_precedence,
       qpl.list_line_no,
       'HQ'                                 qualifier_type
      ,QPL.BREAK_UOM_CODE /* Proration */
      ,QPL.BREAK_UOM_CONTEXT /* Proration */
      ,QPL.BREAK_UOM_ATTRIBUTE /* Proration */
FROM   --[julin/5007789]
       (SELECT /*+ dynamic_sampling(1) */ *
        FROM qp_npreq_lines_tmp
        WHERE processed_code IN (G_STS_LHS_NOT_FOUND, G_NO_LIST_PASSED)
        AND (nvl(validated_flag,G_NO) = G_NO or nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) = G_YES)) qplines,
       qp_npreq_line_attrs_tmp qplatq,
       qp_qualifiers qpq,
       qp_list_headers_b qph,
       qp_price_req_sources_v qprs,
       qp_npreq_line_attrs_tmp qplatpr,
       qp_pricing_attributes qpprod,
       qp_list_lines qpl
WHERE  qph.list_header_id = qpl.list_header_id
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
-- 3594459, context and attribute OR'd together
AND   (qpq.qualifier_context <> G_LIST_HEADER_CONTEXT --bug 2799670
       OR qpq.qualifier_attribute <> G_PRICELIST_ATTRIBUTE) --bug 2799670
AND    qpq.list_header_id = qph.list_header_id
AND   (qplines.price_flag = G_YES OR
       (qplines.price_flag = G_PHASE AND p_freeze_override_flag = G_YES))
AND   qplines.list_price_override_flag in ('N', 'O') -- po integration
AND    qpq.list_line_id = -1
AND   qpl.list_line_type_code in ('PLL','PMR','PBH')
AND   qpl.list_line_id   = qpprod.list_line_id
AND   qph.currency_code = qplines.currency_code
AND   qpl.modifier_level_code = qplines.line_type_code
AND   qph.active_flag = G_YES
AND   nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
       nvl(qph.start_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE))) and
       nvl(qph.end_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)))
AND   nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
       nvl(TRUNC(qpl.start_date_active), qplines.pricing_effective_date) and
       nvl(TRUNC(qpl.end_date_active),qplines.pricing_effective_date)
AND   nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
       nvl(qpq.start_date_active, qplines.pricing_effective_date) and
       nvl(qpq.end_date_active,qplines.pricing_effective_date)
AND   qpq.qualifier_context    = qplatq.context
AND   qpq.qualifier_attribute  = qplatq.attribute
AND   qpq.comparison_operator_code = '=' --[julin/5007789]
AND   qplatq.value_from   = qpq.qualifier_attr_value --bug#1761272 Multiple NOT =, [julin/5007789]
AND   qpq.active_flag = G_YES
AND   qpprod.pricing_phase_id = p_pricing_phase_id
AND   qpprod.qualification_ind = QP_PREQ_GRP.G_YES_PROD_HDR_QUAL_IND
AND   qpprod.product_attribute_context = qplatpr.context
AND   qpprod.product_attribute = qplatpr.attribute
AND   qpprod.product_attr_value = qplatpr.value_from
AND   qpprod.excluder_flag = G_NO
AND   qpprod.list_header_id = qph.list_header_id --[julin/5007789]
AND   qplatq.line_index = qplines.line_index
AND   qplatpr.line_index = qplines.line_index --[julin/5007789]
AND   qplatpr.line_index = qplatq.line_index
AND   qph.source_system_code = qprs.source_system_code
AND   qplines.request_type_code   = qprs.request_type_code
AND   qplatq.attribute_type = 'QUALIFIER'
AND   qplatq.pricing_status_code = G_STATUS_UNCHANGED
AND   qplatpr.attribute_type='PRODUCT'
AND   qplatpr.pricing_status_code=G_STATUS_UNCHANGED
AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
AND  ((nvl(qplatq.DERIVED_QUALIFIER_FLAG,'N') ='N' )
  OR (qplatq.DERIVED_QUALIFIER_FLAG ='Y' AND qpq.QUALIFY_HIER_DESCENDENTS_FLAG ='Y')) -- Added for TCA
UNION ALL
SELECT /*+ ORDERED USE_NL(QPLATQ QPQ QPH QPRS QPLATPR QPPROD QPL)
           INDEX(QPLATQ QP_PREQ_LINE_ATTRS_TMP_N1)
           INDEX(QPLAPR QP_PREQ_LINE_ATTRS_TMP_N1)
	   INDEX(QPPROD QP_PRICING_ATTRIBUTES_N5)
           INDEX(QPQ QP_QUALIFIERS_N5)
           l_prod_qual_cur_pl */
       qpl.list_header_id,
       qpl.list_line_id,
       qpl.list_line_type_code,
       qplatpr.line_index,
       qplatpr.applied_flag,
       qplatpr.attribute_level               product_attribute_level,
       qplatpr.attribute_type                product_attribute_type,
       qplatpr.context                       product_attribute_context,
       qplatpr.attribute                     product_attribute,
       qplatpr.value_from                    product_attr_value,
       qpprod.product_uom_code               product_uom_code,
       qpprod.excluder_flag,
       qplatq.context                        qualifier_attribute_context,
       qplatq.attribute                      qualifier_attribute,
       qplatq.value_from                     qualifier_attribute_value,
       qpq.qualifier_grouping_no             qualifier_grouping_no,
       qpq.qualifier_precedence              qualifier_precedence,
       qpq.qualifier_datatype,
       qpq.qualifier_attr_value              setup_value_from,
       qpq.qualifier_attr_value_to           setup_value_to,
       qpl.automatic_flag,
       qpl.modifier_level_code,
       qpl.primary_uom_flag,
       qpl.arithmetic_operator               operand_calculation_code,
       qpl.operand                           operand_value,
       qpl.pricing_group_sequence,
       qph.list_type_code                    created_from_list_type,
       qph.rounding_factor,
       qpl.pricing_phase_id,
       qpl.price_break_type_code,
       qpl.incompatibility_grp_code,
       qpl.price_by_formula_id,
       qpl.product_precedence,
       qpl.list_line_no,
       'HQ'                                 qualifier_type
      ,QPL.BREAK_UOM_CODE /* Proration */
      ,QPL.BREAK_UOM_CONTEXT /* Proration */
      ,QPL.BREAK_UOM_ATTRIBUTE /* Proration */
FROM   --[julin/5007789]
       (SELECT /*+ dynamic_sampling(1) */ *
        FROM qp_npreq_lines_tmp
        WHERE processed_code IN (G_STS_LHS_NOT_FOUND, G_NO_LIST_PASSED)
        AND (nvl(validated_flag,G_NO) = G_NO or nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) = G_YES)) qplines,
       qp_npreq_line_attrs_tmp qplatq,
       qp_qualifiers qpq,
       qp_list_headers_b qph,
       qp_price_req_sources_v qprs,
       qp_npreq_line_attrs_tmp qplatpr,
       qp_pricing_attributes qpprod,
       qp_list_lines qpl
WHERE  qph.list_header_id = qpl.list_header_id
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
-- 3594459, context and attribute OR'd together
AND   (qpq.qualifier_context <> G_LIST_HEADER_CONTEXT --bug 2799670
       OR qpq.qualifier_attribute <> G_PRICELIST_ATTRIBUTE) --bug 2799670
AND    qpq.list_header_id = qph.list_header_id
AND   (qplines.price_flag = G_YES OR
       (qplines.price_flag = G_PHASE AND p_freeze_override_flag = G_YES))
AND   qplines.list_price_override_flag in ('N', 'O') -- po integration
AND    qpq.list_line_id = -1
AND   qpl.list_line_type_code in ('PLL','PMR','PBH')
AND   qpl.list_line_id   = qpprod.list_line_id
AND   qph.currency_code = qplines.currency_code
AND   qpl.modifier_level_code = qplines.line_type_code
AND   qph.active_flag = G_YES
AND   nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
       nvl(qph.start_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE))) and
       nvl(qph.end_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)))
AND   nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
       nvl(TRUNC(qpl.start_date_active), qplines.pricing_effective_date) and
       nvl(TRUNC(qpl.end_date_active),qplines.pricing_effective_date)
AND   nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
       nvl(qpq.start_date_active, qplines.pricing_effective_date) and
       nvl(qpq.end_date_active,qplines.pricing_effective_date)
AND   qpq.qualifier_context    = qplatq.context
AND   qpq.qualifier_attribute  = qplatq.attribute
AND   qpq.comparison_operator_code = 'NOT =' --[julin/5007789]
AND   qpq.active_flag = G_YES
AND   qplatq.value_from  <> qpq.qualifier_attr_value --[julin/5007789]
AND   qpprod.pricing_phase_id = p_pricing_phase_id
AND   qpprod.qualification_ind = QP_PREQ_GRP.G_YES_PROD_HDR_QUAL_IND
AND   qpprod.product_attribute_context = qplatpr.context
AND   qpprod.product_attribute = qplatpr.attribute
AND   qpprod.product_attr_value = qplatpr.value_from
AND   qpprod.excluder_flag = G_NO
AND   qpprod.list_header_id = qph.list_header_id --[julin/5007789]
AND   qplatq.line_index = qplines.line_index
AND   qplatpr.line_index = qplines.line_index --[julin/5007789]
AND   qplatpr.line_index = qplatq.line_index
AND   qph.source_system_code = qprs.source_system_code
AND   qplines.request_type_code   = qprs.request_type_code
AND   qplatq.attribute_type = 'QUALIFIER'
AND   qplatq.pricing_status_code = G_STATUS_UNCHANGED
AND   qplatpr.attribute_type='PRODUCT'
AND   qplatpr.pricing_status_code=G_STATUS_UNCHANGED
AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
AND  ((nvl(qplatq.DERIVED_QUALIFIER_FLAG,'N') ='N' )
  OR (qplatq.DERIVED_QUALIFIER_FLAG ='Y' AND qpq.QUALIFY_HIER_DESCENDENTS_FLAG ='Y')) -- Added for TCA
UNION ALL
SELECT /*+ ORDERED USE_NL(QPLATQ QPQ QPH QPRS QPLATPR QPPROD QPL)
           INDEX(QPLATQ QP_PREQ_LINE_ATTRS_TMP_N1)
           INDEX(QPLAPR QP_PREQ_LINE_ATTRS_TMP_N1)
	   INDEX(QPPROD QP_PRICING_ATTRIBUTES_N5)
           INDEX(QPQ QP_QUALIFIERS_N6)
           l_prod_qual_cur_pl */
       qpl.list_header_id,
       qpl.list_line_id,
       qpl.list_line_type_code,
       qplatpr.line_index,
       qplatpr.applied_flag,
       qplatpr.attribute_level               product_attribute_level,
       qplatpr.attribute_type                product_attribute_type,
       qplatpr.context                       product_attribute_context,
       qplatpr.attribute                     product_attribute,
       qplatpr.value_from                    product_attr_value,
       qpprod.product_uom_code               product_uom_code,
       qpprod.excluder_flag,
       qplatq.context                        qualifier_attribute_context,
       qplatq.attribute                      qualifier_attribute,
       qplatq.value_from                     qualifier_attribute_value,
       qpq.qualifier_grouping_no             qualifier_grouping_no,
       qpq.qualifier_precedence              qualifier_precedence,
       qpq.qualifier_datatype,
       qpq.qualifier_attr_value              setup_value_from,
       qpq.qualifier_attr_value_to           setup_value_to,
       qpl.automatic_flag,
       qpl.modifier_level_code,
       qpl.primary_uom_flag,
       qpl.arithmetic_operator               operand_calculation_code,
       qpl.operand                           operand_value,
       qpl.pricing_group_sequence,
       qph.list_type_code                    created_from_list_type,
       qph.rounding_factor,
       qpl.pricing_phase_id,
       qpl.price_break_type_code,
       qpl.incompatibility_grp_code,
       qpl.price_by_formula_id,
       qpl.product_precedence,
       qpl.list_line_no,
       'HQ'                                 qualifier_type
      ,QPL.BREAK_UOM_CODE /* Proration */
      ,QPL.BREAK_UOM_CONTEXT /* Proration */
      ,QPL.BREAK_UOM_ATTRIBUTE /* Proration */
FROM   --[julin/5007789]
       (SELECT /*+ dynamic_sampling(1) */ *
        FROM qp_npreq_lines_tmp
        WHERE processed_code IN (G_STS_LHS_NOT_FOUND, G_NO_LIST_PASSED)
        AND (nvl(validated_flag,G_NO) = G_NO or nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) = G_YES)) qplines,
       qp_npreq_line_attrs_tmp qplatq,
       qp_qualifiers qpq,
       qp_list_headers_b qph,
       qp_price_req_sources_v qprs,
       qp_npreq_line_attrs_tmp qplatpr,
       qp_pricing_attributes qpprod,
       qp_list_lines qpl
WHERE  qph.list_header_id = qpl.list_header_id
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
-- 3594459, context and attribute OR'd together
AND   (qpq.qualifier_context <> G_LIST_HEADER_CONTEXT --bug 2799670
       OR qpq.qualifier_attribute <> G_PRICELIST_ATTRIBUTE) --bug 2799670
AND    qpq.list_header_id = qph.list_header_id
AND   (qplines.price_flag = G_YES OR
       (qplines.price_flag = G_PHASE AND p_freeze_override_flag = G_YES))
AND   qplines.list_price_override_flag in ('N', 'O') -- po integration
AND    qpq.list_line_id = -1
AND   qpl.list_line_type_code in ('PLL','PMR','PBH')
AND   qpl.list_line_id   = qpprod.list_line_id
AND   qph.currency_code = qplines.currency_code
AND   qpl.modifier_level_code = qplines.line_type_code
AND   qph.active_flag = G_YES
AND   nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
       nvl(qph.start_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE))) and
       nvl(qph.end_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)))
AND   nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
       nvl(TRUNC(qpl.start_date_active), qplines.pricing_effective_date) and
       nvl(TRUNC(qpl.end_date_active),qplines.pricing_effective_date)
AND   nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
       nvl(qpq.start_date_active, qplines.pricing_effective_date) and
       nvl(qpq.end_date_active,qplines.pricing_effective_date)
AND   qpq.qualifier_context    = qplatq.context
AND   qpq.qualifier_attribute  = qplatq.attribute
AND   qpq.comparison_operator_code = G_OPERATOR_BETWEEN --[julin/5007789]
AND   qpq.active_flag = G_YES
and   ((qpq.qualifier_datatype IN (G_VARCHAR,G_DATE_X,G_DATE_Y) --[julin/5007789]
        and qplatq.value_from between qpq.qualifier_attr_value and qpq.qualifier_attr_value_to)
       or
       (qpq.qualifier_datatype = G_NUMERIC
        and qp_number.canonical_to_number(decode(qpq.qualifier_datatype,G_NUMERIC,qplatq.value_from,null))
            between qpq.qual_attr_value_from_number and qpq.qual_attr_value_to_number))
AND   qpprod.pricing_phase_id = p_pricing_phase_id
AND   qpprod.qualification_ind = QP_PREQ_GRP.G_YES_PROD_HDR_QUAL_IND
AND   qpprod.product_attribute_context = qplatpr.context
AND   qpprod.product_attribute = qplatpr.attribute
AND   qpprod.product_attr_value = qplatpr.value_from
AND   qpprod.excluder_flag = G_NO
AND   qpprod.list_header_id = qph.list_header_id --[julin/5007789]
AND   qplatq.line_index = qplines.line_index
AND   qplatpr.line_index = qplines.line_index --[julin/5007789]
AND   qplatpr.line_index = qplatq.line_index
AND   qph.source_system_code = qprs.source_system_code
AND   qplines.request_type_code   = qprs.request_type_code
AND   qplatq.attribute_type = 'QUALIFIER'
AND   qplatq.pricing_status_code = G_STATUS_UNCHANGED
AND   qplatpr.attribute_type='PRODUCT'
AND   qplatpr.pricing_status_code=G_STATUS_UNCHANGED
AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
AND  ((nvl(qplatq.DERIVED_QUALIFIER_FLAG,'N') ='N' )
  OR (qplatq.DERIVED_QUALIFIER_FLAG ='Y' AND qpq.QUALIFY_HIER_DESCENDENTS_FLAG ='Y')) -- Added for TCA
ORDER BY 4,2;

--[julin/4742368/4766135] Added QP_QUALIFIERS_N1 hint to prevent db from using N2
--[julin/5007789] Tuned query as follows:
-- 1. Performing line filter first.
-- 2. Performing qualifier filter before product filter
-- 3. Split into unions ('=', 'BETWEEN', 'NOT =') for better use of indexes
CURSOR l_prod_qual_cur_currency (p_pricing_phase_id NUMBER) IS
-- Product and Qualifier Only. No pricing
SELECT /*+ ORDERED USE_NL(QPLATQ QPQ QPH QPRS QPLATPR QPPROD QPL)
           INDEX(QPLATQ QP_PREQ_LINE_ATTRS_TMP_N1)
           INDEX(QPLAPR QP_PREQ_LINE_ATTRS_TMP_N1)
	   INDEX(QPPROD QP_PRICING_ATTRIBUTES_N5)
           INDEX(QPQ QP_QUALIFIERS_N4)
       l_prod_qual_cur_pl */
       qpl.list_header_id,
       qpl.list_line_id,
       qpl.list_line_type_code,
       qplatpr.line_index,
       qplatpr.applied_flag,
       qplatpr.attribute_level               product_attribute_level,
       qplatpr.attribute_type                product_attribute_type,
       qplatpr.context                       product_attribute_context,
       qplatpr.attribute                     product_attribute,
       qplatpr.value_from                    product_attr_value,
       qpprod.product_uom_code               product_uom_code,
       qpprod.excluder_flag,
       qplatq.context                        qualifier_attribute_context,
       qplatq.attribute                      qualifier_attribute,
       qplatq.value_from                     qualifier_attribute_value,
       qpq.qualifier_grouping_no             qualifier_grouping_no,
       qpq.qualifier_precedence              qualifier_precedence,
       qpq.qualifier_datatype,
       qpq.qualifier_attr_value              setup_value_from,
       qpq.qualifier_attr_value_to           setup_value_to,
       qpl.automatic_flag,
       qpl.modifier_level_code,
       qpl.primary_uom_flag,
       qpl.arithmetic_operator               operand_calculation_code,
       qpl.operand                           operand_value,
       qpl.pricing_group_sequence,
       qph.list_type_code                    created_from_list_type,
       qph.rounding_factor,
       qpl.pricing_phase_id,
       qpl.price_break_type_code,
       qpl.incompatibility_grp_code,
       qpl.price_by_formula_id,
       qpl.product_precedence,
       qpl.list_line_no,
       'HQ'                                  qualifier_type,
       qcdt.currency_detail_id,
       qcdt.currency_header_id,
       qcdt.selling_rounding_factor,
       qplines.currency_code                 order_currency,
       qplines.pricing_effective_date        pricing_effective_date,
       qph.currency_code                     base_currency_code
      ,QPL.BREAK_UOM_CODE /* Proration */
      ,QPL.BREAK_UOM_CONTEXT /* Proration */
      ,QPL.BREAK_UOM_ATTRIBUTE /* Proration */
FROM   --[julin/5007789]
       (SELECT /*+ dynamic_sampling(1) */ *
        FROM qp_npreq_lines_tmp
        WHERE processed_code IN (G_STS_LHS_NOT_FOUND, G_NO_LIST_PASSED)
        AND (nvl(validated_flag,G_NO) = G_NO or nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) = G_YES)) qplines,
       qp_npreq_line_attrs_tmp qplatq,
       qp_qualifiers qpq,
       qp_list_headers_b qph,
       qp_price_req_sources_v qprs,
       qp_npreq_line_attrs_tmp qplatpr,
       qp_pricing_attributes qpprod,
       qp_list_lines qpl,
       qp_currency_details qcdt
WHERE  qph.list_header_id = qpl.list_header_id
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
-- 3594459, context and attribute OR'd together
AND   (qpq.qualifier_context <> G_LIST_HEADER_CONTEXT --bug 2799670
       OR qpq.qualifier_attribute <> G_PRICELIST_ATTRIBUTE) --bug 2799670
AND    qpq.list_header_id = qph.list_header_id
AND   (qplines.price_flag = G_YES OR
       (qplines.price_flag = G_PHASE AND p_freeze_override_flag = G_YES))
AND   qplines.list_price_override_flag in ('N', 'O') -- po integration
AND   qpq.list_line_id = -1
AND   qpl.list_line_type_code in ('PLL','PMR','PBH')
AND   qpl.list_line_id   = qpprod.list_line_id
--AND   qph.currency_code = qplines.currency_code
AND   qph.currency_header_id = qcdt.currency_header_id
AND   qplines.currency_code = qcdt.to_currency_code
AND   nvl(qplines.pricing_effective_date,trunc(sysdate)) between
       nvl(trunc(qcdt.start_date_active),qplines.pricing_effective_date) and
       nvl(trunc(qcdt.end_date_active),qplines.pricing_effective_date)
AND (
        (qcdt.curr_attribute_context is null
         and not exists
             (select /*+ ORDERED use_nl(qcdt1) index(pa_tmp QP_PREQ_LINE_ATTRS_TMP_N1) */ 'x'   --[julin/5139512/4744915]
	       from qp_npreq_line_attrs_tmp pa_tmp,   qp_currency_details qcdt1
               where qcdt1.curr_attribute_context IS NOT NULL
		 and qcdt1.curr_attribute_context = pa_tmp.context
                 and qcdt1.curr_attribute = pa_tmp.attribute
                 and qcdt1.curr_attribute_value = pa_tmp.value_from
                 and qcdt1.curr_attribute_type = pa_tmp.attribute_typE
                 and qcdt1.to_currency_code = qcdt.to_currency_code
                 and qcdt1.currency_header_id = qcdt.currency_header_id
                 and pa_tmp.pricing_status_code = G_STATUS_UNCHANGED
                 and pa_tmp.line_index = qplines.line_index
                 and qplines.pricing_effective_date between
                     nvl(trunc(qcdt1.start_date_active),qplines.pricing_effective_date)
                     and nvl(trunc(qcdt1.end_date_active),qplines.pricing_effective_date)))
        OR
        (qcdt.curr_attribute_context is not null
         and qcdt.precedence =
             (select /*+ ORDERED use_nl(qcdt2) index(pa_tmp1 QP_PREQ_LINE_ATTRS_TMP_N1) */ min(qcdt2.precedence) --[julin/5139512/4744915]
	       from qp_npreq_line_attrs_tmp pa_tmp1, qp_currency_details qcdt2
               where qcdt2.curr_attribute_context IS NOT NULL
		 and qcdt2.curr_attribute_context = pa_tmp1.context
                 and qcdt2.curr_attribute = pa_tmp1.attribute
                 and qcdt2.curr_attribute_value = pa_tmp1.value_from
                 and qcdt2.curr_attribute_type = pa_tmp1.attribute_type
                 and qcdt2.to_currency_code = qcdt.to_currency_code
                 and qcdt2.currency_header_id = qcdt.currency_header_id
                 and pa_tmp1.pricing_status_code = G_STATUS_UNCHANGED
                 and pa_tmp1.line_index = qplines.line_index
                 and qplines.pricing_effective_date between
                     nvl(trunc(qcdt2.start_date_active),qplines.pricing_effective_date)
                     and nvl(trunc(qcdt2.end_date_active),qplines.pricing_effective_date)
             )))
AND   qpl.modifier_level_code = qplines.line_type_code
AND   qph.active_flag = G_YES
AND   nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
       nvl(qph.start_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE))) and
       nvl(qph.end_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)))
AND   nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
       nvl(TRUNC(qpl.start_date_active), qplines.pricing_effective_date) and
       nvl(TRUNC(qpl.end_date_active),qplines.pricing_effective_date)
AND   nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
       nvl(qpq.start_date_active, qplines.pricing_effective_date) and
       nvl(qpq.end_date_active,qplines.pricing_effective_date)
AND   qpq.qualifier_context    = qplatq.context
AND   qpq.qualifier_attribute  = qplatq.attribute
AND   qpq.comparison_operator_code = '=' --[julin/5007789]
AND   qplatq.value_from   = qpq.qualifier_attr_value --bug#1761272 Multiple NOT =, [julin/5007789]
AND   qpq.active_flag = G_YES
AND   qpprod.pricing_phase_id = p_pricing_phase_id
AND   qpprod.qualification_ind = QP_PREQ_GRP.G_YES_PROD_HDR_QUAL_IND
AND   qpprod.product_attribute_context = qplatpr.context
AND   qpprod.product_attribute = qplatpr.attribute
AND   qpprod.product_attr_value = qplatpr.value_from
AND   qpprod.excluder_flag = G_NO
AND   qpprod.list_header_id = qph.list_header_id --[julin/5007789]
AND   qplatq.line_index = qplines.line_index
AND   qplatpr.line_index = qplines.line_index --[julin/5007789]
AND   qplatpr.line_index = qplatq.line_index
AND   qph.source_system_code = qprs.source_system_code
AND   qplines.request_type_code   = qprs.request_type_code
AND   qplatq.attribute_type = 'QUALIFIER'
AND   qplatq.pricing_status_code = G_STATUS_UNCHANGED
AND   qplatpr.attribute_type='PRODUCT'
AND   qplatpr.pricing_status_code=G_STATUS_UNCHANGED
AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
AND  ((nvl(qplatq.DERIVED_QUALIFIER_FLAG,'N') ='N' )
  OR (qplatq.DERIVED_QUALIFIER_FLAG ='Y' AND qpq.QUALIFY_HIER_DESCENDENTS_FLAG ='Y')) -- Added for TCA
UNION ALL
SELECT /*+ ORDERED USE_NL(QPLATQ QPQ QPH QPRS QPLATPR QPPROD QPL)
           INDEX(QPLATQ QP_PREQ_LINE_ATTRS_TMP_N1)
           INDEX(QPLAPR QP_PREQ_LINE_ATTRS_TMP_N1)
	   INDEX(QPPROD QP_PRICING_ATTRIBUTES_N5)
           INDEX(QPQ QP_QUALIFIERS_N5)
       l_prod_qual_cur_pl */
       qpl.list_header_id,
       qpl.list_line_id,
       qpl.list_line_type_code,
       qplatpr.line_index,
       qplatpr.applied_flag,
       qplatpr.attribute_level               product_attribute_level,
       qplatpr.attribute_type                product_attribute_type,
       qplatpr.context                       product_attribute_context,
       qplatpr.attribute                     product_attribute,
       qplatpr.value_from                    product_attr_value,
       qpprod.product_uom_code               product_uom_code,
       qpprod.excluder_flag,
       qplatq.context                        qualifier_attribute_context,
       qplatq.attribute                      qualifier_attribute,
       qplatq.value_from                     qualifier_attribute_value,
       qpq.qualifier_grouping_no             qualifier_grouping_no,
       qpq.qualifier_precedence              qualifier_precedence,
       qpq.qualifier_datatype,
       qpq.qualifier_attr_value              setup_value_from,
       qpq.qualifier_attr_value_to           setup_value_to,
       qpl.automatic_flag,
       qpl.modifier_level_code,
       qpl.primary_uom_flag,
       qpl.arithmetic_operator               operand_calculation_code,
       qpl.operand                           operand_value,
       qpl.pricing_group_sequence,
       qph.list_type_code                    created_from_list_type,
       qph.rounding_factor,
       qpl.pricing_phase_id,
       qpl.price_break_type_code,
       qpl.incompatibility_grp_code,
       qpl.price_by_formula_id,
       qpl.product_precedence,
       qpl.list_line_no,
       'HQ'                                  qualifier_type,
       qcdt.currency_detail_id,
       qcdt.currency_header_id,
       qcdt.selling_rounding_factor,
       qplines.currency_code                 order_currency,
       qplines.pricing_effective_date        pricing_effective_date,
       qph.currency_code                     base_currency_code
      ,QPL.BREAK_UOM_CODE /* Proration */
      ,QPL.BREAK_UOM_CONTEXT /* Proration */
      ,QPL.BREAK_UOM_ATTRIBUTE /* Proration */
FROM   --[julin/5007789]
       (SELECT /*+ dynamic_sampling(1) */ *
        FROM qp_npreq_lines_tmp
        WHERE processed_code IN (G_STS_LHS_NOT_FOUND, G_NO_LIST_PASSED)
        AND (nvl(validated_flag,G_NO) = G_NO or nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) = G_YES)) qplines,
       qp_npreq_line_attrs_tmp qplatq,
       qp_qualifiers qpq,
       qp_list_headers_b qph,
       qp_price_req_sources_v qprs,
       qp_npreq_line_attrs_tmp qplatpr,
       qp_pricing_attributes qpprod,
       qp_list_lines qpl,
       qp_currency_details qcdt
WHERE  qph.list_header_id = qpl.list_header_id
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
-- 3594459, context and attribute OR'd together
AND   (qpq.qualifier_context <> G_LIST_HEADER_CONTEXT --bug 2799670
       OR qpq.qualifier_attribute <> G_PRICELIST_ATTRIBUTE) --bug 2799670
AND    qpq.list_header_id = qph.list_header_id
AND   (qplines.price_flag = G_YES OR
       (qplines.price_flag = G_PHASE AND p_freeze_override_flag = G_YES))
AND   qplines.list_price_override_flag in ('N', 'O') -- po integration
AND   qpq.list_line_id = -1
AND   qpl.list_line_type_code in ('PLL','PMR','PBH')
AND   qpl.list_line_id   = qpprod.list_line_id
--AND   qph.currency_code = qplines.currency_code
AND   qph.currency_header_id = qcdt.currency_header_id
AND   qplines.currency_code = qcdt.to_currency_code
AND   nvl(qplines.pricing_effective_date,trunc(sysdate)) between
       nvl(trunc(qcdt.start_date_active),qplines.pricing_effective_date) and
       nvl(trunc(qcdt.end_date_active),qplines.pricing_effective_date)
AND (
        (qcdt.curr_attribute_context is null
         and not exists
             (select /*+ ORDERED use_nl(qcdt1) index(pa_tmp QP_PREQ_LINE_ATTRS_TMP_N1) */ 'x'   --[julin/5139512/4744915]
	       from qp_npreq_line_attrs_tmp pa_tmp,   qp_currency_details qcdt1
               where qcdt1.curr_attribute_context IS NOT NULL
		 and qcdt1.curr_attribute_context = pa_tmp.context
                 and qcdt1.curr_attribute = pa_tmp.attribute
                 and qcdt1.curr_attribute_value = pa_tmp.value_from
                 and qcdt1.curr_attribute_type = pa_tmp.attribute_typE
                 and qcdt1.to_currency_code = qcdt.to_currency_code
                 and qcdt1.currency_header_id = qcdt.currency_header_id
                 and pa_tmp.pricing_status_code = G_STATUS_UNCHANGED
                 and pa_tmp.line_index = qplines.line_index
                 and qplines.pricing_effective_date between
                     nvl(trunc(qcdt1.start_date_active),qplines.pricing_effective_date)
                     and nvl(trunc(qcdt1.end_date_active),qplines.pricing_effective_date)))
        OR
        (qcdt.curr_attribute_context is not null
         and qcdt.precedence =
             (select /*+ ORDERED use_nl(qcdt2) index(pa_tmp1 QP_PREQ_LINE_ATTRS_TMP_N1) */ min(qcdt2.precedence) --[julin/5139512/4744915]
	       from qp_npreq_line_attrs_tmp pa_tmp1, qp_currency_details qcdt2
               where qcdt2.curr_attribute_context IS NOT NULL
		 and qcdt2.curr_attribute_context = pa_tmp1.context
                 and qcdt2.curr_attribute = pa_tmp1.attribute
                 and qcdt2.curr_attribute_value = pa_tmp1.value_from
                 and qcdt2.curr_attribute_type = pa_tmp1.attribute_type
                 and qcdt2.to_currency_code = qcdt.to_currency_code
                 and qcdt2.currency_header_id = qcdt.currency_header_id
                 and pa_tmp1.pricing_status_code = G_STATUS_UNCHANGED
                 and pa_tmp1.line_index = qplines.line_index
                 and qplines.pricing_effective_date between
                     nvl(trunc(qcdt2.start_date_active),qplines.pricing_effective_date)
                     and nvl(trunc(qcdt2.end_date_active),qplines.pricing_effective_date)
             )))
AND   qpl.modifier_level_code = qplines.line_type_code
AND   qph.active_flag = G_YES
AND   nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
       nvl(qph.start_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE))) and
       nvl(qph.end_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)))
AND   nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
       nvl(TRUNC(qpl.start_date_active), qplines.pricing_effective_date) and
       nvl(TRUNC(qpl.end_date_active),qplines.pricing_effective_date)
AND   nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
       nvl(qpq.start_date_active, qplines.pricing_effective_date) and
       nvl(qpq.end_date_active,qplines.pricing_effective_date)
AND   qpq.qualifier_context    = qplatq.context
AND   qpq.qualifier_attribute  = qplatq.attribute
AND   qpq.comparison_operator_code = 'NOT =' --[julin/5007789]
AND   qpq.active_flag = G_YES
AND   qplatq.value_from  <> qpq.qualifier_attr_value --[julin/5007789]
AND   qpprod.pricing_phase_id = p_pricing_phase_id
AND   qpprod.qualification_ind = QP_PREQ_GRP.G_YES_PROD_HDR_QUAL_IND
AND   qpprod.product_attribute_context = qplatpr.context
AND   qpprod.product_attribute = qplatpr.attribute
AND   qpprod.product_attr_value = qplatpr.value_from
AND   qpprod.excluder_flag = G_NO
AND   qpprod.list_header_id = qph.list_header_id --[julin/5007789]
AND   qplatq.line_index = qplines.line_index
AND   qplatpr.line_index = qplines.line_index --[julin/5007789]
AND   qplatpr.line_index = qplatq.line_index
AND   qph.source_system_code = qprs.source_system_code
AND   qplines.request_type_code   = qprs.request_type_code
AND   qplatq.attribute_type = 'QUALIFIER'
AND   qplatq.pricing_status_code = G_STATUS_UNCHANGED
AND   qplatpr.attribute_type='PRODUCT'
AND   qplatpr.pricing_status_code=G_STATUS_UNCHANGED
AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
AND  ((nvl(qplatq.DERIVED_QUALIFIER_FLAG,'N') ='N' )
  OR (qplatq.DERIVED_QUALIFIER_FLAG ='Y' AND qpq.QUALIFY_HIER_DESCENDENTS_FLAG ='Y')) -- Added for TCA
UNION ALL
SELECT /*+ ORDERED USE_NL(QPLATQ QPQ QPH QPRS QPLATPR QPPROD QPL)
           INDEX(QPLATQ QP_PREQ_LINE_ATTRS_TMP_N1)
           INDEX(QPLAPR QP_PREQ_LINE_ATTRS_TMP_N1)
	   INDEX(QPPROD QP_PRICING_ATTRIBUTES_N5)
           INDEX(QPQ QP_QUALIFIERS_N6)
       l_prod_qual_cur_pl */
       qpl.list_header_id,
       qpl.list_line_id,
       qpl.list_line_type_code,
       qplatpr.line_index,
       qplatpr.applied_flag,
       qplatpr.attribute_level               product_attribute_level,
       qplatpr.attribute_type                product_attribute_type,
       qplatpr.context                       product_attribute_context,
       qplatpr.attribute                     product_attribute,
       qplatpr.value_from                    product_attr_value,
       qpprod.product_uom_code               product_uom_code,
       qpprod.excluder_flag,
       qplatq.context                        qualifier_attribute_context,
       qplatq.attribute                      qualifier_attribute,
       qplatq.value_from                     qualifier_attribute_value,
       qpq.qualifier_grouping_no             qualifier_grouping_no,
       qpq.qualifier_precedence              qualifier_precedence,
       qpq.qualifier_datatype,
       qpq.qualifier_attr_value              setup_value_from,
       qpq.qualifier_attr_value_to           setup_value_to,
       qpl.automatic_flag,
       qpl.modifier_level_code,
       qpl.primary_uom_flag,
       qpl.arithmetic_operator               operand_calculation_code,
       qpl.operand                           operand_value,
       qpl.pricing_group_sequence,
       qph.list_type_code                    created_from_list_type,
       qph.rounding_factor,
       qpl.pricing_phase_id,
       qpl.price_break_type_code,
       qpl.incompatibility_grp_code,
       qpl.price_by_formula_id,
       qpl.product_precedence,
       qpl.list_line_no,
       'HQ'                                  qualifier_type,
       qcdt.currency_detail_id,
       qcdt.currency_header_id,
       qcdt.selling_rounding_factor,
       qplines.currency_code                 order_currency,
       qplines.pricing_effective_date        pricing_effective_date,
       qph.currency_code                     base_currency_code
      ,QPL.BREAK_UOM_CODE /* Proration */
      ,QPL.BREAK_UOM_CONTEXT /* Proration */
      ,QPL.BREAK_UOM_ATTRIBUTE /* Proration */
FROM   --[julin/5007789]
       (SELECT /*+ dynamic_sampling(1) */ *
        FROM qp_npreq_lines_tmp
        WHERE processed_code IN (G_STS_LHS_NOT_FOUND, G_NO_LIST_PASSED)
        AND (nvl(validated_flag,G_NO) = G_NO or nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) = G_YES)) qplines,
       qp_npreq_line_attrs_tmp qplatq,
       qp_qualifiers qpq,
       qp_list_headers_b qph,
       qp_price_req_sources_v qprs,
       qp_npreq_line_attrs_tmp qplatpr,
       qp_pricing_attributes qpprod,
       qp_list_lines qpl,
       qp_currency_details qcdt
WHERE  qph.list_header_id = qpl.list_header_id
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
-- 3594459, context and attribute OR'd together
AND   (qpq.qualifier_context <> G_LIST_HEADER_CONTEXT --bug 2799670
       OR qpq.qualifier_attribute <> G_PRICELIST_ATTRIBUTE) --bug 2799670
AND    qpq.list_header_id = qph.list_header_id
AND   (qplines.price_flag = G_YES OR
       (qplines.price_flag = G_PHASE AND p_freeze_override_flag = G_YES))
AND   qplines.list_price_override_flag in ('N', 'O') -- po integration
AND   qpq.list_line_id = -1
AND   qpl.list_line_type_code in ('PLL','PMR','PBH')
AND   qpl.list_line_id   = qpprod.list_line_id
--AND   qph.currency_code = qplines.currency_code
AND   qph.currency_header_id = qcdt.currency_header_id
AND   qplines.currency_code = qcdt.to_currency_code
AND   nvl(qplines.pricing_effective_date,trunc(sysdate)) between
       nvl(trunc(qcdt.start_date_active),qplines.pricing_effective_date) and
       nvl(trunc(qcdt.end_date_active),qplines.pricing_effective_date)
AND (
        (qcdt.curr_attribute_context is null
         and not exists
             (select /*+ ORDERED use_nl(qcdt1) index(pa_tmp QP_PREQ_LINE_ATTRS_TMP_N1) */ 'x'   --[julin/5139512/4744915]
	       from qp_npreq_line_attrs_tmp pa_tmp,   qp_currency_details qcdt1
               where qcdt1.curr_attribute_context IS NOT NULL
		 and qcdt1.curr_attribute_context = pa_tmp.context
                 and qcdt1.curr_attribute = pa_tmp.attribute
                 and qcdt1.curr_attribute_value = pa_tmp.value_from
                 and qcdt1.curr_attribute_type = pa_tmp.attribute_typE
                 and qcdt1.to_currency_code = qcdt.to_currency_code
                 and qcdt1.currency_header_id = qcdt.currency_header_id
                 and pa_tmp.pricing_status_code = G_STATUS_UNCHANGED
                 and pa_tmp.line_index = qplines.line_index
                 and qplines.pricing_effective_date between
                     nvl(trunc(qcdt1.start_date_active),qplines.pricing_effective_date)
                     and nvl(trunc(qcdt1.end_date_active),qplines.pricing_effective_date)))
        OR
        (qcdt.curr_attribute_context is not null
         and qcdt.precedence =
             (select /*+ ORDERED use_nl(qcdt2) index(pa_tmp1 QP_PREQ_LINE_ATTRS_TMP_N1) */ min(qcdt2.precedence) --[julin/5139512/4744915]
	       from qp_npreq_line_attrs_tmp pa_tmp1, qp_currency_details qcdt2
               where qcdt2.curr_attribute_context IS NOT NULL
		 and qcdt2.curr_attribute_context = pa_tmp1.context
                 and qcdt2.curr_attribute = pa_tmp1.attribute
                 and qcdt2.curr_attribute_value = pa_tmp1.value_from
                 and qcdt2.curr_attribute_type = pa_tmp1.attribute_type
                 and qcdt2.to_currency_code = qcdt.to_currency_code
                 and qcdt2.currency_header_id = qcdt.currency_header_id
                 and pa_tmp1.pricing_status_code = G_STATUS_UNCHANGED
                 and pa_tmp1.line_index = qplines.line_index
                 and qplines.pricing_effective_date between
                     nvl(trunc(qcdt2.start_date_active),qplines.pricing_effective_date)
                     and nvl(trunc(qcdt2.end_date_active),qplines.pricing_effective_date)
             )))
AND   qpl.modifier_level_code = qplines.line_type_code
AND   qph.active_flag = G_YES
AND   nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
       nvl(qph.start_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE))) and
       nvl(qph.end_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)))
AND   nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
       nvl(TRUNC(qpl.start_date_active), qplines.pricing_effective_date) and
       nvl(TRUNC(qpl.end_date_active),qplines.pricing_effective_date)
AND   nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
       nvl(qpq.start_date_active, qplines.pricing_effective_date) and
       nvl(qpq.end_date_active,qplines.pricing_effective_date)
AND   qpq.qualifier_context    = qplatq.context
AND   qpq.qualifier_attribute  = qplatq.attribute
AND   qpq.comparison_operator_code = G_OPERATOR_BETWEEN --[julin/5007789]
AND   qpq.active_flag = G_YES
and   ((qpq.qualifier_datatype IN (G_VARCHAR,G_DATE_X,G_DATE_Y) --[julin/5007789]
        and qplatq.value_from between qpq.qualifier_attr_value and qpq.qualifier_attr_value_to)
       or
       (qpq.qualifier_datatype = G_NUMERIC
        and qp_number.canonical_to_number(decode(qpq.qualifier_datatype,G_NUMERIC,qplatq.value_from,null))
            between qpq.qual_attr_value_from_number and qpq.qual_attr_value_to_number))
AND   qpprod.pricing_phase_id = p_pricing_phase_id
AND   qpprod.qualification_ind = QP_PREQ_GRP.G_YES_PROD_HDR_QUAL_IND
AND   qpprod.product_attribute_context = qplatpr.context
AND   qpprod.product_attribute = qplatpr.attribute
AND   qpprod.product_attr_value = qplatpr.value_from
AND   qpprod.excluder_flag = G_NO
AND   qpprod.list_header_id = qph.list_header_id --[julin/5007789]
AND   qplatq.line_index = qplines.line_index
AND   qplatpr.line_index = qplines.line_index --[julin/5007789]
AND   qplatpr.line_index = qplatq.line_index
AND   qph.source_system_code = qprs.source_system_code
AND   qplines.request_type_code   = qprs.request_type_code
AND   qplatq.attribute_type = 'QUALIFIER'
AND   qplatq.pricing_status_code = G_STATUS_UNCHANGED
AND   qplatpr.attribute_type='PRODUCT'
AND   qplatpr.pricing_status_code=G_STATUS_UNCHANGED
AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
AND  ((nvl(qplatq.DERIVED_QUALIFIER_FLAG,'N') ='N' )
  OR (qplatq.DERIVED_QUALIFIER_FLAG ='Y' AND qpq.QUALIFY_HIER_DESCENDENTS_FLAG ='Y')) -- Added for TCA
ORDER BY 4,2;

--Added INDEX(QPPROD QP_PRICING_ATTRIBUTES_N5) for 3259932
--[julin/4708044] added index(qplapr QP_PREQ_LINE_ATTRS_TMP_N1), use_nl(qprs)
CURSOR l_prod_qual_pric_cur(p_pricing_phase_id NUMBER) IS
--Product+Qualifiers+Pricing
SELECT /*+ ORDERED USE_NL(QPLATQ QPQ QPH QPRS QPLATPR QPPROD QPLATPC QPL)
           index(qplatpc QP_PREQ_LINE_ATTRS_TMP_N2)
           index(qplatq QP_PREQ_LINE_ATTRS_TMP_N1)
           INDEX(QPLAPR QP_PREQ_LINE_ATTRS_TMP_N1)
           INDEX(QPPROD QP_PRICING_ATTRIBUTES_N5)
           INDEX(QPQ QP_QUALIFIERS_N4)
           l_prod_qual_pric_cur_pl */
       qpl.list_header_id,
       qpl.list_line_id,
       qpl.list_line_type_code,
       qplatpr.line_index,
       qplatpr.applied_flag,
       qplatpr.attribute_level               product_attribute_level,
       qplatpr.attribute_type                product_attribute_type,
       qplatpr.context                       product_attribute_context,
       qplatpr.attribute                     product_attribute,
       qplatpr.value_from                    product_attr_value,
       qpprod.product_uom_code               product_uom_code,
       qpprod.excluder_flag,
       qplatq.context                        qualifier_attribute_context,
       qplatq.attribute                      qualifier_attribute,
       qplatq.value_from                     qualifier_attribute_value,
       qpq.qualifier_grouping_no             qualifier_grouping_no,
       qpq.qualifier_precedence              qualifier_precedence,
       qpq.qualifier_datatype,
       qpq.qualifier_attr_value              setup_value_from,
       qpq.qualifier_attr_value_to           setup_value_to,
       qpl.automatic_flag,
       qpl.modifier_level_code,
       qpl.primary_uom_flag,
       qpl.arithmetic_operator               operand_calculation_code,
       qpl.operand                           operand_value,
       qpl.pricing_group_sequence,
       qph.list_type_code                    created_from_list_type,
       qph.rounding_factor,
       qpl.pricing_phase_id,
       qpl.price_break_type_code,
       qpl.incompatibility_grp_code,
       qpl.price_by_formula_id,
       qpl.product_precedence,
       qpl.list_line_no,
       'HQ' QUALIFIER_TYPE,
       qplatpc.attribute_level               pricing_attribute_level,
       qplatpc.attribute_type                pricing_attribute_type,
       qplatpc.context                       pricing_attribute_context,
       qplatpc.attribute                     pricing_attribute,
       qplatpc.value_from                    pricing_attr_value,
       qpprod.pricing_attr_value_from        pricing_setup_value_from,
       qpprod.pricing_attr_value_to          pricing_setup_value_to,
       qpprod.comparison_operator_code       pricing_comparison_operator,
       qpprod.pricing_attribute_datatype     pricing_datatype
      ,QPL.BREAK_UOM_CODE /* Proration */
      ,QPL.BREAK_UOM_CONTEXT /* Proration */
      ,QPL.BREAK_UOM_ATTRIBUTE /* Proration */
FROM   --[julin/5007789]
       (SELECT /*+ dynamic_sampling(1) */ *
        FROM qp_npreq_lines_tmp
        WHERE processed_code IN (G_STS_LHS_NOT_FOUND, G_NO_LIST_PASSED)
        AND (nvl(validated_flag,G_NO) = G_NO or nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) = G_YES)) qplines,
       qp_npreq_line_attrs_tmp qplatq,
       qp_qualifiers qpq ,
       qp_list_headers_b qph,
       qp_price_req_sources_v qprs,
       qp_npreq_line_attrs_tmp qplatpr,
       qp_pricing_attributes qpprod ,
       qp_npreq_line_attrs_tmp qplatpc,
       qp_list_lines qpl
WHERE  qph.list_header_id = qpq.list_header_id
-- 3594459, context and attribute OR'd together
AND   (qpq.qualifier_context <> G_LIST_HEADER_CONTEXT --bug 2799670
       OR qpq.qualifier_attribute <> G_PRICELIST_ATTRIBUTE) --bug 2799670
AND   (qplines.price_flag = G_YES OR
       (qplines.price_flag = G_PHASE AND p_freeze_override_flag = G_YES))
AND   qplines.list_price_override_flag in ('N', 'O') -- po integration
AND   qph.list_header_id = qpl.list_header_id
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
AND   qpq.list_line_id = -1
AND   qpl.list_line_id   = qpprod.list_line_id
AND   qph.currency_code = qplines.currency_code
AND   qpl.modifier_level_code = qplines.line_type_code
AND   qph.active_flag = G_YES
AND   nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
       nvl(qph.start_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE))) and
       nvl(qph.end_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)))
AND   nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
       nvl(TRUNC(qpl.start_date_active), qplines.pricing_effective_date) and
       nvl(TRUNC(qpl.end_date_active),qplines.pricing_effective_date)
AND   nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
       nvl(qpq.start_date_active, qplines.pricing_effective_date) and
       nvl(qpq.end_date_active,qplines.pricing_effective_date)
AND   qpl.list_line_type_code in ('PLL','PMR','PBH')
AND   qpq.qualifier_context    = qplatq.context
AND   qpq.qualifier_attribute  = qplatq.attribute
AND   qpq.comparison_operator_code = '=' --[julin/5007789]
AND   qplatq.value_from   = qpq.qualifier_attr_value --bug#1761272 Multiple NOT =, [julin/5007789]
AND   qpq.active_flag = G_YES
AND   qpprod.pricing_phase_id = p_pricing_phase_id
AND   qpprod.qualification_ind = QP_PREQ_GRP.G_YES_PROD_PRIC_HDR_QUAL_IND
AND   qpprod.product_attribute_context = qplatpr.context
AND   qpprod.product_attribute = qplatpr.attribute
AND   qpprod.product_attr_value = qplatpr.value_from
AND   qpprod.excluder_flag = G_NO
AND   qpprod.list_header_id = qph.list_header_id --[julin/5007789]
AND   qpprod.pricing_attribute_context = qplatpc.context
AND   qpprod.pricing_attribute = qplatpc.attribute
AND   (qpprod.pricing_attr_value_from = qplatpc.value_from
        or qpprod.comparison_operator_code IN ('NOT =',G_OPERATOR_BETWEEN))  --	8463623
AND   qplatq.line_index = qplatpc.line_index
AND   qplatq.line_index = qplines.line_index
AND   qplatpc.line_index = qplatpr.line_index
AND   qph.source_system_code = qprs.source_system_code
AND   qplines.request_type_code   = qprs.request_type_code
AND   qplatpr.line_index = qplines.line_index --[julin/4708044]
AND   qplatpr.attribute_type='PRODUCT'
AND   qplatpr.pricing_status_code=G_STATUS_UNCHANGED
AND   qplatpc.attribute_type = 'PRICING'
AND   qplatpc.pricing_status_code = G_STATUS_UNCHANGED
AND   qplatq.attribute_type = 'QUALIFIER'
AND   qplatq.pricing_status_code = G_STATUS_UNCHANGED
--AND   qplatq.pricing_attr_flag = G_YES --[julin/4708044] wrong table, currently not reliable value, not used in index
AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
AND  ((nvl(qplatq.DERIVED_QUALIFIER_FLAG,'N') ='N' )
  OR (qplatq.DERIVED_QUALIFIER_FLAG ='Y' AND qpq.QUALIFY_HIER_DESCENDENTS_FLAG ='Y')) -- Added for TCA
UNION ALL
SELECT /*+ ORDERED USE_NL(QPLATQ QPQ QPH QPRS QPLATPR QPPROD QPLATPC QPL)
           index(qplatpc QP_PREQ_LINE_ATTRS_TMP_N2)
           index(qplatq QP_PREQ_LINE_ATTRS_TMP_N1)
           INDEX(QPLAPR QP_PREQ_LINE_ATTRS_TMP_N1)
           INDEX(QPPROD QP_PRICING_ATTRIBUTES_N5)
           INDEX(QPQ QP_QUALIFIERS_N5)
           l_prod_qual_pric_cur_pl */
       qpl.list_header_id,
       qpl.list_line_id,
       qpl.list_line_type_code,
       qplatpr.line_index,
       qplatpr.applied_flag,
       qplatpr.attribute_level               product_attribute_level,
       qplatpr.attribute_type                product_attribute_type,
       qplatpr.context                       product_attribute_context,
       qplatpr.attribute                     product_attribute,
       qplatpr.value_from                    product_attr_value,
       qpprod.product_uom_code               product_uom_code,
       qpprod.excluder_flag,
       qplatq.context                        qualifier_attribute_context,
       qplatq.attribute                      qualifier_attribute,
       qplatq.value_from                     qualifier_attribute_value,
       qpq.qualifier_grouping_no             qualifier_grouping_no,
       qpq.qualifier_precedence              qualifier_precedence,
       qpq.qualifier_datatype,
       qpq.qualifier_attr_value              setup_value_from,
       qpq.qualifier_attr_value_to           setup_value_to,
       qpl.automatic_flag,
       qpl.modifier_level_code,
       qpl.primary_uom_flag,
       qpl.arithmetic_operator               operand_calculation_code,
       qpl.operand                           operand_value,
       qpl.pricing_group_sequence,
       qph.list_type_code                    created_from_list_type,
       qph.rounding_factor,
       qpl.pricing_phase_id,
       qpl.price_break_type_code,
       qpl.incompatibility_grp_code,
       qpl.price_by_formula_id,
       qpl.product_precedence,
       qpl.list_line_no,
       'HQ' QUALIFIER_TYPE,
       qplatpc.attribute_level               pricing_attribute_level,
       qplatpc.attribute_type                pricing_attribute_type,
       qplatpc.context                       pricing_attribute_context,
       qplatpc.attribute                     pricing_attribute,
       qplatpc.value_from                    pricing_attr_value,
       qpprod.pricing_attr_value_from        pricing_setup_value_from,
       qpprod.pricing_attr_value_to          pricing_setup_value_to,
       qpprod.comparison_operator_code       pricing_comparison_operator,
       qpprod.pricing_attribute_datatype     pricing_datatype
      ,QPL.BREAK_UOM_CODE /* Proration */
      ,QPL.BREAK_UOM_CONTEXT /* Proration */
      ,QPL.BREAK_UOM_ATTRIBUTE /* Proration */
FROM   --[julin/5007789]
       (SELECT /*+ dynamic_sampling(1) */ *
        FROM qp_npreq_lines_tmp
        WHERE processed_code IN (G_STS_LHS_NOT_FOUND, G_NO_LIST_PASSED)
        AND (nvl(validated_flag,G_NO) = G_NO or nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) = G_YES)) qplines,
       qp_npreq_line_attrs_tmp qplatq,
       qp_qualifiers qpq ,
       qp_list_headers_b qph,
       qp_price_req_sources_v qprs,
       qp_npreq_line_attrs_tmp qplatpr,
       qp_pricing_attributes qpprod ,
       qp_npreq_line_attrs_tmp qplatpc,
       qp_list_lines qpl
WHERE  qph.list_header_id = qpq.list_header_id
-- 3594459, context and attribute OR'd together
AND   (qpq.qualifier_context <> G_LIST_HEADER_CONTEXT --bug 2799670
       OR qpq.qualifier_attribute <> G_PRICELIST_ATTRIBUTE) --bug 2799670
AND   (qplines.price_flag = G_YES OR
       (qplines.price_flag = G_PHASE AND p_freeze_override_flag = G_YES))
AND   qplines.list_price_override_flag in ('N', 'O') -- po integration
AND   qph.list_header_id = qpl.list_header_id
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
AND   qpq.list_line_id = -1
AND   qpl.list_line_id   = qpprod.list_line_id
AND   qph.currency_code = qplines.currency_code
AND   qpl.modifier_level_code = qplines.line_type_code
AND   qph.active_flag = G_YES
AND   nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
       nvl(qph.start_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE))) and
       nvl(qph.end_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)))
AND   nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
       nvl(TRUNC(qpl.start_date_active), qplines.pricing_effective_date) and
       nvl(TRUNC(qpl.end_date_active),qplines.pricing_effective_date)
AND   nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
       nvl(qpq.start_date_active, qplines.pricing_effective_date) and
       nvl(qpq.end_date_active,qplines.pricing_effective_date)
AND   qpl.list_line_type_code in ('PLL','PMR','PBH')
AND   qpq.qualifier_context    = qplatq.context
AND   qpq.qualifier_attribute  = qplatq.attribute
AND   qpq.comparison_operator_code = 'NOT =' --[julin/5007789]
AND   qpq.active_flag = G_YES
AND   qplatq.value_from  <> qpq.qualifier_attr_value --[julin/5007789]
AND   qpprod.pricing_phase_id = p_pricing_phase_id
AND   qpprod.qualification_ind = QP_PREQ_GRP.G_YES_PROD_PRIC_HDR_QUAL_IND
AND   qpprod.product_attribute_context = qplatpr.context
AND   qpprod.product_attribute = qplatpr.attribute
AND   qpprod.product_attr_value = qplatpr.value_from
AND   qpprod.excluder_flag = G_NO
AND   qpprod.list_header_id = qph.list_header_id --[julin/5007789]
AND   qpprod.pricing_attribute_context = qplatpc.context
AND   qpprod.pricing_attribute = qplatpc.attribute
AND   (qpprod.pricing_attr_value_from = qplatpc.value_from
        or qpprod.comparison_operator_code IN ('NOT =',G_OPERATOR_BETWEEN))  --	8463623
AND   qplatq.line_index = qplatpc.line_index
AND   qplatq.line_index = qplines.line_index
AND   qplatpc.line_index = qplatpr.line_index
AND   qph.source_system_code = qprs.source_system_code
AND   qplines.request_type_code   = qprs.request_type_code
AND   qplatpr.line_index = qplines.line_index --[julin/4708044]
AND   qplatpr.attribute_type='PRODUCT'
AND   qplatpr.pricing_status_code=G_STATUS_UNCHANGED
AND   qplatpc.attribute_type = 'PRICING'
AND   qplatpc.pricing_status_code = G_STATUS_UNCHANGED
AND   qplatq.attribute_type = 'QUALIFIER'
AND   qplatq.pricing_status_code = G_STATUS_UNCHANGED
--AND   qplatq.pricing_attr_flag = G_YES --[julin/4708044] wrong table, currently not reliable value, not used in index
AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
AND  ((nvl(qplatq.DERIVED_QUALIFIER_FLAG,'N') ='N' )
  OR (qplatq.DERIVED_QUALIFIER_FLAG ='Y' AND qpq.QUALIFY_HIER_DESCENDENTS_FLAG ='Y')) -- Added for TCA
UNION ALL
SELECT /*+ ORDERED USE_NL(QPLATQ QPQ QPH QPRS QPLATPR QPPROD QPLATPC QPL)
           index(qplatpc QP_PREQ_LINE_ATTRS_TMP_N2)
           index(qplatq QP_PREQ_LINE_ATTRS_TMP_N1)
           INDEX(QPLAPR QP_PREQ_LINE_ATTRS_TMP_N1)
           INDEX(QPPROD QP_PRICING_ATTRIBUTES_N5)
           INDEX(QPQ QP_QUALIFIERS_N6)
           l_prod_qual_pric_cur_pl */
       qpl.list_header_id,
       qpl.list_line_id,
       qpl.list_line_type_code,
       qplatpr.line_index,
       qplatpr.applied_flag,
       qplatpr.attribute_level               product_attribute_level,
       qplatpr.attribute_type                product_attribute_type,
       qplatpr.context                       product_attribute_context,
       qplatpr.attribute                     product_attribute,
       qplatpr.value_from                    product_attr_value,
       qpprod.product_uom_code               product_uom_code,
       qpprod.excluder_flag,
       qplatq.context                        qualifier_attribute_context,
       qplatq.attribute                      qualifier_attribute,
       qplatq.value_from                     qualifier_attribute_value,
       qpq.qualifier_grouping_no             qualifier_grouping_no,
       qpq.qualifier_precedence              qualifier_precedence,
       qpq.qualifier_datatype,
       qpq.qualifier_attr_value              setup_value_from,
       qpq.qualifier_attr_value_to           setup_value_to,
       qpl.automatic_flag,
       qpl.modifier_level_code,
       qpl.primary_uom_flag,
       qpl.arithmetic_operator               operand_calculation_code,
       qpl.operand                           operand_value,
       qpl.pricing_group_sequence,
       qph.list_type_code                    created_from_list_type,
       qph.rounding_factor,
       qpl.pricing_phase_id,
       qpl.price_break_type_code,
       qpl.incompatibility_grp_code,
       qpl.price_by_formula_id,
       qpl.product_precedence,
       qpl.list_line_no,
       'HQ' QUALIFIER_TYPE,
       qplatpc.attribute_level               pricing_attribute_level,
       qplatpc.attribute_type                pricing_attribute_type,
       qplatpc.context                       pricing_attribute_context,
       qplatpc.attribute                     pricing_attribute,
       qplatpc.value_from                    pricing_attr_value,
       qpprod.pricing_attr_value_from        pricing_setup_value_from,
       qpprod.pricing_attr_value_to          pricing_setup_value_to,
       qpprod.comparison_operator_code       pricing_comparison_operator,
       qpprod.pricing_attribute_datatype     pricing_datatype
      ,QPL.BREAK_UOM_CODE /* Proration */
      ,QPL.BREAK_UOM_CONTEXT /* Proration */
      ,QPL.BREAK_UOM_ATTRIBUTE /* Proration */
FROM   --[julin/5007789]
       (SELECT /*+ dynamic_sampling(1) */ *
        FROM qp_npreq_lines_tmp
        WHERE processed_code IN (G_STS_LHS_NOT_FOUND, G_NO_LIST_PASSED)
        AND (nvl(validated_flag,G_NO) = G_NO or nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) = G_YES)) qplines,
       qp_npreq_line_attrs_tmp qplatq,
       qp_qualifiers qpq ,
       qp_list_headers_b qph,
       qp_price_req_sources_v qprs,
       qp_npreq_line_attrs_tmp qplatpr,
       qp_pricing_attributes qpprod ,
       qp_npreq_line_attrs_tmp qplatpc,
       qp_list_lines qpl
WHERE  qph.list_header_id = qpq.list_header_id
-- 3594459, context and attribute OR'd together
AND   (qpq.qualifier_context <> G_LIST_HEADER_CONTEXT --bug 2799670
       OR qpq.qualifier_attribute <> G_PRICELIST_ATTRIBUTE) --bug 2799670
AND   (qplines.price_flag = G_YES OR
       (qplines.price_flag = G_PHASE AND p_freeze_override_flag = G_YES))
AND   qplines.list_price_override_flag in ('N', 'O') -- po integration
AND   qph.list_header_id = qpl.list_header_id
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
AND   qpq.list_line_id = -1
AND   qpl.list_line_id   = qpprod.list_line_id
AND   qph.currency_code = qplines.currency_code
AND   qpl.modifier_level_code = qplines.line_type_code
AND   qph.active_flag = G_YES
AND   nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
       nvl(qph.start_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE))) and
       nvl(qph.end_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)))
AND   nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
       nvl(TRUNC(qpl.start_date_active), qplines.pricing_effective_date) and
       nvl(TRUNC(qpl.end_date_active),qplines.pricing_effective_date)
AND   nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
       nvl(qpq.start_date_active, qplines.pricing_effective_date) and
       nvl(qpq.end_date_active,qplines.pricing_effective_date)
AND   qpl.list_line_type_code in ('PLL','PMR','PBH')
AND   qpq.qualifier_context    = qplatq.context
AND   qpq.qualifier_attribute  = qplatq.attribute
AND   qpq.comparison_operator_code = G_OPERATOR_BETWEEN --[julin/5007789]
AND   qpq.active_flag = G_YES
and   ((qpq.qualifier_datatype IN (G_VARCHAR,G_DATE_X,G_DATE_Y) --[julin/5007789]
        and qplatq.value_from between qpq.qualifier_attr_value and qpq.qualifier_attr_value_to)
       or
       (qpq.qualifier_datatype = G_NUMERIC
        and qp_number.canonical_to_number(decode(qpq.qualifier_datatype,G_NUMERIC,qplatq.value_from,null))
            between qpq.qual_attr_value_from_number and qpq.qual_attr_value_to_number))
AND   qpprod.pricing_phase_id = p_pricing_phase_id
AND   qpprod.qualification_ind = QP_PREQ_GRP.G_YES_PROD_PRIC_HDR_QUAL_IND
AND   qpprod.product_attribute_context = qplatpr.context
AND   qpprod.product_attribute = qplatpr.attribute
AND   qpprod.product_attr_value = qplatpr.value_from
AND   qpprod.excluder_flag = G_NO
AND   qpprod.list_header_id = qph.list_header_id --[julin/5007789]
AND   qpprod.pricing_attribute_context = qplatpc.context
AND   qpprod.pricing_attribute = qplatpc.attribute
AND   (qpprod.pricing_attr_value_from = qplatpc.value_from
        or qpprod.comparison_operator_code IN ('NOT =',G_OPERATOR_BETWEEN))  --	8463623
AND   qplatq.line_index = qplatpc.line_index
AND   qplatq.line_index = qplines.line_index
AND   qplatpc.line_index = qplatpr.line_index
AND   qph.source_system_code = qprs.source_system_code
AND   qplines.request_type_code   = qprs.request_type_code
AND   qplatpr.line_index = qplines.line_index --[julin/4708044]
AND   qplatpr.attribute_type='PRODUCT'
AND   qplatpr.pricing_status_code=G_STATUS_UNCHANGED
AND   qplatpc.attribute_type = 'PRICING'
AND   qplatpc.pricing_status_code = G_STATUS_UNCHANGED
AND   qplatq.attribute_type = 'QUALIFIER'
AND   qplatq.pricing_status_code = G_STATUS_UNCHANGED
--AND   qplatq.pricing_attr_flag = G_YES --[julin/4708044] wrong table, currently not reliable value, not used in index
AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
AND  ((nvl(qplatq.DERIVED_QUALIFIER_FLAG,'N') ='N' )
  OR (qplatq.DERIVED_QUALIFIER_FLAG ='Y' AND qpq.QUALIFY_HIER_DESCENDENTS_FLAG ='Y')) -- Added for TCA
ORDER BY 4,2;

--Added INDEX(QPPROD QP_PRICING_ATTRIBUTES_N5) for 3259932
--[julin/4708044] added index(qplapr QP_PREQ_LINE_ATTRS_TMP_N1), use_nl(qprs)
--[julin/5007789]
-- 1. Performing line filter first.
-- 2. Performing qualifier filter before product filter
-- 3. Split into unions ('=', 'BETWEEN', 'NOT =') for better use of indexes
CURSOR l_prod_qual_pric_cur_currency(p_pricing_phase_id NUMBER) IS
--Product+Qualifiers+Pricing
SELECT /*+ ORDERED USE_NL(QPLATQ QPQ QPH QPRS QPLATPR QPPROD QPLATPC QPL)
           index(qplatpc QP_PREQ_LINE_ATTRS_TMP_N2)
           index(qplatq QP_PREQ_LINE_ATTRS_TMP_N1)
           INDEX(QPLAPR QP_PREQ_LINE_ATTRS_TMP_N1)
           INDEX(QPPROD QP_PRICING_ATTRIBUTES_N5)
           INDEX(QPQ QP_QUALIFIERS_N4)
           l_prod_qual_pric_cur_pl */
       qpl.list_header_id,
       qpl.list_line_id,
       qpl.list_line_type_code,
       qplatpr.line_index,
       qplatpr.applied_flag,
       qplatpr.attribute_level               product_attribute_level,
       qplatpr.attribute_type                product_attribute_type,
       qplatpr.context                       product_attribute_context,
       qplatpr.attribute                     product_attribute,
       qplatpr.value_from                    product_attr_value,
       qpprod.product_uom_code               product_uom_code,
       qpprod.excluder_flag,
       qplatq.context                        qualifier_attribute_context,
       qplatq.attribute                      qualifier_attribute,
       qplatq.value_from                     qualifier_attribute_value,
       qpq.qualifier_grouping_no             qualifier_grouping_no,
       qpq.qualifier_precedence              qualifier_precedence,
       qpq.qualifier_datatype,
       qpq.qualifier_attr_value              setup_value_from,
       qpq.qualifier_attr_value_to           setup_value_to,
       qpl.automatic_flag,
       qpl.modifier_level_code,
       qpl.primary_uom_flag,
       qpl.arithmetic_operator               operand_calculation_code,
       qpl.operand                           operand_value,
       qpl.pricing_group_sequence,
       qph.list_type_code                    created_from_list_type,
       qph.rounding_factor,
       qpl.pricing_phase_id,
       qpl.price_break_type_code,
       qpl.incompatibility_grp_code,
       qpl.price_by_formula_id,
       qpl.product_precedence,
       qpl.list_line_no,
       'HQ' QUALIFIER_TYPE,
       qplatpc.attribute_level               pricing_attribute_level,
       qplatpc.attribute_type                pricing_attribute_type,
       qplatpc.context                       pricing_attribute_context,
       qplatpc.attribute                     pricing_attribute,
       qplatpc.value_from                    pricing_attr_value,
       qpprod.pricing_attr_value_from        pricing_setup_value_from,
       qpprod.pricing_attr_value_to          pricing_setup_value_to,
       qpprod.comparison_operator_code       pricing_comparison_operator,
       qpprod.pricing_attribute_datatype     pricing_datatype,
       qcdt.currency_detail_id,
       qcdt.currency_header_id,
       qcdt.selling_rounding_factor,
       qplines.currency_code                 order_currency,
       qplines.pricing_effective_date        pricing_effective_date,
       qph.currency_code                     base_currency_code
      ,QPL.BREAK_UOM_CODE /* Proration */
      ,QPL.BREAK_UOM_CONTEXT /* Proration */
      ,QPL.BREAK_UOM_ATTRIBUTE /* Proration */
FROM   --[julin/5007789]
       (SELECT /*+ dynamic_sampling(1) */ *
        FROM qp_npreq_lines_tmp
        WHERE processed_code IN (G_STS_LHS_NOT_FOUND, G_NO_LIST_PASSED)
        AND (nvl(validated_flag,G_NO) = G_NO or nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) = G_YES)) qplines,
       qp_npreq_line_attrs_tmp qplatq,
       qp_qualifiers qpq ,
       qp_list_headers_b qph,
       qp_price_req_sources_v qprs,
       qp_npreq_line_attrs_tmp qplatpr,
       qp_pricing_attributes qpprod ,
       qp_npreq_line_attrs_tmp qplatpc,
       qp_list_lines qpl,
       qp_currency_details qcdt
WHERE  qph.list_header_id = qpq.list_header_id
-- 3594459, context and attribute OR'd together
AND   (qpq.qualifier_context <> G_LIST_HEADER_CONTEXT --bug 2799670
       OR qpq.qualifier_attribute <> G_PRICELIST_ATTRIBUTE) --bug 2799670
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
AND   (qplines.price_flag = G_YES OR
       (qplines.price_flag = G_PHASE AND p_freeze_override_flag = G_YES))
AND   qplines.list_price_override_flag in ('N', 'O') -- po integration
AND    qph.list_header_id = qpl.list_header_id
AND    qpq.list_line_id = -1
AND    qpl.list_line_id   = qpprod.list_line_id
--AND   qph.currency_code = qplines.currency_code
AND qph.currency_header_id = qcdt.currency_header_id
AND qplines.currency_code = qcdt.to_currency_code
AND qplines.pricing_effective_date between
    nvl(trunc(qcdt.start_date_active),qplines.pricing_effective_date)
    and nvl(trunc(qcdt.end_date_active),qplines.pricing_effective_date)
AND (
        (qcdt.curr_attribute_context is null
         and not exists
             (select /*+ ORDERED use_nl(qcdt1) index(pa_tmp QP_PREQ_LINE_ATTRS_TMP_N1) */ 'x'   --[julin/5139512/4744915]
	       from qp_npreq_line_attrs_tmp pa_tmp,   qp_currency_details qcdt1
               where qcdt1.curr_attribute_context IS NOT NULL
		 and qcdt1.curr_attribute_context = pa_tmp.context
                 and qcdt1.curr_attribute = pa_tmp.attribute
                 and qcdt1.curr_attribute_value = pa_tmp.value_from
                 and qcdt1.curr_attribute_type = pa_tmp.attribute_typE
                 and qcdt1.to_currency_code = qcdt.to_currency_code
                 and qcdt1.currency_header_id = qcdt.currency_header_id
                 and pa_tmp.pricing_status_code = G_STATUS_UNCHANGED
                 and pa_tmp.line_index = qplines.line_index
                 and qplines.pricing_effective_date between
                     nvl(trunc(qcdt1.start_date_active),qplines.pricing_effective_date)
                     and nvl(trunc(qcdt1.end_date_active),qplines.pricing_effective_date)))
        OR
        (qcdt.curr_attribute_context is not null
         and qcdt.precedence =
             (select /*+ ORDERED use_nl(qcdt2) index(pa_tmp1 QP_PREQ_LINE_ATTRS_TMP_N1) */ min(qcdt2.precedence) --[julin/5139512/4744915]
	       from qp_npreq_line_attrs_tmp pa_tmp1, qp_currency_details qcdt2
               where qcdt2.curr_attribute_context IS NOT NULL
		 and qcdt2.curr_attribute_context = pa_tmp1.context
                 and qcdt2.curr_attribute = pa_tmp1.attribute
                 and qcdt2.curr_attribute_value = pa_tmp1.value_from
                 and qcdt2.curr_attribute_type = pa_tmp1.attribute_type
                 and qcdt2.to_currency_code = qcdt.to_currency_code
                 and qcdt2.currency_header_id = qcdt.currency_header_id
                 and pa_tmp1.pricing_status_code = G_STATUS_UNCHANGED
                 and pa_tmp1.line_index = qplines.line_index
                 and qplines.pricing_effective_date between
                     nvl(trunc(qcdt2.start_date_active),qplines.pricing_effective_date)
                     and nvl(trunc(qcdt2.end_date_active),qplines.pricing_effective_date)
             )))
AND qpl.modifier_level_code = qplines.line_type_code
AND qph.active_flag = G_YES
AND nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
       nvl(qph.start_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE))) and
       nvl(qph.end_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)))
AND nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
      nvl(TRUNC(qpl.start_date_active), qplines.pricing_effective_date) and
      nvl(TRUNC(qpl.end_date_active),qplines.pricing_effective_date)
AND nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
      nvl(qpq.start_date_active, qplines.pricing_effective_date) and
      nvl(qpq.end_date_active,qplines.pricing_effective_date)
AND qpl.list_line_type_code in ('PLL','PMR','PBH')
AND qpq.qualifier_context    = qplatq.context
AND qpq.qualifier_attribute  = qplatq.attribute
AND qpq.comparison_operator_code = '=' --[julin/5007789]
AND qplatq.value_from   = qpq.qualifier_attr_value --bug#1761272 Multiple NOT =, [julin/5007789]
AND qpq.active_flag = G_YES
AND qpprod.pricing_phase_id = p_pricing_phase_id
AND qpprod.qualification_ind = QP_PREQ_GRP.G_YES_PROD_PRIC_HDR_QUAL_IND
AND qpprod.product_attribute_context = qplatpr.context
AND qpprod.product_attribute = qplatpr.attribute
AND qpprod.product_attr_value = qplatpr.value_from
AND qpprod.excluder_flag = G_NO
AND qpprod.list_header_id = qph.list_header_id --[julin/5007789]
AND qpprod.pricing_attribute_context = qplatpc.context
AND qpprod.pricing_attribute = qplatpc.attribute
AND (qpprod.pricing_attr_value_from = qplatpc.value_from
      or qpprod.comparison_operator_code IN ('NOT =',G_OPERATOR_BETWEEN))  --	8463623
AND qplatq.line_index = qplatpc.line_index
AND qplatq.line_index = qplines.line_index
AND qplatpc.line_index = qplatpr.line_index
AND qph.source_system_code = qprs.source_system_code
AND qplines.request_type_code   = qprs.request_type_code
AND qplatpr.line_index = qplines.line_index --[julin/4708044]
AND qplatpr.attribute_type='PRODUCT'
AND qplatpr.pricing_status_code=G_STATUS_UNCHANGED
AND qplatpc.attribute_type = 'PRICING'
AND qplatpc.pricing_status_code = G_STATUS_UNCHANGED
AND qplatq.attribute_type = 'QUALIFIER'
AND qplatq.pricing_status_code = G_STATUS_UNCHANGED
--AND   qplatq.pricing_attr_flag = G_YES --[julin/4708044] wrong table, currently not reliable value, not used in index
AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
AND  ((nvl(qplatq.DERIVED_QUALIFIER_FLAG,'N') ='N' )
  OR (qplatq.DERIVED_QUALIFIER_FLAG ='Y' AND qpq.QUALIFY_HIER_DESCENDENTS_FLAG ='Y')) -- Added for TCA
UNION ALL
SELECT /*+ ORDERED USE_NL(QPLATQ QPQ QPH QPRS QPLATPR QPPROD QPLATPC QPL)
           index(qplatpc QP_PREQ_LINE_ATTRS_TMP_N2)
           index(qplatq QP_PREQ_LINE_ATTRS_TMP_N1)
           INDEX(QPLAPR QP_PREQ_LINE_ATTRS_TMP_N1)
           INDEX(QPPROD QP_PRICING_ATTRIBUTES_N5)
           INDEX(QPQ QP_QUALIFIERS_N5)
           l_prod_qual_pric_cur_pl */
       qpl.list_header_id,
       qpl.list_line_id,
       qpl.list_line_type_code,
       qplatpr.line_index,
       qplatpr.applied_flag,
       qplatpr.attribute_level               product_attribute_level,
       qplatpr.attribute_type                product_attribute_type,
       qplatpr.context                       product_attribute_context,
       qplatpr.attribute                     product_attribute,
       qplatpr.value_from                    product_attr_value,
       qpprod.product_uom_code               product_uom_code,
       qpprod.excluder_flag,
       qplatq.context                        qualifier_attribute_context,
       qplatq.attribute                      qualifier_attribute,
       qplatq.value_from                     qualifier_attribute_value,
       qpq.qualifier_grouping_no             qualifier_grouping_no,
       qpq.qualifier_precedence              qualifier_precedence,
       qpq.qualifier_datatype,
       qpq.qualifier_attr_value              setup_value_from,
       qpq.qualifier_attr_value_to           setup_value_to,
       qpl.automatic_flag,
       qpl.modifier_level_code,
       qpl.primary_uom_flag,
       qpl.arithmetic_operator               operand_calculation_code,
       qpl.operand                           operand_value,
       qpl.pricing_group_sequence,
       qph.list_type_code                    created_from_list_type,
       qph.rounding_factor,
       qpl.pricing_phase_id,
       qpl.price_break_type_code,
       qpl.incompatibility_grp_code,
       qpl.price_by_formula_id,
       qpl.product_precedence,
       qpl.list_line_no,
       'HQ' QUALIFIER_TYPE,
       qplatpc.attribute_level               pricing_attribute_level,
       qplatpc.attribute_type                pricing_attribute_type,
       qplatpc.context                       pricing_attribute_context,
       qplatpc.attribute                     pricing_attribute,
       qplatpc.value_from                    pricing_attr_value,
       qpprod.pricing_attr_value_from        pricing_setup_value_from,
       qpprod.pricing_attr_value_to          pricing_setup_value_to,
       qpprod.comparison_operator_code       pricing_comparison_operator,
       qpprod.pricing_attribute_datatype     pricing_datatype,
       qcdt.currency_detail_id,
       qcdt.currency_header_id,
       qcdt.selling_rounding_factor,
       qplines.currency_code                 order_currency,
       qplines.pricing_effective_date        pricing_effective_date,
       qph.currency_code                     base_currency_code
      ,QPL.BREAK_UOM_CODE /* Proration */
      ,QPL.BREAK_UOM_CONTEXT /* Proration */
      ,QPL.BREAK_UOM_ATTRIBUTE /* Proration */
FROM   --[julin/5007789]
       (SELECT /*+ dynamic_sampling(1) */ *
        FROM qp_npreq_lines_tmp
        WHERE processed_code IN (G_STS_LHS_NOT_FOUND, G_NO_LIST_PASSED)
        AND (nvl(validated_flag,G_NO) = G_NO or nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) = G_YES)) qplines,
       qp_npreq_line_attrs_tmp qplatq,
       qp_qualifiers qpq ,
       qp_list_headers_b qph,
       qp_price_req_sources_v qprs,
       qp_npreq_line_attrs_tmp qplatpr,
       qp_pricing_attributes qpprod ,
       qp_npreq_line_attrs_tmp qplatpc,
       qp_list_lines qpl,
       qp_currency_details qcdt
WHERE  qph.list_header_id = qpq.list_header_id
-- 3594459, context and attribute OR'd together
AND   (qpq.qualifier_context <> G_LIST_HEADER_CONTEXT --bug 2799670
       OR qpq.qualifier_attribute <> G_PRICELIST_ATTRIBUTE) --bug 2799670
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
AND   (qplines.price_flag = G_YES OR
       (qplines.price_flag = G_PHASE AND p_freeze_override_flag = G_YES))
AND   qplines.list_price_override_flag in ('N', 'O') -- po integration
AND    qph.list_header_id = qpl.list_header_id
AND    qpq.list_line_id = -1
AND    qpl.list_line_id   = qpprod.list_line_id
--AND   qph.currency_code = qplines.currency_code
AND qph.currency_header_id = qcdt.currency_header_id
AND qplines.currency_code = qcdt.to_currency_code
AND qplines.pricing_effective_date between
    nvl(trunc(qcdt.start_date_active),qplines.pricing_effective_date)
    and nvl(trunc(qcdt.end_date_active),qplines.pricing_effective_date)
AND (
        (qcdt.curr_attribute_context is null
         and not exists
             (select /*+ ORDERED use_nl(qcdt1) index(pa_tmp QP_PREQ_LINE_ATTRS_TMP_N1) */ 'x'   --[julin/5139512/4744915]
	       from qp_npreq_line_attrs_tmp pa_tmp,   qp_currency_details qcdt1
               where qcdt1.curr_attribute_context IS NOT NULL
		 and qcdt1.curr_attribute_context = pa_tmp.context
                 and qcdt1.curr_attribute = pa_tmp.attribute
                 and qcdt1.curr_attribute_value = pa_tmp.value_from
                 and qcdt1.curr_attribute_type = pa_tmp.attribute_typE
                 and qcdt1.to_currency_code = qcdt.to_currency_code
                 and qcdt1.currency_header_id = qcdt.currency_header_id
                 and pa_tmp.pricing_status_code = G_STATUS_UNCHANGED
                 and pa_tmp.line_index = qplines.line_index
                 and qplines.pricing_effective_date between
                     nvl(trunc(qcdt1.start_date_active),qplines.pricing_effective_date)
                     and nvl(trunc(qcdt1.end_date_active),qplines.pricing_effective_date)))
        OR
        (qcdt.curr_attribute_context is not null
         and qcdt.precedence =
             (select /*+ ORDERED use_nl(qcdt2) index(pa_tmp1 QP_PREQ_LINE_ATTRS_TMP_N1) */ min(qcdt2.precedence) --[julin/5139512/4744915]
	       from qp_npreq_line_attrs_tmp pa_tmp1, qp_currency_details qcdt2
               where qcdt2.curr_attribute_context IS NOT NULL
		 and qcdt2.curr_attribute_context = pa_tmp1.context
                 and qcdt2.curr_attribute = pa_tmp1.attribute
                 and qcdt2.curr_attribute_value = pa_tmp1.value_from
                 and qcdt2.curr_attribute_type = pa_tmp1.attribute_type
                 and qcdt2.to_currency_code = qcdt.to_currency_code
                 and qcdt2.currency_header_id = qcdt.currency_header_id
                 and pa_tmp1.pricing_status_code = G_STATUS_UNCHANGED
                 and pa_tmp1.line_index = qplines.line_index
                 and qplines.pricing_effective_date between
                     nvl(trunc(qcdt2.start_date_active),qplines.pricing_effective_date)
                     and nvl(trunc(qcdt2.end_date_active),qplines.pricing_effective_date)
             )))
AND qpl.modifier_level_code = qplines.line_type_code
AND qph.active_flag = G_YES
AND nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
       nvl(qph.start_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE))) and
       nvl(qph.end_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)))
AND nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
      nvl(TRUNC(qpl.start_date_active), qplines.pricing_effective_date) and
      nvl(TRUNC(qpl.end_date_active),qplines.pricing_effective_date)
AND nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
      nvl(qpq.start_date_active, qplines.pricing_effective_date) and
      nvl(qpq.end_date_active,qplines.pricing_effective_date)
AND qpl.list_line_type_code in ('PLL','PMR','PBH')
AND qpq.qualifier_context    = qplatq.context
AND qpq.qualifier_attribute  = qplatq.attribute
AND qpq.comparison_operator_code = 'NOT =' --[julin/5007789]
AND qpq.active_flag = G_YES
AND qplatq.value_from  <> qpq.qualifier_attr_value --[julin/5007789]
AND qpprod.pricing_phase_id = p_pricing_phase_id
AND qpprod.qualification_ind = QP_PREQ_GRP.G_YES_PROD_PRIC_HDR_QUAL_IND
AND qpprod.product_attribute_context = qplatpr.context
AND qpprod.product_attribute = qplatpr.attribute
AND qpprod.product_attr_value = qplatpr.value_from
AND qpprod.excluder_flag = G_NO
AND qpprod.list_header_id = qph.list_header_id --[julin/5007789]
AND qpprod.pricing_attribute_context = qplatpc.context
AND qpprod.pricing_attribute = qplatpc.attribute
AND (qpprod.pricing_attr_value_from = qplatpc.value_from
      or qpprod.comparison_operator_code IN ('NOT =',G_OPERATOR_BETWEEN))  --	8463623
AND qplatq.line_index = qplatpc.line_index
AND qplatq.line_index = qplines.line_index
AND qplatpc.line_index = qplatpr.line_index
AND qph.source_system_code = qprs.source_system_code
AND qplines.request_type_code   = qprs.request_type_code
AND qplatpr.line_index = qplines.line_index --[julin/4708044]
AND qplatpr.attribute_type='PRODUCT'
AND qplatpr.pricing_status_code=G_STATUS_UNCHANGED
AND qplatpc.attribute_type = 'PRICING'
AND qplatpc.pricing_status_code = G_STATUS_UNCHANGED
AND qplatq.attribute_type = 'QUALIFIER'
AND qplatq.pricing_status_code = G_STATUS_UNCHANGED
--AND   qplatq.pricing_attr_flag = G_YES --[julin/4708044] wrong table, currently not reliable value, not used in index
AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
AND  ((nvl(qplatq.DERIVED_QUALIFIER_FLAG,'N') ='N' )
  OR (qplatq.DERIVED_QUALIFIER_FLAG ='Y' AND qpq.QUALIFY_HIER_DESCENDENTS_FLAG ='Y')) -- Added for TCA
UNION ALL
SELECT /*+ ORDERED USE_NL(QPLATQ QPQ QPH QPRS QPLATPR QPPROD QPLATPC QPL)
           index(qplatpc QP_PREQ_LINE_ATTRS_TMP_N2)
           index(qplatq QP_PREQ_LINE_ATTRS_TMP_N1)
           INDEX(QPLAPR QP_PREQ_LINE_ATTRS_TMP_N1)
           INDEX(QPPROD QP_PRICING_ATTRIBUTES_N5)
           INDEX(QPQ QP_QUALIFIERS_N6)
           l_prod_qual_pric_cur_pl */
       qpl.list_header_id,
       qpl.list_line_id,
       qpl.list_line_type_code,
       qplatpr.line_index,
       qplatpr.applied_flag,
       qplatpr.attribute_level               product_attribute_level,
       qplatpr.attribute_type                product_attribute_type,
       qplatpr.context                       product_attribute_context,
       qplatpr.attribute                     product_attribute,
       qplatpr.value_from                    product_attr_value,
       qpprod.product_uom_code               product_uom_code,
       qpprod.excluder_flag,
       qplatq.context                        qualifier_attribute_context,
       qplatq.attribute                      qualifier_attribute,
       qplatq.value_from                     qualifier_attribute_value,
       qpq.qualifier_grouping_no             qualifier_grouping_no,
       qpq.qualifier_precedence              qualifier_precedence,
       qpq.qualifier_datatype,
       qpq.qualifier_attr_value              setup_value_from,
       qpq.qualifier_attr_value_to           setup_value_to,
       qpl.automatic_flag,
       qpl.modifier_level_code,
       qpl.primary_uom_flag,
       qpl.arithmetic_operator               operand_calculation_code,
       qpl.operand                           operand_value,
       qpl.pricing_group_sequence,
       qph.list_type_code                    created_from_list_type,
       qph.rounding_factor,
       qpl.pricing_phase_id,
       qpl.price_break_type_code,
       qpl.incompatibility_grp_code,
       qpl.price_by_formula_id,
       qpl.product_precedence,
       qpl.list_line_no,
       'HQ' QUALIFIER_TYPE,
       qplatpc.attribute_level               pricing_attribute_level,
       qplatpc.attribute_type                pricing_attribute_type,
       qplatpc.context                       pricing_attribute_context,
       qplatpc.attribute                     pricing_attribute,
       qplatpc.value_from                    pricing_attr_value,
       qpprod.pricing_attr_value_from        pricing_setup_value_from,
       qpprod.pricing_attr_value_to          pricing_setup_value_to,
       qpprod.comparison_operator_code       pricing_comparison_operator,
       qpprod.pricing_attribute_datatype     pricing_datatype,
       qcdt.currency_detail_id,
       qcdt.currency_header_id,
       qcdt.selling_rounding_factor,
       qplines.currency_code                 order_currency,
       qplines.pricing_effective_date        pricing_effective_date,
       qph.currency_code                     base_currency_code
      ,QPL.BREAK_UOM_CODE /* Proration */
      ,QPL.BREAK_UOM_CONTEXT /* Proration */
      ,QPL.BREAK_UOM_ATTRIBUTE /* Proration */
FROM   --[julin/5007789]
       (SELECT /*+ dynamic_sampling(1) */ *
        FROM qp_npreq_lines_tmp
        WHERE processed_code IN (G_STS_LHS_NOT_FOUND, G_NO_LIST_PASSED)
        AND (nvl(validated_flag,G_NO) = G_NO or nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) = G_YES)) qplines,
       qp_npreq_line_attrs_tmp qplatq,
       qp_qualifiers qpq ,
       qp_list_headers_b qph,
       qp_price_req_sources_v qprs,
       qp_npreq_line_attrs_tmp qplatpr,
       qp_pricing_attributes qpprod ,
       qp_npreq_line_attrs_tmp qplatpc,
       qp_list_lines qpl,
       qp_currency_details qcdt
WHERE  qph.list_header_id = qpq.list_header_id
-- 3594459, context and attribute OR'd together
AND   (qpq.qualifier_context <> G_LIST_HEADER_CONTEXT --bug 2799670
       OR qpq.qualifier_attribute <> G_PRICELIST_ATTRIBUTE) --bug 2799670
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
AND   (qplines.price_flag = G_YES OR
       (qplines.price_flag = G_PHASE AND p_freeze_override_flag = G_YES))
AND   qplines.list_price_override_flag in ('N', 'O') -- po integration
AND    qph.list_header_id = qpl.list_header_id
AND    qpq.list_line_id = -1
AND    qpl.list_line_id   = qpprod.list_line_id
--AND   qph.currency_code = qplines.currency_code
AND qph.currency_header_id = qcdt.currency_header_id
AND qplines.currency_code = qcdt.to_currency_code
AND qplines.pricing_effective_date between
    nvl(trunc(qcdt.start_date_active),qplines.pricing_effective_date)
    and nvl(trunc(qcdt.end_date_active),qplines.pricing_effective_date)
AND (
        (qcdt.curr_attribute_context is null
         and not exists
             (select /*+ ORDERED use_nl(qcdt1) index(pa_tmp QP_PREQ_LINE_ATTRS_TMP_N1) */ 'x'   --[julin/5139512/4744915]
	       from qp_npreq_line_attrs_tmp pa_tmp,   qp_currency_details qcdt1
               where qcdt1.curr_attribute_context IS NOT NULL
		 and qcdt1.curr_attribute_context = pa_tmp.context
                 and qcdt1.curr_attribute = pa_tmp.attribute
                 and qcdt1.curr_attribute_value = pa_tmp.value_from
                 and qcdt1.curr_attribute_type = pa_tmp.attribute_typE
                 and qcdt1.to_currency_code = qcdt.to_currency_code
                 and qcdt1.currency_header_id = qcdt.currency_header_id
                 and pa_tmp.pricing_status_code = G_STATUS_UNCHANGED
                 and pa_tmp.line_index = qplines.line_index
                 and qplines.pricing_effective_date between
                     nvl(trunc(qcdt1.start_date_active),qplines.pricing_effective_date)
                     and nvl(trunc(qcdt1.end_date_active),qplines.pricing_effective_date)))
        OR
        (qcdt.curr_attribute_context is not null
         and qcdt.precedence =
             (select /*+ ORDERED use_nl(qcdt2) index(pa_tmp1 QP_PREQ_LINE_ATTRS_TMP_N1) */ min(qcdt2.precedence) --[julin/5139512/4744915]
	       from qp_npreq_line_attrs_tmp pa_tmp1, qp_currency_details qcdt2
               where qcdt2.curr_attribute_context IS NOT NULL
		 and qcdt2.curr_attribute_context = pa_tmp1.context
                 and qcdt2.curr_attribute = pa_tmp1.attribute
                 and qcdt2.curr_attribute_value = pa_tmp1.value_from
                 and qcdt2.curr_attribute_type = pa_tmp1.attribute_type
                 and qcdt2.to_currency_code = qcdt.to_currency_code
                 and qcdt2.currency_header_id = qcdt.currency_header_id
                 and pa_tmp1.pricing_status_code = G_STATUS_UNCHANGED
                 and pa_tmp1.line_index = qplines.line_index
                 and qplines.pricing_effective_date between
                     nvl(trunc(qcdt2.start_date_active),qplines.pricing_effective_date)
                     and nvl(trunc(qcdt2.end_date_active),qplines.pricing_effective_date)
             )))
AND qpl.modifier_level_code = qplines.line_type_code
AND qph.active_flag = G_YES
AND nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
       nvl(qph.start_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE))) and
       nvl(qph.end_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)))
AND nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
      nvl(TRUNC(qpl.start_date_active), qplines.pricing_effective_date) and
      nvl(TRUNC(qpl.end_date_active),qplines.pricing_effective_date)
AND nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
      nvl(qpq.start_date_active, qplines.pricing_effective_date) and
      nvl(qpq.end_date_active,qplines.pricing_effective_date)
AND qpl.list_line_type_code in ('PLL','PMR','PBH')
AND qpq.qualifier_context    = qplatq.context
AND qpq.qualifier_attribute  = qplatq.attribute
AND qpq.comparison_operator_code = G_OPERATOR_BETWEEN --[julin/5007789]
AND qpq.active_flag = G_YES
and   ((qpq.qualifier_datatype IN (G_VARCHAR,G_DATE_X,G_DATE_Y) --[julin/5007789]
        and qplatq.value_from between qpq.qualifier_attr_value and qpq.qualifier_attr_value_to)
       or
       (qpq.qualifier_datatype = G_NUMERIC
        and qp_number.canonical_to_number(decode(qpq.qualifier_datatype,G_NUMERIC,qplatq.value_from,null))
            between qpq.qual_attr_value_from_number and qpq.qual_attr_value_to_number))
AND qpprod.pricing_phase_id = p_pricing_phase_id
AND qpprod.qualification_ind = QP_PREQ_GRP.G_YES_PROD_PRIC_HDR_QUAL_IND
AND qpprod.product_attribute_context = qplatpr.context
AND qpprod.product_attribute = qplatpr.attribute
AND qpprod.product_attr_value = qplatpr.value_from
AND qpprod.excluder_flag = G_NO
AND qpprod.list_header_id = qph.list_header_id --[julin/5007789]
AND qpprod.pricing_attribute_context = qplatpc.context
AND qpprod.pricing_attribute = qplatpc.attribute
AND (qpprod.pricing_attr_value_from = qplatpc.value_from
      or qpprod.comparison_operator_code IN ('NOT =',G_OPERATOR_BETWEEN))  --	8463623
AND qplatq.line_index = qplatpc.line_index
AND qplatq.line_index = qplines.line_index
AND qplatpc.line_index = qplatpr.line_index
AND qph.source_system_code = qprs.source_system_code
AND qplines.request_type_code   = qprs.request_type_code
AND qplatpr.line_index = qplines.line_index --[julin/4708044]
AND qplatpr.attribute_type='PRODUCT'
AND qplatpr.pricing_status_code=G_STATUS_UNCHANGED
AND qplatpc.attribute_type = 'PRICING'
AND qplatpc.pricing_status_code = G_STATUS_UNCHANGED
AND qplatq.attribute_type = 'QUALIFIER'
AND qplatq.pricing_status_code = G_STATUS_UNCHANGED
--AND   qplatq.pricing_attr_flag = G_YES --[julin/4708044] wrong table, currently not reliable value, not used in index
AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
AND  ((nvl(qplatq.DERIVED_QUALIFIER_FLAG,'N') ='N' )
  OR (qplatq.DERIVED_QUALIFIER_FLAG ='Y' AND qpq.QUALIFY_HIER_DESCENDENTS_FLAG ='Y')) -- Added for TCA
ORDER BY 4,2;

--[julin/5007789] Tuned query as follows:
-- 1. Performing line filter first.
-- 2. Merged qplatpr subquery conditions into main where clause.
CURSOR l_prod_cur (p_pricing_phase_id NUMBER) IS
-- Only Product attributes
-- bug 9210308 - Added index hint for index QP_LIST_LINES_PK
SELECT /*+ ORDERED USE_NL(QPLATPR QPPROD QPL QPH QPRS) index(qplatpr QP_PREQ_LINE_ATTRS_TMP_N1) index(QPL QP_LIST_LINES_PK) l_prod_cur_pl */
       qpl.list_header_id,
       qpl.list_line_id,
       qpl.list_line_type_code,
       qplatpr.line_index,
       qplatpr.applied_flag,
       qplatpr.attribute_level     product_attribute_level,
       qplatpr.attribute_type      product_attribute_type,
       qplatpr.context             product_attribute_context,
       qplatpr.attribute           product_attribute,
       qplatpr.value_from          product_attr_value,
       qpprod.product_uom_code     product_uom_code,
       qpprod.excluder_flag,
       qpl.automatic_flag,
       qpl.modifier_level_code,
       qpl.primary_uom_flag,
       qpl.arithmetic_operator     operand_calculation_code,
       qpl.operand                 operand_value,
       qpl.pricing_group_sequence,
       qph.list_type_code          created_from_list_type,
       qph.rounding_factor,
       qpl.pricing_phase_id,
       qpl.price_break_type_code,
       qpl.incompatibility_grp_code,
       qpl.price_by_formula_id,
       qpl.product_precedence,
       qpl.list_line_no
      ,QPL.BREAK_UOM_CODE /* Proration */
      ,QPL.BREAK_UOM_CONTEXT /* Proration */
      ,QPL.BREAK_UOM_ATTRIBUTE /* Proration */
FROM --[julin/5000789]
     (SELECT /*+ dynamic_sampling(1) */ *
      FROM  qp_npreq_lines_tmp
      WHERE processed_code IN (G_STS_LHS_NOT_FOUND,G_NO_LIST_PASSED)
      AND (nvl(validated_flag,G_NO) = G_NO or nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) = G_YES)) qplines,
     qp_npreq_line_attrs_tmp qplatpr,
     qp_pricing_attributes qpprod ,
     qp_list_lines qpl ,
     qp_list_headers_b  qph  ,
     qp_price_req_sources_v qprs
WHERE
     qph.list_header_id = qpprod.list_header_id
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
AND  qpl.qualification_ind = QP_PREQ_GRP.G_YES_PROD_IND
AND  qpl.list_line_type_code in ('PLL','PMR','PBH')
AND  (qplines.price_flag = G_YES OR
      (qplines.price_flag = G_PHASE AND p_freeze_override_flag = G_YES))
AND   qplines.list_price_override_flag in ('N', 'O') -- po integration
AND  qph.currency_code = qplines.currency_code
AND  qpl.modifier_level_code = qplines.line_type_code
AND  qph.active_flag = G_YES
AND  qpl.list_line_id = qpprod.list_line_id
AND  nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
       nvl(qph.start_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE))) and
       nvl(qph.end_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)))
AND  nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
      nvl(TRUNC(qpl.start_date_active), qplines.pricing_effective_date) and
      nvl(TRUNC(qpl.end_date_active),qplines.pricing_effective_date)
AND  qpl.pricing_phase_id = p_pricing_phase_id
AND  qpprod.pricing_phase_id = p_pricing_phase_id
AND  qpprod.qualification_ind = QP_PREQ_GRP.G_YES_PROD_IND
AND  qpprod.product_attribute_context = qplatpr.context
AND  qpprod.product_attribute = qplatpr.attribute
AND  qpprod.product_attr_value = qplatpr.value_from
AND  qpprod.excluder_flag = G_NO
AND  qph.source_system_code = qprs.source_system_code
AND  qplines.request_type_code   = qprs.request_type_code
AND  qplatpr.line_index = qplines.line_index
AND  qplatpr.attribute_type='PRODUCT' --[julin/5007789]
AND  qplatpr.pricing_status_code=G_STATUS_UNCHANGED --[julin/5007789]
AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
ORDER BY 4,2;  --order by list_line_id

--[julin/5007789] Tuned query as follows:
-- 1. Performing line filter first.
CURSOR l_prod_cur_currency (p_pricing_phase_id NUMBER) IS
-- Product Only.
SELECT /*+ ORDERED USE_NL(QPLATPR QPPROD QPL QPH QPRS) index(qplatpr QP_PREQ_LINE_ATTRS_TMP_N1) l_prod_cur_pl */
       qpl.list_header_id,
       qpl.list_line_id,
       qpl.list_line_type_code,
       qplatpr.line_index,
       qplatpr.applied_flag,
       qplatpr.attribute_level               product_attribute_level,
       qplatpr.attribute_type                product_attribute_type,
       qplatpr.context                       product_attribute_context,
       qplatpr.attribute                     product_attribute,
       qplatpr.value_from                    product_attr_value,
       qpprod.product_uom_code               product_uom_code,
       qpprod.excluder_flag,
       qpl.automatic_flag,
       qpl.modifier_level_code,
       qpl.primary_uom_flag,
       qpl.arithmetic_operator               operand_calculation_code,
       qpl.operand                           operand_value,
       qpl.pricing_group_sequence,
       qph.list_type_code                    created_from_list_type,
       qph.rounding_factor,
       qpl.pricing_phase_id,
       qpl.price_break_type_code,
       qpl.incompatibility_grp_code,
       qpl.price_by_formula_id,
       qpl.product_precedence,
       qpl.list_line_no,
       qcdt.currency_detail_id,
       qcdt.currency_header_id,
       qcdt.selling_rounding_factor,
       qplines.currency_code                 order_currency,
       qplines.pricing_effective_date        pricing_effective_date,
       qph.currency_code                     base_currency_code
      ,QPL.BREAK_UOM_CODE /* Proration */
      ,QPL.BREAK_UOM_CONTEXT /* Proration */
      ,QPL.BREAK_UOM_ATTRIBUTE /* Proration */
FROM --[julin/5007789]
     (SELECT /*+ dynamic_sampling(1) */ *
      FROM  qp_npreq_lines_tmp
      WHERE processed_code IN (G_STS_LHS_NOT_FOUND,G_NO_LIST_PASSED)
      AND (nvl(validated_flag,G_NO) = G_NO or nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) = G_YES)) qplines,
       qp_npreq_line_attrs_tmp qplatpr,
       qp_pricing_attributes qpprod,
       qp_list_lines qpl,
       qp_list_headers_b qph,
       qp_price_req_sources_v qprs,
       qp_currency_details qcdt
WHERE  qph.list_header_id = qpl.list_header_id
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
AND   (qplines.price_flag = G_YES OR
       (qplines.price_flag = G_PHASE AND p_freeze_override_flag = G_YES))
AND   qplines.list_price_override_flag in ('N', 'O') -- po integration
AND   qpl.list_line_type_code in ('PLL','PMR','PBH')
AND   qpl.list_line_id   = qpprod.list_line_id
--AND   qph.currency_code = qplines.currency_code
AND   qph.currency_header_id = qcdt.currency_header_id
AND   qplines.currency_code = qcdt.to_currency_code
AND   qplines.pricing_effective_date between
      nvl(trunc(qcdt.start_date_active),qplines.pricing_effective_date)
      and nvl(trunc(qcdt.end_date_active),qplines.pricing_effective_date)
AND (
        (qcdt.curr_attribute_context is null
         and not exists
             (select /*+ ORDERED use_nl(qcdt1) index(pa_tmp QP_PREQ_LINE_ATTRS_TMP_N1) */ 'x'   --[julin/5139512/4744915]
	       from qp_npreq_line_attrs_tmp pa_tmp,   qp_currency_details qcdt1
               where qcdt1.curr_attribute_context IS NOT NULL
		 and qcdt1.curr_attribute_context = pa_tmp.context
                 and qcdt1.curr_attribute = pa_tmp.attribute
                 and qcdt1.curr_attribute_value = pa_tmp.value_from
                 and qcdt1.curr_attribute_type = pa_tmp.attribute_typE
                 and qcdt1.to_currency_code = qcdt.to_currency_code
                 and qcdt1.currency_header_id = qcdt.currency_header_id
                 and pa_tmp.pricing_status_code = G_STATUS_UNCHANGED
                 and pa_tmp.line_index = qplines.line_index
                 and qplines.pricing_effective_date between
                     nvl(trunc(qcdt1.start_date_active),qplines.pricing_effective_date)
                     and nvl(trunc(qcdt1.end_date_active),qplines.pricing_effective_date)))
        OR
        (qcdt.curr_attribute_context is not null
         and qcdt.precedence =
             (select /*+ ORDERED use_nl(qcdt2) index(pa_tmp1 QP_PREQ_LINE_ATTRS_TMP_N1) */ min(qcdt2.precedence) --[julin/5139512/4744915]
	       from qp_npreq_line_attrs_tmp pa_tmp1, qp_currency_details qcdt2
               where qcdt2.curr_attribute_context IS NOT NULL
		 and qcdt2.curr_attribute_context = pa_tmp1.context
                 and qcdt2.curr_attribute = pa_tmp1.attribute
                 and qcdt2.curr_attribute_value = pa_tmp1.value_from
                 and qcdt2.curr_attribute_type = pa_tmp1.attribute_type
                 and qcdt2.to_currency_code = qcdt.to_currency_code
                 and qcdt2.currency_header_id = qcdt.currency_header_id
                 and pa_tmp1.pricing_status_code = G_STATUS_UNCHANGED
                 and pa_tmp1.line_index = qplines.line_index
                 and qplines.pricing_effective_date between
                     nvl(trunc(qcdt2.start_date_active),qplines.pricing_effective_date)
                     and nvl(trunc(qcdt2.end_date_active),qplines.pricing_effective_date)
             )))
AND   qpl.modifier_level_code = qplines.line_type_code
AND   qph.active_flag = G_YES
AND   nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
       nvl(qph.start_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE))) and
       nvl(qph.end_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)))
AND   nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
       nvl(TRUNC(qpl.start_date_active), qplines.pricing_effective_date) and
       nvl(TRUNC(qpl.end_date_active),qplines.pricing_effective_date)
AND   qpprod.pricing_phase_id = p_pricing_phase_id
AND   qpprod.qualification_ind = QP_PREQ_GRP.G_YES_PROD_IND
AND   qpprod.product_attribute_context = qplatpr.context
AND   qpprod.product_attribute = qplatpr.attribute
AND   qpprod.product_attr_value = qplatpr.value_from
AND   qpprod.excluder_flag = G_NO
AND   qph.source_system_code = qprs.source_system_code
AND   qplines.request_type_code   = qprs.request_type_code
AND   qplatpr.attribute_type='PRODUCT'
AND   qplatpr.pricing_status_code=G_STATUS_UNCHANGED
AND   QPLATPR.LINE_INDEX = QPLINES.LINE_INDEX -- 4331801/4365538
AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
ORDER BY 4,2;

--Added INDEX(QPPROD QP_PRICING_ATTRIBUTES_N5) for 3259932
--[julin/5007789] Tuned query as follows:
-- 1. Performing line filter first.
-- 2. Merged qplatpr subquery conditions into main where clause.
-- 3. Merged qplatpc subquery conditions into main where clause.
CURSOR l_prod_pric_cur (p_pricing_phase_id NUMBER) IS
--PRODUCT and PRICING attributes
SELECT /*+ ORDERED USE_NL(QPLATPR QPPROD QPLATPC QPL QPH QPRS) index(qplatpr QP_PREQ_LINE_ATTRS_TMP_N1) INDEX(QPPROD QP_PRICING_ATTRIBUTES_N5) index(qplatpc QP_PREQ_LINE_ATTRS_TMP_N2) l_prod_pric_cur_pl */
       qpl.list_header_id,
       qpl.list_line_id,
       qpl.list_line_type_code,
       qplatpr.line_index,
       qplatpr.applied_flag,
       qplatpr.attribute_level               product_attribute_level,
       qplatpr.attribute_type                product_attribute_type,
       qplatpr.context                       product_attribute_context,
       qplatpr.attribute                     product_attribute,
       qplatpr.value_from                    product_attr_value,
       qpprod.product_uom_code               product_uom_code,
       qpprod.excluder_flag,
       qpl.automatic_flag,
       qpl.modifier_level_code,
       qpl.primary_uom_flag,
       qpl.arithmetic_operator               operand_calculation_code,
       qpl.operand                           operand_value,
       qpl.pricing_group_sequence,
       qph.list_type_code                    created_from_list_type,
       qph.rounding_factor,
       qpl.pricing_phase_id,
       qpl.price_break_type_code,
       qpl.incompatibility_grp_code,
       qpl.price_by_formula_id,
       qpl.product_precedence,
       qpl.list_line_no,
       qplatpc.attribute_level               pricing_attribute_level,
       qplatpc.attribute_type                pricing_attribute_type,
       qplatpc.context                       pricing_attribute_context,
       qplatpc.attribute                     pricing_attribute,
       qplatpc.value_from                    pricing_attr_value,
       qpprod.pricing_attr_value_from        pricing_setup_value_from,
       qpprod.pricing_attr_value_to          pricing_setup_value_to,
       qpprod.comparison_operator_code       pricing_comparison_operator,
       qpprod.pricing_attribute_datatype     pricing_datatype
      ,QPL.BREAK_UOM_CODE /* Proration */
      ,QPL.BREAK_UOM_CONTEXT /* Proration */
      ,QPL.BREAK_UOM_ATTRIBUTE /* Proration */
FROM  --[julin/5007789]
      (SELECT /*+ dynamic_sampling(1) */ *
       FROM  qp_npreq_lines_tmp
       WHERE processed_code IN (G_STS_LHS_NOT_FOUND,G_NO_LIST_PASSED)
       AND (nvl(validated_flag,G_NO) = G_NO or nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) = G_YES)) qplines,
       qp_npreq_line_attrs_tmp qplatpr,
       qp_pricing_attributes qpprod,
       qp_npreq_line_attrs_tmp qplatpc,
       qp_list_lines qpl,
       qp_list_headers_b  qph,
       qp_price_req_sources_v QPRS
WHERE
      qph.list_header_id = qpl.list_header_id
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
AND   qpl.list_line_id = qpprod.list_line_id
AND   qpl.qualification_ind = QP_PREQ_GRP.G_YES_PROD_PRIC_IND
AND   qpl.list_line_type_code in ('PLL','PMR','PBH')
AND  (qplines.price_flag = G_YES OR
      (qplines.price_flag = G_PHASE AND p_freeze_override_flag = G_YES))
AND   qplines.list_price_override_flag in ('N', 'O') -- po integration
AND  qph.currency_code = qplines.currency_code --5922273
AND  qph.active_flag = G_YES
AND  qpl.pricing_phase_id = p_pricing_phase_id
AND  nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
       nvl(qph.start_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE))) and
       nvl(qph.end_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)))
AND  nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
      nvl(TRUNC(qpl.start_date_active), qplines.pricing_effective_date) and
      nvl(TRUNC(qpl.end_date_active),qplines.pricing_effective_date)
AND  qpprod.pricing_phase_id = p_pricing_phase_id
AND  qpprod.qualification_ind = QP_PREQ_GRP.G_YES_PROD_PRIC_IND
AND  qpprod.product_attribute_context = qplatpr.context
AND  qpprod.product_attribute = qplatpr.attribute
AND  qpprod.product_attr_value = qplatpr.value_from
AND  qpprod.excluder_flag = G_NO
AND  qpprod.pricing_attribute_context = qplatpc.context
AND  qpprod.pricing_attribute = qplatpc.attribute
AND (qpprod.pricing_attr_value_from = qplatpc.value_from
         or qpprod.comparison_operator_code IN ('NOT =',G_OPERATOR_BETWEEN))  --8463623
         --or qpl.price_break_type_code = G_RECURRING_BREAK)
AND  qplatpc.attribute_type = 'PRICING' --[julin/5007789]
AND  qplatpc.pricing_status_code = G_STATUS_UNCHANGED --[julin/5007789]
AND  qplatpc.line_index = qplines.line_index
AND  qplatpr.line_index = qplines.line_index
AND  qplatpr.attribute_type = 'PRODUCT' --[julin/5007789]
AND  qplatpr.pricing_status_code = G_STATUS_UNCHANGED --[julin/5007789]
AND  qph.source_system_code = qprs.source_system_code
AND  qplines.request_type_code   = qprs.request_type_code
--AND   qplatpc.pricing_attr_flag = G_YES --[julin/4708044] currently not reliable value, not used in index
AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
ORDER BY 4,2;

--Added INDEX(QPPROD QP_PRICING_ATTRIBUTES_N5) for 3259932
--[julin/5007789] Tuned query as follows:
-- 1. Performing line filter first.
CURSOR l_prod_pric_cur_currency(p_pricing_phase_id NUMBER) IS
--Product+Pricing
SELECT /*+ ORDERED USE_NL(QPLATPR QPPROD QPLATPC QPL QPH QPRS) index(qplatpr QP_PREQ_LINE_ATTRS_TMP_N1) INDEX(QPPROD QP_PRICING_ATTRIBUTES_N5) index(qplatpc QP_PREQ_LINE_ATTRS_TMP_N2) l_prod_pric_cur_pl */
       qpl.list_header_id,
       qpl.list_line_id,
       qpl.list_line_type_code,
       qplatpr.line_index,
       qplatpr.applied_flag,
       qplatpr.attribute_level               product_attribute_level,
       qplatpr.attribute_type                product_attribute_type,
       qplatpr.context                       product_attribute_context,
       qplatpr.attribute                     product_attribute,
       qplatpr.value_from                    product_attr_value,
       qpprod.product_uom_code               product_uom_code,
       qpprod.excluder_flag,
       qpl.automatic_flag,
       qpl.modifier_level_code,
       qpl.primary_uom_flag,
       qpl.arithmetic_operator               operand_calculation_code,
       qpl.operand                           operand_value,
       qpl.pricing_group_sequence,
       qph.list_type_code                    created_from_list_type,
       qph.rounding_factor,
       qpl.pricing_phase_id,
       qpl.price_break_type_code,
       qpl.incompatibility_grp_code,
       qpl.price_by_formula_id,
       qpl.product_precedence,
       qpl.list_line_no,
       qplatpc.attribute_level               pricing_attribute_level,
       qplatpc.attribute_type                pricing_attribute_type,
       qplatpc.context                       pricing_attribute_context,
       qplatpc.attribute                     pricing_attribute,
       qplatpc.value_from                    pricing_attr_value,
       qpprod.pricing_attr_value_from        pricing_setup_value_from,
       qpprod.pricing_attr_value_to          pricing_setup_value_to,
       qpprod.comparison_operator_code       pricing_comparison_operator,
       qpprod.pricing_attribute_datatype     pricing_datatype,
       qcdt.currency_detail_id,
       qcdt.currency_header_id,
       qcdt.selling_rounding_factor,
       qplines.currency_code                 order_currency,
       qplines.pricing_effective_date        pricing_effective_date,
       qph.currency_code                     base_currency_code
      ,QPL.BREAK_UOM_CODE /* Proration */
      ,QPL.BREAK_UOM_CONTEXT /* Proration */
      ,QPL.BREAK_UOM_ATTRIBUTE /* Proration */
FROM  --[julin/5007789]
      (SELECT /*+ dynamic_sampling(1) */ *
       FROM  qp_npreq_lines_tmp
       WHERE processed_code IN (G_STS_LHS_NOT_FOUND,G_NO_LIST_PASSED)
       AND (nvl(validated_flag,G_NO) = G_NO or nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) = G_YES)) qplines,
       qp_npreq_line_attrs_tmp qplatpr,
       qp_pricing_attributes qpprod ,
       qp_npreq_line_attrs_tmp qplatpc,
       qp_list_lines qpl ,
       qp_list_headers_b qph,
       qp_price_req_sources_v qprs,
       qp_currency_details qcdt
WHERE
      qph.list_header_id = qpl.list_header_id
--added for moac -- commented references to security profile
--security will be built into qp_list_headers_b
--AND ((nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND G_CURRENT_USER_OP_UNIT = QPH.orig_org_id) OR -- begin security
--         (nvl(G_SECURITY_CONTROL, 'OFF') = 'ON' AND nvl(QPH.global_flag,'Y') = 'Y') OR
--         nvl(G_SECURITY_CONTROL, 'OFF') = 'OFF' ) -- end security
AND   qpl.list_line_id   = qpprod.list_line_id
AND   (qplines.price_flag = G_YES OR
       (qplines.price_flag = G_PHASE AND p_freeze_override_flag = G_YES))
AND   qplines.list_price_override_flag in ('N', 'O') -- po integration
--AND   qph.currency_code = qplines.currency_code
AND   qph.currency_header_id = qcdt.currency_header_id
AND   qplines.currency_code = qcdt.to_currency_code
AND   qplines.pricing_effective_date between
       nvl(trunc(qcdt.start_date_active),qplines.pricing_effective_date) and
       nvl(trunc(qcdt.end_date_active),qplines.pricing_effective_date)
AND (
        (qcdt.curr_attribute_context is null
         and not exists
             (select /*+ ORDERED use_nl(qcdt1) index(pa_tmp QP_PREQ_LINE_ATTRS_TMP_N1) */ 'x'   --[julin/5139512/4744915]
	       from qp_npreq_line_attrs_tmp pa_tmp,   qp_currency_details qcdt1
               where qcdt1.curr_attribute_context IS NOT NULL
		 and qcdt1.curr_attribute_context = pa_tmp.context
                 and qcdt1.curr_attribute = pa_tmp.attribute
                 and qcdt1.curr_attribute_value = pa_tmp.value_from
                 and qcdt1.curr_attribute_type = pa_tmp.attribute_typE
                 and qcdt1.to_currency_code = qcdt.to_currency_code
                 and qcdt1.currency_header_id = qcdt.currency_header_id
                 and pa_tmp.pricing_status_code = G_STATUS_UNCHANGED
                 and pa_tmp.line_index = qplines.line_index
                 and qplines.pricing_effective_date between
                     nvl(trunc(qcdt1.start_date_active),qplines.pricing_effective_date)
                     and nvl(trunc(qcdt1.end_date_active),qplines.pricing_effective_date)))
        OR
        (qcdt.curr_attribute_context is not null
         and qcdt.precedence =
             (select /*+ ORDERED use_nl(qcdt2) index(pa_tmp1 QP_PREQ_LINE_ATTRS_TMP_N1) */ min(qcdt2.precedence) --[julin/5139512/4744915]
	       from qp_npreq_line_attrs_tmp pa_tmp1, qp_currency_details qcdt2
               where qcdt2.curr_attribute_context IS NOT NULL
		 and qcdt2.curr_attribute_context = pa_tmp1.context
                 and qcdt2.curr_attribute = pa_tmp1.attribute
                 and qcdt2.curr_attribute_value = pa_tmp1.value_from
                 and qcdt2.curr_attribute_type = pa_tmp1.attribute_type
                 and qcdt2.to_currency_code = qcdt.to_currency_code
                 and qcdt2.currency_header_id = qcdt.currency_header_id
                 and pa_tmp1.pricing_status_code = G_STATUS_UNCHANGED
                 and pa_tmp1.line_index = qplines.line_index
                 and qplines.pricing_effective_date between
                     nvl(trunc(qcdt2.start_date_active),qplines.pricing_effective_date)
                     and nvl(trunc(qcdt2.end_date_active),qplines.pricing_effective_date)
             )))
AND   qpl.modifier_level_code = qplines.line_type_code
AND   qph.active_flag = G_YES
AND   nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)) between
      nvl(qph.start_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE))) and
      nvl(qph.end_date_active,nvl(qplines.pricing_effective_date,TRUNC(SYSDATE)))
AND   qplines.pricing_effective_date between
      nvl(TRUNC(qpl.start_date_active), qplines.pricing_effective_date)
      and nvl(TRUNC(qpl.end_date_active),qplines.pricing_effective_date)
AND   qpl.list_line_type_code in ('PLL','PMR','PBH')
AND   qpprod.pricing_phase_id = p_pricing_phase_id
AND   qpprod.qualification_ind = QP_PREQ_GRP.G_YES_PROD_PRIC_IND
AND   qpprod.product_attribute_context = qplatpr.context
AND   qpprod.product_attribute = qplatpr.attribute
AND   qpprod.product_attr_value = qplatpr.value_from
AND   qpprod.excluder_flag = G_NO
AND   qpprod.pricing_attribute_context = qplatpc.context
AND   qpprod.pricing_attribute = qplatpc.attribute
AND   (qpprod.pricing_attr_value_from = qplatpc.value_from
        or qpprod.comparison_operator_code IN ('NOT =',G_OPERATOR_BETWEEN))  --	8463623
AND   qplatpc.line_index = qplatpr.line_index
AND   qplatpr.line_index = qplines.line_index -- 4331801/4365538
AND   qph.source_system_code = qprs.source_system_code
AND   qplines.request_type_code   = qprs.request_type_code
AND   qplatpr.attribute_type='PRODUCT'
AND   qplatpr.pricing_status_code=G_STATUS_UNCHANGED
AND   qplatpc.attribute_type = 'PRICING'
AND   qplatpc.pricing_status_code = G_STATUS_UNCHANGED
AND (instr(QPLINES.PROCESS_STATUS,'FREEGOOD')=0) -- bug 2693700
ORDER BY 4,2;

J PLS_INTEGER:=1;
N PLS_INTEGER:=1;
K PLS_INTEGER:=1;
M PLS_INTEGER:=1;
l_status VARCHAR2(30);
l_status_code VARCHAR2(30);
l_status_text VARCHAR2(240);
l_list_line_id NUMBER := 0 ;
l_line_index PLS_INTEGER := 0 ;
l_routine VARCHAR2(240):='Routine:QP_PREQ_GRP.Select_Price_List_Lines';
l_prod_qual_count PLS_INTEGER :=0;
l_prod_cur_count PLS_INTEGER :=0;

l_line_detail_index PLS_INTEGER;
lq_line_index              NUMBER := -9999;
lq_list_line_id            NUMBER := -9999;
nROWS                      PLS_INTEGER := 1000;

E_ROUTINE_ERRORS            EXCEPTION;

BEGIN

   x_status_code := FND_API.G_RET_STS_SUCCESS;
   l_prod_qual_count :=0;
   l_prod_cur_count  :=0;

   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('Before Big Select');
   engine_debug('p_pricing_phase_id: '||p_pricing_phase_id);
   engine_debug('p_freeze_override_flag: '||p_freeze_override_flag);

   END IF;
if G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN  /*vivek*/
  --selecting lists that match product and qualifiers attributes
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('cursor for l_prod_qual_cur_currency-multi-currency TRUE');
  END IF;

  qp_debug_util.tstart('L_PROD_QUAL_CUR_CURRENCY','Cursor Loop l_prod_qual_cur_currency');

  OPEN l_prod_qual_cur_currency(p_pricing_phase_id);


  LOOP
    /* 4331801/4365538: The PL/SQL tables used for BULK COLLECT were previously
       deleted here.  There is no need to explicitly delete since BULK COLLECT
       will truncate the data before populating. */

    -- fetch into _P and _Q tables here
    FETCH l_prod_qual_cur_currency BULK COLLECT INTO
      G_LIST_HEADER_ID_TBL_P,
      G_LIST_LINE_ID_TBL_P,
      G_LIST_LINE_TYPE_TBL_P,
      G_LINE_INDEX_TBL_P,
      G_APPLIED_FLAG_TBL_P,
      G_ATTRIBUTE_LEVEL_TBL_P,
      G_ATTRIBUTE_TYPE_TBL_P,
      G_CONTEXT_TBL_P,
      G_ATTRIBUTE_TBL_P,
      G_VALUE_FROM_TBL_P,
      G_PRODUCT_UOM_CODE_TBL_P,
      G_EXCLUDER_FLAG_TBL_P,
      G_CONTEXT_TBL_Q,
      G_ATTRIBUTE_TBL_Q,
      G_VALUE_FROM_TBL_Q,
      G_GROUPING_NO_TBL_Q,
      G_QUALIFIER_PRECEDENCE_TBL_Q,
      G_DATATYPE_TBL_Q,
      G_SETUP_VALUE_FROM_TBL_Q,
      G_SETUP_VALUE_TO_TBL_Q,
      G_AUTOMATIC_FLAG_TBL_P,
      G_MODIFIER_LEVEL_CODE_TBL_P,
      G_PRIMARY_UOM_FLAG_TBL_P,
      G_OPER_CALCULATION_CODE_TBL_P,
      G_OPERAND_VALUE_TBL_P,
      G_PRICING_GROUP_SEQUENCE_TBL_P,
      G_LIST_TYPE_CODE_TBL_P,
      G_ROUNDING_FACTOR_TBL_P,
      G_PRICING_PHASE_ID_TBL_P,
      G_PRICE_BREAK_TYPE_CODE_TBL_P,
      G_INCOMP_GRP_CODE_TBL_P,
      G_PRICE_FORMULA_ID_TBL_P,
      G_PRODUCT_PRECEDENCE_TBL_P,
      G_LIST_LINE_NO_TBL_P,
      G_QUALIFIER_TYPE_TBL_Q ,
      G_CURRENCY_DETAIL_ID_TBL_P,
      G_CURRENCY_HEADER_ID_TBL_P,
      G_SELLING_ROUNDING_TBL_P,
      G_ORDER_CURRENCY_TBL_P,
      G_PRICING_EFFECTIVE_DATE_TBL_P,
      G_BASE_CURRENCY_CODE_TBL_P
     ,G_BREAK_UOM_TBL_P /* Proration */
     ,G_BREAK_CONTEXT_TBL_P /* Proration */
     ,G_BREAK_ATTRIBUTE_TBL_P /* Proration */
      LIMIT nROWS;

    EXIT WHEN G_LINE_INDEX_TBL_P.COUNT = 0;

    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
      engine_debug('shu dbg, after bulk insert');
    END IF;

    if (G_LINE_INDEX_TBL_P.COUNT > 0) then

      FOR i in G_LINE_INDEX_TBL_P.FIRST .. G_LINE_INDEX_TBL_P.LAST loop

        if (lq_line_index <> G_LINE_INDEX_TBL_P(i) or lq_list_line_id <> G_LIST_LINE_ID_TBL_P(i)) then

          l_prod_qual_count := l_prod_qual_count + 1;
          L_LINE_DETAIL_INDEX :=GET_LINE_DETAIL_INDEX;
          -- set attributes
          G_LINE_INDEX_LD_TBL(M)             :=G_LINE_INDEX_TBL_P(i);
          G_LINE_DETAIL_INDEX_LD_TBL(M)      :=L_LINE_DETAIL_INDEX;
          G_LIST_HEADER_ID_LD_TBL(M)         :=G_LIST_HEADER_ID_TBL_P(i);
          G_LIST_LINE_ID_LD_TBL(M)           :=G_LIST_LINE_ID_TBL_P(i);
          G_PRICING_STATUS_CODE_LD_TBL(M)    :=G_STATUS_NEW;
          G_PRICING_STATUS_TEXT_LD_TBL(M)    := 'PRODUCT_QUALIFIER_CURRENCY';
          G_APPLIED_FLAG_LD_TBL(M)           :=G_AUTOMATIC_FLAG_TBL_P(i);
          G_PROCESSED_FLAG_LD_TBL(M)         :=G_NOT_PROCESSED;
          G_LINE_DETAIL_TYPE_CODE_TBL(M)     :='NULL';
          G_PRICE_BREAK_TYPE_CODE_TBL(M)     :=G_PRICE_BREAK_TYPE_CODE_TBL_P(i);
          G_LIST_LINE_TYPE_TBL(M)            :=G_LIST_LINE_TYPE_TBL_P(i);
          G_LIST_TYPE_CODE_TBL(M)            :=G_LIST_TYPE_CODE_TBL_P(i);
          G_CREATED_FROM_SQL_TBL(M)          :='PRODUCT_QUALIFIER_CURRENCY';
          G_PRICING_GROUP_SEQUENCE_TBL(M)    :=G_PRICING_GROUP_SEQUENCE_TBL_P(i);
          G_PRICING_PHASE_ID_TBL(M)          :=G_PRICING_PHASE_ID_TBL_P(i);
          G_OPERAND_CALCULATION_CODE_TBL(M)  :=G_OPER_CALCULATION_CODE_TBL_P(i);
          G_OPERAND_VALUE_TBL(M)             :=G_OPERAND_VALUE_TBL_P(i);
          G_PRICE_FORMULA_ID_TBL(M)          :=G_PRICE_FORMULA_ID_TBL_P(i);
          G_PRODUCT_PRECEDENCE_TBL(M)        :=G_PRODUCT_PRECEDENCE_TBL_P(i);
          G_INCOMP_GRP_CODE_TBL(M)           :=G_INCOMP_GRP_CODE_TBL_P(i);
          G_AUTOMATIC_FLAG_TBL(M)            :=G_AUTOMATIC_FLAG_TBL_P(i);
          G_PRIMARY_UOM_FLAG_TBL(M)          :=G_PRIMARY_UOM_FLAG_TBL_P(i);
          G_MODIFIER_LEVEL_CODE_TBL(M)       :=G_MODIFIER_LEVEL_CODE_TBL_P(i);
          G_LIST_LINE_NO_TBL(M)              :=G_LIST_LINE_NO_TBL_P(i);
          G_ROUNDING_FACTOR_TBL(M)           :=G_ROUNDING_FACTOR_TBL_P(i);
          G_CURRENCY_DETAIL_ID_TBL(M)        := G_CURRENCY_DETAIL_ID_TBL_P(i);
          G_CURRENCY_HEADER_ID_TBL(M)        := G_CURRENCY_HEADER_ID_TBL_P(i);
          G_SELLING_ROUNDING_TBL(M)          := G_SELLING_ROUNDING_TBL_P(i);
          G_ORDER_CURRENCY_TBL(M)            := G_ORDER_CURRENCY_TBL_P(i);
          G_BASE_CURRENCY_CODE_TBL(M)        := G_BASE_CURRENCY_CODE_TBL_P(i);
          G_PRICING_EFFECTIVE_DATE_TBL(M)    := G_PRICING_EFFECTIVE_DATE_TBL_P(i);
          G_BREAK_UOM_TBL(M)                 := G_BREAK_UOM_TBL_P(i); /* Proration */
          G_BREAK_CONTEXT_TBL(M)             := G_BREAK_CONTEXT_TBL_P(i); /* Proration */
          G_BREAK_ATTRIBUTE_TBL(M)           := G_BREAK_ATTRIBUTE_TBL_P(i); /* Proration */

          M:=M+1;

          IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
            engine_debug('M: '|| M);
	  END IF;


          lq_line_index := G_LINE_INDEX_TBL_P(i);
          lq_list_line_id := G_LIST_LINE_ID_TBL_P(i);
        end if;

        -- set product attributes

        G_LINE_INDEX_tbl(K)              := G_LINE_INDEX_TBL_P(i);
        G_ATTRIBUTE_LEVEL_tbl(K)         := G_ATTRIBUTE_LEVEL_TBL_P(i);
        G_ATTRIBUTE_TYPE_tbl(K)          := G_ATTRIBUTE_TYPE_TBL_P(i);
        G_CONTEXT_tbl(K)                 := G_CONTEXT_TBL_P(i);
        G_ATTRIBUTE_tbl(K)               := G_ATTRIBUTE_TBL_P(i);
        G_VALUE_FROM_tbl(K)              := G_VALUE_FROM_TBL_P(i);
        G_COMPARISON_OPERATOR_TYPE_tbl(K):=NULL;
        G_VALIDATED_FLAG_tbl(K)          := G_NO;
        G_APPLIED_FLAG_tbl(K)            := G_APPLIED_FLAG_TBL_P(i);
        G_PRICING_STATUS_CODE_tbl(K)     := G_STATUS_NEW;
        G_PRICING_ATTR_FLAG_tbl(K)       := G_NO;
        G_LINE_DETAIL_INDEX_tbl(K)       :=L_LINE_DETAIL_INDEX;
        G_LIST_HEADER_ID_tbl(K)          :=G_LIST_HEADER_ID_TBL_P(i);
        G_LIST_LINE_ID_tbl(K)            :=G_LIST_LINE_ID_TBL_P(i);
        G_SETUP_VALUE_FROM_tbl(K)        :=NULL;
        G_SETUP_VALUE_TO_tbl(K)          :=NULL;
        G_GROUPING_NUMBER_tbl(K)         :=NULL;
        G_PRICING_STATUS_TEXT_tbl(K)     :='PRODUCT_QUALIFIER_CURRENCY';
        G_QUALIFIER_PRECEDENCE_tbl(K)    :=NULL;
        G_DATATYPE_tbl(K)                :=NULL;
        G_EXCLUDER_FLAG_TBL(K)           :=G_EXCLUDER_FLAG_TBL_P(i);
        G_PRODUCT_UOM_CODE_TBL(K)        :=G_PRODUCT_UOM_CODE_TBL_P(i);
        G_QUALIFIER_TYPE_TBL(K)          :=G_QUALIFIER_TYPE_TBL_Q(i);
        G_PRICING_PHASE_ID_TBL_A(K)      :=G_PRICING_PHASE_ID_TBL_P(i);
        G_INCOMP_GRP_CODE_TBL_A(K)       :=G_INCOMP_GRP_CODE_TBL_P(i);
        G_LINE_DETAIL_TYPE_CODE_TBL_A(K) :='NULL';
        G_MODIFIER_LEVEL_CODE_TBL_A(K)   :=G_MODIFIER_LEVEL_CODE_TBL_P(i);
        G_PRIMARY_UOM_FLAG_TBL_A(K)      :=G_PRIMARY_UOM_FLAG_TBL_P(i);

        K:= K+1;
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug('The value of K1: ' || K);
        END IF;
        -- set qualifier attributes
        G_LINE_INDEX_tbl(K)              := G_LINE_INDEX_TBL_P(i);
        G_ATTRIBUTE_LEVEL_tbl(K)         := nvl(G_ATTRIBUTE_LEVEL_TBL_P(i),'X');
        G_ATTRIBUTE_TYPE_tbl(K)          := G_QUALIFIER_TYPE;
        G_CONTEXT_tbl(K)                 := G_CONTEXT_TBL_Q(i);
        G_ATTRIBUTE_tbl(K)               := G_ATTRIBUTE_TBL_Q(i);
        G_VALUE_FROM_tbl(K)              := G_VALUE_FROM_TBL_Q(i);
        G_COMPARISON_OPERATOR_TYPE_tbl(K):=NULL;
        G_VALIDATED_FLAG_tbl(K)          := G_NO;
        G_APPLIED_FLAG_tbl(K)            := G_APPLIED_FLAG_TBL_P(i);
        G_PRICING_STATUS_CODE_tbl(K)     := G_STATUS_NEW;
        G_PRICING_ATTR_FLAG_tbl(K)       := G_NO;
        G_LINE_DETAIL_INDEX_tbl(K)       := L_LINE_DETAIL_INDEX;
        G_LIST_HEADER_ID_tbl(K)          := G_LIST_HEADER_ID_TBL_P(i);
        G_LIST_LINE_ID_tbl(K)            := G_LIST_LINE_ID_TBL_P(i);
        G_SETUP_VALUE_FROM_tbl(K)        := G_SETUP_VALUE_FROM_TBL_Q(i);
        G_SETUP_VALUE_TO_tbl(K)          := G_SETUP_VALUE_TO_TBL_Q(i);
        G_GROUPING_NUMBER_tbl(K)         := G_GROUPING_NO_TBL_Q(i);
        G_PRICING_STATUS_TEXT_tbl(K)     := 'PRODUCT_QUALIFIER_CURRENCY';
        G_QUALIFIER_PRECEDENCE_tbl(K)    := G_QUALIFIER_PRECEDENCE_TBL_Q(i);
        G_DATATYPE_tbl(K)                := G_DATATYPE_TBL_Q(i);
        G_EXCLUDER_FLAG_TBL(K)           := G_EXCLUDER_FLAG_TBL_P(i);
        G_PRODUCT_UOM_CODE_TBL(K)        := G_PRODUCT_UOM_CODE_TBL_P(i);
        G_QUALIFIER_TYPE_TBL(K)          := G_QUALIFIER_TYPE_TBL_Q(i);
        G_PRICING_PHASE_ID_TBL_A(K)      := G_PRICING_PHASE_ID_TBL_P(i);
        G_INCOMP_GRP_CODE_TBL_A(K)       := G_INCOMP_GRP_CODE_TBL_P(i);
        G_LINE_DETAIL_TYPE_CODE_TBL_A(K) := 'NULL';
        G_MODIFIER_LEVEL_CODE_TBL_A(K)   := G_MODIFIER_LEVEL_CODE_TBL_P(i);
        G_PRIMARY_UOM_FLAG_TBL_A(K)      := G_PRIMARY_UOM_FLAG_TBL_P(i);
        K:= K+1;
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug('The value of K2: ' || K);

        END IF;
      end loop;
    end if;
  END LOOP;

  qp_debug_util.tstop('L_PROD_QUAL_CUR_CURRENCY');

  CLOSE l_prod_qual_cur_currency;

  lq_line_index              := -9999;
  lq_list_line_id            := -9999;

  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug('before l_prod_qual_pric_cur_currency... ');
  END IF;

  qp_debug_util.tstart('L_PROD_QUAL_PRIC_CUR_CURRENCY','Cursor Loop l_prod_qual_pric_cur_currency');
  OPEN l_prod_qual_pric_cur_currency(p_pricing_phase_id);

  LOOP
    /* 4331801/4365538: The PL/SQL tables used for BULK COLLECT were previously
       deleted here.  There is no need to explicitly delete since BULK COLLECT
       will truncate the data before populating. */

    -- fetch into _P , _Q tables and _PR tables here
    FETCH l_prod_qual_pric_cur_currency BULK COLLECT INTO
      G_LIST_HEADER_ID_TBL_P,
      G_LIST_LINE_ID_TBL_P,
      G_LIST_LINE_TYPE_TBL_P,
      G_LINE_INDEX_TBL_P,
      G_APPLIED_FLAG_TBL_P,
      G_ATTRIBUTE_LEVEL_TBL_P,
      G_ATTRIBUTE_TYPE_TBL_P,
      G_CONTEXT_TBL_P,
      G_ATTRIBUTE_TBL_P,
      G_VALUE_FROM_TBL_P,
      G_PRODUCT_UOM_CODE_TBL_P,
      G_EXCLUDER_FLAG_TBL_P,
      G_CONTEXT_TBL_Q,
      G_ATTRIBUTE_TBL_Q,
      G_VALUE_FROM_TBL_Q,
      G_GROUPING_NO_TBL_Q,
      G_QUALIFIER_PRECEDENCE_TBL_Q,
      G_DATATYPE_TBL_Q,
      G_SETUP_VALUE_FROM_TBL_Q,
      G_SETUP_VALUE_TO_TBL_Q,
      G_AUTOMATIC_FLAG_TBL_P,
      G_MODIFIER_LEVEL_CODE_TBL_P,
      G_PRIMARY_UOM_FLAG_TBL_P,
      G_OPER_CALCULATION_CODE_TBL_P,
      G_OPERAND_VALUE_TBL_P,
      G_PRICING_GROUP_SEQUENCE_TBL_P,
      G_LIST_TYPE_CODE_TBL_P,
      G_ROUNDING_FACTOR_TBL_P,
      G_PRICING_PHASE_ID_TBL_P,
      G_PRICE_BREAK_TYPE_CODE_TBL_P,
      G_INCOMP_GRP_CODE_TBL_P,
      G_PRICE_FORMULA_ID_TBL_P,
      G_PRODUCT_PRECEDENCE_TBL_P,
      G_LIST_LINE_NO_TBL_P,
      G_QUALIFIER_TYPE_TBL_Q ,
      G_ATTRIBUTE_LEVEL_TBL_PR,
      G_ATTRIBUTE_TYPE_TBL_PR,
      G_CONTEXT_TBL_PR,
      G_ATTRIBUTE_TBL_PR,
      G_VALUE_FROM_TBL_PR,
      G_SETUP_VALUE_FROM_TBL_PR,
      G_SETUP_VALUE_TO_TBL_PR,
      G_OPERATOR_TYPE_TBL_PR,
      G_DATATYPE_TBL_PR,
      G_CURRENCY_DETAIL_ID_TBL_P,
      G_CURRENCY_HEADER_ID_TBL_P,
      G_SELLING_ROUNDING_TBL_P,
      G_ORDER_CURRENCY_TBL_P,
      G_PRICING_EFFECTIVE_DATE_TBL_P ,
      G_BASE_CURRENCY_CODE_TBL_P
     ,G_BREAK_UOM_TBL_P /* Proration */
     ,G_BREAK_CONTEXT_TBL_P /* Proration */
     ,G_BREAK_ATTRIBUTE_TBL_P /* Proration */
      LIMIT nROWS;
    EXIT WHEN G_LINE_INDEX_TBL_P.COUNT = 0;

    if (G_LINE_INDEX_TBL_P.COUNT > 0) then
      for i in G_LINE_INDEX_TBL_P.FIRST .. G_LINE_INDEX_TBL_P.LAST loop
        if (lq_line_index <> G_LINE_INDEX_TBL_P(i) or lq_list_line_id <> G_LIST_LINE_ID_TBL_P(i)) then
          l_prod_qual_count := l_prod_qual_count + 1;
          L_LINE_DETAIL_INDEX :=GET_LINE_DETAIL_INDEX;

          -- set attributes
          G_LINE_INDEX_LD_TBL(M)             :=G_LINE_INDEX_TBL_P(i);
          G_LINE_DETAIL_INDEX_LD_TBL(M)      :=L_LINE_DETAIL_INDEX;
          G_LIST_HEADER_ID_LD_TBL(M)         :=G_LIST_HEADER_ID_TBL_P(i);
          G_LIST_LINE_ID_LD_TBL(M)           :=G_LIST_LINE_ID_TBL_P(i);
          G_PRICING_STATUS_CODE_LD_TBL(M)    :=G_STATUS_NEW;
          G_PRICING_STATUS_TEXT_LD_TBL(M)    := 'PRODUCT_QUALIFIER_PRICING_CURRENCY';
          G_APPLIED_FLAG_LD_TBL(M)           :=G_AUTOMATIC_FLAG_TBL_P(i);
          G_PROCESSED_FLAG_LD_TBL(M)         :=G_NOT_PROCESSED;
          G_LINE_DETAIL_TYPE_CODE_TBL(M)     :='NULL';
          G_PRICE_BREAK_TYPE_CODE_TBL(M)     :=G_PRICE_BREAK_TYPE_CODE_TBL_P(i);
          G_LIST_LINE_TYPE_TBL(M)            :=G_LIST_LINE_TYPE_TBL_P(i);
          G_LIST_TYPE_CODE_TBL(M)            :=G_LIST_TYPE_CODE_TBL_P(i);
          G_CREATED_FROM_SQL_TBL(M)          :='PRODUCT_QUAL_PRICING_CURRENCY';
          G_PRICING_GROUP_SEQUENCE_TBL(M)    :=G_PRICING_GROUP_SEQUENCE_TBL_P(i);
          G_PRICING_PHASE_ID_TBL(M)          :=G_PRICING_PHASE_ID_TBL_P(i);
          G_OPERAND_CALCULATION_CODE_TBL(M)  :=G_OPER_CALCULATION_CODE_TBL_P(i);
          G_OPERAND_VALUE_TBL(M)             :=G_OPERAND_VALUE_TBL_P(i);
          G_PRICE_FORMULA_ID_TBL(M)          :=G_PRICE_FORMULA_ID_TBL_P(i);
          G_PRODUCT_PRECEDENCE_TBL(M)        :=G_PRODUCT_PRECEDENCE_TBL_P(i);
          G_INCOMP_GRP_CODE_TBL(M)           :=G_INCOMP_GRP_CODE_TBL_P(i);
          G_AUTOMATIC_FLAG_TBL(M)            :=G_AUTOMATIC_FLAG_TBL_P(i);
          G_PRIMARY_UOM_FLAG_TBL(M)          :=G_PRIMARY_UOM_FLAG_TBL_P(i);
          G_MODIFIER_LEVEL_CODE_TBL(M)       :=G_MODIFIER_LEVEL_CODE_TBL_P(i);
          G_LIST_LINE_NO_TBL(M)              :=G_LIST_LINE_NO_TBL_P(i);
          G_ROUNDING_FACTOR_TBL(M)           :=G_ROUNDING_FACTOR_TBL_P(i);
          G_CURRENCY_DETAIL_ID_TBL(M)        := G_CURRENCY_DETAIL_ID_TBL_P(i);
          G_CURRENCY_HEADER_ID_TBL(M)        := G_CURRENCY_HEADER_ID_TBL_P(i);
          G_SELLING_ROUNDING_TBL(M)          := G_SELLING_ROUNDING_TBL_P(i);
          G_ORDER_CURRENCY_TBL(M)            := G_ORDER_CURRENCY_TBL_P(i);
          G_BASE_CURRENCY_CODE_TBL(M)        := G_BASE_CURRENCY_CODE_TBL_P(i);
          G_PRICING_EFFECTIVE_DATE_TBL(M)    := G_PRICING_EFFECTIVE_DATE_TBL_P(i);
          G_BREAK_UOM_TBL(M)                 := G_BREAK_UOM_TBL_P(i); /* Proration */
          G_BREAK_CONTEXT_TBL(M)             := G_BREAK_CONTEXT_TBL_P(i); /* Proration */
          G_BREAK_ATTRIBUTE_TBL(M)           := G_BREAK_ATTRIBUTE_TBL_P(i); /* Proration */

          M:=M+1;
          lq_line_index := G_LINE_INDEX_TBL_P(i);
          lq_list_line_id := G_LIST_LINE_ID_TBL_P(i);
        end if;

        -- set product attributes
        G_LINE_INDEX_tbl(K)              := G_LINE_INDEX_TBL_P(i);
        G_ATTRIBUTE_LEVEL_tbl(K)         := G_ATTRIBUTE_LEVEL_TBL_P(i);
        G_ATTRIBUTE_TYPE_tbl(K)          := G_ATTRIBUTE_TYPE_TBL_P(i);
        G_CONTEXT_tbl(K)                 := G_CONTEXT_TBL_P(i);
        G_ATTRIBUTE_tbl(K)               := G_ATTRIBUTE_TBL_P(i);
        G_VALUE_FROM_tbl(K)              := G_VALUE_FROM_TBL_P(i);
        G_COMPARISON_OPERATOR_TYPE_tbl(K):=NULL;
        G_VALIDATED_FLAG_tbl(K)          := G_NO;
        G_APPLIED_FLAG_tbl(K)            := G_APPLIED_FLAG_TBL_P(i);
        G_PRICING_STATUS_CODE_tbl(K)     := G_STATUS_NEW;
        G_PRICING_ATTR_FLAG_tbl(K)       := G_NO;
        G_LINE_DETAIL_INDEX_tbl(K)       :=L_LINE_DETAIL_INDEX;
        G_LIST_HEADER_ID_tbl(K)          :=G_LIST_HEADER_ID_TBL_P(i);
        G_LIST_LINE_ID_tbl(K)            :=G_LIST_LINE_ID_TBL_P(i);
        G_SETUP_VALUE_FROM_tbl(K)        :=NULL;
        G_SETUP_VALUE_TO_tbl(K)          :=NULL;
        G_GROUPING_NUMBER_tbl(K)         :=NULL;
        G_PRICING_STATUS_TEXT_tbl(K)     :='PRODUCT_QUALIFIER_PRICING_CURRENCY';
        G_QUALIFIER_PRECEDENCE_tbl(K)    :=NULL;
        G_DATATYPE_tbl(K)                :=NULL;
        G_EXCLUDER_FLAG_TBL(K)           :=G_EXCLUDER_FLAG_TBL_P(i);
        G_PRODUCT_UOM_CODE_TBL(K)        :=G_PRODUCT_UOM_CODE_TBL_P(i);
        G_QUALIFIER_TYPE_TBL(K)          :=G_QUALIFIER_TYPE_TBL_Q(i);
        G_PRICING_PHASE_ID_TBL_A(K)      :=G_PRICING_PHASE_ID_TBL_P(i);
        G_INCOMP_GRP_CODE_TBL_A(K)       :=G_INCOMP_GRP_CODE_TBL_P(i);
        G_LINE_DETAIL_TYPE_CODE_TBL_A(K) :='NULL';
        G_MODIFIER_LEVEL_CODE_TBL_A(K)   :=G_MODIFIER_LEVEL_CODE_TBL_P(i);
        G_PRIMARY_UOM_FLAG_TBL_A(K)      :=G_PRIMARY_UOM_FLAG_TBL_P(i);
        K:= K+1;
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug('The value of K: ' || K);

        END IF;
        -- set qualifier attributes
        G_LINE_INDEX_tbl(K)              := G_LINE_INDEX_TBL_P(i);
        G_ATTRIBUTE_LEVEL_tbl(K)         := nvl(G_ATTRIBUTE_LEVEL_TBL_P(i),'X');
        G_ATTRIBUTE_TYPE_tbl(K)          := G_QUALIFIER_TYPE;
        G_CONTEXT_tbl(K)                 := G_CONTEXT_TBL_Q(i);
        G_ATTRIBUTE_tbl(K)               := G_ATTRIBUTE_TBL_Q(i);
        G_VALUE_FROM_tbl(K)              := G_VALUE_FROM_TBL_Q(i);
         G_COMPARISON_OPERATOR_TYPE_tbl(K):=NULL;
        G_VALIDATED_FLAG_tbl(K)          := G_NO;
        G_APPLIED_FLAG_tbl(K)            := G_APPLIED_FLAG_TBL_P(i);
        G_PRICING_STATUS_CODE_tbl(K)     := G_STATUS_NEW;
        G_PRICING_ATTR_FLAG_tbl(K)       := G_NO;
        G_LINE_DETAIL_INDEX_tbl(K)       := L_LINE_DETAIL_INDEX;
        G_LIST_HEADER_ID_tbl(K)          := G_LIST_HEADER_ID_TBL_P(i);
        G_LIST_LINE_ID_tbl(K)            := G_LIST_LINE_ID_TBL_P(i);
        G_SETUP_VALUE_FROM_tbl(K)        := G_SETUP_VALUE_FROM_TBL_Q(i);
        G_SETUP_VALUE_TO_tbl(K)          := G_SETUP_VALUE_TO_TBL_Q(i);
        G_GROUPING_NUMBER_tbl(K)         := G_GROUPING_NO_TBL_Q(i);
        G_PRICING_STATUS_TEXT_tbl(K)     := 'PRODUCT_QUALIFIER_PRICING_CURRENCY';
        G_QUALIFIER_PRECEDENCE_tbl(K)    := G_QUALIFIER_PRECEDENCE_TBL_Q(i);
        G_DATATYPE_tbl(K)                := G_DATATYPE_TBL_Q(i);
        G_EXCLUDER_FLAG_TBL(K)           := G_EXCLUDER_FLAG_TBL_P(i);
        G_PRODUCT_UOM_CODE_TBL(K)        := G_PRODUCT_UOM_CODE_TBL_P(i);
        G_QUALIFIER_TYPE_TBL(K)          := G_QUALIFIER_TYPE_TBL_Q(i);
        G_PRICING_PHASE_ID_TBL_A(K)      := G_PRICING_PHASE_ID_TBL_P(i);
        G_INCOMP_GRP_CODE_TBL_A(K)       := G_INCOMP_GRP_CODE_TBL_P(i);
        G_LINE_DETAIL_TYPE_CODE_TBL_A(K) := 'NULL';
        G_MODIFIER_LEVEL_CODE_TBL_A(K)   := G_MODIFIER_LEVEL_CODE_TBL_P(i);
        G_PRIMARY_UOM_FLAG_TBL_A(K)      := G_PRIMARY_UOM_FLAG_TBL_P(i);
        K:= K+1;

        --set pricing attributes
        IF (G_CONTEXT_TBL_PR(I) IS NOT NULL) THEN
         G_LINE_INDEX_tbl(K)              :=G_LINE_INDEX_TBL_P(I);
         G_ATTRIBUTE_LEVEL_tbl(K)         :=G_ATTRIBUTE_LEVEL_TBL_PR(I);
         G_ATTRIBUTE_TYPE_tbl(K)          :=G_ATTRIBUTE_TYPE_TBL_PR(I);
         G_CONTEXT_tbl(K)                 :=G_CONTEXT_TBL_PR(I);
         G_ATTRIBUTE_tbl(K)               :=G_ATTRIBUTE_TBL_PR(I);
         G_VALUE_FROM_tbl(K)              :=G_VALUE_FROM_TBL_PR(I);
         G_COMPARISON_OPERATOR_TYPE_tbl(K):=G_OPERATOR_TYPE_TBL_PR(I);
         G_VALIDATED_FLAG_tbl(K)          :=G_NO;
         G_APPLIED_FLAG_tbl(K)            :=G_APPLIED_FLAG_TBL_P(I);
         G_PRICING_STATUS_CODE_tbl(K)     :=G_STATUS_NEW;
         G_PRICING_ATTR_FLAG_tbl(K)       :=G_YES;
         G_LINE_DETAIL_INDEX_tbl(K)       :=L_LINE_DETAIL_INDEX;
         G_LIST_HEADER_ID_tbl(K)          :=G_LIST_HEADER_ID_TBL_P(I);
         G_LIST_LINE_ID_tbl(K)            :=G_LIST_LINE_ID_TBL_P(I);
         G_SETUP_VALUE_FROM_tbl(K)        :=G_SETUP_VALUE_FROM_TBL_PR(I);
         G_SETUP_VALUE_TO_tbl(K)          :=G_SETUP_VALUE_TO_TBL_PR(I);
         G_GROUPING_NUMBER_tbl(K)         :=NULL;
         G_PRICING_STATUS_TEXT_tbl(K)     :='PRODUCT_QUALIFIER_PRICING_CURRENCY';
         G_QUALIFIER_PRECEDENCE_tbl(K)    :=NULL;
         G_DATATYPE_tbl(K)                :=G_DATATYPE_TBL_PR(I);
         G_EXCLUDER_FLAG_TBL(K)           :=G_EXCLUDER_FLAG_TBL_P(I);
         G_PRODUCT_UOM_CODE_TBL(K)        :=G_PRODUCT_UOM_CODE_TBL_P(I);
         G_QUALIFIER_TYPE_TBL(K)          :=NULL;
         G_PRICING_PHASE_ID_TBL_A(K)      :=G_PRICING_PHASE_ID_TBL_P(I);
         G_INCOMP_GRP_CODE_TBL_A(K)       :=G_INCOMP_GRP_CODE_TBL_P(I);
         G_LINE_DETAIL_TYPE_CODE_TBL_A(K) :='NULL';
         G_MODIFIER_LEVEL_CODE_TBL_A(K)   :=G_MODIFIER_LEVEL_CODE_TBL_P(I);
         G_PRIMARY_UOM_FLAG_TBL_A(K)      :=G_PRIMARY_UOM_FLAG_TBL_P(I);
         K:= K+1;
       END IF;
       IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
       engine_debug('The value of K: ' || K);

       END IF;
      end loop;
    end if;
  END LOOP;

  qp_debug_util.tstop('L_PROD_QUAL_PRIC_CUR_CURRENCY');

  CLOSE l_prod_qual_pric_cur_currency;

  lq_line_index              := -9999;
  lq_list_line_id            := -9999;

  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug('before l_prod_cur_currency... ');
  END IF;

  qp_debug_util.tstart('L_PROD_CUR_CURRENCY','Cursor Loop l_prod_cur_currency');
  OPEN l_prod_cur_currency(p_pricing_phase_id);

  LOOP
    /* 4331801/4365538: The PL/SQL tables used for BULK COLLECT were previously
       deleted here.  There is no need to explicitly delete since BULK COLLECT
       will truncate the data before populating. */

    -- fetch into _P tables here
    FETCH l_prod_cur_currency BULK COLLECT INTO
      G_LIST_HEADER_ID_TBL_P,
      G_LIST_LINE_ID_TBL_P,
      G_LIST_LINE_TYPE_TBL_P,
      G_LINE_INDEX_TBL_P,
      G_APPLIED_FLAG_TBL_P,
      G_ATTRIBUTE_LEVEL_TBL_P,
      G_ATTRIBUTE_TYPE_TBL_P,
      G_CONTEXT_TBL_P,
      G_ATTRIBUTE_TBL_P,
      G_VALUE_FROM_TBL_P,
      G_PRODUCT_UOM_CODE_TBL_P,
      G_EXCLUDER_FLAG_TBL_P,
      G_AUTOMATIC_FLAG_TBL_P,
      G_MODIFIER_LEVEL_CODE_TBL_P,
      G_PRIMARY_UOM_FLAG_TBL_P,
      G_OPER_CALCULATION_CODE_TBL_P,
      G_OPERAND_VALUE_TBL_P,
      G_PRICING_GROUP_SEQUENCE_TBL_P,
      G_LIST_TYPE_CODE_TBL_P,
      G_ROUNDING_FACTOR_TBL_P,
      G_PRICING_PHASE_ID_TBL_P,
      G_PRICE_BREAK_TYPE_CODE_TBL_P,
      G_INCOMP_GRP_CODE_TBL_P,
      G_PRICE_FORMULA_ID_TBL_P,
      G_PRODUCT_PRECEDENCE_TBL_P,
      G_LIST_LINE_NO_TBL_P,
      G_CURRENCY_DETAIL_ID_TBL_P,
      G_CURRENCY_HEADER_ID_TBL_P,
      G_SELLING_ROUNDING_TBL_P,
      G_ORDER_CURRENCY_TBL_P,
      G_PRICING_EFFECTIVE_DATE_TBL_P,
      G_BASE_CURRENCY_CODE_TBL_P
     ,G_BREAK_UOM_TBL_P /* Proration */
     ,G_BREAK_CONTEXT_TBL_P /* Proration */
     ,G_BREAK_ATTRIBUTE_TBL_P /* Proration */
      LIMIT nROWS;

    EXIT WHEN G_LINE_INDEX_TBL_P.COUNT = 0;

    if (G_LINE_INDEX_TBL_P.COUNT > 0) then
      for i in G_LINE_INDEX_TBL_P.FIRST .. G_LINE_INDEX_TBL_P.LAST loop
        if (lq_line_index <> G_LINE_INDEX_TBL_P(i) or lq_list_line_id <> G_LIST_LINE_ID_TBL_P(i)) then
          l_prod_qual_count := l_prod_qual_count + 1;
          L_LINE_DETAIL_INDEX :=GET_LINE_DETAIL_INDEX;

          -- set attributes
          G_LINE_INDEX_LD_TBL(M)             :=G_LINE_INDEX_TBL_P(i);
          G_LINE_DETAIL_INDEX_LD_TBL(M)      :=L_LINE_DETAIL_INDEX;
          G_LIST_HEADER_ID_LD_TBL(M)         :=G_LIST_HEADER_ID_TBL_P(i);
          G_LIST_LINE_ID_LD_TBL(M)           :=G_LIST_LINE_ID_TBL_P(i);
          G_PRICING_STATUS_CODE_LD_TBL(M)    :=G_STATUS_NEW;
          G_PRICING_STATUS_TEXT_LD_TBL(M)    := 'PRODUCT_CURRENCY';
          G_APPLIED_FLAG_LD_TBL(M)           :=G_AUTOMATIC_FLAG_TBL_P(i);
          G_PROCESSED_FLAG_LD_TBL(M)         :=G_NOT_PROCESSED;
          G_LINE_DETAIL_TYPE_CODE_TBL(M)     :='NULL';
          G_PRICE_BREAK_TYPE_CODE_TBL(M)     :=G_PRICE_BREAK_TYPE_CODE_TBL_P(i);
          G_LIST_LINE_TYPE_TBL(M)            :=G_LIST_LINE_TYPE_TBL_P(i);
          G_LIST_TYPE_CODE_TBL(M)            :=G_LIST_TYPE_CODE_TBL_P(i);
          G_CREATED_FROM_SQL_TBL(M)          :='PRODUCT_CURRENCY';
          G_PRICING_GROUP_SEQUENCE_TBL(M)    :=G_PRICING_GROUP_SEQUENCE_TBL_P(i);
          G_PRICING_PHASE_ID_TBL(M)          :=G_PRICING_PHASE_ID_TBL_P(i);
          G_OPERAND_CALCULATION_CODE_TBL(M)  :=G_OPER_CALCULATION_CODE_TBL_P(i);
          G_OPERAND_VALUE_TBL(M)             :=G_OPERAND_VALUE_TBL_P(i);
          G_PRICE_FORMULA_ID_TBL(M)          :=G_PRICE_FORMULA_ID_TBL_P(i);
          G_PRODUCT_PRECEDENCE_TBL(M)        :=G_PRODUCT_PRECEDENCE_TBL_P(i);
          G_INCOMP_GRP_CODE_TBL(M)           :=G_INCOMP_GRP_CODE_TBL_P(i);
          G_AUTOMATIC_FLAG_TBL(M)            :=G_AUTOMATIC_FLAG_TBL_P(i);
          G_PRIMARY_UOM_FLAG_TBL(M)          :=G_PRIMARY_UOM_FLAG_TBL_P(i);
          G_MODIFIER_LEVEL_CODE_TBL(M)       :=G_MODIFIER_LEVEL_CODE_TBL_P(i);
          G_LIST_LINE_NO_TBL(M)              :=G_LIST_LINE_NO_TBL_P(i);
          G_ROUNDING_FACTOR_TBL(M)           :=G_ROUNDING_FACTOR_TBL_P(i);
          G_CURRENCY_DETAIL_ID_TBL(M)        := G_CURRENCY_DETAIL_ID_TBL_P(i);
          G_CURRENCY_HEADER_ID_TBL(M)        := G_CURRENCY_HEADER_ID_TBL_P(i);
          G_SELLING_ROUNDING_TBL(M)          := G_SELLING_ROUNDING_TBL_P(i);
          G_ORDER_CURRENCY_TBL(M)            := G_ORDER_CURRENCY_TBL_P(i);
          G_BASE_CURRENCY_CODE_TBL(M)        := G_BASE_CURRENCY_CODE_TBL_P(i);
          G_PRICING_EFFECTIVE_DATE_TBL(M)    := G_PRICING_EFFECTIVE_DATE_TBL_P(i);
          G_BREAK_UOM_TBL(M)                 := G_BREAK_UOM_TBL_P(i); /* Proration */
          G_BREAK_CONTEXT_TBL(M)             := G_BREAK_CONTEXT_TBL_P(i); /* Proration */
          G_BREAK_ATTRIBUTE_TBL(M)           := G_BREAK_ATTRIBUTE_TBL_P(i); /* Proration */


          M:=M+1;
          lq_line_index := G_LINE_INDEX_TBL_P(i);
          lq_list_line_id := G_LIST_LINE_ID_TBL_P(i);
        end if;

        -- set product attributes
        G_LINE_INDEX_tbl(K)              := G_LINE_INDEX_TBL_P(i);
        G_ATTRIBUTE_LEVEL_tbl(K)         := G_ATTRIBUTE_LEVEL_TBL_P(i);
        G_ATTRIBUTE_TYPE_tbl(K)          := G_ATTRIBUTE_TYPE_TBL_P(i);
        G_CONTEXT_tbl(K)                 := G_CONTEXT_TBL_P(i);
        G_ATTRIBUTE_tbl(K)               := G_ATTRIBUTE_TBL_P(i);
        G_VALUE_FROM_tbl(K)              := G_VALUE_FROM_TBL_P(i);
        G_COMPARISON_OPERATOR_TYPE_tbl(K):=NULL;
        G_VALIDATED_FLAG_tbl(K)          := G_NO;
        G_APPLIED_FLAG_tbl(K)            := G_APPLIED_FLAG_TBL_P(i);
        G_PRICING_STATUS_CODE_tbl(K)     := G_STATUS_NEW;
        G_PRICING_ATTR_FLAG_tbl(K)       := G_NO;
        G_LINE_DETAIL_INDEX_tbl(K)       :=L_LINE_DETAIL_INDEX;
        G_LIST_HEADER_ID_tbl(K)          :=G_LIST_HEADER_ID_TBL_P(i);
        G_LIST_LINE_ID_tbl(K)            :=G_LIST_LINE_ID_TBL_P(i);
        G_SETUP_VALUE_FROM_tbl(K)        :=NULL;
        G_SETUP_VALUE_TO_tbl(K)          :=NULL;
        G_GROUPING_NUMBER_tbl(K)         :=NULL;
        G_PRICING_STATUS_TEXT_tbl(K)     :='PRODUCT_CURRENCY';
        G_QUALIFIER_PRECEDENCE_tbl(K)    :=NULL;
        G_DATATYPE_tbl(K)                :=NULL;
        G_EXCLUDER_FLAG_TBL(K)           :=G_EXCLUDER_FLAG_TBL_P(i);
        G_PRODUCT_UOM_CODE_TBL(K)        :=G_PRODUCT_UOM_CODE_TBL_P(i);
        G_QUALIFIER_TYPE_TBL(K)          :=null;
        G_PRICING_PHASE_ID_TBL_A(K)      :=G_PRICING_PHASE_ID_TBL_P(i);
        G_INCOMP_GRP_CODE_TBL_A(K)       :=G_INCOMP_GRP_CODE_TBL_P(i);
        G_LINE_DETAIL_TYPE_CODE_TBL_A(K) :='NULL';
        G_MODIFIER_LEVEL_CODE_TBL_A(K)   :=G_MODIFIER_LEVEL_CODE_TBL_P(i);
        G_PRIMARY_UOM_FLAG_TBL_A(K)      :=G_PRIMARY_UOM_FLAG_TBL_P(i);
        K:= K+1;
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug('The value of K: ' || K);
        END IF;
      end loop;
    end if;
  END LOOP;

  qp_debug_util.tstop('L_PROD_CUR_CURRENCY');

  CLOSE l_prod_cur_currency;

   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug('before l_prod_pric_cur_currency...');
   END IF;

  qp_debug_util.tstart('L_PROD_PRIC_CUR_CURRENCY','Cursor Loop l_prod_pric_cur_currency');
  OPEN l_prod_pric_cur_currency(p_pricing_phase_id);



  LOOP
    /* 4331801/4365538: The PL/SQL tables used for BULK COLLECT were previously
       deleted here.  There is no need to explicitly delete since BULK COLLECT
       will truncate the data before populating. */

    -- fetch into _P , and _PR tables here
    FETCH l_prod_pric_cur_currency BULK COLLECT INTO
      G_LIST_HEADER_ID_TBL_P,
      G_LIST_LINE_ID_TBL_P,
      G_LIST_LINE_TYPE_TBL_P,
      G_LINE_INDEX_TBL_P,
      G_APPLIED_FLAG_TBL_P,
      G_ATTRIBUTE_LEVEL_TBL_P,
      G_ATTRIBUTE_TYPE_TBL_P,
      G_CONTEXT_TBL_P,
      G_ATTRIBUTE_TBL_P,
      G_VALUE_FROM_TBL_P,
      G_PRODUCT_UOM_CODE_TBL_P,
      G_EXCLUDER_FLAG_TBL_P,
      G_AUTOMATIC_FLAG_TBL_P,
      G_MODIFIER_LEVEL_CODE_TBL_P,
      G_PRIMARY_UOM_FLAG_TBL_P,
      G_OPER_CALCULATION_CODE_TBL_P,
      G_OPERAND_VALUE_TBL_P,
      G_PRICING_GROUP_SEQUENCE_TBL_P,
      G_LIST_TYPE_CODE_TBL_P,
      G_ROUNDING_FACTOR_TBL_P,
      G_PRICING_PHASE_ID_TBL_P,
      G_PRICE_BREAK_TYPE_CODE_TBL_P,
      G_INCOMP_GRP_CODE_TBL_P,
      G_PRICE_FORMULA_ID_TBL_P,
      G_PRODUCT_PRECEDENCE_TBL_P,
      G_LIST_LINE_NO_TBL_P,
      G_ATTRIBUTE_LEVEL_TBL_PR,
      G_ATTRIBUTE_TYPE_TBL_PR,
      G_CONTEXT_TBL_PR,
      G_ATTRIBUTE_TBL_PR,
      G_VALUE_FROM_TBL_PR,
      G_SETUP_VALUE_FROM_TBL_PR,
      G_SETUP_VALUE_TO_TBL_PR,
      G_OPERATOR_TYPE_TBL_PR,
      G_DATATYPE_TBL_PR,
      G_CURRENCY_DETAIL_ID_TBL_P,
      G_CURRENCY_HEADER_ID_TBL_P,
      G_SELLING_ROUNDING_TBL_P,
      G_ORDER_CURRENCY_TBL_P,
      G_PRICING_EFFECTIVE_DATE_TBL_P ,
      G_BASE_CURRENCY_CODE_TBL_P
     ,G_BREAK_UOM_TBL_P /* Proration */
     ,G_BREAK_CONTEXT_TBL_P /* Proration */
     ,G_BREAK_ATTRIBUTE_TBL_P /* Proration */
      LIMIT nROWS;
    EXIT WHEN G_LINE_INDEX_TBL_P.COUNT = 0;

    if (G_LINE_INDEX_TBL_P.COUNT > 0) then
      for i in G_LINE_INDEX_TBL_P.FIRST .. G_LINE_INDEX_TBL_P.LAST loop
        if (lq_line_index <> G_LINE_INDEX_TBL_P(i) or lq_list_line_id <> G_LIST_LINE_ID_TBL_P(i)) then
          l_prod_qual_count := l_prod_qual_count + 1;
          L_LINE_DETAIL_INDEX :=GET_LINE_DETAIL_INDEX;

          -- set attributes
          G_LINE_INDEX_LD_TBL(M)             :=G_LINE_INDEX_TBL_P(i);
          G_LINE_DETAIL_INDEX_LD_TBL(M)      :=L_LINE_DETAIL_INDEX;
          G_LIST_HEADER_ID_LD_TBL(M)         :=G_LIST_HEADER_ID_TBL_P(i);
          G_LIST_LINE_ID_LD_TBL(M)           :=G_LIST_LINE_ID_TBL_P(i);
          G_PRICING_STATUS_CODE_LD_TBL(M)    :=G_STATUS_NEW;
          G_PRICING_STATUS_TEXT_LD_TBL(M)    := 'PRODUCT_PRICING_CURRENCY';
          G_APPLIED_FLAG_LD_TBL(M)           :=G_AUTOMATIC_FLAG_TBL_P(i);
          G_PROCESSED_FLAG_LD_TBL(M)         :=G_NOT_PROCESSED;
          G_LINE_DETAIL_TYPE_CODE_TBL(M)     :='NULL';
          G_PRICE_BREAK_TYPE_CODE_TBL(M)     :=G_PRICE_BREAK_TYPE_CODE_TBL_P(i);
          G_LIST_LINE_TYPE_TBL(M)            :=G_LIST_LINE_TYPE_TBL_P(i);
          G_LIST_TYPE_CODE_TBL(M)            :=G_LIST_TYPE_CODE_TBL_P(i);
          G_CREATED_FROM_SQL_TBL(M)          :='PRODUCT_PRICING_CURRENCY';
          G_PRICING_GROUP_SEQUENCE_TBL(M)    :=G_PRICING_GROUP_SEQUENCE_TBL_P(i);
          G_PRICING_PHASE_ID_TBL(M)          :=G_PRICING_PHASE_ID_TBL_P(i);
          G_OPERAND_CALCULATION_CODE_TBL(M)  :=G_OPER_CALCULATION_CODE_TBL_P(i);
          G_OPERAND_VALUE_TBL(M)             :=G_OPERAND_VALUE_TBL_P(i);
          G_PRICE_FORMULA_ID_TBL(M)          :=G_PRICE_FORMULA_ID_TBL_P(i);
          G_PRODUCT_PRECEDENCE_TBL(M)        :=G_PRODUCT_PRECEDENCE_TBL_P(i);
          G_INCOMP_GRP_CODE_TBL(M)           :=G_INCOMP_GRP_CODE_TBL_P(i);
          G_AUTOMATIC_FLAG_TBL(M)            :=G_AUTOMATIC_FLAG_TBL_P(i);
          G_PRIMARY_UOM_FLAG_TBL(M)          :=G_PRIMARY_UOM_FLAG_TBL_P(i);
          G_MODIFIER_LEVEL_CODE_TBL(M)       :=G_MODIFIER_LEVEL_CODE_TBL_P(i);
          G_LIST_LINE_NO_TBL(M)              :=G_LIST_LINE_NO_TBL_P(i);
          G_ROUNDING_FACTOR_TBL(M)           :=G_ROUNDING_FACTOR_TBL_P(i);
          G_CURRENCY_DETAIL_ID_TBL(M)        := G_CURRENCY_DETAIL_ID_TBL_P(i);
          G_CURRENCY_HEADER_ID_TBL(M)        := G_CURRENCY_HEADER_ID_TBL_P(i);
          G_SELLING_ROUNDING_TBL(M)          := G_SELLING_ROUNDING_TBL_P(i);
          G_ORDER_CURRENCY_TBL(M)            := G_ORDER_CURRENCY_TBL_P(i);
          G_BASE_CURRENCY_CODE_TBL(M)        := G_BASE_CURRENCY_CODE_TBL_P(i);
          G_PRICING_EFFECTIVE_DATE_TBL(M)    := G_PRICING_EFFECTIVE_DATE_TBL_P(i);
          G_BREAK_UOM_TBL(M)                 := G_BREAK_UOM_TBL_P(i); /* Proration */
          G_BREAK_CONTEXT_TBL(M)             := G_BREAK_CONTEXT_TBL_P(i); /* Proration */
          G_BREAK_ATTRIBUTE_TBL(M)           := G_BREAK_ATTRIBUTE_TBL_P(i); /* Proration */

          M:=M+1;
          lq_line_index := G_LINE_INDEX_TBL_P(i);
          lq_list_line_id := G_LIST_LINE_ID_TBL_P(i);
        end if;

        -- set product attributes
        G_LINE_INDEX_tbl(K)              := G_LINE_INDEX_TBL_P(i);
        G_ATTRIBUTE_LEVEL_tbl(K)         := G_ATTRIBUTE_LEVEL_TBL_P(i);
        G_ATTRIBUTE_TYPE_tbl(K)          := G_ATTRIBUTE_TYPE_TBL_P(i);
        G_CONTEXT_tbl(K)                 := G_CONTEXT_TBL_P(i);
        G_ATTRIBUTE_tbl(K)               := G_ATTRIBUTE_TBL_P(i);
        G_VALUE_FROM_tbl(K)              := G_VALUE_FROM_TBL_P(i);
        G_COMPARISON_OPERATOR_TYPE_tbl(K):=NULL;
        G_VALIDATED_FLAG_tbl(K)          := G_NO;
        G_APPLIED_FLAG_tbl(K)            := G_APPLIED_FLAG_TBL_P(i);
        G_PRICING_STATUS_CODE_tbl(K)     := G_STATUS_NEW;
        G_PRICING_ATTR_FLAG_tbl(K)       := G_NO;
        G_LINE_DETAIL_INDEX_tbl(K)       :=L_LINE_DETAIL_INDEX;
        G_LIST_HEADER_ID_tbl(K)          :=G_LIST_HEADER_ID_TBL_P(i);
        G_LIST_LINE_ID_tbl(K)            :=G_LIST_LINE_ID_TBL_P(i);
        G_SETUP_VALUE_FROM_tbl(K)        :=NULL;
        G_SETUP_VALUE_TO_tbl(K)          :=NULL;
        G_GROUPING_NUMBER_tbl(K)         :=NULL;
        G_PRICING_STATUS_TEXT_tbl(K)     :='PRODUCT_PRICING_CURRENCY';
        G_QUALIFIER_PRECEDENCE_tbl(K)    :=NULL;
        G_DATATYPE_tbl(K)                :=NULL;
        G_EXCLUDER_FLAG_TBL(K)           :=G_EXCLUDER_FLAG_TBL_P(i);
        G_PRODUCT_UOM_CODE_TBL(K)        :=G_PRODUCT_UOM_CODE_TBL_P(i);
        --G_QUALIFIER_TYPE_TBL(K)          :=G_QUALIFIER_TYPE_TBL_Q(i); -- fix bug 2767927 big search failed with no data found
        G_QUALIFIER_TYPE_TBL(K)          :=null;
        G_PRICING_PHASE_ID_TBL_A(K)      :=G_PRICING_PHASE_ID_TBL_P(i);
        G_INCOMP_GRP_CODE_TBL_A(K)       :=G_INCOMP_GRP_CODE_TBL_P(i);
        G_LINE_DETAIL_TYPE_CODE_TBL_A(K) :='NULL';
        G_MODIFIER_LEVEL_CODE_TBL_A(K)   :=G_MODIFIER_LEVEL_CODE_TBL_P(i);
        G_PRIMARY_UOM_FLAG_TBL_A(K)      :=G_PRIMARY_UOM_FLAG_TBL_P(i);
        K:= K+1;
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug('The value of K: ' || K);

        END IF;
        --set pricing attributes
        IF (G_CONTEXT_TBL_PR(I) IS NOT NULL) THEN
         G_LINE_INDEX_tbl(K)              :=G_LINE_INDEX_TBL_P(I);
         G_ATTRIBUTE_LEVEL_tbl(K)         :=G_ATTRIBUTE_LEVEL_TBL_PR(I);
         G_ATTRIBUTE_TYPE_tbl(K)          :=G_ATTRIBUTE_TYPE_TBL_PR(I);
         G_CONTEXT_tbl(K)                 :=G_CONTEXT_TBL_PR(I);
         G_ATTRIBUTE_tbl(K)               :=G_ATTRIBUTE_TBL_PR(I);
         G_VALUE_FROM_tbl(K)              :=G_VALUE_FROM_TBL_PR(I);
         G_COMPARISON_OPERATOR_TYPE_tbl(K):=G_OPERATOR_TYPE_TBL_PR(I);
         G_VALIDATED_FLAG_tbl(K)          :=G_NO;
         G_APPLIED_FLAG_tbl(K)            :=G_APPLIED_FLAG_TBL_P(I);
         G_PRICING_STATUS_CODE_tbl(K)     :=G_STATUS_NEW;
         G_PRICING_ATTR_FLAG_tbl(K)       :=G_YES;
         G_LINE_DETAIL_INDEX_tbl(K)       :=L_LINE_DETAIL_INDEX;
         G_LIST_HEADER_ID_tbl(K)          :=G_LIST_HEADER_ID_TBL_P(I);
         G_LIST_LINE_ID_tbl(K)            :=G_LIST_LINE_ID_TBL_P(I);
         G_SETUP_VALUE_FROM_tbl(K)        :=G_SETUP_VALUE_FROM_TBL_PR(I);
         G_SETUP_VALUE_TO_tbl(K)          :=G_SETUP_VALUE_TO_TBL_PR(I);
         G_GROUPING_NUMBER_tbl(K)         :=NULL;
         G_PRICING_STATUS_TEXT_tbl(K)     :='PRODUCT_PRICING_CURRENCY';
         G_QUALIFIER_PRECEDENCE_tbl(K)    :=NULL;
         G_DATATYPE_tbl(K)                :=G_DATATYPE_TBL_PR(I);
         G_EXCLUDER_FLAG_TBL(K)           :=G_EXCLUDER_FLAG_TBL_P(I);
         G_PRODUCT_UOM_CODE_TBL(K)        :=G_PRODUCT_UOM_CODE_TBL_P(I);
         G_QUALIFIER_TYPE_TBL(K)          :=NULL;
         G_PRICING_PHASE_ID_TBL_A(K)        :=G_PRICING_PHASE_ID_TBL_P(I);
         G_INCOMP_GRP_CODE_TBL_A(K)         :=G_INCOMP_GRP_CODE_TBL_P(I);
         G_LINE_DETAIL_TYPE_CODE_TBL_A(K)   :='NULL';
         G_MODIFIER_LEVEL_CODE_TBL_A(K)     :=G_MODIFIER_LEVEL_CODE_TBL_P(I);
         G_PRIMARY_UOM_FLAG_TBL_A(K)        :=G_PRIMARY_UOM_FLAG_TBL_P(I);
         K:= K+1;
       END IF;
       IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
       engine_debug('The value of K: ' || K);
       END IF;
      end loop;
    end if;
  END LOOP;
  qp_debug_util.tstop('L_PROD_PRIC_CUR_CURRENCY');
  CLOSE l_prod_pric_cur_currency; -- 4331801/4365538
else -- vivek, multi currency not installed, not used
  --selecting lists that match product and qualifiers attributes

  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
       engine_debug('before l_prod_qual_cur...');
       END IF;
  qp_debug_util.tstart('L_PROD_QUAL_CUR','Cursor Loop l_prod_qual_cur');
  OPEN l_prod_qual_cur(p_pricing_phase_id);

  LOOP
    /* 4331801/4365538: The PL/SQL tables used for BULK COLLECT were previously
       deleted here.  There is no need to explicitly delete since BULK COLLECT
       will truncate the data before populating. */

    -- fetch into _P and _Q tables here
    FETCH l_prod_qual_cur BULK COLLECT INTO
      G_LIST_HEADER_ID_TBL_P,
      G_LIST_LINE_ID_TBL_P,
      G_LIST_LINE_TYPE_TBL_P,
      G_LINE_INDEX_TBL_P,
      G_APPLIED_FLAG_TBL_P,
      G_ATTRIBUTE_LEVEL_TBL_P,
      G_ATTRIBUTE_TYPE_TBL_P,
      G_CONTEXT_TBL_P,
      G_ATTRIBUTE_TBL_P,
      G_VALUE_FROM_TBL_P,
      G_PRODUCT_UOM_CODE_TBL_P,
      G_EXCLUDER_FLAG_TBL_P,
      G_CONTEXT_TBL_Q,
      G_ATTRIBUTE_TBL_Q,
      G_VALUE_FROM_TBL_Q,
      G_GROUPING_NO_TBL_Q,
      G_QUALIFIER_PRECEDENCE_TBL_Q,
      G_DATATYPE_TBL_Q,
      G_SETUP_VALUE_FROM_TBL_Q,
      G_SETUP_VALUE_TO_TBL_Q,
      G_AUTOMATIC_FLAG_TBL_P,
      G_MODIFIER_LEVEL_CODE_TBL_P,
      G_PRIMARY_UOM_FLAG_TBL_P,
      G_OPER_CALCULATION_CODE_TBL_P,
      G_OPERAND_VALUE_TBL_P,
      G_PRICING_GROUP_SEQUENCE_TBL_P,
      G_LIST_TYPE_CODE_TBL_P,
      G_ROUNDING_FACTOR_TBL_P,
      G_PRICING_PHASE_ID_TBL_P,
      G_PRICE_BREAK_TYPE_CODE_TBL_P,
      G_INCOMP_GRP_CODE_TBL_P,
      G_PRICE_FORMULA_ID_TBL_P,
      G_PRODUCT_PRECEDENCE_TBL_P,
      G_LIST_LINE_NO_TBL_P,
      G_QUALIFIER_TYPE_TBL_Q
     ,G_BREAK_UOM_TBL_P /* Proration */
     ,G_BREAK_CONTEXT_TBL_P /* Proration */
     ,G_BREAK_ATTRIBUTE_TBL_P /* Proration */
      LIMIT nROWS;

    EXIT WHEN G_LINE_INDEX_TBL_P.COUNT = 0;

    if (G_LINE_INDEX_TBL_P.COUNT > 0) then
      for i in G_LINE_INDEX_TBL_P.FIRST .. G_LINE_INDEX_TBL_P.LAST loop
        if (lq_line_index <> G_LINE_INDEX_TBL_P(i) or lq_list_line_id <> G_LIST_LINE_ID_TBL_P(i)) then
          IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
          engine_debug('Product_Qualifier');
          END IF;
          l_prod_qual_count := l_prod_qual_count + 1;
          L_LINE_DETAIL_INDEX :=GET_LINE_DETAIL_INDEX;

          -- set attributes
          G_LINE_INDEX_LD_TBL(M)             :=G_LINE_INDEX_TBL_P(i);
          G_LINE_DETAIL_INDEX_LD_TBL(M)      :=L_LINE_DETAIL_INDEX;
          G_LIST_HEADER_ID_LD_TBL(M)         :=G_LIST_HEADER_ID_TBL_P(i);
          G_LIST_LINE_ID_LD_TBL(M)           :=G_LIST_LINE_ID_TBL_P(i);
          G_PRICING_STATUS_CODE_LD_TBL(M)    :=G_STATUS_NEW;
          G_PRICING_STATUS_TEXT_LD_TBL(M)    := 'PRODUCT_QUALIFIER';
          G_APPLIED_FLAG_LD_TBL(M)           :=G_AUTOMATIC_FLAG_TBL_P(i);
          G_PROCESSED_FLAG_LD_TBL(M)         :=G_NOT_PROCESSED;
          G_LINE_DETAIL_TYPE_CODE_TBL(M)     :='NULL';
          G_PRICE_BREAK_TYPE_CODE_TBL(M)     :=G_PRICE_BREAK_TYPE_CODE_TBL_P(i);
          G_LIST_LINE_TYPE_TBL(M)            :=G_LIST_LINE_TYPE_TBL_P(i);
          G_LIST_TYPE_CODE_TBL(M)            :=G_LIST_TYPE_CODE_TBL_P(i);
          G_CREATED_FROM_SQL_TBL(M)          :='PRODUCT_QUALIFIER';
          G_PRICING_GROUP_SEQUENCE_TBL(M)    :=G_PRICING_GROUP_SEQUENCE_TBL_P(i);
          G_PRICING_PHASE_ID_TBL(M)          :=G_PRICING_PHASE_ID_TBL_P(i);
          G_OPERAND_CALCULATION_CODE_TBL(M)  :=G_OPER_CALCULATION_CODE_TBL_P(i);
          G_OPERAND_VALUE_TBL(M)             :=G_OPERAND_VALUE_TBL_P(i);
          G_PRICE_FORMULA_ID_TBL(M)          :=G_PRICE_FORMULA_ID_TBL_P(i);
          G_PRODUCT_PRECEDENCE_TBL(M)        :=G_PRODUCT_PRECEDENCE_TBL_P(i);
          G_INCOMP_GRP_CODE_TBL(M)           :=G_INCOMP_GRP_CODE_TBL_P(i);
          G_AUTOMATIC_FLAG_TBL(M)            :=G_AUTOMATIC_FLAG_TBL_P(i);
          G_PRIMARY_UOM_FLAG_TBL(M)          :=G_PRIMARY_UOM_FLAG_TBL_P(i);
          G_MODIFIER_LEVEL_CODE_TBL(M)       :=G_MODIFIER_LEVEL_CODE_TBL_P(i);
          G_LIST_LINE_NO_TBL(M)              :=G_LIST_LINE_NO_TBL_P(i);
          G_ROUNDING_FACTOR_TBL(M)           :=G_ROUNDING_FACTOR_TBL_P(i);
          G_BREAK_UOM_TBL(M)                 := G_BREAK_UOM_TBL_P(i); /* Proration */
          G_BREAK_CONTEXT_TBL(M)             := G_BREAK_CONTEXT_TBL_P(i); /* Proration */
          G_BREAK_ATTRIBUTE_TBL(M)           := G_BREAK_ATTRIBUTE_TBL_P(i); /* Proration */

          M:=M+1;
          lq_line_index := G_LINE_INDEX_TBL_P(i);
          lq_list_line_id := G_LIST_LINE_ID_TBL_P(i);
        end if;

        -- set product attributes
        G_LINE_INDEX_tbl(K)              := G_LINE_INDEX_TBL_P(i);
        G_ATTRIBUTE_LEVEL_tbl(K)         := G_ATTRIBUTE_LEVEL_TBL_P(i);
        G_ATTRIBUTE_TYPE_tbl(K)          := G_ATTRIBUTE_TYPE_TBL_P(i);
        G_CONTEXT_tbl(K)                 := G_CONTEXT_TBL_P(i);
        G_ATTRIBUTE_tbl(K)               := G_ATTRIBUTE_TBL_P(i);
        G_VALUE_FROM_tbl(K)              := G_VALUE_FROM_TBL_P(i);
        G_COMPARISON_OPERATOR_TYPE_tbl(K):=NULL;
        G_VALIDATED_FLAG_tbl(K)          := G_NO;
        G_APPLIED_FLAG_tbl(K)            := G_APPLIED_FLAG_TBL_P(i);
        G_PRICING_STATUS_CODE_tbl(K)     := G_STATUS_NEW;
        G_PRICING_ATTR_FLAG_tbl(K)       := G_NO;
        G_LINE_DETAIL_INDEX_tbl(K)       :=L_LINE_DETAIL_INDEX;
        G_LIST_HEADER_ID_tbl(K)          :=G_LIST_HEADER_ID_TBL_P(i);
        G_LIST_LINE_ID_tbl(K)            :=G_LIST_LINE_ID_TBL_P(i);
        G_SETUP_VALUE_FROM_tbl(K)        :=NULL;
        G_SETUP_VALUE_TO_tbl(K)          :=NULL;
        G_GROUPING_NUMBER_tbl(K)         :=NULL;
        G_PRICING_STATUS_TEXT_tbl(K)     :='PRODUCT_QUALIFIER';
        G_QUALIFIER_PRECEDENCE_tbl(K)    :=NULL;
        G_DATATYPE_tbl(K)                :=NULL;
        G_EXCLUDER_FLAG_TBL(K)           :=G_EXCLUDER_FLAG_TBL_P(i);
        G_PRODUCT_UOM_CODE_TBL(K)        :=G_PRODUCT_UOM_CODE_TBL_P(i);
        G_QUALIFIER_TYPE_TBL(K)          :=G_QUALIFIER_TYPE_TBL_Q(i);
        G_PRICING_PHASE_ID_TBL_A(K)      :=G_PRICING_PHASE_ID_TBL_P(i);
        G_INCOMP_GRP_CODE_TBL_A(K)       :=G_INCOMP_GRP_CODE_TBL_P(i);
        G_LINE_DETAIL_TYPE_CODE_TBL_A(K) :='NULL';
        G_MODIFIER_LEVEL_CODE_TBL_A(K)   :=G_MODIFIER_LEVEL_CODE_TBL_P(i);
        G_PRIMARY_UOM_FLAG_TBL_A(K)      :=G_PRIMARY_UOM_FLAG_TBL_P(i);
        K:= K+1;
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug('The value of K: ' || K);

        END IF;
        -- set qualifier attributes
        G_LINE_INDEX_tbl(K)              := G_LINE_INDEX_TBL_P(i);
        G_ATTRIBUTE_LEVEL_tbl(K)         := nvl(G_ATTRIBUTE_LEVEL_TBL_P(i),'X');
        G_ATTRIBUTE_TYPE_tbl(K)          := G_QUALIFIER_TYPE;
        G_CONTEXT_tbl(K)                 := G_CONTEXT_TBL_Q(i);
        G_ATTRIBUTE_tbl(K)               := G_ATTRIBUTE_TBL_Q(i);
        G_VALUE_FROM_tbl(K)              := G_VALUE_FROM_TBL_Q(i);
        G_COMPARISON_OPERATOR_TYPE_tbl(K):=NULL;
        G_VALIDATED_FLAG_tbl(K)          := G_NO;
        G_APPLIED_FLAG_tbl(K)            := G_APPLIED_FLAG_TBL_P(i);
        G_PRICING_STATUS_CODE_tbl(K)     := G_STATUS_NEW;
        G_PRICING_ATTR_FLAG_tbl(K)       := G_NO;
        G_LINE_DETAIL_INDEX_tbl(K)       := L_LINE_DETAIL_INDEX;
        G_LIST_HEADER_ID_tbl(K)          := G_LIST_HEADER_ID_TBL_P(i);
        G_LIST_LINE_ID_tbl(K)            := G_LIST_LINE_ID_TBL_P(i);
        G_SETUP_VALUE_FROM_tbl(K)        := G_SETUP_VALUE_FROM_TBL_Q(i);
        G_SETUP_VALUE_TO_tbl(K)          := G_SETUP_VALUE_TO_TBL_Q(i);
        G_GROUPING_NUMBER_tbl(K)         := G_GROUPING_NO_TBL_Q(i);
        G_PRICING_STATUS_TEXT_tbl(K)     := 'PRODUCT_QUALIFIER';
        G_QUALIFIER_PRECEDENCE_tbl(K)    := G_QUALIFIER_PRECEDENCE_TBL_Q(i);
        G_DATATYPE_tbl(K)                := G_DATATYPE_TBL_Q(i);
        G_EXCLUDER_FLAG_TBL(K)           := G_EXCLUDER_FLAG_TBL_P(i);
        G_PRODUCT_UOM_CODE_TBL(K)        := G_PRODUCT_UOM_CODE_TBL_P(i);
        G_QUALIFIER_TYPE_TBL(K)          := G_QUALIFIER_TYPE_TBL_Q(i);
        G_PRICING_PHASE_ID_TBL_A(K)      := G_PRICING_PHASE_ID_TBL_P(i);
        G_INCOMP_GRP_CODE_TBL_A(K)       := G_INCOMP_GRP_CODE_TBL_P(i);
        G_LINE_DETAIL_TYPE_CODE_TBL_A(K) := 'NULL';
        G_MODIFIER_LEVEL_CODE_TBL_A(K)   := G_MODIFIER_LEVEL_CODE_TBL_P(i);
        G_PRIMARY_UOM_FLAG_TBL_A(K)      := G_PRIMARY_UOM_FLAG_TBL_P(i);
        K:= K+1;
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug('The value of K: ' || K);

        END IF;
      end loop;
    end if;
  END LOOP;
  qp_debug_util.tstop('L_PROD_QUAL_CUR');

  CLOSE l_prod_qual_cur;

  lq_line_index              := -9999;
  lq_list_line_id            := -9999;

  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
       engine_debug('before l_prod_qual_pric_cur...');
  END IF;
  qp_debug_util.tstart('L_PROD_QUAL_PRIC_CUR','Cursor Loop l_prod_qual_pric_cur');
  OPEN l_prod_qual_pric_cur(p_pricing_phase_id);

  LOOP
    /* 4331801/4365538: The PL/SQL tables used for BULK COLLECT were previously
       deleted here.  There is no need to explicitly delete since BULK COLLECT
       will truncate the data before populating. */

    -- fetch into _P , _Q tables and _PR tables here
    FETCH l_prod_qual_pric_cur BULK COLLECT INTO
      G_LIST_HEADER_ID_TBL_P,
      G_LIST_LINE_ID_TBL_P,
      G_LIST_LINE_TYPE_TBL_P,
      G_LINE_INDEX_TBL_P,
      G_APPLIED_FLAG_TBL_P,
      G_ATTRIBUTE_LEVEL_TBL_P,
      G_ATTRIBUTE_TYPE_TBL_P,
      G_CONTEXT_TBL_P,
      G_ATTRIBUTE_TBL_P,
      G_VALUE_FROM_TBL_P,
      G_PRODUCT_UOM_CODE_TBL_P,
      G_EXCLUDER_FLAG_TBL_P,
      G_CONTEXT_TBL_Q,
      G_ATTRIBUTE_TBL_Q,
      G_VALUE_FROM_TBL_Q,
      G_GROUPING_NO_TBL_Q,
      G_QUALIFIER_PRECEDENCE_TBL_Q,
      G_DATATYPE_TBL_Q,
      G_SETUP_VALUE_FROM_TBL_Q,
      G_SETUP_VALUE_TO_TBL_Q,
      G_AUTOMATIC_FLAG_TBL_P,
      G_MODIFIER_LEVEL_CODE_TBL_P,
      G_PRIMARY_UOM_FLAG_TBL_P,
      G_OPER_CALCULATION_CODE_TBL_P,
      G_OPERAND_VALUE_TBL_P,
      G_PRICING_GROUP_SEQUENCE_TBL_P,
      G_LIST_TYPE_CODE_TBL_P,
      G_ROUNDING_FACTOR_TBL_P,
      G_PRICING_PHASE_ID_TBL_P,
      G_PRICE_BREAK_TYPE_CODE_TBL_P,
      G_INCOMP_GRP_CODE_TBL_P,
      G_PRICE_FORMULA_ID_TBL_P,
      G_PRODUCT_PRECEDENCE_TBL_P,
      G_LIST_LINE_NO_TBL_P,
      G_QUALIFIER_TYPE_TBL_Q ,
      G_ATTRIBUTE_LEVEL_TBL_PR,
      G_ATTRIBUTE_TYPE_TBL_PR,
      G_CONTEXT_TBL_PR,
      G_ATTRIBUTE_TBL_PR,
      G_VALUE_FROM_TBL_PR,
      G_SETUP_VALUE_FROM_TBL_PR,
      G_SETUP_VALUE_TO_TBL_PR,
      G_OPERATOR_TYPE_TBL_PR,
      G_DATATYPE_TBL_PR
     ,G_BREAK_UOM_TBL_P /* Proration */
     ,G_BREAK_CONTEXT_TBL_P /* Proration */
     ,G_BREAK_ATTRIBUTE_TBL_P /* Proration */
      LIMIT nROWS;
    EXIT WHEN G_LINE_INDEX_TBL_P.COUNT = 0;

    if (G_LINE_INDEX_TBL_P.COUNT > 0) then
      for i in G_LINE_INDEX_TBL_P.FIRST .. G_LINE_INDEX_TBL_P.LAST loop
        if (lq_line_index <> G_LINE_INDEX_TBL_P(i) or lq_list_line_id <> G_LIST_LINE_ID_TBL_P(i)) then
          IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
          engine_debug('Product_Qualifier_Pricing');
          END IF;
          l_prod_qual_count := l_prod_qual_count + 1;
          L_LINE_DETAIL_INDEX :=GET_LINE_DETAIL_INDEX;

          -- set attributes
          G_LINE_INDEX_LD_TBL(M)             :=G_LINE_INDEX_TBL_P(i);
          G_LINE_DETAIL_INDEX_LD_TBL(M)      :=L_LINE_DETAIL_INDEX;
          G_LIST_HEADER_ID_LD_TBL(M)         :=G_LIST_HEADER_ID_TBL_P(i);
          G_LIST_LINE_ID_LD_TBL(M)           :=G_LIST_LINE_ID_TBL_P(i);
          G_PRICING_STATUS_CODE_LD_TBL(M)    :=G_STATUS_NEW;
          G_PRICING_STATUS_TEXT_LD_TBL(M)    := 'PRODUCT_QUALIFIER_PRICING';
          G_APPLIED_FLAG_LD_TBL(M)           :=G_AUTOMATIC_FLAG_TBL_P(i);
          G_PROCESSED_FLAG_LD_TBL(M)         :=G_NOT_PROCESSED;
          G_LINE_DETAIL_TYPE_CODE_TBL(M)     :='NULL';
          G_PRICE_BREAK_TYPE_CODE_TBL(M)     :=G_PRICE_BREAK_TYPE_CODE_TBL_P(i);
          G_LIST_LINE_TYPE_TBL(M)            :=G_LIST_LINE_TYPE_TBL_P(i);
          G_LIST_TYPE_CODE_TBL(M)            :=G_LIST_TYPE_CODE_TBL_P(i);
          G_CREATED_FROM_SQL_TBL(M)          :='PRODUCT_QUALIFIER_PRICING';
          G_PRICING_GROUP_SEQUENCE_TBL(M)    :=G_PRICING_GROUP_SEQUENCE_TBL_P(i);
          G_PRICING_PHASE_ID_TBL(M)          :=G_PRICING_PHASE_ID_TBL_P(i);
          G_OPERAND_CALCULATION_CODE_TBL(M)  :=G_OPER_CALCULATION_CODE_TBL_P(i);
          G_OPERAND_VALUE_TBL(M)             :=G_OPERAND_VALUE_TBL_P(i);
          G_PRICE_FORMULA_ID_TBL(M)          :=G_PRICE_FORMULA_ID_TBL_P(i);
          G_PRODUCT_PRECEDENCE_TBL(M)        :=G_PRODUCT_PRECEDENCE_TBL_P(i);
          G_INCOMP_GRP_CODE_TBL(M)           :=G_INCOMP_GRP_CODE_TBL_P(i);
          G_AUTOMATIC_FLAG_TBL(M)            :=G_AUTOMATIC_FLAG_TBL_P(i);
          G_PRIMARY_UOM_FLAG_TBL(M)          :=G_PRIMARY_UOM_FLAG_TBL_P(i);
          G_MODIFIER_LEVEL_CODE_TBL(M)       :=G_MODIFIER_LEVEL_CODE_TBL_P(i);
          G_LIST_LINE_NO_TBL(M)              :=G_LIST_LINE_NO_TBL_P(i);
          G_ROUNDING_FACTOR_TBL(M)           :=G_ROUNDING_FACTOR_TBL_P(i);
          G_BREAK_UOM_TBL(M)                 := G_BREAK_UOM_TBL_P(i); /* Proration */
          G_BREAK_CONTEXT_TBL(M)             := G_BREAK_CONTEXT_TBL_P(i); /* Proration */
          G_BREAK_ATTRIBUTE_TBL(M)           := G_BREAK_ATTRIBUTE_TBL_P(i); /* Proration */

          M:=M+1;
          lq_line_index := G_LINE_INDEX_TBL_P(i);
          lq_list_line_id := G_LIST_LINE_ID_TBL_P(i);
        end if;

        -- set product attributes
        G_LINE_INDEX_tbl(K)              := G_LINE_INDEX_TBL_P(i);
        G_ATTRIBUTE_LEVEL_tbl(K)         := G_ATTRIBUTE_LEVEL_TBL_P(i);
        G_ATTRIBUTE_TYPE_tbl(K)          := G_ATTRIBUTE_TYPE_TBL_P(i);
        G_CONTEXT_tbl(K)                 := G_CONTEXT_TBL_P(i);
        G_ATTRIBUTE_tbl(K)               := G_ATTRIBUTE_TBL_P(i);
        G_VALUE_FROM_tbl(K)              := G_VALUE_FROM_TBL_P(i);
        G_COMPARISON_OPERATOR_TYPE_tbl(K):= NULL;
        G_VALIDATED_FLAG_tbl(K)          := G_NO;
        G_APPLIED_FLAG_tbl(K)            := G_APPLIED_FLAG_TBL_P(i);
        G_PRICING_STATUS_CODE_tbl(K)     := G_STATUS_NEW;
        G_PRICING_ATTR_FLAG_tbl(K)       := G_NO;
        G_LINE_DETAIL_INDEX_tbl(K)       :=L_LINE_DETAIL_INDEX;
        G_LIST_HEADER_ID_tbl(K)          :=G_LIST_HEADER_ID_TBL_P(i);
        G_LIST_LINE_ID_tbl(K)            :=G_LIST_LINE_ID_TBL_P(i);
        G_SETUP_VALUE_FROM_tbl(K)        :=NULL;
        G_SETUP_VALUE_TO_tbl(K)          :=NULL;
        G_GROUPING_NUMBER_tbl(K)         :=NULL;
        G_PRICING_STATUS_TEXT_tbl(K)     :='PRODUCT_QUALIFIER_PRICING';
        G_QUALIFIER_PRECEDENCE_tbl(K)    :=NULL;
        G_DATATYPE_tbl(K)                :=NULL;
        G_EXCLUDER_FLAG_TBL(K)           :=G_EXCLUDER_FLAG_TBL_P(i);
        G_PRODUCT_UOM_CODE_TBL(K)        :=G_PRODUCT_UOM_CODE_TBL_P(i);
        G_QUALIFIER_TYPE_TBL(K)          :=G_QUALIFIER_TYPE_TBL_Q(i);
        G_PRICING_PHASE_ID_TBL_A(K)      :=G_PRICING_PHASE_ID_TBL_P(i);
        G_INCOMP_GRP_CODE_TBL_A(K)       :=G_INCOMP_GRP_CODE_TBL_P(i);
        G_LINE_DETAIL_TYPE_CODE_TBL_A(K) :='NULL';
        G_MODIFIER_LEVEL_CODE_TBL_A(K)   :=G_MODIFIER_LEVEL_CODE_TBL_P(i);
        G_PRIMARY_UOM_FLAG_TBL_A(K)      :=G_PRIMARY_UOM_FLAG_TBL_P(i);
        K:= K+1;
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug('The value of K: ' || K);

        END IF;
        -- set qualifier attributes
        G_LINE_INDEX_tbl(K)              := G_LINE_INDEX_TBL_P(i);
        G_ATTRIBUTE_LEVEL_tbl(K)         := nvl(G_ATTRIBUTE_LEVEL_TBL_P(i),'X');
        G_ATTRIBUTE_TYPE_tbl(K)          := G_QUALIFIER_TYPE;
        G_CONTEXT_tbl(K)                 := G_CONTEXT_TBL_Q(i);
        G_ATTRIBUTE_tbl(K)               := G_ATTRIBUTE_TBL_Q(i);
        G_VALUE_FROM_tbl(K)              := G_VALUE_FROM_TBL_Q(i);
        G_COMPARISON_OPERATOR_TYPE_tbl(K):= NULL;
        G_VALIDATED_FLAG_tbl(K)          := G_NO;
        G_APPLIED_FLAG_tbl(K)            := G_APPLIED_FLAG_TBL_P(i);
        G_PRICING_STATUS_CODE_tbl(K)     := G_STATUS_NEW;
        G_PRICING_ATTR_FLAG_tbl(K)       := G_NO;
        G_LINE_DETAIL_INDEX_tbl(K)       := L_LINE_DETAIL_INDEX;
        G_LIST_HEADER_ID_tbl(K)          := G_LIST_HEADER_ID_TBL_P(i);
        G_LIST_LINE_ID_tbl(K)            := G_LIST_LINE_ID_TBL_P(i);
        G_SETUP_VALUE_FROM_tbl(K)        := G_SETUP_VALUE_FROM_TBL_Q(i);
        G_SETUP_VALUE_TO_tbl(K)          := G_SETUP_VALUE_TO_TBL_Q(i);
        G_GROUPING_NUMBER_tbl(K)         := G_GROUPING_NO_TBL_Q(i);
        G_PRICING_STATUS_TEXT_tbl(K)     := 'PRODUCT_QUALIFIER_PRICING';
        G_QUALIFIER_PRECEDENCE_tbl(K)    := G_QUALIFIER_PRECEDENCE_TBL_Q(i);
        G_DATATYPE_tbl(K)                := G_DATATYPE_TBL_Q(i);
        G_EXCLUDER_FLAG_TBL(K)           := G_EXCLUDER_FLAG_TBL_P(i);
        G_PRODUCT_UOM_CODE_TBL(K)        := G_PRODUCT_UOM_CODE_TBL_P(i);
        G_QUALIFIER_TYPE_TBL(K)          := G_QUALIFIER_TYPE_TBL_Q(i);
        G_PRICING_PHASE_ID_TBL_A(K)      := G_PRICING_PHASE_ID_TBL_P(i);
        G_INCOMP_GRP_CODE_TBL_A(K)       := G_INCOMP_GRP_CODE_TBL_P(i);
        G_LINE_DETAIL_TYPE_CODE_TBL_A(K) := 'NULL';
        G_MODIFIER_LEVEL_CODE_TBL_A(K)   := G_MODIFIER_LEVEL_CODE_TBL_P(i);
        G_PRIMARY_UOM_FLAG_TBL_A(K)      := G_PRIMARY_UOM_FLAG_TBL_P(i);
        K:= K+1;

        --set pricing attributes
        IF (G_CONTEXT_TBL_PR(I) IS NOT NULL) THEN
         G_LINE_INDEX_tbl(K)              :=G_LINE_INDEX_TBL_P(I);
         G_ATTRIBUTE_LEVEL_tbl(K)         :=G_ATTRIBUTE_LEVEL_TBL_PR(I);
         G_ATTRIBUTE_TYPE_tbl(K)          :=G_ATTRIBUTE_TYPE_TBL_PR(I);
         G_CONTEXT_tbl(K)                 :=G_CONTEXT_TBL_PR(I);
         G_ATTRIBUTE_tbl(K)               :=G_ATTRIBUTE_TBL_PR(I);
         G_VALUE_FROM_tbl(K)              :=G_VALUE_FROM_TBL_PR(I);
         G_COMPARISON_OPERATOR_TYPE_tbl(K):=G_OPERATOR_TYPE_TBL_PR(I);
         G_VALIDATED_FLAG_tbl(K)          :=G_NO;
         G_APPLIED_FLAG_tbl(K)            :=G_APPLIED_FLAG_TBL_P(I);
         G_PRICING_STATUS_CODE_tbl(K)     :=G_STATUS_NEW;
         G_PRICING_ATTR_FLAG_tbl(K)       :=G_YES;
         G_LINE_DETAIL_INDEX_tbl(K)       :=L_LINE_DETAIL_INDEX;
         G_LIST_HEADER_ID_tbl(K)          :=G_LIST_HEADER_ID_TBL_P(I);
         G_LIST_LINE_ID_tbl(K)            :=G_LIST_LINE_ID_TBL_P(I);
         G_SETUP_VALUE_FROM_tbl(K)        :=G_SETUP_VALUE_FROM_TBL_PR(I);
         G_SETUP_VALUE_TO_tbl(K)          :=G_SETUP_VALUE_TO_TBL_PR(I);
         G_GROUPING_NUMBER_tbl(K)         :=NULL;
         G_PRICING_STATUS_TEXT_tbl(K)     :='PRODUCT_QUALIFIER_PRICING';
         G_QUALIFIER_PRECEDENCE_tbl(K)    :=NULL;
         G_DATATYPE_tbl(K)                :=G_DATATYPE_TBL_PR(I);
         G_EXCLUDER_FLAG_TBL(K)           :=G_EXCLUDER_FLAG_TBL_P(I);
         G_PRODUCT_UOM_CODE_TBL(K)        :=G_PRODUCT_UOM_CODE_TBL_P(I);
         G_QUALIFIER_TYPE_TBL(K)          :=NULL;
         G_PRICING_PHASE_ID_TBL_A(K)      :=G_PRICING_PHASE_ID_TBL_P(I);
         G_INCOMP_GRP_CODE_TBL_A(K)       :=G_INCOMP_GRP_CODE_TBL_P(I);
         G_LINE_DETAIL_TYPE_CODE_TBL_A(K) :='NULL';
         G_MODIFIER_LEVEL_CODE_TBL_A(K)   :=G_MODIFIER_LEVEL_CODE_TBL_P(I);
         G_PRIMARY_UOM_FLAG_TBL_A(K)      :=G_PRIMARY_UOM_FLAG_TBL_P(I);
         K:= K+1;
       END IF;
       IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
       engine_debug('The value of K: ' || K);

       END IF;
      end loop;
    end if;
  END LOOP;

  qp_debug_util.tstop('L_PROD_QUAL_PRIC_CUR');
  CLOSE l_prod_qual_pric_cur;

  lq_line_index              := -9999;
  lq_list_line_id            := -9999;

  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
       engine_debug('before l_prod_cur...');
  END IF;
  qp_debug_util.tstart('L_PROD_CUR','Cursor Loop l_prod_cur');
  OPEN l_prod_cur(p_pricing_phase_id);

  LOOP
    /* 4331801/4365538: The PL/SQL tables used for BULK COLLECT were previously
       deleted here.  There is no need to explicitly delete since BULK COLLECT
       will truncate the data before populating. */

    -- fetch into _P and _Q tables here
    FETCH l_prod_cur BULK COLLECT INTO
      G_LIST_HEADER_ID_TBL_P,
      G_LIST_LINE_ID_TBL_P,
      G_LIST_LINE_TYPE_TBL_P,
      G_LINE_INDEX_TBL_P,
      G_APPLIED_FLAG_TBL_P,
      G_ATTRIBUTE_LEVEL_TBL_P,
      G_ATTRIBUTE_TYPE_TBL_P,
      G_CONTEXT_TBL_P,
      G_ATTRIBUTE_TBL_P,
      G_VALUE_FROM_TBL_P,
      G_PRODUCT_UOM_CODE_TBL_P,
      G_EXCLUDER_FLAG_TBL_P,
      G_AUTOMATIC_FLAG_TBL_P,
      G_MODIFIER_LEVEL_CODE_TBL_P,
      G_PRIMARY_UOM_FLAG_TBL_P,
      G_OPER_CALCULATION_CODE_TBL_P,
      G_OPERAND_VALUE_TBL_P,
      G_PRICING_GROUP_SEQUENCE_TBL_P,
      G_LIST_TYPE_CODE_TBL_P,
      G_ROUNDING_FACTOR_TBL_P,
      G_PRICING_PHASE_ID_TBL_P,
      G_PRICE_BREAK_TYPE_CODE_TBL_P,
      G_INCOMP_GRP_CODE_TBL_P,
      G_PRICE_FORMULA_ID_TBL_P,
      G_PRODUCT_PRECEDENCE_TBL_P,
      G_LIST_LINE_NO_TBL_P
     ,G_BREAK_UOM_TBL_P /* Proration */
     ,G_BREAK_CONTEXT_TBL_P /* Proration */
     ,G_BREAK_ATTRIBUTE_TBL_P /* Proration */
      LIMIT nROWS;

    EXIT WHEN G_LINE_INDEX_TBL_P.COUNT = 0;

    if (G_LINE_INDEX_TBL_P.COUNT > 0) then
      for i in G_LINE_INDEX_TBL_P.FIRST .. G_LINE_INDEX_TBL_P.LAST loop
        if (lq_line_index <> G_LINE_INDEX_TBL_P(i) or lq_list_line_id <> G_LIST_LINE_ID_TBL_P(i)) then
          IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
          engine_debug('Product Only');
          END IF;
          l_prod_qual_count := l_prod_qual_count + 1;
          L_LINE_DETAIL_INDEX :=GET_LINE_DETAIL_INDEX;

          -- set attributes
          G_LINE_INDEX_LD_TBL(M)             :=G_LINE_INDEX_TBL_P(i);
          G_LINE_DETAIL_INDEX_LD_TBL(M)      :=L_LINE_DETAIL_INDEX;
          G_LIST_HEADER_ID_LD_TBL(M)         :=G_LIST_HEADER_ID_TBL_P(i);
          G_LIST_LINE_ID_LD_TBL(M)           :=G_LIST_LINE_ID_TBL_P(i);
          G_PRICING_STATUS_CODE_LD_TBL(M)    :=G_STATUS_NEW;
          G_PRICING_STATUS_TEXT_LD_TBL(M)    := 'PRODUCT_ONLY';
          G_APPLIED_FLAG_LD_TBL(M)           :=G_AUTOMATIC_FLAG_TBL_P(i);
          G_PROCESSED_FLAG_LD_TBL(M)         :=G_NOT_PROCESSED;
          G_LINE_DETAIL_TYPE_CODE_TBL(M)     :='NULL';
          G_PRICE_BREAK_TYPE_CODE_TBL(M)     :=G_PRICE_BREAK_TYPE_CODE_TBL_P(i);
          G_LIST_LINE_TYPE_TBL(M)            :=G_LIST_LINE_TYPE_TBL_P(i);
          G_LIST_TYPE_CODE_TBL(M)            :=G_LIST_TYPE_CODE_TBL_P(i);
          G_CREATED_FROM_SQL_TBL(M)          :='PRODUCT_ONLY';
          G_PRICING_GROUP_SEQUENCE_TBL(M)    :=G_PRICING_GROUP_SEQUENCE_TBL_P(i);
          G_PRICING_PHASE_ID_TBL(M)          :=G_PRICING_PHASE_ID_TBL_P(i);
          G_OPERAND_CALCULATION_CODE_TBL(M)  :=G_OPER_CALCULATION_CODE_TBL_P(i);
          G_OPERAND_VALUE_TBL(M)             :=G_OPERAND_VALUE_TBL_P(i);
          G_PRICE_FORMULA_ID_TBL(M)          :=G_PRICE_FORMULA_ID_TBL_P(i);
          G_PRODUCT_PRECEDENCE_TBL(M)        :=G_PRODUCT_PRECEDENCE_TBL_P(i);
          G_INCOMP_GRP_CODE_TBL(M)           :=G_INCOMP_GRP_CODE_TBL_P(i);
          G_AUTOMATIC_FLAG_TBL(M)            :=G_AUTOMATIC_FLAG_TBL_P(i);
          G_PRIMARY_UOM_FLAG_TBL(M)          :=G_PRIMARY_UOM_FLAG_TBL_P(i);
          G_MODIFIER_LEVEL_CODE_TBL(M)       :=G_MODIFIER_LEVEL_CODE_TBL_P(i);
          G_LIST_LINE_NO_TBL(M)              :=G_LIST_LINE_NO_TBL_P(i);
          G_ROUNDING_FACTOR_TBL(M)           :=G_ROUNDING_FACTOR_TBL_P(i);
          G_BREAK_UOM_TBL(M)                 := G_BREAK_UOM_TBL_P(i); /* Proration */
          G_BREAK_CONTEXT_TBL(M)             := G_BREAK_CONTEXT_TBL_P(i); /* Proration */
          G_BREAK_ATTRIBUTE_TBL(M)           := G_BREAK_ATTRIBUTE_TBL_P(i); /* Proration */

          M:=M+1;
          lq_line_index := G_LINE_INDEX_TBL_P(i);
          lq_list_line_id := G_LIST_LINE_ID_TBL_P(i);
        end if;

        -- set product attributes
        G_LINE_INDEX_tbl(K)              := G_LINE_INDEX_TBL_P(i);
        G_ATTRIBUTE_LEVEL_tbl(K)         := G_ATTRIBUTE_LEVEL_TBL_P(i);
        G_ATTRIBUTE_TYPE_tbl(K)          := G_ATTRIBUTE_TYPE_TBL_P(i);
        G_CONTEXT_tbl(K)                 := G_CONTEXT_TBL_P(i);
        G_ATTRIBUTE_tbl(K)               := G_ATTRIBUTE_TBL_P(i);
        G_VALUE_FROM_tbl(K)              := G_VALUE_FROM_TBL_P(i);
        G_COMPARISON_OPERATOR_TYPE_tbl(K):=NULL;
        G_VALIDATED_FLAG_tbl(K)          := G_NO;
        G_APPLIED_FLAG_tbl(K)            := G_APPLIED_FLAG_TBL_P(i);
        G_PRICING_STATUS_CODE_tbl(K)     := G_STATUS_NEW;
        G_PRICING_ATTR_FLAG_tbl(K)       := G_NO;
        G_LINE_DETAIL_INDEX_tbl(K)       :=L_LINE_DETAIL_INDEX;
        G_LIST_HEADER_ID_tbl(K)          :=G_LIST_HEADER_ID_TBL_P(i);
        G_LIST_LINE_ID_tbl(K)            :=G_LIST_LINE_ID_TBL_P(i);
        G_SETUP_VALUE_FROM_tbl(K)        :=NULL;
        G_SETUP_VALUE_TO_tbl(K)          :=NULL;
        G_GROUPING_NUMBER_tbl(K)         :=NULL;
        G_PRICING_STATUS_TEXT_tbl(K)     :='PRODUCT_ONLY';
        G_QUALIFIER_PRECEDENCE_tbl(K)    :=NULL;
        G_DATATYPE_tbl(K)                :=NULL;
        G_EXCLUDER_FLAG_TBL(K)           :=G_EXCLUDER_FLAG_TBL_P(i);
        G_PRODUCT_UOM_CODE_TBL(K)        :=G_PRODUCT_UOM_CODE_TBL_P(i);
        G_QUALIFIER_TYPE_TBL(K)          :=NULL;
        G_PRICING_PHASE_ID_TBL_A(K)      :=G_PRICING_PHASE_ID_TBL_P(i);
        G_INCOMP_GRP_CODE_TBL_A(K)       :=G_INCOMP_GRP_CODE_TBL_P(i);
        G_LINE_DETAIL_TYPE_CODE_TBL_A(K) :='NULL';
        G_MODIFIER_LEVEL_CODE_TBL_A(K)   :=G_MODIFIER_LEVEL_CODE_TBL_P(i);
        G_PRIMARY_UOM_FLAG_TBL_A(K)      :=G_PRIMARY_UOM_FLAG_TBL_P(i);
        K:= K+1;
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug('The value of K: ' || K);

        END IF;
      end loop;
    end if;
  END LOOP;
  qp_debug_util.tstop('L_PROD_CUR');
  CLOSE l_prod_cur;

  lq_line_index              := -9999;
  lq_list_line_id            := -9999;

  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
       engine_debug('before l_prod_pric_cur...');
  END IF;
  qp_debug_util.tstart('L_PROD_PRIC_CUR','Cursor Loop l_prod_pric_cur');
  OPEN l_prod_pric_cur(p_pricing_phase_id);


  LOOP
    /* 4331801/4365538: The PL/SQL tables used for BULK COLLECT were previously
       deleted here.  There is no need to explicitly delete since BULK COLLECT
       will truncate the data before populating. */

    -- fetch into _P , and  _PR tables here
    FETCH l_prod_pric_cur BULK COLLECT INTO
      G_LIST_HEADER_ID_TBL_P,
      G_LIST_LINE_ID_TBL_P,
      G_LIST_LINE_TYPE_TBL_P,
      G_LINE_INDEX_TBL_P,
      G_APPLIED_FLAG_TBL_P,
      G_ATTRIBUTE_LEVEL_TBL_P,
      G_ATTRIBUTE_TYPE_TBL_P,
      G_CONTEXT_TBL_P,
      G_ATTRIBUTE_TBL_P,
      G_VALUE_FROM_TBL_P,
      G_PRODUCT_UOM_CODE_TBL_P,
      G_EXCLUDER_FLAG_TBL_P,
      G_AUTOMATIC_FLAG_TBL_P,
      G_MODIFIER_LEVEL_CODE_TBL_P,
      G_PRIMARY_UOM_FLAG_TBL_P,
      G_OPER_CALCULATION_CODE_TBL_P,
      G_OPERAND_VALUE_TBL_P,
      G_PRICING_GROUP_SEQUENCE_TBL_P,
      G_LIST_TYPE_CODE_TBL_P,
      G_ROUNDING_FACTOR_TBL_P,
      G_PRICING_PHASE_ID_TBL_P,
      G_PRICE_BREAK_TYPE_CODE_TBL_P,
      G_INCOMP_GRP_CODE_TBL_P,
      G_PRICE_FORMULA_ID_TBL_P,
      G_PRODUCT_PRECEDENCE_TBL_P,
      G_LIST_LINE_NO_TBL_P,
      G_ATTRIBUTE_LEVEL_TBL_PR,
      G_ATTRIBUTE_TYPE_TBL_PR,
      G_CONTEXT_TBL_PR,
      G_ATTRIBUTE_TBL_PR,
      G_VALUE_FROM_TBL_PR,
      G_SETUP_VALUE_FROM_TBL_PR,
      G_SETUP_VALUE_TO_TBL_PR,
      G_OPERATOR_TYPE_TBL_PR,
      G_DATATYPE_TBL_PR
     ,G_BREAK_UOM_TBL_P /* Proration */
     ,G_BREAK_CONTEXT_TBL_P /* Proration */
     ,G_BREAK_ATTRIBUTE_TBL_P /* Proration */
      LIMIT nROWS;
    EXIT WHEN G_LINE_INDEX_TBL_P.COUNT = 0;

    if (G_LINE_INDEX_TBL_P.COUNT > 0) then
      for i in G_LINE_INDEX_TBL_P.FIRST .. G_LINE_INDEX_TBL_P.LAST loop
        if (lq_line_index <> G_LINE_INDEX_TBL_P(i) or lq_list_line_id <> G_LIST_LINE_ID_TBL_P(i)) then
          IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
          engine_debug('Product Pricing Only');
          END IF;
          l_prod_qual_count := l_prod_qual_count + 1;
          L_LINE_DETAIL_INDEX :=GET_LINE_DETAIL_INDEX;

          -- set attributes
          G_LINE_INDEX_LD_TBL(M)             :=G_LINE_INDEX_TBL_P(i);
          G_LINE_DETAIL_INDEX_LD_TBL(M)      :=L_LINE_DETAIL_INDEX;
          G_LIST_HEADER_ID_LD_TBL(M)         :=G_LIST_HEADER_ID_TBL_P(i);
          G_LIST_LINE_ID_LD_TBL(M)           :=G_LIST_LINE_ID_TBL_P(i);
          G_PRICING_STATUS_CODE_LD_TBL(M)    :=G_STATUS_NEW;
          G_PRICING_STATUS_TEXT_LD_TBL(M)    := 'PRODUCT_PRICING_ONLY';
          G_APPLIED_FLAG_LD_TBL(M)           :=G_AUTOMATIC_FLAG_TBL_P(i);
          G_PROCESSED_FLAG_LD_TBL(M)         :=G_NOT_PROCESSED;
          G_LINE_DETAIL_TYPE_CODE_TBL(M)     :='NULL';
          G_PRICE_BREAK_TYPE_CODE_TBL(M)     :=G_PRICE_BREAK_TYPE_CODE_TBL_P(i);
          G_LIST_LINE_TYPE_TBL(M)            :=G_LIST_LINE_TYPE_TBL_P(i);
          G_LIST_TYPE_CODE_TBL(M)            :=G_LIST_TYPE_CODE_TBL_P(i);
          G_CREATED_FROM_SQL_TBL(M)          :='PRODUCT_PRICING_ONLY';
          G_PRICING_GROUP_SEQUENCE_TBL(M)    :=G_PRICING_GROUP_SEQUENCE_TBL_P(i);
          G_PRICING_PHASE_ID_TBL(M)          :=G_PRICING_PHASE_ID_TBL_P(i);
          G_OPERAND_CALCULATION_CODE_TBL(M)  :=G_OPER_CALCULATION_CODE_TBL_P(i);
          G_OPERAND_VALUE_TBL(M)             :=G_OPERAND_VALUE_TBL_P(i);
          G_PRICE_FORMULA_ID_TBL(M)          :=G_PRICE_FORMULA_ID_TBL_P(i);
          G_PRODUCT_PRECEDENCE_TBL(M)        :=G_PRODUCT_PRECEDENCE_TBL_P(i);
          G_INCOMP_GRP_CODE_TBL(M)           :=G_INCOMP_GRP_CODE_TBL_P(i);
          G_AUTOMATIC_FLAG_TBL(M)            :=G_AUTOMATIC_FLAG_TBL_P(i);
          G_PRIMARY_UOM_FLAG_TBL(M)          :=G_PRIMARY_UOM_FLAG_TBL_P(i);
          G_MODIFIER_LEVEL_CODE_TBL(M)       :=G_MODIFIER_LEVEL_CODE_TBL_P(i);
          G_LIST_LINE_NO_TBL(M)              :=G_LIST_LINE_NO_TBL_P(i);
          G_ROUNDING_FACTOR_TBL(M)           :=G_ROUNDING_FACTOR_TBL_P(i);
          G_BREAK_UOM_TBL(M)                 := G_BREAK_UOM_TBL_P(i); /* Proration */
          G_BREAK_CONTEXT_TBL(M)             := G_BREAK_CONTEXT_TBL_P(i); /* Proration */
          G_BREAK_ATTRIBUTE_TBL(M)           := G_BREAK_ATTRIBUTE_TBL_P(i); /* Proration */

          M:=M+1;
          lq_line_index := G_LINE_INDEX_TBL_P(i);
          lq_list_line_id := G_LIST_LINE_ID_TBL_P(i);
        end if;

        -- set product attributes
        G_LINE_INDEX_tbl(K)              := G_LINE_INDEX_TBL_P(i);
        G_ATTRIBUTE_LEVEL_tbl(K)         := G_ATTRIBUTE_LEVEL_TBL_P(i);
        G_ATTRIBUTE_TYPE_tbl(K)          := G_ATTRIBUTE_TYPE_TBL_P(i);
        G_CONTEXT_tbl(K)                 := G_CONTEXT_TBL_P(i);
        G_ATTRIBUTE_tbl(K)               := G_ATTRIBUTE_TBL_P(i);
        G_VALUE_FROM_tbl(K)              := G_VALUE_FROM_TBL_P(i);
        G_COMPARISON_OPERATOR_TYPE_tbl(K):= NULL;
        G_VALIDATED_FLAG_tbl(K)          := G_NO;
        G_APPLIED_FLAG_tbl(K)            := G_APPLIED_FLAG_TBL_P(i);
        G_PRICING_STATUS_CODE_tbl(K)     := G_STATUS_NEW;
        G_PRICING_ATTR_FLAG_tbl(K)       := G_NO;
        G_LINE_DETAIL_INDEX_tbl(K)       :=L_LINE_DETAIL_INDEX;
        G_LIST_HEADER_ID_tbl(K)          :=G_LIST_HEADER_ID_TBL_P(i);
        G_LIST_LINE_ID_tbl(K)            :=G_LIST_LINE_ID_TBL_P(i);
        G_SETUP_VALUE_FROM_tbl(K)        :=NULL;
        G_SETUP_VALUE_TO_tbl(K)          :=NULL;
        G_GROUPING_NUMBER_tbl(K)         :=NULL;
        G_PRICING_STATUS_TEXT_tbl(K)     :='PRODUCT_PRICING_ONLY';
        G_QUALIFIER_PRECEDENCE_tbl(K)    :=NULL;
        G_DATATYPE_tbl(K)                :=NULL;
        G_EXCLUDER_FLAG_TBL(K)           :=G_EXCLUDER_FLAG_TBL_P(i);
        G_PRODUCT_UOM_CODE_TBL(K)        :=G_PRODUCT_UOM_CODE_TBL_P(i);
        G_QUALIFIER_TYPE_TBL(K)          :=NULL;
        G_PRICING_PHASE_ID_TBL_A(K)      :=G_PRICING_PHASE_ID_TBL_P(i);
        G_INCOMP_GRP_CODE_TBL_A(K)       :=G_INCOMP_GRP_CODE_TBL_P(i);
        G_LINE_DETAIL_TYPE_CODE_TBL_A(K) :='NULL';
        G_MODIFIER_LEVEL_CODE_TBL_A(K)   :=G_MODIFIER_LEVEL_CODE_TBL_P(i);
        G_PRIMARY_UOM_FLAG_TBL_A(K)      :=G_PRIMARY_UOM_FLAG_TBL_P(i);
        K:= K+1;
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug('The value of K: ' || K);

        END IF;
        --set pricing attributes
        IF (G_CONTEXT_TBL_PR(I) IS NOT NULL) THEN
         G_LINE_INDEX_tbl(K)              :=G_LINE_INDEX_TBL_P(I);
         G_ATTRIBUTE_LEVEL_tbl(K)         :=G_ATTRIBUTE_LEVEL_TBL_PR(I);
         G_ATTRIBUTE_TYPE_tbl(K)          :=G_ATTRIBUTE_TYPE_TBL_PR(I);
         G_CONTEXT_tbl(K)                 :=G_CONTEXT_TBL_PR(I);
         G_ATTRIBUTE_tbl(K)               :=G_ATTRIBUTE_TBL_PR(I);
         G_VALUE_FROM_tbl(K)              :=G_VALUE_FROM_TBL_PR(I);
         G_COMPARISON_OPERATOR_TYPE_tbl(K):=G_OPERATOR_TYPE_TBL_PR(I);
         G_VALIDATED_FLAG_tbl(K)          :=G_NO;
         G_APPLIED_FLAG_tbl(K)            :=G_APPLIED_FLAG_TBL_P(I);
         G_PRICING_STATUS_CODE_tbl(K)     :=G_STATUS_NEW;
         G_PRICING_ATTR_FLAG_tbl(K)       :=G_YES;
         G_LINE_DETAIL_INDEX_tbl(K)       :=L_LINE_DETAIL_INDEX;
         G_LIST_HEADER_ID_tbl(K)          :=G_LIST_HEADER_ID_TBL_P(I);
         G_LIST_LINE_ID_tbl(K)            :=G_LIST_LINE_ID_TBL_P(I);
         G_SETUP_VALUE_FROM_tbl(K)        :=G_SETUP_VALUE_FROM_TBL_PR(I);
         G_SETUP_VALUE_TO_tbl(K)          :=G_SETUP_VALUE_TO_TBL_PR(I);
         G_GROUPING_NUMBER_tbl(K)         :=NULL;
         G_PRICING_STATUS_TEXT_tbl(K)     :='PRODUCT_PRICING_ONLY';
         G_QUALIFIER_PRECEDENCE_tbl(K)    :=NULL;
         G_DATATYPE_tbl(K)                :=G_DATATYPE_TBL_PR(I);
         G_EXCLUDER_FLAG_TBL(K)           :=G_EXCLUDER_FLAG_TBL_P(I);
         G_PRODUCT_UOM_CODE_TBL(K)        :=G_PRODUCT_UOM_CODE_TBL_P(I);
         G_QUALIFIER_TYPE_TBL(K)          :=NULL;
         G_PRICING_PHASE_ID_TBL_A(K)        :=G_PRICING_PHASE_ID_TBL_P(I);
         G_INCOMP_GRP_CODE_TBL_A(K)         :=G_INCOMP_GRP_CODE_TBL_P(I);
         G_LINE_DETAIL_TYPE_CODE_TBL_A(K)   :='NULL';
         G_MODIFIER_LEVEL_CODE_TBL_A(K)     :=G_MODIFIER_LEVEL_CODE_TBL_P(I);
         G_PRIMARY_UOM_FLAG_TBL_A(K)        :=G_PRIMARY_UOM_FLAG_TBL_P(I);
         K:= K+1;
       END IF;
       IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
       engine_debug('The value of K: ' || K);

       END IF;
      end loop;
    end if;
  END LOOP;

  qp_debug_util.tstop('L_PROD_PRIC_CUR');
  CLOSE l_prod_pric_cur;

--END IF;
end if; -- vivek, multi currency installed

IF M > 1 THEN
qp_debug_util.tstart('INSERT_LDETS_PRICE_LIST_MULT_NON_MULTI','Inserting into ldets INSERT_LDETS_PRICE_LIST_MULT_NON_MULTI');
 if G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN  /*vivek*/
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('last 4 cursors- multi-currency TRUE - insert_ldets2');
  END IF;
  INSERT_LDETS_PRICE_LIST_MULT(
                 p_LINE_DETAIL_INDEX      => G_LINE_DETAIL_INDEX_LD_TBL,
                 p_LINE_DETAIL_TYPE_CODE  => G_LINE_DETAIL_TYPE_CODE_TBL,
                 p_PRICE_BREAK_TYPE_CODE  => G_PRICE_BREAK_TYPE_CODE_TBL,
                 p_LINE_INDEX             => G_LINE_INDEX_LD_TBL,
                 p_CREATED_FROM_LIST_HEADER_ID  =>G_LIST_HEADER_ID_LD_TBL,
                 p_CREATED_FROM_LIST_LINE_ID    =>G_LIST_LINE_ID_LD_TBL,
                 p_CREATED_FROM_LIST_LINE_TYPE  =>G_LIST_LINE_TYPE_TBL,
                 p_CREATED_FROM_LIST_TYPE_CODE  =>G_LIST_TYPE_CODE_TBL,
                 p_CREATED_FROM_SQL             =>G_CREATED_FROM_SQL_TBL,
                 p_PRICING_GROUP_SEQUENCE       =>G_PRICING_GROUP_SEQUENCE_TBL,
                 P_PRICING_PHASE_ID             =>G_PRICING_PHASE_ID_TBL,
                 p_OPERAND_CALCULATION_CODE     =>G_OPERAND_CALCULATION_CODE_TBL,
                 p_OPERAND_VALUE                =>G_OPERAND_VALUE_TBL,
                 p_PRICE_FORMULA_ID             =>G_PRICE_FORMULA_ID_TBL,
                 p_PRICING_STATUS_CODE          =>G_PRICING_STATUS_CODE_LD_TBL,
                 p_PRICING_STATUS_TEXT          =>G_PRICING_STATUS_TEXT_LD_TBL,
                 p_PRODUCT_PRECEDENCE           =>G_PRODUCT_PRECEDENCE_TBL ,
                 p_INCOMPATABLILITY_GRP_CODE    =>G_INCOMP_GRP_CODE_TBL,
                 p_PROCESSED_FLAG               =>G_PROCESSED_FLAG_LD_TBL,
                 p_APPLIED_FLAG                 =>G_APPLIED_FLAG_LD_TBL,
                 p_AUTOMATIC_FLAG               =>G_AUTOMATIC_FLAG_TBL,
                 p_PRIMARY_UOM_FLAG             =>G_PRIMARY_UOM_FLAG_TBL,
                 p_MODIFIER_LEVEL_CODE          =>G_MODIFIER_LEVEL_CODE_TBL,
                 p_LIST_LINE_NO                 =>G_LIST_LINE_NO_TBL,
                 p_ROUNDING_FACTOR              =>G_ROUNDING_FACTOR_TBL,
                 p_CURRENCY_DETAIL_ID           =>G_CURRENCY_DETAIL_ID_TBL,
                 p_CURRENCY_HEADER_ID           =>G_CURRENCY_HEADER_ID_TBL,
                 p_SELLING_ROUNDING_FACTOR      =>G_SELLING_ROUNDING_TBL,
                 p_ORDER_CURRENCY               =>G_ORDER_CURRENCY_TBL,
                 p_PRICING_EFFECTIVE_DATE       =>G_PRICING_EFFECTIVE_DATE_TBL,
                 p_BASE_CURRENCY_CODE           =>G_BASE_CURRENCY_CODE_TBL,
                 P_BREAK_UOM_CODE               =>G_BREAK_UOM_TBL, /* Proration */
                 P_BREAK_UOM_CONTEXT            =>G_BREAK_CONTEXT_TBL, /* Proration */
                 P_BREAK_UOM_ATTRIBUTE          =>G_BREAK_ATTRIBUTE_TBL, /* Proration */
                 x_status_code                  =>l_status_code,
                 x_status_text                  =>l_status_text);
 else -- vivek, multi currency not installed, not used
  INSERT_LDETS_PRICE_LIST_PVT( p_LINE_DETAIL_index      => G_LINE_DETAIL_INDEX_LD_TBL,
                 p_LINE_DETAIL_TYPE_CODE  => G_LINE_DETAIL_TYPE_CODE_TBL,
                 p_PRICE_BREAK_TYPE_CODE  => G_PRICE_BREAK_TYPE_CODE_TBL,
                 p_LINE_INDEX             => G_LINE_INDEX_LD_TBL,
                 p_CREATED_FROM_LIST_HEADER_ID  =>G_LIST_HEADER_ID_LD_TBL,
                 p_CREATED_FROM_LIST_LINE_ID    =>G_LIST_LINE_ID_LD_TBL,
                 p_CREATED_FROM_LIST_LINE_TYPE  =>G_LIST_LINE_TYPE_TBL,
                 p_CREATED_FROM_LIST_TYPE_CODE  =>G_LIST_TYPE_CODE_TBL,
                 p_CREATED_FROM_SQL             =>G_CREATED_FROM_SQL_TBL,
                 p_PRICING_GROUP_SEQUENCE       =>G_PRICING_GROUP_SEQUENCE_TBL,
                 P_PRICING_PHASE_ID             =>G_PRICING_PHASE_ID_TBL,
                 p_OPERAND_CALCULATION_CODE     =>G_OPERAND_CALCULATION_CODE_TBL,
                 p_OPERAND_VALUE                =>G_OPERAND_VALUE_TBL,
                 p_PRICE_FORMULA_ID             =>G_PRICE_FORMULA_ID_TBL,
                 p_PRICING_STATUS_CODE          =>G_PRICING_STATUS_CODE_LD_TBL,
                 p_PRICING_STATUS_TEXT          =>G_PRICING_STATUS_TEXT_LD_TBL,
                 p_PRODUCT_PRECEDENCE           =>G_PRODUCT_PRECEDENCE_TBL ,
                 p_INCOMPATABLILITY_GRP_CODE    =>G_INCOMP_GRP_CODE_TBL,
                 p_PROCESSED_FLAG               =>G_PROCESSED_FLAG_LD_TBL,
                 p_APPLIED_FLAG                 =>G_APPLIED_FLAG_LD_TBL,
                 p_AUTOMATIC_FLAG               =>G_AUTOMATIC_FLAG_TBL,
                 p_PRIMARY_UOM_FLAG             =>G_PRIMARY_UOM_FLAG_TBL,
                 p_MODIFIER_LEVEL_CODE          =>G_MODIFIER_LEVEL_CODE_TBL,
                 p_LIST_LINE_NO                 =>G_LIST_LINE_NO_TBL,
                 p_ROUNDING_FACTOR              =>G_ROUNDING_FACTOR_TBL,
                 P_BREAK_UOM_CODE               =>G_BREAK_UOM_TBL, /* Proration */
                 P_BREAK_UOM_CONTEXT            =>G_BREAK_CONTEXT_TBL, /* Proration */
                 P_BREAK_UOM_ATTRIBUTE          =>G_BREAK_ATTRIBUTE_TBL, /* Proration */
                 x_status_code                  =>l_status_code,
                 x_status_text                  =>l_status_text
                 );
 end if; -- vivek, multi currency installed
qp_debug_util.tstop('INSERT_LDETS_PRICE_LIST_MULT_NON_MULTI');
END IF;

IF K > 1 THEN
qp_debug_util.tstart('INSERT_PRICE_LIST_ATTRS','Inserting into line attrs INSERT_PRICE_LIST_ATTRS');
   INSERT_PRICE_LIST_ATTRS
   (    p_LINE_INDEX_tbl         =>G_LINE_INDEX_tbl,
        p_LINE_DETAIL_INDEX_tbl  =>G_LINE_DETAIL_INDEX_tbl,
        p_ATTRIBUTE_LEVEL_tbl    =>G_ATTRIBUTE_LEVEL_tbl,
        p_ATTRIBUTE_TYPE_tbl     =>G_ATTRIBUTE_TYPE_tbl,
        p_LIST_HEADER_ID_tbl     =>G_LIST_HEADER_ID_tbl,
        p_LIST_LINE_ID_tbl       =>G_LIST_LINE_ID_tbl,
        p_CONTEXT_tbl            =>G_CONTEXT_tbl,
        p_ATTRIBUTE_tbl          =>G_ATTRIBUTE_tbl,
        p_VALUE_FROM_tbl         =>G_VALUE_FROM_tbl,
        p_SETUP_VALUE_FROM_tbl   =>G_SETUP_VALUE_FROM_tbl,
        p_SETUP_VALUE_TO_tbl     =>G_SETUP_VALUE_TO_tbl,
        p_GROUPING_NUMBER_tbl    => G_GROUPING_NUMBER_tbl,
        p_COMPARISON_OPERATOR_TYPE_tbl  =>G_COMPARISON_OPERATOR_TYPE_tbl,
        p_VALIDATED_FLAG_tbl            =>G_VALIDATED_FLAG_tbl,
        p_APPLIED_FLAG_tbl              =>G_APPLIED_FLAG_tbl,
        p_PRICING_STATUS_CODE_tbl       =>G_PRICING_STATUS_CODE_tbl,
        p_PRICING_STATUS_TEXT_tbl       =>G_PRICING_STATUS_TEXT_tbl,
        p_QUALIFIER_PRECEDENCE_tbl      =>G_QUALIFIER_PRECEDENCE_tbl,
        p_DATATYPE_tbl                  =>G_DATATYPE_tbl,
        p_PRICING_ATTR_FLAG_tbl         =>G_PRICING_ATTR_FLAG_tbl,
        p_QUALIFIER_TYPE_tbl            =>G_QUALIFIER_TYPE_TBL,
        p_product_uom_code_tbl          =>G_PRODUCT_UOM_CODE_TBL,
        p_excluder_flag_tbl             =>G_EXCLUDER_FLAG_TBL,
        p_PRICING_PHASE_ID_TBL          =>G_PRICING_PHASE_ID_TBL_A,
        p_INCOMPATABILITY_GRP_CODE_TBL  =>G_INCOMP_GRP_CODE_TBL_A,
        p_LINE_DETAIL_TYPE_CODE_TBL     =>G_LINE_DETAIL_TYPE_CODE_TBL_A,
        p_MODIFIER_LEVEL_CODE_TBL       =>G_MODIFIER_LEVEL_CODE_TBL_A,
        p_PRIMARY_UOM_FLAG_TBL          =>G_PRIMARY_UOM_FLAG_TBL_A,
        x_status_code                   =>l_status_code,
        x_status_text                   =>l_status_text);
qp_debug_util.tstop('INSERT_PRICE_LIST_ATTRS');
END IF;

IF (l_status_code = FND_API.G_RET_STS_ERROR) THEN
 RAISE E_ROUTINE_ERRORS;
END IF;

--Reset_all_tbls;
Reset_All_Tbls(l_status_code ,l_status_text );
IF (l_status_code = FND_API.G_RET_STS_ERROR) THEN
 RAISE E_ROUTINE_ERRORS;
END IF;

EXCEPTION
  WHEN E_ROUTINE_ERRORS THEN
    x_status_code := FND_API.G_RET_STS_ERROR;
    x_status_text := l_routine||': '||l_status_text;
  WHEN OTHERS THEN
      IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
      engine_debug('< In Select_Price_List_Lines>: '||SQLERRM);
      -- Keep it for debugging purposes
      /*
FOR Z In 1 .. G_LIST_HEADER_ID_TBL_P.count
Loop
engine_debug(  '--------');
engine_debug(  'Z: '||Z);
engine_debug(  'G_LIST_HEADER_ID_TBL_P: ' || G_LIST_HEADER_ID_TBL_P(Z));
engine_debug(  'G_LIST_LINE_ID_TBL_P: ' || G_LIST_LINE_ID_TBL_P(Z));
engine_debug(  'G_LINE_INDEX_TBL_P: ' || G_LINE_INDEX_TBL_P(Z));
engine_debug(  'G_APPLIED_FLAG_TBL_P: ' || G_APPLIED_FLAG_TBL_P(Z)  );
engine_debug(  'G_ATTRIBUTE_LEVEL_TBL_P: ' || G_ATTRIBUTE_LEVEL_TBL_P(Z));
engine_debug(  'G_ATTRIBUTE_TYPE_TBL_P: ' || G_ATTRIBUTE_TYPE_TBL_P(Z) );
engine_debug(  'G_CONTEXT_TBL_P: ' ||G_CONTEXT_TBL_P(Z) );
engine_debug(  'G_ATTRIBUTE_TBL_P: ' || G_ATTRIBUTE_TBL_P(Z));
engine_debug(  'G_VALUE_FROM_TBL_P: ' || G_VALUE_FROM_TBL_P(Z));
engine_debug(  'G_PRODUCT_UOM_CODE_TBL_P: ' || G_PRODUCT_UOM_CODE_TBL_P(Z));
engine_debug(  'G_EXCLUDER_FLAG_TBL_P: ' || G_EXCLUDER_FLAG_TBL_P(Z));
engine_debug(  'G_CONTEXT_TBL_Q: ' || G_CONTEXT_TBL_Q(Z));
engine_debug(  'G_ATTRIBUTE_TBL_Q: ' || G_ATTRIBUTE_TBL_Q(Z));
engine_debug(  'G_VALUE_FROM_TBL_Q: ' ||G_VALUE_FROM_TBL_Q(Z));
engine_debug(  'G_GROUPING_NO_TBL_Q: ' || G_GROUPING_NO_TBL_Q(Z));
engine_debug(  'G_QUALIFIER_PRECEDENCE_TBL_Q: ' || G_QUALIFIER_PRECEDENCE_TBL_Q(Z));
engine_debug(  'G_DATATYPE_TBL_Q: ' || G_DATATYPE_TBL_Q(Z));
engine_debug(  'G_SETUP_VALUE_FROM_TBL_Q: ' || G_SETUP_VALUE_FROM_TBL_Q(Z));
engine_debug(  'G_SETUP_VALUE_TO_TBL_Q: ' || G_SETUP_VALUE_TO_TBL_Q(Z));
engine_debug(  'G_AUTOMATIC_FLAG_TBL_P: ' || G_AUTOMATIC_FLAG_TBL_P(Z));
engine_debug(  'G_MODIFIER_LEVEL_CODE_TBL_P: ' || G_MODIFIER_LEVEL_CODE_TBL_P(Z) );
engine_debug(  'G_PRIMARY_UOM_FLAG_TBL_P: ' || G_PRIMARY_UOM_FLAG_TBL_P(Z));
engine_debug(  'G_OPER_CALCULATION_CODE_TBL_P: ' || G_OPER_CALCULATION_CODE_TBL_P(Z));
engine_debug(  'G_OPERAND_VALUE_TBL_P: ' || G_OPERAND_VALUE_TBL_P(Z));
engine_debug(  'G_PRICING_GROUP_SEQUENCE_TBL_P: ' || G_PRICING_GROUP_SEQUENCE_TBL_P(Z));
engine_debug(  'G_LIST_TYPE_CODE_TBL_P: ' || G_LIST_TYPE_CODE_TBL_P(Z));
engine_debug(  'G_ROUNDING_FACTOR_TBL_P: ' || G_ROUNDING_FACTOR_TBL_P(Z));
engine_debug(  'G_PRICING_PHASE_ID_TBL_P: ' || G_PRICING_PHASE_ID_TBL_P(Z));
engine_debug(  'G_PRICE_BREAK_TYPE_CODE_TBL_P: ' || G_PRICE_BREAK_TYPE_CODE_TBL_P(Z));
engine_debug(  'G_INCOMP_GRP_CODE_TBL_P: ' || G_INCOMP_GRP_CODE_TBL_P(Z));
engine_debug(  'G_PRICE_FORMULA_ID_TBL_P: ' || G_PRICE_FORMULA_ID_TBL_P(Z));
engine_debug(  'G_PRODUCT_PRECEDENCE_TBL_P: ' || G_PRODUCT_PRECEDENCE_TBL_P(Z));
engine_debug(  'G_LIST_LINE_NO_TBL_P: ' || G_LIST_LINE_NO_TBL_P(Z));
engine_debug(  'G_QUALIFIER_TYPE_TBL_Q: ' || G_QUALIFIER_TYPE_TBL_Q(Z));
engine_debug(  'G_CURRENCY_DETAIL_ID_TBL_P: ' || G_CURRENCY_DETAIL_ID_TBL_P(Z));
engine_debug(  'G_CURRENCY_HEADER_ID_TBL_P: ' || G_CURRENCY_HEADER_ID_TBL_P(Z));
engine_debug(  'G_SELLING_ROUNDING_TBL_P: ' || G_SELLING_ROUNDING_TBL_P(Z));
engine_debug(  'G_ORDER_CURRENCY_TBL_P: ' || G_ORDER_CURRENCY_TBL_P(Z));
engine_debug(  'G_PRICING_EFFECTIVE_DATE_TBL_P: ' || G_PRICING_EFFECTIVE_DATE_TBL_P(Z));
engine_debug(  'G_BASE_CURRENCY_CODE_TBL_P: ' ||G_BASE_CURRENCY_CODE_TBL_P(Z));

End Loop;
*/
      END IF;
      x_status_code := FND_API.G_RET_STS_ERROR;
      x_status_text := l_routine||': '||SQLERRM;
END SELECT_PRICE_LIST_LINES;

/*+------------------------------------------------------------
  |CREATE_QUALIFIER_FROM_LIST
  |We need to make the list we selected from previous phase
  |to become qualifier
  |because price list might be a qualifier for a discount or promotion
  +------------------------------------------------------------
*/

PROCEDURE Create_Qualifier_From_List( x_status_code OUT NOCOPY VARCHAR2,
                                      x_status_text OUT NOCOPY VARCHAR2)
AS
v_error_code VARCHAR2(240);
v_error_message VARCHAR2(240);
l_attribute VARCHAR2(240);
l_context VARCHAR2(240);
l_status_code VARCHAR2(30);
l_status_text VARCHAR2(240);
K PLS_INTEGER:= 1;

--We don't want to create a new list which is already passed in as qualifiers
--on previous phase.
/*
INDX,QP_PREQ_GRP.create_qualifier_from_list.l_get_line_index_cur,- No Index Used -,NA,NA
*/
CURSOR l_get_line_index_cur IS
SELECT line_index
FROM   qp_npreq_lines_tmp
WHERE  line_type_code <> G_ORDER_LEVEL;

/*
INDX,QP_PREQ_GRP.create_qualifier_from_list.l_check_modlist_cur,qp_npreq_ldets_tmp_N1,LINE_INDEX,1
INDX,QP_PREQ_GRP.create_qualifier_from_list.l_check_modlist_cur,qp_npreq_ldets_tmp_N1,PRICING_PHASE_ID,2
INDX,QP_PREQ_GRP.create_qualifier_from_list.l_check_modlist_cur,qp_npreq_ldets_tmp_N1,PRICING_STATUS_CODE,3

INDX,lQP_PREQ_GRP.create_qualifier_from_list._check_modlist_cur,qp_npreq_line_attrs_tmp_N2,PRICING_STATUS_CODE,1
INDX,lQP_PREQ_GRP.create_qualifier_from_list._check_modlist_cur,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE_TYPE,2
INDX,lQP_PREQ_GRP.create_qualifier_from_list._check_modlist_cur,qp_npreq_line_attrs_tmp_N2,CONTEXT,3
INDX,lQP_PREQ_GRP.create_qualifier_from_list._check_modlist_cur,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE,4
INDX,lQP_PREQ_GRP.create_qualifier_from_list._check_modlist_cur,qp_npreq_line_attrs_tmp_N2,LINE_INDEX,5
INDX,lQP_PREQ_GRP.create_qualifier_from_list._check_modlist_cur,qp_npreq_line_attrs_tmp_N2,VALUE_FROM,6
*/
--check if passed in price list indeed has qualified
CURSOR l_check_modlist_cur(p_line_index IN PLS_INTEGER) IS
SELECT /*+ ORDERED index(qplat qp_preq_line_attrs_tmp_n2) l_check_modlist_cur */ 'X'
FROM   qp_npreq_ldets_tmp qpld,
       qp_npreq_line_attrs_tmp qplat
WHERE  qpld.line_index = p_line_index
AND    qpld.pricing_phase_id = G_PRICE_LIST_PHASE_ID
AND    qpld.pricing_status_code = G_STATUS_NEW
AND    qplat.line_index = qpld.line_index
AND    qplat.pricing_status_code = G_STATUS_UNCHANGED
AND    qplat.attribute_type = 'QUALIFIER'
AND    qplat.context = 'MODLIST'
AND    qplat.attribute = 'QUALIFIER_ATTRIBUTE4'
AND    qplat.value_from = TO_CHAR(qpld.created_from_list_header_id);

-- find line_index(s) whose passed-in price list has not been qualified
CURSOR l_check_no_modlist_cur IS
SELECT /*+ index(qpll QP_PREQ_LINES_TMP_N2) */ qpll.line_index
FROM   qp_npreq_lines_tmp qpll
WHERE  qpll.line_type_code <> G_ORDER_LEVEL
AND    NOT EXISTS (
                   SELECT /*+ ORDERED index(qpld QP_PREQ_LDETS_TMP_N1) index(qplat qp_preq_line_attrs_tmp_n2) l_check_modlist_cur */ 'X'
                   FROM   qp_npreq_ldets_tmp qpld,
                          qp_npreq_line_attrs_tmp qplat
                   WHERE  qpld.line_index = qpll.line_index
                   AND    qpld.pricing_phase_id = G_PRICE_LIST_PHASE_ID
                   AND    qpld.pricing_status_code = G_STATUS_NEW
                   AND    qplat.line_index = qpld.line_index
                   AND    qplat.pricing_status_code = G_STATUS_UNCHANGED
                   AND    qplat.attribute_type = 'QUALIFIER'
                   AND    qplat.context = 'MODLIST'
                   AND    qplat.attribute = 'QUALIFIER_ATTRIBUTE4'
                   AND    qplat.value_from = TO_CHAR(qpld.created_from_list_header_id));

/*
INDX,QP_PREQ_GRP.create_qualifier_from_list.l_check_exists_modlist_cur,qp_npreq_line_attrs_tmp_N2,PRICING_STATUS_CODE,1
INDX,QP_PREQ_GRP.create_qualifier_from_list.l_check_exists_modlist_cur,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE_TYPE,2
INDX,QP_PREQ_GRP.create_qualifier_from_list.l_check_exists_modlist_cur,qp_npreq_line_attrs_tmp_N2,CONTEXT,3
INDX,QP_PREQ_GRP.create_qualifier_from_list.l_check_exists_modlist_cur,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE,4
INDX,QP_PREQ_GRP.create_qualifier_from_list.l_check_exists_modlist_cur,qp_npreq_line_attrs_tmp_N2,LINE_INDEX,5
*/
--check if there is a modlist passed
CURSOR l_check_modlist_exists_cur(p_line_index IN PLS_INTEGER) IS
       SELECT ROWID
       FROM qp_npreq_line_attrs_tmp
       WHERE pricing_status_code = G_STATUS_UNCHANGED
       AND   attribute_type = 'QUALIFIER'
       AND   context = 'MODLIST'
       AND   attribute ='QUALIFIER_ATTRIBUTE4'
       AND   line_index = p_line_index
       AND   ROWNUM = 1;  --just one record need to be returned

/*
INDX,QP_PREQ_GRP.create_qualifier_from_list.l_get_pl_cur,qp_npreq_ldets_tmp_N3,LINE_INDEX,1
INDX,QP_PREQ_GRP.create_qualifier_from_list.l_get_pl_cur,qp_npreq_ldets_tmp_N3,PRICING_PHASE_ID,2
INDX,QP_PREQ_GRP.create_qualifier_from_list.l_get_pl_cur,qp_npreq_ldets_tmp_N3,ASK_FOR_FLAG,3
INDX,QP_PREQ_GRP.create_qualifier_from_list.l_get_pl_cur,qp_npreq_ldets_tmp_N3,CREATED_FROM_LIST_LINE_TYPE,4
INDX,QP_PREQ_GRP.create_qualifier_from_list.l_get_pl_cur,qp_npreq_ldets_tmp_N3,PRICING_STATUS_CODE,5
*/
CURSOR l_get_pl_cur(p_line_index IN PLS_INTEGER) IS
SELECT created_from_list_header_id
FROM   qp_npreq_ldets_tmp
WHERE  line_index = p_line_index
and    created_from_list_line_type in (G_PRICE_LIST_TYPE,G_BY_PBH) -- Bug#2882115
and    pricing_status_code = G_STATUS_NEW
and    pricing_phase_id = G_PRICE_LIST_PHASE_ID;


l_dummy VARCHAR2(1);
l_rowid ROWID;
l_list_header_id NUMBER;

l_routine VARCHAR2(30) := 'Create_Qualifier_From_List';

E_ROUTINE_ERRORS            EXCEPTION;

l_line_index_tbl NUMBER_TYPE;

-- julin [3805113]: tables for bulk insert/update
A PLS_INTEGER:=1;
l_a_list_header_id_tbl NUMBER_TYPE;
l_a_line_index_tbl NUMBER_TYPE;

B PLS_INTEGER:=1;
l_b_list_header_id_tbl NUMBER_TYPE;
l_b_rowid_tbl ROWID_TYPE;

C PLS_INTEGER:=1;
l_c_line_index_tbl NUMBER_TYPE;
l_c_g_line_level_tbl VARCHAR_30_TYPE;
l_c_G_QUALIFIER_TYPE_tbl VARCHAR_30_TYPE;
l_c_G_LIST_HEADER_CONTEXT_tbl VARCHAR_30_TYPE;
l_c_QUALIFIER_ATTRIBUTE4_tbl VARCHAR_30_TYPE;
l_c_list_header_id_tbl NUMBER_TYPE;
l_c_G_VALIDATED_tbl VARCHAR_30_TYPE;
l_c_G_LIST_APPLIED_tbl VARCHAR_30_TYPE;
l_c_G_STATUS_UNCHANGED_tbl VARCHAR_30_TYPE;
l_c_PRICING_STATUS_TEXT_tbl VARCHAR_TYPE;


BEGIN
qp_debug_util.tstart('CREATE_QUALIFIER_FROM_LIST','Procedure CREATE_QUALIFIER_FROM_LIST');
  --po integration start
  UPDATE qp_npreq_lines_tmp a
  SET    pricing_status_code = G_STATUS_UPDATED
  Where    list_price_override_flag in ('Y', 'O')  --po integration
  AND   line_type_code <> G_ORDER_LEVEL;
  --po integration end

  -- julin [3805113]: using bulk collect and update
  OPEN l_check_no_modlist_cur;
  LOOP
    FETCH l_check_no_modlist_cur BULK COLLECT INTO
      l_line_index_tbl
      LIMIT G_BATCH_SIZE;
    EXIT WHEN l_line_index_tbl.count = 0;

    l_a_list_header_id_tbl.delete;
    l_a_line_index_tbl.delete;

    l_b_list_header_id_tbl.delete;
    l_b_rowid_tbl.delete;

    l_c_line_index_tbl.delete;
    l_c_g_line_level_tbl.delete;
    l_c_G_QUALIFIER_TYPE_tbl.delete;
    l_c_G_LIST_HEADER_CONTEXT_tbl.delete;
    l_c_QUALIFIER_ATTRIBUTE4_tbl.delete;
    l_c_list_header_id_tbl.delete;
    l_c_G_VALIDATED_tbl.delete;
    l_c_G_LIST_APPLIED_tbl.delete;
    l_c_G_STATUS_UNCHANGED_tbl.delete;
    l_c_PRICING_STATUS_TEXT_tbl.delete;

  /*FOR i in p_price_list_id_tbl.FIRST .. p_price_list_id_tbl.LAST
  LOOP

        OPEN l_check_modlist_cur(l_line_index_tbl(I));
        FETCH l_check_modlist_cur INTO l_dummy;
        IF l_check_modlist_cur%NOTFOUND THEN
  */

    FOR I in l_line_index_tbl.FIRST .. l_line_index_tbl.LAST
    LOOP
           OPEN l_check_modlist_exists_cur(l_line_index_tbl(I));
           FETCH l_check_modlist_exists_cur INTO l_rowid;

           OPEN l_get_pl_cur(l_line_index_tbl(I));
           FETCH l_get_pl_cur into l_list_header_id;
           CLOSE l_get_pl_cur;

           -- Update the order line with the secondary price list id(for OM displaying purposes)
          IF (l_list_header_id IS NOT NULL) THEN
            l_a_list_header_id_tbl(A) := l_list_header_id;
            l_a_line_index_tbl(A) := l_line_index_tbl(I);
            A := A + 1;
          END IF;

           IF l_check_modlist_exists_cur%FOUND THEN
             --OPEN l_get_pl_cur(l_line_index_tbl(I));
             --FETCH l_get_pl_cur into l_list_header_id;
             --CLOSE l_get_pl_cur;

             IF (l_list_header_id IS NOT NULL) THEN
               l_b_list_header_id_tbl(B) := l_list_header_id;
               l_b_rowid_tbl(B) := l_rowid;
               B := B + 1;
             END IF;

           ELSE
             --FOR J IN  l_get_pl_cur(l_line_index_tbl(I)) LOOP
              IF (l_list_header_id IS NOT NULL) THEN
                l_c_line_index_tbl(C) := L_LINE_INDEX_TBL(I);
                l_c_g_line_level_tbl(C) := G_LINE_LEVEL;
                l_c_g_qualifier_type_tbl(C) := G_QUALIFIER_TYPE;
                l_c_g_list_header_context_tbl(C) := G_LIST_HEADER_CONTEXT;
                l_c_qualifier_attribute4_tbl(C) := 'QUALIFIER_ATTRIBUTE4';
                l_c_list_header_id_tbl(C) := l_list_header_id;
                l_c_g_validated_tbl(C) := G_VALIDATED;
                l_c_g_list_applied_tbl(C) := G_LIST_APPLIED;
                l_c_g_status_unchanged_tbl(C) := G_STATUS_UNCHANGED;
                l_c_pricing_status_text_tbl(C) := 'Inserted by Create_Qualifier_From_List';
                C := C + 1;
             --END LOOP;
              END IF;
           END IF;
           CLOSE l_check_modlist_exists_cur;
        --END IF;
        --CLOSE l_check_modlist_cur;

     IF l_status_code <> FND_API.G_RET_STS_SUCCESS THEN
        RAISE E_ROUTINE_ERRORS;
     END IF;
     l_list_header_id := null;  -- Bug No: 7323621
    END LOOP;

  -- julin [3805113]: bulk update
  IF (l_a_list_header_id_tbl.COUNT > 0) THEN
    FORALL I IN l_a_list_header_id_tbl.first..l_a_list_header_id_tbl.last
      UPDATE qp_npreq_lines_tmp
      SET price_list_header_id = l_a_list_header_id_tbl(I)
      WHERE line_index = l_a_line_index_tbl(I);
  END IF;

  -- julin [3805113]: bulk update
  IF (l_b_list_header_id_tbl.COUNT > 0) THEN
    FORALL I IN l_b_list_header_id_tbl.first..l_b_list_header_id_tbl.last
      UPDATE qp_npreq_line_attrs_tmp
      SET    value_from = TO_CHAR(l_b_list_header_id_tbl(I))
      WHERE  rowid = l_b_rowid_tbl(I);
  END IF;

  -- julin [3805113]: bulk update
  IF (l_c_LINE_INDEX_TBL.COUNT > 0) THEN
    FORALL I IN l_c_LINE_INDEX_TBL.first..l_c_LINE_INDEX_TBL.last
      INSERT INTO qp_npreq_line_attrs_tmp
        (LINE_INDEX,
         ATTRIBUTE_LEVEL,
         ATTRIBUTE_TYPE,
         CONTEXT,
         ATTRIBUTE,
         VALUE_FROM,
         VALIDATED_FLAG,  --We may need to reset it to N
         APPLIED_FLAG,
         PRICING_STATUS_CODE,
         PRICING_STATUS_TEXT
        )
      VALUES
        (l_c_line_index_tbl(i),
         l_c_g_line_level_tbl(i),
         l_c_g_qualifier_type_tbl(i),
         l_c_g_list_header_context_tbl(i),
         l_c_qualifier_attribute4_tbl(i),
         l_c_list_header_id_tbl(i),
         l_c_g_validated_tbl(i),
         l_c_g_list_applied_tbl(i),
         l_c_g_status_unchanged_tbl(i),   --as it is passed in as qualifiers from the callers
         l_c_pricing_status_text_tbl(i));

  END IF;

  END LOOP;
  CLOSE l_check_no_modlist_cur;

         -- Update Rounding Factor, if rounding_flag not N
        IF (G_ROUNDING_FLAG <> 'N') THEN
                UPDATE_ROUNDING_FACTOR (
                        QP_PREQ_GRP.G_MCURR_INSTALLED_USED,
                        l_status_code,
                        l_status_text);
        END IF; -- end if rounding_flag

     IF l_status_code <> FND_API.G_RET_STS_SUCCESS THEN
        RAISE E_ROUTINE_ERRORS;
     END IF;
qp_debug_util.tstop('CREATE_QUALIFIER_FROM_LIST');
EXCEPTION
WHEN E_ROUTINE_ERRORS THEN
  x_status_code := FND_API.G_RET_STS_ERROR;
  x_status_text := l_routine||': '||l_status_text;
WHEN OTHERS THEN
  v_error_code :=SQLCODE;
  v_error_message:=SQLERRM;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('Error in QP_PREQ_GRP.create_qualifier_from_list: '||SQLERRM);
  END IF;
  x_status_code := FND_API.G_RET_STS_ERROR;
  x_status_text := l_routine||': '||SQLERRM;
qp_debug_util.tstop('CREATE_QUALIFIER_FROM_LIST');
END Create_Qualifier_From_List;


/*+------------------------------------------------------------
  |GET_REASON
  |To tell the reasons why certain list line is deleted
  +------------------------------------------------------------
*/
PROCEDURE Get_Reason (p_line_index   IN  PLS_INTEGER,
                      x_reason_code_tbl  OUT NOCOPY VARCHAR_TYPE,
                      x_status_code OUT NOCOPY VARCHAR2,
                      x_status_text OUT NOCOPY VARCHAR2) AS
/*
-- Can use N1 instead of N3
INDX,QP_PREQ_GRP.get_reason.l_reason_cur,qp_npreq_ldets_tmp_N1,LINE_INDEX,1
*/
CURSOR l_reason_cur(p_line_index IN PLS_INTEGER) IS
SELECT distinct pricing_status_code
FROM   qp_npreq_ldets_tmp
WHERE  line_index = p_line_index
AND    pricing_status_code <> G_STATUS_NEW;

J PLS_INTEGER:=0;
l_routine VARCHAR2(240):='QP_PREQ_GRP.GET_REASON';
BEGIN

FOR I IN l_reason_cur(p_line_index) LOOP
 J:=J+1;
 x_reason_code_tbl(J):= I.pricing_status_code;
END LOOP;

EXCEPTION
  WHEN OTHERS THEN
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug(l_routine||': '||SQLERRM);
   END IF;
   x_status_code := FND_API.G_RET_STS_ERROR;
   x_status_text := l_routine||': '||SQLERRM;
END Get_Reason;

/*+------------------------------------------------------------
  |Call calculation engine
  +------------------------------------------------------------
*/
PROCEDURE CALL_CALCULATION_ENGINE (p_phase_sequence       IN NUMBER:=NULL,
                                   p_freeze_override_flag IN VARCHAR2:=NULL,
                                   p_is_direct_call       IN BOOLEAN:=FALSE,
                                   x_status_code          OUT NOCOPY VARCHAR2,
                                   x_status_text          OUT NOCOPY VARCHAR2) AS

p_cal_req_line_rec   QP_Calculate_Price_PUB.l_request_line_rec;
l_cal_req_line_rec   QP_Calculate_Price_PUB.l_request_line_rec;
p_cal_req_ldets_tbl  QP_Calculate_Price_PUB.l_request_line_details_tbl;
l_cal_req_ldets_tbl  QP_Calculate_Price_PUB.l_request_line_details_tbl;
p_cal_req_rltd_tbl   QP_Calculate_Price_PUB.l_related_request_lines_tbl;
l_cal_req_rltd_tbl   QP_Calculate_Price_PUB.l_related_request_lines_tbl;

/*
INDX,QP_PREQ_GRP.call_calculation_engine.l_request_line_cur,- No Index Used -,NA,NA
*/
CURSOR l_request_line_cur  IS
  SELECT /*+ dynamic_sampling(1) */ qplt.LINE_INDEX,
         qplt.LINE_TYPE_CODE,
         qplt.PRICING_EFFECTIVE_DATE,
         qplt.LINE_QUANTITY,
         qplt.LINE_UOM_CODE,
         qplt.PRICED_QUANTITY,
         qplt.PRICED_UOM_CODE,
         qplt.CURRENCY_CODE,
         qplt.UNIT_PRICE,
         qplt.PERCENT_PRICE,
	 qplt.UOM_QUANTITY,
         qplt.PARENT_PRICE,
         qplt.ADJUSTED_UNIT_PRICE,
         qplt.PROCESSED_FLAG,
         qplt.PRICE_FLAG,
         qplt.PROCESSING_ORDER,
         qplt.PRICING_STATUS_CODE,
         qplt.PRICING_STATUS_TEXT,
         qplt.GROUP_QUANTITY,
         qplt.GROUP_AMOUNT,
         qplt.ROUNDING_FLAG,
         qplt.PRICE_LIST_HEADER_ID,
         qplt.ROUNDING_FACTOR,
         qplt.CATCHWEIGHT_QTY,
         qplt.ACTUAL_ORDER_QUANTITY,
         NVL(qplt.price_flag,G_YES)
  FROM   qp_npreq_lines_tmp qplt
  WHERE  qplt.PRICING_STATUS_CODE IN (G_STATUS_UNCHANGED, G_STATUS_UPDATED)
  AND    (qplt.PRICE_FLAG IN (G_YES,G_PHASE)
          OR qplt.PROCESSED_CODE = G_BY_ENGINE)
  AND	 nvl(qplt.USAGE_PRICING_TYPE,G_REGULAR_USAGE_TYPE) NOT IN
	  (G_AUTHORING_TYPE,G_BILLING_TYPE)
  ORDER  BY PROCESSING_ORDER;

--for the case where p_control_rec.price_flat = 'P' (G_PHASE)
/*
INDX,QP_PREQ_GRP.call_calculation_engine.l_request_line_detail_cur,qp_npreq_ldets_tmp_N1,LINE_INDEX,1
INDX,QP_PREQ_GRP.call_calculation_engine.l_request_line_detail_cur,qp_npreq_ldets_tmp_N1,PRICING_STATUS_CODE,2

INDX,QP_PREQ_GRP.call_calculation_engine.l_request_line_detail_cur,qp_npreq_lines_tmp_N2,LINE_TYPE_CODE,1
*/
 CURSOR l_request_line_detail_cur(L_LINE_INDEX PLS_INTEGER,
                                  p_price_flag VARCHAR2) IS
   -- hint added as temporary R12 fix for 5573442
   SELECT /*+ index(qplt) */  --5658579
          QPLT.LINE_DETAIL_INDEX,
          QPLT.LINE_DETAIL_TYPE_CODE,
          QPLT.LINE_INDEX,
          QPLT.CREATED_FROM_LIST_HEADER_ID,
          QPLT.CREATED_FROM_LIST_LINE_ID,
          QPLT.CREATED_FROM_LIST_LINE_TYPE,
          QPLT.CREATED_FROM_LIST_TYPE_CODE,
          QPLT.PRICE_BREAK_TYPE_CODE,
          QPLT.PRICING_GROUP_SEQUENCE,
          QPLT.OPERAND_CALCULATION_CODE,
          QPLT.OPERAND_VALUE,
          QPLT.NET_AMOUNT_FLAG, -- IT net_amount 2720717
          QPLT.AUTOMATIC_FLAG,
          QPLT.ACCRUAL_FLAG,
          QPLT.ACCRUAL_CONVERSION_RATE,
          QPLT.ESTIM_ACCRUAL_RATE,
          QPLT.RECURRING_VALUE, -- block pricing
          QPLT.MODIFIER_LEVEL_CODE,
          QPLT.GROUP_QUANTITY,
          QPLT.GROUP_AMOUNT,
          QPLT.LINE_QUANTITY, --2388011_new
          QPLT.SELECTED_VOLUME_ATTR -- 2388011_new
   FROM qp_npreq_ldets_tmp QPLT
   WHERE QPLT.LINE_INDEX = L_LINE_INDEX
   AND QPLT.PRICING_STATUS_CODE = G_STATUS_NEW
   UNION
   -- hints added as temporary R12 fix for 5573442
   SELECT /*+ ORDERED USE_NL(QPLL QPLT) INDEX(QPLL) INDEX(QPLT) */  --5658579
          QPLT.LINE_DETAIL_INDEX,
          QPLT.LINE_DETAIL_TYPE_CODE,
          QPLT.LINE_INDEX,
          QPLT.CREATED_FROM_LIST_HEADER_ID,
          QPLT.CREATED_FROM_LIST_LINE_ID,
          QPLT.CREATED_FROM_LIST_LINE_TYPE,
          QPLT.CREATED_FROM_LIST_TYPE_CODE,
          QPLT.PRICE_BREAK_TYPE_CODE,
          QPLT.PRICING_GROUP_SEQUENCE,
          QPLT.OPERAND_CALCULATION_CODE,
          QPLT.OPERAND_VALUE,
          QPLT.NET_AMOUNT_FLAG, -- IT net_amount 2720717
          QPLT.AUTOMATIC_FLAG,
          QPLT.ACCRUAL_FLAG,
	     QPLT.ACCRUAL_CONVERSION_RATE,
	     QPLT.ESTIM_ACCRUAL_RATE,
	     QPLT.RECURRING_VALUE, -- block pricing
          QPLT.MODIFIER_LEVEL_CODE,
		QPLT.GROUP_QUANTITY,
		QPLT.GROUP_AMOUNT,
          QPLT.LINE_QUANTITY, --2388011_new
          QPLT.SELECTED_VOLUME_ATTR -- 2388011_new
   FROM   qp_npreq_lines_tmp QPLL,
          qp_npreq_ldets_tmp QPLT
   WHERE  QPLL.LINE_TYPE_CODE = G_ORDER_LEVEL
   AND    QPLT.LINE_INDEX = QPLL.LINE_INDEX
   AND    QPLT.PRICING_STATUS_CODE = G_STATUS_NEW
   AND    QPLT.CREATED_FROM_LIST_TYPE_CODE <> G_CHARGES_HEADER
   ORDER BY 9; -- 9 - Pricing Group Sequence

/*
INDX,QP_PREQ_GRP.call_calculation_engine.l_line_attrs_cur,qp_npreq_line_attrs_tmp_N3,LINE_DETAIL_INDEX,1
*/
CURSOR l_line_attrs_cur(l_line_detail_index PLS_INTEGER) IS
  SELECT VALUE_FROM,
         VALUE_TO,
         ATTRIBUTE
  FROM qp_npreq_line_attrs_tmp
  WHERE line_detail_index = l_line_detail_index
  AND ATTRIBUTE_LEVEL = G_DETAIL_LEVEL;

/*
INDX,QP_PREQ_GRP.call_calculation_engine.l_list_line_attribute_cur,QP_PRICING_ATTRIBUTES_N2,LIST_LINE_ID,1
*/
CURSOR l_list_line_attribute_cur(p_list_line_id PLS_INTEGER) IS
   SELECT /*+ index(qpp qp_pricing_attributes_n2) l_list_line_attribute_cur */ PRICING_ATTRIBUTE
   FROM   QP_PRICING_ATTRIBUTES qpp
   WHERE LIST_LINE_ID = p_list_line_id
   AND   PRICING_ATTRIBUTE_CONTEXT = G_PRIC_VOLUME_CONTEXT;

-- Cursor for getting the related line index for the line index
-- Ex: Related Line Index - Oracle 8i Line Index - Service Line
/*
INDX,QP_PREQ_GRP.call_calculation_engine.l_service_item_cur,- No Index Used -,NA,NA
*/
CURSOR l_service_item_cur(l_line_index PLS_INTEGER) IS
  SELECT LINE_INDEX
  FROM   qp_npreq_rltd_lines_tmp
  WHERE  RELATED_LINE_INDEX = l_line_index
  AND    RELATIONSHIP_TYPE_CODE = G_SERVICE_LINE;

-- Cursor for getting the unit price of the parent line ex: Oracle 8i line
/*
INDX,QP_PREQ_GRP.call_calculation_engine.l_get_price_parent_line_cur,qp_npreq_lines_tmp_N1,LINE_INDEX,1
*/
CURSOR l_get_price_parent_line_cur(l_line_index PLS_INTEGER) IS
  SELECT UNIT_PRICE,
         LINE_UNIT_PRICE, --fix bug 2776849, uom_service_pricing
         PRICED_QUANTITY,
         LINE_QUANTITY,
         LINE_UOM_CODE  --fix bug 2776849, uom_service_pricing
  FROM   qp_npreq_lines_tmp
  WHERE  LINE_INDEX = l_line_index;

/*
INDX,lQP_PREQ_GRP.create_qualifier_from_list._check_modlist_cur,qp_npreq_line_attrs_tmp_N2,PRICING_STATUS_CODE,1
INDX,lQP_PREQ_GRP.create_qualifier_from_list._check_modlist_cur,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE_TYPE,2
INDX,lQP_PREQ_GRP.create_qualifier_from_list._check_modlist_cur,qp_npreq_line_attrs_tmp_N2,CONTEXT,3
INDX,lQP_PREQ_GRP.create_qualifier_from_list._check_modlist_cur,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE,4
INDX,lQP_PREQ_GRP.create_qualifier_from_list._check_modlist_cur,qp_npreq_line_attrs_tmp_N2,LINE_INDEX,5
INDX,lQP_PREQ_GRP.create_qualifier_from_list._check_modlist_cur,qp_npreq_line_attrs_tmp_N2,VALUE_FROM,6
*/
CURSOR gsa_qualifier_exists(p_line_index PLS_INTEGER)  IS
  SELECT 'X'
  FROM   qp_npreq_line_attrs_tmp
  WHERE  CONTEXT = G_CUSTOMER_CONTEXT
  AND    ATTRIBUTE = G_GSA_ATTRIBUTE
  AND    VALUE_FROM = G_YES
  AND    LINE_INDEX = p_line_index
  AND    PRICING_STATUS_CODE = G_STATUS_UNCHANGED
  AND    ATTRIBUTE_TYPE = G_QUALIFIER_TYPE;

-- begin shulin bug 1605829 fix
CURSOR get_request_prclst_name_cur (p_list_header_id PLS_INTEGER) IS
	SELECT name
	FROM qp_list_headers_v a
 	WHERE a.list_header_id = p_list_header_id;

CURSOR get_request_inv_item_id_cur(p_line_index PLS_INTEGER) IS
	SELECT qp_number.canonical_to_number(VALUE_FROM)
	FROM   qp_npreq_line_attrs_tmp
	WHERE  CONTEXT = G_PRIC_ITEM_CONTEXT
	AND    ATTRIBUTE = G_PRIC_ATTRIBUTE1
	AND    ATTRIBUTE_TYPE = G_PRODUCT_TYPE
	AND    LINE_INDEX = p_line_index
	AND    PRICING_STATUS_CODE = G_STATUS_UNCHANGED;

CURSOR get_request_inv_item_name_cur(p_item_id PLS_INTEGER) IS
 	SELECT concatenated_segments
 	--INTO l_request_item_name
 	FROM mtl_system_items_vl
 	WHERE inventory_item_id = p_item_id
        AND organization_id = QP_UTIL.Get_Item_Validation_Org;
-- end shulin bug 1605829 fix

J PLS_INTEGER:=1;
N PLS_INTEGER:=1;
B PLS_INTEGER:=0;
C PLS_INTEGER:=0;
l_reason_tbl VARCHAR_TYPE;
l_parent_line_detail_index PLS_INTEGER;
l_rltd_line_index PLS_INTEGER;
l_parent_line_index PLS_INTEGER;
l_percent_price NUMBER := 0;
l_parent_unit_price    NUMBER :=NULL; -- fix bug 2776849, uom_service_pricing
l_parent_line_unit_price    NUMBER :=NULL; -- fix bug 2776849, uom_service_pricing
l_parent_line_quantity NUMBER:=NULL;
l_parent_priced_quantity NUMBER:=NULL;
l_parent_line_uom_code VARCHAR2(30);
l_GSA_Enabled_Flag VARCHAR2(50);
l_GSA_Qualifier_Flag VARCHAR2(50);
l_status_code   VARCHAR2(30);
l_status_text   VARCHAR2(240);
l_gsa_violation_flag   VARCHAR2(1);
l_routine VARCHAR2(240):= 'Routine:QP_PREQ_GRP.Call_Calculation_Engine';
l_err_line_index   NUMBER;
l_attribute	    VARCHAR2(30);
l_value            VARCHAR2(30);
V                  PLS_INTEGER := 0;
U                  PLS_INTEGER := 0;
Y                  PLS_INTEGER := 0;
L                  PLS_INTEGER := 0;

G_UNIT_PRICE_TBL_C             NUMBER_TYPE;
G_LINE_UNIT_PRICE_TBL_C	       NUMBER_TYPE; -- shu_latest
G_ORDER_UOM_TBL_C              NUMBER_TYPE; -- bug 2693700
G_PERCENT_PRICE_TBL_C          NUMBER_TYPE;
G_ADJUSTED_UNIT_PRICE_TBL_C    NUMBER_TYPE;
G_PARENT_PRICE_TBL_C           NUMBER_TYPE;
G_PARENT_PRICED_QUANTITY_TBL_C NUMBER_TYPE;
G_PARENT_LINE_QUANTITY_TBL_C   NUMBER_TYPE;
G_PARENT_LINE_UOM_TBL_C        VARCHAR_TYPE;
G_LINE_INDEX_TBL_C             NUMBER_TYPE;
G_EXTENDED_PRICE_TBL_C         NUMBER_TYPE; -- block pricing
G_GSA_LINE_INDEX_TBL_C         NUMBER_TYPE;
l_line_details_exist_flag      BOOLEAN := FALSE;

G_ADJUSTMENT_AMOUNT_TBL_D      NUMBER_TYPE;
--G_LINE_QUANTITY_TBL_D          NUMBER_TYPE;
G_BENEFIT_QUANTITY_TBL_D       NUMBER_TYPE;
G_OPERAND_VALUE_TBL_D          NUMBER_TYPE;
G_QUALIFIER_VALUE_TBL_D        NUMBER_TYPE;
G_LINE_DETAIL_INDEX_TBL_D      NUMBER_TYPE;

G_LINE_QUANTITY_TBL_R          NUMBER_TYPE;
G_ADJUSTMENT_AMOUNT_TBL_R      NUMBER_TYPE;
G_LINE_DETAIL_INDEX_TBL_R      NUMBER_TYPE;

G_PARENT_PRICE_TBL_P           NUMBER_TYPE;

--[prarasto:Post Round] Start : new variables
l_adjusted_unit_price_ur       NUMBER_TYPE;
l_unit_selling_price_ur        NUMBER_TYPE;
l_extended_selling_price_ur    NUMBER_TYPE;
l_adjusted_unit_price          NUMBER_TYPE;
l_unit_selling_price           NUMBER_TYPE;
l_extended_selling_price       NUMBER_TYPE;
--[prarasto:Post Round] End : new variables

-- begin shulin bug 1605829 fix
l_request_price_list_name qp_list_headers_v.name%type;
l_request_uom VARCHAR2(30);
l_request_item_id NUMBER;
l_request_item_name mtl_system_items_vl.concatenated_segments%type;
l_message VARCHAR2(240);
-- end shulin bug 1605829 fix

l_line_unit_price  NUMBER:= NULL; -- shu, default to null, fix bug 2354422, avoid division zero
l_line_adjusted_unit_price  NUMBER:= NULL;
l_conversion_rate NUMBER:= NULL; -- shu, to fix bug 2354422
l_order_uom_selling_price NUMBER:= NULL; -- bug 2693700
v_price_round_options VARCHAR2(30):= FND_PROFILE.Value('QP_SELLING_PRICE_ROUNDING_OPTIONS'); --shu, new rounding

E_CAL_ENGINE_ERROR EXCEPTION;

BEGIN


  x_status_code := FND_API.G_RET_STS_SUCCESS;

  --For manual discount, we want pricing_group sequence to be NULL
/*
-- This update is not needed as it is taken care of by the setup
INDX,QP_PREQ_GRP.call_calculation_engine.call_calculation_engine_upd1,qp_npreq_ldets_tmp_N6,AUTOMATIC_FLAG,1
*/
  /* UPDATE qp_npreq_ldets_tmp
  SET    PRICING_GROUP_SEQUENCE = NULL
  WHERE  AUTOMATIC_FLAG = G_NO; */


  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug( '-------------In call calculation engine-----------');
  END IF;

  l_GSA_Enabled_Flag := FND_PROFILE.VALUE(G_GSA_Max_Discount_Enabled);

  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug ('GSA Enabled Flag : ' || l_GSA_Enabled_Flag);
  engine_debug ('Freeze_override_flag: '||p_freeze_override_flag);
  END IF;

  G_UNIT_PRICE_TBL_C.delete;
  G_LINE_UNIT_PRICE_TBL_C.delete; -- shu_latest
  G_ORDER_UOM_TBL_C.delete; -- bug 2693700
  G_PERCENT_PRICE_TBL_C.delete;
  G_ADJUSTED_UNIT_PRICE_TBL_C.delete;
  G_PARENT_PRICE_TBL_C.delete;
  G_PARENT_PRICED_QUANTITY_TBL_C.delete;
  G_PARENT_LINE_QUANTITY_TBL_C.delete;
  G_PARENT_LINE_UOM_TBL_C.delete;
  G_LINE_INDEX_TBL_C.delete;
  G_GSA_LINE_INDEX_TBL_C.delete;
  G_EXTENDED_PRICE_TBL_C.delete; -- block pricing

  G_ADJUSTMENT_AMOUNT_TBL_D.delete;
  --G_LINE_QUANTITY_TBL_D.delete;
  G_BENEFIT_QUANTITY_TBL_D.delete;
  G_OPERAND_VALUE_TBL_D.delete;
  G_QUALIFIER_VALUE_TBL_D.delete;
  G_LINE_DETAIL_INDEX_TBL_D.delete;

  G_LINE_QUANTITY_TBL_R.delete;
  G_ADJUSTMENT_AMOUNT_TBL_R.delete;
  G_LINE_DETAIL_INDEX_TBL_R.delete;
  G_PARENT_PRICE_TBL_P.delete;

  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug ('  G_REQUEST_TYPE_CODE: ' ||G_REQUEST_TYPE_CODE); -- shu, aso rounding
    engine_debug ('  G_ROUNDING_FLAG: ' ||G_ROUNDING_FLAG); -- shu, aso rounding
  END IF; -- END IF DEBUG

  FOR I IN l_request_line_cur LOOP

    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
      engine_debug('-----l_request_line_cur I loop ------');
      engine_debug ('  line_index: ' ||i.line_index);
      engine_debug ('  line_type_code: ' ||i.line_type_code);
      engine_debug ('  rounding_factor: ' ||i.rounding_factor);
      engine_debug ('  price_list_header_id: ' ||i.price_list_header_id);
    END IF;

    IF (l_GSA_Enabled_Flag = G_YES) THEN
      OPEN gsa_qualifier_exists(I.LINE_INDEX) ;
      FETCH gsa_qualifier_exists INTO l_GSA_Qualifier_Flag;
      CLOSE gsa_qualifier_exists;
    END IF;

    IF (I.PRICE_FLAG <> G_NO) THEN
	--IF (l_attribute = G_QUANTITY_ATTRIBUTE) THEN
	-- Default value
      p_cal_req_line_rec.qualifier_value := NVL(I.priced_quantity,I.line_quantity);
	--ELSE
      -- p_cal_req_line_rec.qualifier_value := nvl(nvl(I.PRICED_QUANTITY,I.LINE_QUANTITY) * I.UNIT_PRICE,0);
	--END IF;


      p_cal_req_line_rec.line_index             :=I.line_index;
      p_cal_req_line_rec.unit_price             :=I.unit_price;
      p_cal_req_line_rec.percent_price          :=I.percent_price;
      p_cal_req_line_rec.service_duration       :=nvl(I.uom_quantity,1);
      p_cal_req_line_rec.gsa_qualifier_flag     :=l_GSA_Qualifier_Flag;
      p_cal_req_line_rec.gsa_enabled_flag       :=l_GSA_Enabled_Flag;
      p_cal_req_line_rec.pricing_effective_date :=I.pricing_effective_date;
      p_cal_req_line_rec.rounding_factor        :=I.rounding_factor;
      p_cal_req_line_rec.rounding_flag          :=I.rounding_flag;

    END IF; -- END IF (I.PRICE_FLAG <> G_NO)

    IF (I.PROCESSING_ORDER > 1) THEN -- service pricing

      OPEN l_service_item_cur(I.LINE_INDEX);
      FETCH l_service_item_cur INTO l_parent_line_index;
      CLOSE l_service_item_cur;

      IF (l_parent_line_index IS NOT NULL) THEN

	OPEN  l_get_price_parent_line_cur(l_parent_line_index);
	FETCH l_get_price_parent_line_cur
        INTO  l_parent_unit_price,      --fix bug 2776849, uom_service_pricing
              l_parent_line_unit_price, --fix bug 2776849, uom_service_pricing
              l_parent_priced_quantity,
              l_parent_line_quantity,
              l_parent_line_uom_code;
	CLOSE l_get_price_parent_line_cur;

        -- if price flag is 'N' for the parent line , then that record would not exist in g_parent_price_tbl_p
        -- So check  g_parent_price_tbl_p.exists(l_parent_line_index), bug# 2163919
        -- begin fix bug 2776849, uom_service_pricing
        IF (g_parent_price_tbl_p.count > 0) AND g_parent_price_tbl_p.exists(l_parent_line_index) THEN
          p_cal_req_line_rec.RELATED_ITEM_PRICE := nvl(nvl(G_PARENT_PRICE_TBL_P(l_parent_line_index),l_parent_line_unit_price), l_parent_unit_price);
        ELSE
          p_cal_req_line_rec.RELATED_ITEM_PRICE := nvl(l_parent_line_unit_price, l_parent_unit_price);
        END IF; -- END IF (g_parent_price_tbl_p.count > 0)

        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
          engine_debug('  l_parent_line index : '|| l_parent_line_index);
          engine_debug('  p_cal_req_line_rec.RELATED_ITEM_PRICE: '|| p_cal_req_line_rec.RELATED_ITEM_PRICE);
        END IF; -- END IF DEBUG

      ELSE -- l_parent_line_index is null
		-- Error Condition
        null;
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
          engine_debug('Unable to find parent line for a service item');
        END IF;
        l_err_line_index := I.LINE_INDEX;
        DELETE_LINES(l_err_line_index,
                       G_STATUS_OTHER_ERRORS,
                       'Could not find parent line for a child service line:'||l_err_line_index,
                       l_status_code,
                       l_status_text);
        GOTO E_LOOP;
      END IF;  -- END IF (l_parent_line_index IS NOT NULL)

    END IF; -- END IF (I.PROCESSING_ORDER > 1)

    FOR K IN l_request_line_detail_cur(I.LINE_INDEX,I.PRICE_FLAG) LOOP
      IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
           engine_debug('-----l_request_line_detail_cur K loop------');
      END IF;

      l_line_details_exist_flag := TRUE;

       -- Don't populate calculation engine rec if it is not an automatic discount
       -- and it is not a direct call
       -- If freight charges and Discount related manual Price Breaks or recurring discounts,
       -- do not skip calculation even if automatic_flag = 'N'
         IF K.AUTOMATIC_FLAG = G_NO AND p_is_direct_call = FALSE  THEN
           IF (K.created_from_list_line_type NOT IN (G_FREIGHT_CHARGE,G_PRICE_BREAK_TYPE) AND
               K.created_from_list_type_code NOT IN ('PRL','AGR') AND
               K.PRICE_BREAK_TYPE_CODE <> G_RECURRING_BREAK AND
               K.LINE_DETAIL_TYPE_CODE <> G_CHILD_DETAIL_TYPE)THEN
             GOTO SKIP_CAL_LOOP;
           END IF;
         END IF;

         IF (K.LINE_DETAIL_TYPE_CODE <> G_CHILD_DETAIL_TYPE) THEN

            p_cal_req_ldets_tbl(J).created_from_list_type   := K.created_from_list_type_code;
            p_cal_req_ldets_tbl(J).created_from_list_line_id:= K.created_from_list_line_id;
            p_cal_req_ldets_tbl(J).created_from_list_header_id:= K.created_from_list_header_id;
            p_cal_req_ldets_tbl(J).line_detail_index        := K.line_detail_index;
            p_cal_req_ldets_tbl(J).created_from_list_line_type:= K.created_from_list_line_type;
            p_cal_req_ldets_tbl(J).pricing_group_sequence   := K.pricing_group_sequence;
            p_cal_req_ldets_tbl(J).accrual_flag             := K.accrual_flag;
            p_cal_req_ldets_tbl(J).automatic_flag           := K.automatic_flag;
            p_cal_req_ldets_tbl(J).accrual_conversion_rate  := K.accrual_conversion_rate;
            p_cal_req_ldets_tbl(J).estim_accrual_rate       := K.estim_accrual_rate;
            p_cal_req_ldets_tbl(J).price_break_type_code    := K.price_break_type_code;
            p_cal_req_ldets_tbl(J).bucketed_flag := 'N';   -- TO_DO 2388011, IT bucket, for now, should from the cursor
            --p_cal_req_ldets_tbl(J).bucketed_flag := k.bucketed_flag; -- TO_DO 2388011, IT bucket
             p_cal_req_ldets_tbl(J).bucketed_flag := nvl(k.net_amount_flag, 'N'); -- 2720717, IT net_amount



            IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
            engine_debug('List Line Id for Qualifier Value: ' || k.created_from_list_line_id);

            END IF;
            -- This is not needed as in Process_Line_Group procedure we are populating the right attibute
            -- So either it would be group_quantity or group_amount

               /* OPEN l_list_line_attribute_cur(K.created_from_list_line_id);
               FETCH l_list_line_attribute_cur INTO l_attribute;
               CLOSE l_list_line_attribute_cur; */

               IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
		  engine_debug('Modifier Level Code: ' || K.modifier_level_code);
               END IF;

               IF (K.MODIFIER_LEVEL_CODE = G_LINE_GROUP) THEN
                 -- begin 2388011_new
                 IF (K.SELECTED_VOLUME_ATTR = G_AMOUNT) THEN -- 2388011_new
                   p_cal_req_ldets_tbl(J).qualifier_value  := nvl(K.line_quantity,0);
                 END IF;
                 p_cal_req_ldets_tbl(J).line_quantity := nvl(K.group_quantity,K.group_amount); -- ASK RAVI
                 --p_cal_req_ldets_tbl(J).line_quantity := nvl(K.line_quantity,0); --2388011, grp_lines_pbh
                 --end 2388011_new
                 p_cal_req_ldets_tbl(J).modifier_level_code := 'LINEGROUP'; --2388011, grp_lines_pbh
               ELSE
                 -- begin 2388011_new
                 -- 2388011_latest whole block
                IF (K.SELECTED_VOLUME_ATTR = G_QUANTITY) THEN -- ravi_latest
                 p_cal_req_ldets_tbl(J).line_quantity :=  NVL(I.priced_quantity,I.line_quantity);
                 p_cal_req_ldets_tbl(J).modifier_level_code := 'LINE'; -- new ravi
                ELSE -- Amount and Other Attributes
                 p_cal_req_ldets_tbl(J).line_quantity :=  NVL(I.priced_quantity,I.line_quantity);
                 p_cal_req_ldets_tbl(J).modifier_level_code := 'LINE'; -- new ravi
                 p_cal_req_ldets_tbl(J).qualifier_value  := nvl(K.line_quantity,0);
                END IF;
                -- end 2388011_latest
                 l_value := null;
               END IF;

            IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
            engine_debug('Qualifier Value for loading: ' || p_cal_req_ldets_tbl(J).qualifier_value);

            END IF;
            p_cal_req_ldets_tbl(J).operand_calculation_code:=K.operand_calculation_code;
            p_cal_req_ldets_tbl(J).operand_value:=K.operand_value;

            IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
            engine_debug('accrual_flag: '||p_cal_req_ldets_tbl(J).accrual_flag);
            engine_debug('estim_accrual_rate: '||p_cal_req_ldets_tbl(J).estim_accrual_rate);
            engine_debug('accrual_conversion_rate: '||p_cal_req_ldets_tbl(J).accrual_conversion_rate);

            END IF;
            J:=J+1;

           IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
           engine_debug('+--------------------------------+');
           engine_debug('| In Parent Line                 |');
           engine_debug('+--------------------------------+');
           engine_debug('LINE_DETAIL_INDEX: '||K.line_detail_index);
           engine_debug('LINE_INDEX: '|| K.line_index);
           engine_debug('CREATED_FROM_LIST_LINE_ID :'||K.created_from_list_line_id);
           engine_debug('CREATED_FROM_LIST_LINE_TYPE : '||K.created_from_list_line_type);
           engine_debug('CREATED_FROM_LIST_TYPE : '||K.created_from_list_type_code);
           engine_debug('PRICING_GROUP_SEQUENCE: '||K.pricing_group_sequence);
           engine_debug('OPERAND_CALCULATION_CODE: '||K.operand_calculation_code);
           engine_debug('OPERAND_VALUE: '||K.operand_value);
            engine_debug('NET_AMOUNT_FLAG: '||k.net_amount_flag); -- 2720717, IT net_amount

           END IF;
          ELSIF  (K.LINE_DETAIL_TYPE_CODE = G_CHILD_DETAIL_TYPE) THEN
                --FOR P IN l_line_attrs_cur(K.LINE_DETAIL_INDEX) LOOP

                p_cal_req_rltd_tbl(N).value_from := qp_number.canonical_to_number(G_CHILD_VALUE_FROM_TBL(k.line_detail_index));
                p_cal_req_rltd_tbl(N).value_to   := qp_number.canonical_to_number(G_CHILD_VALUE_TO_TBL(k.line_detail_index));
                p_cal_req_rltd_tbl(N).operand_calculation_code := K.operand_calculation_code;
                p_cal_req_rltd_tbl(N).operand_value := K.operand_value;
                p_cal_req_rltd_tbl(N).price_break_type_code := K.price_break_type_code;
                p_cal_req_rltd_tbl(N).child_line_detail_index :=K.line_detail_index;
                p_cal_req_rltd_tbl(N).related_list_line_type := K.created_from_list_line_type;
                p_cal_req_rltd_tbl(N).pricing_group_sequence := K.pricing_group_sequence;
                p_cal_req_rltd_tbl(N).recurring_value := K.recurring_value; -- block pricing

                --get the parent line detail index for this pbh line

/*
INDX,QP_PREQ_GRP.call_calculation_engine.call_calculation_engine_sel1,-No Index Used-,NA,NA
*/
                /* julin [3805113]: using global table populated in handle_break
                SELECT LINE_DETAIL_INDEX
                INTO  l_parent_line_detail_index
                FROM  qp_npreq_rltd_lines_tmp
                WHERE RELATED_LINE_DETAIL_INDEX = K.line_detail_index;
                */
                --p_cal_req_rltd_tbl(N).line_detail_index  is actually parent line detail index
                p_cal_req_rltd_tbl(N).line_detail_index  := TO_NUMBER(G_PARENT_LINE_DETAIL_INDEX_TBL(k.line_detail_index));

                IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                engine_debug('----IN Children line------------');
                engine_debug('value from: '||p_cal_req_rltd_tbl(N).value_from);
                engine_debug('value to: '  ||p_cal_req_rltd_tbl(N).value_to);
                engine_debug('LINE_INDEX: '||I.LINE_INDEX);
                engine_debug('Calculation Code: '||K.OPERAND_CALCULATION_CODE);
                engine_debug('Operand Value: '||K.OPERAND_VALUE);
                engine_debug('Price_break_type_code: '||K.PRICE_BREAK_TYPE_CODE);
                engine_debug('Parent line detail index: '||l_parent_line_detail_index);
                engine_debug('Child line detail index: '||K.LINE_DETAIL_INDEX);
                engine_debug('Related List line type: '||K.created_from_list_line_type);
                engine_debug('List Line ID: '||K.created_from_list_line_id);

                END IF;
                N:=N+1;

                --END LOOP;


          END IF;
          <<SKIP_CAL_LOOP>>
           IF(K.AUTOMATIC_FLAG = G_NO AND p_is_direct_call = FALSE) THEN
              IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
              engine_debug('Not calling cal engine for child break line because automatic_flag was set to ''N''');
              END IF;
              null;
           END IF;

       END LOOP;  --END K loop


IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
engine_debug(l_routine||' Before calling cal engine');

END IF;
     QP_Calculate_Price_PUB.Calculate_Price
          (p_cal_req_line_rec,
           p_cal_req_ldets_tbl,
           p_cal_req_rltd_tbl,
           l_status_code,
           l_status_text);

IF (l_status_code = FND_API.G_RET_STS_ERROR) THEN
   l_err_line_index := I.LINE_INDEX;
   DELETE_LINES(l_err_line_index,
                G_STATUS_OTHER_ERRORS,
                'Error returned by QP_Calculate_Price_PUB.Calculate_Price',
                l_status_code,
                l_status_text);
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('Error text '||l_status_text);
    END IF;
    GOTO E_LOOP;

END IF;

/* fix bug 2776849, move this to later
-- Holding the parent price for service pricing
IF (i.PROCESSING_ORDER = 1 ) THEN
 G_PARENT_PRICE_TBL_P(i.line_index) := p_cal_req_line_rec.UNIT_PRICE;
END IF;
*/
-- Indicating that there was a GSA Violation
IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
engine_debug ('GSA Status Code : ' || l_status_code);
END IF;
IF (l_status_code = G_STATUS_GSA_VIOLATION) THEN
  l_gsa_violation_flag := 'Y';
  V := V + 1;
  G_GSA_LINE_INDEX_TBL_C(V) := I.LINE_INDEX;
ELSE
  l_gsa_violation_flag := 'N';
END IF;

IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
engine_debug ('In Line Update Information100');
END IF;
 -- Load Line Information
 IF (l_line_details_exist_flag = TRUE) THEN --Change
  U := U+1; --Change
  G_UNIT_PRICE_TBL_C(U) := p_cal_req_line_rec.UNIT_PRICE;
  G_PERCENT_PRICE_TBL_C(U) := p_cal_req_line_rec.PERCENT_PRICE;
  G_ADJUSTED_UNIT_PRICE_TBL_C(U) := p_cal_req_line_rec.ADJUSTED_UNIT_PRICE;
  --G_PARENT_PRICE_TBL_C(U) := l_parent_line_price;
  G_PARENT_PRICE_TBL_C(U) := l_parent_line_unit_price; -- fix 2776849, uom_service_pricing
  G_PARENT_PRICED_QUANTITY_TBL_C(U) := l_parent_priced_quantity;
  G_PARENT_LINE_QUANTITY_TBL_C(U) := l_parent_line_quantity;
  G_PARENT_LINE_UOM_TBL_C(U) := l_parent_line_uom_code;
  G_LINE_INDEX_TBL_C(U) := i.line_index;
  G_EXTENDED_PRICE_TBL_C(U) := p_cal_req_line_rec.EXTENDED_PRICE; -- block pricing
  --G_LINE_UNIT_PRICE_TBL_C(U) := p_cal_req_line_rec.UNIT_PRICE * i.PRICED_QUANTITY / i.LINE_QUANTITY;

  -- begin shu, round line unit price (unit price by order uom)
  -- shu, fix bug 2354422, avoid division zero if i.LINE_QUANTITY is zero

  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug ('parent_qty: '|| l_parent_priced_quantity);
  engine_debug ('unit_price: '|| p_cal_req_line_rec.UNIT_PRICE);
  engine_debug ('priced_qty: '|| i.PRICED_QUANTITY);
  engine_debug ('line_qty: '|| i.LINE_QUANTITY);
  END IF;

  IF (i.LINE_QUANTITY <> 0 AND i.LINE_QUANTITY IS NOT NULL) THEN
   -- l_line_unit_price := p_cal_req_line_rec.UNIT_PRICE * i.PRICED_QUANTITY / i.LINE_QUANTITY;-- bug 2693700
   -- l_line_unit_price:=(p_cal_req_line_rec.UNIT_PRICE * i.PRICED_QUANTITY/i.LINE_QUANTITY)*nvl(i.catchweight_qty, 1);
   IF (i.catchweight_qty IS NOT NULL) THEN
    l_line_unit_price :=
    p_cal_req_line_rec.unit_price * (i.priced_quantity/i.actual_order_quantity)* (i.catchweight_qty/i.line_quantity);
   ELSIF (i.actual_order_quantity IS NOT NULL) THEN
    l_line_unit_price :=
    p_cal_req_line_rec.unit_price * (i.priced_quantity/i.actual_order_quantity);
   ELSE
    l_line_unit_price := p_cal_req_line_rec.unit_price * (i.priced_quantity/i.line_quantity);
   END IF;

   -- bug 2693700
   --l_order_uom_selling_price :=
   --(nvl(p_cal_req_line_rec.adjusted_unit_price,p_cal_req_line_rec.unit_price) *
   --i.priced_quantity/ i.line_quantity)* nvl(i.catchweight_qty, 1);
   -- bug 2693700

   IF (i.catchweight_qty IS NOT NULL) THEN
    l_order_uom_selling_price := (nvl(p_cal_req_line_rec.adjusted_unit_price,p_cal_req_line_rec.unit_price) *
    (i.priced_quantity/i.actual_order_quantity)* (i.catchweight_qty/i.line_quantity));
   ELSIF (i.actual_order_quantity IS NOT NULL) THEN
    l_order_uom_selling_price := (nvl(p_cal_req_line_rec.adjusted_unit_price,p_cal_req_line_rec.unit_price) *
    (i.priced_quantity/i.actual_order_quantity));
   ELSE
    l_order_uom_selling_price := (nvl(p_cal_req_line_rec.adjusted_unit_price,p_cal_req_line_rec.unit_price)*
    (i.priced_quantity/i.line_quantity));
   END IF;

  ELSE
   IF (i.LINE_UOM_CODE = i.PRICED_UOM_CODE) THEN  -- no uom conversion
    l_line_unit_price := p_cal_req_line_rec.UNIT_PRICE;
    l_line_adjusted_unit_price := nvl(p_cal_req_line_rec.ADJUSTED_UNIT_PRICE,p_cal_req_line_rec.UNIT_PRICE);
   ELSE -- uom conversion, need to show line_unit_price even line_qty is zero or null
    Inv_convert.inv_um_conversion(i.line_uom_code,
                                  i.priced_uom_code,
                                  null,
                                  l_conversion_rate);
    l_line_unit_price := p_cal_req_line_rec.UNIT_PRICE * l_conversion_rate;
    l_line_adjusted_unit_price := nvl(p_cal_req_line_rec.ADJUSTED_UNIT_PRICE,p_cal_req_line_rec.UNIT_PRICE) *
                                  l_conversion_rate;
   END IF;

   -- l_order_uom_selling_price := (nvl(p_cal_req_line_rec.adjusted_unit_price,p_cal_req_line_rec.unit_price) *
   -- l_conversion_rate * i.priced_quantity/ i.line_quantity)* nvl(i.catchweight_qty, 1);
   -- bug 2693700
   IF (i.catchweight_qty IS NOT NULL) THEN

      if (i.line_quantity <> 0) then
       l_order_uom_selling_price := (l_line_adjusted_unit_price *
(i.priced_quantity/i.actual_order_quantity)* (i.catchweight_qty/i.line_quantity));
      Else
       l_order_uom_selling_price := l_line_adjusted_unit_price;
--Bug#3075286
      End if;
      ELSIF (i.actual_order_quantity IS NOT NULL) THEN

      if i.actual_order_quantity <> 0 then
       l_order_uom_selling_price := (l_line_adjusted_unit_price * (i.priced_quantity/i.actual_order_quantity));
      Else
       l_order_uom_selling_price := l_line_adjusted_unit_price;   --Bug#3075286
      End if;
      ELSE


       IF i.LINE_QUANTITY <> 0 THEN

           l_order_uom_selling_price := (l_line_adjusted_unit_price *(i.priced_quantity/i.line_quantity));
       ELSE
           l_order_uom_selling_price := l_line_adjusted_unit_price;
--Bug#3075286
       END IF;
      END IF;

  END IF;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug ('line_unit_price bfe round: '||l_line_unit_price);
  engine_debug ('rounding_factor:'|| i.rounding_factor);
  engine_debug (' order_uom_selling_price bfe round : ' || l_order_uom_selling_price); -- bug 2693700
  END IF;

  -- Holding the parent price for service pricing
  IF (i.PROCESSING_ORDER = 1 ) THEN
    G_PARENT_PRICE_TBL_P(i.line_index) := nvl(l_line_unit_price, p_cal_req_line_rec.UNIT_PRICE) ;
  END IF;

  --===[prarasto:Post Round] Start : Calculate rounded values ==--
  l_adjusted_unit_price_ur(U) := NVL(G_ADJUSTED_UNIT_PRICE_TBL_C(U), G_UNIT_PRICE_TBL_C(U));

  l_unit_selling_price_ur(U) := l_order_uom_selling_price;

  IF( G_EXTENDED_PRICE_TBL_C(U) is not null )THEN
      IF ( i.catchweight_qty is null ) and ( i.actual_order_quantity IS NOT NULL ) THEN
        l_extended_selling_price_ur(U) := l_unit_selling_price_ur(U) * i.actual_order_quantity;
      ELSE
        l_extended_selling_price_ur(U) := l_unit_selling_price_ur(U) * i.line_quantity;
      END IF;
  ELSE
    l_extended_selling_price_ur(U) := G_EXTENDED_PRICE_TBL_C(U);
  END IF;

  --9153159 added v_price_round_options condition to unround if the profile option is set to No Rounding
  IF (G_ROUNDING_FLAG = 'N') or (i.rounding_factor IS null) OR (v_price_round_options = 'NO_ROUND') THEN
    l_adjusted_unit_price(U) := l_adjusted_unit_price_ur(U);
    l_unit_selling_price(U) := l_unit_selling_price_ur(U);
    l_extended_selling_price(U) := l_extended_selling_price_ur(U);
   	G_LINE_UNIT_PRICE_TBL_C(U) := l_line_unit_price;
ELSE
    l_adjusted_unit_price(U) := round(l_adjusted_unit_price_ur(U), - 1 * i.rounding_factor);
    l_unit_selling_price(U) := round(l_unit_selling_price_ur(U),  - 1 * i.rounding_factor);
    l_extended_selling_price(U) := round(l_extended_selling_price_ur(U),  - 1 * i.rounding_factor);
    G_LINE_UNIT_PRICE_TBL_C(U) := round(l_line_unit_price,  - 1 * i.rounding_factor);
  END IF;
/*
  IF G_ROUNDING_FLAG = 'Y'  AND i.rounding_factor IS NOT NULL THEN -- aso rounding

  	l_line_unit_price := ROUND(l_line_unit_price, (-1)*i.rounding_factor);
  	G_LINE_UNIT_PRICE_TBL_C(U) := l_line_unit_price;

        l_order_uom_selling_price := ROUND(l_order_uom_selling_price, (-1)*i.rounding_factor); --bug 2693700
        G_ORDER_UOM_TBL_C(U) := l_order_uom_selling_price; -- bug 2693700


  ELSIF (G_ROUNDING_FLAG = 'Q') THEN -- check qp_selling_price_rounding_options profile -- shu, new rounding
  	IF ((v_price_round_options = 'ROUND_ADJ' OR v_price_round_options = 'NO_ROUND_ADJ') AND i.rounding_factor IS NOT NULL) THEN -- do not round if profile is null
  		l_line_unit_price := ROUND(l_line_unit_price, (-1)*i.rounding_factor);
  		G_LINE_UNIT_PRICE_TBL_C(U) := l_line_unit_price;

                l_order_uom_selling_price := ROUND(l_order_uom_selling_price, (-1)*i.rounding_factor); --bug 2693700
                G_ORDER_UOM_TBL_C(U) := l_order_uom_selling_price; -- bug 2693700

  	ELSE -- 'NO_ROUND', 'NO_ROUND_ADJ'
  		G_LINE_UNIT_PRICE_TBL_C(U) := l_line_unit_price;
                G_ORDER_UOM_TBL_C(U) := l_order_uom_selling_price; -- bug 2693700
  	END IF;
  ELSE
  	G_LINE_UNIT_PRICE_TBL_C(U) := l_line_unit_price;
        G_ORDER_UOM_TBL_C(U) := l_order_uom_selling_price; -- bug 2693700
  END IF;
*/
  --===[prarasto:Post Round] End : Calculate rounded values ==--

  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug (' final line_unit_price : '||l_line_unit_price);
  engine_debug (' order_uom_selling_price : ' || l_order_uom_selling_price); -- bug 2693700
  engine_debug ('G_LINE_UNIT_PRICE_TBL_C(U) : '||G_LINE_UNIT_PRICE_TBL_C(U));	--[prarasto:Post Round]
  engine_debug ('l_unit_selling_price(U) : '||l_unit_selling_price(U));		--[prarasto:Post Round]
  END IF;
  -- end shu
  l_line_details_exist_flag := FALSE; -- reset
  l_line_unit_price := NULL; --reset, shu
  l_order_uom_selling_price := NULL; -- bug 2693700
  l_conversion_rate := NULL; -- shu
 END IF;

IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
engine_debug ('In Line Update Information200');
END IF;
 --Load Line Detail Information
IF (p_cal_req_ldets_tbl.COUNT > 0) THEN
 FOR X IN p_cal_req_ldets_tbl.FIRST .. p_cal_req_ldets_tbl.LAST
 LOOP
  Y := Y + 1;
  G_ADJUSTMENT_AMOUNT_TBL_D(Y) := p_cal_req_ldets_tbl(X).adjustment_amount;
  G_BENEFIT_QUANTITY_TBL_D(Y) := p_cal_req_ldets_tbl(X).benefit_qty;
  G_OPERAND_VALUE_TBL_D(Y) := p_cal_req_ldets_tbl(X).operand_value;

  -- 2388011_new
  /*
  --begin 2388011, grp_of_lines_pbh
  IF (p_cal_req_ldets_tbl(X).modifier_level_code = G_LINE_GROUP) THEN
   G_QUALIFIER_VALUE_TBL_D(Y) := p_cal_req_ldets_tbl(X).qualifier_value;
  ELSE
   G_QUALIFIER_VALUE_TBL_D(Y) := NULL; -- needed , do not remove this code
  END IF;
  -- end 2388011, grp_of_lines_pbh
  */

  G_LINE_DETAIL_INDEX_TBL_D(Y) := p_cal_req_ldets_tbl(X).line_detail_index;
 END LOOP;
END IF;

IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
engine_debug ('In Line Update Information300');
engine_debug ('Related Pl/sql table count : ' || p_cal_req_rltd_tbl.count);

END IF;
 -- Load Related Lines Information
IF (p_cal_req_rltd_tbl.COUNT > 0) THEN
 FOR X IN p_cal_req_rltd_tbl.FIRST .. p_cal_req_rltd_tbl.LAST
 LOOP
IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
engine_debug ('In Line Update Information3001');
engine_debug ('Line Qty : ' || p_cal_req_rltd_tbl(X).line_qty);
engine_debug ('Adjustment Amt : ' || p_cal_req_rltd_tbl(X).adjustment_amount);
engine_debug ('Line Detail : ' || p_cal_req_rltd_tbl(X).child_line_detail_index);
END IF;
  L := L+1;
  G_LINE_QUANTITY_TBL_R(L) := p_cal_req_rltd_tbl(X).line_qty;
  G_ADJUSTMENT_AMOUNT_TBL_R(L) := p_cal_req_rltd_tbl(X).adjustment_amount;
  G_LINE_DETAIL_INDEX_TBL_R(L) := p_cal_req_rltd_tbl(X).child_line_detail_index;
 END LOOP;
END IF;

--Need to change it when have more time. Using bulk binding features.
--to imporve performance

IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
engine_debug ('In Line Update Information400');
 engine_debug('#7');
END IF;
 --Bug# 1372485
 --Unit price can not be null at the very first phase
  IF (p_phase_sequence = G_PRICE_LIST_SEQUENCE
     AND  p_cal_req_line_rec.UNIT_PRICE IS NULL
     AND  I.line_type_code <> G_ORDER_LEVEL
	AND  I.price_flag <> G_NO) THEN

	-- begin shu, fix bug 2425027
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
 	 engine_debug ('percent price: '||p_cal_req_line_rec.PERCENT_PRICE);
 	 engine_debug ('related item price: '||p_cal_req_line_rec.RELATED_ITEM_PRICE);
   END IF;

 	 IF p_cal_req_line_rec.PERCENT_PRICE IS NOT NULL AND p_cal_req_line_rec.RELATED_ITEM_PRICE IS NULL THEN
 	 	l_message := ' No refernce of parent item or parent price is null for percent-based pricing.';
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
 	 	engine_debug ('line_index: '||i.line_index);
    END IF;
 	 	UPDATE qp_npreq_lines_tmp qplines
  		SET
         	PROCESSED_FLAG = G_PROCESSED,
         	PERCENT_PRICE = p_cal_req_line_rec.PERCENT_PRICE -- still keep the percent_price
  		WHERE qplines.LINE_INDEX = i.LINE_INDEX;

  		DELETE_LINES (i.LINE_INDEX,
                  		G_STATUS_INVALID_PRICE_LIST,
                  		l_message,
                                l_status_code,
                                l_status_text);
 	 ELSE
	 -- end shu, fix bug 2425027

   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
 		engine_debug('#8');

   END IF;
        	-- begin shulin bug 1605829 fix

 		OPEN get_request_prclst_name_cur(I.PRICE_LIST_HEADER_ID);
      		FETCH get_request_prclst_name_cur INTO l_request_price_list_name;
     		CLOSE get_request_prclst_name_cur;

		OPEN get_request_inv_item_id_cur(I.LINE_INDEX);
      		FETCH get_request_inv_item_id_cur INTO l_request_item_id;
     		CLOSE get_request_inv_item_id_cur;

 		OPEN get_request_inv_item_name_cur(l_request_item_id);
      		FETCH get_request_inv_item_name_cur INTO l_request_item_name;
     		CLOSE get_request_inv_item_name_cur;

 		-- if item_name does not exist, then use inventory_id to display
 		IF l_request_item_name IS NULL AND l_request_item_id IS NOT NULL THEN
 			l_request_item_name := ' ID: ' || l_request_item_id;
 		END IF;

 		l_request_uom := I.LINE_UOM_CODE;

 		FND_MESSAGE.SET_NAME('QP','QP_PRC_NO_LIST_PRICE');
		FND_MESSAGE.SET_TOKEN('ITEM',l_request_item_name);
		FND_MESSAGE.SET_TOKEN('UNIT',l_request_uom);
		FND_MESSAGE.SET_TOKEN('PRICE_LIST',l_request_price_list_name);

                l_message := FND_MESSAGE.GET;

          IF (G_REQUEST_TYPE_CODE = 'PO' AND l_request_price_list_name IS NULL) THEN
       		SET_STATUS_CODE(NULL,
                       l_message,
                       I.LINE_INDEX,
                       NULL,
                      'LINES',
                      l_status_code,
                      l_status_text);

              ELSE
       		SET_STATUS_CODE(G_STATUS_INVALID_PRICE_LIST,
                       l_message,
                       I.LINE_INDEX,
                       NULL,
                      'LINES',
                      l_status_code,
                      l_status_text);
                 END IF;

       		SET_STATUS_CODE(G_STATUS_DELETED,
                       l_message,
                       I.LINE_INDEX,
                       NULL,
                      'ATTRS',
                      l_status_code,
                      l_status_text);

       		SET_STATUS_CODE(G_STATUS_DELETED,
                       l_message,
                       I.LINE_INDEX,
                       NULL,
                      'LDETS',
                      l_status_code,
                      l_status_text);

	-- end shu bug 1605829 fix

	END IF; -- end if p_cal_req_line_rec.PERCENT_PRICE IS NOT NULL, shu fix bug 2425027
  END IF;

--Reset the values for next loop
 l_parent_line_quantity := NULL;
 l_parent_unit_price :=NULL; --2776849
 l_parent_line_unit_price :=NULL; -- 2776849
 l_parent_line_uom_code :=NULL;
 l_message := NULL; -- shu, fix bug 2425027
 p_cal_req_line_rec := l_cal_req_line_rec;
 p_cal_req_ldets_tbl.DELETE ;
 p_cal_req_rltd_tbl.DELETE;
 J := 1; -- For new request line

<<E_LOOP>>
null;
END LOOP;  --end loop for I

IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
engine_debug ('In Line Update Information500');
END IF;
 -- Update All the Line Information at 1 shot
IF (G_LINE_INDEX_TBL_C.COUNT > 0 ) THEN
IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
engine_debug ('In Line Update Information');
END IF;
 FORALL M IN G_LINE_INDEX_TBL_C.FIRST.. G_LINE_INDEX_TBL_C.LAST
  UPDATE qp_npreq_lines_tmp qplines
  SET    PRICING_STATUS_CODE = G_STATUS_UPDATED,
         PROCESSED_FLAG = G_PROCESSED,
         UNIT_PRICE = G_UNIT_PRICE_TBL_C(M),
         LINE_UNIT_PRICE = G_LINE_UNIT_PRICE_TBL_C(M), --shu_latest
--         ORDER_UOM_SELLING_PRICE = G_ORDER_UOM_TBL_C(M), -- bug 2693700
         ORDER_UOM_SELLING_PRICE = l_unit_selling_price(M),         --[prarasto:Post Round]
         --ORDER_UOM_SELLING_PRICE_UR = l_unit_selling_price_ur(M),   --[prarasto:Post Round], [julin/postround] redesign
         PERCENT_PRICE = G_PERCENT_PRICE_TBL_C(M),
--         ADJUSTED_UNIT_PRICE = NVL(G_ADJUSTED_UNIT_PRICE_TBL_C(M), G_UNIT_PRICE_TBL_C(M)),
         ADJUSTED_UNIT_PRICE = l_adjusted_unit_price(M),            --[prarasto:Post Round]
         --ADJUSTED_UNIT_PRICE_UR = l_adjusted_unit_price_ur(M),      --[prarasto:Post Round], [julin/postround] redesign
         PARENT_PRICE = G_PARENT_PRICE_TBL_C(M),
         --PARENT_QUANTITY = NVL(G_PARENT_PRICED_QUANTITY_TBL_C(M),G_PARENT_LINE_QUANTITY_TBL_C(M)),
         PARENT_QUANTITY = NVL(G_PARENT_LINE_QUANTITY_TBL_C(M), G_PARENT_PRICED_QUANTITY_TBL_C(M)), -- 2776849
         --PARENT_UOM_CODE = G_PARENT_LINE_UOM_TBL_C(M),
         PARENT_UOM_CODE = G_PARENT_LINE_UOM_TBL_C(M), -- 2776849
--         EXTENDED_PRICE = G_EXTENDED_PRICE_TBL_C(M) -- block pricing
         EXTENDED_PRICE = l_extended_selling_price(M)               --[prarasto:Post Round]
         --EXTENDED_SELLING_PRICE_UR = l_extended_selling_price_ur(M)  --[prarasto:Post Round], [julin/postround] redesign
  WHERE qplines.LINE_INDEX = G_LINE_INDEX_TBL_C(M)
  AND (qplines.PRICE_FLAG <> G_NO or qplines.PROCESSED_CODE = G_BY_ENGINE) --CURRENT OF l_request_line_cur;
  -- shu, add following line to fix bug 2425027, so pricing_status_code IPL does not get changed to be UPDATED here
  AND (qplines.PRICING_STATUS_CODE <> G_STATUS_INVALID_PRICE_LIST
  OR  qplines.LIST_PRICE_OVERRIDE_FLAG IN ('Y', 'O'));  --po integration
END IF;

IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
engine_debug ('In Line Update Information600');
END IF;
IF (p_is_direct_call = TRUE) THEN
 -- Update All the Line Details Information at 1 Shot for all Lines
 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
 engine_debug ('In Line Detail Update Information1');
 END IF;
 IF (G_LINE_DETAIL_INDEX_TBL_D.COUNT > 0) THEN
  FORALL O IN G_LINE_DETAIL_INDEX_TBL_D.FIRST .. G_LINE_DETAIL_INDEX_TBL_D.LAST
   UPDATE qp_npreq_ldets_tmp
   SET ADJUSTMENT_AMOUNT = G_ADJUSTMENT_AMOUNT_TBL_D(O),
      --LINE_QUANTITY     = G_QUALIFIER_VALUE_TBL_D(O),-- 2388011, ASK RAVI, either priced_quantity,group_quantity,group_amount
      BENEFIT_QTY       = G_BENEFIT_QUANTITY_TBL_D(O),
      OPERAND_VALUE     = G_OPERAND_VALUE_TBL_D(O) --2388011_new, remove comma
      -- GROUP_QUANTITY    = G_QUALIFIER_VALUE_TBL_D(O), --2388011_new
      -- GROUP_AMOUNT      = G_QUALIFIER_VALUE_TBL_D(O)  --2388011_new
   WHERE LINE_DETAIL_INDEX =  G_LINE_DETAIL_INDEX_TBL_D(O);
 END IF;
ELSE
IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
engine_debug ('In Line Detail Update Information2');
END IF;
 -- Update All the Line Details Information at 1 Shot for all Lines
 IF (G_LINE_DETAIL_INDEX_TBL_D.COUNT > 0) THEN
  FORALL O IN G_LINE_DETAIL_INDEX_TBL_D.FIRST .. G_LINE_DETAIL_INDEX_TBL_D.LAST
   UPDATE /*+ index(QP_NPREQ_LDETS_TMP QP_PREQ_LDETS_TMP_U1) */  qp_npreq_ldets_tmp  --5658579
   SET ADJUSTMENT_AMOUNT = G_ADJUSTMENT_AMOUNT_TBL_D(O),
      --LINE_QUANTITY     = G_QUALIFIER_VALUE_TBL_D(O), -- 2388011, ASK RAVI, either priced_quantity,group_quantity,group_amount
      BENEFIT_QTY       = G_BENEFIT_QUANTITY_TBL_D(O),
      OPERAND_VALUE     = G_OPERAND_VALUE_TBL_D(O),
      --GROUP_QUANTITY    = G_QUALIFIER_VALUE_TBL_D(O), --2388011_new
      --GROUP_AMOUNT      = G_QUALIFIER_VALUE_TBL_D(O), --2388011_new
      APPLIED_FLAG      = AUTOMATIC_FLAG
   WHERE LINE_DETAIL_INDEX =  G_LINE_DETAIL_INDEX_TBL_D(O);
 END IF;
END IF;

IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
engine_debug ('In Line Detail Update Information3');
END IF;
 -- Update All the Related Line Details Information at 1 Shot for all Lines
IF (G_LINE_DETAIL_INDEX_TBL_R.COUNT > 0) THEN
 FORALL O IN G_LINE_DETAIL_INDEX_TBL_R.FIRST .. G_LINE_DETAIL_INDEX_TBL_R.LAST
  UPDATE qp_npreq_ldets_tmp
  SET ADJUSTMENT_AMOUNT = G_ADJUSTMENT_AMOUNT_TBL_R(O),
      LINE_QUANTITY     = G_LINE_QUANTITY_TBL_R(O)
  WHERE LINE_DETAIL_INDEX =  G_LINE_DETAIL_INDEX_TBL_R(O);
END IF;

 -- Update all GSA Violations at 1 shot
 --INDX,QP_PREQ_GRP.call_calculation_engine.call_calculation_engine_upd6,qp_npreq_lines_tmp_N1,LINE_INDEX,1
IF (G_GSA_LINE_INDEX_TBL_C.COUNT > 0) THEN
 FORALL K IN G_GSA_LINE_INDEX_TBL_C.FIRST .. G_GSA_LINE_INDEX_TBL_C.LAST
  UPDATE qp_npreq_lines_tmp
  SET PRICING_STATUS_CODE = G_STATUS_GSA_VIOLATION,
      PRICING_STATUS_TEXT = l_status_text
  WHERE LINE_INDEX = G_GSA_LINE_INDEX_TBL_C(K);
END IF;
IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
engine_debug ('In End Update Information');

END IF;
  -- Reset All tables
  G_UNIT_PRICE_TBL_C.delete;
  G_PERCENT_PRICE_TBL_C.delete;
  G_ADJUSTED_UNIT_PRICE_TBL_C.delete;
  G_PARENT_PRICE_TBL_C.delete;
  G_PARENT_PRICED_QUANTITY_TBL_C.delete;
  G_PARENT_LINE_QUANTITY_TBL_C.delete;
  G_PARENT_LINE_UOM_TBL_C.delete;
  G_LINE_INDEX_TBL_C.delete;
  G_GSA_LINE_INDEX_TBL_C.delete;
  G_EXTENDED_PRICE_TBL_C.delete; -- block pricing

  G_ADJUSTMENT_AMOUNT_TBL_D.delete;
  --G_LINE_QUANTITY_TBL_D.delete;
  G_BENEFIT_QUANTITY_TBL_D.delete;
  G_OPERAND_VALUE_TBL_D.delete;
  G_QUALIFIER_VALUE_TBL_D.delete;
  G_LINE_DETAIL_INDEX_TBL_D.delete;

  G_LINE_QUANTITY_TBL_R.delete;
  G_ADJUSTMENT_AMOUNT_TBL_R.delete;
  G_LINE_DETAIL_INDEX_TBL_R.delete;

EXCEPTION
  WHEN E_CAL_ENGINE_ERROR THEN
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug(l_routine||' '||l_status_text);
    END IF;
     DELETE_LINES(l_err_line_index,
                  G_STATUS_OTHER_ERRORS,
                  'Error returned by QP_Calculate_Price_PUB.Calculate_Price',
                  l_status_code,
                  l_status_text);
  WHEN OTHERS THEN
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('Exception in internal procedure CALL_CALCULATION_ENGINE ' || SQLERRM);
    END IF;
    x_status_code := FND_API.G_RET_STS_ERROR;
    x_status_text :=l_routine||' '||SQLERRM;
    null;
END;

/*+------------------------------------------------------------
  | FORMULA INTEGRATION
  +------------------------------------------------------------
*/

PROCEDURE Formula_Processing(p_line_index       IN NUMBER,
                             p_pricing_phase_id IN NUMBER,
                             x_status_code      OUT NOCOPY VARCHAR2,
                             x_status_text      OUT NOCOPY VARCHAR2    ) AS

/*
INDX,QP_PREQ_GRP.formula_processing.l_get_formula_id_cur,qp_npreq_ldets_tmp_N1,LINE_INDEX,1
INDX,QP_PREQ_GRP.formula_processing.l_get_formula_id_cur,qp_npreq_ldets_tmp_N1,PRICING_STATUS_CODE,2
INDX,QP_PREQ_GRP.formula_processing.l_get_formula_id_cur,qp_npreq_ldets_tmp_N1,PRICING_PHASE_ID,3

-- Full table scan on qp_npreq_lines_tmp
*/
  CURSOR l_get_formula_id_cur IS

  SELECT /*+ ORDERED USE_NL(b) index(b QP_PREQ_LDETS_TMP_N1) l_get_formula_id_cur */
         b.LINE_INDEX , b.PRICE_FORMULA_ID,a.PRICING_EFFECTIVE_DATE,b.CREATED_FROM_LIST_LINE_ID,
	 b.OPERAND_CALCULATION_CODE , b.OPERAND_VALUE, b.CREATED_FROM_LIST_LINE_TYPE,b.LINE_DETAIL_TYPE_CODE,
         b.GROUP_QUANTITY,b.LINE_QUANTITY GROUP_AMOUNT
  FROM
         qp_npreq_lines_tmp a,
         qp_npreq_ldets_tmp b
  WHERE  a.LINE_INDEX = b.LINE_INDEX
  AND    b.PRICING_STATUS_CODE = G_STATUS_NEW
  AND    b.PRICING_PHASE_ID = p_pricing_phase_id
  AND    b.PRICE_FORMULA_ID IS NOT NULL;

CURSOR l_get_list_price_cur(p_line_index PLS_INTEGER) IS
  SELECT UNIT_PRICE
  FROM   qp_npreq_lines_tmp
  WHERE  LINE_INDEX = p_line_index;

  l_req_line_attrs_rec     QP_FORMULA_PRICE_CALC_PVT.req_line_attrs_rec;
  l_req_line_attrs_tbl     QP_FORMULA_PRICE_CALC_PVT.req_line_attrs_tbl;
  l_index                  NUMBER := 1;
  l_formula_based_price    NUMBER;
  l_list_line_id           NUMBER;
  l_return_status          VARCHAR2(240);
  E_FORMULA_CALL_ERROR     EXCEPTION;
  l_list_price             NUMBER;
  l_modifier_value         NUMBER;
  l_routine                VARCHAR2(240):='Routine:QP_PREQ_GRP.Formula_Processing';
  l_line_index             NUMBER;
  l_status_code            VARCHAR2(30);
  l_status_text            VARCHAR2(240);
  l_attr_inserted_flag       BOOLEAN := FALSE;
  l_group_amount             NUMBER;


  TYPE Num_Type IS TABLE OF Number INDEX BY BINARY_INTEGER;
  TYPE Char_Type IS TABLE OF Varchar2(30) INDEX BY BINARY_INTEGER;

  l_line_index_tbl           Num_Type;
  l_attribute_type_tbl       Char_Type;
  l_context_tbl              Char_Type;
  l_attribute_tbl            Char_Type;
  l_pricing_status_code_tbl  Char_Type;
  l_value_from_tbl           Num_Type;
  l_value_from               Number;
  l_msg_attribute            VARCHAR2(80);
  l_msg_context              VARCHAR2(240);
  l_rows  NATURAL := 5000;

  -- Bug 2772214
  l_pass_qualifiers varchar2(10) := FND_PROFILE.VALUE('QP_PASS_QUALIFIERS_TO_GET_CUSTOM');

  -- added for formula messages
  E_ATTRIBUTE_NON_NUMERIC EXCEPTION;
  CURSOR am_attr_cols_cur
  IS
    SELECT /*+ dynamic_sampling(1) */ line_index, attribute_type, context, attribute,
           pricing_status_code, qp_number.canonical_to_number(value_from)
    FROM   qp_npreq_line_attrs_tmp lattr
    WHERE  attribute_type IN ('PRICING', 'PRODUCT')
    AND    pricing_status_code = G_STATUS_UNCHANGED
    AND    EXISTS (SELECT format_type
                   FROM   fnd_flex_value_sets VSET,
                          qp_segments_b SEGMENTS, qp_prc_contexts_b PCONTEXTS
                   WHERE  vset.flex_value_set_id = segments.user_valueset_id
                   AND    segments.application_id = 661
                   AND    pcontexts.prc_context_type <> 'QUALIFIER'
                   AND    pcontexts.prc_context_code = lattr.context
                   AND    segments.segment_mapping_column = lattr.attribute
                   AND    segments.prc_context_id = pcontexts.prc_context_id
                   AND    vset.format_type = 'N');

    -- Bug 2772214, To pass Qualifiers to get_custom_price

   CURSOR am_attr_qual_cols_cur
   IS
    SELECT line_index, attribute_type, context, attribute,
           pricing_status_code, qp_number.canonical_to_number(value_from)
    FROM   qp_npreq_line_attrs_tmp lattr
    WHERE  attribute_type IN ('PRICING', 'PRODUCT', 'QUALIFIER')
    AND    pricing_status_code = G_STATUS_UNCHANGED
    AND    EXISTS (SELECT format_type
                   FROM   fnd_flex_value_sets VSET,
                          qp_segments_b SEGMENTS, qp_prc_contexts_b PCONTEXTS
                   WHERE  vset.flex_value_set_id = segments.user_valueset_id
                   AND    segments.application_id = 661
                   AND    pcontexts.prc_context_code = lattr.context
                   AND    segments.segment_mapping_column = lattr.attribute
                   AND    segments.prc_context_id = pcontexts.prc_context_id
                   AND    vset.format_type = 'N');

-- added for formula error messages
 CURSOR am_attr_qual_msg_cur
 IS
 SELECT  lattr.value_from,lattr.context,
         nvl(SEGMENTS_TL.SEEDED_SEGMENT_NAME,SEGMENTS_TL.USER_SEGMENT_NAME) attribute
 FROM    qp_npreq_line_attrs_tmp lattr, fnd_flex_value_sets VSET,
         qp_segments_b SEGMENTS, qp_prc_contexts_b PCONTEXTS , qp_segments_tl SEGMENTS_TL
 WHERE   attribute_type IN ('PRICING', 'PRODUCT', 'QUALIFIER')
                   AND    pricing_status_code = G_STATUS_UNCHANGED
                   AND    vset.flex_value_set_id = segments.user_valueset_id
                   AND    segments.application_id = 661
                   AND    pcontexts.prc_context_code = lattr.context
                   AND    segments.segment_mapping_column = lattr.attribute
                   AND    segments.prc_context_id = pcontexts.prc_context_id
                   AND    segments.segment_id = segments_tl.segment_id
                   AND    vset.format_type = 'N';


  CURSOR attr_cols_cur
  IS
    SELECT line_index, attribute_type, context, attribute,
           pricing_status_code, qp_number.canonical_to_number(value_from)
    FROM   qp_npreq_line_attrs_tmp lattr
    WHERE  attribute_type IN ('PRICING', 'PRODUCT')
    AND    pricing_status_code = G_STATUS_UNCHANGED
    AND    EXISTS (SELECT format_type
                   FROM fnd_flex_value_sets VSET,
                        fnd_descr_flex_column_usages DFLEX
                   WHERE vset.flex_value_set_id = dflex.flex_value_set_id
	           AND dflex.application_id = 661
                   AND dflex.descriptive_flexfield_name =
                                       'QP_ATTR_DEFNS_PRICING'
                   AND dflex.descriptive_flex_context_code = lattr.context
                   AND dflex.application_column_name = lattr.attribute
	           AND vset.format_type = 'N');

  BEGIN
   x_status_code := FND_API.G_RET_STS_SUCCESS;
   qp_debug_util.tstart('FORMULA_PROCESSING','Processing Formulas');
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('In ---'||l_routine||'---');
   engine_debug('PRICING_PHASE_ID: '||p_pricing_phase_id);

   END IF;
   FOR i IN l_get_formula_id_cur
   LOOP
           l_line_index := i.line_index;

           -- performance related change. Populate the temp table
           --qp_preq_line_attrs_formula_tmp with relevant records from
           --qp_npreq_line_attrs_tmp with
           IF l_get_formula_id_cur%ROWCOUNT = 1 THEN

            IF G_INSERT_INTO_FORMULA_TMP
            THEN

             --Delete already existing rows from formula tmp table
             DELETE FROM qp_preq_line_attrs_formula_tmp;

             --Insert request line attrs with datatype = 'N'
	     IF G_AM_INSTALLED_PROFILE = G_YES THEN
               If nvl(l_pass_qualifiers, 'N') = 'N' Then /* Bug 2772214 */
               OPEN am_attr_cols_cur;
               LOOP
                 l_line_index_tbl.delete;
                 l_attribute_type_tbl.delete;
                 l_context_tbl.delete;
                 l_attribute_tbl.delete;
                 l_pricing_status_code_tbl.delete;
                 l_value_from_tbl.delete;

                 FETCH am_attr_cols_cur BULK COLLECT INTO
                        l_line_index_tbl, l_attribute_type_tbl, l_context_tbl,
                        l_attribute_tbl, l_pricing_status_code_tbl,
                        l_value_from_tbl LIMIT l_rows;

                 EXIT WHEN l_line_index_tbl.COUNT = 0;

                 --Change flexible mask to mask below for formula pattern use.
                 qp_number.canonical_mask :=
              '00999999999999999999999.99999999999999999999999999999999999999';
                 FORALL i IN l_line_index_tbl.FIRST..l_line_index_tbl.LAST
                   INSERT INTO qp_preq_line_attrs_formula_tmp
                   ( line_index,
                     attribute_type,
                     context,
                     attribute,
                     pricing_status_code,
                     value_from
                   )
                   VALUES
                   ( l_line_index_tbl(i),
                     l_attribute_type_tbl(i),
                     l_context_tbl(i),
                     l_attribute_tbl(i),
                     l_pricing_status_code_tbl(i),
                     qp_number.number_to_canonical(l_value_from_tbl(i))
                   );

                 --Change mask back to flexible mask.
                 qp_number.canonical_mask :=
              'FM999999999999999999999.9999999999999999999999999999999999999999';

               END LOOP; --Loop for bulk fetch

               CLOSE am_attr_cols_cur;
             Else
           BEGIN
               OPEN am_attr_qual_cols_cur;
               LOOP
                 l_line_index_tbl.delete;
                 l_attribute_type_tbl.delete;
                 l_context_tbl.delete;
                 l_attribute_tbl.delete;
                 l_pricing_status_code_tbl.delete;
                 l_value_from_tbl.delete;
                 FETCH am_attr_qual_cols_cur  BULK COLLECT INTO
                        l_line_index_tbl, l_attribute_type_tbl, l_context_tbl,
                        l_attribute_tbl, l_pricing_status_code_tbl,
                        l_value_from_tbl LIMIT l_rows;

                 EXIT WHEN l_line_index_tbl.COUNT = 0;
               --Change flexible mask to mask below for formula pattern use.
                 qp_number.canonical_mask :=
              '00999999999999999999999.99999999999999999999999999999999999999';
                 FORALL i IN l_line_index_tbl.FIRST..l_line_index_tbl.LAST
                   INSERT INTO qp_preq_line_attrs_formula_tmp
                   ( line_index,
                     attribute_type,
                     context,
                     attribute,
                     pricing_status_code,
                     value_from
                   )
                   VALUES
                   ( l_line_index_tbl(i),
                     l_attribute_type_tbl(i),
                     l_context_tbl(i),
                     l_attribute_tbl(i),
                     l_pricing_status_code_tbl(i),
                     qp_number.number_to_canonical(l_value_from_tbl(i))
                   );
              qp_number.canonical_mask :=
              'FM999999999999999999999.9999999999999999999999999999999999999999';

               END LOOP; --Loop for bulk fetch
               CLOSE  am_attr_qual_cols_cur;
           EXCEPTION
           WHEN OTHERS THEN
               BEGIN
                 fnd_message.set_name('QP','QP_PRICING_ATTR_NON_NUMERIC');
                 FOR l_rec IN am_attr_qual_msg_cur
                 LOOP
                         l_msg_context   := l_rec.context;
                         l_msg_attribute := l_rec.attribute;
                         l_value_from := qp_number.canonical_to_number(l_rec.value_from);
                 END LOOP;
               EXCEPTION
               WHEN OTHERS THEN
                    fnd_message.set_token('CONTEXT',l_msg_context);
                    fnd_message.set_token('ATTRIBUTE',l_msg_attribute);
               END;

               RAISE  E_ATTRIBUTE_NON_NUMERIC;
           END;

             End If;

                 --Change flexible mask to mask below for formula pattern use.
                 qp_number.canonical_mask :=
              '00999999999999999999999.99999999999999999999999999999999999999';

             -- Bug 2772214 l_pass_qualifiers condition in where clause
             --Insert request line attrs with datatype 'X', 'Y', 'C' or null
               INSERT INTO qp_preq_line_attrs_formula_tmp
               ( line_index,
                 attribute_type,
                 context,
                 attribute,
                 pricing_status_code,
                 value_from
               )
               SELECT /*+ dynamic_sampling(1) */ line_index,
                      attribute_type,
                      context,
                      attribute,
                      pricing_status_code,
                      value_from
               FROM   qp_npreq_line_attrs_tmp lattr
               WHERE
                      ((nvl(l_pass_qualifiers, 'N') = 'Y'
                      AND attribute_type IN ('QUALIFIER'))
                     OR attribute_type IN ('PRICING', 'PRODUCT')) -- Changed for bug2806857
               AND    pricing_status_code = G_STATUS_UNCHANGED
	       AND    NOT EXISTS (
                   SELECT format_type
                   FROM fnd_flex_value_sets VSET,
                        qp_segments_b SEGMENTS, qp_prc_contexts_b PCONTEXTS
                   WHERE vset.flex_value_set_id = segments.user_valueset_id
                   AND segments.application_id = 661
                   AND pcontexts.prc_context_type = decode(lattr.attribute_type,'PRICING','PRICING_ATTRIBUTE',
                       lattr.attribute_type) -- Changed for bug2806857
                   AND pcontexts.prc_context_code = lattr.context
                   AND segments.segment_mapping_column = lattr.attribute
                   AND segments.prc_context_id = pcontexts.prc_context_id
                   AND vset.format_type = 'N'); --by yangli 03/06/2002 9:30am

                 --Change mask back to flexible mask.
                 qp_number.canonical_mask :=
              'FM999999999999999999999.9999999999999999999999999999999999999999';

	     ELSE --If AM not installed

               OPEN attr_cols_cur;
               LOOP
                 l_line_index_tbl.delete;
                 l_attribute_type_tbl.delete;
                 l_context_tbl.delete;
                 l_attribute_tbl.delete;
                 l_pricing_status_code_tbl.delete;
                 l_value_from_tbl.delete;

                 FETCH attr_cols_cur BULK COLLECT INTO
                        l_line_index_tbl, l_attribute_type_tbl, l_context_tbl,
                        l_attribute_tbl, l_pricing_status_code_tbl,
                        l_value_from_tbl LIMIT l_rows;

                 EXIT WHEN l_line_index_tbl.COUNT = 0;

                 --Change flexible mask to mask below for formula pattern use.
                 qp_number.canonical_mask :=
              '00999999999999999999999.99999999999999999999999999999999999999';

                 FORALL i IN l_line_index_tbl.FIRST..l_line_index_tbl.LAST
                   INSERT INTO qp_preq_line_attrs_formula_tmp
                   ( line_index,
                     attribute_type,
                     context,
                     attribute,
                     pricing_status_code,
                     value_from
                   )
                   VALUES
                   ( l_line_index_tbl(i),
                     l_attribute_type_tbl(i),
                     l_context_tbl(i),
                     l_attribute_tbl(i),
                     l_pricing_status_code_tbl(i),
                     qp_number.number_to_canonical(l_value_from_tbl(i))
                   );

                 --Change mask back to flexible mask.
                 qp_number.canonical_mask :=
              'FM999999999999999999999.9999999999999999999999999999999999999999';

               END LOOP; --Loop for bulk fetch

               CLOSE attr_cols_cur;

                 --Change flexible mask to mask below for formula pattern use.
                 qp_number.canonical_mask :=
              '00999999999999999999999.99999999999999999999999999999999999999';

               --Insert request line attrs with datatype 'X', 'Y', 'C' or null
               INSERT INTO qp_preq_line_attrs_formula_tmp
               ( line_index,
                 attribute_type,
                 context,
                 attribute,
                 pricing_status_code,
                 value_from
               )
               SELECT line_index,
                      attribute_type,
                      context,
                      attribute,
                      pricing_status_code,
                      value_from
               FROM   qp_npreq_line_attrs_tmp lattr
               WHERE  attribute_type IN ('PRICING', 'PRODUCT')
               AND    pricing_status_code = G_STATUS_UNCHANGED
	       AND    NOT EXISTS (
                   SELECT format_type
                   FROM fnd_flex_value_sets VSET,
                        fnd_descr_flex_column_usages DFLEX
                   WHERE vset.flex_value_set_id = dflex.flex_value_set_id
	           AND dflex.application_id = 661
                   AND dflex.descriptive_flexfield_name =
                                'QP_ATTR_DEFNS_PRICING'
                   AND dflex.descriptive_flex_context_code = lattr.context
                   AND dflex.application_column_name = lattr.attribute
	           AND vset.format_type = 'N');

                 --Change mask back to flexible mask.
                 qp_number.canonical_mask :=
              'FM999999999999999999999.9999999999999999999999999999999999999999';

	     END IF; -- if G_AM_INSTALLED_PROFILE is true

             --Reset Global Flag
             G_INSERT_INTO_FORMULA_TMP := FALSE;
             --G_INSERT_INTO_FORMULA_TMP := 'N';

            END IF; --If G_INSERT_INTO_FORMULA_TMP is true

           END IF; --If cur%rowcount is 1

           -- FTE

            -- Delete for every modifier
            IF(l_attr_inserted_flag = TRUE) THEN
             DELETE FROM qp_preq_line_attrs_formula_tmp
             WHERE line_index = i.line_index
             AND   context = 'VOLUME'
             AND   attribute IN ('PRICING_ATTRIBUTE4','PRICING_ATTRIBUTE5')
             AND   pricing_status_code = G_STATUS_UNCHANGED;
            END IF;

            l_attr_inserted_flag := FALSE;

            IF (i.group_quantity IS NOT NULL and l_attr_inserted_flag = FALSE) THEN


                  --Change flexible mask to mask below for formula pattern use.
                  qp_number.canonical_mask :=
               '00999999999999999999999.99999999999999999999999999999999999999';
                    INSERT INTO qp_preq_line_attrs_formula_tmp
                    ( line_index,
                      attribute_type,
                      context,
                      attribute,
                      pricing_status_code,
                      value_from
                    )
                    VALUES
                    ( i.line_index,
                      G_PRICING_TYPE,
                      'VOLUME',
                      'PRICING_ATTRIBUTE4',
                      G_STATUS_UNCHANGED,
                      qp_number.number_to_canonical(i.group_quantity)
                    );

                  --Change mask back to flexible mask.
                  qp_number.canonical_mask :=
               'FM999999999999999999999.9999999999999999999999999999999999999999';

                l_attr_inserted_flag := TRUE;

            END IF;

            IF (i.group_amount IS NOT NULL and l_attr_inserted_flag = FALSE) THEN

                  --Change flexible mask to mask below for formula pattern use.
                  qp_number.canonical_mask :=
               '00999999999999999999999.99999999999999999999999999999999999999';
                    INSERT INTO qp_preq_line_attrs_formula_tmp
                    ( line_index,
                      attribute_type,
                      context,
                      attribute,
                      pricing_status_code,
                      value_from
                    )
                    VALUES
                    ( i.line_index,
                      G_PRICING_TYPE,
                      'VOLUME',
                      'PRICING_ATTRIBUTE5',
                      G_STATUS_UNCHANGED,
                      qp_number.number_to_canonical(i.group_amount)
                    );

                  --Change mask back to flexible mask.
                  qp_number.canonical_mask :=
               'FM999999999999999999999.9999999999999999999999999999999999999999';

                l_attr_inserted_flag := TRUE;

            END IF;

           -- FTE

	  --FOR K IN l_get_line_attrs_cur
	  --LOOP
--Commenting the population of plsql table l_req_line_attrs_rec.
-- Change.
/*
	    l_req_line_attrs_rec.line_index := i.LINE_INDEX;
	    l_req_line_attrs_rec.attribute_type := i.ATTRIBUTE_TYPE;
	    l_req_line_attrs_rec.context := i.CONTEXT;
	    l_req_line_attrs_rec.attribute := i.ATTRIBUTE;
	    l_req_line_attrs_rec.value := i.VALUE_FROM;
	    l_req_line_attrs_tbl(1) := l_req_line_attrs_rec;
	    l_index := l_index + 1;
*/
	  --END LOOP;

          l_list_price := NULL;

          IF(p_pricing_phase_id = G_PRICE_LIST_PHASE_ID AND i.operand_calculation_code = 'UNIT_PRICE') THEN
             l_list_price := I.operand_value;
             l_modifier_value := NULL;
          ELSE
            OPEN  l_get_list_price_cur(I.line_index);
            FETCH l_get_list_price_cur INTO l_list_price;
            CLOSE l_get_list_price_cur;
            l_modifier_value := I.operand_value; -- This value needs to be passed eventually
          END IF;

          IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
          engine_debug('Processing Formula ID :'||i.PRICE_FORMULA_ID);
          engine_debug('Line Index: '||i.line_index);

          END IF;
          --Commented parameter l_req_line_attrs_tbl and
          --added parameters l_line_index and i.created_from_list_line_type.
          -- Change.
	   l_formula_based_price :=
              QP_FORMULA_PRICE_CALC_PVT.Calculate(i.PRICE_FORMULA_ID,
                                                 l_list_price,
                     				 i.PRICING_EFFECTIVE_DATE,
                     				 --l_req_line_attrs_tbl,
                                                 l_line_index,
                                                 i.CREATED_FROM_LIST_LINE_TYPE,
                     				 l_return_status,
                                                 l_modifier_value);

          IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
          engine_debug('Formula return status: '||l_return_status);
          engine_debug ('Formula Base Price : '|| l_formula_based_price);

          END IF;
       IF l_return_status IS NULL THEN
          IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
          engine_debug('Formula return status is NULL');
          engine_debug('FND_API.G_RET_STS_ERROR: '|| FND_API.G_RET_STS_ERROR);
          END IF;
          null;
       END IF;

       IF (l_return_status = FND_API.G_RET_STS_SUCCESS) THEN
           -- OR l_formula_based_price IS NOT NULL) THEN
	   IF (i.OPERAND_CALCULATION_CODE in ('UNIT_PRICE','LIST_PRICE')) THEN
/*
INDX,QP_PREQ_GRP.formula_processing.upd1,qp_npreq_ldets_tmp_N1,LINE_INDEX,1
INDX,QP_PREQ_GRP.formula_processing.upd1,qp_npreq_ldets_tmp_N1,PRICING_STATUS_CODE,2
INDX,QP_PREQ_GRP.formula_processing.upd1,qp_npreq_ldets_tmp_N1,PRICING_PHASE_ID,3
*/
	    UPDATE qp_npreq_ldets_tmp --upd1
	    SET    OPERAND_VALUE = l_formula_based_price
	    WHERE  CREATED_FROM_LIST_LINE_ID = i.CREATED_FROM_LIST_LINE_ID
	    AND    PRICING_PHASE_ID = p_pricing_phase_id
	    AND    LINE_INDEX = i.line_index
	    AND    PRICING_STATUS_CODE = G_STATUS_NEW;

/*
INDX,QP_PREQ_GRP.formula_processing.formula_processing_upd2.qp_npreq_lines_tmp_N1,LINE_INDEX,1
*/
	    UPDATE qp_npreq_lines_tmp --upd2
	    SET    UNIT_PRICE = l_formula_based_price,
                   PRICING_STATUS_CODE = G_STATUS_UPDATED,
                   PRICING_STATUS_TEXT ='Priced by formula'
	    WHERE  LINE_INDEX = i.line_index;
	   ELSIF (i.OPERAND_CALCULATION_CODE = 'PERCENT_PRICE') THEN
/*
INDX,QP_PREQ_GRP.formula_processing.upd3,qp_npreq_ldets_tmp_N1,LINE_INDEX,1
INDX,QP_PREQ_GRP.formula_processing.upd3,qp_npreq_ldets_tmp_N1,PRICING_STATUS_CODE,2
INDX,QP_PREQ_GRP.formula_processing.upd3,qp_npreq_ldets_tmp_N1,PRICING_PHASE_ID,3
*/
	    UPDATE qp_npreq_ldets_tmp --upd3
	    SET    OPERAND_VALUE = l_formula_based_price
	    WHERE  CREATED_FROM_LIST_LINE_ID = i.CREATED_FROM_LIST_LINE_ID
	    AND    PRICING_PHASE_ID = p_pricing_phase_id
	    AND    LINE_INDEX = i.line_index
	    AND    PRICING_STATUS_CODE = G_STATUS_NEW;

/*
INDX,QP_PREQ_GRP.formula_processing.formula_processing_upd4.qp_npreq_lines_tmp_N1,LINE_INDEX,1
*/
	    UPDATE qp_npreq_lines_tmp --upd4
	    SET    PERCENT_PRICE = l_formula_based_price,
                   PRICING_STATUS_CODE = G_STATUS_UPDATED,
                   PRICING_STATUS_TEXT ='Priced by formula'
	    WHERE  LINE_INDEX = i.line_index;
        ELSE  -- BLOCK_PRICE, % , AMT , NEWPRICE
/*
INDX,QP_PREQ_GRP.formula_processing.upd5,qp_npreq_ldets_tmp_N1,LINE_INDEX,1
INDX,QP_PREQ_GRP.formula_processing.upd5,qp_npreq_ldets_tmp_N1,PRICING_STATUS_CODE,2
INDX,QP_PREQ_GRP.formula_processing.upd5,qp_npreq_ldets_tmp_N1,PRICING_PHASE_ID,3
*/
         UPDATE qp_npreq_ldets_tmp --upd5
	    SET    OPERAND_VALUE = l_formula_based_price
	    WHERE  CREATED_FROM_LIST_LINE_ID = i.CREATED_FROM_LIST_LINE_ID
	    AND    PRICING_PHASE_ID = p_pricing_phase_id
	    AND    LINE_INDEX = i.line_index
         AND    PRICING_STATUS_CODE = G_STATUS_NEW;

         -- Update the operand on the related lines also
         IF (i.LINE_DETAIL_TYPE_CODE = G_CHILD_DETAIL_TYPE) THEN

            UPDATE qp_npreq_rltd_lines_tmp
	    SET    OPERAND = l_formula_based_price
	    WHERE  RELATED_LIST_LINE_ID = i.CREATED_FROM_LIST_LINE_ID --bug#2875361
	    AND    LINE_INDEX = i.line_index
            AND    PRICING_STATUS_CODE = G_STATUS_NEW
            AND    RELATIONSHIP_TYPE_CODE = G_PBH_LINE;

         END IF;
       END IF;
       ELSE
          IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
          engine_debug('Error returned by QP_FORMULA_PRICE_CALC_PVT.Calculate');
          END IF;

             -- Commented raise and added following for Bug 2722477
           G_INSERT_INTO_FORMULA_TMP := FALSE; --Reset Global Flag ( Change)
           DELETE_LINES(l_line_index,
                  G_STATUS_FORMULA_ERROR,
                  FND_MESSAGE.GET,
                  l_status_code,
                  l_status_text);
         -- RAISE E_Formula_Call_Error;
	  null; -- Error in Formula Calculation
      END IF;
   END LOOP;

   qp_debug_util.tstop('FORMULA_PROCESSING');

EXCEPTION
   WHEN E_ATTRIBUTE_NON_NUMERIC THEN
     G_INSERT_INTO_FORMULA_TMP := FALSE; --Reset Global Flag ( Change)
     DELETE_LINES(l_line_index,
                  G_STATUS_FORMULA_ERROR,
                  FND_MESSAGE.GET,
                  l_status_code,
                  l_status_text);
     x_status_code := FND_API.G_RET_STS_ERROR;

   WHEN E_Formula_Call_Error THEN
     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('In Formula Integration');
     engine_debug('Error returned by QP_FORMULA_PRICE_CALC_PVT.Calculate');
     END IF;
     G_INSERT_INTO_FORMULA_TMP := FALSE; --Reset Global Flag ( Change)
     --G_INSERT_INTO_FORMULA_TMP := 'N'; --Reset Global Flag ( Change)
     DELETE_LINES(l_line_index,
                  G_STATUS_FORMULA_ERROR,
                  FND_MESSAGE.GET,
                  l_status_code,
                  l_status_text);
   WHEN OTHERS THEN
     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('In Formula Integration');
     engine_debug(SQLERRM);
     END IF;
     G_INSERT_INTO_FORMULA_TMP := FALSE; --Reset Global Flag ( Change)
     --G_INSERT_INTO_FORMULA_TMP := 'N'; --Reset Global Flag ( Change)
     DELETE_LINES(l_line_index,
                  G_STATUS_FORMULA_ERROR,
                  FND_MESSAGE.GET,
                  l_status_code,
                  l_status_text);
     x_status_code := FND_API.G_RET_STS_ERROR;
     x_status_text := l_routine||' '|| ' Formula Not Found ';
END Formula_Processing;

/*+-----------------------------------------------------------
  |Procedure Truncate_temp_tables
  +-----------------------------------------------------------
*/
PROCEDURE Truncate_Temp_tables (x_status_code OUT NOCOPY VARCHAR2,
                                x_status_text OUT NOCOPY VARCHAR2)
IS
l_routine VARCHAR2(240):= 'Procedure Truncate_Temp_Tables';
l_count	number;
Begin
        x_status_code := FND_API.G_RET_STS_SUCCESS;
  --added by yangli for Java Engine project
  IF QP_JAVA_ENGINE_UTIL_PUB.Java_Engine_Running = 'N' THEN
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     ENGINE_DEBUG('Truncate_Temp_tables: Java Engine not Installed ----------');
    END IF;
  --added by yangli for Java Engine project
	--Delete from qp_npreq_lines_tmp;
	--Delete from qp_npreq_line_attrs_tmp;
	--Delete From qp_npreq_ldets_tmp;
	--Delete From qp_npreq_rltd_lines_tmp;
        --Delete From QP_PREQ_QUAL_TMP;
        --Delete From qp_nformula_step_values_tmp;
        --Delete From QP_PREQ_LINE_ATTRS_FORMULA_TMP;


          IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
	   select count(*) into l_count from qp_npreq_lines_tmp;
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
	   engine_debug('qp_npreq_lines_tmp '||l_count);
    END IF;
	   select count(*) into l_count from qp_npreq_line_attrs_tmp;
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
	   engine_debug('qp_npreq_line_attrs_tmp '||l_count);
    END IF;
	   select count(*) into l_count from qp_npreq_ldets_tmp;
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
	   engine_debug('qp_npreq_ldets_tmp '||l_count);
    END IF;
          END IF;
    --added by yangli for Java Engine project
  ELSE
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     ENGINE_DEBUG('Truncate_Temp_tables: Java Engine is Installed ----------');
    END IF;
	--Delete from qp_int_lines;
	--Delete from qp_int_line_attrs;
	--Delete From qp_int_ldets;
	--Delete From qp_int_rltd_lines;
        --Delete From qp_int_formula_step_values;

          IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
	   select count(*) into l_count from qp_int_lines;
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
	   engine_debug('qp_int_lines '||l_count);
    END IF;
	   select count(*) into l_count from qp_int_line_attrs;
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
	   engine_debug('qp_int_line_attrs '||l_count);
    END IF;
	   select count(*) into l_count from qp_int_ldets;
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
	   engine_debug('qp_int_ldets '||l_count);
    END IF;
          END IF;

  END IF;
EXCEPTION
   WHEN OTHERS THEN
     x_status_code := FND_API.G_RET_STS_ERROR;
     x_status_text :=l_routine||' '||SQLERRM;
End Truncate_Temp_tables;

/*+------------------------------------------------------------
  |PROCEDURE Set_Order_Level_Rltd
  +------------------------------------------------------------
The relationship between order level adjustments and request lines
need to be returned back to the caller.
Example: list 'a' is a order level adjustment with line_detail_index
of 3. There are 3 request lines with 4,5,6 line index then
the data in qp_npreq_rltd_lines_tmp should be:
+---------------------------------------------------------------+
| related_line_detail_index| line_index| Relation_ship_type_code|
+--------------------------+-----------+------------------------+
|    3                     |      4    | ORDER_TO_LINE          |
|    3                     |      5    | ORDER_TO_LINE          |
|    3                     |      6    | ORDER_TO_LINE          |
+--------------------------+-----------+------------------------+
*/

PROCEDURE Set_Order_Level_Rltd(p_freeze_override_flag IN VARCHAR2,
                              p_pricing_phase_id     IN NUMBER,
                              x_status_code          OUT NOCOPY VARCHAR2,
                              x_status_text          OUT NOCOPY VARCHAR2) AS

/*
INDX,QP_PREQ_GRP.set_order_level_rltd.l_line_index_cur,- No Index Used -,NA,NA
*/
CURSOR l_line_index_cur(p_freeze_override_flag VARCHAR2) is
SELECT line_index
FROM   qp_npreq_lines_tmp
WHERE pricing_status_code = G_STATUS_UPDATED
AND (PRICE_FLAG = G_YES
     OR
     (PRICE_FLAG = G_PHASE
      AND
      p_freeze_override_flag = G_YES)
     );

/*
-- Can use N2 instead of N4
INDX,QP_PREQ_GRP.set_order_level_rltd.l_line_detail_index_cur,qp_npreq_ldets_tmp_N2,PRICING_PHASE_ID,1
INDX,QP_PREQ_GRP.set_order_level_rltd.l_line_detail_index_cur,qp_npreq_ldets_tmp_N2,PRICING_STATUS_CODE,2
*/
CURSOR l_line_detail_index_cur is
SELECT line_detail_index
FROM   qp_npreq_ldets_tmp
WHERE  PRICING_STATUS_CODE = G_STATUS_NEW
AND    PRICING_PHASE_ID    = p_pricing_phase_id
AND    MODIFIER_LEVEL_CODE = G_ORDER_LEVEL;

l_line_index_tbl        number_type;
l_line_detail_index_tbl number_type;
l_line_detail_index_tbl1 number_type;
J NUMBER:=0;
l_routine VARCHAR2(240):= 'QP_PREQ_GRP.Set_Order_Level_Rltd';
BEGIN
  x_status_code := FND_API.G_RET_STS_SUCCESS;

  FOR I IN l_line_detail_index_cur LOOP
    J:=J+1;
    l_line_detail_index_tbl(J):=I.line_detail_index;
  END LOOP;


IF J > 0 THEN  --do this only if there is order level modifier
J:=0;
  FOR I IN l_line_index_cur(p_freeze_override_flag) LOOP
    FOR K in l_line_detail_index_tbl.FIRST..l_line_detail_index_tbl.LAST LOOP
      J:=J+1;
      l_line_detail_index_tbl1(J):=l_line_detail_index_tbl(K);
      l_line_index_tbl(J):= I.line_index;
    END LOOP;
  END LOOP;

END IF;

IF J > 0 THEN
  FORALL K IN l_line_index_tbl.FIRST..l_line_index_tbl.LAST
  INSERT INTO qp_npreq_rltd_lines_tmp
  (LINE_INDEX,RELATED_LINE_DETAIL_INDEX,RELATIONSHIP_TYPE_CODE,PRICING_STATUS_CODE)
  VALUES
  (l_line_index_tbl(K),l_line_detail_index_tbl1(K),G_ORDER_TO_LINE,G_STATUS_NEW);
END IF;

EXCEPTION
  WHEN OTHERS THEN
     x_status_code := FND_API.G_RET_STS_ERROR;
     x_status_text := SQLERRM;
     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug(l_routine||' :'||SQLERRM);
     END IF;
END;


procedure Get_Price_List_Sequence(
                           x_status_code OUT NOCOPY VARCHAR2,
                           x_status_text OUT NOCOPY VARCHAR2)
is
l_routine VARCHAR2(30) := 'get_price_list_sequence';
begin

  --Get the sequence for price list
/*
INDX,QP_PREQ_GRP.get_price_list_sequence.cur_get_price_list_sequence,- No Index Used -,NA,NA
*/
  SELECT PHASE_SEQUENCE,PRICING_PHASE_ID
  INTO   G_PRICE_LIST_SEQUENCE,G_PRICE_LIST_PHASE_ID
  FROM   QP_PRICING_PHASES
  WHERE  LIST_TYPE_CODE = 'PRL'
  AND    ROWNUM < 2;

  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('G_PRICE_LIST_SEQUENCE: '|| G_PRICE_LIST_SEQUENCE );
  END IF;
EXCEPTION
  WHEN OTHERS THEN
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug(l_routine||' '||SQLERRM);
   END IF;
   x_status_code := FND_API.G_RET_STS_ERROR;
   x_status_text := 'Error in '||l_routine||SQLERRM;
end Get_Price_List_Sequence;

/*+----------------------------------------------------------------------------------------------------
 *| PROCEDURE/FUNCTION TO INCLUDE TCA HIERARCHY STRUCTURE FOR QUALIFIER  ATTRIBUTE  ADDED for TCA
 *+----------------------------------------------------------------------------------------------------
 */

  PROCEDURE INSERT_QUALIFIER_HIERARCHY
IS
l_count number;
BEGIN
select count(*) into l_count from qp_npreq_line_attrs_tmp;

engine_debug('count of attr before insert  '|| l_count);

   --[julin/4865213] tuned
   INSERT INTO qp_npreq_line_attrs_tmp
     (   LINE_INDEX
        ,LINE_DETAIL_INDEX
        ,ATTRIBUTE_LEVEL
        ,ATTRIBUTE_TYPE
        ,LIST_HEADER_ID
        ,LIST_LINE_ID
        ,CONTEXT
        ,ATTRIBUTE
        ,VALUE_FROM
        ,SETUP_VALUE_FROM
        ,VALUE_TO
        ,SETUP_VALUE_TO
        ,GROUPING_NUMBER
        ,NO_QUALIFIERS_IN_GRP
        ,COMPARISON_OPERATOR_TYPE_CODE
        ,VALIDATED_FLAG
        ,APPLIED_FLAG
        ,PRICING_STATUS_CODE
        ,PRICING_STATUS_TEXT
        ,QUALIFIER_PRECEDENCE
        ,PRICING_ATTR_FLAG
        ,QUALIFIER_TYPE
        ,DATATYPE
        ,PRODUCT_UOM_CODE
        ,PROCESSED_CODE
        ,EXCLUDER_FLAG
        ,GROUP_QUANTITY
        ,GROUP_AMOUNT
        ,DISTINCT_QUALIFIER_FLAG
        ,PRICING_PHASE_ID
        ,INCOMPATABILITY_GRP_CODE
        ,LINE_DETAIL_TYPE_CODE
        ,MODIFIER_LEVEL_CODE
        ,PRIMARY_UOM_FLAG
        ,REQUEST_ID
        ,DERIVED_QUALIFIER_FLAG)
        SELECT /*+ ORDERED use_nl(qpc qs hn) index(qnlat QP_PREQ_LINE_ATTRS_TMP_N2) */
         qnlat.LINE_INDEX
        ,qnlat.LINE_DETAIL_INDEX
        ,qnlat.ATTRIBUTE_LEVEL
        ,qnlat.ATTRIBUTE_TYPE
        ,qnlat.LIST_HEADER_ID
        ,qnlat.LIST_LINE_ID
        ,qnlat.CONTEXT
        ,qnlat.ATTRIBUTE
        ,to_char(hn.PARENT_ID)
        ,qnlat.SETUP_VALUE_FROM
        ,qnlat.VALUE_TO
        ,qnlat.SETUP_VALUE_TO
        ,qnlat.GROUPING_NUMBER
        ,qnlat.NO_QUALIFIERS_IN_GRP
        ,qnlat.COMPARISON_OPERATOR_TYPE_CODE
        ,qnlat.VALIDATED_FLAG
        ,qnlat.APPLIED_FLAG
        ,qnlat.PRICING_STATUS_CODE
        ,qnlat.PRICING_STATUS_TEXT
        ,qnlat.QUALIFIER_PRECEDENCE
        ,qnlat.PRICING_ATTR_FLAG
        ,qnlat.QUALIFIER_TYPE
        ,qnlat.DATATYPE
        ,qnlat.PRODUCT_UOM_CODE
        ,qnlat.PROCESSED_CODE
        ,qnlat.EXCLUDER_FLAG
        ,qnlat.GROUP_QUANTITY
        ,qnlat.GROUP_AMOUNT
        ,qnlat.DISTINCT_QUALIFIER_FLAG
        ,qnlat.PRICING_PHASE_ID
        ,qnlat.INCOMPATABILITY_GRP_CODE
        ,qnlat.LINE_DETAIL_TYPE_CODE
        ,qnlat.MODIFIER_LEVEL_CODE
        ,qnlat.PRIMARY_UOM_FLAG
        ,qnlat.REQUEST_ID
        ,'Y'
        FROM qp_npreq_line_attrs_tmp qnlat,
             qp_prc_contexts_b qpc,
             qp_segments_b qs,
             HZ_HIERARCHY_NODES hn
        WHERE qnlat.pricing_status_code = G_STATUS_UNCHANGED
          AND qnlat.attribute_type = G_QUALIFIER_TYPE
          AND qpc.PRC_CONTEXT_TYPE = 'QUALIFIER'
          AND qpc.PRC_CONTEXT_CODE = qnlat.CONTEXT
          AND qs.SEGMENT_MAPPING_COLUMN = qnlat.ATTRIBUTE
          AND qs.PRC_CONTEXT_ID = qpc.PRC_CONTEXT_ID
          AND qs.PARTY_HIERARCHY_ENABLED_FLAG = 'Y'
          AND nvl(qs.user_format_type, qs.seeded_format_type) = G_NUMERIC
          AND hn.CHILD_ID = to_number(qnlat.VALUE_FROM)
          AND hn.child_table_name = 'HZ_PARTIES'
          AND hn.HIERARCHY_TYPE = FND_PROFILE.VALUE('QP_PRICING_PARTY_HIERARCHY_TYPE')
          AND trunc(nvl(hn.EFFECTIVE_START_DATE,sysdate)) <= trunc(sysdate)
          AND trunc(nvl(hn.EFFECTIVE_END_DATE,sysdate)) >= trunc(sysdate)
          AND hn.LEVEL_NUMBER > 0;

END INSERT_QUALIFIER_HIERARCHY;

--Begin: pattern_engine for create_pattern - SMUHAMME
PROCEDURE populate_segment_id(x_status_code OUT NOCOPY VARCHAR2, x_status_text OUT NOCOPY VARCHAR2)
IS
l_routine VARCHAR2(200) := 'QP_PREQ_GRP.populate_segment_id: ';
l_debug VARCHAR2(3) := QP_PREQ_GRP.G_DEBUG_ENGINE;

lower_limit NUMBER;
upper_limit NUMBER;

BEGIN
QP_DEBUG_UTIL.tstart('populate_segment_id', 'populate_segment_id');


IF l_debug = FND_API.G_TRUE
THEN
engine_debug(l_routine || ' Starts ----------------');
END IF;

x_status_code := FND_API.G_RET_STS_SUCCESS;
x_status_text := 'Success';

lower_limit := G_MIN_LINE_INDEX;

WHILE lower_limit <= G_MAX_LINE_INDEX
LOOP
upper_limit := lower_limit + G_CHUNK_SIZE;
UPDATE
qp_npreq_line_attrs_tmp /*+ index(attr qp_preq_line_attrs_tmp_n9) */attr
SET attr.segment_id = (
SELECT qps.segment_id
FROM qp_prc_contexts_b qpc
, qp_segments_b qps
, qp_pte_segments qpps
WHERE attr.context = qpc.prc_context_code
AND qpc.prc_context_id = qps.prc_context_id
AND qps.segment_mapping_column = attr.attribute
AND qps.segment_id = qpps.segment_id
AND NVL(qpps.used_in_search, 'N') = 'Y'
AND ROWNUM < 2
)
WHERE line_index BETWEEN lower_limit AND upper_limit;

lower_limit := upper_limit + 1;
END LOOP;




/*UPDATE
qp_npreq_line_attrs_tmp attr
SET attr.segment_id = (
SELECT qps.segment_id
FROM qp_prc_contexts_b qpc
, qp_segments_b qps
, qp_pte_segments qpps
WHERE attr.context = qpc.prc_context_code
AND qpc.prc_context_id = qps.prc_context_id
AND qps.segment_mapping_column = attr.attribute
AND qps.segment_id = qpps.segment_id
AND NVL(qpps.used_in_search, 'N') = 'Y'
AND ROWNUM < 2
); */


/*UPDATE qp_npreq_line_attrs_tmp
SET mutlival_flag = 'M'
WHERE (line_index, segment_id) IN (
SELECT line_index, segment_id
FROM qp_npreq_line_attrs_tmp
WHERE segment_id IS NOT NULL
GROUP BY line_index, segment_id
HAVING count(segment_id) > 1
);*/

IF l_debug = FND_API.G_TRUE
THEN
engine_debug(l_routine || 'Updated segment_id of ' || SQL%ROWCOUNT || ' rows of qp_npreq_line_attrs_tmp');
engine_debug(l_routine || 'Ends Succesfully ***********');
END IF;

QP_DEBUG_UTIL.tstop('populate_segment_id');
EXCEPTION
WHEN OTHERS
THEN
IF l_debug = FND_API.G_TRUE
THEN
engine_debug(l_routine || 'Exception - ' || SQLERRM);
END IF;
x_status_code := FND_API.G_RET_STS_ERROR;
x_status_text := l_routine || SQLERRM;
END populate_segment_id;

--------------------------------------------------------------------------------

PROCEDURE create_pattern(p_pricing_phase_id NUMBER, x_status_code OUT NOCOPY VARCHAR2, x_status_text OUT NOCOPY VARCHAR2)
IS
 l_debug VARCHAR2(3) := G_DEBUG_ENGINE;
 l_routine VARCHAR2(300) := 'QP_PREQ_GRP.create_pattern ';

 upper_limit NUMBER;
 lower_limit NUMBER;

  BEGIN
 IF l_debug = FND_API.G_TRUE
 THEN
  engine_debug(l_routine || 'Starts ----');
 END IF;

 x_status_code := FND_API.G_RET_STS_SUCCESS;
 x_status_text := 'Success';

   QP_DEBUG_UTIL.tstart('create_pattern', 'create_pattern');

 QP_DEBUG_UTIL.tstart('insert_patrn_phases', 'insert_patrn_phases');
        INSERT INTO qp_npreq_patrn_phases_tmp(pattern_id, segment_id, pricing_phase_id, segment_index, segment_count)
 SELECT qp.pattern_id,
  qp.segment_id,
  p_pricing_phase_id,
  qp.segment_index,
  qp.segment_count
 FROM qp_patterns qp,
  qp_pattern_phases qpp
 WHERE qpp.pattern_id = qp.pattern_id
  AND qpp.pricing_phase_id = p_pricing_phase_id
  AND NVL(qpp.end_date_active,G_MIN_PRICING_DATE) >= G_MIN_PRICING_DATE
   AND NVL(qpp.start_date_active, G_MAX_PRICING_DATE) <= G_MAX_PRICING_DATE
  AND qpp.active_flag = 'Y'
  AND NOT EXISTS (
   SELECT pattern_id
   FROM qp_npreq_patrn_phases_tmp qp1
   WHERE qp.pattern_id = qp1.pattern_id
    AND ROWNUM < 2
 );

 QP_DEBUG_UTIL.tstop('insert_patrn_phases');

 IF l_debug = FND_API.G_TRUE
 THEN
  engine_debug(l_routine || 'inserted ' || SQL%ROWCOUNT || ' rows into qp_npreq_patrn_phases_tmp'
   || ' pricing_phase_id = ' || p_pricing_phase_id);
 END IF;
 qp_debug_util.tstart('insert_line_patrns', 'insert_line_patrns');

  lower_limit := G_MIN_LINE_INDEX;

  WHILE lower_limit <= G_MAX_LINE_INDEX
  LOOP
   upper_limit := lower_limit + G_CHUNK_SIZE;

  --change in index qp_preq_line_attrs_tmp_n9???

    INSERT INTO qp_npreq_line_patrns_tmp(line_index, pattern_id, hash_key)
    SELECT /*+ ORDERED index(attr qp_preq_line_attrs_tmp_n9) */
            attr.line_index,
     qpp.pattern_id,
     sys_connect_by_path(attr.value_from, '|') hash_key
    FROM (SELECT /*+ index(qpp1 qp_pattern_phases_n1) */ *
      FROM qp_npreq_patrn_phases_tmp qpp1
      WHERE qpp1.pricing_phase_id = p_pricing_phase_id) qpp,
      (SELECT *
       FROM qp_npreq_line_attrs_tmp
       WHERE line_index BETWEEN lower_limit AND upper_limit) attr
    WHERE attr.segment_id = qpp.segment_id
        AND attr.segment_id IS NOT NULL
        AND level = qpp.segment_count
      START WITH qpp.segment_index = 1
      CONNECT BY PRIOR qpp.segment_index = qpp.segment_index - 1
         AND PRIOR qpp.pattern_id = qpp.pattern_id
         AND PRIOR attr.line_index = attr.line_index;

   lower_limit := upper_limit + 1;
  END LOOP;
/* ELSE
  INSERT INTO qp_npreq_line_patrns_tmp(line_index, pattern_id, hash_key)
   SELECT /*+ ORDERED index(attr qp_preq_line_attrs_tmp_n9) */
/*           attr.line_index,
    qpp.pattern_id,
    sys_connect_by_path(attr.value_from, '|') hash_key
   FROM (SELECT /*+ index(qpp1 qp_pattern_phases_n1) */ --*
/*     FROM qp_npreq_patrn_phases_tmp qpp1
     WHERE qpp1.pricing_phase_id = p_pricing_phase_id) qpp,
     qp_npreq_line_attrs_tmp attr
   WHERE attr.segment_id = qpp.segment_id
       AND attr.segment_id IS NOT NULL
      AND level = qpp.segment_count
     START WITH qpp.segment_index = 1
   CONNECT BY PRIOR qpp.segment_index = qpp.segment_index - 1
    AND PRIOR qpp.pattern_id = qpp.pattern_id
        AND PRIOR attr.line_index = attr.line_index;

        Dbms_Output.put_line('inserted = ' || SQL%ROWCOUNT);
 END IF;  */

 QP_DEBUG_UTIL.tstop('insert_line_patrns');


 /*IF l_debug = FND_API.G_TRUE
 THEN
  engine_debug(l_routine || 'inserted ' || SQL%ROWCOUNT || ' rows to qp_npreq_line_patrns_tmp'
   || ' pricing_phase_id = ' || p_pricing_phase_id);
 END IF; */

qp_debug_util.tstart('def_patrns', 'Default Patterns');

 IF  NVL(G_PATRNS_TWO_THREE_INSERTED, 'N') = 'N'
 THEN
  IF l_debug = FND_API.G_TRUE
  THEN
   engine_debug(l_routine || 'inseting pattern_id -2 and -3');
  END IF;

  IF NVL(FND_PROFILE.VALUE(QP_PREQ_GRP.G_BLIND_DISCOUNT),'N') = 'Y'
  THEN
   INSERT INTO qp_npreq_line_patrns_tmp(line_index, pattern_id, hash_key)
    SELECT line_index, -2, 'BLIND'
    FROM qp_npreq_lines_tmp;

  END IF;
  INSERT INTO qp_npreq_line_patrns_tmp(line_index, pattern_id, hash_key)
   SELECT line_index, -3, 'BLIND'
   FROM qp_npreq_lines_tmp;

   INSERT INTO qp_npreq_line_patrns_tmp(line_index, pattern_id, hash_key)
   SELECT line_index, -1, 'NOEQUALS'
   FROM qp_npreq_lines_tmp;

  G_PATRNS_TWO_THREE_INSERTED :=  'Y';

 END IF;

qp_debug_util.tstop('def_patrns');

 QP_DEBUG_UTIL.tstop('create_pattern');

 IF l_debug = FND_API.G_TRUE
 THEN
  engine_debug(l_routine || 'Ends---------');
 END IF;
  EXCEPTION
 WHEN OTHERS
 THEN
  x_status_code := FND_API.G_RET_STS_ERROR;
  x_status_text := l_routine || SQLERRM;
  IF l_debug = FND_API.G_TRUE
  THEN
   engine_debug(l_routine || 'Exception: ' || SQLERRM);
  END IF;
END create_pattern;

-------------------------------------------------------------------------

--End: pattern_engine for create_pattern - SMUHAMME

-- Start: KDURGASI changes for pattern based select modifiers
PROCEDURE Select_modifiers_patrn(
				p_pricing_phase_id IN NUMBER,
				p_freeze_override_flag IN VARCHAR2,
				p_search_path IN NUMBER,
				x_status_code OUT nocopy VARCHAR2,
				x_status_text OUT nocopy VARCHAR2) AS

/* Header cache cursor*/

 CURSOR l_header_cache_cur(p_pricing_phase_id NUMBER) IS
SELECT
 /*+ ORDERED index(atrgrps QP_ATTRIBUTE_GROUPS_N1)
     index(qplines QP_PREQ_LINES_TMP_U1)
     index(qprs qp_pte_source_systems_u2)
     l_header_cache_cur */
 DISTINCT atrgrps.list_header_id,
  atrgrps.list_line_id list_line_id,
  qplines.line_index line_index,
  qppattmp.pattern_id matched_pattrn_id,
  p_pricing_phase_id,
  qppattmp.hash_key matched_hash_key,
  G_STAGE_CACHE_MOD_HDR stage,
  atrgrps.source_system_code,
  G_STATUS_UNCHANGED,
  atrgrps.header_quals_exist_flag,
  atrgrps.grouping_no,
  atrgrps.eq_flag,
  atrgrps.MODIFIER_LEVEL_CODE,
  atrgrps.other_oprt_count,
  atrgrps.null_other_oprt_count,
  atrgrps.LIST_TYPE_CODE,
  atrgrps.ASK_FOR_FLAG,
  atrgrps.HEADER_LIMIT_EXISTS,
  atrgrps.LINE_LIMIT_EXISTS,
  atrgrps.descendents_quals_exist
FROM qp_list_header_phases qplhp,
  qp_secu_attr_groups_v atrgrps,
  --qp_attribute_groups atrgrps,
  qp_npreq_line_patrns_tmp qppattmp,
  qp_npreq_lines_tmp qplines,
  qp_pte_source_systems qprs
  --qp_price_req_sources_v qprs
WHERE qplhp.pricing_phase_id = p_pricing_phase_id
	AND atrgrps.list_header_id = qplhp.list_header_id
	AND atrgrps.list_line_id = -1 -- Filter
	AND atrgrps.pte_code = G_PTE_CODE
	AND qppattmp.pattern_id = atrgrps.pattern_id -- Match
	AND qppattmp.hash_key = atrgrps.hash_key -- Match
	AND qppattmp.line_index = qplines.line_index --Join
	AND atrgrps.list_type_code NOT IN('PRL',   'AGR') -- Filter
	AND atrgrps.active_flag = 'Y' -- Filter
	--AND atrgrps.source_system_code = qprs.source_system_code --join
	--AND qprs.request_type_code = qp_preq_grp.g_request_type_code
        AND   qprs.APPLICATION_SHORT_NAME = atrgrps.source_system_code
        AND   qprs.pte_code = G_PTE_CODE
	AND(qplines.price_flag = qp_preq_grp.g_yes
		OR(qplines.price_flag = qp_preq_grp.g_phase
			AND p_freeze_override_flag = qp_preq_grp.g_yes))
	AND(	qplines.unit_price IS NOT NULL
		OR qplines.usage_pricing_type = qp_preq_grp.g_authoring_type
		OR qplines.line_type_code = qp_preq_grp.g_order_level) --AND qplines.line_type_code <> 'ORDER' -- needs to check
	AND atrgrps.pricing_phase_id = -1
	AND(	(atrgrps.currency_code IS NOT NULL
			AND atrgrps.currency_code = qp_preq_grp.g_currency_code)
		OR atrgrps.currency_code IS NULL)
	AND TRUNC(nvl(qplines.pricing_effective_date, sysdate))
		BETWEEN TRUNC(nvl(atrgrps.start_date_active_h,   nvl(qplines.pricing_effective_date,  sysdate)))
			AND TRUNC(nvl(atrgrps.end_date_active_h,   nvl(qplines.pricing_effective_date,   sysdate)))
	AND TRUNC(nvl(qplines.start_date_active_first, sysdate))
		BETWEEN TRUNC(nvl(atrgrps.start_date_active_first,   nvl(qplines.start_date_active_first,  sysdate)))
			AND TRUNC(nvl(atrgrps.end_date_active_first,   nvl(qplines.start_date_active_first,  sysdate)))
	AND TRUNC(nvl(qplines.start_date_active_second, sysdate))
		BETWEEN TRUNC(nvl(atrgrps.start_date_active_second,   nvl(qplines.start_date_active_second, sysdate)))
			AND TRUNC(nvl(atrgrps.end_date_active_second,   nvl(qplines.start_date_active_second, sysdate)))
	AND nvl(qplines.active_date_first_type,   'X') = nvl(atrgrps.active_date_first_type,   nvl(qplines.active_date_first_type,   'X'))
	AND nvl(qplines.active_date_second_type,   'X') = nvl(atrgrps.active_date_second_type,   nvl(qplines.active_date_second_type,   'X'))
	AND TRUNC(nvl(qplines.pricing_effective_date, sysdate))
		BETWEEN TRUNC(nvl(atrgrps.start_date_active_q,   nvl(qplines.pricing_effective_date, sysdate)))
			AND TRUNC(nvl(atrgrps.end_date_active_q,   nvl(qplines.pricing_effective_date, sysdate)))
	AND((atrgrps.ask_for_flag = qp_preq_grp.g_yes
			AND EXISTS
				  (SELECT
				   /*+ index(la QP_PREQ_LINE_ATTRS_TMP_N1) */ 'x' --[julin/pricebook/backport]
				  FROM qp_npreq_line_attrs_tmp la -- will check whether this can be moved to shaneeds code
				  WHERE attribute_type = G_QUALIFIER_TYPE
				   AND pricing_status_code = qp_preq_grp.g_status_unchanged
				   AND validated_flag = qp_preq_grp.g_no
				   AND list_header_id = atrgrps.list_header_id
				   AND line_index = qplines.line_index)
		)
		OR atrgrps.ask_for_flag = qp_preq_grp.g_no);

/* line cache cursor*/

 CURSOR l_line_cache_cur(p_pricing_phase_id NUMBER) IS
SELECT
/*+ ORDERED index(atrgrps QP_ATTRIBUTE_GROUPS_N3)
    index(qppattmp QP_NPREQ_LINE_PATRNS_T_N2)
    index(intmdt QP_PREQ_PATRN_QUAL_T_N2)
    l_line_cache_cur */
 DISTINCT atrgrps.list_header_id,
  atrgrps.list_line_id list_line_id,
  qplines.line_index line_index,
  qppattmp.pattern_id matched_pattrn_id,
  p_pricing_phase_id,
  qppattmp.hash_key matched_hash_key,
  G_STAGE_CACHE_MOD_LIN stage,
  atrgrps.source_system_code,
  G_STATUS_UNCHANGED,
  atrgrps.header_quals_exist_flag,
  atrgrps.grouping_no,
  atrgrps.eq_flag,
  atrgrps.MODIFIER_LEVEL_CODE,
  atrgrps.other_oprt_count,
  atrgrps.null_other_oprt_count,
  atrgrps.LIST_TYPE_CODE,
  atrgrps.ASK_FOR_FLAG,
  atrgrps.HEADER_LIMIT_EXISTS,
  atrgrps.LINE_LIMIT_EXISTS,
  atrgrps.descendents_quals_exist,
  atrgrps.PRICE_BREAK_TYPE_CODE
FROM qp_npreq_lines_tmp qplines,
  qp_preq_patrn_qual_tmp intmdt,
  qp_npreq_line_patrns_tmp qppattmp,
  qp_attribute_groups atrgrps
WHERE intmdt.pricing_phase_id = p_pricing_phase_id
	AND atrgrps.list_header_id = intmdt.list_header_id
	AND intmdt.stage = G_STAGE_CACHE_MOD_HDR
	AND atrgrps.list_line_id <> -1 -- Filter
	AND atrgrps.pricing_phase_id = p_pricing_phase_id
	AND qppattmp.pattern_id = atrgrps.pattern_id -- Match
	AND qppattmp.hash_key = atrgrps.hash_key -- Match
	AND qplines.line_index = qppattmp.line_index --Join
	AND intmdt.line_index = qplines.line_index
	AND intmdt.pricing_status_code=QP_PREQ_GRP.G_STATUS_UNCHANGED
	AND(atrgrps.modifier_level_code = qplines.line_type_code
		OR (atrgrps.modifier_level_code = qp_preq_grp.g_line_group and
		       nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) <> G_YES))
	AND((atrgrps.currency_code IS NOT NULL
		AND atrgrps.currency_code = qp_preq_grp.g_currency_code)
		OR atrgrps.currency_code IS NULL) -- optional currency
	AND TRUNC(nvl(qplines.pricing_effective_date, sysdate))
		BETWEEN TRUNC(nvl(atrgrps.start_date_active_l,  nvl(qplines.pricing_effective_date, sysdate)))
			AND TRUNC(nvl(atrgrps.end_date_active_l, nvl(qplines.pricing_effective_date, sysdate)))
	AND TRUNC(nvl(qplines.pricing_effective_date, sysdate))
		BETWEEN TRUNC(nvl(atrgrps.start_date_active_q,   nvl(qplines.pricing_effective_date, sysdate)))
			AND TRUNC(nvl(atrgrps.end_date_active_q,   nvl(qplines.pricing_effective_date, sysdate)))
	AND (qplines.priced_uom_code IS NULL
		OR qplines.priced_uom_code = nvl(atrgrps.product_uom_code,   qplines.priced_uom_code)
		)
	AND((atrgrps.ask_for_flag = qp_preq_grp.g_yes
		AND EXISTS
			  (SELECT

			   /*+ index(la QP_PREQ_LINE_ATTRS_TMP_N1) */ 'x' --[julin/pricebook/backport]
			  FROM qp_npreq_line_attrs_tmp la -- will check whether this can be moved to shaneeds code
			  WHERE attribute_type = G_QUALIFIER_TYPE
			   AND pricing_status_code = qp_preq_grp.g_status_unchanged
			   AND validated_flag = qp_preq_grp.g_no
			   AND list_header_id = atrgrps.list_header_id
			   AND line_index = qplines.line_index)
		)
		OR atrgrps.ask_for_flag = qp_preq_grp.g_no)
	AND   (nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) = G_YES AND
               atrgrps.list_line_type_code NOT IN (G_PROMO_GOODS_DISCOUNT,G_OTHER_ITEM_DISCOUNT,
                                        G_COUPON_ISSUE,G_TERMS_SUBSTITUTION,G_ITEM_UPGRADE) AND
               atrgrps.automatic_flag = 'Y'
       OR
       nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) <> G_YES);
/*UNION ALL
SELECT
---This union all is to fetch all the lines whose header_quals_exist_flag is N(means pure no header quals)
+ ORDERED index(atrgrps QP_ATTRIBUTE_GROUPS_N3) index(qppattmp QP_NPREQ_LINE_PATRNS_T_N2) l_line_cache_cur */
/* DISTINCT atrgrps.list_header_id,
  atrgrps.list_line_id list_line_id,
  qplines.line_index line_index,
  qppattmp.pattern_id matched_pattrn_id,
  p_pricing_phase_id,
  qppattmp.hash_key matched_hash_key,
  G_STAGE_CACHE_MOD_LIN stage,
  atrgrps.source_system_code,
  G_STATUS_UNCHANGED,
  atrgrps.header_quals_exist_flag,
  atrgrps.grouping_no,
  atrgrps.eq_flag,
  atrgrps.MODIFIER_LEVEL_CODE,
  atrgrps.other_oprt_count,
  atrgrps.null_other_oprt_count,
  atrgrps.LIST_TYPE_CODE,
  atrgrps.ASK_FOR_FLAG,
  atrgrps.HEADER_LIMIT_EXISTS,
  atrgrps.LINE_LIMIT_EXISTS,
  atrgrps.descendents_quals_exist,
  atrgrps.PRICE_BREAK_TYPE_CODE
FROM qp_npreq_lines_tmp qplines,
     qp_npreq_line_patrns_tmp qppattmp,
     qp_attribute_groups atrgrps
WHERE atrgrps.pricing_phase_id = p_pricing_phase_id
	AND nvl(atrgrps.header_quals_exist_flag,   'N') = 'N'
	AND qppattmp.pattern_id = atrgrps.pattern_id -- Match
	AND qppattmp.hash_key = atrgrps.hash_key -- Match
	AND qplines.line_index = qppattmp.line_index --Join
	AND atrgrps.list_type_code NOT IN('PRL',   'AGR') -- Filter
	AND atrgrps.active_flag = 'Y' -- Filter
	AND(atrgrps.modifier_level_code = qplines.line_type_code
		OR (atrgrps.modifier_level_code = qp_preq_grp.g_line_group and
		       nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) <> G_YES))
	AND(	qplines.unit_price IS NOT NULL
		OR qplines.usage_pricing_type = qp_preq_grp.g_authoring_type
		OR qplines.line_type_code = qp_preq_grp.g_order_level
	)
	AND(qplines.price_flag = qp_preq_grp.g_yes
		OR(qplines.price_flag = qp_preq_grp.g_phase
			AND p_freeze_override_flag = qp_preq_grp.g_yes)
	)
	AND(	(atrgrps.currency_code IS NOT NULL
			AND atrgrps.currency_code = qp_preq_grp.g_currency_code)
		OR atrgrps.currency_code IS NULL) -- optional currency
	AND nvl(qplines.pricing_effective_date,   TRUNC(sysdate))
		BETWEEN nvl(atrgrps.start_date_active_h,   nvl(qplines.pricing_effective_date,   TRUNC(sysdate)))
			AND nvl(atrgrps.end_date_active_h,   nvl(qplines.pricing_effective_date,   TRUNC(sysdate)))
	AND nvl(qplines.start_date_active_first,   TRUNC(sysdate))
		BETWEEN nvl(atrgrps.start_date_active_first,   nvl(qplines.start_date_active_first,   TRUNC(sysdate)))
			AND nvl(atrgrps.end_date_active_first,   nvl(qplines.start_date_active_first,   TRUNC(sysdate)))
	AND nvl(qplines.start_date_active_second,   TRUNC(sysdate))
		BETWEEN nvl(atrgrps.start_date_active_second,   nvl(qplines.start_date_active_second,   TRUNC(sysdate)))
			AND nvl(atrgrps.end_date_active_second,   nvl(qplines.start_date_active_second,   TRUNC(sysdate)))
	AND nvl(qplines.active_date_first_type,   'X') = nvl(atrgrps.active_date_first_type,   nvl(qplines.active_date_first_type,   'X'))
	AND nvl(qplines.active_date_second_type,   'X') = nvl(atrgrps.active_date_second_type,   nvl(qplines.active_date_second_type,   'X'))
	AND nvl(qplines.pricing_effective_date,   TRUNC(sysdate))
		BETWEEN nvl(TRUNC(atrgrps.start_date_active_l),   qplines.pricing_effective_date)
			AND nvl(TRUNC(atrgrps.end_date_active_l),   qplines.pricing_effective_date)
	AND nvl(qplines.pricing_effective_date,   TRUNC(sysdate))
		BETWEEN nvl(atrgrps.start_date_active_q,   nvl(qplines.pricing_effective_date,   TRUNC(sysdate)))
			AND nvl(atrgrps.end_date_active_q,   nvl(qplines.pricing_effective_date,   TRUNC(sysdate)))
	AND (qplines.priced_uom_code IS NULL
		OR qplines.priced_uom_code = nvl(atrgrps.product_uom_code,   qplines.priced_uom_code)
		)
	AND((atrgrps.ask_for_flag = qp_preq_grp.g_yes
		AND EXISTS
			  (SELECT

			   /*+ index(la QP_PREQ_LINE_ATTRS_TMP_N1) */ /*'x' --[julin/pricebook/backport]
			  FROM qp_npreq_line_attrs_tmp la -- will check whether this can be moved to shaneeds code
			  WHERE attribute_type = G_QUALIFIER_TYPE
			   AND pricing_status_code = qp_preq_grp.g_status_unchanged
			   AND validated_flag = qp_preq_grp.g_no
			   AND list_header_id = atrgrps.list_header_id
			   AND line_index = qplines.line_index)
	)
	OR atrgrps.ask_for_flag = qp_preq_grp.g_no)
	AND   (nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) = G_YES AND
               atrgrps.list_line_type_code NOT IN (G_PROMO_GOODS_DISCOUNT,G_OTHER_ITEM_DISCOUNT,
                                       G_COUPON_ISSUE,G_TERMS_SUBSTITUTION,G_ITEM_UPGRADE) AND
               atrgrps.automatic_flag = 'Y'
       OR
       nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) <> G_YES)*/

CURSOR l_line_cache_path2_cur(p_pricing_phase_id NUMBER) IS
SELECT
 /*+ ORDERED index(atrgrps QP_ATTRIBUTE_GROUPS_N3)
      index(qppattmp QP_NPREQ_LINE_PATRNS_T_N2)
      index(qplines QP_PREQ_LINES_TMP_U1)
      index(qprs qp_pte_source_systems_u2)
      l_line_cache_path2_cur */
 DISTINCT atrgrps.list_header_id,
  atrgrps.list_line_id list_line_id,
  qplines.line_index line_index,
  qppattmp.pattern_id matched_pattrn_id,
  p_pricing_phase_id,
  qppattmp.hash_key matched_hash_key,
  G_STAGE_CACHE_MOD_LIN stage,
  atrgrps.source_system_code,
  G_STATUS_UNCHANGED,
  atrgrps.header_quals_exist_flag,
  atrgrps.grouping_no,
  atrgrps.eq_flag,
  atrgrps.MODIFIER_LEVEL_CODE,
  atrgrps.other_oprt_count,
  atrgrps.null_other_oprt_count,
  atrgrps.LIST_TYPE_CODE,
  atrgrps.ASK_FOR_FLAG,
  atrgrps.HEADER_LIMIT_EXISTS,
  atrgrps.LINE_LIMIT_EXISTS,
  atrgrps.descendents_quals_exist,
  atrgrps.PRICE_BREAK_TYPE_CODE
FROM qp_npreq_lines_tmp qplines,
  qp_npreq_line_patrns_tmp qppattmp,
  qp_attribute_groups atrgrps,
  qp_pte_source_systems qprs
WHERE atrgrps.list_line_id <> -1 -- Filter
	AND atrgrps.pattern_id = qppattmp.pattern_id  -- Match
	AND atrgrps.hash_key = qppattmp.hash_key   -- Match
        AND atrgrps.pte_code = G_PTE_CODE
	AND qppattmp.line_index = qplines.line_index --Join
	AND atrgrps.list_type_code NOT IN('PRL',   'AGR') -- Filter
	AND atrgrps.active_flag = 'Y' -- Filter
	--AND atrgrps.source_system_code = qprs.source_system_code --join
	--AND qprs.request_type_code = qp_preq_grp.g_request_type_code
        AND qprs.APPLICATION_SHORT_NAME = atrgrps.source_system_code
        AND qprs.pte_code = G_PTE_CODE
	AND(atrgrps.modifier_level_code = qplines.line_type_code
		OR (atrgrps.modifier_level_code = qp_preq_grp.g_line_group and
		       nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) <> G_YES))
	AND(	qplines.unit_price IS NOT NULL
		OR qplines.usage_pricing_type = qp_preq_grp.g_authoring_type
		OR qplines.line_type_code = qp_preq_grp.g_order_level
	)
	AND(qplines.price_flag = qp_preq_grp.g_yes
		OR(qplines.price_flag = qp_preq_grp.g_phase
			AND p_freeze_override_flag = qp_preq_grp.g_yes)
	)
	AND atrgrps.pricing_phase_id = p_pricing_phase_id
	AND((	atrgrps.currency_code IS NOT NULL
			AND atrgrps.currency_code = qp_preq_grp.g_currency_code)
		OR atrgrps.currency_code IS NULL
	)
	AND TRUNC(nvl(qplines.pricing_effective_date, sysdate))
		BETWEEN TRUNC(nvl(atrgrps.start_date_active_h,   nvl(qplines.pricing_effective_date, sysdate)))
			AND TRUNC(nvl(atrgrps.end_date_active_h,   nvl(qplines.pricing_effective_date, sysdate)))
	AND TRUNC(nvl(qplines.start_date_active_first, sysdate))
		BETWEEN TRUNC(nvl(atrgrps.start_date_active_first,   nvl(qplines.start_date_active_first, sysdate)))
			AND TRUNC(nvl(atrgrps.end_date_active_first,   nvl(qplines.start_date_active_first, sysdate)))
	AND TRUNC(nvl(qplines.start_date_active_second, sysdate))
		BETWEEN TRUNC(nvl(atrgrps.start_date_active_second,   nvl(qplines.start_date_active_second, sysdate)))
			AND TRUNC(nvl(atrgrps.end_date_active_second,   nvl(qplines.start_date_active_second, sysdate)))
	AND nvl(qplines.active_date_first_type,   'X') = nvl(atrgrps.active_date_first_type,   nvl(qplines.active_date_first_type,   'X'))
	AND nvl(qplines.active_date_second_type,   'X') = nvl(atrgrps.active_date_second_type,   nvl(qplines.active_date_second_type,   'X'))
	AND TRUNC(nvl(qplines.pricing_effective_date, sysdate))
		BETWEEN TRUNC(nvl(atrgrps.start_date_active_l,   nvl(qplines.pricing_effective_date, sysdate)))
			AND TRUNC(nvl(atrgrps.end_date_active_l, nvl(qplines.pricing_effective_date, sysdate)))
	AND TRUNC(nvl(qplines.pricing_effective_date, sysdate))
		BETWEEN TRUNC(nvl(atrgrps.start_date_active_q,   nvl(qplines.pricing_effective_date, sysdate)))
			AND TRUNC(nvl(atrgrps.end_date_active_q,   nvl(qplines.pricing_effective_date, sysdate)))
	AND (qplines.priced_uom_code IS NULL
		OR qplines.priced_uom_code = nvl(atrgrps.product_uom_code,   qplines.priced_uom_code)
		)
	AND((atrgrps.ask_for_flag = qp_preq_grp.g_yes
		AND EXISTS
			  (SELECT

			   /*+ index(la QP_PREQ_LINE_ATTRS_TMP_N1) */ 'x' --[julin/pricebook/backport]
			  FROM qp_npreq_line_attrs_tmp la -- will check whether this can be moved to shaneeds code
			  WHERE attribute_type = G_QUALIFIER_TYPE
			   AND pricing_status_code = qp_preq_grp.g_status_unchanged
			   AND validated_flag = qp_preq_grp.g_no
			   AND list_header_id = atrgrps.list_header_id
			   AND line_index = qplines.line_index)
	)
	OR atrgrps.ask_for_flag = qp_preq_grp.g_no)
	AND   (nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) = G_YES AND
               atrgrps.list_line_type_code NOT IN (G_PROMO_GOODS_DISCOUNT,G_OTHER_ITEM_DISCOUNT,
                                        G_COUPON_ISSUE,G_TERMS_SUBSTITUTION,G_ITEM_UPGRADE) AND
               atrgrps.automatic_flag = 'Y'
       OR
       nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) <> G_YES);

CURSOR l_hdr_cache_cur_path2(p_pricing_phase_id NUMBER) IS
SELECT

 /*+ ORDERED index(atrgrps QP_ATTRIBUTE_GROUPS_N1)
     index(qppattmp QP_NPREQ_LINE_PATRNS_T_N2)
     index(intmdt QP_PREQ_PATRN_QUAL_T_N1)
     l_hdr_cache_cur_path2 */
 DISTINCT atrgrps.list_header_id,
  -1 list_line_id,
  qplines.line_index line_index,
  qppattmp.pattern_id matched_pattrn_id,
  p_pricing_phase_id,
  qppattmp.hash_key matched_hash_key,
  G_STAGE_CACHE_MOD_HDR stage,
  atrgrps.source_system_code,
  G_STATUS_UNCHANGED,
  atrgrps.header_quals_exist_flag,
  atrgrps.grouping_no,
  atrgrps.eq_flag,
  atrgrps.MODIFIER_LEVEL_CODE,
  atrgrps.other_oprt_count,
  atrgrps.null_other_oprt_count,
  atrgrps.LIST_TYPE_CODE,
  atrgrps.ASK_FOR_FLAG,
  atrgrps.HEADER_LIMIT_EXISTS,
  atrgrps.LINE_LIMIT_EXISTS,
  atrgrps.descendents_quals_exist
FROM qp_preq_patrn_qual_tmp intmdt,
  qp_secu_attr_groups_v atrgrps,
  --qp_attribute_groups atrgrps,
  qp_npreq_line_patrns_tmp qppattmp,
  qp_npreq_lines_tmp qplines
WHERE intmdt.pricing_phase_id = p_pricing_phase_id
	AND atrgrps.list_header_id = intmdt.list_header_id
	AND intmdt.stage = G_STAGE_CACHE_MOD_LIN
	AND atrgrps.list_line_id = -1 -- Filter
	AND qppattmp.pattern_id = atrgrps.pattern_id -- Match
	AND qppattmp.hash_key = atrgrps.hash_key -- Match
        AND qppattmp.line_index = intmdt.line_index
	AND qplines.line_index = qppattmp.line_index --Join
	AND intmdt.pricing_status_code=QP_PREQ_GRP.G_STATUS_UNCHANGED
        AND TRUNC(nvl(qplines.pricing_effective_date, sysdate))
	  BETWEEN TRUNC(nvl(atrgrps.start_date_active_q,   nvl(qplines.pricing_effective_date, sysdate)))
	      AND TRUNC(nvl(atrgrps.end_date_active_q,   nvl(qplines.pricing_effective_date, sysdate)));

/*CURSOR l_both_cache_path2_cur(p_pricing_phase_id NUMBER) IS
SELECT
 /*+ ORDERED index(atrgrps_l QP_ATTRIBUTE_GROUPS_N3)
          index(atrgrps_h QP_ATTRIBUTE_GROUPS_N1)
      index(qplines QP_PREQ_LINES_TMP_N4)
      index(qppattmp_h QP_NPREQ_LINE_PATRNS_T_N1)
      index(qppattmp_l QP_NPREQ_LINE_PATRNS_T_N2)
      l_both_cache_path2_cur */
 /*DISTINCT atrgrps_h.list_header_id,
  atrgrps_l.list_line_id list_line_id,
  qplines.line_index line_index,
  qppattmp_l.pattern_id lin_matched_pattrn_id,
  qppattmp_h.pattern_id hdr_matched_pattrn_id,
  p_pricing_phase_id,
  qppattmp_l.hash_key lin_matched_hash_key,
  qppattmp_h.hash_key hdr_matched_hash_key,
  G_STAGE_CACHE_MOD_LIN2 stage,
  G_STATUS_UNCHANGED,
  qprs.source_system_code,
  DECODE(atrgrps_h.EQ_FLAG,'N','Y','N') HEADER_QUALS_EXIST_FLAG,
  atrgrps_h.grouping_no,
  atrgrps_l.grouping_no,
  atrgrps_h.eq_flag,
  atrgrps_l.eq_flag,
  atrgrps_l.MODIFIER_LEVEL_CODE,
  atrgrps_l.other_oprt_count,
  atrgrps_l.null_other_oprt_count,
  atrgrps_h.other_oprt_count,
  atrgrps_h.null_other_oprt_count,
  atrgrps_h.LIST_TYPE_CODE,
  atrgrps_h.ASK_FOR_FLAG,
  atrgrps_h.HEADER_LIMIT_EXISTS,
  atrgrps_l.LINE_LIMIT_EXISTS
FROM qp_npreq_lines_tmp qplines,
     qp_npreq_line_patrns_tmp qppattmp_l,
     qp_attribute_groups atrgrps_l,
     qp_attribute_groups atrgrps_h,
     qp_npreq_line_patrns_tmp qppattmp_h,
     qp_price_req_sources_v qprs
     WHERE  atrgrps_l.list_line_id <> -1 -- Filter
        AND atrgrps_h.list_line_id = -1 -- Filter
        AND atrgrps_l.list_header_id = atrgrps_h.list_header_id -- Filter
	AND qppattmp_l.pattern_id = atrgrps_l.pattern_id -- Match
	AND qppattmp_l.hash_key = atrgrps_l.hash_key -- Match
	AND qppattmp_h.pattern_id = atrgrps_h.pattern_id -- Match
	AND qppattmp_h.hash_key = atrgrps_h.hash_key -- Match
	AND qppattmp_l.line_index = qplines.line_index --Join
	AND qppattmp_h.line_index = qplines.line_index --Join
	AND atrgrps_l.list_type_code NOT IN('PRL',   'AGR') -- Filter
	AND atrgrps_h.list_type_code NOT IN('PRL',   'AGR') -- Filter
	AND atrgrps_l.active_flag = 'Y' -- Filter
	AND atrgrps_h.active_flag = 'Y' -- Filter
	AND atrgrps_l.source_system_code = qprs.source_system_code --join
	AND atrgrps_h.source_system_code = qprs.source_system_code --join
	AND qprs.request_type_code = qp_preq_grp.g_request_type_code
	AND((nvl(g_security_control,   'OFF') = 'ON' AND g_current_user_op_unit = atrgrps_h.orig_org_id)
		OR (nvl(g_security_control,   'OFF') = 'ON' AND nvl(atrgrps_h.global_flag,   'Y') = 'Y')
		OR nvl(g_security_control,   'OFF') = 'OFF'
	)
	AND(atrgrps_l.modifier_level_code = qplines.line_type_code
		OR atrgrps_l.modifier_level_code = qp_preq_grp.g_line_group)
	AND(	qplines.unit_price IS NOT NULL
		OR qplines.usage_pricing_type = qp_preq_grp.g_authoring_type
		OR qplines.line_type_code = qp_preq_grp.g_order_level
	)
	AND(qplines.price_flag = qp_preq_grp.g_yes
		OR(qplines.price_flag = qp_preq_grp.g_phase
			AND p_freeze_override_flag = qp_preq_grp.g_yes)
	)
	AND atrgrps_l.pricing_phase_id = p_pricing_phase_id
--	AND atrgrps_h.pricing_phase_id = -1
	AND((	atrgrps_h.currency_code IS NOT NULL
			AND atrgrps_h.currency_code = qp_preq_grp.g_currency_code)
		OR atrgrps_h.currency_code IS NULL
	)
	AND nvl(qplines.pricing_effective_date,   TRUNC(sysdate))
		BETWEEN nvl(atrgrps_h.start_date_active_h,   nvl(qplines.pricing_effective_date,   TRUNC(sysdate)))
			AND nvl(atrgrps_h.end_date_active_h,   nvl(qplines.pricing_effective_date,   TRUNC(sysdate)))
	AND nvl(qplines.start_date_active_first,   TRUNC(sysdate))
		BETWEEN nvl(atrgrps_h.start_date_active_first,   nvl(qplines.start_date_active_first,   TRUNC(sysdate)))
			AND nvl(atrgrps_h.end_date_active_first,   nvl(qplines.start_date_active_first,   TRUNC(sysdate)))
	AND nvl(qplines.start_date_active_second,   TRUNC(sysdate))
		BETWEEN nvl(atrgrps_h.start_date_active_second,   nvl(qplines.start_date_active_second,   TRUNC(sysdate)))
			AND nvl(atrgrps_h.end_date_active_second,   nvl(qplines.start_date_active_second,   TRUNC(sysdate)))
	AND nvl(qplines.active_date_first_type,   'X') = nvl(atrgrps_h.active_date_first_type,   nvl(qplines.active_date_first_type,   'X'))
	AND nvl(qplines.active_date_second_type,   'X') = nvl(atrgrps_h.active_date_second_type,   nvl(qplines.active_date_second_type,   'X'))
	AND nvl(qplines.pricing_effective_date,   TRUNC(sysdate))
		BETWEEN nvl(TRUNC(atrgrps_l.start_date_active_l),   qplines.pricing_effective_date)
			AND nvl(TRUNC(atrgrps_l.end_date_active_l),   qplines.pricing_effective_date)
	AND nvl(qplines.pricing_effective_date,   TRUNC(sysdate))
		BETWEEN nvl(atrgrps_l.start_date_active_q,   nvl(qplines.pricing_effective_date,   TRUNC(sysdate)))
			AND nvl(atrgrps_l.end_date_active_q,   nvl(qplines.pricing_effective_date,   TRUNC(sysdate)))
	AND (qplines.priced_uom_code IS NULL
		OR qplines.priced_uom_code = nvl(atrgrps_l.product_uom_code,   qplines.priced_uom_code)
		)
	AND((atrgrps_h.ask_for_flag = qp_preq_grp.g_yes
		AND EXISTS
			  (SELECT

			   /*+ index(la QP_PREQ_LINE_ATTRS_TMP_N1) */ /*'x' --[julin/pricebook/backport]
			  FROM qp_npreq_line_attrs_tmp la -- will check whether this can be moved to shaneeds code
			  WHERE attribute_type = G_QUALIFIER_TYPE
			   AND pricing_status_code = qp_preq_grp.g_status_unchanged
			   AND validated_flag = qp_preq_grp.g_no
			   AND list_header_id = atrgrps_h.list_header_id
			   AND line_index = qplines.line_index)
	)
	OR atrgrps_h.ask_for_flag = qp_preq_grp.g_no);*/
l_limit NUMBER := 5000;
p_stage varchar2(300);
TYPE l_number IS TABLE OF NUMBER INDEX BY pls_integer;
l_list_header_id_tbl l_number;
l_list_line_id_tbl l_number;
l_matched_pattrn_id_tbl l_number;
l_lin_matched_pattrn_id_tbl l_number;
l_hdr_matched_pattrn_id_tbl l_number;
l_line_index_tbl l_number;
l_pricing_phase_id_tbl l_number;
l_grouping_no l_number;
l_other_oprt_count l_number;
l_null_other_oprt_count l_number;
l_hdr_grouping_no l_number;
l_hdr_other_oprt_count l_number;
l_hdr_null_other_oprt_count l_number;
l_lin_grouping_no l_number;
l_lin_other_oprt_count l_number;
l_lin_null_other_oprt_count l_number;

TYPE l_string IS TABLE OF VARCHAR2(2000) INDEX BY pls_integer;
l_matched_hash_key_tbl l_string;
l_hdr_matched_hash_key_tbl l_string;
l_lin_matched_hash_key_tbl l_string;
l_stage_tbl l_string;
l_pricing_status_code_tbl l_string;
l_ssc l_string;
l_header_quals_exist_flag l_string;
l_eq_flag l_string;
l_hdr_eq_flag l_string;
l_lin_eq_flag l_string;
l_modf_lvl_code l_string;
l_list_type_code l_string;
l_ask_for_flag l_string;
l_hdr_lmt_exists l_string;
l_line_lmt_exists l_string;
l_descnt_quals_exist l_string;
l_PRICE_BREAK_TYPE_CODE l_string;


l_routine VARCHAR2(40) := 'Select_modifiers_patrn';
E_ROUTINE_ERRORS EXCEPTION;
l_search_path NUMBER(1);

BEGIN

  x_status_code := fnd_api.g_ret_sts_success;
	l_search_path := p_search_path;
	  IF qp_preq_grp.g_debug_engine = fnd_api.g_true THEN
	    qp_preq_grp.engine_debug('Entering into pattern Select_modifiers_patrn');
	    qp_preq_grp.engine_debug('Pattern search is going in Path : ' || l_search_path);
	  END IF;
  IF l_search_path = 1 THEN -- for the Path 1
  /* Header Caching*/
		IF qp_preq_grp.g_debug_engine = fnd_api.g_true THEN
			qp_preq_grp.engine_debug('Caching Header Qualifiers for phase : ' || p_pricing_phase_id);
		END IF;
	    qp_debug_util.tstart('PATRN_SELECT_MODIFIERS_HDR_CACHE_CUR',   'l_header_cache_cur');

	    OPEN l_header_cache_cur(p_pricing_phase_id);
	    LOOP
	      l_list_header_id_tbl.DELETE;
	      l_list_line_id_tbl.DELETE;
	      l_line_index_tbl.DELETE;
	      l_matched_pattrn_id_tbl.DELETE;
	      l_pricing_phase_id_tbl.DELETE;
	      l_stage_tbl.DELETE;
	      l_matched_hash_key_tbl.DELETE;
	      l_pricing_status_code_tbl.DELETE;
	      l_ssc.DELETE;
	      l_header_quals_exist_flag.DELETE;
	      l_grouping_no.DELETE;
	      l_eq_flag.DELETE;
	      l_modf_lvl_code.DELETE;
	      l_other_oprt_count.DELETE;
	      l_null_other_oprt_count.DELETE;
              l_list_type_code.DELETE;
              l_ask_for_flag.DELETE;
              l_hdr_lmt_exists.DELETE;
              l_line_lmt_exists.DELETE;
              l_descnt_quals_exist.DELETE;


	      FETCH l_header_cache_cur bulk collect
	      INTO l_list_header_id_tbl,
		l_list_line_id_tbl,
		l_line_index_tbl,
		l_matched_pattrn_id_tbl,
		l_pricing_phase_id_tbl,
		l_matched_hash_key_tbl,
		l_stage_tbl,
		l_ssc,
		l_pricing_status_code_tbl,
		l_header_quals_exist_flag,
		l_grouping_no,
		l_eq_flag,
                l_modf_lvl_code,
                l_other_oprt_count,
                l_null_other_oprt_count,
		l_list_type_code,
		l_ask_for_flag,
		l_hdr_lmt_exists,
		l_line_lmt_exists,
                l_descnt_quals_exist
		limit l_limit;

	      EXIT
	    WHEN l_list_header_id_tbl.COUNT = 0;

	    forall i IN 1 .. l_list_header_id_tbl.COUNT INSERT
	    INTO qp_preq_patrn_qual_tmp(list_header_id,
					list_line_id,
					line_index,
					matched_pattrn_id,
					pricing_phase_id,
					matched_hash_key,
					stage,
					pricing_status_code,
					source_system_code,
					header_quals_exist_flag,
					grouping_no,
					eq_flag,
					MODIFIER_LEVEL_CODE,
					other_oprt_count,
					null_other_oprt_count,
					LIST_TYPE_CODE,
					ASK_FOR_FLAG,
					HEADER_LIMIT_EXISTS,
					LINE_LIMIT_EXISTS,
                                        descendents_quals_exist
					)
			    VALUES(l_list_header_id_tbl(i),
					l_list_line_id_tbl(i),
					l_line_index_tbl(i),
					l_matched_pattrn_id_tbl(i),
					l_pricing_phase_id_tbl(i),
					l_matched_hash_key_tbl(i),
					l_stage_tbl(i),
					l_pricing_status_code_tbl(i),
					l_ssc(i),
					l_header_quals_exist_flag(i),
					l_grouping_no(i),
					l_eq_flag(i),
					l_modf_lvl_code(i),
					l_other_oprt_count(i),
					l_null_other_oprt_count(i),
					l_list_type_code(i),
					l_ask_for_flag(i),
					l_hdr_lmt_exists(i),
					l_line_lmt_exists(i),
					l_descnt_quals_exist(i));

	    --exit when l_header_cache_cur%rowcount < l_limit;
	  END LOOP;

	  CLOSE l_header_cache_cur;
	  qp_debug_util.tstop('PATRN_SELECT_MODIFIERS_HDR_CACHE_CUR');

	qp_debug_util.tstart('Populate_Temp_Tables_NEQ_BTW_P1_H',   'Populate_Temp_Tables_NEQ_BTW_P1_H');
	Populate_Temp_Tables_NEQ_BTW(
			    p_pricing_phase_id ,
			    G_STAGE_CACHE_MOD_HDR ,
			    x_status_code ,
			    x_status_text );
	IF x_status_code <> FND_API.G_RET_STS_SUCCESS THEN
		RAISE E_ROUTINE_ERRORS;
        END IF;

        qp_debug_util.tstop('Populate_Temp_Tables_NEQ_BTW_P1_H');
	qp_debug_util.tstart('QP_EVALUATE_OTHER_OPERATORS_P1_H',   'QP_EVALUATE_OTHER_OPERATORS_P1_H');

	QP_EVALUATE_OTHER_OPERATORS(
			 p_pricing_phase_id ,
			 G_STAGE_CACHE_MOD_HDR,
			    x_status_code ,
			    x_status_text );

	IF x_status_code <> FND_API.G_RET_STS_SUCCESS THEN
		RAISE E_ROUTINE_ERRORS;
        END IF;

	qp_debug_util.tstop('QP_EVALUATE_OTHER_OPERATORS_P1_H');

	IF qp_preq_grp.g_debug_engine = fnd_api.g_true THEN
		qp_preq_grp.engine_debug('Caching Line Qualifiers for satisfied headers, pure line quals, only prod and only prod-pric for phase : ' || p_pricing_phase_id);
	END IF;

       qp_debug_util.tstart('PATRN_LIST_CUR_DEL_HDR_TCA',   'Header deletion for TCA');

	UPDATE qp_preq_patrn_qual_tmp a
	SET pricing_status_code = G_DELETED_TCA
	WHERE pricing_status_code = g_status_unchanged
	 AND a.descendents_quals_exist = 'Y'
         and a.pricing_phase_id = p_pricing_phase_id
         and a.stage = G_STAGE_CACHE_MOD_HDR
	 AND EXISTS (
	    SELECT 1
	    FROM qp_qualifiers b, qp_npreq_line_attrs_tmp c
	    WHERE b.list_header_id = a.list_header_id
	      AND b.list_line_id = a.list_line_id
	      AND (b.qualifier_grouping_no = a.grouping_no
                   or
                   b.qualifier_grouping_no = -1
                  )
	      AND b.qualify_hier_descendents_flag = 'N'
	      AND c.segment_id = b.segment_id
	      AND c.line_index = a.line_index
	      AND c.derived_qualifier_flag = 'Y');

        qp_debug_util.tstop('PATRN_LIST_CUR_DEL_HDR_TCA');


  /* Line Caching*/

  qp_debug_util.tstart('PATRN_SELECT_MODIFIERS_LINE_CACHE_CUR',   'l_line_cache_cur');

  OPEN l_line_cache_cur(p_pricing_phase_id);

  LOOP
    l_list_header_id_tbl.DELETE;
    l_list_line_id_tbl.DELETE;
    l_line_index_tbl.DELETE;
    l_matched_pattrn_id_tbl.DELETE;
    l_pricing_phase_id_tbl.DELETE;
    l_stage_tbl.DELETE;
    l_matched_hash_key_tbl.DELETE;
    l_pricing_status_code_tbl.DELETE;
    l_ssc.DELETE;
    l_header_quals_exist_flag.DELETE;
    l_grouping_no.DELETE;
    l_eq_flag.DELETE;
    l_modf_lvl_code.DELETE;
    l_other_oprt_count.DELETE;
    l_null_other_oprt_count.DELETE;
    l_list_type_code.DELETE;
    l_ask_for_flag.DELETE;
    l_hdr_lmt_exists.DELETE;
    l_line_lmt_exists.DELETE;
    l_descnt_quals_exist.DELETE;
    l_PRICE_BREAK_TYPE_CODE.DELETE;

    FETCH l_line_cache_cur bulk collect
    INTO l_list_header_id_tbl,
      l_list_line_id_tbl,
      l_line_index_tbl,
      l_matched_pattrn_id_tbl,
      l_pricing_phase_id_tbl,
      l_matched_hash_key_tbl,
      l_stage_tbl,
      l_ssc,
      l_pricing_status_code_tbl,
      l_header_quals_exist_flag,
      l_grouping_no,
      l_eq_flag,
      l_modf_lvl_code,
      l_other_oprt_count,
      l_null_other_oprt_count,
      l_list_type_code,
      l_ask_for_flag,
      l_hdr_lmt_exists,
      l_line_lmt_exists,
      l_descnt_quals_exist,
      l_PRICE_BREAK_TYPE_CODE
      limit l_limit;
--    qp_preq_grp.engine_debug('l_list_header_id_tbl.count-' || l_list_header_id_tbl.COUNT);

    EXIT
  WHEN l_list_header_id_tbl.COUNT = 0;

  forall i IN 1 .. l_list_header_id_tbl.COUNT
  INSERT  INTO qp_preq_patrn_qual_tmp(list_header_id,
					list_line_id,
					line_index,
					matched_pattrn_id,
					pricing_phase_id,
					matched_hash_key,
					stage,
					pricing_status_code,
					source_system_code,
					header_quals_exist_flag,
					grouping_no,
					eq_flag,
					MODIFIER_LEVEL_CODE,
					other_oprt_count,
					null_other_oprt_count,
					LIST_TYPE_CODE,
					ASK_FOR_FLAG,
					HEADER_LIMIT_EXISTS,
					LINE_LIMIT_EXISTS,
					descendents_quals_exist,
					PRICE_BREAK_TYPE_CODE
					)
				VALUES	(l_list_header_id_tbl(i),
					l_list_line_id_tbl(i),
					l_line_index_tbl(i),
					l_matched_pattrn_id_tbl(i),
					l_pricing_phase_id_tbl(i),
					l_matched_hash_key_tbl(i),
					l_stage_tbl(i),
					l_pricing_status_code_tbl(i),
					l_ssc(i),
					l_header_quals_exist_flag(i),
					l_grouping_no(i),
					l_eq_flag(i),
					l_modf_lvl_code(i),
					l_other_oprt_count(i),
					l_null_other_oprt_count(i),
					l_list_type_code(i),
					l_ask_for_flag(i),
					l_hdr_lmt_exists(i),
					l_line_lmt_exists(i),
                                        l_descnt_quals_exist(i),
				        l_PRICE_BREAK_TYPE_CODE(i)
					);

  --exit when l_line_cache_cur%rowcount < l_limit;

END LOOP;
CLOSE l_line_cache_cur;

	qp_debug_util.tstop('PATRN_SELECT_MODIFIERS_LINE_CACHE_CUR');


	qp_debug_util.tstart('Populate_Temp_Tables_NEQ_BTW_P1_L',   'Populate_Temp_Tables_NEQ_BTW_P1_L');

	Populate_Temp_Tables_NEQ_BTW(
	    p_pricing_phase_id ,
	    G_STAGE_CACHE_MOD_LIN ,
	    x_status_code ,
	    x_status_text );

	IF x_status_code <> FND_API.G_RET_STS_SUCCESS THEN
		RAISE E_ROUTINE_ERRORS;
        END IF;

	qp_debug_util.tstop('Populate_Temp_Tables_NEQ_BTW_P1_L');

	qp_debug_util.tstart('QP_EVALUATE_OTHER_OPERATORS_P1_L',   'QP_EVALUATE_OTHER_OPERATORS_P1_L');

			QP_EVALUATE_OTHER_OPERATORS(
			 p_pricing_phase_id ,
			    G_STAGE_CACHE_MOD_LIN,
			    x_status_code ,
			    x_status_text );

	IF x_status_code <> FND_API.G_RET_STS_SUCCESS THEN
		RAISE E_ROUTINE_ERRORS;
        END IF;

	qp_debug_util.tstop('QP_EVALUATE_OTHER_OPERATORS_P1_L');

       qp_debug_util.tstart('PATRN_LIST_CUR_DEL_LIN_TCA',   'Line deletion for TCA');

	UPDATE qp_preq_patrn_qual_tmp a
	SET pricing_status_code = G_DELETED_TCA
	WHERE pricing_status_code = g_status_unchanged
	 AND a.descendents_quals_exist = 'Y'
         and a.pricing_phase_id = p_pricing_phase_id
         and a.stage = G_STAGE_CACHE_MOD_LIN
	 AND EXISTS (
	    SELECT 1
	    FROM qp_qualifiers b, qp_npreq_line_attrs_tmp c
	    WHERE b.list_header_id = a.list_header_id
	      AND b.list_line_id = a.list_line_id
	      AND (b.qualifier_grouping_no = a.grouping_no
                   or
                   b.qualifier_grouping_no = -1
                  )
	      AND b.qualify_hier_descendents_flag = 'N'
	      AND c.segment_id = b.segment_id
	      AND c.line_index = a.line_index
	      AND c.derived_qualifier_flag = 'Y');

        qp_debug_util.tstop('PATRN_LIST_CUR_DEL_LIN_TCA');

ELSE --- for the path 2
/*
qp_debug_util.tstart('PATRN_SELECT_MODIFIERS_BOTH_CACHE_CUR_PATH2',   'l_both_cache_path2_cur');

OPEN l_both_cache_path2_cur(p_pricing_phase_id);
LOOP

l_list_header_id_tbl.DELETE;
l_list_line_id_tbl.DELETE;
l_line_index_tbl.DELETE;
l_hdr_matched_pattrn_id_tbl.DELETE;
l_lin_matched_pattrn_id_tbl.DELETE;
l_pricing_phase_id_tbl.DELETE;
l_stage_tbl.DELETE;
l_hdr_matched_hash_key_tbl.DELETE;
l_lin_matched_hash_key_tbl.DELETE;
l_pricing_status_code_tbl.DELETE;
l_ssc.DELETE;
l_header_quals_exist_flag.DELETE;
l_hdr_grouping_no.DELETE;
l_lin_grouping_no.DELETE;
l_hdr_eq_flag.DELETE;
l_lin_eq_flag.DELETE;
l_modf_lvl_code.DELETE;
l_hdr_other_oprt_count.DELETE;
l_hdr_null_other_oprt_count.DELETE;
l_lin_other_oprt_count.DELETE;
l_lin_null_other_oprt_count.DELETE;
l_list_type_code.DELETE;
l_ask_for_flag.DELETE;
l_hdr_lmt_exists.DELETE;
l_line_lmt_exists.DELETE;


  FETCH l_both_cache_path2_cur bulk collect
  INTO l_list_header_id_tbl,
	l_list_line_id_tbl,
	l_line_index_tbl,
	l_hdr_matched_pattrn_id_tbl,
	l_lin_matched_pattrn_id_tbl,
	l_pricing_phase_id_tbl,
	l_stage_tbl,
	l_hdr_matched_hash_key_tbl,
	l_lin_matched_hash_key_tbl,
	l_pricing_status_code_tbl,
	l_ssc,
	l_header_quals_exist_flag,
	l_hdr_grouping_no,
	l_lin_grouping_no,
	l_hdr_eq_flag,
	l_lin_eq_flag,
	l_modf_lvl_code,
	l_hdr_other_oprt_count,
	l_hdr_null_other_oprt_count,
	l_lin_other_oprt_count,
	l_lin_null_other_oprt_count,
	l_list_type_code,
	l_ask_for_flag,
	l_hdr_lmt_exists,
	l_line_lmt_exists
    limit l_limit;

  EXIT
WHEN l_list_header_id_tbl.COUNT = 0;

FORALL i IN 1 .. l_list_header_id_tbl.COUNT
INSERT INTO qp_preq_patrn_qual_tmp(list_header_id,
					list_line_id,
					line_index,
					matched_pattrn_id,
					pricing_phase_id,
					matched_hash_key,
					stage,
					pricing_status_code,
					source_system_code,
					header_quals_exist_flag,
					grouping_no,
					eq_flag,
					MODIFIER_LEVEL_CODE,
					other_oprt_count,
					null_other_oprt_count,
					LIST_TYPE_CODE,
					ASK_FOR_FLAG,
					HEADER_LIMIT_EXISTS,
					LINE_LIMIT_EXISTS
					)
			SELECT DISTINCT l_list_header_id_tbl(i),
					l_list_line_id_tbl(i),
					l_line_index_tbl(i),
					l_lin_matched_pattrn_id_tbl(i),
					l_pricing_phase_id_tbl(i),
					l_stage_tbl(i),
					l_lin_matched_hash_key_tbl(i),
					l_pricing_status_code_tbl(i),
					l_ssc(i),
					l_header_quals_exist_flag(i),
					l_lin_grouping_no(i),
					l_lin_eq_flag(i),
					l_modf_lvl_code(i),
					l_lin_other_oprt_count(i),
					l_lin_null_other_oprt_count(i),
					l_list_type_code(i),
					l_ask_for_flag(i),
					l_hdr_lmt_exists(i),
					l_line_lmt_exists(i)
			FROM dual;

FORALL i IN 1 .. l_list_header_id_tbl.COUNT
INSERT INTO qp_preq_patrn_qual_tmp(list_header_id,
					list_line_id,
					line_index,
					matched_pattrn_id,
					pricing_phase_id,
					matched_hash_key,
					stage,
					pricing_status_code,
					source_system_code,
					header_quals_exist_flag,
					grouping_no,
					eq_flag,
					MODIFIER_LEVEL_CODE,
					other_oprt_count,
					null_other_oprt_count,
					LIST_TYPE_CODE,
					ASK_FOR_FLAG,
					HEADER_LIMIT_EXISTS,
					LINE_LIMIT_EXISTS
					)
			SELECT DISTINCT l_list_header_id_tbl(i),
					l_list_line_id_tbl(i),
					l_line_index_tbl(i),
					l_hdr_matched_pattrn_id_tbl(i),
					l_pricing_phase_id_tbl(i),
					l_stage_tbl(i),
					l_hdr_matched_hash_key_tbl(i),
					l_pricing_status_code_tbl(i),
					l_ssc(i),
					l_header_quals_exist_flag(i),
					l_hdr_grouping_no(i),
					l_hdr_eq_flag(i),
					l_modf_lvl_code(i),
					l_hdr_other_oprt_count(i),
					l_hdr_null_other_oprt_count(i),
					l_list_type_code(i),
					l_ask_for_flag(i),
					l_hdr_lmt_exists(i),
					l_line_lmt_exists(i)
			FROM dual
			WHERE l_hdr_eq_flag(i) = 'N';

--exit when l_header_cache_cur%rowcount < l_limit;
END LOOP;
CLOSE l_both_cache_path2_cur;
	qp_debug_util.tstop('PATRN_SELECT_MODIFIERS_BOTH_CACHE_CUR_PATH2');

	IF qp_preq_grp.g_debug_engine = fnd_api.g_true THEN
		qp_debug_util.print_table_data_csv('QP_PREQ_PATRN_QUAL_TMP','SEL_MOD_QUAL_AFT_LIN_CACH_P2_'||p_pricing_phase_id);
	END IF;

	qp_debug_util.tstart('Populate_Temp_Tables_NEQ_BTW_P2_L',   'Populate_Temp_Tables_NEQ_BTW_P2_L');

	Populate_Temp_Tables_NEQ_BTW(
	    p_pricing_phase_id ,
	    G_STAGE_CACHE_MOD_LIN2,
	    x_status_code ,
	    x_status_text );

	IF x_status_code <> FND_API.G_RET_STS_SUCCESS THEN
		RAISE E_ROUTINE_ERRORS;
        END IF;

	IF qp_preq_grp.g_debug_engine = fnd_api.g_true THEN
		qp_debug_util.print_table_data_csv('QP_NPREQ_LINE_ATTRS_TMP','SEL_MOD_ATTRS_AFT_LIN_POP_NEQ_BTW_P2_'||p_pricing_phase_id);
	END IF;

	qp_debug_util.tstop('Populate_Temp_Tables_NEQ_BTW_P2_L');

	qp_debug_util.tstart('QP_EVALUATE_OTHER_OPERATORS_P2_L',   'QP_EVALUATE_OTHER_OPERATORS_P2_L');

			QP_EVALUATE_OTHER_OPERATORS(
			 p_pricing_phase_id ,
			    G_STAGE_CACHE_MOD_LIN2,
			    x_status_code ,
			    x_status_text );

	IF x_status_code <> FND_API.G_RET_STS_SUCCESS THEN
		RAISE E_ROUTINE_ERRORS;
        END IF;

	qp_debug_util.tstop('QP_EVALUATE_OTHER_OPERATORS_P2_L');

	IF qp_preq_grp.g_debug_engine = fnd_api.g_true THEN
		qp_debug_util.print_table_data_csv('QP_PREQ_PATRN_QUAL_TMP','SEL_MOD_QUAL_AFT_LIN_EVL_OTH_OPR_P2_'||p_pricing_phase_id);
	END IF;

IF qp_preq_grp.g_debug_engine = fnd_api.g_true THEN
	qp_preq_grp.engine_debug('Caching Header Qualifiers for satisfied Lines, pure Header quals, only prod, only prod-pric for phase : ' || p_pricing_phase_id);
END IF;

qp_debug_util.tstart('PATRN_SELECT_MODIFIERS_DEL_HDR_PATH2',   'Line deletion');

UPDATE qp_preq_patrn_qual_tmp a
SET pricing_status_code = G_DELETED_LINE
WHERE pricing_phase_id = p_pricing_phase_id
 AND pricing_status_code = qp_preq_grp.g_status_unchanged
 AND list_line_id <> -1
 AND nvl(header_quals_exist_flag,   'N') = 'Y'
 AND NOT EXISTS
(SELECT 'x'
 FROM qp_preq_patrn_qual_tmp b
 WHERE b.list_header_id = a.list_header_id
 AND b.list_line_id = -1
 AND b.pricing_phase_id = a.pricing_phase_id
 AND b.pricing_status_code = qp_preq_grp.g_status_unchanged
 AND b.line_index = a.line_index);

qp_debug_util.tstop('PATRN_SELECT_MODIFIERS_DEL_HDR_PATH2');*/

qp_debug_util.tstart('PATRN_SELECT_MODIFIERS_LIN_CACHE_CUR_PATH2',   'l_line_cache_path2_cur');

qp_preq_grp.engine_debug('path 2 phase : ' || p_pricing_phase_id);

OPEN l_line_cache_path2_cur(p_pricing_phase_id);
LOOP

l_list_header_id_tbl.DELETE;
l_list_line_id_tbl.DELETE;
l_line_index_tbl.DELETE;
l_matched_pattrn_id_tbl.DELETE;
l_pricing_phase_id_tbl.DELETE;
l_stage_tbl.DELETE;
l_matched_hash_key_tbl.DELETE;
l_pricing_status_code_tbl.DELETE;
l_ssc.DELETE;
l_header_quals_exist_flag.DELETE;
l_grouping_no.DELETE;
l_eq_flag.DELETE;
l_modf_lvl_code.DELETE;
l_other_oprt_count.DELETE;
l_null_other_oprt_count.DELETE;
l_list_type_code.DELETE;
l_ask_for_flag.DELETE;
l_hdr_lmt_exists.DELETE;
l_line_lmt_exists.DELETE;
l_descnt_quals_exist.DELETE;
l_PRICE_BREAK_TYPE_CODE.DELETE;


  FETCH l_line_cache_path2_cur bulk collect
  INTO l_list_header_id_tbl,
    l_list_line_id_tbl,
    l_line_index_tbl,
    l_matched_pattrn_id_tbl,
    l_pricing_phase_id_tbl,
    l_matched_hash_key_tbl,
    l_stage_tbl,
    l_ssc,
    l_pricing_status_code_tbl,
    l_header_quals_exist_flag,
    l_grouping_no,
    l_eq_flag,
    l_modf_lvl_code,
    l_other_oprt_count,
    l_null_other_oprt_count,
    l_list_type_code,
    l_ask_for_flag,
    l_hdr_lmt_exists,
    l_line_lmt_exists,
    l_descnt_quals_exist,
    l_PRICE_BREAK_TYPE_CODE
    limit l_limit;

  EXIT
WHEN l_list_header_id_tbl.COUNT = 0;

FORALL i IN 1 .. l_list_header_id_tbl.COUNT
INSERT INTO qp_preq_patrn_qual_tmp(list_header_id,
					list_line_id,
					line_index,
					matched_pattrn_id,
					pricing_phase_id,
					matched_hash_key,
					stage,
					pricing_status_code,
					source_system_code,
					header_quals_exist_flag,
					grouping_no,
					eq_flag,
					MODIFIER_LEVEL_CODE,
					other_oprt_count,
					null_other_oprt_count,
					LIST_TYPE_CODE,
					ASK_FOR_FLAG,
					HEADER_LIMIT_EXISTS,
					LINE_LIMIT_EXISTS,
					descendents_quals_exist,
					PRICE_BREAK_TYPE_CODE
					)
				VALUES(l_list_header_id_tbl(i),
					l_list_line_id_tbl(i),
					l_line_index_tbl(i),
					l_matched_pattrn_id_tbl(i),
					l_pricing_phase_id_tbl(i),
					l_matched_hash_key_tbl(i),
					l_stage_tbl(i),
					l_pricing_status_code_tbl(i),
					l_ssc(i),
					l_header_quals_exist_flag(i),
					l_grouping_no(i),
					l_eq_flag(i),
					l_modf_lvl_code(i),
					l_other_oprt_count(i),
					l_null_other_oprt_count(i),
					l_list_type_code(i),
					l_ask_for_flag(i),
					l_hdr_lmt_exists(i),
					l_line_lmt_exists(i),
                                        l_descnt_quals_exist(i),
				        l_PRICE_BREAK_TYPE_CODE(i)
					);

--exit when l_header_cache_cur%rowcount < l_limit;
END LOOP;
CLOSE l_line_cache_path2_cur;
	qp_debug_util.tstop('PATRN_SELECT_MODIFIERS_LIN_CACHE_CUR_PATH2');

	qp_debug_util.tstart('Populate_Temp_Tables_NEQ_BTW_P2_L',   'Populate_Temp_Tables_NEQ_BTW_P2_L');

	Populate_Temp_Tables_NEQ_BTW(
	    p_pricing_phase_id ,
	    G_STAGE_CACHE_MOD_LIN ,
	    x_status_code ,
	    x_status_text );

	IF x_status_code <> FND_API.G_RET_STS_SUCCESS THEN
		RAISE E_ROUTINE_ERRORS;
        END IF;

	qp_debug_util.tstop('Populate_Temp_Tables_NEQ_BTW_P2_L');

	qp_debug_util.tstart('QP_EVALUATE_OTHER_OPERATORS_P2_L',   'QP_EVALUATE_OTHER_OPERATORS_P2_L');

			QP_EVALUATE_OTHER_OPERATORS(
			 p_pricing_phase_id ,
			    G_STAGE_CACHE_MOD_LIN,
			    x_status_code ,
			    x_status_text );

	IF x_status_code <> FND_API.G_RET_STS_SUCCESS THEN
		RAISE E_ROUTINE_ERRORS;
        END IF;

	qp_debug_util.tstop('QP_EVALUATE_OTHER_OPERATORS_P2_L');

IF qp_preq_grp.g_debug_engine = fnd_api.g_true THEN
	qp_preq_grp.engine_debug('Caching Header Qualifiers for satisfied Lines, pure Header quals, only prod, only prod-pric for phase : ' || p_pricing_phase_id);
END IF;

/* Line Caching*/

qp_debug_util.tstart('PATRN_SELECT_MODIFIERS_HDR_CACHE_CUR_PATH2',   'l_hdr_cache_cur_path2');

OPEN l_hdr_cache_cur_path2(p_pricing_phase_id);

LOOP

l_list_header_id_tbl.DELETE;
l_list_line_id_tbl.DELETE;
l_line_index_tbl.DELETE;
l_matched_pattrn_id_tbl.DELETE;
l_pricing_phase_id_tbl.DELETE;
l_stage_tbl.DELETE;
l_matched_hash_key_tbl.DELETE;
l_pricing_status_code_tbl.DELETE;
l_ssc.DELETE;
l_header_quals_exist_flag.DELETE;
l_grouping_no.DELETE;
l_eq_flag.DELETE;
l_modf_lvl_code.DELETE;
l_other_oprt_count.DELETE;
l_null_other_oprt_count.DELETE;
l_list_type_code.DELETE;
l_ask_for_flag.DELETE;
l_hdr_lmt_exists.DELETE;
l_line_lmt_exists.DELETE;
l_descnt_quals_exist.DELETE;

FETCH l_hdr_cache_cur_path2 bulk collect
INTO l_list_header_id_tbl,
  l_list_line_id_tbl,
  l_line_index_tbl,
  l_matched_pattrn_id_tbl,
  l_pricing_phase_id_tbl,
  l_matched_hash_key_tbl,
  l_stage_tbl,
  l_ssc,
  l_pricing_status_code_tbl,
  l_header_quals_exist_flag,
  l_grouping_no,
  l_eq_flag,
  l_modf_lvl_code,
  l_other_oprt_count,
  l_null_other_oprt_count,
  l_list_type_code,
  l_ask_for_flag,
  l_hdr_lmt_exists,
  l_line_lmt_exists,
  l_descnt_quals_exist
  limit l_limit;
--qp_preq_grp.engine_debug('l_list_header_id_tbl.count-' || l_list_header_id_tbl.COUNT);

EXIT
WHEN l_list_header_id_tbl.COUNT = 0;

FORALL i IN 1 .. l_list_header_id_tbl.COUNT
INSERT INTO qp_preq_patrn_qual_tmp(list_header_id,
					list_line_id,
					line_index,
					matched_pattrn_id,
					pricing_phase_id,
					matched_hash_key,
					stage,
					pricing_status_code,
					source_system_code,
					header_quals_exist_flag,
					grouping_no,
					eq_flag,
					MODIFIER_LEVEL_CODE,
					other_oprt_count,
					null_other_oprt_count,
					LIST_TYPE_CODE,
					ASK_FOR_FLAG,
					HEADER_LIMIT_EXISTS,
					LINE_LIMIT_EXISTS,
					descendents_quals_exist)
				VALUES(l_list_header_id_tbl(i),
					l_list_line_id_tbl(i),
					l_line_index_tbl(i),
					l_matched_pattrn_id_tbl(i),
					l_pricing_phase_id_tbl(i),
					l_matched_hash_key_tbl(i),
					l_stage_tbl(i),
					l_pricing_status_code_tbl(i),
					l_ssc(i),
					l_header_quals_exist_flag(i),
					l_grouping_no(i),
					l_eq_flag(i),
					l_modf_lvl_code(i),
					l_other_oprt_count(i),
					l_null_other_oprt_count(i),
					l_list_type_code(i),
					l_ask_for_flag(i),
					l_hdr_lmt_exists(i),
					l_line_lmt_exists(i),
					l_descnt_quals_exist(i));

--exit when l_line_cache_cur%rowcount < l_limit;

END LOOP;
CLOSE l_hdr_cache_cur_path2;

	qp_debug_util.tstop('PATRN_SELECT_MODIFIERS_HDR_CACHE_CUR_PATH2');

	qp_debug_util.tstart('Populate_Temp_Tables_NEQ_BTW_P2_H',   'Populate_Temp_Tables_NEQ_BTW_P2_H');

		Populate_Temp_Tables_NEQ_BTW(
		    p_pricing_phase_id ,
		    G_STAGE_CACHE_MOD_HDR ,
		    x_status_code ,
		    x_status_text );

		IF x_status_code <> FND_API.G_RET_STS_SUCCESS THEN
			RAISE E_ROUTINE_ERRORS;
		END IF;


	qp_debug_util.tstop('Populate_Temp_Tables_NEQ_BTW_P2_H');

	qp_debug_util.tstart('QP_EVALUATE_OTHER_OPERATORS_P2_H',   'QP_EVALUATE_OTHER_OPERATORS_P2_H');

			QP_EVALUATE_OTHER_OPERATORS(
			 p_pricing_phase_id ,
			    G_STAGE_CACHE_MOD_HDR,
			    x_status_code ,
			    x_status_text );
			IF x_status_code <> FND_API.G_RET_STS_SUCCESS THEN
				RAISE E_ROUTINE_ERRORS;
			END IF;

	qp_debug_util.tstop('QP_EVALUATE_OTHER_OPERATORS_P2_H');

       qp_debug_util.tstart('PATRN_LIST_CUR_DEL_LIN_TCA',   'Line/Header deletion for TCA');

	UPDATE qp_preq_patrn_qual_tmp a
	SET pricing_status_code = G_DELETED_TCA
	WHERE pricing_status_code = g_status_unchanged
	 AND a.descendents_quals_exist = 'Y'
         and a.pricing_phase_id = p_pricing_phase_id
         and a.stage IN (G_STAGE_CACHE_MOD_HDR,G_STAGE_CACHE_MOD_LIN)
	 AND EXISTS (
	    SELECT 1
	    FROM qp_qualifiers b, qp_npreq_line_attrs_tmp c
	    WHERE b.list_header_id = a.list_header_id
	      AND b.list_line_id = a.list_line_id
	      AND (b.qualifier_grouping_no = a.grouping_no
                   or
                   b.qualifier_grouping_no = -1
                  )
	      AND b.qualify_hier_descendents_flag = 'N'
	      AND c.segment_id = b.segment_id
	      AND c.line_index = a.line_index
	      AND c.derived_qualifier_flag = 'Y');



        qp_debug_util.tstop('PATRN_LIST_CUR_DEL_LIN_TCA');

	qp_debug_util.tstart('PATRN_SELECT_MODIFIERS_DEL_HDR_PATH2',   'Line deletion');

UPDATE qp_preq_patrn_qual_tmp a
SET pricing_status_code = G_DELETED_LINE
WHERE pricing_phase_id = p_pricing_phase_id
 AND pricing_status_code = qp_preq_grp.g_status_unchanged
 AND list_line_id <> -1
 AND nvl(header_quals_exist_flag,   'N') = 'Y'
 AND a.stage = G_STAGE_CACHE_MOD_LIN
 AND NOT EXISTS
(SELECT 'x'
 FROM qp_preq_patrn_qual_tmp b
 WHERE b.list_header_id = a.list_header_id
 AND b.list_line_id = -1
 AND b.line_index = a.line_index
 AND b.pricing_phase_id = a.pricing_phase_id
 AND pricing_status_code = qp_preq_grp.g_status_unchanged
 AND b.stage = G_STAGE_CACHE_MOD_HDR);

qp_debug_util.tstop('PATRN_SELECT_MODIFIERS_DEL_HDR_PATH2');

END IF;


qp_debug_util.tstart('PATRN_SELECT_MODIFIERS_UPD_EXCLUDER',   'Delete Excluder rows');

-- Delete Excluded Line Details Directly if the inner select returns an excluded row

UPDATE qp_preq_patrn_qual_tmp a
SET pricing_status_code = G_DELETED_EXCLUDER
WHERE pricing_phase_id = p_pricing_phase_id
 AND pricing_status_code = qp_preq_grp.g_status_unchanged
 AND EXISTS
(SELECT
 /*+ ORDERED USE_NL(c) index(c qp_preq_line_attrs_tmp_N2) index(b QP_PRICING_ATTRIBUTES_N2) l_excl_cur */ 'x'
 FROM qp_pricing_attributes b,
   qp_npreq_line_attrs_tmp c
 WHERE b.list_line_id = a.list_line_id
 AND b.excluder_flag = qp_preq_grp.g_yes
 AND b.product_attribute_context = c.context
 AND b.product_attribute = c.attribute
 AND b.product_attr_value = c.value_from
 AND c.attribute_type = qp_preq_grp.g_product_type
 AND c.pricing_status_code = qp_preq_grp.g_status_unchanged
 AND c.line_index = a.line_index);

qp_debug_util.tstop('PATRN_SELECT_MODIFIERS_UPD_EXCLUDER');

qp_debug_util.tstart('PATRN_SELECT_MODIFIERS_POPULATE_PAT_TEMP_TABLES',   'Populate_Pat_Temp_Tables');

/*IF l_search_path = 1 THEN

	Populate_Pat_Temp_Tables(p_pricing_phase_id,
	                         G_STAGE_CACHE_MOD_LIN,
				x_status_code,
				x_status_text);
ELSE */
	/*Populate_Pat_Temp_Tables(p_pricing_phase_id,
	                         G_STAGE_CACHE_MOD_LIN,
				x_status_code,
				x_status_text);*/

Populate_Pat_Temp_Tables(p_pricing_phase_id,
	                         G_STAGE_CACHE_MOD_LIN,
				x_status_code,
				x_status_text);

--END IF;
	IF x_status_code <> FND_API.G_RET_STS_SUCCESS THEN
		RAISE E_ROUTINE_ERRORS;
        END IF;

qp_debug_util.tstop('PATRN_SELECT_MODIFIERS_POPULATE_PAT_TEMP_TABLES');


	IF qp_preq_grp.g_debug_engine = fnd_api.g_true THEN
		qp_preq_grp.engine_debug('x_status_code-' || x_status_code);
		qp_preq_grp.engine_debug('x_status_text-' || x_status_text);
	END IF;

EXCEPTION
 WHEN E_ROUTINE_ERRORS THEN

     x_status_code := FND_API.G_RET_STS_ERROR;
     x_status_text := 'Expected Error in ' || l_routine || sqlerrm;

     IF qp_preq_grp.g_debug_engine = fnd_api.g_true THEN
	qp_preq_grp.engine_debug(x_status_text);
     END IF;

     IF l_header_cache_cur%ISOPEN THEN
     CLOSE l_header_cache_cur;
     END IF;

     IF l_line_cache_cur%ISOPEN THEN
     CLOSE l_line_cache_cur;
     END IF;

     IF l_line_cache_path2_cur%ISOPEN THEN
     CLOSE l_line_cache_path2_cur;
     END IF;

     IF l_hdr_cache_cur_path2%ISOPEN THEN
     CLOSE l_hdr_cache_cur_path2;
     END IF;

   /*  IF l_both_cache_path2_cur%ISOPEN THEN
     CLOSE l_both_cache_path2_cur;
     END IF;*/

WHEN OTHERS THEN

	IF qp_preq_grp.g_debug_engine = fnd_api.g_true THEN
		qp_preq_grp.engine_debug(l_routine || ' ' || sqlerrm);
	END IF;

     IF l_header_cache_cur%ISOPEN THEN
     CLOSE l_header_cache_cur;
     END IF;

     IF l_line_cache_cur%ISOPEN THEN
     CLOSE l_line_cache_cur;
     END IF;

     IF l_line_cache_path2_cur%ISOPEN THEN
     CLOSE l_line_cache_path2_cur;
     END IF;

     IF l_hdr_cache_cur_path2%ISOPEN THEN
     CLOSE l_hdr_cache_cur_path2;
     END IF;

     /*IF l_both_cache_path2_cur%ISOPEN THEN
     CLOSE l_both_cache_path2_cur;
     END IF;*/
x_status_code := fnd_api.g_ret_sts_error;
x_status_text := 'Error in ' || l_routine || sqlerrm;

END Select_modifiers_patrn;


PROCEDURE QP_EVALUATE_OTHER_OPERATORS
				(p_pricing_phase_id varchar2,
				p_stage varchar2,
				x_status_code OUT nocopy VARCHAR2,
				x_status_text OUT nocopy VARCHAR2) as

BEGIN
	IF qp_preq_grp.g_debug_engine = fnd_api.g_true THEN
		qp_preq_grp.engine_debug('Entering QP_EVALUATE_OTHER_OPERATORS');
	END IF;

UPDATE /*+ index(a qp_preq_patrn_qual_t_n3) */
	QP_PREQ_PATRN_QUAL_TMP a
        SET pricing_status_code = G_DEL_ATTR_NOT_SRCD_CMN_GRP
        WHERE pricing_status_code = QP_PREQ_GRP.G_STATUS_UNCHANGED
	  AND eq_flag = 'N'
	  AND stage = p_stage
	  AND pricing_phase_id = p_pricing_phase_id
	  AND null_other_oprt_count <> 0
	  AND NOT EXISTS(
                 SELECT /*+ index(b qp_preq_line_attrs_tmp_n10) */ 1
                 FROM qp_npreq_line_attrs_tmp b
                 WHERE b.line_index = a.line_index
                   AND b.list_header_id = a.list_header_id
		   AND b.list_line_id = a.list_line_id
		   AND b.grouping_number = -1
                   AND b.comparison_operator_type_code IN (G_OPERATOR_NOT_EQL,G_OPERATOR_BETWEEN)
		   AND b.attribute_type IN (QP_PREQ_GRP.G_PRICING_TYPE,QP_PREQ_GRP.G_QUALIFIER_TYPE)
		   AND b.pricing_status_code = p_stage
		   AND b.pricing_phase_id = p_pricing_phase_id
		   AND b.line_index > 0
                 GROUP BY b.line_index,b.list_header_id,b.list_line_id
                 HAVING COUNT(DISTINCT b.CONTEXT||b.ATTRIBUTE||b.SETUP_VALUE_FROM) = a.null_other_oprt_count);


        UPDATE /*+ index(a qp_preq_patrn_qual_t_n3) */
	QP_PREQ_PATRN_QUAL_TMP a
        SET pricing_status_code = G_DEL_ATTR_NOT_SRCD_GRP
        WHERE pricing_status_code = QP_PREQ_GRP.G_STATUS_UNCHANGED
	  AND eq_flag = 'N'
	  AND stage = p_stage
	  AND pricing_phase_id = p_pricing_phase_id
	  AND grouping_no <> -1
	  AND other_oprt_count > 0
	  AND NOT EXISTS(
                 SELECT /*+ index(b qp_preq_line_attrs_tmp_n10) */ 1
                 FROM qp_npreq_line_attrs_tmp b
                 WHERE b.line_index = a.line_index
                   AND b.list_header_id = a.list_header_id
		   AND b.list_line_id = a.list_line_id
		   AND b.grouping_number = a.grouping_no
		   AND b.grouping_number <> -1
                   AND b.comparison_operator_type_code IN (G_OPERATOR_NOT_EQL,G_OPERATOR_BETWEEN)
		   AND b.attribute_type IN (QP_PREQ_GRP.G_QUALIFIER_TYPE)
		   AND b.pricing_status_code = p_stage
		   AND b.pricing_phase_id = p_pricing_phase_id
		   AND b.line_index > 0
                 GROUP BY b.line_index,b.list_header_id,b.list_line_id, b.grouping_number
                 HAVING COUNT(DISTINCT b.CONTEXT||b.ATTRIBUTE||b.SETUP_VALUE_FROM) = a.other_oprt_count);


	UPDATE QP_PREQ_PATRN_QUAL_TMP
	SET pricing_status_code = G_DEL_OTHR_OPR_CMN_GRP
	WHERE pricing_status_code = QP_PREQ_GRP.G_STATUS_UNCHANGED
        AND stage = p_stage
	AND (line_index , list_header_id , list_line_id)  IN
		(SELECT distinct a.line_index , a.list_header_id , a.list_line_id
		FROM   qp_npreq_line_attrs_tmp a
		WHERE  a.comparison_operator_type_code = G_OPERATOR_NOT_EQL
			AND    a.attribute_type IN (QP_PREQ_GRP.G_PRICING_TYPE,QP_PREQ_GRP.G_QUALIFIER_TYPE)
			AND    a.pricing_status_code = p_stage
			AND    a.pricing_phase_id = p_pricing_phase_id
			AND    a.line_index > 0
			AND    a.grouping_number = -1
			AND    NVL(a.setup_value_from,FND_API.G_MISS_CHAR) = a.value_from
		UNION ALL
		SELECT distinct a.line_index , a.list_header_id , a.list_line_id
		FROM   qp_npreq_line_attrs_tmp a
		WHERE  a.comparison_operator_type_code = G_OPERATOR_BETWEEN
			AND    a.attribute_type IN (QP_PREQ_GRP.G_PRICING_TYPE,QP_PREQ_GRP.G_QUALIFIER_TYPE)
			AND    a.pricing_status_code = p_stage
			AND    a.pricing_phase_id = p_pricing_phase_id
			AND    a.line_index > 0
			AND    datatype in (QP_PREQ_GRP.G_DATE_X,QP_PREQ_GRP.G_DATE_Y,QP_PREQ_GRP.G_VARCHAR)
			--AND    a.MODIFIER_LEVEL_CODE <> G_LINE_GROUP
			AND    a.value_from NOT BETWEEN nvl(a.setup_value_from,a.value_from) and nvl(a.setup_value_to,a.value_from)
			AND    a.grouping_number = -1
		UNION ALL
		SELECT distinct a.line_index , a.list_header_id , a.list_line_id
		FROM   qp_npreq_line_attrs_tmp a
		WHERE  a.comparison_operator_type_code = G_OPERATOR_BETWEEN
			AND    a.attribute_type IN (QP_PREQ_GRP.G_PRICING_TYPE,QP_PREQ_GRP.G_QUALIFIER_TYPE)
			AND    a.pricing_status_code = p_stage
			AND    a.pricing_phase_id = p_pricing_phase_id
			AND    a.line_index > 0
			AND   datatype = QP_PREQ_GRP.G_NUMERIC
			--AND    a.MODIFIER_LEVEL_CODE <> G_LINE_GROUP
			AND NOT (NVL(a.MODIFIER_LEVEL_CODE,FND_API.G_MISS_CHAR) = G_LINE_GROUP
                              AND a.CONTEXT = G_PRIC_VOLUME_CONTEXT
                              AND a.attribute in (G_QUANTITY_ATTRIBUTE,G_LINE_AMT_ATTRIBUTE))
			AND   fnd_number.canonical_to_number(DECODE(datatype,QP_PREQ_GRP.G_NUMERIC,a.value_from,null))
				  NOT BETWEEN nvl(fnd_number.canonical_to_number(a.setup_value_from),fnd_number.canonical_to_number(a.value_from))
				  AND nvl(fnd_number.canonical_to_number(a.setup_value_to),fnd_number.canonical_to_number(a.value_from))
			AND    a.grouping_number = -1);

	UPDATE QP_PREQ_PATRN_QUAL_TMP
	SET pricing_status_code = G_DEL_OTHR_OPR_GRP
	WHERE pricing_status_code = QP_PREQ_GRP.G_STATUS_UNCHANGED
        AND stage = p_stage
	AND (line_index , list_header_id , list_line_id, grouping_no)  IN
		(SELECT distinct a.line_index , a.list_header_id , a.list_line_id ,a.grouping_number grouping_no
		FROM   qp_npreq_line_attrs_tmp a
		WHERE  a.comparison_operator_type_code = G_OPERATOR_NOT_EQL
			AND    a.attribute_type = QP_PREQ_GRP.G_QUALIFIER_TYPE
			AND    a.pricing_status_code = p_stage
			AND    a.pricing_phase_id = p_pricing_phase_id
			AND    a.line_index > 0
			AND    a.grouping_number <> -1
			AND   NVL(a.setup_value_from,FND_API.G_MISS_CHAR) = a.value_from
		UNION ALL
		SELECT distinct a.line_index , a.list_header_id , a.list_line_id ,a.grouping_number grouping_no
		FROM   qp_npreq_line_attrs_tmp a
		WHERE  a.comparison_operator_type_code = G_OPERATOR_BETWEEN
			AND    a.attribute_type = QP_PREQ_GRP.G_QUALIFIER_TYPE
			AND    a.pricing_status_code = p_stage
			AND    a.pricing_phase_id = p_pricing_phase_id
			AND    a.line_index > 0
			AND    datatype in (QP_PREQ_GRP.G_DATE_X,QP_PREQ_GRP.G_DATE_Y,QP_PREQ_GRP.G_VARCHAR)
			--AND    a.MODIFIER_LEVEL_CODE <> G_LINE_GROUP
			AND    a.value_from NOT BETWEEN nvl(a.setup_value_from,a.value_from) and nvl(a.setup_value_to,a.value_from)
			AND    a.grouping_number <> -1
		UNION ALL
		SELECT distinct a.line_index , a.list_header_id , a.list_line_id  ,a.grouping_number grouping_no
		FROM   qp_npreq_line_attrs_tmp a
		WHERE  a.comparison_operator_type_code = G_OPERATOR_BETWEEN
			AND    a.attribute_type = QP_PREQ_GRP.G_QUALIFIER_TYPE
			AND    a.pricing_status_code = p_stage
			AND    a.pricing_phase_id = p_pricing_phase_id
			AND    a.line_index > 0
			AND   datatype = QP_PREQ_GRP.G_NUMERIC
			--AND    a.MODIFIER_LEVEL_CODE <> G_LINE_GROUP
			AND NOT (NVL(a.MODIFIER_LEVEL_CODE,FND_API.G_MISS_CHAR) = G_LINE_GROUP
                              AND a.CONTEXT = G_PRIC_VOLUME_CONTEXT
                              AND a.attribute in (G_QUANTITY_ATTRIBUTE,G_LINE_AMT_ATTRIBUTE))
			AND   fnd_number.canonical_to_number(DECODE(datatype,QP_PREQ_GRP.G_NUMERIC,a.value_from,null))
				  NOT BETWEEN nvl(fnd_number.canonical_to_number(a.setup_value_from),fnd_number.canonical_to_number(a.value_from))
				  AND nvl(fnd_number.canonical_to_number(a.setup_value_to),fnd_number.canonical_to_number(a.value_from))
			AND    a.grouping_number <> -1);


	IF qp_preq_grp.g_debug_engine = fnd_api.g_true THEN
		qp_preq_grp.engine_debug('Number of rows deleted during NOT = and B/W operator evaluation for the non -1 groups-'||sql%rowcount);
	END IF;

EXCEPTION

WHEN OTHERS THEN
  x_status_code := FND_API.G_RET_STS_ERROR;
  x_status_text :='QP_EVALUATE_OTHER_OPERATORS '||SQLERRM;
	  IF (qp_preq_grp.G_DEBUG_ENGINE = FND_API.G_TRUE) THEN
	   qp_preq_grp.engine_debug('QP_EVALUATE_OTHER_OPERATORS '||SQLERRM);
	  END IF;
END QP_EVALUATE_OTHER_OPERATORS;



PROCEDURE Populate_Pat_Temp_Tables(
    p_pricing_phase_id     IN  NUMBER,
    p_stage                IN VARCHAR2,
    x_status_code          OUT NOCOPY VARCHAR2,
    x_status_text          OUT NOCOPY VARCHAR2)
AS

l_satis_quals_opt	VARCHAR2(1);
l_routine VARCHAR2(240):='Routine : QP_PREQ_GRP.Populate_Pat_Temp_Tables';
l_limit NUMBER := 5000;

l_count NUMBER := 0;

l_start_line_index NUMBER;
l_end_line_index NUMBER;

l_cnt_iter NUMBER;

--G_CHUNK_SIZE
BEGIN

  IF qp_preq_grp.G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     qp_preq_grp.engine_debug('Entering ' || l_routine);
     qp_preq_grp.engine_debug('p_pricing_phase_id => '||p_pricing_phase_id);
  END IF;

  l_cnt_iter := ((G_MAX_LINE_INDEX-G_MIN_LINE_INDEX)/G_CHUNK_SIZE)+1;

  x_status_code := FND_API.G_RET_STS_SUCCESS;

   /*
     Populating table qp_npreq_ldets_tmp with details of all selected modifier
     lines after Pattern matching.
   */

  l_start_line_index := G_MIN_LINE_INDEX;
  l_end_line_index := G_MIN_LINE_INDEX+G_CHUNK_SIZE;

  qp_debug_util.tstart('POPULATE_PAT_TEMP_TABLES_QR1','Populate_Pat_Temp_Tables inserting LDETS');

  FOR i IN 1..l_cnt_iter
  LOOP

  INSERT INTO qp_npreq_ldets_tmp
                (LINE_DETAIL_INDEX,
                 LINE_DETAIL_TYPE_CODE,
                 PRICE_BREAK_TYPE_CODE,
                 LINE_INDEX,
                 CREATED_FROM_LIST_HEADER_ID,
                 CREATED_FROM_LIST_LINE_ID,
                 CREATED_FROM_LIST_LINE_TYPE,
                 CREATED_FROM_LIST_TYPE_CODE,
                 CREATED_FROM_SQL,
                 PRICING_GROUP_SEQUENCE,
                 PRICING_PHASE_ID,
                 OPERAND_CALCULATION_CODE,
                 OPERAND_VALUE,
                 NET_AMOUNT_FLAG,
                 ASK_FOR_FLAG,
                 PRICE_FORMULA_ID,
                 PRICING_STATUS_CODE,
                 PRICING_STATUS_TEXT,
                 PRODUCT_PRECEDENCE,
                 INCOMPATABILITY_GRP_CODE,
                 PROCESSED_FLAG,
                 APPLIED_FLAG,
                 AUTOMATIC_FLAG,
                 OVERRIDE_FLAG,
                 PRIMARY_UOM_FLAG,
                 MODIFIER_LEVEL_CODE,
                 BENEFIT_QTY,
                 BENEFIT_UOM_CODE,
                 LIST_LINE_NO,
                 ACCRUAL_FLAG,
                 ACCRUAL_CONVERSION_RATE,
                 ESTIM_ACCRUAL_RATE,
                 HEADER_LIMIT_EXISTS,
                 LINE_LIMIT_EXISTS,
		 PROCESS_CODE,
                 CHARGE_TYPE_CODE,
                 CHARGE_SUBTYPE_CODE,
                 ACCUM_CONTEXT,
                 ACCUM_ATTRIBUTE,
                 ACCUM_ATTR_RUN_SRC_FLAG,
                 CURRENCY_DETAIL_ID,
		 CURRENCY_HEADER_ID,
		 SELLING_ROUNDING_FACTOR,
                 ORDER_CURRENCY,
		 BASE_CURRENCY_CODE,
		 BREAK_UOM_CODE,
                 BREAK_UOM_CONTEXT,
		 BREAK_UOM_ATTRIBUTE,
		 PRICING_EFFECTIVE_DATE
	)
	SELECT
	   QP_PREQ_GRP.GET_LINE_DETAIL_INDEX, --LINE_DETAIL_INDEX
	   'NULL', --LINE_DETAIL_TYPE_CODE
	   qplines.PRICE_BREAK_TYPE_CODE, -- PRICE_BREAK_TYPE_CODE
           qpatq.line_index, -- LINE_INDEX
           qpatq.list_header_id, -- CREATED_FROM_LIST_HEADER_ID
           qpatq.list_line_id, -- CREATED_FROM_LIST_LINE_ID
           qplines.list_line_type_code, -- CREATED_FROM_LIST_LINE_TYPE
           qpatq.list_type_code, -- CREATED_FROM_LIST_TYPE_CODE
           p_stage, -- CREATED_FROM_SQL
	   --'CREATED_FROM_PATTERN', -- CREATED_FROM_SQL --Check it
           qplines.pricing_group_sequence, -- PRICING_GROUP_SEQUENCE
           p_pricing_phase_id, -- PRICING_PHASE_ID
           qplines.arithmetic_operator, -- OPERAND_CALCULATION_CODE
           qplines.operand, -- OPERAND_VALUE
           qplines.net_amount_flag, -- NET_AMOUNT_FLAG
           qpatq.ask_for_flag, -- ASK_FOR_FLAG
           qplines.price_by_formula_id, -- PRICE_FORMULA_ID
           G_STATUS_NEW,--qpatq.PRICING_STATUS_CODE, -- PRICING_STATUS_CODE
           qpatq.PRICING_STATUS_TEXT, -- PRICING_STATUS_TEXT
           qplines.product_precedence, -- PRODUCT_PRECEDENCE
           qplines.incompatibility_grp_code, -- INCOMPATABILITY_GRP_CODE
           QP_PREQ_GRP.G_NOT_PROCESSED, -- PROCESSED_FLAG
           qplines.automatic_flag, -- APPLIED_FLAG
           qplines.automatic_flag, -- AUTOMATIC_FLAG
           qplines.override_flag, -- OVERRIDE_FLAG
           qplines.primary_uom_flag, -- PRIMARY_UOM_FLAG
           qplines.modifier_level_code, -- MODIFIER_LEVEL_CODE
           qplines.benefit_qty, -- BENEFIT_QTY
           qplines.benefit_uom_code, -- BENEFIT_UOM_CODE
           qplines.list_line_no, -- LIST_LINE_NO
           qplines.accrual_flag, -- ACCRUAL_FLAG
           qplines.accrual_conversion_rate, -- ACCRUAL_CONVERSION_RATE
           qplines.estim_accrual_rate, -- ESTIM_ACCRUAL_RATE
           --decode(qph.limit_exists_flag,'Y','Y',decode(qplines.limit_exists_flag,'Y','Y','N')), -- HEADER_LIMIT_EXISTS
	   qpatq.HEADER_LIMIT_EXISTS, -- HEADER_LIMIT_EXISTS
           qplines.limit_exists_flag, -- LINE_LIMIT_EXISTS
	   QP_PREQ_GRP.G_STATUS_NEW, -- PROCESS_CODE
           qplines.charge_type_code, -- CHARGE_TYPE_CODE
           qplines.charge_subtype_code, -- CHARGE_SUBTYPE_CODE
           qplines.accum_context, -- ACCUM_CONTEXT
           qplines.accum_attribute, -- ACCUM_ATTRIBUTE
           qplines.accum_attr_run_src_flag, -- ACCUM_ATTR_RUN_SRC_FLAG
           qpatq.CURRENCY_DETAIL_ID,
    	   qpatq.CURRENCY_HEADER_ID,
	   qpatq.SELLING_ROUNDING_FACTOR,
           qpatq.ORDER_CURRENCY,
	   qpatq.BASE_CURRENCY_CODE,
	   qpatq.BREAK_UOM_CODE,
           qpatq.BREAK_UOM_CONTEXT,
	   qpatq.BREAK_UOM_ATTRIBUTE,
	   qpatq.PRICING_EFFECTIVE_DATE
	FROM
	     (
	       SELECT DISTINCT pricing_phase_id, line_index, list_header_id,
	          list_line_id, pricing_status_code, PRICING_STATUS_TEXT,
		  list_type_code, ask_for_flag, HEADER_LIMIT_EXISTS,
                  CURRENCY_DETAIL_ID, CURRENCY_HEADER_ID, SELLING_ROUNDING_FACTOR,
                  ORDER_CURRENCY, BASE_CURRENCY_CODE, BREAK_UOM_CODE,
                  BREAK_UOM_CONTEXT, BREAK_UOM_ATTRIBUTE, PRICING_EFFECTIVE_DATE
	       FROM QP_PREQ_PATRN_QUAL_TMP
	       WHERE stage = p_stage
	        AND pricing_phase_id = p_pricing_phase_id
		AND list_line_id <> -1
		AND pricing_status_code = G_STATUS_UNCHANGED
		AND line_index BETWEEN l_start_line_index AND l_end_line_index
             )qpatq,
	     QP_LIST_LINES qplines
        WHERE  qplines.list_line_id = qpatq.list_line_id;

     l_start_line_index := l_end_line_index + 1;
     l_end_line_index := l_end_line_index + G_CHUNK_SIZE;

  END LOOP;

   qp_debug_util.tstop('POPULATE_PAT_TEMP_TABLES_QR1');


   IF qp_preq_grp.G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     qp_preq_grp.engine_debug('Successfully inserted data in table qp_npreq_ldets_tmp');
   END IF;

   qp_debug_util.tstart('POPULATE_PAT_TEMP_TABLES_QR3','Populate_Pat_Temp_Tables Inserting line attrs temp');

   /*
     Populating table qp_npreq_line_attrs_tmp with details of Pricing and Product
     Attributes for selected modifier lines.
   */

  l_start_line_index := G_MIN_LINE_INDEX;
  l_end_line_index := G_MIN_LINE_INDEX+G_CHUNK_SIZE;

  FOR i IN 1..l_cnt_iter
  LOOP

  INSERT INTO qp_npreq_line_attrs_tmp(
                 LINE_INDEX,
                 LINE_DETAIL_INDEX,
                 ATTRIBUTE_LEVEL,
                 ATTRIBUTE_TYPE,
                 LIST_HEADER_ID,
                 LIST_LINE_ID,
                 CONTEXT,
                 ATTRIBUTE,
                 VALUE_FROM,
                 SETUP_VALUE_FROM,
                 VALUE_TO,
                 SETUP_VALUE_TO,
                 GROUPING_NUMBER,
                 COMPARISON_OPERATOR_TYPE_CODE,
                 VALIDATED_FLAG,
                 APPLIED_FLAG,
                 PRICING_STATUS_CODE,
                 PRICING_STATUS_TEXT,
                 QUALIFIER_PRECEDENCE,
                 DATATYPE,
                 PRICING_ATTR_FLAG,
                 QUALIFIER_TYPE,
                 PRODUCT_UOM_CODE,
                 EXCLUDER_FLAG,
                 PRICING_PHASE_ID,
                 INCOMPATABILITY_GRP_CODE,
                 LINE_DETAIL_TYPE_CODE,
                 MODIFIER_LEVEL_CODE,
                 PRIMARY_UOM_FLAG,
		 --SEGMENT_ID,
		 derived_qualifier_flag
                )
     -- Product Attributes
     SELECT /*+ ORDERED index(qplaptr qp_preq_line_attrs_tmp_n8) */
        qpldets.LINE_INDEX, --LINE_INDEX
        qpldets.LINE_DETAIL_INDEX, --LINE_DETAIL_INDEX
        qplaptr.ATTRIBUTE_LEVEL, --ATTRIBUTE_LEVEL
        qplaptr.ATTRIBUTE_TYPE, --ATTRIBUTE_TYPE
        qpldets.CREATED_FROM_LIST_HEADER_ID, --LIST_HEADER_ID
        qpldets.CREATED_FROM_LIST_LINE_ID , --LIST_LINE_ID
        qppatr.PRODUCT_ATTRIBUTE_CONTEXT, --CONTEXT
        qppatr.PRODUCT_ATTRIBUTE, --ATTRIBUTE
        qplaptr.VALUE_FROM, --VALUE_FROM
        qppatr.PRODUCT_ATTR_VALUE,--SETUP_VALUE_FROM
        NULL,--VALUE_TO
        NULL,--SETUP_VALUE_TO
        NULL,--GROUPING_NUMBER
        qppatr.COMPARISON_OPERATOR_CODE,--COMPARISON_OPERATOR_TYPE_CODE
        qplaptr.VALIDATED_FLAG,--VALIDATED_FLAG
        qplaptr.APPLIED_FLAG,--APPLIED_FLAG
        G_STATUS_NEW,--qp_preq_grp.G_STATUS_UNCHANGED,--PRICING_STATUS_CODE --Check this attribute
        'Product Attribute',--PRICING_STATUS_TEXT --Check this attribute
        NULL,--QUALIFIER_PRECEDENCE
        qppatr.PRODUCT_ATTRIBUTE_DATATYPE,--DATATYPE
        qplaptr.PRICING_ATTR_FLAG,--PRICING_ATTR_FLAG
        'NO',--QUALIFIER_TYPE
        qppatr.PRODUCT_UOM_CODE, --PRODUCT_UOM_CODE
        qppatr.excluder_flag, --EXCLUDER_FLAG
        qpldets.pricing_phase_id, --PRICING_PHASE_ID
        qpldets.INCOMPATABILITY_GRP_CODE, --INCOMPATABILITY_GRP_CODE
        'NULL', --LINE_DETAIL_TYPE_CODE
        qpldets.MODIFIER_LEVEL_CODE, --MODIFIER_LEVEL_CODE
        qpldets.PRIMARY_UOM_FLAG, --PRIMARY_UOM_FLAG
        --qppatr.PRODUCT_SEGMENT_ID, --SEGMENT_ID
	qplaptr.derived_qualifier_flag
     FROM qp_npreq_ldets_tmp qpldets,
          QP_PRICING_ATTRIBUTES qppatr,
	  qp_npreq_line_attrs_tmp qplaptr
     WHERE qpldets.pricing_phase_id = p_pricing_phase_id
       AND qpldets.line_index BETWEEN l_start_line_index AND l_end_line_index
       AND qpldets.CREATED_FROM_SQL = p_stage
       AND qppatr.list_line_id = qpldets.CREATED_FROM_LIST_LINE_ID
       AND qppatr.list_header_id = qpldets.CREATED_FROM_LIST_HEADER_ID --Could be removed
       AND qppatr.excluder_flag = 'N'
       AND qppatr.product_attribute_context is not null
       AND (qppatr.pricing_attribute_context = G_PRIC_VOLUME_CONTEXT or
               qppatr.pricing_attribute_context is null)
       AND qplaptr.LINE_INDEX = qpldets.LINE_INDEX
       AND qplaptr.segment_id = qppatr.PRODUCT_SEGMENT_ID
       AND qplaptr.attribute_type=G_PRODUCT_TYPE
   UNION
     -- Pricing Attributes
     SELECT /*+ ORDERED index(qplaptr qp_preq_line_attrs_tmp_n8) */
        qpldets.LINE_INDEX, --LINE_INDEX
        qpldets.LINE_DETAIL_INDEX, --LINE_DETAIL_INDEX
        qplaptr.ATTRIBUTE_LEVEL, --ATTRIBUTE_LEVEL
        qplaptr.ATTRIBUTE_TYPE, --ATTRIBUTE_TYPE
        qpldets.CREATED_FROM_LIST_HEADER_ID, --LIST_HEADER_ID
        qpldets.CREATED_FROM_LIST_LINE_ID, --LIST_LINE_ID
        qppatr.PRICING_ATTRIBUTE_CONTEXT, --CONTEXT
        qppatr.PRICING_ATTRIBUTE, --ATTRIBUTE
        qplaptr.VALUE_FROM, --VALUE_FROM
        qppatr.PRICING_ATTR_VALUE_FROM,--SETUP_VALUE_FROM
        qplaptr.VALUE_TO,--VALUE_TO
        qppatr.PRICING_ATTR_VALUE_TO,--SETUP_VALUE_TO
        NULL,--GROUPING_NUMBER
        qppatr.COMPARISON_OPERATOR_CODE,--COMPARISON_OPERATOR_TYPE_CODE
        qplaptr.VALIDATED_FLAG,--VALIDATED_FLAG
        qplaptr.APPLIED_FLAG,--APPLIED_FLAG
        G_STATUS_NEW,--QP_PREQ_GRP.G_STATUS_UNCHANGED,--PRICING_STATUS_CODE --Check this attribute
        'Pricing Attribute',--PRICING_STATUS_TEXT --Check this attribute
        NULL,--QUALIFIER_PRECEDENCE
        qppatr.PRICING_ATTRIBUTE_DATATYPE,--DATATYPE
        qplaptr.PRICING_ATTR_FLAG,--PRICING_ATTR_FLAG
        'NO',--QUALIFIER_TYPE
        qppatr.PRODUCT_UOM_CODE, --PRODUCT_UOM_CODE
        qppatr.excluder_flag, --EXCLUDER_FLAG
        qpldets.pricing_phase_id, --PRICING_PHASE_ID
        qpldets.INCOMPATABILITY_GRP_CODE, --INCOMPATABILITY_GRP_CODE
        'NULL', --LINE_DETAIL_TYPE_CODE
        qpldets.MODIFIER_LEVEL_CODE, --MODIFIER_LEVEL_CODE
        qpldets.PRIMARY_UOM_FLAG, --PRIMARY_UOM_FLAG
	--qppatr.PRICING_SEGMENT_ID, --SEGMENT_ID
	qplaptr.derived_qualifier_flag
     FROM qp_npreq_ldets_tmp qpldets,
          QP_PRICING_ATTRIBUTES qppatr,
	  qp_npreq_line_attrs_tmp qplaptr
     WHERE qpldets.pricing_phase_id = p_pricing_phase_id
       AND qpldets.line_index BETWEEN l_start_line_index AND l_end_line_index
       AND qpldets.CREATED_FROM_SQL = p_stage
       AND qppatr.list_line_id = qpldets.CREATED_FROM_LIST_LINE_ID
       AND qppatr.list_header_id = qpldets.CREATED_FROM_LIST_HEADER_ID --Could be removed
       AND qppatr.excluder_flag = G_NO
       AND qppatr.pricing_attribute_context IS NOT NULL
       AND qplaptr.LINE_INDEX = qpldets.LINE_INDEX
       AND qplaptr.segment_id = qppatr.PRICING_SEGMENT_ID
       AND qplaptr.attribute_type=G_PRICING_TYPE;

     l_start_line_index := l_end_line_index + 1;
     l_end_line_index := l_end_line_index + G_CHUNK_SIZE;

  END LOOP;

   qp_debug_util.tstop('POPULATE_PAT_TEMP_TABLES_QR3');

   l_satis_quals_opt := nvl(fnd_profile.value('QP_SATIS_QUALS_OPT'), G_NO);

	  --[julin/pricebook] -- pat impact
	  IF nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) = G_YES THEN
	    l_satis_quals_opt := G_NO;
	  END IF;

   IF qp_preq_grp.G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     qp_preq_grp.engine_debug('Successfully inserted data in table qp_npreq_line_attrs_tmp');
     qp_preq_grp.engine_debug('Profile value QP_SATIS_QUALS_OPT => '||l_satis_quals_opt);
   END IF;

   IF  l_satis_quals_opt = G_YES THEN

     qp_debug_util.tstart('POPULATE_PAT_TEMP_TABLES_QR4','Insert Header Qualifiers in Attrs Table');

     /*
      Populating table qp_npreq_line_attrs_tmp with details of header level
      Qualifier Attributes for selected qualifier groups of selected modifier lines.
     */

     l_start_line_index := G_MIN_LINE_INDEX;
     l_end_line_index := G_MIN_LINE_INDEX+G_CHUNK_SIZE;

     FOR i IN 1..l_cnt_iter
     LOOP

     INSERT INTO qp_npreq_line_attrs_tmp(
                 LINE_INDEX,
                 LINE_DETAIL_INDEX,
                 ATTRIBUTE_LEVEL,
                 ATTRIBUTE_TYPE,
                 LIST_HEADER_ID,
                 LIST_LINE_ID,
                 CONTEXT,
                 ATTRIBUTE,
                 VALUE_FROM,
                 SETUP_VALUE_FROM,
                 VALUE_TO,
                 SETUP_VALUE_TO,
                 GROUPING_NUMBER,
                 COMPARISON_OPERATOR_TYPE_CODE,
                 VALIDATED_FLAG,
                 APPLIED_FLAG,
                 PRICING_STATUS_CODE,
                 PRICING_STATUS_TEXT,
                 QUALIFIER_PRECEDENCE,
                 DATATYPE,
                 PRICING_ATTR_FLAG,
                 QUALIFIER_TYPE,
                 PRODUCT_UOM_CODE,
                 EXCLUDER_FLAG,
                 PRICING_PHASE_ID,
                 INCOMPATABILITY_GRP_CODE,
                 LINE_DETAIL_TYPE_CODE,
                 MODIFIER_LEVEL_CODE,
                 PRIMARY_UOM_FLAG,
		 --SEGMENT_ID,
		 derived_qualifier_flag
                )
      SELECT /*+ ORDERED index(qpq QP_QUALIFIERS_N1) index(qplines qp_preq_line_attrs_tmp_n8) index(qppatq QP_PREQ_PATRN_QUAL_T_N2) */
               qpldets.LINE_INDEX, --LINE_INDEX,
               qpldets.LINE_DETAIL_INDEX, -- LINE_DETAIL_INDEX,
               qplines.ATTRIBUTE_LEVEL, -- ATTRIBUTE_LEVEL,
               qplines.ATTRIBUTE_TYPE, -- ATTRIBUTE_TYPE,
               qpldets.CREATED_FROM_LIST_HEADER_ID, -- LIST_HEADER_ID,
               -1, -- LIST_LINE_ID,
               qpq.QUALIFIER_CONTEXT, -- CONTEXT,
               qpq.QUALIFIER_ATTRIBUTE,-- ATTRIBUTE,
               qplines.VALUE_FROM, -- VALUE_FROM,
               qpq.QUALIFIER_ATTR_VALUE, --SETUP_VALUE_FROM,
               qplines.VALUE_TO, -- VALUE_TO,
               qpq.QUALIFIER_ATTR_VALUE_TO, -- SETUP_VALUE_TO,
               qpq.QUALIFIER_GROUPING_NO, -- GROUPING_NUMBER,
               qpq.COMPARISON_OPERATOR_CODE, -- COMPARISON_OPERATOR_TYPE_CODE,
               qplines.VALIDATED_FLAG, -- VALIDATED_FLAG,
               qplines.APPLIED_FLAG, -- APPLIED_FLAG,
               G_STATUS_NEW,-- PRICING_STATUS_CODE,
               'QUALIFIERS', -- PRICING_STATUS_TEXT,
               qpq.QUALIFIER_PRECEDENCE, -- QUALIFIER_PRECEDENCE,
               qpq.QUALIFIER_DATATYPE, -- DATATYPE,
               QP_PREQ_GRP.G_NO, --PRICING_ATTR_FLAG,
               'HQ', -- QUALIFIER_TYPE,
               null,-- PRODUCT_UOM_CODE,
               qpq.EXCLUDER_FLAG, --EXCLUDER_FLAG,
               p_pricing_phase_id, -- PRICING_PHASE_ID,
               qpldets.INCOMPATABILITY_GRP_CODE, -- INCOMPATABILITY_GRP_CODE,
               qplines.LINE_DETAIL_TYPE_CODE, -- LINE_DETAIL_TYPE_CODE,
               qplines.MODIFIER_LEVEL_CODE, -- MODIFIER_LEVEL_CODE,
               qpldets.PRIMARY_UOM_FLAG, -- PRIMARY_UOM_FLAG
	       --qpq.SEGMENT_ID,
	       qplines.derived_qualifier_flag
     FROM
        qp_npreq_ldets_tmp qpldets,
        QP_PREQ_PATRN_QUAL_TMP qppatq,
	qp_qualifiers qpq,
	qp_npreq_line_attrs_tmp qplines
     WHERE
          qpldets.pricing_phase_id = p_pricing_phase_id
      AND qpldets.line_index BETWEEN l_start_line_index AND l_end_line_index
      AND qpldets.CREATED_FROM_SQL = p_stage
      AND qppatq.LINE_INDEX = qpldets.LINE_INDEX
      AND qppatq.LIST_HEADER_ID = qpldets.CREATED_FROM_LIST_HEADER_ID
      AND qppatq.list_line_id = -1
      AND qpq.LIST_HEADER_ID = qppatq.LIST_HEADER_ID
      AND qpq.list_line_id = -1
      AND qpq.QUALIFIER_GROUPING_NO = qppatq.GROUPING_NO
      AND qplines.SEGMENT_ID = qpq.SEGMENT_ID
      AND qplines.ATTRIBUTE_TYPE = G_QUALIFIER_TYPE
      AND qplines.LINE_INDEX = qppatq.LINE_INDEX
      UNION
      -- -1 qualifiers if other group exist
      SELECT /*+ ORDERED index(qpq QP_QUALIFIERS_N1) index(qplines qp_preq_line_attrs_tmp_n8) index(qppatq QP_PREQ_PATRN_QUAL_T_N2) */
               qpldets.LINE_INDEX, --LINE_INDEX,
               qpldets.LINE_DETAIL_INDEX, -- LINE_DETAIL_INDEX,
               qplines.ATTRIBUTE_LEVEL, -- ATTRIBUTE_LEVEL,
               qplines.ATTRIBUTE_TYPE, -- ATTRIBUTE_TYPE,
               qpldets.CREATED_FROM_LIST_HEADER_ID, -- LIST_HEADER_ID,
               -1, -- LIST_LINE_ID,
               qpq.QUALIFIER_CONTEXT, -- CONTEXT,
               qpq.QUALIFIER_ATTRIBUTE,-- ATTRIBUTE,
               qplines.VALUE_FROM, -- VALUE_FROM,
               qpq.QUALIFIER_ATTR_VALUE, --SETUP_VALUE_FROM,
               qplines.VALUE_TO, -- VALUE_TO,
               qpq.QUALIFIER_ATTR_VALUE_TO, -- SETUP_VALUE_TO,
               qpq.QUALIFIER_GROUPING_NO, -- GROUPING_NUMBER,
               qpq.COMPARISON_OPERATOR_CODE, -- COMPARISON_OPERATOR_TYPE_CODE,
               qplines.VALIDATED_FLAG, -- VALIDATED_FLAG,
               qplines.APPLIED_FLAG, -- APPLIED_FLAG,
               G_STATUS_NEW,-- PRICING_STATUS_CODE,
               'QUALIFIERS', -- PRICING_STATUS_TEXT,
               qpq.QUALIFIER_PRECEDENCE, -- QUALIFIER_PRECEDENCE,
               qpq.QUALIFIER_DATATYPE, -- DATATYPE,
               QP_PREQ_GRP.G_NO, --PRICING_ATTR_FLAG,
               'HQ', -- QUALIFIER_TYPE,
               null,-- PRODUCT_UOM_CODE,
               qpq.EXCLUDER_FLAG, --EXCLUDER_FLAG,
               p_pricing_phase_id, -- PRICING_PHASE_ID,
               qpldets.INCOMPATABILITY_GRP_CODE, -- INCOMPATABILITY_GRP_CODE,
               qplines.LINE_DETAIL_TYPE_CODE, -- LINE_DETAIL_TYPE_CODE,
               qplines.MODIFIER_LEVEL_CODE, -- MODIFIER_LEVEL_CODE,
               qpldets.PRIMARY_UOM_FLAG, -- PRIMARY_UOM_FLAG
	       --qpq.SEGMENT_ID,
	       qplines.derived_qualifier_flag
     FROM
        qp_npreq_ldets_tmp qpldets,
        QP_PREQ_PATRN_QUAL_TMP qppatq,
	qp_qualifiers qpq,
	qp_npreq_line_attrs_tmp qplines
     WHERE
          qpldets.pricing_phase_id = p_pricing_phase_id
      AND qpldets.line_index BETWEEN l_start_line_index AND l_end_line_index
      AND qpldets.CREATED_FROM_SQL = p_stage
      AND qppatq.LINE_INDEX = qpldets.LINE_INDEX
      AND qppatq.LIST_HEADER_ID = qpldets.CREATED_FROM_LIST_HEADER_ID
      AND qppatq.list_line_id = -1
      AND qpq.LIST_HEADER_ID = qppatq.LIST_HEADER_ID
      AND qpq.list_line_id = qppatq.list_line_id
      AND qpq.QUALIFIER_GROUPING_NO = -1
      AND qppatq.null_other_oprt_count > 0
      AND qppatq.GROUPING_NO <> -1
      AND qplines.SEGMENT_ID = qpq.SEGMENT_ID
      AND qplines.ATTRIBUTE_TYPE = G_QUALIFIER_TYPE
      AND qplines.LINE_INDEX = qppatq.LINE_INDEX;

    l_start_line_index := l_end_line_index + 1;
    l_end_line_index := l_end_line_index + G_CHUNK_SIZE;

   END LOOP;

      qp_debug_util.tstop('POPULATE_PAT_TEMP_TABLES_QR4');

      IF qp_preq_grp.G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        qp_preq_grp.engine_debug('Successfully inserted header level qualifiers in table qp_npreq_line_attrs_tmp');
      END IF;

     IF p_stage IN (G_STAGE_CACHE_MOD_LIN, G_STAGE_CACHE_MOD_LIN2) THEN

      qp_debug_util.tstart('POPULATE_PAT_TEMP_TABLES_QR5','Insert Line Qualifiers in Attrs Table');

      /*
       Populating table qp_npreq_line_attrs_tmp with details of line level qualifier
       attributes for selected qualifier groups of selected modifier lines.
      */

    l_start_line_index := G_MIN_LINE_INDEX;
    l_end_line_index := G_MIN_LINE_INDEX+G_CHUNK_SIZE;

    FOR i IN 1..l_cnt_iter
    LOOP

      INSERT INTO qp_npreq_line_attrs_tmp(
                 LINE_INDEX,
                 LINE_DETAIL_INDEX,
                 ATTRIBUTE_LEVEL,
                 ATTRIBUTE_TYPE,
                 LIST_HEADER_ID,
                 LIST_LINE_ID,
                 CONTEXT,
                 ATTRIBUTE,
                 VALUE_FROM,
                 SETUP_VALUE_FROM,
                 VALUE_TO,
                 SETUP_VALUE_TO,
                 GROUPING_NUMBER,
                 COMPARISON_OPERATOR_TYPE_CODE,
                 VALIDATED_FLAG,
                 APPLIED_FLAG,
                 PRICING_STATUS_CODE,
                 PRICING_STATUS_TEXT,
                 QUALIFIER_PRECEDENCE,
                 DATATYPE,
                 PRICING_ATTR_FLAG,
                 QUALIFIER_TYPE,
                 PRODUCT_UOM_CODE,
                 EXCLUDER_FLAG,
                 PRICING_PHASE_ID,
                 INCOMPATABILITY_GRP_CODE,
                 LINE_DETAIL_TYPE_CODE,
                 MODIFIER_LEVEL_CODE,
                 PRIMARY_UOM_FLAG,
                 --SEGMENT_ID,
		 derived_qualifier_flag
                )
      SELECT /*+ ORDERED index(qpq QP_QUALIFIERS_N1) index(qplines qp_preq_line_attrs_tmp_n8) index(qppatq QP_PREQ_PATRN_QUAL_T_N2) */
               qpldets.LINE_INDEX, --LINE_INDEX,
               qpldets.LINE_DETAIL_INDEX, -- LINE_DETAIL_INDEX,
               qplines.ATTRIBUTE_LEVEL, -- ATTRIBUTE_LEVEL,
               qplines.ATTRIBUTE_TYPE, -- ATTRIBUTE_TYPE,
               qpldets.CREATED_FROM_LIST_HEADER_ID, -- LIST_HEADER_ID,
               qpldets.CREATED_FROM_LIST_LINE_ID, -- LIST_LINE_ID,
               qpq.QUALIFIER_CONTEXT, -- CONTEXT,
               qpq.QUALIFIER_ATTRIBUTE,-- ATTRIBUTE,
               qplines.VALUE_FROM, -- VALUE_FROM,
               qpq.QUALIFIER_ATTR_VALUE, --SETUP_VALUE_FROM,
               qplines.VALUE_TO, -- VALUE_TO,
               qpq.QUALIFIER_ATTR_VALUE_TO, -- SETUP_VALUE_TO,
               qpq.QUALIFIER_GROUPING_NO, -- GROUPING_NUMBER,
               qpq.COMPARISON_OPERATOR_CODE, -- COMPARISON_OPERATOR_TYPE_CODE,
               qplines.VALIDATED_FLAG, -- VALIDATED_FLAG,
               qplines.APPLIED_FLAG, -- APPLIED_FLAG,
               G_STATUS_NEW,-- PRICING_STATUS_CODE,
               'LINE QUALIFIERS', -- PRICING_STATUS_TEXT,
               qpq.QUALIFIER_PRECEDENCE, -- QUALIFIER_PRECEDENCE,
               qpq.QUALIFIER_DATATYPE, -- DATATYPE,
               QP_PREQ_GRP.G_NO, --PRICING_ATTR_FLAG,
               'LQ', -- QUALIFIER_TYPE,
               null,-- PRODUCT_UOM_CODE,
               qpq.EXCLUDER_FLAG, --EXCLUDER_FLAG,
               p_pricing_phase_id, -- PRICING_PHASE_ID,
               qpldets.INCOMPATABILITY_GRP_CODE, -- INCOMPATABILITY_GRP_CODE,
               qplines.LINE_DETAIL_TYPE_CODE, -- LINE_DETAIL_TYPE_CODE,
               qplines.MODIFIER_LEVEL_CODE, -- MODIFIER_LEVEL_CODE,
               qpldets.PRIMARY_UOM_FLAG, -- PRIMARY_UOM_FLAG
	       --qpq.SEGMENT_ID,
	       qplines.derived_qualifier_flag
     FROM
        qp_npreq_ldets_tmp qpldets,
        QP_PREQ_PATRN_QUAL_TMP qppatq,
	qp_qualifiers qpq,
	qp_npreq_line_attrs_tmp qplines
     WHERE
          qpldets.pricing_phase_id = p_pricing_phase_id
      AND qpldets.line_index BETWEEN l_start_line_index AND l_end_line_index
      AND qpldets.CREATED_FROM_SQL = p_stage
      AND qppatq.LINE_INDEX = qpldets.LINE_INDEX
      AND qppatq.LIST_HEADER_ID = qpldets.CREATED_FROM_LIST_HEADER_ID
      AND qppatq.list_line_id = qpldets.CREATED_FROM_LIST_LINE_ID
      AND qpq.LIST_HEADER_ID = qppatq.LIST_HEADER_ID
      AND qpq.list_line_id = qppatq.list_line_id
      AND qpq.QUALIFIER_GROUPING_NO = qppatq.GROUPING_NO
      AND qplines.SEGMENT_ID = qpq.SEGMENT_ID
      AND qplines.LINE_INDEX = qppatq.LINE_INDEX
      UNION all
      -- -1 qualifiers if other group exist
      SELECT /*+ ORDERED index(qpq QP_QUALIFIERS_N1) index(qplines qp_preq_line_attrs_tmp_n8) index(qppatq QP_PREQ_PATRN_QUAL_T_N2) */
               qpldets.LINE_INDEX, --LINE_INDEX,
               qpldets.LINE_DETAIL_INDEX, -- LINE_DETAIL_INDEX,
               qplines.ATTRIBUTE_LEVEL, -- ATTRIBUTE_LEVEL,
               qplines.ATTRIBUTE_TYPE, -- ATTRIBUTE_TYPE,
               qpldets.CREATED_FROM_LIST_HEADER_ID, -- LIST_HEADER_ID,
               qpldets.CREATED_FROM_LIST_LINE_ID, -- LIST_LINE_ID,
               qpq.QUALIFIER_CONTEXT, -- CONTEXT,
               qpq.QUALIFIER_ATTRIBUTE,-- ATTRIBUTE,
               qplines.VALUE_FROM, -- VALUE_FROM,
               qpq.QUALIFIER_ATTR_VALUE, --SETUP_VALUE_FROM,
               qplines.VALUE_TO, -- VALUE_TO,
               qpq.QUALIFIER_ATTR_VALUE_TO, -- SETUP_VALUE_TO,
               qpq.QUALIFIER_GROUPING_NO, -- GROUPING_NUMBER,
               qpq.COMPARISON_OPERATOR_CODE, -- COMPARISON_OPERATOR_TYPE_CODE,
               qplines.VALIDATED_FLAG, -- VALIDATED_FLAG,
               qplines.APPLIED_FLAG, -- APPLIED_FLAG,
               G_STATUS_NEW,-- PRICING_STATUS_CODE,
               'LINE QUALIFIERS', -- PRICING_STATUS_TEXT,
               qpq.QUALIFIER_PRECEDENCE, -- QUALIFIER_PRECEDENCE,
               qpq.QUALIFIER_DATATYPE, -- DATATYPE,
               QP_PREQ_GRP.G_NO, --PRICING_ATTR_FLAG,
               'LQ', -- QUALIFIER_TYPE,
               null,-- PRODUCT_UOM_CODE,
               qpq.EXCLUDER_FLAG, --EXCLUDER_FLAG,
               p_pricing_phase_id, -- PRICING_PHASE_ID,
               qpldets.INCOMPATABILITY_GRP_CODE, -- INCOMPATABILITY_GRP_CODE,
               qplines.LINE_DETAIL_TYPE_CODE, -- LINE_DETAIL_TYPE_CODE,
               qplines.MODIFIER_LEVEL_CODE, -- MODIFIER_LEVEL_CODE,
               qpldets.PRIMARY_UOM_FLAG, -- PRIMARY_UOM_FLAG
	       --qpq.SEGMENT_ID,
	       qplines.derived_qualifier_flag
     FROM
        qp_npreq_ldets_tmp qpldets,
        QP_PREQ_PATRN_QUAL_TMP qppatq,
	qp_qualifiers qpq,
	qp_npreq_line_attrs_tmp qplines
     WHERE
          qpldets.pricing_phase_id = p_pricing_phase_id
      AND qpldets.line_index BETWEEN l_start_line_index AND l_end_line_index
      AND qpldets.CREATED_FROM_SQL = p_stage
      AND qppatq.LINE_INDEX = qpldets.LINE_INDEX
      AND qppatq.LIST_HEADER_ID = qpldets.CREATED_FROM_LIST_HEADER_ID
      AND qppatq.list_line_id = qpldets.CREATED_FROM_LIST_LINE_ID
      AND qpq.LIST_HEADER_ID = qppatq.LIST_HEADER_ID
      AND qpq.list_line_id = qppatq.list_line_id
      AND qpq.QUALIFIER_GROUPING_NO = -1
      AND qppatq.null_other_oprt_count > 0
      AND qppatq.GROUPING_NO <> -1
      AND qplines.SEGMENT_ID = qpq.SEGMENT_ID
      AND qplines.LINE_INDEX = qppatq.LINE_INDEX;

    l_start_line_index := l_end_line_index + 1;
    l_end_line_index := l_end_line_index + G_CHUNK_SIZE;

    END LOOP;

     qp_debug_util.tstop('POPULATE_PAT_TEMP_TABLES_QR5');

     IF qp_preq_grp.G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        qp_preq_grp.engine_debug('Successfully inserted line level qualifiers in table qp_npreq_line_attrs_tmp');
     END IF;

   END IF; -- IF p_stage IN (
  END IF;

  -- Updating line quantity in ldets table for all the selected modifier lines
  -- and storing sourced value for the pricing volume attribute used in the line.
  -- Group of line modifiers will not be considered here. Line quantity will be
  -- updated later in evaluate_between procedure for them.

  UPDATE qp_npreq_ldets_tmp a
  SET a.line_quantity = ( SELECT VALUE_FROM
                          FROM qp_npreq_line_attrs_tmp b
			  WHERE b.LINE_INDEX = a.LINE_INDEX
			    AND b.LINE_DETAIL_INDEX = a.LINE_DETAIL_INDEX
			    AND b.context = G_PRIC_VOLUME_CONTEXT
			    AND b.attribute_type = G_PRICING_TYPE
			    AND b.pricing_phase_id = p_pricing_phase_id
			    AND b.datatype = G_NUMERIC
			    AND b.pricing_status_code = G_STATUS_NEW)
  WHERE a.pricing_phase_id = p_pricing_phase_id
    AND a.CREATED_FROM_SQL = p_stage
    AND a.MODIFIER_LEVEL_CODE <> G_LINE_GROUP;

  IF p_stage IN (G_STAGE_CACHE_SEC_PL_LIN_SRCH, G_STAGE_CACHE_SEC_PL_LIN_SRCH2) THEN

       UPDATE qp_npreq_line_attrs_tmp a
	SET a.QUALIFIER_PRECEDENCE = (SELECT /*+ index(b qp_preq_patrn_qual_t_n2) */
	                                QUALIFIER_PRECEDENCE
	                              FROM QP_PREQ_PATRN_QUAL_TMP b
				      WHERE b.LINE_INDEX = a.line_index
				      AND b.list_header_id = a.list_header_id
				      AND b.LIST_LINE_ID = a.LIST_LINE_ID
                                      AND b.stage = p_stage
				      AND b.pricing_phase_id = p_pricing_phase_id

				      AND b.pricing_status_code = G_STATUS_UNCHANGED)
        WHERE a.pricing_phase_id = p_pricing_phase_id
	 AND  a.ATTRIBUTE_TYPE = G_PRODUCT_TYPE
	 AND  a.pricing_status_code = G_STATUS_NEW
	 AND  a.LINE_DETAIL_INDEX IS NOT NULL;
    END IF;

  x_status_code := FND_API.G_RET_STS_SUCCESS;

  IF qp_preq_grp.G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     qp_preq_grp.engine_debug('Exiting ' || l_routine);
  END IF;

EXCEPTION
WHEN OTHERS THEN
   IF qp_preq_grp.G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     qp_preq_grp.engine_debug('Exception occured - '||sqlerrm);
   END IF;
   x_status_text := l_routine||' '||SQLERRM;
   x_status_code := FND_API.G_RET_STS_ERROR;

END Populate_Pat_Temp_Tables;

PROCEDURE Populate_Temp_Tables_NEQ_BTW(
    p_pricing_phase_id IN  NUMBER,
    p_stage IN VARCHAR2,
    x_status_code OUT NOCOPY VARCHAR2,
    x_status_text OUT NOCOPY VARCHAR2)
AS

  l_routine VARCHAR2(240):='Routine : QP_PREQ_GRP.Populate_Temp_Tables_NEQ_BTW';

BEGIN

  x_status_code := FND_API.G_RET_STS_SUCCESS;

  IF qp_preq_grp.G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     qp_preq_grp.engine_debug('Entering ' || l_routine);
     qp_preq_grp.engine_debug('p_pricing_phase_id => '||p_pricing_phase_id);
     qp_preq_grp.engine_debug('p_stage => '||p_stage);
  END IF;

  IF p_stage IN (G_STAGE_CACHE_MOD_LIN , G_STAGE_CACHE_MOD_LIN2) THEN
     /*
      Populating table qp_npreq_line_attrs_tmp with details of line level qualifier
      attributes having operator Between or Not = for all selected modifier line
      after line level pattern matching.
     */
         INSERT INTO qp_npreq_line_attrs_tmp(
                 LINE_INDEX,
                 LINE_DETAIL_INDEX,
                 ATTRIBUTE_LEVEL,
                 ATTRIBUTE_TYPE,
                 LIST_HEADER_ID,
                 LIST_LINE_ID,
                 CONTEXT,
                 ATTRIBUTE,
                 VALUE_FROM,
                 SETUP_VALUE_FROM,
                 VALUE_TO,
                 SETUP_VALUE_TO,
                 GROUPING_NUMBER,
                 COMPARISON_OPERATOR_TYPE_CODE,
                 VALIDATED_FLAG,
                 APPLIED_FLAG,
                 PRICING_STATUS_CODE,
                 PRICING_STATUS_TEXT,
                 QUALIFIER_PRECEDENCE,
                 DATATYPE,
                 PRICING_ATTR_FLAG,
                 QUALIFIER_TYPE,
                 EXCLUDER_FLAG,
                 PRICING_PHASE_ID,
                 LINE_DETAIL_TYPE_CODE,
                 MODIFIER_LEVEL_CODE,
                 --SEGMENT_ID,
		 derived_qualifier_flag
                )
      SELECT /*+ ORDERED index(qpq QP_QUALIFIERS_N1) index(qplines qp_preq_line_attrs_tmp_n8) index(qppatq QP_PREQ_PATRN_QUAL_T_N2) */
               qppatq.LINE_INDEX, --LINE_INDEX,
               NULL, -- LINE_DETAIL_INDEX,
               qplines.ATTRIBUTE_LEVEL, -- ATTRIBUTE_LEVEL,
               QP_PREQ_GRP.G_QUALIFIER_TYPE, -- ATTRIBUTE_TYPE,
               qppatq.LIST_HEADER_ID, -- LIST_HEADER_ID,
               qppatq.LIST_LINE_ID, -- LIST_LINE_ID,
               qpq.QUALIFIER_CONTEXT, -- CONTEXT,
               qpq.QUALIFIER_ATTRIBUTE,-- ATTRIBUTE,
               qplines.VALUE_FROM, -- VALUE_FROM,
               qpq.QUALIFIER_ATTR_VALUE, --SETUP_VALUE_FROM,
               qplines.VALUE_TO, -- VALUE_TO,
               qpq.QUALIFIER_ATTR_VALUE_TO, -- SETUP_VALUE_TO,
               qpq.QUALIFIER_GROUPING_NO, -- GROUPING_NUMBER,
               qpq.COMPARISON_OPERATOR_CODE, -- COMPARISON_OPERATOR_TYPE_CODE,
               qplines.VALIDATED_FLAG, -- VALIDATED_FLAG,
               qplines.APPLIED_FLAG, -- APPLIED_FLAG,
               p_stage,-- PRICING_STATUS_CODE,
               'LINE QUALIFIERS - OPR_BET_NEQ', -- PRICING_STATUS_TEXT,
               qpq.QUALIFIER_PRECEDENCE, -- QUALIFIER_PRECEDENCE,
               qpq.QUALIFIER_DATATYPE, -- DATATYPE,
               QP_PREQ_GRP.G_NO, --PRICING_ATTR_FLAG,
               'LQ', -- QUALIFIER_TYPE,
               qpq.EXCLUDER_FLAG, --EXCLUDER_FLAG,
               p_pricing_phase_id, -- PRICING_PHASE_ID,
               qplines.LINE_DETAIL_TYPE_CODE, -- LINE_DETAIL_TYPE_CODE,
               qppatq.MODIFIER_LEVEL_CODE, -- MODIFIER_LEVEL_CODE,
	       --qplines.SEGMENT_ID,
	       qplines.derived_qualifier_flag
     FROM
        QP_PREQ_PATRN_QUAL_TMP qppatq,
	qp_qualifiers qpq,
	qp_npreq_line_attrs_tmp qplines
     WHERE
          qppatq.pricing_phase_id = p_pricing_phase_id
      AND qppatq.stage = p_stage
      AND qpq.LIST_HEADER_ID = qppatq.LIST_HEADER_ID
      AND qppatq.list_line_id  <> -1
      AND qpq.list_line_id = qppatq.list_line_id
      AND qpq.QUALIFIER_GROUPING_NO = qppatq.GROUPING_NO
      AND qpq.COMPARISON_OPERATOR_CODE IN (QP_PREQ_GRP.G_OPERATOR_BETWEEN, G_OPERATOR_NOT_EQL)
      AND qplines.SEGMENT_ID = qpq.SEGMENT_ID
      AND qplines.LINE_INDEX = qppatq.LINE_INDEX
      AND qppatq.eq_flag = G_NO
      AND ((nvl(qplines.DERIVED_QUALIFIER_FLAG,'N')='N')
          OR (qplines.DERIVED_QUALIFIER_FLAG = 'Y' AND QPQ.QUALIFY_HIER_DESCENDENTS_FLAG = 'Y')) -- Added for TCA
      UNION all
      -- -1 qualifiers if other group exist
      SELECT /*+ ORDERED index(qpq QP_QUALIFIERS_N1) index(qplines qp_preq_line_attrs_tmp_n8) index(qppatq QP_PREQ_PATRN_QUAL_T_N2) */
               qppatq.LINE_INDEX, --LINE_INDEX,
               null, -- LINE_DETAIL_INDEX,
               qplines.ATTRIBUTE_LEVEL, -- ATTRIBUTE_LEVEL,
               QP_PREQ_GRP.G_QUALIFIER_TYPE, -- ATTRIBUTE_TYPE,
               qppatq.LIST_HEADER_ID, -- LIST_HEADER_ID,
               qppatq.LIST_LINE_ID, -- LIST_LINE_ID,
               qpq.QUALIFIER_CONTEXT, -- CONTEXT,
               qpq.QUALIFIER_ATTRIBUTE,-- ATTRIBUTE,
               qplines.VALUE_FROM, -- VALUE_FROM,
               qpq.QUALIFIER_ATTR_VALUE, --SETUP_VALUE_FROM,
               qplines.VALUE_TO, -- VALUE_TO,
               qpq.QUALIFIER_ATTR_VALUE_TO, -- SETUP_VALUE_TO,
               qpq.QUALIFIER_GROUPING_NO, -- GROUPING_NUMBER,
               qpq.COMPARISON_OPERATOR_CODE, -- COMPARISON_OPERATOR_TYPE_CODE,
               qplines.VALIDATED_FLAG, -- VALIDATED_FLAG,
               qplines.APPLIED_FLAG, -- APPLIED_FLAG,
               p_stage,-- PRICING_STATUS_CODE,
               'LINE QUALIFIERS - OPR_BET_NEQ', -- PRICING_STATUS_TEXT,
               qpq.QUALIFIER_PRECEDENCE, -- QUALIFIER_PRECEDENCE,
               qpq.QUALIFIER_DATATYPE, -- DATATYPE,
               QP_PREQ_GRP.G_NO, --PRICING_ATTR_FLAG,
               'LQ', -- QUALIFIER_TYPE,
               qpq.EXCLUDER_FLAG, --EXCLUDER_FLAG,
               p_pricing_phase_id, -- PRICING_PHASE_ID,
               qplines.LINE_DETAIL_TYPE_CODE, -- LINE_DETAIL_TYPE_CODE,
               qppatq.MODIFIER_LEVEL_CODE, -- MODIFIER_LEVEL_CODE,
	       --qplines.SEGMENT_ID,
	       qplines.derived_qualifier_flag
     FROM
        QP_PREQ_PATRN_QUAL_TMP qppatq,
	qp_qualifiers qpq,
	qp_npreq_line_attrs_tmp qplines
     WHERE
          qppatq.pricing_phase_id = p_pricing_phase_id
      AND qppatq.stage = p_stage
      AND qpq.LIST_HEADER_ID = qppatq.LIST_HEADER_ID
      AND qppatq.list_line_id  <> -1
      AND qpq.list_line_id = qppatq.list_line_id
      AND qpq.QUALIFIER_GROUPING_NO = -1
      AND qpq.COMPARISON_OPERATOR_CODE IN (QP_PREQ_GRP.G_OPERATOR_BETWEEN, G_OPERATOR_NOT_EQL)
      AND qppatq.null_other_oprt_count > 0
      AND qplines.SEGMENT_ID = qpq.SEGMENT_ID
      AND qplines.LINE_INDEX = qppatq.LINE_INDEX
      AND qppatq.eq_flag = G_NO
      AND ((nvl(qplines.DERIVED_QUALIFIER_FLAG,'N')='N')
          OR (qplines.DERIVED_QUALIFIER_FLAG = 'Y' AND QPQ.QUALIFY_HIER_DESCENDENTS_FLAG = 'Y')); -- Added for TCA

     IF qp_preq_grp.G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        qp_preq_grp.engine_debug('Successfully inserted Line level BETWEEN , Not = Qualifiers Attributes in table qp_npreq_line_attrs_tmp');
     END IF;

  END IF;

  IF p_stage IN (G_STAGE_CACHE_MOD_LIN,
                 G_STAGE_CACHE_PL_LIN,
		 G_STAGE_CACHE_LST_HDR_LIN_SRCH,
		 G_STAGE_CACHE_SEC_PL_LIN_SRCH,
		 G_STAGE_CACHE_PL_LIN2,
		 G_STAGE_CACHE_MOD_LIN2,
		 G_STAGE_CACHE_SEC_PL_LIN_SRCH2
		 ) THEN

    /*
      Populating table qp_npreq_line_attrs_tmp with details of Pricing Attributes
      having operator Between or Not = for all selected modifier line after line
      level pattern matching.
    */

    INSERT INTO qp_npreq_line_attrs_tmp(
                 LINE_INDEX,
                 LINE_DETAIL_INDEX,
                 ATTRIBUTE_LEVEL,
                 ATTRIBUTE_TYPE,
                 LIST_HEADER_ID,
                 LIST_LINE_ID,
                 CONTEXT,
                 ATTRIBUTE,
                 VALUE_FROM,
                 SETUP_VALUE_FROM,
                 VALUE_TO,
                 SETUP_VALUE_TO,
                 GROUPING_NUMBER,
                 COMPARISON_OPERATOR_TYPE_CODE,
                 VALIDATED_FLAG,
                 APPLIED_FLAG,
                 PRICING_STATUS_CODE,
                 PRICING_STATUS_TEXT,
                 QUALIFIER_PRECEDENCE,
                 DATATYPE,
                 PRICING_ATTR_FLAG,
                 QUALIFIER_TYPE,
                 PRODUCT_UOM_CODE,
                 EXCLUDER_FLAG,
                 PRICING_PHASE_ID,
                 INCOMPATABILITY_GRP_CODE,
                 LINE_DETAIL_TYPE_CODE,
                 MODIFIER_LEVEL_CODE,
                 PRIMARY_UOM_FLAG,
		 --SEGMENT_ID,
		 derived_qualifier_flag
                )
     SELECT /*+ index(qplaptr qp_preq_line_attrs_tmp_n8) */
       qppat.LINE_INDEX, --LINE_INDEX
        NULL, --LINE_DETAIL_INDEX
        qplaptr.ATTRIBUTE_LEVEL, --ATTRIBUTE_LEVEL
        QP_PREQ_GRP.G_PRICING_TYPE, --ATTRIBUTE_TYPE
        qppat.list_header_id, --LIST_HEADER_ID
        qppat.list_line_id, --LIST_LINE_ID
        qppatr.PRICING_ATTRIBUTE_CONTEXT, --CONTEXT
        qppatr.PRICING_ATTRIBUTE, --ATTRIBUTE
        qplaptr.VALUE_FROM, --VALUE_FROM
        qppatr.PRICING_ATTR_VALUE_FROM,--SETUP_VALUE_FROM
        qplaptr.VALUE_TO,--VALUE_TO
        qppatr.PRICING_ATTR_VALUE_TO,--SETUP_VALUE_TO
        -1,--GROUPING_NUMBER
        qppatr.COMPARISON_OPERATOR_CODE,--COMPARISON_OPERATOR_TYPE_CODE
        qplaptr.VALIDATED_FLAG,--VALIDATED_FLAG
        qplaptr.APPLIED_FLAG,--APPLIED_FLAG
        p_stage,--QP_PREQ_GRP.G_STATUS_UNCHANGED,--PRICING_STATUS_CODE --Check this attribute
        'Pricing Attribute - OPR_BET_NEQ',--PRICING_STATUS_TEXT --Check this attribute
        NULL,--QUALIFIER_PRECEDENCE
        qppatr.PRICING_ATTRIBUTE_DATATYPE,--DATATYPE
        qplaptr.PRICING_ATTR_FLAG,--PRICING_ATTR_FLAG
        'NO',--QUALIFIER_TYPE
        NULL, --qplines.PRODUCT_UOM_CODE, --PRODUCT_UOM_CODE
        qppatr.excluder_flag, --EXCLUDER_FLAG
        qppat.pricing_phase_id, --PRICING_PHASE_ID
        NULL, --qplines.INCOMPATIBILITY_GRP_CODE, --INCOMPATABILITY_GRP_CODE
        'NULL', --LINE_DETAIL_TYPE_CODE
        qppat.MODIFIER_LEVEL_CODE, --MODIFIER_LEVEL_CODE
        NULL, --qplines.PRIMARY_UOM_FLAG, --PRIMARY_UOM_FLAG
	--qplaptr.SEGMENT_ID, --SEGMENT_ID
	qplaptr.derived_qualifier_flag
     FROM
         (
	   SELECT DISTINCT pricing_phase_id, line_index, list_header_id, list_line_id,
	      eq_flag, MODIFIER_LEVEL_CODE
           FROM QP_PREQ_PATRN_QUAL_TMP
	   WHERE stage = p_stage
	  )qppat,
          QP_PRICING_ATTRIBUTES qppatr,
	  qp_npreq_line_attrs_tmp qplaptr
     WHERE qppat.pricing_phase_id = p_pricing_phase_id
       AND qppatr.list_line_id = qppat.list_line_id
       AND qppatr.excluder_flag = G_NO
       AND qppat.eq_flag = G_NO
       AND qppatr.pricing_attribute_context IS NOT NULL
       AND qppatr.COMPARISON_OPERATOR_CODE IN (QP_PREQ_GRP.G_OPERATOR_BETWEEN, G_OPERATOR_NOT_EQL)
       AND qplaptr.LINE_INDEX = qppat.LINE_INDEX
       AND qplaptr.segment_id = qppatr.PRICING_SEGMENT_ID
       AND qplaptr.attribute_type = G_PRICING_TYPE;

   IF qp_preq_grp.G_DEBUG_ENGINE = FND_API.G_TRUE THEN
      qp_preq_grp.engine_debug('Successfully inserted  BETWEEN , Not = Pricing Attributes in table qp_npreq_line_attrs_tmp');
    END IF;

END if;

IF p_stage IN (G_STAGE_CACHE_MOD_HDR,
               G_STAGE_CACHE_LST_HDR_LIN_SRCH,
	       G_STAGE_CACHE_SEC_PL_HDR_SRCH,
	       G_STAGE_CACHE_PL_HDR,
	       G_STAGE_CACHE_PL_LIN2,
	       G_STAGE_CACHE_MOD_LIN2,
	       G_STAGE_CACHE_SEC_PL_LIN_SRCH2) THEN

     /*
      Populating table qp_npreq_line_attrs_tmp with details of header level qualifier
      attributes having operator Between or Not = for all selected modifier line after
      header level pattern matching.
     */

         INSERT INTO qp_npreq_line_attrs_tmp(
                 LINE_INDEX,
                 LINE_DETAIL_INDEX,
                 ATTRIBUTE_LEVEL,
                 ATTRIBUTE_TYPE,
                 LIST_HEADER_ID,
                 LIST_LINE_ID,
                 CONTEXT,
                 ATTRIBUTE,
                 VALUE_FROM,
                 SETUP_VALUE_FROM,
                 VALUE_TO,
                 SETUP_VALUE_TO,
                 GROUPING_NUMBER,
                 COMPARISON_OPERATOR_TYPE_CODE,
                 VALIDATED_FLAG,
                 APPLIED_FLAG,
                 PRICING_STATUS_CODE,
                 PRICING_STATUS_TEXT,
                 QUALIFIER_PRECEDENCE,
                 DATATYPE,
                 PRICING_ATTR_FLAG,
                 QUALIFIER_TYPE,
                 EXCLUDER_FLAG,
                 PRICING_PHASE_ID,
                 LINE_DETAIL_TYPE_CODE,
                 MODIFIER_LEVEL_CODE,
                 --SEGMENT_ID,
		 derived_qualifier_flag
                )
      SELECT /*+ ORDERED index(qpq QP_QUALIFIERS_N1) index(qplines qp_preq_line_attrs_tmp_n8) index(qppatq QP_PREQ_PATRN_QUAL_T_N2) */
               qppatq.LINE_INDEX, --LINE_INDEX,
               NULL, -- LINE_DETAIL_INDEX,
               qplines.ATTRIBUTE_LEVEL, -- ATTRIBUTE_LEVEL,
               QP_PREQ_GRP.G_QUALIFIER_TYPE, -- ATTRIBUTE_TYPE,
               qppatq.LIST_HEADER_ID, -- LIST_HEADER_ID,
               qppatq.LIST_LINE_ID, -- LIST_LINE_ID,
               qpq.QUALIFIER_CONTEXT, -- CONTEXT,
               qpq.QUALIFIER_ATTRIBUTE,-- ATTRIBUTE,
               qplines.VALUE_FROM, -- VALUE_FROM,
               qpq.QUALIFIER_ATTR_VALUE, --SETUP_VALUE_FROM,
               qplines.VALUE_TO, -- VALUE_TO,
               qpq.QUALIFIER_ATTR_VALUE_TO, -- SETUP_VALUE_TO,
               qpq.QUALIFIER_GROUPING_NO, -- GROUPING_NUMBER,
               qpq.COMPARISON_OPERATOR_CODE, -- COMPARISON_OPERATOR_TYPE_CODE,
               qplines.VALIDATED_FLAG, -- VALIDATED_FLAG,
               qplines.APPLIED_FLAG, -- APPLIED_FLAG,
               p_stage,-- PRICING_STATUS_CODE,
               'HEADER QUALIFIERS - OPR_BET_NEQ', -- PRICING_STATUS_TEXT,
               qpq.QUALIFIER_PRECEDENCE, -- QUALIFIER_PRECEDENCE,
               qpq.QUALIFIER_DATATYPE, -- DATATYPE,
               QP_PREQ_GRP.G_NO, --PRICING_ATTR_FLAG,
               'HQ', -- QUALIFIER_TYPE,
               qpq.EXCLUDER_FLAG, --EXCLUDER_FLAG,
               p_pricing_phase_id, -- PRICING_PHASE_ID,
               qplines.LINE_DETAIL_TYPE_CODE, -- LINE_DETAIL_TYPE_CODE,
               qppatq.MODIFIER_LEVEL_CODE, -- MODIFIER_LEVEL_CODE,
	       --qplines.SEGMENT_ID,
	       qplines.derived_qualifier_flag
     FROM
        QP_PREQ_PATRN_QUAL_TMP qppatq,
	qp_qualifiers qpq,
	qp_npreq_line_attrs_tmp qplines
     WHERE
          qppatq.pricing_phase_id = p_pricing_phase_id
      AND qppatq.stage = p_stage
      AND qpq.LIST_HEADER_ID = qppatq.LIST_HEADER_ID
      AND qppatq.list_line_id = -1
      AND qpq.list_line_id = -1
      AND qpq.QUALIFIER_GROUPING_NO = qppatq.GROUPING_NO
      AND qpq.COMPARISON_OPERATOR_CODE IN (QP_PREQ_GRP.G_OPERATOR_BETWEEN, G_OPERATOR_NOT_EQL)
      AND qplines.SEGMENT_ID = qpq.SEGMENT_ID
      AND qplines.LINE_INDEX = qppatq.LINE_INDEX
      AND qppatq.eq_flag = G_NO
      AND ((nvl(qplines.DERIVED_QUALIFIER_FLAG,'N')='N')
          OR (qplines.DERIVED_QUALIFIER_FLAG = 'Y' AND QPQ.QUALIFY_HIER_DESCENDENTS_FLAG = 'Y')) -- Added for TCA
      UNION all
      -- -1 qualifiers if other group exist
      SELECT /*+ ORDERED index(qpq QP_QUALIFIERS_N1)
                 index(qplines qp_preq_line_attrs_tmp_n8)
		 index(qppatq QP_PREQ_PATRN_QUAL_T_N2) */
               DISTINCT qppatq.LINE_INDEX, --LINE_INDEX,
               null, -- LINE_DETAIL_INDEX,
               qplines.ATTRIBUTE_LEVEL, -- ATTRIBUTE_LEVEL,
               QP_PREQ_GRP.G_QUALIFIER_TYPE, -- ATTRIBUTE_TYPE,
               qppatq.LIST_HEADER_ID, -- LIST_HEADER_ID,
               qppatq.LIST_LINE_ID, -- LIST_LINE_ID,
               qpq.QUALIFIER_CONTEXT, -- CONTEXT,
               qpq.QUALIFIER_ATTRIBUTE,-- ATTRIBUTE,
               qplines.VALUE_FROM, -- VALUE_FROM,
               qpq.QUALIFIER_ATTR_VALUE, --SETUP_VALUE_FROM,
               qplines.VALUE_TO, -- VALUE_TO,
               qpq.QUALIFIER_ATTR_VALUE_TO, -- SETUP_VALUE_TO,
               qpq.QUALIFIER_GROUPING_NO, -- GROUPING_NUMBER,
               qpq.COMPARISON_OPERATOR_CODE, -- COMPARISON_OPERATOR_TYPE_CODE,
               qplines.VALIDATED_FLAG, -- VALIDATED_FLAG,
               qplines.APPLIED_FLAG, -- APPLIED_FLAG,
               p_stage,-- PRICING_STATUS_CODE,
               'HEADER QUALIFIERS - OPR_BET_NEQ', -- PRICING_STATUS_TEXT,
               qpq.QUALIFIER_PRECEDENCE, -- QUALIFIER_PRECEDENCE,
               qpq.QUALIFIER_DATATYPE, -- DATATYPE,
               QP_PREQ_GRP.G_NO, --PRICING_ATTR_FLAG,
               'HQ', -- QUALIFIER_TYPE,
               qpq.EXCLUDER_FLAG, --EXCLUDER_FLAG,
               p_pricing_phase_id, -- PRICING_PHASE_ID,
               qplines.LINE_DETAIL_TYPE_CODE, -- LINE_DETAIL_TYPE_CODE,
               qppatq.MODIFIER_LEVEL_CODE, -- MODIFIER_LEVEL_CODE,
	       --qplines.SEGMENT_ID,
		qplines.derived_qualifier_flag
     FROM
        QP_PREQ_PATRN_QUAL_TMP qppatq,
	qp_qualifiers qpq,
	qp_npreq_line_attrs_tmp qplines
     WHERE
          qppatq.pricing_phase_id = p_pricing_phase_id
      AND qppatq.stage = p_stage
      AND qpq.LIST_HEADER_ID = qppatq.LIST_HEADER_ID
      AND qppatq.list_line_id = -1
      AND qpq.list_line_id = -1
      AND qpq.QUALIFIER_GROUPING_NO = -1
      AND qpq.COMPARISON_OPERATOR_CODE IN (QP_PREQ_GRP.G_OPERATOR_BETWEEN, G_OPERATOR_NOT_EQL)
      AND qppatq.null_other_oprt_count > 0
      AND qppatq.GROUPING_NO <> -1
      AND qplines.SEGMENT_ID = qpq.SEGMENT_ID
      AND qplines.LINE_INDEX = qppatq.LINE_INDEX
      AND qppatq.eq_flag = G_NO
      AND ((nvl(qplines.DERIVED_QUALIFIER_FLAG,'N')='N')
          OR (qplines.DERIVED_QUALIFIER_FLAG = 'Y' AND QPQ.QUALIFY_HIER_DESCENDENTS_FLAG = 'Y')); -- Added for TCA

     IF qp_preq_grp.G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        qp_preq_grp.engine_debug('Successfully inserted Header level BETWEEN , Not = Qualifiers Attributes in table qp_npreq_line_attrs_tmp');
     END IF;

END IF;

 IF qp_preq_grp.G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    qp_preq_grp.engine_debug('Exiting ' || l_routine);
 END IF;

EXCEPTION
WHEN OTHERS THEN
   IF qp_preq_grp.G_DEBUG_ENGINE = FND_API.G_TRUE THEN
      qp_preq_grp.engine_debug('Exception occured - '||SQLERRM);
   END IF;
   x_status_text := l_routine||' '||SQLERRM;
   x_status_code := FND_API.G_RET_STS_ERROR;
END Populate_Temp_Tables_NEQ_BTW;

-- End: KDURGASI changes for pattern based select modifiers

/*+------------------------------------------------------------
  |PROCEDURE PRICE_REQUEST
  +------------------------------------------------------------
*/

PROCEDURE PRICE_REQUEST
(p_line_tbl               IN   LINE_TBL_TYPE,
 p_qual_tbl               IN   QUAL_TBL_TYPE,
 p_line_attr_tbl          IN   LINE_ATTR_TBL_TYPE,
 p_LINE_DETAIL_tbl        IN   LINE_DETAIL_TBL_TYPE,
 p_LINE_DETAIL_qual_tbl   IN   LINE_DETAIL_QUAL_TBL_TYPE,
 p_LINE_DETAIL_attr_tbl   IN   LINE_DETAIL_ATTR_TBL_TYPE,
 p_related_lines_tbl      IN   RELATED_LINES_TBL_TYPE,
 p_control_rec            IN   CONTROL_RECORD_TYPE,
 x_line_tbl               OUT  NOCOPY LINE_TBL_TYPE,
 x_line_qual              OUT  NOCOPY QUAL_TBL_TYPE,
 x_line_attr_tbl          OUT  NOCOPY LINE_ATTR_TBL_TYPE,
 x_line_detail_tbl        OUT  NOCOPY LINE_DETAIL_TBL_TYPE,
 x_line_detail_qual_tbl   OUT  NOCOPY LINE_DETAIL_QUAL_TBL_TYPE,
 x_line_detail_attr_tbl   OUT  NOCOPY LINE_DETAIL_ATTR_TBL_TYPE,
 x_related_lines_tbl      OUT  NOCOPY RELATED_LINES_TBL_TYPE,
 x_return_status          OUT NOCOPY VARCHAR2,
 x_return_status_text     OUT NOCOPY VARCHAR2
 ) AS


 l_line_tbl               LINE_TBL_TYPE;
 l_line_qual              QUAL_TBL_TYPE;
 l_line_attr_tbl          LINE_ATTR_TBL_TYPE;
 l_line_detail_tbl        LINE_DETAIL_TBL_TYPE;
 l_line_detail_qual_tbl   LINE_DETAIL_QUAL_TBL_TYPE;
 l_line_detail_attr_tbl   LINE_DETAIL_ATTR_TBL_TYPE;
 l_related_lines_tbl      RELATED_LINES_TBL_TYPE;
 l_line_index		      PLS_INTEGER;
 x_list_line_id		  PLS_INTEGER;
 l_list_price	            NUMBER;
 l_list_line_id             NUMBER;
 l_return_status            VARCHAR2(240);
 l_pricing_phase_id         PLS_INTEGER;
 l_line_quantity            NUMBER;
 l_line_uom_code            VARCHAR2(30);
 l_priced_quantity          NUMBER;
 l_priced_uom_code          VARCHAR2(30);
 l_GSA_Enabled_Flag         VARCHAR2(1);
 l_GSA_Qualifier_Flag	    VARCHAR2(1);
 l_incompat_resolve_code    VARCHAR2(30);
 l_GSA_Max_Discount_Enabled CONSTANT VARCHAR2(30) := 'QP_VERIFY_GSA';
 l_status_text              VARCHAR2(240);
 l_further_search           VARCHAR2(1) := 'N';
 l_dummy                    VARCHAR2(30);
 l_routine                  VARCHAR2(30);
 l_pricing_effective_date   DATE;
 l_volume_attribute	    VARCHAR2(30);
 l_bypass_pricing           VARCHAR2(30);
 I                          PLS_INTEGER;
 l_FIXED_PRICE              CONSTANT NUMBER := 11.99;
 l_pricelist_phase_count    PLS_INTEGER:=0;
 l_discount_phase_count     PLS_INTEGER:=0;
 l_disc_exist_flag          VARCHAR2(1) := 'N';
 l_rounding_flag            VARCHAR2(1):=NULL;
 l_rounding_factor          PLS_INTEGER:=0;
 l_rare_phase_id            PLS_INTEGER:=5;
 l_exec_flag                VARCHAR2(3):=G_YES;
 l_pricing_status_code      VARCHAR2(30);
 l_pricing_phase            NUMBER;
 l_price_phase_flag         BOOLEAN;
 l_freeze_override_flag     VARCHAR2(3);
 l_output_file			 VARCHAR2(240);
 v_debug_switch    CONSTANT VARCHAR2(30) := 'QP_DEBUG';
 v_om_debug_switch    CONSTANT VARCHAR2(30) := 'ONT_DEBUG_LEVEL';
 l_max_line_detail_index    PLS_INTEGER;
 l_price_flag_indx          NUMBER;
 l_price_flag_yes_only      VARCHAR2(1);
 l_header_limit_exists      VARCHAR2(1);
 l_line_limit_exists        VARCHAR2(1);
 v_order_amount             NUMBER;
 l_pricing_start_time       NUMBER;
 l_pricing_end_time         NUMBER;
 l_time_difference          NUMBER;
 l_pricing_start_redo       NUMBER;
 l_pricing_end_redo         NUMBER;
 l_redo_difference          NUMBER;
 l_prev_pricing_phase_id    NUMBER := -9999;
 l_error_status_code        VARCHAR2(30);
 l_error_status_text        VARCHAR2(240);
 l_time_stats		    VARCHAR2(240);
 l_formula_processing       VARCHAR2(1) := 'N'; --8892565

-- Essilor Fix bug 2789138
 L_MANUAL_ADJUSTMENTS_CALL_FLAG  VARCHAR2(1) := 'N';
 L_RETURN_MANUAL_DISCOUNT   VARCHAR2(1) :=   nvl(FND_PROFILE.VALUE('QP_RETURN_MANUAL_DISCOUNTS'),'N');

 E_SEARCH_FLAG_IS_NULL    EXCEPTION;
 E_INVALID_CONTROL_RECORD EXCEPTION;
 E_ROUTINE_ERRORS         EXCEPTION;
 E_INVALID_PHASE          EXCEPTION;
 E_NO_SOURCE_SYSTEM       EXCEPTION;
 E_DEBUG_ROUTINE_ERROR    EXCEPTION;

 l_gone_in_phase_cur_loop varchar2(1); -- bug 3963888
/*
INDX,QP_PREQ_GRP.price_request.l_phase_cur,QP_EVENT_PHASES_U1,PRICING_EVENT_CODE,1

INDX,QP_PREQ_GRP.price_request.l_phase_cur,QP_PRICING_PHASES_U1,PRICING_PHASE_ID,1
*/
--ignore_pricing start smbalara 8203956
l_line_index_tbl QP_PREQ_GRP.NUMBER_TYPE;
l_price_list_header_id_tbl QP_PREQ_GRP.NUMBER_TYPE;
l_line_quantity_tbl QP_PREQ_GRP.NUMBER_TYPE;
l_line_uom_code_tbl QP_PREQ_GRP.VARCHAR_TYPE;

CURSOR	IGNORE_PRICE_LINES_CUR IS
SELECT	LINE_TMP.LINE_INDEX	L_INDEX,
	ATTRS_TMP1.VALUE_FROM	PRICE_LIST_HEADER_ID,
	LINE_TMP.LINE_QUANTITY	LINE_QUANTITY,
	LINE_TMP.LINE_UOM_CODE	LINE_UOM_CODE
FROM	QP_NPREQ_LINES_TMP LINE_TMP ,
	QP_NPREQ_LINE_ATTRS_TMP ATTRS_TMP,
	QP_NPREQ_LINE_ATTRS_TMP ATTRS_TMP1
WHERE	LINE_TMP.LINE_INDEX=ATTRS_TMP.LINE_INDEX
	AND LINE_TMP.LINE_INDEX=ATTRS_TMP1.LINE_INDEX
	AND ATTRS_TMP.CONTEXT = G_LIST_HEADER_CONTEXT
	AND ATTRS_TMP.ATTRIBUTE = G_IGN_PRIC_ATTRIBUTE
	AND ATTRS_TMP.VALUE_FROM = G_YES
	--AND LINE_TMP.PRICE_FLAG='N'
	AND ATTRS_TMP1.LINE_INDEX=ATTRS_TMP.LINE_INDEX
	AND ATTRS_TMP1.CONTEXT = G_LIST_HEADER_CONTEXT
	AND ATTRS_TMP1.ATTRIBUTE = G_DEF_PL_HDR_ID_ATTRIBUTE ;
--ignore_pricing end smbalara

-- Essilor Fix bug 2789138
--[julin/4865213] merged unions, plan unaffected
 CURSOR l_phase_cur(l_event_code VARCHAR2,
                   l_event_code1 VARCHAR2) IS
  SELECT QPP.PRICING_PHASE_ID,
         QPP.LIST_TYPE_CODE,
         nvl(QPEP.USER_SEARCH_FLAG,QPEP.SEARCH_FLAG) SEARCH_FLAG,
         nvl(QPP.USER_INCOMPAT_RESOLVE_CODE,QPP.INCOMPAT_RESOLVE_CODE) INCOMPAT_RESOLVE_CODE,
         QPP.PHASE_SEQUENCE,
         nvl(QPP.USER_FREEZE_OVERRIDE_FLAG,QPP.FREEZE_OVERRIDE_FLAG) FREEZE_OVERRIDE_FLAG,
	 QPP.NAME,
         --QPEP.PRICING_EVENT_CODE
	 nvl(QPEP.pattern_search_path,nvl(QPP.pattern_search_path,G_PAT_SEARCH_PATH)) pattern_search_path,
	 DECODE(nvl(QPEP.pattern_search_path,nvl(QPP.pattern_search_path,G_PAT_SEARCH_PATH)),1,'Search Headers First','Search Lines First') pattern_search_path_desc
  FROM   QP_PRICING_PHASES QPP, QP_EVENT_PHASES QPEP
  WHERE  ((L_MANUAL_ADJUSTMENTS_CALL_FLAG IS NULL)
          OR
          (L_MANUAL_ADJUSTMENTS_CALL_FLAG = 'N' AND
           NVL(QPP.MANUAL_MODIFIER_FLAG,'B') in ('A', 'B'))
          OR
          (L_MANUAL_ADJUSTMENTS_CALL_FLAG = 'Y' AND
           (L_RETURN_MANUAL_DISCOUNT = 'N' AND
            NVL(QPP.MANUAL_MODIFIER_FLAG,'B') in ('M', 'B'))
           OR
           (L_RETURN_MANUAL_DISCOUNT = 'Y')
          )
         )
   AND  QPEP.PRICING_EVENT_CODE IN
        (SELECT decode(rownum
          ,1 ,substr(l_event_code,1,instr(l_event_code1,',',1,1)-1)
          ,2 ,substr(l_event_code , instr(l_event_code1,',',1,rownum-1) + 1,
             instr(l_event_code1,',',1,rownum)-1 - instr(l_event_code1,',',1,rownum-1))
          ,3 ,substr(l_event_code , instr(l_event_code1,',',1,rownum-1) + 1,
              instr(l_event_code1,',',1,rownum)-1 - instr(l_event_code1,',',1,rownum-1))
          ,4 ,substr(l_event_code , instr(l_event_code1,',',1,rownum-1) + 1,
              instr(l_event_code1,',',1,rownum)-1 - instr(l_event_code1,',',1,rownum-1))
          ,5 ,substr(l_event_code , instr(l_event_code1,',',1,rownum-1) + 1,
              instr(l_event_code1,',',1,rownum)-1 - instr(l_event_code1,',',1,rownum-1))
          ,6 ,substr(l_event_code , instr(l_event_code1,',',1,rownum-1) + 1,
              instr(l_event_code1,',',1,rownum)-1 - instr(l_event_code1,',',1,rownum-1)))
         FROM  qp_event_phases
         WHERE rownum < 7)
  AND    trunc(sysdate) between trunc(nvl(QPEP.START_DATE_ACTIVE,sysdate))
                        and     trunc(nvl(QPEP.END_DATE_ACTIVE,sysdate))
  AND    QPP.PRICING_PHASE_ID = QPEP.PRICING_PHASE_ID
    -- if p_control_rec.get_freight_flag is 'Y' then select phases from qp_pricing_phases table freight_exists column has value 'Y'
  AND    ((nvl(p_control_rec.get_freight_flag, G_NO) = G_YES AND QPP.freight_exists = G_YES) OR
         (nvl(p_control_rec.get_freight_flag, G_NO) = G_NO))
  ORDER  BY 5,3 DESC;

/*
  UNION
  SELECT QPP.PRICING_PHASE_ID,
         QPP.LIST_TYPE_CODE,
         nvl(QPEP.USER_SEARCH_FLAG,QPEP.SEARCH_FLAG) SEARCH_FLAG,
         nvl(QPP.USER_INCOMPAT_RESOLVE_CODE,QPP.INCOMPAT_RESOLVE_CODE) INCOMPAT_RESOLVE_CODE,
         QPP.PHASE_SEQUENCE,
         nvl(QPP.USER_FREEZE_OVERRIDE_FLAG,QPP.FREEZE_OVERRIDE_FLAG) FREEZE_OVERRIDE_FLAG
         --QPEP.PRICING_EVENT_CODE
  FROM   QP_PRICING_PHASES QPP, QP_EVENT_PHASES QPEP
  WHERE  L_MANUAL_ADJUSTMENTS_CALL_FLAG = 'N'
  AND    NVL(QPP.MANUAL_MODIFIER_FLAG,'B') in ('A', 'B')
  AND    QPEP.PRICING_EVENT_CODE IN
        (SELECT decode(rownum
          ,1 ,substr(l_event_code,1,instr(l_event_code1,',',1,1)-1)
          ,2 ,substr(l_event_code , instr(l_event_code1,',',1,rownum-1) + 1,
             instr(l_event_code1,',',1,rownum)-1 - instr(l_event_code1,',',1,rownum-1))
          ,3 ,substr(l_event_code , instr(l_event_code1,',',1,rownum-1) + 1,
              instr(l_event_code1,',',1,rownum)-1 - instr(l_event_code1,',',1,rownum-1))
          ,4 ,substr(l_event_code , instr(l_event_code1,',',1,rownum-1) + 1,
              instr(l_event_code1,',',1,rownum)-1 - instr(l_event_code1,',',1,rownum-1))
          ,5 ,substr(l_event_code , instr(l_event_code1,',',1,rownum-1) + 1,
              instr(l_event_code1,',',1,rownum)-1 - instr(l_event_code1,',',1,rownum-1))
          ,6 ,substr(l_event_code , instr(l_event_code1,',',1,rownum-1) + 1,
              instr(l_event_code1,',',1,rownum)-1 - instr(l_event_code1,',',1,rownum-1)))
         FROM  qp_event_phases
         WHERE rownum < 7)
  AND    trunc(sysdate) between trunc(nvl(QPEP.START_DATE_ACTIVE,sysdate))
                        and     trunc(nvl(QPEP.END_DATE_ACTIVE,sysdate))
  AND    QPP.PRICING_PHASE_ID = QPEP.PRICING_PHASE_ID
    -- if p_control_rec.get_freight_flag is 'Y' then select phases from qp_pricing_phases table freight_exists column has value 'Y'
  AND    ((nvl(p_control_rec.get_freight_flag, G_NO) = G_YES AND QPP.freight_exists = G_YES) OR
         (nvl(p_control_rec.get_freight_flag, G_NO) = G_NO))
UNION
  SELECT QPP.PRICING_PHASE_ID,
         QPP.LIST_TYPE_CODE,
         nvl(QPEP.USER_SEARCH_FLAG,QPEP.SEARCH_FLAG) SEARCH_FLAG,
         nvl(QPP.USER_INCOMPAT_RESOLVE_CODE,QPP.INCOMPAT_RESOLVE_CODE) INCOMPAT_RESOLVE_CODE,
         QPP.PHASE_SEQUENCE,
         nvl(QPP.USER_FREEZE_OVERRIDE_FLAG,QPP.FREEZE_OVERRIDE_FLAG) FREEZE_OVERRIDE_FLAG
         --QPEP.PRICING_EVENT_CODE
  FROM   QP_PRICING_PHASES QPP, QP_EVENT_PHASES QPEP
  WHERE  L_MANUAL_ADJUSTMENTS_CALL_FLAG = 'Y'
  AND    L_RETURN_MANUAL_DISCOUNT = 'N'
  AND    NVL(QPP.MANUAL_MODIFIER_FLAG,'B') in ('M', 'B')
  AND    QPEP.PRICING_EVENT_CODE IN
        (SELECT decode(rownum
          ,1 ,substr(l_event_code,1,instr(l_event_code1,',',1,1)-1)
          ,2 ,substr(l_event_code , instr(l_event_code1,',',1,rownum-1) + 1,
             instr(l_event_code1,',',1,rownum)-1 - instr(l_event_code1,',',1,rownum-1))
          ,3 ,substr(l_event_code , instr(l_event_code1,',',1,rownum-1) + 1,
              instr(l_event_code1,',',1,rownum)-1 - instr(l_event_code1,',',1,rownum-1))
          ,4 ,substr(l_event_code , instr(l_event_code1,',',1,rownum-1) + 1,
              instr(l_event_code1,',',1,rownum)-1 - instr(l_event_code1,',',1,rownum-1))
          ,5 ,substr(l_event_code , instr(l_event_code1,',',1,rownum-1) + 1,
              instr(l_event_code1,',',1,rownum)-1 - instr(l_event_code1,',',1,rownum-1))
          ,6 ,substr(l_event_code , instr(l_event_code1,',',1,rownum-1) + 1,
              instr(l_event_code1,',',1,rownum)-1 - instr(l_event_code1,',',1,rownum-1)))
         FROM  qp_event_phases
         WHERE rownum < 7)
  AND    trunc(sysdate) between trunc(nvl(QPEP.START_DATE_ACTIVE,sysdate))
                        and     trunc(nvl(QPEP.END_DATE_ACTIVE,sysdate))
  AND    QPP.PRICING_PHASE_ID = QPEP.PRICING_PHASE_ID
    -- if p_control_rec.get_freight_flag is 'Y' then select phases from qp_pricing_phases table freight_exists column has value 'Y'
  AND    ((nvl(p_control_rec.get_freight_flag, G_NO) = G_YES AND QPP.freight_exists = G_YES) OR
         (nvl(p_control_rec.get_freight_flag, G_NO) = G_NO))
UNION
  SELECT QPP.PRICING_PHASE_ID,
         QPP.LIST_TYPE_CODE,
         nvl(QPEP.USER_SEARCH_FLAG,QPEP.SEARCH_FLAG) SEARCH_FLAG,
         nvl(QPP.USER_INCOMPAT_RESOLVE_CODE,QPP.INCOMPAT_RESOLVE_CODE) INCOMPAT_RESOLVE_CODE,
         QPP.PHASE_SEQUENCE,
         nvl(QPP.USER_FREEZE_OVERRIDE_FLAG,QPP.FREEZE_OVERRIDE_FLAG) FREEZE_OVERRIDE_FLAG
         --QPEP.PRICING_EVENT_CODE
  FROM   QP_PRICING_PHASES QPP, QP_EVENT_PHASES QPEP
  WHERE  L_MANUAL_ADJUSTMENTS_CALL_FLAG = 'Y'
  AND    L_RETURN_MANUAL_DISCOUNT = 'Y'
  AND    QPEP.PRICING_EVENT_CODE IN
        (SELECT decode(rownum
          ,1 ,substr(l_event_code,1,instr(l_event_code1,',',1,1)-1)
          ,2 ,substr(l_event_code , instr(l_event_code1,',',1,rownum-1) + 1,
             instr(l_event_code1,',',1,rownum)-1 - instr(l_event_code1,',',1,rownum-1))
          ,3 ,substr(l_event_code , instr(l_event_code1,',',1,rownum-1) + 1,
              instr(l_event_code1,',',1,rownum)-1 - instr(l_event_code1,',',1,rownum-1))
          ,4 ,substr(l_event_code , instr(l_event_code1,',',1,rownum-1) + 1,
              instr(l_event_code1,',',1,rownum)-1 - instr(l_event_code1,',',1,rownum-1))
          ,5 ,substr(l_event_code , instr(l_event_code1,',',1,rownum-1) + 1,
              instr(l_event_code1,',',1,rownum)-1 - instr(l_event_code1,',',1,rownum-1))
          ,6 ,substr(l_event_code , instr(l_event_code1,',',1,rownum-1) + 1,
              instr(l_event_code1,',',1,rownum)-1 - instr(l_event_code1,',',1,rownum-1)))
         FROM  qp_event_phases
         WHERE rownum < 7)
  AND    trunc(sysdate) between trunc(nvl(QPEP.START_DATE_ACTIVE,sysdate))
                        and     trunc(nvl(QPEP.END_DATE_ACTIVE,sysdate))
  AND    QPP.PRICING_PHASE_ID = QPEP.PRICING_PHASE_ID
    -- if p_control_rec.get_freight_flag is 'Y' then select phases from qp_pricing_phases table freight_exists column has value 'Y'
  AND    ((nvl(p_control_rec.get_freight_flag, G_NO) = G_YES AND QPP.freight_exists = G_YES) OR
         (nvl(p_control_rec.get_freight_flag, G_NO) = G_NO))*/

/* CURSOR l_phase_cur(l_event_code VARCHAR2,
                   l_event_code1 VARCHAR2) IS
  SELECT QPP.PRICING_PHASE_ID,
         QPP.LIST_TYPE_CODE,
         nvl(QPEP.USER_SEARCH_FLAG,QPEP.SEARCH_FLAG) SEARCH_FLAG,
         nvl(QPP.USER_INCOMPAT_RESOLVE_CODE,QPP.INCOMPAT_RESOLVE_CODE) INCOMPAT_RESOLVE_CODE,
         QPP.PHASE_SEQUENCE,
         nvl(QPP.USER_FREEZE_OVERRIDE_FLAG,QPP.FREEZE_OVERRIDE_FLAG) FREEZE_OVERRIDE_FLAG
         --QPEP.PRICING_EVENT_CODE
  FROM   QP_PRICING_PHASES QPP, QP_EVENT_PHASES QPEP
  WHERE  QPEP.PRICING_EVENT_CODE IN
        (SELECT decode(rownum
          ,1 ,substr(l_event_code,1,instr(l_event_code1,',',1,1)-1)
          ,2 ,substr(l_event_code , instr(l_event_code1,',',1,rownum-1) + 1,
             instr(l_event_code1,',',1,rownum)-1 - instr(l_event_code1,',',1,rownum-1))
          ,3 ,substr(l_event_code , instr(l_event_code1,',',1,rownum-1) + 1,
              instr(l_event_code1,',',1,rownum)-1 - instr(l_event_code1,',',1,rownum-1))
          ,4 ,substr(l_event_code , instr(l_event_code1,',',1,rownum-1) + 1,
              instr(l_event_code1,',',1,rownum)-1 - instr(l_event_code1,',',1,rownum-1))
          ,5 ,substr(l_event_code , instr(l_event_code1,',',1,rownum-1) + 1,
              instr(l_event_code1,',',1,rownum)-1 - instr(l_event_code1,',',1,rownum-1))
          ,6 ,substr(l_event_code , instr(l_event_code1,',',1,rownum-1) + 1,
              instr(l_event_code1,',',1,rownum)-1 - instr(l_event_code1,',',1,rownum-1)))
         FROM  qp_event_phases
         WHERE rownum < 7)
  AND    trunc(sysdate) between trunc(nvl(QPEP.START_DATE_ACTIVE,sysdate))
                        and     trunc(nvl(QPEP.END_DATE_ACTIVE,sysdate))
  AND    QPP.PRICING_PHASE_ID = QPEP.PRICING_PHASE_ID
    -- if p_control_rec.get_freight_flag is 'Y' then select phases from qp_pricing_phases table freight_exists column has value 'Y'
  AND    ((nvl(p_control_rec.get_freight_flag, G_NO) = G_YES AND QPP.freight_exists = G_YES) OR
         (nvl(p_control_rec.get_freight_flag, G_NO) = G_NO))
  ORDER  BY QPP.PHASE_SEQUENCE,SEARCH_FLAG DESC;  */

/*
Can use N2 instead of N4
INDX,QP_PREQ_GRP.price_request.l_get_line_index_cur,qp_npreq_ldets_tmp_N2,PRICING_PHASE_ID,1
INDX,QP_PREQ_GRP.price_request.l_get_line_index_cur,qp_npreq_ldets_tmp_N2,PRICING_STATUS_CODE,2
*/
CURSOR l_get_line_index_cur(p_pricing_phase_id NUMBER) IS
  SELECT DISTINCT LINE_INDEX
  FROM   qp_npreq_ldets_tmp
  WHERE  PRICING_PHASE_ID = p_pricing_phase_id
  AND    PRICING_STATUS_CODE = G_STATUS_NEW;

/*
INDX,QP_PREQ_GRP.price_request.l_get_list_price_cur,qp_npreq_lines_tmp_N1,LINE_INDEX,1
*/
CURSOR l_get_list_price_cur(p_line_index PLS_INTEGER) IS
  SELECT UNIT_PRICE,LINE_QUANTITY,PRICED_QUANTITY,PRICED_UOM_CODE,LINE_UOM_CODE,PRICING_EFFECTIVE_DATE
  FROM   qp_npreq_lines_tmp
  WHERE  LINE_INDEX = p_line_index;
  --FOR UPDATE OF ROUNDING_FACTOR;

/*
INDX,QP_PREQ_GRP.price_request.get_source_system_cur,QP_PRICE_REQ_SOURCES_PK,REQUEST_TYPE_CODE,1
*/
CURSOR get_source_system_cur IS
  SELECT 'X'
  FROM   dual
  WHERE EXISTS
    (Select 'X'
     --From  QP_PRICE_REQ_SOURCES
     From  QP_PRICE_REQ_SOURCES_V /* yangli */
     Where REQUEST_TYPE_CODE
     In (SELECT REQUEST_TYPE_CODE
     FROM qp_npreq_lines_tmp));

CURSOR get_request_type_code_cur IS   -- shu, aso rounding
  SELECT REQUEST_TYPE_CODE
  FROM qp_npreq_lines_tmp
  WHERE rownum=1;

/*
INDX,QP_PREQ_GRP.price_request.debug_cur,- No Index Used -,NA,NA
*/
CURSOR debug_cur IS
SELECT REQUEST_TYPE_CODE,LINE_INDEX,LINE_TYPE_CODE,PRICE_FLAG,PRICE_LIST_HEADER_ID,ROUNDING_FACTOR
FROM qp_npreq_lines_tmp;

/*
INDX,QP_PREQ_GRP.delete_invalid_pbh_children.l_check_deleted_pbh_cur,qp_npreq_ldets_tmp_N3,LINE_INDEX,1
INDX,QP_PREQ_GRP.delete_invalid_pbh_children.l_check_deleted_pbh_cur,qp_npreq_ldets_tmp_N3,PRICING_PHASE_ID,2
INDX,QP_PREQ_GRP.delete_invalid_pbh_children.l_check_deleted_pbh_cur,qp_npreq_ldets_tmp_N3,ASK_FOR_FLAG,3
INDX,QP_PREQ_GRP.delete_invalid_pbh_children.l_check_deleted_pbh_cur,qp_npreq_ldets_tmp_N3,CREATED_FROM_LIST_LINE_TYPE,4
*/
CURSOR l_chk_deleted_pbh_cur(p_line_index IN PLS_INTEGER,
					    p_pricing_phase_id NUMBER) IS
SELECT 'X'
FROM qp_npreq_ldets_tmp
WHERE created_from_list_line_type = G_PRICE_BREAK_TYPE
AND   line_index = p_line_index
AND   pricing_phase_id = p_pricing_phase_id
AND   pricing_status_code <> G_STATUS_NEW;

--check if there is such a list line with passed in phase id
/*
INDX,QP_PREQ_GRP.price_request.l_chk_phase_exists,QP_LIST_LINES_N5,PRICING_PHASE_ID,1
*/

-- [julin/4742368/4766135] modified to try list_header_phases first; if not found, go to
-- lines/headers; assuming that phase/qual on lines is a better EXISTS filter than
-- active flag on headers (can purge if many inactive modifiers)
CURSOR l_chk_phase_exists(p_phase_id IN PLS_INTEGER) IS
SELECT 'x'
FROM   dual
WHERE
EXISTS (
  select /*+ ORDERED */ 'x'
  from qp_list_header_phases lhp, qp_list_headers_b qplh
  where lhp.pricing_phase_id = p_phase_id
    and qplh.list_header_id = lhp.list_header_id
    and qplh.active_flag = 'Y')
OR
EXISTS (
  select /*+ ORDERED */ 'x'
  from qp_list_lines qpll, qp_list_headers_b qplh
  where qpll.pricing_phase_id = p_phase_id
    and qpll.qualification_ind in (0, 4, 20)
    and qpll.list_header_id = qplh.list_header_id
    and qplh.active_flag = 'Y');
/*
-- julin [3773033]: removing hint /*+ ordered use_nl(qpll) index(qpll QP_LIST_LINES_N5) /
-- bug 3804392 - exclude factor lists as well
CURSOR l_chk_phase_exists(p_phase_id IN PLS_INTEGER) IS
select 'x'
  from qp_list_headers_b qplh, qp_list_lines qpll
 where qplh.active_flag = 'Y'
   and qplh.list_type_code not in ('PRL', 'AGR', 'PML')
   and qpll.list_header_id = qplh.list_header_id
   and qpll.pricing_phase_id = p_phase_id
   and qpll.qualification_ind in (0, 2, 4, 6, 8, 10, 12, 14, 20, 22, 28, 30)
   and rownum = 1;
select 'X' from dual
	where exists (select 'X' from qp_list_lines
					where pricing_phase_id = p_phase_id
					AND modifier_level_code IN ('LINE','LINEGROUP','ORDER')  --3169430
					and rownum = 1);*/

/*
INDX,QP_PREQ_GRP.price_request.l_debug,- No Index Used -,NA,NA
*/
CURSOR l_debug IS
SELECT CONTEXT,
       ATTRIBUTE,
       VALUE_FROM,
       LINE_INDEX,
       LINE_DETAIL_INDEX
FROM   qp_npreq_line_attrs_tmp;

/*
INDX,QP_PREQ_GRP.price_request.l_check_pricing_phase_exists,QP_PRICING_PHASES_U1,PRICING_PHASE_ID,1

INDX,QP_PREQ_GRP.price_request.l_check_pricing_phase_exists,QP_EVENT_PHASES_U1,PRICING_EVENT_CODE,1
INDX,QP_PREQ_GRP.price_request.l_check_pricing_phase_exists,QP_EVENT_PHASES_U1,PRICING_PHASE_ID,2
*/
CURSOR l_check_pricing_phase_exists(l_event_code VARCHAR2,l_event_code1 VARCHAR2) IS
SELECT b.pricing_phase_id,b.freeze_override_flag
FROM   qp_event_phases a , qp_pricing_phases b
WHERE  a.pricing_event_code in (SELECT decode(rownum
          ,1 ,substr(l_event_code,1,instr(l_event_code1,',',1,1)-1)
          ,2 ,substr(l_event_code , instr(l_event_code1,',',1,rownum-1) + 1,
             instr(l_event_code1,',',1,rownum)-1 - instr(l_event_code1,',',1,rownum-1))
          ,3 ,substr(l_event_code , instr(l_event_code1,',',1,rownum-1) + 1,
              instr(l_event_code1,',',1,rownum)-1 - instr(l_event_code1,',',1,rownum-1))
          ,4 ,substr(l_event_code , instr(l_event_code1,',',1,rownum-1) + 1,
              instr(l_event_code1,',',1,rownum)-1 - instr(l_event_code1,',',1,rownum-1))
          ,5 ,substr(l_event_code , instr(l_event_code1,',',1,rownum-1) + 1,
              instr(l_event_code1,',',1,rownum)-1 - instr(l_event_code1,',',1,rownum-1))
          ,6 ,substr(l_event_code , instr(l_event_code1,',',1,rownum-1) + 1,
              instr(l_event_code1,',',1,rownum)-1 - instr(l_event_code1,',',1,rownum-1)))
         FROM  qp_event_phases
         WHERE rownum < 7)
AND    a.pricing_phase_id = G_PRICE_LIST_PHASE_ID
AND    b.pricing_phase_id = G_PRICE_LIST_PHASE_ID
AND    trunc(sysdate) BETWEEN trunc(nvl(a.START_DATE_ACTIVE,sysdate))
AND                           trunc(nvl(a.END_DATE_ACTIVE,sysdate));

/*
INDX,QP_PREQ_GRP.price_request.l_get_max_line_detail_index,qp_npreq_ldets_tmp_U1,LINE_DETAIL_INDEX,1
*/
CURSOR l_get_max_line_detail_index IS
 SELECT MAX(LINE_DETAIL_INDEX)
 FROM   qp_npreq_ldets_tmp;

/*
INDX,QP_PREQ_GRP.price_request.l_limit_check_cur,qp_npreq_ldets_tmp_N4,HEADER_LIMIT_EXISTS,1
INDX,QP_PREQ_GRP.price_request.l_limit_check_cur,qp_npreq_ldets_tmp_N4,PRICING_STATUS_CODE,2
*/
CURSOR l_limit_check_cur IS
SELECT HEADER_LIMIT_EXISTS,LINE_LIMIT_EXISTS
FROM   qp_npreq_ldets_tmp
WHERE  PRICING_STATUS_CODE = G_STATUS_NEW
AND    HEADER_LIMIT_EXISTS = G_YES ;

/*
INDX,QP_PREQ_GRP.price_request.order_amount_cur,- No Index Used -,NA,NA
*/
CURSOR order_amount_cur IS
--SELECT nvl(SUM(UNIT_PRICE * PRICED_QUANTITY),0)
select nvl(sum(nvl(line_unit_price * line_quantity, UNIT_PRICE * PRICED_QUANTITY)),0)
FROM   qp_npreq_lines_tmp
 WHERE charge_periodicity_code is NULL;    -- added for recurring charges Bug # 4465168

/*
INDX,QP_PREQ_GRP.price_request.limit_trans_cur,QP_LIMIT_TRANSACTIONS_U1,PRICE_REQUEST_CODE,1
*/
CURSOR limit_trans_cur IS
SELECT 'X'
FROM   qp_limit_transactions
WHERE  price_request_code > fnd_global.local_chr(0);
--WHERE  price_request_code > chr(0);  fix GSCC compilation warning

 l_product_app_id           number; -- bug 3841192

CURSOR pricing_install_status_cur IS
SELECT status
FROM   fnd_product_installations
WHERE  application_id=l_product_app_id;

-- ** Added for showing context and attribute in msg which caused number conversion error **
 CURSOR am_attr_msg_cur
   IS
   SELECT  lattr.value_from,lattr.value_to,lattr.context,
           nvl(SEGMENTS_TL.SEEDED_SEGMENT_NAME,SEGMENTS_TL.USER_SEGMENT_NAME) attribute
    FROM   qp_npreq_line_attrs_tmp lattr,fnd_flex_value_sets VSET,
           qp_segments_b SEGMENTS, qp_prc_contexts_b PCONTEXTS, qp_segments_tl SEGMENTS_TL
    WHERE attribute_type = G_PRICING_TYPE
                AND pricing_status_code = G_STATUS_UNCHANGED
                AND  vset.flex_value_set_id = segments.user_valueset_id
                AND segments.application_id = 661
                AND pcontexts.prc_context_type <> 'QUALIFIER'
                AND pcontexts.prc_context_code = lattr.context
                AND segments.segment_mapping_column = lattr.attribute
                AND segments.prc_context_id = pcontexts.prc_context_id
                AND segments.segment_id = segments_tl.segment_id
                AND vset.format_type = 'N';

CURSOR   attr_msg_cur
   IS
   SELECT  value_from,value_to,context,attribute
    FROM   qp_npreq_line_attrs_tmp lattr
               WHERE attribute_type = G_PRICING_TYPE
            AND pricing_status_code = G_STATUS_UNCHANGED
            AND exists (
                SELECT format_type
                FROM fnd_flex_value_sets VSET,fnd_descr_flex_column_usages DFLEX
                WHERE vset.flex_value_set_id = dflex.flex_value_set_id
                AND dflex.application_id = 661
                AND dflex.descriptive_flexfield_name = 'QP_ATTR_DEFNS_PRICING'
                AND dflex.descriptive_flex_context_code = lattr.context
                AND dflex.application_column_name = lattr.attribute
                AND vset.format_type = 'N');

--added by yangli for Java Engine changes
CURSOR l_lines_info_cur
is
select line_index, unit_price, price_flag
from qp_npreq_lines_tmp
where QP_JAVA_ENGINE_UTIL_PUB.Java_Engine_Running = 'N'
UNION ALL
select line_index, unit_price, price_flag
from qp_int_lines
where QP_JAVA_ENGINE_UTIL_PUB.Java_Engine_Running = 'Y';

--skattama
/*
INDX,QP_PREQ_GRP.list_header_search.l_check_no_list_passed,- No Index Used-,NA,NA
*/
CURSOR L_CHECK_NO_LIST_PASSED IS
SELECT 'X'
FROM   qp_npreq_lines_tmp A
WHERE  PROCESSED_CODE IN (G_NO_LIST_PASSED,G_STS_LHS_NOT_FOUND)
AND    LINE_TYPE_CODE <> G_ORDER_LEVEL
AND (instr(PROCESS_STATUS,'FREEGOOD')=0); -- bug 2693700

/*
INDX,QP_PREQ_GRP.list_header_search.l_check_secondary_search,- No Index Used-,NA,NA
*/
CURSOR l_check_secondary_search IS
SELECT 'X'
FROM   qp_npreq_lines_tmp
WHERE  PROCESSED_CODE = G_STS_LHS_NOT_FOUND
AND    LINE_TYPE_CODE <> G_ORDER_LEVEL
AND (instr(PROCESS_STATUS,'FREEGOOD')=0); -- bug 2693700


--skattama


--added by yangli for Java Engine changes
l_msg_value_from NUMBER;
l_msg_value_to   NUMBER;
l_msg_context    VARCHAR2(240);
l_msg_attribute  VARCHAR2(80);
-- end changes

l_trans VARCHAR2(1);
l_install_status VARCHAR2(1);
l_limits_installed VARCHAR2(1) := FND_PROFILE.VALUE('QP_LIMITS_INSTALLED');
--added by yangli for Java Engine 3086881
l_begin_time number;
l_end_time number;
l_request_id number;
--added by yangli for Java Engine 3086881

--Added for pattern engine
l_devlp_log_dumped VARCHAR2(1) := 'N';
l_lines_cnt NUMBER;

l_patrn_srch_path_desc VARCHAR2(50);
l_patrn_srch_prof_desc VARCHAR2(50);
l_tot_phase_time NUMBER;

BEGIN

QP_PREQ_GRP.Set_QP_Debug;

 --KDURGASI changes for pattern based select modifiers
  G_PAT_SEARCH_PATH   := NVL(FND_PROFILE.VALUE('QP_PATTERN_SEARCH_PATH'),2);
  G_QP_PATTERN_SEARCH := NVL(FND_PROFILE.VALUE('QP_PATTERN_SEARCH'),'N');
  G_LIN_QTY_ATTR_SRCD := 'N';

  SELECT DECODE(G_PAT_SEARCH_PATH,1,'Search Headers First','Search Lines First') INTO l_patrn_srch_path_desc FROM dual;

  IF G_QP_PATTERN_SEARCH = 'B' THEN
	l_patrn_srch_prof_desc:= 'Both Modifier and Price List';
  ELSIF G_QP_PATTERN_SEARCH = 'M' THEN
	l_patrn_srch_prof_desc:= 'Modifier';
  ELSIF G_QP_PATTERN_SEARCH = 'P' THEN
	l_patrn_srch_prof_desc:= 'Price List';
  ELSE
	l_patrn_srch_prof_desc:= 'Pattern Search Off';
  END IF;

--KDURGASI changes for pattern based select modifiers

IF qp_debug_util.IsTimeLogDebugOn THEN
   SELECT COUNT(*) INTO l_lines_cnt FROM qp_npreq_lines_tmp;
END IF;

qp_debug_util.addSummaryTimeLog('Event: ' || p_control_rec.PRICING_EVENT, 0,1,0);
qp_debug_util.addSummaryTimeLog('Number of lines: ' || l_lines_cnt, 0,1,0);
qp_debug_util.addSummaryTimeLog('PROFILE Pattern Search: ' || l_patrn_srch_prof_desc, 0,1,0);
qp_debug_util.addSummaryTimeLog('PROFILE Search Path: ' || l_patrn_srch_path_desc, 0,1,0);

qp_debug_util.tstart('ENGINE_CALL_QPXGPREB','QPXGPREB Price Engine Call (Lines - '||l_lines_cnt||')');

--==========START: Debug Viewere needed by JAVA and PL/SQL engine=======
 --G_QP_DEBUG_PROFILE_VALUE := FND_PROFILE.VALUE(v_debug_switch);
 G_PUBLIC_API_CALL_FLAG := nvl(p_control_rec.public_api_call_flag,'N');

 -- Set the G_DEBUG_ENGINE if the call is not from public API
 IF (G_PUBLIC_API_CALL_FLAG = G_NO) THEN
  Set_QP_Debug;
 END IF;

  l_pricing_start_time := dbms_utility.get_time;

IF G_QP_DEBUG_PROFILE_VALUE = G_ENGINE_TIME_TRACE_ON THEN   --3085171
  --added to note redo generation
  begin
   select value into l_pricing_start_redo
   from v$mystat, v$statname
   where v$mystat.statistic# = v$statname.statistic#
   and v$statname.name = 'redo size';
  exception
  when others then
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('Error in looking up debug'||SQLERRM);
   END IF;
  end;
END IF;

 --l_pricing_start_time := sysdate;

-- Debug Screen related change
-- Irrespective of om debug if qp debug is on debug information is captured into qp debug tables
 IF (G_QP_DEBUG_PROFILE_VALUE = G_YES) OR
    (G_QP_DEBUG_PROFILE_VALUE = G_DONT_WRITE_TO_DEBUG) THEN  -- If qp debug is on
  -- A call to QP_COPY_DEBUG_PVT.Generate_Debug_Req_Seq to initialize Global Variables
  IF (G_PUBLIC_API_CALL_FLAG = G_NO) THEN
     QP_COPY_DEBUG_PVT.Generate_Debug_Req_Seq(l_return_status,
                                              l_status_text);
     --x_return_status := l_return_status; -- fix bug 2756754
     --x_return_status_text := l_status_text; -- fix bug 2756754
     IF l_return_status = FND_API.G_RET_STS_ERROR THEN
        IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
           engine_debug('Error QP_COPY_DEBUG_PVT.Generate_Debug_Req_Seq: '||l_status_text);
        END IF; -- END IF G_DEBUG_ENGINE
        RAISE E_DEBUG_ROUTINE_ERROR; -- fix bug 2756754, dbg failed should not be an hard error
     END IF;
  END IF;
 END IF;


/* IF (NOT OE_DEBUG_PUB.ISDebugOn) THEN --If om debug is not on , then only look at qp_debug
 IF (G_QP_DEBUG_PROFILE_VALUE = G_YES) OR
    (G_QP_DEBUG_PROFILE_VALUE = G_DONT_WRITE_TO_DEBUG) THEN  -- If qp debug is on
  oe_debug_pub.SetDebugLevel(10);
  oe_debug_pub.Initialize;
  oe_debug_pub.debug_on;
  l_output_file := oe_debug_pub.Set_Debug_Mode('FILE');
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug ('The output file is : ' || l_output_file );
  END IF;
  G_DEBUG_ENGINE:= FND_API.G_TRUE;
 ELSE
  G_DEBUG_ENGINE:= FND_API.G_FALSE;
 END IF;
ELSE
 G_DEBUG_ENGINE:= FND_API.G_TRUE;
END IF; */

 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
 engine_debug('***Entering Oracle Pricing***');
 engine_debug('Please set debug level 3 in profile option to see all Pricing Debug Messages');
 engine_debug('-----------------New Engine Call----------------------');
 engine_debug('Pricing Event: ' || p_control_rec.PRICING_EVENT);
 engine_debug('Pricing Engine Version: ' || QP_PREQ_GRP.GET_VERSION);

 END IF;
 X_RETURN_STATUS:=FND_API.G_RET_STS_SUCCESS;
--==========END: Debug Viewere needed by JAVA and PL/SQL engine=======

--======moved here by yangli, needed by JAVA and PL/SQL engine=============
G_TEMP_TABLE_INSERT_FLAG := nvl(p_control_rec.temp_table_insert_flag,'Y');

--Setting current event in debug util
qp_debug_util.setCurrentEvent(p_control_rec.PRICING_EVENT);
--G_CURR_PRICE_EVENT := p_control_rec.PRICING_EVENT;

IF QP_JAVA_ENGINE_UTIL_PUB.Java_Engine_Running = 'N' THEN
  --=====START: Specific to PL/SQL engine =======================
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        ENGINE_DEBUG('Java Engine not Installed ----------');
  END IF;

  -- julin [3805113]: resetting tables used in handle_break/call_calculation_engine
  G_CHILD_VALUE_FROM_TBL.delete;
  G_CHILD_VALUE_TO_TBL.delete;
  G_PARENT_LINE_DETAIL_INDEX_TBL.delete;

 --dbms_output.put_line('Final Debug: ' || oe_debug_pub.g_debug);
 --G_DEBUG_ENGINE := FND_API.G_TRUE;
 --G_LINE_DETAIL_INDEX := 0;
 G_MANUAL_DISCOUNT_FLAG := nvl(FND_PROFILE.VALUE(G_RETURN_MANUAL_DISCOUNTS),'Y'); --p_control_rec.manual_discount_flag;
 G_GSA_CHECK_FLAG  := p_control_rec.gsa_check_flag;
 G_GSA_DUP_CHECK_FLAG  := nvl(p_control_rec.gsa_dup_check_flag,'N');
 --moved to top for both PL/SQL and Java Engine
 --G_TEMP_TABLE_INSERT_FLAG := nvl(p_control_rec.temp_table_insert_flag,'Y');
 G_MANUAL_ADJUSTMENTS_CALL_FLAG := nvl(p_control_rec.manual_adjustments_call_flag,'N');
 G_INSERT_INTO_FORMULA_TMP := FALSE;
 G_INSERT_FORMULA_STEP_VALUES := nvl(FND_PROFILE.VALUE('QP_INSERT_FORMULA_STEP_VALUES'),'Y');
 G_BLIND_DISCOUNT_PROFILE := nvl(FND_PROFILE.VALUE(G_BLIND_DISCOUNT),'N');
 G_MULTI_CURRENCY_PROFILE := nvl(FND_PROFILE.VALUE(G_MULTI_CURRENCY),'N'); -- vivek
 G_QUALIFY_SECONDARY := NVL(FND_PROFILE.VALUE('QP_QUALIFY_SECONDARY_PRICE_LISTS'),'N');--profile option
 --G_USE_MULTI_CURRENCY  := p_control_rec.use_multi_currency; -- Vivek


 G_ORDER_ID := null; -- accum range break

 if p_control_rec.use_multi_currency = 'Y' then
   G_USE_MULTI_CURRENCY := p_control_rec.use_multi_currency;
 else
   -- Added new profile (QP_MULTI_CURRENCY_USAGE) with default value 'N' to maintain
   -- current behaviour,bug 2943033
   G_USE_MULTI_CURRENCY := nvl(fnd_profile.value('QP_MULTI_CURRENCY_USAGE'), 'N');
 end if;

 -- Essilor Fix bug 2789138
 L_MANUAL_ADJUSTMENTS_CALL_FLAG := nvl(p_control_rec.manual_adjustments_call_flag,NULL);

 -- shu ADD TO MAIN
 IF G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN
 	G_MCURR_INSTALLED_USED := 'Y';
 ELSE
 	G_MCURR_INSTALLED_USED := 'N';
 END IF;
 G_SECURITY_CONTROL := nvl(FND_PROFILE.VALUE('QP_SECURITY_CONTROL'), 'OFF'); --security
 G_CURRENT_USER_OP_UNIT := NVL(p_control_rec.org_id, QP_UTIL.GET_ORG_ID); --security
 						     -- [prarasto] changed to use get_org_id instead of profile for implementing MOAC

    --added for moac
    --Initialize MOAC and set org context to Org passed in nvl(p_control_rec.org_id, mo_default_org_id)
    --so that the pricing engine will look at data specific to the
    --passed org or mo_default_org plus global data only

    IF MO_GLOBAL.get_access_mode is null THEN
      MO_GLOBAL.Init('QP');
      IF G_CURRENT_USER_OP_UNIT IS NOT NULL THEN
        MO_GLOBAL.set_policy_context('S', G_CURRENT_USER_OP_UNIT);
      END IF;
    END IF;--MO_GLOBAL


 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('G_SECURITY_CONTROL: '||G_SECURITY_CONTROL);
   engine_debug('G_CURRENT_USER_OP_UNIT: '||G_CURRENT_USER_OP_UNIT);

 END IF;
  --=====END: Specific to PL/SQL engine =======================
END IF; --Java engine is not insalled

--=====START: Set_Request_Id needed by both Java and PL/SQL engine
 -- Set the request id if called from plsql/path and not temp table insert path
 IF (G_TEMP_TABLE_INSERT_FLAG = G_YES) THEN
  QP_Price_Request_Context.Set_Request_Id;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('Request id in QP_PREQ_GRP : ' ||sys_context('qp_context','request_id'));
  END IF;
 END IF;
--=====END: Set_Request_Id needed by both Java and PL/SQL engine

--=====START: No-Pricing-Line check needed by both Java and PL/SQL engine
 l_price_flag_indx := NULL;
 l_price_flag_yes_only := G_NO;

 IF G_TEMP_TABLE_INSERT_FLAG = G_YES THEN -- pl/sql path

 IF (p_line_tbl.COUNT > 0) THEN
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('There are lines to be priced');
  END IF;
  FOR i in p_line_tbl.FIRST .. p_line_tbl.LAST
  LOOP
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('In the Loop');
   engine_debug('Before Pricing Line Index: ' || p_line_tbl(i).line_index);
   engine_debug('Before Pricing Unit Price: ' || p_line_tbl(i).unit_price);
   engine_debug('Before Pricing Price Flag: ' || p_line_tbl(i).price_flag);
   END IF;
  END LOOP;
 ELSE -- else (p_line_tbl.COUNT > 0)
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('There are no lines to be priced');
  END IF;
 END IF; -- end if (p_line_tbl.COUNT > 0)

 ELSE --G_TEMP_TABLE_INSERT_FLAG = 'N', direct insert/performance path, shulin dbg 2437534
  --FOR cl IN (select line_index, unit_price, price_flag from qp_npreq_lines_tmp)
  FOR cl IN l_lines_info_cur --by yangli for Java Engine changes
  LOOP
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('In direct insert Loop / performance path');
   engine_debug('Before Pricing Line Index: ' || cl.line_index);
   engine_debug('Before Pricing Unit Price: ' || cl.unit_price);
   engine_debug('Before Pricing Price Flag: ' || cl.price_flag);
   END IF;
  END LOOP;
END IF;--temp_table_insert_flag

--for Java Engine case, the check here will catch it instead of contacting Java Engine
 IF (G_TEMP_TABLE_INSERT_FLAG = G_YES) THEN -- If records are inserted in pricing engine from pl/sql tables
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('Check to see if all the lines have price flag N');
  END IF;
  I:= p_line_tbl.FIRST;
  WHILE I IS NOT NULL
  LOOP
   IF (p_line_tbl(I).PRICE_FLAG = G_YES or p_line_tbl(I).PRICE_FLAG = G_PHASE) THEN
    l_price_flag_indx := p_line_tbl(I).LINE_INDEX;
    EXIT;
   END IF;
   I:=p_line_tbl.NEXT(I);
  END LOOP;

  I:= p_line_tbl.FIRST;
  WHILE I IS NOT NULL
  LOOP

   	--shu, begin for bug 2437534
  	--if there is at least 1 line with price_flag = 'Y'
	--or if there is at least 1 line with price_flag = 'P' and unit_price is not passed price list search should be done
	IF l_price_flag_yes_only = G_NO THEN  -- shu, 'N' was default init value for l_price_flag_yes_only
		IF p_line_tbl(I).PRICE_FLAG = G_YES
			or (p_line_tbl(I).PRICE_FLAG = G_PHASE -- G_PHASE is 'P'
			and p_line_tbl(I).unit_price is null)
		THEN
			l_price_flag_yes_only := G_YES;
			EXIT;
		END IF;--PRICE_FLAG = G_YES or PRICE_FLAG = G_PHASE
	END IF;--l_price_flag_yes_only
   	-- shu, fix bug 2437534

   I:=p_line_tbl.NEXT(I);
  END LOOP;

   -- The flag tells if there is atleast 1 order line with price_flag = 'Y'
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('Price Flag Yes: ' || l_price_flag_yes_only);

   END IF;
  IF (l_price_flag_indx IS NULL ) THEN
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('All the lines have price flag N.Hence no pricing returning');
   END IF;
   x_line_tbl  := p_line_tbl;
   x_line_qual := p_qual_tbl;
   x_line_attr_tbl := p_line_attr_tbl;
   x_line_detail_tbl := p_line_detail_tbl;
   RETURN; -- No pricing needs to be done as all the lines have price flag as 'N'
  END IF;
 END IF;
--=====END: No-Pricing-Line check needed by both Java and PL/SQL engine

--=====START: needed by both Java and PL/SQL engine, used later in shared code
 --this method will populate G_PRICE_LIST_SEQUENCE and G_PRICE_LIST_PHASE_ID
 --and later NOT-NULL check against these two globals are performed
 Get_Price_List_Sequence(l_return_status,l_status_text);

 IF (l_return_status = FND_API.G_RET_STS_ERROR) THEN
  RAISE E_ROUTINE_ERRORS;
 END IF;
--=====END: needed by both Java and PL/SQL engine, used later in shared code

--=====START: needed by both Java and PL/SQL engine, used in Populate_Output()
 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('Rounding flag: '||p_control_rec.rounding_flag);
 END IF;
 l_rounding_flag := nvl(p_control_rec.rounding_flag,G_YES);
--=====START: needed by both Java and PL/SQL engine, used in Populate_Output()

--********************************************************************
--If user populates the temp tables directly
--the public API will populate the currency_code etc in
--public variables
--********************************************************************
-- qp_number.canonical_mask := 'FM999999999999999999999.99999999999999999999999999999999999999'; --3085147
qp_number.canonical_mask := 'FM999999999999999999999.9999999999999999999999999999999999999999'; --3169430

--=======START: Pre-pricing processing  needed by JAVA and PL/SQL engine======
IF G_TEMP_TABLE_INSERT_FLAG = G_YES THEN

 /*Truncate_Temp_Tables (l_return_status,l_status_text);
 IF l_return_status = FND_API.G_RET_STS_ERROR THEN
   RAISE E_ROUTINE_ERRORS;
 END IF; */

-- qp_number.canonical_mask := 'FM999999999999999999999.99999999999999999999999999999999999999';


 l_bypass_pricing := FND_PROFILE.VALUE(G_BYPASS_PRICING);

 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
 engine_debug ('Pricing Bypass : ' || l_bypass_pricing);

 END IF;
 IF (l_bypass_pricing = 'Y' ) THEN

  x_line_tbl  := p_line_tbl;
  x_line_qual := p_qual_tbl;
  x_line_attr_tbl := p_line_attr_tbl;
  x_line_detail_tbl := p_line_detail_tbl;

  I:= x_line_tbl.FIRST;

 WHILE I IS NOT NULL LOOP
   If x_line_tbl(I).UNIT_PRICE is null or x_line_tbl(I).ADJUSTED_UNIT_PRICE is null
	or x_line_tbl(I).UNIT_PRICE = fnd_api.g_miss_num or
	x_line_tbl(I).ADJUSTED_UNIT_PRICE = fnd_api.g_miss_num then

     x_line_tbl(I).UNIT_PRICE := l_FIXED_PRICE;
     x_line_tbl(I).ADJUSTED_UNIT_PRICE := l_FIXED_PRICE;
     x_line_tbl(I).STATUS_CODE := QP_PREQ_GRP.G_STATUS_UPDATED;
   end if;
   I:=x_line_tbl.NEXT(I);
 END LOOP;

 RETURN;
END IF;

	 IF(p_control_rec.PRICING_EVENT = NULL
	    OR p_control_rec.calculate_flag = NULL
	    OR UPPER(p_control_rec.SIMULATION_FLAG) NOT IN (G_YES,G_NO)
	   ) THEN
	    RAISE E_INVALID_CONTROL_RECORD;
	 END IF;


	 IF(G_PRICE_LIST_SEQUENCE = NULL OR G_PRICE_LIST_SEQUENCE = FND_API.G_MISS_NUM
	    OR G_PRICE_LIST_PHASE_ID = NULL OR  G_PRICE_LIST_PHASE_ID = FND_API.G_MISS_NUM) THEN
	   RAISE E_INVALID_PHASE;
	 END IF;

 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
	engine_debug('Related_lines count: '||p_related_lines_tbl.COUNT);

 END IF;
	IF l_return_status = FND_API.G_RET_STS_ERROR THEN
	  RAISE E_ROUTINE_ERRORS;
	END IF;

        --=====needed by both Java Engine and PL/SQL engine, used in populate_output()
	IF (p_control_rec.calculate_flag = G_CALCULATE_ONLY) THEN
	  l_pricing_status_code := G_STATUS_NEW;
	ELSE
	  l_pricing_status_code := G_STATUS_UNCHANGED;
	END IF;

	OPEN l_check_pricing_phase_exists(p_control_rec.PRICING_EVENT,p_control_rec.PRICING_EVENT || ',');
	FETCH l_check_pricing_phase_exists INTO l_pricing_phase,l_freeze_override_flag;
	CLOSE l_check_pricing_phase_exists;

	IF (l_pricing_phase IS NOT NULL) THEN
	 l_price_phase_flag := TRUE;
	 G_PRICE_PHASE_FLAG := TRUE;
	ELSE
	 l_price_phase_flag := FALSE;
	 G_PRICE_PHASE_FLAG := FALSE;
	END IF;
        --=====needed by both Java Engine and PL/SQL engine, used in populate_output()

ELSE --g_temp_table_insert_flag = 'N', performance path
 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
	engine_debug('Calling application inserted into temp tables');

 END IF;
G_CURRENCY_CODE := QP_PREQ_PUB.G_CURRENCY_CODE;
G_PRICE_PHASE_FLAG := QP_PREQ_PUB.G_PRICE_PHASE_FLAG;
G_PRICE_LIST_SEQUENCE := QP_PREQ_PUB.G_PRICE_LIST_SEQUENCE;
G_PRICE_LIST_PHASE_ID := QP_PREQ_PUB.G_PRICE_LIST_PHASE_ID;
G_MIN_PRICING_DATE := QP_PREQ_PUB.G_MIN_PRICING_DATE;
G_MAX_PRICING_DATE := QP_PREQ_PUB.G_MAX_PRICING_DATE;

l_price_flag_yes_only := NULL; -- reset, default
-- Check if atleast there is one line with price_flag = 'Y'
-- shu, begin bug 2437534 fix
 IF l_price_flag_yes_only is null THEN
   --FOR cl IN (select unit_price, price_flag from qp_npreq_lines_tmp)
   FOR cl IN l_lines_info_cur
   LOOP
   	IF cl.price_flag = G_YES OR (cl.unit_price is NULL and cl.price_flag = G_PHASE) then
   		l_price_flag_yes_only := G_YES;
   		exit;
   	END IF;
  END LOOP;

 END IF;
-- shu, end bug 2437534 fix

l_price_flag_indx := NULL;
-- Check if atleast there is one line with price_flag = 'Y' or price_flag = 'P'
BEGIN
IF QP_JAVA_ENGINE_UTIL_PUB.Java_Engine_Running = 'N' THEN
 SELECT 1
 INTO l_price_flag_indx
 FROM qp_npreq_lines_tmp
 WHERE PRICE_FLAG IN (G_YES,G_PHASE)
 AND   ROWNUM=1;
--added by yangli for Java Engine
ELSE
 SELECT 1
 INTO l_price_flag_indx
 FROM qp_int_lines
 WHERE PRICE_FLAG IN (G_YES, G_PHASE)
 AND ROWNUM=1;
END IF;
--added by yangli for Java Engine
EXCEPTION
 WHEN NO_DATA_FOUND THEN
  l_price_flag_indx := NULL;
END ;

IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
engine_debug('Direct Temp Table Insert Price Flag Yes Only : '||l_price_flag_yes_only);

END IF;
-- This is the code when calling app inserted into temp tables to quit pricing when there are no lines
-- with either price flag = 'Y' or 'P'
IF (l_price_flag_indx IS NULL) THEN
 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
 engine_debug('No Pricing. Returning, call from direct insert into temp tables by calling app');
 END IF;
 RETURN;
END IF;

END IF;---p_control_rec.temp_table_insert_flag = G_NO
--=======END: Pre-pricing processing  needed by JAVA and PL/SQL engine======

 --IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
--engine_debug('Pricing Event: ' || p_control_rec.PRICING_EVENT);
--engine_debug('Pricing Engine Version: ' || QP_PREQ_GRP.GET_VERSION);
 --END IF; -- 4033618

IF (G_TEMP_TABLE_INSERT_FLAG = G_YES) THEN
--=======START: Truncate/Populate_Temp_tables() needed by JAVA and PL/SQL engine======
 Truncate_Temp_Tables (l_return_status,l_status_text);
 IF l_return_status = FND_API.G_RET_STS_ERROR THEN
   RAISE E_ROUTINE_ERRORS;
 END IF;

 Populate_Temp_Tables
           (p_line_tbl,
            p_qual_tbl,
            p_line_attr_tbl,
            p_LINE_DETAIL_tbl,
            p_LINE_DETAIL_qual_tbl,
            p_LINE_DETAIL_attr_tbl,
            p_related_lines_tbl,
            l_rounding_flag,
            l_pricing_status_code,
            l_price_phase_flag,
	    l_freeze_override_flag,
            p_control_rec.pricing_event,
            p_control_rec.calculate_flag,
            l_return_status,
            l_status_text);

 IF l_return_status = FND_API.G_RET_STS_ERROR THEN
  RAISE E_ROUTINE_ERRORS;
 END IF;
--========END: Truncate/Populate_Temp_tables() needed by JAVA and PL/SQL engine======
ELSE
  -----------------START: Specific to PL/SQL Engine----------------------
--added by yangli for Java Engine project
IF QP_JAVA_ENGINE_UTIL_PUB.Java_Engine_Running = 'N' THEN
  -- for accum range break
  -- manually set G_ORDER_ID in the direct insert path
  -- because Populate_Temp_Tables was not called
  BEGIN
    select line_id
    into G_ORDER_ID
    from qp_npreq_lines_tmp
    where line_type_code = QP_PREQ_GRP.G_ORDER_LEVEL;
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    QP_PREQ_GRP.engine_debug(' - could not get order header ID!  Summary request line missing');
 END IF; --4033618
  END;
END IF;--java engine not installed
--added by yangli for Java Engine project
  -----------------END: Specific to PL/SQL Engine----------------------
END IF;

--ignore_pricing start 8203956
IF ( NVL(Fnd_Profile.value('QP_CUSTOM_IGNORE_PRICING'),'N') = 'Y') THEN
	IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
		QP_PREQ_GRP.engine_debug('ignore_pricing : Updating non-pricable lines 1');
	END IF;
	OPEN IGNORE_PRICE_LINES_CUR;
	FETCH IGNORE_PRICE_LINES_CUR BULK COLLECT INTO
	l_line_index_tbl,
	l_price_list_header_id_tbl,
	l_line_quantity_tbl,
	l_line_uom_code_tbl	;
	CLOSE IGNORE_PRICE_LINES_CUR;
	IF (l_line_index_tbl.COUNT > 0) THEN
		IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
			QP_PREQ_GRP.engine_debug('ignore_pricing : Updating non-pricable lines 2');
			--print_tmp_tabs();
		END IF;
		FORALL i in 1 .. l_line_index_tbl.COUNT
		     UPDATE qp_npreq_lines_tmp
		     SET
			price_flag = G_NO,
			PRICE_LIST_HEADER_ID = l_price_list_header_id_tbl(i),
			LINE_UNIT_PRICE = 0,
			UOM_QUANTITY = l_line_quantity_tbl(i),
			PRICED_QUANTITY = l_line_quantity_tbl(i),
			PRICED_UOM_CODE = l_line_uom_code_tbl(i),
			UNIT_PRICE = 0,
			ADJUSTED_UNIT_PRICE = 0,
			processed_flag =G_YES,
			PRICING_STATUS_CODE =G_STATUS_UPDATED
		     WHERE  LINE_INDEX = l_line_index_tbl(i);
	END If;
END IF;
--ignore_pricing end

-- [5112585/5087820]
-- This block of code moved outside of the previous IF-THEN-ELSE block.
-- max(line_detail_index)+1 is now correctly computed for both the PL/SQL table
-- and the direct insert path for the PL/SQL engine.
-----------------START: Specific to PL/SQL Engine----------------------
IF QP_JAVA_ENGINE_UTIL_PUB.Java_Engine_Running = 'N' THEN
  -- Assign the max line detail index
  OPEN l_get_max_line_detail_index;
  FETCH l_get_max_line_detail_index INTO l_max_line_detail_index;
  CLOSE l_get_max_line_detail_index;

  --Put back the changes for bug 2457983
  --in OC case where caller passes adjustments, the adjustments are inserted
  --but G_LINE_DETAIL_INDEX is not incremented which causes a
  --unique constraint violation on qp_npreq_ldets_tmp_U1
  --hence need to fetch the maximum line_detail_index
  G_LINE_DETAIL_INDEX := nvl(l_max_line_detail_index,1);
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('G_LINE_DETAIL_INDEX '||G_LINE_DETAIL_INDEX);
  END IF;
END IF;--java engine not installed
-----------------END: Specific to PL/SQL Engine----------------------

/*+------------------TO INSERT HIERARCHY RECORDS IN ATTRS_TMP  Added for TCA ----+*/

 INSERT_QUALIFIER_HIERARCHY;

/*+------------------------------------------------------------------------------+*/

--added by yangli for Java Engine project
IF QP_JAVA_ENGINE_UTIL_PUB.Java_Engine_Running = 'N' THEN
  -----------------START: Specific to PL/SQL Engine----------------------
 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        ENGINE_DEBUG('Java Engine not Installed ----------');
 END IF;

Update_Processing_Order(l_return_status,l_status_text);
IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
engine_debug('After calling update_procss--');

END IF;
IF l_return_status = FND_API.G_RET_STS_ERROR THEN
  RAISE E_ROUTINE_ERRORS;
END IF;

IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  FOR i in l_debug loop
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('=CONTEXT PASSED: '||i.CONTEXT);
  engine_debug('=ATTRIBUTE     : '||i.ATTRIBUTE);
  engine_debug('=VALUE         : ' ||i.VALUE_FROM);
  engine_debug('=LINE INDEX    : ' ||i.LINE_INDEX);
  engine_debug('================================');
  END IF;
  END LOOP;

  FOR I in debug_cur LOOP
 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
	engine_debug('Request Type Code: '|| I.REQUEST_TYPE_CODE);
	engine_debug('Line Index: '|| I.LINE_INDEX);
	engine_debug('Line Type Code: '|| I.LINE_TYPE_CODE);
	engine_debug('Price Flag: ' || I.PRICE_FLAG);
	engine_debug('Price List Header Id: ' || I.PRICE_LIST_HEADER_ID);
	engine_debug('Rounding Factor : ' || I.ROUNDING_FACTOR);
 END IF;
  END LOOP;


END IF;

/*
INDX,QP_PREQ_GRP.price_request.price_request_upd1,qp_npreq_line_attrs_tmp_N2,PRICING_STATUS_CODE,1
INDX,QP_PREQ_GRP.price_request.price_request_upd1,qp_npreq_line_attrs_tmp_N2,ATTRIBUTE_TYPE,2
*/
/*
INDX,QP_PREQ_GRP.price_request.price_request_sel1,FND_DESCR_FLEX_COL_USAGES_U1,APPLICATION_ID,1
INDX,QP_PREQ_GRP.price_request.price_request_sel1,FND_DESCR_FLEX_COL_USAGES_U1,DESCRIPTIVE_FLEXFIELD_NAME,2
INDX,QP_PREQ_GRP.price_request.price_request_sel1,FND_DESCR_FLEX_COL_USAGES_U1,DESCRIPTIVE_FLEX_CONTEXT_CODE,3
INDX,QP_PREQ_GRP.price_request.price_request_sel1,FND_DESCR_FLEX_COL_USAGES_U1,APPLICATION_COLUMN_NAME,4

INDX,QP_PREQ_GRP.price_request.price_request_sel1,FND_FLEX_VALUE_SETS_U1,FLEX_VALUE_SET_ID,1
*/
	--G_AM_INSTALLED_PROFILE := nvl(FND_PROFILE.value('QP_ATTRIBUTE_MANAGER_INSTALLED'), G_YES); /* default is G_YES by yangli 03/12/2002*/
	G_AM_INSTALLED_PROFILE := QP_UTIL.Attrmgr_Installed;
		/* by yangli 05/02/02*/

       IF G_AM_INSTALLED_PROFILE = G_YES THEN
       BEGIN
            UPDATE /*+ dynamic_sampling(1) */ qp_npreq_line_attrs_tmp lattr
	    SET value_from = qp_number.number_to_canonical(qp_number.canonical_to_number(lattr.value_from)),
	        value_to = qp_number.number_to_canonical(qp_number.canonical_to_number(lattr.value_to))
    	    WHERE attribute_type = G_PRICING_TYPE
	    AND pricing_status_code = G_STATUS_UNCHANGED
	    AND exists (
                SELECT format_type
                FROM fnd_flex_value_sets VSET,
                     qp_segments_b SEGMENTS, qp_prc_contexts_b PCONTEXTS
                WHERE vset.flex_value_set_id = segments.user_valueset_id
                AND segments.application_id = 661
                AND pcontexts.prc_context_type <> 'QUALIFIER'
                AND pcontexts.prc_context_code = lattr.context
                AND segments.segment_mapping_column = lattr.attribute
                AND segments.prc_context_id = pcontexts.prc_context_id
                AND vset.format_type = 'N'); --by yangli 03/06/2002 9:30am

        EXCEPTION
           WHEN OTHERS THEN
                 x_return_status := FND_API.G_RET_STS_ERROR;
                BEGIN

                 FOR l_rec IN am_attr_msg_cur
                 LOOP
                         l_msg_context    := l_rec.context;
                         l_msg_attribute  := l_rec.attribute;
                         l_msg_value_from := qp_number.number_to_canonical(l_rec.value_from);
                         l_msg_value_to   := qp_number.number_to_canonical(l_rec.value_to);
                 END LOOP;

                EXCEPTION
                 WHEN OTHERS THEN
                             l_status_text := 'Exception in QP_PREQ_GRP.PRICE_REQUEST ';
                             l_status_text :=  l_status_text|| 'This Attribute( with Context: ' || l_msg_context || ' and Attribute: '|| l_msg_attribute||' ) is defined as numeric but passed as non-numeric/Errored ';
               IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                 engine_debug('l_status_text '|| l_status_text);
               END IF; --4033618
                END;
                RAISE E_ROUTINE_ERRORS;
         END;

	ELSE

         BEGIN
	    UPDATE qp_npreq_line_attrs_tmp lattr
	    SET value_from = qp_number.number_to_canonical(qp_number.canonical_to_number(lattr.value_from)),
	        value_to = qp_number.number_to_canonical(qp_number.canonical_to_number(lattr.value_to))
	    WHERE attribute_type = G_PRICING_TYPE
	    AND pricing_status_code = G_STATUS_UNCHANGED
	    AND exists (
                SELECT format_type
                FROM fnd_flex_value_sets VSET,fnd_descr_flex_column_usages DFLEX
                WHERE vset.flex_value_set_id = dflex.flex_value_set_id
	        AND dflex.application_id = 661
                AND dflex.descriptive_flexfield_name = 'QP_ATTR_DEFNS_PRICING'
                AND dflex.descriptive_flex_context_code = lattr.context
                AND dflex.application_column_name = lattr.attribute
	        AND vset.format_type = 'N');

         EXCEPTION
        --changes for bug 2174000 a qty>23digits causes numeric or value error
        --due to the format mas in number_to_canonical
        When OTHERS Then
          x_return_status := FND_API.G_RET_STS_ERROR;
              BEGIN
                 FOR l_rec IN attr_msg_cur
                 LOOP
                         l_msg_context    := l_rec.context;
                         l_msg_attribute  := l_rec.attribute;
                         l_msg_value_from := qp_number.number_to_canonical(l_rec.value_from);
                         l_msg_value_to   := qp_number.number_to_canonical(l_rec.value_to);
                 END LOOP;
              EXCEPTION
                         WHEN OTHERS THEN
                             l_status_text := 'Exception in QP_PREQ_GRP.PRICE_REQUEST ';
                             l_status_text := l_status_text || 'This Attribute( with Context: ' || l_msg_context || ' and Attribute: '|| l_msg_attribute||' ) is defined as numeric but passed a
s non-numeric/Errored';
              END;
          Raise E_ROUTINE_ERRORS;
        END;

       END IF; --if G_AM_INSTALLED_PROFILE is true

-- begin shu, aso rounding
FOR i IN get_request_type_code_cur LOOP
  G_REQUEST_TYPE_CODE:=i.request_type_code;
END LOOP;
IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
engine_debug ('G_REQUEST_TYPE_CODE: '||G_REQUEST_TYPE_CODE);
engine_debug ('G_TEMP_TABLE_INSERT_FLAG: '||G_TEMP_TABLE_INSERT_FLAG);
END IF;

-- Code for Pattern Engine
-- To get PTE code

BEGIN
  SELECT pte_code
  INTO G_PTE_CODE
  FROM QP_PTE_REQUEST_TYPES_B
  WHERE request_type_code = G_REQUEST_TYPE_CODE;

EXCEPTION
WHEN OTHERS THEN
   G_PTE_CODE := NULL;
END;

engine_debug ('G_PTE_CODE: '||G_PTE_CODE);

 SELECT MIN(line_index), MAX(line_index)
 INTO G_MIN_LINE_INDEX,G_MAX_LINE_INDEX
 FROM QP_NPREQ_LINES_TMP;

engine_debug ('G_MIN_LINE_INDEX: '||G_MIN_LINE_INDEX);
engine_debug ('G_MAX_LINE_INDEX: '||G_MAX_LINE_INDEX);

-- Pattern Code end


IF (p_control_rec.rounding_flag IS NULL) THEN
  IF G_REQUEST_TYPE_CODE = 'ASO' AND G_TEMP_TABLE_INSERT_FLAG='Y' THEN
    G_ROUNDING_FLAG := 'Q';
  ELSE -- non 'ASO'
    G_ROUNDING_FLAG := 'Y';
  END IF;
ELSE -- p_control_rec.rounding_flag not null, honor what is passed
  G_ROUNDING_FLAG := p_control_rec.rounding_flag;
END IF;
IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
engine_debug ('G_ROUNDING_FLAG: '||G_ROUNDING_FLAG);
END IF;
-- end shu, aso rounding

-- Bug 3143535 - ORDER AMOUNT CALCULATION ISSUE
-- if G_PRICE_PHASE_FLAG = TRUE then *** Comment for bug#3588320 ***
  OPEN order_amount_cur;
  FETCH order_amount_cur INTO G_BEFORE_PRICING_ORD_AMT;
  CLOSE order_amount_cur;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug ('G_BEFORE_PRICING_ORD_AMT: '||G_BEFORE_PRICING_ORD_AMT);
  END IF;
-- end if;

IF (p_control_rec.calculate_flag = G_CALCULATE_ONLY) THEN
qp_debug_util.tstart('CALL_CALCULATION_ENGINE_A','Procedure stage A call CALL_CALCULATION_ENGINE');
  CALL_CALCULATION_ENGINE(p_is_direct_call => TRUE,
                          x_status_code    =>l_return_status,
                          x_status_text    =>l_status_text);
qp_debug_util.tstop('CALL_CALCULATION_ENGINE_A');
  IF l_return_status = FND_API.G_RET_STS_ERROR THEN
    RAISE E_ROUTINE_ERRORS;
  END IF;

ELSIF (p_control_rec.calculate_flag IN (G_SEARCH_N_CALCULATE,G_SEARCH_ONLY) )THEN

-- 4227407/4361975, this call to update_rounding_factor used to be inside l_phase_cur
-- shu, fix bug 2416047
--IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
 -- engine_debug('update_rounding_factor...');
--END IF;
-- Update Rounding Factor, if rounding_flag not N  -- Ravi, shu new rounding
--IF G_ROUNDING_FLAG <> 'N' THEN -- shu, aso rounding,
 --   	 	UPDATE_ROUNDING_FACTOR (
 --   	 		QP_PREQ_GRP.G_MCURR_INSTALLED_USED,
 --   	 		l_return_status,
 --               	l_status_text);
--END IF; -- end if rounding_flag
--IF l_return_status <> FND_API.G_RET_STS_SUCCESS THEN
 -- RAISE E_ROUTINE_ERRORS;
--END IF;

IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
engine_debug('BEFORE event phase loop');
END IF;
 l_gone_in_phase_cur_loop := 'N';
 --KDURGASI changes for pattern based select modifiers
	  IF G_QP_PATTERN_SEARCH IN (G_QP_PATTERN_MOD_SEARCH,G_QP_PATTERN_PRL_SEARCH,G_QP_PATTERN_BOTH_SEARCH) THEN
		qp_debug_util.tstart('populate_attr_values','Populate Hash Key Values');
		--	populate_attr_values(x_status_code => l_return_status,x_status_text => l_status_text);
		populate_segment_id(x_status_code => l_return_status,x_status_text => l_status_text);
			G_PATRNS_TWO_THREE_INSERTED := 'N';   --smuhamme, whethe pattern_id -2 and -3 inserted or not
			  IF l_return_status = FND_API.G_RET_STS_ERROR THEN
				RAISE E_ROUTINE_ERRORS;
			  END IF;
		qp_debug_util.tstop('populate_attr_values');
	  END IF;
  --KDURGASI changes for pattern based select modifiers

qp_debug_util.addSummaryTimeLog('Search time in each Phase:',1,1,0);

 FOR I IN l_phase_cur(l_event_code => p_control_rec.pricing_event,
                      l_event_code1 => p_control_rec.pricing_event || ',') LOOP
 l_gone_in_phase_cur_loop := 'Y';
 l_formula_processing := 'N'; --8892565

 IF (l_prev_pricing_phase_id <> I.pricing_phase_id) THEN

  l_prev_pricing_phase_id := I.pricing_phase_id;

  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('Price Flag Yes Only : '||l_price_flag_yes_only);
  END IF;

  IF (I.phase_sequence = G_PRICE_LIST_SEQUENCE AND G_MANUAL_ADJUSTMENTS_CALL_FLAG = G_NO AND l_price_flag_yes_only = G_YES) THEN

    qp_debug_util.tstart('L_PHASE_CUR_LIST_PRICE','List Line Phase(Id) : '||I.name||' ('||I.pricing_phase_id||') ', false, true);
    --Set Global Flag ( Change)
    G_INSERT_INTO_FORMULA_TMP := TRUE;
    --G_INSERT_INTO_FORMULA_TMP := 'Y';

    -- Call to Source Item Quantity
    /*IF (l_pricelist_phase_count = 0) THEN
	 Source_Vol_Contexts_Attributes(I.PHASE_SEQUENCE,
                                     I.FREEZE_OVERRIDE_FLAG,
							  nvl(p_control_rec.source_order_amount_flag,G_NO),
                                     l_return_status,
                                     l_status_text);
         l_pricelist_phase_count := l_pricelist_phase_count + 1;
    END IF;*/

     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('Working on phase: '||I.pricing_phase_id);
     END IF;

     -- Update the price list id , validated flag
     Update_Price_List_Information(I.freeze_override_flag, l_return_status, l_status_text);  -- fix bug 2756754
     IF l_return_status = FND_API.G_RET_STS_ERROR THEN
       Raise E_ROUTINE_ERRORS;
     END IF;

     -- ********
     -- 4227047/4361975, the call to Update_Rounding_Factor that used to be here
     -- was moved to before this phase cursor
	 IF G_QP_PATTERN_SEARCH IN (G_QP_PATTERN_PRL_SEARCH, G_QP_PATTERN_BOTH_SEARCH) THEN
		create_pattern(G_PRICE_LIST_PHASE_ID, x_status_code =>l_return_status, x_status_text=>l_status_text);
		IF l_return_status <> FND_API.G_RET_STS_SUCCESS THEN
			RAISE E_ROUTINE_ERRORS;
		END IF;
	LIST_HEADER_PATTERN_SEARCH(
			p_pricing_phase_id     => I.pricing_phase_id,
                        p_freeze_override_flag => I.freeze_override_flag,
                        p_control_rec          => p_control_rec,
			x_status_code          => l_return_status,
                        x_status_text          => l_status_text
			);
		IF l_return_status <> FND_API.G_RET_STS_SUCCESS THEN
			RAISE E_ROUTINE_ERRORS;
		END IF;
	 OPEN l_check_secondary_search;
         FETCH l_check_secondary_search INTO l_dummy;

         IF l_check_secondary_search%FOUND THEN
           IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
             engine_debug('Trying to perform pattern  Secondary Search ');
           END IF;
	     PERFORM_SECONDARY_PATRN_SEARCH(I.freeze_override_flag,
				   I.pattern_search_path,
				   p_control_rec,
		                   l_return_status,
		                   l_status_text);
		IF l_return_status <> FND_API.G_RET_STS_SUCCESS THEN
			RAISE E_ROUTINE_ERRORS;
		END IF;
          END IF;
          CLOSE l_check_secondary_search;

	 OPEN l_check_no_list_passed;
	 FETCH l_check_no_list_passed INTO l_dummy;

	 IF (l_check_no_list_passed%FOUND  and (I.SEARCH_FLAG = G_YES OR
	   nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) = G_YES)) THEN
	   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
	     engine_debug('Trying to Perform pattern BIG Search ');
	   END IF;

          SELECT_PRICE_LIST_LINES_PAT(
               p_pricing_phase_id  => I.pricing_phase_id,
               p_freeze_override_flag => I.freeze_override_flag,
               p_search_path => I.pattern_search_path,
               p_control_rec => p_control_rec,
               x_status_code => l_return_status,
               x_status_text => l_status_text
           );
		IF l_return_status <> FND_API.G_RET_STS_SUCCESS THEN
			RAISE E_ROUTINE_ERRORS;
		END IF;
	  -- SELECT_PRICE_LIST_LINES_PATRN API CALL -- DEEPAK ADD CODE


	 END IF;

	 CLOSE l_check_no_list_passed;

     ELSE --G_QP_PATTERN_SEARCH
     qp_debug_util.tstart('PLL_LIST_HEADER_SEARCH','Price List Search - LIST_HEADER_SEARCH API');
     LIST_HEADER_SEARCH(p_pricing_phase_id     => I.pricing_phase_id,
                        p_is_price_list        => TRUE,
                        p_freeze_override_flag => I.freeze_override_flag,
                        p_control_rec          => p_control_rec,
                        p_list_mode            => 'PLL',
                        x_further_search       => l_further_search,
                        x_status_code          => l_return_status,
                        x_status_text          => l_status_text
                        );

      qp_debug_util.tstop('PLL_LIST_HEADER_SEARCH');
      IF l_return_status <> FND_API.G_RET_STS_SUCCESS THEN
        RAISE E_ROUTINE_ERRORS;
      END IF;

      IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
      engine_debug('l_further_search: '||l_further_search);
      engine_debug('l_further_search: '||l_further_search);

      END IF;
	 -- Do further search only if asked for using I.SEARCH_FLAG on the price list phase
	 -- Bug# 1367546

     IF (l_further_search =  G_YES and (I.SEARCH_FLAG = G_YES or
         nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) = G_YES)) -- price book
     THEN
     qp_debug_util.tstart('SELECT_PRICE_LIST_LINES','Select Price List Lines(Search Flag on) - SELECT_PRICE_LIST_LINES API');

         SELECT_PRICE_LIST_LINES(p_pricing_phase_id => I.pricing_phase_id,
                                 p_freeze_override_flag => I.freeze_override_flag,
                                 x_status_code => l_return_status,
                                 x_status_text => l_status_text,
                                 p_control_rec => p_control_rec); -- vivek\
	qp_debug_util.tstop('SELECT_PRICE_LIST_LINES');
       IF l_return_status <> FND_API.G_RET_STS_SUCCESS THEN
        RAISE E_ROUTINE_ERRORS;
       END IF;

      --perform grouping will group all the attributes which
      --contribute to one list. It will compare, the incoming
      --attributes against setup attributes.  If the count all the
      --required attributes match, then it will UPDATE
      --pricing status code of the list from 'T'(transient) to 'N'
      --(new). If doesn't mathch then it will set the status as
      --D_GRP (DELETED by grouping).

      --Evaluating between operator for both qualifiers and pricing attributes
      Evaluate_Between(I.pricing_phase_id,NULL,NULL,l_return_status,l_status_text);

      IF (l_return_status = FND_API.G_RET_STS_ERROR) THEN
       RAISE E_ROUTINE_ERRORS;
      END IF;


      -- Check for multiple item categories and customer classes
      Eliminate_Multiple_Hierarchies(I.pricing_phase_id,l_return_status,l_status_text);

      IF (l_return_status = FND_API.G_RET_STS_ERROR) THEN
       RAISE E_ROUTINE_ERRORS;
      END IF;

      --Handle_Excluder(I.pricing_phase_id,NULL,l_return_status,l_status_text);

      Perform_Grouping(I.pricing_phase_id, NULL,l_return_status, l_status_text);

      IF l_return_status <> FND_API.G_RET_STS_SUCCESS THEN
        RAISE E_ROUTINE_ERRORS;
      END IF;

      --Process_Line_Group(I.pricing_phase_id);

      --Evaluating between operator for both qualifiers and pricing attributes
      Evaluate_Between(I.pricing_phase_id,'Y',NULL,l_return_status,l_status_text);

      IF (l_return_status = FND_API.G_RET_STS_ERROR) THEN
       RAISE E_ROUTINE_ERRORS;
      END IF;

       QP_Resolve_Incompatability_PVT.Determine_Pricing_UOM_And_Qty
				(p_line_index        => NULL,
 				 p_order_uom_code    => NULL,
				 p_order_qty         => NULL,
				 p_pricing_phase_id  => I.pricing_phase_id,
                                 p_call_big_search   => TRUE,
				 x_list_line_id	 => l_list_line_id,
				 x_return_status     => l_return_status,
				 x_return_status_txt => l_status_text);

        IF (l_return_status = FND_API.G_RET_STS_ERROR) THEN
         RAISE E_ROUTINE_ERRORS;
        END IF;

       -- 3773652
       -- re-run Evaluate_Between after UOM conversion to check PLL really qualifies
       begin
         select 'x' into l_dummy
         from qp_npreq_lines_tmp
         where LINE_UOM_CODE <> nvl(PRICED_UOM_CODE, LINE_UOM_CODE)
         and (PRICE_FLAG = G_YES
              or
              PRICE_FLAG = G_PHASE and l_freeze_override_flag = G_YES)
         and rownum = 1;

         Evaluate_Between(i.pricing_phase_id,NULL,NULL,l_return_status,l_status_text);
       exception
         when no_data_found then
           null;
       end;


         Update_Request_Line_Status(p_control_rec,'SUCCESS',i.freeze_override_flag,l_return_status,l_status_text);  --[julin/4708044]
         IF (l_return_status = FND_API.G_RET_STS_ERROR) THEN
          RAISE E_ROUTINE_ERRORS;
         END IF;


         --bug# 2091386 not reflecting the right price on change on UOM on the order line . Since
         --QP_Resolve_Incompatability_PVT.Determine_Pricing_UOM_And_Qty determines the pricing_qty
         --which is needed later in Get_Eligible_Price_Break we need to call Get_Eligible_Price_Break
         --after QP_Resolve_Incompatability_PVT.Determine_Pricing_UOM_And_Qty.
         --By doing this we will get the right price in the PRICE event on change of UOM on the order line
         --for price based on price break
         Get_Eligible_Price_Break(I.pricing_phase_id,NULL,l_return_status,l_status_text);

        -- Update the request line status for lines which got valid price list

        --delete children lines of PBH if the parent PBH line get eliminated in
        --QP_Resolve_Incompatability_PVT

        /*OPEN l_chk_deleted_pbh_cur(J.line_index,G_PRICE_LIST_PHASE_ID);
        FETCH l_chk_deleted_pbh_cur INTO l_dummy;
        IF l_chk_deleted_pbh_cur%FOUND THEN
            Delete_Invalid_PBH_Children(J.line_index,G_PRICE_LIST_PHASE_ID);
        END IF;
        CLOSE l_chk_deleted_pbh_cur;*/

     END IF; -- l_further_search
       END IF; --G_QP_PATTERN_PRL_SEARCH
     -- Bug 3183982, following 4 lines added
     CREATE_QUALIFIER_FROM_LIST(l_return_status,l_status_text);
     IF (l_return_status = FND_API.G_RET_STS_ERROR) THEN
      RAISE E_ROUTINE_ERRORS;
     END IF;

     -- Formula Integration
      Formula_Processing(NULL, --J.LINE_INDEX,
                        I.pricing_phase_id,
                        l_return_status,
                        l_status_text);

    /*IF (l_return_status = FND_API.G_RET_STS_ERROR) THEN
           DELETE_LINES(J.LINE_INDEX,
                        l_return_status,
                        l_status_text);
    END IF;*/


 -- vivek, call new API
 if G_MULTI_CURRENCY_PROFILE = 'Y' and G_USE_MULTI_CURRENCY = 'Y' THEN  /*vivek*/
 	G_MCURR_INSTALLED_USED := 'Y';  -- shulin, used in QPXPCLPB Calculate_List_Price
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('multi-currency TRUE - calling QP_MULTI_CURRENCY_PVT.CURRENCY_CONVERSION_API');
  END IF;
    QP_MULTI_CURRENCY_PVT.CURRENCY_CONVERSION_API(
                                      P_USER_CONVERSION_RATE => P_CONTROL_REC.USER_CONVERSION_RATE
                                     ,P_USER_CONVERSION_TYPE => P_CONTROL_REC.USER_CONVERSION_TYPE
                                     ,P_FUNCTION_CURRENCY => P_CONTROL_REC.FUNCTION_CURRENCY
                                     ,P_ROUNDING_FLAG => nvl(P_CONTROL_REC.ROUNDING_FLAG, 'Y')
                                    );
 end if;
   -- Calculation Engine
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('------Before 1st call cal-----------');

   END IF;

   -- Bug 3183982, following 4 lines commented and moved above before calling formula engine
   --CREATE_QUALIFIER_FROM_LIST(l_return_status,l_status_text);
   --IF (l_return_status = FND_API.G_RET_STS_ERROR) THEN
   -- RAISE E_ROUTINE_ERRORS;
   --END IF;

--   IF p_control_rec.calculate_flag = G_SEARCH_N_CALCULATE THEN
	qp_debug_util.tstart('CALL_CALCULATION_ENGINE_B','Procedure stage B call CALL_CALCULATION_ENGINE');
      Call_Calculation_Engine(p_phase_sequence => I.phase_sequence,
                              p_freeze_override_flag => I.freeze_override_flag,
                              x_status_code =>l_return_status,
                              x_status_text =>l_status_text);
	qp_debug_util.tstop('CALL_CALCULATION_ENGINE_B');
 --  END IF;

     IF (l_return_status = FND_API.G_RET_STS_ERROR) THEN
      RAISE E_ROUTINE_ERRORS;
     END IF;

   --If it is a price list sequence we need to create this
   --list as a qualifier for next phase. Because price list itself
   --can be a qualifier for next phase.

     qp_debug_util.tstop('L_PHASE_CUR_LIST_PRICE',l_tot_phase_time);
     qp_debug_util.addSummaryTimeLog(I.name || ' : ' ||i.pattern_search_path_desc || ' : ' || l_tot_phase_time || 'ms',0,2,0);
ELSE  -- not a price list sequence
--KDURGASI changes for pattern based select modifiers
     qp_debug_util.tstart('L_PHASE_CUR_MODIFIERS','Modifiers Phase(Id) : '||I.name||' ('||I.pricing_phase_id||') ', false, true);

	IF G_QP_PATTERN_SEARCH IN (G_QP_PATTERN_MOD_SEARCH, G_QP_PATTERN_BOTH_SEARCH) then
		create_pattern(i.pricing_phase_id, x_status_code =>l_return_status, x_status_text=>l_status_text);
		 IF (l_return_status = FND_API.G_RET_STS_ERROR) THEN
			RAISE E_ROUTINE_ERRORS;
		 END IF;
	END IF;

    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug ('Starting new a phase, pricing phase id :' || i.pricing_phase_id);
    END IF;
     --do not execute the rest is there is no list lines at all
     --in those rarely used phase.

     -- [julin/4329337/4336077] checking for price list phase before l_chk_phase_exists
     IF (i.pricing_phase_id = G_PRICE_LIST_PHASE_ID) THEN
       l_exec_flag := G_NO;
     ELSE
     --IF i.pricing_phase_id >= l_rare_phase_id THEN
       OPEN l_chk_phase_exists(i.pricing_phase_id);
       FETCH l_chk_phase_exists INTO l_dummy;
       IF l_chk_phase_exists%NOTFOUND THEN
         l_exec_flag := G_NO;
         IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
         engine_debug('In rare_phase_id:'||i.pricing_phase_id||' exec_flag set to N');
         END IF;
       ELSE
         l_exec_flag := G_YES;
       END IF;
       CLOSE l_chk_phase_exists;
     --END IF;
     END IF;

    -- shu, get price_list_header_id for ORDER event, manual adjustments BATCH EVENT
    -- so we can update rounding factor in lines_tmp

    IF (G_PRICE_PHASE_FLAG=FALSE) THEN

      --[julin/pricebook] added hint
      UPDATE qp_npreq_lines_tmp  a
      SET  (price_list_header_id,validated_flag)  =
      (SELECT /*+ index(b QP_PREQ_LINE_ATTRS_TMP_N2) */ distinct qp_number.canonical_to_number(value_from),validated_flag
      FROM qp_npreq_line_attrs_tmp b
      WHERE a.line_index = b.line_index
      AND context = G_LIST_HEADER_CONTEXT
      AND attribute = G_PRICELIST_ATTRIBUTE
      AND attribute_type = G_QUALIFIER_TYPE
      AND pricing_status_code = G_STATUS_UNCHANGED
      AND a.PRICE_LIST_HEADER_ID < 0 )
      WHERE a.PRICE_LIST_HEADER_ID < 0;

      -- ********
      -- 4227047/4361975, the call to Update_Rounding_Factor that used to be here
      -- was moved to before this phase cursor

    END IF; /* G_PRICE_PHASE_FLAG = FALSE */

   IF l_exec_flag = G_YES THEN

    IF (l_discount_phase_count = 0) THEN

         --Set Global Flag
         G_INSERT_INTO_FORMULA_TMP := TRUE;
         --G_INSERT_INTO_FORMULA_TMP := 'Y';

	 Source_Vol_Contexts_Attributes(I.PHASE_SEQUENCE,
                                     	I.FREEZE_OVERRIDE_FLAG,
					nvl(p_control_rec.source_order_amount_flag,G_NO),
                                     	l_return_status,
                                     	l_status_text);
         IF (l_return_status = FND_API.G_RET_STS_ERROR) THEN
          RAISE E_ROUTINE_ERRORS;
         END IF;

         Update_Distinct_Qualifier_Flag(l_return_status,l_status_text);
         IF (l_return_status = FND_API.G_RET_STS_ERROR) THEN
          RAISE E_ROUTINE_ERRORS;
         END IF;

         l_discount_phase_count := l_discount_phase_count + 1;
    END IF;


    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('#9999999999990');

    END IF;
    qp_debug_util.tstart('DIS_LIST_HEADER_SEARCH','Modifier Search - LIST_HEADER_SEARCH API');
     LIST_HEADER_SEARCH(p_pricing_phase_id     => I.pricing_phase_id,
                        p_is_price_list        => FALSE,
                        p_freeze_override_flag => I.freeze_override_flag,
                        p_control_rec          => p_control_rec,
                        p_list_mode            => 'DIS',
                        x_further_search       => l_further_search,
                        x_status_code          => l_return_status,
                        x_status_text          => l_status_text
                        );
      qp_debug_util.tstop('DIS_LIST_HEADER_SEARCH');
      IF l_return_status <> FND_API.G_RET_STS_SUCCESS THEN
        RAISE E_ROUTINE_ERRORS;
      END IF;



      --only modifiers look at search flag
      IF (I.SEARCH_FLAG  =  G_YES) THEN

         l_disc_exist_flag := 'Y';
	 	--KDURGASI changes for pattern based select modifiers
	IF G_QP_PATTERN_SEARCH IN (G_QP_PATTERN_MOD_SEARCH, G_QP_PATTERN_BOTH_SEARCH) THEN
		  qp_debug_util.tstart('PATRN_SELECT_MODIFIERS','Modifier Selection - SELECT_MODIFIERS API');
		  Select_modifiers_patrn (p_pricing_phase_id => I.pricing_phase_id,
				  p_freeze_override_flag => I.freeze_override_flag,
				  p_search_path => I.pattern_search_path,
				  x_status_code => l_return_status,
				  x_status_text => l_status_text);
				  engine_debug('Select_modifiers_patrn-success-'||l_return_status);
		 qp_debug_util.tstop('PATRN_SELECT_MODIFIERS');

         ELSE --KDURGASI changes for pattern based select modifiers

	 qp_debug_util.tstart('SELECT_MODIFIERS','Modifier Selection - SELECT_MODIFIERS API');
         SELECT_MODIFIERS(p_pricing_phase_id => I.pricing_phase_id,
                          p_freeze_override_flag => I.freeze_override_flag,
                          x_status_code => l_return_status,
                          x_status_text => l_status_text);

         qp_debug_util.tstop('SELECT_MODIFIERS');
	 END IF;
       IF l_return_status <> FND_API.G_RET_STS_SUCCESS THEN
        RAISE E_ROUTINE_ERRORS;
       END IF;
      END IF;

	IF G_QP_PATTERN_SEARCH NOT IN (G_QP_PATTERN_MOD_SEARCH, G_QP_PATTERN_BOTH_SEARCH) THEN --KDURGASI changes for pattern based select modifiers
      -- Check for multiple item categories and customer classes
      Eliminate_Multiple_Hierarchies(I.pricing_phase_id,l_return_status,l_status_text);

      IF l_return_status <> FND_API.G_RET_STS_SUCCESS THEN
        RAISE E_ROUTINE_ERRORS;
      END IF;

      --Evaluating between operator for only pricing attributes and not qualifiers
      Evaluate_Between(I.pricing_phase_id,NULL,NULL,l_return_status,l_status_text);

      IF (l_return_status = FND_API.G_RET_STS_ERROR) THEN
       RAISE E_ROUTINE_ERRORS;
      END IF;

	 -- Not needed in modifiers phases as l_outer_qual_cur takes care of this
      --Handle_Excluder(I.pricing_phase_id,l_return_status,l_status_text);

      -- Only product grouping is done in this ...
      Perform_Grouping(I.pricing_phase_id, NULL,l_return_status, l_status_text);

      IF l_return_status <> FND_API.G_RET_STS_SUCCESS THEN
        RAISE E_ROUTINE_ERRORS;
      END IF;
      END IF;  --KDURGASI changes for pattern based select modifiers
      Process_Line_Group(I.pricing_phase_id,l_return_status,l_status_text);
      IF (l_return_status = FND_API.G_RET_STS_ERROR) THEN
       RAISE E_ROUTINE_ERRORS;
      END IF;

      --Evaluating between operator for both qualifiers and pricing attributes
      Evaluate_Between(I.pricing_phase_id,'Y',NULL,l_return_status,l_status_text);

      IF (l_return_status = FND_API.G_RET_STS_ERROR) THEN
       RAISE E_ROUTINE_ERRORS;
      END IF;

      Get_Eligible_Price_Break(I.pricing_phase_id,NULL,l_return_status,l_status_text);
      IF (l_return_status = FND_API.G_RET_STS_ERROR) THEN
       RAISE E_ROUTINE_ERRORS;
      END IF;

      --[julin/5529345]
      QP_Process_Other_Benefits_PVT.Calculate_Recurring_Quantity(I.pricing_phase_id, l_return_status, l_status_text);

      IF (l_return_status = FND_API.G_RET_STS_ERROR) THEN
       RAISE E_ROUTINE_ERRORS;
      END IF;

    FOR J IN l_get_line_index_cur(I.pricing_phase_id)
    LOOP
     OPEN  l_get_list_price_cur(J.LINE_INDEX);
     FETCH l_get_list_price_cur
	INTO l_list_price,l_line_quantity,l_priced_quantity,l_priced_uom_code,l_line_uom_code,l_pricing_effective_date;
     CLOSE l_get_list_price_cur;

     Delete_Un_Asked_For_Promotions(J.LINE_INDEX,
                                    I.pricing_phase_id,
                                    I.INCOMPAT_RESOLVE_CODE,
                                    l_return_status,
                                    l_status_text);

	 -- OID/PRG/DIS/Freight Charges
	 QP_Process_Other_Benefits_PVT.Process_Other_Benefits
                     (J.LINE_INDEX,
                      I.pricing_phase_id,
		      l_pricing_effective_date,
		      l_priced_quantity,
		      p_control_rec.simulation_flag,
		      l_return_status,
		      l_status_text);

        IF l_return_status <> FND_API.G_RET_STS_SUCCESS THEN
           DELETE_LINES(J.LINE_INDEX,
                        l_return_status,
                        l_status_text,
                        l_error_status_code,
                        l_error_status_text);
        END IF;

     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('list price after phase 1 :'||l_list_price);
     END IF;

           --best_price_formula evaluation project 8892565 begin
      IF(NVL(Fnd_Profile.value('QP_BEST_PRICE_FORMULA_EVALUATION'),'N')='Y') THEN
         IF (l_formula_processing = 'N') then
            IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                 engine_debug ('Best price Formula Processing begin');
            END IF;
            Formula_Processing(null,--J.LINE_INDEX,
                               I.pricing_phase_id,
                               l_return_status,
                               l_status_text);
            l_formula_processing :='Y';
         END if;
      END IF;
      --end best_price_formula evaluation project 8892565 end

     --IF (l_list_price IS NOT NULL) THEN
       IF (I.INCOMPAT_RESOLVE_CODE = G_INCOMP_PRECEDENCE) THEN
          IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
          engine_debug('Precedence evaluation');
          END IF;
	  --qp_debug_util.tstart('RESOLVE_INCOMPATABILITY','Resolving Modifiers Incompatability - Resolve_Incompatability API');
	  QP_Resolve_Incompatability_PVT.Resolve_Incompatability
                (I.pricing_phase_id,
                 G_DISCOUNT_PROCESSING,
                 l_list_price,
                 J.LINE_INDEX,
                 l_return_status,
                 l_status_text);
          --qp_debug_util.tstop('RESOLVE_INCOMPATABILITY');
         IF (l_return_status = FND_API.G_RET_STS_ERROR) THEN
          RAISE E_ROUTINE_ERRORS;
         END IF;
       ELSIF (I.INCOMPAT_RESOLVE_CODE = G_INCOMP_BEST_PRICE) THEN
          IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
          engine_debug('Best price for phase');
          END IF;
	  QP_Resolve_Incompatability_PVT.Best_Price_For_Phase
                                   (l_list_price,
                                    J.LINE_INDEX,
                                    I.pricing_phase_id,
                                    l_return_status,
                                    l_status_text);
          IF (l_return_status = FND_API.G_RET_STS_ERROR) THEN
           RAISE E_ROUTINE_ERRORS;
          END IF;
       ELSE
          IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
          engine_debug('Error, invalid incomp code: '||I.INCOMPAT_RESOLVE_CODE);
          END IF;
       END IF;
       IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
       engine_debug ('G_LINE_DETAIL_INDEX 6: '||G_LINE_DETAIL_INDEX);
       END IF;

        --check if there is a pbh line deleted by incomp
        --if it has one, delete the children lines.
        OPEN l_chk_deleted_pbh_cur(J.line_index,I.pricing_phase_id);
        FETCH l_chk_deleted_pbh_cur INTO l_dummy;
        IF l_chk_deleted_pbh_cur%FOUND THEN
            Delete_Invalid_PBH_Children(J.line_index,I.pricing_phase_id,l_return_status,l_status_text);
            IF (l_return_status = FND_API.G_RET_STS_ERROR) THEN
             RAISE E_ROUTINE_ERRORS;
            END IF;
        END IF;
        CLOSE l_chk_deleted_pbh_cur;

     --END IF;


       IF(l_return_status = FND_API.G_RET_STS_ERROR) THEN
            DELETE_LINES(J.LINE_INDEX,
                        l_return_status,
                        l_status_text,
                        l_error_status_code,
                        l_error_status_text);
      END IF;

    END LOOP; --l_get_line_index_cur

    -- Formula  Processing
    --best_price_formula evaluation project 8892565 begin
    IF(NVL(Fnd_Profile.value('QP_BEST_PRICE_FORMULA_EVALUATION'),'N')='N') THEN
         IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                 engine_debug ('Normal flow Formula Processing begin');
         END IF;
          Formula_Processing(NULL, --J.LINE_INDEX,
                             I.pricing_phase_id,
                             l_return_status,
                             l_status_text);
     END IF;
    --best_price_formula evaluation project 8892565 end

    /*IF (l_return_status = FND_API.G_RET_STS_ERROR) THEN
           DELETE_LINES(J.LINE_INDEX,
                        l_return_status,
                        l_status_text);
    END IF;*/
   END IF;    --end if for if l_exec_flag=G_YES
   qp_debug_util.tstop('L_PHASE_CUR_MODIFIERS',l_tot_phase_time);
   qp_debug_util.addSummaryTimeLog(I.name || ' : ' ||i.pattern_search_path_desc || ' : ' || l_tot_phase_time || 'ms',0,2,0);
  END IF;     --end if for if price_list_sequence
   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
   engine_debug('calling Set_Order_List_Rltd');
   END IF;


     Set_Order_Level_Rltd(p_freeze_override_flag =>I.freeze_override_flag,
                         p_pricing_phase_id     =>I.pricing_phase_id,
                         x_status_code          =>l_return_status,
                         x_status_text          =>l_status_text);
     IF (l_return_status = FND_API.G_RET_STS_ERROR) THEN
      RAISE E_ROUTINE_ERRORS;
     END IF;
  END IF; -- l_pricing_phase_id <> I.pricing_phase_id
 END LOOP l_phase_cur;

 IF G_QP_PATTERN_SEARCH IN (G_QP_PATTERN_MOD_SEARCH, G_QP_PATTERN_BOTH_SEARCH, G_QP_PATTERN_PRL_SEARCH) THEN
      IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
	 l_devlp_log_dumped := 'Y';
         qp_Debug_util.print_development_csv;
      END IF;
  END IF;

   --Bug fix 3963888 - Call UPDATE_ROUNDING_FACTOR if l_phase_cur cursor did not return any record
  If l_gone_in_phase_cur_loop = 'N' then
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
      engine_debug('l_gone_in_phase_cur_loop is N');
    END IF;
    -- Update Rounding Factor, if rounding_flag not N  -- Ravi, shu new rounding
   IF G_ROUNDING_FLAG <> 'N' THEN -- shu, aso rounding,
       UPDATE_ROUNDING_FACTOR (
         QP_PREQ_GRP.G_MCURR_INSTALLED_USED,
       l_return_status,
         l_status_text);

   END IF; -- end if rounding_flag
    IF l_return_status <> FND_API.G_RET_STS_SUCCESS THEN
      RAISE E_ROUTINE_ERRORS;
    END IF;
  End if;

 l_product_app_id := 661; -- bug 3963628

 OPEN pricing_install_status_cur;
 FETCH pricing_install_status_cur into l_install_status;
 CLOSE pricing_install_status_cur;

 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
 engine_debug('Pricing Install Status : ' || l_install_status);
 engine_debug('Limits Install Status : ' || l_limits_installed);

 END IF;
 --4900095
 IF QP_PREQ_GRP.G_Service_line_qty_tbl.COUNT = 0 THEN
   QP_PREQ_PUB.Determine_svc_item_quantity;
 END IF;
-- Reset
-- This global variable is used to not calculate the Recurring Qty routine and update the Operand
-- if Limits Code is called to avoid second time calculation of the OPERAND value from the Calculation Engine
-- QP_Process_Other_Limits.Calculate_Recurring_Qty
G_LIMITS_CODE_EXECUTED := 'N';

 -- If advanced pricing and limits profile option = 'Y' call calc engine for limits
 IF (l_install_status = 'I' and l_limits_installed = G_YES and
     UPPER(p_control_rec.simulation_flag) = 'N' and
     nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) <> G_YES) -- price book
 THEN
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('------Advanced Pricing and Limits Profile is Set-----------');
  END IF;
  --IF p_control_rec.calculate_flag = G_SEARCH_N_CALCULATE THEN -- check not needed once limits are installed
  qp_debug_util.tstart('CALL_CALCULATION_ENGINE_C','Procedure stage C call CALL_CALCULATION_ENGINE');
   Call_Calculation_Engine(x_status_code =>l_return_status,
                           x_status_text =>l_status_text);
  qp_debug_util.tstop('CALL_CALCULATION_ENGINE_C');
     IF l_return_status = FND_API.G_RET_STS_ERROR THEN
              RAISE E_ROUTINE_ERRORS;
     END IF;

     G_LIMITS_CODE_EXECUTED := 'Y';

  --END IF;
 ELSE
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('------Not calling calculation Engine of limits-----------');
  END IF;
 END IF ; --l_install_status = 'I' and l_limits_installed = G_YES

END IF; --  END IF for G_SEARCH_ONLY or G_SEARCH_N_CALCULATE


IF (l_install_status = 'I' and l_limits_installed = G_YES and
    UPPER(p_control_rec.simulation_flag) = 'N' and
    nvl(QP_PREQ_PUB.G_CALL_FROM_PRICE_BOOK, G_NO) <> G_YES) -- price book
THEN
qp_debug_util.tstart('LIMITS_CALCULATION','Inside LIMITS_CALCULATION');
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('------Advanced Pricing and Limits Profile is Set 2 -----------');

  END IF;
 --Call the Delete Transactions API only if there is atleast one record in
 --qp_limit_transactions table(that is, if limits functionality being used)
 OPEN  limit_trans_cur;
 FETCH limit_trans_cur INTO l_trans;

 IF limit_trans_cur%FOUND THEN
     QP_Limit_Transactions_PVT.Delete(p_control_rec.pricing_event, l_return_status);
     IF (l_return_status = FND_API.G_RET_STS_ERROR) THEN
      RAISE E_ROUTINE_ERRORS;
     END IF;
 END IF;
 CLOSE limit_trans_cur;

 OPEN  l_limit_check_cur;
 FETCH l_limit_check_cur INTO l_header_limit_exists , l_line_limit_exists;
 CLOSE l_limit_check_cur;

 -- Process Limits and call calculation engine
 IF (l_header_limit_exists = G_YES or l_line_limit_exists = G_YES) THEN
   -- Bug 3143535
   -- get the order amount from attributes. if not found then sum it from order lines
   begin
     select qp_number.canonical_to_number(value_from) -- 5515203
       into v_order_amount
      from qp_npreq_line_attrs_tmp
     where CONTEXT = G_PRIC_VOLUME_CONTEXT
       AND ATTRIBUTE = G_ORDER_AMOUNT_ATTRIBUTE
       AND ATTRIBUTE_TYPE = G_QUALIFIER_TYPE
       AND PRICING_STATUS_CODE = G_STATUS_UNCHANGED
       and rownum = 1;
   exception
     when no_data_found then
       IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
         engine_debug ('order amount not found in attributes ');
       END IF;
       OPEN order_amount_cur;
       FETCH order_amount_cur INTO v_order_amount;
       CLOSE order_amount_cur;
   end;

   IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug ('Total order amount = ' || v_order_amount);
   END IF;

  /*
  INDX,QP_PREQ_GRP.price_request.price_request_upd1,qp_npreq_lines_tmp_N2,LINE_TYPE_CODE,1
  */
  UPDATE qp_npreq_lines_tmp
  SET UNIT_PRICE = v_order_amount,
      PRICED_QUANTITY = 1
  WHERE LINE_TYPE_CODE = 'ORDER';

  QP_Limit_Balance_Check_PVT.Process_Limits(l_return_status,l_status_text);

  IF l_return_status <> FND_API.G_RET_STS_SUCCESS THEN
    RAISE E_ROUTINE_ERRORS;
  END IF;

  --fix for bug 4765137
  --to call the delete txn API to delete the limit transactions
  --for the modifiers that the process_limits API marked deleted
  --during exceptions
  --note that the delete API was already called earlier to delete
  --the transactions for the modifiers the search engine did not apply
  --need to call the delete API again after process_limits which will also
  --update the balance
   --Call the Delete Transactions API only if there is atleast one record in
   --qp_limit_transactions table(that is, if limits functionality being used)
   OPEN  limit_trans_cur;
   FETCH limit_trans_cur INTO l_trans;

     IF limit_trans_cur%FOUND THEN
       QP_Limit_Transactions_PVT.Delete(p_control_rec.pricing_event, l_return_status);
       IF (l_return_status = FND_API.G_RET_STS_ERROR) THEN
        RAISE E_ROUTINE_ERRORS;
       END IF;--l_return_status
     END IF;--limit_trans_cur%FOUND
   CLOSE limit_trans_cur;
  --end fix for bug 4765137


 END IF ;
qp_debug_util.tstop('LIMITS_CALCULATION');
END IF; --l_install_status = 'I' and l_limits_installed = G_YES

 -- Do not Call Calculation Engine if it is from public API Call
 -- l_disc_exist_flag will be G_YES when there are discounts. Make a second calculation engine call
 -- only if there are discounts,since calculation engine is called for pricing once
 IF (G_PUBLIC_API_CALL_FLAG = G_NO and l_disc_exist_flag = G_YES) THEN
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('------Calling Calculation Engine as the call is from Group Engine Call-----------');
  END IF;
  qp_debug_util.tstart('CALL_CALCULATION_ENGINE_D','Procedure stage D call CALL_CALCULATION_ENGINE');
  Call_Calculation_Engine(x_status_code =>l_return_status,
                          x_status_text =>l_status_text);
  qp_debug_util.tstop('CALL_CALCULATION_ENGINE_D');
  IF l_return_status = FND_API.G_RET_STS_ERROR THEN
     RAISE E_ROUTINE_ERRORS;
  END IF;
 ELSE
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
  engine_debug('------Not Calling Calculation Engine as the call is from Public Engine Call-----------');
  END IF;
 END IF;

  qp_debug_util.tstart('REDEEM_COUPONS','Procedure QP_COUPON_PVT.REDEEM_COUPONS');
 l_status_text:='QP_COUPON_PVT.REDEEM_COUPONS';
 QP_COUPON_PVT.REDEEM_COUPONS(p_control_rec.simulation_flag, l_return_status, l_status_text);
  qp_debug_util.tstop('REDEEM_COUPONS');
  IF(l_return_status = FND_API.G_RET_STS_ERROR) THEN
      l_status_text:= 'QP_COUPON_PVT.REDEEM_COUPONS'||l_status_text;
	 RAISE E_ROUTINE_ERRORS;
  END IF;
  -----------------END: Specific to PL/SQL Engine----------------------
ELSE --Java Engine installed
  -----------------START: Specific to Java Engine------------------------
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('Before calling QP_JAVA_ENGINE.request_price..');
    l_begin_time := dbms_utility.get_time;
  END IF;

  l_request_id := QP_Price_Request_Context.GET_REQUEST_ID;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('Request Id:'||l_request_id);
    engine_debug('calc_flag:'||p_control_rec.calculate_flag);
  END IF;

  QP_JAVA_ENGINE.request_price(request_id => l_request_id,
                                p_control_rec => p_control_rec,
                                x_return_status => l_return_status,
                                x_return_status_text => l_status_Text);

  IF(l_return_status = FND_API.G_RET_STS_ERROR) THEN
    --l_status_text:= 'QP_JAVA_ENGINE.request_price:'||l_status_text;
    RAISE E_ROUTINE_ERRORS;
  END IF;
  IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    l_end_time := dbms_utility.get_time;
    engine_debug('Elapsed time for calling QP_JAVA_ENGINE: '||(l_end_time - l_begin_time)/100);
  END IF;
  --------------END: Specific to Java Engine------------------
END IF; -- DONE PL/SQL and JAVA ENGINE CALL SWITCH by yangli

--============START: Populate_Output() needed by Java and PL/SQL engine=============
IF (G_TEMP_TABLE_INSERT_FLAG = G_YES and G_PUBLIC_API_CALL_FLAG = G_NO) THEN
 Populate_Output ( l_line_tbl,
                   l_line_qual,
                   l_line_attr_tbl,
                   l_line_detail_tbl,
                   l_line_detail_qual_tbl,
                   l_line_detail_attr_tbl,
                   l_related_lines_tbl);

 x_line_tbl := l_line_tbl;
 x_line_qual := l_line_qual;
 x_line_attr_tbl := l_line_attr_tbl;
 x_line_detail_tbl := l_line_detail_tbl;
 x_line_detail_qual_tbl := l_line_detail_qual_tbl;
 x_line_detail_attr_tbl := l_line_detail_attr_tbl;
 x_related_lines_tbl :=  l_related_lines_tbl;

 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
 engine_debug('No of record in x_line_detail_attr_tbl: '|| x_line_detail_attr_tbl.count);

 END IF;
END IF;
--===========END: Populate_Output() needed by both Java Engine and PL/SQL engine=======

 --l_pricing_end_time := sysdate;

 --l_pricing_end_time := dbms_utility.get_time;


 --l_time_difference := (l_pricing_end_time - l_pricing_start_time)/100 ;

--============START: Debug Viewer needed by Java and PL/SQL engine=============
IF G_QP_DEBUG_PROFILE_VALUE = G_ENGINE_TIME_TRACE_ON THEN   --3085171
 --added to note redo log
 begin
 select value into l_pricing_end_redo
  from v$mystat, v$statname
  where v$mystat.statistic# = v$statname.statistic#
  and v$statname.name = 'redo size';
 exception
 when others then
 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
 engine_debug('Error in looking up redo end '||SQLERRM);
 END IF;
 end;
END IF;

 	--hw
 	-- change session time and session redo
	g_start_time := g_total_time;
	g_start_redo := g_total_redo;
	g_total_time := g_total_time + (dbms_utility.get_time - l_pricing_start_time)/100;
	g_total_redo := g_total_redo + (l_pricing_end_redo - l_pricing_start_redo);

--Changes for bug2961617
/*
	execute immediate 'select ' || '''' || 'QP_PREQ_GRP: version, start redo, total redo, start time, total time: ' || G_VERSION || ', ' || g_start_redo || ', ' || g_total_redo || ', ' || g_start_time || ', ' || g_total_time || '''' || ' from dual ';
*/

IF G_QP_DEBUG_PROFILE_VALUE = G_ENGINE_TIME_TRACE_ON THEN   --3085171
BEGIN

        execute immediate 'select ' || '''' || 'QP_PREQ_GRP: version, start redo, total redo, start time, total time: ' || G_VERSION || ', ' || g_start_redo || ', ' || g_total_redo || ', ' || g_start_time || ', ' || g_total_time || '''' || ' from dual ';
/*
SELECT 'QP_PREQ_GRP: version, start redo, total redo, start time, total time: '||G_VERSION ||g_start_redo ||g_total_redo ||g_start_time ||g_total_time INTO l_time_stats FROM DUAL;
*/

EXCEPTION

WHEN OTHERS THEN
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('< In Price_Request procedure>. Failed to get time statistics');
    END IF;
END;
END IF;

 /*
  l_redo_difference := l_pricing_end_redo - l_pricing_start_redo ;

 execute immediate 'select '||''''|| ' Total Time in QP_PREQ_GRP(in sec) : ' || l_time_difference||' Total redo in QP_PREQ_GRP : '||l_redo_difference||''''||' from dual ';
 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
 engine_debug('redo log in GRP '||l_redo_difference);
 END IF;
*/

 /* IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
    x_return_status := FND_API.G_RET_STS_ERROR;
    IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
    engine_debug('< In Price_Request procedure>. Populate_Temp_Tables return with errors');
    END IF;
    RETURN;
 END IF; */

   IF (G_QP_DEBUG_PROFILE_VALUE = G_YES) OR
      (G_QP_DEBUG_PROFILE_VALUE = G_DONT_WRITE_TO_DEBUG) THEN  -- If qp debug is on
      IF (G_PUBLIC_API_CALL_FLAG = G_NO) THEN
           QP_COPY_DEBUG_PVT.WRITE_TO_DEBUG_TABLES(p_control_rec,
                                          l_return_status,
                                          l_status_text
                                          );
         --x_return_status := l_return_status; -- fix bug 2756754
         --x_return_status_text := l_status_text; -- fix bug 2756754
         IF l_return_status = FND_API.G_RET_STS_ERROR THEN  -- fix bug 2756754
           IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
             engine_debug('Error QP_COPY_DEBUG_PVT.WRITE_TO_DEBUG_TABLES: '||l_status_text);
           END IF; -- END IF G_DEBUG_ENGINE
           RAISE E_DEBUG_ROUTINE_ERROR; -- fix bug 2756754, dbg error should not be an hard error
         END IF;
      END IF;
   END IF;

	-- added global condition for caching - hwong
	G_NEW_PRICING_CALL := G_YES;
 IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
	engine_debug('hw/pre: change to g_yes');



engine_debug('***Exiting Oracle Pricing***');

 END IF;
--============END: Debug Viewer needed by Java and PL/SQL engine=============

qp_debug_util.tstop('ENGINE_CALL_QPXGPREB');

/*qp_debug_util.tdump;
qp_debug_util.tflush;*/

EXCEPTION
   WHEN E_SEARCH_FLAG_IS_NULL THEN
     x_return_status := FND_API.G_RET_STS_ERROR;
     x_return_status_text := 'The search flag on qp_event_phase is null for phase '||l_pricing_phase_id;
     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug( 'The search flag on qp_event_phase is null for phase '||l_pricing_phase_id);
     END IF;
       IF (G_QP_DEBUG_PROFILE_VALUE = G_YES) OR
          (G_QP_DEBUG_PROFILE_VALUE = G_DONT_WRITE_TO_DEBUG) THEN  -- If qp debug is on
          IF (G_PUBLIC_API_CALL_FLAG = G_NO) THEN
               QP_COPY_DEBUG_PVT.WRITE_TO_DEBUG_TABLES(p_control_rec,
                                              l_return_status,
                                              l_status_text
                                              );
             IF l_return_status = FND_API.G_RET_STS_ERROR THEN
                IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                engine_debug('Error occured in Debug Routine: ' || l_status_text);
                END IF;
             END IF;
          END IF;
       END IF;
   WHEN E_INVALID_CONTROL_RECORD THEN
     x_return_status := FND_API.G_RET_STS_ERROR;
     x_return_status_text := 'INVALID CONTROL RECORD';

       IF (G_QP_DEBUG_PROFILE_VALUE = G_YES) OR
          (G_QP_DEBUG_PROFILE_VALUE = G_DONT_WRITE_TO_DEBUG) THEN  -- If qp debug is on
          IF (G_PUBLIC_API_CALL_FLAG = G_NO) THEN
               QP_COPY_DEBUG_PVT.WRITE_TO_DEBUG_TABLES(p_control_rec,
                                              l_return_status,
                                              l_status_text
                                              );
             IF l_return_status = FND_API.G_RET_STS_ERROR THEN
                IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                engine_debug('Error occured in Debug Routine: ' || l_return_status);
                END IF;
             END IF;
          END IF;
       END IF;
   WHEN E_ROUTINE_ERRORS THEN
     x_return_status := FND_API.G_RET_STS_ERROR;
     x_return_status_text := l_status_text;
     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug(l_status_text);

     END IF;
       IF (G_QP_DEBUG_PROFILE_VALUE = G_YES) OR
          (G_QP_DEBUG_PROFILE_VALUE = G_DONT_WRITE_TO_DEBUG) THEN  -- If qp debug is on
          IF (G_PUBLIC_API_CALL_FLAG = G_NO) THEN
               QP_COPY_DEBUG_PVT.WRITE_TO_DEBUG_TABLES(p_control_rec,
                                              l_return_status,
                                              l_status_text
                                              );
             IF l_return_status = FND_API.G_RET_STS_ERROR THEN
                IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                engine_debug('Error occured in Debug Routine: ' || l_status_text);
                END IF;
             END IF;
          END IF;
       END IF;

       -- Changes for pattern
       IF G_QP_PATTERN_SEARCH IN (G_QP_PATTERN_MOD_SEARCH, G_QP_PATTERN_BOTH_SEARCH, G_QP_PATTERN_PRL_SEARCH) THEN
        IF G_DEBUG_ENGINE = FND_API.G_TRUE AND l_devlp_log_dumped = 'N' THEN
           qp_Debug_util.print_development_csv;
        END IF;
       END IF;
   WHEN E_INVALID_PHASE THEN
      x_return_status := FND_API.G_RET_STS_ERROR;
      x_return_status_text := 'Invalid phase sequence for Price List phase, Check setup data';
      IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
      engine_debug('Invalid phase sequence for Price List phase');

      END IF;
       IF (G_QP_DEBUG_PROFILE_VALUE = G_YES) OR
          (G_QP_DEBUG_PROFILE_VALUE = G_DONT_WRITE_TO_DEBUG) THEN  -- If qp debug is on
          IF (G_PUBLIC_API_CALL_FLAG = G_NO) THEN
                QP_COPY_DEBUG_PVT.WRITE_TO_DEBUG_TABLES(p_control_rec,
                                              l_return_status,
                                              l_status_text
                                              );
             IF l_return_status = FND_API.G_RET_STS_ERROR THEN
                IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                engine_debug('Error occured in Debug Routine: ' || l_status_text);
                END IF;
             END IF;
          END IF;
       END IF;
   WHEN E_NO_SOURCE_SYSTEM THEN
      x_return_status := FND_API.G_RET_STS_ERROR;
      x_return_status_text := ('No source system found for your request type');
      IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
      engine_debug('No source system found for your request type');

      END IF;
       IF (G_QP_DEBUG_PROFILE_VALUE = G_YES) OR
          (G_QP_DEBUG_PROFILE_VALUE = G_DONT_WRITE_TO_DEBUG) THEN  -- If qp debug is on
          IF (G_PUBLIC_API_CALL_FLAG = G_NO) THEN
                QP_COPY_DEBUG_PVT.WRITE_TO_DEBUG_TABLES(p_control_rec,
                                              l_return_status,
                                              l_status_text
                                              );
             IF l_return_status = FND_API.G_RET_STS_ERROR THEN
                IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                engine_debug('Error occured in Debug Routine: ' || l_status_text);
                END IF;
             END IF;
          END IF;
       END IF;
   --fix bug 2756754
   WHEN E_DEBUG_ROUTINE_ERROR THEN
      IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
        engine_debug('Error occured in Debug Routine.');
      END IF;

   WHEN OTHERS THEN
     IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
     engine_debug('In Price_Request: '||l_status_text||' '||SQLERRM);
     END IF;
     x_return_status := FND_API.G_RET_STS_ERROR;
     x_return_status_text := SQLERRM;

       IF (G_QP_DEBUG_PROFILE_VALUE = G_YES) OR
          (G_QP_DEBUG_PROFILE_VALUE = G_DONT_WRITE_TO_DEBUG) THEN  -- If qp debug is on
          IF (G_PUBLIC_API_CALL_FLAG = G_NO) THEN
                QP_COPY_DEBUG_PVT.WRITE_TO_DEBUG_TABLES(p_control_rec,
                                              l_return_status,
                                              l_status_text
                                              );
             IF l_return_status = FND_API.G_RET_STS_ERROR THEN
                IF G_DEBUG_ENGINE = FND_API.G_TRUE THEN
                engine_debug('Error occured in Debug Routine: ' || l_status_text);
                END IF;
             END IF;
          END IF;
       END IF;
END PRICE_REQUEST;



END QP_PREQ_GRP;

/
