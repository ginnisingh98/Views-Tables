--------------------------------------------------------
--  DDL for Package Body PSB_PSBRPERR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PSB_PSBRPERR_XMLP_PKG" AS
/* $Header: PSBRPERRB.pls 120.0 2008/01/07 10:37:55 vijranga noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    L_PROCESS_ID NUMBER;
    L_SOURCE_PROCESS VARCHAR2(80);
    L_PROCESS_NAME VARCHAR2(80);
    L_CONC_ID VARCHAR2(30);
    L_MAX_CONC_ID NUMBER;
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    FND_MESSAGE.SET_NAME('PSB'
                        ,'PSB_NO_DATA_FOUND');
    C_NLS_NO_DATA_EXISTS := FND_MESSAGE.GET;
    FND_MESSAGE.SET_NAME('PSB'
                        ,'PSB_END_OF_REPORT');
    C_NLS_END_OF_REPORT := FND_MESSAGE.GET;
    IF (P_CONC_ID IS NOT NULL AND P_PROCESS_ID IS NULL) THEN
      CP_MAX_CONC_ID := TO_CHAR(P_CONC_ID);
      L_CONC_ID := TO_CHAR(P_CONC_ID);
      SELECT
        PROCESS_ID,
        SOURCE_PROCESS,
        SOURCE_PROCESS_MEANING,
        PROCESS_NAME
      INTO L_PROCESS_ID,P_SOURCE_PROCESS,L_SOURCE_PROCESS,L_PROCESS_NAME
      FROM
        PSB_ERROR_REQUESTS_V
      WHERE CONCURRENT_REQUEST_ID = P_CONC_ID;
      CP_CONC_ID := L_CONC_ID;
      CP_SOURCE_PROCESS := L_SOURCE_PROCESS;
      CP_NAME := L_PROCESS_NAME;
      CP_PROCESS_ID := TO_CHAR(L_PROCESS_ID);
      IF P_SOURCE_PROCESS = 'VALIDATE_BUDGET_HIERARCHY' THEN
        SELECT
          NAME,
          SHORT_NAME
        INTO CP_PROCESS_ID,CP_NAME
        FROM
          PSB_BUDGET_GROUPS
        WHERE BUDGET_GROUP_ID = L_PROCESS_ID;
      END IF;
    END IF;
    IF (P_PROCESS_ID IS NOT NULL AND P_CONC_ID IS NULL) THEN
      SELECT
        MAX(CONCURRENT_REQUEST_ID)
      INTO L_MAX_CONC_ID
      FROM
        PSB_ERROR_MESSAGES
      WHERE PROCESS_ID = P_PROCESS_ID
        AND SOURCE_PROCESS = P_SOURCE_PROCESS
      GROUP BY
        PROCESS_ID,
        SOURCE_PROCESS;
      CP_MAX_CONC_ID := TO_CHAR(L_MAX_CONC_ID);
      FND_MESSAGE.SET_NAME('PSB'
                          ,'PSB_ALL');
      CP_CONC_ID := FND_MESSAGE.GET;
      SELECT
        DISTINCT
        SOURCE_PROCESS_MEANING,
        PROCESS_NAME
      INTO L_SOURCE_PROCESS,L_PROCESS_NAME
      FROM
        PSB_ERROR_REQUESTS_V
      WHERE PROCESS_ID = P_PROCESS_ID
        AND SOURCE_PROCESS = P_SOURCE_PROCESS;
      CP_PROCESS_ID := TO_CHAR(P_PROCESS_ID);
      CP_SOURCE_PROCESS := L_SOURCE_PROCESS;
      CP_NAME := L_PROCESS_NAME;
      IF P_SOURCE_PROCESS = 'VALIDATE_BUDGET_HIERARCHY' THEN
        SELECT
          NAME,
          SHORT_NAME
        INTO CP_PROCESS_ID,CP_NAME
        FROM
          PSB_BUDGET_GROUPS
        WHERE BUDGET_GROUP_ID = P_PROCESS_ID;
      END IF;
    END IF;
    IF (P_CONC_ID IS NOT NULL AND P_PROCESS_ID IS NOT NULL) THEN
      IF P_SOURCE_PROCESS <> 'BUDGET_REVISION' THEN
        SELECT
          PROCESS_ID,
          PROCESS_NAME
        INTO L_PROCESS_ID,L_PROCESS_NAME
        FROM
          PSB_ERROR_REQUESTS_V
        WHERE CONCURRENT_REQUEST_ID = P_CONC_ID;
      END IF;
      IF (P_SOURCE_PROCESS <> 'BUDGET_REVISION') AND L_PROCESS_ID <> P_PROCESS_ID THEN
        SELECT
          - 1
        INTO L_MAX_CONC_ID
        FROM
          DUAL;
        CP_MAX_CONC_ID := TO_CHAR(L_MAX_CONC_ID);
      ELSE
        CP_MAX_CONC_ID := TO_CHAR(P_CONC_ID);
      END IF;
      CP_CONC_ID := P_CONC_ID;
      CP_SOURCE_PROCESS := P_SOURCE_PROCESS;
      CP_PROCESS_ID := P_PROCESS_ID;
      L_PROCESS_ID := P_PROCESS_ID;
      CP_NAME := L_PROCESS_NAME;
      IF P_SOURCE_PROCESS = 'VALIDATE_BUDGET_HIERARCHY' THEN
        SELECT
          NAME,
          SHORT_NAME
        INTO CP_PROCESS_ID,CP_NAME
        FROM
          PSB_BUDGET_GROUPS
        WHERE BUDGET_GROUP_ID = L_PROCESS_ID;
      END IF;
    END IF;
    RETURN TRUE;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      NULL;
    WHEN OTHERS THEN
      NULL;
  END BEFOREREPORT;
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;
  FUNCTION BEFOREPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END BEFOREPFORM;
  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERPFORM;
  FUNCTION BETWEENPAGE RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END BETWEENPAGE;
  FUNCTION C_NLS_END_OF_REPORT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_END_OF_REPORT;
  END C_NLS_END_OF_REPORT_P;
  FUNCTION C_NLS_NO_DATA_EXISTS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_NO_DATA_EXISTS;
  END C_NLS_NO_DATA_EXISTS_P;
  FUNCTION P_CONC_REQUEST_ID_P RETURN NUMBER IS
  BEGIN
    RETURN P_CONC_REQUEST_ID;
  END P_CONC_REQUEST_ID_P;
  FUNCTION CP_PROCESS_ID_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_PROCESS_ID;
  END CP_PROCESS_ID_P;
  FUNCTION CP_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_NAME;
  END CP_NAME_P;
  FUNCTION CP_SOURCE_PROCESS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_SOURCE_PROCESS;
  END CP_SOURCE_PROCESS_P;
  FUNCTION CP_CONC_ID_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_CONC_ID;
  END CP_CONC_ID_P;
  FUNCTION CP_MAX_CONC_ID_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_MAX_CONC_ID;
  END CP_MAX_CONC_ID_P;
END PSB_PSBRPERR_XMLP_PKG;






/
