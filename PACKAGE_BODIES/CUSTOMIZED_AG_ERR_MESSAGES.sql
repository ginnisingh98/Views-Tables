--------------------------------------------------------
--  DDL for Package Body CUSTOMIZED_AG_ERR_MESSAGES
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."CUSTOMIZED_AG_ERR_MESSAGES" AS
/* $Header: POXAGERB.pls 115.3 2002/11/23 03:36:21 sbull ship $ */


/*
   Created : Imran Ali 02/11/99
*/

--
-- Set_Message_Attribute
--   Sets the workflow error attribute with an encoded form of the message to be
--   passed back to the client.
--   Can take a max of 3 tokens and their values.
-- IN
--   itemtype  - A valid item type from (WF_ITEM_TYPES table).
--   itemkey   - A string generated by call to AOL's INITIALIZE routine.
--   funcmode  - Run/Cancel
-- OUT
--   Result
--	none

--
-- Function Attributes
--	application_code - Short name of the application the message is associated with
--	message_name   	 - Message name as defined in the message dictionary
-- 	token1 		 - First token to be substituted in the message
-- 	token1_value 	 - Value of the first token to be substituted in the message
-- 	token2 		 - Second token to be substituted in the message
-- 	token2_value 	 - Value of the second token to be substituted in the message
-- 	token3 		 - Third token to be substituted in the message
-- 	token3_value 	 - Value of the third token to be substituted in the message
--

procedure  Set_Message_Attribute ( itemtype        in  varchar2,
                              	   itemkey         in  varchar2,
	                           actid           in number,
                                   funcmode        in  varchar2,
                                   result          out NOCOPY varchar2    )
IS
	application_code	varchar2(25);
	FB_ERROR_MSG  		varchar2(2000);
        message_name 		varchar2(250);
	token1			varchar2(60);
	token1_value		varchar2(60);
	token2			varchar2(60);
	token2_value		varchar2(60);
	token3			varchar2(60);
	token3_value		varchar2(60);
	x_progress              varchar2(1) := '0';
begin

  -- Do nothing in cancel or timeout mode

  if (funcmode <> wf_engine.eng_run) then
      result := wf_engine.eng_null;
      return;
  end if;

  -- Get the function activity attributes

  application_code := wf_engine.GetActivityAttrText(itemtype, itemkey, actid, 'APPLICATION_CODE');
  message_name 	   := wf_engine.GetActivityAttrText(itemtype, itemkey, actid, 'MESSAGE_NAME');
  token1 	   := wf_engine.GetActivityAttrText(itemtype, itemkey, actid, 'TOKEN1');
  token1_value 	   := wf_engine.GetActivityAttrText(itemtype, itemkey, actid, 'TOKEN1_VALUE');
  token2 	   := wf_engine.GetActivityAttrText(itemtype, itemkey, actid, 'TOKEN2');
  token2_value 	   := wf_engine.GetActivityAttrText(itemtype, itemkey, actid, 'TOKEN2_VALUE');
  token3 	   := wf_engine.GetActivityAttrText(itemtype, itemkey, actid, 'TOKEN3');
  token3_value 	   := wf_engine.GetActivityAttrText(itemtype, itemkey, actid, 'TOKEN3_VALUE');

  x_progress := '1';

  Begin
  	FND_MESSAGE.SET_NAME(application_code, message_name);

  	x_progress := '2';
	if token1 is not null then
  		FND_MESSAGE.SET_TOKEN(token1, token1_value);
	end if;

	if token2 is not null then
  		FND_MESSAGE.SET_TOKEN(token2, token2_value);
	end if;

	if token3 is not null then
  		FND_MESSAGE.SET_TOKEN(token3, token3_value);
	end if;

  	FB_ERROR_MSG := FND_MESSAGE.GET_ENCODED;

  	x_progress := '3';
	if FB_ERROR_MSG is not null then
  		wf_engine.SetItemAttrText (  itemtype=>itemtype,
                	                     itemkey=>itemkey,
                        	             aname=>'ERROR_MESSAGE',
                                	     avalue=>FB_ERROR_MSG );
	end if;

  Exception
	When others then
		null;
  End;

  return;

EXCEPTION
  WHEN OTHERS THEN
    	wf_core.context('CUSTOMIZED_AG_ERR_MESSAGES','Set_Message_Attribute',x_progress);
    	raise;
end Set_Message_Attribute;

END CUSTOMIZED_AG_ERR_MESSAGES;

/
