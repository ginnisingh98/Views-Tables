--------------------------------------------------------
--  DDL for Package Body ENG_CHANGE_LINES_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."ENG_CHANGE_LINES_PKG" as
/* $Header: ENGCHLUB.pls 115.8 2003/11/22 18:59:27 sshrikha ship $ */
procedure INSERT_ROW (
  X_ROWID in out NOCOPY VARCHAR2,
  X_CHANGE_LINE_ID in NUMBER,
  X_REQUEST_ID in NUMBER,
  X_CHANGE_ID in NUMBER,
  X_SEQUENCE_NUMBER in NUMBER,
  X_CHANGE_TYPE_ID in NUMBER,
  X_STATUS_CODE in VARCHAR2,
  X_ASSIGNEE_ID in NUMBER,
  X_NEED_BY_DATE in DATE,
  X_ORIGINAL_SYSTEM_REFERENCE in VARCHAR2,
  X_NAME in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_SCHEDULED_DATE in DATE,
  X_IMPLEMENTATION_DATE in DATE,
  X_CANCELATION_DATE in DATE,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER,
  X_PROGRAM_ID                IN NUMBER,
  X_PROGRAM_APPLICATION_ID    IN NUMBER,
  X_PROGRAM_UPDATE_DATE       IN DATE,
  X_APPROVAL_STATUS_TYPE      IN NUMBER,
  X_APPROVAL_DATE             IN DATE,
  X_APPROVAL_REQUEST_DATE     IN DATE,
  X_ROUTE_ID                  IN NUMBER,
  X_REQUIRED_FLAG             IN VARCHAR2,
  X_COMPLETE_BEFORE_STATUS_CODE IN NUMBER,
  X_START_AFTER_STATUS_CODE   IN NUMBER

) is
  cursor C is select ROWID from ENG_CHANGE_LINES
    where CHANGE_LINE_ID = X_CHANGE_LINE_ID
    ;
begin
  insert into ENG_CHANGE_LINES (
    CHANGE_LINE_ID,
    REQUEST_ID,
    CHANGE_ID,
    SEQUENCE_NUMBER,
    CHANGE_TYPE_ID,
    SCHEDULED_DATE,
    IMPLEMENTATION_DATE,
    CANCELATION_DATE,
    STATUS_CODE,
    ASSIGNEE_ID,
    NEED_BY_DATE,
    ORIGINAL_SYSTEM_REFERENCE,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    APPROVAL_STATUS_TYPE,
    APPROVAL_DATE,
    APPROVAL_REQUEST_DATE,
    ROUTE_ID,
    REQUIRED_FLAG,
    COMPLETE_BEFORE_STATUS_CODE,
    START_AFTER_STATUS_CODE

  ) values (
    X_CHANGE_LINE_ID,
    X_REQUEST_ID,
    X_CHANGE_ID,
    X_SEQUENCE_NUMBER,
    X_CHANGE_TYPE_ID,
    X_SCHEDULED_DATE,
    X_IMPLEMENTATION_DATE,
    X_CANCELATION_DATE,
    X_STATUS_CODE,
    X_ASSIGNEE_ID,
    X_NEED_BY_DATE,
    X_ORIGINAL_SYSTEM_REFERENCE,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN,
    NVL(X_APPROVAL_STATUS_TYPE,1),
    X_APPROVAL_DATE,
    X_APPROVAL_REQUEST_DATE,
    X_ROUTE_ID,
    X_REQUIRED_FLAG,
    X_COMPLETE_BEFORE_STATUS_CODE,
    X_START_AFTER_STATUS_CODE
  );

  insert into ENG_CHANGE_LINES_TL (
    CHANGE_LINE_ID,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    NAME,
    DESCRIPTION,
    LANGUAGE,
    SOURCE_LANG
  ) select
    X_CHANGE_LINE_ID,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN,
    X_NAME,
    X_DESCRIPTION,
    L.LANGUAGE_CODE,
    userenv('LANG')
  from FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and not exists
    (select NULL
    from ENG_CHANGE_LINES_TL T
    where T.CHANGE_LINE_ID = X_CHANGE_LINE_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);

  open c;
  fetch c into X_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

end INSERT_ROW;

procedure LOCK_ROW (
  X_CHANGE_LINE_ID in NUMBER,
  X_REQUEST_ID in NUMBER,
  X_CHANGE_ID in NUMBER,
  X_SEQUENCE_NUMBER in NUMBER,
  X_CHANGE_TYPE_ID in NUMBER,
  X_STATUS_CODE in VARCHAR2,
  X_ASSIGNEE_ID in NUMBER,
  X_NEED_BY_DATE in DATE,
  X_ORIGINAL_SYSTEM_REFERENCE in VARCHAR2,
  X_NAME in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_SCHEDULED_DATE in DATE,
  X_IMPLEMENTATION_DATE in DATE,
  X_CANCELATION_DATE in DATE,
  X_PROGRAM_ID                IN NUMBER,
  X_PROGRAM_APPLICATION_ID    IN NUMBER,
  X_PROGRAM_UPDATE_DATE       IN DATE,
  X_APPROVAL_STATUS_TYPE      IN NUMBER,
  X_APPROVAL_DATE             IN DATE,
  X_APPROVAL_REQUEST_DATE     IN DATE,
  X_ROUTE_ID                  IN NUMBER,
  X_REQUIRED_FLAG             IN VARCHAR2,
  X_COMPLETE_BEFORE_STATUS_CODE IN NUMBER,
  X_START_AFTER_STATUS_CODE   IN NUMBER
) is
  cursor c is select
      REQUEST_ID,
      CHANGE_ID,
      SEQUENCE_NUMBER,
      CHANGE_TYPE_ID,
      SCHEDULED_DATE,
      IMPLEMENTATION_DATE,
      CANCELATION_DATE,
      STATUS_CODE,
      ASSIGNEE_ID,
      NEED_BY_DATE,
      ORIGINAL_SYSTEM_REFERENCE,
      APPROVAL_STATUS_TYPE,
      APPROVAL_DATE,
      APPROVAL_REQUEST_DATE,
      ROUTE_ID,
      REQUIRED_FLAG,
      COMPLETE_BEFORE_STATUS_CODE,
      START_AFTER_STATUS_CODE
    from ENG_CHANGE_LINES
    where CHANGE_LINE_ID = X_CHANGE_LINE_ID
    for update of CHANGE_LINE_ID nowait;
  recinfo c%rowtype;

  cursor c1 is select
      NAME,
      DESCRIPTION,
      decode(LANGUAGE, userenv('LANG'), 'Y', 'N') BASELANG
    from ENG_CHANGE_LINES_TL
    where CHANGE_LINE_ID = X_CHANGE_LINE_ID
    and userenv('LANG') in (LANGUAGE, SOURCE_LANG)
    for update of CHANGE_LINE_ID nowait;
begin
  open c;
  fetch c into recinfo;
  if (c%notfound) then
    close c;
    fnd_message.set_name('FND', 'FORM_RECORD_DELETED');
    app_exception.raise_exception;
  end if;
  close c;
  if (    ((recinfo.REQUEST_ID = X_REQUEST_ID)
           OR ((recinfo.REQUEST_ID is null) AND (X_REQUEST_ID is null)))
      AND (recinfo.CHANGE_ID= X_CHANGE_ID)
      AND (recinfo.SEQUENCE_NUMBER = X_SEQUENCE_NUMBER)
      AND (recinfo.CHANGE_TYPE_ID = X_CHANGE_TYPE_ID)
      AND ((recinfo.SCHEDULED_DATE = X_SCHEDULED_DATE)
           OR ((recinfo.SCHEDULED_DATE is null) AND (X_SCHEDULED_DATE is null)))
      AND ((recinfo.IMPLEMENTATION_DATE = X_IMPLEMENTATION_DATE)
           OR ((recinfo.IMPLEMENTATION_DATE is null) AND (X_IMPLEMENTATION_DATE is null)))
      AND ((recinfo.CANCELATION_DATE = X_CANCELATION_DATE)
           OR ((recinfo.CANCELATION_DATE is null) AND (X_CANCELATION_DATE is null)))
      AND ((recinfo.STATUS_CODE = X_STATUS_CODE)
           OR ((recinfo.STATUS_CODE is null) AND (X_STATUS_CODE is null)))
      AND ((recinfo.ASSIGNEE_ID = X_ASSIGNEE_ID)
           OR ((recinfo.ASSIGNEE_ID is null) AND (X_ASSIGNEE_ID is null)))
      AND ((recinfo.NEED_BY_DATE= X_NEED_BY_DATE)
           OR ((recinfo.NEED_BY_DATE is null) AND (X_NEED_BY_DATE is null)))
      AND ((recinfo.ORIGINAL_SYSTEM_REFERENCE = X_ORIGINAL_SYSTEM_REFERENCE)
           OR ((recinfo.ORIGINAL_SYSTEM_REFERENCE is null) AND (X_ORIGINAL_SYSTEM_REFERENCE is null)))
      AND ((recinfo.APPROVAL_STATUS_TYPE = X_APPROVAL_STATUS_TYPE)
           OR ((recinfo.APPROVAL_STATUS_TYPE IS NULL) AND (X_APPROVAL_STATUS_TYPE IS NULL)))
      AND ((recinfo.APPROVAL_DATE = X_APPROVAL_DATE)
           OR ((recinfo.APPROVAL_DATE IS NULL) AND (X_APPROVAL_DATE IS NULL)))
      AND ((recinfo.APPROVAL_REQUEST_DATE = X_APPROVAL_REQUEST_DATE)
           OR ((recinfo.APPROVAL_REQUEST_DATE IS NULL) AND (X_APPROVAL_REQUEST_DATE IS NULL)))
      AND ((recinfo.ROUTE_ID = X_ROUTE_ID)
           OR ((recinfo.ROUTE_ID IS NULL) AND (X_ROUTE_ID IS NULL)))
      AND ((recinfo.REQUIRED_FLAG = X_REQUIRED_FLAG)
           OR ((recinfo.REQUIRED_FLAG IS NULL) AND (X_REQUIRED_FLAG IS NULL)))
      AND ((recinfo.COMPLETE_BEFORE_STATUS_CODE = X_COMPLETE_BEFORE_STATUS_CODE)
           OR ((recinfo.COMPLETE_BEFORE_STATUS_CODE IS NULL) AND (X_COMPLETE_BEFORE_STATUS_CODE IS NULL)))
      AND ((recinfo.START_AFTER_STATUS_CODE = X_START_AFTER_STATUS_CODE)
           OR ((recinfo.START_AFTER_STATUS_CODE IS NULL) AND (X_START_AFTER_STATUS_CODE IS NULL)))
  ) then
    null;
  else
    fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
    app_exception.raise_exception;
  end if;

  for tlinfo in c1 loop
    if (tlinfo.BASELANG = 'Y') then
      if (    (tlinfo.NAME = X_NAME)
          AND ((tlinfo.DESCRIPTION = X_DESCRIPTION)
               OR ((tlinfo.DESCRIPTION is null) AND (X_DESCRIPTION is null)))
      ) then
        null;
      else
        fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
        app_exception.raise_exception;
      end if;
    end if;
  end loop;
  return;
end LOCK_ROW;

procedure UPDATE_ROW (
  X_CHANGE_LINE_ID in NUMBER,
  X_REQUEST_ID in NUMBER,
  X_CHANGE_ID in NUMBER,
  X_SEQUENCE_NUMBER in NUMBER,
  X_CHANGE_TYPE_ID in NUMBER,
  X_STATUS_CODE in VARCHAR2,
  X_ASSIGNEE_ID in NUMBER,
  X_NEED_BY_DATE in DATE,
  X_ORIGINAL_SYSTEM_REFERENCE in VARCHAR2,
  X_NAME in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_SCHEDULED_DATE in DATE,
  X_IMPLEMENTATION_DATE in DATE,
  X_CANCELATION_DATE in DATE,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER,
  X_PROGRAM_ID                IN NUMBER,
  X_PROGRAM_APPLICATION_ID    IN NUMBER,
  X_PROGRAM_UPDATE_DATE       IN DATE,
  X_APPROVAL_STATUS_TYPE      IN NUMBER,
  X_APPROVAL_DATE             IN DATE,
  X_APPROVAL_REQUEST_DATE     IN DATE,
  X_ROUTE_ID                  IN NUMBER,
  X_REQUIRED_FLAG             IN VARCHAR2,
  X_COMPLETE_BEFORE_STATUS_CODE IN NUMBER,
  X_START_AFTER_STATUS_CODE   IN NUMBER

) is
begin
  update ENG_CHANGE_LINES set
    REQUEST_ID = X_REQUEST_ID,
    CHANGE_ID = X_CHANGE_ID,
    SEQUENCE_NUMBER = X_SEQUENCE_NUMBER,
    CHANGE_TYPE_ID = X_CHANGE_TYPE_ID,
    SCHEDULED_DATE = X_SCHEDULED_DATE,
    IMPLEMENTATION_DATE = X_IMPLEMENTATION_DATE,
    CANCELATION_DATE = X_CANCELATION_DATE,
    STATUS_CODE = X_STATUS_CODE,
    ASSIGNEE_ID = X_ASSIGNEE_ID,
    NEED_BY_DATE = X_NEED_BY_DATE,
    ORIGINAL_SYSTEM_REFERENCE = X_ORIGINAL_SYSTEM_REFERENCE,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    APPROVAL_STATUS_TYPE = X_APPROVAL_STATUS_TYPE,
    APPROVAL_DATE = X_APPROVAL_DATE,
    APPROVAL_REQUEST_DATE = X_APPROVAL_REQUEST_DATE,
    ROUTE_ID = X_ROUTE_ID,
    REQUIRED_FLAG = X_REQUIRED_FLAG,
    COMPLETE_BEFORE_STATUS_CODE = X_COMPLETE_BEFORE_STATUS_CODE,
    START_AFTER_STATUS_CODE = X_START_AFTER_STATUS_CODE
  where CHANGE_LINE_ID = X_CHANGE_LINE_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  update ENG_CHANGE_LINES_TL set
    NAME = X_NAME,
    DESCRIPTION = X_DESCRIPTION,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    SOURCE_LANG = userenv('LANG')
  where CHANGE_LINE_ID = X_CHANGE_LINE_ID
  and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

  if (sql%notfound) then
    raise no_data_found;
  end if;
end UPDATE_ROW;

procedure DELETE_ROW (
  X_CHANGE_LINE_ID in NUMBER
) is
begin
  delete from ENG_CHANGE_LINES_TL
  where CHANGE_LINE_ID = X_CHANGE_LINE_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  delete from ENG_CHANGE_LINES
  where CHANGE_LINE_ID = X_CHANGE_LINE_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;
end DELETE_ROW;

procedure ADD_LANGUAGE
is
begin
  delete from ENG_CHANGE_LINES_TL T
  where not exists
    (select NULL
    from ENG_CHANGE_LINES B
    where B.CHANGE_LINE_ID = T.CHANGE_LINE_ID
    );

  update ENG_CHANGE_LINES_TL T set (
      NAME,
      DESCRIPTION
    ) = (select
      B.NAME,
      B.DESCRIPTION
    from ENG_CHANGE_LINES_TL B
    where B.CHANGE_LINE_ID = T.CHANGE_LINE_ID
    and B.LANGUAGE = T.SOURCE_LANG)
  where (
      T.CHANGE_LINE_ID,
      T.LANGUAGE
  ) in (select
      SUBT.CHANGE_LINE_ID,
      SUBT.LANGUAGE
    from ENG_CHANGE_LINES_TL SUBB, ENG_CHANGE_LINES_TL SUBT
    where SUBB.CHANGE_LINE_ID = SUBT.CHANGE_LINE_ID
    and SUBB.LANGUAGE = SUBT.SOURCE_LANG
    and (SUBB.NAME <> SUBT.NAME
      or SUBB.DESCRIPTION <> SUBT.DESCRIPTION
      or (SUBB.DESCRIPTION is null and SUBT.DESCRIPTION is not null)
      or (SUBB.DESCRIPTION is not null and SUBT.DESCRIPTION is null)
  ));

  insert into ENG_CHANGE_LINES_TL (
    CHANGE_LINE_ID,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    NAME,
    DESCRIPTION,
    LANGUAGE,
    SOURCE_LANG
  ) select
    B.CHANGE_LINE_ID,
    B.CREATION_DATE,
    B.CREATED_BY,
    B.LAST_UPDATE_DATE,
    B.LAST_UPDATED_BY,
    B.LAST_UPDATE_LOGIN,
    B.NAME,
    B.DESCRIPTION,
    L.LANGUAGE_CODE,
    B.SOURCE_LANG
  from ENG_CHANGE_LINES_TL B, FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and B.LANGUAGE = userenv('LANG')
  and not exists
    (select NULL
    from ENG_CHANGE_LINES_TL T
    where T.CHANGE_LINE_ID = B.CHANGE_LINE_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);
end ADD_LANGUAGE;

end ENG_CHANGE_LINES_PKG;

/
