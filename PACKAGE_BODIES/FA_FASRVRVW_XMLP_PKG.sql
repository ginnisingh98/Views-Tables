--------------------------------------------------------
--  DDL for Package Body FA_FASRVRVW_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."FA_FASRVRVW_XMLP_PKG" AS
/* $Header: FASRVRVWB.pls 120.0.12010000.1 2008/07/28 13:17:39 appldev ship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;

      SELECT  SUBSTR(ARGUMENT1,INSTR(ARGUMENT1,'=',1,1)+1)
      into  P_MASS_REVAL_ID1
      FROM FND_CONCURRENT_REQUESTS
      WHERE REQUEST_ID =P_CONC_REQUEST_ID;
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      NULL;
    END;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION G_CATEGORYGROUPFILTER RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END G_CATEGORYGROUPFILTER;

  FUNCTION MASS_REVAL_IDFORMULA RETURN NUMBER IS
  BEGIN
    DECLARE
      L_MASS_REVAL_ID NUMBER(15);
      L_DESCRIPTION VARCHAR2(80);
      L_BOOK VARCHAR2(15);
      L_REVAL_DATE DATE;
      L_CURRENCY_CODE VARCHAR2(15);
      L_PRECISION NUMBER(15);
    BEGIN
      SELECT
        RV.MASS_REVAL_ID,
        RV.DESCRIPTION,
        RV.BOOK_TYPE_CODE,
        RV.REVAL_DATE,
        SOB.CURRENCY_CODE,
        CUR.PRECISION
      INTO L_MASS_REVAL_ID,L_DESCRIPTION,L_BOOK,L_REVAL_DATE,L_CURRENCY_CODE,L_PRECISION
      FROM
        FA_MASS_REVALUATIONS RV,
        FA_BOOK_CONTROLS BC,
        GL_SETS_OF_BOOKS SOB,
        FND_CURRENCIES CUR
      WHERE RV.MASS_REVAL_ID = P_MASS_REVAL_ID1
        AND BC.BOOK_TYPE_CODE = RV.BOOK_TYPE_CODE
        AND BC.DATE_INEFFECTIVE is null
        AND BC.SET_OF_BOOKS_ID = SOB.SET_OF_BOOKS_ID
        AND SOB.CURRENCY_CODE = CUR.CURRENCY_CODE;
      DESCRIPTION := L_DESCRIPTION;
      BOOK := L_BOOK;
      REVAL_DATE := L_REVAL_DATE;
      CURRENCY_CODE := L_CURRENCY_CODE;
      P_MIN_PRECISION := L_PRECISION;
      RETURN (L_MASS_REVAL_ID);
    END;
    RETURN NULL;
  END MASS_REVAL_IDFORMULA;

  FUNCTION REPORT_NAMEFORMULA(COMPANY_NAME IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      L_REPORT_NAME VARCHAR2(240);
    BEGIN
      RP_COMPANY_NAME := COMPANY_NAME;
      SELECT
        CP.USER_CONCURRENT_PROGRAM_NAME
      INTO L_REPORT_NAME
      FROM
        FND_CONCURRENT_PROGRAMS_VL CP,
        FND_CONCURRENT_REQUESTS CR
      WHERE CR.REQUEST_ID = P_CONC_REQUEST_ID
        AND CP.APPLICATION_ID = CR.PROGRAM_APPLICATION_ID
        AND CP.CONCURRENT_PROGRAM_ID = CR.CONCURRENT_PROGRAM_ID;
      RP_REPORT_NAME := L_REPORT_NAME;
      RETURN (L_REPORT_NAME);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RP_REPORT_NAME := 'Revaluation Review Report';
        RETURN ('Revaluation Review Report');
    END;
    RETURN NULL;
  END REPORT_NAMEFORMULA;

  FUNCTION REVAL_PCFORMULA RETURN NUMBER IS
  BEGIN
    DECLARE
      L_REVAL_PC NUMBER(15);
    BEGIN
      SELECT
        PERIOD_COUNTER
      INTO L_REVAL_PC
      FROM
        FA_DEPRN_PERIODS
      WHERE BOOK_TYPE_CODE = BOOK
        AND REVAL_DATE between CALENDAR_PERIOD_OPEN_DATE
        AND CALENDAR_PERIOD_CLOSE_DATE;
      RETURN (L_REVAL_PC);
    END;
    RETURN NULL;
  END REVAL_PCFORMULA;

  FUNCTION REVAL_PCTFORMULA(REVAL_PCT IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    BEGIN
      RETURN (REVAL_PCT);
    END;
    RETURN NULL;
  END REVAL_PCTFORMULA;

  FUNCTION ASS_FOUNDFORMULA(ASS_FOUND IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    RETURN (ASS_FOUND);
  END ASS_FOUNDFORMULA;

  FUNCTION ASS_REVAL_PCTFORMULA(ASS_REVAL_PCT IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    BEGIN
      RETURN (ASS_REVAL_PCT);
    END;
    RETURN NULL;
  END ASS_REVAL_PCTFORMULA;

  FUNCTION D_OLD_LIFEFORMULA(OLD_LIFE IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    IF OLD_LIFE IS NOT NULL THEN
      RETURN ((LPAD(TO_CHAR(TRUNC(OLD_LIFE / 12
                               ,0)
                         ,'90')
                 ,3
                 ,' ') || '.' || SUBSTR(TO_CHAR(MOD(OLD_LIFE
                               ,12)
                           ,'00')
                   ,2
                   ,2)));
    ELSE
      RETURN (NULL);
    END IF;
    RETURN NULL;
  END D_OLD_LIFEFORMULA;

  FUNCTION D_NEW_LIFEFORMULA(NEW_LIFE IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    IF NEW_LIFE IS NOT NULL THEN
      RETURN ((LPAD(TO_CHAR(TRUNC(NEW_LIFE / 12
                               ,0)
                         ,'90')
                 ,3
                 ,' ') || '.' || SUBSTR(TO_CHAR(MOD(NEW_LIFE
                               ,12)
                           ,'00')
                   ,2
                   ,2)));
    ELSE
      RETURN (NULL);
    END IF;
    RETURN NULL;
  END D_NEW_LIFEFORMULA;

  FUNCTION ASS_FRRFFORMULA(ASS_FRRF IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    RETURN (ASS_FRRF);
  END ASS_FRRFFORMULA;

  FUNCTION ASS_LEFFORMULA(ASS_LEF IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    RETURN (ASS_LEF);
  END ASS_LEFFORMULA;

  FUNCTION ASS_LECFORMULA(ASS_LEC IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    RETURN (ASS_LEC);
  END ASS_LECFORMULA;

  FUNCTION ASS_MFRRFORMULA(ASS_MFRR IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    IF (ASS_MFRR = '0') THEN
      RETURN (NULL);
    ELSE
      RETURN (ASS_MFRR);
    END IF;
    RETURN NULL;
  END ASS_MFRRFORMULA;

  FUNCTION NEW_DEP_RSVFORMULA RETURN NUMBER IS
  BEGIN
    RETURN 0;
  END NEW_DEP_RSVFORMULA;

  FUNCTION NEW_REVAL_RSVFORMULA(NEW_REVAL_RSV IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (NEW_REVAL_RSV);
  END NEW_REVAL_RSVFORMULA;

  FUNCTION ADJ_DEP_RSVFORMULA(TH_ID IN NUMBER
                             ,ASSET_ID IN NUMBER
                             ,NEW_DEP_RSV IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      L_ADJ_AMOUNT NUMBER;
    BEGIN
      SELECT
        SUM(DECODE(AD.DEBIT_CREDIT_FLAG
                  ,'CR'
                  ,AD.ADJUSTMENT_AMOUNT
                  ,'DR'
                  ,-1 * AD.ADJUSTMENT_AMOUNT))
      INTO L_ADJ_AMOUNT
      FROM
        FA_ADJUSTMENTS AD
      WHERE AD.TRANSACTION_HEADER_ID = TH_ID
        AND AD.BOOK_TYPE_CODE = BOOK
        AND AD.ASSET_ID = ASSET_ID
        AND AD.SOURCE_TYPE_CODE = 'REVALUATION'
        AND AD.ADJUSTMENT_TYPE = 'RESERVE';
      OLD_DEP_RSV := NEW_DEP_RSV - L_ADJ_AMOUNT;
      RETURN (L_ADJ_AMOUNT);
    END;
    RETURN NULL;
  END ADJ_DEP_RSVFORMULA;

  FUNCTION ADJ_REVAL_RSVFORMULA(TH_ID IN NUMBER
                               ,ASSET_ID IN NUMBER
                               ,NEW_REVAL_RSV IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      L_ADJ_AMOUNT NUMBER;
    BEGIN
      SELECT
        SUM(DECODE(AD.DEBIT_CREDIT_FLAG
                  ,'CR'
                  ,AD.ADJUSTMENT_AMOUNT
                  ,'DR'
                  ,-1 * AD.ADJUSTMENT_AMOUNT))
      INTO L_ADJ_AMOUNT
      FROM
        FA_ADJUSTMENTS AD
      WHERE AD.TRANSACTION_HEADER_ID = TH_ID
        AND AD.BOOK_TYPE_CODE = BOOK
        AND AD.ASSET_ID = ASSET_ID
        AND AD.SOURCE_TYPE_CODE = 'REVALUATION'
        AND AD.ADJUSTMENT_TYPE = 'REVAL RESERVE';
      OLD_REVAL_RSV := NEW_REVAL_RSV - L_ADJ_AMOUNT;
      RETURN (L_ADJ_AMOUNT);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        L_ADJ_AMOUNT := 0;
        OLD_REVAL_RSV := NEW_REVAL_RSV - L_ADJ_AMOUNT;
        RETURN (L_ADJ_AMOUNT);
    END;
    RETURN NULL;
  END ADJ_REVAL_RSVFORMULA;

  FUNCTION FRRFFORMULA(FRRF IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    RETURN (FRRF);
  END FRRFFORMULA;

  FUNCTION MFRRFORMULA(MFRR IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    IF (MFRR = '0') THEN
      RETURN (NULL);
    ELSE
      RETURN (MFRR);
    END IF;
    RETURN NULL;
  END MFRRFORMULA;

  FUNCTION LEFFORMULA(LEF IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    RETURN (LEF);
  END LEFFORMULA;

  FUNCTION LECFORMULA(LEC IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    RETURN (LEC);
  END LECFORMULA;

  FUNCTION D_FOUNDFORMULA(D_FOUND IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    RETURN (D_FOUND);
  END D_FOUNDFORMULA;

  FUNCTION OLD_DEP_RSV_P RETURN NUMBER IS
  BEGIN
    RETURN OLD_DEP_RSV;
  END OLD_DEP_RSV_P;

  FUNCTION OLD_REVAL_RSV_P RETURN NUMBER IS
  BEGIN
    RETURN OLD_REVAL_RSV;
  END OLD_REVAL_RSV_P;

  FUNCTION DESCRIPTION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN DESCRIPTION;
  END DESCRIPTION_P;

  FUNCTION REVAL_DATE_P RETURN DATE IS
  BEGIN
    RETURN REVAL_DATE;
  END REVAL_DATE_P;

  FUNCTION BOOK_P RETURN VARCHAR2 IS
  BEGIN
    RETURN BOOK;
  END BOOK_P;

  FUNCTION CURRENCY_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CURRENCY_CODE;
  END CURRENCY_CODE_P;

  FUNCTION RP_COMPANY_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_COMPANY_NAME;
  END RP_COMPANY_NAME_P;

  FUNCTION RP_REPORT_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_REPORT_NAME;
  END RP_REPORT_NAME_P;

END FA_FASRVRVW_XMLP_PKG;


/
