--------------------------------------------------------
--  DDL for Package Body LNS_LOAN_HISTORIES_H_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."LNS_LOAN_HISTORIES_H_PKG" AS
/* $Header: LNS_LNHIS_TBLH_B.pls 120.1 2005/10/03 12:33:59 gbellary noship $ */

/* Insert_Row procedure */
PROCEDURE Insert_Row(
	X_LOAN_HISTORY_ID		IN OUT NOCOPY NUMBER
	,P_LOAN_ID		IN NUMBER
	,P_TABLE_NAME		IN VARCHAR2	DEFAULT NULL
	,P_COLUMN_NAME		IN VARCHAR2	DEFAULT NULL
	,P_OLD_VALUE		IN VARCHAR2	DEFAULT NULL
	,P_NEW_VALUE		IN VARCHAR2	DEFAULT NULL
	,P_CREATED_BY		IN NUMBER	DEFAULT NULL
	,P_CREATION_DATE		IN DATE	DEFAULT NULL
	,P_LAST_UPDATED_BY		IN NUMBER	DEFAULT NULL
	,P_LAST_UPDATE_DATE		IN DATE	DEFAULT NULL
	,P_LAST_UPDATE_LOGIN		IN NUMBER	DEFAULT NULL
	,P_DATA_TYPE		IN VARCHAR2	DEFAULT NULL
	,P_OBJECT_VERSION_NUMBER		IN NUMBER
	,P_PRIMARY_KEY_ID			IN NUMBER
) IS
BEGIN
	-- Call to the workflow procedure
	IF P_TABLE_NAME = 'LNS_LOAN_HEADERS_ALL'
	AND P_COLUMN_NAME IN ('LOAN_STATUS','SECONDARY_STATUS') THEN
	   LNS_WORK_FLOW.PROCESS_STATUS_CHANGE(P_LOAN_ID => P_LOAN_ID
	                                      ,P_COLUMN_NAME => P_COLUMN_NAME
	                                      ,P_FROM_STATUS => P_OLD_VALUE
	                                      ,P_TO_STATUS => P_NEW_VALUE);
        END IF;
	INSERT INTO LNS_LOAN_HISTORIES_H
	(
		LOAN_HISTORY_ID
		,LOAN_ID
		,TABLE_NAME
		,COLUMN_NAME
		,OLD_VALUE
		,NEW_VALUE
		,CREATED_BY
		,CREATION_DATE
		,LAST_UPDATED_BY
		,LAST_UPDATE_DATE
		,LAST_UPDATE_LOGIN
		,DATA_TYPE
		,OBJECT_VERSION_NUMBER
		,PRIMARY_KEY_ID
	) VALUES (
		LNS_LOAN_HISTORIES_S.NEXTVAL
		,DECODE(P_LOAN_ID, FND_API.G_MISS_NUM, NULL, P_LOAN_ID)
		,DECODE(P_TABLE_NAME, FND_API.G_MISS_CHAR, NULL, P_TABLE_NAME)
		,DECODE(P_COLUMN_NAME, FND_API.G_MISS_CHAR, NULL, P_COLUMN_NAME)
		,DECODE(P_OLD_VALUE, FND_API.G_MISS_CHAR, NULL, P_OLD_VALUE)
		,DECODE(P_NEW_VALUE, FND_API.G_MISS_CHAR, NULL, P_NEW_VALUE)
		,LNS_UTILITY_PUB.CREATED_BY
		,LNS_UTILITY_PUB.CREATION_DATE
		,LNS_UTILITY_PUB.LAST_UPDATED_BY
		,LNS_UTILITY_PUB.LAST_UPDATE_DATE
		,LNS_UTILITY_PUB.LAST_UPDATE_LOGIN
		,DECODE(P_DATA_TYPE, FND_API.G_MISS_CHAR, NULL, P_DATA_TYPE)
		,DECODE(P_OBJECT_VERSION_NUMBER, FND_API.G_MISS_NUM, NULL, P_OBJECT_VERSION_NUMBER)
		,DECODE(P_PRIMARY_KEY_ID, FND_API.G_MISS_NUM, NULL, P_PRIMARY_KEY_ID)
	) RETURNING
		 LOAN_HISTORY_ID
	 INTO
		 X_LOAN_HISTORY_ID;
END Insert_Row;

/* Update_Row procedure */
PROCEDURE Update_Row(
	P_LOAN_HISTORY_ID		IN NUMBER
	,P_LOAN_ID		IN NUMBER	DEFAULT NULL
	,P_TABLE_NAME		IN VARCHAR2	DEFAULT NULL
	,P_COLUMN_NAME		IN VARCHAR2	DEFAULT NULL
	,P_OLD_VALUE		IN VARCHAR2	DEFAULT NULL
	,P_NEW_VALUE		IN VARCHAR2	DEFAULT NULL
	,P_LAST_UPDATED_BY		IN NUMBER	DEFAULT NULL
	,P_LAST_UPDATE_DATE		IN DATE	DEFAULT NULL
	,P_LAST_UPDATE_LOGIN		IN NUMBER	DEFAULT NULL
	,P_DATA_TYPE		IN VARCHAR2	DEFAULT NULL
	,P_OBJECT_VERSION_NUMBER		IN NUMBER	DEFAULT NULL
	,P_PRIMARY_KEY_ID			IN NUMBER
) IS
BEGIN
	UPDATE LNS_LOAN_HISTORIES_H SET
		LOAN_ID = DECODE(P_LOAN_ID, NULL, LOAN_ID, FND_API.G_MISS_NUM, NULL, P_LOAN_ID)
		,TABLE_NAME = DECODE(P_TABLE_NAME, NULL, TABLE_NAME, FND_API.G_MISS_CHAR, NULL, P_TABLE_NAME)
		,COLUMN_NAME = DECODE(P_COLUMN_NAME, NULL, COLUMN_NAME, FND_API.G_MISS_CHAR, NULL, P_COLUMN_NAME)
		,OLD_VALUE = DECODE(P_OLD_VALUE, NULL, OLD_VALUE, FND_API.G_MISS_CHAR, NULL, P_OLD_VALUE)
		,NEW_VALUE = DECODE(P_NEW_VALUE, NULL, NEW_VALUE, FND_API.G_MISS_CHAR, NULL, P_NEW_VALUE)
		,LAST_UPDATED_BY = LNS_UTILITY_PUB.LAST_UPDATED_BY
		,LAST_UPDATE_DATE = LNS_UTILITY_PUB.LAST_UPDATE_DATE
		,LAST_UPDATE_LOGIN = LNS_UTILITY_PUB.LAST_UPDATE_LOGIN
		,DATA_TYPE = DECODE(P_DATA_TYPE, NULL, DATA_TYPE, FND_API.G_MISS_CHAR, NULL, P_DATA_TYPE)
		,OBJECT_VERSION_NUMBER = DECODE(P_OBJECT_VERSION_NUMBER, NULL, OBJECT_VERSION_NUMBER, FND_API.G_MISS_NUM, NULL, P_OBJECT_VERSION_NUMBER)
		,PRIMARY_KEY_ID = DECODE(P_PRIMARY_KEY_ID, NULL, PRIMARY_KEY_ID, FND_API.G_MISS_NUM, NULL, P_PRIMARY_KEY_ID)
	 WHERE LOAN_HISTORY_ID = P_LOAN_HISTORY_ID;

	if (sql%notfound) then
		raise no_data_found;
	end if;
END Update_Row;

/* Delete_Row procedure */
PROCEDURE Delete_Row(P_LOAN_HISTORY_ID IN NUMBER) IS
BEGIN
	DELETE FROM LNS_LOAN_HISTORIES_H
		WHERE LOAN_HISTORY_ID = P_LOAN_HISTORY_ID;

	if (sql%notfound) then
		raise no_data_found;
	end if;
END Delete_Row;

/* Lock_Row procedure */
PROCEDURE Lock_Row(
	P_LOAN_HISTORY_ID		IN NUMBER
	,P_LOAN_ID		IN NUMBER	DEFAULT NULL
	,P_TABLE_NAME		IN VARCHAR2	DEFAULT NULL
	,P_COLUMN_NAME		IN VARCHAR2	DEFAULT NULL
	,P_OLD_VALUE		IN VARCHAR2	DEFAULT NULL
	,P_NEW_VALUE		IN VARCHAR2	DEFAULT NULL
	,P_CREATED_BY		IN NUMBER	DEFAULT NULL
	,P_CREATION_DATE		IN DATE	DEFAULT NULL
	,P_LAST_UPDATED_BY		IN NUMBER	DEFAULT NULL
	,P_LAST_UPDATE_DATE		IN DATE	DEFAULT NULL
	,P_LAST_UPDATE_LOGIN		IN NUMBER	DEFAULT NULL
	,P_DATA_TYPE		IN VARCHAR2	DEFAULT NULL
	,P_OBJECT_VERSION_NUMBER		IN NUMBER	DEFAULT NULL
	,P_PRIMARY_KEY_ID			IN NUMBER
) IS
	CURSOR C IS SELECT * FROM LNS_LOAN_HISTORIES_H
		WHERE LOAN_HISTORY_ID = P_LOAN_HISTORY_ID
		FOR UPDATE of LOAN_HISTORY_ID NOWAIT;
	Recinfo C%ROWTYPE;
BEGIN
	OPEN C;
	FETCH C INTO Recinfo;
	IF (C%NOTFOUND) THEN
		CLOSE C;
		FND_MESSAGE.Set_Name('FND', 'FORM_RECORD_DELETED');
		APP_EXCEPTION.Raise_Exception;
	END IF;
	CLOSE C;

	IF (
		(Recinfo.LOAN_HISTORY_ID = P_LOAN_HISTORY_ID)
		AND ( (Recinfo.LOAN_ID = P_LOAN_ID)
			OR ( (Recinfo.LOAN_ID IS NULL)
				AND (P_LOAN_ID IS NULL)))
		AND ( (Recinfo.TABLE_NAME = P_TABLE_NAME)
			OR ( (Recinfo.TABLE_NAME IS NULL)
				AND (P_TABLE_NAME IS NULL)))
		AND ( (Recinfo.COLUMN_NAME = P_COLUMN_NAME)
			OR ( (Recinfo.COLUMN_NAME IS NULL)
				AND (P_COLUMN_NAME IS NULL)))
		AND ( (Recinfo.OLD_VALUE = P_OLD_VALUE)
			OR ( (Recinfo.OLD_VALUE IS NULL)
				AND (P_OLD_VALUE IS NULL)))
		AND ( (Recinfo.NEW_VALUE = P_NEW_VALUE)
			OR ( (Recinfo.NEW_VALUE IS NULL)
				AND (P_NEW_VALUE IS NULL)))
		AND ( (Recinfo.CREATED_BY = P_CREATED_BY)
			OR ( (Recinfo.CREATED_BY IS NULL)
				AND (P_CREATED_BY IS NULL)))
		AND ( (Recinfo.CREATION_DATE = P_CREATION_DATE)
			OR ( (Recinfo.CREATION_DATE IS NULL)
				AND (P_CREATION_DATE IS NULL)))
		AND ( (Recinfo.LAST_UPDATED_BY = P_LAST_UPDATED_BY)
			OR ( (Recinfo.LAST_UPDATED_BY IS NULL)
				AND (P_LAST_UPDATED_BY IS NULL)))
		AND ( (Recinfo.LAST_UPDATE_DATE = P_LAST_UPDATE_DATE)
			OR ( (Recinfo.LAST_UPDATE_DATE IS NULL)
				AND (P_LAST_UPDATE_DATE IS NULL)))
		AND ( (Recinfo.LAST_UPDATE_LOGIN = P_LAST_UPDATE_LOGIN)
			OR ( (Recinfo.LAST_UPDATE_LOGIN IS NULL)
				AND (P_LAST_UPDATE_LOGIN IS NULL)))
		AND ( (Recinfo.DATA_TYPE = P_DATA_TYPE)
			OR ( (Recinfo.DATA_TYPE IS NULL)
				AND (P_DATA_TYPE IS NULL)))
		AND ( (Recinfo.OBJECT_VERSION_NUMBER = P_OBJECT_VERSION_NUMBER)
			OR ( (Recinfo.OBJECT_VERSION_NUMBER IS NULL)
				AND (P_OBJECT_VERSION_NUMBER IS NULL)))
		AND ( (Recinfo.PRIMARY_KEY_ID = P_PRIMARY_KEY_ID)
			OR ( (Recinfo.PRIMARY_KEY_ID IS NULL)
				AND (P_PRIMARY_KEY_ID IS NULL)))
	   ) THEN
		return;
	ELSE
		FND_MESSAGE.Set_Name('FND', 'FORM_RECORD_CHANGED');
		APP_EXCEPTION.Raise_Exception;
	END IF;
END Lock_Row;
END;


/
