--------------------------------------------------------
--  DDL for Package Body AP_APXCRRCR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."AP_APXCRRCR_XMLP_PKG" AS
/* $Header: APXCRRCRB.pls 120.0 2007/12/27 07:37:38 vjaganat noship $ */
  FUNCTION CUSTOM_INIT RETURN BOOLEAN IS
  BEGIN
    /*SRW.MESSAGE(1
               ,'in custom init')*/NULL;
    SELECT
      NVL(P_CHECK_DATE_V
         ,DECODE(PAYMENT_DATE_OPTION
               ,'REQUESTDATE'
               ,SYSDATE
               ,SYSDATE + ADDL_PAYMENT_DAYS)),
      NVL(P_PAY_THROUGH_DATE_V
         ,SYSDATE + ADDL_PAY_THRU_DAYS),
      HI_PAYMENT_PRIORITY,
      LOW_PAYMENT_PRIORITY,
      PAY_ONLY_WHEN_DUE_FLAG,
      ZERO_INV_ALLOWED_FLAG,
      VENDOR_ID,
      sysdate - ADDL_PAY_FROM_DAYS,
      INV_EXCHANGE_RATE_TYPE,
      PAYMENT_METHOD_CODE,
      VENDOR_TYPE_LOOKUP_CODE,
      OU_GROUP_OPTION,
      LE_GROUP_OPTION,
      CURRENCY_GROUP_OPTION,
      PAY_GROUP_OPTION,
      PARTY_ID,
      DECODE(PAY_ONLY_WHEN_DUE_FLAG
            ,'Y'
            ,TO_DATE('01/01/80'
                   ,'MM/DD/RR')
            ,NVL(P_PAY_THROUGH_DATE_V
               ,SYSDATE + ADDL_PAY_THRU_DAYS)),
      TEMPLATE_NAME
    INTO P_CHECK_DATE_V,P_PAY_THROUGH_DATE_V,C_HI_PAYMENT_PRIORITY,
    C_LOW_PAYMENT_PRIORITY,P_PAY_ONLY_WHEN_DUE_FLAG,C_ZERO_INVOICES_ALLOWED,
    C_VENDOR_ID,C_PAY_FROM_DATE,C_INV_EXCHANGE_RATE_TYPE,C_PAYMENT_METHOD_CODE,
    C_VENDOR_TYPE_LOOKUP_CODE,C_OU_GROUP_OPTION,C_LE_GROUP_OPTION,C_CURRENCY_GROUP_OPTION,
    C_PAY_GROUP_OPTION,C_PARTY_ID,C_DISC_PAY_THRU_DATE,C_TEMPLATE_NAME
    FROM
      AP_PAYMENT_TEMPLATES
    WHERE TEMPLATE_ID = P_TEMPLATE_ID;
    IF P_INCLUDE_UNVALIDATED = 'N' THEN
      C_UNVALIDATED_PREDICATE := 'AND inv1.wfapproval_status in ' || '(''NOT REQUIRED'',''WFAPPROVED'',''MANUALLY APPROVED'') ';
    END IF;
    IF P_INCLUDE_UNAPPROVED = 'N' THEN
      C_UNAPPROVED_PREDICATE := 'AND NOT EXISTS (' || 'SELECT 1 ' || 'FROM   ap_invoices_derived_v AIDV '
      || 'WHERE  AIDV.invoice_id = inv1.invoice_id ' || 'AND    AIDV.approval_status_lookup_code IN '
      || '(''NEVER APPROVED'', ''NEEDS REAPPROVAL'', ''UNAPPROVED'')) ';
    END IF;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END CUSTOM_INIT;

  FUNCTION GET_COVER_PAGE_VALUES RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COVER_PAGE_VALUES;

  FUNCTION GET_NLS_STRINGS RETURN BOOLEAN IS
    NLS_ALL AP_LOOKUP_CODES.DISPLAYED_FIELD%TYPE;
    NLS_YES FND_LOOKUPS.MEANING%TYPE;
    NLS_NO FND_LOOKUPS.MEANING%TYPE;
    NLS_HOLDS AP_LOOKUP_CODES.DISPLAYED_FIELD%TYPE;
  BEGIN
    NLS_ALL := '';
    NLS_YES := '';
    NLS_NO := '';
    NLS_HOLDS := '';
    SELECT
      LY.MEANING,
      LN.MEANING,
      LA.DISPLAYED_FIELD,
      LH.DISPLAYED_FIELD
    INTO NLS_YES,NLS_NO,NLS_ALL,NLS_HOLDS
    FROM
      FND_LOOKUPS LY,
      FND_LOOKUPS LN,
      AP_LOOKUP_CODES LA,
      AP_LOOKUP_CODES LH
    WHERE LY.LOOKUP_TYPE = 'YES_NO'
      AND LY.LOOKUP_CODE = 'Y'
      AND LN.LOOKUP_TYPE = 'YES_NO'
      AND LN.LOOKUP_CODE = 'N'
      AND LA.LOOKUP_TYPE = 'NLS REPORT PARAMETER'
      AND LA.LOOKUP_CODE = 'ALL'
      AND LH.LOOKUP_TYPE = 'NLS TRANSLATION'
      AND LH.LOOKUP_CODE = 'HOLDS';
    C_NLS_YES := NLS_YES;
    C_NLS_NO := NLS_NO;
    C_NLS_ALL := NLS_ALL;
    C_NLS_HOLDS := NLS_HOLDS;
    FND_MESSAGE.SET_NAME('SQLAP'
                        ,'AP_APPRVL_NO_DATA');
    C_NLS_NO_DATA_EXISTS := FND_MESSAGE.GET;
    C_NLS_NO_DATA_EXISTS := ' ' || C_NLS_NO_DATA_EXISTS || ' ';
    FND_MESSAGE.SET_NAME('SQLAP'
                        ,'AP_ALL_END_OF_REPORT');
    C_NLS_END_OF_REPORT := FND_MESSAGE.GET;
    C_NLS_END_OF_REPORT := ' ' || C_NLS_END_OF_REPORT || ' ';
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_NLS_STRINGS;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      INIT_FAILURE EXCEPTION;
    BEGIN
    --added as fix
    P_CHECK_DATE_V:=P_CHECK_DATE;
    P_PAY_THROUGH_DATE_v:=P_PAY_THROUGH_DATE;

      /*SRW.MESSAGE(0
                 ,'Beginning Cash Requirements report ...')*/NULL;
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        /*SRW.MESSAGE('1'
                   ,'After SRWINIT')*/NULL;
      END IF;
      IF (GET_COMPANY_NAME <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        /*SRW.MESSAGE('2'
                   ,'After Get_Company_Name')*/NULL;
      END IF;
      IF (GET_NLS_STRINGS <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        /*SRW.MESSAGE('3'
                   ,'After Get_NLS_Strings')*/NULL;
      END IF;
      BEGIN
        SELECT
          SORT_BY_ALTERNATE_FIELD
        INTO SORT_BY_ALTERNATE
        FROM
          AP_SYSTEM_PARAMETERS;
      EXCEPTION
        WHEN OTHERS THEN
          SORT_BY_ALTERNATE := 'N';
      END;
      IF (CUSTOM_INIT <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        /*SRW.MESSAGE('7'
                   ,'After Custom_Init')*/NULL;
      END IF;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        /*SRW.BREAK*/NULL;
      END IF;

      --added as fix
      P_PAY_THROUGH_DATE_v1:=to_char(P_PAY_THROUGH_DATE_v,'DD-MON-YY');
      P_CHECK_DATE_V1:=to_char(P_CHECK_DATE_V,'DD-MON-YY');
      RETURN (TRUE);
    EXCEPTION
      WHEN OTHERS THEN
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        /*SRW.MESSAGE('20'
                   ,'After SRWEXIT')*/NULL;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION GET_COMPANY_NAME RETURN BOOLEAN IS
  BEGIN
    C_REPORT_START_DATE := SYSDATE;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COMPANY_NAME;

  FUNCTION CALCULATE_RUN_TIME RETURN BOOLEAN IS
    END_DATE DATE;
    START_DATE DATE;
  BEGIN
    END_DATE := SYSDATE;
    START_DATE := C_REPORT_START_DATE;
    C_REPORT_RUN_TIME := TO_CHAR(TO_DATE('01/01/0001'
                                        ,'DD/MM/YYYY') + ((END_DATE - START_DATE))
                                ,'HH24:MI:SS');
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
  END CALCULATE_RUN_TIME;

  FUNCTION C_PAY_DATEFORMULA(C_SORT_PAY_DATE IN DATE) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      L_HOLD_COUNT NUMBER;
      L_DISC_DATE DATE;
      L_DATE DATE;
    BEGIN
      RETURN (TO_CHAR(C_SORT_PAY_DATE
                    ,'DD-MON-YY'));
    END;
  END C_PAY_DATEFORMULA;

  FUNCTION C_HOLD_COUNTFORMULA(C_INVOICE_ID IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      L_HOLD_COUNT NUMBER;
    BEGIN
      IF P_INCLUDE_UNAPPROVED = 'N' THEN
        RETURN (0);
      END IF;
      /*SRW.REFERENCE(C_INVOICE_ID)*/NULL;
      SELECT
        COUNT(HC.HOLD_LOOKUP_CODE)
      INTO L_HOLD_COUNT
      FROM
        AP_HOLDS HC
      WHERE HC.INVOICE_ID = C_INVOICE_ID
        AND HC.RELEASE_LOOKUP_CODE IS NULL;
      RETURN (L_HOLD_COUNT);
    END;
    RETURN NULL;
  END C_HOLD_COUNTFORMULA;

  FUNCTION C_NLS_SUMMARY_FLAGFORMULA RETURN VARCHAR2 IS
  BEGIN
    BEGIN
      IF P_SUMMARY_FLAG = 'Y' THEN
        RETURN (C_NLS_YES);
      ELSE
        RETURN (C_NLS_NO);
      END IF;
    END;
    RETURN NULL;
  END C_NLS_SUMMARY_FLAGFORMULA;

  FUNCTION C_APPROVED_STATUSFORMULA(C_INVOICE_ID IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      STATUS VARCHAR2(8);
    BEGIN
      SELECT
        'Approved'
      INTO STATUS
      FROM
        DUAL
      WHERE ( ( NOT EXISTS (
        SELECT
          'Unreleased holds exist'
        FROM
          AP_HOLDS H
        WHERE H.INVOICE_ID = C_INVOICE_ID
          AND H.RELEASE_LOOKUP_CODE is null ) )
        AND ( EXISTS (
        SELECT
          'Invoice has been approved'
        FROM
          FINANCIALS_SYSTEM_PARAMETERS FP
        WHERE exists (
          SELECT
            'Invoice has been approved'
          FROM
            AP_INVOICE_DISTRIBUTIONS D1
          WHERE D1.INVOICE_ID = C_INVOICE_ID )
          AND ( ( NVL(FP.PURCH_ENCUMBRANCE_FLAG
           ,'N') = 'N'
          AND not exists (
          SELECT
            'Invoice is not fully approved'
          FROM
            AP_INVOICE_DISTRIBUTIONS D2
          WHERE D2.INVOICE_ID = C_INVOICE_ID
            AND NVL(D2.MATCH_STATUS_FLAG
             ,'N') = 'N' ) )
        OR ( NVL(FP.PURCH_ENCUMBRANCE_FLAG
           ,'N') = 'Y'
          AND not exists (
          SELECT
            'Invoice is not fully approved'
          FROM
            AP_INVOICE_DISTRIBUTIONS D3
          WHERE D3.INVOICE_ID = C_INVOICE_ID
            AND NVL(D3.MATCH_STATUS_FLAG
             ,'N') <> 'A' ) ) ) ) ) );
      IF STATUS IS NOT NULL THEN
        RETURN (C_NLS_YES);
      ELSE
        RETURN (C_NLS_NO);
      END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RETURN (C_NLS_NO);
    END;
    RETURN NULL;
  END C_APPROVED_STATUSFORMULA;

  FUNCTION C_AMOUNT_ROUNDFORMULA(C_CURRENCY_CODE IN VARCHAR2
                                ,C_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      L_DISC_AMT NUMBER;
      L_AMOUNT NUMBER;
    BEGIN
      /*SRW.REFERENCE(C_CURRENCY_CODE)*/NULL;
      /*SRW.REFERENCE(C_AMOUNT)*/NULL;
      RETURN (AP_UTILITIES_PKG.AP_ROUND_CURRENCY(C_AMOUNT
                                               ,C_CURRENCY_CODE));
    END;
  END C_AMOUNT_ROUNDFORMULA;

  FUNCTION C_AMOUNTFORMULA(C_TAKE_DISC_FLAG IN VARCHAR2
                          ,C_DISC_AMT IN NUMBER
                          ,C_DISC_DATE IN DATE
                          ,C_SEC_DISC_DATE IN DATE
                          ,C_SEC_DISC_AMT IN NUMBER
                          ,C_THRD_DISC_DATE IN DATE
                          ,C_THRD_DISC_AMT IN NUMBER
                          ,C_GROSS_AMOUNT IN NUMBER
                          ,C_AMT_REMAINING IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      L_DISC_AMT NUMBER;
      L_AMOUNT NUMBER;
    BEGIN
      IF (C_TAKE_DISC_FLAG = 'Y') THEN
        L_DISC_AMT := NVL(C_DISC_AMT
                         ,0);
      ELSE
        IF P_CHECK_DATE_V <= NVL(C_DISC_DATE
           ,SYSDATE - 9000) THEN
          L_DISC_AMT := NVL(C_DISC_AMT
                           ,0);
        ELSE
          IF P_CHECK_DATE_V <= NVL(C_SEC_DISC_DATE
             ,SYSDATE - 9000) THEN
            L_DISC_AMT := NVL(C_SEC_DISC_AMT
                             ,0);
          ELSE
            IF P_CHECK_DATE_V <= NVL(C_THRD_DISC_DATE
               ,SYSDATE - 9000) THEN
              L_DISC_AMT := NVL(C_THRD_DISC_AMT
                               ,0);
            ELSE
              L_DISC_AMT := 0;
            END IF;
          END IF;
        END IF;
      END IF;
      IF C_GROSS_AMOUNT = 0 THEN
        L_DISC_AMT := 0;
      ELSE
        L_DISC_AMT := L_DISC_AMT * (C_AMT_REMAINING / C_GROSS_AMOUNT);
      END IF;
      IF P_PAY_ONLY_WHEN_DUE_FLAG = 'Y' THEN
        IF (C_TAKE_DISC_FLAG = 'N') THEN
          L_AMOUNT := NVL(C_AMT_REMAINING
                         ,0);
        ELSE
          L_AMOUNT := NVL(C_AMT_REMAINING
                         ,0) - L_DISC_AMT;
        END IF;
      ELSE
        L_AMOUNT := NVL(C_AMT_REMAINING
                       ,0) - L_DISC_AMT;
      END IF;
      RETURN (L_AMOUNT);
    END;
  END C_AMOUNTFORMULA;

  FUNCTION C_BASE_CURRENCY_AMOUNTFORMULA(C_TAKE_DISC_FLAG IN VARCHAR2
                                        ,C_DISC_AMT IN NUMBER
                                        ,C_DISC_DATE IN DATE
                                        ,C_SEC_DISC_DATE IN DATE
                                        ,C_SEC_DISC_AMT IN NUMBER
                                        ,C_THRD_DISC_DATE IN DATE
                                        ,C_THRD_DISC_AMT IN NUMBER
                                        ,C_GROSS_AMOUNT IN NUMBER
                                        ,C_AMT_REMAINING IN NUMBER
                                        ,C_BASE_MIN_ACCOUNT_UNIT IN NUMBER
                                        ,C_EXCH_RATE IN NUMBER
                                        ,C_PAYMENT_CROSS_RATE IN NUMBER
                                        ,C_BASE_PRECISION IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      L_DISC_AMT NUMBER;
      L_AMOUNT NUMBER;
    BEGIN
      IF (C_TAKE_DISC_FLAG = 'Y') THEN
        L_DISC_AMT := NVL(C_DISC_AMT
                         ,0);
      ELSE
        IF P_CHECK_DATE_V <= NVL(C_DISC_DATE
           ,SYSDATE - 9000) THEN
          L_DISC_AMT := NVL(C_DISC_AMT
                           ,0);
        ELSE
          IF P_CHECK_DATE_V <= NVL(C_SEC_DISC_DATE
             ,SYSDATE - 9000) THEN
            L_DISC_AMT := NVL(C_SEC_DISC_AMT
                             ,0);
          ELSE
            IF P_CHECK_DATE_V <= NVL(C_THRD_DISC_DATE
               ,SYSDATE - 9000) THEN
              L_DISC_AMT := NVL(C_THRD_DISC_AMT
                               ,0);
            ELSE
              L_DISC_AMT := 0;
            END IF;
          END IF;
        END IF;
      END IF;
      IF C_GROSS_AMOUNT = 0 THEN
        L_DISC_AMT := 0;
      ELSE
        L_DISC_AMT := L_DISC_AMT * (C_AMT_REMAINING / C_GROSS_AMOUNT);
      END IF;
      IF P_PAY_ONLY_WHEN_DUE_FLAG = 'Y' THEN
        IF (C_TAKE_DISC_FLAG = 'N') THEN
          L_AMOUNT := NVL(C_AMT_REMAINING
                         ,0);
        ELSE
          L_AMOUNT := C_AMT_REMAINING - L_DISC_AMT;
        END IF;
      ELSE
        L_AMOUNT := NVL(C_AMT_REMAINING
                       ,0) - L_DISC_AMT;
      END IF;
      IF C_BASE_MIN_ACCOUNT_UNIT IS NULL THEN
        L_AMOUNT := ROUND((L_AMOUNT * NVL(C_EXCH_RATE
                             ,1) / NVL(C_PAYMENT_CROSS_RATE
                             ,1))
                         ,C_BASE_PRECISION);
      ELSE
        L_AMOUNT := ROUND((L_AMOUNT * NVL(C_EXCH_RATE
                             ,1) / NVL(C_PAYMENT_CROSS_RATE
                             ,1)) / C_BASE_MIN_ACCOUNT_UNIT) * C_BASE_MIN_ACCOUNT_UNIT;
      END IF;
      RETURN (L_AMOUNT);
    END;
  END C_BASE_CURRENCY_AMOUNTFORMULA;

  FUNCTION C_SORT_PAY_DATEFORMULA(C_TAKE_DISC_FLAG IN VARCHAR2
                                 ,C_DUE_DATE IN DATE
                                 ,C_DISC_DATE IN DATE
                                 ,C_SEC_DISC_DATE IN DATE
                                 ,C_THRD_DISC_DATE IN DATE) RETURN DATE IS
  BEGIN
    DECLARE
      L_HOLD_COUNT NUMBER;
      L_DISC_DATE DATE;
      L_DATE DATE;
    BEGIN
      IF (C_TAKE_DISC_FLAG = 'Y') THEN
        L_DISC_DATE := C_DUE_DATE;
      ELSE
        IF P_CHECK_DATE_V <= NVL(C_DISC_DATE
           ,SYSDATE - 9000) THEN
          L_DISC_DATE := C_DISC_DATE;
        ELSE
          IF P_CHECK_DATE_V <= NVL(C_SEC_DISC_DATE
             ,SYSDATE - 9000) THEN
            L_DISC_DATE := C_SEC_DISC_DATE;
          ELSE
            IF P_CHECK_DATE_V <= NVL(C_THRD_DISC_DATE
               ,SYSDATE - 9000) THEN
              L_DISC_DATE := C_THRD_DISC_DATE;
            ELSE
              L_DISC_DATE := C_DUE_DATE;
            END IF;
          END IF;
        END IF;
      END IF;
      IF P_PAY_ONLY_WHEN_DUE_FLAG = 'Y' THEN
        IF (NVL(C_TAKE_DISC_FLAG
           ,'N') = 'Y') THEN
          L_DATE := C_DUE_DATE;
        ELSE
          L_DATE := L_DISC_DATE;
        END IF;
      ELSE
        L_DATE := L_DISC_DATE;
      END IF;
      RETURN (TRUNC(L_DATE));
    END;
  END C_SORT_PAY_DATEFORMULA;

  FUNCTION C_NLS_INCL_UNAPPROVEDFORMULA RETURN CHAR IS
  BEGIN
    IF P_INCLUDE_UNAPPROVED = 'Y' THEN
      RETURN (C_NLS_YES);
    ELSE
      RETURN (C_NLS_NO);
    END IF;
  END C_NLS_INCL_UNAPPROVEDFORMULA;

  FUNCTION C_NLS_INCL_UNVALIDATEDFORMULA RETURN CHAR IS
  BEGIN
    IF P_INCLUDE_UNVALIDATED = 'Y' THEN
      RETURN (C_NLS_YES);
    ELSE
      RETURN (C_NLS_NO);
    END IF;
  END C_NLS_INCL_UNVALIDATEDFORMULA;

  FUNCTION C_REPORT_START_DATE_P RETURN DATE IS
  BEGIN
    RETURN C_REPORT_START_DATE;
  END C_REPORT_START_DATE_P;

  FUNCTION C_NLS_YES_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_YES;
  END C_NLS_YES_P;

  FUNCTION C_NLS_NO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_NO;
  END C_NLS_NO_P;

  FUNCTION C_NLS_ALL_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_ALL;
  END C_NLS_ALL_P;

  FUNCTION C_NLS_NO_DATA_EXISTS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_NO_DATA_EXISTS;
  END C_NLS_NO_DATA_EXISTS_P;

  FUNCTION C_REPORT_RUN_TIME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_REPORT_RUN_TIME;
  END C_REPORT_RUN_TIME_P;

  FUNCTION C_CHART_OF_ACCOUNTS_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_CHART_OF_ACCOUNTS_ID;
  END C_CHART_OF_ACCOUNTS_ID_P;

  FUNCTION C_NLS_END_OF_REPORT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_END_OF_REPORT;
  END C_NLS_END_OF_REPORT_P;

  FUNCTION C_HI_PAYMENT_PRIORITY_P RETURN NUMBER IS
  BEGIN
    RETURN C_HI_PAYMENT_PRIORITY;
  END C_HI_PAYMENT_PRIORITY_P;

  FUNCTION C_LOW_PAYMENT_PRIORITY_P RETURN NUMBER IS
  BEGIN
    RETURN C_LOW_PAYMENT_PRIORITY;
  END C_LOW_PAYMENT_PRIORITY_P;

  FUNCTION C_ZERO_INVOICES_ALLOWED_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_ZERO_INVOICES_ALLOWED;
  END C_ZERO_INVOICES_ALLOWED_P;

  FUNCTION C_VENDOR_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_VENDOR_ID;
  END C_VENDOR_ID_P;

  FUNCTION C_PAY_FROM_DATE_P RETURN DATE IS
  BEGIN
    RETURN C_PAY_FROM_DATE;
  END C_PAY_FROM_DATE_P;

  FUNCTION C_PAYMENT_METHOD_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_PAYMENT_METHOD_CODE;
  END C_PAYMENT_METHOD_CODE_P;

  FUNCTION C_VENDOR_TYPE_LOOKUP_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_VENDOR_TYPE_LOOKUP_CODE;
  END C_VENDOR_TYPE_LOOKUP_CODE_P;

  FUNCTION C_OU_GROUP_OPTION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_OU_GROUP_OPTION;
  END C_OU_GROUP_OPTION_P;

  FUNCTION C_LE_GROUP_OPTION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_LE_GROUP_OPTION;
  END C_LE_GROUP_OPTION_P;

  FUNCTION C_CURRENCY_GROUP_OPTION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_CURRENCY_GROUP_OPTION;
  END C_CURRENCY_GROUP_OPTION_P;

  FUNCTION C_PAY_GROUP_OPTION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_PAY_GROUP_OPTION;
  END C_PAY_GROUP_OPTION_P;

  FUNCTION C_INV_EXCHANGE_RATE_TYPE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_INV_EXCHANGE_RATE_TYPE;
  END C_INV_EXCHANGE_RATE_TYPE_P;

  FUNCTION C_PARTY_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_PARTY_ID;
  END C_PARTY_ID_P;

  FUNCTION C_DISC_PAY_THRU_DATE_P RETURN DATE IS
  BEGIN
    RETURN C_DISC_PAY_THRU_DATE;
  END C_DISC_PAY_THRU_DATE_P;

  FUNCTION C_TEMPLATE_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_TEMPLATE_NAME;
  END C_TEMPLATE_NAME_P;

  FUNCTION C_UNAPPROVED_PREDICATE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_UNAPPROVED_PREDICATE;
  END C_UNAPPROVED_PREDICATE_P;

  FUNCTION C_UNVALIDATED_PREDICATE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_UNVALIDATED_PREDICATE;
  END C_UNVALIDATED_PREDICATE_P;

  FUNCTION C_NLS_HOLDS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_HOLDS;
  END C_NLS_HOLDS_P;

END AP_APXCRRCR_XMLP_PKG;



/
