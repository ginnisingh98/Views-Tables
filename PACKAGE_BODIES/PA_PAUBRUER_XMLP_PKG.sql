--------------------------------------------------------
--  DDL for Package Body PA_PAUBRUER_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PA_PAUBRUER_XMLP_PKG" AS
/* $Header: PAUBRUERB.pls 120.1 2008/01/03 11:09:49 krreddy noship $ */
  FUNCTION GET_COVER_PAGE_VALUES RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COVER_PAGE_VALUES;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      INIT_FAILURE EXCEPTION;
      L_NO_DATA_FOUND VARCHAR2(80);
      L_MSG_COUNT NUMBER;
      L_MSG_DATA VARCHAR2(200);
      L_RETURN_STATUS VARCHAR2(10);
    BEGIN
      /*SRW.MESSAGE(1
                 ,'Started Before Report')*/NULL;
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
      CURR_CODE := PA_CURRENCY.GET_CURRENCY_CODE;
      /*SRW.MESSAGE(2
                 ,'Functional Currency->' || CURR_CODE)*/NULL;
      /*SRW.MESSAGE(3
                 ,'Executing Get_All_Names Function for OU name')*/NULL;
      IF (GET_ALL_NAMES <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      /*SRW.MESSAGE(4
                 ,'Before Fetching Meaning for No-Data-Found from PA_LOOKUPS')*/NULL;
      SELECT
        MEANING
      INTO L_NO_DATA_FOUND
      FROM
        PA_LOOKUPS
      WHERE LOOKUP_CODE = 'NO_DATA_FOUND'
        AND LOOKUP_TYPE = 'MESSAGE';
      C_NO_DATA_FOUND := L_NO_DATA_FOUND;
      /*SRW.MESSAGE(5
                 ,'After Fetching Meaning for No-Data-Found from PA_LOOKUPS ->' || C_NO_DATA_FOUND)*/NULL;
      /*SRW.MESSAGE(6
                 ,'Checking and Setting for Debug mode. Value : ' || P_DEBUG_MODE)*/NULL;
      IF P_DEBUG_MODE = 'Y' THEN
        PA_DEBUG.SET_PROCESS('PLSQL'
                            ,'LOG'
                            ,'Y');
        PA_DEBUG.ENABLE_DEBUG;
      END IF;
      /*SRW.MESSAGE(7
                 ,'Done Checking and Setting for Debug mode. Value : ' || P_DEBUG_MODE)*/NULL;
      BEGIN
        /*SRW.MESSAGE(8
                   ,'Before - Executing API : PA_UBR_UER_SUMM_PKG.create_ubr_uer_summary_balance ')*/NULL;
        PA_UBR_UER_SUMM_PKG.CREATE_UBR_UER_SUMMARY_BALANCE(P_FROM_PROJECT_NUMBER => P_FROM_PROJECT_NUMBER
                                                          ,P_TO_PROJECT_NUMBER => P_TO_PROJECT_NUMBER
                                                          ,P_GL_PERIOD_NAME => P_GL_PERIOD_NAME
                                                          ,P_REQUEST_ID => P_CONC_REQUEST_ID);
        /*SRW.MESSAGE(9
                   ,'Done - Executing API : PA_UBR_UER_SUMM_PKG.create_ubr_uer_summary_balance ')*/NULL;
      EXCEPTION
        WHEN STORAGE_ERROR THEN
          C_RETCODE := -9999;
          /*SRW.MESSAGE(10
                     ,'Exception: Storage Error')*/NULL;
        WHEN TIMEOUT_ON_RESOURCE THEN
          C_RETCODE := -9999;
          /*SRW.MESSAGE(11
                     ,'Exception: Time Out Occured, waiting for a resource')*/NULL;
        WHEN OTHERS THEN
          C_RETCODE := -9999;
          /*SRW.MESSAGE(12
                     ,'Exception was generated by PA_UBR_UER_SUMM_PKG.create_ubr_uer_summary_balance ')*/NULL;
      END;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        SELECT
          MEANING
        INTO L_NO_DATA_FOUND
        FROM
          PA_LOOKUPS
        WHERE LOOKUP_CODE = 'NO_DATA_FOUND'
          AND LOOKUP_TYPE = 'MESSAGE';
        C_NO_DATA_FOUND := L_NO_DATA_FOUND;
        C_DUMMY_DATA := 1;
        /*SRW.MESSAGE(13
                   ,' From No data found Exception ')*/NULL;
      WHEN OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'From When-Others in Before Report')*/NULL;
        /*SRW.MESSAGE(1
                   ,SQLERRM)*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION GET_ALL_NAMES RETURN BOOLEAN IS
    L_COMPANY_NAME VARCHAR2(30);
    L_ORGANIZATION_NAME VARCHAR2(60);
  BEGIN
    /*SRW.MESSAGE(1
               ,'Fetching Company Name')*/NULL;
    BEGIN
      SELECT
        GL.NAME
      INTO L_COMPANY_NAME
      FROM
        GL_SETS_OF_BOOKS GL,
        PA_IMPLEMENTATIONS PI
      WHERE GL.SET_OF_BOOKS_ID = PI.SET_OF_BOOKS_ID;
      C_COMPANY_NAME_HEADER := L_COMPANY_NAME;
    EXCEPTION
      WHEN OTHERS THEN
        RETURN (FALSE);
    END;
    RETURN (TRUE);
  END GET_ALL_NAMES;

  FUNCTION BEFOREPFORM RETURN BOOLEAN IS
  BEGIN
    /*SRW.MESSAGE(1
               ,'From Before PForm')*/NULL;
    RETURN (TRUE);
  END BEFOREPFORM;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      NUMBER_OF_MESSAGES NUMBER;
      MESSAGE_BUF VARCHAR2(2000);
      INTERFACE_ERROR EXCEPTION;
      ERRBUF VARCHAR2(80);
    BEGIN
      NULL;
    END;
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION C_COMPANY_NAME_HEADER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COMPANY_NAME_HEADER;
  END C_COMPANY_NAME_HEADER_P;

  FUNCTION C_NO_DATA_FOUND_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NO_DATA_FOUND;
  END C_NO_DATA_FOUND_P;

  FUNCTION C_DUMMY_DATA_P RETURN NUMBER IS
  BEGIN
    RETURN C_DUMMY_DATA;
  END C_DUMMY_DATA_P;

  FUNCTION C_RETCODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_RETCODE;
  END C_RETCODE_P;

  FUNCTION CURR_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CURR_CODE;
  END CURR_CODE_P;

  FUNCTION C_ERROR_BUF_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_ERROR_BUF;
  END C_ERROR_BUF_P;

END PA_PAUBRUER_XMLP_PKG;


/
