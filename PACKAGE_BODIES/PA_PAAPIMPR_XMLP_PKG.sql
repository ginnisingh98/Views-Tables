--------------------------------------------------------
--  DDL for Package Body PA_PAAPIMPR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PA_PAAPIMPR_XMLP_PKG" AS
/* $Header: PAAPIMPRB.pls 120.0 2008/01/02 09:57:49 krreddy noship $ */
  FUNCTION GET_COVER_PAGE_VALUES RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COVER_PAGE_VALUES;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      NDF VARCHAR2(80);
      X_ERROR_MSG VARCHAR2(80);
      XFACE_ID NUMBER;
      X_PURGEABLE VARCHAR2(1);
      DUMMY NUMBER;
      INIT_FAILURE EXCEPTION;
      INVALID_TRX_SOURCE EXCEPTION;
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
      /*SRW.USER_EXIT('FND GETPROFILE
                                         NAME="USER_ID"
                                         FIELD=":P_user_id"
                                         PRINT_ERROR="N"')*/NULL;
      IF (GET_COMPANY_NAME <> TRUE) THEN
        NULL;
      END IF;
      BEGIN
        SELECT
          L.MEANING
        INTO NDF
        FROM
          PA_LOOKUPS L
        WHERE L.LOOKUP_TYPE = 'MESSAGE'
          AND L.LOOKUP_CODE = 'NO_DATA_FOUND';
        C_NO_DATA_FOUND := NDF;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          NULL;
      END;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        C_DUMMY_DATA := 1;
      WHEN INVALID_TRX_SOURCE THEN
        SELECT
          MEANING
        INTO X_ERROR_MSG
        FROM
          PA_LOOKUPS
        WHERE LOOKUP_TYPE = 'TRANSACTION REJECTION REASON'
          AND LOOKUP_CODE = 'INVALID_TRX_SOURCE';
        C_ERROR_MSG := X_ERROR_MSG;
        /*SRW.MESSAGE(1
                   ,C_ERROR_MSG)*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      WHEN OTHERS THEN
        /*SRW.MESSAGE(SQLCODE * -1
                   ,SQLERRM)*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION GET_COMPANY_NAME RETURN BOOLEAN IS
    L_NAME GL_SETS_OF_BOOKS.NAME%TYPE;
  BEGIN
    SELECT
      GL.NAME
    INTO L_NAME
    FROM
      GL_SETS_OF_BOOKS GL,
      PA_IMPLEMENTATIONS PI
    WHERE GL.SET_OF_BOOKS_ID = PI.SET_OF_BOOKS_ID;
    C_COMPANY_NAME_HEADER := L_NAME;
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COMPANY_NAME;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      CURSOR C1 IS
        SELECT
          PTS.TRANSACTION_SOURCE,
          PTS.PURGEABLE_FLAG
        FROM
          PA_TRANSACTION_SOURCES PTS
        WHERE PTS.TRANSACTION_SOURCE in (
          SELECT
            PTI.TRANSACTION_SOURCE
          FROM
            PA_TRANSACTION_INTERFACE PTI
          WHERE PTI.ORIG_TRANSACTION_REFERENCE = ORIGINAL_TRANSACTION_REFERENCE );
    BEGIN
      FOR rec_c1 IN C1 LOOP
        DELETE FROM PA_TRANSACTION_XFACE_CONTROL
         WHERE INTERFACE_ID IN (
           SELECT
             INTERFACE_ID
           FROM
             PA_TRANSACTION_INTERFACE
           WHERE TRANSACTION_SOURCE = REC_C1.TRANSACTION_SOURCE
             AND BATCH_NAME = NVL(PA_PAAPIMPR_XMLP_PKG.BATCH_NAME
              ,BATCH_NAME)
             AND SYSTEM_LINKAGE = PA_PAAPIMPR_XMLP_PKG.SYSTEM_LINKAGE
             AND ORIG_TRANSACTION_REFERENCE = ORIGINAL_TRANSACTION_REFERENCE )
           AND STATUS = 'PROCESSED';
        IF REC_C1.PURGEABLE_FLAG = 'Y' THEN
          DELETE FROM PA_TRANSACTION_INTERFACE
           WHERE TRANSACTION_SOURCE = REC_C1.TRANSACTION_SOURCE
             AND BATCH_NAME = NVL(PA_PAAPIMPR_XMLP_PKG.BATCH_NAME
              ,BATCH_NAME)
             AND SYSTEM_LINKAGE = PA_PAAPIMPR_XMLP_PKG.SYSTEM_LINKAGE
             AND ORIG_TRANSACTION_REFERENCE = ORIGINAL_TRANSACTION_REFERENCE
             AND ( NVL(TRANSACTION_REJECTION_CODE
              ,'-99') not in ( 'GMS_EXP_ITEM_DT_BEFORE_AWD_ST' , 'GMS_EXP_ITEM_DT_AFTER_AWD_END' , 'GMS_AWARD_IS_CLOSED' , 'EXP_TYPE_INACTIVE'
	      , 'ETYPE_SLINK_INACTIVE' , 'PA_EX_PROJECT_DATE' , 'PA_EXP_TASK_EFF' , 'PA_EXP_ORG_NOT_ACTIVE' , 'NO_ASSIGNMENT' , 'PA_REJECTED_PARENT_RECORD' )
           OR SYSTEM_LINKAGE = 'ER' );
        END IF;
      END LOOP;
      COMMIT;
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
      WHEN OTHERS THEN
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION CP_FUNC_CURRENCY_CODEFORMULA RETURN CHAR IS
  BEGIN
    RETURN (PA_MULTI_CURRENCY.GET_ACCT_CURRENCY_CODE);
  END CP_FUNC_CURRENCY_CODEFORMULA;

  FUNCTION CF_CURRENCY_CODEFORMULA RETURN CHAR IS
  BEGIN
    RETURN (PA_MULTI_CURRENCY.GET_ACCT_CURRENCY_CODE);
  END CF_CURRENCY_CODEFORMULA;

  FUNCTION BETWEENPAGE RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END BETWEENPAGE;

  FUNCTION BEFOREPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END BEFOREPFORM;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION C_COMPANY_NAME_HEADER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COMPANY_NAME_HEADER;
  END C_COMPANY_NAME_HEADER_P;

  FUNCTION C_NO_DATA_FOUND_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NO_DATA_FOUND;
  END C_NO_DATA_FOUND_P;

  FUNCTION C_DUMMY_DATA_P RETURN NUMBER IS
  BEGIN
    RETURN C_DUMMY_DATA;
  END C_DUMMY_DATA_P;

  FUNCTION C_ERROR_MSG_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_ERROR_MSG;
  END C_ERROR_MSG_P;

  FUNCTION CP_FUNC_CURRENCY_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_FUNC_CURRENCY_CODE;
  END CP_FUNC_CURRENCY_CODE_P;

END PA_PAAPIMPR_XMLP_PKG;


/
