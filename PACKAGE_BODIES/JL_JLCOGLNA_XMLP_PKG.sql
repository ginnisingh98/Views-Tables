--------------------------------------------------------
--  DDL for Package Body JL_JLCOGLNA_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JL_JLCOGLNA_XMLP_PKG" AS
/* $Header: JLCOGLNAB.pls 120.1 2007/12/25 16:49:11 dwkrishn noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      T_SET_OF_BOOKS_ID NUMBER;
      T_CHART_OF_ACCOUNTS_ID NUMBER;
      T_SET_OF_BOOKS_NAME VARCHAR2(30);
      T_FUNC_CURR VARCHAR2(15);
      T_PERIOD_NAME VARCHAR2(15);
      T_ERRORBUFFER VARCHAR2(132);
      T_LEGAL_ENTITY_ID NUMBER;
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
      T_SET_OF_BOOKS_ID := P_SET_OF_BOOKS_ID;
      GL_INFO.GL_GET_LEDGER_INFO(T_SET_OF_BOOKS_ID
                                ,T_CHART_OF_ACCOUNTS_ID
                                ,T_SET_OF_BOOKS_NAME
                                ,T_FUNC_CURR
                                ,T_ERRORBUFFER);
      IF (T_ERRORBUFFER IS NOT NULL) THEN
        /*SRW.MESSAGE(0
                   ,T_ERRORBUFFER)*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      ELSE
        STRUCT_NUM := TO_CHAR(T_CHART_OF_ACCOUNTS_ID);
        P_CURRENCY := T_FUNC_CURR;
      END IF;
      IF (GET_NLS_STRINGS <> TRUE) THEN
        NULL;
      END IF;
      BEGIN
        T_LEGAL_ENTITY_ID := P_LEGAL_ENTITY_ID;
      EXCEPTION
        WHEN OTHERS THEN
          /*SRW.MESSAGE(02
                     ,'Error while retrieving legal entity information')*/NULL;
          RAISE;
      END;
      BEGIN
        SELECT
          NAME,
          REGISTRATION_NUMBER
        INTO C_COMPANY_NAME,C_NIT_ID
        FROM
          XLE_FIRSTPARTY_INFORMATION_V
        WHERE LEGAL_ENTITY_ID = T_LEGAL_ENTITY_ID;
      EXCEPTION
        WHEN OTHERS THEN
          /*SRW.MESSAGE(03
                     ,'Failed to retrieve Company Information Attributes.')*/NULL;
          RAISE;
      END;
      DECLARE
        P_NUM NUMBER;
        P_YEAR NUMBER;
      BEGIN
        SELECT
          GLP.PERIOD_NUM,
          GLP.PERIOD_YEAR
        INTO P_NUM,P_YEAR
        FROM
          GL_PERIODS GLP,
          GL_SETS_OF_BOOKS GLS
        WHERE GLP.PERIOD_NAME = P_START_PERIOD
          AND GLP.PERIOD_SET_NAME = GLS.PERIOD_SET_NAME
          AND GLS.SET_OF_BOOKS_ID = P_SET_OF_BOOKS_ID;
        C_PNUM2 := P_NUM;
        C_PYEAR2 := P_YEAR;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          NULL;
      END;
      DECLARE
        P_NUM1 NUMBER;
        P_YEAR1 NUMBER;
      BEGIN
        SELECT
          GLP.PERIOD_NUM,
          GLP.PERIOD_YEAR
        INTO P_NUM1,P_YEAR1
        FROM
          GL_PERIODS GLP,
          GL_SETS_OF_BOOKS GLS
        WHERE GLP.PERIOD_NAME = P_END_PERIOD
          AND GLP.PERIOD_SET_NAME = GLS.PERIOD_SET_NAME
          AND GLS.SET_OF_BOOKS_ID = P_SET_OF_BOOKS_ID;
        C_PNUM3 := P_NUM1;
        C_PYEAR3 := P_YEAR1;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          NULL;
      END;
      RETURN (TRUE);
    END;
    RETURN NULL;
  END BEFOREREPORT;
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
      RETURN (TRUE);
    END;
    RETURN NULL;
  END AFTERREPORT;
  FUNCTION C_BEGINBALFORMULA(ACCOUNT IN VARCHAR2
                            ,NIT_ID IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      PN JL_CO_GL_BALANCES.PERIOD_NAME%TYPE;
      ACODE JL_CO_GL_BALANCES.ACCOUNT_CODE%TYPE;
      BBDR NUMBER;
      BBCR NUMBER;
      PNDR NUMBER;
      PNCR NUMBER;
      BEBAL NUMBER;
    BEGIN
      /*SRW.MESSAGE('01'
                 ,' Account Code-Nit ID-Period_name' || ACCOUNT || '-' || NIT_ID)*/NULL;
      SELECT
        BAL.PERIOD_NAME,
        SUM(BAL.BEGIN_BALANCE_DR),
        SUM(BAL.BEGIN_BALANCE_CR),
        SUM(BAL.PERIOD_NET_DR),
        SUM(BAL.PERIOD_NET_CR),
        BAL.ACCOUNT_CODE
      INTO PN,BBDR,BBCR,PNDR,PNCR,ACODE
      FROM
        JL_CO_GL_BALANCES BAL
      WHERE BAL.NIT_ID = NIT_ID
        AND BAL.ACCOUNT_CODE = ACCOUNT
        AND BAL.SET_OF_BOOKS_ID = P_SET_OF_BOOKS_ID
        AND ( BAL.PERIOD_YEAR * 100 + BAL.PERIOD_NUM ) = (
        SELECT
          MAX(B1.PERIOD_YEAR * 100 + B1.PERIOD_NUM)
        FROM
          JL_CO_GL_BALANCES B1,
          GL_CODE_COMBINATIONS GLCC
        WHERE BAL.SET_OF_BOOKS_ID = B1.SET_OF_BOOKS_ID
          AND BAL.ACCOUNT_CODE = B1.ACCOUNT_CODE
          AND B1.CODE_COMBINATION_ID = GLCC.CODE_COMBINATION_ID
          AND BAL.NIT_ID = B1.NIT_ID
          AND ( B1.PERIOD_YEAR * 100 + B1.PERIOD_NUM ) < ( NVL(C_PYEAR2
           ,0) * 100 + NVL(C_PNUM2
           ,0) )
          AND B1.PERIOD_YEAR BETWEEN DECODE(GLCC.ACCOUNT_TYPE
              ,'R'
              ,C_PYEAR2
              ,'E'
              ,C_PYEAR2
              ,C_PYEAR2 - 200)
          AND C_PYEAR2 )
      GROUP BY
        BAL.PERIOD_NAME,
        BAL.ACCOUNT_CODE;
      IF PN <> P_START_PERIOD THEN
        BEBAL := BBDR - BBCR + PNDR - PNCR;
        RETURN (BEBAL);
      ELSE
        BEBAL := BBDR - BBCR;
        RETURN (BEBAL);
      END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        BEBAL := 0;
        RETURN (BEBAL);
    END;
    RETURN NULL;
  END C_BEGINBALFORMULA;
  FUNCTION C_BALFORMULA(CS_DEBITS IN NUMBER
                       ,CS_CREDITS IN NUMBER
                       ,CS_BEGINBAL IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      BAL NUMBER;
    BEGIN
      BAL := CS_DEBITS - CS_CREDITS + CS_BEGINBAL;
      RETURN (BAL);
    END;
    RETURN NULL;
  END C_BALFORMULA;
  FUNCTION C_OBALFORMULA(CS_ODEBITS IN NUMBER
                        ,CS_OCREDITS IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      OBAL NUMBER;
    BEGIN
      OBAL := CS_ODEBITS - CS_OCREDITS;
      RETURN (OBAL);
    END;
    RETURN NULL;
  END C_OBALFORMULA;
  FUNCTION GET_NLS_STRINGS RETURN BOOLEAN IS
    NLS_NO_DATA_FOUND VARCHAR2(45);
    NLS_END_OF_REPORT VARCHAR2(45);
  BEGIN
    FND_MESSAGE.SET_NAME('JL'
                        ,'JL_ZZ_NO_DATA_FOUND');
    NLS_NO_DATA_FOUND := '**** ' || SUBSTR(FND_MESSAGE.GET
                               ,1
                               ,35) || ' ****';
    FND_MESSAGE.SET_NAME('JL'
                        ,'JL_ZZ_END_OF_REPORT');
    NLS_END_OF_REPORT := '**** ' || SUBSTR(FND_MESSAGE.GET
                               ,1
                               ,35) || ' ****';
    P_NO_DATA_FOUND := NLS_NO_DATA_FOUND;
    P_END_OF_REPORT := NLS_END_OF_REPORT;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_NLS_STRINGS;
  FUNCTION C_NLS_NO_DATA_EXISTS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_NO_DATA_EXISTS;
  END C_NLS_NO_DATA_EXISTS_P;
  FUNCTION C_NLS_END_OF_REPORT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_END_OF_REPORT;
  END C_NLS_END_OF_REPORT_P;
  FUNCTION C_CHART_OF_ACCOUNTS_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_CHART_OF_ACCOUNTS_ID;
  END C_CHART_OF_ACCOUNTS_ID_P;
  FUNCTION APPLICATIONS_TEMPLATE_REPORT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN APPLICATIONS_TEMPLATE_REPORT;
  END APPLICATIONS_TEMPLATE_REPORT_P;
  FUNCTION C_STRUCT_NUM_P RETURN NUMBER IS
  BEGIN
    RETURN C_STRUCT_NUM;
  END C_STRUCT_NUM_P;
  FUNCTION C_PNUM2_P RETURN NUMBER IS
  BEGIN
    RETURN C_PNUM2;
  END C_PNUM2_P;
  FUNCTION C_PNUM3_P RETURN NUMBER IS
  BEGIN
    RETURN C_PNUM3;
  END C_PNUM3_P;
  FUNCTION C_PYEAR2_P RETURN NUMBER IS
  BEGIN
    RETURN C_PYEAR2;
  END C_PYEAR2_P;
  FUNCTION C_PYEAR3_P RETURN NUMBER IS
  BEGIN
    RETURN C_PYEAR3;
  END C_PYEAR3_P;
  FUNCTION C_NIT_ID_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NIT_ID;
  END C_NIT_ID_P;
  FUNCTION C_COMPANY_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COMPANY_NAME;
  END C_COMPANY_NAME_P;
  FUNCTION STRUCT_NUM_P RETURN NUMBER IS
  BEGIN
    RETURN STRUCT_NUM;
  END STRUCT_NUM_P;
END JL_JLCOGLNA_XMLP_PKG;



/
