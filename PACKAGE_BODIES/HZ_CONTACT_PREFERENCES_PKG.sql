--------------------------------------------------------
--  DDL for Package Body HZ_CONTACT_PREFERENCES_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."HZ_CONTACT_PREFERENCES_PKG" AS
/*$Header: ARH2CTTB.pls 120.3 2006/04/19 06:17:30 idali noship $ */

PROCEDURE Insert_Row (
    X_Rowid                             IN OUT NOCOPY VARCHAR2,
    X_CONTACT_PREFERENCE_ID             IN OUT NOCOPY NUMBER,
    X_CONTACT_LEVEL_TABLE               IN     VARCHAR2,
    X_CONTACT_LEVEL_TABLE_ID            IN     NUMBER,
    X_CONTACT_TYPE                      IN     VARCHAR2,
    X_PREFERENCE_CODE                   IN     VARCHAR2,
    X_PREFERENCE_TOPIC_TYPE             IN     VARCHAR2,
    X_PREFERENCE_TOPIC_TYPE_ID          IN     NUMBER,
    X_PREFERENCE_TOPIC_TYPE_CODE        IN     VARCHAR2,
    X_PREFERENCE_START_DATE             IN     DATE,
    X_PREFERENCE_END_DATE               IN     DATE,
    X_PREFERENCE_START_TIME_HR          IN     NUMBER,
    X_PREFERENCE_END_TIME_HR            IN     NUMBER,
    X_PREFERENCE_START_TIME_MI          IN     NUMBER,
    X_PREFERENCE_END_TIME_MI            IN     NUMBER,
    X_MAX_NO_OF_INTERACTIONS            IN     NUMBER,
    X_MAX_NO_OF_INTERACT_UOM_CODE       IN     VARCHAR2,
    X_REQUESTED_BY                      IN     VARCHAR2,
    X_REASON_CODE                       IN     VARCHAR2,
    X_STATUS                            IN     VARCHAR2,
    X_OBJECT_VERSION_NUMBER             IN     NUMBER,
    X_CREATED_BY_MODULE                 IN     VARCHAR2,
    X_APPLICATION_ID                    IN     NUMBER
) IS

    l_success                               VARCHAR2(1) := 'N';

BEGIN

    WHILE l_success = 'N' LOOP
    BEGIN
        INSERT INTO HZ_CONTACT_PREFERENCES (
	    CONTACT_PREFERENCE_ID,
            CONTACT_LEVEL_TABLE,
	    CONTACT_LEVEL_TABLE_ID,
	    CONTACT_TYPE,
	    PREFERENCE_CODE,
	    PREFERENCE_TOPIC_TYPE,
	    PREFERENCE_TOPIC_TYPE_ID,
	    PREFERENCE_TOPIC_TYPE_CODE,
            PREFERENCE_START_DATE,
	    PREFERENCE_END_DATE,
	    PREFERENCE_START_TIME_HR,
	    PREFERENCE_END_TIME_HR,
	    PREFERENCE_START_TIME_MI,
	    PREFERENCE_END_TIME_MI,
	    MAX_NO_OF_INTERACTIONS,
	    MAX_NO_OF_INTERACT_UOM_CODE,
	    REQUESTED_BY,
	    REASON_CODE,
            CREATED_BY,
            CREATION_DATE,
            LAST_UPDATE_LOGIN,
            LAST_UPDATE_DATE,
            LAST_UPDATED_BY,
            REQUEST_ID,
            PROGRAM_APPLICATION_ID,
            PROGRAM_ID,
            PROGRAM_UPDATE_DATE,
            STATUS,
            OBJECT_VERSION_NUMBER,
            CREATED_BY_MODULE,
            APPLICATION_ID
        )
        VALUES (
            DECODE( X_CONTACT_PREFERENCE_ID, FND_API.G_MISS_NUM, HZ_CONTACT_PREFERENCES_S.NEXTVAL, NULL, HZ_CONTACT_PREFERENCES_S.NEXTVAL, X_CONTACT_PREFERENCE_ID ),
            DECODE( X_CONTACT_LEVEL_TABLE, FND_API.G_MISS_CHAR, NULL, X_CONTACT_LEVEL_TABLE ),
            DECODE( X_CONTACT_LEVEL_TABLE_ID, FND_API.G_MISS_NUM, NULL, X_CONTACT_LEVEL_TABLE_ID ),
            DECODE( X_CONTACT_TYPE, FND_API.G_MISS_CHAR, NULL, X_CONTACT_TYPE ),
            DECODE( X_PREFERENCE_CODE, FND_API.G_MISS_CHAR, NULL, X_PREFERENCE_CODE ),
            DECODE( X_PREFERENCE_TOPIC_TYPE, FND_API.G_MISS_CHAR, NULL, X_PREFERENCE_TOPIC_TYPE ),
	    DECODE( X_PREFERENCE_TOPIC_TYPE_ID, FND_API.G_MISS_NUM , NULL, X_PREFERENCE_TOPIC_TYPE_ID ),
            DECODE( X_PREFERENCE_TOPIC_TYPE_CODE, FND_API.G_MISS_CHAR , NULL, X_PREFERENCE_TOPIC_TYPE_CODE ),
            DECODE( X_PREFERENCE_START_DATE, FND_API.G_MISS_DATE, to_date(NULL), X_PREFERENCE_START_DATE),
            DECODE( X_PREFERENCE_END_DATE, FND_API.G_MISS_DATE,to_date(NULL), X_PREFERENCE_END_DATE),
            DECODE( X_PREFERENCE_START_TIME_HR, FND_API.G_MISS_NUM, NULL, X_PREFERENCE_START_TIME_HR),
            DECODE( X_PREFERENCE_END_TIME_HR, FND_API.G_MISS_NUM, NULL, X_PREFERENCE_END_TIME_HR),
            DECODE( X_PREFERENCE_START_TIME_HR, FND_API.G_MISS_NUM, NULL, X_PREFERENCE_START_TIME_MI),
            DECODE( X_PREFERENCE_END_TIME_HR, FND_API.G_MISS_NUM, NULL, X_PREFERENCE_END_TIME_MI),
            DECODE( X_MAX_NO_OF_INTERACTIONS, FND_API.G_MISS_NUM, NULL, X_MAX_NO_OF_INTERACTIONS),
	    DECODE( X_MAX_NO_OF_INTERACT_UOM_CODE, FND_API.G_MISS_CHAR, NULL, X_MAX_NO_OF_INTERACT_UOM_CODE ),
            DECODE( X_REQUESTED_BY, FND_API.G_MISS_CHAR, NULL, X_REQUESTED_BY ),
            DECODE( X_REASON_CODE, FND_API.G_MISS_CHAR, NULL, X_REASON_CODE ),
            HZ_UTILITY_V2PUB.CREATED_BY,
            HZ_UTILITY_V2PUB.CREATION_DATE,
            HZ_UTILITY_V2PUB.LAST_UPDATE_LOGIN,
            HZ_UTILITY_V2PUB.LAST_UPDATE_DATE,
            HZ_UTILITY_V2PUB.LAST_UPDATED_BY,
            HZ_UTILITY_V2PUB.REQUEST_ID,
            HZ_UTILITY_V2PUB.PROGRAM_APPLICATION_ID,
            HZ_UTILITY_V2PUB.PROGRAM_ID,
            HZ_UTILITY_V2PUB.PROGRAM_UPDATE_DATE,
            DECODE( X_STATUS, FND_API.G_MISS_CHAR, 'A', NULL, 'A', X_STATUS ),
            DECODE( X_OBJECT_VERSION_NUMBER, FND_API.G_MISS_NUM, NULL, X_OBJECT_VERSION_NUMBER ),
            DECODE( X_CREATED_BY_MODULE, FND_API.G_MISS_CHAR, NULL, X_CREATED_BY_MODULE ),
            DECODE( X_APPLICATION_ID, FND_API.G_MISS_NUM, NULL, X_APPLICATION_ID )
        ) RETURNING
            ROWID,
            CONTACT_PREFERENCE_ID
        INTO
            X_Rowid,
            X_CONTACT_PREFERENCE_ID;

        l_success := 'Y';

    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            IF INSTRB( SQLERRM, 'HZ_CONTACT_PREFERENCES_U1' ) <> 0  OR
               INSTRB( SQLERRM, 'HZ_CONTACT_PREFERENCES_PK' ) <> 0 THEN
            DECLARE
                l_count             NUMBER;
                l_dummy             VARCHAR2(1);
            BEGIN
                l_count := 1;
                WHILE l_count > 0 LOOP
                    SELECT HZ_CONTACT_PREFERENCES_S.NEXTVAL
                    INTO X_CONTACT_PREFERENCE_ID FROM dual;
                    BEGIN
                        SELECT 'Y' INTO l_dummy
                        FROM HZ_CONTACT_PREFERENCES
                        WHERE CONTACT_PREFERENCE_ID = X_CONTACT_PREFERENCE_ID;
                        l_count := 1;
                    EXCEPTION
                        WHEN NO_DATA_FOUND THEN
                            l_count := 0;
                    END;
                END LOOP;
            END;
            ELSE
                RAISE;
            END IF;

    END;
    END LOOP;

END Insert_Row;

PROCEDURE Update_Row (
    X_Rowid                             IN OUT NOCOPY VARCHAR2,
    X_CONTACT_PREFERENCE_ID             IN     NUMBER,
    X_CONTACT_LEVEL_TABLE               IN     VARCHAR2,
    X_CONTACT_LEVEL_TABLE_ID            IN     NUMBER,
    X_CONTACT_TYPE                      IN     VARCHAR2,
    X_PREFERENCE_CODE                   IN     VARCHAR2,
    X_PREFERENCE_TOPIC_TYPE             IN     VARCHAR2,
    X_PREFERENCE_TOPIC_TYPE_ID          IN     NUMBER,
    X_PREFERENCE_TOPIC_TYPE_CODE        IN     VARCHAR2,
    X_PREFERENCE_START_DATE             IN     DATE,
    X_PREFERENCE_END_DATE               IN     DATE,
    X_PREFERENCE_START_TIME_HR          IN     NUMBER,
    X_PREFERENCE_END_TIME_HR            IN     NUMBER,
    X_PREFERENCE_START_TIME_MI          IN     NUMBER,
    X_PREFERENCE_END_TIME_MI            IN     NUMBER,
    X_MAX_NO_OF_INTERACTIONS            IN     NUMBER,
    X_MAX_NO_OF_INTERACT_UOM_CODE       IN     VARCHAR2,
    X_REQUESTED_BY                      IN     VARCHAR2,
    X_REASON_CODE                       IN     VARCHAR2,
    X_STATUS                            IN     VARCHAR2,
    X_OBJECT_VERSION_NUMBER             IN     NUMBER,
    X_CREATED_BY_MODULE                 IN     VARCHAR2,
    X_APPLICATION_ID                    IN     NUMBER
) IS

BEGIN

    UPDATE HZ_CONTACT_PREFERENCES SET
        CONTACT_PREFERENCE_ID = DECODE( X_CONTACT_PREFERENCE_ID, NULL, CONTACT_PREFERENCE_ID, FND_API.G_MISS_NUM, NULL, X_CONTACT_PREFERENCE_ID ),
        CONTACT_LEVEL_TABLE = DECODE( X_CONTACT_LEVEL_TABLE, NULL, CONTACT_LEVEL_TABLE, FND_API.G_MISS_CHAR, NULL, X_CONTACT_LEVEL_TABLE ),
        CONTACT_LEVEL_TABLE_ID = DECODE( X_CONTACT_LEVEL_TABLE_ID, NULL, CONTACT_LEVEL_TABLE_ID, FND_API.G_MISS_NUM, NULL, X_CONTACT_LEVEL_TABLE_ID ),
        CONTACT_TYPE = DECODE( X_CONTACT_TYPE, NULL, CONTACT_TYPE, FND_API.G_MISS_CHAR, NULL, X_CONTACT_TYPE ),
        PREFERENCE_CODE = DECODE( X_PREFERENCE_CODE, NULL, PREFERENCE_CODE, FND_API.G_MISS_CHAR, NULL, X_PREFERENCE_CODE ),
        PREFERENCE_TOPIC_TYPE = DECODE( X_PREFERENCE_TOPIC_TYPE, NULL, PREFERENCE_TOPIC_TYPE, FND_API.G_MISS_CHAR, NULL, X_PREFERENCE_TOPIC_TYPE ),
 	PREFERENCE_TOPIC_TYPE_ID = DECODE( X_PREFERENCE_TOPIC_TYPE_ID, NULL, PREFERENCE_TOPIC_TYPE_ID, FND_API.G_MISS_NUM, NULL, X_PREFERENCE_TOPIC_TYPE_ID ),
        PREFERENCE_TOPIC_TYPE_CODE = DECODE( X_PREFERENCE_TOPIC_TYPE_CODE, NULL, PREFERENCE_TOPIC_TYPE_CODE, FND_API.G_MISS_CHAR, NULL, X_PREFERENCE_TOPIC_TYPE_CODE ),

PREFERENCE_START_DATE = DECODE( X_PREFERENCE_START_DATE, NULL, PREFERENCE_START_DATE, FND_API.G_MISS_DATE, to_date(NULL), X_PREFERENCE_START_DATE ),
PREFERENCE_END_DATE = DECODE( X_PREFERENCE_END_DATE, NULL, PREFERENCE_END_DATE, FND_API.G_MISS_DATE, to_date(NULL), X_PREFERENCE_END_DATE ),
PREFERENCE_START_TIME_HR = DECODE( X_PREFERENCE_START_TIME_HR, NULL, PREFERENCE_START_TIME_HR, FND_API.G_MISS_NUM, NULL, X_PREFERENCE_START_TIME_HR ),
PREFERENCE_END_TIME_HR = DECODE( X_PREFERENCE_END_TIME_HR, NULL, PREFERENCE_END_TIME_HR, FND_API.G_MISS_NUM, NULL, X_PREFERENCE_END_TIME_HR ),
PREFERENCE_START_TIME_MI = DECODE( X_PREFERENCE_START_TIME_MI, NULL, PREFERENCE_START_TIME_MI, FND_API.G_MISS_NUM, NULL, X_PREFERENCE_START_TIME_MI ),
PREFERENCE_END_TIME_MI = DECODE( X_PREFERENCE_END_TIME_MI, NULL, PREFERENCE_END_TIME_MI, FND_API.G_MISS_NUM, NULL, X_PREFERENCE_END_TIME_MI ),
	MAX_NO_OF_INTERACTIONS = DECODE( X_MAX_NO_OF_INTERACTIONS, NULL, MAX_NO_OF_INTERACTIONS, FND_API.G_MISS_NUM, NULL, X_MAX_NO_OF_INTERACTIONS),
        MAX_NO_OF_INTERACT_UOM_CODE = DECODE( X_MAX_NO_OF_INTERACT_UOM_CODE, NULL, MAX_NO_OF_INTERACT_UOM_CODE, FND_API.G_MISS_CHAR, NULL, X_MAX_NO_OF_INTERACT_UOM_CODE ),
        REQUESTED_BY = DECODE( X_REQUESTED_BY, NULL, REQUESTED_BY, FND_API.G_MISS_CHAR, NULL, X_REQUESTED_BY ),
        REASON_CODE = DECODE( X_REASON_CODE, NULL, REASON_CODE, FND_API.G_MISS_CHAR, NULL, X_REASON_CODE ),
        CREATION_DATE = CREATION_DATE,
        LAST_UPDATE_LOGIN = HZ_UTILITY_V2PUB.LAST_UPDATE_LOGIN,
        LAST_UPDATE_DATE = HZ_UTILITY_V2PUB.LAST_UPDATE_DATE,
        LAST_UPDATED_BY = HZ_UTILITY_V2PUB.LAST_UPDATED_BY,
        REQUEST_ID = HZ_UTILITY_V2PUB.REQUEST_ID,
        PROGRAM_APPLICATION_ID = HZ_UTILITY_V2PUB.PROGRAM_APPLICATION_ID,
        PROGRAM_ID = HZ_UTILITY_V2PUB.PROGRAM_ID,
        PROGRAM_UPDATE_DATE = HZ_UTILITY_V2PUB.PROGRAM_UPDATE_DATE,
        STATUS = DECODE( X_STATUS, NULL, STATUS, FND_API.G_MISS_CHAR, 'A', X_STATUS ),
        OBJECT_VERSION_NUMBER = DECODE( X_OBJECT_VERSION_NUMBER, NULL, OBJECT_VERSION_NUMBER, FND_API.G_MISS_NUM, NULL, X_OBJECT_VERSION_NUMBER ),
        CREATED_BY_MODULE = DECODE( X_CREATED_BY_MODULE, NULL, CREATED_BY_MODULE, FND_API.G_MISS_CHAR, NULL, X_CREATED_BY_MODULE ),
        APPLICATION_ID = DECODE( X_APPLICATION_ID, NULL, APPLICATION_ID, FND_API.G_MISS_NUM, NULL, X_APPLICATION_ID )
    WHERE ROWID = X_RowId;

    IF ( SQL%NOTFOUND ) THEN
        RAISE NO_DATA_FOUND;
    END IF;

END Update_Row;

PROCEDURE Lock_Row (
    X_Rowid                             IN OUT NOCOPY VARCHAR2,
    X_CONTACT_PREFERENCE_ID             IN     NUMBER,
    X_CONTACT_LEVEL_TABLE               IN     VARCHAR2,
    X_CONTACT_LEVEL_TABLE_ID            IN     NUMBER,
    X_CONTACT_TYPE                      IN     VARCHAR2,
    X_PREFERENCE_CODE                   IN     VARCHAR2,
    X_PREFERENCE_TOPIC_TYPE             IN     VARCHAR2,
    X_PREFERENCE_TOPIC_TYPE_ID          IN     NUMBER,
    X_PREFERENCE_TOPIC_TYPE_CODE        IN     VARCHAR2,
    X_PREFERENCE_START_DATE             IN     DATE,
    X_PREFERENCE_END_DATE               IN     DATE,
    X_PREFERENCE_START_TIME_HR          IN     NUMBER,
    X_PREFERENCE_END_TIME_HR            IN     NUMBER,
    X_PREFERENCE_START_TIME_MI          IN     NUMBER,
    X_PREFERENCE_END_TIME_MI            IN     NUMBER,
    X_MAX_NO_OF_INTERACTIONS            IN     NUMBER,
    X_MAX_NO_OF_INTERACT_UOM_CODE       IN     VARCHAR2,
    X_REQUESTED_BY                      IN     VARCHAR2,
    X_REASON_CODE                       IN     VARCHAR2,
    X_CREATED_BY                        IN     NUMBER,
    X_CREATION_DATE                     IN     DATE,
    X_LAST_UPDATE_LOGIN                 IN     NUMBER,
    X_LAST_UPDATE_DATE                  IN     DATE,
    X_LAST_UPDATED_BY                   IN     NUMBER,
    X_REQUEST_ID                        IN     NUMBER,
    X_PROGRAM_APPLICATION_ID            IN     NUMBER,
    X_PROGRAM_ID                        IN     NUMBER,
    X_PROGRAM_UPDATE_DATE               IN     DATE,
    X_STATUS                            IN     VARCHAR2,
    X_OBJECT_VERSION_NUMBER             IN     NUMBER,
    X_CREATED_BY_MODULE                 IN     VARCHAR2,
    X_APPLICATION_ID                    IN     NUMBER
) IS

    CURSOR C IS
        SELECT * FROM HZ_CONTACT_PREFERENCES
        WHERE  ROWID = x_Rowid
        FOR UPDATE NOWAIT;
    Recinfo C%ROWTYPE;

BEGIN

    OPEN C;
    FETCH C INTO Recinfo;
    IF ( C%NOTFOUND ) THEN
        CLOSE C;
        FND_MESSAGE.SET_NAME('FND', 'FORM_RECORD_DELETED');
        APP_EXCEPTION.RAISE_EXCEPTION;
    END IF;
    CLOSE C;

    IF (
        ( ( Recinfo.CONTACT_PREFERENCE_ID = X_CONTACT_PREFERENCE_ID )
        OR ( ( Recinfo.CONTACT_PREFERENCE_ID IS NULL )
            AND (  X_CONTACT_PREFERENCE_ID IS NULL ) ) )
    AND ( ( Recinfo.CONTACT_LEVEL_TABLE = X_CONTACT_LEVEL_TABLE )
        OR ( ( Recinfo.CONTACT_LEVEL_TABLE IS NULL )
            AND (  X_CONTACT_LEVEL_TABLE IS NULL ) ) )
    AND ( ( Recinfo.CONTACT_LEVEL_TABLE_ID = X_CONTACT_LEVEL_TABLE_ID )
        OR ( ( Recinfo.CONTACT_LEVEL_TABLE_ID IS NULL )
            AND (  X_CONTACT_LEVEL_TABLE_ID IS NULL ) ) )
    AND ( ( Recinfo.CONTACT_TYPE = X_CONTACT_TYPE )
        OR ( ( Recinfo.CONTACT_TYPE IS NULL )
            AND (  X_CONTACT_TYPE IS NULL ) ) )
    AND ( ( Recinfo.PREFERENCE_CODE = X_PREFERENCE_CODE )
        OR ( ( Recinfo.PREFERENCE_CODE IS NULL )
            AND (  X_PREFERENCE_CODE IS NULL ) ) )
    AND ( ( Recinfo.PREFERENCE_TOPIC_TYPE = X_PREFERENCE_TOPIC_TYPE )
        OR ( ( Recinfo.PREFERENCE_TOPIC_TYPE IS NULL )
            AND (  X_PREFERENCE_TOPIC_TYPE IS NULL ) ) )
    AND ( ( Recinfo.PREFERENCE_TOPIC_TYPE_ID = X_PREFERENCE_TOPIC_TYPE_ID )
        OR ( ( Recinfo.PREFERENCE_TOPIC_TYPE_ID IS NULL )
            AND (  X_PREFERENCE_TOPIC_TYPE_ID IS NULL ) ) )
    AND ( ( Recinfo.PREFERENCE_TOPIC_TYPE_CODE = X_PREFERENCE_TOPIC_TYPE_CODE )
        OR ( ( Recinfo.PREFERENCE_TOPIC_TYPE_CODE IS NULL )
            AND (  X_PREFERENCE_TOPIC_TYPE_CODE IS NULL ) ) )
    AND ( ( Recinfo.PREFERENCE_START_DATE = X_PREFERENCE_START_DATE )
        OR ( ( Recinfo.PREFERENCE_START_DATE IS NULL )
            AND (  X_PREFERENCE_START_DATE IS NULL ) ) )
    AND ( ( Recinfo.PREFERENCE_END_DATE = X_PREFERENCE_END_DATE )
        OR ( ( Recinfo.PREFERENCE_END_DATE IS NULL )
            AND (  X_PREFERENCE_END_DATE IS NULL ) ) )
    AND ( ( Recinfo.PREFERENCE_START_TIME_HR = X_PREFERENCE_START_TIME_HR )
        OR ( ( Recinfo.PREFERENCE_START_TIME_HR IS NULL )
            AND (  X_PREFERENCE_START_TIME_HR IS NULL ) ) )
    AND ( ( Recinfo.PREFERENCE_END_TIME_HR = X_PREFERENCE_END_TIME_HR )
        OR ( ( Recinfo.PREFERENCE_END_TIME_HR IS NULL )
            AND (  X_PREFERENCE_END_TIME_HR IS NULL ) ) )
    AND ( ( Recinfo.PREFERENCE_START_TIME_MI = X_PREFERENCE_START_TIME_MI )
        OR ( ( Recinfo.PREFERENCE_START_TIME_MI IS NULL )
            AND (  X_PREFERENCE_START_TIME_MI IS NULL ) ) )
    AND ( ( Recinfo.PREFERENCE_END_TIME_MI = X_PREFERENCE_END_TIME_MI )
        OR ( ( Recinfo.PREFERENCE_END_TIME_MI IS NULL )
            AND (  X_PREFERENCE_END_TIME_MI IS NULL ) ) )
    AND ( ( Recinfo.MAX_NO_OF_INTERACTIONS = X_MAX_NO_OF_INTERACTIONS )
        OR ( ( Recinfo.MAX_NO_OF_INTERACTIONS IS NULL )
            AND (  X_MAX_NO_OF_INTERACTIONS IS NULL ) ) )
    AND ( ( Recinfo.MAX_NO_OF_INTERACT_UOM_CODE = X_MAX_NO_OF_INTERACT_UOM_CODE )
        OR ( ( Recinfo.MAX_NO_OF_INTERACT_UOM_CODE IS NULL )
            AND (  X_MAX_NO_OF_INTERACT_UOM_CODE IS NULL ) ) )
    AND ( ( Recinfo.REQUESTED_BY = X_REQUESTED_BY )
        OR ( ( Recinfo.REQUESTED_BY IS NULL )
            AND (  X_REQUESTED_BY IS NULL ) ) )
    AND ( ( Recinfo.REASON_CODE = X_REASON_CODE )
        OR ( ( Recinfo.REASON_CODE IS NULL )
            AND (  X_REASON_CODE IS NULL ) ) )
    AND ( ( Recinfo.CREATED_BY = X_CREATED_BY )
        OR ( ( Recinfo.CREATED_BY IS NULL )
            AND (  X_CREATED_BY IS NULL ) ) )
    AND ( ( Recinfo.CREATION_DATE = X_CREATION_DATE )
        OR ( ( Recinfo.CREATION_DATE IS NULL )
            AND (  X_CREATION_DATE IS NULL ) ) )
    AND ( ( Recinfo.LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN )
        OR ( ( Recinfo.LAST_UPDATE_LOGIN IS NULL )
            AND (  X_LAST_UPDATE_LOGIN IS NULL ) ) )
    AND ( ( Recinfo.LAST_UPDATE_DATE = X_LAST_UPDATE_DATE )
        OR ( ( Recinfo.LAST_UPDATE_DATE IS NULL )
            AND (  X_LAST_UPDATE_DATE IS NULL ) ) )
    AND ( ( Recinfo.LAST_UPDATED_BY = X_LAST_UPDATED_BY )
        OR ( ( Recinfo.LAST_UPDATED_BY IS NULL )
            AND (  X_LAST_UPDATED_BY IS NULL ) ) )
    AND ( ( Recinfo.REQUEST_ID = X_REQUEST_ID )
        OR ( ( Recinfo.REQUEST_ID IS NULL )
            AND (  X_REQUEST_ID IS NULL ) ) )
    AND ( ( Recinfo.PROGRAM_APPLICATION_ID = X_PROGRAM_APPLICATION_ID )
        OR ( ( Recinfo.PROGRAM_APPLICATION_ID IS NULL )
            AND (  X_PROGRAM_APPLICATION_ID IS NULL ) ) )
    AND ( ( Recinfo.PROGRAM_ID = X_PROGRAM_ID )
        OR ( ( Recinfo.PROGRAM_ID IS NULL )
            AND (  X_PROGRAM_ID IS NULL ) ) )
    AND ( ( Recinfo.PROGRAM_UPDATE_DATE = X_PROGRAM_UPDATE_DATE )
        OR ( ( Recinfo.PROGRAM_UPDATE_DATE IS NULL )
            AND (  X_PROGRAM_UPDATE_DATE IS NULL ) ) )
    AND ( ( Recinfo.STATUS = X_STATUS )
        OR ( ( Recinfo.STATUS IS NULL )
            AND (  X_STATUS IS NULL ) ) )
    AND ( ( Recinfo.OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER )
        OR ( ( Recinfo.OBJECT_VERSION_NUMBER IS NULL )
            AND (  X_OBJECT_VERSION_NUMBER IS NULL ) ) )
    AND ( ( Recinfo.CREATED_BY_MODULE = X_CREATED_BY_MODULE )
        OR ( ( Recinfo.CREATED_BY_MODULE IS NULL )
            AND (  X_CREATED_BY_MODULE IS NULL ) ) )
    AND ( ( Recinfo.APPLICATION_ID = X_APPLICATION_ID )
        OR ( ( Recinfo.APPLICATION_ID IS NULL )
            AND (  X_APPLICATION_ID IS NULL ) ) )
    ) THEN
        RETURN;
    ELSE
        FND_MESSAGE.SET_NAME('FND', 'FORM_RECORD_DELETED');
        APP_EXCEPTION.RAISE_EXCEPTION;
    END IF;

END Lock_Row;

PROCEDURE Select_Row (
    X_CONTACT_PREFERENCE_ID             IN OUT NOCOPY NUMBER,
    X_CONTACT_LEVEL_TABLE               OUT NOCOPY    VARCHAR2,
    X_CONTACT_LEVEL_TABLE_ID            OUT NOCOPY    NUMBER,
    X_CONTACT_TYPE                      OUT NOCOPY    VARCHAR2,
    X_PREFERENCE_CODE                   OUT NOCOPY    VARCHAR2,
    X_PREFERENCE_TOPIC_TYPE             OUT NOCOPY    VARCHAR2,
    X_PREFERENCE_TOPIC_TYPE_ID          OUT NOCOPY    NUMBER,
    X_PREFERENCE_TOPIC_TYPE_CODE        OUT NOCOPY     VARCHAR2,
    X_PREFERENCE_START_DATE             OUT NOCOPY    DATE,
    X_PREFERENCE_END_DATE               OUT NOCOPY    DATE,
    X_PREFERENCE_START_TIME_HR          OUT NOCOPY    NUMBER,
    X_PREFERENCE_END_TIME_HR            OUT NOCOPY    NUMBER,
    X_PREFERENCE_START_TIME_MI          OUT NOCOPY    NUMBER,
    X_PREFERENCE_END_TIME_MI            OUT NOCOPY    NUMBER,
    X_MAX_NO_OF_INTERACTIONS            OUT NOCOPY    NUMBER,
    X_MAX_NO_OF_INTERACT_UOM_CODE       OUT NOCOPY    VARCHAR2,
    X_REQUESTED_BY                      OUT NOCOPY    VARCHAR2,
    X_REASON_CODE                       OUT NOCOPY    VARCHAR2,
    X_STATUS                            OUT NOCOPY    VARCHAR2,
    X_CREATED_BY_MODULE                 OUT NOCOPY    VARCHAR2,
    X_APPLICATION_ID                    OUT NOCOPY    NUMBER
) IS

BEGIN

    SELECT
        NVL( CONTACT_PREFERENCE_ID, FND_API.G_MISS_NUM ),
  	NVL( CONTACT_LEVEL_TABLE, FND_API.G_MISS_CHAR ),
    	NVL( CONTACT_LEVEL_TABLE_ID, FND_API.G_MISS_NUM ),
        NVL( CONTACT_TYPE, FND_API.G_MISS_CHAR ),
        NVL( PREFERENCE_CODE, FND_API.G_MISS_CHAR ),
        NVL( PREFERENCE_TOPIC_TYPE, FND_API.G_MISS_CHAR ),
        NVL( PREFERENCE_TOPIC_TYPE_ID, FND_API.G_MISS_NUM ),
        NVL( PREFERENCE_TOPIC_TYPE_CODE, FND_API.G_MISS_CHAR ),
        NVL( PREFERENCE_START_DATE, FND_API.G_MISS_DATE ),
        NVL( PREFERENCE_END_DATE, FND_API.G_MISS_DATE ),
        NVL( PREFERENCE_START_TIME_HR, FND_API.G_MISS_NUM ),
        NVL( PREFERENCE_END_TIME_HR, FND_API.G_MISS_NUM ),
        NVL( PREFERENCE_START_TIME_MI, FND_API.G_MISS_NUM ),
        NVL( PREFERENCE_END_TIME_MI, FND_API.G_MISS_NUM ),
        NVL( MAX_NO_OF_INTERACTIONS, FND_API.G_MISS_NUM ),
        NVL( MAX_NO_OF_INTERACT_UOM_CODE, FND_API.G_MISS_CHAR ),
        NVL( REQUESTED_BY, FND_API.G_MISS_CHAR ),
        NVL( REASON_CODE, FND_API.G_MISS_CHAR ),
        NVL( STATUS, FND_API.G_MISS_CHAR ),
        NVL( CREATED_BY_MODULE, FND_API.G_MISS_CHAR ),
        NVL( APPLICATION_ID, FND_API.G_MISS_NUM )
    INTO
        X_CONTACT_PREFERENCE_ID,
        X_CONTACT_LEVEL_TABLE,
        X_CONTACT_LEVEL_TABLE_ID,
        X_CONTACT_TYPE,
        X_PREFERENCE_CODE,
        X_PREFERENCE_TOPIC_TYPE,
        X_PREFERENCE_TOPIC_TYPE_ID,
        X_PREFERENCE_TOPIC_TYPE_CODE,
        X_PREFERENCE_START_DATE,
        X_PREFERENCE_END_DATE,
        X_PREFERENCE_START_TIME_HR,
        X_PREFERENCE_END_TIME_HR,
        X_PREFERENCE_START_TIME_MI,
        X_PREFERENCE_END_TIME_MI,
        X_MAX_NO_OF_INTERACTIONS,
        X_MAX_NO_OF_INTERACT_UOM_CODE,
        X_REQUESTED_BY,
        X_REASON_CODE,
        X_STATUS,
        X_CREATED_BY_MODULE,
        X_APPLICATION_ID
    FROM HZ_CONTACT_PREFERENCES
    WHERE CONTACT_PREFERENCE_ID = X_CONTACT_PREFERENCE_ID;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        FND_MESSAGE.SET_NAME( 'AR', 'HZ_API_NO_RECORD' );
        FND_MESSAGE.SET_TOKEN( 'RECORD', 'contact_preference_rec');
        FND_MESSAGE.SET_TOKEN( 'VALUE', TO_CHAR( X_CONTACT_PREFERENCE_ID ) );
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;

END Select_Row;

PROCEDURE Delete_Row (
    X_CONTACT_PREFERENCE_ID                   IN     NUMBER
) IS

BEGIN

    DELETE FROM HZ_CONTACT_PREFERENCES
    WHERE CONTACT_PREFERENCE_ID = X_CONTACT_PREFERENCE_ID;

    IF ( SQL%NOTFOUND ) THEN
        RAISE NO_DATA_FOUND;
    END IF;

END Delete_Row;

END HZ_CONTACT_PREFERENCES_PKG;

/
