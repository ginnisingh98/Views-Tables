--------------------------------------------------------
--  DDL for Package Body PA_PAUPGRRL_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PA_PAUPGRRL_XMLP_PKG" AS
/* $Header: PAUPGRRLB.pls 120.2 2008/04/18 06:12:19 krreddy noship $ */
  FUNCTION GET_COVER_PAGE_VALUES RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COVER_PAGE_VALUES;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      INIT_FAILURE EXCEPTION;
      NDF VARCHAR2(80);
      ERRBUF VARCHAR2(525);
      MESSAGE_BUF VARCHAR2(256);
      NUMBER_OF_MESSAGES NUMBER;
      X_RETURN_STATUS VARCHAR2(1);
      X_MSG_COUNT NUMBER;
      X_MSG_DATA VARCHAR2(30);
    BEGIN

       P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
      /*SRW.USER_EXIT('FND GETPROFILE
                    NAME="PA_DEBUG_MODE"
                    FIELD=":p_debug_mode"
                    PRINT_ERROR="N"')*/
	  lp_debug_mode:=FND_PROFILE.VALUE('PA_DEBUG_MODE');
      P_RULE_OPTIMIZER := FND_PROFILE.VALUE('PA_RULE_BASED_OPTIMIZER');
     /* IF (GET_COMPANY_NAME <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;	 */
      IF (GET_RESOURCE_LIST_NAME <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      SELECT
        MEANING
      INTO NDF
      FROM
        PA_LOOKUPS
      WHERE LOOKUP_CODE = 'NO_DATA_FOUND'
        AND LOOKUP_TYPE = 'MESSAGE';
      C_NO_DATA_FOUND := NDF;
      /*SRW.MESSAGE(1
                 ,'Concurrent request id is ' || TO_CHAR(P_CONC_REQUEST_ID))*/NULL;
      /*SRW.MESSAGE(1
                 ,'Calling Resource List Upgrade')*/NULL;
      PA_RES_LIST_UPGRADE_PKG.RES_LIST_TO_PLAN_RES_LIST(P_RESOURCE_LIST
                                                       ,'T'
                                                       ,'T'
                                                       ,X_RETURN_STATUS
                                                       ,X_MSG_COUNT
                                                       ,X_MSG_DATA);
      IF (C_RETCODE <> 0) THEN
        /*SRW.MESSAGE(1,ERRBUF)*/NULL;
        NUMBER_OF_MESSAGES := PA_DEBUG.NO_OF_DEBUG_MESSAGES;
        IF (lp_debug_mode = 'Y' AND NUMBER_OF_MESSAGES > 0) THEN
          /*SRW.MESSAGE(1
                     ,'Debug Messages:')*/NULL;
          FOR i IN 1 .. NUMBER_OF_MESSAGES LOOP
            PA_DEBUG.GET_MESSAGE(I
                                ,MESSAGE_BUF);
            /*SRW.MESSAGE(1,MESSAGE_BUF)*/NULL;
          END LOOP;
        END IF;
      END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        SELECT
          MEANING
        INTO NDF
        FROM
          PA_LOOKUPS
        WHERE LOOKUP_CODE = 'NO_DATA_FOUND'
          AND LOOKUP_TYPE = 'MESSAGE';
        C_NO_DATA_FOUND := NDF;
        C_DUMMY_DATA := 1;
      WHEN OTHERS THEN
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,SQLERRM);
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

/*  FUNCTION GET_COMPANY_NAME RETURN BOOLEAN IS
    L_NAME GL_SETS_OF_BOOKS.NAME%TYPE;
  BEGIN
    SELECT
      GL.NAME
    INTO L_NAME
    FROM
      GL_SETS_OF_BOOKS GL,
      PA_IMPLEMENTATIONS PI
    WHERE GL.SET_OF_BOOKS_ID = PI.SET_OF_BOOKS_ID;
    C_COMPANY_NAME_HEADER := L_NAME;
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COMPANY_NAME;
 */
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      MESSAGE_BUF VARCHAR2(256);
      NUMBER_OF_MESSAGES NUMBER;
      ACCUM_ERROR EXCEPTION;
    BEGIN
      NUMBER_OF_MESSAGES := PA_DEBUG.NO_OF_DEBUG_MESSAGES;
      IF (lp_debug_mode = 'Y' AND NUMBER_OF_MESSAGES > 0) THEN
        /*SRW.MESSAGE(1
                   ,'Debug Messages:')*/NULL;
        FOR i IN 1 .. NUMBER_OF_MESSAGES LOOP
          PA_DEBUG.GET_MESSAGE(I
                              ,MESSAGE_BUF);
          /*SRW.MESSAGE(1
                     ,MESSAGE_BUF)*/NULL;
        END LOOP;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION GET_RESOURCE_LIST_NAME RETURN BOOLEAN IS
    RL_NAME PA_RESOURCE_LISTS.NAME%TYPE;
  BEGIN
    IF (P_RESOURCE_LIST IS NOT NULL) THEN
      SELECT
        NAME
      INTO RL_NAME
      FROM
        PA_RESOURCE_LISTS
      WHERE RESOURCE_LIST_ID = P_RESOURCE_LIST;
      C_RESOURCE_LIST := RL_NAME;
    END IF;
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_RESOURCE_LIST_NAME;

 /* FUNCTION C_COMPANY_NAME_HEADER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COMPANY_NAME_HEADER;
  END C_COMPANY_NAME_HEADER_P;
*/
  FUNCTION C_NO_DATA_FOUND_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NO_DATA_FOUND;
  END C_NO_DATA_FOUND_P;

  FUNCTION C_DUMMY_DATA_P RETURN NUMBER IS
  BEGIN
    RETURN C_DUMMY_DATA;
  END C_DUMMY_DATA_P;

  FUNCTION C_RESOURCE_LIST_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_RESOURCE_LIST;
  END C_RESOURCE_LIST_P;

  FUNCTION C_RETCODE_P RETURN NUMBER IS
  BEGIN
    RETURN C_RETCODE;
  END C_RETCODE_P;

END PA_PAUPGRRL_XMLP_PKG;


/
