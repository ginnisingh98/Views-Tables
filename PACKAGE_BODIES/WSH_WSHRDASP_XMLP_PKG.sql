--------------------------------------------------------
--  DDL for Package Body WSH_WSHRDASP_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."WSH_WSHRDASP_XMLP_PKG" AS
/* $Header: WSHRDASPB.pls 120.2.12010000.2 2009/08/18 08:48:29 gbhargav ship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    CURSOR GET_BATCH_NAME(V_BATCH_ID IN NUMBER) IS
      SELECT
        WPB.NAME
      FROM
        WSH_PICKING_BATCHES WPB
      WHERE WPB.BATCH_ID = V_BATCH_ID;
    CURSOR GET_CUSTOMER IS
      SELECT
        SUBSTRB(PARTY.PARTY_NAME
               ,1
               ,50) CUSTOMER_NAME
      FROM
        HZ_PARTIES PARTY,
        HZ_CUST_ACCOUNTS CUST_ACCT
      WHERE CUST_ACCT.PARTY_ID = PARTY.PARTY_ID
        AND CUST_ACCT.CUST_ACCOUNT_ID = P_CUSTOMER_ID;
    CURSOR GET_DELIVERY(P_DELID IN NUMBER) IS
      SELECT
        NAME
      FROM
        WSH_NEW_DELIVERIES
      WHERE DELIVERY_ID = P_DELID;
    CURSOR GET_ORG_NAME IS
      SELECT
        NAME
      FROM
        HR_ALL_ORGANIZATION_UNITS
      WHERE ORGANIZATION_ID = P_ORG;
    CURSOR GET_SHIP_METHOD IS
      SELECT
        MEANING
      FROM
        FND_LOOKUP_VALUES_VL
      WHERE LOOKUP_TYPE = 'SHIP METHOD'
        AND LOOKUP_CODE = P_SHIP_METHOD_CODE;
    CURSOR GET_SHIP_CONF_RULE_NAME IS
      SELECT
        NAME
      FROM
        WSH_SHIP_CONFIRM_RULES
      WHERE SHIP_CONFIRM_RULE_ID = P_SC_RULE_ID;
    CURSOR GET_YES_NO_LOOKUP IS
      SELECT
        MEANING
      FROM
        FND_LOOKUPS
      WHERE LOOKUP_TYPE = 'YES_NO'
        AND LOOKUP_CODE = P_EXCEPTIONS_ONLY;
    CURSOR GET_AUTO_SC_ENABLE_MESSAGE IS
      SELECT
        MESSAGE_TEXT
      FROM
        FND_NEW_MESSAGES
      WHERE MESSAGE_NAME = 'WSH_AUTO_SC_MESSAGE'
        AND LANGUAGE_CODE = USERENV('LANG');
    APF BOOLEAN;
  BEGIN
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;

       /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Failed FND SRWINIT.')*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    IF P_BATCH_TYPE = 'SC' AND P_SC_BATCH_ID IS NOT NULL THEN
      OPEN GET_BATCH_NAME(P_SC_BATCH_ID);
      FETCH GET_BATCH_NAME
       INTO CP_BATCH_NAME;
      CLOSE GET_BATCH_NAME;
      CP_BATCH_ID := P_SC_BATCH_ID;
    ELSIF P_BATCH_TYPE = 'AP' AND P_AP_BATCH_ID IS NOT NULL THEN
      OPEN GET_BATCH_NAME(P_AP_BATCH_ID);
      FETCH GET_BATCH_NAME
       INTO CP_BATCH_NAME;
      CLOSE GET_BATCH_NAME;
      CP_BATCH_ID := P_AP_BATCH_ID;
    END IF;
    IF P_SHIP_METHOD_CODE IS NOT NULL THEN
      CP_SHIP_METHOD := WSH_UTIL_CORE.GET_LOOKUP_MEANING('SHIP METHOD'
                                                        ,P_SHIP_METHOD_CODE);
    END IF;
    IF P_PR_BATCH_ID IS NOT NULL THEN
      OPEN GET_BATCH_NAME(P_PR_BATCH_ID);
      FETCH GET_BATCH_NAME
       INTO CP_PR_BATCH;
      CLOSE GET_BATCH_NAME;
    END IF;
    IF P_SHIP_FROM IS NOT NULL THEN
      CP_SHIP_FROM := WSH_UTIL_CORE.GET_LOCATION_DESCRIPTION(P_SHIP_FROM
                                                            ,'NEW UI CODE');
    END IF;
    IF P_SHIP_TO IS NOT NULL THEN
      CP_SHIP_TO := WSH_UTIL_CORE.GET_LOCATION_DESCRIPTION(P_SHIP_TO
                                                          ,'NEW UI CODE');
    END IF;
    IF P_CUSTOMER_ID IS NOT NULL THEN
      OPEN GET_CUSTOMER;
      FETCH GET_CUSTOMER
       INTO CP_CUSTOMER;
      CLOSE GET_CUSTOMER;
    END IF;
    IF P_ORG IS NOT NULL THEN
      OPEN GET_ORG_NAME;
      FETCH GET_ORG_NAME
       INTO CP_ORG;
      CLOSE GET_ORG_NAME;
    END IF;
    IF P_DELIVERY_FROM IS NOT NULL THEN
      OPEN GET_DELIVERY(P_DELIVERY_FROM);
      FETCH GET_DELIVERY
       INTO CP_DELIVERY_FROM;
      CLOSE GET_DELIVERY;
    END IF;
    IF P_DELIVERY_TO IS NOT NULL THEN
      OPEN GET_DELIVERY(P_DELIVERY_TO);
      FETCH GET_DELIVERY
       INTO CP_DELIVERY_TO;
      CLOSE GET_DELIVERY;
    END IF;
    IF P_EXCEPTIONS_ONLY IS NOT NULL THEN
      CP_EXCEPTIONS_ONLY := WSH_UTIL_CORE.GET_LOOKUP_MEANING('YES_NO',P_EXCEPTIONS_ONLY);
    END IF;
    IF P_BATCH_TYPE = 'SC' THEN
      OPEN GET_SHIP_CONF_RULE_NAME;
      FETCH GET_SHIP_CONF_RULE_NAME
       INTO CP_AUTO_CONFIRM_RULE;
      CLOSE GET_SHIP_CONF_RULE_NAME;
    END IF;
    IF P_BATCH_TYPE = 'SC' THEN
      OPEN GET_AUTO_SC_ENABLE_MESSAGE;
      FETCH GET_AUTO_SC_ENABLE_MESSAGE
       INTO P_AUTO_SC_MESSAGE;
      CLOSE GET_AUTO_SC_ENABLE_MESSAGE;
    END IF;
    CP_PICKUP_DATE_FROM :=TO_CHAR (P_PICKUP_DATE_FROM ,'YYYY/MM/DD');
    CP_PICKUP_DATE_TO := TO_CHAR (P_PICKUP_DATE_TO ,'YYYY/MM/DD');
    CP_DROPOFF_DATE_FROM := TO_CHAR (P_DROPOFF_DATE_FROM,'yyyy/MM/DD');
    CP_DROPOFF_DATE_TO := TO_CHAR (P_DROPOFF_DATE_TO,'YYYY/MM/DD');

    LP_PICKUP_DATE_TO := TO_DATE(CP_PICKUP_DATE_TO,'YYYY/MM/DD');
    LP_DROPOFF_DATE_TO := TO_DATE(CP_DROPOFF_DATE_TO,'YYYY/MM/DD');
    LP_PICKUP_DATE_FROM := TO_DATE(CP_PICKUP_DATE_FROM,'YYYY/MM/DD');
    LP_DROPOFF_DATE_FROM := TO_DATE(CP_DROPOFF_DATE_FROM,'YYYY/MM/DD');

   /* LP_PICKUP_DATE_TO := TO_DATE(TO_CHAR (P_PICKUP_DATE_TO ,'DD-MON-YY'),'DD-MON-YY');
    LP_DROPOFF_DATE_TO := TO_DATE(TO_CHAR (P_DROPOFF_DATE_TO,'DD-MON-YY'),'DD-MON-YY');
    LP_PICKUP_DATE_FROM := TO_DATE(TO_CHAR (P_PICKUP_DATE_FROM ,'DD-MON-YY'),'DD-MON-YY');
    LP_DROPOFF_DATE_FROM := TO_DATE(TO_CHAR (P_DROPOFF_DATE_FROM,'DD-MON-YY'),'DD-MON-YY');*/

    APF := AFTERPFORM;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    IF (P_BOL_FROM IS NOT NULL) AND (P_BOL_TO IS NOT NULL) THEN
      IF P_BOL_FROM = P_BOL_TO THEN
        LP_BOL_NUMBER := ' wdi.sequence_number = :p_bol_from and ';  --bug 8790658 replaced wbr.bill_of_lading_number with wdi.sequence_number
      ELSE
        LP_BOL_NUMBER := ' wdi.sequence_number between :p_bol_from and :p_bol_to and '; --bug 8790658
      END IF;
    ELSIF P_BOL_FROM IS NOT NULL THEN
      LP_BOL_NUMBER := ' wdi.sequence_number  >= :p_bol_from and '; --bug 8790658
    ELSIF P_BOL_TO IS NOT NULL THEN
      LP_BOL_NUMBER := ' wdi.sequence_number <= :p_bol_to and '; --bug 8790658
    ELSE
      LP_BOL_NUMBER := ' ';  --praveen
    END IF;
    P_PR_BATCH := ' ';
    IF P_BATCH_TYPE = 'SC' THEN
      P_PR_BATCH := ' we.batch_id(+) = wnd.batch_id and  ';
    ELSIF P_BATCH_TYPE = 'AP' THEN
      P_PR_BATCH := 'we.batch_id(+) = wnd.ap_batch_id and ';
    END IF;
    IF P_SHIP_FROM IS NOT NULL THEN
      P_PR_BATCH := P_PR_BATCH || ' wnd.initial_pickup_location_id = :p_ship_from and ';
    END IF;
    IF P_SHIP_TO IS NOT NULL THEN
      P_PR_BATCH := P_PR_BATCH || ' wnd.ultimate_dropoff_location_id = :p_ship_to and ';
    END IF;
    IF P_SC_BATCH_ID IS NOT NULL THEN
      P_PR_BATCH := P_PR_BATCH || ' NVL(wnd.batch_id, -1) = to_number(:p_sc_batch_id) and ';
    END IF;
    IF P_AP_BATCH_ID IS NOT NULL THEN
      P_PR_BATCH := P_PR_BATCH || ' NVL(wnd.ap_batch_id, -1) = to_number(:p_ap_batch_id) and ';
    END IF;
    IF P_PICKUP_DATE_FROM IS NOT NULL THEN
      P_PR_BATCH := P_PR_BATCH || ' wnd.initial_pickup_date >= to_date(:lp_pickup_date_from,''DD-MON-YY'') and ';
    END IF;
    IF LP_PICKUP_DATE_TO IS NOT NULL THEN
      --LP_PICKUP_DATE_TO := LP_PICKUP_DATE_TO + (86399 / 86400);
      P_PR_BATCH := P_PR_BATCH || ' wnd.initial_pickup_date <= to_date(:lp_pickup_date_to,''DD-MON-YY'') + (86399 / 86400) and';
    END IF;
    IF P_DROPOFF_DATE_FROM IS NOT NULL THEN
      P_PR_BATCH := P_PR_BATCH || ' wnd.ultimate_dropoff_date >= to_date(:lp_dropoff_date_from,''DD-MON-YY'') and ';
    END IF;
    IF LP_DROPOFF_DATE_TO IS NOT NULL THEN
    --  LP_DROPOFF_DATE_TO := LP_DROPOFF_DATE_TO + (86399 / 86400);
      P_PR_BATCH := P_PR_BATCH || ' wnd.ultimate_dropoff_date <= to_date(:lp_dropoff_date_to,''DD-MON-YY'')  + (86399 / 86400) and ';
    END IF;
    IF P_CUSTOMER_ID IS NOT NULL THEN
      P_PR_BATCH := P_PR_BATCH || ' NVL(wnd.customer_id, -1) = :p_customer_id and ';
    END IF;
    IF P_ORG IS NOT NULL THEN
      P_PR_BATCH := P_PR_BATCH || ' wnd.organization_id = :p_org and ';
    END IF;
    IF P_DELIVERY_FROM IS NOT NULL THEN
      P_PR_BATCH := P_PR_BATCH || ' wnd.delivery_id >= :p_delivery_from and ';
    END IF;
    IF P_DELIVERY_TO IS NOT NULL THEN
      P_PR_BATCH := P_PR_BATCH || ' wnd.delivery_id <= :p_delivery_to and ';
    END IF;
    IF P_PLANNED_FLAG IS NOT NULL THEN
      P_PR_BATCH := P_PR_BATCH || ' NVL(wnd.planned_flag, ''N'') = :p_planned_flag and ';
    END IF;
    IF P_SC_RULE_ID IS NOT NULL THEN
      P_PR_BATCH := P_PR_BATCH || ' NVL(wpb.ship_confirm_rule_id, -1) = :p_sc_rule_id and ';
    END IF;
    IF P_PR_BATCH_ID IS NOT NULL THEN
      P_PR_BATCH := P_PR_BATCH || 'wnd.delivery_id in (select a.delivery_id ' || 'from wsh_delivery_assignments_v a, wsh_delivery_details d ' || 'where d.delivery_detail_id = a.delivery_detail_id ' || 'and d.batch_id = :p_pr_batch_id) and ';
    END IF;
    IF P_EXCEPTIONS_ONLY = 'Y' THEN
      P_EXCEPTIONS := '  we.error_message is null and we.exception_id is not null and ';
    ELSE
      P_EXCEPTIONS := ' ';
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION BEFOREPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END BEFOREPFORM;

  FUNCTION CF_1FORMULA(DELIVERY_ID IN NUMBER) RETURN VARCHAR2 IS
    CURSOR C_GET_TRIP_NAME IS
      SELECT
        WT.TRIP_ID,
        WT.NAME
      FROM
        WSH_TRIPS WT,
        WSH_TRIP_STOPS WTS,
        WSH_DELIVERY_LEGS WDL
      WHERE WDL.DELIVERY_ID = CF_1FORMULA.DELIVERY_ID
        AND WTS.STOP_ID = WDL.PICK_UP_STOP_ID
        AND WTS.TRIP_ID = WT.TRIP_ID;
    L_TRIP_NAME VARCHAR2(30);
  BEGIN
    IF DELIVERY_ID IS NULL THEN
      CP_TRIP_NAME := NULL;
      CP_TRIP_ID := NULL;
      RETURN NULL;
    ELSE
      OPEN C_GET_TRIP_NAME;
      FETCH C_GET_TRIP_NAME
       INTO CP_TRIP_ID,L_TRIP_NAME;
      IF C_GET_TRIP_NAME%NOTFOUND THEN
        CLOSE C_GET_TRIP_NAME;
        RAISE NO_DATA_FOUND;
      END IF;
      CLOSE C_GET_TRIP_NAME;
      CP_TRIP_NAME := L_TRIP_NAME;
      RETURN L_TRIP_NAME;
    END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN NULL;
    WHEN OTHERS THEN
      IF C_GET_TRIP_NAME%ISOPEN THEN
        CLOSE C_GET_TRIP_NAME;
      END IF;
      RETURN NULL;
  END CF_1FORMULA;

  FUNCTION CF_MESSAGE(EXCEPTION_ID IN NUMBER) RETURN VARCHAR2 IS
    CURSOR SHIP_EXCEPTION IS
      SELECT
        MESSAGE
      FROM
        WSH_EXCEPTIONS E
      WHERE E.EXCEPTION_ID = CF_MESSAGE.EXCEPTION_ID
        AND E.ERROR_MESSAGE is null;
    CURSOR PACK_EXCEPTION IS
      SELECT
        MESSAGE
      FROM
        WSH_EXCEPTIONS E
      WHERE E.EXCEPTION_ID = CF_MESSAGE.EXCEPTION_ID
        AND E.ERROR_MESSAGE is not null;
    L_MESSAGE VARCHAR2(2000);
  BEGIN
    IF EXCEPTION_ID IS NULL THEN
      L_MESSAGE := NULL;
    ELSE
      IF P_BATCH_TYPE = 'SC' THEN
        OPEN SHIP_EXCEPTION;
        FETCH SHIP_EXCEPTION
         INTO L_MESSAGE;
        CLOSE SHIP_EXCEPTION;
      ELSE
        OPEN PACK_EXCEPTION;
        FETCH PACK_EXCEPTION
         INTO L_MESSAGE;
        CLOSE PACK_EXCEPTION;
      END IF;
    END IF;
    RETURN L_MESSAGE;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN NULL;
    WHEN OTHERS THEN
      IF SHIP_EXCEPTION%ISOPEN THEN
        CLOSE SHIP_EXCEPTION;
      END IF;
      IF PACK_EXCEPTION%ISOPEN THEN
        CLOSE PACK_EXCEPTION;
      END IF;
      RETURN NULL;
  END CF_MESSAGE;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Failed in SRWEXIT')*/NULL;
        RAISE;
    END;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION CP_BATCH_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_BATCH_NAME;
  END CP_BATCH_NAME_P;

  FUNCTION CP_CUSTOMER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_CUSTOMER;
  END CP_CUSTOMER_P;

  FUNCTION CP_SHIP_FROM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_SHIP_FROM;
  END CP_SHIP_FROM_P;

  FUNCTION CP_SHIP_TO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_SHIP_TO;
  END CP_SHIP_TO_P;

  FUNCTION CP_ORG_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_ORG;
  END CP_ORG_P;

  FUNCTION CP_PR_BATCH_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_PR_BATCH;
  END CP_PR_BATCH_P;

  FUNCTION CP_SHIP_METHOD_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_SHIP_METHOD;
  END CP_SHIP_METHOD_P;

  FUNCTION CP_DELIVERY_FROM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_DELIVERY_FROM;
  END CP_DELIVERY_FROM_P;

  FUNCTION CP_DELIVERY_TO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_DELIVERY_TO;
  END CP_DELIVERY_TO_P;

  FUNCTION CP_TRIP_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TRIP_NAME;
  END CP_TRIP_NAME_P;

  FUNCTION CP_TRIP_ID_P RETURN NUMBER IS
  BEGIN
    RETURN CP_TRIP_ID;
  END CP_TRIP_ID_P;

  FUNCTION CP_MESSAGE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_MESSAGE;
  END CP_MESSAGE_P;

  FUNCTION CP_BATCH_ID_P RETURN NUMBER IS
  BEGIN
    RETURN CP_BATCH_ID;
  END CP_BATCH_ID_P;

  FUNCTION CP_EXCEPTIONS_ONLY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_EXCEPTIONS_ONLY;
  END CP_EXCEPTIONS_ONLY_P;

  FUNCTION CP_AUTO_CONFIRM_RULE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_AUTO_CONFIRM_RULE;
  END CP_AUTO_CONFIRM_RULE_P;

END WSH_WSHRDASP_XMLP_PKG;



/
