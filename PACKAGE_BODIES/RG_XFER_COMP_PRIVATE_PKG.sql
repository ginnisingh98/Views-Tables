--------------------------------------------------------
--  DDL for Package Body RG_XFER_COMP_PRIVATE_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."RG_XFER_COMP_PRIVATE_PKG" as
/* $Header: rgixcppb.pls 120.5.12010000.2 2009/10/12 05:29:04 degoel ship $ */

  G_Error       NUMBER;
  G_Warning     NUMBER;

  G_SourceCOAId NUMBER;
  G_TargetCOAId NUMBER;
  G_LinkName    VARCHAR2(100);
  G_ApplId      NUMBER;

  /* Message Levels */
  G_ML_Minimal  NUMBER;
  G_ML_Normal   NUMBER;
  G_ML_Full     NUMBER;

  AxesString VARCHAR2(5000) :=
    'INSERT INTO RG_REPORT_AXES (' ||
    '  APPLICATION_ID, AXIS_SET_ID, AXIS_SEQ, LAST_UPDATE_DATE' ||
    ', LAST_UPDATED_BY, LAST_UPDATE_LOGIN, CREATION_DATE, CREATED_BY' ||
    ', AXIS_TYPE, AXIS_NAME, AMOUNT_ID, STANDARD_AXIS_ID' ||
    ', WIDTH, POSITION, STRUCTURE_ID, UNIT_OF_MEASURE_ID' ||
    ', PARAMETER_NUM, PERIOD_OFFSET, DESCRIPTION, DISPLAY_FLAG' ||
    ', BEFORE_AXIS_STRING, AFTER_AXIS_STRING, NUMBER_CHARACTERS_INDENTED' ||
    ', PAGE_BREAK_AFTER_FLAG, PAGE_BREAK_BEFORE_FLAG' ||
    ', NUMBER_LINES_SKIPPED_BEFORE, NUMBER_LINES_SKIPPED_AFTER,DISPLAY_LEVEL'||
    ', DISPLAY_ZERO_AMOUNT_FLAG, CHANGE_SIGN_FLAG, CHANGE_VARIANCE_SIGN_FLAG'||
    ', DISPLAY_UNITS, DISPLAY_FORMAT, CALCULATION_PRECEDENCE_FLAG, CONTEXT ' ||
    ', ATTRIBUTE1 , ATTRIBUTE2 , ATTRIBUTE3 , ATTRIBUTE4 , ATTRIBUTE5' ||
    ', ATTRIBUTE6 , ATTRIBUTE7 , ATTRIBUTE8 , ATTRIBUTE9 ' ||
    ', ATTRIBUTE10, ATTRIBUTE11, ATTRIBUTE12, ATTRIBUTE13' ||
    ', ATTRIBUTE14, ATTRIBUTE15, PERCENTAGE_DIVISOR_SEQ, TRANSACTION_FLAG' ||
    ', FORMAT_BEFORE_TEXT, FORMAT_AFTER_TEXT, FORMAT_MASK_WIDTH' ||
    ', DISPLAY_PRECISION, SEGMENT_OVERRIDE_VALUE' ||
    ', OVERRIDE_ALC_LEDGER_CURRENCY, ELEMENT_ID' ||
    ') SELECT' ||
    '  APPLICATION_ID, :id, AXIS_SEQ, sysdate' ||
    ', :user_id, :login_id, sysdate, :user_id' ||
    ', AXIS_TYPE, AXIS_NAME, AMOUNT_ID, STANDARD_AXIS_ID' ||
    ', WIDTH, POSITION, null, :currency_code ' ||
    ', PARAMETER_NUM, PERIOD_OFFSET, DESCRIPTION, DISPLAY_FLAG' ||
    ', BEFORE_AXIS_STRING, AFTER_AXIS_STRING, NUMBER_CHARACTERS_INDENTED' ||
    ', PAGE_BREAK_AFTER_FLAG, PAGE_BREAK_BEFORE_FLAG' ||
    ', NUMBER_LINES_SKIPPED_BEFORE, NUMBER_LINES_SKIPPED_AFTER,DISPLAY_LEVEL'||
    ', DISPLAY_ZERO_AMOUNT_FLAG, CHANGE_SIGN_FLAG, CHANGE_VARIANCE_SIGN_FLAG'||
    ', DISPLAY_UNITS, DISPLAY_FORMAT, CALCULATION_PRECEDENCE_FLAG, CONTEXT'  ||
    ', ATTRIBUTE1 , ATTRIBUTE2 , ATTRIBUTE3 , ATTRIBUTE4 , ATTRIBUTE5' ||
    ', ATTRIBUTE6 , ATTRIBUTE7 , ATTRIBUTE8 , ATTRIBUTE9 ' ||
    ', ATTRIBUTE10, ATTRIBUTE11, ATTRIBUTE12, ATTRIBUTE13' ||
    ', ATTRIBUTE14, ATTRIBUTE15, PERCENTAGE_DIVISOR_SEQ, TRANSACTION_FLAG' ||
    ', FORMAT_BEFORE_TEXT, FORMAT_AFTER_TEXT, FORMAT_MASK_WIDTH' ||
    ', DISPLAY_PRECISION,'||
    ''''||
    ':segment_override_value' ||
    ''''||
    ', :override_alc_ledger_currency, :elem_id ' ||
    'FROM RG_REPORT_AXES@';

ContentOverridesString VARCHAR2(12000) :=
 'INSERT INTO RG_REPORT_CONTENT_OVERRIDES (' ||
 '  APPLICATION_ID, CONTENT_SET_ID, LAST_UPDATE_DATE' ||
 ', LAST_UPDATED_BY, LAST_UPDATE_LOGIN, CREATION_DATE' ||
 ', CREATED_BY, OVERRIDE_SEQ, RANGE_MODE' ||
 ', LEDGER_ID, LEDGER_SEGMENT_TYPE, ALC_LEDGER_CURRENCY' ||
 ', SEGMENT1_LOW, SEGMENT1_HIGH, SEGMENT1_TYPE' ||
 ', SEGMENT2_LOW, SEGMENT2_HIGH, SEGMENT2_TYPE' ||
 ', SEGMENT3_LOW, SEGMENT3_HIGH, SEGMENT3_TYPE' ||
 ', SEGMENT4_LOW, SEGMENT4_HIGH, SEGMENT4_TYPE' ||
 ', SEGMENT5_LOW, SEGMENT5_HIGH, SEGMENT5_TYPE' ||
 ', SEGMENT6_LOW, SEGMENT6_HIGH, SEGMENT6_TYPE' ||
 ', SEGMENT7_LOW, SEGMENT7_HIGH, SEGMENT7_TYPE' ||
 ', SEGMENT8_LOW, SEGMENT8_HIGH, SEGMENT8_TYPE' ||
 ', SEGMENT9_LOW, SEGMENT9_HIGH, SEGMENT9_TYPE' ||
 ', SEGMENT10_LOW, SEGMENT10_HIGH, SEGMENT10_TYPE' ||
 ', SEGMENT11_LOW, SEGMENT11_HIGH, SEGMENT11_TYPE' ||
 ', SEGMENT12_LOW, SEGMENT12_HIGH, SEGMENT12_TYPE' ||
 ', SEGMENT13_LOW, SEGMENT13_HIGH, SEGMENT13_TYPE' ||
 ', SEGMENT14_LOW, SEGMENT14_HIGH, SEGMENT14_TYPE' ||
 ', SEGMENT15_LOW, SEGMENT15_HIGH, SEGMENT15_TYPE' ||
 ', SEGMENT16_LOW, SEGMENT16_HIGH, SEGMENT16_TYPE' ||
 ', SEGMENT17_LOW, SEGMENT17_HIGH, SEGMENT17_TYPE' ||
 ', SEGMENT18_LOW, SEGMENT18_HIGH, SEGMENT18_TYPE' ||
 ', SEGMENT19_LOW, SEGMENT19_HIGH, SEGMENT19_TYPE' ||
 ', SEGMENT20_LOW, SEGMENT20_HIGH, SEGMENT20_TYPE' ||
 ', SEGMENT21_LOW, SEGMENT21_HIGH, SEGMENT21_TYPE' ||
 ', SEGMENT22_LOW, SEGMENT22_HIGH, SEGMENT22_TYPE' ||
 ', SEGMENT23_LOW, SEGMENT23_HIGH, SEGMENT23_TYPE' ||
 ', SEGMENT24_LOW, SEGMENT24_HIGH, SEGMENT24_TYPE' ||
 ', SEGMENT25_LOW, SEGMENT25_HIGH, SEGMENT25_TYPE' ||
 ', SEGMENT26_LOW, SEGMENT26_HIGH, SEGMENT26_TYPE' ||
 ', SEGMENT27_LOW, SEGMENT27_HIGH, SEGMENT27_TYPE' ||
 ', SEGMENT28_LOW, SEGMENT28_HIGH, SEGMENT28_TYPE' ||
 ', SEGMENT29_LOW, SEGMENT29_HIGH, SEGMENT29_TYPE' ||
 ', SEGMENT30_LOW, SEGMENT30_HIGH, SEGMENT30_TYPE' ||
 ', CONTEXT, ATTRIBUTE1, ATTRIBUTE2, ATTRIBUTE3, ATTRIBUTE4, ATTRIBUTE5' ||
 ', ATTRIBUTE6, ATTRIBUTE7, ATTRIBUTE8, ATTRIBUTE9, ATTRIBUTE10, ATTRIBUTE11'||
 ', ATTRIBUTE12, ATTRIBUTE13, ATTRIBUTE14' ||
 ', ATTRIBUTE15, SEGMENT_ATTRIBUTE1_LOW, SEGMENT_ATTRIBUTE1_HIGH' ||
 ', SEGMENT_ATTRIBUTE1_TYPE, SEGMENT_ATTRIBUTE2_LOW, SEGMENT_ATTRIBUTE2_HIGH'||
 ', SEGMENT_ATTRIBUTE2_TYPE, SEGMENT_ATTRIBUTE3_LOW, SEGMENT_ATTRIBUTE3_HIGH'||
 ', SEGMENT_ATTRIBUTE3_TYPE, SEGMENT_ATTRIBUTE4_LOW, SEGMENT_ATTRIBUTE4_HIGH'||
 ', SEGMENT_ATTRIBUTE4_TYPE, SEGMENT_ATTRIBUTE5_LOW, SEGMENT_ATTRIBUTE5_HIGH'||
 ', SEGMENT_ATTRIBUTE5_TYPE, SEGMENT_ATTRIBUTE6_LOW, SEGMENT_ATTRIBUTE6_HIGH'||
 ', SEGMENT_ATTRIBUTE6_TYPE, SEGMENT_ATTRIBUTE7_LOW, SEGMENT_ATTRIBUTE7_HIGH'||
 ', SEGMENT_ATTRIBUTE7_TYPE, SEGMENT_ATTRIBUTE8_LOW, SEGMENT_ATTRIBUTE8_HIGH'||
 ', SEGMENT_ATTRIBUTE8_TYPE, SEGMENT_ATTRIBUTE9_LOW, SEGMENT_ATTRIBUTE9_HIGH'||
 ',SEGMENT_ATTRIBUTE9_TYPE,SEGMENT_ATTRIBUTE10_LOW,SEGMENT_ATTRIBUTE10_HIGH'||
 ',SEGMENT_ATTRIBUTE10_TYPE,SEGMENT_ATTRIBUTE11_LOW,SEGMENT_ATTRIBUTE11_HIGH'||
 ',SEGMENT_ATTRIBUTE11_TYPE,SEGMENT_ATTRIBUTE12_LOW,SEGMENT_ATTRIBUTE12_HIGH'||
 ',SEGMENT_ATTRIBUTE12_TYPE,SEGMENT_ATTRIBUTE13_LOW,SEGMENT_ATTRIBUTE13_HIGH'||
 ',SEGMENT_ATTRIBUTE13_TYPE,SEGMENT_ATTRIBUTE14_LOW,SEGMENT_ATTRIBUTE14_HIGH'||
 ',SEGMENT_ATTRIBUTE14_TYPE,SEGMENT_ATTRIBUTE15_LOW,SEGMENT_ATTRIBUTE15_HIGH'||
 ',SEGMENT_ATTRIBUTE15_TYPE,SEGMENT_ATTRIBUTE16_LOW,SEGMENT_ATTRIBUTE16_HIGH'||
 ',SEGMENT_ATTRIBUTE16_TYPE,SEGMENT_ATTRIBUTE17_LOW,SEGMENT_ATTRIBUTE17_HIGH'||
 ',SEGMENT_ATTRIBUTE17_TYPE,SEGMENT_ATTRIBUTE18_LOW,SEGMENT_ATTRIBUTE18_HIGH'||
 ',SEGMENT_ATTRIBUTE18_TYPE,SEGMENT_ATTRIBUTE19_LOW,SEGMENT_ATTRIBUTE19_HIGH'||
 ',SEGMENT_ATTRIBUTE19_TYPE,SEGMENT_ATTRIBUTE20_LOW,SEGMENT_ATTRIBUTE20_HIGH'||
 ',SEGMENT_ATTRIBUTE20_TYPE,SEGMENT_ATTRIBUTE21_LOW,SEGMENT_ATTRIBUTE21_HIGH'||
 ',SEGMENT_ATTRIBUTE21_TYPE,SEGMENT_ATTRIBUTE22_LOW,SEGMENT_ATTRIBUTE22_HIGH'||
 ',SEGMENT_ATTRIBUTE22_TYPE,SEGMENT_ATTRIBUTE23_LOW,SEGMENT_ATTRIBUTE23_HIGH'||
 ',SEGMENT_ATTRIBUTE23_TYPE,SEGMENT_ATTRIBUTE24_LOW,SEGMENT_ATTRIBUTE24_HIGH'||
 ',SEGMENT_ATTRIBUTE24_TYPE,SEGMENT_ATTRIBUTE25_LOW,SEGMENT_ATTRIBUTE25_HIGH'||
 ',SEGMENT_ATTRIBUTE25_TYPE,SEGMENT_ATTRIBUTE26_LOW,SEGMENT_ATTRIBUTE26_HIGH'||
 ',SEGMENT_ATTRIBUTE26_TYPE,SEGMENT_ATTRIBUTE27_LOW,SEGMENT_ATTRIBUTE27_HIGH'||
 ',SEGMENT_ATTRIBUTE27_TYPE,SEGMENT_ATTRIBUTE28_LOW,SEGMENT_ATTRIBUTE28_HIGH'||
 ',SEGMENT_ATTRIBUTE28_TYPE,SEGMENT_ATTRIBUTE29_LOW,SEGMENT_ATTRIBUTE29_HIGH'||
 ',SEGMENT_ATTRIBUTE29_TYPE,SEGMENT_ATTRIBUTE30_LOW,SEGMENT_ATTRIBUTE30_HIGH'||
 ',SEGMENT_ATTRIBUTE30_TYPE,SEGMENT_ATTRIBUTE31_LOW,SEGMENT_ATTRIBUTE31_HIGH'||
 ',SEGMENT_ATTRIBUTE31_TYPE,SEGMENT_ATTRIBUTE32_LOW,SEGMENT_ATTRIBUTE32_HIGH'||
 ',SEGMENT_ATTRIBUTE32_TYPE,SEGMENT_ATTRIBUTE33_LOW,SEGMENT_ATTRIBUTE33_HIGH'||
 ',SEGMENT_ATTRIBUTE33_TYPE,SEGMENT_ATTRIBUTE34_LOW,SEGMENT_ATTRIBUTE34_HIGH'||
 ',SEGMENT_ATTRIBUTE34_TYPE,SEGMENT_ATTRIBUTE35_LOW,SEGMENT_ATTRIBUTE35_HIGH'||
 ',SEGMENT_ATTRIBUTE35_TYPE,SEGMENT_ATTRIBUTE36_LOW,SEGMENT_ATTRIBUTE36_HIGH'||
 ',SEGMENT_ATTRIBUTE36_TYPE,SEGMENT_ATTRIBUTE37_LOW,SEGMENT_ATTRIBUTE37_HIGH'||
 ',SEGMENT_ATTRIBUTE37_TYPE,SEGMENT_ATTRIBUTE38_LOW,SEGMENT_ATTRIBUTE38_HIGH'||
 ',SEGMENT_ATTRIBUTE38_TYPE,SEGMENT_ATTRIBUTE39_LOW,SEGMENT_ATTRIBUTE39_HIGH'||
 ',SEGMENT_ATTRIBUTE39_TYPE,SEGMENT_ATTRIBUTE40_LOW,SEGMENT_ATTRIBUTE40_HIGH'||
 ',SEGMENT_ATTRIBUTE40_TYPE,SEGMENT_ATTRIBUTE41_LOW,SEGMENT_ATTRIBUTE41_HIGH'||
 ',SEGMENT_ATTRIBUTE41_TYPE,SEGMENT_ATTRIBUTE42_LOW,SEGMENT_ATTRIBUTE42_HIGH'||
 ',SEGMENT_ATTRIBUTE42_TYPE'||
 ') SELECT'||
 '  APPLICATION_ID, :id, sysdate' ||
 ', :user_id, :login_id, sysdate' ||
 ', :user_id, OVERRIDE_SEQ, RANGE_MODE' ||
 ', :ledger_id, LEDGER_SEGMENT_TYPE, :alc_ledger_currency' ||
 ', SEGMENT1_LOW, SEGMENT1_HIGH, SEGMENT1_TYPE' ||
 ', SEGMENT2_LOW, SEGMENT2_HIGH, SEGMENT2_TYPE' ||
 ', SEGMENT3_LOW, SEGMENT3_HIGH, SEGMENT3_TYPE' ||
 ', SEGMENT4_LOW, SEGMENT4_HIGH, SEGMENT4_TYPE' ||
 ', SEGMENT5_LOW, SEGMENT5_HIGH, SEGMENT5_TYPE' ||
 ', SEGMENT6_LOW, SEGMENT6_HIGH, SEGMENT6_TYPE' ||
 ', SEGMENT7_LOW, SEGMENT7_HIGH, SEGMENT7_TYPE' ||
 ', SEGMENT8_LOW, SEGMENT8_HIGH, SEGMENT8_TYPE' ||
 ', SEGMENT9_LOW, SEGMENT9_HIGH, SEGMENT9_TYPE' ||
 ', SEGMENT10_LOW, SEGMENT10_HIGH, SEGMENT10_TYPE' ||
 ', SEGMENT11_LOW, SEGMENT11_HIGH, SEGMENT11_TYPE' ||
 ', SEGMENT12_LOW, SEGMENT12_HIGH, SEGMENT12_TYPE' ||
 ', SEGMENT13_LOW, SEGMENT13_HIGH, SEGMENT13_TYPE' ||
 ', SEGMENT14_LOW, SEGMENT14_HIGH, SEGMENT14_TYPE' ||
 ', SEGMENT15_LOW, SEGMENT15_HIGH, SEGMENT15_TYPE' ||
 ', SEGMENT16_LOW, SEGMENT16_HIGH, SEGMENT16_TYPE' ||
 ', SEGMENT17_LOW, SEGMENT17_HIGH, SEGMENT17_TYPE' ||
 ', SEGMENT18_LOW, SEGMENT18_HIGH, SEGMENT18_TYPE' ||
 ', SEGMENT19_LOW, SEGMENT19_HIGH, SEGMENT19_TYPE' ||
 ', SEGMENT20_LOW, SEGMENT20_HIGH, SEGMENT20_TYPE' ||
 ', SEGMENT21_LOW, SEGMENT21_HIGH, SEGMENT21_TYPE' ||
 ', SEGMENT22_LOW, SEGMENT22_HIGH, SEGMENT22_TYPE' ||
 ', SEGMENT23_LOW, SEGMENT23_HIGH, SEGMENT23_TYPE' ||
 ', SEGMENT24_LOW, SEGMENT24_HIGH, SEGMENT24_TYPE' ||
 ', SEGMENT25_LOW, SEGMENT25_HIGH, SEGMENT25_TYPE' ||
 ', SEGMENT26_LOW, SEGMENT26_HIGH, SEGMENT26_TYPE' ||
 ', SEGMENT27_LOW, SEGMENT27_HIGH, SEGMENT27_TYPE' ||
 ', SEGMENT28_LOW, SEGMENT28_HIGH, SEGMENT28_TYPE' ||
 ', SEGMENT29_LOW, SEGMENT29_HIGH, SEGMENT29_TYPE' ||
 ', SEGMENT30_LOW, SEGMENT30_HIGH, SEGMENT30_TYPE' ||
 ', CONTEXT, ATTRIBUTE1, ATTRIBUTE2, ATTRIBUTE3, ATTRIBUTE4, ATTRIBUTE5' ||
 ', ATTRIBUTE6, ATTRIBUTE7, ATTRIBUTE8, ATTRIBUTE9, ATTRIBUTE10, ATTRIBUTE11'||
 ', ATTRIBUTE12, ATTRIBUTE13, ATTRIBUTE14' ||
 ', ATTRIBUTE15, SEGMENT_ATTRIBUTE1_LOW, SEGMENT_ATTRIBUTE1_HIGH' ||
 ', SEGMENT_ATTRIBUTE1_TYPE, SEGMENT_ATTRIBUTE2_LOW, SEGMENT_ATTRIBUTE2_HIGH'||
 ', SEGMENT_ATTRIBUTE2_TYPE, SEGMENT_ATTRIBUTE3_LOW, SEGMENT_ATTRIBUTE3_HIGH'||
 ', SEGMENT_ATTRIBUTE3_TYPE, SEGMENT_ATTRIBUTE4_LOW, SEGMENT_ATTRIBUTE4_HIGH'||
 ', SEGMENT_ATTRIBUTE4_TYPE, SEGMENT_ATTRIBUTE5_LOW, SEGMENT_ATTRIBUTE5_HIGH'||
 ', SEGMENT_ATTRIBUTE5_TYPE, SEGMENT_ATTRIBUTE6_LOW, SEGMENT_ATTRIBUTE6_HIGH'||
 ', SEGMENT_ATTRIBUTE6_TYPE, SEGMENT_ATTRIBUTE7_LOW, SEGMENT_ATTRIBUTE7_HIGH'||
 ', SEGMENT_ATTRIBUTE7_TYPE, SEGMENT_ATTRIBUTE8_LOW, SEGMENT_ATTRIBUTE8_HIGH'||
 ', SEGMENT_ATTRIBUTE8_TYPE, SEGMENT_ATTRIBUTE9_LOW, SEGMENT_ATTRIBUTE9_HIGH'||
 ',SEGMENT_ATTRIBUTE9_TYPE,SEGMENT_ATTRIBUTE10_LOW,SEGMENT_ATTRIBUTE10_HIGH'||
 ',SEGMENT_ATTRIBUTE10_TYPE,SEGMENT_ATTRIBUTE11_LOW,SEGMENT_ATTRIBUTE11_HIGH'||
 ',SEGMENT_ATTRIBUTE11_TYPE,SEGMENT_ATTRIBUTE12_LOW,SEGMENT_ATTRIBUTE12_HIGH'||
 ',SEGMENT_ATTRIBUTE12_TYPE,SEGMENT_ATTRIBUTE13_LOW,SEGMENT_ATTRIBUTE13_HIGH'||
 ',SEGMENT_ATTRIBUTE13_TYPE,SEGMENT_ATTRIBUTE14_LOW,SEGMENT_ATTRIBUTE14_HIGH'||
 ',SEGMENT_ATTRIBUTE14_TYPE,SEGMENT_ATTRIBUTE15_LOW,SEGMENT_ATTRIBUTE15_HIGH'||
 ',SEGMENT_ATTRIBUTE15_TYPE,SEGMENT_ATTRIBUTE16_LOW,SEGMENT_ATTRIBUTE16_HIGH'||
 ',SEGMENT_ATTRIBUTE16_TYPE,SEGMENT_ATTRIBUTE17_LOW,SEGMENT_ATTRIBUTE17_HIGH'||
 ',SEGMENT_ATTRIBUTE17_TYPE,SEGMENT_ATTRIBUTE18_LOW,SEGMENT_ATTRIBUTE18_HIGH'||
 ',SEGMENT_ATTRIBUTE18_TYPE,SEGMENT_ATTRIBUTE19_LOW,SEGMENT_ATTRIBUTE19_HIGH'||
 ',SEGMENT_ATTRIBUTE19_TYPE,SEGMENT_ATTRIBUTE20_LOW,SEGMENT_ATTRIBUTE20_HIGH'||
 ',SEGMENT_ATTRIBUTE20_TYPE,SEGMENT_ATTRIBUTE21_LOW,SEGMENT_ATTRIBUTE21_HIGH'||
 ',SEGMENT_ATTRIBUTE21_TYPE,SEGMENT_ATTRIBUTE22_LOW,SEGMENT_ATTRIBUTE22_HIGH'||
 ',SEGMENT_ATTRIBUTE22_TYPE,SEGMENT_ATTRIBUTE23_LOW,SEGMENT_ATTRIBUTE23_HIGH'||
 ',SEGMENT_ATTRIBUTE23_TYPE,SEGMENT_ATTRIBUTE24_LOW,SEGMENT_ATTRIBUTE24_HIGH'||
 ',SEGMENT_ATTRIBUTE24_TYPE,SEGMENT_ATTRIBUTE25_LOW,SEGMENT_ATTRIBUTE25_HIGH'||
 ',SEGMENT_ATTRIBUTE25_TYPE,SEGMENT_ATTRIBUTE26_LOW,SEGMENT_ATTRIBUTE26_HIGH'||
 ',SEGMENT_ATTRIBUTE26_TYPE,SEGMENT_ATTRIBUTE27_LOW,SEGMENT_ATTRIBUTE27_HIGH'||
 ',SEGMENT_ATTRIBUTE27_TYPE,SEGMENT_ATTRIBUTE28_LOW,SEGMENT_ATTRIBUTE28_HIGH'||
 ',SEGMENT_ATTRIBUTE28_TYPE,SEGMENT_ATTRIBUTE29_LOW,SEGMENT_ATTRIBUTE29_HIGH'||
 ',SEGMENT_ATTRIBUTE29_TYPE,SEGMENT_ATTRIBUTE30_LOW,SEGMENT_ATTRIBUTE30_HIGH'||
 ',SEGMENT_ATTRIBUTE30_TYPE,SEGMENT_ATTRIBUTE31_LOW,SEGMENT_ATTRIBUTE31_HIGH'||
 ',SEGMENT_ATTRIBUTE31_TYPE,SEGMENT_ATTRIBUTE32_LOW,SEGMENT_ATTRIBUTE32_HIGH'||
 ',SEGMENT_ATTRIBUTE32_TYPE,SEGMENT_ATTRIBUTE33_LOW,SEGMENT_ATTRIBUTE33_HIGH'||
 ',SEGMENT_ATTRIBUTE33_TYPE,SEGMENT_ATTRIBUTE34_LOW,SEGMENT_ATTRIBUTE34_HIGH'||
 ',SEGMENT_ATTRIBUTE34_TYPE,SEGMENT_ATTRIBUTE35_LOW,SEGMENT_ATTRIBUTE35_HIGH'||
 ',SEGMENT_ATTRIBUTE35_TYPE,SEGMENT_ATTRIBUTE36_LOW,SEGMENT_ATTRIBUTE36_HIGH'||
 ',SEGMENT_ATTRIBUTE36_TYPE,SEGMENT_ATTRIBUTE37_LOW,SEGMENT_ATTRIBUTE37_HIGH'||
 ',SEGMENT_ATTRIBUTE37_TYPE,SEGMENT_ATTRIBUTE38_LOW,SEGMENT_ATTRIBUTE38_HIGH'||
 ',SEGMENT_ATTRIBUTE38_TYPE,SEGMENT_ATTRIBUTE39_LOW,SEGMENT_ATTRIBUTE39_HIGH'||
 ',SEGMENT_ATTRIBUTE39_TYPE,SEGMENT_ATTRIBUTE40_LOW,SEGMENT_ATTRIBUTE40_HIGH'||
 ',SEGMENT_ATTRIBUTE40_TYPE,SEGMENT_ATTRIBUTE41_LOW,SEGMENT_ATTRIBUTE41_HIGH'||
 ',SEGMENT_ATTRIBUTE41_TYPE,SEGMENT_ATTRIBUTE42_LOW,SEGMENT_ATTRIBUTE42_HIGH'||
 ',SEGMENT_ATTRIBUTE42_TYPE '||
 'FROM RG_REPORT_CONTENT_OVERRIDES@';

AxisContentsString VARCHAR2(12000) :=
 'INSERT INTO RG_REPORT_AXIS_CONTENTS (' ||
 '  APPLICATION_ID, AXIS_SET_ID, AXIS_SEQ' ||
 ', LAST_UPDATE_DATE, LAST_UPDATED_BY, LAST_UPDATE_LOGIN' ||
 ', CREATION_DATE, CREATED_BY, RANGE_MODE, SIGN' ||
 ', DR_CR_NET_CODE, LEDGER_ID, LEDGER_SEGMENT_TYPE, ALC_LEDGER_CURRENCY' ||
 ', SEGMENT1_LOW, SEGMENT1_HIGH, SEGMENT1_TYPE' ||
 ', SEGMENT2_LOW, SEGMENT2_HIGH, SEGMENT2_TYPE' ||
 ', SEGMENT3_LOW, SEGMENT3_HIGH, SEGMENT3_TYPE' ||
 ', SEGMENT4_LOW, SEGMENT4_HIGH, SEGMENT4_TYPE' ||
 ', SEGMENT5_LOW, SEGMENT5_HIGH, SEGMENT5_TYPE' ||
 ', SEGMENT6_LOW, SEGMENT6_HIGH, SEGMENT6_TYPE' ||
 ', SEGMENT7_LOW, SEGMENT7_HIGH, SEGMENT7_TYPE' ||
 ', SEGMENT8_LOW, SEGMENT8_HIGH, SEGMENT8_TYPE' ||
 ', SEGMENT9_LOW, SEGMENT9_HIGH, SEGMENT9_TYPE' ||
 ', SEGMENT10_LOW, SEGMENT10_HIGH, SEGMENT10_TYPE' ||
 ', SEGMENT11_LOW, SEGMENT11_HIGH, SEGMENT11_TYPE' ||
 ', SEGMENT12_LOW, SEGMENT12_HIGH, SEGMENT12_TYPE' ||
 ', SEGMENT13_LOW, SEGMENT13_HIGH, SEGMENT13_TYPE' ||
 ', SEGMENT14_LOW, SEGMENT14_HIGH, SEGMENT14_TYPE' ||
 ', SEGMENT15_LOW, SEGMENT15_HIGH, SEGMENT15_TYPE' ||
 ', SEGMENT16_LOW, SEGMENT16_HIGH, SEGMENT16_TYPE' ||
 ', SEGMENT17_LOW, SEGMENT17_HIGH, SEGMENT17_TYPE' ||
 ', SEGMENT18_LOW, SEGMENT18_HIGH, SEGMENT18_TYPE' ||
 ', SEGMENT19_LOW, SEGMENT19_HIGH, SEGMENT19_TYPE' ||
 ', SEGMENT20_LOW, SEGMENT20_HIGH, SEGMENT20_TYPE' ||
 ', SEGMENT21_LOW, SEGMENT21_HIGH, SEGMENT21_TYPE' ||
 ', SEGMENT22_LOW, SEGMENT22_HIGH, SEGMENT22_TYPE' ||
 ', SEGMENT23_LOW, SEGMENT23_HIGH, SEGMENT23_TYPE' ||
 ', SEGMENT24_LOW, SEGMENT24_HIGH, SEGMENT24_TYPE' ||
 ', SEGMENT25_LOW, SEGMENT25_HIGH, SEGMENT25_TYPE' ||
 ', SEGMENT26_LOW, SEGMENT26_HIGH, SEGMENT26_TYPE' ||
 ', SEGMENT27_LOW, SEGMENT27_HIGH, SEGMENT27_TYPE' ||
 ', SEGMENT28_LOW, SEGMENT28_HIGH, SEGMENT28_TYPE' ||
 ', SEGMENT29_LOW, SEGMENT29_HIGH, SEGMENT29_TYPE' ||
 ', SEGMENT30_LOW, SEGMENT30_HIGH, SEGMENT30_TYPE' ||
 ', CONTEXT, ATTRIBUTE1, ATTRIBUTE2' ||
 ', ATTRIBUTE3, ATTRIBUTE4, ATTRIBUTE5' ||
 ', ATTRIBUTE6, ATTRIBUTE7, ATTRIBUTE8' ||
 ', ATTRIBUTE9, ATTRIBUTE10, ATTRIBUTE11' ||
 ', ATTRIBUTE12, ATTRIBUTE13, ATTRIBUTE14' ||
 ', ATTRIBUTE15, SEGMENT_ATTRIBUTE1_LOW, SEGMENT_ATTRIBUTE1_HIGH' ||
 ',SEGMENT_ATTRIBUTE1_TYPE,SEGMENT_ATTRIBUTE2_LOW,SEGMENT_ATTRIBUTE2_HIGH'||
 ',SEGMENT_ATTRIBUTE2_TYPE,SEGMENT_ATTRIBUTE3_LOW,SEGMENT_ATTRIBUTE3_HIGH'||
 ',SEGMENT_ATTRIBUTE3_TYPE,SEGMENT_ATTRIBUTE4_LOW,SEGMENT_ATTRIBUTE4_HIGH'||
 ',SEGMENT_ATTRIBUTE4_TYPE,SEGMENT_ATTRIBUTE5_LOW,SEGMENT_ATTRIBUTE5_HIGH'||
 ',SEGMENT_ATTRIBUTE5_TYPE,SEGMENT_ATTRIBUTE6_LOW,SEGMENT_ATTRIBUTE6_HIGH'||
 ',SEGMENT_ATTRIBUTE6_TYPE,SEGMENT_ATTRIBUTE7_LOW,SEGMENT_ATTRIBUTE7_HIGH'||
 ',SEGMENT_ATTRIBUTE7_TYPE,SEGMENT_ATTRIBUTE8_LOW,SEGMENT_ATTRIBUTE8_HIGH'||
 ',SEGMENT_ATTRIBUTE8_TYPE,SEGMENT_ATTRIBUTE9_LOW,SEGMENT_ATTRIBUTE9_HIGH'||
 ',SEGMENT_ATTRIBUTE9_TYPE,SEGMENT_ATTRIBUTE10_LOW,SEGMENT_ATTRIBUTE10_HIGH'||
 ',SEGMENT_ATTRIBUTE10_TYPE,SEGMENT_ATTRIBUTE11_LOW,SEGMENT_ATTRIBUTE11_HIGH'||
 ',SEGMENT_ATTRIBUTE11_TYPE,SEGMENT_ATTRIBUTE12_LOW,SEGMENT_ATTRIBUTE12_HIGH'||
 ',SEGMENT_ATTRIBUTE12_TYPE,SEGMENT_ATTRIBUTE13_LOW,SEGMENT_ATTRIBUTE13_HIGH'||
 ',SEGMENT_ATTRIBUTE13_TYPE,SEGMENT_ATTRIBUTE14_LOW,SEGMENT_ATTRIBUTE14_HIGH'||
 ',SEGMENT_ATTRIBUTE14_TYPE,SEGMENT_ATTRIBUTE15_LOW,SEGMENT_ATTRIBUTE15_HIGH'||
 ',SEGMENT_ATTRIBUTE15_TYPE,SEGMENT_ATTRIBUTE16_LOW,SEGMENT_ATTRIBUTE16_HIGH'||
 ',SEGMENT_ATTRIBUTE16_TYPE,SEGMENT_ATTRIBUTE17_LOW,SEGMENT_ATTRIBUTE17_HIGH'||
 ',SEGMENT_ATTRIBUTE17_TYPE,SEGMENT_ATTRIBUTE18_LOW,SEGMENT_ATTRIBUTE18_HIGH'||
 ',SEGMENT_ATTRIBUTE18_TYPE,SEGMENT_ATTRIBUTE19_LOW,SEGMENT_ATTRIBUTE19_HIGH'||
 ',SEGMENT_ATTRIBUTE19_TYPE,SEGMENT_ATTRIBUTE20_LOW,SEGMENT_ATTRIBUTE20_HIGH'||
 ',SEGMENT_ATTRIBUTE20_TYPE,SEGMENT_ATTRIBUTE21_LOW,SEGMENT_ATTRIBUTE21_HIGH'||
 ',SEGMENT_ATTRIBUTE21_TYPE,SEGMENT_ATTRIBUTE22_LOW,SEGMENT_ATTRIBUTE22_HIGH'||
 ',SEGMENT_ATTRIBUTE22_TYPE,SEGMENT_ATTRIBUTE23_LOW,SEGMENT_ATTRIBUTE23_HIGH'||
 ',SEGMENT_ATTRIBUTE23_TYPE,SEGMENT_ATTRIBUTE24_LOW,SEGMENT_ATTRIBUTE24_HIGH'||
 ',SEGMENT_ATTRIBUTE24_TYPE,SEGMENT_ATTRIBUTE25_LOW,SEGMENT_ATTRIBUTE25_HIGH'||
 ',SEGMENT_ATTRIBUTE25_TYPE,SEGMENT_ATTRIBUTE26_LOW,SEGMENT_ATTRIBUTE26_HIGH'||
 ',SEGMENT_ATTRIBUTE26_TYPE,SEGMENT_ATTRIBUTE27_LOW,SEGMENT_ATTRIBUTE27_HIGH'||
 ',SEGMENT_ATTRIBUTE27_TYPE,SEGMENT_ATTRIBUTE28_LOW,SEGMENT_ATTRIBUTE28_HIGH'||
 ',SEGMENT_ATTRIBUTE28_TYPE,SEGMENT_ATTRIBUTE29_LOW,SEGMENT_ATTRIBUTE29_HIGH'||
 ',SEGMENT_ATTRIBUTE29_TYPE,SEGMENT_ATTRIBUTE30_LOW,SEGMENT_ATTRIBUTE30_HIGH'||
 ',SEGMENT_ATTRIBUTE30_TYPE,SEGMENT_ATTRIBUTE31_LOW,SEGMENT_ATTRIBUTE31_HIGH'||
 ',SEGMENT_ATTRIBUTE31_TYPE,SEGMENT_ATTRIBUTE32_LOW,SEGMENT_ATTRIBUTE32_HIGH'||
 ',SEGMENT_ATTRIBUTE32_TYPE,SEGMENT_ATTRIBUTE33_LOW,SEGMENT_ATTRIBUTE33_HIGH'||
 ',SEGMENT_ATTRIBUTE33_TYPE,SEGMENT_ATTRIBUTE34_LOW,SEGMENT_ATTRIBUTE34_HIGH'||
 ',SEGMENT_ATTRIBUTE34_TYPE,SEGMENT_ATTRIBUTE35_LOW,SEGMENT_ATTRIBUTE35_HIGH'||
 ',SEGMENT_ATTRIBUTE35_TYPE,SEGMENT_ATTRIBUTE36_LOW,SEGMENT_ATTRIBUTE36_HIGH'||
 ',SEGMENT_ATTRIBUTE36_TYPE,SEGMENT_ATTRIBUTE37_LOW,SEGMENT_ATTRIBUTE37_HIGH'||
 ',SEGMENT_ATTRIBUTE37_TYPE,SEGMENT_ATTRIBUTE38_LOW,SEGMENT_ATTRIBUTE38_HIGH'||
 ',SEGMENT_ATTRIBUTE38_TYPE,SEGMENT_ATTRIBUTE39_LOW,SEGMENT_ATTRIBUTE39_HIGH'||
 ',SEGMENT_ATTRIBUTE39_TYPE,SEGMENT_ATTRIBUTE40_LOW,SEGMENT_ATTRIBUTE40_HIGH'||
 ',SEGMENT_ATTRIBUTE40_TYPE,SEGMENT_ATTRIBUTE41_LOW,SEGMENT_ATTRIBUTE41_HIGH'||
 ',SEGMENT_ATTRIBUTE41_TYPE,SEGMENT_ATTRIBUTE42_LOW,SEGMENT_ATTRIBUTE42_HIGH'||
 ',SEGMENT_ATTRIBUTE42_TYPE ' ||
 ') SELECT' ||
 '  APPLICATION_ID, :id, AXIS_SEQ' ||
 ', sysdate, :user_id, :login_id' ||
 ', sysdate, :user_id, RANGE_MODE, SIGN' ||
 ', DR_CR_NET_CODE, :ledger_id, LEDGER_SEGMENT_TYPE, :alc_ledger_currency' ||
 ', SEGMENT1_LOW, SEGMENT1_HIGH, SEGMENT1_TYPE' ||
 ', SEGMENT2_LOW, SEGMENT2_HIGH, SEGMENT2_TYPE' ||
 ', SEGMENT3_LOW, SEGMENT3_HIGH, SEGMENT3_TYPE' ||
 ', SEGMENT4_LOW, SEGMENT4_HIGH, SEGMENT4_TYPE' ||
 ', SEGMENT5_LOW, SEGMENT5_HIGH, SEGMENT5_TYPE' ||
 ', SEGMENT6_LOW, SEGMENT6_HIGH, SEGMENT6_TYPE' ||
 ', SEGMENT7_LOW, SEGMENT7_HIGH, SEGMENT7_TYPE' ||
 ', SEGMENT8_LOW, SEGMENT8_HIGH, SEGMENT8_TYPE' ||
 ', SEGMENT9_LOW, SEGMENT9_HIGH, SEGMENT9_TYPE' ||
 ', SEGMENT10_LOW, SEGMENT10_HIGH, SEGMENT10_TYPE' ||
 ', SEGMENT11_LOW, SEGMENT11_HIGH, SEGMENT11_TYPE' ||
 ', SEGMENT12_LOW, SEGMENT12_HIGH, SEGMENT12_TYPE' ||
 ', SEGMENT13_LOW, SEGMENT13_HIGH, SEGMENT13_TYPE' ||
 ', SEGMENT14_LOW, SEGMENT14_HIGH, SEGMENT14_TYPE' ||
 ', SEGMENT15_LOW, SEGMENT15_HIGH, SEGMENT15_TYPE' ||
 ', SEGMENT16_LOW, SEGMENT16_HIGH, SEGMENT16_TYPE' ||
 ', SEGMENT17_LOW, SEGMENT17_HIGH, SEGMENT17_TYPE' ||
 ', SEGMENT18_LOW, SEGMENT18_HIGH, SEGMENT18_TYPE' ||
 ', SEGMENT19_LOW, SEGMENT19_HIGH, SEGMENT19_TYPE' ||
 ', SEGMENT20_LOW, SEGMENT20_HIGH, SEGMENT20_TYPE' ||
 ', SEGMENT21_LOW, SEGMENT21_HIGH, SEGMENT21_TYPE' ||
 ', SEGMENT22_LOW, SEGMENT22_HIGH, SEGMENT22_TYPE' ||
 ', SEGMENT23_LOW, SEGMENT23_HIGH, SEGMENT23_TYPE' ||
 ', SEGMENT24_LOW, SEGMENT24_HIGH, SEGMENT24_TYPE' ||
 ', SEGMENT25_LOW, SEGMENT25_HIGH, SEGMENT25_TYPE' ||
 ', SEGMENT26_LOW, SEGMENT26_HIGH, SEGMENT26_TYPE' ||
 ', SEGMENT27_LOW, SEGMENT27_HIGH, SEGMENT27_TYPE' ||
 ', SEGMENT28_LOW, SEGMENT28_HIGH, SEGMENT28_TYPE' ||
 ', SEGMENT29_LOW, SEGMENT29_HIGH, SEGMENT29_TYPE' ||
 ', SEGMENT30_LOW, SEGMENT30_HIGH, SEGMENT30_TYPE' ||
 ', CONTEXT, ATTRIBUTE1, ATTRIBUTE2' ||
 ', ATTRIBUTE3, ATTRIBUTE4, ATTRIBUTE5' ||
 ', ATTRIBUTE6, ATTRIBUTE7, ATTRIBUTE8' ||
 ', ATTRIBUTE9, ATTRIBUTE10, ATTRIBUTE11' ||
 ', ATTRIBUTE12, ATTRIBUTE13, ATTRIBUTE14' ||
 ', ATTRIBUTE15, SEGMENT_ATTRIBUTE1_LOW, SEGMENT_ATTRIBUTE1_HIGH' ||
 ',SEGMENT_ATTRIBUTE1_TYPE,SEGMENT_ATTRIBUTE2_LOW,SEGMENT_ATTRIBUTE2_HIGH'||
 ',SEGMENT_ATTRIBUTE2_TYPE,SEGMENT_ATTRIBUTE3_LOW,SEGMENT_ATTRIBUTE3_HIGH'||
 ',SEGMENT_ATTRIBUTE3_TYPE,SEGMENT_ATTRIBUTE4_LOW,SEGMENT_ATTRIBUTE4_HIGH'||
 ',SEGMENT_ATTRIBUTE4_TYPE,SEGMENT_ATTRIBUTE5_LOW,SEGMENT_ATTRIBUTE5_HIGH'||
 ',SEGMENT_ATTRIBUTE5_TYPE,SEGMENT_ATTRIBUTE6_LOW,SEGMENT_ATTRIBUTE6_HIGH'||
 ',SEGMENT_ATTRIBUTE6_TYPE,SEGMENT_ATTRIBUTE7_LOW,SEGMENT_ATTRIBUTE7_HIGH'||
 ',SEGMENT_ATTRIBUTE7_TYPE,SEGMENT_ATTRIBUTE8_LOW,SEGMENT_ATTRIBUTE8_HIGH'||
 ',SEGMENT_ATTRIBUTE8_TYPE,SEGMENT_ATTRIBUTE9_LOW,SEGMENT_ATTRIBUTE9_HIGH'||
 ',SEGMENT_ATTRIBUTE9_TYPE,SEGMENT_ATTRIBUTE10_LOW,SEGMENT_ATTRIBUTE10_HIGH'||
 ',SEGMENT_ATTRIBUTE10_TYPE,SEGMENT_ATTRIBUTE11_LOW,SEGMENT_ATTRIBUTE11_HIGH'||
 ',SEGMENT_ATTRIBUTE11_TYPE,SEGMENT_ATTRIBUTE12_LOW,SEGMENT_ATTRIBUTE12_HIGH'||
 ',SEGMENT_ATTRIBUTE12_TYPE,SEGMENT_ATTRIBUTE13_LOW,SEGMENT_ATTRIBUTE13_HIGH'||
 ',SEGMENT_ATTRIBUTE13_TYPE,SEGMENT_ATTRIBUTE14_LOW,SEGMENT_ATTRIBUTE14_HIGH'||
 ',SEGMENT_ATTRIBUTE14_TYPE,SEGMENT_ATTRIBUTE15_LOW,SEGMENT_ATTRIBUTE15_HIGH'||
 ',SEGMENT_ATTRIBUTE15_TYPE,SEGMENT_ATTRIBUTE16_LOW,SEGMENT_ATTRIBUTE16_HIGH'||
 ',SEGMENT_ATTRIBUTE16_TYPE,SEGMENT_ATTRIBUTE17_LOW,SEGMENT_ATTRIBUTE17_HIGH'||
 ',SEGMENT_ATTRIBUTE17_TYPE,SEGMENT_ATTRIBUTE18_LOW,SEGMENT_ATTRIBUTE18_HIGH'||
 ',SEGMENT_ATTRIBUTE18_TYPE,SEGMENT_ATTRIBUTE19_LOW,SEGMENT_ATTRIBUTE19_HIGH'||
 ',SEGMENT_ATTRIBUTE19_TYPE,SEGMENT_ATTRIBUTE20_LOW,SEGMENT_ATTRIBUTE20_HIGH'||
 ',SEGMENT_ATTRIBUTE20_TYPE,SEGMENT_ATTRIBUTE21_LOW,SEGMENT_ATTRIBUTE21_HIGH'||
 ',SEGMENT_ATTRIBUTE21_TYPE,SEGMENT_ATTRIBUTE22_LOW,SEGMENT_ATTRIBUTE22_HIGH'||
 ',SEGMENT_ATTRIBUTE22_TYPE,SEGMENT_ATTRIBUTE23_LOW,SEGMENT_ATTRIBUTE23_HIGH'||
 ',SEGMENT_ATTRIBUTE23_TYPE,SEGMENT_ATTRIBUTE24_LOW,SEGMENT_ATTRIBUTE24_HIGH'||
 ',SEGMENT_ATTRIBUTE24_TYPE,SEGMENT_ATTRIBUTE25_LOW,SEGMENT_ATTRIBUTE25_HIGH'||
 ',SEGMENT_ATTRIBUTE25_TYPE,SEGMENT_ATTRIBUTE26_LOW,SEGMENT_ATTRIBUTE26_HIGH'||
 ',SEGMENT_ATTRIBUTE26_TYPE,SEGMENT_ATTRIBUTE27_LOW,SEGMENT_ATTRIBUTE27_HIGH'||
 ',SEGMENT_ATTRIBUTE27_TYPE,SEGMENT_ATTRIBUTE28_LOW,SEGMENT_ATTRIBUTE28_HIGH'||
 ',SEGMENT_ATTRIBUTE28_TYPE,SEGMENT_ATTRIBUTE29_LOW,SEGMENT_ATTRIBUTE29_HIGH'||
 ',SEGMENT_ATTRIBUTE29_TYPE,SEGMENT_ATTRIBUTE30_LOW,SEGMENT_ATTRIBUTE30_HIGH'||
 ',SEGMENT_ATTRIBUTE30_TYPE,SEGMENT_ATTRIBUTE31_LOW,SEGMENT_ATTRIBUTE31_HIGH'||
 ',SEGMENT_ATTRIBUTE31_TYPE,SEGMENT_ATTRIBUTE32_LOW,SEGMENT_ATTRIBUTE32_HIGH'||
 ',SEGMENT_ATTRIBUTE32_TYPE,SEGMENT_ATTRIBUTE33_LOW,SEGMENT_ATTRIBUTE33_HIGH'||
 ',SEGMENT_ATTRIBUTE33_TYPE,SEGMENT_ATTRIBUTE34_LOW,SEGMENT_ATTRIBUTE34_HIGH'||
 ',SEGMENT_ATTRIBUTE34_TYPE,SEGMENT_ATTRIBUTE35_LOW,SEGMENT_ATTRIBUTE35_HIGH'||
 ',SEGMENT_ATTRIBUTE35_TYPE,SEGMENT_ATTRIBUTE36_LOW,SEGMENT_ATTRIBUTE36_HIGH'||
 ',SEGMENT_ATTRIBUTE36_TYPE,SEGMENT_ATTRIBUTE37_LOW,SEGMENT_ATTRIBUTE37_HIGH'||
 ',SEGMENT_ATTRIBUTE37_TYPE,SEGMENT_ATTRIBUTE38_LOW,SEGMENT_ATTRIBUTE38_HIGH'||
 ',SEGMENT_ATTRIBUTE38_TYPE,SEGMENT_ATTRIBUTE39_LOW,SEGMENT_ATTRIBUTE39_HIGH'||
 ',SEGMENT_ATTRIBUTE39_TYPE,SEGMENT_ATTRIBUTE40_LOW,SEGMENT_ATTRIBUTE40_HIGH'||
 ',SEGMENT_ATTRIBUTE40_TYPE,SEGMENT_ATTRIBUTE41_LOW,SEGMENT_ATTRIBUTE41_HIGH'||
 ',SEGMENT_ATTRIBUTE41_TYPE,SEGMENT_ATTRIBUTE42_LOW,SEGMENT_ATTRIBUTE42_HIGH'||
 ',SEGMENT_ATTRIBUTE42_TYPE ' ||
 'FROM RG_REPORT_AXIS_CONTENTS@';

  CalculationsString VARCHAR2(2000) :=
    'INSERT INTO RG_REPORT_CALCULATIONS (' ||
    '  APPLICATION_ID, AXIS_SET_ID, AXIS_SEQ, CALCULATION_SEQ' ||
    ', LAST_UPDATE_DATE, LAST_UPDATED_BY, LAST_UPDATE_LOGIN, CREATION_DATE' ||
    ', CREATED_BY, OPERATOR, AXIS_SEQ_LOW, AXIS_SEQ_HIGH ' ||
    ', AXIS_NAME_LOW, AXIS_NAME_HIGH, CONSTANT, CONTEXT  ' ||
    ', ATTRIBUTE1 , ATTRIBUTE2 , ATTRIBUTE3 , ATTRIBUTE4 ' ||
    ', ATTRIBUTE5 , ATTRIBUTE6 , ATTRIBUTE7 , ATTRIBUTE8 ' ||
    ', ATTRIBUTE9 , ATTRIBUTE10, ATTRIBUTE11, ATTRIBUTE12' ||
    ', ATTRIBUTE13, ATTRIBUTE14, ATTRIBUTE15' ||
    ') SELECT' ||
    '  APPLICATION_ID, :id     , AXIS_SEQ  , CALCULATION_SEQ' ||
    ', sysdate    , :user_id   , :login_id , sysdate    ' ||
    ', :user_id   , OPERATOR   , AXIS_SEQ_LOW, AXIS_SEQ_HIGH ' ||
    ', AXIS_NAME_LOW, AXIS_NAME_HIGH, CONSTANT, CONTEXT  ' ||
    ', ATTRIBUTE1 , ATTRIBUTE2 , ATTRIBUTE3 , ATTRIBUTE4 ' ||
    ', ATTRIBUTE5 , ATTRIBUTE6 , ATTRIBUTE7 , ATTRIBUTE8 ' ||
    ', ATTRIBUTE9 , ATTRIBUTE10, ATTRIBUTE11, ATTRIBUTE12' ||
    ', ATTRIBUTE13, ATTRIBUTE14, ATTRIBUTE15 ' ||
    'FROM RG_REPORT_CALCULATIONS@';

  ExceptionsString VARCHAR2(2000) :=
    'INSERT INTO RG_REPORT_EXCEPTIONS (' ||
    '  APPLICATION_ID, AXIS_SET_ID, AXIS_SEQ, EXCEPTION_ID' ||
    ', LAST_UPDATE_DATE, LAST_UPDATED_BY, LAST_UPDATE_LOGIN, CREATION_DATE' ||
    ', CREATED_BY , CONDITION  , CONSTANT   , CONTEXT' ||
    ', ATTRIBUTE1 , ATTRIBUTE2 , ATTRIBUTE3 , ATTRIBUTE4' ||
    ', ATTRIBUTE5 , ATTRIBUTE6 , ATTRIBUTE7 , ATTRIBUTE8' ||
    ', ATTRIBUTE9 , ATTRIBUTE10, ATTRIBUTE11, ATTRIBUTE12' ||
    ', ATTRIBUTE13, ATTRIBUTE14, ATTRIBUTE15' ||
    ') SELECT' ||
    '  APPLICATION_ID, :id     , AXIS_SEQ   , :exception_id' ||
    ', sysdate    , :user_id   , :login_id  , sysdate' ||
    ', :user_id   , CONDITION  , CONSTANT   , CONTEXT' ||
    ', ATTRIBUTE1 , ATTRIBUTE2 , ATTRIBUTE3 , ATTRIBUTE4' ||
    ', ATTRIBUTE5 , ATTRIBUTE6 , ATTRIBUTE7 , ATTRIBUTE8' ||
    ', ATTRIBUTE9 , ATTRIBUTE10, ATTRIBUTE11, ATTRIBUTE12' ||
    ', ATTRIBUTE13, ATTRIBUTE14, ATTRIBUTE15 ' ||
    'FROM RG_REPORT_EXCEPTIONS@';

  ExceptionFlagsString VARCHAR2(2000) :=
    'INSERT INTO RG_REPORT_EXCEPTION_FLAGS (' ||
    '  APPLICATION_ID, AXIS_SET_ID, AXIS_SEQ, EXCEPTION_ID' ||
    ', LAST_UPDATE_DATE, LAST_UPDATED_BY, LAST_UPDATE_LOGIN, CREATION_DATE' ||
    ', CREATED_BY , FLAG       , DESCRIPTION, CONTEXT    ' ||
    ', ATTRIBUTE1 , ATTRIBUTE2 , ATTRIBUTE3 , ATTRIBUTE4 ' ||
    ', ATTRIBUTE5 , ATTRIBUTE6 , ATTRIBUTE7 , ATTRIBUTE8 ' ||
    ', ATTRIBUTE9 , ATTRIBUTE10, ATTRIBUTE11, ATTRIBUTE12' ||
    ', ATTRIBUTE13, ATTRIBUTE14, ATTRIBUTE15' ||
    ') SELECT' ||
    '  APPLICATION_ID, :id     , AXIS_SEQ   , :exception_id' ||
    ', sysdate    , :user_id   , :login_id  , sysdate    ' ||
    ', :user_id   , FLAG       , DESCRIPTION, CONTEXT    ' ||
    ', ATTRIBUTE1 , ATTRIBUTE2 , ATTRIBUTE3 , ATTRIBUTE4 ' ||
    ', ATTRIBUTE5 , ATTRIBUTE6 , ATTRIBUTE7 , ATTRIBUTE8 ' ||
    ', ATTRIBUTE9 , ATTRIBUTE10, ATTRIBUTE11, ATTRIBUTE12' ||
    ', ATTRIBUTE13, ATTRIBUTE14, ATTRIBUTE15 ' ||
    'FROM RG_REPORT_EXCEPTION_FLAGS@';


/* Name:  init
 * Desc:  Initialize some variables that are used in this package.
 *
 * Notes: This procedure is called from RG_XFER_COMPONENTS_PKG.init
 *
 * History:
 *   10/17/95   S Rahman   Created.
 */
PROCEDURE init(
            SourceCOAId NUMBER,
            TargetCOAId NUMBER,
            LinkName    VARCHAR2,
            ApplId      NUMBER) IS
BEGIN
  G_SourceCOAId := SourceCOAId;
  G_TargetCOAId := TargetCOAId;
  G_LinkName    := LinkName;
  G_ApplId      := ApplId;
END init;


/* Name:  copy_axis_contents
 * Desc:  Copies the flexfield assignments for the specified axis set
 *        and sequence. For each record, check if the specified ledger
 *        exists. If it doesn't, then omit the ledger information.
 *
 * History:
 *   10/17/95   S Rahman   Created.
 *   03/31/03   T Cheng    For each record, check if the specified ledger
 *                         exists. If it doesn't, then omit ledger information.
 */
PROCEDURE copy_axis_contents(
            AxisSetType     VARCHAR2,
            AxisSetName     VARCHAR2,
            SourceAxisSeq   NUMBER,
            SourceAxisSetId NUMBER,
            TargetAxisSetId NUMBER) IS
  CursorId       INTEGER;
  ExecuteValue   INTEGER;
  DataType       VARCHAR2(1);
  SQLString      VARCHAR2(12000);
  RecRowId       ROWID;
  LedgerId       NUMBER;
  LedgerCurrency VARCHAR2(15);
  LedgerName     VARCHAR2(100);
BEGIN
  RG_XFER_UTILS_PKG.display_log(
    MsgLevel  => G_ML_Full,
    MsgName   => 'RG_XFER_L_ENTER_ROUTINE',
    Token1    => 'ROUTINE',
    Token1Val => 'copy_axis_contents',
    Token2    => 'PARAM1',
    Token2Val => TO_CHAR(SourceAxisSeq),
    Token3    => 'PARAM2',
    Token3Val => TO_CHAR(SourceAxisSetId),
    Token4    => 'PARAM3',
    Token4Val => TO_CHAR(TargetAxisSetId));

  /* Get all the relevant records. */
  CursorId := DBMS_SQL.open_cursor;
  DBMS_SQL.parse(CursorId,
                 'SELECT rowid, ledger_id, alc_ledger_currency' ||
                 ' FROM rg_report_axis_contents@' || G_LinkName ||
                 ' WHERE axis_seq = ' || TO_CHAR(SourceAxisSeq) ||
                 ' AND   axis_set_id = ' || TO_CHAR(SourceAxisSetId),
                 DBMS_SQL.v7);
  DBMS_SQL.define_column_rowid(CursorId, 1, RecRowId);
  DBMS_SQL.define_column(CursorId, 2, LedgerId);
  DBMS_SQL.define_column(CursorId, 3, LedgerCurrency, 15);
  ExecuteValue := DBMS_SQL.execute(CursorId);
  LOOP
    /* For each record, check the ledger info and insert the record. */
    IF (DBMS_SQL.fetch_rows(CursorId) > 0) THEN
      DBMS_SQL.column_value_rowid(CursorId, 1, RecRowId);
      DBMS_SQL.column_value(CursorId, 2, LedgerId);
      DBMS_SQL.column_value(CursorId, 3, LedgerCurrency);

      IF (LedgerId IS NOT NULL) THEN
        RG_XFER_UTILS_PKG.get_target_ldg_from_source_ldg(
                            LedgerId, LedgerName, LedgerCurrency);
      END IF;

      IF (LedgerId = G_Error) THEN
        /* Error: ledger not present in target db */
        RG_XFER_UTILS_PKG.display_warning(
          MsgName     => 'RG_XFER_SUB_COMP_NOT_EXIST',
          Token1      => 'SUB_COMP_TYPE',
          Token1Val   => 'RG_XFER_LEDGERS',
          Token1Xlate => TRUE,
          Token2      => 'SUB_COMP_NAME',
          Token2Val   => LedgerName,
          Token2Xlate => FALSE,
          Token3      => 'COMP_TYPE',
          Token3Val   => AxisSetType,
          Token3Xlate => TRUE,
          Token4      => 'COMP_NAME',
          Token4Val   => AxisSetName,
          Token4Xlate => FALSE);
      END IF;

      /* Insert the row */
      SQLString := AxisContentsString ||G_LinkName|| ' WHERE rowid = :row_id';

      RG_XFER_UTILS_PKG.substitute_tokens(
        SQLString,
        Token1=>    ':ledger_id',
        Token1Val=> RG_XFER_UTILS_PKG.token_from_id(LedgerId),
        Token2=>    ':alc_ledger_currency',
        Token2Val=> LedgerCurrency);

      RG_XFER_UTILS_PKG.insert_rows(
        SQLString,
        TargetAxisSetId,
        UseCOAId=> FALSE,
        UseRowId=> TRUE,
        RecRowId=> RecRowId);

    ELSE
      /* No more rows */
      EXIT;
    END IF;
  END LOOP;
  DBMS_SQL.close_cursor(CursorId);

  RG_XFER_UTILS_PKG.display_log(
    MsgLevel  => G_ML_Full,
    MsgName   => 'RG_XFER_L_EXIT_ROUTINE',
    Token1    => 'ROUTINE',
    Token1Val => 'copy_axis_contents');
END copy_axis_contents;


/* Name:  copy_axis_details
 * Desc:  Copies the axes of the specified axis set and their contents,
 *        calculations, and for column sets the exceptions and exception flags.
 *
 * History:
 *   10/17/95   S Rahman   Created.
 *   03/31/03   T Cheng    For each record, check if the specified ledger
 *                         segment_override_value exists. If it doesn't,
 *                         then omit ledger override value information.
 *   05/16/03   V Treiger  For each element_id mapping at source database
 *                         find proper element_id at target database.
 */
PROCEDURE copy_axis_details(
            AxisSetType     VARCHAR2,
            AxisSetName     VARCHAR2,
            SourceAxisSetId NUMBER,
            TargetAxisSetId NUMBER) IS
  CursorId     INTEGER;
  TempCursorId INTEGER;
  ExecuteValue INTEGER;
  AxisSeq      NUMBER;
  OverrideVal  VARCHAR2(60);
  OverrideCurr VARCHAR2(15);
  SQLString    VARCHAR2(5000);
  CurrencyCode VARCHAR2(15);
  AxisSegmentName    VARCHAR2(30);
  SourceExceptionId  NUMBER;
  TargetExceptionId  NUMBER;
  LedgerId           NUMBER;
  LedgerName         VARCHAR2(30);
  ElemTargetIdStr VARCHAR2(30);
BEGIN
  RG_XFER_UTILS_PKG.display_log(
    MsgLevel  => G_ML_Full,
    MsgName   => 'RG_XFER_L_ENTER_ROUTINE',
    Token1    => 'ROUTINE',
    Token1Val => 'copy_axis_details',
    Token2    => 'PARAM1',
    Token2Val => AxisSetType,
    Token3    => 'PARAM2',
    Token3Val => TO_CHAR(SourceAxisSetId),
    Token4    => 'PARAM3',
    Token4Val => TO_CHAR(TargetAxisSetId));

  AxisSegmentName := RG_XFER_UTILS_PKG.get_varchar2(
                     'SELECT segment_name FROM rg_report_axis_sets@' ||
                      G_LinkName || ' WHERE axis_set_id = ' ||
                      TO_CHAR(SourceAxisSetId), 30);

  CursorId := DBMS_SQL.open_cursor;
  DBMS_SQL.parse(CursorId,
                 'SELECT axis_seq, segment_override_value,' ||
                 ' override_alc_ledger_currency FROM rg_report_axes@' ||
                   G_LinkName || ' WHERE axis_set_id =' ||
                   TO_CHAR(SourceAxisSetId),
                 DBMS_SQL.v7);
  DBMS_SQL.define_column(CursorId, 1, AxisSeq);
  DBMS_SQL.define_column(CursorId, 2, OverrideVal, 60);
  DBMS_SQL.define_column(CursorId, 3, OverrideCurr, 15);
  ExecuteValue := DBMS_SQL.execute(CursorId);
  LOOP
    IF (DBMS_SQL.fetch_rows(CursorId) > 0) THEN
      DBMS_SQL.column_value(CursorId, 1, AxisSeq);
      DBMS_SQL.column_value(CursorId, 2, OverrideVal);
      DBMS_SQL.column_value(CursorId, 3, OverrideCurr);

      IF (AxisSegmentName = 'LEDGER_SEGMENT') THEN
        LedgerId := TO_NUMBER(OverrideVal);
        IF (OverrideVal IS NOT NULL) THEN
          RG_XFER_UTILS_PKG.get_target_ldg_from_source_ldg(
                             LedgerId, LedgerName, OverrideCurr);
        END IF;

        IF (LedgerId = G_Error) THEN
          /* Error: ledger not present in target db */
          RG_XFER_UTILS_PKG.display_warning(
            MsgName     => 'RG_XFER_SUB_COMP_NOT_EXIST',
            Token1      => 'SUB_COMP_TYPE',
            Token1Val   => 'RG_XFER_LEDGERS',
            Token1Xlate => TRUE,
            Token2      => 'SUB_COMP_NAME',
            Token2Val   => LedgerName,
            Token2Xlate => FALSE,
            Token3      => 'COMP_TYPE',
            Token3Val   => AxisSetType,
            Token3Xlate => TRUE,
            Token4      => 'COMP_NAME',
            Token4Val   => AxisSetName,
            Token4Xlate => FALSE);
        END IF;

        OverrideVal := TO_CHAR(LedgerId);
      END IF;

      CurrencyCode := RG_XFER_UTILS_PKG.get_varchar2(
                        'SELECT unit_of_measure_id FROM rg_report_axes@'||
                          G_LinkName || ' WHERE axis_set_id = ' ||
                          TO_CHAR(SourceAxisSetId) ||
                          ' AND axis_seq = ' || TO_CHAR(AxisSeq),
                        15);
      IF (CurrencyCode IS NOT NULL) THEN
        IF (NOT RG_XFER_UTILS_PKG.currency_exists(CurrencyCode)) THEN
          /* Error: currency not defined in target database */
          RG_XFER_UTILS_PKG.display_warning(
            MsgName     => 'RG_XFER_SUB_COMP_NOT_EXIST',
            Token1      => 'SUB_COMP_TYPE',
            Token1Val   => 'RG_XFER_CURRENCY',
            Token1Xlate => TRUE,
            Token2      => 'SUB_COMP_NAME',
            Token2Val   => CurrencyCode,
            Token2Xlate => FALSE,
            Token3      => 'COMP_TYPE',
            Token3Val   => AxisSetType,
            Token3Xlate => TRUE,
            Token4      => 'COMP_NAME',
            Token4Val   => AxisSetName,
            Token4Xlate => FALSE);
          CurrencyCode := 'NULL';
        ELSE
          /* add the single quotes to the currency code */
          CurrencyCode := '''' || CurrencyCode || '''';
        END IF;
      ELSE
        CurrencyCode := 'NULL';
      END IF;

      /* Begin XBRL processing */
      ElemTargetIdStr := '';
      get_element_target_id(SourceAxisSetId,AxisSeq,ElemTargetIdStr);
      /* End XBRL processing */

      SQLString := AxesString || G_LinkName || ' WHERE axis_set_id = ' ||
                   TO_CHAR(SourceAxisSetId) || ' AND axis_seq = ' ||
                   TO_CHAR(AxisSeq);

      RG_XFER_UTILS_PKG.substitute_tokens(
        SQLString,
        Token1=>    ':currency_code',
        Token1Val=> CurrencyCode,
        Token2=>    ':segment_override_value',
        Token2Val=> OverrideVal,
        Token3=>    ':override_alc_ledger_currency',
        Token3Val=> OverrideCurr);

      /* Begin XBRL processing */
      RG_XFER_UTILS_PKG.substitute_tokens(
        SQLString, Token1=> ':elem_id', Token1Val=> ElemTargetIdStr);
      /* End XBRL processing */

      RG_XFER_UTILS_PKG.insert_rows(
        SQLString, TargetAxisSetId, UseCOAId=> FALSE);

      /* Copy axis contents */
      copy_axis_contents(
        AxisSetType,
        AxisSetName,
        AxisSeq,
        SourceAxisSetId,
        TargetAxisSetId);

      /* Copy calculations */
      RG_XFER_UTILS_PKG.insert_rows(
        CalculationsString || G_LinkName ||
          ' WHERE axis_set_id = ' || TO_CHAR(SourceAxisSetId) ||
          ' AND   axis_seq = ' || TO_CHAR(AxisSeq),
        TargetAxisSetId, UseCOAId=>FALSE);

      IF (AxisSetType = 'RG_COLUMN_SET') THEN
        /* Copy exception flags */
        TargetExceptionId := RG_XFER_UTILS_PKG.get_new_id(
                               'RG_REPORT_EXCEPTION_FLAGS_S');
        SQLString :=  ExceptionFlagsString || G_LinkName ||
                        ' WHERE axis_set_id = ' || TO_CHAR(SourceAxisSetId) ||
                        ' AND   axis_seq = ' || TO_CHAR(AxisSeq);
        RG_XFER_UTILS_PKG.substitute_tokens(
          SQLString,
          Token1=>    ':exception_id',
          Token1Val=> TO_CHAR(TargetExceptionId));
        RG_XFER_UTILS_PKG.insert_rows(
          SQLString, TargetAxisSetId, UseCOAId=>FALSE);

        TempCursorId := DBMS_SQL.open_cursor;
        DBMS_SQL.parse(
          TempCursorId,
          'SELECT exception_id FROM rg_report_exception_flags@' || G_LinkName||
            ' WHERE axis_set_id = ' || TO_CHAR(SourceAxisSetId) ||
            ' AND axis_seq = ' || TO_CHAR(AxisSeq),
          DBMS_SQL.v7);
        DBMS_SQL.define_column(TempCursorId, 1, SourceExceptionId);
        ExecuteValue := DBMS_SQL.execute_and_fetch(TempCursorId);
        IF (ExecuteValue > 0) THEN
          DBMS_SQL.column_value(TempCursorId, 1, SourceExceptionId);
          SQLString := ExceptionsString || G_LinkName ||
                       ' WHERE exception_id = ' || TO_CHAR(SourceExceptionId);
          RG_XFER_UTILS_PKG.substitute_tokens(
            SQLString,
            Token1=>    ':exception_id',
            Token1Val=> TO_CHAR(TargetExceptionId));
          RG_XFER_UTILS_PKG.insert_rows(
            SQLString,
            TargetAxisSetId,
            UseCOAId=>FALSE);
        END IF;
        DBMS_SQL.close_cursor(TempCursorId);
      END IF;

    ELSE
      /* No more rows */
      EXIT;
    END IF;
  END LOOP;
  DBMS_SQL.close_cursor(CursorId);

  RG_XFER_UTILS_PKG.display_log(
    MsgLevel  => G_ML_Full,
    MsgName   => 'RG_XFER_L_EXIT_ROUTINE',
    Token1    => 'ROUTINE',
    Token1Val => 'copy_axis_details');
END copy_axis_details;


/* Name:  copy_column_set_header
 * Desc:  Copies the column set header. It has to be a two step process
 *        because the column is of type long. First the header is read
 *        into a variable from the source database. Then it is written to
 *        the target database from the variable.
 *
 * History:
 *   10/17/95   S Rahman   Created.
 */
PROCEDURE copy_column_set_header(
            SourceColumnSetId NUMBER,
            TargetColumnSetId NUMBER) IS
  CursorId     INTEGER;
  ExecuteValue INTEGER;
  Header       VARCHAR2(7000);
  SQLString    VARCHAR2(200) := 'UPDATE rg_report_axis_sets ' ||
                                'SET column_set_header = :header ' ||
                                'WHERE axis_set_id = :id';
BEGIN
  RG_XFER_UTILS_PKG.display_log(
    MsgLevel  => G_ML_Full,
    MsgName   => 'RG_XFER_L_ENTER_ROUTINE',
    Token1    => 'ROUTINE',
    Token1Val => 'copy_column_set_header',
    Token2    => 'PARAM1',
    Token2Val => TO_CHAR(SourceColumnSetId),
    Token3    => 'PARAM2',
    Token3Val => TO_CHAR(TargetColumnSetId));

  /* Get the header from the source database and store it in a variable */
  CursorId := DBMS_SQL.open_cursor;
  DBMS_SQL.parse(CursorId,
                 'SELECT column_set_header FROM rg_report_axis_sets@' ||
                   G_LinkName || ' WHERE axis_set_id = ' ||
                   TO_CHAR(SourceColumnSetId),
                 DBMS_SQL.v7);
  DBMS_SQL.define_column(CursorId, 1, Header, 7000);
  ExecuteValue := DBMS_SQL.execute_and_fetch(CursorId);
  DBMS_SQL.column_value(CursorId, 1, Header);
  DBMS_SQL.close_cursor(CursorId);

  /* Transfer the header from the variable to the target database */
  CursorId := DBMS_SQL.open_cursor;
  DBMS_SQL.parse(CursorId, SQLString, DBMS_SQL.v7);
  DBMS_SQL.bind_variable(CursorId, ':header', Header);
  DBMS_SQL.bind_variable(CursorId, ':id', TargetColumnSetId);
  ExecuteValue := DBMS_SQL.execute(CursorId);
  DBMS_SQL.close_cursor(CursorId);

  RG_XFER_UTILS_PKG.display_log(
    MsgLevel  => G_ML_Full,
    MsgName   => 'RG_XFER_L_EXIT_ROUTINE',
    Token1    => 'ROUTINE',
    Token1Val => 'copy_column_set_header');
END copy_column_set_header;


/* Name:  copy_content_set_details
 * Desc:  Copies the detail records for the specified content set. It is
 *        done in this package to keep package sizes below 64K.
 *
 * History:
 *   10/17/95   S Rahman   Created.
 *   03/31/03   T Cheng    For each record, check if the specified ledger
 *                         exists. If it doesn't, then omit ledger information.
 */
PROCEDURE copy_content_set_details(
            ContentSetName     VARCHAR2,
            SourceContentSetId NUMBER,
            TargetContentSetId NUMBER) IS
  CursorId       INTEGER;
  ExecuteValue   INTEGER;
  DataType       VARCHAR2(1);
  SQLString      VARCHAR2(12000);
  RecRowId       ROWID;
  LedgerId       NUMBER;
  LedgerCurrency VARCHAR2(15);
  LedgerName     VARCHAR2(100);
BEGIN
  RG_XFER_UTILS_PKG.display_log(
    MsgLevel  => G_ML_Full,
    MsgName   => 'RG_XFER_L_ENTER_ROUTINE',
    Token1    => 'ROUTINE',
    Token1Val => 'copy_axis_contents',
    Token2    => 'PARAM1',
    Token2Val => TO_CHAR(SourceContentSetId),
    Token3    => 'PARAM2',
    Token3Val => TO_CHAR(TargetContentSetId));

  /* Insert the detail records for the specified content set. */
  CursorId := DBMS_SQL.open_cursor;
  DBMS_SQL.parse(CursorId,
                 'SELECT rowid, ledger_id, alc_ledger_currency' ||
                 ' FROM rg_report_content_overrides@' || G_LinkName ||
                 ' WHERE content_set_id = ' || TO_CHAR(SourceContentSetId),
                 DBMS_SQL.v7);
  DBMS_SQL.define_column_rowid(CursorId, 1, RecRowId);
  DBMS_SQL.define_column(CursorId, 2, LedgerId);
  DBMS_SQL.define_column(CursorId, 3, LedgerCurrency, 15);
  ExecuteValue := DBMS_SQL.execute(CursorId);
  LOOP
    /* For each record, check the ledger info and insert the record. */
    IF (DBMS_SQL.fetch_rows(CursorId) > 0) THEN
      DBMS_SQL.column_value_rowid(CursorId, 1, RecRowId);
      DBMS_SQL.column_value(CursorId, 2, LedgerId);
      DBMS_SQL.column_value(CursorId, 3, LedgerCurrency);

      IF (LedgerId IS NOT NULL) THEN
        RG_XFER_UTILS_PKG.get_target_ldg_from_source_ldg(
                           LedgerId, LedgerName, LedgerCurrency);
      END IF;

      IF (LedgerId = G_Error) THEN
        /* Error: ledger not present in target db */
        RG_XFER_UTILS_PKG.display_warning(
          MsgName     => 'RG_XFER_SUB_COMP_NOT_EXIST',
          Token1      => 'SUB_COMP_TYPE',
          Token1Val   => 'RG_XFER_LEDGERS',
          Token1Xlate => TRUE,
          Token2      => 'SUB_COMP_NAME',
          Token2Val   => LedgerName,
          Token2Xlate => FALSE,
          Token3      => 'COMP_TYPE',
          Token3Val   => 'RG_CONTENT_SET',
          Token3Xlate => TRUE,
          Token4      => 'COMP_NAME',
          Token4Val   => ContentSetName,
          Token4Xlate => FALSE);
      END IF;

      /* Insert the row */
      SQLString := ContentOverridesString || G_LinkName||
                   ' WHERE rowid = :row_id';

      RG_XFER_UTILS_PKG.substitute_tokens(
        SQLString,
        Token1=>    ':ledger_id',
        Token1Val=> RG_XFER_UTILS_PKG.token_from_id(LedgerId),
        Token2=>    ':alc_ledger_currency',
        Token2Val=> LedgerCurrency);

      RG_XFER_UTILS_PKG.insert_rows(
        SQLString,
        TargetContentSetId,
        UseCOAId=> FALSE,
        UseRowId=> TRUE,
        RecRowId=> RecRowId);

    ELSE
      /* No more rows */
      EXIT;
    END IF;
  END LOOP;
  DBMS_SQL.close_cursor(CursorId);

  RG_XFER_UTILS_PKG.display_log(
    MsgLevel  => G_ML_Full,
    MsgName   => 'RG_XFER_L_EXIT_ROUTINE',
    Token1    => 'ROUTINE',
    Token1Val => 'copy_content_set_details');
END copy_content_set_details;

/* Name:  get_element_target_id
 * Desc:  Get the element id in the target database given the element id
 *        in the source database.
 *
 * History:
 *   04/11/03   V Treiger   Created.
 */
PROCEDURE get_element_target_id(
            SourceAxisSetId IN NUMBER,
            AxisSeq IN NUMBER,
            IdValue IN OUT NOCOPY VARCHAR2) IS
  CursorId     INTEGER;
  ExecuteValue INTEGER;
  Id           NUMBER;
  TargetId     NUMBER;
  TaxTargetId  NUMBER;
  SourceIdName VARCHAR2(240);
  SourceTaxId  NUMBER;
  SQLString    VARCHAR2(500);
  RefObjectName VARCHAR2(240);
  ValueString   VARCHAR2(240);
  TempValue     VARCHAR2(240);
  TaxAlias      VARCHAR2(240);
BEGIN
  SQLString := 'SELECT a.element_id, e.element_identifier, e.taxonomy_id ' ||
               'FROM rg_report_axes@'||
               G_LinkName || ' a, rg_xbrl_elements@' || G_LinkName || ' e' ||
               ' WHERE a.axis_set_id = ' || TO_CHAR(SourceAxisSetId) ||
               ' AND a.axis_seq = ' || TO_CHAR(AxisSeq) ||
               ' AND a.element_id = e.element_id';

  RG_XFER_UTILS_PKG.display_string(SQLString);

  CursorId := DBMS_SQL.open_cursor;
  DBMS_SQL.parse(CursorId, SQLString, DBMS_SQL.v7);
  DBMS_SQL.define_column(CursorId, 1, Id);
  DBMS_SQL.define_column(CursorId, 2, SourceIdName, 240);
  DBMS_SQL.define_column(CursorId, 3, SourceTaxId);
  ExecuteValue := DBMS_SQL.execute_and_fetch(CursorId);
  IF (ExecuteValue > 0) THEN
    DBMS_SQL.column_value(CursorId, 1, Id);
    DBMS_SQL.column_value(CursorId, 2, SourceIdName);
    DBMS_SQL.column_value(CursorId, 3, SourceTaxId);
  ELSE
    Id := NULL;
    SourceIdName := 'NULL';
  END IF;
  DBMS_SQL.close_cursor(CursorId);

  IF (Id IS NULL) THEN
    IdValue := 'NULL';
  ELSE
    /* Get the element id from the target database table  */
    /* Get TaxTargetId first based on SourceTaxId */

    SQLString := 'SELECT ref_table.taxonomy_alias '||
                 'FROM '||
                 ' RG_XBRL_TAXONOMIES' || '@'|| G_LinkName || ' ref_table ' ||
                 'WHERE ref_table.taxonomy_id ' || '= '|| TO_CHAR(SourceTaxId);

    RG_XFER_UTILS_PKG.display_string(SQLString);
    CursorId := DBMS_SQL.open_cursor;
    DBMS_SQL.parse(CursorId, SQLString, DBMS_SQL.v7);
    DBMS_SQL.define_column(CursorId, 1, RefObjectName, 240);
    ExecuteValue := DBMS_SQL.execute_and_fetch(CursorId);
    IF (ExecuteValue > 0) THEN
      DBMS_SQL.column_value(CursorId, 1, RefObjectName);
    ELSE
      RefObjectName := '';
    END IF;
    DBMS_SQL.close_cursor(CursorId);
    TaxAlias := RefObjectName;

    RG_XFER_UTILS_PKG.copy_adjust_string(TempValue, TaxAlias);
    ValueString := '''' || TempValue || '''';

    SQLString := 'SELECT taxonomy_id ' ||
               'FROM   rg_xbrl_taxonomies ' ||
               'WHERE  taxonomy_alias = ' || ValueString;
    TaxTargetId := RG_XFER_UTILS_PKG.component_exists(SQLString);

    RG_XFER_UTILS_PKG.copy_adjust_string(TempValue, SourceIdName);
    ValueString := '''' || TempValue || '''';

    SQLString := 'SELECT element_id ' ||
                 ' FROM rg_xbrl_elements ' ||
                 ' WHERE  taxonomy_id = ' || TO_CHAR(TaxTargetId) ||
                 ' AND element_identifier ' || '=' || ValueString;

    RG_XFER_UTILS_PKG.display_string(SQLString);

    CursorId := DBMS_SQL.open_cursor;
    DBMS_SQL.parse(CursorId, SQLString, DBMS_SQL.v7);
    DBMS_SQL.define_column(CursorId, 1, TargetId);
    ExecuteValue := DBMS_SQL.execute_and_fetch(CursorId);
    IF (ExecuteValue > 0) THEN
      DBMS_SQL.column_value(CursorId, 1, TargetId);
    ELSE
      TargetId := NULL;
    END IF;

    DBMS_SQL.close_cursor(CursorId);
    IdValue := TO_CHAR(TargetId);

  END IF;
END get_element_target_id;

BEGIN
  /* Initialize variables on package access. */

  /* Error codes */
  G_Error := RG_XFER_UTILS_PKG.G_Error;
  G_Warning := RG_XFER_UTILS_PKG.G_Warning;

  /* The message levels */
  G_ML_Minimal := RG_XFER_UTILS_PKG.G_ML_Minimal;
  G_ML_Normal := RG_XFER_UTILS_PKG.G_ML_Normal;
  G_ML_Full := RG_XFER_UTILS_PKG.G_ML_Full;

END RG_XFER_COMP_PRIVATE_PKG;

/
