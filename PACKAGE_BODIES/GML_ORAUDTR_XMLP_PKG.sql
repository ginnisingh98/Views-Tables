--------------------------------------------------------
--  DDL for Package Body GML_ORAUDTR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."GML_ORAUDTR_XMLP_PKG" AS
/* $Header: ORAUDTRB.pls 120.1 2008/01/06 13:44:12 dwkrishn noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    PRN_LINES := 0;
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
      SELECT
        ORGN_NAME
      INTO CP_ORGN_NAME
      FROM
        SY_ORGN_MST
      WHERE ORGN_CODE = P_DEFAULT_ORGN;
      SELECT
        USER_NAME
      INTO CP_DEFAULT_USER
      FROM
        FND_USER
      WHERE USER_ID = P_DEFAULT_USER;
      RETURN (TRUE);
    EXCEPTION
      WHEN OTHERS THEN
        RETURN TRUE;
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
    DSORT3 VARCHAR2(20);
    DSORT4 VARCHAR2(20);
    MSORT3 VARCHAR2(20);
    MSORT4 VARCHAR2(20);
  BEGIN
    PARAM_WHERE_CLAUSE := ' ';
    PARAM_WHERE_CLAUSE1 := ' ';
    PARAM_WHERE_CLAUSE := PARAM_WHERE_CLAUSE || ' AND OH.ORGN_CODE = :P_DEFAULT_ORGN ';
    PARAM_WHERE_CLAUSE1 := PARAM_WHERE_CLAUSE1 || ' AND OH.ORGN_CODE = :P_DEFAULT_ORGN ';
    IF (P_FROM_SHIP_TO IS NOT NULL) THEN
      PARAM_WHERE_CLAUSE := PARAM_WHERE_CLAUSE || ' AND OP_CUST_MST.CUST_NO >= :P_FROM_SHIP_TO ';
      PARAM_WHERE_CLAUSE1 := PARAM_WHERE_CLAUSE1 || ' AND OP_CUST_MST.CUST_NO >= :P_FROM_SHIP_TO ';
    END IF;
    IF (P_TO_SHIP_TO IS NOT NULL) THEN
      PARAM_WHERE_CLAUSE := PARAM_WHERE_CLAUSE || ' AND OP_CUST_MST.CUST_NO <= :P_TO_SHIP_TO ';
      PARAM_WHERE_CLAUSE1 := PARAM_WHERE_CLAUSE1 || ' AND OP_CUST_MST.CUST_NO <= :P_TO_SHIP_TO ';
    END IF;
    IF (P_FROM_ORDER_NO IS NOT NULL) THEN
      PARAM_WHERE_CLAUSE := PARAM_WHERE_CLAUSE || ' AND OH.ORDER_NO >= :P_FROM_ORDER_NO ';
      PARAM_WHERE_CLAUSE1 := PARAM_WHERE_CLAUSE1 || ' AND OH.ORDER_NO >= :P_FROM_ORDER_NO ';
    END IF;
    IF (P_TO_ORDER_NO IS NOT NULL) THEN
      PARAM_WHERE_CLAUSE := PARAM_WHERE_CLAUSE || ' AND OH.ORDER_NO <= :P_TO_ORDER_NO ';
      PARAM_WHERE_CLAUSE1 := PARAM_WHERE_CLAUSE1 || ' AND OH.ORDER_NO <= :P_TO_ORDER_NO ';
    END IF;
    IF (P_FROM_ITEM_NO IS NOT NULL) THEN
      PARAM_WHERE_CLAUSE := PARAM_WHERE_CLAUSE || ' AND IC_ITEM_MST.ITEM_NO >= :P_FROM_ITEM_NO ';
      PARAM_WHERE_CLAUSE1 := PARAM_WHERE_CLAUSE1 || ' AND IC_ITEM_MST.ITEM_NO >= :P_FROM_ITEM_NO ';
    END IF;
    IF (P_TO_ITEM_NO IS NOT NULL) THEN
      PARAM_WHERE_CLAUSE := PARAM_WHERE_CLAUSE || ' AND IC_ITEM_MST.ITEM_NO <= :P_TO_ITEM_NO ';
      PARAM_WHERE_CLAUSE1 := PARAM_WHERE_CLAUSE1 || ' AND IC_ITEM_MST.ITEM_NO <= :P_TO_ITEM_NO ';
    END IF;
    IF (P_FROM_CHANGEDATE IS NOT NULL) THEN
      PARAM_WHERE_CLAUSE := PARAM_WHERE_CLAUSE || ' AND AD.CREATION_DATE >= :P_FROM_CHANGEDATE ';
      PARAM_WHERE_CLAUSE1 := PARAM_WHERE_CLAUSE1 || ' AND AD.CREATION_DATE >= :P_FROM_CHANGEDATE ';
    END IF;
    IF (P_TO_CHANGEDATE IS NOT NULL) THEN
      P_TO_CHANGEDATE := TO_DATE((TO_CHAR(P_TO_CHANGEDATE
                                        ,'MMDDYYYY') || '235959')
                                ,'MMDDYYYYHH24MISS');
      PARAM_WHERE_CLAUSE := PARAM_WHERE_CLAUSE || ' AND AD.CREATION_DATE <= :P_TO_CHANGEDATE ';
      PARAM_WHERE_CLAUSE1 := PARAM_WHERE_CLAUSE1 || ' AND AD.CREATION_DATE <= :P_TO_CHANGEDATE ';
    END IF;
    IF (P_FROM_OPER IS NOT NULL) THEN
      PARAM_WHERE_CLAUSE := PARAM_WHERE_CLAUSE || ' AND  OD.CREATED_BY >= :P_FROM_OPER ';
      PARAM_WHERE_CLAUSE1 := PARAM_WHERE_CLAUSE1 || ' AND  AD.CREATED_BY >= :P_FROM_OPER ';
    END IF;
    IF (P_TO_OPER IS NOT NULL) THEN
      PARAM_WHERE_CLAUSE := PARAM_WHERE_CLAUSE || ' AND  OD.CREATED_BY <= :P_TO_OPER ';
      PARAM_WHERE_CLAUSE1 := PARAM_WHERE_CLAUSE1 || ' AND  AD.CREATED_BY <= :P_TO_OPER ';
    END IF;
    IF (P_SORT1 IS NULL OR P_SORT2 IS NULL) THEN
      /*SRW.MESSAGE(1111
                 ,'INVALID OPTION')*/NULL;
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END IF;
    SELECT
      DECODE(P_SORT3
            ,'1'
            ,'OD.LAST_UPDATE_DATE'
            ,'2'
            ,'IC_ITEM_MST.ITEM_NO'
            ,'3'
            ,'OD.CREATED_BY'
            ,'4'
            ,'OP_CUST_MST.CUST_NO')
    INTO MSORT3
    FROM
      DUAL;
    SELECT
      DECODE(P_SORT4
            ,'1'
            ,'OD.LAST_UPDATE_DATE'
            ,'2'
            ,'IC_ITEM_MST.ITEM_NO'
            ,'3'
            ,'OD.CREATED_BY'
            ,'4'
            ,'OP_CUST_MST.CUST_NO')
    INTO MSORT4
    FROM
      DUAL;
    IF (P_SORT3 IS NOT NULL) THEN
      P_SORTM := P_SORTM || '  , ' || MSORT3;
    END IF;
    IF (P_SORT4 IS NOT NULL) THEN
      P_SORTM := P_SORTM || '  , ' || MSORT4;
    END IF;
    SELECT
      DECODE(P_SORT3
            ,'1'
            ,'AD.LAST_UPDATE_DATE'
            ,'2'
            ,'IC_ITEM_MST.ITEM_NO'
            ,'3'
            ,'AD.CREATED_BY'
            ,'4'
            ,'OP_CUST_MST.CUST_NO')
    INTO DSORT3
    FROM
      DUAL;
    SELECT
      DECODE(P_SORT4
            ,'1'
            ,'AD.LAST_UPDATE_DATE'
            ,'2'
            ,'IC_ITEM_MST.ITEM_NO'
            ,'3'
            ,'AD.CREATED_BY'
            ,'4'
            ,'OP_CUST_MST.CUST_NO')
    INTO DSORT4
    FROM
      DUAL;
    IF (P_SORT3 IS NOT NULL) THEN
      P_SORTD := P_SORTD || '  , ' || DSORT3;
    END IF;
    IF (P_SORT4 IS NOT NULL) THEN
      P_SORTD := P_SORTD || '  , ' || DSORT4;
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION FMT_MASK(P_VALUE IN NUMBER
                   ,P_CUR IN CHARACTER) RETURN CHARACTER IS
    V_DIGI_COUNT NUMBER;
    V_VALUE NUMBER;
    V_MASK_STR VARCHAR2(20);
    V_PRECISION NUMBER;
  BEGIN
    V_MASK_STR := '9';
    V_VALUE := P_VALUE;
    BEGIN
      SELECT
        DECIMAL_PRECISION
      INTO V_PRECISION
      FROM
        GL_CURR_MST
      WHERE CURRENCY_CODE = P_CUR;
    EXCEPTION
      WHEN OTHERS THEN
        V_PRECISION := 0;
    END;
    LOOP
      IF ((V_VALUE) >= 10) THEN
        V_VALUE := V_VALUE / 10;
        V_MASK_STR := V_MASK_STR || '9';
      ELSE
        EXIT;
      END IF;
    END LOOP;
    IF (V_PRECISION > 0) THEN
      V_MASK_STR := V_MASK_STR || '.';
      WHILE (V_PRECISION > 0) LOOP

        V_PRECISION := V_PRECISION - 1;
        V_MASK_STR := V_MASK_STR || '9';
      END LOOP;
    END IF;
    RETURN NULL;
  END FMT_MASK;

  FUNCTION CF_SORT_DESCFORMULA RETURN VARCHAR2 IS
  BEGIN
    SELECT
      MEANING
    INTO CP_SORT_1
    FROM
      GEM_LOOKUP_VALUES
    WHERE LOOKUP_TYPE like 'GEMMS_OP_ORAUDTR'
      AND LOOKUP_CODE = P_SORT1;
    SELECT
      MEANING
    INTO CP_SORT_2
    FROM
      GEM_LOOKUP_VALUES
    WHERE LOOKUP_TYPE like 'GEMMS_OP_ORAUDTR'
      AND LOOKUP_CODE = P_SORT2;
    IF (P_SORT3 IS NOT NULL) THEN
      SELECT
        MEANING
      INTO CP_SORT_3
      FROM
        GEM_LOOKUP_VALUES
      WHERE LOOKUP_TYPE like 'GEMMS_OP_ORAUDTR'
        AND LOOKUP_CODE = P_SORT3;
    END IF;
    IF (P_SORT4 IS NOT NULL) THEN
      SELECT
        MEANING
      INTO CP_SORT_4
      FROM
        GEM_LOOKUP_VALUES
      WHERE LOOKUP_TYPE like 'GEMMS_OP_ORAUDTR'
        AND LOOKUP_CODE = P_SORT4;
    END IF;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END CF_SORT_DESCFORMULA;

  PROCEDURE ORUADTR_HEADER IS
  BEGIN
    NULL;
  END ORUADTR_HEADER;
  function F_CF_1(v_value1 number,billing_currency varchar2) return varchar2 is
v_str VARCHAR2(20) ;
xx  NUMBER ;
v_value2 number;
BEGIN
v_value2:=v_value1;
 begin
    select decimal_precision into xx
           from gl_curr_mst
           where currency_code = billing_currency ;
    Exception
	when others then
	  xx := 0 ;
  End ;
v_str := '';
 LOOP
    if ((v_value2) >= 10) then
	v_value2 := v_value2/10;
	v_str := v_str ||'9' ;
    Else
	v_str := v_str ||'0D' ;
        Exit ;
    End if ;
    End LOOP ;
 WHILE (xx > 0 ) LOOP
      xx := xx - 1 ;
      v_str := v_str ||'9' ;
 END LOOP;
return(v_str);
end;

  FUNCTION CF_USER_NAMEFORMULA(CREATED_BY_1 IN NUMBER) RETURN CHAR IS
    V_USER_NAME VARCHAR2(100);
  BEGIN
    SELECT
      USER_NAME
    INTO V_USER_NAME
    FROM
      FND_USER
    WHERE USER_ID = CREATED_BY_1;
    RETURN (V_USER_NAME);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (V_USER_NAME);
  END CF_USER_NAMEFORMULA;

  FUNCTION CF_USER_NAME2FORMULA(CREATED_BY2 IN NUMBER) RETURN CHAR IS
    V_USER_NAME VARCHAR2(100);
  BEGIN
    SELECT
      USER_NAME
    INTO V_USER_NAME
    FROM
      FND_USER
    WHERE USER_ID = CREATED_BY2;
    RETURN (V_USER_NAME);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (V_USER_NAME);
  END CF_USER_NAME2FORMULA;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION CP_ORGN_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_ORGN_NAME;
  END CP_ORGN_NAME_P;

  FUNCTION CP_DEFAULT_USER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_DEFAULT_USER;
  END CP_DEFAULT_USER_P;

  FUNCTION CP_SORT_1_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_SORT_1;
  END CP_SORT_1_P;

  FUNCTION CP_SORT_2_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_SORT_2;
  END CP_SORT_2_P;

  FUNCTION CP_SORT_3_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_SORT_3;
  END CP_SORT_3_P;

  FUNCTION CP_SORT_4_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_SORT_4;
  END CP_SORT_4_P;

END GML_ORAUDTR_XMLP_PKG;


/
