--------------------------------------------------------
--  DDL for Package Body CE_CEZBAERR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."CE_CEZBAERR_XMLP_PKG" AS
/* $Header: CEZBAERRB.pls 120.0 2007/12/28 07:58:30 abraghun noship $ */
  FUNCTION C_PRT_MESSAGE_NAMEFORMULA(MESSAGE_NAME IN VARCHAR2) RETURN CHAR IS
  BEGIN
    BEGIN
      DECLARE
        L_MESSAGE FND_NEW_MESSAGES.MESSAGE_TEXT%TYPE;
      BEGIN
        IF LENGTH(MESSAGE_NAME) > 30 THEN
          L_MESSAGE := MESSAGE_NAME;
        ELSE
          SET_ENCODED(MESSAGE_NAME);
          L_MESSAGE := GET;
          IF L_MESSAGE IS NULL THEN
            SET_NAME('CE'
                    ,MESSAGE_NAME);
            L_MESSAGE := GET;
          END IF;
        END IF;
        RETURN (L_MESSAGE);
      END;
      RETURN NULL;
    END;
  END C_PRT_MESSAGE_NAMEFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    LP_STAT_DATE_FROM := TO_CHAR(P_STAT_DATE_FROM, 'DD-MON-YY');
    LP_STAT_DATE_TO := TO_CHAR(P_STAT_DATE_TO, 'DD-MON-YY');
    DECLARE
      L_MESSAGE FND_NEW_MESSAGES.MESSAGE_TEXT%TYPE;
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      INIT_SECURITY;
      BEGIN
        SELECT
          L.MEANING
        INTO
          C_ALL_TRANSLATION
        FROM
          CE_LOOKUPS L
        WHERE L.LOOKUP_TYPE = 'LITERAL'
          AND L.LOOKUP_CODE = 'ALL';
        C_COMPANY_NAME_HEADER := SUBSTR(GET_WINDOW_SESSION_TITLE
                                       ,1
                                       ,80);
      EXCEPTION
        WHEN OTHERS THEN
          SET_NAME('CE'
                  ,'CE_PURGE_NO_SOB');
          L_MESSAGE := GET;
          RAISE_APPLICATION_ERROR(-20101
                                 ,NULL);
      END;
      C_PROFILE := FND_PROFILE.VALUE('CE_BANK_ACCOUNT_TRANSFERS');
      IF (P_BANK_BRANCH_ID IS NOT NULL) THEN
        BEGIN
          SELECT
            ABB.BANK_NAME,
            ABB.BANK_BRANCH_NAME
          INTO
            C_BANK_NAME_DSP
            ,C_BANK_BRANCH_NAME_DSP
          FROM
            CE_BANK_BRANCHES_V ABB
          WHERE ABB.BRANCH_PARTY_ID = P_BANK_BRANCH_ID;
        EXCEPTION
          WHEN OTHERS THEN
            SET_NAME('CE'
                    ,'CE_INVALID_BANK_BRANCH');
            L_MESSAGE := GET;
            RAISE_APPLICATION_ERROR(-20101
                                   ,NULL);
        END;
        IF (P_BANK_ACCOUNT_ID IS NOT NULL) THEN
          BEGIN
            SELECT
              ABA.BANK_ACCOUNT_NUM,
              ABA.BANK_ACCOUNT_NAME,
              ABA.CURRENCY_CODE
            INTO
              C_BANK_ACCOUNT_NUM_DSP
              ,C_BANK_ACCOUNT_NAME_DSP
              ,C_BANK_CURRENCY_CODE_DSP
            FROM
              CE_BANK_ACCTS_GT_V ABA
            WHERE ABA.BANK_ACCOUNT_ID = P_BANK_ACCOUNT_ID
              AND ABA.ACCOUNT_CLASSIFICATION = 'INTERNAL';
          EXCEPTION
            WHEN OTHERS THEN
              SET_NAME('CE'
                      ,'CE_INVALID_BANK_ACC');
              L_MESSAGE := GET;
              RAISE_APPLICATION_ERROR(-20101
                                     ,NULL);
          END;
        ELSE
          C_BANK_ACCOUNT_NUM_DSP := ' -';
          C_BANK_ACCOUNT_NAME_DSP := ' -';
          C_BANK_CURRENCY_CODE_DSP := ' -';
        END IF;
      ELSE
        C_BANK_NAME_DSP := C_ALL_TRANSLATION;
        C_BANK_BRANCH_NAME_DSP := C_ALL_TRANSLATION;
        C_BANK_CURRENCY_CODE_DSP := C_ALL_TRANSLATION;
      END IF;
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION G_STATEMENT_NOGROUPFILTER(STATEMENT_DATE IN DATE) RETURN BOOLEAN IS
  BEGIN
    IF STATEMENT_DATE = '' THEN
      C_THE_END := 'N';
    ELSE
      C_THE_END := 'Y';
    END IF;
    RETURN (TRUE);
  END G_STATEMENT_NOGROUPFILTER;

  FUNCTION CF_LINE_COUNTFORMULA(BREAK_GROUP IN VARCHAR2) RETURN CHAR IS
  BEGIN
    DECLARE
      L_MESSAGE FND_NEW_MESSAGES.MESSAGE_TEXT%TYPE;
      L_MSG_NAME FND_NEW_MESSAGES.MESSAGE_NAME%TYPE;
    BEGIN
      IF C_PROFILE = 'XTR' THEN
        IF BREAK_GROUP = 'B' THEN
          L_MSG_NAME := 'CE_ZBA_SUCCESS_COUNT';
        ELSIF BREAK_GROUP = 'C' THEN
          L_MSG_NAME := 'CE_ZBA_FAILURE_COUNT';
        END IF;
      ELSIF C_PROFILE = 'CE' THEN
        IF BREAK_GROUP = 'B' THEN
          L_MSG_NAME := 'CE_ZBA_BSUCCESS_COUNT';
        ELSIF BREAK_GROUP = 'C' THEN
          L_MSG_NAME := 'CE_ZBA_BFAILURE_COUNT';
        END IF;
      END IF;
      SET_ENCODED(L_MSG_NAME);
      L_MESSAGE := GET;
      IF L_MESSAGE IS NULL THEN
        SET_NAME('CE'
                ,L_MSG_NAME);
        L_MESSAGE := GET;
      END IF;
      RETURN (L_MESSAGE);
    END;
    RETURN NULL;
  END CF_LINE_COUNTFORMULA;

  FUNCTION CF_1FORMULA(BREAK_GROUP IN VARCHAR2) RETURN CHAR IS
  BEGIN
    DECLARE
      L_MESSAGE FND_NEW_MESSAGES.MESSAGE_TEXT%TYPE;
      L_MSG_NAME FND_NEW_MESSAGES.MESSAGE_NAME%TYPE;
    BEGIN
      IF C_PROFILE = 'XTR' THEN
        IF BREAK_GROUP = 'B' THEN
          L_MSG_NAME := 'CE_ZBA_SUCCESS_MSG';
        ELSIF BREAK_GROUP = 'C' THEN
          L_MSG_NAME := 'CE_ZBA_FAILURE_MSG';
        ELSIF BREAK_GROUP = 'A' THEN
          L_MSG_NAME := 'CE_ZBA_STMT_EXCEPTIONS';
        END IF;
      ELSIF C_PROFILE = 'CE' THEN
        IF BREAK_GROUP = 'B' THEN
          L_MSG_NAME := 'CE_ZBA_SUCCESS_BAT';
        ELSIF BREAK_GROUP = 'C' THEN
          L_MSG_NAME := 'CE_ZBA_FAILURE_BAT';
        ELSIF BREAK_GROUP = 'A' THEN
          L_MSG_NAME := 'CE_ZBA_STMT_EXCEPTIONS';
        END IF;
      END IF;
      SET_ENCODED(L_MSG_NAME);
      L_MESSAGE := GET;
      IF L_MESSAGE IS NULL THEN
        SET_NAME('CE'
                ,L_MSG_NAME);
        L_MESSAGE := GET;
      END IF;
      RETURN (L_MESSAGE);
    END;
    RETURN NULL;
  END CF_1FORMULA;

  FUNCTION C_DATEFORMATFORMULA(C_DATEFORMAT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    --RETURN (C_DATEFORMAT);
    RETURN ('DD-MON-YYYY');
  END C_DATEFORMATFORMULA;

  FUNCTION C_BANK_ACCOUNT_NUM_DSP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BANK_ACCOUNT_NUM_DSP;
  END C_BANK_ACCOUNT_NUM_DSP_P;

  FUNCTION C_BANK_ACCOUNT_NAME_DSP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BANK_ACCOUNT_NAME_DSP;
  END C_BANK_ACCOUNT_NAME_DSP_P;

  FUNCTION C_BANK_BRANCH_NAME_DSP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BANK_BRANCH_NAME_DSP;
  END C_BANK_BRANCH_NAME_DSP_P;

  FUNCTION C_BANK_NAME_DSP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BANK_NAME_DSP;
  END C_BANK_NAME_DSP_P;

  FUNCTION C_BANK_CURRENCY_CODE_DSP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BANK_CURRENCY_CODE_DSP;
  END C_BANK_CURRENCY_CODE_DSP_P;

  FUNCTION C_BASE_CURRENCY_CODE_DSP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BASE_CURRENCY_CODE_DSP;
  END C_BASE_CURRENCY_CODE_DSP_P;

  FUNCTION C_COMPANY_NAME_HEADER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COMPANY_NAME_HEADER;
  END C_COMPANY_NAME_HEADER_P;

  FUNCTION C_ALL_TRANSLATION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_ALL_TRANSLATION;
  END C_ALL_TRANSLATION_P;

  FUNCTION C_THE_END_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_THE_END;
  END C_THE_END_P;

  FUNCTION C_PROFILE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_PROFILE;
  END C_PROFILE_P;

  PROCEDURE SET_NAME(APPLICATION IN VARCHAR2
                    ,NAME IN VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin FND_MESSAGE.SET_NAME(:APPLICATION, :NAME); end;');
    STPROC.BIND_I(APPLICATION);
    STPROC.BIND_I(NAME);
    STPROC.EXECUTE;*/
    FND_MESSAGE.SET_NAME(APPLICATION, NAME);
  END SET_NAME;

  /*PROCEDURE SET_TOKEN(TOKEN IN VARCHAR2
                     ,VALUE IN VARCHAR2
                     ,TRANSLATE IN BOOLEAN) IS
  BEGIN
    STPROC.INIT('declare TRANSLATE BOOLEAN; begin TRANSLATE := sys.diutil.int_to_bool(:TRANSLATE); FND_MESSAGE.SET_TOKEN(:TOKEN, :VALUE, TRANSLATE); end;');
    STPROC.BIND_I(TRANSLATE);
    STPROC.BIND_I(TOKEN);
    STPROC.BIND_I(VALUE);
    STPROC.EXECUTE;
  END SET_TOKEN;*/

  /*PROCEDURE RETRIEVE(MSGOUT OUT NOCOPY VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin FND_MESSAGE.RETRIEVE(:MSGOUT); end;');
    STPROC.BIND_O(MSGOUT);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,MSGOUT);
  END RETRIEVE;*/

  /*PROCEDURE CLEAR IS
  BEGIN
    STPROC.INIT('begin FND_MESSAGE.CLEAR; end;');
    STPROC.EXECUTE;
  END CLEAR;*/

  /*FUNCTION GET_STRING(APPIN IN VARCHAR2
                     ,NAMEIN IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := FND_MESSAGE.GET_STRING(:APPIN, :NAMEIN); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(APPIN);
    STPROC.BIND_I(NAMEIN);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_STRING;*/

  /*FUNCTION GET_NUMBER(APPIN IN VARCHAR2
                     ,NAMEIN IN VARCHAR2) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    STPROC.INIT('begin :X0 := FND_MESSAGE.GET_NUMBER(:APPIN, :NAMEIN); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(APPIN);
    STPROC.BIND_I(NAMEIN);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_NUMBER;*/

  FUNCTION GET RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := FND_MESSAGE.GET; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    X0 := FND_MESSAGE.GET;
    RETURN X0;
  END GET;

  /*FUNCTION GET_ENCODED RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := FND_MESSAGE.GET_ENCODED; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_ENCODED;*/

  /*PROCEDURE PARSE_ENCODED(ENCODED_MESSAGE IN VARCHAR2
                         ,APP_SHORT_NAME OUT NOCOPY VARCHAR2
                         ,MESSAGE_NAME OUT NOCOPY VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin FND_MESSAGE.PARSE_ENCODED(:ENCODED_MESSAGE, :APP_SHORT_NAME, :MESSAGE_NAME); end;');
    STPROC.BIND_I(ENCODED_MESSAGE);
    STPROC.BIND_O(APP_SHORT_NAME);
    STPROC.BIND_O(MESSAGE_NAME);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,APP_SHORT_NAME);
    STPROC.RETRIEVE(3
                   ,MESSAGE_NAME);
  END PARSE_ENCODED;*/

  PROCEDURE SET_ENCODED(ENCODED_MESSAGE IN VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin FND_MESSAGE.SET_ENCODED(:ENCODED_MESSAGE); end;');
    STPROC.BIND_I(ENCODED_MESSAGE);
    STPROC.EXECUTE;*/
    FND_MESSAGE.SET_ENCODED(ENCODED_MESSAGE);
  END SET_ENCODED;

  /*PROCEDURE RAISE_ERROR IS
  BEGIN
    STPROC.INIT('begin FND_MESSAGE.RAISE_ERROR; end;');
    STPROC.EXECUTE;
  END RAISE_ERROR;*/

  /*PROCEDURE DEBUG(LINE IN VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin CEP_STANDARD.DEBUG(:LINE); end;');
    STPROC.BIND_I(LINE);
    STPROC.EXECUTE;
  END DEBUG;*/

  /*PROCEDURE ENABLE_DEBUG IS
  BEGIN
    STPROC.INIT('begin CEP_STANDARD.ENABLE_DEBUG; end;');
    STPROC.EXECUTE;
  END ENABLE_DEBUG;*/

  /*PROCEDURE DISABLE_DEBUG IS
  BEGIN
    STPROC.INIT('begin CEP_STANDARD.DISABLE_DEBUG; end;');
    STPROC.EXECUTE;
  END DISABLE_DEBUG;*/

  PROCEDURE INIT_SECURITY IS
  BEGIN
    /*STPROC.INIT('begin cep_standard.init_security; end;');
    STPROC.EXECUTE;*/
    cep_standard.init_security;
  END INIT_SECURITY;

  FUNCTION GET_WINDOW_SESSION_TITLE RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := CEP_STANDARD.GET_WINDOW_SESSION_TITLE; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    X0 := CEP_STANDARD.GET_WINDOW_SESSION_TITLE;
    RETURN X0;
  END GET_WINDOW_SESSION_TITLE;

  /*FUNCTION GET_EFFECTIVE_DATE(P_BANK_ACCOUNT_ID IN NUMBER
                             ,P_TRX_CODE IN VARCHAR2
                             ,P_RECEIPT_DATE IN DATE) RETURN DATE IS
    X0 DATE;
  BEGIN
    STPROC.INIT('begin :X0 := CEP_STANDARD.GET_EFFECTIVE_DATE(:P_BANK_ACCOUNT_ID, :P_TRX_CODE, :P_RECEIPT_DATE); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(P_BANK_ACCOUNT_ID);
    STPROC.BIND_I(P_TRX_CODE);
    STPROC.BIND_I(P_RECEIPT_DATE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GET_EFFECTIVE_DATE;*/

END CE_CEZBAERR_XMLP_PKG;


/
