--------------------------------------------------------
--  DDL for Package Body GMF_CMR10USR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."GMF_CMR10USR_XMLP_PKG" AS
/* $Header: CMR10USRB.pls 120.0 2007/12/24 13:21:50 nchinnam noship $ */
  FUNCTION ALLOCATIONCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(ALLOCATIONCP)*/NULL;
    IF FROM_ALLOC_CODE IS NOT NULL AND TO_ALLOC_CODE IS NOT NULL THEN
      ALLOCATIONCP := ' and m.alloc_code >= ''' || FROM_ALLOC_CODE || ''' and m.alloc_code <= ''' || TO_ALLOC_CODE || '''';
    ELSIF FROM_ALLOC_CODE IS NULL AND TO_ALLOC_CODE IS NULL THEN
      ALLOCATIONCP := ' ';
      P_FROM_ALLOC_CODE := SY_ALL;
      P_TO_ALLOC_CODE := SY_ALL;
    ELSIF FROM_ALLOC_CODE IS NOT NULL AND TO_ALLOC_CODE IS NULL THEN
      ALLOCATIONCP := ' and m.alloc_code >= ''' || FROM_ALLOC_CODE || '''';
      P_TO_ALLOC_CODE := SY_ALL;
    ELSIF FROM_ALLOC_CODE IS NULL AND TO_ALLOC_CODE IS NOT NULL THEN
      ALLOCATIONCP := ' and m.alloc_code <= ''' || TO_ALLOC_CODE || '''';
      P_FROM_ALLOC_CODE := SY_ALL;
    END IF;
    RETURN NULL;
  END ALLOCATIONCFFORMULA;

  FUNCTION ALLOCATIONCPFORMULA(ALLOCATIONCF IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(ALLOCATIONCF)*/NULL;
    RETURN NULL;
  END ALLOCATIONCPFORMULA;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    IF (FROM_ALLOC_CODE > TO_ALLOC_CODE) THEN
      /*SRW.MESSAGE(100
                 ,'CM_FRMALLOC_LTE_TOALLOC_CODE')*/NULL;
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;

  PROCEDURE GMF_CMR10USR_XMLP_PKG_HEADER IS
  BEGIN
    NULL;
  END GMF_CMR10USR_XMLP_PKG_HEADER;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION CF_LEGAL_ENTITYFORMULA RETURN CHAR IS
    P_LEGAL_ENTITY VARCHAR2(240);
  BEGIN
    P_LEGAL_ENTITY := GMF_UTILITIES_GRP.GET_LEGAL_ENTITY(LEGAL_ENTITY_ID);
    RETURN (NVL(P_LEGAL_ENTITY
              ,' '));
  END CF_LEGAL_ENTITYFORMULA;

  FUNCTION FROM_ACCOUNTFORMULA(FROM_ACCOUNT_ID IN NUMBER) RETURN CHAR IS
  BEGIN
    IF FROM_ACCOUNT_ID IS NOT NULL THEN
      RETURN (GMF_UTILITIES_GRP.GET_ACCOUNT_CODE(NVL(FROM_ACCOUNT_ID
                                                   ,-1)
                                               ,LEGAL_ENTITY_ID));
    ELSE
      RETURN (NULL);
    END IF;
  END FROM_ACCOUNTFORMULA;

  FUNCTION TO_ACCOUNTFORMULA(TO_ACCOUNT_ID IN NUMBER) RETURN CHAR IS
  BEGIN
    IF TO_ACCOUNT_ID IS NOT NULL THEN
      RETURN (GMF_UTILITIES_GRP.GET_ACCOUNT_CODE(NVL(TO_ACCOUNT_ID
                                                   ,-1)
                                               ,LEGAL_ENTITY_ID));
    ELSE
      RETURN (NULL);
    END IF;
  END TO_ACCOUNTFORMULA;

  FUNCTION BASIS_ACCOUNT_CODEFORMULA(BASIS_ACCOUNT_ID IN NUMBER) RETURN CHAR IS
  BEGIN
    IF BASIS_ACCOUNT_ID IS NOT NULL THEN
      RETURN (GMF_UTILITIES_GRP.GET_ACCOUNT_CODE(NVL(BASIS_ACCOUNT_ID
                                                   ,-1)
                                               ,LEGAL_ENTITY_ID));
    ELSE
      RETURN (NULL);
    END IF;
  END BASIS_ACCOUNT_CODEFORMULA;

  FUNCTION BASIS_ACCOUNT_DESCFORMULA(BASIS_ACCOUNT_ID IN NUMBER) RETURN CHAR IS
  BEGIN
    IF BASIS_ACCOUNT_ID IS NOT NULL THEN
      RETURN (GMF_UTILITIES_GRP.GET_ACCOUNT_DESC(NVL(BASIS_ACCOUNT_ID
                                                   ,-1)
                                               ,LEGAL_ENTITY_ID
                                               ,'I'));
    ELSE
      RETURN (NULL);
    END IF;
  END BASIS_ACCOUNT_DESCFORMULA;

  FUNCTION FROM_ACCOUNT_DESCFORMULA(FROM_ACCOUNT_ID IN NUMBER) RETURN CHAR IS
  BEGIN
    IF FROM_ACCOUNT_ID IS NOT NULL THEN
      RETURN (GMF_UTILITIES_GRP.GET_ACCOUNT_DESC(NVL(FROM_ACCOUNT_ID
                                                   ,-1)
                                               ,LEGAL_ENTITY_ID
                                               ,'I'));
    ELSE
      RETURN (NULL);
    END IF;
  END FROM_ACCOUNT_DESCFORMULA;

  FUNCTION TO_ACCOUNT_DESCFORMULA(TO_ACCOUNT_ID IN NUMBER) RETURN CHAR IS
  BEGIN
    IF TO_ACCOUNT_ID IS NOT NULL THEN
      RETURN (GMF_UTILITIES_GRP.GET_ACCOUNT_DESC(NVL(TO_ACCOUNT_ID
                                                   ,-1)
                                               ,LEGAL_ENTITY_ID
                                               ,'I'));
    ELSE
      RETURN (NULL);
    END IF;
  END TO_ACCOUNT_DESCFORMULA;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION ALLOCATIONCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ALLOCATIONCP;
  END ALLOCATIONCP_P;

END GMF_CMR10USR_XMLP_PKG;


/
