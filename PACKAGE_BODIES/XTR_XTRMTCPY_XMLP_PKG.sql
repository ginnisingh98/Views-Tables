--------------------------------------------------------
--  DDL for Package Body XTR_XTRMTCPY_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."XTR_XTRMTCPY_XMLP_PKG" AS
/* $Header: XTRMTCPYB.pls 120.1 2007/12/28 12:57:16 npannamp noship $ */
  FUNCTION CPARTY_NAME1FORMULA(CPARTY varchar2)   RETURN VARCHAR2 IS
     BEGIN
     execute immediate
  'SELECT SHORT_NAME  FROM XTR_PARTIES_V WHERE PARTY_CODE =:CPARTY' INTO CPARTY_NAME
  USING CPARTY ;
       --  RETURN ('');
       RETURN(CPARTY_NAME);
  END CPARTY_NAME1FORMULA;
  FUNCTION CPARTY_NAMEFORMULA RETURN VARCHAR2 IS
  BEGIN
    RETURN NULL;
  END CPARTY_NAMEFORMULA;
  FUNCTION COMPANY_NAME1FORMULA(COMPANY varchar2) RETURN VARCHAR2 IS
      BEGIN
      execute immediate
 ' SELECT SHORT_NAME  FROM XTR_PARTIES_V WHERE PARTY_CODE = :COMPANY' INTO COMPANY_NAME
   USING COMPANY ;
   -- RETURN ('');
   RETURN COMPANY_NAME;
  END COMPANY_NAME1FORMULA;
  FUNCTION COMPANY_NAMEFORMULA RETURN VARCHAR2 IS
  BEGIN
    RETURN NULL;
  END COMPANY_NAMEFORMULA;
  FUNCTION CF_SET_PARAFORMULA RETURN VARCHAR2 IS
  BEGIN
    SELECT
      SUBSTR(USER
            ,1
            ,10)
    INTO
      CP_PARA
    FROM
      DUAL;
    RETURN (CP_PARA);
  END CF_SET_PARAFORMULA;
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    L_DMMY_NUM NUMBER;
    L_MESSAGE FND_NEW_MESSAGES.MESSAGE_TEXT%TYPE;
    CURSOR GET_LANGUAGE_DESC IS
      SELECT
        ITEM_NAME,
        SUBSTR(TEXT
              ,1
              ,100) LANG_NAME
      FROM
        XTR_SYS_LANGUAGES_VL
      WHERE MODULE_NAME = 'XTRMTCPY';
  BEGIN
    BEGIN
      COMPANY_NAME_HEADER := CEP_STANDARD.GET_WINDOW_SESSION_TITLE;
    EXCEPTION
      WHEN OTHERS THEN
        FND_MESSAGE.SET_NAME('XTR'
                            ,'XTR_LOOKUP_ERR');
        L_MESSAGE := FND_MESSAGE.GET;
        RAISE_APPLICATION_ERROR(-20101
                               ,NULL);
    END;
    IF (P_DISPLAY_DEBUG = 'Y') THEN
      NULL;
    END IF;
    FOR c IN GET_LANGUAGE_DESC LOOP
      IF C.ITEM_NAME = 'Z1AS_PRINCIPAL' THEN
        Z1AS_PRINCIPAL := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1CLIENT' THEN
        Z1CLIENT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1PRODUCT_TYPE' THEN
        Z1PRODUCT_TYPE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1PORTFOLIO' THEN
        Z1PORTFOLIO := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1COMPANY' THEN
        Z1COMPANY := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1CPARTY' THEN
        Z1CPARTY := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1CURRENCY' THEN
        Z1CURRENCY := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1DATE_FROM' THEN
        Z1DATE_FROM := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1DEAL_TYPE' THEN
        Z1DEAL_TYPE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1PARAMETERS' THEN
        Z1PARAMETERS := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1SUBTYPE' THEN
        Z1SUBTYPE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1TO' THEN
        Z1TO := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2AMOUNT' THEN
        Z2AMOUNT := C.LANG_NAME || '(in ' || P_FACTOR || ')';
      ELSIF C.ITEM_NAME = 'Z2AMT_TYPE' THEN
        Z2AMT_TYPE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2CCY' THEN
        Z2CCY := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2DEAL_REF' THEN
        Z2DEAL_REF := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2DEAL_TYPE_SUB' THEN
        Z2DEAL_TYPE_SUB := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2END_OF_REPORT' THEN
        Z2END_OF_REPORT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2HCE_AMOUNT' THEN
        Z2HCE_AMOUNT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2PRODUCT' THEN
        Z2PRODUCT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2RATE' THEN
        Z2RATE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2VALUE_DATE' THEN
        Z2VALUE_DATE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2PAGE' THEN
        Z2PAGE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'REPORT_DATE' THEN
        REPORT_DATE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1P_FACTOR' THEN
        Z1P_FACTOR := C.LANG_NAME;
      END IF;
    END LOOP;
    RETURN (TRUE);
  END BEFOREREPORT;
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERREPORT;
  FUNCTION AFTERPFORM RETURN BOOLEAN IS
    TEMP NUMBER(15) := 1000;
  BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    IF P_FACTOR IS NOT NULL THEN
      SELECT
        SUBSTRB(DESCRIPTION
               ,1
               ,20),
        DECODE(SUBSTR(P_FACTOR
                     ,1
                     ,1)
              ,'U'
              ,1
              ,'T'
              ,1000
              ,'M'
              ,1000000
              ,'B'
              ,100000000)
      INTO
        LP_FACTOR_DESC
        ,TEMP
      FROM
        FND_LOOKUPS
      WHERE LOOKUP_TYPE = 'XTR_FACTOR'
        AND LOOKUP_CODE = SUBSTR(P_FACTOR
            ,1
            ,1);
    ELSE
      SELECT
        SUBSTRB(DESCRIPTION
               ,1
               ,20)
      INTO
        LP_FACTOR_DESC
      FROM
        FND_LOOKUPS
      WHERE LOOKUP_TYPE = 'XTR_FACTOR'
        AND LOOKUP_CODE = 'T';
      TEMP := 1000;
    END IF;
    AMT_UNIT2 := TEMP;
  P_PERIOD_FROM1 := TO_CHAR(TO_DATE(P_PERIOD_FROM,'YYYY/MM/DD HH24:MI:SS'),'DD-MON-YYYY');
  P_PERIOD_TO1 := TO_CHAR(TO_DATE(P_PERIOD_TO ,'YYYY/MM/DD HH24:MI:SS')  ,'DD-MON-YYYY');
    CPARTY_CODE2 := P_CPARTY;
    COMPANY_CODE2 := P_COMPANY;
    DEAL_TYPE2 := P_DEAL_TYPE;
    DEAL_SUBTYPE2 := P_DEAL_SUBTYPE;
    PRODUCT_TYPE2 := P_PRODUCT_TYPE;
    PORTFOLIO2 := P_PORTFOLIO;
    CURRENCY2 := P_CURRENCY;
    FROM_DATE2 := P_PERIOD_FROM1;
    TO_DATE2 := P_PERIOD_TO1;
    AS_PRINCIPAL2 := P_AS_PRINCIPAL;
    CLIENT_CODE2 := P_CLIENT;
    SELECT
      CP.USER_CONCURRENT_PROGRAM_NAME
    INTO
      REPORT_SHORT_NAME2
    FROM
      FND_CONCURRENT_PROGRAMS_VL CP,
      FND_CONCURRENT_REQUESTS CR
    WHERE CR.REQUEST_ID = P_CONC_REQUEST_ID
      AND CP.APPLICATION_ID = CR.PROGRAM_APPLICATION_ID
      AND CP.CONCURRENT_PROGRAM_ID = CR.CONCURRENT_PROGRAM_ID;
      REPORT_SHORT_NAME2 := substr(REPORT_SHORT_NAME2,1,instr(REPORT_SHORT_NAME2,' (XML)'));
    RETURN (TRUE);
  END AFTERPFORM;
  FUNCTION COMPANY_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN COMPANY_NAME;
  END COMPANY_NAME_P;
  FUNCTION CPARTY_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CPARTY_NAME;
  END CPARTY_NAME_P;
  FUNCTION CP_PARA_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_PARA;
  END CP_PARA_P;
END XTR_XTRMTCPY_XMLP_PKG;


/
