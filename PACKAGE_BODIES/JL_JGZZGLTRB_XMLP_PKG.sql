--------------------------------------------------------
--  DDL for Package Body JL_JGZZGLTRB_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JL_JGZZGLTRB_XMLP_PKG" AS
/* $Header: JGZZGLTRBB.pls 120.1 2007/12/25 16:32:02 dwkrishn noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    CURSOR LEDGER_ACCTG_CODE IS
      SELECT
        C.ACCTG_ENVIRONMENT_CODE
      FROM
        GL_LEDGERS L,
        GL_LEDGER_CONFIGURATIONS C
      WHERE L.LEDGER_ID = P_LEDGER_ID
        AND C.CONFIGURATION_ID = L.CONFIGURATION_ID;
    CURSOR GET_EXC_LE_ID IS
      SELECT
        CD.OBJECT_ID
      FROM
        GL_LEDGERS L,
        GL_LEDGER_CONFIG_DETAILS CD
      WHERE L.LEDGER_ID = P_LEDGER_ID
        AND CD.CONFIGURATION_ID = L.CONFIGURATION_ID
        AND CD.OBJECT_TYPE_CODE = 'LEGAL_ENTITY';
    L_ACCTG_CODE VARCHAR2(30);
    L_EXC_LE_ID NUMBER(15);
    L_PERIOD_YEAR NUMBER(15);
    L_PERIOD_TYPE VARCHAR2(15);
    L_VERSION VARCHAR2(20);
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    USER_NAME := FND_GLOBAL.USER_NAME;
    SELECT
      RELEASE_NAME
    INTO L_VERSION
    FROM
      FND_PRODUCT_GROUPS;
    SYS_NAME_VER := P_APPL_NAME || L_VERSION || '.';
    SELECT
      TO_CHAR(SYSDATE
             ,'YYYY-MM-DD') || 'T' || TO_CHAR(SYSDATE
             ,'HH24:MI:SS')
    INTO REPORT_EXEC_DATE
    FROM
      DUAL;
    SELECT
      NAME,
      CHART_OF_ACCOUNTS_ID,
      PERIOD_SET_NAME,
      ACCOUNTED_PERIOD_TYPE
    INTO DATA_ACCESS_SET_NAME,COA_ID,L_PERIOD_SET_NAME,L_PERIOD_TYPE
    FROM
      GL_ACCESS_SETS
    WHERE ACCESS_SET_ID = P_ACCESS_SET_ID;
    SELECT
      NVL(LR.TARGET_LEDGER_NAME
         ,L.NAME)
    INTO PARAM_LEDGER_NAME
    FROM
      GL_LEDGERS L,
      GL_LEDGER_RELATIONSHIPS LR
    WHERE L.LEDGER_ID = P_LEDGER_ID
      AND LR.APPLICATION_ID (+) = 101
      AND LR.SOURCE_LEDGER_ID (+) = L.LEDGER_ID
      AND LR.TARGET_LEDGER_ID (+) = L.LEDGER_ID
      AND LR.TARGET_CURRENCY_CODE (+) = P_LEDGER_CURRENCY;
    SELECT
      P1.PERIOD_YEAR,
      P1.START_DATE,
      P2.END_DATE,
      TO_CHAR(P1.START_DATE
             ,'YYYY-MM-DD') || 'T' || TO_CHAR(P1.START_DATE
             ,'HH24:MI:SS'),
      TO_CHAR(P2.END_DATE
             ,'YYYY-MM-DD') || 'T' || TO_CHAR(P2.END_DATE
             ,'HH24:MI:SS')
    INTO L_PERIOD_YEAR,PER_FROM_START_DATE,PER_TO_END_DATE,PERIOD_FROM_START_DATE,PERIOD_TO_END_DATE
    FROM
      GL_PERIODS P1,
      GL_PERIODS P2
    WHERE P1.PERIOD_SET_NAME = L_PERIOD_SET_NAME
      AND P1.PERIOD_NAME = P_PERIOD_FROM
      AND P2.PERIOD_SET_NAME = L_PERIOD_SET_NAME
      AND P2.PERIOD_NAME = P_PERIOD_TO;
    SELECT
      P1.PERIOD_NAME,
      P1.ADJUSTMENT_PERIOD_FLAG
    INTO FIRST_PERIOD_NAME,FIRST_PERIOD_ADJ_FLAG
    FROM
      GL_PERIODS P1
    WHERE P1.PERIOD_SET_NAME = L_PERIOD_SET_NAME
      AND P1.PERIOD_TYPE = L_PERIOD_TYPE
      AND P1.PERIOD_YEAR = L_PERIOD_YEAR
      AND P1.PERIOD_NUM = (
      SELECT
        MIN(P2.PERIOD_NUM)
      FROM
        GL_PERIODS P2
      WHERE P2.PERIOD_SET_NAME = L_PERIOD_SET_NAME
        AND P2.PERIOD_TYPE = L_PERIOD_TYPE
        AND P2.PERIOD_YEAR = L_PERIOD_YEAR );
    /*SRW.REFERENCE(COA_ID)*/NULL;
    IF (P_KFF_FROM IS NOT NULL OR P_KFF_TO IS NOT NULL) THEN
      NULL;
    END IF;
    OPEN LEDGER_ACCTG_CODE;
    FETCH LEDGER_ACCTG_CODE
     INTO L_ACCTG_CODE;
    CLOSE LEDGER_ACCTG_CODE;
    IF (L_ACCTG_CODE = 'EXCLUSIVE') THEN
      OPEN GET_EXC_LE_ID;
      FETCH GET_EXC_LE_ID
       INTO L_EXC_LE_ID;
      CLOSE GET_EXC_LE_ID;
      SELECT_LE := TO_CHAR(L_EXC_LE_ID);
      FROM_LNSV := ' ';
      WHERE_LE := ' ';
    ELSIF (L_ACCTG_CODE = 'SHARED') THEN
      SELECT_LE := 'lnsv.LEGAL_ENTITY_ID';
      FROM_LNSV := ', GL_LEDGER_NORM_SEG_VALS lnsv';
      WHERE_LE := ' where lnsv.ledger_id (+) = ' || TO_CHAR(P_LEDGER_ID) || ' and lnsv.segment_type_code (+) = ''B''' || ' and lnsv.segment_value (+) = BALANCING_SEGMENT_VALUE' || ' and status_code IS NULL';
    ELSE
      SELECT_LE := 'NULL';
      FROM_LNSV := ' ';
      WHERE_LE := ' ';
    END IF;
    IF (P_PERIOD_FROM = P_PERIOD_TO) THEN
      WHERE_PERIOD := ' and per.period_name in (''' || P_PERIOD_FROM || ''', ''' || FIRST_PERIOD_NAME || ''')';
    ELSE
      WHERE_PERIOD := ' and (per.start_date BETWEEN to_date(''' || TO_CHAR(PER_FROM_START_DATE
                             ,'YYYY-MM-DD') || ''', ''YYYY-MM-DD'')' || ' AND to_date(''' || TO_CHAR(PER_TO_END_DATE
                             ,'YYYY-MM-DD') || ''', ''YYYY-MM-DD'')' || ' or per.period_name = ''' || FIRST_PERIOD_NAME || ''')';
    END IF;
    IF (P_CURRENCY_TYPE = 'E') THEN
      WHERE_TRANSLATED_FLAG := 'and nvl(bal.translated_flag, ''R'') = ''R''';
    ELSIF (P_CURRENCY_TYPE = 'T') THEN
      WHERE_TRANSLATED_FLAG := 'and nvl(bal.translated_flag, ''x'') <> ''R''';
    ELSIF (P_CURRENCY_TYPE = 'S') THEN
      WHERE_TRANSLATED_FLAG := 'and bal.translated_flag IS NULL';
    ELSE
      WHERE_TRANSLATED_FLAG := ' ';
    END IF;
    IF (P_ACCT_CLASS = 'ALL') THEN
      WHERE_ACCT_CLASS := 'and gcc.account_type in (''A'', ''L'', ''O'', ''R'', ''E'')';
    ELSIF (P_ACCT_CLASS = 'BS') THEN
      WHERE_ACCT_CLASS := 'and gcc.account_type in (''A'', ''L'', ''O'')';
    ELSIF (P_ACCT_CLASS = 'IS') THEN
      WHERE_ACCT_CLASS := 'and gcc.account_type in (''R'', ''E'')';
    END IF;
    WHERE_DAS := GL_ACCESS_SET_SECURITY_PKG.GET_SECURITY_CLAUSE(P_ACCESS_SET_ID
                                                               ,'R'
                                                               ,'LEDGER_COLUMN'
                                                               ,'LEDGER_ID'
                                                               ,'BAL'
                                                               ,'SEG_COLUMN'
                                                               ,NULL
                                                               ,'GCC'
                                                               ,NULL);
    IF (WHERE_DAS IS NOT NULL) THEN
      WHERE_DAS := ' and ' || WHERE_DAS;
    ELSE
      WHERE_DAS := ' ';
    END IF;
    IF (P_ACCT_LEVEL > 0 OR P_REPORT_TYPE IS NOT NULL) THEN
      SELECT
        FS.FLEX_VALUE_SET_ID
      INTO ACCT_SEG_VALUE_SET_ID
      FROM
        FND_SEGMENT_ATTRIBUTE_VALUES SAV,
        FND_ID_FLEX_SEGMENTS FS
      WHERE SAV.APPLICATION_ID = 101
        AND SAV.ID_FLEX_CODE = 'GL#'
        AND SAV.ID_FLEX_NUM = COA_ID
        AND SAV.SEGMENT_ATTRIBUTE_TYPE = 'GL_ACCOUNT'
        AND SAV.ATTRIBUTE_VALUE = 'Y'
        AND FS.APPLICATION_COLUMN_NAME = SAV.APPLICATION_COLUMN_NAME
        AND FS.APPLICATION_ID = 101
        AND FS.ID_FLEX_CODE = 'GL#'
        AND FS.ID_FLEX_NUM = COA_ID
        AND FS.ENABLED_FLAG = 'Y';
    END IF;
    IF (P_ACCT_LEVEL > 0) THEN
      JG_GL_ACCT_HIER_PKG.POPULATE_ACCT_HIER_TABLE(ACCT_SEG_VALUE_SET_ID
                                                  ,P_TOP_PARENT_VALUE);
    END IF;
    IF (P_REPORT_TYPE IS NOT NULL) THEN
      WHERE_DEGREE := 'and EXISTS (select 1' || ' from FND_FLEX_VALUES_VL parent' || ' where parent.flex_value_set_id = ' || TO_CHAR(ACCT_SEG_VALUE_SET_ID) || ' and substr(' || SELECT_ACCT_SEG
      || ', 1, length(parent.flex_value)) = parent.flex_value' || ' and gcc.summary_flag = ''N''' || ' and length(parent.flex_value) > 1';
      IF (P_REPORT_TYPE = 'BEGIN YEAR') THEN
        WHERE_DEGREE := WHERE_DEGREE || ' and (substr(parent.flex_value, 1, 1) in (''1'',''2'',''3'',''4'',''5'') or parent.flex_value = ''88'')' || ' and substr(' || SELECT_ACCT_SEG
        || ', 1, 1) in (''1'',''2'',''3'',''4'',''5'',''8'') )';
      ELSIF (P_REPORT_TYPE = 'END YEAR') THEN
        WHERE_DEGREE := WHERE_DEGREE || ' and substr(parent.flex_value, 1, 1) in (''1'',''2'',''3'',''4'',''5'',''8'')' || ' and substr(' || SELECT_ACCT_SEG || ', 1, 1) in (''1'',''2'',''3'',''4'',''5'',''8''))';
      ELSIF (P_REPORT_TYPE = 'RESULTS') THEN
        WHERE_DEGREE := WHERE_DEGREE || ' and substr(parent.flex_value, 1, 1) in (''6'',''7'',''8'') and substr(parent.flex_value, 1, 2) <> ''88''' || ' and substr(' || SELECT_ACCT_SEG
        || ', 1, 1) in (''6'',''7'',''8''))';
      ELSE
        WHERE_DEGREE := WHERE_DEGREE || ')';
      END IF;
    ELSE
      WHERE_DEGREE := ' ';
    END IF;
    IF (P_CURRENCY_TYPE = 'T') THEN
      PARAM_CURRENCY := P_LEDGER_CURRENCY;
    ELSE
      PARAM_CURRENCY := P_ENTERED_CURRENCY;
    END IF;
    PARAM_PERIOD_FROM := P_PERIOD_FROM;
    PARAM_PERIOD_TO := P_PERIOD_TO;
    PARAM_ACCT_FROM := P_KFF_FROM;
    PARAM_ACCT_TO := P_KFF_TO;
    PARAM_ACCT_LEVEL := P_ACCT_LEVEL;
    PARAM_TOP_PARENT_VALUE := P_TOP_PARENT_VALUE;
    PARAM_PAGE_NUM_FORMAT := P_PAGE_NUM_FORMAT;
    SELECT
      MIN(MEANING)
    INTO PARAM_CURRENCY_TYPE
    FROM
      GL_LOOKUPS
    WHERE LOOKUP_TYPE = 'GL_CURRENCY_TYPE'
      AND LOOKUP_CODE = P_CURRENCY_TYPE;
    SELECT
      MIN(MEANING)
    INTO PARAM_ZERO_BEGIN_YEAR_BAL
    FROM
      FND_LOOKUPS
    WHERE LOOKUP_TYPE = 'YES/NO'
      AND LOOKUP_CODE = P_ZERO_BYB;
    SELECT
      MIN(MEANING)
    INTO PARAM_ACCT_CLASS
    FROM
      FND_LOOKUPS
    WHERE LOOKUP_TYPE = 'JGZZ_ACCOUNT_CLASS'
      AND LOOKUP_CODE = P_ACCT_CLASS;
    SELECT
      MIN(MEANING)
    INTO PARAM_REPORT_TYPE
    FROM
      FND_LOOKUPS
    WHERE LOOKUP_TYPE = 'JGZZ_GL_TB_TYPE'
      AND LOOKUP_CODE = P_REPORT_TYPE;
    PARAM_USER_1 := P_USER_P1;
    PARAM_USER_2 := P_USER_P2;
    PARAM_USER_3 := P_USER_P3;
    PARAM_USER_4 := P_USER_P4;
    PARAM_USER_5 := P_USER_P5;
    PARAM_USER_6 := P_USER_P6;
    PARAM_USER_7 := P_USER_P7;
    PARAM_USER_8 := P_USER_P8;
    PARAM_USER_9 := P_USER_P9;
    PARAM_USER_10 := P_USER_P10;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION ACCT_LEVEL1_VALUEFORMULA(ACCOUNT_SEGMENT_VALUE IN VARCHAR2
                                   ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
    VAL VARCHAR2(40);
  BEGIN
    /*SRW.REFERENCE(ACCOUNT_SEGMENT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    VAL := JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_VALUE(ACCT_SEG_VALUE_SET_ID
                                                   ,P_ACCT_LEVEL
                                                   ,ACCOUNT_SEGMENT_VALUE
                                                   ,ACCT_VALUE_DESC
                                                   ,P_ACCT_DELIMITER
                                                   ,1);
    RETURN (VAL);
  END ACCT_LEVEL1_VALUEFORMULA;

  FUNCTION ACCT_LEVEL2_VALUEFORMULA(ACCOUNT_SEGMENT_VALUE IN VARCHAR2
                                   ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
    VAL VARCHAR2(40);
  BEGIN
    /*SRW.REFERENCE(ACCOUNT_SEGMENT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    VAL := JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_VALUE(ACCT_SEG_VALUE_SET_ID
                                                   ,P_ACCT_LEVEL
                                                   ,ACCOUNT_SEGMENT_VALUE
                                                   ,ACCT_VALUE_DESC
                                                   ,P_ACCT_DELIMITER
                                                   ,2);
    RETURN (VAL);
  END ACCT_LEVEL2_VALUEFORMULA;

  FUNCTION ACCT_LEVEL3_VALUEFORMULA(ACCOUNT_SEGMENT_VALUE IN VARCHAR2
                                   ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
    VAL VARCHAR2(40);
  BEGIN
    /*SRW.REFERENCE(ACCOUNT_SEGMENT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    VAL := JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_VALUE(ACCT_SEG_VALUE_SET_ID
                                                   ,P_ACCT_LEVEL
                                                   ,ACCOUNT_SEGMENT_VALUE
                                                   ,ACCT_VALUE_DESC
                                                   ,P_ACCT_DELIMITER
                                                   ,3);
    RETURN (VAL);
  END ACCT_LEVEL3_VALUEFORMULA;

  FUNCTION ACCT_LEVEL4_VALUEFORMULA(ACCOUNT_SEGMENT_VALUE IN VARCHAR2
                                   ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
    VAL VARCHAR2(40);
  BEGIN
    /*SRW.REFERENCE(ACCOUNT_SEGMENT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    VAL := JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_VALUE(ACCT_SEG_VALUE_SET_ID
                                                   ,P_ACCT_LEVEL
                                                   ,ACCOUNT_SEGMENT_VALUE
                                                   ,ACCT_VALUE_DESC
                                                   ,P_ACCT_DELIMITER
                                                   ,4);
    RETURN (VAL);
  END ACCT_LEVEL4_VALUEFORMULA;

  FUNCTION ACCT_LEVEL5_VALUEFORMULA(ACCOUNT_SEGMENT_VALUE IN VARCHAR2
                                   ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
    VAL VARCHAR2(40);
  BEGIN
    /*SRW.REFERENCE(ACCOUNT_SEGMENT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    VAL := JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_VALUE(ACCT_SEG_VALUE_SET_ID
                                                   ,P_ACCT_LEVEL
                                                   ,ACCOUNT_SEGMENT_VALUE
                                                   ,ACCT_VALUE_DESC
                                                   ,P_ACCT_DELIMITER
                                                   ,5);
    RETURN (VAL);
  END ACCT_LEVEL5_VALUEFORMULA;

  FUNCTION ACCT_LEVEL6_VALUEFORMULA(ACCOUNT_SEGMENT_VALUE IN VARCHAR2
                                   ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
    VAL VARCHAR2(40);
  BEGIN
    /*SRW.REFERENCE(ACCOUNT_SEGMENT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    VAL := JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_VALUE(ACCT_SEG_VALUE_SET_ID
                                                   ,P_ACCT_LEVEL
                                                   ,ACCOUNT_SEGMENT_VALUE
                                                   ,ACCT_VALUE_DESC
                                                   ,P_ACCT_DELIMITER
                                                   ,6);
    RETURN (VAL);
  END ACCT_LEVEL6_VALUEFORMULA;

  FUNCTION ACCT_LEVEL7_VALUEFORMULA(ACCOUNT_SEGMENT_VALUE IN VARCHAR2
                                   ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
    VAL VARCHAR2(40);
  BEGIN
    /*SRW.REFERENCE(ACCOUNT_SEGMENT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    VAL := JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_VALUE(ACCT_SEG_VALUE_SET_ID
                                                   ,P_ACCT_LEVEL
                                                   ,ACCOUNT_SEGMENT_VALUE
                                                   ,ACCT_VALUE_DESC
                                                   ,P_ACCT_DELIMITER
                                                   ,7);
    RETURN (VAL);
  END ACCT_LEVEL7_VALUEFORMULA;

  FUNCTION ACCT_LEVEL8_VALUEFORMULA(ACCOUNT_SEGMENT_VALUE IN VARCHAR2
                                   ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
    VAL VARCHAR2(40);
  BEGIN
    /*SRW.REFERENCE(ACCOUNT_SEGMENT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    VAL := JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_VALUE(ACCT_SEG_VALUE_SET_ID
                                                   ,P_ACCT_LEVEL
                                                   ,ACCOUNT_SEGMENT_VALUE
                                                   ,ACCT_VALUE_DESC
                                                   ,P_ACCT_DELIMITER
                                                   ,8);
    RETURN (VAL);
  END ACCT_LEVEL8_VALUEFORMULA;

  FUNCTION ACCT_LEVEL9_VALUEFORMULA(ACCOUNT_SEGMENT_VALUE IN VARCHAR2
                                   ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
    VAL VARCHAR2(40);
  BEGIN
    /*SRW.REFERENCE(ACCOUNT_SEGMENT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    VAL := JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_VALUE(ACCT_SEG_VALUE_SET_ID
                                                   ,P_ACCT_LEVEL
                                                   ,ACCOUNT_SEGMENT_VALUE
                                                   ,ACCT_VALUE_DESC
                                                   ,P_ACCT_DELIMITER
                                                   ,9);
    RETURN (VAL);
  END ACCT_LEVEL9_VALUEFORMULA;

  FUNCTION ACCT_LEVEL1_VALUE_DESCFORMULA(ACCOUNT_SEGMENT_VALUE IN VARCHAR2
                                        ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
    STR VARCHAR2(240);
  BEGIN
    /*SRW.REFERENCE(ACCOUNT_SEGMENT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    STR := JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_DESC(ACCT_SEG_VALUE_SET_ID
                                                  ,P_ACCT_LEVEL
                                                  ,ACCOUNT_SEGMENT_VALUE
                                                  ,ACCT_VALUE_DESC
                                                  ,P_ACCT_DELIMITER
                                                  ,1);
    RETURN (STR);
  END ACCT_LEVEL1_VALUE_DESCFORMULA;

  FUNCTION ACCT_LEVEL2_VALUE_DESCFORMULA(ACCOUNT_SEGMENT_VALUE IN VARCHAR2
                                        ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
    STR VARCHAR2(240);
  BEGIN
    /*SRW.REFERENCE(ACCOUNT_SEGMENT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    STR := JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_DESC(ACCT_SEG_VALUE_SET_ID
                                                  ,P_ACCT_LEVEL
                                                  ,ACCOUNT_SEGMENT_VALUE
                                                  ,ACCT_VALUE_DESC
                                                  ,P_ACCT_DELIMITER
                                                  ,2);
    RETURN (STR);
  END ACCT_LEVEL2_VALUE_DESCFORMULA;

  FUNCTION ACCT_LEVEL3_VALUE_DESCFORMULA(ACCOUNT_SEGMENT_VALUE IN VARCHAR2
                                        ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
    STR VARCHAR2(240);
  BEGIN
    /*SRW.REFERENCE(ACCOUNT_SEGMENT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    STR := JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_DESC(ACCT_SEG_VALUE_SET_ID
                                                  ,P_ACCT_LEVEL
                                                  ,ACCOUNT_SEGMENT_VALUE
                                                  ,ACCT_VALUE_DESC
                                                  ,P_ACCT_DELIMITER
                                                  ,3);
    RETURN (STR);
  END ACCT_LEVEL3_VALUE_DESCFORMULA;

  FUNCTION ACCT_LEVEL4_VALUE_DESCFORMULA(ACCOUNT_SEGMENT_VALUE IN VARCHAR2
                                        ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
    STR VARCHAR2(240);
  BEGIN
    /*SRW.REFERENCE(ACCOUNT_SEGMENT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    STR := JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_DESC(ACCT_SEG_VALUE_SET_ID
                                                  ,P_ACCT_LEVEL
                                                  ,ACCOUNT_SEGMENT_VALUE
                                                  ,ACCT_VALUE_DESC
                                                  ,P_ACCT_DELIMITER
                                                  ,4);
    RETURN (STR);
  END ACCT_LEVEL4_VALUE_DESCFORMULA;

  FUNCTION ACCT_LEVEL5_VALUE_DESCFORMULA(ACCOUNT_SEGMENT_VALUE IN VARCHAR2
                                        ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
    STR VARCHAR2(240);
  BEGIN
    /*SRW.REFERENCE(ACCOUNT_SEGMENT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    STR := JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_DESC(ACCT_SEG_VALUE_SET_ID
                                                  ,P_ACCT_LEVEL
                                                  ,ACCOUNT_SEGMENT_VALUE
                                                  ,ACCT_VALUE_DESC
                                                  ,P_ACCT_DELIMITER
                                                  ,5);
    RETURN (STR);
  END ACCT_LEVEL5_VALUE_DESCFORMULA;

  FUNCTION ACCT_LEVEL6_VALUE_DESCFORMULA(ACCOUNT_SEGMENT_VALUE IN VARCHAR2
                                        ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
    STR VARCHAR2(240);
  BEGIN
    /*SRW.REFERENCE(ACCOUNT_SEGMENT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    STR := JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_DESC(ACCT_SEG_VALUE_SET_ID
                                                  ,P_ACCT_LEVEL
                                                  ,ACCOUNT_SEGMENT_VALUE
                                                  ,ACCT_VALUE_DESC
                                                  ,P_ACCT_DELIMITER
                                                  ,6);
    RETURN (STR);
  END ACCT_LEVEL6_VALUE_DESCFORMULA;

  FUNCTION ACCT_LEVEL7_VALUE_DESCFORMULA(ACCOUNT_SEGMENT_VALUE IN VARCHAR2
                                        ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
    STR VARCHAR2(240);
  BEGIN
    /*SRW.REFERENCE(ACCOUNT_SEGMENT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    STR := JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_DESC(ACCT_SEG_VALUE_SET_ID
                                                  ,P_ACCT_LEVEL
                                                  ,ACCOUNT_SEGMENT_VALUE
                                                  ,ACCT_VALUE_DESC
                                                  ,P_ACCT_DELIMITER
                                                  ,7);
    RETURN (STR);
  END ACCT_LEVEL7_VALUE_DESCFORMULA;

  FUNCTION ACCT_LEVEL8_VALUE_DESCFORMULA(ACCOUNT_SEGMENT_VALUE IN VARCHAR2
                                        ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
    STR VARCHAR2(240);
  BEGIN
    /*SRW.REFERENCE(ACCOUNT_SEGMENT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    STR := JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_DESC(ACCT_SEG_VALUE_SET_ID
                                                  ,P_ACCT_LEVEL
                                                  ,ACCOUNT_SEGMENT_VALUE
                                                  ,ACCT_VALUE_DESC
                                                  ,P_ACCT_DELIMITER
                                                  ,8);
    RETURN (STR);
  END ACCT_LEVEL8_VALUE_DESCFORMULA;

  FUNCTION ACCT_LEVEL9_VALUE_DESCFORMULA(ACCOUNT_SEGMENT_VALUE IN VARCHAR2
                                        ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
    STR VARCHAR2(240);
  BEGIN
    /*SRW.REFERENCE(ACCOUNT_SEGMENT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    STR := JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_DESC(ACCT_SEG_VALUE_SET_ID
                                                  ,P_ACCT_LEVEL
                                                  ,ACCOUNT_SEGMENT_VALUE
                                                  ,ACCT_VALUE_DESC
                                                  ,P_ACCT_DELIMITER
                                                  ,9);
    RETURN (STR);
  END ACCT_LEVEL9_VALUE_DESCFORMULA;

  PROCEDURE GET_LE_INFO(CURRENT_LE_ID IN NUMBER) IS
    CURSOR GET_COMPANY_INFO(V_LE_ID IN NUMBER) IS
      SELECT
        LEGAL_ENTITY_ID,
        NAME,
        LTRIM(ADDRESS_LINE_1),
        LTRIM(ADDRESS_LINE_2),
        LTRIM(ADDRESS_LINE_3),
        LTRIM(TOWN_OR_CITY),
        LTRIM(POSTAL_CODE),
        ACTIVITY_CODE,
        REGISTRATION_NUMBER
      FROM
        XLE_FIRSTPARTY_INFORMATION_V
      WHERE LEGAL_ENTITY_ID = V_LE_ID;
  BEGIN
    IF (TEMP_LE_ID IS NOT NULL AND CURRENT_LE_ID = TEMP_LE_ID) THEN
      RETURN;
    END IF;
    OPEN GET_COMPANY_INFO(CURRENT_LE_ID);
    FETCH GET_COMPANY_INFO
     INTO TEMP_LE_ID,TEMP_LE_NAME,TEMP_LE_ADDR1,TEMP_LE_ADDR2,TEMP_LE_ADDR3,TEMP_LE_CITY,TEMP_LE_POSTAL_CODE,TEMP_LE_SERVICE_TYPE,TEMP_LE_TAX_PAYER_ID;
    CLOSE GET_COMPANY_INFO;
  END GET_LE_INFO;

  FUNCTION LE_ADDR1FORMULA(LEGAL_ENTITY_ID IN NUMBER
                          ,LE_ADDR1 IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(LEGAL_ENTITY_ID)*/NULL;
    IF (LEGAL_ENTITY_ID IS NOT NULL) THEN
      GET_LE_INFO(LEGAL_ENTITY_ID);
      RETURN (TEMP_LE_ADDR1);
    END IF;
    RETURN (LE_ADDR1);
  END LE_ADDR1FORMULA;

  FUNCTION LE_ADDR2FORMULA(LEGAL_ENTITY_ID IN NUMBER
                          ,LE_ADDR2 IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(LEGAL_ENTITY_ID)*/NULL;
    IF (LEGAL_ENTITY_ID IS NOT NULL) THEN
      GET_LE_INFO(LEGAL_ENTITY_ID);
      RETURN (TEMP_LE_ADDR2);
    END IF;
    RETURN (LE_ADDR2);
  END LE_ADDR2FORMULA;

  FUNCTION LE_ADDR3FORMULA(LEGAL_ENTITY_ID IN NUMBER
                          ,LE_ADDR3 IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(LEGAL_ENTITY_ID)*/NULL;
    IF (LEGAL_ENTITY_ID IS NOT NULL) THEN
      GET_LE_INFO(LEGAL_ENTITY_ID);
      RETURN (TEMP_LE_ADDR3);
    END IF;
    RETURN (LE_ADDR3);
  END LE_ADDR3FORMULA;

  FUNCTION LE_CITYFORMULA(LEGAL_ENTITY_ID IN NUMBER
                         ,LE_CITY IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(LEGAL_ENTITY_ID)*/NULL;
    IF (LEGAL_ENTITY_ID IS NOT NULL) THEN
      GET_LE_INFO(LEGAL_ENTITY_ID);
      RETURN (TEMP_LE_CITY);
    END IF;
    RETURN (LE_CITY);
  END LE_CITYFORMULA;

  FUNCTION LE_POSTAL_CODEFORMULA(LEGAL_ENTITY_ID IN NUMBER
                                ,LE_POSTAL_CODE IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(LEGAL_ENTITY_ID)*/NULL;
    IF (LEGAL_ENTITY_ID IS NOT NULL) THEN
      GET_LE_INFO(LEGAL_ENTITY_ID);
      RETURN (TEMP_LE_POSTAL_CODE);
    END IF;
    RETURN (LE_POSTAL_CODE);
  END LE_POSTAL_CODEFORMULA;

  FUNCTION LE_SERVICE_TYPEFORMULA(LEGAL_ENTITY_ID IN NUMBER
                                 ,LE_SERVICE_TYPE IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(LEGAL_ENTITY_ID)*/NULL;
    IF (LEGAL_ENTITY_ID IS NOT NULL) THEN
      GET_LE_INFO(LEGAL_ENTITY_ID);
      RETURN (TEMP_LE_SERVICE_TYPE);
    END IF;
    RETURN (LE_SERVICE_TYPE);
  END LE_SERVICE_TYPEFORMULA;

  FUNCTION LE_TAX_PAYER_IDFORMULA(LEGAL_ENTITY_ID IN NUMBER
                                 ,LE_TAX_PAYER_ID IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(LEGAL_ENTITY_ID)*/NULL;
    IF (LEGAL_ENTITY_ID IS NOT NULL) THEN
      GET_LE_INFO(LEGAL_ENTITY_ID);
      RETURN (TEMP_LE_TAX_PAYER_ID);
    END IF;
    RETURN (LE_TAX_PAYER_ID);
  END LE_TAX_PAYER_IDFORMULA;

  FUNCTION LE_NAMEFORMULA(LEGAL_ENTITY_ID IN NUMBER
                         ,LE_NAME IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(LEGAL_ENTITY_ID)*/NULL;
    IF (LEGAL_ENTITY_ID IS NOT NULL) THEN
      GET_LE_INFO(LEGAL_ENTITY_ID);
      RETURN (TEMP_LE_NAME);
    END IF;
    RETURN (LE_NAME);
  END LE_NAMEFORMULA;

  FUNCTION ACCT_VALUEFORMULA(ACCOUNT_SEGMENT_VALUE IN VARCHAR2
                            ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
    VAL VARCHAR2(40);
  BEGIN
    /*SRW.REFERENCE(ACCOUNT_SEGMENT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    VAL := JG_GL_ACCT_HIER_PKG.GET_DELIMITED_DETAIL_ACCT(ACCT_SEG_VALUE_SET_ID
                                                        ,P_ACCT_LEVEL
                                                        ,ACCOUNT_SEGMENT_VALUE
                                                        ,ACCT_VALUE_DESC
                                                        ,P_ACCT_DELIMITER);
    IF (VAL IS NULL) THEN
      VAL := ACCOUNT_SEGMENT_VALUE;
    END IF;
    RETURN (VAL);
  END ACCT_VALUEFORMULA;

  FUNCTION ACCT_LEVEL10_VALUEFORMULA(ACCOUNT_SEGMENT_VALUE IN VARCHAR2
                                    ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
    VAL VARCHAR2(40);
  BEGIN
    /*SRW.REFERENCE(ACCOUNT_SEGMENT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    VAL := JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_VALUE(ACCT_SEG_VALUE_SET_ID
                                                   ,P_ACCT_LEVEL
                                                   ,ACCOUNT_SEGMENT_VALUE
                                                   ,ACCT_VALUE_DESC
                                                   ,P_ACCT_DELIMITER
                                                   ,10);
    RETURN (VAL);
  END ACCT_LEVEL10_VALUEFORMULA;

  FUNCTION ACCT_LEVEL10_VALUE_DESCFORMULA(ACCOUNT_SEGMENT_VALUE IN VARCHAR2
                                         ,ACCT_VALUE_DESC IN VARCHAR2) RETURN CHAR IS
    STR VARCHAR2(240);
  BEGIN
    /*SRW.REFERENCE(ACCOUNT_SEGMENT_VALUE)*/NULL;
    /*SRW.REFERENCE(ACCT_VALUE_DESC)*/NULL;
    STR := JG_GL_ACCT_HIER_PKG.GET_LEVEL_ACCT_DESC(ACCT_SEG_VALUE_SET_ID
                                                  ,P_ACCT_LEVEL
                                                  ,ACCOUNT_SEGMENT_VALUE
                                                  ,ACCT_VALUE_DESC
                                                  ,P_ACCT_DELIMITER
                                                  ,10);
    RETURN (STR);
  END ACCT_LEVEL10_VALUE_DESCFORMULA;

  FUNCTION BEFOREPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END BEFOREPFORM;

  FUNCTION SELECT_ACCT_SEG_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SELECT_ACCT_SEG;
  END SELECT_ACCT_SEG_P;

  FUNCTION SELECT_BAL_SEG_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SELECT_BAL_SEG;
  END SELECT_BAL_SEG_P;

  FUNCTION SELECT_CC_SEG_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SELECT_CC_SEG;
  END SELECT_CC_SEG_P;

  FUNCTION SELECT_IC_SEG_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SELECT_IC_SEG;
  END SELECT_IC_SEG_P;

  FUNCTION SELECT_MGT_SEG_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SELECT_MGT_SEG;
  END SELECT_MGT_SEG_P;

  FUNCTION SELECT_ST_SEG_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SELECT_ST_SEG;
  END SELECT_ST_SEG_P;

  FUNCTION COA_ID_P RETURN NUMBER IS
  BEGIN
    RETURN COA_ID;
  END COA_ID_P;

  FUNCTION DATA_ACCESS_SET_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN DATA_ACCESS_SET_NAME;
  END DATA_ACCESS_SET_NAME_P;

  FUNCTION PARAM_TOP_PARENT_VALUE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PARAM_TOP_PARENT_VALUE;
  END PARAM_TOP_PARENT_VALUE_P;

  FUNCTION FIRST_PERIOD_ADJ_FLAG_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FIRST_PERIOD_ADJ_FLAG;
  END FIRST_PERIOD_ADJ_FLAG_P;

  FUNCTION PARAM_CURRENCY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PARAM_CURRENCY;
  END PARAM_CURRENCY_P;

  FUNCTION PARAM_LEDGER_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PARAM_LEDGER_NAME;
  END PARAM_LEDGER_NAME_P;

  FUNCTION PARAM_PERIOD_FROM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PARAM_PERIOD_FROM;
  END PARAM_PERIOD_FROM_P;

  FUNCTION PARAM_PERIOD_TO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PARAM_PERIOD_TO;
  END PARAM_PERIOD_TO_P;

  FUNCTION PARAM_ACCT_FROM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PARAM_ACCT_FROM;
  END PARAM_ACCT_FROM_P;

  FUNCTION PARAM_ACCT_TO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PARAM_ACCT_TO;
  END PARAM_ACCT_TO_P;

  FUNCTION FIRST_PERIOD_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FIRST_PERIOD_NAME;
  END FIRST_PERIOD_NAME_P;

  FUNCTION SELECT_ACCOUNT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SELECT_ACCOUNT;
  END SELECT_ACCOUNT_P;

  FUNCTION WHERE_ACCT_RANGE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN WHERE_ACCT_RANGE;
  END WHERE_ACCT_RANGE_P;

  FUNCTION WHERE_PERIOD_P RETURN VARCHAR2 IS
  BEGIN
    RETURN WHERE_PERIOD;
  END WHERE_PERIOD_P;

  FUNCTION PARAM_ZERO_BEGIN_YEAR_BAL_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PARAM_ZERO_BEGIN_YEAR_BAL;
  END PARAM_ZERO_BEGIN_YEAR_BAL_P;

  FUNCTION PARAM_ACCT_LEVEL_P RETURN NUMBER IS
  BEGIN
    RETURN PARAM_ACCT_LEVEL;
  END PARAM_ACCT_LEVEL_P;

  FUNCTION PARAM_ACCT_CLASS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PARAM_ACCT_CLASS;
  END PARAM_ACCT_CLASS_P;

  FUNCTION PARAM_REPORT_TYPE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PARAM_REPORT_TYPE;
  END PARAM_REPORT_TYPE_P;

  FUNCTION PARAM_PAGE_NUM_FORMAT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PARAM_PAGE_NUM_FORMAT;
  END PARAM_PAGE_NUM_FORMAT_P;

  FUNCTION PER_FROM_START_DATE_P RETURN DATE IS
  BEGIN
    RETURN PER_FROM_START_DATE;
  END PER_FROM_START_DATE_P;

  FUNCTION PER_TO_END_DATE_P RETURN DATE IS
  BEGIN
    RETURN PER_TO_END_DATE;
  END PER_TO_END_DATE_P;

  FUNCTION PERIOD_SET_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN L_PERIOD_SET_NAME;
  END PERIOD_SET_NAME_P;

  FUNCTION WHERE_ACCT_CLASS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN WHERE_ACCT_CLASS;
  END WHERE_ACCT_CLASS_P;

  FUNCTION WHERE_TRANSLATED_FLAG_P RETURN VARCHAR2 IS
  BEGIN
    RETURN WHERE_TRANSLATED_FLAG;
  END WHERE_TRANSLATED_FLAG_P;

  FUNCTION WHERE_DAS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN WHERE_DAS;
  END WHERE_DAS_P;

  FUNCTION USER_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN USER_NAME;
  END USER_NAME_P;

  FUNCTION TEMP_LE_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TEMP_LE_NAME;
  END TEMP_LE_NAME_P;

  FUNCTION TEMP_LE_ADDR1_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TEMP_LE_ADDR1;
  END TEMP_LE_ADDR1_P;

  FUNCTION WHERE_DEGREE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN WHERE_DEGREE;
  END WHERE_DEGREE_P;

  FUNCTION TEMP_LE_SERVICE_TYPE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TEMP_LE_SERVICE_TYPE;
  END TEMP_LE_SERVICE_TYPE_P;

  FUNCTION TEMP_LE_TAX_PAYER_ID_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TEMP_LE_TAX_PAYER_ID;
  END TEMP_LE_TAX_PAYER_ID_P;

  FUNCTION TEMP_LE_CITY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TEMP_LE_CITY;
  END TEMP_LE_CITY_P;

  FUNCTION TEMP_LE_POSTAL_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TEMP_LE_POSTAL_CODE;
  END TEMP_LE_POSTAL_CODE_P;

  FUNCTION ACCT_SEG_VALUE_SET_ID_P RETURN NUMBER IS
  BEGIN
    RETURN ACCT_SEG_VALUE_SET_ID;
  END ACCT_SEG_VALUE_SET_ID_P;

  FUNCTION SELECT_LE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SELECT_LE;
  END SELECT_LE_P;

  FUNCTION FROM_LNSV_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FROM_LNSV;
  END FROM_LNSV_P;

  FUNCTION WHERE_LE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN WHERE_LE;
  END WHERE_LE_P;

  FUNCTION TEMP_LE_ADDR2_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TEMP_LE_ADDR2;
  END TEMP_LE_ADDR2_P;

  FUNCTION TEMP_LE_ADDR3_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TEMP_LE_ADDR3;
  END TEMP_LE_ADDR3_P;

  FUNCTION TEMP_LE_ID_P RETURN NUMBER IS
  BEGIN
    RETURN TEMP_LE_ID;
  END TEMP_LE_ID_P;

  FUNCTION PARAM_CURRENCY_TYPE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PARAM_CURRENCY_TYPE;
  END PARAM_CURRENCY_TYPE_P;

  FUNCTION SYS_NAME_VER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SYS_NAME_VER;
  END SYS_NAME_VER_P;

  FUNCTION REPORT_EXEC_DATE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN REPORT_EXEC_DATE;
  END REPORT_EXEC_DATE_P;

  FUNCTION PARAM_USER_1_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PARAM_USER_1;
  END PARAM_USER_1_P;

  FUNCTION PARAM_USER_2_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PARAM_USER_2;
  END PARAM_USER_2_P;

  FUNCTION PARAM_USER_3_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PARAM_USER_3;
  END PARAM_USER_3_P;

  FUNCTION PARAM_USER_4_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PARAM_USER_4;
  END PARAM_USER_4_P;

  FUNCTION PARAM_USER_5_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PARAM_USER_5;
  END PARAM_USER_5_P;

  FUNCTION PERIOD_FROM_START_DATE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PERIOD_FROM_START_DATE;
  END PERIOD_FROM_START_DATE_P;

  FUNCTION PERIOD_TO_END_DATE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PERIOD_TO_END_DATE;
  END PERIOD_TO_END_DATE_P;

  FUNCTION PARAM_USER_6_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PARAM_USER_6;
  END PARAM_USER_6_P;

  FUNCTION PARAM_USER_7_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PARAM_USER_7;
  END PARAM_USER_7_P;

  FUNCTION PARAM_USER_8_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PARAM_USER_8;
  END PARAM_USER_8_P;

  FUNCTION PARAM_USER_9_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PARAM_USER_9;
  END PARAM_USER_9_P;

  FUNCTION PARAM_USER_10_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PARAM_USER_10;
  END PARAM_USER_10_P;

END JL_JGZZGLTRB_XMLP_PKG;




/
