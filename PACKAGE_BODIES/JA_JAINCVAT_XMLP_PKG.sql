--------------------------------------------------------
--  DDL for Package Body JA_JAINCVAT_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JA_JAINCVAT_XMLP_PKG" AS
/* $Header: JAINCVATB.pls 120.1 2007/12/25 16:16:36 dwkrishn noship $ */
  FUNCTION CF_PERCENTFORMULA(CENVAT_CREDIT_TAKEN IN NUMBER
                            ,DUTY_PAYABLE IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (ROUND(NVL(CENVAT_CREDIT_TAKEN
                    ,0) / NVL(DUTY_PAYABLE
                    ,1) * 100
                ,2));
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (0);
  END CF_PERCENTFORMULA;
  FUNCTION CF_ORGANIZATION_NAMEFORMULA RETURN CHAR IS
    V_ORGANIZATION_NAME ORG_ORGANIZATION_DEFINITIONS.ORGANIZATION_NAME%TYPE;
  BEGIN
    SELECT
      ORGANIZATION_NAME
    INTO V_ORGANIZATION_NAME
    FROM
      ORG_ORGANIZATION_DEFINITIONS
    WHERE ORGANIZATION_ID = P_ORGANIZATION_ID;
    RETURN (V_ORGANIZATION_NAME);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END CF_ORGANIZATION_NAMEFORMULA;
  FUNCTION CF_LOCATION_NAMEFORMULA RETURN CHAR IS
    V_LOCATION_NAME HR_LOCATIONS.LOCATION_CODE%TYPE;
  BEGIN
    SELECT
      LOCATION_CODE
    INTO V_LOCATION_NAME
    FROM
      HR_LOCATIONS
    WHERE LOCATION_ID = P_LOCATION_ID;
    RETURN (V_LOCATION_NAME);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END CF_LOCATION_NAMEFORMULA;
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    CURSOR C_PROGRAM_ID(P_REQUEST_ID IN NUMBER) IS
      SELECT
        CONCURRENT_PROGRAM_ID,
        NVL(ENABLE_TRACE
           ,'N')
      FROM
        FND_CONCURRENT_REQUESTS
      WHERE REQUEST_ID = P_REQUEST_ID;
    V_ENABLE_TRACE FND_CONCURRENT_PROGRAMS.ENABLE_TRACE%TYPE;
    V_PROGRAM_ID FND_CONCURRENT_PROGRAMS.CONCURRENT_PROGRAM_ID%TYPE;
  BEGIN
    /*SRW.MESSAGE(1275
               ,'Report Version is 120.3 Last modified date is 23/11/2006')*/NULL;
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    BEGIN
      OPEN C_PROGRAM_ID(P_CONC_REQUEST_ID);
      FETCH C_PROGRAM_ID
       INTO V_PROGRAM_ID,V_ENABLE_TRACE;
      CLOSE C_PROGRAM_ID;
      /*SRW.MESSAGE(1275
                 ,'v_program_id -> ' || V_PROGRAM_ID || ', v_enable_trace -> ' || V_ENABLE_TRACE || ', request_id -> ' || P_CONC_REQUEST_ID)*/NULL;
      IF V_ENABLE_TRACE = 'Y' THEN
        EXECUTE IMMEDIATE
          'ALTER SESSION SET EVENTS ''10046 trace name context forever, level 4''';
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        /*SRW.MESSAGE(1275
                   ,'Error during enabling the trace. ErrCode -> ' || SQLCODE || ', ErrMesg -> ' || SQLERRM)*/NULL;
    END;
    RETURN (TRUE);
  END BEFOREREPORT;
  FUNCTION CF_CESSFORMULA(REGISTER_ID IN NUMBER
                         ,EXCISE_INVOICE_NO IN VARCHAR2
                         ,BALANCE_CESS IN NUMBER) RETURN NUMBER IS
    LN_ROUNDING_ID NUMBER;
    LN_EXCISE NUMBER;
    LN_EXCISE_ROUNDED_BAL NUMBER;
    LV_TAX_TYPE_EXC_EDU_CESS CONSTANT VARCHAR2(30) DEFAULT 'EXCISE_EDUCATION_CESS';
    LV_TAX_TYPE_CVD_EDU_CESS CONSTANT VARCHAR2(30) DEFAULT 'CVD_EDUCATION_CESS';
    CURSOR CUR_ROUNDING_ID IS
      SELECT
        ROUNDING_ID
      FROM
        JAI_CMN_RG_23AC_II_TRXS
      WHERE REGISTER_ID = REGISTER_ID;
    CURSOR CUR_EXCISE IS
      SELECT
        ROUNDED_EXCISE_EDU_CESS + ROUNDED_CVD_EDU_CESS,
        ( EXCISE_EDU_CESS + CVD_EDU_CESS - ROUNDED_EXCISE_EDU_CESS - ROUNDED_CVD_EDU_CESS ) BAL
      FROM
        JAI_CMN_RG_ROUND_HDRS
      WHERE EXCISE_INVOICE_NO = EXCISE_INVOICE_NO
        AND ROUNDING_ID = LN_ROUNDING_ID;
    CURSOR CUR_RG_EXCISE IS
      SELECT
        NVL(SUM(CREDIT)
           ,0)
      FROM
        JAI_CMN_RG_OTHERS
      WHERE SOURCE_REGISTER_ID = REGISTER_ID
        AND SOURCE_TYPE = 1
        AND TAX_TYPE in ( LV_TAX_TYPE_EXC_EDU_CESS , LV_TAX_TYPE_CVD_EDU_CESS );
  BEGIN
    OPEN CUR_ROUNDING_ID;
    FETCH CUR_ROUNDING_ID
     INTO LN_ROUNDING_ID;
    CLOSE CUR_ROUNDING_ID;
    LN_EXCISE_ROUNDED_BAL := 0;
    IF LN_ROUNDING_ID IS NOT NULL AND LN_ROUNDING_ID <> -99999 THEN
      OPEN CUR_EXCISE;
      FETCH CUR_EXCISE
       INTO LN_EXCISE,LN_EXCISE_ROUNDED_BAL;
      CLOSE CUR_EXCISE;
    ELSE
      OPEN CUR_RG_EXCISE;
      FETCH CUR_RG_EXCISE
       INTO LN_EXCISE;
      CLOSE CUR_RG_EXCISE;
    END IF;
    CP_BALANCE_CESS := BALANCE_CESS + LN_EXCISE_ROUNDED_BAL;
    RETURN LN_EXCISE;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END CF_CESSFORMULA;
  FUNCTION CF_CENVAT_CREDIT_TAKENFORMULA(REGISTER_ID IN NUMBER
                                        ,EXCISE_INVOICE_NO IN VARCHAR2
                                        ,CENVAT_CREDIT_TAKEN IN NUMBER
                                        ,ADDITIONAL_CVD IN NUMBER
                                        ,BALANCE_CREDIT IN NUMBER) RETURN NUMBER IS
    LN_ROUNDING_ID NUMBER;
    LN_CENVAT NUMBER;
    LN_CENVAT_ROUNDED_BAL NUMBER;
    LN_ROUNDED_ADDCVD NUMBER;
    CURSOR CUR_ROUNDING_ID IS
      SELECT
        ROUNDING_ID
      FROM
        JAI_CMN_RG_23AC_II_TRXS
      WHERE REGISTER_ID = REGISTER_ID;
    CURSOR CUR_CENVAT IS
      SELECT
        ROUNDED_BASIC_ED + ROUNDED_ADDITIONAL_ED + ROUNDED_OTHER_ED,
        NVL(ROUNDED_ADDITIONAL_CVD
           ,0),
        ( BASIC_ED + ADDITIONAL_ED + OTHER_ED ) - ( ROUNDED_BASIC_ED + ROUNDED_ADDITIONAL_ED + ROUNDED_OTHER_ED )
      FROM
        JAI_CMN_RG_ROUND_HDRS
      WHERE EXCISE_INVOICE_NO = EXCISE_INVOICE_NO
        AND ROUNDING_ID = LN_ROUNDING_ID;
  BEGIN
    OPEN CUR_ROUNDING_ID;
    FETCH CUR_ROUNDING_ID
     INTO LN_ROUNDING_ID;
    CLOSE CUR_ROUNDING_ID;
    LN_CENVAT_ROUNDED_BAL := 0;
    IF LN_ROUNDING_ID IS NOT NULL AND LN_ROUNDING_ID <> -99999 THEN
      OPEN CUR_CENVAT;
      FETCH CUR_CENVAT
       INTO LN_CENVAT,LN_ROUNDED_ADDCVD,LN_CENVAT_ROUNDED_BAL;
      CLOSE CUR_CENVAT;
    ELSE
      LN_CENVAT := CENVAT_CREDIT_TAKEN;
      LN_ROUNDED_ADDCVD := ADDITIONAL_CVD;
    END IF;
    CP_BALANCE_CREDIT := BALANCE_CREDIT + LN_CENVAT_ROUNDED_BAL;
    CP_ADDITIONAL_CVD := NVL(LN_ROUNDED_ADDCVD
                            ,0);
    RETURN LN_CENVAT;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END CF_CENVAT_CREDIT_TAKENFORMULA;
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;
  FUNCTION CF_SH_CESS_CREDIT_TAKENFORMULA(REGISTER_ID IN NUMBER
                                         ,EXCISE_INVOICE_NO IN VARCHAR2) RETURN NUMBER IS
    LN_ROUNDING_ID NUMBER;
    LN_SH_EXCISE NUMBER;
    LN_SH_EXCISE_ROUNDED_BAL NUMBER;
    CURSOR CUR_ROUNDING_ID IS
      SELECT
        ROUNDING_ID
      FROM
        JAI_CMN_RG_23AC_II_TRXS
      WHERE REGISTER_ID = REGISTER_ID;
    CURSOR CUR_EXCISE IS
      SELECT
        ROUNDED_SH_EXCISE_EDU_CESS + ROUNDED_SH_CVD_EDU_CESS,
        ( SH_EXCISE_EDU_CESS + SH_CVD_EDU_CESS - ROUNDED_SH_EXCISE_EDU_CESS - ROUNDED_SH_CVD_EDU_CESS ) BAL
      FROM
        JAI_CMN_RG_ROUND_HDRS
      WHERE EXCISE_INVOICE_NO = EXCISE_INVOICE_NO
        AND ROUNDING_ID = LN_ROUNDING_ID;
    CURSOR CUR_RG_EXCISE IS
      SELECT
        NVL(SUM(CREDIT)
           ,0)
      FROM
        JAI_CMN_RG_OTHERS
      WHERE SOURCE_REGISTER_ID = REGISTER_ID
        AND SOURCE_TYPE = 1
        AND TAX_TYPE in ( 'EXCISE_SH_EDU_CESS' , 'CVD_SH_EDU_CESS' );
  BEGIN
    OPEN CUR_ROUNDING_ID;
    FETCH CUR_ROUNDING_ID
     INTO LN_ROUNDING_ID;
    CLOSE CUR_ROUNDING_ID;
    LN_SH_EXCISE_ROUNDED_BAL := 0;
    IF NVL(LN_ROUNDING_ID
       ,0) <> 0 AND LN_ROUNDING_ID <> -99999 THEN
      OPEN CUR_EXCISE;
      FETCH CUR_EXCISE
       INTO LN_SH_EXCISE,LN_SH_EXCISE_ROUNDED_BAL;
      CLOSE CUR_EXCISE;
    ELSE
      OPEN CUR_RG_EXCISE;
      FETCH CUR_RG_EXCISE
       INTO LN_SH_EXCISE;
      CLOSE CUR_RG_EXCISE;
    END IF;
    RETURN LN_SH_EXCISE;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END CF_SH_CESS_CREDIT_TAKENFORMULA;
  FUNCTION CF_QUANTITYFORMULA(TRANSACTION_ID IN NUMBER
                             ,QUANTITY IN NUMBER
                             ,REFERENCE_NUM IN VARCHAR2
                             ,DUTY_PAYABLE IN NUMBER
                             ,CF_CENVAT_CREDIT_TAKEN IN NUMBER
                             ,CF_CESS_CREDIT_TAKEN IN NUMBER
                             ,CF_SH_CESS_CREDIT_TAKEN IN NUMBER) RETURN NUMBER IS
    CURSOR C_CESS_AMOUNT IS
      SELECT
        SUM(NVL(CREDIT
               ,0))
      FROM
        JAI_CMN_RG_OTHERS
      WHERE SOURCE_TYPE = 4
        AND SOURCE_REGISTER_ID = TRANSACTION_ID
        AND TAX_TYPE IN ( 'EXCISE_EDUCATION_CESS' , 'CVD_EDUCATION_CESS' );
    CURSOR C_SH_CESS_AMOUNT IS
      SELECT
        SUM(NVL(CREDIT
               ,0))
      FROM
        JAI_CMN_RG_OTHERS
      WHERE SOURCE_TYPE = 4
        AND SOURCE_REGISTER_ID = TRANSACTION_ID
        AND TAX_TYPE IN ( 'EXCISE_SH_EDU_CESS' , 'CVD_SH_EDU_CESS' );
    LN_CORRECTED_QTY NUMBER;
    LV_EXC_FLAG VARCHAR2(1);
    LN_REFERENCE_NUM NUMBER;
    LN_CESS_AMT NUMBER;
    LN_SH_CESS_AMT NUMBER;
  BEGIN
    LN_CORRECTED_QTY := NVL((QUANTITY + NULL)
                           ,0);
    BEGIN
      LN_REFERENCE_NUM := TO_NUMBER(REFERENCE_NUM);
      LV_EXC_FLAG := 'A';
      /*SRW.MESSAGE(1275
                 ,' reference_num:' || REFERENCE_NUM)*/NULL;
    EXCEPTION
      WHEN OTHERS THEN
        LV_EXC_FLAG := 'C';
        /*SRW.MESSAGE(1275
                   ,'Exception ' || SQLERRM || ' occurred and is handled')*/NULL;
        /*SRW.MESSAGE(1275
                   ,' reference_num:' || REFERENCE_NUM)*/NULL;
    END;
    OPEN C_CESS_AMOUNT;
    FETCH C_CESS_AMOUNT
     INTO LN_CESS_AMT;
    CLOSE C_CESS_AMOUNT;
    OPEN C_SH_CESS_AMOUNT;
    FETCH C_SH_CESS_AMOUNT
     INTO LN_SH_CESS_AMT;
    CLOSE C_SH_CESS_AMOUNT;
    IF LV_EXC_FLAG = 'A' THEN
      LN_CORRECTED_QTY := QUANTITY - LN_CORRECTED_QTY;
      CP_DUTY_PAYABLE := ROUND(DUTY_PAYABLE * (LN_CORRECTED_QTY / QUANTITY));
      CP_CESS_PAYABLE := ROUND(LN_CESS_AMT * (LN_CORRECTED_QTY / QUANTITY));
      CP_SH_CESS_PAYABLE := ROUND(LN_SH_CESS_AMT * (LN_CORRECTED_QTY / QUANTITY));
      CP_CENVAT_CREDIT_TAKEN := CP_DUTY_PAYABLE;
      CP_CESS_CREDIT_TAKEN := CP_CESS_PAYABLE;
      CP_SH_CESS_CREDIT_TAKEN := CP_SH_CESS_PAYABLE;
    ELSIF LV_EXC_FLAG = 'C' THEN
      CP_DUTY_PAYABLE := ROUND(DUTY_PAYABLE * (LN_CORRECTED_QTY / QUANTITY));
      CP_CESS_PAYABLE := ROUND(LN_CESS_AMT * (LN_CORRECTED_QTY / QUANTITY));
      CP_SH_CESS_PAYABLE := ROUND(LN_SH_CESS_AMT * (LN_CORRECTED_QTY / QUANTITY));
      CP_CENVAT_CREDIT_TAKEN := ROUND(CF_CENVAT_CREDIT_TAKEN * (LN_CORRECTED_QTY / QUANTITY));
      CP_ADDITIONAL_CVD := ROUND(CP_ADDITIONAL_CVD * (LN_CORRECTED_QTY / QUANTITY));
      CP_CESS_CREDIT_TAKEN := ROUND(CF_CESS_CREDIT_TAKEN * (LN_CORRECTED_QTY / QUANTITY));
      CP_SH_CESS_CREDIT_TAKEN := ROUND(CF_SH_CESS_CREDIT_TAKEN * (LN_CORRECTED_QTY / QUANTITY));
    END IF;
    CP_BALANCE_CREDIT := CP_DUTY_PAYABLE - CP_CENVAT_CREDIT_TAKEN - CP_ADDITIONAL_CVD;
    CP_BALANCE_CESS := CP_CESS_PAYABLE - CP_CESS_CREDIT_TAKEN;
    CP_BALANCE_SH_CESS := CP_SH_CESS_PAYABLE - CP_SH_CESS_CREDIT_TAKEN;
    RETURN LN_CORRECTED_QTY;
  END CF_QUANTITYFORMULA;
  FUNCTION CP_CENVAT_CREDIT_TAKEN_P RETURN NUMBER IS
  BEGIN
    RETURN CP_CENVAT_CREDIT_TAKEN;
  END CP_CENVAT_CREDIT_TAKEN_P;
  FUNCTION CP_DUTY_PAYABLE_P RETURN NUMBER IS
  BEGIN
    RETURN CP_DUTY_PAYABLE;
  END CP_DUTY_PAYABLE_P;
  FUNCTION CP_BALANCE_CESS_P RETURN NUMBER IS
  BEGIN
    RETURN CP_BALANCE_CESS;
  END CP_BALANCE_CESS_P;
  FUNCTION CP_BALANCE_CREDIT_P RETURN NUMBER IS
  BEGIN
    RETURN CP_BALANCE_CREDIT;
  END CP_BALANCE_CREDIT_P;
  FUNCTION CP_BALANCE_SH_CESS_P RETURN NUMBER IS
  BEGIN
    RETURN CP_BALANCE_SH_CESS;
  END CP_BALANCE_SH_CESS_P;
  FUNCTION CP_ADDITIONAL_CVD_P RETURN NUMBER IS
  BEGIN
    RETURN CP_ADDITIONAL_CVD;
  END CP_ADDITIONAL_CVD_P;
  FUNCTION CP_CESS_PAYABLE_P RETURN NUMBER IS
  BEGIN
    RETURN CP_CESS_PAYABLE;
  END CP_CESS_PAYABLE_P;
  FUNCTION CP_SH_CESS_PAYABLE_P RETURN NUMBER IS
  BEGIN
    RETURN CP_SH_CESS_PAYABLE;
  END CP_SH_CESS_PAYABLE_P;
  FUNCTION CP_CESS_CREDIT_TAKEN_P RETURN NUMBER IS
  BEGIN
    RETURN CP_CESS_CREDIT_TAKEN;
  END CP_CESS_CREDIT_TAKEN_P;
  FUNCTION CP_SH_CESS_CREDIT_TAKEN_P RETURN NUMBER IS
  BEGIN
    RETURN CP_SH_CESS_CREDIT_TAKEN;
  END CP_SH_CESS_CREDIT_TAKEN_P;
END JA_JAINCVAT_XMLP_PKG;



/
