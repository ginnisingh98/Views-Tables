--------------------------------------------------------
--  DDL for Package Body CS_SR_RESOLUTION_CODE_MAP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."CS_SR_RESOLUTION_CODE_MAP_PKG" as
/* $Header: csrcmapb.pls 120.0 2006/03/01 17:39:45 aseethep noship $ */

procedure INSERT_ROW (
  PX_RESOLUTION_MAP_ID IN OUT NOCOPY  NUMBER,
  P_INCIDENT_TYPE_ID in NUMBER,
  P_INVENTORY_ITEM_ID in NUMBER,
  P_ORGANIZATION_ID in NUMBER,
  P_CATEGORY_ID in NUMBER,
  P_PROBLEM_CODE in VARCHAR2,
  P_START_DATE_ACTIVE in DATE,
  P_END_DATE_ACTIVE in DATE,
  P_OBJECT_VERSION_NUMBER in NUMBER,
  P_ATTRIBUTE1 in VARCHAR2,
  P_ATTRIBUTE2 in VARCHAR2,
  P_ATTRIBUTE3 in VARCHAR2,
  P_ATTRIBUTE4 in VARCHAR2,
  P_ATTRIBUTE5 in VARCHAR2,
  P_ATTRIBUTE6 in VARCHAR2,
  P_ATTRIBUTE7 in VARCHAR2,
  P_ATTRIBUTE8 in VARCHAR2,
  P_ATTRIBUTE9 in VARCHAR2,
  P_ATTRIBUTE10 in VARCHAR2,
  P_ATTRIBUTE11 in VARCHAR2,
  P_ATTRIBUTE12 in VARCHAR2,
  P_ATTRIBUTE13 in VARCHAR2,
  P_ATTRIBUTE14 in VARCHAR2,
  P_ATTRIBUTE15 in VARCHAR2,
  P_ATTRIBUTE_CATEGORY in VARCHAR2,
  P_CREATION_DATE in DATE,
  P_CREATED_BY in NUMBER,
  P_LAST_UPDATE_DATE in DATE,
  P_LAST_UPDATED_BY in NUMBER,
  P_LAST_UPDATE_LOGIN in NUMBER,
  X_RETURN_STATUS	        OUT NOCOPY   VARCHAR2,
  X_MSG_COUNT		OUT NOCOPY   NUMBER,
  X_MSG_DATA		OUT NOCOPY   VARCHAR2
)
is
   cursor c1 is
   select cs_sr_res_code_mapping_s.nextval
   from dual;

BEGIN
   if ( PX_RESOLUTION_MAP_ID IS NULL ) OR ( PX_RESOLUTION_MAP_ID = FND_API.G_MISS_NUM) THEN
      open c1;
      fetch c1 into PX_RESOLUTION_MAP_ID;
      close c1;
   end if;

  insert into CS_SR_RES_CODE_MAPPING (
    RESOLUTION_MAP_ID,
    INCIDENT_TYPE_ID,
    INVENTORY_ITEM_ID,
    ORGANIZATION_ID,
    CATEGORY_ID,
    PROBLEM_CODE,
    START_DATE_ACTIVE,
    END_DATE_ACTIVE,
    OBJECT_VERSION_NUMBER,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_LOGIN,
    ATTRIBUTE1,
    ATTRIBUTE2,
    ATTRIBUTE3,
    ATTRIBUTE4,
    ATTRIBUTE5,
    ATTRIBUTE6,
    ATTRIBUTE7,
    ATTRIBUTE8,
    ATTRIBUTE9,
    ATTRIBUTE10,
    ATTRIBUTE11,
    ATTRIBUTE12,
    ATTRIBUTE13,
    ATTRIBUTE14,
    ATTRIBUTE15,
    ATTRIBUTE_CATEGORY
  ) values (
    PX_RESOLUTION_MAP_ID,
    P_INCIDENT_TYPE_ID,
    P_INVENTORY_ITEM_ID,
    P_ORGANIZATION_ID,
    P_CATEGORY_ID,
    P_PROBLEM_CODE,
    P_START_DATE_ACTIVE,
    P_END_DATE_ACTIVE,
    P_OBJECT_VERSION_NUMBER,
    P_LAST_UPDATE_DATE,
    P_LAST_UPDATED_BY,
    P_CREATION_DATE,
    P_CREATED_BY,
    P_LAST_UPDATE_LOGIN,
    P_ATTRIBUTE1,
    P_ATTRIBUTE2,
    P_ATTRIBUTE3,
    P_ATTRIBUTE4,
    P_ATTRIBUTE5,
    P_ATTRIBUTE6,
    P_ATTRIBUTE7,
    P_ATTRIBUTE8,
    P_ATTRIBUTE9,
    P_ATTRIBUTE10,
    P_ATTRIBUTE11,
    P_ATTRIBUTE12,
    P_ATTRIBUTE13,
    P_ATTRIBUTE14,
    P_ATTRIBUTE15,
    P_ATTRIBUTE_CATEGORY);
end INSERT_ROW;


procedure LOCK_ROW (
  P_RESOLUTION_MAP_ID in NUMBER,
  P_INCIDENT_TYPE_ID in NUMBER,
  P_INVENTORY_ITEM_ID in NUMBER,
  P_ORGANIZATION_ID in NUMBER,
  P_CATEGORY_ID in NUMBER,
  P_PROBLEM_CODE in VARCHAR2,
  P_START_DATE_ACTIVE in DATE,
  P_END_DATE_ACTIVE in DATE,
  P_OBJECT_VERSION_NUMBER in NUMBER,
  P_ATTRIBUTE1 in VARCHAR2,
  P_ATTRIBUTE2 in VARCHAR2,
  P_ATTRIBUTE3 in VARCHAR2,
  P_ATTRIBUTE4 in VARCHAR2,
  P_ATTRIBUTE5 in VARCHAR2,
  P_ATTRIBUTE6 in VARCHAR2,
  P_ATTRIBUTE7 in VARCHAR2,
  P_ATTRIBUTE8 in VARCHAR2,
  P_ATTRIBUTE9 in VARCHAR2,
  P_ATTRIBUTE10 in VARCHAR2,
  P_ATTRIBUTE11 in VARCHAR2,
  P_ATTRIBUTE12 in VARCHAR2,
  P_ATTRIBUTE13 in VARCHAR2,
  P_ATTRIBUTE14 in VARCHAR2,
  P_ATTRIBUTE15 in VARCHAR2,
  P_ATTRIBUTE_CATEGORY in VARCHAR2
) is
  cursor c1 is select
      RESOLUTION_MAP_ID,
      INCIDENT_TYPE_ID,
      INVENTORY_ITEM_ID,
      ORGANIZATION_ID,
      CATEGORY_ID,
      PROBLEM_CODE,
      START_DATE_ACTIVE,
      END_DATE_ACTIVE,
      OBJECT_VERSION_NUMBER,
      ATTRIBUTE1,
      ATTRIBUTE2,
      ATTRIBUTE3,
      ATTRIBUTE4,
      ATTRIBUTE5,
      ATTRIBUTE6,
      ATTRIBUTE7,
      ATTRIBUTE8,
      ATTRIBUTE9,
      ATTRIBUTE10,
      ATTRIBUTE11,
      ATTRIBUTE12,
      ATTRIBUTE13,
      ATTRIBUTE14,
      ATTRIBUTE15,
      ATTRIBUTE_CATEGORY
    from CS_SR_RES_CODE_MAPPING
    where RESOLUTION_MAP_ID = P_RESOLUTION_MAP_ID
    for update of RESOLUTION_MAP_ID nowait;
begin
  for tlinfo in c1 loop
      if (    (tlinfo.RESOLUTION_MAP_ID = P_RESOLUTION_MAP_ID)
          AND ((tlinfo.INCIDENT_TYPE_ID = P_INCIDENT_TYPE_ID)
               OR ((tlinfo.INCIDENT_TYPE_ID is null) AND (P_INCIDENT_TYPE_ID is null)))
          AND ((tlinfo.INVENTORY_ITEM_ID = P_INVENTORY_ITEM_ID)
               OR ((tlinfo.INVENTORY_ITEM_ID is null) AND (P_INVENTORY_ITEM_ID is null)))
          AND ((tlinfo.ORGANIZATION_ID = P_ORGANIZATION_ID)
               OR ((tlinfo.ORGANIZATION_ID is null) AND (P_ORGANIZATION_ID is null)))
          AND ((tlinfo.CATEGORY_ID = P_CATEGORY_ID)
               OR ((tlinfo.CATEGORY_ID is null) AND (P_CATEGORY_ID is null)))
          AND ((tlinfo.PROBLEM_CODE = P_PROBLEM_CODE)
               OR ((tlinfo.PROBLEM_CODE is null) AND (P_PROBLEM_CODE is null)))
          AND ((tlinfo.START_DATE_ACTIVE = P_START_DATE_ACTIVE)
               OR ((tlinfo.START_DATE_ACTIVE is null) AND (P_START_DATE_ACTIVE is null)))
          AND ((tlinfo.END_DATE_ACTIVE = P_END_DATE_ACTIVE)
               OR ((tlinfo.END_DATE_ACTIVE is null) AND (P_END_DATE_ACTIVE is null)))
          AND ((tlinfo.OBJECT_VERSION_NUMBER = P_OBJECT_VERSION_NUMBER)
               OR ((tlinfo.OBJECT_VERSION_NUMBER is null) AND (P_OBJECT_VERSION_NUMBER is null)))
          AND ((tlinfo.ATTRIBUTE1 = P_ATTRIBUTE1)
               OR ((tlinfo.ATTRIBUTE1 is null) AND (P_ATTRIBUTE1 is null)))
          AND ((tlinfo.ATTRIBUTE2 = P_ATTRIBUTE2)
               OR ((tlinfo.ATTRIBUTE2 is null) AND (P_ATTRIBUTE2 is null)))
          AND ((tlinfo.ATTRIBUTE3 = P_ATTRIBUTE3)
               OR ((tlinfo.ATTRIBUTE3 is null) AND (P_ATTRIBUTE3 is null)))
          AND ((tlinfo.ATTRIBUTE4 = P_ATTRIBUTE4)
               OR ((tlinfo.ATTRIBUTE4 is null) AND (P_ATTRIBUTE4 is null)))
          AND ((tlinfo.ATTRIBUTE5 = P_ATTRIBUTE5)
               OR ((tlinfo.ATTRIBUTE5 is null) AND (P_ATTRIBUTE5 is null)))
          AND ((tlinfo.ATTRIBUTE6 = P_ATTRIBUTE6)
               OR ((tlinfo.ATTRIBUTE6 is null) AND (P_ATTRIBUTE6 is null)))
          AND ((tlinfo.ATTRIBUTE7 = P_ATTRIBUTE7)
               OR ((tlinfo.ATTRIBUTE7 is null) AND (P_ATTRIBUTE7 is null)))
          AND ((tlinfo.ATTRIBUTE8 = P_ATTRIBUTE8)
               OR ((tlinfo.ATTRIBUTE8 is null) AND (P_ATTRIBUTE8 is null)))
          AND ((tlinfo.ATTRIBUTE9 = P_ATTRIBUTE9)
               OR ((tlinfo.ATTRIBUTE9 is null) AND (P_ATTRIBUTE9 is null)))
          AND ((tlinfo.ATTRIBUTE10 = P_ATTRIBUTE10)
               OR ((tlinfo.ATTRIBUTE10 is null) AND (P_ATTRIBUTE10 is null)))
          AND ((tlinfo.ATTRIBUTE11 = P_ATTRIBUTE11)
               OR ((tlinfo.ATTRIBUTE11 is null) AND (P_ATTRIBUTE11 is null)))
          AND ((tlinfo.ATTRIBUTE12 = P_ATTRIBUTE12)
               OR ((tlinfo.ATTRIBUTE12 is null) AND (P_ATTRIBUTE12 is null)))
          AND ((tlinfo.ATTRIBUTE13 = P_ATTRIBUTE13)
               OR ((tlinfo.ATTRIBUTE13 is null) AND (P_ATTRIBUTE13 is null)))
          AND ((tlinfo.ATTRIBUTE14 = P_ATTRIBUTE14)
               OR ((tlinfo.ATTRIBUTE14 is null) AND (P_ATTRIBUTE14 is null)))
          AND ((tlinfo.ATTRIBUTE15 = P_ATTRIBUTE15)
               OR ((tlinfo.ATTRIBUTE15 is null) AND (P_ATTRIBUTE15 is null)))
          AND ((tlinfo.ATTRIBUTE_CATEGORY = P_ATTRIBUTE_CATEGORY)
               OR ((tlinfo.ATTRIBUTE_CATEGORY is null) AND (P_ATTRIBUTE_CATEGORY is null)))
      ) then
        null;
      else
        fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
        app_exception.raise_exception;
      end if;
  end loop;
  return;
end LOCK_ROW;

procedure UPDATE_ROW (
  P_RESOLUTION_MAP_ID in NUMBER,
  P_INCIDENT_TYPE_ID in NUMBER,
  P_INVENTORY_ITEM_ID in NUMBER,
  P_ORGANIZATION_ID in NUMBER,
  P_CATEGORY_ID in NUMBER,
  P_PROBLEM_CODE in VARCHAR2,
  P_START_DATE_ACTIVE in DATE,
  P_END_DATE_ACTIVE in DATE,
  P_OBJECT_VERSION_NUMBER in NUMBER,
  P_ATTRIBUTE1 in VARCHAR2,
  P_ATTRIBUTE2 in VARCHAR2,
  P_ATTRIBUTE3 in VARCHAR2,
  P_ATTRIBUTE4 in VARCHAR2,
  P_ATTRIBUTE5 in VARCHAR2,
  P_ATTRIBUTE6 in VARCHAR2,
  P_ATTRIBUTE7 in VARCHAR2,
  P_ATTRIBUTE8 in VARCHAR2,
  P_ATTRIBUTE9 in VARCHAR2,
  P_ATTRIBUTE10 in VARCHAR2,
  P_ATTRIBUTE11 in VARCHAR2,
  P_ATTRIBUTE12 in VARCHAR2,
  P_ATTRIBUTE13 in VARCHAR2,
  P_ATTRIBUTE14 in VARCHAR2,
  P_ATTRIBUTE15 in VARCHAR2,
  P_ATTRIBUTE_CATEGORY in VARCHAR2,
  P_LAST_UPDATE_DATE in DATE,
  P_LAST_UPDATED_BY in NUMBER,
  P_LAST_UPDATE_LOGIN in NUMBER,
  X_RETURN_STATUS	        OUT NOCOPY   VARCHAR2,
  X_MSG_COUNT		OUT NOCOPY   NUMBER,
  X_MSG_DATA		OUT NOCOPY   VARCHAR2
) is
begin
  update CS_SR_RES_CODE_MAPPING set
    INCIDENT_TYPE_ID = P_INCIDENT_TYPE_ID,
    INVENTORY_ITEM_ID = P_INVENTORY_ITEM_ID,
    ORGANIZATION_ID = P_ORGANIZATION_ID,
    CATEGORY_ID = P_CATEGORY_ID,
    PROBLEM_CODE = P_PROBLEM_CODE,
    START_DATE_ACTIVE = P_START_DATE_ACTIVE,
    END_DATE_ACTIVE = P_END_DATE_ACTIVE,
    OBJECT_VERSION_NUMBER = P_OBJECT_VERSION_NUMBER,
    ATTRIBUTE1 = P_ATTRIBUTE1,
    ATTRIBUTE2 = P_ATTRIBUTE2,
    ATTRIBUTE3 = P_ATTRIBUTE3,
    ATTRIBUTE4 = P_ATTRIBUTE4,
    ATTRIBUTE5 = P_ATTRIBUTE5,
    ATTRIBUTE6 = P_ATTRIBUTE6,
    ATTRIBUTE7 = P_ATTRIBUTE7,
    ATTRIBUTE8 = P_ATTRIBUTE8,
    ATTRIBUTE9 = P_ATTRIBUTE9,
    ATTRIBUTE10 = P_ATTRIBUTE10,
    ATTRIBUTE11 = P_ATTRIBUTE11,
    ATTRIBUTE12 = P_ATTRIBUTE12,
    ATTRIBUTE13 = P_ATTRIBUTE13,
    ATTRIBUTE14 = P_ATTRIBUTE14,
    ATTRIBUTE15 = P_ATTRIBUTE15,
    ATTRIBUTE_CATEGORY = P_ATTRIBUTE_CATEGORY,
    LAST_UPDATE_DATE = P_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = P_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = P_LAST_UPDATE_LOGIN
  where RESOLUTION_MAP_ID = P_RESOLUTION_MAP_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;
end UPDATE_ROW;

procedure DELETE_ROW (
  P_RESOLUTION_MAP_ID in NUMBER
) is
begin
  delete from CS_SR_RES_CODE_MAPPING
  where RESOLUTION_MAP_ID = P_RESOLUTION_MAP_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

end DELETE_ROW;



end CS_SR_RESOLUTION_CODE_MAP_PKG;

/
