--------------------------------------------------------
--  DDL for Package Body GMF_GMFLCHST_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."GMF_GMFLCHST_XMLP_PKG" AS
/* $Header: GMFLCHSTB.pls 120.0.12010000.2 2009/08/18 18:41:00 pmarada ship $ */
  FUNCTION AFTERPFORM RETURN BOOLEAN IS
    CURSOR CUR_GET_CURRENCY IS
      SELECT
        BASE_CURRENCY_CODE
      FROM
        GMF_FISCAL_POLICIES
      WHERE LEGAL_ENTITY_ID = P_LEGAL_ENTITY_ID;
    L_CURRENCY VARCHAR2(15);
x   boolean;
  BEGIN
     P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
 x:= BEFOREPFORM;
    P_FRM_ORGN := GMF_UTILITIES_GRP.GET_ORGANIZATION_CODE(P_FROM_ORGANIZATION_ID);
    P_TO_ORGN := GMF_UTILITIES_GRP.GET_ORGANIZATION_CODE(P_TO_ORGANIZATION_ID);
    P_FRM_ITEM := GMF_UTILITIES_GRP.GET_ITEM_NUMBER(P_FROM_ITEM_ID
                                                   ,P_ORGANIZATION_CONTEXT);
    P_TO_ITEM := GMF_UTILITIES_GRP.GET_ITEM_NUMBER(P_TO_ITEM_ID
                                                  ,P_ORGANIZATION_CONTEXT);
    P_FROM_COST_CATEGORY := GMF_UTILITIES_GRP.GET_COST_CATEGORY(P_FROM_COST_CATEGORY_ID);
    P_TO_COST_CATEGORY := GMF_UTILITIES_GRP.GET_COST_CATEGORY(P_TO_COST_CATEGORY_ID);
    OPEN CUR_GET_CURRENCY;
    FETCH CUR_GET_CURRENCY
     INTO L_CURRENCY;
    CLOSE CUR_GET_CURRENCY;
    IF (L_CURRENCY = P_CURRENCY_CODE OR P_CURRENCY_CODE IS NULL) THEN
      P_CURRENCY_CODE_1 := L_CURRENCY;
      P_EXCHANGE_RATE_1 := 1;
    ELSE
      IF (P_EXCHANGE_RATE IS NULL) THEN
        FND_MESSAGE.SET_NAME('GMF'
                            ,'GMF_SRS_EFC_NO_XCHG');
        /*SRW.MESSAGE(100
                   ,FND_MESSAGE.GET)*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      END IF;
    END IF;
    IF (P_FRM_ITEM IS NOT NULL AND P_FRM_ITEM > P_TO_ITEM AND P_FRM_ITEM IS NOT NULL) THEN
      FND_MESSAGE.SET_NAME('GMF'
                          ,'CM_BAD_TO_ITEM_NO');
      /*SRW.MESSAGE(100
                 ,FND_MESSAGE.GET)*/NULL;
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END IF;
    IF (P_FRM_ORGN IS NOT NULL AND P_FRM_ORGN > P_TO_ORGN AND P_TO_ORGN IS NOT NULL) THEN
      FND_MESSAGE.SET_NAME('GMF'
                          ,'CM_BAD_TO_ITEM_NO');
      /*SRW.MESSAGE(100
                 ,FND_MESSAGE.GET)*/NULL;
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END IF;
    IF (P_FROM_COST_CATEGORY > P_TO_COST_CATEGORY AND P_FROM_COST_CATEGORY IS NOT NULL AND P_TO_COST_CATEGORY IS NOT NULL) THEN
      FND_MESSAGE.SET_NAME('GMF'
                          ,'CM_BAD_TO_ITEMCOST_CLS');
      /*SRW.MESSAGE(100
                 ,FND_MESSAGE.GET)*/NULL;
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END IF;
    IF (P_FROM_LOT > P_TO_LOT AND P_FROM_LOT IS NOT NULL AND P_TO_LOT IS NOT NULL) THEN
      FND_MESSAGE.SET_NAME('GMF'
                          ,'GMF_LOT_RANGE_ERR');
      /*SRW.MESSAGE(100
                 ,FND_MESSAGE.GET)*/NULL;
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END IF;
    IF (P_L_FRM_DATE > P_L_TO_DATE AND P_L_FRM_DATE IS NOT NULL AND P_L_TO_DATE IS NOT NULL) THEN
      FND_MESSAGE.SET_NAME('GMF'
                          ,'GMF_DATE_RANGE_ERR');
      /*SRW.MESSAGE(100
                 ,FND_MESSAGE.GET)*/NULL;
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;
  FUNCTION BEFOREPFORM RETURN BOOLEAN IS
  BEGIN
    P_L_FRM_DATE := FND_DATE.CANONICAL_TO_DATE(P_FRM_DATE);
    P_L_TO_DATE := FND_DATE.CANONICAL_TO_DATE(P_TO_DATE);
    P_L_FRM_DATE_v := to_Char(P_L_FRM_DATE,'DD-MON-YY');
    P_L_TO_DATE_v := to_char(P_L_TO_DATE,'DD-MON-YY');
    RETURN (TRUE);
  END BEFOREPFORM;
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    CP_FORMAT_MASK := FND_CURRENCY.GET_FORMAT_MASK(P_CURRENCY_CODE_1
                                                  ,25);
    FND_MESSAGE.SET_NAME('GMF'
                        ,'GMF_ADJUSTMENT');
    CP_COST_ADJUSTMENT_TEXT := FND_MESSAGE.GET;
    FND_MESSAGE.SET_NAME('GMF'
                        ,'GMF_INV_ADJUSTMENT');
    CP_INV_ADJUSTMENT_TEXT := FND_MESSAGE.GET;
    FND_MESSAGE.SET_NAME('GMF'
                        ,'GMF_SALES_ORDER');
    CP_SO_TEXT := FND_MESSAGE.GET;
    FND_MESSAGE.SET_NAME('GMF'
                        ,'GMF_BILL_ONLY_SALES_ORDER');
    CP_BILL_ONLY_SO_TEXT := FND_MESSAGE.GET;
    FND_MESSAGE.SET_NAME('GMF'
                        ,'GMF_DROP_SHIP_SALES_ORDER');
    CP_DROP_SHIP_SO_TEXT := FND_MESSAGE.GET;
    FND_MESSAGE.SET_NAME('GMF'
                        ,'GMF_RECEIPT');
    CP_RECEIPT_TEXT := FND_MESSAGE.GET;
    FND_MESSAGE.SET_NAME('GMD'
                        ,'GMD_SAMPLE_PROD');
    CP_PROD_TEXT := FND_MESSAGE.GET;
    FND_MESSAGE.SET_NAME('GMD'
                        ,'GMF_TRANSFER');
    CP_XFER_TEXT := FND_MESSAGE.GET;
     -- LCM/OPM Integration
    FND_MESSAGE.SET_NAME('GMF','GMF_LC_ADJUSTMENT');
    CP_LC_ADJUSTMENT_TEXT := FND_MESSAGE.GET;

    RETURN (TRUE);
  END BEFOREREPORT;
  FUNCTION CF_SRC_TRANSFORMULA(DOC_ID IN NUMBER
                              ,LINE_ID IN NUMBER
                              ,DOC_TYPE IN VARCHAR2
                              ,ORGANIZATION_CODE IN VARCHAR2) RETURN CHAR IS
    L_TEXT VARCHAR2(100) := NULL;
    CURSOR CUR_GET_BTCH IS
      SELECT
        PLANT_CODE || ' ' || BATCH_NO
      FROM
        GME_BATCH_HEADER
      WHERE BATCH_ID = DOC_ID;
    CURSOR CUR_GET_RCV IS
      SELECT
        DISTINCT
        MP.ORGANIZATION_CODE || ' ' || R.RECEIPT_NUM
      FROM
        RCV_SHIPMENT_HEADERS R,
        MTL_MATERIAL_TRANSACTIONS P,
        MTL_PARAMETERS MP
      WHERE R.SHIPMENT_HEADER_ID = P.TRANSACTION_SOURCE_ID
        AND R.ORGANIZATION_ID = P.ORGANIZATION_ID
        AND P.TRANSACTION_SOURCE_ID = DOC_ID
        AND P.TRX_SOURCE_LINE_ID = LINE_ID
        AND MP.ORGANIZATION_ID = P.ORGANIZATION_ID;
    CURSOR CUR_GET_INV IS
      SELECT
        DISTINCT
        J.ORGN_CODE || ' ' || J.JOURNAL_NO
      FROM
        IC_JRNL_MST J,
        IC_ADJS_JNL D
      WHERE D.TRANS_TYPE = DOC_TYPE
        AND D.DOC_ID = DOC_ID
        AND J.JOURNAL_ID = D.JOURNAL_ID;
    CURSOR CUR_GET_CYCL IS
      SELECT
        MP.ORGANIZATION_CODE || ' ' || MCC.COUNT_LIST_SEQUENCE
      FROM
        MTL_MATERIAL_TRANSACTIONS MTT,
        MTL_PARAMETERS MP,
        MTL_CYCLE_COUNT_ENTRIES MCC
      WHERE MTT.CYCLE_COUNT_ID = DOC_ID
        AND MP.ORGANIZATION_ID = MTT.ORGANIZATION_ID
        AND MCC.CYCLE_COUNT_ENTRY_ID = MTT.CYCLE_COUNT_ID;
    CURSOR CUR_GET_XFER IS
      SELECT
        MP.ORGANIZATION_CODE
      FROM
        MTL_MATERIAL_TRANSACTIONS MMT,
        MTL_PARAMETERS MP
      WHERE MMT.TRANSFER_TRANSACTION_ID = DOC_ID
        AND MP.ORGANIZATION_ID = MMT.ORGANIZATION_ID;
    CURSOR C_SO_DOC(P_DOC_ID IN NUMBER,P_LEGAL_ENTITY_ID IN NUMBER,P_LINE_ID IN NUMBER) IS
      SELECT
        DISTINCT
        MP.ORGANIZATION_CODE || ' ' || D.NAME
      FROM
        WSH_NEW_DELIVERIES D,
        MTL_MATERIAL_TRANSACTIONS T,
        WSH_DELIVERY_DETAILS WD,
        WSH_DELIVERY_ASSIGNMENTS WA,
        MTL_PARAMETERS MP,
        MTL_TXN_SOURCE_TYPES MTST,
        ORG_ORGANIZATION_DEFINITIONS OOD
      WHERE D.DELIVERY_ID = WA.DELIVERY_ID
        AND WA.DELIVERY_DETAIL_ID = WD.DELIVERY_DETAIL_ID
        AND OOD.LEGAL_ENTITY = P_LEGAL_ENTITY_ID
        AND T.TRANSACTION_SOURCE_ID = P_DOC_ID
        AND T.TRX_SOURCE_LINE_ID = P_LINE_ID
        AND MTST.TRANSACTION_SOURCE_TYPE_NAME = 'Sales Order'
        AND MTST.TRANSACTION_SOURCE_TYPE_ID = T.TRANSACTION_SOURCE_TYPE_ID
        AND T.ORGANIZATION_ID = MP.ORGANIZATION_ID
        AND OOD.ORGANIZATION_ID = T.ORGANIZATION_ID;
    CURSOR C_BILL_ONLY_SO_DOC(P_DOC_ID IN NUMBER,P_LEGAL_ENTITY_ID IN VARCHAR2,P_LINE_ID IN NUMBER) IS
      SELECT
        DISTINCT
        '(Bill-Only) ' || MP.ORGANIZATION_CODE || ' ' || OH.ORDER_NUMBER
      FROM
        MTL_PARAMETERS MP,
        MTL_MATERIAL_TRANSACTIONS T,
        OE_ORDER_HEADERS_ALL OH,
        OE_ORDER_LINES_ALL OL,
        MTL_TXN_SOURCE_TYPES MTST,
        ORG_ORGANIZATION_DEFINITIONS OOD
      WHERE OOD.LEGAL_ENTITY = P_LEGAL_ENTITY_ID
        AND MTST.TRANSACTION_SOURCE_TYPE_NAME = 'Sales Order'
        AND T.TRANSACTION_SOURCE_ID = P_DOC_ID
        AND T.TRX_SOURCE_LINE_ID = P_LINE_ID
        AND T.TRX_SOURCE_LINE_ID = OL.LINE_ID
        AND OH.HEADER_ID = OL.HEADER_ID
        AND OOD.ORGANIZATION_ID = T.ORGANIZATION_ID
        AND MTST.TRANSACTION_SOURCE_TYPE_ID = T.TRANSACTION_SOURCE_TYPE_ID;
    CURSOR C_DROP_SHIP_SO_DOC(P_DOC_ID IN NUMBER,P_LEGAL_ENTITY_ID IN VARCHAR2,P_LINE_ID IN NUMBER) IS
      SELECT
        DISTINCT
        '(Drop-Ship) ' || OOD.ORGANIZATION_CODE || ' ' || OH.ORDER_NUMBER
      FROM
        MTL_MATERIAL_TRANSACTIONS T,
        OE_ORDER_HEADERS_ALL OH,
        OE_ORDER_LINES_ALL OL,
        MTL_TXN_SOURCE_TYPES MTST,
        ORG_ORGANIZATION_DEFINITIONS OOD
      WHERE OOD.LEGAL_ENTITY = P_LEGAL_ENTITY_ID
        AND MTST.TRANSACTION_SOURCE_TYPE_NAME = 'Sales Order'
        AND T.TRANSACTION_SOURCE_ID = P_DOC_ID
        AND T.TRX_SOURCE_LINE_ID = P_LINE_ID
        AND T.TRX_SOURCE_LINE_ID = OL.LINE_ID
        AND OH.HEADER_ID = OL.HEADER_ID
        AND OOD.ORGANIZATION_ID = T.ORGANIZATION_ID
        AND MTST.TRANSACTION_SOURCE_TYPE_ID = T.TRANSACTION_SOURCE_TYPE_ID
        AND EXISTS (
        SELECT
          1
        FROM
          OE_DROP_SHIP_SOURCES S
        WHERE OL.LINE_ID = S.LINE_ID
          AND OL.HEADER_ID = S.HEADER_ID );
    CURSOR CUR_GET_BOL_NO(P_LINE_ID IN NUMBER) IS
      SELECT
        DISTINCT
        B.ORGN_CODE || ' ' || B.BOL_NO
      FROM
        OP_ORDR_DTL D,
        OP_BILL_LAD B
      WHERE D.LINE_ID = P_LINE_ID
        AND D.BOL_ID = B.BOL_ID;

       --LCM-OPM Integration, bug 8642337
   CURSOR cur_lc_det (l_adj_transaction_id NUMBER)
   IS
       SELECT rsh.receipt_num, glat.lc_ship_num
       FROM  gmf_lc_adj_transactions glat,
             rcv_transactions rt,
             rcv_shipment_headers rsh
       WHERE glat.rcv_transaction_id = rt.transaction_id
       AND   rsh.shipment_header_id  = rt.shipment_header_id
       AND   glat.adj_transaction_id = l_adj_transaction_id  ;

   l_receipt_num     rcv_shipment_headers.receipt_num%TYPE;
   l_lc_ship_num     gmf_lc_adj_transactions.lc_ship_num%TYPE;

  BEGIN
    IF (DOC_TYPE = 'PROD') THEN
      OPEN CUR_GET_BTCH;
      FETCH CUR_GET_BTCH
       INTO L_TEXT;
      CLOSE CUR_GET_BTCH;
      L_TEXT := CP_PROD_TEXT || ',' || L_TEXT;
    ELSIF (DOC_TYPE = 'PORC') THEN
      OPEN CUR_GET_RCV;
      FETCH CUR_GET_RCV
       INTO L_TEXT;
      CLOSE CUR_GET_RCV;
      L_TEXT := CP_RECEIPT_TEXT || ',' || L_TEXT;
    ELSIF (DOC_TYPE in ('CREI','ADJI','TRNI','ADJR','CRER','TRNR')) THEN
      OPEN CUR_GET_INV;
      FETCH CUR_GET_INV
       INTO L_TEXT;
      CLOSE CUR_GET_INV;
      L_TEXT := CP_INV_ADJUSTMENT_TEXT || ',' || L_TEXT;
    ELSIF (DOC_TYPE in ('PIPC','PIPH','PICY')) THEN
      OPEN CUR_GET_CYCL;
      FETCH CUR_GET_CYCL
       INTO L_TEXT;
      CLOSE CUR_GET_CYCL;
      L_TEXT := CP_INV_ADJUSTMENT_TEXT || ',' || L_TEXT;
    ELSIF (DOC_TYPE in ('OPSO')) THEN
      OPEN CUR_GET_BOL_NO(LINE_ID);
      FETCH CUR_GET_BOL_NO
       INTO L_TEXT;
      CLOSE CUR_GET_BOL_NO;
      L_TEXT := CP_SO_TEXT || ',' || L_TEXT;
    ELSIF (DOC_TYPE = 'OMSO') THEN
      OPEN C_SO_DOC(DOC_ID,P_LEGAL_ENTITY_ID,LINE_ID);
      FETCH C_SO_DOC
       INTO L_TEXT;
      IF C_SO_DOC%NOTFOUND THEN
        CLOSE C_SO_DOC;
        OPEN C_BILL_ONLY_SO_DOC(DOC_ID,P_LEGAL_ENTITY_ID,LINE_ID);
        FETCH C_BILL_ONLY_SO_DOC
         INTO L_TEXT;
        IF C_BILL_ONLY_SO_DOC%NOTFOUND THEN
          CLOSE C_BILL_ONLY_SO_DOC;
          OPEN C_DROP_SHIP_SO_DOC(DOC_ID,P_LEGAL_ENTITY_ID,LINE_ID);
          FETCH C_DROP_SHIP_SO_DOC
           INTO L_TEXT;
          CLOSE C_DROP_SHIP_SO_DOC;
          L_TEXT := CP_DROP_SHIP_SO_TEXT || ',' || L_TEXT;
        ELSE
          CLOSE C_BILL_ONLY_SO_DOC;
          L_TEXT := CP_BILL_ONLY_SO_TEXT || ',' || L_TEXT;
        END IF;
      ELSE
        CLOSE C_SO_DOC;
        L_TEXT := CP_SO_TEXT || ',' || L_TEXT;
      END IF;
    ELSIF (DOC_TYPE = 'XFER') THEN
      OPEN CUR_GET_XFER;
      FETCH CUR_GET_XFER
       INTO L_TEXT;
      CLOSE CUR_GET_XFER;
      L_TEXT := CP_XFER_TEXT || ',' || L_TEXT;
    ELSIF (DOC_TYPE = 'LADJ') THEN
      L_TEXT := CP_COST_ADJUSTMENT_TEXT || ',' || ORGANIZATION_CODE || ' ' || LINE_ID;
     -- Landed cost Adjustment  LCM-OPM Integration
    ELSIF (DOC_TYPE = 'LCADJ') THEN
       OPEN cur_lc_det(LINE_ID);
       FETCH cur_lc_det INTO l_receipt_num, l_lc_ship_num;
       CLOSE cur_lc_det;
       l_text := CP_LC_ADJUSTMENT_TEXT ||','|| l_receipt_num || ' '|| l_lc_ship_num;
    ELSE
      L_TEXT := DOC_TYPE || ',' || ORGANIZATION_CODE;
    END IF;
    RETURN (L_TEXT);
  END CF_SRC_TRANSFORMULA;
  FUNCTION CF_SRC_ONHAND_VALUEFORMULA(NEW_UNIT_COST IN NUMBER
                                     ,NEW_ONHAND_QTY IN NUMBER) RETURN CHAR IS
  BEGIN
    RETURN (TO_CHAR(NEW_UNIT_COST * NEW_ONHAND_QTY
                  ,CP_FORMAT_MASK));
  END CF_SRC_ONHAND_VALUEFORMULA;
  FUNCTION CF_LEGAL_ENTITYFORMULA RETURN CHAR IS
    L_LEGAL_ENTITY_NAME VARCHAR2(240);
  BEGIN
    BEGIN
      SELECT
        LEGAL_ENTITY_NAME
      INTO L_LEGAL_ENTITY_NAME
      FROM
        GMF_LEGAL_ENTITIES
      WHERE LEGAL_ENTITY_ID = P_LEGAL_ENTITY_ID;
    EXCEPTION
      WHEN OTHERS THEN
        L_LEGAL_ENTITY_NAME := NULL;
    END;
    RETURN (L_LEGAL_ENTITY_NAME);
  END CF_LEGAL_ENTITYFORMULA;
  FUNCTION CF_COST_MTHDFORMULA RETURN VARCHAR2 IS
    L_COST_MTHD_CODE VARCHAR2(10);
  BEGIN
    BEGIN
      SELECT
        COST_MTHD_CODE
      INTO L_COST_MTHD_CODE
      FROM
        CM_MTHD_MST
      WHERE COST_TYPE_ID = P_COST_TYPE_ID;
    EXCEPTION
      WHEN OTHERS THEN
        L_COST_MTHD_CODE := NULL;
    END;
    RETURN (L_COST_MTHD_CODE);
  END CF_COST_MTHDFORMULA;
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;
  FUNCTION CP_INV_ADJUSTMENT_TEXT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_INV_ADJUSTMENT_TEXT;
  END CP_INV_ADJUSTMENT_TEXT_P;
  FUNCTION CP_COST_ADJUSTMENT_TEXT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_COST_ADJUSTMENT_TEXT;
  END CP_COST_ADJUSTMENT_TEXT_P;
  FUNCTION CP_SO_TEXT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_SO_TEXT;
  END CP_SO_TEXT_P;
  FUNCTION CP_BILL_ONLY_SO_TEXT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_BILL_ONLY_SO_TEXT;
  END CP_BILL_ONLY_SO_TEXT_P;
  FUNCTION CP_DROP_SHIP_SO_TEXT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_DROP_SHIP_SO_TEXT;
  END CP_DROP_SHIP_SO_TEXT_P;
  FUNCTION CP_RECEIPT_TEXT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_RECEIPT_TEXT;
  END CP_RECEIPT_TEXT_P;
  FUNCTION CP_PROD_TEXT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_PROD_TEXT;
  END CP_PROD_TEXT_P;
  FUNCTION CP_FORMAT_MASK_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_FORMAT_MASK;
  END CP_FORMAT_MASK_P;
  FUNCTION CP_XFER_TEXT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_XFER_TEXT;
  END CP_XFER_TEXT_P;
  FUNCTION CP_LC_ADJUSTMENT_TEXT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_LC_ADJUSTMENT_TEXT;
  END CP_LC_ADJUSTMENT_TEXT_P;

END GMF_GMFLCHST_XMLP_PKG;


/
