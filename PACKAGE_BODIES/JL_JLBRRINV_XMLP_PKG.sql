--------------------------------------------------------
--  DDL for Package Body JL_JLBRRINV_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JL_JLBRRINV_XMLP_PKG" AS
/* $Header: JLBRRINVB.pls 120.1 2007/12/25 16:41:59 dwkrishn noship $ */
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    EXCEPTION
      WHEN OTHERS THEN
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END AFTERREPORT;
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    BEGIN
      /*SRW.USER_EXIT('FND GETPROFILE
                                      NAME="ORG_ID"
                                      FIELD="H_OPERATION_UNIT"')*/NULL;
				         FND_PROFILE.GET('ORG_ID',H_OPERATION_UNIT);
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(20
                   ,'Failed in Profile Options Init.')*/NULL;
        RAISE;
    END;
    BEGIN
      H_SO_ORGANIZATION := FND_PROFILE.VALUE('SO_ORGANIZATION_ID');
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(20
                   ,'Failed in Profile Options Init.')*/NULL;
        RAISE;
    END;
    IF H_SO_ORGANIZATION IS NULL THEN
      H_SO_ORGANIZATION := H_OPERATION_UNIT;
    END IF;
    GET_BASE_CURR_DATA;
    IF (SET_P_WHERE <> TRUE) THEN
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END IF;
    RETURN (TRUE);
  END BEFOREREPORT;
  PROCEDURE GET_BASE_CURR_DATA IS
    BASE_CURR FND_CURRENCIES_VL.CURRENCY_CODE%TYPE;
    PREC FND_CURRENCIES_VL.PRECISION%TYPE;
  BEGIN
    BASE_CURR := '';
    PREC := 0;
    BEGIN
      SELECT
        FCURR.CURRENCY_CODE,
        FCURR.PRECISION
      INTO BASE_CURR,PREC
      FROM
        AR_SYSTEM_PARAMETERS ASP,
        FND_CURRENCIES_VL FCURR,
        GL_SETS_OF_BOOKS GSBKS
      WHERE ASP.SET_OF_BOOKS_ID = GSBKS.SET_OF_BOOKS_ID
        AND GSBKS.CURRENCY_CODE = FCURR.CURRENCY_CODE;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RAISE_ERR('200XX'
                 ,'JL_AR_FA_CURR_DET_NOT_DEFINED');
      WHEN OTHERS THEN
        RAISE_ORA_ERR('200XX');
    END;
    CP_BASE_CURRENCY_CODE := BASE_CURR;
    CP_BASE_PRECISION := PREC;
  END GET_BASE_CURR_DATA;
  PROCEDURE RAISE_ERR(ERRNO IN VARCHAR2
                     ,MSGNAME IN VARCHAR2) IS
    ERRMSG VARCHAR2(1000);
  BEGIN
    SET_NAME('JL'
            ,MSGNAME);
    ERRMSG := GET;
    /*SRW.MESSAGE(ERRNO
               ,ERRMSG)*/NULL;
    /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
  END RAISE_ERR;
  PROCEDURE RAISE_ORA_ERR(ERRNO IN VARCHAR2) IS
    ERRMSG VARCHAR2(1000);
  BEGIN
    ERRMSG := SQLERRM;
    /*SRW.MESSAGE(ERRNO
               ,ERRMSG)*/NULL;
    /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
  END RAISE_ORA_ERR;
  FUNCTION CF_ICMS_TAXFORMULA(C_DTL_TRX_LINE_ID IN NUMBER) RETURN NUMBER IS
    X_ICMS_TAX_RATE NUMBER;
    X_ICMS_TAX_AMOUNT NUMBER;
    X_ICMS_TAX_BASE_AMOUNT NUMBER;
  BEGIN
    BEGIN
      SELECT
        SUM(DECODE(ARVT.GLOBAL_ATTRIBUTE2
                  ,'Y'
                  ,RACTL.EXTENDED_AMOUNT
                  ,0)),
        SUM(DECODE(ARVT.GLOBAL_ATTRIBUTE2
                  ,'Y'
                  ,NVL(RACTL.TAX_RATE
                     ,0)
                  ,0)),
        SUM(DECODE(ARVT.GLOBAL_ATTRIBUTE2
                  ,'Y'
                  ,FND_NUMBER.CANONICAL_TO_NUMBER(RACTL.GLOBAL_ATTRIBUTE11)
                  ,0))
      INTO X_ICMS_TAX_AMOUNT,X_ICMS_TAX_RATE,X_ICMS_TAX_BASE_AMOUNT
      FROM
        RA_CUSTOMER_TRX_LINES RACTL,
        AR_VAT_TAX ARVT
      WHERE RACTL.LINE_TYPE = 'TAX'
        AND RACTL.LINK_TO_CUST_TRX_LINE_ID = C_DTL_TRX_LINE_ID
        AND ARVT.VAT_TAX_ID = RACTL.VAT_TAX_ID
        AND TO_NUMBER(ARVT.GLOBAL_ATTRIBUTE1) = 2;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
      WHEN OTHERS THEN
        NULL;
    END;
    CP_ICMS_TAX_BASE_AMOUNT := X_ICMS_TAX_BASE_AMOUNT;
    CP_ICMS_TAX_AMOUNT := X_ICMS_TAX_AMOUNT;
    RETURN (X_ICMS_TAX_RATE);
  END CF_ICMS_TAXFORMULA;
  FUNCTION CF_ISS_TAX_AMOUNTFORMULA(C_DTL_TRX_LINE_ID IN NUMBER) RETURN NUMBER IS
    X_ISS_TAX_AMOUNT NUMBER;
  BEGIN
    BEGIN
      SELECT
        SUM(DECODE(ARVT.GLOBAL_ATTRIBUTE2
                  ,'Y'
                  ,RACTL.EXTENDED_AMOUNT
                  ,0))
      INTO X_ISS_TAX_AMOUNT
      FROM
        RA_CUSTOMER_TRX_LINES RACTL,
        AR_VAT_TAX ARVT
      WHERE RACTL.LINE_TYPE = 'TAX'
        AND RACTL.LINK_TO_CUST_TRX_LINE_ID = C_DTL_TRX_LINE_ID
        AND ARVT.VAT_TAX_ID = RACTL.VAT_TAX_ID
        AND TO_NUMBER(ARVT.GLOBAL_ATTRIBUTE1) = 5;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
      WHEN OTHERS THEN
        NULL;
    END;
    RETURN (NVL(X_ISS_TAX_AMOUNT,0));
  END CF_ISS_TAX_AMOUNTFORMULA;
  FUNCTION CF_IRJ_TAX_AMOUNTFORMULA(C_DTL_TRX_LINE_ID IN NUMBER) RETURN NUMBER IS
    X_IRJ_TAX_AMOUNT NUMBER;
  BEGIN
    BEGIN
      SELECT
        SUM(DECODE(ARVT.GLOBAL_ATTRIBUTE2
                  ,'Y'
                  ,RACTL.EXTENDED_AMOUNT
                  ,0))
      INTO X_IRJ_TAX_AMOUNT
      FROM
        RA_CUSTOMER_TRX_LINES RACTL,
        AR_VAT_TAX ARVT
      WHERE RACTL.LINE_TYPE = 'TAX'
        AND RACTL.LINK_TO_CUST_TRX_LINE_ID = C_DTL_TRX_LINE_ID
        AND ARVT.VAT_TAX_ID = RACTL.VAT_TAX_ID
        AND TO_NUMBER(ARVT.GLOBAL_ATTRIBUTE1) = 4;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
      WHEN OTHERS THEN
        NULL;
    END;
    RETURN (X_IRJ_TAX_AMOUNT);
  END CF_IRJ_TAX_AMOUNTFORMULA;
  FUNCTION CF_ICMSST_TAX_AMOUNTFORMULA(C_DTL_TRX_LINE_ID IN NUMBER) RETURN NUMBER IS
    X_ICMSST_TAX_AMOUNT NUMBER;
    X_ICMSST_TAX_BASE_AMOUNT NUMBER;
  BEGIN
    BEGIN
      SELECT
        SUM(DECODE(ARVT.GLOBAL_ATTRIBUTE2
                  ,'Y'
                  ,RACTL.EXTENDED_AMOUNT
                  ,0)),
        SUM(DECODE(ARVT.GLOBAL_ATTRIBUTE2
                  ,'Y'
                  ,FND_NUMBER.CANONICAL_TO_NUMBER(RACTL.GLOBAL_ATTRIBUTE11)
                  ,0))
      INTO X_ICMSST_TAX_AMOUNT,X_ICMSST_TAX_BASE_AMOUNT
      FROM
        RA_CUSTOMER_TRX_LINES RACTL,
        AR_VAT_TAX ARVT
      WHERE RACTL.LINE_TYPE = 'TAX'
        AND RACTL.LINK_TO_CUST_TRX_LINE_ID = C_DTL_TRX_LINE_ID
        AND ARVT.VAT_TAX_ID = RACTL.VAT_TAX_ID
        AND TO_NUMBER(ARVT.GLOBAL_ATTRIBUTE1) = 3;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
      WHEN OTHERS THEN
        NULL;
    END;
    CP_ICMSST_TAX_BASE_AMOUNT := X_ICMSST_TAX_BASE_AMOUNT;
    RETURN (X_ICMSST_TAX_AMOUNT);
  END CF_ICMSST_TAX_AMOUNTFORMULA;
  FUNCTION CF_ITEM_CODEFORMULA(C_INVENTORY_ID IN NUMBER) RETURN VARCHAR2 IS
    X_ITEM_CODE VARCHAR2(150);
  BEGIN
    X_ITEM_CODE := NULL;
    BEGIN
      IF C_INVENTORY_ID IS NOT NULL THEN
        SELECT
          MTL_SYSTEM_ITEMS.SEGMENT1
        INTO X_ITEM_CODE
        FROM
          MTL_SYSTEM_ITEMS
        WHERE MTL_SYSTEM_ITEMS.INVENTORY_ITEM_ID = C_INVENTORY_ID
          AND MTL_SYSTEM_ITEMS.ORGANIZATION_ID = H_SO_ORGANIZATION;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
    RETURN (X_ITEM_CODE);
  END CF_ITEM_CODEFORMULA;
  FUNCTION CF_TOTAL_PRICEFORMULA(CS_TOTAL_PRICE IN NUMBER
                                ,CS_TOTAL_BASE_ICMS IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF NVL(CS_TOTAL_PRICE
       ,0) = 0 THEN
      RETURN CS_TOTAL_BASE_ICMS;
    ELSE
      RETURN CS_TOTAL_PRICE;
    END IF;
    RETURN NULL;
  END CF_TOTAL_PRICEFORMULA;
  PROCEDURE PRINTING_COUNT(X_TRX_NUMBER IN VARCHAR2
                          ,CUST_TRX_ID IN NUMBER) IS
    FLAG_PRINT VARCHAR2(1);
    P_COUNT NUMBER;
    L_TRX_REC RA_CUSTOMER_TRX%ROWTYPE;
  BEGIN
    BEGIN
      SELECT
        PRINTING_PENDING,
        NVL(PRINTING_COUNT
           ,0)
      INTO FLAG_PRINT,P_COUNT
      FROM
        RA_CUSTOMER_TRX
      WHERE TRX_NUMBER = X_TRX_NUMBER
        AND CUSTOMER_TRX_ID = CUST_TRX_ID;
    END;
    IF NVL(FLAG_PRINT
       ,'Y') = 'Y' THEN
      ARP_CT_PKG.LOCK_FETCH_P(L_TRX_REC
                             ,CUST_TRX_ID);
      L_TRX_REC.PRINTING_ORIGINAL_DATE := SYSDATE;
      L_TRX_REC.PRINTING_LAST_PRINTED := SYSDATE;
      L_TRX_REC.PRINTING_COUNT := 1;
      L_TRX_REC.PRINTING_PENDING := 'N';
      ARP_CT_PKG.UPDATE_P_PRINT(L_TRX_REC
                               ,CUST_TRX_ID);
    ELSE
      ARP_CT_PKG.LOCK_FETCH_P(L_TRX_REC
                             ,CUST_TRX_ID);
      L_TRX_REC.PRINTING_LAST_PRINTED := SYSDATE;
      L_TRX_REC.PRINTING_COUNT := P_COUNT + 1;
      ARP_CT_PKG.UPDATE_P_PRINT(L_TRX_REC
                               ,CUST_TRX_ID);
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END PRINTING_COUNT;
  FUNCTION CCF_STATE_INSC_SUBSTITUTIONFOR(C_SHIP_TO_SITE_USE_ID IN NUMBER
                                         ,C_TRX_DATE IN DATE) RETURN VARCHAR2 IS
    X_TRIB_SUBST_INSCRIPTION VARCHAR2(30);
  BEGIN
    BEGIN
      SELECT
        LOC.TRIB_SUBST_INSCRIPTION
      INTO X_TRIB_SUBST_INSCRIPTION
      FROM
        JL_ZZ_AR_TX_LOCN LOC,
        AR_SYSTEM_PARAMETERS ARSP,
        HZ_CUST_ACCT_SITES AD,
        HZ_LOCATIONS LOCN,
        HZ_PARTY_SITES PST,
        HZ_CUST_SITE_USES SU,
        HZ_GEOGRAPHIES GEO,
        HR_LOCATIONS HRL,
        HR_ORGANIZATION_UNITS ORG
      WHERE ORG.ORGANIZATION_ID = H_OPERATION_UNIT
        AND HRL.LOCATION_ID = ORG.LOCATION_ID
        AND LOC.SHIP_FROM_CODE = HRL.REGION_2
        AND SU.SITE_USE_ID = C_SHIP_TO_SITE_USE_ID
        AND SU.CUST_ACCT_SITE_ID = AD.CUST_ACCT_SITE_ID
        AND AD.PARTY_SITE_ID = PST.PARTY_SITE_ID
        AND PST.LOCATION_ID = LOCN.LOCATION_ID
        AND LOC.SHIP_TO_SEGMENT_ID = GEO.GEOGRAPHY_ID
        AND UPPER(GEO.GEOGRAPHY_NAME) = UPPER(DECODE(ARSP.GLOBAL_ATTRIBUTE9
                  ,'STATE'
                  ,LOCN.STATE
                  ,LOCN.PROVINCE))
        AND GEO.GEOGRAPHY_TYPE = ARSP.GLOBAL_ATTRIBUTE9
        AND LOC.TAX_CATEGORY_ID = 1
        AND LOC.END_DATE_ACTIVE >= C_TRX_DATE
        AND NVL(LOC.START_DATE_ACTIVE
         ,C_TRX_DATE) <= C_TRX_DATE;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
      WHEN OTHERS THEN
        NULL;
    END;
    RETURN (X_TRIB_SUBST_INSCRIPTION);
  END CCF_STATE_INSC_SUBSTITUTIONFOR;
  FUNCTION CF_BRANDFORMULA RETURN VARCHAR2 IS
    X_BRAND VARCHAR2(150);
  BEGIN
    BEGIN
      SELECT
        HRL.GLOBAL_ATTRIBUTE5
      INTO X_BRAND
      FROM
        HR_LOCATIONS HRL,
        HR_ORGANIZATION_UNITS ORG
      WHERE ORG.ORGANIZATION_ID = H_OPERATION_UNIT
        AND HRL.LOCATION_ID = ORG.LOCATION_ID;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
      WHEN OTHERS THEN
        NULL;
    END;
    RETURN (X_BRAND);
  END CF_BRANDFORMULA;
  FUNCTION CF_AMOUNT_WORDSFORMULA(CS_AMOUNT_DUE IN NUMBER) RETURN VARCHAR2 IS
    L_AMOUNT_N_WORDS VARCHAR2(2000);
  BEGIN
    L_AMOUNT_N_WORDS := BR_CONVERT_AMOUNT(CS_AMOUNT_DUE
                                         ,'REAL');
    RETURN (L_AMOUNT_N_WORDS);
  END CF_AMOUNT_WORDSFORMULA;
  FUNCTION SET_P_WHERE RETURN BOOLEAN IS
    X_PRINT_FLAG VARCHAR2(1);
  BEGIN
    X_PRINT_FLAG := 'N';
    BEGIN
      SELECT
        SUBSTR(NVL(GLOBAL_ATTRIBUTE12
                  ,'N')
              ,1
              ,1)
      INTO X_PRINT_FLAG
      FROM
        AR_SYSTEM_PARAMETERS;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
    C_INV_FORM_PREDICATE := NULL;
    IF (P_INVOICE_PRINT_SUBMIT IS NOT NULL) THEN
      IF (P_INVOICE_PRINT_SUBMIT = 'SPECIFIC_INVOICE') THEN
        C_INV_FORM_PREDICATE := 'and ract.customer_trx_id =' || TO_CHAR(P_CUSTOMER_TRX_ID);
      ELSIF (P_INVOICE_PRINT_SUBMIT = 'BATCH_INVOICE') THEN
        IF X_PRINT_FLAG = 'N' THEN
          IF ((P_ISSUE_DATE_HIGH IS NOT NULL) AND (P_TRX_NUMBER_HIGH IS NOT NULL)) THEN
            C_INV_FORM_PREDICATE := 'and to_date(substr(ract.global_attribute8,1,10),''YYYY/MM/DD'') <=' || '''' || TO_CHAR(P_ISSUE_DATE_HIGH
                                           ,'DD-MON-YYYY') || '''';
            C_INV_FORM_PREDICATE := C_INV_FORM_PREDICATE || ' and lpad(ract.trx_number,20,' || '''' || TO_CHAR(0) || '''' || ') <=' || '''' || LPAD(P_TRX_NUMBER_HIGH
                                        ,20
                                        ,'0') || '''';
          ELSIF (P_ISSUE_DATE_HIGH IS NOT NULL) THEN
            C_INV_FORM_PREDICATE := 'and to_date(substr(ract.global_attribute8,1,10),''YYYY/MM/DD'') <=' || '''' || TO_CHAR(P_ISSUE_DATE_HIGH
                                           ,'DD-MON-YYYY') || '''';
          ELSIF (P_TRX_NUMBER_HIGH IS NOT NULL) THEN
            C_INV_FORM_PREDICATE := C_INV_FORM_PREDICATE || ' and lpad(ract.trx_number,20,' || '''' || TO_CHAR(0) || '''' || ') <=' || '''' || LPAD(P_TRX_NUMBER_HIGH
                                        ,20
                                        ,'0') || '''';
          END IF;
        ELSE
          C_INV_FORM_PREDICATE := 'and ract.customer_trx_id IS NULL';
        END IF;
      ELSIF (P_INVOICE_PRINT_SUBMIT = 'AUTOINVOICE') THEN
        IF X_PRINT_FLAG = 'Y' THEN
          C_INV_FORM_PREDICATE := 'and ract.created_from = ''RAXTRX''';
        ELSE
          C_INV_FORM_PREDICATE := 'and ract.customer_trx_id IS NULL';
        END IF;
      END IF;
      IF (P_INVOICE_PRINT_SUBMIT = 'RE_PRINT_INVOICE') THEN
        C_INV_FORM_PREDICATE := 'and nvl(ract.printing_count,0) > 0';
        C_INV_FORM_PREDICATE := C_INV_FORM_PREDICATE || ' and ract.trx_number =' || '''' || P_TRX_NUMBER || '''';
      ELSE
        C_INV_FORM_PREDICATE := C_INV_FORM_PREDICATE || ' and nvl(ract.printing_count,0) = 0';
      END IF;
    ELSE
      C_INV_FORM_PREDICATE := 'and nvl(ract.printing_count,0) = 0';
    END IF;
    IF P_SUB_SERIES IS NOT NULL THEN
      C_INV_FORM_PREDICATE := C_INV_FORM_PREDICATE || ' and rabs2.batch_source_id = ' || P_SUB_SERIES;
    END IF;
    /*SRW.MESSAGE('99'
               ,C_INV_FORM_PREDICATE)*/NULL;
    RETURN (TRUE);
  END SET_P_WHERE;
  FUNCTION CF_ADDITIONAL_INFOFORMULA(C_CUSTOMER_TRX_ID IN NUMBER
                                    ,C_STATUS_TRX IN VARCHAR2) RETURN VARCHAR2 IS
    X_MEANING VARCHAR2(80);
    X_FISCAL_CODE VARCHAR2(1500);
    CURSOR C1 IS
      SELECT
        ROWNUM CURRENT_ROW,
        DECODE(PRODUCT_CATEGORY
              ,NULL
              ,PRODUCT_FISC_CLASSIFICATION
              ,PRODUCT_CATEGORY) FISCAL_CLASS_CODE
      FROM
        RA_CUSTOMER_TRX_LINES RACTL,
        ZX_LINES_DET_FACTORS ZLD
      WHERE RACTL.CUSTOMER_TRX_ID = C_CUSTOMER_TRX_ID
        AND ZLD.APPLICATION_ID = 222
        AND ZLD.ENTITY_CODE = 'TRANSACTIONS'
        AND ZLD.EVENT_CLASS_CODE in ( 'INVOICE' , 'CREDIT_MEMO' , 'DEBIT_MEMO' )
        AND ZLD.TRX_ID = C_CUSTOMER_TRX_ID
        AND ZLD.TRX_LINE_ID = RACTL.CUSTOMER_TRX_LINE_ID
        AND RACTL.LINE_TYPE = 'LINE'
      ORDER BY
        RACTL.CUSTOMER_TRX_ID ASC;
  BEGIN
    X_MEANING := NULL;
    BEGIN
      SELECT
        ARL.MEANING
      INTO X_MEANING
      FROM
        AR_LOOKUPS ARL,
        RA_CUSTOMER_TRX RACT
      WHERE RACT.STATUS_TRX = 'VD'
        AND ARL.LOOKUP_TYPE = 'INVOICE_TRX_STATUS'
        AND ARL.LOOKUP_CODE = C_STATUS_TRX;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
    X_FISCAL_CODE := NULL;
    FOR c1_rec IN C1 LOOP
      IF X_FISCAL_CODE IS NULL THEN
        X_FISCAL_CODE := TO_CHAR(C1_REC.CURRENT_ROW) || '-' || C1_REC.FISCAL_CLASS_CODE;
      ELSE
        X_FISCAL_CODE := X_FISCAL_CODE || ', ' || TO_CHAR(C1_REC.CURRENT_ROW) || '-' || C1_REC.FISCAL_CLASS_CODE;
      END IF;
    END LOOP;
    RETURN (X_FISCAL_CODE || ' ' || X_MEANING);
  END CF_ADDITIONAL_INFOFORMULA;
  FUNCTION CF_FREIGHT_STATE_INS_NUMBERFOR(SHIP_VIA IN VARCHAR2) RETURN VARCHAR2 IS
    L_F_NAME VARCHAR2(80) := NULL;
    L_JOIN_1 VARCHAR2(150) := NULL;
    L_F_ADDRESS VARCHAR2(150) := NULL;
    L_F_CITY VARCHAR2(12) := NULL;
    L_F_STATE VARCHAR2(150) := NULL;
    L_F_STATE_INS_NUMBER VARCHAR2(150) := NULL;
  BEGIN
    IF SHIP_VIA IS NOT NULL THEN
      BEGIN
        SELECT
          DESCRIPTION,
          GLOBAL_ATTRIBUTE5 || DECODE(GLOBAL_ATTRIBUTE4
                ,2
                ,'/' || GLOBAL_ATTRIBUTE6
                ,3
                ,'/' || GLOBAL_ATTRIBUTE6) || '-' || GLOBAL_ATTRIBUTE7,
          GLOBAL_ATTRIBUTE1,
          SUBSTR(GLOBAL_ATTRIBUTE2
                ,1
                ,12),
          GLOBAL_ATTRIBUTE3,
          GLOBAL_ATTRIBUTE8
        INTO L_F_NAME,L_JOIN_1,L_F_ADDRESS,L_F_CITY,L_F_STATE,L_F_STATE_INS_NUMBER
        FROM
          ORG_FREIGHT
        WHERE FREIGHT_CODE = SHIP_VIA
          AND ORGANIZATION_ID = H_SO_ORGANIZATION;
      EXCEPTION
        WHEN OTHERS THEN
          NULL;
      END;
    END IF;
    CP_FREIGHT_NAME := L_F_NAME;
    CP_FREIGHT_INSCRIPTION_NUMBER := L_JOIN_1;
    CP_FREIGHT_ADDRESS := L_F_ADDRESS;
    CP_FREIGHT_CITY := L_F_CITY;
    CP_FREIGHT_STATE := L_F_STATE;
    RETURN (L_F_STATE_INS_NUMBER);
  END CF_FREIGHT_STATE_INS_NUMBERFOR;
  FUNCTION CF_IPI_TAX_AMOUNTFORMULA(C_DTL_TRX_LINE_ID IN NUMBER) RETURN NUMBER IS
    X_IPI_TAX_RATE NUMBER;
    X_IPI_TAX_AMOUNT NUMBER;
  BEGIN
    BEGIN
      SELECT
        SUM(DECODE(ARVT.GLOBAL_ATTRIBUTE2
                  ,'Y'
                  ,RACTL.EXTENDED_AMOUNT
                  ,0)),
        SUM(DECODE(ARVT.GLOBAL_ATTRIBUTE2
                  ,'Y'
                  ,NVL(RACTL.TAX_RATE
                     ,0)
                  ,0))
      INTO X_IPI_TAX_AMOUNT,X_IPI_TAX_RATE
      FROM
        RA_CUSTOMER_TRX_LINES RACTL,
        AR_VAT_TAX ARVT
      WHERE RACTL.LINE_TYPE = 'TAX'
        AND RACTL.LINK_TO_CUST_TRX_LINE_ID = C_DTL_TRX_LINE_ID
        AND ARVT.VAT_TAX_ID = RACTL.VAT_TAX_ID
        AND TO_NUMBER(ARVT.GLOBAL_ATTRIBUTE1) = 6;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
      WHEN OTHERS THEN
        NULL;
    END;
    CP_IPI_TAX_RATE := X_IPI_TAX_RATE;
    RETURN (X_IPI_TAX_AMOUNT);
  END CF_IPI_TAX_AMOUNTFORMULA;
  FUNCTION CF_TOTAL_EXTENDED_AMOUNTFORMUL(CS_TOTAL_EXTENDED_AMOUNT IN NUMBER) RETURN NUMBER IS
    L_TOTAL NUMBER;
  BEGIN
    L_TOTAL := NVL(CS_TOTAL_EXTENDED_AMOUNT
                  ,0);
    RETURN (L_TOTAL);
  END CF_TOTAL_EXTENDED_AMOUNTFORMUL;
  FUNCTION CF_OPR_CODEFORMULA(C_OPERATION_CODE IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    RETURN (SUBSTR(C_OPERATION_CODE
                 ,1
                 ,4));
  END CF_OPR_CODEFORMULA;
  FUNCTION CF_PRINTING_COUNT(TRX_NUM IN VARCHAR2
                            ,C_CUSTOMER_TRX_ID IN NUMBER) RETURN NUMBER IS
  BEGIN
    PRINTING_COUNT(TRX_NUM
                  ,C_CUSTOMER_TRX_ID);
    RETURN (0);
  END CF_PRINTING_COUNT;
  FUNCTION CP_OPERATION_NATURE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_OPERATION_NATURE;
  END CP_OPERATION_NATURE_P;
  FUNCTION CP_OPERATION_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_OPERATION_CODE;
  END CP_OPERATION_CODE_P;
  FUNCTION CP_FREIGHT_CITY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_FREIGHT_CITY;
  END CP_FREIGHT_CITY_P;
  FUNCTION CP_FREIGHT_STATE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_FREIGHT_STATE;
  END CP_FREIGHT_STATE_P;
  FUNCTION CP_FREIGHT_ADDRESS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_FREIGHT_ADDRESS;
  END CP_FREIGHT_ADDRESS_P;
  FUNCTION CF_FREIGHT_INSCRIPTION_NUMBER RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_FREIGHT_INSCRIPTION_NUMBER;
  END CF_FREIGHT_INSCRIPTION_NUMBER;
  FUNCTION CP_FREIGHT_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_FREIGHT_NAME;
  END CP_FREIGHT_NAME_P;
  FUNCTION CP_ICMS_TAX_AMOUNT_P RETURN NUMBER IS
  BEGIN
    RETURN CP_ICMS_TAX_AMOUNT;
  END CP_ICMS_TAX_AMOUNT_P;
  FUNCTION CP_ICMS_TAX_BASE_AMOUNT_P RETURN NUMBER IS
  BEGIN
    RETURN CP_ICMS_TAX_BASE_AMOUNT;
  END CP_ICMS_TAX_BASE_AMOUNT_P;
  FUNCTION CP_IPI_TAX_RATE_P RETURN NUMBER IS
  BEGIN
    RETURN CP_IPI_TAX_RATE;
  END CP_IPI_TAX_RATE_P;
  FUNCTION CP_ICMSST_TAX_BASE_AMOUNT_P RETURN NUMBER IS
  BEGIN
    RETURN CP_ICMSST_TAX_BASE_AMOUNT;
  END CP_ICMSST_TAX_BASE_AMOUNT_P;
  FUNCTION CP_BASE_CURRENCY_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_BASE_CURRENCY_CODE;
  END CP_BASE_CURRENCY_CODE_P;
  FUNCTION CP_BASE_PRECISION_P RETURN NUMBER IS
  BEGIN
    RETURN CP_BASE_PRECISION;
  END CP_BASE_PRECISION_P;
  FUNCTION H_OPERATION_UNIT_P RETURN NUMBER IS
  BEGIN
    RETURN H_OPERATION_UNIT;
  END H_OPERATION_UNIT_P;
  FUNCTION C_INV_FORM_PREDICATE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_INV_FORM_PREDICATE;
  END C_INV_FORM_PREDICATE_P;
  FUNCTION H_SO_ORGANIZATION_P RETURN NUMBER IS
  BEGIN
    RETURN H_SO_ORGANIZATION;
  END H_SO_ORGANIZATION_P;
  PROCEDURE SET_NAME(APPLICATION IN VARCHAR2
                    ,NAME IN VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin FND_MESSAGE.SET_NAME(:APPLICATION, :NAME); end;');
    STPROC.BIND_I(APPLICATION);
    STPROC.BIND_I(NAME);
    STPROC.EXECUTE;*/
    FND_MESSAGE.SET_NAME(APPLICATION, NAME);
  END SET_NAME;
  PROCEDURE SET_TOKEN(TOKEN IN VARCHAR2
                     ,VALUE IN VARCHAR2
                     ,TRANSLATE IN BOOLEAN) IS
  BEGIN
    /*STPROC.INIT('declare TRANSLATE BOOLEAN; begin TRANSLATE := sys.diutil.int_to_bool(:TRANSLATE); FND_MESSAGE.SET_TOKEN(:TOKEN, :VALUE, TRANSLATE); end;');
    STPROC.BIND_I(TRANSLATE);
    STPROC.BIND_I(TOKEN);
    STPROC.BIND_I(VALUE);
    STPROC.EXECUTE;*/null;
  END SET_TOKEN;
  PROCEDURE RETRIEVE(MSGOUT OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin FND_MESSAGE.RETRIEVE(:MSGOUT); end;');
    STPROC.BIND_O(MSGOUT);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,MSGOUT);*/null;
  END RETRIEVE;
  PROCEDURE CLEAR IS
  BEGIN
    /*STPROC.INIT('begin FND_MESSAGE.CLEAR; end;');
    STPROC.EXECUTE;*/null;
  END CLEAR;
  FUNCTION GET_STRING(APPIN IN VARCHAR2
                     ,NAMEIN IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := FND_MESSAGE.GET_STRING(:APPIN, :NAMEIN); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(APPIN);
    STPROC.BIND_I(NAMEIN);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_STRING;
  FUNCTION GET RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := FND_MESSAGE.GET; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    X0 := FND_MESSAGE.GET;
    RETURN X0;
  END GET;
  FUNCTION GET_ENCODED RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
   /* STPROC.INIT('begin :X0 := FND_MESSAGE.GET_ENCODED; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_ENCODED;
  PROCEDURE PARSE_ENCODED(ENCODED_MESSAGE IN VARCHAR2
                         ,APP_SHORT_NAME OUT NOCOPY VARCHAR2
                         ,MESSAGE_NAME OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin FND_MESSAGE.PARSE_ENCODED(:ENCODED_MESSAGE, :APP_SHORT_NAME, :MESSAGE_NAME); end;');
    STPROC.BIND_I(ENCODED_MESSAGE);
    STPROC.BIND_O(APP_SHORT_NAME);
    STPROC.BIND_O(MESSAGE_NAME);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,APP_SHORT_NAME);
    STPROC.RETRIEVE(3
                   ,MESSAGE_NAME);*/null;
  END PARSE_ENCODED;
  PROCEDURE SET_ENCODED(ENCODED_MESSAGE IN VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin FND_MESSAGE.SET_ENCODED(:ENCODED_MESSAGE); end;');
    STPROC.BIND_I(ENCODED_MESSAGE);
    STPROC.EXECUTE;*/null;
  END SET_ENCODED;
  PROCEDURE RAISE_ERROR IS
  BEGIN
    /*STPROC.INIT('begin FND_MESSAGE.RAISE_ERROR; end;');
    STPROC.EXECUTE;*/null;
  END RAISE_ERROR;
  FUNCTION BR_CONVERT_AMOUNT(X_INVOICE_AMOUNT IN NUMBER
                            ,X_CURRENCY_NAME IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := JL_BR_AR_PRINT_AMNT.BR_CONVERT_AMOUNT(:X_INVOICE_AMOUNT, :X_CURRENCY_NAME); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(X_INVOICE_AMOUNT);
    STPROC.BIND_I(X_CURRENCY_NAME);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    X0 := JL_BR_AR_PRINT_AMNT.BR_CONVERT_AMOUNT(X_INVOICE_AMOUNT, X_CURRENCY_NAME);
    RETURN X0;
  END BR_CONVERT_AMOUNT;
END JL_JLBRRINV_XMLP_PKG;



/
