--------------------------------------------------------
--  DDL for Package Body GMD_QCR01USR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."GMD_QCR01USR_XMLP_PKG" AS
/* $Header: QCR01USRB.pls 120.0 2007/12/24 13:05:02 krreddy noship $ */
  FUNCTION DATE1CFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(DATE1CP)*/NULL;
    IF FROM_RESULT_DATE IS NOT NULL AND TO_RESULT_DATE IS NOT NULL THEN
      DATE1CP := ' and trunc(gr1.result_date) >= FND_DATE.CANONICAL_TO_DATE(''' || TO_CHAR(FROM_RESULT_DATE
                        ,'yyyy/mm/dd hh24:mi:ss') || ''') and trunc(gr1.result_date) <= FND_DATE.CANONICAL_TO_DATE(''' || TO_CHAR(TO_RESULT_DATE
                        ,'yyyy/mm/dd hh24:mi:ss') || '''' || ')';
    ELSIF FROM_RESULT_DATE IS NULL AND TO_RESULT_DATE IS NULL THEN
      DATE1CP := ' ';
    ELSIF FROM_RESULT_DATE IS NOT NULL AND TO_RESULT_DATE IS NULL THEN
      DATE1CP := ' and trunc(gr1.result_date) >= FND_DATE.CANONICAL_TO_DATE(''' || TO_CHAR(FROM_RESULT_DATE
                        ,'yyyy/mm/dd hh24:mi:ss') || '''' || ')';
    ELSIF FROM_RESULT_DATE IS NULL AND TO_RESULT_DATE IS NOT NULL THEN
      DATE1CP := ' and trunc(gr1.result_date) <= FND_DATE.CANONICAL_TO_DATE(''' || TO_CHAR(TO_RESULT_DATE
                        ,'yyyy/mm/dd hh24:mi:ss') || '''' || ')';
    END IF;
    RETURN NULL;
  END DATE1CFFORMULA;
  FUNCTION FINALCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF INCLUDE = '0' THEN
      FINAL1CP := ' ';
    ELSIF INCLUDE = '1' THEN
      FINAL1CP := ' and decode(gr1.ad_hoc_print_on_coa_ind, ''Y'', decode( gsr.evaluation_ind,''0A'',''Y'',''1V'',''Y'',''2R'',''Y'',''N''),''N'') =''Y''';
    END IF;
    RETURN NULL;
  END FINALCFFORMULA;
  FUNCTION QCUNIT_CODECFFORMULA(QC_SPEC_ID IN NUMBER
                               ,ASSAY_CODE IN VARCHAR2
                               ,QCASSY_TYP_ID IN NUMBER) RETURN VARCHAR2 IS
    QCUNIT VARCHAR2(4);
  BEGIN
    IF QC_SPEC_ID IS NULL THEN
      BEGIN
        SELECT
          TEST_UNIT
        INTO QCUNIT
        FROM
          GMD_QC_TESTS_B
        WHERE TEST_CODE = ASSAY_CODE;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RETURN (NULL);
      END;
    ELSE
      BEGIN
        SELECT
          TEST_UOM
        INTO QCUNIT
        FROM
          GMD_SPEC_TESTS_B
        WHERE SPEC_ID = QC_SPEC_ID
          AND TEST_ID = QCASSY_TYP_ID;
      END;
      RETURN (QCUNIT);
    END IF;
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN (NULL);
  END QCUNIT_CODECFFORMULA;
  FUNCTION ASSAY_DESCCFFORMULA(ASSAY_CODE IN VARCHAR2) RETURN VARCHAR2 IS
    ASSAYDESC VARCHAR2(42);
  BEGIN
    SELECT
      '[' || TEST_DESC || ']'
    INTO ASSAYDESC
    FROM
      GMD_QC_TESTS
    WHERE TEST_CODE = ASSAY_CODE;
    RETURN (ASSAYDESC);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END ASSAY_DESCCFFORMULA;
  FUNCTION MIN_SPECCFFORMULA(QC_SPEC_ID IN NUMBER
                            ,ASSAY_CODE IN VARCHAR2
                            ,MIN_CHAR IN VARCHAR2
                            ,MIN_SPEC IN NUMBER) RETURN NUMBER IS
    ACCEPTABLE_RANGE NUMBER(16);
  BEGIN
    ACCEPTABLE_RANGE := 0;
    IF QC_SPEC_ID IS NULL THEN
      BEGIN
        SELECT
          MIN_VALUE_NUM
        INTO ACCEPTABLE_RANGE
        FROM
          GMD_QC_TESTS_B
        WHERE TEST_CODE = ASSAY_CODE;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RETURN (ACCEPTABLE_RANGE);
      END;
    ELSE
      IF MIN_CHAR IS NULL THEN
        RETURN (MIN_SPEC);
      ELSE
        RETURN (NULL);
      END IF;
    END IF;
    RETURN (ACCEPTABLE_RANGE);
  END MIN_SPECCFFORMULA;
  FUNCTION MAX_SPECFORMULA(MAX_CHAR IN VARCHAR2
                          ,QC_SPEC_ID IN NUMBER
                          ,ASSAY_CODE IN VARCHAR2
                          ,MAX_SPEC IN NUMBER) RETURN NUMBER IS
    ACCEPTABLE_RANGE NUMBER;
  BEGIN
    IF MAX_CHAR IS NOT NULL THEN
      RETURN (NULL);
    END IF;
    ACCEPTABLE_RANGE := 0;
    IF QC_SPEC_ID IS NULL THEN
      BEGIN
        SELECT
          MAX_VALUE_NUM
        INTO ACCEPTABLE_RANGE
        FROM
          GMD_QC_TESTS_B
        WHERE TEST_CODE = ASSAY_CODE;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RETURN (ACCEPTABLE_RANGE);
      END;
    ELSE
      RETURN (MAX_SPEC);
    END IF;
    RETURN (ACCEPTABLE_RANGE);
  END MAX_SPECFORMULA;
  FUNCTION FROM_DATECFFORMULA(SAMPLE_NO_1 IN VARCHAR2) RETURN DATE IS
    FROMDATE DATE;
  BEGIN
    SELECT
      DISTINCT
      GISV.START_DATE
    INTO FROMDATE
    FROM
      GMD_SAMPLES GS,
      GMD_SAMPLING_EVENTS GSE,
      GMD_CUSTOMER_SPEC_VRS GISV,
      GMD_EVENT_SPEC_DISP GES
    WHERE SAMPLE_NO = SAMPLE_NO_1
      AND GS.SAMPLING_EVENT_ID = GSE.SAMPLING_EVENT_ID
      AND GSE.SAMPLING_EVENT_ID = GES.SAMPLING_EVENT_ID
      AND GES.SPEC_USED_FOR_LOT_ATTRIB_IND = 'Y'
      AND GES.SPEC_VR_ID = GISV.SPEC_VR_ID;
    RETURN (FROMDATE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END FROM_DATECFFORMULA;
  FUNCTION TODATEFORMULA(SAMPLE_NO_1 IN VARCHAR2) RETURN DATE IS
    TODATE DATE;
  BEGIN
    SELECT
      DISTINCT
      GISV.END_DATE
    INTO TODATE
    FROM
      GMD_SAMPLES GS,
      GMD_SAMPLING_EVENTS GSE,
      GMD_CUSTOMER_SPEC_VRS GISV,
      GMD_EVENT_SPEC_DISP GES
    WHERE SAMPLE_NO = SAMPLE_NO_1
      AND GS.SAMPLING_EVENT_ID = GSE.SAMPLING_EVENT_ID
      AND GSE.SAMPLING_EVENT_ID = GES.SAMPLING_EVENT_ID
      AND GES.SPEC_USED_FOR_LOT_ATTRIB_IND = 'Y'
      AND GES.SPEC_VR_ID = GISV.SPEC_VR_ID;
    RETURN (TODATE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END TODATEFORMULA;
  FUNCTION ASSAY_DESC1CFFORMULA(ASSAY_CODE2 IN VARCHAR2) RETURN VARCHAR2 IS
    ASSAYDESC VARCHAR2(42);
  BEGIN
    SELECT
      '[' || TEST_DESC || ']'
    INTO ASSAYDESC
    FROM
      GMD_QC_TESTS
    WHERE TEST_CODE = ASSAY_CODE2;
    RETURN (ASSAYDESC);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END ASSAY_DESC1CFFORMULA;
  FUNCTION QCUNIT_CODE1CFFORMULA(QC_SPEC_ID2 IN NUMBER
                                ,ASSAY_CODE2 IN VARCHAR2
                                ,QCASSY_TYP_ID1 IN NUMBER) RETURN VARCHAR2 IS
    QCUNIT VARCHAR2(4);
  BEGIN
    IF QC_SPEC_ID2 IS NULL THEN
      BEGIN
        SELECT
          TEST_UNIT
        INTO QCUNIT
        FROM
          GMD_QC_TESTS_B
        WHERE TEST_CODE = ASSAY_CODE2;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RETURN (NULL);
      END;
    ELSE
      BEGIN
        SELECT
          TEST_UOM
        INTO QCUNIT
        FROM
          GMD_SPEC_TESTS_B
        WHERE SPEC_ID = QC_SPEC_ID2
          AND TEST_ID = QCASSY_TYP_ID1;
      END;
      RETURN (QCUNIT);
    END IF;
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN (NULL);
  END QCUNIT_CODE1CFFORMULA;
  FUNCTION MIN_SPEC1CFFORMULA(QC_SPEC_ID2 IN NUMBER
                             ,ASSAY_CODE2 IN VARCHAR2
                             ,MIN_CHAR1 IN VARCHAR2
                             ,MIN_SPEC1 IN NUMBER) RETURN NUMBER IS
    ACCEPTABLE_RANGE NUMBER(16);
  BEGIN
    ACCEPTABLE_RANGE := 0;
    IF QC_SPEC_ID2 IS NULL THEN
      BEGIN
        SELECT
          MIN_VALUE_NUM
        INTO ACCEPTABLE_RANGE
        FROM
          GMD_QC_TESTS_B
        WHERE TEST_CODE = ASSAY_CODE2;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RETURN (ACCEPTABLE_RANGE);
      END;
    ELSE
      IF MIN_CHAR1 IS NULL THEN
        RETURN (MIN_SPEC1);
      ELSE
        RETURN (NULL);
      END IF;
    END IF;
    RETURN (ACCEPTABLE_RANGE);
  END MIN_SPEC1CFFORMULA;
  FUNCTION MAX_SPEC1CFFORMULA(MAX_CHAR1 IN VARCHAR2
                             ,QC_SPEC_ID2 IN NUMBER
                             ,ASSAY_CODE2 IN VARCHAR2
                             ,MAX_SPEC1 IN NUMBER) RETURN NUMBER IS
    ACCEPTABLE_RANGE NUMBER;
  BEGIN
    IF MAX_CHAR1 IS NOT NULL THEN
      RETURN (NULL);
    END IF;
    ACCEPTABLE_RANGE := 0;
    IF QC_SPEC_ID2 IS NULL THEN
      BEGIN
        SELECT
          MAX_VALUE_NUM
        INTO ACCEPTABLE_RANGE
        FROM
          GMD_QC_TESTS_B
        WHERE TEST_CODE = ASSAY_CODE2;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RETURN (ACCEPTABLE_RANGE);
      END;
    ELSE
      RETURN (MAX_SPEC1);
    END IF;
    RETURN (ACCEPTABLE_RANGE);
  END MAX_SPEC1CFFORMULA;
  FUNCTION FROM_DATE1CFFORMULA(SAMPLE_NO2 IN VARCHAR2) RETURN DATE IS
    FROMDATE1 DATE;
  BEGIN
    SELECT
      DISTINCT
      GISV.START_DATE
    INTO FROMDATE1
    FROM
      GMD_SAMPLES GS,
      GMD_SAMPLING_EVENTS GSE,
      GMD_SUPPLIER_SPEC_VRS GISV,
      GMD_EVENT_SPEC_DISP GES
    WHERE SAMPLE_NO = SAMPLE_NO2
      AND GS.SAMPLING_EVENT_ID = GSE.SAMPLING_EVENT_ID
      AND GSE.SAMPLING_EVENT_ID = GES.SAMPLING_EVENT_ID
      AND GES.SPEC_USED_FOR_LOT_ATTRIB_IND = 'Y'
      AND GES.SPEC_VR_ID = GISV.SPEC_VR_ID;
    RETURN (FROMDATE1);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END FROM_DATE1CFFORMULA;
  FUNCTION TO_DATE1CFFORMULA(SAMPLE_NO2 IN VARCHAR2) RETURN DATE IS
    TODATE1 DATE;
  BEGIN
    SELECT
      DISTINCT
      GISV.END_DATE
    INTO TODATE1
    FROM
      GMD_SAMPLES GS,
      GMD_SAMPLING_EVENTS GSE,
      GMD_SUPPLIER_SPEC_VRS GISV,
      GMD_EVENT_SPEC_DISP GES
    WHERE SAMPLE_NO = SAMPLE_NO2
      AND GS.SAMPLING_EVENT_ID = GSE.SAMPLING_EVENT_ID
      AND GSE.SAMPLING_EVENT_ID = GES.SAMPLING_EVENT_ID
      AND GES.SPEC_USED_FOR_LOT_ATTRIB_IND = 'Y'
      AND GES.SPEC_VR_ID = GISV.SPEC_VR_ID;
    RETURN (TODATE1);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END TO_DATE1CFFORMULA;
  FUNCTION TEXTCFFORMULA(TEXT_SPEC IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    IF TEXT_SPEC IS NOT NULL THEN
      RETURN (TEXT_SPEC);
    ELSE
      RETURN (NULL);
    END IF;
  END TEXTCFFORMULA;
  FUNCTION TARGETCFFORMULA(TEXT_SPEC IN VARCHAR2
                          ,TARGET_SPEC IN NUMBER
                          ,TEST_TYPE IN VARCHAR2
                          ,PRECISION IN NUMBER) RETURN CHAR IS
    L_PRECISION VARCHAR2(25);
    L_NUMBER NUMBER;
    L_TARGET_SPEC VARCHAR2(25);
  BEGIN
    IF TEXT_SPEC IS NOT NULL THEN
      RETURN (NULL);
    ELSE
      IF TARGET_SPEC IS NULL THEN
        RETURN (TARGET_SPEC);
      ELSIF TEST_TYPE in ('N','L','E') THEN
        L_PRECISION := '999999999999999D' || TO_CHAR(POWER(10
                                    ,PRECISION) - 1);
        L_NUMBER := TARGET_SPEC;
        L_TARGET_SPEC := LTRIM(TO_CHAR(TO_NUMBER(TO_CHAR(L_NUMBER))
                                      ,L_PRECISION));
        RETURN (L_TARGET_SPEC);
      END IF;
    END IF;
  END TARGETCFFORMULA;
  FUNCTION TEXT1CFFORMULA(TEXT_SPEC1 IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    IF TEXT_SPEC1 IS NOT NULL THEN
      RETURN (TEXT_SPEC1);
    ELSE
      RETURN (NULL);
    END IF;
  END TEXT1CFFORMULA;
  FUNCTION TARGET1CFFORMULA(TEXT_SPEC1 IN VARCHAR2
                           ,TARGET_SPEC1 IN NUMBER
                           ,TEST_TYPE1 IN VARCHAR2
                           ,PRECISION1 IN NUMBER) RETURN CHAR IS
    L_PRECISION VARCHAR2(25);
    L_NUMBER NUMBER;
    L_TARGET_SPEC VARCHAR2(25);
  BEGIN
    IF TEXT_SPEC1 IS NOT NULL THEN
      RETURN (NULL);
    ELSE
      IF TARGET_SPEC1 IS NULL THEN
        RETURN (TARGET_SPEC1);
      ELSIF TEST_TYPE1 in ('N','L','E') THEN
        L_PRECISION := '999999999999999D' || TO_CHAR(POWER(10
                                    ,PRECISION1) - 1);
        L_NUMBER := TARGET_SPEC1;
        L_TARGET_SPEC := LTRIM(TO_CHAR(TO_NUMBER(TO_CHAR(L_NUMBER))
                                      ,L_PRECISION));
        RETURN (L_TARGET_SPEC);
      END IF;
    END IF;
  END TARGET1CFFORMULA;
  FUNCTION TEXTTARGETFORMULA(TEXTCF IN VARCHAR2
                            ,TARGETCF IN VARCHAR2) RETURN VARCHAR2 IS
    TEXTARGET VARCHAR2(16);
  BEGIN
    IF TEXTCF IS NOT NULL THEN
      TEXTARGET := TEXTCF;
    ELSIF TARGETCF > 0 THEN
      TEXTARGET := TARGETCF;
    END IF;
    RETURN (TEXTARGET);
  END TEXTTARGETFORMULA;
  FUNCTION TEXTTARGET1CFFORMULA(TEXT1CF IN VARCHAR2
                               ,TARGET1CF IN VARCHAR2) RETURN VARCHAR2 IS
    TEXTARGET1 VARCHAR2(16);
  BEGIN
    IF TEXT1CF IS NOT NULL THEN
      TEXTARGET1 := TEXT1CF;
    ELSIF TARGET1CF > 0 THEN
      TEXTARGET1 := TARGET1CF;
    END IF;
    RETURN (TEXTARGET1);
  END TEXTTARGET1CFFORMULA;
  FUNCTION TEXTARRAYCFFORMULA(TEXTCODECF IN NUMBER) RETURN VARCHAR2 IS
    TEXT1 VARCHAR2(116);
    TEXT2 VARCHAR2(2000);
    CURSOR GET_TEXT1 IS
      SELECT
        TEXT
      FROM
        QC_TEXT_TBL
      WHERE TEXT_CODE = TEXTCODECF
        AND LINE_NO <> - 1
        AND LANG_CODE = 'US';
  BEGIN
    OPEN GET_TEXT1;
    LOOP
      FETCH GET_TEXT1
       INTO TEXT1;
      EXIT WHEN GET_TEXT1%NOTFOUND;
      TEXT2 := TEXT2 || TEXT1;
    END LOOP;
    CLOSE GET_TEXT1;
    IF SQL%NOTFOUND THEN
      RETURN (NULL);
    END IF;
    RETURN (TEXT2);
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN (NULL);
  END TEXTARRAYCFFORMULA;
  FUNCTION TEXTARRAY1CFFORMULA(TEXTCODE1CF IN NUMBER) RETURN VARCHAR2 IS
    TEXT2 VARCHAR2(116);
    TEXT3 VARCHAR2(2000);
    CURSOR GET_TEXT IS
      SELECT
        TEXT
      FROM
        QC_TEXT_TBL
      WHERE TEXT_CODE = TEXTCODE1CF
        AND LINE_NO <> - 1
        AND LANG_CODE = 'US';
  BEGIN
    OPEN GET_TEXT;
    LOOP
      FETCH GET_TEXT
       INTO TEXT2;
      EXIT WHEN GET_TEXT%NOTFOUND;
      TEXT3 := TEXT3 || TEXT2;
    END LOOP;
    CLOSE GET_TEXT;
    IF SQL%NOTFOUND THEN
      RETURN (NULL);
    END IF;
    RETURN (TEXT3);
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN (NULL);
  END TEXTARRAY1CFFORMULA;
  FUNCTION RESULT1CFFORMULA(TEXT_RESULT IN VARCHAR2
                           ,NUM_RESULT IN NUMBER) RETURN VARCHAR2 IS
    TEXTRSLT VARCHAR2(16);
  BEGIN
    IF PRINT_CONDITION = '1' THEN
      IF TEXT_RESULT IS NOT NULL THEN
        TEXTRSLT := TEXT_RESULT;
      ELSIF NUM_RESULT > 0 THEN
        TEXTRSLT := NUM_RESULT;
      END IF;
    END IF;
    RETURN (TEXTRSLT);
  END RESULT1CFFORMULA;
  FUNCTION RESULT2CFFORMULA(TEXT_RESULT2 IN VARCHAR2
                           ,NUM_RESULT2 IN NUMBER) RETURN VARCHAR2 IS
    TEXTRSLT1 VARCHAR2(16);
  BEGIN
    IF PRINT_CONDITION = '1' THEN
      IF TEXT_RESULT2 IS NOT NULL THEN
        TEXTRSLT1 := TEXT_RESULT2;
      ELSIF NUM_RESULT2 > 0 THEN
        TEXTRSLT1 := NUM_RESULT2;
      END IF;
    END IF;
    RETURN (TEXTRSLT1);
  END RESULT2CFFORMULA;
  FUNCTION TEXTARRAY2CFFORMULA(TEXT_CODE_1 IN NUMBER) RETURN VARCHAR2 IS
    TEXT2 VARCHAR2(116);
    TEXT3 VARCHAR2(2000);
    CURSOR GET_TEXT IS
      SELECT
        TEXT
      FROM
        QC_TEXT_TBL
      WHERE TEXT_CODE = TEXT_CODE_1
        AND LINE_NO <> - 1
        AND LANG_CODE = 'US';
  BEGIN
    OPEN GET_TEXT;
    LOOP
      FETCH GET_TEXT
       INTO TEXT2;
      EXIT WHEN GET_TEXT%NOTFOUND;
      TEXT3 := TEXT3 || TEXT2;
    END LOOP;
    CLOSE GET_TEXT;
    IF SQL%NOTFOUND THEN
      RETURN (NULL);
    END IF;
    RETURN (TEXT3);
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN (NULL);
  END TEXTARRAY2CFFORMULA;
  FUNCTION TEXTARRAY3CFFORMULA(TEXT_CODE2 IN NUMBER) RETURN VARCHAR2 IS
    TEXT2 VARCHAR2(116);
    TEXT3 VARCHAR2(2000);
    CURSOR GET_TEXT IS
      SELECT
        TEXT
      FROM
        QC_TEXT_TBL
      WHERE TEXT_CODE = TEXT_CODE2
        AND LINE_NO <> - 1
        AND LANG_CODE = 'US';
  BEGIN
    OPEN GET_TEXT;
    LOOP
      FETCH GET_TEXT
       INTO TEXT2;
      EXIT WHEN GET_TEXT%NOTFOUND;
      TEXT3 := TEXT3 || TEXT2;
    END LOOP;
    CLOSE GET_TEXT;
    IF SQL%NOTFOUND THEN
      RETURN (NULL);
    END IF;
    RETURN (TEXT3);
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN (NULL);
  END TEXTARRAY3CFFORMULA;
  FUNCTION ITEMCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(ITEMCP)*/NULL;
    IF FROM_ITEM IS NOT NULL AND TO_ITEM IS NOT NULL THEN
      ITEMCP := 'and msi.concatenated_segments >= ''' || FROM_ITEMCP || ''' and msi.concatenated_segments <= ''' || TO_ITEMCP || '''';
    ELSIF FROM_ITEM IS NULL AND TO_ITEM IS NULL THEN
      ITEMCP:=' ';
    ELSIF FROM_ITEM IS NOT NULL AND TO_ITEM IS NULL THEN
      ITEMCP:= 'and msi.concatenated_segments >= ''' || FROM_ITEMCP || '''';
    ELSIF FROM_ITEM IS NULL AND TO_ITEM IS NOT NULL THEN
      ITEMCP:= 'and  msi.concatenated_segments <= ''' || TO_ITEMCP || '''';
    END IF;
    RETURN NULL;
  END ITEMCFFORMULA;
  FUNCTION SAMPLECFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(SAMPLECP)*/NULL;
    IF FROM_SAMPLE IS NOT NULL AND TO_SAMPLE IS NOT NULL THEN
      SAMPLECP := ' and gs.sample_no >= ''' || FROM_SAMPLE || ''' and gs.sample_no <= ''' || TO_SAMPLE || '''';
    ELSIF FROM_SAMPLE IS NULL AND TO_SAMPLE IS NULL THEN
      SAMPLECP := ' ';
    ELSIF FROM_SAMPLE IS NOT NULL AND TO_SAMPLE IS NULL THEN
      SAMPLECP := ' and gs.sample_no >= ''' || FROM_SAMPLE || '''';
    ELSIF FROM_SAMPLE IS NULL AND TO_SAMPLE IS NOT NULL THEN
      SAMPLECP := ' and gs.sample_no <= ''' || TO_SAMPLE || '''';
    END IF;
    RETURN NULL;
  END SAMPLECFFORMULA;
  FUNCTION CUST_VENDCFFORMULA RETURN VARCHAR2 IS
    CUSTVENDTITLE VARCHAR2(80);
  BEGIN
    /*SRW.REFERENCE(CUST_VENDCP)*/NULL;
    IF REPORT_TYPE = 0 THEN
      IF FROM_CUST_VEND IS NOT NULL AND TO_CUST_VEND IS NOT NULL THEN
        CUST_VENDCP_1 := ' and cust.account_number >= ''' || FROM_CUST_VEND || ''' and cust.account_number <= ''' || TO_CUST_VEND || '''';
      ELSIF FROM_CUST_VEND IS NULL AND TO_CUST_VEND IS NULL THEN
        CUST_VENDCP_1 := ' ';
      ELSIF FROM_CUST_VEND IS NOT NULL AND TO_CUST_VEND IS NULL THEN
        CUST_VENDCP_1 := ' and cust.account_number >= ''' || FROM_CUST_VEND || '''';
      ELSIF FROM_CUST_VEND IS NULL AND TO_CUST_VEND IS NOT NULL THEN
        CUST_VENDCP_1 := ' and cust.account_number <= ''' || TO_CUST_VEND || '''';
      END IF;
    ELSIF REPORT_TYPE = 1 THEN
      IF FROM_CUST_VEND IS NOT NULL AND TO_CUST_VEND IS NOT NULL THEN
        CUST_VENDCP := ' and pvm.segment1 >= ''' || FROM_CUST_VEND || ''' and pvm.segment1 <= ''' || TO_CUST_VEND || '''';
      ELSIF FROM_CUST_VEND IS NULL AND TO_CUST_VEND IS NULL THEN
        CUST_VENDCP := ' ';
      ELSIF FROM_CUST_VEND IS NOT NULL AND TO_CUST_VEND IS NULL THEN
        CUST_VENDCP := ' and pvm.segment1 >= ''' || FROM_CUST_VEND || '''';
      ELSIF FROM_CUST_VEND IS NULL AND TO_CUST_VEND IS NOT NULL THEN
        CUST_VENDCP := ' and pvm.segment1 <= ''' || TO_CUST_VEND || '''';
      END IF;
    END IF;
    SELECT
      MEANING
    INTO CUSTVENDTITLE
    FROM
      GEM_LOOKUPS
    WHERE LOOKUP_TYPE = 'GMD_REPORT_TYPE'
      AND LOOKUP_CODE = REPORT_TYPE;
    RETURN (CUSTVENDTITLE);
  END CUST_VENDCFFORMULA;
  FUNCTION TEXTCODECFFORMULA(QC_SPEC_ID IN NUMBER) RETURN NUMBER IS
    TEXTCODE NUMBER;
  BEGIN
    SELECT
      TEXT_CODE
    INTO TEXTCODE
    FROM
      GMD_SPECIFICATIONS_B
    WHERE SPEC_ID = QC_SPEC_ID;
    RETURN (TEXTCODE);
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN (NULL);
  END TEXTCODECFFORMULA;
  FUNCTION TEXTCODE1CFFORMULA(QC_SPEC_ID2 IN NUMBER) RETURN NUMBER IS
    TEXTCODE1 NUMBER;
  BEGIN
    SELECT
      TEXT_CODE
    INTO TEXTCODE1
    FROM
      GMD_SPECIFICATIONS_B
    WHERE SPEC_ID = QC_SPEC_ID2;
    RETURN (TEXTCODE1);
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN (NULL);
  END TEXTCODE1CFFORMULA;
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    P_ROWS := 0;
    RETURN (TRUE);
  END BEFOREREPORT;
  FUNCTION FROM_ITEMCFFORMULA RETURN VARCHAR2 IS
    L_FROM_ITEM VARCHAR2(240);
  BEGIN
    IF FROM_ITEM IS NULL THEN
      FROM_ITEMCP := SY_ALL;
    ELSE
      SELECT
        DISTINCT
        CONCATENATED_SEGMENTS
      INTO L_FROM_ITEM
      FROM
        MTL_SYSTEM_ITEMS_KFV
      WHERE INVENTORY_ITEM_ID = FROM_ITEM;
      FROM_ITEMCP := L_FROM_ITEM;
    END IF;
    RETURN (FROM_ITEMCP);
  END FROM_ITEMCFFORMULA;
  FUNCTION TO_ITEMCFFORMULA RETURN VARCHAR2 IS
    L_TO_ITEM VARCHAR2(240);
  BEGIN
    IF TO_ITEM IS NULL THEN
      TO_ITEMCP := SY_ALL;
    ELSE
      SELECT
        DISTINCT
        CONCATENATED_SEGMENTS
      INTO L_TO_ITEM
      FROM
        MTL_SYSTEM_ITEMS_KFV
      WHERE INVENTORY_ITEM_ID = TO_ITEM;
      TO_ITEMCP := L_TO_ITEM;
    END IF;
    RETURN (TO_ITEMCP);
  END TO_ITEMCFFORMULA;
  FUNCTION FROM_SAMPLECFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF FROM_SAMPLE IS NULL THEN
      FROM_SAMPLECP := SY_ALL;
    ELSE
      FROM_SAMPLECP := FROM_SAMPLE;
    END IF;
    RETURN (FROM_SAMPLECP);
  END FROM_SAMPLECFFORMULA;
  FUNCTION TO_SAMPLECFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF TO_SAMPLE IS NULL THEN
      TO_SAMPLECP := SY_ALL;
    ELSE
      TO_SAMPLECP := TO_SAMPLE;
    END IF;
    RETURN (TO_SAMPLECP);
  END TO_SAMPLECFFORMULA;
  FUNCTION FROM_CUST_VENDCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF FROM_CUST_VEND IS NULL THEN
      FROM_CUST_VENDCP := SY_ALL;
    ELSE
      FROM_CUST_VENDCP := FROM_CUST_VEND;
    END IF;
    RETURN (FROM_CUST_VENDCP);
  END FROM_CUST_VENDCFFORMULA;
  FUNCTION TO_CUST_VENDCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF TO_CUST_VEND IS NULL THEN
      TO_CUST_VENDCP := SY_ALL;
    ELSE
      TO_CUST_VENDCP := TO_CUST_VEND;
    END IF;
    RETURN (TO_CUST_VENDCP);
  END TO_CUST_VENDCFFORMULA;
  FUNCTION FROM_RSLT_DTCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF FROM_RESULT_DATE IS NULL THEN
      FROM_RSLT_DTCP := SY_ALL;
    ELSE
      FROM_RSLT_DTCP := TO_CHAR(FROM_RESULT_DATE
                               ,'DD-MON-YYYY');
    END IF;
    RETURN (FROM_RSLT_DTCP);
  END FROM_RSLT_DTCFFORMULA;
  FUNCTION TO_RSLT_DTCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF TO_RESULT_DATE IS NULL THEN
      TO_RSLT_DTCP := SY_ALL;
    ELSE
      TO_RSLT_DTCP := TO_CHAR(TO_RESULT_DATE
                             ,'DD-MON-YYYY');
    END IF;
    RETURN (TO_RSLT_DTCP);
  END TO_RSLT_DTCFFORMULA;
  FUNCTION INCLUDECFFORMULA RETURN VARCHAR2 IS
    INCLUDE1 VARCHAR2(80);
  BEGIN
    IF INCLUDE = '0' THEN
      SELECT
        MEANING
      INTO INCLUDE1
      FROM
        GEM_LOOKUPS
      WHERE LOOKUP_CODE = '0'
        AND LOOKUP_TYPE = 'QC_INCLUDE';
    ELSIF INCLUDE = '1' THEN
      SELECT
        MEANING
      INTO INCLUDE1
      FROM
        GEM_LOOKUPS
      WHERE LOOKUP_CODE = '1'
        AND LOOKUP_TYPE = 'QC_INCLUDE';
    END IF;
    RETURN (INCLUDE1);
  END INCLUDECFFORMULA;
  FUNCTION PRINTCFFORMULA RETURN VARCHAR2 IS
    PRINT1 VARCHAR2(80);
  BEGIN
    IF PRINT_CONDITION = '0' THEN
      SELECT
        MEANING
      INTO PRINT1
      FROM
        GEM_LOOKUPS
      WHERE LOOKUP_CODE = '0'
        AND LOOKUP_TYPE = 'QC_PRINT';
    ELSIF PRINT_CONDITION = '1' THEN
      SELECT
        MEANING
      INTO PRINT1
      FROM
        GEM_LOOKUPS
      WHERE LOOKUP_CODE = '1'
        AND LOOKUP_TYPE = 'QC_PRINT';
    ELSIF PRINT_CONDITION = '2' THEN
      SELECT
        MEANING
      INTO PRINT1
      FROM
        GEM_LOOKUPS
      WHERE LOOKUP_CODE = '2'
        AND LOOKUP_TYPE = 'QC_PRINT';
    ELSIF PRINT_CONDITION = '3' THEN
      SELECT
        MEANING
      INTO PRINT1
      FROM
        GEM_LOOKUPS
      WHERE LOOKUP_CODE = '3'
        AND LOOKUP_TYPE = 'QC_PRINT';
    END IF;
    RETURN (PRINT1);
  END PRINTCFFORMULA;
  FUNCTION ACCEPT_FINALCFFORMULA(ACCEPT_ANYWAY IN VARCHAR2
                                ,FINAL_MARK IN VARCHAR2) RETURN VARCHAR2 IS
    TEMP1 VARCHAR2(80);
    TEMP2 VARCHAR2(80);
  BEGIN
    SELECT
      MEANING
    INTO TEMP1
    FROM
      FND_LOOKUP_VALUES
    WHERE LOOKUP_TYPE = 'GMD_QC_YES_NO'
      AND LOOKUP_CODE = ACCEPT_ANYWAY
      AND LANGUAGE = USERENV('LANG');
    ACCEPT_CP := TEMP1;
    SELECT
      MEANING
    INTO TEMP2
    FROM
      FND_LOOKUP_VALUES
    WHERE LOOKUP_TYPE = 'GMD_QC_YES_NO'
      AND LOOKUP_CODE = FINAL_MARK
      AND LANGUAGE = USERENV('LANG');
    FINAL_CP := TEMP2;
    RETURN NULL;
    RETURN NULL;
  END ACCEPT_FINALCFFORMULA;
  FUNCTION ACCEPT_FINALCFFORMULA0037(ACCEPT_ANYWAY1 IN VARCHAR2
                                    ,FINAL_MARK1 IN VARCHAR2) RETURN VARCHAR2 IS
    TEMP1 VARCHAR2(80);
    TEMP2 VARCHAR2(80);
  BEGIN
    SELECT
      MEANING
    INTO TEMP1
    FROM
      FND_LOOKUP_VALUES
    WHERE LOOKUP_TYPE = 'GMD_QC_YES_NO'
      AND LOOKUP_CODE = ACCEPT_ANYWAY1
      AND LANGUAGE = USERENV('LANG');
    ACCEPT1_CP := TEMP1;
    SELECT
      MEANING
    INTO TEMP2
    FROM
      FND_LOOKUP_VALUES
    WHERE LOOKUP_TYPE = 'GMD_QC_YES_NO'
      AND LOOKUP_CODE = FINAL_MARK1
      AND LANGUAGE = USERENV('LANG');
    FINAL1_CP := TEMP2;
    RETURN NULL;
  END ACCEPT_FINALCFFORMULA0037;
  PROCEDURE GMD_QCR01USR_XMLP_PKG_HEADER IS
  BEGIN
    NULL;
  END GMD_QCR01USR_XMLP_PKG_HEADER;
  FUNCTION LOTNOCFFORMULA RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(LOTNOCP)*/NULL;
    IF FROM_LOTNO IS NOT NULL AND TO_LOTNO IS NOT NULL THEN
      LOTNOCP := '  and gs.lot_number >= ''' || FROM_LOTNO || ''' and gs.lot_number  <= ''' || TO_LOTNO || '''';
    ELSIF FROM_LOTNO IS NULL AND TO_LOTNO IS NULL THEN
      LOTNOCP := ' ';
    ELSIF FROM_LOTNO IS NOT NULL AND TO_LOTNO IS NULL THEN
      LOTNOCP := ' and gs.lot_number >= ''' || FROM_LOTNO || '''';
    ELSIF FROM_LOTNO IS NULL AND TO_LOTNO IS NOT NULL THEN
      LOTNOCP := ' and gs.lot_number <= ''' || TO_LOTNO || '''';
    END IF;
    RETURN NULL;
  END LOTNOCFFORMULA;
  FUNCTION FROM_LOTNOCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF FROM_LOTNO IS NULL THEN
      FROM_LOTNOCP := SY_ALL;
    ELSE
      FROM_LOTNOCP := FROM_LOTNO;
    END IF;
    RETURN (FROM_LOTNOCP);
  END FROM_LOTNOCFFORMULA;
  FUNCTION TO_LOTNOCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF TO_LOTNO IS NULL THEN
      TO_LOTNOCP := SY_ALL;
    ELSE
      TO_LOTNOCP := TO_LOTNO;
    END IF;
    RETURN (TO_LOTNOCP);
  END TO_LOTNOCFFORMULA;
  FUNCTION BEFOREPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END BEFOREPFORM;
  FUNCTION TARGET_DISPCFFORMULA(ASSAY_CODE IN VARCHAR2
                               ,QCASSY_TYP_ID IN NUMBER
                               ,TARGETCF IN VARCHAR2) RETURN CHAR IS
    ASSAYVALUE VARCHAR2(240);
    ASSAYTYPE VARCHAR2(2);
  BEGIN
    IF ASSAY_CODE IS NULL THEN
      RETURN (NULL);
    END IF;
    SELECT
      DISTINCT
      TEST_TYPE
    INTO ASSAYTYPE
    FROM
      GMD_QC_TESTS_B
    WHERE TEST_CODE = ASSAY_CODE;
    IF ASSAYTYPE = 'L' THEN
      BEGIN
        SELECT
          DISPLAY_LABEL_NUMERIC_RANGE
        INTO ASSAYVALUE
        FROM
          GMD_QC_TEST_VALUES
        WHERE TEST_ID = QCASSY_TYP_ID
          AND ( MIN_NUM <= TARGETCF
        OR MIN_NUM IS NULL )
          AND ( MAX_NUM >= TARGETCF
        OR MAX_NUM IS NULL );
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          NULL;
      END;
    END IF;
    ASSAY_TYPECP := ASSAYTYPE;
    RETURN (ASSAYVALUE);
  END TARGET_DISPCFFORMULA;
  FUNCTION MIN_DISPCFFORMULA(QCASSY_TYP_ID IN NUMBER
                            ,MIN_SPECCF IN NUMBER) RETURN CHAR IS
    ASSAYVALUE VARCHAR2(240);
    ASSAYTYPE VARCHAR2(1);
  BEGIN
    IF ASSAY_TYPECP = 'L' THEN
      BEGIN
        SELECT
          DISPLAY_LABEL_NUMERIC_RANGE
        INTO ASSAYVALUE
        FROM
          GMD_QC_TEST_VALUES
        WHERE TEST_ID = QCASSY_TYP_ID
          AND ( MIN_NUM <= MIN_SPECCF
        OR MIN_NUM IS NULL )
          AND ( MAX_NUM >= MIN_SPECCF
        OR MAX_NUM IS NULL );
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          ASSAYVALUE := ' ';
      END;
    END IF;
    RETURN (ASSAYVALUE);
  END MIN_DISPCFFORMULA;
  FUNCTION MAX_DISPCFFORMULA(QCASSY_TYP_ID IN NUMBER
                            ,MAX_SPECCF IN NUMBER) RETURN CHAR IS
    ASSAYVALUE VARCHAR2(240);
  BEGIN
    IF ASSAY_TYPECP = 'L' THEN
      BEGIN
        SELECT
          DISPLAY_LABEL_NUMERIC_RANGE
        INTO ASSAYVALUE
        FROM
          GMD_QC_TEST_VALUES
        WHERE TEST_ID = QCASSY_TYP_ID
          AND ( MIN_NUM <= MAX_SPECCF
        OR MIN_NUM IS NULL )
          AND ( MAX_NUM >= MAX_SPECCF
        OR MAX_NUM IS NULL );
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          ASSAYVALUE := ' ';
      END;
    END IF;
    RETURN (ASSAYVALUE);
  END MAX_DISPCFFORMULA;
  FUNCTION MAX_DISP1CFFORMULA(QCASSY_TYP_ID1 IN NUMBER
                             ,MAX_SPEC1CF IN NUMBER) RETURN CHAR IS
    ASSAYVALUE VARCHAR2(240);
  BEGIN
    IF ASSAY_TYPE1CP = 'L' THEN
      BEGIN
        SELECT
          DISPLAY_LABEL_NUMERIC_RANGE
        INTO ASSAYVALUE
        FROM
          GMD_QC_TEST_VALUES
        WHERE TEST_ID = QCASSY_TYP_ID1
          AND ( MIN_NUM <= MAX_SPEC1CF
        OR MIN_NUM IS NULL )
          AND ( MAX_NUM >= MAX_SPEC1CF
        OR MAX_NUM IS NULL );
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          ASSAYVALUE := ' ';
      END;
    END IF;
    RETURN (ASSAYVALUE);
  END MAX_DISP1CFFORMULA;
  FUNCTION MIN_DISP1CFFORMULA(QCASSY_TYP_ID1 IN NUMBER
                             ,MIN_SPEC1CF IN NUMBER) RETURN CHAR IS
    ASSAYVALUE VARCHAR2(240);
    ASSAYTYPE VARCHAR2(1);
  BEGIN
    IF ASSAY_TYPE1CP = 'L' THEN
      BEGIN
        SELECT
          DISPLAY_LABEL_NUMERIC_RANGE
        INTO ASSAYVALUE
        FROM
          GMD_QC_TEST_VALUES
        WHERE TEST_ID = QCASSY_TYP_ID1
          AND ( MIN_NUM <= MIN_SPEC1CF
        OR MIN_NUM IS NULL )
          AND ( MAX_NUM >= MIN_SPEC1CF
        OR MAX_NUM IS NULL );
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          ASSAYVALUE := ' ';
      END;
    END IF;
    RETURN (ASSAYVALUE);
  END MIN_DISP1CFFORMULA;
  FUNCTION TARGET_DISP1CFFORMULA(ASSAY_CODE2 IN VARCHAR2
                                ,QCASSY_TYP_ID1 IN NUMBER
                                ,TARGET1CF IN VARCHAR2) RETURN CHAR IS
    ASSAYVALUE VARCHAR2(240);
    ASSAYTYPE VARCHAR2(2);
  BEGIN
    IF ASSAY_CODE2 IS NULL THEN
      RETURN (NULL);
    END IF;
    SELECT
      DISTINCT
      TEST_TYPE
    INTO ASSAYTYPE
    FROM
      GMD_QC_TESTS_B
    WHERE TEST_CODE = ASSAY_CODE2;
    IF ASSAYTYPE = 'L' THEN
      BEGIN
        SELECT
          DISPLAY_LABEL_NUMERIC_RANGE
        INTO ASSAYVALUE
        FROM
          GMD_QC_TEST_VALUES
        WHERE TEST_ID = QCASSY_TYP_ID1
          AND ( MIN_NUM <= TARGET1CF
        OR MIN_NUM IS NULL )
          AND ( MAX_NUM >= TARGET1CF
        OR MAX_NUM IS NULL );
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          NULL;
      END;
    END IF;
    ASSAY_TYPE1CP := ASSAYTYPE;
    RETURN (ASSAYVALUE);
  END TARGET_DISP1CFFORMULA;
  FUNCTION RESULT_DISP1CFFORMULA(QCASSY_TYP_ID1 IN NUMBER
                                ,NUM_RESULT2 IN NUMBER) RETURN CHAR IS
    ASSAYVALUE VARCHAR2(240);
  BEGIN
    IF ASSAY_TYPE1CP = 'L' THEN
      BEGIN
        SELECT
          DISPLAY_LABEL_NUMERIC_RANGE
        INTO ASSAYVALUE
        FROM
          GMD_QC_TEST_VALUES
        WHERE TEST_ID = QCASSY_TYP_ID1
          AND ( MIN_NUM <= NUM_RESULT2
        OR MIN_NUM IS NULL )
          AND ( MAX_NUM >= NUM_RESULT2
        OR MAX_NUM IS NULL );
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          ASSAYVALUE := ' ';
      END;
    END IF;
    RETURN (ASSAYVALUE);
  END RESULT_DISP1CFFORMULA;
  FUNCTION RESULT_DISPCFFORMULA(QCASSY_TYP_ID IN NUMBER
                               ,NUM_RESULT IN NUMBER) RETURN CHAR IS
    ASSAYVALUE VARCHAR2(240);
  BEGIN
    IF ASSAY_TYPECP = 'L' THEN
      BEGIN
        SELECT
          DISPLAY_LABEL_NUMERIC_RANGE
        INTO ASSAYVALUE
        FROM
          GMD_QC_TEST_VALUES
        WHERE TEST_ID = QCASSY_TYP_ID
          AND ( MIN_NUM <= NUM_RESULT
        OR MIN_NUM IS NULL )
          AND ( MAX_NUM >= NUM_RESULT
        OR MAX_NUM IS NULL );
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          ASSAYVALUE := ' ';
      END;
    END IF;
    RETURN (ASSAYVALUE);
  END RESULT_DISPCFFORMULA;
  FUNCTION MIN_CHARCFFORMULA(MIN_CHAR IN VARCHAR2) RETURN CHAR IS
  BEGIN
    IF MIN_CHAR IS NULL THEN
      RETURN (NULL);
    ELSE
      RETURN (MIN_CHAR);
    END IF;
  END MIN_CHARCFFORMULA;
  FUNCTION MIN_CHAR1CFFORMULA(MIN_CHAR1 IN VARCHAR2) RETURN CHAR IS
  BEGIN
    IF MIN_CHAR1 IS NULL THEN
      RETURN (NULL);
    ELSE
      RETURN (MIN_CHAR1);
    END IF;
  END MIN_CHAR1CFFORMULA;
  FUNCTION MAX_CHARCFFORMULA(MAX_CHAR IN VARCHAR2) RETURN CHAR IS
  BEGIN
    IF MAX_CHAR IS NULL THEN
      RETURN (NULL);
    ELSE
      RETURN (MAX_CHAR);
    END IF;
  END MAX_CHARCFFORMULA;
  FUNCTION MAX_CHAR1CFFORMULA(MAX_CHAR1 IN VARCHAR2) RETURN CHAR IS
  BEGIN
    IF MAX_CHAR1 IS NULL THEN
      RETURN (NULL);
    ELSE
      RETURN (MAX_CHAR1);
    END IF;
  END MAX_CHAR1CFFORMULA;
  FUNCTION NUM_RESULT2CFFORMULA(TEXT_RESULT2 IN VARCHAR2
                               ,NUM_RESULT2 IN NUMBER
                               ,TEST_TYPE1 IN VARCHAR2
                               ,PRECISION1 IN NUMBER) RETURN CHAR IS
    L_PRECISION VARCHAR2(25);
    L_NUMBER NUMBER;
    L_NUM_RESULT VARCHAR2(25);
  BEGIN
    IF TEXT_RESULT2 IS NOT NULL THEN
      RETURN (NULL);
    ELSE
      IF NUM_RESULT2 IS NULL THEN
        RETURN (NUM_RESULT2);
      ELSIF TEST_TYPE1 in ('N','L','E') THEN
        L_PRECISION := '999999999999999D' || TO_CHAR(POWER(10
                                    ,PRECISION1) - 1);
        L_NUMBER := NUM_RESULT2;
        L_NUM_RESULT := LTRIM(TO_CHAR(TO_NUMBER(TO_CHAR(L_NUMBER))
                                     ,L_PRECISION));
        RETURN (L_NUM_RESULT);
      END IF;
    END IF;
  END NUM_RESULT2CFFORMULA;
  FUNCTION TEXT_RESULT2CFFORMULA(TEXT_RESULT2 IN VARCHAR2) RETURN CHAR IS
  BEGIN
    IF TEXT_RESULT2 IS NOT NULL THEN
      RETURN (TEXT_RESULT2);
    ELSE
      RETURN (NULL);
    END IF;
  END TEXT_RESULT2CFFORMULA;
  FUNCTION TEXT_RESULTCFFORMULA(TEXT_RESULT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    IF TEXT_RESULT IS NOT NULL THEN
      RETURN (TEXT_RESULT);
    ELSE
      RETURN (NULL);
    END IF;
  END TEXT_RESULTCFFORMULA;
  FUNCTION NUM_RESULTCFFORMULA(TEXT_RESULT IN VARCHAR2
                              ,NUM_RESULT IN NUMBER
                              ,TEST_TYPE IN VARCHAR2
                              ,PRECISION IN NUMBER) RETURN CHAR IS
    L_PRECISION VARCHAR2(25);
    L_NUMBER NUMBER;
    L_NUM_RESULT VARCHAR2(25);
  BEGIN
    IF TEXT_RESULT IS NOT NULL THEN
      RETURN (NULL);
    ELSE
      IF NUM_RESULT IS NULL THEN
        RETURN (NUM_RESULT);
      ELSIF TEST_TYPE in ('N','L','E') THEN
        L_PRECISION := '999999999999999D' || TO_CHAR(POWER(10
                                    ,PRECISION) - 1);
        L_NUMBER := NUM_RESULT;
        L_NUM_RESULT := LTRIM(TO_CHAR(TO_NUMBER(TO_CHAR(L_NUMBER))
                                     ,L_PRECISION));
        RETURN (L_NUM_RESULT);
      END IF;
    END IF;
  END NUM_RESULTCFFORMULA;
  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERPFORM;
  FUNCTION BETWEENPAGE RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END BETWEENPAGE;
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;
  FUNCTION SHIP_TO_SITECFFORMULA(SHIP_TO_SITE_ID IN NUMBER) RETURN CHAR IS
    LOCATION VARCHAR2(40);
  BEGIN
    IF SHIP_TO_SITE_ID IS NOT NULL THEN
      BEGIN
        SELECT
          S.LOCATION
        INTO LOCATION
        FROM
          HZ_CUST_SITE_USES_ALL S
        WHERE S.SITE_USE_ID = SHIP_TO_SITE_ID
          AND S.SITE_USE_CODE = 'SHIP_TO';
        RETURN (LOCATION);
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RETURN (NULL);
      END;
    ELSE
      RETURN (NULL);
    END IF;
  END SHIP_TO_SITECFFORMULA;
  FUNCTION ORDER_HEADERCFFORMULA(ORDER_HEADER_ID IN NUMBER) RETURN NUMBER IS
    ORDER_NUMBER NUMBER;
    ORDER_TYPE_ID NUMBER;
    ORDER_TYPE_NAME VARCHAR2(30);
  BEGIN
    IF ORDER_HEADER_ID IS NOT NULL THEN
      BEGIN
        SELECT
          H.ORDER_NUMBER,
          T.NAME
        INTO ORDER_NUMBER,ORDER_TYPE_NAME
        FROM
          OE_ORDER_HEADERS_ALL H,
          OE_TRANSACTION_TYPES_TL T
        WHERE H.HEADER_ID = ORDER_HEADER_ID
          AND H.ORDER_TYPE_ID = T.TRANSACTION_TYPE_ID
          AND T.LANGUAGE = 'US';
        ORDER_TYPECP := ORDER_TYPE_NAME;
        RETURN (ORDER_NUMBER);
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          ORDER_TYPECP := NULL;
          RETURN (NULL);
      END;
    ELSE
      ORDER_TYPECP := NULL;
      RETURN (NULL);
    END IF;
  END ORDER_HEADERCFFORMULA;
  FUNCTION OPERATING_UNITCFFORMULA(ORDER_ORG_ID IN NUMBER) RETURN CHAR IS
    OP_UNIT VARCHAR2(60);
  BEGIN
    IF ORDER_ORG_ID IS NOT NULL THEN
      BEGIN
        SELECT
          NAME
        INTO OP_UNIT
        FROM
          HR_OPERATING_UNITS
        WHERE ORGANIZATION_ID = ORDER_ORG_ID;
        RETURN (OP_UNIT);
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RETURN (NULL);
      END;
    ELSE
      RETURN (NULL);
    END IF;
  END OPERATING_UNITCFFORMULA;
  FUNCTION CF_MINFORMULA(TEST_TYPE IN VARCHAR2
                        ,PRECISION IN NUMBER
                        ,MIN_SPEC IN NUMBER
                        ,MIN_CHAR IN VARCHAR2) RETURN CHAR IS
    L_PRECISION VARCHAR2(25);
    L_NUMBER NUMBER;
    L_MIN_SPEC VARCHAR2(25);
  BEGIN
    IF TEST_TYPE in ('N','L','E') THEN
      L_PRECISION := '999999999999999D' || TO_CHAR(POWER(10
                                  ,PRECISION) - 1);
      L_NUMBER := MIN_SPEC;
      L_MIN_SPEC := LTRIM(TO_CHAR(TO_NUMBER(TO_CHAR(L_NUMBER))
                                 ,L_PRECISION));
      RETURN (L_MIN_SPEC);
    ELSE
      RETURN (MIN_CHAR);
    END IF;
  END CF_MINFORMULA;
  FUNCTION CF_MAXFORMULA(TEST_TYPE IN VARCHAR2
                        ,PRECISION IN NUMBER
                        ,MAX_SPEC IN NUMBER
                        ,MAX_CHAR IN VARCHAR2) RETURN CHAR IS
    L_PRECISION VARCHAR2(25);
    L_NUMBER NUMBER;
    L_MAX_SPEC VARCHAR2(25);
  BEGIN
    IF TEST_TYPE in ('N','L','E') THEN
      L_PRECISION := '999999999999999D' || TO_CHAR(POWER(10
                                  ,PRECISION) - 1);
      L_NUMBER := MAX_SPEC;
      L_MAX_SPEC := LTRIM(TO_CHAR(TO_NUMBER(TO_CHAR(L_NUMBER))
                                 ,L_PRECISION));
      RETURN (L_MAX_SPEC);
    ELSE
      RETURN (MAX_CHAR);
    END IF;
  END CF_MAXFORMULA;
  FUNCTION CF_MIN1FORMULA(TEST_TYPE1 IN VARCHAR2
                         ,PRECISION1 IN NUMBER
                         ,MIN_SPEC1 IN NUMBER
                         ,MIN_CHAR1 IN VARCHAR2) RETURN CHAR IS
    L_PRECISION VARCHAR2(25);
    L_NUMBER NUMBER;
    L_MIN_SPEC VARCHAR2(25);
  BEGIN
    IF TEST_TYPE1 in ('N','L','E') THEN
      L_PRECISION := '999999999999999D' || TO_CHAR(POWER(10
                                  ,PRECISION1) - 1);
      L_NUMBER := MIN_SPEC1;
      L_MIN_SPEC := LTRIM(TO_CHAR(TO_NUMBER(TO_CHAR(L_NUMBER))
                                 ,L_PRECISION));
      RETURN (L_MIN_SPEC);
    ELSE
      RETURN (MIN_CHAR1);
    END IF;
  END CF_MIN1FORMULA;
  FUNCTION CF_MAX1FORMULA(TEST_TYPE1 IN VARCHAR2
                         ,PRECISION1 IN NUMBER
                         ,MAX_SPEC1 IN NUMBER
                         ,MAX_CHAR1 IN VARCHAR2) RETURN CHAR IS
    L_PRECISION VARCHAR2(25);
    L_NUMBER NUMBER;
    L_MAX_SPEC VARCHAR2(25);
  BEGIN
    IF TEST_TYPE1 in ('N','L','E') THEN
      L_PRECISION := '999999999999999D' || TO_CHAR(POWER(10
                                  ,PRECISION1) - 1);
      L_NUMBER := MAX_SPEC1;
      L_MAX_SPEC := LTRIM(TO_CHAR(TO_NUMBER(TO_CHAR(L_NUMBER))
                                 ,L_PRECISION));
      RETURN (L_MAX_SPEC);
    ELSE
      RETURN (MAX_CHAR1);
    END IF;
  END CF_MAX1FORMULA;
  FUNCTION ORG_CFFORMULA RETURN CHAR IS
    ORG_CODE VARCHAR2(3);
  BEGIN
    SELECT
      DISTINCT
      ORGANIZATION_CODE
    INTO ORG_CODE
    FROM
      MTL_PARAMETERS
    WHERE ORGANIZATION_ID = P_ORGANIZATION_ID;
    ORG_CP := ORG_CODE;
    RETURN (ORG_CP);
  END ORG_CFFORMULA;
  FUNCTION ORDER_TYPECP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ORDER_TYPECP;
  END ORDER_TYPECP_P;
  FUNCTION ASSAY_TYPECP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ASSAY_TYPECP;
  END ASSAY_TYPECP_P;
  FUNCTION ACCEPT_CP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ACCEPT_CP;
  END ACCEPT_CP_P;
  FUNCTION FINAL_CP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FINAL_CP;
  END FINAL_CP_P;
  FUNCTION ASSAY_TYPE1CP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ASSAY_TYPE1CP;
  END ASSAY_TYPE1CP_P;
  FUNCTION ACCEPT1_CP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ACCEPT1_CP;
  END ACCEPT1_CP_P;
  FUNCTION FINAL1_CP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FINAL1_CP;
  END FINAL1_CP_P;
  FUNCTION DATE1CP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN DATE1CP;
  END DATE1CP_P;
  FUNCTION FINAL1CP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FINAL1CP;
  END FINAL1CP_P;
  FUNCTION CUST_VENDCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CUST_VENDCP;
  END CUST_VENDCP_P;
   FUNCTION CUST_VENDCP_1_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CUST_VENDCP_1;
  END CUST_VENDCP_1_P;
  FUNCTION ITEMCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ITEMCP;
  END ITEMCP_P;
  FUNCTION SAMPLECP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SAMPLECP;
  END SAMPLECP_P;
  FUNCTION FROM_ITEMCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FROM_ITEMCP;
  END FROM_ITEMCP_P;
  FUNCTION TO_ITEMCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TO_ITEMCP;
  END TO_ITEMCP_P;
  FUNCTION FROM_SAMPLECP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FROM_SAMPLECP;
  END FROM_SAMPLECP_P;
  FUNCTION TO_SAMPLECP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TO_SAMPLECP;
  END TO_SAMPLECP_P;
  FUNCTION FROM_CUST_VENDCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FROM_CUST_VENDCP;
  END FROM_CUST_VENDCP_P;
  FUNCTION TO_CUST_VENDCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TO_CUST_VENDCP;
  END TO_CUST_VENDCP_P;
  FUNCTION FROM_RSLT_DTCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FROM_RSLT_DTCP;
  END FROM_RSLT_DTCP_P;
  FUNCTION TO_RSLT_DTCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TO_RSLT_DTCP;
  END TO_RSLT_DTCP_P;
  FUNCTION LOTNOCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN LOTNOCP;
  END LOTNOCP_P;
  FUNCTION FROM_LOTNOCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FROM_LOTNOCP;
  END FROM_LOTNOCP_P;
  FUNCTION TO_LOTNOCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TO_LOTNOCP;
  END TO_LOTNOCP_P;
  FUNCTION ORG_CP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ORG_CP;
  END ORG_CP_P;
END GMD_QCR01USR_XMLP_PKG;



/
